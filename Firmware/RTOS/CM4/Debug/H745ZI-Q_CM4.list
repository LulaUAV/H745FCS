
H745ZI-Q_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08100000  08100000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00019790  081002a0  081002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000504  08119a30  08119a30  00029a30  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08119f34  08119f34  00029f34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08119f3c  08119f3c  00029f3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08119f40  08119f40  00029f40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001e4  10000000  08119f44  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000074fc  100001e4  0811a128  000301e4  2**2
                  ALLOC
  8 .RAM_D3       00000000  38000000  38000000  000301e4  2**0
                  CONTENTS
  9 ._user_heap_stack 00000600  100076e0  100076e0  000376e0  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  000301e4  2**0
                  CONTENTS, READONLY
 11 .debug_info   0005e81f  00000000  00000000  00030214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00009ad1  00000000  00000000  0008ea33  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00002f88  00000000  00000000  00098508  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_ranges 00002c40  00000000  00000000  0009b490  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  000478cc  00000000  00000000  0009e0d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   000404e9  00000000  00000000  000e599c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    001b226c  00000000  00000000  00125e85  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000053  00000000  00000000  002d80f1  2**0
                  CONTENTS, READONLY
 19 .debug_frame  0000d8c8  00000000  00000000  002d8144  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

081002a0 <__do_global_dtors_aux>:
 81002a0:	b510      	push	{r4, lr}
 81002a2:	4c05      	ldr	r4, [pc, #20]	; (81002b8 <__do_global_dtors_aux+0x18>)
 81002a4:	7823      	ldrb	r3, [r4, #0]
 81002a6:	b933      	cbnz	r3, 81002b6 <__do_global_dtors_aux+0x16>
 81002a8:	4b04      	ldr	r3, [pc, #16]	; (81002bc <__do_global_dtors_aux+0x1c>)
 81002aa:	b113      	cbz	r3, 81002b2 <__do_global_dtors_aux+0x12>
 81002ac:	4804      	ldr	r0, [pc, #16]	; (81002c0 <__do_global_dtors_aux+0x20>)
 81002ae:	f3af 8000 	nop.w
 81002b2:	2301      	movs	r3, #1
 81002b4:	7023      	strb	r3, [r4, #0]
 81002b6:	bd10      	pop	{r4, pc}
 81002b8:	100001e4 	.word	0x100001e4
 81002bc:	00000000 	.word	0x00000000
 81002c0:	08119a18 	.word	0x08119a18

081002c4 <frame_dummy>:
 81002c4:	b508      	push	{r3, lr}
 81002c6:	4b03      	ldr	r3, [pc, #12]	; (81002d4 <frame_dummy+0x10>)
 81002c8:	b11b      	cbz	r3, 81002d2 <frame_dummy+0xe>
 81002ca:	4903      	ldr	r1, [pc, #12]	; (81002d8 <frame_dummy+0x14>)
 81002cc:	4803      	ldr	r0, [pc, #12]	; (81002dc <frame_dummy+0x18>)
 81002ce:	f3af 8000 	nop.w
 81002d2:	bd08      	pop	{r3, pc}
 81002d4:	00000000 	.word	0x00000000
 81002d8:	100001e8 	.word	0x100001e8
 81002dc:	08119a18 	.word	0x08119a18

081002e0 <strlen>:
 81002e0:	4603      	mov	r3, r0
 81002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 81002e6:	2a00      	cmp	r2, #0
 81002e8:	d1fb      	bne.n	81002e2 <strlen+0x2>
 81002ea:	1a18      	subs	r0, r3, r0
 81002ec:	3801      	subs	r0, #1
 81002ee:	4770      	bx	lr

081002f0 <memchr>:
 81002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 81002f4:	2a10      	cmp	r2, #16
 81002f6:	db2b      	blt.n	8100350 <memchr+0x60>
 81002f8:	f010 0f07 	tst.w	r0, #7
 81002fc:	d008      	beq.n	8100310 <memchr+0x20>
 81002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8100302:	3a01      	subs	r2, #1
 8100304:	428b      	cmp	r3, r1
 8100306:	d02d      	beq.n	8100364 <memchr+0x74>
 8100308:	f010 0f07 	tst.w	r0, #7
 810030c:	b342      	cbz	r2, 8100360 <memchr+0x70>
 810030e:	d1f6      	bne.n	81002fe <memchr+0xe>
 8100310:	b4f0      	push	{r4, r5, r6, r7}
 8100312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8100316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 810031a:	f022 0407 	bic.w	r4, r2, #7
 810031e:	f07f 0700 	mvns.w	r7, #0
 8100322:	2300      	movs	r3, #0
 8100324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8100328:	3c08      	subs	r4, #8
 810032a:	ea85 0501 	eor.w	r5, r5, r1
 810032e:	ea86 0601 	eor.w	r6, r6, r1
 8100332:	fa85 f547 	uadd8	r5, r5, r7
 8100336:	faa3 f587 	sel	r5, r3, r7
 810033a:	fa86 f647 	uadd8	r6, r6, r7
 810033e:	faa5 f687 	sel	r6, r5, r7
 8100342:	b98e      	cbnz	r6, 8100368 <memchr+0x78>
 8100344:	d1ee      	bne.n	8100324 <memchr+0x34>
 8100346:	bcf0      	pop	{r4, r5, r6, r7}
 8100348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 810034c:	f002 0207 	and.w	r2, r2, #7
 8100350:	b132      	cbz	r2, 8100360 <memchr+0x70>
 8100352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8100356:	3a01      	subs	r2, #1
 8100358:	ea83 0301 	eor.w	r3, r3, r1
 810035c:	b113      	cbz	r3, 8100364 <memchr+0x74>
 810035e:	d1f8      	bne.n	8100352 <memchr+0x62>
 8100360:	2000      	movs	r0, #0
 8100362:	4770      	bx	lr
 8100364:	3801      	subs	r0, #1
 8100366:	4770      	bx	lr
 8100368:	2d00      	cmp	r5, #0
 810036a:	bf06      	itte	eq
 810036c:	4635      	moveq	r5, r6
 810036e:	3803      	subeq	r0, #3
 8100370:	3807      	subne	r0, #7
 8100372:	f015 0f01 	tst.w	r5, #1
 8100376:	d107      	bne.n	8100388 <memchr+0x98>
 8100378:	3001      	adds	r0, #1
 810037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 810037e:	bf02      	ittt	eq
 8100380:	3001      	addeq	r0, #1
 8100382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8100386:	3001      	addeq	r0, #1
 8100388:	bcf0      	pop	{r4, r5, r6, r7}
 810038a:	3801      	subs	r0, #1
 810038c:	4770      	bx	lr
 810038e:	bf00      	nop

08100390 <__aeabi_drsub>:
 8100390:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8100394:	e002      	b.n	810039c <__adddf3>
 8100396:	bf00      	nop

08100398 <__aeabi_dsub>:
 8100398:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0810039c <__adddf3>:
 810039c:	b530      	push	{r4, r5, lr}
 810039e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 81003a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 81003a6:	ea94 0f05 	teq	r4, r5
 81003aa:	bf08      	it	eq
 81003ac:	ea90 0f02 	teqeq	r0, r2
 81003b0:	bf1f      	itttt	ne
 81003b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 81003b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 81003ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 81003be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 81003c2:	f000 80e2 	beq.w	810058a <__adddf3+0x1ee>
 81003c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 81003ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 81003ce:	bfb8      	it	lt
 81003d0:	426d      	neglt	r5, r5
 81003d2:	dd0c      	ble.n	81003ee <__adddf3+0x52>
 81003d4:	442c      	add	r4, r5
 81003d6:	ea80 0202 	eor.w	r2, r0, r2
 81003da:	ea81 0303 	eor.w	r3, r1, r3
 81003de:	ea82 0000 	eor.w	r0, r2, r0
 81003e2:	ea83 0101 	eor.w	r1, r3, r1
 81003e6:	ea80 0202 	eor.w	r2, r0, r2
 81003ea:	ea81 0303 	eor.w	r3, r1, r3
 81003ee:	2d36      	cmp	r5, #54	; 0x36
 81003f0:	bf88      	it	hi
 81003f2:	bd30      	pophi	{r4, r5, pc}
 81003f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 81003f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 81003fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8100400:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8100404:	d002      	beq.n	810040c <__adddf3+0x70>
 8100406:	4240      	negs	r0, r0
 8100408:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 810040c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8100410:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8100414:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8100418:	d002      	beq.n	8100420 <__adddf3+0x84>
 810041a:	4252      	negs	r2, r2
 810041c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8100420:	ea94 0f05 	teq	r4, r5
 8100424:	f000 80a7 	beq.w	8100576 <__adddf3+0x1da>
 8100428:	f1a4 0401 	sub.w	r4, r4, #1
 810042c:	f1d5 0e20 	rsbs	lr, r5, #32
 8100430:	db0d      	blt.n	810044e <__adddf3+0xb2>
 8100432:	fa02 fc0e 	lsl.w	ip, r2, lr
 8100436:	fa22 f205 	lsr.w	r2, r2, r5
 810043a:	1880      	adds	r0, r0, r2
 810043c:	f141 0100 	adc.w	r1, r1, #0
 8100440:	fa03 f20e 	lsl.w	r2, r3, lr
 8100444:	1880      	adds	r0, r0, r2
 8100446:	fa43 f305 	asr.w	r3, r3, r5
 810044a:	4159      	adcs	r1, r3
 810044c:	e00e      	b.n	810046c <__adddf3+0xd0>
 810044e:	f1a5 0520 	sub.w	r5, r5, #32
 8100452:	f10e 0e20 	add.w	lr, lr, #32
 8100456:	2a01      	cmp	r2, #1
 8100458:	fa03 fc0e 	lsl.w	ip, r3, lr
 810045c:	bf28      	it	cs
 810045e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8100462:	fa43 f305 	asr.w	r3, r3, r5
 8100466:	18c0      	adds	r0, r0, r3
 8100468:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 810046c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8100470:	d507      	bpl.n	8100482 <__adddf3+0xe6>
 8100472:	f04f 0e00 	mov.w	lr, #0
 8100476:	f1dc 0c00 	rsbs	ip, ip, #0
 810047a:	eb7e 0000 	sbcs.w	r0, lr, r0
 810047e:	eb6e 0101 	sbc.w	r1, lr, r1
 8100482:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8100486:	d31b      	bcc.n	81004c0 <__adddf3+0x124>
 8100488:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 810048c:	d30c      	bcc.n	81004a8 <__adddf3+0x10c>
 810048e:	0849      	lsrs	r1, r1, #1
 8100490:	ea5f 0030 	movs.w	r0, r0, rrx
 8100494:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8100498:	f104 0401 	add.w	r4, r4, #1
 810049c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 81004a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 81004a4:	f080 809a 	bcs.w	81005dc <__adddf3+0x240>
 81004a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 81004ac:	bf08      	it	eq
 81004ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 81004b2:	f150 0000 	adcs.w	r0, r0, #0
 81004b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 81004ba:	ea41 0105 	orr.w	r1, r1, r5
 81004be:	bd30      	pop	{r4, r5, pc}
 81004c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 81004c4:	4140      	adcs	r0, r0
 81004c6:	eb41 0101 	adc.w	r1, r1, r1
 81004ca:	3c01      	subs	r4, #1
 81004cc:	bf28      	it	cs
 81004ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 81004d2:	d2e9      	bcs.n	81004a8 <__adddf3+0x10c>
 81004d4:	f091 0f00 	teq	r1, #0
 81004d8:	bf04      	itt	eq
 81004da:	4601      	moveq	r1, r0
 81004dc:	2000      	moveq	r0, #0
 81004de:	fab1 f381 	clz	r3, r1
 81004e2:	bf08      	it	eq
 81004e4:	3320      	addeq	r3, #32
 81004e6:	f1a3 030b 	sub.w	r3, r3, #11
 81004ea:	f1b3 0220 	subs.w	r2, r3, #32
 81004ee:	da0c      	bge.n	810050a <__adddf3+0x16e>
 81004f0:	320c      	adds	r2, #12
 81004f2:	dd08      	ble.n	8100506 <__adddf3+0x16a>
 81004f4:	f102 0c14 	add.w	ip, r2, #20
 81004f8:	f1c2 020c 	rsb	r2, r2, #12
 81004fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8100500:	fa21 f102 	lsr.w	r1, r1, r2
 8100504:	e00c      	b.n	8100520 <__adddf3+0x184>
 8100506:	f102 0214 	add.w	r2, r2, #20
 810050a:	bfd8      	it	le
 810050c:	f1c2 0c20 	rsble	ip, r2, #32
 8100510:	fa01 f102 	lsl.w	r1, r1, r2
 8100514:	fa20 fc0c 	lsr.w	ip, r0, ip
 8100518:	bfdc      	itt	le
 810051a:	ea41 010c 	orrle.w	r1, r1, ip
 810051e:	4090      	lslle	r0, r2
 8100520:	1ae4      	subs	r4, r4, r3
 8100522:	bfa2      	ittt	ge
 8100524:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8100528:	4329      	orrge	r1, r5
 810052a:	bd30      	popge	{r4, r5, pc}
 810052c:	ea6f 0404 	mvn.w	r4, r4
 8100530:	3c1f      	subs	r4, #31
 8100532:	da1c      	bge.n	810056e <__adddf3+0x1d2>
 8100534:	340c      	adds	r4, #12
 8100536:	dc0e      	bgt.n	8100556 <__adddf3+0x1ba>
 8100538:	f104 0414 	add.w	r4, r4, #20
 810053c:	f1c4 0220 	rsb	r2, r4, #32
 8100540:	fa20 f004 	lsr.w	r0, r0, r4
 8100544:	fa01 f302 	lsl.w	r3, r1, r2
 8100548:	ea40 0003 	orr.w	r0, r0, r3
 810054c:	fa21 f304 	lsr.w	r3, r1, r4
 8100550:	ea45 0103 	orr.w	r1, r5, r3
 8100554:	bd30      	pop	{r4, r5, pc}
 8100556:	f1c4 040c 	rsb	r4, r4, #12
 810055a:	f1c4 0220 	rsb	r2, r4, #32
 810055e:	fa20 f002 	lsr.w	r0, r0, r2
 8100562:	fa01 f304 	lsl.w	r3, r1, r4
 8100566:	ea40 0003 	orr.w	r0, r0, r3
 810056a:	4629      	mov	r1, r5
 810056c:	bd30      	pop	{r4, r5, pc}
 810056e:	fa21 f004 	lsr.w	r0, r1, r4
 8100572:	4629      	mov	r1, r5
 8100574:	bd30      	pop	{r4, r5, pc}
 8100576:	f094 0f00 	teq	r4, #0
 810057a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 810057e:	bf06      	itte	eq
 8100580:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8100584:	3401      	addeq	r4, #1
 8100586:	3d01      	subne	r5, #1
 8100588:	e74e      	b.n	8100428 <__adddf3+0x8c>
 810058a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 810058e:	bf18      	it	ne
 8100590:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8100594:	d029      	beq.n	81005ea <__adddf3+0x24e>
 8100596:	ea94 0f05 	teq	r4, r5
 810059a:	bf08      	it	eq
 810059c:	ea90 0f02 	teqeq	r0, r2
 81005a0:	d005      	beq.n	81005ae <__adddf3+0x212>
 81005a2:	ea54 0c00 	orrs.w	ip, r4, r0
 81005a6:	bf04      	itt	eq
 81005a8:	4619      	moveq	r1, r3
 81005aa:	4610      	moveq	r0, r2
 81005ac:	bd30      	pop	{r4, r5, pc}
 81005ae:	ea91 0f03 	teq	r1, r3
 81005b2:	bf1e      	ittt	ne
 81005b4:	2100      	movne	r1, #0
 81005b6:	2000      	movne	r0, #0
 81005b8:	bd30      	popne	{r4, r5, pc}
 81005ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 81005be:	d105      	bne.n	81005cc <__adddf3+0x230>
 81005c0:	0040      	lsls	r0, r0, #1
 81005c2:	4149      	adcs	r1, r1
 81005c4:	bf28      	it	cs
 81005c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 81005ca:	bd30      	pop	{r4, r5, pc}
 81005cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 81005d0:	bf3c      	itt	cc
 81005d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 81005d6:	bd30      	popcc	{r4, r5, pc}
 81005d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 81005dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 81005e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 81005e4:	f04f 0000 	mov.w	r0, #0
 81005e8:	bd30      	pop	{r4, r5, pc}
 81005ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 81005ee:	bf1a      	itte	ne
 81005f0:	4619      	movne	r1, r3
 81005f2:	4610      	movne	r0, r2
 81005f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 81005f8:	bf1c      	itt	ne
 81005fa:	460b      	movne	r3, r1
 81005fc:	4602      	movne	r2, r0
 81005fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8100602:	bf06      	itte	eq
 8100604:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8100608:	ea91 0f03 	teqeq	r1, r3
 810060c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8100610:	bd30      	pop	{r4, r5, pc}
 8100612:	bf00      	nop

08100614 <__aeabi_ui2d>:
 8100614:	f090 0f00 	teq	r0, #0
 8100618:	bf04      	itt	eq
 810061a:	2100      	moveq	r1, #0
 810061c:	4770      	bxeq	lr
 810061e:	b530      	push	{r4, r5, lr}
 8100620:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8100624:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8100628:	f04f 0500 	mov.w	r5, #0
 810062c:	f04f 0100 	mov.w	r1, #0
 8100630:	e750      	b.n	81004d4 <__adddf3+0x138>
 8100632:	bf00      	nop

08100634 <__aeabi_i2d>:
 8100634:	f090 0f00 	teq	r0, #0
 8100638:	bf04      	itt	eq
 810063a:	2100      	moveq	r1, #0
 810063c:	4770      	bxeq	lr
 810063e:	b530      	push	{r4, r5, lr}
 8100640:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8100644:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8100648:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 810064c:	bf48      	it	mi
 810064e:	4240      	negmi	r0, r0
 8100650:	f04f 0100 	mov.w	r1, #0
 8100654:	e73e      	b.n	81004d4 <__adddf3+0x138>
 8100656:	bf00      	nop

08100658 <__aeabi_f2d>:
 8100658:	0042      	lsls	r2, r0, #1
 810065a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 810065e:	ea4f 0131 	mov.w	r1, r1, rrx
 8100662:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8100666:	bf1f      	itttt	ne
 8100668:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 810066c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8100670:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8100674:	4770      	bxne	lr
 8100676:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 810067a:	bf08      	it	eq
 810067c:	4770      	bxeq	lr
 810067e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8100682:	bf04      	itt	eq
 8100684:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8100688:	4770      	bxeq	lr
 810068a:	b530      	push	{r4, r5, lr}
 810068c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8100690:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8100694:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8100698:	e71c      	b.n	81004d4 <__adddf3+0x138>
 810069a:	bf00      	nop

0810069c <__aeabi_ul2d>:
 810069c:	ea50 0201 	orrs.w	r2, r0, r1
 81006a0:	bf08      	it	eq
 81006a2:	4770      	bxeq	lr
 81006a4:	b530      	push	{r4, r5, lr}
 81006a6:	f04f 0500 	mov.w	r5, #0
 81006aa:	e00a      	b.n	81006c2 <__aeabi_l2d+0x16>

081006ac <__aeabi_l2d>:
 81006ac:	ea50 0201 	orrs.w	r2, r0, r1
 81006b0:	bf08      	it	eq
 81006b2:	4770      	bxeq	lr
 81006b4:	b530      	push	{r4, r5, lr}
 81006b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 81006ba:	d502      	bpl.n	81006c2 <__aeabi_l2d+0x16>
 81006bc:	4240      	negs	r0, r0
 81006be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 81006c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 81006c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 81006ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 81006ce:	f43f aed8 	beq.w	8100482 <__adddf3+0xe6>
 81006d2:	f04f 0203 	mov.w	r2, #3
 81006d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 81006da:	bf18      	it	ne
 81006dc:	3203      	addne	r2, #3
 81006de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 81006e2:	bf18      	it	ne
 81006e4:	3203      	addne	r2, #3
 81006e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 81006ea:	f1c2 0320 	rsb	r3, r2, #32
 81006ee:	fa00 fc03 	lsl.w	ip, r0, r3
 81006f2:	fa20 f002 	lsr.w	r0, r0, r2
 81006f6:	fa01 fe03 	lsl.w	lr, r1, r3
 81006fa:	ea40 000e 	orr.w	r0, r0, lr
 81006fe:	fa21 f102 	lsr.w	r1, r1, r2
 8100702:	4414      	add	r4, r2
 8100704:	e6bd      	b.n	8100482 <__adddf3+0xe6>
 8100706:	bf00      	nop

08100708 <__aeabi_dmul>:
 8100708:	b570      	push	{r4, r5, r6, lr}
 810070a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 810070e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8100712:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8100716:	bf1d      	ittte	ne
 8100718:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 810071c:	ea94 0f0c 	teqne	r4, ip
 8100720:	ea95 0f0c 	teqne	r5, ip
 8100724:	f000 f8de 	bleq	81008e4 <__aeabi_dmul+0x1dc>
 8100728:	442c      	add	r4, r5
 810072a:	ea81 0603 	eor.w	r6, r1, r3
 810072e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8100732:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8100736:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 810073a:	bf18      	it	ne
 810073c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8100740:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8100744:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8100748:	d038      	beq.n	81007bc <__aeabi_dmul+0xb4>
 810074a:	fba0 ce02 	umull	ip, lr, r0, r2
 810074e:	f04f 0500 	mov.w	r5, #0
 8100752:	fbe1 e502 	umlal	lr, r5, r1, r2
 8100756:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 810075a:	fbe0 e503 	umlal	lr, r5, r0, r3
 810075e:	f04f 0600 	mov.w	r6, #0
 8100762:	fbe1 5603 	umlal	r5, r6, r1, r3
 8100766:	f09c 0f00 	teq	ip, #0
 810076a:	bf18      	it	ne
 810076c:	f04e 0e01 	orrne.w	lr, lr, #1
 8100770:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8100774:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8100778:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 810077c:	d204      	bcs.n	8100788 <__aeabi_dmul+0x80>
 810077e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8100782:	416d      	adcs	r5, r5
 8100784:	eb46 0606 	adc.w	r6, r6, r6
 8100788:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 810078c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8100790:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8100794:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8100798:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 810079c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 81007a0:	bf88      	it	hi
 81007a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 81007a6:	d81e      	bhi.n	81007e6 <__aeabi_dmul+0xde>
 81007a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 81007ac:	bf08      	it	eq
 81007ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 81007b2:	f150 0000 	adcs.w	r0, r0, #0
 81007b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 81007ba:	bd70      	pop	{r4, r5, r6, pc}
 81007bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 81007c0:	ea46 0101 	orr.w	r1, r6, r1
 81007c4:	ea40 0002 	orr.w	r0, r0, r2
 81007c8:	ea81 0103 	eor.w	r1, r1, r3
 81007cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 81007d0:	bfc2      	ittt	gt
 81007d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 81007d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 81007da:	bd70      	popgt	{r4, r5, r6, pc}
 81007dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 81007e0:	f04f 0e00 	mov.w	lr, #0
 81007e4:	3c01      	subs	r4, #1
 81007e6:	f300 80ab 	bgt.w	8100940 <__aeabi_dmul+0x238>
 81007ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 81007ee:	bfde      	ittt	le
 81007f0:	2000      	movle	r0, #0
 81007f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 81007f6:	bd70      	pople	{r4, r5, r6, pc}
 81007f8:	f1c4 0400 	rsb	r4, r4, #0
 81007fc:	3c20      	subs	r4, #32
 81007fe:	da35      	bge.n	810086c <__aeabi_dmul+0x164>
 8100800:	340c      	adds	r4, #12
 8100802:	dc1b      	bgt.n	810083c <__aeabi_dmul+0x134>
 8100804:	f104 0414 	add.w	r4, r4, #20
 8100808:	f1c4 0520 	rsb	r5, r4, #32
 810080c:	fa00 f305 	lsl.w	r3, r0, r5
 8100810:	fa20 f004 	lsr.w	r0, r0, r4
 8100814:	fa01 f205 	lsl.w	r2, r1, r5
 8100818:	ea40 0002 	orr.w	r0, r0, r2
 810081c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8100820:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8100824:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8100828:	fa21 f604 	lsr.w	r6, r1, r4
 810082c:	eb42 0106 	adc.w	r1, r2, r6
 8100830:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8100834:	bf08      	it	eq
 8100836:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 810083a:	bd70      	pop	{r4, r5, r6, pc}
 810083c:	f1c4 040c 	rsb	r4, r4, #12
 8100840:	f1c4 0520 	rsb	r5, r4, #32
 8100844:	fa00 f304 	lsl.w	r3, r0, r4
 8100848:	fa20 f005 	lsr.w	r0, r0, r5
 810084c:	fa01 f204 	lsl.w	r2, r1, r4
 8100850:	ea40 0002 	orr.w	r0, r0, r2
 8100854:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8100858:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 810085c:	f141 0100 	adc.w	r1, r1, #0
 8100860:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8100864:	bf08      	it	eq
 8100866:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 810086a:	bd70      	pop	{r4, r5, r6, pc}
 810086c:	f1c4 0520 	rsb	r5, r4, #32
 8100870:	fa00 f205 	lsl.w	r2, r0, r5
 8100874:	ea4e 0e02 	orr.w	lr, lr, r2
 8100878:	fa20 f304 	lsr.w	r3, r0, r4
 810087c:	fa01 f205 	lsl.w	r2, r1, r5
 8100880:	ea43 0302 	orr.w	r3, r3, r2
 8100884:	fa21 f004 	lsr.w	r0, r1, r4
 8100888:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 810088c:	fa21 f204 	lsr.w	r2, r1, r4
 8100890:	ea20 0002 	bic.w	r0, r0, r2
 8100894:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8100898:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 810089c:	bf08      	it	eq
 810089e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 81008a2:	bd70      	pop	{r4, r5, r6, pc}
 81008a4:	f094 0f00 	teq	r4, #0
 81008a8:	d10f      	bne.n	81008ca <__aeabi_dmul+0x1c2>
 81008aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 81008ae:	0040      	lsls	r0, r0, #1
 81008b0:	eb41 0101 	adc.w	r1, r1, r1
 81008b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 81008b8:	bf08      	it	eq
 81008ba:	3c01      	subeq	r4, #1
 81008bc:	d0f7      	beq.n	81008ae <__aeabi_dmul+0x1a6>
 81008be:	ea41 0106 	orr.w	r1, r1, r6
 81008c2:	f095 0f00 	teq	r5, #0
 81008c6:	bf18      	it	ne
 81008c8:	4770      	bxne	lr
 81008ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 81008ce:	0052      	lsls	r2, r2, #1
 81008d0:	eb43 0303 	adc.w	r3, r3, r3
 81008d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 81008d8:	bf08      	it	eq
 81008da:	3d01      	subeq	r5, #1
 81008dc:	d0f7      	beq.n	81008ce <__aeabi_dmul+0x1c6>
 81008de:	ea43 0306 	orr.w	r3, r3, r6
 81008e2:	4770      	bx	lr
 81008e4:	ea94 0f0c 	teq	r4, ip
 81008e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 81008ec:	bf18      	it	ne
 81008ee:	ea95 0f0c 	teqne	r5, ip
 81008f2:	d00c      	beq.n	810090e <__aeabi_dmul+0x206>
 81008f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 81008f8:	bf18      	it	ne
 81008fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 81008fe:	d1d1      	bne.n	81008a4 <__aeabi_dmul+0x19c>
 8100900:	ea81 0103 	eor.w	r1, r1, r3
 8100904:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8100908:	f04f 0000 	mov.w	r0, #0
 810090c:	bd70      	pop	{r4, r5, r6, pc}
 810090e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8100912:	bf06      	itte	eq
 8100914:	4610      	moveq	r0, r2
 8100916:	4619      	moveq	r1, r3
 8100918:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 810091c:	d019      	beq.n	8100952 <__aeabi_dmul+0x24a>
 810091e:	ea94 0f0c 	teq	r4, ip
 8100922:	d102      	bne.n	810092a <__aeabi_dmul+0x222>
 8100924:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8100928:	d113      	bne.n	8100952 <__aeabi_dmul+0x24a>
 810092a:	ea95 0f0c 	teq	r5, ip
 810092e:	d105      	bne.n	810093c <__aeabi_dmul+0x234>
 8100930:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8100934:	bf1c      	itt	ne
 8100936:	4610      	movne	r0, r2
 8100938:	4619      	movne	r1, r3
 810093a:	d10a      	bne.n	8100952 <__aeabi_dmul+0x24a>
 810093c:	ea81 0103 	eor.w	r1, r1, r3
 8100940:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8100944:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8100948:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 810094c:	f04f 0000 	mov.w	r0, #0
 8100950:	bd70      	pop	{r4, r5, r6, pc}
 8100952:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8100956:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 810095a:	bd70      	pop	{r4, r5, r6, pc}

0810095c <__aeabi_ddiv>:
 810095c:	b570      	push	{r4, r5, r6, lr}
 810095e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8100962:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8100966:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 810096a:	bf1d      	ittte	ne
 810096c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8100970:	ea94 0f0c 	teqne	r4, ip
 8100974:	ea95 0f0c 	teqne	r5, ip
 8100978:	f000 f8a7 	bleq	8100aca <__aeabi_ddiv+0x16e>
 810097c:	eba4 0405 	sub.w	r4, r4, r5
 8100980:	ea81 0e03 	eor.w	lr, r1, r3
 8100984:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8100988:	ea4f 3101 	mov.w	r1, r1, lsl #12
 810098c:	f000 8088 	beq.w	8100aa0 <__aeabi_ddiv+0x144>
 8100990:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8100994:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8100998:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 810099c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 81009a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 81009a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 81009a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 81009ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 81009b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 81009b4:	429d      	cmp	r5, r3
 81009b6:	bf08      	it	eq
 81009b8:	4296      	cmpeq	r6, r2
 81009ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 81009be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 81009c2:	d202      	bcs.n	81009ca <__aeabi_ddiv+0x6e>
 81009c4:	085b      	lsrs	r3, r3, #1
 81009c6:	ea4f 0232 	mov.w	r2, r2, rrx
 81009ca:	1ab6      	subs	r6, r6, r2
 81009cc:	eb65 0503 	sbc.w	r5, r5, r3
 81009d0:	085b      	lsrs	r3, r3, #1
 81009d2:	ea4f 0232 	mov.w	r2, r2, rrx
 81009d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 81009da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 81009de:	ebb6 0e02 	subs.w	lr, r6, r2
 81009e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 81009e6:	bf22      	ittt	cs
 81009e8:	1ab6      	subcs	r6, r6, r2
 81009ea:	4675      	movcs	r5, lr
 81009ec:	ea40 000c 	orrcs.w	r0, r0, ip
 81009f0:	085b      	lsrs	r3, r3, #1
 81009f2:	ea4f 0232 	mov.w	r2, r2, rrx
 81009f6:	ebb6 0e02 	subs.w	lr, r6, r2
 81009fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 81009fe:	bf22      	ittt	cs
 8100a00:	1ab6      	subcs	r6, r6, r2
 8100a02:	4675      	movcs	r5, lr
 8100a04:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8100a08:	085b      	lsrs	r3, r3, #1
 8100a0a:	ea4f 0232 	mov.w	r2, r2, rrx
 8100a0e:	ebb6 0e02 	subs.w	lr, r6, r2
 8100a12:	eb75 0e03 	sbcs.w	lr, r5, r3
 8100a16:	bf22      	ittt	cs
 8100a18:	1ab6      	subcs	r6, r6, r2
 8100a1a:	4675      	movcs	r5, lr
 8100a1c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8100a20:	085b      	lsrs	r3, r3, #1
 8100a22:	ea4f 0232 	mov.w	r2, r2, rrx
 8100a26:	ebb6 0e02 	subs.w	lr, r6, r2
 8100a2a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8100a2e:	bf22      	ittt	cs
 8100a30:	1ab6      	subcs	r6, r6, r2
 8100a32:	4675      	movcs	r5, lr
 8100a34:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8100a38:	ea55 0e06 	orrs.w	lr, r5, r6
 8100a3c:	d018      	beq.n	8100a70 <__aeabi_ddiv+0x114>
 8100a3e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8100a42:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8100a46:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8100a4a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8100a4e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8100a52:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8100a56:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8100a5a:	d1c0      	bne.n	81009de <__aeabi_ddiv+0x82>
 8100a5c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8100a60:	d10b      	bne.n	8100a7a <__aeabi_ddiv+0x11e>
 8100a62:	ea41 0100 	orr.w	r1, r1, r0
 8100a66:	f04f 0000 	mov.w	r0, #0
 8100a6a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8100a6e:	e7b6      	b.n	81009de <__aeabi_ddiv+0x82>
 8100a70:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8100a74:	bf04      	itt	eq
 8100a76:	4301      	orreq	r1, r0
 8100a78:	2000      	moveq	r0, #0
 8100a7a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8100a7e:	bf88      	it	hi
 8100a80:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8100a84:	f63f aeaf 	bhi.w	81007e6 <__aeabi_dmul+0xde>
 8100a88:	ebb5 0c03 	subs.w	ip, r5, r3
 8100a8c:	bf04      	itt	eq
 8100a8e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8100a92:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8100a96:	f150 0000 	adcs.w	r0, r0, #0
 8100a9a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8100a9e:	bd70      	pop	{r4, r5, r6, pc}
 8100aa0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8100aa4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8100aa8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8100aac:	bfc2      	ittt	gt
 8100aae:	ebd4 050c 	rsbsgt	r5, r4, ip
 8100ab2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8100ab6:	bd70      	popgt	{r4, r5, r6, pc}
 8100ab8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8100abc:	f04f 0e00 	mov.w	lr, #0
 8100ac0:	3c01      	subs	r4, #1
 8100ac2:	e690      	b.n	81007e6 <__aeabi_dmul+0xde>
 8100ac4:	ea45 0e06 	orr.w	lr, r5, r6
 8100ac8:	e68d      	b.n	81007e6 <__aeabi_dmul+0xde>
 8100aca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8100ace:	ea94 0f0c 	teq	r4, ip
 8100ad2:	bf08      	it	eq
 8100ad4:	ea95 0f0c 	teqeq	r5, ip
 8100ad8:	f43f af3b 	beq.w	8100952 <__aeabi_dmul+0x24a>
 8100adc:	ea94 0f0c 	teq	r4, ip
 8100ae0:	d10a      	bne.n	8100af8 <__aeabi_ddiv+0x19c>
 8100ae2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8100ae6:	f47f af34 	bne.w	8100952 <__aeabi_dmul+0x24a>
 8100aea:	ea95 0f0c 	teq	r5, ip
 8100aee:	f47f af25 	bne.w	810093c <__aeabi_dmul+0x234>
 8100af2:	4610      	mov	r0, r2
 8100af4:	4619      	mov	r1, r3
 8100af6:	e72c      	b.n	8100952 <__aeabi_dmul+0x24a>
 8100af8:	ea95 0f0c 	teq	r5, ip
 8100afc:	d106      	bne.n	8100b0c <__aeabi_ddiv+0x1b0>
 8100afe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8100b02:	f43f aefd 	beq.w	8100900 <__aeabi_dmul+0x1f8>
 8100b06:	4610      	mov	r0, r2
 8100b08:	4619      	mov	r1, r3
 8100b0a:	e722      	b.n	8100952 <__aeabi_dmul+0x24a>
 8100b0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8100b10:	bf18      	it	ne
 8100b12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8100b16:	f47f aec5 	bne.w	81008a4 <__aeabi_dmul+0x19c>
 8100b1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8100b1e:	f47f af0d 	bne.w	810093c <__aeabi_dmul+0x234>
 8100b22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8100b26:	f47f aeeb 	bne.w	8100900 <__aeabi_dmul+0x1f8>
 8100b2a:	e712      	b.n	8100952 <__aeabi_dmul+0x24a>

08100b2c <__gedf2>:
 8100b2c:	f04f 3cff 	mov.w	ip, #4294967295
 8100b30:	e006      	b.n	8100b40 <__cmpdf2+0x4>
 8100b32:	bf00      	nop

08100b34 <__ledf2>:
 8100b34:	f04f 0c01 	mov.w	ip, #1
 8100b38:	e002      	b.n	8100b40 <__cmpdf2+0x4>
 8100b3a:	bf00      	nop

08100b3c <__cmpdf2>:
 8100b3c:	f04f 0c01 	mov.w	ip, #1
 8100b40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8100b44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100b48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8100b50:	bf18      	it	ne
 8100b52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8100b56:	d01b      	beq.n	8100b90 <__cmpdf2+0x54>
 8100b58:	b001      	add	sp, #4
 8100b5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8100b5e:	bf0c      	ite	eq
 8100b60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8100b64:	ea91 0f03 	teqne	r1, r3
 8100b68:	bf02      	ittt	eq
 8100b6a:	ea90 0f02 	teqeq	r0, r2
 8100b6e:	2000      	moveq	r0, #0
 8100b70:	4770      	bxeq	lr
 8100b72:	f110 0f00 	cmn.w	r0, #0
 8100b76:	ea91 0f03 	teq	r1, r3
 8100b7a:	bf58      	it	pl
 8100b7c:	4299      	cmppl	r1, r3
 8100b7e:	bf08      	it	eq
 8100b80:	4290      	cmpeq	r0, r2
 8100b82:	bf2c      	ite	cs
 8100b84:	17d8      	asrcs	r0, r3, #31
 8100b86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8100b8a:	f040 0001 	orr.w	r0, r0, #1
 8100b8e:	4770      	bx	lr
 8100b90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100b94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100b98:	d102      	bne.n	8100ba0 <__cmpdf2+0x64>
 8100b9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8100b9e:	d107      	bne.n	8100bb0 <__cmpdf2+0x74>
 8100ba0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8100ba4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100ba8:	d1d6      	bne.n	8100b58 <__cmpdf2+0x1c>
 8100baa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8100bae:	d0d3      	beq.n	8100b58 <__cmpdf2+0x1c>
 8100bb0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8100bb4:	4770      	bx	lr
 8100bb6:	bf00      	nop

08100bb8 <__aeabi_cdrcmple>:
 8100bb8:	4684      	mov	ip, r0
 8100bba:	4610      	mov	r0, r2
 8100bbc:	4662      	mov	r2, ip
 8100bbe:	468c      	mov	ip, r1
 8100bc0:	4619      	mov	r1, r3
 8100bc2:	4663      	mov	r3, ip
 8100bc4:	e000      	b.n	8100bc8 <__aeabi_cdcmpeq>
 8100bc6:	bf00      	nop

08100bc8 <__aeabi_cdcmpeq>:
 8100bc8:	b501      	push	{r0, lr}
 8100bca:	f7ff ffb7 	bl	8100b3c <__cmpdf2>
 8100bce:	2800      	cmp	r0, #0
 8100bd0:	bf48      	it	mi
 8100bd2:	f110 0f00 	cmnmi.w	r0, #0
 8100bd6:	bd01      	pop	{r0, pc}

08100bd8 <__aeabi_dcmpeq>:
 8100bd8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100bdc:	f7ff fff4 	bl	8100bc8 <__aeabi_cdcmpeq>
 8100be0:	bf0c      	ite	eq
 8100be2:	2001      	moveq	r0, #1
 8100be4:	2000      	movne	r0, #0
 8100be6:	f85d fb08 	ldr.w	pc, [sp], #8
 8100bea:	bf00      	nop

08100bec <__aeabi_dcmplt>:
 8100bec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100bf0:	f7ff ffea 	bl	8100bc8 <__aeabi_cdcmpeq>
 8100bf4:	bf34      	ite	cc
 8100bf6:	2001      	movcc	r0, #1
 8100bf8:	2000      	movcs	r0, #0
 8100bfa:	f85d fb08 	ldr.w	pc, [sp], #8
 8100bfe:	bf00      	nop

08100c00 <__aeabi_dcmple>:
 8100c00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100c04:	f7ff ffe0 	bl	8100bc8 <__aeabi_cdcmpeq>
 8100c08:	bf94      	ite	ls
 8100c0a:	2001      	movls	r0, #1
 8100c0c:	2000      	movhi	r0, #0
 8100c0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8100c12:	bf00      	nop

08100c14 <__aeabi_dcmpge>:
 8100c14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100c18:	f7ff ffce 	bl	8100bb8 <__aeabi_cdrcmple>
 8100c1c:	bf94      	ite	ls
 8100c1e:	2001      	movls	r0, #1
 8100c20:	2000      	movhi	r0, #0
 8100c22:	f85d fb08 	ldr.w	pc, [sp], #8
 8100c26:	bf00      	nop

08100c28 <__aeabi_dcmpgt>:
 8100c28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100c2c:	f7ff ffc4 	bl	8100bb8 <__aeabi_cdrcmple>
 8100c30:	bf34      	ite	cc
 8100c32:	2001      	movcc	r0, #1
 8100c34:	2000      	movcs	r0, #0
 8100c36:	f85d fb08 	ldr.w	pc, [sp], #8
 8100c3a:	bf00      	nop

08100c3c <__aeabi_dcmpun>:
 8100c3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100c40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100c44:	d102      	bne.n	8100c4c <__aeabi_dcmpun+0x10>
 8100c46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8100c4a:	d10a      	bne.n	8100c62 <__aeabi_dcmpun+0x26>
 8100c4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8100c50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100c54:	d102      	bne.n	8100c5c <__aeabi_dcmpun+0x20>
 8100c56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8100c5a:	d102      	bne.n	8100c62 <__aeabi_dcmpun+0x26>
 8100c5c:	f04f 0000 	mov.w	r0, #0
 8100c60:	4770      	bx	lr
 8100c62:	f04f 0001 	mov.w	r0, #1
 8100c66:	4770      	bx	lr

08100c68 <__aeabi_d2iz>:
 8100c68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8100c6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8100c70:	d215      	bcs.n	8100c9e <__aeabi_d2iz+0x36>
 8100c72:	d511      	bpl.n	8100c98 <__aeabi_d2iz+0x30>
 8100c74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8100c78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8100c7c:	d912      	bls.n	8100ca4 <__aeabi_d2iz+0x3c>
 8100c7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8100c82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8100c86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8100c8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8100c8e:	fa23 f002 	lsr.w	r0, r3, r2
 8100c92:	bf18      	it	ne
 8100c94:	4240      	negne	r0, r0
 8100c96:	4770      	bx	lr
 8100c98:	f04f 0000 	mov.w	r0, #0
 8100c9c:	4770      	bx	lr
 8100c9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8100ca2:	d105      	bne.n	8100cb0 <__aeabi_d2iz+0x48>
 8100ca4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8100ca8:	bf08      	it	eq
 8100caa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8100cae:	4770      	bx	lr
 8100cb0:	f04f 0000 	mov.w	r0, #0
 8100cb4:	4770      	bx	lr
 8100cb6:	bf00      	nop

08100cb8 <__aeabi_uldivmod>:
 8100cb8:	b953      	cbnz	r3, 8100cd0 <__aeabi_uldivmod+0x18>
 8100cba:	b94a      	cbnz	r2, 8100cd0 <__aeabi_uldivmod+0x18>
 8100cbc:	2900      	cmp	r1, #0
 8100cbe:	bf08      	it	eq
 8100cc0:	2800      	cmpeq	r0, #0
 8100cc2:	bf1c      	itt	ne
 8100cc4:	f04f 31ff 	movne.w	r1, #4294967295
 8100cc8:	f04f 30ff 	movne.w	r0, #4294967295
 8100ccc:	f000 b96e 	b.w	8100fac <__aeabi_idiv0>
 8100cd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8100cd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8100cd8:	f000 f806 	bl	8100ce8 <__udivmoddi4>
 8100cdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8100ce0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8100ce4:	b004      	add	sp, #16
 8100ce6:	4770      	bx	lr

08100ce8 <__udivmoddi4>:
 8100ce8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8100cec:	9d08      	ldr	r5, [sp, #32]
 8100cee:	4604      	mov	r4, r0
 8100cf0:	468c      	mov	ip, r1
 8100cf2:	2b00      	cmp	r3, #0
 8100cf4:	f040 8083 	bne.w	8100dfe <__udivmoddi4+0x116>
 8100cf8:	428a      	cmp	r2, r1
 8100cfa:	4617      	mov	r7, r2
 8100cfc:	d947      	bls.n	8100d8e <__udivmoddi4+0xa6>
 8100cfe:	fab2 f282 	clz	r2, r2
 8100d02:	b142      	cbz	r2, 8100d16 <__udivmoddi4+0x2e>
 8100d04:	f1c2 0020 	rsb	r0, r2, #32
 8100d08:	fa24 f000 	lsr.w	r0, r4, r0
 8100d0c:	4091      	lsls	r1, r2
 8100d0e:	4097      	lsls	r7, r2
 8100d10:	ea40 0c01 	orr.w	ip, r0, r1
 8100d14:	4094      	lsls	r4, r2
 8100d16:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8100d1a:	0c23      	lsrs	r3, r4, #16
 8100d1c:	fbbc f6f8 	udiv	r6, ip, r8
 8100d20:	fa1f fe87 	uxth.w	lr, r7
 8100d24:	fb08 c116 	mls	r1, r8, r6, ip
 8100d28:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8100d2c:	fb06 f10e 	mul.w	r1, r6, lr
 8100d30:	4299      	cmp	r1, r3
 8100d32:	d909      	bls.n	8100d48 <__udivmoddi4+0x60>
 8100d34:	18fb      	adds	r3, r7, r3
 8100d36:	f106 30ff 	add.w	r0, r6, #4294967295
 8100d3a:	f080 8119 	bcs.w	8100f70 <__udivmoddi4+0x288>
 8100d3e:	4299      	cmp	r1, r3
 8100d40:	f240 8116 	bls.w	8100f70 <__udivmoddi4+0x288>
 8100d44:	3e02      	subs	r6, #2
 8100d46:	443b      	add	r3, r7
 8100d48:	1a5b      	subs	r3, r3, r1
 8100d4a:	b2a4      	uxth	r4, r4
 8100d4c:	fbb3 f0f8 	udiv	r0, r3, r8
 8100d50:	fb08 3310 	mls	r3, r8, r0, r3
 8100d54:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8100d58:	fb00 fe0e 	mul.w	lr, r0, lr
 8100d5c:	45a6      	cmp	lr, r4
 8100d5e:	d909      	bls.n	8100d74 <__udivmoddi4+0x8c>
 8100d60:	193c      	adds	r4, r7, r4
 8100d62:	f100 33ff 	add.w	r3, r0, #4294967295
 8100d66:	f080 8105 	bcs.w	8100f74 <__udivmoddi4+0x28c>
 8100d6a:	45a6      	cmp	lr, r4
 8100d6c:	f240 8102 	bls.w	8100f74 <__udivmoddi4+0x28c>
 8100d70:	3802      	subs	r0, #2
 8100d72:	443c      	add	r4, r7
 8100d74:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8100d78:	eba4 040e 	sub.w	r4, r4, lr
 8100d7c:	2600      	movs	r6, #0
 8100d7e:	b11d      	cbz	r5, 8100d88 <__udivmoddi4+0xa0>
 8100d80:	40d4      	lsrs	r4, r2
 8100d82:	2300      	movs	r3, #0
 8100d84:	e9c5 4300 	strd	r4, r3, [r5]
 8100d88:	4631      	mov	r1, r6
 8100d8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8100d8e:	b902      	cbnz	r2, 8100d92 <__udivmoddi4+0xaa>
 8100d90:	deff      	udf	#255	; 0xff
 8100d92:	fab2 f282 	clz	r2, r2
 8100d96:	2a00      	cmp	r2, #0
 8100d98:	d150      	bne.n	8100e3c <__udivmoddi4+0x154>
 8100d9a:	1bcb      	subs	r3, r1, r7
 8100d9c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8100da0:	fa1f f887 	uxth.w	r8, r7
 8100da4:	2601      	movs	r6, #1
 8100da6:	fbb3 fcfe 	udiv	ip, r3, lr
 8100daa:	0c21      	lsrs	r1, r4, #16
 8100dac:	fb0e 331c 	mls	r3, lr, ip, r3
 8100db0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8100db4:	fb08 f30c 	mul.w	r3, r8, ip
 8100db8:	428b      	cmp	r3, r1
 8100dba:	d907      	bls.n	8100dcc <__udivmoddi4+0xe4>
 8100dbc:	1879      	adds	r1, r7, r1
 8100dbe:	f10c 30ff 	add.w	r0, ip, #4294967295
 8100dc2:	d202      	bcs.n	8100dca <__udivmoddi4+0xe2>
 8100dc4:	428b      	cmp	r3, r1
 8100dc6:	f200 80e9 	bhi.w	8100f9c <__udivmoddi4+0x2b4>
 8100dca:	4684      	mov	ip, r0
 8100dcc:	1ac9      	subs	r1, r1, r3
 8100dce:	b2a3      	uxth	r3, r4
 8100dd0:	fbb1 f0fe 	udiv	r0, r1, lr
 8100dd4:	fb0e 1110 	mls	r1, lr, r0, r1
 8100dd8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8100ddc:	fb08 f800 	mul.w	r8, r8, r0
 8100de0:	45a0      	cmp	r8, r4
 8100de2:	d907      	bls.n	8100df4 <__udivmoddi4+0x10c>
 8100de4:	193c      	adds	r4, r7, r4
 8100de6:	f100 33ff 	add.w	r3, r0, #4294967295
 8100dea:	d202      	bcs.n	8100df2 <__udivmoddi4+0x10a>
 8100dec:	45a0      	cmp	r8, r4
 8100dee:	f200 80d9 	bhi.w	8100fa4 <__udivmoddi4+0x2bc>
 8100df2:	4618      	mov	r0, r3
 8100df4:	eba4 0408 	sub.w	r4, r4, r8
 8100df8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8100dfc:	e7bf      	b.n	8100d7e <__udivmoddi4+0x96>
 8100dfe:	428b      	cmp	r3, r1
 8100e00:	d909      	bls.n	8100e16 <__udivmoddi4+0x12e>
 8100e02:	2d00      	cmp	r5, #0
 8100e04:	f000 80b1 	beq.w	8100f6a <__udivmoddi4+0x282>
 8100e08:	2600      	movs	r6, #0
 8100e0a:	e9c5 0100 	strd	r0, r1, [r5]
 8100e0e:	4630      	mov	r0, r6
 8100e10:	4631      	mov	r1, r6
 8100e12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8100e16:	fab3 f683 	clz	r6, r3
 8100e1a:	2e00      	cmp	r6, #0
 8100e1c:	d14a      	bne.n	8100eb4 <__udivmoddi4+0x1cc>
 8100e1e:	428b      	cmp	r3, r1
 8100e20:	d302      	bcc.n	8100e28 <__udivmoddi4+0x140>
 8100e22:	4282      	cmp	r2, r0
 8100e24:	f200 80b8 	bhi.w	8100f98 <__udivmoddi4+0x2b0>
 8100e28:	1a84      	subs	r4, r0, r2
 8100e2a:	eb61 0103 	sbc.w	r1, r1, r3
 8100e2e:	2001      	movs	r0, #1
 8100e30:	468c      	mov	ip, r1
 8100e32:	2d00      	cmp	r5, #0
 8100e34:	d0a8      	beq.n	8100d88 <__udivmoddi4+0xa0>
 8100e36:	e9c5 4c00 	strd	r4, ip, [r5]
 8100e3a:	e7a5      	b.n	8100d88 <__udivmoddi4+0xa0>
 8100e3c:	f1c2 0320 	rsb	r3, r2, #32
 8100e40:	fa20 f603 	lsr.w	r6, r0, r3
 8100e44:	4097      	lsls	r7, r2
 8100e46:	fa01 f002 	lsl.w	r0, r1, r2
 8100e4a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8100e4e:	40d9      	lsrs	r1, r3
 8100e50:	4330      	orrs	r0, r6
 8100e52:	0c03      	lsrs	r3, r0, #16
 8100e54:	fbb1 f6fe 	udiv	r6, r1, lr
 8100e58:	fa1f f887 	uxth.w	r8, r7
 8100e5c:	fb0e 1116 	mls	r1, lr, r6, r1
 8100e60:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8100e64:	fb06 f108 	mul.w	r1, r6, r8
 8100e68:	4299      	cmp	r1, r3
 8100e6a:	fa04 f402 	lsl.w	r4, r4, r2
 8100e6e:	d909      	bls.n	8100e84 <__udivmoddi4+0x19c>
 8100e70:	18fb      	adds	r3, r7, r3
 8100e72:	f106 3cff 	add.w	ip, r6, #4294967295
 8100e76:	f080 808d 	bcs.w	8100f94 <__udivmoddi4+0x2ac>
 8100e7a:	4299      	cmp	r1, r3
 8100e7c:	f240 808a 	bls.w	8100f94 <__udivmoddi4+0x2ac>
 8100e80:	3e02      	subs	r6, #2
 8100e82:	443b      	add	r3, r7
 8100e84:	1a5b      	subs	r3, r3, r1
 8100e86:	b281      	uxth	r1, r0
 8100e88:	fbb3 f0fe 	udiv	r0, r3, lr
 8100e8c:	fb0e 3310 	mls	r3, lr, r0, r3
 8100e90:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8100e94:	fb00 f308 	mul.w	r3, r0, r8
 8100e98:	428b      	cmp	r3, r1
 8100e9a:	d907      	bls.n	8100eac <__udivmoddi4+0x1c4>
 8100e9c:	1879      	adds	r1, r7, r1
 8100e9e:	f100 3cff 	add.w	ip, r0, #4294967295
 8100ea2:	d273      	bcs.n	8100f8c <__udivmoddi4+0x2a4>
 8100ea4:	428b      	cmp	r3, r1
 8100ea6:	d971      	bls.n	8100f8c <__udivmoddi4+0x2a4>
 8100ea8:	3802      	subs	r0, #2
 8100eaa:	4439      	add	r1, r7
 8100eac:	1acb      	subs	r3, r1, r3
 8100eae:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8100eb2:	e778      	b.n	8100da6 <__udivmoddi4+0xbe>
 8100eb4:	f1c6 0c20 	rsb	ip, r6, #32
 8100eb8:	fa03 f406 	lsl.w	r4, r3, r6
 8100ebc:	fa22 f30c 	lsr.w	r3, r2, ip
 8100ec0:	431c      	orrs	r4, r3
 8100ec2:	fa20 f70c 	lsr.w	r7, r0, ip
 8100ec6:	fa01 f306 	lsl.w	r3, r1, r6
 8100eca:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8100ece:	fa21 f10c 	lsr.w	r1, r1, ip
 8100ed2:	431f      	orrs	r7, r3
 8100ed4:	0c3b      	lsrs	r3, r7, #16
 8100ed6:	fbb1 f9fe 	udiv	r9, r1, lr
 8100eda:	fa1f f884 	uxth.w	r8, r4
 8100ede:	fb0e 1119 	mls	r1, lr, r9, r1
 8100ee2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8100ee6:	fb09 fa08 	mul.w	sl, r9, r8
 8100eea:	458a      	cmp	sl, r1
 8100eec:	fa02 f206 	lsl.w	r2, r2, r6
 8100ef0:	fa00 f306 	lsl.w	r3, r0, r6
 8100ef4:	d908      	bls.n	8100f08 <__udivmoddi4+0x220>
 8100ef6:	1861      	adds	r1, r4, r1
 8100ef8:	f109 30ff 	add.w	r0, r9, #4294967295
 8100efc:	d248      	bcs.n	8100f90 <__udivmoddi4+0x2a8>
 8100efe:	458a      	cmp	sl, r1
 8100f00:	d946      	bls.n	8100f90 <__udivmoddi4+0x2a8>
 8100f02:	f1a9 0902 	sub.w	r9, r9, #2
 8100f06:	4421      	add	r1, r4
 8100f08:	eba1 010a 	sub.w	r1, r1, sl
 8100f0c:	b2bf      	uxth	r7, r7
 8100f0e:	fbb1 f0fe 	udiv	r0, r1, lr
 8100f12:	fb0e 1110 	mls	r1, lr, r0, r1
 8100f16:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8100f1a:	fb00 f808 	mul.w	r8, r0, r8
 8100f1e:	45b8      	cmp	r8, r7
 8100f20:	d907      	bls.n	8100f32 <__udivmoddi4+0x24a>
 8100f22:	19e7      	adds	r7, r4, r7
 8100f24:	f100 31ff 	add.w	r1, r0, #4294967295
 8100f28:	d22e      	bcs.n	8100f88 <__udivmoddi4+0x2a0>
 8100f2a:	45b8      	cmp	r8, r7
 8100f2c:	d92c      	bls.n	8100f88 <__udivmoddi4+0x2a0>
 8100f2e:	3802      	subs	r0, #2
 8100f30:	4427      	add	r7, r4
 8100f32:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8100f36:	eba7 0708 	sub.w	r7, r7, r8
 8100f3a:	fba0 8902 	umull	r8, r9, r0, r2
 8100f3e:	454f      	cmp	r7, r9
 8100f40:	46c6      	mov	lr, r8
 8100f42:	4649      	mov	r1, r9
 8100f44:	d31a      	bcc.n	8100f7c <__udivmoddi4+0x294>
 8100f46:	d017      	beq.n	8100f78 <__udivmoddi4+0x290>
 8100f48:	b15d      	cbz	r5, 8100f62 <__udivmoddi4+0x27a>
 8100f4a:	ebb3 020e 	subs.w	r2, r3, lr
 8100f4e:	eb67 0701 	sbc.w	r7, r7, r1
 8100f52:	fa07 fc0c 	lsl.w	ip, r7, ip
 8100f56:	40f2      	lsrs	r2, r6
 8100f58:	ea4c 0202 	orr.w	r2, ip, r2
 8100f5c:	40f7      	lsrs	r7, r6
 8100f5e:	e9c5 2700 	strd	r2, r7, [r5]
 8100f62:	2600      	movs	r6, #0
 8100f64:	4631      	mov	r1, r6
 8100f66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8100f6a:	462e      	mov	r6, r5
 8100f6c:	4628      	mov	r0, r5
 8100f6e:	e70b      	b.n	8100d88 <__udivmoddi4+0xa0>
 8100f70:	4606      	mov	r6, r0
 8100f72:	e6e9      	b.n	8100d48 <__udivmoddi4+0x60>
 8100f74:	4618      	mov	r0, r3
 8100f76:	e6fd      	b.n	8100d74 <__udivmoddi4+0x8c>
 8100f78:	4543      	cmp	r3, r8
 8100f7a:	d2e5      	bcs.n	8100f48 <__udivmoddi4+0x260>
 8100f7c:	ebb8 0e02 	subs.w	lr, r8, r2
 8100f80:	eb69 0104 	sbc.w	r1, r9, r4
 8100f84:	3801      	subs	r0, #1
 8100f86:	e7df      	b.n	8100f48 <__udivmoddi4+0x260>
 8100f88:	4608      	mov	r0, r1
 8100f8a:	e7d2      	b.n	8100f32 <__udivmoddi4+0x24a>
 8100f8c:	4660      	mov	r0, ip
 8100f8e:	e78d      	b.n	8100eac <__udivmoddi4+0x1c4>
 8100f90:	4681      	mov	r9, r0
 8100f92:	e7b9      	b.n	8100f08 <__udivmoddi4+0x220>
 8100f94:	4666      	mov	r6, ip
 8100f96:	e775      	b.n	8100e84 <__udivmoddi4+0x19c>
 8100f98:	4630      	mov	r0, r6
 8100f9a:	e74a      	b.n	8100e32 <__udivmoddi4+0x14a>
 8100f9c:	f1ac 0c02 	sub.w	ip, ip, #2
 8100fa0:	4439      	add	r1, r7
 8100fa2:	e713      	b.n	8100dcc <__udivmoddi4+0xe4>
 8100fa4:	3802      	subs	r0, #2
 8100fa6:	443c      	add	r4, r7
 8100fa8:	e724      	b.n	8100df4 <__udivmoddi4+0x10c>
 8100faa:	bf00      	nop

08100fac <__aeabi_idiv0>:
 8100fac:	4770      	bx	lr
 8100fae:	bf00      	nop

08100fb0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8100fb0:	b480      	push	{r7}
 8100fb2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8100fb4:	4b0b      	ldr	r3, [pc, #44]	; (8100fe4 <SystemInit+0x34>)
 8100fb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8100fba:	4a0a      	ldr	r2, [pc, #40]	; (8100fe4 <SystemInit+0x34>)
 8100fbc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8100fc0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Pos;
 8100fc4:	4b07      	ldr	r3, [pc, #28]	; (8100fe4 <SystemInit+0x34>)
 8100fc6:	691b      	ldr	r3, [r3, #16]
 8100fc8:	4a06      	ldr	r2, [pc, #24]	; (8100fe4 <SystemInit+0x34>)
 8100fca:	f043 0304 	orr.w	r3, r3, #4
 8100fce:	6113      	str	r3, [r2, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D2_AHBSRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BANK2_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8100fd0:	4b04      	ldr	r3, [pc, #16]	; (8100fe4 <SystemInit+0x34>)
 8100fd2:	f04f 6201 	mov.w	r2, #135266304	; 0x8100000
 8100fd6:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 8100fd8:	bf00      	nop
 8100fda:	46bd      	mov	sp, r7
 8100fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100fe0:	4770      	bx	lr
 8100fe2:	bf00      	nop
 8100fe4:	e000ed00 	.word	0xe000ed00

08100fe8 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8100fe8:	b580      	push	{r7, lr}
 8100fea:	b08a      	sub	sp, #40	; 0x28
 8100fec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8100fee:	f107 031c 	add.w	r3, r7, #28
 8100ff2:	2200      	movs	r2, #0
 8100ff4:	601a      	str	r2, [r3, #0]
 8100ff6:	605a      	str	r2, [r3, #4]
 8100ff8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8100ffa:	463b      	mov	r3, r7
 8100ffc:	2200      	movs	r2, #0
 8100ffe:	601a      	str	r2, [r3, #0]
 8101000:	605a      	str	r2, [r3, #4]
 8101002:	609a      	str	r2, [r3, #8]
 8101004:	60da      	str	r2, [r3, #12]
 8101006:	611a      	str	r2, [r3, #16]
 8101008:	615a      	str	r2, [r3, #20]
 810100a:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 810100c:	4b30      	ldr	r3, [pc, #192]	; (81010d0 <MX_ADC1_Init+0xe8>)
 810100e:	4a31      	ldr	r2, [pc, #196]	; (81010d4 <MX_ADC1_Init+0xec>)
 8101010:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV8;
 8101012:	4b2f      	ldr	r3, [pc, #188]	; (81010d0 <MX_ADC1_Init+0xe8>)
 8101014:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8101018:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 810101a:	4b2d      	ldr	r3, [pc, #180]	; (81010d0 <MX_ADC1_Init+0xe8>)
 810101c:	2200      	movs	r2, #0
 810101e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8101020:	4b2b      	ldr	r3, [pc, #172]	; (81010d0 <MX_ADC1_Init+0xe8>)
 8101022:	2200      	movs	r2, #0
 8101024:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8101026:	4b2a      	ldr	r3, [pc, #168]	; (81010d0 <MX_ADC1_Init+0xe8>)
 8101028:	2204      	movs	r2, #4
 810102a:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 810102c:	4b28      	ldr	r3, [pc, #160]	; (81010d0 <MX_ADC1_Init+0xe8>)
 810102e:	2200      	movs	r2, #0
 8101030:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8101032:	4b27      	ldr	r3, [pc, #156]	; (81010d0 <MX_ADC1_Init+0xe8>)
 8101034:	2201      	movs	r2, #1
 8101036:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 8101038:	4b25      	ldr	r3, [pc, #148]	; (81010d0 <MX_ADC1_Init+0xe8>)
 810103a:	2201      	movs	r2, #1
 810103c:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 810103e:	4b24      	ldr	r3, [pc, #144]	; (81010d0 <MX_ADC1_Init+0xe8>)
 8101040:	2200      	movs	r2, #0
 8101042:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8101044:	4b22      	ldr	r3, [pc, #136]	; (81010d0 <MX_ADC1_Init+0xe8>)
 8101046:	2200      	movs	r2, #0
 8101048:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 810104a:	4b21      	ldr	r3, [pc, #132]	; (81010d0 <MX_ADC1_Init+0xe8>)
 810104c:	2200      	movs	r2, #0
 810104e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8101050:	4b1f      	ldr	r3, [pc, #124]	; (81010d0 <MX_ADC1_Init+0xe8>)
 8101052:	2203      	movs	r2, #3
 8101054:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8101056:	4b1e      	ldr	r3, [pc, #120]	; (81010d0 <MX_ADC1_Init+0xe8>)
 8101058:	2200      	movs	r2, #0
 810105a:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 810105c:	4b1c      	ldr	r3, [pc, #112]	; (81010d0 <MX_ADC1_Init+0xe8>)
 810105e:	2200      	movs	r2, #0
 8101060:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8101062:	4b1b      	ldr	r3, [pc, #108]	; (81010d0 <MX_ADC1_Init+0xe8>)
 8101064:	2200      	movs	r2, #0
 8101066:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 810106a:	4819      	ldr	r0, [pc, #100]	; (81010d0 <MX_ADC1_Init+0xe8>)
 810106c:	f001 fece 	bl	8102e0c <HAL_ADC_Init>
 8101070:	4603      	mov	r3, r0
 8101072:	2b00      	cmp	r3, #0
 8101074:	d001      	beq.n	810107a <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8101076:	f000 fd79 	bl	8101b6c <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 810107a:	2300      	movs	r3, #0
 810107c:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 810107e:	f107 031c 	add.w	r3, r7, #28
 8101082:	4619      	mov	r1, r3
 8101084:	4812      	ldr	r0, [pc, #72]	; (81010d0 <MX_ADC1_Init+0xe8>)
 8101086:	f002 ff6b 	bl	8103f60 <HAL_ADCEx_MultiModeConfigChannel>
 810108a:	4603      	mov	r3, r0
 810108c:	2b00      	cmp	r3, #0
 810108e:	d001      	beq.n	8101094 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8101090:	f000 fd6c 	bl	8101b6c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8101094:	4b10      	ldr	r3, [pc, #64]	; (81010d8 <MX_ADC1_Init+0xf0>)
 8101096:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8101098:	2306      	movs	r3, #6
 810109a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 810109c:	2300      	movs	r3, #0
 810109e:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 81010a0:	f240 73ff 	movw	r3, #2047	; 0x7ff
 81010a4:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 81010a6:	2304      	movs	r3, #4
 81010a8:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 81010aa:	2300      	movs	r3, #0
 81010ac:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 81010ae:	2300      	movs	r3, #0
 81010b0:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 81010b2:	463b      	mov	r3, r7
 81010b4:	4619      	mov	r1, r3
 81010b6:	4806      	ldr	r0, [pc, #24]	; (81010d0 <MX_ADC1_Init+0xe8>)
 81010b8:	f002 faa0 	bl	81035fc <HAL_ADC_ConfigChannel>
 81010bc:	4603      	mov	r3, r0
 81010be:	2b00      	cmp	r3, #0
 81010c0:	d001      	beq.n	81010c6 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 81010c2:	f000 fd53 	bl	8101b6c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 81010c6:	bf00      	nop
 81010c8:	3728      	adds	r7, #40	; 0x28
 81010ca:	46bd      	mov	sp, r7
 81010cc:	bd80      	pop	{r7, pc}
 81010ce:	bf00      	nop
 81010d0:	10004b3c 	.word	0x10004b3c
 81010d4:	40022000 	.word	0x40022000
 81010d8:	08600004 	.word	0x08600004

081010dc <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 81010dc:	b580      	push	{r7, lr}
 81010de:	b08a      	sub	sp, #40	; 0x28
 81010e0:	af00      	add	r7, sp, #0
 81010e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 81010e4:	f107 0314 	add.w	r3, r7, #20
 81010e8:	2200      	movs	r2, #0
 81010ea:	601a      	str	r2, [r3, #0]
 81010ec:	605a      	str	r2, [r3, #4]
 81010ee:	609a      	str	r2, [r3, #8]
 81010f0:	60da      	str	r2, [r3, #12]
 81010f2:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 81010f4:	687b      	ldr	r3, [r7, #4]
 81010f6:	681b      	ldr	r3, [r3, #0]
 81010f8:	4a34      	ldr	r2, [pc, #208]	; (81011cc <HAL_ADC_MspInit+0xf0>)
 81010fa:	4293      	cmp	r3, r2
 81010fc:	d162      	bne.n	81011c4 <HAL_ADC_MspInit+0xe8>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 81010fe:	4b34      	ldr	r3, [pc, #208]	; (81011d0 <HAL_ADC_MspInit+0xf4>)
 8101100:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8101104:	4a32      	ldr	r2, [pc, #200]	; (81011d0 <HAL_ADC_MspInit+0xf4>)
 8101106:	f043 0320 	orr.w	r3, r3, #32
 810110a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 810110e:	4b30      	ldr	r3, [pc, #192]	; (81011d0 <HAL_ADC_MspInit+0xf4>)
 8101110:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8101114:	f003 0320 	and.w	r3, r3, #32
 8101118:	613b      	str	r3, [r7, #16]
 810111a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 810111c:	4b2c      	ldr	r3, [pc, #176]	; (81011d0 <HAL_ADC_MspInit+0xf4>)
 810111e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101122:	4a2b      	ldr	r2, [pc, #172]	; (81011d0 <HAL_ADC_MspInit+0xf4>)
 8101124:	f043 0320 	orr.w	r3, r3, #32
 8101128:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 810112c:	4b28      	ldr	r3, [pc, #160]	; (81011d0 <HAL_ADC_MspInit+0xf4>)
 810112e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101132:	f003 0320 	and.w	r3, r3, #32
 8101136:	60fb      	str	r3, [r7, #12]
 8101138:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PF11     ------> ADC1_INP2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 810113a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 810113e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8101140:	2303      	movs	r3, #3
 8101142:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101144:	2300      	movs	r3, #0
 8101146:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8101148:	f107 0314 	add.w	r3, r7, #20
 810114c:	4619      	mov	r1, r3
 810114e:	4821      	ldr	r0, [pc, #132]	; (81011d4 <HAL_ADC_MspInit+0xf8>)
 8101150:	f005 ff22 	bl	8106f98 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream4;
 8101154:	4b20      	ldr	r3, [pc, #128]	; (81011d8 <HAL_ADC_MspInit+0xfc>)
 8101156:	4a21      	ldr	r2, [pc, #132]	; (81011dc <HAL_ADC_MspInit+0x100>)
 8101158:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 810115a:	4b1f      	ldr	r3, [pc, #124]	; (81011d8 <HAL_ADC_MspInit+0xfc>)
 810115c:	2209      	movs	r2, #9
 810115e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8101160:	4b1d      	ldr	r3, [pc, #116]	; (81011d8 <HAL_ADC_MspInit+0xfc>)
 8101162:	2200      	movs	r2, #0
 8101164:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8101166:	4b1c      	ldr	r3, [pc, #112]	; (81011d8 <HAL_ADC_MspInit+0xfc>)
 8101168:	2200      	movs	r2, #0
 810116a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 810116c:	4b1a      	ldr	r3, [pc, #104]	; (81011d8 <HAL_ADC_MspInit+0xfc>)
 810116e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8101172:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8101174:	4b18      	ldr	r3, [pc, #96]	; (81011d8 <HAL_ADC_MspInit+0xfc>)
 8101176:	f44f 6200 	mov.w	r2, #2048	; 0x800
 810117a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 810117c:	4b16      	ldr	r3, [pc, #88]	; (81011d8 <HAL_ADC_MspInit+0xfc>)
 810117e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8101182:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8101184:	4b14      	ldr	r3, [pc, #80]	; (81011d8 <HAL_ADC_MspInit+0xfc>)
 8101186:	f44f 7280 	mov.w	r2, #256	; 0x100
 810118a:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 810118c:	4b12      	ldr	r3, [pc, #72]	; (81011d8 <HAL_ADC_MspInit+0xfc>)
 810118e:	2200      	movs	r2, #0
 8101190:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8101192:	4b11      	ldr	r3, [pc, #68]	; (81011d8 <HAL_ADC_MspInit+0xfc>)
 8101194:	2200      	movs	r2, #0
 8101196:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8101198:	480f      	ldr	r0, [pc, #60]	; (81011d8 <HAL_ADC_MspInit+0xfc>)
 810119a:	f003 f8b7 	bl	810430c <HAL_DMA_Init>
 810119e:	4603      	mov	r3, r0
 81011a0:	2b00      	cmp	r3, #0
 81011a2:	d001      	beq.n	81011a8 <HAL_ADC_MspInit+0xcc>
    {
      Error_Handler();
 81011a4:	f000 fce2 	bl	8101b6c <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 81011a8:	687b      	ldr	r3, [r7, #4]
 81011aa:	4a0b      	ldr	r2, [pc, #44]	; (81011d8 <HAL_ADC_MspInit+0xfc>)
 81011ac:	64da      	str	r2, [r3, #76]	; 0x4c
 81011ae:	4a0a      	ldr	r2, [pc, #40]	; (81011d8 <HAL_ADC_MspInit+0xfc>)
 81011b0:	687b      	ldr	r3, [r7, #4]
 81011b2:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 81011b4:	2200      	movs	r2, #0
 81011b6:	2105      	movs	r1, #5
 81011b8:	2012      	movs	r0, #18
 81011ba:	f003 f86b 	bl	8104294 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 81011be:	2012      	movs	r0, #18
 81011c0:	f003 f882 	bl	81042c8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 81011c4:	bf00      	nop
 81011c6:	3728      	adds	r7, #40	; 0x28
 81011c8:	46bd      	mov	sp, r7
 81011ca:	bd80      	pop	{r7, pc}
 81011cc:	40022000 	.word	0x40022000
 81011d0:	58024400 	.word	0x58024400
 81011d4:	58021400 	.word	0x58021400
 81011d8:	10004ba0 	.word	0x10004ba0
 81011dc:	40020070 	.word	0x40020070

081011e0 <HAL_SPI_TxRxCpltCallback>:
{

}

void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 81011e0:	b480      	push	{r7}
 81011e2:	b083      	sub	sp, #12
 81011e4:	af00      	add	r7, sp, #0
 81011e6:	6078      	str	r0, [r7, #4]
    //while(1);
}
 81011e8:	bf00      	nop
 81011ea:	370c      	adds	r7, #12
 81011ec:	46bd      	mov	sp, r7
 81011ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 81011f2:	4770      	bx	lr

081011f4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 81011f4:	b580      	push	{r7, lr}
 81011f6:	b082      	sub	sp, #8
 81011f8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 81011fa:	4b2d      	ldr	r3, [pc, #180]	; (81012b0 <MX_DMA_Init+0xbc>)
 81011fc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8101200:	4a2b      	ldr	r2, [pc, #172]	; (81012b0 <MX_DMA_Init+0xbc>)
 8101202:	f043 0301 	orr.w	r3, r3, #1
 8101206:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 810120a:	4b29      	ldr	r3, [pc, #164]	; (81012b0 <MX_DMA_Init+0xbc>)
 810120c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8101210:	f003 0301 	and.w	r3, r3, #1
 8101214:	607b      	str	r3, [r7, #4]
 8101216:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8101218:	4b25      	ldr	r3, [pc, #148]	; (81012b0 <MX_DMA_Init+0xbc>)
 810121a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 810121e:	4a24      	ldr	r2, [pc, #144]	; (81012b0 <MX_DMA_Init+0xbc>)
 8101220:	f043 0302 	orr.w	r3, r3, #2
 8101224:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8101228:	4b21      	ldr	r3, [pc, #132]	; (81012b0 <MX_DMA_Init+0xbc>)
 810122a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 810122e:	f003 0302 	and.w	r3, r3, #2
 8101232:	603b      	str	r3, [r7, #0]
 8101234:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8101236:	2200      	movs	r2, #0
 8101238:	2105      	movs	r1, #5
 810123a:	200b      	movs	r0, #11
 810123c:	f003 f82a 	bl	8104294 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8101240:	200b      	movs	r0, #11
 8101242:	f003 f841 	bl	81042c8 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8101246:	2200      	movs	r2, #0
 8101248:	2105      	movs	r1, #5
 810124a:	200c      	movs	r0, #12
 810124c:	f003 f822 	bl	8104294 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8101250:	200c      	movs	r0, #12
 8101252:	f003 f839 	bl	81042c8 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 5, 0);
 8101256:	2200      	movs	r2, #0
 8101258:	2105      	movs	r1, #5
 810125a:	200f      	movs	r0, #15
 810125c:	f003 f81a 	bl	8104294 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8101260:	200f      	movs	r0, #15
 8101262:	f003 f831 	bl	81042c8 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8101266:	2200      	movs	r2, #0
 8101268:	2105      	movs	r1, #5
 810126a:	2010      	movs	r0, #16
 810126c:	f003 f812 	bl	8104294 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8101270:	2010      	movs	r0, #16
 8101272:	f003 f829 	bl	81042c8 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 8101276:	2200      	movs	r2, #0
 8101278:	2105      	movs	r1, #5
 810127a:	2011      	movs	r0, #17
 810127c:	f003 f80a 	bl	8104294 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8101280:	2011      	movs	r0, #17
 8101282:	f003 f821 	bl	81042c8 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 5, 0);
 8101286:	2200      	movs	r2, #0
 8101288:	2105      	movs	r1, #5
 810128a:	202f      	movs	r0, #47	; 0x2f
 810128c:	f003 f802 	bl	8104294 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8101290:	202f      	movs	r0, #47	; 0x2f
 8101292:	f003 f819 	bl	81042c8 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8101296:	2200      	movs	r2, #0
 8101298:	2105      	movs	r1, #5
 810129a:	2038      	movs	r0, #56	; 0x38
 810129c:	f002 fffa 	bl	8104294 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 81012a0:	2038      	movs	r0, #56	; 0x38
 81012a2:	f003 f811 	bl	81042c8 <HAL_NVIC_EnableIRQ>

}
 81012a6:	bf00      	nop
 81012a8:	3708      	adds	r7, #8
 81012aa:	46bd      	mov	sp, r7
 81012ac:	bd80      	pop	{r7, pc}
 81012ae:	bf00      	nop
 81012b0:	58024400 	.word	0x58024400

081012b4 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 81012b4:	b580      	push	{r7, lr}
 81012b6:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 81012b8:	4a04      	ldr	r2, [pc, #16]	; (81012cc <MX_FREERTOS_Init+0x18>)
 81012ba:	2100      	movs	r1, #0
 81012bc:	4804      	ldr	r0, [pc, #16]	; (81012d0 <MX_FREERTOS_Init+0x1c>)
 81012be:	f012 fd96 	bl	8113dee <osThreadNew>
 81012c2:	4603      	mov	r3, r0
 81012c4:	4a03      	ldr	r2, [pc, #12]	; (81012d4 <MX_FREERTOS_Init+0x20>)
 81012c6:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 81012c8:	bf00      	nop
 81012ca:	bd80      	pop	{r7, pc}
 81012cc:	08119ae8 	.word	0x08119ae8
 81012d0:	081012d9 	.word	0x081012d9
 81012d4:	10004c18 	.word	0x10004c18

081012d8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 81012d8:	b580      	push	{r7, lr}
 81012da:	b082      	sub	sp, #8
 81012dc:	af00      	add	r7, sp, #0
 81012de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
	  //int status = BMP280ReadSensorID();
    osDelay(1);
 81012e0:	2001      	movs	r0, #1
 81012e2:	f012 fe16 	bl	8113f12 <osDelay>
 81012e6:	e7fb      	b.n	81012e0 <StartDefaultTask+0x8>

081012e8 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 81012e8:	b580      	push	{r7, lr}
 81012ea:	b08c      	sub	sp, #48	; 0x30
 81012ec:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 81012ee:	f107 031c 	add.w	r3, r7, #28
 81012f2:	2200      	movs	r2, #0
 81012f4:	601a      	str	r2, [r3, #0]
 81012f6:	605a      	str	r2, [r3, #4]
 81012f8:	609a      	str	r2, [r3, #8]
 81012fa:	60da      	str	r2, [r3, #12]
 81012fc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 81012fe:	4b41      	ldr	r3, [pc, #260]	; (8101404 <MX_GPIO_Init+0x11c>)
 8101300:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101304:	4a3f      	ldr	r2, [pc, #252]	; (8101404 <MX_GPIO_Init+0x11c>)
 8101306:	f043 0301 	orr.w	r3, r3, #1
 810130a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 810130e:	4b3d      	ldr	r3, [pc, #244]	; (8101404 <MX_GPIO_Init+0x11c>)
 8101310:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101314:	f003 0301 	and.w	r3, r3, #1
 8101318:	61bb      	str	r3, [r7, #24]
 810131a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 810131c:	4b39      	ldr	r3, [pc, #228]	; (8101404 <MX_GPIO_Init+0x11c>)
 810131e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101322:	4a38      	ldr	r2, [pc, #224]	; (8101404 <MX_GPIO_Init+0x11c>)
 8101324:	f043 0320 	orr.w	r3, r3, #32
 8101328:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 810132c:	4b35      	ldr	r3, [pc, #212]	; (8101404 <MX_GPIO_Init+0x11c>)
 810132e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101332:	f003 0320 	and.w	r3, r3, #32
 8101336:	617b      	str	r3, [r7, #20]
 8101338:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 810133a:	4b32      	ldr	r3, [pc, #200]	; (8101404 <MX_GPIO_Init+0x11c>)
 810133c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101340:	4a30      	ldr	r2, [pc, #192]	; (8101404 <MX_GPIO_Init+0x11c>)
 8101342:	f043 0310 	orr.w	r3, r3, #16
 8101346:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 810134a:	4b2e      	ldr	r3, [pc, #184]	; (8101404 <MX_GPIO_Init+0x11c>)
 810134c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101350:	f003 0310 	and.w	r3, r3, #16
 8101354:	613b      	str	r3, [r7, #16]
 8101356:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8101358:	4b2a      	ldr	r3, [pc, #168]	; (8101404 <MX_GPIO_Init+0x11c>)
 810135a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810135e:	4a29      	ldr	r2, [pc, #164]	; (8101404 <MX_GPIO_Init+0x11c>)
 8101360:	f043 0302 	orr.w	r3, r3, #2
 8101364:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101368:	4b26      	ldr	r3, [pc, #152]	; (8101404 <MX_GPIO_Init+0x11c>)
 810136a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810136e:	f003 0302 	and.w	r3, r3, #2
 8101372:	60fb      	str	r3, [r7, #12]
 8101374:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8101376:	4b23      	ldr	r3, [pc, #140]	; (8101404 <MX_GPIO_Init+0x11c>)
 8101378:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810137c:	4a21      	ldr	r2, [pc, #132]	; (8101404 <MX_GPIO_Init+0x11c>)
 810137e:	f043 0308 	orr.w	r3, r3, #8
 8101382:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101386:	4b1f      	ldr	r3, [pc, #124]	; (8101404 <MX_GPIO_Init+0x11c>)
 8101388:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810138c:	f003 0308 	and.w	r3, r3, #8
 8101390:	60bb      	str	r3, [r7, #8]
 8101392:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8101394:	4b1b      	ldr	r3, [pc, #108]	; (8101404 <MX_GPIO_Init+0x11c>)
 8101396:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810139a:	4a1a      	ldr	r2, [pc, #104]	; (8101404 <MX_GPIO_Init+0x11c>)
 810139c:	f043 0304 	orr.w	r3, r3, #4
 81013a0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81013a4:	4b17      	ldr	r3, [pc, #92]	; (8101404 <MX_GPIO_Init+0x11c>)
 81013a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81013aa:	f003 0304 	and.w	r3, r3, #4
 81013ae:	607b      	str	r3, [r7, #4]
 81013b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 81013b2:	4b14      	ldr	r3, [pc, #80]	; (8101404 <MX_GPIO_Init+0x11c>)
 81013b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81013b8:	4a12      	ldr	r2, [pc, #72]	; (8101404 <MX_GPIO_Init+0x11c>)
 81013ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 81013be:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81013c2:	4b10      	ldr	r3, [pc, #64]	; (8101404 <MX_GPIO_Init+0x11c>)
 81013c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81013c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 81013cc:	603b      	str	r3, [r7, #0]
 81013ce:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pins : PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = LSM9DS1_INT2_AG_Pin|LSM9DS1_INT_AG_Pin|LSM9DS1_INT_M_Pin;
 81013d0:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 81013d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 81013d6:	4b0c      	ldr	r3, [pc, #48]	; (8101408 <MX_GPIO_Init+0x120>)
 81013d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 81013da:	2300      	movs	r3, #0
 81013dc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 81013de:	f107 031c 	add.w	r3, r7, #28
 81013e2:	4619      	mov	r1, r3
 81013e4:	4809      	ldr	r0, [pc, #36]	; (810140c <MX_GPIO_Init+0x124>)
 81013e6:	f005 fdd7 	bl	8106f98 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 81013ea:	2200      	movs	r2, #0
 81013ec:	2105      	movs	r1, #5
 81013ee:	2028      	movs	r0, #40	; 0x28
 81013f0:	f002 ff50 	bl	8104294 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 81013f4:	2028      	movs	r0, #40	; 0x28
 81013f6:	f002 ff67 	bl	81042c8 <HAL_NVIC_EnableIRQ>

}
 81013fa:	bf00      	nop
 81013fc:	3730      	adds	r7, #48	; 0x30
 81013fe:	46bd      	mov	sp, r7
 8101400:	bd80      	pop	{r7, pc}
 8101402:	bf00      	nop
 8101404:	58024400 	.word	0x58024400
 8101408:	11110000 	.word	0x11110000
 810140c:	58021800 	.word	0x58021800

08101410 <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_rx;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8101410:	b580      	push	{r7, lr}
 8101412:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8101414:	4b1b      	ldr	r3, [pc, #108]	; (8101484 <MX_I2C1_Init+0x74>)
 8101416:	4a1c      	ldr	r2, [pc, #112]	; (8101488 <MX_I2C1_Init+0x78>)
 8101418:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x302027FF;
 810141a:	4b1a      	ldr	r3, [pc, #104]	; (8101484 <MX_I2C1_Init+0x74>)
 810141c:	4a1b      	ldr	r2, [pc, #108]	; (810148c <MX_I2C1_Init+0x7c>)
 810141e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8101420:	4b18      	ldr	r3, [pc, #96]	; (8101484 <MX_I2C1_Init+0x74>)
 8101422:	2200      	movs	r2, #0
 8101424:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8101426:	4b17      	ldr	r3, [pc, #92]	; (8101484 <MX_I2C1_Init+0x74>)
 8101428:	2201      	movs	r2, #1
 810142a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 810142c:	4b15      	ldr	r3, [pc, #84]	; (8101484 <MX_I2C1_Init+0x74>)
 810142e:	2200      	movs	r2, #0
 8101430:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8101432:	4b14      	ldr	r3, [pc, #80]	; (8101484 <MX_I2C1_Init+0x74>)
 8101434:	2200      	movs	r2, #0
 8101436:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8101438:	4b12      	ldr	r3, [pc, #72]	; (8101484 <MX_I2C1_Init+0x74>)
 810143a:	2200      	movs	r2, #0
 810143c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 810143e:	4b11      	ldr	r3, [pc, #68]	; (8101484 <MX_I2C1_Init+0x74>)
 8101440:	2200      	movs	r2, #0
 8101442:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8101444:	4b0f      	ldr	r3, [pc, #60]	; (8101484 <MX_I2C1_Init+0x74>)
 8101446:	2200      	movs	r2, #0
 8101448:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 810144a:	480e      	ldr	r0, [pc, #56]	; (8101484 <MX_I2C1_Init+0x74>)
 810144c:	f005 ffc8 	bl	81073e0 <HAL_I2C_Init>
 8101450:	4603      	mov	r3, r0
 8101452:	2b00      	cmp	r3, #0
 8101454:	d001      	beq.n	810145a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8101456:	f000 fb89 	bl	8101b6c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 810145a:	2100      	movs	r1, #0
 810145c:	4809      	ldr	r0, [pc, #36]	; (8101484 <MX_I2C1_Init+0x74>)
 810145e:	f006 fed4 	bl	810820a <HAL_I2CEx_ConfigAnalogFilter>
 8101462:	4603      	mov	r3, r0
 8101464:	2b00      	cmp	r3, #0
 8101466:	d001      	beq.n	810146c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8101468:	f000 fb80 	bl	8101b6c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 810146c:	2100      	movs	r1, #0
 810146e:	4805      	ldr	r0, [pc, #20]	; (8101484 <MX_I2C1_Init+0x74>)
 8101470:	f006 ff16 	bl	81082a0 <HAL_I2CEx_ConfigDigitalFilter>
 8101474:	4603      	mov	r3, r0
 8101476:	2b00      	cmp	r3, #0
 8101478:	d001      	beq.n	810147e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 810147a:	f000 fb77 	bl	8101b6c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 810147e:	bf00      	nop
 8101480:	bd80      	pop	{r7, pc}
 8101482:	bf00      	nop
 8101484:	10004c94 	.word	0x10004c94
 8101488:	40005400 	.word	0x40005400
 810148c:	302027ff 	.word	0x302027ff

08101490 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8101490:	b580      	push	{r7, lr}
 8101492:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8101494:	4b1b      	ldr	r3, [pc, #108]	; (8101504 <MX_I2C2_Init+0x74>)
 8101496:	4a1c      	ldr	r2, [pc, #112]	; (8101508 <MX_I2C2_Init+0x78>)
 8101498:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x307075B1;
 810149a:	4b1a      	ldr	r3, [pc, #104]	; (8101504 <MX_I2C2_Init+0x74>)
 810149c:	4a1b      	ldr	r2, [pc, #108]	; (810150c <MX_I2C2_Init+0x7c>)
 810149e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 81014a0:	4b18      	ldr	r3, [pc, #96]	; (8101504 <MX_I2C2_Init+0x74>)
 81014a2:	2200      	movs	r2, #0
 81014a4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 81014a6:	4b17      	ldr	r3, [pc, #92]	; (8101504 <MX_I2C2_Init+0x74>)
 81014a8:	2201      	movs	r2, #1
 81014aa:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 81014ac:	4b15      	ldr	r3, [pc, #84]	; (8101504 <MX_I2C2_Init+0x74>)
 81014ae:	2200      	movs	r2, #0
 81014b0:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 81014b2:	4b14      	ldr	r3, [pc, #80]	; (8101504 <MX_I2C2_Init+0x74>)
 81014b4:	2200      	movs	r2, #0
 81014b6:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 81014b8:	4b12      	ldr	r3, [pc, #72]	; (8101504 <MX_I2C2_Init+0x74>)
 81014ba:	2200      	movs	r2, #0
 81014bc:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 81014be:	4b11      	ldr	r3, [pc, #68]	; (8101504 <MX_I2C2_Init+0x74>)
 81014c0:	2200      	movs	r2, #0
 81014c2:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 81014c4:	4b0f      	ldr	r3, [pc, #60]	; (8101504 <MX_I2C2_Init+0x74>)
 81014c6:	2200      	movs	r2, #0
 81014c8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 81014ca:	480e      	ldr	r0, [pc, #56]	; (8101504 <MX_I2C2_Init+0x74>)
 81014cc:	f005 ff88 	bl	81073e0 <HAL_I2C_Init>
 81014d0:	4603      	mov	r3, r0
 81014d2:	2b00      	cmp	r3, #0
 81014d4:	d001      	beq.n	81014da <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 81014d6:	f000 fb49 	bl	8101b6c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 81014da:	2100      	movs	r1, #0
 81014dc:	4809      	ldr	r0, [pc, #36]	; (8101504 <MX_I2C2_Init+0x74>)
 81014de:	f006 fe94 	bl	810820a <HAL_I2CEx_ConfigAnalogFilter>
 81014e2:	4603      	mov	r3, r0
 81014e4:	2b00      	cmp	r3, #0
 81014e6:	d001      	beq.n	81014ec <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 81014e8:	f000 fb40 	bl	8101b6c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 81014ec:	2100      	movs	r1, #0
 81014ee:	4805      	ldr	r0, [pc, #20]	; (8101504 <MX_I2C2_Init+0x74>)
 81014f0:	f006 fed6 	bl	81082a0 <HAL_I2CEx_ConfigDigitalFilter>
 81014f4:	4603      	mov	r3, r0
 81014f6:	2b00      	cmp	r3, #0
 81014f8:	d001      	beq.n	81014fe <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 81014fa:	f000 fb37 	bl	8101b6c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 81014fe:	bf00      	nop
 8101500:	bd80      	pop	{r7, pc}
 8101502:	bf00      	nop
 8101504:	10004ce0 	.word	0x10004ce0
 8101508:	40005800 	.word	0x40005800
 810150c:	307075b1 	.word	0x307075b1

08101510 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8101510:	b580      	push	{r7, lr}
 8101512:	b0ba      	sub	sp, #232	; 0xe8
 8101514:	af00      	add	r7, sp, #0
 8101516:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8101518:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 810151c:	2200      	movs	r2, #0
 810151e:	601a      	str	r2, [r3, #0]
 8101520:	605a      	str	r2, [r3, #4]
 8101522:	609a      	str	r2, [r3, #8]
 8101524:	60da      	str	r2, [r3, #12]
 8101526:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8101528:	f107 0318 	add.w	r3, r7, #24
 810152c:	22bc      	movs	r2, #188	; 0xbc
 810152e:	2100      	movs	r1, #0
 8101530:	4618      	mov	r0, r3
 8101532:	f015 fda5 	bl	8117080 <memset>
  if(i2cHandle->Instance==I2C1)
 8101536:	687b      	ldr	r3, [r7, #4]
 8101538:	681b      	ldr	r3, [r3, #0]
 810153a:	4a80      	ldr	r2, [pc, #512]	; (810173c <HAL_I2C_MspInit+0x22c>)
 810153c:	4293      	cmp	r3, r2
 810153e:	f040 80b0 	bne.w	81016a2 <HAL_I2C_MspInit+0x192>
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8101542:	2308      	movs	r3, #8
 8101544:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8101546:	2300      	movs	r3, #0
 8101548:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 810154c:	f107 0318 	add.w	r3, r7, #24
 8101550:	4618      	mov	r0, r3
 8101552:	f008 f939 	bl	81097c8 <HAL_RCCEx_PeriphCLKConfig>
 8101556:	4603      	mov	r3, r0
 8101558:	2b00      	cmp	r3, #0
 810155a:	d001      	beq.n	8101560 <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 810155c:	f000 fb06 	bl	8101b6c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8101560:	4b77      	ldr	r3, [pc, #476]	; (8101740 <HAL_I2C_MspInit+0x230>)
 8101562:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101566:	4a76      	ldr	r2, [pc, #472]	; (8101740 <HAL_I2C_MspInit+0x230>)
 8101568:	f043 0302 	orr.w	r3, r3, #2
 810156c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101570:	4b73      	ldr	r3, [pc, #460]	; (8101740 <HAL_I2C_MspInit+0x230>)
 8101572:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101576:	f003 0302 	and.w	r3, r3, #2
 810157a:	617b      	str	r3, [r7, #20]
 810157c:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 810157e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8101582:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8101586:	2312      	movs	r3, #18
 8101588:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 810158c:	2300      	movs	r3, #0
 810158e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101592:	2300      	movs	r3, #0
 8101594:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8101598:	2304      	movs	r3, #4
 810159a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 810159e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 81015a2:	4619      	mov	r1, r3
 81015a4:	4867      	ldr	r0, [pc, #412]	; (8101744 <HAL_I2C_MspInit+0x234>)
 81015a6:	f005 fcf7 	bl	8106f98 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 81015aa:	4b65      	ldr	r3, [pc, #404]	; (8101740 <HAL_I2C_MspInit+0x230>)
 81015ac:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 81015b0:	4a63      	ldr	r2, [pc, #396]	; (8101740 <HAL_I2C_MspInit+0x230>)
 81015b2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 81015b6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 81015ba:	4b61      	ldr	r3, [pc, #388]	; (8101740 <HAL_I2C_MspInit+0x230>)
 81015bc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 81015c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 81015c4:	613b      	str	r3, [r7, #16]
 81015c6:	693b      	ldr	r3, [r7, #16]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream5;
 81015c8:	4b5f      	ldr	r3, [pc, #380]	; (8101748 <HAL_I2C_MspInit+0x238>)
 81015ca:	4a60      	ldr	r2, [pc, #384]	; (810174c <HAL_I2C_MspInit+0x23c>)
 81015cc:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_I2C1_RX;
 81015ce:	4b5e      	ldr	r3, [pc, #376]	; (8101748 <HAL_I2C_MspInit+0x238>)
 81015d0:	2221      	movs	r2, #33	; 0x21
 81015d2:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 81015d4:	4b5c      	ldr	r3, [pc, #368]	; (8101748 <HAL_I2C_MspInit+0x238>)
 81015d6:	2200      	movs	r2, #0
 81015d8:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 81015da:	4b5b      	ldr	r3, [pc, #364]	; (8101748 <HAL_I2C_MspInit+0x238>)
 81015dc:	2200      	movs	r2, #0
 81015de:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 81015e0:	4b59      	ldr	r3, [pc, #356]	; (8101748 <HAL_I2C_MspInit+0x238>)
 81015e2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 81015e6:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 81015e8:	4b57      	ldr	r3, [pc, #348]	; (8101748 <HAL_I2C_MspInit+0x238>)
 81015ea:	2200      	movs	r2, #0
 81015ec:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 81015ee:	4b56      	ldr	r3, [pc, #344]	; (8101748 <HAL_I2C_MspInit+0x238>)
 81015f0:	2200      	movs	r2, #0
 81015f2:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 81015f4:	4b54      	ldr	r3, [pc, #336]	; (8101748 <HAL_I2C_MspInit+0x238>)
 81015f6:	2200      	movs	r2, #0
 81015f8:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 81015fa:	4b53      	ldr	r3, [pc, #332]	; (8101748 <HAL_I2C_MspInit+0x238>)
 81015fc:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8101600:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8101602:	4b51      	ldr	r3, [pc, #324]	; (8101748 <HAL_I2C_MspInit+0x238>)
 8101604:	2200      	movs	r2, #0
 8101606:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8101608:	484f      	ldr	r0, [pc, #316]	; (8101748 <HAL_I2C_MspInit+0x238>)
 810160a:	f002 fe7f 	bl	810430c <HAL_DMA_Init>
 810160e:	4603      	mov	r3, r0
 8101610:	2b00      	cmp	r3, #0
 8101612:	d001      	beq.n	8101618 <HAL_I2C_MspInit+0x108>
    {
      Error_Handler();
 8101614:	f000 faaa 	bl	8101b6c <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 8101618:	687b      	ldr	r3, [r7, #4]
 810161a:	4a4b      	ldr	r2, [pc, #300]	; (8101748 <HAL_I2C_MspInit+0x238>)
 810161c:	63da      	str	r2, [r3, #60]	; 0x3c
 810161e:	4a4a      	ldr	r2, [pc, #296]	; (8101748 <HAL_I2C_MspInit+0x238>)
 8101620:	687b      	ldr	r3, [r7, #4]
 8101622:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream6;
 8101624:	4b4a      	ldr	r3, [pc, #296]	; (8101750 <HAL_I2C_MspInit+0x240>)
 8101626:	4a4b      	ldr	r2, [pc, #300]	; (8101754 <HAL_I2C_MspInit+0x244>)
 8101628:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_I2C1_TX;
 810162a:	4b49      	ldr	r3, [pc, #292]	; (8101750 <HAL_I2C_MspInit+0x240>)
 810162c:	2222      	movs	r2, #34	; 0x22
 810162e:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8101630:	4b47      	ldr	r3, [pc, #284]	; (8101750 <HAL_I2C_MspInit+0x240>)
 8101632:	2240      	movs	r2, #64	; 0x40
 8101634:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8101636:	4b46      	ldr	r3, [pc, #280]	; (8101750 <HAL_I2C_MspInit+0x240>)
 8101638:	2200      	movs	r2, #0
 810163a:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 810163c:	4b44      	ldr	r3, [pc, #272]	; (8101750 <HAL_I2C_MspInit+0x240>)
 810163e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8101642:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8101644:	4b42      	ldr	r3, [pc, #264]	; (8101750 <HAL_I2C_MspInit+0x240>)
 8101646:	2200      	movs	r2, #0
 8101648:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 810164a:	4b41      	ldr	r3, [pc, #260]	; (8101750 <HAL_I2C_MspInit+0x240>)
 810164c:	2200      	movs	r2, #0
 810164e:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8101650:	4b3f      	ldr	r3, [pc, #252]	; (8101750 <HAL_I2C_MspInit+0x240>)
 8101652:	2200      	movs	r2, #0
 8101654:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8101656:	4b3e      	ldr	r3, [pc, #248]	; (8101750 <HAL_I2C_MspInit+0x240>)
 8101658:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 810165c:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 810165e:	4b3c      	ldr	r3, [pc, #240]	; (8101750 <HAL_I2C_MspInit+0x240>)
 8101660:	2200      	movs	r2, #0
 8101662:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8101664:	483a      	ldr	r0, [pc, #232]	; (8101750 <HAL_I2C_MspInit+0x240>)
 8101666:	f002 fe51 	bl	810430c <HAL_DMA_Init>
 810166a:	4603      	mov	r3, r0
 810166c:	2b00      	cmp	r3, #0
 810166e:	d001      	beq.n	8101674 <HAL_I2C_MspInit+0x164>
    {
      Error_Handler();
 8101670:	f000 fa7c 	bl	8101b6c <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 8101674:	687b      	ldr	r3, [r7, #4]
 8101676:	4a36      	ldr	r2, [pc, #216]	; (8101750 <HAL_I2C_MspInit+0x240>)
 8101678:	639a      	str	r2, [r3, #56]	; 0x38
 810167a:	4a35      	ldr	r2, [pc, #212]	; (8101750 <HAL_I2C_MspInit+0x240>)
 810167c:	687b      	ldr	r3, [r7, #4]
 810167e:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 8101680:	2200      	movs	r2, #0
 8101682:	2105      	movs	r1, #5
 8101684:	201f      	movs	r0, #31
 8101686:	f002 fe05 	bl	8104294 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 810168a:	201f      	movs	r0, #31
 810168c:	f002 fe1c 	bl	81042c8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 8101690:	2200      	movs	r2, #0
 8101692:	2105      	movs	r1, #5
 8101694:	2020      	movs	r0, #32
 8101696:	f002 fdfd 	bl	8104294 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 810169a:	2020      	movs	r0, #32
 810169c:	f002 fe14 	bl	81042c8 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 81016a0:	e047      	b.n	8101732 <HAL_I2C_MspInit+0x222>
  else if(i2cHandle->Instance==I2C2)
 81016a2:	687b      	ldr	r3, [r7, #4]
 81016a4:	681b      	ldr	r3, [r3, #0]
 81016a6:	4a2c      	ldr	r2, [pc, #176]	; (8101758 <HAL_I2C_MspInit+0x248>)
 81016a8:	4293      	cmp	r3, r2
 81016aa:	d142      	bne.n	8101732 <HAL_I2C_MspInit+0x222>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 81016ac:	2308      	movs	r3, #8
 81016ae:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 81016b0:	2300      	movs	r3, #0
 81016b2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 81016b6:	f107 0318 	add.w	r3, r7, #24
 81016ba:	4618      	mov	r0, r3
 81016bc:	f008 f884 	bl	81097c8 <HAL_RCCEx_PeriphCLKConfig>
 81016c0:	4603      	mov	r3, r0
 81016c2:	2b00      	cmp	r3, #0
 81016c4:	d001      	beq.n	81016ca <HAL_I2C_MspInit+0x1ba>
      Error_Handler();
 81016c6:	f000 fa51 	bl	8101b6c <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 81016ca:	4b1d      	ldr	r3, [pc, #116]	; (8101740 <HAL_I2C_MspInit+0x230>)
 81016cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81016d0:	4a1b      	ldr	r2, [pc, #108]	; (8101740 <HAL_I2C_MspInit+0x230>)
 81016d2:	f043 0302 	orr.w	r3, r3, #2
 81016d6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81016da:	4b19      	ldr	r3, [pc, #100]	; (8101740 <HAL_I2C_MspInit+0x230>)
 81016dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81016e0:	f003 0302 	and.w	r3, r3, #2
 81016e4:	60fb      	str	r3, [r7, #12]
 81016e6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 81016e8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 81016ec:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 81016f0:	2312      	movs	r3, #18
 81016f2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81016f6:	2300      	movs	r3, #0
 81016f8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81016fc:	2300      	movs	r3, #0
 81016fe:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8101702:	2304      	movs	r3, #4
 8101704:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8101708:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 810170c:	4619      	mov	r1, r3
 810170e:	480d      	ldr	r0, [pc, #52]	; (8101744 <HAL_I2C_MspInit+0x234>)
 8101710:	f005 fc42 	bl	8106f98 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8101714:	4b0a      	ldr	r3, [pc, #40]	; (8101740 <HAL_I2C_MspInit+0x230>)
 8101716:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 810171a:	4a09      	ldr	r2, [pc, #36]	; (8101740 <HAL_I2C_MspInit+0x230>)
 810171c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8101720:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8101724:	4b06      	ldr	r3, [pc, #24]	; (8101740 <HAL_I2C_MspInit+0x230>)
 8101726:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 810172a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 810172e:	60bb      	str	r3, [r7, #8]
 8101730:	68bb      	ldr	r3, [r7, #8]
}
 8101732:	bf00      	nop
 8101734:	37e8      	adds	r7, #232	; 0xe8
 8101736:	46bd      	mov	sp, r7
 8101738:	bd80      	pop	{r7, pc}
 810173a:	bf00      	nop
 810173c:	40005400 	.word	0x40005400
 8101740:	58024400 	.word	0x58024400
 8101744:	58020400 	.word	0x58020400
 8101748:	10004d2c 	.word	0x10004d2c
 810174c:	40020088 	.word	0x40020088
 8101750:	10004c1c 	.word	0x10004c1c
 8101754:	400200a0 	.word	0x400200a0
 8101758:	40005800 	.word	0x40005800

0810175c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 810175c:	b580      	push	{r7, lr}
 810175e:	b082      	sub	sp, #8
 8101760:	af00      	add	r7, sp, #0

  /* USER CODE END 1 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /*HW semaphore Clock enable*/
  __HAL_RCC_HSEM_CLK_ENABLE();
 8101762:	4b2f      	ldr	r3, [pc, #188]	; (8101820 <main+0xc4>)
 8101764:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101768:	4a2d      	ldr	r2, [pc, #180]	; (8101820 <main+0xc4>)
 810176a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 810176e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101772:	4b2b      	ldr	r3, [pc, #172]	; (8101820 <main+0xc4>)
 8101774:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101778:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 810177c:	607b      	str	r3, [r7, #4]
 810177e:	687b      	ldr	r3, [r7, #4]
  /* Activate HSEM notification for Cortex-M4*/
  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8101780:	2001      	movs	r0, #1
 8101782:	f005 fdf7 	bl	8107374 <HAL_HSEM_ActivateNotification>
  /*
  Domain D2 goes to STOP mode (Cortex-M4 in deep-sleep) waiting for Cortex-M7 to
  perform system initialization (system clock config, external memory configuration.. )
  */
  HAL_PWREx_ClearPendingEvent();
 8101786:	f007 fdf7 	bl	8109378 <HAL_PWREx_ClearPendingEvent>
  HAL_PWREx_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_STOPENTRY_WFE, PWR_D2_DOMAIN);
 810178a:	2201      	movs	r2, #1
 810178c:	2102      	movs	r1, #2
 810178e:	2000      	movs	r0, #0
 8101790:	f007 fd78 	bl	8109284 <HAL_PWREx_EnterSTOPMode>
  /* Clear HSEM flag */
  __HAL_HSEM_CLEAR_FLAG(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8101794:	4b23      	ldr	r3, [pc, #140]	; (8101824 <main+0xc8>)
 8101796:	681b      	ldr	r3, [r3, #0]
 8101798:	091b      	lsrs	r3, r3, #4
 810179a:	f003 030f 	and.w	r3, r3, #15
 810179e:	2b07      	cmp	r3, #7
 81017a0:	d108      	bne.n	81017b4 <main+0x58>
 81017a2:	4b21      	ldr	r3, [pc, #132]	; (8101828 <main+0xcc>)
 81017a4:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 81017a8:	4a1f      	ldr	r2, [pc, #124]	; (8101828 <main+0xcc>)
 81017aa:	f043 0301 	orr.w	r3, r3, #1
 81017ae:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
 81017b2:	e007      	b.n	81017c4 <main+0x68>
 81017b4:	4b1c      	ldr	r3, [pc, #112]	; (8101828 <main+0xcc>)
 81017b6:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 81017ba:	4a1b      	ldr	r2, [pc, #108]	; (8101828 <main+0xcc>)
 81017bc:	f043 0301 	orr.w	r3, r3, #1
 81017c0:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114

/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 81017c4:	f001 f8a6 	bl	8102914 <HAL_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 81017c8:	f7ff fd8e 	bl	81012e8 <MX_GPIO_Init>
  MX_DMA_Init();
 81017cc:	f7ff fd12 	bl	81011f4 <MX_DMA_Init>
  MX_USART3_UART_Init();
 81017d0:	f000 ff58 	bl	8102684 <MX_USART3_UART_Init>
  MX_TIM1_Init();
 81017d4:	f000 fdd8 	bl	8102388 <MX_TIM1_Init>
  MX_I2C1_Init();
 81017d8:	f7ff fe1a 	bl	8101410 <MX_I2C1_Init>
  MX_SPI1_Init();
 81017dc:	f000 fa88 	bl	8101cf0 <MX_SPI1_Init>
  MX_ADC1_Init();
 81017e0:	f7ff fc02 	bl	8100fe8 <MX_ADC1_Init>
  MX_I2C2_Init();
 81017e4:	f7ff fe54 	bl	8101490 <MX_I2C2_Init>
  MX_SDMMC1_SD_Init();
 81017e8:	f000 f9c8 	bl	8101b7c <MX_SDMMC1_SD_Init>
  MX_FATFS_Init();
 81017ec:	f010 ff12 	bl	8112614 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  ConfigGPS();
 81017f0:	f000 f822 	bl	8101838 <ConfigGPS>


  if(HAL_UART_Receive_DMA(&huart3, (uint8_t *)data_byte, 1)== HAL_OK)
 81017f4:	2201      	movs	r2, #1
 81017f6:	490d      	ldr	r1, [pc, #52]	; (810182c <main+0xd0>)
 81017f8:	480d      	ldr	r0, [pc, #52]	; (8101830 <main+0xd4>)
 81017fa:	f00d fc87 	bl	810f10c <HAL_UART_Receive_DMA>
 81017fe:	4603      	mov	r3, r0
 8101800:	2b00      	cmp	r3, #0
 8101802:	d105      	bne.n	8101810 <main+0xb4>
  {
	  	LEDC_ON();
 8101804:	2201      	movs	r2, #1
 8101806:	f44f 7180 	mov.w	r1, #256	; 0x100
 810180a:	480a      	ldr	r0, [pc, #40]	; (8101834 <main+0xd8>)
 810180c:	f005 fd74 	bl	81072f8 <HAL_GPIO_WritePin>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8101810:	f012 fa6c 	bl	8113cec <osKernelInitialize>
  MX_FREERTOS_Init();
 8101814:	f7ff fd4e 	bl	81012b4 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8101818:	f012 faae 	bl	8113d78 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 810181c:	e7fe      	b.n	810181c <main+0xc0>
 810181e:	bf00      	nop
 8101820:	58024400 	.word	0x58024400
 8101824:	e000ed00 	.word	0xe000ed00
 8101828:	58026400 	.word	0x58026400
 810182c:	10000200 	.word	0x10000200
 8101830:	1000510c 	.word	0x1000510c
 8101834:	58021400 	.word	0x58021400

08101838 <ConfigGPS>:
  }
  /* USER CODE END 3 */
}

void ConfigGPS(void)
{
 8101838:	b590      	push	{r4, r7, lr}
 810183a:	b0c1      	sub	sp, #260	; 0x104
 810183c:	af00      	add	r7, sp, #0
		if(HAL_UART_Transmit_DMA(&huart3, (uint8_t *)UBLOX_10HZ_RATE, sizeof(UBLOX_10HZ_RATE)) == HAL_OK)
 810183e:	4b65      	ldr	r3, [pc, #404]	; (81019d4 <ConfigGPS+0x19c>)
 8101840:	f107 04f0 	add.w	r4, r7, #240	; 0xf0
 8101844:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8101846:	c407      	stmia	r4!, {r0, r1, r2}
 8101848:	8023      	strh	r3, [r4, #0]
 810184a:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 810184e:	220e      	movs	r2, #14
 8101850:	4619      	mov	r1, r3
 8101852:	4861      	ldr	r0, [pc, #388]	; (81019d8 <ConfigGPS+0x1a0>)
 8101854:	f00d fbda 	bl	810f00c <HAL_UART_Transmit_DMA>
 8101858:	4603      	mov	r3, r0
 810185a:	2b00      	cmp	r3, #0
 810185c:	d105      	bne.n	810186a <ConfigGPS+0x32>
		{
		  LEDD_ON();
 810185e:	2201      	movs	r2, #1
 8101860:	f44f 7100 	mov.w	r1, #512	; 0x200
 8101864:	485d      	ldr	r0, [pc, #372]	; (81019dc <ConfigGPS+0x1a4>)
 8101866:	f005 fd47 	bl	81072f8 <HAL_GPIO_WritePin>
		}
		HAL_Delay(100);
 810186a:	2064      	movs	r0, #100	; 0x64
 810186c:	f001 f8d0 	bl	8102a10 <HAL_Delay>

	    if(HAL_UART_Transmit_DMA(&huart3, (uint8_t *)UBLOX_GXGGA_OFF, sizeof(UBLOX_GXGGA_OFF)) == HAL_OK)
 8101870:	4b5b      	ldr	r3, [pc, #364]	; (81019e0 <ConfigGPS+0x1a8>)
 8101872:	f107 04d0 	add.w	r4, r7, #208	; 0xd0
 8101876:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8101878:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 810187c:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8101880:	2210      	movs	r2, #16
 8101882:	4619      	mov	r1, r3
 8101884:	4854      	ldr	r0, [pc, #336]	; (81019d8 <ConfigGPS+0x1a0>)
 8101886:	f00d fbc1 	bl	810f00c <HAL_UART_Transmit_DMA>
 810188a:	4603      	mov	r3, r0
 810188c:	2b00      	cmp	r3, #0
 810188e:	d105      	bne.n	810189c <ConfigGPS+0x64>
	    {
	  	  LEDD_ON();
 8101890:	2201      	movs	r2, #1
 8101892:	f44f 7100 	mov.w	r1, #512	; 0x200
 8101896:	4851      	ldr	r0, [pc, #324]	; (81019dc <ConfigGPS+0x1a4>)
 8101898:	f005 fd2e 	bl	81072f8 <HAL_GPIO_WritePin>
	    }
	    HAL_Delay(100);
 810189c:	2064      	movs	r0, #100	; 0x64
 810189e:	f001 f8b7 	bl	8102a10 <HAL_Delay>

	    if(HAL_UART_Transmit_DMA(&huart3, (uint8_t *)UBLOX_GXGLL_OFF, sizeof(UBLOX_GXGLL_OFF)) == HAL_OK)
 81018a2:	4b50      	ldr	r3, [pc, #320]	; (81019e4 <ConfigGPS+0x1ac>)
 81018a4:	f107 04b0 	add.w	r4, r7, #176	; 0xb0
 81018a8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 81018aa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 81018ae:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 81018b2:	2210      	movs	r2, #16
 81018b4:	4619      	mov	r1, r3
 81018b6:	4848      	ldr	r0, [pc, #288]	; (81019d8 <ConfigGPS+0x1a0>)
 81018b8:	f00d fba8 	bl	810f00c <HAL_UART_Transmit_DMA>
 81018bc:	4603      	mov	r3, r0
 81018be:	2b00      	cmp	r3, #0
 81018c0:	d105      	bne.n	81018ce <ConfigGPS+0x96>
	    {
	  	  LEDD_ON();
 81018c2:	2201      	movs	r2, #1
 81018c4:	f44f 7100 	mov.w	r1, #512	; 0x200
 81018c8:	4844      	ldr	r0, [pc, #272]	; (81019dc <ConfigGPS+0x1a4>)
 81018ca:	f005 fd15 	bl	81072f8 <HAL_GPIO_WritePin>
	    }
	    HAL_Delay(100);
 81018ce:	2064      	movs	r0, #100	; 0x64
 81018d0:	f001 f89e 	bl	8102a10 <HAL_Delay>

	    if(HAL_UART_Transmit_DMA(&huart3, (uint8_t *)UBLOX_GXGSA_OFF, sizeof(UBLOX_GXGSA_OFF)) == HAL_OK)
 81018d4:	4b44      	ldr	r3, [pc, #272]	; (81019e8 <ConfigGPS+0x1b0>)
 81018d6:	f107 0490 	add.w	r4, r7, #144	; 0x90
 81018da:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 81018dc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 81018e0:	f107 0390 	add.w	r3, r7, #144	; 0x90
 81018e4:	2210      	movs	r2, #16
 81018e6:	4619      	mov	r1, r3
 81018e8:	483b      	ldr	r0, [pc, #236]	; (81019d8 <ConfigGPS+0x1a0>)
 81018ea:	f00d fb8f 	bl	810f00c <HAL_UART_Transmit_DMA>
 81018ee:	4603      	mov	r3, r0
 81018f0:	2b00      	cmp	r3, #0
 81018f2:	d105      	bne.n	8101900 <ConfigGPS+0xc8>
	    {
	  	  LEDD_ON();
 81018f4:	2201      	movs	r2, #1
 81018f6:	f44f 7100 	mov.w	r1, #512	; 0x200
 81018fa:	4838      	ldr	r0, [pc, #224]	; (81019dc <ConfigGPS+0x1a4>)
 81018fc:	f005 fcfc 	bl	81072f8 <HAL_GPIO_WritePin>
	    }
	    HAL_Delay(100);
 8101900:	2064      	movs	r0, #100	; 0x64
 8101902:	f001 f885 	bl	8102a10 <HAL_Delay>

	    if(HAL_UART_Transmit_DMA(&huart3, (uint8_t *)UBLOX_GXGSV_OFF, sizeof(UBLOX_GXGSV_OFF)) == HAL_OK)
 8101906:	4b39      	ldr	r3, [pc, #228]	; (81019ec <ConfigGPS+0x1b4>)
 8101908:	f107 0470 	add.w	r4, r7, #112	; 0x70
 810190c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 810190e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8101912:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8101916:	2210      	movs	r2, #16
 8101918:	4619      	mov	r1, r3
 810191a:	482f      	ldr	r0, [pc, #188]	; (81019d8 <ConfigGPS+0x1a0>)
 810191c:	f00d fb76 	bl	810f00c <HAL_UART_Transmit_DMA>
 8101920:	4603      	mov	r3, r0
 8101922:	2b00      	cmp	r3, #0
 8101924:	d105      	bne.n	8101932 <ConfigGPS+0xfa>
	    {
	  	  LEDD_ON();
 8101926:	2201      	movs	r2, #1
 8101928:	f44f 7100 	mov.w	r1, #512	; 0x200
 810192c:	482b      	ldr	r0, [pc, #172]	; (81019dc <ConfigGPS+0x1a4>)
 810192e:	f005 fce3 	bl	81072f8 <HAL_GPIO_WritePin>
	    }
	    HAL_Delay(100);
 8101932:	2064      	movs	r0, #100	; 0x64
 8101934:	f001 f86c 	bl	8102a10 <HAL_Delay>

	    if(HAL_UART_Transmit_DMA(&huart3, (uint8_t *)UBLOX_GXRMC_OFF, sizeof(UBLOX_GXRMC_OFF)) == HAL_OK)
 8101938:	4b2d      	ldr	r3, [pc, #180]	; (81019f0 <ConfigGPS+0x1b8>)
 810193a:	f107 0450 	add.w	r4, r7, #80	; 0x50
 810193e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8101940:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8101944:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8101948:	2210      	movs	r2, #16
 810194a:	4619      	mov	r1, r3
 810194c:	4822      	ldr	r0, [pc, #136]	; (81019d8 <ConfigGPS+0x1a0>)
 810194e:	f00d fb5d 	bl	810f00c <HAL_UART_Transmit_DMA>
 8101952:	4603      	mov	r3, r0
 8101954:	2b00      	cmp	r3, #0
 8101956:	d105      	bne.n	8101964 <ConfigGPS+0x12c>
	    {
	  	  LEDD_ON();
 8101958:	2201      	movs	r2, #1
 810195a:	f44f 7100 	mov.w	r1, #512	; 0x200
 810195e:	481f      	ldr	r0, [pc, #124]	; (81019dc <ConfigGPS+0x1a4>)
 8101960:	f005 fcca 	bl	81072f8 <HAL_GPIO_WritePin>
	    }
	    HAL_Delay(100);
 8101964:	2064      	movs	r0, #100	; 0x64
 8101966:	f001 f853 	bl	8102a10 <HAL_Delay>

	    if(HAL_UART_Transmit_DMA(&huart3, (uint8_t *)UBLOX_GXVTG_OFF, sizeof(UBLOX_GXVTG_OFF)) == HAL_OK)
 810196a:	4b22      	ldr	r3, [pc, #136]	; (81019f4 <ConfigGPS+0x1bc>)
 810196c:	f107 0430 	add.w	r4, r7, #48	; 0x30
 8101970:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8101972:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8101976:	f107 0330 	add.w	r3, r7, #48	; 0x30
 810197a:	2210      	movs	r2, #16
 810197c:	4619      	mov	r1, r3
 810197e:	4816      	ldr	r0, [pc, #88]	; (81019d8 <ConfigGPS+0x1a0>)
 8101980:	f00d fb44 	bl	810f00c <HAL_UART_Transmit_DMA>
 8101984:	4603      	mov	r3, r0
 8101986:	2b00      	cmp	r3, #0
 8101988:	d105      	bne.n	8101996 <ConfigGPS+0x15e>
	    {
	  	  LEDD_ON();
 810198a:	2201      	movs	r2, #1
 810198c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8101990:	4812      	ldr	r0, [pc, #72]	; (81019dc <ConfigGPS+0x1a4>)
 8101992:	f005 fcb1 	bl	81072f8 <HAL_GPIO_WritePin>
	    }
	    HAL_Delay(100);
 8101996:	2064      	movs	r0, #100	; 0x64
 8101998:	f001 f83a 	bl	8102a10 <HAL_Delay>

	    if(HAL_UART_Transmit_DMA(&huart3, (uint8_t *)UBLOX_NAVPVT_ON, sizeof(UBLOX_NAVPVT_ON)) == HAL_OK)
 810199c:	4b16      	ldr	r3, [pc, #88]	; (81019f8 <ConfigGPS+0x1c0>)
 810199e:	f107 0410 	add.w	r4, r7, #16
 81019a2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 81019a4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 81019a8:	f107 0310 	add.w	r3, r7, #16
 81019ac:	2210      	movs	r2, #16
 81019ae:	4619      	mov	r1, r3
 81019b0:	4809      	ldr	r0, [pc, #36]	; (81019d8 <ConfigGPS+0x1a0>)
 81019b2:	f00d fb2b 	bl	810f00c <HAL_UART_Transmit_DMA>
 81019b6:	4603      	mov	r3, r0
 81019b8:	2b00      	cmp	r3, #0
 81019ba:	d105      	bne.n	81019c8 <ConfigGPS+0x190>
	    {
	  	  LEDD_ON();
 81019bc:	2201      	movs	r2, #1
 81019be:	f44f 7100 	mov.w	r1, #512	; 0x200
 81019c2:	4806      	ldr	r0, [pc, #24]	; (81019dc <ConfigGPS+0x1a4>)
 81019c4:	f005 fc98 	bl	81072f8 <HAL_GPIO_WritePin>
	    }
}
 81019c8:	bf00      	nop
 81019ca:	f507 7782 	add.w	r7, r7, #260	; 0x104
 81019ce:	46bd      	mov	sp, r7
 81019d0:	bd90      	pop	{r4, r7, pc}
 81019d2:	bf00      	nop
 81019d4:	08119a3c 	.word	0x08119a3c
 81019d8:	1000510c 	.word	0x1000510c
 81019dc:	58021400 	.word	0x58021400
 81019e0:	08119a4c 	.word	0x08119a4c
 81019e4:	08119a5c 	.word	0x08119a5c
 81019e8:	08119a6c 	.word	0x08119a6c
 81019ec:	08119a7c 	.word	0x08119a7c
 81019f0:	08119a8c 	.word	0x08119a8c
 81019f4:	08119a9c 	.word	0x08119a9c
 81019f8:	08119aac 	.word	0x08119aac

081019fc <HAL_UART_RxCpltCallback>:


/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 81019fc:	b580      	push	{r7, lr}
 81019fe:	b084      	sub	sp, #16
 8101a00:	af00      	add	r7, sp, #0
 8101a02:	6078      	str	r0, [r7, #4]
	static int byte_pos = 0;
	static unsigned char checksum[2];
	const int data_size = sizeof(pvt);
 8101a04:	2360      	movs	r3, #96	; 0x60
 8101a06:	60fb      	str	r3, [r7, #12]

	if(huart->Instance == USART3)
 8101a08:	687b      	ldr	r3, [r7, #4]
 8101a0a:	681b      	ldr	r3, [r3, #0]
 8101a0c:	4a37      	ldr	r2, [pc, #220]	; (8101aec <HAL_UART_RxCpltCallback+0xf0>)
 8101a0e:	4293      	cmp	r3, r2
 8101a10:	d167      	bne.n	8101ae2 <HAL_UART_RxCpltCallback+0xe6>
	{
		if(byte_pos < 2)
 8101a12:	4b37      	ldr	r3, [pc, #220]	; (8101af0 <HAL_UART_RxCpltCallback+0xf4>)
 8101a14:	681b      	ldr	r3, [r3, #0]
 8101a16:	2b01      	cmp	r3, #1
 8101a18:	dc17      	bgt.n	8101a4a <HAL_UART_RxCpltCallback+0x4e>
		{
			if(data_byte[0] == UBX_HEADER[byte_pos])
 8101a1a:	4b36      	ldr	r3, [pc, #216]	; (8101af4 <HAL_UART_RxCpltCallback+0xf8>)
 8101a1c:	781a      	ldrb	r2, [r3, #0]
 8101a1e:	4b36      	ldr	r3, [pc, #216]	; (8101af8 <HAL_UART_RxCpltCallback+0xfc>)
 8101a20:	881b      	ldrh	r3, [r3, #0]
 8101a22:	813b      	strh	r3, [r7, #8]
 8101a24:	4b32      	ldr	r3, [pc, #200]	; (8101af0 <HAL_UART_RxCpltCallback+0xf4>)
 8101a26:	681b      	ldr	r3, [r3, #0]
 8101a28:	f107 0110 	add.w	r1, r7, #16
 8101a2c:	440b      	add	r3, r1
 8101a2e:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 8101a32:	429a      	cmp	r2, r3
 8101a34:	d105      	bne.n	8101a42 <HAL_UART_RxCpltCallback+0x46>
			{
				byte_pos++;
 8101a36:	4b2e      	ldr	r3, [pc, #184]	; (8101af0 <HAL_UART_RxCpltCallback+0xf4>)
 8101a38:	681b      	ldr	r3, [r3, #0]
 8101a3a:	3301      	adds	r3, #1
 8101a3c:	4a2c      	ldr	r2, [pc, #176]	; (8101af0 <HAL_UART_RxCpltCallback+0xf4>)
 8101a3e:	6013      	str	r3, [r2, #0]
		    	  byte_pos = 0;
		      }
		}
	}

}
 8101a40:	e04f      	b.n	8101ae2 <HAL_UART_RxCpltCallback+0xe6>
				byte_pos = 0;
 8101a42:	4b2b      	ldr	r3, [pc, #172]	; (8101af0 <HAL_UART_RxCpltCallback+0xf4>)
 8101a44:	2200      	movs	r2, #0
 8101a46:	601a      	str	r2, [r3, #0]
}
 8101a48:	e04b      	b.n	8101ae2 <HAL_UART_RxCpltCallback+0xe6>
			if( (byte_pos-2) < data_size)
 8101a4a:	4b29      	ldr	r3, [pc, #164]	; (8101af0 <HAL_UART_RxCpltCallback+0xf4>)
 8101a4c:	681b      	ldr	r3, [r3, #0]
 8101a4e:	3b01      	subs	r3, #1
 8101a50:	68fa      	ldr	r2, [r7, #12]
 8101a52:	429a      	cmp	r2, r3
 8101a54:	db07      	blt.n	8101a66 <HAL_UART_RxCpltCallback+0x6a>
				((unsigned char*)(&pvt))[byte_pos-2] = data_byte[0];
 8101a56:	4b26      	ldr	r3, [pc, #152]	; (8101af0 <HAL_UART_RxCpltCallback+0xf4>)
 8101a58:	681b      	ldr	r3, [r3, #0]
 8101a5a:	3b02      	subs	r3, #2
 8101a5c:	4a27      	ldr	r2, [pc, #156]	; (8101afc <HAL_UART_RxCpltCallback+0x100>)
 8101a5e:	4413      	add	r3, r2
 8101a60:	4a24      	ldr	r2, [pc, #144]	; (8101af4 <HAL_UART_RxCpltCallback+0xf8>)
 8101a62:	7812      	ldrb	r2, [r2, #0]
 8101a64:	701a      	strb	r2, [r3, #0]
			byte_pos++;
 8101a66:	4b22      	ldr	r3, [pc, #136]	; (8101af0 <HAL_UART_RxCpltCallback+0xf4>)
 8101a68:	681b      	ldr	r3, [r3, #0]
 8101a6a:	3301      	adds	r3, #1
 8101a6c:	4a20      	ldr	r2, [pc, #128]	; (8101af0 <HAL_UART_RxCpltCallback+0xf4>)
 8101a6e:	6013      	str	r3, [r2, #0]
			if ( byte_pos == (data_size+2) )
 8101a70:	68fb      	ldr	r3, [r7, #12]
 8101a72:	1c9a      	adds	r2, r3, #2
 8101a74:	4b1e      	ldr	r3, [pc, #120]	; (8101af0 <HAL_UART_RxCpltCallback+0xf4>)
 8101a76:	681b      	ldr	r3, [r3, #0]
 8101a78:	429a      	cmp	r2, r3
 8101a7a:	d103      	bne.n	8101a84 <HAL_UART_RxCpltCallback+0x88>
			        calcChecksum(checksum);
 8101a7c:	4820      	ldr	r0, [pc, #128]	; (8101b00 <HAL_UART_RxCpltCallback+0x104>)
 8101a7e:	f000 fdd3 	bl	8102628 <calcChecksum>
}
 8101a82:	e02e      	b.n	8101ae2 <HAL_UART_RxCpltCallback+0xe6>
			else if ( byte_pos == (data_size+3) )
 8101a84:	68fb      	ldr	r3, [r7, #12]
 8101a86:	1cda      	adds	r2, r3, #3
 8101a88:	4b19      	ldr	r3, [pc, #100]	; (8101af0 <HAL_UART_RxCpltCallback+0xf4>)
 8101a8a:	681b      	ldr	r3, [r3, #0]
 8101a8c:	429a      	cmp	r2, r3
 8101a8e:	d109      	bne.n	8101aa4 <HAL_UART_RxCpltCallback+0xa8>
				if ( data_byte[0] != checksum[0] )
 8101a90:	4b18      	ldr	r3, [pc, #96]	; (8101af4 <HAL_UART_RxCpltCallback+0xf8>)
 8101a92:	781a      	ldrb	r2, [r3, #0]
 8101a94:	4b1a      	ldr	r3, [pc, #104]	; (8101b00 <HAL_UART_RxCpltCallback+0x104>)
 8101a96:	781b      	ldrb	r3, [r3, #0]
 8101a98:	429a      	cmp	r2, r3
 8101a9a:	d022      	beq.n	8101ae2 <HAL_UART_RxCpltCallback+0xe6>
					byte_pos = 0;
 8101a9c:	4b14      	ldr	r3, [pc, #80]	; (8101af0 <HAL_UART_RxCpltCallback+0xf4>)
 8101a9e:	2200      	movs	r2, #0
 8101aa0:	601a      	str	r2, [r3, #0]
}
 8101aa2:	e01e      	b.n	8101ae2 <HAL_UART_RxCpltCallback+0xe6>
		      else if ( byte_pos == (data_size+4) ) {
 8101aa4:	68fb      	ldr	r3, [r7, #12]
 8101aa6:	1d1a      	adds	r2, r3, #4
 8101aa8:	4b11      	ldr	r3, [pc, #68]	; (8101af0 <HAL_UART_RxCpltCallback+0xf4>)
 8101aaa:	681b      	ldr	r3, [r3, #0]
 8101aac:	429a      	cmp	r2, r3
 8101aae:	d10f      	bne.n	8101ad0 <HAL_UART_RxCpltCallback+0xd4>
		    	  byte_pos = 0;
 8101ab0:	4b0f      	ldr	r3, [pc, #60]	; (8101af0 <HAL_UART_RxCpltCallback+0xf4>)
 8101ab2:	2200      	movs	r2, #0
 8101ab4:	601a      	str	r2, [r3, #0]
		        if ( data_byte[0] == checksum[1] ) {
 8101ab6:	4b0f      	ldr	r3, [pc, #60]	; (8101af4 <HAL_UART_RxCpltCallback+0xf8>)
 8101ab8:	781a      	ldrb	r2, [r3, #0]
 8101aba:	4b11      	ldr	r3, [pc, #68]	; (8101b00 <HAL_UART_RxCpltCallback+0x104>)
 8101abc:	785b      	ldrb	r3, [r3, #1]
 8101abe:	429a      	cmp	r2, r3
 8101ac0:	d10f      	bne.n	8101ae2 <HAL_UART_RxCpltCallback+0xe6>
		        	LEDB_ON();
 8101ac2:	2201      	movs	r2, #1
 8101ac4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8101ac8:	480e      	ldr	r0, [pc, #56]	; (8101b04 <HAL_UART_RxCpltCallback+0x108>)
 8101aca:	f005 fc15 	bl	81072f8 <HAL_GPIO_WritePin>
}
 8101ace:	e008      	b.n	8101ae2 <HAL_UART_RxCpltCallback+0xe6>
		      else if ( byte_pos > (data_size+4) ) {
 8101ad0:	68fb      	ldr	r3, [r7, #12]
 8101ad2:	1d1a      	adds	r2, r3, #4
 8101ad4:	4b06      	ldr	r3, [pc, #24]	; (8101af0 <HAL_UART_RxCpltCallback+0xf4>)
 8101ad6:	681b      	ldr	r3, [r3, #0]
 8101ad8:	429a      	cmp	r2, r3
 8101ada:	da02      	bge.n	8101ae2 <HAL_UART_RxCpltCallback+0xe6>
		    	  byte_pos = 0;
 8101adc:	4b04      	ldr	r3, [pc, #16]	; (8101af0 <HAL_UART_RxCpltCallback+0xf4>)
 8101ade:	2200      	movs	r2, #0
 8101ae0:	601a      	str	r2, [r3, #0]
}
 8101ae2:	bf00      	nop
 8101ae4:	3710      	adds	r7, #16
 8101ae6:	46bd      	mov	sp, r7
 8101ae8:	bd80      	pop	{r7, pc}
 8101aea:	bf00      	nop
 8101aec:	40004800 	.word	0x40004800
 8101af0:	10000204 	.word	0x10000204
 8101af4:	10000200 	.word	0x10000200
 8101af8:	08119abc 	.word	0x08119abc
 8101afc:	10004da4 	.word	0x10004da4
 8101b00:	10000208 	.word	0x10000208
 8101b04:	58021000 	.word	0x58021000

08101b08 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8101b08:	b580      	push	{r7, lr}
 8101b0a:	b082      	sub	sp, #8
 8101b0c:	af00      	add	r7, sp, #0
 8101b0e:	6078      	str	r0, [r7, #4]
   if(huart->Instance == USART3)
 8101b10:	687b      	ldr	r3, [r7, #4]
 8101b12:	681b      	ldr	r3, [r3, #0]
 8101b14:	4a05      	ldr	r2, [pc, #20]	; (8101b2c <HAL_UART_TxCpltCallback+0x24>)
 8101b16:	4293      	cmp	r3, r2
 8101b18:	d104      	bne.n	8101b24 <HAL_UART_TxCpltCallback+0x1c>
	 {
	   LEDA_ON();
 8101b1a:	2201      	movs	r2, #1
 8101b1c:	2180      	movs	r1, #128	; 0x80
 8101b1e:	4804      	ldr	r0, [pc, #16]	; (8101b30 <HAL_UART_TxCpltCallback+0x28>)
 8101b20:	f005 fbea 	bl	81072f8 <HAL_GPIO_WritePin>
	 }
}
 8101b24:	bf00      	nop
 8101b26:	3708      	adds	r7, #8
 8101b28:	46bd      	mov	sp, r7
 8101b2a:	bd80      	pop	{r7, pc}
 8101b2c:	40004800 	.word	0x40004800
 8101b30:	58021000 	.word	0x58021000

08101b34 <HAL_UART_ErrorCallback>:



void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8101b34:	b480      	push	{r7}
 8101b36:	b083      	sub	sp, #12
 8101b38:	af00      	add	r7, sp, #0
 8101b3a:	6078      	str	r0, [r7, #4]
  /* Initialization Error */


}
 8101b3c:	bf00      	nop
 8101b3e:	370c      	adds	r7, #12
 8101b40:	46bd      	mov	sp, r7
 8101b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101b46:	4770      	bx	lr

08101b48 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8101b48:	b580      	push	{r7, lr}
 8101b4a:	b082      	sub	sp, #8
 8101b4c:	af00      	add	r7, sp, #0
 8101b4e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 8101b50:	687b      	ldr	r3, [r7, #4]
 8101b52:	681b      	ldr	r3, [r3, #0]
 8101b54:	4a04      	ldr	r2, [pc, #16]	; (8101b68 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8101b56:	4293      	cmp	r3, r2
 8101b58:	d101      	bne.n	8101b5e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8101b5a:	f000 ff39 	bl	81029d0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8101b5e:	bf00      	nop
 8101b60:	3708      	adds	r7, #8
 8101b62:	46bd      	mov	sp, r7
 8101b64:	bd80      	pop	{r7, pc}
 8101b66:	bf00      	nop
 8101b68:	40001400 	.word	0x40001400

08101b6c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8101b6c:	b480      	push	{r7}
 8101b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8101b70:	bf00      	nop
 8101b72:	46bd      	mov	sp, r7
 8101b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101b78:	4770      	bx	lr
	...

08101b7c <MX_SDMMC1_SD_Init>:
SD_HandleTypeDef hsd1;

/* SDMMC1 init function */

void MX_SDMMC1_SD_Init(void)
{
 8101b7c:	b580      	push	{r7, lr}
 8101b7e:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8101b80:	4b0f      	ldr	r3, [pc, #60]	; (8101bc0 <MX_SDMMC1_SD_Init+0x44>)
 8101b82:	4a10      	ldr	r2, [pc, #64]	; (8101bc4 <MX_SDMMC1_SD_Init+0x48>)
 8101b84:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8101b86:	4b0e      	ldr	r3, [pc, #56]	; (8101bc0 <MX_SDMMC1_SD_Init+0x44>)
 8101b88:	2200      	movs	r2, #0
 8101b8a:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8101b8c:	4b0c      	ldr	r3, [pc, #48]	; (8101bc0 <MX_SDMMC1_SD_Init+0x44>)
 8101b8e:	2200      	movs	r2, #0
 8101b90:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8101b92:	4b0b      	ldr	r3, [pc, #44]	; (8101bc0 <MX_SDMMC1_SD_Init+0x44>)
 8101b94:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8101b98:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8101b9a:	4b09      	ldr	r3, [pc, #36]	; (8101bc0 <MX_SDMMC1_SD_Init+0x44>)
 8101b9c:	2200      	movs	r2, #0
 8101b9e:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 4;
 8101ba0:	4b07      	ldr	r3, [pc, #28]	; (8101bc0 <MX_SDMMC1_SD_Init+0x44>)
 8101ba2:	2204      	movs	r2, #4
 8101ba4:	615a      	str	r2, [r3, #20]
  hsd1.Init.TranceiverPresent = SDMMC_TRANSCEIVER_NOT_PRESENT;
 8101ba6:	4b06      	ldr	r3, [pc, #24]	; (8101bc0 <MX_SDMMC1_SD_Init+0x44>)
 8101ba8:	2201      	movs	r2, #1
 8101baa:	619a      	str	r2, [r3, #24]
  if (HAL_SD_Init(&hsd1) != HAL_OK)
 8101bac:	4804      	ldr	r0, [pc, #16]	; (8101bc0 <MX_SDMMC1_SD_Init+0x44>)
 8101bae:	f009 ff91 	bl	810bad4 <HAL_SD_Init>
 8101bb2:	4603      	mov	r3, r0
 8101bb4:	2b00      	cmp	r3, #0
 8101bb6:	d001      	beq.n	8101bbc <MX_SDMMC1_SD_Init+0x40>
  {
    Error_Handler();
 8101bb8:	f7ff ffd8 	bl	8101b6c <Error_Handler>
  }
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8101bbc:	bf00      	nop
 8101bbe:	bd80      	pop	{r7, pc}
 8101bc0:	10004e04 	.word	0x10004e04
 8101bc4:	52007000 	.word	0x52007000

08101bc8 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 8101bc8:	b580      	push	{r7, lr}
 8101bca:	b0ba      	sub	sp, #232	; 0xe8
 8101bcc:	af00      	add	r7, sp, #0
 8101bce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8101bd0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8101bd4:	2200      	movs	r2, #0
 8101bd6:	601a      	str	r2, [r3, #0]
 8101bd8:	605a      	str	r2, [r3, #4]
 8101bda:	609a      	str	r2, [r3, #8]
 8101bdc:	60da      	str	r2, [r3, #12]
 8101bde:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8101be0:	f107 0318 	add.w	r3, r7, #24
 8101be4:	22bc      	movs	r2, #188	; 0xbc
 8101be6:	2100      	movs	r1, #0
 8101be8:	4618      	mov	r0, r3
 8101bea:	f015 fa49 	bl	8117080 <memset>
  if(sdHandle->Instance==SDMMC1)
 8101bee:	687b      	ldr	r3, [r7, #4]
 8101bf0:	681b      	ldr	r3, [r3, #0]
 8101bf2:	4a3b      	ldr	r2, [pc, #236]	; (8101ce0 <HAL_SD_MspInit+0x118>)
 8101bf4:	4293      	cmp	r3, r2
 8101bf6:	d16e      	bne.n	8101cd6 <HAL_SD_MspInit+0x10e>
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 8101bf8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8101bfc:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 8101bfe:	2300      	movs	r3, #0
 8101c00:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8101c02:	f107 0318 	add.w	r3, r7, #24
 8101c06:	4618      	mov	r0, r3
 8101c08:	f007 fdde 	bl	81097c8 <HAL_RCCEx_PeriphCLKConfig>
 8101c0c:	4603      	mov	r3, r0
 8101c0e:	2b00      	cmp	r3, #0
 8101c10:	d001      	beq.n	8101c16 <HAL_SD_MspInit+0x4e>
    {
      Error_Handler();
 8101c12:	f7ff ffab 	bl	8101b6c <Error_Handler>
    }

    /* SDMMC1 clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8101c16:	4b33      	ldr	r3, [pc, #204]	; (8101ce4 <HAL_SD_MspInit+0x11c>)
 8101c18:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8101c1c:	4a31      	ldr	r2, [pc, #196]	; (8101ce4 <HAL_SD_MspInit+0x11c>)
 8101c1e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8101c22:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8101c26:	4b2f      	ldr	r3, [pc, #188]	; (8101ce4 <HAL_SD_MspInit+0x11c>)
 8101c28:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8101c2c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8101c30:	617b      	str	r3, [r7, #20]
 8101c32:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8101c34:	4b2b      	ldr	r3, [pc, #172]	; (8101ce4 <HAL_SD_MspInit+0x11c>)
 8101c36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101c3a:	4a2a      	ldr	r2, [pc, #168]	; (8101ce4 <HAL_SD_MspInit+0x11c>)
 8101c3c:	f043 0304 	orr.w	r3, r3, #4
 8101c40:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101c44:	4b27      	ldr	r3, [pc, #156]	; (8101ce4 <HAL_SD_MspInit+0x11c>)
 8101c46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101c4a:	f003 0304 	and.w	r3, r3, #4
 8101c4e:	613b      	str	r3, [r7, #16]
 8101c50:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8101c52:	4b24      	ldr	r3, [pc, #144]	; (8101ce4 <HAL_SD_MspInit+0x11c>)
 8101c54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101c58:	4a22      	ldr	r2, [pc, #136]	; (8101ce4 <HAL_SD_MspInit+0x11c>)
 8101c5a:	f043 0308 	orr.w	r3, r3, #8
 8101c5e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101c62:	4b20      	ldr	r3, [pc, #128]	; (8101ce4 <HAL_SD_MspInit+0x11c>)
 8101c64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101c68:	f003 0308 	and.w	r3, r3, #8
 8101c6c:	60fb      	str	r3, [r7, #12]
 8101c6e:	68fb      	ldr	r3, [r7, #12]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8101c70:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8101c74:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101c78:	2302      	movs	r3, #2
 8101c7a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101c7e:	2300      	movs	r3, #0
 8101c80:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8101c84:	2303      	movs	r3, #3
 8101c86:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8101c8a:	230c      	movs	r3, #12
 8101c8c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8101c90:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8101c94:	4619      	mov	r1, r3
 8101c96:	4814      	ldr	r0, [pc, #80]	; (8101ce8 <HAL_SD_MspInit+0x120>)
 8101c98:	f005 f97e 	bl	8106f98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8101c9c:	2304      	movs	r3, #4
 8101c9e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101ca2:	2302      	movs	r3, #2
 8101ca4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101ca8:	2300      	movs	r3, #0
 8101caa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8101cae:	2303      	movs	r3, #3
 8101cb0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8101cb4:	230c      	movs	r3, #12
 8101cb6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8101cba:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8101cbe:	4619      	mov	r1, r3
 8101cc0:	480a      	ldr	r0, [pc, #40]	; (8101cec <HAL_SD_MspInit+0x124>)
 8101cc2:	f005 f969 	bl	8106f98 <HAL_GPIO_Init>

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 5, 0);
 8101cc6:	2200      	movs	r2, #0
 8101cc8:	2105      	movs	r1, #5
 8101cca:	2031      	movs	r0, #49	; 0x31
 8101ccc:	f002 fae2 	bl	8104294 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 8101cd0:	2031      	movs	r0, #49	; 0x31
 8101cd2:	f002 faf9 	bl	81042c8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }
}
 8101cd6:	bf00      	nop
 8101cd8:	37e8      	adds	r7, #232	; 0xe8
 8101cda:	46bd      	mov	sp, r7
 8101cdc:	bd80      	pop	{r7, pc}
 8101cde:	bf00      	nop
 8101ce0:	52007000 	.word	0x52007000
 8101ce4:	58024400 	.word	0x58024400
 8101ce8:	58020800 	.word	0x58020800
 8101cec:	58020c00 	.word	0x58020c00

08101cf0 <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi1_rx;
DMA_HandleTypeDef hdma_spi1_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8101cf0:	b580      	push	{r7, lr}
 8101cf2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8101cf4:	4b27      	ldr	r3, [pc, #156]	; (8101d94 <MX_SPI1_Init+0xa4>)
 8101cf6:	4a28      	ldr	r2, [pc, #160]	; (8101d98 <MX_SPI1_Init+0xa8>)
 8101cf8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8101cfa:	4b26      	ldr	r3, [pc, #152]	; (8101d94 <MX_SPI1_Init+0xa4>)
 8101cfc:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8101d00:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8101d02:	4b24      	ldr	r3, [pc, #144]	; (8101d94 <MX_SPI1_Init+0xa4>)
 8101d04:	2200      	movs	r2, #0
 8101d06:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8101d08:	4b22      	ldr	r3, [pc, #136]	; (8101d94 <MX_SPI1_Init+0xa4>)
 8101d0a:	2207      	movs	r2, #7
 8101d0c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8101d0e:	4b21      	ldr	r3, [pc, #132]	; (8101d94 <MX_SPI1_Init+0xa4>)
 8101d10:	2200      	movs	r2, #0
 8101d12:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8101d14:	4b1f      	ldr	r3, [pc, #124]	; (8101d94 <MX_SPI1_Init+0xa4>)
 8101d16:	2200      	movs	r2, #0
 8101d18:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8101d1a:	4b1e      	ldr	r3, [pc, #120]	; (8101d94 <MX_SPI1_Init+0xa4>)
 8101d1c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8101d20:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8101d22:	4b1c      	ldr	r3, [pc, #112]	; (8101d94 <MX_SPI1_Init+0xa4>)
 8101d24:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 8101d28:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8101d2a:	4b1a      	ldr	r3, [pc, #104]	; (8101d94 <MX_SPI1_Init+0xa4>)
 8101d2c:	2200      	movs	r2, #0
 8101d2e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8101d30:	4b18      	ldr	r3, [pc, #96]	; (8101d94 <MX_SPI1_Init+0xa4>)
 8101d32:	2200      	movs	r2, #0
 8101d34:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8101d36:	4b17      	ldr	r3, [pc, #92]	; (8101d94 <MX_SPI1_Init+0xa4>)
 8101d38:	2200      	movs	r2, #0
 8101d3a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8101d3c:	4b15      	ldr	r3, [pc, #84]	; (8101d94 <MX_SPI1_Init+0xa4>)
 8101d3e:	2200      	movs	r2, #0
 8101d40:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8101d42:	4b14      	ldr	r3, [pc, #80]	; (8101d94 <MX_SPI1_Init+0xa4>)
 8101d44:	2200      	movs	r2, #0
 8101d46:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8101d48:	4b12      	ldr	r3, [pc, #72]	; (8101d94 <MX_SPI1_Init+0xa4>)
 8101d4a:	2200      	movs	r2, #0
 8101d4c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8101d4e:	4b11      	ldr	r3, [pc, #68]	; (8101d94 <MX_SPI1_Init+0xa4>)
 8101d50:	2200      	movs	r2, #0
 8101d52:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8101d54:	4b0f      	ldr	r3, [pc, #60]	; (8101d94 <MX_SPI1_Init+0xa4>)
 8101d56:	2200      	movs	r2, #0
 8101d58:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8101d5a:	4b0e      	ldr	r3, [pc, #56]	; (8101d94 <MX_SPI1_Init+0xa4>)
 8101d5c:	2200      	movs	r2, #0
 8101d5e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8101d60:	4b0c      	ldr	r3, [pc, #48]	; (8101d94 <MX_SPI1_Init+0xa4>)
 8101d62:	2200      	movs	r2, #0
 8101d64:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8101d66:	4b0b      	ldr	r3, [pc, #44]	; (8101d94 <MX_SPI1_Init+0xa4>)
 8101d68:	2200      	movs	r2, #0
 8101d6a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8101d6c:	4b09      	ldr	r3, [pc, #36]	; (8101d94 <MX_SPI1_Init+0xa4>)
 8101d6e:	2200      	movs	r2, #0
 8101d70:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8101d72:	4b08      	ldr	r3, [pc, #32]	; (8101d94 <MX_SPI1_Init+0xa4>)
 8101d74:	2200      	movs	r2, #0
 8101d76:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8101d78:	4b06      	ldr	r3, [pc, #24]	; (8101d94 <MX_SPI1_Init+0xa4>)
 8101d7a:	2200      	movs	r2, #0
 8101d7c:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8101d7e:	4805      	ldr	r0, [pc, #20]	; (8101d94 <MX_SPI1_Init+0xa4>)
 8101d80:	f00b fb84 	bl	810d48c <HAL_SPI_Init>
 8101d84:	4603      	mov	r3, r0
 8101d86:	2b00      	cmp	r3, #0
 8101d88:	d001      	beq.n	8101d8e <MX_SPI1_Init+0x9e>
  {
    Error_Handler();
 8101d8a:	f7ff feef 	bl	8101b6c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8101d8e:	bf00      	nop
 8101d90:	bd80      	pop	{r7, pc}
 8101d92:	bf00      	nop
 8101d94:	10004e84 	.word	0x10004e84
 8101d98:	40013000 	.word	0x40013000

08101d9c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8101d9c:	b580      	push	{r7, lr}
 8101d9e:	b0b8      	sub	sp, #224	; 0xe0
 8101da0:	af00      	add	r7, sp, #0
 8101da2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8101da4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8101da8:	2200      	movs	r2, #0
 8101daa:	601a      	str	r2, [r3, #0]
 8101dac:	605a      	str	r2, [r3, #4]
 8101dae:	609a      	str	r2, [r3, #8]
 8101db0:	60da      	str	r2, [r3, #12]
 8101db2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8101db4:	f107 0310 	add.w	r3, r7, #16
 8101db8:	22bc      	movs	r2, #188	; 0xbc
 8101dba:	2100      	movs	r1, #0
 8101dbc:	4618      	mov	r0, r3
 8101dbe:	f015 f95f 	bl	8117080 <memset>
  if(spiHandle->Instance==SPI1)
 8101dc2:	687b      	ldr	r3, [r7, #4]
 8101dc4:	681b      	ldr	r3, [r3, #0]
 8101dc6:	4a57      	ldr	r2, [pc, #348]	; (8101f24 <HAL_SPI_MspInit+0x188>)
 8101dc8:	4293      	cmp	r3, r2
 8101dca:	f040 80a7 	bne.w	8101f1c <HAL_SPI_MspInit+0x180>
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8101dce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8101dd2:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8101dd4:	2300      	movs	r3, #0
 8101dd6:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8101dd8:	f107 0310 	add.w	r3, r7, #16
 8101ddc:	4618      	mov	r0, r3
 8101dde:	f007 fcf3 	bl	81097c8 <HAL_RCCEx_PeriphCLKConfig>
 8101de2:	4603      	mov	r3, r0
 8101de4:	2b00      	cmp	r3, #0
 8101de6:	d001      	beq.n	8101dec <HAL_SPI_MspInit+0x50>
    {
      Error_Handler();
 8101de8:	f7ff fec0 	bl	8101b6c <Error_Handler>
    }

    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8101dec:	4b4e      	ldr	r3, [pc, #312]	; (8101f28 <HAL_SPI_MspInit+0x18c>)
 8101dee:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8101df2:	4a4d      	ldr	r2, [pc, #308]	; (8101f28 <HAL_SPI_MspInit+0x18c>)
 8101df4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8101df8:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8101dfc:	4b4a      	ldr	r3, [pc, #296]	; (8101f28 <HAL_SPI_MspInit+0x18c>)
 8101dfe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8101e02:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8101e06:	60fb      	str	r3, [r7, #12]
 8101e08:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8101e0a:	4b47      	ldr	r3, [pc, #284]	; (8101f28 <HAL_SPI_MspInit+0x18c>)
 8101e0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101e10:	4a45      	ldr	r2, [pc, #276]	; (8101f28 <HAL_SPI_MspInit+0x18c>)
 8101e12:	f043 0301 	orr.w	r3, r3, #1
 8101e16:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101e1a:	4b43      	ldr	r3, [pc, #268]	; (8101f28 <HAL_SPI_MspInit+0x18c>)
 8101e1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101e20:	f003 0301 	and.w	r3, r3, #1
 8101e24:	60bb      	str	r3, [r7, #8]
 8101e26:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8101e28:	23e0      	movs	r3, #224	; 0xe0
 8101e2a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101e2e:	2302      	movs	r3, #2
 8101e30:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101e34:	2300      	movs	r3, #0
 8101e36:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101e3a:	2300      	movs	r3, #0
 8101e3c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8101e40:	2305      	movs	r3, #5
 8101e42:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8101e46:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8101e4a:	4619      	mov	r1, r3
 8101e4c:	4837      	ldr	r0, [pc, #220]	; (8101f2c <HAL_SPI_MspInit+0x190>)
 8101e4e:	f005 f8a3 	bl	8106f98 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Stream0;
 8101e52:	4b37      	ldr	r3, [pc, #220]	; (8101f30 <HAL_SPI_MspInit+0x194>)
 8101e54:	4a37      	ldr	r2, [pc, #220]	; (8101f34 <HAL_SPI_MspInit+0x198>)
 8101e56:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 8101e58:	4b35      	ldr	r3, [pc, #212]	; (8101f30 <HAL_SPI_MspInit+0x194>)
 8101e5a:	2225      	movs	r2, #37	; 0x25
 8101e5c:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8101e5e:	4b34      	ldr	r3, [pc, #208]	; (8101f30 <HAL_SPI_MspInit+0x194>)
 8101e60:	2200      	movs	r2, #0
 8101e62:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8101e64:	4b32      	ldr	r3, [pc, #200]	; (8101f30 <HAL_SPI_MspInit+0x194>)
 8101e66:	2200      	movs	r2, #0
 8101e68:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8101e6a:	4b31      	ldr	r3, [pc, #196]	; (8101f30 <HAL_SPI_MspInit+0x194>)
 8101e6c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8101e70:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8101e72:	4b2f      	ldr	r3, [pc, #188]	; (8101f30 <HAL_SPI_MspInit+0x194>)
 8101e74:	2200      	movs	r2, #0
 8101e76:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8101e78:	4b2d      	ldr	r3, [pc, #180]	; (8101f30 <HAL_SPI_MspInit+0x194>)
 8101e7a:	2200      	movs	r2, #0
 8101e7c:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_CIRCULAR;
 8101e7e:	4b2c      	ldr	r3, [pc, #176]	; (8101f30 <HAL_SPI_MspInit+0x194>)
 8101e80:	f44f 7280 	mov.w	r2, #256	; 0x100
 8101e84:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8101e86:	4b2a      	ldr	r3, [pc, #168]	; (8101f30 <HAL_SPI_MspInit+0x194>)
 8101e88:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8101e8c:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8101e8e:	4b28      	ldr	r3, [pc, #160]	; (8101f30 <HAL_SPI_MspInit+0x194>)
 8101e90:	2200      	movs	r2, #0
 8101e92:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8101e94:	4826      	ldr	r0, [pc, #152]	; (8101f30 <HAL_SPI_MspInit+0x194>)
 8101e96:	f002 fa39 	bl	810430c <HAL_DMA_Init>
 8101e9a:	4603      	mov	r3, r0
 8101e9c:	2b00      	cmp	r3, #0
 8101e9e:	d001      	beq.n	8101ea4 <HAL_SPI_MspInit+0x108>
    {
      Error_Handler();
 8101ea0:	f7ff fe64 	bl	8101b6c <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 8101ea4:	687b      	ldr	r3, [r7, #4]
 8101ea6:	4a22      	ldr	r2, [pc, #136]	; (8101f30 <HAL_SPI_MspInit+0x194>)
 8101ea8:	67da      	str	r2, [r3, #124]	; 0x7c
 8101eaa:	4a21      	ldr	r2, [pc, #132]	; (8101f30 <HAL_SPI_MspInit+0x194>)
 8101eac:	687b      	ldr	r3, [r7, #4]
 8101eae:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Stream1;
 8101eb0:	4b21      	ldr	r3, [pc, #132]	; (8101f38 <HAL_SPI_MspInit+0x19c>)
 8101eb2:	4a22      	ldr	r2, [pc, #136]	; (8101f3c <HAL_SPI_MspInit+0x1a0>)
 8101eb4:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 8101eb6:	4b20      	ldr	r3, [pc, #128]	; (8101f38 <HAL_SPI_MspInit+0x19c>)
 8101eb8:	2226      	movs	r2, #38	; 0x26
 8101eba:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8101ebc:	4b1e      	ldr	r3, [pc, #120]	; (8101f38 <HAL_SPI_MspInit+0x19c>)
 8101ebe:	2240      	movs	r2, #64	; 0x40
 8101ec0:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8101ec2:	4b1d      	ldr	r3, [pc, #116]	; (8101f38 <HAL_SPI_MspInit+0x19c>)
 8101ec4:	2200      	movs	r2, #0
 8101ec6:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8101ec8:	4b1b      	ldr	r3, [pc, #108]	; (8101f38 <HAL_SPI_MspInit+0x19c>)
 8101eca:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8101ece:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8101ed0:	4b19      	ldr	r3, [pc, #100]	; (8101f38 <HAL_SPI_MspInit+0x19c>)
 8101ed2:	2200      	movs	r2, #0
 8101ed4:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8101ed6:	4b18      	ldr	r3, [pc, #96]	; (8101f38 <HAL_SPI_MspInit+0x19c>)
 8101ed8:	2200      	movs	r2, #0
 8101eda:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8101edc:	4b16      	ldr	r3, [pc, #88]	; (8101f38 <HAL_SPI_MspInit+0x19c>)
 8101ede:	2200      	movs	r2, #0
 8101ee0:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8101ee2:	4b15      	ldr	r3, [pc, #84]	; (8101f38 <HAL_SPI_MspInit+0x19c>)
 8101ee4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8101ee8:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8101eea:	4b13      	ldr	r3, [pc, #76]	; (8101f38 <HAL_SPI_MspInit+0x19c>)
 8101eec:	2200      	movs	r2, #0
 8101eee:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8101ef0:	4811      	ldr	r0, [pc, #68]	; (8101f38 <HAL_SPI_MspInit+0x19c>)
 8101ef2:	f002 fa0b 	bl	810430c <HAL_DMA_Init>
 8101ef6:	4603      	mov	r3, r0
 8101ef8:	2b00      	cmp	r3, #0
 8101efa:	d001      	beq.n	8101f00 <HAL_SPI_MspInit+0x164>
    {
      Error_Handler();
 8101efc:	f7ff fe36 	bl	8101b6c <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 8101f00:	687b      	ldr	r3, [r7, #4]
 8101f02:	4a0d      	ldr	r2, [pc, #52]	; (8101f38 <HAL_SPI_MspInit+0x19c>)
 8101f04:	679a      	str	r2, [r3, #120]	; 0x78
 8101f06:	4a0c      	ldr	r2, [pc, #48]	; (8101f38 <HAL_SPI_MspInit+0x19c>)
 8101f08:	687b      	ldr	r3, [r7, #4]
 8101f0a:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 8101f0c:	2200      	movs	r2, #0
 8101f0e:	2105      	movs	r1, #5
 8101f10:	2023      	movs	r0, #35	; 0x23
 8101f12:	f002 f9bf 	bl	8104294 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8101f16:	2023      	movs	r0, #35	; 0x23
 8101f18:	f002 f9d6 	bl	81042c8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8101f1c:	bf00      	nop
 8101f1e:	37e0      	adds	r7, #224	; 0xe0
 8101f20:	46bd      	mov	sp, r7
 8101f22:	bd80      	pop	{r7, pc}
 8101f24:	40013000 	.word	0x40013000
 8101f28:	58024400 	.word	0x58024400
 8101f2c:	58020000 	.word	0x58020000
 8101f30:	10004f0c 	.word	0x10004f0c
 8101f34:	40020010 	.word	0x40020010
 8101f38:	10004f84 	.word	0x10004f84
 8101f3c:	40020028 	.word	0x40020028

08101f40 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8101f40:	b580      	push	{r7, lr}
 8101f42:	b082      	sub	sp, #8
 8101f44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8101f46:	4b14      	ldr	r3, [pc, #80]	; (8101f98 <HAL_MspInit+0x58>)
 8101f48:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8101f4c:	4a12      	ldr	r2, [pc, #72]	; (8101f98 <HAL_MspInit+0x58>)
 8101f4e:	f043 0302 	orr.w	r3, r3, #2
 8101f52:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8101f56:	4b10      	ldr	r3, [pc, #64]	; (8101f98 <HAL_MspInit+0x58>)
 8101f58:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8101f5c:	f003 0302 	and.w	r3, r3, #2
 8101f60:	607b      	str	r3, [r7, #4]
 8101f62:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8101f64:	2200      	movs	r2, #0
 8101f66:	210f      	movs	r1, #15
 8101f68:	f06f 0001 	mvn.w	r0, #1
 8101f6c:	f002 f992 	bl	8104294 <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* CM7_SEV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(CM7_SEV_IRQn, 5, 0);
 8101f70:	2200      	movs	r2, #0
 8101f72:	2105      	movs	r1, #5
 8101f74:	2040      	movs	r0, #64	; 0x40
 8101f76:	f002 f98d 	bl	8104294 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CM7_SEV_IRQn);
 8101f7a:	2040      	movs	r0, #64	; 0x40
 8101f7c:	f002 f9a4 	bl	81042c8 <HAL_NVIC_EnableIRQ>
  /* HSEM2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM2_IRQn, 5, 0);
 8101f80:	2200      	movs	r2, #0
 8101f82:	2105      	movs	r1, #5
 8101f84:	207e      	movs	r0, #126	; 0x7e
 8101f86:	f002 f985 	bl	8104294 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM2_IRQn);
 8101f8a:	207e      	movs	r0, #126	; 0x7e
 8101f8c:	f002 f99c 	bl	81042c8 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8101f90:	bf00      	nop
 8101f92:	3708      	adds	r7, #8
 8101f94:	46bd      	mov	sp, r7
 8101f96:	bd80      	pop	{r7, pc}
 8101f98:	58024400 	.word	0x58024400

08101f9c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8101f9c:	b580      	push	{r7, lr}
 8101f9e:	b090      	sub	sp, #64	; 0x40
 8101fa0:	af00      	add	r7, sp, #0
 8101fa2:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM7 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8101fa4:	687b      	ldr	r3, [r7, #4]
 8101fa6:	2b0f      	cmp	r3, #15
 8101fa8:	d827      	bhi.n	8101ffa <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority ,0U);
 8101faa:	2200      	movs	r2, #0
 8101fac:	6879      	ldr	r1, [r7, #4]
 8101fae:	2037      	movs	r0, #55	; 0x37
 8101fb0:	f002 f970 	bl	8104294 <HAL_NVIC_SetPriority>

  /* Enable the TIM7 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8101fb4:	2037      	movs	r0, #55	; 0x37
 8101fb6:	f002 f987 	bl	81042c8 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8101fba:	4a29      	ldr	r2, [pc, #164]	; (8102060 <HAL_InitTick+0xc4>)
 8101fbc:	687b      	ldr	r3, [r7, #4]
 8101fbe:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8101fc0:	4b28      	ldr	r3, [pc, #160]	; (8102064 <HAL_InitTick+0xc8>)
 8101fc2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8101fc6:	4a27      	ldr	r2, [pc, #156]	; (8102064 <HAL_InitTick+0xc8>)
 8101fc8:	f043 0320 	orr.w	r3, r3, #32
 8101fcc:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8101fd0:	4b24      	ldr	r3, [pc, #144]	; (8102064 <HAL_InitTick+0xc8>)
 8101fd2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8101fd6:	f003 0320 	and.w	r3, r3, #32
 8101fda:	60fb      	str	r3, [r7, #12]
 8101fdc:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8101fde:	f107 0210 	add.w	r2, r7, #16
 8101fe2:	f107 0314 	add.w	r3, r7, #20
 8101fe6:	4611      	mov	r1, r2
 8101fe8:	4618      	mov	r0, r3
 8101fea:	f007 fbab 	bl	8109744 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8101fee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8101ff0:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM7 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8101ff2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8101ff4:	2b00      	cmp	r3, #0
 8101ff6:	d106      	bne.n	8102006 <HAL_InitTick+0x6a>
 8101ff8:	e001      	b.n	8101ffe <HAL_InitTick+0x62>
    return HAL_ERROR;
 8101ffa:	2301      	movs	r3, #1
 8101ffc:	e02b      	b.n	8102056 <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8101ffe:	f007 fb75 	bl	81096ec <HAL_RCC_GetPCLK1Freq>
 8102002:	63f8      	str	r0, [r7, #60]	; 0x3c
 8102004:	e004      	b.n	8102010 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8102006:	f007 fb71 	bl	81096ec <HAL_RCC_GetPCLK1Freq>
 810200a:	4603      	mov	r3, r0
 810200c:	005b      	lsls	r3, r3, #1
 810200e:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8102010:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8102012:	4a15      	ldr	r2, [pc, #84]	; (8102068 <HAL_InitTick+0xcc>)
 8102014:	fba2 2303 	umull	r2, r3, r2, r3
 8102018:	0c9b      	lsrs	r3, r3, #18
 810201a:	3b01      	subs	r3, #1
 810201c:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 810201e:	4b13      	ldr	r3, [pc, #76]	; (810206c <HAL_InitTick+0xd0>)
 8102020:	4a13      	ldr	r2, [pc, #76]	; (8102070 <HAL_InitTick+0xd4>)
 8102022:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 8102024:	4b11      	ldr	r3, [pc, #68]	; (810206c <HAL_InitTick+0xd0>)
 8102026:	f240 32e7 	movw	r2, #999	; 0x3e7
 810202a:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 810202c:	4a0f      	ldr	r2, [pc, #60]	; (810206c <HAL_InitTick+0xd0>)
 810202e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8102030:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 8102032:	4b0e      	ldr	r3, [pc, #56]	; (810206c <HAL_InitTick+0xd0>)
 8102034:	2200      	movs	r2, #0
 8102036:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8102038:	4b0c      	ldr	r3, [pc, #48]	; (810206c <HAL_InitTick+0xd0>)
 810203a:	2200      	movs	r2, #0
 810203c:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim7) == HAL_OK)
 810203e:	480b      	ldr	r0, [pc, #44]	; (810206c <HAL_InitTick+0xd0>)
 8102040:	f00b fdf9 	bl	810dc36 <HAL_TIM_Base_Init>
 8102044:	4603      	mov	r3, r0
 8102046:	2b00      	cmp	r3, #0
 8102048:	d104      	bne.n	8102054 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim7);
 810204a:	4808      	ldr	r0, [pc, #32]	; (810206c <HAL_InitTick+0xd0>)
 810204c:	f00b fe4a 	bl	810dce4 <HAL_TIM_Base_Start_IT>
 8102050:	4603      	mov	r3, r0
 8102052:	e000      	b.n	8102056 <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8102054:	2301      	movs	r3, #1
}
 8102056:	4618      	mov	r0, r3
 8102058:	3740      	adds	r7, #64	; 0x40
 810205a:	46bd      	mov	sp, r7
 810205c:	bd80      	pop	{r7, pc}
 810205e:	bf00      	nop
 8102060:	10000008 	.word	0x10000008
 8102064:	58024400 	.word	0x58024400
 8102068:	431bde83 	.word	0x431bde83
 810206c:	10004ffc 	.word	0x10004ffc
 8102070:	40001400 	.word	0x40001400

08102074 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8102074:	b480      	push	{r7}
 8102076:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8102078:	bf00      	nop
 810207a:	46bd      	mov	sp, r7
 810207c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102080:	4770      	bx	lr

08102082 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8102082:	b480      	push	{r7}
 8102084:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8102086:	e7fe      	b.n	8102086 <HardFault_Handler+0x4>

08102088 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8102088:	b480      	push	{r7}
 810208a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 810208c:	e7fe      	b.n	810208c <MemManage_Handler+0x4>

0810208e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 810208e:	b480      	push	{r7}
 8102090:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8102092:	e7fe      	b.n	8102092 <BusFault_Handler+0x4>

08102094 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8102094:	b480      	push	{r7}
 8102096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8102098:	e7fe      	b.n	8102098 <UsageFault_Handler+0x4>

0810209a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 810209a:	b480      	push	{r7}
 810209c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 810209e:	bf00      	nop
 81020a0:	46bd      	mov	sp, r7
 81020a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81020a6:	4770      	bx	lr

081020a8 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 81020a8:	b580      	push	{r7, lr}
 81020aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 81020ac:	4802      	ldr	r0, [pc, #8]	; (81020b8 <DMA1_Stream0_IRQHandler+0x10>)
 81020ae:	f003 fc53 	bl	8105958 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 81020b2:	bf00      	nop
 81020b4:	bd80      	pop	{r7, pc}
 81020b6:	bf00      	nop
 81020b8:	10004f0c 	.word	0x10004f0c

081020bc <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 81020bc:	b580      	push	{r7, lr}
 81020be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 81020c0:	4802      	ldr	r0, [pc, #8]	; (81020cc <DMA1_Stream1_IRQHandler+0x10>)
 81020c2:	f003 fc49 	bl	8105958 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 81020c6:	bf00      	nop
 81020c8:	bd80      	pop	{r7, pc}
 81020ca:	bf00      	nop
 81020cc:	10004f84 	.word	0x10004f84

081020d0 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 81020d0:	b580      	push	{r7, lr}
 81020d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 81020d4:	4802      	ldr	r0, [pc, #8]	; (81020e0 <DMA1_Stream4_IRQHandler+0x10>)
 81020d6:	f003 fc3f 	bl	8105958 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 81020da:	bf00      	nop
 81020dc:	bd80      	pop	{r7, pc}
 81020de:	bf00      	nop
 81020e0:	10004ba0 	.word	0x10004ba0

081020e4 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 81020e4:	b580      	push	{r7, lr}
 81020e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 81020e8:	4802      	ldr	r0, [pc, #8]	; (81020f4 <DMA1_Stream5_IRQHandler+0x10>)
 81020ea:	f003 fc35 	bl	8105958 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 81020ee:	bf00      	nop
 81020f0:	bd80      	pop	{r7, pc}
 81020f2:	bf00      	nop
 81020f4:	10004d2c 	.word	0x10004d2c

081020f8 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 81020f8:	b580      	push	{r7, lr}
 81020fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 81020fc:	4802      	ldr	r0, [pc, #8]	; (8102108 <DMA1_Stream6_IRQHandler+0x10>)
 81020fe:	f003 fc2b 	bl	8105958 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8102102:	bf00      	nop
 8102104:	bd80      	pop	{r7, pc}
 8102106:	bf00      	nop
 8102108:	10004c1c 	.word	0x10004c1c

0810210c <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC_IRQHandler(void)
{
 810210c:	b580      	push	{r7, lr}
 810210e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8102110:	4802      	ldr	r0, [pc, #8]	; (810211c <ADC_IRQHandler+0x10>)
 8102112:	f001 f81b 	bl	810314c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8102116:	bf00      	nop
 8102118:	bd80      	pop	{r7, pc}
 810211a:	bf00      	nop
 810211c:	10004b3c 	.word	0x10004b3c

08102120 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8102120:	b580      	push	{r7, lr}
 8102122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8102124:	4802      	ldr	r0, [pc, #8]	; (8102130 <I2C1_EV_IRQHandler+0x10>)
 8102126:	f005 f9ea 	bl	81074fe <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 810212a:	bf00      	nop
 810212c:	bd80      	pop	{r7, pc}
 810212e:	bf00      	nop
 8102130:	10004c94 	.word	0x10004c94

08102134 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8102134:	b580      	push	{r7, lr}
 8102136:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8102138:	4802      	ldr	r0, [pc, #8]	; (8102144 <I2C1_ER_IRQHandler+0x10>)
 810213a:	f005 f9fa 	bl	8107532 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 810213e:	bf00      	nop
 8102140:	bd80      	pop	{r7, pc}
 8102142:	bf00      	nop
 8102144:	10004c94 	.word	0x10004c94

08102148 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8102148:	b580      	push	{r7, lr}
 810214a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 810214c:	4802      	ldr	r0, [pc, #8]	; (8102158 <SPI1_IRQHandler+0x10>)
 810214e:	f00b fa9f 	bl	810d690 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8102152:	bf00      	nop
 8102154:	bd80      	pop	{r7, pc}
 8102156:	bf00      	nop
 8102158:	10004e84 	.word	0x10004e84

0810215c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 810215c:	b580      	push	{r7, lr}
 810215e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8102160:	4802      	ldr	r0, [pc, #8]	; (810216c <USART3_IRQHandler+0x10>)
 8102162:	f00d f819 	bl	810f198 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8102166:	bf00      	nop
 8102168:	bd80      	pop	{r7, pc}
 810216a:	bf00      	nop
 810216c:	1000510c 	.word	0x1000510c

08102170 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8102170:	b580      	push	{r7, lr}
 8102172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8102174:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8102178:	f005 f8d7 	bl	810732a <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 810217c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8102180:	f005 f8d3 	bl	810732a <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8102184:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8102188:	f005 f8cf 	bl	810732a <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 810218c:	bf00      	nop
 810218e:	bd80      	pop	{r7, pc}

08102190 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 8102190:	b580      	push	{r7, lr}
 8102192:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8102194:	4802      	ldr	r0, [pc, #8]	; (81021a0 <DMA1_Stream7_IRQHandler+0x10>)
 8102196:	f003 fbdf 	bl	8105958 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 810219a:	bf00      	nop
 810219c:	bd80      	pop	{r7, pc}
 810219e:	bf00      	nop
 81021a0:	10005094 	.word	0x10005094

081021a4 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 81021a4:	b580      	push	{r7, lr}
 81021a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 81021a8:	4802      	ldr	r0, [pc, #8]	; (81021b4 <SDMMC1_IRQHandler+0x10>)
 81021aa:	f009 ff0f 	bl	810bfcc <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 81021ae:	bf00      	nop
 81021b0:	bd80      	pop	{r7, pc}
 81021b2:	bf00      	nop
 81021b4:	10004e04 	.word	0x10004e04

081021b8 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 81021b8:	b580      	push	{r7, lr}
 81021ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 81021bc:	4802      	ldr	r0, [pc, #8]	; (81021c8 <TIM7_IRQHandler+0x10>)
 81021be:	f00b fe62 	bl	810de86 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 81021c2:	bf00      	nop
 81021c4:	bd80      	pop	{r7, pc}
 81021c6:	bf00      	nop
 81021c8:	10004ffc 	.word	0x10004ffc

081021cc <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 81021cc:	b580      	push	{r7, lr}
 81021ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 81021d0:	4802      	ldr	r0, [pc, #8]	; (81021dc <DMA2_Stream0_IRQHandler+0x10>)
 81021d2:	f003 fbc1 	bl	8105958 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 81021d6:	bf00      	nop
 81021d8:	bd80      	pop	{r7, pc}
 81021da:	bf00      	nop
 81021dc:	1000519c 	.word	0x1000519c

081021e0 <CM7_SEV_IRQHandler>:

/**
  * @brief This function handles CM7 send event interrupt for CM4.
  */
void CM7_SEV_IRQHandler(void)
{
 81021e0:	b480      	push	{r7}
 81021e2:	af00      	add	r7, sp, #0

  /* USER CODE END CM7_SEV_IRQn 0 */
  /* USER CODE BEGIN CM7_SEV_IRQn 1 */

  /* USER CODE END CM7_SEV_IRQn 1 */
}
 81021e4:	bf00      	nop
 81021e6:	46bd      	mov	sp, r7
 81021e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81021ec:	4770      	bx	lr
	...

081021f0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 81021f0:	b580      	push	{r7, lr}
 81021f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 81021f4:	4802      	ldr	r0, [pc, #8]	; (8102200 <OTG_FS_IRQHandler+0x10>)
 81021f6:	f006 f89f 	bl	8108338 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 81021fa:	bf00      	nop
 81021fc:	bd80      	pop	{r7, pc}
 81021fe:	bf00      	nop
 8102200:	100072c8 	.word	0x100072c8

08102204 <HSEM2_IRQHandler>:

/**
  * @brief This function handles HSEM2 global interrupt.
  */
void HSEM2_IRQHandler(void)
{
 8102204:	b580      	push	{r7, lr}
 8102206:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM2_IRQn 0 */

  /* USER CODE END HSEM2_IRQn 0 */
  HAL_HSEM_IRQHandler();
 8102208:	f005 f8c6 	bl	8107398 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM2_IRQn 1 */

  /* USER CODE END HSEM2_IRQn 1 */
}
 810220c:	bf00      	nop
 810220e:	bd80      	pop	{r7, pc}

08102210 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8102210:	b480      	push	{r7}
 8102212:	af00      	add	r7, sp, #0
	return 1;
 8102214:	2301      	movs	r3, #1
}
 8102216:	4618      	mov	r0, r3
 8102218:	46bd      	mov	sp, r7
 810221a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810221e:	4770      	bx	lr

08102220 <_kill>:

int _kill(int pid, int sig)
{
 8102220:	b580      	push	{r7, lr}
 8102222:	b082      	sub	sp, #8
 8102224:	af00      	add	r7, sp, #0
 8102226:	6078      	str	r0, [r7, #4]
 8102228:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 810222a:	f014 fef1 	bl	8117010 <__errno>
 810222e:	4603      	mov	r3, r0
 8102230:	2216      	movs	r2, #22
 8102232:	601a      	str	r2, [r3, #0]
	return -1;
 8102234:	f04f 33ff 	mov.w	r3, #4294967295
}
 8102238:	4618      	mov	r0, r3
 810223a:	3708      	adds	r7, #8
 810223c:	46bd      	mov	sp, r7
 810223e:	bd80      	pop	{r7, pc}

08102240 <_exit>:

void _exit (int status)
{
 8102240:	b580      	push	{r7, lr}
 8102242:	b082      	sub	sp, #8
 8102244:	af00      	add	r7, sp, #0
 8102246:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8102248:	f04f 31ff 	mov.w	r1, #4294967295
 810224c:	6878      	ldr	r0, [r7, #4]
 810224e:	f7ff ffe7 	bl	8102220 <_kill>
	while (1) {}		/* Make sure we hang here */
 8102252:	e7fe      	b.n	8102252 <_exit+0x12>

08102254 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8102254:	b580      	push	{r7, lr}
 8102256:	b086      	sub	sp, #24
 8102258:	af00      	add	r7, sp, #0
 810225a:	60f8      	str	r0, [r7, #12]
 810225c:	60b9      	str	r1, [r7, #8]
 810225e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8102260:	2300      	movs	r3, #0
 8102262:	617b      	str	r3, [r7, #20]
 8102264:	e00a      	b.n	810227c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8102266:	f3af 8000 	nop.w
 810226a:	4601      	mov	r1, r0
 810226c:	68bb      	ldr	r3, [r7, #8]
 810226e:	1c5a      	adds	r2, r3, #1
 8102270:	60ba      	str	r2, [r7, #8]
 8102272:	b2ca      	uxtb	r2, r1
 8102274:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8102276:	697b      	ldr	r3, [r7, #20]
 8102278:	3301      	adds	r3, #1
 810227a:	617b      	str	r3, [r7, #20]
 810227c:	697a      	ldr	r2, [r7, #20]
 810227e:	687b      	ldr	r3, [r7, #4]
 8102280:	429a      	cmp	r2, r3
 8102282:	dbf0      	blt.n	8102266 <_read+0x12>
	}

return len;
 8102284:	687b      	ldr	r3, [r7, #4]
}
 8102286:	4618      	mov	r0, r3
 8102288:	3718      	adds	r7, #24
 810228a:	46bd      	mov	sp, r7
 810228c:	bd80      	pop	{r7, pc}

0810228e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 810228e:	b580      	push	{r7, lr}
 8102290:	b086      	sub	sp, #24
 8102292:	af00      	add	r7, sp, #0
 8102294:	60f8      	str	r0, [r7, #12]
 8102296:	60b9      	str	r1, [r7, #8]
 8102298:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 810229a:	2300      	movs	r3, #0
 810229c:	617b      	str	r3, [r7, #20]
 810229e:	e009      	b.n	81022b4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 81022a0:	68bb      	ldr	r3, [r7, #8]
 81022a2:	1c5a      	adds	r2, r3, #1
 81022a4:	60ba      	str	r2, [r7, #8]
 81022a6:	781b      	ldrb	r3, [r3, #0]
 81022a8:	4618      	mov	r0, r3
 81022aa:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 81022ae:	697b      	ldr	r3, [r7, #20]
 81022b0:	3301      	adds	r3, #1
 81022b2:	617b      	str	r3, [r7, #20]
 81022b4:	697a      	ldr	r2, [r7, #20]
 81022b6:	687b      	ldr	r3, [r7, #4]
 81022b8:	429a      	cmp	r2, r3
 81022ba:	dbf1      	blt.n	81022a0 <_write+0x12>
	}
	return len;
 81022bc:	687b      	ldr	r3, [r7, #4]
}
 81022be:	4618      	mov	r0, r3
 81022c0:	3718      	adds	r7, #24
 81022c2:	46bd      	mov	sp, r7
 81022c4:	bd80      	pop	{r7, pc}

081022c6 <_close>:

int _close(int file)
{
 81022c6:	b480      	push	{r7}
 81022c8:	b083      	sub	sp, #12
 81022ca:	af00      	add	r7, sp, #0
 81022cc:	6078      	str	r0, [r7, #4]
	return -1;
 81022ce:	f04f 33ff 	mov.w	r3, #4294967295
}
 81022d2:	4618      	mov	r0, r3
 81022d4:	370c      	adds	r7, #12
 81022d6:	46bd      	mov	sp, r7
 81022d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81022dc:	4770      	bx	lr

081022de <_fstat>:


int _fstat(int file, struct stat *st)
{
 81022de:	b480      	push	{r7}
 81022e0:	b083      	sub	sp, #12
 81022e2:	af00      	add	r7, sp, #0
 81022e4:	6078      	str	r0, [r7, #4]
 81022e6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 81022e8:	683b      	ldr	r3, [r7, #0]
 81022ea:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 81022ee:	605a      	str	r2, [r3, #4]
	return 0;
 81022f0:	2300      	movs	r3, #0
}
 81022f2:	4618      	mov	r0, r3
 81022f4:	370c      	adds	r7, #12
 81022f6:	46bd      	mov	sp, r7
 81022f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81022fc:	4770      	bx	lr

081022fe <_isatty>:

int _isatty(int file)
{
 81022fe:	b480      	push	{r7}
 8102300:	b083      	sub	sp, #12
 8102302:	af00      	add	r7, sp, #0
 8102304:	6078      	str	r0, [r7, #4]
	return 1;
 8102306:	2301      	movs	r3, #1
}
 8102308:	4618      	mov	r0, r3
 810230a:	370c      	adds	r7, #12
 810230c:	46bd      	mov	sp, r7
 810230e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102312:	4770      	bx	lr

08102314 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8102314:	b480      	push	{r7}
 8102316:	b085      	sub	sp, #20
 8102318:	af00      	add	r7, sp, #0
 810231a:	60f8      	str	r0, [r7, #12]
 810231c:	60b9      	str	r1, [r7, #8]
 810231e:	607a      	str	r2, [r7, #4]
	return 0;
 8102320:	2300      	movs	r3, #0
}
 8102322:	4618      	mov	r0, r3
 8102324:	3714      	adds	r7, #20
 8102326:	46bd      	mov	sp, r7
 8102328:	f85d 7b04 	ldr.w	r7, [sp], #4
 810232c:	4770      	bx	lr
	...

08102330 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8102330:	b580      	push	{r7, lr}
 8102332:	b084      	sub	sp, #16
 8102334:	af00      	add	r7, sp, #0
 8102336:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8102338:	4b11      	ldr	r3, [pc, #68]	; (8102380 <_sbrk+0x50>)
 810233a:	681b      	ldr	r3, [r3, #0]
 810233c:	2b00      	cmp	r3, #0
 810233e:	d102      	bne.n	8102346 <_sbrk+0x16>
		heap_end = &end;
 8102340:	4b0f      	ldr	r3, [pc, #60]	; (8102380 <_sbrk+0x50>)
 8102342:	4a10      	ldr	r2, [pc, #64]	; (8102384 <_sbrk+0x54>)
 8102344:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8102346:	4b0e      	ldr	r3, [pc, #56]	; (8102380 <_sbrk+0x50>)
 8102348:	681b      	ldr	r3, [r3, #0]
 810234a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 810234c:	4b0c      	ldr	r3, [pc, #48]	; (8102380 <_sbrk+0x50>)
 810234e:	681a      	ldr	r2, [r3, #0]
 8102350:	687b      	ldr	r3, [r7, #4]
 8102352:	4413      	add	r3, r2
 8102354:	466a      	mov	r2, sp
 8102356:	4293      	cmp	r3, r2
 8102358:	d907      	bls.n	810236a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 810235a:	f014 fe59 	bl	8117010 <__errno>
 810235e:	4603      	mov	r3, r0
 8102360:	220c      	movs	r2, #12
 8102362:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8102364:	f04f 33ff 	mov.w	r3, #4294967295
 8102368:	e006      	b.n	8102378 <_sbrk+0x48>
	}

	heap_end += incr;
 810236a:	4b05      	ldr	r3, [pc, #20]	; (8102380 <_sbrk+0x50>)
 810236c:	681a      	ldr	r2, [r3, #0]
 810236e:	687b      	ldr	r3, [r7, #4]
 8102370:	4413      	add	r3, r2
 8102372:	4a03      	ldr	r2, [pc, #12]	; (8102380 <_sbrk+0x50>)
 8102374:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8102376:	68fb      	ldr	r3, [r7, #12]
}
 8102378:	4618      	mov	r0, r3
 810237a:	3710      	adds	r7, #16
 810237c:	46bd      	mov	sp, r7
 810237e:	bd80      	pop	{r7, pc}
 8102380:	1000020c 	.word	0x1000020c
 8102384:	100076e0 	.word	0x100076e0

08102388 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8102388:	b580      	push	{r7, lr}
 810238a:	b09a      	sub	sp, #104	; 0x68
 810238c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 810238e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8102392:	2200      	movs	r2, #0
 8102394:	601a      	str	r2, [r3, #0]
 8102396:	605a      	str	r2, [r3, #4]
 8102398:	609a      	str	r2, [r3, #8]
 810239a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 810239c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 81023a0:	2200      	movs	r2, #0
 81023a2:	601a      	str	r2, [r3, #0]
 81023a4:	605a      	str	r2, [r3, #4]
 81023a6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 81023a8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 81023ac:	2200      	movs	r2, #0
 81023ae:	601a      	str	r2, [r3, #0]
 81023b0:	605a      	str	r2, [r3, #4]
 81023b2:	609a      	str	r2, [r3, #8]
 81023b4:	60da      	str	r2, [r3, #12]
 81023b6:	611a      	str	r2, [r3, #16]
 81023b8:	615a      	str	r2, [r3, #20]
 81023ba:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 81023bc:	1d3b      	adds	r3, r7, #4
 81023be:	222c      	movs	r2, #44	; 0x2c
 81023c0:	2100      	movs	r1, #0
 81023c2:	4618      	mov	r0, r3
 81023c4:	f014 fe5c 	bl	8117080 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 81023c8:	4b55      	ldr	r3, [pc, #340]	; (8102520 <MX_TIM1_Init+0x198>)
 81023ca:	4a56      	ldr	r2, [pc, #344]	; (8102524 <MX_TIM1_Init+0x19c>)
 81023cc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 54;
 81023ce:	4b54      	ldr	r3, [pc, #336]	; (8102520 <MX_TIM1_Init+0x198>)
 81023d0:	2236      	movs	r2, #54	; 0x36
 81023d2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 81023d4:	4b52      	ldr	r3, [pc, #328]	; (8102520 <MX_TIM1_Init+0x198>)
 81023d6:	2200      	movs	r2, #0
 81023d8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 11000;
 81023da:	4b51      	ldr	r3, [pc, #324]	; (8102520 <MX_TIM1_Init+0x198>)
 81023dc:	f642 22f8 	movw	r2, #11000	; 0x2af8
 81023e0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 81023e2:	4b4f      	ldr	r3, [pc, #316]	; (8102520 <MX_TIM1_Init+0x198>)
 81023e4:	2200      	movs	r2, #0
 81023e6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 81023e8:	4b4d      	ldr	r3, [pc, #308]	; (8102520 <MX_TIM1_Init+0x198>)
 81023ea:	2200      	movs	r2, #0
 81023ec:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 81023ee:	4b4c      	ldr	r3, [pc, #304]	; (8102520 <MX_TIM1_Init+0x198>)
 81023f0:	2200      	movs	r2, #0
 81023f2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 81023f4:	484a      	ldr	r0, [pc, #296]	; (8102520 <MX_TIM1_Init+0x198>)
 81023f6:	f00b fc1e 	bl	810dc36 <HAL_TIM_Base_Init>
 81023fa:	4603      	mov	r3, r0
 81023fc:	2b00      	cmp	r3, #0
 81023fe:	d001      	beq.n	8102404 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8102400:	f7ff fbb4 	bl	8101b6c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8102404:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8102408:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 810240a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 810240e:	4619      	mov	r1, r3
 8102410:	4843      	ldr	r0, [pc, #268]	; (8102520 <MX_TIM1_Init+0x198>)
 8102412:	f00b ff67 	bl	810e2e4 <HAL_TIM_ConfigClockSource>
 8102416:	4603      	mov	r3, r0
 8102418:	2b00      	cmp	r3, #0
 810241a:	d001      	beq.n	8102420 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 810241c:	f7ff fba6 	bl	8101b6c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8102420:	483f      	ldr	r0, [pc, #252]	; (8102520 <MX_TIM1_Init+0x198>)
 8102422:	f00b fccf 	bl	810ddc4 <HAL_TIM_PWM_Init>
 8102426:	4603      	mov	r3, r0
 8102428:	2b00      	cmp	r3, #0
 810242a:	d001      	beq.n	8102430 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 810242c:	f7ff fb9e 	bl	8101b6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8102430:	2300      	movs	r3, #0
 8102432:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8102434:	2300      	movs	r3, #0
 8102436:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8102438:	2300      	movs	r3, #0
 810243a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 810243c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8102440:	4619      	mov	r1, r3
 8102442:	4837      	ldr	r0, [pc, #220]	; (8102520 <MX_TIM1_Init+0x198>)
 8102444:	f00c fc6e 	bl	810ed24 <HAL_TIMEx_MasterConfigSynchronization>
 8102448:	4603      	mov	r3, r0
 810244a:	2b00      	cmp	r3, #0
 810244c:	d001      	beq.n	8102452 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 810244e:	f7ff fb8d 	bl	8101b6c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8102452:	2360      	movs	r3, #96	; 0x60
 8102454:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 50;
 8102456:	2332      	movs	r3, #50	; 0x32
 8102458:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 810245a:	2300      	movs	r3, #0
 810245c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 810245e:	2300      	movs	r3, #0
 8102460:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8102462:	2300      	movs	r3, #0
 8102464:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8102466:	2300      	movs	r3, #0
 8102468:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 810246a:	2300      	movs	r3, #0
 810246c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 810246e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8102472:	2200      	movs	r2, #0
 8102474:	4619      	mov	r1, r3
 8102476:	482a      	ldr	r0, [pc, #168]	; (8102520 <MX_TIM1_Init+0x198>)
 8102478:	f00b fe24 	bl	810e0c4 <HAL_TIM_PWM_ConfigChannel>
 810247c:	4603      	mov	r3, r0
 810247e:	2b00      	cmp	r3, #0
 8102480:	d001      	beq.n	8102486 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8102482:	f7ff fb73 	bl	8101b6c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8102486:	f107 0330 	add.w	r3, r7, #48	; 0x30
 810248a:	2204      	movs	r2, #4
 810248c:	4619      	mov	r1, r3
 810248e:	4824      	ldr	r0, [pc, #144]	; (8102520 <MX_TIM1_Init+0x198>)
 8102490:	f00b fe18 	bl	810e0c4 <HAL_TIM_PWM_ConfigChannel>
 8102494:	4603      	mov	r3, r0
 8102496:	2b00      	cmp	r3, #0
 8102498:	d001      	beq.n	810249e <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 810249a:	f7ff fb67 	bl	8101b6c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 810249e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 81024a2:	2208      	movs	r2, #8
 81024a4:	4619      	mov	r1, r3
 81024a6:	481e      	ldr	r0, [pc, #120]	; (8102520 <MX_TIM1_Init+0x198>)
 81024a8:	f00b fe0c 	bl	810e0c4 <HAL_TIM_PWM_ConfigChannel>
 81024ac:	4603      	mov	r3, r0
 81024ae:	2b00      	cmp	r3, #0
 81024b0:	d001      	beq.n	81024b6 <MX_TIM1_Init+0x12e>
  {
    Error_Handler();
 81024b2:	f7ff fb5b 	bl	8101b6c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 81024b6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 81024ba:	220c      	movs	r2, #12
 81024bc:	4619      	mov	r1, r3
 81024be:	4818      	ldr	r0, [pc, #96]	; (8102520 <MX_TIM1_Init+0x198>)
 81024c0:	f00b fe00 	bl	810e0c4 <HAL_TIM_PWM_ConfigChannel>
 81024c4:	4603      	mov	r3, r0
 81024c6:	2b00      	cmp	r3, #0
 81024c8:	d001      	beq.n	81024ce <MX_TIM1_Init+0x146>
  {
    Error_Handler();
 81024ca:	f7ff fb4f 	bl	8101b6c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 81024ce:	2300      	movs	r3, #0
 81024d0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 81024d2:	2300      	movs	r3, #0
 81024d4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 81024d6:	2300      	movs	r3, #0
 81024d8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 81024da:	2300      	movs	r3, #0
 81024dc:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 81024de:	2300      	movs	r3, #0
 81024e0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 81024e2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 81024e6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 81024e8:	2300      	movs	r3, #0
 81024ea:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 81024ec:	2300      	movs	r3, #0
 81024ee:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 81024f0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 81024f4:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 81024f6:	2300      	movs	r3, #0
 81024f8:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 81024fa:	2300      	movs	r3, #0
 81024fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 81024fe:	1d3b      	adds	r3, r7, #4
 8102500:	4619      	mov	r1, r3
 8102502:	4807      	ldr	r0, [pc, #28]	; (8102520 <MX_TIM1_Init+0x198>)
 8102504:	f00c fc96 	bl	810ee34 <HAL_TIMEx_ConfigBreakDeadTime>
 8102508:	4603      	mov	r3, r0
 810250a:	2b00      	cmp	r3, #0
 810250c:	d001      	beq.n	8102512 <MX_TIM1_Init+0x18a>
  {
    Error_Handler();
 810250e:	f7ff fb2d 	bl	8101b6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8102512:	4803      	ldr	r0, [pc, #12]	; (8102520 <MX_TIM1_Init+0x198>)
 8102514:	f000 f82a 	bl	810256c <HAL_TIM_MspPostInit>

}
 8102518:	bf00      	nop
 810251a:	3768      	adds	r7, #104	; 0x68
 810251c:	46bd      	mov	sp, r7
 810251e:	bd80      	pop	{r7, pc}
 8102520:	10005048 	.word	0x10005048
 8102524:	40010000 	.word	0x40010000

08102528 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8102528:	b480      	push	{r7}
 810252a:	b085      	sub	sp, #20
 810252c:	af00      	add	r7, sp, #0
 810252e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8102530:	687b      	ldr	r3, [r7, #4]
 8102532:	681b      	ldr	r3, [r3, #0]
 8102534:	4a0b      	ldr	r2, [pc, #44]	; (8102564 <HAL_TIM_Base_MspInit+0x3c>)
 8102536:	4293      	cmp	r3, r2
 8102538:	d10e      	bne.n	8102558 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 810253a:	4b0b      	ldr	r3, [pc, #44]	; (8102568 <HAL_TIM_Base_MspInit+0x40>)
 810253c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8102540:	4a09      	ldr	r2, [pc, #36]	; (8102568 <HAL_TIM_Base_MspInit+0x40>)
 8102542:	f043 0301 	orr.w	r3, r3, #1
 8102546:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 810254a:	4b07      	ldr	r3, [pc, #28]	; (8102568 <HAL_TIM_Base_MspInit+0x40>)
 810254c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8102550:	f003 0301 	and.w	r3, r3, #1
 8102554:	60fb      	str	r3, [r7, #12]
 8102556:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8102558:	bf00      	nop
 810255a:	3714      	adds	r7, #20
 810255c:	46bd      	mov	sp, r7
 810255e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102562:	4770      	bx	lr
 8102564:	40010000 	.word	0x40010000
 8102568:	58024400 	.word	0x58024400

0810256c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 810256c:	b580      	push	{r7, lr}
 810256e:	b08a      	sub	sp, #40	; 0x28
 8102570:	af00      	add	r7, sp, #0
 8102572:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8102574:	f107 0314 	add.w	r3, r7, #20
 8102578:	2200      	movs	r2, #0
 810257a:	601a      	str	r2, [r3, #0]
 810257c:	605a      	str	r2, [r3, #4]
 810257e:	609a      	str	r2, [r3, #8]
 8102580:	60da      	str	r2, [r3, #12]
 8102582:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8102584:	687b      	ldr	r3, [r7, #4]
 8102586:	681b      	ldr	r3, [r3, #0]
 8102588:	4a23      	ldr	r2, [pc, #140]	; (8102618 <HAL_TIM_MspPostInit+0xac>)
 810258a:	4293      	cmp	r3, r2
 810258c:	d13f      	bne.n	810260e <HAL_TIM_MspPostInit+0xa2>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 810258e:	4b23      	ldr	r3, [pc, #140]	; (810261c <HAL_TIM_MspPostInit+0xb0>)
 8102590:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8102594:	4a21      	ldr	r2, [pc, #132]	; (810261c <HAL_TIM_MspPostInit+0xb0>)
 8102596:	f043 0310 	orr.w	r3, r3, #16
 810259a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 810259e:	4b1f      	ldr	r3, [pc, #124]	; (810261c <HAL_TIM_MspPostInit+0xb0>)
 81025a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81025a4:	f003 0310 	and.w	r3, r3, #16
 81025a8:	613b      	str	r3, [r7, #16]
 81025aa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 81025ac:	4b1b      	ldr	r3, [pc, #108]	; (810261c <HAL_TIM_MspPostInit+0xb0>)
 81025ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81025b2:	4a1a      	ldr	r2, [pc, #104]	; (810261c <HAL_TIM_MspPostInit+0xb0>)
 81025b4:	f043 0301 	orr.w	r3, r3, #1
 81025b8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81025bc:	4b17      	ldr	r3, [pc, #92]	; (810261c <HAL_TIM_MspPostInit+0xb0>)
 81025be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81025c2:	f003 0301 	and.w	r3, r3, #1
 81025c6:	60fb      	str	r3, [r7, #12]
 81025c8:	68fb      	ldr	r3, [r7, #12]
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_14;
 81025ca:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 81025ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81025d0:	2302      	movs	r3, #2
 81025d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81025d4:	2300      	movs	r3, #0
 81025d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81025d8:	2300      	movs	r3, #0
 81025da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 81025dc:	2301      	movs	r3, #1
 81025de:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 81025e0:	f107 0314 	add.w	r3, r7, #20
 81025e4:	4619      	mov	r1, r3
 81025e6:	480e      	ldr	r0, [pc, #56]	; (8102620 <HAL_TIM_MspPostInit+0xb4>)
 81025e8:	f004 fcd6 	bl	8106f98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 81025ec:	f44f 7380 	mov.w	r3, #256	; 0x100
 81025f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81025f2:	2302      	movs	r3, #2
 81025f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81025f6:	2300      	movs	r3, #0
 81025f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81025fa:	2300      	movs	r3, #0
 81025fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 81025fe:	2301      	movs	r3, #1
 8102600:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8102602:	f107 0314 	add.w	r3, r7, #20
 8102606:	4619      	mov	r1, r3
 8102608:	4806      	ldr	r0, [pc, #24]	; (8102624 <HAL_TIM_MspPostInit+0xb8>)
 810260a:	f004 fcc5 	bl	8106f98 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 810260e:	bf00      	nop
 8102610:	3728      	adds	r7, #40	; 0x28
 8102612:	46bd      	mov	sp, r7
 8102614:	bd80      	pop	{r7, pc}
 8102616:	bf00      	nop
 8102618:	40010000 	.word	0x40010000
 810261c:	58024400 	.word	0x58024400
 8102620:	58021000 	.word	0x58021000
 8102624:	58020000 	.word	0x58020000

08102628 <calcChecksum>:

GPS gps;
struct NAV_PVT pvt;

void calcChecksum(unsigned char* CK)
{
 8102628:	b580      	push	{r7, lr}
 810262a:	b084      	sub	sp, #16
 810262c:	af00      	add	r7, sp, #0
 810262e:	6078      	str	r0, [r7, #4]
	memset(CK, 0, 2);
 8102630:	2202      	movs	r2, #2
 8102632:	2100      	movs	r1, #0
 8102634:	6878      	ldr	r0, [r7, #4]
 8102636:	f014 fd23 	bl	8117080 <memset>
	for (int i = 0; i < (int)sizeof(pvt); i++)
 810263a:	2300      	movs	r3, #0
 810263c:	60fb      	str	r3, [r7, #12]
 810263e:	e016      	b.n	810266e <calcChecksum+0x46>
	{
		CK[0] = CK[0] + ((unsigned char*)(&pvt))[i];
 8102640:	687b      	ldr	r3, [r7, #4]
 8102642:	781a      	ldrb	r2, [r3, #0]
 8102644:	68fb      	ldr	r3, [r7, #12]
 8102646:	490e      	ldr	r1, [pc, #56]	; (8102680 <calcChecksum+0x58>)
 8102648:	440b      	add	r3, r1
 810264a:	781b      	ldrb	r3, [r3, #0]
 810264c:	4413      	add	r3, r2
 810264e:	b2da      	uxtb	r2, r3
 8102650:	687b      	ldr	r3, [r7, #4]
 8102652:	701a      	strb	r2, [r3, #0]
		CK[1] = CK[1] + CK[0];
 8102654:	687b      	ldr	r3, [r7, #4]
 8102656:	3301      	adds	r3, #1
 8102658:	7819      	ldrb	r1, [r3, #0]
 810265a:	687b      	ldr	r3, [r7, #4]
 810265c:	781a      	ldrb	r2, [r3, #0]
 810265e:	687b      	ldr	r3, [r7, #4]
 8102660:	3301      	adds	r3, #1
 8102662:	440a      	add	r2, r1
 8102664:	b2d2      	uxtb	r2, r2
 8102666:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < (int)sizeof(pvt); i++)
 8102668:	68fb      	ldr	r3, [r7, #12]
 810266a:	3301      	adds	r3, #1
 810266c:	60fb      	str	r3, [r7, #12]
 810266e:	68fb      	ldr	r3, [r7, #12]
 8102670:	2b5f      	cmp	r3, #95	; 0x5f
 8102672:	dde5      	ble.n	8102640 <calcChecksum+0x18>
	}

}
 8102674:	bf00      	nop
 8102676:	bf00      	nop
 8102678:	3710      	adds	r7, #16
 810267a:	46bd      	mov	sp, r7
 810267c:	bd80      	pop	{r7, pc}
 810267e:	bf00      	nop
 8102680:	10004da4 	.word	0x10004da4

08102684 <MX_USART3_UART_Init>:
DMA_HandleTypeDef hdma_usart3_tx;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8102684:	b580      	push	{r7, lr}
 8102686:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8102688:	4b22      	ldr	r3, [pc, #136]	; (8102714 <MX_USART3_UART_Init+0x90>)
 810268a:	4a23      	ldr	r2, [pc, #140]	; (8102718 <MX_USART3_UART_Init+0x94>)
 810268c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 810268e:	4b21      	ldr	r3, [pc, #132]	; (8102714 <MX_USART3_UART_Init+0x90>)
 8102690:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8102694:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8102696:	4b1f      	ldr	r3, [pc, #124]	; (8102714 <MX_USART3_UART_Init+0x90>)
 8102698:	2200      	movs	r2, #0
 810269a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 810269c:	4b1d      	ldr	r3, [pc, #116]	; (8102714 <MX_USART3_UART_Init+0x90>)
 810269e:	2200      	movs	r2, #0
 81026a0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 81026a2:	4b1c      	ldr	r3, [pc, #112]	; (8102714 <MX_USART3_UART_Init+0x90>)
 81026a4:	2200      	movs	r2, #0
 81026a6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 81026a8:	4b1a      	ldr	r3, [pc, #104]	; (8102714 <MX_USART3_UART_Init+0x90>)
 81026aa:	220c      	movs	r2, #12
 81026ac:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 81026ae:	4b19      	ldr	r3, [pc, #100]	; (8102714 <MX_USART3_UART_Init+0x90>)
 81026b0:	2200      	movs	r2, #0
 81026b2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 81026b4:	4b17      	ldr	r3, [pc, #92]	; (8102714 <MX_USART3_UART_Init+0x90>)
 81026b6:	2200      	movs	r2, #0
 81026b8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 81026ba:	4b16      	ldr	r3, [pc, #88]	; (8102714 <MX_USART3_UART_Init+0x90>)
 81026bc:	2200      	movs	r2, #0
 81026be:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 81026c0:	4b14      	ldr	r3, [pc, #80]	; (8102714 <MX_USART3_UART_Init+0x90>)
 81026c2:	2200      	movs	r2, #0
 81026c4:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 81026c6:	4b13      	ldr	r3, [pc, #76]	; (8102714 <MX_USART3_UART_Init+0x90>)
 81026c8:	2200      	movs	r2, #0
 81026ca:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 81026cc:	4811      	ldr	r0, [pc, #68]	; (8102714 <MX_USART3_UART_Init+0x90>)
 81026ce:	f00c fc4d 	bl	810ef6c <HAL_UART_Init>
 81026d2:	4603      	mov	r3, r0
 81026d4:	2b00      	cmp	r3, #0
 81026d6:	d001      	beq.n	81026dc <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 81026d8:	f7ff fa48 	bl	8101b6c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 81026dc:	2100      	movs	r1, #0
 81026de:	480d      	ldr	r0, [pc, #52]	; (8102714 <MX_USART3_UART_Init+0x90>)
 81026e0:	f00e f924 	bl	811092c <HAL_UARTEx_SetTxFifoThreshold>
 81026e4:	4603      	mov	r3, r0
 81026e6:	2b00      	cmp	r3, #0
 81026e8:	d001      	beq.n	81026ee <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 81026ea:	f7ff fa3f 	bl	8101b6c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 81026ee:	2100      	movs	r1, #0
 81026f0:	4808      	ldr	r0, [pc, #32]	; (8102714 <MX_USART3_UART_Init+0x90>)
 81026f2:	f00e f959 	bl	81109a8 <HAL_UARTEx_SetRxFifoThreshold>
 81026f6:	4603      	mov	r3, r0
 81026f8:	2b00      	cmp	r3, #0
 81026fa:	d001      	beq.n	8102700 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 81026fc:	f7ff fa36 	bl	8101b6c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8102700:	4804      	ldr	r0, [pc, #16]	; (8102714 <MX_USART3_UART_Init+0x90>)
 8102702:	f00e f8da 	bl	81108ba <HAL_UARTEx_DisableFifoMode>
 8102706:	4603      	mov	r3, r0
 8102708:	2b00      	cmp	r3, #0
 810270a:	d001      	beq.n	8102710 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 810270c:	f7ff fa2e 	bl	8101b6c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8102710:	bf00      	nop
 8102712:	bd80      	pop	{r7, pc}
 8102714:	1000510c 	.word	0x1000510c
 8102718:	40004800 	.word	0x40004800

0810271c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 810271c:	b580      	push	{r7, lr}
 810271e:	b0b8      	sub	sp, #224	; 0xe0
 8102720:	af00      	add	r7, sp, #0
 8102722:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8102724:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8102728:	2200      	movs	r2, #0
 810272a:	601a      	str	r2, [r3, #0]
 810272c:	605a      	str	r2, [r3, #4]
 810272e:	609a      	str	r2, [r3, #8]
 8102730:	60da      	str	r2, [r3, #12]
 8102732:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8102734:	f107 0310 	add.w	r3, r7, #16
 8102738:	22bc      	movs	r2, #188	; 0xbc
 810273a:	2100      	movs	r1, #0
 810273c:	4618      	mov	r0, r3
 810273e:	f014 fc9f 	bl	8117080 <memset>
  if(uartHandle->Instance==USART3)
 8102742:	687b      	ldr	r3, [r7, #4]
 8102744:	681b      	ldr	r3, [r3, #0]
 8102746:	4a57      	ldr	r2, [pc, #348]	; (81028a4 <HAL_UART_MspInit+0x188>)
 8102748:	4293      	cmp	r3, r2
 810274a:	f040 80a7 	bne.w	810289c <HAL_UART_MspInit+0x180>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 810274e:	2302      	movs	r3, #2
 8102750:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8102752:	2300      	movs	r3, #0
 8102754:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8102758:	f107 0310 	add.w	r3, r7, #16
 810275c:	4618      	mov	r0, r3
 810275e:	f007 f833 	bl	81097c8 <HAL_RCCEx_PeriphCLKConfig>
 8102762:	4603      	mov	r3, r0
 8102764:	2b00      	cmp	r3, #0
 8102766:	d001      	beq.n	810276c <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 8102768:	f7ff fa00 	bl	8101b6c <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 810276c:	4b4e      	ldr	r3, [pc, #312]	; (81028a8 <HAL_UART_MspInit+0x18c>)
 810276e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8102772:	4a4d      	ldr	r2, [pc, #308]	; (81028a8 <HAL_UART_MspInit+0x18c>)
 8102774:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8102778:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 810277c:	4b4a      	ldr	r3, [pc, #296]	; (81028a8 <HAL_UART_MspInit+0x18c>)
 810277e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8102782:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8102786:	60fb      	str	r3, [r7, #12]
 8102788:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 810278a:	4b47      	ldr	r3, [pc, #284]	; (81028a8 <HAL_UART_MspInit+0x18c>)
 810278c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8102790:	4a45      	ldr	r2, [pc, #276]	; (81028a8 <HAL_UART_MspInit+0x18c>)
 8102792:	f043 0308 	orr.w	r3, r3, #8
 8102796:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 810279a:	4b43      	ldr	r3, [pc, #268]	; (81028a8 <HAL_UART_MspInit+0x18c>)
 810279c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81027a0:	f003 0308 	and.w	r3, r3, #8
 81027a4:	60bb      	str	r3, [r7, #8]
 81027a6:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 81027a8:	f44f 7340 	mov.w	r3, #768	; 0x300
 81027ac:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81027b0:	2302      	movs	r3, #2
 81027b2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81027b6:	2300      	movs	r3, #0
 81027b8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81027bc:	2300      	movs	r3, #0
 81027be:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 81027c2:	2307      	movs	r3, #7
 81027c4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 81027c8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 81027cc:	4619      	mov	r1, r3
 81027ce:	4837      	ldr	r0, [pc, #220]	; (81028ac <HAL_UART_MspInit+0x190>)
 81027d0:	f004 fbe2 	bl	8106f98 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream7;
 81027d4:	4b36      	ldr	r3, [pc, #216]	; (81028b0 <HAL_UART_MspInit+0x194>)
 81027d6:	4a37      	ldr	r2, [pc, #220]	; (81028b4 <HAL_UART_MspInit+0x198>)
 81027d8:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 81027da:	4b35      	ldr	r3, [pc, #212]	; (81028b0 <HAL_UART_MspInit+0x194>)
 81027dc:	222d      	movs	r2, #45	; 0x2d
 81027de:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 81027e0:	4b33      	ldr	r3, [pc, #204]	; (81028b0 <HAL_UART_MspInit+0x194>)
 81027e2:	2200      	movs	r2, #0
 81027e4:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 81027e6:	4b32      	ldr	r3, [pc, #200]	; (81028b0 <HAL_UART_MspInit+0x194>)
 81027e8:	2200      	movs	r2, #0
 81027ea:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 81027ec:	4b30      	ldr	r3, [pc, #192]	; (81028b0 <HAL_UART_MspInit+0x194>)
 81027ee:	f44f 6280 	mov.w	r2, #1024	; 0x400
 81027f2:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 81027f4:	4b2e      	ldr	r3, [pc, #184]	; (81028b0 <HAL_UART_MspInit+0x194>)
 81027f6:	2200      	movs	r2, #0
 81027f8:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 81027fa:	4b2d      	ldr	r3, [pc, #180]	; (81028b0 <HAL_UART_MspInit+0x194>)
 81027fc:	2200      	movs	r2, #0
 81027fe:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8102800:	4b2b      	ldr	r3, [pc, #172]	; (81028b0 <HAL_UART_MspInit+0x194>)
 8102802:	f44f 7280 	mov.w	r2, #256	; 0x100
 8102806:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8102808:	4b29      	ldr	r3, [pc, #164]	; (81028b0 <HAL_UART_MspInit+0x194>)
 810280a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 810280e:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8102810:	4b27      	ldr	r3, [pc, #156]	; (81028b0 <HAL_UART_MspInit+0x194>)
 8102812:	2200      	movs	r2, #0
 8102814:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8102816:	4826      	ldr	r0, [pc, #152]	; (81028b0 <HAL_UART_MspInit+0x194>)
 8102818:	f001 fd78 	bl	810430c <HAL_DMA_Init>
 810281c:	4603      	mov	r3, r0
 810281e:	2b00      	cmp	r3, #0
 8102820:	d001      	beq.n	8102826 <HAL_UART_MspInit+0x10a>
    {
      Error_Handler();
 8102822:	f7ff f9a3 	bl	8101b6c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8102826:	687b      	ldr	r3, [r7, #4]
 8102828:	4a21      	ldr	r2, [pc, #132]	; (81028b0 <HAL_UART_MspInit+0x194>)
 810282a:	67da      	str	r2, [r3, #124]	; 0x7c
 810282c:	4a20      	ldr	r2, [pc, #128]	; (81028b0 <HAL_UART_MspInit+0x194>)
 810282e:	687b      	ldr	r3, [r7, #4]
 8102830:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA2_Stream0;
 8102832:	4b21      	ldr	r3, [pc, #132]	; (81028b8 <HAL_UART_MspInit+0x19c>)
 8102834:	4a21      	ldr	r2, [pc, #132]	; (81028bc <HAL_UART_MspInit+0x1a0>)
 8102836:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 8102838:	4b1f      	ldr	r3, [pc, #124]	; (81028b8 <HAL_UART_MspInit+0x19c>)
 810283a:	222e      	movs	r2, #46	; 0x2e
 810283c:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 810283e:	4b1e      	ldr	r3, [pc, #120]	; (81028b8 <HAL_UART_MspInit+0x19c>)
 8102840:	2240      	movs	r2, #64	; 0x40
 8102842:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8102844:	4b1c      	ldr	r3, [pc, #112]	; (81028b8 <HAL_UART_MspInit+0x19c>)
 8102846:	2200      	movs	r2, #0
 8102848:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 810284a:	4b1b      	ldr	r3, [pc, #108]	; (81028b8 <HAL_UART_MspInit+0x19c>)
 810284c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8102850:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8102852:	4b19      	ldr	r3, [pc, #100]	; (81028b8 <HAL_UART_MspInit+0x19c>)
 8102854:	2200      	movs	r2, #0
 8102856:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8102858:	4b17      	ldr	r3, [pc, #92]	; (81028b8 <HAL_UART_MspInit+0x19c>)
 810285a:	2200      	movs	r2, #0
 810285c:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 810285e:	4b16      	ldr	r3, [pc, #88]	; (81028b8 <HAL_UART_MspInit+0x19c>)
 8102860:	2200      	movs	r2, #0
 8102862:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8102864:	4b14      	ldr	r3, [pc, #80]	; (81028b8 <HAL_UART_MspInit+0x19c>)
 8102866:	2200      	movs	r2, #0
 8102868:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 810286a:	4b13      	ldr	r3, [pc, #76]	; (81028b8 <HAL_UART_MspInit+0x19c>)
 810286c:	2200      	movs	r2, #0
 810286e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8102870:	4811      	ldr	r0, [pc, #68]	; (81028b8 <HAL_UART_MspInit+0x19c>)
 8102872:	f001 fd4b 	bl	810430c <HAL_DMA_Init>
 8102876:	4603      	mov	r3, r0
 8102878:	2b00      	cmp	r3, #0
 810287a:	d001      	beq.n	8102880 <HAL_UART_MspInit+0x164>
    {
      Error_Handler();
 810287c:	f7ff f976 	bl	8101b6c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 8102880:	687b      	ldr	r3, [r7, #4]
 8102882:	4a0d      	ldr	r2, [pc, #52]	; (81028b8 <HAL_UART_MspInit+0x19c>)
 8102884:	679a      	str	r2, [r3, #120]	; 0x78
 8102886:	4a0c      	ldr	r2, [pc, #48]	; (81028b8 <HAL_UART_MspInit+0x19c>)
 8102888:	687b      	ldr	r3, [r7, #4]
 810288a:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 810288c:	2200      	movs	r2, #0
 810288e:	2105      	movs	r1, #5
 8102890:	2027      	movs	r0, #39	; 0x27
 8102892:	f001 fcff 	bl	8104294 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8102896:	2027      	movs	r0, #39	; 0x27
 8102898:	f001 fd16 	bl	81042c8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 810289c:	bf00      	nop
 810289e:	37e0      	adds	r7, #224	; 0xe0
 81028a0:	46bd      	mov	sp, r7
 81028a2:	bd80      	pop	{r7, pc}
 81028a4:	40004800 	.word	0x40004800
 81028a8:	58024400 	.word	0x58024400
 81028ac:	58020c00 	.word	0x58020c00
 81028b0:	10005094 	.word	0x10005094
 81028b4:	400200b8 	.word	0x400200b8
 81028b8:	1000519c 	.word	0x1000519c
 81028bc:	40020410 	.word	0x40020410

081028c0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 81028c0:	f8df d034 	ldr.w	sp, [pc, #52]	; 81028f8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 81028c4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 81028c6:	e003      	b.n	81028d0 <LoopCopyDataInit>

081028c8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 81028c8:	4b0c      	ldr	r3, [pc, #48]	; (81028fc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 81028ca:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 81028cc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 81028ce:	3104      	adds	r1, #4

081028d0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 81028d0:	480b      	ldr	r0, [pc, #44]	; (8102900 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 81028d2:	4b0c      	ldr	r3, [pc, #48]	; (8102904 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 81028d4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 81028d6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 81028d8:	d3f6      	bcc.n	81028c8 <CopyDataInit>
  ldr  r2, =_sbss
 81028da:	4a0b      	ldr	r2, [pc, #44]	; (8102908 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 81028dc:	e002      	b.n	81028e4 <LoopFillZerobss>

081028de <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 81028de:	2300      	movs	r3, #0
  str  r3, [r2], #4
 81028e0:	f842 3b04 	str.w	r3, [r2], #4

081028e4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 81028e4:	4b09      	ldr	r3, [pc, #36]	; (810290c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 81028e6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 81028e8:	d3f9      	bcc.n	81028de <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 81028ea:	f7fe fb61 	bl	8100fb0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 81028ee:	f014 fb95 	bl	811701c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 81028f2:	f7fe ff33 	bl	810175c <main>
  bx  lr    
 81028f6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 81028f8:	10048000 	.word	0x10048000
  ldr  r3, =_sidata
 81028fc:	08119f44 	.word	0x08119f44
  ldr  r0, =_sdata
 8102900:	10000000 	.word	0x10000000
  ldr  r3, =_edata
 8102904:	100001e4 	.word	0x100001e4
  ldr  r2, =_sbss
 8102908:	100001e4 	.word	0x100001e4
  ldr  r3, = _ebss
 810290c:	100076e0 	.word	0x100076e0

08102910 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8102910:	e7fe      	b.n	8102910 <ADC3_IRQHandler>
	...

08102914 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8102914:	b580      	push	{r7, lr}
 8102916:	b082      	sub	sp, #8
 8102918:	af00      	add	r7, sp, #0

uint32_t common_system_clock;

#if defined(DUAL_CORE) && defined(CORE_CM4)
   /* Configure Cortex-M4 Instruction cache through ART accelerator */
   __HAL_RCC_ART_CLK_ENABLE();                   /* Enable the Cortex-M4 ART Clock */
 810291a:	4b28      	ldr	r3, [pc, #160]	; (81029bc <HAL_Init+0xa8>)
 810291c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8102920:	4a26      	ldr	r2, [pc, #152]	; (81029bc <HAL_Init+0xa8>)
 8102922:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8102926:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 810292a:	4b24      	ldr	r3, [pc, #144]	; (81029bc <HAL_Init+0xa8>)
 810292c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8102930:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8102934:	603b      	str	r3, [r7, #0]
 8102936:	683b      	ldr	r3, [r7, #0]
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
 8102938:	4b21      	ldr	r3, [pc, #132]	; (81029c0 <HAL_Init+0xac>)
 810293a:	681b      	ldr	r3, [r3, #0]
 810293c:	f423 237f 	bic.w	r3, r3, #1044480	; 0xff000
 8102940:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8102944:	4a1e      	ldr	r2, [pc, #120]	; (81029c0 <HAL_Init+0xac>)
 8102946:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 810294a:	6013      	str	r3, [r2, #0]
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
 810294c:	4b1c      	ldr	r3, [pc, #112]	; (81029c0 <HAL_Init+0xac>)
 810294e:	681b      	ldr	r3, [r3, #0]
 8102950:	4a1b      	ldr	r2, [pc, #108]	; (81029c0 <HAL_Init+0xac>)
 8102952:	f043 0301 	orr.w	r3, r3, #1
 8102956:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8102958:	2003      	movs	r0, #3
 810295a:	f001 fc90 	bl	810427e <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 810295e:	f006 fd19 	bl	8109394 <HAL_RCC_GetSysClockFreq>
 8102962:	4602      	mov	r2, r0
 8102964:	4b15      	ldr	r3, [pc, #84]	; (81029bc <HAL_Init+0xa8>)
 8102966:	699b      	ldr	r3, [r3, #24]
 8102968:	0a1b      	lsrs	r3, r3, #8
 810296a:	f003 030f 	and.w	r3, r3, #15
 810296e:	4915      	ldr	r1, [pc, #84]	; (81029c4 <HAL_Init+0xb0>)
 8102970:	5ccb      	ldrb	r3, [r1, r3]
 8102972:	f003 031f 	and.w	r3, r3, #31
 8102976:	fa22 f303 	lsr.w	r3, r2, r3
 810297a:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 810297c:	4b0f      	ldr	r3, [pc, #60]	; (81029bc <HAL_Init+0xa8>)
 810297e:	699b      	ldr	r3, [r3, #24]
 8102980:	f003 030f 	and.w	r3, r3, #15
 8102984:	4a0f      	ldr	r2, [pc, #60]	; (81029c4 <HAL_Init+0xb0>)
 8102986:	5cd3      	ldrb	r3, [r2, r3]
 8102988:	f003 031f 	and.w	r3, r3, #31
 810298c:	687a      	ldr	r2, [r7, #4]
 810298e:	fa22 f303 	lsr.w	r3, r2, r3
 8102992:	4a0d      	ldr	r2, [pc, #52]	; (81029c8 <HAL_Init+0xb4>)
 8102994:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 8102996:	4b0c      	ldr	r3, [pc, #48]	; (81029c8 <HAL_Init+0xb4>)
 8102998:	681b      	ldr	r3, [r3, #0]
 810299a:	4a0c      	ldr	r2, [pc, #48]	; (81029cc <HAL_Init+0xb8>)
 810299c:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 810299e:	2000      	movs	r0, #0
 81029a0:	f7ff fafc 	bl	8101f9c <HAL_InitTick>
 81029a4:	4603      	mov	r3, r0
 81029a6:	2b00      	cmp	r3, #0
 81029a8:	d001      	beq.n	81029ae <HAL_Init+0x9a>
  {
    return HAL_ERROR;
 81029aa:	2301      	movs	r3, #1
 81029ac:	e002      	b.n	81029b4 <HAL_Init+0xa0>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 81029ae:	f7ff fac7 	bl	8101f40 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 81029b2:	2300      	movs	r3, #0
}
 81029b4:	4618      	mov	r0, r3
 81029b6:	3708      	adds	r7, #8
 81029b8:	46bd      	mov	sp, r7
 81029ba:	bd80      	pop	{r7, pc}
 81029bc:	58024400 	.word	0x58024400
 81029c0:	40024400 	.word	0x40024400
 81029c4:	08119ad8 	.word	0x08119ad8
 81029c8:	10000004 	.word	0x10000004
 81029cc:	10000000 	.word	0x10000000

081029d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 81029d0:	b480      	push	{r7}
 81029d2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 81029d4:	4b06      	ldr	r3, [pc, #24]	; (81029f0 <HAL_IncTick+0x20>)
 81029d6:	781b      	ldrb	r3, [r3, #0]
 81029d8:	461a      	mov	r2, r3
 81029da:	4b06      	ldr	r3, [pc, #24]	; (81029f4 <HAL_IncTick+0x24>)
 81029dc:	681b      	ldr	r3, [r3, #0]
 81029de:	4413      	add	r3, r2
 81029e0:	4a04      	ldr	r2, [pc, #16]	; (81029f4 <HAL_IncTick+0x24>)
 81029e2:	6013      	str	r3, [r2, #0]
}
 81029e4:	bf00      	nop
 81029e6:	46bd      	mov	sp, r7
 81029e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81029ec:	4770      	bx	lr
 81029ee:	bf00      	nop
 81029f0:	1000000c 	.word	0x1000000c
 81029f4:	10005214 	.word	0x10005214

081029f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 81029f8:	b480      	push	{r7}
 81029fa:	af00      	add	r7, sp, #0
  return uwTick;
 81029fc:	4b03      	ldr	r3, [pc, #12]	; (8102a0c <HAL_GetTick+0x14>)
 81029fe:	681b      	ldr	r3, [r3, #0]
}
 8102a00:	4618      	mov	r0, r3
 8102a02:	46bd      	mov	sp, r7
 8102a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102a08:	4770      	bx	lr
 8102a0a:	bf00      	nop
 8102a0c:	10005214 	.word	0x10005214

08102a10 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8102a10:	b580      	push	{r7, lr}
 8102a12:	b084      	sub	sp, #16
 8102a14:	af00      	add	r7, sp, #0
 8102a16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8102a18:	f7ff ffee 	bl	81029f8 <HAL_GetTick>
 8102a1c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8102a1e:	687b      	ldr	r3, [r7, #4]
 8102a20:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8102a22:	68fb      	ldr	r3, [r7, #12]
 8102a24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8102a28:	d005      	beq.n	8102a36 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8102a2a:	4b0a      	ldr	r3, [pc, #40]	; (8102a54 <HAL_Delay+0x44>)
 8102a2c:	781b      	ldrb	r3, [r3, #0]
 8102a2e:	461a      	mov	r2, r3
 8102a30:	68fb      	ldr	r3, [r7, #12]
 8102a32:	4413      	add	r3, r2
 8102a34:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8102a36:	bf00      	nop
 8102a38:	f7ff ffde 	bl	81029f8 <HAL_GetTick>
 8102a3c:	4602      	mov	r2, r0
 8102a3e:	68bb      	ldr	r3, [r7, #8]
 8102a40:	1ad3      	subs	r3, r2, r3
 8102a42:	68fa      	ldr	r2, [r7, #12]
 8102a44:	429a      	cmp	r2, r3
 8102a46:	d8f7      	bhi.n	8102a38 <HAL_Delay+0x28>
  {
  }
}
 8102a48:	bf00      	nop
 8102a4a:	bf00      	nop
 8102a4c:	3710      	adds	r7, #16
 8102a4e:	46bd      	mov	sp, r7
 8102a50:	bd80      	pop	{r7, pc}
 8102a52:	bf00      	nop
 8102a54:	1000000c 	.word	0x1000000c

08102a58 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8102a58:	b480      	push	{r7}
 8102a5a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8102a5c:	4b03      	ldr	r3, [pc, #12]	; (8102a6c <HAL_GetREVID+0x14>)
 8102a5e:	681b      	ldr	r3, [r3, #0]
 8102a60:	0c1b      	lsrs	r3, r3, #16
}
 8102a62:	4618      	mov	r0, r3
 8102a64:	46bd      	mov	sp, r7
 8102a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102a6a:	4770      	bx	lr
 8102a6c:	5c001000 	.word	0x5c001000

08102a70 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8102a70:	b480      	push	{r7}
 8102a72:	b083      	sub	sp, #12
 8102a74:	af00      	add	r7, sp, #0
 8102a76:	6078      	str	r0, [r7, #4]
 8102a78:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8102a7a:	687b      	ldr	r3, [r7, #4]
 8102a7c:	689b      	ldr	r3, [r3, #8]
 8102a7e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8102a82:	683b      	ldr	r3, [r7, #0]
 8102a84:	431a      	orrs	r2, r3
 8102a86:	687b      	ldr	r3, [r7, #4]
 8102a88:	609a      	str	r2, [r3, #8]
}
 8102a8a:	bf00      	nop
 8102a8c:	370c      	adds	r7, #12
 8102a8e:	46bd      	mov	sp, r7
 8102a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102a94:	4770      	bx	lr

08102a96 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8102a96:	b480      	push	{r7}
 8102a98:	b083      	sub	sp, #12
 8102a9a:	af00      	add	r7, sp, #0
 8102a9c:	6078      	str	r0, [r7, #4]
 8102a9e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8102aa0:	687b      	ldr	r3, [r7, #4]
 8102aa2:	689b      	ldr	r3, [r3, #8]
 8102aa4:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8102aa8:	683b      	ldr	r3, [r7, #0]
 8102aaa:	431a      	orrs	r2, r3
 8102aac:	687b      	ldr	r3, [r7, #4]
 8102aae:	609a      	str	r2, [r3, #8]
}
 8102ab0:	bf00      	nop
 8102ab2:	370c      	adds	r7, #12
 8102ab4:	46bd      	mov	sp, r7
 8102ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102aba:	4770      	bx	lr

08102abc <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8102abc:	b480      	push	{r7}
 8102abe:	b083      	sub	sp, #12
 8102ac0:	af00      	add	r7, sp, #0
 8102ac2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8102ac4:	687b      	ldr	r3, [r7, #4]
 8102ac6:	689b      	ldr	r3, [r3, #8]
 8102ac8:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8102acc:	4618      	mov	r0, r3
 8102ace:	370c      	adds	r7, #12
 8102ad0:	46bd      	mov	sp, r7
 8102ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102ad6:	4770      	bx	lr

08102ad8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8102ad8:	b480      	push	{r7}
 8102ada:	b087      	sub	sp, #28
 8102adc:	af00      	add	r7, sp, #0
 8102ade:	60f8      	str	r0, [r7, #12]
 8102ae0:	60b9      	str	r1, [r7, #8]
 8102ae2:	607a      	str	r2, [r7, #4]
 8102ae4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8102ae6:	68fb      	ldr	r3, [r7, #12]
 8102ae8:	3360      	adds	r3, #96	; 0x60
 8102aea:	461a      	mov	r2, r3
 8102aec:	68bb      	ldr	r3, [r7, #8]
 8102aee:	009b      	lsls	r3, r3, #2
 8102af0:	4413      	add	r3, r2
 8102af2:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8102af4:	697b      	ldr	r3, [r7, #20]
 8102af6:	681b      	ldr	r3, [r3, #0]
 8102af8:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8102afc:	687b      	ldr	r3, [r7, #4]
 8102afe:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8102b02:	683b      	ldr	r3, [r7, #0]
 8102b04:	430b      	orrs	r3, r1
 8102b06:	431a      	orrs	r2, r3
 8102b08:	697b      	ldr	r3, [r7, #20]
 8102b0a:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8102b0c:	bf00      	nop
 8102b0e:	371c      	adds	r7, #28
 8102b10:	46bd      	mov	sp, r7
 8102b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102b16:	4770      	bx	lr

08102b18 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8102b18:	b480      	push	{r7}
 8102b1a:	b085      	sub	sp, #20
 8102b1c:	af00      	add	r7, sp, #0
 8102b1e:	60f8      	str	r0, [r7, #12]
 8102b20:	60b9      	str	r1, [r7, #8]
 8102b22:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8102b24:	68fb      	ldr	r3, [r7, #12]
 8102b26:	691b      	ldr	r3, [r3, #16]
 8102b28:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8102b2c:	68bb      	ldr	r3, [r7, #8]
 8102b2e:	f003 031f 	and.w	r3, r3, #31
 8102b32:	6879      	ldr	r1, [r7, #4]
 8102b34:	fa01 f303 	lsl.w	r3, r1, r3
 8102b38:	431a      	orrs	r2, r3
 8102b3a:	68fb      	ldr	r3, [r7, #12]
 8102b3c:	611a      	str	r2, [r3, #16]
}
 8102b3e:	bf00      	nop
 8102b40:	3714      	adds	r7, #20
 8102b42:	46bd      	mov	sp, r7
 8102b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102b48:	4770      	bx	lr

08102b4a <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8102b4a:	b480      	push	{r7}
 8102b4c:	b087      	sub	sp, #28
 8102b4e:	af00      	add	r7, sp, #0
 8102b50:	60f8      	str	r0, [r7, #12]
 8102b52:	60b9      	str	r1, [r7, #8]
 8102b54:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8102b56:	68fb      	ldr	r3, [r7, #12]
 8102b58:	3360      	adds	r3, #96	; 0x60
 8102b5a:	461a      	mov	r2, r3
 8102b5c:	68bb      	ldr	r3, [r7, #8]
 8102b5e:	009b      	lsls	r3, r3, #2
 8102b60:	4413      	add	r3, r2
 8102b62:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8102b64:	697b      	ldr	r3, [r7, #20]
 8102b66:	681b      	ldr	r3, [r3, #0]
 8102b68:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8102b6c:	687b      	ldr	r3, [r7, #4]
 8102b6e:	431a      	orrs	r2, r3
 8102b70:	697b      	ldr	r3, [r7, #20]
 8102b72:	601a      	str	r2, [r3, #0]
  }
}
 8102b74:	bf00      	nop
 8102b76:	371c      	adds	r7, #28
 8102b78:	46bd      	mov	sp, r7
 8102b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102b7e:	4770      	bx	lr

08102b80 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8102b80:	b480      	push	{r7}
 8102b82:	b083      	sub	sp, #12
 8102b84:	af00      	add	r7, sp, #0
 8102b86:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8102b88:	687b      	ldr	r3, [r7, #4]
 8102b8a:	68db      	ldr	r3, [r3, #12]
 8102b8c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8102b90:	2b00      	cmp	r3, #0
 8102b92:	d101      	bne.n	8102b98 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8102b94:	2301      	movs	r3, #1
 8102b96:	e000      	b.n	8102b9a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8102b98:	2300      	movs	r3, #0
}
 8102b9a:	4618      	mov	r0, r3
 8102b9c:	370c      	adds	r7, #12
 8102b9e:	46bd      	mov	sp, r7
 8102ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102ba4:	4770      	bx	lr

08102ba6 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8102ba6:	b480      	push	{r7}
 8102ba8:	b087      	sub	sp, #28
 8102baa:	af00      	add	r7, sp, #0
 8102bac:	60f8      	str	r0, [r7, #12]
 8102bae:	60b9      	str	r1, [r7, #8]
 8102bb0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8102bb2:	68fb      	ldr	r3, [r7, #12]
 8102bb4:	3330      	adds	r3, #48	; 0x30
 8102bb6:	461a      	mov	r2, r3
 8102bb8:	68bb      	ldr	r3, [r7, #8]
 8102bba:	0a1b      	lsrs	r3, r3, #8
 8102bbc:	009b      	lsls	r3, r3, #2
 8102bbe:	f003 030c 	and.w	r3, r3, #12
 8102bc2:	4413      	add	r3, r2
 8102bc4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8102bc6:	697b      	ldr	r3, [r7, #20]
 8102bc8:	681a      	ldr	r2, [r3, #0]
 8102bca:	68bb      	ldr	r3, [r7, #8]
 8102bcc:	f003 031f 	and.w	r3, r3, #31
 8102bd0:	211f      	movs	r1, #31
 8102bd2:	fa01 f303 	lsl.w	r3, r1, r3
 8102bd6:	43db      	mvns	r3, r3
 8102bd8:	401a      	ands	r2, r3
 8102bda:	687b      	ldr	r3, [r7, #4]
 8102bdc:	0e9b      	lsrs	r3, r3, #26
 8102bde:	f003 011f 	and.w	r1, r3, #31
 8102be2:	68bb      	ldr	r3, [r7, #8]
 8102be4:	f003 031f 	and.w	r3, r3, #31
 8102be8:	fa01 f303 	lsl.w	r3, r1, r3
 8102bec:	431a      	orrs	r2, r3
 8102bee:	697b      	ldr	r3, [r7, #20]
 8102bf0:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8102bf2:	bf00      	nop
 8102bf4:	371c      	adds	r7, #28
 8102bf6:	46bd      	mov	sp, r7
 8102bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102bfc:	4770      	bx	lr

08102bfe <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8102bfe:	b480      	push	{r7}
 8102c00:	b083      	sub	sp, #12
 8102c02:	af00      	add	r7, sp, #0
 8102c04:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8102c06:	687b      	ldr	r3, [r7, #4]
 8102c08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8102c0a:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8102c0e:	2b00      	cmp	r3, #0
 8102c10:	d101      	bne.n	8102c16 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8102c12:	2301      	movs	r3, #1
 8102c14:	e000      	b.n	8102c18 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8102c16:	2300      	movs	r3, #0
}
 8102c18:	4618      	mov	r0, r3
 8102c1a:	370c      	adds	r7, #12
 8102c1c:	46bd      	mov	sp, r7
 8102c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102c22:	4770      	bx	lr

08102c24 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8102c24:	b480      	push	{r7}
 8102c26:	b087      	sub	sp, #28
 8102c28:	af00      	add	r7, sp, #0
 8102c2a:	60f8      	str	r0, [r7, #12]
 8102c2c:	60b9      	str	r1, [r7, #8]
 8102c2e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8102c30:	68fb      	ldr	r3, [r7, #12]
 8102c32:	3314      	adds	r3, #20
 8102c34:	461a      	mov	r2, r3
 8102c36:	68bb      	ldr	r3, [r7, #8]
 8102c38:	0e5b      	lsrs	r3, r3, #25
 8102c3a:	009b      	lsls	r3, r3, #2
 8102c3c:	f003 0304 	and.w	r3, r3, #4
 8102c40:	4413      	add	r3, r2
 8102c42:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8102c44:	697b      	ldr	r3, [r7, #20]
 8102c46:	681a      	ldr	r2, [r3, #0]
 8102c48:	68bb      	ldr	r3, [r7, #8]
 8102c4a:	0d1b      	lsrs	r3, r3, #20
 8102c4c:	f003 031f 	and.w	r3, r3, #31
 8102c50:	2107      	movs	r1, #7
 8102c52:	fa01 f303 	lsl.w	r3, r1, r3
 8102c56:	43db      	mvns	r3, r3
 8102c58:	401a      	ands	r2, r3
 8102c5a:	68bb      	ldr	r3, [r7, #8]
 8102c5c:	0d1b      	lsrs	r3, r3, #20
 8102c5e:	f003 031f 	and.w	r3, r3, #31
 8102c62:	6879      	ldr	r1, [r7, #4]
 8102c64:	fa01 f303 	lsl.w	r3, r1, r3
 8102c68:	431a      	orrs	r2, r3
 8102c6a:	697b      	ldr	r3, [r7, #20]
 8102c6c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8102c6e:	bf00      	nop
 8102c70:	371c      	adds	r7, #28
 8102c72:	46bd      	mov	sp, r7
 8102c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102c78:	4770      	bx	lr
	...

08102c7c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8102c7c:	b480      	push	{r7}
 8102c7e:	b085      	sub	sp, #20
 8102c80:	af00      	add	r7, sp, #0
 8102c82:	60f8      	str	r0, [r7, #12]
 8102c84:	60b9      	str	r1, [r7, #8]
 8102c86:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8102c88:	68fb      	ldr	r3, [r7, #12]
 8102c8a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8102c8e:	68bb      	ldr	r3, [r7, #8]
 8102c90:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8102c94:	43db      	mvns	r3, r3
 8102c96:	401a      	ands	r2, r3
 8102c98:	687b      	ldr	r3, [r7, #4]
 8102c9a:	f003 0318 	and.w	r3, r3, #24
 8102c9e:	4908      	ldr	r1, [pc, #32]	; (8102cc0 <LL_ADC_SetChannelSingleDiff+0x44>)
 8102ca0:	40d9      	lsrs	r1, r3
 8102ca2:	68bb      	ldr	r3, [r7, #8]
 8102ca4:	400b      	ands	r3, r1
 8102ca6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8102caa:	431a      	orrs	r2, r3
 8102cac:	68fb      	ldr	r3, [r7, #12]
 8102cae:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 8102cb2:	bf00      	nop
 8102cb4:	3714      	adds	r7, #20
 8102cb6:	46bd      	mov	sp, r7
 8102cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102cbc:	4770      	bx	lr
 8102cbe:	bf00      	nop
 8102cc0:	000fffff 	.word	0x000fffff

08102cc4 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8102cc4:	b480      	push	{r7}
 8102cc6:	b083      	sub	sp, #12
 8102cc8:	af00      	add	r7, sp, #0
 8102cca:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8102ccc:	687b      	ldr	r3, [r7, #4]
 8102cce:	689b      	ldr	r3, [r3, #8]
 8102cd0:	f003 031f 	and.w	r3, r3, #31
}
 8102cd4:	4618      	mov	r0, r3
 8102cd6:	370c      	adds	r7, #12
 8102cd8:	46bd      	mov	sp, r7
 8102cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102cde:	4770      	bx	lr

08102ce0 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8102ce0:	b480      	push	{r7}
 8102ce2:	b083      	sub	sp, #12
 8102ce4:	af00      	add	r7, sp, #0
 8102ce6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8102ce8:	687b      	ldr	r3, [r7, #4]
 8102cea:	689b      	ldr	r3, [r3, #8]
 8102cec:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
}
 8102cf0:	4618      	mov	r0, r3
 8102cf2:	370c      	adds	r7, #12
 8102cf4:	46bd      	mov	sp, r7
 8102cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102cfa:	4770      	bx	lr

08102cfc <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8102cfc:	b480      	push	{r7}
 8102cfe:	b083      	sub	sp, #12
 8102d00:	af00      	add	r7, sp, #0
 8102d02:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8102d04:	687b      	ldr	r3, [r7, #4]
 8102d06:	689b      	ldr	r3, [r3, #8]
 8102d08:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8102d0c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8102d10:	687a      	ldr	r2, [r7, #4]
 8102d12:	6093      	str	r3, [r2, #8]
}
 8102d14:	bf00      	nop
 8102d16:	370c      	adds	r7, #12
 8102d18:	46bd      	mov	sp, r7
 8102d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102d1e:	4770      	bx	lr

08102d20 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8102d20:	b480      	push	{r7}
 8102d22:	b083      	sub	sp, #12
 8102d24:	af00      	add	r7, sp, #0
 8102d26:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8102d28:	687b      	ldr	r3, [r7, #4]
 8102d2a:	689b      	ldr	r3, [r3, #8]
 8102d2c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8102d30:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8102d34:	d101      	bne.n	8102d3a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8102d36:	2301      	movs	r3, #1
 8102d38:	e000      	b.n	8102d3c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8102d3a:	2300      	movs	r3, #0
}
 8102d3c:	4618      	mov	r0, r3
 8102d3e:	370c      	adds	r7, #12
 8102d40:	46bd      	mov	sp, r7
 8102d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102d46:	4770      	bx	lr

08102d48 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8102d48:	b480      	push	{r7}
 8102d4a:	b083      	sub	sp, #12
 8102d4c:	af00      	add	r7, sp, #0
 8102d4e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8102d50:	687b      	ldr	r3, [r7, #4]
 8102d52:	689b      	ldr	r3, [r3, #8]
 8102d54:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8102d58:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8102d5c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8102d60:	687b      	ldr	r3, [r7, #4]
 8102d62:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8102d64:	bf00      	nop
 8102d66:	370c      	adds	r7, #12
 8102d68:	46bd      	mov	sp, r7
 8102d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102d6e:	4770      	bx	lr

08102d70 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8102d70:	b480      	push	{r7}
 8102d72:	b083      	sub	sp, #12
 8102d74:	af00      	add	r7, sp, #0
 8102d76:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8102d78:	687b      	ldr	r3, [r7, #4]
 8102d7a:	689b      	ldr	r3, [r3, #8]
 8102d7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8102d80:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8102d84:	d101      	bne.n	8102d8a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8102d86:	2301      	movs	r3, #1
 8102d88:	e000      	b.n	8102d8c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8102d8a:	2300      	movs	r3, #0
}
 8102d8c:	4618      	mov	r0, r3
 8102d8e:	370c      	adds	r7, #12
 8102d90:	46bd      	mov	sp, r7
 8102d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102d96:	4770      	bx	lr

08102d98 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8102d98:	b480      	push	{r7}
 8102d9a:	b083      	sub	sp, #12
 8102d9c:	af00      	add	r7, sp, #0
 8102d9e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8102da0:	687b      	ldr	r3, [r7, #4]
 8102da2:	689b      	ldr	r3, [r3, #8]
 8102da4:	f003 0301 	and.w	r3, r3, #1
 8102da8:	2b01      	cmp	r3, #1
 8102daa:	d101      	bne.n	8102db0 <LL_ADC_IsEnabled+0x18>
 8102dac:	2301      	movs	r3, #1
 8102dae:	e000      	b.n	8102db2 <LL_ADC_IsEnabled+0x1a>
 8102db0:	2300      	movs	r3, #0
}
 8102db2:	4618      	mov	r0, r3
 8102db4:	370c      	adds	r7, #12
 8102db6:	46bd      	mov	sp, r7
 8102db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102dbc:	4770      	bx	lr

08102dbe <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8102dbe:	b480      	push	{r7}
 8102dc0:	b083      	sub	sp, #12
 8102dc2:	af00      	add	r7, sp, #0
 8102dc4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8102dc6:	687b      	ldr	r3, [r7, #4]
 8102dc8:	689b      	ldr	r3, [r3, #8]
 8102dca:	f003 0304 	and.w	r3, r3, #4
 8102dce:	2b04      	cmp	r3, #4
 8102dd0:	d101      	bne.n	8102dd6 <LL_ADC_REG_IsConversionOngoing+0x18>
 8102dd2:	2301      	movs	r3, #1
 8102dd4:	e000      	b.n	8102dd8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8102dd6:	2300      	movs	r3, #0
}
 8102dd8:	4618      	mov	r0, r3
 8102dda:	370c      	adds	r7, #12
 8102ddc:	46bd      	mov	sp, r7
 8102dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102de2:	4770      	bx	lr

08102de4 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8102de4:	b480      	push	{r7}
 8102de6:	b083      	sub	sp, #12
 8102de8:	af00      	add	r7, sp, #0
 8102dea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8102dec:	687b      	ldr	r3, [r7, #4]
 8102dee:	689b      	ldr	r3, [r3, #8]
 8102df0:	f003 0308 	and.w	r3, r3, #8
 8102df4:	2b08      	cmp	r3, #8
 8102df6:	d101      	bne.n	8102dfc <LL_ADC_INJ_IsConversionOngoing+0x18>
 8102df8:	2301      	movs	r3, #1
 8102dfa:	e000      	b.n	8102dfe <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8102dfc:	2300      	movs	r3, #0
}
 8102dfe:	4618      	mov	r0, r3
 8102e00:	370c      	adds	r7, #12
 8102e02:	46bd      	mov	sp, r7
 8102e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102e08:	4770      	bx	lr
	...

08102e0c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8102e0c:	b590      	push	{r4, r7, lr}
 8102e0e:	b089      	sub	sp, #36	; 0x24
 8102e10:	af00      	add	r7, sp, #0
 8102e12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8102e14:	2300      	movs	r3, #0
 8102e16:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8102e18:	2300      	movs	r3, #0
 8102e1a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8102e1c:	687b      	ldr	r3, [r7, #4]
 8102e1e:	2b00      	cmp	r3, #0
 8102e20:	d101      	bne.n	8102e26 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8102e22:	2301      	movs	r3, #1
 8102e24:	e18e      	b.n	8103144 <HAL_ADC_Init+0x338>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8102e26:	687b      	ldr	r3, [r7, #4]
 8102e28:	68db      	ldr	r3, [r3, #12]
 8102e2a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8102e2c:	687b      	ldr	r3, [r7, #4]
 8102e2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8102e30:	2b00      	cmp	r3, #0
 8102e32:	d109      	bne.n	8102e48 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8102e34:	6878      	ldr	r0, [r7, #4]
 8102e36:	f7fe f951 	bl	81010dc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8102e3a:	687b      	ldr	r3, [r7, #4]
 8102e3c:	2200      	movs	r2, #0
 8102e3e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8102e40:	687b      	ldr	r3, [r7, #4]
 8102e42:	2200      	movs	r2, #0
 8102e44:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8102e48:	687b      	ldr	r3, [r7, #4]
 8102e4a:	681b      	ldr	r3, [r3, #0]
 8102e4c:	4618      	mov	r0, r3
 8102e4e:	f7ff ff67 	bl	8102d20 <LL_ADC_IsDeepPowerDownEnabled>
 8102e52:	4603      	mov	r3, r0
 8102e54:	2b00      	cmp	r3, #0
 8102e56:	d004      	beq.n	8102e62 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8102e58:	687b      	ldr	r3, [r7, #4]
 8102e5a:	681b      	ldr	r3, [r3, #0]
 8102e5c:	4618      	mov	r0, r3
 8102e5e:	f7ff ff4d 	bl	8102cfc <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8102e62:	687b      	ldr	r3, [r7, #4]
 8102e64:	681b      	ldr	r3, [r3, #0]
 8102e66:	4618      	mov	r0, r3
 8102e68:	f7ff ff82 	bl	8102d70 <LL_ADC_IsInternalRegulatorEnabled>
 8102e6c:	4603      	mov	r3, r0
 8102e6e:	2b00      	cmp	r3, #0
 8102e70:	d114      	bne.n	8102e9c <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8102e72:	687b      	ldr	r3, [r7, #4]
 8102e74:	681b      	ldr	r3, [r3, #0]
 8102e76:	4618      	mov	r0, r3
 8102e78:	f7ff ff66 	bl	8102d48 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8102e7c:	4b9b      	ldr	r3, [pc, #620]	; (81030ec <HAL_ADC_Init+0x2e0>)
 8102e7e:	681b      	ldr	r3, [r3, #0]
 8102e80:	099b      	lsrs	r3, r3, #6
 8102e82:	4a9b      	ldr	r2, [pc, #620]	; (81030f0 <HAL_ADC_Init+0x2e4>)
 8102e84:	fba2 2303 	umull	r2, r3, r2, r3
 8102e88:	099b      	lsrs	r3, r3, #6
 8102e8a:	3301      	adds	r3, #1
 8102e8c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8102e8e:	e002      	b.n	8102e96 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8102e90:	68bb      	ldr	r3, [r7, #8]
 8102e92:	3b01      	subs	r3, #1
 8102e94:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8102e96:	68bb      	ldr	r3, [r7, #8]
 8102e98:	2b00      	cmp	r3, #0
 8102e9a:	d1f9      	bne.n	8102e90 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8102e9c:	687b      	ldr	r3, [r7, #4]
 8102e9e:	681b      	ldr	r3, [r3, #0]
 8102ea0:	4618      	mov	r0, r3
 8102ea2:	f7ff ff65 	bl	8102d70 <LL_ADC_IsInternalRegulatorEnabled>
 8102ea6:	4603      	mov	r3, r0
 8102ea8:	2b00      	cmp	r3, #0
 8102eaa:	d10d      	bne.n	8102ec8 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8102eac:	687b      	ldr	r3, [r7, #4]
 8102eae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8102eb0:	f043 0210 	orr.w	r2, r3, #16
 8102eb4:	687b      	ldr	r3, [r7, #4]
 8102eb6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8102eb8:	687b      	ldr	r3, [r7, #4]
 8102eba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8102ebc:	f043 0201 	orr.w	r2, r3, #1
 8102ec0:	687b      	ldr	r3, [r7, #4]
 8102ec2:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8102ec4:	2301      	movs	r3, #1
 8102ec6:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8102ec8:	687b      	ldr	r3, [r7, #4]
 8102eca:	681b      	ldr	r3, [r3, #0]
 8102ecc:	4618      	mov	r0, r3
 8102ece:	f7ff ff76 	bl	8102dbe <LL_ADC_REG_IsConversionOngoing>
 8102ed2:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8102ed4:	687b      	ldr	r3, [r7, #4]
 8102ed6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8102ed8:	f003 0310 	and.w	r3, r3, #16
 8102edc:	2b00      	cmp	r3, #0
 8102ede:	f040 8128 	bne.w	8103132 <HAL_ADC_Init+0x326>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8102ee2:	697b      	ldr	r3, [r7, #20]
 8102ee4:	2b00      	cmp	r3, #0
 8102ee6:	f040 8124 	bne.w	8103132 <HAL_ADC_Init+0x326>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8102eea:	687b      	ldr	r3, [r7, #4]
 8102eec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8102eee:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8102ef2:	f043 0202 	orr.w	r2, r3, #2
 8102ef6:	687b      	ldr	r3, [r7, #4]
 8102ef8:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8102efa:	687b      	ldr	r3, [r7, #4]
 8102efc:	681b      	ldr	r3, [r3, #0]
 8102efe:	4618      	mov	r0, r3
 8102f00:	f7ff ff4a 	bl	8102d98 <LL_ADC_IsEnabled>
 8102f04:	4603      	mov	r3, r0
 8102f06:	2b00      	cmp	r3, #0
 8102f08:	d136      	bne.n	8102f78 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8102f0a:	687b      	ldr	r3, [r7, #4]
 8102f0c:	681b      	ldr	r3, [r3, #0]
 8102f0e:	4a79      	ldr	r2, [pc, #484]	; (81030f4 <HAL_ADC_Init+0x2e8>)
 8102f10:	4293      	cmp	r3, r2
 8102f12:	d004      	beq.n	8102f1e <HAL_ADC_Init+0x112>
 8102f14:	687b      	ldr	r3, [r7, #4]
 8102f16:	681b      	ldr	r3, [r3, #0]
 8102f18:	4a77      	ldr	r2, [pc, #476]	; (81030f8 <HAL_ADC_Init+0x2ec>)
 8102f1a:	4293      	cmp	r3, r2
 8102f1c:	d10e      	bne.n	8102f3c <HAL_ADC_Init+0x130>
 8102f1e:	4875      	ldr	r0, [pc, #468]	; (81030f4 <HAL_ADC_Init+0x2e8>)
 8102f20:	f7ff ff3a 	bl	8102d98 <LL_ADC_IsEnabled>
 8102f24:	4604      	mov	r4, r0
 8102f26:	4874      	ldr	r0, [pc, #464]	; (81030f8 <HAL_ADC_Init+0x2ec>)
 8102f28:	f7ff ff36 	bl	8102d98 <LL_ADC_IsEnabled>
 8102f2c:	4603      	mov	r3, r0
 8102f2e:	4323      	orrs	r3, r4
 8102f30:	2b00      	cmp	r3, #0
 8102f32:	bf0c      	ite	eq
 8102f34:	2301      	moveq	r3, #1
 8102f36:	2300      	movne	r3, #0
 8102f38:	b2db      	uxtb	r3, r3
 8102f3a:	e008      	b.n	8102f4e <HAL_ADC_Init+0x142>
 8102f3c:	486f      	ldr	r0, [pc, #444]	; (81030fc <HAL_ADC_Init+0x2f0>)
 8102f3e:	f7ff ff2b 	bl	8102d98 <LL_ADC_IsEnabled>
 8102f42:	4603      	mov	r3, r0
 8102f44:	2b00      	cmp	r3, #0
 8102f46:	bf0c      	ite	eq
 8102f48:	2301      	moveq	r3, #1
 8102f4a:	2300      	movne	r3, #0
 8102f4c:	b2db      	uxtb	r3, r3
 8102f4e:	2b00      	cmp	r3, #0
 8102f50:	d012      	beq.n	8102f78 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8102f52:	687b      	ldr	r3, [r7, #4]
 8102f54:	681b      	ldr	r3, [r3, #0]
 8102f56:	4a67      	ldr	r2, [pc, #412]	; (81030f4 <HAL_ADC_Init+0x2e8>)
 8102f58:	4293      	cmp	r3, r2
 8102f5a:	d004      	beq.n	8102f66 <HAL_ADC_Init+0x15a>
 8102f5c:	687b      	ldr	r3, [r7, #4]
 8102f5e:	681b      	ldr	r3, [r3, #0]
 8102f60:	4a65      	ldr	r2, [pc, #404]	; (81030f8 <HAL_ADC_Init+0x2ec>)
 8102f62:	4293      	cmp	r3, r2
 8102f64:	d101      	bne.n	8102f6a <HAL_ADC_Init+0x15e>
 8102f66:	4a66      	ldr	r2, [pc, #408]	; (8103100 <HAL_ADC_Init+0x2f4>)
 8102f68:	e000      	b.n	8102f6c <HAL_ADC_Init+0x160>
 8102f6a:	4a66      	ldr	r2, [pc, #408]	; (8103104 <HAL_ADC_Init+0x2f8>)
 8102f6c:	687b      	ldr	r3, [r7, #4]
 8102f6e:	685b      	ldr	r3, [r3, #4]
 8102f70:	4619      	mov	r1, r3
 8102f72:	4610      	mov	r0, r2
 8102f74:	f7ff fd7c 	bl	8102a70 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8102f78:	f7ff fd6e 	bl	8102a58 <HAL_GetREVID>
 8102f7c:	4603      	mov	r3, r0
 8102f7e:	f241 0203 	movw	r2, #4099	; 0x1003
 8102f82:	4293      	cmp	r3, r2
 8102f84:	d914      	bls.n	8102fb0 <HAL_ADC_Init+0x1a4>
 8102f86:	687b      	ldr	r3, [r7, #4]
 8102f88:	689b      	ldr	r3, [r3, #8]
 8102f8a:	2b10      	cmp	r3, #16
 8102f8c:	d110      	bne.n	8102fb0 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8102f8e:	687b      	ldr	r3, [r7, #4]
 8102f90:	7d5b      	ldrb	r3, [r3, #21]
 8102f92:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8102f94:	687b      	ldr	r3, [r7, #4]
 8102f96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8102f98:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8102f9a:	687b      	ldr	r3, [r7, #4]
 8102f9c:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8102f9e:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8102fa0:	687b      	ldr	r3, [r7, #4]
 8102fa2:	7f1b      	ldrb	r3, [r3, #28]
 8102fa4:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8102fa6:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8102fa8:	f043 030c 	orr.w	r3, r3, #12
 8102fac:	61bb      	str	r3, [r7, #24]
 8102fae:	e00d      	b.n	8102fcc <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8102fb0:	687b      	ldr	r3, [r7, #4]
 8102fb2:	7d5b      	ldrb	r3, [r3, #21]
 8102fb4:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8102fb6:	687b      	ldr	r3, [r7, #4]
 8102fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8102fba:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8102fbc:	687b      	ldr	r3, [r7, #4]
 8102fbe:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8102fc0:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8102fc2:	687b      	ldr	r3, [r7, #4]
 8102fc4:	7f1b      	ldrb	r3, [r3, #28]
 8102fc6:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8102fc8:	4313      	orrs	r3, r2
 8102fca:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8102fcc:	687b      	ldr	r3, [r7, #4]
 8102fce:	7f1b      	ldrb	r3, [r3, #28]
 8102fd0:	2b01      	cmp	r3, #1
 8102fd2:	d106      	bne.n	8102fe2 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8102fd4:	687b      	ldr	r3, [r7, #4]
 8102fd6:	6a1b      	ldr	r3, [r3, #32]
 8102fd8:	3b01      	subs	r3, #1
 8102fda:	045b      	lsls	r3, r3, #17
 8102fdc:	69ba      	ldr	r2, [r7, #24]
 8102fde:	4313      	orrs	r3, r2
 8102fe0:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8102fe2:	687b      	ldr	r3, [r7, #4]
 8102fe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8102fe6:	2b00      	cmp	r3, #0
 8102fe8:	d009      	beq.n	8102ffe <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8102fea:	687b      	ldr	r3, [r7, #4]
 8102fec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8102fee:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8102ff2:	687b      	ldr	r3, [r7, #4]
 8102ff4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8102ff6:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8102ff8:	69ba      	ldr	r2, [r7, #24]
 8102ffa:	4313      	orrs	r3, r2
 8102ffc:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8102ffe:	687b      	ldr	r3, [r7, #4]
 8103000:	681b      	ldr	r3, [r3, #0]
 8103002:	68da      	ldr	r2, [r3, #12]
 8103004:	4b40      	ldr	r3, [pc, #256]	; (8103108 <HAL_ADC_Init+0x2fc>)
 8103006:	4013      	ands	r3, r2
 8103008:	687a      	ldr	r2, [r7, #4]
 810300a:	6812      	ldr	r2, [r2, #0]
 810300c:	69b9      	ldr	r1, [r7, #24]
 810300e:	430b      	orrs	r3, r1
 8103010:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8103012:	687b      	ldr	r3, [r7, #4]
 8103014:	681b      	ldr	r3, [r3, #0]
 8103016:	4618      	mov	r0, r3
 8103018:	f7ff fed1 	bl	8102dbe <LL_ADC_REG_IsConversionOngoing>
 810301c:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 810301e:	687b      	ldr	r3, [r7, #4]
 8103020:	681b      	ldr	r3, [r3, #0]
 8103022:	4618      	mov	r0, r3
 8103024:	f7ff fede 	bl	8102de4 <LL_ADC_INJ_IsConversionOngoing>
 8103028:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 810302a:	693b      	ldr	r3, [r7, #16]
 810302c:	2b00      	cmp	r3, #0
 810302e:	d14c      	bne.n	81030ca <HAL_ADC_Init+0x2be>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8103030:	68fb      	ldr	r3, [r7, #12]
 8103032:	2b00      	cmp	r3, #0
 8103034:	d149      	bne.n	81030ca <HAL_ADC_Init+0x2be>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8103036:	687b      	ldr	r3, [r7, #4]
 8103038:	7d1b      	ldrb	r3, [r3, #20]
 810303a:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 810303c:	687b      	ldr	r3, [r7, #4]
 810303e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8103040:	4313      	orrs	r3, r2
 8103042:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8103044:	687b      	ldr	r3, [r7, #4]
 8103046:	681b      	ldr	r3, [r3, #0]
 8103048:	68db      	ldr	r3, [r3, #12]
 810304a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 810304e:	f023 0303 	bic.w	r3, r3, #3
 8103052:	687a      	ldr	r2, [r7, #4]
 8103054:	6812      	ldr	r2, [r2, #0]
 8103056:	69b9      	ldr	r1, [r7, #24]
 8103058:	430b      	orrs	r3, r1
 810305a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 810305c:	687b      	ldr	r3, [r7, #4]
 810305e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8103062:	2b01      	cmp	r3, #1
 8103064:	d11b      	bne.n	810309e <HAL_ADC_Init+0x292>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8103066:	687b      	ldr	r3, [r7, #4]
 8103068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810306a:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 810306c:	687b      	ldr	r3, [r7, #4]
 810306e:	681b      	ldr	r3, [r3, #0]
 8103070:	691a      	ldr	r2, [r3, #16]
 8103072:	4b26      	ldr	r3, [pc, #152]	; (810310c <HAL_ADC_Init+0x300>)
 8103074:	4013      	ands	r3, r2
 8103076:	687a      	ldr	r2, [r7, #4]
 8103078:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 810307a:	3a01      	subs	r2, #1
 810307c:	0411      	lsls	r1, r2, #16
 810307e:	687a      	ldr	r2, [r7, #4]
 8103080:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8103082:	4311      	orrs	r1, r2
 8103084:	687a      	ldr	r2, [r7, #4]
 8103086:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8103088:	4311      	orrs	r1, r2
 810308a:	687a      	ldr	r2, [r7, #4]
 810308c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 810308e:	430a      	orrs	r2, r1
 8103090:	431a      	orrs	r2, r3
 8103092:	687b      	ldr	r3, [r7, #4]
 8103094:	681b      	ldr	r3, [r3, #0]
 8103096:	f042 0201 	orr.w	r2, r2, #1
 810309a:	611a      	str	r2, [r3, #16]
 810309c:	e007      	b.n	81030ae <HAL_ADC_Init+0x2a2>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 810309e:	687b      	ldr	r3, [r7, #4]
 81030a0:	681b      	ldr	r3, [r3, #0]
 81030a2:	691a      	ldr	r2, [r3, #16]
 81030a4:	687b      	ldr	r3, [r7, #4]
 81030a6:	681b      	ldr	r3, [r3, #0]
 81030a8:	f022 0201 	bic.w	r2, r2, #1
 81030ac:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 81030ae:	687b      	ldr	r3, [r7, #4]
 81030b0:	681b      	ldr	r3, [r3, #0]
 81030b2:	691b      	ldr	r3, [r3, #16]
 81030b4:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 81030b8:	687b      	ldr	r3, [r7, #4]
 81030ba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 81030bc:	687b      	ldr	r3, [r7, #4]
 81030be:	681b      	ldr	r3, [r3, #0]
 81030c0:	430a      	orrs	r2, r1
 81030c2:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 81030c4:	6878      	ldr	r0, [r7, #4]
 81030c6:	f000 fde9 	bl	8103c9c <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 81030ca:	687b      	ldr	r3, [r7, #4]
 81030cc:	68db      	ldr	r3, [r3, #12]
 81030ce:	2b01      	cmp	r3, #1
 81030d0:	d11e      	bne.n	8103110 <HAL_ADC_Init+0x304>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 81030d2:	687b      	ldr	r3, [r7, #4]
 81030d4:	681b      	ldr	r3, [r3, #0]
 81030d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81030d8:	f023 010f 	bic.w	r1, r3, #15
 81030dc:	687b      	ldr	r3, [r7, #4]
 81030de:	699b      	ldr	r3, [r3, #24]
 81030e0:	1e5a      	subs	r2, r3, #1
 81030e2:	687b      	ldr	r3, [r7, #4]
 81030e4:	681b      	ldr	r3, [r3, #0]
 81030e6:	430a      	orrs	r2, r1
 81030e8:	631a      	str	r2, [r3, #48]	; 0x30
 81030ea:	e019      	b.n	8103120 <HAL_ADC_Init+0x314>
 81030ec:	10000000 	.word	0x10000000
 81030f0:	053e2d63 	.word	0x053e2d63
 81030f4:	40022000 	.word	0x40022000
 81030f8:	40022100 	.word	0x40022100
 81030fc:	58026000 	.word	0x58026000
 8103100:	40022300 	.word	0x40022300
 8103104:	58026300 	.word	0x58026300
 8103108:	fff0c003 	.word	0xfff0c003
 810310c:	fc00f81e 	.word	0xfc00f81e
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8103110:	687b      	ldr	r3, [r7, #4]
 8103112:	681b      	ldr	r3, [r3, #0]
 8103114:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8103116:	687b      	ldr	r3, [r7, #4]
 8103118:	681b      	ldr	r3, [r3, #0]
 810311a:	f022 020f 	bic.w	r2, r2, #15
 810311e:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8103120:	687b      	ldr	r3, [r7, #4]
 8103122:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103124:	f023 0303 	bic.w	r3, r3, #3
 8103128:	f043 0201 	orr.w	r2, r3, #1
 810312c:	687b      	ldr	r3, [r7, #4]
 810312e:	655a      	str	r2, [r3, #84]	; 0x54
 8103130:	e007      	b.n	8103142 <HAL_ADC_Init+0x336>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8103132:	687b      	ldr	r3, [r7, #4]
 8103134:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103136:	f043 0210 	orr.w	r2, r3, #16
 810313a:	687b      	ldr	r3, [r7, #4]
 810313c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 810313e:	2301      	movs	r3, #1
 8103140:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8103142:	7ffb      	ldrb	r3, [r7, #31]
}
 8103144:	4618      	mov	r0, r3
 8103146:	3724      	adds	r7, #36	; 0x24
 8103148:	46bd      	mov	sp, r7
 810314a:	bd90      	pop	{r4, r7, pc}

0810314c <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 810314c:	b580      	push	{r7, lr}
 810314e:	b08a      	sub	sp, #40	; 0x28
 8103150:	af00      	add	r7, sp, #0
 8103152:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8103154:	2300      	movs	r3, #0
 8103156:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8103158:	687b      	ldr	r3, [r7, #4]
 810315a:	681b      	ldr	r3, [r3, #0]
 810315c:	681b      	ldr	r3, [r3, #0]
 810315e:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8103160:	687b      	ldr	r3, [r7, #4]
 8103162:	681b      	ldr	r3, [r3, #0]
 8103164:	685b      	ldr	r3, [r3, #4]
 8103166:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8103168:	687b      	ldr	r3, [r7, #4]
 810316a:	681b      	ldr	r3, [r3, #0]
 810316c:	4a87      	ldr	r2, [pc, #540]	; (810338c <HAL_ADC_IRQHandler+0x240>)
 810316e:	4293      	cmp	r3, r2
 8103170:	d004      	beq.n	810317c <HAL_ADC_IRQHandler+0x30>
 8103172:	687b      	ldr	r3, [r7, #4]
 8103174:	681b      	ldr	r3, [r3, #0]
 8103176:	4a86      	ldr	r2, [pc, #536]	; (8103390 <HAL_ADC_IRQHandler+0x244>)
 8103178:	4293      	cmp	r3, r2
 810317a:	d101      	bne.n	8103180 <HAL_ADC_IRQHandler+0x34>
 810317c:	4b85      	ldr	r3, [pc, #532]	; (8103394 <HAL_ADC_IRQHandler+0x248>)
 810317e:	e000      	b.n	8103182 <HAL_ADC_IRQHandler+0x36>
 8103180:	4b85      	ldr	r3, [pc, #532]	; (8103398 <HAL_ADC_IRQHandler+0x24c>)
 8103182:	4618      	mov	r0, r3
 8103184:	f7ff fd9e 	bl	8102cc4 <LL_ADC_GetMultimode>
 8103188:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 810318a:	69fb      	ldr	r3, [r7, #28]
 810318c:	f003 0302 	and.w	r3, r3, #2
 8103190:	2b00      	cmp	r3, #0
 8103192:	d017      	beq.n	81031c4 <HAL_ADC_IRQHandler+0x78>
 8103194:	69bb      	ldr	r3, [r7, #24]
 8103196:	f003 0302 	and.w	r3, r3, #2
 810319a:	2b00      	cmp	r3, #0
 810319c:	d012      	beq.n	81031c4 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 810319e:	687b      	ldr	r3, [r7, #4]
 81031a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81031a2:	f003 0310 	and.w	r3, r3, #16
 81031a6:	2b00      	cmp	r3, #0
 81031a8:	d105      	bne.n	81031b6 <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 81031aa:	687b      	ldr	r3, [r7, #4]
 81031ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81031ae:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 81031b2:	687b      	ldr	r3, [r7, #4]
 81031b4:	655a      	str	r2, [r3, #84]	; 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 81031b6:	6878      	ldr	r0, [r7, #4]
 81031b8:	f000 fec8 	bl	8103f4c <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 81031bc:	687b      	ldr	r3, [r7, #4]
 81031be:	681b      	ldr	r3, [r3, #0]
 81031c0:	2202      	movs	r2, #2
 81031c2:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 81031c4:	69fb      	ldr	r3, [r7, #28]
 81031c6:	f003 0304 	and.w	r3, r3, #4
 81031ca:	2b00      	cmp	r3, #0
 81031cc:	d004      	beq.n	81031d8 <HAL_ADC_IRQHandler+0x8c>
 81031ce:	69bb      	ldr	r3, [r7, #24]
 81031d0:	f003 0304 	and.w	r3, r3, #4
 81031d4:	2b00      	cmp	r3, #0
 81031d6:	d10a      	bne.n	81031ee <HAL_ADC_IRQHandler+0xa2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 81031d8:	69fb      	ldr	r3, [r7, #28]
 81031da:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 81031de:	2b00      	cmp	r3, #0
 81031e0:	f000 8083 	beq.w	81032ea <HAL_ADC_IRQHandler+0x19e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 81031e4:	69bb      	ldr	r3, [r7, #24]
 81031e6:	f003 0308 	and.w	r3, r3, #8
 81031ea:	2b00      	cmp	r3, #0
 81031ec:	d07d      	beq.n	81032ea <HAL_ADC_IRQHandler+0x19e>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 81031ee:	687b      	ldr	r3, [r7, #4]
 81031f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81031f2:	f003 0310 	and.w	r3, r3, #16
 81031f6:	2b00      	cmp	r3, #0
 81031f8:	d105      	bne.n	8103206 <HAL_ADC_IRQHandler+0xba>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 81031fa:	687b      	ldr	r3, [r7, #4]
 81031fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81031fe:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8103202:	687b      	ldr	r3, [r7, #4]
 8103204:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8103206:	687b      	ldr	r3, [r7, #4]
 8103208:	681b      	ldr	r3, [r3, #0]
 810320a:	4618      	mov	r0, r3
 810320c:	f7ff fcb8 	bl	8102b80 <LL_ADC_REG_IsTriggerSourceSWStart>
 8103210:	4603      	mov	r3, r0
 8103212:	2b00      	cmp	r3, #0
 8103214:	d062      	beq.n	81032dc <HAL_ADC_IRQHandler+0x190>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8103216:	687b      	ldr	r3, [r7, #4]
 8103218:	681b      	ldr	r3, [r3, #0]
 810321a:	4a5d      	ldr	r2, [pc, #372]	; (8103390 <HAL_ADC_IRQHandler+0x244>)
 810321c:	4293      	cmp	r3, r2
 810321e:	d002      	beq.n	8103226 <HAL_ADC_IRQHandler+0xda>
 8103220:	687b      	ldr	r3, [r7, #4]
 8103222:	681b      	ldr	r3, [r3, #0]
 8103224:	e000      	b.n	8103228 <HAL_ADC_IRQHandler+0xdc>
 8103226:	4b59      	ldr	r3, [pc, #356]	; (810338c <HAL_ADC_IRQHandler+0x240>)
 8103228:	687a      	ldr	r2, [r7, #4]
 810322a:	6812      	ldr	r2, [r2, #0]
 810322c:	4293      	cmp	r3, r2
 810322e:	d008      	beq.n	8103242 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8103230:	697b      	ldr	r3, [r7, #20]
 8103232:	2b00      	cmp	r3, #0
 8103234:	d005      	beq.n	8103242 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8103236:	697b      	ldr	r3, [r7, #20]
 8103238:	2b05      	cmp	r3, #5
 810323a:	d002      	beq.n	8103242 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 810323c:	697b      	ldr	r3, [r7, #20]
 810323e:	2b09      	cmp	r3, #9
 8103240:	d104      	bne.n	810324c <HAL_ADC_IRQHandler+0x100>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8103242:	687b      	ldr	r3, [r7, #4]
 8103244:	681b      	ldr	r3, [r3, #0]
 8103246:	68db      	ldr	r3, [r3, #12]
 8103248:	623b      	str	r3, [r7, #32]
 810324a:	e00c      	b.n	8103266 <HAL_ADC_IRQHandler+0x11a>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 810324c:	687b      	ldr	r3, [r7, #4]
 810324e:	681b      	ldr	r3, [r3, #0]
 8103250:	4a4f      	ldr	r2, [pc, #316]	; (8103390 <HAL_ADC_IRQHandler+0x244>)
 8103252:	4293      	cmp	r3, r2
 8103254:	d002      	beq.n	810325c <HAL_ADC_IRQHandler+0x110>
 8103256:	687b      	ldr	r3, [r7, #4]
 8103258:	681b      	ldr	r3, [r3, #0]
 810325a:	e000      	b.n	810325e <HAL_ADC_IRQHandler+0x112>
 810325c:	4b4b      	ldr	r3, [pc, #300]	; (810338c <HAL_ADC_IRQHandler+0x240>)
 810325e:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8103260:	693b      	ldr	r3, [r7, #16]
 8103262:	68db      	ldr	r3, [r3, #12]
 8103264:	623b      	str	r3, [r7, #32]
      }

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8103266:	6a3b      	ldr	r3, [r7, #32]
 8103268:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 810326c:	2b00      	cmp	r3, #0
 810326e:	d135      	bne.n	81032dc <HAL_ADC_IRQHandler+0x190>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8103270:	687b      	ldr	r3, [r7, #4]
 8103272:	681b      	ldr	r3, [r3, #0]
 8103274:	681b      	ldr	r3, [r3, #0]
 8103276:	f003 0308 	and.w	r3, r3, #8
 810327a:	2b08      	cmp	r3, #8
 810327c:	d12e      	bne.n	81032dc <HAL_ADC_IRQHandler+0x190>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 810327e:	687b      	ldr	r3, [r7, #4]
 8103280:	681b      	ldr	r3, [r3, #0]
 8103282:	4618      	mov	r0, r3
 8103284:	f7ff fd9b 	bl	8102dbe <LL_ADC_REG_IsConversionOngoing>
 8103288:	4603      	mov	r3, r0
 810328a:	2b00      	cmp	r3, #0
 810328c:	d11a      	bne.n	81032c4 <HAL_ADC_IRQHandler+0x178>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 810328e:	687b      	ldr	r3, [r7, #4]
 8103290:	681b      	ldr	r3, [r3, #0]
 8103292:	685a      	ldr	r2, [r3, #4]
 8103294:	687b      	ldr	r3, [r7, #4]
 8103296:	681b      	ldr	r3, [r3, #0]
 8103298:	f022 020c 	bic.w	r2, r2, #12
 810329c:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 810329e:	687b      	ldr	r3, [r7, #4]
 81032a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81032a2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 81032a6:	687b      	ldr	r3, [r7, #4]
 81032a8:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 81032aa:	687b      	ldr	r3, [r7, #4]
 81032ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81032ae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 81032b2:	2b00      	cmp	r3, #0
 81032b4:	d112      	bne.n	81032dc <HAL_ADC_IRQHandler+0x190>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 81032b6:	687b      	ldr	r3, [r7, #4]
 81032b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81032ba:	f043 0201 	orr.w	r2, r3, #1
 81032be:	687b      	ldr	r3, [r7, #4]
 81032c0:	655a      	str	r2, [r3, #84]	; 0x54
 81032c2:	e00b      	b.n	81032dc <HAL_ADC_IRQHandler+0x190>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 81032c4:	687b      	ldr	r3, [r7, #4]
 81032c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81032c8:	f043 0210 	orr.w	r2, r3, #16
 81032cc:	687b      	ldr	r3, [r7, #4]
 81032ce:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 81032d0:	687b      	ldr	r3, [r7, #4]
 81032d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81032d4:	f043 0201 	orr.w	r2, r3, #1
 81032d8:	687b      	ldr	r3, [r7, #4]
 81032da:	659a      	str	r2, [r3, #88]	; 0x58
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 81032dc:	6878      	ldr	r0, [r7, #4]
 81032de:	f000 f96f 	bl	81035c0 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 81032e2:	687b      	ldr	r3, [r7, #4]
 81032e4:	681b      	ldr	r3, [r3, #0]
 81032e6:	220c      	movs	r2, #12
 81032e8:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 81032ea:	69fb      	ldr	r3, [r7, #28]
 81032ec:	f003 0320 	and.w	r3, r3, #32
 81032f0:	2b00      	cmp	r3, #0
 81032f2:	d004      	beq.n	81032fe <HAL_ADC_IRQHandler+0x1b2>
 81032f4:	69bb      	ldr	r3, [r7, #24]
 81032f6:	f003 0320 	and.w	r3, r3, #32
 81032fa:	2b00      	cmp	r3, #0
 81032fc:	d10b      	bne.n	8103316 <HAL_ADC_IRQHandler+0x1ca>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 81032fe:	69fb      	ldr	r3, [r7, #28]
 8103300:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8103304:	2b00      	cmp	r3, #0
 8103306:	f000 80a0 	beq.w	810344a <HAL_ADC_IRQHandler+0x2fe>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 810330a:	69bb      	ldr	r3, [r7, #24]
 810330c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8103310:	2b00      	cmp	r3, #0
 8103312:	f000 809a 	beq.w	810344a <HAL_ADC_IRQHandler+0x2fe>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8103316:	687b      	ldr	r3, [r7, #4]
 8103318:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810331a:	f003 0310 	and.w	r3, r3, #16
 810331e:	2b00      	cmp	r3, #0
 8103320:	d105      	bne.n	810332e <HAL_ADC_IRQHandler+0x1e2>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8103322:	687b      	ldr	r3, [r7, #4]
 8103324:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103326:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 810332a:	687b      	ldr	r3, [r7, #4]
 810332c:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 810332e:	687b      	ldr	r3, [r7, #4]
 8103330:	681b      	ldr	r3, [r3, #0]
 8103332:	4618      	mov	r0, r3
 8103334:	f7ff fc63 	bl	8102bfe <LL_ADC_INJ_IsTriggerSourceSWStart>
 8103338:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 810333a:	687b      	ldr	r3, [r7, #4]
 810333c:	681b      	ldr	r3, [r3, #0]
 810333e:	4618      	mov	r0, r3
 8103340:	f7ff fc1e 	bl	8102b80 <LL_ADC_REG_IsTriggerSourceSWStart>
 8103344:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8103346:	687b      	ldr	r3, [r7, #4]
 8103348:	681b      	ldr	r3, [r3, #0]
 810334a:	4a11      	ldr	r2, [pc, #68]	; (8103390 <HAL_ADC_IRQHandler+0x244>)
 810334c:	4293      	cmp	r3, r2
 810334e:	d002      	beq.n	8103356 <HAL_ADC_IRQHandler+0x20a>
 8103350:	687b      	ldr	r3, [r7, #4]
 8103352:	681b      	ldr	r3, [r3, #0]
 8103354:	e000      	b.n	8103358 <HAL_ADC_IRQHandler+0x20c>
 8103356:	4b0d      	ldr	r3, [pc, #52]	; (810338c <HAL_ADC_IRQHandler+0x240>)
 8103358:	687a      	ldr	r2, [r7, #4]
 810335a:	6812      	ldr	r2, [r2, #0]
 810335c:	4293      	cmp	r3, r2
 810335e:	d008      	beq.n	8103372 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8103360:	697b      	ldr	r3, [r7, #20]
 8103362:	2b00      	cmp	r3, #0
 8103364:	d005      	beq.n	8103372 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8103366:	697b      	ldr	r3, [r7, #20]
 8103368:	2b06      	cmp	r3, #6
 810336a:	d002      	beq.n	8103372 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 810336c:	697b      	ldr	r3, [r7, #20]
 810336e:	2b07      	cmp	r3, #7
 8103370:	d104      	bne.n	810337c <HAL_ADC_IRQHandler+0x230>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8103372:	687b      	ldr	r3, [r7, #4]
 8103374:	681b      	ldr	r3, [r3, #0]
 8103376:	68db      	ldr	r3, [r3, #12]
 8103378:	623b      	str	r3, [r7, #32]
 810337a:	e014      	b.n	81033a6 <HAL_ADC_IRQHandler+0x25a>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 810337c:	687b      	ldr	r3, [r7, #4]
 810337e:	681b      	ldr	r3, [r3, #0]
 8103380:	4a03      	ldr	r2, [pc, #12]	; (8103390 <HAL_ADC_IRQHandler+0x244>)
 8103382:	4293      	cmp	r3, r2
 8103384:	d00a      	beq.n	810339c <HAL_ADC_IRQHandler+0x250>
 8103386:	687b      	ldr	r3, [r7, #4]
 8103388:	681b      	ldr	r3, [r3, #0]
 810338a:	e008      	b.n	810339e <HAL_ADC_IRQHandler+0x252>
 810338c:	40022000 	.word	0x40022000
 8103390:	40022100 	.word	0x40022100
 8103394:	40022300 	.word	0x40022300
 8103398:	58026300 	.word	0x58026300
 810339c:	4b84      	ldr	r3, [pc, #528]	; (81035b0 <HAL_ADC_IRQHandler+0x464>)
 810339e:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 81033a0:	693b      	ldr	r3, [r7, #16]
 81033a2:	68db      	ldr	r3, [r3, #12]
 81033a4:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if ((tmp_adc_inj_is_trigger_source_sw_start != 0UL)            ||
 81033a6:	68fb      	ldr	r3, [r7, #12]
 81033a8:	2b00      	cmp	r3, #0
 81033aa:	d10c      	bne.n	81033c6 <HAL_ADC_IRQHandler+0x27a>
        ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL)      &&
 81033ac:	6a3b      	ldr	r3, [r7, #32]
 81033ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    if ((tmp_adc_inj_is_trigger_source_sw_start != 0UL)            ||
 81033b2:	2b00      	cmp	r3, #0
 81033b4:	d142      	bne.n	810343c <HAL_ADC_IRQHandler+0x2f0>
        ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL)      &&
 81033b6:	68bb      	ldr	r3, [r7, #8]
 81033b8:	2b00      	cmp	r3, #0
 81033ba:	d03f      	beq.n	810343c <HAL_ADC_IRQHandler+0x2f0>
         ((tmp_adc_reg_is_trigger_source_sw_start != 0UL)  &&
          (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL))))
 81033bc:	6a3b      	ldr	r3, [r7, #32]
 81033be:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
         ((tmp_adc_reg_is_trigger_source_sw_start != 0UL)  &&
 81033c2:	2b00      	cmp	r3, #0
 81033c4:	d13a      	bne.n	810343c <HAL_ADC_IRQHandler+0x2f0>
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 81033c6:	687b      	ldr	r3, [r7, #4]
 81033c8:	681b      	ldr	r3, [r3, #0]
 81033ca:	681b      	ldr	r3, [r3, #0]
 81033cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 81033d0:	2b40      	cmp	r3, #64	; 0x40
 81033d2:	d133      	bne.n	810343c <HAL_ADC_IRQHandler+0x2f0>
        /* when the last context has been fully processed, JSQR is reset      */
        /* by the hardware. Even if no injected conversion is planned to come */
        /* (queue empty, triggers are ignored), it can start again            */
        /* immediately after setting a new context (JADSTART is still set).   */
        /* Therefore, state of HAL ADC injected group is kept to busy.        */
        if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 81033d4:	6a3b      	ldr	r3, [r7, #32]
 81033d6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 81033da:	2b00      	cmp	r3, #0
 81033dc:	d12e      	bne.n	810343c <HAL_ADC_IRQHandler+0x2f0>
        {
          /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
          /* JADSTART==0 (no conversion on going)                             */
          if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 81033de:	687b      	ldr	r3, [r7, #4]
 81033e0:	681b      	ldr	r3, [r3, #0]
 81033e2:	4618      	mov	r0, r3
 81033e4:	f7ff fcfe 	bl	8102de4 <LL_ADC_INJ_IsConversionOngoing>
 81033e8:	4603      	mov	r3, r0
 81033ea:	2b00      	cmp	r3, #0
 81033ec:	d11a      	bne.n	8103424 <HAL_ADC_IRQHandler+0x2d8>
          {
            /* Disable ADC end of sequence conversion interrupt  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 81033ee:	687b      	ldr	r3, [r7, #4]
 81033f0:	681b      	ldr	r3, [r3, #0]
 81033f2:	685a      	ldr	r2, [r3, #4]
 81033f4:	687b      	ldr	r3, [r7, #4]
 81033f6:	681b      	ldr	r3, [r3, #0]
 81033f8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 81033fc:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 81033fe:	687b      	ldr	r3, [r7, #4]
 8103400:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103402:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8103406:	687b      	ldr	r3, [r7, #4]
 8103408:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 810340a:	687b      	ldr	r3, [r7, #4]
 810340c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810340e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8103412:	2b00      	cmp	r3, #0
 8103414:	d112      	bne.n	810343c <HAL_ADC_IRQHandler+0x2f0>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8103416:	687b      	ldr	r3, [r7, #4]
 8103418:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810341a:	f043 0201 	orr.w	r2, r3, #1
 810341e:	687b      	ldr	r3, [r7, #4]
 8103420:	655a      	str	r2, [r3, #84]	; 0x54
 8103422:	e00b      	b.n	810343c <HAL_ADC_IRQHandler+0x2f0>
            }
          }
          else
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8103424:	687b      	ldr	r3, [r7, #4]
 8103426:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103428:	f043 0210 	orr.w	r2, r3, #16
 810342c:	687b      	ldr	r3, [r7, #4]
 810342e:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8103430:	687b      	ldr	r3, [r7, #4]
 8103432:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8103434:	f043 0201 	orr.w	r2, r3, #1
 8103438:	687b      	ldr	r3, [r7, #4]
 810343a:	659a      	str	r2, [r3, #88]	; 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 810343c:	6878      	ldr	r0, [r7, #4]
 810343e:	f000 fd5d 	bl	8103efc <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8103442:	687b      	ldr	r3, [r7, #4]
 8103444:	681b      	ldr	r3, [r3, #0]
 8103446:	2260      	movs	r2, #96	; 0x60
 8103448:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 810344a:	69fb      	ldr	r3, [r7, #28]
 810344c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8103450:	2b00      	cmp	r3, #0
 8103452:	d011      	beq.n	8103478 <HAL_ADC_IRQHandler+0x32c>
 8103454:	69bb      	ldr	r3, [r7, #24]
 8103456:	f003 0380 	and.w	r3, r3, #128	; 0x80
 810345a:	2b00      	cmp	r3, #0
 810345c:	d00c      	beq.n	8103478 <HAL_ADC_IRQHandler+0x32c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 810345e:	687b      	ldr	r3, [r7, #4]
 8103460:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103462:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8103466:	687b      	ldr	r3, [r7, #4]
 8103468:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 810346a:	6878      	ldr	r0, [r7, #4]
 810346c:	f000 f8b2 	bl	81035d4 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8103470:	687b      	ldr	r3, [r7, #4]
 8103472:	681b      	ldr	r3, [r3, #0]
 8103474:	2280      	movs	r2, #128	; 0x80
 8103476:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8103478:	69fb      	ldr	r3, [r7, #28]
 810347a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 810347e:	2b00      	cmp	r3, #0
 8103480:	d012      	beq.n	81034a8 <HAL_ADC_IRQHandler+0x35c>
 8103482:	69bb      	ldr	r3, [r7, #24]
 8103484:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8103488:	2b00      	cmp	r3, #0
 810348a:	d00d      	beq.n	81034a8 <HAL_ADC_IRQHandler+0x35c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 810348c:	687b      	ldr	r3, [r7, #4]
 810348e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103490:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8103494:	687b      	ldr	r3, [r7, #4]
 8103496:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8103498:	6878      	ldr	r0, [r7, #4]
 810349a:	f000 fd43 	bl	8103f24 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 810349e:	687b      	ldr	r3, [r7, #4]
 81034a0:	681b      	ldr	r3, [r3, #0]
 81034a2:	f44f 7280 	mov.w	r2, #256	; 0x100
 81034a6:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 81034a8:	69fb      	ldr	r3, [r7, #28]
 81034aa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 81034ae:	2b00      	cmp	r3, #0
 81034b0:	d012      	beq.n	81034d8 <HAL_ADC_IRQHandler+0x38c>
 81034b2:	69bb      	ldr	r3, [r7, #24]
 81034b4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 81034b8:	2b00      	cmp	r3, #0
 81034ba:	d00d      	beq.n	81034d8 <HAL_ADC_IRQHandler+0x38c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 81034bc:	687b      	ldr	r3, [r7, #4]
 81034be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81034c0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 81034c4:	687b      	ldr	r3, [r7, #4]
 81034c6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 81034c8:	6878      	ldr	r0, [r7, #4]
 81034ca:	f000 fd35 	bl	8103f38 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 81034ce:	687b      	ldr	r3, [r7, #4]
 81034d0:	681b      	ldr	r3, [r3, #0]
 81034d2:	f44f 7200 	mov.w	r2, #512	; 0x200
 81034d6:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 81034d8:	69fb      	ldr	r3, [r7, #28]
 81034da:	f003 0310 	and.w	r3, r3, #16
 81034de:	2b00      	cmp	r3, #0
 81034e0:	d043      	beq.n	810356a <HAL_ADC_IRQHandler+0x41e>
 81034e2:	69bb      	ldr	r3, [r7, #24]
 81034e4:	f003 0310 	and.w	r3, r3, #16
 81034e8:	2b00      	cmp	r3, #0
 81034ea:	d03e      	beq.n	810356a <HAL_ADC_IRQHandler+0x41e>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 81034ec:	687b      	ldr	r3, [r7, #4]
 81034ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81034f0:	2b00      	cmp	r3, #0
 81034f2:	d102      	bne.n	81034fa <HAL_ADC_IRQHandler+0x3ae>
    {
      overrun_error = 1UL;
 81034f4:	2301      	movs	r3, #1
 81034f6:	627b      	str	r3, [r7, #36]	; 0x24
 81034f8:	e021      	b.n	810353e <HAL_ADC_IRQHandler+0x3f2>
    }
    else
    {
      /* Check DMA configuration */
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 81034fa:	697b      	ldr	r3, [r7, #20]
 81034fc:	2b00      	cmp	r3, #0
 81034fe:	d015      	beq.n	810352c <HAL_ADC_IRQHandler+0x3e0>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8103500:	687b      	ldr	r3, [r7, #4]
 8103502:	681b      	ldr	r3, [r3, #0]
 8103504:	4a2a      	ldr	r2, [pc, #168]	; (81035b0 <HAL_ADC_IRQHandler+0x464>)
 8103506:	4293      	cmp	r3, r2
 8103508:	d004      	beq.n	8103514 <HAL_ADC_IRQHandler+0x3c8>
 810350a:	687b      	ldr	r3, [r7, #4]
 810350c:	681b      	ldr	r3, [r3, #0]
 810350e:	4a29      	ldr	r2, [pc, #164]	; (81035b4 <HAL_ADC_IRQHandler+0x468>)
 8103510:	4293      	cmp	r3, r2
 8103512:	d101      	bne.n	8103518 <HAL_ADC_IRQHandler+0x3cc>
 8103514:	4b28      	ldr	r3, [pc, #160]	; (81035b8 <HAL_ADC_IRQHandler+0x46c>)
 8103516:	e000      	b.n	810351a <HAL_ADC_IRQHandler+0x3ce>
 8103518:	4b28      	ldr	r3, [pc, #160]	; (81035bc <HAL_ADC_IRQHandler+0x470>)
 810351a:	4618      	mov	r0, r3
 810351c:	f7ff fbe0 	bl	8102ce0 <LL_ADC_GetMultiDMATransfer>
 8103520:	4603      	mov	r3, r0
 8103522:	2b00      	cmp	r3, #0
 8103524:	d00b      	beq.n	810353e <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 8103526:	2301      	movs	r3, #1
 8103528:	627b      	str	r3, [r7, #36]	; 0x24
 810352a:	e008      	b.n	810353e <HAL_ADC_IRQHandler+0x3f2>
        }
      }
      else
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 810352c:	687b      	ldr	r3, [r7, #4]
 810352e:	681b      	ldr	r3, [r3, #0]
 8103530:	68db      	ldr	r3, [r3, #12]
 8103532:	f003 0303 	and.w	r3, r3, #3
 8103536:	2b00      	cmp	r3, #0
 8103538:	d001      	beq.n	810353e <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 810353a:	2301      	movs	r3, #1
 810353c:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 810353e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8103540:	2b01      	cmp	r3, #1
 8103542:	d10e      	bne.n	8103562 <HAL_ADC_IRQHandler+0x416>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8103544:	687b      	ldr	r3, [r7, #4]
 8103546:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103548:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 810354c:	687b      	ldr	r3, [r7, #4]
 810354e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8103550:	687b      	ldr	r3, [r7, #4]
 8103552:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8103554:	f043 0202 	orr.w	r2, r3, #2
 8103558:	687b      	ldr	r3, [r7, #4]
 810355a:	659a      	str	r2, [r3, #88]	; 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 810355c:	6878      	ldr	r0, [r7, #4]
 810355e:	f000 f843 	bl	81035e8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8103562:	687b      	ldr	r3, [r7, #4]
 8103564:	681b      	ldr	r3, [r3, #0]
 8103566:	2210      	movs	r2, #16
 8103568:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 810356a:	69fb      	ldr	r3, [r7, #28]
 810356c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8103570:	2b00      	cmp	r3, #0
 8103572:	d018      	beq.n	81035a6 <HAL_ADC_IRQHandler+0x45a>
 8103574:	69bb      	ldr	r3, [r7, #24]
 8103576:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 810357a:	2b00      	cmp	r3, #0
 810357c:	d013      	beq.n	81035a6 <HAL_ADC_IRQHandler+0x45a>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 810357e:	687b      	ldr	r3, [r7, #4]
 8103580:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103582:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8103586:	687b      	ldr	r3, [r7, #4]
 8103588:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 810358a:	687b      	ldr	r3, [r7, #4]
 810358c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810358e:	f043 0208 	orr.w	r2, r3, #8
 8103592:	687b      	ldr	r3, [r7, #4]
 8103594:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8103596:	687b      	ldr	r3, [r7, #4]
 8103598:	681b      	ldr	r3, [r3, #0]
 810359a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 810359e:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 81035a0:	6878      	ldr	r0, [r7, #4]
 81035a2:	f000 fcb5 	bl	8103f10 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 81035a6:	bf00      	nop
 81035a8:	3728      	adds	r7, #40	; 0x28
 81035aa:	46bd      	mov	sp, r7
 81035ac:	bd80      	pop	{r7, pc}
 81035ae:	bf00      	nop
 81035b0:	40022000 	.word	0x40022000
 81035b4:	40022100 	.word	0x40022100
 81035b8:	40022300 	.word	0x40022300
 81035bc:	58026300 	.word	0x58026300

081035c0 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 81035c0:	b480      	push	{r7}
 81035c2:	b083      	sub	sp, #12
 81035c4:	af00      	add	r7, sp, #0
 81035c6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 81035c8:	bf00      	nop
 81035ca:	370c      	adds	r7, #12
 81035cc:	46bd      	mov	sp, r7
 81035ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 81035d2:	4770      	bx	lr

081035d4 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 81035d4:	b480      	push	{r7}
 81035d6:	b083      	sub	sp, #12
 81035d8:	af00      	add	r7, sp, #0
 81035da:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 81035dc:	bf00      	nop
 81035de:	370c      	adds	r7, #12
 81035e0:	46bd      	mov	sp, r7
 81035e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81035e6:	4770      	bx	lr

081035e8 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 81035e8:	b480      	push	{r7}
 81035ea:	b083      	sub	sp, #12
 81035ec:	af00      	add	r7, sp, #0
 81035ee:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 81035f0:	bf00      	nop
 81035f2:	370c      	adds	r7, #12
 81035f4:	46bd      	mov	sp, r7
 81035f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81035fa:	4770      	bx	lr

081035fc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 81035fc:	b590      	push	{r4, r7, lr}
 81035fe:	b0a1      	sub	sp, #132	; 0x84
 8103600:	af00      	add	r7, sp, #0
 8103602:	6078      	str	r0, [r7, #4]
 8103604:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8103606:	2300      	movs	r3, #0
 8103608:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 810360c:	2300      	movs	r3, #0
 810360e:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8103610:	683b      	ldr	r3, [r7, #0]
 8103612:	68db      	ldr	r3, [r3, #12]
 8103614:	4a9d      	ldr	r2, [pc, #628]	; (810388c <HAL_ADC_ConfigChannel+0x290>)
 8103616:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8103618:	687b      	ldr	r3, [r7, #4]
 810361a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 810361e:	2b01      	cmp	r3, #1
 8103620:	d101      	bne.n	8103626 <HAL_ADC_ConfigChannel+0x2a>
 8103622:	2302      	movs	r3, #2
 8103624:	e321      	b.n	8103c6a <HAL_ADC_ConfigChannel+0x66e>
 8103626:	687b      	ldr	r3, [r7, #4]
 8103628:	2201      	movs	r2, #1
 810362a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 810362e:	687b      	ldr	r3, [r7, #4]
 8103630:	681b      	ldr	r3, [r3, #0]
 8103632:	4618      	mov	r0, r3
 8103634:	f7ff fbc3 	bl	8102dbe <LL_ADC_REG_IsConversionOngoing>
 8103638:	4603      	mov	r3, r0
 810363a:	2b00      	cmp	r3, #0
 810363c:	f040 8306 	bne.w	8103c4c <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8103640:	683b      	ldr	r3, [r7, #0]
 8103642:	681b      	ldr	r3, [r3, #0]
 8103644:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8103648:	2b00      	cmp	r3, #0
 810364a:	d108      	bne.n	810365e <HAL_ADC_ConfigChannel+0x62>
 810364c:	683b      	ldr	r3, [r7, #0]
 810364e:	681b      	ldr	r3, [r3, #0]
 8103650:	0e9b      	lsrs	r3, r3, #26
 8103652:	f003 031f 	and.w	r3, r3, #31
 8103656:	2201      	movs	r2, #1
 8103658:	fa02 f303 	lsl.w	r3, r2, r3
 810365c:	e016      	b.n	810368c <HAL_ADC_ConfigChannel+0x90>
 810365e:	683b      	ldr	r3, [r7, #0]
 8103660:	681b      	ldr	r3, [r3, #0]
 8103662:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8103664:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8103666:	fa93 f3a3 	rbit	r3, r3
 810366a:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 810366c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 810366e:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8103670:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8103672:	2b00      	cmp	r3, #0
 8103674:	d101      	bne.n	810367a <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 8103676:	2320      	movs	r3, #32
 8103678:	e003      	b.n	8103682 <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 810367a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 810367c:	fab3 f383 	clz	r3, r3
 8103680:	b2db      	uxtb	r3, r3
 8103682:	f003 031f 	and.w	r3, r3, #31
 8103686:	2201      	movs	r2, #1
 8103688:	fa02 f303 	lsl.w	r3, r2, r3
 810368c:	687a      	ldr	r2, [r7, #4]
 810368e:	6812      	ldr	r2, [r2, #0]
 8103690:	69d1      	ldr	r1, [r2, #28]
 8103692:	687a      	ldr	r2, [r7, #4]
 8103694:	6812      	ldr	r2, [r2, #0]
 8103696:	430b      	orrs	r3, r1
 8103698:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 810369a:	687b      	ldr	r3, [r7, #4]
 810369c:	6818      	ldr	r0, [r3, #0]
 810369e:	683b      	ldr	r3, [r7, #0]
 81036a0:	6859      	ldr	r1, [r3, #4]
 81036a2:	683b      	ldr	r3, [r7, #0]
 81036a4:	681b      	ldr	r3, [r3, #0]
 81036a6:	461a      	mov	r2, r3
 81036a8:	f7ff fa7d 	bl	8102ba6 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 81036ac:	687b      	ldr	r3, [r7, #4]
 81036ae:	681b      	ldr	r3, [r3, #0]
 81036b0:	4618      	mov	r0, r3
 81036b2:	f7ff fb84 	bl	8102dbe <LL_ADC_REG_IsConversionOngoing>
 81036b6:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 81036b8:	687b      	ldr	r3, [r7, #4]
 81036ba:	681b      	ldr	r3, [r3, #0]
 81036bc:	4618      	mov	r0, r3
 81036be:	f7ff fb91 	bl	8102de4 <LL_ADC_INJ_IsConversionOngoing>
 81036c2:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 81036c4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 81036c6:	2b00      	cmp	r3, #0
 81036c8:	f040 80b3 	bne.w	8103832 <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 81036cc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 81036ce:	2b00      	cmp	r3, #0
 81036d0:	f040 80af 	bne.w	8103832 <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 81036d4:	687b      	ldr	r3, [r7, #4]
 81036d6:	6818      	ldr	r0, [r3, #0]
 81036d8:	683b      	ldr	r3, [r7, #0]
 81036da:	6819      	ldr	r1, [r3, #0]
 81036dc:	683b      	ldr	r3, [r7, #0]
 81036de:	689b      	ldr	r3, [r3, #8]
 81036e0:	461a      	mov	r2, r3
 81036e2:	f7ff fa9f 	bl	8102c24 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 81036e6:	4b6a      	ldr	r3, [pc, #424]	; (8103890 <HAL_ADC_ConfigChannel+0x294>)
 81036e8:	681b      	ldr	r3, [r3, #0]
 81036ea:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 81036ee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 81036f2:	d10b      	bne.n	810370c <HAL_ADC_ConfigChannel+0x110>
 81036f4:	683b      	ldr	r3, [r7, #0]
 81036f6:	695a      	ldr	r2, [r3, #20]
 81036f8:	687b      	ldr	r3, [r7, #4]
 81036fa:	681b      	ldr	r3, [r3, #0]
 81036fc:	68db      	ldr	r3, [r3, #12]
 81036fe:	089b      	lsrs	r3, r3, #2
 8103700:	f003 0307 	and.w	r3, r3, #7
 8103704:	005b      	lsls	r3, r3, #1
 8103706:	fa02 f303 	lsl.w	r3, r2, r3
 810370a:	e01d      	b.n	8103748 <HAL_ADC_ConfigChannel+0x14c>
 810370c:	687b      	ldr	r3, [r7, #4]
 810370e:	681b      	ldr	r3, [r3, #0]
 8103710:	68db      	ldr	r3, [r3, #12]
 8103712:	f003 0310 	and.w	r3, r3, #16
 8103716:	2b00      	cmp	r3, #0
 8103718:	d10b      	bne.n	8103732 <HAL_ADC_ConfigChannel+0x136>
 810371a:	683b      	ldr	r3, [r7, #0]
 810371c:	695a      	ldr	r2, [r3, #20]
 810371e:	687b      	ldr	r3, [r7, #4]
 8103720:	681b      	ldr	r3, [r3, #0]
 8103722:	68db      	ldr	r3, [r3, #12]
 8103724:	089b      	lsrs	r3, r3, #2
 8103726:	f003 0307 	and.w	r3, r3, #7
 810372a:	005b      	lsls	r3, r3, #1
 810372c:	fa02 f303 	lsl.w	r3, r2, r3
 8103730:	e00a      	b.n	8103748 <HAL_ADC_ConfigChannel+0x14c>
 8103732:	683b      	ldr	r3, [r7, #0]
 8103734:	695a      	ldr	r2, [r3, #20]
 8103736:	687b      	ldr	r3, [r7, #4]
 8103738:	681b      	ldr	r3, [r3, #0]
 810373a:	68db      	ldr	r3, [r3, #12]
 810373c:	089b      	lsrs	r3, r3, #2
 810373e:	f003 0304 	and.w	r3, r3, #4
 8103742:	005b      	lsls	r3, r3, #1
 8103744:	fa02 f303 	lsl.w	r3, r2, r3
 8103748:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 810374a:	683b      	ldr	r3, [r7, #0]
 810374c:	691b      	ldr	r3, [r3, #16]
 810374e:	2b04      	cmp	r3, #4
 8103750:	d027      	beq.n	81037a2 <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8103752:	687b      	ldr	r3, [r7, #4]
 8103754:	6818      	ldr	r0, [r3, #0]
 8103756:	683b      	ldr	r3, [r7, #0]
 8103758:	6919      	ldr	r1, [r3, #16]
 810375a:	683b      	ldr	r3, [r7, #0]
 810375c:	681a      	ldr	r2, [r3, #0]
 810375e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8103760:	f7ff f9ba 	bl	8102ad8 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8103764:	687b      	ldr	r3, [r7, #4]
 8103766:	6818      	ldr	r0, [r3, #0]
 8103768:	683b      	ldr	r3, [r7, #0]
 810376a:	6919      	ldr	r1, [r3, #16]
 810376c:	683b      	ldr	r3, [r7, #0]
 810376e:	7e5b      	ldrb	r3, [r3, #25]
 8103770:	2b01      	cmp	r3, #1
 8103772:	d102      	bne.n	810377a <HAL_ADC_ConfigChannel+0x17e>
 8103774:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8103778:	e000      	b.n	810377c <HAL_ADC_ConfigChannel+0x180>
 810377a:	2300      	movs	r3, #0
 810377c:	461a      	mov	r2, r3
 810377e:	f7ff f9e4 	bl	8102b4a <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8103782:	687b      	ldr	r3, [r7, #4]
 8103784:	6818      	ldr	r0, [r3, #0]
 8103786:	683b      	ldr	r3, [r7, #0]
 8103788:	6919      	ldr	r1, [r3, #16]
 810378a:	683b      	ldr	r3, [r7, #0]
 810378c:	7e1b      	ldrb	r3, [r3, #24]
 810378e:	2b01      	cmp	r3, #1
 8103790:	d102      	bne.n	8103798 <HAL_ADC_ConfigChannel+0x19c>
 8103792:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8103796:	e000      	b.n	810379a <HAL_ADC_ConfigChannel+0x19e>
 8103798:	2300      	movs	r3, #0
 810379a:	461a      	mov	r2, r3
 810379c:	f7ff f9bc 	bl	8102b18 <LL_ADC_SetDataRightShift>
 81037a0:	e047      	b.n	8103832 <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 81037a2:	687b      	ldr	r3, [r7, #4]
 81037a4:	681b      	ldr	r3, [r3, #0]
 81037a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 81037a8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 81037ac:	683b      	ldr	r3, [r7, #0]
 81037ae:	681b      	ldr	r3, [r3, #0]
 81037b0:	069b      	lsls	r3, r3, #26
 81037b2:	429a      	cmp	r2, r3
 81037b4:	d107      	bne.n	81037c6 <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 81037b6:	687b      	ldr	r3, [r7, #4]
 81037b8:	681b      	ldr	r3, [r3, #0]
 81037ba:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 81037bc:	687b      	ldr	r3, [r7, #4]
 81037be:	681b      	ldr	r3, [r3, #0]
 81037c0:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 81037c4:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 81037c6:	687b      	ldr	r3, [r7, #4]
 81037c8:	681b      	ldr	r3, [r3, #0]
 81037ca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 81037cc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 81037d0:	683b      	ldr	r3, [r7, #0]
 81037d2:	681b      	ldr	r3, [r3, #0]
 81037d4:	069b      	lsls	r3, r3, #26
 81037d6:	429a      	cmp	r2, r3
 81037d8:	d107      	bne.n	81037ea <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 81037da:	687b      	ldr	r3, [r7, #4]
 81037dc:	681b      	ldr	r3, [r3, #0]
 81037de:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 81037e0:	687b      	ldr	r3, [r7, #4]
 81037e2:	681b      	ldr	r3, [r3, #0]
 81037e4:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 81037e8:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 81037ea:	687b      	ldr	r3, [r7, #4]
 81037ec:	681b      	ldr	r3, [r3, #0]
 81037ee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 81037f0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 81037f4:	683b      	ldr	r3, [r7, #0]
 81037f6:	681b      	ldr	r3, [r3, #0]
 81037f8:	069b      	lsls	r3, r3, #26
 81037fa:	429a      	cmp	r2, r3
 81037fc:	d107      	bne.n	810380e <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 81037fe:	687b      	ldr	r3, [r7, #4]
 8103800:	681b      	ldr	r3, [r3, #0]
 8103802:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8103804:	687b      	ldr	r3, [r7, #4]
 8103806:	681b      	ldr	r3, [r3, #0]
 8103808:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 810380c:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 810380e:	687b      	ldr	r3, [r7, #4]
 8103810:	681b      	ldr	r3, [r3, #0]
 8103812:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8103814:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8103818:	683b      	ldr	r3, [r7, #0]
 810381a:	681b      	ldr	r3, [r3, #0]
 810381c:	069b      	lsls	r3, r3, #26
 810381e:	429a      	cmp	r2, r3
 8103820:	d107      	bne.n	8103832 <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8103822:	687b      	ldr	r3, [r7, #4]
 8103824:	681b      	ldr	r3, [r3, #0]
 8103826:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8103828:	687b      	ldr	r3, [r7, #4]
 810382a:	681b      	ldr	r3, [r3, #0]
 810382c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8103830:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8103832:	687b      	ldr	r3, [r7, #4]
 8103834:	681b      	ldr	r3, [r3, #0]
 8103836:	4618      	mov	r0, r3
 8103838:	f7ff faae 	bl	8102d98 <LL_ADC_IsEnabled>
 810383c:	4603      	mov	r3, r0
 810383e:	2b00      	cmp	r3, #0
 8103840:	f040 820d 	bne.w	8103c5e <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8103844:	687b      	ldr	r3, [r7, #4]
 8103846:	6818      	ldr	r0, [r3, #0]
 8103848:	683b      	ldr	r3, [r7, #0]
 810384a:	6819      	ldr	r1, [r3, #0]
 810384c:	683b      	ldr	r3, [r7, #0]
 810384e:	68db      	ldr	r3, [r3, #12]
 8103850:	461a      	mov	r2, r3
 8103852:	f7ff fa13 	bl	8102c7c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8103856:	683b      	ldr	r3, [r7, #0]
 8103858:	68db      	ldr	r3, [r3, #12]
 810385a:	4a0c      	ldr	r2, [pc, #48]	; (810388c <HAL_ADC_ConfigChannel+0x290>)
 810385c:	4293      	cmp	r3, r2
 810385e:	f040 8133 	bne.w	8103ac8 <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8103862:	687b      	ldr	r3, [r7, #4]
 8103864:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8103866:	683b      	ldr	r3, [r7, #0]
 8103868:	681b      	ldr	r3, [r3, #0]
 810386a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 810386e:	2b00      	cmp	r3, #0
 8103870:	d110      	bne.n	8103894 <HAL_ADC_ConfigChannel+0x298>
 8103872:	683b      	ldr	r3, [r7, #0]
 8103874:	681b      	ldr	r3, [r3, #0]
 8103876:	0e9b      	lsrs	r3, r3, #26
 8103878:	3301      	adds	r3, #1
 810387a:	f003 031f 	and.w	r3, r3, #31
 810387e:	2b09      	cmp	r3, #9
 8103880:	bf94      	ite	ls
 8103882:	2301      	movls	r3, #1
 8103884:	2300      	movhi	r3, #0
 8103886:	b2db      	uxtb	r3, r3
 8103888:	e01e      	b.n	81038c8 <HAL_ADC_ConfigChannel+0x2cc>
 810388a:	bf00      	nop
 810388c:	47ff0000 	.word	0x47ff0000
 8103890:	5c001000 	.word	0x5c001000
 8103894:	683b      	ldr	r3, [r7, #0]
 8103896:	681b      	ldr	r3, [r3, #0]
 8103898:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 810389a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 810389c:	fa93 f3a3 	rbit	r3, r3
 81038a0:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 81038a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 81038a4:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 81038a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 81038a8:	2b00      	cmp	r3, #0
 81038aa:	d101      	bne.n	81038b0 <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 81038ac:	2320      	movs	r3, #32
 81038ae:	e003      	b.n	81038b8 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 81038b0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 81038b2:	fab3 f383 	clz	r3, r3
 81038b6:	b2db      	uxtb	r3, r3
 81038b8:	3301      	adds	r3, #1
 81038ba:	f003 031f 	and.w	r3, r3, #31
 81038be:	2b09      	cmp	r3, #9
 81038c0:	bf94      	ite	ls
 81038c2:	2301      	movls	r3, #1
 81038c4:	2300      	movhi	r3, #0
 81038c6:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 81038c8:	2b00      	cmp	r3, #0
 81038ca:	d079      	beq.n	81039c0 <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 81038cc:	683b      	ldr	r3, [r7, #0]
 81038ce:	681b      	ldr	r3, [r3, #0]
 81038d0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 81038d4:	2b00      	cmp	r3, #0
 81038d6:	d107      	bne.n	81038e8 <HAL_ADC_ConfigChannel+0x2ec>
 81038d8:	683b      	ldr	r3, [r7, #0]
 81038da:	681b      	ldr	r3, [r3, #0]
 81038dc:	0e9b      	lsrs	r3, r3, #26
 81038de:	3301      	adds	r3, #1
 81038e0:	069b      	lsls	r3, r3, #26
 81038e2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 81038e6:	e015      	b.n	8103914 <HAL_ADC_ConfigChannel+0x318>
 81038e8:	683b      	ldr	r3, [r7, #0]
 81038ea:	681b      	ldr	r3, [r3, #0]
 81038ec:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 81038ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 81038f0:	fa93 f3a3 	rbit	r3, r3
 81038f4:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 81038f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 81038f8:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 81038fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 81038fc:	2b00      	cmp	r3, #0
 81038fe:	d101      	bne.n	8103904 <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 8103900:	2320      	movs	r3, #32
 8103902:	e003      	b.n	810390c <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8103904:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8103906:	fab3 f383 	clz	r3, r3
 810390a:	b2db      	uxtb	r3, r3
 810390c:	3301      	adds	r3, #1
 810390e:	069b      	lsls	r3, r3, #26
 8103910:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8103914:	683b      	ldr	r3, [r7, #0]
 8103916:	681b      	ldr	r3, [r3, #0]
 8103918:	f3c3 0313 	ubfx	r3, r3, #0, #20
 810391c:	2b00      	cmp	r3, #0
 810391e:	d109      	bne.n	8103934 <HAL_ADC_ConfigChannel+0x338>
 8103920:	683b      	ldr	r3, [r7, #0]
 8103922:	681b      	ldr	r3, [r3, #0]
 8103924:	0e9b      	lsrs	r3, r3, #26
 8103926:	3301      	adds	r3, #1
 8103928:	f003 031f 	and.w	r3, r3, #31
 810392c:	2101      	movs	r1, #1
 810392e:	fa01 f303 	lsl.w	r3, r1, r3
 8103932:	e017      	b.n	8103964 <HAL_ADC_ConfigChannel+0x368>
 8103934:	683b      	ldr	r3, [r7, #0]
 8103936:	681b      	ldr	r3, [r3, #0]
 8103938:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 810393a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 810393c:	fa93 f3a3 	rbit	r3, r3
 8103940:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8103942:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8103944:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8103946:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8103948:	2b00      	cmp	r3, #0
 810394a:	d101      	bne.n	8103950 <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 810394c:	2320      	movs	r3, #32
 810394e:	e003      	b.n	8103958 <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 8103950:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8103952:	fab3 f383 	clz	r3, r3
 8103956:	b2db      	uxtb	r3, r3
 8103958:	3301      	adds	r3, #1
 810395a:	f003 031f 	and.w	r3, r3, #31
 810395e:	2101      	movs	r1, #1
 8103960:	fa01 f303 	lsl.w	r3, r1, r3
 8103964:	ea42 0103 	orr.w	r1, r2, r3
 8103968:	683b      	ldr	r3, [r7, #0]
 810396a:	681b      	ldr	r3, [r3, #0]
 810396c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8103970:	2b00      	cmp	r3, #0
 8103972:	d10a      	bne.n	810398a <HAL_ADC_ConfigChannel+0x38e>
 8103974:	683b      	ldr	r3, [r7, #0]
 8103976:	681b      	ldr	r3, [r3, #0]
 8103978:	0e9b      	lsrs	r3, r3, #26
 810397a:	3301      	adds	r3, #1
 810397c:	f003 021f 	and.w	r2, r3, #31
 8103980:	4613      	mov	r3, r2
 8103982:	005b      	lsls	r3, r3, #1
 8103984:	4413      	add	r3, r2
 8103986:	051b      	lsls	r3, r3, #20
 8103988:	e018      	b.n	81039bc <HAL_ADC_ConfigChannel+0x3c0>
 810398a:	683b      	ldr	r3, [r7, #0]
 810398c:	681b      	ldr	r3, [r3, #0]
 810398e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8103990:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8103992:	fa93 f3a3 	rbit	r3, r3
 8103996:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8103998:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810399a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 810399c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810399e:	2b00      	cmp	r3, #0
 81039a0:	d101      	bne.n	81039a6 <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 81039a2:	2320      	movs	r3, #32
 81039a4:	e003      	b.n	81039ae <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 81039a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81039a8:	fab3 f383 	clz	r3, r3
 81039ac:	b2db      	uxtb	r3, r3
 81039ae:	3301      	adds	r3, #1
 81039b0:	f003 021f 	and.w	r2, r3, #31
 81039b4:	4613      	mov	r3, r2
 81039b6:	005b      	lsls	r3, r3, #1
 81039b8:	4413      	add	r3, r2
 81039ba:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 81039bc:	430b      	orrs	r3, r1
 81039be:	e07e      	b.n	8103abe <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 81039c0:	683b      	ldr	r3, [r7, #0]
 81039c2:	681b      	ldr	r3, [r3, #0]
 81039c4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 81039c8:	2b00      	cmp	r3, #0
 81039ca:	d107      	bne.n	81039dc <HAL_ADC_ConfigChannel+0x3e0>
 81039cc:	683b      	ldr	r3, [r7, #0]
 81039ce:	681b      	ldr	r3, [r3, #0]
 81039d0:	0e9b      	lsrs	r3, r3, #26
 81039d2:	3301      	adds	r3, #1
 81039d4:	069b      	lsls	r3, r3, #26
 81039d6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 81039da:	e015      	b.n	8103a08 <HAL_ADC_ConfigChannel+0x40c>
 81039dc:	683b      	ldr	r3, [r7, #0]
 81039de:	681b      	ldr	r3, [r3, #0]
 81039e0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 81039e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81039e4:	fa93 f3a3 	rbit	r3, r3
 81039e8:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 81039ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81039ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 81039ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 81039f0:	2b00      	cmp	r3, #0
 81039f2:	d101      	bne.n	81039f8 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 81039f4:	2320      	movs	r3, #32
 81039f6:	e003      	b.n	8103a00 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 81039f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 81039fa:	fab3 f383 	clz	r3, r3
 81039fe:	b2db      	uxtb	r3, r3
 8103a00:	3301      	adds	r3, #1
 8103a02:	069b      	lsls	r3, r3, #26
 8103a04:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8103a08:	683b      	ldr	r3, [r7, #0]
 8103a0a:	681b      	ldr	r3, [r3, #0]
 8103a0c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8103a10:	2b00      	cmp	r3, #0
 8103a12:	d109      	bne.n	8103a28 <HAL_ADC_ConfigChannel+0x42c>
 8103a14:	683b      	ldr	r3, [r7, #0]
 8103a16:	681b      	ldr	r3, [r3, #0]
 8103a18:	0e9b      	lsrs	r3, r3, #26
 8103a1a:	3301      	adds	r3, #1
 8103a1c:	f003 031f 	and.w	r3, r3, #31
 8103a20:	2101      	movs	r1, #1
 8103a22:	fa01 f303 	lsl.w	r3, r1, r3
 8103a26:	e017      	b.n	8103a58 <HAL_ADC_ConfigChannel+0x45c>
 8103a28:	683b      	ldr	r3, [r7, #0]
 8103a2a:	681b      	ldr	r3, [r3, #0]
 8103a2c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8103a2e:	69fb      	ldr	r3, [r7, #28]
 8103a30:	fa93 f3a3 	rbit	r3, r3
 8103a34:	61bb      	str	r3, [r7, #24]
  return result;
 8103a36:	69bb      	ldr	r3, [r7, #24]
 8103a38:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8103a3a:	6a3b      	ldr	r3, [r7, #32]
 8103a3c:	2b00      	cmp	r3, #0
 8103a3e:	d101      	bne.n	8103a44 <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 8103a40:	2320      	movs	r3, #32
 8103a42:	e003      	b.n	8103a4c <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 8103a44:	6a3b      	ldr	r3, [r7, #32]
 8103a46:	fab3 f383 	clz	r3, r3
 8103a4a:	b2db      	uxtb	r3, r3
 8103a4c:	3301      	adds	r3, #1
 8103a4e:	f003 031f 	and.w	r3, r3, #31
 8103a52:	2101      	movs	r1, #1
 8103a54:	fa01 f303 	lsl.w	r3, r1, r3
 8103a58:	ea42 0103 	orr.w	r1, r2, r3
 8103a5c:	683b      	ldr	r3, [r7, #0]
 8103a5e:	681b      	ldr	r3, [r3, #0]
 8103a60:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8103a64:	2b00      	cmp	r3, #0
 8103a66:	d10d      	bne.n	8103a84 <HAL_ADC_ConfigChannel+0x488>
 8103a68:	683b      	ldr	r3, [r7, #0]
 8103a6a:	681b      	ldr	r3, [r3, #0]
 8103a6c:	0e9b      	lsrs	r3, r3, #26
 8103a6e:	3301      	adds	r3, #1
 8103a70:	f003 021f 	and.w	r2, r3, #31
 8103a74:	4613      	mov	r3, r2
 8103a76:	005b      	lsls	r3, r3, #1
 8103a78:	4413      	add	r3, r2
 8103a7a:	3b1e      	subs	r3, #30
 8103a7c:	051b      	lsls	r3, r3, #20
 8103a7e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8103a82:	e01b      	b.n	8103abc <HAL_ADC_ConfigChannel+0x4c0>
 8103a84:	683b      	ldr	r3, [r7, #0]
 8103a86:	681b      	ldr	r3, [r3, #0]
 8103a88:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8103a8a:	693b      	ldr	r3, [r7, #16]
 8103a8c:	fa93 f3a3 	rbit	r3, r3
 8103a90:	60fb      	str	r3, [r7, #12]
  return result;
 8103a92:	68fb      	ldr	r3, [r7, #12]
 8103a94:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8103a96:	697b      	ldr	r3, [r7, #20]
 8103a98:	2b00      	cmp	r3, #0
 8103a9a:	d101      	bne.n	8103aa0 <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 8103a9c:	2320      	movs	r3, #32
 8103a9e:	e003      	b.n	8103aa8 <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 8103aa0:	697b      	ldr	r3, [r7, #20]
 8103aa2:	fab3 f383 	clz	r3, r3
 8103aa6:	b2db      	uxtb	r3, r3
 8103aa8:	3301      	adds	r3, #1
 8103aaa:	f003 021f 	and.w	r2, r3, #31
 8103aae:	4613      	mov	r3, r2
 8103ab0:	005b      	lsls	r3, r3, #1
 8103ab2:	4413      	add	r3, r2
 8103ab4:	3b1e      	subs	r3, #30
 8103ab6:	051b      	lsls	r3, r3, #20
 8103ab8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8103abc:	430b      	orrs	r3, r1
 8103abe:	683a      	ldr	r2, [r7, #0]
 8103ac0:	6892      	ldr	r2, [r2, #8]
 8103ac2:	4619      	mov	r1, r3
 8103ac4:	f7ff f8ae 	bl	8102c24 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8103ac8:	683b      	ldr	r3, [r7, #0]
 8103aca:	681b      	ldr	r3, [r3, #0]
 8103acc:	2b00      	cmp	r3, #0
 8103ace:	f280 80c6 	bge.w	8103c5e <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8103ad2:	687b      	ldr	r3, [r7, #4]
 8103ad4:	681b      	ldr	r3, [r3, #0]
 8103ad6:	4a67      	ldr	r2, [pc, #412]	; (8103c74 <HAL_ADC_ConfigChannel+0x678>)
 8103ad8:	4293      	cmp	r3, r2
 8103ada:	d004      	beq.n	8103ae6 <HAL_ADC_ConfigChannel+0x4ea>
 8103adc:	687b      	ldr	r3, [r7, #4]
 8103ade:	681b      	ldr	r3, [r3, #0]
 8103ae0:	4a65      	ldr	r2, [pc, #404]	; (8103c78 <HAL_ADC_ConfigChannel+0x67c>)
 8103ae2:	4293      	cmp	r3, r2
 8103ae4:	d101      	bne.n	8103aea <HAL_ADC_ConfigChannel+0x4ee>
 8103ae6:	4b65      	ldr	r3, [pc, #404]	; (8103c7c <HAL_ADC_ConfigChannel+0x680>)
 8103ae8:	e000      	b.n	8103aec <HAL_ADC_ConfigChannel+0x4f0>
 8103aea:	4b65      	ldr	r3, [pc, #404]	; (8103c80 <HAL_ADC_ConfigChannel+0x684>)
 8103aec:	4618      	mov	r0, r3
 8103aee:	f7fe ffe5 	bl	8102abc <LL_ADC_GetCommonPathInternalCh>
 8103af2:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8103af4:	687b      	ldr	r3, [r7, #4]
 8103af6:	681b      	ldr	r3, [r3, #0]
 8103af8:	4a5e      	ldr	r2, [pc, #376]	; (8103c74 <HAL_ADC_ConfigChannel+0x678>)
 8103afa:	4293      	cmp	r3, r2
 8103afc:	d004      	beq.n	8103b08 <HAL_ADC_ConfigChannel+0x50c>
 8103afe:	687b      	ldr	r3, [r7, #4]
 8103b00:	681b      	ldr	r3, [r3, #0]
 8103b02:	4a5d      	ldr	r2, [pc, #372]	; (8103c78 <HAL_ADC_ConfigChannel+0x67c>)
 8103b04:	4293      	cmp	r3, r2
 8103b06:	d10e      	bne.n	8103b26 <HAL_ADC_ConfigChannel+0x52a>
 8103b08:	485a      	ldr	r0, [pc, #360]	; (8103c74 <HAL_ADC_ConfigChannel+0x678>)
 8103b0a:	f7ff f945 	bl	8102d98 <LL_ADC_IsEnabled>
 8103b0e:	4604      	mov	r4, r0
 8103b10:	4859      	ldr	r0, [pc, #356]	; (8103c78 <HAL_ADC_ConfigChannel+0x67c>)
 8103b12:	f7ff f941 	bl	8102d98 <LL_ADC_IsEnabled>
 8103b16:	4603      	mov	r3, r0
 8103b18:	4323      	orrs	r3, r4
 8103b1a:	2b00      	cmp	r3, #0
 8103b1c:	bf0c      	ite	eq
 8103b1e:	2301      	moveq	r3, #1
 8103b20:	2300      	movne	r3, #0
 8103b22:	b2db      	uxtb	r3, r3
 8103b24:	e008      	b.n	8103b38 <HAL_ADC_ConfigChannel+0x53c>
 8103b26:	4857      	ldr	r0, [pc, #348]	; (8103c84 <HAL_ADC_ConfigChannel+0x688>)
 8103b28:	f7ff f936 	bl	8102d98 <LL_ADC_IsEnabled>
 8103b2c:	4603      	mov	r3, r0
 8103b2e:	2b00      	cmp	r3, #0
 8103b30:	bf0c      	ite	eq
 8103b32:	2301      	moveq	r3, #1
 8103b34:	2300      	movne	r3, #0
 8103b36:	b2db      	uxtb	r3, r3
 8103b38:	2b00      	cmp	r3, #0
 8103b3a:	d07d      	beq.n	8103c38 <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8103b3c:	683b      	ldr	r3, [r7, #0]
 8103b3e:	681b      	ldr	r3, [r3, #0]
 8103b40:	4a51      	ldr	r2, [pc, #324]	; (8103c88 <HAL_ADC_ConfigChannel+0x68c>)
 8103b42:	4293      	cmp	r3, r2
 8103b44:	d130      	bne.n	8103ba8 <HAL_ADC_ConfigChannel+0x5ac>
 8103b46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8103b48:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8103b4c:	2b00      	cmp	r3, #0
 8103b4e:	d12b      	bne.n	8103ba8 <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8103b50:	687b      	ldr	r3, [r7, #4]
 8103b52:	681b      	ldr	r3, [r3, #0]
 8103b54:	4a4b      	ldr	r2, [pc, #300]	; (8103c84 <HAL_ADC_ConfigChannel+0x688>)
 8103b56:	4293      	cmp	r3, r2
 8103b58:	f040 8081 	bne.w	8103c5e <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8103b5c:	687b      	ldr	r3, [r7, #4]
 8103b5e:	681b      	ldr	r3, [r3, #0]
 8103b60:	4a44      	ldr	r2, [pc, #272]	; (8103c74 <HAL_ADC_ConfigChannel+0x678>)
 8103b62:	4293      	cmp	r3, r2
 8103b64:	d004      	beq.n	8103b70 <HAL_ADC_ConfigChannel+0x574>
 8103b66:	687b      	ldr	r3, [r7, #4]
 8103b68:	681b      	ldr	r3, [r3, #0]
 8103b6a:	4a43      	ldr	r2, [pc, #268]	; (8103c78 <HAL_ADC_ConfigChannel+0x67c>)
 8103b6c:	4293      	cmp	r3, r2
 8103b6e:	d101      	bne.n	8103b74 <HAL_ADC_ConfigChannel+0x578>
 8103b70:	4a42      	ldr	r2, [pc, #264]	; (8103c7c <HAL_ADC_ConfigChannel+0x680>)
 8103b72:	e000      	b.n	8103b76 <HAL_ADC_ConfigChannel+0x57a>
 8103b74:	4a42      	ldr	r2, [pc, #264]	; (8103c80 <HAL_ADC_ConfigChannel+0x684>)
 8103b76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8103b78:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8103b7c:	4619      	mov	r1, r3
 8103b7e:	4610      	mov	r0, r2
 8103b80:	f7fe ff89 	bl	8102a96 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8103b84:	4b41      	ldr	r3, [pc, #260]	; (8103c8c <HAL_ADC_ConfigChannel+0x690>)
 8103b86:	681b      	ldr	r3, [r3, #0]
 8103b88:	099b      	lsrs	r3, r3, #6
 8103b8a:	4a41      	ldr	r2, [pc, #260]	; (8103c90 <HAL_ADC_ConfigChannel+0x694>)
 8103b8c:	fba2 2303 	umull	r2, r3, r2, r3
 8103b90:	099b      	lsrs	r3, r3, #6
 8103b92:	3301      	adds	r3, #1
 8103b94:	005b      	lsls	r3, r3, #1
 8103b96:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8103b98:	e002      	b.n	8103ba0 <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 8103b9a:	68bb      	ldr	r3, [r7, #8]
 8103b9c:	3b01      	subs	r3, #1
 8103b9e:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8103ba0:	68bb      	ldr	r3, [r7, #8]
 8103ba2:	2b00      	cmp	r3, #0
 8103ba4:	d1f9      	bne.n	8103b9a <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8103ba6:	e05a      	b.n	8103c5e <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8103ba8:	683b      	ldr	r3, [r7, #0]
 8103baa:	681b      	ldr	r3, [r3, #0]
 8103bac:	4a39      	ldr	r2, [pc, #228]	; (8103c94 <HAL_ADC_ConfigChannel+0x698>)
 8103bae:	4293      	cmp	r3, r2
 8103bb0:	d11e      	bne.n	8103bf0 <HAL_ADC_ConfigChannel+0x5f4>
 8103bb2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8103bb4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8103bb8:	2b00      	cmp	r3, #0
 8103bba:	d119      	bne.n	8103bf0 <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8103bbc:	687b      	ldr	r3, [r7, #4]
 8103bbe:	681b      	ldr	r3, [r3, #0]
 8103bc0:	4a30      	ldr	r2, [pc, #192]	; (8103c84 <HAL_ADC_ConfigChannel+0x688>)
 8103bc2:	4293      	cmp	r3, r2
 8103bc4:	d14b      	bne.n	8103c5e <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8103bc6:	687b      	ldr	r3, [r7, #4]
 8103bc8:	681b      	ldr	r3, [r3, #0]
 8103bca:	4a2a      	ldr	r2, [pc, #168]	; (8103c74 <HAL_ADC_ConfigChannel+0x678>)
 8103bcc:	4293      	cmp	r3, r2
 8103bce:	d004      	beq.n	8103bda <HAL_ADC_ConfigChannel+0x5de>
 8103bd0:	687b      	ldr	r3, [r7, #4]
 8103bd2:	681b      	ldr	r3, [r3, #0]
 8103bd4:	4a28      	ldr	r2, [pc, #160]	; (8103c78 <HAL_ADC_ConfigChannel+0x67c>)
 8103bd6:	4293      	cmp	r3, r2
 8103bd8:	d101      	bne.n	8103bde <HAL_ADC_ConfigChannel+0x5e2>
 8103bda:	4a28      	ldr	r2, [pc, #160]	; (8103c7c <HAL_ADC_ConfigChannel+0x680>)
 8103bdc:	e000      	b.n	8103be0 <HAL_ADC_ConfigChannel+0x5e4>
 8103bde:	4a28      	ldr	r2, [pc, #160]	; (8103c80 <HAL_ADC_ConfigChannel+0x684>)
 8103be0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8103be2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8103be6:	4619      	mov	r1, r3
 8103be8:	4610      	mov	r0, r2
 8103bea:	f7fe ff54 	bl	8102a96 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8103bee:	e036      	b.n	8103c5e <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8103bf0:	683b      	ldr	r3, [r7, #0]
 8103bf2:	681b      	ldr	r3, [r3, #0]
 8103bf4:	4a28      	ldr	r2, [pc, #160]	; (8103c98 <HAL_ADC_ConfigChannel+0x69c>)
 8103bf6:	4293      	cmp	r3, r2
 8103bf8:	d131      	bne.n	8103c5e <HAL_ADC_ConfigChannel+0x662>
 8103bfa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8103bfc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8103c00:	2b00      	cmp	r3, #0
 8103c02:	d12c      	bne.n	8103c5e <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8103c04:	687b      	ldr	r3, [r7, #4]
 8103c06:	681b      	ldr	r3, [r3, #0]
 8103c08:	4a1e      	ldr	r2, [pc, #120]	; (8103c84 <HAL_ADC_ConfigChannel+0x688>)
 8103c0a:	4293      	cmp	r3, r2
 8103c0c:	d127      	bne.n	8103c5e <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8103c0e:	687b      	ldr	r3, [r7, #4]
 8103c10:	681b      	ldr	r3, [r3, #0]
 8103c12:	4a18      	ldr	r2, [pc, #96]	; (8103c74 <HAL_ADC_ConfigChannel+0x678>)
 8103c14:	4293      	cmp	r3, r2
 8103c16:	d004      	beq.n	8103c22 <HAL_ADC_ConfigChannel+0x626>
 8103c18:	687b      	ldr	r3, [r7, #4]
 8103c1a:	681b      	ldr	r3, [r3, #0]
 8103c1c:	4a16      	ldr	r2, [pc, #88]	; (8103c78 <HAL_ADC_ConfigChannel+0x67c>)
 8103c1e:	4293      	cmp	r3, r2
 8103c20:	d101      	bne.n	8103c26 <HAL_ADC_ConfigChannel+0x62a>
 8103c22:	4a16      	ldr	r2, [pc, #88]	; (8103c7c <HAL_ADC_ConfigChannel+0x680>)
 8103c24:	e000      	b.n	8103c28 <HAL_ADC_ConfigChannel+0x62c>
 8103c26:	4a16      	ldr	r2, [pc, #88]	; (8103c80 <HAL_ADC_ConfigChannel+0x684>)
 8103c28:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8103c2a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8103c2e:	4619      	mov	r1, r3
 8103c30:	4610      	mov	r0, r2
 8103c32:	f7fe ff30 	bl	8102a96 <LL_ADC_SetCommonPathInternalCh>
 8103c36:	e012      	b.n	8103c5e <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8103c38:	687b      	ldr	r3, [r7, #4]
 8103c3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103c3c:	f043 0220 	orr.w	r2, r3, #32
 8103c40:	687b      	ldr	r3, [r7, #4]
 8103c42:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8103c44:	2301      	movs	r3, #1
 8103c46:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8103c4a:	e008      	b.n	8103c5e <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8103c4c:	687b      	ldr	r3, [r7, #4]
 8103c4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103c50:	f043 0220 	orr.w	r2, r3, #32
 8103c54:	687b      	ldr	r3, [r7, #4]
 8103c56:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8103c58:	2301      	movs	r3, #1
 8103c5a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8103c5e:	687b      	ldr	r3, [r7, #4]
 8103c60:	2200      	movs	r2, #0
 8103c62:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8103c66:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8103c6a:	4618      	mov	r0, r3
 8103c6c:	3784      	adds	r7, #132	; 0x84
 8103c6e:	46bd      	mov	sp, r7
 8103c70:	bd90      	pop	{r4, r7, pc}
 8103c72:	bf00      	nop
 8103c74:	40022000 	.word	0x40022000
 8103c78:	40022100 	.word	0x40022100
 8103c7c:	40022300 	.word	0x40022300
 8103c80:	58026300 	.word	0x58026300
 8103c84:	58026000 	.word	0x58026000
 8103c88:	cb840000 	.word	0xcb840000
 8103c8c:	10000000 	.word	0x10000000
 8103c90:	053e2d63 	.word	0x053e2d63
 8103c94:	c7520000 	.word	0xc7520000
 8103c98:	cfb80000 	.word	0xcfb80000

08103c9c <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8103c9c:	b580      	push	{r7, lr}
 8103c9e:	b084      	sub	sp, #16
 8103ca0:	af00      	add	r7, sp, #0
 8103ca2:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8103ca4:	687b      	ldr	r3, [r7, #4]
 8103ca6:	681b      	ldr	r3, [r3, #0]
 8103ca8:	4a79      	ldr	r2, [pc, #484]	; (8103e90 <ADC_ConfigureBoostMode+0x1f4>)
 8103caa:	4293      	cmp	r3, r2
 8103cac:	d004      	beq.n	8103cb8 <ADC_ConfigureBoostMode+0x1c>
 8103cae:	687b      	ldr	r3, [r7, #4]
 8103cb0:	681b      	ldr	r3, [r3, #0]
 8103cb2:	4a78      	ldr	r2, [pc, #480]	; (8103e94 <ADC_ConfigureBoostMode+0x1f8>)
 8103cb4:	4293      	cmp	r3, r2
 8103cb6:	d109      	bne.n	8103ccc <ADC_ConfigureBoostMode+0x30>
 8103cb8:	4b77      	ldr	r3, [pc, #476]	; (8103e98 <ADC_ConfigureBoostMode+0x1fc>)
 8103cba:	689b      	ldr	r3, [r3, #8]
 8103cbc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8103cc0:	2b00      	cmp	r3, #0
 8103cc2:	bf14      	ite	ne
 8103cc4:	2301      	movne	r3, #1
 8103cc6:	2300      	moveq	r3, #0
 8103cc8:	b2db      	uxtb	r3, r3
 8103cca:	e008      	b.n	8103cde <ADC_ConfigureBoostMode+0x42>
 8103ccc:	4b73      	ldr	r3, [pc, #460]	; (8103e9c <ADC_ConfigureBoostMode+0x200>)
 8103cce:	689b      	ldr	r3, [r3, #8]
 8103cd0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8103cd4:	2b00      	cmp	r3, #0
 8103cd6:	bf14      	ite	ne
 8103cd8:	2301      	movne	r3, #1
 8103cda:	2300      	moveq	r3, #0
 8103cdc:	b2db      	uxtb	r3, r3
 8103cde:	2b00      	cmp	r3, #0
 8103ce0:	d01c      	beq.n	8103d1c <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8103ce2:	f005 fcd1 	bl	8109688 <HAL_RCC_GetHCLKFreq>
 8103ce6:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8103ce8:	687b      	ldr	r3, [r7, #4]
 8103cea:	685b      	ldr	r3, [r3, #4]
 8103cec:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8103cf0:	d010      	beq.n	8103d14 <ADC_ConfigureBoostMode+0x78>
 8103cf2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8103cf6:	d871      	bhi.n	8103ddc <ADC_ConfigureBoostMode+0x140>
 8103cf8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8103cfc:	d002      	beq.n	8103d04 <ADC_ConfigureBoostMode+0x68>
 8103cfe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8103d02:	d16b      	bne.n	8103ddc <ADC_ConfigureBoostMode+0x140>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8103d04:	687b      	ldr	r3, [r7, #4]
 8103d06:	685b      	ldr	r3, [r3, #4]
 8103d08:	0c1b      	lsrs	r3, r3, #16
 8103d0a:	68fa      	ldr	r2, [r7, #12]
 8103d0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8103d10:	60fb      	str	r3, [r7, #12]
        break;
 8103d12:	e066      	b.n	8103de2 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8103d14:	68fb      	ldr	r3, [r7, #12]
 8103d16:	089b      	lsrs	r3, r3, #2
 8103d18:	60fb      	str	r3, [r7, #12]
        break;
 8103d1a:	e062      	b.n	8103de2 <ADC_ConfigureBoostMode+0x146>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8103d1c:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8103d20:	f006 fc92 	bl	810a648 <HAL_RCCEx_GetPeriphCLKFreq>
 8103d24:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8103d26:	687b      	ldr	r3, [r7, #4]
 8103d28:	685b      	ldr	r3, [r3, #4]
 8103d2a:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8103d2e:	d051      	beq.n	8103dd4 <ADC_ConfigureBoostMode+0x138>
 8103d30:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8103d34:	d854      	bhi.n	8103de0 <ADC_ConfigureBoostMode+0x144>
 8103d36:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8103d3a:	d047      	beq.n	8103dcc <ADC_ConfigureBoostMode+0x130>
 8103d3c:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8103d40:	d84e      	bhi.n	8103de0 <ADC_ConfigureBoostMode+0x144>
 8103d42:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8103d46:	d03d      	beq.n	8103dc4 <ADC_ConfigureBoostMode+0x128>
 8103d48:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8103d4c:	d848      	bhi.n	8103de0 <ADC_ConfigureBoostMode+0x144>
 8103d4e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8103d52:	d033      	beq.n	8103dbc <ADC_ConfigureBoostMode+0x120>
 8103d54:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8103d58:	d842      	bhi.n	8103de0 <ADC_ConfigureBoostMode+0x144>
 8103d5a:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8103d5e:	d029      	beq.n	8103db4 <ADC_ConfigureBoostMode+0x118>
 8103d60:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8103d64:	d83c      	bhi.n	8103de0 <ADC_ConfigureBoostMode+0x144>
 8103d66:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8103d6a:	d01a      	beq.n	8103da2 <ADC_ConfigureBoostMode+0x106>
 8103d6c:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8103d70:	d836      	bhi.n	8103de0 <ADC_ConfigureBoostMode+0x144>
 8103d72:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8103d76:	d014      	beq.n	8103da2 <ADC_ConfigureBoostMode+0x106>
 8103d78:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8103d7c:	d830      	bhi.n	8103de0 <ADC_ConfigureBoostMode+0x144>
 8103d7e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8103d82:	d00e      	beq.n	8103da2 <ADC_ConfigureBoostMode+0x106>
 8103d84:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8103d88:	d82a      	bhi.n	8103de0 <ADC_ConfigureBoostMode+0x144>
 8103d8a:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8103d8e:	d008      	beq.n	8103da2 <ADC_ConfigureBoostMode+0x106>
 8103d90:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8103d94:	d824      	bhi.n	8103de0 <ADC_ConfigureBoostMode+0x144>
 8103d96:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8103d9a:	d002      	beq.n	8103da2 <ADC_ConfigureBoostMode+0x106>
 8103d9c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8103da0:	d11e      	bne.n	8103de0 <ADC_ConfigureBoostMode+0x144>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8103da2:	687b      	ldr	r3, [r7, #4]
 8103da4:	685b      	ldr	r3, [r3, #4]
 8103da6:	0c9b      	lsrs	r3, r3, #18
 8103da8:	005b      	lsls	r3, r3, #1
 8103daa:	68fa      	ldr	r2, [r7, #12]
 8103dac:	fbb2 f3f3 	udiv	r3, r2, r3
 8103db0:	60fb      	str	r3, [r7, #12]
        break;
 8103db2:	e016      	b.n	8103de2 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8103db4:	68fb      	ldr	r3, [r7, #12]
 8103db6:	091b      	lsrs	r3, r3, #4
 8103db8:	60fb      	str	r3, [r7, #12]
        break;
 8103dba:	e012      	b.n	8103de2 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8103dbc:	68fb      	ldr	r3, [r7, #12]
 8103dbe:	095b      	lsrs	r3, r3, #5
 8103dc0:	60fb      	str	r3, [r7, #12]
        break;
 8103dc2:	e00e      	b.n	8103de2 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8103dc4:	68fb      	ldr	r3, [r7, #12]
 8103dc6:	099b      	lsrs	r3, r3, #6
 8103dc8:	60fb      	str	r3, [r7, #12]
        break;
 8103dca:	e00a      	b.n	8103de2 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8103dcc:	68fb      	ldr	r3, [r7, #12]
 8103dce:	09db      	lsrs	r3, r3, #7
 8103dd0:	60fb      	str	r3, [r7, #12]
        break;
 8103dd2:	e006      	b.n	8103de2 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8103dd4:	68fb      	ldr	r3, [r7, #12]
 8103dd6:	0a1b      	lsrs	r3, r3, #8
 8103dd8:	60fb      	str	r3, [r7, #12]
        break;
 8103dda:	e002      	b.n	8103de2 <ADC_ConfigureBoostMode+0x146>
        break;
 8103ddc:	bf00      	nop
 8103dde:	e000      	b.n	8103de2 <ADC_ConfigureBoostMode+0x146>
      default:
        break;
 8103de0:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8103de2:	f7fe fe39 	bl	8102a58 <HAL_GetREVID>
 8103de6:	4603      	mov	r3, r0
 8103de8:	f241 0203 	movw	r2, #4099	; 0x1003
 8103dec:	4293      	cmp	r3, r2
 8103dee:	d815      	bhi.n	8103e1c <ADC_ConfigureBoostMode+0x180>
  {
    if (freq > 20000000UL)
 8103df0:	68fb      	ldr	r3, [r7, #12]
 8103df2:	4a2b      	ldr	r2, [pc, #172]	; (8103ea0 <ADC_ConfigureBoostMode+0x204>)
 8103df4:	4293      	cmp	r3, r2
 8103df6:	d908      	bls.n	8103e0a <ADC_ConfigureBoostMode+0x16e>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8103df8:	687b      	ldr	r3, [r7, #4]
 8103dfa:	681b      	ldr	r3, [r3, #0]
 8103dfc:	689a      	ldr	r2, [r3, #8]
 8103dfe:	687b      	ldr	r3, [r7, #4]
 8103e00:	681b      	ldr	r3, [r3, #0]
 8103e02:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8103e06:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8103e08:	e03e      	b.n	8103e88 <ADC_ConfigureBoostMode+0x1ec>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8103e0a:	687b      	ldr	r3, [r7, #4]
 8103e0c:	681b      	ldr	r3, [r3, #0]
 8103e0e:	689a      	ldr	r2, [r3, #8]
 8103e10:	687b      	ldr	r3, [r7, #4]
 8103e12:	681b      	ldr	r3, [r3, #0]
 8103e14:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8103e18:	609a      	str	r2, [r3, #8]
}
 8103e1a:	e035      	b.n	8103e88 <ADC_ConfigureBoostMode+0x1ec>
    freq /= 2U; /* divider by 2 for Rev.V */
 8103e1c:	68fb      	ldr	r3, [r7, #12]
 8103e1e:	085b      	lsrs	r3, r3, #1
 8103e20:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8103e22:	68fb      	ldr	r3, [r7, #12]
 8103e24:	4a1f      	ldr	r2, [pc, #124]	; (8103ea4 <ADC_ConfigureBoostMode+0x208>)
 8103e26:	4293      	cmp	r3, r2
 8103e28:	d808      	bhi.n	8103e3c <ADC_ConfigureBoostMode+0x1a0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8103e2a:	687b      	ldr	r3, [r7, #4]
 8103e2c:	681b      	ldr	r3, [r3, #0]
 8103e2e:	689a      	ldr	r2, [r3, #8]
 8103e30:	687b      	ldr	r3, [r7, #4]
 8103e32:	681b      	ldr	r3, [r3, #0]
 8103e34:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8103e38:	609a      	str	r2, [r3, #8]
}
 8103e3a:	e025      	b.n	8103e88 <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 12500000UL)
 8103e3c:	68fb      	ldr	r3, [r7, #12]
 8103e3e:	4a1a      	ldr	r2, [pc, #104]	; (8103ea8 <ADC_ConfigureBoostMode+0x20c>)
 8103e40:	4293      	cmp	r3, r2
 8103e42:	d80a      	bhi.n	8103e5a <ADC_ConfigureBoostMode+0x1be>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8103e44:	687b      	ldr	r3, [r7, #4]
 8103e46:	681b      	ldr	r3, [r3, #0]
 8103e48:	689b      	ldr	r3, [r3, #8]
 8103e4a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8103e4e:	687b      	ldr	r3, [r7, #4]
 8103e50:	681b      	ldr	r3, [r3, #0]
 8103e52:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8103e56:	609a      	str	r2, [r3, #8]
}
 8103e58:	e016      	b.n	8103e88 <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 25000000UL)
 8103e5a:	68fb      	ldr	r3, [r7, #12]
 8103e5c:	4a13      	ldr	r2, [pc, #76]	; (8103eac <ADC_ConfigureBoostMode+0x210>)
 8103e5e:	4293      	cmp	r3, r2
 8103e60:	d80a      	bhi.n	8103e78 <ADC_ConfigureBoostMode+0x1dc>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8103e62:	687b      	ldr	r3, [r7, #4]
 8103e64:	681b      	ldr	r3, [r3, #0]
 8103e66:	689b      	ldr	r3, [r3, #8]
 8103e68:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8103e6c:	687b      	ldr	r3, [r7, #4]
 8103e6e:	681b      	ldr	r3, [r3, #0]
 8103e70:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8103e74:	609a      	str	r2, [r3, #8]
}
 8103e76:	e007      	b.n	8103e88 <ADC_ConfigureBoostMode+0x1ec>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8103e78:	687b      	ldr	r3, [r7, #4]
 8103e7a:	681b      	ldr	r3, [r3, #0]
 8103e7c:	689a      	ldr	r2, [r3, #8]
 8103e7e:	687b      	ldr	r3, [r7, #4]
 8103e80:	681b      	ldr	r3, [r3, #0]
 8103e82:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8103e86:	609a      	str	r2, [r3, #8]
}
 8103e88:	bf00      	nop
 8103e8a:	3710      	adds	r7, #16
 8103e8c:	46bd      	mov	sp, r7
 8103e8e:	bd80      	pop	{r7, pc}
 8103e90:	40022000 	.word	0x40022000
 8103e94:	40022100 	.word	0x40022100
 8103e98:	40022300 	.word	0x40022300
 8103e9c:	58026300 	.word	0x58026300
 8103ea0:	01312d00 	.word	0x01312d00
 8103ea4:	005f5e10 	.word	0x005f5e10
 8103ea8:	00bebc20 	.word	0x00bebc20
 8103eac:	017d7840 	.word	0x017d7840

08103eb0 <LL_ADC_IsEnabled>:
{
 8103eb0:	b480      	push	{r7}
 8103eb2:	b083      	sub	sp, #12
 8103eb4:	af00      	add	r7, sp, #0
 8103eb6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8103eb8:	687b      	ldr	r3, [r7, #4]
 8103eba:	689b      	ldr	r3, [r3, #8]
 8103ebc:	f003 0301 	and.w	r3, r3, #1
 8103ec0:	2b01      	cmp	r3, #1
 8103ec2:	d101      	bne.n	8103ec8 <LL_ADC_IsEnabled+0x18>
 8103ec4:	2301      	movs	r3, #1
 8103ec6:	e000      	b.n	8103eca <LL_ADC_IsEnabled+0x1a>
 8103ec8:	2300      	movs	r3, #0
}
 8103eca:	4618      	mov	r0, r3
 8103ecc:	370c      	adds	r7, #12
 8103ece:	46bd      	mov	sp, r7
 8103ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103ed4:	4770      	bx	lr

08103ed6 <LL_ADC_REG_IsConversionOngoing>:
{
 8103ed6:	b480      	push	{r7}
 8103ed8:	b083      	sub	sp, #12
 8103eda:	af00      	add	r7, sp, #0
 8103edc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8103ede:	687b      	ldr	r3, [r7, #4]
 8103ee0:	689b      	ldr	r3, [r3, #8]
 8103ee2:	f003 0304 	and.w	r3, r3, #4
 8103ee6:	2b04      	cmp	r3, #4
 8103ee8:	d101      	bne.n	8103eee <LL_ADC_REG_IsConversionOngoing+0x18>
 8103eea:	2301      	movs	r3, #1
 8103eec:	e000      	b.n	8103ef0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8103eee:	2300      	movs	r3, #0
}
 8103ef0:	4618      	mov	r0, r3
 8103ef2:	370c      	adds	r7, #12
 8103ef4:	46bd      	mov	sp, r7
 8103ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103efa:	4770      	bx	lr

08103efc <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8103efc:	b480      	push	{r7}
 8103efe:	b083      	sub	sp, #12
 8103f00:	af00      	add	r7, sp, #0
 8103f02:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8103f04:	bf00      	nop
 8103f06:	370c      	adds	r7, #12
 8103f08:	46bd      	mov	sp, r7
 8103f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103f0e:	4770      	bx	lr

08103f10 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8103f10:	b480      	push	{r7}
 8103f12:	b083      	sub	sp, #12
 8103f14:	af00      	add	r7, sp, #0
 8103f16:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8103f18:	bf00      	nop
 8103f1a:	370c      	adds	r7, #12
 8103f1c:	46bd      	mov	sp, r7
 8103f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103f22:	4770      	bx	lr

08103f24 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8103f24:	b480      	push	{r7}
 8103f26:	b083      	sub	sp, #12
 8103f28:	af00      	add	r7, sp, #0
 8103f2a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8103f2c:	bf00      	nop
 8103f2e:	370c      	adds	r7, #12
 8103f30:	46bd      	mov	sp, r7
 8103f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103f36:	4770      	bx	lr

08103f38 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8103f38:	b480      	push	{r7}
 8103f3a:	b083      	sub	sp, #12
 8103f3c:	af00      	add	r7, sp, #0
 8103f3e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8103f40:	bf00      	nop
 8103f42:	370c      	adds	r7, #12
 8103f44:	46bd      	mov	sp, r7
 8103f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103f4a:	4770      	bx	lr

08103f4c <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8103f4c:	b480      	push	{r7}
 8103f4e:	b083      	sub	sp, #12
 8103f50:	af00      	add	r7, sp, #0
 8103f52:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8103f54:	bf00      	nop
 8103f56:	370c      	adds	r7, #12
 8103f58:	46bd      	mov	sp, r7
 8103f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103f5e:	4770      	bx	lr

08103f60 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8103f60:	b590      	push	{r4, r7, lr}
 8103f62:	b09f      	sub	sp, #124	; 0x7c
 8103f64:	af00      	add	r7, sp, #0
 8103f66:	6078      	str	r0, [r7, #4]
 8103f68:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8103f6a:	2300      	movs	r3, #0
 8103f6c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8103f70:	687b      	ldr	r3, [r7, #4]
 8103f72:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8103f76:	2b01      	cmp	r3, #1
 8103f78:	d101      	bne.n	8103f7e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8103f7a:	2302      	movs	r3, #2
 8103f7c:	e0c4      	b.n	8104108 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
 8103f7e:	687b      	ldr	r3, [r7, #4]
 8103f80:	2201      	movs	r2, #1
 8103f82:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8103f86:	2300      	movs	r3, #0
 8103f88:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8103f8a:	2300      	movs	r3, #0
 8103f8c:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8103f8e:	687b      	ldr	r3, [r7, #4]
 8103f90:	681b      	ldr	r3, [r3, #0]
 8103f92:	4a5f      	ldr	r2, [pc, #380]	; (8104110 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8103f94:	4293      	cmp	r3, r2
 8103f96:	d102      	bne.n	8103f9e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8103f98:	4b5e      	ldr	r3, [pc, #376]	; (8104114 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8103f9a:	60bb      	str	r3, [r7, #8]
 8103f9c:	e001      	b.n	8103fa2 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8103f9e:	2300      	movs	r3, #0
 8103fa0:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8103fa2:	68bb      	ldr	r3, [r7, #8]
 8103fa4:	2b00      	cmp	r3, #0
 8103fa6:	d10b      	bne.n	8103fc0 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8103fa8:	687b      	ldr	r3, [r7, #4]
 8103faa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103fac:	f043 0220 	orr.w	r2, r3, #32
 8103fb0:	687b      	ldr	r3, [r7, #4]
 8103fb2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8103fb4:	687b      	ldr	r3, [r7, #4]
 8103fb6:	2200      	movs	r2, #0
 8103fb8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8103fbc:	2301      	movs	r3, #1
 8103fbe:	e0a3      	b.n	8104108 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8103fc0:	68bb      	ldr	r3, [r7, #8]
 8103fc2:	4618      	mov	r0, r3
 8103fc4:	f7ff ff87 	bl	8103ed6 <LL_ADC_REG_IsConversionOngoing>
 8103fc8:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8103fca:	687b      	ldr	r3, [r7, #4]
 8103fcc:	681b      	ldr	r3, [r3, #0]
 8103fce:	4618      	mov	r0, r3
 8103fd0:	f7ff ff81 	bl	8103ed6 <LL_ADC_REG_IsConversionOngoing>
 8103fd4:	4603      	mov	r3, r0
 8103fd6:	2b00      	cmp	r3, #0
 8103fd8:	f040 8085 	bne.w	81040e6 <HAL_ADCEx_MultiModeConfigChannel+0x186>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8103fdc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8103fde:	2b00      	cmp	r3, #0
 8103fe0:	f040 8081 	bne.w	81040e6 <HAL_ADCEx_MultiModeConfigChannel+0x186>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8103fe4:	687b      	ldr	r3, [r7, #4]
 8103fe6:	681b      	ldr	r3, [r3, #0]
 8103fe8:	4a49      	ldr	r2, [pc, #292]	; (8104110 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8103fea:	4293      	cmp	r3, r2
 8103fec:	d004      	beq.n	8103ff8 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8103fee:	687b      	ldr	r3, [r7, #4]
 8103ff0:	681b      	ldr	r3, [r3, #0]
 8103ff2:	4a48      	ldr	r2, [pc, #288]	; (8104114 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8103ff4:	4293      	cmp	r3, r2
 8103ff6:	d101      	bne.n	8103ffc <HAL_ADCEx_MultiModeConfigChannel+0x9c>
 8103ff8:	4b47      	ldr	r3, [pc, #284]	; (8104118 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8103ffa:	e000      	b.n	8103ffe <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 8103ffc:	4b47      	ldr	r3, [pc, #284]	; (810411c <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8103ffe:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8104000:	683b      	ldr	r3, [r7, #0]
 8104002:	681b      	ldr	r3, [r3, #0]
 8104004:	2b00      	cmp	r3, #0
 8104006:	d03b      	beq.n	8104080 <HAL_ADCEx_MultiModeConfigChannel+0x120>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8104008:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 810400a:	689b      	ldr	r3, [r3, #8]
 810400c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8104010:	683b      	ldr	r3, [r7, #0]
 8104012:	685b      	ldr	r3, [r3, #4]
 8104014:	431a      	orrs	r2, r3
 8104016:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8104018:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 810401a:	687b      	ldr	r3, [r7, #4]
 810401c:	681b      	ldr	r3, [r3, #0]
 810401e:	4a3c      	ldr	r2, [pc, #240]	; (8104110 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8104020:	4293      	cmp	r3, r2
 8104022:	d004      	beq.n	810402e <HAL_ADCEx_MultiModeConfigChannel+0xce>
 8104024:	687b      	ldr	r3, [r7, #4]
 8104026:	681b      	ldr	r3, [r3, #0]
 8104028:	4a3a      	ldr	r2, [pc, #232]	; (8104114 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 810402a:	4293      	cmp	r3, r2
 810402c:	d10e      	bne.n	810404c <HAL_ADCEx_MultiModeConfigChannel+0xec>
 810402e:	4838      	ldr	r0, [pc, #224]	; (8104110 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8104030:	f7ff ff3e 	bl	8103eb0 <LL_ADC_IsEnabled>
 8104034:	4604      	mov	r4, r0
 8104036:	4837      	ldr	r0, [pc, #220]	; (8104114 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8104038:	f7ff ff3a 	bl	8103eb0 <LL_ADC_IsEnabled>
 810403c:	4603      	mov	r3, r0
 810403e:	4323      	orrs	r3, r4
 8104040:	2b00      	cmp	r3, #0
 8104042:	bf0c      	ite	eq
 8104044:	2301      	moveq	r3, #1
 8104046:	2300      	movne	r3, #0
 8104048:	b2db      	uxtb	r3, r3
 810404a:	e008      	b.n	810405e <HAL_ADCEx_MultiModeConfigChannel+0xfe>
 810404c:	4834      	ldr	r0, [pc, #208]	; (8104120 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 810404e:	f7ff ff2f 	bl	8103eb0 <LL_ADC_IsEnabled>
 8104052:	4603      	mov	r3, r0
 8104054:	2b00      	cmp	r3, #0
 8104056:	bf0c      	ite	eq
 8104058:	2301      	moveq	r3, #1
 810405a:	2300      	movne	r3, #0
 810405c:	b2db      	uxtb	r3, r3
 810405e:	2b00      	cmp	r3, #0
 8104060:	d04b      	beq.n	81040fa <HAL_ADCEx_MultiModeConfigChannel+0x19a>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8104062:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8104064:	689b      	ldr	r3, [r3, #8]
 8104066:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 810406a:	f023 030f 	bic.w	r3, r3, #15
 810406e:	683a      	ldr	r2, [r7, #0]
 8104070:	6811      	ldr	r1, [r2, #0]
 8104072:	683a      	ldr	r2, [r7, #0]
 8104074:	6892      	ldr	r2, [r2, #8]
 8104076:	430a      	orrs	r2, r1
 8104078:	431a      	orrs	r2, r3
 810407a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 810407c:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 810407e:	e03c      	b.n	81040fa <HAL_ADCEx_MultiModeConfigChannel+0x19a>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8104080:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8104082:	689b      	ldr	r3, [r3, #8]
 8104084:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8104088:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 810408a:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 810408c:	687b      	ldr	r3, [r7, #4]
 810408e:	681b      	ldr	r3, [r3, #0]
 8104090:	4a1f      	ldr	r2, [pc, #124]	; (8104110 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8104092:	4293      	cmp	r3, r2
 8104094:	d004      	beq.n	81040a0 <HAL_ADCEx_MultiModeConfigChannel+0x140>
 8104096:	687b      	ldr	r3, [r7, #4]
 8104098:	681b      	ldr	r3, [r3, #0]
 810409a:	4a1e      	ldr	r2, [pc, #120]	; (8104114 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 810409c:	4293      	cmp	r3, r2
 810409e:	d10e      	bne.n	81040be <HAL_ADCEx_MultiModeConfigChannel+0x15e>
 81040a0:	481b      	ldr	r0, [pc, #108]	; (8104110 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 81040a2:	f7ff ff05 	bl	8103eb0 <LL_ADC_IsEnabled>
 81040a6:	4604      	mov	r4, r0
 81040a8:	481a      	ldr	r0, [pc, #104]	; (8104114 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 81040aa:	f7ff ff01 	bl	8103eb0 <LL_ADC_IsEnabled>
 81040ae:	4603      	mov	r3, r0
 81040b0:	4323      	orrs	r3, r4
 81040b2:	2b00      	cmp	r3, #0
 81040b4:	bf0c      	ite	eq
 81040b6:	2301      	moveq	r3, #1
 81040b8:	2300      	movne	r3, #0
 81040ba:	b2db      	uxtb	r3, r3
 81040bc:	e008      	b.n	81040d0 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 81040be:	4818      	ldr	r0, [pc, #96]	; (8104120 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 81040c0:	f7ff fef6 	bl	8103eb0 <LL_ADC_IsEnabled>
 81040c4:	4603      	mov	r3, r0
 81040c6:	2b00      	cmp	r3, #0
 81040c8:	bf0c      	ite	eq
 81040ca:	2301      	moveq	r3, #1
 81040cc:	2300      	movne	r3, #0
 81040ce:	b2db      	uxtb	r3, r3
 81040d0:	2b00      	cmp	r3, #0
 81040d2:	d012      	beq.n	81040fa <HAL_ADCEx_MultiModeConfigChannel+0x19a>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 81040d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 81040d6:	689b      	ldr	r3, [r3, #8]
 81040d8:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 81040dc:	f023 030f 	bic.w	r3, r3, #15
 81040e0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 81040e2:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 81040e4:	e009      	b.n	81040fa <HAL_ADCEx_MultiModeConfigChannel+0x19a>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 81040e6:	687b      	ldr	r3, [r7, #4]
 81040e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81040ea:	f043 0220 	orr.w	r2, r3, #32
 81040ee:	687b      	ldr	r3, [r7, #4]
 81040f0:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 81040f2:	2301      	movs	r3, #1
 81040f4:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 81040f8:	e000      	b.n	81040fc <HAL_ADCEx_MultiModeConfigChannel+0x19c>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 81040fa:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 81040fc:	687b      	ldr	r3, [r7, #4]
 81040fe:	2200      	movs	r2, #0
 8104100:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8104104:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8104108:	4618      	mov	r0, r3
 810410a:	377c      	adds	r7, #124	; 0x7c
 810410c:	46bd      	mov	sp, r7
 810410e:	bd90      	pop	{r4, r7, pc}
 8104110:	40022000 	.word	0x40022000
 8104114:	40022100 	.word	0x40022100
 8104118:	40022300 	.word	0x40022300
 810411c:	58026300 	.word	0x58026300
 8104120:	58026000 	.word	0x58026000

08104124 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8104124:	b480      	push	{r7}
 8104126:	b085      	sub	sp, #20
 8104128:	af00      	add	r7, sp, #0
 810412a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 810412c:	687b      	ldr	r3, [r7, #4]
 810412e:	f003 0307 	and.w	r3, r3, #7
 8104132:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8104134:	4b0c      	ldr	r3, [pc, #48]	; (8104168 <__NVIC_SetPriorityGrouping+0x44>)
 8104136:	68db      	ldr	r3, [r3, #12]
 8104138:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 810413a:	68ba      	ldr	r2, [r7, #8]
 810413c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8104140:	4013      	ands	r3, r2
 8104142:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8104144:	68fb      	ldr	r3, [r7, #12]
 8104146:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8104148:	68bb      	ldr	r3, [r7, #8]
 810414a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 810414c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8104150:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8104154:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8104156:	4a04      	ldr	r2, [pc, #16]	; (8104168 <__NVIC_SetPriorityGrouping+0x44>)
 8104158:	68bb      	ldr	r3, [r7, #8]
 810415a:	60d3      	str	r3, [r2, #12]
}
 810415c:	bf00      	nop
 810415e:	3714      	adds	r7, #20
 8104160:	46bd      	mov	sp, r7
 8104162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104166:	4770      	bx	lr
 8104168:	e000ed00 	.word	0xe000ed00

0810416c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 810416c:	b480      	push	{r7}
 810416e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8104170:	4b04      	ldr	r3, [pc, #16]	; (8104184 <__NVIC_GetPriorityGrouping+0x18>)
 8104172:	68db      	ldr	r3, [r3, #12]
 8104174:	0a1b      	lsrs	r3, r3, #8
 8104176:	f003 0307 	and.w	r3, r3, #7
}
 810417a:	4618      	mov	r0, r3
 810417c:	46bd      	mov	sp, r7
 810417e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104182:	4770      	bx	lr
 8104184:	e000ed00 	.word	0xe000ed00

08104188 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8104188:	b480      	push	{r7}
 810418a:	b083      	sub	sp, #12
 810418c:	af00      	add	r7, sp, #0
 810418e:	4603      	mov	r3, r0
 8104190:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8104192:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8104196:	2b00      	cmp	r3, #0
 8104198:	db0b      	blt.n	81041b2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 810419a:	88fb      	ldrh	r3, [r7, #6]
 810419c:	f003 021f 	and.w	r2, r3, #31
 81041a0:	4907      	ldr	r1, [pc, #28]	; (81041c0 <__NVIC_EnableIRQ+0x38>)
 81041a2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81041a6:	095b      	lsrs	r3, r3, #5
 81041a8:	2001      	movs	r0, #1
 81041aa:	fa00 f202 	lsl.w	r2, r0, r2
 81041ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 81041b2:	bf00      	nop
 81041b4:	370c      	adds	r7, #12
 81041b6:	46bd      	mov	sp, r7
 81041b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81041bc:	4770      	bx	lr
 81041be:	bf00      	nop
 81041c0:	e000e100 	.word	0xe000e100

081041c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 81041c4:	b480      	push	{r7}
 81041c6:	b083      	sub	sp, #12
 81041c8:	af00      	add	r7, sp, #0
 81041ca:	4603      	mov	r3, r0
 81041cc:	6039      	str	r1, [r7, #0]
 81041ce:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 81041d0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81041d4:	2b00      	cmp	r3, #0
 81041d6:	db0a      	blt.n	81041ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 81041d8:	683b      	ldr	r3, [r7, #0]
 81041da:	b2da      	uxtb	r2, r3
 81041dc:	490c      	ldr	r1, [pc, #48]	; (8104210 <__NVIC_SetPriority+0x4c>)
 81041de:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81041e2:	0112      	lsls	r2, r2, #4
 81041e4:	b2d2      	uxtb	r2, r2
 81041e6:	440b      	add	r3, r1
 81041e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 81041ec:	e00a      	b.n	8104204 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 81041ee:	683b      	ldr	r3, [r7, #0]
 81041f0:	b2da      	uxtb	r2, r3
 81041f2:	4908      	ldr	r1, [pc, #32]	; (8104214 <__NVIC_SetPriority+0x50>)
 81041f4:	88fb      	ldrh	r3, [r7, #6]
 81041f6:	f003 030f 	and.w	r3, r3, #15
 81041fa:	3b04      	subs	r3, #4
 81041fc:	0112      	lsls	r2, r2, #4
 81041fe:	b2d2      	uxtb	r2, r2
 8104200:	440b      	add	r3, r1
 8104202:	761a      	strb	r2, [r3, #24]
}
 8104204:	bf00      	nop
 8104206:	370c      	adds	r7, #12
 8104208:	46bd      	mov	sp, r7
 810420a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810420e:	4770      	bx	lr
 8104210:	e000e100 	.word	0xe000e100
 8104214:	e000ed00 	.word	0xe000ed00

08104218 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8104218:	b480      	push	{r7}
 810421a:	b089      	sub	sp, #36	; 0x24
 810421c:	af00      	add	r7, sp, #0
 810421e:	60f8      	str	r0, [r7, #12]
 8104220:	60b9      	str	r1, [r7, #8]
 8104222:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8104224:	68fb      	ldr	r3, [r7, #12]
 8104226:	f003 0307 	and.w	r3, r3, #7
 810422a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 810422c:	69fb      	ldr	r3, [r7, #28]
 810422e:	f1c3 0307 	rsb	r3, r3, #7
 8104232:	2b04      	cmp	r3, #4
 8104234:	bf28      	it	cs
 8104236:	2304      	movcs	r3, #4
 8104238:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 810423a:	69fb      	ldr	r3, [r7, #28]
 810423c:	3304      	adds	r3, #4
 810423e:	2b06      	cmp	r3, #6
 8104240:	d902      	bls.n	8104248 <NVIC_EncodePriority+0x30>
 8104242:	69fb      	ldr	r3, [r7, #28]
 8104244:	3b03      	subs	r3, #3
 8104246:	e000      	b.n	810424a <NVIC_EncodePriority+0x32>
 8104248:	2300      	movs	r3, #0
 810424a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 810424c:	f04f 32ff 	mov.w	r2, #4294967295
 8104250:	69bb      	ldr	r3, [r7, #24]
 8104252:	fa02 f303 	lsl.w	r3, r2, r3
 8104256:	43da      	mvns	r2, r3
 8104258:	68bb      	ldr	r3, [r7, #8]
 810425a:	401a      	ands	r2, r3
 810425c:	697b      	ldr	r3, [r7, #20]
 810425e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8104260:	f04f 31ff 	mov.w	r1, #4294967295
 8104264:	697b      	ldr	r3, [r7, #20]
 8104266:	fa01 f303 	lsl.w	r3, r1, r3
 810426a:	43d9      	mvns	r1, r3
 810426c:	687b      	ldr	r3, [r7, #4]
 810426e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8104270:	4313      	orrs	r3, r2
         );
}
 8104272:	4618      	mov	r0, r3
 8104274:	3724      	adds	r7, #36	; 0x24
 8104276:	46bd      	mov	sp, r7
 8104278:	f85d 7b04 	ldr.w	r7, [sp], #4
 810427c:	4770      	bx	lr

0810427e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 810427e:	b580      	push	{r7, lr}
 8104280:	b082      	sub	sp, #8
 8104282:	af00      	add	r7, sp, #0
 8104284:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8104286:	6878      	ldr	r0, [r7, #4]
 8104288:	f7ff ff4c 	bl	8104124 <__NVIC_SetPriorityGrouping>
}
 810428c:	bf00      	nop
 810428e:	3708      	adds	r7, #8
 8104290:	46bd      	mov	sp, r7
 8104292:	bd80      	pop	{r7, pc}

08104294 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8104294:	b580      	push	{r7, lr}
 8104296:	b086      	sub	sp, #24
 8104298:	af00      	add	r7, sp, #0
 810429a:	4603      	mov	r3, r0
 810429c:	60b9      	str	r1, [r7, #8]
 810429e:	607a      	str	r2, [r7, #4]
 81042a0:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 81042a2:	f7ff ff63 	bl	810416c <__NVIC_GetPriorityGrouping>
 81042a6:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 81042a8:	687a      	ldr	r2, [r7, #4]
 81042aa:	68b9      	ldr	r1, [r7, #8]
 81042ac:	6978      	ldr	r0, [r7, #20]
 81042ae:	f7ff ffb3 	bl	8104218 <NVIC_EncodePriority>
 81042b2:	4602      	mov	r2, r0
 81042b4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 81042b8:	4611      	mov	r1, r2
 81042ba:	4618      	mov	r0, r3
 81042bc:	f7ff ff82 	bl	81041c4 <__NVIC_SetPriority>
}
 81042c0:	bf00      	nop
 81042c2:	3718      	adds	r7, #24
 81042c4:	46bd      	mov	sp, r7
 81042c6:	bd80      	pop	{r7, pc}

081042c8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 81042c8:	b580      	push	{r7, lr}
 81042ca:	b082      	sub	sp, #8
 81042cc:	af00      	add	r7, sp, #0
 81042ce:	4603      	mov	r3, r0
 81042d0:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 81042d2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81042d6:	4618      	mov	r0, r3
 81042d8:	f7ff ff56 	bl	8104188 <__NVIC_EnableIRQ>
}
 81042dc:	bf00      	nop
 81042de:	3708      	adds	r7, #8
 81042e0:	46bd      	mov	sp, r7
 81042e2:	bd80      	pop	{r7, pc}

081042e4 <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 81042e4:	b480      	push	{r7}
 81042e6:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 81042e8:	4b07      	ldr	r3, [pc, #28]	; (8104308 <HAL_GetCurrentCPUID+0x24>)
 81042ea:	681b      	ldr	r3, [r3, #0]
 81042ec:	091b      	lsrs	r3, r3, #4
 81042ee:	f003 030f 	and.w	r3, r3, #15
 81042f2:	2b07      	cmp	r3, #7
 81042f4:	d101      	bne.n	81042fa <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 81042f6:	2303      	movs	r3, #3
 81042f8:	e000      	b.n	81042fc <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 81042fa:	2301      	movs	r3, #1
  }
}
 81042fc:	4618      	mov	r0, r3
 81042fe:	46bd      	mov	sp, r7
 8104300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104304:	4770      	bx	lr
 8104306:	bf00      	nop
 8104308:	e000ed00 	.word	0xe000ed00

0810430c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 810430c:	b580      	push	{r7, lr}
 810430e:	b086      	sub	sp, #24
 8104310:	af00      	add	r7, sp, #0
 8104312:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8104314:	f7fe fb70 	bl	81029f8 <HAL_GetTick>
 8104318:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 810431a:	687b      	ldr	r3, [r7, #4]
 810431c:	2b00      	cmp	r3, #0
 810431e:	d101      	bne.n	8104324 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8104320:	2301      	movs	r3, #1
 8104322:	e314      	b.n	810494e <HAL_DMA_Init+0x642>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8104324:	687b      	ldr	r3, [r7, #4]
 8104326:	681b      	ldr	r3, [r3, #0]
 8104328:	4a66      	ldr	r2, [pc, #408]	; (81044c4 <HAL_DMA_Init+0x1b8>)
 810432a:	4293      	cmp	r3, r2
 810432c:	d04a      	beq.n	81043c4 <HAL_DMA_Init+0xb8>
 810432e:	687b      	ldr	r3, [r7, #4]
 8104330:	681b      	ldr	r3, [r3, #0]
 8104332:	4a65      	ldr	r2, [pc, #404]	; (81044c8 <HAL_DMA_Init+0x1bc>)
 8104334:	4293      	cmp	r3, r2
 8104336:	d045      	beq.n	81043c4 <HAL_DMA_Init+0xb8>
 8104338:	687b      	ldr	r3, [r7, #4]
 810433a:	681b      	ldr	r3, [r3, #0]
 810433c:	4a63      	ldr	r2, [pc, #396]	; (81044cc <HAL_DMA_Init+0x1c0>)
 810433e:	4293      	cmp	r3, r2
 8104340:	d040      	beq.n	81043c4 <HAL_DMA_Init+0xb8>
 8104342:	687b      	ldr	r3, [r7, #4]
 8104344:	681b      	ldr	r3, [r3, #0]
 8104346:	4a62      	ldr	r2, [pc, #392]	; (81044d0 <HAL_DMA_Init+0x1c4>)
 8104348:	4293      	cmp	r3, r2
 810434a:	d03b      	beq.n	81043c4 <HAL_DMA_Init+0xb8>
 810434c:	687b      	ldr	r3, [r7, #4]
 810434e:	681b      	ldr	r3, [r3, #0]
 8104350:	4a60      	ldr	r2, [pc, #384]	; (81044d4 <HAL_DMA_Init+0x1c8>)
 8104352:	4293      	cmp	r3, r2
 8104354:	d036      	beq.n	81043c4 <HAL_DMA_Init+0xb8>
 8104356:	687b      	ldr	r3, [r7, #4]
 8104358:	681b      	ldr	r3, [r3, #0]
 810435a:	4a5f      	ldr	r2, [pc, #380]	; (81044d8 <HAL_DMA_Init+0x1cc>)
 810435c:	4293      	cmp	r3, r2
 810435e:	d031      	beq.n	81043c4 <HAL_DMA_Init+0xb8>
 8104360:	687b      	ldr	r3, [r7, #4]
 8104362:	681b      	ldr	r3, [r3, #0]
 8104364:	4a5d      	ldr	r2, [pc, #372]	; (81044dc <HAL_DMA_Init+0x1d0>)
 8104366:	4293      	cmp	r3, r2
 8104368:	d02c      	beq.n	81043c4 <HAL_DMA_Init+0xb8>
 810436a:	687b      	ldr	r3, [r7, #4]
 810436c:	681b      	ldr	r3, [r3, #0]
 810436e:	4a5c      	ldr	r2, [pc, #368]	; (81044e0 <HAL_DMA_Init+0x1d4>)
 8104370:	4293      	cmp	r3, r2
 8104372:	d027      	beq.n	81043c4 <HAL_DMA_Init+0xb8>
 8104374:	687b      	ldr	r3, [r7, #4]
 8104376:	681b      	ldr	r3, [r3, #0]
 8104378:	4a5a      	ldr	r2, [pc, #360]	; (81044e4 <HAL_DMA_Init+0x1d8>)
 810437a:	4293      	cmp	r3, r2
 810437c:	d022      	beq.n	81043c4 <HAL_DMA_Init+0xb8>
 810437e:	687b      	ldr	r3, [r7, #4]
 8104380:	681b      	ldr	r3, [r3, #0]
 8104382:	4a59      	ldr	r2, [pc, #356]	; (81044e8 <HAL_DMA_Init+0x1dc>)
 8104384:	4293      	cmp	r3, r2
 8104386:	d01d      	beq.n	81043c4 <HAL_DMA_Init+0xb8>
 8104388:	687b      	ldr	r3, [r7, #4]
 810438a:	681b      	ldr	r3, [r3, #0]
 810438c:	4a57      	ldr	r2, [pc, #348]	; (81044ec <HAL_DMA_Init+0x1e0>)
 810438e:	4293      	cmp	r3, r2
 8104390:	d018      	beq.n	81043c4 <HAL_DMA_Init+0xb8>
 8104392:	687b      	ldr	r3, [r7, #4]
 8104394:	681b      	ldr	r3, [r3, #0]
 8104396:	4a56      	ldr	r2, [pc, #344]	; (81044f0 <HAL_DMA_Init+0x1e4>)
 8104398:	4293      	cmp	r3, r2
 810439a:	d013      	beq.n	81043c4 <HAL_DMA_Init+0xb8>
 810439c:	687b      	ldr	r3, [r7, #4]
 810439e:	681b      	ldr	r3, [r3, #0]
 81043a0:	4a54      	ldr	r2, [pc, #336]	; (81044f4 <HAL_DMA_Init+0x1e8>)
 81043a2:	4293      	cmp	r3, r2
 81043a4:	d00e      	beq.n	81043c4 <HAL_DMA_Init+0xb8>
 81043a6:	687b      	ldr	r3, [r7, #4]
 81043a8:	681b      	ldr	r3, [r3, #0]
 81043aa:	4a53      	ldr	r2, [pc, #332]	; (81044f8 <HAL_DMA_Init+0x1ec>)
 81043ac:	4293      	cmp	r3, r2
 81043ae:	d009      	beq.n	81043c4 <HAL_DMA_Init+0xb8>
 81043b0:	687b      	ldr	r3, [r7, #4]
 81043b2:	681b      	ldr	r3, [r3, #0]
 81043b4:	4a51      	ldr	r2, [pc, #324]	; (81044fc <HAL_DMA_Init+0x1f0>)
 81043b6:	4293      	cmp	r3, r2
 81043b8:	d004      	beq.n	81043c4 <HAL_DMA_Init+0xb8>
 81043ba:	687b      	ldr	r3, [r7, #4]
 81043bc:	681b      	ldr	r3, [r3, #0]
 81043be:	4a50      	ldr	r2, [pc, #320]	; (8104500 <HAL_DMA_Init+0x1f4>)
 81043c0:	4293      	cmp	r3, r2
 81043c2:	d101      	bne.n	81043c8 <HAL_DMA_Init+0xbc>
 81043c4:	2301      	movs	r3, #1
 81043c6:	e000      	b.n	81043ca <HAL_DMA_Init+0xbe>
 81043c8:	2300      	movs	r3, #0
 81043ca:	2b00      	cmp	r3, #0
 81043cc:	f000 813b 	beq.w	8104646 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 81043d0:	687b      	ldr	r3, [r7, #4]
 81043d2:	2200      	movs	r2, #0
 81043d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 81043d8:	687b      	ldr	r3, [r7, #4]
 81043da:	2202      	movs	r2, #2
 81043dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 81043e0:	687b      	ldr	r3, [r7, #4]
 81043e2:	681b      	ldr	r3, [r3, #0]
 81043e4:	4a37      	ldr	r2, [pc, #220]	; (81044c4 <HAL_DMA_Init+0x1b8>)
 81043e6:	4293      	cmp	r3, r2
 81043e8:	d04a      	beq.n	8104480 <HAL_DMA_Init+0x174>
 81043ea:	687b      	ldr	r3, [r7, #4]
 81043ec:	681b      	ldr	r3, [r3, #0]
 81043ee:	4a36      	ldr	r2, [pc, #216]	; (81044c8 <HAL_DMA_Init+0x1bc>)
 81043f0:	4293      	cmp	r3, r2
 81043f2:	d045      	beq.n	8104480 <HAL_DMA_Init+0x174>
 81043f4:	687b      	ldr	r3, [r7, #4]
 81043f6:	681b      	ldr	r3, [r3, #0]
 81043f8:	4a34      	ldr	r2, [pc, #208]	; (81044cc <HAL_DMA_Init+0x1c0>)
 81043fa:	4293      	cmp	r3, r2
 81043fc:	d040      	beq.n	8104480 <HAL_DMA_Init+0x174>
 81043fe:	687b      	ldr	r3, [r7, #4]
 8104400:	681b      	ldr	r3, [r3, #0]
 8104402:	4a33      	ldr	r2, [pc, #204]	; (81044d0 <HAL_DMA_Init+0x1c4>)
 8104404:	4293      	cmp	r3, r2
 8104406:	d03b      	beq.n	8104480 <HAL_DMA_Init+0x174>
 8104408:	687b      	ldr	r3, [r7, #4]
 810440a:	681b      	ldr	r3, [r3, #0]
 810440c:	4a31      	ldr	r2, [pc, #196]	; (81044d4 <HAL_DMA_Init+0x1c8>)
 810440e:	4293      	cmp	r3, r2
 8104410:	d036      	beq.n	8104480 <HAL_DMA_Init+0x174>
 8104412:	687b      	ldr	r3, [r7, #4]
 8104414:	681b      	ldr	r3, [r3, #0]
 8104416:	4a30      	ldr	r2, [pc, #192]	; (81044d8 <HAL_DMA_Init+0x1cc>)
 8104418:	4293      	cmp	r3, r2
 810441a:	d031      	beq.n	8104480 <HAL_DMA_Init+0x174>
 810441c:	687b      	ldr	r3, [r7, #4]
 810441e:	681b      	ldr	r3, [r3, #0]
 8104420:	4a2e      	ldr	r2, [pc, #184]	; (81044dc <HAL_DMA_Init+0x1d0>)
 8104422:	4293      	cmp	r3, r2
 8104424:	d02c      	beq.n	8104480 <HAL_DMA_Init+0x174>
 8104426:	687b      	ldr	r3, [r7, #4]
 8104428:	681b      	ldr	r3, [r3, #0]
 810442a:	4a2d      	ldr	r2, [pc, #180]	; (81044e0 <HAL_DMA_Init+0x1d4>)
 810442c:	4293      	cmp	r3, r2
 810442e:	d027      	beq.n	8104480 <HAL_DMA_Init+0x174>
 8104430:	687b      	ldr	r3, [r7, #4]
 8104432:	681b      	ldr	r3, [r3, #0]
 8104434:	4a2b      	ldr	r2, [pc, #172]	; (81044e4 <HAL_DMA_Init+0x1d8>)
 8104436:	4293      	cmp	r3, r2
 8104438:	d022      	beq.n	8104480 <HAL_DMA_Init+0x174>
 810443a:	687b      	ldr	r3, [r7, #4]
 810443c:	681b      	ldr	r3, [r3, #0]
 810443e:	4a2a      	ldr	r2, [pc, #168]	; (81044e8 <HAL_DMA_Init+0x1dc>)
 8104440:	4293      	cmp	r3, r2
 8104442:	d01d      	beq.n	8104480 <HAL_DMA_Init+0x174>
 8104444:	687b      	ldr	r3, [r7, #4]
 8104446:	681b      	ldr	r3, [r3, #0]
 8104448:	4a28      	ldr	r2, [pc, #160]	; (81044ec <HAL_DMA_Init+0x1e0>)
 810444a:	4293      	cmp	r3, r2
 810444c:	d018      	beq.n	8104480 <HAL_DMA_Init+0x174>
 810444e:	687b      	ldr	r3, [r7, #4]
 8104450:	681b      	ldr	r3, [r3, #0]
 8104452:	4a27      	ldr	r2, [pc, #156]	; (81044f0 <HAL_DMA_Init+0x1e4>)
 8104454:	4293      	cmp	r3, r2
 8104456:	d013      	beq.n	8104480 <HAL_DMA_Init+0x174>
 8104458:	687b      	ldr	r3, [r7, #4]
 810445a:	681b      	ldr	r3, [r3, #0]
 810445c:	4a25      	ldr	r2, [pc, #148]	; (81044f4 <HAL_DMA_Init+0x1e8>)
 810445e:	4293      	cmp	r3, r2
 8104460:	d00e      	beq.n	8104480 <HAL_DMA_Init+0x174>
 8104462:	687b      	ldr	r3, [r7, #4]
 8104464:	681b      	ldr	r3, [r3, #0]
 8104466:	4a24      	ldr	r2, [pc, #144]	; (81044f8 <HAL_DMA_Init+0x1ec>)
 8104468:	4293      	cmp	r3, r2
 810446a:	d009      	beq.n	8104480 <HAL_DMA_Init+0x174>
 810446c:	687b      	ldr	r3, [r7, #4]
 810446e:	681b      	ldr	r3, [r3, #0]
 8104470:	4a22      	ldr	r2, [pc, #136]	; (81044fc <HAL_DMA_Init+0x1f0>)
 8104472:	4293      	cmp	r3, r2
 8104474:	d004      	beq.n	8104480 <HAL_DMA_Init+0x174>
 8104476:	687b      	ldr	r3, [r7, #4]
 8104478:	681b      	ldr	r3, [r3, #0]
 810447a:	4a21      	ldr	r2, [pc, #132]	; (8104500 <HAL_DMA_Init+0x1f4>)
 810447c:	4293      	cmp	r3, r2
 810447e:	d108      	bne.n	8104492 <HAL_DMA_Init+0x186>
 8104480:	687b      	ldr	r3, [r7, #4]
 8104482:	681b      	ldr	r3, [r3, #0]
 8104484:	681a      	ldr	r2, [r3, #0]
 8104486:	687b      	ldr	r3, [r7, #4]
 8104488:	681b      	ldr	r3, [r3, #0]
 810448a:	f022 0201 	bic.w	r2, r2, #1
 810448e:	601a      	str	r2, [r3, #0]
 8104490:	e007      	b.n	81044a2 <HAL_DMA_Init+0x196>
 8104492:	687b      	ldr	r3, [r7, #4]
 8104494:	681b      	ldr	r3, [r3, #0]
 8104496:	681a      	ldr	r2, [r3, #0]
 8104498:	687b      	ldr	r3, [r7, #4]
 810449a:	681b      	ldr	r3, [r3, #0]
 810449c:	f022 0201 	bic.w	r2, r2, #1
 81044a0:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 81044a2:	e02f      	b.n	8104504 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 81044a4:	f7fe faa8 	bl	81029f8 <HAL_GetTick>
 81044a8:	4602      	mov	r2, r0
 81044aa:	693b      	ldr	r3, [r7, #16]
 81044ac:	1ad3      	subs	r3, r2, r3
 81044ae:	2b05      	cmp	r3, #5
 81044b0:	d928      	bls.n	8104504 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 81044b2:	687b      	ldr	r3, [r7, #4]
 81044b4:	2220      	movs	r2, #32
 81044b6:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 81044b8:	687b      	ldr	r3, [r7, #4]
 81044ba:	2203      	movs	r2, #3
 81044bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 81044c0:	2301      	movs	r3, #1
 81044c2:	e244      	b.n	810494e <HAL_DMA_Init+0x642>
 81044c4:	40020010 	.word	0x40020010
 81044c8:	40020028 	.word	0x40020028
 81044cc:	40020040 	.word	0x40020040
 81044d0:	40020058 	.word	0x40020058
 81044d4:	40020070 	.word	0x40020070
 81044d8:	40020088 	.word	0x40020088
 81044dc:	400200a0 	.word	0x400200a0
 81044e0:	400200b8 	.word	0x400200b8
 81044e4:	40020410 	.word	0x40020410
 81044e8:	40020428 	.word	0x40020428
 81044ec:	40020440 	.word	0x40020440
 81044f0:	40020458 	.word	0x40020458
 81044f4:	40020470 	.word	0x40020470
 81044f8:	40020488 	.word	0x40020488
 81044fc:	400204a0 	.word	0x400204a0
 8104500:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8104504:	687b      	ldr	r3, [r7, #4]
 8104506:	681b      	ldr	r3, [r3, #0]
 8104508:	681b      	ldr	r3, [r3, #0]
 810450a:	f003 0301 	and.w	r3, r3, #1
 810450e:	2b00      	cmp	r3, #0
 8104510:	d1c8      	bne.n	81044a4 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8104512:	687b      	ldr	r3, [r7, #4]
 8104514:	681b      	ldr	r3, [r3, #0]
 8104516:	681b      	ldr	r3, [r3, #0]
 8104518:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 810451a:	697a      	ldr	r2, [r7, #20]
 810451c:	4b84      	ldr	r3, [pc, #528]	; (8104730 <HAL_DMA_Init+0x424>)
 810451e:	4013      	ands	r3, r2
 8104520:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8104522:	687b      	ldr	r3, [r7, #4]
 8104524:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8104526:	687b      	ldr	r3, [r7, #4]
 8104528:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 810452a:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 810452c:	687b      	ldr	r3, [r7, #4]
 810452e:	691b      	ldr	r3, [r3, #16]
 8104530:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8104532:	687b      	ldr	r3, [r7, #4]
 8104534:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8104536:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8104538:	687b      	ldr	r3, [r7, #4]
 810453a:	699b      	ldr	r3, [r3, #24]
 810453c:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 810453e:	687b      	ldr	r3, [r7, #4]
 8104540:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8104542:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8104544:	687b      	ldr	r3, [r7, #4]
 8104546:	6a1b      	ldr	r3, [r3, #32]
 8104548:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 810454a:	697a      	ldr	r2, [r7, #20]
 810454c:	4313      	orrs	r3, r2
 810454e:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8104550:	687b      	ldr	r3, [r7, #4]
 8104552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8104554:	2b04      	cmp	r3, #4
 8104556:	d107      	bne.n	8104568 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8104558:	687b      	ldr	r3, [r7, #4]
 810455a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810455c:	687b      	ldr	r3, [r7, #4]
 810455e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8104560:	4313      	orrs	r3, r2
 8104562:	697a      	ldr	r2, [r7, #20]
 8104564:	4313      	orrs	r3, r2
 8104566:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8104568:	4b72      	ldr	r3, [pc, #456]	; (8104734 <HAL_DMA_Init+0x428>)
 810456a:	681b      	ldr	r3, [r3, #0]
 810456c:	0c1b      	lsrs	r3, r3, #16
 810456e:	041b      	lsls	r3, r3, #16
 8104570:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8104574:	d328      	bcc.n	81045c8 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8104576:	687b      	ldr	r3, [r7, #4]
 8104578:	685b      	ldr	r3, [r3, #4]
 810457a:	2b28      	cmp	r3, #40	; 0x28
 810457c:	d903      	bls.n	8104586 <HAL_DMA_Init+0x27a>
 810457e:	687b      	ldr	r3, [r7, #4]
 8104580:	685b      	ldr	r3, [r3, #4]
 8104582:	2b2e      	cmp	r3, #46	; 0x2e
 8104584:	d917      	bls.n	81045b6 <HAL_DMA_Init+0x2aa>
 8104586:	687b      	ldr	r3, [r7, #4]
 8104588:	685b      	ldr	r3, [r3, #4]
 810458a:	2b3e      	cmp	r3, #62	; 0x3e
 810458c:	d903      	bls.n	8104596 <HAL_DMA_Init+0x28a>
 810458e:	687b      	ldr	r3, [r7, #4]
 8104590:	685b      	ldr	r3, [r3, #4]
 8104592:	2b42      	cmp	r3, #66	; 0x42
 8104594:	d90f      	bls.n	81045b6 <HAL_DMA_Init+0x2aa>
 8104596:	687b      	ldr	r3, [r7, #4]
 8104598:	685b      	ldr	r3, [r3, #4]
 810459a:	2b46      	cmp	r3, #70	; 0x46
 810459c:	d903      	bls.n	81045a6 <HAL_DMA_Init+0x29a>
 810459e:	687b      	ldr	r3, [r7, #4]
 81045a0:	685b      	ldr	r3, [r3, #4]
 81045a2:	2b48      	cmp	r3, #72	; 0x48
 81045a4:	d907      	bls.n	81045b6 <HAL_DMA_Init+0x2aa>
 81045a6:	687b      	ldr	r3, [r7, #4]
 81045a8:	685b      	ldr	r3, [r3, #4]
 81045aa:	2b4e      	cmp	r3, #78	; 0x4e
 81045ac:	d905      	bls.n	81045ba <HAL_DMA_Init+0x2ae>
 81045ae:	687b      	ldr	r3, [r7, #4]
 81045b0:	685b      	ldr	r3, [r3, #4]
 81045b2:	2b52      	cmp	r3, #82	; 0x52
 81045b4:	d801      	bhi.n	81045ba <HAL_DMA_Init+0x2ae>
 81045b6:	2301      	movs	r3, #1
 81045b8:	e000      	b.n	81045bc <HAL_DMA_Init+0x2b0>
 81045ba:	2300      	movs	r3, #0
 81045bc:	2b00      	cmp	r3, #0
 81045be:	d003      	beq.n	81045c8 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 81045c0:	697b      	ldr	r3, [r7, #20]
 81045c2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 81045c6:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 81045c8:	687b      	ldr	r3, [r7, #4]
 81045ca:	681b      	ldr	r3, [r3, #0]
 81045cc:	697a      	ldr	r2, [r7, #20]
 81045ce:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 81045d0:	687b      	ldr	r3, [r7, #4]
 81045d2:	681b      	ldr	r3, [r3, #0]
 81045d4:	695b      	ldr	r3, [r3, #20]
 81045d6:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 81045d8:	697b      	ldr	r3, [r7, #20]
 81045da:	f023 0307 	bic.w	r3, r3, #7
 81045de:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 81045e0:	687b      	ldr	r3, [r7, #4]
 81045e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81045e4:	697a      	ldr	r2, [r7, #20]
 81045e6:	4313      	orrs	r3, r2
 81045e8:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 81045ea:	687b      	ldr	r3, [r7, #4]
 81045ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81045ee:	2b04      	cmp	r3, #4
 81045f0:	d117      	bne.n	8104622 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 81045f2:	687b      	ldr	r3, [r7, #4]
 81045f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81045f6:	697a      	ldr	r2, [r7, #20]
 81045f8:	4313      	orrs	r3, r2
 81045fa:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 81045fc:	687b      	ldr	r3, [r7, #4]
 81045fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104600:	2b00      	cmp	r3, #0
 8104602:	d00e      	beq.n	8104622 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8104604:	6878      	ldr	r0, [r7, #4]
 8104606:	f002 fb3d 	bl	8106c84 <DMA_CheckFifoParam>
 810460a:	4603      	mov	r3, r0
 810460c:	2b00      	cmp	r3, #0
 810460e:	d008      	beq.n	8104622 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8104610:	687b      	ldr	r3, [r7, #4]
 8104612:	2240      	movs	r2, #64	; 0x40
 8104614:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8104616:	687b      	ldr	r3, [r7, #4]
 8104618:	2201      	movs	r2, #1
 810461a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 810461e:	2301      	movs	r3, #1
 8104620:	e195      	b.n	810494e <HAL_DMA_Init+0x642>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8104622:	687b      	ldr	r3, [r7, #4]
 8104624:	681b      	ldr	r3, [r3, #0]
 8104626:	697a      	ldr	r2, [r7, #20]
 8104628:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 810462a:	6878      	ldr	r0, [r7, #4]
 810462c:	f002 fa78 	bl	8106b20 <DMA_CalcBaseAndBitshift>
 8104630:	4603      	mov	r3, r0
 8104632:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8104634:	687b      	ldr	r3, [r7, #4]
 8104636:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8104638:	f003 031f 	and.w	r3, r3, #31
 810463c:	223f      	movs	r2, #63	; 0x3f
 810463e:	409a      	lsls	r2, r3
 8104640:	68bb      	ldr	r3, [r7, #8]
 8104642:	609a      	str	r2, [r3, #8]
 8104644:	e0cb      	b.n	81047de <HAL_DMA_Init+0x4d2>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8104646:	687b      	ldr	r3, [r7, #4]
 8104648:	681b      	ldr	r3, [r3, #0]
 810464a:	4a3b      	ldr	r2, [pc, #236]	; (8104738 <HAL_DMA_Init+0x42c>)
 810464c:	4293      	cmp	r3, r2
 810464e:	d022      	beq.n	8104696 <HAL_DMA_Init+0x38a>
 8104650:	687b      	ldr	r3, [r7, #4]
 8104652:	681b      	ldr	r3, [r3, #0]
 8104654:	4a39      	ldr	r2, [pc, #228]	; (810473c <HAL_DMA_Init+0x430>)
 8104656:	4293      	cmp	r3, r2
 8104658:	d01d      	beq.n	8104696 <HAL_DMA_Init+0x38a>
 810465a:	687b      	ldr	r3, [r7, #4]
 810465c:	681b      	ldr	r3, [r3, #0]
 810465e:	4a38      	ldr	r2, [pc, #224]	; (8104740 <HAL_DMA_Init+0x434>)
 8104660:	4293      	cmp	r3, r2
 8104662:	d018      	beq.n	8104696 <HAL_DMA_Init+0x38a>
 8104664:	687b      	ldr	r3, [r7, #4]
 8104666:	681b      	ldr	r3, [r3, #0]
 8104668:	4a36      	ldr	r2, [pc, #216]	; (8104744 <HAL_DMA_Init+0x438>)
 810466a:	4293      	cmp	r3, r2
 810466c:	d013      	beq.n	8104696 <HAL_DMA_Init+0x38a>
 810466e:	687b      	ldr	r3, [r7, #4]
 8104670:	681b      	ldr	r3, [r3, #0]
 8104672:	4a35      	ldr	r2, [pc, #212]	; (8104748 <HAL_DMA_Init+0x43c>)
 8104674:	4293      	cmp	r3, r2
 8104676:	d00e      	beq.n	8104696 <HAL_DMA_Init+0x38a>
 8104678:	687b      	ldr	r3, [r7, #4]
 810467a:	681b      	ldr	r3, [r3, #0]
 810467c:	4a33      	ldr	r2, [pc, #204]	; (810474c <HAL_DMA_Init+0x440>)
 810467e:	4293      	cmp	r3, r2
 8104680:	d009      	beq.n	8104696 <HAL_DMA_Init+0x38a>
 8104682:	687b      	ldr	r3, [r7, #4]
 8104684:	681b      	ldr	r3, [r3, #0]
 8104686:	4a32      	ldr	r2, [pc, #200]	; (8104750 <HAL_DMA_Init+0x444>)
 8104688:	4293      	cmp	r3, r2
 810468a:	d004      	beq.n	8104696 <HAL_DMA_Init+0x38a>
 810468c:	687b      	ldr	r3, [r7, #4]
 810468e:	681b      	ldr	r3, [r3, #0]
 8104690:	4a30      	ldr	r2, [pc, #192]	; (8104754 <HAL_DMA_Init+0x448>)
 8104692:	4293      	cmp	r3, r2
 8104694:	d101      	bne.n	810469a <HAL_DMA_Init+0x38e>
 8104696:	2301      	movs	r3, #1
 8104698:	e000      	b.n	810469c <HAL_DMA_Init+0x390>
 810469a:	2300      	movs	r3, #0
 810469c:	2b00      	cmp	r3, #0
 810469e:	f000 8095 	beq.w	81047cc <HAL_DMA_Init+0x4c0>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 81046a2:	687b      	ldr	r3, [r7, #4]
 81046a4:	681b      	ldr	r3, [r3, #0]
 81046a6:	4a24      	ldr	r2, [pc, #144]	; (8104738 <HAL_DMA_Init+0x42c>)
 81046a8:	4293      	cmp	r3, r2
 81046aa:	d021      	beq.n	81046f0 <HAL_DMA_Init+0x3e4>
 81046ac:	687b      	ldr	r3, [r7, #4]
 81046ae:	681b      	ldr	r3, [r3, #0]
 81046b0:	4a22      	ldr	r2, [pc, #136]	; (810473c <HAL_DMA_Init+0x430>)
 81046b2:	4293      	cmp	r3, r2
 81046b4:	d01c      	beq.n	81046f0 <HAL_DMA_Init+0x3e4>
 81046b6:	687b      	ldr	r3, [r7, #4]
 81046b8:	681b      	ldr	r3, [r3, #0]
 81046ba:	4a21      	ldr	r2, [pc, #132]	; (8104740 <HAL_DMA_Init+0x434>)
 81046bc:	4293      	cmp	r3, r2
 81046be:	d017      	beq.n	81046f0 <HAL_DMA_Init+0x3e4>
 81046c0:	687b      	ldr	r3, [r7, #4]
 81046c2:	681b      	ldr	r3, [r3, #0]
 81046c4:	4a1f      	ldr	r2, [pc, #124]	; (8104744 <HAL_DMA_Init+0x438>)
 81046c6:	4293      	cmp	r3, r2
 81046c8:	d012      	beq.n	81046f0 <HAL_DMA_Init+0x3e4>
 81046ca:	687b      	ldr	r3, [r7, #4]
 81046cc:	681b      	ldr	r3, [r3, #0]
 81046ce:	4a1e      	ldr	r2, [pc, #120]	; (8104748 <HAL_DMA_Init+0x43c>)
 81046d0:	4293      	cmp	r3, r2
 81046d2:	d00d      	beq.n	81046f0 <HAL_DMA_Init+0x3e4>
 81046d4:	687b      	ldr	r3, [r7, #4]
 81046d6:	681b      	ldr	r3, [r3, #0]
 81046d8:	4a1c      	ldr	r2, [pc, #112]	; (810474c <HAL_DMA_Init+0x440>)
 81046da:	4293      	cmp	r3, r2
 81046dc:	d008      	beq.n	81046f0 <HAL_DMA_Init+0x3e4>
 81046de:	687b      	ldr	r3, [r7, #4]
 81046e0:	681b      	ldr	r3, [r3, #0]
 81046e2:	4a1b      	ldr	r2, [pc, #108]	; (8104750 <HAL_DMA_Init+0x444>)
 81046e4:	4293      	cmp	r3, r2
 81046e6:	d003      	beq.n	81046f0 <HAL_DMA_Init+0x3e4>
 81046e8:	687b      	ldr	r3, [r7, #4]
 81046ea:	681b      	ldr	r3, [r3, #0]
 81046ec:	4a19      	ldr	r2, [pc, #100]	; (8104754 <HAL_DMA_Init+0x448>)
 81046ee:	4293      	cmp	r3, r2
 81046f0:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 81046f2:	687b      	ldr	r3, [r7, #4]
 81046f4:	2200      	movs	r2, #0
 81046f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 81046fa:	687b      	ldr	r3, [r7, #4]
 81046fc:	2202      	movs	r2, #2
 81046fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8104702:	687b      	ldr	r3, [r7, #4]
 8104704:	681b      	ldr	r3, [r3, #0]
 8104706:	681b      	ldr	r3, [r3, #0]
 8104708:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 810470a:	697b      	ldr	r3, [r7, #20]
 810470c:	f423 33ff 	bic.w	r3, r3, #130560	; 0x1fe00
 8104710:	f423 73f8 	bic.w	r3, r3, #496	; 0x1f0
 8104714:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8104716:	687b      	ldr	r3, [r7, #4]
 8104718:	689b      	ldr	r3, [r3, #8]
 810471a:	2b40      	cmp	r3, #64	; 0x40
 810471c:	d01c      	beq.n	8104758 <HAL_DMA_Init+0x44c>
 810471e:	687b      	ldr	r3, [r7, #4]
 8104720:	689b      	ldr	r3, [r3, #8]
 8104722:	2b80      	cmp	r3, #128	; 0x80
 8104724:	d102      	bne.n	810472c <HAL_DMA_Init+0x420>
 8104726:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 810472a:	e016      	b.n	810475a <HAL_DMA_Init+0x44e>
 810472c:	2300      	movs	r3, #0
 810472e:	e014      	b.n	810475a <HAL_DMA_Init+0x44e>
 8104730:	fe10803f 	.word	0xfe10803f
 8104734:	5c001000 	.word	0x5c001000
 8104738:	58025408 	.word	0x58025408
 810473c:	5802541c 	.word	0x5802541c
 8104740:	58025430 	.word	0x58025430
 8104744:	58025444 	.word	0x58025444
 8104748:	58025458 	.word	0x58025458
 810474c:	5802546c 	.word	0x5802546c
 8104750:	58025480 	.word	0x58025480
 8104754:	58025494 	.word	0x58025494
 8104758:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 810475a:	687a      	ldr	r2, [r7, #4]
 810475c:	68d2      	ldr	r2, [r2, #12]
 810475e:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8104760:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8104762:	687b      	ldr	r3, [r7, #4]
 8104764:	691b      	ldr	r3, [r3, #16]
 8104766:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8104768:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 810476a:	687b      	ldr	r3, [r7, #4]
 810476c:	695b      	ldr	r3, [r3, #20]
 810476e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8104770:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8104772:	687b      	ldr	r3, [r7, #4]
 8104774:	699b      	ldr	r3, [r3, #24]
 8104776:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8104778:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 810477a:	687b      	ldr	r3, [r7, #4]
 810477c:	69db      	ldr	r3, [r3, #28]
 810477e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8104780:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8104782:	687b      	ldr	r3, [r7, #4]
 8104784:	6a1b      	ldr	r3, [r3, #32]
 8104786:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8104788:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 810478a:	697a      	ldr	r2, [r7, #20]
 810478c:	4313      	orrs	r3, r2
 810478e:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8104790:	687b      	ldr	r3, [r7, #4]
 8104792:	681b      	ldr	r3, [r3, #0]
 8104794:	697a      	ldr	r2, [r7, #20]
 8104796:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8104798:	687b      	ldr	r3, [r7, #4]
 810479a:	681b      	ldr	r3, [r3, #0]
 810479c:	461a      	mov	r2, r3
 810479e:	4b6e      	ldr	r3, [pc, #440]	; (8104958 <HAL_DMA_Init+0x64c>)
 81047a0:	4413      	add	r3, r2
 81047a2:	4a6e      	ldr	r2, [pc, #440]	; (810495c <HAL_DMA_Init+0x650>)
 81047a4:	fba2 2303 	umull	r2, r3, r2, r3
 81047a8:	091b      	lsrs	r3, r3, #4
 81047aa:	009a      	lsls	r2, r3, #2
 81047ac:	687b      	ldr	r3, [r7, #4]
 81047ae:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 81047b0:	6878      	ldr	r0, [r7, #4]
 81047b2:	f002 f9b5 	bl	8106b20 <DMA_CalcBaseAndBitshift>
 81047b6:	4603      	mov	r3, r0
 81047b8:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 81047ba:	687b      	ldr	r3, [r7, #4]
 81047bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81047be:	f003 031f 	and.w	r3, r3, #31
 81047c2:	2201      	movs	r2, #1
 81047c4:	409a      	lsls	r2, r3
 81047c6:	68fb      	ldr	r3, [r7, #12]
 81047c8:	605a      	str	r2, [r3, #4]
 81047ca:	e008      	b.n	81047de <HAL_DMA_Init+0x4d2>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 81047cc:	687b      	ldr	r3, [r7, #4]
 81047ce:	2240      	movs	r2, #64	; 0x40
 81047d0:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 81047d2:	687b      	ldr	r3, [r7, #4]
 81047d4:	2203      	movs	r2, #3
 81047d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 81047da:	2301      	movs	r3, #1
 81047dc:	e0b7      	b.n	810494e <HAL_DMA_Init+0x642>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 81047de:	687b      	ldr	r3, [r7, #4]
 81047e0:	681b      	ldr	r3, [r3, #0]
 81047e2:	4a5f      	ldr	r2, [pc, #380]	; (8104960 <HAL_DMA_Init+0x654>)
 81047e4:	4293      	cmp	r3, r2
 81047e6:	d072      	beq.n	81048ce <HAL_DMA_Init+0x5c2>
 81047e8:	687b      	ldr	r3, [r7, #4]
 81047ea:	681b      	ldr	r3, [r3, #0]
 81047ec:	4a5d      	ldr	r2, [pc, #372]	; (8104964 <HAL_DMA_Init+0x658>)
 81047ee:	4293      	cmp	r3, r2
 81047f0:	d06d      	beq.n	81048ce <HAL_DMA_Init+0x5c2>
 81047f2:	687b      	ldr	r3, [r7, #4]
 81047f4:	681b      	ldr	r3, [r3, #0]
 81047f6:	4a5c      	ldr	r2, [pc, #368]	; (8104968 <HAL_DMA_Init+0x65c>)
 81047f8:	4293      	cmp	r3, r2
 81047fa:	d068      	beq.n	81048ce <HAL_DMA_Init+0x5c2>
 81047fc:	687b      	ldr	r3, [r7, #4]
 81047fe:	681b      	ldr	r3, [r3, #0]
 8104800:	4a5a      	ldr	r2, [pc, #360]	; (810496c <HAL_DMA_Init+0x660>)
 8104802:	4293      	cmp	r3, r2
 8104804:	d063      	beq.n	81048ce <HAL_DMA_Init+0x5c2>
 8104806:	687b      	ldr	r3, [r7, #4]
 8104808:	681b      	ldr	r3, [r3, #0]
 810480a:	4a59      	ldr	r2, [pc, #356]	; (8104970 <HAL_DMA_Init+0x664>)
 810480c:	4293      	cmp	r3, r2
 810480e:	d05e      	beq.n	81048ce <HAL_DMA_Init+0x5c2>
 8104810:	687b      	ldr	r3, [r7, #4]
 8104812:	681b      	ldr	r3, [r3, #0]
 8104814:	4a57      	ldr	r2, [pc, #348]	; (8104974 <HAL_DMA_Init+0x668>)
 8104816:	4293      	cmp	r3, r2
 8104818:	d059      	beq.n	81048ce <HAL_DMA_Init+0x5c2>
 810481a:	687b      	ldr	r3, [r7, #4]
 810481c:	681b      	ldr	r3, [r3, #0]
 810481e:	4a56      	ldr	r2, [pc, #344]	; (8104978 <HAL_DMA_Init+0x66c>)
 8104820:	4293      	cmp	r3, r2
 8104822:	d054      	beq.n	81048ce <HAL_DMA_Init+0x5c2>
 8104824:	687b      	ldr	r3, [r7, #4]
 8104826:	681b      	ldr	r3, [r3, #0]
 8104828:	4a54      	ldr	r2, [pc, #336]	; (810497c <HAL_DMA_Init+0x670>)
 810482a:	4293      	cmp	r3, r2
 810482c:	d04f      	beq.n	81048ce <HAL_DMA_Init+0x5c2>
 810482e:	687b      	ldr	r3, [r7, #4]
 8104830:	681b      	ldr	r3, [r3, #0]
 8104832:	4a53      	ldr	r2, [pc, #332]	; (8104980 <HAL_DMA_Init+0x674>)
 8104834:	4293      	cmp	r3, r2
 8104836:	d04a      	beq.n	81048ce <HAL_DMA_Init+0x5c2>
 8104838:	687b      	ldr	r3, [r7, #4]
 810483a:	681b      	ldr	r3, [r3, #0]
 810483c:	4a51      	ldr	r2, [pc, #324]	; (8104984 <HAL_DMA_Init+0x678>)
 810483e:	4293      	cmp	r3, r2
 8104840:	d045      	beq.n	81048ce <HAL_DMA_Init+0x5c2>
 8104842:	687b      	ldr	r3, [r7, #4]
 8104844:	681b      	ldr	r3, [r3, #0]
 8104846:	4a50      	ldr	r2, [pc, #320]	; (8104988 <HAL_DMA_Init+0x67c>)
 8104848:	4293      	cmp	r3, r2
 810484a:	d040      	beq.n	81048ce <HAL_DMA_Init+0x5c2>
 810484c:	687b      	ldr	r3, [r7, #4]
 810484e:	681b      	ldr	r3, [r3, #0]
 8104850:	4a4e      	ldr	r2, [pc, #312]	; (810498c <HAL_DMA_Init+0x680>)
 8104852:	4293      	cmp	r3, r2
 8104854:	d03b      	beq.n	81048ce <HAL_DMA_Init+0x5c2>
 8104856:	687b      	ldr	r3, [r7, #4]
 8104858:	681b      	ldr	r3, [r3, #0]
 810485a:	4a4d      	ldr	r2, [pc, #308]	; (8104990 <HAL_DMA_Init+0x684>)
 810485c:	4293      	cmp	r3, r2
 810485e:	d036      	beq.n	81048ce <HAL_DMA_Init+0x5c2>
 8104860:	687b      	ldr	r3, [r7, #4]
 8104862:	681b      	ldr	r3, [r3, #0]
 8104864:	4a4b      	ldr	r2, [pc, #300]	; (8104994 <HAL_DMA_Init+0x688>)
 8104866:	4293      	cmp	r3, r2
 8104868:	d031      	beq.n	81048ce <HAL_DMA_Init+0x5c2>
 810486a:	687b      	ldr	r3, [r7, #4]
 810486c:	681b      	ldr	r3, [r3, #0]
 810486e:	4a4a      	ldr	r2, [pc, #296]	; (8104998 <HAL_DMA_Init+0x68c>)
 8104870:	4293      	cmp	r3, r2
 8104872:	d02c      	beq.n	81048ce <HAL_DMA_Init+0x5c2>
 8104874:	687b      	ldr	r3, [r7, #4]
 8104876:	681b      	ldr	r3, [r3, #0]
 8104878:	4a48      	ldr	r2, [pc, #288]	; (810499c <HAL_DMA_Init+0x690>)
 810487a:	4293      	cmp	r3, r2
 810487c:	d027      	beq.n	81048ce <HAL_DMA_Init+0x5c2>
 810487e:	687b      	ldr	r3, [r7, #4]
 8104880:	681b      	ldr	r3, [r3, #0]
 8104882:	4a47      	ldr	r2, [pc, #284]	; (81049a0 <HAL_DMA_Init+0x694>)
 8104884:	4293      	cmp	r3, r2
 8104886:	d022      	beq.n	81048ce <HAL_DMA_Init+0x5c2>
 8104888:	687b      	ldr	r3, [r7, #4]
 810488a:	681b      	ldr	r3, [r3, #0]
 810488c:	4a45      	ldr	r2, [pc, #276]	; (81049a4 <HAL_DMA_Init+0x698>)
 810488e:	4293      	cmp	r3, r2
 8104890:	d01d      	beq.n	81048ce <HAL_DMA_Init+0x5c2>
 8104892:	687b      	ldr	r3, [r7, #4]
 8104894:	681b      	ldr	r3, [r3, #0]
 8104896:	4a44      	ldr	r2, [pc, #272]	; (81049a8 <HAL_DMA_Init+0x69c>)
 8104898:	4293      	cmp	r3, r2
 810489a:	d018      	beq.n	81048ce <HAL_DMA_Init+0x5c2>
 810489c:	687b      	ldr	r3, [r7, #4]
 810489e:	681b      	ldr	r3, [r3, #0]
 81048a0:	4a42      	ldr	r2, [pc, #264]	; (81049ac <HAL_DMA_Init+0x6a0>)
 81048a2:	4293      	cmp	r3, r2
 81048a4:	d013      	beq.n	81048ce <HAL_DMA_Init+0x5c2>
 81048a6:	687b      	ldr	r3, [r7, #4]
 81048a8:	681b      	ldr	r3, [r3, #0]
 81048aa:	4a41      	ldr	r2, [pc, #260]	; (81049b0 <HAL_DMA_Init+0x6a4>)
 81048ac:	4293      	cmp	r3, r2
 81048ae:	d00e      	beq.n	81048ce <HAL_DMA_Init+0x5c2>
 81048b0:	687b      	ldr	r3, [r7, #4]
 81048b2:	681b      	ldr	r3, [r3, #0]
 81048b4:	4a3f      	ldr	r2, [pc, #252]	; (81049b4 <HAL_DMA_Init+0x6a8>)
 81048b6:	4293      	cmp	r3, r2
 81048b8:	d009      	beq.n	81048ce <HAL_DMA_Init+0x5c2>
 81048ba:	687b      	ldr	r3, [r7, #4]
 81048bc:	681b      	ldr	r3, [r3, #0]
 81048be:	4a3e      	ldr	r2, [pc, #248]	; (81049b8 <HAL_DMA_Init+0x6ac>)
 81048c0:	4293      	cmp	r3, r2
 81048c2:	d004      	beq.n	81048ce <HAL_DMA_Init+0x5c2>
 81048c4:	687b      	ldr	r3, [r7, #4]
 81048c6:	681b      	ldr	r3, [r3, #0]
 81048c8:	4a3c      	ldr	r2, [pc, #240]	; (81049bc <HAL_DMA_Init+0x6b0>)
 81048ca:	4293      	cmp	r3, r2
 81048cc:	d101      	bne.n	81048d2 <HAL_DMA_Init+0x5c6>
 81048ce:	2301      	movs	r3, #1
 81048d0:	e000      	b.n	81048d4 <HAL_DMA_Init+0x5c8>
 81048d2:	2300      	movs	r3, #0
 81048d4:	2b00      	cmp	r3, #0
 81048d6:	d032      	beq.n	810493e <HAL_DMA_Init+0x632>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 81048d8:	6878      	ldr	r0, [r7, #4]
 81048da:	f002 fa4f 	bl	8106d7c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 81048de:	687b      	ldr	r3, [r7, #4]
 81048e0:	689b      	ldr	r3, [r3, #8]
 81048e2:	2b80      	cmp	r3, #128	; 0x80
 81048e4:	d102      	bne.n	81048ec <HAL_DMA_Init+0x5e0>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 81048e6:	687b      	ldr	r3, [r7, #4]
 81048e8:	2200      	movs	r2, #0
 81048ea:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 81048ec:	687b      	ldr	r3, [r7, #4]
 81048ee:	685a      	ldr	r2, [r3, #4]
 81048f0:	687b      	ldr	r3, [r7, #4]
 81048f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 81048f4:	b2d2      	uxtb	r2, r2
 81048f6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 81048f8:	687b      	ldr	r3, [r7, #4]
 81048fa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 81048fc:	687a      	ldr	r2, [r7, #4]
 81048fe:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8104900:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8104902:	687b      	ldr	r3, [r7, #4]
 8104904:	685b      	ldr	r3, [r3, #4]
 8104906:	2b00      	cmp	r3, #0
 8104908:	d010      	beq.n	810492c <HAL_DMA_Init+0x620>
 810490a:	687b      	ldr	r3, [r7, #4]
 810490c:	685b      	ldr	r3, [r3, #4]
 810490e:	2b08      	cmp	r3, #8
 8104910:	d80c      	bhi.n	810492c <HAL_DMA_Init+0x620>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8104912:	6878      	ldr	r0, [r7, #4]
 8104914:	f002 facc 	bl	8106eb0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8104918:	687b      	ldr	r3, [r7, #4]
 810491a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 810491c:	2200      	movs	r2, #0
 810491e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8104920:	687b      	ldr	r3, [r7, #4]
 8104922:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8104924:	687a      	ldr	r2, [r7, #4]
 8104926:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8104928:	605a      	str	r2, [r3, #4]
 810492a:	e008      	b.n	810493e <HAL_DMA_Init+0x632>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 810492c:	687b      	ldr	r3, [r7, #4]
 810492e:	2200      	movs	r2, #0
 8104930:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8104932:	687b      	ldr	r3, [r7, #4]
 8104934:	2200      	movs	r2, #0
 8104936:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8104938:	687b      	ldr	r3, [r7, #4]
 810493a:	2200      	movs	r2, #0
 810493c:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 810493e:	687b      	ldr	r3, [r7, #4]
 8104940:	2200      	movs	r2, #0
 8104942:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8104944:	687b      	ldr	r3, [r7, #4]
 8104946:	2201      	movs	r2, #1
 8104948:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 810494c:	2300      	movs	r3, #0
}
 810494e:	4618      	mov	r0, r3
 8104950:	3718      	adds	r7, #24
 8104952:	46bd      	mov	sp, r7
 8104954:	bd80      	pop	{r7, pc}
 8104956:	bf00      	nop
 8104958:	a7fdabf8 	.word	0xa7fdabf8
 810495c:	cccccccd 	.word	0xcccccccd
 8104960:	40020010 	.word	0x40020010
 8104964:	40020028 	.word	0x40020028
 8104968:	40020040 	.word	0x40020040
 810496c:	40020058 	.word	0x40020058
 8104970:	40020070 	.word	0x40020070
 8104974:	40020088 	.word	0x40020088
 8104978:	400200a0 	.word	0x400200a0
 810497c:	400200b8 	.word	0x400200b8
 8104980:	40020410 	.word	0x40020410
 8104984:	40020428 	.word	0x40020428
 8104988:	40020440 	.word	0x40020440
 810498c:	40020458 	.word	0x40020458
 8104990:	40020470 	.word	0x40020470
 8104994:	40020488 	.word	0x40020488
 8104998:	400204a0 	.word	0x400204a0
 810499c:	400204b8 	.word	0x400204b8
 81049a0:	58025408 	.word	0x58025408
 81049a4:	5802541c 	.word	0x5802541c
 81049a8:	58025430 	.word	0x58025430
 81049ac:	58025444 	.word	0x58025444
 81049b0:	58025458 	.word	0x58025458
 81049b4:	5802546c 	.word	0x5802546c
 81049b8:	58025480 	.word	0x58025480
 81049bc:	58025494 	.word	0x58025494

081049c0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 81049c0:	b580      	push	{r7, lr}
 81049c2:	b086      	sub	sp, #24
 81049c4:	af00      	add	r7, sp, #0
 81049c6:	60f8      	str	r0, [r7, #12]
 81049c8:	60b9      	str	r1, [r7, #8]
 81049ca:	607a      	str	r2, [r7, #4]
 81049cc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 81049ce:	2300      	movs	r3, #0
 81049d0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 81049d2:	68fb      	ldr	r3, [r7, #12]
 81049d4:	2b00      	cmp	r3, #0
 81049d6:	d101      	bne.n	81049dc <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 81049d8:	2301      	movs	r3, #1
 81049da:	e226      	b.n	8104e2a <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 81049dc:	68fb      	ldr	r3, [r7, #12]
 81049de:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 81049e2:	2b01      	cmp	r3, #1
 81049e4:	d101      	bne.n	81049ea <HAL_DMA_Start_IT+0x2a>
 81049e6:	2302      	movs	r3, #2
 81049e8:	e21f      	b.n	8104e2a <HAL_DMA_Start_IT+0x46a>
 81049ea:	68fb      	ldr	r3, [r7, #12]
 81049ec:	2201      	movs	r2, #1
 81049ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 81049f2:	68fb      	ldr	r3, [r7, #12]
 81049f4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 81049f8:	b2db      	uxtb	r3, r3
 81049fa:	2b01      	cmp	r3, #1
 81049fc:	f040 820a 	bne.w	8104e14 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8104a00:	68fb      	ldr	r3, [r7, #12]
 8104a02:	2202      	movs	r2, #2
 8104a04:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8104a08:	68fb      	ldr	r3, [r7, #12]
 8104a0a:	2200      	movs	r2, #0
 8104a0c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8104a0e:	68fb      	ldr	r3, [r7, #12]
 8104a10:	681b      	ldr	r3, [r3, #0]
 8104a12:	4a68      	ldr	r2, [pc, #416]	; (8104bb4 <HAL_DMA_Start_IT+0x1f4>)
 8104a14:	4293      	cmp	r3, r2
 8104a16:	d04a      	beq.n	8104aae <HAL_DMA_Start_IT+0xee>
 8104a18:	68fb      	ldr	r3, [r7, #12]
 8104a1a:	681b      	ldr	r3, [r3, #0]
 8104a1c:	4a66      	ldr	r2, [pc, #408]	; (8104bb8 <HAL_DMA_Start_IT+0x1f8>)
 8104a1e:	4293      	cmp	r3, r2
 8104a20:	d045      	beq.n	8104aae <HAL_DMA_Start_IT+0xee>
 8104a22:	68fb      	ldr	r3, [r7, #12]
 8104a24:	681b      	ldr	r3, [r3, #0]
 8104a26:	4a65      	ldr	r2, [pc, #404]	; (8104bbc <HAL_DMA_Start_IT+0x1fc>)
 8104a28:	4293      	cmp	r3, r2
 8104a2a:	d040      	beq.n	8104aae <HAL_DMA_Start_IT+0xee>
 8104a2c:	68fb      	ldr	r3, [r7, #12]
 8104a2e:	681b      	ldr	r3, [r3, #0]
 8104a30:	4a63      	ldr	r2, [pc, #396]	; (8104bc0 <HAL_DMA_Start_IT+0x200>)
 8104a32:	4293      	cmp	r3, r2
 8104a34:	d03b      	beq.n	8104aae <HAL_DMA_Start_IT+0xee>
 8104a36:	68fb      	ldr	r3, [r7, #12]
 8104a38:	681b      	ldr	r3, [r3, #0]
 8104a3a:	4a62      	ldr	r2, [pc, #392]	; (8104bc4 <HAL_DMA_Start_IT+0x204>)
 8104a3c:	4293      	cmp	r3, r2
 8104a3e:	d036      	beq.n	8104aae <HAL_DMA_Start_IT+0xee>
 8104a40:	68fb      	ldr	r3, [r7, #12]
 8104a42:	681b      	ldr	r3, [r3, #0]
 8104a44:	4a60      	ldr	r2, [pc, #384]	; (8104bc8 <HAL_DMA_Start_IT+0x208>)
 8104a46:	4293      	cmp	r3, r2
 8104a48:	d031      	beq.n	8104aae <HAL_DMA_Start_IT+0xee>
 8104a4a:	68fb      	ldr	r3, [r7, #12]
 8104a4c:	681b      	ldr	r3, [r3, #0]
 8104a4e:	4a5f      	ldr	r2, [pc, #380]	; (8104bcc <HAL_DMA_Start_IT+0x20c>)
 8104a50:	4293      	cmp	r3, r2
 8104a52:	d02c      	beq.n	8104aae <HAL_DMA_Start_IT+0xee>
 8104a54:	68fb      	ldr	r3, [r7, #12]
 8104a56:	681b      	ldr	r3, [r3, #0]
 8104a58:	4a5d      	ldr	r2, [pc, #372]	; (8104bd0 <HAL_DMA_Start_IT+0x210>)
 8104a5a:	4293      	cmp	r3, r2
 8104a5c:	d027      	beq.n	8104aae <HAL_DMA_Start_IT+0xee>
 8104a5e:	68fb      	ldr	r3, [r7, #12]
 8104a60:	681b      	ldr	r3, [r3, #0]
 8104a62:	4a5c      	ldr	r2, [pc, #368]	; (8104bd4 <HAL_DMA_Start_IT+0x214>)
 8104a64:	4293      	cmp	r3, r2
 8104a66:	d022      	beq.n	8104aae <HAL_DMA_Start_IT+0xee>
 8104a68:	68fb      	ldr	r3, [r7, #12]
 8104a6a:	681b      	ldr	r3, [r3, #0]
 8104a6c:	4a5a      	ldr	r2, [pc, #360]	; (8104bd8 <HAL_DMA_Start_IT+0x218>)
 8104a6e:	4293      	cmp	r3, r2
 8104a70:	d01d      	beq.n	8104aae <HAL_DMA_Start_IT+0xee>
 8104a72:	68fb      	ldr	r3, [r7, #12]
 8104a74:	681b      	ldr	r3, [r3, #0]
 8104a76:	4a59      	ldr	r2, [pc, #356]	; (8104bdc <HAL_DMA_Start_IT+0x21c>)
 8104a78:	4293      	cmp	r3, r2
 8104a7a:	d018      	beq.n	8104aae <HAL_DMA_Start_IT+0xee>
 8104a7c:	68fb      	ldr	r3, [r7, #12]
 8104a7e:	681b      	ldr	r3, [r3, #0]
 8104a80:	4a57      	ldr	r2, [pc, #348]	; (8104be0 <HAL_DMA_Start_IT+0x220>)
 8104a82:	4293      	cmp	r3, r2
 8104a84:	d013      	beq.n	8104aae <HAL_DMA_Start_IT+0xee>
 8104a86:	68fb      	ldr	r3, [r7, #12]
 8104a88:	681b      	ldr	r3, [r3, #0]
 8104a8a:	4a56      	ldr	r2, [pc, #344]	; (8104be4 <HAL_DMA_Start_IT+0x224>)
 8104a8c:	4293      	cmp	r3, r2
 8104a8e:	d00e      	beq.n	8104aae <HAL_DMA_Start_IT+0xee>
 8104a90:	68fb      	ldr	r3, [r7, #12]
 8104a92:	681b      	ldr	r3, [r3, #0]
 8104a94:	4a54      	ldr	r2, [pc, #336]	; (8104be8 <HAL_DMA_Start_IT+0x228>)
 8104a96:	4293      	cmp	r3, r2
 8104a98:	d009      	beq.n	8104aae <HAL_DMA_Start_IT+0xee>
 8104a9a:	68fb      	ldr	r3, [r7, #12]
 8104a9c:	681b      	ldr	r3, [r3, #0]
 8104a9e:	4a53      	ldr	r2, [pc, #332]	; (8104bec <HAL_DMA_Start_IT+0x22c>)
 8104aa0:	4293      	cmp	r3, r2
 8104aa2:	d004      	beq.n	8104aae <HAL_DMA_Start_IT+0xee>
 8104aa4:	68fb      	ldr	r3, [r7, #12]
 8104aa6:	681b      	ldr	r3, [r3, #0]
 8104aa8:	4a51      	ldr	r2, [pc, #324]	; (8104bf0 <HAL_DMA_Start_IT+0x230>)
 8104aaa:	4293      	cmp	r3, r2
 8104aac:	d108      	bne.n	8104ac0 <HAL_DMA_Start_IT+0x100>
 8104aae:	68fb      	ldr	r3, [r7, #12]
 8104ab0:	681b      	ldr	r3, [r3, #0]
 8104ab2:	681a      	ldr	r2, [r3, #0]
 8104ab4:	68fb      	ldr	r3, [r7, #12]
 8104ab6:	681b      	ldr	r3, [r3, #0]
 8104ab8:	f022 0201 	bic.w	r2, r2, #1
 8104abc:	601a      	str	r2, [r3, #0]
 8104abe:	e007      	b.n	8104ad0 <HAL_DMA_Start_IT+0x110>
 8104ac0:	68fb      	ldr	r3, [r7, #12]
 8104ac2:	681b      	ldr	r3, [r3, #0]
 8104ac4:	681a      	ldr	r2, [r3, #0]
 8104ac6:	68fb      	ldr	r3, [r7, #12]
 8104ac8:	681b      	ldr	r3, [r3, #0]
 8104aca:	f022 0201 	bic.w	r2, r2, #1
 8104ace:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8104ad0:	683b      	ldr	r3, [r7, #0]
 8104ad2:	687a      	ldr	r2, [r7, #4]
 8104ad4:	68b9      	ldr	r1, [r7, #8]
 8104ad6:	68f8      	ldr	r0, [r7, #12]
 8104ad8:	f001 fe76 	bl	81067c8 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8104adc:	68fb      	ldr	r3, [r7, #12]
 8104ade:	681b      	ldr	r3, [r3, #0]
 8104ae0:	4a34      	ldr	r2, [pc, #208]	; (8104bb4 <HAL_DMA_Start_IT+0x1f4>)
 8104ae2:	4293      	cmp	r3, r2
 8104ae4:	d04a      	beq.n	8104b7c <HAL_DMA_Start_IT+0x1bc>
 8104ae6:	68fb      	ldr	r3, [r7, #12]
 8104ae8:	681b      	ldr	r3, [r3, #0]
 8104aea:	4a33      	ldr	r2, [pc, #204]	; (8104bb8 <HAL_DMA_Start_IT+0x1f8>)
 8104aec:	4293      	cmp	r3, r2
 8104aee:	d045      	beq.n	8104b7c <HAL_DMA_Start_IT+0x1bc>
 8104af0:	68fb      	ldr	r3, [r7, #12]
 8104af2:	681b      	ldr	r3, [r3, #0]
 8104af4:	4a31      	ldr	r2, [pc, #196]	; (8104bbc <HAL_DMA_Start_IT+0x1fc>)
 8104af6:	4293      	cmp	r3, r2
 8104af8:	d040      	beq.n	8104b7c <HAL_DMA_Start_IT+0x1bc>
 8104afa:	68fb      	ldr	r3, [r7, #12]
 8104afc:	681b      	ldr	r3, [r3, #0]
 8104afe:	4a30      	ldr	r2, [pc, #192]	; (8104bc0 <HAL_DMA_Start_IT+0x200>)
 8104b00:	4293      	cmp	r3, r2
 8104b02:	d03b      	beq.n	8104b7c <HAL_DMA_Start_IT+0x1bc>
 8104b04:	68fb      	ldr	r3, [r7, #12]
 8104b06:	681b      	ldr	r3, [r3, #0]
 8104b08:	4a2e      	ldr	r2, [pc, #184]	; (8104bc4 <HAL_DMA_Start_IT+0x204>)
 8104b0a:	4293      	cmp	r3, r2
 8104b0c:	d036      	beq.n	8104b7c <HAL_DMA_Start_IT+0x1bc>
 8104b0e:	68fb      	ldr	r3, [r7, #12]
 8104b10:	681b      	ldr	r3, [r3, #0]
 8104b12:	4a2d      	ldr	r2, [pc, #180]	; (8104bc8 <HAL_DMA_Start_IT+0x208>)
 8104b14:	4293      	cmp	r3, r2
 8104b16:	d031      	beq.n	8104b7c <HAL_DMA_Start_IT+0x1bc>
 8104b18:	68fb      	ldr	r3, [r7, #12]
 8104b1a:	681b      	ldr	r3, [r3, #0]
 8104b1c:	4a2b      	ldr	r2, [pc, #172]	; (8104bcc <HAL_DMA_Start_IT+0x20c>)
 8104b1e:	4293      	cmp	r3, r2
 8104b20:	d02c      	beq.n	8104b7c <HAL_DMA_Start_IT+0x1bc>
 8104b22:	68fb      	ldr	r3, [r7, #12]
 8104b24:	681b      	ldr	r3, [r3, #0]
 8104b26:	4a2a      	ldr	r2, [pc, #168]	; (8104bd0 <HAL_DMA_Start_IT+0x210>)
 8104b28:	4293      	cmp	r3, r2
 8104b2a:	d027      	beq.n	8104b7c <HAL_DMA_Start_IT+0x1bc>
 8104b2c:	68fb      	ldr	r3, [r7, #12]
 8104b2e:	681b      	ldr	r3, [r3, #0]
 8104b30:	4a28      	ldr	r2, [pc, #160]	; (8104bd4 <HAL_DMA_Start_IT+0x214>)
 8104b32:	4293      	cmp	r3, r2
 8104b34:	d022      	beq.n	8104b7c <HAL_DMA_Start_IT+0x1bc>
 8104b36:	68fb      	ldr	r3, [r7, #12]
 8104b38:	681b      	ldr	r3, [r3, #0]
 8104b3a:	4a27      	ldr	r2, [pc, #156]	; (8104bd8 <HAL_DMA_Start_IT+0x218>)
 8104b3c:	4293      	cmp	r3, r2
 8104b3e:	d01d      	beq.n	8104b7c <HAL_DMA_Start_IT+0x1bc>
 8104b40:	68fb      	ldr	r3, [r7, #12]
 8104b42:	681b      	ldr	r3, [r3, #0]
 8104b44:	4a25      	ldr	r2, [pc, #148]	; (8104bdc <HAL_DMA_Start_IT+0x21c>)
 8104b46:	4293      	cmp	r3, r2
 8104b48:	d018      	beq.n	8104b7c <HAL_DMA_Start_IT+0x1bc>
 8104b4a:	68fb      	ldr	r3, [r7, #12]
 8104b4c:	681b      	ldr	r3, [r3, #0]
 8104b4e:	4a24      	ldr	r2, [pc, #144]	; (8104be0 <HAL_DMA_Start_IT+0x220>)
 8104b50:	4293      	cmp	r3, r2
 8104b52:	d013      	beq.n	8104b7c <HAL_DMA_Start_IT+0x1bc>
 8104b54:	68fb      	ldr	r3, [r7, #12]
 8104b56:	681b      	ldr	r3, [r3, #0]
 8104b58:	4a22      	ldr	r2, [pc, #136]	; (8104be4 <HAL_DMA_Start_IT+0x224>)
 8104b5a:	4293      	cmp	r3, r2
 8104b5c:	d00e      	beq.n	8104b7c <HAL_DMA_Start_IT+0x1bc>
 8104b5e:	68fb      	ldr	r3, [r7, #12]
 8104b60:	681b      	ldr	r3, [r3, #0]
 8104b62:	4a21      	ldr	r2, [pc, #132]	; (8104be8 <HAL_DMA_Start_IT+0x228>)
 8104b64:	4293      	cmp	r3, r2
 8104b66:	d009      	beq.n	8104b7c <HAL_DMA_Start_IT+0x1bc>
 8104b68:	68fb      	ldr	r3, [r7, #12]
 8104b6a:	681b      	ldr	r3, [r3, #0]
 8104b6c:	4a1f      	ldr	r2, [pc, #124]	; (8104bec <HAL_DMA_Start_IT+0x22c>)
 8104b6e:	4293      	cmp	r3, r2
 8104b70:	d004      	beq.n	8104b7c <HAL_DMA_Start_IT+0x1bc>
 8104b72:	68fb      	ldr	r3, [r7, #12]
 8104b74:	681b      	ldr	r3, [r3, #0]
 8104b76:	4a1e      	ldr	r2, [pc, #120]	; (8104bf0 <HAL_DMA_Start_IT+0x230>)
 8104b78:	4293      	cmp	r3, r2
 8104b7a:	d101      	bne.n	8104b80 <HAL_DMA_Start_IT+0x1c0>
 8104b7c:	2301      	movs	r3, #1
 8104b7e:	e000      	b.n	8104b82 <HAL_DMA_Start_IT+0x1c2>
 8104b80:	2300      	movs	r3, #0
 8104b82:	2b00      	cmp	r3, #0
 8104b84:	d036      	beq.n	8104bf4 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8104b86:	68fb      	ldr	r3, [r7, #12]
 8104b88:	681b      	ldr	r3, [r3, #0]
 8104b8a:	681b      	ldr	r3, [r3, #0]
 8104b8c:	f023 021e 	bic.w	r2, r3, #30
 8104b90:	68fb      	ldr	r3, [r7, #12]
 8104b92:	681b      	ldr	r3, [r3, #0]
 8104b94:	f042 0216 	orr.w	r2, r2, #22
 8104b98:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8104b9a:	68fb      	ldr	r3, [r7, #12]
 8104b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8104b9e:	2b00      	cmp	r3, #0
 8104ba0:	d03e      	beq.n	8104c20 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8104ba2:	68fb      	ldr	r3, [r7, #12]
 8104ba4:	681b      	ldr	r3, [r3, #0]
 8104ba6:	681a      	ldr	r2, [r3, #0]
 8104ba8:	68fb      	ldr	r3, [r7, #12]
 8104baa:	681b      	ldr	r3, [r3, #0]
 8104bac:	f042 0208 	orr.w	r2, r2, #8
 8104bb0:	601a      	str	r2, [r3, #0]
 8104bb2:	e035      	b.n	8104c20 <HAL_DMA_Start_IT+0x260>
 8104bb4:	40020010 	.word	0x40020010
 8104bb8:	40020028 	.word	0x40020028
 8104bbc:	40020040 	.word	0x40020040
 8104bc0:	40020058 	.word	0x40020058
 8104bc4:	40020070 	.word	0x40020070
 8104bc8:	40020088 	.word	0x40020088
 8104bcc:	400200a0 	.word	0x400200a0
 8104bd0:	400200b8 	.word	0x400200b8
 8104bd4:	40020410 	.word	0x40020410
 8104bd8:	40020428 	.word	0x40020428
 8104bdc:	40020440 	.word	0x40020440
 8104be0:	40020458 	.word	0x40020458
 8104be4:	40020470 	.word	0x40020470
 8104be8:	40020488 	.word	0x40020488
 8104bec:	400204a0 	.word	0x400204a0
 8104bf0:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8104bf4:	68fb      	ldr	r3, [r7, #12]
 8104bf6:	681b      	ldr	r3, [r3, #0]
 8104bf8:	681b      	ldr	r3, [r3, #0]
 8104bfa:	f023 020e 	bic.w	r2, r3, #14
 8104bfe:	68fb      	ldr	r3, [r7, #12]
 8104c00:	681b      	ldr	r3, [r3, #0]
 8104c02:	f042 020a 	orr.w	r2, r2, #10
 8104c06:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8104c08:	68fb      	ldr	r3, [r7, #12]
 8104c0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8104c0c:	2b00      	cmp	r3, #0
 8104c0e:	d007      	beq.n	8104c20 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8104c10:	68fb      	ldr	r3, [r7, #12]
 8104c12:	681b      	ldr	r3, [r3, #0]
 8104c14:	681a      	ldr	r2, [r3, #0]
 8104c16:	68fb      	ldr	r3, [r7, #12]
 8104c18:	681b      	ldr	r3, [r3, #0]
 8104c1a:	f042 0204 	orr.w	r2, r2, #4
 8104c1e:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8104c20:	68fb      	ldr	r3, [r7, #12]
 8104c22:	681b      	ldr	r3, [r3, #0]
 8104c24:	4a83      	ldr	r2, [pc, #524]	; (8104e34 <HAL_DMA_Start_IT+0x474>)
 8104c26:	4293      	cmp	r3, r2
 8104c28:	d072      	beq.n	8104d10 <HAL_DMA_Start_IT+0x350>
 8104c2a:	68fb      	ldr	r3, [r7, #12]
 8104c2c:	681b      	ldr	r3, [r3, #0]
 8104c2e:	4a82      	ldr	r2, [pc, #520]	; (8104e38 <HAL_DMA_Start_IT+0x478>)
 8104c30:	4293      	cmp	r3, r2
 8104c32:	d06d      	beq.n	8104d10 <HAL_DMA_Start_IT+0x350>
 8104c34:	68fb      	ldr	r3, [r7, #12]
 8104c36:	681b      	ldr	r3, [r3, #0]
 8104c38:	4a80      	ldr	r2, [pc, #512]	; (8104e3c <HAL_DMA_Start_IT+0x47c>)
 8104c3a:	4293      	cmp	r3, r2
 8104c3c:	d068      	beq.n	8104d10 <HAL_DMA_Start_IT+0x350>
 8104c3e:	68fb      	ldr	r3, [r7, #12]
 8104c40:	681b      	ldr	r3, [r3, #0]
 8104c42:	4a7f      	ldr	r2, [pc, #508]	; (8104e40 <HAL_DMA_Start_IT+0x480>)
 8104c44:	4293      	cmp	r3, r2
 8104c46:	d063      	beq.n	8104d10 <HAL_DMA_Start_IT+0x350>
 8104c48:	68fb      	ldr	r3, [r7, #12]
 8104c4a:	681b      	ldr	r3, [r3, #0]
 8104c4c:	4a7d      	ldr	r2, [pc, #500]	; (8104e44 <HAL_DMA_Start_IT+0x484>)
 8104c4e:	4293      	cmp	r3, r2
 8104c50:	d05e      	beq.n	8104d10 <HAL_DMA_Start_IT+0x350>
 8104c52:	68fb      	ldr	r3, [r7, #12]
 8104c54:	681b      	ldr	r3, [r3, #0]
 8104c56:	4a7c      	ldr	r2, [pc, #496]	; (8104e48 <HAL_DMA_Start_IT+0x488>)
 8104c58:	4293      	cmp	r3, r2
 8104c5a:	d059      	beq.n	8104d10 <HAL_DMA_Start_IT+0x350>
 8104c5c:	68fb      	ldr	r3, [r7, #12]
 8104c5e:	681b      	ldr	r3, [r3, #0]
 8104c60:	4a7a      	ldr	r2, [pc, #488]	; (8104e4c <HAL_DMA_Start_IT+0x48c>)
 8104c62:	4293      	cmp	r3, r2
 8104c64:	d054      	beq.n	8104d10 <HAL_DMA_Start_IT+0x350>
 8104c66:	68fb      	ldr	r3, [r7, #12]
 8104c68:	681b      	ldr	r3, [r3, #0]
 8104c6a:	4a79      	ldr	r2, [pc, #484]	; (8104e50 <HAL_DMA_Start_IT+0x490>)
 8104c6c:	4293      	cmp	r3, r2
 8104c6e:	d04f      	beq.n	8104d10 <HAL_DMA_Start_IT+0x350>
 8104c70:	68fb      	ldr	r3, [r7, #12]
 8104c72:	681b      	ldr	r3, [r3, #0]
 8104c74:	4a77      	ldr	r2, [pc, #476]	; (8104e54 <HAL_DMA_Start_IT+0x494>)
 8104c76:	4293      	cmp	r3, r2
 8104c78:	d04a      	beq.n	8104d10 <HAL_DMA_Start_IT+0x350>
 8104c7a:	68fb      	ldr	r3, [r7, #12]
 8104c7c:	681b      	ldr	r3, [r3, #0]
 8104c7e:	4a76      	ldr	r2, [pc, #472]	; (8104e58 <HAL_DMA_Start_IT+0x498>)
 8104c80:	4293      	cmp	r3, r2
 8104c82:	d045      	beq.n	8104d10 <HAL_DMA_Start_IT+0x350>
 8104c84:	68fb      	ldr	r3, [r7, #12]
 8104c86:	681b      	ldr	r3, [r3, #0]
 8104c88:	4a74      	ldr	r2, [pc, #464]	; (8104e5c <HAL_DMA_Start_IT+0x49c>)
 8104c8a:	4293      	cmp	r3, r2
 8104c8c:	d040      	beq.n	8104d10 <HAL_DMA_Start_IT+0x350>
 8104c8e:	68fb      	ldr	r3, [r7, #12]
 8104c90:	681b      	ldr	r3, [r3, #0]
 8104c92:	4a73      	ldr	r2, [pc, #460]	; (8104e60 <HAL_DMA_Start_IT+0x4a0>)
 8104c94:	4293      	cmp	r3, r2
 8104c96:	d03b      	beq.n	8104d10 <HAL_DMA_Start_IT+0x350>
 8104c98:	68fb      	ldr	r3, [r7, #12]
 8104c9a:	681b      	ldr	r3, [r3, #0]
 8104c9c:	4a71      	ldr	r2, [pc, #452]	; (8104e64 <HAL_DMA_Start_IT+0x4a4>)
 8104c9e:	4293      	cmp	r3, r2
 8104ca0:	d036      	beq.n	8104d10 <HAL_DMA_Start_IT+0x350>
 8104ca2:	68fb      	ldr	r3, [r7, #12]
 8104ca4:	681b      	ldr	r3, [r3, #0]
 8104ca6:	4a70      	ldr	r2, [pc, #448]	; (8104e68 <HAL_DMA_Start_IT+0x4a8>)
 8104ca8:	4293      	cmp	r3, r2
 8104caa:	d031      	beq.n	8104d10 <HAL_DMA_Start_IT+0x350>
 8104cac:	68fb      	ldr	r3, [r7, #12]
 8104cae:	681b      	ldr	r3, [r3, #0]
 8104cb0:	4a6e      	ldr	r2, [pc, #440]	; (8104e6c <HAL_DMA_Start_IT+0x4ac>)
 8104cb2:	4293      	cmp	r3, r2
 8104cb4:	d02c      	beq.n	8104d10 <HAL_DMA_Start_IT+0x350>
 8104cb6:	68fb      	ldr	r3, [r7, #12]
 8104cb8:	681b      	ldr	r3, [r3, #0]
 8104cba:	4a6d      	ldr	r2, [pc, #436]	; (8104e70 <HAL_DMA_Start_IT+0x4b0>)
 8104cbc:	4293      	cmp	r3, r2
 8104cbe:	d027      	beq.n	8104d10 <HAL_DMA_Start_IT+0x350>
 8104cc0:	68fb      	ldr	r3, [r7, #12]
 8104cc2:	681b      	ldr	r3, [r3, #0]
 8104cc4:	4a6b      	ldr	r2, [pc, #428]	; (8104e74 <HAL_DMA_Start_IT+0x4b4>)
 8104cc6:	4293      	cmp	r3, r2
 8104cc8:	d022      	beq.n	8104d10 <HAL_DMA_Start_IT+0x350>
 8104cca:	68fb      	ldr	r3, [r7, #12]
 8104ccc:	681b      	ldr	r3, [r3, #0]
 8104cce:	4a6a      	ldr	r2, [pc, #424]	; (8104e78 <HAL_DMA_Start_IT+0x4b8>)
 8104cd0:	4293      	cmp	r3, r2
 8104cd2:	d01d      	beq.n	8104d10 <HAL_DMA_Start_IT+0x350>
 8104cd4:	68fb      	ldr	r3, [r7, #12]
 8104cd6:	681b      	ldr	r3, [r3, #0]
 8104cd8:	4a68      	ldr	r2, [pc, #416]	; (8104e7c <HAL_DMA_Start_IT+0x4bc>)
 8104cda:	4293      	cmp	r3, r2
 8104cdc:	d018      	beq.n	8104d10 <HAL_DMA_Start_IT+0x350>
 8104cde:	68fb      	ldr	r3, [r7, #12]
 8104ce0:	681b      	ldr	r3, [r3, #0]
 8104ce2:	4a67      	ldr	r2, [pc, #412]	; (8104e80 <HAL_DMA_Start_IT+0x4c0>)
 8104ce4:	4293      	cmp	r3, r2
 8104ce6:	d013      	beq.n	8104d10 <HAL_DMA_Start_IT+0x350>
 8104ce8:	68fb      	ldr	r3, [r7, #12]
 8104cea:	681b      	ldr	r3, [r3, #0]
 8104cec:	4a65      	ldr	r2, [pc, #404]	; (8104e84 <HAL_DMA_Start_IT+0x4c4>)
 8104cee:	4293      	cmp	r3, r2
 8104cf0:	d00e      	beq.n	8104d10 <HAL_DMA_Start_IT+0x350>
 8104cf2:	68fb      	ldr	r3, [r7, #12]
 8104cf4:	681b      	ldr	r3, [r3, #0]
 8104cf6:	4a64      	ldr	r2, [pc, #400]	; (8104e88 <HAL_DMA_Start_IT+0x4c8>)
 8104cf8:	4293      	cmp	r3, r2
 8104cfa:	d009      	beq.n	8104d10 <HAL_DMA_Start_IT+0x350>
 8104cfc:	68fb      	ldr	r3, [r7, #12]
 8104cfe:	681b      	ldr	r3, [r3, #0]
 8104d00:	4a62      	ldr	r2, [pc, #392]	; (8104e8c <HAL_DMA_Start_IT+0x4cc>)
 8104d02:	4293      	cmp	r3, r2
 8104d04:	d004      	beq.n	8104d10 <HAL_DMA_Start_IT+0x350>
 8104d06:	68fb      	ldr	r3, [r7, #12]
 8104d08:	681b      	ldr	r3, [r3, #0]
 8104d0a:	4a61      	ldr	r2, [pc, #388]	; (8104e90 <HAL_DMA_Start_IT+0x4d0>)
 8104d0c:	4293      	cmp	r3, r2
 8104d0e:	d101      	bne.n	8104d14 <HAL_DMA_Start_IT+0x354>
 8104d10:	2301      	movs	r3, #1
 8104d12:	e000      	b.n	8104d16 <HAL_DMA_Start_IT+0x356>
 8104d14:	2300      	movs	r3, #0
 8104d16:	2b00      	cmp	r3, #0
 8104d18:	d01a      	beq.n	8104d50 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8104d1a:	68fb      	ldr	r3, [r7, #12]
 8104d1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8104d1e:	681b      	ldr	r3, [r3, #0]
 8104d20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8104d24:	2b00      	cmp	r3, #0
 8104d26:	d007      	beq.n	8104d38 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8104d28:	68fb      	ldr	r3, [r7, #12]
 8104d2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8104d2c:	681a      	ldr	r2, [r3, #0]
 8104d2e:	68fb      	ldr	r3, [r7, #12]
 8104d30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8104d32:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8104d36:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8104d38:	68fb      	ldr	r3, [r7, #12]
 8104d3a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8104d3c:	2b00      	cmp	r3, #0
 8104d3e:	d007      	beq.n	8104d50 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8104d40:	68fb      	ldr	r3, [r7, #12]
 8104d42:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8104d44:	681a      	ldr	r2, [r3, #0]
 8104d46:	68fb      	ldr	r3, [r7, #12]
 8104d48:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8104d4a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8104d4e:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8104d50:	68fb      	ldr	r3, [r7, #12]
 8104d52:	681b      	ldr	r3, [r3, #0]
 8104d54:	4a37      	ldr	r2, [pc, #220]	; (8104e34 <HAL_DMA_Start_IT+0x474>)
 8104d56:	4293      	cmp	r3, r2
 8104d58:	d04a      	beq.n	8104df0 <HAL_DMA_Start_IT+0x430>
 8104d5a:	68fb      	ldr	r3, [r7, #12]
 8104d5c:	681b      	ldr	r3, [r3, #0]
 8104d5e:	4a36      	ldr	r2, [pc, #216]	; (8104e38 <HAL_DMA_Start_IT+0x478>)
 8104d60:	4293      	cmp	r3, r2
 8104d62:	d045      	beq.n	8104df0 <HAL_DMA_Start_IT+0x430>
 8104d64:	68fb      	ldr	r3, [r7, #12]
 8104d66:	681b      	ldr	r3, [r3, #0]
 8104d68:	4a34      	ldr	r2, [pc, #208]	; (8104e3c <HAL_DMA_Start_IT+0x47c>)
 8104d6a:	4293      	cmp	r3, r2
 8104d6c:	d040      	beq.n	8104df0 <HAL_DMA_Start_IT+0x430>
 8104d6e:	68fb      	ldr	r3, [r7, #12]
 8104d70:	681b      	ldr	r3, [r3, #0]
 8104d72:	4a33      	ldr	r2, [pc, #204]	; (8104e40 <HAL_DMA_Start_IT+0x480>)
 8104d74:	4293      	cmp	r3, r2
 8104d76:	d03b      	beq.n	8104df0 <HAL_DMA_Start_IT+0x430>
 8104d78:	68fb      	ldr	r3, [r7, #12]
 8104d7a:	681b      	ldr	r3, [r3, #0]
 8104d7c:	4a31      	ldr	r2, [pc, #196]	; (8104e44 <HAL_DMA_Start_IT+0x484>)
 8104d7e:	4293      	cmp	r3, r2
 8104d80:	d036      	beq.n	8104df0 <HAL_DMA_Start_IT+0x430>
 8104d82:	68fb      	ldr	r3, [r7, #12]
 8104d84:	681b      	ldr	r3, [r3, #0]
 8104d86:	4a30      	ldr	r2, [pc, #192]	; (8104e48 <HAL_DMA_Start_IT+0x488>)
 8104d88:	4293      	cmp	r3, r2
 8104d8a:	d031      	beq.n	8104df0 <HAL_DMA_Start_IT+0x430>
 8104d8c:	68fb      	ldr	r3, [r7, #12]
 8104d8e:	681b      	ldr	r3, [r3, #0]
 8104d90:	4a2e      	ldr	r2, [pc, #184]	; (8104e4c <HAL_DMA_Start_IT+0x48c>)
 8104d92:	4293      	cmp	r3, r2
 8104d94:	d02c      	beq.n	8104df0 <HAL_DMA_Start_IT+0x430>
 8104d96:	68fb      	ldr	r3, [r7, #12]
 8104d98:	681b      	ldr	r3, [r3, #0]
 8104d9a:	4a2d      	ldr	r2, [pc, #180]	; (8104e50 <HAL_DMA_Start_IT+0x490>)
 8104d9c:	4293      	cmp	r3, r2
 8104d9e:	d027      	beq.n	8104df0 <HAL_DMA_Start_IT+0x430>
 8104da0:	68fb      	ldr	r3, [r7, #12]
 8104da2:	681b      	ldr	r3, [r3, #0]
 8104da4:	4a2b      	ldr	r2, [pc, #172]	; (8104e54 <HAL_DMA_Start_IT+0x494>)
 8104da6:	4293      	cmp	r3, r2
 8104da8:	d022      	beq.n	8104df0 <HAL_DMA_Start_IT+0x430>
 8104daa:	68fb      	ldr	r3, [r7, #12]
 8104dac:	681b      	ldr	r3, [r3, #0]
 8104dae:	4a2a      	ldr	r2, [pc, #168]	; (8104e58 <HAL_DMA_Start_IT+0x498>)
 8104db0:	4293      	cmp	r3, r2
 8104db2:	d01d      	beq.n	8104df0 <HAL_DMA_Start_IT+0x430>
 8104db4:	68fb      	ldr	r3, [r7, #12]
 8104db6:	681b      	ldr	r3, [r3, #0]
 8104db8:	4a28      	ldr	r2, [pc, #160]	; (8104e5c <HAL_DMA_Start_IT+0x49c>)
 8104dba:	4293      	cmp	r3, r2
 8104dbc:	d018      	beq.n	8104df0 <HAL_DMA_Start_IT+0x430>
 8104dbe:	68fb      	ldr	r3, [r7, #12]
 8104dc0:	681b      	ldr	r3, [r3, #0]
 8104dc2:	4a27      	ldr	r2, [pc, #156]	; (8104e60 <HAL_DMA_Start_IT+0x4a0>)
 8104dc4:	4293      	cmp	r3, r2
 8104dc6:	d013      	beq.n	8104df0 <HAL_DMA_Start_IT+0x430>
 8104dc8:	68fb      	ldr	r3, [r7, #12]
 8104dca:	681b      	ldr	r3, [r3, #0]
 8104dcc:	4a25      	ldr	r2, [pc, #148]	; (8104e64 <HAL_DMA_Start_IT+0x4a4>)
 8104dce:	4293      	cmp	r3, r2
 8104dd0:	d00e      	beq.n	8104df0 <HAL_DMA_Start_IT+0x430>
 8104dd2:	68fb      	ldr	r3, [r7, #12]
 8104dd4:	681b      	ldr	r3, [r3, #0]
 8104dd6:	4a24      	ldr	r2, [pc, #144]	; (8104e68 <HAL_DMA_Start_IT+0x4a8>)
 8104dd8:	4293      	cmp	r3, r2
 8104dda:	d009      	beq.n	8104df0 <HAL_DMA_Start_IT+0x430>
 8104ddc:	68fb      	ldr	r3, [r7, #12]
 8104dde:	681b      	ldr	r3, [r3, #0]
 8104de0:	4a22      	ldr	r2, [pc, #136]	; (8104e6c <HAL_DMA_Start_IT+0x4ac>)
 8104de2:	4293      	cmp	r3, r2
 8104de4:	d004      	beq.n	8104df0 <HAL_DMA_Start_IT+0x430>
 8104de6:	68fb      	ldr	r3, [r7, #12]
 8104de8:	681b      	ldr	r3, [r3, #0]
 8104dea:	4a21      	ldr	r2, [pc, #132]	; (8104e70 <HAL_DMA_Start_IT+0x4b0>)
 8104dec:	4293      	cmp	r3, r2
 8104dee:	d108      	bne.n	8104e02 <HAL_DMA_Start_IT+0x442>
 8104df0:	68fb      	ldr	r3, [r7, #12]
 8104df2:	681b      	ldr	r3, [r3, #0]
 8104df4:	681a      	ldr	r2, [r3, #0]
 8104df6:	68fb      	ldr	r3, [r7, #12]
 8104df8:	681b      	ldr	r3, [r3, #0]
 8104dfa:	f042 0201 	orr.w	r2, r2, #1
 8104dfe:	601a      	str	r2, [r3, #0]
 8104e00:	e012      	b.n	8104e28 <HAL_DMA_Start_IT+0x468>
 8104e02:	68fb      	ldr	r3, [r7, #12]
 8104e04:	681b      	ldr	r3, [r3, #0]
 8104e06:	681a      	ldr	r2, [r3, #0]
 8104e08:	68fb      	ldr	r3, [r7, #12]
 8104e0a:	681b      	ldr	r3, [r3, #0]
 8104e0c:	f042 0201 	orr.w	r2, r2, #1
 8104e10:	601a      	str	r2, [r3, #0]
 8104e12:	e009      	b.n	8104e28 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8104e14:	68fb      	ldr	r3, [r7, #12]
 8104e16:	2200      	movs	r2, #0
 8104e18:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8104e1c:	68fb      	ldr	r3, [r7, #12]
 8104e1e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8104e22:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    status = HAL_ERROR;
 8104e24:	2301      	movs	r3, #1
 8104e26:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8104e28:	7dfb      	ldrb	r3, [r7, #23]
}
 8104e2a:	4618      	mov	r0, r3
 8104e2c:	3718      	adds	r7, #24
 8104e2e:	46bd      	mov	sp, r7
 8104e30:	bd80      	pop	{r7, pc}
 8104e32:	bf00      	nop
 8104e34:	40020010 	.word	0x40020010
 8104e38:	40020028 	.word	0x40020028
 8104e3c:	40020040 	.word	0x40020040
 8104e40:	40020058 	.word	0x40020058
 8104e44:	40020070 	.word	0x40020070
 8104e48:	40020088 	.word	0x40020088
 8104e4c:	400200a0 	.word	0x400200a0
 8104e50:	400200b8 	.word	0x400200b8
 8104e54:	40020410 	.word	0x40020410
 8104e58:	40020428 	.word	0x40020428
 8104e5c:	40020440 	.word	0x40020440
 8104e60:	40020458 	.word	0x40020458
 8104e64:	40020470 	.word	0x40020470
 8104e68:	40020488 	.word	0x40020488
 8104e6c:	400204a0 	.word	0x400204a0
 8104e70:	400204b8 	.word	0x400204b8
 8104e74:	58025408 	.word	0x58025408
 8104e78:	5802541c 	.word	0x5802541c
 8104e7c:	58025430 	.word	0x58025430
 8104e80:	58025444 	.word	0x58025444
 8104e84:	58025458 	.word	0x58025458
 8104e88:	5802546c 	.word	0x5802546c
 8104e8c:	58025480 	.word	0x58025480
 8104e90:	58025494 	.word	0x58025494

08104e94 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8104e94:	b580      	push	{r7, lr}
 8104e96:	b086      	sub	sp, #24
 8104e98:	af00      	add	r7, sp, #0
 8104e9a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8104e9c:	f7fd fdac 	bl	81029f8 <HAL_GetTick>
 8104ea0:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8104ea2:	687b      	ldr	r3, [r7, #4]
 8104ea4:	2b00      	cmp	r3, #0
 8104ea6:	d101      	bne.n	8104eac <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8104ea8:	2301      	movs	r3, #1
 8104eaa:	e2dc      	b.n	8105466 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8104eac:	687b      	ldr	r3, [r7, #4]
 8104eae:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8104eb2:	b2db      	uxtb	r3, r3
 8104eb4:	2b02      	cmp	r3, #2
 8104eb6:	d008      	beq.n	8104eca <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8104eb8:	687b      	ldr	r3, [r7, #4]
 8104eba:	2280      	movs	r2, #128	; 0x80
 8104ebc:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8104ebe:	687b      	ldr	r3, [r7, #4]
 8104ec0:	2200      	movs	r2, #0
 8104ec2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8104ec6:	2301      	movs	r3, #1
 8104ec8:	e2cd      	b.n	8105466 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8104eca:	687b      	ldr	r3, [r7, #4]
 8104ecc:	681b      	ldr	r3, [r3, #0]
 8104ece:	4a76      	ldr	r2, [pc, #472]	; (81050a8 <HAL_DMA_Abort+0x214>)
 8104ed0:	4293      	cmp	r3, r2
 8104ed2:	d04a      	beq.n	8104f6a <HAL_DMA_Abort+0xd6>
 8104ed4:	687b      	ldr	r3, [r7, #4]
 8104ed6:	681b      	ldr	r3, [r3, #0]
 8104ed8:	4a74      	ldr	r2, [pc, #464]	; (81050ac <HAL_DMA_Abort+0x218>)
 8104eda:	4293      	cmp	r3, r2
 8104edc:	d045      	beq.n	8104f6a <HAL_DMA_Abort+0xd6>
 8104ede:	687b      	ldr	r3, [r7, #4]
 8104ee0:	681b      	ldr	r3, [r3, #0]
 8104ee2:	4a73      	ldr	r2, [pc, #460]	; (81050b0 <HAL_DMA_Abort+0x21c>)
 8104ee4:	4293      	cmp	r3, r2
 8104ee6:	d040      	beq.n	8104f6a <HAL_DMA_Abort+0xd6>
 8104ee8:	687b      	ldr	r3, [r7, #4]
 8104eea:	681b      	ldr	r3, [r3, #0]
 8104eec:	4a71      	ldr	r2, [pc, #452]	; (81050b4 <HAL_DMA_Abort+0x220>)
 8104eee:	4293      	cmp	r3, r2
 8104ef0:	d03b      	beq.n	8104f6a <HAL_DMA_Abort+0xd6>
 8104ef2:	687b      	ldr	r3, [r7, #4]
 8104ef4:	681b      	ldr	r3, [r3, #0]
 8104ef6:	4a70      	ldr	r2, [pc, #448]	; (81050b8 <HAL_DMA_Abort+0x224>)
 8104ef8:	4293      	cmp	r3, r2
 8104efa:	d036      	beq.n	8104f6a <HAL_DMA_Abort+0xd6>
 8104efc:	687b      	ldr	r3, [r7, #4]
 8104efe:	681b      	ldr	r3, [r3, #0]
 8104f00:	4a6e      	ldr	r2, [pc, #440]	; (81050bc <HAL_DMA_Abort+0x228>)
 8104f02:	4293      	cmp	r3, r2
 8104f04:	d031      	beq.n	8104f6a <HAL_DMA_Abort+0xd6>
 8104f06:	687b      	ldr	r3, [r7, #4]
 8104f08:	681b      	ldr	r3, [r3, #0]
 8104f0a:	4a6d      	ldr	r2, [pc, #436]	; (81050c0 <HAL_DMA_Abort+0x22c>)
 8104f0c:	4293      	cmp	r3, r2
 8104f0e:	d02c      	beq.n	8104f6a <HAL_DMA_Abort+0xd6>
 8104f10:	687b      	ldr	r3, [r7, #4]
 8104f12:	681b      	ldr	r3, [r3, #0]
 8104f14:	4a6b      	ldr	r2, [pc, #428]	; (81050c4 <HAL_DMA_Abort+0x230>)
 8104f16:	4293      	cmp	r3, r2
 8104f18:	d027      	beq.n	8104f6a <HAL_DMA_Abort+0xd6>
 8104f1a:	687b      	ldr	r3, [r7, #4]
 8104f1c:	681b      	ldr	r3, [r3, #0]
 8104f1e:	4a6a      	ldr	r2, [pc, #424]	; (81050c8 <HAL_DMA_Abort+0x234>)
 8104f20:	4293      	cmp	r3, r2
 8104f22:	d022      	beq.n	8104f6a <HAL_DMA_Abort+0xd6>
 8104f24:	687b      	ldr	r3, [r7, #4]
 8104f26:	681b      	ldr	r3, [r3, #0]
 8104f28:	4a68      	ldr	r2, [pc, #416]	; (81050cc <HAL_DMA_Abort+0x238>)
 8104f2a:	4293      	cmp	r3, r2
 8104f2c:	d01d      	beq.n	8104f6a <HAL_DMA_Abort+0xd6>
 8104f2e:	687b      	ldr	r3, [r7, #4]
 8104f30:	681b      	ldr	r3, [r3, #0]
 8104f32:	4a67      	ldr	r2, [pc, #412]	; (81050d0 <HAL_DMA_Abort+0x23c>)
 8104f34:	4293      	cmp	r3, r2
 8104f36:	d018      	beq.n	8104f6a <HAL_DMA_Abort+0xd6>
 8104f38:	687b      	ldr	r3, [r7, #4]
 8104f3a:	681b      	ldr	r3, [r3, #0]
 8104f3c:	4a65      	ldr	r2, [pc, #404]	; (81050d4 <HAL_DMA_Abort+0x240>)
 8104f3e:	4293      	cmp	r3, r2
 8104f40:	d013      	beq.n	8104f6a <HAL_DMA_Abort+0xd6>
 8104f42:	687b      	ldr	r3, [r7, #4]
 8104f44:	681b      	ldr	r3, [r3, #0]
 8104f46:	4a64      	ldr	r2, [pc, #400]	; (81050d8 <HAL_DMA_Abort+0x244>)
 8104f48:	4293      	cmp	r3, r2
 8104f4a:	d00e      	beq.n	8104f6a <HAL_DMA_Abort+0xd6>
 8104f4c:	687b      	ldr	r3, [r7, #4]
 8104f4e:	681b      	ldr	r3, [r3, #0]
 8104f50:	4a62      	ldr	r2, [pc, #392]	; (81050dc <HAL_DMA_Abort+0x248>)
 8104f52:	4293      	cmp	r3, r2
 8104f54:	d009      	beq.n	8104f6a <HAL_DMA_Abort+0xd6>
 8104f56:	687b      	ldr	r3, [r7, #4]
 8104f58:	681b      	ldr	r3, [r3, #0]
 8104f5a:	4a61      	ldr	r2, [pc, #388]	; (81050e0 <HAL_DMA_Abort+0x24c>)
 8104f5c:	4293      	cmp	r3, r2
 8104f5e:	d004      	beq.n	8104f6a <HAL_DMA_Abort+0xd6>
 8104f60:	687b      	ldr	r3, [r7, #4]
 8104f62:	681b      	ldr	r3, [r3, #0]
 8104f64:	4a5f      	ldr	r2, [pc, #380]	; (81050e4 <HAL_DMA_Abort+0x250>)
 8104f66:	4293      	cmp	r3, r2
 8104f68:	d101      	bne.n	8104f6e <HAL_DMA_Abort+0xda>
 8104f6a:	2301      	movs	r3, #1
 8104f6c:	e000      	b.n	8104f70 <HAL_DMA_Abort+0xdc>
 8104f6e:	2300      	movs	r3, #0
 8104f70:	2b00      	cmp	r3, #0
 8104f72:	d013      	beq.n	8104f9c <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8104f74:	687b      	ldr	r3, [r7, #4]
 8104f76:	681b      	ldr	r3, [r3, #0]
 8104f78:	681a      	ldr	r2, [r3, #0]
 8104f7a:	687b      	ldr	r3, [r7, #4]
 8104f7c:	681b      	ldr	r3, [r3, #0]
 8104f7e:	f022 021e 	bic.w	r2, r2, #30
 8104f82:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8104f84:	687b      	ldr	r3, [r7, #4]
 8104f86:	681b      	ldr	r3, [r3, #0]
 8104f88:	695a      	ldr	r2, [r3, #20]
 8104f8a:	687b      	ldr	r3, [r7, #4]
 8104f8c:	681b      	ldr	r3, [r3, #0]
 8104f8e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8104f92:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8104f94:	687b      	ldr	r3, [r7, #4]
 8104f96:	681b      	ldr	r3, [r3, #0]
 8104f98:	617b      	str	r3, [r7, #20]
 8104f9a:	e00a      	b.n	8104fb2 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8104f9c:	687b      	ldr	r3, [r7, #4]
 8104f9e:	681b      	ldr	r3, [r3, #0]
 8104fa0:	681a      	ldr	r2, [r3, #0]
 8104fa2:	687b      	ldr	r3, [r7, #4]
 8104fa4:	681b      	ldr	r3, [r3, #0]
 8104fa6:	f022 020e 	bic.w	r2, r2, #14
 8104faa:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8104fac:	687b      	ldr	r3, [r7, #4]
 8104fae:	681b      	ldr	r3, [r3, #0]
 8104fb0:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8104fb2:	687b      	ldr	r3, [r7, #4]
 8104fb4:	681b      	ldr	r3, [r3, #0]
 8104fb6:	4a3c      	ldr	r2, [pc, #240]	; (81050a8 <HAL_DMA_Abort+0x214>)
 8104fb8:	4293      	cmp	r3, r2
 8104fba:	d072      	beq.n	81050a2 <HAL_DMA_Abort+0x20e>
 8104fbc:	687b      	ldr	r3, [r7, #4]
 8104fbe:	681b      	ldr	r3, [r3, #0]
 8104fc0:	4a3a      	ldr	r2, [pc, #232]	; (81050ac <HAL_DMA_Abort+0x218>)
 8104fc2:	4293      	cmp	r3, r2
 8104fc4:	d06d      	beq.n	81050a2 <HAL_DMA_Abort+0x20e>
 8104fc6:	687b      	ldr	r3, [r7, #4]
 8104fc8:	681b      	ldr	r3, [r3, #0]
 8104fca:	4a39      	ldr	r2, [pc, #228]	; (81050b0 <HAL_DMA_Abort+0x21c>)
 8104fcc:	4293      	cmp	r3, r2
 8104fce:	d068      	beq.n	81050a2 <HAL_DMA_Abort+0x20e>
 8104fd0:	687b      	ldr	r3, [r7, #4]
 8104fd2:	681b      	ldr	r3, [r3, #0]
 8104fd4:	4a37      	ldr	r2, [pc, #220]	; (81050b4 <HAL_DMA_Abort+0x220>)
 8104fd6:	4293      	cmp	r3, r2
 8104fd8:	d063      	beq.n	81050a2 <HAL_DMA_Abort+0x20e>
 8104fda:	687b      	ldr	r3, [r7, #4]
 8104fdc:	681b      	ldr	r3, [r3, #0]
 8104fde:	4a36      	ldr	r2, [pc, #216]	; (81050b8 <HAL_DMA_Abort+0x224>)
 8104fe0:	4293      	cmp	r3, r2
 8104fe2:	d05e      	beq.n	81050a2 <HAL_DMA_Abort+0x20e>
 8104fe4:	687b      	ldr	r3, [r7, #4]
 8104fe6:	681b      	ldr	r3, [r3, #0]
 8104fe8:	4a34      	ldr	r2, [pc, #208]	; (81050bc <HAL_DMA_Abort+0x228>)
 8104fea:	4293      	cmp	r3, r2
 8104fec:	d059      	beq.n	81050a2 <HAL_DMA_Abort+0x20e>
 8104fee:	687b      	ldr	r3, [r7, #4]
 8104ff0:	681b      	ldr	r3, [r3, #0]
 8104ff2:	4a33      	ldr	r2, [pc, #204]	; (81050c0 <HAL_DMA_Abort+0x22c>)
 8104ff4:	4293      	cmp	r3, r2
 8104ff6:	d054      	beq.n	81050a2 <HAL_DMA_Abort+0x20e>
 8104ff8:	687b      	ldr	r3, [r7, #4]
 8104ffa:	681b      	ldr	r3, [r3, #0]
 8104ffc:	4a31      	ldr	r2, [pc, #196]	; (81050c4 <HAL_DMA_Abort+0x230>)
 8104ffe:	4293      	cmp	r3, r2
 8105000:	d04f      	beq.n	81050a2 <HAL_DMA_Abort+0x20e>
 8105002:	687b      	ldr	r3, [r7, #4]
 8105004:	681b      	ldr	r3, [r3, #0]
 8105006:	4a30      	ldr	r2, [pc, #192]	; (81050c8 <HAL_DMA_Abort+0x234>)
 8105008:	4293      	cmp	r3, r2
 810500a:	d04a      	beq.n	81050a2 <HAL_DMA_Abort+0x20e>
 810500c:	687b      	ldr	r3, [r7, #4]
 810500e:	681b      	ldr	r3, [r3, #0]
 8105010:	4a2e      	ldr	r2, [pc, #184]	; (81050cc <HAL_DMA_Abort+0x238>)
 8105012:	4293      	cmp	r3, r2
 8105014:	d045      	beq.n	81050a2 <HAL_DMA_Abort+0x20e>
 8105016:	687b      	ldr	r3, [r7, #4]
 8105018:	681b      	ldr	r3, [r3, #0]
 810501a:	4a2d      	ldr	r2, [pc, #180]	; (81050d0 <HAL_DMA_Abort+0x23c>)
 810501c:	4293      	cmp	r3, r2
 810501e:	d040      	beq.n	81050a2 <HAL_DMA_Abort+0x20e>
 8105020:	687b      	ldr	r3, [r7, #4]
 8105022:	681b      	ldr	r3, [r3, #0]
 8105024:	4a2b      	ldr	r2, [pc, #172]	; (81050d4 <HAL_DMA_Abort+0x240>)
 8105026:	4293      	cmp	r3, r2
 8105028:	d03b      	beq.n	81050a2 <HAL_DMA_Abort+0x20e>
 810502a:	687b      	ldr	r3, [r7, #4]
 810502c:	681b      	ldr	r3, [r3, #0]
 810502e:	4a2a      	ldr	r2, [pc, #168]	; (81050d8 <HAL_DMA_Abort+0x244>)
 8105030:	4293      	cmp	r3, r2
 8105032:	d036      	beq.n	81050a2 <HAL_DMA_Abort+0x20e>
 8105034:	687b      	ldr	r3, [r7, #4]
 8105036:	681b      	ldr	r3, [r3, #0]
 8105038:	4a28      	ldr	r2, [pc, #160]	; (81050dc <HAL_DMA_Abort+0x248>)
 810503a:	4293      	cmp	r3, r2
 810503c:	d031      	beq.n	81050a2 <HAL_DMA_Abort+0x20e>
 810503e:	687b      	ldr	r3, [r7, #4]
 8105040:	681b      	ldr	r3, [r3, #0]
 8105042:	4a27      	ldr	r2, [pc, #156]	; (81050e0 <HAL_DMA_Abort+0x24c>)
 8105044:	4293      	cmp	r3, r2
 8105046:	d02c      	beq.n	81050a2 <HAL_DMA_Abort+0x20e>
 8105048:	687b      	ldr	r3, [r7, #4]
 810504a:	681b      	ldr	r3, [r3, #0]
 810504c:	4a25      	ldr	r2, [pc, #148]	; (81050e4 <HAL_DMA_Abort+0x250>)
 810504e:	4293      	cmp	r3, r2
 8105050:	d027      	beq.n	81050a2 <HAL_DMA_Abort+0x20e>
 8105052:	687b      	ldr	r3, [r7, #4]
 8105054:	681b      	ldr	r3, [r3, #0]
 8105056:	4a24      	ldr	r2, [pc, #144]	; (81050e8 <HAL_DMA_Abort+0x254>)
 8105058:	4293      	cmp	r3, r2
 810505a:	d022      	beq.n	81050a2 <HAL_DMA_Abort+0x20e>
 810505c:	687b      	ldr	r3, [r7, #4]
 810505e:	681b      	ldr	r3, [r3, #0]
 8105060:	4a22      	ldr	r2, [pc, #136]	; (81050ec <HAL_DMA_Abort+0x258>)
 8105062:	4293      	cmp	r3, r2
 8105064:	d01d      	beq.n	81050a2 <HAL_DMA_Abort+0x20e>
 8105066:	687b      	ldr	r3, [r7, #4]
 8105068:	681b      	ldr	r3, [r3, #0]
 810506a:	4a21      	ldr	r2, [pc, #132]	; (81050f0 <HAL_DMA_Abort+0x25c>)
 810506c:	4293      	cmp	r3, r2
 810506e:	d018      	beq.n	81050a2 <HAL_DMA_Abort+0x20e>
 8105070:	687b      	ldr	r3, [r7, #4]
 8105072:	681b      	ldr	r3, [r3, #0]
 8105074:	4a1f      	ldr	r2, [pc, #124]	; (81050f4 <HAL_DMA_Abort+0x260>)
 8105076:	4293      	cmp	r3, r2
 8105078:	d013      	beq.n	81050a2 <HAL_DMA_Abort+0x20e>
 810507a:	687b      	ldr	r3, [r7, #4]
 810507c:	681b      	ldr	r3, [r3, #0]
 810507e:	4a1e      	ldr	r2, [pc, #120]	; (81050f8 <HAL_DMA_Abort+0x264>)
 8105080:	4293      	cmp	r3, r2
 8105082:	d00e      	beq.n	81050a2 <HAL_DMA_Abort+0x20e>
 8105084:	687b      	ldr	r3, [r7, #4]
 8105086:	681b      	ldr	r3, [r3, #0]
 8105088:	4a1c      	ldr	r2, [pc, #112]	; (81050fc <HAL_DMA_Abort+0x268>)
 810508a:	4293      	cmp	r3, r2
 810508c:	d009      	beq.n	81050a2 <HAL_DMA_Abort+0x20e>
 810508e:	687b      	ldr	r3, [r7, #4]
 8105090:	681b      	ldr	r3, [r3, #0]
 8105092:	4a1b      	ldr	r2, [pc, #108]	; (8105100 <HAL_DMA_Abort+0x26c>)
 8105094:	4293      	cmp	r3, r2
 8105096:	d004      	beq.n	81050a2 <HAL_DMA_Abort+0x20e>
 8105098:	687b      	ldr	r3, [r7, #4]
 810509a:	681b      	ldr	r3, [r3, #0]
 810509c:	4a19      	ldr	r2, [pc, #100]	; (8105104 <HAL_DMA_Abort+0x270>)
 810509e:	4293      	cmp	r3, r2
 81050a0:	d132      	bne.n	8105108 <HAL_DMA_Abort+0x274>
 81050a2:	2301      	movs	r3, #1
 81050a4:	e031      	b.n	810510a <HAL_DMA_Abort+0x276>
 81050a6:	bf00      	nop
 81050a8:	40020010 	.word	0x40020010
 81050ac:	40020028 	.word	0x40020028
 81050b0:	40020040 	.word	0x40020040
 81050b4:	40020058 	.word	0x40020058
 81050b8:	40020070 	.word	0x40020070
 81050bc:	40020088 	.word	0x40020088
 81050c0:	400200a0 	.word	0x400200a0
 81050c4:	400200b8 	.word	0x400200b8
 81050c8:	40020410 	.word	0x40020410
 81050cc:	40020428 	.word	0x40020428
 81050d0:	40020440 	.word	0x40020440
 81050d4:	40020458 	.word	0x40020458
 81050d8:	40020470 	.word	0x40020470
 81050dc:	40020488 	.word	0x40020488
 81050e0:	400204a0 	.word	0x400204a0
 81050e4:	400204b8 	.word	0x400204b8
 81050e8:	58025408 	.word	0x58025408
 81050ec:	5802541c 	.word	0x5802541c
 81050f0:	58025430 	.word	0x58025430
 81050f4:	58025444 	.word	0x58025444
 81050f8:	58025458 	.word	0x58025458
 81050fc:	5802546c 	.word	0x5802546c
 8105100:	58025480 	.word	0x58025480
 8105104:	58025494 	.word	0x58025494
 8105108:	2300      	movs	r3, #0
 810510a:	2b00      	cmp	r3, #0
 810510c:	d007      	beq.n	810511e <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 810510e:	687b      	ldr	r3, [r7, #4]
 8105110:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8105112:	681a      	ldr	r2, [r3, #0]
 8105114:	687b      	ldr	r3, [r7, #4]
 8105116:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8105118:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 810511c:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 810511e:	687b      	ldr	r3, [r7, #4]
 8105120:	681b      	ldr	r3, [r3, #0]
 8105122:	4a6d      	ldr	r2, [pc, #436]	; (81052d8 <HAL_DMA_Abort+0x444>)
 8105124:	4293      	cmp	r3, r2
 8105126:	d04a      	beq.n	81051be <HAL_DMA_Abort+0x32a>
 8105128:	687b      	ldr	r3, [r7, #4]
 810512a:	681b      	ldr	r3, [r3, #0]
 810512c:	4a6b      	ldr	r2, [pc, #428]	; (81052dc <HAL_DMA_Abort+0x448>)
 810512e:	4293      	cmp	r3, r2
 8105130:	d045      	beq.n	81051be <HAL_DMA_Abort+0x32a>
 8105132:	687b      	ldr	r3, [r7, #4]
 8105134:	681b      	ldr	r3, [r3, #0]
 8105136:	4a6a      	ldr	r2, [pc, #424]	; (81052e0 <HAL_DMA_Abort+0x44c>)
 8105138:	4293      	cmp	r3, r2
 810513a:	d040      	beq.n	81051be <HAL_DMA_Abort+0x32a>
 810513c:	687b      	ldr	r3, [r7, #4]
 810513e:	681b      	ldr	r3, [r3, #0]
 8105140:	4a68      	ldr	r2, [pc, #416]	; (81052e4 <HAL_DMA_Abort+0x450>)
 8105142:	4293      	cmp	r3, r2
 8105144:	d03b      	beq.n	81051be <HAL_DMA_Abort+0x32a>
 8105146:	687b      	ldr	r3, [r7, #4]
 8105148:	681b      	ldr	r3, [r3, #0]
 810514a:	4a67      	ldr	r2, [pc, #412]	; (81052e8 <HAL_DMA_Abort+0x454>)
 810514c:	4293      	cmp	r3, r2
 810514e:	d036      	beq.n	81051be <HAL_DMA_Abort+0x32a>
 8105150:	687b      	ldr	r3, [r7, #4]
 8105152:	681b      	ldr	r3, [r3, #0]
 8105154:	4a65      	ldr	r2, [pc, #404]	; (81052ec <HAL_DMA_Abort+0x458>)
 8105156:	4293      	cmp	r3, r2
 8105158:	d031      	beq.n	81051be <HAL_DMA_Abort+0x32a>
 810515a:	687b      	ldr	r3, [r7, #4]
 810515c:	681b      	ldr	r3, [r3, #0]
 810515e:	4a64      	ldr	r2, [pc, #400]	; (81052f0 <HAL_DMA_Abort+0x45c>)
 8105160:	4293      	cmp	r3, r2
 8105162:	d02c      	beq.n	81051be <HAL_DMA_Abort+0x32a>
 8105164:	687b      	ldr	r3, [r7, #4]
 8105166:	681b      	ldr	r3, [r3, #0]
 8105168:	4a62      	ldr	r2, [pc, #392]	; (81052f4 <HAL_DMA_Abort+0x460>)
 810516a:	4293      	cmp	r3, r2
 810516c:	d027      	beq.n	81051be <HAL_DMA_Abort+0x32a>
 810516e:	687b      	ldr	r3, [r7, #4]
 8105170:	681b      	ldr	r3, [r3, #0]
 8105172:	4a61      	ldr	r2, [pc, #388]	; (81052f8 <HAL_DMA_Abort+0x464>)
 8105174:	4293      	cmp	r3, r2
 8105176:	d022      	beq.n	81051be <HAL_DMA_Abort+0x32a>
 8105178:	687b      	ldr	r3, [r7, #4]
 810517a:	681b      	ldr	r3, [r3, #0]
 810517c:	4a5f      	ldr	r2, [pc, #380]	; (81052fc <HAL_DMA_Abort+0x468>)
 810517e:	4293      	cmp	r3, r2
 8105180:	d01d      	beq.n	81051be <HAL_DMA_Abort+0x32a>
 8105182:	687b      	ldr	r3, [r7, #4]
 8105184:	681b      	ldr	r3, [r3, #0]
 8105186:	4a5e      	ldr	r2, [pc, #376]	; (8105300 <HAL_DMA_Abort+0x46c>)
 8105188:	4293      	cmp	r3, r2
 810518a:	d018      	beq.n	81051be <HAL_DMA_Abort+0x32a>
 810518c:	687b      	ldr	r3, [r7, #4]
 810518e:	681b      	ldr	r3, [r3, #0]
 8105190:	4a5c      	ldr	r2, [pc, #368]	; (8105304 <HAL_DMA_Abort+0x470>)
 8105192:	4293      	cmp	r3, r2
 8105194:	d013      	beq.n	81051be <HAL_DMA_Abort+0x32a>
 8105196:	687b      	ldr	r3, [r7, #4]
 8105198:	681b      	ldr	r3, [r3, #0]
 810519a:	4a5b      	ldr	r2, [pc, #364]	; (8105308 <HAL_DMA_Abort+0x474>)
 810519c:	4293      	cmp	r3, r2
 810519e:	d00e      	beq.n	81051be <HAL_DMA_Abort+0x32a>
 81051a0:	687b      	ldr	r3, [r7, #4]
 81051a2:	681b      	ldr	r3, [r3, #0]
 81051a4:	4a59      	ldr	r2, [pc, #356]	; (810530c <HAL_DMA_Abort+0x478>)
 81051a6:	4293      	cmp	r3, r2
 81051a8:	d009      	beq.n	81051be <HAL_DMA_Abort+0x32a>
 81051aa:	687b      	ldr	r3, [r7, #4]
 81051ac:	681b      	ldr	r3, [r3, #0]
 81051ae:	4a58      	ldr	r2, [pc, #352]	; (8105310 <HAL_DMA_Abort+0x47c>)
 81051b0:	4293      	cmp	r3, r2
 81051b2:	d004      	beq.n	81051be <HAL_DMA_Abort+0x32a>
 81051b4:	687b      	ldr	r3, [r7, #4]
 81051b6:	681b      	ldr	r3, [r3, #0]
 81051b8:	4a56      	ldr	r2, [pc, #344]	; (8105314 <HAL_DMA_Abort+0x480>)
 81051ba:	4293      	cmp	r3, r2
 81051bc:	d108      	bne.n	81051d0 <HAL_DMA_Abort+0x33c>
 81051be:	687b      	ldr	r3, [r7, #4]
 81051c0:	681b      	ldr	r3, [r3, #0]
 81051c2:	681a      	ldr	r2, [r3, #0]
 81051c4:	687b      	ldr	r3, [r7, #4]
 81051c6:	681b      	ldr	r3, [r3, #0]
 81051c8:	f022 0201 	bic.w	r2, r2, #1
 81051cc:	601a      	str	r2, [r3, #0]
 81051ce:	e007      	b.n	81051e0 <HAL_DMA_Abort+0x34c>
 81051d0:	687b      	ldr	r3, [r7, #4]
 81051d2:	681b      	ldr	r3, [r3, #0]
 81051d4:	681a      	ldr	r2, [r3, #0]
 81051d6:	687b      	ldr	r3, [r7, #4]
 81051d8:	681b      	ldr	r3, [r3, #0]
 81051da:	f022 0201 	bic.w	r2, r2, #1
 81051de:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 81051e0:	e013      	b.n	810520a <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 81051e2:	f7fd fc09 	bl	81029f8 <HAL_GetTick>
 81051e6:	4602      	mov	r2, r0
 81051e8:	693b      	ldr	r3, [r7, #16]
 81051ea:	1ad3      	subs	r3, r2, r3
 81051ec:	2b05      	cmp	r3, #5
 81051ee:	d90c      	bls.n	810520a <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 81051f0:	687b      	ldr	r3, [r7, #4]
 81051f2:	2220      	movs	r2, #32
 81051f4:	655a      	str	r2, [r3, #84]	; 0x54

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 81051f6:	687b      	ldr	r3, [r7, #4]
 81051f8:	2200      	movs	r2, #0
 81051fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 81051fe:	687b      	ldr	r3, [r7, #4]
 8105200:	2203      	movs	r2, #3
 8105202:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8105206:	2301      	movs	r3, #1
 8105208:	e12d      	b.n	8105466 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 810520a:	697b      	ldr	r3, [r7, #20]
 810520c:	681b      	ldr	r3, [r3, #0]
 810520e:	f003 0301 	and.w	r3, r3, #1
 8105212:	2b00      	cmp	r3, #0
 8105214:	d1e5      	bne.n	81051e2 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8105216:	687b      	ldr	r3, [r7, #4]
 8105218:	681b      	ldr	r3, [r3, #0]
 810521a:	4a2f      	ldr	r2, [pc, #188]	; (81052d8 <HAL_DMA_Abort+0x444>)
 810521c:	4293      	cmp	r3, r2
 810521e:	d04a      	beq.n	81052b6 <HAL_DMA_Abort+0x422>
 8105220:	687b      	ldr	r3, [r7, #4]
 8105222:	681b      	ldr	r3, [r3, #0]
 8105224:	4a2d      	ldr	r2, [pc, #180]	; (81052dc <HAL_DMA_Abort+0x448>)
 8105226:	4293      	cmp	r3, r2
 8105228:	d045      	beq.n	81052b6 <HAL_DMA_Abort+0x422>
 810522a:	687b      	ldr	r3, [r7, #4]
 810522c:	681b      	ldr	r3, [r3, #0]
 810522e:	4a2c      	ldr	r2, [pc, #176]	; (81052e0 <HAL_DMA_Abort+0x44c>)
 8105230:	4293      	cmp	r3, r2
 8105232:	d040      	beq.n	81052b6 <HAL_DMA_Abort+0x422>
 8105234:	687b      	ldr	r3, [r7, #4]
 8105236:	681b      	ldr	r3, [r3, #0]
 8105238:	4a2a      	ldr	r2, [pc, #168]	; (81052e4 <HAL_DMA_Abort+0x450>)
 810523a:	4293      	cmp	r3, r2
 810523c:	d03b      	beq.n	81052b6 <HAL_DMA_Abort+0x422>
 810523e:	687b      	ldr	r3, [r7, #4]
 8105240:	681b      	ldr	r3, [r3, #0]
 8105242:	4a29      	ldr	r2, [pc, #164]	; (81052e8 <HAL_DMA_Abort+0x454>)
 8105244:	4293      	cmp	r3, r2
 8105246:	d036      	beq.n	81052b6 <HAL_DMA_Abort+0x422>
 8105248:	687b      	ldr	r3, [r7, #4]
 810524a:	681b      	ldr	r3, [r3, #0]
 810524c:	4a27      	ldr	r2, [pc, #156]	; (81052ec <HAL_DMA_Abort+0x458>)
 810524e:	4293      	cmp	r3, r2
 8105250:	d031      	beq.n	81052b6 <HAL_DMA_Abort+0x422>
 8105252:	687b      	ldr	r3, [r7, #4]
 8105254:	681b      	ldr	r3, [r3, #0]
 8105256:	4a26      	ldr	r2, [pc, #152]	; (81052f0 <HAL_DMA_Abort+0x45c>)
 8105258:	4293      	cmp	r3, r2
 810525a:	d02c      	beq.n	81052b6 <HAL_DMA_Abort+0x422>
 810525c:	687b      	ldr	r3, [r7, #4]
 810525e:	681b      	ldr	r3, [r3, #0]
 8105260:	4a24      	ldr	r2, [pc, #144]	; (81052f4 <HAL_DMA_Abort+0x460>)
 8105262:	4293      	cmp	r3, r2
 8105264:	d027      	beq.n	81052b6 <HAL_DMA_Abort+0x422>
 8105266:	687b      	ldr	r3, [r7, #4]
 8105268:	681b      	ldr	r3, [r3, #0]
 810526a:	4a23      	ldr	r2, [pc, #140]	; (81052f8 <HAL_DMA_Abort+0x464>)
 810526c:	4293      	cmp	r3, r2
 810526e:	d022      	beq.n	81052b6 <HAL_DMA_Abort+0x422>
 8105270:	687b      	ldr	r3, [r7, #4]
 8105272:	681b      	ldr	r3, [r3, #0]
 8105274:	4a21      	ldr	r2, [pc, #132]	; (81052fc <HAL_DMA_Abort+0x468>)
 8105276:	4293      	cmp	r3, r2
 8105278:	d01d      	beq.n	81052b6 <HAL_DMA_Abort+0x422>
 810527a:	687b      	ldr	r3, [r7, #4]
 810527c:	681b      	ldr	r3, [r3, #0]
 810527e:	4a20      	ldr	r2, [pc, #128]	; (8105300 <HAL_DMA_Abort+0x46c>)
 8105280:	4293      	cmp	r3, r2
 8105282:	d018      	beq.n	81052b6 <HAL_DMA_Abort+0x422>
 8105284:	687b      	ldr	r3, [r7, #4]
 8105286:	681b      	ldr	r3, [r3, #0]
 8105288:	4a1e      	ldr	r2, [pc, #120]	; (8105304 <HAL_DMA_Abort+0x470>)
 810528a:	4293      	cmp	r3, r2
 810528c:	d013      	beq.n	81052b6 <HAL_DMA_Abort+0x422>
 810528e:	687b      	ldr	r3, [r7, #4]
 8105290:	681b      	ldr	r3, [r3, #0]
 8105292:	4a1d      	ldr	r2, [pc, #116]	; (8105308 <HAL_DMA_Abort+0x474>)
 8105294:	4293      	cmp	r3, r2
 8105296:	d00e      	beq.n	81052b6 <HAL_DMA_Abort+0x422>
 8105298:	687b      	ldr	r3, [r7, #4]
 810529a:	681b      	ldr	r3, [r3, #0]
 810529c:	4a1b      	ldr	r2, [pc, #108]	; (810530c <HAL_DMA_Abort+0x478>)
 810529e:	4293      	cmp	r3, r2
 81052a0:	d009      	beq.n	81052b6 <HAL_DMA_Abort+0x422>
 81052a2:	687b      	ldr	r3, [r7, #4]
 81052a4:	681b      	ldr	r3, [r3, #0]
 81052a6:	4a1a      	ldr	r2, [pc, #104]	; (8105310 <HAL_DMA_Abort+0x47c>)
 81052a8:	4293      	cmp	r3, r2
 81052aa:	d004      	beq.n	81052b6 <HAL_DMA_Abort+0x422>
 81052ac:	687b      	ldr	r3, [r7, #4]
 81052ae:	681b      	ldr	r3, [r3, #0]
 81052b0:	4a18      	ldr	r2, [pc, #96]	; (8105314 <HAL_DMA_Abort+0x480>)
 81052b2:	4293      	cmp	r3, r2
 81052b4:	d101      	bne.n	81052ba <HAL_DMA_Abort+0x426>
 81052b6:	2301      	movs	r3, #1
 81052b8:	e000      	b.n	81052bc <HAL_DMA_Abort+0x428>
 81052ba:	2300      	movs	r3, #0
 81052bc:	2b00      	cmp	r3, #0
 81052be:	d02b      	beq.n	8105318 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 81052c0:	687b      	ldr	r3, [r7, #4]
 81052c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81052c4:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 81052c6:	687b      	ldr	r3, [r7, #4]
 81052c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81052ca:	f003 031f 	and.w	r3, r3, #31
 81052ce:	223f      	movs	r2, #63	; 0x3f
 81052d0:	409a      	lsls	r2, r3
 81052d2:	68bb      	ldr	r3, [r7, #8]
 81052d4:	609a      	str	r2, [r3, #8]
 81052d6:	e02a      	b.n	810532e <HAL_DMA_Abort+0x49a>
 81052d8:	40020010 	.word	0x40020010
 81052dc:	40020028 	.word	0x40020028
 81052e0:	40020040 	.word	0x40020040
 81052e4:	40020058 	.word	0x40020058
 81052e8:	40020070 	.word	0x40020070
 81052ec:	40020088 	.word	0x40020088
 81052f0:	400200a0 	.word	0x400200a0
 81052f4:	400200b8 	.word	0x400200b8
 81052f8:	40020410 	.word	0x40020410
 81052fc:	40020428 	.word	0x40020428
 8105300:	40020440 	.word	0x40020440
 8105304:	40020458 	.word	0x40020458
 8105308:	40020470 	.word	0x40020470
 810530c:	40020488 	.word	0x40020488
 8105310:	400204a0 	.word	0x400204a0
 8105314:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8105318:	687b      	ldr	r3, [r7, #4]
 810531a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810531c:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 810531e:	687b      	ldr	r3, [r7, #4]
 8105320:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8105322:	f003 031f 	and.w	r3, r3, #31
 8105326:	2201      	movs	r2, #1
 8105328:	409a      	lsls	r2, r3
 810532a:	68fb      	ldr	r3, [r7, #12]
 810532c:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 810532e:	687b      	ldr	r3, [r7, #4]
 8105330:	681b      	ldr	r3, [r3, #0]
 8105332:	4a4f      	ldr	r2, [pc, #316]	; (8105470 <HAL_DMA_Abort+0x5dc>)
 8105334:	4293      	cmp	r3, r2
 8105336:	d072      	beq.n	810541e <HAL_DMA_Abort+0x58a>
 8105338:	687b      	ldr	r3, [r7, #4]
 810533a:	681b      	ldr	r3, [r3, #0]
 810533c:	4a4d      	ldr	r2, [pc, #308]	; (8105474 <HAL_DMA_Abort+0x5e0>)
 810533e:	4293      	cmp	r3, r2
 8105340:	d06d      	beq.n	810541e <HAL_DMA_Abort+0x58a>
 8105342:	687b      	ldr	r3, [r7, #4]
 8105344:	681b      	ldr	r3, [r3, #0]
 8105346:	4a4c      	ldr	r2, [pc, #304]	; (8105478 <HAL_DMA_Abort+0x5e4>)
 8105348:	4293      	cmp	r3, r2
 810534a:	d068      	beq.n	810541e <HAL_DMA_Abort+0x58a>
 810534c:	687b      	ldr	r3, [r7, #4]
 810534e:	681b      	ldr	r3, [r3, #0]
 8105350:	4a4a      	ldr	r2, [pc, #296]	; (810547c <HAL_DMA_Abort+0x5e8>)
 8105352:	4293      	cmp	r3, r2
 8105354:	d063      	beq.n	810541e <HAL_DMA_Abort+0x58a>
 8105356:	687b      	ldr	r3, [r7, #4]
 8105358:	681b      	ldr	r3, [r3, #0]
 810535a:	4a49      	ldr	r2, [pc, #292]	; (8105480 <HAL_DMA_Abort+0x5ec>)
 810535c:	4293      	cmp	r3, r2
 810535e:	d05e      	beq.n	810541e <HAL_DMA_Abort+0x58a>
 8105360:	687b      	ldr	r3, [r7, #4]
 8105362:	681b      	ldr	r3, [r3, #0]
 8105364:	4a47      	ldr	r2, [pc, #284]	; (8105484 <HAL_DMA_Abort+0x5f0>)
 8105366:	4293      	cmp	r3, r2
 8105368:	d059      	beq.n	810541e <HAL_DMA_Abort+0x58a>
 810536a:	687b      	ldr	r3, [r7, #4]
 810536c:	681b      	ldr	r3, [r3, #0]
 810536e:	4a46      	ldr	r2, [pc, #280]	; (8105488 <HAL_DMA_Abort+0x5f4>)
 8105370:	4293      	cmp	r3, r2
 8105372:	d054      	beq.n	810541e <HAL_DMA_Abort+0x58a>
 8105374:	687b      	ldr	r3, [r7, #4]
 8105376:	681b      	ldr	r3, [r3, #0]
 8105378:	4a44      	ldr	r2, [pc, #272]	; (810548c <HAL_DMA_Abort+0x5f8>)
 810537a:	4293      	cmp	r3, r2
 810537c:	d04f      	beq.n	810541e <HAL_DMA_Abort+0x58a>
 810537e:	687b      	ldr	r3, [r7, #4]
 8105380:	681b      	ldr	r3, [r3, #0]
 8105382:	4a43      	ldr	r2, [pc, #268]	; (8105490 <HAL_DMA_Abort+0x5fc>)
 8105384:	4293      	cmp	r3, r2
 8105386:	d04a      	beq.n	810541e <HAL_DMA_Abort+0x58a>
 8105388:	687b      	ldr	r3, [r7, #4]
 810538a:	681b      	ldr	r3, [r3, #0]
 810538c:	4a41      	ldr	r2, [pc, #260]	; (8105494 <HAL_DMA_Abort+0x600>)
 810538e:	4293      	cmp	r3, r2
 8105390:	d045      	beq.n	810541e <HAL_DMA_Abort+0x58a>
 8105392:	687b      	ldr	r3, [r7, #4]
 8105394:	681b      	ldr	r3, [r3, #0]
 8105396:	4a40      	ldr	r2, [pc, #256]	; (8105498 <HAL_DMA_Abort+0x604>)
 8105398:	4293      	cmp	r3, r2
 810539a:	d040      	beq.n	810541e <HAL_DMA_Abort+0x58a>
 810539c:	687b      	ldr	r3, [r7, #4]
 810539e:	681b      	ldr	r3, [r3, #0]
 81053a0:	4a3e      	ldr	r2, [pc, #248]	; (810549c <HAL_DMA_Abort+0x608>)
 81053a2:	4293      	cmp	r3, r2
 81053a4:	d03b      	beq.n	810541e <HAL_DMA_Abort+0x58a>
 81053a6:	687b      	ldr	r3, [r7, #4]
 81053a8:	681b      	ldr	r3, [r3, #0]
 81053aa:	4a3d      	ldr	r2, [pc, #244]	; (81054a0 <HAL_DMA_Abort+0x60c>)
 81053ac:	4293      	cmp	r3, r2
 81053ae:	d036      	beq.n	810541e <HAL_DMA_Abort+0x58a>
 81053b0:	687b      	ldr	r3, [r7, #4]
 81053b2:	681b      	ldr	r3, [r3, #0]
 81053b4:	4a3b      	ldr	r2, [pc, #236]	; (81054a4 <HAL_DMA_Abort+0x610>)
 81053b6:	4293      	cmp	r3, r2
 81053b8:	d031      	beq.n	810541e <HAL_DMA_Abort+0x58a>
 81053ba:	687b      	ldr	r3, [r7, #4]
 81053bc:	681b      	ldr	r3, [r3, #0]
 81053be:	4a3a      	ldr	r2, [pc, #232]	; (81054a8 <HAL_DMA_Abort+0x614>)
 81053c0:	4293      	cmp	r3, r2
 81053c2:	d02c      	beq.n	810541e <HAL_DMA_Abort+0x58a>
 81053c4:	687b      	ldr	r3, [r7, #4]
 81053c6:	681b      	ldr	r3, [r3, #0]
 81053c8:	4a38      	ldr	r2, [pc, #224]	; (81054ac <HAL_DMA_Abort+0x618>)
 81053ca:	4293      	cmp	r3, r2
 81053cc:	d027      	beq.n	810541e <HAL_DMA_Abort+0x58a>
 81053ce:	687b      	ldr	r3, [r7, #4]
 81053d0:	681b      	ldr	r3, [r3, #0]
 81053d2:	4a37      	ldr	r2, [pc, #220]	; (81054b0 <HAL_DMA_Abort+0x61c>)
 81053d4:	4293      	cmp	r3, r2
 81053d6:	d022      	beq.n	810541e <HAL_DMA_Abort+0x58a>
 81053d8:	687b      	ldr	r3, [r7, #4]
 81053da:	681b      	ldr	r3, [r3, #0]
 81053dc:	4a35      	ldr	r2, [pc, #212]	; (81054b4 <HAL_DMA_Abort+0x620>)
 81053de:	4293      	cmp	r3, r2
 81053e0:	d01d      	beq.n	810541e <HAL_DMA_Abort+0x58a>
 81053e2:	687b      	ldr	r3, [r7, #4]
 81053e4:	681b      	ldr	r3, [r3, #0]
 81053e6:	4a34      	ldr	r2, [pc, #208]	; (81054b8 <HAL_DMA_Abort+0x624>)
 81053e8:	4293      	cmp	r3, r2
 81053ea:	d018      	beq.n	810541e <HAL_DMA_Abort+0x58a>
 81053ec:	687b      	ldr	r3, [r7, #4]
 81053ee:	681b      	ldr	r3, [r3, #0]
 81053f0:	4a32      	ldr	r2, [pc, #200]	; (81054bc <HAL_DMA_Abort+0x628>)
 81053f2:	4293      	cmp	r3, r2
 81053f4:	d013      	beq.n	810541e <HAL_DMA_Abort+0x58a>
 81053f6:	687b      	ldr	r3, [r7, #4]
 81053f8:	681b      	ldr	r3, [r3, #0]
 81053fa:	4a31      	ldr	r2, [pc, #196]	; (81054c0 <HAL_DMA_Abort+0x62c>)
 81053fc:	4293      	cmp	r3, r2
 81053fe:	d00e      	beq.n	810541e <HAL_DMA_Abort+0x58a>
 8105400:	687b      	ldr	r3, [r7, #4]
 8105402:	681b      	ldr	r3, [r3, #0]
 8105404:	4a2f      	ldr	r2, [pc, #188]	; (81054c4 <HAL_DMA_Abort+0x630>)
 8105406:	4293      	cmp	r3, r2
 8105408:	d009      	beq.n	810541e <HAL_DMA_Abort+0x58a>
 810540a:	687b      	ldr	r3, [r7, #4]
 810540c:	681b      	ldr	r3, [r3, #0]
 810540e:	4a2e      	ldr	r2, [pc, #184]	; (81054c8 <HAL_DMA_Abort+0x634>)
 8105410:	4293      	cmp	r3, r2
 8105412:	d004      	beq.n	810541e <HAL_DMA_Abort+0x58a>
 8105414:	687b      	ldr	r3, [r7, #4]
 8105416:	681b      	ldr	r3, [r3, #0]
 8105418:	4a2c      	ldr	r2, [pc, #176]	; (81054cc <HAL_DMA_Abort+0x638>)
 810541a:	4293      	cmp	r3, r2
 810541c:	d101      	bne.n	8105422 <HAL_DMA_Abort+0x58e>
 810541e:	2301      	movs	r3, #1
 8105420:	e000      	b.n	8105424 <HAL_DMA_Abort+0x590>
 8105422:	2300      	movs	r3, #0
 8105424:	2b00      	cmp	r3, #0
 8105426:	d015      	beq.n	8105454 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8105428:	687b      	ldr	r3, [r7, #4]
 810542a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810542c:	687a      	ldr	r2, [r7, #4]
 810542e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8105430:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8105432:	687b      	ldr	r3, [r7, #4]
 8105434:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8105436:	2b00      	cmp	r3, #0
 8105438:	d00c      	beq.n	8105454 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 810543a:	687b      	ldr	r3, [r7, #4]
 810543c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 810543e:	681a      	ldr	r2, [r3, #0]
 8105440:	687b      	ldr	r3, [r7, #4]
 8105442:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8105444:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8105448:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 810544a:	687b      	ldr	r3, [r7, #4]
 810544c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 810544e:	687a      	ldr	r2, [r7, #4]
 8105450:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8105452:	605a      	str	r2, [r3, #4]
      }
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8105454:	687b      	ldr	r3, [r7, #4]
 8105456:	2200      	movs	r2, #0
 8105458:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 810545c:	687b      	ldr	r3, [r7, #4]
 810545e:	2201      	movs	r2, #1
 8105460:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }

  return HAL_OK;
 8105464:	2300      	movs	r3, #0
}
 8105466:	4618      	mov	r0, r3
 8105468:	3718      	adds	r7, #24
 810546a:	46bd      	mov	sp, r7
 810546c:	bd80      	pop	{r7, pc}
 810546e:	bf00      	nop
 8105470:	40020010 	.word	0x40020010
 8105474:	40020028 	.word	0x40020028
 8105478:	40020040 	.word	0x40020040
 810547c:	40020058 	.word	0x40020058
 8105480:	40020070 	.word	0x40020070
 8105484:	40020088 	.word	0x40020088
 8105488:	400200a0 	.word	0x400200a0
 810548c:	400200b8 	.word	0x400200b8
 8105490:	40020410 	.word	0x40020410
 8105494:	40020428 	.word	0x40020428
 8105498:	40020440 	.word	0x40020440
 810549c:	40020458 	.word	0x40020458
 81054a0:	40020470 	.word	0x40020470
 81054a4:	40020488 	.word	0x40020488
 81054a8:	400204a0 	.word	0x400204a0
 81054ac:	400204b8 	.word	0x400204b8
 81054b0:	58025408 	.word	0x58025408
 81054b4:	5802541c 	.word	0x5802541c
 81054b8:	58025430 	.word	0x58025430
 81054bc:	58025444 	.word	0x58025444
 81054c0:	58025458 	.word	0x58025458
 81054c4:	5802546c 	.word	0x5802546c
 81054c8:	58025480 	.word	0x58025480
 81054cc:	58025494 	.word	0x58025494

081054d0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 81054d0:	b580      	push	{r7, lr}
 81054d2:	b084      	sub	sp, #16
 81054d4:	af00      	add	r7, sp, #0
 81054d6:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 81054d8:	687b      	ldr	r3, [r7, #4]
 81054da:	2b00      	cmp	r3, #0
 81054dc:	d101      	bne.n	81054e2 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 81054de:	2301      	movs	r3, #1
 81054e0:	e205      	b.n	81058ee <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 81054e2:	687b      	ldr	r3, [r7, #4]
 81054e4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 81054e8:	b2db      	uxtb	r3, r3
 81054ea:	2b02      	cmp	r3, #2
 81054ec:	d004      	beq.n	81054f8 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 81054ee:	687b      	ldr	r3, [r7, #4]
 81054f0:	2280      	movs	r2, #128	; 0x80
 81054f2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 81054f4:	2301      	movs	r3, #1
 81054f6:	e1fa      	b.n	81058ee <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 81054f8:	687b      	ldr	r3, [r7, #4]
 81054fa:	681b      	ldr	r3, [r3, #0]
 81054fc:	4a8c      	ldr	r2, [pc, #560]	; (8105730 <HAL_DMA_Abort_IT+0x260>)
 81054fe:	4293      	cmp	r3, r2
 8105500:	d04a      	beq.n	8105598 <HAL_DMA_Abort_IT+0xc8>
 8105502:	687b      	ldr	r3, [r7, #4]
 8105504:	681b      	ldr	r3, [r3, #0]
 8105506:	4a8b      	ldr	r2, [pc, #556]	; (8105734 <HAL_DMA_Abort_IT+0x264>)
 8105508:	4293      	cmp	r3, r2
 810550a:	d045      	beq.n	8105598 <HAL_DMA_Abort_IT+0xc8>
 810550c:	687b      	ldr	r3, [r7, #4]
 810550e:	681b      	ldr	r3, [r3, #0]
 8105510:	4a89      	ldr	r2, [pc, #548]	; (8105738 <HAL_DMA_Abort_IT+0x268>)
 8105512:	4293      	cmp	r3, r2
 8105514:	d040      	beq.n	8105598 <HAL_DMA_Abort_IT+0xc8>
 8105516:	687b      	ldr	r3, [r7, #4]
 8105518:	681b      	ldr	r3, [r3, #0]
 810551a:	4a88      	ldr	r2, [pc, #544]	; (810573c <HAL_DMA_Abort_IT+0x26c>)
 810551c:	4293      	cmp	r3, r2
 810551e:	d03b      	beq.n	8105598 <HAL_DMA_Abort_IT+0xc8>
 8105520:	687b      	ldr	r3, [r7, #4]
 8105522:	681b      	ldr	r3, [r3, #0]
 8105524:	4a86      	ldr	r2, [pc, #536]	; (8105740 <HAL_DMA_Abort_IT+0x270>)
 8105526:	4293      	cmp	r3, r2
 8105528:	d036      	beq.n	8105598 <HAL_DMA_Abort_IT+0xc8>
 810552a:	687b      	ldr	r3, [r7, #4]
 810552c:	681b      	ldr	r3, [r3, #0]
 810552e:	4a85      	ldr	r2, [pc, #532]	; (8105744 <HAL_DMA_Abort_IT+0x274>)
 8105530:	4293      	cmp	r3, r2
 8105532:	d031      	beq.n	8105598 <HAL_DMA_Abort_IT+0xc8>
 8105534:	687b      	ldr	r3, [r7, #4]
 8105536:	681b      	ldr	r3, [r3, #0]
 8105538:	4a83      	ldr	r2, [pc, #524]	; (8105748 <HAL_DMA_Abort_IT+0x278>)
 810553a:	4293      	cmp	r3, r2
 810553c:	d02c      	beq.n	8105598 <HAL_DMA_Abort_IT+0xc8>
 810553e:	687b      	ldr	r3, [r7, #4]
 8105540:	681b      	ldr	r3, [r3, #0]
 8105542:	4a82      	ldr	r2, [pc, #520]	; (810574c <HAL_DMA_Abort_IT+0x27c>)
 8105544:	4293      	cmp	r3, r2
 8105546:	d027      	beq.n	8105598 <HAL_DMA_Abort_IT+0xc8>
 8105548:	687b      	ldr	r3, [r7, #4]
 810554a:	681b      	ldr	r3, [r3, #0]
 810554c:	4a80      	ldr	r2, [pc, #512]	; (8105750 <HAL_DMA_Abort_IT+0x280>)
 810554e:	4293      	cmp	r3, r2
 8105550:	d022      	beq.n	8105598 <HAL_DMA_Abort_IT+0xc8>
 8105552:	687b      	ldr	r3, [r7, #4]
 8105554:	681b      	ldr	r3, [r3, #0]
 8105556:	4a7f      	ldr	r2, [pc, #508]	; (8105754 <HAL_DMA_Abort_IT+0x284>)
 8105558:	4293      	cmp	r3, r2
 810555a:	d01d      	beq.n	8105598 <HAL_DMA_Abort_IT+0xc8>
 810555c:	687b      	ldr	r3, [r7, #4]
 810555e:	681b      	ldr	r3, [r3, #0]
 8105560:	4a7d      	ldr	r2, [pc, #500]	; (8105758 <HAL_DMA_Abort_IT+0x288>)
 8105562:	4293      	cmp	r3, r2
 8105564:	d018      	beq.n	8105598 <HAL_DMA_Abort_IT+0xc8>
 8105566:	687b      	ldr	r3, [r7, #4]
 8105568:	681b      	ldr	r3, [r3, #0]
 810556a:	4a7c      	ldr	r2, [pc, #496]	; (810575c <HAL_DMA_Abort_IT+0x28c>)
 810556c:	4293      	cmp	r3, r2
 810556e:	d013      	beq.n	8105598 <HAL_DMA_Abort_IT+0xc8>
 8105570:	687b      	ldr	r3, [r7, #4]
 8105572:	681b      	ldr	r3, [r3, #0]
 8105574:	4a7a      	ldr	r2, [pc, #488]	; (8105760 <HAL_DMA_Abort_IT+0x290>)
 8105576:	4293      	cmp	r3, r2
 8105578:	d00e      	beq.n	8105598 <HAL_DMA_Abort_IT+0xc8>
 810557a:	687b      	ldr	r3, [r7, #4]
 810557c:	681b      	ldr	r3, [r3, #0]
 810557e:	4a79      	ldr	r2, [pc, #484]	; (8105764 <HAL_DMA_Abort_IT+0x294>)
 8105580:	4293      	cmp	r3, r2
 8105582:	d009      	beq.n	8105598 <HAL_DMA_Abort_IT+0xc8>
 8105584:	687b      	ldr	r3, [r7, #4]
 8105586:	681b      	ldr	r3, [r3, #0]
 8105588:	4a77      	ldr	r2, [pc, #476]	; (8105768 <HAL_DMA_Abort_IT+0x298>)
 810558a:	4293      	cmp	r3, r2
 810558c:	d004      	beq.n	8105598 <HAL_DMA_Abort_IT+0xc8>
 810558e:	687b      	ldr	r3, [r7, #4]
 8105590:	681b      	ldr	r3, [r3, #0]
 8105592:	4a76      	ldr	r2, [pc, #472]	; (810576c <HAL_DMA_Abort_IT+0x29c>)
 8105594:	4293      	cmp	r3, r2
 8105596:	d101      	bne.n	810559c <HAL_DMA_Abort_IT+0xcc>
 8105598:	2301      	movs	r3, #1
 810559a:	e000      	b.n	810559e <HAL_DMA_Abort_IT+0xce>
 810559c:	2300      	movs	r3, #0
 810559e:	2b00      	cmp	r3, #0
 81055a0:	d065      	beq.n	810566e <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 81055a2:	687b      	ldr	r3, [r7, #4]
 81055a4:	2204      	movs	r2, #4
 81055a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 81055aa:	687b      	ldr	r3, [r7, #4]
 81055ac:	681b      	ldr	r3, [r3, #0]
 81055ae:	4a60      	ldr	r2, [pc, #384]	; (8105730 <HAL_DMA_Abort_IT+0x260>)
 81055b0:	4293      	cmp	r3, r2
 81055b2:	d04a      	beq.n	810564a <HAL_DMA_Abort_IT+0x17a>
 81055b4:	687b      	ldr	r3, [r7, #4]
 81055b6:	681b      	ldr	r3, [r3, #0]
 81055b8:	4a5e      	ldr	r2, [pc, #376]	; (8105734 <HAL_DMA_Abort_IT+0x264>)
 81055ba:	4293      	cmp	r3, r2
 81055bc:	d045      	beq.n	810564a <HAL_DMA_Abort_IT+0x17a>
 81055be:	687b      	ldr	r3, [r7, #4]
 81055c0:	681b      	ldr	r3, [r3, #0]
 81055c2:	4a5d      	ldr	r2, [pc, #372]	; (8105738 <HAL_DMA_Abort_IT+0x268>)
 81055c4:	4293      	cmp	r3, r2
 81055c6:	d040      	beq.n	810564a <HAL_DMA_Abort_IT+0x17a>
 81055c8:	687b      	ldr	r3, [r7, #4]
 81055ca:	681b      	ldr	r3, [r3, #0]
 81055cc:	4a5b      	ldr	r2, [pc, #364]	; (810573c <HAL_DMA_Abort_IT+0x26c>)
 81055ce:	4293      	cmp	r3, r2
 81055d0:	d03b      	beq.n	810564a <HAL_DMA_Abort_IT+0x17a>
 81055d2:	687b      	ldr	r3, [r7, #4]
 81055d4:	681b      	ldr	r3, [r3, #0]
 81055d6:	4a5a      	ldr	r2, [pc, #360]	; (8105740 <HAL_DMA_Abort_IT+0x270>)
 81055d8:	4293      	cmp	r3, r2
 81055da:	d036      	beq.n	810564a <HAL_DMA_Abort_IT+0x17a>
 81055dc:	687b      	ldr	r3, [r7, #4]
 81055de:	681b      	ldr	r3, [r3, #0]
 81055e0:	4a58      	ldr	r2, [pc, #352]	; (8105744 <HAL_DMA_Abort_IT+0x274>)
 81055e2:	4293      	cmp	r3, r2
 81055e4:	d031      	beq.n	810564a <HAL_DMA_Abort_IT+0x17a>
 81055e6:	687b      	ldr	r3, [r7, #4]
 81055e8:	681b      	ldr	r3, [r3, #0]
 81055ea:	4a57      	ldr	r2, [pc, #348]	; (8105748 <HAL_DMA_Abort_IT+0x278>)
 81055ec:	4293      	cmp	r3, r2
 81055ee:	d02c      	beq.n	810564a <HAL_DMA_Abort_IT+0x17a>
 81055f0:	687b      	ldr	r3, [r7, #4]
 81055f2:	681b      	ldr	r3, [r3, #0]
 81055f4:	4a55      	ldr	r2, [pc, #340]	; (810574c <HAL_DMA_Abort_IT+0x27c>)
 81055f6:	4293      	cmp	r3, r2
 81055f8:	d027      	beq.n	810564a <HAL_DMA_Abort_IT+0x17a>
 81055fa:	687b      	ldr	r3, [r7, #4]
 81055fc:	681b      	ldr	r3, [r3, #0]
 81055fe:	4a54      	ldr	r2, [pc, #336]	; (8105750 <HAL_DMA_Abort_IT+0x280>)
 8105600:	4293      	cmp	r3, r2
 8105602:	d022      	beq.n	810564a <HAL_DMA_Abort_IT+0x17a>
 8105604:	687b      	ldr	r3, [r7, #4]
 8105606:	681b      	ldr	r3, [r3, #0]
 8105608:	4a52      	ldr	r2, [pc, #328]	; (8105754 <HAL_DMA_Abort_IT+0x284>)
 810560a:	4293      	cmp	r3, r2
 810560c:	d01d      	beq.n	810564a <HAL_DMA_Abort_IT+0x17a>
 810560e:	687b      	ldr	r3, [r7, #4]
 8105610:	681b      	ldr	r3, [r3, #0]
 8105612:	4a51      	ldr	r2, [pc, #324]	; (8105758 <HAL_DMA_Abort_IT+0x288>)
 8105614:	4293      	cmp	r3, r2
 8105616:	d018      	beq.n	810564a <HAL_DMA_Abort_IT+0x17a>
 8105618:	687b      	ldr	r3, [r7, #4]
 810561a:	681b      	ldr	r3, [r3, #0]
 810561c:	4a4f      	ldr	r2, [pc, #316]	; (810575c <HAL_DMA_Abort_IT+0x28c>)
 810561e:	4293      	cmp	r3, r2
 8105620:	d013      	beq.n	810564a <HAL_DMA_Abort_IT+0x17a>
 8105622:	687b      	ldr	r3, [r7, #4]
 8105624:	681b      	ldr	r3, [r3, #0]
 8105626:	4a4e      	ldr	r2, [pc, #312]	; (8105760 <HAL_DMA_Abort_IT+0x290>)
 8105628:	4293      	cmp	r3, r2
 810562a:	d00e      	beq.n	810564a <HAL_DMA_Abort_IT+0x17a>
 810562c:	687b      	ldr	r3, [r7, #4]
 810562e:	681b      	ldr	r3, [r3, #0]
 8105630:	4a4c      	ldr	r2, [pc, #304]	; (8105764 <HAL_DMA_Abort_IT+0x294>)
 8105632:	4293      	cmp	r3, r2
 8105634:	d009      	beq.n	810564a <HAL_DMA_Abort_IT+0x17a>
 8105636:	687b      	ldr	r3, [r7, #4]
 8105638:	681b      	ldr	r3, [r3, #0]
 810563a:	4a4b      	ldr	r2, [pc, #300]	; (8105768 <HAL_DMA_Abort_IT+0x298>)
 810563c:	4293      	cmp	r3, r2
 810563e:	d004      	beq.n	810564a <HAL_DMA_Abort_IT+0x17a>
 8105640:	687b      	ldr	r3, [r7, #4]
 8105642:	681b      	ldr	r3, [r3, #0]
 8105644:	4a49      	ldr	r2, [pc, #292]	; (810576c <HAL_DMA_Abort_IT+0x29c>)
 8105646:	4293      	cmp	r3, r2
 8105648:	d108      	bne.n	810565c <HAL_DMA_Abort_IT+0x18c>
 810564a:	687b      	ldr	r3, [r7, #4]
 810564c:	681b      	ldr	r3, [r3, #0]
 810564e:	681a      	ldr	r2, [r3, #0]
 8105650:	687b      	ldr	r3, [r7, #4]
 8105652:	681b      	ldr	r3, [r3, #0]
 8105654:	f022 0201 	bic.w	r2, r2, #1
 8105658:	601a      	str	r2, [r3, #0]
 810565a:	e147      	b.n	81058ec <HAL_DMA_Abort_IT+0x41c>
 810565c:	687b      	ldr	r3, [r7, #4]
 810565e:	681b      	ldr	r3, [r3, #0]
 8105660:	681a      	ldr	r2, [r3, #0]
 8105662:	687b      	ldr	r3, [r7, #4]
 8105664:	681b      	ldr	r3, [r3, #0]
 8105666:	f022 0201 	bic.w	r2, r2, #1
 810566a:	601a      	str	r2, [r3, #0]
 810566c:	e13e      	b.n	81058ec <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 810566e:	687b      	ldr	r3, [r7, #4]
 8105670:	681b      	ldr	r3, [r3, #0]
 8105672:	681a      	ldr	r2, [r3, #0]
 8105674:	687b      	ldr	r3, [r7, #4]
 8105676:	681b      	ldr	r3, [r3, #0]
 8105678:	f022 020e 	bic.w	r2, r2, #14
 810567c:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 810567e:	687b      	ldr	r3, [r7, #4]
 8105680:	681b      	ldr	r3, [r3, #0]
 8105682:	4a2b      	ldr	r2, [pc, #172]	; (8105730 <HAL_DMA_Abort_IT+0x260>)
 8105684:	4293      	cmp	r3, r2
 8105686:	d04a      	beq.n	810571e <HAL_DMA_Abort_IT+0x24e>
 8105688:	687b      	ldr	r3, [r7, #4]
 810568a:	681b      	ldr	r3, [r3, #0]
 810568c:	4a29      	ldr	r2, [pc, #164]	; (8105734 <HAL_DMA_Abort_IT+0x264>)
 810568e:	4293      	cmp	r3, r2
 8105690:	d045      	beq.n	810571e <HAL_DMA_Abort_IT+0x24e>
 8105692:	687b      	ldr	r3, [r7, #4]
 8105694:	681b      	ldr	r3, [r3, #0]
 8105696:	4a28      	ldr	r2, [pc, #160]	; (8105738 <HAL_DMA_Abort_IT+0x268>)
 8105698:	4293      	cmp	r3, r2
 810569a:	d040      	beq.n	810571e <HAL_DMA_Abort_IT+0x24e>
 810569c:	687b      	ldr	r3, [r7, #4]
 810569e:	681b      	ldr	r3, [r3, #0]
 81056a0:	4a26      	ldr	r2, [pc, #152]	; (810573c <HAL_DMA_Abort_IT+0x26c>)
 81056a2:	4293      	cmp	r3, r2
 81056a4:	d03b      	beq.n	810571e <HAL_DMA_Abort_IT+0x24e>
 81056a6:	687b      	ldr	r3, [r7, #4]
 81056a8:	681b      	ldr	r3, [r3, #0]
 81056aa:	4a25      	ldr	r2, [pc, #148]	; (8105740 <HAL_DMA_Abort_IT+0x270>)
 81056ac:	4293      	cmp	r3, r2
 81056ae:	d036      	beq.n	810571e <HAL_DMA_Abort_IT+0x24e>
 81056b0:	687b      	ldr	r3, [r7, #4]
 81056b2:	681b      	ldr	r3, [r3, #0]
 81056b4:	4a23      	ldr	r2, [pc, #140]	; (8105744 <HAL_DMA_Abort_IT+0x274>)
 81056b6:	4293      	cmp	r3, r2
 81056b8:	d031      	beq.n	810571e <HAL_DMA_Abort_IT+0x24e>
 81056ba:	687b      	ldr	r3, [r7, #4]
 81056bc:	681b      	ldr	r3, [r3, #0]
 81056be:	4a22      	ldr	r2, [pc, #136]	; (8105748 <HAL_DMA_Abort_IT+0x278>)
 81056c0:	4293      	cmp	r3, r2
 81056c2:	d02c      	beq.n	810571e <HAL_DMA_Abort_IT+0x24e>
 81056c4:	687b      	ldr	r3, [r7, #4]
 81056c6:	681b      	ldr	r3, [r3, #0]
 81056c8:	4a20      	ldr	r2, [pc, #128]	; (810574c <HAL_DMA_Abort_IT+0x27c>)
 81056ca:	4293      	cmp	r3, r2
 81056cc:	d027      	beq.n	810571e <HAL_DMA_Abort_IT+0x24e>
 81056ce:	687b      	ldr	r3, [r7, #4]
 81056d0:	681b      	ldr	r3, [r3, #0]
 81056d2:	4a1f      	ldr	r2, [pc, #124]	; (8105750 <HAL_DMA_Abort_IT+0x280>)
 81056d4:	4293      	cmp	r3, r2
 81056d6:	d022      	beq.n	810571e <HAL_DMA_Abort_IT+0x24e>
 81056d8:	687b      	ldr	r3, [r7, #4]
 81056da:	681b      	ldr	r3, [r3, #0]
 81056dc:	4a1d      	ldr	r2, [pc, #116]	; (8105754 <HAL_DMA_Abort_IT+0x284>)
 81056de:	4293      	cmp	r3, r2
 81056e0:	d01d      	beq.n	810571e <HAL_DMA_Abort_IT+0x24e>
 81056e2:	687b      	ldr	r3, [r7, #4]
 81056e4:	681b      	ldr	r3, [r3, #0]
 81056e6:	4a1c      	ldr	r2, [pc, #112]	; (8105758 <HAL_DMA_Abort_IT+0x288>)
 81056e8:	4293      	cmp	r3, r2
 81056ea:	d018      	beq.n	810571e <HAL_DMA_Abort_IT+0x24e>
 81056ec:	687b      	ldr	r3, [r7, #4]
 81056ee:	681b      	ldr	r3, [r3, #0]
 81056f0:	4a1a      	ldr	r2, [pc, #104]	; (810575c <HAL_DMA_Abort_IT+0x28c>)
 81056f2:	4293      	cmp	r3, r2
 81056f4:	d013      	beq.n	810571e <HAL_DMA_Abort_IT+0x24e>
 81056f6:	687b      	ldr	r3, [r7, #4]
 81056f8:	681b      	ldr	r3, [r3, #0]
 81056fa:	4a19      	ldr	r2, [pc, #100]	; (8105760 <HAL_DMA_Abort_IT+0x290>)
 81056fc:	4293      	cmp	r3, r2
 81056fe:	d00e      	beq.n	810571e <HAL_DMA_Abort_IT+0x24e>
 8105700:	687b      	ldr	r3, [r7, #4]
 8105702:	681b      	ldr	r3, [r3, #0]
 8105704:	4a17      	ldr	r2, [pc, #92]	; (8105764 <HAL_DMA_Abort_IT+0x294>)
 8105706:	4293      	cmp	r3, r2
 8105708:	d009      	beq.n	810571e <HAL_DMA_Abort_IT+0x24e>
 810570a:	687b      	ldr	r3, [r7, #4]
 810570c:	681b      	ldr	r3, [r3, #0]
 810570e:	4a16      	ldr	r2, [pc, #88]	; (8105768 <HAL_DMA_Abort_IT+0x298>)
 8105710:	4293      	cmp	r3, r2
 8105712:	d004      	beq.n	810571e <HAL_DMA_Abort_IT+0x24e>
 8105714:	687b      	ldr	r3, [r7, #4]
 8105716:	681b      	ldr	r3, [r3, #0]
 8105718:	4a14      	ldr	r2, [pc, #80]	; (810576c <HAL_DMA_Abort_IT+0x29c>)
 810571a:	4293      	cmp	r3, r2
 810571c:	d128      	bne.n	8105770 <HAL_DMA_Abort_IT+0x2a0>
 810571e:	687b      	ldr	r3, [r7, #4]
 8105720:	681b      	ldr	r3, [r3, #0]
 8105722:	681a      	ldr	r2, [r3, #0]
 8105724:	687b      	ldr	r3, [r7, #4]
 8105726:	681b      	ldr	r3, [r3, #0]
 8105728:	f022 0201 	bic.w	r2, r2, #1
 810572c:	601a      	str	r2, [r3, #0]
 810572e:	e027      	b.n	8105780 <HAL_DMA_Abort_IT+0x2b0>
 8105730:	40020010 	.word	0x40020010
 8105734:	40020028 	.word	0x40020028
 8105738:	40020040 	.word	0x40020040
 810573c:	40020058 	.word	0x40020058
 8105740:	40020070 	.word	0x40020070
 8105744:	40020088 	.word	0x40020088
 8105748:	400200a0 	.word	0x400200a0
 810574c:	400200b8 	.word	0x400200b8
 8105750:	40020410 	.word	0x40020410
 8105754:	40020428 	.word	0x40020428
 8105758:	40020440 	.word	0x40020440
 810575c:	40020458 	.word	0x40020458
 8105760:	40020470 	.word	0x40020470
 8105764:	40020488 	.word	0x40020488
 8105768:	400204a0 	.word	0x400204a0
 810576c:	400204b8 	.word	0x400204b8
 8105770:	687b      	ldr	r3, [r7, #4]
 8105772:	681b      	ldr	r3, [r3, #0]
 8105774:	681a      	ldr	r2, [r3, #0]
 8105776:	687b      	ldr	r3, [r7, #4]
 8105778:	681b      	ldr	r3, [r3, #0]
 810577a:	f022 0201 	bic.w	r2, r2, #1
 810577e:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8105780:	687b      	ldr	r3, [r7, #4]
 8105782:	681b      	ldr	r3, [r3, #0]
 8105784:	4a5c      	ldr	r2, [pc, #368]	; (81058f8 <HAL_DMA_Abort_IT+0x428>)
 8105786:	4293      	cmp	r3, r2
 8105788:	d072      	beq.n	8105870 <HAL_DMA_Abort_IT+0x3a0>
 810578a:	687b      	ldr	r3, [r7, #4]
 810578c:	681b      	ldr	r3, [r3, #0]
 810578e:	4a5b      	ldr	r2, [pc, #364]	; (81058fc <HAL_DMA_Abort_IT+0x42c>)
 8105790:	4293      	cmp	r3, r2
 8105792:	d06d      	beq.n	8105870 <HAL_DMA_Abort_IT+0x3a0>
 8105794:	687b      	ldr	r3, [r7, #4]
 8105796:	681b      	ldr	r3, [r3, #0]
 8105798:	4a59      	ldr	r2, [pc, #356]	; (8105900 <HAL_DMA_Abort_IT+0x430>)
 810579a:	4293      	cmp	r3, r2
 810579c:	d068      	beq.n	8105870 <HAL_DMA_Abort_IT+0x3a0>
 810579e:	687b      	ldr	r3, [r7, #4]
 81057a0:	681b      	ldr	r3, [r3, #0]
 81057a2:	4a58      	ldr	r2, [pc, #352]	; (8105904 <HAL_DMA_Abort_IT+0x434>)
 81057a4:	4293      	cmp	r3, r2
 81057a6:	d063      	beq.n	8105870 <HAL_DMA_Abort_IT+0x3a0>
 81057a8:	687b      	ldr	r3, [r7, #4]
 81057aa:	681b      	ldr	r3, [r3, #0]
 81057ac:	4a56      	ldr	r2, [pc, #344]	; (8105908 <HAL_DMA_Abort_IT+0x438>)
 81057ae:	4293      	cmp	r3, r2
 81057b0:	d05e      	beq.n	8105870 <HAL_DMA_Abort_IT+0x3a0>
 81057b2:	687b      	ldr	r3, [r7, #4]
 81057b4:	681b      	ldr	r3, [r3, #0]
 81057b6:	4a55      	ldr	r2, [pc, #340]	; (810590c <HAL_DMA_Abort_IT+0x43c>)
 81057b8:	4293      	cmp	r3, r2
 81057ba:	d059      	beq.n	8105870 <HAL_DMA_Abort_IT+0x3a0>
 81057bc:	687b      	ldr	r3, [r7, #4]
 81057be:	681b      	ldr	r3, [r3, #0]
 81057c0:	4a53      	ldr	r2, [pc, #332]	; (8105910 <HAL_DMA_Abort_IT+0x440>)
 81057c2:	4293      	cmp	r3, r2
 81057c4:	d054      	beq.n	8105870 <HAL_DMA_Abort_IT+0x3a0>
 81057c6:	687b      	ldr	r3, [r7, #4]
 81057c8:	681b      	ldr	r3, [r3, #0]
 81057ca:	4a52      	ldr	r2, [pc, #328]	; (8105914 <HAL_DMA_Abort_IT+0x444>)
 81057cc:	4293      	cmp	r3, r2
 81057ce:	d04f      	beq.n	8105870 <HAL_DMA_Abort_IT+0x3a0>
 81057d0:	687b      	ldr	r3, [r7, #4]
 81057d2:	681b      	ldr	r3, [r3, #0]
 81057d4:	4a50      	ldr	r2, [pc, #320]	; (8105918 <HAL_DMA_Abort_IT+0x448>)
 81057d6:	4293      	cmp	r3, r2
 81057d8:	d04a      	beq.n	8105870 <HAL_DMA_Abort_IT+0x3a0>
 81057da:	687b      	ldr	r3, [r7, #4]
 81057dc:	681b      	ldr	r3, [r3, #0]
 81057de:	4a4f      	ldr	r2, [pc, #316]	; (810591c <HAL_DMA_Abort_IT+0x44c>)
 81057e0:	4293      	cmp	r3, r2
 81057e2:	d045      	beq.n	8105870 <HAL_DMA_Abort_IT+0x3a0>
 81057e4:	687b      	ldr	r3, [r7, #4]
 81057e6:	681b      	ldr	r3, [r3, #0]
 81057e8:	4a4d      	ldr	r2, [pc, #308]	; (8105920 <HAL_DMA_Abort_IT+0x450>)
 81057ea:	4293      	cmp	r3, r2
 81057ec:	d040      	beq.n	8105870 <HAL_DMA_Abort_IT+0x3a0>
 81057ee:	687b      	ldr	r3, [r7, #4]
 81057f0:	681b      	ldr	r3, [r3, #0]
 81057f2:	4a4c      	ldr	r2, [pc, #304]	; (8105924 <HAL_DMA_Abort_IT+0x454>)
 81057f4:	4293      	cmp	r3, r2
 81057f6:	d03b      	beq.n	8105870 <HAL_DMA_Abort_IT+0x3a0>
 81057f8:	687b      	ldr	r3, [r7, #4]
 81057fa:	681b      	ldr	r3, [r3, #0]
 81057fc:	4a4a      	ldr	r2, [pc, #296]	; (8105928 <HAL_DMA_Abort_IT+0x458>)
 81057fe:	4293      	cmp	r3, r2
 8105800:	d036      	beq.n	8105870 <HAL_DMA_Abort_IT+0x3a0>
 8105802:	687b      	ldr	r3, [r7, #4]
 8105804:	681b      	ldr	r3, [r3, #0]
 8105806:	4a49      	ldr	r2, [pc, #292]	; (810592c <HAL_DMA_Abort_IT+0x45c>)
 8105808:	4293      	cmp	r3, r2
 810580a:	d031      	beq.n	8105870 <HAL_DMA_Abort_IT+0x3a0>
 810580c:	687b      	ldr	r3, [r7, #4]
 810580e:	681b      	ldr	r3, [r3, #0]
 8105810:	4a47      	ldr	r2, [pc, #284]	; (8105930 <HAL_DMA_Abort_IT+0x460>)
 8105812:	4293      	cmp	r3, r2
 8105814:	d02c      	beq.n	8105870 <HAL_DMA_Abort_IT+0x3a0>
 8105816:	687b      	ldr	r3, [r7, #4]
 8105818:	681b      	ldr	r3, [r3, #0]
 810581a:	4a46      	ldr	r2, [pc, #280]	; (8105934 <HAL_DMA_Abort_IT+0x464>)
 810581c:	4293      	cmp	r3, r2
 810581e:	d027      	beq.n	8105870 <HAL_DMA_Abort_IT+0x3a0>
 8105820:	687b      	ldr	r3, [r7, #4]
 8105822:	681b      	ldr	r3, [r3, #0]
 8105824:	4a44      	ldr	r2, [pc, #272]	; (8105938 <HAL_DMA_Abort_IT+0x468>)
 8105826:	4293      	cmp	r3, r2
 8105828:	d022      	beq.n	8105870 <HAL_DMA_Abort_IT+0x3a0>
 810582a:	687b      	ldr	r3, [r7, #4]
 810582c:	681b      	ldr	r3, [r3, #0]
 810582e:	4a43      	ldr	r2, [pc, #268]	; (810593c <HAL_DMA_Abort_IT+0x46c>)
 8105830:	4293      	cmp	r3, r2
 8105832:	d01d      	beq.n	8105870 <HAL_DMA_Abort_IT+0x3a0>
 8105834:	687b      	ldr	r3, [r7, #4]
 8105836:	681b      	ldr	r3, [r3, #0]
 8105838:	4a41      	ldr	r2, [pc, #260]	; (8105940 <HAL_DMA_Abort_IT+0x470>)
 810583a:	4293      	cmp	r3, r2
 810583c:	d018      	beq.n	8105870 <HAL_DMA_Abort_IT+0x3a0>
 810583e:	687b      	ldr	r3, [r7, #4]
 8105840:	681b      	ldr	r3, [r3, #0]
 8105842:	4a40      	ldr	r2, [pc, #256]	; (8105944 <HAL_DMA_Abort_IT+0x474>)
 8105844:	4293      	cmp	r3, r2
 8105846:	d013      	beq.n	8105870 <HAL_DMA_Abort_IT+0x3a0>
 8105848:	687b      	ldr	r3, [r7, #4]
 810584a:	681b      	ldr	r3, [r3, #0]
 810584c:	4a3e      	ldr	r2, [pc, #248]	; (8105948 <HAL_DMA_Abort_IT+0x478>)
 810584e:	4293      	cmp	r3, r2
 8105850:	d00e      	beq.n	8105870 <HAL_DMA_Abort_IT+0x3a0>
 8105852:	687b      	ldr	r3, [r7, #4]
 8105854:	681b      	ldr	r3, [r3, #0]
 8105856:	4a3d      	ldr	r2, [pc, #244]	; (810594c <HAL_DMA_Abort_IT+0x47c>)
 8105858:	4293      	cmp	r3, r2
 810585a:	d009      	beq.n	8105870 <HAL_DMA_Abort_IT+0x3a0>
 810585c:	687b      	ldr	r3, [r7, #4]
 810585e:	681b      	ldr	r3, [r3, #0]
 8105860:	4a3b      	ldr	r2, [pc, #236]	; (8105950 <HAL_DMA_Abort_IT+0x480>)
 8105862:	4293      	cmp	r3, r2
 8105864:	d004      	beq.n	8105870 <HAL_DMA_Abort_IT+0x3a0>
 8105866:	687b      	ldr	r3, [r7, #4]
 8105868:	681b      	ldr	r3, [r3, #0]
 810586a:	4a3a      	ldr	r2, [pc, #232]	; (8105954 <HAL_DMA_Abort_IT+0x484>)
 810586c:	4293      	cmp	r3, r2
 810586e:	d101      	bne.n	8105874 <HAL_DMA_Abort_IT+0x3a4>
 8105870:	2301      	movs	r3, #1
 8105872:	e000      	b.n	8105876 <HAL_DMA_Abort_IT+0x3a6>
 8105874:	2300      	movs	r3, #0
 8105876:	2b00      	cmp	r3, #0
 8105878:	d028      	beq.n	81058cc <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 810587a:	687b      	ldr	r3, [r7, #4]
 810587c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 810587e:	681a      	ldr	r2, [r3, #0]
 8105880:	687b      	ldr	r3, [r7, #4]
 8105882:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8105884:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8105888:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 810588a:	687b      	ldr	r3, [r7, #4]
 810588c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810588e:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8105890:	687b      	ldr	r3, [r7, #4]
 8105892:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8105894:	f003 031f 	and.w	r3, r3, #31
 8105898:	2201      	movs	r2, #1
 810589a:	409a      	lsls	r2, r3
 810589c:	68fb      	ldr	r3, [r7, #12]
 810589e:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 81058a0:	687b      	ldr	r3, [r7, #4]
 81058a2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 81058a4:	687a      	ldr	r2, [r7, #4]
 81058a6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 81058a8:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 81058aa:	687b      	ldr	r3, [r7, #4]
 81058ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 81058ae:	2b00      	cmp	r3, #0
 81058b0:	d00c      	beq.n	81058cc <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 81058b2:	687b      	ldr	r3, [r7, #4]
 81058b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 81058b6:	681a      	ldr	r2, [r3, #0]
 81058b8:	687b      	ldr	r3, [r7, #4]
 81058ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 81058bc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 81058c0:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 81058c2:	687b      	ldr	r3, [r7, #4]
 81058c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 81058c6:	687a      	ldr	r2, [r7, #4]
 81058c8:	6f52      	ldr	r2, [r2, #116]	; 0x74
 81058ca:	605a      	str	r2, [r3, #4]
        }
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 81058cc:	687b      	ldr	r3, [r7, #4]
 81058ce:	2200      	movs	r2, #0
 81058d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 81058d4:	687b      	ldr	r3, [r7, #4]
 81058d6:	2201      	movs	r2, #1
 81058d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 81058dc:	687b      	ldr	r3, [r7, #4]
 81058de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81058e0:	2b00      	cmp	r3, #0
 81058e2:	d003      	beq.n	81058ec <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 81058e4:	687b      	ldr	r3, [r7, #4]
 81058e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81058e8:	6878      	ldr	r0, [r7, #4]
 81058ea:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 81058ec:	2300      	movs	r3, #0
}
 81058ee:	4618      	mov	r0, r3
 81058f0:	3710      	adds	r7, #16
 81058f2:	46bd      	mov	sp, r7
 81058f4:	bd80      	pop	{r7, pc}
 81058f6:	bf00      	nop
 81058f8:	40020010 	.word	0x40020010
 81058fc:	40020028 	.word	0x40020028
 8105900:	40020040 	.word	0x40020040
 8105904:	40020058 	.word	0x40020058
 8105908:	40020070 	.word	0x40020070
 810590c:	40020088 	.word	0x40020088
 8105910:	400200a0 	.word	0x400200a0
 8105914:	400200b8 	.word	0x400200b8
 8105918:	40020410 	.word	0x40020410
 810591c:	40020428 	.word	0x40020428
 8105920:	40020440 	.word	0x40020440
 8105924:	40020458 	.word	0x40020458
 8105928:	40020470 	.word	0x40020470
 810592c:	40020488 	.word	0x40020488
 8105930:	400204a0 	.word	0x400204a0
 8105934:	400204b8 	.word	0x400204b8
 8105938:	58025408 	.word	0x58025408
 810593c:	5802541c 	.word	0x5802541c
 8105940:	58025430 	.word	0x58025430
 8105944:	58025444 	.word	0x58025444
 8105948:	58025458 	.word	0x58025458
 810594c:	5802546c 	.word	0x5802546c
 8105950:	58025480 	.word	0x58025480
 8105954:	58025494 	.word	0x58025494

08105958 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8105958:	b580      	push	{r7, lr}
 810595a:	b08a      	sub	sp, #40	; 0x28
 810595c:	af00      	add	r7, sp, #0
 810595e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8105960:	2300      	movs	r3, #0
 8105962:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8105964:	4b67      	ldr	r3, [pc, #412]	; (8105b04 <HAL_DMA_IRQHandler+0x1ac>)
 8105966:	681b      	ldr	r3, [r3, #0]
 8105968:	4a67      	ldr	r2, [pc, #412]	; (8105b08 <HAL_DMA_IRQHandler+0x1b0>)
 810596a:	fba2 2303 	umull	r2, r3, r2, r3
 810596e:	0a9b      	lsrs	r3, r3, #10
 8105970:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8105972:	687b      	ldr	r3, [r7, #4]
 8105974:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8105976:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8105978:	687b      	ldr	r3, [r7, #4]
 810597a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810597c:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 810597e:	6a3b      	ldr	r3, [r7, #32]
 8105980:	681b      	ldr	r3, [r3, #0]
 8105982:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8105984:	69fb      	ldr	r3, [r7, #28]
 8105986:	681b      	ldr	r3, [r3, #0]
 8105988:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 810598a:	687b      	ldr	r3, [r7, #4]
 810598c:	681b      	ldr	r3, [r3, #0]
 810598e:	4a5f      	ldr	r2, [pc, #380]	; (8105b0c <HAL_DMA_IRQHandler+0x1b4>)
 8105990:	4293      	cmp	r3, r2
 8105992:	d04a      	beq.n	8105a2a <HAL_DMA_IRQHandler+0xd2>
 8105994:	687b      	ldr	r3, [r7, #4]
 8105996:	681b      	ldr	r3, [r3, #0]
 8105998:	4a5d      	ldr	r2, [pc, #372]	; (8105b10 <HAL_DMA_IRQHandler+0x1b8>)
 810599a:	4293      	cmp	r3, r2
 810599c:	d045      	beq.n	8105a2a <HAL_DMA_IRQHandler+0xd2>
 810599e:	687b      	ldr	r3, [r7, #4]
 81059a0:	681b      	ldr	r3, [r3, #0]
 81059a2:	4a5c      	ldr	r2, [pc, #368]	; (8105b14 <HAL_DMA_IRQHandler+0x1bc>)
 81059a4:	4293      	cmp	r3, r2
 81059a6:	d040      	beq.n	8105a2a <HAL_DMA_IRQHandler+0xd2>
 81059a8:	687b      	ldr	r3, [r7, #4]
 81059aa:	681b      	ldr	r3, [r3, #0]
 81059ac:	4a5a      	ldr	r2, [pc, #360]	; (8105b18 <HAL_DMA_IRQHandler+0x1c0>)
 81059ae:	4293      	cmp	r3, r2
 81059b0:	d03b      	beq.n	8105a2a <HAL_DMA_IRQHandler+0xd2>
 81059b2:	687b      	ldr	r3, [r7, #4]
 81059b4:	681b      	ldr	r3, [r3, #0]
 81059b6:	4a59      	ldr	r2, [pc, #356]	; (8105b1c <HAL_DMA_IRQHandler+0x1c4>)
 81059b8:	4293      	cmp	r3, r2
 81059ba:	d036      	beq.n	8105a2a <HAL_DMA_IRQHandler+0xd2>
 81059bc:	687b      	ldr	r3, [r7, #4]
 81059be:	681b      	ldr	r3, [r3, #0]
 81059c0:	4a57      	ldr	r2, [pc, #348]	; (8105b20 <HAL_DMA_IRQHandler+0x1c8>)
 81059c2:	4293      	cmp	r3, r2
 81059c4:	d031      	beq.n	8105a2a <HAL_DMA_IRQHandler+0xd2>
 81059c6:	687b      	ldr	r3, [r7, #4]
 81059c8:	681b      	ldr	r3, [r3, #0]
 81059ca:	4a56      	ldr	r2, [pc, #344]	; (8105b24 <HAL_DMA_IRQHandler+0x1cc>)
 81059cc:	4293      	cmp	r3, r2
 81059ce:	d02c      	beq.n	8105a2a <HAL_DMA_IRQHandler+0xd2>
 81059d0:	687b      	ldr	r3, [r7, #4]
 81059d2:	681b      	ldr	r3, [r3, #0]
 81059d4:	4a54      	ldr	r2, [pc, #336]	; (8105b28 <HAL_DMA_IRQHandler+0x1d0>)
 81059d6:	4293      	cmp	r3, r2
 81059d8:	d027      	beq.n	8105a2a <HAL_DMA_IRQHandler+0xd2>
 81059da:	687b      	ldr	r3, [r7, #4]
 81059dc:	681b      	ldr	r3, [r3, #0]
 81059de:	4a53      	ldr	r2, [pc, #332]	; (8105b2c <HAL_DMA_IRQHandler+0x1d4>)
 81059e0:	4293      	cmp	r3, r2
 81059e2:	d022      	beq.n	8105a2a <HAL_DMA_IRQHandler+0xd2>
 81059e4:	687b      	ldr	r3, [r7, #4]
 81059e6:	681b      	ldr	r3, [r3, #0]
 81059e8:	4a51      	ldr	r2, [pc, #324]	; (8105b30 <HAL_DMA_IRQHandler+0x1d8>)
 81059ea:	4293      	cmp	r3, r2
 81059ec:	d01d      	beq.n	8105a2a <HAL_DMA_IRQHandler+0xd2>
 81059ee:	687b      	ldr	r3, [r7, #4]
 81059f0:	681b      	ldr	r3, [r3, #0]
 81059f2:	4a50      	ldr	r2, [pc, #320]	; (8105b34 <HAL_DMA_IRQHandler+0x1dc>)
 81059f4:	4293      	cmp	r3, r2
 81059f6:	d018      	beq.n	8105a2a <HAL_DMA_IRQHandler+0xd2>
 81059f8:	687b      	ldr	r3, [r7, #4]
 81059fa:	681b      	ldr	r3, [r3, #0]
 81059fc:	4a4e      	ldr	r2, [pc, #312]	; (8105b38 <HAL_DMA_IRQHandler+0x1e0>)
 81059fe:	4293      	cmp	r3, r2
 8105a00:	d013      	beq.n	8105a2a <HAL_DMA_IRQHandler+0xd2>
 8105a02:	687b      	ldr	r3, [r7, #4]
 8105a04:	681b      	ldr	r3, [r3, #0]
 8105a06:	4a4d      	ldr	r2, [pc, #308]	; (8105b3c <HAL_DMA_IRQHandler+0x1e4>)
 8105a08:	4293      	cmp	r3, r2
 8105a0a:	d00e      	beq.n	8105a2a <HAL_DMA_IRQHandler+0xd2>
 8105a0c:	687b      	ldr	r3, [r7, #4]
 8105a0e:	681b      	ldr	r3, [r3, #0]
 8105a10:	4a4b      	ldr	r2, [pc, #300]	; (8105b40 <HAL_DMA_IRQHandler+0x1e8>)
 8105a12:	4293      	cmp	r3, r2
 8105a14:	d009      	beq.n	8105a2a <HAL_DMA_IRQHandler+0xd2>
 8105a16:	687b      	ldr	r3, [r7, #4]
 8105a18:	681b      	ldr	r3, [r3, #0]
 8105a1a:	4a4a      	ldr	r2, [pc, #296]	; (8105b44 <HAL_DMA_IRQHandler+0x1ec>)
 8105a1c:	4293      	cmp	r3, r2
 8105a1e:	d004      	beq.n	8105a2a <HAL_DMA_IRQHandler+0xd2>
 8105a20:	687b      	ldr	r3, [r7, #4]
 8105a22:	681b      	ldr	r3, [r3, #0]
 8105a24:	4a48      	ldr	r2, [pc, #288]	; (8105b48 <HAL_DMA_IRQHandler+0x1f0>)
 8105a26:	4293      	cmp	r3, r2
 8105a28:	d101      	bne.n	8105a2e <HAL_DMA_IRQHandler+0xd6>
 8105a2a:	2301      	movs	r3, #1
 8105a2c:	e000      	b.n	8105a30 <HAL_DMA_IRQHandler+0xd8>
 8105a2e:	2300      	movs	r3, #0
 8105a30:	2b00      	cmp	r3, #0
 8105a32:	f000 842b 	beq.w	810628c <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8105a36:	687b      	ldr	r3, [r7, #4]
 8105a38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8105a3a:	f003 031f 	and.w	r3, r3, #31
 8105a3e:	2208      	movs	r2, #8
 8105a40:	409a      	lsls	r2, r3
 8105a42:	69bb      	ldr	r3, [r7, #24]
 8105a44:	4013      	ands	r3, r2
 8105a46:	2b00      	cmp	r3, #0
 8105a48:	f000 80a2 	beq.w	8105b90 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8105a4c:	687b      	ldr	r3, [r7, #4]
 8105a4e:	681b      	ldr	r3, [r3, #0]
 8105a50:	4a2e      	ldr	r2, [pc, #184]	; (8105b0c <HAL_DMA_IRQHandler+0x1b4>)
 8105a52:	4293      	cmp	r3, r2
 8105a54:	d04a      	beq.n	8105aec <HAL_DMA_IRQHandler+0x194>
 8105a56:	687b      	ldr	r3, [r7, #4]
 8105a58:	681b      	ldr	r3, [r3, #0]
 8105a5a:	4a2d      	ldr	r2, [pc, #180]	; (8105b10 <HAL_DMA_IRQHandler+0x1b8>)
 8105a5c:	4293      	cmp	r3, r2
 8105a5e:	d045      	beq.n	8105aec <HAL_DMA_IRQHandler+0x194>
 8105a60:	687b      	ldr	r3, [r7, #4]
 8105a62:	681b      	ldr	r3, [r3, #0]
 8105a64:	4a2b      	ldr	r2, [pc, #172]	; (8105b14 <HAL_DMA_IRQHandler+0x1bc>)
 8105a66:	4293      	cmp	r3, r2
 8105a68:	d040      	beq.n	8105aec <HAL_DMA_IRQHandler+0x194>
 8105a6a:	687b      	ldr	r3, [r7, #4]
 8105a6c:	681b      	ldr	r3, [r3, #0]
 8105a6e:	4a2a      	ldr	r2, [pc, #168]	; (8105b18 <HAL_DMA_IRQHandler+0x1c0>)
 8105a70:	4293      	cmp	r3, r2
 8105a72:	d03b      	beq.n	8105aec <HAL_DMA_IRQHandler+0x194>
 8105a74:	687b      	ldr	r3, [r7, #4]
 8105a76:	681b      	ldr	r3, [r3, #0]
 8105a78:	4a28      	ldr	r2, [pc, #160]	; (8105b1c <HAL_DMA_IRQHandler+0x1c4>)
 8105a7a:	4293      	cmp	r3, r2
 8105a7c:	d036      	beq.n	8105aec <HAL_DMA_IRQHandler+0x194>
 8105a7e:	687b      	ldr	r3, [r7, #4]
 8105a80:	681b      	ldr	r3, [r3, #0]
 8105a82:	4a27      	ldr	r2, [pc, #156]	; (8105b20 <HAL_DMA_IRQHandler+0x1c8>)
 8105a84:	4293      	cmp	r3, r2
 8105a86:	d031      	beq.n	8105aec <HAL_DMA_IRQHandler+0x194>
 8105a88:	687b      	ldr	r3, [r7, #4]
 8105a8a:	681b      	ldr	r3, [r3, #0]
 8105a8c:	4a25      	ldr	r2, [pc, #148]	; (8105b24 <HAL_DMA_IRQHandler+0x1cc>)
 8105a8e:	4293      	cmp	r3, r2
 8105a90:	d02c      	beq.n	8105aec <HAL_DMA_IRQHandler+0x194>
 8105a92:	687b      	ldr	r3, [r7, #4]
 8105a94:	681b      	ldr	r3, [r3, #0]
 8105a96:	4a24      	ldr	r2, [pc, #144]	; (8105b28 <HAL_DMA_IRQHandler+0x1d0>)
 8105a98:	4293      	cmp	r3, r2
 8105a9a:	d027      	beq.n	8105aec <HAL_DMA_IRQHandler+0x194>
 8105a9c:	687b      	ldr	r3, [r7, #4]
 8105a9e:	681b      	ldr	r3, [r3, #0]
 8105aa0:	4a22      	ldr	r2, [pc, #136]	; (8105b2c <HAL_DMA_IRQHandler+0x1d4>)
 8105aa2:	4293      	cmp	r3, r2
 8105aa4:	d022      	beq.n	8105aec <HAL_DMA_IRQHandler+0x194>
 8105aa6:	687b      	ldr	r3, [r7, #4]
 8105aa8:	681b      	ldr	r3, [r3, #0]
 8105aaa:	4a21      	ldr	r2, [pc, #132]	; (8105b30 <HAL_DMA_IRQHandler+0x1d8>)
 8105aac:	4293      	cmp	r3, r2
 8105aae:	d01d      	beq.n	8105aec <HAL_DMA_IRQHandler+0x194>
 8105ab0:	687b      	ldr	r3, [r7, #4]
 8105ab2:	681b      	ldr	r3, [r3, #0]
 8105ab4:	4a1f      	ldr	r2, [pc, #124]	; (8105b34 <HAL_DMA_IRQHandler+0x1dc>)
 8105ab6:	4293      	cmp	r3, r2
 8105ab8:	d018      	beq.n	8105aec <HAL_DMA_IRQHandler+0x194>
 8105aba:	687b      	ldr	r3, [r7, #4]
 8105abc:	681b      	ldr	r3, [r3, #0]
 8105abe:	4a1e      	ldr	r2, [pc, #120]	; (8105b38 <HAL_DMA_IRQHandler+0x1e0>)
 8105ac0:	4293      	cmp	r3, r2
 8105ac2:	d013      	beq.n	8105aec <HAL_DMA_IRQHandler+0x194>
 8105ac4:	687b      	ldr	r3, [r7, #4]
 8105ac6:	681b      	ldr	r3, [r3, #0]
 8105ac8:	4a1c      	ldr	r2, [pc, #112]	; (8105b3c <HAL_DMA_IRQHandler+0x1e4>)
 8105aca:	4293      	cmp	r3, r2
 8105acc:	d00e      	beq.n	8105aec <HAL_DMA_IRQHandler+0x194>
 8105ace:	687b      	ldr	r3, [r7, #4]
 8105ad0:	681b      	ldr	r3, [r3, #0]
 8105ad2:	4a1b      	ldr	r2, [pc, #108]	; (8105b40 <HAL_DMA_IRQHandler+0x1e8>)
 8105ad4:	4293      	cmp	r3, r2
 8105ad6:	d009      	beq.n	8105aec <HAL_DMA_IRQHandler+0x194>
 8105ad8:	687b      	ldr	r3, [r7, #4]
 8105ada:	681b      	ldr	r3, [r3, #0]
 8105adc:	4a19      	ldr	r2, [pc, #100]	; (8105b44 <HAL_DMA_IRQHandler+0x1ec>)
 8105ade:	4293      	cmp	r3, r2
 8105ae0:	d004      	beq.n	8105aec <HAL_DMA_IRQHandler+0x194>
 8105ae2:	687b      	ldr	r3, [r7, #4]
 8105ae4:	681b      	ldr	r3, [r3, #0]
 8105ae6:	4a18      	ldr	r2, [pc, #96]	; (8105b48 <HAL_DMA_IRQHandler+0x1f0>)
 8105ae8:	4293      	cmp	r3, r2
 8105aea:	d12f      	bne.n	8105b4c <HAL_DMA_IRQHandler+0x1f4>
 8105aec:	687b      	ldr	r3, [r7, #4]
 8105aee:	681b      	ldr	r3, [r3, #0]
 8105af0:	681b      	ldr	r3, [r3, #0]
 8105af2:	f003 0304 	and.w	r3, r3, #4
 8105af6:	2b00      	cmp	r3, #0
 8105af8:	bf14      	ite	ne
 8105afa:	2301      	movne	r3, #1
 8105afc:	2300      	moveq	r3, #0
 8105afe:	b2db      	uxtb	r3, r3
 8105b00:	e02e      	b.n	8105b60 <HAL_DMA_IRQHandler+0x208>
 8105b02:	bf00      	nop
 8105b04:	10000000 	.word	0x10000000
 8105b08:	1b4e81b5 	.word	0x1b4e81b5
 8105b0c:	40020010 	.word	0x40020010
 8105b10:	40020028 	.word	0x40020028
 8105b14:	40020040 	.word	0x40020040
 8105b18:	40020058 	.word	0x40020058
 8105b1c:	40020070 	.word	0x40020070
 8105b20:	40020088 	.word	0x40020088
 8105b24:	400200a0 	.word	0x400200a0
 8105b28:	400200b8 	.word	0x400200b8
 8105b2c:	40020410 	.word	0x40020410
 8105b30:	40020428 	.word	0x40020428
 8105b34:	40020440 	.word	0x40020440
 8105b38:	40020458 	.word	0x40020458
 8105b3c:	40020470 	.word	0x40020470
 8105b40:	40020488 	.word	0x40020488
 8105b44:	400204a0 	.word	0x400204a0
 8105b48:	400204b8 	.word	0x400204b8
 8105b4c:	687b      	ldr	r3, [r7, #4]
 8105b4e:	681b      	ldr	r3, [r3, #0]
 8105b50:	681b      	ldr	r3, [r3, #0]
 8105b52:	f003 0308 	and.w	r3, r3, #8
 8105b56:	2b00      	cmp	r3, #0
 8105b58:	bf14      	ite	ne
 8105b5a:	2301      	movne	r3, #1
 8105b5c:	2300      	moveq	r3, #0
 8105b5e:	b2db      	uxtb	r3, r3
 8105b60:	2b00      	cmp	r3, #0
 8105b62:	d015      	beq.n	8105b90 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8105b64:	687b      	ldr	r3, [r7, #4]
 8105b66:	681b      	ldr	r3, [r3, #0]
 8105b68:	681a      	ldr	r2, [r3, #0]
 8105b6a:	687b      	ldr	r3, [r7, #4]
 8105b6c:	681b      	ldr	r3, [r3, #0]
 8105b6e:	f022 0204 	bic.w	r2, r2, #4
 8105b72:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8105b74:	687b      	ldr	r3, [r7, #4]
 8105b76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8105b78:	f003 031f 	and.w	r3, r3, #31
 8105b7c:	2208      	movs	r2, #8
 8105b7e:	409a      	lsls	r2, r3
 8105b80:	6a3b      	ldr	r3, [r7, #32]
 8105b82:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8105b84:	687b      	ldr	r3, [r7, #4]
 8105b86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8105b88:	f043 0201 	orr.w	r2, r3, #1
 8105b8c:	687b      	ldr	r3, [r7, #4]
 8105b8e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8105b90:	687b      	ldr	r3, [r7, #4]
 8105b92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8105b94:	f003 031f 	and.w	r3, r3, #31
 8105b98:	69ba      	ldr	r2, [r7, #24]
 8105b9a:	fa22 f303 	lsr.w	r3, r2, r3
 8105b9e:	f003 0301 	and.w	r3, r3, #1
 8105ba2:	2b00      	cmp	r3, #0
 8105ba4:	d06e      	beq.n	8105c84 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8105ba6:	687b      	ldr	r3, [r7, #4]
 8105ba8:	681b      	ldr	r3, [r3, #0]
 8105baa:	4a69      	ldr	r2, [pc, #420]	; (8105d50 <HAL_DMA_IRQHandler+0x3f8>)
 8105bac:	4293      	cmp	r3, r2
 8105bae:	d04a      	beq.n	8105c46 <HAL_DMA_IRQHandler+0x2ee>
 8105bb0:	687b      	ldr	r3, [r7, #4]
 8105bb2:	681b      	ldr	r3, [r3, #0]
 8105bb4:	4a67      	ldr	r2, [pc, #412]	; (8105d54 <HAL_DMA_IRQHandler+0x3fc>)
 8105bb6:	4293      	cmp	r3, r2
 8105bb8:	d045      	beq.n	8105c46 <HAL_DMA_IRQHandler+0x2ee>
 8105bba:	687b      	ldr	r3, [r7, #4]
 8105bbc:	681b      	ldr	r3, [r3, #0]
 8105bbe:	4a66      	ldr	r2, [pc, #408]	; (8105d58 <HAL_DMA_IRQHandler+0x400>)
 8105bc0:	4293      	cmp	r3, r2
 8105bc2:	d040      	beq.n	8105c46 <HAL_DMA_IRQHandler+0x2ee>
 8105bc4:	687b      	ldr	r3, [r7, #4]
 8105bc6:	681b      	ldr	r3, [r3, #0]
 8105bc8:	4a64      	ldr	r2, [pc, #400]	; (8105d5c <HAL_DMA_IRQHandler+0x404>)
 8105bca:	4293      	cmp	r3, r2
 8105bcc:	d03b      	beq.n	8105c46 <HAL_DMA_IRQHandler+0x2ee>
 8105bce:	687b      	ldr	r3, [r7, #4]
 8105bd0:	681b      	ldr	r3, [r3, #0]
 8105bd2:	4a63      	ldr	r2, [pc, #396]	; (8105d60 <HAL_DMA_IRQHandler+0x408>)
 8105bd4:	4293      	cmp	r3, r2
 8105bd6:	d036      	beq.n	8105c46 <HAL_DMA_IRQHandler+0x2ee>
 8105bd8:	687b      	ldr	r3, [r7, #4]
 8105bda:	681b      	ldr	r3, [r3, #0]
 8105bdc:	4a61      	ldr	r2, [pc, #388]	; (8105d64 <HAL_DMA_IRQHandler+0x40c>)
 8105bde:	4293      	cmp	r3, r2
 8105be0:	d031      	beq.n	8105c46 <HAL_DMA_IRQHandler+0x2ee>
 8105be2:	687b      	ldr	r3, [r7, #4]
 8105be4:	681b      	ldr	r3, [r3, #0]
 8105be6:	4a60      	ldr	r2, [pc, #384]	; (8105d68 <HAL_DMA_IRQHandler+0x410>)
 8105be8:	4293      	cmp	r3, r2
 8105bea:	d02c      	beq.n	8105c46 <HAL_DMA_IRQHandler+0x2ee>
 8105bec:	687b      	ldr	r3, [r7, #4]
 8105bee:	681b      	ldr	r3, [r3, #0]
 8105bf0:	4a5e      	ldr	r2, [pc, #376]	; (8105d6c <HAL_DMA_IRQHandler+0x414>)
 8105bf2:	4293      	cmp	r3, r2
 8105bf4:	d027      	beq.n	8105c46 <HAL_DMA_IRQHandler+0x2ee>
 8105bf6:	687b      	ldr	r3, [r7, #4]
 8105bf8:	681b      	ldr	r3, [r3, #0]
 8105bfa:	4a5d      	ldr	r2, [pc, #372]	; (8105d70 <HAL_DMA_IRQHandler+0x418>)
 8105bfc:	4293      	cmp	r3, r2
 8105bfe:	d022      	beq.n	8105c46 <HAL_DMA_IRQHandler+0x2ee>
 8105c00:	687b      	ldr	r3, [r7, #4]
 8105c02:	681b      	ldr	r3, [r3, #0]
 8105c04:	4a5b      	ldr	r2, [pc, #364]	; (8105d74 <HAL_DMA_IRQHandler+0x41c>)
 8105c06:	4293      	cmp	r3, r2
 8105c08:	d01d      	beq.n	8105c46 <HAL_DMA_IRQHandler+0x2ee>
 8105c0a:	687b      	ldr	r3, [r7, #4]
 8105c0c:	681b      	ldr	r3, [r3, #0]
 8105c0e:	4a5a      	ldr	r2, [pc, #360]	; (8105d78 <HAL_DMA_IRQHandler+0x420>)
 8105c10:	4293      	cmp	r3, r2
 8105c12:	d018      	beq.n	8105c46 <HAL_DMA_IRQHandler+0x2ee>
 8105c14:	687b      	ldr	r3, [r7, #4]
 8105c16:	681b      	ldr	r3, [r3, #0]
 8105c18:	4a58      	ldr	r2, [pc, #352]	; (8105d7c <HAL_DMA_IRQHandler+0x424>)
 8105c1a:	4293      	cmp	r3, r2
 8105c1c:	d013      	beq.n	8105c46 <HAL_DMA_IRQHandler+0x2ee>
 8105c1e:	687b      	ldr	r3, [r7, #4]
 8105c20:	681b      	ldr	r3, [r3, #0]
 8105c22:	4a57      	ldr	r2, [pc, #348]	; (8105d80 <HAL_DMA_IRQHandler+0x428>)
 8105c24:	4293      	cmp	r3, r2
 8105c26:	d00e      	beq.n	8105c46 <HAL_DMA_IRQHandler+0x2ee>
 8105c28:	687b      	ldr	r3, [r7, #4]
 8105c2a:	681b      	ldr	r3, [r3, #0]
 8105c2c:	4a55      	ldr	r2, [pc, #340]	; (8105d84 <HAL_DMA_IRQHandler+0x42c>)
 8105c2e:	4293      	cmp	r3, r2
 8105c30:	d009      	beq.n	8105c46 <HAL_DMA_IRQHandler+0x2ee>
 8105c32:	687b      	ldr	r3, [r7, #4]
 8105c34:	681b      	ldr	r3, [r3, #0]
 8105c36:	4a54      	ldr	r2, [pc, #336]	; (8105d88 <HAL_DMA_IRQHandler+0x430>)
 8105c38:	4293      	cmp	r3, r2
 8105c3a:	d004      	beq.n	8105c46 <HAL_DMA_IRQHandler+0x2ee>
 8105c3c:	687b      	ldr	r3, [r7, #4]
 8105c3e:	681b      	ldr	r3, [r3, #0]
 8105c40:	4a52      	ldr	r2, [pc, #328]	; (8105d8c <HAL_DMA_IRQHandler+0x434>)
 8105c42:	4293      	cmp	r3, r2
 8105c44:	d10a      	bne.n	8105c5c <HAL_DMA_IRQHandler+0x304>
 8105c46:	687b      	ldr	r3, [r7, #4]
 8105c48:	681b      	ldr	r3, [r3, #0]
 8105c4a:	695b      	ldr	r3, [r3, #20]
 8105c4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8105c50:	2b00      	cmp	r3, #0
 8105c52:	bf14      	ite	ne
 8105c54:	2301      	movne	r3, #1
 8105c56:	2300      	moveq	r3, #0
 8105c58:	b2db      	uxtb	r3, r3
 8105c5a:	e003      	b.n	8105c64 <HAL_DMA_IRQHandler+0x30c>
 8105c5c:	687b      	ldr	r3, [r7, #4]
 8105c5e:	681b      	ldr	r3, [r3, #0]
 8105c60:	681b      	ldr	r3, [r3, #0]
 8105c62:	2300      	movs	r3, #0
 8105c64:	2b00      	cmp	r3, #0
 8105c66:	d00d      	beq.n	8105c84 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8105c68:	687b      	ldr	r3, [r7, #4]
 8105c6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8105c6c:	f003 031f 	and.w	r3, r3, #31
 8105c70:	2201      	movs	r2, #1
 8105c72:	409a      	lsls	r2, r3
 8105c74:	6a3b      	ldr	r3, [r7, #32]
 8105c76:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8105c78:	687b      	ldr	r3, [r7, #4]
 8105c7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8105c7c:	f043 0202 	orr.w	r2, r3, #2
 8105c80:	687b      	ldr	r3, [r7, #4]
 8105c82:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8105c84:	687b      	ldr	r3, [r7, #4]
 8105c86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8105c88:	f003 031f 	and.w	r3, r3, #31
 8105c8c:	2204      	movs	r2, #4
 8105c8e:	409a      	lsls	r2, r3
 8105c90:	69bb      	ldr	r3, [r7, #24]
 8105c92:	4013      	ands	r3, r2
 8105c94:	2b00      	cmp	r3, #0
 8105c96:	f000 808f 	beq.w	8105db8 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8105c9a:	687b      	ldr	r3, [r7, #4]
 8105c9c:	681b      	ldr	r3, [r3, #0]
 8105c9e:	4a2c      	ldr	r2, [pc, #176]	; (8105d50 <HAL_DMA_IRQHandler+0x3f8>)
 8105ca0:	4293      	cmp	r3, r2
 8105ca2:	d04a      	beq.n	8105d3a <HAL_DMA_IRQHandler+0x3e2>
 8105ca4:	687b      	ldr	r3, [r7, #4]
 8105ca6:	681b      	ldr	r3, [r3, #0]
 8105ca8:	4a2a      	ldr	r2, [pc, #168]	; (8105d54 <HAL_DMA_IRQHandler+0x3fc>)
 8105caa:	4293      	cmp	r3, r2
 8105cac:	d045      	beq.n	8105d3a <HAL_DMA_IRQHandler+0x3e2>
 8105cae:	687b      	ldr	r3, [r7, #4]
 8105cb0:	681b      	ldr	r3, [r3, #0]
 8105cb2:	4a29      	ldr	r2, [pc, #164]	; (8105d58 <HAL_DMA_IRQHandler+0x400>)
 8105cb4:	4293      	cmp	r3, r2
 8105cb6:	d040      	beq.n	8105d3a <HAL_DMA_IRQHandler+0x3e2>
 8105cb8:	687b      	ldr	r3, [r7, #4]
 8105cba:	681b      	ldr	r3, [r3, #0]
 8105cbc:	4a27      	ldr	r2, [pc, #156]	; (8105d5c <HAL_DMA_IRQHandler+0x404>)
 8105cbe:	4293      	cmp	r3, r2
 8105cc0:	d03b      	beq.n	8105d3a <HAL_DMA_IRQHandler+0x3e2>
 8105cc2:	687b      	ldr	r3, [r7, #4]
 8105cc4:	681b      	ldr	r3, [r3, #0]
 8105cc6:	4a26      	ldr	r2, [pc, #152]	; (8105d60 <HAL_DMA_IRQHandler+0x408>)
 8105cc8:	4293      	cmp	r3, r2
 8105cca:	d036      	beq.n	8105d3a <HAL_DMA_IRQHandler+0x3e2>
 8105ccc:	687b      	ldr	r3, [r7, #4]
 8105cce:	681b      	ldr	r3, [r3, #0]
 8105cd0:	4a24      	ldr	r2, [pc, #144]	; (8105d64 <HAL_DMA_IRQHandler+0x40c>)
 8105cd2:	4293      	cmp	r3, r2
 8105cd4:	d031      	beq.n	8105d3a <HAL_DMA_IRQHandler+0x3e2>
 8105cd6:	687b      	ldr	r3, [r7, #4]
 8105cd8:	681b      	ldr	r3, [r3, #0]
 8105cda:	4a23      	ldr	r2, [pc, #140]	; (8105d68 <HAL_DMA_IRQHandler+0x410>)
 8105cdc:	4293      	cmp	r3, r2
 8105cde:	d02c      	beq.n	8105d3a <HAL_DMA_IRQHandler+0x3e2>
 8105ce0:	687b      	ldr	r3, [r7, #4]
 8105ce2:	681b      	ldr	r3, [r3, #0]
 8105ce4:	4a21      	ldr	r2, [pc, #132]	; (8105d6c <HAL_DMA_IRQHandler+0x414>)
 8105ce6:	4293      	cmp	r3, r2
 8105ce8:	d027      	beq.n	8105d3a <HAL_DMA_IRQHandler+0x3e2>
 8105cea:	687b      	ldr	r3, [r7, #4]
 8105cec:	681b      	ldr	r3, [r3, #0]
 8105cee:	4a20      	ldr	r2, [pc, #128]	; (8105d70 <HAL_DMA_IRQHandler+0x418>)
 8105cf0:	4293      	cmp	r3, r2
 8105cf2:	d022      	beq.n	8105d3a <HAL_DMA_IRQHandler+0x3e2>
 8105cf4:	687b      	ldr	r3, [r7, #4]
 8105cf6:	681b      	ldr	r3, [r3, #0]
 8105cf8:	4a1e      	ldr	r2, [pc, #120]	; (8105d74 <HAL_DMA_IRQHandler+0x41c>)
 8105cfa:	4293      	cmp	r3, r2
 8105cfc:	d01d      	beq.n	8105d3a <HAL_DMA_IRQHandler+0x3e2>
 8105cfe:	687b      	ldr	r3, [r7, #4]
 8105d00:	681b      	ldr	r3, [r3, #0]
 8105d02:	4a1d      	ldr	r2, [pc, #116]	; (8105d78 <HAL_DMA_IRQHandler+0x420>)
 8105d04:	4293      	cmp	r3, r2
 8105d06:	d018      	beq.n	8105d3a <HAL_DMA_IRQHandler+0x3e2>
 8105d08:	687b      	ldr	r3, [r7, #4]
 8105d0a:	681b      	ldr	r3, [r3, #0]
 8105d0c:	4a1b      	ldr	r2, [pc, #108]	; (8105d7c <HAL_DMA_IRQHandler+0x424>)
 8105d0e:	4293      	cmp	r3, r2
 8105d10:	d013      	beq.n	8105d3a <HAL_DMA_IRQHandler+0x3e2>
 8105d12:	687b      	ldr	r3, [r7, #4]
 8105d14:	681b      	ldr	r3, [r3, #0]
 8105d16:	4a1a      	ldr	r2, [pc, #104]	; (8105d80 <HAL_DMA_IRQHandler+0x428>)
 8105d18:	4293      	cmp	r3, r2
 8105d1a:	d00e      	beq.n	8105d3a <HAL_DMA_IRQHandler+0x3e2>
 8105d1c:	687b      	ldr	r3, [r7, #4]
 8105d1e:	681b      	ldr	r3, [r3, #0]
 8105d20:	4a18      	ldr	r2, [pc, #96]	; (8105d84 <HAL_DMA_IRQHandler+0x42c>)
 8105d22:	4293      	cmp	r3, r2
 8105d24:	d009      	beq.n	8105d3a <HAL_DMA_IRQHandler+0x3e2>
 8105d26:	687b      	ldr	r3, [r7, #4]
 8105d28:	681b      	ldr	r3, [r3, #0]
 8105d2a:	4a17      	ldr	r2, [pc, #92]	; (8105d88 <HAL_DMA_IRQHandler+0x430>)
 8105d2c:	4293      	cmp	r3, r2
 8105d2e:	d004      	beq.n	8105d3a <HAL_DMA_IRQHandler+0x3e2>
 8105d30:	687b      	ldr	r3, [r7, #4]
 8105d32:	681b      	ldr	r3, [r3, #0]
 8105d34:	4a15      	ldr	r2, [pc, #84]	; (8105d8c <HAL_DMA_IRQHandler+0x434>)
 8105d36:	4293      	cmp	r3, r2
 8105d38:	d12a      	bne.n	8105d90 <HAL_DMA_IRQHandler+0x438>
 8105d3a:	687b      	ldr	r3, [r7, #4]
 8105d3c:	681b      	ldr	r3, [r3, #0]
 8105d3e:	681b      	ldr	r3, [r3, #0]
 8105d40:	f003 0302 	and.w	r3, r3, #2
 8105d44:	2b00      	cmp	r3, #0
 8105d46:	bf14      	ite	ne
 8105d48:	2301      	movne	r3, #1
 8105d4a:	2300      	moveq	r3, #0
 8105d4c:	b2db      	uxtb	r3, r3
 8105d4e:	e023      	b.n	8105d98 <HAL_DMA_IRQHandler+0x440>
 8105d50:	40020010 	.word	0x40020010
 8105d54:	40020028 	.word	0x40020028
 8105d58:	40020040 	.word	0x40020040
 8105d5c:	40020058 	.word	0x40020058
 8105d60:	40020070 	.word	0x40020070
 8105d64:	40020088 	.word	0x40020088
 8105d68:	400200a0 	.word	0x400200a0
 8105d6c:	400200b8 	.word	0x400200b8
 8105d70:	40020410 	.word	0x40020410
 8105d74:	40020428 	.word	0x40020428
 8105d78:	40020440 	.word	0x40020440
 8105d7c:	40020458 	.word	0x40020458
 8105d80:	40020470 	.word	0x40020470
 8105d84:	40020488 	.word	0x40020488
 8105d88:	400204a0 	.word	0x400204a0
 8105d8c:	400204b8 	.word	0x400204b8
 8105d90:	687b      	ldr	r3, [r7, #4]
 8105d92:	681b      	ldr	r3, [r3, #0]
 8105d94:	681b      	ldr	r3, [r3, #0]
 8105d96:	2300      	movs	r3, #0
 8105d98:	2b00      	cmp	r3, #0
 8105d9a:	d00d      	beq.n	8105db8 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8105d9c:	687b      	ldr	r3, [r7, #4]
 8105d9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8105da0:	f003 031f 	and.w	r3, r3, #31
 8105da4:	2204      	movs	r2, #4
 8105da6:	409a      	lsls	r2, r3
 8105da8:	6a3b      	ldr	r3, [r7, #32]
 8105daa:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8105dac:	687b      	ldr	r3, [r7, #4]
 8105dae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8105db0:	f043 0204 	orr.w	r2, r3, #4
 8105db4:	687b      	ldr	r3, [r7, #4]
 8105db6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8105db8:	687b      	ldr	r3, [r7, #4]
 8105dba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8105dbc:	f003 031f 	and.w	r3, r3, #31
 8105dc0:	2210      	movs	r2, #16
 8105dc2:	409a      	lsls	r2, r3
 8105dc4:	69bb      	ldr	r3, [r7, #24]
 8105dc6:	4013      	ands	r3, r2
 8105dc8:	2b00      	cmp	r3, #0
 8105dca:	f000 80a6 	beq.w	8105f1a <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8105dce:	687b      	ldr	r3, [r7, #4]
 8105dd0:	681b      	ldr	r3, [r3, #0]
 8105dd2:	4a85      	ldr	r2, [pc, #532]	; (8105fe8 <HAL_DMA_IRQHandler+0x690>)
 8105dd4:	4293      	cmp	r3, r2
 8105dd6:	d04a      	beq.n	8105e6e <HAL_DMA_IRQHandler+0x516>
 8105dd8:	687b      	ldr	r3, [r7, #4]
 8105dda:	681b      	ldr	r3, [r3, #0]
 8105ddc:	4a83      	ldr	r2, [pc, #524]	; (8105fec <HAL_DMA_IRQHandler+0x694>)
 8105dde:	4293      	cmp	r3, r2
 8105de0:	d045      	beq.n	8105e6e <HAL_DMA_IRQHandler+0x516>
 8105de2:	687b      	ldr	r3, [r7, #4]
 8105de4:	681b      	ldr	r3, [r3, #0]
 8105de6:	4a82      	ldr	r2, [pc, #520]	; (8105ff0 <HAL_DMA_IRQHandler+0x698>)
 8105de8:	4293      	cmp	r3, r2
 8105dea:	d040      	beq.n	8105e6e <HAL_DMA_IRQHandler+0x516>
 8105dec:	687b      	ldr	r3, [r7, #4]
 8105dee:	681b      	ldr	r3, [r3, #0]
 8105df0:	4a80      	ldr	r2, [pc, #512]	; (8105ff4 <HAL_DMA_IRQHandler+0x69c>)
 8105df2:	4293      	cmp	r3, r2
 8105df4:	d03b      	beq.n	8105e6e <HAL_DMA_IRQHandler+0x516>
 8105df6:	687b      	ldr	r3, [r7, #4]
 8105df8:	681b      	ldr	r3, [r3, #0]
 8105dfa:	4a7f      	ldr	r2, [pc, #508]	; (8105ff8 <HAL_DMA_IRQHandler+0x6a0>)
 8105dfc:	4293      	cmp	r3, r2
 8105dfe:	d036      	beq.n	8105e6e <HAL_DMA_IRQHandler+0x516>
 8105e00:	687b      	ldr	r3, [r7, #4]
 8105e02:	681b      	ldr	r3, [r3, #0]
 8105e04:	4a7d      	ldr	r2, [pc, #500]	; (8105ffc <HAL_DMA_IRQHandler+0x6a4>)
 8105e06:	4293      	cmp	r3, r2
 8105e08:	d031      	beq.n	8105e6e <HAL_DMA_IRQHandler+0x516>
 8105e0a:	687b      	ldr	r3, [r7, #4]
 8105e0c:	681b      	ldr	r3, [r3, #0]
 8105e0e:	4a7c      	ldr	r2, [pc, #496]	; (8106000 <HAL_DMA_IRQHandler+0x6a8>)
 8105e10:	4293      	cmp	r3, r2
 8105e12:	d02c      	beq.n	8105e6e <HAL_DMA_IRQHandler+0x516>
 8105e14:	687b      	ldr	r3, [r7, #4]
 8105e16:	681b      	ldr	r3, [r3, #0]
 8105e18:	4a7a      	ldr	r2, [pc, #488]	; (8106004 <HAL_DMA_IRQHandler+0x6ac>)
 8105e1a:	4293      	cmp	r3, r2
 8105e1c:	d027      	beq.n	8105e6e <HAL_DMA_IRQHandler+0x516>
 8105e1e:	687b      	ldr	r3, [r7, #4]
 8105e20:	681b      	ldr	r3, [r3, #0]
 8105e22:	4a79      	ldr	r2, [pc, #484]	; (8106008 <HAL_DMA_IRQHandler+0x6b0>)
 8105e24:	4293      	cmp	r3, r2
 8105e26:	d022      	beq.n	8105e6e <HAL_DMA_IRQHandler+0x516>
 8105e28:	687b      	ldr	r3, [r7, #4]
 8105e2a:	681b      	ldr	r3, [r3, #0]
 8105e2c:	4a77      	ldr	r2, [pc, #476]	; (810600c <HAL_DMA_IRQHandler+0x6b4>)
 8105e2e:	4293      	cmp	r3, r2
 8105e30:	d01d      	beq.n	8105e6e <HAL_DMA_IRQHandler+0x516>
 8105e32:	687b      	ldr	r3, [r7, #4]
 8105e34:	681b      	ldr	r3, [r3, #0]
 8105e36:	4a76      	ldr	r2, [pc, #472]	; (8106010 <HAL_DMA_IRQHandler+0x6b8>)
 8105e38:	4293      	cmp	r3, r2
 8105e3a:	d018      	beq.n	8105e6e <HAL_DMA_IRQHandler+0x516>
 8105e3c:	687b      	ldr	r3, [r7, #4]
 8105e3e:	681b      	ldr	r3, [r3, #0]
 8105e40:	4a74      	ldr	r2, [pc, #464]	; (8106014 <HAL_DMA_IRQHandler+0x6bc>)
 8105e42:	4293      	cmp	r3, r2
 8105e44:	d013      	beq.n	8105e6e <HAL_DMA_IRQHandler+0x516>
 8105e46:	687b      	ldr	r3, [r7, #4]
 8105e48:	681b      	ldr	r3, [r3, #0]
 8105e4a:	4a73      	ldr	r2, [pc, #460]	; (8106018 <HAL_DMA_IRQHandler+0x6c0>)
 8105e4c:	4293      	cmp	r3, r2
 8105e4e:	d00e      	beq.n	8105e6e <HAL_DMA_IRQHandler+0x516>
 8105e50:	687b      	ldr	r3, [r7, #4]
 8105e52:	681b      	ldr	r3, [r3, #0]
 8105e54:	4a71      	ldr	r2, [pc, #452]	; (810601c <HAL_DMA_IRQHandler+0x6c4>)
 8105e56:	4293      	cmp	r3, r2
 8105e58:	d009      	beq.n	8105e6e <HAL_DMA_IRQHandler+0x516>
 8105e5a:	687b      	ldr	r3, [r7, #4]
 8105e5c:	681b      	ldr	r3, [r3, #0]
 8105e5e:	4a70      	ldr	r2, [pc, #448]	; (8106020 <HAL_DMA_IRQHandler+0x6c8>)
 8105e60:	4293      	cmp	r3, r2
 8105e62:	d004      	beq.n	8105e6e <HAL_DMA_IRQHandler+0x516>
 8105e64:	687b      	ldr	r3, [r7, #4]
 8105e66:	681b      	ldr	r3, [r3, #0]
 8105e68:	4a6e      	ldr	r2, [pc, #440]	; (8106024 <HAL_DMA_IRQHandler+0x6cc>)
 8105e6a:	4293      	cmp	r3, r2
 8105e6c:	d10a      	bne.n	8105e84 <HAL_DMA_IRQHandler+0x52c>
 8105e6e:	687b      	ldr	r3, [r7, #4]
 8105e70:	681b      	ldr	r3, [r3, #0]
 8105e72:	681b      	ldr	r3, [r3, #0]
 8105e74:	f003 0308 	and.w	r3, r3, #8
 8105e78:	2b00      	cmp	r3, #0
 8105e7a:	bf14      	ite	ne
 8105e7c:	2301      	movne	r3, #1
 8105e7e:	2300      	moveq	r3, #0
 8105e80:	b2db      	uxtb	r3, r3
 8105e82:	e009      	b.n	8105e98 <HAL_DMA_IRQHandler+0x540>
 8105e84:	687b      	ldr	r3, [r7, #4]
 8105e86:	681b      	ldr	r3, [r3, #0]
 8105e88:	681b      	ldr	r3, [r3, #0]
 8105e8a:	f003 0304 	and.w	r3, r3, #4
 8105e8e:	2b00      	cmp	r3, #0
 8105e90:	bf14      	ite	ne
 8105e92:	2301      	movne	r3, #1
 8105e94:	2300      	moveq	r3, #0
 8105e96:	b2db      	uxtb	r3, r3
 8105e98:	2b00      	cmp	r3, #0
 8105e9a:	d03e      	beq.n	8105f1a <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8105e9c:	687b      	ldr	r3, [r7, #4]
 8105e9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8105ea0:	f003 031f 	and.w	r3, r3, #31
 8105ea4:	2210      	movs	r2, #16
 8105ea6:	409a      	lsls	r2, r3
 8105ea8:	6a3b      	ldr	r3, [r7, #32]
 8105eaa:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8105eac:	687b      	ldr	r3, [r7, #4]
 8105eae:	681b      	ldr	r3, [r3, #0]
 8105eb0:	681b      	ldr	r3, [r3, #0]
 8105eb2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8105eb6:	2b00      	cmp	r3, #0
 8105eb8:	d018      	beq.n	8105eec <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8105eba:	687b      	ldr	r3, [r7, #4]
 8105ebc:	681b      	ldr	r3, [r3, #0]
 8105ebe:	681b      	ldr	r3, [r3, #0]
 8105ec0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8105ec4:	2b00      	cmp	r3, #0
 8105ec6:	d108      	bne.n	8105eda <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8105ec8:	687b      	ldr	r3, [r7, #4]
 8105eca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8105ecc:	2b00      	cmp	r3, #0
 8105ece:	d024      	beq.n	8105f1a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8105ed0:	687b      	ldr	r3, [r7, #4]
 8105ed2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8105ed4:	6878      	ldr	r0, [r7, #4]
 8105ed6:	4798      	blx	r3
 8105ed8:	e01f      	b.n	8105f1a <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8105eda:	687b      	ldr	r3, [r7, #4]
 8105edc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8105ede:	2b00      	cmp	r3, #0
 8105ee0:	d01b      	beq.n	8105f1a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8105ee2:	687b      	ldr	r3, [r7, #4]
 8105ee4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8105ee6:	6878      	ldr	r0, [r7, #4]
 8105ee8:	4798      	blx	r3
 8105eea:	e016      	b.n	8105f1a <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8105eec:	687b      	ldr	r3, [r7, #4]
 8105eee:	681b      	ldr	r3, [r3, #0]
 8105ef0:	681b      	ldr	r3, [r3, #0]
 8105ef2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8105ef6:	2b00      	cmp	r3, #0
 8105ef8:	d107      	bne.n	8105f0a <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8105efa:	687b      	ldr	r3, [r7, #4]
 8105efc:	681b      	ldr	r3, [r3, #0]
 8105efe:	681a      	ldr	r2, [r3, #0]
 8105f00:	687b      	ldr	r3, [r7, #4]
 8105f02:	681b      	ldr	r3, [r3, #0]
 8105f04:	f022 0208 	bic.w	r2, r2, #8
 8105f08:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8105f0a:	687b      	ldr	r3, [r7, #4]
 8105f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8105f0e:	2b00      	cmp	r3, #0
 8105f10:	d003      	beq.n	8105f1a <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8105f12:	687b      	ldr	r3, [r7, #4]
 8105f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8105f16:	6878      	ldr	r0, [r7, #4]
 8105f18:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8105f1a:	687b      	ldr	r3, [r7, #4]
 8105f1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8105f1e:	f003 031f 	and.w	r3, r3, #31
 8105f22:	2220      	movs	r2, #32
 8105f24:	409a      	lsls	r2, r3
 8105f26:	69bb      	ldr	r3, [r7, #24]
 8105f28:	4013      	ands	r3, r2
 8105f2a:	2b00      	cmp	r3, #0
 8105f2c:	f000 8110 	beq.w	8106150 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8105f30:	687b      	ldr	r3, [r7, #4]
 8105f32:	681b      	ldr	r3, [r3, #0]
 8105f34:	4a2c      	ldr	r2, [pc, #176]	; (8105fe8 <HAL_DMA_IRQHandler+0x690>)
 8105f36:	4293      	cmp	r3, r2
 8105f38:	d04a      	beq.n	8105fd0 <HAL_DMA_IRQHandler+0x678>
 8105f3a:	687b      	ldr	r3, [r7, #4]
 8105f3c:	681b      	ldr	r3, [r3, #0]
 8105f3e:	4a2b      	ldr	r2, [pc, #172]	; (8105fec <HAL_DMA_IRQHandler+0x694>)
 8105f40:	4293      	cmp	r3, r2
 8105f42:	d045      	beq.n	8105fd0 <HAL_DMA_IRQHandler+0x678>
 8105f44:	687b      	ldr	r3, [r7, #4]
 8105f46:	681b      	ldr	r3, [r3, #0]
 8105f48:	4a29      	ldr	r2, [pc, #164]	; (8105ff0 <HAL_DMA_IRQHandler+0x698>)
 8105f4a:	4293      	cmp	r3, r2
 8105f4c:	d040      	beq.n	8105fd0 <HAL_DMA_IRQHandler+0x678>
 8105f4e:	687b      	ldr	r3, [r7, #4]
 8105f50:	681b      	ldr	r3, [r3, #0]
 8105f52:	4a28      	ldr	r2, [pc, #160]	; (8105ff4 <HAL_DMA_IRQHandler+0x69c>)
 8105f54:	4293      	cmp	r3, r2
 8105f56:	d03b      	beq.n	8105fd0 <HAL_DMA_IRQHandler+0x678>
 8105f58:	687b      	ldr	r3, [r7, #4]
 8105f5a:	681b      	ldr	r3, [r3, #0]
 8105f5c:	4a26      	ldr	r2, [pc, #152]	; (8105ff8 <HAL_DMA_IRQHandler+0x6a0>)
 8105f5e:	4293      	cmp	r3, r2
 8105f60:	d036      	beq.n	8105fd0 <HAL_DMA_IRQHandler+0x678>
 8105f62:	687b      	ldr	r3, [r7, #4]
 8105f64:	681b      	ldr	r3, [r3, #0]
 8105f66:	4a25      	ldr	r2, [pc, #148]	; (8105ffc <HAL_DMA_IRQHandler+0x6a4>)
 8105f68:	4293      	cmp	r3, r2
 8105f6a:	d031      	beq.n	8105fd0 <HAL_DMA_IRQHandler+0x678>
 8105f6c:	687b      	ldr	r3, [r7, #4]
 8105f6e:	681b      	ldr	r3, [r3, #0]
 8105f70:	4a23      	ldr	r2, [pc, #140]	; (8106000 <HAL_DMA_IRQHandler+0x6a8>)
 8105f72:	4293      	cmp	r3, r2
 8105f74:	d02c      	beq.n	8105fd0 <HAL_DMA_IRQHandler+0x678>
 8105f76:	687b      	ldr	r3, [r7, #4]
 8105f78:	681b      	ldr	r3, [r3, #0]
 8105f7a:	4a22      	ldr	r2, [pc, #136]	; (8106004 <HAL_DMA_IRQHandler+0x6ac>)
 8105f7c:	4293      	cmp	r3, r2
 8105f7e:	d027      	beq.n	8105fd0 <HAL_DMA_IRQHandler+0x678>
 8105f80:	687b      	ldr	r3, [r7, #4]
 8105f82:	681b      	ldr	r3, [r3, #0]
 8105f84:	4a20      	ldr	r2, [pc, #128]	; (8106008 <HAL_DMA_IRQHandler+0x6b0>)
 8105f86:	4293      	cmp	r3, r2
 8105f88:	d022      	beq.n	8105fd0 <HAL_DMA_IRQHandler+0x678>
 8105f8a:	687b      	ldr	r3, [r7, #4]
 8105f8c:	681b      	ldr	r3, [r3, #0]
 8105f8e:	4a1f      	ldr	r2, [pc, #124]	; (810600c <HAL_DMA_IRQHandler+0x6b4>)
 8105f90:	4293      	cmp	r3, r2
 8105f92:	d01d      	beq.n	8105fd0 <HAL_DMA_IRQHandler+0x678>
 8105f94:	687b      	ldr	r3, [r7, #4]
 8105f96:	681b      	ldr	r3, [r3, #0]
 8105f98:	4a1d      	ldr	r2, [pc, #116]	; (8106010 <HAL_DMA_IRQHandler+0x6b8>)
 8105f9a:	4293      	cmp	r3, r2
 8105f9c:	d018      	beq.n	8105fd0 <HAL_DMA_IRQHandler+0x678>
 8105f9e:	687b      	ldr	r3, [r7, #4]
 8105fa0:	681b      	ldr	r3, [r3, #0]
 8105fa2:	4a1c      	ldr	r2, [pc, #112]	; (8106014 <HAL_DMA_IRQHandler+0x6bc>)
 8105fa4:	4293      	cmp	r3, r2
 8105fa6:	d013      	beq.n	8105fd0 <HAL_DMA_IRQHandler+0x678>
 8105fa8:	687b      	ldr	r3, [r7, #4]
 8105faa:	681b      	ldr	r3, [r3, #0]
 8105fac:	4a1a      	ldr	r2, [pc, #104]	; (8106018 <HAL_DMA_IRQHandler+0x6c0>)
 8105fae:	4293      	cmp	r3, r2
 8105fb0:	d00e      	beq.n	8105fd0 <HAL_DMA_IRQHandler+0x678>
 8105fb2:	687b      	ldr	r3, [r7, #4]
 8105fb4:	681b      	ldr	r3, [r3, #0]
 8105fb6:	4a19      	ldr	r2, [pc, #100]	; (810601c <HAL_DMA_IRQHandler+0x6c4>)
 8105fb8:	4293      	cmp	r3, r2
 8105fba:	d009      	beq.n	8105fd0 <HAL_DMA_IRQHandler+0x678>
 8105fbc:	687b      	ldr	r3, [r7, #4]
 8105fbe:	681b      	ldr	r3, [r3, #0]
 8105fc0:	4a17      	ldr	r2, [pc, #92]	; (8106020 <HAL_DMA_IRQHandler+0x6c8>)
 8105fc2:	4293      	cmp	r3, r2
 8105fc4:	d004      	beq.n	8105fd0 <HAL_DMA_IRQHandler+0x678>
 8105fc6:	687b      	ldr	r3, [r7, #4]
 8105fc8:	681b      	ldr	r3, [r3, #0]
 8105fca:	4a16      	ldr	r2, [pc, #88]	; (8106024 <HAL_DMA_IRQHandler+0x6cc>)
 8105fcc:	4293      	cmp	r3, r2
 8105fce:	d12b      	bne.n	8106028 <HAL_DMA_IRQHandler+0x6d0>
 8105fd0:	687b      	ldr	r3, [r7, #4]
 8105fd2:	681b      	ldr	r3, [r3, #0]
 8105fd4:	681b      	ldr	r3, [r3, #0]
 8105fd6:	f003 0310 	and.w	r3, r3, #16
 8105fda:	2b00      	cmp	r3, #0
 8105fdc:	bf14      	ite	ne
 8105fde:	2301      	movne	r3, #1
 8105fe0:	2300      	moveq	r3, #0
 8105fe2:	b2db      	uxtb	r3, r3
 8105fe4:	e02a      	b.n	810603c <HAL_DMA_IRQHandler+0x6e4>
 8105fe6:	bf00      	nop
 8105fe8:	40020010 	.word	0x40020010
 8105fec:	40020028 	.word	0x40020028
 8105ff0:	40020040 	.word	0x40020040
 8105ff4:	40020058 	.word	0x40020058
 8105ff8:	40020070 	.word	0x40020070
 8105ffc:	40020088 	.word	0x40020088
 8106000:	400200a0 	.word	0x400200a0
 8106004:	400200b8 	.word	0x400200b8
 8106008:	40020410 	.word	0x40020410
 810600c:	40020428 	.word	0x40020428
 8106010:	40020440 	.word	0x40020440
 8106014:	40020458 	.word	0x40020458
 8106018:	40020470 	.word	0x40020470
 810601c:	40020488 	.word	0x40020488
 8106020:	400204a0 	.word	0x400204a0
 8106024:	400204b8 	.word	0x400204b8
 8106028:	687b      	ldr	r3, [r7, #4]
 810602a:	681b      	ldr	r3, [r3, #0]
 810602c:	681b      	ldr	r3, [r3, #0]
 810602e:	f003 0302 	and.w	r3, r3, #2
 8106032:	2b00      	cmp	r3, #0
 8106034:	bf14      	ite	ne
 8106036:	2301      	movne	r3, #1
 8106038:	2300      	moveq	r3, #0
 810603a:	b2db      	uxtb	r3, r3
 810603c:	2b00      	cmp	r3, #0
 810603e:	f000 8087 	beq.w	8106150 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8106042:	687b      	ldr	r3, [r7, #4]
 8106044:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8106046:	f003 031f 	and.w	r3, r3, #31
 810604a:	2220      	movs	r2, #32
 810604c:	409a      	lsls	r2, r3
 810604e:	6a3b      	ldr	r3, [r7, #32]
 8106050:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8106052:	687b      	ldr	r3, [r7, #4]
 8106054:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8106058:	b2db      	uxtb	r3, r3
 810605a:	2b04      	cmp	r3, #4
 810605c:	d139      	bne.n	81060d2 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 810605e:	687b      	ldr	r3, [r7, #4]
 8106060:	681b      	ldr	r3, [r3, #0]
 8106062:	681a      	ldr	r2, [r3, #0]
 8106064:	687b      	ldr	r3, [r7, #4]
 8106066:	681b      	ldr	r3, [r3, #0]
 8106068:	f022 0216 	bic.w	r2, r2, #22
 810606c:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 810606e:	687b      	ldr	r3, [r7, #4]
 8106070:	681b      	ldr	r3, [r3, #0]
 8106072:	695a      	ldr	r2, [r3, #20]
 8106074:	687b      	ldr	r3, [r7, #4]
 8106076:	681b      	ldr	r3, [r3, #0]
 8106078:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 810607c:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 810607e:	687b      	ldr	r3, [r7, #4]
 8106080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8106082:	2b00      	cmp	r3, #0
 8106084:	d103      	bne.n	810608e <HAL_DMA_IRQHandler+0x736>
 8106086:	687b      	ldr	r3, [r7, #4]
 8106088:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 810608a:	2b00      	cmp	r3, #0
 810608c:	d007      	beq.n	810609e <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 810608e:	687b      	ldr	r3, [r7, #4]
 8106090:	681b      	ldr	r3, [r3, #0]
 8106092:	681a      	ldr	r2, [r3, #0]
 8106094:	687b      	ldr	r3, [r7, #4]
 8106096:	681b      	ldr	r3, [r3, #0]
 8106098:	f022 0208 	bic.w	r2, r2, #8
 810609c:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 810609e:	687b      	ldr	r3, [r7, #4]
 81060a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81060a2:	f003 031f 	and.w	r3, r3, #31
 81060a6:	223f      	movs	r2, #63	; 0x3f
 81060a8:	409a      	lsls	r2, r3
 81060aa:	6a3b      	ldr	r3, [r7, #32]
 81060ac:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 81060ae:	687b      	ldr	r3, [r7, #4]
 81060b0:	2200      	movs	r2, #0
 81060b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 81060b6:	687b      	ldr	r3, [r7, #4]
 81060b8:	2201      	movs	r2, #1
 81060ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 81060be:	687b      	ldr	r3, [r7, #4]
 81060c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81060c2:	2b00      	cmp	r3, #0
 81060c4:	f000 834a 	beq.w	810675c <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 81060c8:	687b      	ldr	r3, [r7, #4]
 81060ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81060cc:	6878      	ldr	r0, [r7, #4]
 81060ce:	4798      	blx	r3
          }
          return;
 81060d0:	e344      	b.n	810675c <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 81060d2:	687b      	ldr	r3, [r7, #4]
 81060d4:	681b      	ldr	r3, [r3, #0]
 81060d6:	681b      	ldr	r3, [r3, #0]
 81060d8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 81060dc:	2b00      	cmp	r3, #0
 81060de:	d018      	beq.n	8106112 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 81060e0:	687b      	ldr	r3, [r7, #4]
 81060e2:	681b      	ldr	r3, [r3, #0]
 81060e4:	681b      	ldr	r3, [r3, #0]
 81060e6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 81060ea:	2b00      	cmp	r3, #0
 81060ec:	d108      	bne.n	8106100 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 81060ee:	687b      	ldr	r3, [r7, #4]
 81060f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 81060f2:	2b00      	cmp	r3, #0
 81060f4:	d02c      	beq.n	8106150 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 81060f6:	687b      	ldr	r3, [r7, #4]
 81060f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 81060fa:	6878      	ldr	r0, [r7, #4]
 81060fc:	4798      	blx	r3
 81060fe:	e027      	b.n	8106150 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8106100:	687b      	ldr	r3, [r7, #4]
 8106102:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8106104:	2b00      	cmp	r3, #0
 8106106:	d023      	beq.n	8106150 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8106108:	687b      	ldr	r3, [r7, #4]
 810610a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810610c:	6878      	ldr	r0, [r7, #4]
 810610e:	4798      	blx	r3
 8106110:	e01e      	b.n	8106150 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8106112:	687b      	ldr	r3, [r7, #4]
 8106114:	681b      	ldr	r3, [r3, #0]
 8106116:	681b      	ldr	r3, [r3, #0]
 8106118:	f403 7380 	and.w	r3, r3, #256	; 0x100
 810611c:	2b00      	cmp	r3, #0
 810611e:	d10f      	bne.n	8106140 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8106120:	687b      	ldr	r3, [r7, #4]
 8106122:	681b      	ldr	r3, [r3, #0]
 8106124:	681a      	ldr	r2, [r3, #0]
 8106126:	687b      	ldr	r3, [r7, #4]
 8106128:	681b      	ldr	r3, [r3, #0]
 810612a:	f022 0210 	bic.w	r2, r2, #16
 810612e:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8106130:	687b      	ldr	r3, [r7, #4]
 8106132:	2200      	movs	r2, #0
 8106134:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8106138:	687b      	ldr	r3, [r7, #4]
 810613a:	2201      	movs	r2, #1
 810613c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 8106140:	687b      	ldr	r3, [r7, #4]
 8106142:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8106144:	2b00      	cmp	r3, #0
 8106146:	d003      	beq.n	8106150 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8106148:	687b      	ldr	r3, [r7, #4]
 810614a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810614c:	6878      	ldr	r0, [r7, #4]
 810614e:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8106150:	687b      	ldr	r3, [r7, #4]
 8106152:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8106154:	2b00      	cmp	r3, #0
 8106156:	f000 8306 	beq.w	8106766 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 810615a:	687b      	ldr	r3, [r7, #4]
 810615c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810615e:	f003 0301 	and.w	r3, r3, #1
 8106162:	2b00      	cmp	r3, #0
 8106164:	f000 8088 	beq.w	8106278 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8106168:	687b      	ldr	r3, [r7, #4]
 810616a:	2204      	movs	r2, #4
 810616c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8106170:	687b      	ldr	r3, [r7, #4]
 8106172:	681b      	ldr	r3, [r3, #0]
 8106174:	4a7a      	ldr	r2, [pc, #488]	; (8106360 <HAL_DMA_IRQHandler+0xa08>)
 8106176:	4293      	cmp	r3, r2
 8106178:	d04a      	beq.n	8106210 <HAL_DMA_IRQHandler+0x8b8>
 810617a:	687b      	ldr	r3, [r7, #4]
 810617c:	681b      	ldr	r3, [r3, #0]
 810617e:	4a79      	ldr	r2, [pc, #484]	; (8106364 <HAL_DMA_IRQHandler+0xa0c>)
 8106180:	4293      	cmp	r3, r2
 8106182:	d045      	beq.n	8106210 <HAL_DMA_IRQHandler+0x8b8>
 8106184:	687b      	ldr	r3, [r7, #4]
 8106186:	681b      	ldr	r3, [r3, #0]
 8106188:	4a77      	ldr	r2, [pc, #476]	; (8106368 <HAL_DMA_IRQHandler+0xa10>)
 810618a:	4293      	cmp	r3, r2
 810618c:	d040      	beq.n	8106210 <HAL_DMA_IRQHandler+0x8b8>
 810618e:	687b      	ldr	r3, [r7, #4]
 8106190:	681b      	ldr	r3, [r3, #0]
 8106192:	4a76      	ldr	r2, [pc, #472]	; (810636c <HAL_DMA_IRQHandler+0xa14>)
 8106194:	4293      	cmp	r3, r2
 8106196:	d03b      	beq.n	8106210 <HAL_DMA_IRQHandler+0x8b8>
 8106198:	687b      	ldr	r3, [r7, #4]
 810619a:	681b      	ldr	r3, [r3, #0]
 810619c:	4a74      	ldr	r2, [pc, #464]	; (8106370 <HAL_DMA_IRQHandler+0xa18>)
 810619e:	4293      	cmp	r3, r2
 81061a0:	d036      	beq.n	8106210 <HAL_DMA_IRQHandler+0x8b8>
 81061a2:	687b      	ldr	r3, [r7, #4]
 81061a4:	681b      	ldr	r3, [r3, #0]
 81061a6:	4a73      	ldr	r2, [pc, #460]	; (8106374 <HAL_DMA_IRQHandler+0xa1c>)
 81061a8:	4293      	cmp	r3, r2
 81061aa:	d031      	beq.n	8106210 <HAL_DMA_IRQHandler+0x8b8>
 81061ac:	687b      	ldr	r3, [r7, #4]
 81061ae:	681b      	ldr	r3, [r3, #0]
 81061b0:	4a71      	ldr	r2, [pc, #452]	; (8106378 <HAL_DMA_IRQHandler+0xa20>)
 81061b2:	4293      	cmp	r3, r2
 81061b4:	d02c      	beq.n	8106210 <HAL_DMA_IRQHandler+0x8b8>
 81061b6:	687b      	ldr	r3, [r7, #4]
 81061b8:	681b      	ldr	r3, [r3, #0]
 81061ba:	4a70      	ldr	r2, [pc, #448]	; (810637c <HAL_DMA_IRQHandler+0xa24>)
 81061bc:	4293      	cmp	r3, r2
 81061be:	d027      	beq.n	8106210 <HAL_DMA_IRQHandler+0x8b8>
 81061c0:	687b      	ldr	r3, [r7, #4]
 81061c2:	681b      	ldr	r3, [r3, #0]
 81061c4:	4a6e      	ldr	r2, [pc, #440]	; (8106380 <HAL_DMA_IRQHandler+0xa28>)
 81061c6:	4293      	cmp	r3, r2
 81061c8:	d022      	beq.n	8106210 <HAL_DMA_IRQHandler+0x8b8>
 81061ca:	687b      	ldr	r3, [r7, #4]
 81061cc:	681b      	ldr	r3, [r3, #0]
 81061ce:	4a6d      	ldr	r2, [pc, #436]	; (8106384 <HAL_DMA_IRQHandler+0xa2c>)
 81061d0:	4293      	cmp	r3, r2
 81061d2:	d01d      	beq.n	8106210 <HAL_DMA_IRQHandler+0x8b8>
 81061d4:	687b      	ldr	r3, [r7, #4]
 81061d6:	681b      	ldr	r3, [r3, #0]
 81061d8:	4a6b      	ldr	r2, [pc, #428]	; (8106388 <HAL_DMA_IRQHandler+0xa30>)
 81061da:	4293      	cmp	r3, r2
 81061dc:	d018      	beq.n	8106210 <HAL_DMA_IRQHandler+0x8b8>
 81061de:	687b      	ldr	r3, [r7, #4]
 81061e0:	681b      	ldr	r3, [r3, #0]
 81061e2:	4a6a      	ldr	r2, [pc, #424]	; (810638c <HAL_DMA_IRQHandler+0xa34>)
 81061e4:	4293      	cmp	r3, r2
 81061e6:	d013      	beq.n	8106210 <HAL_DMA_IRQHandler+0x8b8>
 81061e8:	687b      	ldr	r3, [r7, #4]
 81061ea:	681b      	ldr	r3, [r3, #0]
 81061ec:	4a68      	ldr	r2, [pc, #416]	; (8106390 <HAL_DMA_IRQHandler+0xa38>)
 81061ee:	4293      	cmp	r3, r2
 81061f0:	d00e      	beq.n	8106210 <HAL_DMA_IRQHandler+0x8b8>
 81061f2:	687b      	ldr	r3, [r7, #4]
 81061f4:	681b      	ldr	r3, [r3, #0]
 81061f6:	4a67      	ldr	r2, [pc, #412]	; (8106394 <HAL_DMA_IRQHandler+0xa3c>)
 81061f8:	4293      	cmp	r3, r2
 81061fa:	d009      	beq.n	8106210 <HAL_DMA_IRQHandler+0x8b8>
 81061fc:	687b      	ldr	r3, [r7, #4]
 81061fe:	681b      	ldr	r3, [r3, #0]
 8106200:	4a65      	ldr	r2, [pc, #404]	; (8106398 <HAL_DMA_IRQHandler+0xa40>)
 8106202:	4293      	cmp	r3, r2
 8106204:	d004      	beq.n	8106210 <HAL_DMA_IRQHandler+0x8b8>
 8106206:	687b      	ldr	r3, [r7, #4]
 8106208:	681b      	ldr	r3, [r3, #0]
 810620a:	4a64      	ldr	r2, [pc, #400]	; (810639c <HAL_DMA_IRQHandler+0xa44>)
 810620c:	4293      	cmp	r3, r2
 810620e:	d108      	bne.n	8106222 <HAL_DMA_IRQHandler+0x8ca>
 8106210:	687b      	ldr	r3, [r7, #4]
 8106212:	681b      	ldr	r3, [r3, #0]
 8106214:	681a      	ldr	r2, [r3, #0]
 8106216:	687b      	ldr	r3, [r7, #4]
 8106218:	681b      	ldr	r3, [r3, #0]
 810621a:	f022 0201 	bic.w	r2, r2, #1
 810621e:	601a      	str	r2, [r3, #0]
 8106220:	e007      	b.n	8106232 <HAL_DMA_IRQHandler+0x8da>
 8106222:	687b      	ldr	r3, [r7, #4]
 8106224:	681b      	ldr	r3, [r3, #0]
 8106226:	681a      	ldr	r2, [r3, #0]
 8106228:	687b      	ldr	r3, [r7, #4]
 810622a:	681b      	ldr	r3, [r3, #0]
 810622c:	f022 0201 	bic.w	r2, r2, #1
 8106230:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8106232:	68fb      	ldr	r3, [r7, #12]
 8106234:	3301      	adds	r3, #1
 8106236:	60fb      	str	r3, [r7, #12]
 8106238:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 810623a:	429a      	cmp	r2, r3
 810623c:	d307      	bcc.n	810624e <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 810623e:	687b      	ldr	r3, [r7, #4]
 8106240:	681b      	ldr	r3, [r3, #0]
 8106242:	681b      	ldr	r3, [r3, #0]
 8106244:	f003 0301 	and.w	r3, r3, #1
 8106248:	2b00      	cmp	r3, #0
 810624a:	d1f2      	bne.n	8106232 <HAL_DMA_IRQHandler+0x8da>
 810624c:	e000      	b.n	8106250 <HAL_DMA_IRQHandler+0x8f8>
            break;
 810624e:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8106250:	687b      	ldr	r3, [r7, #4]
 8106252:	2200      	movs	r2, #0
 8106254:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8106258:	687b      	ldr	r3, [r7, #4]
 810625a:	681b      	ldr	r3, [r3, #0]
 810625c:	681b      	ldr	r3, [r3, #0]
 810625e:	f003 0301 	and.w	r3, r3, #1
 8106262:	2b00      	cmp	r3, #0
 8106264:	d004      	beq.n	8106270 <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8106266:	687b      	ldr	r3, [r7, #4]
 8106268:	2203      	movs	r2, #3
 810626a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 810626e:	e003      	b.n	8106278 <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8106270:	687b      	ldr	r3, [r7, #4]
 8106272:	2201      	movs	r2, #1
 8106274:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 8106278:	687b      	ldr	r3, [r7, #4]
 810627a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 810627c:	2b00      	cmp	r3, #0
 810627e:	f000 8272 	beq.w	8106766 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8106282:	687b      	ldr	r3, [r7, #4]
 8106284:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8106286:	6878      	ldr	r0, [r7, #4]
 8106288:	4798      	blx	r3
 810628a:	e26c      	b.n	8106766 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 810628c:	687b      	ldr	r3, [r7, #4]
 810628e:	681b      	ldr	r3, [r3, #0]
 8106290:	4a43      	ldr	r2, [pc, #268]	; (81063a0 <HAL_DMA_IRQHandler+0xa48>)
 8106292:	4293      	cmp	r3, r2
 8106294:	d022      	beq.n	81062dc <HAL_DMA_IRQHandler+0x984>
 8106296:	687b      	ldr	r3, [r7, #4]
 8106298:	681b      	ldr	r3, [r3, #0]
 810629a:	4a42      	ldr	r2, [pc, #264]	; (81063a4 <HAL_DMA_IRQHandler+0xa4c>)
 810629c:	4293      	cmp	r3, r2
 810629e:	d01d      	beq.n	81062dc <HAL_DMA_IRQHandler+0x984>
 81062a0:	687b      	ldr	r3, [r7, #4]
 81062a2:	681b      	ldr	r3, [r3, #0]
 81062a4:	4a40      	ldr	r2, [pc, #256]	; (81063a8 <HAL_DMA_IRQHandler+0xa50>)
 81062a6:	4293      	cmp	r3, r2
 81062a8:	d018      	beq.n	81062dc <HAL_DMA_IRQHandler+0x984>
 81062aa:	687b      	ldr	r3, [r7, #4]
 81062ac:	681b      	ldr	r3, [r3, #0]
 81062ae:	4a3f      	ldr	r2, [pc, #252]	; (81063ac <HAL_DMA_IRQHandler+0xa54>)
 81062b0:	4293      	cmp	r3, r2
 81062b2:	d013      	beq.n	81062dc <HAL_DMA_IRQHandler+0x984>
 81062b4:	687b      	ldr	r3, [r7, #4]
 81062b6:	681b      	ldr	r3, [r3, #0]
 81062b8:	4a3d      	ldr	r2, [pc, #244]	; (81063b0 <HAL_DMA_IRQHandler+0xa58>)
 81062ba:	4293      	cmp	r3, r2
 81062bc:	d00e      	beq.n	81062dc <HAL_DMA_IRQHandler+0x984>
 81062be:	687b      	ldr	r3, [r7, #4]
 81062c0:	681b      	ldr	r3, [r3, #0]
 81062c2:	4a3c      	ldr	r2, [pc, #240]	; (81063b4 <HAL_DMA_IRQHandler+0xa5c>)
 81062c4:	4293      	cmp	r3, r2
 81062c6:	d009      	beq.n	81062dc <HAL_DMA_IRQHandler+0x984>
 81062c8:	687b      	ldr	r3, [r7, #4]
 81062ca:	681b      	ldr	r3, [r3, #0]
 81062cc:	4a3a      	ldr	r2, [pc, #232]	; (81063b8 <HAL_DMA_IRQHandler+0xa60>)
 81062ce:	4293      	cmp	r3, r2
 81062d0:	d004      	beq.n	81062dc <HAL_DMA_IRQHandler+0x984>
 81062d2:	687b      	ldr	r3, [r7, #4]
 81062d4:	681b      	ldr	r3, [r3, #0]
 81062d6:	4a39      	ldr	r2, [pc, #228]	; (81063bc <HAL_DMA_IRQHandler+0xa64>)
 81062d8:	4293      	cmp	r3, r2
 81062da:	d101      	bne.n	81062e0 <HAL_DMA_IRQHandler+0x988>
 81062dc:	2301      	movs	r3, #1
 81062de:	e000      	b.n	81062e2 <HAL_DMA_IRQHandler+0x98a>
 81062e0:	2300      	movs	r3, #0
 81062e2:	2b00      	cmp	r3, #0
 81062e4:	f000 823f 	beq.w	8106766 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 81062e8:	687b      	ldr	r3, [r7, #4]
 81062ea:	681b      	ldr	r3, [r3, #0]
 81062ec:	681b      	ldr	r3, [r3, #0]
 81062ee:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 81062f0:	687b      	ldr	r3, [r7, #4]
 81062f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81062f4:	f003 031f 	and.w	r3, r3, #31
 81062f8:	2204      	movs	r2, #4
 81062fa:	409a      	lsls	r2, r3
 81062fc:	697b      	ldr	r3, [r7, #20]
 81062fe:	4013      	ands	r3, r2
 8106300:	2b00      	cmp	r3, #0
 8106302:	f000 80cd 	beq.w	81064a0 <HAL_DMA_IRQHandler+0xb48>
 8106306:	693b      	ldr	r3, [r7, #16]
 8106308:	f003 0304 	and.w	r3, r3, #4
 810630c:	2b00      	cmp	r3, #0
 810630e:	f000 80c7 	beq.w	81064a0 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8106312:	687b      	ldr	r3, [r7, #4]
 8106314:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8106316:	f003 031f 	and.w	r3, r3, #31
 810631a:	2204      	movs	r2, #4
 810631c:	409a      	lsls	r2, r3
 810631e:	69fb      	ldr	r3, [r7, #28]
 8106320:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8106322:	693b      	ldr	r3, [r7, #16]
 8106324:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8106328:	2b00      	cmp	r3, #0
 810632a:	d049      	beq.n	81063c0 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 810632c:	693b      	ldr	r3, [r7, #16]
 810632e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8106332:	2b00      	cmp	r3, #0
 8106334:	d109      	bne.n	810634a <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8106336:	687b      	ldr	r3, [r7, #4]
 8106338:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 810633a:	2b00      	cmp	r3, #0
 810633c:	f000 8210 	beq.w	8106760 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8106340:	687b      	ldr	r3, [r7, #4]
 8106342:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8106344:	6878      	ldr	r0, [r7, #4]
 8106346:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8106348:	e20a      	b.n	8106760 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 810634a:	687b      	ldr	r3, [r7, #4]
 810634c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810634e:	2b00      	cmp	r3, #0
 8106350:	f000 8206 	beq.w	8106760 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8106354:	687b      	ldr	r3, [r7, #4]
 8106356:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8106358:	6878      	ldr	r0, [r7, #4]
 810635a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 810635c:	e200      	b.n	8106760 <HAL_DMA_IRQHandler+0xe08>
 810635e:	bf00      	nop
 8106360:	40020010 	.word	0x40020010
 8106364:	40020028 	.word	0x40020028
 8106368:	40020040 	.word	0x40020040
 810636c:	40020058 	.word	0x40020058
 8106370:	40020070 	.word	0x40020070
 8106374:	40020088 	.word	0x40020088
 8106378:	400200a0 	.word	0x400200a0
 810637c:	400200b8 	.word	0x400200b8
 8106380:	40020410 	.word	0x40020410
 8106384:	40020428 	.word	0x40020428
 8106388:	40020440 	.word	0x40020440
 810638c:	40020458 	.word	0x40020458
 8106390:	40020470 	.word	0x40020470
 8106394:	40020488 	.word	0x40020488
 8106398:	400204a0 	.word	0x400204a0
 810639c:	400204b8 	.word	0x400204b8
 81063a0:	58025408 	.word	0x58025408
 81063a4:	5802541c 	.word	0x5802541c
 81063a8:	58025430 	.word	0x58025430
 81063ac:	58025444 	.word	0x58025444
 81063b0:	58025458 	.word	0x58025458
 81063b4:	5802546c 	.word	0x5802546c
 81063b8:	58025480 	.word	0x58025480
 81063bc:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 81063c0:	693b      	ldr	r3, [r7, #16]
 81063c2:	f003 0320 	and.w	r3, r3, #32
 81063c6:	2b00      	cmp	r3, #0
 81063c8:	d160      	bne.n	810648c <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 81063ca:	687b      	ldr	r3, [r7, #4]
 81063cc:	681b      	ldr	r3, [r3, #0]
 81063ce:	4a8c      	ldr	r2, [pc, #560]	; (8106600 <HAL_DMA_IRQHandler+0xca8>)
 81063d0:	4293      	cmp	r3, r2
 81063d2:	d04a      	beq.n	810646a <HAL_DMA_IRQHandler+0xb12>
 81063d4:	687b      	ldr	r3, [r7, #4]
 81063d6:	681b      	ldr	r3, [r3, #0]
 81063d8:	4a8a      	ldr	r2, [pc, #552]	; (8106604 <HAL_DMA_IRQHandler+0xcac>)
 81063da:	4293      	cmp	r3, r2
 81063dc:	d045      	beq.n	810646a <HAL_DMA_IRQHandler+0xb12>
 81063de:	687b      	ldr	r3, [r7, #4]
 81063e0:	681b      	ldr	r3, [r3, #0]
 81063e2:	4a89      	ldr	r2, [pc, #548]	; (8106608 <HAL_DMA_IRQHandler+0xcb0>)
 81063e4:	4293      	cmp	r3, r2
 81063e6:	d040      	beq.n	810646a <HAL_DMA_IRQHandler+0xb12>
 81063e8:	687b      	ldr	r3, [r7, #4]
 81063ea:	681b      	ldr	r3, [r3, #0]
 81063ec:	4a87      	ldr	r2, [pc, #540]	; (810660c <HAL_DMA_IRQHandler+0xcb4>)
 81063ee:	4293      	cmp	r3, r2
 81063f0:	d03b      	beq.n	810646a <HAL_DMA_IRQHandler+0xb12>
 81063f2:	687b      	ldr	r3, [r7, #4]
 81063f4:	681b      	ldr	r3, [r3, #0]
 81063f6:	4a86      	ldr	r2, [pc, #536]	; (8106610 <HAL_DMA_IRQHandler+0xcb8>)
 81063f8:	4293      	cmp	r3, r2
 81063fa:	d036      	beq.n	810646a <HAL_DMA_IRQHandler+0xb12>
 81063fc:	687b      	ldr	r3, [r7, #4]
 81063fe:	681b      	ldr	r3, [r3, #0]
 8106400:	4a84      	ldr	r2, [pc, #528]	; (8106614 <HAL_DMA_IRQHandler+0xcbc>)
 8106402:	4293      	cmp	r3, r2
 8106404:	d031      	beq.n	810646a <HAL_DMA_IRQHandler+0xb12>
 8106406:	687b      	ldr	r3, [r7, #4]
 8106408:	681b      	ldr	r3, [r3, #0]
 810640a:	4a83      	ldr	r2, [pc, #524]	; (8106618 <HAL_DMA_IRQHandler+0xcc0>)
 810640c:	4293      	cmp	r3, r2
 810640e:	d02c      	beq.n	810646a <HAL_DMA_IRQHandler+0xb12>
 8106410:	687b      	ldr	r3, [r7, #4]
 8106412:	681b      	ldr	r3, [r3, #0]
 8106414:	4a81      	ldr	r2, [pc, #516]	; (810661c <HAL_DMA_IRQHandler+0xcc4>)
 8106416:	4293      	cmp	r3, r2
 8106418:	d027      	beq.n	810646a <HAL_DMA_IRQHandler+0xb12>
 810641a:	687b      	ldr	r3, [r7, #4]
 810641c:	681b      	ldr	r3, [r3, #0]
 810641e:	4a80      	ldr	r2, [pc, #512]	; (8106620 <HAL_DMA_IRQHandler+0xcc8>)
 8106420:	4293      	cmp	r3, r2
 8106422:	d022      	beq.n	810646a <HAL_DMA_IRQHandler+0xb12>
 8106424:	687b      	ldr	r3, [r7, #4]
 8106426:	681b      	ldr	r3, [r3, #0]
 8106428:	4a7e      	ldr	r2, [pc, #504]	; (8106624 <HAL_DMA_IRQHandler+0xccc>)
 810642a:	4293      	cmp	r3, r2
 810642c:	d01d      	beq.n	810646a <HAL_DMA_IRQHandler+0xb12>
 810642e:	687b      	ldr	r3, [r7, #4]
 8106430:	681b      	ldr	r3, [r3, #0]
 8106432:	4a7d      	ldr	r2, [pc, #500]	; (8106628 <HAL_DMA_IRQHandler+0xcd0>)
 8106434:	4293      	cmp	r3, r2
 8106436:	d018      	beq.n	810646a <HAL_DMA_IRQHandler+0xb12>
 8106438:	687b      	ldr	r3, [r7, #4]
 810643a:	681b      	ldr	r3, [r3, #0]
 810643c:	4a7b      	ldr	r2, [pc, #492]	; (810662c <HAL_DMA_IRQHandler+0xcd4>)
 810643e:	4293      	cmp	r3, r2
 8106440:	d013      	beq.n	810646a <HAL_DMA_IRQHandler+0xb12>
 8106442:	687b      	ldr	r3, [r7, #4]
 8106444:	681b      	ldr	r3, [r3, #0]
 8106446:	4a7a      	ldr	r2, [pc, #488]	; (8106630 <HAL_DMA_IRQHandler+0xcd8>)
 8106448:	4293      	cmp	r3, r2
 810644a:	d00e      	beq.n	810646a <HAL_DMA_IRQHandler+0xb12>
 810644c:	687b      	ldr	r3, [r7, #4]
 810644e:	681b      	ldr	r3, [r3, #0]
 8106450:	4a78      	ldr	r2, [pc, #480]	; (8106634 <HAL_DMA_IRQHandler+0xcdc>)
 8106452:	4293      	cmp	r3, r2
 8106454:	d009      	beq.n	810646a <HAL_DMA_IRQHandler+0xb12>
 8106456:	687b      	ldr	r3, [r7, #4]
 8106458:	681b      	ldr	r3, [r3, #0]
 810645a:	4a77      	ldr	r2, [pc, #476]	; (8106638 <HAL_DMA_IRQHandler+0xce0>)
 810645c:	4293      	cmp	r3, r2
 810645e:	d004      	beq.n	810646a <HAL_DMA_IRQHandler+0xb12>
 8106460:	687b      	ldr	r3, [r7, #4]
 8106462:	681b      	ldr	r3, [r3, #0]
 8106464:	4a75      	ldr	r2, [pc, #468]	; (810663c <HAL_DMA_IRQHandler+0xce4>)
 8106466:	4293      	cmp	r3, r2
 8106468:	d108      	bne.n	810647c <HAL_DMA_IRQHandler+0xb24>
 810646a:	687b      	ldr	r3, [r7, #4]
 810646c:	681b      	ldr	r3, [r3, #0]
 810646e:	681a      	ldr	r2, [r3, #0]
 8106470:	687b      	ldr	r3, [r7, #4]
 8106472:	681b      	ldr	r3, [r3, #0]
 8106474:	f022 0208 	bic.w	r2, r2, #8
 8106478:	601a      	str	r2, [r3, #0]
 810647a:	e007      	b.n	810648c <HAL_DMA_IRQHandler+0xb34>
 810647c:	687b      	ldr	r3, [r7, #4]
 810647e:	681b      	ldr	r3, [r3, #0]
 8106480:	681a      	ldr	r2, [r3, #0]
 8106482:	687b      	ldr	r3, [r7, #4]
 8106484:	681b      	ldr	r3, [r3, #0]
 8106486:	f022 0204 	bic.w	r2, r2, #4
 810648a:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 810648c:	687b      	ldr	r3, [r7, #4]
 810648e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8106490:	2b00      	cmp	r3, #0
 8106492:	f000 8165 	beq.w	8106760 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8106496:	687b      	ldr	r3, [r7, #4]
 8106498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810649a:	6878      	ldr	r0, [r7, #4]
 810649c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 810649e:	e15f      	b.n	8106760 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 81064a0:	687b      	ldr	r3, [r7, #4]
 81064a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81064a4:	f003 031f 	and.w	r3, r3, #31
 81064a8:	2202      	movs	r2, #2
 81064aa:	409a      	lsls	r2, r3
 81064ac:	697b      	ldr	r3, [r7, #20]
 81064ae:	4013      	ands	r3, r2
 81064b0:	2b00      	cmp	r3, #0
 81064b2:	f000 80c5 	beq.w	8106640 <HAL_DMA_IRQHandler+0xce8>
 81064b6:	693b      	ldr	r3, [r7, #16]
 81064b8:	f003 0302 	and.w	r3, r3, #2
 81064bc:	2b00      	cmp	r3, #0
 81064be:	f000 80bf 	beq.w	8106640 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 81064c2:	687b      	ldr	r3, [r7, #4]
 81064c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81064c6:	f003 031f 	and.w	r3, r3, #31
 81064ca:	2202      	movs	r2, #2
 81064cc:	409a      	lsls	r2, r3
 81064ce:	69fb      	ldr	r3, [r7, #28]
 81064d0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 81064d2:	693b      	ldr	r3, [r7, #16]
 81064d4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 81064d8:	2b00      	cmp	r3, #0
 81064da:	d018      	beq.n	810650e <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 81064dc:	693b      	ldr	r3, [r7, #16]
 81064de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 81064e2:	2b00      	cmp	r3, #0
 81064e4:	d109      	bne.n	81064fa <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 81064e6:	687b      	ldr	r3, [r7, #4]
 81064e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 81064ea:	2b00      	cmp	r3, #0
 81064ec:	f000 813a 	beq.w	8106764 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 81064f0:	687b      	ldr	r3, [r7, #4]
 81064f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 81064f4:	6878      	ldr	r0, [r7, #4]
 81064f6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 81064f8:	e134      	b.n	8106764 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 81064fa:	687b      	ldr	r3, [r7, #4]
 81064fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81064fe:	2b00      	cmp	r3, #0
 8106500:	f000 8130 	beq.w	8106764 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8106504:	687b      	ldr	r3, [r7, #4]
 8106506:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8106508:	6878      	ldr	r0, [r7, #4]
 810650a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 810650c:	e12a      	b.n	8106764 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 810650e:	693b      	ldr	r3, [r7, #16]
 8106510:	f003 0320 	and.w	r3, r3, #32
 8106514:	2b00      	cmp	r3, #0
 8106516:	d168      	bne.n	81065ea <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8106518:	687b      	ldr	r3, [r7, #4]
 810651a:	681b      	ldr	r3, [r3, #0]
 810651c:	4a38      	ldr	r2, [pc, #224]	; (8106600 <HAL_DMA_IRQHandler+0xca8>)
 810651e:	4293      	cmp	r3, r2
 8106520:	d04a      	beq.n	81065b8 <HAL_DMA_IRQHandler+0xc60>
 8106522:	687b      	ldr	r3, [r7, #4]
 8106524:	681b      	ldr	r3, [r3, #0]
 8106526:	4a37      	ldr	r2, [pc, #220]	; (8106604 <HAL_DMA_IRQHandler+0xcac>)
 8106528:	4293      	cmp	r3, r2
 810652a:	d045      	beq.n	81065b8 <HAL_DMA_IRQHandler+0xc60>
 810652c:	687b      	ldr	r3, [r7, #4]
 810652e:	681b      	ldr	r3, [r3, #0]
 8106530:	4a35      	ldr	r2, [pc, #212]	; (8106608 <HAL_DMA_IRQHandler+0xcb0>)
 8106532:	4293      	cmp	r3, r2
 8106534:	d040      	beq.n	81065b8 <HAL_DMA_IRQHandler+0xc60>
 8106536:	687b      	ldr	r3, [r7, #4]
 8106538:	681b      	ldr	r3, [r3, #0]
 810653a:	4a34      	ldr	r2, [pc, #208]	; (810660c <HAL_DMA_IRQHandler+0xcb4>)
 810653c:	4293      	cmp	r3, r2
 810653e:	d03b      	beq.n	81065b8 <HAL_DMA_IRQHandler+0xc60>
 8106540:	687b      	ldr	r3, [r7, #4]
 8106542:	681b      	ldr	r3, [r3, #0]
 8106544:	4a32      	ldr	r2, [pc, #200]	; (8106610 <HAL_DMA_IRQHandler+0xcb8>)
 8106546:	4293      	cmp	r3, r2
 8106548:	d036      	beq.n	81065b8 <HAL_DMA_IRQHandler+0xc60>
 810654a:	687b      	ldr	r3, [r7, #4]
 810654c:	681b      	ldr	r3, [r3, #0]
 810654e:	4a31      	ldr	r2, [pc, #196]	; (8106614 <HAL_DMA_IRQHandler+0xcbc>)
 8106550:	4293      	cmp	r3, r2
 8106552:	d031      	beq.n	81065b8 <HAL_DMA_IRQHandler+0xc60>
 8106554:	687b      	ldr	r3, [r7, #4]
 8106556:	681b      	ldr	r3, [r3, #0]
 8106558:	4a2f      	ldr	r2, [pc, #188]	; (8106618 <HAL_DMA_IRQHandler+0xcc0>)
 810655a:	4293      	cmp	r3, r2
 810655c:	d02c      	beq.n	81065b8 <HAL_DMA_IRQHandler+0xc60>
 810655e:	687b      	ldr	r3, [r7, #4]
 8106560:	681b      	ldr	r3, [r3, #0]
 8106562:	4a2e      	ldr	r2, [pc, #184]	; (810661c <HAL_DMA_IRQHandler+0xcc4>)
 8106564:	4293      	cmp	r3, r2
 8106566:	d027      	beq.n	81065b8 <HAL_DMA_IRQHandler+0xc60>
 8106568:	687b      	ldr	r3, [r7, #4]
 810656a:	681b      	ldr	r3, [r3, #0]
 810656c:	4a2c      	ldr	r2, [pc, #176]	; (8106620 <HAL_DMA_IRQHandler+0xcc8>)
 810656e:	4293      	cmp	r3, r2
 8106570:	d022      	beq.n	81065b8 <HAL_DMA_IRQHandler+0xc60>
 8106572:	687b      	ldr	r3, [r7, #4]
 8106574:	681b      	ldr	r3, [r3, #0]
 8106576:	4a2b      	ldr	r2, [pc, #172]	; (8106624 <HAL_DMA_IRQHandler+0xccc>)
 8106578:	4293      	cmp	r3, r2
 810657a:	d01d      	beq.n	81065b8 <HAL_DMA_IRQHandler+0xc60>
 810657c:	687b      	ldr	r3, [r7, #4]
 810657e:	681b      	ldr	r3, [r3, #0]
 8106580:	4a29      	ldr	r2, [pc, #164]	; (8106628 <HAL_DMA_IRQHandler+0xcd0>)
 8106582:	4293      	cmp	r3, r2
 8106584:	d018      	beq.n	81065b8 <HAL_DMA_IRQHandler+0xc60>
 8106586:	687b      	ldr	r3, [r7, #4]
 8106588:	681b      	ldr	r3, [r3, #0]
 810658a:	4a28      	ldr	r2, [pc, #160]	; (810662c <HAL_DMA_IRQHandler+0xcd4>)
 810658c:	4293      	cmp	r3, r2
 810658e:	d013      	beq.n	81065b8 <HAL_DMA_IRQHandler+0xc60>
 8106590:	687b      	ldr	r3, [r7, #4]
 8106592:	681b      	ldr	r3, [r3, #0]
 8106594:	4a26      	ldr	r2, [pc, #152]	; (8106630 <HAL_DMA_IRQHandler+0xcd8>)
 8106596:	4293      	cmp	r3, r2
 8106598:	d00e      	beq.n	81065b8 <HAL_DMA_IRQHandler+0xc60>
 810659a:	687b      	ldr	r3, [r7, #4]
 810659c:	681b      	ldr	r3, [r3, #0]
 810659e:	4a25      	ldr	r2, [pc, #148]	; (8106634 <HAL_DMA_IRQHandler+0xcdc>)
 81065a0:	4293      	cmp	r3, r2
 81065a2:	d009      	beq.n	81065b8 <HAL_DMA_IRQHandler+0xc60>
 81065a4:	687b      	ldr	r3, [r7, #4]
 81065a6:	681b      	ldr	r3, [r3, #0]
 81065a8:	4a23      	ldr	r2, [pc, #140]	; (8106638 <HAL_DMA_IRQHandler+0xce0>)
 81065aa:	4293      	cmp	r3, r2
 81065ac:	d004      	beq.n	81065b8 <HAL_DMA_IRQHandler+0xc60>
 81065ae:	687b      	ldr	r3, [r7, #4]
 81065b0:	681b      	ldr	r3, [r3, #0]
 81065b2:	4a22      	ldr	r2, [pc, #136]	; (810663c <HAL_DMA_IRQHandler+0xce4>)
 81065b4:	4293      	cmp	r3, r2
 81065b6:	d108      	bne.n	81065ca <HAL_DMA_IRQHandler+0xc72>
 81065b8:	687b      	ldr	r3, [r7, #4]
 81065ba:	681b      	ldr	r3, [r3, #0]
 81065bc:	681a      	ldr	r2, [r3, #0]
 81065be:	687b      	ldr	r3, [r7, #4]
 81065c0:	681b      	ldr	r3, [r3, #0]
 81065c2:	f022 0214 	bic.w	r2, r2, #20
 81065c6:	601a      	str	r2, [r3, #0]
 81065c8:	e007      	b.n	81065da <HAL_DMA_IRQHandler+0xc82>
 81065ca:	687b      	ldr	r3, [r7, #4]
 81065cc:	681b      	ldr	r3, [r3, #0]
 81065ce:	681a      	ldr	r2, [r3, #0]
 81065d0:	687b      	ldr	r3, [r7, #4]
 81065d2:	681b      	ldr	r3, [r3, #0]
 81065d4:	f022 020a 	bic.w	r2, r2, #10
 81065d8:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 81065da:	687b      	ldr	r3, [r7, #4]
 81065dc:	2200      	movs	r2, #0
 81065de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 81065e2:	687b      	ldr	r3, [r7, #4]
 81065e4:	2201      	movs	r2, #1
 81065e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 81065ea:	687b      	ldr	r3, [r7, #4]
 81065ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81065ee:	2b00      	cmp	r3, #0
 81065f0:	f000 80b8 	beq.w	8106764 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 81065f4:	687b      	ldr	r3, [r7, #4]
 81065f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81065f8:	6878      	ldr	r0, [r7, #4]
 81065fa:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 81065fc:	e0b2      	b.n	8106764 <HAL_DMA_IRQHandler+0xe0c>
 81065fe:	bf00      	nop
 8106600:	40020010 	.word	0x40020010
 8106604:	40020028 	.word	0x40020028
 8106608:	40020040 	.word	0x40020040
 810660c:	40020058 	.word	0x40020058
 8106610:	40020070 	.word	0x40020070
 8106614:	40020088 	.word	0x40020088
 8106618:	400200a0 	.word	0x400200a0
 810661c:	400200b8 	.word	0x400200b8
 8106620:	40020410 	.word	0x40020410
 8106624:	40020428 	.word	0x40020428
 8106628:	40020440 	.word	0x40020440
 810662c:	40020458 	.word	0x40020458
 8106630:	40020470 	.word	0x40020470
 8106634:	40020488 	.word	0x40020488
 8106638:	400204a0 	.word	0x400204a0
 810663c:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8106640:	687b      	ldr	r3, [r7, #4]
 8106642:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8106644:	f003 031f 	and.w	r3, r3, #31
 8106648:	2208      	movs	r2, #8
 810664a:	409a      	lsls	r2, r3
 810664c:	697b      	ldr	r3, [r7, #20]
 810664e:	4013      	ands	r3, r2
 8106650:	2b00      	cmp	r3, #0
 8106652:	f000 8088 	beq.w	8106766 <HAL_DMA_IRQHandler+0xe0e>
 8106656:	693b      	ldr	r3, [r7, #16]
 8106658:	f003 0308 	and.w	r3, r3, #8
 810665c:	2b00      	cmp	r3, #0
 810665e:	f000 8082 	beq.w	8106766 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8106662:	687b      	ldr	r3, [r7, #4]
 8106664:	681b      	ldr	r3, [r3, #0]
 8106666:	4a41      	ldr	r2, [pc, #260]	; (810676c <HAL_DMA_IRQHandler+0xe14>)
 8106668:	4293      	cmp	r3, r2
 810666a:	d04a      	beq.n	8106702 <HAL_DMA_IRQHandler+0xdaa>
 810666c:	687b      	ldr	r3, [r7, #4]
 810666e:	681b      	ldr	r3, [r3, #0]
 8106670:	4a3f      	ldr	r2, [pc, #252]	; (8106770 <HAL_DMA_IRQHandler+0xe18>)
 8106672:	4293      	cmp	r3, r2
 8106674:	d045      	beq.n	8106702 <HAL_DMA_IRQHandler+0xdaa>
 8106676:	687b      	ldr	r3, [r7, #4]
 8106678:	681b      	ldr	r3, [r3, #0]
 810667a:	4a3e      	ldr	r2, [pc, #248]	; (8106774 <HAL_DMA_IRQHandler+0xe1c>)
 810667c:	4293      	cmp	r3, r2
 810667e:	d040      	beq.n	8106702 <HAL_DMA_IRQHandler+0xdaa>
 8106680:	687b      	ldr	r3, [r7, #4]
 8106682:	681b      	ldr	r3, [r3, #0]
 8106684:	4a3c      	ldr	r2, [pc, #240]	; (8106778 <HAL_DMA_IRQHandler+0xe20>)
 8106686:	4293      	cmp	r3, r2
 8106688:	d03b      	beq.n	8106702 <HAL_DMA_IRQHandler+0xdaa>
 810668a:	687b      	ldr	r3, [r7, #4]
 810668c:	681b      	ldr	r3, [r3, #0]
 810668e:	4a3b      	ldr	r2, [pc, #236]	; (810677c <HAL_DMA_IRQHandler+0xe24>)
 8106690:	4293      	cmp	r3, r2
 8106692:	d036      	beq.n	8106702 <HAL_DMA_IRQHandler+0xdaa>
 8106694:	687b      	ldr	r3, [r7, #4]
 8106696:	681b      	ldr	r3, [r3, #0]
 8106698:	4a39      	ldr	r2, [pc, #228]	; (8106780 <HAL_DMA_IRQHandler+0xe28>)
 810669a:	4293      	cmp	r3, r2
 810669c:	d031      	beq.n	8106702 <HAL_DMA_IRQHandler+0xdaa>
 810669e:	687b      	ldr	r3, [r7, #4]
 81066a0:	681b      	ldr	r3, [r3, #0]
 81066a2:	4a38      	ldr	r2, [pc, #224]	; (8106784 <HAL_DMA_IRQHandler+0xe2c>)
 81066a4:	4293      	cmp	r3, r2
 81066a6:	d02c      	beq.n	8106702 <HAL_DMA_IRQHandler+0xdaa>
 81066a8:	687b      	ldr	r3, [r7, #4]
 81066aa:	681b      	ldr	r3, [r3, #0]
 81066ac:	4a36      	ldr	r2, [pc, #216]	; (8106788 <HAL_DMA_IRQHandler+0xe30>)
 81066ae:	4293      	cmp	r3, r2
 81066b0:	d027      	beq.n	8106702 <HAL_DMA_IRQHandler+0xdaa>
 81066b2:	687b      	ldr	r3, [r7, #4]
 81066b4:	681b      	ldr	r3, [r3, #0]
 81066b6:	4a35      	ldr	r2, [pc, #212]	; (810678c <HAL_DMA_IRQHandler+0xe34>)
 81066b8:	4293      	cmp	r3, r2
 81066ba:	d022      	beq.n	8106702 <HAL_DMA_IRQHandler+0xdaa>
 81066bc:	687b      	ldr	r3, [r7, #4]
 81066be:	681b      	ldr	r3, [r3, #0]
 81066c0:	4a33      	ldr	r2, [pc, #204]	; (8106790 <HAL_DMA_IRQHandler+0xe38>)
 81066c2:	4293      	cmp	r3, r2
 81066c4:	d01d      	beq.n	8106702 <HAL_DMA_IRQHandler+0xdaa>
 81066c6:	687b      	ldr	r3, [r7, #4]
 81066c8:	681b      	ldr	r3, [r3, #0]
 81066ca:	4a32      	ldr	r2, [pc, #200]	; (8106794 <HAL_DMA_IRQHandler+0xe3c>)
 81066cc:	4293      	cmp	r3, r2
 81066ce:	d018      	beq.n	8106702 <HAL_DMA_IRQHandler+0xdaa>
 81066d0:	687b      	ldr	r3, [r7, #4]
 81066d2:	681b      	ldr	r3, [r3, #0]
 81066d4:	4a30      	ldr	r2, [pc, #192]	; (8106798 <HAL_DMA_IRQHandler+0xe40>)
 81066d6:	4293      	cmp	r3, r2
 81066d8:	d013      	beq.n	8106702 <HAL_DMA_IRQHandler+0xdaa>
 81066da:	687b      	ldr	r3, [r7, #4]
 81066dc:	681b      	ldr	r3, [r3, #0]
 81066de:	4a2f      	ldr	r2, [pc, #188]	; (810679c <HAL_DMA_IRQHandler+0xe44>)
 81066e0:	4293      	cmp	r3, r2
 81066e2:	d00e      	beq.n	8106702 <HAL_DMA_IRQHandler+0xdaa>
 81066e4:	687b      	ldr	r3, [r7, #4]
 81066e6:	681b      	ldr	r3, [r3, #0]
 81066e8:	4a2d      	ldr	r2, [pc, #180]	; (81067a0 <HAL_DMA_IRQHandler+0xe48>)
 81066ea:	4293      	cmp	r3, r2
 81066ec:	d009      	beq.n	8106702 <HAL_DMA_IRQHandler+0xdaa>
 81066ee:	687b      	ldr	r3, [r7, #4]
 81066f0:	681b      	ldr	r3, [r3, #0]
 81066f2:	4a2c      	ldr	r2, [pc, #176]	; (81067a4 <HAL_DMA_IRQHandler+0xe4c>)
 81066f4:	4293      	cmp	r3, r2
 81066f6:	d004      	beq.n	8106702 <HAL_DMA_IRQHandler+0xdaa>
 81066f8:	687b      	ldr	r3, [r7, #4]
 81066fa:	681b      	ldr	r3, [r3, #0]
 81066fc:	4a2a      	ldr	r2, [pc, #168]	; (81067a8 <HAL_DMA_IRQHandler+0xe50>)
 81066fe:	4293      	cmp	r3, r2
 8106700:	d108      	bne.n	8106714 <HAL_DMA_IRQHandler+0xdbc>
 8106702:	687b      	ldr	r3, [r7, #4]
 8106704:	681b      	ldr	r3, [r3, #0]
 8106706:	681a      	ldr	r2, [r3, #0]
 8106708:	687b      	ldr	r3, [r7, #4]
 810670a:	681b      	ldr	r3, [r3, #0]
 810670c:	f022 021c 	bic.w	r2, r2, #28
 8106710:	601a      	str	r2, [r3, #0]
 8106712:	e007      	b.n	8106724 <HAL_DMA_IRQHandler+0xdcc>
 8106714:	687b      	ldr	r3, [r7, #4]
 8106716:	681b      	ldr	r3, [r3, #0]
 8106718:	681a      	ldr	r2, [r3, #0]
 810671a:	687b      	ldr	r3, [r7, #4]
 810671c:	681b      	ldr	r3, [r3, #0]
 810671e:	f022 020e 	bic.w	r2, r2, #14
 8106722:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8106724:	687b      	ldr	r3, [r7, #4]
 8106726:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8106728:	f003 031f 	and.w	r3, r3, #31
 810672c:	2201      	movs	r2, #1
 810672e:	409a      	lsls	r2, r3
 8106730:	69fb      	ldr	r3, [r7, #28]
 8106732:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8106734:	687b      	ldr	r3, [r7, #4]
 8106736:	2201      	movs	r2, #1
 8106738:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 810673a:	687b      	ldr	r3, [r7, #4]
 810673c:	2200      	movs	r2, #0
 810673e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8106742:	687b      	ldr	r3, [r7, #4]
 8106744:	2201      	movs	r2, #1
 8106746:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 810674a:	687b      	ldr	r3, [r7, #4]
 810674c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 810674e:	2b00      	cmp	r3, #0
 8106750:	d009      	beq.n	8106766 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8106752:	687b      	ldr	r3, [r7, #4]
 8106754:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8106756:	6878      	ldr	r0, [r7, #4]
 8106758:	4798      	blx	r3
 810675a:	e004      	b.n	8106766 <HAL_DMA_IRQHandler+0xe0e>
          return;
 810675c:	bf00      	nop
 810675e:	e002      	b.n	8106766 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8106760:	bf00      	nop
 8106762:	e000      	b.n	8106766 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8106764:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8106766:	3728      	adds	r7, #40	; 0x28
 8106768:	46bd      	mov	sp, r7
 810676a:	bd80      	pop	{r7, pc}
 810676c:	40020010 	.word	0x40020010
 8106770:	40020028 	.word	0x40020028
 8106774:	40020040 	.word	0x40020040
 8106778:	40020058 	.word	0x40020058
 810677c:	40020070 	.word	0x40020070
 8106780:	40020088 	.word	0x40020088
 8106784:	400200a0 	.word	0x400200a0
 8106788:	400200b8 	.word	0x400200b8
 810678c:	40020410 	.word	0x40020410
 8106790:	40020428 	.word	0x40020428
 8106794:	40020440 	.word	0x40020440
 8106798:	40020458 	.word	0x40020458
 810679c:	40020470 	.word	0x40020470
 81067a0:	40020488 	.word	0x40020488
 81067a4:	400204a0 	.word	0x400204a0
 81067a8:	400204b8 	.word	0x400204b8

081067ac <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 81067ac:	b480      	push	{r7}
 81067ae:	b083      	sub	sp, #12
 81067b0:	af00      	add	r7, sp, #0
 81067b2:	6078      	str	r0, [r7, #4]
  return hdma->State;
 81067b4:	687b      	ldr	r3, [r7, #4]
 81067b6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 81067ba:	b2db      	uxtb	r3, r3
}
 81067bc:	4618      	mov	r0, r3
 81067be:	370c      	adds	r7, #12
 81067c0:	46bd      	mov	sp, r7
 81067c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81067c6:	4770      	bx	lr

081067c8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 81067c8:	b480      	push	{r7}
 81067ca:	b087      	sub	sp, #28
 81067cc:	af00      	add	r7, sp, #0
 81067ce:	60f8      	str	r0, [r7, #12]
 81067d0:	60b9      	str	r1, [r7, #8]
 81067d2:	607a      	str	r2, [r7, #4]
 81067d4:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 81067d6:	68fb      	ldr	r3, [r7, #12]
 81067d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81067da:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 81067dc:	68fb      	ldr	r3, [r7, #12]
 81067de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81067e0:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 81067e2:	68fb      	ldr	r3, [r7, #12]
 81067e4:	681b      	ldr	r3, [r3, #0]
 81067e6:	4a84      	ldr	r2, [pc, #528]	; (81069f8 <DMA_SetConfig+0x230>)
 81067e8:	4293      	cmp	r3, r2
 81067ea:	d072      	beq.n	81068d2 <DMA_SetConfig+0x10a>
 81067ec:	68fb      	ldr	r3, [r7, #12]
 81067ee:	681b      	ldr	r3, [r3, #0]
 81067f0:	4a82      	ldr	r2, [pc, #520]	; (81069fc <DMA_SetConfig+0x234>)
 81067f2:	4293      	cmp	r3, r2
 81067f4:	d06d      	beq.n	81068d2 <DMA_SetConfig+0x10a>
 81067f6:	68fb      	ldr	r3, [r7, #12]
 81067f8:	681b      	ldr	r3, [r3, #0]
 81067fa:	4a81      	ldr	r2, [pc, #516]	; (8106a00 <DMA_SetConfig+0x238>)
 81067fc:	4293      	cmp	r3, r2
 81067fe:	d068      	beq.n	81068d2 <DMA_SetConfig+0x10a>
 8106800:	68fb      	ldr	r3, [r7, #12]
 8106802:	681b      	ldr	r3, [r3, #0]
 8106804:	4a7f      	ldr	r2, [pc, #508]	; (8106a04 <DMA_SetConfig+0x23c>)
 8106806:	4293      	cmp	r3, r2
 8106808:	d063      	beq.n	81068d2 <DMA_SetConfig+0x10a>
 810680a:	68fb      	ldr	r3, [r7, #12]
 810680c:	681b      	ldr	r3, [r3, #0]
 810680e:	4a7e      	ldr	r2, [pc, #504]	; (8106a08 <DMA_SetConfig+0x240>)
 8106810:	4293      	cmp	r3, r2
 8106812:	d05e      	beq.n	81068d2 <DMA_SetConfig+0x10a>
 8106814:	68fb      	ldr	r3, [r7, #12]
 8106816:	681b      	ldr	r3, [r3, #0]
 8106818:	4a7c      	ldr	r2, [pc, #496]	; (8106a0c <DMA_SetConfig+0x244>)
 810681a:	4293      	cmp	r3, r2
 810681c:	d059      	beq.n	81068d2 <DMA_SetConfig+0x10a>
 810681e:	68fb      	ldr	r3, [r7, #12]
 8106820:	681b      	ldr	r3, [r3, #0]
 8106822:	4a7b      	ldr	r2, [pc, #492]	; (8106a10 <DMA_SetConfig+0x248>)
 8106824:	4293      	cmp	r3, r2
 8106826:	d054      	beq.n	81068d2 <DMA_SetConfig+0x10a>
 8106828:	68fb      	ldr	r3, [r7, #12]
 810682a:	681b      	ldr	r3, [r3, #0]
 810682c:	4a79      	ldr	r2, [pc, #484]	; (8106a14 <DMA_SetConfig+0x24c>)
 810682e:	4293      	cmp	r3, r2
 8106830:	d04f      	beq.n	81068d2 <DMA_SetConfig+0x10a>
 8106832:	68fb      	ldr	r3, [r7, #12]
 8106834:	681b      	ldr	r3, [r3, #0]
 8106836:	4a78      	ldr	r2, [pc, #480]	; (8106a18 <DMA_SetConfig+0x250>)
 8106838:	4293      	cmp	r3, r2
 810683a:	d04a      	beq.n	81068d2 <DMA_SetConfig+0x10a>
 810683c:	68fb      	ldr	r3, [r7, #12]
 810683e:	681b      	ldr	r3, [r3, #0]
 8106840:	4a76      	ldr	r2, [pc, #472]	; (8106a1c <DMA_SetConfig+0x254>)
 8106842:	4293      	cmp	r3, r2
 8106844:	d045      	beq.n	81068d2 <DMA_SetConfig+0x10a>
 8106846:	68fb      	ldr	r3, [r7, #12]
 8106848:	681b      	ldr	r3, [r3, #0]
 810684a:	4a75      	ldr	r2, [pc, #468]	; (8106a20 <DMA_SetConfig+0x258>)
 810684c:	4293      	cmp	r3, r2
 810684e:	d040      	beq.n	81068d2 <DMA_SetConfig+0x10a>
 8106850:	68fb      	ldr	r3, [r7, #12]
 8106852:	681b      	ldr	r3, [r3, #0]
 8106854:	4a73      	ldr	r2, [pc, #460]	; (8106a24 <DMA_SetConfig+0x25c>)
 8106856:	4293      	cmp	r3, r2
 8106858:	d03b      	beq.n	81068d2 <DMA_SetConfig+0x10a>
 810685a:	68fb      	ldr	r3, [r7, #12]
 810685c:	681b      	ldr	r3, [r3, #0]
 810685e:	4a72      	ldr	r2, [pc, #456]	; (8106a28 <DMA_SetConfig+0x260>)
 8106860:	4293      	cmp	r3, r2
 8106862:	d036      	beq.n	81068d2 <DMA_SetConfig+0x10a>
 8106864:	68fb      	ldr	r3, [r7, #12]
 8106866:	681b      	ldr	r3, [r3, #0]
 8106868:	4a70      	ldr	r2, [pc, #448]	; (8106a2c <DMA_SetConfig+0x264>)
 810686a:	4293      	cmp	r3, r2
 810686c:	d031      	beq.n	81068d2 <DMA_SetConfig+0x10a>
 810686e:	68fb      	ldr	r3, [r7, #12]
 8106870:	681b      	ldr	r3, [r3, #0]
 8106872:	4a6f      	ldr	r2, [pc, #444]	; (8106a30 <DMA_SetConfig+0x268>)
 8106874:	4293      	cmp	r3, r2
 8106876:	d02c      	beq.n	81068d2 <DMA_SetConfig+0x10a>
 8106878:	68fb      	ldr	r3, [r7, #12]
 810687a:	681b      	ldr	r3, [r3, #0]
 810687c:	4a6d      	ldr	r2, [pc, #436]	; (8106a34 <DMA_SetConfig+0x26c>)
 810687e:	4293      	cmp	r3, r2
 8106880:	d027      	beq.n	81068d2 <DMA_SetConfig+0x10a>
 8106882:	68fb      	ldr	r3, [r7, #12]
 8106884:	681b      	ldr	r3, [r3, #0]
 8106886:	4a6c      	ldr	r2, [pc, #432]	; (8106a38 <DMA_SetConfig+0x270>)
 8106888:	4293      	cmp	r3, r2
 810688a:	d022      	beq.n	81068d2 <DMA_SetConfig+0x10a>
 810688c:	68fb      	ldr	r3, [r7, #12]
 810688e:	681b      	ldr	r3, [r3, #0]
 8106890:	4a6a      	ldr	r2, [pc, #424]	; (8106a3c <DMA_SetConfig+0x274>)
 8106892:	4293      	cmp	r3, r2
 8106894:	d01d      	beq.n	81068d2 <DMA_SetConfig+0x10a>
 8106896:	68fb      	ldr	r3, [r7, #12]
 8106898:	681b      	ldr	r3, [r3, #0]
 810689a:	4a69      	ldr	r2, [pc, #420]	; (8106a40 <DMA_SetConfig+0x278>)
 810689c:	4293      	cmp	r3, r2
 810689e:	d018      	beq.n	81068d2 <DMA_SetConfig+0x10a>
 81068a0:	68fb      	ldr	r3, [r7, #12]
 81068a2:	681b      	ldr	r3, [r3, #0]
 81068a4:	4a67      	ldr	r2, [pc, #412]	; (8106a44 <DMA_SetConfig+0x27c>)
 81068a6:	4293      	cmp	r3, r2
 81068a8:	d013      	beq.n	81068d2 <DMA_SetConfig+0x10a>
 81068aa:	68fb      	ldr	r3, [r7, #12]
 81068ac:	681b      	ldr	r3, [r3, #0]
 81068ae:	4a66      	ldr	r2, [pc, #408]	; (8106a48 <DMA_SetConfig+0x280>)
 81068b0:	4293      	cmp	r3, r2
 81068b2:	d00e      	beq.n	81068d2 <DMA_SetConfig+0x10a>
 81068b4:	68fb      	ldr	r3, [r7, #12]
 81068b6:	681b      	ldr	r3, [r3, #0]
 81068b8:	4a64      	ldr	r2, [pc, #400]	; (8106a4c <DMA_SetConfig+0x284>)
 81068ba:	4293      	cmp	r3, r2
 81068bc:	d009      	beq.n	81068d2 <DMA_SetConfig+0x10a>
 81068be:	68fb      	ldr	r3, [r7, #12]
 81068c0:	681b      	ldr	r3, [r3, #0]
 81068c2:	4a63      	ldr	r2, [pc, #396]	; (8106a50 <DMA_SetConfig+0x288>)
 81068c4:	4293      	cmp	r3, r2
 81068c6:	d004      	beq.n	81068d2 <DMA_SetConfig+0x10a>
 81068c8:	68fb      	ldr	r3, [r7, #12]
 81068ca:	681b      	ldr	r3, [r3, #0]
 81068cc:	4a61      	ldr	r2, [pc, #388]	; (8106a54 <DMA_SetConfig+0x28c>)
 81068ce:	4293      	cmp	r3, r2
 81068d0:	d101      	bne.n	81068d6 <DMA_SetConfig+0x10e>
 81068d2:	2301      	movs	r3, #1
 81068d4:	e000      	b.n	81068d8 <DMA_SetConfig+0x110>
 81068d6:	2300      	movs	r3, #0
 81068d8:	2b00      	cmp	r3, #0
 81068da:	d00d      	beq.n	81068f8 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 81068dc:	68fb      	ldr	r3, [r7, #12]
 81068de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 81068e0:	68fa      	ldr	r2, [r7, #12]
 81068e2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 81068e4:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 81068e6:	68fb      	ldr	r3, [r7, #12]
 81068e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 81068ea:	2b00      	cmp	r3, #0
 81068ec:	d004      	beq.n	81068f8 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 81068ee:	68fb      	ldr	r3, [r7, #12]
 81068f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 81068f2:	68fa      	ldr	r2, [r7, #12]
 81068f4:	6f52      	ldr	r2, [r2, #116]	; 0x74
 81068f6:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 81068f8:	68fb      	ldr	r3, [r7, #12]
 81068fa:	681b      	ldr	r3, [r3, #0]
 81068fc:	4a3e      	ldr	r2, [pc, #248]	; (81069f8 <DMA_SetConfig+0x230>)
 81068fe:	4293      	cmp	r3, r2
 8106900:	d04a      	beq.n	8106998 <DMA_SetConfig+0x1d0>
 8106902:	68fb      	ldr	r3, [r7, #12]
 8106904:	681b      	ldr	r3, [r3, #0]
 8106906:	4a3d      	ldr	r2, [pc, #244]	; (81069fc <DMA_SetConfig+0x234>)
 8106908:	4293      	cmp	r3, r2
 810690a:	d045      	beq.n	8106998 <DMA_SetConfig+0x1d0>
 810690c:	68fb      	ldr	r3, [r7, #12]
 810690e:	681b      	ldr	r3, [r3, #0]
 8106910:	4a3b      	ldr	r2, [pc, #236]	; (8106a00 <DMA_SetConfig+0x238>)
 8106912:	4293      	cmp	r3, r2
 8106914:	d040      	beq.n	8106998 <DMA_SetConfig+0x1d0>
 8106916:	68fb      	ldr	r3, [r7, #12]
 8106918:	681b      	ldr	r3, [r3, #0]
 810691a:	4a3a      	ldr	r2, [pc, #232]	; (8106a04 <DMA_SetConfig+0x23c>)
 810691c:	4293      	cmp	r3, r2
 810691e:	d03b      	beq.n	8106998 <DMA_SetConfig+0x1d0>
 8106920:	68fb      	ldr	r3, [r7, #12]
 8106922:	681b      	ldr	r3, [r3, #0]
 8106924:	4a38      	ldr	r2, [pc, #224]	; (8106a08 <DMA_SetConfig+0x240>)
 8106926:	4293      	cmp	r3, r2
 8106928:	d036      	beq.n	8106998 <DMA_SetConfig+0x1d0>
 810692a:	68fb      	ldr	r3, [r7, #12]
 810692c:	681b      	ldr	r3, [r3, #0]
 810692e:	4a37      	ldr	r2, [pc, #220]	; (8106a0c <DMA_SetConfig+0x244>)
 8106930:	4293      	cmp	r3, r2
 8106932:	d031      	beq.n	8106998 <DMA_SetConfig+0x1d0>
 8106934:	68fb      	ldr	r3, [r7, #12]
 8106936:	681b      	ldr	r3, [r3, #0]
 8106938:	4a35      	ldr	r2, [pc, #212]	; (8106a10 <DMA_SetConfig+0x248>)
 810693a:	4293      	cmp	r3, r2
 810693c:	d02c      	beq.n	8106998 <DMA_SetConfig+0x1d0>
 810693e:	68fb      	ldr	r3, [r7, #12]
 8106940:	681b      	ldr	r3, [r3, #0]
 8106942:	4a34      	ldr	r2, [pc, #208]	; (8106a14 <DMA_SetConfig+0x24c>)
 8106944:	4293      	cmp	r3, r2
 8106946:	d027      	beq.n	8106998 <DMA_SetConfig+0x1d0>
 8106948:	68fb      	ldr	r3, [r7, #12]
 810694a:	681b      	ldr	r3, [r3, #0]
 810694c:	4a32      	ldr	r2, [pc, #200]	; (8106a18 <DMA_SetConfig+0x250>)
 810694e:	4293      	cmp	r3, r2
 8106950:	d022      	beq.n	8106998 <DMA_SetConfig+0x1d0>
 8106952:	68fb      	ldr	r3, [r7, #12]
 8106954:	681b      	ldr	r3, [r3, #0]
 8106956:	4a31      	ldr	r2, [pc, #196]	; (8106a1c <DMA_SetConfig+0x254>)
 8106958:	4293      	cmp	r3, r2
 810695a:	d01d      	beq.n	8106998 <DMA_SetConfig+0x1d0>
 810695c:	68fb      	ldr	r3, [r7, #12]
 810695e:	681b      	ldr	r3, [r3, #0]
 8106960:	4a2f      	ldr	r2, [pc, #188]	; (8106a20 <DMA_SetConfig+0x258>)
 8106962:	4293      	cmp	r3, r2
 8106964:	d018      	beq.n	8106998 <DMA_SetConfig+0x1d0>
 8106966:	68fb      	ldr	r3, [r7, #12]
 8106968:	681b      	ldr	r3, [r3, #0]
 810696a:	4a2e      	ldr	r2, [pc, #184]	; (8106a24 <DMA_SetConfig+0x25c>)
 810696c:	4293      	cmp	r3, r2
 810696e:	d013      	beq.n	8106998 <DMA_SetConfig+0x1d0>
 8106970:	68fb      	ldr	r3, [r7, #12]
 8106972:	681b      	ldr	r3, [r3, #0]
 8106974:	4a2c      	ldr	r2, [pc, #176]	; (8106a28 <DMA_SetConfig+0x260>)
 8106976:	4293      	cmp	r3, r2
 8106978:	d00e      	beq.n	8106998 <DMA_SetConfig+0x1d0>
 810697a:	68fb      	ldr	r3, [r7, #12]
 810697c:	681b      	ldr	r3, [r3, #0]
 810697e:	4a2b      	ldr	r2, [pc, #172]	; (8106a2c <DMA_SetConfig+0x264>)
 8106980:	4293      	cmp	r3, r2
 8106982:	d009      	beq.n	8106998 <DMA_SetConfig+0x1d0>
 8106984:	68fb      	ldr	r3, [r7, #12]
 8106986:	681b      	ldr	r3, [r3, #0]
 8106988:	4a29      	ldr	r2, [pc, #164]	; (8106a30 <DMA_SetConfig+0x268>)
 810698a:	4293      	cmp	r3, r2
 810698c:	d004      	beq.n	8106998 <DMA_SetConfig+0x1d0>
 810698e:	68fb      	ldr	r3, [r7, #12]
 8106990:	681b      	ldr	r3, [r3, #0]
 8106992:	4a28      	ldr	r2, [pc, #160]	; (8106a34 <DMA_SetConfig+0x26c>)
 8106994:	4293      	cmp	r3, r2
 8106996:	d101      	bne.n	810699c <DMA_SetConfig+0x1d4>
 8106998:	2301      	movs	r3, #1
 810699a:	e000      	b.n	810699e <DMA_SetConfig+0x1d6>
 810699c:	2300      	movs	r3, #0
 810699e:	2b00      	cmp	r3, #0
 81069a0:	d05a      	beq.n	8106a58 <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 81069a2:	68fb      	ldr	r3, [r7, #12]
 81069a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81069a6:	f003 031f 	and.w	r3, r3, #31
 81069aa:	223f      	movs	r2, #63	; 0x3f
 81069ac:	409a      	lsls	r2, r3
 81069ae:	697b      	ldr	r3, [r7, #20]
 81069b0:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 81069b2:	68fb      	ldr	r3, [r7, #12]
 81069b4:	681b      	ldr	r3, [r3, #0]
 81069b6:	681a      	ldr	r2, [r3, #0]
 81069b8:	68fb      	ldr	r3, [r7, #12]
 81069ba:	681b      	ldr	r3, [r3, #0]
 81069bc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 81069c0:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 81069c2:	68fb      	ldr	r3, [r7, #12]
 81069c4:	681b      	ldr	r3, [r3, #0]
 81069c6:	683a      	ldr	r2, [r7, #0]
 81069c8:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 81069ca:	68fb      	ldr	r3, [r7, #12]
 81069cc:	689b      	ldr	r3, [r3, #8]
 81069ce:	2b40      	cmp	r3, #64	; 0x40
 81069d0:	d108      	bne.n	81069e4 <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 81069d2:	68fb      	ldr	r3, [r7, #12]
 81069d4:	681b      	ldr	r3, [r3, #0]
 81069d6:	687a      	ldr	r2, [r7, #4]
 81069d8:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 81069da:	68fb      	ldr	r3, [r7, #12]
 81069dc:	681b      	ldr	r3, [r3, #0]
 81069de:	68ba      	ldr	r2, [r7, #8]
 81069e0:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 81069e2:	e087      	b.n	8106af4 <DMA_SetConfig+0x32c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 81069e4:	68fb      	ldr	r3, [r7, #12]
 81069e6:	681b      	ldr	r3, [r3, #0]
 81069e8:	68ba      	ldr	r2, [r7, #8]
 81069ea:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 81069ec:	68fb      	ldr	r3, [r7, #12]
 81069ee:	681b      	ldr	r3, [r3, #0]
 81069f0:	687a      	ldr	r2, [r7, #4]
 81069f2:	60da      	str	r2, [r3, #12]
}
 81069f4:	e07e      	b.n	8106af4 <DMA_SetConfig+0x32c>
 81069f6:	bf00      	nop
 81069f8:	40020010 	.word	0x40020010
 81069fc:	40020028 	.word	0x40020028
 8106a00:	40020040 	.word	0x40020040
 8106a04:	40020058 	.word	0x40020058
 8106a08:	40020070 	.word	0x40020070
 8106a0c:	40020088 	.word	0x40020088
 8106a10:	400200a0 	.word	0x400200a0
 8106a14:	400200b8 	.word	0x400200b8
 8106a18:	40020410 	.word	0x40020410
 8106a1c:	40020428 	.word	0x40020428
 8106a20:	40020440 	.word	0x40020440
 8106a24:	40020458 	.word	0x40020458
 8106a28:	40020470 	.word	0x40020470
 8106a2c:	40020488 	.word	0x40020488
 8106a30:	400204a0 	.word	0x400204a0
 8106a34:	400204b8 	.word	0x400204b8
 8106a38:	58025408 	.word	0x58025408
 8106a3c:	5802541c 	.word	0x5802541c
 8106a40:	58025430 	.word	0x58025430
 8106a44:	58025444 	.word	0x58025444
 8106a48:	58025458 	.word	0x58025458
 8106a4c:	5802546c 	.word	0x5802546c
 8106a50:	58025480 	.word	0x58025480
 8106a54:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8106a58:	68fb      	ldr	r3, [r7, #12]
 8106a5a:	681b      	ldr	r3, [r3, #0]
 8106a5c:	4a28      	ldr	r2, [pc, #160]	; (8106b00 <DMA_SetConfig+0x338>)
 8106a5e:	4293      	cmp	r3, r2
 8106a60:	d022      	beq.n	8106aa8 <DMA_SetConfig+0x2e0>
 8106a62:	68fb      	ldr	r3, [r7, #12]
 8106a64:	681b      	ldr	r3, [r3, #0]
 8106a66:	4a27      	ldr	r2, [pc, #156]	; (8106b04 <DMA_SetConfig+0x33c>)
 8106a68:	4293      	cmp	r3, r2
 8106a6a:	d01d      	beq.n	8106aa8 <DMA_SetConfig+0x2e0>
 8106a6c:	68fb      	ldr	r3, [r7, #12]
 8106a6e:	681b      	ldr	r3, [r3, #0]
 8106a70:	4a25      	ldr	r2, [pc, #148]	; (8106b08 <DMA_SetConfig+0x340>)
 8106a72:	4293      	cmp	r3, r2
 8106a74:	d018      	beq.n	8106aa8 <DMA_SetConfig+0x2e0>
 8106a76:	68fb      	ldr	r3, [r7, #12]
 8106a78:	681b      	ldr	r3, [r3, #0]
 8106a7a:	4a24      	ldr	r2, [pc, #144]	; (8106b0c <DMA_SetConfig+0x344>)
 8106a7c:	4293      	cmp	r3, r2
 8106a7e:	d013      	beq.n	8106aa8 <DMA_SetConfig+0x2e0>
 8106a80:	68fb      	ldr	r3, [r7, #12]
 8106a82:	681b      	ldr	r3, [r3, #0]
 8106a84:	4a22      	ldr	r2, [pc, #136]	; (8106b10 <DMA_SetConfig+0x348>)
 8106a86:	4293      	cmp	r3, r2
 8106a88:	d00e      	beq.n	8106aa8 <DMA_SetConfig+0x2e0>
 8106a8a:	68fb      	ldr	r3, [r7, #12]
 8106a8c:	681b      	ldr	r3, [r3, #0]
 8106a8e:	4a21      	ldr	r2, [pc, #132]	; (8106b14 <DMA_SetConfig+0x34c>)
 8106a90:	4293      	cmp	r3, r2
 8106a92:	d009      	beq.n	8106aa8 <DMA_SetConfig+0x2e0>
 8106a94:	68fb      	ldr	r3, [r7, #12]
 8106a96:	681b      	ldr	r3, [r3, #0]
 8106a98:	4a1f      	ldr	r2, [pc, #124]	; (8106b18 <DMA_SetConfig+0x350>)
 8106a9a:	4293      	cmp	r3, r2
 8106a9c:	d004      	beq.n	8106aa8 <DMA_SetConfig+0x2e0>
 8106a9e:	68fb      	ldr	r3, [r7, #12]
 8106aa0:	681b      	ldr	r3, [r3, #0]
 8106aa2:	4a1e      	ldr	r2, [pc, #120]	; (8106b1c <DMA_SetConfig+0x354>)
 8106aa4:	4293      	cmp	r3, r2
 8106aa6:	d101      	bne.n	8106aac <DMA_SetConfig+0x2e4>
 8106aa8:	2301      	movs	r3, #1
 8106aaa:	e000      	b.n	8106aae <DMA_SetConfig+0x2e6>
 8106aac:	2300      	movs	r3, #0
 8106aae:	2b00      	cmp	r3, #0
 8106ab0:	d020      	beq.n	8106af4 <DMA_SetConfig+0x32c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8106ab2:	68fb      	ldr	r3, [r7, #12]
 8106ab4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8106ab6:	f003 031f 	and.w	r3, r3, #31
 8106aba:	2201      	movs	r2, #1
 8106abc:	409a      	lsls	r2, r3
 8106abe:	693b      	ldr	r3, [r7, #16]
 8106ac0:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8106ac2:	68fb      	ldr	r3, [r7, #12]
 8106ac4:	681b      	ldr	r3, [r3, #0]
 8106ac6:	683a      	ldr	r2, [r7, #0]
 8106ac8:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8106aca:	68fb      	ldr	r3, [r7, #12]
 8106acc:	689b      	ldr	r3, [r3, #8]
 8106ace:	2b40      	cmp	r3, #64	; 0x40
 8106ad0:	d108      	bne.n	8106ae4 <DMA_SetConfig+0x31c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8106ad2:	68fb      	ldr	r3, [r7, #12]
 8106ad4:	681b      	ldr	r3, [r3, #0]
 8106ad6:	687a      	ldr	r2, [r7, #4]
 8106ad8:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8106ada:	68fb      	ldr	r3, [r7, #12]
 8106adc:	681b      	ldr	r3, [r3, #0]
 8106ade:	68ba      	ldr	r2, [r7, #8]
 8106ae0:	60da      	str	r2, [r3, #12]
}
 8106ae2:	e007      	b.n	8106af4 <DMA_SetConfig+0x32c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8106ae4:	68fb      	ldr	r3, [r7, #12]
 8106ae6:	681b      	ldr	r3, [r3, #0]
 8106ae8:	68ba      	ldr	r2, [r7, #8]
 8106aea:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8106aec:	68fb      	ldr	r3, [r7, #12]
 8106aee:	681b      	ldr	r3, [r3, #0]
 8106af0:	687a      	ldr	r2, [r7, #4]
 8106af2:	60da      	str	r2, [r3, #12]
}
 8106af4:	bf00      	nop
 8106af6:	371c      	adds	r7, #28
 8106af8:	46bd      	mov	sp, r7
 8106afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106afe:	4770      	bx	lr
 8106b00:	58025408 	.word	0x58025408
 8106b04:	5802541c 	.word	0x5802541c
 8106b08:	58025430 	.word	0x58025430
 8106b0c:	58025444 	.word	0x58025444
 8106b10:	58025458 	.word	0x58025458
 8106b14:	5802546c 	.word	0x5802546c
 8106b18:	58025480 	.word	0x58025480
 8106b1c:	58025494 	.word	0x58025494

08106b20 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8106b20:	b480      	push	{r7}
 8106b22:	b085      	sub	sp, #20
 8106b24:	af00      	add	r7, sp, #0
 8106b26:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8106b28:	687b      	ldr	r3, [r7, #4]
 8106b2a:	681b      	ldr	r3, [r3, #0]
 8106b2c:	4a43      	ldr	r2, [pc, #268]	; (8106c3c <DMA_CalcBaseAndBitshift+0x11c>)
 8106b2e:	4293      	cmp	r3, r2
 8106b30:	d04a      	beq.n	8106bc8 <DMA_CalcBaseAndBitshift+0xa8>
 8106b32:	687b      	ldr	r3, [r7, #4]
 8106b34:	681b      	ldr	r3, [r3, #0]
 8106b36:	4a42      	ldr	r2, [pc, #264]	; (8106c40 <DMA_CalcBaseAndBitshift+0x120>)
 8106b38:	4293      	cmp	r3, r2
 8106b3a:	d045      	beq.n	8106bc8 <DMA_CalcBaseAndBitshift+0xa8>
 8106b3c:	687b      	ldr	r3, [r7, #4]
 8106b3e:	681b      	ldr	r3, [r3, #0]
 8106b40:	4a40      	ldr	r2, [pc, #256]	; (8106c44 <DMA_CalcBaseAndBitshift+0x124>)
 8106b42:	4293      	cmp	r3, r2
 8106b44:	d040      	beq.n	8106bc8 <DMA_CalcBaseAndBitshift+0xa8>
 8106b46:	687b      	ldr	r3, [r7, #4]
 8106b48:	681b      	ldr	r3, [r3, #0]
 8106b4a:	4a3f      	ldr	r2, [pc, #252]	; (8106c48 <DMA_CalcBaseAndBitshift+0x128>)
 8106b4c:	4293      	cmp	r3, r2
 8106b4e:	d03b      	beq.n	8106bc8 <DMA_CalcBaseAndBitshift+0xa8>
 8106b50:	687b      	ldr	r3, [r7, #4]
 8106b52:	681b      	ldr	r3, [r3, #0]
 8106b54:	4a3d      	ldr	r2, [pc, #244]	; (8106c4c <DMA_CalcBaseAndBitshift+0x12c>)
 8106b56:	4293      	cmp	r3, r2
 8106b58:	d036      	beq.n	8106bc8 <DMA_CalcBaseAndBitshift+0xa8>
 8106b5a:	687b      	ldr	r3, [r7, #4]
 8106b5c:	681b      	ldr	r3, [r3, #0]
 8106b5e:	4a3c      	ldr	r2, [pc, #240]	; (8106c50 <DMA_CalcBaseAndBitshift+0x130>)
 8106b60:	4293      	cmp	r3, r2
 8106b62:	d031      	beq.n	8106bc8 <DMA_CalcBaseAndBitshift+0xa8>
 8106b64:	687b      	ldr	r3, [r7, #4]
 8106b66:	681b      	ldr	r3, [r3, #0]
 8106b68:	4a3a      	ldr	r2, [pc, #232]	; (8106c54 <DMA_CalcBaseAndBitshift+0x134>)
 8106b6a:	4293      	cmp	r3, r2
 8106b6c:	d02c      	beq.n	8106bc8 <DMA_CalcBaseAndBitshift+0xa8>
 8106b6e:	687b      	ldr	r3, [r7, #4]
 8106b70:	681b      	ldr	r3, [r3, #0]
 8106b72:	4a39      	ldr	r2, [pc, #228]	; (8106c58 <DMA_CalcBaseAndBitshift+0x138>)
 8106b74:	4293      	cmp	r3, r2
 8106b76:	d027      	beq.n	8106bc8 <DMA_CalcBaseAndBitshift+0xa8>
 8106b78:	687b      	ldr	r3, [r7, #4]
 8106b7a:	681b      	ldr	r3, [r3, #0]
 8106b7c:	4a37      	ldr	r2, [pc, #220]	; (8106c5c <DMA_CalcBaseAndBitshift+0x13c>)
 8106b7e:	4293      	cmp	r3, r2
 8106b80:	d022      	beq.n	8106bc8 <DMA_CalcBaseAndBitshift+0xa8>
 8106b82:	687b      	ldr	r3, [r7, #4]
 8106b84:	681b      	ldr	r3, [r3, #0]
 8106b86:	4a36      	ldr	r2, [pc, #216]	; (8106c60 <DMA_CalcBaseAndBitshift+0x140>)
 8106b88:	4293      	cmp	r3, r2
 8106b8a:	d01d      	beq.n	8106bc8 <DMA_CalcBaseAndBitshift+0xa8>
 8106b8c:	687b      	ldr	r3, [r7, #4]
 8106b8e:	681b      	ldr	r3, [r3, #0]
 8106b90:	4a34      	ldr	r2, [pc, #208]	; (8106c64 <DMA_CalcBaseAndBitshift+0x144>)
 8106b92:	4293      	cmp	r3, r2
 8106b94:	d018      	beq.n	8106bc8 <DMA_CalcBaseAndBitshift+0xa8>
 8106b96:	687b      	ldr	r3, [r7, #4]
 8106b98:	681b      	ldr	r3, [r3, #0]
 8106b9a:	4a33      	ldr	r2, [pc, #204]	; (8106c68 <DMA_CalcBaseAndBitshift+0x148>)
 8106b9c:	4293      	cmp	r3, r2
 8106b9e:	d013      	beq.n	8106bc8 <DMA_CalcBaseAndBitshift+0xa8>
 8106ba0:	687b      	ldr	r3, [r7, #4]
 8106ba2:	681b      	ldr	r3, [r3, #0]
 8106ba4:	4a31      	ldr	r2, [pc, #196]	; (8106c6c <DMA_CalcBaseAndBitshift+0x14c>)
 8106ba6:	4293      	cmp	r3, r2
 8106ba8:	d00e      	beq.n	8106bc8 <DMA_CalcBaseAndBitshift+0xa8>
 8106baa:	687b      	ldr	r3, [r7, #4]
 8106bac:	681b      	ldr	r3, [r3, #0]
 8106bae:	4a30      	ldr	r2, [pc, #192]	; (8106c70 <DMA_CalcBaseAndBitshift+0x150>)
 8106bb0:	4293      	cmp	r3, r2
 8106bb2:	d009      	beq.n	8106bc8 <DMA_CalcBaseAndBitshift+0xa8>
 8106bb4:	687b      	ldr	r3, [r7, #4]
 8106bb6:	681b      	ldr	r3, [r3, #0]
 8106bb8:	4a2e      	ldr	r2, [pc, #184]	; (8106c74 <DMA_CalcBaseAndBitshift+0x154>)
 8106bba:	4293      	cmp	r3, r2
 8106bbc:	d004      	beq.n	8106bc8 <DMA_CalcBaseAndBitshift+0xa8>
 8106bbe:	687b      	ldr	r3, [r7, #4]
 8106bc0:	681b      	ldr	r3, [r3, #0]
 8106bc2:	4a2d      	ldr	r2, [pc, #180]	; (8106c78 <DMA_CalcBaseAndBitshift+0x158>)
 8106bc4:	4293      	cmp	r3, r2
 8106bc6:	d101      	bne.n	8106bcc <DMA_CalcBaseAndBitshift+0xac>
 8106bc8:	2301      	movs	r3, #1
 8106bca:	e000      	b.n	8106bce <DMA_CalcBaseAndBitshift+0xae>
 8106bcc:	2300      	movs	r3, #0
 8106bce:	2b00      	cmp	r3, #0
 8106bd0:	d026      	beq.n	8106c20 <DMA_CalcBaseAndBitshift+0x100>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8106bd2:	687b      	ldr	r3, [r7, #4]
 8106bd4:	681b      	ldr	r3, [r3, #0]
 8106bd6:	b2db      	uxtb	r3, r3
 8106bd8:	3b10      	subs	r3, #16
 8106bda:	4a28      	ldr	r2, [pc, #160]	; (8106c7c <DMA_CalcBaseAndBitshift+0x15c>)
 8106bdc:	fba2 2303 	umull	r2, r3, r2, r3
 8106be0:	091b      	lsrs	r3, r3, #4
 8106be2:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8106be4:	68fb      	ldr	r3, [r7, #12]
 8106be6:	f003 0307 	and.w	r3, r3, #7
 8106bea:	4a25      	ldr	r2, [pc, #148]	; (8106c80 <DMA_CalcBaseAndBitshift+0x160>)
 8106bec:	5cd3      	ldrb	r3, [r2, r3]
 8106bee:	461a      	mov	r2, r3
 8106bf0:	687b      	ldr	r3, [r7, #4]
 8106bf2:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8106bf4:	68fb      	ldr	r3, [r7, #12]
 8106bf6:	2b03      	cmp	r3, #3
 8106bf8:	d909      	bls.n	8106c0e <DMA_CalcBaseAndBitshift+0xee>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8106bfa:	687b      	ldr	r3, [r7, #4]
 8106bfc:	681b      	ldr	r3, [r3, #0]
 8106bfe:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8106c02:	f023 0303 	bic.w	r3, r3, #3
 8106c06:	1d1a      	adds	r2, r3, #4
 8106c08:	687b      	ldr	r3, [r7, #4]
 8106c0a:	659a      	str	r2, [r3, #88]	; 0x58
 8106c0c:	e00e      	b.n	8106c2c <DMA_CalcBaseAndBitshift+0x10c>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8106c0e:	687b      	ldr	r3, [r7, #4]
 8106c10:	681b      	ldr	r3, [r3, #0]
 8106c12:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8106c16:	f023 0303 	bic.w	r3, r3, #3
 8106c1a:	687a      	ldr	r2, [r7, #4]
 8106c1c:	6593      	str	r3, [r2, #88]	; 0x58
 8106c1e:	e005      	b.n	8106c2c <DMA_CalcBaseAndBitshift+0x10c>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8106c20:	687b      	ldr	r3, [r7, #4]
 8106c22:	681b      	ldr	r3, [r3, #0]
 8106c24:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8106c28:	687b      	ldr	r3, [r7, #4]
 8106c2a:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8106c2c:	687b      	ldr	r3, [r7, #4]
 8106c2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8106c30:	4618      	mov	r0, r3
 8106c32:	3714      	adds	r7, #20
 8106c34:	46bd      	mov	sp, r7
 8106c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106c3a:	4770      	bx	lr
 8106c3c:	40020010 	.word	0x40020010
 8106c40:	40020028 	.word	0x40020028
 8106c44:	40020040 	.word	0x40020040
 8106c48:	40020058 	.word	0x40020058
 8106c4c:	40020070 	.word	0x40020070
 8106c50:	40020088 	.word	0x40020088
 8106c54:	400200a0 	.word	0x400200a0
 8106c58:	400200b8 	.word	0x400200b8
 8106c5c:	40020410 	.word	0x40020410
 8106c60:	40020428 	.word	0x40020428
 8106c64:	40020440 	.word	0x40020440
 8106c68:	40020458 	.word	0x40020458
 8106c6c:	40020470 	.word	0x40020470
 8106c70:	40020488 	.word	0x40020488
 8106c74:	400204a0 	.word	0x400204a0
 8106c78:	400204b8 	.word	0x400204b8
 8106c7c:	aaaaaaab 	.word	0xaaaaaaab
 8106c80:	08119b0c 	.word	0x08119b0c

08106c84 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8106c84:	b480      	push	{r7}
 8106c86:	b085      	sub	sp, #20
 8106c88:	af00      	add	r7, sp, #0
 8106c8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8106c8c:	2300      	movs	r3, #0
 8106c8e:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8106c90:	687b      	ldr	r3, [r7, #4]
 8106c92:	699b      	ldr	r3, [r3, #24]
 8106c94:	2b00      	cmp	r3, #0
 8106c96:	d120      	bne.n	8106cda <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8106c98:	687b      	ldr	r3, [r7, #4]
 8106c9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8106c9c:	2b03      	cmp	r3, #3
 8106c9e:	d858      	bhi.n	8106d52 <DMA_CheckFifoParam+0xce>
 8106ca0:	a201      	add	r2, pc, #4	; (adr r2, 8106ca8 <DMA_CheckFifoParam+0x24>)
 8106ca2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8106ca6:	bf00      	nop
 8106ca8:	08106cb9 	.word	0x08106cb9
 8106cac:	08106ccb 	.word	0x08106ccb
 8106cb0:	08106cb9 	.word	0x08106cb9
 8106cb4:	08106d53 	.word	0x08106d53
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8106cb8:	687b      	ldr	r3, [r7, #4]
 8106cba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8106cbc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8106cc0:	2b00      	cmp	r3, #0
 8106cc2:	d048      	beq.n	8106d56 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8106cc4:	2301      	movs	r3, #1
 8106cc6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8106cc8:	e045      	b.n	8106d56 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8106cca:	687b      	ldr	r3, [r7, #4]
 8106ccc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8106cce:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8106cd2:	d142      	bne.n	8106d5a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8106cd4:	2301      	movs	r3, #1
 8106cd6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8106cd8:	e03f      	b.n	8106d5a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8106cda:	687b      	ldr	r3, [r7, #4]
 8106cdc:	699b      	ldr	r3, [r3, #24]
 8106cde:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8106ce2:	d123      	bne.n	8106d2c <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8106ce4:	687b      	ldr	r3, [r7, #4]
 8106ce6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8106ce8:	2b03      	cmp	r3, #3
 8106cea:	d838      	bhi.n	8106d5e <DMA_CheckFifoParam+0xda>
 8106cec:	a201      	add	r2, pc, #4	; (adr r2, 8106cf4 <DMA_CheckFifoParam+0x70>)
 8106cee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8106cf2:	bf00      	nop
 8106cf4:	08106d05 	.word	0x08106d05
 8106cf8:	08106d0b 	.word	0x08106d0b
 8106cfc:	08106d05 	.word	0x08106d05
 8106d00:	08106d1d 	.word	0x08106d1d
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8106d04:	2301      	movs	r3, #1
 8106d06:	73fb      	strb	r3, [r7, #15]
        break;
 8106d08:	e030      	b.n	8106d6c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8106d0a:	687b      	ldr	r3, [r7, #4]
 8106d0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8106d0e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8106d12:	2b00      	cmp	r3, #0
 8106d14:	d025      	beq.n	8106d62 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8106d16:	2301      	movs	r3, #1
 8106d18:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8106d1a:	e022      	b.n	8106d62 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8106d1c:	687b      	ldr	r3, [r7, #4]
 8106d1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8106d20:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8106d24:	d11f      	bne.n	8106d66 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8106d26:	2301      	movs	r3, #1
 8106d28:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8106d2a:	e01c      	b.n	8106d66 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8106d2c:	687b      	ldr	r3, [r7, #4]
 8106d2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8106d30:	2b02      	cmp	r3, #2
 8106d32:	d902      	bls.n	8106d3a <DMA_CheckFifoParam+0xb6>
 8106d34:	2b03      	cmp	r3, #3
 8106d36:	d003      	beq.n	8106d40 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8106d38:	e018      	b.n	8106d6c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8106d3a:	2301      	movs	r3, #1
 8106d3c:	73fb      	strb	r3, [r7, #15]
        break;
 8106d3e:	e015      	b.n	8106d6c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8106d40:	687b      	ldr	r3, [r7, #4]
 8106d42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8106d44:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8106d48:	2b00      	cmp	r3, #0
 8106d4a:	d00e      	beq.n	8106d6a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8106d4c:	2301      	movs	r3, #1
 8106d4e:	73fb      	strb	r3, [r7, #15]
    break;
 8106d50:	e00b      	b.n	8106d6a <DMA_CheckFifoParam+0xe6>
        break;
 8106d52:	bf00      	nop
 8106d54:	e00a      	b.n	8106d6c <DMA_CheckFifoParam+0xe8>
        break;
 8106d56:	bf00      	nop
 8106d58:	e008      	b.n	8106d6c <DMA_CheckFifoParam+0xe8>
        break;
 8106d5a:	bf00      	nop
 8106d5c:	e006      	b.n	8106d6c <DMA_CheckFifoParam+0xe8>
        break;
 8106d5e:	bf00      	nop
 8106d60:	e004      	b.n	8106d6c <DMA_CheckFifoParam+0xe8>
        break;
 8106d62:	bf00      	nop
 8106d64:	e002      	b.n	8106d6c <DMA_CheckFifoParam+0xe8>
        break;
 8106d66:	bf00      	nop
 8106d68:	e000      	b.n	8106d6c <DMA_CheckFifoParam+0xe8>
    break;
 8106d6a:	bf00      	nop
    }
  }

  return status;
 8106d6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8106d6e:	4618      	mov	r0, r3
 8106d70:	3714      	adds	r7, #20
 8106d72:	46bd      	mov	sp, r7
 8106d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106d78:	4770      	bx	lr
 8106d7a:	bf00      	nop

08106d7c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8106d7c:	b480      	push	{r7}
 8106d7e:	b085      	sub	sp, #20
 8106d80:	af00      	add	r7, sp, #0
 8106d82:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8106d84:	687b      	ldr	r3, [r7, #4]
 8106d86:	681b      	ldr	r3, [r3, #0]
 8106d88:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8106d8a:	687b      	ldr	r3, [r7, #4]
 8106d8c:	681b      	ldr	r3, [r3, #0]
 8106d8e:	4a3a      	ldr	r2, [pc, #232]	; (8106e78 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8106d90:	4293      	cmp	r3, r2
 8106d92:	d022      	beq.n	8106dda <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8106d94:	687b      	ldr	r3, [r7, #4]
 8106d96:	681b      	ldr	r3, [r3, #0]
 8106d98:	4a38      	ldr	r2, [pc, #224]	; (8106e7c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8106d9a:	4293      	cmp	r3, r2
 8106d9c:	d01d      	beq.n	8106dda <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8106d9e:	687b      	ldr	r3, [r7, #4]
 8106da0:	681b      	ldr	r3, [r3, #0]
 8106da2:	4a37      	ldr	r2, [pc, #220]	; (8106e80 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8106da4:	4293      	cmp	r3, r2
 8106da6:	d018      	beq.n	8106dda <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8106da8:	687b      	ldr	r3, [r7, #4]
 8106daa:	681b      	ldr	r3, [r3, #0]
 8106dac:	4a35      	ldr	r2, [pc, #212]	; (8106e84 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8106dae:	4293      	cmp	r3, r2
 8106db0:	d013      	beq.n	8106dda <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8106db2:	687b      	ldr	r3, [r7, #4]
 8106db4:	681b      	ldr	r3, [r3, #0]
 8106db6:	4a34      	ldr	r2, [pc, #208]	; (8106e88 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8106db8:	4293      	cmp	r3, r2
 8106dba:	d00e      	beq.n	8106dda <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8106dbc:	687b      	ldr	r3, [r7, #4]
 8106dbe:	681b      	ldr	r3, [r3, #0]
 8106dc0:	4a32      	ldr	r2, [pc, #200]	; (8106e8c <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8106dc2:	4293      	cmp	r3, r2
 8106dc4:	d009      	beq.n	8106dda <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8106dc6:	687b      	ldr	r3, [r7, #4]
 8106dc8:	681b      	ldr	r3, [r3, #0]
 8106dca:	4a31      	ldr	r2, [pc, #196]	; (8106e90 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8106dcc:	4293      	cmp	r3, r2
 8106dce:	d004      	beq.n	8106dda <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8106dd0:	687b      	ldr	r3, [r7, #4]
 8106dd2:	681b      	ldr	r3, [r3, #0]
 8106dd4:	4a2f      	ldr	r2, [pc, #188]	; (8106e94 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8106dd6:	4293      	cmp	r3, r2
 8106dd8:	d101      	bne.n	8106dde <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8106dda:	2301      	movs	r3, #1
 8106ddc:	e000      	b.n	8106de0 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8106dde:	2300      	movs	r3, #0
 8106de0:	2b00      	cmp	r3, #0
 8106de2:	d01c      	beq.n	8106e1e <DMA_CalcDMAMUXChannelBaseAndMask+0xa2>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8106de4:	687b      	ldr	r3, [r7, #4]
 8106de6:	681b      	ldr	r3, [r3, #0]
 8106de8:	b2db      	uxtb	r3, r3
 8106dea:	3b08      	subs	r3, #8
 8106dec:	4a2a      	ldr	r2, [pc, #168]	; (8106e98 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8106dee:	fba2 2303 	umull	r2, r3, r2, r3
 8106df2:	091b      	lsrs	r3, r3, #4
 8106df4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8106df6:	68fb      	ldr	r3, [r7, #12]
 8106df8:	f103 53b0 	add.w	r3, r3, #369098752	; 0x16000000
 8106dfc:	f503 4316 	add.w	r3, r3, #38400	; 0x9600
 8106e00:	009b      	lsls	r3, r3, #2
 8106e02:	461a      	mov	r2, r3
 8106e04:	687b      	ldr	r3, [r7, #4]
 8106e06:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8106e08:	687b      	ldr	r3, [r7, #4]
 8106e0a:	4a24      	ldr	r2, [pc, #144]	; (8106e9c <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8106e0c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8106e0e:	68fb      	ldr	r3, [r7, #12]
 8106e10:	f003 031f 	and.w	r3, r3, #31
 8106e14:	2201      	movs	r2, #1
 8106e16:	409a      	lsls	r2, r3
 8106e18:	687b      	ldr	r3, [r7, #4]
 8106e1a:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8106e1c:	e026      	b.n	8106e6c <DMA_CalcDMAMUXChannelBaseAndMask+0xf0>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8106e1e:	687b      	ldr	r3, [r7, #4]
 8106e20:	681b      	ldr	r3, [r3, #0]
 8106e22:	b2db      	uxtb	r3, r3
 8106e24:	3b10      	subs	r3, #16
 8106e26:	4a1e      	ldr	r2, [pc, #120]	; (8106ea0 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8106e28:	fba2 2303 	umull	r2, r3, r2, r3
 8106e2c:	091b      	lsrs	r3, r3, #4
 8106e2e:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8106e30:	68bb      	ldr	r3, [r7, #8]
 8106e32:	4a1c      	ldr	r2, [pc, #112]	; (8106ea4 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8106e34:	4293      	cmp	r3, r2
 8106e36:	d806      	bhi.n	8106e46 <DMA_CalcDMAMUXChannelBaseAndMask+0xca>
 8106e38:	68bb      	ldr	r3, [r7, #8]
 8106e3a:	4a1b      	ldr	r2, [pc, #108]	; (8106ea8 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8106e3c:	4293      	cmp	r3, r2
 8106e3e:	d902      	bls.n	8106e46 <DMA_CalcDMAMUXChannelBaseAndMask+0xca>
      stream_number += 8U;
 8106e40:	68fb      	ldr	r3, [r7, #12]
 8106e42:	3308      	adds	r3, #8
 8106e44:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8106e46:	68fb      	ldr	r3, [r7, #12]
 8106e48:	f103 5380 	add.w	r3, r3, #268435456	; 0x10000000
 8106e4c:	f503 4302 	add.w	r3, r3, #33280	; 0x8200
 8106e50:	009b      	lsls	r3, r3, #2
 8106e52:	461a      	mov	r2, r3
 8106e54:	687b      	ldr	r3, [r7, #4]
 8106e56:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8106e58:	687b      	ldr	r3, [r7, #4]
 8106e5a:	4a14      	ldr	r2, [pc, #80]	; (8106eac <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8106e5c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8106e5e:	68fb      	ldr	r3, [r7, #12]
 8106e60:	f003 031f 	and.w	r3, r3, #31
 8106e64:	2201      	movs	r2, #1
 8106e66:	409a      	lsls	r2, r3
 8106e68:	687b      	ldr	r3, [r7, #4]
 8106e6a:	669a      	str	r2, [r3, #104]	; 0x68
}
 8106e6c:	bf00      	nop
 8106e6e:	3714      	adds	r7, #20
 8106e70:	46bd      	mov	sp, r7
 8106e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106e76:	4770      	bx	lr
 8106e78:	58025408 	.word	0x58025408
 8106e7c:	5802541c 	.word	0x5802541c
 8106e80:	58025430 	.word	0x58025430
 8106e84:	58025444 	.word	0x58025444
 8106e88:	58025458 	.word	0x58025458
 8106e8c:	5802546c 	.word	0x5802546c
 8106e90:	58025480 	.word	0x58025480
 8106e94:	58025494 	.word	0x58025494
 8106e98:	cccccccd 	.word	0xcccccccd
 8106e9c:	58025880 	.word	0x58025880
 8106ea0:	aaaaaaab 	.word	0xaaaaaaab
 8106ea4:	400204b8 	.word	0x400204b8
 8106ea8:	4002040f 	.word	0x4002040f
 8106eac:	40020880 	.word	0x40020880

08106eb0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8106eb0:	b480      	push	{r7}
 8106eb2:	b085      	sub	sp, #20
 8106eb4:	af00      	add	r7, sp, #0
 8106eb6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8106eb8:	687b      	ldr	r3, [r7, #4]
 8106eba:	685b      	ldr	r3, [r3, #4]
 8106ebc:	b2db      	uxtb	r3, r3
 8106ebe:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8106ec0:	68fb      	ldr	r3, [r7, #12]
 8106ec2:	2b00      	cmp	r3, #0
 8106ec4:	d04a      	beq.n	8106f5c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8106ec6:	68fb      	ldr	r3, [r7, #12]
 8106ec8:	2b08      	cmp	r3, #8
 8106eca:	d847      	bhi.n	8106f5c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8106ecc:	687b      	ldr	r3, [r7, #4]
 8106ece:	681b      	ldr	r3, [r3, #0]
 8106ed0:	4a25      	ldr	r2, [pc, #148]	; (8106f68 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8106ed2:	4293      	cmp	r3, r2
 8106ed4:	d022      	beq.n	8106f1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8106ed6:	687b      	ldr	r3, [r7, #4]
 8106ed8:	681b      	ldr	r3, [r3, #0]
 8106eda:	4a24      	ldr	r2, [pc, #144]	; (8106f6c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8106edc:	4293      	cmp	r3, r2
 8106ede:	d01d      	beq.n	8106f1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8106ee0:	687b      	ldr	r3, [r7, #4]
 8106ee2:	681b      	ldr	r3, [r3, #0]
 8106ee4:	4a22      	ldr	r2, [pc, #136]	; (8106f70 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8106ee6:	4293      	cmp	r3, r2
 8106ee8:	d018      	beq.n	8106f1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8106eea:	687b      	ldr	r3, [r7, #4]
 8106eec:	681b      	ldr	r3, [r3, #0]
 8106eee:	4a21      	ldr	r2, [pc, #132]	; (8106f74 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8106ef0:	4293      	cmp	r3, r2
 8106ef2:	d013      	beq.n	8106f1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8106ef4:	687b      	ldr	r3, [r7, #4]
 8106ef6:	681b      	ldr	r3, [r3, #0]
 8106ef8:	4a1f      	ldr	r2, [pc, #124]	; (8106f78 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8106efa:	4293      	cmp	r3, r2
 8106efc:	d00e      	beq.n	8106f1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8106efe:	687b      	ldr	r3, [r7, #4]
 8106f00:	681b      	ldr	r3, [r3, #0]
 8106f02:	4a1e      	ldr	r2, [pc, #120]	; (8106f7c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8106f04:	4293      	cmp	r3, r2
 8106f06:	d009      	beq.n	8106f1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8106f08:	687b      	ldr	r3, [r7, #4]
 8106f0a:	681b      	ldr	r3, [r3, #0]
 8106f0c:	4a1c      	ldr	r2, [pc, #112]	; (8106f80 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8106f0e:	4293      	cmp	r3, r2
 8106f10:	d004      	beq.n	8106f1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8106f12:	687b      	ldr	r3, [r7, #4]
 8106f14:	681b      	ldr	r3, [r3, #0]
 8106f16:	4a1b      	ldr	r2, [pc, #108]	; (8106f84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8106f18:	4293      	cmp	r3, r2
 8106f1a:	d101      	bne.n	8106f20 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8106f1c:	2301      	movs	r3, #1
 8106f1e:	e000      	b.n	8106f22 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8106f20:	2300      	movs	r3, #0
 8106f22:	2b00      	cmp	r3, #0
 8106f24:	d00a      	beq.n	8106f3c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8106f26:	68fa      	ldr	r2, [r7, #12]
 8106f28:	4b17      	ldr	r3, [pc, #92]	; (8106f88 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8106f2a:	4413      	add	r3, r2
 8106f2c:	009b      	lsls	r3, r3, #2
 8106f2e:	461a      	mov	r2, r3
 8106f30:	687b      	ldr	r3, [r7, #4]
 8106f32:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8106f34:	687b      	ldr	r3, [r7, #4]
 8106f36:	4a15      	ldr	r2, [pc, #84]	; (8106f8c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8106f38:	671a      	str	r2, [r3, #112]	; 0x70
 8106f3a:	e009      	b.n	8106f50 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8106f3c:	68fa      	ldr	r2, [r7, #12]
 8106f3e:	4b14      	ldr	r3, [pc, #80]	; (8106f90 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8106f40:	4413      	add	r3, r2
 8106f42:	009b      	lsls	r3, r3, #2
 8106f44:	461a      	mov	r2, r3
 8106f46:	687b      	ldr	r3, [r7, #4]
 8106f48:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8106f4a:	687b      	ldr	r3, [r7, #4]
 8106f4c:	4a11      	ldr	r2, [pc, #68]	; (8106f94 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8106f4e:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8106f50:	68fb      	ldr	r3, [r7, #12]
 8106f52:	3b01      	subs	r3, #1
 8106f54:	2201      	movs	r2, #1
 8106f56:	409a      	lsls	r2, r3
 8106f58:	687b      	ldr	r3, [r7, #4]
 8106f5a:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8106f5c:	bf00      	nop
 8106f5e:	3714      	adds	r7, #20
 8106f60:	46bd      	mov	sp, r7
 8106f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106f66:	4770      	bx	lr
 8106f68:	58025408 	.word	0x58025408
 8106f6c:	5802541c 	.word	0x5802541c
 8106f70:	58025430 	.word	0x58025430
 8106f74:	58025444 	.word	0x58025444
 8106f78:	58025458 	.word	0x58025458
 8106f7c:	5802546c 	.word	0x5802546c
 8106f80:	58025480 	.word	0x58025480
 8106f84:	58025494 	.word	0x58025494
 8106f88:	1600963f 	.word	0x1600963f
 8106f8c:	58025940 	.word	0x58025940
 8106f90:	1000823f 	.word	0x1000823f
 8106f94:	40020940 	.word	0x40020940

08106f98 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8106f98:	b480      	push	{r7}
 8106f9a:	b089      	sub	sp, #36	; 0x24
 8106f9c:	af00      	add	r7, sp, #0
 8106f9e:	6078      	str	r0, [r7, #4]
 8106fa0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8106fa2:	2300      	movs	r3, #0
 8106fa4:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent;
  uint32_t temp;
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
 8106fa6:	4b89      	ldr	r3, [pc, #548]	; (81071cc <HAL_GPIO_Init+0x234>)
 8106fa8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8106faa:	e194      	b.n	81072d6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8106fac:	683b      	ldr	r3, [r7, #0]
 8106fae:	681a      	ldr	r2, [r3, #0]
 8106fb0:	2101      	movs	r1, #1
 8106fb2:	69fb      	ldr	r3, [r7, #28]
 8106fb4:	fa01 f303 	lsl.w	r3, r1, r3
 8106fb8:	4013      	ands	r3, r2
 8106fba:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8106fbc:	693b      	ldr	r3, [r7, #16]
 8106fbe:	2b00      	cmp	r3, #0
 8106fc0:	f000 8186 	beq.w	81072d0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8106fc4:	683b      	ldr	r3, [r7, #0]
 8106fc6:	685b      	ldr	r3, [r3, #4]
 8106fc8:	2b01      	cmp	r3, #1
 8106fca:	d00b      	beq.n	8106fe4 <HAL_GPIO_Init+0x4c>
 8106fcc:	683b      	ldr	r3, [r7, #0]
 8106fce:	685b      	ldr	r3, [r3, #4]
 8106fd0:	2b02      	cmp	r3, #2
 8106fd2:	d007      	beq.n	8106fe4 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8106fd4:	683b      	ldr	r3, [r7, #0]
 8106fd6:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8106fd8:	2b11      	cmp	r3, #17
 8106fda:	d003      	beq.n	8106fe4 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8106fdc:	683b      	ldr	r3, [r7, #0]
 8106fde:	685b      	ldr	r3, [r3, #4]
 8106fe0:	2b12      	cmp	r3, #18
 8106fe2:	d130      	bne.n	8107046 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8106fe4:	687b      	ldr	r3, [r7, #4]
 8106fe6:	689b      	ldr	r3, [r3, #8]
 8106fe8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8106fea:	69fb      	ldr	r3, [r7, #28]
 8106fec:	005b      	lsls	r3, r3, #1
 8106fee:	2203      	movs	r2, #3
 8106ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8106ff4:	43db      	mvns	r3, r3
 8106ff6:	69ba      	ldr	r2, [r7, #24]
 8106ff8:	4013      	ands	r3, r2
 8106ffa:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8106ffc:	683b      	ldr	r3, [r7, #0]
 8106ffe:	68da      	ldr	r2, [r3, #12]
 8107000:	69fb      	ldr	r3, [r7, #28]
 8107002:	005b      	lsls	r3, r3, #1
 8107004:	fa02 f303 	lsl.w	r3, r2, r3
 8107008:	69ba      	ldr	r2, [r7, #24]
 810700a:	4313      	orrs	r3, r2
 810700c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 810700e:	687b      	ldr	r3, [r7, #4]
 8107010:	69ba      	ldr	r2, [r7, #24]
 8107012:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8107014:	687b      	ldr	r3, [r7, #4]
 8107016:	685b      	ldr	r3, [r3, #4]
 8107018:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 810701a:	2201      	movs	r2, #1
 810701c:	69fb      	ldr	r3, [r7, #28]
 810701e:	fa02 f303 	lsl.w	r3, r2, r3
 8107022:	43db      	mvns	r3, r3
 8107024:	69ba      	ldr	r2, [r7, #24]
 8107026:	4013      	ands	r3, r2
 8107028:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 810702a:	683b      	ldr	r3, [r7, #0]
 810702c:	685b      	ldr	r3, [r3, #4]
 810702e:	091b      	lsrs	r3, r3, #4
 8107030:	f003 0201 	and.w	r2, r3, #1
 8107034:	69fb      	ldr	r3, [r7, #28]
 8107036:	fa02 f303 	lsl.w	r3, r2, r3
 810703a:	69ba      	ldr	r2, [r7, #24]
 810703c:	4313      	orrs	r3, r2
 810703e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8107040:	687b      	ldr	r3, [r7, #4]
 8107042:	69ba      	ldr	r2, [r7, #24]
 8107044:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8107046:	687b      	ldr	r3, [r7, #4]
 8107048:	68db      	ldr	r3, [r3, #12]
 810704a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 810704c:	69fb      	ldr	r3, [r7, #28]
 810704e:	005b      	lsls	r3, r3, #1
 8107050:	2203      	movs	r2, #3
 8107052:	fa02 f303 	lsl.w	r3, r2, r3
 8107056:	43db      	mvns	r3, r3
 8107058:	69ba      	ldr	r2, [r7, #24]
 810705a:	4013      	ands	r3, r2
 810705c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 810705e:	683b      	ldr	r3, [r7, #0]
 8107060:	689a      	ldr	r2, [r3, #8]
 8107062:	69fb      	ldr	r3, [r7, #28]
 8107064:	005b      	lsls	r3, r3, #1
 8107066:	fa02 f303 	lsl.w	r3, r2, r3
 810706a:	69ba      	ldr	r2, [r7, #24]
 810706c:	4313      	orrs	r3, r2
 810706e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8107070:	687b      	ldr	r3, [r7, #4]
 8107072:	69ba      	ldr	r2, [r7, #24]
 8107074:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8107076:	683b      	ldr	r3, [r7, #0]
 8107078:	685b      	ldr	r3, [r3, #4]
 810707a:	2b02      	cmp	r3, #2
 810707c:	d003      	beq.n	8107086 <HAL_GPIO_Init+0xee>
 810707e:	683b      	ldr	r3, [r7, #0]
 8107080:	685b      	ldr	r3, [r3, #4]
 8107082:	2b12      	cmp	r3, #18
 8107084:	d123      	bne.n	81070ce <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8107086:	69fb      	ldr	r3, [r7, #28]
 8107088:	08da      	lsrs	r2, r3, #3
 810708a:	687b      	ldr	r3, [r7, #4]
 810708c:	3208      	adds	r2, #8
 810708e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8107092:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8107094:	69fb      	ldr	r3, [r7, #28]
 8107096:	f003 0307 	and.w	r3, r3, #7
 810709a:	009b      	lsls	r3, r3, #2
 810709c:	220f      	movs	r2, #15
 810709e:	fa02 f303 	lsl.w	r3, r2, r3
 81070a2:	43db      	mvns	r3, r3
 81070a4:	69ba      	ldr	r2, [r7, #24]
 81070a6:	4013      	ands	r3, r2
 81070a8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 81070aa:	683b      	ldr	r3, [r7, #0]
 81070ac:	691a      	ldr	r2, [r3, #16]
 81070ae:	69fb      	ldr	r3, [r7, #28]
 81070b0:	f003 0307 	and.w	r3, r3, #7
 81070b4:	009b      	lsls	r3, r3, #2
 81070b6:	fa02 f303 	lsl.w	r3, r2, r3
 81070ba:	69ba      	ldr	r2, [r7, #24]
 81070bc:	4313      	orrs	r3, r2
 81070be:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 81070c0:	69fb      	ldr	r3, [r7, #28]
 81070c2:	08da      	lsrs	r2, r3, #3
 81070c4:	687b      	ldr	r3, [r7, #4]
 81070c6:	3208      	adds	r2, #8
 81070c8:	69b9      	ldr	r1, [r7, #24]
 81070ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 81070ce:	687b      	ldr	r3, [r7, #4]
 81070d0:	681b      	ldr	r3, [r3, #0]
 81070d2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 81070d4:	69fb      	ldr	r3, [r7, #28]
 81070d6:	005b      	lsls	r3, r3, #1
 81070d8:	2203      	movs	r2, #3
 81070da:	fa02 f303 	lsl.w	r3, r2, r3
 81070de:	43db      	mvns	r3, r3
 81070e0:	69ba      	ldr	r2, [r7, #24]
 81070e2:	4013      	ands	r3, r2
 81070e4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 81070e6:	683b      	ldr	r3, [r7, #0]
 81070e8:	685b      	ldr	r3, [r3, #4]
 81070ea:	f003 0203 	and.w	r2, r3, #3
 81070ee:	69fb      	ldr	r3, [r7, #28]
 81070f0:	005b      	lsls	r3, r3, #1
 81070f2:	fa02 f303 	lsl.w	r3, r2, r3
 81070f6:	69ba      	ldr	r2, [r7, #24]
 81070f8:	4313      	orrs	r3, r2
 81070fa:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 81070fc:	687b      	ldr	r3, [r7, #4]
 81070fe:	69ba      	ldr	r2, [r7, #24]
 8107100:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8107102:	683b      	ldr	r3, [r7, #0]
 8107104:	685b      	ldr	r3, [r3, #4]
 8107106:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 810710a:	2b00      	cmp	r3, #0
 810710c:	f000 80e0 	beq.w	81072d0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8107110:	4b2f      	ldr	r3, [pc, #188]	; (81071d0 <HAL_GPIO_Init+0x238>)
 8107112:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8107116:	4a2e      	ldr	r2, [pc, #184]	; (81071d0 <HAL_GPIO_Init+0x238>)
 8107118:	f043 0302 	orr.w	r3, r3, #2
 810711c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8107120:	4b2b      	ldr	r3, [pc, #172]	; (81071d0 <HAL_GPIO_Init+0x238>)
 8107122:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8107126:	f003 0302 	and.w	r3, r3, #2
 810712a:	60fb      	str	r3, [r7, #12]
 810712c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 810712e:	4a29      	ldr	r2, [pc, #164]	; (81071d4 <HAL_GPIO_Init+0x23c>)
 8107130:	69fb      	ldr	r3, [r7, #28]
 8107132:	089b      	lsrs	r3, r3, #2
 8107134:	3302      	adds	r3, #2
 8107136:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 810713a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 810713c:	69fb      	ldr	r3, [r7, #28]
 810713e:	f003 0303 	and.w	r3, r3, #3
 8107142:	009b      	lsls	r3, r3, #2
 8107144:	220f      	movs	r2, #15
 8107146:	fa02 f303 	lsl.w	r3, r2, r3
 810714a:	43db      	mvns	r3, r3
 810714c:	69ba      	ldr	r2, [r7, #24]
 810714e:	4013      	ands	r3, r2
 8107150:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8107152:	687b      	ldr	r3, [r7, #4]
 8107154:	4a20      	ldr	r2, [pc, #128]	; (81071d8 <HAL_GPIO_Init+0x240>)
 8107156:	4293      	cmp	r3, r2
 8107158:	d052      	beq.n	8107200 <HAL_GPIO_Init+0x268>
 810715a:	687b      	ldr	r3, [r7, #4]
 810715c:	4a1f      	ldr	r2, [pc, #124]	; (81071dc <HAL_GPIO_Init+0x244>)
 810715e:	4293      	cmp	r3, r2
 8107160:	d031      	beq.n	81071c6 <HAL_GPIO_Init+0x22e>
 8107162:	687b      	ldr	r3, [r7, #4]
 8107164:	4a1e      	ldr	r2, [pc, #120]	; (81071e0 <HAL_GPIO_Init+0x248>)
 8107166:	4293      	cmp	r3, r2
 8107168:	d02b      	beq.n	81071c2 <HAL_GPIO_Init+0x22a>
 810716a:	687b      	ldr	r3, [r7, #4]
 810716c:	4a1d      	ldr	r2, [pc, #116]	; (81071e4 <HAL_GPIO_Init+0x24c>)
 810716e:	4293      	cmp	r3, r2
 8107170:	d025      	beq.n	81071be <HAL_GPIO_Init+0x226>
 8107172:	687b      	ldr	r3, [r7, #4]
 8107174:	4a1c      	ldr	r2, [pc, #112]	; (81071e8 <HAL_GPIO_Init+0x250>)
 8107176:	4293      	cmp	r3, r2
 8107178:	d01f      	beq.n	81071ba <HAL_GPIO_Init+0x222>
 810717a:	687b      	ldr	r3, [r7, #4]
 810717c:	4a1b      	ldr	r2, [pc, #108]	; (81071ec <HAL_GPIO_Init+0x254>)
 810717e:	4293      	cmp	r3, r2
 8107180:	d019      	beq.n	81071b6 <HAL_GPIO_Init+0x21e>
 8107182:	687b      	ldr	r3, [r7, #4]
 8107184:	4a1a      	ldr	r2, [pc, #104]	; (81071f0 <HAL_GPIO_Init+0x258>)
 8107186:	4293      	cmp	r3, r2
 8107188:	d013      	beq.n	81071b2 <HAL_GPIO_Init+0x21a>
 810718a:	687b      	ldr	r3, [r7, #4]
 810718c:	4a19      	ldr	r2, [pc, #100]	; (81071f4 <HAL_GPIO_Init+0x25c>)
 810718e:	4293      	cmp	r3, r2
 8107190:	d00d      	beq.n	81071ae <HAL_GPIO_Init+0x216>
 8107192:	687b      	ldr	r3, [r7, #4]
 8107194:	4a18      	ldr	r2, [pc, #96]	; (81071f8 <HAL_GPIO_Init+0x260>)
 8107196:	4293      	cmp	r3, r2
 8107198:	d007      	beq.n	81071aa <HAL_GPIO_Init+0x212>
 810719a:	687b      	ldr	r3, [r7, #4]
 810719c:	4a17      	ldr	r2, [pc, #92]	; (81071fc <HAL_GPIO_Init+0x264>)
 810719e:	4293      	cmp	r3, r2
 81071a0:	d101      	bne.n	81071a6 <HAL_GPIO_Init+0x20e>
 81071a2:	2309      	movs	r3, #9
 81071a4:	e02d      	b.n	8107202 <HAL_GPIO_Init+0x26a>
 81071a6:	230a      	movs	r3, #10
 81071a8:	e02b      	b.n	8107202 <HAL_GPIO_Init+0x26a>
 81071aa:	2308      	movs	r3, #8
 81071ac:	e029      	b.n	8107202 <HAL_GPIO_Init+0x26a>
 81071ae:	2307      	movs	r3, #7
 81071b0:	e027      	b.n	8107202 <HAL_GPIO_Init+0x26a>
 81071b2:	2306      	movs	r3, #6
 81071b4:	e025      	b.n	8107202 <HAL_GPIO_Init+0x26a>
 81071b6:	2305      	movs	r3, #5
 81071b8:	e023      	b.n	8107202 <HAL_GPIO_Init+0x26a>
 81071ba:	2304      	movs	r3, #4
 81071bc:	e021      	b.n	8107202 <HAL_GPIO_Init+0x26a>
 81071be:	2303      	movs	r3, #3
 81071c0:	e01f      	b.n	8107202 <HAL_GPIO_Init+0x26a>
 81071c2:	2302      	movs	r3, #2
 81071c4:	e01d      	b.n	8107202 <HAL_GPIO_Init+0x26a>
 81071c6:	2301      	movs	r3, #1
 81071c8:	e01b      	b.n	8107202 <HAL_GPIO_Init+0x26a>
 81071ca:	bf00      	nop
 81071cc:	580000c0 	.word	0x580000c0
 81071d0:	58024400 	.word	0x58024400
 81071d4:	58000400 	.word	0x58000400
 81071d8:	58020000 	.word	0x58020000
 81071dc:	58020400 	.word	0x58020400
 81071e0:	58020800 	.word	0x58020800
 81071e4:	58020c00 	.word	0x58020c00
 81071e8:	58021000 	.word	0x58021000
 81071ec:	58021400 	.word	0x58021400
 81071f0:	58021800 	.word	0x58021800
 81071f4:	58021c00 	.word	0x58021c00
 81071f8:	58022000 	.word	0x58022000
 81071fc:	58022400 	.word	0x58022400
 8107200:	2300      	movs	r3, #0
 8107202:	69fa      	ldr	r2, [r7, #28]
 8107204:	f002 0203 	and.w	r2, r2, #3
 8107208:	0092      	lsls	r2, r2, #2
 810720a:	4093      	lsls	r3, r2
 810720c:	69ba      	ldr	r2, [r7, #24]
 810720e:	4313      	orrs	r3, r2
 8107210:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8107212:	4938      	ldr	r1, [pc, #224]	; (81072f4 <HAL_GPIO_Init+0x35c>)
 8107214:	69fb      	ldr	r3, [r7, #28]
 8107216:	089b      	lsrs	r3, r3, #2
 8107218:	3302      	adds	r3, #2
 810721a:	69ba      	ldr	r2, [r7, #24]
 810721c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8107220:	697b      	ldr	r3, [r7, #20]
 8107222:	681b      	ldr	r3, [r3, #0]
 8107224:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8107226:	693b      	ldr	r3, [r7, #16]
 8107228:	43db      	mvns	r3, r3
 810722a:	69ba      	ldr	r2, [r7, #24]
 810722c:	4013      	ands	r3, r2
 810722e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8107230:	683b      	ldr	r3, [r7, #0]
 8107232:	685b      	ldr	r3, [r3, #4]
 8107234:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8107238:	2b00      	cmp	r3, #0
 810723a:	d003      	beq.n	8107244 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 810723c:	69ba      	ldr	r2, [r7, #24]
 810723e:	693b      	ldr	r3, [r7, #16]
 8107240:	4313      	orrs	r3, r2
 8107242:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8107244:	697b      	ldr	r3, [r7, #20]
 8107246:	69ba      	ldr	r2, [r7, #24]
 8107248:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 810724a:	697b      	ldr	r3, [r7, #20]
 810724c:	685b      	ldr	r3, [r3, #4]
 810724e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8107250:	693b      	ldr	r3, [r7, #16]
 8107252:	43db      	mvns	r3, r3
 8107254:	69ba      	ldr	r2, [r7, #24]
 8107256:	4013      	ands	r3, r2
 8107258:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 810725a:	683b      	ldr	r3, [r7, #0]
 810725c:	685b      	ldr	r3, [r3, #4]
 810725e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8107262:	2b00      	cmp	r3, #0
 8107264:	d003      	beq.n	810726e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8107266:	69ba      	ldr	r2, [r7, #24]
 8107268:	693b      	ldr	r3, [r7, #16]
 810726a:	4313      	orrs	r3, r2
 810726c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 810726e:	697b      	ldr	r3, [r7, #20]
 8107270:	69ba      	ldr	r2, [r7, #24]
 8107272:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8107274:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8107278:	681b      	ldr	r3, [r3, #0]
 810727a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 810727c:	693b      	ldr	r3, [r7, #16]
 810727e:	43db      	mvns	r3, r3
 8107280:	69ba      	ldr	r2, [r7, #24]
 8107282:	4013      	ands	r3, r2
 8107284:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8107286:	683b      	ldr	r3, [r7, #0]
 8107288:	685b      	ldr	r3, [r3, #4]
 810728a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 810728e:	2b00      	cmp	r3, #0
 8107290:	d003      	beq.n	810729a <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8107292:	69ba      	ldr	r2, [r7, #24]
 8107294:	693b      	ldr	r3, [r7, #16]
 8107296:	4313      	orrs	r3, r2
 8107298:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 810729a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 810729e:	69bb      	ldr	r3, [r7, #24]
 81072a0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 81072a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 81072a6:	685b      	ldr	r3, [r3, #4]
 81072a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 81072aa:	693b      	ldr	r3, [r7, #16]
 81072ac:	43db      	mvns	r3, r3
 81072ae:	69ba      	ldr	r2, [r7, #24]
 81072b0:	4013      	ands	r3, r2
 81072b2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 81072b4:	683b      	ldr	r3, [r7, #0]
 81072b6:	685b      	ldr	r3, [r3, #4]
 81072b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 81072bc:	2b00      	cmp	r3, #0
 81072be:	d003      	beq.n	81072c8 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 81072c0:	69ba      	ldr	r2, [r7, #24]
 81072c2:	693b      	ldr	r3, [r7, #16]
 81072c4:	4313      	orrs	r3, r2
 81072c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 81072c8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 81072cc:	69bb      	ldr	r3, [r7, #24]
 81072ce:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 81072d0:	69fb      	ldr	r3, [r7, #28]
 81072d2:	3301      	adds	r3, #1
 81072d4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 81072d6:	683b      	ldr	r3, [r7, #0]
 81072d8:	681a      	ldr	r2, [r3, #0]
 81072da:	69fb      	ldr	r3, [r7, #28]
 81072dc:	fa22 f303 	lsr.w	r3, r2, r3
 81072e0:	2b00      	cmp	r3, #0
 81072e2:	f47f ae63 	bne.w	8106fac <HAL_GPIO_Init+0x14>
  }
}
 81072e6:	bf00      	nop
 81072e8:	bf00      	nop
 81072ea:	3724      	adds	r7, #36	; 0x24
 81072ec:	46bd      	mov	sp, r7
 81072ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 81072f2:	4770      	bx	lr
 81072f4:	58000400 	.word	0x58000400

081072f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 81072f8:	b480      	push	{r7}
 81072fa:	b083      	sub	sp, #12
 81072fc:	af00      	add	r7, sp, #0
 81072fe:	6078      	str	r0, [r7, #4]
 8107300:	460b      	mov	r3, r1
 8107302:	807b      	strh	r3, [r7, #2]
 8107304:	4613      	mov	r3, r2
 8107306:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8107308:	787b      	ldrb	r3, [r7, #1]
 810730a:	2b00      	cmp	r3, #0
 810730c:	d003      	beq.n	8107316 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 810730e:	887a      	ldrh	r2, [r7, #2]
 8107310:	687b      	ldr	r3, [r7, #4]
 8107312:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8107314:	e003      	b.n	810731e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8107316:	887b      	ldrh	r3, [r7, #2]
 8107318:	041a      	lsls	r2, r3, #16
 810731a:	687b      	ldr	r3, [r7, #4]
 810731c:	619a      	str	r2, [r3, #24]
}
 810731e:	bf00      	nop
 8107320:	370c      	adds	r7, #12
 8107322:	46bd      	mov	sp, r7
 8107324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107328:	4770      	bx	lr

0810732a <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 810732a:	b580      	push	{r7, lr}
 810732c:	b082      	sub	sp, #8
 810732e:	af00      	add	r7, sp, #0
 8107330:	4603      	mov	r3, r0
 8107332:	80fb      	strh	r3, [r7, #6]
#if defined(DUAL_CORE) && defined(CORE_CM4)
  if (__HAL_GPIO_EXTID2_GET_IT(GPIO_Pin) != 0x00U)
 8107334:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8107338:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 810733c:	88fb      	ldrh	r3, [r7, #6]
 810733e:	4013      	ands	r3, r2
 8107340:	2b00      	cmp	r3, #0
 8107342:	d008      	beq.n	8107356 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
 8107344:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8107348:	88fb      	ldrh	r3, [r7, #6]
 810734a:	f8c2 30c8 	str.w	r3, [r2, #200]	; 0xc8
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 810734e:	88fb      	ldrh	r3, [r7, #6]
 8107350:	4618      	mov	r0, r3
 8107352:	f000 f804 	bl	810735e <HAL_GPIO_EXTI_Callback>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#endif
}
 8107356:	bf00      	nop
 8107358:	3708      	adds	r7, #8
 810735a:	46bd      	mov	sp, r7
 810735c:	bd80      	pop	{r7, pc}

0810735e <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 810735e:	b480      	push	{r7}
 8107360:	b083      	sub	sp, #12
 8107362:	af00      	add	r7, sp, #0
 8107364:	4603      	mov	r3, r0
 8107366:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8107368:	bf00      	nop
 810736a:	370c      	adds	r7, #12
 810736c:	46bd      	mov	sp, r7
 810736e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107372:	4770      	bx	lr

08107374 <HAL_HSEM_ActivateNotification>:
  * @brief  Activate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_ActivateNotification(uint32_t SemMask)
{
 8107374:	b480      	push	{r7}
 8107376:	b083      	sub	sp, #12
 8107378:	af00      	add	r7, sp, #0
 810737a:	6078      	str	r0, [r7, #4]
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
 810737c:	4b05      	ldr	r3, [pc, #20]	; (8107394 <HAL_HSEM_ActivateNotification+0x20>)
 810737e:	681a      	ldr	r2, [r3, #0]
 8107380:	4904      	ldr	r1, [pc, #16]	; (8107394 <HAL_HSEM_ActivateNotification+0x20>)
 8107382:	687b      	ldr	r3, [r7, #4]
 8107384:	4313      	orrs	r3, r2
 8107386:	600b      	str	r3, [r1, #0]
#endif
}
 8107388:	bf00      	nop
 810738a:	370c      	adds	r7, #12
 810738c:	46bd      	mov	sp, r7
 810738e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107392:	4770      	bx	lr
 8107394:	58026510 	.word	0x58026510

08107398 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 8107398:	b580      	push	{r7, lr}
 810739a:	b082      	sub	sp, #8
 810739c:	af00      	add	r7, sp, #0
    /*Clear Flags*/
    HSEM->C2ICR = ((uint32_t)statusreg);
  }
#else
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 810739e:	4b0a      	ldr	r3, [pc, #40]	; (81073c8 <HAL_HSEM_IRQHandler+0x30>)
 81073a0:	68db      	ldr	r3, [r3, #12]
 81073a2:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 81073a4:	4b08      	ldr	r3, [pc, #32]	; (81073c8 <HAL_HSEM_IRQHandler+0x30>)
 81073a6:	681a      	ldr	r2, [r3, #0]
 81073a8:	687b      	ldr	r3, [r7, #4]
 81073aa:	43db      	mvns	r3, r3
 81073ac:	4906      	ldr	r1, [pc, #24]	; (81073c8 <HAL_HSEM_IRQHandler+0x30>)
 81073ae:	4013      	ands	r3, r2
 81073b0:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 81073b2:	4a05      	ldr	r2, [pc, #20]	; (81073c8 <HAL_HSEM_IRQHandler+0x30>)
 81073b4:	687b      	ldr	r3, [r7, #4]
 81073b6:	6053      	str	r3, [r2, #4]

#endif
  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 81073b8:	6878      	ldr	r0, [r7, #4]
 81073ba:	f000 f807 	bl	81073cc <HAL_HSEM_FreeCallback>
}
 81073be:	bf00      	nop
 81073c0:	3708      	adds	r7, #8
 81073c2:	46bd      	mov	sp, r7
 81073c4:	bd80      	pop	{r7, pc}
 81073c6:	bf00      	nop
 81073c8:	58026510 	.word	0x58026510

081073cc <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 81073cc:	b480      	push	{r7}
 81073ce:	b083      	sub	sp, #12
 81073d0:	af00      	add	r7, sp, #0
 81073d2:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 81073d4:	bf00      	nop
 81073d6:	370c      	adds	r7, #12
 81073d8:	46bd      	mov	sp, r7
 81073da:	f85d 7b04 	ldr.w	r7, [sp], #4
 81073de:	4770      	bx	lr

081073e0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 81073e0:	b580      	push	{r7, lr}
 81073e2:	b082      	sub	sp, #8
 81073e4:	af00      	add	r7, sp, #0
 81073e6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 81073e8:	687b      	ldr	r3, [r7, #4]
 81073ea:	2b00      	cmp	r3, #0
 81073ec:	d101      	bne.n	81073f2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 81073ee:	2301      	movs	r3, #1
 81073f0:	e081      	b.n	81074f6 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 81073f2:	687b      	ldr	r3, [r7, #4]
 81073f4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 81073f8:	b2db      	uxtb	r3, r3
 81073fa:	2b00      	cmp	r3, #0
 81073fc:	d106      	bne.n	810740c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 81073fe:	687b      	ldr	r3, [r7, #4]
 8107400:	2200      	movs	r2, #0
 8107402:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8107406:	6878      	ldr	r0, [r7, #4]
 8107408:	f7fa f882 	bl	8101510 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 810740c:	687b      	ldr	r3, [r7, #4]
 810740e:	2224      	movs	r2, #36	; 0x24
 8107410:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8107414:	687b      	ldr	r3, [r7, #4]
 8107416:	681b      	ldr	r3, [r3, #0]
 8107418:	681a      	ldr	r2, [r3, #0]
 810741a:	687b      	ldr	r3, [r7, #4]
 810741c:	681b      	ldr	r3, [r3, #0]
 810741e:	f022 0201 	bic.w	r2, r2, #1
 8107422:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8107424:	687b      	ldr	r3, [r7, #4]
 8107426:	685a      	ldr	r2, [r3, #4]
 8107428:	687b      	ldr	r3, [r7, #4]
 810742a:	681b      	ldr	r3, [r3, #0]
 810742c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8107430:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8107432:	687b      	ldr	r3, [r7, #4]
 8107434:	681b      	ldr	r3, [r3, #0]
 8107436:	689a      	ldr	r2, [r3, #8]
 8107438:	687b      	ldr	r3, [r7, #4]
 810743a:	681b      	ldr	r3, [r3, #0]
 810743c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8107440:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8107442:	687b      	ldr	r3, [r7, #4]
 8107444:	68db      	ldr	r3, [r3, #12]
 8107446:	2b01      	cmp	r3, #1
 8107448:	d107      	bne.n	810745a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 810744a:	687b      	ldr	r3, [r7, #4]
 810744c:	689a      	ldr	r2, [r3, #8]
 810744e:	687b      	ldr	r3, [r7, #4]
 8107450:	681b      	ldr	r3, [r3, #0]
 8107452:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8107456:	609a      	str	r2, [r3, #8]
 8107458:	e006      	b.n	8107468 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 810745a:	687b      	ldr	r3, [r7, #4]
 810745c:	689a      	ldr	r2, [r3, #8]
 810745e:	687b      	ldr	r3, [r7, #4]
 8107460:	681b      	ldr	r3, [r3, #0]
 8107462:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8107466:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8107468:	687b      	ldr	r3, [r7, #4]
 810746a:	68db      	ldr	r3, [r3, #12]
 810746c:	2b02      	cmp	r3, #2
 810746e:	d104      	bne.n	810747a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8107470:	687b      	ldr	r3, [r7, #4]
 8107472:	681b      	ldr	r3, [r3, #0]
 8107474:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8107478:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 810747a:	687b      	ldr	r3, [r7, #4]
 810747c:	681b      	ldr	r3, [r3, #0]
 810747e:	685b      	ldr	r3, [r3, #4]
 8107480:	687a      	ldr	r2, [r7, #4]
 8107482:	6812      	ldr	r2, [r2, #0]
 8107484:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8107488:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 810748c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 810748e:	687b      	ldr	r3, [r7, #4]
 8107490:	681b      	ldr	r3, [r3, #0]
 8107492:	68da      	ldr	r2, [r3, #12]
 8107494:	687b      	ldr	r3, [r7, #4]
 8107496:	681b      	ldr	r3, [r3, #0]
 8107498:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 810749c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 810749e:	687b      	ldr	r3, [r7, #4]
 81074a0:	691a      	ldr	r2, [r3, #16]
 81074a2:	687b      	ldr	r3, [r7, #4]
 81074a4:	695b      	ldr	r3, [r3, #20]
 81074a6:	ea42 0103 	orr.w	r1, r2, r3
 81074aa:	687b      	ldr	r3, [r7, #4]
 81074ac:	699b      	ldr	r3, [r3, #24]
 81074ae:	021a      	lsls	r2, r3, #8
 81074b0:	687b      	ldr	r3, [r7, #4]
 81074b2:	681b      	ldr	r3, [r3, #0]
 81074b4:	430a      	orrs	r2, r1
 81074b6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 81074b8:	687b      	ldr	r3, [r7, #4]
 81074ba:	69d9      	ldr	r1, [r3, #28]
 81074bc:	687b      	ldr	r3, [r7, #4]
 81074be:	6a1a      	ldr	r2, [r3, #32]
 81074c0:	687b      	ldr	r3, [r7, #4]
 81074c2:	681b      	ldr	r3, [r3, #0]
 81074c4:	430a      	orrs	r2, r1
 81074c6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 81074c8:	687b      	ldr	r3, [r7, #4]
 81074ca:	681b      	ldr	r3, [r3, #0]
 81074cc:	681a      	ldr	r2, [r3, #0]
 81074ce:	687b      	ldr	r3, [r7, #4]
 81074d0:	681b      	ldr	r3, [r3, #0]
 81074d2:	f042 0201 	orr.w	r2, r2, #1
 81074d6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 81074d8:	687b      	ldr	r3, [r7, #4]
 81074da:	2200      	movs	r2, #0
 81074dc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 81074de:	687b      	ldr	r3, [r7, #4]
 81074e0:	2220      	movs	r2, #32
 81074e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 81074e6:	687b      	ldr	r3, [r7, #4]
 81074e8:	2200      	movs	r2, #0
 81074ea:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 81074ec:	687b      	ldr	r3, [r7, #4]
 81074ee:	2200      	movs	r2, #0
 81074f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 81074f4:	2300      	movs	r3, #0
}
 81074f6:	4618      	mov	r0, r3
 81074f8:	3708      	adds	r7, #8
 81074fa:	46bd      	mov	sp, r7
 81074fc:	bd80      	pop	{r7, pc}

081074fe <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 81074fe:	b580      	push	{r7, lr}
 8107500:	b084      	sub	sp, #16
 8107502:	af00      	add	r7, sp, #0
 8107504:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8107506:	687b      	ldr	r3, [r7, #4]
 8107508:	681b      	ldr	r3, [r3, #0]
 810750a:	699b      	ldr	r3, [r3, #24]
 810750c:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 810750e:	687b      	ldr	r3, [r7, #4]
 8107510:	681b      	ldr	r3, [r3, #0]
 8107512:	681b      	ldr	r3, [r3, #0]
 8107514:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8107516:	687b      	ldr	r3, [r7, #4]
 8107518:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 810751a:	2b00      	cmp	r3, #0
 810751c:	d005      	beq.n	810752a <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 810751e:	687b      	ldr	r3, [r7, #4]
 8107520:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8107522:	68ba      	ldr	r2, [r7, #8]
 8107524:	68f9      	ldr	r1, [r7, #12]
 8107526:	6878      	ldr	r0, [r7, #4]
 8107528:	4798      	blx	r3
  }
}
 810752a:	bf00      	nop
 810752c:	3710      	adds	r7, #16
 810752e:	46bd      	mov	sp, r7
 8107530:	bd80      	pop	{r7, pc}

08107532 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8107532:	b580      	push	{r7, lr}
 8107534:	b086      	sub	sp, #24
 8107536:	af00      	add	r7, sp, #0
 8107538:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 810753a:	687b      	ldr	r3, [r7, #4]
 810753c:	681b      	ldr	r3, [r3, #0]
 810753e:	699b      	ldr	r3, [r3, #24]
 8107540:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8107542:	687b      	ldr	r3, [r7, #4]
 8107544:	681b      	ldr	r3, [r3, #0]
 8107546:	681b      	ldr	r3, [r3, #0]
 8107548:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 810754a:	697b      	ldr	r3, [r7, #20]
 810754c:	0a1b      	lsrs	r3, r3, #8
 810754e:	f003 0301 	and.w	r3, r3, #1
 8107552:	2b00      	cmp	r3, #0
 8107554:	d010      	beq.n	8107578 <HAL_I2C_ER_IRQHandler+0x46>
 8107556:	693b      	ldr	r3, [r7, #16]
 8107558:	09db      	lsrs	r3, r3, #7
 810755a:	f003 0301 	and.w	r3, r3, #1
 810755e:	2b00      	cmp	r3, #0
 8107560:	d00a      	beq.n	8107578 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8107562:	687b      	ldr	r3, [r7, #4]
 8107564:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8107566:	f043 0201 	orr.w	r2, r3, #1
 810756a:	687b      	ldr	r3, [r7, #4]
 810756c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 810756e:	687b      	ldr	r3, [r7, #4]
 8107570:	681b      	ldr	r3, [r3, #0]
 8107572:	f44f 7280 	mov.w	r2, #256	; 0x100
 8107576:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8107578:	697b      	ldr	r3, [r7, #20]
 810757a:	0a9b      	lsrs	r3, r3, #10
 810757c:	f003 0301 	and.w	r3, r3, #1
 8107580:	2b00      	cmp	r3, #0
 8107582:	d010      	beq.n	81075a6 <HAL_I2C_ER_IRQHandler+0x74>
 8107584:	693b      	ldr	r3, [r7, #16]
 8107586:	09db      	lsrs	r3, r3, #7
 8107588:	f003 0301 	and.w	r3, r3, #1
 810758c:	2b00      	cmp	r3, #0
 810758e:	d00a      	beq.n	81075a6 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8107590:	687b      	ldr	r3, [r7, #4]
 8107592:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8107594:	f043 0208 	orr.w	r2, r3, #8
 8107598:	687b      	ldr	r3, [r7, #4]
 810759a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 810759c:	687b      	ldr	r3, [r7, #4]
 810759e:	681b      	ldr	r3, [r3, #0]
 81075a0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 81075a4:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 81075a6:	697b      	ldr	r3, [r7, #20]
 81075a8:	0a5b      	lsrs	r3, r3, #9
 81075aa:	f003 0301 	and.w	r3, r3, #1
 81075ae:	2b00      	cmp	r3, #0
 81075b0:	d010      	beq.n	81075d4 <HAL_I2C_ER_IRQHandler+0xa2>
 81075b2:	693b      	ldr	r3, [r7, #16]
 81075b4:	09db      	lsrs	r3, r3, #7
 81075b6:	f003 0301 	and.w	r3, r3, #1
 81075ba:	2b00      	cmp	r3, #0
 81075bc:	d00a      	beq.n	81075d4 <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 81075be:	687b      	ldr	r3, [r7, #4]
 81075c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 81075c2:	f043 0202 	orr.w	r2, r3, #2
 81075c6:	687b      	ldr	r3, [r7, #4]
 81075c8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 81075ca:	687b      	ldr	r3, [r7, #4]
 81075cc:	681b      	ldr	r3, [r3, #0]
 81075ce:	f44f 7200 	mov.w	r2, #512	; 0x200
 81075d2:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 81075d4:	687b      	ldr	r3, [r7, #4]
 81075d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 81075d8:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 81075da:	68fb      	ldr	r3, [r7, #12]
 81075dc:	f003 030b 	and.w	r3, r3, #11
 81075e0:	2b00      	cmp	r3, #0
 81075e2:	d003      	beq.n	81075ec <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 81075e4:	68f9      	ldr	r1, [r7, #12]
 81075e6:	6878      	ldr	r0, [r7, #4]
 81075e8:	f000 fc78 	bl	8107edc <I2C_ITError>
  }
}
 81075ec:	bf00      	nop
 81075ee:	3718      	adds	r7, #24
 81075f0:	46bd      	mov	sp, r7
 81075f2:	bd80      	pop	{r7, pc}

081075f4 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 81075f4:	b480      	push	{r7}
 81075f6:	b083      	sub	sp, #12
 81075f8:	af00      	add	r7, sp, #0
 81075fa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 81075fc:	bf00      	nop
 81075fe:	370c      	adds	r7, #12
 8107600:	46bd      	mov	sp, r7
 8107602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107606:	4770      	bx	lr

08107608 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8107608:	b480      	push	{r7}
 810760a:	b083      	sub	sp, #12
 810760c:	af00      	add	r7, sp, #0
 810760e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8107610:	bf00      	nop
 8107612:	370c      	adds	r7, #12
 8107614:	46bd      	mov	sp, r7
 8107616:	f85d 7b04 	ldr.w	r7, [sp], #4
 810761a:	4770      	bx	lr

0810761c <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 810761c:	b480      	push	{r7}
 810761e:	b083      	sub	sp, #12
 8107620:	af00      	add	r7, sp, #0
 8107622:	6078      	str	r0, [r7, #4]
 8107624:	460b      	mov	r3, r1
 8107626:	70fb      	strb	r3, [r7, #3]
 8107628:	4613      	mov	r3, r2
 810762a:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 810762c:	bf00      	nop
 810762e:	370c      	adds	r7, #12
 8107630:	46bd      	mov	sp, r7
 8107632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107636:	4770      	bx	lr

08107638 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8107638:	b480      	push	{r7}
 810763a:	b083      	sub	sp, #12
 810763c:	af00      	add	r7, sp, #0
 810763e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8107640:	bf00      	nop
 8107642:	370c      	adds	r7, #12
 8107644:	46bd      	mov	sp, r7
 8107646:	f85d 7b04 	ldr.w	r7, [sp], #4
 810764a:	4770      	bx	lr

0810764c <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 810764c:	b480      	push	{r7}
 810764e:	b083      	sub	sp, #12
 8107650:	af00      	add	r7, sp, #0
 8107652:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8107654:	bf00      	nop
 8107656:	370c      	adds	r7, #12
 8107658:	46bd      	mov	sp, r7
 810765a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810765e:	4770      	bx	lr

08107660 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8107660:	b480      	push	{r7}
 8107662:	b083      	sub	sp, #12
 8107664:	af00      	add	r7, sp, #0
 8107666:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8107668:	bf00      	nop
 810766a:	370c      	adds	r7, #12
 810766c:	46bd      	mov	sp, r7
 810766e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107672:	4770      	bx	lr

08107674 <I2C_Slave_ISR_IT>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 8107674:	b580      	push	{r7, lr}
 8107676:	b086      	sub	sp, #24
 8107678:	af00      	add	r7, sp, #0
 810767a:	60f8      	str	r0, [r7, #12]
 810767c:	60b9      	str	r1, [r7, #8]
 810767e:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8107680:	68fb      	ldr	r3, [r7, #12]
 8107682:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8107684:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8107686:	68bb      	ldr	r3, [r7, #8]
 8107688:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 810768a:	68fb      	ldr	r3, [r7, #12]
 810768c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8107690:	2b01      	cmp	r3, #1
 8107692:	d101      	bne.n	8107698 <I2C_Slave_ISR_IT+0x24>
 8107694:	2302      	movs	r3, #2
 8107696:	e0ec      	b.n	8107872 <I2C_Slave_ISR_IT+0x1fe>
 8107698:	68fb      	ldr	r3, [r7, #12]
 810769a:	2201      	movs	r2, #1
 810769c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 81076a0:	693b      	ldr	r3, [r7, #16]
 81076a2:	095b      	lsrs	r3, r3, #5
 81076a4:	f003 0301 	and.w	r3, r3, #1
 81076a8:	2b00      	cmp	r3, #0
 81076aa:	d009      	beq.n	81076c0 <I2C_Slave_ISR_IT+0x4c>
 81076ac:	687b      	ldr	r3, [r7, #4]
 81076ae:	095b      	lsrs	r3, r3, #5
 81076b0:	f003 0301 	and.w	r3, r3, #1
 81076b4:	2b00      	cmp	r3, #0
 81076b6:	d003      	beq.n	81076c0 <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 81076b8:	6939      	ldr	r1, [r7, #16]
 81076ba:	68f8      	ldr	r0, [r7, #12]
 81076bc:	f000 f9c0 	bl	8107a40 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 81076c0:	693b      	ldr	r3, [r7, #16]
 81076c2:	091b      	lsrs	r3, r3, #4
 81076c4:	f003 0301 	and.w	r3, r3, #1
 81076c8:	2b00      	cmp	r3, #0
 81076ca:	d04d      	beq.n	8107768 <I2C_Slave_ISR_IT+0xf4>
 81076cc:	687b      	ldr	r3, [r7, #4]
 81076ce:	091b      	lsrs	r3, r3, #4
 81076d0:	f003 0301 	and.w	r3, r3, #1
 81076d4:	2b00      	cmp	r3, #0
 81076d6:	d047      	beq.n	8107768 <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 81076d8:	68fb      	ldr	r3, [r7, #12]
 81076da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 81076dc:	b29b      	uxth	r3, r3
 81076de:	2b00      	cmp	r3, #0
 81076e0:	d128      	bne.n	8107734 <I2C_Slave_ISR_IT+0xc0>
    {
      /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 81076e2:	68fb      	ldr	r3, [r7, #12]
 81076e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 81076e8:	b2db      	uxtb	r3, r3
 81076ea:	2b28      	cmp	r3, #40	; 0x28
 81076ec:	d108      	bne.n	8107700 <I2C_Slave_ISR_IT+0x8c>
 81076ee:	697b      	ldr	r3, [r7, #20]
 81076f0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 81076f4:	d104      	bne.n	8107700 <I2C_Slave_ISR_IT+0x8c>
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 81076f6:	6939      	ldr	r1, [r7, #16]
 81076f8:	68f8      	ldr	r0, [r7, #12]
 81076fa:	f000 fb99 	bl	8107e30 <I2C_ITListenCplt>
 81076fe:	e032      	b.n	8107766 <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8107700:	68fb      	ldr	r3, [r7, #12]
 8107702:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8107706:	b2db      	uxtb	r3, r3
 8107708:	2b29      	cmp	r3, #41	; 0x29
 810770a:	d10e      	bne.n	810772a <I2C_Slave_ISR_IT+0xb6>
 810770c:	697b      	ldr	r3, [r7, #20]
 810770e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8107712:	d00a      	beq.n	810772a <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8107714:	68fb      	ldr	r3, [r7, #12]
 8107716:	681b      	ldr	r3, [r3, #0]
 8107718:	2210      	movs	r2, #16
 810771a:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 810771c:	68f8      	ldr	r0, [r7, #12]
 810771e:	f000 fcd4 	bl	81080ca <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8107722:	68f8      	ldr	r0, [r7, #12]
 8107724:	f000 f92d 	bl	8107982 <I2C_ITSlaveSeqCplt>
 8107728:	e01d      	b.n	8107766 <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 810772a:	68fb      	ldr	r3, [r7, #12]
 810772c:	681b      	ldr	r3, [r3, #0]
 810772e:	2210      	movs	r2, #16
 8107730:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8107732:	e096      	b.n	8107862 <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8107734:	68fb      	ldr	r3, [r7, #12]
 8107736:	681b      	ldr	r3, [r3, #0]
 8107738:	2210      	movs	r2, #16
 810773a:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 810773c:	68fb      	ldr	r3, [r7, #12]
 810773e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8107740:	f043 0204 	orr.w	r2, r3, #4
 8107744:	68fb      	ldr	r3, [r7, #12]
 8107746:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8107748:	697b      	ldr	r3, [r7, #20]
 810774a:	2b00      	cmp	r3, #0
 810774c:	d004      	beq.n	8107758 <I2C_Slave_ISR_IT+0xe4>
 810774e:	697b      	ldr	r3, [r7, #20]
 8107750:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8107754:	f040 8085 	bne.w	8107862 <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8107758:	68fb      	ldr	r3, [r7, #12]
 810775a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 810775c:	4619      	mov	r1, r3
 810775e:	68f8      	ldr	r0, [r7, #12]
 8107760:	f000 fbbc 	bl	8107edc <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8107764:	e07d      	b.n	8107862 <I2C_Slave_ISR_IT+0x1ee>
 8107766:	e07c      	b.n	8107862 <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8107768:	693b      	ldr	r3, [r7, #16]
 810776a:	089b      	lsrs	r3, r3, #2
 810776c:	f003 0301 	and.w	r3, r3, #1
 8107770:	2b00      	cmp	r3, #0
 8107772:	d030      	beq.n	81077d6 <I2C_Slave_ISR_IT+0x162>
 8107774:	687b      	ldr	r3, [r7, #4]
 8107776:	089b      	lsrs	r3, r3, #2
 8107778:	f003 0301 	and.w	r3, r3, #1
 810777c:	2b00      	cmp	r3, #0
 810777e:	d02a      	beq.n	81077d6 <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 8107780:	68fb      	ldr	r3, [r7, #12]
 8107782:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8107784:	b29b      	uxth	r3, r3
 8107786:	2b00      	cmp	r3, #0
 8107788:	d018      	beq.n	81077bc <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 810778a:	68fb      	ldr	r3, [r7, #12]
 810778c:	681b      	ldr	r3, [r3, #0]
 810778e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8107790:	68fb      	ldr	r3, [r7, #12]
 8107792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8107794:	b2d2      	uxtb	r2, r2
 8107796:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8107798:	68fb      	ldr	r3, [r7, #12]
 810779a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810779c:	1c5a      	adds	r2, r3, #1
 810779e:	68fb      	ldr	r3, [r7, #12]
 81077a0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 81077a2:	68fb      	ldr	r3, [r7, #12]
 81077a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 81077a6:	3b01      	subs	r3, #1
 81077a8:	b29a      	uxth	r2, r3
 81077aa:	68fb      	ldr	r3, [r7, #12]
 81077ac:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 81077ae:	68fb      	ldr	r3, [r7, #12]
 81077b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 81077b2:	b29b      	uxth	r3, r3
 81077b4:	3b01      	subs	r3, #1
 81077b6:	b29a      	uxth	r2, r3
 81077b8:	68fb      	ldr	r3, [r7, #12]
 81077ba:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 81077bc:	68fb      	ldr	r3, [r7, #12]
 81077be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 81077c0:	b29b      	uxth	r3, r3
 81077c2:	2b00      	cmp	r3, #0
 81077c4:	d14f      	bne.n	8107866 <I2C_Slave_ISR_IT+0x1f2>
 81077c6:	697b      	ldr	r3, [r7, #20]
 81077c8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 81077cc:	d04b      	beq.n	8107866 <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 81077ce:	68f8      	ldr	r0, [r7, #12]
 81077d0:	f000 f8d7 	bl	8107982 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 81077d4:	e047      	b.n	8107866 <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 81077d6:	693b      	ldr	r3, [r7, #16]
 81077d8:	08db      	lsrs	r3, r3, #3
 81077da:	f003 0301 	and.w	r3, r3, #1
 81077de:	2b00      	cmp	r3, #0
 81077e0:	d00a      	beq.n	81077f8 <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 81077e2:	687b      	ldr	r3, [r7, #4]
 81077e4:	08db      	lsrs	r3, r3, #3
 81077e6:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 81077ea:	2b00      	cmp	r3, #0
 81077ec:	d004      	beq.n	81077f8 <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 81077ee:	6939      	ldr	r1, [r7, #16]
 81077f0:	68f8      	ldr	r0, [r7, #12]
 81077f2:	f000 f842 	bl	810787a <I2C_ITAddrCplt>
 81077f6:	e037      	b.n	8107868 <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 81077f8:	693b      	ldr	r3, [r7, #16]
 81077fa:	085b      	lsrs	r3, r3, #1
 81077fc:	f003 0301 	and.w	r3, r3, #1
 8107800:	2b00      	cmp	r3, #0
 8107802:	d031      	beq.n	8107868 <I2C_Slave_ISR_IT+0x1f4>
 8107804:	687b      	ldr	r3, [r7, #4]
 8107806:	085b      	lsrs	r3, r3, #1
 8107808:	f003 0301 	and.w	r3, r3, #1
 810780c:	2b00      	cmp	r3, #0
 810780e:	d02b      	beq.n	8107868 <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8107810:	68fb      	ldr	r3, [r7, #12]
 8107812:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8107814:	b29b      	uxth	r3, r3
 8107816:	2b00      	cmp	r3, #0
 8107818:	d018      	beq.n	810784c <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 810781a:	68fb      	ldr	r3, [r7, #12]
 810781c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810781e:	781a      	ldrb	r2, [r3, #0]
 8107820:	68fb      	ldr	r3, [r7, #12]
 8107822:	681b      	ldr	r3, [r3, #0]
 8107824:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8107826:	68fb      	ldr	r3, [r7, #12]
 8107828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810782a:	1c5a      	adds	r2, r3, #1
 810782c:	68fb      	ldr	r3, [r7, #12]
 810782e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8107830:	68fb      	ldr	r3, [r7, #12]
 8107832:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8107834:	b29b      	uxth	r3, r3
 8107836:	3b01      	subs	r3, #1
 8107838:	b29a      	uxth	r2, r3
 810783a:	68fb      	ldr	r3, [r7, #12]
 810783c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 810783e:	68fb      	ldr	r3, [r7, #12]
 8107840:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8107842:	3b01      	subs	r3, #1
 8107844:	b29a      	uxth	r2, r3
 8107846:	68fb      	ldr	r3, [r7, #12]
 8107848:	851a      	strh	r2, [r3, #40]	; 0x28
 810784a:	e00d      	b.n	8107868 <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 810784c:	697b      	ldr	r3, [r7, #20]
 810784e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8107852:	d002      	beq.n	810785a <I2C_Slave_ISR_IT+0x1e6>
 8107854:	697b      	ldr	r3, [r7, #20]
 8107856:	2b00      	cmp	r3, #0
 8107858:	d106      	bne.n	8107868 <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 810785a:	68f8      	ldr	r0, [r7, #12]
 810785c:	f000 f891 	bl	8107982 <I2C_ITSlaveSeqCplt>
 8107860:	e002      	b.n	8107868 <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 8107862:	bf00      	nop
 8107864:	e000      	b.n	8107868 <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 8107866:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8107868:	68fb      	ldr	r3, [r7, #12]
 810786a:	2200      	movs	r2, #0
 810786c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8107870:	2300      	movs	r3, #0
}
 8107872:	4618      	mov	r0, r3
 8107874:	3718      	adds	r7, #24
 8107876:	46bd      	mov	sp, r7
 8107878:	bd80      	pop	{r7, pc}

0810787a <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 810787a:	b580      	push	{r7, lr}
 810787c:	b084      	sub	sp, #16
 810787e:	af00      	add	r7, sp, #0
 8107880:	6078      	str	r0, [r7, #4]
 8107882:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8107884:	687b      	ldr	r3, [r7, #4]
 8107886:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 810788a:	b2db      	uxtb	r3, r3
 810788c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8107890:	2b28      	cmp	r3, #40	; 0x28
 8107892:	d16a      	bne.n	810796a <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8107894:	687b      	ldr	r3, [r7, #4]
 8107896:	681b      	ldr	r3, [r3, #0]
 8107898:	699b      	ldr	r3, [r3, #24]
 810789a:	0c1b      	lsrs	r3, r3, #16
 810789c:	b2db      	uxtb	r3, r3
 810789e:	f003 0301 	and.w	r3, r3, #1
 81078a2:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 81078a4:	687b      	ldr	r3, [r7, #4]
 81078a6:	681b      	ldr	r3, [r3, #0]
 81078a8:	699b      	ldr	r3, [r3, #24]
 81078aa:	0c1b      	lsrs	r3, r3, #16
 81078ac:	b29b      	uxth	r3, r3
 81078ae:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 81078b2:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 81078b4:	687b      	ldr	r3, [r7, #4]
 81078b6:	681b      	ldr	r3, [r3, #0]
 81078b8:	689b      	ldr	r3, [r3, #8]
 81078ba:	b29b      	uxth	r3, r3
 81078bc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 81078c0:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 81078c2:	687b      	ldr	r3, [r7, #4]
 81078c4:	681b      	ldr	r3, [r3, #0]
 81078c6:	68db      	ldr	r3, [r3, #12]
 81078c8:	b29b      	uxth	r3, r3
 81078ca:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 81078ce:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 81078d0:	687b      	ldr	r3, [r7, #4]
 81078d2:	68db      	ldr	r3, [r3, #12]
 81078d4:	2b02      	cmp	r3, #2
 81078d6:	d138      	bne.n	810794a <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 81078d8:	897b      	ldrh	r3, [r7, #10]
 81078da:	09db      	lsrs	r3, r3, #7
 81078dc:	b29a      	uxth	r2, r3
 81078de:	89bb      	ldrh	r3, [r7, #12]
 81078e0:	4053      	eors	r3, r2
 81078e2:	b29b      	uxth	r3, r3
 81078e4:	f003 0306 	and.w	r3, r3, #6
 81078e8:	2b00      	cmp	r3, #0
 81078ea:	d11c      	bne.n	8107926 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 81078ec:	897b      	ldrh	r3, [r7, #10]
 81078ee:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 81078f0:	687b      	ldr	r3, [r7, #4]
 81078f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 81078f4:	1c5a      	adds	r2, r3, #1
 81078f6:	687b      	ldr	r3, [r7, #4]
 81078f8:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 81078fa:	687b      	ldr	r3, [r7, #4]
 81078fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 81078fe:	2b02      	cmp	r3, #2
 8107900:	d13b      	bne.n	810797a <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8107902:	687b      	ldr	r3, [r7, #4]
 8107904:	2200      	movs	r2, #0
 8107906:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8107908:	687b      	ldr	r3, [r7, #4]
 810790a:	681b      	ldr	r3, [r3, #0]
 810790c:	2208      	movs	r2, #8
 810790e:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8107910:	687b      	ldr	r3, [r7, #4]
 8107912:	2200      	movs	r2, #0
 8107914:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8107918:	89ba      	ldrh	r2, [r7, #12]
 810791a:	7bfb      	ldrb	r3, [r7, #15]
 810791c:	4619      	mov	r1, r3
 810791e:	6878      	ldr	r0, [r7, #4]
 8107920:	f7ff fe7c 	bl	810761c <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8107924:	e029      	b.n	810797a <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8107926:	893b      	ldrh	r3, [r7, #8]
 8107928:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 810792a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 810792e:	6878      	ldr	r0, [r7, #4]
 8107930:	f000 fc0d 	bl	810814e <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8107934:	687b      	ldr	r3, [r7, #4]
 8107936:	2200      	movs	r2, #0
 8107938:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 810793c:	89ba      	ldrh	r2, [r7, #12]
 810793e:	7bfb      	ldrb	r3, [r7, #15]
 8107940:	4619      	mov	r1, r3
 8107942:	6878      	ldr	r0, [r7, #4]
 8107944:	f7ff fe6a 	bl	810761c <HAL_I2C_AddrCallback>
}
 8107948:	e017      	b.n	810797a <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 810794a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 810794e:	6878      	ldr	r0, [r7, #4]
 8107950:	f000 fbfd 	bl	810814e <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8107954:	687b      	ldr	r3, [r7, #4]
 8107956:	2200      	movs	r2, #0
 8107958:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 810795c:	89ba      	ldrh	r2, [r7, #12]
 810795e:	7bfb      	ldrb	r3, [r7, #15]
 8107960:	4619      	mov	r1, r3
 8107962:	6878      	ldr	r0, [r7, #4]
 8107964:	f7ff fe5a 	bl	810761c <HAL_I2C_AddrCallback>
}
 8107968:	e007      	b.n	810797a <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 810796a:	687b      	ldr	r3, [r7, #4]
 810796c:	681b      	ldr	r3, [r3, #0]
 810796e:	2208      	movs	r2, #8
 8107970:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8107972:	687b      	ldr	r3, [r7, #4]
 8107974:	2200      	movs	r2, #0
 8107976:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 810797a:	bf00      	nop
 810797c:	3710      	adds	r7, #16
 810797e:	46bd      	mov	sp, r7
 8107980:	bd80      	pop	{r7, pc}

08107982 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8107982:	b580      	push	{r7, lr}
 8107984:	b084      	sub	sp, #16
 8107986:	af00      	add	r7, sp, #0
 8107988:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 810798a:	687b      	ldr	r3, [r7, #4]
 810798c:	681b      	ldr	r3, [r3, #0]
 810798e:	681b      	ldr	r3, [r3, #0]
 8107990:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8107992:	687b      	ldr	r3, [r7, #4]
 8107994:	2200      	movs	r2, #0
 8107996:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 810799a:	68fb      	ldr	r3, [r7, #12]
 810799c:	0b9b      	lsrs	r3, r3, #14
 810799e:	f003 0301 	and.w	r3, r3, #1
 81079a2:	2b00      	cmp	r3, #0
 81079a4:	d008      	beq.n	81079b8 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 81079a6:	687b      	ldr	r3, [r7, #4]
 81079a8:	681b      	ldr	r3, [r3, #0]
 81079aa:	681a      	ldr	r2, [r3, #0]
 81079ac:	687b      	ldr	r3, [r7, #4]
 81079ae:	681b      	ldr	r3, [r3, #0]
 81079b0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 81079b4:	601a      	str	r2, [r3, #0]
 81079b6:	e00d      	b.n	81079d4 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 81079b8:	68fb      	ldr	r3, [r7, #12]
 81079ba:	0bdb      	lsrs	r3, r3, #15
 81079bc:	f003 0301 	and.w	r3, r3, #1
 81079c0:	2b00      	cmp	r3, #0
 81079c2:	d007      	beq.n	81079d4 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 81079c4:	687b      	ldr	r3, [r7, #4]
 81079c6:	681b      	ldr	r3, [r3, #0]
 81079c8:	681a      	ldr	r2, [r3, #0]
 81079ca:	687b      	ldr	r3, [r7, #4]
 81079cc:	681b      	ldr	r3, [r3, #0]
 81079ce:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 81079d2:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 81079d4:	687b      	ldr	r3, [r7, #4]
 81079d6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 81079da:	b2db      	uxtb	r3, r3
 81079dc:	2b29      	cmp	r3, #41	; 0x29
 81079de:	d112      	bne.n	8107a06 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 81079e0:	687b      	ldr	r3, [r7, #4]
 81079e2:	2228      	movs	r2, #40	; 0x28
 81079e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 81079e8:	687b      	ldr	r3, [r7, #4]
 81079ea:	2221      	movs	r2, #33	; 0x21
 81079ec:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 81079ee:	2101      	movs	r1, #1
 81079f0:	6878      	ldr	r0, [r7, #4]
 81079f2:	f000 fbac 	bl	810814e <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 81079f6:	687b      	ldr	r3, [r7, #4]
 81079f8:	2200      	movs	r2, #0
 81079fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 81079fe:	6878      	ldr	r0, [r7, #4]
 8107a00:	f7ff fdf8 	bl	81075f4 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8107a04:	e017      	b.n	8107a36 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8107a06:	687b      	ldr	r3, [r7, #4]
 8107a08:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8107a0c:	b2db      	uxtb	r3, r3
 8107a0e:	2b2a      	cmp	r3, #42	; 0x2a
 8107a10:	d111      	bne.n	8107a36 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8107a12:	687b      	ldr	r3, [r7, #4]
 8107a14:	2228      	movs	r2, #40	; 0x28
 8107a16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8107a1a:	687b      	ldr	r3, [r7, #4]
 8107a1c:	2222      	movs	r2, #34	; 0x22
 8107a1e:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8107a20:	2102      	movs	r1, #2
 8107a22:	6878      	ldr	r0, [r7, #4]
 8107a24:	f000 fb93 	bl	810814e <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8107a28:	687b      	ldr	r3, [r7, #4]
 8107a2a:	2200      	movs	r2, #0
 8107a2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8107a30:	6878      	ldr	r0, [r7, #4]
 8107a32:	f7ff fde9 	bl	8107608 <HAL_I2C_SlaveRxCpltCallback>
}
 8107a36:	bf00      	nop
 8107a38:	3710      	adds	r7, #16
 8107a3a:	46bd      	mov	sp, r7
 8107a3c:	bd80      	pop	{r7, pc}
	...

08107a40 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8107a40:	b580      	push	{r7, lr}
 8107a42:	b086      	sub	sp, #24
 8107a44:	af00      	add	r7, sp, #0
 8107a46:	6078      	str	r0, [r7, #4]
 8107a48:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8107a4a:	687b      	ldr	r3, [r7, #4]
 8107a4c:	681b      	ldr	r3, [r3, #0]
 8107a4e:	681b      	ldr	r3, [r3, #0]
 8107a50:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8107a52:	683b      	ldr	r3, [r7, #0]
 8107a54:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8107a56:	687b      	ldr	r3, [r7, #4]
 8107a58:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8107a5c:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8107a5e:	687b      	ldr	r3, [r7, #4]
 8107a60:	681b      	ldr	r3, [r3, #0]
 8107a62:	2220      	movs	r2, #32
 8107a64:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8107a66:	7bfb      	ldrb	r3, [r7, #15]
 8107a68:	2b21      	cmp	r3, #33	; 0x21
 8107a6a:	d002      	beq.n	8107a72 <I2C_ITSlaveCplt+0x32>
 8107a6c:	7bfb      	ldrb	r3, [r7, #15]
 8107a6e:	2b29      	cmp	r3, #41	; 0x29
 8107a70:	d108      	bne.n	8107a84 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8107a72:	f248 0101 	movw	r1, #32769	; 0x8001
 8107a76:	6878      	ldr	r0, [r7, #4]
 8107a78:	f000 fb69 	bl	810814e <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8107a7c:	687b      	ldr	r3, [r7, #4]
 8107a7e:	2221      	movs	r2, #33	; 0x21
 8107a80:	631a      	str	r2, [r3, #48]	; 0x30
 8107a82:	e00d      	b.n	8107aa0 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8107a84:	7bfb      	ldrb	r3, [r7, #15]
 8107a86:	2b22      	cmp	r3, #34	; 0x22
 8107a88:	d002      	beq.n	8107a90 <I2C_ITSlaveCplt+0x50>
 8107a8a:	7bfb      	ldrb	r3, [r7, #15]
 8107a8c:	2b2a      	cmp	r3, #42	; 0x2a
 8107a8e:	d107      	bne.n	8107aa0 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8107a90:	f248 0102 	movw	r1, #32770	; 0x8002
 8107a94:	6878      	ldr	r0, [r7, #4]
 8107a96:	f000 fb5a 	bl	810814e <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8107a9a:	687b      	ldr	r3, [r7, #4]
 8107a9c:	2222      	movs	r2, #34	; 0x22
 8107a9e:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8107aa0:	687b      	ldr	r3, [r7, #4]
 8107aa2:	681b      	ldr	r3, [r3, #0]
 8107aa4:	685a      	ldr	r2, [r3, #4]
 8107aa6:	687b      	ldr	r3, [r7, #4]
 8107aa8:	681b      	ldr	r3, [r3, #0]
 8107aaa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8107aae:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8107ab0:	687b      	ldr	r3, [r7, #4]
 8107ab2:	681b      	ldr	r3, [r3, #0]
 8107ab4:	6859      	ldr	r1, [r3, #4]
 8107ab6:	687b      	ldr	r3, [r7, #4]
 8107ab8:	681a      	ldr	r2, [r3, #0]
 8107aba:	4b80      	ldr	r3, [pc, #512]	; (8107cbc <I2C_ITSlaveCplt+0x27c>)
 8107abc:	400b      	ands	r3, r1
 8107abe:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8107ac0:	6878      	ldr	r0, [r7, #4]
 8107ac2:	f000 fb02 	bl	81080ca <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8107ac6:	693b      	ldr	r3, [r7, #16]
 8107ac8:	0b9b      	lsrs	r3, r3, #14
 8107aca:	f003 0301 	and.w	r3, r3, #1
 8107ace:	2b00      	cmp	r3, #0
 8107ad0:	d07a      	beq.n	8107bc8 <I2C_ITSlaveCplt+0x188>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8107ad2:	687b      	ldr	r3, [r7, #4]
 8107ad4:	681b      	ldr	r3, [r3, #0]
 8107ad6:	681a      	ldr	r2, [r3, #0]
 8107ad8:	687b      	ldr	r3, [r7, #4]
 8107ada:	681b      	ldr	r3, [r3, #0]
 8107adc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8107ae0:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8107ae2:	687b      	ldr	r3, [r7, #4]
 8107ae4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8107ae6:	2b00      	cmp	r3, #0
 8107ae8:	f000 8111 	beq.w	8107d0e <I2C_ITSlaveCplt+0x2ce>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 8107aec:	687b      	ldr	r3, [r7, #4]
 8107aee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8107af0:	681b      	ldr	r3, [r3, #0]
 8107af2:	4a73      	ldr	r2, [pc, #460]	; (8107cc0 <I2C_ITSlaveCplt+0x280>)
 8107af4:	4293      	cmp	r3, r2
 8107af6:	d059      	beq.n	8107bac <I2C_ITSlaveCplt+0x16c>
 8107af8:	687b      	ldr	r3, [r7, #4]
 8107afa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8107afc:	681b      	ldr	r3, [r3, #0]
 8107afe:	4a71      	ldr	r2, [pc, #452]	; (8107cc4 <I2C_ITSlaveCplt+0x284>)
 8107b00:	4293      	cmp	r3, r2
 8107b02:	d053      	beq.n	8107bac <I2C_ITSlaveCplt+0x16c>
 8107b04:	687b      	ldr	r3, [r7, #4]
 8107b06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8107b08:	681b      	ldr	r3, [r3, #0]
 8107b0a:	4a6f      	ldr	r2, [pc, #444]	; (8107cc8 <I2C_ITSlaveCplt+0x288>)
 8107b0c:	4293      	cmp	r3, r2
 8107b0e:	d04d      	beq.n	8107bac <I2C_ITSlaveCplt+0x16c>
 8107b10:	687b      	ldr	r3, [r7, #4]
 8107b12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8107b14:	681b      	ldr	r3, [r3, #0]
 8107b16:	4a6d      	ldr	r2, [pc, #436]	; (8107ccc <I2C_ITSlaveCplt+0x28c>)
 8107b18:	4293      	cmp	r3, r2
 8107b1a:	d047      	beq.n	8107bac <I2C_ITSlaveCplt+0x16c>
 8107b1c:	687b      	ldr	r3, [r7, #4]
 8107b1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8107b20:	681b      	ldr	r3, [r3, #0]
 8107b22:	4a6b      	ldr	r2, [pc, #428]	; (8107cd0 <I2C_ITSlaveCplt+0x290>)
 8107b24:	4293      	cmp	r3, r2
 8107b26:	d041      	beq.n	8107bac <I2C_ITSlaveCplt+0x16c>
 8107b28:	687b      	ldr	r3, [r7, #4]
 8107b2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8107b2c:	681b      	ldr	r3, [r3, #0]
 8107b2e:	4a69      	ldr	r2, [pc, #420]	; (8107cd4 <I2C_ITSlaveCplt+0x294>)
 8107b30:	4293      	cmp	r3, r2
 8107b32:	d03b      	beq.n	8107bac <I2C_ITSlaveCplt+0x16c>
 8107b34:	687b      	ldr	r3, [r7, #4]
 8107b36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8107b38:	681b      	ldr	r3, [r3, #0]
 8107b3a:	4a67      	ldr	r2, [pc, #412]	; (8107cd8 <I2C_ITSlaveCplt+0x298>)
 8107b3c:	4293      	cmp	r3, r2
 8107b3e:	d035      	beq.n	8107bac <I2C_ITSlaveCplt+0x16c>
 8107b40:	687b      	ldr	r3, [r7, #4]
 8107b42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8107b44:	681b      	ldr	r3, [r3, #0]
 8107b46:	4a65      	ldr	r2, [pc, #404]	; (8107cdc <I2C_ITSlaveCplt+0x29c>)
 8107b48:	4293      	cmp	r3, r2
 8107b4a:	d02f      	beq.n	8107bac <I2C_ITSlaveCplt+0x16c>
 8107b4c:	687b      	ldr	r3, [r7, #4]
 8107b4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8107b50:	681b      	ldr	r3, [r3, #0]
 8107b52:	4a63      	ldr	r2, [pc, #396]	; (8107ce0 <I2C_ITSlaveCplt+0x2a0>)
 8107b54:	4293      	cmp	r3, r2
 8107b56:	d029      	beq.n	8107bac <I2C_ITSlaveCplt+0x16c>
 8107b58:	687b      	ldr	r3, [r7, #4]
 8107b5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8107b5c:	681b      	ldr	r3, [r3, #0]
 8107b5e:	4a61      	ldr	r2, [pc, #388]	; (8107ce4 <I2C_ITSlaveCplt+0x2a4>)
 8107b60:	4293      	cmp	r3, r2
 8107b62:	d023      	beq.n	8107bac <I2C_ITSlaveCplt+0x16c>
 8107b64:	687b      	ldr	r3, [r7, #4]
 8107b66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8107b68:	681b      	ldr	r3, [r3, #0]
 8107b6a:	4a5f      	ldr	r2, [pc, #380]	; (8107ce8 <I2C_ITSlaveCplt+0x2a8>)
 8107b6c:	4293      	cmp	r3, r2
 8107b6e:	d01d      	beq.n	8107bac <I2C_ITSlaveCplt+0x16c>
 8107b70:	687b      	ldr	r3, [r7, #4]
 8107b72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8107b74:	681b      	ldr	r3, [r3, #0]
 8107b76:	4a5d      	ldr	r2, [pc, #372]	; (8107cec <I2C_ITSlaveCplt+0x2ac>)
 8107b78:	4293      	cmp	r3, r2
 8107b7a:	d017      	beq.n	8107bac <I2C_ITSlaveCplt+0x16c>
 8107b7c:	687b      	ldr	r3, [r7, #4]
 8107b7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8107b80:	681b      	ldr	r3, [r3, #0]
 8107b82:	4a5b      	ldr	r2, [pc, #364]	; (8107cf0 <I2C_ITSlaveCplt+0x2b0>)
 8107b84:	4293      	cmp	r3, r2
 8107b86:	d011      	beq.n	8107bac <I2C_ITSlaveCplt+0x16c>
 8107b88:	687b      	ldr	r3, [r7, #4]
 8107b8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8107b8c:	681b      	ldr	r3, [r3, #0]
 8107b8e:	4a59      	ldr	r2, [pc, #356]	; (8107cf4 <I2C_ITSlaveCplt+0x2b4>)
 8107b90:	4293      	cmp	r3, r2
 8107b92:	d00b      	beq.n	8107bac <I2C_ITSlaveCplt+0x16c>
 8107b94:	687b      	ldr	r3, [r7, #4]
 8107b96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8107b98:	681b      	ldr	r3, [r3, #0]
 8107b9a:	4a57      	ldr	r2, [pc, #348]	; (8107cf8 <I2C_ITSlaveCplt+0x2b8>)
 8107b9c:	4293      	cmp	r3, r2
 8107b9e:	d005      	beq.n	8107bac <I2C_ITSlaveCplt+0x16c>
 8107ba0:	687b      	ldr	r3, [r7, #4]
 8107ba2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8107ba4:	681b      	ldr	r3, [r3, #0]
 8107ba6:	4a55      	ldr	r2, [pc, #340]	; (8107cfc <I2C_ITSlaveCplt+0x2bc>)
 8107ba8:	4293      	cmp	r3, r2
 8107baa:	d105      	bne.n	8107bb8 <I2C_ITSlaveCplt+0x178>
 8107bac:	687b      	ldr	r3, [r7, #4]
 8107bae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8107bb0:	681b      	ldr	r3, [r3, #0]
 8107bb2:	685b      	ldr	r3, [r3, #4]
 8107bb4:	b29b      	uxth	r3, r3
 8107bb6:	e004      	b.n	8107bc2 <I2C_ITSlaveCplt+0x182>
 8107bb8:	687b      	ldr	r3, [r7, #4]
 8107bba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8107bbc:	681b      	ldr	r3, [r3, #0]
 8107bbe:	685b      	ldr	r3, [r3, #4]
 8107bc0:	b29b      	uxth	r3, r3
 8107bc2:	687a      	ldr	r2, [r7, #4]
 8107bc4:	8553      	strh	r3, [r2, #42]	; 0x2a
 8107bc6:	e0a2      	b.n	8107d0e <I2C_ITSlaveCplt+0x2ce>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8107bc8:	693b      	ldr	r3, [r7, #16]
 8107bca:	0bdb      	lsrs	r3, r3, #15
 8107bcc:	f003 0301 	and.w	r3, r3, #1
 8107bd0:	2b00      	cmp	r3, #0
 8107bd2:	f000 809c 	beq.w	8107d0e <I2C_ITSlaveCplt+0x2ce>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8107bd6:	687b      	ldr	r3, [r7, #4]
 8107bd8:	681b      	ldr	r3, [r3, #0]
 8107bda:	681a      	ldr	r2, [r3, #0]
 8107bdc:	687b      	ldr	r3, [r7, #4]
 8107bde:	681b      	ldr	r3, [r3, #0]
 8107be0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8107be4:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8107be6:	687b      	ldr	r3, [r7, #4]
 8107be8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8107bea:	2b00      	cmp	r3, #0
 8107bec:	f000 808f 	beq.w	8107d0e <I2C_ITSlaveCplt+0x2ce>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 8107bf0:	687b      	ldr	r3, [r7, #4]
 8107bf2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8107bf4:	681b      	ldr	r3, [r3, #0]
 8107bf6:	4a32      	ldr	r2, [pc, #200]	; (8107cc0 <I2C_ITSlaveCplt+0x280>)
 8107bf8:	4293      	cmp	r3, r2
 8107bfa:	d059      	beq.n	8107cb0 <I2C_ITSlaveCplt+0x270>
 8107bfc:	687b      	ldr	r3, [r7, #4]
 8107bfe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8107c00:	681b      	ldr	r3, [r3, #0]
 8107c02:	4a30      	ldr	r2, [pc, #192]	; (8107cc4 <I2C_ITSlaveCplt+0x284>)
 8107c04:	4293      	cmp	r3, r2
 8107c06:	d053      	beq.n	8107cb0 <I2C_ITSlaveCplt+0x270>
 8107c08:	687b      	ldr	r3, [r7, #4]
 8107c0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8107c0c:	681b      	ldr	r3, [r3, #0]
 8107c0e:	4a2e      	ldr	r2, [pc, #184]	; (8107cc8 <I2C_ITSlaveCplt+0x288>)
 8107c10:	4293      	cmp	r3, r2
 8107c12:	d04d      	beq.n	8107cb0 <I2C_ITSlaveCplt+0x270>
 8107c14:	687b      	ldr	r3, [r7, #4]
 8107c16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8107c18:	681b      	ldr	r3, [r3, #0]
 8107c1a:	4a2c      	ldr	r2, [pc, #176]	; (8107ccc <I2C_ITSlaveCplt+0x28c>)
 8107c1c:	4293      	cmp	r3, r2
 8107c1e:	d047      	beq.n	8107cb0 <I2C_ITSlaveCplt+0x270>
 8107c20:	687b      	ldr	r3, [r7, #4]
 8107c22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8107c24:	681b      	ldr	r3, [r3, #0]
 8107c26:	4a2a      	ldr	r2, [pc, #168]	; (8107cd0 <I2C_ITSlaveCplt+0x290>)
 8107c28:	4293      	cmp	r3, r2
 8107c2a:	d041      	beq.n	8107cb0 <I2C_ITSlaveCplt+0x270>
 8107c2c:	687b      	ldr	r3, [r7, #4]
 8107c2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8107c30:	681b      	ldr	r3, [r3, #0]
 8107c32:	4a28      	ldr	r2, [pc, #160]	; (8107cd4 <I2C_ITSlaveCplt+0x294>)
 8107c34:	4293      	cmp	r3, r2
 8107c36:	d03b      	beq.n	8107cb0 <I2C_ITSlaveCplt+0x270>
 8107c38:	687b      	ldr	r3, [r7, #4]
 8107c3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8107c3c:	681b      	ldr	r3, [r3, #0]
 8107c3e:	4a26      	ldr	r2, [pc, #152]	; (8107cd8 <I2C_ITSlaveCplt+0x298>)
 8107c40:	4293      	cmp	r3, r2
 8107c42:	d035      	beq.n	8107cb0 <I2C_ITSlaveCplt+0x270>
 8107c44:	687b      	ldr	r3, [r7, #4]
 8107c46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8107c48:	681b      	ldr	r3, [r3, #0]
 8107c4a:	4a24      	ldr	r2, [pc, #144]	; (8107cdc <I2C_ITSlaveCplt+0x29c>)
 8107c4c:	4293      	cmp	r3, r2
 8107c4e:	d02f      	beq.n	8107cb0 <I2C_ITSlaveCplt+0x270>
 8107c50:	687b      	ldr	r3, [r7, #4]
 8107c52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8107c54:	681b      	ldr	r3, [r3, #0]
 8107c56:	4a22      	ldr	r2, [pc, #136]	; (8107ce0 <I2C_ITSlaveCplt+0x2a0>)
 8107c58:	4293      	cmp	r3, r2
 8107c5a:	d029      	beq.n	8107cb0 <I2C_ITSlaveCplt+0x270>
 8107c5c:	687b      	ldr	r3, [r7, #4]
 8107c5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8107c60:	681b      	ldr	r3, [r3, #0]
 8107c62:	4a20      	ldr	r2, [pc, #128]	; (8107ce4 <I2C_ITSlaveCplt+0x2a4>)
 8107c64:	4293      	cmp	r3, r2
 8107c66:	d023      	beq.n	8107cb0 <I2C_ITSlaveCplt+0x270>
 8107c68:	687b      	ldr	r3, [r7, #4]
 8107c6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8107c6c:	681b      	ldr	r3, [r3, #0]
 8107c6e:	4a1e      	ldr	r2, [pc, #120]	; (8107ce8 <I2C_ITSlaveCplt+0x2a8>)
 8107c70:	4293      	cmp	r3, r2
 8107c72:	d01d      	beq.n	8107cb0 <I2C_ITSlaveCplt+0x270>
 8107c74:	687b      	ldr	r3, [r7, #4]
 8107c76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8107c78:	681b      	ldr	r3, [r3, #0]
 8107c7a:	4a1c      	ldr	r2, [pc, #112]	; (8107cec <I2C_ITSlaveCplt+0x2ac>)
 8107c7c:	4293      	cmp	r3, r2
 8107c7e:	d017      	beq.n	8107cb0 <I2C_ITSlaveCplt+0x270>
 8107c80:	687b      	ldr	r3, [r7, #4]
 8107c82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8107c84:	681b      	ldr	r3, [r3, #0]
 8107c86:	4a1a      	ldr	r2, [pc, #104]	; (8107cf0 <I2C_ITSlaveCplt+0x2b0>)
 8107c88:	4293      	cmp	r3, r2
 8107c8a:	d011      	beq.n	8107cb0 <I2C_ITSlaveCplt+0x270>
 8107c8c:	687b      	ldr	r3, [r7, #4]
 8107c8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8107c90:	681b      	ldr	r3, [r3, #0]
 8107c92:	4a18      	ldr	r2, [pc, #96]	; (8107cf4 <I2C_ITSlaveCplt+0x2b4>)
 8107c94:	4293      	cmp	r3, r2
 8107c96:	d00b      	beq.n	8107cb0 <I2C_ITSlaveCplt+0x270>
 8107c98:	687b      	ldr	r3, [r7, #4]
 8107c9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8107c9c:	681b      	ldr	r3, [r3, #0]
 8107c9e:	4a16      	ldr	r2, [pc, #88]	; (8107cf8 <I2C_ITSlaveCplt+0x2b8>)
 8107ca0:	4293      	cmp	r3, r2
 8107ca2:	d005      	beq.n	8107cb0 <I2C_ITSlaveCplt+0x270>
 8107ca4:	687b      	ldr	r3, [r7, #4]
 8107ca6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8107ca8:	681b      	ldr	r3, [r3, #0]
 8107caa:	4a14      	ldr	r2, [pc, #80]	; (8107cfc <I2C_ITSlaveCplt+0x2bc>)
 8107cac:	4293      	cmp	r3, r2
 8107cae:	d127      	bne.n	8107d00 <I2C_ITSlaveCplt+0x2c0>
 8107cb0:	687b      	ldr	r3, [r7, #4]
 8107cb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8107cb4:	681b      	ldr	r3, [r3, #0]
 8107cb6:	685b      	ldr	r3, [r3, #4]
 8107cb8:	b29b      	uxth	r3, r3
 8107cba:	e026      	b.n	8107d0a <I2C_ITSlaveCplt+0x2ca>
 8107cbc:	fe00e800 	.word	0xfe00e800
 8107cc0:	40020010 	.word	0x40020010
 8107cc4:	40020028 	.word	0x40020028
 8107cc8:	40020040 	.word	0x40020040
 8107ccc:	40020058 	.word	0x40020058
 8107cd0:	40020070 	.word	0x40020070
 8107cd4:	40020088 	.word	0x40020088
 8107cd8:	400200a0 	.word	0x400200a0
 8107cdc:	400200b8 	.word	0x400200b8
 8107ce0:	40020410 	.word	0x40020410
 8107ce4:	40020428 	.word	0x40020428
 8107ce8:	40020440 	.word	0x40020440
 8107cec:	40020458 	.word	0x40020458
 8107cf0:	40020470 	.word	0x40020470
 8107cf4:	40020488 	.word	0x40020488
 8107cf8:	400204a0 	.word	0x400204a0
 8107cfc:	400204b8 	.word	0x400204b8
 8107d00:	687b      	ldr	r3, [r7, #4]
 8107d02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8107d04:	681b      	ldr	r3, [r3, #0]
 8107d06:	685b      	ldr	r3, [r3, #4]
 8107d08:	b29b      	uxth	r3, r3
 8107d0a:	687a      	ldr	r2, [r7, #4]
 8107d0c:	8553      	strh	r3, [r2, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8107d0e:	697b      	ldr	r3, [r7, #20]
 8107d10:	089b      	lsrs	r3, r3, #2
 8107d12:	f003 0301 	and.w	r3, r3, #1
 8107d16:	2b00      	cmp	r3, #0
 8107d18:	d020      	beq.n	8107d5c <I2C_ITSlaveCplt+0x31c>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8107d1a:	697b      	ldr	r3, [r7, #20]
 8107d1c:	f023 0304 	bic.w	r3, r3, #4
 8107d20:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8107d22:	687b      	ldr	r3, [r7, #4]
 8107d24:	681b      	ldr	r3, [r3, #0]
 8107d26:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8107d28:	687b      	ldr	r3, [r7, #4]
 8107d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8107d2c:	b2d2      	uxtb	r2, r2
 8107d2e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8107d30:	687b      	ldr	r3, [r7, #4]
 8107d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8107d34:	1c5a      	adds	r2, r3, #1
 8107d36:	687b      	ldr	r3, [r7, #4]
 8107d38:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8107d3a:	687b      	ldr	r3, [r7, #4]
 8107d3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8107d3e:	2b00      	cmp	r3, #0
 8107d40:	d00c      	beq.n	8107d5c <I2C_ITSlaveCplt+0x31c>
    {
      hi2c->XferSize--;
 8107d42:	687b      	ldr	r3, [r7, #4]
 8107d44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8107d46:	3b01      	subs	r3, #1
 8107d48:	b29a      	uxth	r2, r3
 8107d4a:	687b      	ldr	r3, [r7, #4]
 8107d4c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8107d4e:	687b      	ldr	r3, [r7, #4]
 8107d50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8107d52:	b29b      	uxth	r3, r3
 8107d54:	3b01      	subs	r3, #1
 8107d56:	b29a      	uxth	r2, r3
 8107d58:	687b      	ldr	r3, [r7, #4]
 8107d5a:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8107d5c:	687b      	ldr	r3, [r7, #4]
 8107d5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8107d60:	b29b      	uxth	r3, r3
 8107d62:	2b00      	cmp	r3, #0
 8107d64:	d005      	beq.n	8107d72 <I2C_ITSlaveCplt+0x332>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8107d66:	687b      	ldr	r3, [r7, #4]
 8107d68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8107d6a:	f043 0204 	orr.w	r2, r3, #4
 8107d6e:	687b      	ldr	r3, [r7, #4]
 8107d70:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8107d72:	687b      	ldr	r3, [r7, #4]
 8107d74:	2200      	movs	r2, #0
 8107d76:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8107d7a:	687b      	ldr	r3, [r7, #4]
 8107d7c:	2200      	movs	r2, #0
 8107d7e:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8107d80:	687b      	ldr	r3, [r7, #4]
 8107d82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8107d84:	2b00      	cmp	r3, #0
 8107d86:	d010      	beq.n	8107daa <I2C_ITSlaveCplt+0x36a>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8107d88:	687b      	ldr	r3, [r7, #4]
 8107d8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8107d8c:	4619      	mov	r1, r3
 8107d8e:	6878      	ldr	r0, [r7, #4]
 8107d90:	f000 f8a4 	bl	8107edc <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8107d94:	687b      	ldr	r3, [r7, #4]
 8107d96:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8107d9a:	b2db      	uxtb	r3, r3
 8107d9c:	2b28      	cmp	r3, #40	; 0x28
 8107d9e:	d141      	bne.n	8107e24 <I2C_ITSlaveCplt+0x3e4>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8107da0:	6979      	ldr	r1, [r7, #20]
 8107da2:	6878      	ldr	r0, [r7, #4]
 8107da4:	f000 f844 	bl	8107e30 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8107da8:	e03c      	b.n	8107e24 <I2C_ITSlaveCplt+0x3e4>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8107daa:	687b      	ldr	r3, [r7, #4]
 8107dac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8107dae:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8107db2:	d014      	beq.n	8107dde <I2C_ITSlaveCplt+0x39e>
    I2C_ITSlaveSeqCplt(hi2c);
 8107db4:	6878      	ldr	r0, [r7, #4]
 8107db6:	f7ff fde4 	bl	8107982 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8107dba:	687b      	ldr	r3, [r7, #4]
 8107dbc:	4a1b      	ldr	r2, [pc, #108]	; (8107e2c <I2C_ITSlaveCplt+0x3ec>)
 8107dbe:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8107dc0:	687b      	ldr	r3, [r7, #4]
 8107dc2:	2220      	movs	r2, #32
 8107dc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8107dc8:	687b      	ldr	r3, [r7, #4]
 8107dca:	2200      	movs	r2, #0
 8107dcc:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8107dce:	687b      	ldr	r3, [r7, #4]
 8107dd0:	2200      	movs	r2, #0
 8107dd2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8107dd6:	6878      	ldr	r0, [r7, #4]
 8107dd8:	f7ff fc2e 	bl	8107638 <HAL_I2C_ListenCpltCallback>
}
 8107ddc:	e022      	b.n	8107e24 <I2C_ITSlaveCplt+0x3e4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8107dde:	687b      	ldr	r3, [r7, #4]
 8107de0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8107de4:	b2db      	uxtb	r3, r3
 8107de6:	2b22      	cmp	r3, #34	; 0x22
 8107de8:	d10e      	bne.n	8107e08 <I2C_ITSlaveCplt+0x3c8>
    hi2c->State = HAL_I2C_STATE_READY;
 8107dea:	687b      	ldr	r3, [r7, #4]
 8107dec:	2220      	movs	r2, #32
 8107dee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8107df2:	687b      	ldr	r3, [r7, #4]
 8107df4:	2200      	movs	r2, #0
 8107df6:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8107df8:	687b      	ldr	r3, [r7, #4]
 8107dfa:	2200      	movs	r2, #0
 8107dfc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8107e00:	6878      	ldr	r0, [r7, #4]
 8107e02:	f7ff fc01 	bl	8107608 <HAL_I2C_SlaveRxCpltCallback>
}
 8107e06:	e00d      	b.n	8107e24 <I2C_ITSlaveCplt+0x3e4>
    hi2c->State = HAL_I2C_STATE_READY;
 8107e08:	687b      	ldr	r3, [r7, #4]
 8107e0a:	2220      	movs	r2, #32
 8107e0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8107e10:	687b      	ldr	r3, [r7, #4]
 8107e12:	2200      	movs	r2, #0
 8107e14:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8107e16:	687b      	ldr	r3, [r7, #4]
 8107e18:	2200      	movs	r2, #0
 8107e1a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8107e1e:	6878      	ldr	r0, [r7, #4]
 8107e20:	f7ff fbe8 	bl	81075f4 <HAL_I2C_SlaveTxCpltCallback>
}
 8107e24:	bf00      	nop
 8107e26:	3718      	adds	r7, #24
 8107e28:	46bd      	mov	sp, r7
 8107e2a:	bd80      	pop	{r7, pc}
 8107e2c:	ffff0000 	.word	0xffff0000

08107e30 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8107e30:	b580      	push	{r7, lr}
 8107e32:	b082      	sub	sp, #8
 8107e34:	af00      	add	r7, sp, #0
 8107e36:	6078      	str	r0, [r7, #4]
 8107e38:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8107e3a:	687b      	ldr	r3, [r7, #4]
 8107e3c:	4a26      	ldr	r2, [pc, #152]	; (8107ed8 <I2C_ITListenCplt+0xa8>)
 8107e3e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8107e40:	687b      	ldr	r3, [r7, #4]
 8107e42:	2200      	movs	r2, #0
 8107e44:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8107e46:	687b      	ldr	r3, [r7, #4]
 8107e48:	2220      	movs	r2, #32
 8107e4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8107e4e:	687b      	ldr	r3, [r7, #4]
 8107e50:	2200      	movs	r2, #0
 8107e52:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8107e56:	687b      	ldr	r3, [r7, #4]
 8107e58:	2200      	movs	r2, #0
 8107e5a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8107e5c:	683b      	ldr	r3, [r7, #0]
 8107e5e:	089b      	lsrs	r3, r3, #2
 8107e60:	f003 0301 	and.w	r3, r3, #1
 8107e64:	2b00      	cmp	r3, #0
 8107e66:	d022      	beq.n	8107eae <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8107e68:	687b      	ldr	r3, [r7, #4]
 8107e6a:	681b      	ldr	r3, [r3, #0]
 8107e6c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8107e6e:	687b      	ldr	r3, [r7, #4]
 8107e70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8107e72:	b2d2      	uxtb	r2, r2
 8107e74:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8107e76:	687b      	ldr	r3, [r7, #4]
 8107e78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8107e7a:	1c5a      	adds	r2, r3, #1
 8107e7c:	687b      	ldr	r3, [r7, #4]
 8107e7e:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8107e80:	687b      	ldr	r3, [r7, #4]
 8107e82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8107e84:	2b00      	cmp	r3, #0
 8107e86:	d012      	beq.n	8107eae <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8107e88:	687b      	ldr	r3, [r7, #4]
 8107e8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8107e8c:	3b01      	subs	r3, #1
 8107e8e:	b29a      	uxth	r2, r3
 8107e90:	687b      	ldr	r3, [r7, #4]
 8107e92:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8107e94:	687b      	ldr	r3, [r7, #4]
 8107e96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8107e98:	b29b      	uxth	r3, r3
 8107e9a:	3b01      	subs	r3, #1
 8107e9c:	b29a      	uxth	r2, r3
 8107e9e:	687b      	ldr	r3, [r7, #4]
 8107ea0:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8107ea2:	687b      	ldr	r3, [r7, #4]
 8107ea4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8107ea6:	f043 0204 	orr.w	r2, r3, #4
 8107eaa:	687b      	ldr	r3, [r7, #4]
 8107eac:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8107eae:	f248 0103 	movw	r1, #32771	; 0x8003
 8107eb2:	6878      	ldr	r0, [r7, #4]
 8107eb4:	f000 f94b 	bl	810814e <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8107eb8:	687b      	ldr	r3, [r7, #4]
 8107eba:	681b      	ldr	r3, [r3, #0]
 8107ebc:	2210      	movs	r2, #16
 8107ebe:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8107ec0:	687b      	ldr	r3, [r7, #4]
 8107ec2:	2200      	movs	r2, #0
 8107ec4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8107ec8:	6878      	ldr	r0, [r7, #4]
 8107eca:	f7ff fbb5 	bl	8107638 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8107ece:	bf00      	nop
 8107ed0:	3708      	adds	r7, #8
 8107ed2:	46bd      	mov	sp, r7
 8107ed4:	bd80      	pop	{r7, pc}
 8107ed6:	bf00      	nop
 8107ed8:	ffff0000 	.word	0xffff0000

08107edc <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8107edc:	b580      	push	{r7, lr}
 8107ede:	b084      	sub	sp, #16
 8107ee0:	af00      	add	r7, sp, #0
 8107ee2:	6078      	str	r0, [r7, #4]
 8107ee4:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8107ee6:	687b      	ldr	r3, [r7, #4]
 8107ee8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8107eec:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8107eee:	687b      	ldr	r3, [r7, #4]
 8107ef0:	2200      	movs	r2, #0
 8107ef2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8107ef6:	687b      	ldr	r3, [r7, #4]
 8107ef8:	4a5d      	ldr	r2, [pc, #372]	; (8108070 <I2C_ITError+0x194>)
 8107efa:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8107efc:	687b      	ldr	r3, [r7, #4]
 8107efe:	2200      	movs	r2, #0
 8107f00:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8107f02:	687b      	ldr	r3, [r7, #4]
 8107f04:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8107f06:	683b      	ldr	r3, [r7, #0]
 8107f08:	431a      	orrs	r2, r3
 8107f0a:	687b      	ldr	r3, [r7, #4]
 8107f0c:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8107f0e:	7bfb      	ldrb	r3, [r7, #15]
 8107f10:	2b28      	cmp	r3, #40	; 0x28
 8107f12:	d005      	beq.n	8107f20 <I2C_ITError+0x44>
 8107f14:	7bfb      	ldrb	r3, [r7, #15]
 8107f16:	2b29      	cmp	r3, #41	; 0x29
 8107f18:	d002      	beq.n	8107f20 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8107f1a:	7bfb      	ldrb	r3, [r7, #15]
 8107f1c:	2b2a      	cmp	r3, #42	; 0x2a
 8107f1e:	d10b      	bne.n	8107f38 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8107f20:	2103      	movs	r1, #3
 8107f22:	6878      	ldr	r0, [r7, #4]
 8107f24:	f000 f913 	bl	810814e <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8107f28:	687b      	ldr	r3, [r7, #4]
 8107f2a:	2228      	movs	r2, #40	; 0x28
 8107f2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8107f30:	687b      	ldr	r3, [r7, #4]
 8107f32:	4a50      	ldr	r2, [pc, #320]	; (8108074 <I2C_ITError+0x198>)
 8107f34:	635a      	str	r2, [r3, #52]	; 0x34
 8107f36:	e011      	b.n	8107f5c <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8107f38:	f248 0103 	movw	r1, #32771	; 0x8003
 8107f3c:	6878      	ldr	r0, [r7, #4]
 8107f3e:	f000 f906 	bl	810814e <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8107f42:	687b      	ldr	r3, [r7, #4]
 8107f44:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8107f48:	b2db      	uxtb	r3, r3
 8107f4a:	2b60      	cmp	r3, #96	; 0x60
 8107f4c:	d003      	beq.n	8107f56 <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8107f4e:	687b      	ldr	r3, [r7, #4]
 8107f50:	2220      	movs	r2, #32
 8107f52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 8107f56:	687b      	ldr	r3, [r7, #4]
 8107f58:	2200      	movs	r2, #0
 8107f5a:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8107f5c:	687b      	ldr	r3, [r7, #4]
 8107f5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8107f60:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8107f62:	687b      	ldr	r3, [r7, #4]
 8107f64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8107f66:	2b00      	cmp	r3, #0
 8107f68:	d039      	beq.n	8107fde <I2C_ITError+0x102>
 8107f6a:	68bb      	ldr	r3, [r7, #8]
 8107f6c:	2b11      	cmp	r3, #17
 8107f6e:	d002      	beq.n	8107f76 <I2C_ITError+0x9a>
 8107f70:	68bb      	ldr	r3, [r7, #8]
 8107f72:	2b21      	cmp	r3, #33	; 0x21
 8107f74:	d133      	bne.n	8107fde <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8107f76:	687b      	ldr	r3, [r7, #4]
 8107f78:	681b      	ldr	r3, [r3, #0]
 8107f7a:	681b      	ldr	r3, [r3, #0]
 8107f7c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8107f80:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8107f84:	d107      	bne.n	8107f96 <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8107f86:	687b      	ldr	r3, [r7, #4]
 8107f88:	681b      	ldr	r3, [r3, #0]
 8107f8a:	681a      	ldr	r2, [r3, #0]
 8107f8c:	687b      	ldr	r3, [r7, #4]
 8107f8e:	681b      	ldr	r3, [r3, #0]
 8107f90:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8107f94:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8107f96:	687b      	ldr	r3, [r7, #4]
 8107f98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8107f9a:	4618      	mov	r0, r3
 8107f9c:	f7fe fc06 	bl	81067ac <HAL_DMA_GetState>
 8107fa0:	4603      	mov	r3, r0
 8107fa2:	2b01      	cmp	r3, #1
 8107fa4:	d017      	beq.n	8107fd6 <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8107fa6:	687b      	ldr	r3, [r7, #4]
 8107fa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8107faa:	4a33      	ldr	r2, [pc, #204]	; (8108078 <I2C_ITError+0x19c>)
 8107fac:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8107fae:	687b      	ldr	r3, [r7, #4]
 8107fb0:	2200      	movs	r2, #0
 8107fb2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8107fb6:	687b      	ldr	r3, [r7, #4]
 8107fb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8107fba:	4618      	mov	r0, r3
 8107fbc:	f7fd fa88 	bl	81054d0 <HAL_DMA_Abort_IT>
 8107fc0:	4603      	mov	r3, r0
 8107fc2:	2b00      	cmp	r3, #0
 8107fc4:	d04d      	beq.n	8108062 <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8107fc6:	687b      	ldr	r3, [r7, #4]
 8107fc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8107fca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8107fcc:	687a      	ldr	r2, [r7, #4]
 8107fce:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8107fd0:	4610      	mov	r0, r2
 8107fd2:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8107fd4:	e045      	b.n	8108062 <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8107fd6:	6878      	ldr	r0, [r7, #4]
 8107fd8:	f000 f850 	bl	810807c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8107fdc:	e041      	b.n	8108062 <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8107fde:	687b      	ldr	r3, [r7, #4]
 8107fe0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8107fe2:	2b00      	cmp	r3, #0
 8107fe4:	d039      	beq.n	810805a <I2C_ITError+0x17e>
 8107fe6:	68bb      	ldr	r3, [r7, #8]
 8107fe8:	2b12      	cmp	r3, #18
 8107fea:	d002      	beq.n	8107ff2 <I2C_ITError+0x116>
 8107fec:	68bb      	ldr	r3, [r7, #8]
 8107fee:	2b22      	cmp	r3, #34	; 0x22
 8107ff0:	d133      	bne.n	810805a <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8107ff2:	687b      	ldr	r3, [r7, #4]
 8107ff4:	681b      	ldr	r3, [r3, #0]
 8107ff6:	681b      	ldr	r3, [r3, #0]
 8107ff8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8107ffc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8108000:	d107      	bne.n	8108012 <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8108002:	687b      	ldr	r3, [r7, #4]
 8108004:	681b      	ldr	r3, [r3, #0]
 8108006:	681a      	ldr	r2, [r3, #0]
 8108008:	687b      	ldr	r3, [r7, #4]
 810800a:	681b      	ldr	r3, [r3, #0]
 810800c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8108010:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8108012:	687b      	ldr	r3, [r7, #4]
 8108014:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8108016:	4618      	mov	r0, r3
 8108018:	f7fe fbc8 	bl	81067ac <HAL_DMA_GetState>
 810801c:	4603      	mov	r3, r0
 810801e:	2b01      	cmp	r3, #1
 8108020:	d017      	beq.n	8108052 <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8108022:	687b      	ldr	r3, [r7, #4]
 8108024:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8108026:	4a14      	ldr	r2, [pc, #80]	; (8108078 <I2C_ITError+0x19c>)
 8108028:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 810802a:	687b      	ldr	r3, [r7, #4]
 810802c:	2200      	movs	r2, #0
 810802e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8108032:	687b      	ldr	r3, [r7, #4]
 8108034:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8108036:	4618      	mov	r0, r3
 8108038:	f7fd fa4a 	bl	81054d0 <HAL_DMA_Abort_IT>
 810803c:	4603      	mov	r3, r0
 810803e:	2b00      	cmp	r3, #0
 8108040:	d011      	beq.n	8108066 <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8108042:	687b      	ldr	r3, [r7, #4]
 8108044:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8108046:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8108048:	687a      	ldr	r2, [r7, #4]
 810804a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 810804c:	4610      	mov	r0, r2
 810804e:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8108050:	e009      	b.n	8108066 <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8108052:	6878      	ldr	r0, [r7, #4]
 8108054:	f000 f812 	bl	810807c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8108058:	e005      	b.n	8108066 <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 810805a:	6878      	ldr	r0, [r7, #4]
 810805c:	f000 f80e 	bl	810807c <I2C_TreatErrorCallback>
  }
}
 8108060:	e002      	b.n	8108068 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8108062:	bf00      	nop
 8108064:	e000      	b.n	8108068 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8108066:	bf00      	nop
}
 8108068:	bf00      	nop
 810806a:	3710      	adds	r7, #16
 810806c:	46bd      	mov	sp, r7
 810806e:	bd80      	pop	{r7, pc}
 8108070:	ffff0000 	.word	0xffff0000
 8108074:	08107675 	.word	0x08107675
 8108078:	08108113 	.word	0x08108113

0810807c <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 810807c:	b580      	push	{r7, lr}
 810807e:	b082      	sub	sp, #8
 8108080:	af00      	add	r7, sp, #0
 8108082:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8108084:	687b      	ldr	r3, [r7, #4]
 8108086:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 810808a:	b2db      	uxtb	r3, r3
 810808c:	2b60      	cmp	r3, #96	; 0x60
 810808e:	d10e      	bne.n	81080ae <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8108090:	687b      	ldr	r3, [r7, #4]
 8108092:	2220      	movs	r2, #32
 8108094:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8108098:	687b      	ldr	r3, [r7, #4]
 810809a:	2200      	movs	r2, #0
 810809c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 810809e:	687b      	ldr	r3, [r7, #4]
 81080a0:	2200      	movs	r2, #0
 81080a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 81080a6:	6878      	ldr	r0, [r7, #4]
 81080a8:	f7ff fada 	bl	8107660 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 81080ac:	e009      	b.n	81080c2 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 81080ae:	687b      	ldr	r3, [r7, #4]
 81080b0:	2200      	movs	r2, #0
 81080b2:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 81080b4:	687b      	ldr	r3, [r7, #4]
 81080b6:	2200      	movs	r2, #0
 81080b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 81080bc:	6878      	ldr	r0, [r7, #4]
 81080be:	f7ff fac5 	bl	810764c <HAL_I2C_ErrorCallback>
}
 81080c2:	bf00      	nop
 81080c4:	3708      	adds	r7, #8
 81080c6:	46bd      	mov	sp, r7
 81080c8:	bd80      	pop	{r7, pc}

081080ca <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 81080ca:	b480      	push	{r7}
 81080cc:	b083      	sub	sp, #12
 81080ce:	af00      	add	r7, sp, #0
 81080d0:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 81080d2:	687b      	ldr	r3, [r7, #4]
 81080d4:	681b      	ldr	r3, [r3, #0]
 81080d6:	699b      	ldr	r3, [r3, #24]
 81080d8:	f003 0302 	and.w	r3, r3, #2
 81080dc:	2b02      	cmp	r3, #2
 81080de:	d103      	bne.n	81080e8 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 81080e0:	687b      	ldr	r3, [r7, #4]
 81080e2:	681b      	ldr	r3, [r3, #0]
 81080e4:	2200      	movs	r2, #0
 81080e6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 81080e8:	687b      	ldr	r3, [r7, #4]
 81080ea:	681b      	ldr	r3, [r3, #0]
 81080ec:	699b      	ldr	r3, [r3, #24]
 81080ee:	f003 0301 	and.w	r3, r3, #1
 81080f2:	2b01      	cmp	r3, #1
 81080f4:	d007      	beq.n	8108106 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 81080f6:	687b      	ldr	r3, [r7, #4]
 81080f8:	681b      	ldr	r3, [r3, #0]
 81080fa:	699a      	ldr	r2, [r3, #24]
 81080fc:	687b      	ldr	r3, [r7, #4]
 81080fe:	681b      	ldr	r3, [r3, #0]
 8108100:	f042 0201 	orr.w	r2, r2, #1
 8108104:	619a      	str	r2, [r3, #24]
  }
}
 8108106:	bf00      	nop
 8108108:	370c      	adds	r7, #12
 810810a:	46bd      	mov	sp, r7
 810810c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108110:	4770      	bx	lr

08108112 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8108112:	b580      	push	{r7, lr}
 8108114:	b084      	sub	sp, #16
 8108116:	af00      	add	r7, sp, #0
 8108118:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 810811a:	687b      	ldr	r3, [r7, #4]
 810811c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810811e:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8108120:	68fb      	ldr	r3, [r7, #12]
 8108122:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8108124:	2b00      	cmp	r3, #0
 8108126:	d003      	beq.n	8108130 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8108128:	68fb      	ldr	r3, [r7, #12]
 810812a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810812c:	2200      	movs	r2, #0
 810812e:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8108130:	68fb      	ldr	r3, [r7, #12]
 8108132:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8108134:	2b00      	cmp	r3, #0
 8108136:	d003      	beq.n	8108140 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8108138:	68fb      	ldr	r3, [r7, #12]
 810813a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810813c:	2200      	movs	r2, #0
 810813e:	651a      	str	r2, [r3, #80]	; 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 8108140:	68f8      	ldr	r0, [r7, #12]
 8108142:	f7ff ff9b 	bl	810807c <I2C_TreatErrorCallback>
}
 8108146:	bf00      	nop
 8108148:	3710      	adds	r7, #16
 810814a:	46bd      	mov	sp, r7
 810814c:	bd80      	pop	{r7, pc}

0810814e <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 810814e:	b480      	push	{r7}
 8108150:	b085      	sub	sp, #20
 8108152:	af00      	add	r7, sp, #0
 8108154:	6078      	str	r0, [r7, #4]
 8108156:	460b      	mov	r3, r1
 8108158:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 810815a:	2300      	movs	r3, #0
 810815c:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 810815e:	887b      	ldrh	r3, [r7, #2]
 8108160:	f003 0301 	and.w	r3, r3, #1
 8108164:	2b00      	cmp	r3, #0
 8108166:	d00f      	beq.n	8108188 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8108168:	68fb      	ldr	r3, [r7, #12]
 810816a:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 810816e:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8108170:	687b      	ldr	r3, [r7, #4]
 8108172:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8108176:	b2db      	uxtb	r3, r3
 8108178:	f003 0328 	and.w	r3, r3, #40	; 0x28
 810817c:	2b28      	cmp	r3, #40	; 0x28
 810817e:	d003      	beq.n	8108188 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8108180:	68fb      	ldr	r3, [r7, #12]
 8108182:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8108186:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8108188:	887b      	ldrh	r3, [r7, #2]
 810818a:	f003 0302 	and.w	r3, r3, #2
 810818e:	2b00      	cmp	r3, #0
 8108190:	d00f      	beq.n	81081b2 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8108192:	68fb      	ldr	r3, [r7, #12]
 8108194:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8108198:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 810819a:	687b      	ldr	r3, [r7, #4]
 810819c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 81081a0:	b2db      	uxtb	r3, r3
 81081a2:	f003 0328 	and.w	r3, r3, #40	; 0x28
 81081a6:	2b28      	cmp	r3, #40	; 0x28
 81081a8:	d003      	beq.n	81081b2 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 81081aa:	68fb      	ldr	r3, [r7, #12]
 81081ac:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 81081b0:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 81081b2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 81081b6:	2b00      	cmp	r3, #0
 81081b8:	da03      	bge.n	81081c2 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 81081ba:	68fb      	ldr	r3, [r7, #12]
 81081bc:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 81081c0:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 81081c2:	887b      	ldrh	r3, [r7, #2]
 81081c4:	2b10      	cmp	r3, #16
 81081c6:	d103      	bne.n	81081d0 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 81081c8:	68fb      	ldr	r3, [r7, #12]
 81081ca:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 81081ce:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 81081d0:	887b      	ldrh	r3, [r7, #2]
 81081d2:	2b20      	cmp	r3, #32
 81081d4:	d103      	bne.n	81081de <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 81081d6:	68fb      	ldr	r3, [r7, #12]
 81081d8:	f043 0320 	orr.w	r3, r3, #32
 81081dc:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 81081de:	887b      	ldrh	r3, [r7, #2]
 81081e0:	2b40      	cmp	r3, #64	; 0x40
 81081e2:	d103      	bne.n	81081ec <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 81081e4:	68fb      	ldr	r3, [r7, #12]
 81081e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 81081ea:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 81081ec:	687b      	ldr	r3, [r7, #4]
 81081ee:	681b      	ldr	r3, [r3, #0]
 81081f0:	6819      	ldr	r1, [r3, #0]
 81081f2:	68fb      	ldr	r3, [r7, #12]
 81081f4:	43da      	mvns	r2, r3
 81081f6:	687b      	ldr	r3, [r7, #4]
 81081f8:	681b      	ldr	r3, [r3, #0]
 81081fa:	400a      	ands	r2, r1
 81081fc:	601a      	str	r2, [r3, #0]
}
 81081fe:	bf00      	nop
 8108200:	3714      	adds	r7, #20
 8108202:	46bd      	mov	sp, r7
 8108204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108208:	4770      	bx	lr

0810820a <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 810820a:	b480      	push	{r7}
 810820c:	b083      	sub	sp, #12
 810820e:	af00      	add	r7, sp, #0
 8108210:	6078      	str	r0, [r7, #4]
 8108212:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8108214:	687b      	ldr	r3, [r7, #4]
 8108216:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 810821a:	b2db      	uxtb	r3, r3
 810821c:	2b20      	cmp	r3, #32
 810821e:	d138      	bne.n	8108292 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8108220:	687b      	ldr	r3, [r7, #4]
 8108222:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8108226:	2b01      	cmp	r3, #1
 8108228:	d101      	bne.n	810822e <HAL_I2CEx_ConfigAnalogFilter+0x24>
 810822a:	2302      	movs	r3, #2
 810822c:	e032      	b.n	8108294 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 810822e:	687b      	ldr	r3, [r7, #4]
 8108230:	2201      	movs	r2, #1
 8108232:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8108236:	687b      	ldr	r3, [r7, #4]
 8108238:	2224      	movs	r2, #36	; 0x24
 810823a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 810823e:	687b      	ldr	r3, [r7, #4]
 8108240:	681b      	ldr	r3, [r3, #0]
 8108242:	681a      	ldr	r2, [r3, #0]
 8108244:	687b      	ldr	r3, [r7, #4]
 8108246:	681b      	ldr	r3, [r3, #0]
 8108248:	f022 0201 	bic.w	r2, r2, #1
 810824c:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 810824e:	687b      	ldr	r3, [r7, #4]
 8108250:	681b      	ldr	r3, [r3, #0]
 8108252:	681a      	ldr	r2, [r3, #0]
 8108254:	687b      	ldr	r3, [r7, #4]
 8108256:	681b      	ldr	r3, [r3, #0]
 8108258:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 810825c:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 810825e:	687b      	ldr	r3, [r7, #4]
 8108260:	681b      	ldr	r3, [r3, #0]
 8108262:	6819      	ldr	r1, [r3, #0]
 8108264:	687b      	ldr	r3, [r7, #4]
 8108266:	681b      	ldr	r3, [r3, #0]
 8108268:	683a      	ldr	r2, [r7, #0]
 810826a:	430a      	orrs	r2, r1
 810826c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 810826e:	687b      	ldr	r3, [r7, #4]
 8108270:	681b      	ldr	r3, [r3, #0]
 8108272:	681a      	ldr	r2, [r3, #0]
 8108274:	687b      	ldr	r3, [r7, #4]
 8108276:	681b      	ldr	r3, [r3, #0]
 8108278:	f042 0201 	orr.w	r2, r2, #1
 810827c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 810827e:	687b      	ldr	r3, [r7, #4]
 8108280:	2220      	movs	r2, #32
 8108282:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8108286:	687b      	ldr	r3, [r7, #4]
 8108288:	2200      	movs	r2, #0
 810828a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 810828e:	2300      	movs	r3, #0
 8108290:	e000      	b.n	8108294 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8108292:	2302      	movs	r3, #2
  }
}
 8108294:	4618      	mov	r0, r3
 8108296:	370c      	adds	r7, #12
 8108298:	46bd      	mov	sp, r7
 810829a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810829e:	4770      	bx	lr

081082a0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 81082a0:	b480      	push	{r7}
 81082a2:	b085      	sub	sp, #20
 81082a4:	af00      	add	r7, sp, #0
 81082a6:	6078      	str	r0, [r7, #4]
 81082a8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 81082aa:	687b      	ldr	r3, [r7, #4]
 81082ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 81082b0:	b2db      	uxtb	r3, r3
 81082b2:	2b20      	cmp	r3, #32
 81082b4:	d139      	bne.n	810832a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 81082b6:	687b      	ldr	r3, [r7, #4]
 81082b8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 81082bc:	2b01      	cmp	r3, #1
 81082be:	d101      	bne.n	81082c4 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 81082c0:	2302      	movs	r3, #2
 81082c2:	e033      	b.n	810832c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 81082c4:	687b      	ldr	r3, [r7, #4]
 81082c6:	2201      	movs	r2, #1
 81082c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 81082cc:	687b      	ldr	r3, [r7, #4]
 81082ce:	2224      	movs	r2, #36	; 0x24
 81082d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 81082d4:	687b      	ldr	r3, [r7, #4]
 81082d6:	681b      	ldr	r3, [r3, #0]
 81082d8:	681a      	ldr	r2, [r3, #0]
 81082da:	687b      	ldr	r3, [r7, #4]
 81082dc:	681b      	ldr	r3, [r3, #0]
 81082de:	f022 0201 	bic.w	r2, r2, #1
 81082e2:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 81082e4:	687b      	ldr	r3, [r7, #4]
 81082e6:	681b      	ldr	r3, [r3, #0]
 81082e8:	681b      	ldr	r3, [r3, #0]
 81082ea:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 81082ec:	68fb      	ldr	r3, [r7, #12]
 81082ee:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 81082f2:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 81082f4:	683b      	ldr	r3, [r7, #0]
 81082f6:	021b      	lsls	r3, r3, #8
 81082f8:	68fa      	ldr	r2, [r7, #12]
 81082fa:	4313      	orrs	r3, r2
 81082fc:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 81082fe:	687b      	ldr	r3, [r7, #4]
 8108300:	681b      	ldr	r3, [r3, #0]
 8108302:	68fa      	ldr	r2, [r7, #12]
 8108304:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8108306:	687b      	ldr	r3, [r7, #4]
 8108308:	681b      	ldr	r3, [r3, #0]
 810830a:	681a      	ldr	r2, [r3, #0]
 810830c:	687b      	ldr	r3, [r7, #4]
 810830e:	681b      	ldr	r3, [r3, #0]
 8108310:	f042 0201 	orr.w	r2, r2, #1
 8108314:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8108316:	687b      	ldr	r3, [r7, #4]
 8108318:	2220      	movs	r2, #32
 810831a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 810831e:	687b      	ldr	r3, [r7, #4]
 8108320:	2200      	movs	r2, #0
 8108322:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8108326:	2300      	movs	r3, #0
 8108328:	e000      	b.n	810832c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 810832a:	2302      	movs	r3, #2
  }
}
 810832c:	4618      	mov	r0, r3
 810832e:	3714      	adds	r7, #20
 8108330:	46bd      	mov	sp, r7
 8108332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108336:	4770      	bx	lr

08108338 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8108338:	b590      	push	{r4, r7, lr}
 810833a:	b08d      	sub	sp, #52	; 0x34
 810833c:	af00      	add	r7, sp, #0
 810833e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8108340:	687b      	ldr	r3, [r7, #4]
 8108342:	681b      	ldr	r3, [r3, #0]
 8108344:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8108346:	6a3b      	ldr	r3, [r7, #32]
 8108348:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 810834a:	687b      	ldr	r3, [r7, #4]
 810834c:	681b      	ldr	r3, [r3, #0]
 810834e:	4618      	mov	r0, r3
 8108350:	f00a f8d0 	bl	81124f4 <USB_GetMode>
 8108354:	4603      	mov	r3, r0
 8108356:	2b00      	cmp	r3, #0
 8108358:	f040 83ca 	bne.w	8108af0 <HAL_PCD_IRQHandler+0x7b8>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 810835c:	687b      	ldr	r3, [r7, #4]
 810835e:	681b      	ldr	r3, [r3, #0]
 8108360:	4618      	mov	r0, r3
 8108362:	f00a f834 	bl	81123ce <USB_ReadInterrupts>
 8108366:	4603      	mov	r3, r0
 8108368:	2b00      	cmp	r3, #0
 810836a:	f000 83c0 	beq.w	8108aee <HAL_PCD_IRQHandler+0x7b6>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 810836e:	687b      	ldr	r3, [r7, #4]
 8108370:	681b      	ldr	r3, [r3, #0]
 8108372:	4618      	mov	r0, r3
 8108374:	f00a f82b 	bl	81123ce <USB_ReadInterrupts>
 8108378:	4603      	mov	r3, r0
 810837a:	f003 0302 	and.w	r3, r3, #2
 810837e:	2b02      	cmp	r3, #2
 8108380:	d107      	bne.n	8108392 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8108382:	687b      	ldr	r3, [r7, #4]
 8108384:	681b      	ldr	r3, [r3, #0]
 8108386:	695a      	ldr	r2, [r3, #20]
 8108388:	687b      	ldr	r3, [r7, #4]
 810838a:	681b      	ldr	r3, [r3, #0]
 810838c:	f002 0202 	and.w	r2, r2, #2
 8108390:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8108392:	687b      	ldr	r3, [r7, #4]
 8108394:	681b      	ldr	r3, [r3, #0]
 8108396:	4618      	mov	r0, r3
 8108398:	f00a f819 	bl	81123ce <USB_ReadInterrupts>
 810839c:	4603      	mov	r3, r0
 810839e:	f003 0310 	and.w	r3, r3, #16
 81083a2:	2b10      	cmp	r3, #16
 81083a4:	d161      	bne.n	810846a <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 81083a6:	687b      	ldr	r3, [r7, #4]
 81083a8:	681b      	ldr	r3, [r3, #0]
 81083aa:	699a      	ldr	r2, [r3, #24]
 81083ac:	687b      	ldr	r3, [r7, #4]
 81083ae:	681b      	ldr	r3, [r3, #0]
 81083b0:	f022 0210 	bic.w	r2, r2, #16
 81083b4:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 81083b6:	6a3b      	ldr	r3, [r7, #32]
 81083b8:	6a1b      	ldr	r3, [r3, #32]
 81083ba:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 81083bc:	69bb      	ldr	r3, [r7, #24]
 81083be:	f003 020f 	and.w	r2, r3, #15
 81083c2:	4613      	mov	r3, r2
 81083c4:	00db      	lsls	r3, r3, #3
 81083c6:	1a9b      	subs	r3, r3, r2
 81083c8:	009b      	lsls	r3, r3, #2
 81083ca:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 81083ce:	687a      	ldr	r2, [r7, #4]
 81083d0:	4413      	add	r3, r2
 81083d2:	3304      	adds	r3, #4
 81083d4:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 81083d6:	69bb      	ldr	r3, [r7, #24]
 81083d8:	0c5b      	lsrs	r3, r3, #17
 81083da:	f003 030f 	and.w	r3, r3, #15
 81083de:	2b02      	cmp	r3, #2
 81083e0:	d124      	bne.n	810842c <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 81083e2:	69ba      	ldr	r2, [r7, #24]
 81083e4:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 81083e8:	4013      	ands	r3, r2
 81083ea:	2b00      	cmp	r3, #0
 81083ec:	d035      	beq.n	810845a <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 81083ee:	697b      	ldr	r3, [r7, #20]
 81083f0:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 81083f2:	69bb      	ldr	r3, [r7, #24]
 81083f4:	091b      	lsrs	r3, r3, #4
 81083f6:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 81083f8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 81083fc:	b29b      	uxth	r3, r3
 81083fe:	461a      	mov	r2, r3
 8108400:	6a38      	ldr	r0, [r7, #32]
 8108402:	f009 fe92 	bl	811212a <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8108406:	697b      	ldr	r3, [r7, #20]
 8108408:	68da      	ldr	r2, [r3, #12]
 810840a:	69bb      	ldr	r3, [r7, #24]
 810840c:	091b      	lsrs	r3, r3, #4
 810840e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8108412:	441a      	add	r2, r3
 8108414:	697b      	ldr	r3, [r7, #20]
 8108416:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8108418:	697b      	ldr	r3, [r7, #20]
 810841a:	699a      	ldr	r2, [r3, #24]
 810841c:	69bb      	ldr	r3, [r7, #24]
 810841e:	091b      	lsrs	r3, r3, #4
 8108420:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8108424:	441a      	add	r2, r3
 8108426:	697b      	ldr	r3, [r7, #20]
 8108428:	619a      	str	r2, [r3, #24]
 810842a:	e016      	b.n	810845a <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 810842c:	69bb      	ldr	r3, [r7, #24]
 810842e:	0c5b      	lsrs	r3, r3, #17
 8108430:	f003 030f 	and.w	r3, r3, #15
 8108434:	2b06      	cmp	r3, #6
 8108436:	d110      	bne.n	810845a <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8108438:	687b      	ldr	r3, [r7, #4]
 810843a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 810843e:	2208      	movs	r2, #8
 8108440:	4619      	mov	r1, r3
 8108442:	6a38      	ldr	r0, [r7, #32]
 8108444:	f009 fe71 	bl	811212a <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8108448:	697b      	ldr	r3, [r7, #20]
 810844a:	699a      	ldr	r2, [r3, #24]
 810844c:	69bb      	ldr	r3, [r7, #24]
 810844e:	091b      	lsrs	r3, r3, #4
 8108450:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8108454:	441a      	add	r2, r3
 8108456:	697b      	ldr	r3, [r7, #20]
 8108458:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 810845a:	687b      	ldr	r3, [r7, #4]
 810845c:	681b      	ldr	r3, [r3, #0]
 810845e:	699a      	ldr	r2, [r3, #24]
 8108460:	687b      	ldr	r3, [r7, #4]
 8108462:	681b      	ldr	r3, [r3, #0]
 8108464:	f042 0210 	orr.w	r2, r2, #16
 8108468:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 810846a:	687b      	ldr	r3, [r7, #4]
 810846c:	681b      	ldr	r3, [r3, #0]
 810846e:	4618      	mov	r0, r3
 8108470:	f009 ffad 	bl	81123ce <USB_ReadInterrupts>
 8108474:	4603      	mov	r3, r0
 8108476:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 810847a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 810847e:	d16e      	bne.n	810855e <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8108480:	2300      	movs	r3, #0
 8108482:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8108484:	687b      	ldr	r3, [r7, #4]
 8108486:	681b      	ldr	r3, [r3, #0]
 8108488:	4618      	mov	r0, r3
 810848a:	f009 ffb3 	bl	81123f4 <USB_ReadDevAllOutEpInterrupt>
 810848e:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8108490:	e062      	b.n	8108558 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8108492:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8108494:	f003 0301 	and.w	r3, r3, #1
 8108498:	2b00      	cmp	r3, #0
 810849a:	d057      	beq.n	810854c <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 810849c:	687b      	ldr	r3, [r7, #4]
 810849e:	681b      	ldr	r3, [r3, #0]
 81084a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 81084a2:	b2d2      	uxtb	r2, r2
 81084a4:	4611      	mov	r1, r2
 81084a6:	4618      	mov	r0, r3
 81084a8:	f009 ffd8 	bl	811245c <USB_ReadDevOutEPInterrupt>
 81084ac:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 81084ae:	693b      	ldr	r3, [r7, #16]
 81084b0:	f003 0301 	and.w	r3, r3, #1
 81084b4:	2b00      	cmp	r3, #0
 81084b6:	d00c      	beq.n	81084d2 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 81084b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81084ba:	015a      	lsls	r2, r3, #5
 81084bc:	69fb      	ldr	r3, [r7, #28]
 81084be:	4413      	add	r3, r2
 81084c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 81084c4:	461a      	mov	r2, r3
 81084c6:	2301      	movs	r3, #1
 81084c8:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 81084ca:	6a79      	ldr	r1, [r7, #36]	; 0x24
 81084cc:	6878      	ldr	r0, [r7, #4]
 81084ce:	f000 fd7b 	bl	8108fc8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 81084d2:	693b      	ldr	r3, [r7, #16]
 81084d4:	f003 0308 	and.w	r3, r3, #8
 81084d8:	2b00      	cmp	r3, #0
 81084da:	d00c      	beq.n	81084f6 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 81084dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81084de:	015a      	lsls	r2, r3, #5
 81084e0:	69fb      	ldr	r3, [r7, #28]
 81084e2:	4413      	add	r3, r2
 81084e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 81084e8:	461a      	mov	r2, r3
 81084ea:	2308      	movs	r3, #8
 81084ec:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 81084ee:	6a79      	ldr	r1, [r7, #36]	; 0x24
 81084f0:	6878      	ldr	r0, [r7, #4]
 81084f2:	f000 fe75 	bl	81091e0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 81084f6:	693b      	ldr	r3, [r7, #16]
 81084f8:	f003 0310 	and.w	r3, r3, #16
 81084fc:	2b00      	cmp	r3, #0
 81084fe:	d008      	beq.n	8108512 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8108500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8108502:	015a      	lsls	r2, r3, #5
 8108504:	69fb      	ldr	r3, [r7, #28]
 8108506:	4413      	add	r3, r2
 8108508:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 810850c:	461a      	mov	r2, r3
 810850e:	2310      	movs	r3, #16
 8108510:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8108512:	693b      	ldr	r3, [r7, #16]
 8108514:	f003 0320 	and.w	r3, r3, #32
 8108518:	2b00      	cmp	r3, #0
 810851a:	d008      	beq.n	810852e <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 810851c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810851e:	015a      	lsls	r2, r3, #5
 8108520:	69fb      	ldr	r3, [r7, #28]
 8108522:	4413      	add	r3, r2
 8108524:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8108528:	461a      	mov	r2, r3
 810852a:	2320      	movs	r3, #32
 810852c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 810852e:	693b      	ldr	r3, [r7, #16]
 8108530:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8108534:	2b00      	cmp	r3, #0
 8108536:	d009      	beq.n	810854c <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8108538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810853a:	015a      	lsls	r2, r3, #5
 810853c:	69fb      	ldr	r3, [r7, #28]
 810853e:	4413      	add	r3, r2
 8108540:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8108544:	461a      	mov	r2, r3
 8108546:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 810854a:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 810854c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810854e:	3301      	adds	r3, #1
 8108550:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8108552:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8108554:	085b      	lsrs	r3, r3, #1
 8108556:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8108558:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810855a:	2b00      	cmp	r3, #0
 810855c:	d199      	bne.n	8108492 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 810855e:	687b      	ldr	r3, [r7, #4]
 8108560:	681b      	ldr	r3, [r3, #0]
 8108562:	4618      	mov	r0, r3
 8108564:	f009 ff33 	bl	81123ce <USB_ReadInterrupts>
 8108568:	4603      	mov	r3, r0
 810856a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 810856e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8108572:	f040 80c0 	bne.w	81086f6 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8108576:	687b      	ldr	r3, [r7, #4]
 8108578:	681b      	ldr	r3, [r3, #0]
 810857a:	4618      	mov	r0, r3
 810857c:	f009 ff54 	bl	8112428 <USB_ReadDevAllInEpInterrupt>
 8108580:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8108582:	2300      	movs	r3, #0
 8108584:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8108586:	e0b2      	b.n	81086ee <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8108588:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810858a:	f003 0301 	and.w	r3, r3, #1
 810858e:	2b00      	cmp	r3, #0
 8108590:	f000 80a7 	beq.w	81086e2 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8108594:	687b      	ldr	r3, [r7, #4]
 8108596:	681b      	ldr	r3, [r3, #0]
 8108598:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 810859a:	b2d2      	uxtb	r2, r2
 810859c:	4611      	mov	r1, r2
 810859e:	4618      	mov	r0, r3
 81085a0:	f009 ff7a 	bl	8112498 <USB_ReadDevInEPInterrupt>
 81085a4:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 81085a6:	693b      	ldr	r3, [r7, #16]
 81085a8:	f003 0301 	and.w	r3, r3, #1
 81085ac:	2b00      	cmp	r3, #0
 81085ae:	d057      	beq.n	8108660 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 81085b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81085b2:	f003 030f 	and.w	r3, r3, #15
 81085b6:	2201      	movs	r2, #1
 81085b8:	fa02 f303 	lsl.w	r3, r2, r3
 81085bc:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 81085be:	69fb      	ldr	r3, [r7, #28]
 81085c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 81085c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 81085c6:	68fb      	ldr	r3, [r7, #12]
 81085c8:	43db      	mvns	r3, r3
 81085ca:	69f9      	ldr	r1, [r7, #28]
 81085cc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 81085d0:	4013      	ands	r3, r2
 81085d2:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 81085d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81085d6:	015a      	lsls	r2, r3, #5
 81085d8:	69fb      	ldr	r3, [r7, #28]
 81085da:	4413      	add	r3, r2
 81085dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 81085e0:	461a      	mov	r2, r3
 81085e2:	2301      	movs	r3, #1
 81085e4:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 81085e6:	687b      	ldr	r3, [r7, #4]
 81085e8:	691b      	ldr	r3, [r3, #16]
 81085ea:	2b01      	cmp	r3, #1
 81085ec:	d132      	bne.n	8108654 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 81085ee:	6879      	ldr	r1, [r7, #4]
 81085f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 81085f2:	4613      	mov	r3, r2
 81085f4:	00db      	lsls	r3, r3, #3
 81085f6:	1a9b      	subs	r3, r3, r2
 81085f8:	009b      	lsls	r3, r3, #2
 81085fa:	440b      	add	r3, r1
 81085fc:	3348      	adds	r3, #72	; 0x48
 81085fe:	6819      	ldr	r1, [r3, #0]
 8108600:	6878      	ldr	r0, [r7, #4]
 8108602:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8108604:	4613      	mov	r3, r2
 8108606:	00db      	lsls	r3, r3, #3
 8108608:	1a9b      	subs	r3, r3, r2
 810860a:	009b      	lsls	r3, r3, #2
 810860c:	4403      	add	r3, r0
 810860e:	3344      	adds	r3, #68	; 0x44
 8108610:	681b      	ldr	r3, [r3, #0]
 8108612:	4419      	add	r1, r3
 8108614:	6878      	ldr	r0, [r7, #4]
 8108616:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8108618:	4613      	mov	r3, r2
 810861a:	00db      	lsls	r3, r3, #3
 810861c:	1a9b      	subs	r3, r3, r2
 810861e:	009b      	lsls	r3, r3, #2
 8108620:	4403      	add	r3, r0
 8108622:	3348      	adds	r3, #72	; 0x48
 8108624:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8108626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8108628:	2b00      	cmp	r3, #0
 810862a:	d113      	bne.n	8108654 <HAL_PCD_IRQHandler+0x31c>
 810862c:	6879      	ldr	r1, [r7, #4]
 810862e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8108630:	4613      	mov	r3, r2
 8108632:	00db      	lsls	r3, r3, #3
 8108634:	1a9b      	subs	r3, r3, r2
 8108636:	009b      	lsls	r3, r3, #2
 8108638:	440b      	add	r3, r1
 810863a:	3350      	adds	r3, #80	; 0x50
 810863c:	681b      	ldr	r3, [r3, #0]
 810863e:	2b00      	cmp	r3, #0
 8108640:	d108      	bne.n	8108654 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8108642:	687b      	ldr	r3, [r7, #4]
 8108644:	6818      	ldr	r0, [r3, #0]
 8108646:	687b      	ldr	r3, [r7, #4]
 8108648:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 810864c:	461a      	mov	r2, r3
 810864e:	2101      	movs	r1, #1
 8108650:	f009 ff82 	bl	8112558 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8108654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8108656:	b2db      	uxtb	r3, r3
 8108658:	4619      	mov	r1, r3
 810865a:	6878      	ldr	r0, [r7, #4]
 810865c:	f00e faf5 	bl	8116c4a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8108660:	693b      	ldr	r3, [r7, #16]
 8108662:	f003 0308 	and.w	r3, r3, #8
 8108666:	2b00      	cmp	r3, #0
 8108668:	d008      	beq.n	810867c <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 810866a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810866c:	015a      	lsls	r2, r3, #5
 810866e:	69fb      	ldr	r3, [r7, #28]
 8108670:	4413      	add	r3, r2
 8108672:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8108676:	461a      	mov	r2, r3
 8108678:	2308      	movs	r3, #8
 810867a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 810867c:	693b      	ldr	r3, [r7, #16]
 810867e:	f003 0310 	and.w	r3, r3, #16
 8108682:	2b00      	cmp	r3, #0
 8108684:	d008      	beq.n	8108698 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8108686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8108688:	015a      	lsls	r2, r3, #5
 810868a:	69fb      	ldr	r3, [r7, #28]
 810868c:	4413      	add	r3, r2
 810868e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8108692:	461a      	mov	r2, r3
 8108694:	2310      	movs	r3, #16
 8108696:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8108698:	693b      	ldr	r3, [r7, #16]
 810869a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 810869e:	2b00      	cmp	r3, #0
 81086a0:	d008      	beq.n	81086b4 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 81086a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81086a4:	015a      	lsls	r2, r3, #5
 81086a6:	69fb      	ldr	r3, [r7, #28]
 81086a8:	4413      	add	r3, r2
 81086aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 81086ae:	461a      	mov	r2, r3
 81086b0:	2340      	movs	r3, #64	; 0x40
 81086b2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 81086b4:	693b      	ldr	r3, [r7, #16]
 81086b6:	f003 0302 	and.w	r3, r3, #2
 81086ba:	2b00      	cmp	r3, #0
 81086bc:	d008      	beq.n	81086d0 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 81086be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81086c0:	015a      	lsls	r2, r3, #5
 81086c2:	69fb      	ldr	r3, [r7, #28]
 81086c4:	4413      	add	r3, r2
 81086c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 81086ca:	461a      	mov	r2, r3
 81086cc:	2302      	movs	r3, #2
 81086ce:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 81086d0:	693b      	ldr	r3, [r7, #16]
 81086d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 81086d6:	2b00      	cmp	r3, #0
 81086d8:	d003      	beq.n	81086e2 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 81086da:	6a79      	ldr	r1, [r7, #36]	; 0x24
 81086dc:	6878      	ldr	r0, [r7, #4]
 81086de:	f000 fbe6 	bl	8108eae <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 81086e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81086e4:	3301      	adds	r3, #1
 81086e6:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 81086e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81086ea:	085b      	lsrs	r3, r3, #1
 81086ec:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 81086ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81086f0:	2b00      	cmp	r3, #0
 81086f2:	f47f af49 	bne.w	8108588 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 81086f6:	687b      	ldr	r3, [r7, #4]
 81086f8:	681b      	ldr	r3, [r3, #0]
 81086fa:	4618      	mov	r0, r3
 81086fc:	f009 fe67 	bl	81123ce <USB_ReadInterrupts>
 8108700:	4603      	mov	r3, r0
 8108702:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8108706:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 810870a:	d122      	bne.n	8108752 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 810870c:	69fb      	ldr	r3, [r7, #28]
 810870e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8108712:	685b      	ldr	r3, [r3, #4]
 8108714:	69fa      	ldr	r2, [r7, #28]
 8108716:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 810871a:	f023 0301 	bic.w	r3, r3, #1
 810871e:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8108720:	687b      	ldr	r3, [r7, #4]
 8108722:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8108726:	2b01      	cmp	r3, #1
 8108728:	d108      	bne.n	810873c <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 810872a:	687b      	ldr	r3, [r7, #4]
 810872c:	2200      	movs	r2, #0
 810872e:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8108732:	2100      	movs	r1, #0
 8108734:	6878      	ldr	r0, [r7, #4]
 8108736:	f000 fd99 	bl	810926c <HAL_PCDEx_LPM_Callback>
 810873a:	e002      	b.n	8108742 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 810873c:	6878      	ldr	r0, [r7, #4]
 810873e:	f00e fafb 	bl	8116d38 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8108742:	687b      	ldr	r3, [r7, #4]
 8108744:	681b      	ldr	r3, [r3, #0]
 8108746:	695a      	ldr	r2, [r3, #20]
 8108748:	687b      	ldr	r3, [r7, #4]
 810874a:	681b      	ldr	r3, [r3, #0]
 810874c:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8108750:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8108752:	687b      	ldr	r3, [r7, #4]
 8108754:	681b      	ldr	r3, [r3, #0]
 8108756:	4618      	mov	r0, r3
 8108758:	f009 fe39 	bl	81123ce <USB_ReadInterrupts>
 810875c:	4603      	mov	r3, r0
 810875e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8108762:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8108766:	d112      	bne.n	810878e <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8108768:	69fb      	ldr	r3, [r7, #28]
 810876a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 810876e:	689b      	ldr	r3, [r3, #8]
 8108770:	f003 0301 	and.w	r3, r3, #1
 8108774:	2b01      	cmp	r3, #1
 8108776:	d102      	bne.n	810877e <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8108778:	6878      	ldr	r0, [r7, #4]
 810877a:	f00e fab7 	bl	8116cec <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 810877e:	687b      	ldr	r3, [r7, #4]
 8108780:	681b      	ldr	r3, [r3, #0]
 8108782:	695a      	ldr	r2, [r3, #20]
 8108784:	687b      	ldr	r3, [r7, #4]
 8108786:	681b      	ldr	r3, [r3, #0]
 8108788:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 810878c:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 810878e:	687b      	ldr	r3, [r7, #4]
 8108790:	681b      	ldr	r3, [r3, #0]
 8108792:	4618      	mov	r0, r3
 8108794:	f009 fe1b 	bl	81123ce <USB_ReadInterrupts>
 8108798:	4603      	mov	r3, r0
 810879a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 810879e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 81087a2:	d121      	bne.n	81087e8 <HAL_PCD_IRQHandler+0x4b0>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 81087a4:	687b      	ldr	r3, [r7, #4]
 81087a6:	681b      	ldr	r3, [r3, #0]
 81087a8:	695a      	ldr	r2, [r3, #20]
 81087aa:	687b      	ldr	r3, [r7, #4]
 81087ac:	681b      	ldr	r3, [r3, #0]
 81087ae:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 81087b2:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 81087b4:	687b      	ldr	r3, [r7, #4]
 81087b6:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 81087ba:	2b00      	cmp	r3, #0
 81087bc:	d111      	bne.n	81087e2 <HAL_PCD_IRQHandler+0x4aa>
      {
        hpcd->LPM_State = LPM_L1;
 81087be:	687b      	ldr	r3, [r7, #4]
 81087c0:	2201      	movs	r2, #1
 81087c2:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 81087c6:	687b      	ldr	r3, [r7, #4]
 81087c8:	681b      	ldr	r3, [r3, #0]
 81087ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81087cc:	089b      	lsrs	r3, r3, #2
 81087ce:	f003 020f 	and.w	r2, r3, #15
 81087d2:	687b      	ldr	r3, [r7, #4]
 81087d4:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 81087d8:	2101      	movs	r1, #1
 81087da:	6878      	ldr	r0, [r7, #4]
 81087dc:	f000 fd46 	bl	810926c <HAL_PCDEx_LPM_Callback>
 81087e0:	e002      	b.n	81087e8 <HAL_PCD_IRQHandler+0x4b0>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 81087e2:	6878      	ldr	r0, [r7, #4]
 81087e4:	f00e fa82 	bl	8116cec <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 81087e8:	687b      	ldr	r3, [r7, #4]
 81087ea:	681b      	ldr	r3, [r3, #0]
 81087ec:	4618      	mov	r0, r3
 81087ee:	f009 fdee 	bl	81123ce <USB_ReadInterrupts>
 81087f2:	4603      	mov	r3, r0
 81087f4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 81087f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 81087fc:	f040 80c7 	bne.w	810898e <HAL_PCD_IRQHandler+0x656>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8108800:	69fb      	ldr	r3, [r7, #28]
 8108802:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8108806:	685b      	ldr	r3, [r3, #4]
 8108808:	69fa      	ldr	r2, [r7, #28]
 810880a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 810880e:	f023 0301 	bic.w	r3, r3, #1
 8108812:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8108814:	687b      	ldr	r3, [r7, #4]
 8108816:	681b      	ldr	r3, [r3, #0]
 8108818:	2110      	movs	r1, #16
 810881a:	4618      	mov	r0, r3
 810881c:	f008 ffde 	bl	81117dc <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8108820:	2300      	movs	r3, #0
 8108822:	62fb      	str	r3, [r7, #44]	; 0x2c
 8108824:	e056      	b.n	81088d4 <HAL_PCD_IRQHandler+0x59c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8108826:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8108828:	015a      	lsls	r2, r3, #5
 810882a:	69fb      	ldr	r3, [r7, #28]
 810882c:	4413      	add	r3, r2
 810882e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8108832:	461a      	mov	r2, r3
 8108834:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8108838:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 810883a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810883c:	015a      	lsls	r2, r3, #5
 810883e:	69fb      	ldr	r3, [r7, #28]
 8108840:	4413      	add	r3, r2
 8108842:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8108846:	681b      	ldr	r3, [r3, #0]
 8108848:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 810884a:	0151      	lsls	r1, r2, #5
 810884c:	69fa      	ldr	r2, [r7, #28]
 810884e:	440a      	add	r2, r1
 8108850:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8108854:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8108858:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 810885a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810885c:	015a      	lsls	r2, r3, #5
 810885e:	69fb      	ldr	r3, [r7, #28]
 8108860:	4413      	add	r3, r2
 8108862:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8108866:	681b      	ldr	r3, [r3, #0]
 8108868:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 810886a:	0151      	lsls	r1, r2, #5
 810886c:	69fa      	ldr	r2, [r7, #28]
 810886e:	440a      	add	r2, r1
 8108870:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8108874:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8108878:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 810887a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810887c:	015a      	lsls	r2, r3, #5
 810887e:	69fb      	ldr	r3, [r7, #28]
 8108880:	4413      	add	r3, r2
 8108882:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8108886:	461a      	mov	r2, r3
 8108888:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 810888c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 810888e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8108890:	015a      	lsls	r2, r3, #5
 8108892:	69fb      	ldr	r3, [r7, #28]
 8108894:	4413      	add	r3, r2
 8108896:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 810889a:	681b      	ldr	r3, [r3, #0]
 810889c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 810889e:	0151      	lsls	r1, r2, #5
 81088a0:	69fa      	ldr	r2, [r7, #28]
 81088a2:	440a      	add	r2, r1
 81088a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 81088a8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 81088ac:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 81088ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 81088b0:	015a      	lsls	r2, r3, #5
 81088b2:	69fb      	ldr	r3, [r7, #28]
 81088b4:	4413      	add	r3, r2
 81088b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 81088ba:	681b      	ldr	r3, [r3, #0]
 81088bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 81088be:	0151      	lsls	r1, r2, #5
 81088c0:	69fa      	ldr	r2, [r7, #28]
 81088c2:	440a      	add	r2, r1
 81088c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 81088c8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 81088cc:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 81088ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 81088d0:	3301      	adds	r3, #1
 81088d2:	62fb      	str	r3, [r7, #44]	; 0x2c
 81088d4:	687b      	ldr	r3, [r7, #4]
 81088d6:	685b      	ldr	r3, [r3, #4]
 81088d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 81088da:	429a      	cmp	r2, r3
 81088dc:	d3a3      	bcc.n	8108826 <HAL_PCD_IRQHandler+0x4ee>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 81088de:	69fb      	ldr	r3, [r7, #28]
 81088e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 81088e4:	69db      	ldr	r3, [r3, #28]
 81088e6:	69fa      	ldr	r2, [r7, #28]
 81088e8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 81088ec:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 81088f0:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 81088f2:	687b      	ldr	r3, [r7, #4]
 81088f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81088f6:	2b00      	cmp	r3, #0
 81088f8:	d016      	beq.n	8108928 <HAL_PCD_IRQHandler+0x5f0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 81088fa:	69fb      	ldr	r3, [r7, #28]
 81088fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8108900:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8108904:	69fa      	ldr	r2, [r7, #28]
 8108906:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 810890a:	f043 030b 	orr.w	r3, r3, #11
 810890e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8108912:	69fb      	ldr	r3, [r7, #28]
 8108914:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8108918:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 810891a:	69fa      	ldr	r2, [r7, #28]
 810891c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8108920:	f043 030b 	orr.w	r3, r3, #11
 8108924:	6453      	str	r3, [r2, #68]	; 0x44
 8108926:	e015      	b.n	8108954 <HAL_PCD_IRQHandler+0x61c>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8108928:	69fb      	ldr	r3, [r7, #28]
 810892a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 810892e:	695b      	ldr	r3, [r3, #20]
 8108930:	69fa      	ldr	r2, [r7, #28]
 8108932:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8108936:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 810893a:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 810893e:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8108940:	69fb      	ldr	r3, [r7, #28]
 8108942:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8108946:	691b      	ldr	r3, [r3, #16]
 8108948:	69fa      	ldr	r2, [r7, #28]
 810894a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 810894e:	f043 030b 	orr.w	r3, r3, #11
 8108952:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8108954:	69fb      	ldr	r3, [r7, #28]
 8108956:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 810895a:	681b      	ldr	r3, [r3, #0]
 810895c:	69fa      	ldr	r2, [r7, #28]
 810895e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8108962:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8108966:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8108968:	687b      	ldr	r3, [r7, #4]
 810896a:	6818      	ldr	r0, [r3, #0]
 810896c:	687b      	ldr	r3, [r7, #4]
 810896e:	691b      	ldr	r3, [r3, #16]
 8108970:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8108972:	687b      	ldr	r3, [r7, #4]
 8108974:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8108978:	461a      	mov	r2, r3
 810897a:	f009 fded 	bl	8112558 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 810897e:	687b      	ldr	r3, [r7, #4]
 8108980:	681b      	ldr	r3, [r3, #0]
 8108982:	695a      	ldr	r2, [r3, #20]
 8108984:	687b      	ldr	r3, [r7, #4]
 8108986:	681b      	ldr	r3, [r3, #0]
 8108988:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 810898c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 810898e:	687b      	ldr	r3, [r7, #4]
 8108990:	681b      	ldr	r3, [r3, #0]
 8108992:	4618      	mov	r0, r3
 8108994:	f009 fd1b 	bl	81123ce <USB_ReadInterrupts>
 8108998:	4603      	mov	r3, r0
 810899a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 810899e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 81089a2:	d124      	bne.n	81089ee <HAL_PCD_IRQHandler+0x6b6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 81089a4:	687b      	ldr	r3, [r7, #4]
 81089a6:	681b      	ldr	r3, [r3, #0]
 81089a8:	4618      	mov	r0, r3
 81089aa:	f009 fdb1 	bl	8112510 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 81089ae:	687b      	ldr	r3, [r7, #4]
 81089b0:	681b      	ldr	r3, [r3, #0]
 81089b2:	4618      	mov	r0, r3
 81089b4:	f008 ff38 	bl	8111828 <USB_GetDevSpeed>
 81089b8:	4603      	mov	r3, r0
 81089ba:	461a      	mov	r2, r3
 81089bc:	687b      	ldr	r3, [r7, #4]
 81089be:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 81089c0:	687b      	ldr	r3, [r7, #4]
 81089c2:	681c      	ldr	r4, [r3, #0]
 81089c4:	f000 fe60 	bl	8109688 <HAL_RCC_GetHCLKFreq>
 81089c8:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 81089ca:	687b      	ldr	r3, [r7, #4]
 81089cc:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 81089ce:	b2db      	uxtb	r3, r3
 81089d0:	461a      	mov	r2, r3
 81089d2:	4620      	mov	r0, r4
 81089d4:	f008 fe60 	bl	8111698 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 81089d8:	6878      	ldr	r0, [r7, #4]
 81089da:	f00e f95e 	bl	8116c9a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 81089de:	687b      	ldr	r3, [r7, #4]
 81089e0:	681b      	ldr	r3, [r3, #0]
 81089e2:	695a      	ldr	r2, [r3, #20]
 81089e4:	687b      	ldr	r3, [r7, #4]
 81089e6:	681b      	ldr	r3, [r3, #0]
 81089e8:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 81089ec:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 81089ee:	687b      	ldr	r3, [r7, #4]
 81089f0:	681b      	ldr	r3, [r3, #0]
 81089f2:	4618      	mov	r0, r3
 81089f4:	f009 fceb 	bl	81123ce <USB_ReadInterrupts>
 81089f8:	4603      	mov	r3, r0
 81089fa:	f003 0308 	and.w	r3, r3, #8
 81089fe:	2b08      	cmp	r3, #8
 8108a00:	d10a      	bne.n	8108a18 <HAL_PCD_IRQHandler+0x6e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8108a02:	6878      	ldr	r0, [r7, #4]
 8108a04:	f00e f93b 	bl	8116c7e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8108a08:	687b      	ldr	r3, [r7, #4]
 8108a0a:	681b      	ldr	r3, [r3, #0]
 8108a0c:	695a      	ldr	r2, [r3, #20]
 8108a0e:	687b      	ldr	r3, [r7, #4]
 8108a10:	681b      	ldr	r3, [r3, #0]
 8108a12:	f002 0208 	and.w	r2, r2, #8
 8108a16:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8108a18:	687b      	ldr	r3, [r7, #4]
 8108a1a:	681b      	ldr	r3, [r3, #0]
 8108a1c:	4618      	mov	r0, r3
 8108a1e:	f009 fcd6 	bl	81123ce <USB_ReadInterrupts>
 8108a22:	4603      	mov	r3, r0
 8108a24:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8108a28:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8108a2c:	d10f      	bne.n	8108a4e <HAL_PCD_IRQHandler+0x716>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8108a2e:	2300      	movs	r3, #0
 8108a30:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8108a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8108a34:	b2db      	uxtb	r3, r3
 8108a36:	4619      	mov	r1, r3
 8108a38:	6878      	ldr	r0, [r7, #4]
 8108a3a:	f00e f99d 	bl	8116d78 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8108a3e:	687b      	ldr	r3, [r7, #4]
 8108a40:	681b      	ldr	r3, [r3, #0]
 8108a42:	695a      	ldr	r2, [r3, #20]
 8108a44:	687b      	ldr	r3, [r7, #4]
 8108a46:	681b      	ldr	r3, [r3, #0]
 8108a48:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8108a4c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8108a4e:	687b      	ldr	r3, [r7, #4]
 8108a50:	681b      	ldr	r3, [r3, #0]
 8108a52:	4618      	mov	r0, r3
 8108a54:	f009 fcbb 	bl	81123ce <USB_ReadInterrupts>
 8108a58:	4603      	mov	r3, r0
 8108a5a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8108a5e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8108a62:	d10f      	bne.n	8108a84 <HAL_PCD_IRQHandler+0x74c>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8108a64:	2300      	movs	r3, #0
 8108a66:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8108a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8108a6a:	b2db      	uxtb	r3, r3
 8108a6c:	4619      	mov	r1, r3
 8108a6e:	6878      	ldr	r0, [r7, #4]
 8108a70:	f00e f970 	bl	8116d54 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8108a74:	687b      	ldr	r3, [r7, #4]
 8108a76:	681b      	ldr	r3, [r3, #0]
 8108a78:	695a      	ldr	r2, [r3, #20]
 8108a7a:	687b      	ldr	r3, [r7, #4]
 8108a7c:	681b      	ldr	r3, [r3, #0]
 8108a7e:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8108a82:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8108a84:	687b      	ldr	r3, [r7, #4]
 8108a86:	681b      	ldr	r3, [r3, #0]
 8108a88:	4618      	mov	r0, r3
 8108a8a:	f009 fca0 	bl	81123ce <USB_ReadInterrupts>
 8108a8e:	4603      	mov	r3, r0
 8108a90:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8108a94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8108a98:	d10a      	bne.n	8108ab0 <HAL_PCD_IRQHandler+0x778>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8108a9a:	6878      	ldr	r0, [r7, #4]
 8108a9c:	f00e f97e 	bl	8116d9c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8108aa0:	687b      	ldr	r3, [r7, #4]
 8108aa2:	681b      	ldr	r3, [r3, #0]
 8108aa4:	695a      	ldr	r2, [r3, #20]
 8108aa6:	687b      	ldr	r3, [r7, #4]
 8108aa8:	681b      	ldr	r3, [r3, #0]
 8108aaa:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8108aae:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8108ab0:	687b      	ldr	r3, [r7, #4]
 8108ab2:	681b      	ldr	r3, [r3, #0]
 8108ab4:	4618      	mov	r0, r3
 8108ab6:	f009 fc8a 	bl	81123ce <USB_ReadInterrupts>
 8108aba:	4603      	mov	r3, r0
 8108abc:	f003 0304 	and.w	r3, r3, #4
 8108ac0:	2b04      	cmp	r3, #4
 8108ac2:	d115      	bne.n	8108af0 <HAL_PCD_IRQHandler+0x7b8>
    {
      temp = hpcd->Instance->GOTGINT;
 8108ac4:	687b      	ldr	r3, [r7, #4]
 8108ac6:	681b      	ldr	r3, [r3, #0]
 8108ac8:	685b      	ldr	r3, [r3, #4]
 8108aca:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8108acc:	69bb      	ldr	r3, [r7, #24]
 8108ace:	f003 0304 	and.w	r3, r3, #4
 8108ad2:	2b00      	cmp	r3, #0
 8108ad4:	d002      	beq.n	8108adc <HAL_PCD_IRQHandler+0x7a4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8108ad6:	6878      	ldr	r0, [r7, #4]
 8108ad8:	f00e f96e 	bl	8116db8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8108adc:	687b      	ldr	r3, [r7, #4]
 8108ade:	681b      	ldr	r3, [r3, #0]
 8108ae0:	6859      	ldr	r1, [r3, #4]
 8108ae2:	687b      	ldr	r3, [r7, #4]
 8108ae4:	681b      	ldr	r3, [r3, #0]
 8108ae6:	69ba      	ldr	r2, [r7, #24]
 8108ae8:	430a      	orrs	r2, r1
 8108aea:	605a      	str	r2, [r3, #4]
 8108aec:	e000      	b.n	8108af0 <HAL_PCD_IRQHandler+0x7b8>
      return;
 8108aee:	bf00      	nop
    }
  }
}
 8108af0:	3734      	adds	r7, #52	; 0x34
 8108af2:	46bd      	mov	sp, r7
 8108af4:	bd90      	pop	{r4, r7, pc}

08108af6 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8108af6:	b580      	push	{r7, lr}
 8108af8:	b082      	sub	sp, #8
 8108afa:	af00      	add	r7, sp, #0
 8108afc:	6078      	str	r0, [r7, #4]
 8108afe:	460b      	mov	r3, r1
 8108b00:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8108b02:	687b      	ldr	r3, [r7, #4]
 8108b04:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8108b08:	2b01      	cmp	r3, #1
 8108b0a:	d101      	bne.n	8108b10 <HAL_PCD_SetAddress+0x1a>
 8108b0c:	2302      	movs	r3, #2
 8108b0e:	e013      	b.n	8108b38 <HAL_PCD_SetAddress+0x42>
 8108b10:	687b      	ldr	r3, [r7, #4]
 8108b12:	2201      	movs	r2, #1
 8108b14:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8108b18:	687b      	ldr	r3, [r7, #4]
 8108b1a:	78fa      	ldrb	r2, [r7, #3]
 8108b1c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8108b20:	687b      	ldr	r3, [r7, #4]
 8108b22:	681b      	ldr	r3, [r3, #0]
 8108b24:	78fa      	ldrb	r2, [r7, #3]
 8108b26:	4611      	mov	r1, r2
 8108b28:	4618      	mov	r0, r3
 8108b2a:	f009 fc2a 	bl	8112382 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8108b2e:	687b      	ldr	r3, [r7, #4]
 8108b30:	2200      	movs	r2, #0
 8108b32:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8108b36:	2300      	movs	r3, #0
}
 8108b38:	4618      	mov	r0, r3
 8108b3a:	3708      	adds	r7, #8
 8108b3c:	46bd      	mov	sp, r7
 8108b3e:	bd80      	pop	{r7, pc}

08108b40 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8108b40:	b580      	push	{r7, lr}
 8108b42:	b084      	sub	sp, #16
 8108b44:	af00      	add	r7, sp, #0
 8108b46:	6078      	str	r0, [r7, #4]
 8108b48:	4608      	mov	r0, r1
 8108b4a:	4611      	mov	r1, r2
 8108b4c:	461a      	mov	r2, r3
 8108b4e:	4603      	mov	r3, r0
 8108b50:	70fb      	strb	r3, [r7, #3]
 8108b52:	460b      	mov	r3, r1
 8108b54:	803b      	strh	r3, [r7, #0]
 8108b56:	4613      	mov	r3, r2
 8108b58:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8108b5a:	2300      	movs	r3, #0
 8108b5c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8108b5e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8108b62:	2b00      	cmp	r3, #0
 8108b64:	da0f      	bge.n	8108b86 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8108b66:	78fb      	ldrb	r3, [r7, #3]
 8108b68:	f003 020f 	and.w	r2, r3, #15
 8108b6c:	4613      	mov	r3, r2
 8108b6e:	00db      	lsls	r3, r3, #3
 8108b70:	1a9b      	subs	r3, r3, r2
 8108b72:	009b      	lsls	r3, r3, #2
 8108b74:	3338      	adds	r3, #56	; 0x38
 8108b76:	687a      	ldr	r2, [r7, #4]
 8108b78:	4413      	add	r3, r2
 8108b7a:	3304      	adds	r3, #4
 8108b7c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8108b7e:	68fb      	ldr	r3, [r7, #12]
 8108b80:	2201      	movs	r2, #1
 8108b82:	705a      	strb	r2, [r3, #1]
 8108b84:	e00f      	b.n	8108ba6 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8108b86:	78fb      	ldrb	r3, [r7, #3]
 8108b88:	f003 020f 	and.w	r2, r3, #15
 8108b8c:	4613      	mov	r3, r2
 8108b8e:	00db      	lsls	r3, r3, #3
 8108b90:	1a9b      	subs	r3, r3, r2
 8108b92:	009b      	lsls	r3, r3, #2
 8108b94:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8108b98:	687a      	ldr	r2, [r7, #4]
 8108b9a:	4413      	add	r3, r2
 8108b9c:	3304      	adds	r3, #4
 8108b9e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8108ba0:	68fb      	ldr	r3, [r7, #12]
 8108ba2:	2200      	movs	r2, #0
 8108ba4:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8108ba6:	78fb      	ldrb	r3, [r7, #3]
 8108ba8:	f003 030f 	and.w	r3, r3, #15
 8108bac:	b2da      	uxtb	r2, r3
 8108bae:	68fb      	ldr	r3, [r7, #12]
 8108bb0:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8108bb2:	883a      	ldrh	r2, [r7, #0]
 8108bb4:	68fb      	ldr	r3, [r7, #12]
 8108bb6:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8108bb8:	68fb      	ldr	r3, [r7, #12]
 8108bba:	78ba      	ldrb	r2, [r7, #2]
 8108bbc:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8108bbe:	68fb      	ldr	r3, [r7, #12]
 8108bc0:	785b      	ldrb	r3, [r3, #1]
 8108bc2:	2b00      	cmp	r3, #0
 8108bc4:	d004      	beq.n	8108bd0 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8108bc6:	68fb      	ldr	r3, [r7, #12]
 8108bc8:	781b      	ldrb	r3, [r3, #0]
 8108bca:	b29a      	uxth	r2, r3
 8108bcc:	68fb      	ldr	r3, [r7, #12]
 8108bce:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8108bd0:	78bb      	ldrb	r3, [r7, #2]
 8108bd2:	2b02      	cmp	r3, #2
 8108bd4:	d102      	bne.n	8108bdc <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8108bd6:	68fb      	ldr	r3, [r7, #12]
 8108bd8:	2200      	movs	r2, #0
 8108bda:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8108bdc:	687b      	ldr	r3, [r7, #4]
 8108bde:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8108be2:	2b01      	cmp	r3, #1
 8108be4:	d101      	bne.n	8108bea <HAL_PCD_EP_Open+0xaa>
 8108be6:	2302      	movs	r3, #2
 8108be8:	e00e      	b.n	8108c08 <HAL_PCD_EP_Open+0xc8>
 8108bea:	687b      	ldr	r3, [r7, #4]
 8108bec:	2201      	movs	r2, #1
 8108bee:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8108bf2:	687b      	ldr	r3, [r7, #4]
 8108bf4:	681b      	ldr	r3, [r3, #0]
 8108bf6:	68f9      	ldr	r1, [r7, #12]
 8108bf8:	4618      	mov	r0, r3
 8108bfa:	f008 fe3a 	bl	8111872 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8108bfe:	687b      	ldr	r3, [r7, #4]
 8108c00:	2200      	movs	r2, #0
 8108c02:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8108c06:	7afb      	ldrb	r3, [r7, #11]
}
 8108c08:	4618      	mov	r0, r3
 8108c0a:	3710      	adds	r7, #16
 8108c0c:	46bd      	mov	sp, r7
 8108c0e:	bd80      	pop	{r7, pc}

08108c10 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8108c10:	b580      	push	{r7, lr}
 8108c12:	b086      	sub	sp, #24
 8108c14:	af00      	add	r7, sp, #0
 8108c16:	60f8      	str	r0, [r7, #12]
 8108c18:	607a      	str	r2, [r7, #4]
 8108c1a:	603b      	str	r3, [r7, #0]
 8108c1c:	460b      	mov	r3, r1
 8108c1e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8108c20:	7afb      	ldrb	r3, [r7, #11]
 8108c22:	f003 020f 	and.w	r2, r3, #15
 8108c26:	4613      	mov	r3, r2
 8108c28:	00db      	lsls	r3, r3, #3
 8108c2a:	1a9b      	subs	r3, r3, r2
 8108c2c:	009b      	lsls	r3, r3, #2
 8108c2e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8108c32:	68fa      	ldr	r2, [r7, #12]
 8108c34:	4413      	add	r3, r2
 8108c36:	3304      	adds	r3, #4
 8108c38:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8108c3a:	697b      	ldr	r3, [r7, #20]
 8108c3c:	687a      	ldr	r2, [r7, #4]
 8108c3e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8108c40:	697b      	ldr	r3, [r7, #20]
 8108c42:	683a      	ldr	r2, [r7, #0]
 8108c44:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8108c46:	697b      	ldr	r3, [r7, #20]
 8108c48:	2200      	movs	r2, #0
 8108c4a:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8108c4c:	697b      	ldr	r3, [r7, #20]
 8108c4e:	2200      	movs	r2, #0
 8108c50:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8108c52:	7afb      	ldrb	r3, [r7, #11]
 8108c54:	f003 030f 	and.w	r3, r3, #15
 8108c58:	b2da      	uxtb	r2, r3
 8108c5a:	697b      	ldr	r3, [r7, #20]
 8108c5c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8108c5e:	68fb      	ldr	r3, [r7, #12]
 8108c60:	691b      	ldr	r3, [r3, #16]
 8108c62:	2b01      	cmp	r3, #1
 8108c64:	d102      	bne.n	8108c6c <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8108c66:	687a      	ldr	r2, [r7, #4]
 8108c68:	697b      	ldr	r3, [r7, #20]
 8108c6a:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8108c6c:	7afb      	ldrb	r3, [r7, #11]
 8108c6e:	f003 030f 	and.w	r3, r3, #15
 8108c72:	2b00      	cmp	r3, #0
 8108c74:	d109      	bne.n	8108c8a <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8108c76:	68fb      	ldr	r3, [r7, #12]
 8108c78:	6818      	ldr	r0, [r3, #0]
 8108c7a:	68fb      	ldr	r3, [r7, #12]
 8108c7c:	691b      	ldr	r3, [r3, #16]
 8108c7e:	b2db      	uxtb	r3, r3
 8108c80:	461a      	mov	r2, r3
 8108c82:	6979      	ldr	r1, [r7, #20]
 8108c84:	f009 f8c0 	bl	8111e08 <USB_EP0StartXfer>
 8108c88:	e008      	b.n	8108c9c <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8108c8a:	68fb      	ldr	r3, [r7, #12]
 8108c8c:	6818      	ldr	r0, [r3, #0]
 8108c8e:	68fb      	ldr	r3, [r7, #12]
 8108c90:	691b      	ldr	r3, [r3, #16]
 8108c92:	b2db      	uxtb	r3, r3
 8108c94:	461a      	mov	r2, r3
 8108c96:	6979      	ldr	r1, [r7, #20]
 8108c98:	f008 fe72 	bl	8111980 <USB_EPStartXfer>
  }

  return HAL_OK;
 8108c9c:	2300      	movs	r3, #0
}
 8108c9e:	4618      	mov	r0, r3
 8108ca0:	3718      	adds	r7, #24
 8108ca2:	46bd      	mov	sp, r7
 8108ca4:	bd80      	pop	{r7, pc}

08108ca6 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8108ca6:	b580      	push	{r7, lr}
 8108ca8:	b086      	sub	sp, #24
 8108caa:	af00      	add	r7, sp, #0
 8108cac:	60f8      	str	r0, [r7, #12]
 8108cae:	607a      	str	r2, [r7, #4]
 8108cb0:	603b      	str	r3, [r7, #0]
 8108cb2:	460b      	mov	r3, r1
 8108cb4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8108cb6:	7afb      	ldrb	r3, [r7, #11]
 8108cb8:	f003 020f 	and.w	r2, r3, #15
 8108cbc:	4613      	mov	r3, r2
 8108cbe:	00db      	lsls	r3, r3, #3
 8108cc0:	1a9b      	subs	r3, r3, r2
 8108cc2:	009b      	lsls	r3, r3, #2
 8108cc4:	3338      	adds	r3, #56	; 0x38
 8108cc6:	68fa      	ldr	r2, [r7, #12]
 8108cc8:	4413      	add	r3, r2
 8108cca:	3304      	adds	r3, #4
 8108ccc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8108cce:	697b      	ldr	r3, [r7, #20]
 8108cd0:	687a      	ldr	r2, [r7, #4]
 8108cd2:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8108cd4:	697b      	ldr	r3, [r7, #20]
 8108cd6:	683a      	ldr	r2, [r7, #0]
 8108cd8:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8108cda:	697b      	ldr	r3, [r7, #20]
 8108cdc:	2200      	movs	r2, #0
 8108cde:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8108ce0:	697b      	ldr	r3, [r7, #20]
 8108ce2:	2201      	movs	r2, #1
 8108ce4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8108ce6:	7afb      	ldrb	r3, [r7, #11]
 8108ce8:	f003 030f 	and.w	r3, r3, #15
 8108cec:	b2da      	uxtb	r2, r3
 8108cee:	697b      	ldr	r3, [r7, #20]
 8108cf0:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8108cf2:	68fb      	ldr	r3, [r7, #12]
 8108cf4:	691b      	ldr	r3, [r3, #16]
 8108cf6:	2b01      	cmp	r3, #1
 8108cf8:	d102      	bne.n	8108d00 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8108cfa:	687a      	ldr	r2, [r7, #4]
 8108cfc:	697b      	ldr	r3, [r7, #20]
 8108cfe:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8108d00:	7afb      	ldrb	r3, [r7, #11]
 8108d02:	f003 030f 	and.w	r3, r3, #15
 8108d06:	2b00      	cmp	r3, #0
 8108d08:	d109      	bne.n	8108d1e <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8108d0a:	68fb      	ldr	r3, [r7, #12]
 8108d0c:	6818      	ldr	r0, [r3, #0]
 8108d0e:	68fb      	ldr	r3, [r7, #12]
 8108d10:	691b      	ldr	r3, [r3, #16]
 8108d12:	b2db      	uxtb	r3, r3
 8108d14:	461a      	mov	r2, r3
 8108d16:	6979      	ldr	r1, [r7, #20]
 8108d18:	f009 f876 	bl	8111e08 <USB_EP0StartXfer>
 8108d1c:	e008      	b.n	8108d30 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8108d1e:	68fb      	ldr	r3, [r7, #12]
 8108d20:	6818      	ldr	r0, [r3, #0]
 8108d22:	68fb      	ldr	r3, [r7, #12]
 8108d24:	691b      	ldr	r3, [r3, #16]
 8108d26:	b2db      	uxtb	r3, r3
 8108d28:	461a      	mov	r2, r3
 8108d2a:	6979      	ldr	r1, [r7, #20]
 8108d2c:	f008 fe28 	bl	8111980 <USB_EPStartXfer>
  }

  return HAL_OK;
 8108d30:	2300      	movs	r3, #0
}
 8108d32:	4618      	mov	r0, r3
 8108d34:	3718      	adds	r7, #24
 8108d36:	46bd      	mov	sp, r7
 8108d38:	bd80      	pop	{r7, pc}

08108d3a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8108d3a:	b580      	push	{r7, lr}
 8108d3c:	b084      	sub	sp, #16
 8108d3e:	af00      	add	r7, sp, #0
 8108d40:	6078      	str	r0, [r7, #4]
 8108d42:	460b      	mov	r3, r1
 8108d44:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8108d46:	78fb      	ldrb	r3, [r7, #3]
 8108d48:	f003 020f 	and.w	r2, r3, #15
 8108d4c:	687b      	ldr	r3, [r7, #4]
 8108d4e:	685b      	ldr	r3, [r3, #4]
 8108d50:	429a      	cmp	r2, r3
 8108d52:	d901      	bls.n	8108d58 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8108d54:	2301      	movs	r3, #1
 8108d56:	e050      	b.n	8108dfa <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8108d58:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8108d5c:	2b00      	cmp	r3, #0
 8108d5e:	da0f      	bge.n	8108d80 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8108d60:	78fb      	ldrb	r3, [r7, #3]
 8108d62:	f003 020f 	and.w	r2, r3, #15
 8108d66:	4613      	mov	r3, r2
 8108d68:	00db      	lsls	r3, r3, #3
 8108d6a:	1a9b      	subs	r3, r3, r2
 8108d6c:	009b      	lsls	r3, r3, #2
 8108d6e:	3338      	adds	r3, #56	; 0x38
 8108d70:	687a      	ldr	r2, [r7, #4]
 8108d72:	4413      	add	r3, r2
 8108d74:	3304      	adds	r3, #4
 8108d76:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8108d78:	68fb      	ldr	r3, [r7, #12]
 8108d7a:	2201      	movs	r2, #1
 8108d7c:	705a      	strb	r2, [r3, #1]
 8108d7e:	e00d      	b.n	8108d9c <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8108d80:	78fa      	ldrb	r2, [r7, #3]
 8108d82:	4613      	mov	r3, r2
 8108d84:	00db      	lsls	r3, r3, #3
 8108d86:	1a9b      	subs	r3, r3, r2
 8108d88:	009b      	lsls	r3, r3, #2
 8108d8a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8108d8e:	687a      	ldr	r2, [r7, #4]
 8108d90:	4413      	add	r3, r2
 8108d92:	3304      	adds	r3, #4
 8108d94:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8108d96:	68fb      	ldr	r3, [r7, #12]
 8108d98:	2200      	movs	r2, #0
 8108d9a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8108d9c:	68fb      	ldr	r3, [r7, #12]
 8108d9e:	2201      	movs	r2, #1
 8108da0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8108da2:	78fb      	ldrb	r3, [r7, #3]
 8108da4:	f003 030f 	and.w	r3, r3, #15
 8108da8:	b2da      	uxtb	r2, r3
 8108daa:	68fb      	ldr	r3, [r7, #12]
 8108dac:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8108dae:	687b      	ldr	r3, [r7, #4]
 8108db0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8108db4:	2b01      	cmp	r3, #1
 8108db6:	d101      	bne.n	8108dbc <HAL_PCD_EP_SetStall+0x82>
 8108db8:	2302      	movs	r3, #2
 8108dba:	e01e      	b.n	8108dfa <HAL_PCD_EP_SetStall+0xc0>
 8108dbc:	687b      	ldr	r3, [r7, #4]
 8108dbe:	2201      	movs	r2, #1
 8108dc0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8108dc4:	687b      	ldr	r3, [r7, #4]
 8108dc6:	681b      	ldr	r3, [r3, #0]
 8108dc8:	68f9      	ldr	r1, [r7, #12]
 8108dca:	4618      	mov	r0, r3
 8108dcc:	f009 fa05 	bl	81121da <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8108dd0:	78fb      	ldrb	r3, [r7, #3]
 8108dd2:	f003 030f 	and.w	r3, r3, #15
 8108dd6:	2b00      	cmp	r3, #0
 8108dd8:	d10a      	bne.n	8108df0 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8108dda:	687b      	ldr	r3, [r7, #4]
 8108ddc:	6818      	ldr	r0, [r3, #0]
 8108dde:	687b      	ldr	r3, [r7, #4]
 8108de0:	691b      	ldr	r3, [r3, #16]
 8108de2:	b2d9      	uxtb	r1, r3
 8108de4:	687b      	ldr	r3, [r7, #4]
 8108de6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8108dea:	461a      	mov	r2, r3
 8108dec:	f009 fbb4 	bl	8112558 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8108df0:	687b      	ldr	r3, [r7, #4]
 8108df2:	2200      	movs	r2, #0
 8108df4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8108df8:	2300      	movs	r3, #0
}
 8108dfa:	4618      	mov	r0, r3
 8108dfc:	3710      	adds	r7, #16
 8108dfe:	46bd      	mov	sp, r7
 8108e00:	bd80      	pop	{r7, pc}

08108e02 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8108e02:	b580      	push	{r7, lr}
 8108e04:	b084      	sub	sp, #16
 8108e06:	af00      	add	r7, sp, #0
 8108e08:	6078      	str	r0, [r7, #4]
 8108e0a:	460b      	mov	r3, r1
 8108e0c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8108e0e:	78fb      	ldrb	r3, [r7, #3]
 8108e10:	f003 020f 	and.w	r2, r3, #15
 8108e14:	687b      	ldr	r3, [r7, #4]
 8108e16:	685b      	ldr	r3, [r3, #4]
 8108e18:	429a      	cmp	r2, r3
 8108e1a:	d901      	bls.n	8108e20 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8108e1c:	2301      	movs	r3, #1
 8108e1e:	e042      	b.n	8108ea6 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8108e20:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8108e24:	2b00      	cmp	r3, #0
 8108e26:	da0f      	bge.n	8108e48 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8108e28:	78fb      	ldrb	r3, [r7, #3]
 8108e2a:	f003 020f 	and.w	r2, r3, #15
 8108e2e:	4613      	mov	r3, r2
 8108e30:	00db      	lsls	r3, r3, #3
 8108e32:	1a9b      	subs	r3, r3, r2
 8108e34:	009b      	lsls	r3, r3, #2
 8108e36:	3338      	adds	r3, #56	; 0x38
 8108e38:	687a      	ldr	r2, [r7, #4]
 8108e3a:	4413      	add	r3, r2
 8108e3c:	3304      	adds	r3, #4
 8108e3e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8108e40:	68fb      	ldr	r3, [r7, #12]
 8108e42:	2201      	movs	r2, #1
 8108e44:	705a      	strb	r2, [r3, #1]
 8108e46:	e00f      	b.n	8108e68 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8108e48:	78fb      	ldrb	r3, [r7, #3]
 8108e4a:	f003 020f 	and.w	r2, r3, #15
 8108e4e:	4613      	mov	r3, r2
 8108e50:	00db      	lsls	r3, r3, #3
 8108e52:	1a9b      	subs	r3, r3, r2
 8108e54:	009b      	lsls	r3, r3, #2
 8108e56:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8108e5a:	687a      	ldr	r2, [r7, #4]
 8108e5c:	4413      	add	r3, r2
 8108e5e:	3304      	adds	r3, #4
 8108e60:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8108e62:	68fb      	ldr	r3, [r7, #12]
 8108e64:	2200      	movs	r2, #0
 8108e66:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8108e68:	68fb      	ldr	r3, [r7, #12]
 8108e6a:	2200      	movs	r2, #0
 8108e6c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8108e6e:	78fb      	ldrb	r3, [r7, #3]
 8108e70:	f003 030f 	and.w	r3, r3, #15
 8108e74:	b2da      	uxtb	r2, r3
 8108e76:	68fb      	ldr	r3, [r7, #12]
 8108e78:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8108e7a:	687b      	ldr	r3, [r7, #4]
 8108e7c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8108e80:	2b01      	cmp	r3, #1
 8108e82:	d101      	bne.n	8108e88 <HAL_PCD_EP_ClrStall+0x86>
 8108e84:	2302      	movs	r3, #2
 8108e86:	e00e      	b.n	8108ea6 <HAL_PCD_EP_ClrStall+0xa4>
 8108e88:	687b      	ldr	r3, [r7, #4]
 8108e8a:	2201      	movs	r2, #1
 8108e8c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8108e90:	687b      	ldr	r3, [r7, #4]
 8108e92:	681b      	ldr	r3, [r3, #0]
 8108e94:	68f9      	ldr	r1, [r7, #12]
 8108e96:	4618      	mov	r0, r3
 8108e98:	f009 fa0d 	bl	81122b6 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8108e9c:	687b      	ldr	r3, [r7, #4]
 8108e9e:	2200      	movs	r2, #0
 8108ea0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8108ea4:	2300      	movs	r3, #0
}
 8108ea6:	4618      	mov	r0, r3
 8108ea8:	3710      	adds	r7, #16
 8108eaa:	46bd      	mov	sp, r7
 8108eac:	bd80      	pop	{r7, pc}

08108eae <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8108eae:	b580      	push	{r7, lr}
 8108eb0:	b08a      	sub	sp, #40	; 0x28
 8108eb2:	af02      	add	r7, sp, #8
 8108eb4:	6078      	str	r0, [r7, #4]
 8108eb6:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8108eb8:	687b      	ldr	r3, [r7, #4]
 8108eba:	681b      	ldr	r3, [r3, #0]
 8108ebc:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8108ebe:	697b      	ldr	r3, [r7, #20]
 8108ec0:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8108ec2:	683a      	ldr	r2, [r7, #0]
 8108ec4:	4613      	mov	r3, r2
 8108ec6:	00db      	lsls	r3, r3, #3
 8108ec8:	1a9b      	subs	r3, r3, r2
 8108eca:	009b      	lsls	r3, r3, #2
 8108ecc:	3338      	adds	r3, #56	; 0x38
 8108ece:	687a      	ldr	r2, [r7, #4]
 8108ed0:	4413      	add	r3, r2
 8108ed2:	3304      	adds	r3, #4
 8108ed4:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8108ed6:	68fb      	ldr	r3, [r7, #12]
 8108ed8:	699a      	ldr	r2, [r3, #24]
 8108eda:	68fb      	ldr	r3, [r7, #12]
 8108edc:	695b      	ldr	r3, [r3, #20]
 8108ede:	429a      	cmp	r2, r3
 8108ee0:	d901      	bls.n	8108ee6 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8108ee2:	2301      	movs	r3, #1
 8108ee4:	e06c      	b.n	8108fc0 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8108ee6:	68fb      	ldr	r3, [r7, #12]
 8108ee8:	695a      	ldr	r2, [r3, #20]
 8108eea:	68fb      	ldr	r3, [r7, #12]
 8108eec:	699b      	ldr	r3, [r3, #24]
 8108eee:	1ad3      	subs	r3, r2, r3
 8108ef0:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8108ef2:	68fb      	ldr	r3, [r7, #12]
 8108ef4:	689b      	ldr	r3, [r3, #8]
 8108ef6:	69fa      	ldr	r2, [r7, #28]
 8108ef8:	429a      	cmp	r2, r3
 8108efa:	d902      	bls.n	8108f02 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8108efc:	68fb      	ldr	r3, [r7, #12]
 8108efe:	689b      	ldr	r3, [r3, #8]
 8108f00:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8108f02:	69fb      	ldr	r3, [r7, #28]
 8108f04:	3303      	adds	r3, #3
 8108f06:	089b      	lsrs	r3, r3, #2
 8108f08:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8108f0a:	e02b      	b.n	8108f64 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8108f0c:	68fb      	ldr	r3, [r7, #12]
 8108f0e:	695a      	ldr	r2, [r3, #20]
 8108f10:	68fb      	ldr	r3, [r7, #12]
 8108f12:	699b      	ldr	r3, [r3, #24]
 8108f14:	1ad3      	subs	r3, r2, r3
 8108f16:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8108f18:	68fb      	ldr	r3, [r7, #12]
 8108f1a:	689b      	ldr	r3, [r3, #8]
 8108f1c:	69fa      	ldr	r2, [r7, #28]
 8108f1e:	429a      	cmp	r2, r3
 8108f20:	d902      	bls.n	8108f28 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8108f22:	68fb      	ldr	r3, [r7, #12]
 8108f24:	689b      	ldr	r3, [r3, #8]
 8108f26:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8108f28:	69fb      	ldr	r3, [r7, #28]
 8108f2a:	3303      	adds	r3, #3
 8108f2c:	089b      	lsrs	r3, r3, #2
 8108f2e:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8108f30:	68fb      	ldr	r3, [r7, #12]
 8108f32:	68d9      	ldr	r1, [r3, #12]
 8108f34:	683b      	ldr	r3, [r7, #0]
 8108f36:	b2da      	uxtb	r2, r3
 8108f38:	69fb      	ldr	r3, [r7, #28]
 8108f3a:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8108f3c:	687b      	ldr	r3, [r7, #4]
 8108f3e:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8108f40:	b2db      	uxtb	r3, r3
 8108f42:	9300      	str	r3, [sp, #0]
 8108f44:	4603      	mov	r3, r0
 8108f46:	6978      	ldr	r0, [r7, #20]
 8108f48:	f009 f8b1 	bl	81120ae <USB_WritePacket>

    ep->xfer_buff  += len;
 8108f4c:	68fb      	ldr	r3, [r7, #12]
 8108f4e:	68da      	ldr	r2, [r3, #12]
 8108f50:	69fb      	ldr	r3, [r7, #28]
 8108f52:	441a      	add	r2, r3
 8108f54:	68fb      	ldr	r3, [r7, #12]
 8108f56:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8108f58:	68fb      	ldr	r3, [r7, #12]
 8108f5a:	699a      	ldr	r2, [r3, #24]
 8108f5c:	69fb      	ldr	r3, [r7, #28]
 8108f5e:	441a      	add	r2, r3
 8108f60:	68fb      	ldr	r3, [r7, #12]
 8108f62:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8108f64:	683b      	ldr	r3, [r7, #0]
 8108f66:	015a      	lsls	r2, r3, #5
 8108f68:	693b      	ldr	r3, [r7, #16]
 8108f6a:	4413      	add	r3, r2
 8108f6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8108f70:	699b      	ldr	r3, [r3, #24]
 8108f72:	b29b      	uxth	r3, r3
 8108f74:	69ba      	ldr	r2, [r7, #24]
 8108f76:	429a      	cmp	r2, r3
 8108f78:	d809      	bhi.n	8108f8e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8108f7a:	68fb      	ldr	r3, [r7, #12]
 8108f7c:	699a      	ldr	r2, [r3, #24]
 8108f7e:	68fb      	ldr	r3, [r7, #12]
 8108f80:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8108f82:	429a      	cmp	r2, r3
 8108f84:	d203      	bcs.n	8108f8e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8108f86:	68fb      	ldr	r3, [r7, #12]
 8108f88:	695b      	ldr	r3, [r3, #20]
 8108f8a:	2b00      	cmp	r3, #0
 8108f8c:	d1be      	bne.n	8108f0c <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8108f8e:	68fb      	ldr	r3, [r7, #12]
 8108f90:	695a      	ldr	r2, [r3, #20]
 8108f92:	68fb      	ldr	r3, [r7, #12]
 8108f94:	699b      	ldr	r3, [r3, #24]
 8108f96:	429a      	cmp	r2, r3
 8108f98:	d811      	bhi.n	8108fbe <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8108f9a:	683b      	ldr	r3, [r7, #0]
 8108f9c:	f003 030f 	and.w	r3, r3, #15
 8108fa0:	2201      	movs	r2, #1
 8108fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8108fa6:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8108fa8:	693b      	ldr	r3, [r7, #16]
 8108faa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8108fae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8108fb0:	68bb      	ldr	r3, [r7, #8]
 8108fb2:	43db      	mvns	r3, r3
 8108fb4:	6939      	ldr	r1, [r7, #16]
 8108fb6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8108fba:	4013      	ands	r3, r2
 8108fbc:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8108fbe:	2300      	movs	r3, #0
}
 8108fc0:	4618      	mov	r0, r3
 8108fc2:	3720      	adds	r7, #32
 8108fc4:	46bd      	mov	sp, r7
 8108fc6:	bd80      	pop	{r7, pc}

08108fc8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8108fc8:	b580      	push	{r7, lr}
 8108fca:	b086      	sub	sp, #24
 8108fcc:	af00      	add	r7, sp, #0
 8108fce:	6078      	str	r0, [r7, #4]
 8108fd0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8108fd2:	687b      	ldr	r3, [r7, #4]
 8108fd4:	681b      	ldr	r3, [r3, #0]
 8108fd6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8108fd8:	697b      	ldr	r3, [r7, #20]
 8108fda:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8108fdc:	697b      	ldr	r3, [r7, #20]
 8108fde:	333c      	adds	r3, #60	; 0x3c
 8108fe0:	3304      	adds	r3, #4
 8108fe2:	681b      	ldr	r3, [r3, #0]
 8108fe4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8108fe6:	683b      	ldr	r3, [r7, #0]
 8108fe8:	015a      	lsls	r2, r3, #5
 8108fea:	693b      	ldr	r3, [r7, #16]
 8108fec:	4413      	add	r3, r2
 8108fee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8108ff2:	689b      	ldr	r3, [r3, #8]
 8108ff4:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8108ff6:	687b      	ldr	r3, [r7, #4]
 8108ff8:	691b      	ldr	r3, [r3, #16]
 8108ffa:	2b01      	cmp	r3, #1
 8108ffc:	f040 80a0 	bne.w	8109140 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8109000:	68bb      	ldr	r3, [r7, #8]
 8109002:	f003 0308 	and.w	r3, r3, #8
 8109006:	2b00      	cmp	r3, #0
 8109008:	d015      	beq.n	8109036 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 810900a:	68fb      	ldr	r3, [r7, #12]
 810900c:	4a72      	ldr	r2, [pc, #456]	; (81091d8 <PCD_EP_OutXfrComplete_int+0x210>)
 810900e:	4293      	cmp	r3, r2
 8109010:	f240 80dd 	bls.w	81091ce <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8109014:	68bb      	ldr	r3, [r7, #8]
 8109016:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 810901a:	2b00      	cmp	r3, #0
 810901c:	f000 80d7 	beq.w	81091ce <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8109020:	683b      	ldr	r3, [r7, #0]
 8109022:	015a      	lsls	r2, r3, #5
 8109024:	693b      	ldr	r3, [r7, #16]
 8109026:	4413      	add	r3, r2
 8109028:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 810902c:	461a      	mov	r2, r3
 810902e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8109032:	6093      	str	r3, [r2, #8]
 8109034:	e0cb      	b.n	81091ce <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8109036:	68bb      	ldr	r3, [r7, #8]
 8109038:	f003 0320 	and.w	r3, r3, #32
 810903c:	2b00      	cmp	r3, #0
 810903e:	d009      	beq.n	8109054 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8109040:	683b      	ldr	r3, [r7, #0]
 8109042:	015a      	lsls	r2, r3, #5
 8109044:	693b      	ldr	r3, [r7, #16]
 8109046:	4413      	add	r3, r2
 8109048:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 810904c:	461a      	mov	r2, r3
 810904e:	2320      	movs	r3, #32
 8109050:	6093      	str	r3, [r2, #8]
 8109052:	e0bc      	b.n	81091ce <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8109054:	68bb      	ldr	r3, [r7, #8]
 8109056:	f003 0328 	and.w	r3, r3, #40	; 0x28
 810905a:	2b00      	cmp	r3, #0
 810905c:	f040 80b7 	bne.w	81091ce <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8109060:	68fb      	ldr	r3, [r7, #12]
 8109062:	4a5d      	ldr	r2, [pc, #372]	; (81091d8 <PCD_EP_OutXfrComplete_int+0x210>)
 8109064:	4293      	cmp	r3, r2
 8109066:	d90f      	bls.n	8109088 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8109068:	68bb      	ldr	r3, [r7, #8]
 810906a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 810906e:	2b00      	cmp	r3, #0
 8109070:	d00a      	beq.n	8109088 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8109072:	683b      	ldr	r3, [r7, #0]
 8109074:	015a      	lsls	r2, r3, #5
 8109076:	693b      	ldr	r3, [r7, #16]
 8109078:	4413      	add	r3, r2
 810907a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 810907e:	461a      	mov	r2, r3
 8109080:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8109084:	6093      	str	r3, [r2, #8]
 8109086:	e0a2      	b.n	81091ce <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8109088:	6879      	ldr	r1, [r7, #4]
 810908a:	683a      	ldr	r2, [r7, #0]
 810908c:	4613      	mov	r3, r2
 810908e:	00db      	lsls	r3, r3, #3
 8109090:	1a9b      	subs	r3, r3, r2
 8109092:	009b      	lsls	r3, r3, #2
 8109094:	440b      	add	r3, r1
 8109096:	f503 7301 	add.w	r3, r3, #516	; 0x204
 810909a:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 810909c:	683b      	ldr	r3, [r7, #0]
 810909e:	0159      	lsls	r1, r3, #5
 81090a0:	693b      	ldr	r3, [r7, #16]
 81090a2:	440b      	add	r3, r1
 81090a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 81090a8:	691b      	ldr	r3, [r3, #16]
 81090aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 81090ae:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 81090b0:	6878      	ldr	r0, [r7, #4]
 81090b2:	683a      	ldr	r2, [r7, #0]
 81090b4:	4613      	mov	r3, r2
 81090b6:	00db      	lsls	r3, r3, #3
 81090b8:	1a9b      	subs	r3, r3, r2
 81090ba:	009b      	lsls	r3, r3, #2
 81090bc:	4403      	add	r3, r0
 81090be:	f503 7305 	add.w	r3, r3, #532	; 0x214
 81090c2:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 81090c4:	6879      	ldr	r1, [r7, #4]
 81090c6:	683a      	ldr	r2, [r7, #0]
 81090c8:	4613      	mov	r3, r2
 81090ca:	00db      	lsls	r3, r3, #3
 81090cc:	1a9b      	subs	r3, r3, r2
 81090ce:	009b      	lsls	r3, r3, #2
 81090d0:	440b      	add	r3, r1
 81090d2:	f503 7302 	add.w	r3, r3, #520	; 0x208
 81090d6:	6819      	ldr	r1, [r3, #0]
 81090d8:	6878      	ldr	r0, [r7, #4]
 81090da:	683a      	ldr	r2, [r7, #0]
 81090dc:	4613      	mov	r3, r2
 81090de:	00db      	lsls	r3, r3, #3
 81090e0:	1a9b      	subs	r3, r3, r2
 81090e2:	009b      	lsls	r3, r3, #2
 81090e4:	4403      	add	r3, r0
 81090e6:	f503 7301 	add.w	r3, r3, #516	; 0x204
 81090ea:	681b      	ldr	r3, [r3, #0]
 81090ec:	4419      	add	r1, r3
 81090ee:	6878      	ldr	r0, [r7, #4]
 81090f0:	683a      	ldr	r2, [r7, #0]
 81090f2:	4613      	mov	r3, r2
 81090f4:	00db      	lsls	r3, r3, #3
 81090f6:	1a9b      	subs	r3, r3, r2
 81090f8:	009b      	lsls	r3, r3, #2
 81090fa:	4403      	add	r3, r0
 81090fc:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8109100:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8109102:	683b      	ldr	r3, [r7, #0]
 8109104:	2b00      	cmp	r3, #0
 8109106:	d114      	bne.n	8109132 <PCD_EP_OutXfrComplete_int+0x16a>
 8109108:	6879      	ldr	r1, [r7, #4]
 810910a:	683a      	ldr	r2, [r7, #0]
 810910c:	4613      	mov	r3, r2
 810910e:	00db      	lsls	r3, r3, #3
 8109110:	1a9b      	subs	r3, r3, r2
 8109112:	009b      	lsls	r3, r3, #2
 8109114:	440b      	add	r3, r1
 8109116:	f503 7304 	add.w	r3, r3, #528	; 0x210
 810911a:	681b      	ldr	r3, [r3, #0]
 810911c:	2b00      	cmp	r3, #0
 810911e:	d108      	bne.n	8109132 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8109120:	687b      	ldr	r3, [r7, #4]
 8109122:	6818      	ldr	r0, [r3, #0]
 8109124:	687b      	ldr	r3, [r7, #4]
 8109126:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 810912a:	461a      	mov	r2, r3
 810912c:	2101      	movs	r1, #1
 810912e:	f009 fa13 	bl	8112558 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8109132:	683b      	ldr	r3, [r7, #0]
 8109134:	b2db      	uxtb	r3, r3
 8109136:	4619      	mov	r1, r3
 8109138:	6878      	ldr	r0, [r7, #4]
 810913a:	f00d fd6b 	bl	8116c14 <HAL_PCD_DataOutStageCallback>
 810913e:	e046      	b.n	81091ce <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8109140:	68fb      	ldr	r3, [r7, #12]
 8109142:	4a26      	ldr	r2, [pc, #152]	; (81091dc <PCD_EP_OutXfrComplete_int+0x214>)
 8109144:	4293      	cmp	r3, r2
 8109146:	d124      	bne.n	8109192 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8109148:	68bb      	ldr	r3, [r7, #8]
 810914a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 810914e:	2b00      	cmp	r3, #0
 8109150:	d00a      	beq.n	8109168 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8109152:	683b      	ldr	r3, [r7, #0]
 8109154:	015a      	lsls	r2, r3, #5
 8109156:	693b      	ldr	r3, [r7, #16]
 8109158:	4413      	add	r3, r2
 810915a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 810915e:	461a      	mov	r2, r3
 8109160:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8109164:	6093      	str	r3, [r2, #8]
 8109166:	e032      	b.n	81091ce <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8109168:	68bb      	ldr	r3, [r7, #8]
 810916a:	f003 0320 	and.w	r3, r3, #32
 810916e:	2b00      	cmp	r3, #0
 8109170:	d008      	beq.n	8109184 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8109172:	683b      	ldr	r3, [r7, #0]
 8109174:	015a      	lsls	r2, r3, #5
 8109176:	693b      	ldr	r3, [r7, #16]
 8109178:	4413      	add	r3, r2
 810917a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 810917e:	461a      	mov	r2, r3
 8109180:	2320      	movs	r3, #32
 8109182:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8109184:	683b      	ldr	r3, [r7, #0]
 8109186:	b2db      	uxtb	r3, r3
 8109188:	4619      	mov	r1, r3
 810918a:	6878      	ldr	r0, [r7, #4]
 810918c:	f00d fd42 	bl	8116c14 <HAL_PCD_DataOutStageCallback>
 8109190:	e01d      	b.n	81091ce <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8109192:	683b      	ldr	r3, [r7, #0]
 8109194:	2b00      	cmp	r3, #0
 8109196:	d114      	bne.n	81091c2 <PCD_EP_OutXfrComplete_int+0x1fa>
 8109198:	6879      	ldr	r1, [r7, #4]
 810919a:	683a      	ldr	r2, [r7, #0]
 810919c:	4613      	mov	r3, r2
 810919e:	00db      	lsls	r3, r3, #3
 81091a0:	1a9b      	subs	r3, r3, r2
 81091a2:	009b      	lsls	r3, r3, #2
 81091a4:	440b      	add	r3, r1
 81091a6:	f503 7304 	add.w	r3, r3, #528	; 0x210
 81091aa:	681b      	ldr	r3, [r3, #0]
 81091ac:	2b00      	cmp	r3, #0
 81091ae:	d108      	bne.n	81091c2 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 81091b0:	687b      	ldr	r3, [r7, #4]
 81091b2:	6818      	ldr	r0, [r3, #0]
 81091b4:	687b      	ldr	r3, [r7, #4]
 81091b6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 81091ba:	461a      	mov	r2, r3
 81091bc:	2100      	movs	r1, #0
 81091be:	f009 f9cb 	bl	8112558 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 81091c2:	683b      	ldr	r3, [r7, #0]
 81091c4:	b2db      	uxtb	r3, r3
 81091c6:	4619      	mov	r1, r3
 81091c8:	6878      	ldr	r0, [r7, #4]
 81091ca:	f00d fd23 	bl	8116c14 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 81091ce:	2300      	movs	r3, #0
}
 81091d0:	4618      	mov	r0, r3
 81091d2:	3718      	adds	r7, #24
 81091d4:	46bd      	mov	sp, r7
 81091d6:	bd80      	pop	{r7, pc}
 81091d8:	4f54300a 	.word	0x4f54300a
 81091dc:	4f54310a 	.word	0x4f54310a

081091e0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 81091e0:	b580      	push	{r7, lr}
 81091e2:	b086      	sub	sp, #24
 81091e4:	af00      	add	r7, sp, #0
 81091e6:	6078      	str	r0, [r7, #4]
 81091e8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 81091ea:	687b      	ldr	r3, [r7, #4]
 81091ec:	681b      	ldr	r3, [r3, #0]
 81091ee:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 81091f0:	697b      	ldr	r3, [r7, #20]
 81091f2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 81091f4:	697b      	ldr	r3, [r7, #20]
 81091f6:	333c      	adds	r3, #60	; 0x3c
 81091f8:	3304      	adds	r3, #4
 81091fa:	681b      	ldr	r3, [r3, #0]
 81091fc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 81091fe:	683b      	ldr	r3, [r7, #0]
 8109200:	015a      	lsls	r2, r3, #5
 8109202:	693b      	ldr	r3, [r7, #16]
 8109204:	4413      	add	r3, r2
 8109206:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 810920a:	689b      	ldr	r3, [r3, #8]
 810920c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 810920e:	68fb      	ldr	r3, [r7, #12]
 8109210:	4a15      	ldr	r2, [pc, #84]	; (8109268 <PCD_EP_OutSetupPacket_int+0x88>)
 8109212:	4293      	cmp	r3, r2
 8109214:	d90e      	bls.n	8109234 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8109216:	68bb      	ldr	r3, [r7, #8]
 8109218:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 810921c:	2b00      	cmp	r3, #0
 810921e:	d009      	beq.n	8109234 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8109220:	683b      	ldr	r3, [r7, #0]
 8109222:	015a      	lsls	r2, r3, #5
 8109224:	693b      	ldr	r3, [r7, #16]
 8109226:	4413      	add	r3, r2
 8109228:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 810922c:	461a      	mov	r2, r3
 810922e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8109232:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8109234:	6878      	ldr	r0, [r7, #4]
 8109236:	f00d fcdb 	bl	8116bf0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 810923a:	68fb      	ldr	r3, [r7, #12]
 810923c:	4a0a      	ldr	r2, [pc, #40]	; (8109268 <PCD_EP_OutSetupPacket_int+0x88>)
 810923e:	4293      	cmp	r3, r2
 8109240:	d90c      	bls.n	810925c <PCD_EP_OutSetupPacket_int+0x7c>
 8109242:	687b      	ldr	r3, [r7, #4]
 8109244:	691b      	ldr	r3, [r3, #16]
 8109246:	2b01      	cmp	r3, #1
 8109248:	d108      	bne.n	810925c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 810924a:	687b      	ldr	r3, [r7, #4]
 810924c:	6818      	ldr	r0, [r3, #0]
 810924e:	687b      	ldr	r3, [r7, #4]
 8109250:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8109254:	461a      	mov	r2, r3
 8109256:	2101      	movs	r1, #1
 8109258:	f009 f97e 	bl	8112558 <USB_EP0_OutStart>
  }

  return HAL_OK;
 810925c:	2300      	movs	r3, #0
}
 810925e:	4618      	mov	r0, r3
 8109260:	3718      	adds	r7, #24
 8109262:	46bd      	mov	sp, r7
 8109264:	bd80      	pop	{r7, pc}
 8109266:	bf00      	nop
 8109268:	4f54300a 	.word	0x4f54300a

0810926c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 810926c:	b480      	push	{r7}
 810926e:	b083      	sub	sp, #12
 8109270:	af00      	add	r7, sp, #0
 8109272:	6078      	str	r0, [r7, #4]
 8109274:	460b      	mov	r3, r1
 8109276:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8109278:	bf00      	nop
 810927a:	370c      	adds	r7, #12
 810927c:	46bd      	mov	sp, r7
 810927e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109282:	4770      	bx	lr

08109284 <HAL_PWREx_EnterSTOPMode>:
  *            @arg PWR_D2_DOMAIN : Enter D2 Domain to DSTOP mode.
  *            @arg PWR_D3_DOMAIN : Enter D3/SRD Domain to DSTOP mode.
  * @retval None.
  */
void HAL_PWREx_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry, uint32_t Domain)
{
 8109284:	b580      	push	{r7, lr}
 8109286:	b084      	sub	sp, #16
 8109288:	af00      	add	r7, sp, #0
 810928a:	60f8      	str	r0, [r7, #12]
 810928c:	460b      	mov	r3, r1
 810928e:	607a      	str	r2, [r7, #4]
 8109290:	72fb      	strb	r3, [r7, #11]
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));
  assert_param (IS_PWR_DOMAIN (Domain));

  /* Select the regulator state in Stop mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 8109292:	4b37      	ldr	r3, [pc, #220]	; (8109370 <HAL_PWREx_EnterSTOPMode+0xec>)
 8109294:	681b      	ldr	r3, [r3, #0]
 8109296:	f023 0201 	bic.w	r2, r3, #1
 810929a:	4935      	ldr	r1, [pc, #212]	; (8109370 <HAL_PWREx_EnterSTOPMode+0xec>)
 810929c:	68fb      	ldr	r3, [r7, #12]
 810929e:	4313      	orrs	r3, r2
 81092a0:	600b      	str	r3, [r1, #0]

  /* Select the domain Power Down DeepSleep */
  if (Domain == PWR_D1_DOMAIN)
 81092a2:	687b      	ldr	r3, [r7, #4]
 81092a4:	2b00      	cmp	r3, #0
 81092a6:	d123      	bne.n	81092f0 <HAL_PWREx_EnterSTOPMode+0x6c>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM7_CPUID)
 81092a8:	f7fb f81c 	bl	81042e4 <HAL_GetCurrentCPUID>
 81092ac:	4603      	mov	r3, r0
 81092ae:	2b03      	cmp	r3, #3
 81092b0:	d158      	bne.n	8109364 <HAL_PWREx_EnterSTOPMode+0xe0>
      return;
    }
#endif /* defined (DUAL_CORE) */

    /* Keep DSTOP mode when D1/CD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D1);
 81092b2:	4b2f      	ldr	r3, [pc, #188]	; (8109370 <HAL_PWREx_EnterSTOPMode+0xec>)
 81092b4:	691b      	ldr	r3, [r3, #16]
 81092b6:	4a2e      	ldr	r2, [pc, #184]	; (8109370 <HAL_PWREx_EnterSTOPMode+0xec>)
 81092b8:	f023 0301 	bic.w	r3, r3, #1
 81092bc:	6113      	str	r3, [r2, #16]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 81092be:	4b2d      	ldr	r3, [pc, #180]	; (8109374 <HAL_PWREx_EnterSTOPMode+0xf0>)
 81092c0:	691b      	ldr	r3, [r3, #16]
 81092c2:	4a2c      	ldr	r2, [pc, #176]	; (8109374 <HAL_PWREx_EnterSTOPMode+0xf0>)
 81092c4:	f043 0304 	orr.w	r3, r3, #4
 81092c8:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 81092ca:	f3bf 8f4f 	dsb	sy
}
 81092ce:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 81092d0:	f3bf 8f6f 	isb	sy
}
 81092d4:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 81092d6:	7afb      	ldrb	r3, [r7, #11]
 81092d8:	2b01      	cmp	r3, #1
 81092da:	d101      	bne.n	81092e0 <HAL_PWREx_EnterSTOPMode+0x5c>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 81092dc:	bf30      	wfi
 81092de:	e000      	b.n	81092e2 <HAL_PWREx_EnterSTOPMode+0x5e>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 81092e0:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 81092e2:	4b24      	ldr	r3, [pc, #144]	; (8109374 <HAL_PWREx_EnterSTOPMode+0xf0>)
 81092e4:	691b      	ldr	r3, [r3, #16]
 81092e6:	4a23      	ldr	r2, [pc, #140]	; (8109374 <HAL_PWREx_EnterSTOPMode+0xf0>)
 81092e8:	f023 0304 	bic.w	r3, r3, #4
 81092ec:	6113      	str	r3, [r2, #16]
 81092ee:	e03c      	b.n	810936a <HAL_PWREx_EnterSTOPMode+0xe6>
  }
#if defined (PWR_CPUCR_PDDS_D2)
  else if (Domain == PWR_D2_DOMAIN)
 81092f0:	687b      	ldr	r3, [r7, #4]
 81092f2:	2b01      	cmp	r3, #1
 81092f4:	d123      	bne.n	810933e <HAL_PWREx_EnterSTOPMode+0xba>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM4_CPUID)
 81092f6:	f7fa fff5 	bl	81042e4 <HAL_GetCurrentCPUID>
 81092fa:	4603      	mov	r3, r0
 81092fc:	2b01      	cmp	r3, #1
 81092fe:	d133      	bne.n	8109368 <HAL_PWREx_EnterSTOPMode+0xe4>
      */
      return;
    }

    /* Keep DSTOP mode when D2 domain enters Deepsleep */
    CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D2);
 8109300:	4b1b      	ldr	r3, [pc, #108]	; (8109370 <HAL_PWREx_EnterSTOPMode+0xec>)
 8109302:	695b      	ldr	r3, [r3, #20]
 8109304:	4a1a      	ldr	r2, [pc, #104]	; (8109370 <HAL_PWREx_EnterSTOPMode+0xec>)
 8109306:	f023 0302 	bic.w	r3, r3, #2
 810930a:	6153      	str	r3, [r2, #20]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 810930c:	4b19      	ldr	r3, [pc, #100]	; (8109374 <HAL_PWREx_EnterSTOPMode+0xf0>)
 810930e:	691b      	ldr	r3, [r3, #16]
 8109310:	4a18      	ldr	r2, [pc, #96]	; (8109374 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8109312:	f043 0304 	orr.w	r3, r3, #4
 8109316:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8109318:	f3bf 8f4f 	dsb	sy
}
 810931c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 810931e:	f3bf 8f6f 	isb	sy
}
 8109322:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8109324:	7afb      	ldrb	r3, [r7, #11]
 8109326:	2b01      	cmp	r3, #1
 8109328:	d101      	bne.n	810932e <HAL_PWREx_EnterSTOPMode+0xaa>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 810932a:	bf30      	wfi
 810932c:	e000      	b.n	8109330 <HAL_PWREx_EnterSTOPMode+0xac>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 810932e:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8109330:	4b10      	ldr	r3, [pc, #64]	; (8109374 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8109332:	691b      	ldr	r3, [r3, #16]
 8109334:	4a0f      	ldr	r2, [pc, #60]	; (8109374 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8109336:	f023 0304 	bic.w	r3, r3, #4
 810933a:	6113      	str	r3, [r2, #16]
 810933c:	e015      	b.n	810936a <HAL_PWREx_EnterSTOPMode+0xe6>
#endif /* defined (PWR_CPUCR_PDDS_D2) */
  else
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
 810933e:	f7fa ffd1 	bl	81042e4 <HAL_GetCurrentCPUID>
 8109342:	4603      	mov	r3, r0
 8109344:	2b03      	cmp	r3, #3
 8109346:	d106      	bne.n	8109356 <HAL_PWREx_EnterSTOPMode+0xd2>
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
 8109348:	4b09      	ldr	r3, [pc, #36]	; (8109370 <HAL_PWREx_EnterSTOPMode+0xec>)
 810934a:	691b      	ldr	r3, [r3, #16]
 810934c:	4a08      	ldr	r2, [pc, #32]	; (8109370 <HAL_PWREx_EnterSTOPMode+0xec>)
 810934e:	f023 0304 	bic.w	r3, r3, #4
 8109352:	6113      	str	r3, [r2, #16]
 8109354:	e009      	b.n	810936a <HAL_PWREx_EnterSTOPMode+0xe6>
    }
    else
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D3);
 8109356:	4b06      	ldr	r3, [pc, #24]	; (8109370 <HAL_PWREx_EnterSTOPMode+0xec>)
 8109358:	695b      	ldr	r3, [r3, #20]
 810935a:	4a05      	ldr	r2, [pc, #20]	; (8109370 <HAL_PWREx_EnterSTOPMode+0xec>)
 810935c:	f023 0304 	bic.w	r3, r3, #4
 8109360:	6153      	str	r3, [r2, #20]
 8109362:	e002      	b.n	810936a <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 8109364:	bf00      	nop
 8109366:	e000      	b.n	810936a <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 8109368:	bf00      	nop
#else
    /* Keep DSTOP mode when D3/SRD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
#endif  /* defined (DUAL_CORE) */
  }
}
 810936a:	3710      	adds	r7, #16
 810936c:	46bd      	mov	sp, r7
 810936e:	bd80      	pop	{r7, pc}
 8109370:	58024800 	.word	0x58024800
 8109374:	e000ed00 	.word	0xe000ed00

08109378 <HAL_PWREx_ClearPendingEvent>:
  *         enter low power mode using Wait For Event request.
  * @note   Cortex-M7 must be in CRUN mode when calling this API by Cortex-M4.
  * @retval None.
  */
void HAL_PWREx_ClearPendingEvent (void)
{
 8109378:	b580      	push	{r7, lr}
 810937a:	af00      	add	r7, sp, #0
#if defined (DUAL_CORE)
  /* Check the current Core */
  if (HAL_GetCurrentCPUID () == CM7_CPUID)
 810937c:	f7fa ffb2 	bl	81042e4 <HAL_GetCurrentCPUID>
 8109380:	4603      	mov	r3, r0
 8109382:	2b03      	cmp	r3, #3
 8109384:	d101      	bne.n	810938a <HAL_PWREx_ClearPendingEvent+0x12>
  {
    __WFE ();
 8109386:	bf20      	wfe
    __WFE ();
  }
#else
  __WFE ();
#endif /* defined (DUAL_CORE) */
}
 8109388:	e001      	b.n	810938e <HAL_PWREx_ClearPendingEvent+0x16>
    __SEV ();
 810938a:	bf40      	sev
    __WFE ();
 810938c:	bf20      	wfe
}
 810938e:	bf00      	nop
 8109390:	bd80      	pop	{r7, pc}
	...

08109394 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8109394:	b480      	push	{r7}
 8109396:	b089      	sub	sp, #36	; 0x24
 8109398:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 810939a:	4bb3      	ldr	r3, [pc, #716]	; (8109668 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810939c:	691b      	ldr	r3, [r3, #16]
 810939e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 81093a2:	2b18      	cmp	r3, #24
 81093a4:	f200 8155 	bhi.w	8109652 <HAL_RCC_GetSysClockFreq+0x2be>
 81093a8:	a201      	add	r2, pc, #4	; (adr r2, 81093b0 <HAL_RCC_GetSysClockFreq+0x1c>)
 81093aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81093ae:	bf00      	nop
 81093b0:	08109415 	.word	0x08109415
 81093b4:	08109653 	.word	0x08109653
 81093b8:	08109653 	.word	0x08109653
 81093bc:	08109653 	.word	0x08109653
 81093c0:	08109653 	.word	0x08109653
 81093c4:	08109653 	.word	0x08109653
 81093c8:	08109653 	.word	0x08109653
 81093cc:	08109653 	.word	0x08109653
 81093d0:	0810943b 	.word	0x0810943b
 81093d4:	08109653 	.word	0x08109653
 81093d8:	08109653 	.word	0x08109653
 81093dc:	08109653 	.word	0x08109653
 81093e0:	08109653 	.word	0x08109653
 81093e4:	08109653 	.word	0x08109653
 81093e8:	08109653 	.word	0x08109653
 81093ec:	08109653 	.word	0x08109653
 81093f0:	08109441 	.word	0x08109441
 81093f4:	08109653 	.word	0x08109653
 81093f8:	08109653 	.word	0x08109653
 81093fc:	08109653 	.word	0x08109653
 8109400:	08109653 	.word	0x08109653
 8109404:	08109653 	.word	0x08109653
 8109408:	08109653 	.word	0x08109653
 810940c:	08109653 	.word	0x08109653
 8109410:	08109447 	.word	0x08109447
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8109414:	4b94      	ldr	r3, [pc, #592]	; (8109668 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8109416:	681b      	ldr	r3, [r3, #0]
 8109418:	f003 0320 	and.w	r3, r3, #32
 810941c:	2b00      	cmp	r3, #0
 810941e:	d009      	beq.n	8109434 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8109420:	4b91      	ldr	r3, [pc, #580]	; (8109668 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8109422:	681b      	ldr	r3, [r3, #0]
 8109424:	08db      	lsrs	r3, r3, #3
 8109426:	f003 0303 	and.w	r3, r3, #3
 810942a:	4a90      	ldr	r2, [pc, #576]	; (810966c <HAL_RCC_GetSysClockFreq+0x2d8>)
 810942c:	fa22 f303 	lsr.w	r3, r2, r3
 8109430:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8109432:	e111      	b.n	8109658 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8109434:	4b8d      	ldr	r3, [pc, #564]	; (810966c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8109436:	61bb      	str	r3, [r7, #24]
    break;
 8109438:	e10e      	b.n	8109658 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 810943a:	4b8d      	ldr	r3, [pc, #564]	; (8109670 <HAL_RCC_GetSysClockFreq+0x2dc>)
 810943c:	61bb      	str	r3, [r7, #24]
    break;
 810943e:	e10b      	b.n	8109658 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8109440:	4b8c      	ldr	r3, [pc, #560]	; (8109674 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8109442:	61bb      	str	r3, [r7, #24]
    break;
 8109444:	e108      	b.n	8109658 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8109446:	4b88      	ldr	r3, [pc, #544]	; (8109668 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8109448:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810944a:	f003 0303 	and.w	r3, r3, #3
 810944e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8109450:	4b85      	ldr	r3, [pc, #532]	; (8109668 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8109452:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8109454:	091b      	lsrs	r3, r3, #4
 8109456:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 810945a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 810945c:	4b82      	ldr	r3, [pc, #520]	; (8109668 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810945e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8109460:	f003 0301 	and.w	r3, r3, #1
 8109464:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8109466:	4b80      	ldr	r3, [pc, #512]	; (8109668 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8109468:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 810946a:	08db      	lsrs	r3, r3, #3
 810946c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8109470:	68fa      	ldr	r2, [r7, #12]
 8109472:	fb02 f303 	mul.w	r3, r2, r3
 8109476:	ee07 3a90 	vmov	s15, r3
 810947a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810947e:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8109482:	693b      	ldr	r3, [r7, #16]
 8109484:	2b00      	cmp	r3, #0
 8109486:	f000 80e1 	beq.w	810964c <HAL_RCC_GetSysClockFreq+0x2b8>
 810948a:	697b      	ldr	r3, [r7, #20]
 810948c:	2b02      	cmp	r3, #2
 810948e:	f000 8083 	beq.w	8109598 <HAL_RCC_GetSysClockFreq+0x204>
 8109492:	697b      	ldr	r3, [r7, #20]
 8109494:	2b02      	cmp	r3, #2
 8109496:	f200 80a1 	bhi.w	81095dc <HAL_RCC_GetSysClockFreq+0x248>
 810949a:	697b      	ldr	r3, [r7, #20]
 810949c:	2b00      	cmp	r3, #0
 810949e:	d003      	beq.n	81094a8 <HAL_RCC_GetSysClockFreq+0x114>
 81094a0:	697b      	ldr	r3, [r7, #20]
 81094a2:	2b01      	cmp	r3, #1
 81094a4:	d056      	beq.n	8109554 <HAL_RCC_GetSysClockFreq+0x1c0>
 81094a6:	e099      	b.n	81095dc <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 81094a8:	4b6f      	ldr	r3, [pc, #444]	; (8109668 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81094aa:	681b      	ldr	r3, [r3, #0]
 81094ac:	f003 0320 	and.w	r3, r3, #32
 81094b0:	2b00      	cmp	r3, #0
 81094b2:	d02d      	beq.n	8109510 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 81094b4:	4b6c      	ldr	r3, [pc, #432]	; (8109668 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81094b6:	681b      	ldr	r3, [r3, #0]
 81094b8:	08db      	lsrs	r3, r3, #3
 81094ba:	f003 0303 	and.w	r3, r3, #3
 81094be:	4a6b      	ldr	r2, [pc, #428]	; (810966c <HAL_RCC_GetSysClockFreq+0x2d8>)
 81094c0:	fa22 f303 	lsr.w	r3, r2, r3
 81094c4:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 81094c6:	687b      	ldr	r3, [r7, #4]
 81094c8:	ee07 3a90 	vmov	s15, r3
 81094cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81094d0:	693b      	ldr	r3, [r7, #16]
 81094d2:	ee07 3a90 	vmov	s15, r3
 81094d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81094da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81094de:	4b62      	ldr	r3, [pc, #392]	; (8109668 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81094e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81094e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81094e6:	ee07 3a90 	vmov	s15, r3
 81094ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81094ee:	ed97 6a02 	vldr	s12, [r7, #8]
 81094f2:	eddf 5a61 	vldr	s11, [pc, #388]	; 8109678 <HAL_RCC_GetSysClockFreq+0x2e4>
 81094f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81094fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81094fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8109502:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8109506:	ee67 7a27 	vmul.f32	s15, s14, s15
 810950a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 810950e:	e087      	b.n	8109620 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8109510:	693b      	ldr	r3, [r7, #16]
 8109512:	ee07 3a90 	vmov	s15, r3
 8109516:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810951a:	eddf 6a58 	vldr	s13, [pc, #352]	; 810967c <HAL_RCC_GetSysClockFreq+0x2e8>
 810951e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8109522:	4b51      	ldr	r3, [pc, #324]	; (8109668 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8109524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8109526:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810952a:	ee07 3a90 	vmov	s15, r3
 810952e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8109532:	ed97 6a02 	vldr	s12, [r7, #8]
 8109536:	eddf 5a50 	vldr	s11, [pc, #320]	; 8109678 <HAL_RCC_GetSysClockFreq+0x2e4>
 810953a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810953e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8109542:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8109546:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810954a:	ee67 7a27 	vmul.f32	s15, s14, s15
 810954e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8109552:	e065      	b.n	8109620 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8109554:	693b      	ldr	r3, [r7, #16]
 8109556:	ee07 3a90 	vmov	s15, r3
 810955a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810955e:	eddf 6a48 	vldr	s13, [pc, #288]	; 8109680 <HAL_RCC_GetSysClockFreq+0x2ec>
 8109562:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8109566:	4b40      	ldr	r3, [pc, #256]	; (8109668 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8109568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810956a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810956e:	ee07 3a90 	vmov	s15, r3
 8109572:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8109576:	ed97 6a02 	vldr	s12, [r7, #8]
 810957a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8109678 <HAL_RCC_GetSysClockFreq+0x2e4>
 810957e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8109582:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8109586:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810958a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810958e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8109592:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8109596:	e043      	b.n	8109620 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8109598:	693b      	ldr	r3, [r7, #16]
 810959a:	ee07 3a90 	vmov	s15, r3
 810959e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81095a2:	eddf 6a38 	vldr	s13, [pc, #224]	; 8109684 <HAL_RCC_GetSysClockFreq+0x2f0>
 81095a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81095aa:	4b2f      	ldr	r3, [pc, #188]	; (8109668 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81095ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81095ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81095b2:	ee07 3a90 	vmov	s15, r3
 81095b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81095ba:	ed97 6a02 	vldr	s12, [r7, #8]
 81095be:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8109678 <HAL_RCC_GetSysClockFreq+0x2e4>
 81095c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81095c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81095ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81095ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81095d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 81095d6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 81095da:	e021      	b.n	8109620 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 81095dc:	693b      	ldr	r3, [r7, #16]
 81095de:	ee07 3a90 	vmov	s15, r3
 81095e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81095e6:	eddf 6a26 	vldr	s13, [pc, #152]	; 8109680 <HAL_RCC_GetSysClockFreq+0x2ec>
 81095ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81095ee:	4b1e      	ldr	r3, [pc, #120]	; (8109668 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81095f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81095f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81095f6:	ee07 3a90 	vmov	s15, r3
 81095fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81095fe:	ed97 6a02 	vldr	s12, [r7, #8]
 8109602:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8109678 <HAL_RCC_GetSysClockFreq+0x2e4>
 8109606:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810960a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810960e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8109612:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8109616:	ee67 7a27 	vmul.f32	s15, s14, s15
 810961a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810961e:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8109620:	4b11      	ldr	r3, [pc, #68]	; (8109668 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8109622:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8109624:	0a5b      	lsrs	r3, r3, #9
 8109626:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 810962a:	3301      	adds	r3, #1
 810962c:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 810962e:	683b      	ldr	r3, [r7, #0]
 8109630:	ee07 3a90 	vmov	s15, r3
 8109634:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8109638:	edd7 6a07 	vldr	s13, [r7, #28]
 810963c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8109640:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8109644:	ee17 3a90 	vmov	r3, s15
 8109648:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 810964a:	e005      	b.n	8109658 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 810964c:	2300      	movs	r3, #0
 810964e:	61bb      	str	r3, [r7, #24]
    break;
 8109650:	e002      	b.n	8109658 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8109652:	4b07      	ldr	r3, [pc, #28]	; (8109670 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8109654:	61bb      	str	r3, [r7, #24]
    break;
 8109656:	bf00      	nop
  }

  return sysclockfreq;
 8109658:	69bb      	ldr	r3, [r7, #24]
}
 810965a:	4618      	mov	r0, r3
 810965c:	3724      	adds	r7, #36	; 0x24
 810965e:	46bd      	mov	sp, r7
 8109660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109664:	4770      	bx	lr
 8109666:	bf00      	nop
 8109668:	58024400 	.word	0x58024400
 810966c:	03d09000 	.word	0x03d09000
 8109670:	003d0900 	.word	0x003d0900
 8109674:	00f42400 	.word	0x00f42400
 8109678:	46000000 	.word	0x46000000
 810967c:	4c742400 	.word	0x4c742400
 8109680:	4a742400 	.word	0x4a742400
 8109684:	4b742400 	.word	0x4b742400

08109688 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8109688:	b580      	push	{r7, lr}
 810968a:	b082      	sub	sp, #8
 810968c:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 810968e:	f7ff fe81 	bl	8109394 <HAL_RCC_GetSysClockFreq>
 8109692:	4602      	mov	r2, r0
 8109694:	4b11      	ldr	r3, [pc, #68]	; (81096dc <HAL_RCC_GetHCLKFreq+0x54>)
 8109696:	699b      	ldr	r3, [r3, #24]
 8109698:	0a1b      	lsrs	r3, r3, #8
 810969a:	f003 030f 	and.w	r3, r3, #15
 810969e:	4910      	ldr	r1, [pc, #64]	; (81096e0 <HAL_RCC_GetHCLKFreq+0x58>)
 81096a0:	5ccb      	ldrb	r3, [r1, r3]
 81096a2:	f003 031f 	and.w	r3, r3, #31
 81096a6:	fa22 f303 	lsr.w	r3, r2, r3
 81096aa:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 81096ac:	4b0b      	ldr	r3, [pc, #44]	; (81096dc <HAL_RCC_GetHCLKFreq+0x54>)
 81096ae:	699b      	ldr	r3, [r3, #24]
 81096b0:	f003 030f 	and.w	r3, r3, #15
 81096b4:	4a0a      	ldr	r2, [pc, #40]	; (81096e0 <HAL_RCC_GetHCLKFreq+0x58>)
 81096b6:	5cd3      	ldrb	r3, [r2, r3]
 81096b8:	f003 031f 	and.w	r3, r3, #31
 81096bc:	687a      	ldr	r2, [r7, #4]
 81096be:	fa22 f303 	lsr.w	r3, r2, r3
 81096c2:	4a08      	ldr	r2, [pc, #32]	; (81096e4 <HAL_RCC_GetHCLKFreq+0x5c>)
 81096c4:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 81096c6:	4b07      	ldr	r3, [pc, #28]	; (81096e4 <HAL_RCC_GetHCLKFreq+0x5c>)
 81096c8:	681b      	ldr	r3, [r3, #0]
 81096ca:	4a07      	ldr	r2, [pc, #28]	; (81096e8 <HAL_RCC_GetHCLKFreq+0x60>)
 81096cc:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 81096ce:	4b05      	ldr	r3, [pc, #20]	; (81096e4 <HAL_RCC_GetHCLKFreq+0x5c>)
 81096d0:	681b      	ldr	r3, [r3, #0]
}
 81096d2:	4618      	mov	r0, r3
 81096d4:	3708      	adds	r7, #8
 81096d6:	46bd      	mov	sp, r7
 81096d8:	bd80      	pop	{r7, pc}
 81096da:	bf00      	nop
 81096dc:	58024400 	.word	0x58024400
 81096e0:	08119ad8 	.word	0x08119ad8
 81096e4:	10000004 	.word	0x10000004
 81096e8:	10000000 	.word	0x10000000

081096ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 81096ec:	b580      	push	{r7, lr}
 81096ee:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 81096f0:	f7ff ffca 	bl	8109688 <HAL_RCC_GetHCLKFreq>
 81096f4:	4602      	mov	r2, r0
 81096f6:	4b06      	ldr	r3, [pc, #24]	; (8109710 <HAL_RCC_GetPCLK1Freq+0x24>)
 81096f8:	69db      	ldr	r3, [r3, #28]
 81096fa:	091b      	lsrs	r3, r3, #4
 81096fc:	f003 0307 	and.w	r3, r3, #7
 8109700:	4904      	ldr	r1, [pc, #16]	; (8109714 <HAL_RCC_GetPCLK1Freq+0x28>)
 8109702:	5ccb      	ldrb	r3, [r1, r3]
 8109704:	f003 031f 	and.w	r3, r3, #31
 8109708:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 810970c:	4618      	mov	r0, r3
 810970e:	bd80      	pop	{r7, pc}
 8109710:	58024400 	.word	0x58024400
 8109714:	08119ad8 	.word	0x08119ad8

08109718 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8109718:	b580      	push	{r7, lr}
 810971a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 810971c:	f7ff ffb4 	bl	8109688 <HAL_RCC_GetHCLKFreq>
 8109720:	4602      	mov	r2, r0
 8109722:	4b06      	ldr	r3, [pc, #24]	; (810973c <HAL_RCC_GetPCLK2Freq+0x24>)
 8109724:	69db      	ldr	r3, [r3, #28]
 8109726:	0a1b      	lsrs	r3, r3, #8
 8109728:	f003 0307 	and.w	r3, r3, #7
 810972c:	4904      	ldr	r1, [pc, #16]	; (8109740 <HAL_RCC_GetPCLK2Freq+0x28>)
 810972e:	5ccb      	ldrb	r3, [r1, r3]
 8109730:	f003 031f 	and.w	r3, r3, #31
 8109734:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8109738:	4618      	mov	r0, r3
 810973a:	bd80      	pop	{r7, pc}
 810973c:	58024400 	.word	0x58024400
 8109740:	08119ad8 	.word	0x08119ad8

08109744 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8109744:	b480      	push	{r7}
 8109746:	b083      	sub	sp, #12
 8109748:	af00      	add	r7, sp, #0
 810974a:	6078      	str	r0, [r7, #4]
 810974c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 810974e:	687b      	ldr	r3, [r7, #4]
 8109750:	223f      	movs	r2, #63	; 0x3f
 8109752:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8109754:	4b1a      	ldr	r3, [pc, #104]	; (81097c0 <HAL_RCC_GetClockConfig+0x7c>)
 8109756:	691b      	ldr	r3, [r3, #16]
 8109758:	f003 0207 	and.w	r2, r3, #7
 810975c:	687b      	ldr	r3, [r7, #4]
 810975e:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8109760:	4b17      	ldr	r3, [pc, #92]	; (81097c0 <HAL_RCC_GetClockConfig+0x7c>)
 8109762:	699b      	ldr	r3, [r3, #24]
 8109764:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8109768:	687b      	ldr	r3, [r7, #4]
 810976a:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 810976c:	4b14      	ldr	r3, [pc, #80]	; (81097c0 <HAL_RCC_GetClockConfig+0x7c>)
 810976e:	699b      	ldr	r3, [r3, #24]
 8109770:	f003 020f 	and.w	r2, r3, #15
 8109774:	687b      	ldr	r3, [r7, #4]
 8109776:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8109778:	4b11      	ldr	r3, [pc, #68]	; (81097c0 <HAL_RCC_GetClockConfig+0x7c>)
 810977a:	699b      	ldr	r3, [r3, #24]
 810977c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8109780:	687b      	ldr	r3, [r7, #4]
 8109782:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8109784:	4b0e      	ldr	r3, [pc, #56]	; (81097c0 <HAL_RCC_GetClockConfig+0x7c>)
 8109786:	69db      	ldr	r3, [r3, #28]
 8109788:	f003 0270 	and.w	r2, r3, #112	; 0x70
 810978c:	687b      	ldr	r3, [r7, #4]
 810978e:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8109790:	4b0b      	ldr	r3, [pc, #44]	; (81097c0 <HAL_RCC_GetClockConfig+0x7c>)
 8109792:	69db      	ldr	r3, [r3, #28]
 8109794:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8109798:	687b      	ldr	r3, [r7, #4]
 810979a:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 810979c:	4b08      	ldr	r3, [pc, #32]	; (81097c0 <HAL_RCC_GetClockConfig+0x7c>)
 810979e:	6a1b      	ldr	r3, [r3, #32]
 81097a0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 81097a4:	687b      	ldr	r3, [r7, #4]
 81097a6:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 81097a8:	4b06      	ldr	r3, [pc, #24]	; (81097c4 <HAL_RCC_GetClockConfig+0x80>)
 81097aa:	681b      	ldr	r3, [r3, #0]
 81097ac:	f003 020f 	and.w	r2, r3, #15
 81097b0:	683b      	ldr	r3, [r7, #0]
 81097b2:	601a      	str	r2, [r3, #0]
}
 81097b4:	bf00      	nop
 81097b6:	370c      	adds	r7, #12
 81097b8:	46bd      	mov	sp, r7
 81097ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 81097be:	4770      	bx	lr
 81097c0:	58024400 	.word	0x58024400
 81097c4:	52002000 	.word	0x52002000

081097c8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 81097c8:	b580      	push	{r7, lr}
 81097ca:	b086      	sub	sp, #24
 81097cc:	af00      	add	r7, sp, #0
 81097ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 81097d0:	2300      	movs	r3, #0
 81097d2:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 81097d4:	2300      	movs	r3, #0
 81097d6:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 81097d8:	687b      	ldr	r3, [r7, #4]
 81097da:	681b      	ldr	r3, [r3, #0]
 81097dc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 81097e0:	2b00      	cmp	r3, #0
 81097e2:	d03f      	beq.n	8109864 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 81097e4:	687b      	ldr	r3, [r7, #4]
 81097e6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 81097e8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 81097ec:	d02a      	beq.n	8109844 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 81097ee:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 81097f2:	d824      	bhi.n	810983e <HAL_RCCEx_PeriphCLKConfig+0x76>
 81097f4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 81097f8:	d018      	beq.n	810982c <HAL_RCCEx_PeriphCLKConfig+0x64>
 81097fa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 81097fe:	d81e      	bhi.n	810983e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8109800:	2b00      	cmp	r3, #0
 8109802:	d003      	beq.n	810980c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8109804:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8109808:	d007      	beq.n	810981a <HAL_RCCEx_PeriphCLKConfig+0x52>
 810980a:	e018      	b.n	810983e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810980c:	4bab      	ldr	r3, [pc, #684]	; (8109abc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 810980e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8109810:	4aaa      	ldr	r2, [pc, #680]	; (8109abc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8109812:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8109816:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8109818:	e015      	b.n	8109846 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 810981a:	687b      	ldr	r3, [r7, #4]
 810981c:	3304      	adds	r3, #4
 810981e:	2102      	movs	r1, #2
 8109820:	4618      	mov	r0, r3
 8109822:	f001 fff3 	bl	810b80c <RCCEx_PLL2_Config>
 8109826:	4603      	mov	r3, r0
 8109828:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 810982a:	e00c      	b.n	8109846 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 810982c:	687b      	ldr	r3, [r7, #4]
 810982e:	3324      	adds	r3, #36	; 0x24
 8109830:	2102      	movs	r1, #2
 8109832:	4618      	mov	r0, r3
 8109834:	f002 f89c 	bl	810b970 <RCCEx_PLL3_Config>
 8109838:	4603      	mov	r3, r0
 810983a:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 810983c:	e003      	b.n	8109846 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 810983e:	2301      	movs	r3, #1
 8109840:	75fb      	strb	r3, [r7, #23]
      break;
 8109842:	e000      	b.n	8109846 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8109844:	bf00      	nop
    }

    if(ret == HAL_OK)
 8109846:	7dfb      	ldrb	r3, [r7, #23]
 8109848:	2b00      	cmp	r3, #0
 810984a:	d109      	bne.n	8109860 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 810984c:	4b9b      	ldr	r3, [pc, #620]	; (8109abc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 810984e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8109850:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8109854:	687b      	ldr	r3, [r7, #4]
 8109856:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8109858:	4998      	ldr	r1, [pc, #608]	; (8109abc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 810985a:	4313      	orrs	r3, r2
 810985c:	650b      	str	r3, [r1, #80]	; 0x50
 810985e:	e001      	b.n	8109864 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8109860:	7dfb      	ldrb	r3, [r7, #23]
 8109862:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8109864:	687b      	ldr	r3, [r7, #4]
 8109866:	681b      	ldr	r3, [r3, #0]
 8109868:	f403 7380 	and.w	r3, r3, #256	; 0x100
 810986c:	2b00      	cmp	r3, #0
 810986e:	d03d      	beq.n	81098ec <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8109870:	687b      	ldr	r3, [r7, #4]
 8109872:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8109874:	2b04      	cmp	r3, #4
 8109876:	d826      	bhi.n	81098c6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8109878:	a201      	add	r2, pc, #4	; (adr r2, 8109880 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 810987a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810987e:	bf00      	nop
 8109880:	08109895 	.word	0x08109895
 8109884:	081098a3 	.word	0x081098a3
 8109888:	081098b5 	.word	0x081098b5
 810988c:	081098cd 	.word	0x081098cd
 8109890:	081098cd 	.word	0x081098cd
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8109894:	4b89      	ldr	r3, [pc, #548]	; (8109abc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8109896:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8109898:	4a88      	ldr	r2, [pc, #544]	; (8109abc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 810989a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 810989e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 81098a0:	e015      	b.n	81098ce <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 81098a2:	687b      	ldr	r3, [r7, #4]
 81098a4:	3304      	adds	r3, #4
 81098a6:	2100      	movs	r1, #0
 81098a8:	4618      	mov	r0, r3
 81098aa:	f001 ffaf 	bl	810b80c <RCCEx_PLL2_Config>
 81098ae:	4603      	mov	r3, r0
 81098b0:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 81098b2:	e00c      	b.n	81098ce <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 81098b4:	687b      	ldr	r3, [r7, #4]
 81098b6:	3324      	adds	r3, #36	; 0x24
 81098b8:	2100      	movs	r1, #0
 81098ba:	4618      	mov	r0, r3
 81098bc:	f002 f858 	bl	810b970 <RCCEx_PLL3_Config>
 81098c0:	4603      	mov	r3, r0
 81098c2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 81098c4:	e003      	b.n	81098ce <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 81098c6:	2301      	movs	r3, #1
 81098c8:	75fb      	strb	r3, [r7, #23]
      break;
 81098ca:	e000      	b.n	81098ce <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 81098cc:	bf00      	nop
    }

    if(ret == HAL_OK)
 81098ce:	7dfb      	ldrb	r3, [r7, #23]
 81098d0:	2b00      	cmp	r3, #0
 81098d2:	d109      	bne.n	81098e8 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 81098d4:	4b79      	ldr	r3, [pc, #484]	; (8109abc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 81098d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81098d8:	f023 0207 	bic.w	r2, r3, #7
 81098dc:	687b      	ldr	r3, [r7, #4]
 81098de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81098e0:	4976      	ldr	r1, [pc, #472]	; (8109abc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 81098e2:	4313      	orrs	r3, r2
 81098e4:	650b      	str	r3, [r1, #80]	; 0x50
 81098e6:	e001      	b.n	81098ec <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81098e8:	7dfb      	ldrb	r3, [r7, #23]
 81098ea:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 81098ec:	687b      	ldr	r3, [r7, #4]
 81098ee:	681b      	ldr	r3, [r3, #0]
 81098f0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 81098f4:	2b00      	cmp	r3, #0
 81098f6:	d042      	beq.n	810997e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 81098f8:	687b      	ldr	r3, [r7, #4]
 81098fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81098fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8109900:	d02b      	beq.n	810995a <HAL_RCCEx_PeriphCLKConfig+0x192>
 8109902:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8109906:	d825      	bhi.n	8109954 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8109908:	2bc0      	cmp	r3, #192	; 0xc0
 810990a:	d028      	beq.n	810995e <HAL_RCCEx_PeriphCLKConfig+0x196>
 810990c:	2bc0      	cmp	r3, #192	; 0xc0
 810990e:	d821      	bhi.n	8109954 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8109910:	2b80      	cmp	r3, #128	; 0x80
 8109912:	d016      	beq.n	8109942 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8109914:	2b80      	cmp	r3, #128	; 0x80
 8109916:	d81d      	bhi.n	8109954 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8109918:	2b00      	cmp	r3, #0
 810991a:	d002      	beq.n	8109922 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 810991c:	2b40      	cmp	r3, #64	; 0x40
 810991e:	d007      	beq.n	8109930 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8109920:	e018      	b.n	8109954 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8109922:	4b66      	ldr	r3, [pc, #408]	; (8109abc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8109924:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8109926:	4a65      	ldr	r2, [pc, #404]	; (8109abc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8109928:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 810992c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 810992e:	e017      	b.n	8109960 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8109930:	687b      	ldr	r3, [r7, #4]
 8109932:	3304      	adds	r3, #4
 8109934:	2100      	movs	r1, #0
 8109936:	4618      	mov	r0, r3
 8109938:	f001 ff68 	bl	810b80c <RCCEx_PLL2_Config>
 810993c:	4603      	mov	r3, r0
 810993e:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8109940:	e00e      	b.n	8109960 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8109942:	687b      	ldr	r3, [r7, #4]
 8109944:	3324      	adds	r3, #36	; 0x24
 8109946:	2100      	movs	r1, #0
 8109948:	4618      	mov	r0, r3
 810994a:	f002 f811 	bl	810b970 <RCCEx_PLL3_Config>
 810994e:	4603      	mov	r3, r0
 8109950:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8109952:	e005      	b.n	8109960 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8109954:	2301      	movs	r3, #1
 8109956:	75fb      	strb	r3, [r7, #23]
      break;
 8109958:	e002      	b.n	8109960 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 810995a:	bf00      	nop
 810995c:	e000      	b.n	8109960 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 810995e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8109960:	7dfb      	ldrb	r3, [r7, #23]
 8109962:	2b00      	cmp	r3, #0
 8109964:	d109      	bne.n	810997a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8109966:	4b55      	ldr	r3, [pc, #340]	; (8109abc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8109968:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810996a:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 810996e:	687b      	ldr	r3, [r7, #4]
 8109970:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8109972:	4952      	ldr	r1, [pc, #328]	; (8109abc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8109974:	4313      	orrs	r3, r2
 8109976:	650b      	str	r3, [r1, #80]	; 0x50
 8109978:	e001      	b.n	810997e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810997a:	7dfb      	ldrb	r3, [r7, #23]
 810997c:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 810997e:	687b      	ldr	r3, [r7, #4]
 8109980:	681b      	ldr	r3, [r3, #0]
 8109982:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8109986:	2b00      	cmp	r3, #0
 8109988:	d049      	beq.n	8109a1e <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 810998a:	687b      	ldr	r3, [r7, #4]
 810998c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8109990:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8109994:	d030      	beq.n	81099f8 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8109996:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 810999a:	d82a      	bhi.n	81099f2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 810999c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 81099a0:	d02c      	beq.n	81099fc <HAL_RCCEx_PeriphCLKConfig+0x234>
 81099a2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 81099a6:	d824      	bhi.n	81099f2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 81099a8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 81099ac:	d018      	beq.n	81099e0 <HAL_RCCEx_PeriphCLKConfig+0x218>
 81099ae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 81099b2:	d81e      	bhi.n	81099f2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 81099b4:	2b00      	cmp	r3, #0
 81099b6:	d003      	beq.n	81099c0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 81099b8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 81099bc:	d007      	beq.n	81099ce <HAL_RCCEx_PeriphCLKConfig+0x206>
 81099be:	e018      	b.n	81099f2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81099c0:	4b3e      	ldr	r3, [pc, #248]	; (8109abc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 81099c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81099c4:	4a3d      	ldr	r2, [pc, #244]	; (8109abc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 81099c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81099ca:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 81099cc:	e017      	b.n	81099fe <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 81099ce:	687b      	ldr	r3, [r7, #4]
 81099d0:	3304      	adds	r3, #4
 81099d2:	2100      	movs	r1, #0
 81099d4:	4618      	mov	r0, r3
 81099d6:	f001 ff19 	bl	810b80c <RCCEx_PLL2_Config>
 81099da:	4603      	mov	r3, r0
 81099dc:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 81099de:	e00e      	b.n	81099fe <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 81099e0:	687b      	ldr	r3, [r7, #4]
 81099e2:	3324      	adds	r3, #36	; 0x24
 81099e4:	2100      	movs	r1, #0
 81099e6:	4618      	mov	r0, r3
 81099e8:	f001 ffc2 	bl	810b970 <RCCEx_PLL3_Config>
 81099ec:	4603      	mov	r3, r0
 81099ee:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 81099f0:	e005      	b.n	81099fe <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 81099f2:	2301      	movs	r3, #1
 81099f4:	75fb      	strb	r3, [r7, #23]
      break;
 81099f6:	e002      	b.n	81099fe <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 81099f8:	bf00      	nop
 81099fa:	e000      	b.n	81099fe <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 81099fc:	bf00      	nop
    }

    if(ret == HAL_OK)
 81099fe:	7dfb      	ldrb	r3, [r7, #23]
 8109a00:	2b00      	cmp	r3, #0
 8109a02:	d10a      	bne.n	8109a1a <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8109a04:	4b2d      	ldr	r3, [pc, #180]	; (8109abc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8109a06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8109a08:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8109a0c:	687b      	ldr	r3, [r7, #4]
 8109a0e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8109a12:	492a      	ldr	r1, [pc, #168]	; (8109abc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8109a14:	4313      	orrs	r3, r2
 8109a16:	658b      	str	r3, [r1, #88]	; 0x58
 8109a18:	e001      	b.n	8109a1e <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8109a1a:	7dfb      	ldrb	r3, [r7, #23]
 8109a1c:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8109a1e:	687b      	ldr	r3, [r7, #4]
 8109a20:	681b      	ldr	r3, [r3, #0]
 8109a22:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8109a26:	2b00      	cmp	r3, #0
 8109a28:	d04c      	beq.n	8109ac4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8109a2a:	687b      	ldr	r3, [r7, #4]
 8109a2c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8109a30:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8109a34:	d030      	beq.n	8109a98 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8109a36:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8109a3a:	d82a      	bhi.n	8109a92 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8109a3c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8109a40:	d02c      	beq.n	8109a9c <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 8109a42:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8109a46:	d824      	bhi.n	8109a92 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8109a48:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8109a4c:	d018      	beq.n	8109a80 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8109a4e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8109a52:	d81e      	bhi.n	8109a92 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8109a54:	2b00      	cmp	r3, #0
 8109a56:	d003      	beq.n	8109a60 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8109a58:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8109a5c:	d007      	beq.n	8109a6e <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8109a5e:	e018      	b.n	8109a92 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8109a60:	4b16      	ldr	r3, [pc, #88]	; (8109abc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8109a62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8109a64:	4a15      	ldr	r2, [pc, #84]	; (8109abc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8109a66:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8109a6a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8109a6c:	e017      	b.n	8109a9e <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8109a6e:	687b      	ldr	r3, [r7, #4]
 8109a70:	3304      	adds	r3, #4
 8109a72:	2100      	movs	r1, #0
 8109a74:	4618      	mov	r0, r3
 8109a76:	f001 fec9 	bl	810b80c <RCCEx_PLL2_Config>
 8109a7a:	4603      	mov	r3, r0
 8109a7c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8109a7e:	e00e      	b.n	8109a9e <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8109a80:	687b      	ldr	r3, [r7, #4]
 8109a82:	3324      	adds	r3, #36	; 0x24
 8109a84:	2100      	movs	r1, #0
 8109a86:	4618      	mov	r0, r3
 8109a88:	f001 ff72 	bl	810b970 <RCCEx_PLL3_Config>
 8109a8c:	4603      	mov	r3, r0
 8109a8e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8109a90:	e005      	b.n	8109a9e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8109a92:	2301      	movs	r3, #1
 8109a94:	75fb      	strb	r3, [r7, #23]
      break;
 8109a96:	e002      	b.n	8109a9e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8109a98:	bf00      	nop
 8109a9a:	e000      	b.n	8109a9e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8109a9c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8109a9e:	7dfb      	ldrb	r3, [r7, #23]
 8109aa0:	2b00      	cmp	r3, #0
 8109aa2:	d10d      	bne.n	8109ac0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8109aa4:	4b05      	ldr	r3, [pc, #20]	; (8109abc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8109aa6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8109aa8:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8109aac:	687b      	ldr	r3, [r7, #4]
 8109aae:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8109ab2:	4902      	ldr	r1, [pc, #8]	; (8109abc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8109ab4:	4313      	orrs	r3, r2
 8109ab6:	658b      	str	r3, [r1, #88]	; 0x58
 8109ab8:	e004      	b.n	8109ac4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8109aba:	bf00      	nop
 8109abc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8109ac0:	7dfb      	ldrb	r3, [r7, #23]
 8109ac2:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8109ac4:	687b      	ldr	r3, [r7, #4]
 8109ac6:	681b      	ldr	r3, [r3, #0]
 8109ac8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8109acc:	2b00      	cmp	r3, #0
 8109ace:	d032      	beq.n	8109b36 <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8109ad0:	687b      	ldr	r3, [r7, #4]
 8109ad2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8109ad4:	2b30      	cmp	r3, #48	; 0x30
 8109ad6:	d01c      	beq.n	8109b12 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8109ad8:	2b30      	cmp	r3, #48	; 0x30
 8109ada:	d817      	bhi.n	8109b0c <HAL_RCCEx_PeriphCLKConfig+0x344>
 8109adc:	2b20      	cmp	r3, #32
 8109ade:	d00c      	beq.n	8109afa <HAL_RCCEx_PeriphCLKConfig+0x332>
 8109ae0:	2b20      	cmp	r3, #32
 8109ae2:	d813      	bhi.n	8109b0c <HAL_RCCEx_PeriphCLKConfig+0x344>
 8109ae4:	2b00      	cmp	r3, #0
 8109ae6:	d016      	beq.n	8109b16 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8109ae8:	2b10      	cmp	r3, #16
 8109aea:	d10f      	bne.n	8109b0c <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8109aec:	4baf      	ldr	r3, [pc, #700]	; (8109dac <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8109aee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8109af0:	4aae      	ldr	r2, [pc, #696]	; (8109dac <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8109af2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8109af6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8109af8:	e00e      	b.n	8109b18 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8109afa:	687b      	ldr	r3, [r7, #4]
 8109afc:	3304      	adds	r3, #4
 8109afe:	2102      	movs	r1, #2
 8109b00:	4618      	mov	r0, r3
 8109b02:	f001 fe83 	bl	810b80c <RCCEx_PLL2_Config>
 8109b06:	4603      	mov	r3, r0
 8109b08:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8109b0a:	e005      	b.n	8109b18 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8109b0c:	2301      	movs	r3, #1
 8109b0e:	75fb      	strb	r3, [r7, #23]
      break;
 8109b10:	e002      	b.n	8109b18 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8109b12:	bf00      	nop
 8109b14:	e000      	b.n	8109b18 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8109b16:	bf00      	nop
    }

    if(ret == HAL_OK)
 8109b18:	7dfb      	ldrb	r3, [r7, #23]
 8109b1a:	2b00      	cmp	r3, #0
 8109b1c:	d109      	bne.n	8109b32 <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8109b1e:	4ba3      	ldr	r3, [pc, #652]	; (8109dac <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8109b20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8109b22:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8109b26:	687b      	ldr	r3, [r7, #4]
 8109b28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8109b2a:	49a0      	ldr	r1, [pc, #640]	; (8109dac <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8109b2c:	4313      	orrs	r3, r2
 8109b2e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8109b30:	e001      	b.n	8109b36 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8109b32:	7dfb      	ldrb	r3, [r7, #23]
 8109b34:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8109b36:	687b      	ldr	r3, [r7, #4]
 8109b38:	681b      	ldr	r3, [r3, #0]
 8109b3a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8109b3e:	2b00      	cmp	r3, #0
 8109b40:	d047      	beq.n	8109bd2 <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8109b42:	687b      	ldr	r3, [r7, #4]
 8109b44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8109b46:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8109b4a:	d030      	beq.n	8109bae <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8109b4c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8109b50:	d82a      	bhi.n	8109ba8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8109b52:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8109b56:	d02c      	beq.n	8109bb2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8109b58:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8109b5c:	d824      	bhi.n	8109ba8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8109b5e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8109b62:	d018      	beq.n	8109b96 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 8109b64:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8109b68:	d81e      	bhi.n	8109ba8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8109b6a:	2b00      	cmp	r3, #0
 8109b6c:	d003      	beq.n	8109b76 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8109b6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8109b72:	d007      	beq.n	8109b84 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8109b74:	e018      	b.n	8109ba8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8109b76:	4b8d      	ldr	r3, [pc, #564]	; (8109dac <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8109b78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8109b7a:	4a8c      	ldr	r2, [pc, #560]	; (8109dac <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8109b7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8109b80:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8109b82:	e017      	b.n	8109bb4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8109b84:	687b      	ldr	r3, [r7, #4]
 8109b86:	3304      	adds	r3, #4
 8109b88:	2100      	movs	r1, #0
 8109b8a:	4618      	mov	r0, r3
 8109b8c:	f001 fe3e 	bl	810b80c <RCCEx_PLL2_Config>
 8109b90:	4603      	mov	r3, r0
 8109b92:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8109b94:	e00e      	b.n	8109bb4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8109b96:	687b      	ldr	r3, [r7, #4]
 8109b98:	3324      	adds	r3, #36	; 0x24
 8109b9a:	2100      	movs	r1, #0
 8109b9c:	4618      	mov	r0, r3
 8109b9e:	f001 fee7 	bl	810b970 <RCCEx_PLL3_Config>
 8109ba2:	4603      	mov	r3, r0
 8109ba4:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8109ba6:	e005      	b.n	8109bb4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8109ba8:	2301      	movs	r3, #1
 8109baa:	75fb      	strb	r3, [r7, #23]
      break;
 8109bac:	e002      	b.n	8109bb4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8109bae:	bf00      	nop
 8109bb0:	e000      	b.n	8109bb4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8109bb2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8109bb4:	7dfb      	ldrb	r3, [r7, #23]
 8109bb6:	2b00      	cmp	r3, #0
 8109bb8:	d109      	bne.n	8109bce <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8109bba:	4b7c      	ldr	r3, [pc, #496]	; (8109dac <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8109bbc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8109bbe:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8109bc2:	687b      	ldr	r3, [r7, #4]
 8109bc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8109bc6:	4979      	ldr	r1, [pc, #484]	; (8109dac <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8109bc8:	4313      	orrs	r3, r2
 8109bca:	650b      	str	r3, [r1, #80]	; 0x50
 8109bcc:	e001      	b.n	8109bd2 <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8109bce:	7dfb      	ldrb	r3, [r7, #23]
 8109bd0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8109bd2:	687b      	ldr	r3, [r7, #4]
 8109bd4:	681b      	ldr	r3, [r3, #0]
 8109bd6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8109bda:	2b00      	cmp	r3, #0
 8109bdc:	d049      	beq.n	8109c72 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8109bde:	687b      	ldr	r3, [r7, #4]
 8109be0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8109be2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8109be6:	d02e      	beq.n	8109c46 <HAL_RCCEx_PeriphCLKConfig+0x47e>
 8109be8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8109bec:	d828      	bhi.n	8109c40 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8109bee:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8109bf2:	d02a      	beq.n	8109c4a <HAL_RCCEx_PeriphCLKConfig+0x482>
 8109bf4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8109bf8:	d822      	bhi.n	8109c40 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8109bfa:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8109bfe:	d026      	beq.n	8109c4e <HAL_RCCEx_PeriphCLKConfig+0x486>
 8109c00:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8109c04:	d81c      	bhi.n	8109c40 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8109c06:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8109c0a:	d010      	beq.n	8109c2e <HAL_RCCEx_PeriphCLKConfig+0x466>
 8109c0c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8109c10:	d816      	bhi.n	8109c40 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8109c12:	2b00      	cmp	r3, #0
 8109c14:	d01d      	beq.n	8109c52 <HAL_RCCEx_PeriphCLKConfig+0x48a>
 8109c16:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8109c1a:	d111      	bne.n	8109c40 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8109c1c:	687b      	ldr	r3, [r7, #4]
 8109c1e:	3304      	adds	r3, #4
 8109c20:	2101      	movs	r1, #1
 8109c22:	4618      	mov	r0, r3
 8109c24:	f001 fdf2 	bl	810b80c <RCCEx_PLL2_Config>
 8109c28:	4603      	mov	r3, r0
 8109c2a:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8109c2c:	e012      	b.n	8109c54 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8109c2e:	687b      	ldr	r3, [r7, #4]
 8109c30:	3324      	adds	r3, #36	; 0x24
 8109c32:	2101      	movs	r1, #1
 8109c34:	4618      	mov	r0, r3
 8109c36:	f001 fe9b 	bl	810b970 <RCCEx_PLL3_Config>
 8109c3a:	4603      	mov	r3, r0
 8109c3c:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8109c3e:	e009      	b.n	8109c54 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8109c40:	2301      	movs	r3, #1
 8109c42:	75fb      	strb	r3, [r7, #23]
      break;
 8109c44:	e006      	b.n	8109c54 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8109c46:	bf00      	nop
 8109c48:	e004      	b.n	8109c54 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8109c4a:	bf00      	nop
 8109c4c:	e002      	b.n	8109c54 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8109c4e:	bf00      	nop
 8109c50:	e000      	b.n	8109c54 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8109c52:	bf00      	nop
    }

    if(ret == HAL_OK)
 8109c54:	7dfb      	ldrb	r3, [r7, #23]
 8109c56:	2b00      	cmp	r3, #0
 8109c58:	d109      	bne.n	8109c6e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8109c5a:	4b54      	ldr	r3, [pc, #336]	; (8109dac <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8109c5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8109c5e:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8109c62:	687b      	ldr	r3, [r7, #4]
 8109c64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8109c66:	4951      	ldr	r1, [pc, #324]	; (8109dac <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8109c68:	4313      	orrs	r3, r2
 8109c6a:	650b      	str	r3, [r1, #80]	; 0x50
 8109c6c:	e001      	b.n	8109c72 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8109c6e:	7dfb      	ldrb	r3, [r7, #23]
 8109c70:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8109c72:	687b      	ldr	r3, [r7, #4]
 8109c74:	681b      	ldr	r3, [r3, #0]
 8109c76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8109c7a:	2b00      	cmp	r3, #0
 8109c7c:	d04b      	beq.n	8109d16 <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8109c7e:	687b      	ldr	r3, [r7, #4]
 8109c80:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8109c84:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8109c88:	d02e      	beq.n	8109ce8 <HAL_RCCEx_PeriphCLKConfig+0x520>
 8109c8a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8109c8e:	d828      	bhi.n	8109ce2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8109c90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8109c94:	d02a      	beq.n	8109cec <HAL_RCCEx_PeriphCLKConfig+0x524>
 8109c96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8109c9a:	d822      	bhi.n	8109ce2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8109c9c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8109ca0:	d026      	beq.n	8109cf0 <HAL_RCCEx_PeriphCLKConfig+0x528>
 8109ca2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8109ca6:	d81c      	bhi.n	8109ce2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8109ca8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8109cac:	d010      	beq.n	8109cd0 <HAL_RCCEx_PeriphCLKConfig+0x508>
 8109cae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8109cb2:	d816      	bhi.n	8109ce2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8109cb4:	2b00      	cmp	r3, #0
 8109cb6:	d01d      	beq.n	8109cf4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8109cb8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8109cbc:	d111      	bne.n	8109ce2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8109cbe:	687b      	ldr	r3, [r7, #4]
 8109cc0:	3304      	adds	r3, #4
 8109cc2:	2101      	movs	r1, #1
 8109cc4:	4618      	mov	r0, r3
 8109cc6:	f001 fda1 	bl	810b80c <RCCEx_PLL2_Config>
 8109cca:	4603      	mov	r3, r0
 8109ccc:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8109cce:	e012      	b.n	8109cf6 <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8109cd0:	687b      	ldr	r3, [r7, #4]
 8109cd2:	3324      	adds	r3, #36	; 0x24
 8109cd4:	2101      	movs	r1, #1
 8109cd6:	4618      	mov	r0, r3
 8109cd8:	f001 fe4a 	bl	810b970 <RCCEx_PLL3_Config>
 8109cdc:	4603      	mov	r3, r0
 8109cde:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8109ce0:	e009      	b.n	8109cf6 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8109ce2:	2301      	movs	r3, #1
 8109ce4:	75fb      	strb	r3, [r7, #23]
      break;
 8109ce6:	e006      	b.n	8109cf6 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8109ce8:	bf00      	nop
 8109cea:	e004      	b.n	8109cf6 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8109cec:	bf00      	nop
 8109cee:	e002      	b.n	8109cf6 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8109cf0:	bf00      	nop
 8109cf2:	e000      	b.n	8109cf6 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8109cf4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8109cf6:	7dfb      	ldrb	r3, [r7, #23]
 8109cf8:	2b00      	cmp	r3, #0
 8109cfa:	d10a      	bne.n	8109d12 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8109cfc:	4b2b      	ldr	r3, [pc, #172]	; (8109dac <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8109cfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8109d00:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8109d04:	687b      	ldr	r3, [r7, #4]
 8109d06:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8109d0a:	4928      	ldr	r1, [pc, #160]	; (8109dac <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8109d0c:	4313      	orrs	r3, r2
 8109d0e:	658b      	str	r3, [r1, #88]	; 0x58
 8109d10:	e001      	b.n	8109d16 <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8109d12:	7dfb      	ldrb	r3, [r7, #23]
 8109d14:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8109d16:	687b      	ldr	r3, [r7, #4]
 8109d18:	681b      	ldr	r3, [r3, #0]
 8109d1a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8109d1e:	2b00      	cmp	r3, #0
 8109d20:	d02f      	beq.n	8109d82 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8109d22:	687b      	ldr	r3, [r7, #4]
 8109d24:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8109d26:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8109d2a:	d00e      	beq.n	8109d4a <HAL_RCCEx_PeriphCLKConfig+0x582>
 8109d2c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8109d30:	d814      	bhi.n	8109d5c <HAL_RCCEx_PeriphCLKConfig+0x594>
 8109d32:	2b00      	cmp	r3, #0
 8109d34:	d015      	beq.n	8109d62 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8109d36:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8109d3a:	d10f      	bne.n	8109d5c <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8109d3c:	4b1b      	ldr	r3, [pc, #108]	; (8109dac <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8109d3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8109d40:	4a1a      	ldr	r2, [pc, #104]	; (8109dac <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8109d42:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8109d46:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8109d48:	e00c      	b.n	8109d64 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8109d4a:	687b      	ldr	r3, [r7, #4]
 8109d4c:	3304      	adds	r3, #4
 8109d4e:	2101      	movs	r1, #1
 8109d50:	4618      	mov	r0, r3
 8109d52:	f001 fd5b 	bl	810b80c <RCCEx_PLL2_Config>
 8109d56:	4603      	mov	r3, r0
 8109d58:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8109d5a:	e003      	b.n	8109d64 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8109d5c:	2301      	movs	r3, #1
 8109d5e:	75fb      	strb	r3, [r7, #23]
      break;
 8109d60:	e000      	b.n	8109d64 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 8109d62:	bf00      	nop
    }

    if(ret == HAL_OK)
 8109d64:	7dfb      	ldrb	r3, [r7, #23]
 8109d66:	2b00      	cmp	r3, #0
 8109d68:	d109      	bne.n	8109d7e <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8109d6a:	4b10      	ldr	r3, [pc, #64]	; (8109dac <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8109d6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8109d6e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8109d72:	687b      	ldr	r3, [r7, #4]
 8109d74:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8109d76:	490d      	ldr	r1, [pc, #52]	; (8109dac <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8109d78:	4313      	orrs	r3, r2
 8109d7a:	650b      	str	r3, [r1, #80]	; 0x50
 8109d7c:	e001      	b.n	8109d82 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8109d7e:	7dfb      	ldrb	r3, [r7, #23]
 8109d80:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8109d82:	687b      	ldr	r3, [r7, #4]
 8109d84:	681b      	ldr	r3, [r3, #0]
 8109d86:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8109d8a:	2b00      	cmp	r3, #0
 8109d8c:	d033      	beq.n	8109df6 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8109d8e:	687b      	ldr	r3, [r7, #4]
 8109d90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8109d92:	2b03      	cmp	r3, #3
 8109d94:	d81c      	bhi.n	8109dd0 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8109d96:	a201      	add	r2, pc, #4	; (adr r2, 8109d9c <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 8109d98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8109d9c:	08109dd7 	.word	0x08109dd7
 8109da0:	08109db1 	.word	0x08109db1
 8109da4:	08109dbf 	.word	0x08109dbf
 8109da8:	08109dd7 	.word	0x08109dd7
 8109dac:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8109db0:	4bb9      	ldr	r3, [pc, #740]	; (810a098 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8109db2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8109db4:	4ab8      	ldr	r2, [pc, #736]	; (810a098 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8109db6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8109dba:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8109dbc:	e00c      	b.n	8109dd8 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8109dbe:	687b      	ldr	r3, [r7, #4]
 8109dc0:	3304      	adds	r3, #4
 8109dc2:	2102      	movs	r1, #2
 8109dc4:	4618      	mov	r0, r3
 8109dc6:	f001 fd21 	bl	810b80c <RCCEx_PLL2_Config>
 8109dca:	4603      	mov	r3, r0
 8109dcc:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8109dce:	e003      	b.n	8109dd8 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8109dd0:	2301      	movs	r3, #1
 8109dd2:	75fb      	strb	r3, [r7, #23]
      break;
 8109dd4:	e000      	b.n	8109dd8 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8109dd6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8109dd8:	7dfb      	ldrb	r3, [r7, #23]
 8109dda:	2b00      	cmp	r3, #0
 8109ddc:	d109      	bne.n	8109df2 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8109dde:	4bae      	ldr	r3, [pc, #696]	; (810a098 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8109de0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8109de2:	f023 0203 	bic.w	r2, r3, #3
 8109de6:	687b      	ldr	r3, [r7, #4]
 8109de8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8109dea:	49ab      	ldr	r1, [pc, #684]	; (810a098 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8109dec:	4313      	orrs	r3, r2
 8109dee:	64cb      	str	r3, [r1, #76]	; 0x4c
 8109df0:	e001      	b.n	8109df6 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8109df2:	7dfb      	ldrb	r3, [r7, #23]
 8109df4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8109df6:	687b      	ldr	r3, [r7, #4]
 8109df8:	681b      	ldr	r3, [r3, #0]
 8109dfa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8109dfe:	2b00      	cmp	r3, #0
 8109e00:	f000 8088 	beq.w	8109f14 <HAL_RCCEx_PeriphCLKConfig+0x74c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8109e04:	4ba5      	ldr	r3, [pc, #660]	; (810a09c <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 8109e06:	681b      	ldr	r3, [r3, #0]
 8109e08:	4aa4      	ldr	r2, [pc, #656]	; (810a09c <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 8109e0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8109e0e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8109e10:	f7f8 fdf2 	bl	81029f8 <HAL_GetTick>
 8109e14:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8109e16:	e009      	b.n	8109e2c <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8109e18:	f7f8 fdee 	bl	81029f8 <HAL_GetTick>
 8109e1c:	4602      	mov	r2, r0
 8109e1e:	693b      	ldr	r3, [r7, #16]
 8109e20:	1ad3      	subs	r3, r2, r3
 8109e22:	2b64      	cmp	r3, #100	; 0x64
 8109e24:	d902      	bls.n	8109e2c <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8109e26:	2303      	movs	r3, #3
 8109e28:	75fb      	strb	r3, [r7, #23]
        break;
 8109e2a:	e005      	b.n	8109e38 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8109e2c:	4b9b      	ldr	r3, [pc, #620]	; (810a09c <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 8109e2e:	681b      	ldr	r3, [r3, #0]
 8109e30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8109e34:	2b00      	cmp	r3, #0
 8109e36:	d0ef      	beq.n	8109e18 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8109e38:	7dfb      	ldrb	r3, [r7, #23]
 8109e3a:	2b00      	cmp	r3, #0
 8109e3c:	d168      	bne.n	8109f10 <HAL_RCCEx_PeriphCLKConfig+0x748>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8109e3e:	4b96      	ldr	r3, [pc, #600]	; (810a098 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8109e40:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8109e42:	687b      	ldr	r3, [r7, #4]
 8109e44:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8109e48:	4053      	eors	r3, r2
 8109e4a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8109e4e:	2b00      	cmp	r3, #0
 8109e50:	d013      	beq.n	8109e7a <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8109e52:	4b91      	ldr	r3, [pc, #580]	; (810a098 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8109e54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8109e56:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8109e5a:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8109e5c:	4b8e      	ldr	r3, [pc, #568]	; (810a098 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8109e5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8109e60:	4a8d      	ldr	r2, [pc, #564]	; (810a098 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8109e62:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8109e66:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8109e68:	4b8b      	ldr	r3, [pc, #556]	; (810a098 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8109e6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8109e6c:	4a8a      	ldr	r2, [pc, #552]	; (810a098 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8109e6e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8109e72:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8109e74:	4a88      	ldr	r2, [pc, #544]	; (810a098 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8109e76:	68fb      	ldr	r3, [r7, #12]
 8109e78:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8109e7a:	687b      	ldr	r3, [r7, #4]
 8109e7c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8109e80:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8109e84:	d115      	bne.n	8109eb2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8109e86:	f7f8 fdb7 	bl	81029f8 <HAL_GetTick>
 8109e8a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8109e8c:	e00b      	b.n	8109ea6 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8109e8e:	f7f8 fdb3 	bl	81029f8 <HAL_GetTick>
 8109e92:	4602      	mov	r2, r0
 8109e94:	693b      	ldr	r3, [r7, #16]
 8109e96:	1ad3      	subs	r3, r2, r3
 8109e98:	f241 3288 	movw	r2, #5000	; 0x1388
 8109e9c:	4293      	cmp	r3, r2
 8109e9e:	d902      	bls.n	8109ea6 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8109ea0:	2303      	movs	r3, #3
 8109ea2:	75fb      	strb	r3, [r7, #23]
            break;
 8109ea4:	e005      	b.n	8109eb2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8109ea6:	4b7c      	ldr	r3, [pc, #496]	; (810a098 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8109ea8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8109eaa:	f003 0302 	and.w	r3, r3, #2
 8109eae:	2b00      	cmp	r3, #0
 8109eb0:	d0ed      	beq.n	8109e8e <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8109eb2:	7dfb      	ldrb	r3, [r7, #23]
 8109eb4:	2b00      	cmp	r3, #0
 8109eb6:	d128      	bne.n	8109f0a <HAL_RCCEx_PeriphCLKConfig+0x742>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8109eb8:	687b      	ldr	r3, [r7, #4]
 8109eba:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8109ebe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8109ec2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8109ec6:	d10f      	bne.n	8109ee8 <HAL_RCCEx_PeriphCLKConfig+0x720>
 8109ec8:	4b73      	ldr	r3, [pc, #460]	; (810a098 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8109eca:	691b      	ldr	r3, [r3, #16]
 8109ecc:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8109ed0:	687b      	ldr	r3, [r7, #4]
 8109ed2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8109ed6:	091b      	lsrs	r3, r3, #4
 8109ed8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8109edc:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8109ee0:	496d      	ldr	r1, [pc, #436]	; (810a098 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8109ee2:	4313      	orrs	r3, r2
 8109ee4:	610b      	str	r3, [r1, #16]
 8109ee6:	e005      	b.n	8109ef4 <HAL_RCCEx_PeriphCLKConfig+0x72c>
 8109ee8:	4b6b      	ldr	r3, [pc, #428]	; (810a098 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8109eea:	691b      	ldr	r3, [r3, #16]
 8109eec:	4a6a      	ldr	r2, [pc, #424]	; (810a098 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8109eee:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8109ef2:	6113      	str	r3, [r2, #16]
 8109ef4:	4b68      	ldr	r3, [pc, #416]	; (810a098 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8109ef6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8109ef8:	687b      	ldr	r3, [r7, #4]
 8109efa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8109efe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8109f02:	4965      	ldr	r1, [pc, #404]	; (810a098 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8109f04:	4313      	orrs	r3, r2
 8109f06:	670b      	str	r3, [r1, #112]	; 0x70
 8109f08:	e004      	b.n	8109f14 <HAL_RCCEx_PeriphCLKConfig+0x74c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8109f0a:	7dfb      	ldrb	r3, [r7, #23]
 8109f0c:	75bb      	strb	r3, [r7, #22]
 8109f0e:	e001      	b.n	8109f14 <HAL_RCCEx_PeriphCLKConfig+0x74c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8109f10:	7dfb      	ldrb	r3, [r7, #23]
 8109f12:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8109f14:	687b      	ldr	r3, [r7, #4]
 8109f16:	681b      	ldr	r3, [r3, #0]
 8109f18:	f003 0301 	and.w	r3, r3, #1
 8109f1c:	2b00      	cmp	r3, #0
 8109f1e:	d07e      	beq.n	810a01e <HAL_RCCEx_PeriphCLKConfig+0x856>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8109f20:	687b      	ldr	r3, [r7, #4]
 8109f22:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8109f24:	2b28      	cmp	r3, #40	; 0x28
 8109f26:	d867      	bhi.n	8109ff8 <HAL_RCCEx_PeriphCLKConfig+0x830>
 8109f28:	a201      	add	r2, pc, #4	; (adr r2, 8109f30 <HAL_RCCEx_PeriphCLKConfig+0x768>)
 8109f2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8109f2e:	bf00      	nop
 8109f30:	08109fff 	.word	0x08109fff
 8109f34:	08109ff9 	.word	0x08109ff9
 8109f38:	08109ff9 	.word	0x08109ff9
 8109f3c:	08109ff9 	.word	0x08109ff9
 8109f40:	08109ff9 	.word	0x08109ff9
 8109f44:	08109ff9 	.word	0x08109ff9
 8109f48:	08109ff9 	.word	0x08109ff9
 8109f4c:	08109ff9 	.word	0x08109ff9
 8109f50:	08109fd5 	.word	0x08109fd5
 8109f54:	08109ff9 	.word	0x08109ff9
 8109f58:	08109ff9 	.word	0x08109ff9
 8109f5c:	08109ff9 	.word	0x08109ff9
 8109f60:	08109ff9 	.word	0x08109ff9
 8109f64:	08109ff9 	.word	0x08109ff9
 8109f68:	08109ff9 	.word	0x08109ff9
 8109f6c:	08109ff9 	.word	0x08109ff9
 8109f70:	08109fe7 	.word	0x08109fe7
 8109f74:	08109ff9 	.word	0x08109ff9
 8109f78:	08109ff9 	.word	0x08109ff9
 8109f7c:	08109ff9 	.word	0x08109ff9
 8109f80:	08109ff9 	.word	0x08109ff9
 8109f84:	08109ff9 	.word	0x08109ff9
 8109f88:	08109ff9 	.word	0x08109ff9
 8109f8c:	08109ff9 	.word	0x08109ff9
 8109f90:	08109fff 	.word	0x08109fff
 8109f94:	08109ff9 	.word	0x08109ff9
 8109f98:	08109ff9 	.word	0x08109ff9
 8109f9c:	08109ff9 	.word	0x08109ff9
 8109fa0:	08109ff9 	.word	0x08109ff9
 8109fa4:	08109ff9 	.word	0x08109ff9
 8109fa8:	08109ff9 	.word	0x08109ff9
 8109fac:	08109ff9 	.word	0x08109ff9
 8109fb0:	08109fff 	.word	0x08109fff
 8109fb4:	08109ff9 	.word	0x08109ff9
 8109fb8:	08109ff9 	.word	0x08109ff9
 8109fbc:	08109ff9 	.word	0x08109ff9
 8109fc0:	08109ff9 	.word	0x08109ff9
 8109fc4:	08109ff9 	.word	0x08109ff9
 8109fc8:	08109ff9 	.word	0x08109ff9
 8109fcc:	08109ff9 	.word	0x08109ff9
 8109fd0:	08109fff 	.word	0x08109fff
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8109fd4:	687b      	ldr	r3, [r7, #4]
 8109fd6:	3304      	adds	r3, #4
 8109fd8:	2101      	movs	r1, #1
 8109fda:	4618      	mov	r0, r3
 8109fdc:	f001 fc16 	bl	810b80c <RCCEx_PLL2_Config>
 8109fe0:	4603      	mov	r3, r0
 8109fe2:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8109fe4:	e00c      	b.n	810a000 <HAL_RCCEx_PeriphCLKConfig+0x838>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8109fe6:	687b      	ldr	r3, [r7, #4]
 8109fe8:	3324      	adds	r3, #36	; 0x24
 8109fea:	2101      	movs	r1, #1
 8109fec:	4618      	mov	r0, r3
 8109fee:	f001 fcbf 	bl	810b970 <RCCEx_PLL3_Config>
 8109ff2:	4603      	mov	r3, r0
 8109ff4:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8109ff6:	e003      	b.n	810a000 <HAL_RCCEx_PeriphCLKConfig+0x838>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8109ff8:	2301      	movs	r3, #1
 8109ffa:	75fb      	strb	r3, [r7, #23]
      break;
 8109ffc:	e000      	b.n	810a000 <HAL_RCCEx_PeriphCLKConfig+0x838>
      break;
 8109ffe:	bf00      	nop
    }

    if(ret == HAL_OK)
 810a000:	7dfb      	ldrb	r3, [r7, #23]
 810a002:	2b00      	cmp	r3, #0
 810a004:	d109      	bne.n	810a01a <HAL_RCCEx_PeriphCLKConfig+0x852>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 810a006:	4b24      	ldr	r3, [pc, #144]	; (810a098 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 810a008:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810a00a:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 810a00e:	687b      	ldr	r3, [r7, #4]
 810a010:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810a012:	4921      	ldr	r1, [pc, #132]	; (810a098 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 810a014:	4313      	orrs	r3, r2
 810a016:	654b      	str	r3, [r1, #84]	; 0x54
 810a018:	e001      	b.n	810a01e <HAL_RCCEx_PeriphCLKConfig+0x856>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810a01a:	7dfb      	ldrb	r3, [r7, #23]
 810a01c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 810a01e:	687b      	ldr	r3, [r7, #4]
 810a020:	681b      	ldr	r3, [r3, #0]
 810a022:	f003 0302 	and.w	r3, r3, #2
 810a026:	2b00      	cmp	r3, #0
 810a028:	d03c      	beq.n	810a0a4 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 810a02a:	687b      	ldr	r3, [r7, #4]
 810a02c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 810a02e:	2b05      	cmp	r3, #5
 810a030:	d820      	bhi.n	810a074 <HAL_RCCEx_PeriphCLKConfig+0x8ac>
 810a032:	a201      	add	r2, pc, #4	; (adr r2, 810a038 <HAL_RCCEx_PeriphCLKConfig+0x870>)
 810a034:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810a038:	0810a07b 	.word	0x0810a07b
 810a03c:	0810a051 	.word	0x0810a051
 810a040:	0810a063 	.word	0x0810a063
 810a044:	0810a07b 	.word	0x0810a07b
 810a048:	0810a07b 	.word	0x0810a07b
 810a04c:	0810a07b 	.word	0x0810a07b
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 810a050:	687b      	ldr	r3, [r7, #4]
 810a052:	3304      	adds	r3, #4
 810a054:	2101      	movs	r1, #1
 810a056:	4618      	mov	r0, r3
 810a058:	f001 fbd8 	bl	810b80c <RCCEx_PLL2_Config>
 810a05c:	4603      	mov	r3, r0
 810a05e:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 810a060:	e00c      	b.n	810a07c <HAL_RCCEx_PeriphCLKConfig+0x8b4>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 810a062:	687b      	ldr	r3, [r7, #4]
 810a064:	3324      	adds	r3, #36	; 0x24
 810a066:	2101      	movs	r1, #1
 810a068:	4618      	mov	r0, r3
 810a06a:	f001 fc81 	bl	810b970 <RCCEx_PLL3_Config>
 810a06e:	4603      	mov	r3, r0
 810a070:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 810a072:	e003      	b.n	810a07c <HAL_RCCEx_PeriphCLKConfig+0x8b4>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 810a074:	2301      	movs	r3, #1
 810a076:	75fb      	strb	r3, [r7, #23]
      break;
 810a078:	e000      	b.n	810a07c <HAL_RCCEx_PeriphCLKConfig+0x8b4>
      break;
 810a07a:	bf00      	nop
    }

    if(ret == HAL_OK)
 810a07c:	7dfb      	ldrb	r3, [r7, #23]
 810a07e:	2b00      	cmp	r3, #0
 810a080:	d10e      	bne.n	810a0a0 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 810a082:	4b05      	ldr	r3, [pc, #20]	; (810a098 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 810a084:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810a086:	f023 0207 	bic.w	r2, r3, #7
 810a08a:	687b      	ldr	r3, [r7, #4]
 810a08c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 810a08e:	4902      	ldr	r1, [pc, #8]	; (810a098 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 810a090:	4313      	orrs	r3, r2
 810a092:	654b      	str	r3, [r1, #84]	; 0x54
 810a094:	e006      	b.n	810a0a4 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 810a096:	bf00      	nop
 810a098:	58024400 	.word	0x58024400
 810a09c:	58024800 	.word	0x58024800
    }
    else
    {
      /* set overall return value */
      status = ret;
 810a0a0:	7dfb      	ldrb	r3, [r7, #23]
 810a0a2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 810a0a4:	687b      	ldr	r3, [r7, #4]
 810a0a6:	681b      	ldr	r3, [r3, #0]
 810a0a8:	f003 0304 	and.w	r3, r3, #4
 810a0ac:	2b00      	cmp	r3, #0
 810a0ae:	d039      	beq.n	810a124 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 810a0b0:	687b      	ldr	r3, [r7, #4]
 810a0b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 810a0b6:	2b05      	cmp	r3, #5
 810a0b8:	d820      	bhi.n	810a0fc <HAL_RCCEx_PeriphCLKConfig+0x934>
 810a0ba:	a201      	add	r2, pc, #4	; (adr r2, 810a0c0 <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 810a0bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810a0c0:	0810a103 	.word	0x0810a103
 810a0c4:	0810a0d9 	.word	0x0810a0d9
 810a0c8:	0810a0eb 	.word	0x0810a0eb
 810a0cc:	0810a103 	.word	0x0810a103
 810a0d0:	0810a103 	.word	0x0810a103
 810a0d4:	0810a103 	.word	0x0810a103
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 810a0d8:	687b      	ldr	r3, [r7, #4]
 810a0da:	3304      	adds	r3, #4
 810a0dc:	2101      	movs	r1, #1
 810a0de:	4618      	mov	r0, r3
 810a0e0:	f001 fb94 	bl	810b80c <RCCEx_PLL2_Config>
 810a0e4:	4603      	mov	r3, r0
 810a0e6:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 810a0e8:	e00c      	b.n	810a104 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 810a0ea:	687b      	ldr	r3, [r7, #4]
 810a0ec:	3324      	adds	r3, #36	; 0x24
 810a0ee:	2101      	movs	r1, #1
 810a0f0:	4618      	mov	r0, r3
 810a0f2:	f001 fc3d 	bl	810b970 <RCCEx_PLL3_Config>
 810a0f6:	4603      	mov	r3, r0
 810a0f8:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 810a0fa:	e003      	b.n	810a104 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 810a0fc:	2301      	movs	r3, #1
 810a0fe:	75fb      	strb	r3, [r7, #23]
      break;
 810a100:	e000      	b.n	810a104 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 810a102:	bf00      	nop
    }

    if(ret == HAL_OK)
 810a104:	7dfb      	ldrb	r3, [r7, #23]
 810a106:	2b00      	cmp	r3, #0
 810a108:	d10a      	bne.n	810a120 <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 810a10a:	4bb7      	ldr	r3, [pc, #732]	; (810a3e8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 810a10c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810a10e:	f023 0207 	bic.w	r2, r3, #7
 810a112:	687b      	ldr	r3, [r7, #4]
 810a114:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 810a118:	49b3      	ldr	r1, [pc, #716]	; (810a3e8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 810a11a:	4313      	orrs	r3, r2
 810a11c:	658b      	str	r3, [r1, #88]	; 0x58
 810a11e:	e001      	b.n	810a124 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810a120:	7dfb      	ldrb	r3, [r7, #23]
 810a122:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 810a124:	687b      	ldr	r3, [r7, #4]
 810a126:	681b      	ldr	r3, [r3, #0]
 810a128:	f003 0320 	and.w	r3, r3, #32
 810a12c:	2b00      	cmp	r3, #0
 810a12e:	d04b      	beq.n	810a1c8 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 810a130:	687b      	ldr	r3, [r7, #4]
 810a132:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 810a136:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 810a13a:	d02e      	beq.n	810a19a <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 810a13c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 810a140:	d828      	bhi.n	810a194 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 810a142:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 810a146:	d02a      	beq.n	810a19e <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 810a148:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 810a14c:	d822      	bhi.n	810a194 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 810a14e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 810a152:	d026      	beq.n	810a1a2 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 810a154:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 810a158:	d81c      	bhi.n	810a194 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 810a15a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 810a15e:	d010      	beq.n	810a182 <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 810a160:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 810a164:	d816      	bhi.n	810a194 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 810a166:	2b00      	cmp	r3, #0
 810a168:	d01d      	beq.n	810a1a6 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 810a16a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 810a16e:	d111      	bne.n	810a194 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 810a170:	687b      	ldr	r3, [r7, #4]
 810a172:	3304      	adds	r3, #4
 810a174:	2100      	movs	r1, #0
 810a176:	4618      	mov	r0, r3
 810a178:	f001 fb48 	bl	810b80c <RCCEx_PLL2_Config>
 810a17c:	4603      	mov	r3, r0
 810a17e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 810a180:	e012      	b.n	810a1a8 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 810a182:	687b      	ldr	r3, [r7, #4]
 810a184:	3324      	adds	r3, #36	; 0x24
 810a186:	2102      	movs	r1, #2
 810a188:	4618      	mov	r0, r3
 810a18a:	f001 fbf1 	bl	810b970 <RCCEx_PLL3_Config>
 810a18e:	4603      	mov	r3, r0
 810a190:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 810a192:	e009      	b.n	810a1a8 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 810a194:	2301      	movs	r3, #1
 810a196:	75fb      	strb	r3, [r7, #23]
      break;
 810a198:	e006      	b.n	810a1a8 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 810a19a:	bf00      	nop
 810a19c:	e004      	b.n	810a1a8 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 810a19e:	bf00      	nop
 810a1a0:	e002      	b.n	810a1a8 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 810a1a2:	bf00      	nop
 810a1a4:	e000      	b.n	810a1a8 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 810a1a6:	bf00      	nop
    }

    if(ret == HAL_OK)
 810a1a8:	7dfb      	ldrb	r3, [r7, #23]
 810a1aa:	2b00      	cmp	r3, #0
 810a1ac:	d10a      	bne.n	810a1c4 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 810a1ae:	4b8e      	ldr	r3, [pc, #568]	; (810a3e8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 810a1b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810a1b2:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 810a1b6:	687b      	ldr	r3, [r7, #4]
 810a1b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 810a1bc:	498a      	ldr	r1, [pc, #552]	; (810a3e8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 810a1be:	4313      	orrs	r3, r2
 810a1c0:	654b      	str	r3, [r1, #84]	; 0x54
 810a1c2:	e001      	b.n	810a1c8 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810a1c4:	7dfb      	ldrb	r3, [r7, #23]
 810a1c6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 810a1c8:	687b      	ldr	r3, [r7, #4]
 810a1ca:	681b      	ldr	r3, [r3, #0]
 810a1cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 810a1d0:	2b00      	cmp	r3, #0
 810a1d2:	d04b      	beq.n	810a26c <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 810a1d4:	687b      	ldr	r3, [r7, #4]
 810a1d6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 810a1da:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 810a1de:	d02e      	beq.n	810a23e <HAL_RCCEx_PeriphCLKConfig+0xa76>
 810a1e0:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 810a1e4:	d828      	bhi.n	810a238 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 810a1e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 810a1ea:	d02a      	beq.n	810a242 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 810a1ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 810a1f0:	d822      	bhi.n	810a238 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 810a1f2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 810a1f6:	d026      	beq.n	810a246 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 810a1f8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 810a1fc:	d81c      	bhi.n	810a238 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 810a1fe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 810a202:	d010      	beq.n	810a226 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 810a204:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 810a208:	d816      	bhi.n	810a238 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 810a20a:	2b00      	cmp	r3, #0
 810a20c:	d01d      	beq.n	810a24a <HAL_RCCEx_PeriphCLKConfig+0xa82>
 810a20e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 810a212:	d111      	bne.n	810a238 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 810a214:	687b      	ldr	r3, [r7, #4]
 810a216:	3304      	adds	r3, #4
 810a218:	2100      	movs	r1, #0
 810a21a:	4618      	mov	r0, r3
 810a21c:	f001 faf6 	bl	810b80c <RCCEx_PLL2_Config>
 810a220:	4603      	mov	r3, r0
 810a222:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 810a224:	e012      	b.n	810a24c <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 810a226:	687b      	ldr	r3, [r7, #4]
 810a228:	3324      	adds	r3, #36	; 0x24
 810a22a:	2102      	movs	r1, #2
 810a22c:	4618      	mov	r0, r3
 810a22e:	f001 fb9f 	bl	810b970 <RCCEx_PLL3_Config>
 810a232:	4603      	mov	r3, r0
 810a234:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 810a236:	e009      	b.n	810a24c <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 810a238:	2301      	movs	r3, #1
 810a23a:	75fb      	strb	r3, [r7, #23]
      break;
 810a23c:	e006      	b.n	810a24c <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 810a23e:	bf00      	nop
 810a240:	e004      	b.n	810a24c <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 810a242:	bf00      	nop
 810a244:	e002      	b.n	810a24c <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 810a246:	bf00      	nop
 810a248:	e000      	b.n	810a24c <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 810a24a:	bf00      	nop
    }

    if(ret == HAL_OK)
 810a24c:	7dfb      	ldrb	r3, [r7, #23]
 810a24e:	2b00      	cmp	r3, #0
 810a250:	d10a      	bne.n	810a268 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 810a252:	4b65      	ldr	r3, [pc, #404]	; (810a3e8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 810a254:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810a256:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 810a25a:	687b      	ldr	r3, [r7, #4]
 810a25c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 810a260:	4961      	ldr	r1, [pc, #388]	; (810a3e8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 810a262:	4313      	orrs	r3, r2
 810a264:	658b      	str	r3, [r1, #88]	; 0x58
 810a266:	e001      	b.n	810a26c <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810a268:	7dfb      	ldrb	r3, [r7, #23]
 810a26a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 810a26c:	687b      	ldr	r3, [r7, #4]
 810a26e:	681b      	ldr	r3, [r3, #0]
 810a270:	f003 0380 	and.w	r3, r3, #128	; 0x80
 810a274:	2b00      	cmp	r3, #0
 810a276:	d04b      	beq.n	810a310 <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 810a278:	687b      	ldr	r3, [r7, #4]
 810a27a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 810a27e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 810a282:	d02e      	beq.n	810a2e2 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 810a284:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 810a288:	d828      	bhi.n	810a2dc <HAL_RCCEx_PeriphCLKConfig+0xb14>
 810a28a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 810a28e:	d02a      	beq.n	810a2e6 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 810a290:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 810a294:	d822      	bhi.n	810a2dc <HAL_RCCEx_PeriphCLKConfig+0xb14>
 810a296:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 810a29a:	d026      	beq.n	810a2ea <HAL_RCCEx_PeriphCLKConfig+0xb22>
 810a29c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 810a2a0:	d81c      	bhi.n	810a2dc <HAL_RCCEx_PeriphCLKConfig+0xb14>
 810a2a2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 810a2a6:	d010      	beq.n	810a2ca <HAL_RCCEx_PeriphCLKConfig+0xb02>
 810a2a8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 810a2ac:	d816      	bhi.n	810a2dc <HAL_RCCEx_PeriphCLKConfig+0xb14>
 810a2ae:	2b00      	cmp	r3, #0
 810a2b0:	d01d      	beq.n	810a2ee <HAL_RCCEx_PeriphCLKConfig+0xb26>
 810a2b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 810a2b6:	d111      	bne.n	810a2dc <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 810a2b8:	687b      	ldr	r3, [r7, #4]
 810a2ba:	3304      	adds	r3, #4
 810a2bc:	2100      	movs	r1, #0
 810a2be:	4618      	mov	r0, r3
 810a2c0:	f001 faa4 	bl	810b80c <RCCEx_PLL2_Config>
 810a2c4:	4603      	mov	r3, r0
 810a2c6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 810a2c8:	e012      	b.n	810a2f0 <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 810a2ca:	687b      	ldr	r3, [r7, #4]
 810a2cc:	3324      	adds	r3, #36	; 0x24
 810a2ce:	2102      	movs	r1, #2
 810a2d0:	4618      	mov	r0, r3
 810a2d2:	f001 fb4d 	bl	810b970 <RCCEx_PLL3_Config>
 810a2d6:	4603      	mov	r3, r0
 810a2d8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 810a2da:	e009      	b.n	810a2f0 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 810a2dc:	2301      	movs	r3, #1
 810a2de:	75fb      	strb	r3, [r7, #23]
      break;
 810a2e0:	e006      	b.n	810a2f0 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 810a2e2:	bf00      	nop
 810a2e4:	e004      	b.n	810a2f0 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 810a2e6:	bf00      	nop
 810a2e8:	e002      	b.n	810a2f0 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 810a2ea:	bf00      	nop
 810a2ec:	e000      	b.n	810a2f0 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 810a2ee:	bf00      	nop
    }

    if(ret == HAL_OK)
 810a2f0:	7dfb      	ldrb	r3, [r7, #23]
 810a2f2:	2b00      	cmp	r3, #0
 810a2f4:	d10a      	bne.n	810a30c <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 810a2f6:	4b3c      	ldr	r3, [pc, #240]	; (810a3e8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 810a2f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810a2fa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 810a2fe:	687b      	ldr	r3, [r7, #4]
 810a300:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 810a304:	4938      	ldr	r1, [pc, #224]	; (810a3e8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 810a306:	4313      	orrs	r3, r2
 810a308:	658b      	str	r3, [r1, #88]	; 0x58
 810a30a:	e001      	b.n	810a310 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810a30c:	7dfb      	ldrb	r3, [r7, #23]
 810a30e:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 810a310:	687b      	ldr	r3, [r7, #4]
 810a312:	681b      	ldr	r3, [r3, #0]
 810a314:	f003 0308 	and.w	r3, r3, #8
 810a318:	2b00      	cmp	r3, #0
 810a31a:	d01a      	beq.n	810a352 <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 810a31c:	687b      	ldr	r3, [r7, #4]
 810a31e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 810a322:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 810a326:	d10a      	bne.n	810a33e <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 810a328:	687b      	ldr	r3, [r7, #4]
 810a32a:	3324      	adds	r3, #36	; 0x24
 810a32c:	2102      	movs	r1, #2
 810a32e:	4618      	mov	r0, r3
 810a330:	f001 fb1e 	bl	810b970 <RCCEx_PLL3_Config>
 810a334:	4603      	mov	r3, r0
 810a336:	2b00      	cmp	r3, #0
 810a338:	d001      	beq.n	810a33e <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 810a33a:	2301      	movs	r3, #1
 810a33c:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 810a33e:	4b2a      	ldr	r3, [pc, #168]	; (810a3e8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 810a340:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810a342:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 810a346:	687b      	ldr	r3, [r7, #4]
 810a348:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 810a34c:	4926      	ldr	r1, [pc, #152]	; (810a3e8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 810a34e:	4313      	orrs	r3, r2
 810a350:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 810a352:	687b      	ldr	r3, [r7, #4]
 810a354:	681b      	ldr	r3, [r3, #0]
 810a356:	f003 0310 	and.w	r3, r3, #16
 810a35a:	2b00      	cmp	r3, #0
 810a35c:	d01a      	beq.n	810a394 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 810a35e:	687b      	ldr	r3, [r7, #4]
 810a360:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 810a364:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810a368:	d10a      	bne.n	810a380 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 810a36a:	687b      	ldr	r3, [r7, #4]
 810a36c:	3324      	adds	r3, #36	; 0x24
 810a36e:	2102      	movs	r1, #2
 810a370:	4618      	mov	r0, r3
 810a372:	f001 fafd 	bl	810b970 <RCCEx_PLL3_Config>
 810a376:	4603      	mov	r3, r0
 810a378:	2b00      	cmp	r3, #0
 810a37a:	d001      	beq.n	810a380 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 810a37c:	2301      	movs	r3, #1
 810a37e:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 810a380:	4b19      	ldr	r3, [pc, #100]	; (810a3e8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 810a382:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810a384:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 810a388:	687b      	ldr	r3, [r7, #4]
 810a38a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 810a38e:	4916      	ldr	r1, [pc, #88]	; (810a3e8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 810a390:	4313      	orrs	r3, r2
 810a392:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 810a394:	687b      	ldr	r3, [r7, #4]
 810a396:	681b      	ldr	r3, [r3, #0]
 810a398:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 810a39c:	2b00      	cmp	r3, #0
 810a39e:	d036      	beq.n	810a40e <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 810a3a0:	687b      	ldr	r3, [r7, #4]
 810a3a2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 810a3a6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 810a3aa:	d01f      	beq.n	810a3ec <HAL_RCCEx_PeriphCLKConfig+0xc24>
 810a3ac:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 810a3b0:	d817      	bhi.n	810a3e2 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 810a3b2:	2b00      	cmp	r3, #0
 810a3b4:	d003      	beq.n	810a3be <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 810a3b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 810a3ba:	d009      	beq.n	810a3d0 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 810a3bc:	e011      	b.n	810a3e2 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 810a3be:	687b      	ldr	r3, [r7, #4]
 810a3c0:	3304      	adds	r3, #4
 810a3c2:	2100      	movs	r1, #0
 810a3c4:	4618      	mov	r0, r3
 810a3c6:	f001 fa21 	bl	810b80c <RCCEx_PLL2_Config>
 810a3ca:	4603      	mov	r3, r0
 810a3cc:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 810a3ce:	e00e      	b.n	810a3ee <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 810a3d0:	687b      	ldr	r3, [r7, #4]
 810a3d2:	3324      	adds	r3, #36	; 0x24
 810a3d4:	2102      	movs	r1, #2
 810a3d6:	4618      	mov	r0, r3
 810a3d8:	f001 faca 	bl	810b970 <RCCEx_PLL3_Config>
 810a3dc:	4603      	mov	r3, r0
 810a3de:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 810a3e0:	e005      	b.n	810a3ee <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 810a3e2:	2301      	movs	r3, #1
 810a3e4:	75fb      	strb	r3, [r7, #23]
      break;
 810a3e6:	e002      	b.n	810a3ee <HAL_RCCEx_PeriphCLKConfig+0xc26>
 810a3e8:	58024400 	.word	0x58024400
      break;
 810a3ec:	bf00      	nop
    }

    if(ret == HAL_OK)
 810a3ee:	7dfb      	ldrb	r3, [r7, #23]
 810a3f0:	2b00      	cmp	r3, #0
 810a3f2:	d10a      	bne.n	810a40a <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 810a3f4:	4b93      	ldr	r3, [pc, #588]	; (810a644 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 810a3f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810a3f8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 810a3fc:	687b      	ldr	r3, [r7, #4]
 810a3fe:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 810a402:	4990      	ldr	r1, [pc, #576]	; (810a644 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 810a404:	4313      	orrs	r3, r2
 810a406:	658b      	str	r3, [r1, #88]	; 0x58
 810a408:	e001      	b.n	810a40e <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810a40a:	7dfb      	ldrb	r3, [r7, #23]
 810a40c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 810a40e:	687b      	ldr	r3, [r7, #4]
 810a410:	681b      	ldr	r3, [r3, #0]
 810a412:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 810a416:	2b00      	cmp	r3, #0
 810a418:	d033      	beq.n	810a482 <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 810a41a:	687b      	ldr	r3, [r7, #4]
 810a41c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810a420:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 810a424:	d01c      	beq.n	810a460 <HAL_RCCEx_PeriphCLKConfig+0xc98>
 810a426:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 810a42a:	d816      	bhi.n	810a45a <HAL_RCCEx_PeriphCLKConfig+0xc92>
 810a42c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 810a430:	d003      	beq.n	810a43a <HAL_RCCEx_PeriphCLKConfig+0xc72>
 810a432:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 810a436:	d007      	beq.n	810a448 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 810a438:	e00f      	b.n	810a45a <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810a43a:	4b82      	ldr	r3, [pc, #520]	; (810a644 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 810a43c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810a43e:	4a81      	ldr	r2, [pc, #516]	; (810a644 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 810a440:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 810a444:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 810a446:	e00c      	b.n	810a462 <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 810a448:	687b      	ldr	r3, [r7, #4]
 810a44a:	3324      	adds	r3, #36	; 0x24
 810a44c:	2101      	movs	r1, #1
 810a44e:	4618      	mov	r0, r3
 810a450:	f001 fa8e 	bl	810b970 <RCCEx_PLL3_Config>
 810a454:	4603      	mov	r3, r0
 810a456:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 810a458:	e003      	b.n	810a462 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 810a45a:	2301      	movs	r3, #1
 810a45c:	75fb      	strb	r3, [r7, #23]
      break;
 810a45e:	e000      	b.n	810a462 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 810a460:	bf00      	nop
    }

    if(ret == HAL_OK)
 810a462:	7dfb      	ldrb	r3, [r7, #23]
 810a464:	2b00      	cmp	r3, #0
 810a466:	d10a      	bne.n	810a47e <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 810a468:	4b76      	ldr	r3, [pc, #472]	; (810a644 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 810a46a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810a46c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 810a470:	687b      	ldr	r3, [r7, #4]
 810a472:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810a476:	4973      	ldr	r1, [pc, #460]	; (810a644 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 810a478:	4313      	orrs	r3, r2
 810a47a:	654b      	str	r3, [r1, #84]	; 0x54
 810a47c:	e001      	b.n	810a482 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810a47e:	7dfb      	ldrb	r3, [r7, #23]
 810a480:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 810a482:	687b      	ldr	r3, [r7, #4]
 810a484:	681b      	ldr	r3, [r3, #0]
 810a486:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 810a48a:	2b00      	cmp	r3, #0
 810a48c:	d029      	beq.n	810a4e2 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 810a48e:	687b      	ldr	r3, [r7, #4]
 810a490:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 810a492:	2b00      	cmp	r3, #0
 810a494:	d003      	beq.n	810a49e <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 810a496:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 810a49a:	d007      	beq.n	810a4ac <HAL_RCCEx_PeriphCLKConfig+0xce4>
 810a49c:	e00f      	b.n	810a4be <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810a49e:	4b69      	ldr	r3, [pc, #420]	; (810a644 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 810a4a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810a4a2:	4a68      	ldr	r2, [pc, #416]	; (810a644 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 810a4a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 810a4a8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 810a4aa:	e00b      	b.n	810a4c4 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 810a4ac:	687b      	ldr	r3, [r7, #4]
 810a4ae:	3304      	adds	r3, #4
 810a4b0:	2102      	movs	r1, #2
 810a4b2:	4618      	mov	r0, r3
 810a4b4:	f001 f9aa 	bl	810b80c <RCCEx_PLL2_Config>
 810a4b8:	4603      	mov	r3, r0
 810a4ba:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 810a4bc:	e002      	b.n	810a4c4 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 810a4be:	2301      	movs	r3, #1
 810a4c0:	75fb      	strb	r3, [r7, #23]
      break;
 810a4c2:	bf00      	nop
    }

    if(ret == HAL_OK)
 810a4c4:	7dfb      	ldrb	r3, [r7, #23]
 810a4c6:	2b00      	cmp	r3, #0
 810a4c8:	d109      	bne.n	810a4de <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 810a4ca:	4b5e      	ldr	r3, [pc, #376]	; (810a644 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 810a4cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 810a4ce:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 810a4d2:	687b      	ldr	r3, [r7, #4]
 810a4d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 810a4d6:	495b      	ldr	r1, [pc, #364]	; (810a644 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 810a4d8:	4313      	orrs	r3, r2
 810a4da:	64cb      	str	r3, [r1, #76]	; 0x4c
 810a4dc:	e001      	b.n	810a4e2 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810a4de:	7dfb      	ldrb	r3, [r7, #23]
 810a4e0:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 810a4e2:	687b      	ldr	r3, [r7, #4]
 810a4e4:	681b      	ldr	r3, [r3, #0]
 810a4e6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 810a4ea:	2b00      	cmp	r3, #0
 810a4ec:	d00a      	beq.n	810a504 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 810a4ee:	687b      	ldr	r3, [r7, #4]
 810a4f0:	3324      	adds	r3, #36	; 0x24
 810a4f2:	2102      	movs	r1, #2
 810a4f4:	4618      	mov	r0, r3
 810a4f6:	f001 fa3b 	bl	810b970 <RCCEx_PLL3_Config>
 810a4fa:	4603      	mov	r3, r0
 810a4fc:	2b00      	cmp	r3, #0
 810a4fe:	d001      	beq.n	810a504 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 810a500:	2301      	movs	r3, #1
 810a502:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 810a504:	687b      	ldr	r3, [r7, #4]
 810a506:	681b      	ldr	r3, [r3, #0]
 810a508:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 810a50c:	2b00      	cmp	r3, #0
 810a50e:	d030      	beq.n	810a572 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 810a510:	687b      	ldr	r3, [r7, #4]
 810a512:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810a514:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 810a518:	d017      	beq.n	810a54a <HAL_RCCEx_PeriphCLKConfig+0xd82>
 810a51a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 810a51e:	d811      	bhi.n	810a544 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 810a520:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 810a524:	d013      	beq.n	810a54e <HAL_RCCEx_PeriphCLKConfig+0xd86>
 810a526:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 810a52a:	d80b      	bhi.n	810a544 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 810a52c:	2b00      	cmp	r3, #0
 810a52e:	d010      	beq.n	810a552 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 810a530:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810a534:	d106      	bne.n	810a544 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810a536:	4b43      	ldr	r3, [pc, #268]	; (810a644 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 810a538:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810a53a:	4a42      	ldr	r2, [pc, #264]	; (810a644 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 810a53c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 810a540:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 810a542:	e007      	b.n	810a554 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 810a544:	2301      	movs	r3, #1
 810a546:	75fb      	strb	r3, [r7, #23]
      break;
 810a548:	e004      	b.n	810a554 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 810a54a:	bf00      	nop
 810a54c:	e002      	b.n	810a554 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 810a54e:	bf00      	nop
 810a550:	e000      	b.n	810a554 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 810a552:	bf00      	nop
    }

    if(ret == HAL_OK)
 810a554:	7dfb      	ldrb	r3, [r7, #23]
 810a556:	2b00      	cmp	r3, #0
 810a558:	d109      	bne.n	810a56e <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 810a55a:	4b3a      	ldr	r3, [pc, #232]	; (810a644 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 810a55c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810a55e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 810a562:	687b      	ldr	r3, [r7, #4]
 810a564:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810a566:	4937      	ldr	r1, [pc, #220]	; (810a644 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 810a568:	4313      	orrs	r3, r2
 810a56a:	654b      	str	r3, [r1, #84]	; 0x54
 810a56c:	e001      	b.n	810a572 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810a56e:	7dfb      	ldrb	r3, [r7, #23]
 810a570:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 810a572:	687b      	ldr	r3, [r7, #4]
 810a574:	681b      	ldr	r3, [r3, #0]
 810a576:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 810a57a:	2b00      	cmp	r3, #0
 810a57c:	d008      	beq.n	810a590 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 810a57e:	4b31      	ldr	r3, [pc, #196]	; (810a644 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 810a580:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810a582:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 810a586:	687b      	ldr	r3, [r7, #4]
 810a588:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 810a58a:	492e      	ldr	r1, [pc, #184]	; (810a644 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 810a58c:	4313      	orrs	r3, r2
 810a58e:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 810a590:	687b      	ldr	r3, [r7, #4]
 810a592:	681b      	ldr	r3, [r3, #0]
 810a594:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 810a598:	2b00      	cmp	r3, #0
 810a59a:	d009      	beq.n	810a5b0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 810a59c:	4b29      	ldr	r3, [pc, #164]	; (810a644 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 810a59e:	691b      	ldr	r3, [r3, #16]
 810a5a0:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 810a5a4:	687b      	ldr	r3, [r7, #4]
 810a5a6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 810a5aa:	4926      	ldr	r1, [pc, #152]	; (810a644 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 810a5ac:	4313      	orrs	r3, r2
 810a5ae:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 810a5b0:	687b      	ldr	r3, [r7, #4]
 810a5b2:	681b      	ldr	r3, [r3, #0]
 810a5b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 810a5b8:	2b00      	cmp	r3, #0
 810a5ba:	d008      	beq.n	810a5ce <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 810a5bc:	4b21      	ldr	r3, [pc, #132]	; (810a644 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 810a5be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810a5c0:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 810a5c4:	687b      	ldr	r3, [r7, #4]
 810a5c6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 810a5c8:	491e      	ldr	r1, [pc, #120]	; (810a644 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 810a5ca:	4313      	orrs	r3, r2
 810a5cc:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 810a5ce:	687b      	ldr	r3, [r7, #4]
 810a5d0:	681b      	ldr	r3, [r3, #0]
 810a5d2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 810a5d6:	2b00      	cmp	r3, #0
 810a5d8:	d00d      	beq.n	810a5f6 <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 810a5da:	4b1a      	ldr	r3, [pc, #104]	; (810a644 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 810a5dc:	691b      	ldr	r3, [r3, #16]
 810a5de:	4a19      	ldr	r2, [pc, #100]	; (810a644 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 810a5e0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 810a5e4:	6113      	str	r3, [r2, #16]
 810a5e6:	4b17      	ldr	r3, [pc, #92]	; (810a644 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 810a5e8:	691a      	ldr	r2, [r3, #16]
 810a5ea:	687b      	ldr	r3, [r7, #4]
 810a5ec:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 810a5f0:	4914      	ldr	r1, [pc, #80]	; (810a644 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 810a5f2:	4313      	orrs	r3, r2
 810a5f4:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 810a5f6:	687b      	ldr	r3, [r7, #4]
 810a5f8:	681b      	ldr	r3, [r3, #0]
 810a5fa:	2b00      	cmp	r3, #0
 810a5fc:	da08      	bge.n	810a610 <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 810a5fe:	4b11      	ldr	r3, [pc, #68]	; (810a644 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 810a600:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 810a602:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 810a606:	687b      	ldr	r3, [r7, #4]
 810a608:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810a60a:	490e      	ldr	r1, [pc, #56]	; (810a644 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 810a60c:	4313      	orrs	r3, r2
 810a60e:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 810a610:	687b      	ldr	r3, [r7, #4]
 810a612:	681b      	ldr	r3, [r3, #0]
 810a614:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 810a618:	2b00      	cmp	r3, #0
 810a61a:	d009      	beq.n	810a630 <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 810a61c:	4b09      	ldr	r3, [pc, #36]	; (810a644 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 810a61e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810a620:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 810a624:	687b      	ldr	r3, [r7, #4]
 810a626:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 810a62a:	4906      	ldr	r1, [pc, #24]	; (810a644 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 810a62c:	4313      	orrs	r3, r2
 810a62e:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 810a630:	7dbb      	ldrb	r3, [r7, #22]
 810a632:	2b00      	cmp	r3, #0
 810a634:	d101      	bne.n	810a63a <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 810a636:	2300      	movs	r3, #0
 810a638:	e000      	b.n	810a63c <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 810a63a:	2301      	movs	r3, #1
}
 810a63c:	4618      	mov	r0, r3
 810a63e:	3718      	adds	r7, #24
 810a640:	46bd      	mov	sp, r7
 810a642:	bd80      	pop	{r7, pc}
 810a644:	58024400 	.word	0x58024400

0810a648 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 810a648:	b580      	push	{r7, lr}
 810a64a:	b090      	sub	sp, #64	; 0x40
 810a64c:	af00      	add	r7, sp, #0
 810a64e:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 810a650:	687b      	ldr	r3, [r7, #4]
 810a652:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810a656:	f040 8095 	bne.w	810a784 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 810a65a:	4bae      	ldr	r3, [pc, #696]	; (810a914 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 810a65c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810a65e:	f003 0307 	and.w	r3, r3, #7
 810a662:	633b      	str	r3, [r7, #48]	; 0x30
 810a664:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810a666:	2b04      	cmp	r3, #4
 810a668:	f200 8088 	bhi.w	810a77c <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 810a66c:	a201      	add	r2, pc, #4	; (adr r2, 810a674 <HAL_RCCEx_GetPeriphCLKFreq+0x2c>)
 810a66e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810a672:	bf00      	nop
 810a674:	0810a689 	.word	0x0810a689
 810a678:	0810a6b1 	.word	0x0810a6b1
 810a67c:	0810a6d9 	.word	0x0810a6d9
 810a680:	0810a775 	.word	0x0810a775
 810a684:	0810a701 	.word	0x0810a701

      switch (saiclocksource)
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 810a688:	4ba2      	ldr	r3, [pc, #648]	; (810a914 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 810a68a:	681b      	ldr	r3, [r3, #0]
 810a68c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 810a690:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 810a694:	d108      	bne.n	810a6a8 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 810a696:	f107 0324 	add.w	r3, r7, #36	; 0x24
 810a69a:	4618      	mov	r0, r3
 810a69c:	f000 ff64 	bl	810b568 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 810a6a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810a6a2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 810a6a4:	f000 bc95 	b.w	810afd2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 810a6a8:	2300      	movs	r3, #0
 810a6aa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 810a6ac:	f000 bc91 	b.w	810afd2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 810a6b0:	4b98      	ldr	r3, [pc, #608]	; (810a914 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 810a6b2:	681b      	ldr	r3, [r3, #0]
 810a6b4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 810a6b8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 810a6bc:	d108      	bne.n	810a6d0 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810a6be:	f107 0318 	add.w	r3, r7, #24
 810a6c2:	4618      	mov	r0, r3
 810a6c4:	f000 fca8 	bl	810b018 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 810a6c8:	69bb      	ldr	r3, [r7, #24]
 810a6ca:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 810a6cc:	f000 bc81 	b.w	810afd2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 810a6d0:	2300      	movs	r3, #0
 810a6d2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 810a6d4:	f000 bc7d 	b.w	810afd2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 810a6d8:	4b8e      	ldr	r3, [pc, #568]	; (810a914 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 810a6da:	681b      	ldr	r3, [r3, #0]
 810a6dc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 810a6e0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 810a6e4:	d108      	bne.n	810a6f8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810a6e6:	f107 030c 	add.w	r3, r7, #12
 810a6ea:	4618      	mov	r0, r3
 810a6ec:	f000 fde8 	bl	810b2c0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 810a6f0:	68fb      	ldr	r3, [r7, #12]
 810a6f2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 810a6f4:	f000 bc6d 	b.w	810afd2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 810a6f8:	2300      	movs	r3, #0
 810a6fa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 810a6fc:	f000 bc69 	b.w	810afd2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 810a700:	4b84      	ldr	r3, [pc, #528]	; (810a914 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 810a702:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 810a704:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 810a708:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 810a70a:	4b82      	ldr	r3, [pc, #520]	; (810a914 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 810a70c:	681b      	ldr	r3, [r3, #0]
 810a70e:	f003 0304 	and.w	r3, r3, #4
 810a712:	2b04      	cmp	r3, #4
 810a714:	d10c      	bne.n	810a730 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 810a716:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 810a718:	2b00      	cmp	r3, #0
 810a71a:	d109      	bne.n	810a730 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 810a71c:	4b7d      	ldr	r3, [pc, #500]	; (810a914 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 810a71e:	681b      	ldr	r3, [r3, #0]
 810a720:	08db      	lsrs	r3, r3, #3
 810a722:	f003 0303 	and.w	r3, r3, #3
 810a726:	4a7c      	ldr	r2, [pc, #496]	; (810a918 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 810a728:	fa22 f303 	lsr.w	r3, r2, r3
 810a72c:	63fb      	str	r3, [r7, #60]	; 0x3c
 810a72e:	e01f      	b.n	810a770 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 810a730:	4b78      	ldr	r3, [pc, #480]	; (810a914 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 810a732:	681b      	ldr	r3, [r3, #0]
 810a734:	f403 7380 	and.w	r3, r3, #256	; 0x100
 810a738:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810a73c:	d106      	bne.n	810a74c <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 810a73e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 810a740:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 810a744:	d102      	bne.n	810a74c <HAL_RCCEx_GetPeriphCLKFreq+0x104>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 810a746:	4b75      	ldr	r3, [pc, #468]	; (810a91c <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 810a748:	63fb      	str	r3, [r7, #60]	; 0x3c
 810a74a:	e011      	b.n	810a770 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 810a74c:	4b71      	ldr	r3, [pc, #452]	; (810a914 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 810a74e:	681b      	ldr	r3, [r3, #0]
 810a750:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 810a754:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 810a758:	d106      	bne.n	810a768 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 810a75a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 810a75c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 810a760:	d102      	bne.n	810a768 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 810a762:	4b6f      	ldr	r3, [pc, #444]	; (810a920 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 810a764:	63fb      	str	r3, [r7, #60]	; 0x3c
 810a766:	e003      	b.n	810a770 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 810a768:	2300      	movs	r3, #0
 810a76a:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 810a76c:	f000 bc31 	b.w	810afd2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 810a770:	f000 bc2f 	b.w	810afd2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 810a774:	4b6b      	ldr	r3, [pc, #428]	; (810a924 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 810a776:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 810a778:	f000 bc2b 	b.w	810afd2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 810a77c:	2300      	movs	r3, #0
 810a77e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 810a780:	f000 bc27 	b.w	810afd2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 810a784:	687b      	ldr	r3, [r7, #4]
 810a786:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 810a78a:	f040 8095 	bne.w	810a8b8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 810a78e:	4b61      	ldr	r3, [pc, #388]	; (810a914 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 810a790:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810a792:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 810a796:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 810a798:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810a79a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810a79e:	d04d      	beq.n	810a83c <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
 810a7a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810a7a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810a7a6:	f200 8084 	bhi.w	810a8b2 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 810a7aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810a7ac:	2bc0      	cmp	r3, #192	; 0xc0
 810a7ae:	d07d      	beq.n	810a8ac <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 810a7b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810a7b2:	2bc0      	cmp	r3, #192	; 0xc0
 810a7b4:	d87d      	bhi.n	810a8b2 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 810a7b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810a7b8:	2b80      	cmp	r3, #128	; 0x80
 810a7ba:	d02d      	beq.n	810a818 <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 810a7bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810a7be:	2b80      	cmp	r3, #128	; 0x80
 810a7c0:	d877      	bhi.n	810a8b2 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 810a7c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810a7c4:	2b00      	cmp	r3, #0
 810a7c6:	d003      	beq.n	810a7d0 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
 810a7c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810a7ca:	2b40      	cmp	r3, #64	; 0x40
 810a7cc:	d012      	beq.n	810a7f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 810a7ce:	e070      	b.n	810a8b2 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
      {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 810a7d0:	4b50      	ldr	r3, [pc, #320]	; (810a914 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 810a7d2:	681b      	ldr	r3, [r3, #0]
 810a7d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 810a7d8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 810a7dc:	d107      	bne.n	810a7ee <HAL_RCCEx_GetPeriphCLKFreq+0x1a6>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 810a7de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 810a7e2:	4618      	mov	r0, r3
 810a7e4:	f000 fec0 	bl	810b568 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 810a7e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810a7ea:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 810a7ec:	e3f1      	b.n	810afd2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 810a7ee:	2300      	movs	r3, #0
 810a7f0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 810a7f2:	e3ee      	b.n	810afd2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 810a7f4:	4b47      	ldr	r3, [pc, #284]	; (810a914 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 810a7f6:	681b      	ldr	r3, [r3, #0]
 810a7f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 810a7fc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 810a800:	d107      	bne.n	810a812 <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810a802:	f107 0318 	add.w	r3, r7, #24
 810a806:	4618      	mov	r0, r3
 810a808:	f000 fc06 	bl	810b018 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 810a80c:	69bb      	ldr	r3, [r7, #24]
 810a80e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 810a810:	e3df      	b.n	810afd2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 810a812:	2300      	movs	r3, #0
 810a814:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 810a816:	e3dc      	b.n	810afd2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 810a818:	4b3e      	ldr	r3, [pc, #248]	; (810a914 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 810a81a:	681b      	ldr	r3, [r3, #0]
 810a81c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 810a820:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 810a824:	d107      	bne.n	810a836 <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810a826:	f107 030c 	add.w	r3, r7, #12
 810a82a:	4618      	mov	r0, r3
 810a82c:	f000 fd48 	bl	810b2c0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 810a830:	68fb      	ldr	r3, [r7, #12]
 810a832:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 810a834:	e3cd      	b.n	810afd2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 810a836:	2300      	movs	r3, #0
 810a838:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 810a83a:	e3ca      	b.n	810afd2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 810a83c:	4b35      	ldr	r3, [pc, #212]	; (810a914 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 810a83e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 810a840:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 810a844:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 810a846:	4b33      	ldr	r3, [pc, #204]	; (810a914 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 810a848:	681b      	ldr	r3, [r3, #0]
 810a84a:	f003 0304 	and.w	r3, r3, #4
 810a84e:	2b04      	cmp	r3, #4
 810a850:	d10c      	bne.n	810a86c <HAL_RCCEx_GetPeriphCLKFreq+0x224>
 810a852:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 810a854:	2b00      	cmp	r3, #0
 810a856:	d109      	bne.n	810a86c <HAL_RCCEx_GetPeriphCLKFreq+0x224>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 810a858:	4b2e      	ldr	r3, [pc, #184]	; (810a914 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 810a85a:	681b      	ldr	r3, [r3, #0]
 810a85c:	08db      	lsrs	r3, r3, #3
 810a85e:	f003 0303 	and.w	r3, r3, #3
 810a862:	4a2d      	ldr	r2, [pc, #180]	; (810a918 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 810a864:	fa22 f303 	lsr.w	r3, r2, r3
 810a868:	63fb      	str	r3, [r7, #60]	; 0x3c
 810a86a:	e01e      	b.n	810a8aa <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 810a86c:	4b29      	ldr	r3, [pc, #164]	; (810a914 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 810a86e:	681b      	ldr	r3, [r3, #0]
 810a870:	f403 7380 	and.w	r3, r3, #256	; 0x100
 810a874:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810a878:	d106      	bne.n	810a888 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
 810a87a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 810a87c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 810a880:	d102      	bne.n	810a888 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 810a882:	4b26      	ldr	r3, [pc, #152]	; (810a91c <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 810a884:	63fb      	str	r3, [r7, #60]	; 0x3c
 810a886:	e010      	b.n	810a8aa <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 810a888:	4b22      	ldr	r3, [pc, #136]	; (810a914 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 810a88a:	681b      	ldr	r3, [r3, #0]
 810a88c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 810a890:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 810a894:	d106      	bne.n	810a8a4 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
 810a896:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 810a898:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 810a89c:	d102      	bne.n	810a8a4 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 810a89e:	4b20      	ldr	r3, [pc, #128]	; (810a920 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 810a8a0:	63fb      	str	r3, [r7, #60]	; 0x3c
 810a8a2:	e002      	b.n	810a8aa <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 810a8a4:	2300      	movs	r3, #0
 810a8a6:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 810a8a8:	e393      	b.n	810afd2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 810a8aa:	e392      	b.n	810afd2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 810a8ac:	4b1d      	ldr	r3, [pc, #116]	; (810a924 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 810a8ae:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 810a8b0:	e38f      	b.n	810afd2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 810a8b2:	2300      	movs	r3, #0
 810a8b4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 810a8b6:	e38c      	b.n	810afd2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 810a8b8:	687b      	ldr	r3, [r7, #4]
 810a8ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 810a8be:	f040 80a7 	bne.w	810aa10 <HAL_RCCEx_GetPeriphCLKFreq+0x3c8>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 810a8c2:	4b14      	ldr	r3, [pc, #80]	; (810a914 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 810a8c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810a8c6:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 810a8ca:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 810a8cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810a8ce:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 810a8d2:	d05f      	beq.n	810a994 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 810a8d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810a8d6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 810a8da:	f200 8096 	bhi.w	810aa0a <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 810a8de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810a8e0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 810a8e4:	f000 808e 	beq.w	810aa04 <HAL_RCCEx_GetPeriphCLKFreq+0x3bc>
 810a8e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810a8ea:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 810a8ee:	f200 808c 	bhi.w	810aa0a <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 810a8f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810a8f4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 810a8f8:	d03a      	beq.n	810a970 <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 810a8fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810a8fc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 810a900:	f200 8083 	bhi.w	810aa0a <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 810a904:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810a906:	2b00      	cmp	r3, #0
 810a908:	d00e      	beq.n	810a928 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>
 810a90a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810a90c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 810a910:	d01c      	beq.n	810a94c <HAL_RCCEx_GetPeriphCLKFreq+0x304>
 810a912:	e07a      	b.n	810aa0a <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 810a914:	58024400 	.word	0x58024400
 810a918:	03d09000 	.word	0x03d09000
 810a91c:	003d0900 	.word	0x003d0900
 810a920:	00f42400 	.word	0x00f42400
 810a924:	00bb8000 	.word	0x00bb8000
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 810a928:	4baa      	ldr	r3, [pc, #680]	; (810abd4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 810a92a:	681b      	ldr	r3, [r3, #0]
 810a92c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 810a930:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 810a934:	d107      	bne.n	810a946 <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 810a936:	f107 0324 	add.w	r3, r7, #36	; 0x24
 810a93a:	4618      	mov	r0, r3
 810a93c:	f000 fe14 	bl	810b568 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 810a940:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810a942:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 810a944:	e345      	b.n	810afd2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 810a946:	2300      	movs	r3, #0
 810a948:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 810a94a:	e342      	b.n	810afd2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 810a94c:	4ba1      	ldr	r3, [pc, #644]	; (810abd4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 810a94e:	681b      	ldr	r3, [r3, #0]
 810a950:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 810a954:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 810a958:	d107      	bne.n	810a96a <HAL_RCCEx_GetPeriphCLKFreq+0x322>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810a95a:	f107 0318 	add.w	r3, r7, #24
 810a95e:	4618      	mov	r0, r3
 810a960:	f000 fb5a 	bl	810b018 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 810a964:	69bb      	ldr	r3, [r7, #24]
 810a966:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 810a968:	e333      	b.n	810afd2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 810a96a:	2300      	movs	r3, #0
 810a96c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 810a96e:	e330      	b.n	810afd2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 810a970:	4b98      	ldr	r3, [pc, #608]	; (810abd4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 810a972:	681b      	ldr	r3, [r3, #0]
 810a974:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 810a978:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 810a97c:	d107      	bne.n	810a98e <HAL_RCCEx_GetPeriphCLKFreq+0x346>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810a97e:	f107 030c 	add.w	r3, r7, #12
 810a982:	4618      	mov	r0, r3
 810a984:	f000 fc9c 	bl	810b2c0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 810a988:	68fb      	ldr	r3, [r7, #12]
 810a98a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 810a98c:	e321      	b.n	810afd2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 810a98e:	2300      	movs	r3, #0
 810a990:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 810a992:	e31e      	b.n	810afd2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 810a994:	4b8f      	ldr	r3, [pc, #572]	; (810abd4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 810a996:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 810a998:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 810a99c:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 810a99e:	4b8d      	ldr	r3, [pc, #564]	; (810abd4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 810a9a0:	681b      	ldr	r3, [r3, #0]
 810a9a2:	f003 0304 	and.w	r3, r3, #4
 810a9a6:	2b04      	cmp	r3, #4
 810a9a8:	d10c      	bne.n	810a9c4 <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
 810a9aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 810a9ac:	2b00      	cmp	r3, #0
 810a9ae:	d109      	bne.n	810a9c4 <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 810a9b0:	4b88      	ldr	r3, [pc, #544]	; (810abd4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 810a9b2:	681b      	ldr	r3, [r3, #0]
 810a9b4:	08db      	lsrs	r3, r3, #3
 810a9b6:	f003 0303 	and.w	r3, r3, #3
 810a9ba:	4a87      	ldr	r2, [pc, #540]	; (810abd8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 810a9bc:	fa22 f303 	lsr.w	r3, r2, r3
 810a9c0:	63fb      	str	r3, [r7, #60]	; 0x3c
 810a9c2:	e01e      	b.n	810aa02 <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 810a9c4:	4b83      	ldr	r3, [pc, #524]	; (810abd4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 810a9c6:	681b      	ldr	r3, [r3, #0]
 810a9c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 810a9cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810a9d0:	d106      	bne.n	810a9e0 <HAL_RCCEx_GetPeriphCLKFreq+0x398>
 810a9d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 810a9d4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 810a9d8:	d102      	bne.n	810a9e0 <HAL_RCCEx_GetPeriphCLKFreq+0x398>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 810a9da:	4b80      	ldr	r3, [pc, #512]	; (810abdc <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 810a9dc:	63fb      	str	r3, [r7, #60]	; 0x3c
 810a9de:	e010      	b.n	810aa02 <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 810a9e0:	4b7c      	ldr	r3, [pc, #496]	; (810abd4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 810a9e2:	681b      	ldr	r3, [r3, #0]
 810a9e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 810a9e8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 810a9ec:	d106      	bne.n	810a9fc <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>
 810a9ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 810a9f0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 810a9f4:	d102      	bne.n	810a9fc <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 810a9f6:	4b7a      	ldr	r3, [pc, #488]	; (810abe0 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 810a9f8:	63fb      	str	r3, [r7, #60]	; 0x3c
 810a9fa:	e002      	b.n	810aa02 <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 810a9fc:	2300      	movs	r3, #0
 810a9fe:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 810aa00:	e2e7      	b.n	810afd2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 810aa02:	e2e6      	b.n	810afd2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 810aa04:	4b77      	ldr	r3, [pc, #476]	; (810abe4 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 810aa06:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 810aa08:	e2e3      	b.n	810afd2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 810aa0a:	2300      	movs	r3, #0
 810aa0c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 810aa0e:	e2e0      	b.n	810afd2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 810aa10:	687b      	ldr	r3, [r7, #4]
 810aa12:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 810aa16:	f040 809c 	bne.w	810ab52 <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 810aa1a:	4b6e      	ldr	r3, [pc, #440]	; (810abd4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 810aa1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810aa1e:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 810aa22:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 810aa24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810aa26:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 810aa2a:	d054      	beq.n	810aad6 <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
 810aa2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810aa2e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 810aa32:	f200 808b 	bhi.w	810ab4c <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 810aa36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810aa38:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 810aa3c:	f000 8083 	beq.w	810ab46 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
 810aa40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810aa42:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 810aa46:	f200 8081 	bhi.w	810ab4c <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 810aa4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810aa4c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 810aa50:	d02f      	beq.n	810aab2 <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 810aa52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810aa54:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 810aa58:	d878      	bhi.n	810ab4c <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 810aa5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810aa5c:	2b00      	cmp	r3, #0
 810aa5e:	d004      	beq.n	810aa6a <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 810aa60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810aa62:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 810aa66:	d012      	beq.n	810aa8e <HAL_RCCEx_GetPeriphCLKFreq+0x446>
 810aa68:	e070      	b.n	810ab4c <HAL_RCCEx_GetPeriphCLKFreq+0x504>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 810aa6a:	4b5a      	ldr	r3, [pc, #360]	; (810abd4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 810aa6c:	681b      	ldr	r3, [r3, #0]
 810aa6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 810aa72:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 810aa76:	d107      	bne.n	810aa88 <HAL_RCCEx_GetPeriphCLKFreq+0x440>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 810aa78:	f107 0324 	add.w	r3, r7, #36	; 0x24
 810aa7c:	4618      	mov	r0, r3
 810aa7e:	f000 fd73 	bl	810b568 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 810aa82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810aa84:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 810aa86:	e2a4      	b.n	810afd2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 810aa88:	2300      	movs	r3, #0
 810aa8a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 810aa8c:	e2a1      	b.n	810afd2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 810aa8e:	4b51      	ldr	r3, [pc, #324]	; (810abd4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 810aa90:	681b      	ldr	r3, [r3, #0]
 810aa92:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 810aa96:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 810aa9a:	d107      	bne.n	810aaac <HAL_RCCEx_GetPeriphCLKFreq+0x464>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810aa9c:	f107 0318 	add.w	r3, r7, #24
 810aaa0:	4618      	mov	r0, r3
 810aaa2:	f000 fab9 	bl	810b018 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 810aaa6:	69bb      	ldr	r3, [r7, #24]
 810aaa8:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 810aaaa:	e292      	b.n	810afd2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 810aaac:	2300      	movs	r3, #0
 810aaae:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 810aab0:	e28f      	b.n	810afd2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 810aab2:	4b48      	ldr	r3, [pc, #288]	; (810abd4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 810aab4:	681b      	ldr	r3, [r3, #0]
 810aab6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 810aaba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 810aabe:	d107      	bne.n	810aad0 <HAL_RCCEx_GetPeriphCLKFreq+0x488>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810aac0:	f107 030c 	add.w	r3, r7, #12
 810aac4:	4618      	mov	r0, r3
 810aac6:	f000 fbfb 	bl	810b2c0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 810aaca:	68fb      	ldr	r3, [r7, #12]
 810aacc:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 810aace:	e280      	b.n	810afd2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 810aad0:	2300      	movs	r3, #0
 810aad2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 810aad4:	e27d      	b.n	810afd2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 810aad6:	4b3f      	ldr	r3, [pc, #252]	; (810abd4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 810aad8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 810aada:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 810aade:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 810aae0:	4b3c      	ldr	r3, [pc, #240]	; (810abd4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 810aae2:	681b      	ldr	r3, [r3, #0]
 810aae4:	f003 0304 	and.w	r3, r3, #4
 810aae8:	2b04      	cmp	r3, #4
 810aaea:	d10c      	bne.n	810ab06 <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 810aaec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 810aaee:	2b00      	cmp	r3, #0
 810aaf0:	d109      	bne.n	810ab06 <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 810aaf2:	4b38      	ldr	r3, [pc, #224]	; (810abd4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 810aaf4:	681b      	ldr	r3, [r3, #0]
 810aaf6:	08db      	lsrs	r3, r3, #3
 810aaf8:	f003 0303 	and.w	r3, r3, #3
 810aafc:	4a36      	ldr	r2, [pc, #216]	; (810abd8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 810aafe:	fa22 f303 	lsr.w	r3, r2, r3
 810ab02:	63fb      	str	r3, [r7, #60]	; 0x3c
 810ab04:	e01e      	b.n	810ab44 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 810ab06:	4b33      	ldr	r3, [pc, #204]	; (810abd4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 810ab08:	681b      	ldr	r3, [r3, #0]
 810ab0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 810ab0e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810ab12:	d106      	bne.n	810ab22 <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
 810ab14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 810ab16:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 810ab1a:	d102      	bne.n	810ab22 <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 810ab1c:	4b2f      	ldr	r3, [pc, #188]	; (810abdc <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 810ab1e:	63fb      	str	r3, [r7, #60]	; 0x3c
 810ab20:	e010      	b.n	810ab44 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 810ab22:	4b2c      	ldr	r3, [pc, #176]	; (810abd4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 810ab24:	681b      	ldr	r3, [r3, #0]
 810ab26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 810ab2a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 810ab2e:	d106      	bne.n	810ab3e <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 810ab30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 810ab32:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 810ab36:	d102      	bne.n	810ab3e <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 810ab38:	4b29      	ldr	r3, [pc, #164]	; (810abe0 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 810ab3a:	63fb      	str	r3, [r7, #60]	; 0x3c
 810ab3c:	e002      	b.n	810ab44 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 810ab3e:	2300      	movs	r3, #0
 810ab40:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 810ab42:	e246      	b.n	810afd2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 810ab44:	e245      	b.n	810afd2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 810ab46:	4b27      	ldr	r3, [pc, #156]	; (810abe4 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 810ab48:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 810ab4a:	e242      	b.n	810afd2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 810ab4c:	2300      	movs	r3, #0
 810ab4e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 810ab50:	e23f      	b.n	810afd2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 810ab52:	687b      	ldr	r3, [r7, #4]
 810ab54:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 810ab58:	f040 80a8 	bne.w	810acac <HAL_RCCEx_GetPeriphCLKFreq+0x664>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 810ab5c:	4b1d      	ldr	r3, [pc, #116]	; (810abd4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 810ab5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810ab60:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 810ab64:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 810ab66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810ab68:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 810ab6c:	d060      	beq.n	810ac30 <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
 810ab6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810ab70:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 810ab74:	f200 8097 	bhi.w	810aca6 <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 810ab78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810ab7a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 810ab7e:	f000 808f 	beq.w	810aca0 <HAL_RCCEx_GetPeriphCLKFreq+0x658>
 810ab82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810ab84:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 810ab88:	f200 808d 	bhi.w	810aca6 <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 810ab8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810ab8e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 810ab92:	d03b      	beq.n	810ac0c <HAL_RCCEx_GetPeriphCLKFreq+0x5c4>
 810ab94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810ab96:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 810ab9a:	f200 8084 	bhi.w	810aca6 <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 810ab9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810aba0:	2b00      	cmp	r3, #0
 810aba2:	d004      	beq.n	810abae <HAL_RCCEx_GetPeriphCLKFreq+0x566>
 810aba4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810aba6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 810abaa:	d01d      	beq.n	810abe8 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>
 810abac:	e07b      	b.n	810aca6 <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 810abae:	4b09      	ldr	r3, [pc, #36]	; (810abd4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 810abb0:	681b      	ldr	r3, [r3, #0]
 810abb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 810abb6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 810abba:	d107      	bne.n	810abcc <HAL_RCCEx_GetPeriphCLKFreq+0x584>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 810abbc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 810abc0:	4618      	mov	r0, r3
 810abc2:	f000 fcd1 	bl	810b568 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 810abc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810abc8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 810abca:	e202      	b.n	810afd2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 810abcc:	2300      	movs	r3, #0
 810abce:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 810abd0:	e1ff      	b.n	810afd2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 810abd2:	bf00      	nop
 810abd4:	58024400 	.word	0x58024400
 810abd8:	03d09000 	.word	0x03d09000
 810abdc:	003d0900 	.word	0x003d0900
 810abe0:	00f42400 	.word	0x00f42400
 810abe4:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 810abe8:	4ba3      	ldr	r3, [pc, #652]	; (810ae78 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 810abea:	681b      	ldr	r3, [r3, #0]
 810abec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 810abf0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 810abf4:	d107      	bne.n	810ac06 <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810abf6:	f107 0318 	add.w	r3, r7, #24
 810abfa:	4618      	mov	r0, r3
 810abfc:	f000 fa0c 	bl	810b018 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 810ac00:	69bb      	ldr	r3, [r7, #24]
 810ac02:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 810ac04:	e1e5      	b.n	810afd2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 810ac06:	2300      	movs	r3, #0
 810ac08:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 810ac0a:	e1e2      	b.n	810afd2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 810ac0c:	4b9a      	ldr	r3, [pc, #616]	; (810ae78 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 810ac0e:	681b      	ldr	r3, [r3, #0]
 810ac10:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 810ac14:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 810ac18:	d107      	bne.n	810ac2a <HAL_RCCEx_GetPeriphCLKFreq+0x5e2>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810ac1a:	f107 030c 	add.w	r3, r7, #12
 810ac1e:	4618      	mov	r0, r3
 810ac20:	f000 fb4e 	bl	810b2c0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 810ac24:	68fb      	ldr	r3, [r7, #12]
 810ac26:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 810ac28:	e1d3      	b.n	810afd2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 810ac2a:	2300      	movs	r3, #0
 810ac2c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 810ac2e:	e1d0      	b.n	810afd2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 810ac30:	4b91      	ldr	r3, [pc, #580]	; (810ae78 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 810ac32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 810ac34:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 810ac38:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 810ac3a:	4b8f      	ldr	r3, [pc, #572]	; (810ae78 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 810ac3c:	681b      	ldr	r3, [r3, #0]
 810ac3e:	f003 0304 	and.w	r3, r3, #4
 810ac42:	2b04      	cmp	r3, #4
 810ac44:	d10c      	bne.n	810ac60 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
 810ac46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 810ac48:	2b00      	cmp	r3, #0
 810ac4a:	d109      	bne.n	810ac60 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 810ac4c:	4b8a      	ldr	r3, [pc, #552]	; (810ae78 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 810ac4e:	681b      	ldr	r3, [r3, #0]
 810ac50:	08db      	lsrs	r3, r3, #3
 810ac52:	f003 0303 	and.w	r3, r3, #3
 810ac56:	4a89      	ldr	r2, [pc, #548]	; (810ae7c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 810ac58:	fa22 f303 	lsr.w	r3, r2, r3
 810ac5c:	63fb      	str	r3, [r7, #60]	; 0x3c
 810ac5e:	e01e      	b.n	810ac9e <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 810ac60:	4b85      	ldr	r3, [pc, #532]	; (810ae78 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 810ac62:	681b      	ldr	r3, [r3, #0]
 810ac64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 810ac68:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810ac6c:	d106      	bne.n	810ac7c <HAL_RCCEx_GetPeriphCLKFreq+0x634>
 810ac6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 810ac70:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 810ac74:	d102      	bne.n	810ac7c <HAL_RCCEx_GetPeriphCLKFreq+0x634>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 810ac76:	4b82      	ldr	r3, [pc, #520]	; (810ae80 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 810ac78:	63fb      	str	r3, [r7, #60]	; 0x3c
 810ac7a:	e010      	b.n	810ac9e <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 810ac7c:	4b7e      	ldr	r3, [pc, #504]	; (810ae78 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 810ac7e:	681b      	ldr	r3, [r3, #0]
 810ac80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 810ac84:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 810ac88:	d106      	bne.n	810ac98 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 810ac8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 810ac8c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 810ac90:	d102      	bne.n	810ac98 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 810ac92:	4b7c      	ldr	r3, [pc, #496]	; (810ae84 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 810ac94:	63fb      	str	r3, [r7, #60]	; 0x3c
 810ac96:	e002      	b.n	810ac9e <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 810ac98:	2300      	movs	r3, #0
 810ac9a:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 810ac9c:	e199      	b.n	810afd2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 810ac9e:	e198      	b.n	810afd2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 810aca0:	4b79      	ldr	r3, [pc, #484]	; (810ae88 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 810aca2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 810aca4:	e195      	b.n	810afd2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 810aca6:	2300      	movs	r3, #0
 810aca8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 810acaa:	e192      	b.n	810afd2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 810acac:	687b      	ldr	r3, [r7, #4]
 810acae:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 810acb2:	d173      	bne.n	810ad9c <HAL_RCCEx_GetPeriphCLKFreq+0x754>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 810acb4:	4b70      	ldr	r3, [pc, #448]	; (810ae78 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 810acb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810acb8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 810acbc:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 810acbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810acc0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 810acc4:	d02f      	beq.n	810ad26 <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
 810acc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810acc8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 810accc:	d863      	bhi.n	810ad96 <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
 810acce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810acd0:	2b00      	cmp	r3, #0
 810acd2:	d004      	beq.n	810acde <HAL_RCCEx_GetPeriphCLKFreq+0x696>
 810acd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810acd6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 810acda:	d012      	beq.n	810ad02 <HAL_RCCEx_GetPeriphCLKFreq+0x6ba>
 810acdc:	e05b      	b.n	810ad96 <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 810acde:	4b66      	ldr	r3, [pc, #408]	; (810ae78 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 810ace0:	681b      	ldr	r3, [r3, #0]
 810ace2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 810ace6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 810acea:	d107      	bne.n	810acfc <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810acec:	f107 0318 	add.w	r3, r7, #24
 810acf0:	4618      	mov	r0, r3
 810acf2:	f000 f991 	bl	810b018 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 810acf6:	69bb      	ldr	r3, [r7, #24]
 810acf8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 810acfa:	e16a      	b.n	810afd2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 810acfc:	2300      	movs	r3, #0
 810acfe:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 810ad00:	e167      	b.n	810afd2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 810ad02:	4b5d      	ldr	r3, [pc, #372]	; (810ae78 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 810ad04:	681b      	ldr	r3, [r3, #0]
 810ad06:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 810ad0a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 810ad0e:	d107      	bne.n	810ad20 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810ad10:	f107 030c 	add.w	r3, r7, #12
 810ad14:	4618      	mov	r0, r3
 810ad16:	f000 fad3 	bl	810b2c0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 810ad1a:	697b      	ldr	r3, [r7, #20]
 810ad1c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 810ad1e:	e158      	b.n	810afd2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 810ad20:	2300      	movs	r3, #0
 810ad22:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 810ad24:	e155      	b.n	810afd2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 810ad26:	4b54      	ldr	r3, [pc, #336]	; (810ae78 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 810ad28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 810ad2a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 810ad2e:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 810ad30:	4b51      	ldr	r3, [pc, #324]	; (810ae78 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 810ad32:	681b      	ldr	r3, [r3, #0]
 810ad34:	f003 0304 	and.w	r3, r3, #4
 810ad38:	2b04      	cmp	r3, #4
 810ad3a:	d10c      	bne.n	810ad56 <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
 810ad3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 810ad3e:	2b00      	cmp	r3, #0
 810ad40:	d109      	bne.n	810ad56 <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 810ad42:	4b4d      	ldr	r3, [pc, #308]	; (810ae78 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 810ad44:	681b      	ldr	r3, [r3, #0]
 810ad46:	08db      	lsrs	r3, r3, #3
 810ad48:	f003 0303 	and.w	r3, r3, #3
 810ad4c:	4a4b      	ldr	r2, [pc, #300]	; (810ae7c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 810ad4e:	fa22 f303 	lsr.w	r3, r2, r3
 810ad52:	63fb      	str	r3, [r7, #60]	; 0x3c
 810ad54:	e01e      	b.n	810ad94 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 810ad56:	4b48      	ldr	r3, [pc, #288]	; (810ae78 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 810ad58:	681b      	ldr	r3, [r3, #0]
 810ad5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 810ad5e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810ad62:	d106      	bne.n	810ad72 <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
 810ad64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 810ad66:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 810ad6a:	d102      	bne.n	810ad72 <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 810ad6c:	4b44      	ldr	r3, [pc, #272]	; (810ae80 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 810ad6e:	63fb      	str	r3, [r7, #60]	; 0x3c
 810ad70:	e010      	b.n	810ad94 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 810ad72:	4b41      	ldr	r3, [pc, #260]	; (810ae78 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 810ad74:	681b      	ldr	r3, [r3, #0]
 810ad76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 810ad7a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 810ad7e:	d106      	bne.n	810ad8e <HAL_RCCEx_GetPeriphCLKFreq+0x746>
 810ad80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 810ad82:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 810ad86:	d102      	bne.n	810ad8e <HAL_RCCEx_GetPeriphCLKFreq+0x746>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 810ad88:	4b3e      	ldr	r3, [pc, #248]	; (810ae84 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 810ad8a:	63fb      	str	r3, [r7, #60]	; 0x3c
 810ad8c:	e002      	b.n	810ad94 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 810ad8e:	2300      	movs	r3, #0
 810ad90:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 810ad92:	e11e      	b.n	810afd2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 810ad94:	e11d      	b.n	810afd2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 810ad96:	2300      	movs	r3, #0
 810ad98:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 810ad9a:	e11a      	b.n	810afd2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 810ad9c:	687b      	ldr	r3, [r7, #4]
 810ad9e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 810ada2:	d133      	bne.n	810ae0c <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 810ada4:	4b34      	ldr	r3, [pc, #208]	; (810ae78 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 810ada6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 810ada8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 810adac:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 810adae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810adb0:	2b00      	cmp	r3, #0
 810adb2:	d004      	beq.n	810adbe <HAL_RCCEx_GetPeriphCLKFreq+0x776>
 810adb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810adb6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 810adba:	d012      	beq.n	810ade2 <HAL_RCCEx_GetPeriphCLKFreq+0x79a>
 810adbc:	e023      	b.n	810ae06 <HAL_RCCEx_GetPeriphCLKFreq+0x7be>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 810adbe:	4b2e      	ldr	r3, [pc, #184]	; (810ae78 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 810adc0:	681b      	ldr	r3, [r3, #0]
 810adc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 810adc6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 810adca:	d107      	bne.n	810addc <HAL_RCCEx_GetPeriphCLKFreq+0x794>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 810adcc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 810add0:	4618      	mov	r0, r3
 810add2:	f000 fbc9 	bl	810b568 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 810add6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810add8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 810adda:	e0fa      	b.n	810afd2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 810addc:	2300      	movs	r3, #0
 810adde:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 810ade0:	e0f7      	b.n	810afd2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 810ade2:	4b25      	ldr	r3, [pc, #148]	; (810ae78 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 810ade4:	681b      	ldr	r3, [r3, #0]
 810ade6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 810adea:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 810adee:	d107      	bne.n	810ae00 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810adf0:	f107 0318 	add.w	r3, r7, #24
 810adf4:	4618      	mov	r0, r3
 810adf6:	f000 f90f 	bl	810b018 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 810adfa:	6a3b      	ldr	r3, [r7, #32]
 810adfc:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 810adfe:	e0e8      	b.n	810afd2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 810ae00:	2300      	movs	r3, #0
 810ae02:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 810ae04:	e0e5      	b.n	810afd2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 810ae06:	2300      	movs	r3, #0
 810ae08:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 810ae0a:	e0e2      	b.n	810afd2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 810ae0c:	687b      	ldr	r3, [r7, #4]
 810ae0e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 810ae12:	f040 808f 	bne.w	810af34 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 810ae16:	4b18      	ldr	r3, [pc, #96]	; (810ae78 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 810ae18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810ae1a:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 810ae1e:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 810ae20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810ae22:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 810ae26:	d075      	beq.n	810af14 <HAL_RCCEx_GetPeriphCLKFreq+0x8cc>
 810ae28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810ae2a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 810ae2e:	d87e      	bhi.n	810af2e <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 810ae30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810ae32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 810ae36:	d060      	beq.n	810aefa <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
 810ae38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810ae3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 810ae3e:	d876      	bhi.n	810af2e <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 810ae40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810ae42:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 810ae46:	d045      	beq.n	810aed4 <HAL_RCCEx_GetPeriphCLKFreq+0x88c>
 810ae48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810ae4a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 810ae4e:	d86e      	bhi.n	810af2e <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 810ae50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810ae52:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 810ae56:	d02b      	beq.n	810aeb0 <HAL_RCCEx_GetPeriphCLKFreq+0x868>
 810ae58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810ae5a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 810ae5e:	d866      	bhi.n	810af2e <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 810ae60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810ae62:	2b00      	cmp	r3, #0
 810ae64:	d004      	beq.n	810ae70 <HAL_RCCEx_GetPeriphCLKFreq+0x828>
 810ae66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810ae68:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 810ae6c:	d00e      	beq.n	810ae8c <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 810ae6e:	e05e      	b.n	810af2e <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 810ae70:	f000 f8bc 	bl	810afec <HAL_RCCEx_GetD3PCLK1Freq>
 810ae74:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 810ae76:	e0ac      	b.n	810afd2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 810ae78:	58024400 	.word	0x58024400
 810ae7c:	03d09000 	.word	0x03d09000
 810ae80:	003d0900 	.word	0x003d0900
 810ae84:	00f42400 	.word	0x00f42400
 810ae88:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 810ae8c:	4b53      	ldr	r3, [pc, #332]	; (810afdc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 810ae8e:	681b      	ldr	r3, [r3, #0]
 810ae90:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 810ae94:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 810ae98:	d107      	bne.n	810aeaa <HAL_RCCEx_GetPeriphCLKFreq+0x862>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810ae9a:	f107 0318 	add.w	r3, r7, #24
 810ae9e:	4618      	mov	r0, r3
 810aea0:	f000 f8ba 	bl	810b018 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 810aea4:	69fb      	ldr	r3, [r7, #28]
 810aea6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 810aea8:	e093      	b.n	810afd2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 810aeaa:	2300      	movs	r3, #0
 810aeac:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 810aeae:	e090      	b.n	810afd2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 810aeb0:	4b4a      	ldr	r3, [pc, #296]	; (810afdc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 810aeb2:	681b      	ldr	r3, [r3, #0]
 810aeb4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 810aeb8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 810aebc:	d107      	bne.n	810aece <HAL_RCCEx_GetPeriphCLKFreq+0x886>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810aebe:	f107 030c 	add.w	r3, r7, #12
 810aec2:	4618      	mov	r0, r3
 810aec4:	f000 f9fc 	bl	810b2c0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 810aec8:	693b      	ldr	r3, [r7, #16]
 810aeca:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 810aecc:	e081      	b.n	810afd2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 810aece:	2300      	movs	r3, #0
 810aed0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 810aed2:	e07e      	b.n	810afd2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 810aed4:	4b41      	ldr	r3, [pc, #260]	; (810afdc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 810aed6:	681b      	ldr	r3, [r3, #0]
 810aed8:	f003 0304 	and.w	r3, r3, #4
 810aedc:	2b04      	cmp	r3, #4
 810aede:	d109      	bne.n	810aef4 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 810aee0:	4b3e      	ldr	r3, [pc, #248]	; (810afdc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 810aee2:	681b      	ldr	r3, [r3, #0]
 810aee4:	08db      	lsrs	r3, r3, #3
 810aee6:	f003 0303 	and.w	r3, r3, #3
 810aeea:	4a3d      	ldr	r2, [pc, #244]	; (810afe0 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 810aeec:	fa22 f303 	lsr.w	r3, r2, r3
 810aef0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 810aef2:	e06e      	b.n	810afd2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 810aef4:	2300      	movs	r3, #0
 810aef6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 810aef8:	e06b      	b.n	810afd2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 810aefa:	4b38      	ldr	r3, [pc, #224]	; (810afdc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 810aefc:	681b      	ldr	r3, [r3, #0]
 810aefe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 810af02:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810af06:	d102      	bne.n	810af0e <HAL_RCCEx_GetPeriphCLKFreq+0x8c6>
         {
          frequency = CSI_VALUE;
 810af08:	4b36      	ldr	r3, [pc, #216]	; (810afe4 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 810af0a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 810af0c:	e061      	b.n	810afd2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 810af0e:	2300      	movs	r3, #0
 810af10:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 810af12:	e05e      	b.n	810afd2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 810af14:	4b31      	ldr	r3, [pc, #196]	; (810afdc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 810af16:	681b      	ldr	r3, [r3, #0]
 810af18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 810af1c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 810af20:	d102      	bne.n	810af28 <HAL_RCCEx_GetPeriphCLKFreq+0x8e0>
         {
          frequency = HSE_VALUE;
 810af22:	4b31      	ldr	r3, [pc, #196]	; (810afe8 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 810af24:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 810af26:	e054      	b.n	810afd2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 810af28:	2300      	movs	r3, #0
 810af2a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 810af2c:	e051      	b.n	810afd2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 810af2e:	2300      	movs	r3, #0
 810af30:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 810af32:	e04e      	b.n	810afd2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 810af34:	687b      	ldr	r3, [r7, #4]
 810af36:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 810af3a:	d148      	bne.n	810afce <HAL_RCCEx_GetPeriphCLKFreq+0x986>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 810af3c:	4b27      	ldr	r3, [pc, #156]	; (810afdc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 810af3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810af40:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 810af44:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 810af46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810af48:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 810af4c:	d02a      	beq.n	810afa4 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 810af4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810af50:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 810af54:	d838      	bhi.n	810afc8 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 810af56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810af58:	2b00      	cmp	r3, #0
 810af5a:	d004      	beq.n	810af66 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 810af5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810af5e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 810af62:	d00d      	beq.n	810af80 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 810af64:	e030      	b.n	810afc8 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 810af66:	4b1d      	ldr	r3, [pc, #116]	; (810afdc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 810af68:	681b      	ldr	r3, [r3, #0]
 810af6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 810af6e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 810af72:	d102      	bne.n	810af7a <HAL_RCCEx_GetPeriphCLKFreq+0x932>
         {
          frequency = HSE_VALUE;
 810af74:	4b1c      	ldr	r3, [pc, #112]	; (810afe8 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 810af76:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 810af78:	e02b      	b.n	810afd2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 810af7a:	2300      	movs	r3, #0
 810af7c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 810af7e:	e028      	b.n	810afd2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 810af80:	4b16      	ldr	r3, [pc, #88]	; (810afdc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 810af82:	681b      	ldr	r3, [r3, #0]
 810af84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 810af88:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 810af8c:	d107      	bne.n	810af9e <HAL_RCCEx_GetPeriphCLKFreq+0x956>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 810af8e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 810af92:	4618      	mov	r0, r3
 810af94:	f000 fae8 	bl	810b568 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 810af98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810af9a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 810af9c:	e019      	b.n	810afd2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 810af9e:	2300      	movs	r3, #0
 810afa0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 810afa2:	e016      	b.n	810afd2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 810afa4:	4b0d      	ldr	r3, [pc, #52]	; (810afdc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 810afa6:	681b      	ldr	r3, [r3, #0]
 810afa8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 810afac:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 810afb0:	d107      	bne.n	810afc2 <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810afb2:	f107 0318 	add.w	r3, r7, #24
 810afb6:	4618      	mov	r0, r3
 810afb8:	f000 f82e 	bl	810b018 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 810afbc:	69fb      	ldr	r3, [r7, #28]
 810afbe:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 810afc0:	e007      	b.n	810afd2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 810afc2:	2300      	movs	r3, #0
 810afc4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 810afc6:	e004      	b.n	810afd2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 810afc8:	2300      	movs	r3, #0
 810afca:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 810afcc:	e001      	b.n	810afd2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else
    {
      frequency = 0;
 810afce:	2300      	movs	r3, #0
 810afd0:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 810afd2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 810afd4:	4618      	mov	r0, r3
 810afd6:	3740      	adds	r7, #64	; 0x40
 810afd8:	46bd      	mov	sp, r7
 810afda:	bd80      	pop	{r7, pc}
 810afdc:	58024400 	.word	0x58024400
 810afe0:	03d09000 	.word	0x03d09000
 810afe4:	003d0900 	.word	0x003d0900
 810afe8:	00f42400 	.word	0x00f42400

0810afec <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 810afec:	b580      	push	{r7, lr}
 810afee:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 810aff0:	f7fe fb4a 	bl	8109688 <HAL_RCC_GetHCLKFreq>
 810aff4:	4602      	mov	r2, r0
 810aff6:	4b06      	ldr	r3, [pc, #24]	; (810b010 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 810aff8:	6a1b      	ldr	r3, [r3, #32]
 810affa:	091b      	lsrs	r3, r3, #4
 810affc:	f003 0307 	and.w	r3, r3, #7
 810b000:	4904      	ldr	r1, [pc, #16]	; (810b014 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 810b002:	5ccb      	ldrb	r3, [r1, r3]
 810b004:	f003 031f 	and.w	r3, r3, #31
 810b008:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 810b00c:	4618      	mov	r0, r3
 810b00e:	bd80      	pop	{r7, pc}
 810b010:	58024400 	.word	0x58024400
 810b014:	08119ad8 	.word	0x08119ad8

0810b018 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 810b018:	b480      	push	{r7}
 810b01a:	b089      	sub	sp, #36	; 0x24
 810b01c:	af00      	add	r7, sp, #0
 810b01e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 810b020:	4ba1      	ldr	r3, [pc, #644]	; (810b2a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810b022:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810b024:	f003 0303 	and.w	r3, r3, #3
 810b028:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 810b02a:	4b9f      	ldr	r3, [pc, #636]	; (810b2a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810b02c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810b02e:	0b1b      	lsrs	r3, r3, #12
 810b030:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 810b034:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 810b036:	4b9c      	ldr	r3, [pc, #624]	; (810b2a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810b038:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810b03a:	091b      	lsrs	r3, r3, #4
 810b03c:	f003 0301 	and.w	r3, r3, #1
 810b040:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 810b042:	4b99      	ldr	r3, [pc, #612]	; (810b2a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810b044:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810b046:	08db      	lsrs	r3, r3, #3
 810b048:	f3c3 030c 	ubfx	r3, r3, #0, #13
 810b04c:	693a      	ldr	r2, [r7, #16]
 810b04e:	fb02 f303 	mul.w	r3, r2, r3
 810b052:	ee07 3a90 	vmov	s15, r3
 810b056:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810b05a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 810b05e:	697b      	ldr	r3, [r7, #20]
 810b060:	2b00      	cmp	r3, #0
 810b062:	f000 8111 	beq.w	810b288 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 810b066:	69bb      	ldr	r3, [r7, #24]
 810b068:	2b02      	cmp	r3, #2
 810b06a:	f000 8083 	beq.w	810b174 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 810b06e:	69bb      	ldr	r3, [r7, #24]
 810b070:	2b02      	cmp	r3, #2
 810b072:	f200 80a1 	bhi.w	810b1b8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 810b076:	69bb      	ldr	r3, [r7, #24]
 810b078:	2b00      	cmp	r3, #0
 810b07a:	d003      	beq.n	810b084 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 810b07c:	69bb      	ldr	r3, [r7, #24]
 810b07e:	2b01      	cmp	r3, #1
 810b080:	d056      	beq.n	810b130 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 810b082:	e099      	b.n	810b1b8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810b084:	4b88      	ldr	r3, [pc, #544]	; (810b2a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810b086:	681b      	ldr	r3, [r3, #0]
 810b088:	f003 0320 	and.w	r3, r3, #32
 810b08c:	2b00      	cmp	r3, #0
 810b08e:	d02d      	beq.n	810b0ec <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 810b090:	4b85      	ldr	r3, [pc, #532]	; (810b2a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810b092:	681b      	ldr	r3, [r3, #0]
 810b094:	08db      	lsrs	r3, r3, #3
 810b096:	f003 0303 	and.w	r3, r3, #3
 810b09a:	4a84      	ldr	r2, [pc, #528]	; (810b2ac <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 810b09c:	fa22 f303 	lsr.w	r3, r2, r3
 810b0a0:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 810b0a2:	68bb      	ldr	r3, [r7, #8]
 810b0a4:	ee07 3a90 	vmov	s15, r3
 810b0a8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810b0ac:	697b      	ldr	r3, [r7, #20]
 810b0ae:	ee07 3a90 	vmov	s15, r3
 810b0b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810b0b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810b0ba:	4b7b      	ldr	r3, [pc, #492]	; (810b2a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810b0bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810b0be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810b0c2:	ee07 3a90 	vmov	s15, r3
 810b0c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810b0ca:	ed97 6a03 	vldr	s12, [r7, #12]
 810b0ce:	eddf 5a78 	vldr	s11, [pc, #480]	; 810b2b0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 810b0d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810b0d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810b0da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810b0de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810b0e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 810b0e6:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 810b0ea:	e087      	b.n	810b1fc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 810b0ec:	697b      	ldr	r3, [r7, #20]
 810b0ee:	ee07 3a90 	vmov	s15, r3
 810b0f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810b0f6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 810b2b4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 810b0fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810b0fe:	4b6a      	ldr	r3, [pc, #424]	; (810b2a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810b100:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810b102:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810b106:	ee07 3a90 	vmov	s15, r3
 810b10a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810b10e:	ed97 6a03 	vldr	s12, [r7, #12]
 810b112:	eddf 5a67 	vldr	s11, [pc, #412]	; 810b2b0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 810b116:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810b11a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810b11e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810b122:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810b126:	ee67 7a27 	vmul.f32	s15, s14, s15
 810b12a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 810b12e:	e065      	b.n	810b1fc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 810b130:	697b      	ldr	r3, [r7, #20]
 810b132:	ee07 3a90 	vmov	s15, r3
 810b136:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810b13a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 810b2b8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 810b13e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810b142:	4b59      	ldr	r3, [pc, #356]	; (810b2a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810b144:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810b146:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810b14a:	ee07 3a90 	vmov	s15, r3
 810b14e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810b152:	ed97 6a03 	vldr	s12, [r7, #12]
 810b156:	eddf 5a56 	vldr	s11, [pc, #344]	; 810b2b0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 810b15a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810b15e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810b162:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810b166:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810b16a:	ee67 7a27 	vmul.f32	s15, s14, s15
 810b16e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 810b172:	e043      	b.n	810b1fc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 810b174:	697b      	ldr	r3, [r7, #20]
 810b176:	ee07 3a90 	vmov	s15, r3
 810b17a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810b17e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 810b2bc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 810b182:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810b186:	4b48      	ldr	r3, [pc, #288]	; (810b2a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810b188:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810b18a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810b18e:	ee07 3a90 	vmov	s15, r3
 810b192:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810b196:	ed97 6a03 	vldr	s12, [r7, #12]
 810b19a:	eddf 5a45 	vldr	s11, [pc, #276]	; 810b2b0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 810b19e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810b1a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810b1a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810b1aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810b1ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 810b1b2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 810b1b6:	e021      	b.n	810b1fc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 810b1b8:	697b      	ldr	r3, [r7, #20]
 810b1ba:	ee07 3a90 	vmov	s15, r3
 810b1be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810b1c2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 810b2b8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 810b1c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810b1ca:	4b37      	ldr	r3, [pc, #220]	; (810b2a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810b1cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810b1ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810b1d2:	ee07 3a90 	vmov	s15, r3
 810b1d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810b1da:	ed97 6a03 	vldr	s12, [r7, #12]
 810b1de:	eddf 5a34 	vldr	s11, [pc, #208]	; 810b2b0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 810b1e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810b1e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810b1ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810b1ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810b1f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 810b1f6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 810b1fa:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 810b1fc:	4b2a      	ldr	r3, [pc, #168]	; (810b2a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810b1fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810b200:	0a5b      	lsrs	r3, r3, #9
 810b202:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 810b206:	ee07 3a90 	vmov	s15, r3
 810b20a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810b20e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 810b212:	ee37 7a87 	vadd.f32	s14, s15, s14
 810b216:	edd7 6a07 	vldr	s13, [r7, #28]
 810b21a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810b21e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810b222:	ee17 2a90 	vmov	r2, s15
 810b226:	687b      	ldr	r3, [r7, #4]
 810b228:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 810b22a:	4b1f      	ldr	r3, [pc, #124]	; (810b2a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810b22c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810b22e:	0c1b      	lsrs	r3, r3, #16
 810b230:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 810b234:	ee07 3a90 	vmov	s15, r3
 810b238:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810b23c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 810b240:	ee37 7a87 	vadd.f32	s14, s15, s14
 810b244:	edd7 6a07 	vldr	s13, [r7, #28]
 810b248:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810b24c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810b250:	ee17 2a90 	vmov	r2, s15
 810b254:	687b      	ldr	r3, [r7, #4]
 810b256:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 810b258:	4b13      	ldr	r3, [pc, #76]	; (810b2a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810b25a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810b25c:	0e1b      	lsrs	r3, r3, #24
 810b25e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 810b262:	ee07 3a90 	vmov	s15, r3
 810b266:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810b26a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 810b26e:	ee37 7a87 	vadd.f32	s14, s15, s14
 810b272:	edd7 6a07 	vldr	s13, [r7, #28]
 810b276:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810b27a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810b27e:	ee17 2a90 	vmov	r2, s15
 810b282:	687b      	ldr	r3, [r7, #4]
 810b284:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 810b286:	e008      	b.n	810b29a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 810b288:	687b      	ldr	r3, [r7, #4]
 810b28a:	2200      	movs	r2, #0
 810b28c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 810b28e:	687b      	ldr	r3, [r7, #4]
 810b290:	2200      	movs	r2, #0
 810b292:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 810b294:	687b      	ldr	r3, [r7, #4]
 810b296:	2200      	movs	r2, #0
 810b298:	609a      	str	r2, [r3, #8]
}
 810b29a:	bf00      	nop
 810b29c:	3724      	adds	r7, #36	; 0x24
 810b29e:	46bd      	mov	sp, r7
 810b2a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b2a4:	4770      	bx	lr
 810b2a6:	bf00      	nop
 810b2a8:	58024400 	.word	0x58024400
 810b2ac:	03d09000 	.word	0x03d09000
 810b2b0:	46000000 	.word	0x46000000
 810b2b4:	4c742400 	.word	0x4c742400
 810b2b8:	4a742400 	.word	0x4a742400
 810b2bc:	4b742400 	.word	0x4b742400

0810b2c0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 810b2c0:	b480      	push	{r7}
 810b2c2:	b089      	sub	sp, #36	; 0x24
 810b2c4:	af00      	add	r7, sp, #0
 810b2c6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 810b2c8:	4ba1      	ldr	r3, [pc, #644]	; (810b550 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810b2ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810b2cc:	f003 0303 	and.w	r3, r3, #3
 810b2d0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 810b2d2:	4b9f      	ldr	r3, [pc, #636]	; (810b550 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810b2d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810b2d6:	0d1b      	lsrs	r3, r3, #20
 810b2d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 810b2dc:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 810b2de:	4b9c      	ldr	r3, [pc, #624]	; (810b550 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810b2e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810b2e2:	0a1b      	lsrs	r3, r3, #8
 810b2e4:	f003 0301 	and.w	r3, r3, #1
 810b2e8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 810b2ea:	4b99      	ldr	r3, [pc, #612]	; (810b550 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810b2ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 810b2ee:	08db      	lsrs	r3, r3, #3
 810b2f0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 810b2f4:	693a      	ldr	r2, [r7, #16]
 810b2f6:	fb02 f303 	mul.w	r3, r2, r3
 810b2fa:	ee07 3a90 	vmov	s15, r3
 810b2fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810b302:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 810b306:	697b      	ldr	r3, [r7, #20]
 810b308:	2b00      	cmp	r3, #0
 810b30a:	f000 8111 	beq.w	810b530 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 810b30e:	69bb      	ldr	r3, [r7, #24]
 810b310:	2b02      	cmp	r3, #2
 810b312:	f000 8083 	beq.w	810b41c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 810b316:	69bb      	ldr	r3, [r7, #24]
 810b318:	2b02      	cmp	r3, #2
 810b31a:	f200 80a1 	bhi.w	810b460 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 810b31e:	69bb      	ldr	r3, [r7, #24]
 810b320:	2b00      	cmp	r3, #0
 810b322:	d003      	beq.n	810b32c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 810b324:	69bb      	ldr	r3, [r7, #24]
 810b326:	2b01      	cmp	r3, #1
 810b328:	d056      	beq.n	810b3d8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 810b32a:	e099      	b.n	810b460 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810b32c:	4b88      	ldr	r3, [pc, #544]	; (810b550 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810b32e:	681b      	ldr	r3, [r3, #0]
 810b330:	f003 0320 	and.w	r3, r3, #32
 810b334:	2b00      	cmp	r3, #0
 810b336:	d02d      	beq.n	810b394 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 810b338:	4b85      	ldr	r3, [pc, #532]	; (810b550 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810b33a:	681b      	ldr	r3, [r3, #0]
 810b33c:	08db      	lsrs	r3, r3, #3
 810b33e:	f003 0303 	and.w	r3, r3, #3
 810b342:	4a84      	ldr	r2, [pc, #528]	; (810b554 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 810b344:	fa22 f303 	lsr.w	r3, r2, r3
 810b348:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 810b34a:	68bb      	ldr	r3, [r7, #8]
 810b34c:	ee07 3a90 	vmov	s15, r3
 810b350:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810b354:	697b      	ldr	r3, [r7, #20]
 810b356:	ee07 3a90 	vmov	s15, r3
 810b35a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810b35e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810b362:	4b7b      	ldr	r3, [pc, #492]	; (810b550 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810b364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810b366:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810b36a:	ee07 3a90 	vmov	s15, r3
 810b36e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810b372:	ed97 6a03 	vldr	s12, [r7, #12]
 810b376:	eddf 5a78 	vldr	s11, [pc, #480]	; 810b558 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 810b37a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810b37e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810b382:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810b386:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810b38a:	ee67 7a27 	vmul.f32	s15, s14, s15
 810b38e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 810b392:	e087      	b.n	810b4a4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 810b394:	697b      	ldr	r3, [r7, #20]
 810b396:	ee07 3a90 	vmov	s15, r3
 810b39a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810b39e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 810b55c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 810b3a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810b3a6:	4b6a      	ldr	r3, [pc, #424]	; (810b550 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810b3a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810b3aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810b3ae:	ee07 3a90 	vmov	s15, r3
 810b3b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810b3b6:	ed97 6a03 	vldr	s12, [r7, #12]
 810b3ba:	eddf 5a67 	vldr	s11, [pc, #412]	; 810b558 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 810b3be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810b3c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810b3c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810b3ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810b3ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 810b3d2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 810b3d6:	e065      	b.n	810b4a4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 810b3d8:	697b      	ldr	r3, [r7, #20]
 810b3da:	ee07 3a90 	vmov	s15, r3
 810b3de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810b3e2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 810b560 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 810b3e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810b3ea:	4b59      	ldr	r3, [pc, #356]	; (810b550 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810b3ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810b3ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810b3f2:	ee07 3a90 	vmov	s15, r3
 810b3f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810b3fa:	ed97 6a03 	vldr	s12, [r7, #12]
 810b3fe:	eddf 5a56 	vldr	s11, [pc, #344]	; 810b558 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 810b402:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810b406:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810b40a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810b40e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810b412:	ee67 7a27 	vmul.f32	s15, s14, s15
 810b416:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 810b41a:	e043      	b.n	810b4a4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 810b41c:	697b      	ldr	r3, [r7, #20]
 810b41e:	ee07 3a90 	vmov	s15, r3
 810b422:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810b426:	eddf 6a4f 	vldr	s13, [pc, #316]	; 810b564 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 810b42a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810b42e:	4b48      	ldr	r3, [pc, #288]	; (810b550 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810b430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810b432:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810b436:	ee07 3a90 	vmov	s15, r3
 810b43a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810b43e:	ed97 6a03 	vldr	s12, [r7, #12]
 810b442:	eddf 5a45 	vldr	s11, [pc, #276]	; 810b558 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 810b446:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810b44a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810b44e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810b452:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810b456:	ee67 7a27 	vmul.f32	s15, s14, s15
 810b45a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 810b45e:	e021      	b.n	810b4a4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 810b460:	697b      	ldr	r3, [r7, #20]
 810b462:	ee07 3a90 	vmov	s15, r3
 810b466:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810b46a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 810b560 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 810b46e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810b472:	4b37      	ldr	r3, [pc, #220]	; (810b550 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810b474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810b476:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810b47a:	ee07 3a90 	vmov	s15, r3
 810b47e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810b482:	ed97 6a03 	vldr	s12, [r7, #12]
 810b486:	eddf 5a34 	vldr	s11, [pc, #208]	; 810b558 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 810b48a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810b48e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810b492:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810b496:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810b49a:	ee67 7a27 	vmul.f32	s15, s14, s15
 810b49e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 810b4a2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 810b4a4:	4b2a      	ldr	r3, [pc, #168]	; (810b550 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810b4a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810b4a8:	0a5b      	lsrs	r3, r3, #9
 810b4aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 810b4ae:	ee07 3a90 	vmov	s15, r3
 810b4b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810b4b6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 810b4ba:	ee37 7a87 	vadd.f32	s14, s15, s14
 810b4be:	edd7 6a07 	vldr	s13, [r7, #28]
 810b4c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810b4c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810b4ca:	ee17 2a90 	vmov	r2, s15
 810b4ce:	687b      	ldr	r3, [r7, #4]
 810b4d0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 810b4d2:	4b1f      	ldr	r3, [pc, #124]	; (810b550 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810b4d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810b4d6:	0c1b      	lsrs	r3, r3, #16
 810b4d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 810b4dc:	ee07 3a90 	vmov	s15, r3
 810b4e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810b4e4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 810b4e8:	ee37 7a87 	vadd.f32	s14, s15, s14
 810b4ec:	edd7 6a07 	vldr	s13, [r7, #28]
 810b4f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810b4f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810b4f8:	ee17 2a90 	vmov	r2, s15
 810b4fc:	687b      	ldr	r3, [r7, #4]
 810b4fe:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 810b500:	4b13      	ldr	r3, [pc, #76]	; (810b550 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810b502:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810b504:	0e1b      	lsrs	r3, r3, #24
 810b506:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 810b50a:	ee07 3a90 	vmov	s15, r3
 810b50e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810b512:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 810b516:	ee37 7a87 	vadd.f32	s14, s15, s14
 810b51a:	edd7 6a07 	vldr	s13, [r7, #28]
 810b51e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810b522:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810b526:	ee17 2a90 	vmov	r2, s15
 810b52a:	687b      	ldr	r3, [r7, #4]
 810b52c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 810b52e:	e008      	b.n	810b542 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 810b530:	687b      	ldr	r3, [r7, #4]
 810b532:	2200      	movs	r2, #0
 810b534:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 810b536:	687b      	ldr	r3, [r7, #4]
 810b538:	2200      	movs	r2, #0
 810b53a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 810b53c:	687b      	ldr	r3, [r7, #4]
 810b53e:	2200      	movs	r2, #0
 810b540:	609a      	str	r2, [r3, #8]
}
 810b542:	bf00      	nop
 810b544:	3724      	adds	r7, #36	; 0x24
 810b546:	46bd      	mov	sp, r7
 810b548:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b54c:	4770      	bx	lr
 810b54e:	bf00      	nop
 810b550:	58024400 	.word	0x58024400
 810b554:	03d09000 	.word	0x03d09000
 810b558:	46000000 	.word	0x46000000
 810b55c:	4c742400 	.word	0x4c742400
 810b560:	4a742400 	.word	0x4a742400
 810b564:	4b742400 	.word	0x4b742400

0810b568 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 810b568:	b480      	push	{r7}
 810b56a:	b089      	sub	sp, #36	; 0x24
 810b56c:	af00      	add	r7, sp, #0
 810b56e:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 810b570:	4ba0      	ldr	r3, [pc, #640]	; (810b7f4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 810b572:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810b574:	f003 0303 	and.w	r3, r3, #3
 810b578:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 810b57a:	4b9e      	ldr	r3, [pc, #632]	; (810b7f4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 810b57c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810b57e:	091b      	lsrs	r3, r3, #4
 810b580:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 810b584:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 810b586:	4b9b      	ldr	r3, [pc, #620]	; (810b7f4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 810b588:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810b58a:	f003 0301 	and.w	r3, r3, #1
 810b58e:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 810b590:	4b98      	ldr	r3, [pc, #608]	; (810b7f4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 810b592:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 810b594:	08db      	lsrs	r3, r3, #3
 810b596:	f3c3 030c 	ubfx	r3, r3, #0, #13
 810b59a:	693a      	ldr	r2, [r7, #16]
 810b59c:	fb02 f303 	mul.w	r3, r2, r3
 810b5a0:	ee07 3a90 	vmov	s15, r3
 810b5a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810b5a8:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 810b5ac:	697b      	ldr	r3, [r7, #20]
 810b5ae:	2b00      	cmp	r3, #0
 810b5b0:	f000 8111 	beq.w	810b7d6 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 810b5b4:	69bb      	ldr	r3, [r7, #24]
 810b5b6:	2b02      	cmp	r3, #2
 810b5b8:	f000 8083 	beq.w	810b6c2 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 810b5bc:	69bb      	ldr	r3, [r7, #24]
 810b5be:	2b02      	cmp	r3, #2
 810b5c0:	f200 80a1 	bhi.w	810b706 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 810b5c4:	69bb      	ldr	r3, [r7, #24]
 810b5c6:	2b00      	cmp	r3, #0
 810b5c8:	d003      	beq.n	810b5d2 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 810b5ca:	69bb      	ldr	r3, [r7, #24]
 810b5cc:	2b01      	cmp	r3, #1
 810b5ce:	d056      	beq.n	810b67e <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 810b5d0:	e099      	b.n	810b706 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810b5d2:	4b88      	ldr	r3, [pc, #544]	; (810b7f4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 810b5d4:	681b      	ldr	r3, [r3, #0]
 810b5d6:	f003 0320 	and.w	r3, r3, #32
 810b5da:	2b00      	cmp	r3, #0
 810b5dc:	d02d      	beq.n	810b63a <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 810b5de:	4b85      	ldr	r3, [pc, #532]	; (810b7f4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 810b5e0:	681b      	ldr	r3, [r3, #0]
 810b5e2:	08db      	lsrs	r3, r3, #3
 810b5e4:	f003 0303 	and.w	r3, r3, #3
 810b5e8:	4a83      	ldr	r2, [pc, #524]	; (810b7f8 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 810b5ea:	fa22 f303 	lsr.w	r3, r2, r3
 810b5ee:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 810b5f0:	68bb      	ldr	r3, [r7, #8]
 810b5f2:	ee07 3a90 	vmov	s15, r3
 810b5f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810b5fa:	697b      	ldr	r3, [r7, #20]
 810b5fc:	ee07 3a90 	vmov	s15, r3
 810b600:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810b604:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810b608:	4b7a      	ldr	r3, [pc, #488]	; (810b7f4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 810b60a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810b60c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810b610:	ee07 3a90 	vmov	s15, r3
 810b614:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810b618:	ed97 6a03 	vldr	s12, [r7, #12]
 810b61c:	eddf 5a77 	vldr	s11, [pc, #476]	; 810b7fc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 810b620:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810b624:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810b628:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810b62c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810b630:	ee67 7a27 	vmul.f32	s15, s14, s15
 810b634:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 810b638:	e087      	b.n	810b74a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 810b63a:	697b      	ldr	r3, [r7, #20]
 810b63c:	ee07 3a90 	vmov	s15, r3
 810b640:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810b644:	eddf 6a6e 	vldr	s13, [pc, #440]	; 810b800 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 810b648:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810b64c:	4b69      	ldr	r3, [pc, #420]	; (810b7f4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 810b64e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810b650:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810b654:	ee07 3a90 	vmov	s15, r3
 810b658:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810b65c:	ed97 6a03 	vldr	s12, [r7, #12]
 810b660:	eddf 5a66 	vldr	s11, [pc, #408]	; 810b7fc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 810b664:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810b668:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810b66c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810b670:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810b674:	ee67 7a27 	vmul.f32	s15, s14, s15
 810b678:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 810b67c:	e065      	b.n	810b74a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 810b67e:	697b      	ldr	r3, [r7, #20]
 810b680:	ee07 3a90 	vmov	s15, r3
 810b684:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810b688:	eddf 6a5e 	vldr	s13, [pc, #376]	; 810b804 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 810b68c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810b690:	4b58      	ldr	r3, [pc, #352]	; (810b7f4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 810b692:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810b694:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810b698:	ee07 3a90 	vmov	s15, r3
 810b69c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810b6a0:	ed97 6a03 	vldr	s12, [r7, #12]
 810b6a4:	eddf 5a55 	vldr	s11, [pc, #340]	; 810b7fc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 810b6a8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810b6ac:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810b6b0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810b6b4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810b6b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 810b6bc:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 810b6c0:	e043      	b.n	810b74a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 810b6c2:	697b      	ldr	r3, [r7, #20]
 810b6c4:	ee07 3a90 	vmov	s15, r3
 810b6c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810b6cc:	eddf 6a4e 	vldr	s13, [pc, #312]	; 810b808 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 810b6d0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810b6d4:	4b47      	ldr	r3, [pc, #284]	; (810b7f4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 810b6d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810b6d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810b6dc:	ee07 3a90 	vmov	s15, r3
 810b6e0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810b6e4:	ed97 6a03 	vldr	s12, [r7, #12]
 810b6e8:	eddf 5a44 	vldr	s11, [pc, #272]	; 810b7fc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 810b6ec:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810b6f0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810b6f4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810b6f8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810b6fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 810b700:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 810b704:	e021      	b.n	810b74a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 810b706:	697b      	ldr	r3, [r7, #20]
 810b708:	ee07 3a90 	vmov	s15, r3
 810b70c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810b710:	eddf 6a3b 	vldr	s13, [pc, #236]	; 810b800 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 810b714:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810b718:	4b36      	ldr	r3, [pc, #216]	; (810b7f4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 810b71a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810b71c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810b720:	ee07 3a90 	vmov	s15, r3
 810b724:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810b728:	ed97 6a03 	vldr	s12, [r7, #12]
 810b72c:	eddf 5a33 	vldr	s11, [pc, #204]	; 810b7fc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 810b730:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810b734:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810b738:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810b73c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810b740:	ee67 7a27 	vmul.f32	s15, s14, s15
 810b744:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 810b748:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 810b74a:	4b2a      	ldr	r3, [pc, #168]	; (810b7f4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 810b74c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810b74e:	0a5b      	lsrs	r3, r3, #9
 810b750:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 810b754:	ee07 3a90 	vmov	s15, r3
 810b758:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810b75c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 810b760:	ee37 7a87 	vadd.f32	s14, s15, s14
 810b764:	edd7 6a07 	vldr	s13, [r7, #28]
 810b768:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810b76c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810b770:	ee17 2a90 	vmov	r2, s15
 810b774:	687b      	ldr	r3, [r7, #4]
 810b776:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 810b778:	4b1e      	ldr	r3, [pc, #120]	; (810b7f4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 810b77a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810b77c:	0c1b      	lsrs	r3, r3, #16
 810b77e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 810b782:	ee07 3a90 	vmov	s15, r3
 810b786:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810b78a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 810b78e:	ee37 7a87 	vadd.f32	s14, s15, s14
 810b792:	edd7 6a07 	vldr	s13, [r7, #28]
 810b796:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810b79a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810b79e:	ee17 2a90 	vmov	r2, s15
 810b7a2:	687b      	ldr	r3, [r7, #4]
 810b7a4:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 810b7a6:	4b13      	ldr	r3, [pc, #76]	; (810b7f4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 810b7a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810b7aa:	0e1b      	lsrs	r3, r3, #24
 810b7ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 810b7b0:	ee07 3a90 	vmov	s15, r3
 810b7b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810b7b8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 810b7bc:	ee37 7a87 	vadd.f32	s14, s15, s14
 810b7c0:	edd7 6a07 	vldr	s13, [r7, #28]
 810b7c4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810b7c8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810b7cc:	ee17 2a90 	vmov	r2, s15
 810b7d0:	687b      	ldr	r3, [r7, #4]
 810b7d2:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 810b7d4:	e008      	b.n	810b7e8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 810b7d6:	687b      	ldr	r3, [r7, #4]
 810b7d8:	2200      	movs	r2, #0
 810b7da:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 810b7dc:	687b      	ldr	r3, [r7, #4]
 810b7de:	2200      	movs	r2, #0
 810b7e0:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 810b7e2:	687b      	ldr	r3, [r7, #4]
 810b7e4:	2200      	movs	r2, #0
 810b7e6:	609a      	str	r2, [r3, #8]
}
 810b7e8:	bf00      	nop
 810b7ea:	3724      	adds	r7, #36	; 0x24
 810b7ec:	46bd      	mov	sp, r7
 810b7ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b7f2:	4770      	bx	lr
 810b7f4:	58024400 	.word	0x58024400
 810b7f8:	03d09000 	.word	0x03d09000
 810b7fc:	46000000 	.word	0x46000000
 810b800:	4c742400 	.word	0x4c742400
 810b804:	4a742400 	.word	0x4a742400
 810b808:	4b742400 	.word	0x4b742400

0810b80c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 810b80c:	b580      	push	{r7, lr}
 810b80e:	b084      	sub	sp, #16
 810b810:	af00      	add	r7, sp, #0
 810b812:	6078      	str	r0, [r7, #4]
 810b814:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 810b816:	2300      	movs	r3, #0
 810b818:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 810b81a:	4b54      	ldr	r3, [pc, #336]	; (810b96c <RCCEx_PLL2_Config+0x160>)
 810b81c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810b81e:	f003 0303 	and.w	r3, r3, #3
 810b822:	2b03      	cmp	r3, #3
 810b824:	d101      	bne.n	810b82a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 810b826:	2301      	movs	r3, #1
 810b828:	e09b      	b.n	810b962 <RCCEx_PLL2_Config+0x156>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 810b82a:	4b50      	ldr	r3, [pc, #320]	; (810b96c <RCCEx_PLL2_Config+0x160>)
 810b82c:	681b      	ldr	r3, [r3, #0]
 810b82e:	4a4f      	ldr	r2, [pc, #316]	; (810b96c <RCCEx_PLL2_Config+0x160>)
 810b830:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 810b834:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 810b836:	f7f7 f8df 	bl	81029f8 <HAL_GetTick>
 810b83a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 810b83c:	e008      	b.n	810b850 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 810b83e:	f7f7 f8db 	bl	81029f8 <HAL_GetTick>
 810b842:	4602      	mov	r2, r0
 810b844:	68bb      	ldr	r3, [r7, #8]
 810b846:	1ad3      	subs	r3, r2, r3
 810b848:	2b02      	cmp	r3, #2
 810b84a:	d901      	bls.n	810b850 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 810b84c:	2303      	movs	r3, #3
 810b84e:	e088      	b.n	810b962 <RCCEx_PLL2_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 810b850:	4b46      	ldr	r3, [pc, #280]	; (810b96c <RCCEx_PLL2_Config+0x160>)
 810b852:	681b      	ldr	r3, [r3, #0]
 810b854:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 810b858:	2b00      	cmp	r3, #0
 810b85a:	d1f0      	bne.n	810b83e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 810b85c:	4b43      	ldr	r3, [pc, #268]	; (810b96c <RCCEx_PLL2_Config+0x160>)
 810b85e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810b860:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 810b864:	687b      	ldr	r3, [r7, #4]
 810b866:	681b      	ldr	r3, [r3, #0]
 810b868:	031b      	lsls	r3, r3, #12
 810b86a:	4940      	ldr	r1, [pc, #256]	; (810b96c <RCCEx_PLL2_Config+0x160>)
 810b86c:	4313      	orrs	r3, r2
 810b86e:	628b      	str	r3, [r1, #40]	; 0x28
 810b870:	687b      	ldr	r3, [r7, #4]
 810b872:	685b      	ldr	r3, [r3, #4]
 810b874:	3b01      	subs	r3, #1
 810b876:	f3c3 0208 	ubfx	r2, r3, #0, #9
 810b87a:	687b      	ldr	r3, [r7, #4]
 810b87c:	689b      	ldr	r3, [r3, #8]
 810b87e:	3b01      	subs	r3, #1
 810b880:	025b      	lsls	r3, r3, #9
 810b882:	b29b      	uxth	r3, r3
 810b884:	431a      	orrs	r2, r3
 810b886:	687b      	ldr	r3, [r7, #4]
 810b888:	68db      	ldr	r3, [r3, #12]
 810b88a:	3b01      	subs	r3, #1
 810b88c:	041b      	lsls	r3, r3, #16
 810b88e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 810b892:	431a      	orrs	r2, r3
 810b894:	687b      	ldr	r3, [r7, #4]
 810b896:	691b      	ldr	r3, [r3, #16]
 810b898:	3b01      	subs	r3, #1
 810b89a:	061b      	lsls	r3, r3, #24
 810b89c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 810b8a0:	4932      	ldr	r1, [pc, #200]	; (810b96c <RCCEx_PLL2_Config+0x160>)
 810b8a2:	4313      	orrs	r3, r2
 810b8a4:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 810b8a6:	4b31      	ldr	r3, [pc, #196]	; (810b96c <RCCEx_PLL2_Config+0x160>)
 810b8a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810b8aa:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 810b8ae:	687b      	ldr	r3, [r7, #4]
 810b8b0:	695b      	ldr	r3, [r3, #20]
 810b8b2:	492e      	ldr	r1, [pc, #184]	; (810b96c <RCCEx_PLL2_Config+0x160>)
 810b8b4:	4313      	orrs	r3, r2
 810b8b6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 810b8b8:	4b2c      	ldr	r3, [pc, #176]	; (810b96c <RCCEx_PLL2_Config+0x160>)
 810b8ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810b8bc:	f023 0220 	bic.w	r2, r3, #32
 810b8c0:	687b      	ldr	r3, [r7, #4]
 810b8c2:	699b      	ldr	r3, [r3, #24]
 810b8c4:	4929      	ldr	r1, [pc, #164]	; (810b96c <RCCEx_PLL2_Config+0x160>)
 810b8c6:	4313      	orrs	r3, r2
 810b8c8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 810b8ca:	4b28      	ldr	r3, [pc, #160]	; (810b96c <RCCEx_PLL2_Config+0x160>)
 810b8cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810b8ce:	4a27      	ldr	r2, [pc, #156]	; (810b96c <RCCEx_PLL2_Config+0x160>)
 810b8d0:	f023 0310 	bic.w	r3, r3, #16
 810b8d4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 810b8d6:	4b25      	ldr	r3, [pc, #148]	; (810b96c <RCCEx_PLL2_Config+0x160>)
 810b8d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810b8da:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 810b8de:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 810b8e2:	687a      	ldr	r2, [r7, #4]
 810b8e4:	69d2      	ldr	r2, [r2, #28]
 810b8e6:	00d2      	lsls	r2, r2, #3
 810b8e8:	4920      	ldr	r1, [pc, #128]	; (810b96c <RCCEx_PLL2_Config+0x160>)
 810b8ea:	4313      	orrs	r3, r2
 810b8ec:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 810b8ee:	4b1f      	ldr	r3, [pc, #124]	; (810b96c <RCCEx_PLL2_Config+0x160>)
 810b8f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810b8f2:	4a1e      	ldr	r2, [pc, #120]	; (810b96c <RCCEx_PLL2_Config+0x160>)
 810b8f4:	f043 0310 	orr.w	r3, r3, #16
 810b8f8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 810b8fa:	683b      	ldr	r3, [r7, #0]
 810b8fc:	2b00      	cmp	r3, #0
 810b8fe:	d106      	bne.n	810b90e <RCCEx_PLL2_Config+0x102>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 810b900:	4b1a      	ldr	r3, [pc, #104]	; (810b96c <RCCEx_PLL2_Config+0x160>)
 810b902:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810b904:	4a19      	ldr	r2, [pc, #100]	; (810b96c <RCCEx_PLL2_Config+0x160>)
 810b906:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 810b90a:	62d3      	str	r3, [r2, #44]	; 0x2c
 810b90c:	e00f      	b.n	810b92e <RCCEx_PLL2_Config+0x122>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 810b90e:	683b      	ldr	r3, [r7, #0]
 810b910:	2b01      	cmp	r3, #1
 810b912:	d106      	bne.n	810b922 <RCCEx_PLL2_Config+0x116>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 810b914:	4b15      	ldr	r3, [pc, #84]	; (810b96c <RCCEx_PLL2_Config+0x160>)
 810b916:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810b918:	4a14      	ldr	r2, [pc, #80]	; (810b96c <RCCEx_PLL2_Config+0x160>)
 810b91a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 810b91e:	62d3      	str	r3, [r2, #44]	; 0x2c
 810b920:	e005      	b.n	810b92e <RCCEx_PLL2_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 810b922:	4b12      	ldr	r3, [pc, #72]	; (810b96c <RCCEx_PLL2_Config+0x160>)
 810b924:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810b926:	4a11      	ldr	r2, [pc, #68]	; (810b96c <RCCEx_PLL2_Config+0x160>)
 810b928:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 810b92c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 810b92e:	4b0f      	ldr	r3, [pc, #60]	; (810b96c <RCCEx_PLL2_Config+0x160>)
 810b930:	681b      	ldr	r3, [r3, #0]
 810b932:	4a0e      	ldr	r2, [pc, #56]	; (810b96c <RCCEx_PLL2_Config+0x160>)
 810b934:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 810b938:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 810b93a:	f7f7 f85d 	bl	81029f8 <HAL_GetTick>
 810b93e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 810b940:	e008      	b.n	810b954 <RCCEx_PLL2_Config+0x148>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 810b942:	f7f7 f859 	bl	81029f8 <HAL_GetTick>
 810b946:	4602      	mov	r2, r0
 810b948:	68bb      	ldr	r3, [r7, #8]
 810b94a:	1ad3      	subs	r3, r2, r3
 810b94c:	2b02      	cmp	r3, #2
 810b94e:	d901      	bls.n	810b954 <RCCEx_PLL2_Config+0x148>
      {
        return HAL_TIMEOUT;
 810b950:	2303      	movs	r3, #3
 810b952:	e006      	b.n	810b962 <RCCEx_PLL2_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 810b954:	4b05      	ldr	r3, [pc, #20]	; (810b96c <RCCEx_PLL2_Config+0x160>)
 810b956:	681b      	ldr	r3, [r3, #0]
 810b958:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 810b95c:	2b00      	cmp	r3, #0
 810b95e:	d0f0      	beq.n	810b942 <RCCEx_PLL2_Config+0x136>
    }

  }


  return status;
 810b960:	7bfb      	ldrb	r3, [r7, #15]
}
 810b962:	4618      	mov	r0, r3
 810b964:	3710      	adds	r7, #16
 810b966:	46bd      	mov	sp, r7
 810b968:	bd80      	pop	{r7, pc}
 810b96a:	bf00      	nop
 810b96c:	58024400 	.word	0x58024400

0810b970 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 810b970:	b580      	push	{r7, lr}
 810b972:	b084      	sub	sp, #16
 810b974:	af00      	add	r7, sp, #0
 810b976:	6078      	str	r0, [r7, #4]
 810b978:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 810b97a:	2300      	movs	r3, #0
 810b97c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 810b97e:	4b54      	ldr	r3, [pc, #336]	; (810bad0 <RCCEx_PLL3_Config+0x160>)
 810b980:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810b982:	f003 0303 	and.w	r3, r3, #3
 810b986:	2b03      	cmp	r3, #3
 810b988:	d101      	bne.n	810b98e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 810b98a:	2301      	movs	r3, #1
 810b98c:	e09b      	b.n	810bac6 <RCCEx_PLL3_Config+0x156>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 810b98e:	4b50      	ldr	r3, [pc, #320]	; (810bad0 <RCCEx_PLL3_Config+0x160>)
 810b990:	681b      	ldr	r3, [r3, #0]
 810b992:	4a4f      	ldr	r2, [pc, #316]	; (810bad0 <RCCEx_PLL3_Config+0x160>)
 810b994:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 810b998:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 810b99a:	f7f7 f82d 	bl	81029f8 <HAL_GetTick>
 810b99e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 810b9a0:	e008      	b.n	810b9b4 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 810b9a2:	f7f7 f829 	bl	81029f8 <HAL_GetTick>
 810b9a6:	4602      	mov	r2, r0
 810b9a8:	68bb      	ldr	r3, [r7, #8]
 810b9aa:	1ad3      	subs	r3, r2, r3
 810b9ac:	2b02      	cmp	r3, #2
 810b9ae:	d901      	bls.n	810b9b4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 810b9b0:	2303      	movs	r3, #3
 810b9b2:	e088      	b.n	810bac6 <RCCEx_PLL3_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 810b9b4:	4b46      	ldr	r3, [pc, #280]	; (810bad0 <RCCEx_PLL3_Config+0x160>)
 810b9b6:	681b      	ldr	r3, [r3, #0]
 810b9b8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 810b9bc:	2b00      	cmp	r3, #0
 810b9be:	d1f0      	bne.n	810b9a2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 810b9c0:	4b43      	ldr	r3, [pc, #268]	; (810bad0 <RCCEx_PLL3_Config+0x160>)
 810b9c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810b9c4:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 810b9c8:	687b      	ldr	r3, [r7, #4]
 810b9ca:	681b      	ldr	r3, [r3, #0]
 810b9cc:	051b      	lsls	r3, r3, #20
 810b9ce:	4940      	ldr	r1, [pc, #256]	; (810bad0 <RCCEx_PLL3_Config+0x160>)
 810b9d0:	4313      	orrs	r3, r2
 810b9d2:	628b      	str	r3, [r1, #40]	; 0x28
 810b9d4:	687b      	ldr	r3, [r7, #4]
 810b9d6:	685b      	ldr	r3, [r3, #4]
 810b9d8:	3b01      	subs	r3, #1
 810b9da:	f3c3 0208 	ubfx	r2, r3, #0, #9
 810b9de:	687b      	ldr	r3, [r7, #4]
 810b9e0:	689b      	ldr	r3, [r3, #8]
 810b9e2:	3b01      	subs	r3, #1
 810b9e4:	025b      	lsls	r3, r3, #9
 810b9e6:	b29b      	uxth	r3, r3
 810b9e8:	431a      	orrs	r2, r3
 810b9ea:	687b      	ldr	r3, [r7, #4]
 810b9ec:	68db      	ldr	r3, [r3, #12]
 810b9ee:	3b01      	subs	r3, #1
 810b9f0:	041b      	lsls	r3, r3, #16
 810b9f2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 810b9f6:	431a      	orrs	r2, r3
 810b9f8:	687b      	ldr	r3, [r7, #4]
 810b9fa:	691b      	ldr	r3, [r3, #16]
 810b9fc:	3b01      	subs	r3, #1
 810b9fe:	061b      	lsls	r3, r3, #24
 810ba00:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 810ba04:	4932      	ldr	r1, [pc, #200]	; (810bad0 <RCCEx_PLL3_Config+0x160>)
 810ba06:	4313      	orrs	r3, r2
 810ba08:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 810ba0a:	4b31      	ldr	r3, [pc, #196]	; (810bad0 <RCCEx_PLL3_Config+0x160>)
 810ba0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810ba0e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 810ba12:	687b      	ldr	r3, [r7, #4]
 810ba14:	695b      	ldr	r3, [r3, #20]
 810ba16:	492e      	ldr	r1, [pc, #184]	; (810bad0 <RCCEx_PLL3_Config+0x160>)
 810ba18:	4313      	orrs	r3, r2
 810ba1a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 810ba1c:	4b2c      	ldr	r3, [pc, #176]	; (810bad0 <RCCEx_PLL3_Config+0x160>)
 810ba1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810ba20:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 810ba24:	687b      	ldr	r3, [r7, #4]
 810ba26:	699b      	ldr	r3, [r3, #24]
 810ba28:	4929      	ldr	r1, [pc, #164]	; (810bad0 <RCCEx_PLL3_Config+0x160>)
 810ba2a:	4313      	orrs	r3, r2
 810ba2c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 810ba2e:	4b28      	ldr	r3, [pc, #160]	; (810bad0 <RCCEx_PLL3_Config+0x160>)
 810ba30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810ba32:	4a27      	ldr	r2, [pc, #156]	; (810bad0 <RCCEx_PLL3_Config+0x160>)
 810ba34:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 810ba38:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 810ba3a:	4b25      	ldr	r3, [pc, #148]	; (810bad0 <RCCEx_PLL3_Config+0x160>)
 810ba3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 810ba3e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 810ba42:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 810ba46:	687a      	ldr	r2, [r7, #4]
 810ba48:	69d2      	ldr	r2, [r2, #28]
 810ba4a:	00d2      	lsls	r2, r2, #3
 810ba4c:	4920      	ldr	r1, [pc, #128]	; (810bad0 <RCCEx_PLL3_Config+0x160>)
 810ba4e:	4313      	orrs	r3, r2
 810ba50:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 810ba52:	4b1f      	ldr	r3, [pc, #124]	; (810bad0 <RCCEx_PLL3_Config+0x160>)
 810ba54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810ba56:	4a1e      	ldr	r2, [pc, #120]	; (810bad0 <RCCEx_PLL3_Config+0x160>)
 810ba58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 810ba5c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 810ba5e:	683b      	ldr	r3, [r7, #0]
 810ba60:	2b00      	cmp	r3, #0
 810ba62:	d106      	bne.n	810ba72 <RCCEx_PLL3_Config+0x102>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 810ba64:	4b1a      	ldr	r3, [pc, #104]	; (810bad0 <RCCEx_PLL3_Config+0x160>)
 810ba66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810ba68:	4a19      	ldr	r2, [pc, #100]	; (810bad0 <RCCEx_PLL3_Config+0x160>)
 810ba6a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 810ba6e:	62d3      	str	r3, [r2, #44]	; 0x2c
 810ba70:	e00f      	b.n	810ba92 <RCCEx_PLL3_Config+0x122>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 810ba72:	683b      	ldr	r3, [r7, #0]
 810ba74:	2b01      	cmp	r3, #1
 810ba76:	d106      	bne.n	810ba86 <RCCEx_PLL3_Config+0x116>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 810ba78:	4b15      	ldr	r3, [pc, #84]	; (810bad0 <RCCEx_PLL3_Config+0x160>)
 810ba7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810ba7c:	4a14      	ldr	r2, [pc, #80]	; (810bad0 <RCCEx_PLL3_Config+0x160>)
 810ba7e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 810ba82:	62d3      	str	r3, [r2, #44]	; 0x2c
 810ba84:	e005      	b.n	810ba92 <RCCEx_PLL3_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 810ba86:	4b12      	ldr	r3, [pc, #72]	; (810bad0 <RCCEx_PLL3_Config+0x160>)
 810ba88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810ba8a:	4a11      	ldr	r2, [pc, #68]	; (810bad0 <RCCEx_PLL3_Config+0x160>)
 810ba8c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 810ba90:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 810ba92:	4b0f      	ldr	r3, [pc, #60]	; (810bad0 <RCCEx_PLL3_Config+0x160>)
 810ba94:	681b      	ldr	r3, [r3, #0]
 810ba96:	4a0e      	ldr	r2, [pc, #56]	; (810bad0 <RCCEx_PLL3_Config+0x160>)
 810ba98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 810ba9c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 810ba9e:	f7f6 ffab 	bl	81029f8 <HAL_GetTick>
 810baa2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 810baa4:	e008      	b.n	810bab8 <RCCEx_PLL3_Config+0x148>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 810baa6:	f7f6 ffa7 	bl	81029f8 <HAL_GetTick>
 810baaa:	4602      	mov	r2, r0
 810baac:	68bb      	ldr	r3, [r7, #8]
 810baae:	1ad3      	subs	r3, r2, r3
 810bab0:	2b02      	cmp	r3, #2
 810bab2:	d901      	bls.n	810bab8 <RCCEx_PLL3_Config+0x148>
      {
        return HAL_TIMEOUT;
 810bab4:	2303      	movs	r3, #3
 810bab6:	e006      	b.n	810bac6 <RCCEx_PLL3_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 810bab8:	4b05      	ldr	r3, [pc, #20]	; (810bad0 <RCCEx_PLL3_Config+0x160>)
 810baba:	681b      	ldr	r3, [r3, #0]
 810babc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 810bac0:	2b00      	cmp	r3, #0
 810bac2:	d0f0      	beq.n	810baa6 <RCCEx_PLL3_Config+0x136>
    }

  }


  return status;
 810bac4:	7bfb      	ldrb	r3, [r7, #15]
}
 810bac6:	4618      	mov	r0, r3
 810bac8:	3710      	adds	r7, #16
 810baca:	46bd      	mov	sp, r7
 810bacc:	bd80      	pop	{r7, pc}
 810bace:	bf00      	nop
 810bad0:	58024400 	.word	0x58024400

0810bad4 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 810bad4:	b580      	push	{r7, lr}
 810bad6:	b08a      	sub	sp, #40	; 0x28
 810bad8:	af00      	add	r7, sp, #0
 810bada:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 810badc:	687b      	ldr	r3, [r7, #4]
 810bade:	2b00      	cmp	r3, #0
 810bae0:	d101      	bne.n	810bae6 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 810bae2:	2301      	movs	r3, #1
 810bae4:	e07c      	b.n	810bbe0 <HAL_SD_Init+0x10c>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 810bae6:	687b      	ldr	r3, [r7, #4]
 810bae8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 810baec:	b2db      	uxtb	r3, r3
 810baee:	2b00      	cmp	r3, #0
 810baf0:	d10c      	bne.n	810bb0c <HAL_SD_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 810baf2:	687b      	ldr	r3, [r7, #4]
 810baf4:	2200      	movs	r2, #0
 810baf6:	771a      	strb	r2, [r3, #28]

#if (USE_SD_TRANSCEIVER != 0U)
    /* Force  SDMMC_TRANSCEIVER_PRESENT for Legacy usage */
    if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_UNKNOWN)
 810baf8:	687b      	ldr	r3, [r7, #4]
 810bafa:	699b      	ldr	r3, [r3, #24]
 810bafc:	2b00      	cmp	r3, #0
 810bafe:	d102      	bne.n	810bb06 <HAL_SD_Init+0x32>
    {
      hsd->Init.TranceiverPresent = SDMMC_TRANSCEIVER_PRESENT;
 810bb00:	687b      	ldr	r3, [r7, #4]
 810bb02:	2202      	movs	r2, #2
 810bb04:	619a      	str	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 810bb06:	6878      	ldr	r0, [r7, #4]
 810bb08:	f7f6 f85e 	bl	8101bc8 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 810bb0c:	687b      	ldr	r3, [r7, #4]
 810bb0e:	2203      	movs	r2, #3
 810bb10:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 810bb14:	6878      	ldr	r0, [r7, #4]
 810bb16:	f000 f867 	bl	810bbe8 <HAL_SD_InitCard>
 810bb1a:	4603      	mov	r3, r0
 810bb1c:	2b00      	cmp	r3, #0
 810bb1e:	d001      	beq.n	810bb24 <HAL_SD_Init+0x50>
  {
    return HAL_ERROR;
 810bb20:	2301      	movs	r3, #1
 810bb22:	e05d      	b.n	810bbe0 <HAL_SD_Init+0x10c>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 810bb24:	f107 0308 	add.w	r3, r7, #8
 810bb28:	4619      	mov	r1, r3
 810bb2a:	6878      	ldr	r0, [r7, #4]
 810bb2c:	f000 fdbe 	bl	810c6ac <HAL_SD_GetCardStatus>
 810bb30:	4603      	mov	r3, r0
 810bb32:	2b00      	cmp	r3, #0
 810bb34:	d001      	beq.n	810bb3a <HAL_SD_Init+0x66>
  {
    return HAL_ERROR;
 810bb36:	2301      	movs	r3, #1
 810bb38:	e052      	b.n	810bbe0 <HAL_SD_Init+0x10c>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 810bb3a:	7e3b      	ldrb	r3, [r7, #24]
 810bb3c:	b2db      	uxtb	r3, r3
 810bb3e:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 810bb40:	7e7b      	ldrb	r3, [r7, #25]
 810bb42:	b2db      	uxtb	r3, r3
 810bb44:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 810bb46:	687b      	ldr	r3, [r7, #4]
 810bb48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810bb4a:	2b01      	cmp	r3, #1
 810bb4c:	d10a      	bne.n	810bb64 <HAL_SD_Init+0x90>
 810bb4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810bb50:	2b00      	cmp	r3, #0
 810bb52:	d102      	bne.n	810bb5a <HAL_SD_Init+0x86>
 810bb54:	6a3b      	ldr	r3, [r7, #32]
 810bb56:	2b00      	cmp	r3, #0
 810bb58:	d004      	beq.n	810bb64 <HAL_SD_Init+0x90>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 810bb5a:	687b      	ldr	r3, [r7, #4]
 810bb5c:	f44f 7200 	mov.w	r2, #512	; 0x200
 810bb60:	65da      	str	r2, [r3, #92]	; 0x5c
 810bb62:	e00b      	b.n	810bb7c <HAL_SD_Init+0xa8>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 810bb64:	687b      	ldr	r3, [r7, #4]
 810bb66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810bb68:	2b01      	cmp	r3, #1
 810bb6a:	d104      	bne.n	810bb76 <HAL_SD_Init+0xa2>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 810bb6c:	687b      	ldr	r3, [r7, #4]
 810bb6e:	f44f 7280 	mov.w	r2, #256	; 0x100
 810bb72:	65da      	str	r2, [r3, #92]	; 0x5c
 810bb74:	e002      	b.n	810bb7c <HAL_SD_Init+0xa8>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 810bb76:	687b      	ldr	r3, [r7, #4]
 810bb78:	2200      	movs	r2, #0
 810bb7a:	65da      	str	r2, [r3, #92]	; 0x5c
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 810bb7c:	687b      	ldr	r3, [r7, #4]
 810bb7e:	68db      	ldr	r3, [r3, #12]
 810bb80:	4619      	mov	r1, r3
 810bb82:	6878      	ldr	r0, [r7, #4]
 810bb84:	f000 fe74 	bl	810c870 <HAL_SD_ConfigWideBusOperation>
 810bb88:	4603      	mov	r3, r0
 810bb8a:	2b00      	cmp	r3, #0
 810bb8c:	d001      	beq.n	810bb92 <HAL_SD_Init+0xbe>
  {
    return HAL_ERROR;
 810bb8e:	2301      	movs	r3, #1
 810bb90:	e026      	b.n	810bbe0 <HAL_SD_Init+0x10c>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 810bb92:	f7f6 ff31 	bl	81029f8 <HAL_GetTick>
 810bb96:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 810bb98:	e011      	b.n	810bbbe <HAL_SD_Init+0xea>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 810bb9a:	f7f6 ff2d 	bl	81029f8 <HAL_GetTick>
 810bb9e:	4602      	mov	r2, r0
 810bba0:	69fb      	ldr	r3, [r7, #28]
 810bba2:	1ad3      	subs	r3, r2, r3
 810bba4:	f1b3 3fff 	cmp.w	r3, #4294967295
 810bba8:	d109      	bne.n	810bbbe <HAL_SD_Init+0xea>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 810bbaa:	687b      	ldr	r3, [r7, #4]
 810bbac:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 810bbb0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 810bbb2:	687b      	ldr	r3, [r7, #4]
 810bbb4:	2201      	movs	r2, #1
 810bbb6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_TIMEOUT;
 810bbba:	2303      	movs	r3, #3
 810bbbc:	e010      	b.n	810bbe0 <HAL_SD_Init+0x10c>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 810bbbe:	6878      	ldr	r0, [r7, #4]
 810bbc0:	f000 ff6a 	bl	810ca98 <HAL_SD_GetCardState>
 810bbc4:	4603      	mov	r3, r0
 810bbc6:	2b04      	cmp	r3, #4
 810bbc8:	d1e7      	bne.n	810bb9a <HAL_SD_Init+0xc6>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 810bbca:	687b      	ldr	r3, [r7, #4]
 810bbcc:	2200      	movs	r2, #0
 810bbce:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 810bbd0:	687b      	ldr	r3, [r7, #4]
 810bbd2:	2200      	movs	r2, #0
 810bbd4:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 810bbd6:	687b      	ldr	r3, [r7, #4]
 810bbd8:	2201      	movs	r2, #1
 810bbda:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 810bbde:	2300      	movs	r3, #0
}
 810bbe0:	4618      	mov	r0, r3
 810bbe2:	3728      	adds	r7, #40	; 0x28
 810bbe4:	46bd      	mov	sp, r7
 810bbe6:	bd80      	pop	{r7, pc}

0810bbe8 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 810bbe8:	b5b0      	push	{r4, r5, r7, lr}
 810bbea:	b08e      	sub	sp, #56	; 0x38
 810bbec:	af04      	add	r7, sp, #16
 810bbee:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 810bbf0:	2300      	movs	r3, #0
 810bbf2:	60bb      	str	r3, [r7, #8]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 810bbf4:	2300      	movs	r3, #0
 810bbf6:	60fb      	str	r3, [r7, #12]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 810bbf8:	2300      	movs	r3, #0
 810bbfa:	613b      	str	r3, [r7, #16]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 810bbfc:	2300      	movs	r3, #0
 810bbfe:	617b      	str	r3, [r7, #20]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 810bc00:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 810bc04:	f7fe fd20 	bl	810a648 <HAL_RCCEx_GetPeriphCLKFreq>
 810bc08:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 810bc0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810bc0c:	2b00      	cmp	r3, #0
 810bc0e:	d109      	bne.n	810bc24 <HAL_SD_InitCard+0x3c>
  {
    hsd->State = HAL_SD_STATE_READY;
 810bc10:	687b      	ldr	r3, [r7, #4]
 810bc12:	2201      	movs	r2, #1
 810bc14:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 810bc18:	687b      	ldr	r3, [r7, #4]
 810bc1a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 810bc1e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 810bc20:	2301      	movs	r3, #1
 810bc22:	e079      	b.n	810bd18 <HAL_SD_InitCard+0x130>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 810bc24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810bc26:	0a1b      	lsrs	r3, r3, #8
 810bc28:	4a3d      	ldr	r2, [pc, #244]	; (810bd20 <HAL_SD_InitCard+0x138>)
 810bc2a:	fba2 2303 	umull	r2, r3, r2, r3
 810bc2e:	091b      	lsrs	r3, r3, #4
 810bc30:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
  Init.TranceiverPresent = hsd->Init.TranceiverPresent;
 810bc32:	687b      	ldr	r3, [r7, #4]
 810bc34:	699b      	ldr	r3, [r3, #24]
 810bc36:	61fb      	str	r3, [r7, #28]

  if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 810bc38:	687b      	ldr	r3, [r7, #4]
 810bc3a:	699b      	ldr	r3, [r3, #24]
 810bc3c:	2b02      	cmp	r3, #2
 810bc3e:	d107      	bne.n	810bc50 <HAL_SD_InitCard+0x68>
  {
    /* Set Transceiver polarity */
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
 810bc40:	687b      	ldr	r3, [r7, #4]
 810bc42:	681b      	ldr	r3, [r3, #0]
 810bc44:	681a      	ldr	r2, [r3, #0]
 810bc46:	687b      	ldr	r3, [r7, #4]
 810bc48:	681b      	ldr	r3, [r3, #0]
 810bc4a:	f042 0210 	orr.w	r2, r2, #16
 810bc4e:	601a      	str	r2, [r3, #0]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 810bc50:	687b      	ldr	r3, [r7, #4]
 810bc52:	681d      	ldr	r5, [r3, #0]
 810bc54:	466c      	mov	r4, sp
 810bc56:	f107 0314 	add.w	r3, r7, #20
 810bc5a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 810bc5e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 810bc62:	f107 0308 	add.w	r3, r7, #8
 810bc66:	cb0e      	ldmia	r3, {r1, r2, r3}
 810bc68:	4628      	mov	r0, r5
 810bc6a:	f004 ff29 	bl	8110ac0 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 810bc6e:	687b      	ldr	r3, [r7, #4]
 810bc70:	681b      	ldr	r3, [r3, #0]
 810bc72:	4618      	mov	r0, r3
 810bc74:	f004 ff6c 	bl	8110b50 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 810bc78:	69bb      	ldr	r3, [r7, #24]
 810bc7a:	005b      	lsls	r3, r3, #1
 810bc7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 810bc7e:	fbb2 f3f3 	udiv	r3, r2, r3
 810bc82:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 810bc84:	4a27      	ldr	r2, [pc, #156]	; (810bd24 <HAL_SD_InitCard+0x13c>)
 810bc86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810bc88:	fbb2 f3f3 	udiv	r3, r2, r3
 810bc8c:	3301      	adds	r3, #1
 810bc8e:	4618      	mov	r0, r3
 810bc90:	f7f6 febe 	bl	8102a10 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 810bc94:	6878      	ldr	r0, [r7, #4]
 810bc96:	f000 ffdb 	bl	810cc50 <SD_PowerON>
 810bc9a:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 810bc9c:	6a3b      	ldr	r3, [r7, #32]
 810bc9e:	2b00      	cmp	r3, #0
 810bca0:	d00b      	beq.n	810bcba <HAL_SD_InitCard+0xd2>
  {
    hsd->State = HAL_SD_STATE_READY;
 810bca2:	687b      	ldr	r3, [r7, #4]
 810bca4:	2201      	movs	r2, #1
 810bca6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 810bcaa:	687b      	ldr	r3, [r7, #4]
 810bcac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 810bcae:	6a3b      	ldr	r3, [r7, #32]
 810bcb0:	431a      	orrs	r2, r3
 810bcb2:	687b      	ldr	r3, [r7, #4]
 810bcb4:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 810bcb6:	2301      	movs	r3, #1
 810bcb8:	e02e      	b.n	810bd18 <HAL_SD_InitCard+0x130>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 810bcba:	6878      	ldr	r0, [r7, #4]
 810bcbc:	f000 ff0c 	bl	810cad8 <SD_InitCard>
 810bcc0:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 810bcc2:	6a3b      	ldr	r3, [r7, #32]
 810bcc4:	2b00      	cmp	r3, #0
 810bcc6:	d00b      	beq.n	810bce0 <HAL_SD_InitCard+0xf8>
  {
    hsd->State = HAL_SD_STATE_READY;
 810bcc8:	687b      	ldr	r3, [r7, #4]
 810bcca:	2201      	movs	r2, #1
 810bccc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 810bcd0:	687b      	ldr	r3, [r7, #4]
 810bcd2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 810bcd4:	6a3b      	ldr	r3, [r7, #32]
 810bcd6:	431a      	orrs	r2, r3
 810bcd8:	687b      	ldr	r3, [r7, #4]
 810bcda:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 810bcdc:	2301      	movs	r3, #1
 810bcde:	e01b      	b.n	810bd18 <HAL_SD_InitCard+0x130>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 810bce0:	687b      	ldr	r3, [r7, #4]
 810bce2:	681b      	ldr	r3, [r3, #0]
 810bce4:	f44f 7100 	mov.w	r1, #512	; 0x200
 810bce8:	4618      	mov	r0, r3
 810bcea:	f004 ffc7 	bl	8110c7c <SDMMC_CmdBlockLength>
 810bcee:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 810bcf0:	6a3b      	ldr	r3, [r7, #32]
 810bcf2:	2b00      	cmp	r3, #0
 810bcf4:	d00f      	beq.n	810bd16 <HAL_SD_InitCard+0x12e>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 810bcf6:	687b      	ldr	r3, [r7, #4]
 810bcf8:	681b      	ldr	r3, [r3, #0]
 810bcfa:	4a0b      	ldr	r2, [pc, #44]	; (810bd28 <HAL_SD_InitCard+0x140>)
 810bcfc:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 810bcfe:	687b      	ldr	r3, [r7, #4]
 810bd00:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 810bd02:	6a3b      	ldr	r3, [r7, #32]
 810bd04:	431a      	orrs	r2, r3
 810bd06:	687b      	ldr	r3, [r7, #4]
 810bd08:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 810bd0a:	687b      	ldr	r3, [r7, #4]
 810bd0c:	2201      	movs	r2, #1
 810bd0e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 810bd12:	2301      	movs	r3, #1
 810bd14:	e000      	b.n	810bd18 <HAL_SD_InitCard+0x130>
  }

  return HAL_OK;
 810bd16:	2300      	movs	r3, #0
}
 810bd18:	4618      	mov	r0, r3
 810bd1a:	3728      	adds	r7, #40	; 0x28
 810bd1c:	46bd      	mov	sp, r7
 810bd1e:	bdb0      	pop	{r4, r5, r7, pc}
 810bd20:	014f8b59 	.word	0x014f8b59
 810bd24:	00012110 	.word	0x00012110
 810bd28:	1fe00fff 	.word	0x1fe00fff

0810bd2c <HAL_SD_ReadBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd,
                                        uint32_t NumberOfBlocks)
{
 810bd2c:	b580      	push	{r7, lr}
 810bd2e:	b08c      	sub	sp, #48	; 0x30
 810bd30:	af00      	add	r7, sp, #0
 810bd32:	60f8      	str	r0, [r7, #12]
 810bd34:	60b9      	str	r1, [r7, #8]
 810bd36:	607a      	str	r2, [r7, #4]
 810bd38:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 810bd3a:	687b      	ldr	r3, [r7, #4]
 810bd3c:	62bb      	str	r3, [r7, #40]	; 0x28

  if (NULL == pData)
 810bd3e:	68bb      	ldr	r3, [r7, #8]
 810bd40:	2b00      	cmp	r3, #0
 810bd42:	d107      	bne.n	810bd54 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 810bd44:	68fb      	ldr	r3, [r7, #12]
 810bd46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810bd48:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 810bd4c:	68fb      	ldr	r3, [r7, #12]
 810bd4e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 810bd50:	2301      	movs	r3, #1
 810bd52:	e08d      	b.n	810be70 <HAL_SD_ReadBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 810bd54:	68fb      	ldr	r3, [r7, #12]
 810bd56:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 810bd5a:	b2db      	uxtb	r3, r3
 810bd5c:	2b01      	cmp	r3, #1
 810bd5e:	f040 8086 	bne.w	810be6e <HAL_SD_ReadBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 810bd62:	68fb      	ldr	r3, [r7, #12]
 810bd64:	2200      	movs	r2, #0
 810bd66:	639a      	str	r2, [r3, #56]	; 0x38

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 810bd68:	6aba      	ldr	r2, [r7, #40]	; 0x28
 810bd6a:	683b      	ldr	r3, [r7, #0]
 810bd6c:	441a      	add	r2, r3
 810bd6e:	68fb      	ldr	r3, [r7, #12]
 810bd70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810bd72:	429a      	cmp	r2, r3
 810bd74:	d907      	bls.n	810bd86 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 810bd76:	68fb      	ldr	r3, [r7, #12]
 810bd78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810bd7a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 810bd7e:	68fb      	ldr	r3, [r7, #12]
 810bd80:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 810bd82:	2301      	movs	r3, #1
 810bd84:	e074      	b.n	810be70 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 810bd86:	68fb      	ldr	r3, [r7, #12]
 810bd88:	2203      	movs	r2, #3
 810bd8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 810bd8e:	68fb      	ldr	r3, [r7, #12]
 810bd90:	681b      	ldr	r3, [r3, #0]
 810bd92:	2200      	movs	r2, #0
 810bd94:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pRxBuffPtr = pData;
 810bd96:	68fb      	ldr	r3, [r7, #12]
 810bd98:	68ba      	ldr	r2, [r7, #8]
 810bd9a:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 810bd9c:	683b      	ldr	r3, [r7, #0]
 810bd9e:	025a      	lsls	r2, r3, #9
 810bda0:	68fb      	ldr	r3, [r7, #12]
 810bda2:	62da      	str	r2, [r3, #44]	; 0x2c

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 810bda4:	68fb      	ldr	r3, [r7, #12]
 810bda6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810bda8:	2b01      	cmp	r3, #1
 810bdaa:	d002      	beq.n	810bdb2 <HAL_SD_ReadBlocks_DMA+0x86>
    {
      add *= 512U;
 810bdac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810bdae:	025b      	lsls	r3, r3, #9
 810bdb0:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 810bdb2:	f04f 33ff 	mov.w	r3, #4294967295
 810bdb6:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 810bdb8:	683b      	ldr	r3, [r7, #0]
 810bdba:	025b      	lsls	r3, r3, #9
 810bdbc:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 810bdbe:	2390      	movs	r3, #144	; 0x90
 810bdc0:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 810bdc2:	2302      	movs	r3, #2
 810bdc4:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 810bdc6:	2300      	movs	r3, #0
 810bdc8:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 810bdca:	2300      	movs	r3, #0
 810bdcc:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 810bdce:	68fb      	ldr	r3, [r7, #12]
 810bdd0:	681b      	ldr	r3, [r3, #0]
 810bdd2:	f107 0210 	add.w	r2, r7, #16
 810bdd6:	4611      	mov	r1, r2
 810bdd8:	4618      	mov	r0, r3
 810bdda:	f004 ff23 	bl	8110c24 <SDMMC_ConfigData>

    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 810bdde:	68fb      	ldr	r3, [r7, #12]
 810bde0:	681b      	ldr	r3, [r3, #0]
 810bde2:	68da      	ldr	r2, [r3, #12]
 810bde4:	68fb      	ldr	r3, [r7, #12]
 810bde6:	681b      	ldr	r3, [r3, #0]
 810bde8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 810bdec:	60da      	str	r2, [r3, #12]
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 810bdee:	68fb      	ldr	r3, [r7, #12]
 810bdf0:	681b      	ldr	r3, [r3, #0]
 810bdf2:	68ba      	ldr	r2, [r7, #8]
 810bdf4:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 810bdf6:	68fb      	ldr	r3, [r7, #12]
 810bdf8:	681b      	ldr	r3, [r3, #0]
 810bdfa:	2201      	movs	r2, #1
 810bdfc:	651a      	str	r2, [r3, #80]	; 0x50

    /* Read Blocks in DMA mode */
    if (NumberOfBlocks > 1U)
 810bdfe:	683b      	ldr	r3, [r7, #0]
 810be00:	2b01      	cmp	r3, #1
 810be02:	d90a      	bls.n	810be1a <HAL_SD_ReadBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 810be04:	68fb      	ldr	r3, [r7, #12]
 810be06:	2282      	movs	r2, #130	; 0x82
 810be08:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 810be0a:	68fb      	ldr	r3, [r7, #12]
 810be0c:	681b      	ldr	r3, [r3, #0]
 810be0e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 810be10:	4618      	mov	r0, r3
 810be12:	f004 ff79 	bl	8110d08 <SDMMC_CmdReadMultiBlock>
 810be16:	62f8      	str	r0, [r7, #44]	; 0x2c
 810be18:	e009      	b.n	810be2e <HAL_SD_ReadBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 810be1a:	68fb      	ldr	r3, [r7, #12]
 810be1c:	2281      	movs	r2, #129	; 0x81
 810be1e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 810be20:	68fb      	ldr	r3, [r7, #12]
 810be22:	681b      	ldr	r3, [r3, #0]
 810be24:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 810be26:	4618      	mov	r0, r3
 810be28:	f004 ff4b 	bl	8110cc2 <SDMMC_CmdReadSingleBlock>
 810be2c:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 810be2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810be30:	2b00      	cmp	r3, #0
 810be32:	d012      	beq.n	810be5a <HAL_SD_ReadBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 810be34:	68fb      	ldr	r3, [r7, #12]
 810be36:	681b      	ldr	r3, [r3, #0]
 810be38:	4a0f      	ldr	r2, [pc, #60]	; (810be78 <HAL_SD_ReadBlocks_DMA+0x14c>)
 810be3a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 810be3c:	68fb      	ldr	r3, [r7, #12]
 810be3e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 810be40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810be42:	431a      	orrs	r2, r3
 810be44:	68fb      	ldr	r3, [r7, #12]
 810be46:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 810be48:	68fb      	ldr	r3, [r7, #12]
 810be4a:	2201      	movs	r2, #1
 810be4c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 810be50:	68fb      	ldr	r3, [r7, #12]
 810be52:	2200      	movs	r2, #0
 810be54:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 810be56:	2301      	movs	r3, #1
 810be58:	e00a      	b.n	810be70 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 810be5a:	68fb      	ldr	r3, [r7, #12]
 810be5c:	681b      	ldr	r3, [r3, #0]
 810be5e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 810be60:	68fb      	ldr	r3, [r7, #12]
 810be62:	681b      	ldr	r3, [r3, #0]
 810be64:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 810be68:	63da      	str	r2, [r3, #60]	; 0x3c


    return HAL_OK;
 810be6a:	2300      	movs	r3, #0
 810be6c:	e000      	b.n	810be70 <HAL_SD_ReadBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 810be6e:	2302      	movs	r3, #2
  }
}
 810be70:	4618      	mov	r0, r3
 810be72:	3730      	adds	r7, #48	; 0x30
 810be74:	46bd      	mov	sp, r7
 810be76:	bd80      	pop	{r7, pc}
 810be78:	1fe00fff 	.word	0x1fe00fff

0810be7c <HAL_SD_WriteBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd,
                                         uint32_t NumberOfBlocks)
{
 810be7c:	b580      	push	{r7, lr}
 810be7e:	b08c      	sub	sp, #48	; 0x30
 810be80:	af00      	add	r7, sp, #0
 810be82:	60f8      	str	r0, [r7, #12]
 810be84:	60b9      	str	r1, [r7, #8]
 810be86:	607a      	str	r2, [r7, #4]
 810be88:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 810be8a:	687b      	ldr	r3, [r7, #4]
 810be8c:	62bb      	str	r3, [r7, #40]	; 0x28

  if (NULL == pData)
 810be8e:	68bb      	ldr	r3, [r7, #8]
 810be90:	2b00      	cmp	r3, #0
 810be92:	d107      	bne.n	810bea4 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 810be94:	68fb      	ldr	r3, [r7, #12]
 810be96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810be98:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 810be9c:	68fb      	ldr	r3, [r7, #12]
 810be9e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 810bea0:	2301      	movs	r3, #1
 810bea2:	e08d      	b.n	810bfc0 <HAL_SD_WriteBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 810bea4:	68fb      	ldr	r3, [r7, #12]
 810bea6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 810beaa:	b2db      	uxtb	r3, r3
 810beac:	2b01      	cmp	r3, #1
 810beae:	f040 8086 	bne.w	810bfbe <HAL_SD_WriteBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 810beb2:	68fb      	ldr	r3, [r7, #12]
 810beb4:	2200      	movs	r2, #0
 810beb6:	639a      	str	r2, [r3, #56]	; 0x38

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 810beb8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 810beba:	683b      	ldr	r3, [r7, #0]
 810bebc:	441a      	add	r2, r3
 810bebe:	68fb      	ldr	r3, [r7, #12]
 810bec0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810bec2:	429a      	cmp	r2, r3
 810bec4:	d907      	bls.n	810bed6 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 810bec6:	68fb      	ldr	r3, [r7, #12]
 810bec8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810beca:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 810bece:	68fb      	ldr	r3, [r7, #12]
 810bed0:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 810bed2:	2301      	movs	r3, #1
 810bed4:	e074      	b.n	810bfc0 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 810bed6:	68fb      	ldr	r3, [r7, #12]
 810bed8:	2203      	movs	r2, #3
 810beda:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 810bede:	68fb      	ldr	r3, [r7, #12]
 810bee0:	681b      	ldr	r3, [r3, #0]
 810bee2:	2200      	movs	r2, #0
 810bee4:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pTxBuffPtr = pData;
 810bee6:	68fb      	ldr	r3, [r7, #12]
 810bee8:	68ba      	ldr	r2, [r7, #8]
 810beea:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 810beec:	683b      	ldr	r3, [r7, #0]
 810beee:	025a      	lsls	r2, r3, #9
 810bef0:	68fb      	ldr	r3, [r7, #12]
 810bef2:	625a      	str	r2, [r3, #36]	; 0x24

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 810bef4:	68fb      	ldr	r3, [r7, #12]
 810bef6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810bef8:	2b01      	cmp	r3, #1
 810befa:	d002      	beq.n	810bf02 <HAL_SD_WriteBlocks_DMA+0x86>
    {
      add *= 512U;
 810befc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810befe:	025b      	lsls	r3, r3, #9
 810bf00:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 810bf02:	f04f 33ff 	mov.w	r3, #4294967295
 810bf06:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 810bf08:	683b      	ldr	r3, [r7, #0]
 810bf0a:	025b      	lsls	r3, r3, #9
 810bf0c:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 810bf0e:	2390      	movs	r3, #144	; 0x90
 810bf10:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 810bf12:	2300      	movs	r3, #0
 810bf14:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 810bf16:	2300      	movs	r3, #0
 810bf18:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 810bf1a:	2300      	movs	r3, #0
 810bf1c:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 810bf1e:	68fb      	ldr	r3, [r7, #12]
 810bf20:	681b      	ldr	r3, [r3, #0]
 810bf22:	f107 0210 	add.w	r2, r7, #16
 810bf26:	4611      	mov	r1, r2
 810bf28:	4618      	mov	r0, r3
 810bf2a:	f004 fe7b 	bl	8110c24 <SDMMC_ConfigData>


    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 810bf2e:	68fb      	ldr	r3, [r7, #12]
 810bf30:	681b      	ldr	r3, [r3, #0]
 810bf32:	68da      	ldr	r2, [r3, #12]
 810bf34:	68fb      	ldr	r3, [r7, #12]
 810bf36:	681b      	ldr	r3, [r3, #0]
 810bf38:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 810bf3c:	60da      	str	r2, [r3, #12]

    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 810bf3e:	68fb      	ldr	r3, [r7, #12]
 810bf40:	681b      	ldr	r3, [r3, #0]
 810bf42:	68ba      	ldr	r2, [r7, #8]
 810bf44:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 810bf46:	68fb      	ldr	r3, [r7, #12]
 810bf48:	681b      	ldr	r3, [r3, #0]
 810bf4a:	2201      	movs	r2, #1
 810bf4c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 810bf4e:	683b      	ldr	r3, [r7, #0]
 810bf50:	2b01      	cmp	r3, #1
 810bf52:	d90a      	bls.n	810bf6a <HAL_SD_WriteBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 810bf54:	68fb      	ldr	r3, [r7, #12]
 810bf56:	22a0      	movs	r2, #160	; 0xa0
 810bf58:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 810bf5a:	68fb      	ldr	r3, [r7, #12]
 810bf5c:	681b      	ldr	r3, [r3, #0]
 810bf5e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 810bf60:	4618      	mov	r0, r3
 810bf62:	f004 ff17 	bl	8110d94 <SDMMC_CmdWriteMultiBlock>
 810bf66:	62f8      	str	r0, [r7, #44]	; 0x2c
 810bf68:	e009      	b.n	810bf7e <HAL_SD_WriteBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 810bf6a:	68fb      	ldr	r3, [r7, #12]
 810bf6c:	2290      	movs	r2, #144	; 0x90
 810bf6e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 810bf70:	68fb      	ldr	r3, [r7, #12]
 810bf72:	681b      	ldr	r3, [r3, #0]
 810bf74:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 810bf76:	4618      	mov	r0, r3
 810bf78:	f004 fee9 	bl	8110d4e <SDMMC_CmdWriteSingleBlock>
 810bf7c:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 810bf7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810bf80:	2b00      	cmp	r3, #0
 810bf82:	d012      	beq.n	810bfaa <HAL_SD_WriteBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 810bf84:	68fb      	ldr	r3, [r7, #12]
 810bf86:	681b      	ldr	r3, [r3, #0]
 810bf88:	4a0f      	ldr	r2, [pc, #60]	; (810bfc8 <HAL_SD_WriteBlocks_DMA+0x14c>)
 810bf8a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 810bf8c:	68fb      	ldr	r3, [r7, #12]
 810bf8e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 810bf90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810bf92:	431a      	orrs	r2, r3
 810bf94:	68fb      	ldr	r3, [r7, #12]
 810bf96:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 810bf98:	68fb      	ldr	r3, [r7, #12]
 810bf9a:	2201      	movs	r2, #1
 810bf9c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 810bfa0:	68fb      	ldr	r3, [r7, #12]
 810bfa2:	2200      	movs	r2, #0
 810bfa4:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 810bfa6:	2301      	movs	r3, #1
 810bfa8:	e00a      	b.n	810bfc0 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 810bfaa:	68fb      	ldr	r3, [r7, #12]
 810bfac:	681b      	ldr	r3, [r3, #0]
 810bfae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 810bfb0:	68fb      	ldr	r3, [r7, #12]
 810bfb2:	681b      	ldr	r3, [r3, #0]
 810bfb4:	f442 728d 	orr.w	r2, r2, #282	; 0x11a
 810bfb8:	63da      	str	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 810bfba:	2300      	movs	r3, #0
 810bfbc:	e000      	b.n	810bfc0 <HAL_SD_WriteBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 810bfbe:	2302      	movs	r3, #2
  }
}
 810bfc0:	4618      	mov	r0, r3
 810bfc2:	3730      	adds	r7, #48	; 0x30
 810bfc4:	46bd      	mov	sp, r7
 810bfc6:	bd80      	pop	{r7, pc}
 810bfc8:	1fe00fff 	.word	0x1fe00fff

0810bfcc <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 810bfcc:	b580      	push	{r7, lr}
 810bfce:	b084      	sub	sp, #16
 810bfd0:	af00      	add	r7, sp, #0
 810bfd2:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 810bfd4:	687b      	ldr	r3, [r7, #4]
 810bfd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810bfd8:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 810bfda:	687b      	ldr	r3, [r7, #4]
 810bfdc:	681b      	ldr	r3, [r3, #0]
 810bfde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 810bfe0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 810bfe4:	2b00      	cmp	r3, #0
 810bfe6:	d008      	beq.n	810bffa <HAL_SD_IRQHandler+0x2e>
 810bfe8:	68fb      	ldr	r3, [r7, #12]
 810bfea:	f003 0308 	and.w	r3, r3, #8
 810bfee:	2b00      	cmp	r3, #0
 810bff0:	d003      	beq.n	810bffa <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 810bff2:	6878      	ldr	r0, [r7, #4]
 810bff4:	f001 f992 	bl	810d31c <SD_Read_IT>
 810bff8:	e199      	b.n	810c32e <HAL_SD_IRQHandler+0x362>
  }

  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 810bffa:	687b      	ldr	r3, [r7, #4]
 810bffc:	681b      	ldr	r3, [r3, #0]
 810bffe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 810c000:	f403 7380 	and.w	r3, r3, #256	; 0x100
 810c004:	2b00      	cmp	r3, #0
 810c006:	f000 80ae 	beq.w	810c166 <HAL_SD_IRQHandler+0x19a>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 810c00a:	687b      	ldr	r3, [r7, #4]
 810c00c:	681b      	ldr	r3, [r3, #0]
 810c00e:	f44f 7280 	mov.w	r2, #256	; 0x100
 810c012:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 810c014:	687b      	ldr	r3, [r7, #4]
 810c016:	681b      	ldr	r3, [r3, #0]
 810c018:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810c01a:	687a      	ldr	r2, [r7, #4]
 810c01c:	6812      	ldr	r2, [r2, #0]
 810c01e:	f423 4341 	bic.w	r3, r3, #49408	; 0xc100
 810c022:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 810c026:	63d3      	str	r3, [r2, #60]	; 0x3c
                        SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE | \
                        SDMMC_IT_RXFIFOHF);

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 810c028:	687b      	ldr	r3, [r7, #4]
 810c02a:	681b      	ldr	r3, [r3, #0]
 810c02c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 810c02e:	687b      	ldr	r3, [r7, #4]
 810c030:	681b      	ldr	r3, [r3, #0]
 810c032:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 810c036:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 810c038:	687b      	ldr	r3, [r7, #4]
 810c03a:	681b      	ldr	r3, [r3, #0]
 810c03c:	68da      	ldr	r2, [r3, #12]
 810c03e:	687b      	ldr	r3, [r7, #4]
 810c040:	681b      	ldr	r3, [r3, #0]
 810c042:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 810c046:	60da      	str	r2, [r3, #12]

    if ((context & SD_CONTEXT_IT) != 0U)
 810c048:	68fb      	ldr	r3, [r7, #12]
 810c04a:	f003 0308 	and.w	r3, r3, #8
 810c04e:	2b00      	cmp	r3, #0
 810c050:	d038      	beq.n	810c0c4 <HAL_SD_IRQHandler+0xf8>
    {
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 810c052:	68fb      	ldr	r3, [r7, #12]
 810c054:	f003 0302 	and.w	r3, r3, #2
 810c058:	2b00      	cmp	r3, #0
 810c05a:	d104      	bne.n	810c066 <HAL_SD_IRQHandler+0x9a>
 810c05c:	68fb      	ldr	r3, [r7, #12]
 810c05e:	f003 0320 	and.w	r3, r3, #32
 810c062:	2b00      	cmp	r3, #0
 810c064:	d011      	beq.n	810c08a <HAL_SD_IRQHandler+0xbe>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 810c066:	687b      	ldr	r3, [r7, #4]
 810c068:	681b      	ldr	r3, [r3, #0]
 810c06a:	4618      	mov	r0, r3
 810c06c:	f004 feb6 	bl	8110ddc <SDMMC_CmdStopTransfer>
 810c070:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 810c072:	68bb      	ldr	r3, [r7, #8]
 810c074:	2b00      	cmp	r3, #0
 810c076:	d008      	beq.n	810c08a <HAL_SD_IRQHandler+0xbe>
        {
          hsd->ErrorCode |= errorstate;
 810c078:	687b      	ldr	r3, [r7, #4]
 810c07a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 810c07c:	68bb      	ldr	r3, [r7, #8]
 810c07e:	431a      	orrs	r2, r3
 810c080:	687b      	ldr	r3, [r7, #4]
 810c082:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 810c084:	6878      	ldr	r0, [r7, #4]
 810c086:	f000 f957 	bl	810c338 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 810c08a:	687b      	ldr	r3, [r7, #4]
 810c08c:	681b      	ldr	r3, [r3, #0]
 810c08e:	4aa0      	ldr	r2, [pc, #640]	; (810c310 <HAL_SD_IRQHandler+0x344>)
 810c090:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 810c092:	687b      	ldr	r3, [r7, #4]
 810c094:	2201      	movs	r2, #1
 810c096:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 810c09a:	687b      	ldr	r3, [r7, #4]
 810c09c:	2200      	movs	r2, #0
 810c09e:	631a      	str	r2, [r3, #48]	; 0x30
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 810c0a0:	68fb      	ldr	r3, [r7, #12]
 810c0a2:	f003 0301 	and.w	r3, r3, #1
 810c0a6:	2b00      	cmp	r3, #0
 810c0a8:	d104      	bne.n	810c0b4 <HAL_SD_IRQHandler+0xe8>
 810c0aa:	68fb      	ldr	r3, [r7, #12]
 810c0ac:	f003 0302 	and.w	r3, r3, #2
 810c0b0:	2b00      	cmp	r3, #0
 810c0b2:	d003      	beq.n	810c0bc <HAL_SD_IRQHandler+0xf0>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 810c0b4:	6878      	ldr	r0, [r7, #4]
 810c0b6:	f006 fb41 	bl	811273c <HAL_SD_RxCpltCallback>
 810c0ba:	e138      	b.n	810c32e <HAL_SD_IRQHandler+0x362>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 810c0bc:	6878      	ldr	r0, [r7, #4]
 810c0be:	f006 fb33 	bl	8112728 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 810c0c2:	e134      	b.n	810c32e <HAL_SD_IRQHandler+0x362>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 810c0c4:	68fb      	ldr	r3, [r7, #12]
 810c0c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 810c0ca:	2b00      	cmp	r3, #0
 810c0cc:	f000 812f 	beq.w	810c32e <HAL_SD_IRQHandler+0x362>
      hsd->Instance->DLEN = 0;
 810c0d0:	687b      	ldr	r3, [r7, #4]
 810c0d2:	681b      	ldr	r3, [r3, #0]
 810c0d4:	2200      	movs	r2, #0
 810c0d6:	629a      	str	r2, [r3, #40]	; 0x28
      hsd->Instance->DCTRL = 0;
 810c0d8:	687b      	ldr	r3, [r7, #4]
 810c0da:	681b      	ldr	r3, [r3, #0]
 810c0dc:	2200      	movs	r2, #0
 810c0de:	62da      	str	r2, [r3, #44]	; 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 810c0e0:	687b      	ldr	r3, [r7, #4]
 810c0e2:	681b      	ldr	r3, [r3, #0]
 810c0e4:	2200      	movs	r2, #0
 810c0e6:	651a      	str	r2, [r3, #80]	; 0x50
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 810c0e8:	68fb      	ldr	r3, [r7, #12]
 810c0ea:	f003 0302 	and.w	r3, r3, #2
 810c0ee:	2b00      	cmp	r3, #0
 810c0f0:	d104      	bne.n	810c0fc <HAL_SD_IRQHandler+0x130>
 810c0f2:	68fb      	ldr	r3, [r7, #12]
 810c0f4:	f003 0320 	and.w	r3, r3, #32
 810c0f8:	2b00      	cmp	r3, #0
 810c0fa:	d011      	beq.n	810c120 <HAL_SD_IRQHandler+0x154>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 810c0fc:	687b      	ldr	r3, [r7, #4]
 810c0fe:	681b      	ldr	r3, [r3, #0]
 810c100:	4618      	mov	r0, r3
 810c102:	f004 fe6b 	bl	8110ddc <SDMMC_CmdStopTransfer>
 810c106:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 810c108:	68bb      	ldr	r3, [r7, #8]
 810c10a:	2b00      	cmp	r3, #0
 810c10c:	d008      	beq.n	810c120 <HAL_SD_IRQHandler+0x154>
          hsd->ErrorCode |= errorstate;
 810c10e:	687b      	ldr	r3, [r7, #4]
 810c110:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 810c112:	68bb      	ldr	r3, [r7, #8]
 810c114:	431a      	orrs	r2, r3
 810c116:	687b      	ldr	r3, [r7, #4]
 810c118:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 810c11a:	6878      	ldr	r0, [r7, #4]
 810c11c:	f000 f90c 	bl	810c338 <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 810c120:	687b      	ldr	r3, [r7, #4]
 810c122:	2201      	movs	r2, #1
 810c124:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 810c128:	687b      	ldr	r3, [r7, #4]
 810c12a:	2200      	movs	r2, #0
 810c12c:	631a      	str	r2, [r3, #48]	; 0x30
      if (((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 810c12e:	68fb      	ldr	r3, [r7, #12]
 810c130:	f003 0310 	and.w	r3, r3, #16
 810c134:	2b00      	cmp	r3, #0
 810c136:	d104      	bne.n	810c142 <HAL_SD_IRQHandler+0x176>
 810c138:	68fb      	ldr	r3, [r7, #12]
 810c13a:	f003 0320 	and.w	r3, r3, #32
 810c13e:	2b00      	cmp	r3, #0
 810c140:	d002      	beq.n	810c148 <HAL_SD_IRQHandler+0x17c>
        HAL_SD_TxCpltCallback(hsd);
 810c142:	6878      	ldr	r0, [r7, #4]
 810c144:	f006 faf0 	bl	8112728 <HAL_SD_TxCpltCallback>
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 810c148:	68fb      	ldr	r3, [r7, #12]
 810c14a:	f003 0301 	and.w	r3, r3, #1
 810c14e:	2b00      	cmp	r3, #0
 810c150:	d105      	bne.n	810c15e <HAL_SD_IRQHandler+0x192>
 810c152:	68fb      	ldr	r3, [r7, #12]
 810c154:	f003 0302 	and.w	r3, r3, #2
 810c158:	2b00      	cmp	r3, #0
 810c15a:	f000 80e8 	beq.w	810c32e <HAL_SD_IRQHandler+0x362>
        HAL_SD_RxCpltCallback(hsd);
 810c15e:	6878      	ldr	r0, [r7, #4]
 810c160:	f006 faec 	bl	811273c <HAL_SD_RxCpltCallback>
}
 810c164:	e0e3      	b.n	810c32e <HAL_SD_IRQHandler+0x362>
  else if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 810c166:	687b      	ldr	r3, [r7, #4]
 810c168:	681b      	ldr	r3, [r3, #0]
 810c16a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 810c16c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 810c170:	2b00      	cmp	r3, #0
 810c172:	d008      	beq.n	810c186 <HAL_SD_IRQHandler+0x1ba>
 810c174:	68fb      	ldr	r3, [r7, #12]
 810c176:	f003 0308 	and.w	r3, r3, #8
 810c17a:	2b00      	cmp	r3, #0
 810c17c:	d003      	beq.n	810c186 <HAL_SD_IRQHandler+0x1ba>
    SD_Write_IT(hsd);
 810c17e:	6878      	ldr	r0, [r7, #4]
 810c180:	f001 f912 	bl	810d3a8 <SD_Write_IT>
 810c184:	e0d3      	b.n	810c32e <HAL_SD_IRQHandler+0x362>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR |
 810c186:	687b      	ldr	r3, [r7, #4]
 810c188:	681b      	ldr	r3, [r3, #0]
 810c18a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 810c18c:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 810c190:	2b00      	cmp	r3, #0
 810c192:	f000 809d 	beq.w	810c2d0 <HAL_SD_IRQHandler+0x304>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 810c196:	687b      	ldr	r3, [r7, #4]
 810c198:	681b      	ldr	r3, [r3, #0]
 810c19a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 810c19c:	f003 0302 	and.w	r3, r3, #2
 810c1a0:	2b00      	cmp	r3, #0
 810c1a2:	d005      	beq.n	810c1b0 <HAL_SD_IRQHandler+0x1e4>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 810c1a4:	687b      	ldr	r3, [r7, #4]
 810c1a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810c1a8:	f043 0202 	orr.w	r2, r3, #2
 810c1ac:	687b      	ldr	r3, [r7, #4]
 810c1ae:	639a      	str	r2, [r3, #56]	; 0x38
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 810c1b0:	687b      	ldr	r3, [r7, #4]
 810c1b2:	681b      	ldr	r3, [r3, #0]
 810c1b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 810c1b6:	f003 0308 	and.w	r3, r3, #8
 810c1ba:	2b00      	cmp	r3, #0
 810c1bc:	d005      	beq.n	810c1ca <HAL_SD_IRQHandler+0x1fe>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 810c1be:	687b      	ldr	r3, [r7, #4]
 810c1c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810c1c2:	f043 0208 	orr.w	r2, r3, #8
 810c1c6:	687b      	ldr	r3, [r7, #4]
 810c1c8:	639a      	str	r2, [r3, #56]	; 0x38
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 810c1ca:	687b      	ldr	r3, [r7, #4]
 810c1cc:	681b      	ldr	r3, [r3, #0]
 810c1ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 810c1d0:	f003 0320 	and.w	r3, r3, #32
 810c1d4:	2b00      	cmp	r3, #0
 810c1d6:	d005      	beq.n	810c1e4 <HAL_SD_IRQHandler+0x218>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 810c1d8:	687b      	ldr	r3, [r7, #4]
 810c1da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810c1dc:	f043 0220 	orr.w	r2, r3, #32
 810c1e0:	687b      	ldr	r3, [r7, #4]
 810c1e2:	639a      	str	r2, [r3, #56]	; 0x38
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 810c1e4:	687b      	ldr	r3, [r7, #4]
 810c1e6:	681b      	ldr	r3, [r3, #0]
 810c1e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 810c1ea:	f003 0310 	and.w	r3, r3, #16
 810c1ee:	2b00      	cmp	r3, #0
 810c1f0:	d005      	beq.n	810c1fe <HAL_SD_IRQHandler+0x232>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 810c1f2:	687b      	ldr	r3, [r7, #4]
 810c1f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810c1f6:	f043 0210 	orr.w	r2, r3, #16
 810c1fa:	687b      	ldr	r3, [r7, #4]
 810c1fc:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 810c1fe:	687b      	ldr	r3, [r7, #4]
 810c200:	681b      	ldr	r3, [r3, #0]
 810c202:	4a43      	ldr	r2, [pc, #268]	; (810c310 <HAL_SD_IRQHandler+0x344>)
 810c204:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 810c206:	687b      	ldr	r3, [r7, #4]
 810c208:	681b      	ldr	r3, [r3, #0]
 810c20a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 810c20c:	687b      	ldr	r3, [r7, #4]
 810c20e:	681b      	ldr	r3, [r3, #0]
 810c210:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 810c214:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 810c216:	687b      	ldr	r3, [r7, #4]
 810c218:	681b      	ldr	r3, [r3, #0]
 810c21a:	68da      	ldr	r2, [r3, #12]
 810c21c:	687b      	ldr	r3, [r7, #4]
 810c21e:	681b      	ldr	r3, [r3, #0]
 810c220:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 810c224:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 810c226:	687b      	ldr	r3, [r7, #4]
 810c228:	681b      	ldr	r3, [r3, #0]
 810c22a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810c22c:	687b      	ldr	r3, [r7, #4]
 810c22e:	681b      	ldr	r3, [r3, #0]
 810c230:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 810c234:	62da      	str	r2, [r3, #44]	; 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 810c236:	687b      	ldr	r3, [r7, #4]
 810c238:	681b      	ldr	r3, [r3, #0]
 810c23a:	68da      	ldr	r2, [r3, #12]
 810c23c:	687b      	ldr	r3, [r7, #4]
 810c23e:	681b      	ldr	r3, [r3, #0]
 810c240:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 810c244:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 810c246:	687b      	ldr	r3, [r7, #4]
 810c248:	681b      	ldr	r3, [r3, #0]
 810c24a:	4618      	mov	r0, r3
 810c24c:	f004 fdc6 	bl	8110ddc <SDMMC_CmdStopTransfer>
 810c250:	4602      	mov	r2, r0
 810c252:	687b      	ldr	r3, [r7, #4]
 810c254:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810c256:	431a      	orrs	r2, r3
 810c258:	687b      	ldr	r3, [r7, #4]
 810c25a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 810c25c:	687b      	ldr	r3, [r7, #4]
 810c25e:	681b      	ldr	r3, [r3, #0]
 810c260:	68da      	ldr	r2, [r3, #12]
 810c262:	687b      	ldr	r3, [r7, #4]
 810c264:	681b      	ldr	r3, [r3, #0]
 810c266:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 810c26a:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 810c26c:	687b      	ldr	r3, [r7, #4]
 810c26e:	681b      	ldr	r3, [r3, #0]
 810c270:	f44f 6200 	mov.w	r2, #2048	; 0x800
 810c274:	639a      	str	r2, [r3, #56]	; 0x38
    if ((context & SD_CONTEXT_IT) != 0U)
 810c276:	68fb      	ldr	r3, [r7, #12]
 810c278:	f003 0308 	and.w	r3, r3, #8
 810c27c:	2b00      	cmp	r3, #0
 810c27e:	d00a      	beq.n	810c296 <HAL_SD_IRQHandler+0x2ca>
      hsd->State = HAL_SD_STATE_READY;
 810c280:	687b      	ldr	r3, [r7, #4]
 810c282:	2201      	movs	r2, #1
 810c284:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 810c288:	687b      	ldr	r3, [r7, #4]
 810c28a:	2200      	movs	r2, #0
 810c28c:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 810c28e:	6878      	ldr	r0, [r7, #4]
 810c290:	f000 f852 	bl	810c338 <HAL_SD_ErrorCallback>
}
 810c294:	e04b      	b.n	810c32e <HAL_SD_IRQHandler+0x362>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 810c296:	68fb      	ldr	r3, [r7, #12]
 810c298:	f003 0380 	and.w	r3, r3, #128	; 0x80
 810c29c:	2b00      	cmp	r3, #0
 810c29e:	d046      	beq.n	810c32e <HAL_SD_IRQHandler+0x362>
      if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 810c2a0:	687b      	ldr	r3, [r7, #4]
 810c2a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810c2a4:	2b00      	cmp	r3, #0
 810c2a6:	d042      	beq.n	810c32e <HAL_SD_IRQHandler+0x362>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 810c2a8:	687b      	ldr	r3, [r7, #4]
 810c2aa:	681b      	ldr	r3, [r3, #0]
 810c2ac:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 810c2ae:	687b      	ldr	r3, [r7, #4]
 810c2b0:	681b      	ldr	r3, [r3, #0]
 810c2b2:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 810c2b6:	63da      	str	r2, [r3, #60]	; 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 810c2b8:	687b      	ldr	r3, [r7, #4]
 810c2ba:	681b      	ldr	r3, [r3, #0]
 810c2bc:	2200      	movs	r2, #0
 810c2be:	651a      	str	r2, [r3, #80]	; 0x50
        hsd->State = HAL_SD_STATE_READY;
 810c2c0:	687b      	ldr	r3, [r7, #4]
 810c2c2:	2201      	movs	r2, #1
 810c2c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_ErrorCallback(hsd);
 810c2c8:	6878      	ldr	r0, [r7, #4]
 810c2ca:	f000 f835 	bl	810c338 <HAL_SD_ErrorCallback>
}
 810c2ce:	e02e      	b.n	810c32e <HAL_SD_IRQHandler+0x362>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 810c2d0:	687b      	ldr	r3, [r7, #4]
 810c2d2:	681b      	ldr	r3, [r3, #0]
 810c2d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 810c2d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 810c2da:	2b00      	cmp	r3, #0
 810c2dc:	d027      	beq.n	810c32e <HAL_SD_IRQHandler+0x362>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 810c2de:	687b      	ldr	r3, [r7, #4]
 810c2e0:	681b      	ldr	r3, [r3, #0]
 810c2e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 810c2e6:	639a      	str	r2, [r3, #56]	; 0x38
    if (READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 810c2e8:	687b      	ldr	r3, [r7, #4]
 810c2ea:	681b      	ldr	r3, [r3, #0]
 810c2ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810c2ee:	f003 0304 	and.w	r3, r3, #4
 810c2f2:	2b00      	cmp	r3, #0
 810c2f4:	d10e      	bne.n	810c314 <HAL_SD_IRQHandler+0x348>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 810c2f6:	68fb      	ldr	r3, [r7, #12]
 810c2f8:	f003 0320 	and.w	r3, r3, #32
 810c2fc:	2b00      	cmp	r3, #0
 810c2fe:	d003      	beq.n	810c308 <HAL_SD_IRQHandler+0x33c>
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 810c300:	6878      	ldr	r0, [r7, #4]
 810c302:	f001 f8b9 	bl	810d478 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>
}
 810c306:	e012      	b.n	810c32e <HAL_SD_IRQHandler+0x362>
        HAL_SDEx_Read_DMADoubleBuf1CpltCallback(hsd);
 810c308:	6878      	ldr	r0, [r7, #4]
 810c30a:	f001 f8a1 	bl	810d450 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>
}
 810c30e:	e00e      	b.n	810c32e <HAL_SD_IRQHandler+0x362>
 810c310:	18000f3a 	.word	0x18000f3a
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 810c314:	68fb      	ldr	r3, [r7, #12]
 810c316:	f003 0320 	and.w	r3, r3, #32
 810c31a:	2b00      	cmp	r3, #0
 810c31c:	d003      	beq.n	810c326 <HAL_SD_IRQHandler+0x35a>
        HAL_SDEx_Write_DMADoubleBuf0CpltCallback(hsd);
 810c31e:	6878      	ldr	r0, [r7, #4]
 810c320:	f001 f8a0 	bl	810d464 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>
}
 810c324:	e003      	b.n	810c32e <HAL_SD_IRQHandler+0x362>
        HAL_SDEx_Read_DMADoubleBuf0CpltCallback(hsd);
 810c326:	6878      	ldr	r0, [r7, #4]
 810c328:	f001 f888 	bl	810d43c <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>
}
 810c32c:	e7ff      	b.n	810c32e <HAL_SD_IRQHandler+0x362>
 810c32e:	bf00      	nop
 810c330:	3710      	adds	r7, #16
 810c332:	46bd      	mov	sp, r7
 810c334:	bd80      	pop	{r7, pc}
 810c336:	bf00      	nop

0810c338 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 810c338:	b480      	push	{r7}
 810c33a:	b083      	sub	sp, #12
 810c33c:	af00      	add	r7, sp, #0
 810c33e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 810c340:	bf00      	nop
 810c342:	370c      	adds	r7, #12
 810c344:	46bd      	mov	sp, r7
 810c346:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c34a:	4770      	bx	lr

0810c34c <HAL_SD_DriveTransceiver_1_8V_Callback>:
  * @brief  Enable/Disable the SD Transceiver 1.8V Mode Callback.
  * @param  status: Voltage Switch State
  * @retval None
  */
__weak  void HAL_SD_DriveTransceiver_1_8V_Callback(FlagStatus status)
{
 810c34c:	b480      	push	{r7}
 810c34e:	b083      	sub	sp, #12
 810c350:	af00      	add	r7, sp, #0
 810c352:	4603      	mov	r3, r0
 810c354:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(status);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_EnableTransceiver could be implemented in the user file
   */
}
 810c356:	bf00      	nop
 810c358:	370c      	adds	r7, #12
 810c35a:	46bd      	mov	sp, r7
 810c35c:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c360:	4770      	bx	lr
	...

0810c364 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 810c364:	b480      	push	{r7}
 810c366:	b083      	sub	sp, #12
 810c368:	af00      	add	r7, sp, #0
 810c36a:	6078      	str	r0, [r7, #4]
 810c36c:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 810c36e:	687b      	ldr	r3, [r7, #4]
 810c370:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 810c372:	0f9b      	lsrs	r3, r3, #30
 810c374:	b2da      	uxtb	r2, r3
 810c376:	683b      	ldr	r3, [r7, #0]
 810c378:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 810c37a:	687b      	ldr	r3, [r7, #4]
 810c37c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 810c37e:	0e9b      	lsrs	r3, r3, #26
 810c380:	b2db      	uxtb	r3, r3
 810c382:	f003 030f 	and.w	r3, r3, #15
 810c386:	b2da      	uxtb	r2, r3
 810c388:	683b      	ldr	r3, [r7, #0]
 810c38a:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 810c38c:	687b      	ldr	r3, [r7, #4]
 810c38e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 810c390:	0e1b      	lsrs	r3, r3, #24
 810c392:	b2db      	uxtb	r3, r3
 810c394:	f003 0303 	and.w	r3, r3, #3
 810c398:	b2da      	uxtb	r2, r3
 810c39a:	683b      	ldr	r3, [r7, #0]
 810c39c:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 810c39e:	687b      	ldr	r3, [r7, #4]
 810c3a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 810c3a2:	0c1b      	lsrs	r3, r3, #16
 810c3a4:	b2da      	uxtb	r2, r3
 810c3a6:	683b      	ldr	r3, [r7, #0]
 810c3a8:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 810c3aa:	687b      	ldr	r3, [r7, #4]
 810c3ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 810c3ae:	0a1b      	lsrs	r3, r3, #8
 810c3b0:	b2da      	uxtb	r2, r3
 810c3b2:	683b      	ldr	r3, [r7, #0]
 810c3b4:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 810c3b6:	687b      	ldr	r3, [r7, #4]
 810c3b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 810c3ba:	b2da      	uxtb	r2, r3
 810c3bc:	683b      	ldr	r3, [r7, #0]
 810c3be:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 810c3c0:	687b      	ldr	r3, [r7, #4]
 810c3c2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810c3c4:	0d1b      	lsrs	r3, r3, #20
 810c3c6:	b29a      	uxth	r2, r3
 810c3c8:	683b      	ldr	r3, [r7, #0]
 810c3ca:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 810c3cc:	687b      	ldr	r3, [r7, #4]
 810c3ce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810c3d0:	0c1b      	lsrs	r3, r3, #16
 810c3d2:	b2db      	uxtb	r3, r3
 810c3d4:	f003 030f 	and.w	r3, r3, #15
 810c3d8:	b2da      	uxtb	r2, r3
 810c3da:	683b      	ldr	r3, [r7, #0]
 810c3dc:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 810c3de:	687b      	ldr	r3, [r7, #4]
 810c3e0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810c3e2:	0bdb      	lsrs	r3, r3, #15
 810c3e4:	b2db      	uxtb	r3, r3
 810c3e6:	f003 0301 	and.w	r3, r3, #1
 810c3ea:	b2da      	uxtb	r2, r3
 810c3ec:	683b      	ldr	r3, [r7, #0]
 810c3ee:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 810c3f0:	687b      	ldr	r3, [r7, #4]
 810c3f2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810c3f4:	0b9b      	lsrs	r3, r3, #14
 810c3f6:	b2db      	uxtb	r3, r3
 810c3f8:	f003 0301 	and.w	r3, r3, #1
 810c3fc:	b2da      	uxtb	r2, r3
 810c3fe:	683b      	ldr	r3, [r7, #0]
 810c400:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 810c402:	687b      	ldr	r3, [r7, #4]
 810c404:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810c406:	0b5b      	lsrs	r3, r3, #13
 810c408:	b2db      	uxtb	r3, r3
 810c40a:	f003 0301 	and.w	r3, r3, #1
 810c40e:	b2da      	uxtb	r2, r3
 810c410:	683b      	ldr	r3, [r7, #0]
 810c412:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 810c414:	687b      	ldr	r3, [r7, #4]
 810c416:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810c418:	0b1b      	lsrs	r3, r3, #12
 810c41a:	b2db      	uxtb	r3, r3
 810c41c:	f003 0301 	and.w	r3, r3, #1
 810c420:	b2da      	uxtb	r2, r3
 810c422:	683b      	ldr	r3, [r7, #0]
 810c424:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 810c426:	683b      	ldr	r3, [r7, #0]
 810c428:	2200      	movs	r2, #0
 810c42a:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 810c42c:	687b      	ldr	r3, [r7, #4]
 810c42e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810c430:	2b00      	cmp	r3, #0
 810c432:	d163      	bne.n	810c4fc <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 810c434:	687b      	ldr	r3, [r7, #4]
 810c436:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810c438:	009a      	lsls	r2, r3, #2
 810c43a:	f640 73fc 	movw	r3, #4092	; 0xffc
 810c43e:	4013      	ands	r3, r2
 810c440:	687a      	ldr	r2, [r7, #4]
 810c442:	6e92      	ldr	r2, [r2, #104]	; 0x68
 810c444:	0f92      	lsrs	r2, r2, #30
 810c446:	431a      	orrs	r2, r3
 810c448:	683b      	ldr	r3, [r7, #0]
 810c44a:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 810c44c:	687b      	ldr	r3, [r7, #4]
 810c44e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 810c450:	0edb      	lsrs	r3, r3, #27
 810c452:	b2db      	uxtb	r3, r3
 810c454:	f003 0307 	and.w	r3, r3, #7
 810c458:	b2da      	uxtb	r2, r3
 810c45a:	683b      	ldr	r3, [r7, #0]
 810c45c:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 810c45e:	687b      	ldr	r3, [r7, #4]
 810c460:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 810c462:	0e1b      	lsrs	r3, r3, #24
 810c464:	b2db      	uxtb	r3, r3
 810c466:	f003 0307 	and.w	r3, r3, #7
 810c46a:	b2da      	uxtb	r2, r3
 810c46c:	683b      	ldr	r3, [r7, #0]
 810c46e:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 810c470:	687b      	ldr	r3, [r7, #4]
 810c472:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 810c474:	0d5b      	lsrs	r3, r3, #21
 810c476:	b2db      	uxtb	r3, r3
 810c478:	f003 0307 	and.w	r3, r3, #7
 810c47c:	b2da      	uxtb	r2, r3
 810c47e:	683b      	ldr	r3, [r7, #0]
 810c480:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 810c482:	687b      	ldr	r3, [r7, #4]
 810c484:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 810c486:	0c9b      	lsrs	r3, r3, #18
 810c488:	b2db      	uxtb	r3, r3
 810c48a:	f003 0307 	and.w	r3, r3, #7
 810c48e:	b2da      	uxtb	r2, r3
 810c490:	683b      	ldr	r3, [r7, #0]
 810c492:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 810c494:	687b      	ldr	r3, [r7, #4]
 810c496:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 810c498:	0bdb      	lsrs	r3, r3, #15
 810c49a:	b2db      	uxtb	r3, r3
 810c49c:	f003 0307 	and.w	r3, r3, #7
 810c4a0:	b2da      	uxtb	r2, r3
 810c4a2:	683b      	ldr	r3, [r7, #0]
 810c4a4:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 810c4a6:	683b      	ldr	r3, [r7, #0]
 810c4a8:	691b      	ldr	r3, [r3, #16]
 810c4aa:	1c5a      	adds	r2, r3, #1
 810c4ac:	687b      	ldr	r3, [r7, #4]
 810c4ae:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 810c4b0:	683b      	ldr	r3, [r7, #0]
 810c4b2:	7e1b      	ldrb	r3, [r3, #24]
 810c4b4:	b2db      	uxtb	r3, r3
 810c4b6:	f003 0307 	and.w	r3, r3, #7
 810c4ba:	3302      	adds	r3, #2
 810c4bc:	2201      	movs	r2, #1
 810c4be:	fa02 f303 	lsl.w	r3, r2, r3
 810c4c2:	687a      	ldr	r2, [r7, #4]
 810c4c4:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 810c4c6:	fb02 f203 	mul.w	r2, r2, r3
 810c4ca:	687b      	ldr	r3, [r7, #4]
 810c4cc:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 810c4ce:	683b      	ldr	r3, [r7, #0]
 810c4d0:	7a1b      	ldrb	r3, [r3, #8]
 810c4d2:	b2db      	uxtb	r3, r3
 810c4d4:	f003 030f 	and.w	r3, r3, #15
 810c4d8:	2201      	movs	r2, #1
 810c4da:	409a      	lsls	r2, r3
 810c4dc:	687b      	ldr	r3, [r7, #4]
 810c4de:	651a      	str	r2, [r3, #80]	; 0x50

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 810c4e0:	687b      	ldr	r3, [r7, #4]
 810c4e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 810c4e4:	687a      	ldr	r2, [r7, #4]
 810c4e6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 810c4e8:	0a52      	lsrs	r2, r2, #9
 810c4ea:	fb02 f203 	mul.w	r2, r2, r3
 810c4ee:	687b      	ldr	r3, [r7, #4]
 810c4f0:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockSize = 512U;
 810c4f2:	687b      	ldr	r3, [r7, #4]
 810c4f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 810c4f8:	659a      	str	r2, [r3, #88]	; 0x58
 810c4fa:	e031      	b.n	810c560 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 810c4fc:	687b      	ldr	r3, [r7, #4]
 810c4fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810c500:	2b01      	cmp	r3, #1
 810c502:	d11d      	bne.n	810c540 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 810c504:	687b      	ldr	r3, [r7, #4]
 810c506:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810c508:	041b      	lsls	r3, r3, #16
 810c50a:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 810c50e:	687b      	ldr	r3, [r7, #4]
 810c510:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 810c512:	0c1b      	lsrs	r3, r3, #16
 810c514:	431a      	orrs	r2, r3
 810c516:	683b      	ldr	r3, [r7, #0]
 810c518:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 810c51a:	683b      	ldr	r3, [r7, #0]
 810c51c:	691b      	ldr	r3, [r3, #16]
 810c51e:	3301      	adds	r3, #1
 810c520:	029a      	lsls	r2, r3, #10
 810c522:	687b      	ldr	r3, [r7, #4]
 810c524:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 810c526:	687b      	ldr	r3, [r7, #4]
 810c528:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 810c52a:	687b      	ldr	r3, [r7, #4]
 810c52c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = 512U;
 810c52e:	687b      	ldr	r3, [r7, #4]
 810c530:	f44f 7200 	mov.w	r2, #512	; 0x200
 810c534:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 810c536:	687b      	ldr	r3, [r7, #4]
 810c538:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 810c53a:	687b      	ldr	r3, [r7, #4]
 810c53c:	659a      	str	r2, [r3, #88]	; 0x58
 810c53e:	e00f      	b.n	810c560 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 810c540:	687b      	ldr	r3, [r7, #4]
 810c542:	681b      	ldr	r3, [r3, #0]
 810c544:	4a58      	ldr	r2, [pc, #352]	; (810c6a8 <HAL_SD_GetCardCSD+0x344>)
 810c546:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 810c548:	687b      	ldr	r3, [r7, #4]
 810c54a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810c54c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 810c550:	687b      	ldr	r3, [r7, #4]
 810c552:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 810c554:	687b      	ldr	r3, [r7, #4]
 810c556:	2201      	movs	r2, #1
 810c558:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 810c55c:	2301      	movs	r3, #1
 810c55e:	e09d      	b.n	810c69c <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 810c560:	687b      	ldr	r3, [r7, #4]
 810c562:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 810c564:	0b9b      	lsrs	r3, r3, #14
 810c566:	b2db      	uxtb	r3, r3
 810c568:	f003 0301 	and.w	r3, r3, #1
 810c56c:	b2da      	uxtb	r2, r3
 810c56e:	683b      	ldr	r3, [r7, #0]
 810c570:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 810c572:	687b      	ldr	r3, [r7, #4]
 810c574:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 810c576:	09db      	lsrs	r3, r3, #7
 810c578:	b2db      	uxtb	r3, r3
 810c57a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 810c57e:	b2da      	uxtb	r2, r3
 810c580:	683b      	ldr	r3, [r7, #0]
 810c582:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 810c584:	687b      	ldr	r3, [r7, #4]
 810c586:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 810c588:	b2db      	uxtb	r3, r3
 810c58a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 810c58e:	b2da      	uxtb	r2, r3
 810c590:	683b      	ldr	r3, [r7, #0]
 810c592:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 810c594:	687b      	ldr	r3, [r7, #4]
 810c596:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 810c598:	0fdb      	lsrs	r3, r3, #31
 810c59a:	b2da      	uxtb	r2, r3
 810c59c:	683b      	ldr	r3, [r7, #0]
 810c59e:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 810c5a0:	687b      	ldr	r3, [r7, #4]
 810c5a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 810c5a4:	0f5b      	lsrs	r3, r3, #29
 810c5a6:	b2db      	uxtb	r3, r3
 810c5a8:	f003 0303 	and.w	r3, r3, #3
 810c5ac:	b2da      	uxtb	r2, r3
 810c5ae:	683b      	ldr	r3, [r7, #0]
 810c5b0:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 810c5b2:	687b      	ldr	r3, [r7, #4]
 810c5b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 810c5b6:	0e9b      	lsrs	r3, r3, #26
 810c5b8:	b2db      	uxtb	r3, r3
 810c5ba:	f003 0307 	and.w	r3, r3, #7
 810c5be:	b2da      	uxtb	r2, r3
 810c5c0:	683b      	ldr	r3, [r7, #0]
 810c5c2:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 810c5c4:	687b      	ldr	r3, [r7, #4]
 810c5c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 810c5c8:	0d9b      	lsrs	r3, r3, #22
 810c5ca:	b2db      	uxtb	r3, r3
 810c5cc:	f003 030f 	and.w	r3, r3, #15
 810c5d0:	b2da      	uxtb	r2, r3
 810c5d2:	683b      	ldr	r3, [r7, #0]
 810c5d4:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 810c5d6:	687b      	ldr	r3, [r7, #4]
 810c5d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 810c5da:	0d5b      	lsrs	r3, r3, #21
 810c5dc:	b2db      	uxtb	r3, r3
 810c5de:	f003 0301 	and.w	r3, r3, #1
 810c5e2:	b2da      	uxtb	r2, r3
 810c5e4:	683b      	ldr	r3, [r7, #0]
 810c5e6:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 810c5ea:	683b      	ldr	r3, [r7, #0]
 810c5ec:	2200      	movs	r2, #0
 810c5ee:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 810c5f2:	687b      	ldr	r3, [r7, #4]
 810c5f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 810c5f6:	0c1b      	lsrs	r3, r3, #16
 810c5f8:	b2db      	uxtb	r3, r3
 810c5fa:	f003 0301 	and.w	r3, r3, #1
 810c5fe:	b2da      	uxtb	r2, r3
 810c600:	683b      	ldr	r3, [r7, #0]
 810c602:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 810c606:	687b      	ldr	r3, [r7, #4]
 810c608:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 810c60a:	0bdb      	lsrs	r3, r3, #15
 810c60c:	b2db      	uxtb	r3, r3
 810c60e:	f003 0301 	and.w	r3, r3, #1
 810c612:	b2da      	uxtb	r2, r3
 810c614:	683b      	ldr	r3, [r7, #0]
 810c616:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 810c61a:	687b      	ldr	r3, [r7, #4]
 810c61c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 810c61e:	0b9b      	lsrs	r3, r3, #14
 810c620:	b2db      	uxtb	r3, r3
 810c622:	f003 0301 	and.w	r3, r3, #1
 810c626:	b2da      	uxtb	r2, r3
 810c628:	683b      	ldr	r3, [r7, #0]
 810c62a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 810c62e:	687b      	ldr	r3, [r7, #4]
 810c630:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 810c632:	0b5b      	lsrs	r3, r3, #13
 810c634:	b2db      	uxtb	r3, r3
 810c636:	f003 0301 	and.w	r3, r3, #1
 810c63a:	b2da      	uxtb	r2, r3
 810c63c:	683b      	ldr	r3, [r7, #0]
 810c63e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 810c642:	687b      	ldr	r3, [r7, #4]
 810c644:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 810c646:	0b1b      	lsrs	r3, r3, #12
 810c648:	b2db      	uxtb	r3, r3
 810c64a:	f003 0301 	and.w	r3, r3, #1
 810c64e:	b2da      	uxtb	r2, r3
 810c650:	683b      	ldr	r3, [r7, #0]
 810c652:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 810c656:	687b      	ldr	r3, [r7, #4]
 810c658:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 810c65a:	0a9b      	lsrs	r3, r3, #10
 810c65c:	b2db      	uxtb	r3, r3
 810c65e:	f003 0303 	and.w	r3, r3, #3
 810c662:	b2da      	uxtb	r2, r3
 810c664:	683b      	ldr	r3, [r7, #0]
 810c666:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 810c66a:	687b      	ldr	r3, [r7, #4]
 810c66c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 810c66e:	0a1b      	lsrs	r3, r3, #8
 810c670:	b2db      	uxtb	r3, r3
 810c672:	f003 0303 	and.w	r3, r3, #3
 810c676:	b2da      	uxtb	r2, r3
 810c678:	683b      	ldr	r3, [r7, #0]
 810c67a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 810c67e:	687b      	ldr	r3, [r7, #4]
 810c680:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 810c682:	085b      	lsrs	r3, r3, #1
 810c684:	b2db      	uxtb	r3, r3
 810c686:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 810c68a:	b2da      	uxtb	r2, r3
 810c68c:	683b      	ldr	r3, [r7, #0]
 810c68e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 810c692:	683b      	ldr	r3, [r7, #0]
 810c694:	2201      	movs	r2, #1
 810c696:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 810c69a:	2300      	movs	r3, #0
}
 810c69c:	4618      	mov	r0, r3
 810c69e:	370c      	adds	r7, #12
 810c6a0:	46bd      	mov	sp, r7
 810c6a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c6a6:	4770      	bx	lr
 810c6a8:	1fe00fff 	.word	0x1fe00fff

0810c6ac <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 810c6ac:	b580      	push	{r7, lr}
 810c6ae:	b094      	sub	sp, #80	; 0x50
 810c6b0:	af00      	add	r7, sp, #0
 810c6b2:	6078      	str	r0, [r7, #4]
 810c6b4:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 810c6b6:	2300      	movs	r3, #0
 810c6b8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  errorstate = SD_SendSDStatus(hsd, sd_status);
 810c6bc:	f107 0308 	add.w	r3, r7, #8
 810c6c0:	4619      	mov	r1, r3
 810c6c2:	6878      	ldr	r0, [r7, #4]
 810c6c4:	f000 fbcc 	bl	810ce60 <SD_SendSDStatus>
 810c6c8:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 810c6ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 810c6cc:	2b00      	cmp	r3, #0
 810c6ce:	d011      	beq.n	810c6f4 <HAL_SD_GetCardStatus+0x48>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 810c6d0:	687b      	ldr	r3, [r7, #4]
 810c6d2:	681b      	ldr	r3, [r3, #0]
 810c6d4:	4a4f      	ldr	r2, [pc, #316]	; (810c814 <HAL_SD_GetCardStatus+0x168>)
 810c6d6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 810c6d8:	687b      	ldr	r3, [r7, #4]
 810c6da:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 810c6dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 810c6de:	431a      	orrs	r2, r3
 810c6e0:	687b      	ldr	r3, [r7, #4]
 810c6e2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 810c6e4:	687b      	ldr	r3, [r7, #4]
 810c6e6:	2201      	movs	r2, #1
 810c6e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 810c6ec:	2301      	movs	r3, #1
 810c6ee:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 810c6f2:	e070      	b.n	810c7d6 <HAL_SD_GetCardStatus+0x12a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 810c6f4:	68bb      	ldr	r3, [r7, #8]
 810c6f6:	099b      	lsrs	r3, r3, #6
 810c6f8:	b2db      	uxtb	r3, r3
 810c6fa:	f003 0303 	and.w	r3, r3, #3
 810c6fe:	b2da      	uxtb	r2, r3
 810c700:	683b      	ldr	r3, [r7, #0]
 810c702:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 810c704:	68bb      	ldr	r3, [r7, #8]
 810c706:	095b      	lsrs	r3, r3, #5
 810c708:	b2db      	uxtb	r3, r3
 810c70a:	f003 0301 	and.w	r3, r3, #1
 810c70e:	b2da      	uxtb	r2, r3
 810c710:	683b      	ldr	r3, [r7, #0]
 810c712:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 810c714:	68bb      	ldr	r3, [r7, #8]
 810c716:	0a1b      	lsrs	r3, r3, #8
 810c718:	b29b      	uxth	r3, r3
 810c71a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 810c71e:	b29a      	uxth	r2, r3
 810c720:	68bb      	ldr	r3, [r7, #8]
 810c722:	0e1b      	lsrs	r3, r3, #24
 810c724:	b29b      	uxth	r3, r3
 810c726:	4313      	orrs	r3, r2
 810c728:	b29a      	uxth	r2, r3
 810c72a:	683b      	ldr	r3, [r7, #0]
 810c72c:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 810c72e:	68fb      	ldr	r3, [r7, #12]
 810c730:	061a      	lsls	r2, r3, #24
 810c732:	68fb      	ldr	r3, [r7, #12]
 810c734:	021b      	lsls	r3, r3, #8
 810c736:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 810c73a:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 810c73c:	68fb      	ldr	r3, [r7, #12]
 810c73e:	0a1b      	lsrs	r3, r3, #8
 810c740:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 810c744:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 810c746:	68fb      	ldr	r3, [r7, #12]
 810c748:	0e1b      	lsrs	r3, r3, #24
 810c74a:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 810c74c:	683b      	ldr	r3, [r7, #0]
 810c74e:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 810c750:	693b      	ldr	r3, [r7, #16]
 810c752:	b2da      	uxtb	r2, r3
 810c754:	683b      	ldr	r3, [r7, #0]
 810c756:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 810c758:	693b      	ldr	r3, [r7, #16]
 810c75a:	0a1b      	lsrs	r3, r3, #8
 810c75c:	b2da      	uxtb	r2, r3
 810c75e:	683b      	ldr	r3, [r7, #0]
 810c760:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 810c762:	693b      	ldr	r3, [r7, #16]
 810c764:	0d1b      	lsrs	r3, r3, #20
 810c766:	b2db      	uxtb	r3, r3
 810c768:	f003 030f 	and.w	r3, r3, #15
 810c76c:	b2da      	uxtb	r2, r3
 810c76e:	683b      	ldr	r3, [r7, #0]
 810c770:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 810c772:	693b      	ldr	r3, [r7, #16]
 810c774:	0c1b      	lsrs	r3, r3, #16
 810c776:	b29b      	uxth	r3, r3
 810c778:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 810c77c:	b29a      	uxth	r2, r3
 810c77e:	697b      	ldr	r3, [r7, #20]
 810c780:	b29b      	uxth	r3, r3
 810c782:	b2db      	uxtb	r3, r3
 810c784:	b29b      	uxth	r3, r3
 810c786:	4313      	orrs	r3, r2
 810c788:	b29a      	uxth	r2, r3
 810c78a:	683b      	ldr	r3, [r7, #0]
 810c78c:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 810c78e:	697b      	ldr	r3, [r7, #20]
 810c790:	0a9b      	lsrs	r3, r3, #10
 810c792:	b2db      	uxtb	r3, r3
 810c794:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 810c798:	b2da      	uxtb	r2, r3
 810c79a:	683b      	ldr	r3, [r7, #0]
 810c79c:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 810c79e:	697b      	ldr	r3, [r7, #20]
 810c7a0:	0a1b      	lsrs	r3, r3, #8
 810c7a2:	b2db      	uxtb	r3, r3
 810c7a4:	f003 0303 	and.w	r3, r3, #3
 810c7a8:	b2da      	uxtb	r2, r3
 810c7aa:	683b      	ldr	r3, [r7, #0]
 810c7ac:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 810c7ae:	697b      	ldr	r3, [r7, #20]
 810c7b0:	091b      	lsrs	r3, r3, #4
 810c7b2:	b2db      	uxtb	r3, r3
 810c7b4:	f003 030f 	and.w	r3, r3, #15
 810c7b8:	b2da      	uxtb	r2, r3
 810c7ba:	683b      	ldr	r3, [r7, #0]
 810c7bc:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 810c7be:	697b      	ldr	r3, [r7, #20]
 810c7c0:	b2db      	uxtb	r3, r3
 810c7c2:	f003 030f 	and.w	r3, r3, #15
 810c7c6:	b2da      	uxtb	r2, r3
 810c7c8:	683b      	ldr	r3, [r7, #0]
 810c7ca:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 810c7cc:	69bb      	ldr	r3, [r7, #24]
 810c7ce:	0e1b      	lsrs	r3, r3, #24
 810c7d0:	b2da      	uxtb	r2, r3
 810c7d2:	683b      	ldr	r3, [r7, #0]
 810c7d4:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 810c7d6:	687b      	ldr	r3, [r7, #4]
 810c7d8:	681b      	ldr	r3, [r3, #0]
 810c7da:	f44f 7100 	mov.w	r1, #512	; 0x200
 810c7de:	4618      	mov	r0, r3
 810c7e0:	f004 fa4c 	bl	8110c7c <SDMMC_CmdBlockLength>
 810c7e4:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 810c7e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 810c7e8:	2b00      	cmp	r3, #0
 810c7ea:	d00d      	beq.n	810c808 <HAL_SD_GetCardStatus+0x15c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 810c7ec:	687b      	ldr	r3, [r7, #4]
 810c7ee:	681b      	ldr	r3, [r3, #0]
 810c7f0:	4a08      	ldr	r2, [pc, #32]	; (810c814 <HAL_SD_GetCardStatus+0x168>)
 810c7f2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 810c7f4:	687b      	ldr	r3, [r7, #4]
 810c7f6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 810c7f8:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 810c7fa:	687b      	ldr	r3, [r7, #4]
 810c7fc:	2201      	movs	r2, #1
 810c7fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 810c802:	2301      	movs	r3, #1
 810c804:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }

  return status;
 810c808:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 810c80c:	4618      	mov	r0, r3
 810c80e:	3750      	adds	r7, #80	; 0x50
 810c810:	46bd      	mov	sp, r7
 810c812:	bd80      	pop	{r7, pc}
 810c814:	1fe00fff 	.word	0x1fe00fff

0810c818 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 810c818:	b480      	push	{r7}
 810c81a:	b083      	sub	sp, #12
 810c81c:	af00      	add	r7, sp, #0
 810c81e:	6078      	str	r0, [r7, #4]
 810c820:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 810c822:	687b      	ldr	r3, [r7, #4]
 810c824:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 810c826:	683b      	ldr	r3, [r7, #0]
 810c828:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 810c82a:	687b      	ldr	r3, [r7, #4]
 810c82c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 810c82e:	683b      	ldr	r3, [r7, #0]
 810c830:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 810c832:	687b      	ldr	r3, [r7, #4]
 810c834:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 810c836:	683b      	ldr	r3, [r7, #0]
 810c838:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 810c83a:	687b      	ldr	r3, [r7, #4]
 810c83c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 810c83e:	683b      	ldr	r3, [r7, #0]
 810c840:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 810c842:	687b      	ldr	r3, [r7, #4]
 810c844:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 810c846:	683b      	ldr	r3, [r7, #0]
 810c848:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 810c84a:	687b      	ldr	r3, [r7, #4]
 810c84c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 810c84e:	683b      	ldr	r3, [r7, #0]
 810c850:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 810c852:	687b      	ldr	r3, [r7, #4]
 810c854:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 810c856:	683b      	ldr	r3, [r7, #0]
 810c858:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 810c85a:	687b      	ldr	r3, [r7, #4]
 810c85c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 810c85e:	683b      	ldr	r3, [r7, #0]
 810c860:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 810c862:	2300      	movs	r3, #0
}
 810c864:	4618      	mov	r0, r3
 810c866:	370c      	adds	r7, #12
 810c868:	46bd      	mov	sp, r7
 810c86a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c86e:	4770      	bx	lr

0810c870 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 810c870:	b5b0      	push	{r4, r5, r7, lr}
 810c872:	b090      	sub	sp, #64	; 0x40
 810c874:	af04      	add	r7, sp, #16
 810c876:	6078      	str	r0, [r7, #4]
 810c878:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 810c87a:	2300      	movs	r3, #0
 810c87c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 810c880:	687b      	ldr	r3, [r7, #4]
 810c882:	2203      	movs	r2, #3
 810c884:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if (hsd->SdCard.CardType != CARD_SECURED)
 810c888:	687b      	ldr	r3, [r7, #4]
 810c88a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810c88c:	2b03      	cmp	r3, #3
 810c88e:	d02e      	beq.n	810c8ee <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 810c890:	683b      	ldr	r3, [r7, #0]
 810c892:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 810c896:	d106      	bne.n	810c8a6 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 810c898:	687b      	ldr	r3, [r7, #4]
 810c89a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810c89c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 810c8a0:	687b      	ldr	r3, [r7, #4]
 810c8a2:	639a      	str	r2, [r3, #56]	; 0x38
 810c8a4:	e029      	b.n	810c8fa <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 810c8a6:	683b      	ldr	r3, [r7, #0]
 810c8a8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 810c8ac:	d10a      	bne.n	810c8c4 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 810c8ae:	6878      	ldr	r0, [r7, #4]
 810c8b0:	f000 fbce 	bl	810d050 <SD_WideBus_Enable>
 810c8b4:	62b8      	str	r0, [r7, #40]	; 0x28

      hsd->ErrorCode |= errorstate;
 810c8b6:	687b      	ldr	r3, [r7, #4]
 810c8b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 810c8ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810c8bc:	431a      	orrs	r2, r3
 810c8be:	687b      	ldr	r3, [r7, #4]
 810c8c0:	639a      	str	r2, [r3, #56]	; 0x38
 810c8c2:	e01a      	b.n	810c8fa <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 810c8c4:	683b      	ldr	r3, [r7, #0]
 810c8c6:	2b00      	cmp	r3, #0
 810c8c8:	d10a      	bne.n	810c8e0 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 810c8ca:	6878      	ldr	r0, [r7, #4]
 810c8cc:	f000 fc0b 	bl	810d0e6 <SD_WideBus_Disable>
 810c8d0:	62b8      	str	r0, [r7, #40]	; 0x28

      hsd->ErrorCode |= errorstate;
 810c8d2:	687b      	ldr	r3, [r7, #4]
 810c8d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 810c8d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810c8d8:	431a      	orrs	r2, r3
 810c8da:	687b      	ldr	r3, [r7, #4]
 810c8dc:	639a      	str	r2, [r3, #56]	; 0x38
 810c8de:	e00c      	b.n	810c8fa <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 810c8e0:	687b      	ldr	r3, [r7, #4]
 810c8e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810c8e4:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 810c8e8:	687b      	ldr	r3, [r7, #4]
 810c8ea:	639a      	str	r2, [r3, #56]	; 0x38
 810c8ec:	e005      	b.n	810c8fa <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 810c8ee:	687b      	ldr	r3, [r7, #4]
 810c8f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810c8f2:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 810c8f6:	687b      	ldr	r3, [r7, #4]
 810c8f8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 810c8fa:	687b      	ldr	r3, [r7, #4]
 810c8fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810c8fe:	2b00      	cmp	r3, #0
 810c900:	d007      	beq.n	810c912 <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 810c902:	687b      	ldr	r3, [r7, #4]
 810c904:	681b      	ldr	r3, [r3, #0]
 810c906:	4a60      	ldr	r2, [pc, #384]	; (810ca88 <HAL_SD_ConfigWideBusOperation+0x218>)
 810c908:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 810c90a:	2301      	movs	r3, #1
 810c90c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 810c910:	e097      	b.n	810ca42 <HAL_SD_ConfigWideBusOperation+0x1d2>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 810c912:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 810c916:	f7fd fe97 	bl	810a648 <HAL_RCCEx_GetPeriphCLKFreq>
 810c91a:	6278      	str	r0, [r7, #36]	; 0x24
    if (sdmmc_clk != 0U)
 810c91c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810c91e:	2b00      	cmp	r3, #0
 810c920:	f000 8086 	beq.w	810ca30 <HAL_SD_ConfigWideBusOperation+0x1c0>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 810c924:	687b      	ldr	r3, [r7, #4]
 810c926:	685b      	ldr	r3, [r3, #4]
 810c928:	60fb      	str	r3, [r7, #12]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 810c92a:	687b      	ldr	r3, [r7, #4]
 810c92c:	689b      	ldr	r3, [r3, #8]
 810c92e:	613b      	str	r3, [r7, #16]
      Init.BusWide             = WideMode;
 810c930:	683b      	ldr	r3, [r7, #0]
 810c932:	617b      	str	r3, [r7, #20]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 810c934:	687b      	ldr	r3, [r7, #4]
 810c936:	691b      	ldr	r3, [r3, #16]
 810c938:	61bb      	str	r3, [r7, #24]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 810c93a:	687b      	ldr	r3, [r7, #4]
 810c93c:	695a      	ldr	r2, [r3, #20]
 810c93e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810c940:	4952      	ldr	r1, [pc, #328]	; (810ca8c <HAL_SD_ConfigWideBusOperation+0x21c>)
 810c942:	fba1 1303 	umull	r1, r3, r1, r3
 810c946:	0e1b      	lsrs	r3, r3, #24
 810c948:	429a      	cmp	r2, r3
 810c94a:	d303      	bcc.n	810c954 <HAL_SD_ConfigWideBusOperation+0xe4>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 810c94c:	687b      	ldr	r3, [r7, #4]
 810c94e:	695b      	ldr	r3, [r3, #20]
 810c950:	61fb      	str	r3, [r7, #28]
 810c952:	e05a      	b.n	810ca0a <HAL_SD_ConfigWideBusOperation+0x19a>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 810c954:	687b      	ldr	r3, [r7, #4]
 810c956:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 810c958:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 810c95c:	d103      	bne.n	810c966 <HAL_SD_ConfigWideBusOperation+0xf6>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 810c95e:	687b      	ldr	r3, [r7, #4]
 810c960:	695b      	ldr	r3, [r3, #20]
 810c962:	61fb      	str	r3, [r7, #28]
 810c964:	e051      	b.n	810ca0a <HAL_SD_ConfigWideBusOperation+0x19a>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 810c966:	687b      	ldr	r3, [r7, #4]
 810c968:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 810c96a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810c96e:	d126      	bne.n	810c9be <HAL_SD_ConfigWideBusOperation+0x14e>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 810c970:	687b      	ldr	r3, [r7, #4]
 810c972:	695b      	ldr	r3, [r3, #20]
 810c974:	2b00      	cmp	r3, #0
 810c976:	d10e      	bne.n	810c996 <HAL_SD_ConfigWideBusOperation+0x126>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 810c978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810c97a:	4a45      	ldr	r2, [pc, #276]	; (810ca90 <HAL_SD_ConfigWideBusOperation+0x220>)
 810c97c:	4293      	cmp	r3, r2
 810c97e:	d906      	bls.n	810c98e <HAL_SD_ConfigWideBusOperation+0x11e>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 810c980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810c982:	4a42      	ldr	r2, [pc, #264]	; (810ca8c <HAL_SD_ConfigWideBusOperation+0x21c>)
 810c984:	fba2 2303 	umull	r2, r3, r2, r3
 810c988:	0e5b      	lsrs	r3, r3, #25
 810c98a:	61fb      	str	r3, [r7, #28]
 810c98c:	e03d      	b.n	810ca0a <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 810c98e:	687b      	ldr	r3, [r7, #4]
 810c990:	695b      	ldr	r3, [r3, #20]
 810c992:	61fb      	str	r3, [r7, #28]
 810c994:	e039      	b.n	810ca0a <HAL_SD_ConfigWideBusOperation+0x19a>
          }
        }
        else
        {
          if ((sdmmc_clk/(2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 810c996:	687b      	ldr	r3, [r7, #4]
 810c998:	695b      	ldr	r3, [r3, #20]
 810c99a:	005b      	lsls	r3, r3, #1
 810c99c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 810c99e:	fbb2 f3f3 	udiv	r3, r2, r3
 810c9a2:	4a3b      	ldr	r2, [pc, #236]	; (810ca90 <HAL_SD_ConfigWideBusOperation+0x220>)
 810c9a4:	4293      	cmp	r3, r2
 810c9a6:	d906      	bls.n	810c9b6 <HAL_SD_ConfigWideBusOperation+0x146>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 810c9a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810c9aa:	4a38      	ldr	r2, [pc, #224]	; (810ca8c <HAL_SD_ConfigWideBusOperation+0x21c>)
 810c9ac:	fba2 2303 	umull	r2, r3, r2, r3
 810c9b0:	0e5b      	lsrs	r3, r3, #25
 810c9b2:	61fb      	str	r3, [r7, #28]
 810c9b4:	e029      	b.n	810ca0a <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 810c9b6:	687b      	ldr	r3, [r7, #4]
 810c9b8:	695b      	ldr	r3, [r3, #20]
 810c9ba:	61fb      	str	r3, [r7, #28]
 810c9bc:	e025      	b.n	810ca0a <HAL_SD_ConfigWideBusOperation+0x19a>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 810c9be:	687b      	ldr	r3, [r7, #4]
 810c9c0:	695b      	ldr	r3, [r3, #20]
 810c9c2:	2b00      	cmp	r3, #0
 810c9c4:	d10e      	bne.n	810c9e4 <HAL_SD_ConfigWideBusOperation+0x174>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 810c9c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810c9c8:	4a32      	ldr	r2, [pc, #200]	; (810ca94 <HAL_SD_ConfigWideBusOperation+0x224>)
 810c9ca:	4293      	cmp	r3, r2
 810c9cc:	d906      	bls.n	810c9dc <HAL_SD_ConfigWideBusOperation+0x16c>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 810c9ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810c9d0:	4a2e      	ldr	r2, [pc, #184]	; (810ca8c <HAL_SD_ConfigWideBusOperation+0x21c>)
 810c9d2:	fba2 2303 	umull	r2, r3, r2, r3
 810c9d6:	0e1b      	lsrs	r3, r3, #24
 810c9d8:	61fb      	str	r3, [r7, #28]
 810c9da:	e016      	b.n	810ca0a <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 810c9dc:	687b      	ldr	r3, [r7, #4]
 810c9de:	695b      	ldr	r3, [r3, #20]
 810c9e0:	61fb      	str	r3, [r7, #28]
 810c9e2:	e012      	b.n	810ca0a <HAL_SD_ConfigWideBusOperation+0x19a>
          }
        }
        else
        {
          if ((sdmmc_clk/(2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 810c9e4:	687b      	ldr	r3, [r7, #4]
 810c9e6:	695b      	ldr	r3, [r3, #20]
 810c9e8:	005b      	lsls	r3, r3, #1
 810c9ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 810c9ec:	fbb2 f3f3 	udiv	r3, r2, r3
 810c9f0:	4a28      	ldr	r2, [pc, #160]	; (810ca94 <HAL_SD_ConfigWideBusOperation+0x224>)
 810c9f2:	4293      	cmp	r3, r2
 810c9f4:	d906      	bls.n	810ca04 <HAL_SD_ConfigWideBusOperation+0x194>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 810c9f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810c9f8:	4a24      	ldr	r2, [pc, #144]	; (810ca8c <HAL_SD_ConfigWideBusOperation+0x21c>)
 810c9fa:	fba2 2303 	umull	r2, r3, r2, r3
 810c9fe:	0e1b      	lsrs	r3, r3, #24
 810ca00:	61fb      	str	r3, [r7, #28]
 810ca02:	e002      	b.n	810ca0a <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 810ca04:	687b      	ldr	r3, [r7, #4]
 810ca06:	695b      	ldr	r3, [r3, #20]
 810ca08:	61fb      	str	r3, [r7, #28]
          }
        }
      }

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
 810ca0a:	687b      	ldr	r3, [r7, #4]
 810ca0c:	699b      	ldr	r3, [r3, #24]
 810ca0e:	623b      	str	r3, [r7, #32]
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 810ca10:	687b      	ldr	r3, [r7, #4]
 810ca12:	681d      	ldr	r5, [r3, #0]
 810ca14:	466c      	mov	r4, sp
 810ca16:	f107 0318 	add.w	r3, r7, #24
 810ca1a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 810ca1e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 810ca22:	f107 030c 	add.w	r3, r7, #12
 810ca26:	cb0e      	ldmia	r3, {r1, r2, r3}
 810ca28:	4628      	mov	r0, r5
 810ca2a:	f004 f849 	bl	8110ac0 <SDMMC_Init>
 810ca2e:	e008      	b.n	810ca42 <HAL_SD_ConfigWideBusOperation+0x1d2>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 810ca30:	687b      	ldr	r3, [r7, #4]
 810ca32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810ca34:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 810ca38:	687b      	ldr	r3, [r7, #4]
 810ca3a:	639a      	str	r2, [r3, #56]	; 0x38
      status = HAL_ERROR;
 810ca3c:	2301      	movs	r3, #1
 810ca3e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 810ca42:	687b      	ldr	r3, [r7, #4]
 810ca44:	681b      	ldr	r3, [r3, #0]
 810ca46:	f44f 7100 	mov.w	r1, #512	; 0x200
 810ca4a:	4618      	mov	r0, r3
 810ca4c:	f004 f916 	bl	8110c7c <SDMMC_CmdBlockLength>
 810ca50:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 810ca52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810ca54:	2b00      	cmp	r3, #0
 810ca56:	d00c      	beq.n	810ca72 <HAL_SD_ConfigWideBusOperation+0x202>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 810ca58:	687b      	ldr	r3, [r7, #4]
 810ca5a:	681b      	ldr	r3, [r3, #0]
 810ca5c:	4a0a      	ldr	r2, [pc, #40]	; (810ca88 <HAL_SD_ConfigWideBusOperation+0x218>)
 810ca5e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 810ca60:	687b      	ldr	r3, [r7, #4]
 810ca62:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 810ca64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810ca66:	431a      	orrs	r2, r3
 810ca68:	687b      	ldr	r3, [r7, #4]
 810ca6a:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 810ca6c:	2301      	movs	r3, #1
 810ca6e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 810ca72:	687b      	ldr	r3, [r7, #4]
 810ca74:	2201      	movs	r2, #1
 810ca76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 810ca7a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 810ca7e:	4618      	mov	r0, r3
 810ca80:	3730      	adds	r7, #48	; 0x30
 810ca82:	46bd      	mov	sp, r7
 810ca84:	bdb0      	pop	{r4, r5, r7, pc}
 810ca86:	bf00      	nop
 810ca88:	1fe00fff 	.word	0x1fe00fff
 810ca8c:	55e63b89 	.word	0x55e63b89
 810ca90:	02faf080 	.word	0x02faf080
 810ca94:	017d7840 	.word	0x017d7840

0810ca98 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 810ca98:	b580      	push	{r7, lr}
 810ca9a:	b086      	sub	sp, #24
 810ca9c:	af00      	add	r7, sp, #0
 810ca9e:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 810caa0:	2300      	movs	r3, #0
 810caa2:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 810caa4:	f107 030c 	add.w	r3, r7, #12
 810caa8:	4619      	mov	r1, r3
 810caaa:	6878      	ldr	r0, [r7, #4]
 810caac:	f000 faa8 	bl	810d000 <SD_SendStatus>
 810cab0:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 810cab2:	697b      	ldr	r3, [r7, #20]
 810cab4:	2b00      	cmp	r3, #0
 810cab6:	d005      	beq.n	810cac4 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 810cab8:	687b      	ldr	r3, [r7, #4]
 810caba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 810cabc:	697b      	ldr	r3, [r7, #20]
 810cabe:	431a      	orrs	r2, r3
 810cac0:	687b      	ldr	r3, [r7, #4]
 810cac2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 810cac4:	68fb      	ldr	r3, [r7, #12]
 810cac6:	0a5b      	lsrs	r3, r3, #9
 810cac8:	f003 030f 	and.w	r3, r3, #15
 810cacc:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 810cace:	693b      	ldr	r3, [r7, #16]
}
 810cad0:	4618      	mov	r0, r3
 810cad2:	3718      	adds	r7, #24
 810cad4:	46bd      	mov	sp, r7
 810cad6:	bd80      	pop	{r7, pc}

0810cad8 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 810cad8:	b580      	push	{r7, lr}
 810cada:	b090      	sub	sp, #64	; 0x40
 810cadc:	af00      	add	r7, sp, #0
 810cade:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 810cae0:	2301      	movs	r3, #1
 810cae2:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 810cae4:	687b      	ldr	r3, [r7, #4]
 810cae6:	681b      	ldr	r3, [r3, #0]
 810cae8:	4618      	mov	r0, r3
 810caea:	f004 f842 	bl	8110b72 <SDMMC_GetPowerState>
 810caee:	4603      	mov	r3, r0
 810caf0:	2b00      	cmp	r3, #0
 810caf2:	d102      	bne.n	810cafa <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 810caf4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 810caf8:	e0a5      	b.n	810cc46 <SD_InitCard+0x16e>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 810cafa:	687b      	ldr	r3, [r7, #4]
 810cafc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810cafe:	2b03      	cmp	r3, #3
 810cb00:	d02e      	beq.n	810cb60 <SD_InitCard+0x88>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 810cb02:	687b      	ldr	r3, [r7, #4]
 810cb04:	681b      	ldr	r3, [r3, #0]
 810cb06:	4618      	mov	r0, r3
 810cb08:	f004 fa8d 	bl	8111026 <SDMMC_CmdSendCID>
 810cb0c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if (errorstate != HAL_SD_ERROR_NONE)
 810cb0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 810cb10:	2b00      	cmp	r3, #0
 810cb12:	d001      	beq.n	810cb18 <SD_InitCard+0x40>
    {
      return errorstate;
 810cb14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 810cb16:	e096      	b.n	810cc46 <SD_InitCard+0x16e>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 810cb18:	687b      	ldr	r3, [r7, #4]
 810cb1a:	681b      	ldr	r3, [r3, #0]
 810cb1c:	2100      	movs	r1, #0
 810cb1e:	4618      	mov	r0, r3
 810cb20:	f004 f86d 	bl	8110bfe <SDMMC_GetResponse>
 810cb24:	4602      	mov	r2, r0
 810cb26:	687b      	ldr	r3, [r7, #4]
 810cb28:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 810cb2a:	687b      	ldr	r3, [r7, #4]
 810cb2c:	681b      	ldr	r3, [r3, #0]
 810cb2e:	2104      	movs	r1, #4
 810cb30:	4618      	mov	r0, r3
 810cb32:	f004 f864 	bl	8110bfe <SDMMC_GetResponse>
 810cb36:	4602      	mov	r2, r0
 810cb38:	687b      	ldr	r3, [r7, #4]
 810cb3a:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 810cb3c:	687b      	ldr	r3, [r7, #4]
 810cb3e:	681b      	ldr	r3, [r3, #0]
 810cb40:	2108      	movs	r1, #8
 810cb42:	4618      	mov	r0, r3
 810cb44:	f004 f85b 	bl	8110bfe <SDMMC_GetResponse>
 810cb48:	4602      	mov	r2, r0
 810cb4a:	687b      	ldr	r3, [r7, #4]
 810cb4c:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 810cb4e:	687b      	ldr	r3, [r7, #4]
 810cb50:	681b      	ldr	r3, [r3, #0]
 810cb52:	210c      	movs	r1, #12
 810cb54:	4618      	mov	r0, r3
 810cb56:	f004 f852 	bl	8110bfe <SDMMC_GetResponse>
 810cb5a:	4602      	mov	r2, r0
 810cb5c:	687b      	ldr	r3, [r7, #4]
 810cb5e:	67da      	str	r2, [r3, #124]	; 0x7c
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 810cb60:	687b      	ldr	r3, [r7, #4]
 810cb62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810cb64:	2b03      	cmp	r3, #3
 810cb66:	d00d      	beq.n	810cb84 <SD_InitCard+0xac>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 810cb68:	687b      	ldr	r3, [r7, #4]
 810cb6a:	681b      	ldr	r3, [r3, #0]
 810cb6c:	f107 020e 	add.w	r2, r7, #14
 810cb70:	4611      	mov	r1, r2
 810cb72:	4618      	mov	r0, r3
 810cb74:	f004 fa96 	bl	81110a4 <SDMMC_CmdSetRelAdd>
 810cb78:	63f8      	str	r0, [r7, #60]	; 0x3c
    if (errorstate != HAL_SD_ERROR_NONE)
 810cb7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 810cb7c:	2b00      	cmp	r3, #0
 810cb7e:	d001      	beq.n	810cb84 <SD_InitCard+0xac>
    {
      return errorstate;
 810cb80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 810cb82:	e060      	b.n	810cc46 <SD_InitCard+0x16e>
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 810cb84:	687b      	ldr	r3, [r7, #4]
 810cb86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810cb88:	2b03      	cmp	r3, #3
 810cb8a:	d036      	beq.n	810cbfa <SD_InitCard+0x122>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 810cb8c:	89fb      	ldrh	r3, [r7, #14]
 810cb8e:	461a      	mov	r2, r3
 810cb90:	687b      	ldr	r3, [r7, #4]
 810cb92:	649a      	str	r2, [r3, #72]	; 0x48

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 810cb94:	687b      	ldr	r3, [r7, #4]
 810cb96:	681a      	ldr	r2, [r3, #0]
 810cb98:	687b      	ldr	r3, [r7, #4]
 810cb9a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 810cb9c:	041b      	lsls	r3, r3, #16
 810cb9e:	4619      	mov	r1, r3
 810cba0:	4610      	mov	r0, r2
 810cba2:	f004 fa5f 	bl	8111064 <SDMMC_CmdSendCSD>
 810cba6:	63f8      	str	r0, [r7, #60]	; 0x3c
    if (errorstate != HAL_SD_ERROR_NONE)
 810cba8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 810cbaa:	2b00      	cmp	r3, #0
 810cbac:	d001      	beq.n	810cbb2 <SD_InitCard+0xda>
    {
      return errorstate;
 810cbae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 810cbb0:	e049      	b.n	810cc46 <SD_InitCard+0x16e>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 810cbb2:	687b      	ldr	r3, [r7, #4]
 810cbb4:	681b      	ldr	r3, [r3, #0]
 810cbb6:	2100      	movs	r1, #0
 810cbb8:	4618      	mov	r0, r3
 810cbba:	f004 f820 	bl	8110bfe <SDMMC_GetResponse>
 810cbbe:	4602      	mov	r2, r0
 810cbc0:	687b      	ldr	r3, [r7, #4]
 810cbc2:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 810cbc4:	687b      	ldr	r3, [r7, #4]
 810cbc6:	681b      	ldr	r3, [r3, #0]
 810cbc8:	2104      	movs	r1, #4
 810cbca:	4618      	mov	r0, r3
 810cbcc:	f004 f817 	bl	8110bfe <SDMMC_GetResponse>
 810cbd0:	4602      	mov	r2, r0
 810cbd2:	687b      	ldr	r3, [r7, #4]
 810cbd4:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 810cbd6:	687b      	ldr	r3, [r7, #4]
 810cbd8:	681b      	ldr	r3, [r3, #0]
 810cbda:	2108      	movs	r1, #8
 810cbdc:	4618      	mov	r0, r3
 810cbde:	f004 f80e 	bl	8110bfe <SDMMC_GetResponse>
 810cbe2:	4602      	mov	r2, r0
 810cbe4:	687b      	ldr	r3, [r7, #4]
 810cbe6:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 810cbe8:	687b      	ldr	r3, [r7, #4]
 810cbea:	681b      	ldr	r3, [r3, #0]
 810cbec:	210c      	movs	r1, #12
 810cbee:	4618      	mov	r0, r3
 810cbf0:	f004 f805 	bl	8110bfe <SDMMC_GetResponse>
 810cbf4:	4602      	mov	r2, r0
 810cbf6:	687b      	ldr	r3, [r7, #4]
 810cbf8:	66da      	str	r2, [r3, #108]	; 0x6c
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 810cbfa:	687b      	ldr	r3, [r7, #4]
 810cbfc:	681b      	ldr	r3, [r3, #0]
 810cbfe:	2104      	movs	r1, #4
 810cc00:	4618      	mov	r0, r3
 810cc02:	f003 fffc 	bl	8110bfe <SDMMC_GetResponse>
 810cc06:	4603      	mov	r3, r0
 810cc08:	0d1a      	lsrs	r2, r3, #20
 810cc0a:	687b      	ldr	r3, [r7, #4]
 810cc0c:	645a      	str	r2, [r3, #68]	; 0x44

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 810cc0e:	f107 0310 	add.w	r3, r7, #16
 810cc12:	4619      	mov	r1, r3
 810cc14:	6878      	ldr	r0, [r7, #4]
 810cc16:	f7ff fba5 	bl	810c364 <HAL_SD_GetCardCSD>
 810cc1a:	4603      	mov	r3, r0
 810cc1c:	2b00      	cmp	r3, #0
 810cc1e:	d002      	beq.n	810cc26 <SD_InitCard+0x14e>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 810cc20:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 810cc24:	e00f      	b.n	810cc46 <SD_InitCard+0x16e>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 810cc26:	687b      	ldr	r3, [r7, #4]
 810cc28:	681a      	ldr	r2, [r3, #0]
 810cc2a:	687b      	ldr	r3, [r7, #4]
 810cc2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 810cc2e:	041b      	lsls	r3, r3, #16
 810cc30:	4619      	mov	r1, r3
 810cc32:	4610      	mov	r0, r2
 810cc34:	f004 f90e 	bl	8110e54 <SDMMC_CmdSelDesel>
 810cc38:	63f8      	str	r0, [r7, #60]	; 0x3c
  if (errorstate != HAL_SD_ERROR_NONE)
 810cc3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 810cc3c:	2b00      	cmp	r3, #0
 810cc3e:	d001      	beq.n	810cc44 <SD_InitCard+0x16c>
  {
    return errorstate;
 810cc40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 810cc42:	e000      	b.n	810cc46 <SD_InitCard+0x16e>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 810cc44:	2300      	movs	r3, #0
}
 810cc46:	4618      	mov	r0, r3
 810cc48:	3740      	adds	r7, #64	; 0x40
 810cc4a:	46bd      	mov	sp, r7
 810cc4c:	bd80      	pop	{r7, pc}
	...

0810cc50 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 810cc50:	b580      	push	{r7, lr}
 810cc52:	b088      	sub	sp, #32
 810cc54:	af00      	add	r7, sp, #0
 810cc56:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 810cc58:	2300      	movs	r3, #0
 810cc5a:	60fb      	str	r3, [r7, #12]
  uint32_t response = 0U;
 810cc5c:	2300      	movs	r3, #0
 810cc5e:	61fb      	str	r3, [r7, #28]
  uint32_t validvoltage = 0U;
 810cc60:	2300      	movs	r3, #0
 810cc62:	61bb      	str	r3, [r7, #24]
  uint32_t errorstate;
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
 810cc64:	f7f5 fec8 	bl	81029f8 <HAL_GetTick>
 810cc68:	6178      	str	r0, [r7, #20]
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 810cc6a:	687b      	ldr	r3, [r7, #4]
 810cc6c:	681b      	ldr	r3, [r3, #0]
 810cc6e:	4618      	mov	r0, r3
 810cc70:	f004 f913 	bl	8110e9a <SDMMC_CmdGoIdleState>
 810cc74:	6138      	str	r0, [r7, #16]
  if (errorstate != HAL_SD_ERROR_NONE)
 810cc76:	693b      	ldr	r3, [r7, #16]
 810cc78:	2b00      	cmp	r3, #0
 810cc7a:	d001      	beq.n	810cc80 <SD_PowerON+0x30>
  {
    return errorstate;
 810cc7c:	693b      	ldr	r3, [r7, #16]
 810cc7e:	e0e9      	b.n	810ce54 <SD_PowerON+0x204>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 810cc80:	687b      	ldr	r3, [r7, #4]
 810cc82:	681b      	ldr	r3, [r3, #0]
 810cc84:	4618      	mov	r0, r3
 810cc86:	f004 f926 	bl	8110ed6 <SDMMC_CmdOperCond>
 810cc8a:	6138      	str	r0, [r7, #16]
  if (errorstate != HAL_SD_ERROR_NONE)
 810cc8c:	693b      	ldr	r3, [r7, #16]
 810cc8e:	2b00      	cmp	r3, #0
 810cc90:	d00d      	beq.n	810ccae <SD_PowerON+0x5e>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 810cc92:	687b      	ldr	r3, [r7, #4]
 810cc94:	2200      	movs	r2, #0
 810cc96:	641a      	str	r2, [r3, #64]	; 0x40
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 810cc98:	687b      	ldr	r3, [r7, #4]
 810cc9a:	681b      	ldr	r3, [r3, #0]
 810cc9c:	4618      	mov	r0, r3
 810cc9e:	f004 f8fc 	bl	8110e9a <SDMMC_CmdGoIdleState>
 810cca2:	6138      	str	r0, [r7, #16]
    if (errorstate != HAL_SD_ERROR_NONE)
 810cca4:	693b      	ldr	r3, [r7, #16]
 810cca6:	2b00      	cmp	r3, #0
 810cca8:	d004      	beq.n	810ccb4 <SD_PowerON+0x64>
    {
      return errorstate;
 810ccaa:	693b      	ldr	r3, [r7, #16]
 810ccac:	e0d2      	b.n	810ce54 <SD_PowerON+0x204>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 810ccae:	687b      	ldr	r3, [r7, #4]
 810ccb0:	2201      	movs	r2, #1
 810ccb2:	641a      	str	r2, [r3, #64]	; 0x40
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 810ccb4:	687b      	ldr	r3, [r7, #4]
 810ccb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810ccb8:	2b01      	cmp	r3, #1
 810ccba:	d137      	bne.n	810cd2c <SD_PowerON+0xdc>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 810ccbc:	687b      	ldr	r3, [r7, #4]
 810ccbe:	681b      	ldr	r3, [r3, #0]
 810ccc0:	2100      	movs	r1, #0
 810ccc2:	4618      	mov	r0, r3
 810ccc4:	f004 f927 	bl	8110f16 <SDMMC_CmdAppCommand>
 810ccc8:	6138      	str	r0, [r7, #16]
    if (errorstate != HAL_SD_ERROR_NONE)
 810ccca:	693b      	ldr	r3, [r7, #16]
 810cccc:	2b00      	cmp	r3, #0
 810ccce:	d02d      	beq.n	810cd2c <SD_PowerON+0xdc>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 810ccd0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 810ccd4:	e0be      	b.n	810ce54 <SD_PowerON+0x204>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 810ccd6:	687b      	ldr	r3, [r7, #4]
 810ccd8:	681b      	ldr	r3, [r3, #0]
 810ccda:	2100      	movs	r1, #0
 810ccdc:	4618      	mov	r0, r3
 810ccde:	f004 f91a 	bl	8110f16 <SDMMC_CmdAppCommand>
 810cce2:	6138      	str	r0, [r7, #16]
    if (errorstate != HAL_SD_ERROR_NONE)
 810cce4:	693b      	ldr	r3, [r7, #16]
 810cce6:	2b00      	cmp	r3, #0
 810cce8:	d001      	beq.n	810ccee <SD_PowerON+0x9e>
    {
      return errorstate;
 810ccea:	693b      	ldr	r3, [r7, #16]
 810ccec:	e0b2      	b.n	810ce54 <SD_PowerON+0x204>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 810ccee:	687b      	ldr	r3, [r7, #4]
 810ccf0:	681b      	ldr	r3, [r3, #0]
 810ccf2:	495a      	ldr	r1, [pc, #360]	; (810ce5c <SD_PowerON+0x20c>)
 810ccf4:	4618      	mov	r0, r3
 810ccf6:	f004 f931 	bl	8110f5c <SDMMC_CmdAppOperCommand>
 810ccfa:	6138      	str	r0, [r7, #16]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 810ccfc:	693b      	ldr	r3, [r7, #16]
 810ccfe:	2b00      	cmp	r3, #0
 810cd00:	d002      	beq.n	810cd08 <SD_PowerON+0xb8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 810cd02:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 810cd06:	e0a5      	b.n	810ce54 <SD_PowerON+0x204>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 810cd08:	687b      	ldr	r3, [r7, #4]
 810cd0a:	681b      	ldr	r3, [r3, #0]
 810cd0c:	2100      	movs	r1, #0
 810cd0e:	4618      	mov	r0, r3
 810cd10:	f003 ff75 	bl	8110bfe <SDMMC_GetResponse>
 810cd14:	61f8      	str	r0, [r7, #28]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 810cd16:	69fb      	ldr	r3, [r7, #28]
 810cd18:	0fdb      	lsrs	r3, r3, #31
 810cd1a:	2b01      	cmp	r3, #1
 810cd1c:	d101      	bne.n	810cd22 <SD_PowerON+0xd2>
 810cd1e:	2301      	movs	r3, #1
 810cd20:	e000      	b.n	810cd24 <SD_PowerON+0xd4>
 810cd22:	2300      	movs	r3, #0
 810cd24:	61bb      	str	r3, [r7, #24]

    count++;
 810cd26:	68fb      	ldr	r3, [r7, #12]
 810cd28:	3301      	adds	r3, #1
 810cd2a:	60fb      	str	r3, [r7, #12]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 810cd2c:	68fb      	ldr	r3, [r7, #12]
 810cd2e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 810cd32:	4293      	cmp	r3, r2
 810cd34:	d802      	bhi.n	810cd3c <SD_PowerON+0xec>
 810cd36:	69bb      	ldr	r3, [r7, #24]
 810cd38:	2b00      	cmp	r3, #0
 810cd3a:	d0cc      	beq.n	810ccd6 <SD_PowerON+0x86>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 810cd3c:	68fb      	ldr	r3, [r7, #12]
 810cd3e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 810cd42:	4293      	cmp	r3, r2
 810cd44:	d902      	bls.n	810cd4c <SD_PowerON+0xfc>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 810cd46:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 810cd4a:	e083      	b.n	810ce54 <SD_PowerON+0x204>
  }

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 810cd4c:	69fb      	ldr	r3, [r7, #28]
 810cd4e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 810cd52:	2b00      	cmp	r3, #0
 810cd54:	d07d      	beq.n	810ce52 <SD_PowerON+0x202>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 810cd56:	687b      	ldr	r3, [r7, #4]
 810cd58:	2201      	movs	r2, #1
 810cd5a:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_SD_TRANSCEIVER != 0U)
    if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 810cd5c:	687b      	ldr	r3, [r7, #4]
 810cd5e:	699b      	ldr	r3, [r3, #24]
 810cd60:	2b02      	cmp	r3, #2
 810cd62:	d176      	bne.n	810ce52 <SD_PowerON+0x202>
    {
      if ((response & SD_SWITCH_1_8V_CAPACITY) == SD_SWITCH_1_8V_CAPACITY)
 810cd64:	69fb      	ldr	r3, [r7, #28]
 810cd66:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 810cd6a:	2b00      	cmp	r3, #0
 810cd6c:	d071      	beq.n	810ce52 <SD_PowerON+0x202>
      {
        hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 810cd6e:	687b      	ldr	r3, [r7, #4]
 810cd70:	f44f 7200 	mov.w	r2, #512	; 0x200
 810cd74:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Start switching procedue */
        hsd->Instance->POWER |= SDMMC_POWER_VSWITCHEN;
 810cd76:	687b      	ldr	r3, [r7, #4]
 810cd78:	681b      	ldr	r3, [r3, #0]
 810cd7a:	681a      	ldr	r2, [r3, #0]
 810cd7c:	687b      	ldr	r3, [r7, #4]
 810cd7e:	681b      	ldr	r3, [r3, #0]
 810cd80:	f042 0208 	orr.w	r2, r2, #8
 810cd84:	601a      	str	r2, [r3, #0]

        /* Send CMD11 to switch 1.8V mode */
        errorstate = SDMMC_CmdVoltageSwitch(hsd->Instance);
 810cd86:	687b      	ldr	r3, [r7, #4]
 810cd88:	681b      	ldr	r3, [r3, #0]
 810cd8a:	4618      	mov	r0, r3
 810cd8c:	f004 f9f1 	bl	8111172 <SDMMC_CmdVoltageSwitch>
 810cd90:	6138      	str	r0, [r7, #16]
        if (errorstate != HAL_SD_ERROR_NONE)
 810cd92:	693b      	ldr	r3, [r7, #16]
 810cd94:	2b00      	cmp	r3, #0
 810cd96:	d00c      	beq.n	810cdb2 <SD_PowerON+0x162>
        {
          return errorstate;
 810cd98:	693b      	ldr	r3, [r7, #16]
 810cd9a:	e05b      	b.n	810ce54 <SD_PowerON+0x204>
        }

        /* Check to CKSTOP */
        while ((hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
        {
          if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 810cd9c:	f7f5 fe2c 	bl	81029f8 <HAL_GetTick>
 810cda0:	4602      	mov	r2, r0
 810cda2:	697b      	ldr	r3, [r7, #20]
 810cda4:	1ad3      	subs	r3, r2, r3
 810cda6:	f1b3 3fff 	cmp.w	r3, #4294967295
 810cdaa:	d102      	bne.n	810cdb2 <SD_PowerON+0x162>
          {
            return HAL_SD_ERROR_TIMEOUT;
 810cdac:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 810cdb0:	e050      	b.n	810ce54 <SD_PowerON+0x204>
        while ((hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
 810cdb2:	687b      	ldr	r3, [r7, #4]
 810cdb4:	681b      	ldr	r3, [r3, #0]
 810cdb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 810cdb8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 810cdbc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 810cdc0:	d1ec      	bne.n	810cd9c <SD_PowerON+0x14c>
          }
        }

        /* Clear CKSTOP Flag */
        hsd->Instance->ICR = SDMMC_FLAG_CKSTOP;
 810cdc2:	687b      	ldr	r3, [r7, #4]
 810cdc4:	681b      	ldr	r3, [r3, #0]
 810cdc6:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 810cdca:	639a      	str	r2, [r3, #56]	; 0x38

        /* Check to BusyD0 */
        if ((hsd->Instance->STA & SDMMC_FLAG_BUSYD0) != SDMMC_FLAG_BUSYD0)
 810cdcc:	687b      	ldr	r3, [r7, #4]
 810cdce:	681b      	ldr	r3, [r3, #0]
 810cdd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 810cdd2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 810cdd6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 810cdda:	d002      	beq.n	810cde2 <SD_PowerON+0x192>
        {
          /* Error when activate Voltage Switch in SDMMC Peripheral */
          return SDMMC_ERROR_UNSUPPORTED_FEATURE;
 810cddc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 810cde0:	e038      	b.n	810ce54 <SD_PowerON+0x204>
        {
          /* Enable Transceiver Switch PIN */
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->DriveTransceiver_1_8V_Callback(SET);
#else
          HAL_SD_DriveTransceiver_1_8V_Callback(SET);
 810cde2:	2001      	movs	r0, #1
 810cde4:	f7ff fab2 	bl	810c34c <HAL_SD_DriveTransceiver_1_8V_Callback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */

          /* Switch ready */
          hsd->Instance->POWER |= SDMMC_POWER_VSWITCH;
 810cde8:	687b      	ldr	r3, [r7, #4]
 810cdea:	681b      	ldr	r3, [r3, #0]
 810cdec:	681a      	ldr	r2, [r3, #0]
 810cdee:	687b      	ldr	r3, [r7, #4]
 810cdf0:	681b      	ldr	r3, [r3, #0]
 810cdf2:	f042 0204 	orr.w	r2, r2, #4
 810cdf6:	601a      	str	r2, [r3, #0]

          /* Check VSWEND Flag */
          while ((hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 810cdf8:	e00a      	b.n	810ce10 <SD_PowerON+0x1c0>
          {
            if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 810cdfa:	f7f5 fdfd 	bl	81029f8 <HAL_GetTick>
 810cdfe:	4602      	mov	r2, r0
 810ce00:	697b      	ldr	r3, [r7, #20]
 810ce02:	1ad3      	subs	r3, r2, r3
 810ce04:	f1b3 3fff 	cmp.w	r3, #4294967295
 810ce08:	d102      	bne.n	810ce10 <SD_PowerON+0x1c0>
            {
              return HAL_SD_ERROR_TIMEOUT;
 810ce0a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 810ce0e:	e021      	b.n	810ce54 <SD_PowerON+0x204>
          while ((hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 810ce10:	687b      	ldr	r3, [r7, #4]
 810ce12:	681b      	ldr	r3, [r3, #0]
 810ce14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 810ce16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 810ce1a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 810ce1e:	d1ec      	bne.n	810cdfa <SD_PowerON+0x1aa>
            }
          }

          /* Clear VSWEND Flag */
          hsd->Instance->ICR = SDMMC_FLAG_VSWEND;
 810ce20:	687b      	ldr	r3, [r7, #4]
 810ce22:	681b      	ldr	r3, [r3, #0]
 810ce24:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 810ce28:	639a      	str	r2, [r3, #56]	; 0x38

          /* Check BusyD0 status */
          if ((hsd->Instance->STA & SDMMC_FLAG_BUSYD0) == SDMMC_FLAG_BUSYD0)
 810ce2a:	687b      	ldr	r3, [r7, #4]
 810ce2c:	681b      	ldr	r3, [r3, #0]
 810ce2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 810ce30:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 810ce34:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 810ce38:	d102      	bne.n	810ce40 <SD_PowerON+0x1f0>
          {
            /* Error when enabling 1.8V mode */
            return HAL_SD_ERROR_INVALID_VOLTRANGE;
 810ce3a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 810ce3e:	e009      	b.n	810ce54 <SD_PowerON+0x204>
          }
          /* Switch to 1.8V OK */

          /* Disable VSWITCH FLAG from SDMMC Peripheral */
          hsd->Instance->POWER = 0x13U;
 810ce40:	687b      	ldr	r3, [r7, #4]
 810ce42:	681b      	ldr	r3, [r3, #0]
 810ce44:	2213      	movs	r2, #19
 810ce46:	601a      	str	r2, [r3, #0]

          /* Clean Status flags */
          hsd->Instance->ICR = 0xFFFFFFFFU;
 810ce48:	687b      	ldr	r3, [r7, #4]
 810ce4a:	681b      	ldr	r3, [r3, #0]
 810ce4c:	f04f 32ff 	mov.w	r2, #4294967295
 810ce50:	639a      	str	r2, [r3, #56]	; 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 810ce52:	2300      	movs	r3, #0
}
 810ce54:	4618      	mov	r0, r3
 810ce56:	3720      	adds	r7, #32
 810ce58:	46bd      	mov	sp, r7
 810ce5a:	bd80      	pop	{r7, pc}
 810ce5c:	c1100000 	.word	0xc1100000

0810ce60 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 810ce60:	b580      	push	{r7, lr}
 810ce62:	b08c      	sub	sp, #48	; 0x30
 810ce64:	af00      	add	r7, sp, #0
 810ce66:	6078      	str	r0, [r7, #4]
 810ce68:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 810ce6a:	f7f5 fdc5 	bl	81029f8 <HAL_GetTick>
 810ce6e:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 810ce70:	683b      	ldr	r3, [r7, #0]
 810ce72:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 810ce74:	687b      	ldr	r3, [r7, #4]
 810ce76:	681b      	ldr	r3, [r3, #0]
 810ce78:	2100      	movs	r1, #0
 810ce7a:	4618      	mov	r0, r3
 810ce7c:	f003 febf 	bl	8110bfe <SDMMC_GetResponse>
 810ce80:	4603      	mov	r3, r0
 810ce82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 810ce86:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 810ce8a:	d102      	bne.n	810ce92 <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 810ce8c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 810ce90:	e0b0      	b.n	810cff4 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 810ce92:	687b      	ldr	r3, [r7, #4]
 810ce94:	681b      	ldr	r3, [r3, #0]
 810ce96:	2140      	movs	r1, #64	; 0x40
 810ce98:	4618      	mov	r0, r3
 810ce9a:	f003 feef 	bl	8110c7c <SDMMC_CmdBlockLength>
 810ce9e:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 810cea0:	6a3b      	ldr	r3, [r7, #32]
 810cea2:	2b00      	cmp	r3, #0
 810cea4:	d005      	beq.n	810ceb2 <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 810cea6:	687b      	ldr	r3, [r7, #4]
 810cea8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 810ceaa:	687b      	ldr	r3, [r7, #4]
 810ceac:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 810ceae:	6a3b      	ldr	r3, [r7, #32]
 810ceb0:	e0a0      	b.n	810cff4 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 810ceb2:	687b      	ldr	r3, [r7, #4]
 810ceb4:	681a      	ldr	r2, [r3, #0]
 810ceb6:	687b      	ldr	r3, [r7, #4]
 810ceb8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 810ceba:	041b      	lsls	r3, r3, #16
 810cebc:	4619      	mov	r1, r3
 810cebe:	4610      	mov	r0, r2
 810cec0:	f004 f829 	bl	8110f16 <SDMMC_CmdAppCommand>
 810cec4:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 810cec6:	6a3b      	ldr	r3, [r7, #32]
 810cec8:	2b00      	cmp	r3, #0
 810ceca:	d005      	beq.n	810ced8 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 810cecc:	687b      	ldr	r3, [r7, #4]
 810cece:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 810ced0:	687b      	ldr	r3, [r7, #4]
 810ced2:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 810ced4:	6a3b      	ldr	r3, [r7, #32]
 810ced6:	e08d      	b.n	810cff4 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 810ced8:	f04f 33ff 	mov.w	r3, #4294967295
 810cedc:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 810cede:	2340      	movs	r3, #64	; 0x40
 810cee0:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 810cee2:	2360      	movs	r3, #96	; 0x60
 810cee4:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 810cee6:	2302      	movs	r3, #2
 810cee8:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 810ceea:	2300      	movs	r3, #0
 810ceec:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 810ceee:	2301      	movs	r3, #1
 810cef0:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 810cef2:	687b      	ldr	r3, [r7, #4]
 810cef4:	681b      	ldr	r3, [r3, #0]
 810cef6:	f107 0208 	add.w	r2, r7, #8
 810cefa:	4611      	mov	r1, r2
 810cefc:	4618      	mov	r0, r3
 810cefe:	f003 fe91 	bl	8110c24 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 810cf02:	687b      	ldr	r3, [r7, #4]
 810cf04:	681b      	ldr	r3, [r3, #0]
 810cf06:	4618      	mov	r0, r3
 810cf08:	f004 f911 	bl	811112e <SDMMC_CmdStatusRegister>
 810cf0c:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 810cf0e:	6a3b      	ldr	r3, [r7, #32]
 810cf10:	2b00      	cmp	r3, #0
 810cf12:	d02b      	beq.n	810cf6c <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 810cf14:	687b      	ldr	r3, [r7, #4]
 810cf16:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 810cf18:	687b      	ldr	r3, [r7, #4]
 810cf1a:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 810cf1c:	6a3b      	ldr	r3, [r7, #32]
 810cf1e:	e069      	b.n	810cff4 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 810cf20:	687b      	ldr	r3, [r7, #4]
 810cf22:	681b      	ldr	r3, [r3, #0]
 810cf24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 810cf26:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 810cf2a:	2b00      	cmp	r3, #0
 810cf2c:	d013      	beq.n	810cf56 <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 810cf2e:	2300      	movs	r3, #0
 810cf30:	62fb      	str	r3, [r7, #44]	; 0x2c
 810cf32:	e00d      	b.n	810cf50 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 810cf34:	687b      	ldr	r3, [r7, #4]
 810cf36:	681b      	ldr	r3, [r3, #0]
 810cf38:	4618      	mov	r0, r3
 810cf3a:	f003 fdeb 	bl	8110b14 <SDMMC_ReadFIFO>
 810cf3e:	4602      	mov	r2, r0
 810cf40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810cf42:	601a      	str	r2, [r3, #0]
        pData++;
 810cf44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810cf46:	3304      	adds	r3, #4
 810cf48:	62bb      	str	r3, [r7, #40]	; 0x28
      for (count = 0U; count < 8U; count++)
 810cf4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810cf4c:	3301      	adds	r3, #1
 810cf4e:	62fb      	str	r3, [r7, #44]	; 0x2c
 810cf50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810cf52:	2b07      	cmp	r3, #7
 810cf54:	d9ee      	bls.n	810cf34 <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 810cf56:	f7f5 fd4f 	bl	81029f8 <HAL_GetTick>
 810cf5a:	4602      	mov	r2, r0
 810cf5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810cf5e:	1ad3      	subs	r3, r2, r3
 810cf60:	f1b3 3fff 	cmp.w	r3, #4294967295
 810cf64:	d102      	bne.n	810cf6c <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 810cf66:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 810cf6a:	e043      	b.n	810cff4 <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 810cf6c:	687b      	ldr	r3, [r7, #4]
 810cf6e:	681b      	ldr	r3, [r3, #0]
 810cf70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 810cf72:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 810cf76:	2b00      	cmp	r3, #0
 810cf78:	d0d2      	beq.n	810cf20 <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 810cf7a:	687b      	ldr	r3, [r7, #4]
 810cf7c:	681b      	ldr	r3, [r3, #0]
 810cf7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 810cf80:	f003 0308 	and.w	r3, r3, #8
 810cf84:	2b00      	cmp	r3, #0
 810cf86:	d001      	beq.n	810cf8c <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 810cf88:	2308      	movs	r3, #8
 810cf8a:	e033      	b.n	810cff4 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 810cf8c:	687b      	ldr	r3, [r7, #4]
 810cf8e:	681b      	ldr	r3, [r3, #0]
 810cf90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 810cf92:	f003 0302 	and.w	r3, r3, #2
 810cf96:	2b00      	cmp	r3, #0
 810cf98:	d001      	beq.n	810cf9e <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 810cf9a:	2302      	movs	r3, #2
 810cf9c:	e02a      	b.n	810cff4 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 810cf9e:	687b      	ldr	r3, [r7, #4]
 810cfa0:	681b      	ldr	r3, [r3, #0]
 810cfa2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 810cfa4:	f003 0320 	and.w	r3, r3, #32
 810cfa8:	2b00      	cmp	r3, #0
 810cfaa:	d017      	beq.n	810cfdc <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 810cfac:	2320      	movs	r3, #32
 810cfae:	e021      	b.n	810cff4 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 810cfb0:	687b      	ldr	r3, [r7, #4]
 810cfb2:	681b      	ldr	r3, [r3, #0]
 810cfb4:	4618      	mov	r0, r3
 810cfb6:	f003 fdad 	bl	8110b14 <SDMMC_ReadFIFO>
 810cfba:	4602      	mov	r2, r0
 810cfbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810cfbe:	601a      	str	r2, [r3, #0]
    pData++;
 810cfc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810cfc2:	3304      	adds	r3, #4
 810cfc4:	62bb      	str	r3, [r7, #40]	; 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 810cfc6:	f7f5 fd17 	bl	81029f8 <HAL_GetTick>
 810cfca:	4602      	mov	r2, r0
 810cfcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810cfce:	1ad3      	subs	r3, r2, r3
 810cfd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 810cfd4:	d102      	bne.n	810cfdc <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 810cfd6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 810cfda:	e00b      	b.n	810cff4 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 810cfdc:	687b      	ldr	r3, [r7, #4]
 810cfde:	681b      	ldr	r3, [r3, #0]
 810cfe0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 810cfe2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 810cfe6:	2b00      	cmp	r3, #0
 810cfe8:	d1e2      	bne.n	810cfb0 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 810cfea:	687b      	ldr	r3, [r7, #4]
 810cfec:	681b      	ldr	r3, [r3, #0]
 810cfee:	4a03      	ldr	r2, [pc, #12]	; (810cffc <SD_SendSDStatus+0x19c>)
 810cff0:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 810cff2:	2300      	movs	r3, #0
}
 810cff4:	4618      	mov	r0, r3
 810cff6:	3730      	adds	r7, #48	; 0x30
 810cff8:	46bd      	mov	sp, r7
 810cffa:	bd80      	pop	{r7, pc}
 810cffc:	18000f3a 	.word	0x18000f3a

0810d000 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 810d000:	b580      	push	{r7, lr}
 810d002:	b084      	sub	sp, #16
 810d004:	af00      	add	r7, sp, #0
 810d006:	6078      	str	r0, [r7, #4]
 810d008:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 810d00a:	683b      	ldr	r3, [r7, #0]
 810d00c:	2b00      	cmp	r3, #0
 810d00e:	d102      	bne.n	810d016 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 810d010:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 810d014:	e018      	b.n	810d048 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 810d016:	687b      	ldr	r3, [r7, #4]
 810d018:	681a      	ldr	r2, [r3, #0]
 810d01a:	687b      	ldr	r3, [r7, #4]
 810d01c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 810d01e:	041b      	lsls	r3, r3, #16
 810d020:	4619      	mov	r1, r3
 810d022:	4610      	mov	r0, r2
 810d024:	f004 f860 	bl	81110e8 <SDMMC_CmdSendStatus>
 810d028:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 810d02a:	68fb      	ldr	r3, [r7, #12]
 810d02c:	2b00      	cmp	r3, #0
 810d02e:	d001      	beq.n	810d034 <SD_SendStatus+0x34>
  {
    return errorstate;
 810d030:	68fb      	ldr	r3, [r7, #12]
 810d032:	e009      	b.n	810d048 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 810d034:	687b      	ldr	r3, [r7, #4]
 810d036:	681b      	ldr	r3, [r3, #0]
 810d038:	2100      	movs	r1, #0
 810d03a:	4618      	mov	r0, r3
 810d03c:	f003 fddf 	bl	8110bfe <SDMMC_GetResponse>
 810d040:	4602      	mov	r2, r0
 810d042:	683b      	ldr	r3, [r7, #0]
 810d044:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 810d046:	2300      	movs	r3, #0
}
 810d048:	4618      	mov	r0, r3
 810d04a:	3710      	adds	r7, #16
 810d04c:	46bd      	mov	sp, r7
 810d04e:	bd80      	pop	{r7, pc}

0810d050 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 810d050:	b580      	push	{r7, lr}
 810d052:	b086      	sub	sp, #24
 810d054:	af00      	add	r7, sp, #0
 810d056:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 810d058:	2300      	movs	r3, #0
 810d05a:	60fb      	str	r3, [r7, #12]
 810d05c:	2300      	movs	r3, #0
 810d05e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 810d060:	687b      	ldr	r3, [r7, #4]
 810d062:	681b      	ldr	r3, [r3, #0]
 810d064:	2100      	movs	r1, #0
 810d066:	4618      	mov	r0, r3
 810d068:	f003 fdc9 	bl	8110bfe <SDMMC_GetResponse>
 810d06c:	4603      	mov	r3, r0
 810d06e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 810d072:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 810d076:	d102      	bne.n	810d07e <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 810d078:	f44f 6300 	mov.w	r3, #2048	; 0x800
 810d07c:	e02f      	b.n	810d0de <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 810d07e:	f107 030c 	add.w	r3, r7, #12
 810d082:	4619      	mov	r1, r3
 810d084:	6878      	ldr	r0, [r7, #4]
 810d086:	f000 f879 	bl	810d17c <SD_FindSCR>
 810d08a:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 810d08c:	697b      	ldr	r3, [r7, #20]
 810d08e:	2b00      	cmp	r3, #0
 810d090:	d001      	beq.n	810d096 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 810d092:	697b      	ldr	r3, [r7, #20]
 810d094:	e023      	b.n	810d0de <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 810d096:	693b      	ldr	r3, [r7, #16]
 810d098:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 810d09c:	2b00      	cmp	r3, #0
 810d09e:	d01c      	beq.n	810d0da <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 810d0a0:	687b      	ldr	r3, [r7, #4]
 810d0a2:	681a      	ldr	r2, [r3, #0]
 810d0a4:	687b      	ldr	r3, [r7, #4]
 810d0a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 810d0a8:	041b      	lsls	r3, r3, #16
 810d0aa:	4619      	mov	r1, r3
 810d0ac:	4610      	mov	r0, r2
 810d0ae:	f003 ff32 	bl	8110f16 <SDMMC_CmdAppCommand>
 810d0b2:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 810d0b4:	697b      	ldr	r3, [r7, #20]
 810d0b6:	2b00      	cmp	r3, #0
 810d0b8:	d001      	beq.n	810d0be <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 810d0ba:	697b      	ldr	r3, [r7, #20]
 810d0bc:	e00f      	b.n	810d0de <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 810d0be:	687b      	ldr	r3, [r7, #4]
 810d0c0:	681b      	ldr	r3, [r3, #0]
 810d0c2:	2102      	movs	r1, #2
 810d0c4:	4618      	mov	r0, r3
 810d0c6:	f003 ff69 	bl	8110f9c <SDMMC_CmdBusWidth>
 810d0ca:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 810d0cc:	697b      	ldr	r3, [r7, #20]
 810d0ce:	2b00      	cmp	r3, #0
 810d0d0:	d001      	beq.n	810d0d6 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 810d0d2:	697b      	ldr	r3, [r7, #20]
 810d0d4:	e003      	b.n	810d0de <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 810d0d6:	2300      	movs	r3, #0
 810d0d8:	e001      	b.n	810d0de <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 810d0da:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 810d0de:	4618      	mov	r0, r3
 810d0e0:	3718      	adds	r7, #24
 810d0e2:	46bd      	mov	sp, r7
 810d0e4:	bd80      	pop	{r7, pc}

0810d0e6 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 810d0e6:	b580      	push	{r7, lr}
 810d0e8:	b086      	sub	sp, #24
 810d0ea:	af00      	add	r7, sp, #0
 810d0ec:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 810d0ee:	2300      	movs	r3, #0
 810d0f0:	60fb      	str	r3, [r7, #12]
 810d0f2:	2300      	movs	r3, #0
 810d0f4:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 810d0f6:	687b      	ldr	r3, [r7, #4]
 810d0f8:	681b      	ldr	r3, [r3, #0]
 810d0fa:	2100      	movs	r1, #0
 810d0fc:	4618      	mov	r0, r3
 810d0fe:	f003 fd7e 	bl	8110bfe <SDMMC_GetResponse>
 810d102:	4603      	mov	r3, r0
 810d104:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 810d108:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 810d10c:	d102      	bne.n	810d114 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 810d10e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 810d112:	e02f      	b.n	810d174 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 810d114:	f107 030c 	add.w	r3, r7, #12
 810d118:	4619      	mov	r1, r3
 810d11a:	6878      	ldr	r0, [r7, #4]
 810d11c:	f000 f82e 	bl	810d17c <SD_FindSCR>
 810d120:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 810d122:	697b      	ldr	r3, [r7, #20]
 810d124:	2b00      	cmp	r3, #0
 810d126:	d001      	beq.n	810d12c <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 810d128:	697b      	ldr	r3, [r7, #20]
 810d12a:	e023      	b.n	810d174 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 810d12c:	693b      	ldr	r3, [r7, #16]
 810d12e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 810d132:	2b00      	cmp	r3, #0
 810d134:	d01c      	beq.n	810d170 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 810d136:	687b      	ldr	r3, [r7, #4]
 810d138:	681a      	ldr	r2, [r3, #0]
 810d13a:	687b      	ldr	r3, [r7, #4]
 810d13c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 810d13e:	041b      	lsls	r3, r3, #16
 810d140:	4619      	mov	r1, r3
 810d142:	4610      	mov	r0, r2
 810d144:	f003 fee7 	bl	8110f16 <SDMMC_CmdAppCommand>
 810d148:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 810d14a:	697b      	ldr	r3, [r7, #20]
 810d14c:	2b00      	cmp	r3, #0
 810d14e:	d001      	beq.n	810d154 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 810d150:	697b      	ldr	r3, [r7, #20]
 810d152:	e00f      	b.n	810d174 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 810d154:	687b      	ldr	r3, [r7, #4]
 810d156:	681b      	ldr	r3, [r3, #0]
 810d158:	2100      	movs	r1, #0
 810d15a:	4618      	mov	r0, r3
 810d15c:	f003 ff1e 	bl	8110f9c <SDMMC_CmdBusWidth>
 810d160:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 810d162:	697b      	ldr	r3, [r7, #20]
 810d164:	2b00      	cmp	r3, #0
 810d166:	d001      	beq.n	810d16c <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 810d168:	697b      	ldr	r3, [r7, #20]
 810d16a:	e003      	b.n	810d174 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 810d16c:	2300      	movs	r3, #0
 810d16e:	e001      	b.n	810d174 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 810d170:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 810d174:	4618      	mov	r0, r3
 810d176:	3718      	adds	r7, #24
 810d178:	46bd      	mov	sp, r7
 810d17a:	bd80      	pop	{r7, pc}

0810d17c <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 810d17c:	b580      	push	{r7, lr}
 810d17e:	b08e      	sub	sp, #56	; 0x38
 810d180:	af00      	add	r7, sp, #0
 810d182:	6078      	str	r0, [r7, #4]
 810d184:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 810d186:	f7f5 fc37 	bl	81029f8 <HAL_GetTick>
 810d18a:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 810d18c:	2300      	movs	r3, #0
 810d18e:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 810d190:	2300      	movs	r3, #0
 810d192:	60bb      	str	r3, [r7, #8]
 810d194:	2300      	movs	r3, #0
 810d196:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 810d198:	683b      	ldr	r3, [r7, #0]
 810d19a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 810d19c:	687b      	ldr	r3, [r7, #4]
 810d19e:	681b      	ldr	r3, [r3, #0]
 810d1a0:	2108      	movs	r1, #8
 810d1a2:	4618      	mov	r0, r3
 810d1a4:	f003 fd6a 	bl	8110c7c <SDMMC_CmdBlockLength>
 810d1a8:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 810d1aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810d1ac:	2b00      	cmp	r3, #0
 810d1ae:	d001      	beq.n	810d1b4 <SD_FindSCR+0x38>
  {
    return errorstate;
 810d1b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810d1b2:	e0ad      	b.n	810d310 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 810d1b4:	687b      	ldr	r3, [r7, #4]
 810d1b6:	681a      	ldr	r2, [r3, #0]
 810d1b8:	687b      	ldr	r3, [r7, #4]
 810d1ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 810d1bc:	041b      	lsls	r3, r3, #16
 810d1be:	4619      	mov	r1, r3
 810d1c0:	4610      	mov	r0, r2
 810d1c2:	f003 fea8 	bl	8110f16 <SDMMC_CmdAppCommand>
 810d1c6:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 810d1c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810d1ca:	2b00      	cmp	r3, #0
 810d1cc:	d001      	beq.n	810d1d2 <SD_FindSCR+0x56>
  {
    return errorstate;
 810d1ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810d1d0:	e09e      	b.n	810d310 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 810d1d2:	f04f 33ff 	mov.w	r3, #4294967295
 810d1d6:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 810d1d8:	2308      	movs	r3, #8
 810d1da:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 810d1dc:	2330      	movs	r3, #48	; 0x30
 810d1de:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 810d1e0:	2302      	movs	r3, #2
 810d1e2:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 810d1e4:	2300      	movs	r3, #0
 810d1e6:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 810d1e8:	2301      	movs	r3, #1
 810d1ea:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 810d1ec:	687b      	ldr	r3, [r7, #4]
 810d1ee:	681b      	ldr	r3, [r3, #0]
 810d1f0:	f107 0210 	add.w	r2, r7, #16
 810d1f4:	4611      	mov	r1, r2
 810d1f6:	4618      	mov	r0, r3
 810d1f8:	f003 fd14 	bl	8110c24 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 810d1fc:	687b      	ldr	r3, [r7, #4]
 810d1fe:	681b      	ldr	r3, [r3, #0]
 810d200:	4618      	mov	r0, r3
 810d202:	f003 feee 	bl	8110fe2 <SDMMC_CmdSendSCR>
 810d206:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 810d208:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810d20a:	2b00      	cmp	r3, #0
 810d20c:	d027      	beq.n	810d25e <SD_FindSCR+0xe2>
  {
    return errorstate;
 810d20e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810d210:	e07e      	b.n	810d310 <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 810d212:	687b      	ldr	r3, [r7, #4]
 810d214:	681b      	ldr	r3, [r3, #0]
 810d216:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 810d218:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 810d21c:	2b00      	cmp	r3, #0
 810d21e:	d113      	bne.n	810d248 <SD_FindSCR+0xcc>
 810d220:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 810d222:	2b00      	cmp	r3, #0
 810d224:	d110      	bne.n	810d248 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 810d226:	687b      	ldr	r3, [r7, #4]
 810d228:	681b      	ldr	r3, [r3, #0]
 810d22a:	4618      	mov	r0, r3
 810d22c:	f003 fc72 	bl	8110b14 <SDMMC_ReadFIFO>
 810d230:	4603      	mov	r3, r0
 810d232:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 810d234:	687b      	ldr	r3, [r7, #4]
 810d236:	681b      	ldr	r3, [r3, #0]
 810d238:	4618      	mov	r0, r3
 810d23a:	f003 fc6b 	bl	8110b14 <SDMMC_ReadFIFO>
 810d23e:	4603      	mov	r3, r0
 810d240:	60fb      	str	r3, [r7, #12]
      index++;
 810d242:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 810d244:	3301      	adds	r3, #1
 810d246:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 810d248:	f7f5 fbd6 	bl	81029f8 <HAL_GetTick>
 810d24c:	4602      	mov	r2, r0
 810d24e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810d250:	1ad3      	subs	r3, r2, r3
 810d252:	f1b3 3fff 	cmp.w	r3, #4294967295
 810d256:	d102      	bne.n	810d25e <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 810d258:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 810d25c:	e058      	b.n	810d310 <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 810d25e:	687b      	ldr	r3, [r7, #4]
 810d260:	681b      	ldr	r3, [r3, #0]
 810d262:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 810d264:	f240 532a 	movw	r3, #1322	; 0x52a
 810d268:	4013      	ands	r3, r2
 810d26a:	2b00      	cmp	r3, #0
 810d26c:	d0d1      	beq.n	810d212 <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 810d26e:	687b      	ldr	r3, [r7, #4]
 810d270:	681b      	ldr	r3, [r3, #0]
 810d272:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 810d274:	f003 0308 	and.w	r3, r3, #8
 810d278:	2b00      	cmp	r3, #0
 810d27a:	d005      	beq.n	810d288 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 810d27c:	687b      	ldr	r3, [r7, #4]
 810d27e:	681b      	ldr	r3, [r3, #0]
 810d280:	2208      	movs	r2, #8
 810d282:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 810d284:	2308      	movs	r3, #8
 810d286:	e043      	b.n	810d310 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 810d288:	687b      	ldr	r3, [r7, #4]
 810d28a:	681b      	ldr	r3, [r3, #0]
 810d28c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 810d28e:	f003 0302 	and.w	r3, r3, #2
 810d292:	2b00      	cmp	r3, #0
 810d294:	d005      	beq.n	810d2a2 <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 810d296:	687b      	ldr	r3, [r7, #4]
 810d298:	681b      	ldr	r3, [r3, #0]
 810d29a:	2202      	movs	r2, #2
 810d29c:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 810d29e:	2302      	movs	r3, #2
 810d2a0:	e036      	b.n	810d310 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 810d2a2:	687b      	ldr	r3, [r7, #4]
 810d2a4:	681b      	ldr	r3, [r3, #0]
 810d2a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 810d2a8:	f003 0320 	and.w	r3, r3, #32
 810d2ac:	2b00      	cmp	r3, #0
 810d2ae:	d005      	beq.n	810d2bc <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 810d2b0:	687b      	ldr	r3, [r7, #4]
 810d2b2:	681b      	ldr	r3, [r3, #0]
 810d2b4:	2220      	movs	r2, #32
 810d2b6:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 810d2b8:	2320      	movs	r3, #32
 810d2ba:	e029      	b.n	810d310 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 810d2bc:	687b      	ldr	r3, [r7, #4]
 810d2be:	681b      	ldr	r3, [r3, #0]
 810d2c0:	4a15      	ldr	r2, [pc, #84]	; (810d318 <SD_FindSCR+0x19c>)
 810d2c2:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 810d2c4:	68fb      	ldr	r3, [r7, #12]
 810d2c6:	061a      	lsls	r2, r3, #24
 810d2c8:	68fb      	ldr	r3, [r7, #12]
 810d2ca:	021b      	lsls	r3, r3, #8
 810d2cc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 810d2d0:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 810d2d2:	68fb      	ldr	r3, [r7, #12]
 810d2d4:	0a1b      	lsrs	r3, r3, #8
 810d2d6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 810d2da:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 810d2dc:	68fb      	ldr	r3, [r7, #12]
 810d2de:	0e1b      	lsrs	r3, r3, #24
 810d2e0:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 810d2e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810d2e4:	601a      	str	r2, [r3, #0]
    scr++;
 810d2e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810d2e8:	3304      	adds	r3, #4
 810d2ea:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 810d2ec:	68bb      	ldr	r3, [r7, #8]
 810d2ee:	061a      	lsls	r2, r3, #24
 810d2f0:	68bb      	ldr	r3, [r7, #8]
 810d2f2:	021b      	lsls	r3, r3, #8
 810d2f4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 810d2f8:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 810d2fa:	68bb      	ldr	r3, [r7, #8]
 810d2fc:	0a1b      	lsrs	r3, r3, #8
 810d2fe:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 810d302:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 810d304:	68bb      	ldr	r3, [r7, #8]
 810d306:	0e1b      	lsrs	r3, r3, #24
 810d308:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 810d30a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810d30c:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 810d30e:	2300      	movs	r3, #0
}
 810d310:	4618      	mov	r0, r3
 810d312:	3738      	adds	r7, #56	; 0x38
 810d314:	46bd      	mov	sp, r7
 810d316:	bd80      	pop	{r7, pc}
 810d318:	18000f3a 	.word	0x18000f3a

0810d31c <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 810d31c:	b580      	push	{r7, lr}
 810d31e:	b086      	sub	sp, #24
 810d320:	af00      	add	r7, sp, #0
 810d322:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pRxBuffPtr;
 810d324:	687b      	ldr	r3, [r7, #4]
 810d326:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810d328:	613b      	str	r3, [r7, #16]

  if (hsd->RxXferSize >= 32U)
 810d32a:	687b      	ldr	r3, [r7, #4]
 810d32c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810d32e:	2b1f      	cmp	r3, #31
 810d330:	d936      	bls.n	810d3a0 <SD_Read_IT+0x84>
  {
    /* Read data from SDMMC Rx FIFO */
    for (count = 0U; count < 8U; count++)
 810d332:	2300      	movs	r3, #0
 810d334:	617b      	str	r3, [r7, #20]
 810d336:	e027      	b.n	810d388 <SD_Read_IT+0x6c>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 810d338:	687b      	ldr	r3, [r7, #4]
 810d33a:	681b      	ldr	r3, [r3, #0]
 810d33c:	4618      	mov	r0, r3
 810d33e:	f003 fbe9 	bl	8110b14 <SDMMC_ReadFIFO>
 810d342:	60f8      	str	r0, [r7, #12]
      *tmp = (uint8_t)(data & 0xFFU);
 810d344:	68fb      	ldr	r3, [r7, #12]
 810d346:	b2da      	uxtb	r2, r3
 810d348:	693b      	ldr	r3, [r7, #16]
 810d34a:	701a      	strb	r2, [r3, #0]
      tmp++;
 810d34c:	693b      	ldr	r3, [r7, #16]
 810d34e:	3301      	adds	r3, #1
 810d350:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 810d352:	68fb      	ldr	r3, [r7, #12]
 810d354:	0a1b      	lsrs	r3, r3, #8
 810d356:	b2da      	uxtb	r2, r3
 810d358:	693b      	ldr	r3, [r7, #16]
 810d35a:	701a      	strb	r2, [r3, #0]
      tmp++;
 810d35c:	693b      	ldr	r3, [r7, #16]
 810d35e:	3301      	adds	r3, #1
 810d360:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 810d362:	68fb      	ldr	r3, [r7, #12]
 810d364:	0c1b      	lsrs	r3, r3, #16
 810d366:	b2da      	uxtb	r2, r3
 810d368:	693b      	ldr	r3, [r7, #16]
 810d36a:	701a      	strb	r2, [r3, #0]
      tmp++;
 810d36c:	693b      	ldr	r3, [r7, #16]
 810d36e:	3301      	adds	r3, #1
 810d370:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 810d372:	68fb      	ldr	r3, [r7, #12]
 810d374:	0e1b      	lsrs	r3, r3, #24
 810d376:	b2da      	uxtb	r2, r3
 810d378:	693b      	ldr	r3, [r7, #16]
 810d37a:	701a      	strb	r2, [r3, #0]
      tmp++;
 810d37c:	693b      	ldr	r3, [r7, #16]
 810d37e:	3301      	adds	r3, #1
 810d380:	613b      	str	r3, [r7, #16]
    for (count = 0U; count < 8U; count++)
 810d382:	697b      	ldr	r3, [r7, #20]
 810d384:	3301      	adds	r3, #1
 810d386:	617b      	str	r3, [r7, #20]
 810d388:	697b      	ldr	r3, [r7, #20]
 810d38a:	2b07      	cmp	r3, #7
 810d38c:	d9d4      	bls.n	810d338 <SD_Read_IT+0x1c>
    }

    hsd->pRxBuffPtr = tmp;
 810d38e:	687b      	ldr	r3, [r7, #4]
 810d390:	693a      	ldr	r2, [r7, #16]
 810d392:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize -= 32U;
 810d394:	687b      	ldr	r3, [r7, #4]
 810d396:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810d398:	f1a3 0220 	sub.w	r2, r3, #32
 810d39c:	687b      	ldr	r3, [r7, #4]
 810d39e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 810d3a0:	bf00      	nop
 810d3a2:	3718      	adds	r7, #24
 810d3a4:	46bd      	mov	sp, r7
 810d3a6:	bd80      	pop	{r7, pc}

0810d3a8 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 810d3a8:	b580      	push	{r7, lr}
 810d3aa:	b086      	sub	sp, #24
 810d3ac:	af00      	add	r7, sp, #0
 810d3ae:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pTxBuffPtr;
 810d3b0:	687b      	ldr	r3, [r7, #4]
 810d3b2:	6a1b      	ldr	r3, [r3, #32]
 810d3b4:	613b      	str	r3, [r7, #16]

  if (hsd->TxXferSize >= 32U)
 810d3b6:	687b      	ldr	r3, [r7, #4]
 810d3b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810d3ba:	2b1f      	cmp	r3, #31
 810d3bc:	d93a      	bls.n	810d434 <SD_Write_IT+0x8c>
  {
    /* Write data to SDMMC Tx FIFO */
    for (count = 0U; count < 8U; count++)
 810d3be:	2300      	movs	r3, #0
 810d3c0:	617b      	str	r3, [r7, #20]
 810d3c2:	e02b      	b.n	810d41c <SD_Write_IT+0x74>
    {
      data = (uint32_t)(*tmp);
 810d3c4:	693b      	ldr	r3, [r7, #16]
 810d3c6:	781b      	ldrb	r3, [r3, #0]
 810d3c8:	60fb      	str	r3, [r7, #12]
      tmp++;
 810d3ca:	693b      	ldr	r3, [r7, #16]
 810d3cc:	3301      	adds	r3, #1
 810d3ce:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 810d3d0:	693b      	ldr	r3, [r7, #16]
 810d3d2:	781b      	ldrb	r3, [r3, #0]
 810d3d4:	021a      	lsls	r2, r3, #8
 810d3d6:	68fb      	ldr	r3, [r7, #12]
 810d3d8:	4313      	orrs	r3, r2
 810d3da:	60fb      	str	r3, [r7, #12]
      tmp++;
 810d3dc:	693b      	ldr	r3, [r7, #16]
 810d3de:	3301      	adds	r3, #1
 810d3e0:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 810d3e2:	693b      	ldr	r3, [r7, #16]
 810d3e4:	781b      	ldrb	r3, [r3, #0]
 810d3e6:	041a      	lsls	r2, r3, #16
 810d3e8:	68fb      	ldr	r3, [r7, #12]
 810d3ea:	4313      	orrs	r3, r2
 810d3ec:	60fb      	str	r3, [r7, #12]
      tmp++;
 810d3ee:	693b      	ldr	r3, [r7, #16]
 810d3f0:	3301      	adds	r3, #1
 810d3f2:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 810d3f4:	693b      	ldr	r3, [r7, #16]
 810d3f6:	781b      	ldrb	r3, [r3, #0]
 810d3f8:	061a      	lsls	r2, r3, #24
 810d3fa:	68fb      	ldr	r3, [r7, #12]
 810d3fc:	4313      	orrs	r3, r2
 810d3fe:	60fb      	str	r3, [r7, #12]
      tmp++;
 810d400:	693b      	ldr	r3, [r7, #16]
 810d402:	3301      	adds	r3, #1
 810d404:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 810d406:	687b      	ldr	r3, [r7, #4]
 810d408:	681b      	ldr	r3, [r3, #0]
 810d40a:	f107 020c 	add.w	r2, r7, #12
 810d40e:	4611      	mov	r1, r2
 810d410:	4618      	mov	r0, r3
 810d412:	f003 fb8c 	bl	8110b2e <SDMMC_WriteFIFO>
    for (count = 0U; count < 8U; count++)
 810d416:	697b      	ldr	r3, [r7, #20]
 810d418:	3301      	adds	r3, #1
 810d41a:	617b      	str	r3, [r7, #20]
 810d41c:	697b      	ldr	r3, [r7, #20]
 810d41e:	2b07      	cmp	r3, #7
 810d420:	d9d0      	bls.n	810d3c4 <SD_Write_IT+0x1c>
    }

    hsd->pTxBuffPtr = tmp;
 810d422:	687b      	ldr	r3, [r7, #4]
 810d424:	693a      	ldr	r2, [r7, #16]
 810d426:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize -= 32U;
 810d428:	687b      	ldr	r3, [r7, #4]
 810d42a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810d42c:	f1a3 0220 	sub.w	r2, r3, #32
 810d430:	687b      	ldr	r3, [r7, #4]
 810d432:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 810d434:	bf00      	nop
 810d436:	3718      	adds	r7, #24
 810d438:	46bd      	mov	sp, r7
 810d43a:	bd80      	pop	{r7, pc}

0810d43c <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 810d43c:	b480      	push	{r7}
 810d43e:	b083      	sub	sp, #12
 810d440:	af00      	add	r7, sp, #0
 810d442:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 810d444:	bf00      	nop
 810d446:	370c      	adds	r7, #12
 810d448:	46bd      	mov	sp, r7
 810d44a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810d44e:	4770      	bx	lr

0810d450 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 810d450:	b480      	push	{r7}
 810d452:	b083      	sub	sp, #12
 810d454:	af00      	add	r7, sp, #0
 810d456:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 810d458:	bf00      	nop
 810d45a:	370c      	adds	r7, #12
 810d45c:	46bd      	mov	sp, r7
 810d45e:	f85d 7b04 	ldr.w	r7, [sp], #4
 810d462:	4770      	bx	lr

0810d464 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 810d464:	b480      	push	{r7}
 810d466:	b083      	sub	sp, #12
 810d468:	af00      	add	r7, sp, #0
 810d46a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 810d46c:	bf00      	nop
 810d46e:	370c      	adds	r7, #12
 810d470:	46bd      	mov	sp, r7
 810d472:	f85d 7b04 	ldr.w	r7, [sp], #4
 810d476:	4770      	bx	lr

0810d478 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 810d478:	b480      	push	{r7}
 810d47a:	b083      	sub	sp, #12
 810d47c:	af00      	add	r7, sp, #0
 810d47e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 810d480:	bf00      	nop
 810d482:	370c      	adds	r7, #12
 810d484:	46bd      	mov	sp, r7
 810d486:	f85d 7b04 	ldr.w	r7, [sp], #4
 810d48a:	4770      	bx	lr

0810d48c <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 810d48c:	b580      	push	{r7, lr}
 810d48e:	b084      	sub	sp, #16
 810d490:	af00      	add	r7, sp, #0
 810d492:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_length;
#else
  uint32_t crc_length = 0UL;
 810d494:	2300      	movs	r3, #0
 810d496:	60fb      	str	r3, [r7, #12]
#endif
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 810d498:	687b      	ldr	r3, [r7, #4]
 810d49a:	2b00      	cmp	r3, #0
 810d49c:	d101      	bne.n	810d4a2 <HAL_SPI_Init+0x16>
  {
    return HAL_ERROR;
 810d49e:	2301      	movs	r3, #1
 810d4a0:	e0eb      	b.n	810d67a <HAL_SPI_Init+0x1ee>
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 810d4a2:	687b      	ldr	r3, [r7, #4]
 810d4a4:	2200      	movs	r2, #0
 810d4a6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 810d4a8:	687b      	ldr	r3, [r7, #4]
 810d4aa:	681b      	ldr	r3, [r3, #0]
 810d4ac:	4a75      	ldr	r2, [pc, #468]	; (810d684 <HAL_SPI_Init+0x1f8>)
 810d4ae:	4293      	cmp	r3, r2
 810d4b0:	d00f      	beq.n	810d4d2 <HAL_SPI_Init+0x46>
 810d4b2:	687b      	ldr	r3, [r7, #4]
 810d4b4:	681b      	ldr	r3, [r3, #0]
 810d4b6:	4a74      	ldr	r2, [pc, #464]	; (810d688 <HAL_SPI_Init+0x1fc>)
 810d4b8:	4293      	cmp	r3, r2
 810d4ba:	d00a      	beq.n	810d4d2 <HAL_SPI_Init+0x46>
 810d4bc:	687b      	ldr	r3, [r7, #4]
 810d4be:	681b      	ldr	r3, [r3, #0]
 810d4c0:	4a72      	ldr	r2, [pc, #456]	; (810d68c <HAL_SPI_Init+0x200>)
 810d4c2:	4293      	cmp	r3, r2
 810d4c4:	d005      	beq.n	810d4d2 <HAL_SPI_Init+0x46>
 810d4c6:	687b      	ldr	r3, [r7, #4]
 810d4c8:	68db      	ldr	r3, [r3, #12]
 810d4ca:	2b0f      	cmp	r3, #15
 810d4cc:	d901      	bls.n	810d4d2 <HAL_SPI_Init+0x46>
  {
    return HAL_ERROR;
 810d4ce:	2301      	movs	r3, #1
 810d4d0:	e0d3      	b.n	810d67a <HAL_SPI_Init+0x1ee>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 810d4d2:	6878      	ldr	r0, [r7, #4]
 810d4d4:	f000 fb94 	bl	810dc00 <SPI_GetPacketSize>
 810d4d8:	60b8      	str	r0, [r7, #8]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 810d4da:	687b      	ldr	r3, [r7, #4]
 810d4dc:	681b      	ldr	r3, [r3, #0]
 810d4de:	4a69      	ldr	r2, [pc, #420]	; (810d684 <HAL_SPI_Init+0x1f8>)
 810d4e0:	4293      	cmp	r3, r2
 810d4e2:	d00c      	beq.n	810d4fe <HAL_SPI_Init+0x72>
 810d4e4:	687b      	ldr	r3, [r7, #4]
 810d4e6:	681b      	ldr	r3, [r3, #0]
 810d4e8:	4a67      	ldr	r2, [pc, #412]	; (810d688 <HAL_SPI_Init+0x1fc>)
 810d4ea:	4293      	cmp	r3, r2
 810d4ec:	d007      	beq.n	810d4fe <HAL_SPI_Init+0x72>
 810d4ee:	687b      	ldr	r3, [r7, #4]
 810d4f0:	681b      	ldr	r3, [r3, #0]
 810d4f2:	4a66      	ldr	r2, [pc, #408]	; (810d68c <HAL_SPI_Init+0x200>)
 810d4f4:	4293      	cmp	r3, r2
 810d4f6:	d002      	beq.n	810d4fe <HAL_SPI_Init+0x72>
 810d4f8:	68bb      	ldr	r3, [r7, #8]
 810d4fa:	2b08      	cmp	r3, #8
 810d4fc:	d811      	bhi.n	810d522 <HAL_SPI_Init+0x96>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 810d4fe:	687b      	ldr	r3, [r7, #4]
 810d500:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 810d502:	4a60      	ldr	r2, [pc, #384]	; (810d684 <HAL_SPI_Init+0x1f8>)
 810d504:	4293      	cmp	r3, r2
 810d506:	d009      	beq.n	810d51c <HAL_SPI_Init+0x90>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 810d508:	687b      	ldr	r3, [r7, #4]
 810d50a:	681b      	ldr	r3, [r3, #0]
 810d50c:	4a5e      	ldr	r2, [pc, #376]	; (810d688 <HAL_SPI_Init+0x1fc>)
 810d50e:	4293      	cmp	r3, r2
 810d510:	d004      	beq.n	810d51c <HAL_SPI_Init+0x90>
 810d512:	687b      	ldr	r3, [r7, #4]
 810d514:	681b      	ldr	r3, [r3, #0]
 810d516:	4a5d      	ldr	r2, [pc, #372]	; (810d68c <HAL_SPI_Init+0x200>)
 810d518:	4293      	cmp	r3, r2
 810d51a:	d104      	bne.n	810d526 <HAL_SPI_Init+0x9a>
 810d51c:	68bb      	ldr	r3, [r7, #8]
 810d51e:	2b10      	cmp	r3, #16
 810d520:	d901      	bls.n	810d526 <HAL_SPI_Init+0x9a>
  {
    return HAL_ERROR;
 810d522:	2301      	movs	r3, #1
 810d524:	e0a9      	b.n	810d67a <HAL_SPI_Init+0x1ee>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 810d526:	687b      	ldr	r3, [r7, #4]
 810d528:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 810d52c:	b2db      	uxtb	r3, r3
 810d52e:	2b00      	cmp	r3, #0
 810d530:	d106      	bne.n	810d540 <HAL_SPI_Init+0xb4>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 810d532:	687b      	ldr	r3, [r7, #4]
 810d534:	2200      	movs	r2, #0
 810d536:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 810d53a:	6878      	ldr	r0, [r7, #4]
 810d53c:	f7f4 fc2e 	bl	8101d9c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 810d540:	687b      	ldr	r3, [r7, #4]
 810d542:	2202      	movs	r2, #2
 810d544:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 810d548:	687b      	ldr	r3, [r7, #4]
 810d54a:	681b      	ldr	r3, [r3, #0]
 810d54c:	681a      	ldr	r2, [r3, #0]
 810d54e:	687b      	ldr	r3, [r7, #4]
 810d550:	681b      	ldr	r3, [r3, #0]
 810d552:	f022 0201 	bic.w	r2, r2, #1
 810d556:	601a      	str	r2, [r3, #0]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 810d558:	687b      	ldr	r3, [r7, #4]
 810d55a:	699b      	ldr	r3, [r3, #24]
 810d55c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 810d560:	d119      	bne.n	810d596 <HAL_SPI_Init+0x10a>
 810d562:	687b      	ldr	r3, [r7, #4]
 810d564:	685b      	ldr	r3, [r3, #4]
 810d566:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 810d56a:	d103      	bne.n	810d574 <HAL_SPI_Init+0xe8>
 810d56c:	687b      	ldr	r3, [r7, #4]
 810d56e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810d570:	2b00      	cmp	r3, #0
 810d572:	d008      	beq.n	810d586 <HAL_SPI_Init+0xfa>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 810d574:	687b      	ldr	r3, [r7, #4]
 810d576:	685b      	ldr	r3, [r3, #4]
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 810d578:	2b00      	cmp	r3, #0
 810d57a:	d10c      	bne.n	810d596 <HAL_SPI_Init+0x10a>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 810d57c:	687b      	ldr	r3, [r7, #4]
 810d57e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810d580:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 810d584:	d107      	bne.n	810d596 <HAL_SPI_Init+0x10a>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 810d586:	687b      	ldr	r3, [r7, #4]
 810d588:	681b      	ldr	r3, [r3, #0]
 810d58a:	681a      	ldr	r2, [r3, #0]
 810d58c:	687b      	ldr	r3, [r7, #4]
 810d58e:	681b      	ldr	r3, [r3, #0]
 810d590:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 810d594:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 810d596:	687b      	ldr	r3, [r7, #4]
 810d598:	69da      	ldr	r2, [r3, #28]
 810d59a:	687b      	ldr	r3, [r7, #4]
 810d59c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810d59e:	431a      	orrs	r2, r3
 810d5a0:	68fb      	ldr	r3, [r7, #12]
 810d5a2:	431a      	orrs	r2, r3
 810d5a4:	687b      	ldr	r3, [r7, #4]
 810d5a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810d5a8:	ea42 0103 	orr.w	r1, r2, r3
 810d5ac:	687b      	ldr	r3, [r7, #4]
 810d5ae:	68da      	ldr	r2, [r3, #12]
 810d5b0:	687b      	ldr	r3, [r7, #4]
 810d5b2:	681b      	ldr	r3, [r3, #0]
 810d5b4:	430a      	orrs	r2, r1
 810d5b6:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 810d5b8:	687b      	ldr	r3, [r7, #4]
 810d5ba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 810d5bc:	687b      	ldr	r3, [r7, #4]
 810d5be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810d5c0:	431a      	orrs	r2, r3
 810d5c2:	687b      	ldr	r3, [r7, #4]
 810d5c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810d5c6:	431a      	orrs	r2, r3
 810d5c8:	687b      	ldr	r3, [r7, #4]
 810d5ca:	699b      	ldr	r3, [r3, #24]
 810d5cc:	431a      	orrs	r2, r3
 810d5ce:	687b      	ldr	r3, [r7, #4]
 810d5d0:	691b      	ldr	r3, [r3, #16]
 810d5d2:	431a      	orrs	r2, r3
 810d5d4:	687b      	ldr	r3, [r7, #4]
 810d5d6:	695b      	ldr	r3, [r3, #20]
 810d5d8:	431a      	orrs	r2, r3
 810d5da:	687b      	ldr	r3, [r7, #4]
 810d5dc:	6a1b      	ldr	r3, [r3, #32]
 810d5de:	431a      	orrs	r2, r3
 810d5e0:	687b      	ldr	r3, [r7, #4]
 810d5e2:	685b      	ldr	r3, [r3, #4]
 810d5e4:	431a      	orrs	r2, r3
 810d5e6:	687b      	ldr	r3, [r7, #4]
 810d5e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 810d5ea:	431a      	orrs	r2, r3
 810d5ec:	687b      	ldr	r3, [r7, #4]
 810d5ee:	689b      	ldr	r3, [r3, #8]
 810d5f0:	431a      	orrs	r2, r3
 810d5f2:	687b      	ldr	r3, [r7, #4]
 810d5f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 810d5f6:	ea42 0103 	orr.w	r1, r2, r3
 810d5fa:	687b      	ldr	r3, [r7, #4]
 810d5fc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 810d5fe:	687b      	ldr	r3, [r7, #4]
 810d600:	681b      	ldr	r3, [r3, #0]
 810d602:	430a      	orrs	r2, r1
 810d604:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 810d606:	687b      	ldr	r3, [r7, #4]
 810d608:	685b      	ldr	r3, [r3, #4]
 810d60a:	2b00      	cmp	r3, #0
 810d60c:	d113      	bne.n	810d636 <HAL_SPI_Init+0x1aa>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 810d60e:	687b      	ldr	r3, [r7, #4]
 810d610:	681b      	ldr	r3, [r3, #0]
 810d612:	689b      	ldr	r3, [r3, #8]
 810d614:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 810d618:	687b      	ldr	r3, [r7, #4]
 810d61a:	681b      	ldr	r3, [r3, #0]
 810d61c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 810d620:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 810d622:	687b      	ldr	r3, [r7, #4]
 810d624:	681b      	ldr	r3, [r3, #0]
 810d626:	689b      	ldr	r3, [r3, #8]
 810d628:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 810d62c:	687b      	ldr	r3, [r7, #4]
 810d62e:	681b      	ldr	r3, [r3, #0]
 810d630:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 810d634:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 810d636:	687b      	ldr	r3, [r7, #4]
 810d638:	681b      	ldr	r3, [r3, #0]
 810d63a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 810d63c:	687b      	ldr	r3, [r7, #4]
 810d63e:	681b      	ldr	r3, [r3, #0]
 810d640:	f022 0201 	bic.w	r2, r2, #1
 810d644:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 810d646:	687b      	ldr	r3, [r7, #4]
 810d648:	685b      	ldr	r3, [r3, #4]
 810d64a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 810d64e:	2b00      	cmp	r3, #0
 810d650:	d00a      	beq.n	810d668 <HAL_SPI_Init+0x1dc>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 810d652:	687b      	ldr	r3, [r7, #4]
 810d654:	681b      	ldr	r3, [r3, #0]
 810d656:	68db      	ldr	r3, [r3, #12]
 810d658:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 810d65c:	687b      	ldr	r3, [r7, #4]
 810d65e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 810d660:	687b      	ldr	r3, [r7, #4]
 810d662:	681b      	ldr	r3, [r3, #0]
 810d664:	430a      	orrs	r2, r1
 810d666:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 810d668:	687b      	ldr	r3, [r7, #4]
 810d66a:	2200      	movs	r2, #0
 810d66c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 810d670:	687b      	ldr	r3, [r7, #4]
 810d672:	2201      	movs	r2, #1
 810d674:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 810d678:	2300      	movs	r3, #0
}
 810d67a:	4618      	mov	r0, r3
 810d67c:	3710      	adds	r7, #16
 810d67e:	46bd      	mov	sp, r7
 810d680:	bd80      	pop	{r7, pc}
 810d682:	bf00      	nop
 810d684:	40013000 	.word	0x40013000
 810d688:	40003800 	.word	0x40003800
 810d68c:	40003c00 	.word	0x40003c00

0810d690 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 810d690:	b580      	push	{r7, lr}
 810d692:	b08a      	sub	sp, #40	; 0x28
 810d694:	af00      	add	r7, sp, #0
 810d696:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 810d698:	687b      	ldr	r3, [r7, #4]
 810d69a:	681b      	ldr	r3, [r3, #0]
 810d69c:	691b      	ldr	r3, [r3, #16]
 810d69e:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 810d6a0:	687b      	ldr	r3, [r7, #4]
 810d6a2:	681b      	ldr	r3, [r3, #0]
 810d6a4:	695b      	ldr	r3, [r3, #20]
 810d6a6:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 810d6a8:	6a3a      	ldr	r2, [r7, #32]
 810d6aa:	69fb      	ldr	r3, [r7, #28]
 810d6ac:	4013      	ands	r3, r2
 810d6ae:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 810d6b0:	687b      	ldr	r3, [r7, #4]
 810d6b2:	681b      	ldr	r3, [r3, #0]
 810d6b4:	689b      	ldr	r3, [r3, #8]
 810d6b6:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 810d6b8:	2300      	movs	r3, #0
 810d6ba:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 810d6bc:	687b      	ldr	r3, [r7, #4]
 810d6be:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 810d6c2:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 810d6c4:	687b      	ldr	r3, [r7, #4]
 810d6c6:	681b      	ldr	r3, [r3, #0]
 810d6c8:	3330      	adds	r3, #48	; 0x30
 810d6ca:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */


  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 810d6cc:	69bb      	ldr	r3, [r7, #24]
 810d6ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 810d6d2:	2b00      	cmp	r3, #0
 810d6d4:	d113      	bne.n	810d6fe <HAL_SPI_IRQHandler+0x6e>
 810d6d6:	69bb      	ldr	r3, [r7, #24]
 810d6d8:	f003 0320 	and.w	r3, r3, #32
 810d6dc:	2b00      	cmp	r3, #0
 810d6de:	d10e      	bne.n	810d6fe <HAL_SPI_IRQHandler+0x6e>
 810d6e0:	69bb      	ldr	r3, [r7, #24]
 810d6e2:	f003 0304 	and.w	r3, r3, #4
 810d6e6:	2b00      	cmp	r3, #0
 810d6e8:	d009      	beq.n	810d6fe <HAL_SPI_IRQHandler+0x6e>
  {
    hspi->TxISR(hspi);
 810d6ea:	687b      	ldr	r3, [r7, #4]
 810d6ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 810d6ee:	6878      	ldr	r0, [r7, #4]
 810d6f0:	4798      	blx	r3
    hspi->RxISR(hspi);
 810d6f2:	687b      	ldr	r3, [r7, #4]
 810d6f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 810d6f6:	6878      	ldr	r0, [r7, #4]
 810d6f8:	4798      	blx	r3
    handled = 1UL;
 810d6fa:	2301      	movs	r3, #1
 810d6fc:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 810d6fe:	69bb      	ldr	r3, [r7, #24]
 810d700:	f003 0340 	and.w	r3, r3, #64	; 0x40
 810d704:	2b00      	cmp	r3, #0
 810d706:	d10f      	bne.n	810d728 <HAL_SPI_IRQHandler+0x98>
 810d708:	69bb      	ldr	r3, [r7, #24]
 810d70a:	f003 0301 	and.w	r3, r3, #1
 810d70e:	2b00      	cmp	r3, #0
 810d710:	d00a      	beq.n	810d728 <HAL_SPI_IRQHandler+0x98>
 810d712:	69bb      	ldr	r3, [r7, #24]
 810d714:	f003 0304 	and.w	r3, r3, #4
 810d718:	2b00      	cmp	r3, #0
 810d71a:	d105      	bne.n	810d728 <HAL_SPI_IRQHandler+0x98>
  {
    hspi->RxISR(hspi);
 810d71c:	687b      	ldr	r3, [r7, #4]
 810d71e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 810d720:	6878      	ldr	r0, [r7, #4]
 810d722:	4798      	blx	r3
    handled = 1UL;
 810d724:	2301      	movs	r3, #1
 810d726:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 810d728:	69bb      	ldr	r3, [r7, #24]
 810d72a:	f003 0320 	and.w	r3, r3, #32
 810d72e:	2b00      	cmp	r3, #0
 810d730:	d10f      	bne.n	810d752 <HAL_SPI_IRQHandler+0xc2>
 810d732:	69bb      	ldr	r3, [r7, #24]
 810d734:	f003 0302 	and.w	r3, r3, #2
 810d738:	2b00      	cmp	r3, #0
 810d73a:	d00a      	beq.n	810d752 <HAL_SPI_IRQHandler+0xc2>
 810d73c:	69bb      	ldr	r3, [r7, #24]
 810d73e:	f003 0304 	and.w	r3, r3, #4
 810d742:	2b00      	cmp	r3, #0
 810d744:	d105      	bne.n	810d752 <HAL_SPI_IRQHandler+0xc2>
  {
    hspi->TxISR(hspi);
 810d746:	687b      	ldr	r3, [r7, #4]
 810d748:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 810d74a:	6878      	ldr	r0, [r7, #4]
 810d74c:	4798      	blx	r3
    handled = 1UL;
 810d74e:	2301      	movs	r3, #1
 810d750:	627b      	str	r3, [r7, #36]	; 0x24
    hspi->Reload.Requested = 0UL;
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_HSPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 810d752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810d754:	2b00      	cmp	r3, #0
 810d756:	f040 8171 	bne.w	810da3c <HAL_SPI_IRQHandler+0x3ac>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 810d75a:	69bb      	ldr	r3, [r7, #24]
 810d75c:	f003 0308 	and.w	r3, r3, #8
 810d760:	2b00      	cmp	r3, #0
 810d762:	f000 80a0 	beq.w	810d8a6 <HAL_SPI_IRQHandler+0x216>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 810d766:	687b      	ldr	r3, [r7, #4]
 810d768:	681b      	ldr	r3, [r3, #0]
 810d76a:	699a      	ldr	r2, [r3, #24]
 810d76c:	687b      	ldr	r3, [r7, #4]
 810d76e:	681b      	ldr	r3, [r3, #0]
 810d770:	f042 0208 	orr.w	r2, r2, #8
 810d774:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 810d776:	687b      	ldr	r3, [r7, #4]
 810d778:	681b      	ldr	r3, [r3, #0]
 810d77a:	699a      	ldr	r2, [r3, #24]
 810d77c:	687b      	ldr	r3, [r7, #4]
 810d77e:	681b      	ldr	r3, [r3, #0]
 810d780:	f042 0210 	orr.w	r2, r2, #16
 810d784:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 810d786:	687b      	ldr	r3, [r7, #4]
 810d788:	681b      	ldr	r3, [r3, #0]
 810d78a:	699a      	ldr	r2, [r3, #24]
 810d78c:	687b      	ldr	r3, [r7, #4]
 810d78e:	681b      	ldr	r3, [r3, #0]
 810d790:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 810d794:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 810d796:	687b      	ldr	r3, [r7, #4]
 810d798:	681b      	ldr	r3, [r3, #0]
 810d79a:	691a      	ldr	r2, [r3, #16]
 810d79c:	687b      	ldr	r3, [r7, #4]
 810d79e:	681b      	ldr	r3, [r3, #0]
 810d7a0:	f022 0208 	bic.w	r2, r2, #8
 810d7a4:	611a      	str	r2, [r3, #16]

    /* DMA Normal Mode */
    if (HAL_IS_BIT_CLR(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN) ||                    // IT based transfer is done
 810d7a6:	697b      	ldr	r3, [r7, #20]
 810d7a8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 810d7ac:	2b00      	cmp	r3, #0
 810d7ae:	d00f      	beq.n	810d7d0 <HAL_SPI_IRQHandler+0x140>
 810d7b0:	7cfb      	ldrb	r3, [r7, #19]
 810d7b2:	2b04      	cmp	r3, #4
 810d7b4:	d004      	beq.n	810d7c0 <HAL_SPI_IRQHandler+0x130>
      ((State != HAL_SPI_STATE_BUSY_RX) && (hspi->hdmatx->Init.Mode == DMA_NORMAL)) ||  // DMA is used in normal mode
 810d7b6:	687b      	ldr	r3, [r7, #4]
 810d7b8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810d7ba:	69db      	ldr	r3, [r3, #28]
 810d7bc:	2b00      	cmp	r3, #0
 810d7be:	d007      	beq.n	810d7d0 <HAL_SPI_IRQHandler+0x140>
 810d7c0:	7cfb      	ldrb	r3, [r7, #19]
 810d7c2:	2b03      	cmp	r3, #3
 810d7c4:	d059      	beq.n	810d87a <HAL_SPI_IRQHandler+0x1ea>
      ((State != HAL_SPI_STATE_BUSY_TX) && (hspi->hdmarx->Init.Mode == DMA_NORMAL)))    // DMA is used in normal mode
 810d7c6:	687b      	ldr	r3, [r7, #4]
 810d7c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810d7ca:	69db      	ldr	r3, [r3, #28]
 810d7cc:	2b00      	cmp	r3, #0
 810d7ce:	d154      	bne.n	810d87a <HAL_SPI_IRQHandler+0x1ea>
    {
      /* For the IT based receive extra polling maybe required for last packet */
      if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 810d7d0:	687b      	ldr	r3, [r7, #4]
 810d7d2:	681b      	ldr	r3, [r3, #0]
 810d7d4:	689b      	ldr	r3, [r3, #8]
 810d7d6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 810d7da:	2b00      	cmp	r3, #0
 810d7dc:	d13d      	bne.n	810d85a <HAL_SPI_IRQHandler+0x1ca>
      {
        /* Pooling remaining data */
        while (hspi->RxXferCount != 0UL)
 810d7de:	e036      	b.n	810d84e <HAL_SPI_IRQHandler+0x1be>
        {
          /* Receive data in 32 Bit mode */
          if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 810d7e0:	687b      	ldr	r3, [r7, #4]
 810d7e2:	68db      	ldr	r3, [r3, #12]
 810d7e4:	2b0f      	cmp	r3, #15
 810d7e6:	d90b      	bls.n	810d800 <HAL_SPI_IRQHandler+0x170>
          {
            *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 810d7e8:	687b      	ldr	r3, [r7, #4]
 810d7ea:	681a      	ldr	r2, [r3, #0]
 810d7ec:	687b      	ldr	r3, [r7, #4]
 810d7ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810d7f0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 810d7f2:	601a      	str	r2, [r3, #0]
            hspi->pRxBuffPtr += sizeof(uint32_t);
 810d7f4:	687b      	ldr	r3, [r7, #4]
 810d7f6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810d7f8:	1d1a      	adds	r2, r3, #4
 810d7fa:	687b      	ldr	r3, [r7, #4]
 810d7fc:	665a      	str	r2, [r3, #100]	; 0x64
 810d7fe:	e01d      	b.n	810d83c <HAL_SPI_IRQHandler+0x1ac>
          }
          /* Receive data in 16 Bit mode */
          else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 810d800:	687b      	ldr	r3, [r7, #4]
 810d802:	68db      	ldr	r3, [r3, #12]
 810d804:	2b07      	cmp	r3, #7
 810d806:	d90b      	bls.n	810d820 <HAL_SPI_IRQHandler+0x190>
          {
#if defined (__GNUC__)
            *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 810d808:	687b      	ldr	r3, [r7, #4]
 810d80a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810d80c:	68fa      	ldr	r2, [r7, #12]
 810d80e:	8812      	ldrh	r2, [r2, #0]
 810d810:	b292      	uxth	r2, r2
 810d812:	801a      	strh	r2, [r3, #0]
#else
            *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
            hspi->pRxBuffPtr += sizeof(uint16_t);
 810d814:	687b      	ldr	r3, [r7, #4]
 810d816:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810d818:	1c9a      	adds	r2, r3, #2
 810d81a:	687b      	ldr	r3, [r7, #4]
 810d81c:	665a      	str	r2, [r3, #100]	; 0x64
 810d81e:	e00d      	b.n	810d83c <HAL_SPI_IRQHandler+0x1ac>
          }
          /* Receive data in 8 Bit mode */
          else
          {
            *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 810d820:	687b      	ldr	r3, [r7, #4]
 810d822:	681b      	ldr	r3, [r3, #0]
 810d824:	f103 0230 	add.w	r2, r3, #48	; 0x30
 810d828:	687b      	ldr	r3, [r7, #4]
 810d82a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810d82c:	7812      	ldrb	r2, [r2, #0]
 810d82e:	b2d2      	uxtb	r2, r2
 810d830:	701a      	strb	r2, [r3, #0]
            hspi->pRxBuffPtr += sizeof(uint8_t);
 810d832:	687b      	ldr	r3, [r7, #4]
 810d834:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810d836:	1c5a      	adds	r2, r3, #1
 810d838:	687b      	ldr	r3, [r7, #4]
 810d83a:	665a      	str	r2, [r3, #100]	; 0x64
          }

          hspi->RxXferCount--;
 810d83c:	687b      	ldr	r3, [r7, #4]
 810d83e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 810d842:	b29b      	uxth	r3, r3
 810d844:	3b01      	subs	r3, #1
 810d846:	b29a      	uxth	r2, r3
 810d848:	687b      	ldr	r3, [r7, #4]
 810d84a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        while (hspi->RxXferCount != 0UL)
 810d84e:	687b      	ldr	r3, [r7, #4]
 810d850:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 810d854:	b29b      	uxth	r3, r3
 810d856:	2b00      	cmp	r3, #0
 810d858:	d1c2      	bne.n	810d7e0 <HAL_SPI_IRQHandler+0x150>
        }
      }

      /* Call SPI Standard close procedure */
      SPI_CloseTransfer(hspi);
 810d85a:	6878      	ldr	r0, [r7, #4]
 810d85c:	f000 f930 	bl	810dac0 <SPI_CloseTransfer>

      hspi->State = HAL_SPI_STATE_READY;
 810d860:	687b      	ldr	r3, [r7, #4]
 810d862:	2201      	movs	r2, #1
 810d864:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
      if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 810d868:	687b      	ldr	r3, [r7, #4]
 810d86a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810d86e:	2b00      	cmp	r3, #0
 810d870:	d003      	beq.n	810d87a <HAL_SPI_IRQHandler+0x1ea>
      {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 810d872:	6878      	ldr	r0, [r7, #4]
 810d874:	f000 f900 	bl	810da78 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
        return;
 810d878:	e0e5      	b.n	810da46 <HAL_SPI_IRQHandler+0x3b6>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 810d87a:	7cfb      	ldrb	r3, [r7, #19]
 810d87c:	2b05      	cmp	r3, #5
 810d87e:	d103      	bne.n	810d888 <HAL_SPI_IRQHandler+0x1f8>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 810d880:	6878      	ldr	r0, [r7, #4]
 810d882:	f7f3 fcad 	bl	81011e0 <HAL_SPI_TxRxCpltCallback>
	else
    {
      /* End of the appropriate call */
    }

    return;
 810d886:	e0db      	b.n	810da40 <HAL_SPI_IRQHandler+0x3b0>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 810d888:	7cfb      	ldrb	r3, [r7, #19]
 810d88a:	2b04      	cmp	r3, #4
 810d88c:	d103      	bne.n	810d896 <HAL_SPI_IRQHandler+0x206>
      HAL_SPI_RxCpltCallback(hspi);
 810d88e:	6878      	ldr	r0, [r7, #4]
 810d890:	f000 f8e8 	bl	810da64 <HAL_SPI_RxCpltCallback>
    return;
 810d894:	e0d4      	b.n	810da40 <HAL_SPI_IRQHandler+0x3b0>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 810d896:	7cfb      	ldrb	r3, [r7, #19]
 810d898:	2b03      	cmp	r3, #3
 810d89a:	f040 80d1 	bne.w	810da40 <HAL_SPI_IRQHandler+0x3b0>
      HAL_SPI_TxCpltCallback(hspi);
 810d89e:	6878      	ldr	r0, [r7, #4]
 810d8a0:	f000 f8d6 	bl	810da50 <HAL_SPI_TxCpltCallback>
    return;
 810d8a4:	e0cc      	b.n	810da40 <HAL_SPI_IRQHandler+0x3b0>
  }

  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 810d8a6:	69fb      	ldr	r3, [r7, #28]
 810d8a8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 810d8ac:	2b00      	cmp	r3, #0
 810d8ae:	d00d      	beq.n	810d8cc <HAL_SPI_IRQHandler+0x23c>
 810d8b0:	6a3b      	ldr	r3, [r7, #32]
 810d8b2:	f003 0308 	and.w	r3, r3, #8
 810d8b6:	2b00      	cmp	r3, #0
 810d8b8:	d008      	beq.n	810d8cc <HAL_SPI_IRQHandler+0x23c>
  {
    /* Abort on going, clear SUSP flag to avoid infinite looping */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 810d8ba:	687b      	ldr	r3, [r7, #4]
 810d8bc:	681b      	ldr	r3, [r3, #0]
 810d8be:	699a      	ldr	r2, [r3, #24]
 810d8c0:	687b      	ldr	r3, [r7, #4]
 810d8c2:	681b      	ldr	r3, [r3, #0]
 810d8c4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 810d8c8:	619a      	str	r2, [r3, #24]

    return;
 810d8ca:	e0bc      	b.n	810da46 <HAL_SPI_IRQHandler+0x3b6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 810d8cc:	69bb      	ldr	r3, [r7, #24]
 810d8ce:	f403 7358 	and.w	r3, r3, #864	; 0x360
 810d8d2:	2b00      	cmp	r3, #0
 810d8d4:	f000 80b7 	beq.w	810da46 <HAL_SPI_IRQHandler+0x3b6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 810d8d8:	69bb      	ldr	r3, [r7, #24]
 810d8da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 810d8de:	2b00      	cmp	r3, #0
 810d8e0:	d00f      	beq.n	810d902 <HAL_SPI_IRQHandler+0x272>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 810d8e2:	687b      	ldr	r3, [r7, #4]
 810d8e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810d8e8:	f043 0204 	orr.w	r2, r3, #4
 810d8ec:	687b      	ldr	r3, [r7, #4]
 810d8ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 810d8f2:	687b      	ldr	r3, [r7, #4]
 810d8f4:	681b      	ldr	r3, [r3, #0]
 810d8f6:	699a      	ldr	r2, [r3, #24]
 810d8f8:	687b      	ldr	r3, [r7, #4]
 810d8fa:	681b      	ldr	r3, [r3, #0]
 810d8fc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 810d900:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 810d902:	69bb      	ldr	r3, [r7, #24]
 810d904:	f403 7300 	and.w	r3, r3, #512	; 0x200
 810d908:	2b00      	cmp	r3, #0
 810d90a:	d00f      	beq.n	810d92c <HAL_SPI_IRQHandler+0x29c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 810d90c:	687b      	ldr	r3, [r7, #4]
 810d90e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810d912:	f043 0201 	orr.w	r2, r3, #1
 810d916:	687b      	ldr	r3, [r7, #4]
 810d918:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 810d91c:	687b      	ldr	r3, [r7, #4]
 810d91e:	681b      	ldr	r3, [r3, #0]
 810d920:	699a      	ldr	r2, [r3, #24]
 810d922:	687b      	ldr	r3, [r7, #4]
 810d924:	681b      	ldr	r3, [r3, #0]
 810d926:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 810d92a:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 810d92c:	69bb      	ldr	r3, [r7, #24]
 810d92e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 810d932:	2b00      	cmp	r3, #0
 810d934:	d00f      	beq.n	810d956 <HAL_SPI_IRQHandler+0x2c6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 810d936:	687b      	ldr	r3, [r7, #4]
 810d938:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810d93c:	f043 0208 	orr.w	r2, r3, #8
 810d940:	687b      	ldr	r3, [r7, #4]
 810d942:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 810d946:	687b      	ldr	r3, [r7, #4]
 810d948:	681b      	ldr	r3, [r3, #0]
 810d94a:	699a      	ldr	r2, [r3, #24]
 810d94c:	687b      	ldr	r3, [r7, #4]
 810d94e:	681b      	ldr	r3, [r3, #0]
 810d950:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 810d954:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 810d956:	69bb      	ldr	r3, [r7, #24]
 810d958:	f003 0320 	and.w	r3, r3, #32
 810d95c:	2b00      	cmp	r3, #0
 810d95e:	d00f      	beq.n	810d980 <HAL_SPI_IRQHandler+0x2f0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 810d960:	687b      	ldr	r3, [r7, #4]
 810d962:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810d966:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 810d96a:	687b      	ldr	r3, [r7, #4]
 810d96c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 810d970:	687b      	ldr	r3, [r7, #4]
 810d972:	681b      	ldr	r3, [r3, #0]
 810d974:	699a      	ldr	r2, [r3, #24]
 810d976:	687b      	ldr	r3, [r7, #4]
 810d978:	681b      	ldr	r3, [r3, #0]
 810d97a:	f042 0220 	orr.w	r2, r2, #32
 810d97e:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 810d980:	687b      	ldr	r3, [r7, #4]
 810d982:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810d986:	2b00      	cmp	r3, #0
 810d988:	d05c      	beq.n	810da44 <HAL_SPI_IRQHandler+0x3b4>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 810d98a:	687b      	ldr	r3, [r7, #4]
 810d98c:	681b      	ldr	r3, [r3, #0]
 810d98e:	681a      	ldr	r2, [r3, #0]
 810d990:	687b      	ldr	r3, [r7, #4]
 810d992:	681b      	ldr	r3, [r3, #0]
 810d994:	f022 0201 	bic.w	r2, r2, #1
 810d998:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR);
 810d99a:	687b      	ldr	r3, [r7, #4]
 810d99c:	681b      	ldr	r3, [r3, #0]
 810d99e:	691b      	ldr	r3, [r3, #16]
 810d9a0:	687a      	ldr	r2, [r7, #4]
 810d9a2:	6812      	ldr	r2, [r2, #0]
 810d9a4:	f423 735a 	bic.w	r3, r3, #872	; 0x368
 810d9a8:	f023 0303 	bic.w	r3, r3, #3
 810d9ac:	6113      	str	r3, [r2, #16]

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 810d9ae:	697b      	ldr	r3, [r7, #20]
 810d9b0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 810d9b4:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 810d9b8:	d138      	bne.n	810da2c <HAL_SPI_IRQHandler+0x39c>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 810d9ba:	687b      	ldr	r3, [r7, #4]
 810d9bc:	681b      	ldr	r3, [r3, #0]
 810d9be:	689a      	ldr	r2, [r3, #8]
 810d9c0:	687b      	ldr	r3, [r7, #4]
 810d9c2:	681b      	ldr	r3, [r3, #0]
 810d9c4:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 810d9c8:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 810d9ca:	687b      	ldr	r3, [r7, #4]
 810d9cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810d9ce:	2b00      	cmp	r3, #0
 810d9d0:	d013      	beq.n	810d9fa <HAL_SPI_IRQHandler+0x36a>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 810d9d2:	687b      	ldr	r3, [r7, #4]
 810d9d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810d9d6:	4a1d      	ldr	r2, [pc, #116]	; (810da4c <HAL_SPI_IRQHandler+0x3bc>)
 810d9d8:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 810d9da:	687b      	ldr	r3, [r7, #4]
 810d9dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810d9de:	4618      	mov	r0, r3
 810d9e0:	f7f7 fd76 	bl	81054d0 <HAL_DMA_Abort_IT>
 810d9e4:	4603      	mov	r3, r0
 810d9e6:	2b00      	cmp	r3, #0
 810d9e8:	d007      	beq.n	810d9fa <HAL_SPI_IRQHandler+0x36a>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 810d9ea:	687b      	ldr	r3, [r7, #4]
 810d9ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810d9f0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 810d9f4:	687b      	ldr	r3, [r7, #4]
 810d9f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 810d9fa:	687b      	ldr	r3, [r7, #4]
 810d9fc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810d9fe:	2b00      	cmp	r3, #0
 810da00:	d020      	beq.n	810da44 <HAL_SPI_IRQHandler+0x3b4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 810da02:	687b      	ldr	r3, [r7, #4]
 810da04:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810da06:	4a11      	ldr	r2, [pc, #68]	; (810da4c <HAL_SPI_IRQHandler+0x3bc>)
 810da08:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 810da0a:	687b      	ldr	r3, [r7, #4]
 810da0c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810da0e:	4618      	mov	r0, r3
 810da10:	f7f7 fd5e 	bl	81054d0 <HAL_DMA_Abort_IT>
 810da14:	4603      	mov	r3, r0
 810da16:	2b00      	cmp	r3, #0
 810da18:	d014      	beq.n	810da44 <HAL_SPI_IRQHandler+0x3b4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 810da1a:	687b      	ldr	r3, [r7, #4]
 810da1c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810da20:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 810da24:	687b      	ldr	r3, [r7, #4]
 810da26:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 810da2a:	e00b      	b.n	810da44 <HAL_SPI_IRQHandler+0x3b4>
        hspi->State = HAL_SPI_STATE_READY;
 810da2c:	687b      	ldr	r3, [r7, #4]
 810da2e:	2201      	movs	r2, #1
 810da30:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        HAL_SPI_ErrorCallback(hspi);
 810da34:	6878      	ldr	r0, [r7, #4]
 810da36:	f000 f81f 	bl	810da78 <HAL_SPI_ErrorCallback>
    return;
 810da3a:	e003      	b.n	810da44 <HAL_SPI_IRQHandler+0x3b4>
    return;
 810da3c:	bf00      	nop
 810da3e:	e002      	b.n	810da46 <HAL_SPI_IRQHandler+0x3b6>
    return;
 810da40:	bf00      	nop
 810da42:	e000      	b.n	810da46 <HAL_SPI_IRQHandler+0x3b6>
    return;
 810da44:	bf00      	nop
  }
}
 810da46:	3728      	adds	r7, #40	; 0x28
 810da48:	46bd      	mov	sp, r7
 810da4a:	bd80      	pop	{r7, pc}
 810da4c:	0810da8d 	.word	0x0810da8d

0810da50 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 810da50:	b480      	push	{r7}
 810da52:	b083      	sub	sp, #12
 810da54:	af00      	add	r7, sp, #0
 810da56:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 810da58:	bf00      	nop
 810da5a:	370c      	adds	r7, #12
 810da5c:	46bd      	mov	sp, r7
 810da5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 810da62:	4770      	bx	lr

0810da64 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 810da64:	b480      	push	{r7}
 810da66:	b083      	sub	sp, #12
 810da68:	af00      	add	r7, sp, #0
 810da6a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 810da6c:	bf00      	nop
 810da6e:	370c      	adds	r7, #12
 810da70:	46bd      	mov	sp, r7
 810da72:	f85d 7b04 	ldr.w	r7, [sp], #4
 810da76:	4770      	bx	lr

0810da78 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 810da78:	b480      	push	{r7}
 810da7a:	b083      	sub	sp, #12
 810da7c:	af00      	add	r7, sp, #0
 810da7e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 810da80:	bf00      	nop
 810da82:	370c      	adds	r7, #12
 810da84:	46bd      	mov	sp, r7
 810da86:	f85d 7b04 	ldr.w	r7, [sp], #4
 810da8a:	4770      	bx	lr

0810da8c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 810da8c:	b580      	push	{r7, lr}
 810da8e:	b084      	sub	sp, #16
 810da90:	af00      	add	r7, sp, #0
 810da92:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 810da94:	687b      	ldr	r3, [r7, #4]
 810da96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810da98:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 810da9a:	68fb      	ldr	r3, [r7, #12]
 810da9c:	2200      	movs	r2, #0
 810da9e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 810daa2:	68fb      	ldr	r3, [r7, #12]
 810daa4:	2200      	movs	r2, #0
 810daa6:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 810daaa:	68fb      	ldr	r3, [r7, #12]
 810daac:	2201      	movs	r2, #1
 810daae:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 810dab2:	68f8      	ldr	r0, [r7, #12]
 810dab4:	f7ff ffe0 	bl	810da78 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 810dab8:	bf00      	nop
 810daba:	3710      	adds	r7, #16
 810dabc:	46bd      	mov	sp, r7
 810dabe:	bd80      	pop	{r7, pc}

0810dac0 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
*         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 810dac0:	b480      	push	{r7}
 810dac2:	b085      	sub	sp, #20
 810dac4:	af00      	add	r7, sp, #0
 810dac6:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 810dac8:	687b      	ldr	r3, [r7, #4]
 810daca:	681b      	ldr	r3, [r3, #0]
 810dacc:	695b      	ldr	r3, [r3, #20]
 810dace:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 810dad0:	687b      	ldr	r3, [r7, #4]
 810dad2:	681b      	ldr	r3, [r3, #0]
 810dad4:	699a      	ldr	r2, [r3, #24]
 810dad6:	687b      	ldr	r3, [r7, #4]
 810dad8:	681b      	ldr	r3, [r3, #0]
 810dada:	f042 0208 	orr.w	r2, r2, #8
 810dade:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 810dae0:	687b      	ldr	r3, [r7, #4]
 810dae2:	681b      	ldr	r3, [r3, #0]
 810dae4:	699a      	ldr	r2, [r3, #24]
 810dae6:	687b      	ldr	r3, [r7, #4]
 810dae8:	681b      	ldr	r3, [r3, #0]
 810daea:	f042 0210 	orr.w	r2, r2, #16
 810daee:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 810daf0:	687b      	ldr	r3, [r7, #4]
 810daf2:	681b      	ldr	r3, [r3, #0]
 810daf4:	681a      	ldr	r2, [r3, #0]
 810daf6:	687b      	ldr	r3, [r7, #4]
 810daf8:	681b      	ldr	r3, [r3, #0]
 810dafa:	f022 0201 	bic.w	r2, r2, #1
 810dafe:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 810db00:	687b      	ldr	r3, [r7, #4]
 810db02:	681b      	ldr	r3, [r3, #0]
 810db04:	691b      	ldr	r3, [r3, #16]
 810db06:	687a      	ldr	r2, [r7, #4]
 810db08:	6812      	ldr	r2, [r2, #0]
 810db0a:	f423 735b 	bic.w	r3, r3, #876	; 0x36c
 810db0e:	f023 0303 	bic.w	r3, r3, #3
 810db12:	6113      	str	r3, [r2, #16]

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 810db14:	687b      	ldr	r3, [r7, #4]
 810db16:	681b      	ldr	r3, [r3, #0]
 810db18:	689a      	ldr	r2, [r3, #8]
 810db1a:	687b      	ldr	r3, [r7, #4]
 810db1c:	681b      	ldr	r3, [r3, #0]
 810db1e:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 810db22:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 810db24:	687b      	ldr	r3, [r7, #4]
 810db26:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 810db2a:	b2db      	uxtb	r3, r3
 810db2c:	2b04      	cmp	r3, #4
 810db2e:	d014      	beq.n	810db5a <SPI_CloseTransfer+0x9a>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 810db30:	68fb      	ldr	r3, [r7, #12]
 810db32:	f003 0320 	and.w	r3, r3, #32
 810db36:	2b00      	cmp	r3, #0
 810db38:	d00f      	beq.n	810db5a <SPI_CloseTransfer+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 810db3a:	687b      	ldr	r3, [r7, #4]
 810db3c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810db40:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 810db44:	687b      	ldr	r3, [r7, #4]
 810db46:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 810db4a:	687b      	ldr	r3, [r7, #4]
 810db4c:	681b      	ldr	r3, [r3, #0]
 810db4e:	699a      	ldr	r2, [r3, #24]
 810db50:	687b      	ldr	r3, [r7, #4]
 810db52:	681b      	ldr	r3, [r3, #0]
 810db54:	f042 0220 	orr.w	r2, r2, #32
 810db58:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 810db5a:	687b      	ldr	r3, [r7, #4]
 810db5c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 810db60:	b2db      	uxtb	r3, r3
 810db62:	2b03      	cmp	r3, #3
 810db64:	d014      	beq.n	810db90 <SPI_CloseTransfer+0xd0>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 810db66:	68fb      	ldr	r3, [r7, #12]
 810db68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 810db6c:	2b00      	cmp	r3, #0
 810db6e:	d00f      	beq.n	810db90 <SPI_CloseTransfer+0xd0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 810db70:	687b      	ldr	r3, [r7, #4]
 810db72:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810db76:	f043 0204 	orr.w	r2, r3, #4
 810db7a:	687b      	ldr	r3, [r7, #4]
 810db7c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 810db80:	687b      	ldr	r3, [r7, #4]
 810db82:	681b      	ldr	r3, [r3, #0]
 810db84:	699a      	ldr	r2, [r3, #24]
 810db86:	687b      	ldr	r3, [r7, #4]
 810db88:	681b      	ldr	r3, [r3, #0]
 810db8a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 810db8e:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 810db90:	68fb      	ldr	r3, [r7, #12]
 810db92:	f403 7300 	and.w	r3, r3, #512	; 0x200
 810db96:	2b00      	cmp	r3, #0
 810db98:	d00f      	beq.n	810dbba <SPI_CloseTransfer+0xfa>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 810db9a:	687b      	ldr	r3, [r7, #4]
 810db9c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810dba0:	f043 0201 	orr.w	r2, r3, #1
 810dba4:	687b      	ldr	r3, [r7, #4]
 810dba6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 810dbaa:	687b      	ldr	r3, [r7, #4]
 810dbac:	681b      	ldr	r3, [r3, #0]
 810dbae:	699a      	ldr	r2, [r3, #24]
 810dbb0:	687b      	ldr	r3, [r7, #4]
 810dbb2:	681b      	ldr	r3, [r3, #0]
 810dbb4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 810dbb8:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 810dbba:	68fb      	ldr	r3, [r7, #12]
 810dbbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 810dbc0:	2b00      	cmp	r3, #0
 810dbc2:	d00f      	beq.n	810dbe4 <SPI_CloseTransfer+0x124>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 810dbc4:	687b      	ldr	r3, [r7, #4]
 810dbc6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810dbca:	f043 0208 	orr.w	r2, r3, #8
 810dbce:	687b      	ldr	r3, [r7, #4]
 810dbd0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 810dbd4:	687b      	ldr	r3, [r7, #4]
 810dbd6:	681b      	ldr	r3, [r3, #0]
 810dbd8:	699a      	ldr	r2, [r3, #24]
 810dbda:	687b      	ldr	r3, [r7, #4]
 810dbdc:	681b      	ldr	r3, [r3, #0]
 810dbde:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 810dbe2:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 810dbe4:	687b      	ldr	r3, [r7, #4]
 810dbe6:	2200      	movs	r2, #0
 810dbe8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 810dbec:	687b      	ldr	r3, [r7, #4]
 810dbee:	2200      	movs	r2, #0
 810dbf0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 810dbf4:	bf00      	nop
 810dbf6:	3714      	adds	r7, #20
 810dbf8:	46bd      	mov	sp, r7
 810dbfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 810dbfe:	4770      	bx	lr

0810dc00 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 810dc00:	b480      	push	{r7}
 810dc02:	b085      	sub	sp, #20
 810dc04:	af00      	add	r7, sp, #0
 810dc06:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 810dc08:	687b      	ldr	r3, [r7, #4]
 810dc0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810dc0c:	095b      	lsrs	r3, r3, #5
 810dc0e:	3301      	adds	r3, #1
 810dc10:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 810dc12:	687b      	ldr	r3, [r7, #4]
 810dc14:	68db      	ldr	r3, [r3, #12]
 810dc16:	3301      	adds	r3, #1
 810dc18:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 810dc1a:	68bb      	ldr	r3, [r7, #8]
 810dc1c:	3307      	adds	r3, #7
 810dc1e:	08db      	lsrs	r3, r3, #3
 810dc20:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 810dc22:	68bb      	ldr	r3, [r7, #8]
 810dc24:	68fa      	ldr	r2, [r7, #12]
 810dc26:	fb02 f303 	mul.w	r3, r2, r3
}
 810dc2a:	4618      	mov	r0, r3
 810dc2c:	3714      	adds	r7, #20
 810dc2e:	46bd      	mov	sp, r7
 810dc30:	f85d 7b04 	ldr.w	r7, [sp], #4
 810dc34:	4770      	bx	lr

0810dc36 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 810dc36:	b580      	push	{r7, lr}
 810dc38:	b082      	sub	sp, #8
 810dc3a:	af00      	add	r7, sp, #0
 810dc3c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 810dc3e:	687b      	ldr	r3, [r7, #4]
 810dc40:	2b00      	cmp	r3, #0
 810dc42:	d101      	bne.n	810dc48 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 810dc44:	2301      	movs	r3, #1
 810dc46:	e049      	b.n	810dcdc <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 810dc48:	687b      	ldr	r3, [r7, #4]
 810dc4a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 810dc4e:	b2db      	uxtb	r3, r3
 810dc50:	2b00      	cmp	r3, #0
 810dc52:	d106      	bne.n	810dc62 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 810dc54:	687b      	ldr	r3, [r7, #4]
 810dc56:	2200      	movs	r2, #0
 810dc58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 810dc5c:	6878      	ldr	r0, [r7, #4]
 810dc5e:	f7f4 fc63 	bl	8102528 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 810dc62:	687b      	ldr	r3, [r7, #4]
 810dc64:	2202      	movs	r2, #2
 810dc66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 810dc6a:	687b      	ldr	r3, [r7, #4]
 810dc6c:	681a      	ldr	r2, [r3, #0]
 810dc6e:	687b      	ldr	r3, [r7, #4]
 810dc70:	3304      	adds	r3, #4
 810dc72:	4619      	mov	r1, r3
 810dc74:	4610      	mov	r0, r2
 810dc76:	f000 fc51 	bl	810e51c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 810dc7a:	687b      	ldr	r3, [r7, #4]
 810dc7c:	2201      	movs	r2, #1
 810dc7e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 810dc82:	687b      	ldr	r3, [r7, #4]
 810dc84:	2201      	movs	r2, #1
 810dc86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 810dc8a:	687b      	ldr	r3, [r7, #4]
 810dc8c:	2201      	movs	r2, #1
 810dc8e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 810dc92:	687b      	ldr	r3, [r7, #4]
 810dc94:	2201      	movs	r2, #1
 810dc96:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 810dc9a:	687b      	ldr	r3, [r7, #4]
 810dc9c:	2201      	movs	r2, #1
 810dc9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 810dca2:	687b      	ldr	r3, [r7, #4]
 810dca4:	2201      	movs	r2, #1
 810dca6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 810dcaa:	687b      	ldr	r3, [r7, #4]
 810dcac:	2201      	movs	r2, #1
 810dcae:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 810dcb2:	687b      	ldr	r3, [r7, #4]
 810dcb4:	2201      	movs	r2, #1
 810dcb6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 810dcba:	687b      	ldr	r3, [r7, #4]
 810dcbc:	2201      	movs	r2, #1
 810dcbe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 810dcc2:	687b      	ldr	r3, [r7, #4]
 810dcc4:	2201      	movs	r2, #1
 810dcc6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 810dcca:	687b      	ldr	r3, [r7, #4]
 810dccc:	2201      	movs	r2, #1
 810dcce:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 810dcd2:	687b      	ldr	r3, [r7, #4]
 810dcd4:	2201      	movs	r2, #1
 810dcd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 810dcda:	2300      	movs	r3, #0
}
 810dcdc:	4618      	mov	r0, r3
 810dcde:	3708      	adds	r7, #8
 810dce0:	46bd      	mov	sp, r7
 810dce2:	bd80      	pop	{r7, pc}

0810dce4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 810dce4:	b480      	push	{r7}
 810dce6:	b085      	sub	sp, #20
 810dce8:	af00      	add	r7, sp, #0
 810dcea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 810dcec:	687b      	ldr	r3, [r7, #4]
 810dcee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 810dcf2:	b2db      	uxtb	r3, r3
 810dcf4:	2b01      	cmp	r3, #1
 810dcf6:	d001      	beq.n	810dcfc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 810dcf8:	2301      	movs	r3, #1
 810dcfa:	e04f      	b.n	810dd9c <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 810dcfc:	687b      	ldr	r3, [r7, #4]
 810dcfe:	2202      	movs	r2, #2
 810dd00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 810dd04:	687b      	ldr	r3, [r7, #4]
 810dd06:	681b      	ldr	r3, [r3, #0]
 810dd08:	68da      	ldr	r2, [r3, #12]
 810dd0a:	687b      	ldr	r3, [r7, #4]
 810dd0c:	681b      	ldr	r3, [r3, #0]
 810dd0e:	f042 0201 	orr.w	r2, r2, #1
 810dd12:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 810dd14:	687b      	ldr	r3, [r7, #4]
 810dd16:	681b      	ldr	r3, [r3, #0]
 810dd18:	4a23      	ldr	r2, [pc, #140]	; (810dda8 <HAL_TIM_Base_Start_IT+0xc4>)
 810dd1a:	4293      	cmp	r3, r2
 810dd1c:	d01d      	beq.n	810dd5a <HAL_TIM_Base_Start_IT+0x76>
 810dd1e:	687b      	ldr	r3, [r7, #4]
 810dd20:	681b      	ldr	r3, [r3, #0]
 810dd22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 810dd26:	d018      	beq.n	810dd5a <HAL_TIM_Base_Start_IT+0x76>
 810dd28:	687b      	ldr	r3, [r7, #4]
 810dd2a:	681b      	ldr	r3, [r3, #0]
 810dd2c:	4a1f      	ldr	r2, [pc, #124]	; (810ddac <HAL_TIM_Base_Start_IT+0xc8>)
 810dd2e:	4293      	cmp	r3, r2
 810dd30:	d013      	beq.n	810dd5a <HAL_TIM_Base_Start_IT+0x76>
 810dd32:	687b      	ldr	r3, [r7, #4]
 810dd34:	681b      	ldr	r3, [r3, #0]
 810dd36:	4a1e      	ldr	r2, [pc, #120]	; (810ddb0 <HAL_TIM_Base_Start_IT+0xcc>)
 810dd38:	4293      	cmp	r3, r2
 810dd3a:	d00e      	beq.n	810dd5a <HAL_TIM_Base_Start_IT+0x76>
 810dd3c:	687b      	ldr	r3, [r7, #4]
 810dd3e:	681b      	ldr	r3, [r3, #0]
 810dd40:	4a1c      	ldr	r2, [pc, #112]	; (810ddb4 <HAL_TIM_Base_Start_IT+0xd0>)
 810dd42:	4293      	cmp	r3, r2
 810dd44:	d009      	beq.n	810dd5a <HAL_TIM_Base_Start_IT+0x76>
 810dd46:	687b      	ldr	r3, [r7, #4]
 810dd48:	681b      	ldr	r3, [r3, #0]
 810dd4a:	4a1b      	ldr	r2, [pc, #108]	; (810ddb8 <HAL_TIM_Base_Start_IT+0xd4>)
 810dd4c:	4293      	cmp	r3, r2
 810dd4e:	d004      	beq.n	810dd5a <HAL_TIM_Base_Start_IT+0x76>
 810dd50:	687b      	ldr	r3, [r7, #4]
 810dd52:	681b      	ldr	r3, [r3, #0]
 810dd54:	4a19      	ldr	r2, [pc, #100]	; (810ddbc <HAL_TIM_Base_Start_IT+0xd8>)
 810dd56:	4293      	cmp	r3, r2
 810dd58:	d115      	bne.n	810dd86 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 810dd5a:	687b      	ldr	r3, [r7, #4]
 810dd5c:	681b      	ldr	r3, [r3, #0]
 810dd5e:	689a      	ldr	r2, [r3, #8]
 810dd60:	4b17      	ldr	r3, [pc, #92]	; (810ddc0 <HAL_TIM_Base_Start_IT+0xdc>)
 810dd62:	4013      	ands	r3, r2
 810dd64:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 810dd66:	68fb      	ldr	r3, [r7, #12]
 810dd68:	2b06      	cmp	r3, #6
 810dd6a:	d015      	beq.n	810dd98 <HAL_TIM_Base_Start_IT+0xb4>
 810dd6c:	68fb      	ldr	r3, [r7, #12]
 810dd6e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 810dd72:	d011      	beq.n	810dd98 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 810dd74:	687b      	ldr	r3, [r7, #4]
 810dd76:	681b      	ldr	r3, [r3, #0]
 810dd78:	681a      	ldr	r2, [r3, #0]
 810dd7a:	687b      	ldr	r3, [r7, #4]
 810dd7c:	681b      	ldr	r3, [r3, #0]
 810dd7e:	f042 0201 	orr.w	r2, r2, #1
 810dd82:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 810dd84:	e008      	b.n	810dd98 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 810dd86:	687b      	ldr	r3, [r7, #4]
 810dd88:	681b      	ldr	r3, [r3, #0]
 810dd8a:	681a      	ldr	r2, [r3, #0]
 810dd8c:	687b      	ldr	r3, [r7, #4]
 810dd8e:	681b      	ldr	r3, [r3, #0]
 810dd90:	f042 0201 	orr.w	r2, r2, #1
 810dd94:	601a      	str	r2, [r3, #0]
 810dd96:	e000      	b.n	810dd9a <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 810dd98:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 810dd9a:	2300      	movs	r3, #0
}
 810dd9c:	4618      	mov	r0, r3
 810dd9e:	3714      	adds	r7, #20
 810dda0:	46bd      	mov	sp, r7
 810dda2:	f85d 7b04 	ldr.w	r7, [sp], #4
 810dda6:	4770      	bx	lr
 810dda8:	40010000 	.word	0x40010000
 810ddac:	40000400 	.word	0x40000400
 810ddb0:	40000800 	.word	0x40000800
 810ddb4:	40000c00 	.word	0x40000c00
 810ddb8:	40010400 	.word	0x40010400
 810ddbc:	40001800 	.word	0x40001800
 810ddc0:	00010007 	.word	0x00010007

0810ddc4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 810ddc4:	b580      	push	{r7, lr}
 810ddc6:	b082      	sub	sp, #8
 810ddc8:	af00      	add	r7, sp, #0
 810ddca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 810ddcc:	687b      	ldr	r3, [r7, #4]
 810ddce:	2b00      	cmp	r3, #0
 810ddd0:	d101      	bne.n	810ddd6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 810ddd2:	2301      	movs	r3, #1
 810ddd4:	e049      	b.n	810de6a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 810ddd6:	687b      	ldr	r3, [r7, #4]
 810ddd8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 810dddc:	b2db      	uxtb	r3, r3
 810ddde:	2b00      	cmp	r3, #0
 810dde0:	d106      	bne.n	810ddf0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 810dde2:	687b      	ldr	r3, [r7, #4]
 810dde4:	2200      	movs	r2, #0
 810dde6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 810ddea:	6878      	ldr	r0, [r7, #4]
 810ddec:	f000 f841 	bl	810de72 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 810ddf0:	687b      	ldr	r3, [r7, #4]
 810ddf2:	2202      	movs	r2, #2
 810ddf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 810ddf8:	687b      	ldr	r3, [r7, #4]
 810ddfa:	681a      	ldr	r2, [r3, #0]
 810ddfc:	687b      	ldr	r3, [r7, #4]
 810ddfe:	3304      	adds	r3, #4
 810de00:	4619      	mov	r1, r3
 810de02:	4610      	mov	r0, r2
 810de04:	f000 fb8a 	bl	810e51c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 810de08:	687b      	ldr	r3, [r7, #4]
 810de0a:	2201      	movs	r2, #1
 810de0c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 810de10:	687b      	ldr	r3, [r7, #4]
 810de12:	2201      	movs	r2, #1
 810de14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 810de18:	687b      	ldr	r3, [r7, #4]
 810de1a:	2201      	movs	r2, #1
 810de1c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 810de20:	687b      	ldr	r3, [r7, #4]
 810de22:	2201      	movs	r2, #1
 810de24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 810de28:	687b      	ldr	r3, [r7, #4]
 810de2a:	2201      	movs	r2, #1
 810de2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 810de30:	687b      	ldr	r3, [r7, #4]
 810de32:	2201      	movs	r2, #1
 810de34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 810de38:	687b      	ldr	r3, [r7, #4]
 810de3a:	2201      	movs	r2, #1
 810de3c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 810de40:	687b      	ldr	r3, [r7, #4]
 810de42:	2201      	movs	r2, #1
 810de44:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 810de48:	687b      	ldr	r3, [r7, #4]
 810de4a:	2201      	movs	r2, #1
 810de4c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 810de50:	687b      	ldr	r3, [r7, #4]
 810de52:	2201      	movs	r2, #1
 810de54:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 810de58:	687b      	ldr	r3, [r7, #4]
 810de5a:	2201      	movs	r2, #1
 810de5c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 810de60:	687b      	ldr	r3, [r7, #4]
 810de62:	2201      	movs	r2, #1
 810de64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 810de68:	2300      	movs	r3, #0
}
 810de6a:	4618      	mov	r0, r3
 810de6c:	3708      	adds	r7, #8
 810de6e:	46bd      	mov	sp, r7
 810de70:	bd80      	pop	{r7, pc}

0810de72 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 810de72:	b480      	push	{r7}
 810de74:	b083      	sub	sp, #12
 810de76:	af00      	add	r7, sp, #0
 810de78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 810de7a:	bf00      	nop
 810de7c:	370c      	adds	r7, #12
 810de7e:	46bd      	mov	sp, r7
 810de80:	f85d 7b04 	ldr.w	r7, [sp], #4
 810de84:	4770      	bx	lr

0810de86 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 810de86:	b580      	push	{r7, lr}
 810de88:	b082      	sub	sp, #8
 810de8a:	af00      	add	r7, sp, #0
 810de8c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 810de8e:	687b      	ldr	r3, [r7, #4]
 810de90:	681b      	ldr	r3, [r3, #0]
 810de92:	691b      	ldr	r3, [r3, #16]
 810de94:	f003 0302 	and.w	r3, r3, #2
 810de98:	2b02      	cmp	r3, #2
 810de9a:	d122      	bne.n	810dee2 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 810de9c:	687b      	ldr	r3, [r7, #4]
 810de9e:	681b      	ldr	r3, [r3, #0]
 810dea0:	68db      	ldr	r3, [r3, #12]
 810dea2:	f003 0302 	and.w	r3, r3, #2
 810dea6:	2b02      	cmp	r3, #2
 810dea8:	d11b      	bne.n	810dee2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 810deaa:	687b      	ldr	r3, [r7, #4]
 810deac:	681b      	ldr	r3, [r3, #0]
 810deae:	f06f 0202 	mvn.w	r2, #2
 810deb2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 810deb4:	687b      	ldr	r3, [r7, #4]
 810deb6:	2201      	movs	r2, #1
 810deb8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 810deba:	687b      	ldr	r3, [r7, #4]
 810debc:	681b      	ldr	r3, [r3, #0]
 810debe:	699b      	ldr	r3, [r3, #24]
 810dec0:	f003 0303 	and.w	r3, r3, #3
 810dec4:	2b00      	cmp	r3, #0
 810dec6:	d003      	beq.n	810ded0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 810dec8:	6878      	ldr	r0, [r7, #4]
 810deca:	f000 fb09 	bl	810e4e0 <HAL_TIM_IC_CaptureCallback>
 810dece:	e005      	b.n	810dedc <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 810ded0:	6878      	ldr	r0, [r7, #4]
 810ded2:	f000 fafb 	bl	810e4cc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 810ded6:	6878      	ldr	r0, [r7, #4]
 810ded8:	f000 fb0c 	bl	810e4f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 810dedc:	687b      	ldr	r3, [r7, #4]
 810dede:	2200      	movs	r2, #0
 810dee0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 810dee2:	687b      	ldr	r3, [r7, #4]
 810dee4:	681b      	ldr	r3, [r3, #0]
 810dee6:	691b      	ldr	r3, [r3, #16]
 810dee8:	f003 0304 	and.w	r3, r3, #4
 810deec:	2b04      	cmp	r3, #4
 810deee:	d122      	bne.n	810df36 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 810def0:	687b      	ldr	r3, [r7, #4]
 810def2:	681b      	ldr	r3, [r3, #0]
 810def4:	68db      	ldr	r3, [r3, #12]
 810def6:	f003 0304 	and.w	r3, r3, #4
 810defa:	2b04      	cmp	r3, #4
 810defc:	d11b      	bne.n	810df36 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 810defe:	687b      	ldr	r3, [r7, #4]
 810df00:	681b      	ldr	r3, [r3, #0]
 810df02:	f06f 0204 	mvn.w	r2, #4
 810df06:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 810df08:	687b      	ldr	r3, [r7, #4]
 810df0a:	2202      	movs	r2, #2
 810df0c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 810df0e:	687b      	ldr	r3, [r7, #4]
 810df10:	681b      	ldr	r3, [r3, #0]
 810df12:	699b      	ldr	r3, [r3, #24]
 810df14:	f403 7340 	and.w	r3, r3, #768	; 0x300
 810df18:	2b00      	cmp	r3, #0
 810df1a:	d003      	beq.n	810df24 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 810df1c:	6878      	ldr	r0, [r7, #4]
 810df1e:	f000 fadf 	bl	810e4e0 <HAL_TIM_IC_CaptureCallback>
 810df22:	e005      	b.n	810df30 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 810df24:	6878      	ldr	r0, [r7, #4]
 810df26:	f000 fad1 	bl	810e4cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 810df2a:	6878      	ldr	r0, [r7, #4]
 810df2c:	f000 fae2 	bl	810e4f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 810df30:	687b      	ldr	r3, [r7, #4]
 810df32:	2200      	movs	r2, #0
 810df34:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 810df36:	687b      	ldr	r3, [r7, #4]
 810df38:	681b      	ldr	r3, [r3, #0]
 810df3a:	691b      	ldr	r3, [r3, #16]
 810df3c:	f003 0308 	and.w	r3, r3, #8
 810df40:	2b08      	cmp	r3, #8
 810df42:	d122      	bne.n	810df8a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 810df44:	687b      	ldr	r3, [r7, #4]
 810df46:	681b      	ldr	r3, [r3, #0]
 810df48:	68db      	ldr	r3, [r3, #12]
 810df4a:	f003 0308 	and.w	r3, r3, #8
 810df4e:	2b08      	cmp	r3, #8
 810df50:	d11b      	bne.n	810df8a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 810df52:	687b      	ldr	r3, [r7, #4]
 810df54:	681b      	ldr	r3, [r3, #0]
 810df56:	f06f 0208 	mvn.w	r2, #8
 810df5a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 810df5c:	687b      	ldr	r3, [r7, #4]
 810df5e:	2204      	movs	r2, #4
 810df60:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 810df62:	687b      	ldr	r3, [r7, #4]
 810df64:	681b      	ldr	r3, [r3, #0]
 810df66:	69db      	ldr	r3, [r3, #28]
 810df68:	f003 0303 	and.w	r3, r3, #3
 810df6c:	2b00      	cmp	r3, #0
 810df6e:	d003      	beq.n	810df78 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 810df70:	6878      	ldr	r0, [r7, #4]
 810df72:	f000 fab5 	bl	810e4e0 <HAL_TIM_IC_CaptureCallback>
 810df76:	e005      	b.n	810df84 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 810df78:	6878      	ldr	r0, [r7, #4]
 810df7a:	f000 faa7 	bl	810e4cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 810df7e:	6878      	ldr	r0, [r7, #4]
 810df80:	f000 fab8 	bl	810e4f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 810df84:	687b      	ldr	r3, [r7, #4]
 810df86:	2200      	movs	r2, #0
 810df88:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 810df8a:	687b      	ldr	r3, [r7, #4]
 810df8c:	681b      	ldr	r3, [r3, #0]
 810df8e:	691b      	ldr	r3, [r3, #16]
 810df90:	f003 0310 	and.w	r3, r3, #16
 810df94:	2b10      	cmp	r3, #16
 810df96:	d122      	bne.n	810dfde <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 810df98:	687b      	ldr	r3, [r7, #4]
 810df9a:	681b      	ldr	r3, [r3, #0]
 810df9c:	68db      	ldr	r3, [r3, #12]
 810df9e:	f003 0310 	and.w	r3, r3, #16
 810dfa2:	2b10      	cmp	r3, #16
 810dfa4:	d11b      	bne.n	810dfde <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 810dfa6:	687b      	ldr	r3, [r7, #4]
 810dfa8:	681b      	ldr	r3, [r3, #0]
 810dfaa:	f06f 0210 	mvn.w	r2, #16
 810dfae:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 810dfb0:	687b      	ldr	r3, [r7, #4]
 810dfb2:	2208      	movs	r2, #8
 810dfb4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 810dfb6:	687b      	ldr	r3, [r7, #4]
 810dfb8:	681b      	ldr	r3, [r3, #0]
 810dfba:	69db      	ldr	r3, [r3, #28]
 810dfbc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 810dfc0:	2b00      	cmp	r3, #0
 810dfc2:	d003      	beq.n	810dfcc <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 810dfc4:	6878      	ldr	r0, [r7, #4]
 810dfc6:	f000 fa8b 	bl	810e4e0 <HAL_TIM_IC_CaptureCallback>
 810dfca:	e005      	b.n	810dfd8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 810dfcc:	6878      	ldr	r0, [r7, #4]
 810dfce:	f000 fa7d 	bl	810e4cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 810dfd2:	6878      	ldr	r0, [r7, #4]
 810dfd4:	f000 fa8e 	bl	810e4f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 810dfd8:	687b      	ldr	r3, [r7, #4]
 810dfda:	2200      	movs	r2, #0
 810dfdc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 810dfde:	687b      	ldr	r3, [r7, #4]
 810dfe0:	681b      	ldr	r3, [r3, #0]
 810dfe2:	691b      	ldr	r3, [r3, #16]
 810dfe4:	f003 0301 	and.w	r3, r3, #1
 810dfe8:	2b01      	cmp	r3, #1
 810dfea:	d10e      	bne.n	810e00a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 810dfec:	687b      	ldr	r3, [r7, #4]
 810dfee:	681b      	ldr	r3, [r3, #0]
 810dff0:	68db      	ldr	r3, [r3, #12]
 810dff2:	f003 0301 	and.w	r3, r3, #1
 810dff6:	2b01      	cmp	r3, #1
 810dff8:	d107      	bne.n	810e00a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 810dffa:	687b      	ldr	r3, [r7, #4]
 810dffc:	681b      	ldr	r3, [r3, #0]
 810dffe:	f06f 0201 	mvn.w	r2, #1
 810e002:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 810e004:	6878      	ldr	r0, [r7, #4]
 810e006:	f7f3 fd9f 	bl	8101b48 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 810e00a:	687b      	ldr	r3, [r7, #4]
 810e00c:	681b      	ldr	r3, [r3, #0]
 810e00e:	691b      	ldr	r3, [r3, #16]
 810e010:	f003 0380 	and.w	r3, r3, #128	; 0x80
 810e014:	2b80      	cmp	r3, #128	; 0x80
 810e016:	d10e      	bne.n	810e036 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 810e018:	687b      	ldr	r3, [r7, #4]
 810e01a:	681b      	ldr	r3, [r3, #0]
 810e01c:	68db      	ldr	r3, [r3, #12]
 810e01e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 810e022:	2b80      	cmp	r3, #128	; 0x80
 810e024:	d107      	bne.n	810e036 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 810e026:	687b      	ldr	r3, [r7, #4]
 810e028:	681b      	ldr	r3, [r3, #0]
 810e02a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 810e02e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 810e030:	6878      	ldr	r0, [r7, #4]
 810e032:	f000 ff87 	bl	810ef44 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 810e036:	687b      	ldr	r3, [r7, #4]
 810e038:	681b      	ldr	r3, [r3, #0]
 810e03a:	691b      	ldr	r3, [r3, #16]
 810e03c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 810e040:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810e044:	d10e      	bne.n	810e064 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 810e046:	687b      	ldr	r3, [r7, #4]
 810e048:	681b      	ldr	r3, [r3, #0]
 810e04a:	68db      	ldr	r3, [r3, #12]
 810e04c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 810e050:	2b80      	cmp	r3, #128	; 0x80
 810e052:	d107      	bne.n	810e064 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 810e054:	687b      	ldr	r3, [r7, #4]
 810e056:	681b      	ldr	r3, [r3, #0]
 810e058:	f46f 7280 	mvn.w	r2, #256	; 0x100
 810e05c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 810e05e:	6878      	ldr	r0, [r7, #4]
 810e060:	f000 ff7a 	bl	810ef58 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 810e064:	687b      	ldr	r3, [r7, #4]
 810e066:	681b      	ldr	r3, [r3, #0]
 810e068:	691b      	ldr	r3, [r3, #16]
 810e06a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 810e06e:	2b40      	cmp	r3, #64	; 0x40
 810e070:	d10e      	bne.n	810e090 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 810e072:	687b      	ldr	r3, [r7, #4]
 810e074:	681b      	ldr	r3, [r3, #0]
 810e076:	68db      	ldr	r3, [r3, #12]
 810e078:	f003 0340 	and.w	r3, r3, #64	; 0x40
 810e07c:	2b40      	cmp	r3, #64	; 0x40
 810e07e:	d107      	bne.n	810e090 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 810e080:	687b      	ldr	r3, [r7, #4]
 810e082:	681b      	ldr	r3, [r3, #0]
 810e084:	f06f 0240 	mvn.w	r2, #64	; 0x40
 810e088:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 810e08a:	6878      	ldr	r0, [r7, #4]
 810e08c:	f000 fa3c 	bl	810e508 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 810e090:	687b      	ldr	r3, [r7, #4]
 810e092:	681b      	ldr	r3, [r3, #0]
 810e094:	691b      	ldr	r3, [r3, #16]
 810e096:	f003 0320 	and.w	r3, r3, #32
 810e09a:	2b20      	cmp	r3, #32
 810e09c:	d10e      	bne.n	810e0bc <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 810e09e:	687b      	ldr	r3, [r7, #4]
 810e0a0:	681b      	ldr	r3, [r3, #0]
 810e0a2:	68db      	ldr	r3, [r3, #12]
 810e0a4:	f003 0320 	and.w	r3, r3, #32
 810e0a8:	2b20      	cmp	r3, #32
 810e0aa:	d107      	bne.n	810e0bc <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 810e0ac:	687b      	ldr	r3, [r7, #4]
 810e0ae:	681b      	ldr	r3, [r3, #0]
 810e0b0:	f06f 0220 	mvn.w	r2, #32
 810e0b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 810e0b6:	6878      	ldr	r0, [r7, #4]
 810e0b8:	f000 ff3a 	bl	810ef30 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 810e0bc:	bf00      	nop
 810e0be:	3708      	adds	r7, #8
 810e0c0:	46bd      	mov	sp, r7
 810e0c2:	bd80      	pop	{r7, pc}

0810e0c4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 810e0c4:	b580      	push	{r7, lr}
 810e0c6:	b084      	sub	sp, #16
 810e0c8:	af00      	add	r7, sp, #0
 810e0ca:	60f8      	str	r0, [r7, #12]
 810e0cc:	60b9      	str	r1, [r7, #8]
 810e0ce:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 810e0d0:	68fb      	ldr	r3, [r7, #12]
 810e0d2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 810e0d6:	2b01      	cmp	r3, #1
 810e0d8:	d101      	bne.n	810e0de <HAL_TIM_PWM_ConfigChannel+0x1a>
 810e0da:	2302      	movs	r3, #2
 810e0dc:	e0fd      	b.n	810e2da <HAL_TIM_PWM_ConfigChannel+0x216>
 810e0de:	68fb      	ldr	r3, [r7, #12]
 810e0e0:	2201      	movs	r2, #1
 810e0e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 810e0e6:	687b      	ldr	r3, [r7, #4]
 810e0e8:	2b14      	cmp	r3, #20
 810e0ea:	f200 80f0 	bhi.w	810e2ce <HAL_TIM_PWM_ConfigChannel+0x20a>
 810e0ee:	a201      	add	r2, pc, #4	; (adr r2, 810e0f4 <HAL_TIM_PWM_ConfigChannel+0x30>)
 810e0f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810e0f4:	0810e149 	.word	0x0810e149
 810e0f8:	0810e2cf 	.word	0x0810e2cf
 810e0fc:	0810e2cf 	.word	0x0810e2cf
 810e100:	0810e2cf 	.word	0x0810e2cf
 810e104:	0810e189 	.word	0x0810e189
 810e108:	0810e2cf 	.word	0x0810e2cf
 810e10c:	0810e2cf 	.word	0x0810e2cf
 810e110:	0810e2cf 	.word	0x0810e2cf
 810e114:	0810e1cb 	.word	0x0810e1cb
 810e118:	0810e2cf 	.word	0x0810e2cf
 810e11c:	0810e2cf 	.word	0x0810e2cf
 810e120:	0810e2cf 	.word	0x0810e2cf
 810e124:	0810e20b 	.word	0x0810e20b
 810e128:	0810e2cf 	.word	0x0810e2cf
 810e12c:	0810e2cf 	.word	0x0810e2cf
 810e130:	0810e2cf 	.word	0x0810e2cf
 810e134:	0810e24d 	.word	0x0810e24d
 810e138:	0810e2cf 	.word	0x0810e2cf
 810e13c:	0810e2cf 	.word	0x0810e2cf
 810e140:	0810e2cf 	.word	0x0810e2cf
 810e144:	0810e28d 	.word	0x0810e28d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 810e148:	68fb      	ldr	r3, [r7, #12]
 810e14a:	681b      	ldr	r3, [r3, #0]
 810e14c:	68b9      	ldr	r1, [r7, #8]
 810e14e:	4618      	mov	r0, r3
 810e150:	f000 fa7e 	bl	810e650 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 810e154:	68fb      	ldr	r3, [r7, #12]
 810e156:	681b      	ldr	r3, [r3, #0]
 810e158:	699a      	ldr	r2, [r3, #24]
 810e15a:	68fb      	ldr	r3, [r7, #12]
 810e15c:	681b      	ldr	r3, [r3, #0]
 810e15e:	f042 0208 	orr.w	r2, r2, #8
 810e162:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 810e164:	68fb      	ldr	r3, [r7, #12]
 810e166:	681b      	ldr	r3, [r3, #0]
 810e168:	699a      	ldr	r2, [r3, #24]
 810e16a:	68fb      	ldr	r3, [r7, #12]
 810e16c:	681b      	ldr	r3, [r3, #0]
 810e16e:	f022 0204 	bic.w	r2, r2, #4
 810e172:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 810e174:	68fb      	ldr	r3, [r7, #12]
 810e176:	681b      	ldr	r3, [r3, #0]
 810e178:	6999      	ldr	r1, [r3, #24]
 810e17a:	68bb      	ldr	r3, [r7, #8]
 810e17c:	691a      	ldr	r2, [r3, #16]
 810e17e:	68fb      	ldr	r3, [r7, #12]
 810e180:	681b      	ldr	r3, [r3, #0]
 810e182:	430a      	orrs	r2, r1
 810e184:	619a      	str	r2, [r3, #24]
      break;
 810e186:	e0a3      	b.n	810e2d0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 810e188:	68fb      	ldr	r3, [r7, #12]
 810e18a:	681b      	ldr	r3, [r3, #0]
 810e18c:	68b9      	ldr	r1, [r7, #8]
 810e18e:	4618      	mov	r0, r3
 810e190:	f000 faee 	bl	810e770 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 810e194:	68fb      	ldr	r3, [r7, #12]
 810e196:	681b      	ldr	r3, [r3, #0]
 810e198:	699a      	ldr	r2, [r3, #24]
 810e19a:	68fb      	ldr	r3, [r7, #12]
 810e19c:	681b      	ldr	r3, [r3, #0]
 810e19e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 810e1a2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 810e1a4:	68fb      	ldr	r3, [r7, #12]
 810e1a6:	681b      	ldr	r3, [r3, #0]
 810e1a8:	699a      	ldr	r2, [r3, #24]
 810e1aa:	68fb      	ldr	r3, [r7, #12]
 810e1ac:	681b      	ldr	r3, [r3, #0]
 810e1ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 810e1b2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 810e1b4:	68fb      	ldr	r3, [r7, #12]
 810e1b6:	681b      	ldr	r3, [r3, #0]
 810e1b8:	6999      	ldr	r1, [r3, #24]
 810e1ba:	68bb      	ldr	r3, [r7, #8]
 810e1bc:	691b      	ldr	r3, [r3, #16]
 810e1be:	021a      	lsls	r2, r3, #8
 810e1c0:	68fb      	ldr	r3, [r7, #12]
 810e1c2:	681b      	ldr	r3, [r3, #0]
 810e1c4:	430a      	orrs	r2, r1
 810e1c6:	619a      	str	r2, [r3, #24]
      break;
 810e1c8:	e082      	b.n	810e2d0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 810e1ca:	68fb      	ldr	r3, [r7, #12]
 810e1cc:	681b      	ldr	r3, [r3, #0]
 810e1ce:	68b9      	ldr	r1, [r7, #8]
 810e1d0:	4618      	mov	r0, r3
 810e1d2:	f000 fb57 	bl	810e884 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 810e1d6:	68fb      	ldr	r3, [r7, #12]
 810e1d8:	681b      	ldr	r3, [r3, #0]
 810e1da:	69da      	ldr	r2, [r3, #28]
 810e1dc:	68fb      	ldr	r3, [r7, #12]
 810e1de:	681b      	ldr	r3, [r3, #0]
 810e1e0:	f042 0208 	orr.w	r2, r2, #8
 810e1e4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 810e1e6:	68fb      	ldr	r3, [r7, #12]
 810e1e8:	681b      	ldr	r3, [r3, #0]
 810e1ea:	69da      	ldr	r2, [r3, #28]
 810e1ec:	68fb      	ldr	r3, [r7, #12]
 810e1ee:	681b      	ldr	r3, [r3, #0]
 810e1f0:	f022 0204 	bic.w	r2, r2, #4
 810e1f4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 810e1f6:	68fb      	ldr	r3, [r7, #12]
 810e1f8:	681b      	ldr	r3, [r3, #0]
 810e1fa:	69d9      	ldr	r1, [r3, #28]
 810e1fc:	68bb      	ldr	r3, [r7, #8]
 810e1fe:	691a      	ldr	r2, [r3, #16]
 810e200:	68fb      	ldr	r3, [r7, #12]
 810e202:	681b      	ldr	r3, [r3, #0]
 810e204:	430a      	orrs	r2, r1
 810e206:	61da      	str	r2, [r3, #28]
      break;
 810e208:	e062      	b.n	810e2d0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 810e20a:	68fb      	ldr	r3, [r7, #12]
 810e20c:	681b      	ldr	r3, [r3, #0]
 810e20e:	68b9      	ldr	r1, [r7, #8]
 810e210:	4618      	mov	r0, r3
 810e212:	f000 fbbd 	bl	810e990 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 810e216:	68fb      	ldr	r3, [r7, #12]
 810e218:	681b      	ldr	r3, [r3, #0]
 810e21a:	69da      	ldr	r2, [r3, #28]
 810e21c:	68fb      	ldr	r3, [r7, #12]
 810e21e:	681b      	ldr	r3, [r3, #0]
 810e220:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 810e224:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 810e226:	68fb      	ldr	r3, [r7, #12]
 810e228:	681b      	ldr	r3, [r3, #0]
 810e22a:	69da      	ldr	r2, [r3, #28]
 810e22c:	68fb      	ldr	r3, [r7, #12]
 810e22e:	681b      	ldr	r3, [r3, #0]
 810e230:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 810e234:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 810e236:	68fb      	ldr	r3, [r7, #12]
 810e238:	681b      	ldr	r3, [r3, #0]
 810e23a:	69d9      	ldr	r1, [r3, #28]
 810e23c:	68bb      	ldr	r3, [r7, #8]
 810e23e:	691b      	ldr	r3, [r3, #16]
 810e240:	021a      	lsls	r2, r3, #8
 810e242:	68fb      	ldr	r3, [r7, #12]
 810e244:	681b      	ldr	r3, [r3, #0]
 810e246:	430a      	orrs	r2, r1
 810e248:	61da      	str	r2, [r3, #28]
      break;
 810e24a:	e041      	b.n	810e2d0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 810e24c:	68fb      	ldr	r3, [r7, #12]
 810e24e:	681b      	ldr	r3, [r3, #0]
 810e250:	68b9      	ldr	r1, [r7, #8]
 810e252:	4618      	mov	r0, r3
 810e254:	f000 fc04 	bl	810ea60 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 810e258:	68fb      	ldr	r3, [r7, #12]
 810e25a:	681b      	ldr	r3, [r3, #0]
 810e25c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 810e25e:	68fb      	ldr	r3, [r7, #12]
 810e260:	681b      	ldr	r3, [r3, #0]
 810e262:	f042 0208 	orr.w	r2, r2, #8
 810e266:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 810e268:	68fb      	ldr	r3, [r7, #12]
 810e26a:	681b      	ldr	r3, [r3, #0]
 810e26c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 810e26e:	68fb      	ldr	r3, [r7, #12]
 810e270:	681b      	ldr	r3, [r3, #0]
 810e272:	f022 0204 	bic.w	r2, r2, #4
 810e276:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 810e278:	68fb      	ldr	r3, [r7, #12]
 810e27a:	681b      	ldr	r3, [r3, #0]
 810e27c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 810e27e:	68bb      	ldr	r3, [r7, #8]
 810e280:	691a      	ldr	r2, [r3, #16]
 810e282:	68fb      	ldr	r3, [r7, #12]
 810e284:	681b      	ldr	r3, [r3, #0]
 810e286:	430a      	orrs	r2, r1
 810e288:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 810e28a:	e021      	b.n	810e2d0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 810e28c:	68fb      	ldr	r3, [r7, #12]
 810e28e:	681b      	ldr	r3, [r3, #0]
 810e290:	68b9      	ldr	r1, [r7, #8]
 810e292:	4618      	mov	r0, r3
 810e294:	f000 fc46 	bl	810eb24 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 810e298:	68fb      	ldr	r3, [r7, #12]
 810e29a:	681b      	ldr	r3, [r3, #0]
 810e29c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 810e29e:	68fb      	ldr	r3, [r7, #12]
 810e2a0:	681b      	ldr	r3, [r3, #0]
 810e2a2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 810e2a6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 810e2a8:	68fb      	ldr	r3, [r7, #12]
 810e2aa:	681b      	ldr	r3, [r3, #0]
 810e2ac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 810e2ae:	68fb      	ldr	r3, [r7, #12]
 810e2b0:	681b      	ldr	r3, [r3, #0]
 810e2b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 810e2b6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 810e2b8:	68fb      	ldr	r3, [r7, #12]
 810e2ba:	681b      	ldr	r3, [r3, #0]
 810e2bc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 810e2be:	68bb      	ldr	r3, [r7, #8]
 810e2c0:	691b      	ldr	r3, [r3, #16]
 810e2c2:	021a      	lsls	r2, r3, #8
 810e2c4:	68fb      	ldr	r3, [r7, #12]
 810e2c6:	681b      	ldr	r3, [r3, #0]
 810e2c8:	430a      	orrs	r2, r1
 810e2ca:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 810e2cc:	e000      	b.n	810e2d0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 810e2ce:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 810e2d0:	68fb      	ldr	r3, [r7, #12]
 810e2d2:	2200      	movs	r2, #0
 810e2d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 810e2d8:	2300      	movs	r3, #0
}
 810e2da:	4618      	mov	r0, r3
 810e2dc:	3710      	adds	r7, #16
 810e2de:	46bd      	mov	sp, r7
 810e2e0:	bd80      	pop	{r7, pc}
 810e2e2:	bf00      	nop

0810e2e4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 810e2e4:	b580      	push	{r7, lr}
 810e2e6:	b084      	sub	sp, #16
 810e2e8:	af00      	add	r7, sp, #0
 810e2ea:	6078      	str	r0, [r7, #4]
 810e2ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 810e2ee:	687b      	ldr	r3, [r7, #4]
 810e2f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 810e2f4:	2b01      	cmp	r3, #1
 810e2f6:	d101      	bne.n	810e2fc <HAL_TIM_ConfigClockSource+0x18>
 810e2f8:	2302      	movs	r3, #2
 810e2fa:	e0dd      	b.n	810e4b8 <HAL_TIM_ConfigClockSource+0x1d4>
 810e2fc:	687b      	ldr	r3, [r7, #4]
 810e2fe:	2201      	movs	r2, #1
 810e300:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 810e304:	687b      	ldr	r3, [r7, #4]
 810e306:	2202      	movs	r2, #2
 810e308:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 810e30c:	687b      	ldr	r3, [r7, #4]
 810e30e:	681b      	ldr	r3, [r3, #0]
 810e310:	689b      	ldr	r3, [r3, #8]
 810e312:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 810e314:	68fb      	ldr	r3, [r7, #12]
 810e316:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 810e31a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 810e31e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 810e320:	68fb      	ldr	r3, [r7, #12]
 810e322:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 810e326:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 810e328:	687b      	ldr	r3, [r7, #4]
 810e32a:	681b      	ldr	r3, [r3, #0]
 810e32c:	68fa      	ldr	r2, [r7, #12]
 810e32e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 810e330:	683b      	ldr	r3, [r7, #0]
 810e332:	681b      	ldr	r3, [r3, #0]
 810e334:	4a62      	ldr	r2, [pc, #392]	; (810e4c0 <HAL_TIM_ConfigClockSource+0x1dc>)
 810e336:	4293      	cmp	r3, r2
 810e338:	f000 80a9 	beq.w	810e48e <HAL_TIM_ConfigClockSource+0x1aa>
 810e33c:	4a60      	ldr	r2, [pc, #384]	; (810e4c0 <HAL_TIM_ConfigClockSource+0x1dc>)
 810e33e:	4293      	cmp	r3, r2
 810e340:	f200 80ae 	bhi.w	810e4a0 <HAL_TIM_ConfigClockSource+0x1bc>
 810e344:	4a5f      	ldr	r2, [pc, #380]	; (810e4c4 <HAL_TIM_ConfigClockSource+0x1e0>)
 810e346:	4293      	cmp	r3, r2
 810e348:	f000 80a1 	beq.w	810e48e <HAL_TIM_ConfigClockSource+0x1aa>
 810e34c:	4a5d      	ldr	r2, [pc, #372]	; (810e4c4 <HAL_TIM_ConfigClockSource+0x1e0>)
 810e34e:	4293      	cmp	r3, r2
 810e350:	f200 80a6 	bhi.w	810e4a0 <HAL_TIM_ConfigClockSource+0x1bc>
 810e354:	4a5c      	ldr	r2, [pc, #368]	; (810e4c8 <HAL_TIM_ConfigClockSource+0x1e4>)
 810e356:	4293      	cmp	r3, r2
 810e358:	f000 8099 	beq.w	810e48e <HAL_TIM_ConfigClockSource+0x1aa>
 810e35c:	4a5a      	ldr	r2, [pc, #360]	; (810e4c8 <HAL_TIM_ConfigClockSource+0x1e4>)
 810e35e:	4293      	cmp	r3, r2
 810e360:	f200 809e 	bhi.w	810e4a0 <HAL_TIM_ConfigClockSource+0x1bc>
 810e364:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 810e368:	f000 8091 	beq.w	810e48e <HAL_TIM_ConfigClockSource+0x1aa>
 810e36c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 810e370:	f200 8096 	bhi.w	810e4a0 <HAL_TIM_ConfigClockSource+0x1bc>
 810e374:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 810e378:	f000 8089 	beq.w	810e48e <HAL_TIM_ConfigClockSource+0x1aa>
 810e37c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 810e380:	f200 808e 	bhi.w	810e4a0 <HAL_TIM_ConfigClockSource+0x1bc>
 810e384:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 810e388:	d03e      	beq.n	810e408 <HAL_TIM_ConfigClockSource+0x124>
 810e38a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 810e38e:	f200 8087 	bhi.w	810e4a0 <HAL_TIM_ConfigClockSource+0x1bc>
 810e392:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 810e396:	f000 8085 	beq.w	810e4a4 <HAL_TIM_ConfigClockSource+0x1c0>
 810e39a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 810e39e:	d87f      	bhi.n	810e4a0 <HAL_TIM_ConfigClockSource+0x1bc>
 810e3a0:	2b70      	cmp	r3, #112	; 0x70
 810e3a2:	d01a      	beq.n	810e3da <HAL_TIM_ConfigClockSource+0xf6>
 810e3a4:	2b70      	cmp	r3, #112	; 0x70
 810e3a6:	d87b      	bhi.n	810e4a0 <HAL_TIM_ConfigClockSource+0x1bc>
 810e3a8:	2b60      	cmp	r3, #96	; 0x60
 810e3aa:	d050      	beq.n	810e44e <HAL_TIM_ConfigClockSource+0x16a>
 810e3ac:	2b60      	cmp	r3, #96	; 0x60
 810e3ae:	d877      	bhi.n	810e4a0 <HAL_TIM_ConfigClockSource+0x1bc>
 810e3b0:	2b50      	cmp	r3, #80	; 0x50
 810e3b2:	d03c      	beq.n	810e42e <HAL_TIM_ConfigClockSource+0x14a>
 810e3b4:	2b50      	cmp	r3, #80	; 0x50
 810e3b6:	d873      	bhi.n	810e4a0 <HAL_TIM_ConfigClockSource+0x1bc>
 810e3b8:	2b40      	cmp	r3, #64	; 0x40
 810e3ba:	d058      	beq.n	810e46e <HAL_TIM_ConfigClockSource+0x18a>
 810e3bc:	2b40      	cmp	r3, #64	; 0x40
 810e3be:	d86f      	bhi.n	810e4a0 <HAL_TIM_ConfigClockSource+0x1bc>
 810e3c0:	2b30      	cmp	r3, #48	; 0x30
 810e3c2:	d064      	beq.n	810e48e <HAL_TIM_ConfigClockSource+0x1aa>
 810e3c4:	2b30      	cmp	r3, #48	; 0x30
 810e3c6:	d86b      	bhi.n	810e4a0 <HAL_TIM_ConfigClockSource+0x1bc>
 810e3c8:	2b20      	cmp	r3, #32
 810e3ca:	d060      	beq.n	810e48e <HAL_TIM_ConfigClockSource+0x1aa>
 810e3cc:	2b20      	cmp	r3, #32
 810e3ce:	d867      	bhi.n	810e4a0 <HAL_TIM_ConfigClockSource+0x1bc>
 810e3d0:	2b00      	cmp	r3, #0
 810e3d2:	d05c      	beq.n	810e48e <HAL_TIM_ConfigClockSource+0x1aa>
 810e3d4:	2b10      	cmp	r3, #16
 810e3d6:	d05a      	beq.n	810e48e <HAL_TIM_ConfigClockSource+0x1aa>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 810e3d8:	e062      	b.n	810e4a0 <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_ETR_SetConfig(htim->Instance,
 810e3da:	687b      	ldr	r3, [r7, #4]
 810e3dc:	6818      	ldr	r0, [r3, #0]
 810e3de:	683b      	ldr	r3, [r7, #0]
 810e3e0:	6899      	ldr	r1, [r3, #8]
 810e3e2:	683b      	ldr	r3, [r7, #0]
 810e3e4:	685a      	ldr	r2, [r3, #4]
 810e3e6:	683b      	ldr	r3, [r7, #0]
 810e3e8:	68db      	ldr	r3, [r3, #12]
 810e3ea:	f000 fc7b 	bl	810ece4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 810e3ee:	687b      	ldr	r3, [r7, #4]
 810e3f0:	681b      	ldr	r3, [r3, #0]
 810e3f2:	689b      	ldr	r3, [r3, #8]
 810e3f4:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 810e3f6:	68fb      	ldr	r3, [r7, #12]
 810e3f8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 810e3fc:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 810e3fe:	687b      	ldr	r3, [r7, #4]
 810e400:	681b      	ldr	r3, [r3, #0]
 810e402:	68fa      	ldr	r2, [r7, #12]
 810e404:	609a      	str	r2, [r3, #8]
      break;
 810e406:	e04e      	b.n	810e4a6 <HAL_TIM_ConfigClockSource+0x1c2>
      TIM_ETR_SetConfig(htim->Instance,
 810e408:	687b      	ldr	r3, [r7, #4]
 810e40a:	6818      	ldr	r0, [r3, #0]
 810e40c:	683b      	ldr	r3, [r7, #0]
 810e40e:	6899      	ldr	r1, [r3, #8]
 810e410:	683b      	ldr	r3, [r7, #0]
 810e412:	685a      	ldr	r2, [r3, #4]
 810e414:	683b      	ldr	r3, [r7, #0]
 810e416:	68db      	ldr	r3, [r3, #12]
 810e418:	f000 fc64 	bl	810ece4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 810e41c:	687b      	ldr	r3, [r7, #4]
 810e41e:	681b      	ldr	r3, [r3, #0]
 810e420:	689a      	ldr	r2, [r3, #8]
 810e422:	687b      	ldr	r3, [r7, #4]
 810e424:	681b      	ldr	r3, [r3, #0]
 810e426:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 810e42a:	609a      	str	r2, [r3, #8]
      break;
 810e42c:	e03b      	b.n	810e4a6 <HAL_TIM_ConfigClockSource+0x1c2>
      TIM_TI1_ConfigInputStage(htim->Instance,
 810e42e:	687b      	ldr	r3, [r7, #4]
 810e430:	6818      	ldr	r0, [r3, #0]
 810e432:	683b      	ldr	r3, [r7, #0]
 810e434:	6859      	ldr	r1, [r3, #4]
 810e436:	683b      	ldr	r3, [r7, #0]
 810e438:	68db      	ldr	r3, [r3, #12]
 810e43a:	461a      	mov	r2, r3
 810e43c:	f000 fbd6 	bl	810ebec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 810e440:	687b      	ldr	r3, [r7, #4]
 810e442:	681b      	ldr	r3, [r3, #0]
 810e444:	2150      	movs	r1, #80	; 0x50
 810e446:	4618      	mov	r0, r3
 810e448:	f000 fc2f 	bl	810ecaa <TIM_ITRx_SetConfig>
      break;
 810e44c:	e02b      	b.n	810e4a6 <HAL_TIM_ConfigClockSource+0x1c2>
      TIM_TI2_ConfigInputStage(htim->Instance,
 810e44e:	687b      	ldr	r3, [r7, #4]
 810e450:	6818      	ldr	r0, [r3, #0]
 810e452:	683b      	ldr	r3, [r7, #0]
 810e454:	6859      	ldr	r1, [r3, #4]
 810e456:	683b      	ldr	r3, [r7, #0]
 810e458:	68db      	ldr	r3, [r3, #12]
 810e45a:	461a      	mov	r2, r3
 810e45c:	f000 fbf5 	bl	810ec4a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 810e460:	687b      	ldr	r3, [r7, #4]
 810e462:	681b      	ldr	r3, [r3, #0]
 810e464:	2160      	movs	r1, #96	; 0x60
 810e466:	4618      	mov	r0, r3
 810e468:	f000 fc1f 	bl	810ecaa <TIM_ITRx_SetConfig>
      break;
 810e46c:	e01b      	b.n	810e4a6 <HAL_TIM_ConfigClockSource+0x1c2>
      TIM_TI1_ConfigInputStage(htim->Instance,
 810e46e:	687b      	ldr	r3, [r7, #4]
 810e470:	6818      	ldr	r0, [r3, #0]
 810e472:	683b      	ldr	r3, [r7, #0]
 810e474:	6859      	ldr	r1, [r3, #4]
 810e476:	683b      	ldr	r3, [r7, #0]
 810e478:	68db      	ldr	r3, [r3, #12]
 810e47a:	461a      	mov	r2, r3
 810e47c:	f000 fbb6 	bl	810ebec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 810e480:	687b      	ldr	r3, [r7, #4]
 810e482:	681b      	ldr	r3, [r3, #0]
 810e484:	2140      	movs	r1, #64	; 0x40
 810e486:	4618      	mov	r0, r3
 810e488:	f000 fc0f 	bl	810ecaa <TIM_ITRx_SetConfig>
      break;
 810e48c:	e00b      	b.n	810e4a6 <HAL_TIM_ConfigClockSource+0x1c2>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 810e48e:	687b      	ldr	r3, [r7, #4]
 810e490:	681a      	ldr	r2, [r3, #0]
 810e492:	683b      	ldr	r3, [r7, #0]
 810e494:	681b      	ldr	r3, [r3, #0]
 810e496:	4619      	mov	r1, r3
 810e498:	4610      	mov	r0, r2
 810e49a:	f000 fc06 	bl	810ecaa <TIM_ITRx_SetConfig>
        break;
 810e49e:	e002      	b.n	810e4a6 <HAL_TIM_ConfigClockSource+0x1c2>
      break;
 810e4a0:	bf00      	nop
 810e4a2:	e000      	b.n	810e4a6 <HAL_TIM_ConfigClockSource+0x1c2>
      break;
 810e4a4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 810e4a6:	687b      	ldr	r3, [r7, #4]
 810e4a8:	2201      	movs	r2, #1
 810e4aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 810e4ae:	687b      	ldr	r3, [r7, #4]
 810e4b0:	2200      	movs	r2, #0
 810e4b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 810e4b6:	2300      	movs	r3, #0
}
 810e4b8:	4618      	mov	r0, r3
 810e4ba:	3710      	adds	r7, #16
 810e4bc:	46bd      	mov	sp, r7
 810e4be:	bd80      	pop	{r7, pc}
 810e4c0:	00100040 	.word	0x00100040
 810e4c4:	00100030 	.word	0x00100030
 810e4c8:	00100020 	.word	0x00100020

0810e4cc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 810e4cc:	b480      	push	{r7}
 810e4ce:	b083      	sub	sp, #12
 810e4d0:	af00      	add	r7, sp, #0
 810e4d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 810e4d4:	bf00      	nop
 810e4d6:	370c      	adds	r7, #12
 810e4d8:	46bd      	mov	sp, r7
 810e4da:	f85d 7b04 	ldr.w	r7, [sp], #4
 810e4de:	4770      	bx	lr

0810e4e0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 810e4e0:	b480      	push	{r7}
 810e4e2:	b083      	sub	sp, #12
 810e4e4:	af00      	add	r7, sp, #0
 810e4e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 810e4e8:	bf00      	nop
 810e4ea:	370c      	adds	r7, #12
 810e4ec:	46bd      	mov	sp, r7
 810e4ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 810e4f2:	4770      	bx	lr

0810e4f4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 810e4f4:	b480      	push	{r7}
 810e4f6:	b083      	sub	sp, #12
 810e4f8:	af00      	add	r7, sp, #0
 810e4fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 810e4fc:	bf00      	nop
 810e4fe:	370c      	adds	r7, #12
 810e500:	46bd      	mov	sp, r7
 810e502:	f85d 7b04 	ldr.w	r7, [sp], #4
 810e506:	4770      	bx	lr

0810e508 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 810e508:	b480      	push	{r7}
 810e50a:	b083      	sub	sp, #12
 810e50c:	af00      	add	r7, sp, #0
 810e50e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 810e510:	bf00      	nop
 810e512:	370c      	adds	r7, #12
 810e514:	46bd      	mov	sp, r7
 810e516:	f85d 7b04 	ldr.w	r7, [sp], #4
 810e51a:	4770      	bx	lr

0810e51c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 810e51c:	b480      	push	{r7}
 810e51e:	b085      	sub	sp, #20
 810e520:	af00      	add	r7, sp, #0
 810e522:	6078      	str	r0, [r7, #4]
 810e524:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 810e526:	687b      	ldr	r3, [r7, #4]
 810e528:	681b      	ldr	r3, [r3, #0]
 810e52a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 810e52c:	687b      	ldr	r3, [r7, #4]
 810e52e:	4a40      	ldr	r2, [pc, #256]	; (810e630 <TIM_Base_SetConfig+0x114>)
 810e530:	4293      	cmp	r3, r2
 810e532:	d013      	beq.n	810e55c <TIM_Base_SetConfig+0x40>
 810e534:	687b      	ldr	r3, [r7, #4]
 810e536:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 810e53a:	d00f      	beq.n	810e55c <TIM_Base_SetConfig+0x40>
 810e53c:	687b      	ldr	r3, [r7, #4]
 810e53e:	4a3d      	ldr	r2, [pc, #244]	; (810e634 <TIM_Base_SetConfig+0x118>)
 810e540:	4293      	cmp	r3, r2
 810e542:	d00b      	beq.n	810e55c <TIM_Base_SetConfig+0x40>
 810e544:	687b      	ldr	r3, [r7, #4]
 810e546:	4a3c      	ldr	r2, [pc, #240]	; (810e638 <TIM_Base_SetConfig+0x11c>)
 810e548:	4293      	cmp	r3, r2
 810e54a:	d007      	beq.n	810e55c <TIM_Base_SetConfig+0x40>
 810e54c:	687b      	ldr	r3, [r7, #4]
 810e54e:	4a3b      	ldr	r2, [pc, #236]	; (810e63c <TIM_Base_SetConfig+0x120>)
 810e550:	4293      	cmp	r3, r2
 810e552:	d003      	beq.n	810e55c <TIM_Base_SetConfig+0x40>
 810e554:	687b      	ldr	r3, [r7, #4]
 810e556:	4a3a      	ldr	r2, [pc, #232]	; (810e640 <TIM_Base_SetConfig+0x124>)
 810e558:	4293      	cmp	r3, r2
 810e55a:	d108      	bne.n	810e56e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 810e55c:	68fb      	ldr	r3, [r7, #12]
 810e55e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 810e562:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 810e564:	683b      	ldr	r3, [r7, #0]
 810e566:	685b      	ldr	r3, [r3, #4]
 810e568:	68fa      	ldr	r2, [r7, #12]
 810e56a:	4313      	orrs	r3, r2
 810e56c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 810e56e:	687b      	ldr	r3, [r7, #4]
 810e570:	4a2f      	ldr	r2, [pc, #188]	; (810e630 <TIM_Base_SetConfig+0x114>)
 810e572:	4293      	cmp	r3, r2
 810e574:	d01f      	beq.n	810e5b6 <TIM_Base_SetConfig+0x9a>
 810e576:	687b      	ldr	r3, [r7, #4]
 810e578:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 810e57c:	d01b      	beq.n	810e5b6 <TIM_Base_SetConfig+0x9a>
 810e57e:	687b      	ldr	r3, [r7, #4]
 810e580:	4a2c      	ldr	r2, [pc, #176]	; (810e634 <TIM_Base_SetConfig+0x118>)
 810e582:	4293      	cmp	r3, r2
 810e584:	d017      	beq.n	810e5b6 <TIM_Base_SetConfig+0x9a>
 810e586:	687b      	ldr	r3, [r7, #4]
 810e588:	4a2b      	ldr	r2, [pc, #172]	; (810e638 <TIM_Base_SetConfig+0x11c>)
 810e58a:	4293      	cmp	r3, r2
 810e58c:	d013      	beq.n	810e5b6 <TIM_Base_SetConfig+0x9a>
 810e58e:	687b      	ldr	r3, [r7, #4]
 810e590:	4a2a      	ldr	r2, [pc, #168]	; (810e63c <TIM_Base_SetConfig+0x120>)
 810e592:	4293      	cmp	r3, r2
 810e594:	d00f      	beq.n	810e5b6 <TIM_Base_SetConfig+0x9a>
 810e596:	687b      	ldr	r3, [r7, #4]
 810e598:	4a29      	ldr	r2, [pc, #164]	; (810e640 <TIM_Base_SetConfig+0x124>)
 810e59a:	4293      	cmp	r3, r2
 810e59c:	d00b      	beq.n	810e5b6 <TIM_Base_SetConfig+0x9a>
 810e59e:	687b      	ldr	r3, [r7, #4]
 810e5a0:	4a28      	ldr	r2, [pc, #160]	; (810e644 <TIM_Base_SetConfig+0x128>)
 810e5a2:	4293      	cmp	r3, r2
 810e5a4:	d007      	beq.n	810e5b6 <TIM_Base_SetConfig+0x9a>
 810e5a6:	687b      	ldr	r3, [r7, #4]
 810e5a8:	4a27      	ldr	r2, [pc, #156]	; (810e648 <TIM_Base_SetConfig+0x12c>)
 810e5aa:	4293      	cmp	r3, r2
 810e5ac:	d003      	beq.n	810e5b6 <TIM_Base_SetConfig+0x9a>
 810e5ae:	687b      	ldr	r3, [r7, #4]
 810e5b0:	4a26      	ldr	r2, [pc, #152]	; (810e64c <TIM_Base_SetConfig+0x130>)
 810e5b2:	4293      	cmp	r3, r2
 810e5b4:	d108      	bne.n	810e5c8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 810e5b6:	68fb      	ldr	r3, [r7, #12]
 810e5b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 810e5bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 810e5be:	683b      	ldr	r3, [r7, #0]
 810e5c0:	68db      	ldr	r3, [r3, #12]
 810e5c2:	68fa      	ldr	r2, [r7, #12]
 810e5c4:	4313      	orrs	r3, r2
 810e5c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 810e5c8:	68fb      	ldr	r3, [r7, #12]
 810e5ca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 810e5ce:	683b      	ldr	r3, [r7, #0]
 810e5d0:	695b      	ldr	r3, [r3, #20]
 810e5d2:	4313      	orrs	r3, r2
 810e5d4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 810e5d6:	687b      	ldr	r3, [r7, #4]
 810e5d8:	68fa      	ldr	r2, [r7, #12]
 810e5da:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 810e5dc:	683b      	ldr	r3, [r7, #0]
 810e5de:	689a      	ldr	r2, [r3, #8]
 810e5e0:	687b      	ldr	r3, [r7, #4]
 810e5e2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 810e5e4:	683b      	ldr	r3, [r7, #0]
 810e5e6:	681a      	ldr	r2, [r3, #0]
 810e5e8:	687b      	ldr	r3, [r7, #4]
 810e5ea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 810e5ec:	687b      	ldr	r3, [r7, #4]
 810e5ee:	4a10      	ldr	r2, [pc, #64]	; (810e630 <TIM_Base_SetConfig+0x114>)
 810e5f0:	4293      	cmp	r3, r2
 810e5f2:	d00f      	beq.n	810e614 <TIM_Base_SetConfig+0xf8>
 810e5f4:	687b      	ldr	r3, [r7, #4]
 810e5f6:	4a12      	ldr	r2, [pc, #72]	; (810e640 <TIM_Base_SetConfig+0x124>)
 810e5f8:	4293      	cmp	r3, r2
 810e5fa:	d00b      	beq.n	810e614 <TIM_Base_SetConfig+0xf8>
 810e5fc:	687b      	ldr	r3, [r7, #4]
 810e5fe:	4a11      	ldr	r2, [pc, #68]	; (810e644 <TIM_Base_SetConfig+0x128>)
 810e600:	4293      	cmp	r3, r2
 810e602:	d007      	beq.n	810e614 <TIM_Base_SetConfig+0xf8>
 810e604:	687b      	ldr	r3, [r7, #4]
 810e606:	4a10      	ldr	r2, [pc, #64]	; (810e648 <TIM_Base_SetConfig+0x12c>)
 810e608:	4293      	cmp	r3, r2
 810e60a:	d003      	beq.n	810e614 <TIM_Base_SetConfig+0xf8>
 810e60c:	687b      	ldr	r3, [r7, #4]
 810e60e:	4a0f      	ldr	r2, [pc, #60]	; (810e64c <TIM_Base_SetConfig+0x130>)
 810e610:	4293      	cmp	r3, r2
 810e612:	d103      	bne.n	810e61c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 810e614:	683b      	ldr	r3, [r7, #0]
 810e616:	691a      	ldr	r2, [r3, #16]
 810e618:	687b      	ldr	r3, [r7, #4]
 810e61a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 810e61c:	687b      	ldr	r3, [r7, #4]
 810e61e:	2201      	movs	r2, #1
 810e620:	615a      	str	r2, [r3, #20]
}
 810e622:	bf00      	nop
 810e624:	3714      	adds	r7, #20
 810e626:	46bd      	mov	sp, r7
 810e628:	f85d 7b04 	ldr.w	r7, [sp], #4
 810e62c:	4770      	bx	lr
 810e62e:	bf00      	nop
 810e630:	40010000 	.word	0x40010000
 810e634:	40000400 	.word	0x40000400
 810e638:	40000800 	.word	0x40000800
 810e63c:	40000c00 	.word	0x40000c00
 810e640:	40010400 	.word	0x40010400
 810e644:	40014000 	.word	0x40014000
 810e648:	40014400 	.word	0x40014400
 810e64c:	40014800 	.word	0x40014800

0810e650 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 810e650:	b480      	push	{r7}
 810e652:	b087      	sub	sp, #28
 810e654:	af00      	add	r7, sp, #0
 810e656:	6078      	str	r0, [r7, #4]
 810e658:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 810e65a:	687b      	ldr	r3, [r7, #4]
 810e65c:	6a1b      	ldr	r3, [r3, #32]
 810e65e:	f023 0201 	bic.w	r2, r3, #1
 810e662:	687b      	ldr	r3, [r7, #4]
 810e664:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 810e666:	687b      	ldr	r3, [r7, #4]
 810e668:	6a1b      	ldr	r3, [r3, #32]
 810e66a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 810e66c:	687b      	ldr	r3, [r7, #4]
 810e66e:	685b      	ldr	r3, [r3, #4]
 810e670:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 810e672:	687b      	ldr	r3, [r7, #4]
 810e674:	699b      	ldr	r3, [r3, #24]
 810e676:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 810e678:	68fb      	ldr	r3, [r7, #12]
 810e67a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 810e67e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 810e682:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 810e684:	68fb      	ldr	r3, [r7, #12]
 810e686:	f023 0303 	bic.w	r3, r3, #3
 810e68a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 810e68c:	683b      	ldr	r3, [r7, #0]
 810e68e:	681b      	ldr	r3, [r3, #0]
 810e690:	68fa      	ldr	r2, [r7, #12]
 810e692:	4313      	orrs	r3, r2
 810e694:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 810e696:	697b      	ldr	r3, [r7, #20]
 810e698:	f023 0302 	bic.w	r3, r3, #2
 810e69c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 810e69e:	683b      	ldr	r3, [r7, #0]
 810e6a0:	689b      	ldr	r3, [r3, #8]
 810e6a2:	697a      	ldr	r2, [r7, #20]
 810e6a4:	4313      	orrs	r3, r2
 810e6a6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 810e6a8:	687b      	ldr	r3, [r7, #4]
 810e6aa:	4a2c      	ldr	r2, [pc, #176]	; (810e75c <TIM_OC1_SetConfig+0x10c>)
 810e6ac:	4293      	cmp	r3, r2
 810e6ae:	d00f      	beq.n	810e6d0 <TIM_OC1_SetConfig+0x80>
 810e6b0:	687b      	ldr	r3, [r7, #4]
 810e6b2:	4a2b      	ldr	r2, [pc, #172]	; (810e760 <TIM_OC1_SetConfig+0x110>)
 810e6b4:	4293      	cmp	r3, r2
 810e6b6:	d00b      	beq.n	810e6d0 <TIM_OC1_SetConfig+0x80>
 810e6b8:	687b      	ldr	r3, [r7, #4]
 810e6ba:	4a2a      	ldr	r2, [pc, #168]	; (810e764 <TIM_OC1_SetConfig+0x114>)
 810e6bc:	4293      	cmp	r3, r2
 810e6be:	d007      	beq.n	810e6d0 <TIM_OC1_SetConfig+0x80>
 810e6c0:	687b      	ldr	r3, [r7, #4]
 810e6c2:	4a29      	ldr	r2, [pc, #164]	; (810e768 <TIM_OC1_SetConfig+0x118>)
 810e6c4:	4293      	cmp	r3, r2
 810e6c6:	d003      	beq.n	810e6d0 <TIM_OC1_SetConfig+0x80>
 810e6c8:	687b      	ldr	r3, [r7, #4]
 810e6ca:	4a28      	ldr	r2, [pc, #160]	; (810e76c <TIM_OC1_SetConfig+0x11c>)
 810e6cc:	4293      	cmp	r3, r2
 810e6ce:	d10c      	bne.n	810e6ea <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 810e6d0:	697b      	ldr	r3, [r7, #20]
 810e6d2:	f023 0308 	bic.w	r3, r3, #8
 810e6d6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 810e6d8:	683b      	ldr	r3, [r7, #0]
 810e6da:	68db      	ldr	r3, [r3, #12]
 810e6dc:	697a      	ldr	r2, [r7, #20]
 810e6de:	4313      	orrs	r3, r2
 810e6e0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 810e6e2:	697b      	ldr	r3, [r7, #20]
 810e6e4:	f023 0304 	bic.w	r3, r3, #4
 810e6e8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 810e6ea:	687b      	ldr	r3, [r7, #4]
 810e6ec:	4a1b      	ldr	r2, [pc, #108]	; (810e75c <TIM_OC1_SetConfig+0x10c>)
 810e6ee:	4293      	cmp	r3, r2
 810e6f0:	d00f      	beq.n	810e712 <TIM_OC1_SetConfig+0xc2>
 810e6f2:	687b      	ldr	r3, [r7, #4]
 810e6f4:	4a1a      	ldr	r2, [pc, #104]	; (810e760 <TIM_OC1_SetConfig+0x110>)
 810e6f6:	4293      	cmp	r3, r2
 810e6f8:	d00b      	beq.n	810e712 <TIM_OC1_SetConfig+0xc2>
 810e6fa:	687b      	ldr	r3, [r7, #4]
 810e6fc:	4a19      	ldr	r2, [pc, #100]	; (810e764 <TIM_OC1_SetConfig+0x114>)
 810e6fe:	4293      	cmp	r3, r2
 810e700:	d007      	beq.n	810e712 <TIM_OC1_SetConfig+0xc2>
 810e702:	687b      	ldr	r3, [r7, #4]
 810e704:	4a18      	ldr	r2, [pc, #96]	; (810e768 <TIM_OC1_SetConfig+0x118>)
 810e706:	4293      	cmp	r3, r2
 810e708:	d003      	beq.n	810e712 <TIM_OC1_SetConfig+0xc2>
 810e70a:	687b      	ldr	r3, [r7, #4]
 810e70c:	4a17      	ldr	r2, [pc, #92]	; (810e76c <TIM_OC1_SetConfig+0x11c>)
 810e70e:	4293      	cmp	r3, r2
 810e710:	d111      	bne.n	810e736 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 810e712:	693b      	ldr	r3, [r7, #16]
 810e714:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 810e718:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 810e71a:	693b      	ldr	r3, [r7, #16]
 810e71c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 810e720:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 810e722:	683b      	ldr	r3, [r7, #0]
 810e724:	695b      	ldr	r3, [r3, #20]
 810e726:	693a      	ldr	r2, [r7, #16]
 810e728:	4313      	orrs	r3, r2
 810e72a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 810e72c:	683b      	ldr	r3, [r7, #0]
 810e72e:	699b      	ldr	r3, [r3, #24]
 810e730:	693a      	ldr	r2, [r7, #16]
 810e732:	4313      	orrs	r3, r2
 810e734:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 810e736:	687b      	ldr	r3, [r7, #4]
 810e738:	693a      	ldr	r2, [r7, #16]
 810e73a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 810e73c:	687b      	ldr	r3, [r7, #4]
 810e73e:	68fa      	ldr	r2, [r7, #12]
 810e740:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 810e742:	683b      	ldr	r3, [r7, #0]
 810e744:	685a      	ldr	r2, [r3, #4]
 810e746:	687b      	ldr	r3, [r7, #4]
 810e748:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 810e74a:	687b      	ldr	r3, [r7, #4]
 810e74c:	697a      	ldr	r2, [r7, #20]
 810e74e:	621a      	str	r2, [r3, #32]
}
 810e750:	bf00      	nop
 810e752:	371c      	adds	r7, #28
 810e754:	46bd      	mov	sp, r7
 810e756:	f85d 7b04 	ldr.w	r7, [sp], #4
 810e75a:	4770      	bx	lr
 810e75c:	40010000 	.word	0x40010000
 810e760:	40010400 	.word	0x40010400
 810e764:	40014000 	.word	0x40014000
 810e768:	40014400 	.word	0x40014400
 810e76c:	40014800 	.word	0x40014800

0810e770 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 810e770:	b480      	push	{r7}
 810e772:	b087      	sub	sp, #28
 810e774:	af00      	add	r7, sp, #0
 810e776:	6078      	str	r0, [r7, #4]
 810e778:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 810e77a:	687b      	ldr	r3, [r7, #4]
 810e77c:	6a1b      	ldr	r3, [r3, #32]
 810e77e:	f023 0210 	bic.w	r2, r3, #16
 810e782:	687b      	ldr	r3, [r7, #4]
 810e784:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 810e786:	687b      	ldr	r3, [r7, #4]
 810e788:	6a1b      	ldr	r3, [r3, #32]
 810e78a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 810e78c:	687b      	ldr	r3, [r7, #4]
 810e78e:	685b      	ldr	r3, [r3, #4]
 810e790:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 810e792:	687b      	ldr	r3, [r7, #4]
 810e794:	699b      	ldr	r3, [r3, #24]
 810e796:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 810e798:	68fb      	ldr	r3, [r7, #12]
 810e79a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 810e79e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 810e7a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 810e7a4:	68fb      	ldr	r3, [r7, #12]
 810e7a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 810e7aa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 810e7ac:	683b      	ldr	r3, [r7, #0]
 810e7ae:	681b      	ldr	r3, [r3, #0]
 810e7b0:	021b      	lsls	r3, r3, #8
 810e7b2:	68fa      	ldr	r2, [r7, #12]
 810e7b4:	4313      	orrs	r3, r2
 810e7b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 810e7b8:	697b      	ldr	r3, [r7, #20]
 810e7ba:	f023 0320 	bic.w	r3, r3, #32
 810e7be:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 810e7c0:	683b      	ldr	r3, [r7, #0]
 810e7c2:	689b      	ldr	r3, [r3, #8]
 810e7c4:	011b      	lsls	r3, r3, #4
 810e7c6:	697a      	ldr	r2, [r7, #20]
 810e7c8:	4313      	orrs	r3, r2
 810e7ca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 810e7cc:	687b      	ldr	r3, [r7, #4]
 810e7ce:	4a28      	ldr	r2, [pc, #160]	; (810e870 <TIM_OC2_SetConfig+0x100>)
 810e7d0:	4293      	cmp	r3, r2
 810e7d2:	d003      	beq.n	810e7dc <TIM_OC2_SetConfig+0x6c>
 810e7d4:	687b      	ldr	r3, [r7, #4]
 810e7d6:	4a27      	ldr	r2, [pc, #156]	; (810e874 <TIM_OC2_SetConfig+0x104>)
 810e7d8:	4293      	cmp	r3, r2
 810e7da:	d10d      	bne.n	810e7f8 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 810e7dc:	697b      	ldr	r3, [r7, #20]
 810e7de:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 810e7e2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 810e7e4:	683b      	ldr	r3, [r7, #0]
 810e7e6:	68db      	ldr	r3, [r3, #12]
 810e7e8:	011b      	lsls	r3, r3, #4
 810e7ea:	697a      	ldr	r2, [r7, #20]
 810e7ec:	4313      	orrs	r3, r2
 810e7ee:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 810e7f0:	697b      	ldr	r3, [r7, #20]
 810e7f2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 810e7f6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 810e7f8:	687b      	ldr	r3, [r7, #4]
 810e7fa:	4a1d      	ldr	r2, [pc, #116]	; (810e870 <TIM_OC2_SetConfig+0x100>)
 810e7fc:	4293      	cmp	r3, r2
 810e7fe:	d00f      	beq.n	810e820 <TIM_OC2_SetConfig+0xb0>
 810e800:	687b      	ldr	r3, [r7, #4]
 810e802:	4a1c      	ldr	r2, [pc, #112]	; (810e874 <TIM_OC2_SetConfig+0x104>)
 810e804:	4293      	cmp	r3, r2
 810e806:	d00b      	beq.n	810e820 <TIM_OC2_SetConfig+0xb0>
 810e808:	687b      	ldr	r3, [r7, #4]
 810e80a:	4a1b      	ldr	r2, [pc, #108]	; (810e878 <TIM_OC2_SetConfig+0x108>)
 810e80c:	4293      	cmp	r3, r2
 810e80e:	d007      	beq.n	810e820 <TIM_OC2_SetConfig+0xb0>
 810e810:	687b      	ldr	r3, [r7, #4]
 810e812:	4a1a      	ldr	r2, [pc, #104]	; (810e87c <TIM_OC2_SetConfig+0x10c>)
 810e814:	4293      	cmp	r3, r2
 810e816:	d003      	beq.n	810e820 <TIM_OC2_SetConfig+0xb0>
 810e818:	687b      	ldr	r3, [r7, #4]
 810e81a:	4a19      	ldr	r2, [pc, #100]	; (810e880 <TIM_OC2_SetConfig+0x110>)
 810e81c:	4293      	cmp	r3, r2
 810e81e:	d113      	bne.n	810e848 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 810e820:	693b      	ldr	r3, [r7, #16]
 810e822:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 810e826:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 810e828:	693b      	ldr	r3, [r7, #16]
 810e82a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 810e82e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 810e830:	683b      	ldr	r3, [r7, #0]
 810e832:	695b      	ldr	r3, [r3, #20]
 810e834:	009b      	lsls	r3, r3, #2
 810e836:	693a      	ldr	r2, [r7, #16]
 810e838:	4313      	orrs	r3, r2
 810e83a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 810e83c:	683b      	ldr	r3, [r7, #0]
 810e83e:	699b      	ldr	r3, [r3, #24]
 810e840:	009b      	lsls	r3, r3, #2
 810e842:	693a      	ldr	r2, [r7, #16]
 810e844:	4313      	orrs	r3, r2
 810e846:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 810e848:	687b      	ldr	r3, [r7, #4]
 810e84a:	693a      	ldr	r2, [r7, #16]
 810e84c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 810e84e:	687b      	ldr	r3, [r7, #4]
 810e850:	68fa      	ldr	r2, [r7, #12]
 810e852:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 810e854:	683b      	ldr	r3, [r7, #0]
 810e856:	685a      	ldr	r2, [r3, #4]
 810e858:	687b      	ldr	r3, [r7, #4]
 810e85a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 810e85c:	687b      	ldr	r3, [r7, #4]
 810e85e:	697a      	ldr	r2, [r7, #20]
 810e860:	621a      	str	r2, [r3, #32]
}
 810e862:	bf00      	nop
 810e864:	371c      	adds	r7, #28
 810e866:	46bd      	mov	sp, r7
 810e868:	f85d 7b04 	ldr.w	r7, [sp], #4
 810e86c:	4770      	bx	lr
 810e86e:	bf00      	nop
 810e870:	40010000 	.word	0x40010000
 810e874:	40010400 	.word	0x40010400
 810e878:	40014000 	.word	0x40014000
 810e87c:	40014400 	.word	0x40014400
 810e880:	40014800 	.word	0x40014800

0810e884 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 810e884:	b480      	push	{r7}
 810e886:	b087      	sub	sp, #28
 810e888:	af00      	add	r7, sp, #0
 810e88a:	6078      	str	r0, [r7, #4]
 810e88c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 810e88e:	687b      	ldr	r3, [r7, #4]
 810e890:	6a1b      	ldr	r3, [r3, #32]
 810e892:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 810e896:	687b      	ldr	r3, [r7, #4]
 810e898:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 810e89a:	687b      	ldr	r3, [r7, #4]
 810e89c:	6a1b      	ldr	r3, [r3, #32]
 810e89e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 810e8a0:	687b      	ldr	r3, [r7, #4]
 810e8a2:	685b      	ldr	r3, [r3, #4]
 810e8a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 810e8a6:	687b      	ldr	r3, [r7, #4]
 810e8a8:	69db      	ldr	r3, [r3, #28]
 810e8aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 810e8ac:	68fb      	ldr	r3, [r7, #12]
 810e8ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 810e8b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 810e8b4:	68fb      	ldr	r3, [r7, #12]
 810e8b6:	f023 0303 	bic.w	r3, r3, #3
 810e8ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 810e8bc:	683b      	ldr	r3, [r7, #0]
 810e8be:	681b      	ldr	r3, [r3, #0]
 810e8c0:	68fa      	ldr	r2, [r7, #12]
 810e8c2:	4313      	orrs	r3, r2
 810e8c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 810e8c6:	697b      	ldr	r3, [r7, #20]
 810e8c8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 810e8cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 810e8ce:	683b      	ldr	r3, [r7, #0]
 810e8d0:	689b      	ldr	r3, [r3, #8]
 810e8d2:	021b      	lsls	r3, r3, #8
 810e8d4:	697a      	ldr	r2, [r7, #20]
 810e8d6:	4313      	orrs	r3, r2
 810e8d8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 810e8da:	687b      	ldr	r3, [r7, #4]
 810e8dc:	4a27      	ldr	r2, [pc, #156]	; (810e97c <TIM_OC3_SetConfig+0xf8>)
 810e8de:	4293      	cmp	r3, r2
 810e8e0:	d003      	beq.n	810e8ea <TIM_OC3_SetConfig+0x66>
 810e8e2:	687b      	ldr	r3, [r7, #4]
 810e8e4:	4a26      	ldr	r2, [pc, #152]	; (810e980 <TIM_OC3_SetConfig+0xfc>)
 810e8e6:	4293      	cmp	r3, r2
 810e8e8:	d10d      	bne.n	810e906 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 810e8ea:	697b      	ldr	r3, [r7, #20]
 810e8ec:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 810e8f0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 810e8f2:	683b      	ldr	r3, [r7, #0]
 810e8f4:	68db      	ldr	r3, [r3, #12]
 810e8f6:	021b      	lsls	r3, r3, #8
 810e8f8:	697a      	ldr	r2, [r7, #20]
 810e8fa:	4313      	orrs	r3, r2
 810e8fc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 810e8fe:	697b      	ldr	r3, [r7, #20]
 810e900:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 810e904:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 810e906:	687b      	ldr	r3, [r7, #4]
 810e908:	4a1c      	ldr	r2, [pc, #112]	; (810e97c <TIM_OC3_SetConfig+0xf8>)
 810e90a:	4293      	cmp	r3, r2
 810e90c:	d00f      	beq.n	810e92e <TIM_OC3_SetConfig+0xaa>
 810e90e:	687b      	ldr	r3, [r7, #4]
 810e910:	4a1b      	ldr	r2, [pc, #108]	; (810e980 <TIM_OC3_SetConfig+0xfc>)
 810e912:	4293      	cmp	r3, r2
 810e914:	d00b      	beq.n	810e92e <TIM_OC3_SetConfig+0xaa>
 810e916:	687b      	ldr	r3, [r7, #4]
 810e918:	4a1a      	ldr	r2, [pc, #104]	; (810e984 <TIM_OC3_SetConfig+0x100>)
 810e91a:	4293      	cmp	r3, r2
 810e91c:	d007      	beq.n	810e92e <TIM_OC3_SetConfig+0xaa>
 810e91e:	687b      	ldr	r3, [r7, #4]
 810e920:	4a19      	ldr	r2, [pc, #100]	; (810e988 <TIM_OC3_SetConfig+0x104>)
 810e922:	4293      	cmp	r3, r2
 810e924:	d003      	beq.n	810e92e <TIM_OC3_SetConfig+0xaa>
 810e926:	687b      	ldr	r3, [r7, #4]
 810e928:	4a18      	ldr	r2, [pc, #96]	; (810e98c <TIM_OC3_SetConfig+0x108>)
 810e92a:	4293      	cmp	r3, r2
 810e92c:	d113      	bne.n	810e956 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 810e92e:	693b      	ldr	r3, [r7, #16]
 810e930:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 810e934:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 810e936:	693b      	ldr	r3, [r7, #16]
 810e938:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 810e93c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 810e93e:	683b      	ldr	r3, [r7, #0]
 810e940:	695b      	ldr	r3, [r3, #20]
 810e942:	011b      	lsls	r3, r3, #4
 810e944:	693a      	ldr	r2, [r7, #16]
 810e946:	4313      	orrs	r3, r2
 810e948:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 810e94a:	683b      	ldr	r3, [r7, #0]
 810e94c:	699b      	ldr	r3, [r3, #24]
 810e94e:	011b      	lsls	r3, r3, #4
 810e950:	693a      	ldr	r2, [r7, #16]
 810e952:	4313      	orrs	r3, r2
 810e954:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 810e956:	687b      	ldr	r3, [r7, #4]
 810e958:	693a      	ldr	r2, [r7, #16]
 810e95a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 810e95c:	687b      	ldr	r3, [r7, #4]
 810e95e:	68fa      	ldr	r2, [r7, #12]
 810e960:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 810e962:	683b      	ldr	r3, [r7, #0]
 810e964:	685a      	ldr	r2, [r3, #4]
 810e966:	687b      	ldr	r3, [r7, #4]
 810e968:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 810e96a:	687b      	ldr	r3, [r7, #4]
 810e96c:	697a      	ldr	r2, [r7, #20]
 810e96e:	621a      	str	r2, [r3, #32]
}
 810e970:	bf00      	nop
 810e972:	371c      	adds	r7, #28
 810e974:	46bd      	mov	sp, r7
 810e976:	f85d 7b04 	ldr.w	r7, [sp], #4
 810e97a:	4770      	bx	lr
 810e97c:	40010000 	.word	0x40010000
 810e980:	40010400 	.word	0x40010400
 810e984:	40014000 	.word	0x40014000
 810e988:	40014400 	.word	0x40014400
 810e98c:	40014800 	.word	0x40014800

0810e990 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 810e990:	b480      	push	{r7}
 810e992:	b087      	sub	sp, #28
 810e994:	af00      	add	r7, sp, #0
 810e996:	6078      	str	r0, [r7, #4]
 810e998:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 810e99a:	687b      	ldr	r3, [r7, #4]
 810e99c:	6a1b      	ldr	r3, [r3, #32]
 810e99e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 810e9a2:	687b      	ldr	r3, [r7, #4]
 810e9a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 810e9a6:	687b      	ldr	r3, [r7, #4]
 810e9a8:	6a1b      	ldr	r3, [r3, #32]
 810e9aa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 810e9ac:	687b      	ldr	r3, [r7, #4]
 810e9ae:	685b      	ldr	r3, [r3, #4]
 810e9b0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 810e9b2:	687b      	ldr	r3, [r7, #4]
 810e9b4:	69db      	ldr	r3, [r3, #28]
 810e9b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 810e9b8:	68fb      	ldr	r3, [r7, #12]
 810e9ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 810e9be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 810e9c0:	68fb      	ldr	r3, [r7, #12]
 810e9c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 810e9c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 810e9c8:	683b      	ldr	r3, [r7, #0]
 810e9ca:	681b      	ldr	r3, [r3, #0]
 810e9cc:	021b      	lsls	r3, r3, #8
 810e9ce:	68fa      	ldr	r2, [r7, #12]
 810e9d0:	4313      	orrs	r3, r2
 810e9d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 810e9d4:	693b      	ldr	r3, [r7, #16]
 810e9d6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 810e9da:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 810e9dc:	683b      	ldr	r3, [r7, #0]
 810e9de:	689b      	ldr	r3, [r3, #8]
 810e9e0:	031b      	lsls	r3, r3, #12
 810e9e2:	693a      	ldr	r2, [r7, #16]
 810e9e4:	4313      	orrs	r3, r2
 810e9e6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 810e9e8:	687b      	ldr	r3, [r7, #4]
 810e9ea:	4a18      	ldr	r2, [pc, #96]	; (810ea4c <TIM_OC4_SetConfig+0xbc>)
 810e9ec:	4293      	cmp	r3, r2
 810e9ee:	d00f      	beq.n	810ea10 <TIM_OC4_SetConfig+0x80>
 810e9f0:	687b      	ldr	r3, [r7, #4]
 810e9f2:	4a17      	ldr	r2, [pc, #92]	; (810ea50 <TIM_OC4_SetConfig+0xc0>)
 810e9f4:	4293      	cmp	r3, r2
 810e9f6:	d00b      	beq.n	810ea10 <TIM_OC4_SetConfig+0x80>
 810e9f8:	687b      	ldr	r3, [r7, #4]
 810e9fa:	4a16      	ldr	r2, [pc, #88]	; (810ea54 <TIM_OC4_SetConfig+0xc4>)
 810e9fc:	4293      	cmp	r3, r2
 810e9fe:	d007      	beq.n	810ea10 <TIM_OC4_SetConfig+0x80>
 810ea00:	687b      	ldr	r3, [r7, #4]
 810ea02:	4a15      	ldr	r2, [pc, #84]	; (810ea58 <TIM_OC4_SetConfig+0xc8>)
 810ea04:	4293      	cmp	r3, r2
 810ea06:	d003      	beq.n	810ea10 <TIM_OC4_SetConfig+0x80>
 810ea08:	687b      	ldr	r3, [r7, #4]
 810ea0a:	4a14      	ldr	r2, [pc, #80]	; (810ea5c <TIM_OC4_SetConfig+0xcc>)
 810ea0c:	4293      	cmp	r3, r2
 810ea0e:	d109      	bne.n	810ea24 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 810ea10:	697b      	ldr	r3, [r7, #20]
 810ea12:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 810ea16:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 810ea18:	683b      	ldr	r3, [r7, #0]
 810ea1a:	695b      	ldr	r3, [r3, #20]
 810ea1c:	019b      	lsls	r3, r3, #6
 810ea1e:	697a      	ldr	r2, [r7, #20]
 810ea20:	4313      	orrs	r3, r2
 810ea22:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 810ea24:	687b      	ldr	r3, [r7, #4]
 810ea26:	697a      	ldr	r2, [r7, #20]
 810ea28:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 810ea2a:	687b      	ldr	r3, [r7, #4]
 810ea2c:	68fa      	ldr	r2, [r7, #12]
 810ea2e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 810ea30:	683b      	ldr	r3, [r7, #0]
 810ea32:	685a      	ldr	r2, [r3, #4]
 810ea34:	687b      	ldr	r3, [r7, #4]
 810ea36:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 810ea38:	687b      	ldr	r3, [r7, #4]
 810ea3a:	693a      	ldr	r2, [r7, #16]
 810ea3c:	621a      	str	r2, [r3, #32]
}
 810ea3e:	bf00      	nop
 810ea40:	371c      	adds	r7, #28
 810ea42:	46bd      	mov	sp, r7
 810ea44:	f85d 7b04 	ldr.w	r7, [sp], #4
 810ea48:	4770      	bx	lr
 810ea4a:	bf00      	nop
 810ea4c:	40010000 	.word	0x40010000
 810ea50:	40010400 	.word	0x40010400
 810ea54:	40014000 	.word	0x40014000
 810ea58:	40014400 	.word	0x40014400
 810ea5c:	40014800 	.word	0x40014800

0810ea60 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 810ea60:	b480      	push	{r7}
 810ea62:	b087      	sub	sp, #28
 810ea64:	af00      	add	r7, sp, #0
 810ea66:	6078      	str	r0, [r7, #4]
 810ea68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 810ea6a:	687b      	ldr	r3, [r7, #4]
 810ea6c:	6a1b      	ldr	r3, [r3, #32]
 810ea6e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 810ea72:	687b      	ldr	r3, [r7, #4]
 810ea74:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 810ea76:	687b      	ldr	r3, [r7, #4]
 810ea78:	6a1b      	ldr	r3, [r3, #32]
 810ea7a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 810ea7c:	687b      	ldr	r3, [r7, #4]
 810ea7e:	685b      	ldr	r3, [r3, #4]
 810ea80:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 810ea82:	687b      	ldr	r3, [r7, #4]
 810ea84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810ea86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 810ea88:	68fb      	ldr	r3, [r7, #12]
 810ea8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 810ea8e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 810ea90:	683b      	ldr	r3, [r7, #0]
 810ea92:	681b      	ldr	r3, [r3, #0]
 810ea94:	68fa      	ldr	r2, [r7, #12]
 810ea96:	4313      	orrs	r3, r2
 810ea98:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 810ea9a:	693b      	ldr	r3, [r7, #16]
 810ea9c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 810eaa0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 810eaa2:	683b      	ldr	r3, [r7, #0]
 810eaa4:	689b      	ldr	r3, [r3, #8]
 810eaa6:	041b      	lsls	r3, r3, #16
 810eaa8:	693a      	ldr	r2, [r7, #16]
 810eaaa:	4313      	orrs	r3, r2
 810eaac:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 810eaae:	687b      	ldr	r3, [r7, #4]
 810eab0:	4a17      	ldr	r2, [pc, #92]	; (810eb10 <TIM_OC5_SetConfig+0xb0>)
 810eab2:	4293      	cmp	r3, r2
 810eab4:	d00f      	beq.n	810ead6 <TIM_OC5_SetConfig+0x76>
 810eab6:	687b      	ldr	r3, [r7, #4]
 810eab8:	4a16      	ldr	r2, [pc, #88]	; (810eb14 <TIM_OC5_SetConfig+0xb4>)
 810eaba:	4293      	cmp	r3, r2
 810eabc:	d00b      	beq.n	810ead6 <TIM_OC5_SetConfig+0x76>
 810eabe:	687b      	ldr	r3, [r7, #4]
 810eac0:	4a15      	ldr	r2, [pc, #84]	; (810eb18 <TIM_OC5_SetConfig+0xb8>)
 810eac2:	4293      	cmp	r3, r2
 810eac4:	d007      	beq.n	810ead6 <TIM_OC5_SetConfig+0x76>
 810eac6:	687b      	ldr	r3, [r7, #4]
 810eac8:	4a14      	ldr	r2, [pc, #80]	; (810eb1c <TIM_OC5_SetConfig+0xbc>)
 810eaca:	4293      	cmp	r3, r2
 810eacc:	d003      	beq.n	810ead6 <TIM_OC5_SetConfig+0x76>
 810eace:	687b      	ldr	r3, [r7, #4]
 810ead0:	4a13      	ldr	r2, [pc, #76]	; (810eb20 <TIM_OC5_SetConfig+0xc0>)
 810ead2:	4293      	cmp	r3, r2
 810ead4:	d109      	bne.n	810eaea <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 810ead6:	697b      	ldr	r3, [r7, #20]
 810ead8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 810eadc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 810eade:	683b      	ldr	r3, [r7, #0]
 810eae0:	695b      	ldr	r3, [r3, #20]
 810eae2:	021b      	lsls	r3, r3, #8
 810eae4:	697a      	ldr	r2, [r7, #20]
 810eae6:	4313      	orrs	r3, r2
 810eae8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 810eaea:	687b      	ldr	r3, [r7, #4]
 810eaec:	697a      	ldr	r2, [r7, #20]
 810eaee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 810eaf0:	687b      	ldr	r3, [r7, #4]
 810eaf2:	68fa      	ldr	r2, [r7, #12]
 810eaf4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 810eaf6:	683b      	ldr	r3, [r7, #0]
 810eaf8:	685a      	ldr	r2, [r3, #4]
 810eafa:	687b      	ldr	r3, [r7, #4]
 810eafc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 810eafe:	687b      	ldr	r3, [r7, #4]
 810eb00:	693a      	ldr	r2, [r7, #16]
 810eb02:	621a      	str	r2, [r3, #32]
}
 810eb04:	bf00      	nop
 810eb06:	371c      	adds	r7, #28
 810eb08:	46bd      	mov	sp, r7
 810eb0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810eb0e:	4770      	bx	lr
 810eb10:	40010000 	.word	0x40010000
 810eb14:	40010400 	.word	0x40010400
 810eb18:	40014000 	.word	0x40014000
 810eb1c:	40014400 	.word	0x40014400
 810eb20:	40014800 	.word	0x40014800

0810eb24 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 810eb24:	b480      	push	{r7}
 810eb26:	b087      	sub	sp, #28
 810eb28:	af00      	add	r7, sp, #0
 810eb2a:	6078      	str	r0, [r7, #4]
 810eb2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 810eb2e:	687b      	ldr	r3, [r7, #4]
 810eb30:	6a1b      	ldr	r3, [r3, #32]
 810eb32:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 810eb36:	687b      	ldr	r3, [r7, #4]
 810eb38:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 810eb3a:	687b      	ldr	r3, [r7, #4]
 810eb3c:	6a1b      	ldr	r3, [r3, #32]
 810eb3e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 810eb40:	687b      	ldr	r3, [r7, #4]
 810eb42:	685b      	ldr	r3, [r3, #4]
 810eb44:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 810eb46:	687b      	ldr	r3, [r7, #4]
 810eb48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810eb4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 810eb4c:	68fb      	ldr	r3, [r7, #12]
 810eb4e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 810eb52:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 810eb54:	683b      	ldr	r3, [r7, #0]
 810eb56:	681b      	ldr	r3, [r3, #0]
 810eb58:	021b      	lsls	r3, r3, #8
 810eb5a:	68fa      	ldr	r2, [r7, #12]
 810eb5c:	4313      	orrs	r3, r2
 810eb5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 810eb60:	693b      	ldr	r3, [r7, #16]
 810eb62:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 810eb66:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 810eb68:	683b      	ldr	r3, [r7, #0]
 810eb6a:	689b      	ldr	r3, [r3, #8]
 810eb6c:	051b      	lsls	r3, r3, #20
 810eb6e:	693a      	ldr	r2, [r7, #16]
 810eb70:	4313      	orrs	r3, r2
 810eb72:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 810eb74:	687b      	ldr	r3, [r7, #4]
 810eb76:	4a18      	ldr	r2, [pc, #96]	; (810ebd8 <TIM_OC6_SetConfig+0xb4>)
 810eb78:	4293      	cmp	r3, r2
 810eb7a:	d00f      	beq.n	810eb9c <TIM_OC6_SetConfig+0x78>
 810eb7c:	687b      	ldr	r3, [r7, #4]
 810eb7e:	4a17      	ldr	r2, [pc, #92]	; (810ebdc <TIM_OC6_SetConfig+0xb8>)
 810eb80:	4293      	cmp	r3, r2
 810eb82:	d00b      	beq.n	810eb9c <TIM_OC6_SetConfig+0x78>
 810eb84:	687b      	ldr	r3, [r7, #4]
 810eb86:	4a16      	ldr	r2, [pc, #88]	; (810ebe0 <TIM_OC6_SetConfig+0xbc>)
 810eb88:	4293      	cmp	r3, r2
 810eb8a:	d007      	beq.n	810eb9c <TIM_OC6_SetConfig+0x78>
 810eb8c:	687b      	ldr	r3, [r7, #4]
 810eb8e:	4a15      	ldr	r2, [pc, #84]	; (810ebe4 <TIM_OC6_SetConfig+0xc0>)
 810eb90:	4293      	cmp	r3, r2
 810eb92:	d003      	beq.n	810eb9c <TIM_OC6_SetConfig+0x78>
 810eb94:	687b      	ldr	r3, [r7, #4]
 810eb96:	4a14      	ldr	r2, [pc, #80]	; (810ebe8 <TIM_OC6_SetConfig+0xc4>)
 810eb98:	4293      	cmp	r3, r2
 810eb9a:	d109      	bne.n	810ebb0 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 810eb9c:	697b      	ldr	r3, [r7, #20]
 810eb9e:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 810eba2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 810eba4:	683b      	ldr	r3, [r7, #0]
 810eba6:	695b      	ldr	r3, [r3, #20]
 810eba8:	029b      	lsls	r3, r3, #10
 810ebaa:	697a      	ldr	r2, [r7, #20]
 810ebac:	4313      	orrs	r3, r2
 810ebae:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 810ebb0:	687b      	ldr	r3, [r7, #4]
 810ebb2:	697a      	ldr	r2, [r7, #20]
 810ebb4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 810ebb6:	687b      	ldr	r3, [r7, #4]
 810ebb8:	68fa      	ldr	r2, [r7, #12]
 810ebba:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 810ebbc:	683b      	ldr	r3, [r7, #0]
 810ebbe:	685a      	ldr	r2, [r3, #4]
 810ebc0:	687b      	ldr	r3, [r7, #4]
 810ebc2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 810ebc4:	687b      	ldr	r3, [r7, #4]
 810ebc6:	693a      	ldr	r2, [r7, #16]
 810ebc8:	621a      	str	r2, [r3, #32]
}
 810ebca:	bf00      	nop
 810ebcc:	371c      	adds	r7, #28
 810ebce:	46bd      	mov	sp, r7
 810ebd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 810ebd4:	4770      	bx	lr
 810ebd6:	bf00      	nop
 810ebd8:	40010000 	.word	0x40010000
 810ebdc:	40010400 	.word	0x40010400
 810ebe0:	40014000 	.word	0x40014000
 810ebe4:	40014400 	.word	0x40014400
 810ebe8:	40014800 	.word	0x40014800

0810ebec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 810ebec:	b480      	push	{r7}
 810ebee:	b087      	sub	sp, #28
 810ebf0:	af00      	add	r7, sp, #0
 810ebf2:	60f8      	str	r0, [r7, #12]
 810ebf4:	60b9      	str	r1, [r7, #8]
 810ebf6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 810ebf8:	68fb      	ldr	r3, [r7, #12]
 810ebfa:	6a1b      	ldr	r3, [r3, #32]
 810ebfc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 810ebfe:	68fb      	ldr	r3, [r7, #12]
 810ec00:	6a1b      	ldr	r3, [r3, #32]
 810ec02:	f023 0201 	bic.w	r2, r3, #1
 810ec06:	68fb      	ldr	r3, [r7, #12]
 810ec08:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 810ec0a:	68fb      	ldr	r3, [r7, #12]
 810ec0c:	699b      	ldr	r3, [r3, #24]
 810ec0e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 810ec10:	693b      	ldr	r3, [r7, #16]
 810ec12:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 810ec16:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 810ec18:	687b      	ldr	r3, [r7, #4]
 810ec1a:	011b      	lsls	r3, r3, #4
 810ec1c:	693a      	ldr	r2, [r7, #16]
 810ec1e:	4313      	orrs	r3, r2
 810ec20:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 810ec22:	697b      	ldr	r3, [r7, #20]
 810ec24:	f023 030a 	bic.w	r3, r3, #10
 810ec28:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 810ec2a:	697a      	ldr	r2, [r7, #20]
 810ec2c:	68bb      	ldr	r3, [r7, #8]
 810ec2e:	4313      	orrs	r3, r2
 810ec30:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 810ec32:	68fb      	ldr	r3, [r7, #12]
 810ec34:	693a      	ldr	r2, [r7, #16]
 810ec36:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 810ec38:	68fb      	ldr	r3, [r7, #12]
 810ec3a:	697a      	ldr	r2, [r7, #20]
 810ec3c:	621a      	str	r2, [r3, #32]
}
 810ec3e:	bf00      	nop
 810ec40:	371c      	adds	r7, #28
 810ec42:	46bd      	mov	sp, r7
 810ec44:	f85d 7b04 	ldr.w	r7, [sp], #4
 810ec48:	4770      	bx	lr

0810ec4a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 810ec4a:	b480      	push	{r7}
 810ec4c:	b087      	sub	sp, #28
 810ec4e:	af00      	add	r7, sp, #0
 810ec50:	60f8      	str	r0, [r7, #12]
 810ec52:	60b9      	str	r1, [r7, #8]
 810ec54:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 810ec56:	68fb      	ldr	r3, [r7, #12]
 810ec58:	6a1b      	ldr	r3, [r3, #32]
 810ec5a:	f023 0210 	bic.w	r2, r3, #16
 810ec5e:	68fb      	ldr	r3, [r7, #12]
 810ec60:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 810ec62:	68fb      	ldr	r3, [r7, #12]
 810ec64:	699b      	ldr	r3, [r3, #24]
 810ec66:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 810ec68:	68fb      	ldr	r3, [r7, #12]
 810ec6a:	6a1b      	ldr	r3, [r3, #32]
 810ec6c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 810ec6e:	697b      	ldr	r3, [r7, #20]
 810ec70:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 810ec74:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 810ec76:	687b      	ldr	r3, [r7, #4]
 810ec78:	031b      	lsls	r3, r3, #12
 810ec7a:	697a      	ldr	r2, [r7, #20]
 810ec7c:	4313      	orrs	r3, r2
 810ec7e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 810ec80:	693b      	ldr	r3, [r7, #16]
 810ec82:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 810ec86:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 810ec88:	68bb      	ldr	r3, [r7, #8]
 810ec8a:	011b      	lsls	r3, r3, #4
 810ec8c:	693a      	ldr	r2, [r7, #16]
 810ec8e:	4313      	orrs	r3, r2
 810ec90:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 810ec92:	68fb      	ldr	r3, [r7, #12]
 810ec94:	697a      	ldr	r2, [r7, #20]
 810ec96:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 810ec98:	68fb      	ldr	r3, [r7, #12]
 810ec9a:	693a      	ldr	r2, [r7, #16]
 810ec9c:	621a      	str	r2, [r3, #32]
}
 810ec9e:	bf00      	nop
 810eca0:	371c      	adds	r7, #28
 810eca2:	46bd      	mov	sp, r7
 810eca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 810eca8:	4770      	bx	lr

0810ecaa <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 810ecaa:	b480      	push	{r7}
 810ecac:	b085      	sub	sp, #20
 810ecae:	af00      	add	r7, sp, #0
 810ecb0:	6078      	str	r0, [r7, #4]
 810ecb2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 810ecb4:	687b      	ldr	r3, [r7, #4]
 810ecb6:	689b      	ldr	r3, [r3, #8]
 810ecb8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 810ecba:	68fb      	ldr	r3, [r7, #12]
 810ecbc:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 810ecc0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 810ecc4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 810ecc6:	683a      	ldr	r2, [r7, #0]
 810ecc8:	68fb      	ldr	r3, [r7, #12]
 810ecca:	4313      	orrs	r3, r2
 810eccc:	f043 0307 	orr.w	r3, r3, #7
 810ecd0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 810ecd2:	687b      	ldr	r3, [r7, #4]
 810ecd4:	68fa      	ldr	r2, [r7, #12]
 810ecd6:	609a      	str	r2, [r3, #8]
}
 810ecd8:	bf00      	nop
 810ecda:	3714      	adds	r7, #20
 810ecdc:	46bd      	mov	sp, r7
 810ecde:	f85d 7b04 	ldr.w	r7, [sp], #4
 810ece2:	4770      	bx	lr

0810ece4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 810ece4:	b480      	push	{r7}
 810ece6:	b087      	sub	sp, #28
 810ece8:	af00      	add	r7, sp, #0
 810ecea:	60f8      	str	r0, [r7, #12]
 810ecec:	60b9      	str	r1, [r7, #8]
 810ecee:	607a      	str	r2, [r7, #4]
 810ecf0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 810ecf2:	68fb      	ldr	r3, [r7, #12]
 810ecf4:	689b      	ldr	r3, [r3, #8]
 810ecf6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 810ecf8:	697b      	ldr	r3, [r7, #20]
 810ecfa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 810ecfe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 810ed00:	683b      	ldr	r3, [r7, #0]
 810ed02:	021a      	lsls	r2, r3, #8
 810ed04:	687b      	ldr	r3, [r7, #4]
 810ed06:	431a      	orrs	r2, r3
 810ed08:	68bb      	ldr	r3, [r7, #8]
 810ed0a:	4313      	orrs	r3, r2
 810ed0c:	697a      	ldr	r2, [r7, #20]
 810ed0e:	4313      	orrs	r3, r2
 810ed10:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 810ed12:	68fb      	ldr	r3, [r7, #12]
 810ed14:	697a      	ldr	r2, [r7, #20]
 810ed16:	609a      	str	r2, [r3, #8]
}
 810ed18:	bf00      	nop
 810ed1a:	371c      	adds	r7, #28
 810ed1c:	46bd      	mov	sp, r7
 810ed1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 810ed22:	4770      	bx	lr

0810ed24 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 810ed24:	b480      	push	{r7}
 810ed26:	b085      	sub	sp, #20
 810ed28:	af00      	add	r7, sp, #0
 810ed2a:	6078      	str	r0, [r7, #4]
 810ed2c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 810ed2e:	687b      	ldr	r3, [r7, #4]
 810ed30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 810ed34:	2b01      	cmp	r3, #1
 810ed36:	d101      	bne.n	810ed3c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 810ed38:	2302      	movs	r3, #2
 810ed3a:	e068      	b.n	810ee0e <HAL_TIMEx_MasterConfigSynchronization+0xea>
 810ed3c:	687b      	ldr	r3, [r7, #4]
 810ed3e:	2201      	movs	r2, #1
 810ed40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 810ed44:	687b      	ldr	r3, [r7, #4]
 810ed46:	2202      	movs	r2, #2
 810ed48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 810ed4c:	687b      	ldr	r3, [r7, #4]
 810ed4e:	681b      	ldr	r3, [r3, #0]
 810ed50:	685b      	ldr	r3, [r3, #4]
 810ed52:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 810ed54:	687b      	ldr	r3, [r7, #4]
 810ed56:	681b      	ldr	r3, [r3, #0]
 810ed58:	689b      	ldr	r3, [r3, #8]
 810ed5a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 810ed5c:	687b      	ldr	r3, [r7, #4]
 810ed5e:	681b      	ldr	r3, [r3, #0]
 810ed60:	4a2e      	ldr	r2, [pc, #184]	; (810ee1c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 810ed62:	4293      	cmp	r3, r2
 810ed64:	d004      	beq.n	810ed70 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 810ed66:	687b      	ldr	r3, [r7, #4]
 810ed68:	681b      	ldr	r3, [r3, #0]
 810ed6a:	4a2d      	ldr	r2, [pc, #180]	; (810ee20 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 810ed6c:	4293      	cmp	r3, r2
 810ed6e:	d108      	bne.n	810ed82 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 810ed70:	68fb      	ldr	r3, [r7, #12]
 810ed72:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 810ed76:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 810ed78:	683b      	ldr	r3, [r7, #0]
 810ed7a:	685b      	ldr	r3, [r3, #4]
 810ed7c:	68fa      	ldr	r2, [r7, #12]
 810ed7e:	4313      	orrs	r3, r2
 810ed80:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 810ed82:	68fb      	ldr	r3, [r7, #12]
 810ed84:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 810ed88:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 810ed8a:	683b      	ldr	r3, [r7, #0]
 810ed8c:	681b      	ldr	r3, [r3, #0]
 810ed8e:	68fa      	ldr	r2, [r7, #12]
 810ed90:	4313      	orrs	r3, r2
 810ed92:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 810ed94:	687b      	ldr	r3, [r7, #4]
 810ed96:	681b      	ldr	r3, [r3, #0]
 810ed98:	68fa      	ldr	r2, [r7, #12]
 810ed9a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 810ed9c:	687b      	ldr	r3, [r7, #4]
 810ed9e:	681b      	ldr	r3, [r3, #0]
 810eda0:	4a1e      	ldr	r2, [pc, #120]	; (810ee1c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 810eda2:	4293      	cmp	r3, r2
 810eda4:	d01d      	beq.n	810ede2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 810eda6:	687b      	ldr	r3, [r7, #4]
 810eda8:	681b      	ldr	r3, [r3, #0]
 810edaa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 810edae:	d018      	beq.n	810ede2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 810edb0:	687b      	ldr	r3, [r7, #4]
 810edb2:	681b      	ldr	r3, [r3, #0]
 810edb4:	4a1b      	ldr	r2, [pc, #108]	; (810ee24 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 810edb6:	4293      	cmp	r3, r2
 810edb8:	d013      	beq.n	810ede2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 810edba:	687b      	ldr	r3, [r7, #4]
 810edbc:	681b      	ldr	r3, [r3, #0]
 810edbe:	4a1a      	ldr	r2, [pc, #104]	; (810ee28 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 810edc0:	4293      	cmp	r3, r2
 810edc2:	d00e      	beq.n	810ede2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 810edc4:	687b      	ldr	r3, [r7, #4]
 810edc6:	681b      	ldr	r3, [r3, #0]
 810edc8:	4a18      	ldr	r2, [pc, #96]	; (810ee2c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 810edca:	4293      	cmp	r3, r2
 810edcc:	d009      	beq.n	810ede2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 810edce:	687b      	ldr	r3, [r7, #4]
 810edd0:	681b      	ldr	r3, [r3, #0]
 810edd2:	4a13      	ldr	r2, [pc, #76]	; (810ee20 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 810edd4:	4293      	cmp	r3, r2
 810edd6:	d004      	beq.n	810ede2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 810edd8:	687b      	ldr	r3, [r7, #4]
 810edda:	681b      	ldr	r3, [r3, #0]
 810eddc:	4a14      	ldr	r2, [pc, #80]	; (810ee30 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 810edde:	4293      	cmp	r3, r2
 810ede0:	d10c      	bne.n	810edfc <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 810ede2:	68bb      	ldr	r3, [r7, #8]
 810ede4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 810ede8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 810edea:	683b      	ldr	r3, [r7, #0]
 810edec:	689b      	ldr	r3, [r3, #8]
 810edee:	68ba      	ldr	r2, [r7, #8]
 810edf0:	4313      	orrs	r3, r2
 810edf2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 810edf4:	687b      	ldr	r3, [r7, #4]
 810edf6:	681b      	ldr	r3, [r3, #0]
 810edf8:	68ba      	ldr	r2, [r7, #8]
 810edfa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 810edfc:	687b      	ldr	r3, [r7, #4]
 810edfe:	2201      	movs	r2, #1
 810ee00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 810ee04:	687b      	ldr	r3, [r7, #4]
 810ee06:	2200      	movs	r2, #0
 810ee08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 810ee0c:	2300      	movs	r3, #0
}
 810ee0e:	4618      	mov	r0, r3
 810ee10:	3714      	adds	r7, #20
 810ee12:	46bd      	mov	sp, r7
 810ee14:	f85d 7b04 	ldr.w	r7, [sp], #4
 810ee18:	4770      	bx	lr
 810ee1a:	bf00      	nop
 810ee1c:	40010000 	.word	0x40010000
 810ee20:	40010400 	.word	0x40010400
 810ee24:	40000400 	.word	0x40000400
 810ee28:	40000800 	.word	0x40000800
 810ee2c:	40000c00 	.word	0x40000c00
 810ee30:	40001800 	.word	0x40001800

0810ee34 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 810ee34:	b480      	push	{r7}
 810ee36:	b085      	sub	sp, #20
 810ee38:	af00      	add	r7, sp, #0
 810ee3a:	6078      	str	r0, [r7, #4]
 810ee3c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 810ee3e:	2300      	movs	r3, #0
 810ee40:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 810ee42:	687b      	ldr	r3, [r7, #4]
 810ee44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 810ee48:	2b01      	cmp	r3, #1
 810ee4a:	d101      	bne.n	810ee50 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 810ee4c:	2302      	movs	r3, #2
 810ee4e:	e065      	b.n	810ef1c <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 810ee50:	687b      	ldr	r3, [r7, #4]
 810ee52:	2201      	movs	r2, #1
 810ee54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 810ee58:	68fb      	ldr	r3, [r7, #12]
 810ee5a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 810ee5e:	683b      	ldr	r3, [r7, #0]
 810ee60:	68db      	ldr	r3, [r3, #12]
 810ee62:	4313      	orrs	r3, r2
 810ee64:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 810ee66:	68fb      	ldr	r3, [r7, #12]
 810ee68:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 810ee6c:	683b      	ldr	r3, [r7, #0]
 810ee6e:	689b      	ldr	r3, [r3, #8]
 810ee70:	4313      	orrs	r3, r2
 810ee72:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 810ee74:	68fb      	ldr	r3, [r7, #12]
 810ee76:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 810ee7a:	683b      	ldr	r3, [r7, #0]
 810ee7c:	685b      	ldr	r3, [r3, #4]
 810ee7e:	4313      	orrs	r3, r2
 810ee80:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 810ee82:	68fb      	ldr	r3, [r7, #12]
 810ee84:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 810ee88:	683b      	ldr	r3, [r7, #0]
 810ee8a:	681b      	ldr	r3, [r3, #0]
 810ee8c:	4313      	orrs	r3, r2
 810ee8e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 810ee90:	68fb      	ldr	r3, [r7, #12]
 810ee92:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 810ee96:	683b      	ldr	r3, [r7, #0]
 810ee98:	691b      	ldr	r3, [r3, #16]
 810ee9a:	4313      	orrs	r3, r2
 810ee9c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 810ee9e:	68fb      	ldr	r3, [r7, #12]
 810eea0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 810eea4:	683b      	ldr	r3, [r7, #0]
 810eea6:	695b      	ldr	r3, [r3, #20]
 810eea8:	4313      	orrs	r3, r2
 810eeaa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 810eeac:	68fb      	ldr	r3, [r7, #12]
 810eeae:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 810eeb2:	683b      	ldr	r3, [r7, #0]
 810eeb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810eeb6:	4313      	orrs	r3, r2
 810eeb8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 810eeba:	68fb      	ldr	r3, [r7, #12]
 810eebc:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 810eec0:	683b      	ldr	r3, [r7, #0]
 810eec2:	699b      	ldr	r3, [r3, #24]
 810eec4:	041b      	lsls	r3, r3, #16
 810eec6:	4313      	orrs	r3, r2
 810eec8:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 810eeca:	687b      	ldr	r3, [r7, #4]
 810eecc:	681b      	ldr	r3, [r3, #0]
 810eece:	4a16      	ldr	r2, [pc, #88]	; (810ef28 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 810eed0:	4293      	cmp	r3, r2
 810eed2:	d004      	beq.n	810eede <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 810eed4:	687b      	ldr	r3, [r7, #4]
 810eed6:	681b      	ldr	r3, [r3, #0]
 810eed8:	4a14      	ldr	r2, [pc, #80]	; (810ef2c <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 810eeda:	4293      	cmp	r3, r2
 810eedc:	d115      	bne.n	810ef0a <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 810eede:	68fb      	ldr	r3, [r7, #12]
 810eee0:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 810eee4:	683b      	ldr	r3, [r7, #0]
 810eee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810eee8:	051b      	lsls	r3, r3, #20
 810eeea:	4313      	orrs	r3, r2
 810eeec:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 810eeee:	68fb      	ldr	r3, [r7, #12]
 810eef0:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 810eef4:	683b      	ldr	r3, [r7, #0]
 810eef6:	69db      	ldr	r3, [r3, #28]
 810eef8:	4313      	orrs	r3, r2
 810eefa:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 810eefc:	68fb      	ldr	r3, [r7, #12]
 810eefe:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 810ef02:	683b      	ldr	r3, [r7, #0]
 810ef04:	6a1b      	ldr	r3, [r3, #32]
 810ef06:	4313      	orrs	r3, r2
 810ef08:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 810ef0a:	687b      	ldr	r3, [r7, #4]
 810ef0c:	681b      	ldr	r3, [r3, #0]
 810ef0e:	68fa      	ldr	r2, [r7, #12]
 810ef10:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 810ef12:	687b      	ldr	r3, [r7, #4]
 810ef14:	2200      	movs	r2, #0
 810ef16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 810ef1a:	2300      	movs	r3, #0
}
 810ef1c:	4618      	mov	r0, r3
 810ef1e:	3714      	adds	r7, #20
 810ef20:	46bd      	mov	sp, r7
 810ef22:	f85d 7b04 	ldr.w	r7, [sp], #4
 810ef26:	4770      	bx	lr
 810ef28:	40010000 	.word	0x40010000
 810ef2c:	40010400 	.word	0x40010400

0810ef30 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 810ef30:	b480      	push	{r7}
 810ef32:	b083      	sub	sp, #12
 810ef34:	af00      	add	r7, sp, #0
 810ef36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 810ef38:	bf00      	nop
 810ef3a:	370c      	adds	r7, #12
 810ef3c:	46bd      	mov	sp, r7
 810ef3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 810ef42:	4770      	bx	lr

0810ef44 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 810ef44:	b480      	push	{r7}
 810ef46:	b083      	sub	sp, #12
 810ef48:	af00      	add	r7, sp, #0
 810ef4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 810ef4c:	bf00      	nop
 810ef4e:	370c      	adds	r7, #12
 810ef50:	46bd      	mov	sp, r7
 810ef52:	f85d 7b04 	ldr.w	r7, [sp], #4
 810ef56:	4770      	bx	lr

0810ef58 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 810ef58:	b480      	push	{r7}
 810ef5a:	b083      	sub	sp, #12
 810ef5c:	af00      	add	r7, sp, #0
 810ef5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 810ef60:	bf00      	nop
 810ef62:	370c      	adds	r7, #12
 810ef64:	46bd      	mov	sp, r7
 810ef66:	f85d 7b04 	ldr.w	r7, [sp], #4
 810ef6a:	4770      	bx	lr

0810ef6c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 810ef6c:	b580      	push	{r7, lr}
 810ef6e:	b082      	sub	sp, #8
 810ef70:	af00      	add	r7, sp, #0
 810ef72:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 810ef74:	687b      	ldr	r3, [r7, #4]
 810ef76:	2b00      	cmp	r3, #0
 810ef78:	d101      	bne.n	810ef7e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 810ef7a:	2301      	movs	r3, #1
 810ef7c:	e042      	b.n	810f004 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 810ef7e:	687b      	ldr	r3, [r7, #4]
 810ef80:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810ef84:	2b00      	cmp	r3, #0
 810ef86:	d106      	bne.n	810ef96 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 810ef88:	687b      	ldr	r3, [r7, #4]
 810ef8a:	2200      	movs	r2, #0
 810ef8c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 810ef90:	6878      	ldr	r0, [r7, #4]
 810ef92:	f7f3 fbc3 	bl	810271c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 810ef96:	687b      	ldr	r3, [r7, #4]
 810ef98:	2224      	movs	r2, #36	; 0x24
 810ef9a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 810ef9e:	687b      	ldr	r3, [r7, #4]
 810efa0:	681b      	ldr	r3, [r3, #0]
 810efa2:	681a      	ldr	r2, [r3, #0]
 810efa4:	687b      	ldr	r3, [r7, #4]
 810efa6:	681b      	ldr	r3, [r3, #0]
 810efa8:	f022 0201 	bic.w	r2, r2, #1
 810efac:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 810efae:	6878      	ldr	r0, [r7, #4]
 810efb0:	f000 fbcc 	bl	810f74c <UART_SetConfig>
 810efb4:	4603      	mov	r3, r0
 810efb6:	2b01      	cmp	r3, #1
 810efb8:	d101      	bne.n	810efbe <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 810efba:	2301      	movs	r3, #1
 810efbc:	e022      	b.n	810f004 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 810efbe:	687b      	ldr	r3, [r7, #4]
 810efc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810efc2:	2b00      	cmp	r3, #0
 810efc4:	d002      	beq.n	810efcc <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 810efc6:	6878      	ldr	r0, [r7, #4]
 810efc8:	f001 f920 	bl	811020c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 810efcc:	687b      	ldr	r3, [r7, #4]
 810efce:	681b      	ldr	r3, [r3, #0]
 810efd0:	685a      	ldr	r2, [r3, #4]
 810efd2:	687b      	ldr	r3, [r7, #4]
 810efd4:	681b      	ldr	r3, [r3, #0]
 810efd6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 810efda:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 810efdc:	687b      	ldr	r3, [r7, #4]
 810efde:	681b      	ldr	r3, [r3, #0]
 810efe0:	689a      	ldr	r2, [r3, #8]
 810efe2:	687b      	ldr	r3, [r7, #4]
 810efe4:	681b      	ldr	r3, [r3, #0]
 810efe6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 810efea:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 810efec:	687b      	ldr	r3, [r7, #4]
 810efee:	681b      	ldr	r3, [r3, #0]
 810eff0:	681a      	ldr	r2, [r3, #0]
 810eff2:	687b      	ldr	r3, [r7, #4]
 810eff4:	681b      	ldr	r3, [r3, #0]
 810eff6:	f042 0201 	orr.w	r2, r2, #1
 810effa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 810effc:	6878      	ldr	r0, [r7, #4]
 810effe:	f001 f9a7 	bl	8110350 <UART_CheckIdleState>
 810f002:	4603      	mov	r3, r0
}
 810f004:	4618      	mov	r0, r3
 810f006:	3708      	adds	r7, #8
 810f008:	46bd      	mov	sp, r7
 810f00a:	bd80      	pop	{r7, pc}

0810f00c <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 810f00c:	b580      	push	{r7, lr}
 810f00e:	b084      	sub	sp, #16
 810f010:	af00      	add	r7, sp, #0
 810f012:	60f8      	str	r0, [r7, #12]
 810f014:	60b9      	str	r1, [r7, #8]
 810f016:	4613      	mov	r3, r2
 810f018:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 810f01a:	68fb      	ldr	r3, [r7, #12]
 810f01c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810f020:	2b20      	cmp	r3, #32
 810f022:	d168      	bne.n	810f0f6 <HAL_UART_Transmit_DMA+0xea>
  {
    if ((pData == NULL) || (Size == 0U))
 810f024:	68bb      	ldr	r3, [r7, #8]
 810f026:	2b00      	cmp	r3, #0
 810f028:	d002      	beq.n	810f030 <HAL_UART_Transmit_DMA+0x24>
 810f02a:	88fb      	ldrh	r3, [r7, #6]
 810f02c:	2b00      	cmp	r3, #0
 810f02e:	d101      	bne.n	810f034 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 810f030:	2301      	movs	r3, #1
 810f032:	e061      	b.n	810f0f8 <HAL_UART_Transmit_DMA+0xec>
    }

    __HAL_LOCK(huart);
 810f034:	68fb      	ldr	r3, [r7, #12]
 810f036:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 810f03a:	2b01      	cmp	r3, #1
 810f03c:	d101      	bne.n	810f042 <HAL_UART_Transmit_DMA+0x36>
 810f03e:	2302      	movs	r3, #2
 810f040:	e05a      	b.n	810f0f8 <HAL_UART_Transmit_DMA+0xec>
 810f042:	68fb      	ldr	r3, [r7, #12]
 810f044:	2201      	movs	r2, #1
 810f046:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 810f04a:	68fb      	ldr	r3, [r7, #12]
 810f04c:	68ba      	ldr	r2, [r7, #8]
 810f04e:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 810f050:	68fb      	ldr	r3, [r7, #12]
 810f052:	88fa      	ldrh	r2, [r7, #6]
 810f054:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 810f058:	68fb      	ldr	r3, [r7, #12]
 810f05a:	88fa      	ldrh	r2, [r7, #6]
 810f05c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 810f060:	68fb      	ldr	r3, [r7, #12]
 810f062:	2200      	movs	r2, #0
 810f064:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 810f068:	68fb      	ldr	r3, [r7, #12]
 810f06a:	2221      	movs	r2, #33	; 0x21
 810f06c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmatx != NULL)
 810f070:	68fb      	ldr	r3, [r7, #12]
 810f072:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810f074:	2b00      	cmp	r3, #0
 810f076:	d02c      	beq.n	810f0d2 <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 810f078:	68fb      	ldr	r3, [r7, #12]
 810f07a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810f07c:	4a20      	ldr	r2, [pc, #128]	; (810f100 <HAL_UART_Transmit_DMA+0xf4>)
 810f07e:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 810f080:	68fb      	ldr	r3, [r7, #12]
 810f082:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810f084:	4a1f      	ldr	r2, [pc, #124]	; (810f104 <HAL_UART_Transmit_DMA+0xf8>)
 810f086:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 810f088:	68fb      	ldr	r3, [r7, #12]
 810f08a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810f08c:	4a1e      	ldr	r2, [pc, #120]	; (810f108 <HAL_UART_Transmit_DMA+0xfc>)
 810f08e:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 810f090:	68fb      	ldr	r3, [r7, #12]
 810f092:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810f094:	2200      	movs	r2, #0
 810f096:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 810f098:	68fb      	ldr	r3, [r7, #12]
 810f09a:	6f98      	ldr	r0, [r3, #120]	; 0x78
 810f09c:	68fb      	ldr	r3, [r7, #12]
 810f09e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810f0a0:	4619      	mov	r1, r3
 810f0a2:	68fb      	ldr	r3, [r7, #12]
 810f0a4:	681b      	ldr	r3, [r3, #0]
 810f0a6:	3328      	adds	r3, #40	; 0x28
 810f0a8:	461a      	mov	r2, r3
 810f0aa:	88fb      	ldrh	r3, [r7, #6]
 810f0ac:	f7f5 fc88 	bl	81049c0 <HAL_DMA_Start_IT>
 810f0b0:	4603      	mov	r3, r0
 810f0b2:	2b00      	cmp	r3, #0
 810f0b4:	d00d      	beq.n	810f0d2 <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 810f0b6:	68fb      	ldr	r3, [r7, #12]
 810f0b8:	2210      	movs	r2, #16
 810f0ba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 810f0be:	68fb      	ldr	r3, [r7, #12]
 810f0c0:	2200      	movs	r2, #0
 810f0c2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 810f0c6:	68fb      	ldr	r3, [r7, #12]
 810f0c8:	2220      	movs	r2, #32
 810f0ca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        return HAL_ERROR;
 810f0ce:	2301      	movs	r3, #1
 810f0d0:	e012      	b.n	810f0f8 <HAL_UART_Transmit_DMA+0xec>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 810f0d2:	68fb      	ldr	r3, [r7, #12]
 810f0d4:	681b      	ldr	r3, [r3, #0]
 810f0d6:	2240      	movs	r2, #64	; 0x40
 810f0d8:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 810f0da:	68fb      	ldr	r3, [r7, #12]
 810f0dc:	2200      	movs	r2, #0
 810f0de:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 810f0e2:	68fb      	ldr	r3, [r7, #12]
 810f0e4:	681b      	ldr	r3, [r3, #0]
 810f0e6:	689a      	ldr	r2, [r3, #8]
 810f0e8:	68fb      	ldr	r3, [r7, #12]
 810f0ea:	681b      	ldr	r3, [r3, #0]
 810f0ec:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 810f0f0:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 810f0f2:	2300      	movs	r3, #0
 810f0f4:	e000      	b.n	810f0f8 <HAL_UART_Transmit_DMA+0xec>
  }
  else
  {
    return HAL_BUSY;
 810f0f6:	2302      	movs	r3, #2
  }
}
 810f0f8:	4618      	mov	r0, r3
 810f0fa:	3710      	adds	r7, #16
 810f0fc:	46bd      	mov	sp, r7
 810f0fe:	bd80      	pop	{r7, pc}
 810f100:	08110665 	.word	0x08110665
 810f104:	081106b5 	.word	0x081106b5
 810f108:	0811079f 	.word	0x0811079f

0810f10c <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 810f10c:	b580      	push	{r7, lr}
 810f10e:	b084      	sub	sp, #16
 810f110:	af00      	add	r7, sp, #0
 810f112:	60f8      	str	r0, [r7, #12]
 810f114:	60b9      	str	r1, [r7, #8]
 810f116:	4613      	mov	r3, r2
 810f118:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 810f11a:	68fb      	ldr	r3, [r7, #12]
 810f11c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 810f120:	2b20      	cmp	r3, #32
 810f122:	d131      	bne.n	810f188 <HAL_UART_Receive_DMA+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 810f124:	68bb      	ldr	r3, [r7, #8]
 810f126:	2b00      	cmp	r3, #0
 810f128:	d002      	beq.n	810f130 <HAL_UART_Receive_DMA+0x24>
 810f12a:	88fb      	ldrh	r3, [r7, #6]
 810f12c:	2b00      	cmp	r3, #0
 810f12e:	d101      	bne.n	810f134 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 810f130:	2301      	movs	r3, #1
 810f132:	e02a      	b.n	810f18a <HAL_UART_Receive_DMA+0x7e>
    }

    __HAL_LOCK(huart);
 810f134:	68fb      	ldr	r3, [r7, #12]
 810f136:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 810f13a:	2b01      	cmp	r3, #1
 810f13c:	d101      	bne.n	810f142 <HAL_UART_Receive_DMA+0x36>
 810f13e:	2302      	movs	r3, #2
 810f140:	e023      	b.n	810f18a <HAL_UART_Receive_DMA+0x7e>
 810f142:	68fb      	ldr	r3, [r7, #12]
 810f144:	2201      	movs	r2, #1
 810f146:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 810f14a:	68fb      	ldr	r3, [r7, #12]
 810f14c:	2200      	movs	r2, #0
 810f14e:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 810f150:	68fb      	ldr	r3, [r7, #12]
 810f152:	681b      	ldr	r3, [r3, #0]
 810f154:	4a0f      	ldr	r2, [pc, #60]	; (810f194 <HAL_UART_Receive_DMA+0x88>)
 810f156:	4293      	cmp	r3, r2
 810f158:	d00e      	beq.n	810f178 <HAL_UART_Receive_DMA+0x6c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 810f15a:	68fb      	ldr	r3, [r7, #12]
 810f15c:	681b      	ldr	r3, [r3, #0]
 810f15e:	685b      	ldr	r3, [r3, #4]
 810f160:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 810f164:	2b00      	cmp	r3, #0
 810f166:	d007      	beq.n	810f178 <HAL_UART_Receive_DMA+0x6c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 810f168:	68fb      	ldr	r3, [r7, #12]
 810f16a:	681b      	ldr	r3, [r3, #0]
 810f16c:	681a      	ldr	r2, [r3, #0]
 810f16e:	68fb      	ldr	r3, [r7, #12]
 810f170:	681b      	ldr	r3, [r3, #0]
 810f172:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 810f176:	601a      	str	r2, [r3, #0]
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 810f178:	88fb      	ldrh	r3, [r7, #6]
 810f17a:	461a      	mov	r2, r3
 810f17c:	68b9      	ldr	r1, [r7, #8]
 810f17e:	68f8      	ldr	r0, [r7, #12]
 810f180:	f001 f9b2 	bl	81104e8 <UART_Start_Receive_DMA>
 810f184:	4603      	mov	r3, r0
 810f186:	e000      	b.n	810f18a <HAL_UART_Receive_DMA+0x7e>
  }
  else
  {
    return HAL_BUSY;
 810f188:	2302      	movs	r3, #2
  }
}
 810f18a:	4618      	mov	r0, r3
 810f18c:	3710      	adds	r7, #16
 810f18e:	46bd      	mov	sp, r7
 810f190:	bd80      	pop	{r7, pc}
 810f192:	bf00      	nop
 810f194:	58000c00 	.word	0x58000c00

0810f198 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 810f198:	b580      	push	{r7, lr}
 810f19a:	b088      	sub	sp, #32
 810f19c:	af00      	add	r7, sp, #0
 810f19e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 810f1a0:	687b      	ldr	r3, [r7, #4]
 810f1a2:	681b      	ldr	r3, [r3, #0]
 810f1a4:	69db      	ldr	r3, [r3, #28]
 810f1a6:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 810f1a8:	687b      	ldr	r3, [r7, #4]
 810f1aa:	681b      	ldr	r3, [r3, #0]
 810f1ac:	681b      	ldr	r3, [r3, #0]
 810f1ae:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 810f1b0:	687b      	ldr	r3, [r7, #4]
 810f1b2:	681b      	ldr	r3, [r3, #0]
 810f1b4:	689b      	ldr	r3, [r3, #8]
 810f1b6:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 810f1b8:	69fa      	ldr	r2, [r7, #28]
 810f1ba:	f640 030f 	movw	r3, #2063	; 0x80f
 810f1be:	4013      	ands	r3, r2
 810f1c0:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 810f1c2:	693b      	ldr	r3, [r7, #16]
 810f1c4:	2b00      	cmp	r3, #0
 810f1c6:	d118      	bne.n	810f1fa <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 810f1c8:	69fb      	ldr	r3, [r7, #28]
 810f1ca:	f003 0320 	and.w	r3, r3, #32
 810f1ce:	2b00      	cmp	r3, #0
 810f1d0:	d013      	beq.n	810f1fa <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 810f1d2:	69bb      	ldr	r3, [r7, #24]
 810f1d4:	f003 0320 	and.w	r3, r3, #32
 810f1d8:	2b00      	cmp	r3, #0
 810f1da:	d104      	bne.n	810f1e6 <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 810f1dc:	697b      	ldr	r3, [r7, #20]
 810f1de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 810f1e2:	2b00      	cmp	r3, #0
 810f1e4:	d009      	beq.n	810f1fa <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 810f1e6:	687b      	ldr	r3, [r7, #4]
 810f1e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 810f1ea:	2b00      	cmp	r3, #0
 810f1ec:	f000 8282 	beq.w	810f6f4 <HAL_UART_IRQHandler+0x55c>
      {
        huart->RxISR(huart);
 810f1f0:	687b      	ldr	r3, [r7, #4]
 810f1f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 810f1f4:	6878      	ldr	r0, [r7, #4]
 810f1f6:	4798      	blx	r3
      }
      return;
 810f1f8:	e27c      	b.n	810f6f4 <HAL_UART_IRQHandler+0x55c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 810f1fa:	693b      	ldr	r3, [r7, #16]
 810f1fc:	2b00      	cmp	r3, #0
 810f1fe:	f000 80ef 	beq.w	810f3e0 <HAL_UART_IRQHandler+0x248>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 810f202:	697a      	ldr	r2, [r7, #20]
 810f204:	4b73      	ldr	r3, [pc, #460]	; (810f3d4 <HAL_UART_IRQHandler+0x23c>)
 810f206:	4013      	ands	r3, r2
 810f208:	2b00      	cmp	r3, #0
 810f20a:	d105      	bne.n	810f218 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 810f20c:	69ba      	ldr	r2, [r7, #24]
 810f20e:	4b72      	ldr	r3, [pc, #456]	; (810f3d8 <HAL_UART_IRQHandler+0x240>)
 810f210:	4013      	ands	r3, r2
 810f212:	2b00      	cmp	r3, #0
 810f214:	f000 80e4 	beq.w	810f3e0 <HAL_UART_IRQHandler+0x248>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 810f218:	69fb      	ldr	r3, [r7, #28]
 810f21a:	f003 0301 	and.w	r3, r3, #1
 810f21e:	2b00      	cmp	r3, #0
 810f220:	d010      	beq.n	810f244 <HAL_UART_IRQHandler+0xac>
 810f222:	69bb      	ldr	r3, [r7, #24]
 810f224:	f403 7380 	and.w	r3, r3, #256	; 0x100
 810f228:	2b00      	cmp	r3, #0
 810f22a:	d00b      	beq.n	810f244 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 810f22c:	687b      	ldr	r3, [r7, #4]
 810f22e:	681b      	ldr	r3, [r3, #0]
 810f230:	2201      	movs	r2, #1
 810f232:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 810f234:	687b      	ldr	r3, [r7, #4]
 810f236:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 810f23a:	f043 0201 	orr.w	r2, r3, #1
 810f23e:	687b      	ldr	r3, [r7, #4]
 810f240:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 810f244:	69fb      	ldr	r3, [r7, #28]
 810f246:	f003 0302 	and.w	r3, r3, #2
 810f24a:	2b00      	cmp	r3, #0
 810f24c:	d010      	beq.n	810f270 <HAL_UART_IRQHandler+0xd8>
 810f24e:	697b      	ldr	r3, [r7, #20]
 810f250:	f003 0301 	and.w	r3, r3, #1
 810f254:	2b00      	cmp	r3, #0
 810f256:	d00b      	beq.n	810f270 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 810f258:	687b      	ldr	r3, [r7, #4]
 810f25a:	681b      	ldr	r3, [r3, #0]
 810f25c:	2202      	movs	r2, #2
 810f25e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 810f260:	687b      	ldr	r3, [r7, #4]
 810f262:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 810f266:	f043 0204 	orr.w	r2, r3, #4
 810f26a:	687b      	ldr	r3, [r7, #4]
 810f26c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 810f270:	69fb      	ldr	r3, [r7, #28]
 810f272:	f003 0304 	and.w	r3, r3, #4
 810f276:	2b00      	cmp	r3, #0
 810f278:	d010      	beq.n	810f29c <HAL_UART_IRQHandler+0x104>
 810f27a:	697b      	ldr	r3, [r7, #20]
 810f27c:	f003 0301 	and.w	r3, r3, #1
 810f280:	2b00      	cmp	r3, #0
 810f282:	d00b      	beq.n	810f29c <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 810f284:	687b      	ldr	r3, [r7, #4]
 810f286:	681b      	ldr	r3, [r3, #0]
 810f288:	2204      	movs	r2, #4
 810f28a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 810f28c:	687b      	ldr	r3, [r7, #4]
 810f28e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 810f292:	f043 0202 	orr.w	r2, r3, #2
 810f296:	687b      	ldr	r3, [r7, #4]
 810f298:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 810f29c:	69fb      	ldr	r3, [r7, #28]
 810f29e:	f003 0308 	and.w	r3, r3, #8
 810f2a2:	2b00      	cmp	r3, #0
 810f2a4:	d015      	beq.n	810f2d2 <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 810f2a6:	69bb      	ldr	r3, [r7, #24]
 810f2a8:	f003 0320 	and.w	r3, r3, #32
 810f2ac:	2b00      	cmp	r3, #0
 810f2ae:	d104      	bne.n	810f2ba <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 810f2b0:	697a      	ldr	r2, [r7, #20]
 810f2b2:	4b48      	ldr	r3, [pc, #288]	; (810f3d4 <HAL_UART_IRQHandler+0x23c>)
 810f2b4:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 810f2b6:	2b00      	cmp	r3, #0
 810f2b8:	d00b      	beq.n	810f2d2 <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 810f2ba:	687b      	ldr	r3, [r7, #4]
 810f2bc:	681b      	ldr	r3, [r3, #0]
 810f2be:	2208      	movs	r2, #8
 810f2c0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 810f2c2:	687b      	ldr	r3, [r7, #4]
 810f2c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 810f2c8:	f043 0208 	orr.w	r2, r3, #8
 810f2cc:	687b      	ldr	r3, [r7, #4]
 810f2ce:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 810f2d2:	69fb      	ldr	r3, [r7, #28]
 810f2d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 810f2d8:	2b00      	cmp	r3, #0
 810f2da:	d011      	beq.n	810f300 <HAL_UART_IRQHandler+0x168>
 810f2dc:	69bb      	ldr	r3, [r7, #24]
 810f2de:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 810f2e2:	2b00      	cmp	r3, #0
 810f2e4:	d00c      	beq.n	810f300 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 810f2e6:	687b      	ldr	r3, [r7, #4]
 810f2e8:	681b      	ldr	r3, [r3, #0]
 810f2ea:	f44f 6200 	mov.w	r2, #2048	; 0x800
 810f2ee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 810f2f0:	687b      	ldr	r3, [r7, #4]
 810f2f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 810f2f6:	f043 0220 	orr.w	r2, r3, #32
 810f2fa:	687b      	ldr	r3, [r7, #4]
 810f2fc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 810f300:	687b      	ldr	r3, [r7, #4]
 810f302:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 810f306:	2b00      	cmp	r3, #0
 810f308:	f000 81f6 	beq.w	810f6f8 <HAL_UART_IRQHandler+0x560>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 810f30c:	69fb      	ldr	r3, [r7, #28]
 810f30e:	f003 0320 	and.w	r3, r3, #32
 810f312:	2b00      	cmp	r3, #0
 810f314:	d011      	beq.n	810f33a <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 810f316:	69bb      	ldr	r3, [r7, #24]
 810f318:	f003 0320 	and.w	r3, r3, #32
 810f31c:	2b00      	cmp	r3, #0
 810f31e:	d104      	bne.n	810f32a <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 810f320:	697b      	ldr	r3, [r7, #20]
 810f322:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 810f326:	2b00      	cmp	r3, #0
 810f328:	d007      	beq.n	810f33a <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 810f32a:	687b      	ldr	r3, [r7, #4]
 810f32c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 810f32e:	2b00      	cmp	r3, #0
 810f330:	d003      	beq.n	810f33a <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 810f332:	687b      	ldr	r3, [r7, #4]
 810f334:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 810f336:	6878      	ldr	r0, [r7, #4]
 810f338:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 810f33a:	687b      	ldr	r3, [r7, #4]
 810f33c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 810f340:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 810f342:	687b      	ldr	r3, [r7, #4]
 810f344:	681b      	ldr	r3, [r3, #0]
 810f346:	689b      	ldr	r3, [r3, #8]
 810f348:	f003 0340 	and.w	r3, r3, #64	; 0x40
 810f34c:	2b40      	cmp	r3, #64	; 0x40
 810f34e:	d004      	beq.n	810f35a <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 810f350:	68fb      	ldr	r3, [r7, #12]
 810f352:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 810f356:	2b00      	cmp	r3, #0
 810f358:	d031      	beq.n	810f3be <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 810f35a:	6878      	ldr	r0, [r7, #4]
 810f35c:	f001 f950 	bl	8110600 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 810f360:	687b      	ldr	r3, [r7, #4]
 810f362:	681b      	ldr	r3, [r3, #0]
 810f364:	689b      	ldr	r3, [r3, #8]
 810f366:	f003 0340 	and.w	r3, r3, #64	; 0x40
 810f36a:	2b40      	cmp	r3, #64	; 0x40
 810f36c:	d123      	bne.n	810f3b6 <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 810f36e:	687b      	ldr	r3, [r7, #4]
 810f370:	681b      	ldr	r3, [r3, #0]
 810f372:	689a      	ldr	r2, [r3, #8]
 810f374:	687b      	ldr	r3, [r7, #4]
 810f376:	681b      	ldr	r3, [r3, #0]
 810f378:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 810f37c:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 810f37e:	687b      	ldr	r3, [r7, #4]
 810f380:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810f382:	2b00      	cmp	r3, #0
 810f384:	d013      	beq.n	810f3ae <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 810f386:	687b      	ldr	r3, [r7, #4]
 810f388:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810f38a:	4a14      	ldr	r2, [pc, #80]	; (810f3dc <HAL_UART_IRQHandler+0x244>)
 810f38c:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 810f38e:	687b      	ldr	r3, [r7, #4]
 810f390:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810f392:	4618      	mov	r0, r3
 810f394:	f7f6 f89c 	bl	81054d0 <HAL_DMA_Abort_IT>
 810f398:	4603      	mov	r3, r0
 810f39a:	2b00      	cmp	r3, #0
 810f39c:	d017      	beq.n	810f3ce <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 810f39e:	687b      	ldr	r3, [r7, #4]
 810f3a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810f3a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810f3a4:	687a      	ldr	r2, [r7, #4]
 810f3a6:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 810f3a8:	4610      	mov	r0, r2
 810f3aa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 810f3ac:	e00f      	b.n	810f3ce <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 810f3ae:	6878      	ldr	r0, [r7, #4]
 810f3b0:	f7f2 fbc0 	bl	8101b34 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 810f3b4:	e00b      	b.n	810f3ce <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 810f3b6:	6878      	ldr	r0, [r7, #4]
 810f3b8:	f7f2 fbbc 	bl	8101b34 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 810f3bc:	e007      	b.n	810f3ce <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 810f3be:	6878      	ldr	r0, [r7, #4]
 810f3c0:	f7f2 fbb8 	bl	8101b34 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 810f3c4:	687b      	ldr	r3, [r7, #4]
 810f3c6:	2200      	movs	r2, #0
 810f3c8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 810f3cc:	e194      	b.n	810f6f8 <HAL_UART_IRQHandler+0x560>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 810f3ce:	bf00      	nop
    return;
 810f3d0:	e192      	b.n	810f6f8 <HAL_UART_IRQHandler+0x560>
 810f3d2:	bf00      	nop
 810f3d4:	10000001 	.word	0x10000001
 810f3d8:	04000120 	.word	0x04000120
 810f3dc:	0811081f 	.word	0x0811081f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 810f3e0:	687b      	ldr	r3, [r7, #4]
 810f3e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 810f3e4:	2b01      	cmp	r3, #1
 810f3e6:	f040 8111 	bne.w	810f60c <HAL_UART_IRQHandler+0x474>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 810f3ea:	69fb      	ldr	r3, [r7, #28]
 810f3ec:	f003 0310 	and.w	r3, r3, #16
 810f3f0:	2b00      	cmp	r3, #0
 810f3f2:	f000 810b 	beq.w	810f60c <HAL_UART_IRQHandler+0x474>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 810f3f6:	69bb      	ldr	r3, [r7, #24]
 810f3f8:	f003 0310 	and.w	r3, r3, #16
 810f3fc:	2b00      	cmp	r3, #0
 810f3fe:	f000 8105 	beq.w	810f60c <HAL_UART_IRQHandler+0x474>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 810f402:	687b      	ldr	r3, [r7, #4]
 810f404:	681b      	ldr	r3, [r3, #0]
 810f406:	2210      	movs	r2, #16
 810f408:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 810f40a:	687b      	ldr	r3, [r7, #4]
 810f40c:	681b      	ldr	r3, [r3, #0]
 810f40e:	689b      	ldr	r3, [r3, #8]
 810f410:	f003 0340 	and.w	r3, r3, #64	; 0x40
 810f414:	2b40      	cmp	r3, #64	; 0x40
 810f416:	f040 80bb 	bne.w	810f590 <HAL_UART_IRQHandler+0x3f8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 810f41a:	687b      	ldr	r3, [r7, #4]
 810f41c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810f41e:	681b      	ldr	r3, [r3, #0]
 810f420:	4a97      	ldr	r2, [pc, #604]	; (810f680 <HAL_UART_IRQHandler+0x4e8>)
 810f422:	4293      	cmp	r3, r2
 810f424:	d059      	beq.n	810f4da <HAL_UART_IRQHandler+0x342>
 810f426:	687b      	ldr	r3, [r7, #4]
 810f428:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810f42a:	681b      	ldr	r3, [r3, #0]
 810f42c:	4a95      	ldr	r2, [pc, #596]	; (810f684 <HAL_UART_IRQHandler+0x4ec>)
 810f42e:	4293      	cmp	r3, r2
 810f430:	d053      	beq.n	810f4da <HAL_UART_IRQHandler+0x342>
 810f432:	687b      	ldr	r3, [r7, #4]
 810f434:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810f436:	681b      	ldr	r3, [r3, #0]
 810f438:	4a93      	ldr	r2, [pc, #588]	; (810f688 <HAL_UART_IRQHandler+0x4f0>)
 810f43a:	4293      	cmp	r3, r2
 810f43c:	d04d      	beq.n	810f4da <HAL_UART_IRQHandler+0x342>
 810f43e:	687b      	ldr	r3, [r7, #4]
 810f440:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810f442:	681b      	ldr	r3, [r3, #0]
 810f444:	4a91      	ldr	r2, [pc, #580]	; (810f68c <HAL_UART_IRQHandler+0x4f4>)
 810f446:	4293      	cmp	r3, r2
 810f448:	d047      	beq.n	810f4da <HAL_UART_IRQHandler+0x342>
 810f44a:	687b      	ldr	r3, [r7, #4]
 810f44c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810f44e:	681b      	ldr	r3, [r3, #0]
 810f450:	4a8f      	ldr	r2, [pc, #572]	; (810f690 <HAL_UART_IRQHandler+0x4f8>)
 810f452:	4293      	cmp	r3, r2
 810f454:	d041      	beq.n	810f4da <HAL_UART_IRQHandler+0x342>
 810f456:	687b      	ldr	r3, [r7, #4]
 810f458:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810f45a:	681b      	ldr	r3, [r3, #0]
 810f45c:	4a8d      	ldr	r2, [pc, #564]	; (810f694 <HAL_UART_IRQHandler+0x4fc>)
 810f45e:	4293      	cmp	r3, r2
 810f460:	d03b      	beq.n	810f4da <HAL_UART_IRQHandler+0x342>
 810f462:	687b      	ldr	r3, [r7, #4]
 810f464:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810f466:	681b      	ldr	r3, [r3, #0]
 810f468:	4a8b      	ldr	r2, [pc, #556]	; (810f698 <HAL_UART_IRQHandler+0x500>)
 810f46a:	4293      	cmp	r3, r2
 810f46c:	d035      	beq.n	810f4da <HAL_UART_IRQHandler+0x342>
 810f46e:	687b      	ldr	r3, [r7, #4]
 810f470:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810f472:	681b      	ldr	r3, [r3, #0]
 810f474:	4a89      	ldr	r2, [pc, #548]	; (810f69c <HAL_UART_IRQHandler+0x504>)
 810f476:	4293      	cmp	r3, r2
 810f478:	d02f      	beq.n	810f4da <HAL_UART_IRQHandler+0x342>
 810f47a:	687b      	ldr	r3, [r7, #4]
 810f47c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810f47e:	681b      	ldr	r3, [r3, #0]
 810f480:	4a87      	ldr	r2, [pc, #540]	; (810f6a0 <HAL_UART_IRQHandler+0x508>)
 810f482:	4293      	cmp	r3, r2
 810f484:	d029      	beq.n	810f4da <HAL_UART_IRQHandler+0x342>
 810f486:	687b      	ldr	r3, [r7, #4]
 810f488:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810f48a:	681b      	ldr	r3, [r3, #0]
 810f48c:	4a85      	ldr	r2, [pc, #532]	; (810f6a4 <HAL_UART_IRQHandler+0x50c>)
 810f48e:	4293      	cmp	r3, r2
 810f490:	d023      	beq.n	810f4da <HAL_UART_IRQHandler+0x342>
 810f492:	687b      	ldr	r3, [r7, #4]
 810f494:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810f496:	681b      	ldr	r3, [r3, #0]
 810f498:	4a83      	ldr	r2, [pc, #524]	; (810f6a8 <HAL_UART_IRQHandler+0x510>)
 810f49a:	4293      	cmp	r3, r2
 810f49c:	d01d      	beq.n	810f4da <HAL_UART_IRQHandler+0x342>
 810f49e:	687b      	ldr	r3, [r7, #4]
 810f4a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810f4a2:	681b      	ldr	r3, [r3, #0]
 810f4a4:	4a81      	ldr	r2, [pc, #516]	; (810f6ac <HAL_UART_IRQHandler+0x514>)
 810f4a6:	4293      	cmp	r3, r2
 810f4a8:	d017      	beq.n	810f4da <HAL_UART_IRQHandler+0x342>
 810f4aa:	687b      	ldr	r3, [r7, #4]
 810f4ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810f4ae:	681b      	ldr	r3, [r3, #0]
 810f4b0:	4a7f      	ldr	r2, [pc, #508]	; (810f6b0 <HAL_UART_IRQHandler+0x518>)
 810f4b2:	4293      	cmp	r3, r2
 810f4b4:	d011      	beq.n	810f4da <HAL_UART_IRQHandler+0x342>
 810f4b6:	687b      	ldr	r3, [r7, #4]
 810f4b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810f4ba:	681b      	ldr	r3, [r3, #0]
 810f4bc:	4a7d      	ldr	r2, [pc, #500]	; (810f6b4 <HAL_UART_IRQHandler+0x51c>)
 810f4be:	4293      	cmp	r3, r2
 810f4c0:	d00b      	beq.n	810f4da <HAL_UART_IRQHandler+0x342>
 810f4c2:	687b      	ldr	r3, [r7, #4]
 810f4c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810f4c6:	681b      	ldr	r3, [r3, #0]
 810f4c8:	4a7b      	ldr	r2, [pc, #492]	; (810f6b8 <HAL_UART_IRQHandler+0x520>)
 810f4ca:	4293      	cmp	r3, r2
 810f4cc:	d005      	beq.n	810f4da <HAL_UART_IRQHandler+0x342>
 810f4ce:	687b      	ldr	r3, [r7, #4]
 810f4d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810f4d2:	681b      	ldr	r3, [r3, #0]
 810f4d4:	4a79      	ldr	r2, [pc, #484]	; (810f6bc <HAL_UART_IRQHandler+0x524>)
 810f4d6:	4293      	cmp	r3, r2
 810f4d8:	d105      	bne.n	810f4e6 <HAL_UART_IRQHandler+0x34e>
 810f4da:	687b      	ldr	r3, [r7, #4]
 810f4dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810f4de:	681b      	ldr	r3, [r3, #0]
 810f4e0:	685b      	ldr	r3, [r3, #4]
 810f4e2:	b29b      	uxth	r3, r3
 810f4e4:	e004      	b.n	810f4f0 <HAL_UART_IRQHandler+0x358>
 810f4e6:	687b      	ldr	r3, [r7, #4]
 810f4e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810f4ea:	681b      	ldr	r3, [r3, #0]
 810f4ec:	685b      	ldr	r3, [r3, #4]
 810f4ee:	b29b      	uxth	r3, r3
 810f4f0:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 810f4f2:	893b      	ldrh	r3, [r7, #8]
 810f4f4:	2b00      	cmp	r3, #0
 810f4f6:	f000 8101 	beq.w	810f6fc <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 810f4fa:	687b      	ldr	r3, [r7, #4]
 810f4fc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 810f500:	893a      	ldrh	r2, [r7, #8]
 810f502:	429a      	cmp	r2, r3
 810f504:	f080 80fa 	bcs.w	810f6fc <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 810f508:	687b      	ldr	r3, [r7, #4]
 810f50a:	893a      	ldrh	r2, [r7, #8]
 810f50c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 810f510:	687b      	ldr	r3, [r7, #4]
 810f512:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810f514:	69db      	ldr	r3, [r3, #28]
 810f516:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810f51a:	d02b      	beq.n	810f574 <HAL_UART_IRQHandler+0x3dc>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 810f51c:	687b      	ldr	r3, [r7, #4]
 810f51e:	681b      	ldr	r3, [r3, #0]
 810f520:	681a      	ldr	r2, [r3, #0]
 810f522:	687b      	ldr	r3, [r7, #4]
 810f524:	681b      	ldr	r3, [r3, #0]
 810f526:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 810f52a:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 810f52c:	687b      	ldr	r3, [r7, #4]
 810f52e:	681b      	ldr	r3, [r3, #0]
 810f530:	689a      	ldr	r2, [r3, #8]
 810f532:	687b      	ldr	r3, [r7, #4]
 810f534:	681b      	ldr	r3, [r3, #0]
 810f536:	f022 0201 	bic.w	r2, r2, #1
 810f53a:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 810f53c:	687b      	ldr	r3, [r7, #4]
 810f53e:	681b      	ldr	r3, [r3, #0]
 810f540:	689a      	ldr	r2, [r3, #8]
 810f542:	687b      	ldr	r3, [r7, #4]
 810f544:	681b      	ldr	r3, [r3, #0]
 810f546:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 810f54a:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 810f54c:	687b      	ldr	r3, [r7, #4]
 810f54e:	2220      	movs	r2, #32
 810f550:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 810f554:	687b      	ldr	r3, [r7, #4]
 810f556:	2200      	movs	r2, #0
 810f558:	66da      	str	r2, [r3, #108]	; 0x6c

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 810f55a:	687b      	ldr	r3, [r7, #4]
 810f55c:	681b      	ldr	r3, [r3, #0]
 810f55e:	681a      	ldr	r2, [r3, #0]
 810f560:	687b      	ldr	r3, [r7, #4]
 810f562:	681b      	ldr	r3, [r3, #0]
 810f564:	f022 0210 	bic.w	r2, r2, #16
 810f568:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 810f56a:	687b      	ldr	r3, [r7, #4]
 810f56c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810f56e:	4618      	mov	r0, r3
 810f570:	f7f5 fc90 	bl	8104e94 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 810f574:	687b      	ldr	r3, [r7, #4]
 810f576:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 810f57a:	687b      	ldr	r3, [r7, #4]
 810f57c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 810f580:	b29b      	uxth	r3, r3
 810f582:	1ad3      	subs	r3, r2, r3
 810f584:	b29b      	uxth	r3, r3
 810f586:	4619      	mov	r1, r3
 810f588:	6878      	ldr	r0, [r7, #4]
 810f58a:	f000 f8d3 	bl	810f734 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 810f58e:	e0b5      	b.n	810f6fc <HAL_UART_IRQHandler+0x564>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 810f590:	687b      	ldr	r3, [r7, #4]
 810f592:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 810f596:	687b      	ldr	r3, [r7, #4]
 810f598:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 810f59c:	b29b      	uxth	r3, r3
 810f59e:	1ad3      	subs	r3, r2, r3
 810f5a0:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 810f5a2:	687b      	ldr	r3, [r7, #4]
 810f5a4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 810f5a8:	b29b      	uxth	r3, r3
 810f5aa:	2b00      	cmp	r3, #0
 810f5ac:	f000 80a8 	beq.w	810f700 <HAL_UART_IRQHandler+0x568>
          && (nb_rx_data > 0U))
 810f5b0:	897b      	ldrh	r3, [r7, #10]
 810f5b2:	2b00      	cmp	r3, #0
 810f5b4:	f000 80a4 	beq.w	810f700 <HAL_UART_IRQHandler+0x568>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 810f5b8:	687b      	ldr	r3, [r7, #4]
 810f5ba:	681b      	ldr	r3, [r3, #0]
 810f5bc:	681a      	ldr	r2, [r3, #0]
 810f5be:	687b      	ldr	r3, [r7, #4]
 810f5c0:	681b      	ldr	r3, [r3, #0]
 810f5c2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 810f5c6:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 810f5c8:	687b      	ldr	r3, [r7, #4]
 810f5ca:	681b      	ldr	r3, [r3, #0]
 810f5cc:	689b      	ldr	r3, [r3, #8]
 810f5ce:	687a      	ldr	r2, [r7, #4]
 810f5d0:	6812      	ldr	r2, [r2, #0]
 810f5d2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 810f5d6:	f023 0301 	bic.w	r3, r3, #1
 810f5da:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 810f5dc:	687b      	ldr	r3, [r7, #4]
 810f5de:	2220      	movs	r2, #32
 810f5e0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 810f5e4:	687b      	ldr	r3, [r7, #4]
 810f5e6:	2200      	movs	r2, #0
 810f5e8:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 810f5ea:	687b      	ldr	r3, [r7, #4]
 810f5ec:	2200      	movs	r2, #0
 810f5ee:	671a      	str	r2, [r3, #112]	; 0x70

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 810f5f0:	687b      	ldr	r3, [r7, #4]
 810f5f2:	681b      	ldr	r3, [r3, #0]
 810f5f4:	681a      	ldr	r2, [r3, #0]
 810f5f6:	687b      	ldr	r3, [r7, #4]
 810f5f8:	681b      	ldr	r3, [r3, #0]
 810f5fa:	f022 0210 	bic.w	r2, r2, #16
 810f5fe:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 810f600:	897b      	ldrh	r3, [r7, #10]
 810f602:	4619      	mov	r1, r3
 810f604:	6878      	ldr	r0, [r7, #4]
 810f606:	f000 f895 	bl	810f734 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 810f60a:	e079      	b.n	810f700 <HAL_UART_IRQHandler+0x568>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 810f60c:	69fb      	ldr	r3, [r7, #28]
 810f60e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 810f612:	2b00      	cmp	r3, #0
 810f614:	d00d      	beq.n	810f632 <HAL_UART_IRQHandler+0x49a>
 810f616:	697b      	ldr	r3, [r7, #20]
 810f618:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 810f61c:	2b00      	cmp	r3, #0
 810f61e:	d008      	beq.n	810f632 <HAL_UART_IRQHandler+0x49a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 810f620:	687b      	ldr	r3, [r7, #4]
 810f622:	681b      	ldr	r3, [r3, #0]
 810f624:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 810f628:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 810f62a:	6878      	ldr	r0, [r7, #4]
 810f62c:	f001 f927 	bl	811087e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 810f630:	e069      	b.n	810f706 <HAL_UART_IRQHandler+0x56e>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 810f632:	69fb      	ldr	r3, [r7, #28]
 810f634:	f003 0380 	and.w	r3, r3, #128	; 0x80
 810f638:	2b00      	cmp	r3, #0
 810f63a:	d012      	beq.n	810f662 <HAL_UART_IRQHandler+0x4ca>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 810f63c:	69bb      	ldr	r3, [r7, #24]
 810f63e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 810f642:	2b00      	cmp	r3, #0
 810f644:	d104      	bne.n	810f650 <HAL_UART_IRQHandler+0x4b8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 810f646:	697b      	ldr	r3, [r7, #20]
 810f648:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 810f64c:	2b00      	cmp	r3, #0
 810f64e:	d008      	beq.n	810f662 <HAL_UART_IRQHandler+0x4ca>
  {
    if (huart->TxISR != NULL)
 810f650:	687b      	ldr	r3, [r7, #4]
 810f652:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 810f654:	2b00      	cmp	r3, #0
 810f656:	d055      	beq.n	810f704 <HAL_UART_IRQHandler+0x56c>
    {
      huart->TxISR(huart);
 810f658:	687b      	ldr	r3, [r7, #4]
 810f65a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 810f65c:	6878      	ldr	r0, [r7, #4]
 810f65e:	4798      	blx	r3
    }
    return;
 810f660:	e050      	b.n	810f704 <HAL_UART_IRQHandler+0x56c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 810f662:	69fb      	ldr	r3, [r7, #28]
 810f664:	f003 0340 	and.w	r3, r3, #64	; 0x40
 810f668:	2b00      	cmp	r3, #0
 810f66a:	d029      	beq.n	810f6c0 <HAL_UART_IRQHandler+0x528>
 810f66c:	69bb      	ldr	r3, [r7, #24]
 810f66e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 810f672:	2b00      	cmp	r3, #0
 810f674:	d024      	beq.n	810f6c0 <HAL_UART_IRQHandler+0x528>
  {
    UART_EndTransmit_IT(huart);
 810f676:	6878      	ldr	r0, [r7, #4]
 810f678:	f001 f8e7 	bl	811084a <UART_EndTransmit_IT>
    return;
 810f67c:	e043      	b.n	810f706 <HAL_UART_IRQHandler+0x56e>
 810f67e:	bf00      	nop
 810f680:	40020010 	.word	0x40020010
 810f684:	40020028 	.word	0x40020028
 810f688:	40020040 	.word	0x40020040
 810f68c:	40020058 	.word	0x40020058
 810f690:	40020070 	.word	0x40020070
 810f694:	40020088 	.word	0x40020088
 810f698:	400200a0 	.word	0x400200a0
 810f69c:	400200b8 	.word	0x400200b8
 810f6a0:	40020410 	.word	0x40020410
 810f6a4:	40020428 	.word	0x40020428
 810f6a8:	40020440 	.word	0x40020440
 810f6ac:	40020458 	.word	0x40020458
 810f6b0:	40020470 	.word	0x40020470
 810f6b4:	40020488 	.word	0x40020488
 810f6b8:	400204a0 	.word	0x400204a0
 810f6bc:	400204b8 	.word	0x400204b8
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 810f6c0:	69fb      	ldr	r3, [r7, #28]
 810f6c2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 810f6c6:	2b00      	cmp	r3, #0
 810f6c8:	d008      	beq.n	810f6dc <HAL_UART_IRQHandler+0x544>
 810f6ca:	69bb      	ldr	r3, [r7, #24]
 810f6cc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 810f6d0:	2b00      	cmp	r3, #0
 810f6d2:	d003      	beq.n	810f6dc <HAL_UART_IRQHandler+0x544>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 810f6d4:	6878      	ldr	r0, [r7, #4]
 810f6d6:	f001 f8e6 	bl	81108a6 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 810f6da:	e014      	b.n	810f706 <HAL_UART_IRQHandler+0x56e>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 810f6dc:	69fb      	ldr	r3, [r7, #28]
 810f6de:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 810f6e2:	2b00      	cmp	r3, #0
 810f6e4:	d00f      	beq.n	810f706 <HAL_UART_IRQHandler+0x56e>
 810f6e6:	69bb      	ldr	r3, [r7, #24]
 810f6e8:	2b00      	cmp	r3, #0
 810f6ea:	da0c      	bge.n	810f706 <HAL_UART_IRQHandler+0x56e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 810f6ec:	6878      	ldr	r0, [r7, #4]
 810f6ee:	f001 f8d0 	bl	8110892 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 810f6f2:	e008      	b.n	810f706 <HAL_UART_IRQHandler+0x56e>
      return;
 810f6f4:	bf00      	nop
 810f6f6:	e006      	b.n	810f706 <HAL_UART_IRQHandler+0x56e>
    return;
 810f6f8:	bf00      	nop
 810f6fa:	e004      	b.n	810f706 <HAL_UART_IRQHandler+0x56e>
      return;
 810f6fc:	bf00      	nop
 810f6fe:	e002      	b.n	810f706 <HAL_UART_IRQHandler+0x56e>
      return;
 810f700:	bf00      	nop
 810f702:	e000      	b.n	810f706 <HAL_UART_IRQHandler+0x56e>
    return;
 810f704:	bf00      	nop
  }
}
 810f706:	3720      	adds	r7, #32
 810f708:	46bd      	mov	sp, r7
 810f70a:	bd80      	pop	{r7, pc}

0810f70c <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 810f70c:	b480      	push	{r7}
 810f70e:	b083      	sub	sp, #12
 810f710:	af00      	add	r7, sp, #0
 810f712:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 810f714:	bf00      	nop
 810f716:	370c      	adds	r7, #12
 810f718:	46bd      	mov	sp, r7
 810f71a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810f71e:	4770      	bx	lr

0810f720 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 810f720:	b480      	push	{r7}
 810f722:	b083      	sub	sp, #12
 810f724:	af00      	add	r7, sp, #0
 810f726:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 810f728:	bf00      	nop
 810f72a:	370c      	adds	r7, #12
 810f72c:	46bd      	mov	sp, r7
 810f72e:	f85d 7b04 	ldr.w	r7, [sp], #4
 810f732:	4770      	bx	lr

0810f734 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 810f734:	b480      	push	{r7}
 810f736:	b083      	sub	sp, #12
 810f738:	af00      	add	r7, sp, #0
 810f73a:	6078      	str	r0, [r7, #4]
 810f73c:	460b      	mov	r3, r1
 810f73e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 810f740:	bf00      	nop
 810f742:	370c      	adds	r7, #12
 810f744:	46bd      	mov	sp, r7
 810f746:	f85d 7b04 	ldr.w	r7, [sp], #4
 810f74a:	4770      	bx	lr

0810f74c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 810f74c:	b5b0      	push	{r4, r5, r7, lr}
 810f74e:	b08e      	sub	sp, #56	; 0x38
 810f750:	af00      	add	r7, sp, #0
 810f752:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 810f754:	2300      	movs	r3, #0
 810f756:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 810f75a:	687b      	ldr	r3, [r7, #4]
 810f75c:	689a      	ldr	r2, [r3, #8]
 810f75e:	687b      	ldr	r3, [r7, #4]
 810f760:	691b      	ldr	r3, [r3, #16]
 810f762:	431a      	orrs	r2, r3
 810f764:	687b      	ldr	r3, [r7, #4]
 810f766:	695b      	ldr	r3, [r3, #20]
 810f768:	431a      	orrs	r2, r3
 810f76a:	687b      	ldr	r3, [r7, #4]
 810f76c:	69db      	ldr	r3, [r3, #28]
 810f76e:	4313      	orrs	r3, r2
 810f770:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 810f772:	687b      	ldr	r3, [r7, #4]
 810f774:	681b      	ldr	r3, [r3, #0]
 810f776:	681a      	ldr	r2, [r3, #0]
 810f778:	4bc0      	ldr	r3, [pc, #768]	; (810fa7c <UART_SetConfig+0x330>)
 810f77a:	4013      	ands	r3, r2
 810f77c:	687a      	ldr	r2, [r7, #4]
 810f77e:	6812      	ldr	r2, [r2, #0]
 810f780:	6b79      	ldr	r1, [r7, #52]	; 0x34
 810f782:	430b      	orrs	r3, r1
 810f784:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 810f786:	687b      	ldr	r3, [r7, #4]
 810f788:	681b      	ldr	r3, [r3, #0]
 810f78a:	685b      	ldr	r3, [r3, #4]
 810f78c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 810f790:	687b      	ldr	r3, [r7, #4]
 810f792:	68da      	ldr	r2, [r3, #12]
 810f794:	687b      	ldr	r3, [r7, #4]
 810f796:	681b      	ldr	r3, [r3, #0]
 810f798:	430a      	orrs	r2, r1
 810f79a:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 810f79c:	687b      	ldr	r3, [r7, #4]
 810f79e:	699b      	ldr	r3, [r3, #24]
 810f7a0:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 810f7a2:	687b      	ldr	r3, [r7, #4]
 810f7a4:	681b      	ldr	r3, [r3, #0]
 810f7a6:	4ab6      	ldr	r2, [pc, #728]	; (810fa80 <UART_SetConfig+0x334>)
 810f7a8:	4293      	cmp	r3, r2
 810f7aa:	d004      	beq.n	810f7b6 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 810f7ac:	687b      	ldr	r3, [r7, #4]
 810f7ae:	6a1b      	ldr	r3, [r3, #32]
 810f7b0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 810f7b2:	4313      	orrs	r3, r2
 810f7b4:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 810f7b6:	687b      	ldr	r3, [r7, #4]
 810f7b8:	681b      	ldr	r3, [r3, #0]
 810f7ba:	689b      	ldr	r3, [r3, #8]
 810f7bc:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 810f7c0:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 810f7c4:	687a      	ldr	r2, [r7, #4]
 810f7c6:	6812      	ldr	r2, [r2, #0]
 810f7c8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 810f7ca:	430b      	orrs	r3, r1
 810f7cc:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 810f7ce:	687b      	ldr	r3, [r7, #4]
 810f7d0:	681b      	ldr	r3, [r3, #0]
 810f7d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810f7d4:	f023 010f 	bic.w	r1, r3, #15
 810f7d8:	687b      	ldr	r3, [r7, #4]
 810f7da:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 810f7dc:	687b      	ldr	r3, [r7, #4]
 810f7de:	681b      	ldr	r3, [r3, #0]
 810f7e0:	430a      	orrs	r2, r1
 810f7e2:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 810f7e4:	687b      	ldr	r3, [r7, #4]
 810f7e6:	681b      	ldr	r3, [r3, #0]
 810f7e8:	4aa6      	ldr	r2, [pc, #664]	; (810fa84 <UART_SetConfig+0x338>)
 810f7ea:	4293      	cmp	r3, r2
 810f7ec:	d176      	bne.n	810f8dc <UART_SetConfig+0x190>
 810f7ee:	4ba6      	ldr	r3, [pc, #664]	; (810fa88 <UART_SetConfig+0x33c>)
 810f7f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810f7f2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 810f7f6:	2b28      	cmp	r3, #40	; 0x28
 810f7f8:	d86c      	bhi.n	810f8d4 <UART_SetConfig+0x188>
 810f7fa:	a201      	add	r2, pc, #4	; (adr r2, 810f800 <UART_SetConfig+0xb4>)
 810f7fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810f800:	0810f8a5 	.word	0x0810f8a5
 810f804:	0810f8d5 	.word	0x0810f8d5
 810f808:	0810f8d5 	.word	0x0810f8d5
 810f80c:	0810f8d5 	.word	0x0810f8d5
 810f810:	0810f8d5 	.word	0x0810f8d5
 810f814:	0810f8d5 	.word	0x0810f8d5
 810f818:	0810f8d5 	.word	0x0810f8d5
 810f81c:	0810f8d5 	.word	0x0810f8d5
 810f820:	0810f8ad 	.word	0x0810f8ad
 810f824:	0810f8d5 	.word	0x0810f8d5
 810f828:	0810f8d5 	.word	0x0810f8d5
 810f82c:	0810f8d5 	.word	0x0810f8d5
 810f830:	0810f8d5 	.word	0x0810f8d5
 810f834:	0810f8d5 	.word	0x0810f8d5
 810f838:	0810f8d5 	.word	0x0810f8d5
 810f83c:	0810f8d5 	.word	0x0810f8d5
 810f840:	0810f8b5 	.word	0x0810f8b5
 810f844:	0810f8d5 	.word	0x0810f8d5
 810f848:	0810f8d5 	.word	0x0810f8d5
 810f84c:	0810f8d5 	.word	0x0810f8d5
 810f850:	0810f8d5 	.word	0x0810f8d5
 810f854:	0810f8d5 	.word	0x0810f8d5
 810f858:	0810f8d5 	.word	0x0810f8d5
 810f85c:	0810f8d5 	.word	0x0810f8d5
 810f860:	0810f8bd 	.word	0x0810f8bd
 810f864:	0810f8d5 	.word	0x0810f8d5
 810f868:	0810f8d5 	.word	0x0810f8d5
 810f86c:	0810f8d5 	.word	0x0810f8d5
 810f870:	0810f8d5 	.word	0x0810f8d5
 810f874:	0810f8d5 	.word	0x0810f8d5
 810f878:	0810f8d5 	.word	0x0810f8d5
 810f87c:	0810f8d5 	.word	0x0810f8d5
 810f880:	0810f8c5 	.word	0x0810f8c5
 810f884:	0810f8d5 	.word	0x0810f8d5
 810f888:	0810f8d5 	.word	0x0810f8d5
 810f88c:	0810f8d5 	.word	0x0810f8d5
 810f890:	0810f8d5 	.word	0x0810f8d5
 810f894:	0810f8d5 	.word	0x0810f8d5
 810f898:	0810f8d5 	.word	0x0810f8d5
 810f89c:	0810f8d5 	.word	0x0810f8d5
 810f8a0:	0810f8cd 	.word	0x0810f8cd
 810f8a4:	2301      	movs	r3, #1
 810f8a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810f8aa:	e220      	b.n	810fcee <UART_SetConfig+0x5a2>
 810f8ac:	2304      	movs	r3, #4
 810f8ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810f8b2:	e21c      	b.n	810fcee <UART_SetConfig+0x5a2>
 810f8b4:	2308      	movs	r3, #8
 810f8b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810f8ba:	e218      	b.n	810fcee <UART_SetConfig+0x5a2>
 810f8bc:	2310      	movs	r3, #16
 810f8be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810f8c2:	e214      	b.n	810fcee <UART_SetConfig+0x5a2>
 810f8c4:	2320      	movs	r3, #32
 810f8c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810f8ca:	e210      	b.n	810fcee <UART_SetConfig+0x5a2>
 810f8cc:	2340      	movs	r3, #64	; 0x40
 810f8ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810f8d2:	e20c      	b.n	810fcee <UART_SetConfig+0x5a2>
 810f8d4:	2380      	movs	r3, #128	; 0x80
 810f8d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810f8da:	e208      	b.n	810fcee <UART_SetConfig+0x5a2>
 810f8dc:	687b      	ldr	r3, [r7, #4]
 810f8de:	681b      	ldr	r3, [r3, #0]
 810f8e0:	4a6a      	ldr	r2, [pc, #424]	; (810fa8c <UART_SetConfig+0x340>)
 810f8e2:	4293      	cmp	r3, r2
 810f8e4:	d130      	bne.n	810f948 <UART_SetConfig+0x1fc>
 810f8e6:	4b68      	ldr	r3, [pc, #416]	; (810fa88 <UART_SetConfig+0x33c>)
 810f8e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810f8ea:	f003 0307 	and.w	r3, r3, #7
 810f8ee:	2b05      	cmp	r3, #5
 810f8f0:	d826      	bhi.n	810f940 <UART_SetConfig+0x1f4>
 810f8f2:	a201      	add	r2, pc, #4	; (adr r2, 810f8f8 <UART_SetConfig+0x1ac>)
 810f8f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810f8f8:	0810f911 	.word	0x0810f911
 810f8fc:	0810f919 	.word	0x0810f919
 810f900:	0810f921 	.word	0x0810f921
 810f904:	0810f929 	.word	0x0810f929
 810f908:	0810f931 	.word	0x0810f931
 810f90c:	0810f939 	.word	0x0810f939
 810f910:	2300      	movs	r3, #0
 810f912:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810f916:	e1ea      	b.n	810fcee <UART_SetConfig+0x5a2>
 810f918:	2304      	movs	r3, #4
 810f91a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810f91e:	e1e6      	b.n	810fcee <UART_SetConfig+0x5a2>
 810f920:	2308      	movs	r3, #8
 810f922:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810f926:	e1e2      	b.n	810fcee <UART_SetConfig+0x5a2>
 810f928:	2310      	movs	r3, #16
 810f92a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810f92e:	e1de      	b.n	810fcee <UART_SetConfig+0x5a2>
 810f930:	2320      	movs	r3, #32
 810f932:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810f936:	e1da      	b.n	810fcee <UART_SetConfig+0x5a2>
 810f938:	2340      	movs	r3, #64	; 0x40
 810f93a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810f93e:	e1d6      	b.n	810fcee <UART_SetConfig+0x5a2>
 810f940:	2380      	movs	r3, #128	; 0x80
 810f942:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810f946:	e1d2      	b.n	810fcee <UART_SetConfig+0x5a2>
 810f948:	687b      	ldr	r3, [r7, #4]
 810f94a:	681b      	ldr	r3, [r3, #0]
 810f94c:	4a50      	ldr	r2, [pc, #320]	; (810fa90 <UART_SetConfig+0x344>)
 810f94e:	4293      	cmp	r3, r2
 810f950:	d130      	bne.n	810f9b4 <UART_SetConfig+0x268>
 810f952:	4b4d      	ldr	r3, [pc, #308]	; (810fa88 <UART_SetConfig+0x33c>)
 810f954:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810f956:	f003 0307 	and.w	r3, r3, #7
 810f95a:	2b05      	cmp	r3, #5
 810f95c:	d826      	bhi.n	810f9ac <UART_SetConfig+0x260>
 810f95e:	a201      	add	r2, pc, #4	; (adr r2, 810f964 <UART_SetConfig+0x218>)
 810f960:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810f964:	0810f97d 	.word	0x0810f97d
 810f968:	0810f985 	.word	0x0810f985
 810f96c:	0810f98d 	.word	0x0810f98d
 810f970:	0810f995 	.word	0x0810f995
 810f974:	0810f99d 	.word	0x0810f99d
 810f978:	0810f9a5 	.word	0x0810f9a5
 810f97c:	2300      	movs	r3, #0
 810f97e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810f982:	e1b4      	b.n	810fcee <UART_SetConfig+0x5a2>
 810f984:	2304      	movs	r3, #4
 810f986:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810f98a:	e1b0      	b.n	810fcee <UART_SetConfig+0x5a2>
 810f98c:	2308      	movs	r3, #8
 810f98e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810f992:	e1ac      	b.n	810fcee <UART_SetConfig+0x5a2>
 810f994:	2310      	movs	r3, #16
 810f996:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810f99a:	e1a8      	b.n	810fcee <UART_SetConfig+0x5a2>
 810f99c:	2320      	movs	r3, #32
 810f99e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810f9a2:	e1a4      	b.n	810fcee <UART_SetConfig+0x5a2>
 810f9a4:	2340      	movs	r3, #64	; 0x40
 810f9a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810f9aa:	e1a0      	b.n	810fcee <UART_SetConfig+0x5a2>
 810f9ac:	2380      	movs	r3, #128	; 0x80
 810f9ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810f9b2:	e19c      	b.n	810fcee <UART_SetConfig+0x5a2>
 810f9b4:	687b      	ldr	r3, [r7, #4]
 810f9b6:	681b      	ldr	r3, [r3, #0]
 810f9b8:	4a36      	ldr	r2, [pc, #216]	; (810fa94 <UART_SetConfig+0x348>)
 810f9ba:	4293      	cmp	r3, r2
 810f9bc:	d130      	bne.n	810fa20 <UART_SetConfig+0x2d4>
 810f9be:	4b32      	ldr	r3, [pc, #200]	; (810fa88 <UART_SetConfig+0x33c>)
 810f9c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810f9c2:	f003 0307 	and.w	r3, r3, #7
 810f9c6:	2b05      	cmp	r3, #5
 810f9c8:	d826      	bhi.n	810fa18 <UART_SetConfig+0x2cc>
 810f9ca:	a201      	add	r2, pc, #4	; (adr r2, 810f9d0 <UART_SetConfig+0x284>)
 810f9cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810f9d0:	0810f9e9 	.word	0x0810f9e9
 810f9d4:	0810f9f1 	.word	0x0810f9f1
 810f9d8:	0810f9f9 	.word	0x0810f9f9
 810f9dc:	0810fa01 	.word	0x0810fa01
 810f9e0:	0810fa09 	.word	0x0810fa09
 810f9e4:	0810fa11 	.word	0x0810fa11
 810f9e8:	2300      	movs	r3, #0
 810f9ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810f9ee:	e17e      	b.n	810fcee <UART_SetConfig+0x5a2>
 810f9f0:	2304      	movs	r3, #4
 810f9f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810f9f6:	e17a      	b.n	810fcee <UART_SetConfig+0x5a2>
 810f9f8:	2308      	movs	r3, #8
 810f9fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810f9fe:	e176      	b.n	810fcee <UART_SetConfig+0x5a2>
 810fa00:	2310      	movs	r3, #16
 810fa02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810fa06:	e172      	b.n	810fcee <UART_SetConfig+0x5a2>
 810fa08:	2320      	movs	r3, #32
 810fa0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810fa0e:	e16e      	b.n	810fcee <UART_SetConfig+0x5a2>
 810fa10:	2340      	movs	r3, #64	; 0x40
 810fa12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810fa16:	e16a      	b.n	810fcee <UART_SetConfig+0x5a2>
 810fa18:	2380      	movs	r3, #128	; 0x80
 810fa1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810fa1e:	e166      	b.n	810fcee <UART_SetConfig+0x5a2>
 810fa20:	687b      	ldr	r3, [r7, #4]
 810fa22:	681b      	ldr	r3, [r3, #0]
 810fa24:	4a1c      	ldr	r2, [pc, #112]	; (810fa98 <UART_SetConfig+0x34c>)
 810fa26:	4293      	cmp	r3, r2
 810fa28:	d140      	bne.n	810faac <UART_SetConfig+0x360>
 810fa2a:	4b17      	ldr	r3, [pc, #92]	; (810fa88 <UART_SetConfig+0x33c>)
 810fa2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810fa2e:	f003 0307 	and.w	r3, r3, #7
 810fa32:	2b05      	cmp	r3, #5
 810fa34:	d836      	bhi.n	810faa4 <UART_SetConfig+0x358>
 810fa36:	a201      	add	r2, pc, #4	; (adr r2, 810fa3c <UART_SetConfig+0x2f0>)
 810fa38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810fa3c:	0810fa55 	.word	0x0810fa55
 810fa40:	0810fa5d 	.word	0x0810fa5d
 810fa44:	0810fa65 	.word	0x0810fa65
 810fa48:	0810fa6d 	.word	0x0810fa6d
 810fa4c:	0810fa75 	.word	0x0810fa75
 810fa50:	0810fa9d 	.word	0x0810fa9d
 810fa54:	2300      	movs	r3, #0
 810fa56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810fa5a:	e148      	b.n	810fcee <UART_SetConfig+0x5a2>
 810fa5c:	2304      	movs	r3, #4
 810fa5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810fa62:	e144      	b.n	810fcee <UART_SetConfig+0x5a2>
 810fa64:	2308      	movs	r3, #8
 810fa66:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810fa6a:	e140      	b.n	810fcee <UART_SetConfig+0x5a2>
 810fa6c:	2310      	movs	r3, #16
 810fa6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810fa72:	e13c      	b.n	810fcee <UART_SetConfig+0x5a2>
 810fa74:	2320      	movs	r3, #32
 810fa76:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810fa7a:	e138      	b.n	810fcee <UART_SetConfig+0x5a2>
 810fa7c:	cfff69f3 	.word	0xcfff69f3
 810fa80:	58000c00 	.word	0x58000c00
 810fa84:	40011000 	.word	0x40011000
 810fa88:	58024400 	.word	0x58024400
 810fa8c:	40004400 	.word	0x40004400
 810fa90:	40004800 	.word	0x40004800
 810fa94:	40004c00 	.word	0x40004c00
 810fa98:	40005000 	.word	0x40005000
 810fa9c:	2340      	movs	r3, #64	; 0x40
 810fa9e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810faa2:	e124      	b.n	810fcee <UART_SetConfig+0x5a2>
 810faa4:	2380      	movs	r3, #128	; 0x80
 810faa6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810faaa:	e120      	b.n	810fcee <UART_SetConfig+0x5a2>
 810faac:	687b      	ldr	r3, [r7, #4]
 810faae:	681b      	ldr	r3, [r3, #0]
 810fab0:	4acc      	ldr	r2, [pc, #816]	; (810fde4 <UART_SetConfig+0x698>)
 810fab2:	4293      	cmp	r3, r2
 810fab4:	d176      	bne.n	810fba4 <UART_SetConfig+0x458>
 810fab6:	4bcc      	ldr	r3, [pc, #816]	; (810fde8 <UART_SetConfig+0x69c>)
 810fab8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810faba:	f003 0338 	and.w	r3, r3, #56	; 0x38
 810fabe:	2b28      	cmp	r3, #40	; 0x28
 810fac0:	d86c      	bhi.n	810fb9c <UART_SetConfig+0x450>
 810fac2:	a201      	add	r2, pc, #4	; (adr r2, 810fac8 <UART_SetConfig+0x37c>)
 810fac4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810fac8:	0810fb6d 	.word	0x0810fb6d
 810facc:	0810fb9d 	.word	0x0810fb9d
 810fad0:	0810fb9d 	.word	0x0810fb9d
 810fad4:	0810fb9d 	.word	0x0810fb9d
 810fad8:	0810fb9d 	.word	0x0810fb9d
 810fadc:	0810fb9d 	.word	0x0810fb9d
 810fae0:	0810fb9d 	.word	0x0810fb9d
 810fae4:	0810fb9d 	.word	0x0810fb9d
 810fae8:	0810fb75 	.word	0x0810fb75
 810faec:	0810fb9d 	.word	0x0810fb9d
 810faf0:	0810fb9d 	.word	0x0810fb9d
 810faf4:	0810fb9d 	.word	0x0810fb9d
 810faf8:	0810fb9d 	.word	0x0810fb9d
 810fafc:	0810fb9d 	.word	0x0810fb9d
 810fb00:	0810fb9d 	.word	0x0810fb9d
 810fb04:	0810fb9d 	.word	0x0810fb9d
 810fb08:	0810fb7d 	.word	0x0810fb7d
 810fb0c:	0810fb9d 	.word	0x0810fb9d
 810fb10:	0810fb9d 	.word	0x0810fb9d
 810fb14:	0810fb9d 	.word	0x0810fb9d
 810fb18:	0810fb9d 	.word	0x0810fb9d
 810fb1c:	0810fb9d 	.word	0x0810fb9d
 810fb20:	0810fb9d 	.word	0x0810fb9d
 810fb24:	0810fb9d 	.word	0x0810fb9d
 810fb28:	0810fb85 	.word	0x0810fb85
 810fb2c:	0810fb9d 	.word	0x0810fb9d
 810fb30:	0810fb9d 	.word	0x0810fb9d
 810fb34:	0810fb9d 	.word	0x0810fb9d
 810fb38:	0810fb9d 	.word	0x0810fb9d
 810fb3c:	0810fb9d 	.word	0x0810fb9d
 810fb40:	0810fb9d 	.word	0x0810fb9d
 810fb44:	0810fb9d 	.word	0x0810fb9d
 810fb48:	0810fb8d 	.word	0x0810fb8d
 810fb4c:	0810fb9d 	.word	0x0810fb9d
 810fb50:	0810fb9d 	.word	0x0810fb9d
 810fb54:	0810fb9d 	.word	0x0810fb9d
 810fb58:	0810fb9d 	.word	0x0810fb9d
 810fb5c:	0810fb9d 	.word	0x0810fb9d
 810fb60:	0810fb9d 	.word	0x0810fb9d
 810fb64:	0810fb9d 	.word	0x0810fb9d
 810fb68:	0810fb95 	.word	0x0810fb95
 810fb6c:	2301      	movs	r3, #1
 810fb6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810fb72:	e0bc      	b.n	810fcee <UART_SetConfig+0x5a2>
 810fb74:	2304      	movs	r3, #4
 810fb76:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810fb7a:	e0b8      	b.n	810fcee <UART_SetConfig+0x5a2>
 810fb7c:	2308      	movs	r3, #8
 810fb7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810fb82:	e0b4      	b.n	810fcee <UART_SetConfig+0x5a2>
 810fb84:	2310      	movs	r3, #16
 810fb86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810fb8a:	e0b0      	b.n	810fcee <UART_SetConfig+0x5a2>
 810fb8c:	2320      	movs	r3, #32
 810fb8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810fb92:	e0ac      	b.n	810fcee <UART_SetConfig+0x5a2>
 810fb94:	2340      	movs	r3, #64	; 0x40
 810fb96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810fb9a:	e0a8      	b.n	810fcee <UART_SetConfig+0x5a2>
 810fb9c:	2380      	movs	r3, #128	; 0x80
 810fb9e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810fba2:	e0a4      	b.n	810fcee <UART_SetConfig+0x5a2>
 810fba4:	687b      	ldr	r3, [r7, #4]
 810fba6:	681b      	ldr	r3, [r3, #0]
 810fba8:	4a90      	ldr	r2, [pc, #576]	; (810fdec <UART_SetConfig+0x6a0>)
 810fbaa:	4293      	cmp	r3, r2
 810fbac:	d130      	bne.n	810fc10 <UART_SetConfig+0x4c4>
 810fbae:	4b8e      	ldr	r3, [pc, #568]	; (810fde8 <UART_SetConfig+0x69c>)
 810fbb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810fbb2:	f003 0307 	and.w	r3, r3, #7
 810fbb6:	2b05      	cmp	r3, #5
 810fbb8:	d826      	bhi.n	810fc08 <UART_SetConfig+0x4bc>
 810fbba:	a201      	add	r2, pc, #4	; (adr r2, 810fbc0 <UART_SetConfig+0x474>)
 810fbbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810fbc0:	0810fbd9 	.word	0x0810fbd9
 810fbc4:	0810fbe1 	.word	0x0810fbe1
 810fbc8:	0810fbe9 	.word	0x0810fbe9
 810fbcc:	0810fbf1 	.word	0x0810fbf1
 810fbd0:	0810fbf9 	.word	0x0810fbf9
 810fbd4:	0810fc01 	.word	0x0810fc01
 810fbd8:	2300      	movs	r3, #0
 810fbda:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810fbde:	e086      	b.n	810fcee <UART_SetConfig+0x5a2>
 810fbe0:	2304      	movs	r3, #4
 810fbe2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810fbe6:	e082      	b.n	810fcee <UART_SetConfig+0x5a2>
 810fbe8:	2308      	movs	r3, #8
 810fbea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810fbee:	e07e      	b.n	810fcee <UART_SetConfig+0x5a2>
 810fbf0:	2310      	movs	r3, #16
 810fbf2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810fbf6:	e07a      	b.n	810fcee <UART_SetConfig+0x5a2>
 810fbf8:	2320      	movs	r3, #32
 810fbfa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810fbfe:	e076      	b.n	810fcee <UART_SetConfig+0x5a2>
 810fc00:	2340      	movs	r3, #64	; 0x40
 810fc02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810fc06:	e072      	b.n	810fcee <UART_SetConfig+0x5a2>
 810fc08:	2380      	movs	r3, #128	; 0x80
 810fc0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810fc0e:	e06e      	b.n	810fcee <UART_SetConfig+0x5a2>
 810fc10:	687b      	ldr	r3, [r7, #4]
 810fc12:	681b      	ldr	r3, [r3, #0]
 810fc14:	4a76      	ldr	r2, [pc, #472]	; (810fdf0 <UART_SetConfig+0x6a4>)
 810fc16:	4293      	cmp	r3, r2
 810fc18:	d130      	bne.n	810fc7c <UART_SetConfig+0x530>
 810fc1a:	4b73      	ldr	r3, [pc, #460]	; (810fde8 <UART_SetConfig+0x69c>)
 810fc1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810fc1e:	f003 0307 	and.w	r3, r3, #7
 810fc22:	2b05      	cmp	r3, #5
 810fc24:	d826      	bhi.n	810fc74 <UART_SetConfig+0x528>
 810fc26:	a201      	add	r2, pc, #4	; (adr r2, 810fc2c <UART_SetConfig+0x4e0>)
 810fc28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810fc2c:	0810fc45 	.word	0x0810fc45
 810fc30:	0810fc4d 	.word	0x0810fc4d
 810fc34:	0810fc55 	.word	0x0810fc55
 810fc38:	0810fc5d 	.word	0x0810fc5d
 810fc3c:	0810fc65 	.word	0x0810fc65
 810fc40:	0810fc6d 	.word	0x0810fc6d
 810fc44:	2300      	movs	r3, #0
 810fc46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810fc4a:	e050      	b.n	810fcee <UART_SetConfig+0x5a2>
 810fc4c:	2304      	movs	r3, #4
 810fc4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810fc52:	e04c      	b.n	810fcee <UART_SetConfig+0x5a2>
 810fc54:	2308      	movs	r3, #8
 810fc56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810fc5a:	e048      	b.n	810fcee <UART_SetConfig+0x5a2>
 810fc5c:	2310      	movs	r3, #16
 810fc5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810fc62:	e044      	b.n	810fcee <UART_SetConfig+0x5a2>
 810fc64:	2320      	movs	r3, #32
 810fc66:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810fc6a:	e040      	b.n	810fcee <UART_SetConfig+0x5a2>
 810fc6c:	2340      	movs	r3, #64	; 0x40
 810fc6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810fc72:	e03c      	b.n	810fcee <UART_SetConfig+0x5a2>
 810fc74:	2380      	movs	r3, #128	; 0x80
 810fc76:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810fc7a:	e038      	b.n	810fcee <UART_SetConfig+0x5a2>
 810fc7c:	687b      	ldr	r3, [r7, #4]
 810fc7e:	681b      	ldr	r3, [r3, #0]
 810fc80:	4a5c      	ldr	r2, [pc, #368]	; (810fdf4 <UART_SetConfig+0x6a8>)
 810fc82:	4293      	cmp	r3, r2
 810fc84:	d130      	bne.n	810fce8 <UART_SetConfig+0x59c>
 810fc86:	4b58      	ldr	r3, [pc, #352]	; (810fde8 <UART_SetConfig+0x69c>)
 810fc88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810fc8a:	f003 0307 	and.w	r3, r3, #7
 810fc8e:	2b05      	cmp	r3, #5
 810fc90:	d826      	bhi.n	810fce0 <UART_SetConfig+0x594>
 810fc92:	a201      	add	r2, pc, #4	; (adr r2, 810fc98 <UART_SetConfig+0x54c>)
 810fc94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810fc98:	0810fcb1 	.word	0x0810fcb1
 810fc9c:	0810fcb9 	.word	0x0810fcb9
 810fca0:	0810fcc1 	.word	0x0810fcc1
 810fca4:	0810fcc9 	.word	0x0810fcc9
 810fca8:	0810fcd1 	.word	0x0810fcd1
 810fcac:	0810fcd9 	.word	0x0810fcd9
 810fcb0:	2302      	movs	r3, #2
 810fcb2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810fcb6:	e01a      	b.n	810fcee <UART_SetConfig+0x5a2>
 810fcb8:	2304      	movs	r3, #4
 810fcba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810fcbe:	e016      	b.n	810fcee <UART_SetConfig+0x5a2>
 810fcc0:	2308      	movs	r3, #8
 810fcc2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810fcc6:	e012      	b.n	810fcee <UART_SetConfig+0x5a2>
 810fcc8:	2310      	movs	r3, #16
 810fcca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810fcce:	e00e      	b.n	810fcee <UART_SetConfig+0x5a2>
 810fcd0:	2320      	movs	r3, #32
 810fcd2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810fcd6:	e00a      	b.n	810fcee <UART_SetConfig+0x5a2>
 810fcd8:	2340      	movs	r3, #64	; 0x40
 810fcda:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810fcde:	e006      	b.n	810fcee <UART_SetConfig+0x5a2>
 810fce0:	2380      	movs	r3, #128	; 0x80
 810fce2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810fce6:	e002      	b.n	810fcee <UART_SetConfig+0x5a2>
 810fce8:	2380      	movs	r3, #128	; 0x80
 810fcea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 810fcee:	687b      	ldr	r3, [r7, #4]
 810fcf0:	681b      	ldr	r3, [r3, #0]
 810fcf2:	4a40      	ldr	r2, [pc, #256]	; (810fdf4 <UART_SetConfig+0x6a8>)
 810fcf4:	4293      	cmp	r3, r2
 810fcf6:	f040 80ef 	bne.w	810fed8 <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 810fcfa:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 810fcfe:	2b20      	cmp	r3, #32
 810fd00:	dc46      	bgt.n	810fd90 <UART_SetConfig+0x644>
 810fd02:	2b02      	cmp	r3, #2
 810fd04:	f2c0 8081 	blt.w	810fe0a <UART_SetConfig+0x6be>
 810fd08:	3b02      	subs	r3, #2
 810fd0a:	2b1e      	cmp	r3, #30
 810fd0c:	d87d      	bhi.n	810fe0a <UART_SetConfig+0x6be>
 810fd0e:	a201      	add	r2, pc, #4	; (adr r2, 810fd14 <UART_SetConfig+0x5c8>)
 810fd10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810fd14:	0810fd97 	.word	0x0810fd97
 810fd18:	0810fe0b 	.word	0x0810fe0b
 810fd1c:	0810fd9f 	.word	0x0810fd9f
 810fd20:	0810fe0b 	.word	0x0810fe0b
 810fd24:	0810fe0b 	.word	0x0810fe0b
 810fd28:	0810fe0b 	.word	0x0810fe0b
 810fd2c:	0810fdaf 	.word	0x0810fdaf
 810fd30:	0810fe0b 	.word	0x0810fe0b
 810fd34:	0810fe0b 	.word	0x0810fe0b
 810fd38:	0810fe0b 	.word	0x0810fe0b
 810fd3c:	0810fe0b 	.word	0x0810fe0b
 810fd40:	0810fe0b 	.word	0x0810fe0b
 810fd44:	0810fe0b 	.word	0x0810fe0b
 810fd48:	0810fe0b 	.word	0x0810fe0b
 810fd4c:	0810fdbf 	.word	0x0810fdbf
 810fd50:	0810fe0b 	.word	0x0810fe0b
 810fd54:	0810fe0b 	.word	0x0810fe0b
 810fd58:	0810fe0b 	.word	0x0810fe0b
 810fd5c:	0810fe0b 	.word	0x0810fe0b
 810fd60:	0810fe0b 	.word	0x0810fe0b
 810fd64:	0810fe0b 	.word	0x0810fe0b
 810fd68:	0810fe0b 	.word	0x0810fe0b
 810fd6c:	0810fe0b 	.word	0x0810fe0b
 810fd70:	0810fe0b 	.word	0x0810fe0b
 810fd74:	0810fe0b 	.word	0x0810fe0b
 810fd78:	0810fe0b 	.word	0x0810fe0b
 810fd7c:	0810fe0b 	.word	0x0810fe0b
 810fd80:	0810fe0b 	.word	0x0810fe0b
 810fd84:	0810fe0b 	.word	0x0810fe0b
 810fd88:	0810fe0b 	.word	0x0810fe0b
 810fd8c:	0810fdfd 	.word	0x0810fdfd
 810fd90:	2b40      	cmp	r3, #64	; 0x40
 810fd92:	d036      	beq.n	810fe02 <UART_SetConfig+0x6b6>
 810fd94:	e039      	b.n	810fe0a <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 810fd96:	f7fb f929 	bl	810afec <HAL_RCCEx_GetD3PCLK1Freq>
 810fd9a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 810fd9c:	e03b      	b.n	810fe16 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810fd9e:	f107 0314 	add.w	r3, r7, #20
 810fda2:	4618      	mov	r0, r3
 810fda4:	f7fb f938 	bl	810b018 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 810fda8:	69bb      	ldr	r3, [r7, #24]
 810fdaa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 810fdac:	e033      	b.n	810fe16 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810fdae:	f107 0308 	add.w	r3, r7, #8
 810fdb2:	4618      	mov	r0, r3
 810fdb4:	f7fb fa84 	bl	810b2c0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 810fdb8:	68fb      	ldr	r3, [r7, #12]
 810fdba:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 810fdbc:	e02b      	b.n	810fe16 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810fdbe:	4b0a      	ldr	r3, [pc, #40]	; (810fde8 <UART_SetConfig+0x69c>)
 810fdc0:	681b      	ldr	r3, [r3, #0]
 810fdc2:	f003 0320 	and.w	r3, r3, #32
 810fdc6:	2b00      	cmp	r3, #0
 810fdc8:	d009      	beq.n	810fdde <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 810fdca:	4b07      	ldr	r3, [pc, #28]	; (810fde8 <UART_SetConfig+0x69c>)
 810fdcc:	681b      	ldr	r3, [r3, #0]
 810fdce:	08db      	lsrs	r3, r3, #3
 810fdd0:	f003 0303 	and.w	r3, r3, #3
 810fdd4:	4a08      	ldr	r2, [pc, #32]	; (810fdf8 <UART_SetConfig+0x6ac>)
 810fdd6:	fa22 f303 	lsr.w	r3, r2, r3
 810fdda:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 810fddc:	e01b      	b.n	810fe16 <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 810fdde:	4b06      	ldr	r3, [pc, #24]	; (810fdf8 <UART_SetConfig+0x6ac>)
 810fde0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 810fde2:	e018      	b.n	810fe16 <UART_SetConfig+0x6ca>
 810fde4:	40011400 	.word	0x40011400
 810fde8:	58024400 	.word	0x58024400
 810fdec:	40007800 	.word	0x40007800
 810fdf0:	40007c00 	.word	0x40007c00
 810fdf4:	58000c00 	.word	0x58000c00
 810fdf8:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 810fdfc:	4bc4      	ldr	r3, [pc, #784]	; (8110110 <UART_SetConfig+0x9c4>)
 810fdfe:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 810fe00:	e009      	b.n	810fe16 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 810fe02:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 810fe06:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 810fe08:	e005      	b.n	810fe16 <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 810fe0a:	2300      	movs	r3, #0
 810fe0c:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 810fe0e:	2301      	movs	r3, #1
 810fe10:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 810fe14:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 810fe16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810fe18:	2b00      	cmp	r3, #0
 810fe1a:	f000 81da 	beq.w	81101d2 <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 810fe1e:	687b      	ldr	r3, [r7, #4]
 810fe20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810fe22:	4abc      	ldr	r2, [pc, #752]	; (8110114 <UART_SetConfig+0x9c8>)
 810fe24:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 810fe28:	461a      	mov	r2, r3
 810fe2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810fe2c:	fbb3 f3f2 	udiv	r3, r3, r2
 810fe30:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 810fe32:	687b      	ldr	r3, [r7, #4]
 810fe34:	685a      	ldr	r2, [r3, #4]
 810fe36:	4613      	mov	r3, r2
 810fe38:	005b      	lsls	r3, r3, #1
 810fe3a:	4413      	add	r3, r2
 810fe3c:	6a3a      	ldr	r2, [r7, #32]
 810fe3e:	429a      	cmp	r2, r3
 810fe40:	d305      	bcc.n	810fe4e <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 810fe42:	687b      	ldr	r3, [r7, #4]
 810fe44:	685b      	ldr	r3, [r3, #4]
 810fe46:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 810fe48:	6a3a      	ldr	r2, [r7, #32]
 810fe4a:	429a      	cmp	r2, r3
 810fe4c:	d903      	bls.n	810fe56 <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 810fe4e:	2301      	movs	r3, #1
 810fe50:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 810fe54:	e1bd      	b.n	81101d2 <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 810fe56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810fe58:	4618      	mov	r0, r3
 810fe5a:	f04f 0100 	mov.w	r1, #0
 810fe5e:	687b      	ldr	r3, [r7, #4]
 810fe60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810fe62:	4aac      	ldr	r2, [pc, #688]	; (8110114 <UART_SetConfig+0x9c8>)
 810fe64:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 810fe68:	b29a      	uxth	r2, r3
 810fe6a:	f04f 0300 	mov.w	r3, #0
 810fe6e:	f7f0 ff23 	bl	8100cb8 <__aeabi_uldivmod>
 810fe72:	4602      	mov	r2, r0
 810fe74:	460b      	mov	r3, r1
 810fe76:	4610      	mov	r0, r2
 810fe78:	4619      	mov	r1, r3
 810fe7a:	f04f 0200 	mov.w	r2, #0
 810fe7e:	f04f 0300 	mov.w	r3, #0
 810fe82:	020b      	lsls	r3, r1, #8
 810fe84:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 810fe88:	0202      	lsls	r2, r0, #8
 810fe8a:	6879      	ldr	r1, [r7, #4]
 810fe8c:	6849      	ldr	r1, [r1, #4]
 810fe8e:	0849      	lsrs	r1, r1, #1
 810fe90:	4608      	mov	r0, r1
 810fe92:	f04f 0100 	mov.w	r1, #0
 810fe96:	1814      	adds	r4, r2, r0
 810fe98:	eb43 0501 	adc.w	r5, r3, r1
 810fe9c:	687b      	ldr	r3, [r7, #4]
 810fe9e:	685b      	ldr	r3, [r3, #4]
 810fea0:	461a      	mov	r2, r3
 810fea2:	f04f 0300 	mov.w	r3, #0
 810fea6:	4620      	mov	r0, r4
 810fea8:	4629      	mov	r1, r5
 810feaa:	f7f0 ff05 	bl	8100cb8 <__aeabi_uldivmod>
 810feae:	4602      	mov	r2, r0
 810feb0:	460b      	mov	r3, r1
 810feb2:	4613      	mov	r3, r2
 810feb4:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 810feb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810feb8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 810febc:	d308      	bcc.n	810fed0 <UART_SetConfig+0x784>
 810febe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810fec0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 810fec4:	d204      	bcs.n	810fed0 <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 810fec6:	687b      	ldr	r3, [r7, #4]
 810fec8:	681b      	ldr	r3, [r3, #0]
 810feca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 810fecc:	60da      	str	r2, [r3, #12]
 810fece:	e180      	b.n	81101d2 <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 810fed0:	2301      	movs	r3, #1
 810fed2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 810fed6:	e17c      	b.n	81101d2 <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 810fed8:	687b      	ldr	r3, [r7, #4]
 810feda:	69db      	ldr	r3, [r3, #28]
 810fedc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 810fee0:	f040 80bf 	bne.w	8110062 <UART_SetConfig+0x916>
  {
    switch (clocksource)
 810fee4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 810fee8:	2b20      	cmp	r3, #32
 810feea:	dc49      	bgt.n	810ff80 <UART_SetConfig+0x834>
 810feec:	2b00      	cmp	r3, #0
 810feee:	db7c      	blt.n	810ffea <UART_SetConfig+0x89e>
 810fef0:	2b20      	cmp	r3, #32
 810fef2:	d87a      	bhi.n	810ffea <UART_SetConfig+0x89e>
 810fef4:	a201      	add	r2, pc, #4	; (adr r2, 810fefc <UART_SetConfig+0x7b0>)
 810fef6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810fefa:	bf00      	nop
 810fefc:	0810ff87 	.word	0x0810ff87
 810ff00:	0810ff8f 	.word	0x0810ff8f
 810ff04:	0810ffeb 	.word	0x0810ffeb
 810ff08:	0810ffeb 	.word	0x0810ffeb
 810ff0c:	0810ff97 	.word	0x0810ff97
 810ff10:	0810ffeb 	.word	0x0810ffeb
 810ff14:	0810ffeb 	.word	0x0810ffeb
 810ff18:	0810ffeb 	.word	0x0810ffeb
 810ff1c:	0810ffa7 	.word	0x0810ffa7
 810ff20:	0810ffeb 	.word	0x0810ffeb
 810ff24:	0810ffeb 	.word	0x0810ffeb
 810ff28:	0810ffeb 	.word	0x0810ffeb
 810ff2c:	0810ffeb 	.word	0x0810ffeb
 810ff30:	0810ffeb 	.word	0x0810ffeb
 810ff34:	0810ffeb 	.word	0x0810ffeb
 810ff38:	0810ffeb 	.word	0x0810ffeb
 810ff3c:	0810ffb7 	.word	0x0810ffb7
 810ff40:	0810ffeb 	.word	0x0810ffeb
 810ff44:	0810ffeb 	.word	0x0810ffeb
 810ff48:	0810ffeb 	.word	0x0810ffeb
 810ff4c:	0810ffeb 	.word	0x0810ffeb
 810ff50:	0810ffeb 	.word	0x0810ffeb
 810ff54:	0810ffeb 	.word	0x0810ffeb
 810ff58:	0810ffeb 	.word	0x0810ffeb
 810ff5c:	0810ffeb 	.word	0x0810ffeb
 810ff60:	0810ffeb 	.word	0x0810ffeb
 810ff64:	0810ffeb 	.word	0x0810ffeb
 810ff68:	0810ffeb 	.word	0x0810ffeb
 810ff6c:	0810ffeb 	.word	0x0810ffeb
 810ff70:	0810ffeb 	.word	0x0810ffeb
 810ff74:	0810ffeb 	.word	0x0810ffeb
 810ff78:	0810ffeb 	.word	0x0810ffeb
 810ff7c:	0810ffdd 	.word	0x0810ffdd
 810ff80:	2b40      	cmp	r3, #64	; 0x40
 810ff82:	d02e      	beq.n	810ffe2 <UART_SetConfig+0x896>
 810ff84:	e031      	b.n	810ffea <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 810ff86:	f7f9 fbb1 	bl	81096ec <HAL_RCC_GetPCLK1Freq>
 810ff8a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 810ff8c:	e033      	b.n	810fff6 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 810ff8e:	f7f9 fbc3 	bl	8109718 <HAL_RCC_GetPCLK2Freq>
 810ff92:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 810ff94:	e02f      	b.n	810fff6 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810ff96:	f107 0314 	add.w	r3, r7, #20
 810ff9a:	4618      	mov	r0, r3
 810ff9c:	f7fb f83c 	bl	810b018 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 810ffa0:	69bb      	ldr	r3, [r7, #24]
 810ffa2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 810ffa4:	e027      	b.n	810fff6 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810ffa6:	f107 0308 	add.w	r3, r7, #8
 810ffaa:	4618      	mov	r0, r3
 810ffac:	f7fb f988 	bl	810b2c0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 810ffb0:	68fb      	ldr	r3, [r7, #12]
 810ffb2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 810ffb4:	e01f      	b.n	810fff6 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810ffb6:	4b58      	ldr	r3, [pc, #352]	; (8110118 <UART_SetConfig+0x9cc>)
 810ffb8:	681b      	ldr	r3, [r3, #0]
 810ffba:	f003 0320 	and.w	r3, r3, #32
 810ffbe:	2b00      	cmp	r3, #0
 810ffc0:	d009      	beq.n	810ffd6 <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 810ffc2:	4b55      	ldr	r3, [pc, #340]	; (8110118 <UART_SetConfig+0x9cc>)
 810ffc4:	681b      	ldr	r3, [r3, #0]
 810ffc6:	08db      	lsrs	r3, r3, #3
 810ffc8:	f003 0303 	and.w	r3, r3, #3
 810ffcc:	4a53      	ldr	r2, [pc, #332]	; (811011c <UART_SetConfig+0x9d0>)
 810ffce:	fa22 f303 	lsr.w	r3, r2, r3
 810ffd2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 810ffd4:	e00f      	b.n	810fff6 <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 810ffd6:	4b51      	ldr	r3, [pc, #324]	; (811011c <UART_SetConfig+0x9d0>)
 810ffd8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 810ffda:	e00c      	b.n	810fff6 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 810ffdc:	4b4c      	ldr	r3, [pc, #304]	; (8110110 <UART_SetConfig+0x9c4>)
 810ffde:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 810ffe0:	e009      	b.n	810fff6 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 810ffe2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 810ffe6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 810ffe8:	e005      	b.n	810fff6 <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 810ffea:	2300      	movs	r3, #0
 810ffec:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 810ffee:	2301      	movs	r3, #1
 810fff0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 810fff4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 810fff6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810fff8:	2b00      	cmp	r3, #0
 810fffa:	f000 80ea 	beq.w	81101d2 <UART_SetConfig+0xa86>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 810fffe:	687b      	ldr	r3, [r7, #4]
 8110000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8110002:	4a44      	ldr	r2, [pc, #272]	; (8110114 <UART_SetConfig+0x9c8>)
 8110004:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8110008:	461a      	mov	r2, r3
 811000a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 811000c:	fbb3 f3f2 	udiv	r3, r3, r2
 8110010:	005a      	lsls	r2, r3, #1
 8110012:	687b      	ldr	r3, [r7, #4]
 8110014:	685b      	ldr	r3, [r3, #4]
 8110016:	085b      	lsrs	r3, r3, #1
 8110018:	441a      	add	r2, r3
 811001a:	687b      	ldr	r3, [r7, #4]
 811001c:	685b      	ldr	r3, [r3, #4]
 811001e:	fbb2 f3f3 	udiv	r3, r2, r3
 8110022:	b29b      	uxth	r3, r3
 8110024:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8110026:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8110028:	2b0f      	cmp	r3, #15
 811002a:	d916      	bls.n	811005a <UART_SetConfig+0x90e>
 811002c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 811002e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8110032:	d212      	bcs.n	811005a <UART_SetConfig+0x90e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8110034:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8110036:	b29b      	uxth	r3, r3
 8110038:	f023 030f 	bic.w	r3, r3, #15
 811003c:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 811003e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8110040:	085b      	lsrs	r3, r3, #1
 8110042:	b29b      	uxth	r3, r3
 8110044:	f003 0307 	and.w	r3, r3, #7
 8110048:	b29a      	uxth	r2, r3
 811004a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 811004c:	4313      	orrs	r3, r2
 811004e:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 8110050:	687b      	ldr	r3, [r7, #4]
 8110052:	681b      	ldr	r3, [r3, #0]
 8110054:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8110056:	60da      	str	r2, [r3, #12]
 8110058:	e0bb      	b.n	81101d2 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 811005a:	2301      	movs	r3, #1
 811005c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8110060:	e0b7      	b.n	81101d2 <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 8110062:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8110066:	2b20      	cmp	r3, #32
 8110068:	dc4a      	bgt.n	8110100 <UART_SetConfig+0x9b4>
 811006a:	2b00      	cmp	r3, #0
 811006c:	f2c0 8086 	blt.w	811017c <UART_SetConfig+0xa30>
 8110070:	2b20      	cmp	r3, #32
 8110072:	f200 8083 	bhi.w	811017c <UART_SetConfig+0xa30>
 8110076:	a201      	add	r2, pc, #4	; (adr r2, 811007c <UART_SetConfig+0x930>)
 8110078:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 811007c:	08110107 	.word	0x08110107
 8110080:	08110121 	.word	0x08110121
 8110084:	0811017d 	.word	0x0811017d
 8110088:	0811017d 	.word	0x0811017d
 811008c:	08110129 	.word	0x08110129
 8110090:	0811017d 	.word	0x0811017d
 8110094:	0811017d 	.word	0x0811017d
 8110098:	0811017d 	.word	0x0811017d
 811009c:	08110139 	.word	0x08110139
 81100a0:	0811017d 	.word	0x0811017d
 81100a4:	0811017d 	.word	0x0811017d
 81100a8:	0811017d 	.word	0x0811017d
 81100ac:	0811017d 	.word	0x0811017d
 81100b0:	0811017d 	.word	0x0811017d
 81100b4:	0811017d 	.word	0x0811017d
 81100b8:	0811017d 	.word	0x0811017d
 81100bc:	08110149 	.word	0x08110149
 81100c0:	0811017d 	.word	0x0811017d
 81100c4:	0811017d 	.word	0x0811017d
 81100c8:	0811017d 	.word	0x0811017d
 81100cc:	0811017d 	.word	0x0811017d
 81100d0:	0811017d 	.word	0x0811017d
 81100d4:	0811017d 	.word	0x0811017d
 81100d8:	0811017d 	.word	0x0811017d
 81100dc:	0811017d 	.word	0x0811017d
 81100e0:	0811017d 	.word	0x0811017d
 81100e4:	0811017d 	.word	0x0811017d
 81100e8:	0811017d 	.word	0x0811017d
 81100ec:	0811017d 	.word	0x0811017d
 81100f0:	0811017d 	.word	0x0811017d
 81100f4:	0811017d 	.word	0x0811017d
 81100f8:	0811017d 	.word	0x0811017d
 81100fc:	0811016f 	.word	0x0811016f
 8110100:	2b40      	cmp	r3, #64	; 0x40
 8110102:	d037      	beq.n	8110174 <UART_SetConfig+0xa28>
 8110104:	e03a      	b.n	811017c <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8110106:	f7f9 faf1 	bl	81096ec <HAL_RCC_GetPCLK1Freq>
 811010a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 811010c:	e03c      	b.n	8110188 <UART_SetConfig+0xa3c>
 811010e:	bf00      	nop
 8110110:	003d0900 	.word	0x003d0900
 8110114:	08119b14 	.word	0x08119b14
 8110118:	58024400 	.word	0x58024400
 811011c:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8110120:	f7f9 fafa 	bl	8109718 <HAL_RCC_GetPCLK2Freq>
 8110124:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8110126:	e02f      	b.n	8110188 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8110128:	f107 0314 	add.w	r3, r7, #20
 811012c:	4618      	mov	r0, r3
 811012e:	f7fa ff73 	bl	810b018 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8110132:	69bb      	ldr	r3, [r7, #24]
 8110134:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8110136:	e027      	b.n	8110188 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8110138:	f107 0308 	add.w	r3, r7, #8
 811013c:	4618      	mov	r0, r3
 811013e:	f7fb f8bf 	bl	810b2c0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8110142:	68fb      	ldr	r3, [r7, #12]
 8110144:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8110146:	e01f      	b.n	8110188 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8110148:	4b2c      	ldr	r3, [pc, #176]	; (81101fc <UART_SetConfig+0xab0>)
 811014a:	681b      	ldr	r3, [r3, #0]
 811014c:	f003 0320 	and.w	r3, r3, #32
 8110150:	2b00      	cmp	r3, #0
 8110152:	d009      	beq.n	8110168 <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8110154:	4b29      	ldr	r3, [pc, #164]	; (81101fc <UART_SetConfig+0xab0>)
 8110156:	681b      	ldr	r3, [r3, #0]
 8110158:	08db      	lsrs	r3, r3, #3
 811015a:	f003 0303 	and.w	r3, r3, #3
 811015e:	4a28      	ldr	r2, [pc, #160]	; (8110200 <UART_SetConfig+0xab4>)
 8110160:	fa22 f303 	lsr.w	r3, r2, r3
 8110164:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8110166:	e00f      	b.n	8110188 <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 8110168:	4b25      	ldr	r3, [pc, #148]	; (8110200 <UART_SetConfig+0xab4>)
 811016a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 811016c:	e00c      	b.n	8110188 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 811016e:	4b25      	ldr	r3, [pc, #148]	; (8110204 <UART_SetConfig+0xab8>)
 8110170:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8110172:	e009      	b.n	8110188 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8110174:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8110178:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 811017a:	e005      	b.n	8110188 <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 811017c:	2300      	movs	r3, #0
 811017e:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8110180:	2301      	movs	r3, #1
 8110182:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8110186:	bf00      	nop
    }

    if (pclk != 0U)
 8110188:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 811018a:	2b00      	cmp	r3, #0
 811018c:	d021      	beq.n	81101d2 <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 811018e:	687b      	ldr	r3, [r7, #4]
 8110190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8110192:	4a1d      	ldr	r2, [pc, #116]	; (8110208 <UART_SetConfig+0xabc>)
 8110194:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8110198:	461a      	mov	r2, r3
 811019a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 811019c:	fbb3 f2f2 	udiv	r2, r3, r2
 81101a0:	687b      	ldr	r3, [r7, #4]
 81101a2:	685b      	ldr	r3, [r3, #4]
 81101a4:	085b      	lsrs	r3, r3, #1
 81101a6:	441a      	add	r2, r3
 81101a8:	687b      	ldr	r3, [r7, #4]
 81101aa:	685b      	ldr	r3, [r3, #4]
 81101ac:	fbb2 f3f3 	udiv	r3, r2, r3
 81101b0:	b29b      	uxth	r3, r3
 81101b2:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 81101b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81101b6:	2b0f      	cmp	r3, #15
 81101b8:	d908      	bls.n	81101cc <UART_SetConfig+0xa80>
 81101ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81101bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 81101c0:	d204      	bcs.n	81101cc <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = usartdiv;
 81101c2:	687b      	ldr	r3, [r7, #4]
 81101c4:	681b      	ldr	r3, [r3, #0]
 81101c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 81101c8:	60da      	str	r2, [r3, #12]
 81101ca:	e002      	b.n	81101d2 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 81101cc:	2301      	movs	r3, #1
 81101ce:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 81101d2:	687b      	ldr	r3, [r7, #4]
 81101d4:	2201      	movs	r2, #1
 81101d6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 81101da:	687b      	ldr	r3, [r7, #4]
 81101dc:	2201      	movs	r2, #1
 81101de:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 81101e2:	687b      	ldr	r3, [r7, #4]
 81101e4:	2200      	movs	r2, #0
 81101e6:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 81101e8:	687b      	ldr	r3, [r7, #4]
 81101ea:	2200      	movs	r2, #0
 81101ec:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 81101ee:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 81101f2:	4618      	mov	r0, r3
 81101f4:	3738      	adds	r7, #56	; 0x38
 81101f6:	46bd      	mov	sp, r7
 81101f8:	bdb0      	pop	{r4, r5, r7, pc}
 81101fa:	bf00      	nop
 81101fc:	58024400 	.word	0x58024400
 8110200:	03d09000 	.word	0x03d09000
 8110204:	003d0900 	.word	0x003d0900
 8110208:	08119b14 	.word	0x08119b14

0811020c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 811020c:	b480      	push	{r7}
 811020e:	b083      	sub	sp, #12
 8110210:	af00      	add	r7, sp, #0
 8110212:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8110214:	687b      	ldr	r3, [r7, #4]
 8110216:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8110218:	f003 0301 	and.w	r3, r3, #1
 811021c:	2b00      	cmp	r3, #0
 811021e:	d00a      	beq.n	8110236 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8110220:	687b      	ldr	r3, [r7, #4]
 8110222:	681b      	ldr	r3, [r3, #0]
 8110224:	685b      	ldr	r3, [r3, #4]
 8110226:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 811022a:	687b      	ldr	r3, [r7, #4]
 811022c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 811022e:	687b      	ldr	r3, [r7, #4]
 8110230:	681b      	ldr	r3, [r3, #0]
 8110232:	430a      	orrs	r2, r1
 8110234:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8110236:	687b      	ldr	r3, [r7, #4]
 8110238:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 811023a:	f003 0302 	and.w	r3, r3, #2
 811023e:	2b00      	cmp	r3, #0
 8110240:	d00a      	beq.n	8110258 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8110242:	687b      	ldr	r3, [r7, #4]
 8110244:	681b      	ldr	r3, [r3, #0]
 8110246:	685b      	ldr	r3, [r3, #4]
 8110248:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 811024c:	687b      	ldr	r3, [r7, #4]
 811024e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8110250:	687b      	ldr	r3, [r7, #4]
 8110252:	681b      	ldr	r3, [r3, #0]
 8110254:	430a      	orrs	r2, r1
 8110256:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8110258:	687b      	ldr	r3, [r7, #4]
 811025a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 811025c:	f003 0304 	and.w	r3, r3, #4
 8110260:	2b00      	cmp	r3, #0
 8110262:	d00a      	beq.n	811027a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8110264:	687b      	ldr	r3, [r7, #4]
 8110266:	681b      	ldr	r3, [r3, #0]
 8110268:	685b      	ldr	r3, [r3, #4]
 811026a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 811026e:	687b      	ldr	r3, [r7, #4]
 8110270:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8110272:	687b      	ldr	r3, [r7, #4]
 8110274:	681b      	ldr	r3, [r3, #0]
 8110276:	430a      	orrs	r2, r1
 8110278:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 811027a:	687b      	ldr	r3, [r7, #4]
 811027c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 811027e:	f003 0308 	and.w	r3, r3, #8
 8110282:	2b00      	cmp	r3, #0
 8110284:	d00a      	beq.n	811029c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8110286:	687b      	ldr	r3, [r7, #4]
 8110288:	681b      	ldr	r3, [r3, #0]
 811028a:	685b      	ldr	r3, [r3, #4]
 811028c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8110290:	687b      	ldr	r3, [r7, #4]
 8110292:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8110294:	687b      	ldr	r3, [r7, #4]
 8110296:	681b      	ldr	r3, [r3, #0]
 8110298:	430a      	orrs	r2, r1
 811029a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 811029c:	687b      	ldr	r3, [r7, #4]
 811029e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81102a0:	f003 0310 	and.w	r3, r3, #16
 81102a4:	2b00      	cmp	r3, #0
 81102a6:	d00a      	beq.n	81102be <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 81102a8:	687b      	ldr	r3, [r7, #4]
 81102aa:	681b      	ldr	r3, [r3, #0]
 81102ac:	689b      	ldr	r3, [r3, #8]
 81102ae:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 81102b2:	687b      	ldr	r3, [r7, #4]
 81102b4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 81102b6:	687b      	ldr	r3, [r7, #4]
 81102b8:	681b      	ldr	r3, [r3, #0]
 81102ba:	430a      	orrs	r2, r1
 81102bc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 81102be:	687b      	ldr	r3, [r7, #4]
 81102c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81102c2:	f003 0320 	and.w	r3, r3, #32
 81102c6:	2b00      	cmp	r3, #0
 81102c8:	d00a      	beq.n	81102e0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 81102ca:	687b      	ldr	r3, [r7, #4]
 81102cc:	681b      	ldr	r3, [r3, #0]
 81102ce:	689b      	ldr	r3, [r3, #8]
 81102d0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 81102d4:	687b      	ldr	r3, [r7, #4]
 81102d6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 81102d8:	687b      	ldr	r3, [r7, #4]
 81102da:	681b      	ldr	r3, [r3, #0]
 81102dc:	430a      	orrs	r2, r1
 81102de:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 81102e0:	687b      	ldr	r3, [r7, #4]
 81102e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81102e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 81102e8:	2b00      	cmp	r3, #0
 81102ea:	d01a      	beq.n	8110322 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 81102ec:	687b      	ldr	r3, [r7, #4]
 81102ee:	681b      	ldr	r3, [r3, #0]
 81102f0:	685b      	ldr	r3, [r3, #4]
 81102f2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 81102f6:	687b      	ldr	r3, [r7, #4]
 81102f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 81102fa:	687b      	ldr	r3, [r7, #4]
 81102fc:	681b      	ldr	r3, [r3, #0]
 81102fe:	430a      	orrs	r2, r1
 8110300:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8110302:	687b      	ldr	r3, [r7, #4]
 8110304:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8110306:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 811030a:	d10a      	bne.n	8110322 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 811030c:	687b      	ldr	r3, [r7, #4]
 811030e:	681b      	ldr	r3, [r3, #0]
 8110310:	685b      	ldr	r3, [r3, #4]
 8110312:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8110316:	687b      	ldr	r3, [r7, #4]
 8110318:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 811031a:	687b      	ldr	r3, [r7, #4]
 811031c:	681b      	ldr	r3, [r3, #0]
 811031e:	430a      	orrs	r2, r1
 8110320:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8110322:	687b      	ldr	r3, [r7, #4]
 8110324:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8110326:	f003 0380 	and.w	r3, r3, #128	; 0x80
 811032a:	2b00      	cmp	r3, #0
 811032c:	d00a      	beq.n	8110344 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 811032e:	687b      	ldr	r3, [r7, #4]
 8110330:	681b      	ldr	r3, [r3, #0]
 8110332:	685b      	ldr	r3, [r3, #4]
 8110334:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8110338:	687b      	ldr	r3, [r7, #4]
 811033a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 811033c:	687b      	ldr	r3, [r7, #4]
 811033e:	681b      	ldr	r3, [r3, #0]
 8110340:	430a      	orrs	r2, r1
 8110342:	605a      	str	r2, [r3, #4]
  }
}
 8110344:	bf00      	nop
 8110346:	370c      	adds	r7, #12
 8110348:	46bd      	mov	sp, r7
 811034a:	f85d 7b04 	ldr.w	r7, [sp], #4
 811034e:	4770      	bx	lr

08110350 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8110350:	b580      	push	{r7, lr}
 8110352:	b086      	sub	sp, #24
 8110354:	af02      	add	r7, sp, #8
 8110356:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8110358:	687b      	ldr	r3, [r7, #4]
 811035a:	2200      	movs	r2, #0
 811035c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8110360:	f7f2 fb4a 	bl	81029f8 <HAL_GetTick>
 8110364:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8110366:	687b      	ldr	r3, [r7, #4]
 8110368:	681b      	ldr	r3, [r3, #0]
 811036a:	681b      	ldr	r3, [r3, #0]
 811036c:	f003 0308 	and.w	r3, r3, #8
 8110370:	2b08      	cmp	r3, #8
 8110372:	d10e      	bne.n	8110392 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8110374:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8110378:	9300      	str	r3, [sp, #0]
 811037a:	68fb      	ldr	r3, [r7, #12]
 811037c:	2200      	movs	r2, #0
 811037e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8110382:	6878      	ldr	r0, [r7, #4]
 8110384:	f000 f82f 	bl	81103e6 <UART_WaitOnFlagUntilTimeout>
 8110388:	4603      	mov	r3, r0
 811038a:	2b00      	cmp	r3, #0
 811038c:	d001      	beq.n	8110392 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 811038e:	2303      	movs	r3, #3
 8110390:	e025      	b.n	81103de <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8110392:	687b      	ldr	r3, [r7, #4]
 8110394:	681b      	ldr	r3, [r3, #0]
 8110396:	681b      	ldr	r3, [r3, #0]
 8110398:	f003 0304 	and.w	r3, r3, #4
 811039c:	2b04      	cmp	r3, #4
 811039e:	d10e      	bne.n	81103be <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 81103a0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 81103a4:	9300      	str	r3, [sp, #0]
 81103a6:	68fb      	ldr	r3, [r7, #12]
 81103a8:	2200      	movs	r2, #0
 81103aa:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 81103ae:	6878      	ldr	r0, [r7, #4]
 81103b0:	f000 f819 	bl	81103e6 <UART_WaitOnFlagUntilTimeout>
 81103b4:	4603      	mov	r3, r0
 81103b6:	2b00      	cmp	r3, #0
 81103b8:	d001      	beq.n	81103be <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 81103ba:	2303      	movs	r3, #3
 81103bc:	e00f      	b.n	81103de <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 81103be:	687b      	ldr	r3, [r7, #4]
 81103c0:	2220      	movs	r2, #32
 81103c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 81103c6:	687b      	ldr	r3, [r7, #4]
 81103c8:	2220      	movs	r2, #32
 81103ca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 81103ce:	687b      	ldr	r3, [r7, #4]
 81103d0:	2200      	movs	r2, #0
 81103d2:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 81103d4:	687b      	ldr	r3, [r7, #4]
 81103d6:	2200      	movs	r2, #0
 81103d8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 81103dc:	2300      	movs	r3, #0
}
 81103de:	4618      	mov	r0, r3
 81103e0:	3710      	adds	r7, #16
 81103e2:	46bd      	mov	sp, r7
 81103e4:	bd80      	pop	{r7, pc}

081103e6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 81103e6:	b580      	push	{r7, lr}
 81103e8:	b084      	sub	sp, #16
 81103ea:	af00      	add	r7, sp, #0
 81103ec:	60f8      	str	r0, [r7, #12]
 81103ee:	60b9      	str	r1, [r7, #8]
 81103f0:	603b      	str	r3, [r7, #0]
 81103f2:	4613      	mov	r3, r2
 81103f4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 81103f6:	e062      	b.n	81104be <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 81103f8:	69bb      	ldr	r3, [r7, #24]
 81103fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 81103fe:	d05e      	beq.n	81104be <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8110400:	f7f2 fafa 	bl	81029f8 <HAL_GetTick>
 8110404:	4602      	mov	r2, r0
 8110406:	683b      	ldr	r3, [r7, #0]
 8110408:	1ad3      	subs	r3, r2, r3
 811040a:	69ba      	ldr	r2, [r7, #24]
 811040c:	429a      	cmp	r2, r3
 811040e:	d302      	bcc.n	8110416 <UART_WaitOnFlagUntilTimeout+0x30>
 8110410:	69bb      	ldr	r3, [r7, #24]
 8110412:	2b00      	cmp	r3, #0
 8110414:	d11d      	bne.n	8110452 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8110416:	68fb      	ldr	r3, [r7, #12]
 8110418:	681b      	ldr	r3, [r3, #0]
 811041a:	681a      	ldr	r2, [r3, #0]
 811041c:	68fb      	ldr	r3, [r7, #12]
 811041e:	681b      	ldr	r3, [r3, #0]
 8110420:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8110424:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8110426:	68fb      	ldr	r3, [r7, #12]
 8110428:	681b      	ldr	r3, [r3, #0]
 811042a:	689a      	ldr	r2, [r3, #8]
 811042c:	68fb      	ldr	r3, [r7, #12]
 811042e:	681b      	ldr	r3, [r3, #0]
 8110430:	f022 0201 	bic.w	r2, r2, #1
 8110434:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8110436:	68fb      	ldr	r3, [r7, #12]
 8110438:	2220      	movs	r2, #32
 811043a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 811043e:	68fb      	ldr	r3, [r7, #12]
 8110440:	2220      	movs	r2, #32
 8110442:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8110446:	68fb      	ldr	r3, [r7, #12]
 8110448:	2200      	movs	r2, #0
 811044a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 811044e:	2303      	movs	r3, #3
 8110450:	e045      	b.n	81104de <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8110452:	68fb      	ldr	r3, [r7, #12]
 8110454:	681b      	ldr	r3, [r3, #0]
 8110456:	681b      	ldr	r3, [r3, #0]
 8110458:	f003 0304 	and.w	r3, r3, #4
 811045c:	2b00      	cmp	r3, #0
 811045e:	d02e      	beq.n	81104be <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8110460:	68fb      	ldr	r3, [r7, #12]
 8110462:	681b      	ldr	r3, [r3, #0]
 8110464:	69db      	ldr	r3, [r3, #28]
 8110466:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 811046a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 811046e:	d126      	bne.n	81104be <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8110470:	68fb      	ldr	r3, [r7, #12]
 8110472:	681b      	ldr	r3, [r3, #0]
 8110474:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8110478:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 811047a:	68fb      	ldr	r3, [r7, #12]
 811047c:	681b      	ldr	r3, [r3, #0]
 811047e:	681a      	ldr	r2, [r3, #0]
 8110480:	68fb      	ldr	r3, [r7, #12]
 8110482:	681b      	ldr	r3, [r3, #0]
 8110484:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8110488:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 811048a:	68fb      	ldr	r3, [r7, #12]
 811048c:	681b      	ldr	r3, [r3, #0]
 811048e:	689a      	ldr	r2, [r3, #8]
 8110490:	68fb      	ldr	r3, [r7, #12]
 8110492:	681b      	ldr	r3, [r3, #0]
 8110494:	f022 0201 	bic.w	r2, r2, #1
 8110498:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 811049a:	68fb      	ldr	r3, [r7, #12]
 811049c:	2220      	movs	r2, #32
 811049e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 81104a2:	68fb      	ldr	r3, [r7, #12]
 81104a4:	2220      	movs	r2, #32
 81104a6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 81104aa:	68fb      	ldr	r3, [r7, #12]
 81104ac:	2220      	movs	r2, #32
 81104ae:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 81104b2:	68fb      	ldr	r3, [r7, #12]
 81104b4:	2200      	movs	r2, #0
 81104b6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 81104ba:	2303      	movs	r3, #3
 81104bc:	e00f      	b.n	81104de <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 81104be:	68fb      	ldr	r3, [r7, #12]
 81104c0:	681b      	ldr	r3, [r3, #0]
 81104c2:	69da      	ldr	r2, [r3, #28]
 81104c4:	68bb      	ldr	r3, [r7, #8]
 81104c6:	4013      	ands	r3, r2
 81104c8:	68ba      	ldr	r2, [r7, #8]
 81104ca:	429a      	cmp	r2, r3
 81104cc:	bf0c      	ite	eq
 81104ce:	2301      	moveq	r3, #1
 81104d0:	2300      	movne	r3, #0
 81104d2:	b2db      	uxtb	r3, r3
 81104d4:	461a      	mov	r2, r3
 81104d6:	79fb      	ldrb	r3, [r7, #7]
 81104d8:	429a      	cmp	r2, r3
 81104da:	d08d      	beq.n	81103f8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 81104dc:	2300      	movs	r3, #0
}
 81104de:	4618      	mov	r0, r3
 81104e0:	3710      	adds	r7, #16
 81104e2:	46bd      	mov	sp, r7
 81104e4:	bd80      	pop	{r7, pc}
	...

081104e8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 81104e8:	b580      	push	{r7, lr}
 81104ea:	b084      	sub	sp, #16
 81104ec:	af00      	add	r7, sp, #0
 81104ee:	60f8      	str	r0, [r7, #12]
 81104f0:	60b9      	str	r1, [r7, #8]
 81104f2:	4613      	mov	r3, r2
 81104f4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 81104f6:	68fb      	ldr	r3, [r7, #12]
 81104f8:	68ba      	ldr	r2, [r7, #8]
 81104fa:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 81104fc:	68fb      	ldr	r3, [r7, #12]
 81104fe:	88fa      	ldrh	r2, [r7, #6]
 8110500:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8110504:	68fb      	ldr	r3, [r7, #12]
 8110506:	2200      	movs	r2, #0
 8110508:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 811050c:	68fb      	ldr	r3, [r7, #12]
 811050e:	2222      	movs	r2, #34	; 0x22
 8110510:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  if (huart->hdmarx != NULL)
 8110514:	68fb      	ldr	r3, [r7, #12]
 8110516:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8110518:	2b00      	cmp	r3, #0
 811051a:	d02c      	beq.n	8110576 <UART_Start_Receive_DMA+0x8e>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 811051c:	68fb      	ldr	r3, [r7, #12]
 811051e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8110520:	4a25      	ldr	r2, [pc, #148]	; (81105b8 <UART_Start_Receive_DMA+0xd0>)
 8110522:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8110524:	68fb      	ldr	r3, [r7, #12]
 8110526:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8110528:	4a24      	ldr	r2, [pc, #144]	; (81105bc <UART_Start_Receive_DMA+0xd4>)
 811052a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 811052c:	68fb      	ldr	r3, [r7, #12]
 811052e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8110530:	4a23      	ldr	r2, [pc, #140]	; (81105c0 <UART_Start_Receive_DMA+0xd8>)
 8110532:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8110534:	68fb      	ldr	r3, [r7, #12]
 8110536:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8110538:	2200      	movs	r2, #0
 811053a:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 811053c:	68fb      	ldr	r3, [r7, #12]
 811053e:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 8110540:	68fb      	ldr	r3, [r7, #12]
 8110542:	681b      	ldr	r3, [r3, #0]
 8110544:	3324      	adds	r3, #36	; 0x24
 8110546:	4619      	mov	r1, r3
 8110548:	68fb      	ldr	r3, [r7, #12]
 811054a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 811054c:	461a      	mov	r2, r3
 811054e:	88fb      	ldrh	r3, [r7, #6]
 8110550:	f7f4 fa36 	bl	81049c0 <HAL_DMA_Start_IT>
 8110554:	4603      	mov	r3, r0
 8110556:	2b00      	cmp	r3, #0
 8110558:	d00d      	beq.n	8110576 <UART_Start_Receive_DMA+0x8e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 811055a:	68fb      	ldr	r3, [r7, #12]
 811055c:	2210      	movs	r2, #16
 811055e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8110562:	68fb      	ldr	r3, [r7, #12]
 8110564:	2200      	movs	r2, #0
 8110566:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Restore huart->gState to ready */
      huart->gState = HAL_UART_STATE_READY;
 811056a:	68fb      	ldr	r3, [r7, #12]
 811056c:	2220      	movs	r2, #32
 811056e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      return HAL_ERROR;
 8110572:	2301      	movs	r3, #1
 8110574:	e01c      	b.n	81105b0 <UART_Start_Receive_DMA+0xc8>
    }
  }
  __HAL_UNLOCK(huart);
 8110576:	68fb      	ldr	r3, [r7, #12]
 8110578:	2200      	movs	r2, #0
 811057a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 811057e:	68fb      	ldr	r3, [r7, #12]
 8110580:	681b      	ldr	r3, [r3, #0]
 8110582:	681a      	ldr	r2, [r3, #0]
 8110584:	68fb      	ldr	r3, [r7, #12]
 8110586:	681b      	ldr	r3, [r3, #0]
 8110588:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 811058c:	601a      	str	r2, [r3, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 811058e:	68fb      	ldr	r3, [r7, #12]
 8110590:	681b      	ldr	r3, [r3, #0]
 8110592:	689a      	ldr	r2, [r3, #8]
 8110594:	68fb      	ldr	r3, [r7, #12]
 8110596:	681b      	ldr	r3, [r3, #0]
 8110598:	f042 0201 	orr.w	r2, r2, #1
 811059c:	609a      	str	r2, [r3, #8]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 811059e:	68fb      	ldr	r3, [r7, #12]
 81105a0:	681b      	ldr	r3, [r3, #0]
 81105a2:	689a      	ldr	r2, [r3, #8]
 81105a4:	68fb      	ldr	r3, [r7, #12]
 81105a6:	681b      	ldr	r3, [r3, #0]
 81105a8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 81105ac:	609a      	str	r2, [r3, #8]

  return HAL_OK;
 81105ae:	2300      	movs	r3, #0
}
 81105b0:	4618      	mov	r0, r3
 81105b2:	3710      	adds	r7, #16
 81105b4:	46bd      	mov	sp, r7
 81105b6:	bd80      	pop	{r7, pc}
 81105b8:	081106d1 	.word	0x081106d1
 81105bc:	08110767 	.word	0x08110767
 81105c0:	0811079f 	.word	0x0811079f

081105c4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 81105c4:	b480      	push	{r7}
 81105c6:	b083      	sub	sp, #12
 81105c8:	af00      	add	r7, sp, #0
 81105ca:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 81105cc:	687b      	ldr	r3, [r7, #4]
 81105ce:	681b      	ldr	r3, [r3, #0]
 81105d0:	681a      	ldr	r2, [r3, #0]
 81105d2:	687b      	ldr	r3, [r7, #4]
 81105d4:	681b      	ldr	r3, [r3, #0]
 81105d6:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 81105da:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 81105dc:	687b      	ldr	r3, [r7, #4]
 81105de:	681b      	ldr	r3, [r3, #0]
 81105e0:	689a      	ldr	r2, [r3, #8]
 81105e2:	687b      	ldr	r3, [r7, #4]
 81105e4:	681b      	ldr	r3, [r3, #0]
 81105e6:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 81105ea:	609a      	str	r2, [r3, #8]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 81105ec:	687b      	ldr	r3, [r7, #4]
 81105ee:	2220      	movs	r2, #32
 81105f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 81105f4:	bf00      	nop
 81105f6:	370c      	adds	r7, #12
 81105f8:	46bd      	mov	sp, r7
 81105fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 81105fe:	4770      	bx	lr

08110600 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8110600:	b480      	push	{r7}
 8110602:	b083      	sub	sp, #12
 8110604:	af00      	add	r7, sp, #0
 8110606:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8110608:	687b      	ldr	r3, [r7, #4]
 811060a:	681b      	ldr	r3, [r3, #0]
 811060c:	681a      	ldr	r2, [r3, #0]
 811060e:	687b      	ldr	r3, [r7, #4]
 8110610:	681b      	ldr	r3, [r3, #0]
 8110612:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8110616:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8110618:	687b      	ldr	r3, [r7, #4]
 811061a:	681b      	ldr	r3, [r3, #0]
 811061c:	689b      	ldr	r3, [r3, #8]
 811061e:	687a      	ldr	r2, [r7, #4]
 8110620:	6812      	ldr	r2, [r2, #0]
 8110622:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8110626:	f023 0301 	bic.w	r3, r3, #1
 811062a:	6093      	str	r3, [r2, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 811062c:	687b      	ldr	r3, [r7, #4]
 811062e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8110630:	2b01      	cmp	r3, #1
 8110632:	d107      	bne.n	8110644 <UART_EndRxTransfer+0x44>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8110634:	687b      	ldr	r3, [r7, #4]
 8110636:	681b      	ldr	r3, [r3, #0]
 8110638:	681a      	ldr	r2, [r3, #0]
 811063a:	687b      	ldr	r3, [r7, #4]
 811063c:	681b      	ldr	r3, [r3, #0]
 811063e:	f022 0210 	bic.w	r2, r2, #16
 8110642:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8110644:	687b      	ldr	r3, [r7, #4]
 8110646:	2220      	movs	r2, #32
 8110648:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 811064c:	687b      	ldr	r3, [r7, #4]
 811064e:	2200      	movs	r2, #0
 8110650:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8110652:	687b      	ldr	r3, [r7, #4]
 8110654:	2200      	movs	r2, #0
 8110656:	671a      	str	r2, [r3, #112]	; 0x70
}
 8110658:	bf00      	nop
 811065a:	370c      	adds	r7, #12
 811065c:	46bd      	mov	sp, r7
 811065e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8110662:	4770      	bx	lr

08110664 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8110664:	b580      	push	{r7, lr}
 8110666:	b084      	sub	sp, #16
 8110668:	af00      	add	r7, sp, #0
 811066a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 811066c:	687b      	ldr	r3, [r7, #4]
 811066e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8110670:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8110672:	687b      	ldr	r3, [r7, #4]
 8110674:	69db      	ldr	r3, [r3, #28]
 8110676:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 811067a:	d014      	beq.n	81106a6 <UART_DMATransmitCplt+0x42>
  {
    huart->TxXferCount = 0U;
 811067c:	68fb      	ldr	r3, [r7, #12]
 811067e:	2200      	movs	r2, #0
 8110680:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8110684:	68fb      	ldr	r3, [r7, #12]
 8110686:	681b      	ldr	r3, [r3, #0]
 8110688:	689a      	ldr	r2, [r3, #8]
 811068a:	68fb      	ldr	r3, [r7, #12]
 811068c:	681b      	ldr	r3, [r3, #0]
 811068e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8110692:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8110694:	68fb      	ldr	r3, [r7, #12]
 8110696:	681b      	ldr	r3, [r3, #0]
 8110698:	681a      	ldr	r2, [r3, #0]
 811069a:	68fb      	ldr	r3, [r7, #12]
 811069c:	681b      	ldr	r3, [r3, #0]
 811069e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 81106a2:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 81106a4:	e002      	b.n	81106ac <UART_DMATransmitCplt+0x48>
    HAL_UART_TxCpltCallback(huart);
 81106a6:	68f8      	ldr	r0, [r7, #12]
 81106a8:	f7f1 fa2e 	bl	8101b08 <HAL_UART_TxCpltCallback>
}
 81106ac:	bf00      	nop
 81106ae:	3710      	adds	r7, #16
 81106b0:	46bd      	mov	sp, r7
 81106b2:	bd80      	pop	{r7, pc}

081106b4 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 81106b4:	b580      	push	{r7, lr}
 81106b6:	b084      	sub	sp, #16
 81106b8:	af00      	add	r7, sp, #0
 81106ba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 81106bc:	687b      	ldr	r3, [r7, #4]
 81106be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81106c0:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 81106c2:	68f8      	ldr	r0, [r7, #12]
 81106c4:	f7ff f822 	bl	810f70c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 81106c8:	bf00      	nop
 81106ca:	3710      	adds	r7, #16
 81106cc:	46bd      	mov	sp, r7
 81106ce:	bd80      	pop	{r7, pc}

081106d0 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 81106d0:	b580      	push	{r7, lr}
 81106d2:	b084      	sub	sp, #16
 81106d4:	af00      	add	r7, sp, #0
 81106d6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 81106d8:	687b      	ldr	r3, [r7, #4]
 81106da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81106dc:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 81106de:	687b      	ldr	r3, [r7, #4]
 81106e0:	69db      	ldr	r3, [r3, #28]
 81106e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 81106e6:	d02b      	beq.n	8110740 <UART_DMAReceiveCplt+0x70>
  {
    huart->RxXferCount = 0U;
 81106e8:	68fb      	ldr	r3, [r7, #12]
 81106ea:	2200      	movs	r2, #0
 81106ec:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 81106f0:	68fb      	ldr	r3, [r7, #12]
 81106f2:	681b      	ldr	r3, [r3, #0]
 81106f4:	681a      	ldr	r2, [r3, #0]
 81106f6:	68fb      	ldr	r3, [r7, #12]
 81106f8:	681b      	ldr	r3, [r3, #0]
 81106fa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 81106fe:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8110700:	68fb      	ldr	r3, [r7, #12]
 8110702:	681b      	ldr	r3, [r3, #0]
 8110704:	689a      	ldr	r2, [r3, #8]
 8110706:	68fb      	ldr	r3, [r7, #12]
 8110708:	681b      	ldr	r3, [r3, #0]
 811070a:	f022 0201 	bic.w	r2, r2, #1
 811070e:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8110710:	68fb      	ldr	r3, [r7, #12]
 8110712:	681b      	ldr	r3, [r3, #0]
 8110714:	689a      	ldr	r2, [r3, #8]
 8110716:	68fb      	ldr	r3, [r7, #12]
 8110718:	681b      	ldr	r3, [r3, #0]
 811071a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 811071e:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8110720:	68fb      	ldr	r3, [r7, #12]
 8110722:	2220      	movs	r2, #32
 8110724:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8110728:	68fb      	ldr	r3, [r7, #12]
 811072a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 811072c:	2b01      	cmp	r3, #1
 811072e:	d107      	bne.n	8110740 <UART_DMAReceiveCplt+0x70>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8110730:	68fb      	ldr	r3, [r7, #12]
 8110732:	681b      	ldr	r3, [r3, #0]
 8110734:	681a      	ldr	r2, [r3, #0]
 8110736:	68fb      	ldr	r3, [r7, #12]
 8110738:	681b      	ldr	r3, [r3, #0]
 811073a:	f022 0210 	bic.w	r2, r2, #16
 811073e:	601a      	str	r2, [r3, #0]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8110740:	68fb      	ldr	r3, [r7, #12]
 8110742:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8110744:	2b01      	cmp	r3, #1
 8110746:	d107      	bne.n	8110758 <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8110748:	68fb      	ldr	r3, [r7, #12]
 811074a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 811074e:	4619      	mov	r1, r3
 8110750:	68f8      	ldr	r0, [r7, #12]
 8110752:	f7fe ffef 	bl	810f734 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8110756:	e002      	b.n	811075e <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 8110758:	68f8      	ldr	r0, [r7, #12]
 811075a:	f7f1 f94f 	bl	81019fc <HAL_UART_RxCpltCallback>
}
 811075e:	bf00      	nop
 8110760:	3710      	adds	r7, #16
 8110762:	46bd      	mov	sp, r7
 8110764:	bd80      	pop	{r7, pc}

08110766 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8110766:	b580      	push	{r7, lr}
 8110768:	b084      	sub	sp, #16
 811076a:	af00      	add	r7, sp, #0
 811076c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 811076e:	687b      	ldr	r3, [r7, #4]
 8110770:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8110772:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8110774:	68fb      	ldr	r3, [r7, #12]
 8110776:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8110778:	2b01      	cmp	r3, #1
 811077a:	d109      	bne.n	8110790 <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 811077c:	68fb      	ldr	r3, [r7, #12]
 811077e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8110782:	085b      	lsrs	r3, r3, #1
 8110784:	b29b      	uxth	r3, r3
 8110786:	4619      	mov	r1, r3
 8110788:	68f8      	ldr	r0, [r7, #12]
 811078a:	f7fe ffd3 	bl	810f734 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 811078e:	e002      	b.n	8110796 <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 8110790:	68f8      	ldr	r0, [r7, #12]
 8110792:	f7fe ffc5 	bl	810f720 <HAL_UART_RxHalfCpltCallback>
}
 8110796:	bf00      	nop
 8110798:	3710      	adds	r7, #16
 811079a:	46bd      	mov	sp, r7
 811079c:	bd80      	pop	{r7, pc}

0811079e <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 811079e:	b580      	push	{r7, lr}
 81107a0:	b086      	sub	sp, #24
 81107a2:	af00      	add	r7, sp, #0
 81107a4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 81107a6:	687b      	ldr	r3, [r7, #4]
 81107a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81107aa:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 81107ac:	697b      	ldr	r3, [r7, #20]
 81107ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 81107b2:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 81107b4:	697b      	ldr	r3, [r7, #20]
 81107b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 81107ba:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 81107bc:	697b      	ldr	r3, [r7, #20]
 81107be:	681b      	ldr	r3, [r3, #0]
 81107c0:	689b      	ldr	r3, [r3, #8]
 81107c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 81107c6:	2b80      	cmp	r3, #128	; 0x80
 81107c8:	d109      	bne.n	81107de <UART_DMAError+0x40>
 81107ca:	693b      	ldr	r3, [r7, #16]
 81107cc:	2b21      	cmp	r3, #33	; 0x21
 81107ce:	d106      	bne.n	81107de <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 81107d0:	697b      	ldr	r3, [r7, #20]
 81107d2:	2200      	movs	r2, #0
 81107d4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 81107d8:	6978      	ldr	r0, [r7, #20]
 81107da:	f7ff fef3 	bl	81105c4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 81107de:	697b      	ldr	r3, [r7, #20]
 81107e0:	681b      	ldr	r3, [r3, #0]
 81107e2:	689b      	ldr	r3, [r3, #8]
 81107e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 81107e8:	2b40      	cmp	r3, #64	; 0x40
 81107ea:	d109      	bne.n	8110800 <UART_DMAError+0x62>
 81107ec:	68fb      	ldr	r3, [r7, #12]
 81107ee:	2b22      	cmp	r3, #34	; 0x22
 81107f0:	d106      	bne.n	8110800 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 81107f2:	697b      	ldr	r3, [r7, #20]
 81107f4:	2200      	movs	r2, #0
 81107f6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 81107fa:	6978      	ldr	r0, [r7, #20]
 81107fc:	f7ff ff00 	bl	8110600 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8110800:	697b      	ldr	r3, [r7, #20]
 8110802:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8110806:	f043 0210 	orr.w	r2, r3, #16
 811080a:	697b      	ldr	r3, [r7, #20]
 811080c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8110810:	6978      	ldr	r0, [r7, #20]
 8110812:	f7f1 f98f 	bl	8101b34 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8110816:	bf00      	nop
 8110818:	3718      	adds	r7, #24
 811081a:	46bd      	mov	sp, r7
 811081c:	bd80      	pop	{r7, pc}

0811081e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 811081e:	b580      	push	{r7, lr}
 8110820:	b084      	sub	sp, #16
 8110822:	af00      	add	r7, sp, #0
 8110824:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8110826:	687b      	ldr	r3, [r7, #4]
 8110828:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 811082a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 811082c:	68fb      	ldr	r3, [r7, #12]
 811082e:	2200      	movs	r2, #0
 8110830:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8110834:	68fb      	ldr	r3, [r7, #12]
 8110836:	2200      	movs	r2, #0
 8110838:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 811083c:	68f8      	ldr	r0, [r7, #12]
 811083e:	f7f1 f979 	bl	8101b34 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8110842:	bf00      	nop
 8110844:	3710      	adds	r7, #16
 8110846:	46bd      	mov	sp, r7
 8110848:	bd80      	pop	{r7, pc}

0811084a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 811084a:	b580      	push	{r7, lr}
 811084c:	b082      	sub	sp, #8
 811084e:	af00      	add	r7, sp, #0
 8110850:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8110852:	687b      	ldr	r3, [r7, #4]
 8110854:	681b      	ldr	r3, [r3, #0]
 8110856:	681a      	ldr	r2, [r3, #0]
 8110858:	687b      	ldr	r3, [r7, #4]
 811085a:	681b      	ldr	r3, [r3, #0]
 811085c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8110860:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8110862:	687b      	ldr	r3, [r7, #4]
 8110864:	2220      	movs	r2, #32
 8110866:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 811086a:	687b      	ldr	r3, [r7, #4]
 811086c:	2200      	movs	r2, #0
 811086e:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8110870:	6878      	ldr	r0, [r7, #4]
 8110872:	f7f1 f949 	bl	8101b08 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8110876:	bf00      	nop
 8110878:	3708      	adds	r7, #8
 811087a:	46bd      	mov	sp, r7
 811087c:	bd80      	pop	{r7, pc}

0811087e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 811087e:	b480      	push	{r7}
 8110880:	b083      	sub	sp, #12
 8110882:	af00      	add	r7, sp, #0
 8110884:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8110886:	bf00      	nop
 8110888:	370c      	adds	r7, #12
 811088a:	46bd      	mov	sp, r7
 811088c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8110890:	4770      	bx	lr

08110892 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8110892:	b480      	push	{r7}
 8110894:	b083      	sub	sp, #12
 8110896:	af00      	add	r7, sp, #0
 8110898:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 811089a:	bf00      	nop
 811089c:	370c      	adds	r7, #12
 811089e:	46bd      	mov	sp, r7
 81108a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81108a4:	4770      	bx	lr

081108a6 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 81108a6:	b480      	push	{r7}
 81108a8:	b083      	sub	sp, #12
 81108aa:	af00      	add	r7, sp, #0
 81108ac:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 81108ae:	bf00      	nop
 81108b0:	370c      	adds	r7, #12
 81108b2:	46bd      	mov	sp, r7
 81108b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81108b8:	4770      	bx	lr

081108ba <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 81108ba:	b480      	push	{r7}
 81108bc:	b085      	sub	sp, #20
 81108be:	af00      	add	r7, sp, #0
 81108c0:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 81108c2:	687b      	ldr	r3, [r7, #4]
 81108c4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 81108c8:	2b01      	cmp	r3, #1
 81108ca:	d101      	bne.n	81108d0 <HAL_UARTEx_DisableFifoMode+0x16>
 81108cc:	2302      	movs	r3, #2
 81108ce:	e027      	b.n	8110920 <HAL_UARTEx_DisableFifoMode+0x66>
 81108d0:	687b      	ldr	r3, [r7, #4]
 81108d2:	2201      	movs	r2, #1
 81108d4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 81108d8:	687b      	ldr	r3, [r7, #4]
 81108da:	2224      	movs	r2, #36	; 0x24
 81108dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 81108e0:	687b      	ldr	r3, [r7, #4]
 81108e2:	681b      	ldr	r3, [r3, #0]
 81108e4:	681b      	ldr	r3, [r3, #0]
 81108e6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 81108e8:	687b      	ldr	r3, [r7, #4]
 81108ea:	681b      	ldr	r3, [r3, #0]
 81108ec:	681a      	ldr	r2, [r3, #0]
 81108ee:	687b      	ldr	r3, [r7, #4]
 81108f0:	681b      	ldr	r3, [r3, #0]
 81108f2:	f022 0201 	bic.w	r2, r2, #1
 81108f6:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 81108f8:	68fb      	ldr	r3, [r7, #12]
 81108fa:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 81108fe:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8110900:	687b      	ldr	r3, [r7, #4]
 8110902:	2200      	movs	r2, #0
 8110904:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8110906:	687b      	ldr	r3, [r7, #4]
 8110908:	681b      	ldr	r3, [r3, #0]
 811090a:	68fa      	ldr	r2, [r7, #12]
 811090c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 811090e:	687b      	ldr	r3, [r7, #4]
 8110910:	2220      	movs	r2, #32
 8110912:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8110916:	687b      	ldr	r3, [r7, #4]
 8110918:	2200      	movs	r2, #0
 811091a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 811091e:	2300      	movs	r3, #0
}
 8110920:	4618      	mov	r0, r3
 8110922:	3714      	adds	r7, #20
 8110924:	46bd      	mov	sp, r7
 8110926:	f85d 7b04 	ldr.w	r7, [sp], #4
 811092a:	4770      	bx	lr

0811092c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 811092c:	b580      	push	{r7, lr}
 811092e:	b084      	sub	sp, #16
 8110930:	af00      	add	r7, sp, #0
 8110932:	6078      	str	r0, [r7, #4]
 8110934:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8110936:	687b      	ldr	r3, [r7, #4]
 8110938:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 811093c:	2b01      	cmp	r3, #1
 811093e:	d101      	bne.n	8110944 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8110940:	2302      	movs	r3, #2
 8110942:	e02d      	b.n	81109a0 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8110944:	687b      	ldr	r3, [r7, #4]
 8110946:	2201      	movs	r2, #1
 8110948:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 811094c:	687b      	ldr	r3, [r7, #4]
 811094e:	2224      	movs	r2, #36	; 0x24
 8110950:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8110954:	687b      	ldr	r3, [r7, #4]
 8110956:	681b      	ldr	r3, [r3, #0]
 8110958:	681b      	ldr	r3, [r3, #0]
 811095a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 811095c:	687b      	ldr	r3, [r7, #4]
 811095e:	681b      	ldr	r3, [r3, #0]
 8110960:	681a      	ldr	r2, [r3, #0]
 8110962:	687b      	ldr	r3, [r7, #4]
 8110964:	681b      	ldr	r3, [r3, #0]
 8110966:	f022 0201 	bic.w	r2, r2, #1
 811096a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 811096c:	687b      	ldr	r3, [r7, #4]
 811096e:	681b      	ldr	r3, [r3, #0]
 8110970:	689b      	ldr	r3, [r3, #8]
 8110972:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8110976:	687b      	ldr	r3, [r7, #4]
 8110978:	681b      	ldr	r3, [r3, #0]
 811097a:	683a      	ldr	r2, [r7, #0]
 811097c:	430a      	orrs	r2, r1
 811097e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8110980:	6878      	ldr	r0, [r7, #4]
 8110982:	f000 f84f 	bl	8110a24 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8110986:	687b      	ldr	r3, [r7, #4]
 8110988:	681b      	ldr	r3, [r3, #0]
 811098a:	68fa      	ldr	r2, [r7, #12]
 811098c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 811098e:	687b      	ldr	r3, [r7, #4]
 8110990:	2220      	movs	r2, #32
 8110992:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8110996:	687b      	ldr	r3, [r7, #4]
 8110998:	2200      	movs	r2, #0
 811099a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 811099e:	2300      	movs	r3, #0
}
 81109a0:	4618      	mov	r0, r3
 81109a2:	3710      	adds	r7, #16
 81109a4:	46bd      	mov	sp, r7
 81109a6:	bd80      	pop	{r7, pc}

081109a8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 81109a8:	b580      	push	{r7, lr}
 81109aa:	b084      	sub	sp, #16
 81109ac:	af00      	add	r7, sp, #0
 81109ae:	6078      	str	r0, [r7, #4]
 81109b0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 81109b2:	687b      	ldr	r3, [r7, #4]
 81109b4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 81109b8:	2b01      	cmp	r3, #1
 81109ba:	d101      	bne.n	81109c0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 81109bc:	2302      	movs	r3, #2
 81109be:	e02d      	b.n	8110a1c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 81109c0:	687b      	ldr	r3, [r7, #4]
 81109c2:	2201      	movs	r2, #1
 81109c4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 81109c8:	687b      	ldr	r3, [r7, #4]
 81109ca:	2224      	movs	r2, #36	; 0x24
 81109cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 81109d0:	687b      	ldr	r3, [r7, #4]
 81109d2:	681b      	ldr	r3, [r3, #0]
 81109d4:	681b      	ldr	r3, [r3, #0]
 81109d6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 81109d8:	687b      	ldr	r3, [r7, #4]
 81109da:	681b      	ldr	r3, [r3, #0]
 81109dc:	681a      	ldr	r2, [r3, #0]
 81109de:	687b      	ldr	r3, [r7, #4]
 81109e0:	681b      	ldr	r3, [r3, #0]
 81109e2:	f022 0201 	bic.w	r2, r2, #1
 81109e6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 81109e8:	687b      	ldr	r3, [r7, #4]
 81109ea:	681b      	ldr	r3, [r3, #0]
 81109ec:	689b      	ldr	r3, [r3, #8]
 81109ee:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 81109f2:	687b      	ldr	r3, [r7, #4]
 81109f4:	681b      	ldr	r3, [r3, #0]
 81109f6:	683a      	ldr	r2, [r7, #0]
 81109f8:	430a      	orrs	r2, r1
 81109fa:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 81109fc:	6878      	ldr	r0, [r7, #4]
 81109fe:	f000 f811 	bl	8110a24 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8110a02:	687b      	ldr	r3, [r7, #4]
 8110a04:	681b      	ldr	r3, [r3, #0]
 8110a06:	68fa      	ldr	r2, [r7, #12]
 8110a08:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8110a0a:	687b      	ldr	r3, [r7, #4]
 8110a0c:	2220      	movs	r2, #32
 8110a0e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8110a12:	687b      	ldr	r3, [r7, #4]
 8110a14:	2200      	movs	r2, #0
 8110a16:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8110a1a:	2300      	movs	r3, #0
}
 8110a1c:	4618      	mov	r0, r3
 8110a1e:	3710      	adds	r7, #16
 8110a20:	46bd      	mov	sp, r7
 8110a22:	bd80      	pop	{r7, pc}

08110a24 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8110a24:	b480      	push	{r7}
 8110a26:	b085      	sub	sp, #20
 8110a28:	af00      	add	r7, sp, #0
 8110a2a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8110a2c:	687b      	ldr	r3, [r7, #4]
 8110a2e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8110a30:	2b00      	cmp	r3, #0
 8110a32:	d108      	bne.n	8110a46 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8110a34:	687b      	ldr	r3, [r7, #4]
 8110a36:	2201      	movs	r2, #1
 8110a38:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8110a3c:	687b      	ldr	r3, [r7, #4]
 8110a3e:	2201      	movs	r2, #1
 8110a40:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8110a44:	e031      	b.n	8110aaa <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8110a46:	2310      	movs	r3, #16
 8110a48:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8110a4a:	2310      	movs	r3, #16
 8110a4c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8110a4e:	687b      	ldr	r3, [r7, #4]
 8110a50:	681b      	ldr	r3, [r3, #0]
 8110a52:	689b      	ldr	r3, [r3, #8]
 8110a54:	0e5b      	lsrs	r3, r3, #25
 8110a56:	b2db      	uxtb	r3, r3
 8110a58:	f003 0307 	and.w	r3, r3, #7
 8110a5c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8110a5e:	687b      	ldr	r3, [r7, #4]
 8110a60:	681b      	ldr	r3, [r3, #0]
 8110a62:	689b      	ldr	r3, [r3, #8]
 8110a64:	0f5b      	lsrs	r3, r3, #29
 8110a66:	b2db      	uxtb	r3, r3
 8110a68:	f003 0307 	and.w	r3, r3, #7
 8110a6c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8110a6e:	7bbb      	ldrb	r3, [r7, #14]
 8110a70:	7b3a      	ldrb	r2, [r7, #12]
 8110a72:	4911      	ldr	r1, [pc, #68]	; (8110ab8 <UARTEx_SetNbDataToProcess+0x94>)
 8110a74:	5c8a      	ldrb	r2, [r1, r2]
 8110a76:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8110a7a:	7b3a      	ldrb	r2, [r7, #12]
 8110a7c:	490f      	ldr	r1, [pc, #60]	; (8110abc <UARTEx_SetNbDataToProcess+0x98>)
 8110a7e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8110a80:	fb93 f3f2 	sdiv	r3, r3, r2
 8110a84:	b29a      	uxth	r2, r3
 8110a86:	687b      	ldr	r3, [r7, #4]
 8110a88:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8110a8c:	7bfb      	ldrb	r3, [r7, #15]
 8110a8e:	7b7a      	ldrb	r2, [r7, #13]
 8110a90:	4909      	ldr	r1, [pc, #36]	; (8110ab8 <UARTEx_SetNbDataToProcess+0x94>)
 8110a92:	5c8a      	ldrb	r2, [r1, r2]
 8110a94:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8110a98:	7b7a      	ldrb	r2, [r7, #13]
 8110a9a:	4908      	ldr	r1, [pc, #32]	; (8110abc <UARTEx_SetNbDataToProcess+0x98>)
 8110a9c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8110a9e:	fb93 f3f2 	sdiv	r3, r3, r2
 8110aa2:	b29a      	uxth	r2, r3
 8110aa4:	687b      	ldr	r3, [r7, #4]
 8110aa6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8110aaa:	bf00      	nop
 8110aac:	3714      	adds	r7, #20
 8110aae:	46bd      	mov	sp, r7
 8110ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8110ab4:	4770      	bx	lr
 8110ab6:	bf00      	nop
 8110ab8:	08119b2c 	.word	0x08119b2c
 8110abc:	08119b34 	.word	0x08119b34

08110ac0 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8110ac0:	b084      	sub	sp, #16
 8110ac2:	b480      	push	{r7}
 8110ac4:	b085      	sub	sp, #20
 8110ac6:	af00      	add	r7, sp, #0
 8110ac8:	6078      	str	r0, [r7, #4]
 8110aca:	f107 001c 	add.w	r0, r7, #28
 8110ace:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8110ad2:	2300      	movs	r3, #0
 8110ad4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 8110ad6:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 8110ad8:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 8110ada:	431a      	orrs	r2, r3
             Init.BusWide             | \
 8110adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      | \
 8110ade:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 8110ae0:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             | \
 8110ae2:	431a      	orrs	r2, r3
             Init.ClockDiv
 8110ae4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl | \
 8110ae6:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 8110ae8:	68fa      	ldr	r2, [r7, #12]
 8110aea:	4313      	orrs	r3, r2
 8110aec:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 8110aee:	687b      	ldr	r3, [r7, #4]
 8110af0:	685a      	ldr	r2, [r3, #4]
 8110af2:	4b07      	ldr	r3, [pc, #28]	; (8110b10 <SDMMC_Init+0x50>)
 8110af4:	4013      	ands	r3, r2
 8110af6:	68fa      	ldr	r2, [r7, #12]
 8110af8:	431a      	orrs	r2, r3
 8110afa:	687b      	ldr	r3, [r7, #4]
 8110afc:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8110afe:	2300      	movs	r3, #0
}
 8110b00:	4618      	mov	r0, r3
 8110b02:	3714      	adds	r7, #20
 8110b04:	46bd      	mov	sp, r7
 8110b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8110b0a:	b004      	add	sp, #16
 8110b0c:	4770      	bx	lr
 8110b0e:	bf00      	nop
 8110b10:	ffc02c00 	.word	0xffc02c00

08110b14 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8110b14:	b480      	push	{r7}
 8110b16:	b083      	sub	sp, #12
 8110b18:	af00      	add	r7, sp, #0
 8110b1a:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 8110b1c:	687b      	ldr	r3, [r7, #4]
 8110b1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8110b22:	4618      	mov	r0, r3
 8110b24:	370c      	adds	r7, #12
 8110b26:	46bd      	mov	sp, r7
 8110b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8110b2c:	4770      	bx	lr

08110b2e <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 8110b2e:	b480      	push	{r7}
 8110b30:	b083      	sub	sp, #12
 8110b32:	af00      	add	r7, sp, #0
 8110b34:	6078      	str	r0, [r7, #4]
 8110b36:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 8110b38:	683b      	ldr	r3, [r7, #0]
 8110b3a:	681a      	ldr	r2, [r3, #0]
 8110b3c:	687b      	ldr	r3, [r7, #4]
 8110b3e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8110b42:	2300      	movs	r3, #0
}
 8110b44:	4618      	mov	r0, r3
 8110b46:	370c      	adds	r7, #12
 8110b48:	46bd      	mov	sp, r7
 8110b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8110b4e:	4770      	bx	lr

08110b50 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 8110b50:	b480      	push	{r7}
 8110b52:	b083      	sub	sp, #12
 8110b54:	af00      	add	r7, sp, #0
 8110b56:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 8110b58:	687b      	ldr	r3, [r7, #4]
 8110b5a:	681b      	ldr	r3, [r3, #0]
 8110b5c:	f043 0203 	orr.w	r2, r3, #3
 8110b60:	687b      	ldr	r3, [r7, #4]
 8110b62:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8110b64:	2300      	movs	r3, #0
}
 8110b66:	4618      	mov	r0, r3
 8110b68:	370c      	adds	r7, #12
 8110b6a:	46bd      	mov	sp, r7
 8110b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8110b70:	4770      	bx	lr

08110b72 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 8110b72:	b480      	push	{r7}
 8110b74:	b083      	sub	sp, #12
 8110b76:	af00      	add	r7, sp, #0
 8110b78:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8110b7a:	687b      	ldr	r3, [r7, #4]
 8110b7c:	681b      	ldr	r3, [r3, #0]
 8110b7e:	f003 0303 	and.w	r3, r3, #3
}
 8110b82:	4618      	mov	r0, r3
 8110b84:	370c      	adds	r7, #12
 8110b86:	46bd      	mov	sp, r7
 8110b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8110b8c:	4770      	bx	lr
	...

08110b90 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8110b90:	b480      	push	{r7}
 8110b92:	b085      	sub	sp, #20
 8110b94:	af00      	add	r7, sp, #0
 8110b96:	6078      	str	r0, [r7, #4]
 8110b98:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8110b9a:	2300      	movs	r3, #0
 8110b9c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8110b9e:	683b      	ldr	r3, [r7, #0]
 8110ba0:	681a      	ldr	r2, [r3, #0]
 8110ba2:	687b      	ldr	r3, [r7, #4]
 8110ba4:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8110ba6:	683b      	ldr	r3, [r7, #0]
 8110ba8:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 8110baa:	683b      	ldr	r3, [r7, #0]
 8110bac:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8110bae:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 8110bb0:	683b      	ldr	r3, [r7, #0]
 8110bb2:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 8110bb4:	431a      	orrs	r2, r3
                       Command->CPSM);
 8110bb6:	683b      	ldr	r3, [r7, #0]
 8110bb8:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 8110bba:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8110bbc:	68fa      	ldr	r2, [r7, #12]
 8110bbe:	4313      	orrs	r3, r2
 8110bc0:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8110bc2:	687b      	ldr	r3, [r7, #4]
 8110bc4:	68da      	ldr	r2, [r3, #12]
 8110bc6:	4b06      	ldr	r3, [pc, #24]	; (8110be0 <SDMMC_SendCommand+0x50>)
 8110bc8:	4013      	ands	r3, r2
 8110bca:	68fa      	ldr	r2, [r7, #12]
 8110bcc:	431a      	orrs	r2, r3
 8110bce:	687b      	ldr	r3, [r7, #4]
 8110bd0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8110bd2:	2300      	movs	r3, #0
}
 8110bd4:	4618      	mov	r0, r3
 8110bd6:	3714      	adds	r7, #20
 8110bd8:	46bd      	mov	sp, r7
 8110bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8110bde:	4770      	bx	lr
 8110be0:	fffee0c0 	.word	0xfffee0c0

08110be4 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8110be4:	b480      	push	{r7}
 8110be6:	b083      	sub	sp, #12
 8110be8:	af00      	add	r7, sp, #0
 8110bea:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8110bec:	687b      	ldr	r3, [r7, #4]
 8110bee:	691b      	ldr	r3, [r3, #16]
 8110bf0:	b2db      	uxtb	r3, r3
}
 8110bf2:	4618      	mov	r0, r3
 8110bf4:	370c      	adds	r7, #12
 8110bf6:	46bd      	mov	sp, r7
 8110bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8110bfc:	4770      	bx	lr

08110bfe <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8110bfe:	b480      	push	{r7}
 8110c00:	b085      	sub	sp, #20
 8110c02:	af00      	add	r7, sp, #0
 8110c04:	6078      	str	r0, [r7, #4]
 8110c06:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8110c08:	687b      	ldr	r3, [r7, #4]
 8110c0a:	3314      	adds	r3, #20
 8110c0c:	461a      	mov	r2, r3
 8110c0e:	683b      	ldr	r3, [r7, #0]
 8110c10:	4413      	add	r3, r2
 8110c12:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 8110c14:	68fb      	ldr	r3, [r7, #12]
 8110c16:	681b      	ldr	r3, [r3, #0]
}
 8110c18:	4618      	mov	r0, r3
 8110c1a:	3714      	adds	r7, #20
 8110c1c:	46bd      	mov	sp, r7
 8110c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8110c22:	4770      	bx	lr

08110c24 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 8110c24:	b480      	push	{r7}
 8110c26:	b085      	sub	sp, #20
 8110c28:	af00      	add	r7, sp, #0
 8110c2a:	6078      	str	r0, [r7, #4]
 8110c2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8110c2e:	2300      	movs	r3, #0
 8110c30:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8110c32:	683b      	ldr	r3, [r7, #0]
 8110c34:	681a      	ldr	r2, [r3, #0]
 8110c36:	687b      	ldr	r3, [r7, #4]
 8110c38:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8110c3a:	683b      	ldr	r3, [r7, #0]
 8110c3c:	685a      	ldr	r2, [r3, #4]
 8110c3e:	687b      	ldr	r3, [r7, #4]
 8110c40:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8110c42:	683b      	ldr	r3, [r7, #0]
 8110c44:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 8110c46:	683b      	ldr	r3, [r7, #0]
 8110c48:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8110c4a:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 8110c4c:	683b      	ldr	r3, [r7, #0]
 8110c4e:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 8110c50:	431a      	orrs	r2, r3
                       Data->DPSM);
 8110c52:	683b      	ldr	r3, [r7, #0]
 8110c54:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 8110c56:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8110c58:	68fa      	ldr	r2, [r7, #12]
 8110c5a:	4313      	orrs	r3, r2
 8110c5c:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8110c5e:	687b      	ldr	r3, [r7, #4]
 8110c60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8110c62:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8110c66:	68fb      	ldr	r3, [r7, #12]
 8110c68:	431a      	orrs	r2, r3
 8110c6a:	687b      	ldr	r3, [r7, #4]
 8110c6c:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8110c6e:	2300      	movs	r3, #0

}
 8110c70:	4618      	mov	r0, r3
 8110c72:	3714      	adds	r7, #20
 8110c74:	46bd      	mov	sp, r7
 8110c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8110c7a:	4770      	bx	lr

08110c7c <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8110c7c:	b580      	push	{r7, lr}
 8110c7e:	b088      	sub	sp, #32
 8110c80:	af00      	add	r7, sp, #0
 8110c82:	6078      	str	r0, [r7, #4]
 8110c84:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8110c86:	683b      	ldr	r3, [r7, #0]
 8110c88:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8110c8a:	2310      	movs	r3, #16
 8110c8c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8110c8e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8110c92:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8110c94:	2300      	movs	r3, #0
 8110c96:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8110c98:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8110c9c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8110c9e:	f107 0308 	add.w	r3, r7, #8
 8110ca2:	4619      	mov	r1, r3
 8110ca4:	6878      	ldr	r0, [r7, #4]
 8110ca6:	f7ff ff73 	bl	8110b90 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8110caa:	f241 3288 	movw	r2, #5000	; 0x1388
 8110cae:	2110      	movs	r1, #16
 8110cb0:	6878      	ldr	r0, [r7, #4]
 8110cb2:	f000 fa81 	bl	81111b8 <SDMMC_GetCmdResp1>
 8110cb6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8110cb8:	69fb      	ldr	r3, [r7, #28]
}
 8110cba:	4618      	mov	r0, r3
 8110cbc:	3720      	adds	r7, #32
 8110cbe:	46bd      	mov	sp, r7
 8110cc0:	bd80      	pop	{r7, pc}

08110cc2 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8110cc2:	b580      	push	{r7, lr}
 8110cc4:	b088      	sub	sp, #32
 8110cc6:	af00      	add	r7, sp, #0
 8110cc8:	6078      	str	r0, [r7, #4]
 8110cca:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8110ccc:	683b      	ldr	r3, [r7, #0]
 8110cce:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8110cd0:	2311      	movs	r3, #17
 8110cd2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8110cd4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8110cd8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8110cda:	2300      	movs	r3, #0
 8110cdc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8110cde:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8110ce2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8110ce4:	f107 0308 	add.w	r3, r7, #8
 8110ce8:	4619      	mov	r1, r3
 8110cea:	6878      	ldr	r0, [r7, #4]
 8110cec:	f7ff ff50 	bl	8110b90 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8110cf0:	f241 3288 	movw	r2, #5000	; 0x1388
 8110cf4:	2111      	movs	r1, #17
 8110cf6:	6878      	ldr	r0, [r7, #4]
 8110cf8:	f000 fa5e 	bl	81111b8 <SDMMC_GetCmdResp1>
 8110cfc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8110cfe:	69fb      	ldr	r3, [r7, #28]
}
 8110d00:	4618      	mov	r0, r3
 8110d02:	3720      	adds	r7, #32
 8110d04:	46bd      	mov	sp, r7
 8110d06:	bd80      	pop	{r7, pc}

08110d08 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8110d08:	b580      	push	{r7, lr}
 8110d0a:	b088      	sub	sp, #32
 8110d0c:	af00      	add	r7, sp, #0
 8110d0e:	6078      	str	r0, [r7, #4]
 8110d10:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8110d12:	683b      	ldr	r3, [r7, #0]
 8110d14:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8110d16:	2312      	movs	r3, #18
 8110d18:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8110d1a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8110d1e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8110d20:	2300      	movs	r3, #0
 8110d22:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8110d24:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8110d28:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8110d2a:	f107 0308 	add.w	r3, r7, #8
 8110d2e:	4619      	mov	r1, r3
 8110d30:	6878      	ldr	r0, [r7, #4]
 8110d32:	f7ff ff2d 	bl	8110b90 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8110d36:	f241 3288 	movw	r2, #5000	; 0x1388
 8110d3a:	2112      	movs	r1, #18
 8110d3c:	6878      	ldr	r0, [r7, #4]
 8110d3e:	f000 fa3b 	bl	81111b8 <SDMMC_GetCmdResp1>
 8110d42:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8110d44:	69fb      	ldr	r3, [r7, #28]
}
 8110d46:	4618      	mov	r0, r3
 8110d48:	3720      	adds	r7, #32
 8110d4a:	46bd      	mov	sp, r7
 8110d4c:	bd80      	pop	{r7, pc}

08110d4e <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8110d4e:	b580      	push	{r7, lr}
 8110d50:	b088      	sub	sp, #32
 8110d52:	af00      	add	r7, sp, #0
 8110d54:	6078      	str	r0, [r7, #4]
 8110d56:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8110d58:	683b      	ldr	r3, [r7, #0]
 8110d5a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8110d5c:	2318      	movs	r3, #24
 8110d5e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8110d60:	f44f 7380 	mov.w	r3, #256	; 0x100
 8110d64:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8110d66:	2300      	movs	r3, #0
 8110d68:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8110d6a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8110d6e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8110d70:	f107 0308 	add.w	r3, r7, #8
 8110d74:	4619      	mov	r1, r3
 8110d76:	6878      	ldr	r0, [r7, #4]
 8110d78:	f7ff ff0a 	bl	8110b90 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8110d7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8110d80:	2118      	movs	r1, #24
 8110d82:	6878      	ldr	r0, [r7, #4]
 8110d84:	f000 fa18 	bl	81111b8 <SDMMC_GetCmdResp1>
 8110d88:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8110d8a:	69fb      	ldr	r3, [r7, #28]
}
 8110d8c:	4618      	mov	r0, r3
 8110d8e:	3720      	adds	r7, #32
 8110d90:	46bd      	mov	sp, r7
 8110d92:	bd80      	pop	{r7, pc}

08110d94 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8110d94:	b580      	push	{r7, lr}
 8110d96:	b088      	sub	sp, #32
 8110d98:	af00      	add	r7, sp, #0
 8110d9a:	6078      	str	r0, [r7, #4]
 8110d9c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8110d9e:	683b      	ldr	r3, [r7, #0]
 8110da0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8110da2:	2319      	movs	r3, #25
 8110da4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8110da6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8110daa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8110dac:	2300      	movs	r3, #0
 8110dae:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8110db0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8110db4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8110db6:	f107 0308 	add.w	r3, r7, #8
 8110dba:	4619      	mov	r1, r3
 8110dbc:	6878      	ldr	r0, [r7, #4]
 8110dbe:	f7ff fee7 	bl	8110b90 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8110dc2:	f241 3288 	movw	r2, #5000	; 0x1388
 8110dc6:	2119      	movs	r1, #25
 8110dc8:	6878      	ldr	r0, [r7, #4]
 8110dca:	f000 f9f5 	bl	81111b8 <SDMMC_GetCmdResp1>
 8110dce:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8110dd0:	69fb      	ldr	r3, [r7, #28]
}
 8110dd2:	4618      	mov	r0, r3
 8110dd4:	3720      	adds	r7, #32
 8110dd6:	46bd      	mov	sp, r7
 8110dd8:	bd80      	pop	{r7, pc}
	...

08110ddc <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8110ddc:	b580      	push	{r7, lr}
 8110dde:	b088      	sub	sp, #32
 8110de0:	af00      	add	r7, sp, #0
 8110de2:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8110de4:	2300      	movs	r3, #0
 8110de6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8110de8:	230c      	movs	r3, #12
 8110dea:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8110dec:	f44f 7380 	mov.w	r3, #256	; 0x100
 8110df0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8110df2:	2300      	movs	r3, #0
 8110df4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8110df6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8110dfa:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 8110dfc:	687b      	ldr	r3, [r7, #4]
 8110dfe:	68db      	ldr	r3, [r3, #12]
 8110e00:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8110e04:	687b      	ldr	r3, [r7, #4]
 8110e06:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 8110e08:	687b      	ldr	r3, [r7, #4]
 8110e0a:	68db      	ldr	r3, [r3, #12]
 8110e0c:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8110e10:	687b      	ldr	r3, [r7, #4]
 8110e12:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8110e14:	f107 0308 	add.w	r3, r7, #8
 8110e18:	4619      	mov	r1, r3
 8110e1a:	6878      	ldr	r0, [r7, #4]
 8110e1c:	f7ff feb8 	bl	8110b90 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8110e20:	4a0b      	ldr	r2, [pc, #44]	; (8110e50 <SDMMC_CmdStopTransfer+0x74>)
 8110e22:	210c      	movs	r1, #12
 8110e24:	6878      	ldr	r0, [r7, #4]
 8110e26:	f000 f9c7 	bl	81111b8 <SDMMC_GetCmdResp1>
 8110e2a:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8110e2c:	687b      	ldr	r3, [r7, #4]
 8110e2e:	68db      	ldr	r3, [r3, #12]
 8110e30:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8110e34:	687b      	ldr	r3, [r7, #4]
 8110e36:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8110e38:	69fb      	ldr	r3, [r7, #28]
 8110e3a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8110e3e:	d101      	bne.n	8110e44 <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 8110e40:	2300      	movs	r3, #0
 8110e42:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 8110e44:	69fb      	ldr	r3, [r7, #28]
}
 8110e46:	4618      	mov	r0, r3
 8110e48:	3720      	adds	r7, #32
 8110e4a:	46bd      	mov	sp, r7
 8110e4c:	bd80      	pop	{r7, pc}
 8110e4e:	bf00      	nop
 8110e50:	05f5e100 	.word	0x05f5e100

08110e54 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 8110e54:	b580      	push	{r7, lr}
 8110e56:	b088      	sub	sp, #32
 8110e58:	af00      	add	r7, sp, #0
 8110e5a:	6078      	str	r0, [r7, #4]
 8110e5c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8110e5e:	683b      	ldr	r3, [r7, #0]
 8110e60:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8110e62:	2307      	movs	r3, #7
 8110e64:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8110e66:	f44f 7380 	mov.w	r3, #256	; 0x100
 8110e6a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8110e6c:	2300      	movs	r3, #0
 8110e6e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8110e70:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8110e74:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8110e76:	f107 0308 	add.w	r3, r7, #8
 8110e7a:	4619      	mov	r1, r3
 8110e7c:	6878      	ldr	r0, [r7, #4]
 8110e7e:	f7ff fe87 	bl	8110b90 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8110e82:	f241 3288 	movw	r2, #5000	; 0x1388
 8110e86:	2107      	movs	r1, #7
 8110e88:	6878      	ldr	r0, [r7, #4]
 8110e8a:	f000 f995 	bl	81111b8 <SDMMC_GetCmdResp1>
 8110e8e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8110e90:	69fb      	ldr	r3, [r7, #28]
}
 8110e92:	4618      	mov	r0, r3
 8110e94:	3720      	adds	r7, #32
 8110e96:	46bd      	mov	sp, r7
 8110e98:	bd80      	pop	{r7, pc}

08110e9a <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8110e9a:	b580      	push	{r7, lr}
 8110e9c:	b088      	sub	sp, #32
 8110e9e:	af00      	add	r7, sp, #0
 8110ea0:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8110ea2:	2300      	movs	r3, #0
 8110ea4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8110ea6:	2300      	movs	r3, #0
 8110ea8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8110eaa:	2300      	movs	r3, #0
 8110eac:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8110eae:	2300      	movs	r3, #0
 8110eb0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8110eb2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8110eb6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8110eb8:	f107 0308 	add.w	r3, r7, #8
 8110ebc:	4619      	mov	r1, r3
 8110ebe:	6878      	ldr	r0, [r7, #4]
 8110ec0:	f7ff fe66 	bl	8110b90 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8110ec4:	6878      	ldr	r0, [r7, #4]
 8110ec6:	f000 fbb9 	bl	811163c <SDMMC_GetCmdError>
 8110eca:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8110ecc:	69fb      	ldr	r3, [r7, #28]
}
 8110ece:	4618      	mov	r0, r3
 8110ed0:	3720      	adds	r7, #32
 8110ed2:	46bd      	mov	sp, r7
 8110ed4:	bd80      	pop	{r7, pc}

08110ed6 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8110ed6:	b580      	push	{r7, lr}
 8110ed8:	b088      	sub	sp, #32
 8110eda:	af00      	add	r7, sp, #0
 8110edc:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8110ede:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8110ee2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8110ee4:	2308      	movs	r3, #8
 8110ee6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8110ee8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8110eec:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8110eee:	2300      	movs	r3, #0
 8110ef0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8110ef2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8110ef6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8110ef8:	f107 0308 	add.w	r3, r7, #8
 8110efc:	4619      	mov	r1, r3
 8110efe:	6878      	ldr	r0, [r7, #4]
 8110f00:	f7ff fe46 	bl	8110b90 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8110f04:	6878      	ldr	r0, [r7, #4]
 8110f06:	f000 fb4b 	bl	81115a0 <SDMMC_GetCmdResp7>
 8110f0a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8110f0c:	69fb      	ldr	r3, [r7, #28]
}
 8110f0e:	4618      	mov	r0, r3
 8110f10:	3720      	adds	r7, #32
 8110f12:	46bd      	mov	sp, r7
 8110f14:	bd80      	pop	{r7, pc}

08110f16 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8110f16:	b580      	push	{r7, lr}
 8110f18:	b088      	sub	sp, #32
 8110f1a:	af00      	add	r7, sp, #0
 8110f1c:	6078      	str	r0, [r7, #4]
 8110f1e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8110f20:	683b      	ldr	r3, [r7, #0]
 8110f22:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8110f24:	2337      	movs	r3, #55	; 0x37
 8110f26:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8110f28:	f44f 7380 	mov.w	r3, #256	; 0x100
 8110f2c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8110f2e:	2300      	movs	r3, #0
 8110f30:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8110f32:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8110f36:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8110f38:	f107 0308 	add.w	r3, r7, #8
 8110f3c:	4619      	mov	r1, r3
 8110f3e:	6878      	ldr	r0, [r7, #4]
 8110f40:	f7ff fe26 	bl	8110b90 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8110f44:	f241 3288 	movw	r2, #5000	; 0x1388
 8110f48:	2137      	movs	r1, #55	; 0x37
 8110f4a:	6878      	ldr	r0, [r7, #4]
 8110f4c:	f000 f934 	bl	81111b8 <SDMMC_GetCmdResp1>
 8110f50:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8110f52:	69fb      	ldr	r3, [r7, #28]
}
 8110f54:	4618      	mov	r0, r3
 8110f56:	3720      	adds	r7, #32
 8110f58:	46bd      	mov	sp, r7
 8110f5a:	bd80      	pop	{r7, pc}

08110f5c <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8110f5c:	b580      	push	{r7, lr}
 8110f5e:	b088      	sub	sp, #32
 8110f60:	af00      	add	r7, sp, #0
 8110f62:	6078      	str	r0, [r7, #4]
 8110f64:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8110f66:	683b      	ldr	r3, [r7, #0]
 8110f68:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8110f6a:	2329      	movs	r3, #41	; 0x29
 8110f6c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8110f6e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8110f72:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8110f74:	2300      	movs	r3, #0
 8110f76:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8110f78:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8110f7c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8110f7e:	f107 0308 	add.w	r3, r7, #8
 8110f82:	4619      	mov	r1, r3
 8110f84:	6878      	ldr	r0, [r7, #4]
 8110f86:	f7ff fe03 	bl	8110b90 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8110f8a:	6878      	ldr	r0, [r7, #4]
 8110f8c:	f000 fa50 	bl	8111430 <SDMMC_GetCmdResp3>
 8110f90:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8110f92:	69fb      	ldr	r3, [r7, #28]
}
 8110f94:	4618      	mov	r0, r3
 8110f96:	3720      	adds	r7, #32
 8110f98:	46bd      	mov	sp, r7
 8110f9a:	bd80      	pop	{r7, pc}

08110f9c <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 8110f9c:	b580      	push	{r7, lr}
 8110f9e:	b088      	sub	sp, #32
 8110fa0:	af00      	add	r7, sp, #0
 8110fa2:	6078      	str	r0, [r7, #4]
 8110fa4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8110fa6:	683b      	ldr	r3, [r7, #0]
 8110fa8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8110faa:	2306      	movs	r3, #6
 8110fac:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8110fae:	f44f 7380 	mov.w	r3, #256	; 0x100
 8110fb2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8110fb4:	2300      	movs	r3, #0
 8110fb6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8110fb8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8110fbc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8110fbe:	f107 0308 	add.w	r3, r7, #8
 8110fc2:	4619      	mov	r1, r3
 8110fc4:	6878      	ldr	r0, [r7, #4]
 8110fc6:	f7ff fde3 	bl	8110b90 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8110fca:	f241 3288 	movw	r2, #5000	; 0x1388
 8110fce:	2106      	movs	r1, #6
 8110fd0:	6878      	ldr	r0, [r7, #4]
 8110fd2:	f000 f8f1 	bl	81111b8 <SDMMC_GetCmdResp1>
 8110fd6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8110fd8:	69fb      	ldr	r3, [r7, #28]
}
 8110fda:	4618      	mov	r0, r3
 8110fdc:	3720      	adds	r7, #32
 8110fde:	46bd      	mov	sp, r7
 8110fe0:	bd80      	pop	{r7, pc}

08110fe2 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 8110fe2:	b580      	push	{r7, lr}
 8110fe4:	b088      	sub	sp, #32
 8110fe6:	af00      	add	r7, sp, #0
 8110fe8:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8110fea:	2300      	movs	r3, #0
 8110fec:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8110fee:	2333      	movs	r3, #51	; 0x33
 8110ff0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8110ff2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8110ff6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8110ff8:	2300      	movs	r3, #0
 8110ffa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8110ffc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8111000:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8111002:	f107 0308 	add.w	r3, r7, #8
 8111006:	4619      	mov	r1, r3
 8111008:	6878      	ldr	r0, [r7, #4]
 811100a:	f7ff fdc1 	bl	8110b90 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 811100e:	f241 3288 	movw	r2, #5000	; 0x1388
 8111012:	2133      	movs	r1, #51	; 0x33
 8111014:	6878      	ldr	r0, [r7, #4]
 8111016:	f000 f8cf 	bl	81111b8 <SDMMC_GetCmdResp1>
 811101a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 811101c:	69fb      	ldr	r3, [r7, #28]
}
 811101e:	4618      	mov	r0, r3
 8111020:	3720      	adds	r7, #32
 8111022:	46bd      	mov	sp, r7
 8111024:	bd80      	pop	{r7, pc}

08111026 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8111026:	b580      	push	{r7, lr}
 8111028:	b088      	sub	sp, #32
 811102a:	af00      	add	r7, sp, #0
 811102c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 811102e:	2300      	movs	r3, #0
 8111030:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8111032:	2302      	movs	r3, #2
 8111034:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8111036:	f44f 7340 	mov.w	r3, #768	; 0x300
 811103a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 811103c:	2300      	movs	r3, #0
 811103e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8111040:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8111044:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8111046:	f107 0308 	add.w	r3, r7, #8
 811104a:	4619      	mov	r1, r3
 811104c:	6878      	ldr	r0, [r7, #4]
 811104e:	f7ff fd9f 	bl	8110b90 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8111052:	6878      	ldr	r0, [r7, #4]
 8111054:	f000 f9a2 	bl	811139c <SDMMC_GetCmdResp2>
 8111058:	61f8      	str	r0, [r7, #28]

  return errorstate;
 811105a:	69fb      	ldr	r3, [r7, #28]
}
 811105c:	4618      	mov	r0, r3
 811105e:	3720      	adds	r7, #32
 8111060:	46bd      	mov	sp, r7
 8111062:	bd80      	pop	{r7, pc}

08111064 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8111064:	b580      	push	{r7, lr}
 8111066:	b088      	sub	sp, #32
 8111068:	af00      	add	r7, sp, #0
 811106a:	6078      	str	r0, [r7, #4]
 811106c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 811106e:	683b      	ldr	r3, [r7, #0]
 8111070:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8111072:	2309      	movs	r3, #9
 8111074:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8111076:	f44f 7340 	mov.w	r3, #768	; 0x300
 811107a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 811107c:	2300      	movs	r3, #0
 811107e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8111080:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8111084:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8111086:	f107 0308 	add.w	r3, r7, #8
 811108a:	4619      	mov	r1, r3
 811108c:	6878      	ldr	r0, [r7, #4]
 811108e:	f7ff fd7f 	bl	8110b90 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8111092:	6878      	ldr	r0, [r7, #4]
 8111094:	f000 f982 	bl	811139c <SDMMC_GetCmdResp2>
 8111098:	61f8      	str	r0, [r7, #28]

  return errorstate;
 811109a:	69fb      	ldr	r3, [r7, #28]
}
 811109c:	4618      	mov	r0, r3
 811109e:	3720      	adds	r7, #32
 81110a0:	46bd      	mov	sp, r7
 81110a2:	bd80      	pop	{r7, pc}

081110a4 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 81110a4:	b580      	push	{r7, lr}
 81110a6:	b088      	sub	sp, #32
 81110a8:	af00      	add	r7, sp, #0
 81110aa:	6078      	str	r0, [r7, #4]
 81110ac:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 81110ae:	2300      	movs	r3, #0
 81110b0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 81110b2:	2303      	movs	r3, #3
 81110b4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 81110b6:	f44f 7380 	mov.w	r3, #256	; 0x100
 81110ba:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 81110bc:	2300      	movs	r3, #0
 81110be:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 81110c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 81110c4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 81110c6:	f107 0308 	add.w	r3, r7, #8
 81110ca:	4619      	mov	r1, r3
 81110cc:	6878      	ldr	r0, [r7, #4]
 81110ce:	f7ff fd5f 	bl	8110b90 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 81110d2:	683a      	ldr	r2, [r7, #0]
 81110d4:	2103      	movs	r1, #3
 81110d6:	6878      	ldr	r0, [r7, #4]
 81110d8:	f000 f9ea 	bl	81114b0 <SDMMC_GetCmdResp6>
 81110dc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 81110de:	69fb      	ldr	r3, [r7, #28]
}
 81110e0:	4618      	mov	r0, r3
 81110e2:	3720      	adds	r7, #32
 81110e4:	46bd      	mov	sp, r7
 81110e6:	bd80      	pop	{r7, pc}

081110e8 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 81110e8:	b580      	push	{r7, lr}
 81110ea:	b088      	sub	sp, #32
 81110ec:	af00      	add	r7, sp, #0
 81110ee:	6078      	str	r0, [r7, #4]
 81110f0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 81110f2:	683b      	ldr	r3, [r7, #0]
 81110f4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 81110f6:	230d      	movs	r3, #13
 81110f8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 81110fa:	f44f 7380 	mov.w	r3, #256	; 0x100
 81110fe:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8111100:	2300      	movs	r3, #0
 8111102:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8111104:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8111108:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 811110a:	f107 0308 	add.w	r3, r7, #8
 811110e:	4619      	mov	r1, r3
 8111110:	6878      	ldr	r0, [r7, #4]
 8111112:	f7ff fd3d 	bl	8110b90 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8111116:	f241 3288 	movw	r2, #5000	; 0x1388
 811111a:	210d      	movs	r1, #13
 811111c:	6878      	ldr	r0, [r7, #4]
 811111e:	f000 f84b 	bl	81111b8 <SDMMC_GetCmdResp1>
 8111122:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8111124:	69fb      	ldr	r3, [r7, #28]
}
 8111126:	4618      	mov	r0, r3
 8111128:	3720      	adds	r7, #32
 811112a:	46bd      	mov	sp, r7
 811112c:	bd80      	pop	{r7, pc}

0811112e <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 811112e:	b580      	push	{r7, lr}
 8111130:	b088      	sub	sp, #32
 8111132:	af00      	add	r7, sp, #0
 8111134:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8111136:	2300      	movs	r3, #0
 8111138:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 811113a:	230d      	movs	r3, #13
 811113c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 811113e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8111142:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8111144:	2300      	movs	r3, #0
 8111146:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8111148:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 811114c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 811114e:	f107 0308 	add.w	r3, r7, #8
 8111152:	4619      	mov	r1, r3
 8111154:	6878      	ldr	r0, [r7, #4]
 8111156:	f7ff fd1b 	bl	8110b90 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 811115a:	f241 3288 	movw	r2, #5000	; 0x1388
 811115e:	210d      	movs	r1, #13
 8111160:	6878      	ldr	r0, [r7, #4]
 8111162:	f000 f829 	bl	81111b8 <SDMMC_GetCmdResp1>
 8111166:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8111168:	69fb      	ldr	r3, [r7, #28]
}
 811116a:	4618      	mov	r0, r3
 811116c:	3720      	adds	r7, #32
 811116e:	46bd      	mov	sp, r7
 8111170:	bd80      	pop	{r7, pc}

08111172 <SDMMC_CmdVoltageSwitch>:
  *         condition register (OCR)
  * @param  None
  * @retval HAL status
  */
uint32_t SDMMC_CmdVoltageSwitch(SDMMC_TypeDef *SDMMCx)
{
 8111172:	b580      	push	{r7, lr}
 8111174:	b088      	sub	sp, #32
 8111176:	af00      	add	r7, sp, #0
 8111178:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0x00000000;
 811117a:	2300      	movs	r3, #0
 811117c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_VOLTAGE_SWITCH;
 811117e:	230b      	movs	r3, #11
 8111180:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8111182:	f44f 7380 	mov.w	r3, #256	; 0x100
 8111186:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8111188:	2300      	movs	r3, #0
 811118a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 811118c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8111190:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8111192:	f107 0308 	add.w	r3, r7, #8
 8111196:	4619      	mov	r1, r3
 8111198:	6878      	ldr	r0, [r7, #4]
 811119a:	f7ff fcf9 	bl	8110b90 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_VOLTAGE_SWITCH, SDMMC_CMDTIMEOUT);
 811119e:	f241 3288 	movw	r2, #5000	; 0x1388
 81111a2:	210b      	movs	r1, #11
 81111a4:	6878      	ldr	r0, [r7, #4]
 81111a6:	f000 f807 	bl	81111b8 <SDMMC_GetCmdResp1>
 81111aa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 81111ac:	69fb      	ldr	r3, [r7, #28]
}
 81111ae:	4618      	mov	r0, r3
 81111b0:	3720      	adds	r7, #32
 81111b2:	46bd      	mov	sp, r7
 81111b4:	bd80      	pop	{r7, pc}
	...

081111b8 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 81111b8:	b580      	push	{r7, lr}
 81111ba:	b088      	sub	sp, #32
 81111bc:	af00      	add	r7, sp, #0
 81111be:	60f8      	str	r0, [r7, #12]
 81111c0:	460b      	mov	r3, r1
 81111c2:	607a      	str	r2, [r7, #4]
 81111c4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 81111c6:	4b70      	ldr	r3, [pc, #448]	; (8111388 <SDMMC_GetCmdResp1+0x1d0>)
 81111c8:	681b      	ldr	r3, [r3, #0]
 81111ca:	4a70      	ldr	r2, [pc, #448]	; (811138c <SDMMC_GetCmdResp1+0x1d4>)
 81111cc:	fba2 2303 	umull	r2, r3, r2, r3
 81111d0:	0a5a      	lsrs	r2, r3, #9
 81111d2:	687b      	ldr	r3, [r7, #4]
 81111d4:	fb02 f303 	mul.w	r3, r2, r3
 81111d8:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 81111da:	69fb      	ldr	r3, [r7, #28]
 81111dc:	1e5a      	subs	r2, r3, #1
 81111de:	61fa      	str	r2, [r7, #28]
 81111e0:	2b00      	cmp	r3, #0
 81111e2:	d102      	bne.n	81111ea <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 81111e4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 81111e8:	e0c9      	b.n	811137e <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 81111ea:	68fb      	ldr	r3, [r7, #12]
 81111ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 81111ee:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 81111f0:	69ba      	ldr	r2, [r7, #24]
 81111f2:	4b67      	ldr	r3, [pc, #412]	; (8111390 <SDMMC_GetCmdResp1+0x1d8>)
 81111f4:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 81111f6:	2b00      	cmp	r3, #0
 81111f8:	d0ef      	beq.n	81111da <SDMMC_GetCmdResp1+0x22>
 81111fa:	69bb      	ldr	r3, [r7, #24]
 81111fc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8111200:	2b00      	cmp	r3, #0
 8111202:	d1ea      	bne.n	81111da <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8111204:	68fb      	ldr	r3, [r7, #12]
 8111206:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8111208:	f003 0304 	and.w	r3, r3, #4
 811120c:	2b00      	cmp	r3, #0
 811120e:	d004      	beq.n	811121a <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8111210:	68fb      	ldr	r3, [r7, #12]
 8111212:	2204      	movs	r2, #4
 8111214:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8111216:	2304      	movs	r3, #4
 8111218:	e0b1      	b.n	811137e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 811121a:	68fb      	ldr	r3, [r7, #12]
 811121c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 811121e:	f003 0301 	and.w	r3, r3, #1
 8111222:	2b00      	cmp	r3, #0
 8111224:	d004      	beq.n	8111230 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8111226:	68fb      	ldr	r3, [r7, #12]
 8111228:	2201      	movs	r2, #1
 811122a:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 811122c:	2301      	movs	r3, #1
 811122e:	e0a6      	b.n	811137e <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8111230:	68fb      	ldr	r3, [r7, #12]
 8111232:	4a58      	ldr	r2, [pc, #352]	; (8111394 <SDMMC_GetCmdResp1+0x1dc>)
 8111234:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8111236:	68f8      	ldr	r0, [r7, #12]
 8111238:	f7ff fcd4 	bl	8110be4 <SDMMC_GetCommandResponse>
 811123c:	4603      	mov	r3, r0
 811123e:	461a      	mov	r2, r3
 8111240:	7afb      	ldrb	r3, [r7, #11]
 8111242:	4293      	cmp	r3, r2
 8111244:	d001      	beq.n	811124a <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8111246:	2301      	movs	r3, #1
 8111248:	e099      	b.n	811137e <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 811124a:	2100      	movs	r1, #0
 811124c:	68f8      	ldr	r0, [r7, #12]
 811124e:	f7ff fcd6 	bl	8110bfe <SDMMC_GetResponse>
 8111252:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8111254:	697a      	ldr	r2, [r7, #20]
 8111256:	4b50      	ldr	r3, [pc, #320]	; (8111398 <SDMMC_GetCmdResp1+0x1e0>)
 8111258:	4013      	ands	r3, r2
 811125a:	2b00      	cmp	r3, #0
 811125c:	d101      	bne.n	8111262 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 811125e:	2300      	movs	r3, #0
 8111260:	e08d      	b.n	811137e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8111262:	697b      	ldr	r3, [r7, #20]
 8111264:	2b00      	cmp	r3, #0
 8111266:	da02      	bge.n	811126e <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8111268:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 811126c:	e087      	b.n	811137e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 811126e:	697b      	ldr	r3, [r7, #20]
 8111270:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8111274:	2b00      	cmp	r3, #0
 8111276:	d001      	beq.n	811127c <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8111278:	2340      	movs	r3, #64	; 0x40
 811127a:	e080      	b.n	811137e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 811127c:	697b      	ldr	r3, [r7, #20]
 811127e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8111282:	2b00      	cmp	r3, #0
 8111284:	d001      	beq.n	811128a <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8111286:	2380      	movs	r3, #128	; 0x80
 8111288:	e079      	b.n	811137e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 811128a:	697b      	ldr	r3, [r7, #20]
 811128c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8111290:	2b00      	cmp	r3, #0
 8111292:	d002      	beq.n	811129a <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8111294:	f44f 7380 	mov.w	r3, #256	; 0x100
 8111298:	e071      	b.n	811137e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 811129a:	697b      	ldr	r3, [r7, #20]
 811129c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 81112a0:	2b00      	cmp	r3, #0
 81112a2:	d002      	beq.n	81112aa <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 81112a4:	f44f 7300 	mov.w	r3, #512	; 0x200
 81112a8:	e069      	b.n	811137e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 81112aa:	697b      	ldr	r3, [r7, #20]
 81112ac:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 81112b0:	2b00      	cmp	r3, #0
 81112b2:	d002      	beq.n	81112ba <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 81112b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 81112b8:	e061      	b.n	811137e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 81112ba:	697b      	ldr	r3, [r7, #20]
 81112bc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 81112c0:	2b00      	cmp	r3, #0
 81112c2:	d002      	beq.n	81112ca <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 81112c4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 81112c8:	e059      	b.n	811137e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 81112ca:	697b      	ldr	r3, [r7, #20]
 81112cc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 81112d0:	2b00      	cmp	r3, #0
 81112d2:	d002      	beq.n	81112da <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 81112d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 81112d8:	e051      	b.n	811137e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 81112da:	697b      	ldr	r3, [r7, #20]
 81112dc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 81112e0:	2b00      	cmp	r3, #0
 81112e2:	d002      	beq.n	81112ea <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 81112e4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 81112e8:	e049      	b.n	811137e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 81112ea:	697b      	ldr	r3, [r7, #20]
 81112ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 81112f0:	2b00      	cmp	r3, #0
 81112f2:	d002      	beq.n	81112fa <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 81112f4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 81112f8:	e041      	b.n	811137e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 81112fa:	697b      	ldr	r3, [r7, #20]
 81112fc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8111300:	2b00      	cmp	r3, #0
 8111302:	d002      	beq.n	811130a <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8111304:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8111308:	e039      	b.n	811137e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 811130a:	697b      	ldr	r3, [r7, #20]
 811130c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8111310:	2b00      	cmp	r3, #0
 8111312:	d002      	beq.n	811131a <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8111314:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8111318:	e031      	b.n	811137e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 811131a:	697b      	ldr	r3, [r7, #20]
 811131c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8111320:	2b00      	cmp	r3, #0
 8111322:	d002      	beq.n	811132a <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8111324:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8111328:	e029      	b.n	811137e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 811132a:	697b      	ldr	r3, [r7, #20]
 811132c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8111330:	2b00      	cmp	r3, #0
 8111332:	d002      	beq.n	811133a <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8111334:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8111338:	e021      	b.n	811137e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 811133a:	697b      	ldr	r3, [r7, #20]
 811133c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8111340:	2b00      	cmp	r3, #0
 8111342:	d002      	beq.n	811134a <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8111344:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8111348:	e019      	b.n	811137e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 811134a:	697b      	ldr	r3, [r7, #20]
 811134c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8111350:	2b00      	cmp	r3, #0
 8111352:	d002      	beq.n	811135a <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8111354:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8111358:	e011      	b.n	811137e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 811135a:	697b      	ldr	r3, [r7, #20]
 811135c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8111360:	2b00      	cmp	r3, #0
 8111362:	d002      	beq.n	811136a <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8111364:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8111368:	e009      	b.n	811137e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 811136a:	697b      	ldr	r3, [r7, #20]
 811136c:	f003 0308 	and.w	r3, r3, #8
 8111370:	2b00      	cmp	r3, #0
 8111372:	d002      	beq.n	811137a <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8111374:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8111378:	e001      	b.n	811137e <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 811137a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 811137e:	4618      	mov	r0, r3
 8111380:	3720      	adds	r7, #32
 8111382:	46bd      	mov	sp, r7
 8111384:	bd80      	pop	{r7, pc}
 8111386:	bf00      	nop
 8111388:	10000000 	.word	0x10000000
 811138c:	10624dd3 	.word	0x10624dd3
 8111390:	00200045 	.word	0x00200045
 8111394:	002000c5 	.word	0x002000c5
 8111398:	fdffe008 	.word	0xfdffe008

0811139c <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 811139c:	b480      	push	{r7}
 811139e:	b085      	sub	sp, #20
 81113a0:	af00      	add	r7, sp, #0
 81113a2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 81113a4:	4b1f      	ldr	r3, [pc, #124]	; (8111424 <SDMMC_GetCmdResp2+0x88>)
 81113a6:	681b      	ldr	r3, [r3, #0]
 81113a8:	4a1f      	ldr	r2, [pc, #124]	; (8111428 <SDMMC_GetCmdResp2+0x8c>)
 81113aa:	fba2 2303 	umull	r2, r3, r2, r3
 81113ae:	0a5b      	lsrs	r3, r3, #9
 81113b0:	f241 3288 	movw	r2, #5000	; 0x1388
 81113b4:	fb02 f303 	mul.w	r3, r2, r3
 81113b8:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 81113ba:	68fb      	ldr	r3, [r7, #12]
 81113bc:	1e5a      	subs	r2, r3, #1
 81113be:	60fa      	str	r2, [r7, #12]
 81113c0:	2b00      	cmp	r3, #0
 81113c2:	d102      	bne.n	81113ca <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 81113c4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 81113c8:	e026      	b.n	8111418 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 81113ca:	687b      	ldr	r3, [r7, #4]
 81113cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 81113ce:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 81113d0:	68bb      	ldr	r3, [r7, #8]
 81113d2:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 81113d6:	2b00      	cmp	r3, #0
 81113d8:	d0ef      	beq.n	81113ba <SDMMC_GetCmdResp2+0x1e>
 81113da:	68bb      	ldr	r3, [r7, #8]
 81113dc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 81113e0:	2b00      	cmp	r3, #0
 81113e2:	d1ea      	bne.n	81113ba <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 81113e4:	687b      	ldr	r3, [r7, #4]
 81113e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 81113e8:	f003 0304 	and.w	r3, r3, #4
 81113ec:	2b00      	cmp	r3, #0
 81113ee:	d004      	beq.n	81113fa <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 81113f0:	687b      	ldr	r3, [r7, #4]
 81113f2:	2204      	movs	r2, #4
 81113f4:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 81113f6:	2304      	movs	r3, #4
 81113f8:	e00e      	b.n	8111418 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 81113fa:	687b      	ldr	r3, [r7, #4]
 81113fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 81113fe:	f003 0301 	and.w	r3, r3, #1
 8111402:	2b00      	cmp	r3, #0
 8111404:	d004      	beq.n	8111410 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8111406:	687b      	ldr	r3, [r7, #4]
 8111408:	2201      	movs	r2, #1
 811140a:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 811140c:	2301      	movs	r3, #1
 811140e:	e003      	b.n	8111418 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8111410:	687b      	ldr	r3, [r7, #4]
 8111412:	4a06      	ldr	r2, [pc, #24]	; (811142c <SDMMC_GetCmdResp2+0x90>)
 8111414:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8111416:	2300      	movs	r3, #0
}
 8111418:	4618      	mov	r0, r3
 811141a:	3714      	adds	r7, #20
 811141c:	46bd      	mov	sp, r7
 811141e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8111422:	4770      	bx	lr
 8111424:	10000000 	.word	0x10000000
 8111428:	10624dd3 	.word	0x10624dd3
 811142c:	002000c5 	.word	0x002000c5

08111430 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8111430:	b480      	push	{r7}
 8111432:	b085      	sub	sp, #20
 8111434:	af00      	add	r7, sp, #0
 8111436:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8111438:	4b1a      	ldr	r3, [pc, #104]	; (81114a4 <SDMMC_GetCmdResp3+0x74>)
 811143a:	681b      	ldr	r3, [r3, #0]
 811143c:	4a1a      	ldr	r2, [pc, #104]	; (81114a8 <SDMMC_GetCmdResp3+0x78>)
 811143e:	fba2 2303 	umull	r2, r3, r2, r3
 8111442:	0a5b      	lsrs	r3, r3, #9
 8111444:	f241 3288 	movw	r2, #5000	; 0x1388
 8111448:	fb02 f303 	mul.w	r3, r2, r3
 811144c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 811144e:	68fb      	ldr	r3, [r7, #12]
 8111450:	1e5a      	subs	r2, r3, #1
 8111452:	60fa      	str	r2, [r7, #12]
 8111454:	2b00      	cmp	r3, #0
 8111456:	d102      	bne.n	811145e <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8111458:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 811145c:	e01b      	b.n	8111496 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 811145e:	687b      	ldr	r3, [r7, #4]
 8111460:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8111462:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8111464:	68bb      	ldr	r3, [r7, #8]
 8111466:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 811146a:	2b00      	cmp	r3, #0
 811146c:	d0ef      	beq.n	811144e <SDMMC_GetCmdResp3+0x1e>
 811146e:	68bb      	ldr	r3, [r7, #8]
 8111470:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8111474:	2b00      	cmp	r3, #0
 8111476:	d1ea      	bne.n	811144e <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8111478:	687b      	ldr	r3, [r7, #4]
 811147a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 811147c:	f003 0304 	and.w	r3, r3, #4
 8111480:	2b00      	cmp	r3, #0
 8111482:	d004      	beq.n	811148e <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8111484:	687b      	ldr	r3, [r7, #4]
 8111486:	2204      	movs	r2, #4
 8111488:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 811148a:	2304      	movs	r3, #4
 811148c:	e003      	b.n	8111496 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 811148e:	687b      	ldr	r3, [r7, #4]
 8111490:	4a06      	ldr	r2, [pc, #24]	; (81114ac <SDMMC_GetCmdResp3+0x7c>)
 8111492:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8111494:	2300      	movs	r3, #0
}
 8111496:	4618      	mov	r0, r3
 8111498:	3714      	adds	r7, #20
 811149a:	46bd      	mov	sp, r7
 811149c:	f85d 7b04 	ldr.w	r7, [sp], #4
 81114a0:	4770      	bx	lr
 81114a2:	bf00      	nop
 81114a4:	10000000 	.word	0x10000000
 81114a8:	10624dd3 	.word	0x10624dd3
 81114ac:	002000c5 	.word	0x002000c5

081114b0 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 81114b0:	b580      	push	{r7, lr}
 81114b2:	b088      	sub	sp, #32
 81114b4:	af00      	add	r7, sp, #0
 81114b6:	60f8      	str	r0, [r7, #12]
 81114b8:	460b      	mov	r3, r1
 81114ba:	607a      	str	r2, [r7, #4]
 81114bc:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 81114be:	4b35      	ldr	r3, [pc, #212]	; (8111594 <SDMMC_GetCmdResp6+0xe4>)
 81114c0:	681b      	ldr	r3, [r3, #0]
 81114c2:	4a35      	ldr	r2, [pc, #212]	; (8111598 <SDMMC_GetCmdResp6+0xe8>)
 81114c4:	fba2 2303 	umull	r2, r3, r2, r3
 81114c8:	0a5b      	lsrs	r3, r3, #9
 81114ca:	f241 3288 	movw	r2, #5000	; 0x1388
 81114ce:	fb02 f303 	mul.w	r3, r2, r3
 81114d2:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 81114d4:	69fb      	ldr	r3, [r7, #28]
 81114d6:	1e5a      	subs	r2, r3, #1
 81114d8:	61fa      	str	r2, [r7, #28]
 81114da:	2b00      	cmp	r3, #0
 81114dc:	d102      	bne.n	81114e4 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 81114de:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 81114e2:	e052      	b.n	811158a <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 81114e4:	68fb      	ldr	r3, [r7, #12]
 81114e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 81114e8:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 81114ea:	69bb      	ldr	r3, [r7, #24]
 81114ec:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 81114f0:	2b00      	cmp	r3, #0
 81114f2:	d0ef      	beq.n	81114d4 <SDMMC_GetCmdResp6+0x24>
 81114f4:	69bb      	ldr	r3, [r7, #24]
 81114f6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 81114fa:	2b00      	cmp	r3, #0
 81114fc:	d1ea      	bne.n	81114d4 <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 81114fe:	68fb      	ldr	r3, [r7, #12]
 8111500:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8111502:	f003 0304 	and.w	r3, r3, #4
 8111506:	2b00      	cmp	r3, #0
 8111508:	d004      	beq.n	8111514 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 811150a:	68fb      	ldr	r3, [r7, #12]
 811150c:	2204      	movs	r2, #4
 811150e:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8111510:	2304      	movs	r3, #4
 8111512:	e03a      	b.n	811158a <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8111514:	68fb      	ldr	r3, [r7, #12]
 8111516:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8111518:	f003 0301 	and.w	r3, r3, #1
 811151c:	2b00      	cmp	r3, #0
 811151e:	d004      	beq.n	811152a <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8111520:	68fb      	ldr	r3, [r7, #12]
 8111522:	2201      	movs	r2, #1
 8111524:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8111526:	2301      	movs	r3, #1
 8111528:	e02f      	b.n	811158a <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 811152a:	68f8      	ldr	r0, [r7, #12]
 811152c:	f7ff fb5a 	bl	8110be4 <SDMMC_GetCommandResponse>
 8111530:	4603      	mov	r3, r0
 8111532:	461a      	mov	r2, r3
 8111534:	7afb      	ldrb	r3, [r7, #11]
 8111536:	4293      	cmp	r3, r2
 8111538:	d001      	beq.n	811153e <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 811153a:	2301      	movs	r3, #1
 811153c:	e025      	b.n	811158a <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 811153e:	68fb      	ldr	r3, [r7, #12]
 8111540:	4a16      	ldr	r2, [pc, #88]	; (811159c <SDMMC_GetCmdResp6+0xec>)
 8111542:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8111544:	2100      	movs	r1, #0
 8111546:	68f8      	ldr	r0, [r7, #12]
 8111548:	f7ff fb59 	bl	8110bfe <SDMMC_GetResponse>
 811154c:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 811154e:	697b      	ldr	r3, [r7, #20]
 8111550:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8111554:	2b00      	cmp	r3, #0
 8111556:	d106      	bne.n	8111566 <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 8111558:	697b      	ldr	r3, [r7, #20]
 811155a:	0c1b      	lsrs	r3, r3, #16
 811155c:	b29a      	uxth	r2, r3
 811155e:	687b      	ldr	r3, [r7, #4]
 8111560:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 8111562:	2300      	movs	r3, #0
 8111564:	e011      	b.n	811158a <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8111566:	697b      	ldr	r3, [r7, #20]
 8111568:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 811156c:	2b00      	cmp	r3, #0
 811156e:	d002      	beq.n	8111576 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8111570:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8111574:	e009      	b.n	811158a <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8111576:	697b      	ldr	r3, [r7, #20]
 8111578:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 811157c:	2b00      	cmp	r3, #0
 811157e:	d002      	beq.n	8111586 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8111580:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8111584:	e001      	b.n	811158a <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8111586:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 811158a:	4618      	mov	r0, r3
 811158c:	3720      	adds	r7, #32
 811158e:	46bd      	mov	sp, r7
 8111590:	bd80      	pop	{r7, pc}
 8111592:	bf00      	nop
 8111594:	10000000 	.word	0x10000000
 8111598:	10624dd3 	.word	0x10624dd3
 811159c:	002000c5 	.word	0x002000c5

081115a0 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 81115a0:	b480      	push	{r7}
 81115a2:	b085      	sub	sp, #20
 81115a4:	af00      	add	r7, sp, #0
 81115a6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 81115a8:	4b22      	ldr	r3, [pc, #136]	; (8111634 <SDMMC_GetCmdResp7+0x94>)
 81115aa:	681b      	ldr	r3, [r3, #0]
 81115ac:	4a22      	ldr	r2, [pc, #136]	; (8111638 <SDMMC_GetCmdResp7+0x98>)
 81115ae:	fba2 2303 	umull	r2, r3, r2, r3
 81115b2:	0a5b      	lsrs	r3, r3, #9
 81115b4:	f241 3288 	movw	r2, #5000	; 0x1388
 81115b8:	fb02 f303 	mul.w	r3, r2, r3
 81115bc:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 81115be:	68fb      	ldr	r3, [r7, #12]
 81115c0:	1e5a      	subs	r2, r3, #1
 81115c2:	60fa      	str	r2, [r7, #12]
 81115c4:	2b00      	cmp	r3, #0
 81115c6:	d102      	bne.n	81115ce <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 81115c8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 81115cc:	e02c      	b.n	8111628 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 81115ce:	687b      	ldr	r3, [r7, #4]
 81115d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 81115d2:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 81115d4:	68bb      	ldr	r3, [r7, #8]
 81115d6:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 81115da:	2b00      	cmp	r3, #0
 81115dc:	d0ef      	beq.n	81115be <SDMMC_GetCmdResp7+0x1e>
 81115de:	68bb      	ldr	r3, [r7, #8]
 81115e0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 81115e4:	2b00      	cmp	r3, #0
 81115e6:	d1ea      	bne.n	81115be <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 81115e8:	687b      	ldr	r3, [r7, #4]
 81115ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 81115ec:	f003 0304 	and.w	r3, r3, #4
 81115f0:	2b00      	cmp	r3, #0
 81115f2:	d004      	beq.n	81115fe <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 81115f4:	687b      	ldr	r3, [r7, #4]
 81115f6:	2204      	movs	r2, #4
 81115f8:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 81115fa:	2304      	movs	r3, #4
 81115fc:	e014      	b.n	8111628 <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 81115fe:	687b      	ldr	r3, [r7, #4]
 8111600:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8111602:	f003 0301 	and.w	r3, r3, #1
 8111606:	2b00      	cmp	r3, #0
 8111608:	d004      	beq.n	8111614 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 811160a:	687b      	ldr	r3, [r7, #4]
 811160c:	2201      	movs	r2, #1
 811160e:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8111610:	2301      	movs	r3, #1
 8111612:	e009      	b.n	8111628 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8111614:	687b      	ldr	r3, [r7, #4]
 8111616:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8111618:	f003 0340 	and.w	r3, r3, #64	; 0x40
 811161c:	2b00      	cmp	r3, #0
 811161e:	d002      	beq.n	8111626 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8111620:	687b      	ldr	r3, [r7, #4]
 8111622:	2240      	movs	r2, #64	; 0x40
 8111624:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8111626:	2300      	movs	r3, #0

}
 8111628:	4618      	mov	r0, r3
 811162a:	3714      	adds	r7, #20
 811162c:	46bd      	mov	sp, r7
 811162e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8111632:	4770      	bx	lr
 8111634:	10000000 	.word	0x10000000
 8111638:	10624dd3 	.word	0x10624dd3

0811163c <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 811163c:	b480      	push	{r7}
 811163e:	b085      	sub	sp, #20
 8111640:	af00      	add	r7, sp, #0
 8111642:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8111644:	4b11      	ldr	r3, [pc, #68]	; (811168c <SDMMC_GetCmdError+0x50>)
 8111646:	681b      	ldr	r3, [r3, #0]
 8111648:	4a11      	ldr	r2, [pc, #68]	; (8111690 <SDMMC_GetCmdError+0x54>)
 811164a:	fba2 2303 	umull	r2, r3, r2, r3
 811164e:	0a5b      	lsrs	r3, r3, #9
 8111650:	f241 3288 	movw	r2, #5000	; 0x1388
 8111654:	fb02 f303 	mul.w	r3, r2, r3
 8111658:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 811165a:	68fb      	ldr	r3, [r7, #12]
 811165c:	1e5a      	subs	r2, r3, #1
 811165e:	60fa      	str	r2, [r7, #12]
 8111660:	2b00      	cmp	r3, #0
 8111662:	d102      	bne.n	811166a <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8111664:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8111668:	e009      	b.n	811167e <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 811166a:	687b      	ldr	r3, [r7, #4]
 811166c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 811166e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8111672:	2b00      	cmp	r3, #0
 8111674:	d0f1      	beq.n	811165a <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8111676:	687b      	ldr	r3, [r7, #4]
 8111678:	4a06      	ldr	r2, [pc, #24]	; (8111694 <SDMMC_GetCmdError+0x58>)
 811167a:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 811167c:	2300      	movs	r3, #0
}
 811167e:	4618      	mov	r0, r3
 8111680:	3714      	adds	r7, #20
 8111682:	46bd      	mov	sp, r7
 8111684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8111688:	4770      	bx	lr
 811168a:	bf00      	nop
 811168c:	10000000 	.word	0x10000000
 8111690:	10624dd3 	.word	0x10624dd3
 8111694:	002000c5 	.word	0x002000c5

08111698 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8111698:	b480      	push	{r7}
 811169a:	b087      	sub	sp, #28
 811169c:	af00      	add	r7, sp, #0
 811169e:	60f8      	str	r0, [r7, #12]
 81116a0:	60b9      	str	r1, [r7, #8]
 81116a2:	4613      	mov	r3, r2
 81116a4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 81116a6:	79fb      	ldrb	r3, [r7, #7]
 81116a8:	2b02      	cmp	r3, #2
 81116aa:	d165      	bne.n	8111778 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 81116ac:	68bb      	ldr	r3, [r7, #8]
 81116ae:	4a41      	ldr	r2, [pc, #260]	; (81117b4 <USB_SetTurnaroundTime+0x11c>)
 81116b0:	4293      	cmp	r3, r2
 81116b2:	d906      	bls.n	81116c2 <USB_SetTurnaroundTime+0x2a>
 81116b4:	68bb      	ldr	r3, [r7, #8]
 81116b6:	4a40      	ldr	r2, [pc, #256]	; (81117b8 <USB_SetTurnaroundTime+0x120>)
 81116b8:	4293      	cmp	r3, r2
 81116ba:	d202      	bcs.n	81116c2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 81116bc:	230f      	movs	r3, #15
 81116be:	617b      	str	r3, [r7, #20]
 81116c0:	e062      	b.n	8111788 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 81116c2:	68bb      	ldr	r3, [r7, #8]
 81116c4:	4a3c      	ldr	r2, [pc, #240]	; (81117b8 <USB_SetTurnaroundTime+0x120>)
 81116c6:	4293      	cmp	r3, r2
 81116c8:	d306      	bcc.n	81116d8 <USB_SetTurnaroundTime+0x40>
 81116ca:	68bb      	ldr	r3, [r7, #8]
 81116cc:	4a3b      	ldr	r2, [pc, #236]	; (81117bc <USB_SetTurnaroundTime+0x124>)
 81116ce:	4293      	cmp	r3, r2
 81116d0:	d202      	bcs.n	81116d8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 81116d2:	230e      	movs	r3, #14
 81116d4:	617b      	str	r3, [r7, #20]
 81116d6:	e057      	b.n	8111788 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 81116d8:	68bb      	ldr	r3, [r7, #8]
 81116da:	4a38      	ldr	r2, [pc, #224]	; (81117bc <USB_SetTurnaroundTime+0x124>)
 81116dc:	4293      	cmp	r3, r2
 81116de:	d306      	bcc.n	81116ee <USB_SetTurnaroundTime+0x56>
 81116e0:	68bb      	ldr	r3, [r7, #8]
 81116e2:	4a37      	ldr	r2, [pc, #220]	; (81117c0 <USB_SetTurnaroundTime+0x128>)
 81116e4:	4293      	cmp	r3, r2
 81116e6:	d202      	bcs.n	81116ee <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 81116e8:	230d      	movs	r3, #13
 81116ea:	617b      	str	r3, [r7, #20]
 81116ec:	e04c      	b.n	8111788 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 81116ee:	68bb      	ldr	r3, [r7, #8]
 81116f0:	4a33      	ldr	r2, [pc, #204]	; (81117c0 <USB_SetTurnaroundTime+0x128>)
 81116f2:	4293      	cmp	r3, r2
 81116f4:	d306      	bcc.n	8111704 <USB_SetTurnaroundTime+0x6c>
 81116f6:	68bb      	ldr	r3, [r7, #8]
 81116f8:	4a32      	ldr	r2, [pc, #200]	; (81117c4 <USB_SetTurnaroundTime+0x12c>)
 81116fa:	4293      	cmp	r3, r2
 81116fc:	d802      	bhi.n	8111704 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 81116fe:	230c      	movs	r3, #12
 8111700:	617b      	str	r3, [r7, #20]
 8111702:	e041      	b.n	8111788 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8111704:	68bb      	ldr	r3, [r7, #8]
 8111706:	4a2f      	ldr	r2, [pc, #188]	; (81117c4 <USB_SetTurnaroundTime+0x12c>)
 8111708:	4293      	cmp	r3, r2
 811170a:	d906      	bls.n	811171a <USB_SetTurnaroundTime+0x82>
 811170c:	68bb      	ldr	r3, [r7, #8]
 811170e:	4a2e      	ldr	r2, [pc, #184]	; (81117c8 <USB_SetTurnaroundTime+0x130>)
 8111710:	4293      	cmp	r3, r2
 8111712:	d802      	bhi.n	811171a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8111714:	230b      	movs	r3, #11
 8111716:	617b      	str	r3, [r7, #20]
 8111718:	e036      	b.n	8111788 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 811171a:	68bb      	ldr	r3, [r7, #8]
 811171c:	4a2a      	ldr	r2, [pc, #168]	; (81117c8 <USB_SetTurnaroundTime+0x130>)
 811171e:	4293      	cmp	r3, r2
 8111720:	d906      	bls.n	8111730 <USB_SetTurnaroundTime+0x98>
 8111722:	68bb      	ldr	r3, [r7, #8]
 8111724:	4a29      	ldr	r2, [pc, #164]	; (81117cc <USB_SetTurnaroundTime+0x134>)
 8111726:	4293      	cmp	r3, r2
 8111728:	d802      	bhi.n	8111730 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 811172a:	230a      	movs	r3, #10
 811172c:	617b      	str	r3, [r7, #20]
 811172e:	e02b      	b.n	8111788 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8111730:	68bb      	ldr	r3, [r7, #8]
 8111732:	4a26      	ldr	r2, [pc, #152]	; (81117cc <USB_SetTurnaroundTime+0x134>)
 8111734:	4293      	cmp	r3, r2
 8111736:	d906      	bls.n	8111746 <USB_SetTurnaroundTime+0xae>
 8111738:	68bb      	ldr	r3, [r7, #8]
 811173a:	4a25      	ldr	r2, [pc, #148]	; (81117d0 <USB_SetTurnaroundTime+0x138>)
 811173c:	4293      	cmp	r3, r2
 811173e:	d202      	bcs.n	8111746 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8111740:	2309      	movs	r3, #9
 8111742:	617b      	str	r3, [r7, #20]
 8111744:	e020      	b.n	8111788 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8111746:	68bb      	ldr	r3, [r7, #8]
 8111748:	4a21      	ldr	r2, [pc, #132]	; (81117d0 <USB_SetTurnaroundTime+0x138>)
 811174a:	4293      	cmp	r3, r2
 811174c:	d306      	bcc.n	811175c <USB_SetTurnaroundTime+0xc4>
 811174e:	68bb      	ldr	r3, [r7, #8]
 8111750:	4a20      	ldr	r2, [pc, #128]	; (81117d4 <USB_SetTurnaroundTime+0x13c>)
 8111752:	4293      	cmp	r3, r2
 8111754:	d802      	bhi.n	811175c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8111756:	2308      	movs	r3, #8
 8111758:	617b      	str	r3, [r7, #20]
 811175a:	e015      	b.n	8111788 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 811175c:	68bb      	ldr	r3, [r7, #8]
 811175e:	4a1d      	ldr	r2, [pc, #116]	; (81117d4 <USB_SetTurnaroundTime+0x13c>)
 8111760:	4293      	cmp	r3, r2
 8111762:	d906      	bls.n	8111772 <USB_SetTurnaroundTime+0xda>
 8111764:	68bb      	ldr	r3, [r7, #8]
 8111766:	4a1c      	ldr	r2, [pc, #112]	; (81117d8 <USB_SetTurnaroundTime+0x140>)
 8111768:	4293      	cmp	r3, r2
 811176a:	d202      	bcs.n	8111772 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 811176c:	2307      	movs	r3, #7
 811176e:	617b      	str	r3, [r7, #20]
 8111770:	e00a      	b.n	8111788 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8111772:	2306      	movs	r3, #6
 8111774:	617b      	str	r3, [r7, #20]
 8111776:	e007      	b.n	8111788 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8111778:	79fb      	ldrb	r3, [r7, #7]
 811177a:	2b00      	cmp	r3, #0
 811177c:	d102      	bne.n	8111784 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 811177e:	2309      	movs	r3, #9
 8111780:	617b      	str	r3, [r7, #20]
 8111782:	e001      	b.n	8111788 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8111784:	2309      	movs	r3, #9
 8111786:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8111788:	68fb      	ldr	r3, [r7, #12]
 811178a:	68db      	ldr	r3, [r3, #12]
 811178c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8111790:	68fb      	ldr	r3, [r7, #12]
 8111792:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8111794:	68fb      	ldr	r3, [r7, #12]
 8111796:	68da      	ldr	r2, [r3, #12]
 8111798:	697b      	ldr	r3, [r7, #20]
 811179a:	029b      	lsls	r3, r3, #10
 811179c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 81117a0:	431a      	orrs	r2, r3
 81117a2:	68fb      	ldr	r3, [r7, #12]
 81117a4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 81117a6:	2300      	movs	r3, #0
}
 81117a8:	4618      	mov	r0, r3
 81117aa:	371c      	adds	r7, #28
 81117ac:	46bd      	mov	sp, r7
 81117ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 81117b2:	4770      	bx	lr
 81117b4:	00d8acbf 	.word	0x00d8acbf
 81117b8:	00e4e1c0 	.word	0x00e4e1c0
 81117bc:	00f42400 	.word	0x00f42400
 81117c0:	01067380 	.word	0x01067380
 81117c4:	011a499f 	.word	0x011a499f
 81117c8:	01312cff 	.word	0x01312cff
 81117cc:	014ca43f 	.word	0x014ca43f
 81117d0:	016e3600 	.word	0x016e3600
 81117d4:	01a6ab1f 	.word	0x01a6ab1f
 81117d8:	01e84800 	.word	0x01e84800

081117dc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 81117dc:	b480      	push	{r7}
 81117de:	b085      	sub	sp, #20
 81117e0:	af00      	add	r7, sp, #0
 81117e2:	6078      	str	r0, [r7, #4]
 81117e4:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 81117e6:	2300      	movs	r3, #0
 81117e8:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 81117ea:	683b      	ldr	r3, [r7, #0]
 81117ec:	019b      	lsls	r3, r3, #6
 81117ee:	f043 0220 	orr.w	r2, r3, #32
 81117f2:	687b      	ldr	r3, [r7, #4]
 81117f4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 81117f6:	68fb      	ldr	r3, [r7, #12]
 81117f8:	3301      	adds	r3, #1
 81117fa:	60fb      	str	r3, [r7, #12]
 81117fc:	68fb      	ldr	r3, [r7, #12]
 81117fe:	4a09      	ldr	r2, [pc, #36]	; (8111824 <USB_FlushTxFifo+0x48>)
 8111800:	4293      	cmp	r3, r2
 8111802:	d901      	bls.n	8111808 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8111804:	2303      	movs	r3, #3
 8111806:	e006      	b.n	8111816 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8111808:	687b      	ldr	r3, [r7, #4]
 811180a:	691b      	ldr	r3, [r3, #16]
 811180c:	f003 0320 	and.w	r3, r3, #32
 8111810:	2b20      	cmp	r3, #32
 8111812:	d0f0      	beq.n	81117f6 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8111814:	2300      	movs	r3, #0
}
 8111816:	4618      	mov	r0, r3
 8111818:	3714      	adds	r7, #20
 811181a:	46bd      	mov	sp, r7
 811181c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8111820:	4770      	bx	lr
 8111822:	bf00      	nop
 8111824:	00030d40 	.word	0x00030d40

08111828 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8111828:	b480      	push	{r7}
 811182a:	b087      	sub	sp, #28
 811182c:	af00      	add	r7, sp, #0
 811182e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8111830:	687b      	ldr	r3, [r7, #4]
 8111832:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8111834:	693b      	ldr	r3, [r7, #16]
 8111836:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 811183a:	689b      	ldr	r3, [r3, #8]
 811183c:	f003 0306 	and.w	r3, r3, #6
 8111840:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8111842:	68fb      	ldr	r3, [r7, #12]
 8111844:	2b00      	cmp	r3, #0
 8111846:	d102      	bne.n	811184e <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8111848:	2300      	movs	r3, #0
 811184a:	75fb      	strb	r3, [r7, #23]
 811184c:	e00a      	b.n	8111864 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 811184e:	68fb      	ldr	r3, [r7, #12]
 8111850:	2b02      	cmp	r3, #2
 8111852:	d002      	beq.n	811185a <USB_GetDevSpeed+0x32>
 8111854:	68fb      	ldr	r3, [r7, #12]
 8111856:	2b06      	cmp	r3, #6
 8111858:	d102      	bne.n	8111860 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 811185a:	2302      	movs	r3, #2
 811185c:	75fb      	strb	r3, [r7, #23]
 811185e:	e001      	b.n	8111864 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8111860:	230f      	movs	r3, #15
 8111862:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8111864:	7dfb      	ldrb	r3, [r7, #23]
}
 8111866:	4618      	mov	r0, r3
 8111868:	371c      	adds	r7, #28
 811186a:	46bd      	mov	sp, r7
 811186c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8111870:	4770      	bx	lr

08111872 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8111872:	b480      	push	{r7}
 8111874:	b085      	sub	sp, #20
 8111876:	af00      	add	r7, sp, #0
 8111878:	6078      	str	r0, [r7, #4]
 811187a:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 811187c:	687b      	ldr	r3, [r7, #4]
 811187e:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8111880:	683b      	ldr	r3, [r7, #0]
 8111882:	781b      	ldrb	r3, [r3, #0]
 8111884:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8111886:	683b      	ldr	r3, [r7, #0]
 8111888:	785b      	ldrb	r3, [r3, #1]
 811188a:	2b01      	cmp	r3, #1
 811188c:	d13a      	bne.n	8111904 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 811188e:	68fb      	ldr	r3, [r7, #12]
 8111890:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8111894:	69da      	ldr	r2, [r3, #28]
 8111896:	683b      	ldr	r3, [r7, #0]
 8111898:	781b      	ldrb	r3, [r3, #0]
 811189a:	f003 030f 	and.w	r3, r3, #15
 811189e:	2101      	movs	r1, #1
 81118a0:	fa01 f303 	lsl.w	r3, r1, r3
 81118a4:	b29b      	uxth	r3, r3
 81118a6:	68f9      	ldr	r1, [r7, #12]
 81118a8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 81118ac:	4313      	orrs	r3, r2
 81118ae:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 81118b0:	68bb      	ldr	r3, [r7, #8]
 81118b2:	015a      	lsls	r2, r3, #5
 81118b4:	68fb      	ldr	r3, [r7, #12]
 81118b6:	4413      	add	r3, r2
 81118b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 81118bc:	681b      	ldr	r3, [r3, #0]
 81118be:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 81118c2:	2b00      	cmp	r3, #0
 81118c4:	d155      	bne.n	8111972 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 81118c6:	68bb      	ldr	r3, [r7, #8]
 81118c8:	015a      	lsls	r2, r3, #5
 81118ca:	68fb      	ldr	r3, [r7, #12]
 81118cc:	4413      	add	r3, r2
 81118ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 81118d2:	681a      	ldr	r2, [r3, #0]
 81118d4:	683b      	ldr	r3, [r7, #0]
 81118d6:	689b      	ldr	r3, [r3, #8]
 81118d8:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 81118dc:	683b      	ldr	r3, [r7, #0]
 81118de:	78db      	ldrb	r3, [r3, #3]
 81118e0:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 81118e2:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 81118e4:	68bb      	ldr	r3, [r7, #8]
 81118e6:	059b      	lsls	r3, r3, #22
 81118e8:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 81118ea:	4313      	orrs	r3, r2
 81118ec:	68ba      	ldr	r2, [r7, #8]
 81118ee:	0151      	lsls	r1, r2, #5
 81118f0:	68fa      	ldr	r2, [r7, #12]
 81118f2:	440a      	add	r2, r1
 81118f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 81118f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 81118fc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8111900:	6013      	str	r3, [r2, #0]
 8111902:	e036      	b.n	8111972 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8111904:	68fb      	ldr	r3, [r7, #12]
 8111906:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 811190a:	69da      	ldr	r2, [r3, #28]
 811190c:	683b      	ldr	r3, [r7, #0]
 811190e:	781b      	ldrb	r3, [r3, #0]
 8111910:	f003 030f 	and.w	r3, r3, #15
 8111914:	2101      	movs	r1, #1
 8111916:	fa01 f303 	lsl.w	r3, r1, r3
 811191a:	041b      	lsls	r3, r3, #16
 811191c:	68f9      	ldr	r1, [r7, #12]
 811191e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8111922:	4313      	orrs	r3, r2
 8111924:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8111926:	68bb      	ldr	r3, [r7, #8]
 8111928:	015a      	lsls	r2, r3, #5
 811192a:	68fb      	ldr	r3, [r7, #12]
 811192c:	4413      	add	r3, r2
 811192e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8111932:	681b      	ldr	r3, [r3, #0]
 8111934:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8111938:	2b00      	cmp	r3, #0
 811193a:	d11a      	bne.n	8111972 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 811193c:	68bb      	ldr	r3, [r7, #8]
 811193e:	015a      	lsls	r2, r3, #5
 8111940:	68fb      	ldr	r3, [r7, #12]
 8111942:	4413      	add	r3, r2
 8111944:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8111948:	681a      	ldr	r2, [r3, #0]
 811194a:	683b      	ldr	r3, [r7, #0]
 811194c:	689b      	ldr	r3, [r3, #8]
 811194e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8111952:	683b      	ldr	r3, [r7, #0]
 8111954:	78db      	ldrb	r3, [r3, #3]
 8111956:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8111958:	430b      	orrs	r3, r1
 811195a:	4313      	orrs	r3, r2
 811195c:	68ba      	ldr	r2, [r7, #8]
 811195e:	0151      	lsls	r1, r2, #5
 8111960:	68fa      	ldr	r2, [r7, #12]
 8111962:	440a      	add	r2, r1
 8111964:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8111968:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 811196c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8111970:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8111972:	2300      	movs	r3, #0
}
 8111974:	4618      	mov	r0, r3
 8111976:	3714      	adds	r7, #20
 8111978:	46bd      	mov	sp, r7
 811197a:	f85d 7b04 	ldr.w	r7, [sp], #4
 811197e:	4770      	bx	lr

08111980 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8111980:	b580      	push	{r7, lr}
 8111982:	b08a      	sub	sp, #40	; 0x28
 8111984:	af02      	add	r7, sp, #8
 8111986:	60f8      	str	r0, [r7, #12]
 8111988:	60b9      	str	r1, [r7, #8]
 811198a:	4613      	mov	r3, r2
 811198c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 811198e:	68fb      	ldr	r3, [r7, #12]
 8111990:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8111992:	68bb      	ldr	r3, [r7, #8]
 8111994:	781b      	ldrb	r3, [r3, #0]
 8111996:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8111998:	68bb      	ldr	r3, [r7, #8]
 811199a:	785b      	ldrb	r3, [r3, #1]
 811199c:	2b01      	cmp	r3, #1
 811199e:	f040 815c 	bne.w	8111c5a <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 81119a2:	68bb      	ldr	r3, [r7, #8]
 81119a4:	695b      	ldr	r3, [r3, #20]
 81119a6:	2b00      	cmp	r3, #0
 81119a8:	d132      	bne.n	8111a10 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 81119aa:	69bb      	ldr	r3, [r7, #24]
 81119ac:	015a      	lsls	r2, r3, #5
 81119ae:	69fb      	ldr	r3, [r7, #28]
 81119b0:	4413      	add	r3, r2
 81119b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 81119b6:	691b      	ldr	r3, [r3, #16]
 81119b8:	69ba      	ldr	r2, [r7, #24]
 81119ba:	0151      	lsls	r1, r2, #5
 81119bc:	69fa      	ldr	r2, [r7, #28]
 81119be:	440a      	add	r2, r1
 81119c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 81119c4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 81119c8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 81119cc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 81119ce:	69bb      	ldr	r3, [r7, #24]
 81119d0:	015a      	lsls	r2, r3, #5
 81119d2:	69fb      	ldr	r3, [r7, #28]
 81119d4:	4413      	add	r3, r2
 81119d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 81119da:	691b      	ldr	r3, [r3, #16]
 81119dc:	69ba      	ldr	r2, [r7, #24]
 81119de:	0151      	lsls	r1, r2, #5
 81119e0:	69fa      	ldr	r2, [r7, #28]
 81119e2:	440a      	add	r2, r1
 81119e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 81119e8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 81119ec:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 81119ee:	69bb      	ldr	r3, [r7, #24]
 81119f0:	015a      	lsls	r2, r3, #5
 81119f2:	69fb      	ldr	r3, [r7, #28]
 81119f4:	4413      	add	r3, r2
 81119f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 81119fa:	691b      	ldr	r3, [r3, #16]
 81119fc:	69ba      	ldr	r2, [r7, #24]
 81119fe:	0151      	lsls	r1, r2, #5
 8111a00:	69fa      	ldr	r2, [r7, #28]
 8111a02:	440a      	add	r2, r1
 8111a04:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8111a08:	0cdb      	lsrs	r3, r3, #19
 8111a0a:	04db      	lsls	r3, r3, #19
 8111a0c:	6113      	str	r3, [r2, #16]
 8111a0e:	e074      	b.n	8111afa <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8111a10:	69bb      	ldr	r3, [r7, #24]
 8111a12:	015a      	lsls	r2, r3, #5
 8111a14:	69fb      	ldr	r3, [r7, #28]
 8111a16:	4413      	add	r3, r2
 8111a18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8111a1c:	691b      	ldr	r3, [r3, #16]
 8111a1e:	69ba      	ldr	r2, [r7, #24]
 8111a20:	0151      	lsls	r1, r2, #5
 8111a22:	69fa      	ldr	r2, [r7, #28]
 8111a24:	440a      	add	r2, r1
 8111a26:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8111a2a:	0cdb      	lsrs	r3, r3, #19
 8111a2c:	04db      	lsls	r3, r3, #19
 8111a2e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8111a30:	69bb      	ldr	r3, [r7, #24]
 8111a32:	015a      	lsls	r2, r3, #5
 8111a34:	69fb      	ldr	r3, [r7, #28]
 8111a36:	4413      	add	r3, r2
 8111a38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8111a3c:	691b      	ldr	r3, [r3, #16]
 8111a3e:	69ba      	ldr	r2, [r7, #24]
 8111a40:	0151      	lsls	r1, r2, #5
 8111a42:	69fa      	ldr	r2, [r7, #28]
 8111a44:	440a      	add	r2, r1
 8111a46:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8111a4a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8111a4e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8111a52:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8111a54:	69bb      	ldr	r3, [r7, #24]
 8111a56:	015a      	lsls	r2, r3, #5
 8111a58:	69fb      	ldr	r3, [r7, #28]
 8111a5a:	4413      	add	r3, r2
 8111a5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8111a60:	691a      	ldr	r2, [r3, #16]
 8111a62:	68bb      	ldr	r3, [r7, #8]
 8111a64:	6959      	ldr	r1, [r3, #20]
 8111a66:	68bb      	ldr	r3, [r7, #8]
 8111a68:	689b      	ldr	r3, [r3, #8]
 8111a6a:	440b      	add	r3, r1
 8111a6c:	1e59      	subs	r1, r3, #1
 8111a6e:	68bb      	ldr	r3, [r7, #8]
 8111a70:	689b      	ldr	r3, [r3, #8]
 8111a72:	fbb1 f3f3 	udiv	r3, r1, r3
 8111a76:	04d9      	lsls	r1, r3, #19
 8111a78:	4b9d      	ldr	r3, [pc, #628]	; (8111cf0 <USB_EPStartXfer+0x370>)
 8111a7a:	400b      	ands	r3, r1
 8111a7c:	69b9      	ldr	r1, [r7, #24]
 8111a7e:	0148      	lsls	r0, r1, #5
 8111a80:	69f9      	ldr	r1, [r7, #28]
 8111a82:	4401      	add	r1, r0
 8111a84:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8111a88:	4313      	orrs	r3, r2
 8111a8a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8111a8c:	69bb      	ldr	r3, [r7, #24]
 8111a8e:	015a      	lsls	r2, r3, #5
 8111a90:	69fb      	ldr	r3, [r7, #28]
 8111a92:	4413      	add	r3, r2
 8111a94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8111a98:	691a      	ldr	r2, [r3, #16]
 8111a9a:	68bb      	ldr	r3, [r7, #8]
 8111a9c:	695b      	ldr	r3, [r3, #20]
 8111a9e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8111aa2:	69b9      	ldr	r1, [r7, #24]
 8111aa4:	0148      	lsls	r0, r1, #5
 8111aa6:	69f9      	ldr	r1, [r7, #28]
 8111aa8:	4401      	add	r1, r0
 8111aaa:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8111aae:	4313      	orrs	r3, r2
 8111ab0:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8111ab2:	68bb      	ldr	r3, [r7, #8]
 8111ab4:	78db      	ldrb	r3, [r3, #3]
 8111ab6:	2b01      	cmp	r3, #1
 8111ab8:	d11f      	bne.n	8111afa <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8111aba:	69bb      	ldr	r3, [r7, #24]
 8111abc:	015a      	lsls	r2, r3, #5
 8111abe:	69fb      	ldr	r3, [r7, #28]
 8111ac0:	4413      	add	r3, r2
 8111ac2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8111ac6:	691b      	ldr	r3, [r3, #16]
 8111ac8:	69ba      	ldr	r2, [r7, #24]
 8111aca:	0151      	lsls	r1, r2, #5
 8111acc:	69fa      	ldr	r2, [r7, #28]
 8111ace:	440a      	add	r2, r1
 8111ad0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8111ad4:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8111ad8:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8111ada:	69bb      	ldr	r3, [r7, #24]
 8111adc:	015a      	lsls	r2, r3, #5
 8111ade:	69fb      	ldr	r3, [r7, #28]
 8111ae0:	4413      	add	r3, r2
 8111ae2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8111ae6:	691b      	ldr	r3, [r3, #16]
 8111ae8:	69ba      	ldr	r2, [r7, #24]
 8111aea:	0151      	lsls	r1, r2, #5
 8111aec:	69fa      	ldr	r2, [r7, #28]
 8111aee:	440a      	add	r2, r1
 8111af0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8111af4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8111af8:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8111afa:	79fb      	ldrb	r3, [r7, #7]
 8111afc:	2b01      	cmp	r3, #1
 8111afe:	d14b      	bne.n	8111b98 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8111b00:	68bb      	ldr	r3, [r7, #8]
 8111b02:	691b      	ldr	r3, [r3, #16]
 8111b04:	2b00      	cmp	r3, #0
 8111b06:	d009      	beq.n	8111b1c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8111b08:	69bb      	ldr	r3, [r7, #24]
 8111b0a:	015a      	lsls	r2, r3, #5
 8111b0c:	69fb      	ldr	r3, [r7, #28]
 8111b0e:	4413      	add	r3, r2
 8111b10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8111b14:	461a      	mov	r2, r3
 8111b16:	68bb      	ldr	r3, [r7, #8]
 8111b18:	691b      	ldr	r3, [r3, #16]
 8111b1a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8111b1c:	68bb      	ldr	r3, [r7, #8]
 8111b1e:	78db      	ldrb	r3, [r3, #3]
 8111b20:	2b01      	cmp	r3, #1
 8111b22:	d128      	bne.n	8111b76 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8111b24:	69fb      	ldr	r3, [r7, #28]
 8111b26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8111b2a:	689b      	ldr	r3, [r3, #8]
 8111b2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8111b30:	2b00      	cmp	r3, #0
 8111b32:	d110      	bne.n	8111b56 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8111b34:	69bb      	ldr	r3, [r7, #24]
 8111b36:	015a      	lsls	r2, r3, #5
 8111b38:	69fb      	ldr	r3, [r7, #28]
 8111b3a:	4413      	add	r3, r2
 8111b3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8111b40:	681b      	ldr	r3, [r3, #0]
 8111b42:	69ba      	ldr	r2, [r7, #24]
 8111b44:	0151      	lsls	r1, r2, #5
 8111b46:	69fa      	ldr	r2, [r7, #28]
 8111b48:	440a      	add	r2, r1
 8111b4a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8111b4e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8111b52:	6013      	str	r3, [r2, #0]
 8111b54:	e00f      	b.n	8111b76 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8111b56:	69bb      	ldr	r3, [r7, #24]
 8111b58:	015a      	lsls	r2, r3, #5
 8111b5a:	69fb      	ldr	r3, [r7, #28]
 8111b5c:	4413      	add	r3, r2
 8111b5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8111b62:	681b      	ldr	r3, [r3, #0]
 8111b64:	69ba      	ldr	r2, [r7, #24]
 8111b66:	0151      	lsls	r1, r2, #5
 8111b68:	69fa      	ldr	r2, [r7, #28]
 8111b6a:	440a      	add	r2, r1
 8111b6c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8111b70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8111b74:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8111b76:	69bb      	ldr	r3, [r7, #24]
 8111b78:	015a      	lsls	r2, r3, #5
 8111b7a:	69fb      	ldr	r3, [r7, #28]
 8111b7c:	4413      	add	r3, r2
 8111b7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8111b82:	681b      	ldr	r3, [r3, #0]
 8111b84:	69ba      	ldr	r2, [r7, #24]
 8111b86:	0151      	lsls	r1, r2, #5
 8111b88:	69fa      	ldr	r2, [r7, #28]
 8111b8a:	440a      	add	r2, r1
 8111b8c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8111b90:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8111b94:	6013      	str	r3, [r2, #0]
 8111b96:	e12f      	b.n	8111df8 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8111b98:	69bb      	ldr	r3, [r7, #24]
 8111b9a:	015a      	lsls	r2, r3, #5
 8111b9c:	69fb      	ldr	r3, [r7, #28]
 8111b9e:	4413      	add	r3, r2
 8111ba0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8111ba4:	681b      	ldr	r3, [r3, #0]
 8111ba6:	69ba      	ldr	r2, [r7, #24]
 8111ba8:	0151      	lsls	r1, r2, #5
 8111baa:	69fa      	ldr	r2, [r7, #28]
 8111bac:	440a      	add	r2, r1
 8111bae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8111bb2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8111bb6:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8111bb8:	68bb      	ldr	r3, [r7, #8]
 8111bba:	78db      	ldrb	r3, [r3, #3]
 8111bbc:	2b01      	cmp	r3, #1
 8111bbe:	d015      	beq.n	8111bec <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8111bc0:	68bb      	ldr	r3, [r7, #8]
 8111bc2:	695b      	ldr	r3, [r3, #20]
 8111bc4:	2b00      	cmp	r3, #0
 8111bc6:	f000 8117 	beq.w	8111df8 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8111bca:	69fb      	ldr	r3, [r7, #28]
 8111bcc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8111bd0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8111bd2:	68bb      	ldr	r3, [r7, #8]
 8111bd4:	781b      	ldrb	r3, [r3, #0]
 8111bd6:	f003 030f 	and.w	r3, r3, #15
 8111bda:	2101      	movs	r1, #1
 8111bdc:	fa01 f303 	lsl.w	r3, r1, r3
 8111be0:	69f9      	ldr	r1, [r7, #28]
 8111be2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8111be6:	4313      	orrs	r3, r2
 8111be8:	634b      	str	r3, [r1, #52]	; 0x34
 8111bea:	e105      	b.n	8111df8 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8111bec:	69fb      	ldr	r3, [r7, #28]
 8111bee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8111bf2:	689b      	ldr	r3, [r3, #8]
 8111bf4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8111bf8:	2b00      	cmp	r3, #0
 8111bfa:	d110      	bne.n	8111c1e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8111bfc:	69bb      	ldr	r3, [r7, #24]
 8111bfe:	015a      	lsls	r2, r3, #5
 8111c00:	69fb      	ldr	r3, [r7, #28]
 8111c02:	4413      	add	r3, r2
 8111c04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8111c08:	681b      	ldr	r3, [r3, #0]
 8111c0a:	69ba      	ldr	r2, [r7, #24]
 8111c0c:	0151      	lsls	r1, r2, #5
 8111c0e:	69fa      	ldr	r2, [r7, #28]
 8111c10:	440a      	add	r2, r1
 8111c12:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8111c16:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8111c1a:	6013      	str	r3, [r2, #0]
 8111c1c:	e00f      	b.n	8111c3e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8111c1e:	69bb      	ldr	r3, [r7, #24]
 8111c20:	015a      	lsls	r2, r3, #5
 8111c22:	69fb      	ldr	r3, [r7, #28]
 8111c24:	4413      	add	r3, r2
 8111c26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8111c2a:	681b      	ldr	r3, [r3, #0]
 8111c2c:	69ba      	ldr	r2, [r7, #24]
 8111c2e:	0151      	lsls	r1, r2, #5
 8111c30:	69fa      	ldr	r2, [r7, #28]
 8111c32:	440a      	add	r2, r1
 8111c34:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8111c38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8111c3c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8111c3e:	68bb      	ldr	r3, [r7, #8]
 8111c40:	68d9      	ldr	r1, [r3, #12]
 8111c42:	68bb      	ldr	r3, [r7, #8]
 8111c44:	781a      	ldrb	r2, [r3, #0]
 8111c46:	68bb      	ldr	r3, [r7, #8]
 8111c48:	695b      	ldr	r3, [r3, #20]
 8111c4a:	b298      	uxth	r0, r3
 8111c4c:	79fb      	ldrb	r3, [r7, #7]
 8111c4e:	9300      	str	r3, [sp, #0]
 8111c50:	4603      	mov	r3, r0
 8111c52:	68f8      	ldr	r0, [r7, #12]
 8111c54:	f000 fa2b 	bl	81120ae <USB_WritePacket>
 8111c58:	e0ce      	b.n	8111df8 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8111c5a:	69bb      	ldr	r3, [r7, #24]
 8111c5c:	015a      	lsls	r2, r3, #5
 8111c5e:	69fb      	ldr	r3, [r7, #28]
 8111c60:	4413      	add	r3, r2
 8111c62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8111c66:	691b      	ldr	r3, [r3, #16]
 8111c68:	69ba      	ldr	r2, [r7, #24]
 8111c6a:	0151      	lsls	r1, r2, #5
 8111c6c:	69fa      	ldr	r2, [r7, #28]
 8111c6e:	440a      	add	r2, r1
 8111c70:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8111c74:	0cdb      	lsrs	r3, r3, #19
 8111c76:	04db      	lsls	r3, r3, #19
 8111c78:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8111c7a:	69bb      	ldr	r3, [r7, #24]
 8111c7c:	015a      	lsls	r2, r3, #5
 8111c7e:	69fb      	ldr	r3, [r7, #28]
 8111c80:	4413      	add	r3, r2
 8111c82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8111c86:	691b      	ldr	r3, [r3, #16]
 8111c88:	69ba      	ldr	r2, [r7, #24]
 8111c8a:	0151      	lsls	r1, r2, #5
 8111c8c:	69fa      	ldr	r2, [r7, #28]
 8111c8e:	440a      	add	r2, r1
 8111c90:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8111c94:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8111c98:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8111c9c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8111c9e:	68bb      	ldr	r3, [r7, #8]
 8111ca0:	695b      	ldr	r3, [r3, #20]
 8111ca2:	2b00      	cmp	r3, #0
 8111ca4:	d126      	bne.n	8111cf4 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8111ca6:	69bb      	ldr	r3, [r7, #24]
 8111ca8:	015a      	lsls	r2, r3, #5
 8111caa:	69fb      	ldr	r3, [r7, #28]
 8111cac:	4413      	add	r3, r2
 8111cae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8111cb2:	691a      	ldr	r2, [r3, #16]
 8111cb4:	68bb      	ldr	r3, [r7, #8]
 8111cb6:	689b      	ldr	r3, [r3, #8]
 8111cb8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8111cbc:	69b9      	ldr	r1, [r7, #24]
 8111cbe:	0148      	lsls	r0, r1, #5
 8111cc0:	69f9      	ldr	r1, [r7, #28]
 8111cc2:	4401      	add	r1, r0
 8111cc4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8111cc8:	4313      	orrs	r3, r2
 8111cca:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8111ccc:	69bb      	ldr	r3, [r7, #24]
 8111cce:	015a      	lsls	r2, r3, #5
 8111cd0:	69fb      	ldr	r3, [r7, #28]
 8111cd2:	4413      	add	r3, r2
 8111cd4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8111cd8:	691b      	ldr	r3, [r3, #16]
 8111cda:	69ba      	ldr	r2, [r7, #24]
 8111cdc:	0151      	lsls	r1, r2, #5
 8111cde:	69fa      	ldr	r2, [r7, #28]
 8111ce0:	440a      	add	r2, r1
 8111ce2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8111ce6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8111cea:	6113      	str	r3, [r2, #16]
 8111cec:	e036      	b.n	8111d5c <USB_EPStartXfer+0x3dc>
 8111cee:	bf00      	nop
 8111cf0:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8111cf4:	68bb      	ldr	r3, [r7, #8]
 8111cf6:	695a      	ldr	r2, [r3, #20]
 8111cf8:	68bb      	ldr	r3, [r7, #8]
 8111cfa:	689b      	ldr	r3, [r3, #8]
 8111cfc:	4413      	add	r3, r2
 8111cfe:	1e5a      	subs	r2, r3, #1
 8111d00:	68bb      	ldr	r3, [r7, #8]
 8111d02:	689b      	ldr	r3, [r3, #8]
 8111d04:	fbb2 f3f3 	udiv	r3, r2, r3
 8111d08:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8111d0a:	69bb      	ldr	r3, [r7, #24]
 8111d0c:	015a      	lsls	r2, r3, #5
 8111d0e:	69fb      	ldr	r3, [r7, #28]
 8111d10:	4413      	add	r3, r2
 8111d12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8111d16:	691a      	ldr	r2, [r3, #16]
 8111d18:	8afb      	ldrh	r3, [r7, #22]
 8111d1a:	04d9      	lsls	r1, r3, #19
 8111d1c:	4b39      	ldr	r3, [pc, #228]	; (8111e04 <USB_EPStartXfer+0x484>)
 8111d1e:	400b      	ands	r3, r1
 8111d20:	69b9      	ldr	r1, [r7, #24]
 8111d22:	0148      	lsls	r0, r1, #5
 8111d24:	69f9      	ldr	r1, [r7, #28]
 8111d26:	4401      	add	r1, r0
 8111d28:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8111d2c:	4313      	orrs	r3, r2
 8111d2e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8111d30:	69bb      	ldr	r3, [r7, #24]
 8111d32:	015a      	lsls	r2, r3, #5
 8111d34:	69fb      	ldr	r3, [r7, #28]
 8111d36:	4413      	add	r3, r2
 8111d38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8111d3c:	691a      	ldr	r2, [r3, #16]
 8111d3e:	68bb      	ldr	r3, [r7, #8]
 8111d40:	689b      	ldr	r3, [r3, #8]
 8111d42:	8af9      	ldrh	r1, [r7, #22]
 8111d44:	fb01 f303 	mul.w	r3, r1, r3
 8111d48:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8111d4c:	69b9      	ldr	r1, [r7, #24]
 8111d4e:	0148      	lsls	r0, r1, #5
 8111d50:	69f9      	ldr	r1, [r7, #28]
 8111d52:	4401      	add	r1, r0
 8111d54:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8111d58:	4313      	orrs	r3, r2
 8111d5a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8111d5c:	79fb      	ldrb	r3, [r7, #7]
 8111d5e:	2b01      	cmp	r3, #1
 8111d60:	d10d      	bne.n	8111d7e <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8111d62:	68bb      	ldr	r3, [r7, #8]
 8111d64:	68db      	ldr	r3, [r3, #12]
 8111d66:	2b00      	cmp	r3, #0
 8111d68:	d009      	beq.n	8111d7e <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8111d6a:	68bb      	ldr	r3, [r7, #8]
 8111d6c:	68d9      	ldr	r1, [r3, #12]
 8111d6e:	69bb      	ldr	r3, [r7, #24]
 8111d70:	015a      	lsls	r2, r3, #5
 8111d72:	69fb      	ldr	r3, [r7, #28]
 8111d74:	4413      	add	r3, r2
 8111d76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8111d7a:	460a      	mov	r2, r1
 8111d7c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8111d7e:	68bb      	ldr	r3, [r7, #8]
 8111d80:	78db      	ldrb	r3, [r3, #3]
 8111d82:	2b01      	cmp	r3, #1
 8111d84:	d128      	bne.n	8111dd8 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8111d86:	69fb      	ldr	r3, [r7, #28]
 8111d88:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8111d8c:	689b      	ldr	r3, [r3, #8]
 8111d8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8111d92:	2b00      	cmp	r3, #0
 8111d94:	d110      	bne.n	8111db8 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8111d96:	69bb      	ldr	r3, [r7, #24]
 8111d98:	015a      	lsls	r2, r3, #5
 8111d9a:	69fb      	ldr	r3, [r7, #28]
 8111d9c:	4413      	add	r3, r2
 8111d9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8111da2:	681b      	ldr	r3, [r3, #0]
 8111da4:	69ba      	ldr	r2, [r7, #24]
 8111da6:	0151      	lsls	r1, r2, #5
 8111da8:	69fa      	ldr	r2, [r7, #28]
 8111daa:	440a      	add	r2, r1
 8111dac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8111db0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8111db4:	6013      	str	r3, [r2, #0]
 8111db6:	e00f      	b.n	8111dd8 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8111db8:	69bb      	ldr	r3, [r7, #24]
 8111dba:	015a      	lsls	r2, r3, #5
 8111dbc:	69fb      	ldr	r3, [r7, #28]
 8111dbe:	4413      	add	r3, r2
 8111dc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8111dc4:	681b      	ldr	r3, [r3, #0]
 8111dc6:	69ba      	ldr	r2, [r7, #24]
 8111dc8:	0151      	lsls	r1, r2, #5
 8111dca:	69fa      	ldr	r2, [r7, #28]
 8111dcc:	440a      	add	r2, r1
 8111dce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8111dd2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8111dd6:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8111dd8:	69bb      	ldr	r3, [r7, #24]
 8111dda:	015a      	lsls	r2, r3, #5
 8111ddc:	69fb      	ldr	r3, [r7, #28]
 8111dde:	4413      	add	r3, r2
 8111de0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8111de4:	681b      	ldr	r3, [r3, #0]
 8111de6:	69ba      	ldr	r2, [r7, #24]
 8111de8:	0151      	lsls	r1, r2, #5
 8111dea:	69fa      	ldr	r2, [r7, #28]
 8111dec:	440a      	add	r2, r1
 8111dee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8111df2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8111df6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8111df8:	2300      	movs	r3, #0
}
 8111dfa:	4618      	mov	r0, r3
 8111dfc:	3720      	adds	r7, #32
 8111dfe:	46bd      	mov	sp, r7
 8111e00:	bd80      	pop	{r7, pc}
 8111e02:	bf00      	nop
 8111e04:	1ff80000 	.word	0x1ff80000

08111e08 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8111e08:	b480      	push	{r7}
 8111e0a:	b087      	sub	sp, #28
 8111e0c:	af00      	add	r7, sp, #0
 8111e0e:	60f8      	str	r0, [r7, #12]
 8111e10:	60b9      	str	r1, [r7, #8]
 8111e12:	4613      	mov	r3, r2
 8111e14:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8111e16:	68fb      	ldr	r3, [r7, #12]
 8111e18:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8111e1a:	68bb      	ldr	r3, [r7, #8]
 8111e1c:	781b      	ldrb	r3, [r3, #0]
 8111e1e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8111e20:	68bb      	ldr	r3, [r7, #8]
 8111e22:	785b      	ldrb	r3, [r3, #1]
 8111e24:	2b01      	cmp	r3, #1
 8111e26:	f040 80cd 	bne.w	8111fc4 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8111e2a:	68bb      	ldr	r3, [r7, #8]
 8111e2c:	695b      	ldr	r3, [r3, #20]
 8111e2e:	2b00      	cmp	r3, #0
 8111e30:	d132      	bne.n	8111e98 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8111e32:	693b      	ldr	r3, [r7, #16]
 8111e34:	015a      	lsls	r2, r3, #5
 8111e36:	697b      	ldr	r3, [r7, #20]
 8111e38:	4413      	add	r3, r2
 8111e3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8111e3e:	691b      	ldr	r3, [r3, #16]
 8111e40:	693a      	ldr	r2, [r7, #16]
 8111e42:	0151      	lsls	r1, r2, #5
 8111e44:	697a      	ldr	r2, [r7, #20]
 8111e46:	440a      	add	r2, r1
 8111e48:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8111e4c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8111e50:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8111e54:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8111e56:	693b      	ldr	r3, [r7, #16]
 8111e58:	015a      	lsls	r2, r3, #5
 8111e5a:	697b      	ldr	r3, [r7, #20]
 8111e5c:	4413      	add	r3, r2
 8111e5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8111e62:	691b      	ldr	r3, [r3, #16]
 8111e64:	693a      	ldr	r2, [r7, #16]
 8111e66:	0151      	lsls	r1, r2, #5
 8111e68:	697a      	ldr	r2, [r7, #20]
 8111e6a:	440a      	add	r2, r1
 8111e6c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8111e70:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8111e74:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8111e76:	693b      	ldr	r3, [r7, #16]
 8111e78:	015a      	lsls	r2, r3, #5
 8111e7a:	697b      	ldr	r3, [r7, #20]
 8111e7c:	4413      	add	r3, r2
 8111e7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8111e82:	691b      	ldr	r3, [r3, #16]
 8111e84:	693a      	ldr	r2, [r7, #16]
 8111e86:	0151      	lsls	r1, r2, #5
 8111e88:	697a      	ldr	r2, [r7, #20]
 8111e8a:	440a      	add	r2, r1
 8111e8c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8111e90:	0cdb      	lsrs	r3, r3, #19
 8111e92:	04db      	lsls	r3, r3, #19
 8111e94:	6113      	str	r3, [r2, #16]
 8111e96:	e04e      	b.n	8111f36 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8111e98:	693b      	ldr	r3, [r7, #16]
 8111e9a:	015a      	lsls	r2, r3, #5
 8111e9c:	697b      	ldr	r3, [r7, #20]
 8111e9e:	4413      	add	r3, r2
 8111ea0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8111ea4:	691b      	ldr	r3, [r3, #16]
 8111ea6:	693a      	ldr	r2, [r7, #16]
 8111ea8:	0151      	lsls	r1, r2, #5
 8111eaa:	697a      	ldr	r2, [r7, #20]
 8111eac:	440a      	add	r2, r1
 8111eae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8111eb2:	0cdb      	lsrs	r3, r3, #19
 8111eb4:	04db      	lsls	r3, r3, #19
 8111eb6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8111eb8:	693b      	ldr	r3, [r7, #16]
 8111eba:	015a      	lsls	r2, r3, #5
 8111ebc:	697b      	ldr	r3, [r7, #20]
 8111ebe:	4413      	add	r3, r2
 8111ec0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8111ec4:	691b      	ldr	r3, [r3, #16]
 8111ec6:	693a      	ldr	r2, [r7, #16]
 8111ec8:	0151      	lsls	r1, r2, #5
 8111eca:	697a      	ldr	r2, [r7, #20]
 8111ecc:	440a      	add	r2, r1
 8111ece:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8111ed2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8111ed6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8111eda:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8111edc:	68bb      	ldr	r3, [r7, #8]
 8111ede:	695a      	ldr	r2, [r3, #20]
 8111ee0:	68bb      	ldr	r3, [r7, #8]
 8111ee2:	689b      	ldr	r3, [r3, #8]
 8111ee4:	429a      	cmp	r2, r3
 8111ee6:	d903      	bls.n	8111ef0 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8111ee8:	68bb      	ldr	r3, [r7, #8]
 8111eea:	689a      	ldr	r2, [r3, #8]
 8111eec:	68bb      	ldr	r3, [r7, #8]
 8111eee:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8111ef0:	693b      	ldr	r3, [r7, #16]
 8111ef2:	015a      	lsls	r2, r3, #5
 8111ef4:	697b      	ldr	r3, [r7, #20]
 8111ef6:	4413      	add	r3, r2
 8111ef8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8111efc:	691b      	ldr	r3, [r3, #16]
 8111efe:	693a      	ldr	r2, [r7, #16]
 8111f00:	0151      	lsls	r1, r2, #5
 8111f02:	697a      	ldr	r2, [r7, #20]
 8111f04:	440a      	add	r2, r1
 8111f06:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8111f0a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8111f0e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8111f10:	693b      	ldr	r3, [r7, #16]
 8111f12:	015a      	lsls	r2, r3, #5
 8111f14:	697b      	ldr	r3, [r7, #20]
 8111f16:	4413      	add	r3, r2
 8111f18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8111f1c:	691a      	ldr	r2, [r3, #16]
 8111f1e:	68bb      	ldr	r3, [r7, #8]
 8111f20:	695b      	ldr	r3, [r3, #20]
 8111f22:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8111f26:	6939      	ldr	r1, [r7, #16]
 8111f28:	0148      	lsls	r0, r1, #5
 8111f2a:	6979      	ldr	r1, [r7, #20]
 8111f2c:	4401      	add	r1, r0
 8111f2e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8111f32:	4313      	orrs	r3, r2
 8111f34:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8111f36:	79fb      	ldrb	r3, [r7, #7]
 8111f38:	2b01      	cmp	r3, #1
 8111f3a:	d11e      	bne.n	8111f7a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8111f3c:	68bb      	ldr	r3, [r7, #8]
 8111f3e:	691b      	ldr	r3, [r3, #16]
 8111f40:	2b00      	cmp	r3, #0
 8111f42:	d009      	beq.n	8111f58 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8111f44:	693b      	ldr	r3, [r7, #16]
 8111f46:	015a      	lsls	r2, r3, #5
 8111f48:	697b      	ldr	r3, [r7, #20]
 8111f4a:	4413      	add	r3, r2
 8111f4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8111f50:	461a      	mov	r2, r3
 8111f52:	68bb      	ldr	r3, [r7, #8]
 8111f54:	691b      	ldr	r3, [r3, #16]
 8111f56:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8111f58:	693b      	ldr	r3, [r7, #16]
 8111f5a:	015a      	lsls	r2, r3, #5
 8111f5c:	697b      	ldr	r3, [r7, #20]
 8111f5e:	4413      	add	r3, r2
 8111f60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8111f64:	681b      	ldr	r3, [r3, #0]
 8111f66:	693a      	ldr	r2, [r7, #16]
 8111f68:	0151      	lsls	r1, r2, #5
 8111f6a:	697a      	ldr	r2, [r7, #20]
 8111f6c:	440a      	add	r2, r1
 8111f6e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8111f72:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8111f76:	6013      	str	r3, [r2, #0]
 8111f78:	e092      	b.n	81120a0 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8111f7a:	693b      	ldr	r3, [r7, #16]
 8111f7c:	015a      	lsls	r2, r3, #5
 8111f7e:	697b      	ldr	r3, [r7, #20]
 8111f80:	4413      	add	r3, r2
 8111f82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8111f86:	681b      	ldr	r3, [r3, #0]
 8111f88:	693a      	ldr	r2, [r7, #16]
 8111f8a:	0151      	lsls	r1, r2, #5
 8111f8c:	697a      	ldr	r2, [r7, #20]
 8111f8e:	440a      	add	r2, r1
 8111f90:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8111f94:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8111f98:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8111f9a:	68bb      	ldr	r3, [r7, #8]
 8111f9c:	695b      	ldr	r3, [r3, #20]
 8111f9e:	2b00      	cmp	r3, #0
 8111fa0:	d07e      	beq.n	81120a0 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8111fa2:	697b      	ldr	r3, [r7, #20]
 8111fa4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8111fa8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8111faa:	68bb      	ldr	r3, [r7, #8]
 8111fac:	781b      	ldrb	r3, [r3, #0]
 8111fae:	f003 030f 	and.w	r3, r3, #15
 8111fb2:	2101      	movs	r1, #1
 8111fb4:	fa01 f303 	lsl.w	r3, r1, r3
 8111fb8:	6979      	ldr	r1, [r7, #20]
 8111fba:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8111fbe:	4313      	orrs	r3, r2
 8111fc0:	634b      	str	r3, [r1, #52]	; 0x34
 8111fc2:	e06d      	b.n	81120a0 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8111fc4:	693b      	ldr	r3, [r7, #16]
 8111fc6:	015a      	lsls	r2, r3, #5
 8111fc8:	697b      	ldr	r3, [r7, #20]
 8111fca:	4413      	add	r3, r2
 8111fcc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8111fd0:	691b      	ldr	r3, [r3, #16]
 8111fd2:	693a      	ldr	r2, [r7, #16]
 8111fd4:	0151      	lsls	r1, r2, #5
 8111fd6:	697a      	ldr	r2, [r7, #20]
 8111fd8:	440a      	add	r2, r1
 8111fda:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8111fde:	0cdb      	lsrs	r3, r3, #19
 8111fe0:	04db      	lsls	r3, r3, #19
 8111fe2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8111fe4:	693b      	ldr	r3, [r7, #16]
 8111fe6:	015a      	lsls	r2, r3, #5
 8111fe8:	697b      	ldr	r3, [r7, #20]
 8111fea:	4413      	add	r3, r2
 8111fec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8111ff0:	691b      	ldr	r3, [r3, #16]
 8111ff2:	693a      	ldr	r2, [r7, #16]
 8111ff4:	0151      	lsls	r1, r2, #5
 8111ff6:	697a      	ldr	r2, [r7, #20]
 8111ff8:	440a      	add	r2, r1
 8111ffa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8111ffe:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8112002:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8112006:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8112008:	68bb      	ldr	r3, [r7, #8]
 811200a:	695b      	ldr	r3, [r3, #20]
 811200c:	2b00      	cmp	r3, #0
 811200e:	d003      	beq.n	8112018 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8112010:	68bb      	ldr	r3, [r7, #8]
 8112012:	689a      	ldr	r2, [r3, #8]
 8112014:	68bb      	ldr	r3, [r7, #8]
 8112016:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8112018:	693b      	ldr	r3, [r7, #16]
 811201a:	015a      	lsls	r2, r3, #5
 811201c:	697b      	ldr	r3, [r7, #20]
 811201e:	4413      	add	r3, r2
 8112020:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8112024:	691b      	ldr	r3, [r3, #16]
 8112026:	693a      	ldr	r2, [r7, #16]
 8112028:	0151      	lsls	r1, r2, #5
 811202a:	697a      	ldr	r2, [r7, #20]
 811202c:	440a      	add	r2, r1
 811202e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8112032:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8112036:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8112038:	693b      	ldr	r3, [r7, #16]
 811203a:	015a      	lsls	r2, r3, #5
 811203c:	697b      	ldr	r3, [r7, #20]
 811203e:	4413      	add	r3, r2
 8112040:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8112044:	691a      	ldr	r2, [r3, #16]
 8112046:	68bb      	ldr	r3, [r7, #8]
 8112048:	689b      	ldr	r3, [r3, #8]
 811204a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 811204e:	6939      	ldr	r1, [r7, #16]
 8112050:	0148      	lsls	r0, r1, #5
 8112052:	6979      	ldr	r1, [r7, #20]
 8112054:	4401      	add	r1, r0
 8112056:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 811205a:	4313      	orrs	r3, r2
 811205c:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 811205e:	79fb      	ldrb	r3, [r7, #7]
 8112060:	2b01      	cmp	r3, #1
 8112062:	d10d      	bne.n	8112080 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8112064:	68bb      	ldr	r3, [r7, #8]
 8112066:	68db      	ldr	r3, [r3, #12]
 8112068:	2b00      	cmp	r3, #0
 811206a:	d009      	beq.n	8112080 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 811206c:	68bb      	ldr	r3, [r7, #8]
 811206e:	68d9      	ldr	r1, [r3, #12]
 8112070:	693b      	ldr	r3, [r7, #16]
 8112072:	015a      	lsls	r2, r3, #5
 8112074:	697b      	ldr	r3, [r7, #20]
 8112076:	4413      	add	r3, r2
 8112078:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 811207c:	460a      	mov	r2, r1
 811207e:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8112080:	693b      	ldr	r3, [r7, #16]
 8112082:	015a      	lsls	r2, r3, #5
 8112084:	697b      	ldr	r3, [r7, #20]
 8112086:	4413      	add	r3, r2
 8112088:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 811208c:	681b      	ldr	r3, [r3, #0]
 811208e:	693a      	ldr	r2, [r7, #16]
 8112090:	0151      	lsls	r1, r2, #5
 8112092:	697a      	ldr	r2, [r7, #20]
 8112094:	440a      	add	r2, r1
 8112096:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 811209a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 811209e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 81120a0:	2300      	movs	r3, #0
}
 81120a2:	4618      	mov	r0, r3
 81120a4:	371c      	adds	r7, #28
 81120a6:	46bd      	mov	sp, r7
 81120a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81120ac:	4770      	bx	lr

081120ae <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 81120ae:	b480      	push	{r7}
 81120b0:	b089      	sub	sp, #36	; 0x24
 81120b2:	af00      	add	r7, sp, #0
 81120b4:	60f8      	str	r0, [r7, #12]
 81120b6:	60b9      	str	r1, [r7, #8]
 81120b8:	4611      	mov	r1, r2
 81120ba:	461a      	mov	r2, r3
 81120bc:	460b      	mov	r3, r1
 81120be:	71fb      	strb	r3, [r7, #7]
 81120c0:	4613      	mov	r3, r2
 81120c2:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 81120c4:	68fb      	ldr	r3, [r7, #12]
 81120c6:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 81120c8:	68bb      	ldr	r3, [r7, #8]
 81120ca:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 81120cc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 81120d0:	2b00      	cmp	r3, #0
 81120d2:	d123      	bne.n	811211c <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 81120d4:	88bb      	ldrh	r3, [r7, #4]
 81120d6:	3303      	adds	r3, #3
 81120d8:	089b      	lsrs	r3, r3, #2
 81120da:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 81120dc:	2300      	movs	r3, #0
 81120de:	61bb      	str	r3, [r7, #24]
 81120e0:	e018      	b.n	8112114 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 81120e2:	79fb      	ldrb	r3, [r7, #7]
 81120e4:	031a      	lsls	r2, r3, #12
 81120e6:	697b      	ldr	r3, [r7, #20]
 81120e8:	4413      	add	r3, r2
 81120ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 81120ee:	461a      	mov	r2, r3
 81120f0:	69fb      	ldr	r3, [r7, #28]
 81120f2:	681b      	ldr	r3, [r3, #0]
 81120f4:	6013      	str	r3, [r2, #0]
      pSrc++;
 81120f6:	69fb      	ldr	r3, [r7, #28]
 81120f8:	3301      	adds	r3, #1
 81120fa:	61fb      	str	r3, [r7, #28]
      pSrc++;
 81120fc:	69fb      	ldr	r3, [r7, #28]
 81120fe:	3301      	adds	r3, #1
 8112100:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8112102:	69fb      	ldr	r3, [r7, #28]
 8112104:	3301      	adds	r3, #1
 8112106:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8112108:	69fb      	ldr	r3, [r7, #28]
 811210a:	3301      	adds	r3, #1
 811210c:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 811210e:	69bb      	ldr	r3, [r7, #24]
 8112110:	3301      	adds	r3, #1
 8112112:	61bb      	str	r3, [r7, #24]
 8112114:	69ba      	ldr	r2, [r7, #24]
 8112116:	693b      	ldr	r3, [r7, #16]
 8112118:	429a      	cmp	r2, r3
 811211a:	d3e2      	bcc.n	81120e2 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 811211c:	2300      	movs	r3, #0
}
 811211e:	4618      	mov	r0, r3
 8112120:	3724      	adds	r7, #36	; 0x24
 8112122:	46bd      	mov	sp, r7
 8112124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8112128:	4770      	bx	lr

0811212a <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 811212a:	b480      	push	{r7}
 811212c:	b08b      	sub	sp, #44	; 0x2c
 811212e:	af00      	add	r7, sp, #0
 8112130:	60f8      	str	r0, [r7, #12]
 8112132:	60b9      	str	r1, [r7, #8]
 8112134:	4613      	mov	r3, r2
 8112136:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8112138:	68fb      	ldr	r3, [r7, #12]
 811213a:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 811213c:	68bb      	ldr	r3, [r7, #8]
 811213e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8112140:	88fb      	ldrh	r3, [r7, #6]
 8112142:	089b      	lsrs	r3, r3, #2
 8112144:	b29b      	uxth	r3, r3
 8112146:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8112148:	88fb      	ldrh	r3, [r7, #6]
 811214a:	f003 0303 	and.w	r3, r3, #3
 811214e:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8112150:	2300      	movs	r3, #0
 8112152:	623b      	str	r3, [r7, #32]
 8112154:	e014      	b.n	8112180 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8112156:	69bb      	ldr	r3, [r7, #24]
 8112158:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 811215c:	681a      	ldr	r2, [r3, #0]
 811215e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8112160:	601a      	str	r2, [r3, #0]
    pDest++;
 8112162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8112164:	3301      	adds	r3, #1
 8112166:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8112168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 811216a:	3301      	adds	r3, #1
 811216c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 811216e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8112170:	3301      	adds	r3, #1
 8112172:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8112174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8112176:	3301      	adds	r3, #1
 8112178:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 811217a:	6a3b      	ldr	r3, [r7, #32]
 811217c:	3301      	adds	r3, #1
 811217e:	623b      	str	r3, [r7, #32]
 8112180:	6a3a      	ldr	r2, [r7, #32]
 8112182:	697b      	ldr	r3, [r7, #20]
 8112184:	429a      	cmp	r2, r3
 8112186:	d3e6      	bcc.n	8112156 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8112188:	8bfb      	ldrh	r3, [r7, #30]
 811218a:	2b00      	cmp	r3, #0
 811218c:	d01e      	beq.n	81121cc <USB_ReadPacket+0xa2>
  {
    i = 0U;
 811218e:	2300      	movs	r3, #0
 8112190:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8112192:	69bb      	ldr	r3, [r7, #24]
 8112194:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8112198:	461a      	mov	r2, r3
 811219a:	f107 0310 	add.w	r3, r7, #16
 811219e:	6812      	ldr	r2, [r2, #0]
 81121a0:	601a      	str	r2, [r3, #0]
	
    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 81121a2:	693a      	ldr	r2, [r7, #16]
 81121a4:	6a3b      	ldr	r3, [r7, #32]
 81121a6:	b2db      	uxtb	r3, r3
 81121a8:	00db      	lsls	r3, r3, #3
 81121aa:	fa22 f303 	lsr.w	r3, r2, r3
 81121ae:	b2da      	uxtb	r2, r3
 81121b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81121b2:	701a      	strb	r2, [r3, #0]
      i++;
 81121b4:	6a3b      	ldr	r3, [r7, #32]
 81121b6:	3301      	adds	r3, #1
 81121b8:	623b      	str	r3, [r7, #32]
      pDest++;
 81121ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81121bc:	3301      	adds	r3, #1
 81121be:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 81121c0:	8bfb      	ldrh	r3, [r7, #30]
 81121c2:	3b01      	subs	r3, #1
 81121c4:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 81121c6:	8bfb      	ldrh	r3, [r7, #30]
 81121c8:	2b00      	cmp	r3, #0
 81121ca:	d1ea      	bne.n	81121a2 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 81121cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 81121ce:	4618      	mov	r0, r3
 81121d0:	372c      	adds	r7, #44	; 0x2c
 81121d2:	46bd      	mov	sp, r7
 81121d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81121d8:	4770      	bx	lr

081121da <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 81121da:	b480      	push	{r7}
 81121dc:	b085      	sub	sp, #20
 81121de:	af00      	add	r7, sp, #0
 81121e0:	6078      	str	r0, [r7, #4]
 81121e2:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 81121e4:	687b      	ldr	r3, [r7, #4]
 81121e6:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 81121e8:	683b      	ldr	r3, [r7, #0]
 81121ea:	781b      	ldrb	r3, [r3, #0]
 81121ec:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 81121ee:	683b      	ldr	r3, [r7, #0]
 81121f0:	785b      	ldrb	r3, [r3, #1]
 81121f2:	2b01      	cmp	r3, #1
 81121f4:	d12c      	bne.n	8112250 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 81121f6:	68bb      	ldr	r3, [r7, #8]
 81121f8:	015a      	lsls	r2, r3, #5
 81121fa:	68fb      	ldr	r3, [r7, #12]
 81121fc:	4413      	add	r3, r2
 81121fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8112202:	681b      	ldr	r3, [r3, #0]
 8112204:	2b00      	cmp	r3, #0
 8112206:	db12      	blt.n	811222e <USB_EPSetStall+0x54>
 8112208:	68bb      	ldr	r3, [r7, #8]
 811220a:	2b00      	cmp	r3, #0
 811220c:	d00f      	beq.n	811222e <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 811220e:	68bb      	ldr	r3, [r7, #8]
 8112210:	015a      	lsls	r2, r3, #5
 8112212:	68fb      	ldr	r3, [r7, #12]
 8112214:	4413      	add	r3, r2
 8112216:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 811221a:	681b      	ldr	r3, [r3, #0]
 811221c:	68ba      	ldr	r2, [r7, #8]
 811221e:	0151      	lsls	r1, r2, #5
 8112220:	68fa      	ldr	r2, [r7, #12]
 8112222:	440a      	add	r2, r1
 8112224:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8112228:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 811222c:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 811222e:	68bb      	ldr	r3, [r7, #8]
 8112230:	015a      	lsls	r2, r3, #5
 8112232:	68fb      	ldr	r3, [r7, #12]
 8112234:	4413      	add	r3, r2
 8112236:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 811223a:	681b      	ldr	r3, [r3, #0]
 811223c:	68ba      	ldr	r2, [r7, #8]
 811223e:	0151      	lsls	r1, r2, #5
 8112240:	68fa      	ldr	r2, [r7, #12]
 8112242:	440a      	add	r2, r1
 8112244:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8112248:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 811224c:	6013      	str	r3, [r2, #0]
 811224e:	e02b      	b.n	81122a8 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8112250:	68bb      	ldr	r3, [r7, #8]
 8112252:	015a      	lsls	r2, r3, #5
 8112254:	68fb      	ldr	r3, [r7, #12]
 8112256:	4413      	add	r3, r2
 8112258:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 811225c:	681b      	ldr	r3, [r3, #0]
 811225e:	2b00      	cmp	r3, #0
 8112260:	db12      	blt.n	8112288 <USB_EPSetStall+0xae>
 8112262:	68bb      	ldr	r3, [r7, #8]
 8112264:	2b00      	cmp	r3, #0
 8112266:	d00f      	beq.n	8112288 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8112268:	68bb      	ldr	r3, [r7, #8]
 811226a:	015a      	lsls	r2, r3, #5
 811226c:	68fb      	ldr	r3, [r7, #12]
 811226e:	4413      	add	r3, r2
 8112270:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8112274:	681b      	ldr	r3, [r3, #0]
 8112276:	68ba      	ldr	r2, [r7, #8]
 8112278:	0151      	lsls	r1, r2, #5
 811227a:	68fa      	ldr	r2, [r7, #12]
 811227c:	440a      	add	r2, r1
 811227e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8112282:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8112286:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8112288:	68bb      	ldr	r3, [r7, #8]
 811228a:	015a      	lsls	r2, r3, #5
 811228c:	68fb      	ldr	r3, [r7, #12]
 811228e:	4413      	add	r3, r2
 8112290:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8112294:	681b      	ldr	r3, [r3, #0]
 8112296:	68ba      	ldr	r2, [r7, #8]
 8112298:	0151      	lsls	r1, r2, #5
 811229a:	68fa      	ldr	r2, [r7, #12]
 811229c:	440a      	add	r2, r1
 811229e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 81122a2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 81122a6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 81122a8:	2300      	movs	r3, #0
}
 81122aa:	4618      	mov	r0, r3
 81122ac:	3714      	adds	r7, #20
 81122ae:	46bd      	mov	sp, r7
 81122b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81122b4:	4770      	bx	lr

081122b6 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 81122b6:	b480      	push	{r7}
 81122b8:	b085      	sub	sp, #20
 81122ba:	af00      	add	r7, sp, #0
 81122bc:	6078      	str	r0, [r7, #4]
 81122be:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 81122c0:	687b      	ldr	r3, [r7, #4]
 81122c2:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 81122c4:	683b      	ldr	r3, [r7, #0]
 81122c6:	781b      	ldrb	r3, [r3, #0]
 81122c8:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 81122ca:	683b      	ldr	r3, [r7, #0]
 81122cc:	785b      	ldrb	r3, [r3, #1]
 81122ce:	2b01      	cmp	r3, #1
 81122d0:	d128      	bne.n	8112324 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 81122d2:	68bb      	ldr	r3, [r7, #8]
 81122d4:	015a      	lsls	r2, r3, #5
 81122d6:	68fb      	ldr	r3, [r7, #12]
 81122d8:	4413      	add	r3, r2
 81122da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 81122de:	681b      	ldr	r3, [r3, #0]
 81122e0:	68ba      	ldr	r2, [r7, #8]
 81122e2:	0151      	lsls	r1, r2, #5
 81122e4:	68fa      	ldr	r2, [r7, #12]
 81122e6:	440a      	add	r2, r1
 81122e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 81122ec:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 81122f0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 81122f2:	683b      	ldr	r3, [r7, #0]
 81122f4:	78db      	ldrb	r3, [r3, #3]
 81122f6:	2b03      	cmp	r3, #3
 81122f8:	d003      	beq.n	8112302 <USB_EPClearStall+0x4c>
 81122fa:	683b      	ldr	r3, [r7, #0]
 81122fc:	78db      	ldrb	r3, [r3, #3]
 81122fe:	2b02      	cmp	r3, #2
 8112300:	d138      	bne.n	8112374 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8112302:	68bb      	ldr	r3, [r7, #8]
 8112304:	015a      	lsls	r2, r3, #5
 8112306:	68fb      	ldr	r3, [r7, #12]
 8112308:	4413      	add	r3, r2
 811230a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 811230e:	681b      	ldr	r3, [r3, #0]
 8112310:	68ba      	ldr	r2, [r7, #8]
 8112312:	0151      	lsls	r1, r2, #5
 8112314:	68fa      	ldr	r2, [r7, #12]
 8112316:	440a      	add	r2, r1
 8112318:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 811231c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8112320:	6013      	str	r3, [r2, #0]
 8112322:	e027      	b.n	8112374 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8112324:	68bb      	ldr	r3, [r7, #8]
 8112326:	015a      	lsls	r2, r3, #5
 8112328:	68fb      	ldr	r3, [r7, #12]
 811232a:	4413      	add	r3, r2
 811232c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8112330:	681b      	ldr	r3, [r3, #0]
 8112332:	68ba      	ldr	r2, [r7, #8]
 8112334:	0151      	lsls	r1, r2, #5
 8112336:	68fa      	ldr	r2, [r7, #12]
 8112338:	440a      	add	r2, r1
 811233a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 811233e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8112342:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8112344:	683b      	ldr	r3, [r7, #0]
 8112346:	78db      	ldrb	r3, [r3, #3]
 8112348:	2b03      	cmp	r3, #3
 811234a:	d003      	beq.n	8112354 <USB_EPClearStall+0x9e>
 811234c:	683b      	ldr	r3, [r7, #0]
 811234e:	78db      	ldrb	r3, [r3, #3]
 8112350:	2b02      	cmp	r3, #2
 8112352:	d10f      	bne.n	8112374 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8112354:	68bb      	ldr	r3, [r7, #8]
 8112356:	015a      	lsls	r2, r3, #5
 8112358:	68fb      	ldr	r3, [r7, #12]
 811235a:	4413      	add	r3, r2
 811235c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8112360:	681b      	ldr	r3, [r3, #0]
 8112362:	68ba      	ldr	r2, [r7, #8]
 8112364:	0151      	lsls	r1, r2, #5
 8112366:	68fa      	ldr	r2, [r7, #12]
 8112368:	440a      	add	r2, r1
 811236a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 811236e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8112372:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8112374:	2300      	movs	r3, #0
}
 8112376:	4618      	mov	r0, r3
 8112378:	3714      	adds	r7, #20
 811237a:	46bd      	mov	sp, r7
 811237c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8112380:	4770      	bx	lr

08112382 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8112382:	b480      	push	{r7}
 8112384:	b085      	sub	sp, #20
 8112386:	af00      	add	r7, sp, #0
 8112388:	6078      	str	r0, [r7, #4]
 811238a:	460b      	mov	r3, r1
 811238c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 811238e:	687b      	ldr	r3, [r7, #4]
 8112390:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8112392:	68fb      	ldr	r3, [r7, #12]
 8112394:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8112398:	681b      	ldr	r3, [r3, #0]
 811239a:	68fa      	ldr	r2, [r7, #12]
 811239c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 81123a0:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 81123a4:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 81123a6:	68fb      	ldr	r3, [r7, #12]
 81123a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 81123ac:	681a      	ldr	r2, [r3, #0]
 81123ae:	78fb      	ldrb	r3, [r7, #3]
 81123b0:	011b      	lsls	r3, r3, #4
 81123b2:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 81123b6:	68f9      	ldr	r1, [r7, #12]
 81123b8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 81123bc:	4313      	orrs	r3, r2
 81123be:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 81123c0:	2300      	movs	r3, #0
}
 81123c2:	4618      	mov	r0, r3
 81123c4:	3714      	adds	r7, #20
 81123c6:	46bd      	mov	sp, r7
 81123c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81123cc:	4770      	bx	lr

081123ce <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 81123ce:	b480      	push	{r7}
 81123d0:	b085      	sub	sp, #20
 81123d2:	af00      	add	r7, sp, #0
 81123d4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 81123d6:	687b      	ldr	r3, [r7, #4]
 81123d8:	695b      	ldr	r3, [r3, #20]
 81123da:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 81123dc:	687b      	ldr	r3, [r7, #4]
 81123de:	699b      	ldr	r3, [r3, #24]
 81123e0:	68fa      	ldr	r2, [r7, #12]
 81123e2:	4013      	ands	r3, r2
 81123e4:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 81123e6:	68fb      	ldr	r3, [r7, #12]
}
 81123e8:	4618      	mov	r0, r3
 81123ea:	3714      	adds	r7, #20
 81123ec:	46bd      	mov	sp, r7
 81123ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 81123f2:	4770      	bx	lr

081123f4 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 81123f4:	b480      	push	{r7}
 81123f6:	b085      	sub	sp, #20
 81123f8:	af00      	add	r7, sp, #0
 81123fa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 81123fc:	687b      	ldr	r3, [r7, #4]
 81123fe:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8112400:	68fb      	ldr	r3, [r7, #12]
 8112402:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8112406:	699b      	ldr	r3, [r3, #24]
 8112408:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 811240a:	68fb      	ldr	r3, [r7, #12]
 811240c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8112410:	69db      	ldr	r3, [r3, #28]
 8112412:	68ba      	ldr	r2, [r7, #8]
 8112414:	4013      	ands	r3, r2
 8112416:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8112418:	68bb      	ldr	r3, [r7, #8]
 811241a:	0c1b      	lsrs	r3, r3, #16
}
 811241c:	4618      	mov	r0, r3
 811241e:	3714      	adds	r7, #20
 8112420:	46bd      	mov	sp, r7
 8112422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8112426:	4770      	bx	lr

08112428 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8112428:	b480      	push	{r7}
 811242a:	b085      	sub	sp, #20
 811242c:	af00      	add	r7, sp, #0
 811242e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8112430:	687b      	ldr	r3, [r7, #4]
 8112432:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8112434:	68fb      	ldr	r3, [r7, #12]
 8112436:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 811243a:	699b      	ldr	r3, [r3, #24]
 811243c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 811243e:	68fb      	ldr	r3, [r7, #12]
 8112440:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8112444:	69db      	ldr	r3, [r3, #28]
 8112446:	68ba      	ldr	r2, [r7, #8]
 8112448:	4013      	ands	r3, r2
 811244a:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 811244c:	68bb      	ldr	r3, [r7, #8]
 811244e:	b29b      	uxth	r3, r3
}
 8112450:	4618      	mov	r0, r3
 8112452:	3714      	adds	r7, #20
 8112454:	46bd      	mov	sp, r7
 8112456:	f85d 7b04 	ldr.w	r7, [sp], #4
 811245a:	4770      	bx	lr

0811245c <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 811245c:	b480      	push	{r7}
 811245e:	b085      	sub	sp, #20
 8112460:	af00      	add	r7, sp, #0
 8112462:	6078      	str	r0, [r7, #4]
 8112464:	460b      	mov	r3, r1
 8112466:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8112468:	687b      	ldr	r3, [r7, #4]
 811246a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 811246c:	78fb      	ldrb	r3, [r7, #3]
 811246e:	015a      	lsls	r2, r3, #5
 8112470:	68fb      	ldr	r3, [r7, #12]
 8112472:	4413      	add	r3, r2
 8112474:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8112478:	689b      	ldr	r3, [r3, #8]
 811247a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 811247c:	68fb      	ldr	r3, [r7, #12]
 811247e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8112482:	695b      	ldr	r3, [r3, #20]
 8112484:	68ba      	ldr	r2, [r7, #8]
 8112486:	4013      	ands	r3, r2
 8112488:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 811248a:	68bb      	ldr	r3, [r7, #8]
}
 811248c:	4618      	mov	r0, r3
 811248e:	3714      	adds	r7, #20
 8112490:	46bd      	mov	sp, r7
 8112492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8112496:	4770      	bx	lr

08112498 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8112498:	b480      	push	{r7}
 811249a:	b087      	sub	sp, #28
 811249c:	af00      	add	r7, sp, #0
 811249e:	6078      	str	r0, [r7, #4]
 81124a0:	460b      	mov	r3, r1
 81124a2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 81124a4:	687b      	ldr	r3, [r7, #4]
 81124a6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 81124a8:	697b      	ldr	r3, [r7, #20]
 81124aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 81124ae:	691b      	ldr	r3, [r3, #16]
 81124b0:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 81124b2:	697b      	ldr	r3, [r7, #20]
 81124b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 81124b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 81124ba:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 81124bc:	78fb      	ldrb	r3, [r7, #3]
 81124be:	f003 030f 	and.w	r3, r3, #15
 81124c2:	68fa      	ldr	r2, [r7, #12]
 81124c4:	fa22 f303 	lsr.w	r3, r2, r3
 81124c8:	01db      	lsls	r3, r3, #7
 81124ca:	b2db      	uxtb	r3, r3
 81124cc:	693a      	ldr	r2, [r7, #16]
 81124ce:	4313      	orrs	r3, r2
 81124d0:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 81124d2:	78fb      	ldrb	r3, [r7, #3]
 81124d4:	015a      	lsls	r2, r3, #5
 81124d6:	697b      	ldr	r3, [r7, #20]
 81124d8:	4413      	add	r3, r2
 81124da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 81124de:	689b      	ldr	r3, [r3, #8]
 81124e0:	693a      	ldr	r2, [r7, #16]
 81124e2:	4013      	ands	r3, r2
 81124e4:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 81124e6:	68bb      	ldr	r3, [r7, #8]
}
 81124e8:	4618      	mov	r0, r3
 81124ea:	371c      	adds	r7, #28
 81124ec:	46bd      	mov	sp, r7
 81124ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 81124f2:	4770      	bx	lr

081124f4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 81124f4:	b480      	push	{r7}
 81124f6:	b083      	sub	sp, #12
 81124f8:	af00      	add	r7, sp, #0
 81124fa:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 81124fc:	687b      	ldr	r3, [r7, #4]
 81124fe:	695b      	ldr	r3, [r3, #20]
 8112500:	f003 0301 	and.w	r3, r3, #1
}
 8112504:	4618      	mov	r0, r3
 8112506:	370c      	adds	r7, #12
 8112508:	46bd      	mov	sp, r7
 811250a:	f85d 7b04 	ldr.w	r7, [sp], #4
 811250e:	4770      	bx	lr

08112510 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8112510:	b480      	push	{r7}
 8112512:	b085      	sub	sp, #20
 8112514:	af00      	add	r7, sp, #0
 8112516:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8112518:	687b      	ldr	r3, [r7, #4]
 811251a:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 811251c:	68fb      	ldr	r3, [r7, #12]
 811251e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8112522:	681b      	ldr	r3, [r3, #0]
 8112524:	68fa      	ldr	r2, [r7, #12]
 8112526:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 811252a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 811252e:	f023 0307 	bic.w	r3, r3, #7
 8112532:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8112534:	68fb      	ldr	r3, [r7, #12]
 8112536:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 811253a:	685b      	ldr	r3, [r3, #4]
 811253c:	68fa      	ldr	r2, [r7, #12]
 811253e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8112542:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8112546:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8112548:	2300      	movs	r3, #0
}
 811254a:	4618      	mov	r0, r3
 811254c:	3714      	adds	r7, #20
 811254e:	46bd      	mov	sp, r7
 8112550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8112554:	4770      	bx	lr
	...

08112558 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8112558:	b480      	push	{r7}
 811255a:	b087      	sub	sp, #28
 811255c:	af00      	add	r7, sp, #0
 811255e:	60f8      	str	r0, [r7, #12]
 8112560:	460b      	mov	r3, r1
 8112562:	607a      	str	r2, [r7, #4]
 8112564:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8112566:	68fb      	ldr	r3, [r7, #12]
 8112568:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 811256a:	68fb      	ldr	r3, [r7, #12]
 811256c:	333c      	adds	r3, #60	; 0x3c
 811256e:	3304      	adds	r3, #4
 8112570:	681b      	ldr	r3, [r3, #0]
 8112572:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8112574:	693b      	ldr	r3, [r7, #16]
 8112576:	4a26      	ldr	r2, [pc, #152]	; (8112610 <USB_EP0_OutStart+0xb8>)
 8112578:	4293      	cmp	r3, r2
 811257a:	d90a      	bls.n	8112592 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 811257c:	697b      	ldr	r3, [r7, #20]
 811257e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8112582:	681b      	ldr	r3, [r3, #0]
 8112584:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8112588:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 811258c:	d101      	bne.n	8112592 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 811258e:	2300      	movs	r3, #0
 8112590:	e037      	b.n	8112602 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8112592:	697b      	ldr	r3, [r7, #20]
 8112594:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8112598:	461a      	mov	r2, r3
 811259a:	2300      	movs	r3, #0
 811259c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 811259e:	697b      	ldr	r3, [r7, #20]
 81125a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 81125a4:	691b      	ldr	r3, [r3, #16]
 81125a6:	697a      	ldr	r2, [r7, #20]
 81125a8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 81125ac:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 81125b0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 81125b2:	697b      	ldr	r3, [r7, #20]
 81125b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 81125b8:	691b      	ldr	r3, [r3, #16]
 81125ba:	697a      	ldr	r2, [r7, #20]
 81125bc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 81125c0:	f043 0318 	orr.w	r3, r3, #24
 81125c4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 81125c6:	697b      	ldr	r3, [r7, #20]
 81125c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 81125cc:	691b      	ldr	r3, [r3, #16]
 81125ce:	697a      	ldr	r2, [r7, #20]
 81125d0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 81125d4:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 81125d8:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 81125da:	7afb      	ldrb	r3, [r7, #11]
 81125dc:	2b01      	cmp	r3, #1
 81125de:	d10f      	bne.n	8112600 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 81125e0:	697b      	ldr	r3, [r7, #20]
 81125e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 81125e6:	461a      	mov	r2, r3
 81125e8:	687b      	ldr	r3, [r7, #4]
 81125ea:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 81125ec:	697b      	ldr	r3, [r7, #20]
 81125ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 81125f2:	681b      	ldr	r3, [r3, #0]
 81125f4:	697a      	ldr	r2, [r7, #20]
 81125f6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 81125fa:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 81125fe:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8112600:	2300      	movs	r3, #0
}
 8112602:	4618      	mov	r0, r3
 8112604:	371c      	adds	r7, #28
 8112606:	46bd      	mov	sp, r7
 8112608:	f85d 7b04 	ldr.w	r7, [sp], #4
 811260c:	4770      	bx	lr
 811260e:	bf00      	nop
 8112610:	4f54300a 	.word	0x4f54300a

08112614 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8112614:	b580      	push	{r7, lr}
 8112616:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8112618:	4904      	ldr	r1, [pc, #16]	; (811262c <MX_FATFS_Init+0x18>)
 811261a:	4805      	ldr	r0, [pc, #20]	; (8112630 <MX_FATFS_Init+0x1c>)
 811261c:	f001 fb12 	bl	8113c44 <FATFS_LinkDriver>
 8112620:	4603      	mov	r3, r0
 8112622:	461a      	mov	r2, r3
 8112624:	4b03      	ldr	r3, [pc, #12]	; (8112634 <MX_FATFS_Init+0x20>)
 8112626:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8112628:	bf00      	nop
 811262a:	bd80      	pop	{r7, pc}
 811262c:	1000521c 	.word	0x1000521c
 8112630:	08119b3c 	.word	0x08119b3c
 8112634:	10005218 	.word	0x10005218

08112638 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8112638:	b580      	push	{r7, lr}
 811263a:	b082      	sub	sp, #8
 811263c:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 811263e:	2300      	movs	r3, #0
 8112640:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8112642:	f000 f885 	bl	8112750 <BSP_SD_IsDetected>
 8112646:	4603      	mov	r3, r0
 8112648:	2b01      	cmp	r3, #1
 811264a:	d001      	beq.n	8112650 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 811264c:	2302      	movs	r3, #2
 811264e:	e012      	b.n	8112676 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 8112650:	480b      	ldr	r0, [pc, #44]	; (8112680 <BSP_SD_Init+0x48>)
 8112652:	f7f9 fa3f 	bl	810bad4 <HAL_SD_Init>
 8112656:	4603      	mov	r3, r0
 8112658:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 811265a:	79fb      	ldrb	r3, [r7, #7]
 811265c:	2b00      	cmp	r3, #0
 811265e:	d109      	bne.n	8112674 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 8112660:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8112664:	4806      	ldr	r0, [pc, #24]	; (8112680 <BSP_SD_Init+0x48>)
 8112666:	f7fa f903 	bl	810c870 <HAL_SD_ConfigWideBusOperation>
 811266a:	4603      	mov	r3, r0
 811266c:	2b00      	cmp	r3, #0
 811266e:	d001      	beq.n	8112674 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8112670:	2301      	movs	r3, #1
 8112672:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8112674:	79fb      	ldrb	r3, [r7, #7]
}
 8112676:	4618      	mov	r0, r3
 8112678:	3708      	adds	r7, #8
 811267a:	46bd      	mov	sp, r7
 811267c:	bd80      	pop	{r7, pc}
 811267e:	bf00      	nop
 8112680:	10004e04 	.word	0x10004e04

08112684 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8112684:	b580      	push	{r7, lr}
 8112686:	b086      	sub	sp, #24
 8112688:	af00      	add	r7, sp, #0
 811268a:	60f8      	str	r0, [r7, #12]
 811268c:	60b9      	str	r1, [r7, #8]
 811268e:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8112690:	2300      	movs	r3, #0
 8112692:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8112694:	687b      	ldr	r3, [r7, #4]
 8112696:	68ba      	ldr	r2, [r7, #8]
 8112698:	68f9      	ldr	r1, [r7, #12]
 811269a:	4806      	ldr	r0, [pc, #24]	; (81126b4 <BSP_SD_ReadBlocks_DMA+0x30>)
 811269c:	f7f9 fb46 	bl	810bd2c <HAL_SD_ReadBlocks_DMA>
 81126a0:	4603      	mov	r3, r0
 81126a2:	2b00      	cmp	r3, #0
 81126a4:	d001      	beq.n	81126aa <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 81126a6:	2301      	movs	r3, #1
 81126a8:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 81126aa:	7dfb      	ldrb	r3, [r7, #23]
}
 81126ac:	4618      	mov	r0, r3
 81126ae:	3718      	adds	r7, #24
 81126b0:	46bd      	mov	sp, r7
 81126b2:	bd80      	pop	{r7, pc}
 81126b4:	10004e04 	.word	0x10004e04

081126b8 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 81126b8:	b580      	push	{r7, lr}
 81126ba:	b086      	sub	sp, #24
 81126bc:	af00      	add	r7, sp, #0
 81126be:	60f8      	str	r0, [r7, #12]
 81126c0:	60b9      	str	r1, [r7, #8]
 81126c2:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 81126c4:	2300      	movs	r3, #0
 81126c6:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 81126c8:	687b      	ldr	r3, [r7, #4]
 81126ca:	68ba      	ldr	r2, [r7, #8]
 81126cc:	68f9      	ldr	r1, [r7, #12]
 81126ce:	4806      	ldr	r0, [pc, #24]	; (81126e8 <BSP_SD_WriteBlocks_DMA+0x30>)
 81126d0:	f7f9 fbd4 	bl	810be7c <HAL_SD_WriteBlocks_DMA>
 81126d4:	4603      	mov	r3, r0
 81126d6:	2b00      	cmp	r3, #0
 81126d8:	d001      	beq.n	81126de <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 81126da:	2301      	movs	r3, #1
 81126dc:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 81126de:	7dfb      	ldrb	r3, [r7, #23]
}
 81126e0:	4618      	mov	r0, r3
 81126e2:	3718      	adds	r7, #24
 81126e4:	46bd      	mov	sp, r7
 81126e6:	bd80      	pop	{r7, pc}
 81126e8:	10004e04 	.word	0x10004e04

081126ec <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 81126ec:	b580      	push	{r7, lr}
 81126ee:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 81126f0:	4805      	ldr	r0, [pc, #20]	; (8112708 <BSP_SD_GetCardState+0x1c>)
 81126f2:	f7fa f9d1 	bl	810ca98 <HAL_SD_GetCardState>
 81126f6:	4603      	mov	r3, r0
 81126f8:	2b04      	cmp	r3, #4
 81126fa:	bf14      	ite	ne
 81126fc:	2301      	movne	r3, #1
 81126fe:	2300      	moveq	r3, #0
 8112700:	b2db      	uxtb	r3, r3
}
 8112702:	4618      	mov	r0, r3
 8112704:	bd80      	pop	{r7, pc}
 8112706:	bf00      	nop
 8112708:	10004e04 	.word	0x10004e04

0811270c <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 811270c:	b580      	push	{r7, lr}
 811270e:	b082      	sub	sp, #8
 8112710:	af00      	add	r7, sp, #0
 8112712:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 8112714:	6879      	ldr	r1, [r7, #4]
 8112716:	4803      	ldr	r0, [pc, #12]	; (8112724 <BSP_SD_GetCardInfo+0x18>)
 8112718:	f7fa f87e 	bl	810c818 <HAL_SD_GetCardInfo>
}
 811271c:	bf00      	nop
 811271e:	3708      	adds	r7, #8
 8112720:	46bd      	mov	sp, r7
 8112722:	bd80      	pop	{r7, pc}
 8112724:	10004e04 	.word	0x10004e04

08112728 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8112728:	b580      	push	{r7, lr}
 811272a:	b082      	sub	sp, #8
 811272c:	af00      	add	r7, sp, #0
 811272e:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8112730:	f000 f990 	bl	8112a54 <BSP_SD_WriteCpltCallback>
}
 8112734:	bf00      	nop
 8112736:	3708      	adds	r7, #8
 8112738:	46bd      	mov	sp, r7
 811273a:	bd80      	pop	{r7, pc}

0811273c <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 811273c:	b580      	push	{r7, lr}
 811273e:	b082      	sub	sp, #8
 8112740:	af00      	add	r7, sp, #0
 8112742:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8112744:	f000 f998 	bl	8112a78 <BSP_SD_ReadCpltCallback>
}
 8112748:	bf00      	nop
 811274a:	3708      	adds	r7, #8
 811274c:	46bd      	mov	sp, r7
 811274e:	bd80      	pop	{r7, pc}

08112750 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8112750:	b480      	push	{r7}
 8112752:	b083      	sub	sp, #12
 8112754:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8112756:	2301      	movs	r3, #1
 8112758:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN IsDetectedSection */
  /* user code can be inserted here */
  /* USER CODE END IsDetectedSection */

  return status;
 811275a:	79fb      	ldrb	r3, [r7, #7]
 811275c:	b2db      	uxtb	r3, r3
}
 811275e:	4618      	mov	r0, r3
 8112760:	370c      	adds	r7, #12
 8112762:	46bd      	mov	sp, r7
 8112764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8112768:	4770      	bx	lr

0811276a <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 811276a:	b580      	push	{r7, lr}
 811276c:	b084      	sub	sp, #16
 811276e:	af00      	add	r7, sp, #0
 8112770:	6078      	str	r0, [r7, #4]
  /* block until SDIO peripheral is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
  while( osKernelSysTick() - timer < timeout)
#else
  timer = osKernelGetTickCount();
 8112772:	f001 fb27 	bl	8113dc4 <osKernelGetTickCount>
 8112776:	60f8      	str	r0, [r7, #12]
  while( osKernelGetTickCount() - timer < timeout)
 8112778:	e006      	b.n	8112788 <SD_CheckStatusWithTimeout+0x1e>
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 811277a:	f7ff ffb7 	bl	81126ec <BSP_SD_GetCardState>
 811277e:	4603      	mov	r3, r0
 8112780:	2b00      	cmp	r3, #0
 8112782:	d101      	bne.n	8112788 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8112784:	2300      	movs	r3, #0
 8112786:	e009      	b.n	811279c <SD_CheckStatusWithTimeout+0x32>
  while( osKernelGetTickCount() - timer < timeout)
 8112788:	f001 fb1c 	bl	8113dc4 <osKernelGetTickCount>
 811278c:	4602      	mov	r2, r0
 811278e:	68fb      	ldr	r3, [r7, #12]
 8112790:	1ad3      	subs	r3, r2, r3
 8112792:	687a      	ldr	r2, [r7, #4]
 8112794:	429a      	cmp	r2, r3
 8112796:	d8f0      	bhi.n	811277a <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8112798:	f04f 33ff 	mov.w	r3, #4294967295
}
 811279c:	4618      	mov	r0, r3
 811279e:	3710      	adds	r7, #16
 81127a0:	46bd      	mov	sp, r7
 81127a2:	bd80      	pop	{r7, pc}

081127a4 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 81127a4:	b580      	push	{r7, lr}
 81127a6:	b082      	sub	sp, #8
 81127a8:	af00      	add	r7, sp, #0
 81127aa:	4603      	mov	r3, r0
 81127ac:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 81127ae:	4b0b      	ldr	r3, [pc, #44]	; (81127dc <SD_CheckStatus+0x38>)
 81127b0:	2201      	movs	r2, #1
 81127b2:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 81127b4:	f7ff ff9a 	bl	81126ec <BSP_SD_GetCardState>
 81127b8:	4603      	mov	r3, r0
 81127ba:	2b00      	cmp	r3, #0
 81127bc:	d107      	bne.n	81127ce <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 81127be:	4b07      	ldr	r3, [pc, #28]	; (81127dc <SD_CheckStatus+0x38>)
 81127c0:	781b      	ldrb	r3, [r3, #0]
 81127c2:	b2db      	uxtb	r3, r3
 81127c4:	f023 0301 	bic.w	r3, r3, #1
 81127c8:	b2da      	uxtb	r2, r3
 81127ca:	4b04      	ldr	r3, [pc, #16]	; (81127dc <SD_CheckStatus+0x38>)
 81127cc:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 81127ce:	4b03      	ldr	r3, [pc, #12]	; (81127dc <SD_CheckStatus+0x38>)
 81127d0:	781b      	ldrb	r3, [r3, #0]
 81127d2:	b2db      	uxtb	r3, r3
}
 81127d4:	4618      	mov	r0, r3
 81127d6:	3708      	adds	r7, #8
 81127d8:	46bd      	mov	sp, r7
 81127da:	bd80      	pop	{r7, pc}
 81127dc:	1000000d 	.word	0x1000000d

081127e0 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 81127e0:	b580      	push	{r7, lr}
 81127e2:	b082      	sub	sp, #8
 81127e4:	af00      	add	r7, sp, #0
 81127e6:	4603      	mov	r3, r0
 81127e8:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 81127ea:	4b1c      	ldr	r3, [pc, #112]	; (811285c <SD_initialize+0x7c>)
 81127ec:	2201      	movs	r2, #1
 81127ee:	701a      	strb	r2, [r3, #0]
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
#else
  if(osKernelGetState() == osKernelRunning)
 81127f0:	f001 faa0 	bl	8113d34 <osKernelGetState>
 81127f4:	4603      	mov	r3, r0
 81127f6:	2b02      	cmp	r3, #2
 81127f8:	d129      	bne.n	811284e <SD_initialize+0x6e>
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 81127fa:	f7ff ff1d 	bl	8112638 <BSP_SD_Init>
 81127fe:	4603      	mov	r3, r0
 8112800:	2b00      	cmp	r3, #0
 8112802:	d107      	bne.n	8112814 <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 8112804:	79fb      	ldrb	r3, [r7, #7]
 8112806:	4618      	mov	r0, r3
 8112808:	f7ff ffcc 	bl	81127a4 <SD_CheckStatus>
 811280c:	4603      	mov	r3, r0
 811280e:	461a      	mov	r2, r3
 8112810:	4b12      	ldr	r3, [pc, #72]	; (811285c <SD_initialize+0x7c>)
 8112812:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 8112814:	4b11      	ldr	r3, [pc, #68]	; (811285c <SD_initialize+0x7c>)
 8112816:	781b      	ldrb	r3, [r3, #0]
 8112818:	b2db      	uxtb	r3, r3
 811281a:	2b01      	cmp	r3, #1
 811281c:	d017      	beq.n	811284e <SD_initialize+0x6e>
    {
      if (SDQueueID == NULL)
 811281e:	4b10      	ldr	r3, [pc, #64]	; (8112860 <SD_initialize+0x80>)
 8112820:	681b      	ldr	r3, [r3, #0]
 8112822:	2b00      	cmp	r3, #0
 8112824:	d107      	bne.n	8112836 <SD_initialize+0x56>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
 8112826:	2200      	movs	r2, #0
 8112828:	2102      	movs	r1, #2
 811282a:	200a      	movs	r0, #10
 811282c:	f001 fb8c 	bl	8113f48 <osMessageQueueNew>
 8112830:	4603      	mov	r3, r0
 8112832:	4a0b      	ldr	r2, [pc, #44]	; (8112860 <SD_initialize+0x80>)
 8112834:	6013      	str	r3, [r2, #0]
#endif
      }

      if (SDQueueID == NULL)
 8112836:	4b0a      	ldr	r3, [pc, #40]	; (8112860 <SD_initialize+0x80>)
 8112838:	681b      	ldr	r3, [r3, #0]
 811283a:	2b00      	cmp	r3, #0
 811283c:	d107      	bne.n	811284e <SD_initialize+0x6e>
      {
        Stat |= STA_NOINIT;
 811283e:	4b07      	ldr	r3, [pc, #28]	; (811285c <SD_initialize+0x7c>)
 8112840:	781b      	ldrb	r3, [r3, #0]
 8112842:	b2db      	uxtb	r3, r3
 8112844:	f043 0301 	orr.w	r3, r3, #1
 8112848:	b2da      	uxtb	r2, r3
 811284a:	4b04      	ldr	r3, [pc, #16]	; (811285c <SD_initialize+0x7c>)
 811284c:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 811284e:	4b03      	ldr	r3, [pc, #12]	; (811285c <SD_initialize+0x7c>)
 8112850:	781b      	ldrb	r3, [r3, #0]
 8112852:	b2db      	uxtb	r3, r3
}
 8112854:	4618      	mov	r0, r3
 8112856:	3708      	adds	r7, #8
 8112858:	46bd      	mov	sp, r7
 811285a:	bd80      	pop	{r7, pc}
 811285c:	1000000d 	.word	0x1000000d
 8112860:	10000210 	.word	0x10000210

08112864 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8112864:	b580      	push	{r7, lr}
 8112866:	b082      	sub	sp, #8
 8112868:	af00      	add	r7, sp, #0
 811286a:	4603      	mov	r3, r0
 811286c:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 811286e:	79fb      	ldrb	r3, [r7, #7]
 8112870:	4618      	mov	r0, r3
 8112872:	f7ff ff97 	bl	81127a4 <SD_CheckStatus>
 8112876:	4603      	mov	r3, r0
}
 8112878:	4618      	mov	r0, r3
 811287a:	3708      	adds	r7, #8
 811287c:	46bd      	mov	sp, r7
 811287e:	bd80      	pop	{r7, pc}

08112880 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8112880:	b580      	push	{r7, lr}
 8112882:	b088      	sub	sp, #32
 8112884:	af00      	add	r7, sp, #0
 8112886:	60b9      	str	r1, [r7, #8]
 8112888:	607a      	str	r2, [r7, #4]
 811288a:	603b      	str	r3, [r7, #0]
 811288c:	4603      	mov	r3, r0
 811288e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8112890:	2301      	movs	r3, #1
 8112892:	77fb      	strb	r3, [r7, #31]
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8112894:	f247 5030 	movw	r0, #30000	; 0x7530
 8112898:	f7ff ff67 	bl	811276a <SD_CheckStatusWithTimeout>
 811289c:	4603      	mov	r3, r0
 811289e:	2b00      	cmp	r3, #0
 81128a0:	da01      	bge.n	81128a6 <SD_read+0x26>
  {
    return res;
 81128a2:	7ffb      	ldrb	r3, [r7, #31]
 81128a4:	e02f      	b.n	8112906 <SD_read+0x86>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    uint8_t ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 81128a6:	683a      	ldr	r2, [r7, #0]
 81128a8:	6879      	ldr	r1, [r7, #4]
 81128aa:	68b8      	ldr	r0, [r7, #8]
 81128ac:	f7ff feea 	bl	8112684 <BSP_SD_ReadBlocks_DMA>
 81128b0:	4603      	mov	r3, r0
 81128b2:	77bb      	strb	r3, [r7, #30]

    if (ret == MSD_OK) {
 81128b4:	7fbb      	ldrb	r3, [r7, #30]
 81128b6:	2b00      	cmp	r3, #0
 81128b8:	d124      	bne.n	8112904 <SD_read+0x84>
      {
        timer = osKernelSysTick();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
#else
          status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 81128ba:	4b15      	ldr	r3, [pc, #84]	; (8112910 <SD_read+0x90>)
 81128bc:	6818      	ldr	r0, [r3, #0]
 81128be:	f107 0112 	add.w	r1, r7, #18
 81128c2:	f247 5330 	movw	r3, #30000	; 0x7530
 81128c6:	2200      	movs	r2, #0
 81128c8:	f001 fc12 	bl	81140f0 <osMessageQueueGet>
 81128cc:	61b8      	str	r0, [r7, #24]
          if ((status == osOK) && (event == READ_CPLT_MSG))
 81128ce:	69bb      	ldr	r3, [r7, #24]
 81128d0:	2b00      	cmp	r3, #0
 81128d2:	d117      	bne.n	8112904 <SD_read+0x84>
 81128d4:	8a7b      	ldrh	r3, [r7, #18]
 81128d6:	2b01      	cmp	r3, #1
 81128d8:	d114      	bne.n	8112904 <SD_read+0x84>
          {
            timer = osKernelGetTickCount();
 81128da:	f001 fa73 	bl	8113dc4 <osKernelGetTickCount>
 81128de:	6178      	str	r0, [r7, #20]
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 81128e0:	e007      	b.n	81128f2 <SD_read+0x72>
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 81128e2:	f7ff ff03 	bl	81126ec <BSP_SD_GetCardState>
 81128e6:	4603      	mov	r3, r0
 81128e8:	2b00      	cmp	r3, #0
 81128ea:	d102      	bne.n	81128f2 <SD_read+0x72>
              {
                res = RES_OK;
 81128ec:	2300      	movs	r3, #0
 81128ee:	77fb      	strb	r3, [r7, #31]
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 81128f0:	e008      	b.n	8112904 <SD_read+0x84>
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 81128f2:	f001 fa67 	bl	8113dc4 <osKernelGetTickCount>
 81128f6:	4602      	mov	r2, r0
 81128f8:	697b      	ldr	r3, [r7, #20]
 81128fa:	1ad3      	subs	r3, r2, r3
 81128fc:	f247 522f 	movw	r2, #29999	; 0x752f
 8112900:	4293      	cmp	r3, r2
 8112902:	d9ee      	bls.n	81128e2 <SD_read+0x62>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 8112904:	7ffb      	ldrb	r3, [r7, #31]
}
 8112906:	4618      	mov	r0, r3
 8112908:	3720      	adds	r7, #32
 811290a:	46bd      	mov	sp, r7
 811290c:	bd80      	pop	{r7, pc}
 811290e:	bf00      	nop
 8112910:	10000210 	.word	0x10000210

08112914 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8112914:	b580      	push	{r7, lr}
 8112916:	b088      	sub	sp, #32
 8112918:	af00      	add	r7, sp, #0
 811291a:	60b9      	str	r1, [r7, #8]
 811291c:	607a      	str	r2, [r7, #4]
 811291e:	603b      	str	r3, [r7, #0]
 8112920:	4603      	mov	r3, r0
 8112922:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8112924:	2301      	movs	r3, #1
 8112926:	77fb      	strb	r3, [r7, #31]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8112928:	f247 5030 	movw	r0, #30000	; 0x7530
 811292c:	f7ff ff1d 	bl	811276a <SD_CheckStatusWithTimeout>
 8112930:	4603      	mov	r3, r0
 8112932:	2b00      	cmp	r3, #0
 8112934:	da01      	bge.n	811293a <SD_write+0x26>
  {
    return res;
 8112936:	7ffb      	ldrb	r3, [r7, #31]
 8112938:	e02d      	b.n	8112996 <SD_write+0x82>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 811293a:	683a      	ldr	r2, [r7, #0]
 811293c:	6879      	ldr	r1, [r7, #4]
 811293e:	68b8      	ldr	r0, [r7, #8]
 8112940:	f7ff feba 	bl	81126b8 <BSP_SD_WriteBlocks_DMA>
 8112944:	4603      	mov	r3, r0
 8112946:	2b00      	cmp	r3, #0
 8112948:	d124      	bne.n	8112994 <SD_write+0x80>
    if (event.status == osEventMessage)
    {
      if (event.value.v == WRITE_CPLT_MSG)
      {
#else
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 811294a:	4b15      	ldr	r3, [pc, #84]	; (81129a0 <SD_write+0x8c>)
 811294c:	6818      	ldr	r0, [r3, #0]
 811294e:	f107 0112 	add.w	r1, r7, #18
 8112952:	f247 5330 	movw	r3, #30000	; 0x7530
 8112956:	2200      	movs	r2, #0
 8112958:	f001 fbca 	bl	81140f0 <osMessageQueueGet>
 811295c:	61b8      	str	r0, [r7, #24]
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
 811295e:	69bb      	ldr	r3, [r7, #24]
 8112960:	2b00      	cmp	r3, #0
 8112962:	d117      	bne.n	8112994 <SD_write+0x80>
 8112964:	8a7b      	ldrh	r3, [r7, #18]
 8112966:	2b02      	cmp	r3, #2
 8112968:	d114      	bne.n	8112994 <SD_write+0x80>
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
#else
        timer = osKernelGetTickCount();
 811296a:	f001 fa2b 	bl	8113dc4 <osKernelGetTickCount>
 811296e:	6178      	str	r0, [r7, #20]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 8112970:	e007      	b.n	8112982 <SD_write+0x6e>
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8112972:	f7ff febb 	bl	81126ec <BSP_SD_GetCardState>
 8112976:	4603      	mov	r3, r0
 8112978:	2b00      	cmp	r3, #0
 811297a:	d102      	bne.n	8112982 <SD_write+0x6e>
          {
            res = RES_OK;
 811297c:	2300      	movs	r3, #0
 811297e:	77fb      	strb	r3, [r7, #31]
            break;
 8112980:	e008      	b.n	8112994 <SD_write+0x80>
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 8112982:	f001 fa1f 	bl	8113dc4 <osKernelGetTickCount>
 8112986:	4602      	mov	r2, r0
 8112988:	697b      	ldr	r3, [r7, #20]
 811298a:	1ad3      	subs	r3, r2, r3
 811298c:	f247 522f 	movw	r2, #29999	; 0x752f
 8112990:	4293      	cmp	r3, r2
 8112992:	d9ee      	bls.n	8112972 <SD_write+0x5e>
    }

  }
#endif

  return res;
 8112994:	7ffb      	ldrb	r3, [r7, #31]
}
 8112996:	4618      	mov	r0, r3
 8112998:	3720      	adds	r7, #32
 811299a:	46bd      	mov	sp, r7
 811299c:	bd80      	pop	{r7, pc}
 811299e:	bf00      	nop
 81129a0:	10000210 	.word	0x10000210

081129a4 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 81129a4:	b580      	push	{r7, lr}
 81129a6:	b08c      	sub	sp, #48	; 0x30
 81129a8:	af00      	add	r7, sp, #0
 81129aa:	4603      	mov	r3, r0
 81129ac:	603a      	str	r2, [r7, #0]
 81129ae:	71fb      	strb	r3, [r7, #7]
 81129b0:	460b      	mov	r3, r1
 81129b2:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 81129b4:	2301      	movs	r3, #1
 81129b6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 81129ba:	4b25      	ldr	r3, [pc, #148]	; (8112a50 <SD_ioctl+0xac>)
 81129bc:	781b      	ldrb	r3, [r3, #0]
 81129be:	b2db      	uxtb	r3, r3
 81129c0:	f003 0301 	and.w	r3, r3, #1
 81129c4:	2b00      	cmp	r3, #0
 81129c6:	d001      	beq.n	81129cc <SD_ioctl+0x28>
 81129c8:	2303      	movs	r3, #3
 81129ca:	e03c      	b.n	8112a46 <SD_ioctl+0xa2>

  switch (cmd)
 81129cc:	79bb      	ldrb	r3, [r7, #6]
 81129ce:	2b03      	cmp	r3, #3
 81129d0:	d834      	bhi.n	8112a3c <SD_ioctl+0x98>
 81129d2:	a201      	add	r2, pc, #4	; (adr r2, 81129d8 <SD_ioctl+0x34>)
 81129d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81129d8:	081129e9 	.word	0x081129e9
 81129dc:	081129f1 	.word	0x081129f1
 81129e0:	08112a09 	.word	0x08112a09
 81129e4:	08112a23 	.word	0x08112a23
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 81129e8:	2300      	movs	r3, #0
 81129ea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 81129ee:	e028      	b.n	8112a42 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 81129f0:	f107 0308 	add.w	r3, r7, #8
 81129f4:	4618      	mov	r0, r3
 81129f6:	f7ff fe89 	bl	811270c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 81129fa:	6a3a      	ldr	r2, [r7, #32]
 81129fc:	683b      	ldr	r3, [r7, #0]
 81129fe:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8112a00:	2300      	movs	r3, #0
 8112a02:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8112a06:	e01c      	b.n	8112a42 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8112a08:	f107 0308 	add.w	r3, r7, #8
 8112a0c:	4618      	mov	r0, r3
 8112a0e:	f7ff fe7d 	bl	811270c <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8112a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8112a14:	b29a      	uxth	r2, r3
 8112a16:	683b      	ldr	r3, [r7, #0]
 8112a18:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8112a1a:	2300      	movs	r3, #0
 8112a1c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8112a20:	e00f      	b.n	8112a42 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8112a22:	f107 0308 	add.w	r3, r7, #8
 8112a26:	4618      	mov	r0, r3
 8112a28:	f7ff fe70 	bl	811270c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8112a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8112a2e:	0a5a      	lsrs	r2, r3, #9
 8112a30:	683b      	ldr	r3, [r7, #0]
 8112a32:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8112a34:	2300      	movs	r3, #0
 8112a36:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8112a3a:	e002      	b.n	8112a42 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8112a3c:	2304      	movs	r3, #4
 8112a3e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8112a42:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8112a46:	4618      	mov	r0, r3
 8112a48:	3730      	adds	r7, #48	; 0x30
 8112a4a:	46bd      	mov	sp, r7
 8112a4c:	bd80      	pop	{r7, pc}
 8112a4e:	bf00      	nop
 8112a50:	1000000d 	.word	0x1000000d

08112a54 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 8112a54:	b580      	push	{r7, lr}
 8112a56:	b082      	sub	sp, #8
 8112a58:	af00      	add	r7, sp, #0
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, WRITE_CPLT_MSG, 0);
#else
   const uint16_t msg = WRITE_CPLT_MSG;
 8112a5a:	2302      	movs	r3, #2
 8112a5c:	80fb      	strh	r3, [r7, #6]
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
 8112a5e:	4b05      	ldr	r3, [pc, #20]	; (8112a74 <BSP_SD_WriteCpltCallback+0x20>)
 8112a60:	6818      	ldr	r0, [r3, #0]
 8112a62:	1db9      	adds	r1, r7, #6
 8112a64:	2300      	movs	r3, #0
 8112a66:	2200      	movs	r2, #0
 8112a68:	f001 fae2 	bl	8114030 <osMessageQueuePut>
#endif
}
 8112a6c:	bf00      	nop
 8112a6e:	3708      	adds	r7, #8
 8112a70:	46bd      	mov	sp, r7
 8112a72:	bd80      	pop	{r7, pc}
 8112a74:	10000210 	.word	0x10000210

08112a78 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8112a78:	b580      	push	{r7, lr}
 8112a7a:	b082      	sub	sp, #8
 8112a7c:	af00      	add	r7, sp, #0
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
#else
   const uint16_t msg = READ_CPLT_MSG;
 8112a7e:	2301      	movs	r3, #1
 8112a80:	80fb      	strh	r3, [r7, #6]
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
 8112a82:	4b05      	ldr	r3, [pc, #20]	; (8112a98 <BSP_SD_ReadCpltCallback+0x20>)
 8112a84:	6818      	ldr	r0, [r3, #0]
 8112a86:	1db9      	adds	r1, r7, #6
 8112a88:	2300      	movs	r3, #0
 8112a8a:	2200      	movs	r2, #0
 8112a8c:	f001 fad0 	bl	8114030 <osMessageQueuePut>
#endif
}
 8112a90:	bf00      	nop
 8112a92:	3708      	adds	r7, #8
 8112a94:	46bd      	mov	sp, r7
 8112a96:	bd80      	pop	{r7, pc}
 8112a98:	10000210 	.word	0x10000210

08112a9c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8112a9c:	b480      	push	{r7}
 8112a9e:	b083      	sub	sp, #12
 8112aa0:	af00      	add	r7, sp, #0
 8112aa2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8112aa4:	2300      	movs	r3, #0
}
 8112aa6:	4618      	mov	r0, r3
 8112aa8:	370c      	adds	r7, #12
 8112aaa:	46bd      	mov	sp, r7
 8112aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8112ab0:	4770      	bx	lr

08112ab2 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8112ab2:	b580      	push	{r7, lr}
 8112ab4:	b084      	sub	sp, #16
 8112ab6:	af00      	add	r7, sp, #0
 8112ab8:	6078      	str	r0, [r7, #4]
 8112aba:	460b      	mov	r3, r1
 8112abc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8112abe:	2303      	movs	r3, #3
 8112ac0:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8112ac2:	687b      	ldr	r3, [r7, #4]
 8112ac4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8112ac8:	2b00      	cmp	r3, #0
 8112aca:	d009      	beq.n	8112ae0 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8112acc:	687b      	ldr	r3, [r7, #4]
 8112ace:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8112ad2:	681b      	ldr	r3, [r3, #0]
 8112ad4:	78fa      	ldrb	r2, [r7, #3]
 8112ad6:	4611      	mov	r1, r2
 8112ad8:	6878      	ldr	r0, [r7, #4]
 8112ada:	4798      	blx	r3
 8112adc:	4603      	mov	r3, r0
 8112ade:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8112ae0:	7bfb      	ldrb	r3, [r7, #15]
}
 8112ae2:	4618      	mov	r0, r3
 8112ae4:	3710      	adds	r7, #16
 8112ae6:	46bd      	mov	sp, r7
 8112ae8:	bd80      	pop	{r7, pc}

08112aea <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8112aea:	b580      	push	{r7, lr}
 8112aec:	b082      	sub	sp, #8
 8112aee:	af00      	add	r7, sp, #0
 8112af0:	6078      	str	r0, [r7, #4]
 8112af2:	460b      	mov	r3, r1
 8112af4:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8112af6:	687b      	ldr	r3, [r7, #4]
 8112af8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8112afc:	2b00      	cmp	r3, #0
 8112afe:	d007      	beq.n	8112b10 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8112b00:	687b      	ldr	r3, [r7, #4]
 8112b02:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8112b06:	685b      	ldr	r3, [r3, #4]
 8112b08:	78fa      	ldrb	r2, [r7, #3]
 8112b0a:	4611      	mov	r1, r2
 8112b0c:	6878      	ldr	r0, [r7, #4]
 8112b0e:	4798      	blx	r3
  }

  return USBD_OK;
 8112b10:	2300      	movs	r3, #0
}
 8112b12:	4618      	mov	r0, r3
 8112b14:	3708      	adds	r7, #8
 8112b16:	46bd      	mov	sp, r7
 8112b18:	bd80      	pop	{r7, pc}

08112b1a <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8112b1a:	b580      	push	{r7, lr}
 8112b1c:	b084      	sub	sp, #16
 8112b1e:	af00      	add	r7, sp, #0
 8112b20:	6078      	str	r0, [r7, #4]
 8112b22:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8112b24:	687b      	ldr	r3, [r7, #4]
 8112b26:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8112b2a:	6839      	ldr	r1, [r7, #0]
 8112b2c:	4618      	mov	r0, r3
 8112b2e:	f000 ff8f 	bl	8113a50 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8112b32:	687b      	ldr	r3, [r7, #4]
 8112b34:	2201      	movs	r2, #1
 8112b36:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8112b3a:	687b      	ldr	r3, [r7, #4]
 8112b3c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8112b40:	461a      	mov	r2, r3
 8112b42:	687b      	ldr	r3, [r7, #4]
 8112b44:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8112b48:	687b      	ldr	r3, [r7, #4]
 8112b4a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8112b4e:	f003 031f 	and.w	r3, r3, #31
 8112b52:	2b02      	cmp	r3, #2
 8112b54:	d01a      	beq.n	8112b8c <USBD_LL_SetupStage+0x72>
 8112b56:	2b02      	cmp	r3, #2
 8112b58:	d822      	bhi.n	8112ba0 <USBD_LL_SetupStage+0x86>
 8112b5a:	2b00      	cmp	r3, #0
 8112b5c:	d002      	beq.n	8112b64 <USBD_LL_SetupStage+0x4a>
 8112b5e:	2b01      	cmp	r3, #1
 8112b60:	d00a      	beq.n	8112b78 <USBD_LL_SetupStage+0x5e>
 8112b62:	e01d      	b.n	8112ba0 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8112b64:	687b      	ldr	r3, [r7, #4]
 8112b66:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8112b6a:	4619      	mov	r1, r3
 8112b6c:	6878      	ldr	r0, [r7, #4]
 8112b6e:	f000 fa61 	bl	8113034 <USBD_StdDevReq>
 8112b72:	4603      	mov	r3, r0
 8112b74:	73fb      	strb	r3, [r7, #15]
      break;
 8112b76:	e020      	b.n	8112bba <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8112b78:	687b      	ldr	r3, [r7, #4]
 8112b7a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8112b7e:	4619      	mov	r1, r3
 8112b80:	6878      	ldr	r0, [r7, #4]
 8112b82:	f000 fac5 	bl	8113110 <USBD_StdItfReq>
 8112b86:	4603      	mov	r3, r0
 8112b88:	73fb      	strb	r3, [r7, #15]
      break;
 8112b8a:	e016      	b.n	8112bba <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8112b8c:	687b      	ldr	r3, [r7, #4]
 8112b8e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8112b92:	4619      	mov	r1, r3
 8112b94:	6878      	ldr	r0, [r7, #4]
 8112b96:	f000 fb04 	bl	81131a2 <USBD_StdEPReq>
 8112b9a:	4603      	mov	r3, r0
 8112b9c:	73fb      	strb	r3, [r7, #15]
      break;
 8112b9e:	e00c      	b.n	8112bba <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8112ba0:	687b      	ldr	r3, [r7, #4]
 8112ba2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8112ba6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8112baa:	b2db      	uxtb	r3, r3
 8112bac:	4619      	mov	r1, r3
 8112bae:	6878      	ldr	r0, [r7, #4]
 8112bb0:	f004 f936 	bl	8116e20 <USBD_LL_StallEP>
 8112bb4:	4603      	mov	r3, r0
 8112bb6:	73fb      	strb	r3, [r7, #15]
      break;
 8112bb8:	bf00      	nop
  }

  return ret;
 8112bba:	7bfb      	ldrb	r3, [r7, #15]
}
 8112bbc:	4618      	mov	r0, r3
 8112bbe:	3710      	adds	r7, #16
 8112bc0:	46bd      	mov	sp, r7
 8112bc2:	bd80      	pop	{r7, pc}

08112bc4 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8112bc4:	b580      	push	{r7, lr}
 8112bc6:	b086      	sub	sp, #24
 8112bc8:	af00      	add	r7, sp, #0
 8112bca:	60f8      	str	r0, [r7, #12]
 8112bcc:	460b      	mov	r3, r1
 8112bce:	607a      	str	r2, [r7, #4]
 8112bd0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8112bd2:	7afb      	ldrb	r3, [r7, #11]
 8112bd4:	2b00      	cmp	r3, #0
 8112bd6:	d138      	bne.n	8112c4a <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8112bd8:	68fb      	ldr	r3, [r7, #12]
 8112bda:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8112bde:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8112be0:	68fb      	ldr	r3, [r7, #12]
 8112be2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8112be6:	2b03      	cmp	r3, #3
 8112be8:	d14a      	bne.n	8112c80 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8112bea:	693b      	ldr	r3, [r7, #16]
 8112bec:	689a      	ldr	r2, [r3, #8]
 8112bee:	693b      	ldr	r3, [r7, #16]
 8112bf0:	68db      	ldr	r3, [r3, #12]
 8112bf2:	429a      	cmp	r2, r3
 8112bf4:	d913      	bls.n	8112c1e <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8112bf6:	693b      	ldr	r3, [r7, #16]
 8112bf8:	689a      	ldr	r2, [r3, #8]
 8112bfa:	693b      	ldr	r3, [r7, #16]
 8112bfc:	68db      	ldr	r3, [r3, #12]
 8112bfe:	1ad2      	subs	r2, r2, r3
 8112c00:	693b      	ldr	r3, [r7, #16]
 8112c02:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8112c04:	693b      	ldr	r3, [r7, #16]
 8112c06:	68da      	ldr	r2, [r3, #12]
 8112c08:	693b      	ldr	r3, [r7, #16]
 8112c0a:	689b      	ldr	r3, [r3, #8]
 8112c0c:	4293      	cmp	r3, r2
 8112c0e:	bf28      	it	cs
 8112c10:	4613      	movcs	r3, r2
 8112c12:	461a      	mov	r2, r3
 8112c14:	6879      	ldr	r1, [r7, #4]
 8112c16:	68f8      	ldr	r0, [r7, #12]
 8112c18:	f000 ff91 	bl	8113b3e <USBD_CtlContinueRx>
 8112c1c:	e030      	b.n	8112c80 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8112c1e:	68fb      	ldr	r3, [r7, #12]
 8112c20:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8112c24:	b2db      	uxtb	r3, r3
 8112c26:	2b03      	cmp	r3, #3
 8112c28:	d10b      	bne.n	8112c42 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8112c2a:	68fb      	ldr	r3, [r7, #12]
 8112c2c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8112c30:	691b      	ldr	r3, [r3, #16]
 8112c32:	2b00      	cmp	r3, #0
 8112c34:	d005      	beq.n	8112c42 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8112c36:	68fb      	ldr	r3, [r7, #12]
 8112c38:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8112c3c:	691b      	ldr	r3, [r3, #16]
 8112c3e:	68f8      	ldr	r0, [r7, #12]
 8112c40:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8112c42:	68f8      	ldr	r0, [r7, #12]
 8112c44:	f000 ff8c 	bl	8113b60 <USBD_CtlSendStatus>
 8112c48:	e01a      	b.n	8112c80 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8112c4a:	68fb      	ldr	r3, [r7, #12]
 8112c4c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8112c50:	b2db      	uxtb	r3, r3
 8112c52:	2b03      	cmp	r3, #3
 8112c54:	d114      	bne.n	8112c80 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8112c56:	68fb      	ldr	r3, [r7, #12]
 8112c58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8112c5c:	699b      	ldr	r3, [r3, #24]
 8112c5e:	2b00      	cmp	r3, #0
 8112c60:	d00e      	beq.n	8112c80 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8112c62:	68fb      	ldr	r3, [r7, #12]
 8112c64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8112c68:	699b      	ldr	r3, [r3, #24]
 8112c6a:	7afa      	ldrb	r2, [r7, #11]
 8112c6c:	4611      	mov	r1, r2
 8112c6e:	68f8      	ldr	r0, [r7, #12]
 8112c70:	4798      	blx	r3
 8112c72:	4603      	mov	r3, r0
 8112c74:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8112c76:	7dfb      	ldrb	r3, [r7, #23]
 8112c78:	2b00      	cmp	r3, #0
 8112c7a:	d001      	beq.n	8112c80 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8112c7c:	7dfb      	ldrb	r3, [r7, #23]
 8112c7e:	e000      	b.n	8112c82 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8112c80:	2300      	movs	r3, #0
}
 8112c82:	4618      	mov	r0, r3
 8112c84:	3718      	adds	r7, #24
 8112c86:	46bd      	mov	sp, r7
 8112c88:	bd80      	pop	{r7, pc}

08112c8a <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8112c8a:	b580      	push	{r7, lr}
 8112c8c:	b086      	sub	sp, #24
 8112c8e:	af00      	add	r7, sp, #0
 8112c90:	60f8      	str	r0, [r7, #12]
 8112c92:	460b      	mov	r3, r1
 8112c94:	607a      	str	r2, [r7, #4]
 8112c96:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8112c98:	7afb      	ldrb	r3, [r7, #11]
 8112c9a:	2b00      	cmp	r3, #0
 8112c9c:	d16b      	bne.n	8112d76 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8112c9e:	68fb      	ldr	r3, [r7, #12]
 8112ca0:	3314      	adds	r3, #20
 8112ca2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8112ca4:	68fb      	ldr	r3, [r7, #12]
 8112ca6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8112caa:	2b02      	cmp	r3, #2
 8112cac:	d156      	bne.n	8112d5c <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8112cae:	693b      	ldr	r3, [r7, #16]
 8112cb0:	689a      	ldr	r2, [r3, #8]
 8112cb2:	693b      	ldr	r3, [r7, #16]
 8112cb4:	68db      	ldr	r3, [r3, #12]
 8112cb6:	429a      	cmp	r2, r3
 8112cb8:	d914      	bls.n	8112ce4 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8112cba:	693b      	ldr	r3, [r7, #16]
 8112cbc:	689a      	ldr	r2, [r3, #8]
 8112cbe:	693b      	ldr	r3, [r7, #16]
 8112cc0:	68db      	ldr	r3, [r3, #12]
 8112cc2:	1ad2      	subs	r2, r2, r3
 8112cc4:	693b      	ldr	r3, [r7, #16]
 8112cc6:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8112cc8:	693b      	ldr	r3, [r7, #16]
 8112cca:	689b      	ldr	r3, [r3, #8]
 8112ccc:	461a      	mov	r2, r3
 8112cce:	6879      	ldr	r1, [r7, #4]
 8112cd0:	68f8      	ldr	r0, [r7, #12]
 8112cd2:	f000 ff23 	bl	8113b1c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8112cd6:	2300      	movs	r3, #0
 8112cd8:	2200      	movs	r2, #0
 8112cda:	2100      	movs	r1, #0
 8112cdc:	68f8      	ldr	r0, [r7, #12]
 8112cde:	f004 f949 	bl	8116f74 <USBD_LL_PrepareReceive>
 8112ce2:	e03b      	b.n	8112d5c <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8112ce4:	693b      	ldr	r3, [r7, #16]
 8112ce6:	68da      	ldr	r2, [r3, #12]
 8112ce8:	693b      	ldr	r3, [r7, #16]
 8112cea:	689b      	ldr	r3, [r3, #8]
 8112cec:	429a      	cmp	r2, r3
 8112cee:	d11c      	bne.n	8112d2a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8112cf0:	693b      	ldr	r3, [r7, #16]
 8112cf2:	685a      	ldr	r2, [r3, #4]
 8112cf4:	693b      	ldr	r3, [r7, #16]
 8112cf6:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8112cf8:	429a      	cmp	r2, r3
 8112cfa:	d316      	bcc.n	8112d2a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8112cfc:	693b      	ldr	r3, [r7, #16]
 8112cfe:	685a      	ldr	r2, [r3, #4]
 8112d00:	68fb      	ldr	r3, [r7, #12]
 8112d02:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8112d06:	429a      	cmp	r2, r3
 8112d08:	d20f      	bcs.n	8112d2a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8112d0a:	2200      	movs	r2, #0
 8112d0c:	2100      	movs	r1, #0
 8112d0e:	68f8      	ldr	r0, [r7, #12]
 8112d10:	f000 ff04 	bl	8113b1c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8112d14:	68fb      	ldr	r3, [r7, #12]
 8112d16:	2200      	movs	r2, #0
 8112d18:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8112d1c:	2300      	movs	r3, #0
 8112d1e:	2200      	movs	r2, #0
 8112d20:	2100      	movs	r1, #0
 8112d22:	68f8      	ldr	r0, [r7, #12]
 8112d24:	f004 f926 	bl	8116f74 <USBD_LL_PrepareReceive>
 8112d28:	e018      	b.n	8112d5c <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8112d2a:	68fb      	ldr	r3, [r7, #12]
 8112d2c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8112d30:	b2db      	uxtb	r3, r3
 8112d32:	2b03      	cmp	r3, #3
 8112d34:	d10b      	bne.n	8112d4e <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8112d36:	68fb      	ldr	r3, [r7, #12]
 8112d38:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8112d3c:	68db      	ldr	r3, [r3, #12]
 8112d3e:	2b00      	cmp	r3, #0
 8112d40:	d005      	beq.n	8112d4e <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8112d42:	68fb      	ldr	r3, [r7, #12]
 8112d44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8112d48:	68db      	ldr	r3, [r3, #12]
 8112d4a:	68f8      	ldr	r0, [r7, #12]
 8112d4c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8112d4e:	2180      	movs	r1, #128	; 0x80
 8112d50:	68f8      	ldr	r0, [r7, #12]
 8112d52:	f004 f865 	bl	8116e20 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8112d56:	68f8      	ldr	r0, [r7, #12]
 8112d58:	f000 ff15 	bl	8113b86 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8112d5c:	68fb      	ldr	r3, [r7, #12]
 8112d5e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8112d62:	2b01      	cmp	r3, #1
 8112d64:	d122      	bne.n	8112dac <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8112d66:	68f8      	ldr	r0, [r7, #12]
 8112d68:	f7ff fe98 	bl	8112a9c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8112d6c:	68fb      	ldr	r3, [r7, #12]
 8112d6e:	2200      	movs	r2, #0
 8112d70:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8112d74:	e01a      	b.n	8112dac <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8112d76:	68fb      	ldr	r3, [r7, #12]
 8112d78:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8112d7c:	b2db      	uxtb	r3, r3
 8112d7e:	2b03      	cmp	r3, #3
 8112d80:	d114      	bne.n	8112dac <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8112d82:	68fb      	ldr	r3, [r7, #12]
 8112d84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8112d88:	695b      	ldr	r3, [r3, #20]
 8112d8a:	2b00      	cmp	r3, #0
 8112d8c:	d00e      	beq.n	8112dac <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8112d8e:	68fb      	ldr	r3, [r7, #12]
 8112d90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8112d94:	695b      	ldr	r3, [r3, #20]
 8112d96:	7afa      	ldrb	r2, [r7, #11]
 8112d98:	4611      	mov	r1, r2
 8112d9a:	68f8      	ldr	r0, [r7, #12]
 8112d9c:	4798      	blx	r3
 8112d9e:	4603      	mov	r3, r0
 8112da0:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8112da2:	7dfb      	ldrb	r3, [r7, #23]
 8112da4:	2b00      	cmp	r3, #0
 8112da6:	d001      	beq.n	8112dac <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8112da8:	7dfb      	ldrb	r3, [r7, #23]
 8112daa:	e000      	b.n	8112dae <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8112dac:	2300      	movs	r3, #0
}
 8112dae:	4618      	mov	r0, r3
 8112db0:	3718      	adds	r7, #24
 8112db2:	46bd      	mov	sp, r7
 8112db4:	bd80      	pop	{r7, pc}

08112db6 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8112db6:	b580      	push	{r7, lr}
 8112db8:	b082      	sub	sp, #8
 8112dba:	af00      	add	r7, sp, #0
 8112dbc:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8112dbe:	687b      	ldr	r3, [r7, #4]
 8112dc0:	2201      	movs	r2, #1
 8112dc2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8112dc6:	687b      	ldr	r3, [r7, #4]
 8112dc8:	2200      	movs	r2, #0
 8112dca:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8112dce:	687b      	ldr	r3, [r7, #4]
 8112dd0:	2200      	movs	r2, #0
 8112dd2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8112dd4:	687b      	ldr	r3, [r7, #4]
 8112dd6:	2200      	movs	r2, #0
 8112dd8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8112ddc:	687b      	ldr	r3, [r7, #4]
 8112dde:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8112de2:	2b00      	cmp	r3, #0
 8112de4:	d101      	bne.n	8112dea <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8112de6:	2303      	movs	r3, #3
 8112de8:	e02f      	b.n	8112e4a <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8112dea:	687b      	ldr	r3, [r7, #4]
 8112dec:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8112df0:	2b00      	cmp	r3, #0
 8112df2:	d00f      	beq.n	8112e14 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8112df4:	687b      	ldr	r3, [r7, #4]
 8112df6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8112dfa:	685b      	ldr	r3, [r3, #4]
 8112dfc:	2b00      	cmp	r3, #0
 8112dfe:	d009      	beq.n	8112e14 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8112e00:	687b      	ldr	r3, [r7, #4]
 8112e02:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8112e06:	685b      	ldr	r3, [r3, #4]
 8112e08:	687a      	ldr	r2, [r7, #4]
 8112e0a:	6852      	ldr	r2, [r2, #4]
 8112e0c:	b2d2      	uxtb	r2, r2
 8112e0e:	4611      	mov	r1, r2
 8112e10:	6878      	ldr	r0, [r7, #4]
 8112e12:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8112e14:	2340      	movs	r3, #64	; 0x40
 8112e16:	2200      	movs	r2, #0
 8112e18:	2100      	movs	r1, #0
 8112e1a:	6878      	ldr	r0, [r7, #4]
 8112e1c:	f003 ffda 	bl	8116dd4 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8112e20:	687b      	ldr	r3, [r7, #4]
 8112e22:	2201      	movs	r2, #1
 8112e24:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8112e28:	687b      	ldr	r3, [r7, #4]
 8112e2a:	2240      	movs	r2, #64	; 0x40
 8112e2c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8112e30:	2340      	movs	r3, #64	; 0x40
 8112e32:	2200      	movs	r2, #0
 8112e34:	2180      	movs	r1, #128	; 0x80
 8112e36:	6878      	ldr	r0, [r7, #4]
 8112e38:	f003 ffcc 	bl	8116dd4 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8112e3c:	687b      	ldr	r3, [r7, #4]
 8112e3e:	2201      	movs	r2, #1
 8112e40:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8112e42:	687b      	ldr	r3, [r7, #4]
 8112e44:	2240      	movs	r2, #64	; 0x40
 8112e46:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8112e48:	2300      	movs	r3, #0
}
 8112e4a:	4618      	mov	r0, r3
 8112e4c:	3708      	adds	r7, #8
 8112e4e:	46bd      	mov	sp, r7
 8112e50:	bd80      	pop	{r7, pc}

08112e52 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8112e52:	b480      	push	{r7}
 8112e54:	b083      	sub	sp, #12
 8112e56:	af00      	add	r7, sp, #0
 8112e58:	6078      	str	r0, [r7, #4]
 8112e5a:	460b      	mov	r3, r1
 8112e5c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8112e5e:	687b      	ldr	r3, [r7, #4]
 8112e60:	78fa      	ldrb	r2, [r7, #3]
 8112e62:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8112e64:	2300      	movs	r3, #0
}
 8112e66:	4618      	mov	r0, r3
 8112e68:	370c      	adds	r7, #12
 8112e6a:	46bd      	mov	sp, r7
 8112e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8112e70:	4770      	bx	lr

08112e72 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8112e72:	b480      	push	{r7}
 8112e74:	b083      	sub	sp, #12
 8112e76:	af00      	add	r7, sp, #0
 8112e78:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8112e7a:	687b      	ldr	r3, [r7, #4]
 8112e7c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8112e80:	b2da      	uxtb	r2, r3
 8112e82:	687b      	ldr	r3, [r7, #4]
 8112e84:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8112e88:	687b      	ldr	r3, [r7, #4]
 8112e8a:	2204      	movs	r2, #4
 8112e8c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8112e90:	2300      	movs	r3, #0
}
 8112e92:	4618      	mov	r0, r3
 8112e94:	370c      	adds	r7, #12
 8112e96:	46bd      	mov	sp, r7
 8112e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8112e9c:	4770      	bx	lr

08112e9e <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8112e9e:	b480      	push	{r7}
 8112ea0:	b083      	sub	sp, #12
 8112ea2:	af00      	add	r7, sp, #0
 8112ea4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8112ea6:	687b      	ldr	r3, [r7, #4]
 8112ea8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8112eac:	b2db      	uxtb	r3, r3
 8112eae:	2b04      	cmp	r3, #4
 8112eb0:	d106      	bne.n	8112ec0 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8112eb2:	687b      	ldr	r3, [r7, #4]
 8112eb4:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8112eb8:	b2da      	uxtb	r2, r3
 8112eba:	687b      	ldr	r3, [r7, #4]
 8112ebc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8112ec0:	2300      	movs	r3, #0
}
 8112ec2:	4618      	mov	r0, r3
 8112ec4:	370c      	adds	r7, #12
 8112ec6:	46bd      	mov	sp, r7
 8112ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8112ecc:	4770      	bx	lr

08112ece <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8112ece:	b580      	push	{r7, lr}
 8112ed0:	b082      	sub	sp, #8
 8112ed2:	af00      	add	r7, sp, #0
 8112ed4:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8112ed6:	687b      	ldr	r3, [r7, #4]
 8112ed8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8112edc:	2b00      	cmp	r3, #0
 8112ede:	d101      	bne.n	8112ee4 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8112ee0:	2303      	movs	r3, #3
 8112ee2:	e012      	b.n	8112f0a <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8112ee4:	687b      	ldr	r3, [r7, #4]
 8112ee6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8112eea:	b2db      	uxtb	r3, r3
 8112eec:	2b03      	cmp	r3, #3
 8112eee:	d10b      	bne.n	8112f08 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8112ef0:	687b      	ldr	r3, [r7, #4]
 8112ef2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8112ef6:	69db      	ldr	r3, [r3, #28]
 8112ef8:	2b00      	cmp	r3, #0
 8112efa:	d005      	beq.n	8112f08 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8112efc:	687b      	ldr	r3, [r7, #4]
 8112efe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8112f02:	69db      	ldr	r3, [r3, #28]
 8112f04:	6878      	ldr	r0, [r7, #4]
 8112f06:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8112f08:	2300      	movs	r3, #0
}
 8112f0a:	4618      	mov	r0, r3
 8112f0c:	3708      	adds	r7, #8
 8112f0e:	46bd      	mov	sp, r7
 8112f10:	bd80      	pop	{r7, pc}

08112f12 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8112f12:	b580      	push	{r7, lr}
 8112f14:	b082      	sub	sp, #8
 8112f16:	af00      	add	r7, sp, #0
 8112f18:	6078      	str	r0, [r7, #4]
 8112f1a:	460b      	mov	r3, r1
 8112f1c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8112f1e:	687b      	ldr	r3, [r7, #4]
 8112f20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8112f24:	2b00      	cmp	r3, #0
 8112f26:	d101      	bne.n	8112f2c <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 8112f28:	2303      	movs	r3, #3
 8112f2a:	e014      	b.n	8112f56 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8112f2c:	687b      	ldr	r3, [r7, #4]
 8112f2e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8112f32:	b2db      	uxtb	r3, r3
 8112f34:	2b03      	cmp	r3, #3
 8112f36:	d10d      	bne.n	8112f54 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 8112f38:	687b      	ldr	r3, [r7, #4]
 8112f3a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8112f3e:	6a1b      	ldr	r3, [r3, #32]
 8112f40:	2b00      	cmp	r3, #0
 8112f42:	d007      	beq.n	8112f54 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 8112f44:	687b      	ldr	r3, [r7, #4]
 8112f46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8112f4a:	6a1b      	ldr	r3, [r3, #32]
 8112f4c:	78fa      	ldrb	r2, [r7, #3]
 8112f4e:	4611      	mov	r1, r2
 8112f50:	6878      	ldr	r0, [r7, #4]
 8112f52:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8112f54:	2300      	movs	r3, #0
}
 8112f56:	4618      	mov	r0, r3
 8112f58:	3708      	adds	r7, #8
 8112f5a:	46bd      	mov	sp, r7
 8112f5c:	bd80      	pop	{r7, pc}

08112f5e <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8112f5e:	b580      	push	{r7, lr}
 8112f60:	b082      	sub	sp, #8
 8112f62:	af00      	add	r7, sp, #0
 8112f64:	6078      	str	r0, [r7, #4]
 8112f66:	460b      	mov	r3, r1
 8112f68:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8112f6a:	687b      	ldr	r3, [r7, #4]
 8112f6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8112f70:	2b00      	cmp	r3, #0
 8112f72:	d101      	bne.n	8112f78 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 8112f74:	2303      	movs	r3, #3
 8112f76:	e014      	b.n	8112fa2 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8112f78:	687b      	ldr	r3, [r7, #4]
 8112f7a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8112f7e:	b2db      	uxtb	r3, r3
 8112f80:	2b03      	cmp	r3, #3
 8112f82:	d10d      	bne.n	8112fa0 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 8112f84:	687b      	ldr	r3, [r7, #4]
 8112f86:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8112f8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8112f8c:	2b00      	cmp	r3, #0
 8112f8e:	d007      	beq.n	8112fa0 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 8112f90:	687b      	ldr	r3, [r7, #4]
 8112f92:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8112f96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8112f98:	78fa      	ldrb	r2, [r7, #3]
 8112f9a:	4611      	mov	r1, r2
 8112f9c:	6878      	ldr	r0, [r7, #4]
 8112f9e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8112fa0:	2300      	movs	r3, #0
}
 8112fa2:	4618      	mov	r0, r3
 8112fa4:	3708      	adds	r7, #8
 8112fa6:	46bd      	mov	sp, r7
 8112fa8:	bd80      	pop	{r7, pc}

08112faa <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8112faa:	b480      	push	{r7}
 8112fac:	b083      	sub	sp, #12
 8112fae:	af00      	add	r7, sp, #0
 8112fb0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8112fb2:	2300      	movs	r3, #0
}
 8112fb4:	4618      	mov	r0, r3
 8112fb6:	370c      	adds	r7, #12
 8112fb8:	46bd      	mov	sp, r7
 8112fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8112fbe:	4770      	bx	lr

08112fc0 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8112fc0:	b580      	push	{r7, lr}
 8112fc2:	b082      	sub	sp, #8
 8112fc4:	af00      	add	r7, sp, #0
 8112fc6:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8112fc8:	687b      	ldr	r3, [r7, #4]
 8112fca:	2201      	movs	r2, #1
 8112fcc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8112fd0:	687b      	ldr	r3, [r7, #4]
 8112fd2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8112fd6:	2b00      	cmp	r3, #0
 8112fd8:	d009      	beq.n	8112fee <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8112fda:	687b      	ldr	r3, [r7, #4]
 8112fdc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8112fe0:	685b      	ldr	r3, [r3, #4]
 8112fe2:	687a      	ldr	r2, [r7, #4]
 8112fe4:	6852      	ldr	r2, [r2, #4]
 8112fe6:	b2d2      	uxtb	r2, r2
 8112fe8:	4611      	mov	r1, r2
 8112fea:	6878      	ldr	r0, [r7, #4]
 8112fec:	4798      	blx	r3
  }

  return USBD_OK;
 8112fee:	2300      	movs	r3, #0
}
 8112ff0:	4618      	mov	r0, r3
 8112ff2:	3708      	adds	r7, #8
 8112ff4:	46bd      	mov	sp, r7
 8112ff6:	bd80      	pop	{r7, pc}

08112ff8 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8112ff8:	b480      	push	{r7}
 8112ffa:	b087      	sub	sp, #28
 8112ffc:	af00      	add	r7, sp, #0
 8112ffe:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8113000:	687b      	ldr	r3, [r7, #4]
 8113002:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8113004:	697b      	ldr	r3, [r7, #20]
 8113006:	781b      	ldrb	r3, [r3, #0]
 8113008:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 811300a:	697b      	ldr	r3, [r7, #20]
 811300c:	3301      	adds	r3, #1
 811300e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8113010:	697b      	ldr	r3, [r7, #20]
 8113012:	781b      	ldrb	r3, [r3, #0]
 8113014:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8113016:	8a3b      	ldrh	r3, [r7, #16]
 8113018:	021b      	lsls	r3, r3, #8
 811301a:	b21a      	sxth	r2, r3
 811301c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8113020:	4313      	orrs	r3, r2
 8113022:	b21b      	sxth	r3, r3
 8113024:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8113026:	89fb      	ldrh	r3, [r7, #14]
}
 8113028:	4618      	mov	r0, r3
 811302a:	371c      	adds	r7, #28
 811302c:	46bd      	mov	sp, r7
 811302e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8113032:	4770      	bx	lr

08113034 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8113034:	b580      	push	{r7, lr}
 8113036:	b084      	sub	sp, #16
 8113038:	af00      	add	r7, sp, #0
 811303a:	6078      	str	r0, [r7, #4]
 811303c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 811303e:	2300      	movs	r3, #0
 8113040:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8113042:	683b      	ldr	r3, [r7, #0]
 8113044:	781b      	ldrb	r3, [r3, #0]
 8113046:	f003 0360 	and.w	r3, r3, #96	; 0x60
 811304a:	2b40      	cmp	r3, #64	; 0x40
 811304c:	d005      	beq.n	811305a <USBD_StdDevReq+0x26>
 811304e:	2b40      	cmp	r3, #64	; 0x40
 8113050:	d853      	bhi.n	81130fa <USBD_StdDevReq+0xc6>
 8113052:	2b00      	cmp	r3, #0
 8113054:	d00b      	beq.n	811306e <USBD_StdDevReq+0x3a>
 8113056:	2b20      	cmp	r3, #32
 8113058:	d14f      	bne.n	81130fa <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 811305a:	687b      	ldr	r3, [r7, #4]
 811305c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8113060:	689b      	ldr	r3, [r3, #8]
 8113062:	6839      	ldr	r1, [r7, #0]
 8113064:	6878      	ldr	r0, [r7, #4]
 8113066:	4798      	blx	r3
 8113068:	4603      	mov	r3, r0
 811306a:	73fb      	strb	r3, [r7, #15]
      break;
 811306c:	e04a      	b.n	8113104 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 811306e:	683b      	ldr	r3, [r7, #0]
 8113070:	785b      	ldrb	r3, [r3, #1]
 8113072:	2b09      	cmp	r3, #9
 8113074:	d83b      	bhi.n	81130ee <USBD_StdDevReq+0xba>
 8113076:	a201      	add	r2, pc, #4	; (adr r2, 811307c <USBD_StdDevReq+0x48>)
 8113078:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 811307c:	081130d1 	.word	0x081130d1
 8113080:	081130e5 	.word	0x081130e5
 8113084:	081130ef 	.word	0x081130ef
 8113088:	081130db 	.word	0x081130db
 811308c:	081130ef 	.word	0x081130ef
 8113090:	081130af 	.word	0x081130af
 8113094:	081130a5 	.word	0x081130a5
 8113098:	081130ef 	.word	0x081130ef
 811309c:	081130c7 	.word	0x081130c7
 81130a0:	081130b9 	.word	0x081130b9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 81130a4:	6839      	ldr	r1, [r7, #0]
 81130a6:	6878      	ldr	r0, [r7, #4]
 81130a8:	f000 f9de 	bl	8113468 <USBD_GetDescriptor>
          break;
 81130ac:	e024      	b.n	81130f8 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 81130ae:	6839      	ldr	r1, [r7, #0]
 81130b0:	6878      	ldr	r0, [r7, #4]
 81130b2:	f000 fb43 	bl	811373c <USBD_SetAddress>
          break;
 81130b6:	e01f      	b.n	81130f8 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 81130b8:	6839      	ldr	r1, [r7, #0]
 81130ba:	6878      	ldr	r0, [r7, #4]
 81130bc:	f000 fb82 	bl	81137c4 <USBD_SetConfig>
 81130c0:	4603      	mov	r3, r0
 81130c2:	73fb      	strb	r3, [r7, #15]
          break;
 81130c4:	e018      	b.n	81130f8 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 81130c6:	6839      	ldr	r1, [r7, #0]
 81130c8:	6878      	ldr	r0, [r7, #4]
 81130ca:	f000 fc21 	bl	8113910 <USBD_GetConfig>
          break;
 81130ce:	e013      	b.n	81130f8 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 81130d0:	6839      	ldr	r1, [r7, #0]
 81130d2:	6878      	ldr	r0, [r7, #4]
 81130d4:	f000 fc52 	bl	811397c <USBD_GetStatus>
          break;
 81130d8:	e00e      	b.n	81130f8 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 81130da:	6839      	ldr	r1, [r7, #0]
 81130dc:	6878      	ldr	r0, [r7, #4]
 81130de:	f000 fc81 	bl	81139e4 <USBD_SetFeature>
          break;
 81130e2:	e009      	b.n	81130f8 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 81130e4:	6839      	ldr	r1, [r7, #0]
 81130e6:	6878      	ldr	r0, [r7, #4]
 81130e8:	f000 fc90 	bl	8113a0c <USBD_ClrFeature>
          break;
 81130ec:	e004      	b.n	81130f8 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 81130ee:	6839      	ldr	r1, [r7, #0]
 81130f0:	6878      	ldr	r0, [r7, #4]
 81130f2:	f000 fce7 	bl	8113ac4 <USBD_CtlError>
          break;
 81130f6:	bf00      	nop
      }
      break;
 81130f8:	e004      	b.n	8113104 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 81130fa:	6839      	ldr	r1, [r7, #0]
 81130fc:	6878      	ldr	r0, [r7, #4]
 81130fe:	f000 fce1 	bl	8113ac4 <USBD_CtlError>
      break;
 8113102:	bf00      	nop
  }

  return ret;
 8113104:	7bfb      	ldrb	r3, [r7, #15]
}
 8113106:	4618      	mov	r0, r3
 8113108:	3710      	adds	r7, #16
 811310a:	46bd      	mov	sp, r7
 811310c:	bd80      	pop	{r7, pc}
 811310e:	bf00      	nop

08113110 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8113110:	b580      	push	{r7, lr}
 8113112:	b084      	sub	sp, #16
 8113114:	af00      	add	r7, sp, #0
 8113116:	6078      	str	r0, [r7, #4]
 8113118:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 811311a:	2300      	movs	r3, #0
 811311c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 811311e:	683b      	ldr	r3, [r7, #0]
 8113120:	781b      	ldrb	r3, [r3, #0]
 8113122:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8113126:	2b40      	cmp	r3, #64	; 0x40
 8113128:	d005      	beq.n	8113136 <USBD_StdItfReq+0x26>
 811312a:	2b40      	cmp	r3, #64	; 0x40
 811312c:	d82f      	bhi.n	811318e <USBD_StdItfReq+0x7e>
 811312e:	2b00      	cmp	r3, #0
 8113130:	d001      	beq.n	8113136 <USBD_StdItfReq+0x26>
 8113132:	2b20      	cmp	r3, #32
 8113134:	d12b      	bne.n	811318e <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8113136:	687b      	ldr	r3, [r7, #4]
 8113138:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 811313c:	b2db      	uxtb	r3, r3
 811313e:	3b01      	subs	r3, #1
 8113140:	2b02      	cmp	r3, #2
 8113142:	d81d      	bhi.n	8113180 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8113144:	683b      	ldr	r3, [r7, #0]
 8113146:	889b      	ldrh	r3, [r3, #4]
 8113148:	b2db      	uxtb	r3, r3
 811314a:	2b01      	cmp	r3, #1
 811314c:	d813      	bhi.n	8113176 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 811314e:	687b      	ldr	r3, [r7, #4]
 8113150:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8113154:	689b      	ldr	r3, [r3, #8]
 8113156:	6839      	ldr	r1, [r7, #0]
 8113158:	6878      	ldr	r0, [r7, #4]
 811315a:	4798      	blx	r3
 811315c:	4603      	mov	r3, r0
 811315e:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8113160:	683b      	ldr	r3, [r7, #0]
 8113162:	88db      	ldrh	r3, [r3, #6]
 8113164:	2b00      	cmp	r3, #0
 8113166:	d110      	bne.n	811318a <USBD_StdItfReq+0x7a>
 8113168:	7bfb      	ldrb	r3, [r7, #15]
 811316a:	2b00      	cmp	r3, #0
 811316c:	d10d      	bne.n	811318a <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 811316e:	6878      	ldr	r0, [r7, #4]
 8113170:	f000 fcf6 	bl	8113b60 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8113174:	e009      	b.n	811318a <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8113176:	6839      	ldr	r1, [r7, #0]
 8113178:	6878      	ldr	r0, [r7, #4]
 811317a:	f000 fca3 	bl	8113ac4 <USBD_CtlError>
          break;
 811317e:	e004      	b.n	811318a <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8113180:	6839      	ldr	r1, [r7, #0]
 8113182:	6878      	ldr	r0, [r7, #4]
 8113184:	f000 fc9e 	bl	8113ac4 <USBD_CtlError>
          break;
 8113188:	e000      	b.n	811318c <USBD_StdItfReq+0x7c>
          break;
 811318a:	bf00      	nop
      }
      break;
 811318c:	e004      	b.n	8113198 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 811318e:	6839      	ldr	r1, [r7, #0]
 8113190:	6878      	ldr	r0, [r7, #4]
 8113192:	f000 fc97 	bl	8113ac4 <USBD_CtlError>
      break;
 8113196:	bf00      	nop
  }

  return ret;
 8113198:	7bfb      	ldrb	r3, [r7, #15]
}
 811319a:	4618      	mov	r0, r3
 811319c:	3710      	adds	r7, #16
 811319e:	46bd      	mov	sp, r7
 81131a0:	bd80      	pop	{r7, pc}

081131a2 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 81131a2:	b580      	push	{r7, lr}
 81131a4:	b084      	sub	sp, #16
 81131a6:	af00      	add	r7, sp, #0
 81131a8:	6078      	str	r0, [r7, #4]
 81131aa:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 81131ac:	2300      	movs	r3, #0
 81131ae:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 81131b0:	683b      	ldr	r3, [r7, #0]
 81131b2:	889b      	ldrh	r3, [r3, #4]
 81131b4:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 81131b6:	683b      	ldr	r3, [r7, #0]
 81131b8:	781b      	ldrb	r3, [r3, #0]
 81131ba:	f003 0360 	and.w	r3, r3, #96	; 0x60
 81131be:	2b40      	cmp	r3, #64	; 0x40
 81131c0:	d007      	beq.n	81131d2 <USBD_StdEPReq+0x30>
 81131c2:	2b40      	cmp	r3, #64	; 0x40
 81131c4:	f200 8145 	bhi.w	8113452 <USBD_StdEPReq+0x2b0>
 81131c8:	2b00      	cmp	r3, #0
 81131ca:	d00c      	beq.n	81131e6 <USBD_StdEPReq+0x44>
 81131cc:	2b20      	cmp	r3, #32
 81131ce:	f040 8140 	bne.w	8113452 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 81131d2:	687b      	ldr	r3, [r7, #4]
 81131d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 81131d8:	689b      	ldr	r3, [r3, #8]
 81131da:	6839      	ldr	r1, [r7, #0]
 81131dc:	6878      	ldr	r0, [r7, #4]
 81131de:	4798      	blx	r3
 81131e0:	4603      	mov	r3, r0
 81131e2:	73fb      	strb	r3, [r7, #15]
      break;
 81131e4:	e13a      	b.n	811345c <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 81131e6:	683b      	ldr	r3, [r7, #0]
 81131e8:	785b      	ldrb	r3, [r3, #1]
 81131ea:	2b03      	cmp	r3, #3
 81131ec:	d007      	beq.n	81131fe <USBD_StdEPReq+0x5c>
 81131ee:	2b03      	cmp	r3, #3
 81131f0:	f300 8129 	bgt.w	8113446 <USBD_StdEPReq+0x2a4>
 81131f4:	2b00      	cmp	r3, #0
 81131f6:	d07f      	beq.n	81132f8 <USBD_StdEPReq+0x156>
 81131f8:	2b01      	cmp	r3, #1
 81131fa:	d03c      	beq.n	8113276 <USBD_StdEPReq+0xd4>
 81131fc:	e123      	b.n	8113446 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 81131fe:	687b      	ldr	r3, [r7, #4]
 8113200:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8113204:	b2db      	uxtb	r3, r3
 8113206:	2b02      	cmp	r3, #2
 8113208:	d002      	beq.n	8113210 <USBD_StdEPReq+0x6e>
 811320a:	2b03      	cmp	r3, #3
 811320c:	d016      	beq.n	811323c <USBD_StdEPReq+0x9a>
 811320e:	e02c      	b.n	811326a <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8113210:	7bbb      	ldrb	r3, [r7, #14]
 8113212:	2b00      	cmp	r3, #0
 8113214:	d00d      	beq.n	8113232 <USBD_StdEPReq+0x90>
 8113216:	7bbb      	ldrb	r3, [r7, #14]
 8113218:	2b80      	cmp	r3, #128	; 0x80
 811321a:	d00a      	beq.n	8113232 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 811321c:	7bbb      	ldrb	r3, [r7, #14]
 811321e:	4619      	mov	r1, r3
 8113220:	6878      	ldr	r0, [r7, #4]
 8113222:	f003 fdfd 	bl	8116e20 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8113226:	2180      	movs	r1, #128	; 0x80
 8113228:	6878      	ldr	r0, [r7, #4]
 811322a:	f003 fdf9 	bl	8116e20 <USBD_LL_StallEP>
 811322e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8113230:	e020      	b.n	8113274 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8113232:	6839      	ldr	r1, [r7, #0]
 8113234:	6878      	ldr	r0, [r7, #4]
 8113236:	f000 fc45 	bl	8113ac4 <USBD_CtlError>
              break;
 811323a:	e01b      	b.n	8113274 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 811323c:	683b      	ldr	r3, [r7, #0]
 811323e:	885b      	ldrh	r3, [r3, #2]
 8113240:	2b00      	cmp	r3, #0
 8113242:	d10e      	bne.n	8113262 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8113244:	7bbb      	ldrb	r3, [r7, #14]
 8113246:	2b00      	cmp	r3, #0
 8113248:	d00b      	beq.n	8113262 <USBD_StdEPReq+0xc0>
 811324a:	7bbb      	ldrb	r3, [r7, #14]
 811324c:	2b80      	cmp	r3, #128	; 0x80
 811324e:	d008      	beq.n	8113262 <USBD_StdEPReq+0xc0>
 8113250:	683b      	ldr	r3, [r7, #0]
 8113252:	88db      	ldrh	r3, [r3, #6]
 8113254:	2b00      	cmp	r3, #0
 8113256:	d104      	bne.n	8113262 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8113258:	7bbb      	ldrb	r3, [r7, #14]
 811325a:	4619      	mov	r1, r3
 811325c:	6878      	ldr	r0, [r7, #4]
 811325e:	f003 fddf 	bl	8116e20 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8113262:	6878      	ldr	r0, [r7, #4]
 8113264:	f000 fc7c 	bl	8113b60 <USBD_CtlSendStatus>

              break;
 8113268:	e004      	b.n	8113274 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 811326a:	6839      	ldr	r1, [r7, #0]
 811326c:	6878      	ldr	r0, [r7, #4]
 811326e:	f000 fc29 	bl	8113ac4 <USBD_CtlError>
              break;
 8113272:	bf00      	nop
          }
          break;
 8113274:	e0ec      	b.n	8113450 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8113276:	687b      	ldr	r3, [r7, #4]
 8113278:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 811327c:	b2db      	uxtb	r3, r3
 811327e:	2b02      	cmp	r3, #2
 8113280:	d002      	beq.n	8113288 <USBD_StdEPReq+0xe6>
 8113282:	2b03      	cmp	r3, #3
 8113284:	d016      	beq.n	81132b4 <USBD_StdEPReq+0x112>
 8113286:	e030      	b.n	81132ea <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8113288:	7bbb      	ldrb	r3, [r7, #14]
 811328a:	2b00      	cmp	r3, #0
 811328c:	d00d      	beq.n	81132aa <USBD_StdEPReq+0x108>
 811328e:	7bbb      	ldrb	r3, [r7, #14]
 8113290:	2b80      	cmp	r3, #128	; 0x80
 8113292:	d00a      	beq.n	81132aa <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8113294:	7bbb      	ldrb	r3, [r7, #14]
 8113296:	4619      	mov	r1, r3
 8113298:	6878      	ldr	r0, [r7, #4]
 811329a:	f003 fdc1 	bl	8116e20 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 811329e:	2180      	movs	r1, #128	; 0x80
 81132a0:	6878      	ldr	r0, [r7, #4]
 81132a2:	f003 fdbd 	bl	8116e20 <USBD_LL_StallEP>
 81132a6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 81132a8:	e025      	b.n	81132f6 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 81132aa:	6839      	ldr	r1, [r7, #0]
 81132ac:	6878      	ldr	r0, [r7, #4]
 81132ae:	f000 fc09 	bl	8113ac4 <USBD_CtlError>
              break;
 81132b2:	e020      	b.n	81132f6 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 81132b4:	683b      	ldr	r3, [r7, #0]
 81132b6:	885b      	ldrh	r3, [r3, #2]
 81132b8:	2b00      	cmp	r3, #0
 81132ba:	d11b      	bne.n	81132f4 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 81132bc:	7bbb      	ldrb	r3, [r7, #14]
 81132be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 81132c2:	2b00      	cmp	r3, #0
 81132c4:	d004      	beq.n	81132d0 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 81132c6:	7bbb      	ldrb	r3, [r7, #14]
 81132c8:	4619      	mov	r1, r3
 81132ca:	6878      	ldr	r0, [r7, #4]
 81132cc:	f003 fdc7 	bl	8116e5e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 81132d0:	6878      	ldr	r0, [r7, #4]
 81132d2:	f000 fc45 	bl	8113b60 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 81132d6:	687b      	ldr	r3, [r7, #4]
 81132d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 81132dc:	689b      	ldr	r3, [r3, #8]
 81132de:	6839      	ldr	r1, [r7, #0]
 81132e0:	6878      	ldr	r0, [r7, #4]
 81132e2:	4798      	blx	r3
 81132e4:	4603      	mov	r3, r0
 81132e6:	73fb      	strb	r3, [r7, #15]
              }
              break;
 81132e8:	e004      	b.n	81132f4 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 81132ea:	6839      	ldr	r1, [r7, #0]
 81132ec:	6878      	ldr	r0, [r7, #4]
 81132ee:	f000 fbe9 	bl	8113ac4 <USBD_CtlError>
              break;
 81132f2:	e000      	b.n	81132f6 <USBD_StdEPReq+0x154>
              break;
 81132f4:	bf00      	nop
          }
          break;
 81132f6:	e0ab      	b.n	8113450 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 81132f8:	687b      	ldr	r3, [r7, #4]
 81132fa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 81132fe:	b2db      	uxtb	r3, r3
 8113300:	2b02      	cmp	r3, #2
 8113302:	d002      	beq.n	811330a <USBD_StdEPReq+0x168>
 8113304:	2b03      	cmp	r3, #3
 8113306:	d032      	beq.n	811336e <USBD_StdEPReq+0x1cc>
 8113308:	e097      	b.n	811343a <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 811330a:	7bbb      	ldrb	r3, [r7, #14]
 811330c:	2b00      	cmp	r3, #0
 811330e:	d007      	beq.n	8113320 <USBD_StdEPReq+0x17e>
 8113310:	7bbb      	ldrb	r3, [r7, #14]
 8113312:	2b80      	cmp	r3, #128	; 0x80
 8113314:	d004      	beq.n	8113320 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8113316:	6839      	ldr	r1, [r7, #0]
 8113318:	6878      	ldr	r0, [r7, #4]
 811331a:	f000 fbd3 	bl	8113ac4 <USBD_CtlError>
                break;
 811331e:	e091      	b.n	8113444 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8113320:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8113324:	2b00      	cmp	r3, #0
 8113326:	da0b      	bge.n	8113340 <USBD_StdEPReq+0x19e>
 8113328:	7bbb      	ldrb	r3, [r7, #14]
 811332a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 811332e:	4613      	mov	r3, r2
 8113330:	009b      	lsls	r3, r3, #2
 8113332:	4413      	add	r3, r2
 8113334:	009b      	lsls	r3, r3, #2
 8113336:	3310      	adds	r3, #16
 8113338:	687a      	ldr	r2, [r7, #4]
 811333a:	4413      	add	r3, r2
 811333c:	3304      	adds	r3, #4
 811333e:	e00b      	b.n	8113358 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8113340:	7bbb      	ldrb	r3, [r7, #14]
 8113342:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8113346:	4613      	mov	r3, r2
 8113348:	009b      	lsls	r3, r3, #2
 811334a:	4413      	add	r3, r2
 811334c:	009b      	lsls	r3, r3, #2
 811334e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8113352:	687a      	ldr	r2, [r7, #4]
 8113354:	4413      	add	r3, r2
 8113356:	3304      	adds	r3, #4
 8113358:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 811335a:	68bb      	ldr	r3, [r7, #8]
 811335c:	2200      	movs	r2, #0
 811335e:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8113360:	68bb      	ldr	r3, [r7, #8]
 8113362:	2202      	movs	r2, #2
 8113364:	4619      	mov	r1, r3
 8113366:	6878      	ldr	r0, [r7, #4]
 8113368:	f000 fbbd 	bl	8113ae6 <USBD_CtlSendData>
              break;
 811336c:	e06a      	b.n	8113444 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 811336e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8113372:	2b00      	cmp	r3, #0
 8113374:	da11      	bge.n	811339a <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8113376:	7bbb      	ldrb	r3, [r7, #14]
 8113378:	f003 020f 	and.w	r2, r3, #15
 811337c:	6879      	ldr	r1, [r7, #4]
 811337e:	4613      	mov	r3, r2
 8113380:	009b      	lsls	r3, r3, #2
 8113382:	4413      	add	r3, r2
 8113384:	009b      	lsls	r3, r3, #2
 8113386:	440b      	add	r3, r1
 8113388:	3324      	adds	r3, #36	; 0x24
 811338a:	881b      	ldrh	r3, [r3, #0]
 811338c:	2b00      	cmp	r3, #0
 811338e:	d117      	bne.n	81133c0 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8113390:	6839      	ldr	r1, [r7, #0]
 8113392:	6878      	ldr	r0, [r7, #4]
 8113394:	f000 fb96 	bl	8113ac4 <USBD_CtlError>
                  break;
 8113398:	e054      	b.n	8113444 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 811339a:	7bbb      	ldrb	r3, [r7, #14]
 811339c:	f003 020f 	and.w	r2, r3, #15
 81133a0:	6879      	ldr	r1, [r7, #4]
 81133a2:	4613      	mov	r3, r2
 81133a4:	009b      	lsls	r3, r3, #2
 81133a6:	4413      	add	r3, r2
 81133a8:	009b      	lsls	r3, r3, #2
 81133aa:	440b      	add	r3, r1
 81133ac:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 81133b0:	881b      	ldrh	r3, [r3, #0]
 81133b2:	2b00      	cmp	r3, #0
 81133b4:	d104      	bne.n	81133c0 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 81133b6:	6839      	ldr	r1, [r7, #0]
 81133b8:	6878      	ldr	r0, [r7, #4]
 81133ba:	f000 fb83 	bl	8113ac4 <USBD_CtlError>
                  break;
 81133be:	e041      	b.n	8113444 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 81133c0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 81133c4:	2b00      	cmp	r3, #0
 81133c6:	da0b      	bge.n	81133e0 <USBD_StdEPReq+0x23e>
 81133c8:	7bbb      	ldrb	r3, [r7, #14]
 81133ca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 81133ce:	4613      	mov	r3, r2
 81133d0:	009b      	lsls	r3, r3, #2
 81133d2:	4413      	add	r3, r2
 81133d4:	009b      	lsls	r3, r3, #2
 81133d6:	3310      	adds	r3, #16
 81133d8:	687a      	ldr	r2, [r7, #4]
 81133da:	4413      	add	r3, r2
 81133dc:	3304      	adds	r3, #4
 81133de:	e00b      	b.n	81133f8 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 81133e0:	7bbb      	ldrb	r3, [r7, #14]
 81133e2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 81133e6:	4613      	mov	r3, r2
 81133e8:	009b      	lsls	r3, r3, #2
 81133ea:	4413      	add	r3, r2
 81133ec:	009b      	lsls	r3, r3, #2
 81133ee:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 81133f2:	687a      	ldr	r2, [r7, #4]
 81133f4:	4413      	add	r3, r2
 81133f6:	3304      	adds	r3, #4
 81133f8:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 81133fa:	7bbb      	ldrb	r3, [r7, #14]
 81133fc:	2b00      	cmp	r3, #0
 81133fe:	d002      	beq.n	8113406 <USBD_StdEPReq+0x264>
 8113400:	7bbb      	ldrb	r3, [r7, #14]
 8113402:	2b80      	cmp	r3, #128	; 0x80
 8113404:	d103      	bne.n	811340e <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8113406:	68bb      	ldr	r3, [r7, #8]
 8113408:	2200      	movs	r2, #0
 811340a:	601a      	str	r2, [r3, #0]
 811340c:	e00e      	b.n	811342c <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 811340e:	7bbb      	ldrb	r3, [r7, #14]
 8113410:	4619      	mov	r1, r3
 8113412:	6878      	ldr	r0, [r7, #4]
 8113414:	f003 fd42 	bl	8116e9c <USBD_LL_IsStallEP>
 8113418:	4603      	mov	r3, r0
 811341a:	2b00      	cmp	r3, #0
 811341c:	d003      	beq.n	8113426 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 811341e:	68bb      	ldr	r3, [r7, #8]
 8113420:	2201      	movs	r2, #1
 8113422:	601a      	str	r2, [r3, #0]
 8113424:	e002      	b.n	811342c <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8113426:	68bb      	ldr	r3, [r7, #8]
 8113428:	2200      	movs	r2, #0
 811342a:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 811342c:	68bb      	ldr	r3, [r7, #8]
 811342e:	2202      	movs	r2, #2
 8113430:	4619      	mov	r1, r3
 8113432:	6878      	ldr	r0, [r7, #4]
 8113434:	f000 fb57 	bl	8113ae6 <USBD_CtlSendData>
              break;
 8113438:	e004      	b.n	8113444 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 811343a:	6839      	ldr	r1, [r7, #0]
 811343c:	6878      	ldr	r0, [r7, #4]
 811343e:	f000 fb41 	bl	8113ac4 <USBD_CtlError>
              break;
 8113442:	bf00      	nop
          }
          break;
 8113444:	e004      	b.n	8113450 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8113446:	6839      	ldr	r1, [r7, #0]
 8113448:	6878      	ldr	r0, [r7, #4]
 811344a:	f000 fb3b 	bl	8113ac4 <USBD_CtlError>
          break;
 811344e:	bf00      	nop
      }
      break;
 8113450:	e004      	b.n	811345c <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8113452:	6839      	ldr	r1, [r7, #0]
 8113454:	6878      	ldr	r0, [r7, #4]
 8113456:	f000 fb35 	bl	8113ac4 <USBD_CtlError>
      break;
 811345a:	bf00      	nop
  }

  return ret;
 811345c:	7bfb      	ldrb	r3, [r7, #15]
}
 811345e:	4618      	mov	r0, r3
 8113460:	3710      	adds	r7, #16
 8113462:	46bd      	mov	sp, r7
 8113464:	bd80      	pop	{r7, pc}
	...

08113468 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8113468:	b580      	push	{r7, lr}
 811346a:	b084      	sub	sp, #16
 811346c:	af00      	add	r7, sp, #0
 811346e:	6078      	str	r0, [r7, #4]
 8113470:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8113472:	2300      	movs	r3, #0
 8113474:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8113476:	2300      	movs	r3, #0
 8113478:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 811347a:	2300      	movs	r3, #0
 811347c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 811347e:	683b      	ldr	r3, [r7, #0]
 8113480:	885b      	ldrh	r3, [r3, #2]
 8113482:	0a1b      	lsrs	r3, r3, #8
 8113484:	b29b      	uxth	r3, r3
 8113486:	3b01      	subs	r3, #1
 8113488:	2b06      	cmp	r3, #6
 811348a:	f200 8128 	bhi.w	81136de <USBD_GetDescriptor+0x276>
 811348e:	a201      	add	r2, pc, #4	; (adr r2, 8113494 <USBD_GetDescriptor+0x2c>)
 8113490:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8113494:	081134b1 	.word	0x081134b1
 8113498:	081134c9 	.word	0x081134c9
 811349c:	08113509 	.word	0x08113509
 81134a0:	081136df 	.word	0x081136df
 81134a4:	081136df 	.word	0x081136df
 81134a8:	0811367f 	.word	0x0811367f
 81134ac:	081136ab 	.word	0x081136ab
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 81134b0:	687b      	ldr	r3, [r7, #4]
 81134b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 81134b6:	681b      	ldr	r3, [r3, #0]
 81134b8:	687a      	ldr	r2, [r7, #4]
 81134ba:	7c12      	ldrb	r2, [r2, #16]
 81134bc:	f107 0108 	add.w	r1, r7, #8
 81134c0:	4610      	mov	r0, r2
 81134c2:	4798      	blx	r3
 81134c4:	60f8      	str	r0, [r7, #12]
      break;
 81134c6:	e112      	b.n	81136ee <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 81134c8:	687b      	ldr	r3, [r7, #4]
 81134ca:	7c1b      	ldrb	r3, [r3, #16]
 81134cc:	2b00      	cmp	r3, #0
 81134ce:	d10d      	bne.n	81134ec <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 81134d0:	687b      	ldr	r3, [r7, #4]
 81134d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 81134d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81134d8:	f107 0208 	add.w	r2, r7, #8
 81134dc:	4610      	mov	r0, r2
 81134de:	4798      	blx	r3
 81134e0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 81134e2:	68fb      	ldr	r3, [r7, #12]
 81134e4:	3301      	adds	r3, #1
 81134e6:	2202      	movs	r2, #2
 81134e8:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 81134ea:	e100      	b.n	81136ee <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 81134ec:	687b      	ldr	r3, [r7, #4]
 81134ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 81134f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81134f4:	f107 0208 	add.w	r2, r7, #8
 81134f8:	4610      	mov	r0, r2
 81134fa:	4798      	blx	r3
 81134fc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 81134fe:	68fb      	ldr	r3, [r7, #12]
 8113500:	3301      	adds	r3, #1
 8113502:	2202      	movs	r2, #2
 8113504:	701a      	strb	r2, [r3, #0]
      break;
 8113506:	e0f2      	b.n	81136ee <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8113508:	683b      	ldr	r3, [r7, #0]
 811350a:	885b      	ldrh	r3, [r3, #2]
 811350c:	b2db      	uxtb	r3, r3
 811350e:	2b05      	cmp	r3, #5
 8113510:	f200 80ac 	bhi.w	811366c <USBD_GetDescriptor+0x204>
 8113514:	a201      	add	r2, pc, #4	; (adr r2, 811351c <USBD_GetDescriptor+0xb4>)
 8113516:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 811351a:	bf00      	nop
 811351c:	08113535 	.word	0x08113535
 8113520:	08113569 	.word	0x08113569
 8113524:	0811359d 	.word	0x0811359d
 8113528:	081135d1 	.word	0x081135d1
 811352c:	08113605 	.word	0x08113605
 8113530:	08113639 	.word	0x08113639
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8113534:	687b      	ldr	r3, [r7, #4]
 8113536:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 811353a:	685b      	ldr	r3, [r3, #4]
 811353c:	2b00      	cmp	r3, #0
 811353e:	d00b      	beq.n	8113558 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8113540:	687b      	ldr	r3, [r7, #4]
 8113542:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8113546:	685b      	ldr	r3, [r3, #4]
 8113548:	687a      	ldr	r2, [r7, #4]
 811354a:	7c12      	ldrb	r2, [r2, #16]
 811354c:	f107 0108 	add.w	r1, r7, #8
 8113550:	4610      	mov	r0, r2
 8113552:	4798      	blx	r3
 8113554:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8113556:	e091      	b.n	811367c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8113558:	6839      	ldr	r1, [r7, #0]
 811355a:	6878      	ldr	r0, [r7, #4]
 811355c:	f000 fab2 	bl	8113ac4 <USBD_CtlError>
            err++;
 8113560:	7afb      	ldrb	r3, [r7, #11]
 8113562:	3301      	adds	r3, #1
 8113564:	72fb      	strb	r3, [r7, #11]
          break;
 8113566:	e089      	b.n	811367c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8113568:	687b      	ldr	r3, [r7, #4]
 811356a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 811356e:	689b      	ldr	r3, [r3, #8]
 8113570:	2b00      	cmp	r3, #0
 8113572:	d00b      	beq.n	811358c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8113574:	687b      	ldr	r3, [r7, #4]
 8113576:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 811357a:	689b      	ldr	r3, [r3, #8]
 811357c:	687a      	ldr	r2, [r7, #4]
 811357e:	7c12      	ldrb	r2, [r2, #16]
 8113580:	f107 0108 	add.w	r1, r7, #8
 8113584:	4610      	mov	r0, r2
 8113586:	4798      	blx	r3
 8113588:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 811358a:	e077      	b.n	811367c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 811358c:	6839      	ldr	r1, [r7, #0]
 811358e:	6878      	ldr	r0, [r7, #4]
 8113590:	f000 fa98 	bl	8113ac4 <USBD_CtlError>
            err++;
 8113594:	7afb      	ldrb	r3, [r7, #11]
 8113596:	3301      	adds	r3, #1
 8113598:	72fb      	strb	r3, [r7, #11]
          break;
 811359a:	e06f      	b.n	811367c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 811359c:	687b      	ldr	r3, [r7, #4]
 811359e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 81135a2:	68db      	ldr	r3, [r3, #12]
 81135a4:	2b00      	cmp	r3, #0
 81135a6:	d00b      	beq.n	81135c0 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 81135a8:	687b      	ldr	r3, [r7, #4]
 81135aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 81135ae:	68db      	ldr	r3, [r3, #12]
 81135b0:	687a      	ldr	r2, [r7, #4]
 81135b2:	7c12      	ldrb	r2, [r2, #16]
 81135b4:	f107 0108 	add.w	r1, r7, #8
 81135b8:	4610      	mov	r0, r2
 81135ba:	4798      	blx	r3
 81135bc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 81135be:	e05d      	b.n	811367c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 81135c0:	6839      	ldr	r1, [r7, #0]
 81135c2:	6878      	ldr	r0, [r7, #4]
 81135c4:	f000 fa7e 	bl	8113ac4 <USBD_CtlError>
            err++;
 81135c8:	7afb      	ldrb	r3, [r7, #11]
 81135ca:	3301      	adds	r3, #1
 81135cc:	72fb      	strb	r3, [r7, #11]
          break;
 81135ce:	e055      	b.n	811367c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 81135d0:	687b      	ldr	r3, [r7, #4]
 81135d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 81135d6:	691b      	ldr	r3, [r3, #16]
 81135d8:	2b00      	cmp	r3, #0
 81135da:	d00b      	beq.n	81135f4 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 81135dc:	687b      	ldr	r3, [r7, #4]
 81135de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 81135e2:	691b      	ldr	r3, [r3, #16]
 81135e4:	687a      	ldr	r2, [r7, #4]
 81135e6:	7c12      	ldrb	r2, [r2, #16]
 81135e8:	f107 0108 	add.w	r1, r7, #8
 81135ec:	4610      	mov	r0, r2
 81135ee:	4798      	blx	r3
 81135f0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 81135f2:	e043      	b.n	811367c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 81135f4:	6839      	ldr	r1, [r7, #0]
 81135f6:	6878      	ldr	r0, [r7, #4]
 81135f8:	f000 fa64 	bl	8113ac4 <USBD_CtlError>
            err++;
 81135fc:	7afb      	ldrb	r3, [r7, #11]
 81135fe:	3301      	adds	r3, #1
 8113600:	72fb      	strb	r3, [r7, #11]
          break;
 8113602:	e03b      	b.n	811367c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8113604:	687b      	ldr	r3, [r7, #4]
 8113606:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 811360a:	695b      	ldr	r3, [r3, #20]
 811360c:	2b00      	cmp	r3, #0
 811360e:	d00b      	beq.n	8113628 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8113610:	687b      	ldr	r3, [r7, #4]
 8113612:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8113616:	695b      	ldr	r3, [r3, #20]
 8113618:	687a      	ldr	r2, [r7, #4]
 811361a:	7c12      	ldrb	r2, [r2, #16]
 811361c:	f107 0108 	add.w	r1, r7, #8
 8113620:	4610      	mov	r0, r2
 8113622:	4798      	blx	r3
 8113624:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8113626:	e029      	b.n	811367c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8113628:	6839      	ldr	r1, [r7, #0]
 811362a:	6878      	ldr	r0, [r7, #4]
 811362c:	f000 fa4a 	bl	8113ac4 <USBD_CtlError>
            err++;
 8113630:	7afb      	ldrb	r3, [r7, #11]
 8113632:	3301      	adds	r3, #1
 8113634:	72fb      	strb	r3, [r7, #11]
          break;
 8113636:	e021      	b.n	811367c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8113638:	687b      	ldr	r3, [r7, #4]
 811363a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 811363e:	699b      	ldr	r3, [r3, #24]
 8113640:	2b00      	cmp	r3, #0
 8113642:	d00b      	beq.n	811365c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8113644:	687b      	ldr	r3, [r7, #4]
 8113646:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 811364a:	699b      	ldr	r3, [r3, #24]
 811364c:	687a      	ldr	r2, [r7, #4]
 811364e:	7c12      	ldrb	r2, [r2, #16]
 8113650:	f107 0108 	add.w	r1, r7, #8
 8113654:	4610      	mov	r0, r2
 8113656:	4798      	blx	r3
 8113658:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 811365a:	e00f      	b.n	811367c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 811365c:	6839      	ldr	r1, [r7, #0]
 811365e:	6878      	ldr	r0, [r7, #4]
 8113660:	f000 fa30 	bl	8113ac4 <USBD_CtlError>
            err++;
 8113664:	7afb      	ldrb	r3, [r7, #11]
 8113666:	3301      	adds	r3, #1
 8113668:	72fb      	strb	r3, [r7, #11]
          break;
 811366a:	e007      	b.n	811367c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 811366c:	6839      	ldr	r1, [r7, #0]
 811366e:	6878      	ldr	r0, [r7, #4]
 8113670:	f000 fa28 	bl	8113ac4 <USBD_CtlError>
          err++;
 8113674:	7afb      	ldrb	r3, [r7, #11]
 8113676:	3301      	adds	r3, #1
 8113678:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 811367a:	bf00      	nop
      }
      break;
 811367c:	e037      	b.n	81136ee <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 811367e:	687b      	ldr	r3, [r7, #4]
 8113680:	7c1b      	ldrb	r3, [r3, #16]
 8113682:	2b00      	cmp	r3, #0
 8113684:	d109      	bne.n	811369a <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8113686:	687b      	ldr	r3, [r7, #4]
 8113688:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 811368c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 811368e:	f107 0208 	add.w	r2, r7, #8
 8113692:	4610      	mov	r0, r2
 8113694:	4798      	blx	r3
 8113696:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8113698:	e029      	b.n	81136ee <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 811369a:	6839      	ldr	r1, [r7, #0]
 811369c:	6878      	ldr	r0, [r7, #4]
 811369e:	f000 fa11 	bl	8113ac4 <USBD_CtlError>
        err++;
 81136a2:	7afb      	ldrb	r3, [r7, #11]
 81136a4:	3301      	adds	r3, #1
 81136a6:	72fb      	strb	r3, [r7, #11]
      break;
 81136a8:	e021      	b.n	81136ee <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 81136aa:	687b      	ldr	r3, [r7, #4]
 81136ac:	7c1b      	ldrb	r3, [r3, #16]
 81136ae:	2b00      	cmp	r3, #0
 81136b0:	d10d      	bne.n	81136ce <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 81136b2:	687b      	ldr	r3, [r7, #4]
 81136b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 81136b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81136ba:	f107 0208 	add.w	r2, r7, #8
 81136be:	4610      	mov	r0, r2
 81136c0:	4798      	blx	r3
 81136c2:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 81136c4:	68fb      	ldr	r3, [r7, #12]
 81136c6:	3301      	adds	r3, #1
 81136c8:	2207      	movs	r2, #7
 81136ca:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 81136cc:	e00f      	b.n	81136ee <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 81136ce:	6839      	ldr	r1, [r7, #0]
 81136d0:	6878      	ldr	r0, [r7, #4]
 81136d2:	f000 f9f7 	bl	8113ac4 <USBD_CtlError>
        err++;
 81136d6:	7afb      	ldrb	r3, [r7, #11]
 81136d8:	3301      	adds	r3, #1
 81136da:	72fb      	strb	r3, [r7, #11]
      break;
 81136dc:	e007      	b.n	81136ee <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 81136de:	6839      	ldr	r1, [r7, #0]
 81136e0:	6878      	ldr	r0, [r7, #4]
 81136e2:	f000 f9ef 	bl	8113ac4 <USBD_CtlError>
      err++;
 81136e6:	7afb      	ldrb	r3, [r7, #11]
 81136e8:	3301      	adds	r3, #1
 81136ea:	72fb      	strb	r3, [r7, #11]
      break;
 81136ec:	bf00      	nop
  }

  if (err != 0U)
 81136ee:	7afb      	ldrb	r3, [r7, #11]
 81136f0:	2b00      	cmp	r3, #0
 81136f2:	d11e      	bne.n	8113732 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 81136f4:	683b      	ldr	r3, [r7, #0]
 81136f6:	88db      	ldrh	r3, [r3, #6]
 81136f8:	2b00      	cmp	r3, #0
 81136fa:	d016      	beq.n	811372a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 81136fc:	893b      	ldrh	r3, [r7, #8]
 81136fe:	2b00      	cmp	r3, #0
 8113700:	d00e      	beq.n	8113720 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8113702:	683b      	ldr	r3, [r7, #0]
 8113704:	88da      	ldrh	r2, [r3, #6]
 8113706:	893b      	ldrh	r3, [r7, #8]
 8113708:	4293      	cmp	r3, r2
 811370a:	bf28      	it	cs
 811370c:	4613      	movcs	r3, r2
 811370e:	b29b      	uxth	r3, r3
 8113710:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8113712:	893b      	ldrh	r3, [r7, #8]
 8113714:	461a      	mov	r2, r3
 8113716:	68f9      	ldr	r1, [r7, #12]
 8113718:	6878      	ldr	r0, [r7, #4]
 811371a:	f000 f9e4 	bl	8113ae6 <USBD_CtlSendData>
 811371e:	e009      	b.n	8113734 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8113720:	6839      	ldr	r1, [r7, #0]
 8113722:	6878      	ldr	r0, [r7, #4]
 8113724:	f000 f9ce 	bl	8113ac4 <USBD_CtlError>
 8113728:	e004      	b.n	8113734 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 811372a:	6878      	ldr	r0, [r7, #4]
 811372c:	f000 fa18 	bl	8113b60 <USBD_CtlSendStatus>
 8113730:	e000      	b.n	8113734 <USBD_GetDescriptor+0x2cc>
    return;
 8113732:	bf00      	nop
  }
}
 8113734:	3710      	adds	r7, #16
 8113736:	46bd      	mov	sp, r7
 8113738:	bd80      	pop	{r7, pc}
 811373a:	bf00      	nop

0811373c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 811373c:	b580      	push	{r7, lr}
 811373e:	b084      	sub	sp, #16
 8113740:	af00      	add	r7, sp, #0
 8113742:	6078      	str	r0, [r7, #4]
 8113744:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8113746:	683b      	ldr	r3, [r7, #0]
 8113748:	889b      	ldrh	r3, [r3, #4]
 811374a:	2b00      	cmp	r3, #0
 811374c:	d131      	bne.n	81137b2 <USBD_SetAddress+0x76>
 811374e:	683b      	ldr	r3, [r7, #0]
 8113750:	88db      	ldrh	r3, [r3, #6]
 8113752:	2b00      	cmp	r3, #0
 8113754:	d12d      	bne.n	81137b2 <USBD_SetAddress+0x76>
 8113756:	683b      	ldr	r3, [r7, #0]
 8113758:	885b      	ldrh	r3, [r3, #2]
 811375a:	2b7f      	cmp	r3, #127	; 0x7f
 811375c:	d829      	bhi.n	81137b2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 811375e:	683b      	ldr	r3, [r7, #0]
 8113760:	885b      	ldrh	r3, [r3, #2]
 8113762:	b2db      	uxtb	r3, r3
 8113764:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8113768:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 811376a:	687b      	ldr	r3, [r7, #4]
 811376c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8113770:	b2db      	uxtb	r3, r3
 8113772:	2b03      	cmp	r3, #3
 8113774:	d104      	bne.n	8113780 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8113776:	6839      	ldr	r1, [r7, #0]
 8113778:	6878      	ldr	r0, [r7, #4]
 811377a:	f000 f9a3 	bl	8113ac4 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 811377e:	e01d      	b.n	81137bc <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8113780:	687b      	ldr	r3, [r7, #4]
 8113782:	7bfa      	ldrb	r2, [r7, #15]
 8113784:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8113788:	7bfb      	ldrb	r3, [r7, #15]
 811378a:	4619      	mov	r1, r3
 811378c:	6878      	ldr	r0, [r7, #4]
 811378e:	f003 fbb1 	bl	8116ef4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8113792:	6878      	ldr	r0, [r7, #4]
 8113794:	f000 f9e4 	bl	8113b60 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8113798:	7bfb      	ldrb	r3, [r7, #15]
 811379a:	2b00      	cmp	r3, #0
 811379c:	d004      	beq.n	81137a8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 811379e:	687b      	ldr	r3, [r7, #4]
 81137a0:	2202      	movs	r2, #2
 81137a2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 81137a6:	e009      	b.n	81137bc <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 81137a8:	687b      	ldr	r3, [r7, #4]
 81137aa:	2201      	movs	r2, #1
 81137ac:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 81137b0:	e004      	b.n	81137bc <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 81137b2:	6839      	ldr	r1, [r7, #0]
 81137b4:	6878      	ldr	r0, [r7, #4]
 81137b6:	f000 f985 	bl	8113ac4 <USBD_CtlError>
  }
}
 81137ba:	bf00      	nop
 81137bc:	bf00      	nop
 81137be:	3710      	adds	r7, #16
 81137c0:	46bd      	mov	sp, r7
 81137c2:	bd80      	pop	{r7, pc}

081137c4 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 81137c4:	b580      	push	{r7, lr}
 81137c6:	b084      	sub	sp, #16
 81137c8:	af00      	add	r7, sp, #0
 81137ca:	6078      	str	r0, [r7, #4]
 81137cc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 81137ce:	2300      	movs	r3, #0
 81137d0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 81137d2:	683b      	ldr	r3, [r7, #0]
 81137d4:	885b      	ldrh	r3, [r3, #2]
 81137d6:	b2da      	uxtb	r2, r3
 81137d8:	4b4c      	ldr	r3, [pc, #304]	; (811390c <USBD_SetConfig+0x148>)
 81137da:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 81137dc:	4b4b      	ldr	r3, [pc, #300]	; (811390c <USBD_SetConfig+0x148>)
 81137de:	781b      	ldrb	r3, [r3, #0]
 81137e0:	2b01      	cmp	r3, #1
 81137e2:	d905      	bls.n	81137f0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 81137e4:	6839      	ldr	r1, [r7, #0]
 81137e6:	6878      	ldr	r0, [r7, #4]
 81137e8:	f000 f96c 	bl	8113ac4 <USBD_CtlError>
    return USBD_FAIL;
 81137ec:	2303      	movs	r3, #3
 81137ee:	e088      	b.n	8113902 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 81137f0:	687b      	ldr	r3, [r7, #4]
 81137f2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 81137f6:	b2db      	uxtb	r3, r3
 81137f8:	2b02      	cmp	r3, #2
 81137fa:	d002      	beq.n	8113802 <USBD_SetConfig+0x3e>
 81137fc:	2b03      	cmp	r3, #3
 81137fe:	d025      	beq.n	811384c <USBD_SetConfig+0x88>
 8113800:	e071      	b.n	81138e6 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8113802:	4b42      	ldr	r3, [pc, #264]	; (811390c <USBD_SetConfig+0x148>)
 8113804:	781b      	ldrb	r3, [r3, #0]
 8113806:	2b00      	cmp	r3, #0
 8113808:	d01c      	beq.n	8113844 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 811380a:	4b40      	ldr	r3, [pc, #256]	; (811390c <USBD_SetConfig+0x148>)
 811380c:	781b      	ldrb	r3, [r3, #0]
 811380e:	461a      	mov	r2, r3
 8113810:	687b      	ldr	r3, [r7, #4]
 8113812:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8113814:	4b3d      	ldr	r3, [pc, #244]	; (811390c <USBD_SetConfig+0x148>)
 8113816:	781b      	ldrb	r3, [r3, #0]
 8113818:	4619      	mov	r1, r3
 811381a:	6878      	ldr	r0, [r7, #4]
 811381c:	f7ff f949 	bl	8112ab2 <USBD_SetClassConfig>
 8113820:	4603      	mov	r3, r0
 8113822:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8113824:	7bfb      	ldrb	r3, [r7, #15]
 8113826:	2b00      	cmp	r3, #0
 8113828:	d004      	beq.n	8113834 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 811382a:	6839      	ldr	r1, [r7, #0]
 811382c:	6878      	ldr	r0, [r7, #4]
 811382e:	f000 f949 	bl	8113ac4 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8113832:	e065      	b.n	8113900 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8113834:	6878      	ldr	r0, [r7, #4]
 8113836:	f000 f993 	bl	8113b60 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 811383a:	687b      	ldr	r3, [r7, #4]
 811383c:	2203      	movs	r2, #3
 811383e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8113842:	e05d      	b.n	8113900 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8113844:	6878      	ldr	r0, [r7, #4]
 8113846:	f000 f98b 	bl	8113b60 <USBD_CtlSendStatus>
      break;
 811384a:	e059      	b.n	8113900 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 811384c:	4b2f      	ldr	r3, [pc, #188]	; (811390c <USBD_SetConfig+0x148>)
 811384e:	781b      	ldrb	r3, [r3, #0]
 8113850:	2b00      	cmp	r3, #0
 8113852:	d112      	bne.n	811387a <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8113854:	687b      	ldr	r3, [r7, #4]
 8113856:	2202      	movs	r2, #2
 8113858:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 811385c:	4b2b      	ldr	r3, [pc, #172]	; (811390c <USBD_SetConfig+0x148>)
 811385e:	781b      	ldrb	r3, [r3, #0]
 8113860:	461a      	mov	r2, r3
 8113862:	687b      	ldr	r3, [r7, #4]
 8113864:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8113866:	4b29      	ldr	r3, [pc, #164]	; (811390c <USBD_SetConfig+0x148>)
 8113868:	781b      	ldrb	r3, [r3, #0]
 811386a:	4619      	mov	r1, r3
 811386c:	6878      	ldr	r0, [r7, #4]
 811386e:	f7ff f93c 	bl	8112aea <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8113872:	6878      	ldr	r0, [r7, #4]
 8113874:	f000 f974 	bl	8113b60 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8113878:	e042      	b.n	8113900 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 811387a:	4b24      	ldr	r3, [pc, #144]	; (811390c <USBD_SetConfig+0x148>)
 811387c:	781b      	ldrb	r3, [r3, #0]
 811387e:	461a      	mov	r2, r3
 8113880:	687b      	ldr	r3, [r7, #4]
 8113882:	685b      	ldr	r3, [r3, #4]
 8113884:	429a      	cmp	r2, r3
 8113886:	d02a      	beq.n	81138de <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8113888:	687b      	ldr	r3, [r7, #4]
 811388a:	685b      	ldr	r3, [r3, #4]
 811388c:	b2db      	uxtb	r3, r3
 811388e:	4619      	mov	r1, r3
 8113890:	6878      	ldr	r0, [r7, #4]
 8113892:	f7ff f92a 	bl	8112aea <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8113896:	4b1d      	ldr	r3, [pc, #116]	; (811390c <USBD_SetConfig+0x148>)
 8113898:	781b      	ldrb	r3, [r3, #0]
 811389a:	461a      	mov	r2, r3
 811389c:	687b      	ldr	r3, [r7, #4]
 811389e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 81138a0:	4b1a      	ldr	r3, [pc, #104]	; (811390c <USBD_SetConfig+0x148>)
 81138a2:	781b      	ldrb	r3, [r3, #0]
 81138a4:	4619      	mov	r1, r3
 81138a6:	6878      	ldr	r0, [r7, #4]
 81138a8:	f7ff f903 	bl	8112ab2 <USBD_SetClassConfig>
 81138ac:	4603      	mov	r3, r0
 81138ae:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 81138b0:	7bfb      	ldrb	r3, [r7, #15]
 81138b2:	2b00      	cmp	r3, #0
 81138b4:	d00f      	beq.n	81138d6 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 81138b6:	6839      	ldr	r1, [r7, #0]
 81138b8:	6878      	ldr	r0, [r7, #4]
 81138ba:	f000 f903 	bl	8113ac4 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 81138be:	687b      	ldr	r3, [r7, #4]
 81138c0:	685b      	ldr	r3, [r3, #4]
 81138c2:	b2db      	uxtb	r3, r3
 81138c4:	4619      	mov	r1, r3
 81138c6:	6878      	ldr	r0, [r7, #4]
 81138c8:	f7ff f90f 	bl	8112aea <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 81138cc:	687b      	ldr	r3, [r7, #4]
 81138ce:	2202      	movs	r2, #2
 81138d0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 81138d4:	e014      	b.n	8113900 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 81138d6:	6878      	ldr	r0, [r7, #4]
 81138d8:	f000 f942 	bl	8113b60 <USBD_CtlSendStatus>
      break;
 81138dc:	e010      	b.n	8113900 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 81138de:	6878      	ldr	r0, [r7, #4]
 81138e0:	f000 f93e 	bl	8113b60 <USBD_CtlSendStatus>
      break;
 81138e4:	e00c      	b.n	8113900 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 81138e6:	6839      	ldr	r1, [r7, #0]
 81138e8:	6878      	ldr	r0, [r7, #4]
 81138ea:	f000 f8eb 	bl	8113ac4 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 81138ee:	4b07      	ldr	r3, [pc, #28]	; (811390c <USBD_SetConfig+0x148>)
 81138f0:	781b      	ldrb	r3, [r3, #0]
 81138f2:	4619      	mov	r1, r3
 81138f4:	6878      	ldr	r0, [r7, #4]
 81138f6:	f7ff f8f8 	bl	8112aea <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 81138fa:	2303      	movs	r3, #3
 81138fc:	73fb      	strb	r3, [r7, #15]
      break;
 81138fe:	bf00      	nop
  }

  return ret;
 8113900:	7bfb      	ldrb	r3, [r7, #15]
}
 8113902:	4618      	mov	r0, r3
 8113904:	3710      	adds	r7, #16
 8113906:	46bd      	mov	sp, r7
 8113908:	bd80      	pop	{r7, pc}
 811390a:	bf00      	nop
 811390c:	10000214 	.word	0x10000214

08113910 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8113910:	b580      	push	{r7, lr}
 8113912:	b082      	sub	sp, #8
 8113914:	af00      	add	r7, sp, #0
 8113916:	6078      	str	r0, [r7, #4]
 8113918:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 811391a:	683b      	ldr	r3, [r7, #0]
 811391c:	88db      	ldrh	r3, [r3, #6]
 811391e:	2b01      	cmp	r3, #1
 8113920:	d004      	beq.n	811392c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8113922:	6839      	ldr	r1, [r7, #0]
 8113924:	6878      	ldr	r0, [r7, #4]
 8113926:	f000 f8cd 	bl	8113ac4 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 811392a:	e023      	b.n	8113974 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 811392c:	687b      	ldr	r3, [r7, #4]
 811392e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8113932:	b2db      	uxtb	r3, r3
 8113934:	2b02      	cmp	r3, #2
 8113936:	dc02      	bgt.n	811393e <USBD_GetConfig+0x2e>
 8113938:	2b00      	cmp	r3, #0
 811393a:	dc03      	bgt.n	8113944 <USBD_GetConfig+0x34>
 811393c:	e015      	b.n	811396a <USBD_GetConfig+0x5a>
 811393e:	2b03      	cmp	r3, #3
 8113940:	d00b      	beq.n	811395a <USBD_GetConfig+0x4a>
 8113942:	e012      	b.n	811396a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8113944:	687b      	ldr	r3, [r7, #4]
 8113946:	2200      	movs	r2, #0
 8113948:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 811394a:	687b      	ldr	r3, [r7, #4]
 811394c:	3308      	adds	r3, #8
 811394e:	2201      	movs	r2, #1
 8113950:	4619      	mov	r1, r3
 8113952:	6878      	ldr	r0, [r7, #4]
 8113954:	f000 f8c7 	bl	8113ae6 <USBD_CtlSendData>
        break;
 8113958:	e00c      	b.n	8113974 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 811395a:	687b      	ldr	r3, [r7, #4]
 811395c:	3304      	adds	r3, #4
 811395e:	2201      	movs	r2, #1
 8113960:	4619      	mov	r1, r3
 8113962:	6878      	ldr	r0, [r7, #4]
 8113964:	f000 f8bf 	bl	8113ae6 <USBD_CtlSendData>
        break;
 8113968:	e004      	b.n	8113974 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 811396a:	6839      	ldr	r1, [r7, #0]
 811396c:	6878      	ldr	r0, [r7, #4]
 811396e:	f000 f8a9 	bl	8113ac4 <USBD_CtlError>
        break;
 8113972:	bf00      	nop
}
 8113974:	bf00      	nop
 8113976:	3708      	adds	r7, #8
 8113978:	46bd      	mov	sp, r7
 811397a:	bd80      	pop	{r7, pc}

0811397c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 811397c:	b580      	push	{r7, lr}
 811397e:	b082      	sub	sp, #8
 8113980:	af00      	add	r7, sp, #0
 8113982:	6078      	str	r0, [r7, #4]
 8113984:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8113986:	687b      	ldr	r3, [r7, #4]
 8113988:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 811398c:	b2db      	uxtb	r3, r3
 811398e:	3b01      	subs	r3, #1
 8113990:	2b02      	cmp	r3, #2
 8113992:	d81e      	bhi.n	81139d2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8113994:	683b      	ldr	r3, [r7, #0]
 8113996:	88db      	ldrh	r3, [r3, #6]
 8113998:	2b02      	cmp	r3, #2
 811399a:	d004      	beq.n	81139a6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 811399c:	6839      	ldr	r1, [r7, #0]
 811399e:	6878      	ldr	r0, [r7, #4]
 81139a0:	f000 f890 	bl	8113ac4 <USBD_CtlError>
        break;
 81139a4:	e01a      	b.n	81139dc <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 81139a6:	687b      	ldr	r3, [r7, #4]
 81139a8:	2201      	movs	r2, #1
 81139aa:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 81139ac:	687b      	ldr	r3, [r7, #4]
 81139ae:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 81139b2:	2b00      	cmp	r3, #0
 81139b4:	d005      	beq.n	81139c2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 81139b6:	687b      	ldr	r3, [r7, #4]
 81139b8:	68db      	ldr	r3, [r3, #12]
 81139ba:	f043 0202 	orr.w	r2, r3, #2
 81139be:	687b      	ldr	r3, [r7, #4]
 81139c0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 81139c2:	687b      	ldr	r3, [r7, #4]
 81139c4:	330c      	adds	r3, #12
 81139c6:	2202      	movs	r2, #2
 81139c8:	4619      	mov	r1, r3
 81139ca:	6878      	ldr	r0, [r7, #4]
 81139cc:	f000 f88b 	bl	8113ae6 <USBD_CtlSendData>
      break;
 81139d0:	e004      	b.n	81139dc <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 81139d2:	6839      	ldr	r1, [r7, #0]
 81139d4:	6878      	ldr	r0, [r7, #4]
 81139d6:	f000 f875 	bl	8113ac4 <USBD_CtlError>
      break;
 81139da:	bf00      	nop
  }
}
 81139dc:	bf00      	nop
 81139de:	3708      	adds	r7, #8
 81139e0:	46bd      	mov	sp, r7
 81139e2:	bd80      	pop	{r7, pc}

081139e4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 81139e4:	b580      	push	{r7, lr}
 81139e6:	b082      	sub	sp, #8
 81139e8:	af00      	add	r7, sp, #0
 81139ea:	6078      	str	r0, [r7, #4]
 81139ec:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 81139ee:	683b      	ldr	r3, [r7, #0]
 81139f0:	885b      	ldrh	r3, [r3, #2]
 81139f2:	2b01      	cmp	r3, #1
 81139f4:	d106      	bne.n	8113a04 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 81139f6:	687b      	ldr	r3, [r7, #4]
 81139f8:	2201      	movs	r2, #1
 81139fa:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 81139fe:	6878      	ldr	r0, [r7, #4]
 8113a00:	f000 f8ae 	bl	8113b60 <USBD_CtlSendStatus>
  }
}
 8113a04:	bf00      	nop
 8113a06:	3708      	adds	r7, #8
 8113a08:	46bd      	mov	sp, r7
 8113a0a:	bd80      	pop	{r7, pc}

08113a0c <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8113a0c:	b580      	push	{r7, lr}
 8113a0e:	b082      	sub	sp, #8
 8113a10:	af00      	add	r7, sp, #0
 8113a12:	6078      	str	r0, [r7, #4]
 8113a14:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8113a16:	687b      	ldr	r3, [r7, #4]
 8113a18:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8113a1c:	b2db      	uxtb	r3, r3
 8113a1e:	3b01      	subs	r3, #1
 8113a20:	2b02      	cmp	r3, #2
 8113a22:	d80b      	bhi.n	8113a3c <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8113a24:	683b      	ldr	r3, [r7, #0]
 8113a26:	885b      	ldrh	r3, [r3, #2]
 8113a28:	2b01      	cmp	r3, #1
 8113a2a:	d10c      	bne.n	8113a46 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8113a2c:	687b      	ldr	r3, [r7, #4]
 8113a2e:	2200      	movs	r2, #0
 8113a30:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8113a34:	6878      	ldr	r0, [r7, #4]
 8113a36:	f000 f893 	bl	8113b60 <USBD_CtlSendStatus>
      }
      break;
 8113a3a:	e004      	b.n	8113a46 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8113a3c:	6839      	ldr	r1, [r7, #0]
 8113a3e:	6878      	ldr	r0, [r7, #4]
 8113a40:	f000 f840 	bl	8113ac4 <USBD_CtlError>
      break;
 8113a44:	e000      	b.n	8113a48 <USBD_ClrFeature+0x3c>
      break;
 8113a46:	bf00      	nop
  }
}
 8113a48:	bf00      	nop
 8113a4a:	3708      	adds	r7, #8
 8113a4c:	46bd      	mov	sp, r7
 8113a4e:	bd80      	pop	{r7, pc}

08113a50 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8113a50:	b580      	push	{r7, lr}
 8113a52:	b084      	sub	sp, #16
 8113a54:	af00      	add	r7, sp, #0
 8113a56:	6078      	str	r0, [r7, #4]
 8113a58:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8113a5a:	683b      	ldr	r3, [r7, #0]
 8113a5c:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8113a5e:	68fb      	ldr	r3, [r7, #12]
 8113a60:	781a      	ldrb	r2, [r3, #0]
 8113a62:	687b      	ldr	r3, [r7, #4]
 8113a64:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8113a66:	68fb      	ldr	r3, [r7, #12]
 8113a68:	3301      	adds	r3, #1
 8113a6a:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8113a6c:	68fb      	ldr	r3, [r7, #12]
 8113a6e:	781a      	ldrb	r2, [r3, #0]
 8113a70:	687b      	ldr	r3, [r7, #4]
 8113a72:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8113a74:	68fb      	ldr	r3, [r7, #12]
 8113a76:	3301      	adds	r3, #1
 8113a78:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8113a7a:	68f8      	ldr	r0, [r7, #12]
 8113a7c:	f7ff fabc 	bl	8112ff8 <SWAPBYTE>
 8113a80:	4603      	mov	r3, r0
 8113a82:	461a      	mov	r2, r3
 8113a84:	687b      	ldr	r3, [r7, #4]
 8113a86:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8113a88:	68fb      	ldr	r3, [r7, #12]
 8113a8a:	3301      	adds	r3, #1
 8113a8c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8113a8e:	68fb      	ldr	r3, [r7, #12]
 8113a90:	3301      	adds	r3, #1
 8113a92:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8113a94:	68f8      	ldr	r0, [r7, #12]
 8113a96:	f7ff faaf 	bl	8112ff8 <SWAPBYTE>
 8113a9a:	4603      	mov	r3, r0
 8113a9c:	461a      	mov	r2, r3
 8113a9e:	687b      	ldr	r3, [r7, #4]
 8113aa0:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8113aa2:	68fb      	ldr	r3, [r7, #12]
 8113aa4:	3301      	adds	r3, #1
 8113aa6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8113aa8:	68fb      	ldr	r3, [r7, #12]
 8113aaa:	3301      	adds	r3, #1
 8113aac:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8113aae:	68f8      	ldr	r0, [r7, #12]
 8113ab0:	f7ff faa2 	bl	8112ff8 <SWAPBYTE>
 8113ab4:	4603      	mov	r3, r0
 8113ab6:	461a      	mov	r2, r3
 8113ab8:	687b      	ldr	r3, [r7, #4]
 8113aba:	80da      	strh	r2, [r3, #6]
}
 8113abc:	bf00      	nop
 8113abe:	3710      	adds	r7, #16
 8113ac0:	46bd      	mov	sp, r7
 8113ac2:	bd80      	pop	{r7, pc}

08113ac4 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8113ac4:	b580      	push	{r7, lr}
 8113ac6:	b082      	sub	sp, #8
 8113ac8:	af00      	add	r7, sp, #0
 8113aca:	6078      	str	r0, [r7, #4]
 8113acc:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8113ace:	2180      	movs	r1, #128	; 0x80
 8113ad0:	6878      	ldr	r0, [r7, #4]
 8113ad2:	f003 f9a5 	bl	8116e20 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8113ad6:	2100      	movs	r1, #0
 8113ad8:	6878      	ldr	r0, [r7, #4]
 8113ada:	f003 f9a1 	bl	8116e20 <USBD_LL_StallEP>
}
 8113ade:	bf00      	nop
 8113ae0:	3708      	adds	r7, #8
 8113ae2:	46bd      	mov	sp, r7
 8113ae4:	bd80      	pop	{r7, pc}

08113ae6 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8113ae6:	b580      	push	{r7, lr}
 8113ae8:	b084      	sub	sp, #16
 8113aea:	af00      	add	r7, sp, #0
 8113aec:	60f8      	str	r0, [r7, #12]
 8113aee:	60b9      	str	r1, [r7, #8]
 8113af0:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8113af2:	68fb      	ldr	r3, [r7, #12]
 8113af4:	2202      	movs	r2, #2
 8113af6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8113afa:	68fb      	ldr	r3, [r7, #12]
 8113afc:	687a      	ldr	r2, [r7, #4]
 8113afe:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8113b00:	68fb      	ldr	r3, [r7, #12]
 8113b02:	687a      	ldr	r2, [r7, #4]
 8113b04:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8113b06:	687b      	ldr	r3, [r7, #4]
 8113b08:	68ba      	ldr	r2, [r7, #8]
 8113b0a:	2100      	movs	r1, #0
 8113b0c:	68f8      	ldr	r0, [r7, #12]
 8113b0e:	f003 fa10 	bl	8116f32 <USBD_LL_Transmit>

  return USBD_OK;
 8113b12:	2300      	movs	r3, #0
}
 8113b14:	4618      	mov	r0, r3
 8113b16:	3710      	adds	r7, #16
 8113b18:	46bd      	mov	sp, r7
 8113b1a:	bd80      	pop	{r7, pc}

08113b1c <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8113b1c:	b580      	push	{r7, lr}
 8113b1e:	b084      	sub	sp, #16
 8113b20:	af00      	add	r7, sp, #0
 8113b22:	60f8      	str	r0, [r7, #12]
 8113b24:	60b9      	str	r1, [r7, #8]
 8113b26:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8113b28:	687b      	ldr	r3, [r7, #4]
 8113b2a:	68ba      	ldr	r2, [r7, #8]
 8113b2c:	2100      	movs	r1, #0
 8113b2e:	68f8      	ldr	r0, [r7, #12]
 8113b30:	f003 f9ff 	bl	8116f32 <USBD_LL_Transmit>

  return USBD_OK;
 8113b34:	2300      	movs	r3, #0
}
 8113b36:	4618      	mov	r0, r3
 8113b38:	3710      	adds	r7, #16
 8113b3a:	46bd      	mov	sp, r7
 8113b3c:	bd80      	pop	{r7, pc}

08113b3e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8113b3e:	b580      	push	{r7, lr}
 8113b40:	b084      	sub	sp, #16
 8113b42:	af00      	add	r7, sp, #0
 8113b44:	60f8      	str	r0, [r7, #12]
 8113b46:	60b9      	str	r1, [r7, #8]
 8113b48:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8113b4a:	687b      	ldr	r3, [r7, #4]
 8113b4c:	68ba      	ldr	r2, [r7, #8]
 8113b4e:	2100      	movs	r1, #0
 8113b50:	68f8      	ldr	r0, [r7, #12]
 8113b52:	f003 fa0f 	bl	8116f74 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8113b56:	2300      	movs	r3, #0
}
 8113b58:	4618      	mov	r0, r3
 8113b5a:	3710      	adds	r7, #16
 8113b5c:	46bd      	mov	sp, r7
 8113b5e:	bd80      	pop	{r7, pc}

08113b60 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8113b60:	b580      	push	{r7, lr}
 8113b62:	b082      	sub	sp, #8
 8113b64:	af00      	add	r7, sp, #0
 8113b66:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8113b68:	687b      	ldr	r3, [r7, #4]
 8113b6a:	2204      	movs	r2, #4
 8113b6c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8113b70:	2300      	movs	r3, #0
 8113b72:	2200      	movs	r2, #0
 8113b74:	2100      	movs	r1, #0
 8113b76:	6878      	ldr	r0, [r7, #4]
 8113b78:	f003 f9db 	bl	8116f32 <USBD_LL_Transmit>

  return USBD_OK;
 8113b7c:	2300      	movs	r3, #0
}
 8113b7e:	4618      	mov	r0, r3
 8113b80:	3708      	adds	r7, #8
 8113b82:	46bd      	mov	sp, r7
 8113b84:	bd80      	pop	{r7, pc}

08113b86 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8113b86:	b580      	push	{r7, lr}
 8113b88:	b082      	sub	sp, #8
 8113b8a:	af00      	add	r7, sp, #0
 8113b8c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8113b8e:	687b      	ldr	r3, [r7, #4]
 8113b90:	2205      	movs	r2, #5
 8113b92:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8113b96:	2300      	movs	r3, #0
 8113b98:	2200      	movs	r2, #0
 8113b9a:	2100      	movs	r1, #0
 8113b9c:	6878      	ldr	r0, [r7, #4]
 8113b9e:	f003 f9e9 	bl	8116f74 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8113ba2:	2300      	movs	r3, #0
}
 8113ba4:	4618      	mov	r0, r3
 8113ba6:	3708      	adds	r7, #8
 8113ba8:	46bd      	mov	sp, r7
 8113baa:	bd80      	pop	{r7, pc}

08113bac <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8113bac:	b480      	push	{r7}
 8113bae:	b087      	sub	sp, #28
 8113bb0:	af00      	add	r7, sp, #0
 8113bb2:	60f8      	str	r0, [r7, #12]
 8113bb4:	60b9      	str	r1, [r7, #8]
 8113bb6:	4613      	mov	r3, r2
 8113bb8:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8113bba:	2301      	movs	r3, #1
 8113bbc:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8113bbe:	2300      	movs	r3, #0
 8113bc0:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8113bc2:	4b1f      	ldr	r3, [pc, #124]	; (8113c40 <FATFS_LinkDriverEx+0x94>)
 8113bc4:	7a5b      	ldrb	r3, [r3, #9]
 8113bc6:	b2db      	uxtb	r3, r3
 8113bc8:	2b00      	cmp	r3, #0
 8113bca:	d131      	bne.n	8113c30 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8113bcc:	4b1c      	ldr	r3, [pc, #112]	; (8113c40 <FATFS_LinkDriverEx+0x94>)
 8113bce:	7a5b      	ldrb	r3, [r3, #9]
 8113bd0:	b2db      	uxtb	r3, r3
 8113bd2:	461a      	mov	r2, r3
 8113bd4:	4b1a      	ldr	r3, [pc, #104]	; (8113c40 <FATFS_LinkDriverEx+0x94>)
 8113bd6:	2100      	movs	r1, #0
 8113bd8:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8113bda:	4b19      	ldr	r3, [pc, #100]	; (8113c40 <FATFS_LinkDriverEx+0x94>)
 8113bdc:	7a5b      	ldrb	r3, [r3, #9]
 8113bde:	b2db      	uxtb	r3, r3
 8113be0:	4a17      	ldr	r2, [pc, #92]	; (8113c40 <FATFS_LinkDriverEx+0x94>)
 8113be2:	009b      	lsls	r3, r3, #2
 8113be4:	4413      	add	r3, r2
 8113be6:	68fa      	ldr	r2, [r7, #12]
 8113be8:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8113bea:	4b15      	ldr	r3, [pc, #84]	; (8113c40 <FATFS_LinkDriverEx+0x94>)
 8113bec:	7a5b      	ldrb	r3, [r3, #9]
 8113bee:	b2db      	uxtb	r3, r3
 8113bf0:	461a      	mov	r2, r3
 8113bf2:	4b13      	ldr	r3, [pc, #76]	; (8113c40 <FATFS_LinkDriverEx+0x94>)
 8113bf4:	4413      	add	r3, r2
 8113bf6:	79fa      	ldrb	r2, [r7, #7]
 8113bf8:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8113bfa:	4b11      	ldr	r3, [pc, #68]	; (8113c40 <FATFS_LinkDriverEx+0x94>)
 8113bfc:	7a5b      	ldrb	r3, [r3, #9]
 8113bfe:	b2db      	uxtb	r3, r3
 8113c00:	1c5a      	adds	r2, r3, #1
 8113c02:	b2d1      	uxtb	r1, r2
 8113c04:	4a0e      	ldr	r2, [pc, #56]	; (8113c40 <FATFS_LinkDriverEx+0x94>)
 8113c06:	7251      	strb	r1, [r2, #9]
 8113c08:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8113c0a:	7dbb      	ldrb	r3, [r7, #22]
 8113c0c:	3330      	adds	r3, #48	; 0x30
 8113c0e:	b2da      	uxtb	r2, r3
 8113c10:	68bb      	ldr	r3, [r7, #8]
 8113c12:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8113c14:	68bb      	ldr	r3, [r7, #8]
 8113c16:	3301      	adds	r3, #1
 8113c18:	223a      	movs	r2, #58	; 0x3a
 8113c1a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8113c1c:	68bb      	ldr	r3, [r7, #8]
 8113c1e:	3302      	adds	r3, #2
 8113c20:	222f      	movs	r2, #47	; 0x2f
 8113c22:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8113c24:	68bb      	ldr	r3, [r7, #8]
 8113c26:	3303      	adds	r3, #3
 8113c28:	2200      	movs	r2, #0
 8113c2a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8113c2c:	2300      	movs	r3, #0
 8113c2e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8113c30:	7dfb      	ldrb	r3, [r7, #23]
}
 8113c32:	4618      	mov	r0, r3
 8113c34:	371c      	adds	r7, #28
 8113c36:	46bd      	mov	sp, r7
 8113c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8113c3c:	4770      	bx	lr
 8113c3e:	bf00      	nop
 8113c40:	10000218 	.word	0x10000218

08113c44 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8113c44:	b580      	push	{r7, lr}
 8113c46:	b082      	sub	sp, #8
 8113c48:	af00      	add	r7, sp, #0
 8113c4a:	6078      	str	r0, [r7, #4]
 8113c4c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8113c4e:	2200      	movs	r2, #0
 8113c50:	6839      	ldr	r1, [r7, #0]
 8113c52:	6878      	ldr	r0, [r7, #4]
 8113c54:	f7ff ffaa 	bl	8113bac <FATFS_LinkDriverEx>
 8113c58:	4603      	mov	r3, r0
}
 8113c5a:	4618      	mov	r0, r3
 8113c5c:	3708      	adds	r7, #8
 8113c5e:	46bd      	mov	sp, r7
 8113c60:	bd80      	pop	{r7, pc}
	...

08113c64 <__NVIC_SetPriority>:
{
 8113c64:	b480      	push	{r7}
 8113c66:	b083      	sub	sp, #12
 8113c68:	af00      	add	r7, sp, #0
 8113c6a:	4603      	mov	r3, r0
 8113c6c:	6039      	str	r1, [r7, #0]
 8113c6e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8113c70:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8113c74:	2b00      	cmp	r3, #0
 8113c76:	db0a      	blt.n	8113c8e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8113c78:	683b      	ldr	r3, [r7, #0]
 8113c7a:	b2da      	uxtb	r2, r3
 8113c7c:	490c      	ldr	r1, [pc, #48]	; (8113cb0 <__NVIC_SetPriority+0x4c>)
 8113c7e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8113c82:	0112      	lsls	r2, r2, #4
 8113c84:	b2d2      	uxtb	r2, r2
 8113c86:	440b      	add	r3, r1
 8113c88:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8113c8c:	e00a      	b.n	8113ca4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8113c8e:	683b      	ldr	r3, [r7, #0]
 8113c90:	b2da      	uxtb	r2, r3
 8113c92:	4908      	ldr	r1, [pc, #32]	; (8113cb4 <__NVIC_SetPriority+0x50>)
 8113c94:	88fb      	ldrh	r3, [r7, #6]
 8113c96:	f003 030f 	and.w	r3, r3, #15
 8113c9a:	3b04      	subs	r3, #4
 8113c9c:	0112      	lsls	r2, r2, #4
 8113c9e:	b2d2      	uxtb	r2, r2
 8113ca0:	440b      	add	r3, r1
 8113ca2:	761a      	strb	r2, [r3, #24]
}
 8113ca4:	bf00      	nop
 8113ca6:	370c      	adds	r7, #12
 8113ca8:	46bd      	mov	sp, r7
 8113caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8113cae:	4770      	bx	lr
 8113cb0:	e000e100 	.word	0xe000e100
 8113cb4:	e000ed00 	.word	0xe000ed00

08113cb8 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8113cb8:	b580      	push	{r7, lr}
 8113cba:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8113cbc:	4b05      	ldr	r3, [pc, #20]	; (8113cd4 <SysTick_Handler+0x1c>)
 8113cbe:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8113cc0:	f002 fb68 	bl	8116394 <xTaskGetSchedulerState>
 8113cc4:	4603      	mov	r3, r0
 8113cc6:	2b01      	cmp	r3, #1
 8113cc8:	d001      	beq.n	8113cce <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8113cca:	f000 fefd 	bl	8114ac8 <xPortSysTickHandler>
  }
}
 8113cce:	bf00      	nop
 8113cd0:	bd80      	pop	{r7, pc}
 8113cd2:	bf00      	nop
 8113cd4:	e000e010 	.word	0xe000e010

08113cd8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8113cd8:	b580      	push	{r7, lr}
 8113cda:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8113cdc:	2100      	movs	r1, #0
 8113cde:	f06f 0004 	mvn.w	r0, #4
 8113ce2:	f7ff ffbf 	bl	8113c64 <__NVIC_SetPriority>
#endif
}
 8113ce6:	bf00      	nop
 8113ce8:	bd80      	pop	{r7, pc}
	...

08113cec <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8113cec:	b480      	push	{r7}
 8113cee:	b083      	sub	sp, #12
 8113cf0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8113cf2:	f3ef 8305 	mrs	r3, IPSR
 8113cf6:	603b      	str	r3, [r7, #0]
  return(result);
 8113cf8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8113cfa:	2b00      	cmp	r3, #0
 8113cfc:	d003      	beq.n	8113d06 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8113cfe:	f06f 0305 	mvn.w	r3, #5
 8113d02:	607b      	str	r3, [r7, #4]
 8113d04:	e00c      	b.n	8113d20 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8113d06:	4b0a      	ldr	r3, [pc, #40]	; (8113d30 <osKernelInitialize+0x44>)
 8113d08:	681b      	ldr	r3, [r3, #0]
 8113d0a:	2b00      	cmp	r3, #0
 8113d0c:	d105      	bne.n	8113d1a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8113d0e:	4b08      	ldr	r3, [pc, #32]	; (8113d30 <osKernelInitialize+0x44>)
 8113d10:	2201      	movs	r2, #1
 8113d12:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8113d14:	2300      	movs	r3, #0
 8113d16:	607b      	str	r3, [r7, #4]
 8113d18:	e002      	b.n	8113d20 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8113d1a:	f04f 33ff 	mov.w	r3, #4294967295
 8113d1e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8113d20:	687b      	ldr	r3, [r7, #4]
}
 8113d22:	4618      	mov	r0, r3
 8113d24:	370c      	adds	r7, #12
 8113d26:	46bd      	mov	sp, r7
 8113d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8113d2c:	4770      	bx	lr
 8113d2e:	bf00      	nop
 8113d30:	10000224 	.word	0x10000224

08113d34 <osKernelGetState>:
  }

  return (osOK);
}

osKernelState_t osKernelGetState (void) {
 8113d34:	b580      	push	{r7, lr}
 8113d36:	b082      	sub	sp, #8
 8113d38:	af00      	add	r7, sp, #0
  osKernelState_t state;

  switch (xTaskGetSchedulerState()) {
 8113d3a:	f002 fb2b 	bl	8116394 <xTaskGetSchedulerState>
 8113d3e:	4603      	mov	r3, r0
 8113d40:	2b00      	cmp	r3, #0
 8113d42:	d004      	beq.n	8113d4e <osKernelGetState+0x1a>
 8113d44:	2b02      	cmp	r3, #2
 8113d46:	d105      	bne.n	8113d54 <osKernelGetState+0x20>
    case taskSCHEDULER_RUNNING:
      state = osKernelRunning;
 8113d48:	2302      	movs	r3, #2
 8113d4a:	607b      	str	r3, [r7, #4]
      break;
 8113d4c:	e00c      	b.n	8113d68 <osKernelGetState+0x34>

    case taskSCHEDULER_SUSPENDED:
      state = osKernelLocked;
 8113d4e:	2303      	movs	r3, #3
 8113d50:	607b      	str	r3, [r7, #4]
      break;
 8113d52:	e009      	b.n	8113d68 <osKernelGetState+0x34>

    case taskSCHEDULER_NOT_STARTED:
    default:
      if (KernelState == osKernelReady) {
 8113d54:	4b07      	ldr	r3, [pc, #28]	; (8113d74 <osKernelGetState+0x40>)
 8113d56:	681b      	ldr	r3, [r3, #0]
 8113d58:	2b01      	cmp	r3, #1
 8113d5a:	d102      	bne.n	8113d62 <osKernelGetState+0x2e>
        state = osKernelReady;
 8113d5c:	2301      	movs	r3, #1
 8113d5e:	607b      	str	r3, [r7, #4]
      } else {
        state = osKernelInactive;
      }
      break;
 8113d60:	e001      	b.n	8113d66 <osKernelGetState+0x32>
        state = osKernelInactive;
 8113d62:	2300      	movs	r3, #0
 8113d64:	607b      	str	r3, [r7, #4]
      break;
 8113d66:	bf00      	nop
  }

  return (state);
 8113d68:	687b      	ldr	r3, [r7, #4]
}
 8113d6a:	4618      	mov	r0, r3
 8113d6c:	3708      	adds	r7, #8
 8113d6e:	46bd      	mov	sp, r7
 8113d70:	bd80      	pop	{r7, pc}
 8113d72:	bf00      	nop
 8113d74:	10000224 	.word	0x10000224

08113d78 <osKernelStart>:

osStatus_t osKernelStart (void) {
 8113d78:	b580      	push	{r7, lr}
 8113d7a:	b082      	sub	sp, #8
 8113d7c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8113d7e:	f3ef 8305 	mrs	r3, IPSR
 8113d82:	603b      	str	r3, [r7, #0]
  return(result);
 8113d84:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8113d86:	2b00      	cmp	r3, #0
 8113d88:	d003      	beq.n	8113d92 <osKernelStart+0x1a>
    stat = osErrorISR;
 8113d8a:	f06f 0305 	mvn.w	r3, #5
 8113d8e:	607b      	str	r3, [r7, #4]
 8113d90:	e010      	b.n	8113db4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8113d92:	4b0b      	ldr	r3, [pc, #44]	; (8113dc0 <osKernelStart+0x48>)
 8113d94:	681b      	ldr	r3, [r3, #0]
 8113d96:	2b01      	cmp	r3, #1
 8113d98:	d109      	bne.n	8113dae <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8113d9a:	f7ff ff9d 	bl	8113cd8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8113d9e:	4b08      	ldr	r3, [pc, #32]	; (8113dc0 <osKernelStart+0x48>)
 8113da0:	2202      	movs	r2, #2
 8113da2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8113da4:	f001 fe9c 	bl	8115ae0 <vTaskStartScheduler>
      stat = osOK;
 8113da8:	2300      	movs	r3, #0
 8113daa:	607b      	str	r3, [r7, #4]
 8113dac:	e002      	b.n	8113db4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8113dae:	f04f 33ff 	mov.w	r3, #4294967295
 8113db2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8113db4:	687b      	ldr	r3, [r7, #4]
}
 8113db6:	4618      	mov	r0, r3
 8113db8:	3708      	adds	r7, #8
 8113dba:	46bd      	mov	sp, r7
 8113dbc:	bd80      	pop	{r7, pc}
 8113dbe:	bf00      	nop
 8113dc0:	10000224 	.word	0x10000224

08113dc4 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 8113dc4:	b580      	push	{r7, lr}
 8113dc6:	b082      	sub	sp, #8
 8113dc8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8113dca:	f3ef 8305 	mrs	r3, IPSR
 8113dce:	603b      	str	r3, [r7, #0]
  return(result);
 8113dd0:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 8113dd2:	2b00      	cmp	r3, #0
 8113dd4:	d003      	beq.n	8113dde <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 8113dd6:	f001 ffa5 	bl	8115d24 <xTaskGetTickCountFromISR>
 8113dda:	6078      	str	r0, [r7, #4]
 8113ddc:	e002      	b.n	8113de4 <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 8113dde:	f001 ff91 	bl	8115d04 <xTaskGetTickCount>
 8113de2:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 8113de4:	687b      	ldr	r3, [r7, #4]
}
 8113de6:	4618      	mov	r0, r3
 8113de8:	3708      	adds	r7, #8
 8113dea:	46bd      	mov	sp, r7
 8113dec:	bd80      	pop	{r7, pc}

08113dee <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8113dee:	b580      	push	{r7, lr}
 8113df0:	b08e      	sub	sp, #56	; 0x38
 8113df2:	af04      	add	r7, sp, #16
 8113df4:	60f8      	str	r0, [r7, #12]
 8113df6:	60b9      	str	r1, [r7, #8]
 8113df8:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8113dfa:	2300      	movs	r3, #0
 8113dfc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8113dfe:	f3ef 8305 	mrs	r3, IPSR
 8113e02:	617b      	str	r3, [r7, #20]
  return(result);
 8113e04:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8113e06:	2b00      	cmp	r3, #0
 8113e08:	d17e      	bne.n	8113f08 <osThreadNew+0x11a>
 8113e0a:	68fb      	ldr	r3, [r7, #12]
 8113e0c:	2b00      	cmp	r3, #0
 8113e0e:	d07b      	beq.n	8113f08 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8113e10:	2380      	movs	r3, #128	; 0x80
 8113e12:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8113e14:	2318      	movs	r3, #24
 8113e16:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8113e18:	2300      	movs	r3, #0
 8113e1a:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8113e1c:	f04f 33ff 	mov.w	r3, #4294967295
 8113e20:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8113e22:	687b      	ldr	r3, [r7, #4]
 8113e24:	2b00      	cmp	r3, #0
 8113e26:	d045      	beq.n	8113eb4 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8113e28:	687b      	ldr	r3, [r7, #4]
 8113e2a:	681b      	ldr	r3, [r3, #0]
 8113e2c:	2b00      	cmp	r3, #0
 8113e2e:	d002      	beq.n	8113e36 <osThreadNew+0x48>
        name = attr->name;
 8113e30:	687b      	ldr	r3, [r7, #4]
 8113e32:	681b      	ldr	r3, [r3, #0]
 8113e34:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8113e36:	687b      	ldr	r3, [r7, #4]
 8113e38:	699b      	ldr	r3, [r3, #24]
 8113e3a:	2b00      	cmp	r3, #0
 8113e3c:	d002      	beq.n	8113e44 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8113e3e:	687b      	ldr	r3, [r7, #4]
 8113e40:	699b      	ldr	r3, [r3, #24]
 8113e42:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8113e44:	69fb      	ldr	r3, [r7, #28]
 8113e46:	2b00      	cmp	r3, #0
 8113e48:	d008      	beq.n	8113e5c <osThreadNew+0x6e>
 8113e4a:	69fb      	ldr	r3, [r7, #28]
 8113e4c:	2b38      	cmp	r3, #56	; 0x38
 8113e4e:	d805      	bhi.n	8113e5c <osThreadNew+0x6e>
 8113e50:	687b      	ldr	r3, [r7, #4]
 8113e52:	685b      	ldr	r3, [r3, #4]
 8113e54:	f003 0301 	and.w	r3, r3, #1
 8113e58:	2b00      	cmp	r3, #0
 8113e5a:	d001      	beq.n	8113e60 <osThreadNew+0x72>
        return (NULL);
 8113e5c:	2300      	movs	r3, #0
 8113e5e:	e054      	b.n	8113f0a <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8113e60:	687b      	ldr	r3, [r7, #4]
 8113e62:	695b      	ldr	r3, [r3, #20]
 8113e64:	2b00      	cmp	r3, #0
 8113e66:	d003      	beq.n	8113e70 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8113e68:	687b      	ldr	r3, [r7, #4]
 8113e6a:	695b      	ldr	r3, [r3, #20]
 8113e6c:	089b      	lsrs	r3, r3, #2
 8113e6e:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8113e70:	687b      	ldr	r3, [r7, #4]
 8113e72:	689b      	ldr	r3, [r3, #8]
 8113e74:	2b00      	cmp	r3, #0
 8113e76:	d00e      	beq.n	8113e96 <osThreadNew+0xa8>
 8113e78:	687b      	ldr	r3, [r7, #4]
 8113e7a:	68db      	ldr	r3, [r3, #12]
 8113e7c:	2b5b      	cmp	r3, #91	; 0x5b
 8113e7e:	d90a      	bls.n	8113e96 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8113e80:	687b      	ldr	r3, [r7, #4]
 8113e82:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8113e84:	2b00      	cmp	r3, #0
 8113e86:	d006      	beq.n	8113e96 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8113e88:	687b      	ldr	r3, [r7, #4]
 8113e8a:	695b      	ldr	r3, [r3, #20]
 8113e8c:	2b00      	cmp	r3, #0
 8113e8e:	d002      	beq.n	8113e96 <osThreadNew+0xa8>
        mem = 1;
 8113e90:	2301      	movs	r3, #1
 8113e92:	61bb      	str	r3, [r7, #24]
 8113e94:	e010      	b.n	8113eb8 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8113e96:	687b      	ldr	r3, [r7, #4]
 8113e98:	689b      	ldr	r3, [r3, #8]
 8113e9a:	2b00      	cmp	r3, #0
 8113e9c:	d10c      	bne.n	8113eb8 <osThreadNew+0xca>
 8113e9e:	687b      	ldr	r3, [r7, #4]
 8113ea0:	68db      	ldr	r3, [r3, #12]
 8113ea2:	2b00      	cmp	r3, #0
 8113ea4:	d108      	bne.n	8113eb8 <osThreadNew+0xca>
 8113ea6:	687b      	ldr	r3, [r7, #4]
 8113ea8:	691b      	ldr	r3, [r3, #16]
 8113eaa:	2b00      	cmp	r3, #0
 8113eac:	d104      	bne.n	8113eb8 <osThreadNew+0xca>
          mem = 0;
 8113eae:	2300      	movs	r3, #0
 8113eb0:	61bb      	str	r3, [r7, #24]
 8113eb2:	e001      	b.n	8113eb8 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8113eb4:	2300      	movs	r3, #0
 8113eb6:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8113eb8:	69bb      	ldr	r3, [r7, #24]
 8113eba:	2b01      	cmp	r3, #1
 8113ebc:	d110      	bne.n	8113ee0 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8113ebe:	687b      	ldr	r3, [r7, #4]
 8113ec0:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8113ec2:	687a      	ldr	r2, [r7, #4]
 8113ec4:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8113ec6:	9202      	str	r2, [sp, #8]
 8113ec8:	9301      	str	r3, [sp, #4]
 8113eca:	69fb      	ldr	r3, [r7, #28]
 8113ecc:	9300      	str	r3, [sp, #0]
 8113ece:	68bb      	ldr	r3, [r7, #8]
 8113ed0:	6a3a      	ldr	r2, [r7, #32]
 8113ed2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8113ed4:	68f8      	ldr	r0, [r7, #12]
 8113ed6:	f001 fc2d 	bl	8115734 <xTaskCreateStatic>
 8113eda:	4603      	mov	r3, r0
 8113edc:	613b      	str	r3, [r7, #16]
 8113ede:	e013      	b.n	8113f08 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8113ee0:	69bb      	ldr	r3, [r7, #24]
 8113ee2:	2b00      	cmp	r3, #0
 8113ee4:	d110      	bne.n	8113f08 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8113ee6:	6a3b      	ldr	r3, [r7, #32]
 8113ee8:	b29a      	uxth	r2, r3
 8113eea:	f107 0310 	add.w	r3, r7, #16
 8113eee:	9301      	str	r3, [sp, #4]
 8113ef0:	69fb      	ldr	r3, [r7, #28]
 8113ef2:	9300      	str	r3, [sp, #0]
 8113ef4:	68bb      	ldr	r3, [r7, #8]
 8113ef6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8113ef8:	68f8      	ldr	r0, [r7, #12]
 8113efa:	f001 fc78 	bl	81157ee <xTaskCreate>
 8113efe:	4603      	mov	r3, r0
 8113f00:	2b01      	cmp	r3, #1
 8113f02:	d001      	beq.n	8113f08 <osThreadNew+0x11a>
            hTask = NULL;
 8113f04:	2300      	movs	r3, #0
 8113f06:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8113f08:	693b      	ldr	r3, [r7, #16]
}
 8113f0a:	4618      	mov	r0, r3
 8113f0c:	3728      	adds	r7, #40	; 0x28
 8113f0e:	46bd      	mov	sp, r7
 8113f10:	bd80      	pop	{r7, pc}

08113f12 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8113f12:	b580      	push	{r7, lr}
 8113f14:	b084      	sub	sp, #16
 8113f16:	af00      	add	r7, sp, #0
 8113f18:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8113f1a:	f3ef 8305 	mrs	r3, IPSR
 8113f1e:	60bb      	str	r3, [r7, #8]
  return(result);
 8113f20:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8113f22:	2b00      	cmp	r3, #0
 8113f24:	d003      	beq.n	8113f2e <osDelay+0x1c>
    stat = osErrorISR;
 8113f26:	f06f 0305 	mvn.w	r3, #5
 8113f2a:	60fb      	str	r3, [r7, #12]
 8113f2c:	e007      	b.n	8113f3e <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8113f2e:	2300      	movs	r3, #0
 8113f30:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8113f32:	687b      	ldr	r3, [r7, #4]
 8113f34:	2b00      	cmp	r3, #0
 8113f36:	d002      	beq.n	8113f3e <osDelay+0x2c>
      vTaskDelay(ticks);
 8113f38:	6878      	ldr	r0, [r7, #4]
 8113f3a:	f001 fd9d 	bl	8115a78 <vTaskDelay>
    }
  }

  return (stat);
 8113f3e:	68fb      	ldr	r3, [r7, #12]
}
 8113f40:	4618      	mov	r0, r3
 8113f42:	3710      	adds	r7, #16
 8113f44:	46bd      	mov	sp, r7
 8113f46:	bd80      	pop	{r7, pc}

08113f48 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8113f48:	b580      	push	{r7, lr}
 8113f4a:	b08a      	sub	sp, #40	; 0x28
 8113f4c:	af02      	add	r7, sp, #8
 8113f4e:	60f8      	str	r0, [r7, #12]
 8113f50:	60b9      	str	r1, [r7, #8]
 8113f52:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8113f54:	2300      	movs	r3, #0
 8113f56:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8113f58:	f3ef 8305 	mrs	r3, IPSR
 8113f5c:	613b      	str	r3, [r7, #16]
  return(result);
 8113f5e:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8113f60:	2b00      	cmp	r3, #0
 8113f62:	d15f      	bne.n	8114024 <osMessageQueueNew+0xdc>
 8113f64:	68fb      	ldr	r3, [r7, #12]
 8113f66:	2b00      	cmp	r3, #0
 8113f68:	d05c      	beq.n	8114024 <osMessageQueueNew+0xdc>
 8113f6a:	68bb      	ldr	r3, [r7, #8]
 8113f6c:	2b00      	cmp	r3, #0
 8113f6e:	d059      	beq.n	8114024 <osMessageQueueNew+0xdc>
    mem = -1;
 8113f70:	f04f 33ff 	mov.w	r3, #4294967295
 8113f74:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8113f76:	687b      	ldr	r3, [r7, #4]
 8113f78:	2b00      	cmp	r3, #0
 8113f7a:	d029      	beq.n	8113fd0 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8113f7c:	687b      	ldr	r3, [r7, #4]
 8113f7e:	689b      	ldr	r3, [r3, #8]
 8113f80:	2b00      	cmp	r3, #0
 8113f82:	d012      	beq.n	8113faa <osMessageQueueNew+0x62>
 8113f84:	687b      	ldr	r3, [r7, #4]
 8113f86:	68db      	ldr	r3, [r3, #12]
 8113f88:	2b4f      	cmp	r3, #79	; 0x4f
 8113f8a:	d90e      	bls.n	8113faa <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8113f8c:	687b      	ldr	r3, [r7, #4]
 8113f8e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8113f90:	2b00      	cmp	r3, #0
 8113f92:	d00a      	beq.n	8113faa <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8113f94:	687b      	ldr	r3, [r7, #4]
 8113f96:	695a      	ldr	r2, [r3, #20]
 8113f98:	68fb      	ldr	r3, [r7, #12]
 8113f9a:	68b9      	ldr	r1, [r7, #8]
 8113f9c:	fb01 f303 	mul.w	r3, r1, r3
 8113fa0:	429a      	cmp	r2, r3
 8113fa2:	d302      	bcc.n	8113faa <osMessageQueueNew+0x62>
        mem = 1;
 8113fa4:	2301      	movs	r3, #1
 8113fa6:	61bb      	str	r3, [r7, #24]
 8113fa8:	e014      	b.n	8113fd4 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8113faa:	687b      	ldr	r3, [r7, #4]
 8113fac:	689b      	ldr	r3, [r3, #8]
 8113fae:	2b00      	cmp	r3, #0
 8113fb0:	d110      	bne.n	8113fd4 <osMessageQueueNew+0x8c>
 8113fb2:	687b      	ldr	r3, [r7, #4]
 8113fb4:	68db      	ldr	r3, [r3, #12]
 8113fb6:	2b00      	cmp	r3, #0
 8113fb8:	d10c      	bne.n	8113fd4 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8113fba:	687b      	ldr	r3, [r7, #4]
 8113fbc:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8113fbe:	2b00      	cmp	r3, #0
 8113fc0:	d108      	bne.n	8113fd4 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8113fc2:	687b      	ldr	r3, [r7, #4]
 8113fc4:	695b      	ldr	r3, [r3, #20]
 8113fc6:	2b00      	cmp	r3, #0
 8113fc8:	d104      	bne.n	8113fd4 <osMessageQueueNew+0x8c>
          mem = 0;
 8113fca:	2300      	movs	r3, #0
 8113fcc:	61bb      	str	r3, [r7, #24]
 8113fce:	e001      	b.n	8113fd4 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8113fd0:	2300      	movs	r3, #0
 8113fd2:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8113fd4:	69bb      	ldr	r3, [r7, #24]
 8113fd6:	2b01      	cmp	r3, #1
 8113fd8:	d10b      	bne.n	8113ff2 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8113fda:	687b      	ldr	r3, [r7, #4]
 8113fdc:	691a      	ldr	r2, [r3, #16]
 8113fde:	687b      	ldr	r3, [r7, #4]
 8113fe0:	689b      	ldr	r3, [r3, #8]
 8113fe2:	2100      	movs	r1, #0
 8113fe4:	9100      	str	r1, [sp, #0]
 8113fe6:	68b9      	ldr	r1, [r7, #8]
 8113fe8:	68f8      	ldr	r0, [r7, #12]
 8113fea:	f000 fe65 	bl	8114cb8 <xQueueGenericCreateStatic>
 8113fee:	61f8      	str	r0, [r7, #28]
 8113ff0:	e008      	b.n	8114004 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8113ff2:	69bb      	ldr	r3, [r7, #24]
 8113ff4:	2b00      	cmp	r3, #0
 8113ff6:	d105      	bne.n	8114004 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8113ff8:	2200      	movs	r2, #0
 8113ffa:	68b9      	ldr	r1, [r7, #8]
 8113ffc:	68f8      	ldr	r0, [r7, #12]
 8113ffe:	f000 fed3 	bl	8114da8 <xQueueGenericCreate>
 8114002:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8114004:	69fb      	ldr	r3, [r7, #28]
 8114006:	2b00      	cmp	r3, #0
 8114008:	d00c      	beq.n	8114024 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 811400a:	687b      	ldr	r3, [r7, #4]
 811400c:	2b00      	cmp	r3, #0
 811400e:	d003      	beq.n	8114018 <osMessageQueueNew+0xd0>
        name = attr->name;
 8114010:	687b      	ldr	r3, [r7, #4]
 8114012:	681b      	ldr	r3, [r3, #0]
 8114014:	617b      	str	r3, [r7, #20]
 8114016:	e001      	b.n	811401c <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8114018:	2300      	movs	r3, #0
 811401a:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 811401c:	6979      	ldr	r1, [r7, #20]
 811401e:	69f8      	ldr	r0, [r7, #28]
 8114020:	f001 fb2a 	bl	8115678 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8114024:	69fb      	ldr	r3, [r7, #28]
}
 8114026:	4618      	mov	r0, r3
 8114028:	3720      	adds	r7, #32
 811402a:	46bd      	mov	sp, r7
 811402c:	bd80      	pop	{r7, pc}
	...

08114030 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8114030:	b580      	push	{r7, lr}
 8114032:	b088      	sub	sp, #32
 8114034:	af00      	add	r7, sp, #0
 8114036:	60f8      	str	r0, [r7, #12]
 8114038:	60b9      	str	r1, [r7, #8]
 811403a:	603b      	str	r3, [r7, #0]
 811403c:	4613      	mov	r3, r2
 811403e:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8114040:	68fb      	ldr	r3, [r7, #12]
 8114042:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8114044:	2300      	movs	r3, #0
 8114046:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8114048:	f3ef 8305 	mrs	r3, IPSR
 811404c:	617b      	str	r3, [r7, #20]
  return(result);
 811404e:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8114050:	2b00      	cmp	r3, #0
 8114052:	d028      	beq.n	81140a6 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8114054:	69bb      	ldr	r3, [r7, #24]
 8114056:	2b00      	cmp	r3, #0
 8114058:	d005      	beq.n	8114066 <osMessageQueuePut+0x36>
 811405a:	68bb      	ldr	r3, [r7, #8]
 811405c:	2b00      	cmp	r3, #0
 811405e:	d002      	beq.n	8114066 <osMessageQueuePut+0x36>
 8114060:	683b      	ldr	r3, [r7, #0]
 8114062:	2b00      	cmp	r3, #0
 8114064:	d003      	beq.n	811406e <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8114066:	f06f 0303 	mvn.w	r3, #3
 811406a:	61fb      	str	r3, [r7, #28]
 811406c:	e038      	b.n	81140e0 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 811406e:	2300      	movs	r3, #0
 8114070:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8114072:	f107 0210 	add.w	r2, r7, #16
 8114076:	2300      	movs	r3, #0
 8114078:	68b9      	ldr	r1, [r7, #8]
 811407a:	69b8      	ldr	r0, [r7, #24]
 811407c:	f000 fff0 	bl	8115060 <xQueueGenericSendFromISR>
 8114080:	4603      	mov	r3, r0
 8114082:	2b01      	cmp	r3, #1
 8114084:	d003      	beq.n	811408e <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8114086:	f06f 0302 	mvn.w	r3, #2
 811408a:	61fb      	str	r3, [r7, #28]
 811408c:	e028      	b.n	81140e0 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 811408e:	693b      	ldr	r3, [r7, #16]
 8114090:	2b00      	cmp	r3, #0
 8114092:	d025      	beq.n	81140e0 <osMessageQueuePut+0xb0>
 8114094:	4b15      	ldr	r3, [pc, #84]	; (81140ec <osMessageQueuePut+0xbc>)
 8114096:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 811409a:	601a      	str	r2, [r3, #0]
 811409c:	f3bf 8f4f 	dsb	sy
 81140a0:	f3bf 8f6f 	isb	sy
 81140a4:	e01c      	b.n	81140e0 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 81140a6:	69bb      	ldr	r3, [r7, #24]
 81140a8:	2b00      	cmp	r3, #0
 81140aa:	d002      	beq.n	81140b2 <osMessageQueuePut+0x82>
 81140ac:	68bb      	ldr	r3, [r7, #8]
 81140ae:	2b00      	cmp	r3, #0
 81140b0:	d103      	bne.n	81140ba <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 81140b2:	f06f 0303 	mvn.w	r3, #3
 81140b6:	61fb      	str	r3, [r7, #28]
 81140b8:	e012      	b.n	81140e0 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 81140ba:	2300      	movs	r3, #0
 81140bc:	683a      	ldr	r2, [r7, #0]
 81140be:	68b9      	ldr	r1, [r7, #8]
 81140c0:	69b8      	ldr	r0, [r7, #24]
 81140c2:	f000 fecf 	bl	8114e64 <xQueueGenericSend>
 81140c6:	4603      	mov	r3, r0
 81140c8:	2b01      	cmp	r3, #1
 81140ca:	d009      	beq.n	81140e0 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 81140cc:	683b      	ldr	r3, [r7, #0]
 81140ce:	2b00      	cmp	r3, #0
 81140d0:	d003      	beq.n	81140da <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 81140d2:	f06f 0301 	mvn.w	r3, #1
 81140d6:	61fb      	str	r3, [r7, #28]
 81140d8:	e002      	b.n	81140e0 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 81140da:	f06f 0302 	mvn.w	r3, #2
 81140de:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 81140e0:	69fb      	ldr	r3, [r7, #28]
}
 81140e2:	4618      	mov	r0, r3
 81140e4:	3720      	adds	r7, #32
 81140e6:	46bd      	mov	sp, r7
 81140e8:	bd80      	pop	{r7, pc}
 81140ea:	bf00      	nop
 81140ec:	e000ed04 	.word	0xe000ed04

081140f0 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 81140f0:	b580      	push	{r7, lr}
 81140f2:	b088      	sub	sp, #32
 81140f4:	af00      	add	r7, sp, #0
 81140f6:	60f8      	str	r0, [r7, #12]
 81140f8:	60b9      	str	r1, [r7, #8]
 81140fa:	607a      	str	r2, [r7, #4]
 81140fc:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 81140fe:	68fb      	ldr	r3, [r7, #12]
 8114100:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8114102:	2300      	movs	r3, #0
 8114104:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8114106:	f3ef 8305 	mrs	r3, IPSR
 811410a:	617b      	str	r3, [r7, #20]
  return(result);
 811410c:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 811410e:	2b00      	cmp	r3, #0
 8114110:	d028      	beq.n	8114164 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8114112:	69bb      	ldr	r3, [r7, #24]
 8114114:	2b00      	cmp	r3, #0
 8114116:	d005      	beq.n	8114124 <osMessageQueueGet+0x34>
 8114118:	68bb      	ldr	r3, [r7, #8]
 811411a:	2b00      	cmp	r3, #0
 811411c:	d002      	beq.n	8114124 <osMessageQueueGet+0x34>
 811411e:	683b      	ldr	r3, [r7, #0]
 8114120:	2b00      	cmp	r3, #0
 8114122:	d003      	beq.n	811412c <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8114124:	f06f 0303 	mvn.w	r3, #3
 8114128:	61fb      	str	r3, [r7, #28]
 811412a:	e037      	b.n	811419c <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 811412c:	2300      	movs	r3, #0
 811412e:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8114130:	f107 0310 	add.w	r3, r7, #16
 8114134:	461a      	mov	r2, r3
 8114136:	68b9      	ldr	r1, [r7, #8]
 8114138:	69b8      	ldr	r0, [r7, #24]
 811413a:	f001 f90d 	bl	8115358 <xQueueReceiveFromISR>
 811413e:	4603      	mov	r3, r0
 8114140:	2b01      	cmp	r3, #1
 8114142:	d003      	beq.n	811414c <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8114144:	f06f 0302 	mvn.w	r3, #2
 8114148:	61fb      	str	r3, [r7, #28]
 811414a:	e027      	b.n	811419c <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 811414c:	693b      	ldr	r3, [r7, #16]
 811414e:	2b00      	cmp	r3, #0
 8114150:	d024      	beq.n	811419c <osMessageQueueGet+0xac>
 8114152:	4b15      	ldr	r3, [pc, #84]	; (81141a8 <osMessageQueueGet+0xb8>)
 8114154:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8114158:	601a      	str	r2, [r3, #0]
 811415a:	f3bf 8f4f 	dsb	sy
 811415e:	f3bf 8f6f 	isb	sy
 8114162:	e01b      	b.n	811419c <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8114164:	69bb      	ldr	r3, [r7, #24]
 8114166:	2b00      	cmp	r3, #0
 8114168:	d002      	beq.n	8114170 <osMessageQueueGet+0x80>
 811416a:	68bb      	ldr	r3, [r7, #8]
 811416c:	2b00      	cmp	r3, #0
 811416e:	d103      	bne.n	8114178 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8114170:	f06f 0303 	mvn.w	r3, #3
 8114174:	61fb      	str	r3, [r7, #28]
 8114176:	e011      	b.n	811419c <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8114178:	683a      	ldr	r2, [r7, #0]
 811417a:	68b9      	ldr	r1, [r7, #8]
 811417c:	69b8      	ldr	r0, [r7, #24]
 811417e:	f001 f80b 	bl	8115198 <xQueueReceive>
 8114182:	4603      	mov	r3, r0
 8114184:	2b01      	cmp	r3, #1
 8114186:	d009      	beq.n	811419c <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8114188:	683b      	ldr	r3, [r7, #0]
 811418a:	2b00      	cmp	r3, #0
 811418c:	d003      	beq.n	8114196 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 811418e:	f06f 0301 	mvn.w	r3, #1
 8114192:	61fb      	str	r3, [r7, #28]
 8114194:	e002      	b.n	811419c <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8114196:	f06f 0302 	mvn.w	r3, #2
 811419a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 811419c:	69fb      	ldr	r3, [r7, #28]
}
 811419e:	4618      	mov	r0, r3
 81141a0:	3720      	adds	r7, #32
 81141a2:	46bd      	mov	sp, r7
 81141a4:	bd80      	pop	{r7, pc}
 81141a6:	bf00      	nop
 81141a8:	e000ed04 	.word	0xe000ed04

081141ac <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 81141ac:	b480      	push	{r7}
 81141ae:	b085      	sub	sp, #20
 81141b0:	af00      	add	r7, sp, #0
 81141b2:	60f8      	str	r0, [r7, #12]
 81141b4:	60b9      	str	r1, [r7, #8]
 81141b6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 81141b8:	68fb      	ldr	r3, [r7, #12]
 81141ba:	4a07      	ldr	r2, [pc, #28]	; (81141d8 <vApplicationGetIdleTaskMemory+0x2c>)
 81141bc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 81141be:	68bb      	ldr	r3, [r7, #8]
 81141c0:	4a06      	ldr	r2, [pc, #24]	; (81141dc <vApplicationGetIdleTaskMemory+0x30>)
 81141c2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 81141c4:	687b      	ldr	r3, [r7, #4]
 81141c6:	2280      	movs	r2, #128	; 0x80
 81141c8:	601a      	str	r2, [r3, #0]
}
 81141ca:	bf00      	nop
 81141cc:	3714      	adds	r7, #20
 81141ce:	46bd      	mov	sp, r7
 81141d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81141d4:	4770      	bx	lr
 81141d6:	bf00      	nop
 81141d8:	10000228 	.word	0x10000228
 81141dc:	10000284 	.word	0x10000284

081141e0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 81141e0:	b480      	push	{r7}
 81141e2:	b085      	sub	sp, #20
 81141e4:	af00      	add	r7, sp, #0
 81141e6:	60f8      	str	r0, [r7, #12]
 81141e8:	60b9      	str	r1, [r7, #8]
 81141ea:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 81141ec:	68fb      	ldr	r3, [r7, #12]
 81141ee:	4a07      	ldr	r2, [pc, #28]	; (811420c <vApplicationGetTimerTaskMemory+0x2c>)
 81141f0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 81141f2:	68bb      	ldr	r3, [r7, #8]
 81141f4:	4a06      	ldr	r2, [pc, #24]	; (8114210 <vApplicationGetTimerTaskMemory+0x30>)
 81141f6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 81141f8:	687b      	ldr	r3, [r7, #4]
 81141fa:	f44f 7280 	mov.w	r2, #256	; 0x100
 81141fe:	601a      	str	r2, [r3, #0]
}
 8114200:	bf00      	nop
 8114202:	3714      	adds	r7, #20
 8114204:	46bd      	mov	sp, r7
 8114206:	f85d 7b04 	ldr.w	r7, [sp], #4
 811420a:	4770      	bx	lr
 811420c:	10000484 	.word	0x10000484
 8114210:	100004e0 	.word	0x100004e0

08114214 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8114214:	b580      	push	{r7, lr}
 8114216:	b08a      	sub	sp, #40	; 0x28
 8114218:	af00      	add	r7, sp, #0
 811421a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 811421c:	2300      	movs	r3, #0
 811421e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8114220:	f001 fcc4 	bl	8115bac <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8114224:	4b5b      	ldr	r3, [pc, #364]	; (8114394 <pvPortMalloc+0x180>)
 8114226:	681b      	ldr	r3, [r3, #0]
 8114228:	2b00      	cmp	r3, #0
 811422a:	d101      	bne.n	8114230 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 811422c:	f000 f920 	bl	8114470 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8114230:	4b59      	ldr	r3, [pc, #356]	; (8114398 <pvPortMalloc+0x184>)
 8114232:	681a      	ldr	r2, [r3, #0]
 8114234:	687b      	ldr	r3, [r7, #4]
 8114236:	4013      	ands	r3, r2
 8114238:	2b00      	cmp	r3, #0
 811423a:	f040 8093 	bne.w	8114364 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 811423e:	687b      	ldr	r3, [r7, #4]
 8114240:	2b00      	cmp	r3, #0
 8114242:	d01d      	beq.n	8114280 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8114244:	2208      	movs	r2, #8
 8114246:	687b      	ldr	r3, [r7, #4]
 8114248:	4413      	add	r3, r2
 811424a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 811424c:	687b      	ldr	r3, [r7, #4]
 811424e:	f003 0307 	and.w	r3, r3, #7
 8114252:	2b00      	cmp	r3, #0
 8114254:	d014      	beq.n	8114280 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8114256:	687b      	ldr	r3, [r7, #4]
 8114258:	f023 0307 	bic.w	r3, r3, #7
 811425c:	3308      	adds	r3, #8
 811425e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8114260:	687b      	ldr	r3, [r7, #4]
 8114262:	f003 0307 	and.w	r3, r3, #7
 8114266:	2b00      	cmp	r3, #0
 8114268:	d00a      	beq.n	8114280 <pvPortMalloc+0x6c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 811426a:	f04f 0350 	mov.w	r3, #80	; 0x50
 811426e:	f383 8811 	msr	BASEPRI, r3
 8114272:	f3bf 8f6f 	isb	sy
 8114276:	f3bf 8f4f 	dsb	sy
 811427a:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 811427c:	bf00      	nop
 811427e:	e7fe      	b.n	811427e <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8114280:	687b      	ldr	r3, [r7, #4]
 8114282:	2b00      	cmp	r3, #0
 8114284:	d06e      	beq.n	8114364 <pvPortMalloc+0x150>
 8114286:	4b45      	ldr	r3, [pc, #276]	; (811439c <pvPortMalloc+0x188>)
 8114288:	681b      	ldr	r3, [r3, #0]
 811428a:	687a      	ldr	r2, [r7, #4]
 811428c:	429a      	cmp	r2, r3
 811428e:	d869      	bhi.n	8114364 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8114290:	4b43      	ldr	r3, [pc, #268]	; (81143a0 <pvPortMalloc+0x18c>)
 8114292:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8114294:	4b42      	ldr	r3, [pc, #264]	; (81143a0 <pvPortMalloc+0x18c>)
 8114296:	681b      	ldr	r3, [r3, #0]
 8114298:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 811429a:	e004      	b.n	81142a6 <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 811429c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 811429e:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 81142a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81142a2:	681b      	ldr	r3, [r3, #0]
 81142a4:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 81142a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81142a8:	685b      	ldr	r3, [r3, #4]
 81142aa:	687a      	ldr	r2, [r7, #4]
 81142ac:	429a      	cmp	r2, r3
 81142ae:	d903      	bls.n	81142b8 <pvPortMalloc+0xa4>
 81142b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81142b2:	681b      	ldr	r3, [r3, #0]
 81142b4:	2b00      	cmp	r3, #0
 81142b6:	d1f1      	bne.n	811429c <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 81142b8:	4b36      	ldr	r3, [pc, #216]	; (8114394 <pvPortMalloc+0x180>)
 81142ba:	681b      	ldr	r3, [r3, #0]
 81142bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 81142be:	429a      	cmp	r2, r3
 81142c0:	d050      	beq.n	8114364 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 81142c2:	6a3b      	ldr	r3, [r7, #32]
 81142c4:	681b      	ldr	r3, [r3, #0]
 81142c6:	2208      	movs	r2, #8
 81142c8:	4413      	add	r3, r2
 81142ca:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 81142cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81142ce:	681a      	ldr	r2, [r3, #0]
 81142d0:	6a3b      	ldr	r3, [r7, #32]
 81142d2:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 81142d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81142d6:	685a      	ldr	r2, [r3, #4]
 81142d8:	687b      	ldr	r3, [r7, #4]
 81142da:	1ad2      	subs	r2, r2, r3
 81142dc:	2308      	movs	r3, #8
 81142de:	005b      	lsls	r3, r3, #1
 81142e0:	429a      	cmp	r2, r3
 81142e2:	d91f      	bls.n	8114324 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 81142e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 81142e6:	687b      	ldr	r3, [r7, #4]
 81142e8:	4413      	add	r3, r2
 81142ea:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 81142ec:	69bb      	ldr	r3, [r7, #24]
 81142ee:	f003 0307 	and.w	r3, r3, #7
 81142f2:	2b00      	cmp	r3, #0
 81142f4:	d00a      	beq.n	811430c <pvPortMalloc+0xf8>
	__asm volatile
 81142f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 81142fa:	f383 8811 	msr	BASEPRI, r3
 81142fe:	f3bf 8f6f 	isb	sy
 8114302:	f3bf 8f4f 	dsb	sy
 8114306:	613b      	str	r3, [r7, #16]
}
 8114308:	bf00      	nop
 811430a:	e7fe      	b.n	811430a <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 811430c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 811430e:	685a      	ldr	r2, [r3, #4]
 8114310:	687b      	ldr	r3, [r7, #4]
 8114312:	1ad2      	subs	r2, r2, r3
 8114314:	69bb      	ldr	r3, [r7, #24]
 8114316:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8114318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 811431a:	687a      	ldr	r2, [r7, #4]
 811431c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 811431e:	69b8      	ldr	r0, [r7, #24]
 8114320:	f000 f908 	bl	8114534 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8114324:	4b1d      	ldr	r3, [pc, #116]	; (811439c <pvPortMalloc+0x188>)
 8114326:	681a      	ldr	r2, [r3, #0]
 8114328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 811432a:	685b      	ldr	r3, [r3, #4]
 811432c:	1ad3      	subs	r3, r2, r3
 811432e:	4a1b      	ldr	r2, [pc, #108]	; (811439c <pvPortMalloc+0x188>)
 8114330:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8114332:	4b1a      	ldr	r3, [pc, #104]	; (811439c <pvPortMalloc+0x188>)
 8114334:	681a      	ldr	r2, [r3, #0]
 8114336:	4b1b      	ldr	r3, [pc, #108]	; (81143a4 <pvPortMalloc+0x190>)
 8114338:	681b      	ldr	r3, [r3, #0]
 811433a:	429a      	cmp	r2, r3
 811433c:	d203      	bcs.n	8114346 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 811433e:	4b17      	ldr	r3, [pc, #92]	; (811439c <pvPortMalloc+0x188>)
 8114340:	681b      	ldr	r3, [r3, #0]
 8114342:	4a18      	ldr	r2, [pc, #96]	; (81143a4 <pvPortMalloc+0x190>)
 8114344:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8114346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8114348:	685a      	ldr	r2, [r3, #4]
 811434a:	4b13      	ldr	r3, [pc, #76]	; (8114398 <pvPortMalloc+0x184>)
 811434c:	681b      	ldr	r3, [r3, #0]
 811434e:	431a      	orrs	r2, r3
 8114350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8114352:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8114354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8114356:	2200      	movs	r2, #0
 8114358:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 811435a:	4b13      	ldr	r3, [pc, #76]	; (81143a8 <pvPortMalloc+0x194>)
 811435c:	681b      	ldr	r3, [r3, #0]
 811435e:	3301      	adds	r3, #1
 8114360:	4a11      	ldr	r2, [pc, #68]	; (81143a8 <pvPortMalloc+0x194>)
 8114362:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8114364:	f001 fc30 	bl	8115bc8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8114368:	69fb      	ldr	r3, [r7, #28]
 811436a:	f003 0307 	and.w	r3, r3, #7
 811436e:	2b00      	cmp	r3, #0
 8114370:	d00a      	beq.n	8114388 <pvPortMalloc+0x174>
	__asm volatile
 8114372:	f04f 0350 	mov.w	r3, #80	; 0x50
 8114376:	f383 8811 	msr	BASEPRI, r3
 811437a:	f3bf 8f6f 	isb	sy
 811437e:	f3bf 8f4f 	dsb	sy
 8114382:	60fb      	str	r3, [r7, #12]
}
 8114384:	bf00      	nop
 8114386:	e7fe      	b.n	8114386 <pvPortMalloc+0x172>
	return pvReturn;
 8114388:	69fb      	ldr	r3, [r7, #28]
}
 811438a:	4618      	mov	r0, r3
 811438c:	3728      	adds	r7, #40	; 0x28
 811438e:	46bd      	mov	sp, r7
 8114390:	bd80      	pop	{r7, pc}
 8114392:	bf00      	nop
 8114394:	100044e8 	.word	0x100044e8
 8114398:	100044fc 	.word	0x100044fc
 811439c:	100044ec 	.word	0x100044ec
 81143a0:	100044e0 	.word	0x100044e0
 81143a4:	100044f0 	.word	0x100044f0
 81143a8:	100044f4 	.word	0x100044f4

081143ac <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 81143ac:	b580      	push	{r7, lr}
 81143ae:	b086      	sub	sp, #24
 81143b0:	af00      	add	r7, sp, #0
 81143b2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 81143b4:	687b      	ldr	r3, [r7, #4]
 81143b6:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 81143b8:	687b      	ldr	r3, [r7, #4]
 81143ba:	2b00      	cmp	r3, #0
 81143bc:	d04d      	beq.n	811445a <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 81143be:	2308      	movs	r3, #8
 81143c0:	425b      	negs	r3, r3
 81143c2:	697a      	ldr	r2, [r7, #20]
 81143c4:	4413      	add	r3, r2
 81143c6:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 81143c8:	697b      	ldr	r3, [r7, #20]
 81143ca:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 81143cc:	693b      	ldr	r3, [r7, #16]
 81143ce:	685a      	ldr	r2, [r3, #4]
 81143d0:	4b24      	ldr	r3, [pc, #144]	; (8114464 <vPortFree+0xb8>)
 81143d2:	681b      	ldr	r3, [r3, #0]
 81143d4:	4013      	ands	r3, r2
 81143d6:	2b00      	cmp	r3, #0
 81143d8:	d10a      	bne.n	81143f0 <vPortFree+0x44>
	__asm volatile
 81143da:	f04f 0350 	mov.w	r3, #80	; 0x50
 81143de:	f383 8811 	msr	BASEPRI, r3
 81143e2:	f3bf 8f6f 	isb	sy
 81143e6:	f3bf 8f4f 	dsb	sy
 81143ea:	60fb      	str	r3, [r7, #12]
}
 81143ec:	bf00      	nop
 81143ee:	e7fe      	b.n	81143ee <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 81143f0:	693b      	ldr	r3, [r7, #16]
 81143f2:	681b      	ldr	r3, [r3, #0]
 81143f4:	2b00      	cmp	r3, #0
 81143f6:	d00a      	beq.n	811440e <vPortFree+0x62>
	__asm volatile
 81143f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 81143fc:	f383 8811 	msr	BASEPRI, r3
 8114400:	f3bf 8f6f 	isb	sy
 8114404:	f3bf 8f4f 	dsb	sy
 8114408:	60bb      	str	r3, [r7, #8]
}
 811440a:	bf00      	nop
 811440c:	e7fe      	b.n	811440c <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 811440e:	693b      	ldr	r3, [r7, #16]
 8114410:	685a      	ldr	r2, [r3, #4]
 8114412:	4b14      	ldr	r3, [pc, #80]	; (8114464 <vPortFree+0xb8>)
 8114414:	681b      	ldr	r3, [r3, #0]
 8114416:	4013      	ands	r3, r2
 8114418:	2b00      	cmp	r3, #0
 811441a:	d01e      	beq.n	811445a <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 811441c:	693b      	ldr	r3, [r7, #16]
 811441e:	681b      	ldr	r3, [r3, #0]
 8114420:	2b00      	cmp	r3, #0
 8114422:	d11a      	bne.n	811445a <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8114424:	693b      	ldr	r3, [r7, #16]
 8114426:	685a      	ldr	r2, [r3, #4]
 8114428:	4b0e      	ldr	r3, [pc, #56]	; (8114464 <vPortFree+0xb8>)
 811442a:	681b      	ldr	r3, [r3, #0]
 811442c:	43db      	mvns	r3, r3
 811442e:	401a      	ands	r2, r3
 8114430:	693b      	ldr	r3, [r7, #16]
 8114432:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8114434:	f001 fbba 	bl	8115bac <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8114438:	693b      	ldr	r3, [r7, #16]
 811443a:	685a      	ldr	r2, [r3, #4]
 811443c:	4b0a      	ldr	r3, [pc, #40]	; (8114468 <vPortFree+0xbc>)
 811443e:	681b      	ldr	r3, [r3, #0]
 8114440:	4413      	add	r3, r2
 8114442:	4a09      	ldr	r2, [pc, #36]	; (8114468 <vPortFree+0xbc>)
 8114444:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8114446:	6938      	ldr	r0, [r7, #16]
 8114448:	f000 f874 	bl	8114534 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 811444c:	4b07      	ldr	r3, [pc, #28]	; (811446c <vPortFree+0xc0>)
 811444e:	681b      	ldr	r3, [r3, #0]
 8114450:	3301      	adds	r3, #1
 8114452:	4a06      	ldr	r2, [pc, #24]	; (811446c <vPortFree+0xc0>)
 8114454:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8114456:	f001 fbb7 	bl	8115bc8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 811445a:	bf00      	nop
 811445c:	3718      	adds	r7, #24
 811445e:	46bd      	mov	sp, r7
 8114460:	bd80      	pop	{r7, pc}
 8114462:	bf00      	nop
 8114464:	100044fc 	.word	0x100044fc
 8114468:	100044ec 	.word	0x100044ec
 811446c:	100044f8 	.word	0x100044f8

08114470 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8114470:	b480      	push	{r7}
 8114472:	b085      	sub	sp, #20
 8114474:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8114476:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 811447a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 811447c:	4b27      	ldr	r3, [pc, #156]	; (811451c <prvHeapInit+0xac>)
 811447e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8114480:	68fb      	ldr	r3, [r7, #12]
 8114482:	f003 0307 	and.w	r3, r3, #7
 8114486:	2b00      	cmp	r3, #0
 8114488:	d00c      	beq.n	81144a4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 811448a:	68fb      	ldr	r3, [r7, #12]
 811448c:	3307      	adds	r3, #7
 811448e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8114490:	68fb      	ldr	r3, [r7, #12]
 8114492:	f023 0307 	bic.w	r3, r3, #7
 8114496:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8114498:	68ba      	ldr	r2, [r7, #8]
 811449a:	68fb      	ldr	r3, [r7, #12]
 811449c:	1ad3      	subs	r3, r2, r3
 811449e:	4a1f      	ldr	r2, [pc, #124]	; (811451c <prvHeapInit+0xac>)
 81144a0:	4413      	add	r3, r2
 81144a2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 81144a4:	68fb      	ldr	r3, [r7, #12]
 81144a6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 81144a8:	4a1d      	ldr	r2, [pc, #116]	; (8114520 <prvHeapInit+0xb0>)
 81144aa:	687b      	ldr	r3, [r7, #4]
 81144ac:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 81144ae:	4b1c      	ldr	r3, [pc, #112]	; (8114520 <prvHeapInit+0xb0>)
 81144b0:	2200      	movs	r2, #0
 81144b2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 81144b4:	687b      	ldr	r3, [r7, #4]
 81144b6:	68ba      	ldr	r2, [r7, #8]
 81144b8:	4413      	add	r3, r2
 81144ba:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 81144bc:	2208      	movs	r2, #8
 81144be:	68fb      	ldr	r3, [r7, #12]
 81144c0:	1a9b      	subs	r3, r3, r2
 81144c2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 81144c4:	68fb      	ldr	r3, [r7, #12]
 81144c6:	f023 0307 	bic.w	r3, r3, #7
 81144ca:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 81144cc:	68fb      	ldr	r3, [r7, #12]
 81144ce:	4a15      	ldr	r2, [pc, #84]	; (8114524 <prvHeapInit+0xb4>)
 81144d0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 81144d2:	4b14      	ldr	r3, [pc, #80]	; (8114524 <prvHeapInit+0xb4>)
 81144d4:	681b      	ldr	r3, [r3, #0]
 81144d6:	2200      	movs	r2, #0
 81144d8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 81144da:	4b12      	ldr	r3, [pc, #72]	; (8114524 <prvHeapInit+0xb4>)
 81144dc:	681b      	ldr	r3, [r3, #0]
 81144de:	2200      	movs	r2, #0
 81144e0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 81144e2:	687b      	ldr	r3, [r7, #4]
 81144e4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 81144e6:	683b      	ldr	r3, [r7, #0]
 81144e8:	68fa      	ldr	r2, [r7, #12]
 81144ea:	1ad2      	subs	r2, r2, r3
 81144ec:	683b      	ldr	r3, [r7, #0]
 81144ee:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 81144f0:	4b0c      	ldr	r3, [pc, #48]	; (8114524 <prvHeapInit+0xb4>)
 81144f2:	681a      	ldr	r2, [r3, #0]
 81144f4:	683b      	ldr	r3, [r7, #0]
 81144f6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 81144f8:	683b      	ldr	r3, [r7, #0]
 81144fa:	685b      	ldr	r3, [r3, #4]
 81144fc:	4a0a      	ldr	r2, [pc, #40]	; (8114528 <prvHeapInit+0xb8>)
 81144fe:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8114500:	683b      	ldr	r3, [r7, #0]
 8114502:	685b      	ldr	r3, [r3, #4]
 8114504:	4a09      	ldr	r2, [pc, #36]	; (811452c <prvHeapInit+0xbc>)
 8114506:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8114508:	4b09      	ldr	r3, [pc, #36]	; (8114530 <prvHeapInit+0xc0>)
 811450a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 811450e:	601a      	str	r2, [r3, #0]
}
 8114510:	bf00      	nop
 8114512:	3714      	adds	r7, #20
 8114514:	46bd      	mov	sp, r7
 8114516:	f85d 7b04 	ldr.w	r7, [sp], #4
 811451a:	4770      	bx	lr
 811451c:	100008e0 	.word	0x100008e0
 8114520:	100044e0 	.word	0x100044e0
 8114524:	100044e8 	.word	0x100044e8
 8114528:	100044f0 	.word	0x100044f0
 811452c:	100044ec 	.word	0x100044ec
 8114530:	100044fc 	.word	0x100044fc

08114534 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8114534:	b480      	push	{r7}
 8114536:	b085      	sub	sp, #20
 8114538:	af00      	add	r7, sp, #0
 811453a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 811453c:	4b28      	ldr	r3, [pc, #160]	; (81145e0 <prvInsertBlockIntoFreeList+0xac>)
 811453e:	60fb      	str	r3, [r7, #12]
 8114540:	e002      	b.n	8114548 <prvInsertBlockIntoFreeList+0x14>
 8114542:	68fb      	ldr	r3, [r7, #12]
 8114544:	681b      	ldr	r3, [r3, #0]
 8114546:	60fb      	str	r3, [r7, #12]
 8114548:	68fb      	ldr	r3, [r7, #12]
 811454a:	681b      	ldr	r3, [r3, #0]
 811454c:	687a      	ldr	r2, [r7, #4]
 811454e:	429a      	cmp	r2, r3
 8114550:	d8f7      	bhi.n	8114542 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8114552:	68fb      	ldr	r3, [r7, #12]
 8114554:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8114556:	68fb      	ldr	r3, [r7, #12]
 8114558:	685b      	ldr	r3, [r3, #4]
 811455a:	68ba      	ldr	r2, [r7, #8]
 811455c:	4413      	add	r3, r2
 811455e:	687a      	ldr	r2, [r7, #4]
 8114560:	429a      	cmp	r2, r3
 8114562:	d108      	bne.n	8114576 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8114564:	68fb      	ldr	r3, [r7, #12]
 8114566:	685a      	ldr	r2, [r3, #4]
 8114568:	687b      	ldr	r3, [r7, #4]
 811456a:	685b      	ldr	r3, [r3, #4]
 811456c:	441a      	add	r2, r3
 811456e:	68fb      	ldr	r3, [r7, #12]
 8114570:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8114572:	68fb      	ldr	r3, [r7, #12]
 8114574:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8114576:	687b      	ldr	r3, [r7, #4]
 8114578:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 811457a:	687b      	ldr	r3, [r7, #4]
 811457c:	685b      	ldr	r3, [r3, #4]
 811457e:	68ba      	ldr	r2, [r7, #8]
 8114580:	441a      	add	r2, r3
 8114582:	68fb      	ldr	r3, [r7, #12]
 8114584:	681b      	ldr	r3, [r3, #0]
 8114586:	429a      	cmp	r2, r3
 8114588:	d118      	bne.n	81145bc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 811458a:	68fb      	ldr	r3, [r7, #12]
 811458c:	681a      	ldr	r2, [r3, #0]
 811458e:	4b15      	ldr	r3, [pc, #84]	; (81145e4 <prvInsertBlockIntoFreeList+0xb0>)
 8114590:	681b      	ldr	r3, [r3, #0]
 8114592:	429a      	cmp	r2, r3
 8114594:	d00d      	beq.n	81145b2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8114596:	687b      	ldr	r3, [r7, #4]
 8114598:	685a      	ldr	r2, [r3, #4]
 811459a:	68fb      	ldr	r3, [r7, #12]
 811459c:	681b      	ldr	r3, [r3, #0]
 811459e:	685b      	ldr	r3, [r3, #4]
 81145a0:	441a      	add	r2, r3
 81145a2:	687b      	ldr	r3, [r7, #4]
 81145a4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 81145a6:	68fb      	ldr	r3, [r7, #12]
 81145a8:	681b      	ldr	r3, [r3, #0]
 81145aa:	681a      	ldr	r2, [r3, #0]
 81145ac:	687b      	ldr	r3, [r7, #4]
 81145ae:	601a      	str	r2, [r3, #0]
 81145b0:	e008      	b.n	81145c4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 81145b2:	4b0c      	ldr	r3, [pc, #48]	; (81145e4 <prvInsertBlockIntoFreeList+0xb0>)
 81145b4:	681a      	ldr	r2, [r3, #0]
 81145b6:	687b      	ldr	r3, [r7, #4]
 81145b8:	601a      	str	r2, [r3, #0]
 81145ba:	e003      	b.n	81145c4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 81145bc:	68fb      	ldr	r3, [r7, #12]
 81145be:	681a      	ldr	r2, [r3, #0]
 81145c0:	687b      	ldr	r3, [r7, #4]
 81145c2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 81145c4:	68fa      	ldr	r2, [r7, #12]
 81145c6:	687b      	ldr	r3, [r7, #4]
 81145c8:	429a      	cmp	r2, r3
 81145ca:	d002      	beq.n	81145d2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 81145cc:	68fb      	ldr	r3, [r7, #12]
 81145ce:	687a      	ldr	r2, [r7, #4]
 81145d0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 81145d2:	bf00      	nop
 81145d4:	3714      	adds	r7, #20
 81145d6:	46bd      	mov	sp, r7
 81145d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81145dc:	4770      	bx	lr
 81145de:	bf00      	nop
 81145e0:	100044e0 	.word	0x100044e0
 81145e4:	100044e8 	.word	0x100044e8

081145e8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 81145e8:	b480      	push	{r7}
 81145ea:	b083      	sub	sp, #12
 81145ec:	af00      	add	r7, sp, #0
 81145ee:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 81145f0:	687b      	ldr	r3, [r7, #4]
 81145f2:	f103 0208 	add.w	r2, r3, #8
 81145f6:	687b      	ldr	r3, [r7, #4]
 81145f8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 81145fa:	687b      	ldr	r3, [r7, #4]
 81145fc:	f04f 32ff 	mov.w	r2, #4294967295
 8114600:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8114602:	687b      	ldr	r3, [r7, #4]
 8114604:	f103 0208 	add.w	r2, r3, #8
 8114608:	687b      	ldr	r3, [r7, #4]
 811460a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 811460c:	687b      	ldr	r3, [r7, #4]
 811460e:	f103 0208 	add.w	r2, r3, #8
 8114612:	687b      	ldr	r3, [r7, #4]
 8114614:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8114616:	687b      	ldr	r3, [r7, #4]
 8114618:	2200      	movs	r2, #0
 811461a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 811461c:	bf00      	nop
 811461e:	370c      	adds	r7, #12
 8114620:	46bd      	mov	sp, r7
 8114622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8114626:	4770      	bx	lr

08114628 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8114628:	b480      	push	{r7}
 811462a:	b083      	sub	sp, #12
 811462c:	af00      	add	r7, sp, #0
 811462e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8114630:	687b      	ldr	r3, [r7, #4]
 8114632:	2200      	movs	r2, #0
 8114634:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8114636:	bf00      	nop
 8114638:	370c      	adds	r7, #12
 811463a:	46bd      	mov	sp, r7
 811463c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8114640:	4770      	bx	lr

08114642 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8114642:	b480      	push	{r7}
 8114644:	b085      	sub	sp, #20
 8114646:	af00      	add	r7, sp, #0
 8114648:	6078      	str	r0, [r7, #4]
 811464a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 811464c:	687b      	ldr	r3, [r7, #4]
 811464e:	685b      	ldr	r3, [r3, #4]
 8114650:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8114652:	683b      	ldr	r3, [r7, #0]
 8114654:	68fa      	ldr	r2, [r7, #12]
 8114656:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8114658:	68fb      	ldr	r3, [r7, #12]
 811465a:	689a      	ldr	r2, [r3, #8]
 811465c:	683b      	ldr	r3, [r7, #0]
 811465e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8114660:	68fb      	ldr	r3, [r7, #12]
 8114662:	689b      	ldr	r3, [r3, #8]
 8114664:	683a      	ldr	r2, [r7, #0]
 8114666:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8114668:	68fb      	ldr	r3, [r7, #12]
 811466a:	683a      	ldr	r2, [r7, #0]
 811466c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 811466e:	683b      	ldr	r3, [r7, #0]
 8114670:	687a      	ldr	r2, [r7, #4]
 8114672:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8114674:	687b      	ldr	r3, [r7, #4]
 8114676:	681b      	ldr	r3, [r3, #0]
 8114678:	1c5a      	adds	r2, r3, #1
 811467a:	687b      	ldr	r3, [r7, #4]
 811467c:	601a      	str	r2, [r3, #0]
}
 811467e:	bf00      	nop
 8114680:	3714      	adds	r7, #20
 8114682:	46bd      	mov	sp, r7
 8114684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8114688:	4770      	bx	lr

0811468a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 811468a:	b480      	push	{r7}
 811468c:	b085      	sub	sp, #20
 811468e:	af00      	add	r7, sp, #0
 8114690:	6078      	str	r0, [r7, #4]
 8114692:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8114694:	683b      	ldr	r3, [r7, #0]
 8114696:	681b      	ldr	r3, [r3, #0]
 8114698:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 811469a:	68bb      	ldr	r3, [r7, #8]
 811469c:	f1b3 3fff 	cmp.w	r3, #4294967295
 81146a0:	d103      	bne.n	81146aa <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 81146a2:	687b      	ldr	r3, [r7, #4]
 81146a4:	691b      	ldr	r3, [r3, #16]
 81146a6:	60fb      	str	r3, [r7, #12]
 81146a8:	e00c      	b.n	81146c4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 81146aa:	687b      	ldr	r3, [r7, #4]
 81146ac:	3308      	adds	r3, #8
 81146ae:	60fb      	str	r3, [r7, #12]
 81146b0:	e002      	b.n	81146b8 <vListInsert+0x2e>
 81146b2:	68fb      	ldr	r3, [r7, #12]
 81146b4:	685b      	ldr	r3, [r3, #4]
 81146b6:	60fb      	str	r3, [r7, #12]
 81146b8:	68fb      	ldr	r3, [r7, #12]
 81146ba:	685b      	ldr	r3, [r3, #4]
 81146bc:	681b      	ldr	r3, [r3, #0]
 81146be:	68ba      	ldr	r2, [r7, #8]
 81146c0:	429a      	cmp	r2, r3
 81146c2:	d2f6      	bcs.n	81146b2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 81146c4:	68fb      	ldr	r3, [r7, #12]
 81146c6:	685a      	ldr	r2, [r3, #4]
 81146c8:	683b      	ldr	r3, [r7, #0]
 81146ca:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 81146cc:	683b      	ldr	r3, [r7, #0]
 81146ce:	685b      	ldr	r3, [r3, #4]
 81146d0:	683a      	ldr	r2, [r7, #0]
 81146d2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 81146d4:	683b      	ldr	r3, [r7, #0]
 81146d6:	68fa      	ldr	r2, [r7, #12]
 81146d8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 81146da:	68fb      	ldr	r3, [r7, #12]
 81146dc:	683a      	ldr	r2, [r7, #0]
 81146de:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 81146e0:	683b      	ldr	r3, [r7, #0]
 81146e2:	687a      	ldr	r2, [r7, #4]
 81146e4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 81146e6:	687b      	ldr	r3, [r7, #4]
 81146e8:	681b      	ldr	r3, [r3, #0]
 81146ea:	1c5a      	adds	r2, r3, #1
 81146ec:	687b      	ldr	r3, [r7, #4]
 81146ee:	601a      	str	r2, [r3, #0]
}
 81146f0:	bf00      	nop
 81146f2:	3714      	adds	r7, #20
 81146f4:	46bd      	mov	sp, r7
 81146f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81146fa:	4770      	bx	lr

081146fc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 81146fc:	b480      	push	{r7}
 81146fe:	b085      	sub	sp, #20
 8114700:	af00      	add	r7, sp, #0
 8114702:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8114704:	687b      	ldr	r3, [r7, #4]
 8114706:	691b      	ldr	r3, [r3, #16]
 8114708:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 811470a:	687b      	ldr	r3, [r7, #4]
 811470c:	685b      	ldr	r3, [r3, #4]
 811470e:	687a      	ldr	r2, [r7, #4]
 8114710:	6892      	ldr	r2, [r2, #8]
 8114712:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8114714:	687b      	ldr	r3, [r7, #4]
 8114716:	689b      	ldr	r3, [r3, #8]
 8114718:	687a      	ldr	r2, [r7, #4]
 811471a:	6852      	ldr	r2, [r2, #4]
 811471c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 811471e:	68fb      	ldr	r3, [r7, #12]
 8114720:	685b      	ldr	r3, [r3, #4]
 8114722:	687a      	ldr	r2, [r7, #4]
 8114724:	429a      	cmp	r2, r3
 8114726:	d103      	bne.n	8114730 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8114728:	687b      	ldr	r3, [r7, #4]
 811472a:	689a      	ldr	r2, [r3, #8]
 811472c:	68fb      	ldr	r3, [r7, #12]
 811472e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8114730:	687b      	ldr	r3, [r7, #4]
 8114732:	2200      	movs	r2, #0
 8114734:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8114736:	68fb      	ldr	r3, [r7, #12]
 8114738:	681b      	ldr	r3, [r3, #0]
 811473a:	1e5a      	subs	r2, r3, #1
 811473c:	68fb      	ldr	r3, [r7, #12]
 811473e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8114740:	68fb      	ldr	r3, [r7, #12]
 8114742:	681b      	ldr	r3, [r3, #0]
}
 8114744:	4618      	mov	r0, r3
 8114746:	3714      	adds	r7, #20
 8114748:	46bd      	mov	sp, r7
 811474a:	f85d 7b04 	ldr.w	r7, [sp], #4
 811474e:	4770      	bx	lr

08114750 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8114750:	b480      	push	{r7}
 8114752:	b085      	sub	sp, #20
 8114754:	af00      	add	r7, sp, #0
 8114756:	60f8      	str	r0, [r7, #12]
 8114758:	60b9      	str	r1, [r7, #8]
 811475a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 811475c:	68fb      	ldr	r3, [r7, #12]
 811475e:	3b04      	subs	r3, #4
 8114760:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8114762:	68fb      	ldr	r3, [r7, #12]
 8114764:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8114768:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 811476a:	68fb      	ldr	r3, [r7, #12]
 811476c:	3b04      	subs	r3, #4
 811476e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8114770:	68bb      	ldr	r3, [r7, #8]
 8114772:	f023 0201 	bic.w	r2, r3, #1
 8114776:	68fb      	ldr	r3, [r7, #12]
 8114778:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 811477a:	68fb      	ldr	r3, [r7, #12]
 811477c:	3b04      	subs	r3, #4
 811477e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8114780:	4a0c      	ldr	r2, [pc, #48]	; (81147b4 <pxPortInitialiseStack+0x64>)
 8114782:	68fb      	ldr	r3, [r7, #12]
 8114784:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8114786:	68fb      	ldr	r3, [r7, #12]
 8114788:	3b14      	subs	r3, #20
 811478a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 811478c:	687a      	ldr	r2, [r7, #4]
 811478e:	68fb      	ldr	r3, [r7, #12]
 8114790:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8114792:	68fb      	ldr	r3, [r7, #12]
 8114794:	3b04      	subs	r3, #4
 8114796:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8114798:	68fb      	ldr	r3, [r7, #12]
 811479a:	f06f 0202 	mvn.w	r2, #2
 811479e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 81147a0:	68fb      	ldr	r3, [r7, #12]
 81147a2:	3b20      	subs	r3, #32
 81147a4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 81147a6:	68fb      	ldr	r3, [r7, #12]
}
 81147a8:	4618      	mov	r0, r3
 81147aa:	3714      	adds	r7, #20
 81147ac:	46bd      	mov	sp, r7
 81147ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 81147b2:	4770      	bx	lr
 81147b4:	081147b9 	.word	0x081147b9

081147b8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 81147b8:	b480      	push	{r7}
 81147ba:	b085      	sub	sp, #20
 81147bc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 81147be:	2300      	movs	r3, #0
 81147c0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 81147c2:	4b12      	ldr	r3, [pc, #72]	; (811480c <prvTaskExitError+0x54>)
 81147c4:	681b      	ldr	r3, [r3, #0]
 81147c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 81147ca:	d00a      	beq.n	81147e2 <prvTaskExitError+0x2a>
	__asm volatile
 81147cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 81147d0:	f383 8811 	msr	BASEPRI, r3
 81147d4:	f3bf 8f6f 	isb	sy
 81147d8:	f3bf 8f4f 	dsb	sy
 81147dc:	60fb      	str	r3, [r7, #12]
}
 81147de:	bf00      	nop
 81147e0:	e7fe      	b.n	81147e0 <prvTaskExitError+0x28>
	__asm volatile
 81147e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 81147e6:	f383 8811 	msr	BASEPRI, r3
 81147ea:	f3bf 8f6f 	isb	sy
 81147ee:	f3bf 8f4f 	dsb	sy
 81147f2:	60bb      	str	r3, [r7, #8]
}
 81147f4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 81147f6:	bf00      	nop
 81147f8:	687b      	ldr	r3, [r7, #4]
 81147fa:	2b00      	cmp	r3, #0
 81147fc:	d0fc      	beq.n	81147f8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 81147fe:	bf00      	nop
 8114800:	bf00      	nop
 8114802:	3714      	adds	r7, #20
 8114804:	46bd      	mov	sp, r7
 8114806:	f85d 7b04 	ldr.w	r7, [sp], #4
 811480a:	4770      	bx	lr
 811480c:	10000010 	.word	0x10000010

08114810 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8114810:	4b07      	ldr	r3, [pc, #28]	; (8114830 <pxCurrentTCBConst2>)
 8114812:	6819      	ldr	r1, [r3, #0]
 8114814:	6808      	ldr	r0, [r1, #0]
 8114816:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 811481a:	f380 8809 	msr	PSP, r0
 811481e:	f3bf 8f6f 	isb	sy
 8114822:	f04f 0000 	mov.w	r0, #0
 8114826:	f380 8811 	msr	BASEPRI, r0
 811482a:	4770      	bx	lr
 811482c:	f3af 8000 	nop.w

08114830 <pxCurrentTCBConst2>:
 8114830:	10004508 	.word	0x10004508
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8114834:	bf00      	nop
 8114836:	bf00      	nop

08114838 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8114838:	4808      	ldr	r0, [pc, #32]	; (811485c <prvPortStartFirstTask+0x24>)
 811483a:	6800      	ldr	r0, [r0, #0]
 811483c:	6800      	ldr	r0, [r0, #0]
 811483e:	f380 8808 	msr	MSP, r0
 8114842:	f04f 0000 	mov.w	r0, #0
 8114846:	f380 8814 	msr	CONTROL, r0
 811484a:	b662      	cpsie	i
 811484c:	b661      	cpsie	f
 811484e:	f3bf 8f4f 	dsb	sy
 8114852:	f3bf 8f6f 	isb	sy
 8114856:	df00      	svc	0
 8114858:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 811485a:	bf00      	nop
 811485c:	e000ed08 	.word	0xe000ed08

08114860 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8114860:	b580      	push	{r7, lr}
 8114862:	b086      	sub	sp, #24
 8114864:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8114866:	4b46      	ldr	r3, [pc, #280]	; (8114980 <xPortStartScheduler+0x120>)
 8114868:	681b      	ldr	r3, [r3, #0]
 811486a:	4a46      	ldr	r2, [pc, #280]	; (8114984 <xPortStartScheduler+0x124>)
 811486c:	4293      	cmp	r3, r2
 811486e:	d10a      	bne.n	8114886 <xPortStartScheduler+0x26>
	__asm volatile
 8114870:	f04f 0350 	mov.w	r3, #80	; 0x50
 8114874:	f383 8811 	msr	BASEPRI, r3
 8114878:	f3bf 8f6f 	isb	sy
 811487c:	f3bf 8f4f 	dsb	sy
 8114880:	613b      	str	r3, [r7, #16]
}
 8114882:	bf00      	nop
 8114884:	e7fe      	b.n	8114884 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8114886:	4b3e      	ldr	r3, [pc, #248]	; (8114980 <xPortStartScheduler+0x120>)
 8114888:	681b      	ldr	r3, [r3, #0]
 811488a:	4a3f      	ldr	r2, [pc, #252]	; (8114988 <xPortStartScheduler+0x128>)
 811488c:	4293      	cmp	r3, r2
 811488e:	d10a      	bne.n	81148a6 <xPortStartScheduler+0x46>
	__asm volatile
 8114890:	f04f 0350 	mov.w	r3, #80	; 0x50
 8114894:	f383 8811 	msr	BASEPRI, r3
 8114898:	f3bf 8f6f 	isb	sy
 811489c:	f3bf 8f4f 	dsb	sy
 81148a0:	60fb      	str	r3, [r7, #12]
}
 81148a2:	bf00      	nop
 81148a4:	e7fe      	b.n	81148a4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 81148a6:	4b39      	ldr	r3, [pc, #228]	; (811498c <xPortStartScheduler+0x12c>)
 81148a8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 81148aa:	697b      	ldr	r3, [r7, #20]
 81148ac:	781b      	ldrb	r3, [r3, #0]
 81148ae:	b2db      	uxtb	r3, r3
 81148b0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 81148b2:	697b      	ldr	r3, [r7, #20]
 81148b4:	22ff      	movs	r2, #255	; 0xff
 81148b6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 81148b8:	697b      	ldr	r3, [r7, #20]
 81148ba:	781b      	ldrb	r3, [r3, #0]
 81148bc:	b2db      	uxtb	r3, r3
 81148be:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 81148c0:	78fb      	ldrb	r3, [r7, #3]
 81148c2:	b2db      	uxtb	r3, r3
 81148c4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 81148c8:	b2da      	uxtb	r2, r3
 81148ca:	4b31      	ldr	r3, [pc, #196]	; (8114990 <xPortStartScheduler+0x130>)
 81148cc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 81148ce:	4b31      	ldr	r3, [pc, #196]	; (8114994 <xPortStartScheduler+0x134>)
 81148d0:	2207      	movs	r2, #7
 81148d2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 81148d4:	e009      	b.n	81148ea <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 81148d6:	4b2f      	ldr	r3, [pc, #188]	; (8114994 <xPortStartScheduler+0x134>)
 81148d8:	681b      	ldr	r3, [r3, #0]
 81148da:	3b01      	subs	r3, #1
 81148dc:	4a2d      	ldr	r2, [pc, #180]	; (8114994 <xPortStartScheduler+0x134>)
 81148de:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 81148e0:	78fb      	ldrb	r3, [r7, #3]
 81148e2:	b2db      	uxtb	r3, r3
 81148e4:	005b      	lsls	r3, r3, #1
 81148e6:	b2db      	uxtb	r3, r3
 81148e8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 81148ea:	78fb      	ldrb	r3, [r7, #3]
 81148ec:	b2db      	uxtb	r3, r3
 81148ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 81148f2:	2b80      	cmp	r3, #128	; 0x80
 81148f4:	d0ef      	beq.n	81148d6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 81148f6:	4b27      	ldr	r3, [pc, #156]	; (8114994 <xPortStartScheduler+0x134>)
 81148f8:	681b      	ldr	r3, [r3, #0]
 81148fa:	f1c3 0307 	rsb	r3, r3, #7
 81148fe:	2b04      	cmp	r3, #4
 8114900:	d00a      	beq.n	8114918 <xPortStartScheduler+0xb8>
	__asm volatile
 8114902:	f04f 0350 	mov.w	r3, #80	; 0x50
 8114906:	f383 8811 	msr	BASEPRI, r3
 811490a:	f3bf 8f6f 	isb	sy
 811490e:	f3bf 8f4f 	dsb	sy
 8114912:	60bb      	str	r3, [r7, #8]
}
 8114914:	bf00      	nop
 8114916:	e7fe      	b.n	8114916 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8114918:	4b1e      	ldr	r3, [pc, #120]	; (8114994 <xPortStartScheduler+0x134>)
 811491a:	681b      	ldr	r3, [r3, #0]
 811491c:	021b      	lsls	r3, r3, #8
 811491e:	4a1d      	ldr	r2, [pc, #116]	; (8114994 <xPortStartScheduler+0x134>)
 8114920:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8114922:	4b1c      	ldr	r3, [pc, #112]	; (8114994 <xPortStartScheduler+0x134>)
 8114924:	681b      	ldr	r3, [r3, #0]
 8114926:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 811492a:	4a1a      	ldr	r2, [pc, #104]	; (8114994 <xPortStartScheduler+0x134>)
 811492c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 811492e:	687b      	ldr	r3, [r7, #4]
 8114930:	b2da      	uxtb	r2, r3
 8114932:	697b      	ldr	r3, [r7, #20]
 8114934:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8114936:	4b18      	ldr	r3, [pc, #96]	; (8114998 <xPortStartScheduler+0x138>)
 8114938:	681b      	ldr	r3, [r3, #0]
 811493a:	4a17      	ldr	r2, [pc, #92]	; (8114998 <xPortStartScheduler+0x138>)
 811493c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8114940:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8114942:	4b15      	ldr	r3, [pc, #84]	; (8114998 <xPortStartScheduler+0x138>)
 8114944:	681b      	ldr	r3, [r3, #0]
 8114946:	4a14      	ldr	r2, [pc, #80]	; (8114998 <xPortStartScheduler+0x138>)
 8114948:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 811494c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 811494e:	f000 f8dd 	bl	8114b0c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8114952:	4b12      	ldr	r3, [pc, #72]	; (811499c <xPortStartScheduler+0x13c>)
 8114954:	2200      	movs	r2, #0
 8114956:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8114958:	f000 f8fc 	bl	8114b54 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 811495c:	4b10      	ldr	r3, [pc, #64]	; (81149a0 <xPortStartScheduler+0x140>)
 811495e:	681b      	ldr	r3, [r3, #0]
 8114960:	4a0f      	ldr	r2, [pc, #60]	; (81149a0 <xPortStartScheduler+0x140>)
 8114962:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8114966:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8114968:	f7ff ff66 	bl	8114838 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 811496c:	f001 faa6 	bl	8115ebc <vTaskSwitchContext>
	prvTaskExitError();
 8114970:	f7ff ff22 	bl	81147b8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8114974:	2300      	movs	r3, #0
}
 8114976:	4618      	mov	r0, r3
 8114978:	3718      	adds	r7, #24
 811497a:	46bd      	mov	sp, r7
 811497c:	bd80      	pop	{r7, pc}
 811497e:	bf00      	nop
 8114980:	e000ed00 	.word	0xe000ed00
 8114984:	410fc271 	.word	0x410fc271
 8114988:	410fc270 	.word	0x410fc270
 811498c:	e000e400 	.word	0xe000e400
 8114990:	10004500 	.word	0x10004500
 8114994:	10004504 	.word	0x10004504
 8114998:	e000ed20 	.word	0xe000ed20
 811499c:	10000010 	.word	0x10000010
 81149a0:	e000ef34 	.word	0xe000ef34

081149a4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 81149a4:	b480      	push	{r7}
 81149a6:	b083      	sub	sp, #12
 81149a8:	af00      	add	r7, sp, #0
	__asm volatile
 81149aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 81149ae:	f383 8811 	msr	BASEPRI, r3
 81149b2:	f3bf 8f6f 	isb	sy
 81149b6:	f3bf 8f4f 	dsb	sy
 81149ba:	607b      	str	r3, [r7, #4]
}
 81149bc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 81149be:	4b0f      	ldr	r3, [pc, #60]	; (81149fc <vPortEnterCritical+0x58>)
 81149c0:	681b      	ldr	r3, [r3, #0]
 81149c2:	3301      	adds	r3, #1
 81149c4:	4a0d      	ldr	r2, [pc, #52]	; (81149fc <vPortEnterCritical+0x58>)
 81149c6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 81149c8:	4b0c      	ldr	r3, [pc, #48]	; (81149fc <vPortEnterCritical+0x58>)
 81149ca:	681b      	ldr	r3, [r3, #0]
 81149cc:	2b01      	cmp	r3, #1
 81149ce:	d10f      	bne.n	81149f0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 81149d0:	4b0b      	ldr	r3, [pc, #44]	; (8114a00 <vPortEnterCritical+0x5c>)
 81149d2:	681b      	ldr	r3, [r3, #0]
 81149d4:	b2db      	uxtb	r3, r3
 81149d6:	2b00      	cmp	r3, #0
 81149d8:	d00a      	beq.n	81149f0 <vPortEnterCritical+0x4c>
	__asm volatile
 81149da:	f04f 0350 	mov.w	r3, #80	; 0x50
 81149de:	f383 8811 	msr	BASEPRI, r3
 81149e2:	f3bf 8f6f 	isb	sy
 81149e6:	f3bf 8f4f 	dsb	sy
 81149ea:	603b      	str	r3, [r7, #0]
}
 81149ec:	bf00      	nop
 81149ee:	e7fe      	b.n	81149ee <vPortEnterCritical+0x4a>
	}
}
 81149f0:	bf00      	nop
 81149f2:	370c      	adds	r7, #12
 81149f4:	46bd      	mov	sp, r7
 81149f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81149fa:	4770      	bx	lr
 81149fc:	10000010 	.word	0x10000010
 8114a00:	e000ed04 	.word	0xe000ed04

08114a04 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8114a04:	b480      	push	{r7}
 8114a06:	b083      	sub	sp, #12
 8114a08:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8114a0a:	4b12      	ldr	r3, [pc, #72]	; (8114a54 <vPortExitCritical+0x50>)
 8114a0c:	681b      	ldr	r3, [r3, #0]
 8114a0e:	2b00      	cmp	r3, #0
 8114a10:	d10a      	bne.n	8114a28 <vPortExitCritical+0x24>
	__asm volatile
 8114a12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8114a16:	f383 8811 	msr	BASEPRI, r3
 8114a1a:	f3bf 8f6f 	isb	sy
 8114a1e:	f3bf 8f4f 	dsb	sy
 8114a22:	607b      	str	r3, [r7, #4]
}
 8114a24:	bf00      	nop
 8114a26:	e7fe      	b.n	8114a26 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8114a28:	4b0a      	ldr	r3, [pc, #40]	; (8114a54 <vPortExitCritical+0x50>)
 8114a2a:	681b      	ldr	r3, [r3, #0]
 8114a2c:	3b01      	subs	r3, #1
 8114a2e:	4a09      	ldr	r2, [pc, #36]	; (8114a54 <vPortExitCritical+0x50>)
 8114a30:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8114a32:	4b08      	ldr	r3, [pc, #32]	; (8114a54 <vPortExitCritical+0x50>)
 8114a34:	681b      	ldr	r3, [r3, #0]
 8114a36:	2b00      	cmp	r3, #0
 8114a38:	d105      	bne.n	8114a46 <vPortExitCritical+0x42>
 8114a3a:	2300      	movs	r3, #0
 8114a3c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8114a3e:	683b      	ldr	r3, [r7, #0]
 8114a40:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8114a44:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8114a46:	bf00      	nop
 8114a48:	370c      	adds	r7, #12
 8114a4a:	46bd      	mov	sp, r7
 8114a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8114a50:	4770      	bx	lr
 8114a52:	bf00      	nop
 8114a54:	10000010 	.word	0x10000010
	...

08114a60 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8114a60:	f3ef 8009 	mrs	r0, PSP
 8114a64:	f3bf 8f6f 	isb	sy
 8114a68:	4b15      	ldr	r3, [pc, #84]	; (8114ac0 <pxCurrentTCBConst>)
 8114a6a:	681a      	ldr	r2, [r3, #0]
 8114a6c:	f01e 0f10 	tst.w	lr, #16
 8114a70:	bf08      	it	eq
 8114a72:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8114a76:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8114a7a:	6010      	str	r0, [r2, #0]
 8114a7c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8114a80:	f04f 0050 	mov.w	r0, #80	; 0x50
 8114a84:	f380 8811 	msr	BASEPRI, r0
 8114a88:	f3bf 8f4f 	dsb	sy
 8114a8c:	f3bf 8f6f 	isb	sy
 8114a90:	f001 fa14 	bl	8115ebc <vTaskSwitchContext>
 8114a94:	f04f 0000 	mov.w	r0, #0
 8114a98:	f380 8811 	msr	BASEPRI, r0
 8114a9c:	bc09      	pop	{r0, r3}
 8114a9e:	6819      	ldr	r1, [r3, #0]
 8114aa0:	6808      	ldr	r0, [r1, #0]
 8114aa2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8114aa6:	f01e 0f10 	tst.w	lr, #16
 8114aaa:	bf08      	it	eq
 8114aac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8114ab0:	f380 8809 	msr	PSP, r0
 8114ab4:	f3bf 8f6f 	isb	sy
 8114ab8:	4770      	bx	lr
 8114aba:	bf00      	nop
 8114abc:	f3af 8000 	nop.w

08114ac0 <pxCurrentTCBConst>:
 8114ac0:	10004508 	.word	0x10004508
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8114ac4:	bf00      	nop
 8114ac6:	bf00      	nop

08114ac8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8114ac8:	b580      	push	{r7, lr}
 8114aca:	b082      	sub	sp, #8
 8114acc:	af00      	add	r7, sp, #0
	__asm volatile
 8114ace:	f04f 0350 	mov.w	r3, #80	; 0x50
 8114ad2:	f383 8811 	msr	BASEPRI, r3
 8114ad6:	f3bf 8f6f 	isb	sy
 8114ada:	f3bf 8f4f 	dsb	sy
 8114ade:	607b      	str	r3, [r7, #4]
}
 8114ae0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8114ae2:	f001 f931 	bl	8115d48 <xTaskIncrementTick>
 8114ae6:	4603      	mov	r3, r0
 8114ae8:	2b00      	cmp	r3, #0
 8114aea:	d003      	beq.n	8114af4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8114aec:	4b06      	ldr	r3, [pc, #24]	; (8114b08 <xPortSysTickHandler+0x40>)
 8114aee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8114af2:	601a      	str	r2, [r3, #0]
 8114af4:	2300      	movs	r3, #0
 8114af6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8114af8:	683b      	ldr	r3, [r7, #0]
 8114afa:	f383 8811 	msr	BASEPRI, r3
}
 8114afe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8114b00:	bf00      	nop
 8114b02:	3708      	adds	r7, #8
 8114b04:	46bd      	mov	sp, r7
 8114b06:	bd80      	pop	{r7, pc}
 8114b08:	e000ed04 	.word	0xe000ed04

08114b0c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8114b0c:	b480      	push	{r7}
 8114b0e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8114b10:	4b0b      	ldr	r3, [pc, #44]	; (8114b40 <vPortSetupTimerInterrupt+0x34>)
 8114b12:	2200      	movs	r2, #0
 8114b14:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8114b16:	4b0b      	ldr	r3, [pc, #44]	; (8114b44 <vPortSetupTimerInterrupt+0x38>)
 8114b18:	2200      	movs	r2, #0
 8114b1a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8114b1c:	4b0a      	ldr	r3, [pc, #40]	; (8114b48 <vPortSetupTimerInterrupt+0x3c>)
 8114b1e:	681b      	ldr	r3, [r3, #0]
 8114b20:	4a0a      	ldr	r2, [pc, #40]	; (8114b4c <vPortSetupTimerInterrupt+0x40>)
 8114b22:	fba2 2303 	umull	r2, r3, r2, r3
 8114b26:	099b      	lsrs	r3, r3, #6
 8114b28:	4a09      	ldr	r2, [pc, #36]	; (8114b50 <vPortSetupTimerInterrupt+0x44>)
 8114b2a:	3b01      	subs	r3, #1
 8114b2c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8114b2e:	4b04      	ldr	r3, [pc, #16]	; (8114b40 <vPortSetupTimerInterrupt+0x34>)
 8114b30:	2207      	movs	r2, #7
 8114b32:	601a      	str	r2, [r3, #0]
}
 8114b34:	bf00      	nop
 8114b36:	46bd      	mov	sp, r7
 8114b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8114b3c:	4770      	bx	lr
 8114b3e:	bf00      	nop
 8114b40:	e000e010 	.word	0xe000e010
 8114b44:	e000e018 	.word	0xe000e018
 8114b48:	10000004 	.word	0x10000004
 8114b4c:	10624dd3 	.word	0x10624dd3
 8114b50:	e000e014 	.word	0xe000e014

08114b54 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8114b54:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8114b64 <vPortEnableVFP+0x10>
 8114b58:	6801      	ldr	r1, [r0, #0]
 8114b5a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8114b5e:	6001      	str	r1, [r0, #0]
 8114b60:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8114b62:	bf00      	nop
 8114b64:	e000ed88 	.word	0xe000ed88

08114b68 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8114b68:	b480      	push	{r7}
 8114b6a:	b085      	sub	sp, #20
 8114b6c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8114b6e:	f3ef 8305 	mrs	r3, IPSR
 8114b72:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8114b74:	68fb      	ldr	r3, [r7, #12]
 8114b76:	2b0f      	cmp	r3, #15
 8114b78:	d914      	bls.n	8114ba4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8114b7a:	4a17      	ldr	r2, [pc, #92]	; (8114bd8 <vPortValidateInterruptPriority+0x70>)
 8114b7c:	68fb      	ldr	r3, [r7, #12]
 8114b7e:	4413      	add	r3, r2
 8114b80:	781b      	ldrb	r3, [r3, #0]
 8114b82:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8114b84:	4b15      	ldr	r3, [pc, #84]	; (8114bdc <vPortValidateInterruptPriority+0x74>)
 8114b86:	781b      	ldrb	r3, [r3, #0]
 8114b88:	7afa      	ldrb	r2, [r7, #11]
 8114b8a:	429a      	cmp	r2, r3
 8114b8c:	d20a      	bcs.n	8114ba4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8114b8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8114b92:	f383 8811 	msr	BASEPRI, r3
 8114b96:	f3bf 8f6f 	isb	sy
 8114b9a:	f3bf 8f4f 	dsb	sy
 8114b9e:	607b      	str	r3, [r7, #4]
}
 8114ba0:	bf00      	nop
 8114ba2:	e7fe      	b.n	8114ba2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8114ba4:	4b0e      	ldr	r3, [pc, #56]	; (8114be0 <vPortValidateInterruptPriority+0x78>)
 8114ba6:	681b      	ldr	r3, [r3, #0]
 8114ba8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8114bac:	4b0d      	ldr	r3, [pc, #52]	; (8114be4 <vPortValidateInterruptPriority+0x7c>)
 8114bae:	681b      	ldr	r3, [r3, #0]
 8114bb0:	429a      	cmp	r2, r3
 8114bb2:	d90a      	bls.n	8114bca <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8114bb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8114bb8:	f383 8811 	msr	BASEPRI, r3
 8114bbc:	f3bf 8f6f 	isb	sy
 8114bc0:	f3bf 8f4f 	dsb	sy
 8114bc4:	603b      	str	r3, [r7, #0]
}
 8114bc6:	bf00      	nop
 8114bc8:	e7fe      	b.n	8114bc8 <vPortValidateInterruptPriority+0x60>
	}
 8114bca:	bf00      	nop
 8114bcc:	3714      	adds	r7, #20
 8114bce:	46bd      	mov	sp, r7
 8114bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8114bd4:	4770      	bx	lr
 8114bd6:	bf00      	nop
 8114bd8:	e000e3f0 	.word	0xe000e3f0
 8114bdc:	10004500 	.word	0x10004500
 8114be0:	e000ed0c 	.word	0xe000ed0c
 8114be4:	10004504 	.word	0x10004504

08114be8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8114be8:	b580      	push	{r7, lr}
 8114bea:	b084      	sub	sp, #16
 8114bec:	af00      	add	r7, sp, #0
 8114bee:	6078      	str	r0, [r7, #4]
 8114bf0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8114bf2:	687b      	ldr	r3, [r7, #4]
 8114bf4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8114bf6:	68fb      	ldr	r3, [r7, #12]
 8114bf8:	2b00      	cmp	r3, #0
 8114bfa:	d10a      	bne.n	8114c12 <xQueueGenericReset+0x2a>
	__asm volatile
 8114bfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8114c00:	f383 8811 	msr	BASEPRI, r3
 8114c04:	f3bf 8f6f 	isb	sy
 8114c08:	f3bf 8f4f 	dsb	sy
 8114c0c:	60bb      	str	r3, [r7, #8]
}
 8114c0e:	bf00      	nop
 8114c10:	e7fe      	b.n	8114c10 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8114c12:	f7ff fec7 	bl	81149a4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8114c16:	68fb      	ldr	r3, [r7, #12]
 8114c18:	681a      	ldr	r2, [r3, #0]
 8114c1a:	68fb      	ldr	r3, [r7, #12]
 8114c1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8114c1e:	68f9      	ldr	r1, [r7, #12]
 8114c20:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8114c22:	fb01 f303 	mul.w	r3, r1, r3
 8114c26:	441a      	add	r2, r3
 8114c28:	68fb      	ldr	r3, [r7, #12]
 8114c2a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8114c2c:	68fb      	ldr	r3, [r7, #12]
 8114c2e:	2200      	movs	r2, #0
 8114c30:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8114c32:	68fb      	ldr	r3, [r7, #12]
 8114c34:	681a      	ldr	r2, [r3, #0]
 8114c36:	68fb      	ldr	r3, [r7, #12]
 8114c38:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8114c3a:	68fb      	ldr	r3, [r7, #12]
 8114c3c:	681a      	ldr	r2, [r3, #0]
 8114c3e:	68fb      	ldr	r3, [r7, #12]
 8114c40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8114c42:	3b01      	subs	r3, #1
 8114c44:	68f9      	ldr	r1, [r7, #12]
 8114c46:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8114c48:	fb01 f303 	mul.w	r3, r1, r3
 8114c4c:	441a      	add	r2, r3
 8114c4e:	68fb      	ldr	r3, [r7, #12]
 8114c50:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8114c52:	68fb      	ldr	r3, [r7, #12]
 8114c54:	22ff      	movs	r2, #255	; 0xff
 8114c56:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8114c5a:	68fb      	ldr	r3, [r7, #12]
 8114c5c:	22ff      	movs	r2, #255	; 0xff
 8114c5e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8114c62:	683b      	ldr	r3, [r7, #0]
 8114c64:	2b00      	cmp	r3, #0
 8114c66:	d114      	bne.n	8114c92 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8114c68:	68fb      	ldr	r3, [r7, #12]
 8114c6a:	691b      	ldr	r3, [r3, #16]
 8114c6c:	2b00      	cmp	r3, #0
 8114c6e:	d01a      	beq.n	8114ca6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8114c70:	68fb      	ldr	r3, [r7, #12]
 8114c72:	3310      	adds	r3, #16
 8114c74:	4618      	mov	r0, r3
 8114c76:	f001 f9cf 	bl	8116018 <xTaskRemoveFromEventList>
 8114c7a:	4603      	mov	r3, r0
 8114c7c:	2b00      	cmp	r3, #0
 8114c7e:	d012      	beq.n	8114ca6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8114c80:	4b0c      	ldr	r3, [pc, #48]	; (8114cb4 <xQueueGenericReset+0xcc>)
 8114c82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8114c86:	601a      	str	r2, [r3, #0]
 8114c88:	f3bf 8f4f 	dsb	sy
 8114c8c:	f3bf 8f6f 	isb	sy
 8114c90:	e009      	b.n	8114ca6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8114c92:	68fb      	ldr	r3, [r7, #12]
 8114c94:	3310      	adds	r3, #16
 8114c96:	4618      	mov	r0, r3
 8114c98:	f7ff fca6 	bl	81145e8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8114c9c:	68fb      	ldr	r3, [r7, #12]
 8114c9e:	3324      	adds	r3, #36	; 0x24
 8114ca0:	4618      	mov	r0, r3
 8114ca2:	f7ff fca1 	bl	81145e8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8114ca6:	f7ff fead 	bl	8114a04 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8114caa:	2301      	movs	r3, #1
}
 8114cac:	4618      	mov	r0, r3
 8114cae:	3710      	adds	r7, #16
 8114cb0:	46bd      	mov	sp, r7
 8114cb2:	bd80      	pop	{r7, pc}
 8114cb4:	e000ed04 	.word	0xe000ed04

08114cb8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8114cb8:	b580      	push	{r7, lr}
 8114cba:	b08e      	sub	sp, #56	; 0x38
 8114cbc:	af02      	add	r7, sp, #8
 8114cbe:	60f8      	str	r0, [r7, #12]
 8114cc0:	60b9      	str	r1, [r7, #8]
 8114cc2:	607a      	str	r2, [r7, #4]
 8114cc4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8114cc6:	68fb      	ldr	r3, [r7, #12]
 8114cc8:	2b00      	cmp	r3, #0
 8114cca:	d10a      	bne.n	8114ce2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8114ccc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8114cd0:	f383 8811 	msr	BASEPRI, r3
 8114cd4:	f3bf 8f6f 	isb	sy
 8114cd8:	f3bf 8f4f 	dsb	sy
 8114cdc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8114cde:	bf00      	nop
 8114ce0:	e7fe      	b.n	8114ce0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8114ce2:	683b      	ldr	r3, [r7, #0]
 8114ce4:	2b00      	cmp	r3, #0
 8114ce6:	d10a      	bne.n	8114cfe <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8114ce8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8114cec:	f383 8811 	msr	BASEPRI, r3
 8114cf0:	f3bf 8f6f 	isb	sy
 8114cf4:	f3bf 8f4f 	dsb	sy
 8114cf8:	627b      	str	r3, [r7, #36]	; 0x24
}
 8114cfa:	bf00      	nop
 8114cfc:	e7fe      	b.n	8114cfc <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8114cfe:	687b      	ldr	r3, [r7, #4]
 8114d00:	2b00      	cmp	r3, #0
 8114d02:	d002      	beq.n	8114d0a <xQueueGenericCreateStatic+0x52>
 8114d04:	68bb      	ldr	r3, [r7, #8]
 8114d06:	2b00      	cmp	r3, #0
 8114d08:	d001      	beq.n	8114d0e <xQueueGenericCreateStatic+0x56>
 8114d0a:	2301      	movs	r3, #1
 8114d0c:	e000      	b.n	8114d10 <xQueueGenericCreateStatic+0x58>
 8114d0e:	2300      	movs	r3, #0
 8114d10:	2b00      	cmp	r3, #0
 8114d12:	d10a      	bne.n	8114d2a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8114d14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8114d18:	f383 8811 	msr	BASEPRI, r3
 8114d1c:	f3bf 8f6f 	isb	sy
 8114d20:	f3bf 8f4f 	dsb	sy
 8114d24:	623b      	str	r3, [r7, #32]
}
 8114d26:	bf00      	nop
 8114d28:	e7fe      	b.n	8114d28 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8114d2a:	687b      	ldr	r3, [r7, #4]
 8114d2c:	2b00      	cmp	r3, #0
 8114d2e:	d102      	bne.n	8114d36 <xQueueGenericCreateStatic+0x7e>
 8114d30:	68bb      	ldr	r3, [r7, #8]
 8114d32:	2b00      	cmp	r3, #0
 8114d34:	d101      	bne.n	8114d3a <xQueueGenericCreateStatic+0x82>
 8114d36:	2301      	movs	r3, #1
 8114d38:	e000      	b.n	8114d3c <xQueueGenericCreateStatic+0x84>
 8114d3a:	2300      	movs	r3, #0
 8114d3c:	2b00      	cmp	r3, #0
 8114d3e:	d10a      	bne.n	8114d56 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8114d40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8114d44:	f383 8811 	msr	BASEPRI, r3
 8114d48:	f3bf 8f6f 	isb	sy
 8114d4c:	f3bf 8f4f 	dsb	sy
 8114d50:	61fb      	str	r3, [r7, #28]
}
 8114d52:	bf00      	nop
 8114d54:	e7fe      	b.n	8114d54 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8114d56:	2350      	movs	r3, #80	; 0x50
 8114d58:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8114d5a:	697b      	ldr	r3, [r7, #20]
 8114d5c:	2b50      	cmp	r3, #80	; 0x50
 8114d5e:	d00a      	beq.n	8114d76 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8114d60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8114d64:	f383 8811 	msr	BASEPRI, r3
 8114d68:	f3bf 8f6f 	isb	sy
 8114d6c:	f3bf 8f4f 	dsb	sy
 8114d70:	61bb      	str	r3, [r7, #24]
}
 8114d72:	bf00      	nop
 8114d74:	e7fe      	b.n	8114d74 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8114d76:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8114d78:	683b      	ldr	r3, [r7, #0]
 8114d7a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8114d7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8114d7e:	2b00      	cmp	r3, #0
 8114d80:	d00d      	beq.n	8114d9e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8114d82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8114d84:	2201      	movs	r2, #1
 8114d86:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8114d8a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8114d8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8114d90:	9300      	str	r3, [sp, #0]
 8114d92:	4613      	mov	r3, r2
 8114d94:	687a      	ldr	r2, [r7, #4]
 8114d96:	68b9      	ldr	r1, [r7, #8]
 8114d98:	68f8      	ldr	r0, [r7, #12]
 8114d9a:	f000 f83f 	bl	8114e1c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8114d9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8114da0:	4618      	mov	r0, r3
 8114da2:	3730      	adds	r7, #48	; 0x30
 8114da4:	46bd      	mov	sp, r7
 8114da6:	bd80      	pop	{r7, pc}

08114da8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8114da8:	b580      	push	{r7, lr}
 8114daa:	b08a      	sub	sp, #40	; 0x28
 8114dac:	af02      	add	r7, sp, #8
 8114dae:	60f8      	str	r0, [r7, #12]
 8114db0:	60b9      	str	r1, [r7, #8]
 8114db2:	4613      	mov	r3, r2
 8114db4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8114db6:	68fb      	ldr	r3, [r7, #12]
 8114db8:	2b00      	cmp	r3, #0
 8114dba:	d10a      	bne.n	8114dd2 <xQueueGenericCreate+0x2a>
	__asm volatile
 8114dbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8114dc0:	f383 8811 	msr	BASEPRI, r3
 8114dc4:	f3bf 8f6f 	isb	sy
 8114dc8:	f3bf 8f4f 	dsb	sy
 8114dcc:	613b      	str	r3, [r7, #16]
}
 8114dce:	bf00      	nop
 8114dd0:	e7fe      	b.n	8114dd0 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8114dd2:	68fb      	ldr	r3, [r7, #12]
 8114dd4:	68ba      	ldr	r2, [r7, #8]
 8114dd6:	fb02 f303 	mul.w	r3, r2, r3
 8114dda:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8114ddc:	69fb      	ldr	r3, [r7, #28]
 8114dde:	3350      	adds	r3, #80	; 0x50
 8114de0:	4618      	mov	r0, r3
 8114de2:	f7ff fa17 	bl	8114214 <pvPortMalloc>
 8114de6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8114de8:	69bb      	ldr	r3, [r7, #24]
 8114dea:	2b00      	cmp	r3, #0
 8114dec:	d011      	beq.n	8114e12 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8114dee:	69bb      	ldr	r3, [r7, #24]
 8114df0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8114df2:	697b      	ldr	r3, [r7, #20]
 8114df4:	3350      	adds	r3, #80	; 0x50
 8114df6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8114df8:	69bb      	ldr	r3, [r7, #24]
 8114dfa:	2200      	movs	r2, #0
 8114dfc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8114e00:	79fa      	ldrb	r2, [r7, #7]
 8114e02:	69bb      	ldr	r3, [r7, #24]
 8114e04:	9300      	str	r3, [sp, #0]
 8114e06:	4613      	mov	r3, r2
 8114e08:	697a      	ldr	r2, [r7, #20]
 8114e0a:	68b9      	ldr	r1, [r7, #8]
 8114e0c:	68f8      	ldr	r0, [r7, #12]
 8114e0e:	f000 f805 	bl	8114e1c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8114e12:	69bb      	ldr	r3, [r7, #24]
	}
 8114e14:	4618      	mov	r0, r3
 8114e16:	3720      	adds	r7, #32
 8114e18:	46bd      	mov	sp, r7
 8114e1a:	bd80      	pop	{r7, pc}

08114e1c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8114e1c:	b580      	push	{r7, lr}
 8114e1e:	b084      	sub	sp, #16
 8114e20:	af00      	add	r7, sp, #0
 8114e22:	60f8      	str	r0, [r7, #12]
 8114e24:	60b9      	str	r1, [r7, #8]
 8114e26:	607a      	str	r2, [r7, #4]
 8114e28:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8114e2a:	68bb      	ldr	r3, [r7, #8]
 8114e2c:	2b00      	cmp	r3, #0
 8114e2e:	d103      	bne.n	8114e38 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8114e30:	69bb      	ldr	r3, [r7, #24]
 8114e32:	69ba      	ldr	r2, [r7, #24]
 8114e34:	601a      	str	r2, [r3, #0]
 8114e36:	e002      	b.n	8114e3e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8114e38:	69bb      	ldr	r3, [r7, #24]
 8114e3a:	687a      	ldr	r2, [r7, #4]
 8114e3c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8114e3e:	69bb      	ldr	r3, [r7, #24]
 8114e40:	68fa      	ldr	r2, [r7, #12]
 8114e42:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8114e44:	69bb      	ldr	r3, [r7, #24]
 8114e46:	68ba      	ldr	r2, [r7, #8]
 8114e48:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8114e4a:	2101      	movs	r1, #1
 8114e4c:	69b8      	ldr	r0, [r7, #24]
 8114e4e:	f7ff fecb 	bl	8114be8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8114e52:	69bb      	ldr	r3, [r7, #24]
 8114e54:	78fa      	ldrb	r2, [r7, #3]
 8114e56:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8114e5a:	bf00      	nop
 8114e5c:	3710      	adds	r7, #16
 8114e5e:	46bd      	mov	sp, r7
 8114e60:	bd80      	pop	{r7, pc}
	...

08114e64 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8114e64:	b580      	push	{r7, lr}
 8114e66:	b08e      	sub	sp, #56	; 0x38
 8114e68:	af00      	add	r7, sp, #0
 8114e6a:	60f8      	str	r0, [r7, #12]
 8114e6c:	60b9      	str	r1, [r7, #8]
 8114e6e:	607a      	str	r2, [r7, #4]
 8114e70:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8114e72:	2300      	movs	r3, #0
 8114e74:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8114e76:	68fb      	ldr	r3, [r7, #12]
 8114e78:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8114e7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8114e7c:	2b00      	cmp	r3, #0
 8114e7e:	d10a      	bne.n	8114e96 <xQueueGenericSend+0x32>
	__asm volatile
 8114e80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8114e84:	f383 8811 	msr	BASEPRI, r3
 8114e88:	f3bf 8f6f 	isb	sy
 8114e8c:	f3bf 8f4f 	dsb	sy
 8114e90:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8114e92:	bf00      	nop
 8114e94:	e7fe      	b.n	8114e94 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8114e96:	68bb      	ldr	r3, [r7, #8]
 8114e98:	2b00      	cmp	r3, #0
 8114e9a:	d103      	bne.n	8114ea4 <xQueueGenericSend+0x40>
 8114e9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8114e9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8114ea0:	2b00      	cmp	r3, #0
 8114ea2:	d101      	bne.n	8114ea8 <xQueueGenericSend+0x44>
 8114ea4:	2301      	movs	r3, #1
 8114ea6:	e000      	b.n	8114eaa <xQueueGenericSend+0x46>
 8114ea8:	2300      	movs	r3, #0
 8114eaa:	2b00      	cmp	r3, #0
 8114eac:	d10a      	bne.n	8114ec4 <xQueueGenericSend+0x60>
	__asm volatile
 8114eae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8114eb2:	f383 8811 	msr	BASEPRI, r3
 8114eb6:	f3bf 8f6f 	isb	sy
 8114eba:	f3bf 8f4f 	dsb	sy
 8114ebe:	627b      	str	r3, [r7, #36]	; 0x24
}
 8114ec0:	bf00      	nop
 8114ec2:	e7fe      	b.n	8114ec2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8114ec4:	683b      	ldr	r3, [r7, #0]
 8114ec6:	2b02      	cmp	r3, #2
 8114ec8:	d103      	bne.n	8114ed2 <xQueueGenericSend+0x6e>
 8114eca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8114ecc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8114ece:	2b01      	cmp	r3, #1
 8114ed0:	d101      	bne.n	8114ed6 <xQueueGenericSend+0x72>
 8114ed2:	2301      	movs	r3, #1
 8114ed4:	e000      	b.n	8114ed8 <xQueueGenericSend+0x74>
 8114ed6:	2300      	movs	r3, #0
 8114ed8:	2b00      	cmp	r3, #0
 8114eda:	d10a      	bne.n	8114ef2 <xQueueGenericSend+0x8e>
	__asm volatile
 8114edc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8114ee0:	f383 8811 	msr	BASEPRI, r3
 8114ee4:	f3bf 8f6f 	isb	sy
 8114ee8:	f3bf 8f4f 	dsb	sy
 8114eec:	623b      	str	r3, [r7, #32]
}
 8114eee:	bf00      	nop
 8114ef0:	e7fe      	b.n	8114ef0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8114ef2:	f001 fa4f 	bl	8116394 <xTaskGetSchedulerState>
 8114ef6:	4603      	mov	r3, r0
 8114ef8:	2b00      	cmp	r3, #0
 8114efa:	d102      	bne.n	8114f02 <xQueueGenericSend+0x9e>
 8114efc:	687b      	ldr	r3, [r7, #4]
 8114efe:	2b00      	cmp	r3, #0
 8114f00:	d101      	bne.n	8114f06 <xQueueGenericSend+0xa2>
 8114f02:	2301      	movs	r3, #1
 8114f04:	e000      	b.n	8114f08 <xQueueGenericSend+0xa4>
 8114f06:	2300      	movs	r3, #0
 8114f08:	2b00      	cmp	r3, #0
 8114f0a:	d10a      	bne.n	8114f22 <xQueueGenericSend+0xbe>
	__asm volatile
 8114f0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8114f10:	f383 8811 	msr	BASEPRI, r3
 8114f14:	f3bf 8f6f 	isb	sy
 8114f18:	f3bf 8f4f 	dsb	sy
 8114f1c:	61fb      	str	r3, [r7, #28]
}
 8114f1e:	bf00      	nop
 8114f20:	e7fe      	b.n	8114f20 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8114f22:	f7ff fd3f 	bl	81149a4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8114f26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8114f28:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8114f2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8114f2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8114f2e:	429a      	cmp	r2, r3
 8114f30:	d302      	bcc.n	8114f38 <xQueueGenericSend+0xd4>
 8114f32:	683b      	ldr	r3, [r7, #0]
 8114f34:	2b02      	cmp	r3, #2
 8114f36:	d129      	bne.n	8114f8c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8114f38:	683a      	ldr	r2, [r7, #0]
 8114f3a:	68b9      	ldr	r1, [r7, #8]
 8114f3c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8114f3e:	f000 fa8b 	bl	8115458 <prvCopyDataToQueue>
 8114f42:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8114f44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8114f46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8114f48:	2b00      	cmp	r3, #0
 8114f4a:	d010      	beq.n	8114f6e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8114f4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8114f4e:	3324      	adds	r3, #36	; 0x24
 8114f50:	4618      	mov	r0, r3
 8114f52:	f001 f861 	bl	8116018 <xTaskRemoveFromEventList>
 8114f56:	4603      	mov	r3, r0
 8114f58:	2b00      	cmp	r3, #0
 8114f5a:	d013      	beq.n	8114f84 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8114f5c:	4b3f      	ldr	r3, [pc, #252]	; (811505c <xQueueGenericSend+0x1f8>)
 8114f5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8114f62:	601a      	str	r2, [r3, #0]
 8114f64:	f3bf 8f4f 	dsb	sy
 8114f68:	f3bf 8f6f 	isb	sy
 8114f6c:	e00a      	b.n	8114f84 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8114f6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8114f70:	2b00      	cmp	r3, #0
 8114f72:	d007      	beq.n	8114f84 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8114f74:	4b39      	ldr	r3, [pc, #228]	; (811505c <xQueueGenericSend+0x1f8>)
 8114f76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8114f7a:	601a      	str	r2, [r3, #0]
 8114f7c:	f3bf 8f4f 	dsb	sy
 8114f80:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8114f84:	f7ff fd3e 	bl	8114a04 <vPortExitCritical>
				return pdPASS;
 8114f88:	2301      	movs	r3, #1
 8114f8a:	e063      	b.n	8115054 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8114f8c:	687b      	ldr	r3, [r7, #4]
 8114f8e:	2b00      	cmp	r3, #0
 8114f90:	d103      	bne.n	8114f9a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8114f92:	f7ff fd37 	bl	8114a04 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8114f96:	2300      	movs	r3, #0
 8114f98:	e05c      	b.n	8115054 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8114f9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8114f9c:	2b00      	cmp	r3, #0
 8114f9e:	d106      	bne.n	8114fae <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8114fa0:	f107 0314 	add.w	r3, r7, #20
 8114fa4:	4618      	mov	r0, r3
 8114fa6:	f001 f89b 	bl	81160e0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8114faa:	2301      	movs	r3, #1
 8114fac:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8114fae:	f7ff fd29 	bl	8114a04 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8114fb2:	f000 fdfb 	bl	8115bac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8114fb6:	f7ff fcf5 	bl	81149a4 <vPortEnterCritical>
 8114fba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8114fbc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8114fc0:	b25b      	sxtb	r3, r3
 8114fc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8114fc6:	d103      	bne.n	8114fd0 <xQueueGenericSend+0x16c>
 8114fc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8114fca:	2200      	movs	r2, #0
 8114fcc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8114fd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8114fd2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8114fd6:	b25b      	sxtb	r3, r3
 8114fd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8114fdc:	d103      	bne.n	8114fe6 <xQueueGenericSend+0x182>
 8114fde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8114fe0:	2200      	movs	r2, #0
 8114fe2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8114fe6:	f7ff fd0d 	bl	8114a04 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8114fea:	1d3a      	adds	r2, r7, #4
 8114fec:	f107 0314 	add.w	r3, r7, #20
 8114ff0:	4611      	mov	r1, r2
 8114ff2:	4618      	mov	r0, r3
 8114ff4:	f001 f88a 	bl	811610c <xTaskCheckForTimeOut>
 8114ff8:	4603      	mov	r3, r0
 8114ffa:	2b00      	cmp	r3, #0
 8114ffc:	d124      	bne.n	8115048 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8114ffe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8115000:	f000 fb22 	bl	8115648 <prvIsQueueFull>
 8115004:	4603      	mov	r3, r0
 8115006:	2b00      	cmp	r3, #0
 8115008:	d018      	beq.n	811503c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 811500a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 811500c:	3310      	adds	r3, #16
 811500e:	687a      	ldr	r2, [r7, #4]
 8115010:	4611      	mov	r1, r2
 8115012:	4618      	mov	r0, r3
 8115014:	f000 ffb0 	bl	8115f78 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8115018:	6b38      	ldr	r0, [r7, #48]	; 0x30
 811501a:	f000 faad 	bl	8115578 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 811501e:	f000 fdd3 	bl	8115bc8 <xTaskResumeAll>
 8115022:	4603      	mov	r3, r0
 8115024:	2b00      	cmp	r3, #0
 8115026:	f47f af7c 	bne.w	8114f22 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 811502a:	4b0c      	ldr	r3, [pc, #48]	; (811505c <xQueueGenericSend+0x1f8>)
 811502c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8115030:	601a      	str	r2, [r3, #0]
 8115032:	f3bf 8f4f 	dsb	sy
 8115036:	f3bf 8f6f 	isb	sy
 811503a:	e772      	b.n	8114f22 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 811503c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 811503e:	f000 fa9b 	bl	8115578 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8115042:	f000 fdc1 	bl	8115bc8 <xTaskResumeAll>
 8115046:	e76c      	b.n	8114f22 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8115048:	6b38      	ldr	r0, [r7, #48]	; 0x30
 811504a:	f000 fa95 	bl	8115578 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 811504e:	f000 fdbb 	bl	8115bc8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8115052:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8115054:	4618      	mov	r0, r3
 8115056:	3738      	adds	r7, #56	; 0x38
 8115058:	46bd      	mov	sp, r7
 811505a:	bd80      	pop	{r7, pc}
 811505c:	e000ed04 	.word	0xe000ed04

08115060 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8115060:	b580      	push	{r7, lr}
 8115062:	b090      	sub	sp, #64	; 0x40
 8115064:	af00      	add	r7, sp, #0
 8115066:	60f8      	str	r0, [r7, #12]
 8115068:	60b9      	str	r1, [r7, #8]
 811506a:	607a      	str	r2, [r7, #4]
 811506c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 811506e:	68fb      	ldr	r3, [r7, #12]
 8115070:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8115072:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8115074:	2b00      	cmp	r3, #0
 8115076:	d10a      	bne.n	811508e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8115078:	f04f 0350 	mov.w	r3, #80	; 0x50
 811507c:	f383 8811 	msr	BASEPRI, r3
 8115080:	f3bf 8f6f 	isb	sy
 8115084:	f3bf 8f4f 	dsb	sy
 8115088:	62bb      	str	r3, [r7, #40]	; 0x28
}
 811508a:	bf00      	nop
 811508c:	e7fe      	b.n	811508c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 811508e:	68bb      	ldr	r3, [r7, #8]
 8115090:	2b00      	cmp	r3, #0
 8115092:	d103      	bne.n	811509c <xQueueGenericSendFromISR+0x3c>
 8115094:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8115096:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8115098:	2b00      	cmp	r3, #0
 811509a:	d101      	bne.n	81150a0 <xQueueGenericSendFromISR+0x40>
 811509c:	2301      	movs	r3, #1
 811509e:	e000      	b.n	81150a2 <xQueueGenericSendFromISR+0x42>
 81150a0:	2300      	movs	r3, #0
 81150a2:	2b00      	cmp	r3, #0
 81150a4:	d10a      	bne.n	81150bc <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 81150a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 81150aa:	f383 8811 	msr	BASEPRI, r3
 81150ae:	f3bf 8f6f 	isb	sy
 81150b2:	f3bf 8f4f 	dsb	sy
 81150b6:	627b      	str	r3, [r7, #36]	; 0x24
}
 81150b8:	bf00      	nop
 81150ba:	e7fe      	b.n	81150ba <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 81150bc:	683b      	ldr	r3, [r7, #0]
 81150be:	2b02      	cmp	r3, #2
 81150c0:	d103      	bne.n	81150ca <xQueueGenericSendFromISR+0x6a>
 81150c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81150c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81150c6:	2b01      	cmp	r3, #1
 81150c8:	d101      	bne.n	81150ce <xQueueGenericSendFromISR+0x6e>
 81150ca:	2301      	movs	r3, #1
 81150cc:	e000      	b.n	81150d0 <xQueueGenericSendFromISR+0x70>
 81150ce:	2300      	movs	r3, #0
 81150d0:	2b00      	cmp	r3, #0
 81150d2:	d10a      	bne.n	81150ea <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 81150d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 81150d8:	f383 8811 	msr	BASEPRI, r3
 81150dc:	f3bf 8f6f 	isb	sy
 81150e0:	f3bf 8f4f 	dsb	sy
 81150e4:	623b      	str	r3, [r7, #32]
}
 81150e6:	bf00      	nop
 81150e8:	e7fe      	b.n	81150e8 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 81150ea:	f7ff fd3d 	bl	8114b68 <vPortValidateInterruptPriority>
	__asm volatile
 81150ee:	f3ef 8211 	mrs	r2, BASEPRI
 81150f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 81150f6:	f383 8811 	msr	BASEPRI, r3
 81150fa:	f3bf 8f6f 	isb	sy
 81150fe:	f3bf 8f4f 	dsb	sy
 8115102:	61fa      	str	r2, [r7, #28]
 8115104:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 8115106:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8115108:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 811510a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 811510c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 811510e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8115110:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8115112:	429a      	cmp	r2, r3
 8115114:	d302      	bcc.n	811511c <xQueueGenericSendFromISR+0xbc>
 8115116:	683b      	ldr	r3, [r7, #0]
 8115118:	2b02      	cmp	r3, #2
 811511a:	d12f      	bne.n	811517c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 811511c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 811511e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8115122:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8115126:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8115128:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 811512a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 811512c:	683a      	ldr	r2, [r7, #0]
 811512e:	68b9      	ldr	r1, [r7, #8]
 8115130:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8115132:	f000 f991 	bl	8115458 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8115136:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 811513a:	f1b3 3fff 	cmp.w	r3, #4294967295
 811513e:	d112      	bne.n	8115166 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8115140:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8115142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8115144:	2b00      	cmp	r3, #0
 8115146:	d016      	beq.n	8115176 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8115148:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 811514a:	3324      	adds	r3, #36	; 0x24
 811514c:	4618      	mov	r0, r3
 811514e:	f000 ff63 	bl	8116018 <xTaskRemoveFromEventList>
 8115152:	4603      	mov	r3, r0
 8115154:	2b00      	cmp	r3, #0
 8115156:	d00e      	beq.n	8115176 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8115158:	687b      	ldr	r3, [r7, #4]
 811515a:	2b00      	cmp	r3, #0
 811515c:	d00b      	beq.n	8115176 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 811515e:	687b      	ldr	r3, [r7, #4]
 8115160:	2201      	movs	r2, #1
 8115162:	601a      	str	r2, [r3, #0]
 8115164:	e007      	b.n	8115176 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8115166:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 811516a:	3301      	adds	r3, #1
 811516c:	b2db      	uxtb	r3, r3
 811516e:	b25a      	sxtb	r2, r3
 8115170:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8115172:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8115176:	2301      	movs	r3, #1
 8115178:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 811517a:	e001      	b.n	8115180 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 811517c:	2300      	movs	r3, #0
 811517e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8115180:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8115182:	617b      	str	r3, [r7, #20]
	__asm volatile
 8115184:	697b      	ldr	r3, [r7, #20]
 8115186:	f383 8811 	msr	BASEPRI, r3
}
 811518a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 811518c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 811518e:	4618      	mov	r0, r3
 8115190:	3740      	adds	r7, #64	; 0x40
 8115192:	46bd      	mov	sp, r7
 8115194:	bd80      	pop	{r7, pc}
	...

08115198 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8115198:	b580      	push	{r7, lr}
 811519a:	b08c      	sub	sp, #48	; 0x30
 811519c:	af00      	add	r7, sp, #0
 811519e:	60f8      	str	r0, [r7, #12]
 81151a0:	60b9      	str	r1, [r7, #8]
 81151a2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 81151a4:	2300      	movs	r3, #0
 81151a6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 81151a8:	68fb      	ldr	r3, [r7, #12]
 81151aa:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 81151ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81151ae:	2b00      	cmp	r3, #0
 81151b0:	d10a      	bne.n	81151c8 <xQueueReceive+0x30>
	__asm volatile
 81151b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 81151b6:	f383 8811 	msr	BASEPRI, r3
 81151ba:	f3bf 8f6f 	isb	sy
 81151be:	f3bf 8f4f 	dsb	sy
 81151c2:	623b      	str	r3, [r7, #32]
}
 81151c4:	bf00      	nop
 81151c6:	e7fe      	b.n	81151c6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 81151c8:	68bb      	ldr	r3, [r7, #8]
 81151ca:	2b00      	cmp	r3, #0
 81151cc:	d103      	bne.n	81151d6 <xQueueReceive+0x3e>
 81151ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81151d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81151d2:	2b00      	cmp	r3, #0
 81151d4:	d101      	bne.n	81151da <xQueueReceive+0x42>
 81151d6:	2301      	movs	r3, #1
 81151d8:	e000      	b.n	81151dc <xQueueReceive+0x44>
 81151da:	2300      	movs	r3, #0
 81151dc:	2b00      	cmp	r3, #0
 81151de:	d10a      	bne.n	81151f6 <xQueueReceive+0x5e>
	__asm volatile
 81151e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 81151e4:	f383 8811 	msr	BASEPRI, r3
 81151e8:	f3bf 8f6f 	isb	sy
 81151ec:	f3bf 8f4f 	dsb	sy
 81151f0:	61fb      	str	r3, [r7, #28]
}
 81151f2:	bf00      	nop
 81151f4:	e7fe      	b.n	81151f4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 81151f6:	f001 f8cd 	bl	8116394 <xTaskGetSchedulerState>
 81151fa:	4603      	mov	r3, r0
 81151fc:	2b00      	cmp	r3, #0
 81151fe:	d102      	bne.n	8115206 <xQueueReceive+0x6e>
 8115200:	687b      	ldr	r3, [r7, #4]
 8115202:	2b00      	cmp	r3, #0
 8115204:	d101      	bne.n	811520a <xQueueReceive+0x72>
 8115206:	2301      	movs	r3, #1
 8115208:	e000      	b.n	811520c <xQueueReceive+0x74>
 811520a:	2300      	movs	r3, #0
 811520c:	2b00      	cmp	r3, #0
 811520e:	d10a      	bne.n	8115226 <xQueueReceive+0x8e>
	__asm volatile
 8115210:	f04f 0350 	mov.w	r3, #80	; 0x50
 8115214:	f383 8811 	msr	BASEPRI, r3
 8115218:	f3bf 8f6f 	isb	sy
 811521c:	f3bf 8f4f 	dsb	sy
 8115220:	61bb      	str	r3, [r7, #24]
}
 8115222:	bf00      	nop
 8115224:	e7fe      	b.n	8115224 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8115226:	f7ff fbbd 	bl	81149a4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 811522a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 811522c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 811522e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8115230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8115232:	2b00      	cmp	r3, #0
 8115234:	d01f      	beq.n	8115276 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8115236:	68b9      	ldr	r1, [r7, #8]
 8115238:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 811523a:	f000 f977 	bl	811552c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 811523e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8115240:	1e5a      	subs	r2, r3, #1
 8115242:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8115244:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8115246:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8115248:	691b      	ldr	r3, [r3, #16]
 811524a:	2b00      	cmp	r3, #0
 811524c:	d00f      	beq.n	811526e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 811524e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8115250:	3310      	adds	r3, #16
 8115252:	4618      	mov	r0, r3
 8115254:	f000 fee0 	bl	8116018 <xTaskRemoveFromEventList>
 8115258:	4603      	mov	r3, r0
 811525a:	2b00      	cmp	r3, #0
 811525c:	d007      	beq.n	811526e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 811525e:	4b3d      	ldr	r3, [pc, #244]	; (8115354 <xQueueReceive+0x1bc>)
 8115260:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8115264:	601a      	str	r2, [r3, #0]
 8115266:	f3bf 8f4f 	dsb	sy
 811526a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 811526e:	f7ff fbc9 	bl	8114a04 <vPortExitCritical>
				return pdPASS;
 8115272:	2301      	movs	r3, #1
 8115274:	e069      	b.n	811534a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8115276:	687b      	ldr	r3, [r7, #4]
 8115278:	2b00      	cmp	r3, #0
 811527a:	d103      	bne.n	8115284 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 811527c:	f7ff fbc2 	bl	8114a04 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8115280:	2300      	movs	r3, #0
 8115282:	e062      	b.n	811534a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8115284:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8115286:	2b00      	cmp	r3, #0
 8115288:	d106      	bne.n	8115298 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 811528a:	f107 0310 	add.w	r3, r7, #16
 811528e:	4618      	mov	r0, r3
 8115290:	f000 ff26 	bl	81160e0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8115294:	2301      	movs	r3, #1
 8115296:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8115298:	f7ff fbb4 	bl	8114a04 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 811529c:	f000 fc86 	bl	8115bac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 81152a0:	f7ff fb80 	bl	81149a4 <vPortEnterCritical>
 81152a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81152a6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 81152aa:	b25b      	sxtb	r3, r3
 81152ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 81152b0:	d103      	bne.n	81152ba <xQueueReceive+0x122>
 81152b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81152b4:	2200      	movs	r2, #0
 81152b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 81152ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81152bc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 81152c0:	b25b      	sxtb	r3, r3
 81152c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 81152c6:	d103      	bne.n	81152d0 <xQueueReceive+0x138>
 81152c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81152ca:	2200      	movs	r2, #0
 81152cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 81152d0:	f7ff fb98 	bl	8114a04 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 81152d4:	1d3a      	adds	r2, r7, #4
 81152d6:	f107 0310 	add.w	r3, r7, #16
 81152da:	4611      	mov	r1, r2
 81152dc:	4618      	mov	r0, r3
 81152de:	f000 ff15 	bl	811610c <xTaskCheckForTimeOut>
 81152e2:	4603      	mov	r3, r0
 81152e4:	2b00      	cmp	r3, #0
 81152e6:	d123      	bne.n	8115330 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 81152e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 81152ea:	f000 f997 	bl	811561c <prvIsQueueEmpty>
 81152ee:	4603      	mov	r3, r0
 81152f0:	2b00      	cmp	r3, #0
 81152f2:	d017      	beq.n	8115324 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 81152f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81152f6:	3324      	adds	r3, #36	; 0x24
 81152f8:	687a      	ldr	r2, [r7, #4]
 81152fa:	4611      	mov	r1, r2
 81152fc:	4618      	mov	r0, r3
 81152fe:	f000 fe3b 	bl	8115f78 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8115302:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8115304:	f000 f938 	bl	8115578 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8115308:	f000 fc5e 	bl	8115bc8 <xTaskResumeAll>
 811530c:	4603      	mov	r3, r0
 811530e:	2b00      	cmp	r3, #0
 8115310:	d189      	bne.n	8115226 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8115312:	4b10      	ldr	r3, [pc, #64]	; (8115354 <xQueueReceive+0x1bc>)
 8115314:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8115318:	601a      	str	r2, [r3, #0]
 811531a:	f3bf 8f4f 	dsb	sy
 811531e:	f3bf 8f6f 	isb	sy
 8115322:	e780      	b.n	8115226 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8115324:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8115326:	f000 f927 	bl	8115578 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 811532a:	f000 fc4d 	bl	8115bc8 <xTaskResumeAll>
 811532e:	e77a      	b.n	8115226 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8115330:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8115332:	f000 f921 	bl	8115578 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8115336:	f000 fc47 	bl	8115bc8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 811533a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 811533c:	f000 f96e 	bl	811561c <prvIsQueueEmpty>
 8115340:	4603      	mov	r3, r0
 8115342:	2b00      	cmp	r3, #0
 8115344:	f43f af6f 	beq.w	8115226 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8115348:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 811534a:	4618      	mov	r0, r3
 811534c:	3730      	adds	r7, #48	; 0x30
 811534e:	46bd      	mov	sp, r7
 8115350:	bd80      	pop	{r7, pc}
 8115352:	bf00      	nop
 8115354:	e000ed04 	.word	0xe000ed04

08115358 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8115358:	b580      	push	{r7, lr}
 811535a:	b08e      	sub	sp, #56	; 0x38
 811535c:	af00      	add	r7, sp, #0
 811535e:	60f8      	str	r0, [r7, #12]
 8115360:	60b9      	str	r1, [r7, #8]
 8115362:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8115364:	68fb      	ldr	r3, [r7, #12]
 8115366:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8115368:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 811536a:	2b00      	cmp	r3, #0
 811536c:	d10a      	bne.n	8115384 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 811536e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8115372:	f383 8811 	msr	BASEPRI, r3
 8115376:	f3bf 8f6f 	isb	sy
 811537a:	f3bf 8f4f 	dsb	sy
 811537e:	623b      	str	r3, [r7, #32]
}
 8115380:	bf00      	nop
 8115382:	e7fe      	b.n	8115382 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8115384:	68bb      	ldr	r3, [r7, #8]
 8115386:	2b00      	cmp	r3, #0
 8115388:	d103      	bne.n	8115392 <xQueueReceiveFromISR+0x3a>
 811538a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 811538c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 811538e:	2b00      	cmp	r3, #0
 8115390:	d101      	bne.n	8115396 <xQueueReceiveFromISR+0x3e>
 8115392:	2301      	movs	r3, #1
 8115394:	e000      	b.n	8115398 <xQueueReceiveFromISR+0x40>
 8115396:	2300      	movs	r3, #0
 8115398:	2b00      	cmp	r3, #0
 811539a:	d10a      	bne.n	81153b2 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 811539c:	f04f 0350 	mov.w	r3, #80	; 0x50
 81153a0:	f383 8811 	msr	BASEPRI, r3
 81153a4:	f3bf 8f6f 	isb	sy
 81153a8:	f3bf 8f4f 	dsb	sy
 81153ac:	61fb      	str	r3, [r7, #28]
}
 81153ae:	bf00      	nop
 81153b0:	e7fe      	b.n	81153b0 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 81153b2:	f7ff fbd9 	bl	8114b68 <vPortValidateInterruptPriority>
	__asm volatile
 81153b6:	f3ef 8211 	mrs	r2, BASEPRI
 81153ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 81153be:	f383 8811 	msr	BASEPRI, r3
 81153c2:	f3bf 8f6f 	isb	sy
 81153c6:	f3bf 8f4f 	dsb	sy
 81153ca:	61ba      	str	r2, [r7, #24]
 81153cc:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 81153ce:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 81153d0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 81153d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81153d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81153d6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 81153d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81153da:	2b00      	cmp	r3, #0
 81153dc:	d02f      	beq.n	811543e <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 81153de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81153e0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 81153e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 81153e8:	68b9      	ldr	r1, [r7, #8]
 81153ea:	6b38      	ldr	r0, [r7, #48]	; 0x30
 81153ec:	f000 f89e 	bl	811552c <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 81153f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81153f2:	1e5a      	subs	r2, r3, #1
 81153f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81153f6:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 81153f8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 81153fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8115400:	d112      	bne.n	8115428 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8115402:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8115404:	691b      	ldr	r3, [r3, #16]
 8115406:	2b00      	cmp	r3, #0
 8115408:	d016      	beq.n	8115438 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 811540a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 811540c:	3310      	adds	r3, #16
 811540e:	4618      	mov	r0, r3
 8115410:	f000 fe02 	bl	8116018 <xTaskRemoveFromEventList>
 8115414:	4603      	mov	r3, r0
 8115416:	2b00      	cmp	r3, #0
 8115418:	d00e      	beq.n	8115438 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 811541a:	687b      	ldr	r3, [r7, #4]
 811541c:	2b00      	cmp	r3, #0
 811541e:	d00b      	beq.n	8115438 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8115420:	687b      	ldr	r3, [r7, #4]
 8115422:	2201      	movs	r2, #1
 8115424:	601a      	str	r2, [r3, #0]
 8115426:	e007      	b.n	8115438 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8115428:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 811542c:	3301      	adds	r3, #1
 811542e:	b2db      	uxtb	r3, r3
 8115430:	b25a      	sxtb	r2, r3
 8115432:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8115434:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8115438:	2301      	movs	r3, #1
 811543a:	637b      	str	r3, [r7, #52]	; 0x34
 811543c:	e001      	b.n	8115442 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 811543e:	2300      	movs	r3, #0
 8115440:	637b      	str	r3, [r7, #52]	; 0x34
 8115442:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8115444:	613b      	str	r3, [r7, #16]
	__asm volatile
 8115446:	693b      	ldr	r3, [r7, #16]
 8115448:	f383 8811 	msr	BASEPRI, r3
}
 811544c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 811544e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8115450:	4618      	mov	r0, r3
 8115452:	3738      	adds	r7, #56	; 0x38
 8115454:	46bd      	mov	sp, r7
 8115456:	bd80      	pop	{r7, pc}

08115458 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8115458:	b580      	push	{r7, lr}
 811545a:	b086      	sub	sp, #24
 811545c:	af00      	add	r7, sp, #0
 811545e:	60f8      	str	r0, [r7, #12]
 8115460:	60b9      	str	r1, [r7, #8]
 8115462:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8115464:	2300      	movs	r3, #0
 8115466:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8115468:	68fb      	ldr	r3, [r7, #12]
 811546a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 811546c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 811546e:	68fb      	ldr	r3, [r7, #12]
 8115470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8115472:	2b00      	cmp	r3, #0
 8115474:	d10d      	bne.n	8115492 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8115476:	68fb      	ldr	r3, [r7, #12]
 8115478:	681b      	ldr	r3, [r3, #0]
 811547a:	2b00      	cmp	r3, #0
 811547c:	d14d      	bne.n	811551a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 811547e:	68fb      	ldr	r3, [r7, #12]
 8115480:	689b      	ldr	r3, [r3, #8]
 8115482:	4618      	mov	r0, r3
 8115484:	f000 ffa4 	bl	81163d0 <xTaskPriorityDisinherit>
 8115488:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 811548a:	68fb      	ldr	r3, [r7, #12]
 811548c:	2200      	movs	r2, #0
 811548e:	609a      	str	r2, [r3, #8]
 8115490:	e043      	b.n	811551a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8115492:	687b      	ldr	r3, [r7, #4]
 8115494:	2b00      	cmp	r3, #0
 8115496:	d119      	bne.n	81154cc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8115498:	68fb      	ldr	r3, [r7, #12]
 811549a:	6858      	ldr	r0, [r3, #4]
 811549c:	68fb      	ldr	r3, [r7, #12]
 811549e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81154a0:	461a      	mov	r2, r3
 81154a2:	68b9      	ldr	r1, [r7, #8]
 81154a4:	f001 fdde 	bl	8117064 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 81154a8:	68fb      	ldr	r3, [r7, #12]
 81154aa:	685a      	ldr	r2, [r3, #4]
 81154ac:	68fb      	ldr	r3, [r7, #12]
 81154ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81154b0:	441a      	add	r2, r3
 81154b2:	68fb      	ldr	r3, [r7, #12]
 81154b4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 81154b6:	68fb      	ldr	r3, [r7, #12]
 81154b8:	685a      	ldr	r2, [r3, #4]
 81154ba:	68fb      	ldr	r3, [r7, #12]
 81154bc:	689b      	ldr	r3, [r3, #8]
 81154be:	429a      	cmp	r2, r3
 81154c0:	d32b      	bcc.n	811551a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 81154c2:	68fb      	ldr	r3, [r7, #12]
 81154c4:	681a      	ldr	r2, [r3, #0]
 81154c6:	68fb      	ldr	r3, [r7, #12]
 81154c8:	605a      	str	r2, [r3, #4]
 81154ca:	e026      	b.n	811551a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 81154cc:	68fb      	ldr	r3, [r7, #12]
 81154ce:	68d8      	ldr	r0, [r3, #12]
 81154d0:	68fb      	ldr	r3, [r7, #12]
 81154d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81154d4:	461a      	mov	r2, r3
 81154d6:	68b9      	ldr	r1, [r7, #8]
 81154d8:	f001 fdc4 	bl	8117064 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 81154dc:	68fb      	ldr	r3, [r7, #12]
 81154de:	68da      	ldr	r2, [r3, #12]
 81154e0:	68fb      	ldr	r3, [r7, #12]
 81154e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81154e4:	425b      	negs	r3, r3
 81154e6:	441a      	add	r2, r3
 81154e8:	68fb      	ldr	r3, [r7, #12]
 81154ea:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 81154ec:	68fb      	ldr	r3, [r7, #12]
 81154ee:	68da      	ldr	r2, [r3, #12]
 81154f0:	68fb      	ldr	r3, [r7, #12]
 81154f2:	681b      	ldr	r3, [r3, #0]
 81154f4:	429a      	cmp	r2, r3
 81154f6:	d207      	bcs.n	8115508 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 81154f8:	68fb      	ldr	r3, [r7, #12]
 81154fa:	689a      	ldr	r2, [r3, #8]
 81154fc:	68fb      	ldr	r3, [r7, #12]
 81154fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8115500:	425b      	negs	r3, r3
 8115502:	441a      	add	r2, r3
 8115504:	68fb      	ldr	r3, [r7, #12]
 8115506:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8115508:	687b      	ldr	r3, [r7, #4]
 811550a:	2b02      	cmp	r3, #2
 811550c:	d105      	bne.n	811551a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 811550e:	693b      	ldr	r3, [r7, #16]
 8115510:	2b00      	cmp	r3, #0
 8115512:	d002      	beq.n	811551a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8115514:	693b      	ldr	r3, [r7, #16]
 8115516:	3b01      	subs	r3, #1
 8115518:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 811551a:	693b      	ldr	r3, [r7, #16]
 811551c:	1c5a      	adds	r2, r3, #1
 811551e:	68fb      	ldr	r3, [r7, #12]
 8115520:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8115522:	697b      	ldr	r3, [r7, #20]
}
 8115524:	4618      	mov	r0, r3
 8115526:	3718      	adds	r7, #24
 8115528:	46bd      	mov	sp, r7
 811552a:	bd80      	pop	{r7, pc}

0811552c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 811552c:	b580      	push	{r7, lr}
 811552e:	b082      	sub	sp, #8
 8115530:	af00      	add	r7, sp, #0
 8115532:	6078      	str	r0, [r7, #4]
 8115534:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8115536:	687b      	ldr	r3, [r7, #4]
 8115538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 811553a:	2b00      	cmp	r3, #0
 811553c:	d018      	beq.n	8115570 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 811553e:	687b      	ldr	r3, [r7, #4]
 8115540:	68da      	ldr	r2, [r3, #12]
 8115542:	687b      	ldr	r3, [r7, #4]
 8115544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8115546:	441a      	add	r2, r3
 8115548:	687b      	ldr	r3, [r7, #4]
 811554a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 811554c:	687b      	ldr	r3, [r7, #4]
 811554e:	68da      	ldr	r2, [r3, #12]
 8115550:	687b      	ldr	r3, [r7, #4]
 8115552:	689b      	ldr	r3, [r3, #8]
 8115554:	429a      	cmp	r2, r3
 8115556:	d303      	bcc.n	8115560 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8115558:	687b      	ldr	r3, [r7, #4]
 811555a:	681a      	ldr	r2, [r3, #0]
 811555c:	687b      	ldr	r3, [r7, #4]
 811555e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8115560:	687b      	ldr	r3, [r7, #4]
 8115562:	68d9      	ldr	r1, [r3, #12]
 8115564:	687b      	ldr	r3, [r7, #4]
 8115566:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8115568:	461a      	mov	r2, r3
 811556a:	6838      	ldr	r0, [r7, #0]
 811556c:	f001 fd7a 	bl	8117064 <memcpy>
	}
}
 8115570:	bf00      	nop
 8115572:	3708      	adds	r7, #8
 8115574:	46bd      	mov	sp, r7
 8115576:	bd80      	pop	{r7, pc}

08115578 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8115578:	b580      	push	{r7, lr}
 811557a:	b084      	sub	sp, #16
 811557c:	af00      	add	r7, sp, #0
 811557e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8115580:	f7ff fa10 	bl	81149a4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8115584:	687b      	ldr	r3, [r7, #4]
 8115586:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 811558a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 811558c:	e011      	b.n	81155b2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 811558e:	687b      	ldr	r3, [r7, #4]
 8115590:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8115592:	2b00      	cmp	r3, #0
 8115594:	d012      	beq.n	81155bc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8115596:	687b      	ldr	r3, [r7, #4]
 8115598:	3324      	adds	r3, #36	; 0x24
 811559a:	4618      	mov	r0, r3
 811559c:	f000 fd3c 	bl	8116018 <xTaskRemoveFromEventList>
 81155a0:	4603      	mov	r3, r0
 81155a2:	2b00      	cmp	r3, #0
 81155a4:	d001      	beq.n	81155aa <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 81155a6:	f000 fe13 	bl	81161d0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 81155aa:	7bfb      	ldrb	r3, [r7, #15]
 81155ac:	3b01      	subs	r3, #1
 81155ae:	b2db      	uxtb	r3, r3
 81155b0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 81155b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 81155b6:	2b00      	cmp	r3, #0
 81155b8:	dce9      	bgt.n	811558e <prvUnlockQueue+0x16>
 81155ba:	e000      	b.n	81155be <prvUnlockQueue+0x46>
					break;
 81155bc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 81155be:	687b      	ldr	r3, [r7, #4]
 81155c0:	22ff      	movs	r2, #255	; 0xff
 81155c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 81155c6:	f7ff fa1d 	bl	8114a04 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 81155ca:	f7ff f9eb 	bl	81149a4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 81155ce:	687b      	ldr	r3, [r7, #4]
 81155d0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 81155d4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 81155d6:	e011      	b.n	81155fc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 81155d8:	687b      	ldr	r3, [r7, #4]
 81155da:	691b      	ldr	r3, [r3, #16]
 81155dc:	2b00      	cmp	r3, #0
 81155de:	d012      	beq.n	8115606 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 81155e0:	687b      	ldr	r3, [r7, #4]
 81155e2:	3310      	adds	r3, #16
 81155e4:	4618      	mov	r0, r3
 81155e6:	f000 fd17 	bl	8116018 <xTaskRemoveFromEventList>
 81155ea:	4603      	mov	r3, r0
 81155ec:	2b00      	cmp	r3, #0
 81155ee:	d001      	beq.n	81155f4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 81155f0:	f000 fdee 	bl	81161d0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 81155f4:	7bbb      	ldrb	r3, [r7, #14]
 81155f6:	3b01      	subs	r3, #1
 81155f8:	b2db      	uxtb	r3, r3
 81155fa:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 81155fc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8115600:	2b00      	cmp	r3, #0
 8115602:	dce9      	bgt.n	81155d8 <prvUnlockQueue+0x60>
 8115604:	e000      	b.n	8115608 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8115606:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8115608:	687b      	ldr	r3, [r7, #4]
 811560a:	22ff      	movs	r2, #255	; 0xff
 811560c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8115610:	f7ff f9f8 	bl	8114a04 <vPortExitCritical>
}
 8115614:	bf00      	nop
 8115616:	3710      	adds	r7, #16
 8115618:	46bd      	mov	sp, r7
 811561a:	bd80      	pop	{r7, pc}

0811561c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 811561c:	b580      	push	{r7, lr}
 811561e:	b084      	sub	sp, #16
 8115620:	af00      	add	r7, sp, #0
 8115622:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8115624:	f7ff f9be 	bl	81149a4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8115628:	687b      	ldr	r3, [r7, #4]
 811562a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 811562c:	2b00      	cmp	r3, #0
 811562e:	d102      	bne.n	8115636 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8115630:	2301      	movs	r3, #1
 8115632:	60fb      	str	r3, [r7, #12]
 8115634:	e001      	b.n	811563a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8115636:	2300      	movs	r3, #0
 8115638:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 811563a:	f7ff f9e3 	bl	8114a04 <vPortExitCritical>

	return xReturn;
 811563e:	68fb      	ldr	r3, [r7, #12]
}
 8115640:	4618      	mov	r0, r3
 8115642:	3710      	adds	r7, #16
 8115644:	46bd      	mov	sp, r7
 8115646:	bd80      	pop	{r7, pc}

08115648 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8115648:	b580      	push	{r7, lr}
 811564a:	b084      	sub	sp, #16
 811564c:	af00      	add	r7, sp, #0
 811564e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8115650:	f7ff f9a8 	bl	81149a4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8115654:	687b      	ldr	r3, [r7, #4]
 8115656:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8115658:	687b      	ldr	r3, [r7, #4]
 811565a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 811565c:	429a      	cmp	r2, r3
 811565e:	d102      	bne.n	8115666 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8115660:	2301      	movs	r3, #1
 8115662:	60fb      	str	r3, [r7, #12]
 8115664:	e001      	b.n	811566a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8115666:	2300      	movs	r3, #0
 8115668:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 811566a:	f7ff f9cb 	bl	8114a04 <vPortExitCritical>

	return xReturn;
 811566e:	68fb      	ldr	r3, [r7, #12]
}
 8115670:	4618      	mov	r0, r3
 8115672:	3710      	adds	r7, #16
 8115674:	46bd      	mov	sp, r7
 8115676:	bd80      	pop	{r7, pc}

08115678 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8115678:	b480      	push	{r7}
 811567a:	b085      	sub	sp, #20
 811567c:	af00      	add	r7, sp, #0
 811567e:	6078      	str	r0, [r7, #4]
 8115680:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8115682:	2300      	movs	r3, #0
 8115684:	60fb      	str	r3, [r7, #12]
 8115686:	e014      	b.n	81156b2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8115688:	4a0f      	ldr	r2, [pc, #60]	; (81156c8 <vQueueAddToRegistry+0x50>)
 811568a:	68fb      	ldr	r3, [r7, #12]
 811568c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8115690:	2b00      	cmp	r3, #0
 8115692:	d10b      	bne.n	81156ac <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8115694:	490c      	ldr	r1, [pc, #48]	; (81156c8 <vQueueAddToRegistry+0x50>)
 8115696:	68fb      	ldr	r3, [r7, #12]
 8115698:	683a      	ldr	r2, [r7, #0]
 811569a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 811569e:	4a0a      	ldr	r2, [pc, #40]	; (81156c8 <vQueueAddToRegistry+0x50>)
 81156a0:	68fb      	ldr	r3, [r7, #12]
 81156a2:	00db      	lsls	r3, r3, #3
 81156a4:	4413      	add	r3, r2
 81156a6:	687a      	ldr	r2, [r7, #4]
 81156a8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 81156aa:	e006      	b.n	81156ba <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 81156ac:	68fb      	ldr	r3, [r7, #12]
 81156ae:	3301      	adds	r3, #1
 81156b0:	60fb      	str	r3, [r7, #12]
 81156b2:	68fb      	ldr	r3, [r7, #12]
 81156b4:	2b07      	cmp	r3, #7
 81156b6:	d9e7      	bls.n	8115688 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 81156b8:	bf00      	nop
 81156ba:	bf00      	nop
 81156bc:	3714      	adds	r7, #20
 81156be:	46bd      	mov	sp, r7
 81156c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81156c4:	4770      	bx	lr
 81156c6:	bf00      	nop
 81156c8:	10007288 	.word	0x10007288

081156cc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 81156cc:	b580      	push	{r7, lr}
 81156ce:	b086      	sub	sp, #24
 81156d0:	af00      	add	r7, sp, #0
 81156d2:	60f8      	str	r0, [r7, #12]
 81156d4:	60b9      	str	r1, [r7, #8]
 81156d6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 81156d8:	68fb      	ldr	r3, [r7, #12]
 81156da:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 81156dc:	f7ff f962 	bl	81149a4 <vPortEnterCritical>
 81156e0:	697b      	ldr	r3, [r7, #20]
 81156e2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 81156e6:	b25b      	sxtb	r3, r3
 81156e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 81156ec:	d103      	bne.n	81156f6 <vQueueWaitForMessageRestricted+0x2a>
 81156ee:	697b      	ldr	r3, [r7, #20]
 81156f0:	2200      	movs	r2, #0
 81156f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 81156f6:	697b      	ldr	r3, [r7, #20]
 81156f8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 81156fc:	b25b      	sxtb	r3, r3
 81156fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8115702:	d103      	bne.n	811570c <vQueueWaitForMessageRestricted+0x40>
 8115704:	697b      	ldr	r3, [r7, #20]
 8115706:	2200      	movs	r2, #0
 8115708:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 811570c:	f7ff f97a 	bl	8114a04 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8115710:	697b      	ldr	r3, [r7, #20]
 8115712:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8115714:	2b00      	cmp	r3, #0
 8115716:	d106      	bne.n	8115726 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8115718:	697b      	ldr	r3, [r7, #20]
 811571a:	3324      	adds	r3, #36	; 0x24
 811571c:	687a      	ldr	r2, [r7, #4]
 811571e:	68b9      	ldr	r1, [r7, #8]
 8115720:	4618      	mov	r0, r3
 8115722:	f000 fc4d 	bl	8115fc0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8115726:	6978      	ldr	r0, [r7, #20]
 8115728:	f7ff ff26 	bl	8115578 <prvUnlockQueue>
	}
 811572c:	bf00      	nop
 811572e:	3718      	adds	r7, #24
 8115730:	46bd      	mov	sp, r7
 8115732:	bd80      	pop	{r7, pc}

08115734 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8115734:	b580      	push	{r7, lr}
 8115736:	b08e      	sub	sp, #56	; 0x38
 8115738:	af04      	add	r7, sp, #16
 811573a:	60f8      	str	r0, [r7, #12]
 811573c:	60b9      	str	r1, [r7, #8]
 811573e:	607a      	str	r2, [r7, #4]
 8115740:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8115742:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8115744:	2b00      	cmp	r3, #0
 8115746:	d10a      	bne.n	811575e <xTaskCreateStatic+0x2a>
	__asm volatile
 8115748:	f04f 0350 	mov.w	r3, #80	; 0x50
 811574c:	f383 8811 	msr	BASEPRI, r3
 8115750:	f3bf 8f6f 	isb	sy
 8115754:	f3bf 8f4f 	dsb	sy
 8115758:	623b      	str	r3, [r7, #32]
}
 811575a:	bf00      	nop
 811575c:	e7fe      	b.n	811575c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 811575e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8115760:	2b00      	cmp	r3, #0
 8115762:	d10a      	bne.n	811577a <xTaskCreateStatic+0x46>
	__asm volatile
 8115764:	f04f 0350 	mov.w	r3, #80	; 0x50
 8115768:	f383 8811 	msr	BASEPRI, r3
 811576c:	f3bf 8f6f 	isb	sy
 8115770:	f3bf 8f4f 	dsb	sy
 8115774:	61fb      	str	r3, [r7, #28]
}
 8115776:	bf00      	nop
 8115778:	e7fe      	b.n	8115778 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 811577a:	235c      	movs	r3, #92	; 0x5c
 811577c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 811577e:	693b      	ldr	r3, [r7, #16]
 8115780:	2b5c      	cmp	r3, #92	; 0x5c
 8115782:	d00a      	beq.n	811579a <xTaskCreateStatic+0x66>
	__asm volatile
 8115784:	f04f 0350 	mov.w	r3, #80	; 0x50
 8115788:	f383 8811 	msr	BASEPRI, r3
 811578c:	f3bf 8f6f 	isb	sy
 8115790:	f3bf 8f4f 	dsb	sy
 8115794:	61bb      	str	r3, [r7, #24]
}
 8115796:	bf00      	nop
 8115798:	e7fe      	b.n	8115798 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 811579a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 811579c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 811579e:	2b00      	cmp	r3, #0
 81157a0:	d01e      	beq.n	81157e0 <xTaskCreateStatic+0xac>
 81157a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 81157a4:	2b00      	cmp	r3, #0
 81157a6:	d01b      	beq.n	81157e0 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 81157a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81157aa:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 81157ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81157ae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 81157b0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 81157b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81157b4:	2202      	movs	r2, #2
 81157b6:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 81157ba:	2300      	movs	r3, #0
 81157bc:	9303      	str	r3, [sp, #12]
 81157be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81157c0:	9302      	str	r3, [sp, #8]
 81157c2:	f107 0314 	add.w	r3, r7, #20
 81157c6:	9301      	str	r3, [sp, #4]
 81157c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81157ca:	9300      	str	r3, [sp, #0]
 81157cc:	683b      	ldr	r3, [r7, #0]
 81157ce:	687a      	ldr	r2, [r7, #4]
 81157d0:	68b9      	ldr	r1, [r7, #8]
 81157d2:	68f8      	ldr	r0, [r7, #12]
 81157d4:	f000 f850 	bl	8115878 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 81157d8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 81157da:	f000 f8dd 	bl	8115998 <prvAddNewTaskToReadyList>
 81157de:	e001      	b.n	81157e4 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 81157e0:	2300      	movs	r3, #0
 81157e2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 81157e4:	697b      	ldr	r3, [r7, #20]
	}
 81157e6:	4618      	mov	r0, r3
 81157e8:	3728      	adds	r7, #40	; 0x28
 81157ea:	46bd      	mov	sp, r7
 81157ec:	bd80      	pop	{r7, pc}

081157ee <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 81157ee:	b580      	push	{r7, lr}
 81157f0:	b08c      	sub	sp, #48	; 0x30
 81157f2:	af04      	add	r7, sp, #16
 81157f4:	60f8      	str	r0, [r7, #12]
 81157f6:	60b9      	str	r1, [r7, #8]
 81157f8:	603b      	str	r3, [r7, #0]
 81157fa:	4613      	mov	r3, r2
 81157fc:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 81157fe:	88fb      	ldrh	r3, [r7, #6]
 8115800:	009b      	lsls	r3, r3, #2
 8115802:	4618      	mov	r0, r3
 8115804:	f7fe fd06 	bl	8114214 <pvPortMalloc>
 8115808:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 811580a:	697b      	ldr	r3, [r7, #20]
 811580c:	2b00      	cmp	r3, #0
 811580e:	d00e      	beq.n	811582e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8115810:	205c      	movs	r0, #92	; 0x5c
 8115812:	f7fe fcff 	bl	8114214 <pvPortMalloc>
 8115816:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8115818:	69fb      	ldr	r3, [r7, #28]
 811581a:	2b00      	cmp	r3, #0
 811581c:	d003      	beq.n	8115826 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 811581e:	69fb      	ldr	r3, [r7, #28]
 8115820:	697a      	ldr	r2, [r7, #20]
 8115822:	631a      	str	r2, [r3, #48]	; 0x30
 8115824:	e005      	b.n	8115832 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8115826:	6978      	ldr	r0, [r7, #20]
 8115828:	f7fe fdc0 	bl	81143ac <vPortFree>
 811582c:	e001      	b.n	8115832 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 811582e:	2300      	movs	r3, #0
 8115830:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8115832:	69fb      	ldr	r3, [r7, #28]
 8115834:	2b00      	cmp	r3, #0
 8115836:	d017      	beq.n	8115868 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8115838:	69fb      	ldr	r3, [r7, #28]
 811583a:	2200      	movs	r2, #0
 811583c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8115840:	88fa      	ldrh	r2, [r7, #6]
 8115842:	2300      	movs	r3, #0
 8115844:	9303      	str	r3, [sp, #12]
 8115846:	69fb      	ldr	r3, [r7, #28]
 8115848:	9302      	str	r3, [sp, #8]
 811584a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 811584c:	9301      	str	r3, [sp, #4]
 811584e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8115850:	9300      	str	r3, [sp, #0]
 8115852:	683b      	ldr	r3, [r7, #0]
 8115854:	68b9      	ldr	r1, [r7, #8]
 8115856:	68f8      	ldr	r0, [r7, #12]
 8115858:	f000 f80e 	bl	8115878 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 811585c:	69f8      	ldr	r0, [r7, #28]
 811585e:	f000 f89b 	bl	8115998 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8115862:	2301      	movs	r3, #1
 8115864:	61bb      	str	r3, [r7, #24]
 8115866:	e002      	b.n	811586e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8115868:	f04f 33ff 	mov.w	r3, #4294967295
 811586c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 811586e:	69bb      	ldr	r3, [r7, #24]
	}
 8115870:	4618      	mov	r0, r3
 8115872:	3720      	adds	r7, #32
 8115874:	46bd      	mov	sp, r7
 8115876:	bd80      	pop	{r7, pc}

08115878 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8115878:	b580      	push	{r7, lr}
 811587a:	b088      	sub	sp, #32
 811587c:	af00      	add	r7, sp, #0
 811587e:	60f8      	str	r0, [r7, #12]
 8115880:	60b9      	str	r1, [r7, #8]
 8115882:	607a      	str	r2, [r7, #4]
 8115884:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8115886:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8115888:	6b18      	ldr	r0, [r3, #48]	; 0x30
 811588a:	687b      	ldr	r3, [r7, #4]
 811588c:	009b      	lsls	r3, r3, #2
 811588e:	461a      	mov	r2, r3
 8115890:	21a5      	movs	r1, #165	; 0xa5
 8115892:	f001 fbf5 	bl	8117080 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8115896:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8115898:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 811589a:	687b      	ldr	r3, [r7, #4]
 811589c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 81158a0:	3b01      	subs	r3, #1
 81158a2:	009b      	lsls	r3, r3, #2
 81158a4:	4413      	add	r3, r2
 81158a6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 81158a8:	69bb      	ldr	r3, [r7, #24]
 81158aa:	f023 0307 	bic.w	r3, r3, #7
 81158ae:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 81158b0:	69bb      	ldr	r3, [r7, #24]
 81158b2:	f003 0307 	and.w	r3, r3, #7
 81158b6:	2b00      	cmp	r3, #0
 81158b8:	d00a      	beq.n	81158d0 <prvInitialiseNewTask+0x58>
	__asm volatile
 81158ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 81158be:	f383 8811 	msr	BASEPRI, r3
 81158c2:	f3bf 8f6f 	isb	sy
 81158c6:	f3bf 8f4f 	dsb	sy
 81158ca:	617b      	str	r3, [r7, #20]
}
 81158cc:	bf00      	nop
 81158ce:	e7fe      	b.n	81158ce <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 81158d0:	68bb      	ldr	r3, [r7, #8]
 81158d2:	2b00      	cmp	r3, #0
 81158d4:	d01f      	beq.n	8115916 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 81158d6:	2300      	movs	r3, #0
 81158d8:	61fb      	str	r3, [r7, #28]
 81158da:	e012      	b.n	8115902 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 81158dc:	68ba      	ldr	r2, [r7, #8]
 81158de:	69fb      	ldr	r3, [r7, #28]
 81158e0:	4413      	add	r3, r2
 81158e2:	7819      	ldrb	r1, [r3, #0]
 81158e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 81158e6:	69fb      	ldr	r3, [r7, #28]
 81158e8:	4413      	add	r3, r2
 81158ea:	3334      	adds	r3, #52	; 0x34
 81158ec:	460a      	mov	r2, r1
 81158ee:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 81158f0:	68ba      	ldr	r2, [r7, #8]
 81158f2:	69fb      	ldr	r3, [r7, #28]
 81158f4:	4413      	add	r3, r2
 81158f6:	781b      	ldrb	r3, [r3, #0]
 81158f8:	2b00      	cmp	r3, #0
 81158fa:	d006      	beq.n	811590a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 81158fc:	69fb      	ldr	r3, [r7, #28]
 81158fe:	3301      	adds	r3, #1
 8115900:	61fb      	str	r3, [r7, #28]
 8115902:	69fb      	ldr	r3, [r7, #28]
 8115904:	2b0f      	cmp	r3, #15
 8115906:	d9e9      	bls.n	81158dc <prvInitialiseNewTask+0x64>
 8115908:	e000      	b.n	811590c <prvInitialiseNewTask+0x94>
			{
				break;
 811590a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 811590c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 811590e:	2200      	movs	r2, #0
 8115910:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8115914:	e003      	b.n	811591e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8115916:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8115918:	2200      	movs	r2, #0
 811591a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 811591e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8115920:	2b37      	cmp	r3, #55	; 0x37
 8115922:	d901      	bls.n	8115928 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8115924:	2337      	movs	r3, #55	; 0x37
 8115926:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8115928:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 811592a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 811592c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 811592e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8115930:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8115932:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8115934:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8115936:	2200      	movs	r2, #0
 8115938:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 811593a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 811593c:	3304      	adds	r3, #4
 811593e:	4618      	mov	r0, r3
 8115940:	f7fe fe72 	bl	8114628 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8115944:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8115946:	3318      	adds	r3, #24
 8115948:	4618      	mov	r0, r3
 811594a:	f7fe fe6d 	bl	8114628 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 811594e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8115950:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8115952:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8115954:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8115956:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 811595a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 811595c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 811595e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8115960:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8115962:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8115964:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8115966:	2200      	movs	r2, #0
 8115968:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 811596a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 811596c:	2200      	movs	r2, #0
 811596e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8115972:	683a      	ldr	r2, [r7, #0]
 8115974:	68f9      	ldr	r1, [r7, #12]
 8115976:	69b8      	ldr	r0, [r7, #24]
 8115978:	f7fe feea 	bl	8114750 <pxPortInitialiseStack>
 811597c:	4602      	mov	r2, r0
 811597e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8115980:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8115982:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8115984:	2b00      	cmp	r3, #0
 8115986:	d002      	beq.n	811598e <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8115988:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 811598a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 811598c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 811598e:	bf00      	nop
 8115990:	3720      	adds	r7, #32
 8115992:	46bd      	mov	sp, r7
 8115994:	bd80      	pop	{r7, pc}
	...

08115998 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8115998:	b580      	push	{r7, lr}
 811599a:	b082      	sub	sp, #8
 811599c:	af00      	add	r7, sp, #0
 811599e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 81159a0:	f7ff f800 	bl	81149a4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 81159a4:	4b2d      	ldr	r3, [pc, #180]	; (8115a5c <prvAddNewTaskToReadyList+0xc4>)
 81159a6:	681b      	ldr	r3, [r3, #0]
 81159a8:	3301      	adds	r3, #1
 81159aa:	4a2c      	ldr	r2, [pc, #176]	; (8115a5c <prvAddNewTaskToReadyList+0xc4>)
 81159ac:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 81159ae:	4b2c      	ldr	r3, [pc, #176]	; (8115a60 <prvAddNewTaskToReadyList+0xc8>)
 81159b0:	681b      	ldr	r3, [r3, #0]
 81159b2:	2b00      	cmp	r3, #0
 81159b4:	d109      	bne.n	81159ca <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 81159b6:	4a2a      	ldr	r2, [pc, #168]	; (8115a60 <prvAddNewTaskToReadyList+0xc8>)
 81159b8:	687b      	ldr	r3, [r7, #4]
 81159ba:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 81159bc:	4b27      	ldr	r3, [pc, #156]	; (8115a5c <prvAddNewTaskToReadyList+0xc4>)
 81159be:	681b      	ldr	r3, [r3, #0]
 81159c0:	2b01      	cmp	r3, #1
 81159c2:	d110      	bne.n	81159e6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 81159c4:	f000 fc28 	bl	8116218 <prvInitialiseTaskLists>
 81159c8:	e00d      	b.n	81159e6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 81159ca:	4b26      	ldr	r3, [pc, #152]	; (8115a64 <prvAddNewTaskToReadyList+0xcc>)
 81159cc:	681b      	ldr	r3, [r3, #0]
 81159ce:	2b00      	cmp	r3, #0
 81159d0:	d109      	bne.n	81159e6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 81159d2:	4b23      	ldr	r3, [pc, #140]	; (8115a60 <prvAddNewTaskToReadyList+0xc8>)
 81159d4:	681b      	ldr	r3, [r3, #0]
 81159d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 81159d8:	687b      	ldr	r3, [r7, #4]
 81159da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81159dc:	429a      	cmp	r2, r3
 81159de:	d802      	bhi.n	81159e6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 81159e0:	4a1f      	ldr	r2, [pc, #124]	; (8115a60 <prvAddNewTaskToReadyList+0xc8>)
 81159e2:	687b      	ldr	r3, [r7, #4]
 81159e4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 81159e6:	4b20      	ldr	r3, [pc, #128]	; (8115a68 <prvAddNewTaskToReadyList+0xd0>)
 81159e8:	681b      	ldr	r3, [r3, #0]
 81159ea:	3301      	adds	r3, #1
 81159ec:	4a1e      	ldr	r2, [pc, #120]	; (8115a68 <prvAddNewTaskToReadyList+0xd0>)
 81159ee:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 81159f0:	4b1d      	ldr	r3, [pc, #116]	; (8115a68 <prvAddNewTaskToReadyList+0xd0>)
 81159f2:	681a      	ldr	r2, [r3, #0]
 81159f4:	687b      	ldr	r3, [r7, #4]
 81159f6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 81159f8:	687b      	ldr	r3, [r7, #4]
 81159fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 81159fc:	4b1b      	ldr	r3, [pc, #108]	; (8115a6c <prvAddNewTaskToReadyList+0xd4>)
 81159fe:	681b      	ldr	r3, [r3, #0]
 8115a00:	429a      	cmp	r2, r3
 8115a02:	d903      	bls.n	8115a0c <prvAddNewTaskToReadyList+0x74>
 8115a04:	687b      	ldr	r3, [r7, #4]
 8115a06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8115a08:	4a18      	ldr	r2, [pc, #96]	; (8115a6c <prvAddNewTaskToReadyList+0xd4>)
 8115a0a:	6013      	str	r3, [r2, #0]
 8115a0c:	687b      	ldr	r3, [r7, #4]
 8115a0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8115a10:	4613      	mov	r3, r2
 8115a12:	009b      	lsls	r3, r3, #2
 8115a14:	4413      	add	r3, r2
 8115a16:	009b      	lsls	r3, r3, #2
 8115a18:	4a15      	ldr	r2, [pc, #84]	; (8115a70 <prvAddNewTaskToReadyList+0xd8>)
 8115a1a:	441a      	add	r2, r3
 8115a1c:	687b      	ldr	r3, [r7, #4]
 8115a1e:	3304      	adds	r3, #4
 8115a20:	4619      	mov	r1, r3
 8115a22:	4610      	mov	r0, r2
 8115a24:	f7fe fe0d 	bl	8114642 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8115a28:	f7fe ffec 	bl	8114a04 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8115a2c:	4b0d      	ldr	r3, [pc, #52]	; (8115a64 <prvAddNewTaskToReadyList+0xcc>)
 8115a2e:	681b      	ldr	r3, [r3, #0]
 8115a30:	2b00      	cmp	r3, #0
 8115a32:	d00e      	beq.n	8115a52 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8115a34:	4b0a      	ldr	r3, [pc, #40]	; (8115a60 <prvAddNewTaskToReadyList+0xc8>)
 8115a36:	681b      	ldr	r3, [r3, #0]
 8115a38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8115a3a:	687b      	ldr	r3, [r7, #4]
 8115a3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8115a3e:	429a      	cmp	r2, r3
 8115a40:	d207      	bcs.n	8115a52 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8115a42:	4b0c      	ldr	r3, [pc, #48]	; (8115a74 <prvAddNewTaskToReadyList+0xdc>)
 8115a44:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8115a48:	601a      	str	r2, [r3, #0]
 8115a4a:	f3bf 8f4f 	dsb	sy
 8115a4e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8115a52:	bf00      	nop
 8115a54:	3708      	adds	r7, #8
 8115a56:	46bd      	mov	sp, r7
 8115a58:	bd80      	pop	{r7, pc}
 8115a5a:	bf00      	nop
 8115a5c:	100049dc 	.word	0x100049dc
 8115a60:	10004508 	.word	0x10004508
 8115a64:	100049e8 	.word	0x100049e8
 8115a68:	100049f8 	.word	0x100049f8
 8115a6c:	100049e4 	.word	0x100049e4
 8115a70:	1000450c 	.word	0x1000450c
 8115a74:	e000ed04 	.word	0xe000ed04

08115a78 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8115a78:	b580      	push	{r7, lr}
 8115a7a:	b084      	sub	sp, #16
 8115a7c:	af00      	add	r7, sp, #0
 8115a7e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8115a80:	2300      	movs	r3, #0
 8115a82:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8115a84:	687b      	ldr	r3, [r7, #4]
 8115a86:	2b00      	cmp	r3, #0
 8115a88:	d017      	beq.n	8115aba <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8115a8a:	4b13      	ldr	r3, [pc, #76]	; (8115ad8 <vTaskDelay+0x60>)
 8115a8c:	681b      	ldr	r3, [r3, #0]
 8115a8e:	2b00      	cmp	r3, #0
 8115a90:	d00a      	beq.n	8115aa8 <vTaskDelay+0x30>
	__asm volatile
 8115a92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8115a96:	f383 8811 	msr	BASEPRI, r3
 8115a9a:	f3bf 8f6f 	isb	sy
 8115a9e:	f3bf 8f4f 	dsb	sy
 8115aa2:	60bb      	str	r3, [r7, #8]
}
 8115aa4:	bf00      	nop
 8115aa6:	e7fe      	b.n	8115aa6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8115aa8:	f000 f880 	bl	8115bac <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8115aac:	2100      	movs	r1, #0
 8115aae:	6878      	ldr	r0, [r7, #4]
 8115ab0:	f000 fcfc 	bl	81164ac <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8115ab4:	f000 f888 	bl	8115bc8 <xTaskResumeAll>
 8115ab8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8115aba:	68fb      	ldr	r3, [r7, #12]
 8115abc:	2b00      	cmp	r3, #0
 8115abe:	d107      	bne.n	8115ad0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8115ac0:	4b06      	ldr	r3, [pc, #24]	; (8115adc <vTaskDelay+0x64>)
 8115ac2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8115ac6:	601a      	str	r2, [r3, #0]
 8115ac8:	f3bf 8f4f 	dsb	sy
 8115acc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8115ad0:	bf00      	nop
 8115ad2:	3710      	adds	r7, #16
 8115ad4:	46bd      	mov	sp, r7
 8115ad6:	bd80      	pop	{r7, pc}
 8115ad8:	10004a04 	.word	0x10004a04
 8115adc:	e000ed04 	.word	0xe000ed04

08115ae0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8115ae0:	b580      	push	{r7, lr}
 8115ae2:	b08a      	sub	sp, #40	; 0x28
 8115ae4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8115ae6:	2300      	movs	r3, #0
 8115ae8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8115aea:	2300      	movs	r3, #0
 8115aec:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8115aee:	463a      	mov	r2, r7
 8115af0:	1d39      	adds	r1, r7, #4
 8115af2:	f107 0308 	add.w	r3, r7, #8
 8115af6:	4618      	mov	r0, r3
 8115af8:	f7fe fb58 	bl	81141ac <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8115afc:	6839      	ldr	r1, [r7, #0]
 8115afe:	687b      	ldr	r3, [r7, #4]
 8115b00:	68ba      	ldr	r2, [r7, #8]
 8115b02:	9202      	str	r2, [sp, #8]
 8115b04:	9301      	str	r3, [sp, #4]
 8115b06:	2300      	movs	r3, #0
 8115b08:	9300      	str	r3, [sp, #0]
 8115b0a:	2300      	movs	r3, #0
 8115b0c:	460a      	mov	r2, r1
 8115b0e:	4921      	ldr	r1, [pc, #132]	; (8115b94 <vTaskStartScheduler+0xb4>)
 8115b10:	4821      	ldr	r0, [pc, #132]	; (8115b98 <vTaskStartScheduler+0xb8>)
 8115b12:	f7ff fe0f 	bl	8115734 <xTaskCreateStatic>
 8115b16:	4603      	mov	r3, r0
 8115b18:	4a20      	ldr	r2, [pc, #128]	; (8115b9c <vTaskStartScheduler+0xbc>)
 8115b1a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8115b1c:	4b1f      	ldr	r3, [pc, #124]	; (8115b9c <vTaskStartScheduler+0xbc>)
 8115b1e:	681b      	ldr	r3, [r3, #0]
 8115b20:	2b00      	cmp	r3, #0
 8115b22:	d002      	beq.n	8115b2a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8115b24:	2301      	movs	r3, #1
 8115b26:	617b      	str	r3, [r7, #20]
 8115b28:	e001      	b.n	8115b2e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8115b2a:	2300      	movs	r3, #0
 8115b2c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8115b2e:	697b      	ldr	r3, [r7, #20]
 8115b30:	2b01      	cmp	r3, #1
 8115b32:	d102      	bne.n	8115b3a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8115b34:	f000 fd0e 	bl	8116554 <xTimerCreateTimerTask>
 8115b38:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8115b3a:	697b      	ldr	r3, [r7, #20]
 8115b3c:	2b01      	cmp	r3, #1
 8115b3e:	d116      	bne.n	8115b6e <vTaskStartScheduler+0x8e>
	__asm volatile
 8115b40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8115b44:	f383 8811 	msr	BASEPRI, r3
 8115b48:	f3bf 8f6f 	isb	sy
 8115b4c:	f3bf 8f4f 	dsb	sy
 8115b50:	613b      	str	r3, [r7, #16]
}
 8115b52:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8115b54:	4b12      	ldr	r3, [pc, #72]	; (8115ba0 <vTaskStartScheduler+0xc0>)
 8115b56:	f04f 32ff 	mov.w	r2, #4294967295
 8115b5a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8115b5c:	4b11      	ldr	r3, [pc, #68]	; (8115ba4 <vTaskStartScheduler+0xc4>)
 8115b5e:	2201      	movs	r2, #1
 8115b60:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8115b62:	4b11      	ldr	r3, [pc, #68]	; (8115ba8 <vTaskStartScheduler+0xc8>)
 8115b64:	2200      	movs	r2, #0
 8115b66:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8115b68:	f7fe fe7a 	bl	8114860 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8115b6c:	e00e      	b.n	8115b8c <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8115b6e:	697b      	ldr	r3, [r7, #20]
 8115b70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8115b74:	d10a      	bne.n	8115b8c <vTaskStartScheduler+0xac>
	__asm volatile
 8115b76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8115b7a:	f383 8811 	msr	BASEPRI, r3
 8115b7e:	f3bf 8f6f 	isb	sy
 8115b82:	f3bf 8f4f 	dsb	sy
 8115b86:	60fb      	str	r3, [r7, #12]
}
 8115b88:	bf00      	nop
 8115b8a:	e7fe      	b.n	8115b8a <vTaskStartScheduler+0xaa>
}
 8115b8c:	bf00      	nop
 8115b8e:	3718      	adds	r7, #24
 8115b90:	46bd      	mov	sp, r7
 8115b92:	bd80      	pop	{r7, pc}
 8115b94:	08119ac0 	.word	0x08119ac0
 8115b98:	081161e9 	.word	0x081161e9
 8115b9c:	10004a00 	.word	0x10004a00
 8115ba0:	100049fc 	.word	0x100049fc
 8115ba4:	100049e8 	.word	0x100049e8
 8115ba8:	100049e0 	.word	0x100049e0

08115bac <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8115bac:	b480      	push	{r7}
 8115bae:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8115bb0:	4b04      	ldr	r3, [pc, #16]	; (8115bc4 <vTaskSuspendAll+0x18>)
 8115bb2:	681b      	ldr	r3, [r3, #0]
 8115bb4:	3301      	adds	r3, #1
 8115bb6:	4a03      	ldr	r2, [pc, #12]	; (8115bc4 <vTaskSuspendAll+0x18>)
 8115bb8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8115bba:	bf00      	nop
 8115bbc:	46bd      	mov	sp, r7
 8115bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8115bc2:	4770      	bx	lr
 8115bc4:	10004a04 	.word	0x10004a04

08115bc8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8115bc8:	b580      	push	{r7, lr}
 8115bca:	b084      	sub	sp, #16
 8115bcc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8115bce:	2300      	movs	r3, #0
 8115bd0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8115bd2:	2300      	movs	r3, #0
 8115bd4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8115bd6:	4b42      	ldr	r3, [pc, #264]	; (8115ce0 <xTaskResumeAll+0x118>)
 8115bd8:	681b      	ldr	r3, [r3, #0]
 8115bda:	2b00      	cmp	r3, #0
 8115bdc:	d10a      	bne.n	8115bf4 <xTaskResumeAll+0x2c>
	__asm volatile
 8115bde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8115be2:	f383 8811 	msr	BASEPRI, r3
 8115be6:	f3bf 8f6f 	isb	sy
 8115bea:	f3bf 8f4f 	dsb	sy
 8115bee:	603b      	str	r3, [r7, #0]
}
 8115bf0:	bf00      	nop
 8115bf2:	e7fe      	b.n	8115bf2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8115bf4:	f7fe fed6 	bl	81149a4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8115bf8:	4b39      	ldr	r3, [pc, #228]	; (8115ce0 <xTaskResumeAll+0x118>)
 8115bfa:	681b      	ldr	r3, [r3, #0]
 8115bfc:	3b01      	subs	r3, #1
 8115bfe:	4a38      	ldr	r2, [pc, #224]	; (8115ce0 <xTaskResumeAll+0x118>)
 8115c00:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8115c02:	4b37      	ldr	r3, [pc, #220]	; (8115ce0 <xTaskResumeAll+0x118>)
 8115c04:	681b      	ldr	r3, [r3, #0]
 8115c06:	2b00      	cmp	r3, #0
 8115c08:	d162      	bne.n	8115cd0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8115c0a:	4b36      	ldr	r3, [pc, #216]	; (8115ce4 <xTaskResumeAll+0x11c>)
 8115c0c:	681b      	ldr	r3, [r3, #0]
 8115c0e:	2b00      	cmp	r3, #0
 8115c10:	d05e      	beq.n	8115cd0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8115c12:	e02f      	b.n	8115c74 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8115c14:	4b34      	ldr	r3, [pc, #208]	; (8115ce8 <xTaskResumeAll+0x120>)
 8115c16:	68db      	ldr	r3, [r3, #12]
 8115c18:	68db      	ldr	r3, [r3, #12]
 8115c1a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8115c1c:	68fb      	ldr	r3, [r7, #12]
 8115c1e:	3318      	adds	r3, #24
 8115c20:	4618      	mov	r0, r3
 8115c22:	f7fe fd6b 	bl	81146fc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8115c26:	68fb      	ldr	r3, [r7, #12]
 8115c28:	3304      	adds	r3, #4
 8115c2a:	4618      	mov	r0, r3
 8115c2c:	f7fe fd66 	bl	81146fc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8115c30:	68fb      	ldr	r3, [r7, #12]
 8115c32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8115c34:	4b2d      	ldr	r3, [pc, #180]	; (8115cec <xTaskResumeAll+0x124>)
 8115c36:	681b      	ldr	r3, [r3, #0]
 8115c38:	429a      	cmp	r2, r3
 8115c3a:	d903      	bls.n	8115c44 <xTaskResumeAll+0x7c>
 8115c3c:	68fb      	ldr	r3, [r7, #12]
 8115c3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8115c40:	4a2a      	ldr	r2, [pc, #168]	; (8115cec <xTaskResumeAll+0x124>)
 8115c42:	6013      	str	r3, [r2, #0]
 8115c44:	68fb      	ldr	r3, [r7, #12]
 8115c46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8115c48:	4613      	mov	r3, r2
 8115c4a:	009b      	lsls	r3, r3, #2
 8115c4c:	4413      	add	r3, r2
 8115c4e:	009b      	lsls	r3, r3, #2
 8115c50:	4a27      	ldr	r2, [pc, #156]	; (8115cf0 <xTaskResumeAll+0x128>)
 8115c52:	441a      	add	r2, r3
 8115c54:	68fb      	ldr	r3, [r7, #12]
 8115c56:	3304      	adds	r3, #4
 8115c58:	4619      	mov	r1, r3
 8115c5a:	4610      	mov	r0, r2
 8115c5c:	f7fe fcf1 	bl	8114642 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8115c60:	68fb      	ldr	r3, [r7, #12]
 8115c62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8115c64:	4b23      	ldr	r3, [pc, #140]	; (8115cf4 <xTaskResumeAll+0x12c>)
 8115c66:	681b      	ldr	r3, [r3, #0]
 8115c68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8115c6a:	429a      	cmp	r2, r3
 8115c6c:	d302      	bcc.n	8115c74 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8115c6e:	4b22      	ldr	r3, [pc, #136]	; (8115cf8 <xTaskResumeAll+0x130>)
 8115c70:	2201      	movs	r2, #1
 8115c72:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8115c74:	4b1c      	ldr	r3, [pc, #112]	; (8115ce8 <xTaskResumeAll+0x120>)
 8115c76:	681b      	ldr	r3, [r3, #0]
 8115c78:	2b00      	cmp	r3, #0
 8115c7a:	d1cb      	bne.n	8115c14 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8115c7c:	68fb      	ldr	r3, [r7, #12]
 8115c7e:	2b00      	cmp	r3, #0
 8115c80:	d001      	beq.n	8115c86 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8115c82:	f000 fb67 	bl	8116354 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8115c86:	4b1d      	ldr	r3, [pc, #116]	; (8115cfc <xTaskResumeAll+0x134>)
 8115c88:	681b      	ldr	r3, [r3, #0]
 8115c8a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8115c8c:	687b      	ldr	r3, [r7, #4]
 8115c8e:	2b00      	cmp	r3, #0
 8115c90:	d010      	beq.n	8115cb4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8115c92:	f000 f859 	bl	8115d48 <xTaskIncrementTick>
 8115c96:	4603      	mov	r3, r0
 8115c98:	2b00      	cmp	r3, #0
 8115c9a:	d002      	beq.n	8115ca2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8115c9c:	4b16      	ldr	r3, [pc, #88]	; (8115cf8 <xTaskResumeAll+0x130>)
 8115c9e:	2201      	movs	r2, #1
 8115ca0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8115ca2:	687b      	ldr	r3, [r7, #4]
 8115ca4:	3b01      	subs	r3, #1
 8115ca6:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8115ca8:	687b      	ldr	r3, [r7, #4]
 8115caa:	2b00      	cmp	r3, #0
 8115cac:	d1f1      	bne.n	8115c92 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8115cae:	4b13      	ldr	r3, [pc, #76]	; (8115cfc <xTaskResumeAll+0x134>)
 8115cb0:	2200      	movs	r2, #0
 8115cb2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8115cb4:	4b10      	ldr	r3, [pc, #64]	; (8115cf8 <xTaskResumeAll+0x130>)
 8115cb6:	681b      	ldr	r3, [r3, #0]
 8115cb8:	2b00      	cmp	r3, #0
 8115cba:	d009      	beq.n	8115cd0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8115cbc:	2301      	movs	r3, #1
 8115cbe:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8115cc0:	4b0f      	ldr	r3, [pc, #60]	; (8115d00 <xTaskResumeAll+0x138>)
 8115cc2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8115cc6:	601a      	str	r2, [r3, #0]
 8115cc8:	f3bf 8f4f 	dsb	sy
 8115ccc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8115cd0:	f7fe fe98 	bl	8114a04 <vPortExitCritical>

	return xAlreadyYielded;
 8115cd4:	68bb      	ldr	r3, [r7, #8]
}
 8115cd6:	4618      	mov	r0, r3
 8115cd8:	3710      	adds	r7, #16
 8115cda:	46bd      	mov	sp, r7
 8115cdc:	bd80      	pop	{r7, pc}
 8115cde:	bf00      	nop
 8115ce0:	10004a04 	.word	0x10004a04
 8115ce4:	100049dc 	.word	0x100049dc
 8115ce8:	1000499c 	.word	0x1000499c
 8115cec:	100049e4 	.word	0x100049e4
 8115cf0:	1000450c 	.word	0x1000450c
 8115cf4:	10004508 	.word	0x10004508
 8115cf8:	100049f0 	.word	0x100049f0
 8115cfc:	100049ec 	.word	0x100049ec
 8115d00:	e000ed04 	.word	0xe000ed04

08115d04 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8115d04:	b480      	push	{r7}
 8115d06:	b083      	sub	sp, #12
 8115d08:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8115d0a:	4b05      	ldr	r3, [pc, #20]	; (8115d20 <xTaskGetTickCount+0x1c>)
 8115d0c:	681b      	ldr	r3, [r3, #0]
 8115d0e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8115d10:	687b      	ldr	r3, [r7, #4]
}
 8115d12:	4618      	mov	r0, r3
 8115d14:	370c      	adds	r7, #12
 8115d16:	46bd      	mov	sp, r7
 8115d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8115d1c:	4770      	bx	lr
 8115d1e:	bf00      	nop
 8115d20:	100049e0 	.word	0x100049e0

08115d24 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8115d24:	b580      	push	{r7, lr}
 8115d26:	b082      	sub	sp, #8
 8115d28:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8115d2a:	f7fe ff1d 	bl	8114b68 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8115d2e:	2300      	movs	r3, #0
 8115d30:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8115d32:	4b04      	ldr	r3, [pc, #16]	; (8115d44 <xTaskGetTickCountFromISR+0x20>)
 8115d34:	681b      	ldr	r3, [r3, #0]
 8115d36:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8115d38:	683b      	ldr	r3, [r7, #0]
}
 8115d3a:	4618      	mov	r0, r3
 8115d3c:	3708      	adds	r7, #8
 8115d3e:	46bd      	mov	sp, r7
 8115d40:	bd80      	pop	{r7, pc}
 8115d42:	bf00      	nop
 8115d44:	100049e0 	.word	0x100049e0

08115d48 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8115d48:	b580      	push	{r7, lr}
 8115d4a:	b086      	sub	sp, #24
 8115d4c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8115d4e:	2300      	movs	r3, #0
 8115d50:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8115d52:	4b4f      	ldr	r3, [pc, #316]	; (8115e90 <xTaskIncrementTick+0x148>)
 8115d54:	681b      	ldr	r3, [r3, #0]
 8115d56:	2b00      	cmp	r3, #0
 8115d58:	f040 808f 	bne.w	8115e7a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8115d5c:	4b4d      	ldr	r3, [pc, #308]	; (8115e94 <xTaskIncrementTick+0x14c>)
 8115d5e:	681b      	ldr	r3, [r3, #0]
 8115d60:	3301      	adds	r3, #1
 8115d62:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8115d64:	4a4b      	ldr	r2, [pc, #300]	; (8115e94 <xTaskIncrementTick+0x14c>)
 8115d66:	693b      	ldr	r3, [r7, #16]
 8115d68:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8115d6a:	693b      	ldr	r3, [r7, #16]
 8115d6c:	2b00      	cmp	r3, #0
 8115d6e:	d120      	bne.n	8115db2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8115d70:	4b49      	ldr	r3, [pc, #292]	; (8115e98 <xTaskIncrementTick+0x150>)
 8115d72:	681b      	ldr	r3, [r3, #0]
 8115d74:	681b      	ldr	r3, [r3, #0]
 8115d76:	2b00      	cmp	r3, #0
 8115d78:	d00a      	beq.n	8115d90 <xTaskIncrementTick+0x48>
	__asm volatile
 8115d7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8115d7e:	f383 8811 	msr	BASEPRI, r3
 8115d82:	f3bf 8f6f 	isb	sy
 8115d86:	f3bf 8f4f 	dsb	sy
 8115d8a:	603b      	str	r3, [r7, #0]
}
 8115d8c:	bf00      	nop
 8115d8e:	e7fe      	b.n	8115d8e <xTaskIncrementTick+0x46>
 8115d90:	4b41      	ldr	r3, [pc, #260]	; (8115e98 <xTaskIncrementTick+0x150>)
 8115d92:	681b      	ldr	r3, [r3, #0]
 8115d94:	60fb      	str	r3, [r7, #12]
 8115d96:	4b41      	ldr	r3, [pc, #260]	; (8115e9c <xTaskIncrementTick+0x154>)
 8115d98:	681b      	ldr	r3, [r3, #0]
 8115d9a:	4a3f      	ldr	r2, [pc, #252]	; (8115e98 <xTaskIncrementTick+0x150>)
 8115d9c:	6013      	str	r3, [r2, #0]
 8115d9e:	4a3f      	ldr	r2, [pc, #252]	; (8115e9c <xTaskIncrementTick+0x154>)
 8115da0:	68fb      	ldr	r3, [r7, #12]
 8115da2:	6013      	str	r3, [r2, #0]
 8115da4:	4b3e      	ldr	r3, [pc, #248]	; (8115ea0 <xTaskIncrementTick+0x158>)
 8115da6:	681b      	ldr	r3, [r3, #0]
 8115da8:	3301      	adds	r3, #1
 8115daa:	4a3d      	ldr	r2, [pc, #244]	; (8115ea0 <xTaskIncrementTick+0x158>)
 8115dac:	6013      	str	r3, [r2, #0]
 8115dae:	f000 fad1 	bl	8116354 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8115db2:	4b3c      	ldr	r3, [pc, #240]	; (8115ea4 <xTaskIncrementTick+0x15c>)
 8115db4:	681b      	ldr	r3, [r3, #0]
 8115db6:	693a      	ldr	r2, [r7, #16]
 8115db8:	429a      	cmp	r2, r3
 8115dba:	d349      	bcc.n	8115e50 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8115dbc:	4b36      	ldr	r3, [pc, #216]	; (8115e98 <xTaskIncrementTick+0x150>)
 8115dbe:	681b      	ldr	r3, [r3, #0]
 8115dc0:	681b      	ldr	r3, [r3, #0]
 8115dc2:	2b00      	cmp	r3, #0
 8115dc4:	d104      	bne.n	8115dd0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8115dc6:	4b37      	ldr	r3, [pc, #220]	; (8115ea4 <xTaskIncrementTick+0x15c>)
 8115dc8:	f04f 32ff 	mov.w	r2, #4294967295
 8115dcc:	601a      	str	r2, [r3, #0]
					break;
 8115dce:	e03f      	b.n	8115e50 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8115dd0:	4b31      	ldr	r3, [pc, #196]	; (8115e98 <xTaskIncrementTick+0x150>)
 8115dd2:	681b      	ldr	r3, [r3, #0]
 8115dd4:	68db      	ldr	r3, [r3, #12]
 8115dd6:	68db      	ldr	r3, [r3, #12]
 8115dd8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8115dda:	68bb      	ldr	r3, [r7, #8]
 8115ddc:	685b      	ldr	r3, [r3, #4]
 8115dde:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8115de0:	693a      	ldr	r2, [r7, #16]
 8115de2:	687b      	ldr	r3, [r7, #4]
 8115de4:	429a      	cmp	r2, r3
 8115de6:	d203      	bcs.n	8115df0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8115de8:	4a2e      	ldr	r2, [pc, #184]	; (8115ea4 <xTaskIncrementTick+0x15c>)
 8115dea:	687b      	ldr	r3, [r7, #4]
 8115dec:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8115dee:	e02f      	b.n	8115e50 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8115df0:	68bb      	ldr	r3, [r7, #8]
 8115df2:	3304      	adds	r3, #4
 8115df4:	4618      	mov	r0, r3
 8115df6:	f7fe fc81 	bl	81146fc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8115dfa:	68bb      	ldr	r3, [r7, #8]
 8115dfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8115dfe:	2b00      	cmp	r3, #0
 8115e00:	d004      	beq.n	8115e0c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8115e02:	68bb      	ldr	r3, [r7, #8]
 8115e04:	3318      	adds	r3, #24
 8115e06:	4618      	mov	r0, r3
 8115e08:	f7fe fc78 	bl	81146fc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8115e0c:	68bb      	ldr	r3, [r7, #8]
 8115e0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8115e10:	4b25      	ldr	r3, [pc, #148]	; (8115ea8 <xTaskIncrementTick+0x160>)
 8115e12:	681b      	ldr	r3, [r3, #0]
 8115e14:	429a      	cmp	r2, r3
 8115e16:	d903      	bls.n	8115e20 <xTaskIncrementTick+0xd8>
 8115e18:	68bb      	ldr	r3, [r7, #8]
 8115e1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8115e1c:	4a22      	ldr	r2, [pc, #136]	; (8115ea8 <xTaskIncrementTick+0x160>)
 8115e1e:	6013      	str	r3, [r2, #0]
 8115e20:	68bb      	ldr	r3, [r7, #8]
 8115e22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8115e24:	4613      	mov	r3, r2
 8115e26:	009b      	lsls	r3, r3, #2
 8115e28:	4413      	add	r3, r2
 8115e2a:	009b      	lsls	r3, r3, #2
 8115e2c:	4a1f      	ldr	r2, [pc, #124]	; (8115eac <xTaskIncrementTick+0x164>)
 8115e2e:	441a      	add	r2, r3
 8115e30:	68bb      	ldr	r3, [r7, #8]
 8115e32:	3304      	adds	r3, #4
 8115e34:	4619      	mov	r1, r3
 8115e36:	4610      	mov	r0, r2
 8115e38:	f7fe fc03 	bl	8114642 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8115e3c:	68bb      	ldr	r3, [r7, #8]
 8115e3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8115e40:	4b1b      	ldr	r3, [pc, #108]	; (8115eb0 <xTaskIncrementTick+0x168>)
 8115e42:	681b      	ldr	r3, [r3, #0]
 8115e44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8115e46:	429a      	cmp	r2, r3
 8115e48:	d3b8      	bcc.n	8115dbc <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8115e4a:	2301      	movs	r3, #1
 8115e4c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8115e4e:	e7b5      	b.n	8115dbc <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8115e50:	4b17      	ldr	r3, [pc, #92]	; (8115eb0 <xTaskIncrementTick+0x168>)
 8115e52:	681b      	ldr	r3, [r3, #0]
 8115e54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8115e56:	4915      	ldr	r1, [pc, #84]	; (8115eac <xTaskIncrementTick+0x164>)
 8115e58:	4613      	mov	r3, r2
 8115e5a:	009b      	lsls	r3, r3, #2
 8115e5c:	4413      	add	r3, r2
 8115e5e:	009b      	lsls	r3, r3, #2
 8115e60:	440b      	add	r3, r1
 8115e62:	681b      	ldr	r3, [r3, #0]
 8115e64:	2b01      	cmp	r3, #1
 8115e66:	d901      	bls.n	8115e6c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8115e68:	2301      	movs	r3, #1
 8115e6a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8115e6c:	4b11      	ldr	r3, [pc, #68]	; (8115eb4 <xTaskIncrementTick+0x16c>)
 8115e6e:	681b      	ldr	r3, [r3, #0]
 8115e70:	2b00      	cmp	r3, #0
 8115e72:	d007      	beq.n	8115e84 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8115e74:	2301      	movs	r3, #1
 8115e76:	617b      	str	r3, [r7, #20]
 8115e78:	e004      	b.n	8115e84 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8115e7a:	4b0f      	ldr	r3, [pc, #60]	; (8115eb8 <xTaskIncrementTick+0x170>)
 8115e7c:	681b      	ldr	r3, [r3, #0]
 8115e7e:	3301      	adds	r3, #1
 8115e80:	4a0d      	ldr	r2, [pc, #52]	; (8115eb8 <xTaskIncrementTick+0x170>)
 8115e82:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8115e84:	697b      	ldr	r3, [r7, #20]
}
 8115e86:	4618      	mov	r0, r3
 8115e88:	3718      	adds	r7, #24
 8115e8a:	46bd      	mov	sp, r7
 8115e8c:	bd80      	pop	{r7, pc}
 8115e8e:	bf00      	nop
 8115e90:	10004a04 	.word	0x10004a04
 8115e94:	100049e0 	.word	0x100049e0
 8115e98:	10004994 	.word	0x10004994
 8115e9c:	10004998 	.word	0x10004998
 8115ea0:	100049f4 	.word	0x100049f4
 8115ea4:	100049fc 	.word	0x100049fc
 8115ea8:	100049e4 	.word	0x100049e4
 8115eac:	1000450c 	.word	0x1000450c
 8115eb0:	10004508 	.word	0x10004508
 8115eb4:	100049f0 	.word	0x100049f0
 8115eb8:	100049ec 	.word	0x100049ec

08115ebc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8115ebc:	b480      	push	{r7}
 8115ebe:	b085      	sub	sp, #20
 8115ec0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8115ec2:	4b28      	ldr	r3, [pc, #160]	; (8115f64 <vTaskSwitchContext+0xa8>)
 8115ec4:	681b      	ldr	r3, [r3, #0]
 8115ec6:	2b00      	cmp	r3, #0
 8115ec8:	d003      	beq.n	8115ed2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8115eca:	4b27      	ldr	r3, [pc, #156]	; (8115f68 <vTaskSwitchContext+0xac>)
 8115ecc:	2201      	movs	r2, #1
 8115ece:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8115ed0:	e041      	b.n	8115f56 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8115ed2:	4b25      	ldr	r3, [pc, #148]	; (8115f68 <vTaskSwitchContext+0xac>)
 8115ed4:	2200      	movs	r2, #0
 8115ed6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8115ed8:	4b24      	ldr	r3, [pc, #144]	; (8115f6c <vTaskSwitchContext+0xb0>)
 8115eda:	681b      	ldr	r3, [r3, #0]
 8115edc:	60fb      	str	r3, [r7, #12]
 8115ede:	e010      	b.n	8115f02 <vTaskSwitchContext+0x46>
 8115ee0:	68fb      	ldr	r3, [r7, #12]
 8115ee2:	2b00      	cmp	r3, #0
 8115ee4:	d10a      	bne.n	8115efc <vTaskSwitchContext+0x40>
	__asm volatile
 8115ee6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8115eea:	f383 8811 	msr	BASEPRI, r3
 8115eee:	f3bf 8f6f 	isb	sy
 8115ef2:	f3bf 8f4f 	dsb	sy
 8115ef6:	607b      	str	r3, [r7, #4]
}
 8115ef8:	bf00      	nop
 8115efa:	e7fe      	b.n	8115efa <vTaskSwitchContext+0x3e>
 8115efc:	68fb      	ldr	r3, [r7, #12]
 8115efe:	3b01      	subs	r3, #1
 8115f00:	60fb      	str	r3, [r7, #12]
 8115f02:	491b      	ldr	r1, [pc, #108]	; (8115f70 <vTaskSwitchContext+0xb4>)
 8115f04:	68fa      	ldr	r2, [r7, #12]
 8115f06:	4613      	mov	r3, r2
 8115f08:	009b      	lsls	r3, r3, #2
 8115f0a:	4413      	add	r3, r2
 8115f0c:	009b      	lsls	r3, r3, #2
 8115f0e:	440b      	add	r3, r1
 8115f10:	681b      	ldr	r3, [r3, #0]
 8115f12:	2b00      	cmp	r3, #0
 8115f14:	d0e4      	beq.n	8115ee0 <vTaskSwitchContext+0x24>
 8115f16:	68fa      	ldr	r2, [r7, #12]
 8115f18:	4613      	mov	r3, r2
 8115f1a:	009b      	lsls	r3, r3, #2
 8115f1c:	4413      	add	r3, r2
 8115f1e:	009b      	lsls	r3, r3, #2
 8115f20:	4a13      	ldr	r2, [pc, #76]	; (8115f70 <vTaskSwitchContext+0xb4>)
 8115f22:	4413      	add	r3, r2
 8115f24:	60bb      	str	r3, [r7, #8]
 8115f26:	68bb      	ldr	r3, [r7, #8]
 8115f28:	685b      	ldr	r3, [r3, #4]
 8115f2a:	685a      	ldr	r2, [r3, #4]
 8115f2c:	68bb      	ldr	r3, [r7, #8]
 8115f2e:	605a      	str	r2, [r3, #4]
 8115f30:	68bb      	ldr	r3, [r7, #8]
 8115f32:	685a      	ldr	r2, [r3, #4]
 8115f34:	68bb      	ldr	r3, [r7, #8]
 8115f36:	3308      	adds	r3, #8
 8115f38:	429a      	cmp	r2, r3
 8115f3a:	d104      	bne.n	8115f46 <vTaskSwitchContext+0x8a>
 8115f3c:	68bb      	ldr	r3, [r7, #8]
 8115f3e:	685b      	ldr	r3, [r3, #4]
 8115f40:	685a      	ldr	r2, [r3, #4]
 8115f42:	68bb      	ldr	r3, [r7, #8]
 8115f44:	605a      	str	r2, [r3, #4]
 8115f46:	68bb      	ldr	r3, [r7, #8]
 8115f48:	685b      	ldr	r3, [r3, #4]
 8115f4a:	68db      	ldr	r3, [r3, #12]
 8115f4c:	4a09      	ldr	r2, [pc, #36]	; (8115f74 <vTaskSwitchContext+0xb8>)
 8115f4e:	6013      	str	r3, [r2, #0]
 8115f50:	4a06      	ldr	r2, [pc, #24]	; (8115f6c <vTaskSwitchContext+0xb0>)
 8115f52:	68fb      	ldr	r3, [r7, #12]
 8115f54:	6013      	str	r3, [r2, #0]
}
 8115f56:	bf00      	nop
 8115f58:	3714      	adds	r7, #20
 8115f5a:	46bd      	mov	sp, r7
 8115f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8115f60:	4770      	bx	lr
 8115f62:	bf00      	nop
 8115f64:	10004a04 	.word	0x10004a04
 8115f68:	100049f0 	.word	0x100049f0
 8115f6c:	100049e4 	.word	0x100049e4
 8115f70:	1000450c 	.word	0x1000450c
 8115f74:	10004508 	.word	0x10004508

08115f78 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8115f78:	b580      	push	{r7, lr}
 8115f7a:	b084      	sub	sp, #16
 8115f7c:	af00      	add	r7, sp, #0
 8115f7e:	6078      	str	r0, [r7, #4]
 8115f80:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8115f82:	687b      	ldr	r3, [r7, #4]
 8115f84:	2b00      	cmp	r3, #0
 8115f86:	d10a      	bne.n	8115f9e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8115f88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8115f8c:	f383 8811 	msr	BASEPRI, r3
 8115f90:	f3bf 8f6f 	isb	sy
 8115f94:	f3bf 8f4f 	dsb	sy
 8115f98:	60fb      	str	r3, [r7, #12]
}
 8115f9a:	bf00      	nop
 8115f9c:	e7fe      	b.n	8115f9c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8115f9e:	4b07      	ldr	r3, [pc, #28]	; (8115fbc <vTaskPlaceOnEventList+0x44>)
 8115fa0:	681b      	ldr	r3, [r3, #0]
 8115fa2:	3318      	adds	r3, #24
 8115fa4:	4619      	mov	r1, r3
 8115fa6:	6878      	ldr	r0, [r7, #4]
 8115fa8:	f7fe fb6f 	bl	811468a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8115fac:	2101      	movs	r1, #1
 8115fae:	6838      	ldr	r0, [r7, #0]
 8115fb0:	f000 fa7c 	bl	81164ac <prvAddCurrentTaskToDelayedList>
}
 8115fb4:	bf00      	nop
 8115fb6:	3710      	adds	r7, #16
 8115fb8:	46bd      	mov	sp, r7
 8115fba:	bd80      	pop	{r7, pc}
 8115fbc:	10004508 	.word	0x10004508

08115fc0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8115fc0:	b580      	push	{r7, lr}
 8115fc2:	b086      	sub	sp, #24
 8115fc4:	af00      	add	r7, sp, #0
 8115fc6:	60f8      	str	r0, [r7, #12]
 8115fc8:	60b9      	str	r1, [r7, #8]
 8115fca:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8115fcc:	68fb      	ldr	r3, [r7, #12]
 8115fce:	2b00      	cmp	r3, #0
 8115fd0:	d10a      	bne.n	8115fe8 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8115fd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8115fd6:	f383 8811 	msr	BASEPRI, r3
 8115fda:	f3bf 8f6f 	isb	sy
 8115fde:	f3bf 8f4f 	dsb	sy
 8115fe2:	617b      	str	r3, [r7, #20]
}
 8115fe4:	bf00      	nop
 8115fe6:	e7fe      	b.n	8115fe6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8115fe8:	4b0a      	ldr	r3, [pc, #40]	; (8116014 <vTaskPlaceOnEventListRestricted+0x54>)
 8115fea:	681b      	ldr	r3, [r3, #0]
 8115fec:	3318      	adds	r3, #24
 8115fee:	4619      	mov	r1, r3
 8115ff0:	68f8      	ldr	r0, [r7, #12]
 8115ff2:	f7fe fb26 	bl	8114642 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8115ff6:	687b      	ldr	r3, [r7, #4]
 8115ff8:	2b00      	cmp	r3, #0
 8115ffa:	d002      	beq.n	8116002 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8115ffc:	f04f 33ff 	mov.w	r3, #4294967295
 8116000:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8116002:	6879      	ldr	r1, [r7, #4]
 8116004:	68b8      	ldr	r0, [r7, #8]
 8116006:	f000 fa51 	bl	81164ac <prvAddCurrentTaskToDelayedList>
	}
 811600a:	bf00      	nop
 811600c:	3718      	adds	r7, #24
 811600e:	46bd      	mov	sp, r7
 8116010:	bd80      	pop	{r7, pc}
 8116012:	bf00      	nop
 8116014:	10004508 	.word	0x10004508

08116018 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8116018:	b580      	push	{r7, lr}
 811601a:	b086      	sub	sp, #24
 811601c:	af00      	add	r7, sp, #0
 811601e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8116020:	687b      	ldr	r3, [r7, #4]
 8116022:	68db      	ldr	r3, [r3, #12]
 8116024:	68db      	ldr	r3, [r3, #12]
 8116026:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8116028:	693b      	ldr	r3, [r7, #16]
 811602a:	2b00      	cmp	r3, #0
 811602c:	d10a      	bne.n	8116044 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 811602e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8116032:	f383 8811 	msr	BASEPRI, r3
 8116036:	f3bf 8f6f 	isb	sy
 811603a:	f3bf 8f4f 	dsb	sy
 811603e:	60fb      	str	r3, [r7, #12]
}
 8116040:	bf00      	nop
 8116042:	e7fe      	b.n	8116042 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8116044:	693b      	ldr	r3, [r7, #16]
 8116046:	3318      	adds	r3, #24
 8116048:	4618      	mov	r0, r3
 811604a:	f7fe fb57 	bl	81146fc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 811604e:	4b1e      	ldr	r3, [pc, #120]	; (81160c8 <xTaskRemoveFromEventList+0xb0>)
 8116050:	681b      	ldr	r3, [r3, #0]
 8116052:	2b00      	cmp	r3, #0
 8116054:	d11d      	bne.n	8116092 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8116056:	693b      	ldr	r3, [r7, #16]
 8116058:	3304      	adds	r3, #4
 811605a:	4618      	mov	r0, r3
 811605c:	f7fe fb4e 	bl	81146fc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8116060:	693b      	ldr	r3, [r7, #16]
 8116062:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8116064:	4b19      	ldr	r3, [pc, #100]	; (81160cc <xTaskRemoveFromEventList+0xb4>)
 8116066:	681b      	ldr	r3, [r3, #0]
 8116068:	429a      	cmp	r2, r3
 811606a:	d903      	bls.n	8116074 <xTaskRemoveFromEventList+0x5c>
 811606c:	693b      	ldr	r3, [r7, #16]
 811606e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8116070:	4a16      	ldr	r2, [pc, #88]	; (81160cc <xTaskRemoveFromEventList+0xb4>)
 8116072:	6013      	str	r3, [r2, #0]
 8116074:	693b      	ldr	r3, [r7, #16]
 8116076:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8116078:	4613      	mov	r3, r2
 811607a:	009b      	lsls	r3, r3, #2
 811607c:	4413      	add	r3, r2
 811607e:	009b      	lsls	r3, r3, #2
 8116080:	4a13      	ldr	r2, [pc, #76]	; (81160d0 <xTaskRemoveFromEventList+0xb8>)
 8116082:	441a      	add	r2, r3
 8116084:	693b      	ldr	r3, [r7, #16]
 8116086:	3304      	adds	r3, #4
 8116088:	4619      	mov	r1, r3
 811608a:	4610      	mov	r0, r2
 811608c:	f7fe fad9 	bl	8114642 <vListInsertEnd>
 8116090:	e005      	b.n	811609e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8116092:	693b      	ldr	r3, [r7, #16]
 8116094:	3318      	adds	r3, #24
 8116096:	4619      	mov	r1, r3
 8116098:	480e      	ldr	r0, [pc, #56]	; (81160d4 <xTaskRemoveFromEventList+0xbc>)
 811609a:	f7fe fad2 	bl	8114642 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 811609e:	693b      	ldr	r3, [r7, #16]
 81160a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 81160a2:	4b0d      	ldr	r3, [pc, #52]	; (81160d8 <xTaskRemoveFromEventList+0xc0>)
 81160a4:	681b      	ldr	r3, [r3, #0]
 81160a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81160a8:	429a      	cmp	r2, r3
 81160aa:	d905      	bls.n	81160b8 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 81160ac:	2301      	movs	r3, #1
 81160ae:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 81160b0:	4b0a      	ldr	r3, [pc, #40]	; (81160dc <xTaskRemoveFromEventList+0xc4>)
 81160b2:	2201      	movs	r2, #1
 81160b4:	601a      	str	r2, [r3, #0]
 81160b6:	e001      	b.n	81160bc <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 81160b8:	2300      	movs	r3, #0
 81160ba:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 81160bc:	697b      	ldr	r3, [r7, #20]
}
 81160be:	4618      	mov	r0, r3
 81160c0:	3718      	adds	r7, #24
 81160c2:	46bd      	mov	sp, r7
 81160c4:	bd80      	pop	{r7, pc}
 81160c6:	bf00      	nop
 81160c8:	10004a04 	.word	0x10004a04
 81160cc:	100049e4 	.word	0x100049e4
 81160d0:	1000450c 	.word	0x1000450c
 81160d4:	1000499c 	.word	0x1000499c
 81160d8:	10004508 	.word	0x10004508
 81160dc:	100049f0 	.word	0x100049f0

081160e0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 81160e0:	b480      	push	{r7}
 81160e2:	b083      	sub	sp, #12
 81160e4:	af00      	add	r7, sp, #0
 81160e6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 81160e8:	4b06      	ldr	r3, [pc, #24]	; (8116104 <vTaskInternalSetTimeOutState+0x24>)
 81160ea:	681a      	ldr	r2, [r3, #0]
 81160ec:	687b      	ldr	r3, [r7, #4]
 81160ee:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 81160f0:	4b05      	ldr	r3, [pc, #20]	; (8116108 <vTaskInternalSetTimeOutState+0x28>)
 81160f2:	681a      	ldr	r2, [r3, #0]
 81160f4:	687b      	ldr	r3, [r7, #4]
 81160f6:	605a      	str	r2, [r3, #4]
}
 81160f8:	bf00      	nop
 81160fa:	370c      	adds	r7, #12
 81160fc:	46bd      	mov	sp, r7
 81160fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8116102:	4770      	bx	lr
 8116104:	100049f4 	.word	0x100049f4
 8116108:	100049e0 	.word	0x100049e0

0811610c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 811610c:	b580      	push	{r7, lr}
 811610e:	b088      	sub	sp, #32
 8116110:	af00      	add	r7, sp, #0
 8116112:	6078      	str	r0, [r7, #4]
 8116114:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8116116:	687b      	ldr	r3, [r7, #4]
 8116118:	2b00      	cmp	r3, #0
 811611a:	d10a      	bne.n	8116132 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 811611c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8116120:	f383 8811 	msr	BASEPRI, r3
 8116124:	f3bf 8f6f 	isb	sy
 8116128:	f3bf 8f4f 	dsb	sy
 811612c:	613b      	str	r3, [r7, #16]
}
 811612e:	bf00      	nop
 8116130:	e7fe      	b.n	8116130 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8116132:	683b      	ldr	r3, [r7, #0]
 8116134:	2b00      	cmp	r3, #0
 8116136:	d10a      	bne.n	811614e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8116138:	f04f 0350 	mov.w	r3, #80	; 0x50
 811613c:	f383 8811 	msr	BASEPRI, r3
 8116140:	f3bf 8f6f 	isb	sy
 8116144:	f3bf 8f4f 	dsb	sy
 8116148:	60fb      	str	r3, [r7, #12]
}
 811614a:	bf00      	nop
 811614c:	e7fe      	b.n	811614c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 811614e:	f7fe fc29 	bl	81149a4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8116152:	4b1d      	ldr	r3, [pc, #116]	; (81161c8 <xTaskCheckForTimeOut+0xbc>)
 8116154:	681b      	ldr	r3, [r3, #0]
 8116156:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8116158:	687b      	ldr	r3, [r7, #4]
 811615a:	685b      	ldr	r3, [r3, #4]
 811615c:	69ba      	ldr	r2, [r7, #24]
 811615e:	1ad3      	subs	r3, r2, r3
 8116160:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8116162:	683b      	ldr	r3, [r7, #0]
 8116164:	681b      	ldr	r3, [r3, #0]
 8116166:	f1b3 3fff 	cmp.w	r3, #4294967295
 811616a:	d102      	bne.n	8116172 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 811616c:	2300      	movs	r3, #0
 811616e:	61fb      	str	r3, [r7, #28]
 8116170:	e023      	b.n	81161ba <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8116172:	687b      	ldr	r3, [r7, #4]
 8116174:	681a      	ldr	r2, [r3, #0]
 8116176:	4b15      	ldr	r3, [pc, #84]	; (81161cc <xTaskCheckForTimeOut+0xc0>)
 8116178:	681b      	ldr	r3, [r3, #0]
 811617a:	429a      	cmp	r2, r3
 811617c:	d007      	beq.n	811618e <xTaskCheckForTimeOut+0x82>
 811617e:	687b      	ldr	r3, [r7, #4]
 8116180:	685b      	ldr	r3, [r3, #4]
 8116182:	69ba      	ldr	r2, [r7, #24]
 8116184:	429a      	cmp	r2, r3
 8116186:	d302      	bcc.n	811618e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8116188:	2301      	movs	r3, #1
 811618a:	61fb      	str	r3, [r7, #28]
 811618c:	e015      	b.n	81161ba <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 811618e:	683b      	ldr	r3, [r7, #0]
 8116190:	681b      	ldr	r3, [r3, #0]
 8116192:	697a      	ldr	r2, [r7, #20]
 8116194:	429a      	cmp	r2, r3
 8116196:	d20b      	bcs.n	81161b0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8116198:	683b      	ldr	r3, [r7, #0]
 811619a:	681a      	ldr	r2, [r3, #0]
 811619c:	697b      	ldr	r3, [r7, #20]
 811619e:	1ad2      	subs	r2, r2, r3
 81161a0:	683b      	ldr	r3, [r7, #0]
 81161a2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 81161a4:	6878      	ldr	r0, [r7, #4]
 81161a6:	f7ff ff9b 	bl	81160e0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 81161aa:	2300      	movs	r3, #0
 81161ac:	61fb      	str	r3, [r7, #28]
 81161ae:	e004      	b.n	81161ba <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 81161b0:	683b      	ldr	r3, [r7, #0]
 81161b2:	2200      	movs	r2, #0
 81161b4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 81161b6:	2301      	movs	r3, #1
 81161b8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 81161ba:	f7fe fc23 	bl	8114a04 <vPortExitCritical>

	return xReturn;
 81161be:	69fb      	ldr	r3, [r7, #28]
}
 81161c0:	4618      	mov	r0, r3
 81161c2:	3720      	adds	r7, #32
 81161c4:	46bd      	mov	sp, r7
 81161c6:	bd80      	pop	{r7, pc}
 81161c8:	100049e0 	.word	0x100049e0
 81161cc:	100049f4 	.word	0x100049f4

081161d0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 81161d0:	b480      	push	{r7}
 81161d2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 81161d4:	4b03      	ldr	r3, [pc, #12]	; (81161e4 <vTaskMissedYield+0x14>)
 81161d6:	2201      	movs	r2, #1
 81161d8:	601a      	str	r2, [r3, #0]
}
 81161da:	bf00      	nop
 81161dc:	46bd      	mov	sp, r7
 81161de:	f85d 7b04 	ldr.w	r7, [sp], #4
 81161e2:	4770      	bx	lr
 81161e4:	100049f0 	.word	0x100049f0

081161e8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 81161e8:	b580      	push	{r7, lr}
 81161ea:	b082      	sub	sp, #8
 81161ec:	af00      	add	r7, sp, #0
 81161ee:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 81161f0:	f000 f852 	bl	8116298 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 81161f4:	4b06      	ldr	r3, [pc, #24]	; (8116210 <prvIdleTask+0x28>)
 81161f6:	681b      	ldr	r3, [r3, #0]
 81161f8:	2b01      	cmp	r3, #1
 81161fa:	d9f9      	bls.n	81161f0 <prvIdleTask+0x8>
			{
				taskYIELD();
 81161fc:	4b05      	ldr	r3, [pc, #20]	; (8116214 <prvIdleTask+0x2c>)
 81161fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8116202:	601a      	str	r2, [r3, #0]
 8116204:	f3bf 8f4f 	dsb	sy
 8116208:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 811620c:	e7f0      	b.n	81161f0 <prvIdleTask+0x8>
 811620e:	bf00      	nop
 8116210:	1000450c 	.word	0x1000450c
 8116214:	e000ed04 	.word	0xe000ed04

08116218 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8116218:	b580      	push	{r7, lr}
 811621a:	b082      	sub	sp, #8
 811621c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 811621e:	2300      	movs	r3, #0
 8116220:	607b      	str	r3, [r7, #4]
 8116222:	e00c      	b.n	811623e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8116224:	687a      	ldr	r2, [r7, #4]
 8116226:	4613      	mov	r3, r2
 8116228:	009b      	lsls	r3, r3, #2
 811622a:	4413      	add	r3, r2
 811622c:	009b      	lsls	r3, r3, #2
 811622e:	4a12      	ldr	r2, [pc, #72]	; (8116278 <prvInitialiseTaskLists+0x60>)
 8116230:	4413      	add	r3, r2
 8116232:	4618      	mov	r0, r3
 8116234:	f7fe f9d8 	bl	81145e8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8116238:	687b      	ldr	r3, [r7, #4]
 811623a:	3301      	adds	r3, #1
 811623c:	607b      	str	r3, [r7, #4]
 811623e:	687b      	ldr	r3, [r7, #4]
 8116240:	2b37      	cmp	r3, #55	; 0x37
 8116242:	d9ef      	bls.n	8116224 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8116244:	480d      	ldr	r0, [pc, #52]	; (811627c <prvInitialiseTaskLists+0x64>)
 8116246:	f7fe f9cf 	bl	81145e8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 811624a:	480d      	ldr	r0, [pc, #52]	; (8116280 <prvInitialiseTaskLists+0x68>)
 811624c:	f7fe f9cc 	bl	81145e8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8116250:	480c      	ldr	r0, [pc, #48]	; (8116284 <prvInitialiseTaskLists+0x6c>)
 8116252:	f7fe f9c9 	bl	81145e8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8116256:	480c      	ldr	r0, [pc, #48]	; (8116288 <prvInitialiseTaskLists+0x70>)
 8116258:	f7fe f9c6 	bl	81145e8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 811625c:	480b      	ldr	r0, [pc, #44]	; (811628c <prvInitialiseTaskLists+0x74>)
 811625e:	f7fe f9c3 	bl	81145e8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8116262:	4b0b      	ldr	r3, [pc, #44]	; (8116290 <prvInitialiseTaskLists+0x78>)
 8116264:	4a05      	ldr	r2, [pc, #20]	; (811627c <prvInitialiseTaskLists+0x64>)
 8116266:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8116268:	4b0a      	ldr	r3, [pc, #40]	; (8116294 <prvInitialiseTaskLists+0x7c>)
 811626a:	4a05      	ldr	r2, [pc, #20]	; (8116280 <prvInitialiseTaskLists+0x68>)
 811626c:	601a      	str	r2, [r3, #0]
}
 811626e:	bf00      	nop
 8116270:	3708      	adds	r7, #8
 8116272:	46bd      	mov	sp, r7
 8116274:	bd80      	pop	{r7, pc}
 8116276:	bf00      	nop
 8116278:	1000450c 	.word	0x1000450c
 811627c:	1000496c 	.word	0x1000496c
 8116280:	10004980 	.word	0x10004980
 8116284:	1000499c 	.word	0x1000499c
 8116288:	100049b0 	.word	0x100049b0
 811628c:	100049c8 	.word	0x100049c8
 8116290:	10004994 	.word	0x10004994
 8116294:	10004998 	.word	0x10004998

08116298 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8116298:	b580      	push	{r7, lr}
 811629a:	b082      	sub	sp, #8
 811629c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 811629e:	e019      	b.n	81162d4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 81162a0:	f7fe fb80 	bl	81149a4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 81162a4:	4b10      	ldr	r3, [pc, #64]	; (81162e8 <prvCheckTasksWaitingTermination+0x50>)
 81162a6:	68db      	ldr	r3, [r3, #12]
 81162a8:	68db      	ldr	r3, [r3, #12]
 81162aa:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 81162ac:	687b      	ldr	r3, [r7, #4]
 81162ae:	3304      	adds	r3, #4
 81162b0:	4618      	mov	r0, r3
 81162b2:	f7fe fa23 	bl	81146fc <uxListRemove>
				--uxCurrentNumberOfTasks;
 81162b6:	4b0d      	ldr	r3, [pc, #52]	; (81162ec <prvCheckTasksWaitingTermination+0x54>)
 81162b8:	681b      	ldr	r3, [r3, #0]
 81162ba:	3b01      	subs	r3, #1
 81162bc:	4a0b      	ldr	r2, [pc, #44]	; (81162ec <prvCheckTasksWaitingTermination+0x54>)
 81162be:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 81162c0:	4b0b      	ldr	r3, [pc, #44]	; (81162f0 <prvCheckTasksWaitingTermination+0x58>)
 81162c2:	681b      	ldr	r3, [r3, #0]
 81162c4:	3b01      	subs	r3, #1
 81162c6:	4a0a      	ldr	r2, [pc, #40]	; (81162f0 <prvCheckTasksWaitingTermination+0x58>)
 81162c8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 81162ca:	f7fe fb9b 	bl	8114a04 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 81162ce:	6878      	ldr	r0, [r7, #4]
 81162d0:	f000 f810 	bl	81162f4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 81162d4:	4b06      	ldr	r3, [pc, #24]	; (81162f0 <prvCheckTasksWaitingTermination+0x58>)
 81162d6:	681b      	ldr	r3, [r3, #0]
 81162d8:	2b00      	cmp	r3, #0
 81162da:	d1e1      	bne.n	81162a0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 81162dc:	bf00      	nop
 81162de:	bf00      	nop
 81162e0:	3708      	adds	r7, #8
 81162e2:	46bd      	mov	sp, r7
 81162e4:	bd80      	pop	{r7, pc}
 81162e6:	bf00      	nop
 81162e8:	100049b0 	.word	0x100049b0
 81162ec:	100049dc 	.word	0x100049dc
 81162f0:	100049c4 	.word	0x100049c4

081162f4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 81162f4:	b580      	push	{r7, lr}
 81162f6:	b084      	sub	sp, #16
 81162f8:	af00      	add	r7, sp, #0
 81162fa:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 81162fc:	687b      	ldr	r3, [r7, #4]
 81162fe:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8116302:	2b00      	cmp	r3, #0
 8116304:	d108      	bne.n	8116318 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8116306:	687b      	ldr	r3, [r7, #4]
 8116308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 811630a:	4618      	mov	r0, r3
 811630c:	f7fe f84e 	bl	81143ac <vPortFree>
				vPortFree( pxTCB );
 8116310:	6878      	ldr	r0, [r7, #4]
 8116312:	f7fe f84b 	bl	81143ac <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8116316:	e018      	b.n	811634a <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8116318:	687b      	ldr	r3, [r7, #4]
 811631a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 811631e:	2b01      	cmp	r3, #1
 8116320:	d103      	bne.n	811632a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8116322:	6878      	ldr	r0, [r7, #4]
 8116324:	f7fe f842 	bl	81143ac <vPortFree>
	}
 8116328:	e00f      	b.n	811634a <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 811632a:	687b      	ldr	r3, [r7, #4]
 811632c:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8116330:	2b02      	cmp	r3, #2
 8116332:	d00a      	beq.n	811634a <prvDeleteTCB+0x56>
	__asm volatile
 8116334:	f04f 0350 	mov.w	r3, #80	; 0x50
 8116338:	f383 8811 	msr	BASEPRI, r3
 811633c:	f3bf 8f6f 	isb	sy
 8116340:	f3bf 8f4f 	dsb	sy
 8116344:	60fb      	str	r3, [r7, #12]
}
 8116346:	bf00      	nop
 8116348:	e7fe      	b.n	8116348 <prvDeleteTCB+0x54>
	}
 811634a:	bf00      	nop
 811634c:	3710      	adds	r7, #16
 811634e:	46bd      	mov	sp, r7
 8116350:	bd80      	pop	{r7, pc}
	...

08116354 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8116354:	b480      	push	{r7}
 8116356:	b083      	sub	sp, #12
 8116358:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 811635a:	4b0c      	ldr	r3, [pc, #48]	; (811638c <prvResetNextTaskUnblockTime+0x38>)
 811635c:	681b      	ldr	r3, [r3, #0]
 811635e:	681b      	ldr	r3, [r3, #0]
 8116360:	2b00      	cmp	r3, #0
 8116362:	d104      	bne.n	811636e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8116364:	4b0a      	ldr	r3, [pc, #40]	; (8116390 <prvResetNextTaskUnblockTime+0x3c>)
 8116366:	f04f 32ff 	mov.w	r2, #4294967295
 811636a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 811636c:	e008      	b.n	8116380 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 811636e:	4b07      	ldr	r3, [pc, #28]	; (811638c <prvResetNextTaskUnblockTime+0x38>)
 8116370:	681b      	ldr	r3, [r3, #0]
 8116372:	68db      	ldr	r3, [r3, #12]
 8116374:	68db      	ldr	r3, [r3, #12]
 8116376:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8116378:	687b      	ldr	r3, [r7, #4]
 811637a:	685b      	ldr	r3, [r3, #4]
 811637c:	4a04      	ldr	r2, [pc, #16]	; (8116390 <prvResetNextTaskUnblockTime+0x3c>)
 811637e:	6013      	str	r3, [r2, #0]
}
 8116380:	bf00      	nop
 8116382:	370c      	adds	r7, #12
 8116384:	46bd      	mov	sp, r7
 8116386:	f85d 7b04 	ldr.w	r7, [sp], #4
 811638a:	4770      	bx	lr
 811638c:	10004994 	.word	0x10004994
 8116390:	100049fc 	.word	0x100049fc

08116394 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8116394:	b480      	push	{r7}
 8116396:	b083      	sub	sp, #12
 8116398:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 811639a:	4b0b      	ldr	r3, [pc, #44]	; (81163c8 <xTaskGetSchedulerState+0x34>)
 811639c:	681b      	ldr	r3, [r3, #0]
 811639e:	2b00      	cmp	r3, #0
 81163a0:	d102      	bne.n	81163a8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 81163a2:	2301      	movs	r3, #1
 81163a4:	607b      	str	r3, [r7, #4]
 81163a6:	e008      	b.n	81163ba <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 81163a8:	4b08      	ldr	r3, [pc, #32]	; (81163cc <xTaskGetSchedulerState+0x38>)
 81163aa:	681b      	ldr	r3, [r3, #0]
 81163ac:	2b00      	cmp	r3, #0
 81163ae:	d102      	bne.n	81163b6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 81163b0:	2302      	movs	r3, #2
 81163b2:	607b      	str	r3, [r7, #4]
 81163b4:	e001      	b.n	81163ba <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 81163b6:	2300      	movs	r3, #0
 81163b8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 81163ba:	687b      	ldr	r3, [r7, #4]
	}
 81163bc:	4618      	mov	r0, r3
 81163be:	370c      	adds	r7, #12
 81163c0:	46bd      	mov	sp, r7
 81163c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81163c6:	4770      	bx	lr
 81163c8:	100049e8 	.word	0x100049e8
 81163cc:	10004a04 	.word	0x10004a04

081163d0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 81163d0:	b580      	push	{r7, lr}
 81163d2:	b086      	sub	sp, #24
 81163d4:	af00      	add	r7, sp, #0
 81163d6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 81163d8:	687b      	ldr	r3, [r7, #4]
 81163da:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 81163dc:	2300      	movs	r3, #0
 81163de:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 81163e0:	687b      	ldr	r3, [r7, #4]
 81163e2:	2b00      	cmp	r3, #0
 81163e4:	d056      	beq.n	8116494 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 81163e6:	4b2e      	ldr	r3, [pc, #184]	; (81164a0 <xTaskPriorityDisinherit+0xd0>)
 81163e8:	681b      	ldr	r3, [r3, #0]
 81163ea:	693a      	ldr	r2, [r7, #16]
 81163ec:	429a      	cmp	r2, r3
 81163ee:	d00a      	beq.n	8116406 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 81163f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 81163f4:	f383 8811 	msr	BASEPRI, r3
 81163f8:	f3bf 8f6f 	isb	sy
 81163fc:	f3bf 8f4f 	dsb	sy
 8116400:	60fb      	str	r3, [r7, #12]
}
 8116402:	bf00      	nop
 8116404:	e7fe      	b.n	8116404 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8116406:	693b      	ldr	r3, [r7, #16]
 8116408:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 811640a:	2b00      	cmp	r3, #0
 811640c:	d10a      	bne.n	8116424 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 811640e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8116412:	f383 8811 	msr	BASEPRI, r3
 8116416:	f3bf 8f6f 	isb	sy
 811641a:	f3bf 8f4f 	dsb	sy
 811641e:	60bb      	str	r3, [r7, #8]
}
 8116420:	bf00      	nop
 8116422:	e7fe      	b.n	8116422 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8116424:	693b      	ldr	r3, [r7, #16]
 8116426:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8116428:	1e5a      	subs	r2, r3, #1
 811642a:	693b      	ldr	r3, [r7, #16]
 811642c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 811642e:	693b      	ldr	r3, [r7, #16]
 8116430:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8116432:	693b      	ldr	r3, [r7, #16]
 8116434:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8116436:	429a      	cmp	r2, r3
 8116438:	d02c      	beq.n	8116494 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 811643a:	693b      	ldr	r3, [r7, #16]
 811643c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 811643e:	2b00      	cmp	r3, #0
 8116440:	d128      	bne.n	8116494 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8116442:	693b      	ldr	r3, [r7, #16]
 8116444:	3304      	adds	r3, #4
 8116446:	4618      	mov	r0, r3
 8116448:	f7fe f958 	bl	81146fc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 811644c:	693b      	ldr	r3, [r7, #16]
 811644e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8116450:	693b      	ldr	r3, [r7, #16]
 8116452:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8116454:	693b      	ldr	r3, [r7, #16]
 8116456:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8116458:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 811645c:	693b      	ldr	r3, [r7, #16]
 811645e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8116460:	693b      	ldr	r3, [r7, #16]
 8116462:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8116464:	4b0f      	ldr	r3, [pc, #60]	; (81164a4 <xTaskPriorityDisinherit+0xd4>)
 8116466:	681b      	ldr	r3, [r3, #0]
 8116468:	429a      	cmp	r2, r3
 811646a:	d903      	bls.n	8116474 <xTaskPriorityDisinherit+0xa4>
 811646c:	693b      	ldr	r3, [r7, #16]
 811646e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8116470:	4a0c      	ldr	r2, [pc, #48]	; (81164a4 <xTaskPriorityDisinherit+0xd4>)
 8116472:	6013      	str	r3, [r2, #0]
 8116474:	693b      	ldr	r3, [r7, #16]
 8116476:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8116478:	4613      	mov	r3, r2
 811647a:	009b      	lsls	r3, r3, #2
 811647c:	4413      	add	r3, r2
 811647e:	009b      	lsls	r3, r3, #2
 8116480:	4a09      	ldr	r2, [pc, #36]	; (81164a8 <xTaskPriorityDisinherit+0xd8>)
 8116482:	441a      	add	r2, r3
 8116484:	693b      	ldr	r3, [r7, #16]
 8116486:	3304      	adds	r3, #4
 8116488:	4619      	mov	r1, r3
 811648a:	4610      	mov	r0, r2
 811648c:	f7fe f8d9 	bl	8114642 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8116490:	2301      	movs	r3, #1
 8116492:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8116494:	697b      	ldr	r3, [r7, #20]
	}
 8116496:	4618      	mov	r0, r3
 8116498:	3718      	adds	r7, #24
 811649a:	46bd      	mov	sp, r7
 811649c:	bd80      	pop	{r7, pc}
 811649e:	bf00      	nop
 81164a0:	10004508 	.word	0x10004508
 81164a4:	100049e4 	.word	0x100049e4
 81164a8:	1000450c 	.word	0x1000450c

081164ac <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 81164ac:	b580      	push	{r7, lr}
 81164ae:	b084      	sub	sp, #16
 81164b0:	af00      	add	r7, sp, #0
 81164b2:	6078      	str	r0, [r7, #4]
 81164b4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 81164b6:	4b21      	ldr	r3, [pc, #132]	; (811653c <prvAddCurrentTaskToDelayedList+0x90>)
 81164b8:	681b      	ldr	r3, [r3, #0]
 81164ba:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 81164bc:	4b20      	ldr	r3, [pc, #128]	; (8116540 <prvAddCurrentTaskToDelayedList+0x94>)
 81164be:	681b      	ldr	r3, [r3, #0]
 81164c0:	3304      	adds	r3, #4
 81164c2:	4618      	mov	r0, r3
 81164c4:	f7fe f91a 	bl	81146fc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 81164c8:	687b      	ldr	r3, [r7, #4]
 81164ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 81164ce:	d10a      	bne.n	81164e6 <prvAddCurrentTaskToDelayedList+0x3a>
 81164d0:	683b      	ldr	r3, [r7, #0]
 81164d2:	2b00      	cmp	r3, #0
 81164d4:	d007      	beq.n	81164e6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 81164d6:	4b1a      	ldr	r3, [pc, #104]	; (8116540 <prvAddCurrentTaskToDelayedList+0x94>)
 81164d8:	681b      	ldr	r3, [r3, #0]
 81164da:	3304      	adds	r3, #4
 81164dc:	4619      	mov	r1, r3
 81164de:	4819      	ldr	r0, [pc, #100]	; (8116544 <prvAddCurrentTaskToDelayedList+0x98>)
 81164e0:	f7fe f8af 	bl	8114642 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 81164e4:	e026      	b.n	8116534 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 81164e6:	68fa      	ldr	r2, [r7, #12]
 81164e8:	687b      	ldr	r3, [r7, #4]
 81164ea:	4413      	add	r3, r2
 81164ec:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 81164ee:	4b14      	ldr	r3, [pc, #80]	; (8116540 <prvAddCurrentTaskToDelayedList+0x94>)
 81164f0:	681b      	ldr	r3, [r3, #0]
 81164f2:	68ba      	ldr	r2, [r7, #8]
 81164f4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 81164f6:	68ba      	ldr	r2, [r7, #8]
 81164f8:	68fb      	ldr	r3, [r7, #12]
 81164fa:	429a      	cmp	r2, r3
 81164fc:	d209      	bcs.n	8116512 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 81164fe:	4b12      	ldr	r3, [pc, #72]	; (8116548 <prvAddCurrentTaskToDelayedList+0x9c>)
 8116500:	681a      	ldr	r2, [r3, #0]
 8116502:	4b0f      	ldr	r3, [pc, #60]	; (8116540 <prvAddCurrentTaskToDelayedList+0x94>)
 8116504:	681b      	ldr	r3, [r3, #0]
 8116506:	3304      	adds	r3, #4
 8116508:	4619      	mov	r1, r3
 811650a:	4610      	mov	r0, r2
 811650c:	f7fe f8bd 	bl	811468a <vListInsert>
}
 8116510:	e010      	b.n	8116534 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8116512:	4b0e      	ldr	r3, [pc, #56]	; (811654c <prvAddCurrentTaskToDelayedList+0xa0>)
 8116514:	681a      	ldr	r2, [r3, #0]
 8116516:	4b0a      	ldr	r3, [pc, #40]	; (8116540 <prvAddCurrentTaskToDelayedList+0x94>)
 8116518:	681b      	ldr	r3, [r3, #0]
 811651a:	3304      	adds	r3, #4
 811651c:	4619      	mov	r1, r3
 811651e:	4610      	mov	r0, r2
 8116520:	f7fe f8b3 	bl	811468a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8116524:	4b0a      	ldr	r3, [pc, #40]	; (8116550 <prvAddCurrentTaskToDelayedList+0xa4>)
 8116526:	681b      	ldr	r3, [r3, #0]
 8116528:	68ba      	ldr	r2, [r7, #8]
 811652a:	429a      	cmp	r2, r3
 811652c:	d202      	bcs.n	8116534 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 811652e:	4a08      	ldr	r2, [pc, #32]	; (8116550 <prvAddCurrentTaskToDelayedList+0xa4>)
 8116530:	68bb      	ldr	r3, [r7, #8]
 8116532:	6013      	str	r3, [r2, #0]
}
 8116534:	bf00      	nop
 8116536:	3710      	adds	r7, #16
 8116538:	46bd      	mov	sp, r7
 811653a:	bd80      	pop	{r7, pc}
 811653c:	100049e0 	.word	0x100049e0
 8116540:	10004508 	.word	0x10004508
 8116544:	100049c8 	.word	0x100049c8
 8116548:	10004998 	.word	0x10004998
 811654c:	10004994 	.word	0x10004994
 8116550:	100049fc 	.word	0x100049fc

08116554 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8116554:	b580      	push	{r7, lr}
 8116556:	b08a      	sub	sp, #40	; 0x28
 8116558:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 811655a:	2300      	movs	r3, #0
 811655c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 811655e:	f000 fb07 	bl	8116b70 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8116562:	4b1c      	ldr	r3, [pc, #112]	; (81165d4 <xTimerCreateTimerTask+0x80>)
 8116564:	681b      	ldr	r3, [r3, #0]
 8116566:	2b00      	cmp	r3, #0
 8116568:	d021      	beq.n	81165ae <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 811656a:	2300      	movs	r3, #0
 811656c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 811656e:	2300      	movs	r3, #0
 8116570:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8116572:	1d3a      	adds	r2, r7, #4
 8116574:	f107 0108 	add.w	r1, r7, #8
 8116578:	f107 030c 	add.w	r3, r7, #12
 811657c:	4618      	mov	r0, r3
 811657e:	f7fd fe2f 	bl	81141e0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8116582:	6879      	ldr	r1, [r7, #4]
 8116584:	68bb      	ldr	r3, [r7, #8]
 8116586:	68fa      	ldr	r2, [r7, #12]
 8116588:	9202      	str	r2, [sp, #8]
 811658a:	9301      	str	r3, [sp, #4]
 811658c:	2302      	movs	r3, #2
 811658e:	9300      	str	r3, [sp, #0]
 8116590:	2300      	movs	r3, #0
 8116592:	460a      	mov	r2, r1
 8116594:	4910      	ldr	r1, [pc, #64]	; (81165d8 <xTimerCreateTimerTask+0x84>)
 8116596:	4811      	ldr	r0, [pc, #68]	; (81165dc <xTimerCreateTimerTask+0x88>)
 8116598:	f7ff f8cc 	bl	8115734 <xTaskCreateStatic>
 811659c:	4603      	mov	r3, r0
 811659e:	4a10      	ldr	r2, [pc, #64]	; (81165e0 <xTimerCreateTimerTask+0x8c>)
 81165a0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 81165a2:	4b0f      	ldr	r3, [pc, #60]	; (81165e0 <xTimerCreateTimerTask+0x8c>)
 81165a4:	681b      	ldr	r3, [r3, #0]
 81165a6:	2b00      	cmp	r3, #0
 81165a8:	d001      	beq.n	81165ae <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 81165aa:	2301      	movs	r3, #1
 81165ac:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 81165ae:	697b      	ldr	r3, [r7, #20]
 81165b0:	2b00      	cmp	r3, #0
 81165b2:	d10a      	bne.n	81165ca <xTimerCreateTimerTask+0x76>
	__asm volatile
 81165b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 81165b8:	f383 8811 	msr	BASEPRI, r3
 81165bc:	f3bf 8f6f 	isb	sy
 81165c0:	f3bf 8f4f 	dsb	sy
 81165c4:	613b      	str	r3, [r7, #16]
}
 81165c6:	bf00      	nop
 81165c8:	e7fe      	b.n	81165c8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 81165ca:	697b      	ldr	r3, [r7, #20]
}
 81165cc:	4618      	mov	r0, r3
 81165ce:	3718      	adds	r7, #24
 81165d0:	46bd      	mov	sp, r7
 81165d2:	bd80      	pop	{r7, pc}
 81165d4:	10004a38 	.word	0x10004a38
 81165d8:	08119ac8 	.word	0x08119ac8
 81165dc:	08116719 	.word	0x08116719
 81165e0:	10004a3c 	.word	0x10004a3c

081165e4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 81165e4:	b580      	push	{r7, lr}
 81165e6:	b08a      	sub	sp, #40	; 0x28
 81165e8:	af00      	add	r7, sp, #0
 81165ea:	60f8      	str	r0, [r7, #12]
 81165ec:	60b9      	str	r1, [r7, #8]
 81165ee:	607a      	str	r2, [r7, #4]
 81165f0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 81165f2:	2300      	movs	r3, #0
 81165f4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 81165f6:	68fb      	ldr	r3, [r7, #12]
 81165f8:	2b00      	cmp	r3, #0
 81165fa:	d10a      	bne.n	8116612 <xTimerGenericCommand+0x2e>
	__asm volatile
 81165fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8116600:	f383 8811 	msr	BASEPRI, r3
 8116604:	f3bf 8f6f 	isb	sy
 8116608:	f3bf 8f4f 	dsb	sy
 811660c:	623b      	str	r3, [r7, #32]
}
 811660e:	bf00      	nop
 8116610:	e7fe      	b.n	8116610 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8116612:	4b1a      	ldr	r3, [pc, #104]	; (811667c <xTimerGenericCommand+0x98>)
 8116614:	681b      	ldr	r3, [r3, #0]
 8116616:	2b00      	cmp	r3, #0
 8116618:	d02a      	beq.n	8116670 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 811661a:	68bb      	ldr	r3, [r7, #8]
 811661c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 811661e:	687b      	ldr	r3, [r7, #4]
 8116620:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8116622:	68fb      	ldr	r3, [r7, #12]
 8116624:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8116626:	68bb      	ldr	r3, [r7, #8]
 8116628:	2b05      	cmp	r3, #5
 811662a:	dc18      	bgt.n	811665e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 811662c:	f7ff feb2 	bl	8116394 <xTaskGetSchedulerState>
 8116630:	4603      	mov	r3, r0
 8116632:	2b02      	cmp	r3, #2
 8116634:	d109      	bne.n	811664a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8116636:	4b11      	ldr	r3, [pc, #68]	; (811667c <xTimerGenericCommand+0x98>)
 8116638:	6818      	ldr	r0, [r3, #0]
 811663a:	f107 0110 	add.w	r1, r7, #16
 811663e:	2300      	movs	r3, #0
 8116640:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8116642:	f7fe fc0f 	bl	8114e64 <xQueueGenericSend>
 8116646:	6278      	str	r0, [r7, #36]	; 0x24
 8116648:	e012      	b.n	8116670 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 811664a:	4b0c      	ldr	r3, [pc, #48]	; (811667c <xTimerGenericCommand+0x98>)
 811664c:	6818      	ldr	r0, [r3, #0]
 811664e:	f107 0110 	add.w	r1, r7, #16
 8116652:	2300      	movs	r3, #0
 8116654:	2200      	movs	r2, #0
 8116656:	f7fe fc05 	bl	8114e64 <xQueueGenericSend>
 811665a:	6278      	str	r0, [r7, #36]	; 0x24
 811665c:	e008      	b.n	8116670 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 811665e:	4b07      	ldr	r3, [pc, #28]	; (811667c <xTimerGenericCommand+0x98>)
 8116660:	6818      	ldr	r0, [r3, #0]
 8116662:	f107 0110 	add.w	r1, r7, #16
 8116666:	2300      	movs	r3, #0
 8116668:	683a      	ldr	r2, [r7, #0]
 811666a:	f7fe fcf9 	bl	8115060 <xQueueGenericSendFromISR>
 811666e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8116670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8116672:	4618      	mov	r0, r3
 8116674:	3728      	adds	r7, #40	; 0x28
 8116676:	46bd      	mov	sp, r7
 8116678:	bd80      	pop	{r7, pc}
 811667a:	bf00      	nop
 811667c:	10004a38 	.word	0x10004a38

08116680 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8116680:	b580      	push	{r7, lr}
 8116682:	b088      	sub	sp, #32
 8116684:	af02      	add	r7, sp, #8
 8116686:	6078      	str	r0, [r7, #4]
 8116688:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 811668a:	4b22      	ldr	r3, [pc, #136]	; (8116714 <prvProcessExpiredTimer+0x94>)
 811668c:	681b      	ldr	r3, [r3, #0]
 811668e:	68db      	ldr	r3, [r3, #12]
 8116690:	68db      	ldr	r3, [r3, #12]
 8116692:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8116694:	697b      	ldr	r3, [r7, #20]
 8116696:	3304      	adds	r3, #4
 8116698:	4618      	mov	r0, r3
 811669a:	f7fe f82f 	bl	81146fc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 811669e:	697b      	ldr	r3, [r7, #20]
 81166a0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 81166a4:	f003 0304 	and.w	r3, r3, #4
 81166a8:	2b00      	cmp	r3, #0
 81166aa:	d022      	beq.n	81166f2 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 81166ac:	697b      	ldr	r3, [r7, #20]
 81166ae:	699a      	ldr	r2, [r3, #24]
 81166b0:	687b      	ldr	r3, [r7, #4]
 81166b2:	18d1      	adds	r1, r2, r3
 81166b4:	687b      	ldr	r3, [r7, #4]
 81166b6:	683a      	ldr	r2, [r7, #0]
 81166b8:	6978      	ldr	r0, [r7, #20]
 81166ba:	f000 f8d1 	bl	8116860 <prvInsertTimerInActiveList>
 81166be:	4603      	mov	r3, r0
 81166c0:	2b00      	cmp	r3, #0
 81166c2:	d01f      	beq.n	8116704 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 81166c4:	2300      	movs	r3, #0
 81166c6:	9300      	str	r3, [sp, #0]
 81166c8:	2300      	movs	r3, #0
 81166ca:	687a      	ldr	r2, [r7, #4]
 81166cc:	2100      	movs	r1, #0
 81166ce:	6978      	ldr	r0, [r7, #20]
 81166d0:	f7ff ff88 	bl	81165e4 <xTimerGenericCommand>
 81166d4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 81166d6:	693b      	ldr	r3, [r7, #16]
 81166d8:	2b00      	cmp	r3, #0
 81166da:	d113      	bne.n	8116704 <prvProcessExpiredTimer+0x84>
	__asm volatile
 81166dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 81166e0:	f383 8811 	msr	BASEPRI, r3
 81166e4:	f3bf 8f6f 	isb	sy
 81166e8:	f3bf 8f4f 	dsb	sy
 81166ec:	60fb      	str	r3, [r7, #12]
}
 81166ee:	bf00      	nop
 81166f0:	e7fe      	b.n	81166f0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 81166f2:	697b      	ldr	r3, [r7, #20]
 81166f4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 81166f8:	f023 0301 	bic.w	r3, r3, #1
 81166fc:	b2da      	uxtb	r2, r3
 81166fe:	697b      	ldr	r3, [r7, #20]
 8116700:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8116704:	697b      	ldr	r3, [r7, #20]
 8116706:	6a1b      	ldr	r3, [r3, #32]
 8116708:	6978      	ldr	r0, [r7, #20]
 811670a:	4798      	blx	r3
}
 811670c:	bf00      	nop
 811670e:	3718      	adds	r7, #24
 8116710:	46bd      	mov	sp, r7
 8116712:	bd80      	pop	{r7, pc}
 8116714:	10004a30 	.word	0x10004a30

08116718 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8116718:	b580      	push	{r7, lr}
 811671a:	b084      	sub	sp, #16
 811671c:	af00      	add	r7, sp, #0
 811671e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8116720:	f107 0308 	add.w	r3, r7, #8
 8116724:	4618      	mov	r0, r3
 8116726:	f000 f857 	bl	81167d8 <prvGetNextExpireTime>
 811672a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 811672c:	68bb      	ldr	r3, [r7, #8]
 811672e:	4619      	mov	r1, r3
 8116730:	68f8      	ldr	r0, [r7, #12]
 8116732:	f000 f803 	bl	811673c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8116736:	f000 f8d5 	bl	81168e4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 811673a:	e7f1      	b.n	8116720 <prvTimerTask+0x8>

0811673c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 811673c:	b580      	push	{r7, lr}
 811673e:	b084      	sub	sp, #16
 8116740:	af00      	add	r7, sp, #0
 8116742:	6078      	str	r0, [r7, #4]
 8116744:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8116746:	f7ff fa31 	bl	8115bac <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 811674a:	f107 0308 	add.w	r3, r7, #8
 811674e:	4618      	mov	r0, r3
 8116750:	f000 f866 	bl	8116820 <prvSampleTimeNow>
 8116754:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8116756:	68bb      	ldr	r3, [r7, #8]
 8116758:	2b00      	cmp	r3, #0
 811675a:	d130      	bne.n	81167be <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 811675c:	683b      	ldr	r3, [r7, #0]
 811675e:	2b00      	cmp	r3, #0
 8116760:	d10a      	bne.n	8116778 <prvProcessTimerOrBlockTask+0x3c>
 8116762:	687a      	ldr	r2, [r7, #4]
 8116764:	68fb      	ldr	r3, [r7, #12]
 8116766:	429a      	cmp	r2, r3
 8116768:	d806      	bhi.n	8116778 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 811676a:	f7ff fa2d 	bl	8115bc8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 811676e:	68f9      	ldr	r1, [r7, #12]
 8116770:	6878      	ldr	r0, [r7, #4]
 8116772:	f7ff ff85 	bl	8116680 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8116776:	e024      	b.n	81167c2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8116778:	683b      	ldr	r3, [r7, #0]
 811677a:	2b00      	cmp	r3, #0
 811677c:	d008      	beq.n	8116790 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 811677e:	4b13      	ldr	r3, [pc, #76]	; (81167cc <prvProcessTimerOrBlockTask+0x90>)
 8116780:	681b      	ldr	r3, [r3, #0]
 8116782:	681b      	ldr	r3, [r3, #0]
 8116784:	2b00      	cmp	r3, #0
 8116786:	d101      	bne.n	811678c <prvProcessTimerOrBlockTask+0x50>
 8116788:	2301      	movs	r3, #1
 811678a:	e000      	b.n	811678e <prvProcessTimerOrBlockTask+0x52>
 811678c:	2300      	movs	r3, #0
 811678e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8116790:	4b0f      	ldr	r3, [pc, #60]	; (81167d0 <prvProcessTimerOrBlockTask+0x94>)
 8116792:	6818      	ldr	r0, [r3, #0]
 8116794:	687a      	ldr	r2, [r7, #4]
 8116796:	68fb      	ldr	r3, [r7, #12]
 8116798:	1ad3      	subs	r3, r2, r3
 811679a:	683a      	ldr	r2, [r7, #0]
 811679c:	4619      	mov	r1, r3
 811679e:	f7fe ff95 	bl	81156cc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 81167a2:	f7ff fa11 	bl	8115bc8 <xTaskResumeAll>
 81167a6:	4603      	mov	r3, r0
 81167a8:	2b00      	cmp	r3, #0
 81167aa:	d10a      	bne.n	81167c2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 81167ac:	4b09      	ldr	r3, [pc, #36]	; (81167d4 <prvProcessTimerOrBlockTask+0x98>)
 81167ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 81167b2:	601a      	str	r2, [r3, #0]
 81167b4:	f3bf 8f4f 	dsb	sy
 81167b8:	f3bf 8f6f 	isb	sy
}
 81167bc:	e001      	b.n	81167c2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 81167be:	f7ff fa03 	bl	8115bc8 <xTaskResumeAll>
}
 81167c2:	bf00      	nop
 81167c4:	3710      	adds	r7, #16
 81167c6:	46bd      	mov	sp, r7
 81167c8:	bd80      	pop	{r7, pc}
 81167ca:	bf00      	nop
 81167cc:	10004a34 	.word	0x10004a34
 81167d0:	10004a38 	.word	0x10004a38
 81167d4:	e000ed04 	.word	0xe000ed04

081167d8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 81167d8:	b480      	push	{r7}
 81167da:	b085      	sub	sp, #20
 81167dc:	af00      	add	r7, sp, #0
 81167de:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 81167e0:	4b0e      	ldr	r3, [pc, #56]	; (811681c <prvGetNextExpireTime+0x44>)
 81167e2:	681b      	ldr	r3, [r3, #0]
 81167e4:	681b      	ldr	r3, [r3, #0]
 81167e6:	2b00      	cmp	r3, #0
 81167e8:	d101      	bne.n	81167ee <prvGetNextExpireTime+0x16>
 81167ea:	2201      	movs	r2, #1
 81167ec:	e000      	b.n	81167f0 <prvGetNextExpireTime+0x18>
 81167ee:	2200      	movs	r2, #0
 81167f0:	687b      	ldr	r3, [r7, #4]
 81167f2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 81167f4:	687b      	ldr	r3, [r7, #4]
 81167f6:	681b      	ldr	r3, [r3, #0]
 81167f8:	2b00      	cmp	r3, #0
 81167fa:	d105      	bne.n	8116808 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 81167fc:	4b07      	ldr	r3, [pc, #28]	; (811681c <prvGetNextExpireTime+0x44>)
 81167fe:	681b      	ldr	r3, [r3, #0]
 8116800:	68db      	ldr	r3, [r3, #12]
 8116802:	681b      	ldr	r3, [r3, #0]
 8116804:	60fb      	str	r3, [r7, #12]
 8116806:	e001      	b.n	811680c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8116808:	2300      	movs	r3, #0
 811680a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 811680c:	68fb      	ldr	r3, [r7, #12]
}
 811680e:	4618      	mov	r0, r3
 8116810:	3714      	adds	r7, #20
 8116812:	46bd      	mov	sp, r7
 8116814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8116818:	4770      	bx	lr
 811681a:	bf00      	nop
 811681c:	10004a30 	.word	0x10004a30

08116820 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8116820:	b580      	push	{r7, lr}
 8116822:	b084      	sub	sp, #16
 8116824:	af00      	add	r7, sp, #0
 8116826:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8116828:	f7ff fa6c 	bl	8115d04 <xTaskGetTickCount>
 811682c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 811682e:	4b0b      	ldr	r3, [pc, #44]	; (811685c <prvSampleTimeNow+0x3c>)
 8116830:	681b      	ldr	r3, [r3, #0]
 8116832:	68fa      	ldr	r2, [r7, #12]
 8116834:	429a      	cmp	r2, r3
 8116836:	d205      	bcs.n	8116844 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8116838:	f000 f936 	bl	8116aa8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 811683c:	687b      	ldr	r3, [r7, #4]
 811683e:	2201      	movs	r2, #1
 8116840:	601a      	str	r2, [r3, #0]
 8116842:	e002      	b.n	811684a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8116844:	687b      	ldr	r3, [r7, #4]
 8116846:	2200      	movs	r2, #0
 8116848:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 811684a:	4a04      	ldr	r2, [pc, #16]	; (811685c <prvSampleTimeNow+0x3c>)
 811684c:	68fb      	ldr	r3, [r7, #12]
 811684e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8116850:	68fb      	ldr	r3, [r7, #12]
}
 8116852:	4618      	mov	r0, r3
 8116854:	3710      	adds	r7, #16
 8116856:	46bd      	mov	sp, r7
 8116858:	bd80      	pop	{r7, pc}
 811685a:	bf00      	nop
 811685c:	10004a40 	.word	0x10004a40

08116860 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8116860:	b580      	push	{r7, lr}
 8116862:	b086      	sub	sp, #24
 8116864:	af00      	add	r7, sp, #0
 8116866:	60f8      	str	r0, [r7, #12]
 8116868:	60b9      	str	r1, [r7, #8]
 811686a:	607a      	str	r2, [r7, #4]
 811686c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 811686e:	2300      	movs	r3, #0
 8116870:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8116872:	68fb      	ldr	r3, [r7, #12]
 8116874:	68ba      	ldr	r2, [r7, #8]
 8116876:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8116878:	68fb      	ldr	r3, [r7, #12]
 811687a:	68fa      	ldr	r2, [r7, #12]
 811687c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 811687e:	68ba      	ldr	r2, [r7, #8]
 8116880:	687b      	ldr	r3, [r7, #4]
 8116882:	429a      	cmp	r2, r3
 8116884:	d812      	bhi.n	81168ac <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8116886:	687a      	ldr	r2, [r7, #4]
 8116888:	683b      	ldr	r3, [r7, #0]
 811688a:	1ad2      	subs	r2, r2, r3
 811688c:	68fb      	ldr	r3, [r7, #12]
 811688e:	699b      	ldr	r3, [r3, #24]
 8116890:	429a      	cmp	r2, r3
 8116892:	d302      	bcc.n	811689a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8116894:	2301      	movs	r3, #1
 8116896:	617b      	str	r3, [r7, #20]
 8116898:	e01b      	b.n	81168d2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 811689a:	4b10      	ldr	r3, [pc, #64]	; (81168dc <prvInsertTimerInActiveList+0x7c>)
 811689c:	681a      	ldr	r2, [r3, #0]
 811689e:	68fb      	ldr	r3, [r7, #12]
 81168a0:	3304      	adds	r3, #4
 81168a2:	4619      	mov	r1, r3
 81168a4:	4610      	mov	r0, r2
 81168a6:	f7fd fef0 	bl	811468a <vListInsert>
 81168aa:	e012      	b.n	81168d2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 81168ac:	687a      	ldr	r2, [r7, #4]
 81168ae:	683b      	ldr	r3, [r7, #0]
 81168b0:	429a      	cmp	r2, r3
 81168b2:	d206      	bcs.n	81168c2 <prvInsertTimerInActiveList+0x62>
 81168b4:	68ba      	ldr	r2, [r7, #8]
 81168b6:	683b      	ldr	r3, [r7, #0]
 81168b8:	429a      	cmp	r2, r3
 81168ba:	d302      	bcc.n	81168c2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 81168bc:	2301      	movs	r3, #1
 81168be:	617b      	str	r3, [r7, #20]
 81168c0:	e007      	b.n	81168d2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 81168c2:	4b07      	ldr	r3, [pc, #28]	; (81168e0 <prvInsertTimerInActiveList+0x80>)
 81168c4:	681a      	ldr	r2, [r3, #0]
 81168c6:	68fb      	ldr	r3, [r7, #12]
 81168c8:	3304      	adds	r3, #4
 81168ca:	4619      	mov	r1, r3
 81168cc:	4610      	mov	r0, r2
 81168ce:	f7fd fedc 	bl	811468a <vListInsert>
		}
	}

	return xProcessTimerNow;
 81168d2:	697b      	ldr	r3, [r7, #20]
}
 81168d4:	4618      	mov	r0, r3
 81168d6:	3718      	adds	r7, #24
 81168d8:	46bd      	mov	sp, r7
 81168da:	bd80      	pop	{r7, pc}
 81168dc:	10004a34 	.word	0x10004a34
 81168e0:	10004a30 	.word	0x10004a30

081168e4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 81168e4:	b580      	push	{r7, lr}
 81168e6:	b08e      	sub	sp, #56	; 0x38
 81168e8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 81168ea:	e0ca      	b.n	8116a82 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 81168ec:	687b      	ldr	r3, [r7, #4]
 81168ee:	2b00      	cmp	r3, #0
 81168f0:	da18      	bge.n	8116924 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 81168f2:	1d3b      	adds	r3, r7, #4
 81168f4:	3304      	adds	r3, #4
 81168f6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 81168f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 81168fa:	2b00      	cmp	r3, #0
 81168fc:	d10a      	bne.n	8116914 <prvProcessReceivedCommands+0x30>
	__asm volatile
 81168fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8116902:	f383 8811 	msr	BASEPRI, r3
 8116906:	f3bf 8f6f 	isb	sy
 811690a:	f3bf 8f4f 	dsb	sy
 811690e:	61fb      	str	r3, [r7, #28]
}
 8116910:	bf00      	nop
 8116912:	e7fe      	b.n	8116912 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8116914:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8116916:	681b      	ldr	r3, [r3, #0]
 8116918:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 811691a:	6850      	ldr	r0, [r2, #4]
 811691c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 811691e:	6892      	ldr	r2, [r2, #8]
 8116920:	4611      	mov	r1, r2
 8116922:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8116924:	687b      	ldr	r3, [r7, #4]
 8116926:	2b00      	cmp	r3, #0
 8116928:	f2c0 80aa 	blt.w	8116a80 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 811692c:	68fb      	ldr	r3, [r7, #12]
 811692e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8116930:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8116932:	695b      	ldr	r3, [r3, #20]
 8116934:	2b00      	cmp	r3, #0
 8116936:	d004      	beq.n	8116942 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8116938:	6abb      	ldr	r3, [r7, #40]	; 0x28
 811693a:	3304      	adds	r3, #4
 811693c:	4618      	mov	r0, r3
 811693e:	f7fd fedd 	bl	81146fc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8116942:	463b      	mov	r3, r7
 8116944:	4618      	mov	r0, r3
 8116946:	f7ff ff6b 	bl	8116820 <prvSampleTimeNow>
 811694a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 811694c:	687b      	ldr	r3, [r7, #4]
 811694e:	2b09      	cmp	r3, #9
 8116950:	f200 8097 	bhi.w	8116a82 <prvProcessReceivedCommands+0x19e>
 8116954:	a201      	add	r2, pc, #4	; (adr r2, 811695c <prvProcessReceivedCommands+0x78>)
 8116956:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 811695a:	bf00      	nop
 811695c:	08116985 	.word	0x08116985
 8116960:	08116985 	.word	0x08116985
 8116964:	08116985 	.word	0x08116985
 8116968:	081169f9 	.word	0x081169f9
 811696c:	08116a0d 	.word	0x08116a0d
 8116970:	08116a57 	.word	0x08116a57
 8116974:	08116985 	.word	0x08116985
 8116978:	08116985 	.word	0x08116985
 811697c:	081169f9 	.word	0x081169f9
 8116980:	08116a0d 	.word	0x08116a0d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8116984:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8116986:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 811698a:	f043 0301 	orr.w	r3, r3, #1
 811698e:	b2da      	uxtb	r2, r3
 8116990:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8116992:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8116996:	68ba      	ldr	r2, [r7, #8]
 8116998:	6abb      	ldr	r3, [r7, #40]	; 0x28
 811699a:	699b      	ldr	r3, [r3, #24]
 811699c:	18d1      	adds	r1, r2, r3
 811699e:	68bb      	ldr	r3, [r7, #8]
 81169a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 81169a2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 81169a4:	f7ff ff5c 	bl	8116860 <prvInsertTimerInActiveList>
 81169a8:	4603      	mov	r3, r0
 81169aa:	2b00      	cmp	r3, #0
 81169ac:	d069      	beq.n	8116a82 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 81169ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81169b0:	6a1b      	ldr	r3, [r3, #32]
 81169b2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 81169b4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 81169b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81169b8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 81169bc:	f003 0304 	and.w	r3, r3, #4
 81169c0:	2b00      	cmp	r3, #0
 81169c2:	d05e      	beq.n	8116a82 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 81169c4:	68ba      	ldr	r2, [r7, #8]
 81169c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81169c8:	699b      	ldr	r3, [r3, #24]
 81169ca:	441a      	add	r2, r3
 81169cc:	2300      	movs	r3, #0
 81169ce:	9300      	str	r3, [sp, #0]
 81169d0:	2300      	movs	r3, #0
 81169d2:	2100      	movs	r1, #0
 81169d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 81169d6:	f7ff fe05 	bl	81165e4 <xTimerGenericCommand>
 81169da:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 81169dc:	6a3b      	ldr	r3, [r7, #32]
 81169de:	2b00      	cmp	r3, #0
 81169e0:	d14f      	bne.n	8116a82 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 81169e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 81169e6:	f383 8811 	msr	BASEPRI, r3
 81169ea:	f3bf 8f6f 	isb	sy
 81169ee:	f3bf 8f4f 	dsb	sy
 81169f2:	61bb      	str	r3, [r7, #24]
}
 81169f4:	bf00      	nop
 81169f6:	e7fe      	b.n	81169f6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 81169f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81169fa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 81169fe:	f023 0301 	bic.w	r3, r3, #1
 8116a02:	b2da      	uxtb	r2, r3
 8116a04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8116a06:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8116a0a:	e03a      	b.n	8116a82 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8116a0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8116a0e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8116a12:	f043 0301 	orr.w	r3, r3, #1
 8116a16:	b2da      	uxtb	r2, r3
 8116a18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8116a1a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8116a1e:	68ba      	ldr	r2, [r7, #8]
 8116a20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8116a22:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8116a24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8116a26:	699b      	ldr	r3, [r3, #24]
 8116a28:	2b00      	cmp	r3, #0
 8116a2a:	d10a      	bne.n	8116a42 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8116a2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8116a30:	f383 8811 	msr	BASEPRI, r3
 8116a34:	f3bf 8f6f 	isb	sy
 8116a38:	f3bf 8f4f 	dsb	sy
 8116a3c:	617b      	str	r3, [r7, #20]
}
 8116a3e:	bf00      	nop
 8116a40:	e7fe      	b.n	8116a40 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8116a42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8116a44:	699a      	ldr	r2, [r3, #24]
 8116a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8116a48:	18d1      	adds	r1, r2, r3
 8116a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8116a4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8116a4e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8116a50:	f7ff ff06 	bl	8116860 <prvInsertTimerInActiveList>
					break;
 8116a54:	e015      	b.n	8116a82 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8116a56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8116a58:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8116a5c:	f003 0302 	and.w	r3, r3, #2
 8116a60:	2b00      	cmp	r3, #0
 8116a62:	d103      	bne.n	8116a6c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8116a64:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8116a66:	f7fd fca1 	bl	81143ac <vPortFree>
 8116a6a:	e00a      	b.n	8116a82 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8116a6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8116a6e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8116a72:	f023 0301 	bic.w	r3, r3, #1
 8116a76:	b2da      	uxtb	r2, r3
 8116a78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8116a7a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8116a7e:	e000      	b.n	8116a82 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8116a80:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8116a82:	4b08      	ldr	r3, [pc, #32]	; (8116aa4 <prvProcessReceivedCommands+0x1c0>)
 8116a84:	681b      	ldr	r3, [r3, #0]
 8116a86:	1d39      	adds	r1, r7, #4
 8116a88:	2200      	movs	r2, #0
 8116a8a:	4618      	mov	r0, r3
 8116a8c:	f7fe fb84 	bl	8115198 <xQueueReceive>
 8116a90:	4603      	mov	r3, r0
 8116a92:	2b00      	cmp	r3, #0
 8116a94:	f47f af2a 	bne.w	81168ec <prvProcessReceivedCommands+0x8>
	}
}
 8116a98:	bf00      	nop
 8116a9a:	bf00      	nop
 8116a9c:	3730      	adds	r7, #48	; 0x30
 8116a9e:	46bd      	mov	sp, r7
 8116aa0:	bd80      	pop	{r7, pc}
 8116aa2:	bf00      	nop
 8116aa4:	10004a38 	.word	0x10004a38

08116aa8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8116aa8:	b580      	push	{r7, lr}
 8116aaa:	b088      	sub	sp, #32
 8116aac:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8116aae:	e048      	b.n	8116b42 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8116ab0:	4b2d      	ldr	r3, [pc, #180]	; (8116b68 <prvSwitchTimerLists+0xc0>)
 8116ab2:	681b      	ldr	r3, [r3, #0]
 8116ab4:	68db      	ldr	r3, [r3, #12]
 8116ab6:	681b      	ldr	r3, [r3, #0]
 8116ab8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8116aba:	4b2b      	ldr	r3, [pc, #172]	; (8116b68 <prvSwitchTimerLists+0xc0>)
 8116abc:	681b      	ldr	r3, [r3, #0]
 8116abe:	68db      	ldr	r3, [r3, #12]
 8116ac0:	68db      	ldr	r3, [r3, #12]
 8116ac2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8116ac4:	68fb      	ldr	r3, [r7, #12]
 8116ac6:	3304      	adds	r3, #4
 8116ac8:	4618      	mov	r0, r3
 8116aca:	f7fd fe17 	bl	81146fc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8116ace:	68fb      	ldr	r3, [r7, #12]
 8116ad0:	6a1b      	ldr	r3, [r3, #32]
 8116ad2:	68f8      	ldr	r0, [r7, #12]
 8116ad4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8116ad6:	68fb      	ldr	r3, [r7, #12]
 8116ad8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8116adc:	f003 0304 	and.w	r3, r3, #4
 8116ae0:	2b00      	cmp	r3, #0
 8116ae2:	d02e      	beq.n	8116b42 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8116ae4:	68fb      	ldr	r3, [r7, #12]
 8116ae6:	699b      	ldr	r3, [r3, #24]
 8116ae8:	693a      	ldr	r2, [r7, #16]
 8116aea:	4413      	add	r3, r2
 8116aec:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8116aee:	68ba      	ldr	r2, [r7, #8]
 8116af0:	693b      	ldr	r3, [r7, #16]
 8116af2:	429a      	cmp	r2, r3
 8116af4:	d90e      	bls.n	8116b14 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8116af6:	68fb      	ldr	r3, [r7, #12]
 8116af8:	68ba      	ldr	r2, [r7, #8]
 8116afa:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8116afc:	68fb      	ldr	r3, [r7, #12]
 8116afe:	68fa      	ldr	r2, [r7, #12]
 8116b00:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8116b02:	4b19      	ldr	r3, [pc, #100]	; (8116b68 <prvSwitchTimerLists+0xc0>)
 8116b04:	681a      	ldr	r2, [r3, #0]
 8116b06:	68fb      	ldr	r3, [r7, #12]
 8116b08:	3304      	adds	r3, #4
 8116b0a:	4619      	mov	r1, r3
 8116b0c:	4610      	mov	r0, r2
 8116b0e:	f7fd fdbc 	bl	811468a <vListInsert>
 8116b12:	e016      	b.n	8116b42 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8116b14:	2300      	movs	r3, #0
 8116b16:	9300      	str	r3, [sp, #0]
 8116b18:	2300      	movs	r3, #0
 8116b1a:	693a      	ldr	r2, [r7, #16]
 8116b1c:	2100      	movs	r1, #0
 8116b1e:	68f8      	ldr	r0, [r7, #12]
 8116b20:	f7ff fd60 	bl	81165e4 <xTimerGenericCommand>
 8116b24:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8116b26:	687b      	ldr	r3, [r7, #4]
 8116b28:	2b00      	cmp	r3, #0
 8116b2a:	d10a      	bne.n	8116b42 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8116b2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8116b30:	f383 8811 	msr	BASEPRI, r3
 8116b34:	f3bf 8f6f 	isb	sy
 8116b38:	f3bf 8f4f 	dsb	sy
 8116b3c:	603b      	str	r3, [r7, #0]
}
 8116b3e:	bf00      	nop
 8116b40:	e7fe      	b.n	8116b40 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8116b42:	4b09      	ldr	r3, [pc, #36]	; (8116b68 <prvSwitchTimerLists+0xc0>)
 8116b44:	681b      	ldr	r3, [r3, #0]
 8116b46:	681b      	ldr	r3, [r3, #0]
 8116b48:	2b00      	cmp	r3, #0
 8116b4a:	d1b1      	bne.n	8116ab0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8116b4c:	4b06      	ldr	r3, [pc, #24]	; (8116b68 <prvSwitchTimerLists+0xc0>)
 8116b4e:	681b      	ldr	r3, [r3, #0]
 8116b50:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8116b52:	4b06      	ldr	r3, [pc, #24]	; (8116b6c <prvSwitchTimerLists+0xc4>)
 8116b54:	681b      	ldr	r3, [r3, #0]
 8116b56:	4a04      	ldr	r2, [pc, #16]	; (8116b68 <prvSwitchTimerLists+0xc0>)
 8116b58:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8116b5a:	4a04      	ldr	r2, [pc, #16]	; (8116b6c <prvSwitchTimerLists+0xc4>)
 8116b5c:	697b      	ldr	r3, [r7, #20]
 8116b5e:	6013      	str	r3, [r2, #0]
}
 8116b60:	bf00      	nop
 8116b62:	3718      	adds	r7, #24
 8116b64:	46bd      	mov	sp, r7
 8116b66:	bd80      	pop	{r7, pc}
 8116b68:	10004a30 	.word	0x10004a30
 8116b6c:	10004a34 	.word	0x10004a34

08116b70 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8116b70:	b580      	push	{r7, lr}
 8116b72:	b082      	sub	sp, #8
 8116b74:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8116b76:	f7fd ff15 	bl	81149a4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8116b7a:	4b15      	ldr	r3, [pc, #84]	; (8116bd0 <prvCheckForValidListAndQueue+0x60>)
 8116b7c:	681b      	ldr	r3, [r3, #0]
 8116b7e:	2b00      	cmp	r3, #0
 8116b80:	d120      	bne.n	8116bc4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8116b82:	4814      	ldr	r0, [pc, #80]	; (8116bd4 <prvCheckForValidListAndQueue+0x64>)
 8116b84:	f7fd fd30 	bl	81145e8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8116b88:	4813      	ldr	r0, [pc, #76]	; (8116bd8 <prvCheckForValidListAndQueue+0x68>)
 8116b8a:	f7fd fd2d 	bl	81145e8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8116b8e:	4b13      	ldr	r3, [pc, #76]	; (8116bdc <prvCheckForValidListAndQueue+0x6c>)
 8116b90:	4a10      	ldr	r2, [pc, #64]	; (8116bd4 <prvCheckForValidListAndQueue+0x64>)
 8116b92:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8116b94:	4b12      	ldr	r3, [pc, #72]	; (8116be0 <prvCheckForValidListAndQueue+0x70>)
 8116b96:	4a10      	ldr	r2, [pc, #64]	; (8116bd8 <prvCheckForValidListAndQueue+0x68>)
 8116b98:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8116b9a:	2300      	movs	r3, #0
 8116b9c:	9300      	str	r3, [sp, #0]
 8116b9e:	4b11      	ldr	r3, [pc, #68]	; (8116be4 <prvCheckForValidListAndQueue+0x74>)
 8116ba0:	4a11      	ldr	r2, [pc, #68]	; (8116be8 <prvCheckForValidListAndQueue+0x78>)
 8116ba2:	2110      	movs	r1, #16
 8116ba4:	200a      	movs	r0, #10
 8116ba6:	f7fe f887 	bl	8114cb8 <xQueueGenericCreateStatic>
 8116baa:	4603      	mov	r3, r0
 8116bac:	4a08      	ldr	r2, [pc, #32]	; (8116bd0 <prvCheckForValidListAndQueue+0x60>)
 8116bae:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8116bb0:	4b07      	ldr	r3, [pc, #28]	; (8116bd0 <prvCheckForValidListAndQueue+0x60>)
 8116bb2:	681b      	ldr	r3, [r3, #0]
 8116bb4:	2b00      	cmp	r3, #0
 8116bb6:	d005      	beq.n	8116bc4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8116bb8:	4b05      	ldr	r3, [pc, #20]	; (8116bd0 <prvCheckForValidListAndQueue+0x60>)
 8116bba:	681b      	ldr	r3, [r3, #0]
 8116bbc:	490b      	ldr	r1, [pc, #44]	; (8116bec <prvCheckForValidListAndQueue+0x7c>)
 8116bbe:	4618      	mov	r0, r3
 8116bc0:	f7fe fd5a 	bl	8115678 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8116bc4:	f7fd ff1e 	bl	8114a04 <vPortExitCritical>
}
 8116bc8:	bf00      	nop
 8116bca:	46bd      	mov	sp, r7
 8116bcc:	bd80      	pop	{r7, pc}
 8116bce:	bf00      	nop
 8116bd0:	10004a38 	.word	0x10004a38
 8116bd4:	10004a08 	.word	0x10004a08
 8116bd8:	10004a1c 	.word	0x10004a1c
 8116bdc:	10004a30 	.word	0x10004a30
 8116be0:	10004a34 	.word	0x10004a34
 8116be4:	10004ae4 	.word	0x10004ae4
 8116be8:	10004a44 	.word	0x10004a44
 8116bec:	08119ad0 	.word	0x08119ad0

08116bf0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8116bf0:	b580      	push	{r7, lr}
 8116bf2:	b082      	sub	sp, #8
 8116bf4:	af00      	add	r7, sp, #0
 8116bf6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8116bf8:	687b      	ldr	r3, [r7, #4]
 8116bfa:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8116bfe:	687b      	ldr	r3, [r7, #4]
 8116c00:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8116c04:	4619      	mov	r1, r3
 8116c06:	4610      	mov	r0, r2
 8116c08:	f7fb ff87 	bl	8112b1a <USBD_LL_SetupStage>
}
 8116c0c:	bf00      	nop
 8116c0e:	3708      	adds	r7, #8
 8116c10:	46bd      	mov	sp, r7
 8116c12:	bd80      	pop	{r7, pc}

08116c14 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8116c14:	b580      	push	{r7, lr}
 8116c16:	b082      	sub	sp, #8
 8116c18:	af00      	add	r7, sp, #0
 8116c1a:	6078      	str	r0, [r7, #4]
 8116c1c:	460b      	mov	r3, r1
 8116c1e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8116c20:	687b      	ldr	r3, [r7, #4]
 8116c22:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8116c26:	78fa      	ldrb	r2, [r7, #3]
 8116c28:	6879      	ldr	r1, [r7, #4]
 8116c2a:	4613      	mov	r3, r2
 8116c2c:	00db      	lsls	r3, r3, #3
 8116c2e:	1a9b      	subs	r3, r3, r2
 8116c30:	009b      	lsls	r3, r3, #2
 8116c32:	440b      	add	r3, r1
 8116c34:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8116c38:	681a      	ldr	r2, [r3, #0]
 8116c3a:	78fb      	ldrb	r3, [r7, #3]
 8116c3c:	4619      	mov	r1, r3
 8116c3e:	f7fb ffc1 	bl	8112bc4 <USBD_LL_DataOutStage>
}
 8116c42:	bf00      	nop
 8116c44:	3708      	adds	r7, #8
 8116c46:	46bd      	mov	sp, r7
 8116c48:	bd80      	pop	{r7, pc}

08116c4a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8116c4a:	b580      	push	{r7, lr}
 8116c4c:	b082      	sub	sp, #8
 8116c4e:	af00      	add	r7, sp, #0
 8116c50:	6078      	str	r0, [r7, #4]
 8116c52:	460b      	mov	r3, r1
 8116c54:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8116c56:	687b      	ldr	r3, [r7, #4]
 8116c58:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8116c5c:	78fa      	ldrb	r2, [r7, #3]
 8116c5e:	6879      	ldr	r1, [r7, #4]
 8116c60:	4613      	mov	r3, r2
 8116c62:	00db      	lsls	r3, r3, #3
 8116c64:	1a9b      	subs	r3, r3, r2
 8116c66:	009b      	lsls	r3, r3, #2
 8116c68:	440b      	add	r3, r1
 8116c6a:	3348      	adds	r3, #72	; 0x48
 8116c6c:	681a      	ldr	r2, [r3, #0]
 8116c6e:	78fb      	ldrb	r3, [r7, #3]
 8116c70:	4619      	mov	r1, r3
 8116c72:	f7fc f80a 	bl	8112c8a <USBD_LL_DataInStage>
}
 8116c76:	bf00      	nop
 8116c78:	3708      	adds	r7, #8
 8116c7a:	46bd      	mov	sp, r7
 8116c7c:	bd80      	pop	{r7, pc}

08116c7e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8116c7e:	b580      	push	{r7, lr}
 8116c80:	b082      	sub	sp, #8
 8116c82:	af00      	add	r7, sp, #0
 8116c84:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8116c86:	687b      	ldr	r3, [r7, #4]
 8116c88:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8116c8c:	4618      	mov	r0, r3
 8116c8e:	f7fc f91e 	bl	8112ece <USBD_LL_SOF>
}
 8116c92:	bf00      	nop
 8116c94:	3708      	adds	r7, #8
 8116c96:	46bd      	mov	sp, r7
 8116c98:	bd80      	pop	{r7, pc}

08116c9a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8116c9a:	b580      	push	{r7, lr}
 8116c9c:	b084      	sub	sp, #16
 8116c9e:	af00      	add	r7, sp, #0
 8116ca0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8116ca2:	2301      	movs	r3, #1
 8116ca4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8116ca6:	687b      	ldr	r3, [r7, #4]
 8116ca8:	68db      	ldr	r3, [r3, #12]
 8116caa:	2b00      	cmp	r3, #0
 8116cac:	d102      	bne.n	8116cb4 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8116cae:	2300      	movs	r3, #0
 8116cb0:	73fb      	strb	r3, [r7, #15]
 8116cb2:	e008      	b.n	8116cc6 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8116cb4:	687b      	ldr	r3, [r7, #4]
 8116cb6:	68db      	ldr	r3, [r3, #12]
 8116cb8:	2b02      	cmp	r3, #2
 8116cba:	d102      	bne.n	8116cc2 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8116cbc:	2301      	movs	r3, #1
 8116cbe:	73fb      	strb	r3, [r7, #15]
 8116cc0:	e001      	b.n	8116cc6 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8116cc2:	f7ea ff53 	bl	8101b6c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8116cc6:	687b      	ldr	r3, [r7, #4]
 8116cc8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8116ccc:	7bfa      	ldrb	r2, [r7, #15]
 8116cce:	4611      	mov	r1, r2
 8116cd0:	4618      	mov	r0, r3
 8116cd2:	f7fc f8be 	bl	8112e52 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8116cd6:	687b      	ldr	r3, [r7, #4]
 8116cd8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8116cdc:	4618      	mov	r0, r3
 8116cde:	f7fc f86a 	bl	8112db6 <USBD_LL_Reset>
}
 8116ce2:	bf00      	nop
 8116ce4:	3710      	adds	r7, #16
 8116ce6:	46bd      	mov	sp, r7
 8116ce8:	bd80      	pop	{r7, pc}
	...

08116cec <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8116cec:	b580      	push	{r7, lr}
 8116cee:	b082      	sub	sp, #8
 8116cf0:	af00      	add	r7, sp, #0
 8116cf2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8116cf4:	687b      	ldr	r3, [r7, #4]
 8116cf6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8116cfa:	4618      	mov	r0, r3
 8116cfc:	f7fc f8b9 	bl	8112e72 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8116d00:	687b      	ldr	r3, [r7, #4]
 8116d02:	681b      	ldr	r3, [r3, #0]
 8116d04:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8116d08:	681b      	ldr	r3, [r3, #0]
 8116d0a:	687a      	ldr	r2, [r7, #4]
 8116d0c:	6812      	ldr	r2, [r2, #0]
 8116d0e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8116d12:	f043 0301 	orr.w	r3, r3, #1
 8116d16:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8116d18:	687b      	ldr	r3, [r7, #4]
 8116d1a:	6a1b      	ldr	r3, [r3, #32]
 8116d1c:	2b00      	cmp	r3, #0
 8116d1e:	d005      	beq.n	8116d2c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8116d20:	4b04      	ldr	r3, [pc, #16]	; (8116d34 <HAL_PCD_SuspendCallback+0x48>)
 8116d22:	691b      	ldr	r3, [r3, #16]
 8116d24:	4a03      	ldr	r2, [pc, #12]	; (8116d34 <HAL_PCD_SuspendCallback+0x48>)
 8116d26:	f043 0306 	orr.w	r3, r3, #6
 8116d2a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8116d2c:	bf00      	nop
 8116d2e:	3708      	adds	r7, #8
 8116d30:	46bd      	mov	sp, r7
 8116d32:	bd80      	pop	{r7, pc}
 8116d34:	e000ed00 	.word	0xe000ed00

08116d38 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8116d38:	b580      	push	{r7, lr}
 8116d3a:	b082      	sub	sp, #8
 8116d3c:	af00      	add	r7, sp, #0
 8116d3e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8116d40:	687b      	ldr	r3, [r7, #4]
 8116d42:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8116d46:	4618      	mov	r0, r3
 8116d48:	f7fc f8a9 	bl	8112e9e <USBD_LL_Resume>
}
 8116d4c:	bf00      	nop
 8116d4e:	3708      	adds	r7, #8
 8116d50:	46bd      	mov	sp, r7
 8116d52:	bd80      	pop	{r7, pc}

08116d54 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8116d54:	b580      	push	{r7, lr}
 8116d56:	b082      	sub	sp, #8
 8116d58:	af00      	add	r7, sp, #0
 8116d5a:	6078      	str	r0, [r7, #4]
 8116d5c:	460b      	mov	r3, r1
 8116d5e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8116d60:	687b      	ldr	r3, [r7, #4]
 8116d62:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8116d66:	78fa      	ldrb	r2, [r7, #3]
 8116d68:	4611      	mov	r1, r2
 8116d6a:	4618      	mov	r0, r3
 8116d6c:	f7fc f8f7 	bl	8112f5e <USBD_LL_IsoOUTIncomplete>
}
 8116d70:	bf00      	nop
 8116d72:	3708      	adds	r7, #8
 8116d74:	46bd      	mov	sp, r7
 8116d76:	bd80      	pop	{r7, pc}

08116d78 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8116d78:	b580      	push	{r7, lr}
 8116d7a:	b082      	sub	sp, #8
 8116d7c:	af00      	add	r7, sp, #0
 8116d7e:	6078      	str	r0, [r7, #4]
 8116d80:	460b      	mov	r3, r1
 8116d82:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8116d84:	687b      	ldr	r3, [r7, #4]
 8116d86:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8116d8a:	78fa      	ldrb	r2, [r7, #3]
 8116d8c:	4611      	mov	r1, r2
 8116d8e:	4618      	mov	r0, r3
 8116d90:	f7fc f8bf 	bl	8112f12 <USBD_LL_IsoINIncomplete>
}
 8116d94:	bf00      	nop
 8116d96:	3708      	adds	r7, #8
 8116d98:	46bd      	mov	sp, r7
 8116d9a:	bd80      	pop	{r7, pc}

08116d9c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8116d9c:	b580      	push	{r7, lr}
 8116d9e:	b082      	sub	sp, #8
 8116da0:	af00      	add	r7, sp, #0
 8116da2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8116da4:	687b      	ldr	r3, [r7, #4]
 8116da6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8116daa:	4618      	mov	r0, r3
 8116dac:	f7fc f8fd 	bl	8112faa <USBD_LL_DevConnected>
}
 8116db0:	bf00      	nop
 8116db2:	3708      	adds	r7, #8
 8116db4:	46bd      	mov	sp, r7
 8116db6:	bd80      	pop	{r7, pc}

08116db8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8116db8:	b580      	push	{r7, lr}
 8116dba:	b082      	sub	sp, #8
 8116dbc:	af00      	add	r7, sp, #0
 8116dbe:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8116dc0:	687b      	ldr	r3, [r7, #4]
 8116dc2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8116dc6:	4618      	mov	r0, r3
 8116dc8:	f7fc f8fa 	bl	8112fc0 <USBD_LL_DevDisconnected>
}
 8116dcc:	bf00      	nop
 8116dce:	3708      	adds	r7, #8
 8116dd0:	46bd      	mov	sp, r7
 8116dd2:	bd80      	pop	{r7, pc}

08116dd4 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8116dd4:	b580      	push	{r7, lr}
 8116dd6:	b084      	sub	sp, #16
 8116dd8:	af00      	add	r7, sp, #0
 8116dda:	6078      	str	r0, [r7, #4]
 8116ddc:	4608      	mov	r0, r1
 8116dde:	4611      	mov	r1, r2
 8116de0:	461a      	mov	r2, r3
 8116de2:	4603      	mov	r3, r0
 8116de4:	70fb      	strb	r3, [r7, #3]
 8116de6:	460b      	mov	r3, r1
 8116de8:	70bb      	strb	r3, [r7, #2]
 8116dea:	4613      	mov	r3, r2
 8116dec:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8116dee:	2300      	movs	r3, #0
 8116df0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8116df2:	2300      	movs	r3, #0
 8116df4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8116df6:	687b      	ldr	r3, [r7, #4]
 8116df8:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8116dfc:	78bb      	ldrb	r3, [r7, #2]
 8116dfe:	883a      	ldrh	r2, [r7, #0]
 8116e00:	78f9      	ldrb	r1, [r7, #3]
 8116e02:	f7f1 fe9d 	bl	8108b40 <HAL_PCD_EP_Open>
 8116e06:	4603      	mov	r3, r0
 8116e08:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8116e0a:	7bfb      	ldrb	r3, [r7, #15]
 8116e0c:	4618      	mov	r0, r3
 8116e0e:	f000 f8d3 	bl	8116fb8 <USBD_Get_USB_Status>
 8116e12:	4603      	mov	r3, r0
 8116e14:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8116e16:	7bbb      	ldrb	r3, [r7, #14]
}
 8116e18:	4618      	mov	r0, r3
 8116e1a:	3710      	adds	r7, #16
 8116e1c:	46bd      	mov	sp, r7
 8116e1e:	bd80      	pop	{r7, pc}

08116e20 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8116e20:	b580      	push	{r7, lr}
 8116e22:	b084      	sub	sp, #16
 8116e24:	af00      	add	r7, sp, #0
 8116e26:	6078      	str	r0, [r7, #4]
 8116e28:	460b      	mov	r3, r1
 8116e2a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8116e2c:	2300      	movs	r3, #0
 8116e2e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8116e30:	2300      	movs	r3, #0
 8116e32:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8116e34:	687b      	ldr	r3, [r7, #4]
 8116e36:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8116e3a:	78fa      	ldrb	r2, [r7, #3]
 8116e3c:	4611      	mov	r1, r2
 8116e3e:	4618      	mov	r0, r3
 8116e40:	f7f1 ff7b 	bl	8108d3a <HAL_PCD_EP_SetStall>
 8116e44:	4603      	mov	r3, r0
 8116e46:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8116e48:	7bfb      	ldrb	r3, [r7, #15]
 8116e4a:	4618      	mov	r0, r3
 8116e4c:	f000 f8b4 	bl	8116fb8 <USBD_Get_USB_Status>
 8116e50:	4603      	mov	r3, r0
 8116e52:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8116e54:	7bbb      	ldrb	r3, [r7, #14]
}
 8116e56:	4618      	mov	r0, r3
 8116e58:	3710      	adds	r7, #16
 8116e5a:	46bd      	mov	sp, r7
 8116e5c:	bd80      	pop	{r7, pc}

08116e5e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8116e5e:	b580      	push	{r7, lr}
 8116e60:	b084      	sub	sp, #16
 8116e62:	af00      	add	r7, sp, #0
 8116e64:	6078      	str	r0, [r7, #4]
 8116e66:	460b      	mov	r3, r1
 8116e68:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8116e6a:	2300      	movs	r3, #0
 8116e6c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8116e6e:	2300      	movs	r3, #0
 8116e70:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8116e72:	687b      	ldr	r3, [r7, #4]
 8116e74:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8116e78:	78fa      	ldrb	r2, [r7, #3]
 8116e7a:	4611      	mov	r1, r2
 8116e7c:	4618      	mov	r0, r3
 8116e7e:	f7f1 ffc0 	bl	8108e02 <HAL_PCD_EP_ClrStall>
 8116e82:	4603      	mov	r3, r0
 8116e84:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8116e86:	7bfb      	ldrb	r3, [r7, #15]
 8116e88:	4618      	mov	r0, r3
 8116e8a:	f000 f895 	bl	8116fb8 <USBD_Get_USB_Status>
 8116e8e:	4603      	mov	r3, r0
 8116e90:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8116e92:	7bbb      	ldrb	r3, [r7, #14]
}
 8116e94:	4618      	mov	r0, r3
 8116e96:	3710      	adds	r7, #16
 8116e98:	46bd      	mov	sp, r7
 8116e9a:	bd80      	pop	{r7, pc}

08116e9c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8116e9c:	b480      	push	{r7}
 8116e9e:	b085      	sub	sp, #20
 8116ea0:	af00      	add	r7, sp, #0
 8116ea2:	6078      	str	r0, [r7, #4]
 8116ea4:	460b      	mov	r3, r1
 8116ea6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8116ea8:	687b      	ldr	r3, [r7, #4]
 8116eaa:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8116eae:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8116eb0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8116eb4:	2b00      	cmp	r3, #0
 8116eb6:	da0b      	bge.n	8116ed0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8116eb8:	78fb      	ldrb	r3, [r7, #3]
 8116eba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8116ebe:	68f9      	ldr	r1, [r7, #12]
 8116ec0:	4613      	mov	r3, r2
 8116ec2:	00db      	lsls	r3, r3, #3
 8116ec4:	1a9b      	subs	r3, r3, r2
 8116ec6:	009b      	lsls	r3, r3, #2
 8116ec8:	440b      	add	r3, r1
 8116eca:	333e      	adds	r3, #62	; 0x3e
 8116ecc:	781b      	ldrb	r3, [r3, #0]
 8116ece:	e00b      	b.n	8116ee8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8116ed0:	78fb      	ldrb	r3, [r7, #3]
 8116ed2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8116ed6:	68f9      	ldr	r1, [r7, #12]
 8116ed8:	4613      	mov	r3, r2
 8116eda:	00db      	lsls	r3, r3, #3
 8116edc:	1a9b      	subs	r3, r3, r2
 8116ede:	009b      	lsls	r3, r3, #2
 8116ee0:	440b      	add	r3, r1
 8116ee2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8116ee6:	781b      	ldrb	r3, [r3, #0]
  }
}
 8116ee8:	4618      	mov	r0, r3
 8116eea:	3714      	adds	r7, #20
 8116eec:	46bd      	mov	sp, r7
 8116eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8116ef2:	4770      	bx	lr

08116ef4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8116ef4:	b580      	push	{r7, lr}
 8116ef6:	b084      	sub	sp, #16
 8116ef8:	af00      	add	r7, sp, #0
 8116efa:	6078      	str	r0, [r7, #4]
 8116efc:	460b      	mov	r3, r1
 8116efe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8116f00:	2300      	movs	r3, #0
 8116f02:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8116f04:	2300      	movs	r3, #0
 8116f06:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8116f08:	687b      	ldr	r3, [r7, #4]
 8116f0a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8116f0e:	78fa      	ldrb	r2, [r7, #3]
 8116f10:	4611      	mov	r1, r2
 8116f12:	4618      	mov	r0, r3
 8116f14:	f7f1 fdef 	bl	8108af6 <HAL_PCD_SetAddress>
 8116f18:	4603      	mov	r3, r0
 8116f1a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8116f1c:	7bfb      	ldrb	r3, [r7, #15]
 8116f1e:	4618      	mov	r0, r3
 8116f20:	f000 f84a 	bl	8116fb8 <USBD_Get_USB_Status>
 8116f24:	4603      	mov	r3, r0
 8116f26:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8116f28:	7bbb      	ldrb	r3, [r7, #14]
}
 8116f2a:	4618      	mov	r0, r3
 8116f2c:	3710      	adds	r7, #16
 8116f2e:	46bd      	mov	sp, r7
 8116f30:	bd80      	pop	{r7, pc}

08116f32 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8116f32:	b580      	push	{r7, lr}
 8116f34:	b086      	sub	sp, #24
 8116f36:	af00      	add	r7, sp, #0
 8116f38:	60f8      	str	r0, [r7, #12]
 8116f3a:	607a      	str	r2, [r7, #4]
 8116f3c:	603b      	str	r3, [r7, #0]
 8116f3e:	460b      	mov	r3, r1
 8116f40:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8116f42:	2300      	movs	r3, #0
 8116f44:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8116f46:	2300      	movs	r3, #0
 8116f48:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8116f4a:	68fb      	ldr	r3, [r7, #12]
 8116f4c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8116f50:	7af9      	ldrb	r1, [r7, #11]
 8116f52:	683b      	ldr	r3, [r7, #0]
 8116f54:	687a      	ldr	r2, [r7, #4]
 8116f56:	f7f1 fea6 	bl	8108ca6 <HAL_PCD_EP_Transmit>
 8116f5a:	4603      	mov	r3, r0
 8116f5c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8116f5e:	7dfb      	ldrb	r3, [r7, #23]
 8116f60:	4618      	mov	r0, r3
 8116f62:	f000 f829 	bl	8116fb8 <USBD_Get_USB_Status>
 8116f66:	4603      	mov	r3, r0
 8116f68:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8116f6a:	7dbb      	ldrb	r3, [r7, #22]
}
 8116f6c:	4618      	mov	r0, r3
 8116f6e:	3718      	adds	r7, #24
 8116f70:	46bd      	mov	sp, r7
 8116f72:	bd80      	pop	{r7, pc}

08116f74 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8116f74:	b580      	push	{r7, lr}
 8116f76:	b086      	sub	sp, #24
 8116f78:	af00      	add	r7, sp, #0
 8116f7a:	60f8      	str	r0, [r7, #12]
 8116f7c:	607a      	str	r2, [r7, #4]
 8116f7e:	603b      	str	r3, [r7, #0]
 8116f80:	460b      	mov	r3, r1
 8116f82:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8116f84:	2300      	movs	r3, #0
 8116f86:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8116f88:	2300      	movs	r3, #0
 8116f8a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8116f8c:	68fb      	ldr	r3, [r7, #12]
 8116f8e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8116f92:	7af9      	ldrb	r1, [r7, #11]
 8116f94:	683b      	ldr	r3, [r7, #0]
 8116f96:	687a      	ldr	r2, [r7, #4]
 8116f98:	f7f1 fe3a 	bl	8108c10 <HAL_PCD_EP_Receive>
 8116f9c:	4603      	mov	r3, r0
 8116f9e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8116fa0:	7dfb      	ldrb	r3, [r7, #23]
 8116fa2:	4618      	mov	r0, r3
 8116fa4:	f000 f808 	bl	8116fb8 <USBD_Get_USB_Status>
 8116fa8:	4603      	mov	r3, r0
 8116faa:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8116fac:	7dbb      	ldrb	r3, [r7, #22]
}
 8116fae:	4618      	mov	r0, r3
 8116fb0:	3718      	adds	r7, #24
 8116fb2:	46bd      	mov	sp, r7
 8116fb4:	bd80      	pop	{r7, pc}
	...

08116fb8 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8116fb8:	b480      	push	{r7}
 8116fba:	b085      	sub	sp, #20
 8116fbc:	af00      	add	r7, sp, #0
 8116fbe:	4603      	mov	r3, r0
 8116fc0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8116fc2:	2300      	movs	r3, #0
 8116fc4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8116fc6:	79fb      	ldrb	r3, [r7, #7]
 8116fc8:	2b03      	cmp	r3, #3
 8116fca:	d817      	bhi.n	8116ffc <USBD_Get_USB_Status+0x44>
 8116fcc:	a201      	add	r2, pc, #4	; (adr r2, 8116fd4 <USBD_Get_USB_Status+0x1c>)
 8116fce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8116fd2:	bf00      	nop
 8116fd4:	08116fe5 	.word	0x08116fe5
 8116fd8:	08116feb 	.word	0x08116feb
 8116fdc:	08116ff1 	.word	0x08116ff1
 8116fe0:	08116ff7 	.word	0x08116ff7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8116fe4:	2300      	movs	r3, #0
 8116fe6:	73fb      	strb	r3, [r7, #15]
    break;
 8116fe8:	e00b      	b.n	8117002 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8116fea:	2303      	movs	r3, #3
 8116fec:	73fb      	strb	r3, [r7, #15]
    break;
 8116fee:	e008      	b.n	8117002 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8116ff0:	2301      	movs	r3, #1
 8116ff2:	73fb      	strb	r3, [r7, #15]
    break;
 8116ff4:	e005      	b.n	8117002 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8116ff6:	2303      	movs	r3, #3
 8116ff8:	73fb      	strb	r3, [r7, #15]
    break;
 8116ffa:	e002      	b.n	8117002 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8116ffc:	2303      	movs	r3, #3
 8116ffe:	73fb      	strb	r3, [r7, #15]
    break;
 8117000:	bf00      	nop
  }
  return usb_status;
 8117002:	7bfb      	ldrb	r3, [r7, #15]
}
 8117004:	4618      	mov	r0, r3
 8117006:	3714      	adds	r7, #20
 8117008:	46bd      	mov	sp, r7
 811700a:	f85d 7b04 	ldr.w	r7, [sp], #4
 811700e:	4770      	bx	lr

08117010 <__errno>:
 8117010:	4b01      	ldr	r3, [pc, #4]	; (8117018 <__errno+0x8>)
 8117012:	6818      	ldr	r0, [r3, #0]
 8117014:	4770      	bx	lr
 8117016:	bf00      	nop
 8117018:	10000014 	.word	0x10000014

0811701c <__libc_init_array>:
 811701c:	b570      	push	{r4, r5, r6, lr}
 811701e:	4d0d      	ldr	r5, [pc, #52]	; (8117054 <__libc_init_array+0x38>)
 8117020:	4c0d      	ldr	r4, [pc, #52]	; (8117058 <__libc_init_array+0x3c>)
 8117022:	1b64      	subs	r4, r4, r5
 8117024:	10a4      	asrs	r4, r4, #2
 8117026:	2600      	movs	r6, #0
 8117028:	42a6      	cmp	r6, r4
 811702a:	d109      	bne.n	8117040 <__libc_init_array+0x24>
 811702c:	4d0b      	ldr	r5, [pc, #44]	; (811705c <__libc_init_array+0x40>)
 811702e:	4c0c      	ldr	r4, [pc, #48]	; (8117060 <__libc_init_array+0x44>)
 8117030:	f002 fcf2 	bl	8119a18 <_init>
 8117034:	1b64      	subs	r4, r4, r5
 8117036:	10a4      	asrs	r4, r4, #2
 8117038:	2600      	movs	r6, #0
 811703a:	42a6      	cmp	r6, r4
 811703c:	d105      	bne.n	811704a <__libc_init_array+0x2e>
 811703e:	bd70      	pop	{r4, r5, r6, pc}
 8117040:	f855 3b04 	ldr.w	r3, [r5], #4
 8117044:	4798      	blx	r3
 8117046:	3601      	adds	r6, #1
 8117048:	e7ee      	b.n	8117028 <__libc_init_array+0xc>
 811704a:	f855 3b04 	ldr.w	r3, [r5], #4
 811704e:	4798      	blx	r3
 8117050:	3601      	adds	r6, #1
 8117052:	e7f2      	b.n	811703a <__libc_init_array+0x1e>
 8117054:	08119f3c 	.word	0x08119f3c
 8117058:	08119f3c 	.word	0x08119f3c
 811705c:	08119f3c 	.word	0x08119f3c
 8117060:	08119f40 	.word	0x08119f40

08117064 <memcpy>:
 8117064:	440a      	add	r2, r1
 8117066:	4291      	cmp	r1, r2
 8117068:	f100 33ff 	add.w	r3, r0, #4294967295
 811706c:	d100      	bne.n	8117070 <memcpy+0xc>
 811706e:	4770      	bx	lr
 8117070:	b510      	push	{r4, lr}
 8117072:	f811 4b01 	ldrb.w	r4, [r1], #1
 8117076:	f803 4f01 	strb.w	r4, [r3, #1]!
 811707a:	4291      	cmp	r1, r2
 811707c:	d1f9      	bne.n	8117072 <memcpy+0xe>
 811707e:	bd10      	pop	{r4, pc}

08117080 <memset>:
 8117080:	4402      	add	r2, r0
 8117082:	4603      	mov	r3, r0
 8117084:	4293      	cmp	r3, r2
 8117086:	d100      	bne.n	811708a <memset+0xa>
 8117088:	4770      	bx	lr
 811708a:	f803 1b01 	strb.w	r1, [r3], #1
 811708e:	e7f9      	b.n	8117084 <memset+0x4>

08117090 <__cvt>:
 8117090:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8117094:	ec55 4b10 	vmov	r4, r5, d0
 8117098:	2d00      	cmp	r5, #0
 811709a:	460e      	mov	r6, r1
 811709c:	4619      	mov	r1, r3
 811709e:	462b      	mov	r3, r5
 81170a0:	bfbb      	ittet	lt
 81170a2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 81170a6:	461d      	movlt	r5, r3
 81170a8:	2300      	movge	r3, #0
 81170aa:	232d      	movlt	r3, #45	; 0x2d
 81170ac:	700b      	strb	r3, [r1, #0]
 81170ae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 81170b0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 81170b4:	4691      	mov	r9, r2
 81170b6:	f023 0820 	bic.w	r8, r3, #32
 81170ba:	bfbc      	itt	lt
 81170bc:	4622      	movlt	r2, r4
 81170be:	4614      	movlt	r4, r2
 81170c0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 81170c4:	d005      	beq.n	81170d2 <__cvt+0x42>
 81170c6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 81170ca:	d100      	bne.n	81170ce <__cvt+0x3e>
 81170cc:	3601      	adds	r6, #1
 81170ce:	2102      	movs	r1, #2
 81170d0:	e000      	b.n	81170d4 <__cvt+0x44>
 81170d2:	2103      	movs	r1, #3
 81170d4:	ab03      	add	r3, sp, #12
 81170d6:	9301      	str	r3, [sp, #4]
 81170d8:	ab02      	add	r3, sp, #8
 81170da:	9300      	str	r3, [sp, #0]
 81170dc:	ec45 4b10 	vmov	d0, r4, r5
 81170e0:	4653      	mov	r3, sl
 81170e2:	4632      	mov	r2, r6
 81170e4:	f000 fccc 	bl	8117a80 <_dtoa_r>
 81170e8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 81170ec:	4607      	mov	r7, r0
 81170ee:	d102      	bne.n	81170f6 <__cvt+0x66>
 81170f0:	f019 0f01 	tst.w	r9, #1
 81170f4:	d022      	beq.n	811713c <__cvt+0xac>
 81170f6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 81170fa:	eb07 0906 	add.w	r9, r7, r6
 81170fe:	d110      	bne.n	8117122 <__cvt+0x92>
 8117100:	783b      	ldrb	r3, [r7, #0]
 8117102:	2b30      	cmp	r3, #48	; 0x30
 8117104:	d10a      	bne.n	811711c <__cvt+0x8c>
 8117106:	2200      	movs	r2, #0
 8117108:	2300      	movs	r3, #0
 811710a:	4620      	mov	r0, r4
 811710c:	4629      	mov	r1, r5
 811710e:	f7e9 fd63 	bl	8100bd8 <__aeabi_dcmpeq>
 8117112:	b918      	cbnz	r0, 811711c <__cvt+0x8c>
 8117114:	f1c6 0601 	rsb	r6, r6, #1
 8117118:	f8ca 6000 	str.w	r6, [sl]
 811711c:	f8da 3000 	ldr.w	r3, [sl]
 8117120:	4499      	add	r9, r3
 8117122:	2200      	movs	r2, #0
 8117124:	2300      	movs	r3, #0
 8117126:	4620      	mov	r0, r4
 8117128:	4629      	mov	r1, r5
 811712a:	f7e9 fd55 	bl	8100bd8 <__aeabi_dcmpeq>
 811712e:	b108      	cbz	r0, 8117134 <__cvt+0xa4>
 8117130:	f8cd 900c 	str.w	r9, [sp, #12]
 8117134:	2230      	movs	r2, #48	; 0x30
 8117136:	9b03      	ldr	r3, [sp, #12]
 8117138:	454b      	cmp	r3, r9
 811713a:	d307      	bcc.n	811714c <__cvt+0xbc>
 811713c:	9b03      	ldr	r3, [sp, #12]
 811713e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8117140:	1bdb      	subs	r3, r3, r7
 8117142:	4638      	mov	r0, r7
 8117144:	6013      	str	r3, [r2, #0]
 8117146:	b004      	add	sp, #16
 8117148:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 811714c:	1c59      	adds	r1, r3, #1
 811714e:	9103      	str	r1, [sp, #12]
 8117150:	701a      	strb	r2, [r3, #0]
 8117152:	e7f0      	b.n	8117136 <__cvt+0xa6>

08117154 <__exponent>:
 8117154:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8117156:	4603      	mov	r3, r0
 8117158:	2900      	cmp	r1, #0
 811715a:	bfb8      	it	lt
 811715c:	4249      	neglt	r1, r1
 811715e:	f803 2b02 	strb.w	r2, [r3], #2
 8117162:	bfb4      	ite	lt
 8117164:	222d      	movlt	r2, #45	; 0x2d
 8117166:	222b      	movge	r2, #43	; 0x2b
 8117168:	2909      	cmp	r1, #9
 811716a:	7042      	strb	r2, [r0, #1]
 811716c:	dd2a      	ble.n	81171c4 <__exponent+0x70>
 811716e:	f10d 0407 	add.w	r4, sp, #7
 8117172:	46a4      	mov	ip, r4
 8117174:	270a      	movs	r7, #10
 8117176:	46a6      	mov	lr, r4
 8117178:	460a      	mov	r2, r1
 811717a:	fb91 f6f7 	sdiv	r6, r1, r7
 811717e:	fb07 1516 	mls	r5, r7, r6, r1
 8117182:	3530      	adds	r5, #48	; 0x30
 8117184:	2a63      	cmp	r2, #99	; 0x63
 8117186:	f104 34ff 	add.w	r4, r4, #4294967295
 811718a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 811718e:	4631      	mov	r1, r6
 8117190:	dcf1      	bgt.n	8117176 <__exponent+0x22>
 8117192:	3130      	adds	r1, #48	; 0x30
 8117194:	f1ae 0502 	sub.w	r5, lr, #2
 8117198:	f804 1c01 	strb.w	r1, [r4, #-1]
 811719c:	1c44      	adds	r4, r0, #1
 811719e:	4629      	mov	r1, r5
 81171a0:	4561      	cmp	r1, ip
 81171a2:	d30a      	bcc.n	81171ba <__exponent+0x66>
 81171a4:	f10d 0209 	add.w	r2, sp, #9
 81171a8:	eba2 020e 	sub.w	r2, r2, lr
 81171ac:	4565      	cmp	r5, ip
 81171ae:	bf88      	it	hi
 81171b0:	2200      	movhi	r2, #0
 81171b2:	4413      	add	r3, r2
 81171b4:	1a18      	subs	r0, r3, r0
 81171b6:	b003      	add	sp, #12
 81171b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 81171ba:	f811 2b01 	ldrb.w	r2, [r1], #1
 81171be:	f804 2f01 	strb.w	r2, [r4, #1]!
 81171c2:	e7ed      	b.n	81171a0 <__exponent+0x4c>
 81171c4:	2330      	movs	r3, #48	; 0x30
 81171c6:	3130      	adds	r1, #48	; 0x30
 81171c8:	7083      	strb	r3, [r0, #2]
 81171ca:	70c1      	strb	r1, [r0, #3]
 81171cc:	1d03      	adds	r3, r0, #4
 81171ce:	e7f1      	b.n	81171b4 <__exponent+0x60>

081171d0 <_printf_float>:
 81171d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 81171d4:	ed2d 8b02 	vpush	{d8}
 81171d8:	b08d      	sub	sp, #52	; 0x34
 81171da:	460c      	mov	r4, r1
 81171dc:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 81171e0:	4616      	mov	r6, r2
 81171e2:	461f      	mov	r7, r3
 81171e4:	4605      	mov	r5, r0
 81171e6:	f001 fa37 	bl	8118658 <_localeconv_r>
 81171ea:	f8d0 a000 	ldr.w	sl, [r0]
 81171ee:	4650      	mov	r0, sl
 81171f0:	f7e9 f876 	bl	81002e0 <strlen>
 81171f4:	2300      	movs	r3, #0
 81171f6:	930a      	str	r3, [sp, #40]	; 0x28
 81171f8:	6823      	ldr	r3, [r4, #0]
 81171fa:	9305      	str	r3, [sp, #20]
 81171fc:	f8d8 3000 	ldr.w	r3, [r8]
 8117200:	f894 b018 	ldrb.w	fp, [r4, #24]
 8117204:	3307      	adds	r3, #7
 8117206:	f023 0307 	bic.w	r3, r3, #7
 811720a:	f103 0208 	add.w	r2, r3, #8
 811720e:	f8c8 2000 	str.w	r2, [r8]
 8117212:	e9d3 2300 	ldrd	r2, r3, [r3]
 8117216:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 811721a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 811721e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8117222:	9307      	str	r3, [sp, #28]
 8117224:	f8cd 8018 	str.w	r8, [sp, #24]
 8117228:	ee08 0a10 	vmov	s16, r0
 811722c:	4b9f      	ldr	r3, [pc, #636]	; (81174ac <_printf_float+0x2dc>)
 811722e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8117232:	f04f 32ff 	mov.w	r2, #4294967295
 8117236:	f7e9 fd01 	bl	8100c3c <__aeabi_dcmpun>
 811723a:	bb88      	cbnz	r0, 81172a0 <_printf_float+0xd0>
 811723c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8117240:	4b9a      	ldr	r3, [pc, #616]	; (81174ac <_printf_float+0x2dc>)
 8117242:	f04f 32ff 	mov.w	r2, #4294967295
 8117246:	f7e9 fcdb 	bl	8100c00 <__aeabi_dcmple>
 811724a:	bb48      	cbnz	r0, 81172a0 <_printf_float+0xd0>
 811724c:	2200      	movs	r2, #0
 811724e:	2300      	movs	r3, #0
 8117250:	4640      	mov	r0, r8
 8117252:	4649      	mov	r1, r9
 8117254:	f7e9 fcca 	bl	8100bec <__aeabi_dcmplt>
 8117258:	b110      	cbz	r0, 8117260 <_printf_float+0x90>
 811725a:	232d      	movs	r3, #45	; 0x2d
 811725c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8117260:	4b93      	ldr	r3, [pc, #588]	; (81174b0 <_printf_float+0x2e0>)
 8117262:	4894      	ldr	r0, [pc, #592]	; (81174b4 <_printf_float+0x2e4>)
 8117264:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8117268:	bf94      	ite	ls
 811726a:	4698      	movls	r8, r3
 811726c:	4680      	movhi	r8, r0
 811726e:	2303      	movs	r3, #3
 8117270:	6123      	str	r3, [r4, #16]
 8117272:	9b05      	ldr	r3, [sp, #20]
 8117274:	f023 0204 	bic.w	r2, r3, #4
 8117278:	6022      	str	r2, [r4, #0]
 811727a:	f04f 0900 	mov.w	r9, #0
 811727e:	9700      	str	r7, [sp, #0]
 8117280:	4633      	mov	r3, r6
 8117282:	aa0b      	add	r2, sp, #44	; 0x2c
 8117284:	4621      	mov	r1, r4
 8117286:	4628      	mov	r0, r5
 8117288:	f000 f9d8 	bl	811763c <_printf_common>
 811728c:	3001      	adds	r0, #1
 811728e:	f040 8090 	bne.w	81173b2 <_printf_float+0x1e2>
 8117292:	f04f 30ff 	mov.w	r0, #4294967295
 8117296:	b00d      	add	sp, #52	; 0x34
 8117298:	ecbd 8b02 	vpop	{d8}
 811729c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 81172a0:	4642      	mov	r2, r8
 81172a2:	464b      	mov	r3, r9
 81172a4:	4640      	mov	r0, r8
 81172a6:	4649      	mov	r1, r9
 81172a8:	f7e9 fcc8 	bl	8100c3c <__aeabi_dcmpun>
 81172ac:	b140      	cbz	r0, 81172c0 <_printf_float+0xf0>
 81172ae:	464b      	mov	r3, r9
 81172b0:	2b00      	cmp	r3, #0
 81172b2:	bfbc      	itt	lt
 81172b4:	232d      	movlt	r3, #45	; 0x2d
 81172b6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 81172ba:	487f      	ldr	r0, [pc, #508]	; (81174b8 <_printf_float+0x2e8>)
 81172bc:	4b7f      	ldr	r3, [pc, #508]	; (81174bc <_printf_float+0x2ec>)
 81172be:	e7d1      	b.n	8117264 <_printf_float+0x94>
 81172c0:	6863      	ldr	r3, [r4, #4]
 81172c2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 81172c6:	9206      	str	r2, [sp, #24]
 81172c8:	1c5a      	adds	r2, r3, #1
 81172ca:	d13f      	bne.n	811734c <_printf_float+0x17c>
 81172cc:	2306      	movs	r3, #6
 81172ce:	6063      	str	r3, [r4, #4]
 81172d0:	9b05      	ldr	r3, [sp, #20]
 81172d2:	6861      	ldr	r1, [r4, #4]
 81172d4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 81172d8:	2300      	movs	r3, #0
 81172da:	9303      	str	r3, [sp, #12]
 81172dc:	ab0a      	add	r3, sp, #40	; 0x28
 81172de:	e9cd b301 	strd	fp, r3, [sp, #4]
 81172e2:	ab09      	add	r3, sp, #36	; 0x24
 81172e4:	ec49 8b10 	vmov	d0, r8, r9
 81172e8:	9300      	str	r3, [sp, #0]
 81172ea:	6022      	str	r2, [r4, #0]
 81172ec:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 81172f0:	4628      	mov	r0, r5
 81172f2:	f7ff fecd 	bl	8117090 <__cvt>
 81172f6:	9b06      	ldr	r3, [sp, #24]
 81172f8:	9909      	ldr	r1, [sp, #36]	; 0x24
 81172fa:	2b47      	cmp	r3, #71	; 0x47
 81172fc:	4680      	mov	r8, r0
 81172fe:	d108      	bne.n	8117312 <_printf_float+0x142>
 8117300:	1cc8      	adds	r0, r1, #3
 8117302:	db02      	blt.n	811730a <_printf_float+0x13a>
 8117304:	6863      	ldr	r3, [r4, #4]
 8117306:	4299      	cmp	r1, r3
 8117308:	dd41      	ble.n	811738e <_printf_float+0x1be>
 811730a:	f1ab 0b02 	sub.w	fp, fp, #2
 811730e:	fa5f fb8b 	uxtb.w	fp, fp
 8117312:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8117316:	d820      	bhi.n	811735a <_printf_float+0x18a>
 8117318:	3901      	subs	r1, #1
 811731a:	465a      	mov	r2, fp
 811731c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8117320:	9109      	str	r1, [sp, #36]	; 0x24
 8117322:	f7ff ff17 	bl	8117154 <__exponent>
 8117326:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8117328:	1813      	adds	r3, r2, r0
 811732a:	2a01      	cmp	r2, #1
 811732c:	4681      	mov	r9, r0
 811732e:	6123      	str	r3, [r4, #16]
 8117330:	dc02      	bgt.n	8117338 <_printf_float+0x168>
 8117332:	6822      	ldr	r2, [r4, #0]
 8117334:	07d2      	lsls	r2, r2, #31
 8117336:	d501      	bpl.n	811733c <_printf_float+0x16c>
 8117338:	3301      	adds	r3, #1
 811733a:	6123      	str	r3, [r4, #16]
 811733c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8117340:	2b00      	cmp	r3, #0
 8117342:	d09c      	beq.n	811727e <_printf_float+0xae>
 8117344:	232d      	movs	r3, #45	; 0x2d
 8117346:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 811734a:	e798      	b.n	811727e <_printf_float+0xae>
 811734c:	9a06      	ldr	r2, [sp, #24]
 811734e:	2a47      	cmp	r2, #71	; 0x47
 8117350:	d1be      	bne.n	81172d0 <_printf_float+0x100>
 8117352:	2b00      	cmp	r3, #0
 8117354:	d1bc      	bne.n	81172d0 <_printf_float+0x100>
 8117356:	2301      	movs	r3, #1
 8117358:	e7b9      	b.n	81172ce <_printf_float+0xfe>
 811735a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 811735e:	d118      	bne.n	8117392 <_printf_float+0x1c2>
 8117360:	2900      	cmp	r1, #0
 8117362:	6863      	ldr	r3, [r4, #4]
 8117364:	dd0b      	ble.n	811737e <_printf_float+0x1ae>
 8117366:	6121      	str	r1, [r4, #16]
 8117368:	b913      	cbnz	r3, 8117370 <_printf_float+0x1a0>
 811736a:	6822      	ldr	r2, [r4, #0]
 811736c:	07d0      	lsls	r0, r2, #31
 811736e:	d502      	bpl.n	8117376 <_printf_float+0x1a6>
 8117370:	3301      	adds	r3, #1
 8117372:	440b      	add	r3, r1
 8117374:	6123      	str	r3, [r4, #16]
 8117376:	65a1      	str	r1, [r4, #88]	; 0x58
 8117378:	f04f 0900 	mov.w	r9, #0
 811737c:	e7de      	b.n	811733c <_printf_float+0x16c>
 811737e:	b913      	cbnz	r3, 8117386 <_printf_float+0x1b6>
 8117380:	6822      	ldr	r2, [r4, #0]
 8117382:	07d2      	lsls	r2, r2, #31
 8117384:	d501      	bpl.n	811738a <_printf_float+0x1ba>
 8117386:	3302      	adds	r3, #2
 8117388:	e7f4      	b.n	8117374 <_printf_float+0x1a4>
 811738a:	2301      	movs	r3, #1
 811738c:	e7f2      	b.n	8117374 <_printf_float+0x1a4>
 811738e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8117392:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8117394:	4299      	cmp	r1, r3
 8117396:	db05      	blt.n	81173a4 <_printf_float+0x1d4>
 8117398:	6823      	ldr	r3, [r4, #0]
 811739a:	6121      	str	r1, [r4, #16]
 811739c:	07d8      	lsls	r0, r3, #31
 811739e:	d5ea      	bpl.n	8117376 <_printf_float+0x1a6>
 81173a0:	1c4b      	adds	r3, r1, #1
 81173a2:	e7e7      	b.n	8117374 <_printf_float+0x1a4>
 81173a4:	2900      	cmp	r1, #0
 81173a6:	bfd4      	ite	le
 81173a8:	f1c1 0202 	rsble	r2, r1, #2
 81173ac:	2201      	movgt	r2, #1
 81173ae:	4413      	add	r3, r2
 81173b0:	e7e0      	b.n	8117374 <_printf_float+0x1a4>
 81173b2:	6823      	ldr	r3, [r4, #0]
 81173b4:	055a      	lsls	r2, r3, #21
 81173b6:	d407      	bmi.n	81173c8 <_printf_float+0x1f8>
 81173b8:	6923      	ldr	r3, [r4, #16]
 81173ba:	4642      	mov	r2, r8
 81173bc:	4631      	mov	r1, r6
 81173be:	4628      	mov	r0, r5
 81173c0:	47b8      	blx	r7
 81173c2:	3001      	adds	r0, #1
 81173c4:	d12c      	bne.n	8117420 <_printf_float+0x250>
 81173c6:	e764      	b.n	8117292 <_printf_float+0xc2>
 81173c8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 81173cc:	f240 80e0 	bls.w	8117590 <_printf_float+0x3c0>
 81173d0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 81173d4:	2200      	movs	r2, #0
 81173d6:	2300      	movs	r3, #0
 81173d8:	f7e9 fbfe 	bl	8100bd8 <__aeabi_dcmpeq>
 81173dc:	2800      	cmp	r0, #0
 81173de:	d034      	beq.n	811744a <_printf_float+0x27a>
 81173e0:	4a37      	ldr	r2, [pc, #220]	; (81174c0 <_printf_float+0x2f0>)
 81173e2:	2301      	movs	r3, #1
 81173e4:	4631      	mov	r1, r6
 81173e6:	4628      	mov	r0, r5
 81173e8:	47b8      	blx	r7
 81173ea:	3001      	adds	r0, #1
 81173ec:	f43f af51 	beq.w	8117292 <_printf_float+0xc2>
 81173f0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 81173f4:	429a      	cmp	r2, r3
 81173f6:	db02      	blt.n	81173fe <_printf_float+0x22e>
 81173f8:	6823      	ldr	r3, [r4, #0]
 81173fa:	07d8      	lsls	r0, r3, #31
 81173fc:	d510      	bpl.n	8117420 <_printf_float+0x250>
 81173fe:	ee18 3a10 	vmov	r3, s16
 8117402:	4652      	mov	r2, sl
 8117404:	4631      	mov	r1, r6
 8117406:	4628      	mov	r0, r5
 8117408:	47b8      	blx	r7
 811740a:	3001      	adds	r0, #1
 811740c:	f43f af41 	beq.w	8117292 <_printf_float+0xc2>
 8117410:	f04f 0800 	mov.w	r8, #0
 8117414:	f104 091a 	add.w	r9, r4, #26
 8117418:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 811741a:	3b01      	subs	r3, #1
 811741c:	4543      	cmp	r3, r8
 811741e:	dc09      	bgt.n	8117434 <_printf_float+0x264>
 8117420:	6823      	ldr	r3, [r4, #0]
 8117422:	079b      	lsls	r3, r3, #30
 8117424:	f100 8105 	bmi.w	8117632 <_printf_float+0x462>
 8117428:	68e0      	ldr	r0, [r4, #12]
 811742a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 811742c:	4298      	cmp	r0, r3
 811742e:	bfb8      	it	lt
 8117430:	4618      	movlt	r0, r3
 8117432:	e730      	b.n	8117296 <_printf_float+0xc6>
 8117434:	2301      	movs	r3, #1
 8117436:	464a      	mov	r2, r9
 8117438:	4631      	mov	r1, r6
 811743a:	4628      	mov	r0, r5
 811743c:	47b8      	blx	r7
 811743e:	3001      	adds	r0, #1
 8117440:	f43f af27 	beq.w	8117292 <_printf_float+0xc2>
 8117444:	f108 0801 	add.w	r8, r8, #1
 8117448:	e7e6      	b.n	8117418 <_printf_float+0x248>
 811744a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 811744c:	2b00      	cmp	r3, #0
 811744e:	dc39      	bgt.n	81174c4 <_printf_float+0x2f4>
 8117450:	4a1b      	ldr	r2, [pc, #108]	; (81174c0 <_printf_float+0x2f0>)
 8117452:	2301      	movs	r3, #1
 8117454:	4631      	mov	r1, r6
 8117456:	4628      	mov	r0, r5
 8117458:	47b8      	blx	r7
 811745a:	3001      	adds	r0, #1
 811745c:	f43f af19 	beq.w	8117292 <_printf_float+0xc2>
 8117460:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8117464:	4313      	orrs	r3, r2
 8117466:	d102      	bne.n	811746e <_printf_float+0x29e>
 8117468:	6823      	ldr	r3, [r4, #0]
 811746a:	07d9      	lsls	r1, r3, #31
 811746c:	d5d8      	bpl.n	8117420 <_printf_float+0x250>
 811746e:	ee18 3a10 	vmov	r3, s16
 8117472:	4652      	mov	r2, sl
 8117474:	4631      	mov	r1, r6
 8117476:	4628      	mov	r0, r5
 8117478:	47b8      	blx	r7
 811747a:	3001      	adds	r0, #1
 811747c:	f43f af09 	beq.w	8117292 <_printf_float+0xc2>
 8117480:	f04f 0900 	mov.w	r9, #0
 8117484:	f104 0a1a 	add.w	sl, r4, #26
 8117488:	9b09      	ldr	r3, [sp, #36]	; 0x24
 811748a:	425b      	negs	r3, r3
 811748c:	454b      	cmp	r3, r9
 811748e:	dc01      	bgt.n	8117494 <_printf_float+0x2c4>
 8117490:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8117492:	e792      	b.n	81173ba <_printf_float+0x1ea>
 8117494:	2301      	movs	r3, #1
 8117496:	4652      	mov	r2, sl
 8117498:	4631      	mov	r1, r6
 811749a:	4628      	mov	r0, r5
 811749c:	47b8      	blx	r7
 811749e:	3001      	adds	r0, #1
 81174a0:	f43f aef7 	beq.w	8117292 <_printf_float+0xc2>
 81174a4:	f109 0901 	add.w	r9, r9, #1
 81174a8:	e7ee      	b.n	8117488 <_printf_float+0x2b8>
 81174aa:	bf00      	nop
 81174ac:	7fefffff 	.word	0x7fefffff
 81174b0:	08119b54 	.word	0x08119b54
 81174b4:	08119b58 	.word	0x08119b58
 81174b8:	08119b60 	.word	0x08119b60
 81174bc:	08119b5c 	.word	0x08119b5c
 81174c0:	08119b64 	.word	0x08119b64
 81174c4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 81174c6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 81174c8:	429a      	cmp	r2, r3
 81174ca:	bfa8      	it	ge
 81174cc:	461a      	movge	r2, r3
 81174ce:	2a00      	cmp	r2, #0
 81174d0:	4691      	mov	r9, r2
 81174d2:	dc37      	bgt.n	8117544 <_printf_float+0x374>
 81174d4:	f04f 0b00 	mov.w	fp, #0
 81174d8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 81174dc:	f104 021a 	add.w	r2, r4, #26
 81174e0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 81174e2:	9305      	str	r3, [sp, #20]
 81174e4:	eba3 0309 	sub.w	r3, r3, r9
 81174e8:	455b      	cmp	r3, fp
 81174ea:	dc33      	bgt.n	8117554 <_printf_float+0x384>
 81174ec:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 81174f0:	429a      	cmp	r2, r3
 81174f2:	db3b      	blt.n	811756c <_printf_float+0x39c>
 81174f4:	6823      	ldr	r3, [r4, #0]
 81174f6:	07da      	lsls	r2, r3, #31
 81174f8:	d438      	bmi.n	811756c <_printf_float+0x39c>
 81174fa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 81174fc:	9b05      	ldr	r3, [sp, #20]
 81174fe:	9909      	ldr	r1, [sp, #36]	; 0x24
 8117500:	1ad3      	subs	r3, r2, r3
 8117502:	eba2 0901 	sub.w	r9, r2, r1
 8117506:	4599      	cmp	r9, r3
 8117508:	bfa8      	it	ge
 811750a:	4699      	movge	r9, r3
 811750c:	f1b9 0f00 	cmp.w	r9, #0
 8117510:	dc35      	bgt.n	811757e <_printf_float+0x3ae>
 8117512:	f04f 0800 	mov.w	r8, #0
 8117516:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 811751a:	f104 0a1a 	add.w	sl, r4, #26
 811751e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8117522:	1a9b      	subs	r3, r3, r2
 8117524:	eba3 0309 	sub.w	r3, r3, r9
 8117528:	4543      	cmp	r3, r8
 811752a:	f77f af79 	ble.w	8117420 <_printf_float+0x250>
 811752e:	2301      	movs	r3, #1
 8117530:	4652      	mov	r2, sl
 8117532:	4631      	mov	r1, r6
 8117534:	4628      	mov	r0, r5
 8117536:	47b8      	blx	r7
 8117538:	3001      	adds	r0, #1
 811753a:	f43f aeaa 	beq.w	8117292 <_printf_float+0xc2>
 811753e:	f108 0801 	add.w	r8, r8, #1
 8117542:	e7ec      	b.n	811751e <_printf_float+0x34e>
 8117544:	4613      	mov	r3, r2
 8117546:	4631      	mov	r1, r6
 8117548:	4642      	mov	r2, r8
 811754a:	4628      	mov	r0, r5
 811754c:	47b8      	blx	r7
 811754e:	3001      	adds	r0, #1
 8117550:	d1c0      	bne.n	81174d4 <_printf_float+0x304>
 8117552:	e69e      	b.n	8117292 <_printf_float+0xc2>
 8117554:	2301      	movs	r3, #1
 8117556:	4631      	mov	r1, r6
 8117558:	4628      	mov	r0, r5
 811755a:	9205      	str	r2, [sp, #20]
 811755c:	47b8      	blx	r7
 811755e:	3001      	adds	r0, #1
 8117560:	f43f ae97 	beq.w	8117292 <_printf_float+0xc2>
 8117564:	9a05      	ldr	r2, [sp, #20]
 8117566:	f10b 0b01 	add.w	fp, fp, #1
 811756a:	e7b9      	b.n	81174e0 <_printf_float+0x310>
 811756c:	ee18 3a10 	vmov	r3, s16
 8117570:	4652      	mov	r2, sl
 8117572:	4631      	mov	r1, r6
 8117574:	4628      	mov	r0, r5
 8117576:	47b8      	blx	r7
 8117578:	3001      	adds	r0, #1
 811757a:	d1be      	bne.n	81174fa <_printf_float+0x32a>
 811757c:	e689      	b.n	8117292 <_printf_float+0xc2>
 811757e:	9a05      	ldr	r2, [sp, #20]
 8117580:	464b      	mov	r3, r9
 8117582:	4442      	add	r2, r8
 8117584:	4631      	mov	r1, r6
 8117586:	4628      	mov	r0, r5
 8117588:	47b8      	blx	r7
 811758a:	3001      	adds	r0, #1
 811758c:	d1c1      	bne.n	8117512 <_printf_float+0x342>
 811758e:	e680      	b.n	8117292 <_printf_float+0xc2>
 8117590:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8117592:	2a01      	cmp	r2, #1
 8117594:	dc01      	bgt.n	811759a <_printf_float+0x3ca>
 8117596:	07db      	lsls	r3, r3, #31
 8117598:	d538      	bpl.n	811760c <_printf_float+0x43c>
 811759a:	2301      	movs	r3, #1
 811759c:	4642      	mov	r2, r8
 811759e:	4631      	mov	r1, r6
 81175a0:	4628      	mov	r0, r5
 81175a2:	47b8      	blx	r7
 81175a4:	3001      	adds	r0, #1
 81175a6:	f43f ae74 	beq.w	8117292 <_printf_float+0xc2>
 81175aa:	ee18 3a10 	vmov	r3, s16
 81175ae:	4652      	mov	r2, sl
 81175b0:	4631      	mov	r1, r6
 81175b2:	4628      	mov	r0, r5
 81175b4:	47b8      	blx	r7
 81175b6:	3001      	adds	r0, #1
 81175b8:	f43f ae6b 	beq.w	8117292 <_printf_float+0xc2>
 81175bc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 81175c0:	2200      	movs	r2, #0
 81175c2:	2300      	movs	r3, #0
 81175c4:	f7e9 fb08 	bl	8100bd8 <__aeabi_dcmpeq>
 81175c8:	b9d8      	cbnz	r0, 8117602 <_printf_float+0x432>
 81175ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 81175cc:	f108 0201 	add.w	r2, r8, #1
 81175d0:	3b01      	subs	r3, #1
 81175d2:	4631      	mov	r1, r6
 81175d4:	4628      	mov	r0, r5
 81175d6:	47b8      	blx	r7
 81175d8:	3001      	adds	r0, #1
 81175da:	d10e      	bne.n	81175fa <_printf_float+0x42a>
 81175dc:	e659      	b.n	8117292 <_printf_float+0xc2>
 81175de:	2301      	movs	r3, #1
 81175e0:	4652      	mov	r2, sl
 81175e2:	4631      	mov	r1, r6
 81175e4:	4628      	mov	r0, r5
 81175e6:	47b8      	blx	r7
 81175e8:	3001      	adds	r0, #1
 81175ea:	f43f ae52 	beq.w	8117292 <_printf_float+0xc2>
 81175ee:	f108 0801 	add.w	r8, r8, #1
 81175f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 81175f4:	3b01      	subs	r3, #1
 81175f6:	4543      	cmp	r3, r8
 81175f8:	dcf1      	bgt.n	81175de <_printf_float+0x40e>
 81175fa:	464b      	mov	r3, r9
 81175fc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8117600:	e6dc      	b.n	81173bc <_printf_float+0x1ec>
 8117602:	f04f 0800 	mov.w	r8, #0
 8117606:	f104 0a1a 	add.w	sl, r4, #26
 811760a:	e7f2      	b.n	81175f2 <_printf_float+0x422>
 811760c:	2301      	movs	r3, #1
 811760e:	4642      	mov	r2, r8
 8117610:	e7df      	b.n	81175d2 <_printf_float+0x402>
 8117612:	2301      	movs	r3, #1
 8117614:	464a      	mov	r2, r9
 8117616:	4631      	mov	r1, r6
 8117618:	4628      	mov	r0, r5
 811761a:	47b8      	blx	r7
 811761c:	3001      	adds	r0, #1
 811761e:	f43f ae38 	beq.w	8117292 <_printf_float+0xc2>
 8117622:	f108 0801 	add.w	r8, r8, #1
 8117626:	68e3      	ldr	r3, [r4, #12]
 8117628:	990b      	ldr	r1, [sp, #44]	; 0x2c
 811762a:	1a5b      	subs	r3, r3, r1
 811762c:	4543      	cmp	r3, r8
 811762e:	dcf0      	bgt.n	8117612 <_printf_float+0x442>
 8117630:	e6fa      	b.n	8117428 <_printf_float+0x258>
 8117632:	f04f 0800 	mov.w	r8, #0
 8117636:	f104 0919 	add.w	r9, r4, #25
 811763a:	e7f4      	b.n	8117626 <_printf_float+0x456>

0811763c <_printf_common>:
 811763c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8117640:	4616      	mov	r6, r2
 8117642:	4699      	mov	r9, r3
 8117644:	688a      	ldr	r2, [r1, #8]
 8117646:	690b      	ldr	r3, [r1, #16]
 8117648:	f8dd 8020 	ldr.w	r8, [sp, #32]
 811764c:	4293      	cmp	r3, r2
 811764e:	bfb8      	it	lt
 8117650:	4613      	movlt	r3, r2
 8117652:	6033      	str	r3, [r6, #0]
 8117654:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8117658:	4607      	mov	r7, r0
 811765a:	460c      	mov	r4, r1
 811765c:	b10a      	cbz	r2, 8117662 <_printf_common+0x26>
 811765e:	3301      	adds	r3, #1
 8117660:	6033      	str	r3, [r6, #0]
 8117662:	6823      	ldr	r3, [r4, #0]
 8117664:	0699      	lsls	r1, r3, #26
 8117666:	bf42      	ittt	mi
 8117668:	6833      	ldrmi	r3, [r6, #0]
 811766a:	3302      	addmi	r3, #2
 811766c:	6033      	strmi	r3, [r6, #0]
 811766e:	6825      	ldr	r5, [r4, #0]
 8117670:	f015 0506 	ands.w	r5, r5, #6
 8117674:	d106      	bne.n	8117684 <_printf_common+0x48>
 8117676:	f104 0a19 	add.w	sl, r4, #25
 811767a:	68e3      	ldr	r3, [r4, #12]
 811767c:	6832      	ldr	r2, [r6, #0]
 811767e:	1a9b      	subs	r3, r3, r2
 8117680:	42ab      	cmp	r3, r5
 8117682:	dc26      	bgt.n	81176d2 <_printf_common+0x96>
 8117684:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8117688:	1e13      	subs	r3, r2, #0
 811768a:	6822      	ldr	r2, [r4, #0]
 811768c:	bf18      	it	ne
 811768e:	2301      	movne	r3, #1
 8117690:	0692      	lsls	r2, r2, #26
 8117692:	d42b      	bmi.n	81176ec <_printf_common+0xb0>
 8117694:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8117698:	4649      	mov	r1, r9
 811769a:	4638      	mov	r0, r7
 811769c:	47c0      	blx	r8
 811769e:	3001      	adds	r0, #1
 81176a0:	d01e      	beq.n	81176e0 <_printf_common+0xa4>
 81176a2:	6823      	ldr	r3, [r4, #0]
 81176a4:	68e5      	ldr	r5, [r4, #12]
 81176a6:	6832      	ldr	r2, [r6, #0]
 81176a8:	f003 0306 	and.w	r3, r3, #6
 81176ac:	2b04      	cmp	r3, #4
 81176ae:	bf08      	it	eq
 81176b0:	1aad      	subeq	r5, r5, r2
 81176b2:	68a3      	ldr	r3, [r4, #8]
 81176b4:	6922      	ldr	r2, [r4, #16]
 81176b6:	bf0c      	ite	eq
 81176b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 81176bc:	2500      	movne	r5, #0
 81176be:	4293      	cmp	r3, r2
 81176c0:	bfc4      	itt	gt
 81176c2:	1a9b      	subgt	r3, r3, r2
 81176c4:	18ed      	addgt	r5, r5, r3
 81176c6:	2600      	movs	r6, #0
 81176c8:	341a      	adds	r4, #26
 81176ca:	42b5      	cmp	r5, r6
 81176cc:	d11a      	bne.n	8117704 <_printf_common+0xc8>
 81176ce:	2000      	movs	r0, #0
 81176d0:	e008      	b.n	81176e4 <_printf_common+0xa8>
 81176d2:	2301      	movs	r3, #1
 81176d4:	4652      	mov	r2, sl
 81176d6:	4649      	mov	r1, r9
 81176d8:	4638      	mov	r0, r7
 81176da:	47c0      	blx	r8
 81176dc:	3001      	adds	r0, #1
 81176de:	d103      	bne.n	81176e8 <_printf_common+0xac>
 81176e0:	f04f 30ff 	mov.w	r0, #4294967295
 81176e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 81176e8:	3501      	adds	r5, #1
 81176ea:	e7c6      	b.n	811767a <_printf_common+0x3e>
 81176ec:	18e1      	adds	r1, r4, r3
 81176ee:	1c5a      	adds	r2, r3, #1
 81176f0:	2030      	movs	r0, #48	; 0x30
 81176f2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 81176f6:	4422      	add	r2, r4
 81176f8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 81176fc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8117700:	3302      	adds	r3, #2
 8117702:	e7c7      	b.n	8117694 <_printf_common+0x58>
 8117704:	2301      	movs	r3, #1
 8117706:	4622      	mov	r2, r4
 8117708:	4649      	mov	r1, r9
 811770a:	4638      	mov	r0, r7
 811770c:	47c0      	blx	r8
 811770e:	3001      	adds	r0, #1
 8117710:	d0e6      	beq.n	81176e0 <_printf_common+0xa4>
 8117712:	3601      	adds	r6, #1
 8117714:	e7d9      	b.n	81176ca <_printf_common+0x8e>
	...

08117718 <_printf_i>:
 8117718:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 811771c:	460c      	mov	r4, r1
 811771e:	4691      	mov	r9, r2
 8117720:	7e27      	ldrb	r7, [r4, #24]
 8117722:	990c      	ldr	r1, [sp, #48]	; 0x30
 8117724:	2f78      	cmp	r7, #120	; 0x78
 8117726:	4680      	mov	r8, r0
 8117728:	469a      	mov	sl, r3
 811772a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 811772e:	d807      	bhi.n	8117740 <_printf_i+0x28>
 8117730:	2f62      	cmp	r7, #98	; 0x62
 8117732:	d80a      	bhi.n	811774a <_printf_i+0x32>
 8117734:	2f00      	cmp	r7, #0
 8117736:	f000 80d8 	beq.w	81178ea <_printf_i+0x1d2>
 811773a:	2f58      	cmp	r7, #88	; 0x58
 811773c:	f000 80a3 	beq.w	8117886 <_printf_i+0x16e>
 8117740:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8117744:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8117748:	e03a      	b.n	81177c0 <_printf_i+0xa8>
 811774a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 811774e:	2b15      	cmp	r3, #21
 8117750:	d8f6      	bhi.n	8117740 <_printf_i+0x28>
 8117752:	a001      	add	r0, pc, #4	; (adr r0, 8117758 <_printf_i+0x40>)
 8117754:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8117758:	081177b1 	.word	0x081177b1
 811775c:	081177c5 	.word	0x081177c5
 8117760:	08117741 	.word	0x08117741
 8117764:	08117741 	.word	0x08117741
 8117768:	08117741 	.word	0x08117741
 811776c:	08117741 	.word	0x08117741
 8117770:	081177c5 	.word	0x081177c5
 8117774:	08117741 	.word	0x08117741
 8117778:	08117741 	.word	0x08117741
 811777c:	08117741 	.word	0x08117741
 8117780:	08117741 	.word	0x08117741
 8117784:	081178d1 	.word	0x081178d1
 8117788:	081177f5 	.word	0x081177f5
 811778c:	081178b3 	.word	0x081178b3
 8117790:	08117741 	.word	0x08117741
 8117794:	08117741 	.word	0x08117741
 8117798:	081178f3 	.word	0x081178f3
 811779c:	08117741 	.word	0x08117741
 81177a0:	081177f5 	.word	0x081177f5
 81177a4:	08117741 	.word	0x08117741
 81177a8:	08117741 	.word	0x08117741
 81177ac:	081178bb 	.word	0x081178bb
 81177b0:	680b      	ldr	r3, [r1, #0]
 81177b2:	1d1a      	adds	r2, r3, #4
 81177b4:	681b      	ldr	r3, [r3, #0]
 81177b6:	600a      	str	r2, [r1, #0]
 81177b8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 81177bc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 81177c0:	2301      	movs	r3, #1
 81177c2:	e0a3      	b.n	811790c <_printf_i+0x1f4>
 81177c4:	6825      	ldr	r5, [r4, #0]
 81177c6:	6808      	ldr	r0, [r1, #0]
 81177c8:	062e      	lsls	r6, r5, #24
 81177ca:	f100 0304 	add.w	r3, r0, #4
 81177ce:	d50a      	bpl.n	81177e6 <_printf_i+0xce>
 81177d0:	6805      	ldr	r5, [r0, #0]
 81177d2:	600b      	str	r3, [r1, #0]
 81177d4:	2d00      	cmp	r5, #0
 81177d6:	da03      	bge.n	81177e0 <_printf_i+0xc8>
 81177d8:	232d      	movs	r3, #45	; 0x2d
 81177da:	426d      	negs	r5, r5
 81177dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 81177e0:	485e      	ldr	r0, [pc, #376]	; (811795c <_printf_i+0x244>)
 81177e2:	230a      	movs	r3, #10
 81177e4:	e019      	b.n	811781a <_printf_i+0x102>
 81177e6:	f015 0f40 	tst.w	r5, #64	; 0x40
 81177ea:	6805      	ldr	r5, [r0, #0]
 81177ec:	600b      	str	r3, [r1, #0]
 81177ee:	bf18      	it	ne
 81177f0:	b22d      	sxthne	r5, r5
 81177f2:	e7ef      	b.n	81177d4 <_printf_i+0xbc>
 81177f4:	680b      	ldr	r3, [r1, #0]
 81177f6:	6825      	ldr	r5, [r4, #0]
 81177f8:	1d18      	adds	r0, r3, #4
 81177fa:	6008      	str	r0, [r1, #0]
 81177fc:	0628      	lsls	r0, r5, #24
 81177fe:	d501      	bpl.n	8117804 <_printf_i+0xec>
 8117800:	681d      	ldr	r5, [r3, #0]
 8117802:	e002      	b.n	811780a <_printf_i+0xf2>
 8117804:	0669      	lsls	r1, r5, #25
 8117806:	d5fb      	bpl.n	8117800 <_printf_i+0xe8>
 8117808:	881d      	ldrh	r5, [r3, #0]
 811780a:	4854      	ldr	r0, [pc, #336]	; (811795c <_printf_i+0x244>)
 811780c:	2f6f      	cmp	r7, #111	; 0x6f
 811780e:	bf0c      	ite	eq
 8117810:	2308      	moveq	r3, #8
 8117812:	230a      	movne	r3, #10
 8117814:	2100      	movs	r1, #0
 8117816:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 811781a:	6866      	ldr	r6, [r4, #4]
 811781c:	60a6      	str	r6, [r4, #8]
 811781e:	2e00      	cmp	r6, #0
 8117820:	bfa2      	ittt	ge
 8117822:	6821      	ldrge	r1, [r4, #0]
 8117824:	f021 0104 	bicge.w	r1, r1, #4
 8117828:	6021      	strge	r1, [r4, #0]
 811782a:	b90d      	cbnz	r5, 8117830 <_printf_i+0x118>
 811782c:	2e00      	cmp	r6, #0
 811782e:	d04d      	beq.n	81178cc <_printf_i+0x1b4>
 8117830:	4616      	mov	r6, r2
 8117832:	fbb5 f1f3 	udiv	r1, r5, r3
 8117836:	fb03 5711 	mls	r7, r3, r1, r5
 811783a:	5dc7      	ldrb	r7, [r0, r7]
 811783c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8117840:	462f      	mov	r7, r5
 8117842:	42bb      	cmp	r3, r7
 8117844:	460d      	mov	r5, r1
 8117846:	d9f4      	bls.n	8117832 <_printf_i+0x11a>
 8117848:	2b08      	cmp	r3, #8
 811784a:	d10b      	bne.n	8117864 <_printf_i+0x14c>
 811784c:	6823      	ldr	r3, [r4, #0]
 811784e:	07df      	lsls	r7, r3, #31
 8117850:	d508      	bpl.n	8117864 <_printf_i+0x14c>
 8117852:	6923      	ldr	r3, [r4, #16]
 8117854:	6861      	ldr	r1, [r4, #4]
 8117856:	4299      	cmp	r1, r3
 8117858:	bfde      	ittt	le
 811785a:	2330      	movle	r3, #48	; 0x30
 811785c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8117860:	f106 36ff 	addle.w	r6, r6, #4294967295
 8117864:	1b92      	subs	r2, r2, r6
 8117866:	6122      	str	r2, [r4, #16]
 8117868:	f8cd a000 	str.w	sl, [sp]
 811786c:	464b      	mov	r3, r9
 811786e:	aa03      	add	r2, sp, #12
 8117870:	4621      	mov	r1, r4
 8117872:	4640      	mov	r0, r8
 8117874:	f7ff fee2 	bl	811763c <_printf_common>
 8117878:	3001      	adds	r0, #1
 811787a:	d14c      	bne.n	8117916 <_printf_i+0x1fe>
 811787c:	f04f 30ff 	mov.w	r0, #4294967295
 8117880:	b004      	add	sp, #16
 8117882:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8117886:	4835      	ldr	r0, [pc, #212]	; (811795c <_printf_i+0x244>)
 8117888:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 811788c:	6823      	ldr	r3, [r4, #0]
 811788e:	680e      	ldr	r6, [r1, #0]
 8117890:	061f      	lsls	r7, r3, #24
 8117892:	f856 5b04 	ldr.w	r5, [r6], #4
 8117896:	600e      	str	r6, [r1, #0]
 8117898:	d514      	bpl.n	81178c4 <_printf_i+0x1ac>
 811789a:	07d9      	lsls	r1, r3, #31
 811789c:	bf44      	itt	mi
 811789e:	f043 0320 	orrmi.w	r3, r3, #32
 81178a2:	6023      	strmi	r3, [r4, #0]
 81178a4:	b91d      	cbnz	r5, 81178ae <_printf_i+0x196>
 81178a6:	6823      	ldr	r3, [r4, #0]
 81178a8:	f023 0320 	bic.w	r3, r3, #32
 81178ac:	6023      	str	r3, [r4, #0]
 81178ae:	2310      	movs	r3, #16
 81178b0:	e7b0      	b.n	8117814 <_printf_i+0xfc>
 81178b2:	6823      	ldr	r3, [r4, #0]
 81178b4:	f043 0320 	orr.w	r3, r3, #32
 81178b8:	6023      	str	r3, [r4, #0]
 81178ba:	2378      	movs	r3, #120	; 0x78
 81178bc:	4828      	ldr	r0, [pc, #160]	; (8117960 <_printf_i+0x248>)
 81178be:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 81178c2:	e7e3      	b.n	811788c <_printf_i+0x174>
 81178c4:	065e      	lsls	r6, r3, #25
 81178c6:	bf48      	it	mi
 81178c8:	b2ad      	uxthmi	r5, r5
 81178ca:	e7e6      	b.n	811789a <_printf_i+0x182>
 81178cc:	4616      	mov	r6, r2
 81178ce:	e7bb      	b.n	8117848 <_printf_i+0x130>
 81178d0:	680b      	ldr	r3, [r1, #0]
 81178d2:	6826      	ldr	r6, [r4, #0]
 81178d4:	6960      	ldr	r0, [r4, #20]
 81178d6:	1d1d      	adds	r5, r3, #4
 81178d8:	600d      	str	r5, [r1, #0]
 81178da:	0635      	lsls	r5, r6, #24
 81178dc:	681b      	ldr	r3, [r3, #0]
 81178de:	d501      	bpl.n	81178e4 <_printf_i+0x1cc>
 81178e0:	6018      	str	r0, [r3, #0]
 81178e2:	e002      	b.n	81178ea <_printf_i+0x1d2>
 81178e4:	0671      	lsls	r1, r6, #25
 81178e6:	d5fb      	bpl.n	81178e0 <_printf_i+0x1c8>
 81178e8:	8018      	strh	r0, [r3, #0]
 81178ea:	2300      	movs	r3, #0
 81178ec:	6123      	str	r3, [r4, #16]
 81178ee:	4616      	mov	r6, r2
 81178f0:	e7ba      	b.n	8117868 <_printf_i+0x150>
 81178f2:	680b      	ldr	r3, [r1, #0]
 81178f4:	1d1a      	adds	r2, r3, #4
 81178f6:	600a      	str	r2, [r1, #0]
 81178f8:	681e      	ldr	r6, [r3, #0]
 81178fa:	6862      	ldr	r2, [r4, #4]
 81178fc:	2100      	movs	r1, #0
 81178fe:	4630      	mov	r0, r6
 8117900:	f7e8 fcf6 	bl	81002f0 <memchr>
 8117904:	b108      	cbz	r0, 811790a <_printf_i+0x1f2>
 8117906:	1b80      	subs	r0, r0, r6
 8117908:	6060      	str	r0, [r4, #4]
 811790a:	6863      	ldr	r3, [r4, #4]
 811790c:	6123      	str	r3, [r4, #16]
 811790e:	2300      	movs	r3, #0
 8117910:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8117914:	e7a8      	b.n	8117868 <_printf_i+0x150>
 8117916:	6923      	ldr	r3, [r4, #16]
 8117918:	4632      	mov	r2, r6
 811791a:	4649      	mov	r1, r9
 811791c:	4640      	mov	r0, r8
 811791e:	47d0      	blx	sl
 8117920:	3001      	adds	r0, #1
 8117922:	d0ab      	beq.n	811787c <_printf_i+0x164>
 8117924:	6823      	ldr	r3, [r4, #0]
 8117926:	079b      	lsls	r3, r3, #30
 8117928:	d413      	bmi.n	8117952 <_printf_i+0x23a>
 811792a:	68e0      	ldr	r0, [r4, #12]
 811792c:	9b03      	ldr	r3, [sp, #12]
 811792e:	4298      	cmp	r0, r3
 8117930:	bfb8      	it	lt
 8117932:	4618      	movlt	r0, r3
 8117934:	e7a4      	b.n	8117880 <_printf_i+0x168>
 8117936:	2301      	movs	r3, #1
 8117938:	4632      	mov	r2, r6
 811793a:	4649      	mov	r1, r9
 811793c:	4640      	mov	r0, r8
 811793e:	47d0      	blx	sl
 8117940:	3001      	adds	r0, #1
 8117942:	d09b      	beq.n	811787c <_printf_i+0x164>
 8117944:	3501      	adds	r5, #1
 8117946:	68e3      	ldr	r3, [r4, #12]
 8117948:	9903      	ldr	r1, [sp, #12]
 811794a:	1a5b      	subs	r3, r3, r1
 811794c:	42ab      	cmp	r3, r5
 811794e:	dcf2      	bgt.n	8117936 <_printf_i+0x21e>
 8117950:	e7eb      	b.n	811792a <_printf_i+0x212>
 8117952:	2500      	movs	r5, #0
 8117954:	f104 0619 	add.w	r6, r4, #25
 8117958:	e7f5      	b.n	8117946 <_printf_i+0x22e>
 811795a:	bf00      	nop
 811795c:	08119b66 	.word	0x08119b66
 8117960:	08119b77 	.word	0x08119b77

08117964 <quorem>:
 8117964:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8117968:	6903      	ldr	r3, [r0, #16]
 811796a:	690c      	ldr	r4, [r1, #16]
 811796c:	42a3      	cmp	r3, r4
 811796e:	4607      	mov	r7, r0
 8117970:	f2c0 8081 	blt.w	8117a76 <quorem+0x112>
 8117974:	3c01      	subs	r4, #1
 8117976:	f101 0814 	add.w	r8, r1, #20
 811797a:	f100 0514 	add.w	r5, r0, #20
 811797e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8117982:	9301      	str	r3, [sp, #4]
 8117984:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8117988:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 811798c:	3301      	adds	r3, #1
 811798e:	429a      	cmp	r2, r3
 8117990:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8117994:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8117998:	fbb2 f6f3 	udiv	r6, r2, r3
 811799c:	d331      	bcc.n	8117a02 <quorem+0x9e>
 811799e:	f04f 0e00 	mov.w	lr, #0
 81179a2:	4640      	mov	r0, r8
 81179a4:	46ac      	mov	ip, r5
 81179a6:	46f2      	mov	sl, lr
 81179a8:	f850 2b04 	ldr.w	r2, [r0], #4
 81179ac:	b293      	uxth	r3, r2
 81179ae:	fb06 e303 	mla	r3, r6, r3, lr
 81179b2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 81179b6:	b29b      	uxth	r3, r3
 81179b8:	ebaa 0303 	sub.w	r3, sl, r3
 81179bc:	0c12      	lsrs	r2, r2, #16
 81179be:	f8dc a000 	ldr.w	sl, [ip]
 81179c2:	fb06 e202 	mla	r2, r6, r2, lr
 81179c6:	fa13 f38a 	uxtah	r3, r3, sl
 81179ca:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 81179ce:	fa1f fa82 	uxth.w	sl, r2
 81179d2:	f8dc 2000 	ldr.w	r2, [ip]
 81179d6:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 81179da:	eb02 4223 	add.w	r2, r2, r3, asr #16
 81179de:	b29b      	uxth	r3, r3
 81179e0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 81179e4:	4581      	cmp	r9, r0
 81179e6:	f84c 3b04 	str.w	r3, [ip], #4
 81179ea:	ea4f 4a22 	mov.w	sl, r2, asr #16
 81179ee:	d2db      	bcs.n	81179a8 <quorem+0x44>
 81179f0:	f855 300b 	ldr.w	r3, [r5, fp]
 81179f4:	b92b      	cbnz	r3, 8117a02 <quorem+0x9e>
 81179f6:	9b01      	ldr	r3, [sp, #4]
 81179f8:	3b04      	subs	r3, #4
 81179fa:	429d      	cmp	r5, r3
 81179fc:	461a      	mov	r2, r3
 81179fe:	d32e      	bcc.n	8117a5e <quorem+0xfa>
 8117a00:	613c      	str	r4, [r7, #16]
 8117a02:	4638      	mov	r0, r7
 8117a04:	f001 f8b2 	bl	8118b6c <__mcmp>
 8117a08:	2800      	cmp	r0, #0
 8117a0a:	db24      	blt.n	8117a56 <quorem+0xf2>
 8117a0c:	3601      	adds	r6, #1
 8117a0e:	4628      	mov	r0, r5
 8117a10:	f04f 0c00 	mov.w	ip, #0
 8117a14:	f858 2b04 	ldr.w	r2, [r8], #4
 8117a18:	f8d0 e000 	ldr.w	lr, [r0]
 8117a1c:	b293      	uxth	r3, r2
 8117a1e:	ebac 0303 	sub.w	r3, ip, r3
 8117a22:	0c12      	lsrs	r2, r2, #16
 8117a24:	fa13 f38e 	uxtah	r3, r3, lr
 8117a28:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8117a2c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8117a30:	b29b      	uxth	r3, r3
 8117a32:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8117a36:	45c1      	cmp	r9, r8
 8117a38:	f840 3b04 	str.w	r3, [r0], #4
 8117a3c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8117a40:	d2e8      	bcs.n	8117a14 <quorem+0xb0>
 8117a42:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8117a46:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8117a4a:	b922      	cbnz	r2, 8117a56 <quorem+0xf2>
 8117a4c:	3b04      	subs	r3, #4
 8117a4e:	429d      	cmp	r5, r3
 8117a50:	461a      	mov	r2, r3
 8117a52:	d30a      	bcc.n	8117a6a <quorem+0x106>
 8117a54:	613c      	str	r4, [r7, #16]
 8117a56:	4630      	mov	r0, r6
 8117a58:	b003      	add	sp, #12
 8117a5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8117a5e:	6812      	ldr	r2, [r2, #0]
 8117a60:	3b04      	subs	r3, #4
 8117a62:	2a00      	cmp	r2, #0
 8117a64:	d1cc      	bne.n	8117a00 <quorem+0x9c>
 8117a66:	3c01      	subs	r4, #1
 8117a68:	e7c7      	b.n	81179fa <quorem+0x96>
 8117a6a:	6812      	ldr	r2, [r2, #0]
 8117a6c:	3b04      	subs	r3, #4
 8117a6e:	2a00      	cmp	r2, #0
 8117a70:	d1f0      	bne.n	8117a54 <quorem+0xf0>
 8117a72:	3c01      	subs	r4, #1
 8117a74:	e7eb      	b.n	8117a4e <quorem+0xea>
 8117a76:	2000      	movs	r0, #0
 8117a78:	e7ee      	b.n	8117a58 <quorem+0xf4>
 8117a7a:	0000      	movs	r0, r0
 8117a7c:	0000      	movs	r0, r0
	...

08117a80 <_dtoa_r>:
 8117a80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8117a84:	ed2d 8b02 	vpush	{d8}
 8117a88:	ec57 6b10 	vmov	r6, r7, d0
 8117a8c:	b095      	sub	sp, #84	; 0x54
 8117a8e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8117a90:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8117a94:	9105      	str	r1, [sp, #20]
 8117a96:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8117a9a:	4604      	mov	r4, r0
 8117a9c:	9209      	str	r2, [sp, #36]	; 0x24
 8117a9e:	930f      	str	r3, [sp, #60]	; 0x3c
 8117aa0:	b975      	cbnz	r5, 8117ac0 <_dtoa_r+0x40>
 8117aa2:	2010      	movs	r0, #16
 8117aa4:	f000 fddc 	bl	8118660 <malloc>
 8117aa8:	4602      	mov	r2, r0
 8117aaa:	6260      	str	r0, [r4, #36]	; 0x24
 8117aac:	b920      	cbnz	r0, 8117ab8 <_dtoa_r+0x38>
 8117aae:	4bb2      	ldr	r3, [pc, #712]	; (8117d78 <_dtoa_r+0x2f8>)
 8117ab0:	21ea      	movs	r1, #234	; 0xea
 8117ab2:	48b2      	ldr	r0, [pc, #712]	; (8117d7c <_dtoa_r+0x2fc>)
 8117ab4:	f001 fa24 	bl	8118f00 <__assert_func>
 8117ab8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8117abc:	6005      	str	r5, [r0, #0]
 8117abe:	60c5      	str	r5, [r0, #12]
 8117ac0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8117ac2:	6819      	ldr	r1, [r3, #0]
 8117ac4:	b151      	cbz	r1, 8117adc <_dtoa_r+0x5c>
 8117ac6:	685a      	ldr	r2, [r3, #4]
 8117ac8:	604a      	str	r2, [r1, #4]
 8117aca:	2301      	movs	r3, #1
 8117acc:	4093      	lsls	r3, r2
 8117ace:	608b      	str	r3, [r1, #8]
 8117ad0:	4620      	mov	r0, r4
 8117ad2:	f000 fe0d 	bl	81186f0 <_Bfree>
 8117ad6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8117ad8:	2200      	movs	r2, #0
 8117ada:	601a      	str	r2, [r3, #0]
 8117adc:	1e3b      	subs	r3, r7, #0
 8117ade:	bfb9      	ittee	lt
 8117ae0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8117ae4:	9303      	strlt	r3, [sp, #12]
 8117ae6:	2300      	movge	r3, #0
 8117ae8:	f8c8 3000 	strge.w	r3, [r8]
 8117aec:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8117af0:	4ba3      	ldr	r3, [pc, #652]	; (8117d80 <_dtoa_r+0x300>)
 8117af2:	bfbc      	itt	lt
 8117af4:	2201      	movlt	r2, #1
 8117af6:	f8c8 2000 	strlt.w	r2, [r8]
 8117afa:	ea33 0309 	bics.w	r3, r3, r9
 8117afe:	d11b      	bne.n	8117b38 <_dtoa_r+0xb8>
 8117b00:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8117b02:	f242 730f 	movw	r3, #9999	; 0x270f
 8117b06:	6013      	str	r3, [r2, #0]
 8117b08:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8117b0c:	4333      	orrs	r3, r6
 8117b0e:	f000 857a 	beq.w	8118606 <_dtoa_r+0xb86>
 8117b12:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8117b14:	b963      	cbnz	r3, 8117b30 <_dtoa_r+0xb0>
 8117b16:	4b9b      	ldr	r3, [pc, #620]	; (8117d84 <_dtoa_r+0x304>)
 8117b18:	e024      	b.n	8117b64 <_dtoa_r+0xe4>
 8117b1a:	4b9b      	ldr	r3, [pc, #620]	; (8117d88 <_dtoa_r+0x308>)
 8117b1c:	9300      	str	r3, [sp, #0]
 8117b1e:	3308      	adds	r3, #8
 8117b20:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8117b22:	6013      	str	r3, [r2, #0]
 8117b24:	9800      	ldr	r0, [sp, #0]
 8117b26:	b015      	add	sp, #84	; 0x54
 8117b28:	ecbd 8b02 	vpop	{d8}
 8117b2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8117b30:	4b94      	ldr	r3, [pc, #592]	; (8117d84 <_dtoa_r+0x304>)
 8117b32:	9300      	str	r3, [sp, #0]
 8117b34:	3303      	adds	r3, #3
 8117b36:	e7f3      	b.n	8117b20 <_dtoa_r+0xa0>
 8117b38:	ed9d 7b02 	vldr	d7, [sp, #8]
 8117b3c:	2200      	movs	r2, #0
 8117b3e:	ec51 0b17 	vmov	r0, r1, d7
 8117b42:	2300      	movs	r3, #0
 8117b44:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8117b48:	f7e9 f846 	bl	8100bd8 <__aeabi_dcmpeq>
 8117b4c:	4680      	mov	r8, r0
 8117b4e:	b158      	cbz	r0, 8117b68 <_dtoa_r+0xe8>
 8117b50:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8117b52:	2301      	movs	r3, #1
 8117b54:	6013      	str	r3, [r2, #0]
 8117b56:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8117b58:	2b00      	cmp	r3, #0
 8117b5a:	f000 8551 	beq.w	8118600 <_dtoa_r+0xb80>
 8117b5e:	488b      	ldr	r0, [pc, #556]	; (8117d8c <_dtoa_r+0x30c>)
 8117b60:	6018      	str	r0, [r3, #0]
 8117b62:	1e43      	subs	r3, r0, #1
 8117b64:	9300      	str	r3, [sp, #0]
 8117b66:	e7dd      	b.n	8117b24 <_dtoa_r+0xa4>
 8117b68:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8117b6c:	aa12      	add	r2, sp, #72	; 0x48
 8117b6e:	a913      	add	r1, sp, #76	; 0x4c
 8117b70:	4620      	mov	r0, r4
 8117b72:	f001 f89f 	bl	8118cb4 <__d2b>
 8117b76:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8117b7a:	4683      	mov	fp, r0
 8117b7c:	2d00      	cmp	r5, #0
 8117b7e:	d07c      	beq.n	8117c7a <_dtoa_r+0x1fa>
 8117b80:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8117b82:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8117b86:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8117b8a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8117b8e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8117b92:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8117b96:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8117b9a:	4b7d      	ldr	r3, [pc, #500]	; (8117d90 <_dtoa_r+0x310>)
 8117b9c:	2200      	movs	r2, #0
 8117b9e:	4630      	mov	r0, r6
 8117ba0:	4639      	mov	r1, r7
 8117ba2:	f7e8 fbf9 	bl	8100398 <__aeabi_dsub>
 8117ba6:	a36e      	add	r3, pc, #440	; (adr r3, 8117d60 <_dtoa_r+0x2e0>)
 8117ba8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8117bac:	f7e8 fdac 	bl	8100708 <__aeabi_dmul>
 8117bb0:	a36d      	add	r3, pc, #436	; (adr r3, 8117d68 <_dtoa_r+0x2e8>)
 8117bb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8117bb6:	f7e8 fbf1 	bl	810039c <__adddf3>
 8117bba:	4606      	mov	r6, r0
 8117bbc:	4628      	mov	r0, r5
 8117bbe:	460f      	mov	r7, r1
 8117bc0:	f7e8 fd38 	bl	8100634 <__aeabi_i2d>
 8117bc4:	a36a      	add	r3, pc, #424	; (adr r3, 8117d70 <_dtoa_r+0x2f0>)
 8117bc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8117bca:	f7e8 fd9d 	bl	8100708 <__aeabi_dmul>
 8117bce:	4602      	mov	r2, r0
 8117bd0:	460b      	mov	r3, r1
 8117bd2:	4630      	mov	r0, r6
 8117bd4:	4639      	mov	r1, r7
 8117bd6:	f7e8 fbe1 	bl	810039c <__adddf3>
 8117bda:	4606      	mov	r6, r0
 8117bdc:	460f      	mov	r7, r1
 8117bde:	f7e9 f843 	bl	8100c68 <__aeabi_d2iz>
 8117be2:	2200      	movs	r2, #0
 8117be4:	4682      	mov	sl, r0
 8117be6:	2300      	movs	r3, #0
 8117be8:	4630      	mov	r0, r6
 8117bea:	4639      	mov	r1, r7
 8117bec:	f7e8 fffe 	bl	8100bec <__aeabi_dcmplt>
 8117bf0:	b148      	cbz	r0, 8117c06 <_dtoa_r+0x186>
 8117bf2:	4650      	mov	r0, sl
 8117bf4:	f7e8 fd1e 	bl	8100634 <__aeabi_i2d>
 8117bf8:	4632      	mov	r2, r6
 8117bfa:	463b      	mov	r3, r7
 8117bfc:	f7e8 ffec 	bl	8100bd8 <__aeabi_dcmpeq>
 8117c00:	b908      	cbnz	r0, 8117c06 <_dtoa_r+0x186>
 8117c02:	f10a 3aff 	add.w	sl, sl, #4294967295
 8117c06:	f1ba 0f16 	cmp.w	sl, #22
 8117c0a:	d854      	bhi.n	8117cb6 <_dtoa_r+0x236>
 8117c0c:	4b61      	ldr	r3, [pc, #388]	; (8117d94 <_dtoa_r+0x314>)
 8117c0e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8117c12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8117c16:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8117c1a:	f7e8 ffe7 	bl	8100bec <__aeabi_dcmplt>
 8117c1e:	2800      	cmp	r0, #0
 8117c20:	d04b      	beq.n	8117cba <_dtoa_r+0x23a>
 8117c22:	f10a 3aff 	add.w	sl, sl, #4294967295
 8117c26:	2300      	movs	r3, #0
 8117c28:	930e      	str	r3, [sp, #56]	; 0x38
 8117c2a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8117c2c:	1b5d      	subs	r5, r3, r5
 8117c2e:	1e6b      	subs	r3, r5, #1
 8117c30:	9304      	str	r3, [sp, #16]
 8117c32:	bf43      	ittte	mi
 8117c34:	2300      	movmi	r3, #0
 8117c36:	f1c5 0801 	rsbmi	r8, r5, #1
 8117c3a:	9304      	strmi	r3, [sp, #16]
 8117c3c:	f04f 0800 	movpl.w	r8, #0
 8117c40:	f1ba 0f00 	cmp.w	sl, #0
 8117c44:	db3b      	blt.n	8117cbe <_dtoa_r+0x23e>
 8117c46:	9b04      	ldr	r3, [sp, #16]
 8117c48:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8117c4c:	4453      	add	r3, sl
 8117c4e:	9304      	str	r3, [sp, #16]
 8117c50:	2300      	movs	r3, #0
 8117c52:	9306      	str	r3, [sp, #24]
 8117c54:	9b05      	ldr	r3, [sp, #20]
 8117c56:	2b09      	cmp	r3, #9
 8117c58:	d869      	bhi.n	8117d2e <_dtoa_r+0x2ae>
 8117c5a:	2b05      	cmp	r3, #5
 8117c5c:	bfc4      	itt	gt
 8117c5e:	3b04      	subgt	r3, #4
 8117c60:	9305      	strgt	r3, [sp, #20]
 8117c62:	9b05      	ldr	r3, [sp, #20]
 8117c64:	f1a3 0302 	sub.w	r3, r3, #2
 8117c68:	bfcc      	ite	gt
 8117c6a:	2500      	movgt	r5, #0
 8117c6c:	2501      	movle	r5, #1
 8117c6e:	2b03      	cmp	r3, #3
 8117c70:	d869      	bhi.n	8117d46 <_dtoa_r+0x2c6>
 8117c72:	e8df f003 	tbb	[pc, r3]
 8117c76:	4e2c      	.short	0x4e2c
 8117c78:	5a4c      	.short	0x5a4c
 8117c7a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8117c7e:	441d      	add	r5, r3
 8117c80:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8117c84:	2b20      	cmp	r3, #32
 8117c86:	bfc1      	itttt	gt
 8117c88:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8117c8c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8117c90:	fa09 f303 	lslgt.w	r3, r9, r3
 8117c94:	fa26 f000 	lsrgt.w	r0, r6, r0
 8117c98:	bfda      	itte	le
 8117c9a:	f1c3 0320 	rsble	r3, r3, #32
 8117c9e:	fa06 f003 	lslle.w	r0, r6, r3
 8117ca2:	4318      	orrgt	r0, r3
 8117ca4:	f7e8 fcb6 	bl	8100614 <__aeabi_ui2d>
 8117ca8:	2301      	movs	r3, #1
 8117caa:	4606      	mov	r6, r0
 8117cac:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8117cb0:	3d01      	subs	r5, #1
 8117cb2:	9310      	str	r3, [sp, #64]	; 0x40
 8117cb4:	e771      	b.n	8117b9a <_dtoa_r+0x11a>
 8117cb6:	2301      	movs	r3, #1
 8117cb8:	e7b6      	b.n	8117c28 <_dtoa_r+0x1a8>
 8117cba:	900e      	str	r0, [sp, #56]	; 0x38
 8117cbc:	e7b5      	b.n	8117c2a <_dtoa_r+0x1aa>
 8117cbe:	f1ca 0300 	rsb	r3, sl, #0
 8117cc2:	9306      	str	r3, [sp, #24]
 8117cc4:	2300      	movs	r3, #0
 8117cc6:	eba8 080a 	sub.w	r8, r8, sl
 8117cca:	930d      	str	r3, [sp, #52]	; 0x34
 8117ccc:	e7c2      	b.n	8117c54 <_dtoa_r+0x1d4>
 8117cce:	2300      	movs	r3, #0
 8117cd0:	9308      	str	r3, [sp, #32]
 8117cd2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8117cd4:	2b00      	cmp	r3, #0
 8117cd6:	dc39      	bgt.n	8117d4c <_dtoa_r+0x2cc>
 8117cd8:	f04f 0901 	mov.w	r9, #1
 8117cdc:	f8cd 9004 	str.w	r9, [sp, #4]
 8117ce0:	464b      	mov	r3, r9
 8117ce2:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8117ce6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8117ce8:	2200      	movs	r2, #0
 8117cea:	6042      	str	r2, [r0, #4]
 8117cec:	2204      	movs	r2, #4
 8117cee:	f102 0614 	add.w	r6, r2, #20
 8117cf2:	429e      	cmp	r6, r3
 8117cf4:	6841      	ldr	r1, [r0, #4]
 8117cf6:	d92f      	bls.n	8117d58 <_dtoa_r+0x2d8>
 8117cf8:	4620      	mov	r0, r4
 8117cfa:	f000 fcb9 	bl	8118670 <_Balloc>
 8117cfe:	9000      	str	r0, [sp, #0]
 8117d00:	2800      	cmp	r0, #0
 8117d02:	d14b      	bne.n	8117d9c <_dtoa_r+0x31c>
 8117d04:	4b24      	ldr	r3, [pc, #144]	; (8117d98 <_dtoa_r+0x318>)
 8117d06:	4602      	mov	r2, r0
 8117d08:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8117d0c:	e6d1      	b.n	8117ab2 <_dtoa_r+0x32>
 8117d0e:	2301      	movs	r3, #1
 8117d10:	e7de      	b.n	8117cd0 <_dtoa_r+0x250>
 8117d12:	2300      	movs	r3, #0
 8117d14:	9308      	str	r3, [sp, #32]
 8117d16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8117d18:	eb0a 0903 	add.w	r9, sl, r3
 8117d1c:	f109 0301 	add.w	r3, r9, #1
 8117d20:	2b01      	cmp	r3, #1
 8117d22:	9301      	str	r3, [sp, #4]
 8117d24:	bfb8      	it	lt
 8117d26:	2301      	movlt	r3, #1
 8117d28:	e7dd      	b.n	8117ce6 <_dtoa_r+0x266>
 8117d2a:	2301      	movs	r3, #1
 8117d2c:	e7f2      	b.n	8117d14 <_dtoa_r+0x294>
 8117d2e:	2501      	movs	r5, #1
 8117d30:	2300      	movs	r3, #0
 8117d32:	9305      	str	r3, [sp, #20]
 8117d34:	9508      	str	r5, [sp, #32]
 8117d36:	f04f 39ff 	mov.w	r9, #4294967295
 8117d3a:	2200      	movs	r2, #0
 8117d3c:	f8cd 9004 	str.w	r9, [sp, #4]
 8117d40:	2312      	movs	r3, #18
 8117d42:	9209      	str	r2, [sp, #36]	; 0x24
 8117d44:	e7cf      	b.n	8117ce6 <_dtoa_r+0x266>
 8117d46:	2301      	movs	r3, #1
 8117d48:	9308      	str	r3, [sp, #32]
 8117d4a:	e7f4      	b.n	8117d36 <_dtoa_r+0x2b6>
 8117d4c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8117d50:	f8cd 9004 	str.w	r9, [sp, #4]
 8117d54:	464b      	mov	r3, r9
 8117d56:	e7c6      	b.n	8117ce6 <_dtoa_r+0x266>
 8117d58:	3101      	adds	r1, #1
 8117d5a:	6041      	str	r1, [r0, #4]
 8117d5c:	0052      	lsls	r2, r2, #1
 8117d5e:	e7c6      	b.n	8117cee <_dtoa_r+0x26e>
 8117d60:	636f4361 	.word	0x636f4361
 8117d64:	3fd287a7 	.word	0x3fd287a7
 8117d68:	8b60c8b3 	.word	0x8b60c8b3
 8117d6c:	3fc68a28 	.word	0x3fc68a28
 8117d70:	509f79fb 	.word	0x509f79fb
 8117d74:	3fd34413 	.word	0x3fd34413
 8117d78:	08119b95 	.word	0x08119b95
 8117d7c:	08119bac 	.word	0x08119bac
 8117d80:	7ff00000 	.word	0x7ff00000
 8117d84:	08119b91 	.word	0x08119b91
 8117d88:	08119b88 	.word	0x08119b88
 8117d8c:	08119b65 	.word	0x08119b65
 8117d90:	3ff80000 	.word	0x3ff80000
 8117d94:	08119ca8 	.word	0x08119ca8
 8117d98:	08119c0b 	.word	0x08119c0b
 8117d9c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8117d9e:	9a00      	ldr	r2, [sp, #0]
 8117da0:	601a      	str	r2, [r3, #0]
 8117da2:	9b01      	ldr	r3, [sp, #4]
 8117da4:	2b0e      	cmp	r3, #14
 8117da6:	f200 80ad 	bhi.w	8117f04 <_dtoa_r+0x484>
 8117daa:	2d00      	cmp	r5, #0
 8117dac:	f000 80aa 	beq.w	8117f04 <_dtoa_r+0x484>
 8117db0:	f1ba 0f00 	cmp.w	sl, #0
 8117db4:	dd36      	ble.n	8117e24 <_dtoa_r+0x3a4>
 8117db6:	4ac3      	ldr	r2, [pc, #780]	; (81180c4 <_dtoa_r+0x644>)
 8117db8:	f00a 030f 	and.w	r3, sl, #15
 8117dbc:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8117dc0:	ed93 7b00 	vldr	d7, [r3]
 8117dc4:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8117dc8:	ea4f 172a 	mov.w	r7, sl, asr #4
 8117dcc:	eeb0 8a47 	vmov.f32	s16, s14
 8117dd0:	eef0 8a67 	vmov.f32	s17, s15
 8117dd4:	d016      	beq.n	8117e04 <_dtoa_r+0x384>
 8117dd6:	4bbc      	ldr	r3, [pc, #752]	; (81180c8 <_dtoa_r+0x648>)
 8117dd8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8117ddc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8117de0:	f7e8 fdbc 	bl	810095c <__aeabi_ddiv>
 8117de4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8117de8:	f007 070f 	and.w	r7, r7, #15
 8117dec:	2503      	movs	r5, #3
 8117dee:	4eb6      	ldr	r6, [pc, #728]	; (81180c8 <_dtoa_r+0x648>)
 8117df0:	b957      	cbnz	r7, 8117e08 <_dtoa_r+0x388>
 8117df2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8117df6:	ec53 2b18 	vmov	r2, r3, d8
 8117dfa:	f7e8 fdaf 	bl	810095c <__aeabi_ddiv>
 8117dfe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8117e02:	e029      	b.n	8117e58 <_dtoa_r+0x3d8>
 8117e04:	2502      	movs	r5, #2
 8117e06:	e7f2      	b.n	8117dee <_dtoa_r+0x36e>
 8117e08:	07f9      	lsls	r1, r7, #31
 8117e0a:	d508      	bpl.n	8117e1e <_dtoa_r+0x39e>
 8117e0c:	ec51 0b18 	vmov	r0, r1, d8
 8117e10:	e9d6 2300 	ldrd	r2, r3, [r6]
 8117e14:	f7e8 fc78 	bl	8100708 <__aeabi_dmul>
 8117e18:	ec41 0b18 	vmov	d8, r0, r1
 8117e1c:	3501      	adds	r5, #1
 8117e1e:	107f      	asrs	r7, r7, #1
 8117e20:	3608      	adds	r6, #8
 8117e22:	e7e5      	b.n	8117df0 <_dtoa_r+0x370>
 8117e24:	f000 80a6 	beq.w	8117f74 <_dtoa_r+0x4f4>
 8117e28:	f1ca 0600 	rsb	r6, sl, #0
 8117e2c:	4ba5      	ldr	r3, [pc, #660]	; (81180c4 <_dtoa_r+0x644>)
 8117e2e:	4fa6      	ldr	r7, [pc, #664]	; (81180c8 <_dtoa_r+0x648>)
 8117e30:	f006 020f 	and.w	r2, r6, #15
 8117e34:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8117e38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8117e3c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8117e40:	f7e8 fc62 	bl	8100708 <__aeabi_dmul>
 8117e44:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8117e48:	1136      	asrs	r6, r6, #4
 8117e4a:	2300      	movs	r3, #0
 8117e4c:	2502      	movs	r5, #2
 8117e4e:	2e00      	cmp	r6, #0
 8117e50:	f040 8085 	bne.w	8117f5e <_dtoa_r+0x4de>
 8117e54:	2b00      	cmp	r3, #0
 8117e56:	d1d2      	bne.n	8117dfe <_dtoa_r+0x37e>
 8117e58:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8117e5a:	2b00      	cmp	r3, #0
 8117e5c:	f000 808c 	beq.w	8117f78 <_dtoa_r+0x4f8>
 8117e60:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8117e64:	4b99      	ldr	r3, [pc, #612]	; (81180cc <_dtoa_r+0x64c>)
 8117e66:	2200      	movs	r2, #0
 8117e68:	4630      	mov	r0, r6
 8117e6a:	4639      	mov	r1, r7
 8117e6c:	f7e8 febe 	bl	8100bec <__aeabi_dcmplt>
 8117e70:	2800      	cmp	r0, #0
 8117e72:	f000 8081 	beq.w	8117f78 <_dtoa_r+0x4f8>
 8117e76:	9b01      	ldr	r3, [sp, #4]
 8117e78:	2b00      	cmp	r3, #0
 8117e7a:	d07d      	beq.n	8117f78 <_dtoa_r+0x4f8>
 8117e7c:	f1b9 0f00 	cmp.w	r9, #0
 8117e80:	dd3c      	ble.n	8117efc <_dtoa_r+0x47c>
 8117e82:	f10a 33ff 	add.w	r3, sl, #4294967295
 8117e86:	9307      	str	r3, [sp, #28]
 8117e88:	2200      	movs	r2, #0
 8117e8a:	4b91      	ldr	r3, [pc, #580]	; (81180d0 <_dtoa_r+0x650>)
 8117e8c:	4630      	mov	r0, r6
 8117e8e:	4639      	mov	r1, r7
 8117e90:	f7e8 fc3a 	bl	8100708 <__aeabi_dmul>
 8117e94:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8117e98:	3501      	adds	r5, #1
 8117e9a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8117e9e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8117ea2:	4628      	mov	r0, r5
 8117ea4:	f7e8 fbc6 	bl	8100634 <__aeabi_i2d>
 8117ea8:	4632      	mov	r2, r6
 8117eaa:	463b      	mov	r3, r7
 8117eac:	f7e8 fc2c 	bl	8100708 <__aeabi_dmul>
 8117eb0:	4b88      	ldr	r3, [pc, #544]	; (81180d4 <_dtoa_r+0x654>)
 8117eb2:	2200      	movs	r2, #0
 8117eb4:	f7e8 fa72 	bl	810039c <__adddf3>
 8117eb8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8117ebc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8117ec0:	9303      	str	r3, [sp, #12]
 8117ec2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8117ec4:	2b00      	cmp	r3, #0
 8117ec6:	d15c      	bne.n	8117f82 <_dtoa_r+0x502>
 8117ec8:	4b83      	ldr	r3, [pc, #524]	; (81180d8 <_dtoa_r+0x658>)
 8117eca:	2200      	movs	r2, #0
 8117ecc:	4630      	mov	r0, r6
 8117ece:	4639      	mov	r1, r7
 8117ed0:	f7e8 fa62 	bl	8100398 <__aeabi_dsub>
 8117ed4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8117ed8:	4606      	mov	r6, r0
 8117eda:	460f      	mov	r7, r1
 8117edc:	f7e8 fea4 	bl	8100c28 <__aeabi_dcmpgt>
 8117ee0:	2800      	cmp	r0, #0
 8117ee2:	f040 8296 	bne.w	8118412 <_dtoa_r+0x992>
 8117ee6:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8117eea:	4630      	mov	r0, r6
 8117eec:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8117ef0:	4639      	mov	r1, r7
 8117ef2:	f7e8 fe7b 	bl	8100bec <__aeabi_dcmplt>
 8117ef6:	2800      	cmp	r0, #0
 8117ef8:	f040 8288 	bne.w	811840c <_dtoa_r+0x98c>
 8117efc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8117f00:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8117f04:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8117f06:	2b00      	cmp	r3, #0
 8117f08:	f2c0 8158 	blt.w	81181bc <_dtoa_r+0x73c>
 8117f0c:	f1ba 0f0e 	cmp.w	sl, #14
 8117f10:	f300 8154 	bgt.w	81181bc <_dtoa_r+0x73c>
 8117f14:	4b6b      	ldr	r3, [pc, #428]	; (81180c4 <_dtoa_r+0x644>)
 8117f16:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8117f1a:	e9d3 8900 	ldrd	r8, r9, [r3]
 8117f1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8117f20:	2b00      	cmp	r3, #0
 8117f22:	f280 80e3 	bge.w	81180ec <_dtoa_r+0x66c>
 8117f26:	9b01      	ldr	r3, [sp, #4]
 8117f28:	2b00      	cmp	r3, #0
 8117f2a:	f300 80df 	bgt.w	81180ec <_dtoa_r+0x66c>
 8117f2e:	f040 826d 	bne.w	811840c <_dtoa_r+0x98c>
 8117f32:	4b69      	ldr	r3, [pc, #420]	; (81180d8 <_dtoa_r+0x658>)
 8117f34:	2200      	movs	r2, #0
 8117f36:	4640      	mov	r0, r8
 8117f38:	4649      	mov	r1, r9
 8117f3a:	f7e8 fbe5 	bl	8100708 <__aeabi_dmul>
 8117f3e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8117f42:	f7e8 fe67 	bl	8100c14 <__aeabi_dcmpge>
 8117f46:	9e01      	ldr	r6, [sp, #4]
 8117f48:	4637      	mov	r7, r6
 8117f4a:	2800      	cmp	r0, #0
 8117f4c:	f040 8243 	bne.w	81183d6 <_dtoa_r+0x956>
 8117f50:	9d00      	ldr	r5, [sp, #0]
 8117f52:	2331      	movs	r3, #49	; 0x31
 8117f54:	f805 3b01 	strb.w	r3, [r5], #1
 8117f58:	f10a 0a01 	add.w	sl, sl, #1
 8117f5c:	e23f      	b.n	81183de <_dtoa_r+0x95e>
 8117f5e:	07f2      	lsls	r2, r6, #31
 8117f60:	d505      	bpl.n	8117f6e <_dtoa_r+0x4ee>
 8117f62:	e9d7 2300 	ldrd	r2, r3, [r7]
 8117f66:	f7e8 fbcf 	bl	8100708 <__aeabi_dmul>
 8117f6a:	3501      	adds	r5, #1
 8117f6c:	2301      	movs	r3, #1
 8117f6e:	1076      	asrs	r6, r6, #1
 8117f70:	3708      	adds	r7, #8
 8117f72:	e76c      	b.n	8117e4e <_dtoa_r+0x3ce>
 8117f74:	2502      	movs	r5, #2
 8117f76:	e76f      	b.n	8117e58 <_dtoa_r+0x3d8>
 8117f78:	9b01      	ldr	r3, [sp, #4]
 8117f7a:	f8cd a01c 	str.w	sl, [sp, #28]
 8117f7e:	930c      	str	r3, [sp, #48]	; 0x30
 8117f80:	e78d      	b.n	8117e9e <_dtoa_r+0x41e>
 8117f82:	9900      	ldr	r1, [sp, #0]
 8117f84:	980c      	ldr	r0, [sp, #48]	; 0x30
 8117f86:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8117f88:	4b4e      	ldr	r3, [pc, #312]	; (81180c4 <_dtoa_r+0x644>)
 8117f8a:	ed9d 7b02 	vldr	d7, [sp, #8]
 8117f8e:	4401      	add	r1, r0
 8117f90:	9102      	str	r1, [sp, #8]
 8117f92:	9908      	ldr	r1, [sp, #32]
 8117f94:	eeb0 8a47 	vmov.f32	s16, s14
 8117f98:	eef0 8a67 	vmov.f32	s17, s15
 8117f9c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8117fa0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8117fa4:	2900      	cmp	r1, #0
 8117fa6:	d045      	beq.n	8118034 <_dtoa_r+0x5b4>
 8117fa8:	494c      	ldr	r1, [pc, #304]	; (81180dc <_dtoa_r+0x65c>)
 8117faa:	2000      	movs	r0, #0
 8117fac:	f7e8 fcd6 	bl	810095c <__aeabi_ddiv>
 8117fb0:	ec53 2b18 	vmov	r2, r3, d8
 8117fb4:	f7e8 f9f0 	bl	8100398 <__aeabi_dsub>
 8117fb8:	9d00      	ldr	r5, [sp, #0]
 8117fba:	ec41 0b18 	vmov	d8, r0, r1
 8117fbe:	4639      	mov	r1, r7
 8117fc0:	4630      	mov	r0, r6
 8117fc2:	f7e8 fe51 	bl	8100c68 <__aeabi_d2iz>
 8117fc6:	900c      	str	r0, [sp, #48]	; 0x30
 8117fc8:	f7e8 fb34 	bl	8100634 <__aeabi_i2d>
 8117fcc:	4602      	mov	r2, r0
 8117fce:	460b      	mov	r3, r1
 8117fd0:	4630      	mov	r0, r6
 8117fd2:	4639      	mov	r1, r7
 8117fd4:	f7e8 f9e0 	bl	8100398 <__aeabi_dsub>
 8117fd8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8117fda:	3330      	adds	r3, #48	; 0x30
 8117fdc:	f805 3b01 	strb.w	r3, [r5], #1
 8117fe0:	ec53 2b18 	vmov	r2, r3, d8
 8117fe4:	4606      	mov	r6, r0
 8117fe6:	460f      	mov	r7, r1
 8117fe8:	f7e8 fe00 	bl	8100bec <__aeabi_dcmplt>
 8117fec:	2800      	cmp	r0, #0
 8117fee:	d165      	bne.n	81180bc <_dtoa_r+0x63c>
 8117ff0:	4632      	mov	r2, r6
 8117ff2:	463b      	mov	r3, r7
 8117ff4:	4935      	ldr	r1, [pc, #212]	; (81180cc <_dtoa_r+0x64c>)
 8117ff6:	2000      	movs	r0, #0
 8117ff8:	f7e8 f9ce 	bl	8100398 <__aeabi_dsub>
 8117ffc:	ec53 2b18 	vmov	r2, r3, d8
 8118000:	f7e8 fdf4 	bl	8100bec <__aeabi_dcmplt>
 8118004:	2800      	cmp	r0, #0
 8118006:	f040 80b9 	bne.w	811817c <_dtoa_r+0x6fc>
 811800a:	9b02      	ldr	r3, [sp, #8]
 811800c:	429d      	cmp	r5, r3
 811800e:	f43f af75 	beq.w	8117efc <_dtoa_r+0x47c>
 8118012:	4b2f      	ldr	r3, [pc, #188]	; (81180d0 <_dtoa_r+0x650>)
 8118014:	ec51 0b18 	vmov	r0, r1, d8
 8118018:	2200      	movs	r2, #0
 811801a:	f7e8 fb75 	bl	8100708 <__aeabi_dmul>
 811801e:	4b2c      	ldr	r3, [pc, #176]	; (81180d0 <_dtoa_r+0x650>)
 8118020:	ec41 0b18 	vmov	d8, r0, r1
 8118024:	2200      	movs	r2, #0
 8118026:	4630      	mov	r0, r6
 8118028:	4639      	mov	r1, r7
 811802a:	f7e8 fb6d 	bl	8100708 <__aeabi_dmul>
 811802e:	4606      	mov	r6, r0
 8118030:	460f      	mov	r7, r1
 8118032:	e7c4      	b.n	8117fbe <_dtoa_r+0x53e>
 8118034:	ec51 0b17 	vmov	r0, r1, d7
 8118038:	f7e8 fb66 	bl	8100708 <__aeabi_dmul>
 811803c:	9b02      	ldr	r3, [sp, #8]
 811803e:	9d00      	ldr	r5, [sp, #0]
 8118040:	930c      	str	r3, [sp, #48]	; 0x30
 8118042:	ec41 0b18 	vmov	d8, r0, r1
 8118046:	4639      	mov	r1, r7
 8118048:	4630      	mov	r0, r6
 811804a:	f7e8 fe0d 	bl	8100c68 <__aeabi_d2iz>
 811804e:	9011      	str	r0, [sp, #68]	; 0x44
 8118050:	f7e8 faf0 	bl	8100634 <__aeabi_i2d>
 8118054:	4602      	mov	r2, r0
 8118056:	460b      	mov	r3, r1
 8118058:	4630      	mov	r0, r6
 811805a:	4639      	mov	r1, r7
 811805c:	f7e8 f99c 	bl	8100398 <__aeabi_dsub>
 8118060:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8118062:	3330      	adds	r3, #48	; 0x30
 8118064:	f805 3b01 	strb.w	r3, [r5], #1
 8118068:	9b02      	ldr	r3, [sp, #8]
 811806a:	429d      	cmp	r5, r3
 811806c:	4606      	mov	r6, r0
 811806e:	460f      	mov	r7, r1
 8118070:	f04f 0200 	mov.w	r2, #0
 8118074:	d134      	bne.n	81180e0 <_dtoa_r+0x660>
 8118076:	4b19      	ldr	r3, [pc, #100]	; (81180dc <_dtoa_r+0x65c>)
 8118078:	ec51 0b18 	vmov	r0, r1, d8
 811807c:	f7e8 f98e 	bl	810039c <__adddf3>
 8118080:	4602      	mov	r2, r0
 8118082:	460b      	mov	r3, r1
 8118084:	4630      	mov	r0, r6
 8118086:	4639      	mov	r1, r7
 8118088:	f7e8 fdce 	bl	8100c28 <__aeabi_dcmpgt>
 811808c:	2800      	cmp	r0, #0
 811808e:	d175      	bne.n	811817c <_dtoa_r+0x6fc>
 8118090:	ec53 2b18 	vmov	r2, r3, d8
 8118094:	4911      	ldr	r1, [pc, #68]	; (81180dc <_dtoa_r+0x65c>)
 8118096:	2000      	movs	r0, #0
 8118098:	f7e8 f97e 	bl	8100398 <__aeabi_dsub>
 811809c:	4602      	mov	r2, r0
 811809e:	460b      	mov	r3, r1
 81180a0:	4630      	mov	r0, r6
 81180a2:	4639      	mov	r1, r7
 81180a4:	f7e8 fda2 	bl	8100bec <__aeabi_dcmplt>
 81180a8:	2800      	cmp	r0, #0
 81180aa:	f43f af27 	beq.w	8117efc <_dtoa_r+0x47c>
 81180ae:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 81180b0:	1e6b      	subs	r3, r5, #1
 81180b2:	930c      	str	r3, [sp, #48]	; 0x30
 81180b4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 81180b8:	2b30      	cmp	r3, #48	; 0x30
 81180ba:	d0f8      	beq.n	81180ae <_dtoa_r+0x62e>
 81180bc:	f8dd a01c 	ldr.w	sl, [sp, #28]
 81180c0:	e04a      	b.n	8118158 <_dtoa_r+0x6d8>
 81180c2:	bf00      	nop
 81180c4:	08119ca8 	.word	0x08119ca8
 81180c8:	08119c80 	.word	0x08119c80
 81180cc:	3ff00000 	.word	0x3ff00000
 81180d0:	40240000 	.word	0x40240000
 81180d4:	401c0000 	.word	0x401c0000
 81180d8:	40140000 	.word	0x40140000
 81180dc:	3fe00000 	.word	0x3fe00000
 81180e0:	4baf      	ldr	r3, [pc, #700]	; (81183a0 <_dtoa_r+0x920>)
 81180e2:	f7e8 fb11 	bl	8100708 <__aeabi_dmul>
 81180e6:	4606      	mov	r6, r0
 81180e8:	460f      	mov	r7, r1
 81180ea:	e7ac      	b.n	8118046 <_dtoa_r+0x5c6>
 81180ec:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 81180f0:	9d00      	ldr	r5, [sp, #0]
 81180f2:	4642      	mov	r2, r8
 81180f4:	464b      	mov	r3, r9
 81180f6:	4630      	mov	r0, r6
 81180f8:	4639      	mov	r1, r7
 81180fa:	f7e8 fc2f 	bl	810095c <__aeabi_ddiv>
 81180fe:	f7e8 fdb3 	bl	8100c68 <__aeabi_d2iz>
 8118102:	9002      	str	r0, [sp, #8]
 8118104:	f7e8 fa96 	bl	8100634 <__aeabi_i2d>
 8118108:	4642      	mov	r2, r8
 811810a:	464b      	mov	r3, r9
 811810c:	f7e8 fafc 	bl	8100708 <__aeabi_dmul>
 8118110:	4602      	mov	r2, r0
 8118112:	460b      	mov	r3, r1
 8118114:	4630      	mov	r0, r6
 8118116:	4639      	mov	r1, r7
 8118118:	f7e8 f93e 	bl	8100398 <__aeabi_dsub>
 811811c:	9e02      	ldr	r6, [sp, #8]
 811811e:	9f01      	ldr	r7, [sp, #4]
 8118120:	3630      	adds	r6, #48	; 0x30
 8118122:	f805 6b01 	strb.w	r6, [r5], #1
 8118126:	9e00      	ldr	r6, [sp, #0]
 8118128:	1bae      	subs	r6, r5, r6
 811812a:	42b7      	cmp	r7, r6
 811812c:	4602      	mov	r2, r0
 811812e:	460b      	mov	r3, r1
 8118130:	d137      	bne.n	81181a2 <_dtoa_r+0x722>
 8118132:	f7e8 f933 	bl	810039c <__adddf3>
 8118136:	4642      	mov	r2, r8
 8118138:	464b      	mov	r3, r9
 811813a:	4606      	mov	r6, r0
 811813c:	460f      	mov	r7, r1
 811813e:	f7e8 fd73 	bl	8100c28 <__aeabi_dcmpgt>
 8118142:	b9c8      	cbnz	r0, 8118178 <_dtoa_r+0x6f8>
 8118144:	4642      	mov	r2, r8
 8118146:	464b      	mov	r3, r9
 8118148:	4630      	mov	r0, r6
 811814a:	4639      	mov	r1, r7
 811814c:	f7e8 fd44 	bl	8100bd8 <__aeabi_dcmpeq>
 8118150:	b110      	cbz	r0, 8118158 <_dtoa_r+0x6d8>
 8118152:	9b02      	ldr	r3, [sp, #8]
 8118154:	07d9      	lsls	r1, r3, #31
 8118156:	d40f      	bmi.n	8118178 <_dtoa_r+0x6f8>
 8118158:	4620      	mov	r0, r4
 811815a:	4659      	mov	r1, fp
 811815c:	f000 fac8 	bl	81186f0 <_Bfree>
 8118160:	2300      	movs	r3, #0
 8118162:	702b      	strb	r3, [r5, #0]
 8118164:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8118166:	f10a 0001 	add.w	r0, sl, #1
 811816a:	6018      	str	r0, [r3, #0]
 811816c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 811816e:	2b00      	cmp	r3, #0
 8118170:	f43f acd8 	beq.w	8117b24 <_dtoa_r+0xa4>
 8118174:	601d      	str	r5, [r3, #0]
 8118176:	e4d5      	b.n	8117b24 <_dtoa_r+0xa4>
 8118178:	f8cd a01c 	str.w	sl, [sp, #28]
 811817c:	462b      	mov	r3, r5
 811817e:	461d      	mov	r5, r3
 8118180:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8118184:	2a39      	cmp	r2, #57	; 0x39
 8118186:	d108      	bne.n	811819a <_dtoa_r+0x71a>
 8118188:	9a00      	ldr	r2, [sp, #0]
 811818a:	429a      	cmp	r2, r3
 811818c:	d1f7      	bne.n	811817e <_dtoa_r+0x6fe>
 811818e:	9a07      	ldr	r2, [sp, #28]
 8118190:	9900      	ldr	r1, [sp, #0]
 8118192:	3201      	adds	r2, #1
 8118194:	9207      	str	r2, [sp, #28]
 8118196:	2230      	movs	r2, #48	; 0x30
 8118198:	700a      	strb	r2, [r1, #0]
 811819a:	781a      	ldrb	r2, [r3, #0]
 811819c:	3201      	adds	r2, #1
 811819e:	701a      	strb	r2, [r3, #0]
 81181a0:	e78c      	b.n	81180bc <_dtoa_r+0x63c>
 81181a2:	4b7f      	ldr	r3, [pc, #508]	; (81183a0 <_dtoa_r+0x920>)
 81181a4:	2200      	movs	r2, #0
 81181a6:	f7e8 faaf 	bl	8100708 <__aeabi_dmul>
 81181aa:	2200      	movs	r2, #0
 81181ac:	2300      	movs	r3, #0
 81181ae:	4606      	mov	r6, r0
 81181b0:	460f      	mov	r7, r1
 81181b2:	f7e8 fd11 	bl	8100bd8 <__aeabi_dcmpeq>
 81181b6:	2800      	cmp	r0, #0
 81181b8:	d09b      	beq.n	81180f2 <_dtoa_r+0x672>
 81181ba:	e7cd      	b.n	8118158 <_dtoa_r+0x6d8>
 81181bc:	9a08      	ldr	r2, [sp, #32]
 81181be:	2a00      	cmp	r2, #0
 81181c0:	f000 80c4 	beq.w	811834c <_dtoa_r+0x8cc>
 81181c4:	9a05      	ldr	r2, [sp, #20]
 81181c6:	2a01      	cmp	r2, #1
 81181c8:	f300 80a8 	bgt.w	811831c <_dtoa_r+0x89c>
 81181cc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 81181ce:	2a00      	cmp	r2, #0
 81181d0:	f000 80a0 	beq.w	8118314 <_dtoa_r+0x894>
 81181d4:	f203 4333 	addw	r3, r3, #1075	; 0x433
 81181d8:	9e06      	ldr	r6, [sp, #24]
 81181da:	4645      	mov	r5, r8
 81181dc:	9a04      	ldr	r2, [sp, #16]
 81181de:	2101      	movs	r1, #1
 81181e0:	441a      	add	r2, r3
 81181e2:	4620      	mov	r0, r4
 81181e4:	4498      	add	r8, r3
 81181e6:	9204      	str	r2, [sp, #16]
 81181e8:	f000 fb3e 	bl	8118868 <__i2b>
 81181ec:	4607      	mov	r7, r0
 81181ee:	2d00      	cmp	r5, #0
 81181f0:	dd0b      	ble.n	811820a <_dtoa_r+0x78a>
 81181f2:	9b04      	ldr	r3, [sp, #16]
 81181f4:	2b00      	cmp	r3, #0
 81181f6:	dd08      	ble.n	811820a <_dtoa_r+0x78a>
 81181f8:	42ab      	cmp	r3, r5
 81181fa:	9a04      	ldr	r2, [sp, #16]
 81181fc:	bfa8      	it	ge
 81181fe:	462b      	movge	r3, r5
 8118200:	eba8 0803 	sub.w	r8, r8, r3
 8118204:	1aed      	subs	r5, r5, r3
 8118206:	1ad3      	subs	r3, r2, r3
 8118208:	9304      	str	r3, [sp, #16]
 811820a:	9b06      	ldr	r3, [sp, #24]
 811820c:	b1fb      	cbz	r3, 811824e <_dtoa_r+0x7ce>
 811820e:	9b08      	ldr	r3, [sp, #32]
 8118210:	2b00      	cmp	r3, #0
 8118212:	f000 809f 	beq.w	8118354 <_dtoa_r+0x8d4>
 8118216:	2e00      	cmp	r6, #0
 8118218:	dd11      	ble.n	811823e <_dtoa_r+0x7be>
 811821a:	4639      	mov	r1, r7
 811821c:	4632      	mov	r2, r6
 811821e:	4620      	mov	r0, r4
 8118220:	f000 fbde 	bl	81189e0 <__pow5mult>
 8118224:	465a      	mov	r2, fp
 8118226:	4601      	mov	r1, r0
 8118228:	4607      	mov	r7, r0
 811822a:	4620      	mov	r0, r4
 811822c:	f000 fb32 	bl	8118894 <__multiply>
 8118230:	4659      	mov	r1, fp
 8118232:	9007      	str	r0, [sp, #28]
 8118234:	4620      	mov	r0, r4
 8118236:	f000 fa5b 	bl	81186f0 <_Bfree>
 811823a:	9b07      	ldr	r3, [sp, #28]
 811823c:	469b      	mov	fp, r3
 811823e:	9b06      	ldr	r3, [sp, #24]
 8118240:	1b9a      	subs	r2, r3, r6
 8118242:	d004      	beq.n	811824e <_dtoa_r+0x7ce>
 8118244:	4659      	mov	r1, fp
 8118246:	4620      	mov	r0, r4
 8118248:	f000 fbca 	bl	81189e0 <__pow5mult>
 811824c:	4683      	mov	fp, r0
 811824e:	2101      	movs	r1, #1
 8118250:	4620      	mov	r0, r4
 8118252:	f000 fb09 	bl	8118868 <__i2b>
 8118256:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8118258:	2b00      	cmp	r3, #0
 811825a:	4606      	mov	r6, r0
 811825c:	dd7c      	ble.n	8118358 <_dtoa_r+0x8d8>
 811825e:	461a      	mov	r2, r3
 8118260:	4601      	mov	r1, r0
 8118262:	4620      	mov	r0, r4
 8118264:	f000 fbbc 	bl	81189e0 <__pow5mult>
 8118268:	9b05      	ldr	r3, [sp, #20]
 811826a:	2b01      	cmp	r3, #1
 811826c:	4606      	mov	r6, r0
 811826e:	dd76      	ble.n	811835e <_dtoa_r+0x8de>
 8118270:	2300      	movs	r3, #0
 8118272:	9306      	str	r3, [sp, #24]
 8118274:	6933      	ldr	r3, [r6, #16]
 8118276:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 811827a:	6918      	ldr	r0, [r3, #16]
 811827c:	f000 faa4 	bl	81187c8 <__hi0bits>
 8118280:	f1c0 0020 	rsb	r0, r0, #32
 8118284:	9b04      	ldr	r3, [sp, #16]
 8118286:	4418      	add	r0, r3
 8118288:	f010 001f 	ands.w	r0, r0, #31
 811828c:	f000 8086 	beq.w	811839c <_dtoa_r+0x91c>
 8118290:	f1c0 0320 	rsb	r3, r0, #32
 8118294:	2b04      	cmp	r3, #4
 8118296:	dd7f      	ble.n	8118398 <_dtoa_r+0x918>
 8118298:	f1c0 001c 	rsb	r0, r0, #28
 811829c:	9b04      	ldr	r3, [sp, #16]
 811829e:	4403      	add	r3, r0
 81182a0:	4480      	add	r8, r0
 81182a2:	4405      	add	r5, r0
 81182a4:	9304      	str	r3, [sp, #16]
 81182a6:	f1b8 0f00 	cmp.w	r8, #0
 81182aa:	dd05      	ble.n	81182b8 <_dtoa_r+0x838>
 81182ac:	4659      	mov	r1, fp
 81182ae:	4642      	mov	r2, r8
 81182b0:	4620      	mov	r0, r4
 81182b2:	f000 fbef 	bl	8118a94 <__lshift>
 81182b6:	4683      	mov	fp, r0
 81182b8:	9b04      	ldr	r3, [sp, #16]
 81182ba:	2b00      	cmp	r3, #0
 81182bc:	dd05      	ble.n	81182ca <_dtoa_r+0x84a>
 81182be:	4631      	mov	r1, r6
 81182c0:	461a      	mov	r2, r3
 81182c2:	4620      	mov	r0, r4
 81182c4:	f000 fbe6 	bl	8118a94 <__lshift>
 81182c8:	4606      	mov	r6, r0
 81182ca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 81182cc:	2b00      	cmp	r3, #0
 81182ce:	d069      	beq.n	81183a4 <_dtoa_r+0x924>
 81182d0:	4631      	mov	r1, r6
 81182d2:	4658      	mov	r0, fp
 81182d4:	f000 fc4a 	bl	8118b6c <__mcmp>
 81182d8:	2800      	cmp	r0, #0
 81182da:	da63      	bge.n	81183a4 <_dtoa_r+0x924>
 81182dc:	2300      	movs	r3, #0
 81182de:	4659      	mov	r1, fp
 81182e0:	220a      	movs	r2, #10
 81182e2:	4620      	mov	r0, r4
 81182e4:	f000 fa26 	bl	8118734 <__multadd>
 81182e8:	9b08      	ldr	r3, [sp, #32]
 81182ea:	f10a 3aff 	add.w	sl, sl, #4294967295
 81182ee:	4683      	mov	fp, r0
 81182f0:	2b00      	cmp	r3, #0
 81182f2:	f000 818f 	beq.w	8118614 <_dtoa_r+0xb94>
 81182f6:	4639      	mov	r1, r7
 81182f8:	2300      	movs	r3, #0
 81182fa:	220a      	movs	r2, #10
 81182fc:	4620      	mov	r0, r4
 81182fe:	f000 fa19 	bl	8118734 <__multadd>
 8118302:	f1b9 0f00 	cmp.w	r9, #0
 8118306:	4607      	mov	r7, r0
 8118308:	f300 808e 	bgt.w	8118428 <_dtoa_r+0x9a8>
 811830c:	9b05      	ldr	r3, [sp, #20]
 811830e:	2b02      	cmp	r3, #2
 8118310:	dc50      	bgt.n	81183b4 <_dtoa_r+0x934>
 8118312:	e089      	b.n	8118428 <_dtoa_r+0x9a8>
 8118314:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8118316:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 811831a:	e75d      	b.n	81181d8 <_dtoa_r+0x758>
 811831c:	9b01      	ldr	r3, [sp, #4]
 811831e:	1e5e      	subs	r6, r3, #1
 8118320:	9b06      	ldr	r3, [sp, #24]
 8118322:	42b3      	cmp	r3, r6
 8118324:	bfbf      	itttt	lt
 8118326:	9b06      	ldrlt	r3, [sp, #24]
 8118328:	9606      	strlt	r6, [sp, #24]
 811832a:	1af2      	sublt	r2, r6, r3
 811832c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 811832e:	bfb6      	itet	lt
 8118330:	189b      	addlt	r3, r3, r2
 8118332:	1b9e      	subge	r6, r3, r6
 8118334:	930d      	strlt	r3, [sp, #52]	; 0x34
 8118336:	9b01      	ldr	r3, [sp, #4]
 8118338:	bfb8      	it	lt
 811833a:	2600      	movlt	r6, #0
 811833c:	2b00      	cmp	r3, #0
 811833e:	bfb5      	itete	lt
 8118340:	eba8 0503 	sublt.w	r5, r8, r3
 8118344:	9b01      	ldrge	r3, [sp, #4]
 8118346:	2300      	movlt	r3, #0
 8118348:	4645      	movge	r5, r8
 811834a:	e747      	b.n	81181dc <_dtoa_r+0x75c>
 811834c:	9e06      	ldr	r6, [sp, #24]
 811834e:	9f08      	ldr	r7, [sp, #32]
 8118350:	4645      	mov	r5, r8
 8118352:	e74c      	b.n	81181ee <_dtoa_r+0x76e>
 8118354:	9a06      	ldr	r2, [sp, #24]
 8118356:	e775      	b.n	8118244 <_dtoa_r+0x7c4>
 8118358:	9b05      	ldr	r3, [sp, #20]
 811835a:	2b01      	cmp	r3, #1
 811835c:	dc18      	bgt.n	8118390 <_dtoa_r+0x910>
 811835e:	9b02      	ldr	r3, [sp, #8]
 8118360:	b9b3      	cbnz	r3, 8118390 <_dtoa_r+0x910>
 8118362:	9b03      	ldr	r3, [sp, #12]
 8118364:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8118368:	b9a3      	cbnz	r3, 8118394 <_dtoa_r+0x914>
 811836a:	9b03      	ldr	r3, [sp, #12]
 811836c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8118370:	0d1b      	lsrs	r3, r3, #20
 8118372:	051b      	lsls	r3, r3, #20
 8118374:	b12b      	cbz	r3, 8118382 <_dtoa_r+0x902>
 8118376:	9b04      	ldr	r3, [sp, #16]
 8118378:	3301      	adds	r3, #1
 811837a:	9304      	str	r3, [sp, #16]
 811837c:	f108 0801 	add.w	r8, r8, #1
 8118380:	2301      	movs	r3, #1
 8118382:	9306      	str	r3, [sp, #24]
 8118384:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8118386:	2b00      	cmp	r3, #0
 8118388:	f47f af74 	bne.w	8118274 <_dtoa_r+0x7f4>
 811838c:	2001      	movs	r0, #1
 811838e:	e779      	b.n	8118284 <_dtoa_r+0x804>
 8118390:	2300      	movs	r3, #0
 8118392:	e7f6      	b.n	8118382 <_dtoa_r+0x902>
 8118394:	9b02      	ldr	r3, [sp, #8]
 8118396:	e7f4      	b.n	8118382 <_dtoa_r+0x902>
 8118398:	d085      	beq.n	81182a6 <_dtoa_r+0x826>
 811839a:	4618      	mov	r0, r3
 811839c:	301c      	adds	r0, #28
 811839e:	e77d      	b.n	811829c <_dtoa_r+0x81c>
 81183a0:	40240000 	.word	0x40240000
 81183a4:	9b01      	ldr	r3, [sp, #4]
 81183a6:	2b00      	cmp	r3, #0
 81183a8:	dc38      	bgt.n	811841c <_dtoa_r+0x99c>
 81183aa:	9b05      	ldr	r3, [sp, #20]
 81183ac:	2b02      	cmp	r3, #2
 81183ae:	dd35      	ble.n	811841c <_dtoa_r+0x99c>
 81183b0:	f8dd 9004 	ldr.w	r9, [sp, #4]
 81183b4:	f1b9 0f00 	cmp.w	r9, #0
 81183b8:	d10d      	bne.n	81183d6 <_dtoa_r+0x956>
 81183ba:	4631      	mov	r1, r6
 81183bc:	464b      	mov	r3, r9
 81183be:	2205      	movs	r2, #5
 81183c0:	4620      	mov	r0, r4
 81183c2:	f000 f9b7 	bl	8118734 <__multadd>
 81183c6:	4601      	mov	r1, r0
 81183c8:	4606      	mov	r6, r0
 81183ca:	4658      	mov	r0, fp
 81183cc:	f000 fbce 	bl	8118b6c <__mcmp>
 81183d0:	2800      	cmp	r0, #0
 81183d2:	f73f adbd 	bgt.w	8117f50 <_dtoa_r+0x4d0>
 81183d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 81183d8:	9d00      	ldr	r5, [sp, #0]
 81183da:	ea6f 0a03 	mvn.w	sl, r3
 81183de:	f04f 0800 	mov.w	r8, #0
 81183e2:	4631      	mov	r1, r6
 81183e4:	4620      	mov	r0, r4
 81183e6:	f000 f983 	bl	81186f0 <_Bfree>
 81183ea:	2f00      	cmp	r7, #0
 81183ec:	f43f aeb4 	beq.w	8118158 <_dtoa_r+0x6d8>
 81183f0:	f1b8 0f00 	cmp.w	r8, #0
 81183f4:	d005      	beq.n	8118402 <_dtoa_r+0x982>
 81183f6:	45b8      	cmp	r8, r7
 81183f8:	d003      	beq.n	8118402 <_dtoa_r+0x982>
 81183fa:	4641      	mov	r1, r8
 81183fc:	4620      	mov	r0, r4
 81183fe:	f000 f977 	bl	81186f0 <_Bfree>
 8118402:	4639      	mov	r1, r7
 8118404:	4620      	mov	r0, r4
 8118406:	f000 f973 	bl	81186f0 <_Bfree>
 811840a:	e6a5      	b.n	8118158 <_dtoa_r+0x6d8>
 811840c:	2600      	movs	r6, #0
 811840e:	4637      	mov	r7, r6
 8118410:	e7e1      	b.n	81183d6 <_dtoa_r+0x956>
 8118412:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8118414:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8118418:	4637      	mov	r7, r6
 811841a:	e599      	b.n	8117f50 <_dtoa_r+0x4d0>
 811841c:	9b08      	ldr	r3, [sp, #32]
 811841e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8118422:	2b00      	cmp	r3, #0
 8118424:	f000 80fd 	beq.w	8118622 <_dtoa_r+0xba2>
 8118428:	2d00      	cmp	r5, #0
 811842a:	dd05      	ble.n	8118438 <_dtoa_r+0x9b8>
 811842c:	4639      	mov	r1, r7
 811842e:	462a      	mov	r2, r5
 8118430:	4620      	mov	r0, r4
 8118432:	f000 fb2f 	bl	8118a94 <__lshift>
 8118436:	4607      	mov	r7, r0
 8118438:	9b06      	ldr	r3, [sp, #24]
 811843a:	2b00      	cmp	r3, #0
 811843c:	d05c      	beq.n	81184f8 <_dtoa_r+0xa78>
 811843e:	6879      	ldr	r1, [r7, #4]
 8118440:	4620      	mov	r0, r4
 8118442:	f000 f915 	bl	8118670 <_Balloc>
 8118446:	4605      	mov	r5, r0
 8118448:	b928      	cbnz	r0, 8118456 <_dtoa_r+0x9d6>
 811844a:	4b80      	ldr	r3, [pc, #512]	; (811864c <_dtoa_r+0xbcc>)
 811844c:	4602      	mov	r2, r0
 811844e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8118452:	f7ff bb2e 	b.w	8117ab2 <_dtoa_r+0x32>
 8118456:	693a      	ldr	r2, [r7, #16]
 8118458:	3202      	adds	r2, #2
 811845a:	0092      	lsls	r2, r2, #2
 811845c:	f107 010c 	add.w	r1, r7, #12
 8118460:	300c      	adds	r0, #12
 8118462:	f7fe fdff 	bl	8117064 <memcpy>
 8118466:	2201      	movs	r2, #1
 8118468:	4629      	mov	r1, r5
 811846a:	4620      	mov	r0, r4
 811846c:	f000 fb12 	bl	8118a94 <__lshift>
 8118470:	9b00      	ldr	r3, [sp, #0]
 8118472:	3301      	adds	r3, #1
 8118474:	9301      	str	r3, [sp, #4]
 8118476:	9b00      	ldr	r3, [sp, #0]
 8118478:	444b      	add	r3, r9
 811847a:	9307      	str	r3, [sp, #28]
 811847c:	9b02      	ldr	r3, [sp, #8]
 811847e:	f003 0301 	and.w	r3, r3, #1
 8118482:	46b8      	mov	r8, r7
 8118484:	9306      	str	r3, [sp, #24]
 8118486:	4607      	mov	r7, r0
 8118488:	9b01      	ldr	r3, [sp, #4]
 811848a:	4631      	mov	r1, r6
 811848c:	3b01      	subs	r3, #1
 811848e:	4658      	mov	r0, fp
 8118490:	9302      	str	r3, [sp, #8]
 8118492:	f7ff fa67 	bl	8117964 <quorem>
 8118496:	4603      	mov	r3, r0
 8118498:	3330      	adds	r3, #48	; 0x30
 811849a:	9004      	str	r0, [sp, #16]
 811849c:	4641      	mov	r1, r8
 811849e:	4658      	mov	r0, fp
 81184a0:	9308      	str	r3, [sp, #32]
 81184a2:	f000 fb63 	bl	8118b6c <__mcmp>
 81184a6:	463a      	mov	r2, r7
 81184a8:	4681      	mov	r9, r0
 81184aa:	4631      	mov	r1, r6
 81184ac:	4620      	mov	r0, r4
 81184ae:	f000 fb79 	bl	8118ba4 <__mdiff>
 81184b2:	68c2      	ldr	r2, [r0, #12]
 81184b4:	9b08      	ldr	r3, [sp, #32]
 81184b6:	4605      	mov	r5, r0
 81184b8:	bb02      	cbnz	r2, 81184fc <_dtoa_r+0xa7c>
 81184ba:	4601      	mov	r1, r0
 81184bc:	4658      	mov	r0, fp
 81184be:	f000 fb55 	bl	8118b6c <__mcmp>
 81184c2:	9b08      	ldr	r3, [sp, #32]
 81184c4:	4602      	mov	r2, r0
 81184c6:	4629      	mov	r1, r5
 81184c8:	4620      	mov	r0, r4
 81184ca:	e9cd 3208 	strd	r3, r2, [sp, #32]
 81184ce:	f000 f90f 	bl	81186f0 <_Bfree>
 81184d2:	9b05      	ldr	r3, [sp, #20]
 81184d4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 81184d6:	9d01      	ldr	r5, [sp, #4]
 81184d8:	ea43 0102 	orr.w	r1, r3, r2
 81184dc:	9b06      	ldr	r3, [sp, #24]
 81184de:	430b      	orrs	r3, r1
 81184e0:	9b08      	ldr	r3, [sp, #32]
 81184e2:	d10d      	bne.n	8118500 <_dtoa_r+0xa80>
 81184e4:	2b39      	cmp	r3, #57	; 0x39
 81184e6:	d029      	beq.n	811853c <_dtoa_r+0xabc>
 81184e8:	f1b9 0f00 	cmp.w	r9, #0
 81184ec:	dd01      	ble.n	81184f2 <_dtoa_r+0xa72>
 81184ee:	9b04      	ldr	r3, [sp, #16]
 81184f0:	3331      	adds	r3, #49	; 0x31
 81184f2:	9a02      	ldr	r2, [sp, #8]
 81184f4:	7013      	strb	r3, [r2, #0]
 81184f6:	e774      	b.n	81183e2 <_dtoa_r+0x962>
 81184f8:	4638      	mov	r0, r7
 81184fa:	e7b9      	b.n	8118470 <_dtoa_r+0x9f0>
 81184fc:	2201      	movs	r2, #1
 81184fe:	e7e2      	b.n	81184c6 <_dtoa_r+0xa46>
 8118500:	f1b9 0f00 	cmp.w	r9, #0
 8118504:	db06      	blt.n	8118514 <_dtoa_r+0xa94>
 8118506:	9905      	ldr	r1, [sp, #20]
 8118508:	ea41 0909 	orr.w	r9, r1, r9
 811850c:	9906      	ldr	r1, [sp, #24]
 811850e:	ea59 0101 	orrs.w	r1, r9, r1
 8118512:	d120      	bne.n	8118556 <_dtoa_r+0xad6>
 8118514:	2a00      	cmp	r2, #0
 8118516:	ddec      	ble.n	81184f2 <_dtoa_r+0xa72>
 8118518:	4659      	mov	r1, fp
 811851a:	2201      	movs	r2, #1
 811851c:	4620      	mov	r0, r4
 811851e:	9301      	str	r3, [sp, #4]
 8118520:	f000 fab8 	bl	8118a94 <__lshift>
 8118524:	4631      	mov	r1, r6
 8118526:	4683      	mov	fp, r0
 8118528:	f000 fb20 	bl	8118b6c <__mcmp>
 811852c:	2800      	cmp	r0, #0
 811852e:	9b01      	ldr	r3, [sp, #4]
 8118530:	dc02      	bgt.n	8118538 <_dtoa_r+0xab8>
 8118532:	d1de      	bne.n	81184f2 <_dtoa_r+0xa72>
 8118534:	07da      	lsls	r2, r3, #31
 8118536:	d5dc      	bpl.n	81184f2 <_dtoa_r+0xa72>
 8118538:	2b39      	cmp	r3, #57	; 0x39
 811853a:	d1d8      	bne.n	81184ee <_dtoa_r+0xa6e>
 811853c:	9a02      	ldr	r2, [sp, #8]
 811853e:	2339      	movs	r3, #57	; 0x39
 8118540:	7013      	strb	r3, [r2, #0]
 8118542:	462b      	mov	r3, r5
 8118544:	461d      	mov	r5, r3
 8118546:	3b01      	subs	r3, #1
 8118548:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 811854c:	2a39      	cmp	r2, #57	; 0x39
 811854e:	d050      	beq.n	81185f2 <_dtoa_r+0xb72>
 8118550:	3201      	adds	r2, #1
 8118552:	701a      	strb	r2, [r3, #0]
 8118554:	e745      	b.n	81183e2 <_dtoa_r+0x962>
 8118556:	2a00      	cmp	r2, #0
 8118558:	dd03      	ble.n	8118562 <_dtoa_r+0xae2>
 811855a:	2b39      	cmp	r3, #57	; 0x39
 811855c:	d0ee      	beq.n	811853c <_dtoa_r+0xabc>
 811855e:	3301      	adds	r3, #1
 8118560:	e7c7      	b.n	81184f2 <_dtoa_r+0xa72>
 8118562:	9a01      	ldr	r2, [sp, #4]
 8118564:	9907      	ldr	r1, [sp, #28]
 8118566:	f802 3c01 	strb.w	r3, [r2, #-1]
 811856a:	428a      	cmp	r2, r1
 811856c:	d02a      	beq.n	81185c4 <_dtoa_r+0xb44>
 811856e:	4659      	mov	r1, fp
 8118570:	2300      	movs	r3, #0
 8118572:	220a      	movs	r2, #10
 8118574:	4620      	mov	r0, r4
 8118576:	f000 f8dd 	bl	8118734 <__multadd>
 811857a:	45b8      	cmp	r8, r7
 811857c:	4683      	mov	fp, r0
 811857e:	f04f 0300 	mov.w	r3, #0
 8118582:	f04f 020a 	mov.w	r2, #10
 8118586:	4641      	mov	r1, r8
 8118588:	4620      	mov	r0, r4
 811858a:	d107      	bne.n	811859c <_dtoa_r+0xb1c>
 811858c:	f000 f8d2 	bl	8118734 <__multadd>
 8118590:	4680      	mov	r8, r0
 8118592:	4607      	mov	r7, r0
 8118594:	9b01      	ldr	r3, [sp, #4]
 8118596:	3301      	adds	r3, #1
 8118598:	9301      	str	r3, [sp, #4]
 811859a:	e775      	b.n	8118488 <_dtoa_r+0xa08>
 811859c:	f000 f8ca 	bl	8118734 <__multadd>
 81185a0:	4639      	mov	r1, r7
 81185a2:	4680      	mov	r8, r0
 81185a4:	2300      	movs	r3, #0
 81185a6:	220a      	movs	r2, #10
 81185a8:	4620      	mov	r0, r4
 81185aa:	f000 f8c3 	bl	8118734 <__multadd>
 81185ae:	4607      	mov	r7, r0
 81185b0:	e7f0      	b.n	8118594 <_dtoa_r+0xb14>
 81185b2:	f1b9 0f00 	cmp.w	r9, #0
 81185b6:	9a00      	ldr	r2, [sp, #0]
 81185b8:	bfcc      	ite	gt
 81185ba:	464d      	movgt	r5, r9
 81185bc:	2501      	movle	r5, #1
 81185be:	4415      	add	r5, r2
 81185c0:	f04f 0800 	mov.w	r8, #0
 81185c4:	4659      	mov	r1, fp
 81185c6:	2201      	movs	r2, #1
 81185c8:	4620      	mov	r0, r4
 81185ca:	9301      	str	r3, [sp, #4]
 81185cc:	f000 fa62 	bl	8118a94 <__lshift>
 81185d0:	4631      	mov	r1, r6
 81185d2:	4683      	mov	fp, r0
 81185d4:	f000 faca 	bl	8118b6c <__mcmp>
 81185d8:	2800      	cmp	r0, #0
 81185da:	dcb2      	bgt.n	8118542 <_dtoa_r+0xac2>
 81185dc:	d102      	bne.n	81185e4 <_dtoa_r+0xb64>
 81185de:	9b01      	ldr	r3, [sp, #4]
 81185e0:	07db      	lsls	r3, r3, #31
 81185e2:	d4ae      	bmi.n	8118542 <_dtoa_r+0xac2>
 81185e4:	462b      	mov	r3, r5
 81185e6:	461d      	mov	r5, r3
 81185e8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 81185ec:	2a30      	cmp	r2, #48	; 0x30
 81185ee:	d0fa      	beq.n	81185e6 <_dtoa_r+0xb66>
 81185f0:	e6f7      	b.n	81183e2 <_dtoa_r+0x962>
 81185f2:	9a00      	ldr	r2, [sp, #0]
 81185f4:	429a      	cmp	r2, r3
 81185f6:	d1a5      	bne.n	8118544 <_dtoa_r+0xac4>
 81185f8:	f10a 0a01 	add.w	sl, sl, #1
 81185fc:	2331      	movs	r3, #49	; 0x31
 81185fe:	e779      	b.n	81184f4 <_dtoa_r+0xa74>
 8118600:	4b13      	ldr	r3, [pc, #76]	; (8118650 <_dtoa_r+0xbd0>)
 8118602:	f7ff baaf 	b.w	8117b64 <_dtoa_r+0xe4>
 8118606:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8118608:	2b00      	cmp	r3, #0
 811860a:	f47f aa86 	bne.w	8117b1a <_dtoa_r+0x9a>
 811860e:	4b11      	ldr	r3, [pc, #68]	; (8118654 <_dtoa_r+0xbd4>)
 8118610:	f7ff baa8 	b.w	8117b64 <_dtoa_r+0xe4>
 8118614:	f1b9 0f00 	cmp.w	r9, #0
 8118618:	dc03      	bgt.n	8118622 <_dtoa_r+0xba2>
 811861a:	9b05      	ldr	r3, [sp, #20]
 811861c:	2b02      	cmp	r3, #2
 811861e:	f73f aec9 	bgt.w	81183b4 <_dtoa_r+0x934>
 8118622:	9d00      	ldr	r5, [sp, #0]
 8118624:	4631      	mov	r1, r6
 8118626:	4658      	mov	r0, fp
 8118628:	f7ff f99c 	bl	8117964 <quorem>
 811862c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8118630:	f805 3b01 	strb.w	r3, [r5], #1
 8118634:	9a00      	ldr	r2, [sp, #0]
 8118636:	1aaa      	subs	r2, r5, r2
 8118638:	4591      	cmp	r9, r2
 811863a:	ddba      	ble.n	81185b2 <_dtoa_r+0xb32>
 811863c:	4659      	mov	r1, fp
 811863e:	2300      	movs	r3, #0
 8118640:	220a      	movs	r2, #10
 8118642:	4620      	mov	r0, r4
 8118644:	f000 f876 	bl	8118734 <__multadd>
 8118648:	4683      	mov	fp, r0
 811864a:	e7eb      	b.n	8118624 <_dtoa_r+0xba4>
 811864c:	08119c0b 	.word	0x08119c0b
 8118650:	08119b64 	.word	0x08119b64
 8118654:	08119b88 	.word	0x08119b88

08118658 <_localeconv_r>:
 8118658:	4800      	ldr	r0, [pc, #0]	; (811865c <_localeconv_r+0x4>)
 811865a:	4770      	bx	lr
 811865c:	10000168 	.word	0x10000168

08118660 <malloc>:
 8118660:	4b02      	ldr	r3, [pc, #8]	; (811866c <malloc+0xc>)
 8118662:	4601      	mov	r1, r0
 8118664:	6818      	ldr	r0, [r3, #0]
 8118666:	f000 bbe1 	b.w	8118e2c <_malloc_r>
 811866a:	bf00      	nop
 811866c:	10000014 	.word	0x10000014

08118670 <_Balloc>:
 8118670:	b570      	push	{r4, r5, r6, lr}
 8118672:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8118674:	4604      	mov	r4, r0
 8118676:	460d      	mov	r5, r1
 8118678:	b976      	cbnz	r6, 8118698 <_Balloc+0x28>
 811867a:	2010      	movs	r0, #16
 811867c:	f7ff fff0 	bl	8118660 <malloc>
 8118680:	4602      	mov	r2, r0
 8118682:	6260      	str	r0, [r4, #36]	; 0x24
 8118684:	b920      	cbnz	r0, 8118690 <_Balloc+0x20>
 8118686:	4b18      	ldr	r3, [pc, #96]	; (81186e8 <_Balloc+0x78>)
 8118688:	4818      	ldr	r0, [pc, #96]	; (81186ec <_Balloc+0x7c>)
 811868a:	2166      	movs	r1, #102	; 0x66
 811868c:	f000 fc38 	bl	8118f00 <__assert_func>
 8118690:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8118694:	6006      	str	r6, [r0, #0]
 8118696:	60c6      	str	r6, [r0, #12]
 8118698:	6a66      	ldr	r6, [r4, #36]	; 0x24
 811869a:	68f3      	ldr	r3, [r6, #12]
 811869c:	b183      	cbz	r3, 81186c0 <_Balloc+0x50>
 811869e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 81186a0:	68db      	ldr	r3, [r3, #12]
 81186a2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 81186a6:	b9b8      	cbnz	r0, 81186d8 <_Balloc+0x68>
 81186a8:	2101      	movs	r1, #1
 81186aa:	fa01 f605 	lsl.w	r6, r1, r5
 81186ae:	1d72      	adds	r2, r6, #5
 81186b0:	0092      	lsls	r2, r2, #2
 81186b2:	4620      	mov	r0, r4
 81186b4:	f000 fb5a 	bl	8118d6c <_calloc_r>
 81186b8:	b160      	cbz	r0, 81186d4 <_Balloc+0x64>
 81186ba:	e9c0 5601 	strd	r5, r6, [r0, #4]
 81186be:	e00e      	b.n	81186de <_Balloc+0x6e>
 81186c0:	2221      	movs	r2, #33	; 0x21
 81186c2:	2104      	movs	r1, #4
 81186c4:	4620      	mov	r0, r4
 81186c6:	f000 fb51 	bl	8118d6c <_calloc_r>
 81186ca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 81186cc:	60f0      	str	r0, [r6, #12]
 81186ce:	68db      	ldr	r3, [r3, #12]
 81186d0:	2b00      	cmp	r3, #0
 81186d2:	d1e4      	bne.n	811869e <_Balloc+0x2e>
 81186d4:	2000      	movs	r0, #0
 81186d6:	bd70      	pop	{r4, r5, r6, pc}
 81186d8:	6802      	ldr	r2, [r0, #0]
 81186da:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 81186de:	2300      	movs	r3, #0
 81186e0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 81186e4:	e7f7      	b.n	81186d6 <_Balloc+0x66>
 81186e6:	bf00      	nop
 81186e8:	08119b95 	.word	0x08119b95
 81186ec:	08119c1c 	.word	0x08119c1c

081186f0 <_Bfree>:
 81186f0:	b570      	push	{r4, r5, r6, lr}
 81186f2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 81186f4:	4605      	mov	r5, r0
 81186f6:	460c      	mov	r4, r1
 81186f8:	b976      	cbnz	r6, 8118718 <_Bfree+0x28>
 81186fa:	2010      	movs	r0, #16
 81186fc:	f7ff ffb0 	bl	8118660 <malloc>
 8118700:	4602      	mov	r2, r0
 8118702:	6268      	str	r0, [r5, #36]	; 0x24
 8118704:	b920      	cbnz	r0, 8118710 <_Bfree+0x20>
 8118706:	4b09      	ldr	r3, [pc, #36]	; (811872c <_Bfree+0x3c>)
 8118708:	4809      	ldr	r0, [pc, #36]	; (8118730 <_Bfree+0x40>)
 811870a:	218a      	movs	r1, #138	; 0x8a
 811870c:	f000 fbf8 	bl	8118f00 <__assert_func>
 8118710:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8118714:	6006      	str	r6, [r0, #0]
 8118716:	60c6      	str	r6, [r0, #12]
 8118718:	b13c      	cbz	r4, 811872a <_Bfree+0x3a>
 811871a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 811871c:	6862      	ldr	r2, [r4, #4]
 811871e:	68db      	ldr	r3, [r3, #12]
 8118720:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8118724:	6021      	str	r1, [r4, #0]
 8118726:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 811872a:	bd70      	pop	{r4, r5, r6, pc}
 811872c:	08119b95 	.word	0x08119b95
 8118730:	08119c1c 	.word	0x08119c1c

08118734 <__multadd>:
 8118734:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8118738:	690e      	ldr	r6, [r1, #16]
 811873a:	4607      	mov	r7, r0
 811873c:	4698      	mov	r8, r3
 811873e:	460c      	mov	r4, r1
 8118740:	f101 0014 	add.w	r0, r1, #20
 8118744:	2300      	movs	r3, #0
 8118746:	6805      	ldr	r5, [r0, #0]
 8118748:	b2a9      	uxth	r1, r5
 811874a:	fb02 8101 	mla	r1, r2, r1, r8
 811874e:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8118752:	0c2d      	lsrs	r5, r5, #16
 8118754:	fb02 c505 	mla	r5, r2, r5, ip
 8118758:	b289      	uxth	r1, r1
 811875a:	3301      	adds	r3, #1
 811875c:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8118760:	429e      	cmp	r6, r3
 8118762:	f840 1b04 	str.w	r1, [r0], #4
 8118766:	ea4f 4815 	mov.w	r8, r5, lsr #16
 811876a:	dcec      	bgt.n	8118746 <__multadd+0x12>
 811876c:	f1b8 0f00 	cmp.w	r8, #0
 8118770:	d022      	beq.n	81187b8 <__multadd+0x84>
 8118772:	68a3      	ldr	r3, [r4, #8]
 8118774:	42b3      	cmp	r3, r6
 8118776:	dc19      	bgt.n	81187ac <__multadd+0x78>
 8118778:	6861      	ldr	r1, [r4, #4]
 811877a:	4638      	mov	r0, r7
 811877c:	3101      	adds	r1, #1
 811877e:	f7ff ff77 	bl	8118670 <_Balloc>
 8118782:	4605      	mov	r5, r0
 8118784:	b928      	cbnz	r0, 8118792 <__multadd+0x5e>
 8118786:	4602      	mov	r2, r0
 8118788:	4b0d      	ldr	r3, [pc, #52]	; (81187c0 <__multadd+0x8c>)
 811878a:	480e      	ldr	r0, [pc, #56]	; (81187c4 <__multadd+0x90>)
 811878c:	21b5      	movs	r1, #181	; 0xb5
 811878e:	f000 fbb7 	bl	8118f00 <__assert_func>
 8118792:	6922      	ldr	r2, [r4, #16]
 8118794:	3202      	adds	r2, #2
 8118796:	f104 010c 	add.w	r1, r4, #12
 811879a:	0092      	lsls	r2, r2, #2
 811879c:	300c      	adds	r0, #12
 811879e:	f7fe fc61 	bl	8117064 <memcpy>
 81187a2:	4621      	mov	r1, r4
 81187a4:	4638      	mov	r0, r7
 81187a6:	f7ff ffa3 	bl	81186f0 <_Bfree>
 81187aa:	462c      	mov	r4, r5
 81187ac:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 81187b0:	3601      	adds	r6, #1
 81187b2:	f8c3 8014 	str.w	r8, [r3, #20]
 81187b6:	6126      	str	r6, [r4, #16]
 81187b8:	4620      	mov	r0, r4
 81187ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 81187be:	bf00      	nop
 81187c0:	08119c0b 	.word	0x08119c0b
 81187c4:	08119c1c 	.word	0x08119c1c

081187c8 <__hi0bits>:
 81187c8:	0c03      	lsrs	r3, r0, #16
 81187ca:	041b      	lsls	r3, r3, #16
 81187cc:	b9d3      	cbnz	r3, 8118804 <__hi0bits+0x3c>
 81187ce:	0400      	lsls	r0, r0, #16
 81187d0:	2310      	movs	r3, #16
 81187d2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 81187d6:	bf04      	itt	eq
 81187d8:	0200      	lsleq	r0, r0, #8
 81187da:	3308      	addeq	r3, #8
 81187dc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 81187e0:	bf04      	itt	eq
 81187e2:	0100      	lsleq	r0, r0, #4
 81187e4:	3304      	addeq	r3, #4
 81187e6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 81187ea:	bf04      	itt	eq
 81187ec:	0080      	lsleq	r0, r0, #2
 81187ee:	3302      	addeq	r3, #2
 81187f0:	2800      	cmp	r0, #0
 81187f2:	db05      	blt.n	8118800 <__hi0bits+0x38>
 81187f4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 81187f8:	f103 0301 	add.w	r3, r3, #1
 81187fc:	bf08      	it	eq
 81187fe:	2320      	moveq	r3, #32
 8118800:	4618      	mov	r0, r3
 8118802:	4770      	bx	lr
 8118804:	2300      	movs	r3, #0
 8118806:	e7e4      	b.n	81187d2 <__hi0bits+0xa>

08118808 <__lo0bits>:
 8118808:	6803      	ldr	r3, [r0, #0]
 811880a:	f013 0207 	ands.w	r2, r3, #7
 811880e:	4601      	mov	r1, r0
 8118810:	d00b      	beq.n	811882a <__lo0bits+0x22>
 8118812:	07da      	lsls	r2, r3, #31
 8118814:	d424      	bmi.n	8118860 <__lo0bits+0x58>
 8118816:	0798      	lsls	r0, r3, #30
 8118818:	bf49      	itett	mi
 811881a:	085b      	lsrmi	r3, r3, #1
 811881c:	089b      	lsrpl	r3, r3, #2
 811881e:	2001      	movmi	r0, #1
 8118820:	600b      	strmi	r3, [r1, #0]
 8118822:	bf5c      	itt	pl
 8118824:	600b      	strpl	r3, [r1, #0]
 8118826:	2002      	movpl	r0, #2
 8118828:	4770      	bx	lr
 811882a:	b298      	uxth	r0, r3
 811882c:	b9b0      	cbnz	r0, 811885c <__lo0bits+0x54>
 811882e:	0c1b      	lsrs	r3, r3, #16
 8118830:	2010      	movs	r0, #16
 8118832:	f013 0fff 	tst.w	r3, #255	; 0xff
 8118836:	bf04      	itt	eq
 8118838:	0a1b      	lsreq	r3, r3, #8
 811883a:	3008      	addeq	r0, #8
 811883c:	071a      	lsls	r2, r3, #28
 811883e:	bf04      	itt	eq
 8118840:	091b      	lsreq	r3, r3, #4
 8118842:	3004      	addeq	r0, #4
 8118844:	079a      	lsls	r2, r3, #30
 8118846:	bf04      	itt	eq
 8118848:	089b      	lsreq	r3, r3, #2
 811884a:	3002      	addeq	r0, #2
 811884c:	07da      	lsls	r2, r3, #31
 811884e:	d403      	bmi.n	8118858 <__lo0bits+0x50>
 8118850:	085b      	lsrs	r3, r3, #1
 8118852:	f100 0001 	add.w	r0, r0, #1
 8118856:	d005      	beq.n	8118864 <__lo0bits+0x5c>
 8118858:	600b      	str	r3, [r1, #0]
 811885a:	4770      	bx	lr
 811885c:	4610      	mov	r0, r2
 811885e:	e7e8      	b.n	8118832 <__lo0bits+0x2a>
 8118860:	2000      	movs	r0, #0
 8118862:	4770      	bx	lr
 8118864:	2020      	movs	r0, #32
 8118866:	4770      	bx	lr

08118868 <__i2b>:
 8118868:	b510      	push	{r4, lr}
 811886a:	460c      	mov	r4, r1
 811886c:	2101      	movs	r1, #1
 811886e:	f7ff feff 	bl	8118670 <_Balloc>
 8118872:	4602      	mov	r2, r0
 8118874:	b928      	cbnz	r0, 8118882 <__i2b+0x1a>
 8118876:	4b05      	ldr	r3, [pc, #20]	; (811888c <__i2b+0x24>)
 8118878:	4805      	ldr	r0, [pc, #20]	; (8118890 <__i2b+0x28>)
 811887a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 811887e:	f000 fb3f 	bl	8118f00 <__assert_func>
 8118882:	2301      	movs	r3, #1
 8118884:	6144      	str	r4, [r0, #20]
 8118886:	6103      	str	r3, [r0, #16]
 8118888:	bd10      	pop	{r4, pc}
 811888a:	bf00      	nop
 811888c:	08119c0b 	.word	0x08119c0b
 8118890:	08119c1c 	.word	0x08119c1c

08118894 <__multiply>:
 8118894:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8118898:	4614      	mov	r4, r2
 811889a:	690a      	ldr	r2, [r1, #16]
 811889c:	6923      	ldr	r3, [r4, #16]
 811889e:	429a      	cmp	r2, r3
 81188a0:	bfb8      	it	lt
 81188a2:	460b      	movlt	r3, r1
 81188a4:	460d      	mov	r5, r1
 81188a6:	bfbc      	itt	lt
 81188a8:	4625      	movlt	r5, r4
 81188aa:	461c      	movlt	r4, r3
 81188ac:	f8d5 a010 	ldr.w	sl, [r5, #16]
 81188b0:	f8d4 9010 	ldr.w	r9, [r4, #16]
 81188b4:	68ab      	ldr	r3, [r5, #8]
 81188b6:	6869      	ldr	r1, [r5, #4]
 81188b8:	eb0a 0709 	add.w	r7, sl, r9
 81188bc:	42bb      	cmp	r3, r7
 81188be:	b085      	sub	sp, #20
 81188c0:	bfb8      	it	lt
 81188c2:	3101      	addlt	r1, #1
 81188c4:	f7ff fed4 	bl	8118670 <_Balloc>
 81188c8:	b930      	cbnz	r0, 81188d8 <__multiply+0x44>
 81188ca:	4602      	mov	r2, r0
 81188cc:	4b42      	ldr	r3, [pc, #264]	; (81189d8 <__multiply+0x144>)
 81188ce:	4843      	ldr	r0, [pc, #268]	; (81189dc <__multiply+0x148>)
 81188d0:	f240 115d 	movw	r1, #349	; 0x15d
 81188d4:	f000 fb14 	bl	8118f00 <__assert_func>
 81188d8:	f100 0614 	add.w	r6, r0, #20
 81188dc:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 81188e0:	4633      	mov	r3, r6
 81188e2:	2200      	movs	r2, #0
 81188e4:	4543      	cmp	r3, r8
 81188e6:	d31e      	bcc.n	8118926 <__multiply+0x92>
 81188e8:	f105 0c14 	add.w	ip, r5, #20
 81188ec:	f104 0314 	add.w	r3, r4, #20
 81188f0:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 81188f4:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 81188f8:	9202      	str	r2, [sp, #8]
 81188fa:	ebac 0205 	sub.w	r2, ip, r5
 81188fe:	3a15      	subs	r2, #21
 8118900:	f022 0203 	bic.w	r2, r2, #3
 8118904:	3204      	adds	r2, #4
 8118906:	f105 0115 	add.w	r1, r5, #21
 811890a:	458c      	cmp	ip, r1
 811890c:	bf38      	it	cc
 811890e:	2204      	movcc	r2, #4
 8118910:	9201      	str	r2, [sp, #4]
 8118912:	9a02      	ldr	r2, [sp, #8]
 8118914:	9303      	str	r3, [sp, #12]
 8118916:	429a      	cmp	r2, r3
 8118918:	d808      	bhi.n	811892c <__multiply+0x98>
 811891a:	2f00      	cmp	r7, #0
 811891c:	dc55      	bgt.n	81189ca <__multiply+0x136>
 811891e:	6107      	str	r7, [r0, #16]
 8118920:	b005      	add	sp, #20
 8118922:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8118926:	f843 2b04 	str.w	r2, [r3], #4
 811892a:	e7db      	b.n	81188e4 <__multiply+0x50>
 811892c:	f8b3 a000 	ldrh.w	sl, [r3]
 8118930:	f1ba 0f00 	cmp.w	sl, #0
 8118934:	d020      	beq.n	8118978 <__multiply+0xe4>
 8118936:	f105 0e14 	add.w	lr, r5, #20
 811893a:	46b1      	mov	r9, r6
 811893c:	2200      	movs	r2, #0
 811893e:	f85e 4b04 	ldr.w	r4, [lr], #4
 8118942:	f8d9 b000 	ldr.w	fp, [r9]
 8118946:	b2a1      	uxth	r1, r4
 8118948:	fa1f fb8b 	uxth.w	fp, fp
 811894c:	fb0a b101 	mla	r1, sl, r1, fp
 8118950:	4411      	add	r1, r2
 8118952:	f8d9 2000 	ldr.w	r2, [r9]
 8118956:	0c24      	lsrs	r4, r4, #16
 8118958:	0c12      	lsrs	r2, r2, #16
 811895a:	fb0a 2404 	mla	r4, sl, r4, r2
 811895e:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8118962:	b289      	uxth	r1, r1
 8118964:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8118968:	45f4      	cmp	ip, lr
 811896a:	f849 1b04 	str.w	r1, [r9], #4
 811896e:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8118972:	d8e4      	bhi.n	811893e <__multiply+0xaa>
 8118974:	9901      	ldr	r1, [sp, #4]
 8118976:	5072      	str	r2, [r6, r1]
 8118978:	9a03      	ldr	r2, [sp, #12]
 811897a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 811897e:	3304      	adds	r3, #4
 8118980:	f1b9 0f00 	cmp.w	r9, #0
 8118984:	d01f      	beq.n	81189c6 <__multiply+0x132>
 8118986:	6834      	ldr	r4, [r6, #0]
 8118988:	f105 0114 	add.w	r1, r5, #20
 811898c:	46b6      	mov	lr, r6
 811898e:	f04f 0a00 	mov.w	sl, #0
 8118992:	880a      	ldrh	r2, [r1, #0]
 8118994:	f8be b002 	ldrh.w	fp, [lr, #2]
 8118998:	fb09 b202 	mla	r2, r9, r2, fp
 811899c:	4492      	add	sl, r2
 811899e:	b2a4      	uxth	r4, r4
 81189a0:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 81189a4:	f84e 4b04 	str.w	r4, [lr], #4
 81189a8:	f851 4b04 	ldr.w	r4, [r1], #4
 81189ac:	f8be 2000 	ldrh.w	r2, [lr]
 81189b0:	0c24      	lsrs	r4, r4, #16
 81189b2:	fb09 2404 	mla	r4, r9, r4, r2
 81189b6:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 81189ba:	458c      	cmp	ip, r1
 81189bc:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 81189c0:	d8e7      	bhi.n	8118992 <__multiply+0xfe>
 81189c2:	9a01      	ldr	r2, [sp, #4]
 81189c4:	50b4      	str	r4, [r6, r2]
 81189c6:	3604      	adds	r6, #4
 81189c8:	e7a3      	b.n	8118912 <__multiply+0x7e>
 81189ca:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 81189ce:	2b00      	cmp	r3, #0
 81189d0:	d1a5      	bne.n	811891e <__multiply+0x8a>
 81189d2:	3f01      	subs	r7, #1
 81189d4:	e7a1      	b.n	811891a <__multiply+0x86>
 81189d6:	bf00      	nop
 81189d8:	08119c0b 	.word	0x08119c0b
 81189dc:	08119c1c 	.word	0x08119c1c

081189e0 <__pow5mult>:
 81189e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 81189e4:	4615      	mov	r5, r2
 81189e6:	f012 0203 	ands.w	r2, r2, #3
 81189ea:	4606      	mov	r6, r0
 81189ec:	460f      	mov	r7, r1
 81189ee:	d007      	beq.n	8118a00 <__pow5mult+0x20>
 81189f0:	4c25      	ldr	r4, [pc, #148]	; (8118a88 <__pow5mult+0xa8>)
 81189f2:	3a01      	subs	r2, #1
 81189f4:	2300      	movs	r3, #0
 81189f6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 81189fa:	f7ff fe9b 	bl	8118734 <__multadd>
 81189fe:	4607      	mov	r7, r0
 8118a00:	10ad      	asrs	r5, r5, #2
 8118a02:	d03d      	beq.n	8118a80 <__pow5mult+0xa0>
 8118a04:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8118a06:	b97c      	cbnz	r4, 8118a28 <__pow5mult+0x48>
 8118a08:	2010      	movs	r0, #16
 8118a0a:	f7ff fe29 	bl	8118660 <malloc>
 8118a0e:	4602      	mov	r2, r0
 8118a10:	6270      	str	r0, [r6, #36]	; 0x24
 8118a12:	b928      	cbnz	r0, 8118a20 <__pow5mult+0x40>
 8118a14:	4b1d      	ldr	r3, [pc, #116]	; (8118a8c <__pow5mult+0xac>)
 8118a16:	481e      	ldr	r0, [pc, #120]	; (8118a90 <__pow5mult+0xb0>)
 8118a18:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8118a1c:	f000 fa70 	bl	8118f00 <__assert_func>
 8118a20:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8118a24:	6004      	str	r4, [r0, #0]
 8118a26:	60c4      	str	r4, [r0, #12]
 8118a28:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8118a2c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8118a30:	b94c      	cbnz	r4, 8118a46 <__pow5mult+0x66>
 8118a32:	f240 2171 	movw	r1, #625	; 0x271
 8118a36:	4630      	mov	r0, r6
 8118a38:	f7ff ff16 	bl	8118868 <__i2b>
 8118a3c:	2300      	movs	r3, #0
 8118a3e:	f8c8 0008 	str.w	r0, [r8, #8]
 8118a42:	4604      	mov	r4, r0
 8118a44:	6003      	str	r3, [r0, #0]
 8118a46:	f04f 0900 	mov.w	r9, #0
 8118a4a:	07eb      	lsls	r3, r5, #31
 8118a4c:	d50a      	bpl.n	8118a64 <__pow5mult+0x84>
 8118a4e:	4639      	mov	r1, r7
 8118a50:	4622      	mov	r2, r4
 8118a52:	4630      	mov	r0, r6
 8118a54:	f7ff ff1e 	bl	8118894 <__multiply>
 8118a58:	4639      	mov	r1, r7
 8118a5a:	4680      	mov	r8, r0
 8118a5c:	4630      	mov	r0, r6
 8118a5e:	f7ff fe47 	bl	81186f0 <_Bfree>
 8118a62:	4647      	mov	r7, r8
 8118a64:	106d      	asrs	r5, r5, #1
 8118a66:	d00b      	beq.n	8118a80 <__pow5mult+0xa0>
 8118a68:	6820      	ldr	r0, [r4, #0]
 8118a6a:	b938      	cbnz	r0, 8118a7c <__pow5mult+0x9c>
 8118a6c:	4622      	mov	r2, r4
 8118a6e:	4621      	mov	r1, r4
 8118a70:	4630      	mov	r0, r6
 8118a72:	f7ff ff0f 	bl	8118894 <__multiply>
 8118a76:	6020      	str	r0, [r4, #0]
 8118a78:	f8c0 9000 	str.w	r9, [r0]
 8118a7c:	4604      	mov	r4, r0
 8118a7e:	e7e4      	b.n	8118a4a <__pow5mult+0x6a>
 8118a80:	4638      	mov	r0, r7
 8118a82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8118a86:	bf00      	nop
 8118a88:	08119d70 	.word	0x08119d70
 8118a8c:	08119b95 	.word	0x08119b95
 8118a90:	08119c1c 	.word	0x08119c1c

08118a94 <__lshift>:
 8118a94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8118a98:	460c      	mov	r4, r1
 8118a9a:	6849      	ldr	r1, [r1, #4]
 8118a9c:	6923      	ldr	r3, [r4, #16]
 8118a9e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8118aa2:	68a3      	ldr	r3, [r4, #8]
 8118aa4:	4607      	mov	r7, r0
 8118aa6:	4691      	mov	r9, r2
 8118aa8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8118aac:	f108 0601 	add.w	r6, r8, #1
 8118ab0:	42b3      	cmp	r3, r6
 8118ab2:	db0b      	blt.n	8118acc <__lshift+0x38>
 8118ab4:	4638      	mov	r0, r7
 8118ab6:	f7ff fddb 	bl	8118670 <_Balloc>
 8118aba:	4605      	mov	r5, r0
 8118abc:	b948      	cbnz	r0, 8118ad2 <__lshift+0x3e>
 8118abe:	4602      	mov	r2, r0
 8118ac0:	4b28      	ldr	r3, [pc, #160]	; (8118b64 <__lshift+0xd0>)
 8118ac2:	4829      	ldr	r0, [pc, #164]	; (8118b68 <__lshift+0xd4>)
 8118ac4:	f240 11d9 	movw	r1, #473	; 0x1d9
 8118ac8:	f000 fa1a 	bl	8118f00 <__assert_func>
 8118acc:	3101      	adds	r1, #1
 8118ace:	005b      	lsls	r3, r3, #1
 8118ad0:	e7ee      	b.n	8118ab0 <__lshift+0x1c>
 8118ad2:	2300      	movs	r3, #0
 8118ad4:	f100 0114 	add.w	r1, r0, #20
 8118ad8:	f100 0210 	add.w	r2, r0, #16
 8118adc:	4618      	mov	r0, r3
 8118ade:	4553      	cmp	r3, sl
 8118ae0:	db33      	blt.n	8118b4a <__lshift+0xb6>
 8118ae2:	6920      	ldr	r0, [r4, #16]
 8118ae4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8118ae8:	f104 0314 	add.w	r3, r4, #20
 8118aec:	f019 091f 	ands.w	r9, r9, #31
 8118af0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8118af4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8118af8:	d02b      	beq.n	8118b52 <__lshift+0xbe>
 8118afa:	f1c9 0e20 	rsb	lr, r9, #32
 8118afe:	468a      	mov	sl, r1
 8118b00:	2200      	movs	r2, #0
 8118b02:	6818      	ldr	r0, [r3, #0]
 8118b04:	fa00 f009 	lsl.w	r0, r0, r9
 8118b08:	4302      	orrs	r2, r0
 8118b0a:	f84a 2b04 	str.w	r2, [sl], #4
 8118b0e:	f853 2b04 	ldr.w	r2, [r3], #4
 8118b12:	459c      	cmp	ip, r3
 8118b14:	fa22 f20e 	lsr.w	r2, r2, lr
 8118b18:	d8f3      	bhi.n	8118b02 <__lshift+0x6e>
 8118b1a:	ebac 0304 	sub.w	r3, ip, r4
 8118b1e:	3b15      	subs	r3, #21
 8118b20:	f023 0303 	bic.w	r3, r3, #3
 8118b24:	3304      	adds	r3, #4
 8118b26:	f104 0015 	add.w	r0, r4, #21
 8118b2a:	4584      	cmp	ip, r0
 8118b2c:	bf38      	it	cc
 8118b2e:	2304      	movcc	r3, #4
 8118b30:	50ca      	str	r2, [r1, r3]
 8118b32:	b10a      	cbz	r2, 8118b38 <__lshift+0xa4>
 8118b34:	f108 0602 	add.w	r6, r8, #2
 8118b38:	3e01      	subs	r6, #1
 8118b3a:	4638      	mov	r0, r7
 8118b3c:	612e      	str	r6, [r5, #16]
 8118b3e:	4621      	mov	r1, r4
 8118b40:	f7ff fdd6 	bl	81186f0 <_Bfree>
 8118b44:	4628      	mov	r0, r5
 8118b46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8118b4a:	f842 0f04 	str.w	r0, [r2, #4]!
 8118b4e:	3301      	adds	r3, #1
 8118b50:	e7c5      	b.n	8118ade <__lshift+0x4a>
 8118b52:	3904      	subs	r1, #4
 8118b54:	f853 2b04 	ldr.w	r2, [r3], #4
 8118b58:	f841 2f04 	str.w	r2, [r1, #4]!
 8118b5c:	459c      	cmp	ip, r3
 8118b5e:	d8f9      	bhi.n	8118b54 <__lshift+0xc0>
 8118b60:	e7ea      	b.n	8118b38 <__lshift+0xa4>
 8118b62:	bf00      	nop
 8118b64:	08119c0b 	.word	0x08119c0b
 8118b68:	08119c1c 	.word	0x08119c1c

08118b6c <__mcmp>:
 8118b6c:	b530      	push	{r4, r5, lr}
 8118b6e:	6902      	ldr	r2, [r0, #16]
 8118b70:	690c      	ldr	r4, [r1, #16]
 8118b72:	1b12      	subs	r2, r2, r4
 8118b74:	d10e      	bne.n	8118b94 <__mcmp+0x28>
 8118b76:	f100 0314 	add.w	r3, r0, #20
 8118b7a:	3114      	adds	r1, #20
 8118b7c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8118b80:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8118b84:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8118b88:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8118b8c:	42a5      	cmp	r5, r4
 8118b8e:	d003      	beq.n	8118b98 <__mcmp+0x2c>
 8118b90:	d305      	bcc.n	8118b9e <__mcmp+0x32>
 8118b92:	2201      	movs	r2, #1
 8118b94:	4610      	mov	r0, r2
 8118b96:	bd30      	pop	{r4, r5, pc}
 8118b98:	4283      	cmp	r3, r0
 8118b9a:	d3f3      	bcc.n	8118b84 <__mcmp+0x18>
 8118b9c:	e7fa      	b.n	8118b94 <__mcmp+0x28>
 8118b9e:	f04f 32ff 	mov.w	r2, #4294967295
 8118ba2:	e7f7      	b.n	8118b94 <__mcmp+0x28>

08118ba4 <__mdiff>:
 8118ba4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8118ba8:	460c      	mov	r4, r1
 8118baa:	4606      	mov	r6, r0
 8118bac:	4611      	mov	r1, r2
 8118bae:	4620      	mov	r0, r4
 8118bb0:	4617      	mov	r7, r2
 8118bb2:	f7ff ffdb 	bl	8118b6c <__mcmp>
 8118bb6:	1e05      	subs	r5, r0, #0
 8118bb8:	d110      	bne.n	8118bdc <__mdiff+0x38>
 8118bba:	4629      	mov	r1, r5
 8118bbc:	4630      	mov	r0, r6
 8118bbe:	f7ff fd57 	bl	8118670 <_Balloc>
 8118bc2:	b930      	cbnz	r0, 8118bd2 <__mdiff+0x2e>
 8118bc4:	4b39      	ldr	r3, [pc, #228]	; (8118cac <__mdiff+0x108>)
 8118bc6:	4602      	mov	r2, r0
 8118bc8:	f240 2132 	movw	r1, #562	; 0x232
 8118bcc:	4838      	ldr	r0, [pc, #224]	; (8118cb0 <__mdiff+0x10c>)
 8118bce:	f000 f997 	bl	8118f00 <__assert_func>
 8118bd2:	2301      	movs	r3, #1
 8118bd4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8118bd8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8118bdc:	bfa4      	itt	ge
 8118bde:	463b      	movge	r3, r7
 8118be0:	4627      	movge	r7, r4
 8118be2:	4630      	mov	r0, r6
 8118be4:	6879      	ldr	r1, [r7, #4]
 8118be6:	bfa6      	itte	ge
 8118be8:	461c      	movge	r4, r3
 8118bea:	2500      	movge	r5, #0
 8118bec:	2501      	movlt	r5, #1
 8118bee:	f7ff fd3f 	bl	8118670 <_Balloc>
 8118bf2:	b920      	cbnz	r0, 8118bfe <__mdiff+0x5a>
 8118bf4:	4b2d      	ldr	r3, [pc, #180]	; (8118cac <__mdiff+0x108>)
 8118bf6:	4602      	mov	r2, r0
 8118bf8:	f44f 7110 	mov.w	r1, #576	; 0x240
 8118bfc:	e7e6      	b.n	8118bcc <__mdiff+0x28>
 8118bfe:	693e      	ldr	r6, [r7, #16]
 8118c00:	60c5      	str	r5, [r0, #12]
 8118c02:	6925      	ldr	r5, [r4, #16]
 8118c04:	f107 0114 	add.w	r1, r7, #20
 8118c08:	f104 0914 	add.w	r9, r4, #20
 8118c0c:	f100 0e14 	add.w	lr, r0, #20
 8118c10:	f107 0210 	add.w	r2, r7, #16
 8118c14:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8118c18:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8118c1c:	46f2      	mov	sl, lr
 8118c1e:	2700      	movs	r7, #0
 8118c20:	f859 3b04 	ldr.w	r3, [r9], #4
 8118c24:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8118c28:	fa1f f883 	uxth.w	r8, r3
 8118c2c:	fa17 f78b 	uxtah	r7, r7, fp
 8118c30:	0c1b      	lsrs	r3, r3, #16
 8118c32:	eba7 0808 	sub.w	r8, r7, r8
 8118c36:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8118c3a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8118c3e:	fa1f f888 	uxth.w	r8, r8
 8118c42:	141f      	asrs	r7, r3, #16
 8118c44:	454d      	cmp	r5, r9
 8118c46:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8118c4a:	f84a 3b04 	str.w	r3, [sl], #4
 8118c4e:	d8e7      	bhi.n	8118c20 <__mdiff+0x7c>
 8118c50:	1b2b      	subs	r3, r5, r4
 8118c52:	3b15      	subs	r3, #21
 8118c54:	f023 0303 	bic.w	r3, r3, #3
 8118c58:	3304      	adds	r3, #4
 8118c5a:	3415      	adds	r4, #21
 8118c5c:	42a5      	cmp	r5, r4
 8118c5e:	bf38      	it	cc
 8118c60:	2304      	movcc	r3, #4
 8118c62:	4419      	add	r1, r3
 8118c64:	4473      	add	r3, lr
 8118c66:	469e      	mov	lr, r3
 8118c68:	460d      	mov	r5, r1
 8118c6a:	4565      	cmp	r5, ip
 8118c6c:	d30e      	bcc.n	8118c8c <__mdiff+0xe8>
 8118c6e:	f10c 0203 	add.w	r2, ip, #3
 8118c72:	1a52      	subs	r2, r2, r1
 8118c74:	f022 0203 	bic.w	r2, r2, #3
 8118c78:	3903      	subs	r1, #3
 8118c7a:	458c      	cmp	ip, r1
 8118c7c:	bf38      	it	cc
 8118c7e:	2200      	movcc	r2, #0
 8118c80:	441a      	add	r2, r3
 8118c82:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8118c86:	b17b      	cbz	r3, 8118ca8 <__mdiff+0x104>
 8118c88:	6106      	str	r6, [r0, #16]
 8118c8a:	e7a5      	b.n	8118bd8 <__mdiff+0x34>
 8118c8c:	f855 8b04 	ldr.w	r8, [r5], #4
 8118c90:	fa17 f488 	uxtah	r4, r7, r8
 8118c94:	1422      	asrs	r2, r4, #16
 8118c96:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8118c9a:	b2a4      	uxth	r4, r4
 8118c9c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8118ca0:	f84e 4b04 	str.w	r4, [lr], #4
 8118ca4:	1417      	asrs	r7, r2, #16
 8118ca6:	e7e0      	b.n	8118c6a <__mdiff+0xc6>
 8118ca8:	3e01      	subs	r6, #1
 8118caa:	e7ea      	b.n	8118c82 <__mdiff+0xde>
 8118cac:	08119c0b 	.word	0x08119c0b
 8118cb0:	08119c1c 	.word	0x08119c1c

08118cb4 <__d2b>:
 8118cb4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8118cb8:	4689      	mov	r9, r1
 8118cba:	2101      	movs	r1, #1
 8118cbc:	ec57 6b10 	vmov	r6, r7, d0
 8118cc0:	4690      	mov	r8, r2
 8118cc2:	f7ff fcd5 	bl	8118670 <_Balloc>
 8118cc6:	4604      	mov	r4, r0
 8118cc8:	b930      	cbnz	r0, 8118cd8 <__d2b+0x24>
 8118cca:	4602      	mov	r2, r0
 8118ccc:	4b25      	ldr	r3, [pc, #148]	; (8118d64 <__d2b+0xb0>)
 8118cce:	4826      	ldr	r0, [pc, #152]	; (8118d68 <__d2b+0xb4>)
 8118cd0:	f240 310a 	movw	r1, #778	; 0x30a
 8118cd4:	f000 f914 	bl	8118f00 <__assert_func>
 8118cd8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8118cdc:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8118ce0:	bb35      	cbnz	r5, 8118d30 <__d2b+0x7c>
 8118ce2:	2e00      	cmp	r6, #0
 8118ce4:	9301      	str	r3, [sp, #4]
 8118ce6:	d028      	beq.n	8118d3a <__d2b+0x86>
 8118ce8:	4668      	mov	r0, sp
 8118cea:	9600      	str	r6, [sp, #0]
 8118cec:	f7ff fd8c 	bl	8118808 <__lo0bits>
 8118cf0:	9900      	ldr	r1, [sp, #0]
 8118cf2:	b300      	cbz	r0, 8118d36 <__d2b+0x82>
 8118cf4:	9a01      	ldr	r2, [sp, #4]
 8118cf6:	f1c0 0320 	rsb	r3, r0, #32
 8118cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8118cfe:	430b      	orrs	r3, r1
 8118d00:	40c2      	lsrs	r2, r0
 8118d02:	6163      	str	r3, [r4, #20]
 8118d04:	9201      	str	r2, [sp, #4]
 8118d06:	9b01      	ldr	r3, [sp, #4]
 8118d08:	61a3      	str	r3, [r4, #24]
 8118d0a:	2b00      	cmp	r3, #0
 8118d0c:	bf14      	ite	ne
 8118d0e:	2202      	movne	r2, #2
 8118d10:	2201      	moveq	r2, #1
 8118d12:	6122      	str	r2, [r4, #16]
 8118d14:	b1d5      	cbz	r5, 8118d4c <__d2b+0x98>
 8118d16:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8118d1a:	4405      	add	r5, r0
 8118d1c:	f8c9 5000 	str.w	r5, [r9]
 8118d20:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8118d24:	f8c8 0000 	str.w	r0, [r8]
 8118d28:	4620      	mov	r0, r4
 8118d2a:	b003      	add	sp, #12
 8118d2c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8118d30:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8118d34:	e7d5      	b.n	8118ce2 <__d2b+0x2e>
 8118d36:	6161      	str	r1, [r4, #20]
 8118d38:	e7e5      	b.n	8118d06 <__d2b+0x52>
 8118d3a:	a801      	add	r0, sp, #4
 8118d3c:	f7ff fd64 	bl	8118808 <__lo0bits>
 8118d40:	9b01      	ldr	r3, [sp, #4]
 8118d42:	6163      	str	r3, [r4, #20]
 8118d44:	2201      	movs	r2, #1
 8118d46:	6122      	str	r2, [r4, #16]
 8118d48:	3020      	adds	r0, #32
 8118d4a:	e7e3      	b.n	8118d14 <__d2b+0x60>
 8118d4c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8118d50:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8118d54:	f8c9 0000 	str.w	r0, [r9]
 8118d58:	6918      	ldr	r0, [r3, #16]
 8118d5a:	f7ff fd35 	bl	81187c8 <__hi0bits>
 8118d5e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8118d62:	e7df      	b.n	8118d24 <__d2b+0x70>
 8118d64:	08119c0b 	.word	0x08119c0b
 8118d68:	08119c1c 	.word	0x08119c1c

08118d6c <_calloc_r>:
 8118d6c:	b513      	push	{r0, r1, r4, lr}
 8118d6e:	434a      	muls	r2, r1
 8118d70:	4611      	mov	r1, r2
 8118d72:	9201      	str	r2, [sp, #4]
 8118d74:	f000 f85a 	bl	8118e2c <_malloc_r>
 8118d78:	4604      	mov	r4, r0
 8118d7a:	b118      	cbz	r0, 8118d84 <_calloc_r+0x18>
 8118d7c:	9a01      	ldr	r2, [sp, #4]
 8118d7e:	2100      	movs	r1, #0
 8118d80:	f7fe f97e 	bl	8117080 <memset>
 8118d84:	4620      	mov	r0, r4
 8118d86:	b002      	add	sp, #8
 8118d88:	bd10      	pop	{r4, pc}
	...

08118d8c <_free_r>:
 8118d8c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8118d8e:	2900      	cmp	r1, #0
 8118d90:	d048      	beq.n	8118e24 <_free_r+0x98>
 8118d92:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8118d96:	9001      	str	r0, [sp, #4]
 8118d98:	2b00      	cmp	r3, #0
 8118d9a:	f1a1 0404 	sub.w	r4, r1, #4
 8118d9e:	bfb8      	it	lt
 8118da0:	18e4      	addlt	r4, r4, r3
 8118da2:	f000 f8ef 	bl	8118f84 <__malloc_lock>
 8118da6:	4a20      	ldr	r2, [pc, #128]	; (8118e28 <_free_r+0x9c>)
 8118da8:	9801      	ldr	r0, [sp, #4]
 8118daa:	6813      	ldr	r3, [r2, #0]
 8118dac:	4615      	mov	r5, r2
 8118dae:	b933      	cbnz	r3, 8118dbe <_free_r+0x32>
 8118db0:	6063      	str	r3, [r4, #4]
 8118db2:	6014      	str	r4, [r2, #0]
 8118db4:	b003      	add	sp, #12
 8118db6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8118dba:	f000 b8e9 	b.w	8118f90 <__malloc_unlock>
 8118dbe:	42a3      	cmp	r3, r4
 8118dc0:	d90b      	bls.n	8118dda <_free_r+0x4e>
 8118dc2:	6821      	ldr	r1, [r4, #0]
 8118dc4:	1862      	adds	r2, r4, r1
 8118dc6:	4293      	cmp	r3, r2
 8118dc8:	bf04      	itt	eq
 8118dca:	681a      	ldreq	r2, [r3, #0]
 8118dcc:	685b      	ldreq	r3, [r3, #4]
 8118dce:	6063      	str	r3, [r4, #4]
 8118dd0:	bf04      	itt	eq
 8118dd2:	1852      	addeq	r2, r2, r1
 8118dd4:	6022      	streq	r2, [r4, #0]
 8118dd6:	602c      	str	r4, [r5, #0]
 8118dd8:	e7ec      	b.n	8118db4 <_free_r+0x28>
 8118dda:	461a      	mov	r2, r3
 8118ddc:	685b      	ldr	r3, [r3, #4]
 8118dde:	b10b      	cbz	r3, 8118de4 <_free_r+0x58>
 8118de0:	42a3      	cmp	r3, r4
 8118de2:	d9fa      	bls.n	8118dda <_free_r+0x4e>
 8118de4:	6811      	ldr	r1, [r2, #0]
 8118de6:	1855      	adds	r5, r2, r1
 8118de8:	42a5      	cmp	r5, r4
 8118dea:	d10b      	bne.n	8118e04 <_free_r+0x78>
 8118dec:	6824      	ldr	r4, [r4, #0]
 8118dee:	4421      	add	r1, r4
 8118df0:	1854      	adds	r4, r2, r1
 8118df2:	42a3      	cmp	r3, r4
 8118df4:	6011      	str	r1, [r2, #0]
 8118df6:	d1dd      	bne.n	8118db4 <_free_r+0x28>
 8118df8:	681c      	ldr	r4, [r3, #0]
 8118dfa:	685b      	ldr	r3, [r3, #4]
 8118dfc:	6053      	str	r3, [r2, #4]
 8118dfe:	4421      	add	r1, r4
 8118e00:	6011      	str	r1, [r2, #0]
 8118e02:	e7d7      	b.n	8118db4 <_free_r+0x28>
 8118e04:	d902      	bls.n	8118e0c <_free_r+0x80>
 8118e06:	230c      	movs	r3, #12
 8118e08:	6003      	str	r3, [r0, #0]
 8118e0a:	e7d3      	b.n	8118db4 <_free_r+0x28>
 8118e0c:	6825      	ldr	r5, [r4, #0]
 8118e0e:	1961      	adds	r1, r4, r5
 8118e10:	428b      	cmp	r3, r1
 8118e12:	bf04      	itt	eq
 8118e14:	6819      	ldreq	r1, [r3, #0]
 8118e16:	685b      	ldreq	r3, [r3, #4]
 8118e18:	6063      	str	r3, [r4, #4]
 8118e1a:	bf04      	itt	eq
 8118e1c:	1949      	addeq	r1, r1, r5
 8118e1e:	6021      	streq	r1, [r4, #0]
 8118e20:	6054      	str	r4, [r2, #4]
 8118e22:	e7c7      	b.n	8118db4 <_free_r+0x28>
 8118e24:	b003      	add	sp, #12
 8118e26:	bd30      	pop	{r4, r5, pc}
 8118e28:	10004b34 	.word	0x10004b34

08118e2c <_malloc_r>:
 8118e2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8118e2e:	1ccd      	adds	r5, r1, #3
 8118e30:	f025 0503 	bic.w	r5, r5, #3
 8118e34:	3508      	adds	r5, #8
 8118e36:	2d0c      	cmp	r5, #12
 8118e38:	bf38      	it	cc
 8118e3a:	250c      	movcc	r5, #12
 8118e3c:	2d00      	cmp	r5, #0
 8118e3e:	4606      	mov	r6, r0
 8118e40:	db01      	blt.n	8118e46 <_malloc_r+0x1a>
 8118e42:	42a9      	cmp	r1, r5
 8118e44:	d903      	bls.n	8118e4e <_malloc_r+0x22>
 8118e46:	230c      	movs	r3, #12
 8118e48:	6033      	str	r3, [r6, #0]
 8118e4a:	2000      	movs	r0, #0
 8118e4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8118e4e:	f000 f899 	bl	8118f84 <__malloc_lock>
 8118e52:	4921      	ldr	r1, [pc, #132]	; (8118ed8 <_malloc_r+0xac>)
 8118e54:	680a      	ldr	r2, [r1, #0]
 8118e56:	4614      	mov	r4, r2
 8118e58:	b99c      	cbnz	r4, 8118e82 <_malloc_r+0x56>
 8118e5a:	4f20      	ldr	r7, [pc, #128]	; (8118edc <_malloc_r+0xb0>)
 8118e5c:	683b      	ldr	r3, [r7, #0]
 8118e5e:	b923      	cbnz	r3, 8118e6a <_malloc_r+0x3e>
 8118e60:	4621      	mov	r1, r4
 8118e62:	4630      	mov	r0, r6
 8118e64:	f000 f83c 	bl	8118ee0 <_sbrk_r>
 8118e68:	6038      	str	r0, [r7, #0]
 8118e6a:	4629      	mov	r1, r5
 8118e6c:	4630      	mov	r0, r6
 8118e6e:	f000 f837 	bl	8118ee0 <_sbrk_r>
 8118e72:	1c43      	adds	r3, r0, #1
 8118e74:	d123      	bne.n	8118ebe <_malloc_r+0x92>
 8118e76:	230c      	movs	r3, #12
 8118e78:	6033      	str	r3, [r6, #0]
 8118e7a:	4630      	mov	r0, r6
 8118e7c:	f000 f888 	bl	8118f90 <__malloc_unlock>
 8118e80:	e7e3      	b.n	8118e4a <_malloc_r+0x1e>
 8118e82:	6823      	ldr	r3, [r4, #0]
 8118e84:	1b5b      	subs	r3, r3, r5
 8118e86:	d417      	bmi.n	8118eb8 <_malloc_r+0x8c>
 8118e88:	2b0b      	cmp	r3, #11
 8118e8a:	d903      	bls.n	8118e94 <_malloc_r+0x68>
 8118e8c:	6023      	str	r3, [r4, #0]
 8118e8e:	441c      	add	r4, r3
 8118e90:	6025      	str	r5, [r4, #0]
 8118e92:	e004      	b.n	8118e9e <_malloc_r+0x72>
 8118e94:	6863      	ldr	r3, [r4, #4]
 8118e96:	42a2      	cmp	r2, r4
 8118e98:	bf0c      	ite	eq
 8118e9a:	600b      	streq	r3, [r1, #0]
 8118e9c:	6053      	strne	r3, [r2, #4]
 8118e9e:	4630      	mov	r0, r6
 8118ea0:	f000 f876 	bl	8118f90 <__malloc_unlock>
 8118ea4:	f104 000b 	add.w	r0, r4, #11
 8118ea8:	1d23      	adds	r3, r4, #4
 8118eaa:	f020 0007 	bic.w	r0, r0, #7
 8118eae:	1ac2      	subs	r2, r0, r3
 8118eb0:	d0cc      	beq.n	8118e4c <_malloc_r+0x20>
 8118eb2:	1a1b      	subs	r3, r3, r0
 8118eb4:	50a3      	str	r3, [r4, r2]
 8118eb6:	e7c9      	b.n	8118e4c <_malloc_r+0x20>
 8118eb8:	4622      	mov	r2, r4
 8118eba:	6864      	ldr	r4, [r4, #4]
 8118ebc:	e7cc      	b.n	8118e58 <_malloc_r+0x2c>
 8118ebe:	1cc4      	adds	r4, r0, #3
 8118ec0:	f024 0403 	bic.w	r4, r4, #3
 8118ec4:	42a0      	cmp	r0, r4
 8118ec6:	d0e3      	beq.n	8118e90 <_malloc_r+0x64>
 8118ec8:	1a21      	subs	r1, r4, r0
 8118eca:	4630      	mov	r0, r6
 8118ecc:	f000 f808 	bl	8118ee0 <_sbrk_r>
 8118ed0:	3001      	adds	r0, #1
 8118ed2:	d1dd      	bne.n	8118e90 <_malloc_r+0x64>
 8118ed4:	e7cf      	b.n	8118e76 <_malloc_r+0x4a>
 8118ed6:	bf00      	nop
 8118ed8:	10004b34 	.word	0x10004b34
 8118edc:	10004b38 	.word	0x10004b38

08118ee0 <_sbrk_r>:
 8118ee0:	b538      	push	{r3, r4, r5, lr}
 8118ee2:	4d06      	ldr	r5, [pc, #24]	; (8118efc <_sbrk_r+0x1c>)
 8118ee4:	2300      	movs	r3, #0
 8118ee6:	4604      	mov	r4, r0
 8118ee8:	4608      	mov	r0, r1
 8118eea:	602b      	str	r3, [r5, #0]
 8118eec:	f7e9 fa20 	bl	8102330 <_sbrk>
 8118ef0:	1c43      	adds	r3, r0, #1
 8118ef2:	d102      	bne.n	8118efa <_sbrk_r+0x1a>
 8118ef4:	682b      	ldr	r3, [r5, #0]
 8118ef6:	b103      	cbz	r3, 8118efa <_sbrk_r+0x1a>
 8118ef8:	6023      	str	r3, [r4, #0]
 8118efa:	bd38      	pop	{r3, r4, r5, pc}
 8118efc:	100076d0 	.word	0x100076d0

08118f00 <__assert_func>:
 8118f00:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8118f02:	4614      	mov	r4, r2
 8118f04:	461a      	mov	r2, r3
 8118f06:	4b09      	ldr	r3, [pc, #36]	; (8118f2c <__assert_func+0x2c>)
 8118f08:	681b      	ldr	r3, [r3, #0]
 8118f0a:	4605      	mov	r5, r0
 8118f0c:	68d8      	ldr	r0, [r3, #12]
 8118f0e:	b14c      	cbz	r4, 8118f24 <__assert_func+0x24>
 8118f10:	4b07      	ldr	r3, [pc, #28]	; (8118f30 <__assert_func+0x30>)
 8118f12:	9100      	str	r1, [sp, #0]
 8118f14:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8118f18:	4906      	ldr	r1, [pc, #24]	; (8118f34 <__assert_func+0x34>)
 8118f1a:	462b      	mov	r3, r5
 8118f1c:	f000 f80e 	bl	8118f3c <fiprintf>
 8118f20:	f000 fa64 	bl	81193ec <abort>
 8118f24:	4b04      	ldr	r3, [pc, #16]	; (8118f38 <__assert_func+0x38>)
 8118f26:	461c      	mov	r4, r3
 8118f28:	e7f3      	b.n	8118f12 <__assert_func+0x12>
 8118f2a:	bf00      	nop
 8118f2c:	10000014 	.word	0x10000014
 8118f30:	08119d7c 	.word	0x08119d7c
 8118f34:	08119d89 	.word	0x08119d89
 8118f38:	08119db7 	.word	0x08119db7

08118f3c <fiprintf>:
 8118f3c:	b40e      	push	{r1, r2, r3}
 8118f3e:	b503      	push	{r0, r1, lr}
 8118f40:	4601      	mov	r1, r0
 8118f42:	ab03      	add	r3, sp, #12
 8118f44:	4805      	ldr	r0, [pc, #20]	; (8118f5c <fiprintf+0x20>)
 8118f46:	f853 2b04 	ldr.w	r2, [r3], #4
 8118f4a:	6800      	ldr	r0, [r0, #0]
 8118f4c:	9301      	str	r3, [sp, #4]
 8118f4e:	f000 f84f 	bl	8118ff0 <_vfiprintf_r>
 8118f52:	b002      	add	sp, #8
 8118f54:	f85d eb04 	ldr.w	lr, [sp], #4
 8118f58:	b003      	add	sp, #12
 8118f5a:	4770      	bx	lr
 8118f5c:	10000014 	.word	0x10000014

08118f60 <__ascii_mbtowc>:
 8118f60:	b082      	sub	sp, #8
 8118f62:	b901      	cbnz	r1, 8118f66 <__ascii_mbtowc+0x6>
 8118f64:	a901      	add	r1, sp, #4
 8118f66:	b142      	cbz	r2, 8118f7a <__ascii_mbtowc+0x1a>
 8118f68:	b14b      	cbz	r3, 8118f7e <__ascii_mbtowc+0x1e>
 8118f6a:	7813      	ldrb	r3, [r2, #0]
 8118f6c:	600b      	str	r3, [r1, #0]
 8118f6e:	7812      	ldrb	r2, [r2, #0]
 8118f70:	1e10      	subs	r0, r2, #0
 8118f72:	bf18      	it	ne
 8118f74:	2001      	movne	r0, #1
 8118f76:	b002      	add	sp, #8
 8118f78:	4770      	bx	lr
 8118f7a:	4610      	mov	r0, r2
 8118f7c:	e7fb      	b.n	8118f76 <__ascii_mbtowc+0x16>
 8118f7e:	f06f 0001 	mvn.w	r0, #1
 8118f82:	e7f8      	b.n	8118f76 <__ascii_mbtowc+0x16>

08118f84 <__malloc_lock>:
 8118f84:	4801      	ldr	r0, [pc, #4]	; (8118f8c <__malloc_lock+0x8>)
 8118f86:	f000 bbf1 	b.w	811976c <__retarget_lock_acquire_recursive>
 8118f8a:	bf00      	nop
 8118f8c:	100076d8 	.word	0x100076d8

08118f90 <__malloc_unlock>:
 8118f90:	4801      	ldr	r0, [pc, #4]	; (8118f98 <__malloc_unlock+0x8>)
 8118f92:	f000 bbec 	b.w	811976e <__retarget_lock_release_recursive>
 8118f96:	bf00      	nop
 8118f98:	100076d8 	.word	0x100076d8

08118f9c <__sfputc_r>:
 8118f9c:	6893      	ldr	r3, [r2, #8]
 8118f9e:	3b01      	subs	r3, #1
 8118fa0:	2b00      	cmp	r3, #0
 8118fa2:	b410      	push	{r4}
 8118fa4:	6093      	str	r3, [r2, #8]
 8118fa6:	da08      	bge.n	8118fba <__sfputc_r+0x1e>
 8118fa8:	6994      	ldr	r4, [r2, #24]
 8118faa:	42a3      	cmp	r3, r4
 8118fac:	db01      	blt.n	8118fb2 <__sfputc_r+0x16>
 8118fae:	290a      	cmp	r1, #10
 8118fb0:	d103      	bne.n	8118fba <__sfputc_r+0x1e>
 8118fb2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8118fb6:	f000 b94b 	b.w	8119250 <__swbuf_r>
 8118fba:	6813      	ldr	r3, [r2, #0]
 8118fbc:	1c58      	adds	r0, r3, #1
 8118fbe:	6010      	str	r0, [r2, #0]
 8118fc0:	7019      	strb	r1, [r3, #0]
 8118fc2:	4608      	mov	r0, r1
 8118fc4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8118fc8:	4770      	bx	lr

08118fca <__sfputs_r>:
 8118fca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8118fcc:	4606      	mov	r6, r0
 8118fce:	460f      	mov	r7, r1
 8118fd0:	4614      	mov	r4, r2
 8118fd2:	18d5      	adds	r5, r2, r3
 8118fd4:	42ac      	cmp	r4, r5
 8118fd6:	d101      	bne.n	8118fdc <__sfputs_r+0x12>
 8118fd8:	2000      	movs	r0, #0
 8118fda:	e007      	b.n	8118fec <__sfputs_r+0x22>
 8118fdc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8118fe0:	463a      	mov	r2, r7
 8118fe2:	4630      	mov	r0, r6
 8118fe4:	f7ff ffda 	bl	8118f9c <__sfputc_r>
 8118fe8:	1c43      	adds	r3, r0, #1
 8118fea:	d1f3      	bne.n	8118fd4 <__sfputs_r+0xa>
 8118fec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08118ff0 <_vfiprintf_r>:
 8118ff0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8118ff4:	460d      	mov	r5, r1
 8118ff6:	b09d      	sub	sp, #116	; 0x74
 8118ff8:	4614      	mov	r4, r2
 8118ffa:	4698      	mov	r8, r3
 8118ffc:	4606      	mov	r6, r0
 8118ffe:	b118      	cbz	r0, 8119008 <_vfiprintf_r+0x18>
 8119000:	6983      	ldr	r3, [r0, #24]
 8119002:	b90b      	cbnz	r3, 8119008 <_vfiprintf_r+0x18>
 8119004:	f000 fb14 	bl	8119630 <__sinit>
 8119008:	4b89      	ldr	r3, [pc, #548]	; (8119230 <_vfiprintf_r+0x240>)
 811900a:	429d      	cmp	r5, r3
 811900c:	d11b      	bne.n	8119046 <_vfiprintf_r+0x56>
 811900e:	6875      	ldr	r5, [r6, #4]
 8119010:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8119012:	07d9      	lsls	r1, r3, #31
 8119014:	d405      	bmi.n	8119022 <_vfiprintf_r+0x32>
 8119016:	89ab      	ldrh	r3, [r5, #12]
 8119018:	059a      	lsls	r2, r3, #22
 811901a:	d402      	bmi.n	8119022 <_vfiprintf_r+0x32>
 811901c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 811901e:	f000 fba5 	bl	811976c <__retarget_lock_acquire_recursive>
 8119022:	89ab      	ldrh	r3, [r5, #12]
 8119024:	071b      	lsls	r3, r3, #28
 8119026:	d501      	bpl.n	811902c <_vfiprintf_r+0x3c>
 8119028:	692b      	ldr	r3, [r5, #16]
 811902a:	b9eb      	cbnz	r3, 8119068 <_vfiprintf_r+0x78>
 811902c:	4629      	mov	r1, r5
 811902e:	4630      	mov	r0, r6
 8119030:	f000 f96e 	bl	8119310 <__swsetup_r>
 8119034:	b1c0      	cbz	r0, 8119068 <_vfiprintf_r+0x78>
 8119036:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8119038:	07dc      	lsls	r4, r3, #31
 811903a:	d50e      	bpl.n	811905a <_vfiprintf_r+0x6a>
 811903c:	f04f 30ff 	mov.w	r0, #4294967295
 8119040:	b01d      	add	sp, #116	; 0x74
 8119042:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8119046:	4b7b      	ldr	r3, [pc, #492]	; (8119234 <_vfiprintf_r+0x244>)
 8119048:	429d      	cmp	r5, r3
 811904a:	d101      	bne.n	8119050 <_vfiprintf_r+0x60>
 811904c:	68b5      	ldr	r5, [r6, #8]
 811904e:	e7df      	b.n	8119010 <_vfiprintf_r+0x20>
 8119050:	4b79      	ldr	r3, [pc, #484]	; (8119238 <_vfiprintf_r+0x248>)
 8119052:	429d      	cmp	r5, r3
 8119054:	bf08      	it	eq
 8119056:	68f5      	ldreq	r5, [r6, #12]
 8119058:	e7da      	b.n	8119010 <_vfiprintf_r+0x20>
 811905a:	89ab      	ldrh	r3, [r5, #12]
 811905c:	0598      	lsls	r0, r3, #22
 811905e:	d4ed      	bmi.n	811903c <_vfiprintf_r+0x4c>
 8119060:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8119062:	f000 fb84 	bl	811976e <__retarget_lock_release_recursive>
 8119066:	e7e9      	b.n	811903c <_vfiprintf_r+0x4c>
 8119068:	2300      	movs	r3, #0
 811906a:	9309      	str	r3, [sp, #36]	; 0x24
 811906c:	2320      	movs	r3, #32
 811906e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8119072:	f8cd 800c 	str.w	r8, [sp, #12]
 8119076:	2330      	movs	r3, #48	; 0x30
 8119078:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 811923c <_vfiprintf_r+0x24c>
 811907c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8119080:	f04f 0901 	mov.w	r9, #1
 8119084:	4623      	mov	r3, r4
 8119086:	469a      	mov	sl, r3
 8119088:	f813 2b01 	ldrb.w	r2, [r3], #1
 811908c:	b10a      	cbz	r2, 8119092 <_vfiprintf_r+0xa2>
 811908e:	2a25      	cmp	r2, #37	; 0x25
 8119090:	d1f9      	bne.n	8119086 <_vfiprintf_r+0x96>
 8119092:	ebba 0b04 	subs.w	fp, sl, r4
 8119096:	d00b      	beq.n	81190b0 <_vfiprintf_r+0xc0>
 8119098:	465b      	mov	r3, fp
 811909a:	4622      	mov	r2, r4
 811909c:	4629      	mov	r1, r5
 811909e:	4630      	mov	r0, r6
 81190a0:	f7ff ff93 	bl	8118fca <__sfputs_r>
 81190a4:	3001      	adds	r0, #1
 81190a6:	f000 80aa 	beq.w	81191fe <_vfiprintf_r+0x20e>
 81190aa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 81190ac:	445a      	add	r2, fp
 81190ae:	9209      	str	r2, [sp, #36]	; 0x24
 81190b0:	f89a 3000 	ldrb.w	r3, [sl]
 81190b4:	2b00      	cmp	r3, #0
 81190b6:	f000 80a2 	beq.w	81191fe <_vfiprintf_r+0x20e>
 81190ba:	2300      	movs	r3, #0
 81190bc:	f04f 32ff 	mov.w	r2, #4294967295
 81190c0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 81190c4:	f10a 0a01 	add.w	sl, sl, #1
 81190c8:	9304      	str	r3, [sp, #16]
 81190ca:	9307      	str	r3, [sp, #28]
 81190cc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 81190d0:	931a      	str	r3, [sp, #104]	; 0x68
 81190d2:	4654      	mov	r4, sl
 81190d4:	2205      	movs	r2, #5
 81190d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 81190da:	4858      	ldr	r0, [pc, #352]	; (811923c <_vfiprintf_r+0x24c>)
 81190dc:	f7e7 f908 	bl	81002f0 <memchr>
 81190e0:	9a04      	ldr	r2, [sp, #16]
 81190e2:	b9d8      	cbnz	r0, 811911c <_vfiprintf_r+0x12c>
 81190e4:	06d1      	lsls	r1, r2, #27
 81190e6:	bf44      	itt	mi
 81190e8:	2320      	movmi	r3, #32
 81190ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 81190ee:	0713      	lsls	r3, r2, #28
 81190f0:	bf44      	itt	mi
 81190f2:	232b      	movmi	r3, #43	; 0x2b
 81190f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 81190f8:	f89a 3000 	ldrb.w	r3, [sl]
 81190fc:	2b2a      	cmp	r3, #42	; 0x2a
 81190fe:	d015      	beq.n	811912c <_vfiprintf_r+0x13c>
 8119100:	9a07      	ldr	r2, [sp, #28]
 8119102:	4654      	mov	r4, sl
 8119104:	2000      	movs	r0, #0
 8119106:	f04f 0c0a 	mov.w	ip, #10
 811910a:	4621      	mov	r1, r4
 811910c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8119110:	3b30      	subs	r3, #48	; 0x30
 8119112:	2b09      	cmp	r3, #9
 8119114:	d94e      	bls.n	81191b4 <_vfiprintf_r+0x1c4>
 8119116:	b1b0      	cbz	r0, 8119146 <_vfiprintf_r+0x156>
 8119118:	9207      	str	r2, [sp, #28]
 811911a:	e014      	b.n	8119146 <_vfiprintf_r+0x156>
 811911c:	eba0 0308 	sub.w	r3, r0, r8
 8119120:	fa09 f303 	lsl.w	r3, r9, r3
 8119124:	4313      	orrs	r3, r2
 8119126:	9304      	str	r3, [sp, #16]
 8119128:	46a2      	mov	sl, r4
 811912a:	e7d2      	b.n	81190d2 <_vfiprintf_r+0xe2>
 811912c:	9b03      	ldr	r3, [sp, #12]
 811912e:	1d19      	adds	r1, r3, #4
 8119130:	681b      	ldr	r3, [r3, #0]
 8119132:	9103      	str	r1, [sp, #12]
 8119134:	2b00      	cmp	r3, #0
 8119136:	bfbb      	ittet	lt
 8119138:	425b      	neglt	r3, r3
 811913a:	f042 0202 	orrlt.w	r2, r2, #2
 811913e:	9307      	strge	r3, [sp, #28]
 8119140:	9307      	strlt	r3, [sp, #28]
 8119142:	bfb8      	it	lt
 8119144:	9204      	strlt	r2, [sp, #16]
 8119146:	7823      	ldrb	r3, [r4, #0]
 8119148:	2b2e      	cmp	r3, #46	; 0x2e
 811914a:	d10c      	bne.n	8119166 <_vfiprintf_r+0x176>
 811914c:	7863      	ldrb	r3, [r4, #1]
 811914e:	2b2a      	cmp	r3, #42	; 0x2a
 8119150:	d135      	bne.n	81191be <_vfiprintf_r+0x1ce>
 8119152:	9b03      	ldr	r3, [sp, #12]
 8119154:	1d1a      	adds	r2, r3, #4
 8119156:	681b      	ldr	r3, [r3, #0]
 8119158:	9203      	str	r2, [sp, #12]
 811915a:	2b00      	cmp	r3, #0
 811915c:	bfb8      	it	lt
 811915e:	f04f 33ff 	movlt.w	r3, #4294967295
 8119162:	3402      	adds	r4, #2
 8119164:	9305      	str	r3, [sp, #20]
 8119166:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 811924c <_vfiprintf_r+0x25c>
 811916a:	7821      	ldrb	r1, [r4, #0]
 811916c:	2203      	movs	r2, #3
 811916e:	4650      	mov	r0, sl
 8119170:	f7e7 f8be 	bl	81002f0 <memchr>
 8119174:	b140      	cbz	r0, 8119188 <_vfiprintf_r+0x198>
 8119176:	2340      	movs	r3, #64	; 0x40
 8119178:	eba0 000a 	sub.w	r0, r0, sl
 811917c:	fa03 f000 	lsl.w	r0, r3, r0
 8119180:	9b04      	ldr	r3, [sp, #16]
 8119182:	4303      	orrs	r3, r0
 8119184:	3401      	adds	r4, #1
 8119186:	9304      	str	r3, [sp, #16]
 8119188:	f814 1b01 	ldrb.w	r1, [r4], #1
 811918c:	482c      	ldr	r0, [pc, #176]	; (8119240 <_vfiprintf_r+0x250>)
 811918e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8119192:	2206      	movs	r2, #6
 8119194:	f7e7 f8ac 	bl	81002f0 <memchr>
 8119198:	2800      	cmp	r0, #0
 811919a:	d03f      	beq.n	811921c <_vfiprintf_r+0x22c>
 811919c:	4b29      	ldr	r3, [pc, #164]	; (8119244 <_vfiprintf_r+0x254>)
 811919e:	bb1b      	cbnz	r3, 81191e8 <_vfiprintf_r+0x1f8>
 81191a0:	9b03      	ldr	r3, [sp, #12]
 81191a2:	3307      	adds	r3, #7
 81191a4:	f023 0307 	bic.w	r3, r3, #7
 81191a8:	3308      	adds	r3, #8
 81191aa:	9303      	str	r3, [sp, #12]
 81191ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 81191ae:	443b      	add	r3, r7
 81191b0:	9309      	str	r3, [sp, #36]	; 0x24
 81191b2:	e767      	b.n	8119084 <_vfiprintf_r+0x94>
 81191b4:	fb0c 3202 	mla	r2, ip, r2, r3
 81191b8:	460c      	mov	r4, r1
 81191ba:	2001      	movs	r0, #1
 81191bc:	e7a5      	b.n	811910a <_vfiprintf_r+0x11a>
 81191be:	2300      	movs	r3, #0
 81191c0:	3401      	adds	r4, #1
 81191c2:	9305      	str	r3, [sp, #20]
 81191c4:	4619      	mov	r1, r3
 81191c6:	f04f 0c0a 	mov.w	ip, #10
 81191ca:	4620      	mov	r0, r4
 81191cc:	f810 2b01 	ldrb.w	r2, [r0], #1
 81191d0:	3a30      	subs	r2, #48	; 0x30
 81191d2:	2a09      	cmp	r2, #9
 81191d4:	d903      	bls.n	81191de <_vfiprintf_r+0x1ee>
 81191d6:	2b00      	cmp	r3, #0
 81191d8:	d0c5      	beq.n	8119166 <_vfiprintf_r+0x176>
 81191da:	9105      	str	r1, [sp, #20]
 81191dc:	e7c3      	b.n	8119166 <_vfiprintf_r+0x176>
 81191de:	fb0c 2101 	mla	r1, ip, r1, r2
 81191e2:	4604      	mov	r4, r0
 81191e4:	2301      	movs	r3, #1
 81191e6:	e7f0      	b.n	81191ca <_vfiprintf_r+0x1da>
 81191e8:	ab03      	add	r3, sp, #12
 81191ea:	9300      	str	r3, [sp, #0]
 81191ec:	462a      	mov	r2, r5
 81191ee:	4b16      	ldr	r3, [pc, #88]	; (8119248 <_vfiprintf_r+0x258>)
 81191f0:	a904      	add	r1, sp, #16
 81191f2:	4630      	mov	r0, r6
 81191f4:	f7fd ffec 	bl	81171d0 <_printf_float>
 81191f8:	4607      	mov	r7, r0
 81191fa:	1c78      	adds	r0, r7, #1
 81191fc:	d1d6      	bne.n	81191ac <_vfiprintf_r+0x1bc>
 81191fe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8119200:	07d9      	lsls	r1, r3, #31
 8119202:	d405      	bmi.n	8119210 <_vfiprintf_r+0x220>
 8119204:	89ab      	ldrh	r3, [r5, #12]
 8119206:	059a      	lsls	r2, r3, #22
 8119208:	d402      	bmi.n	8119210 <_vfiprintf_r+0x220>
 811920a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 811920c:	f000 faaf 	bl	811976e <__retarget_lock_release_recursive>
 8119210:	89ab      	ldrh	r3, [r5, #12]
 8119212:	065b      	lsls	r3, r3, #25
 8119214:	f53f af12 	bmi.w	811903c <_vfiprintf_r+0x4c>
 8119218:	9809      	ldr	r0, [sp, #36]	; 0x24
 811921a:	e711      	b.n	8119040 <_vfiprintf_r+0x50>
 811921c:	ab03      	add	r3, sp, #12
 811921e:	9300      	str	r3, [sp, #0]
 8119220:	462a      	mov	r2, r5
 8119222:	4b09      	ldr	r3, [pc, #36]	; (8119248 <_vfiprintf_r+0x258>)
 8119224:	a904      	add	r1, sp, #16
 8119226:	4630      	mov	r0, r6
 8119228:	f7fe fa76 	bl	8117718 <_printf_i>
 811922c:	e7e4      	b.n	81191f8 <_vfiprintf_r+0x208>
 811922e:	bf00      	nop
 8119230:	08119ef4 	.word	0x08119ef4
 8119234:	08119f14 	.word	0x08119f14
 8119238:	08119ed4 	.word	0x08119ed4
 811923c:	08119dc2 	.word	0x08119dc2
 8119240:	08119dcc 	.word	0x08119dcc
 8119244:	081171d1 	.word	0x081171d1
 8119248:	08118fcb 	.word	0x08118fcb
 811924c:	08119dc8 	.word	0x08119dc8

08119250 <__swbuf_r>:
 8119250:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8119252:	460e      	mov	r6, r1
 8119254:	4614      	mov	r4, r2
 8119256:	4605      	mov	r5, r0
 8119258:	b118      	cbz	r0, 8119262 <__swbuf_r+0x12>
 811925a:	6983      	ldr	r3, [r0, #24]
 811925c:	b90b      	cbnz	r3, 8119262 <__swbuf_r+0x12>
 811925e:	f000 f9e7 	bl	8119630 <__sinit>
 8119262:	4b21      	ldr	r3, [pc, #132]	; (81192e8 <__swbuf_r+0x98>)
 8119264:	429c      	cmp	r4, r3
 8119266:	d12b      	bne.n	81192c0 <__swbuf_r+0x70>
 8119268:	686c      	ldr	r4, [r5, #4]
 811926a:	69a3      	ldr	r3, [r4, #24]
 811926c:	60a3      	str	r3, [r4, #8]
 811926e:	89a3      	ldrh	r3, [r4, #12]
 8119270:	071a      	lsls	r2, r3, #28
 8119272:	d52f      	bpl.n	81192d4 <__swbuf_r+0x84>
 8119274:	6923      	ldr	r3, [r4, #16]
 8119276:	b36b      	cbz	r3, 81192d4 <__swbuf_r+0x84>
 8119278:	6923      	ldr	r3, [r4, #16]
 811927a:	6820      	ldr	r0, [r4, #0]
 811927c:	1ac0      	subs	r0, r0, r3
 811927e:	6963      	ldr	r3, [r4, #20]
 8119280:	b2f6      	uxtb	r6, r6
 8119282:	4283      	cmp	r3, r0
 8119284:	4637      	mov	r7, r6
 8119286:	dc04      	bgt.n	8119292 <__swbuf_r+0x42>
 8119288:	4621      	mov	r1, r4
 811928a:	4628      	mov	r0, r5
 811928c:	f000 f93c 	bl	8119508 <_fflush_r>
 8119290:	bb30      	cbnz	r0, 81192e0 <__swbuf_r+0x90>
 8119292:	68a3      	ldr	r3, [r4, #8]
 8119294:	3b01      	subs	r3, #1
 8119296:	60a3      	str	r3, [r4, #8]
 8119298:	6823      	ldr	r3, [r4, #0]
 811929a:	1c5a      	adds	r2, r3, #1
 811929c:	6022      	str	r2, [r4, #0]
 811929e:	701e      	strb	r6, [r3, #0]
 81192a0:	6963      	ldr	r3, [r4, #20]
 81192a2:	3001      	adds	r0, #1
 81192a4:	4283      	cmp	r3, r0
 81192a6:	d004      	beq.n	81192b2 <__swbuf_r+0x62>
 81192a8:	89a3      	ldrh	r3, [r4, #12]
 81192aa:	07db      	lsls	r3, r3, #31
 81192ac:	d506      	bpl.n	81192bc <__swbuf_r+0x6c>
 81192ae:	2e0a      	cmp	r6, #10
 81192b0:	d104      	bne.n	81192bc <__swbuf_r+0x6c>
 81192b2:	4621      	mov	r1, r4
 81192b4:	4628      	mov	r0, r5
 81192b6:	f000 f927 	bl	8119508 <_fflush_r>
 81192ba:	b988      	cbnz	r0, 81192e0 <__swbuf_r+0x90>
 81192bc:	4638      	mov	r0, r7
 81192be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 81192c0:	4b0a      	ldr	r3, [pc, #40]	; (81192ec <__swbuf_r+0x9c>)
 81192c2:	429c      	cmp	r4, r3
 81192c4:	d101      	bne.n	81192ca <__swbuf_r+0x7a>
 81192c6:	68ac      	ldr	r4, [r5, #8]
 81192c8:	e7cf      	b.n	811926a <__swbuf_r+0x1a>
 81192ca:	4b09      	ldr	r3, [pc, #36]	; (81192f0 <__swbuf_r+0xa0>)
 81192cc:	429c      	cmp	r4, r3
 81192ce:	bf08      	it	eq
 81192d0:	68ec      	ldreq	r4, [r5, #12]
 81192d2:	e7ca      	b.n	811926a <__swbuf_r+0x1a>
 81192d4:	4621      	mov	r1, r4
 81192d6:	4628      	mov	r0, r5
 81192d8:	f000 f81a 	bl	8119310 <__swsetup_r>
 81192dc:	2800      	cmp	r0, #0
 81192de:	d0cb      	beq.n	8119278 <__swbuf_r+0x28>
 81192e0:	f04f 37ff 	mov.w	r7, #4294967295
 81192e4:	e7ea      	b.n	81192bc <__swbuf_r+0x6c>
 81192e6:	bf00      	nop
 81192e8:	08119ef4 	.word	0x08119ef4
 81192ec:	08119f14 	.word	0x08119f14
 81192f0:	08119ed4 	.word	0x08119ed4

081192f4 <__ascii_wctomb>:
 81192f4:	b149      	cbz	r1, 811930a <__ascii_wctomb+0x16>
 81192f6:	2aff      	cmp	r2, #255	; 0xff
 81192f8:	bf85      	ittet	hi
 81192fa:	238a      	movhi	r3, #138	; 0x8a
 81192fc:	6003      	strhi	r3, [r0, #0]
 81192fe:	700a      	strbls	r2, [r1, #0]
 8119300:	f04f 30ff 	movhi.w	r0, #4294967295
 8119304:	bf98      	it	ls
 8119306:	2001      	movls	r0, #1
 8119308:	4770      	bx	lr
 811930a:	4608      	mov	r0, r1
 811930c:	4770      	bx	lr
	...

08119310 <__swsetup_r>:
 8119310:	4b32      	ldr	r3, [pc, #200]	; (81193dc <__swsetup_r+0xcc>)
 8119312:	b570      	push	{r4, r5, r6, lr}
 8119314:	681d      	ldr	r5, [r3, #0]
 8119316:	4606      	mov	r6, r0
 8119318:	460c      	mov	r4, r1
 811931a:	b125      	cbz	r5, 8119326 <__swsetup_r+0x16>
 811931c:	69ab      	ldr	r3, [r5, #24]
 811931e:	b913      	cbnz	r3, 8119326 <__swsetup_r+0x16>
 8119320:	4628      	mov	r0, r5
 8119322:	f000 f985 	bl	8119630 <__sinit>
 8119326:	4b2e      	ldr	r3, [pc, #184]	; (81193e0 <__swsetup_r+0xd0>)
 8119328:	429c      	cmp	r4, r3
 811932a:	d10f      	bne.n	811934c <__swsetup_r+0x3c>
 811932c:	686c      	ldr	r4, [r5, #4]
 811932e:	89a3      	ldrh	r3, [r4, #12]
 8119330:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8119334:	0719      	lsls	r1, r3, #28
 8119336:	d42c      	bmi.n	8119392 <__swsetup_r+0x82>
 8119338:	06dd      	lsls	r5, r3, #27
 811933a:	d411      	bmi.n	8119360 <__swsetup_r+0x50>
 811933c:	2309      	movs	r3, #9
 811933e:	6033      	str	r3, [r6, #0]
 8119340:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8119344:	81a3      	strh	r3, [r4, #12]
 8119346:	f04f 30ff 	mov.w	r0, #4294967295
 811934a:	e03e      	b.n	81193ca <__swsetup_r+0xba>
 811934c:	4b25      	ldr	r3, [pc, #148]	; (81193e4 <__swsetup_r+0xd4>)
 811934e:	429c      	cmp	r4, r3
 8119350:	d101      	bne.n	8119356 <__swsetup_r+0x46>
 8119352:	68ac      	ldr	r4, [r5, #8]
 8119354:	e7eb      	b.n	811932e <__swsetup_r+0x1e>
 8119356:	4b24      	ldr	r3, [pc, #144]	; (81193e8 <__swsetup_r+0xd8>)
 8119358:	429c      	cmp	r4, r3
 811935a:	bf08      	it	eq
 811935c:	68ec      	ldreq	r4, [r5, #12]
 811935e:	e7e6      	b.n	811932e <__swsetup_r+0x1e>
 8119360:	0758      	lsls	r0, r3, #29
 8119362:	d512      	bpl.n	811938a <__swsetup_r+0x7a>
 8119364:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8119366:	b141      	cbz	r1, 811937a <__swsetup_r+0x6a>
 8119368:	f104 0344 	add.w	r3, r4, #68	; 0x44
 811936c:	4299      	cmp	r1, r3
 811936e:	d002      	beq.n	8119376 <__swsetup_r+0x66>
 8119370:	4630      	mov	r0, r6
 8119372:	f7ff fd0b 	bl	8118d8c <_free_r>
 8119376:	2300      	movs	r3, #0
 8119378:	6363      	str	r3, [r4, #52]	; 0x34
 811937a:	89a3      	ldrh	r3, [r4, #12]
 811937c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8119380:	81a3      	strh	r3, [r4, #12]
 8119382:	2300      	movs	r3, #0
 8119384:	6063      	str	r3, [r4, #4]
 8119386:	6923      	ldr	r3, [r4, #16]
 8119388:	6023      	str	r3, [r4, #0]
 811938a:	89a3      	ldrh	r3, [r4, #12]
 811938c:	f043 0308 	orr.w	r3, r3, #8
 8119390:	81a3      	strh	r3, [r4, #12]
 8119392:	6923      	ldr	r3, [r4, #16]
 8119394:	b94b      	cbnz	r3, 81193aa <__swsetup_r+0x9a>
 8119396:	89a3      	ldrh	r3, [r4, #12]
 8119398:	f403 7320 	and.w	r3, r3, #640	; 0x280
 811939c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 81193a0:	d003      	beq.n	81193aa <__swsetup_r+0x9a>
 81193a2:	4621      	mov	r1, r4
 81193a4:	4630      	mov	r0, r6
 81193a6:	f000 fa07 	bl	81197b8 <__smakebuf_r>
 81193aa:	89a0      	ldrh	r0, [r4, #12]
 81193ac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 81193b0:	f010 0301 	ands.w	r3, r0, #1
 81193b4:	d00a      	beq.n	81193cc <__swsetup_r+0xbc>
 81193b6:	2300      	movs	r3, #0
 81193b8:	60a3      	str	r3, [r4, #8]
 81193ba:	6963      	ldr	r3, [r4, #20]
 81193bc:	425b      	negs	r3, r3
 81193be:	61a3      	str	r3, [r4, #24]
 81193c0:	6923      	ldr	r3, [r4, #16]
 81193c2:	b943      	cbnz	r3, 81193d6 <__swsetup_r+0xc6>
 81193c4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 81193c8:	d1ba      	bne.n	8119340 <__swsetup_r+0x30>
 81193ca:	bd70      	pop	{r4, r5, r6, pc}
 81193cc:	0781      	lsls	r1, r0, #30
 81193ce:	bf58      	it	pl
 81193d0:	6963      	ldrpl	r3, [r4, #20]
 81193d2:	60a3      	str	r3, [r4, #8]
 81193d4:	e7f4      	b.n	81193c0 <__swsetup_r+0xb0>
 81193d6:	2000      	movs	r0, #0
 81193d8:	e7f7      	b.n	81193ca <__swsetup_r+0xba>
 81193da:	bf00      	nop
 81193dc:	10000014 	.word	0x10000014
 81193e0:	08119ef4 	.word	0x08119ef4
 81193e4:	08119f14 	.word	0x08119f14
 81193e8:	08119ed4 	.word	0x08119ed4

081193ec <abort>:
 81193ec:	b508      	push	{r3, lr}
 81193ee:	2006      	movs	r0, #6
 81193f0:	f000 fa4a 	bl	8119888 <raise>
 81193f4:	2001      	movs	r0, #1
 81193f6:	f7e8 ff23 	bl	8102240 <_exit>
	...

081193fc <__sflush_r>:
 81193fc:	898a      	ldrh	r2, [r1, #12]
 81193fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8119402:	4605      	mov	r5, r0
 8119404:	0710      	lsls	r0, r2, #28
 8119406:	460c      	mov	r4, r1
 8119408:	d458      	bmi.n	81194bc <__sflush_r+0xc0>
 811940a:	684b      	ldr	r3, [r1, #4]
 811940c:	2b00      	cmp	r3, #0
 811940e:	dc05      	bgt.n	811941c <__sflush_r+0x20>
 8119410:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8119412:	2b00      	cmp	r3, #0
 8119414:	dc02      	bgt.n	811941c <__sflush_r+0x20>
 8119416:	2000      	movs	r0, #0
 8119418:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 811941c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 811941e:	2e00      	cmp	r6, #0
 8119420:	d0f9      	beq.n	8119416 <__sflush_r+0x1a>
 8119422:	2300      	movs	r3, #0
 8119424:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8119428:	682f      	ldr	r7, [r5, #0]
 811942a:	602b      	str	r3, [r5, #0]
 811942c:	d032      	beq.n	8119494 <__sflush_r+0x98>
 811942e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8119430:	89a3      	ldrh	r3, [r4, #12]
 8119432:	075a      	lsls	r2, r3, #29
 8119434:	d505      	bpl.n	8119442 <__sflush_r+0x46>
 8119436:	6863      	ldr	r3, [r4, #4]
 8119438:	1ac0      	subs	r0, r0, r3
 811943a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 811943c:	b10b      	cbz	r3, 8119442 <__sflush_r+0x46>
 811943e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8119440:	1ac0      	subs	r0, r0, r3
 8119442:	2300      	movs	r3, #0
 8119444:	4602      	mov	r2, r0
 8119446:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8119448:	6a21      	ldr	r1, [r4, #32]
 811944a:	4628      	mov	r0, r5
 811944c:	47b0      	blx	r6
 811944e:	1c43      	adds	r3, r0, #1
 8119450:	89a3      	ldrh	r3, [r4, #12]
 8119452:	d106      	bne.n	8119462 <__sflush_r+0x66>
 8119454:	6829      	ldr	r1, [r5, #0]
 8119456:	291d      	cmp	r1, #29
 8119458:	d82c      	bhi.n	81194b4 <__sflush_r+0xb8>
 811945a:	4a2a      	ldr	r2, [pc, #168]	; (8119504 <__sflush_r+0x108>)
 811945c:	40ca      	lsrs	r2, r1
 811945e:	07d6      	lsls	r6, r2, #31
 8119460:	d528      	bpl.n	81194b4 <__sflush_r+0xb8>
 8119462:	2200      	movs	r2, #0
 8119464:	6062      	str	r2, [r4, #4]
 8119466:	04d9      	lsls	r1, r3, #19
 8119468:	6922      	ldr	r2, [r4, #16]
 811946a:	6022      	str	r2, [r4, #0]
 811946c:	d504      	bpl.n	8119478 <__sflush_r+0x7c>
 811946e:	1c42      	adds	r2, r0, #1
 8119470:	d101      	bne.n	8119476 <__sflush_r+0x7a>
 8119472:	682b      	ldr	r3, [r5, #0]
 8119474:	b903      	cbnz	r3, 8119478 <__sflush_r+0x7c>
 8119476:	6560      	str	r0, [r4, #84]	; 0x54
 8119478:	6b61      	ldr	r1, [r4, #52]	; 0x34
 811947a:	602f      	str	r7, [r5, #0]
 811947c:	2900      	cmp	r1, #0
 811947e:	d0ca      	beq.n	8119416 <__sflush_r+0x1a>
 8119480:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8119484:	4299      	cmp	r1, r3
 8119486:	d002      	beq.n	811948e <__sflush_r+0x92>
 8119488:	4628      	mov	r0, r5
 811948a:	f7ff fc7f 	bl	8118d8c <_free_r>
 811948e:	2000      	movs	r0, #0
 8119490:	6360      	str	r0, [r4, #52]	; 0x34
 8119492:	e7c1      	b.n	8119418 <__sflush_r+0x1c>
 8119494:	6a21      	ldr	r1, [r4, #32]
 8119496:	2301      	movs	r3, #1
 8119498:	4628      	mov	r0, r5
 811949a:	47b0      	blx	r6
 811949c:	1c41      	adds	r1, r0, #1
 811949e:	d1c7      	bne.n	8119430 <__sflush_r+0x34>
 81194a0:	682b      	ldr	r3, [r5, #0]
 81194a2:	2b00      	cmp	r3, #0
 81194a4:	d0c4      	beq.n	8119430 <__sflush_r+0x34>
 81194a6:	2b1d      	cmp	r3, #29
 81194a8:	d001      	beq.n	81194ae <__sflush_r+0xb2>
 81194aa:	2b16      	cmp	r3, #22
 81194ac:	d101      	bne.n	81194b2 <__sflush_r+0xb6>
 81194ae:	602f      	str	r7, [r5, #0]
 81194b0:	e7b1      	b.n	8119416 <__sflush_r+0x1a>
 81194b2:	89a3      	ldrh	r3, [r4, #12]
 81194b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 81194b8:	81a3      	strh	r3, [r4, #12]
 81194ba:	e7ad      	b.n	8119418 <__sflush_r+0x1c>
 81194bc:	690f      	ldr	r7, [r1, #16]
 81194be:	2f00      	cmp	r7, #0
 81194c0:	d0a9      	beq.n	8119416 <__sflush_r+0x1a>
 81194c2:	0793      	lsls	r3, r2, #30
 81194c4:	680e      	ldr	r6, [r1, #0]
 81194c6:	bf08      	it	eq
 81194c8:	694b      	ldreq	r3, [r1, #20]
 81194ca:	600f      	str	r7, [r1, #0]
 81194cc:	bf18      	it	ne
 81194ce:	2300      	movne	r3, #0
 81194d0:	eba6 0807 	sub.w	r8, r6, r7
 81194d4:	608b      	str	r3, [r1, #8]
 81194d6:	f1b8 0f00 	cmp.w	r8, #0
 81194da:	dd9c      	ble.n	8119416 <__sflush_r+0x1a>
 81194dc:	6a21      	ldr	r1, [r4, #32]
 81194de:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 81194e0:	4643      	mov	r3, r8
 81194e2:	463a      	mov	r2, r7
 81194e4:	4628      	mov	r0, r5
 81194e6:	47b0      	blx	r6
 81194e8:	2800      	cmp	r0, #0
 81194ea:	dc06      	bgt.n	81194fa <__sflush_r+0xfe>
 81194ec:	89a3      	ldrh	r3, [r4, #12]
 81194ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 81194f2:	81a3      	strh	r3, [r4, #12]
 81194f4:	f04f 30ff 	mov.w	r0, #4294967295
 81194f8:	e78e      	b.n	8119418 <__sflush_r+0x1c>
 81194fa:	4407      	add	r7, r0
 81194fc:	eba8 0800 	sub.w	r8, r8, r0
 8119500:	e7e9      	b.n	81194d6 <__sflush_r+0xda>
 8119502:	bf00      	nop
 8119504:	20400001 	.word	0x20400001

08119508 <_fflush_r>:
 8119508:	b538      	push	{r3, r4, r5, lr}
 811950a:	690b      	ldr	r3, [r1, #16]
 811950c:	4605      	mov	r5, r0
 811950e:	460c      	mov	r4, r1
 8119510:	b913      	cbnz	r3, 8119518 <_fflush_r+0x10>
 8119512:	2500      	movs	r5, #0
 8119514:	4628      	mov	r0, r5
 8119516:	bd38      	pop	{r3, r4, r5, pc}
 8119518:	b118      	cbz	r0, 8119522 <_fflush_r+0x1a>
 811951a:	6983      	ldr	r3, [r0, #24]
 811951c:	b90b      	cbnz	r3, 8119522 <_fflush_r+0x1a>
 811951e:	f000 f887 	bl	8119630 <__sinit>
 8119522:	4b14      	ldr	r3, [pc, #80]	; (8119574 <_fflush_r+0x6c>)
 8119524:	429c      	cmp	r4, r3
 8119526:	d11b      	bne.n	8119560 <_fflush_r+0x58>
 8119528:	686c      	ldr	r4, [r5, #4]
 811952a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 811952e:	2b00      	cmp	r3, #0
 8119530:	d0ef      	beq.n	8119512 <_fflush_r+0xa>
 8119532:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8119534:	07d0      	lsls	r0, r2, #31
 8119536:	d404      	bmi.n	8119542 <_fflush_r+0x3a>
 8119538:	0599      	lsls	r1, r3, #22
 811953a:	d402      	bmi.n	8119542 <_fflush_r+0x3a>
 811953c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 811953e:	f000 f915 	bl	811976c <__retarget_lock_acquire_recursive>
 8119542:	4628      	mov	r0, r5
 8119544:	4621      	mov	r1, r4
 8119546:	f7ff ff59 	bl	81193fc <__sflush_r>
 811954a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 811954c:	07da      	lsls	r2, r3, #31
 811954e:	4605      	mov	r5, r0
 8119550:	d4e0      	bmi.n	8119514 <_fflush_r+0xc>
 8119552:	89a3      	ldrh	r3, [r4, #12]
 8119554:	059b      	lsls	r3, r3, #22
 8119556:	d4dd      	bmi.n	8119514 <_fflush_r+0xc>
 8119558:	6da0      	ldr	r0, [r4, #88]	; 0x58
 811955a:	f000 f908 	bl	811976e <__retarget_lock_release_recursive>
 811955e:	e7d9      	b.n	8119514 <_fflush_r+0xc>
 8119560:	4b05      	ldr	r3, [pc, #20]	; (8119578 <_fflush_r+0x70>)
 8119562:	429c      	cmp	r4, r3
 8119564:	d101      	bne.n	811956a <_fflush_r+0x62>
 8119566:	68ac      	ldr	r4, [r5, #8]
 8119568:	e7df      	b.n	811952a <_fflush_r+0x22>
 811956a:	4b04      	ldr	r3, [pc, #16]	; (811957c <_fflush_r+0x74>)
 811956c:	429c      	cmp	r4, r3
 811956e:	bf08      	it	eq
 8119570:	68ec      	ldreq	r4, [r5, #12]
 8119572:	e7da      	b.n	811952a <_fflush_r+0x22>
 8119574:	08119ef4 	.word	0x08119ef4
 8119578:	08119f14 	.word	0x08119f14
 811957c:	08119ed4 	.word	0x08119ed4

08119580 <std>:
 8119580:	2300      	movs	r3, #0
 8119582:	b510      	push	{r4, lr}
 8119584:	4604      	mov	r4, r0
 8119586:	e9c0 3300 	strd	r3, r3, [r0]
 811958a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 811958e:	6083      	str	r3, [r0, #8]
 8119590:	8181      	strh	r1, [r0, #12]
 8119592:	6643      	str	r3, [r0, #100]	; 0x64
 8119594:	81c2      	strh	r2, [r0, #14]
 8119596:	6183      	str	r3, [r0, #24]
 8119598:	4619      	mov	r1, r3
 811959a:	2208      	movs	r2, #8
 811959c:	305c      	adds	r0, #92	; 0x5c
 811959e:	f7fd fd6f 	bl	8117080 <memset>
 81195a2:	4b05      	ldr	r3, [pc, #20]	; (81195b8 <std+0x38>)
 81195a4:	6263      	str	r3, [r4, #36]	; 0x24
 81195a6:	4b05      	ldr	r3, [pc, #20]	; (81195bc <std+0x3c>)
 81195a8:	62a3      	str	r3, [r4, #40]	; 0x28
 81195aa:	4b05      	ldr	r3, [pc, #20]	; (81195c0 <std+0x40>)
 81195ac:	62e3      	str	r3, [r4, #44]	; 0x2c
 81195ae:	4b05      	ldr	r3, [pc, #20]	; (81195c4 <std+0x44>)
 81195b0:	6224      	str	r4, [r4, #32]
 81195b2:	6323      	str	r3, [r4, #48]	; 0x30
 81195b4:	bd10      	pop	{r4, pc}
 81195b6:	bf00      	nop
 81195b8:	081198c1 	.word	0x081198c1
 81195bc:	081198e3 	.word	0x081198e3
 81195c0:	0811991b 	.word	0x0811991b
 81195c4:	0811993f 	.word	0x0811993f

081195c8 <_cleanup_r>:
 81195c8:	4901      	ldr	r1, [pc, #4]	; (81195d0 <_cleanup_r+0x8>)
 81195ca:	f000 b8af 	b.w	811972c <_fwalk_reent>
 81195ce:	bf00      	nop
 81195d0:	08119509 	.word	0x08119509

081195d4 <__sfmoreglue>:
 81195d4:	b570      	push	{r4, r5, r6, lr}
 81195d6:	1e4a      	subs	r2, r1, #1
 81195d8:	2568      	movs	r5, #104	; 0x68
 81195da:	4355      	muls	r5, r2
 81195dc:	460e      	mov	r6, r1
 81195de:	f105 0174 	add.w	r1, r5, #116	; 0x74
 81195e2:	f7ff fc23 	bl	8118e2c <_malloc_r>
 81195e6:	4604      	mov	r4, r0
 81195e8:	b140      	cbz	r0, 81195fc <__sfmoreglue+0x28>
 81195ea:	2100      	movs	r1, #0
 81195ec:	e9c0 1600 	strd	r1, r6, [r0]
 81195f0:	300c      	adds	r0, #12
 81195f2:	60a0      	str	r0, [r4, #8]
 81195f4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 81195f8:	f7fd fd42 	bl	8117080 <memset>
 81195fc:	4620      	mov	r0, r4
 81195fe:	bd70      	pop	{r4, r5, r6, pc}

08119600 <__sfp_lock_acquire>:
 8119600:	4801      	ldr	r0, [pc, #4]	; (8119608 <__sfp_lock_acquire+0x8>)
 8119602:	f000 b8b3 	b.w	811976c <__retarget_lock_acquire_recursive>
 8119606:	bf00      	nop
 8119608:	100076dc 	.word	0x100076dc

0811960c <__sfp_lock_release>:
 811960c:	4801      	ldr	r0, [pc, #4]	; (8119614 <__sfp_lock_release+0x8>)
 811960e:	f000 b8ae 	b.w	811976e <__retarget_lock_release_recursive>
 8119612:	bf00      	nop
 8119614:	100076dc 	.word	0x100076dc

08119618 <__sinit_lock_acquire>:
 8119618:	4801      	ldr	r0, [pc, #4]	; (8119620 <__sinit_lock_acquire+0x8>)
 811961a:	f000 b8a7 	b.w	811976c <__retarget_lock_acquire_recursive>
 811961e:	bf00      	nop
 8119620:	100076d7 	.word	0x100076d7

08119624 <__sinit_lock_release>:
 8119624:	4801      	ldr	r0, [pc, #4]	; (811962c <__sinit_lock_release+0x8>)
 8119626:	f000 b8a2 	b.w	811976e <__retarget_lock_release_recursive>
 811962a:	bf00      	nop
 811962c:	100076d7 	.word	0x100076d7

08119630 <__sinit>:
 8119630:	b510      	push	{r4, lr}
 8119632:	4604      	mov	r4, r0
 8119634:	f7ff fff0 	bl	8119618 <__sinit_lock_acquire>
 8119638:	69a3      	ldr	r3, [r4, #24]
 811963a:	b11b      	cbz	r3, 8119644 <__sinit+0x14>
 811963c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8119640:	f7ff bff0 	b.w	8119624 <__sinit_lock_release>
 8119644:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8119648:	6523      	str	r3, [r4, #80]	; 0x50
 811964a:	4b13      	ldr	r3, [pc, #76]	; (8119698 <__sinit+0x68>)
 811964c:	4a13      	ldr	r2, [pc, #76]	; (811969c <__sinit+0x6c>)
 811964e:	681b      	ldr	r3, [r3, #0]
 8119650:	62a2      	str	r2, [r4, #40]	; 0x28
 8119652:	42a3      	cmp	r3, r4
 8119654:	bf04      	itt	eq
 8119656:	2301      	moveq	r3, #1
 8119658:	61a3      	streq	r3, [r4, #24]
 811965a:	4620      	mov	r0, r4
 811965c:	f000 f820 	bl	81196a0 <__sfp>
 8119660:	6060      	str	r0, [r4, #4]
 8119662:	4620      	mov	r0, r4
 8119664:	f000 f81c 	bl	81196a0 <__sfp>
 8119668:	60a0      	str	r0, [r4, #8]
 811966a:	4620      	mov	r0, r4
 811966c:	f000 f818 	bl	81196a0 <__sfp>
 8119670:	2200      	movs	r2, #0
 8119672:	60e0      	str	r0, [r4, #12]
 8119674:	2104      	movs	r1, #4
 8119676:	6860      	ldr	r0, [r4, #4]
 8119678:	f7ff ff82 	bl	8119580 <std>
 811967c:	68a0      	ldr	r0, [r4, #8]
 811967e:	2201      	movs	r2, #1
 8119680:	2109      	movs	r1, #9
 8119682:	f7ff ff7d 	bl	8119580 <std>
 8119686:	68e0      	ldr	r0, [r4, #12]
 8119688:	2202      	movs	r2, #2
 811968a:	2112      	movs	r1, #18
 811968c:	f7ff ff78 	bl	8119580 <std>
 8119690:	2301      	movs	r3, #1
 8119692:	61a3      	str	r3, [r4, #24]
 8119694:	e7d2      	b.n	811963c <__sinit+0xc>
 8119696:	bf00      	nop
 8119698:	08119b50 	.word	0x08119b50
 811969c:	081195c9 	.word	0x081195c9

081196a0 <__sfp>:
 81196a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 81196a2:	4607      	mov	r7, r0
 81196a4:	f7ff ffac 	bl	8119600 <__sfp_lock_acquire>
 81196a8:	4b1e      	ldr	r3, [pc, #120]	; (8119724 <__sfp+0x84>)
 81196aa:	681e      	ldr	r6, [r3, #0]
 81196ac:	69b3      	ldr	r3, [r6, #24]
 81196ae:	b913      	cbnz	r3, 81196b6 <__sfp+0x16>
 81196b0:	4630      	mov	r0, r6
 81196b2:	f7ff ffbd 	bl	8119630 <__sinit>
 81196b6:	3648      	adds	r6, #72	; 0x48
 81196b8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 81196bc:	3b01      	subs	r3, #1
 81196be:	d503      	bpl.n	81196c8 <__sfp+0x28>
 81196c0:	6833      	ldr	r3, [r6, #0]
 81196c2:	b30b      	cbz	r3, 8119708 <__sfp+0x68>
 81196c4:	6836      	ldr	r6, [r6, #0]
 81196c6:	e7f7      	b.n	81196b8 <__sfp+0x18>
 81196c8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 81196cc:	b9d5      	cbnz	r5, 8119704 <__sfp+0x64>
 81196ce:	4b16      	ldr	r3, [pc, #88]	; (8119728 <__sfp+0x88>)
 81196d0:	60e3      	str	r3, [r4, #12]
 81196d2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 81196d6:	6665      	str	r5, [r4, #100]	; 0x64
 81196d8:	f000 f847 	bl	811976a <__retarget_lock_init_recursive>
 81196dc:	f7ff ff96 	bl	811960c <__sfp_lock_release>
 81196e0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 81196e4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 81196e8:	6025      	str	r5, [r4, #0]
 81196ea:	61a5      	str	r5, [r4, #24]
 81196ec:	2208      	movs	r2, #8
 81196ee:	4629      	mov	r1, r5
 81196f0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 81196f4:	f7fd fcc4 	bl	8117080 <memset>
 81196f8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 81196fc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8119700:	4620      	mov	r0, r4
 8119702:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8119704:	3468      	adds	r4, #104	; 0x68
 8119706:	e7d9      	b.n	81196bc <__sfp+0x1c>
 8119708:	2104      	movs	r1, #4
 811970a:	4638      	mov	r0, r7
 811970c:	f7ff ff62 	bl	81195d4 <__sfmoreglue>
 8119710:	4604      	mov	r4, r0
 8119712:	6030      	str	r0, [r6, #0]
 8119714:	2800      	cmp	r0, #0
 8119716:	d1d5      	bne.n	81196c4 <__sfp+0x24>
 8119718:	f7ff ff78 	bl	811960c <__sfp_lock_release>
 811971c:	230c      	movs	r3, #12
 811971e:	603b      	str	r3, [r7, #0]
 8119720:	e7ee      	b.n	8119700 <__sfp+0x60>
 8119722:	bf00      	nop
 8119724:	08119b50 	.word	0x08119b50
 8119728:	ffff0001 	.word	0xffff0001

0811972c <_fwalk_reent>:
 811972c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8119730:	4606      	mov	r6, r0
 8119732:	4688      	mov	r8, r1
 8119734:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8119738:	2700      	movs	r7, #0
 811973a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 811973e:	f1b9 0901 	subs.w	r9, r9, #1
 8119742:	d505      	bpl.n	8119750 <_fwalk_reent+0x24>
 8119744:	6824      	ldr	r4, [r4, #0]
 8119746:	2c00      	cmp	r4, #0
 8119748:	d1f7      	bne.n	811973a <_fwalk_reent+0xe>
 811974a:	4638      	mov	r0, r7
 811974c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8119750:	89ab      	ldrh	r3, [r5, #12]
 8119752:	2b01      	cmp	r3, #1
 8119754:	d907      	bls.n	8119766 <_fwalk_reent+0x3a>
 8119756:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 811975a:	3301      	adds	r3, #1
 811975c:	d003      	beq.n	8119766 <_fwalk_reent+0x3a>
 811975e:	4629      	mov	r1, r5
 8119760:	4630      	mov	r0, r6
 8119762:	47c0      	blx	r8
 8119764:	4307      	orrs	r7, r0
 8119766:	3568      	adds	r5, #104	; 0x68
 8119768:	e7e9      	b.n	811973e <_fwalk_reent+0x12>

0811976a <__retarget_lock_init_recursive>:
 811976a:	4770      	bx	lr

0811976c <__retarget_lock_acquire_recursive>:
 811976c:	4770      	bx	lr

0811976e <__retarget_lock_release_recursive>:
 811976e:	4770      	bx	lr

08119770 <__swhatbuf_r>:
 8119770:	b570      	push	{r4, r5, r6, lr}
 8119772:	460e      	mov	r6, r1
 8119774:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8119778:	2900      	cmp	r1, #0
 811977a:	b096      	sub	sp, #88	; 0x58
 811977c:	4614      	mov	r4, r2
 811977e:	461d      	mov	r5, r3
 8119780:	da07      	bge.n	8119792 <__swhatbuf_r+0x22>
 8119782:	2300      	movs	r3, #0
 8119784:	602b      	str	r3, [r5, #0]
 8119786:	89b3      	ldrh	r3, [r6, #12]
 8119788:	061a      	lsls	r2, r3, #24
 811978a:	d410      	bmi.n	81197ae <__swhatbuf_r+0x3e>
 811978c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8119790:	e00e      	b.n	81197b0 <__swhatbuf_r+0x40>
 8119792:	466a      	mov	r2, sp
 8119794:	f000 f8fa 	bl	811998c <_fstat_r>
 8119798:	2800      	cmp	r0, #0
 811979a:	dbf2      	blt.n	8119782 <__swhatbuf_r+0x12>
 811979c:	9a01      	ldr	r2, [sp, #4]
 811979e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 81197a2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 81197a6:	425a      	negs	r2, r3
 81197a8:	415a      	adcs	r2, r3
 81197aa:	602a      	str	r2, [r5, #0]
 81197ac:	e7ee      	b.n	811978c <__swhatbuf_r+0x1c>
 81197ae:	2340      	movs	r3, #64	; 0x40
 81197b0:	2000      	movs	r0, #0
 81197b2:	6023      	str	r3, [r4, #0]
 81197b4:	b016      	add	sp, #88	; 0x58
 81197b6:	bd70      	pop	{r4, r5, r6, pc}

081197b8 <__smakebuf_r>:
 81197b8:	898b      	ldrh	r3, [r1, #12]
 81197ba:	b573      	push	{r0, r1, r4, r5, r6, lr}
 81197bc:	079d      	lsls	r5, r3, #30
 81197be:	4606      	mov	r6, r0
 81197c0:	460c      	mov	r4, r1
 81197c2:	d507      	bpl.n	81197d4 <__smakebuf_r+0x1c>
 81197c4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 81197c8:	6023      	str	r3, [r4, #0]
 81197ca:	6123      	str	r3, [r4, #16]
 81197cc:	2301      	movs	r3, #1
 81197ce:	6163      	str	r3, [r4, #20]
 81197d0:	b002      	add	sp, #8
 81197d2:	bd70      	pop	{r4, r5, r6, pc}
 81197d4:	ab01      	add	r3, sp, #4
 81197d6:	466a      	mov	r2, sp
 81197d8:	f7ff ffca 	bl	8119770 <__swhatbuf_r>
 81197dc:	9900      	ldr	r1, [sp, #0]
 81197de:	4605      	mov	r5, r0
 81197e0:	4630      	mov	r0, r6
 81197e2:	f7ff fb23 	bl	8118e2c <_malloc_r>
 81197e6:	b948      	cbnz	r0, 81197fc <__smakebuf_r+0x44>
 81197e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 81197ec:	059a      	lsls	r2, r3, #22
 81197ee:	d4ef      	bmi.n	81197d0 <__smakebuf_r+0x18>
 81197f0:	f023 0303 	bic.w	r3, r3, #3
 81197f4:	f043 0302 	orr.w	r3, r3, #2
 81197f8:	81a3      	strh	r3, [r4, #12]
 81197fa:	e7e3      	b.n	81197c4 <__smakebuf_r+0xc>
 81197fc:	4b0d      	ldr	r3, [pc, #52]	; (8119834 <__smakebuf_r+0x7c>)
 81197fe:	62b3      	str	r3, [r6, #40]	; 0x28
 8119800:	89a3      	ldrh	r3, [r4, #12]
 8119802:	6020      	str	r0, [r4, #0]
 8119804:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8119808:	81a3      	strh	r3, [r4, #12]
 811980a:	9b00      	ldr	r3, [sp, #0]
 811980c:	6163      	str	r3, [r4, #20]
 811980e:	9b01      	ldr	r3, [sp, #4]
 8119810:	6120      	str	r0, [r4, #16]
 8119812:	b15b      	cbz	r3, 811982c <__smakebuf_r+0x74>
 8119814:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8119818:	4630      	mov	r0, r6
 811981a:	f000 f8c9 	bl	81199b0 <_isatty_r>
 811981e:	b128      	cbz	r0, 811982c <__smakebuf_r+0x74>
 8119820:	89a3      	ldrh	r3, [r4, #12]
 8119822:	f023 0303 	bic.w	r3, r3, #3
 8119826:	f043 0301 	orr.w	r3, r3, #1
 811982a:	81a3      	strh	r3, [r4, #12]
 811982c:	89a0      	ldrh	r0, [r4, #12]
 811982e:	4305      	orrs	r5, r0
 8119830:	81a5      	strh	r5, [r4, #12]
 8119832:	e7cd      	b.n	81197d0 <__smakebuf_r+0x18>
 8119834:	081195c9 	.word	0x081195c9

08119838 <_raise_r>:
 8119838:	291f      	cmp	r1, #31
 811983a:	b538      	push	{r3, r4, r5, lr}
 811983c:	4604      	mov	r4, r0
 811983e:	460d      	mov	r5, r1
 8119840:	d904      	bls.n	811984c <_raise_r+0x14>
 8119842:	2316      	movs	r3, #22
 8119844:	6003      	str	r3, [r0, #0]
 8119846:	f04f 30ff 	mov.w	r0, #4294967295
 811984a:	bd38      	pop	{r3, r4, r5, pc}
 811984c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 811984e:	b112      	cbz	r2, 8119856 <_raise_r+0x1e>
 8119850:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8119854:	b94b      	cbnz	r3, 811986a <_raise_r+0x32>
 8119856:	4620      	mov	r0, r4
 8119858:	f000 f830 	bl	81198bc <_getpid_r>
 811985c:	462a      	mov	r2, r5
 811985e:	4601      	mov	r1, r0
 8119860:	4620      	mov	r0, r4
 8119862:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8119866:	f000 b817 	b.w	8119898 <_kill_r>
 811986a:	2b01      	cmp	r3, #1
 811986c:	d00a      	beq.n	8119884 <_raise_r+0x4c>
 811986e:	1c59      	adds	r1, r3, #1
 8119870:	d103      	bne.n	811987a <_raise_r+0x42>
 8119872:	2316      	movs	r3, #22
 8119874:	6003      	str	r3, [r0, #0]
 8119876:	2001      	movs	r0, #1
 8119878:	e7e7      	b.n	811984a <_raise_r+0x12>
 811987a:	2400      	movs	r4, #0
 811987c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8119880:	4628      	mov	r0, r5
 8119882:	4798      	blx	r3
 8119884:	2000      	movs	r0, #0
 8119886:	e7e0      	b.n	811984a <_raise_r+0x12>

08119888 <raise>:
 8119888:	4b02      	ldr	r3, [pc, #8]	; (8119894 <raise+0xc>)
 811988a:	4601      	mov	r1, r0
 811988c:	6818      	ldr	r0, [r3, #0]
 811988e:	f7ff bfd3 	b.w	8119838 <_raise_r>
 8119892:	bf00      	nop
 8119894:	10000014 	.word	0x10000014

08119898 <_kill_r>:
 8119898:	b538      	push	{r3, r4, r5, lr}
 811989a:	4d07      	ldr	r5, [pc, #28]	; (81198b8 <_kill_r+0x20>)
 811989c:	2300      	movs	r3, #0
 811989e:	4604      	mov	r4, r0
 81198a0:	4608      	mov	r0, r1
 81198a2:	4611      	mov	r1, r2
 81198a4:	602b      	str	r3, [r5, #0]
 81198a6:	f7e8 fcbb 	bl	8102220 <_kill>
 81198aa:	1c43      	adds	r3, r0, #1
 81198ac:	d102      	bne.n	81198b4 <_kill_r+0x1c>
 81198ae:	682b      	ldr	r3, [r5, #0]
 81198b0:	b103      	cbz	r3, 81198b4 <_kill_r+0x1c>
 81198b2:	6023      	str	r3, [r4, #0]
 81198b4:	bd38      	pop	{r3, r4, r5, pc}
 81198b6:	bf00      	nop
 81198b8:	100076d0 	.word	0x100076d0

081198bc <_getpid_r>:
 81198bc:	f7e8 bca8 	b.w	8102210 <_getpid>

081198c0 <__sread>:
 81198c0:	b510      	push	{r4, lr}
 81198c2:	460c      	mov	r4, r1
 81198c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 81198c8:	f000 f894 	bl	81199f4 <_read_r>
 81198cc:	2800      	cmp	r0, #0
 81198ce:	bfab      	itete	ge
 81198d0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 81198d2:	89a3      	ldrhlt	r3, [r4, #12]
 81198d4:	181b      	addge	r3, r3, r0
 81198d6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 81198da:	bfac      	ite	ge
 81198dc:	6563      	strge	r3, [r4, #84]	; 0x54
 81198de:	81a3      	strhlt	r3, [r4, #12]
 81198e0:	bd10      	pop	{r4, pc}

081198e2 <__swrite>:
 81198e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 81198e6:	461f      	mov	r7, r3
 81198e8:	898b      	ldrh	r3, [r1, #12]
 81198ea:	05db      	lsls	r3, r3, #23
 81198ec:	4605      	mov	r5, r0
 81198ee:	460c      	mov	r4, r1
 81198f0:	4616      	mov	r6, r2
 81198f2:	d505      	bpl.n	8119900 <__swrite+0x1e>
 81198f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 81198f8:	2302      	movs	r3, #2
 81198fa:	2200      	movs	r2, #0
 81198fc:	f000 f868 	bl	81199d0 <_lseek_r>
 8119900:	89a3      	ldrh	r3, [r4, #12]
 8119902:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8119906:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 811990a:	81a3      	strh	r3, [r4, #12]
 811990c:	4632      	mov	r2, r6
 811990e:	463b      	mov	r3, r7
 8119910:	4628      	mov	r0, r5
 8119912:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8119916:	f000 b817 	b.w	8119948 <_write_r>

0811991a <__sseek>:
 811991a:	b510      	push	{r4, lr}
 811991c:	460c      	mov	r4, r1
 811991e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8119922:	f000 f855 	bl	81199d0 <_lseek_r>
 8119926:	1c43      	adds	r3, r0, #1
 8119928:	89a3      	ldrh	r3, [r4, #12]
 811992a:	bf15      	itete	ne
 811992c:	6560      	strne	r0, [r4, #84]	; 0x54
 811992e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8119932:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8119936:	81a3      	strheq	r3, [r4, #12]
 8119938:	bf18      	it	ne
 811993a:	81a3      	strhne	r3, [r4, #12]
 811993c:	bd10      	pop	{r4, pc}

0811993e <__sclose>:
 811993e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8119942:	f000 b813 	b.w	811996c <_close_r>
	...

08119948 <_write_r>:
 8119948:	b538      	push	{r3, r4, r5, lr}
 811994a:	4d07      	ldr	r5, [pc, #28]	; (8119968 <_write_r+0x20>)
 811994c:	4604      	mov	r4, r0
 811994e:	4608      	mov	r0, r1
 8119950:	4611      	mov	r1, r2
 8119952:	2200      	movs	r2, #0
 8119954:	602a      	str	r2, [r5, #0]
 8119956:	461a      	mov	r2, r3
 8119958:	f7e8 fc99 	bl	810228e <_write>
 811995c:	1c43      	adds	r3, r0, #1
 811995e:	d102      	bne.n	8119966 <_write_r+0x1e>
 8119960:	682b      	ldr	r3, [r5, #0]
 8119962:	b103      	cbz	r3, 8119966 <_write_r+0x1e>
 8119964:	6023      	str	r3, [r4, #0]
 8119966:	bd38      	pop	{r3, r4, r5, pc}
 8119968:	100076d0 	.word	0x100076d0

0811996c <_close_r>:
 811996c:	b538      	push	{r3, r4, r5, lr}
 811996e:	4d06      	ldr	r5, [pc, #24]	; (8119988 <_close_r+0x1c>)
 8119970:	2300      	movs	r3, #0
 8119972:	4604      	mov	r4, r0
 8119974:	4608      	mov	r0, r1
 8119976:	602b      	str	r3, [r5, #0]
 8119978:	f7e8 fca5 	bl	81022c6 <_close>
 811997c:	1c43      	adds	r3, r0, #1
 811997e:	d102      	bne.n	8119986 <_close_r+0x1a>
 8119980:	682b      	ldr	r3, [r5, #0]
 8119982:	b103      	cbz	r3, 8119986 <_close_r+0x1a>
 8119984:	6023      	str	r3, [r4, #0]
 8119986:	bd38      	pop	{r3, r4, r5, pc}
 8119988:	100076d0 	.word	0x100076d0

0811998c <_fstat_r>:
 811998c:	b538      	push	{r3, r4, r5, lr}
 811998e:	4d07      	ldr	r5, [pc, #28]	; (81199ac <_fstat_r+0x20>)
 8119990:	2300      	movs	r3, #0
 8119992:	4604      	mov	r4, r0
 8119994:	4608      	mov	r0, r1
 8119996:	4611      	mov	r1, r2
 8119998:	602b      	str	r3, [r5, #0]
 811999a:	f7e8 fca0 	bl	81022de <_fstat>
 811999e:	1c43      	adds	r3, r0, #1
 81199a0:	d102      	bne.n	81199a8 <_fstat_r+0x1c>
 81199a2:	682b      	ldr	r3, [r5, #0]
 81199a4:	b103      	cbz	r3, 81199a8 <_fstat_r+0x1c>
 81199a6:	6023      	str	r3, [r4, #0]
 81199a8:	bd38      	pop	{r3, r4, r5, pc}
 81199aa:	bf00      	nop
 81199ac:	100076d0 	.word	0x100076d0

081199b0 <_isatty_r>:
 81199b0:	b538      	push	{r3, r4, r5, lr}
 81199b2:	4d06      	ldr	r5, [pc, #24]	; (81199cc <_isatty_r+0x1c>)
 81199b4:	2300      	movs	r3, #0
 81199b6:	4604      	mov	r4, r0
 81199b8:	4608      	mov	r0, r1
 81199ba:	602b      	str	r3, [r5, #0]
 81199bc:	f7e8 fc9f 	bl	81022fe <_isatty>
 81199c0:	1c43      	adds	r3, r0, #1
 81199c2:	d102      	bne.n	81199ca <_isatty_r+0x1a>
 81199c4:	682b      	ldr	r3, [r5, #0]
 81199c6:	b103      	cbz	r3, 81199ca <_isatty_r+0x1a>
 81199c8:	6023      	str	r3, [r4, #0]
 81199ca:	bd38      	pop	{r3, r4, r5, pc}
 81199cc:	100076d0 	.word	0x100076d0

081199d0 <_lseek_r>:
 81199d0:	b538      	push	{r3, r4, r5, lr}
 81199d2:	4d07      	ldr	r5, [pc, #28]	; (81199f0 <_lseek_r+0x20>)
 81199d4:	4604      	mov	r4, r0
 81199d6:	4608      	mov	r0, r1
 81199d8:	4611      	mov	r1, r2
 81199da:	2200      	movs	r2, #0
 81199dc:	602a      	str	r2, [r5, #0]
 81199de:	461a      	mov	r2, r3
 81199e0:	f7e8 fc98 	bl	8102314 <_lseek>
 81199e4:	1c43      	adds	r3, r0, #1
 81199e6:	d102      	bne.n	81199ee <_lseek_r+0x1e>
 81199e8:	682b      	ldr	r3, [r5, #0]
 81199ea:	b103      	cbz	r3, 81199ee <_lseek_r+0x1e>
 81199ec:	6023      	str	r3, [r4, #0]
 81199ee:	bd38      	pop	{r3, r4, r5, pc}
 81199f0:	100076d0 	.word	0x100076d0

081199f4 <_read_r>:
 81199f4:	b538      	push	{r3, r4, r5, lr}
 81199f6:	4d07      	ldr	r5, [pc, #28]	; (8119a14 <_read_r+0x20>)
 81199f8:	4604      	mov	r4, r0
 81199fa:	4608      	mov	r0, r1
 81199fc:	4611      	mov	r1, r2
 81199fe:	2200      	movs	r2, #0
 8119a00:	602a      	str	r2, [r5, #0]
 8119a02:	461a      	mov	r2, r3
 8119a04:	f7e8 fc26 	bl	8102254 <_read>
 8119a08:	1c43      	adds	r3, r0, #1
 8119a0a:	d102      	bne.n	8119a12 <_read_r+0x1e>
 8119a0c:	682b      	ldr	r3, [r5, #0]
 8119a0e:	b103      	cbz	r3, 8119a12 <_read_r+0x1e>
 8119a10:	6023      	str	r3, [r4, #0]
 8119a12:	bd38      	pop	{r3, r4, r5, pc}
 8119a14:	100076d0 	.word	0x100076d0

08119a18 <_init>:
 8119a18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8119a1a:	bf00      	nop
 8119a1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8119a1e:	bc08      	pop	{r3}
 8119a20:	469e      	mov	lr, r3
 8119a22:	4770      	bx	lr

08119a24 <_fini>:
 8119a24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8119a26:	bf00      	nop
 8119a28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8119a2a:	bc08      	pop	{r3}
 8119a2c:	469e      	mov	lr, r3
 8119a2e:	4770      	bx	lr
