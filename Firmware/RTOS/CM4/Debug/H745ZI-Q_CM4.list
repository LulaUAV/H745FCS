
H745ZI-Q_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08100000  08100000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001b660  081002a0  081002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000054c  0811b900  0811b900  0002b900  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0811be4c  0811be4c  0002be4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0811be54  0811be54  0002be54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0811be58  0811be58  0002be58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000358  10000000  0811be5c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00008bec  10000358  0811c1b4  00030358  2**2
                  ALLOC
  8 .RAM_D3       00000000  38000000  38000000  00030358  2**0
                  CONTENTS
  9 ._user_heap_stack 00000604  10008f44  10008f44  00038f44  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  00030358  2**0
                  CONTENTS, READONLY
 11 .debug_info   0006375a  00000000  00000000  00030388  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 0000a660  00000000  00000000  00093ae2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 000030e0  00000000  00000000  0009e148  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_ranges 00002d58  00000000  00000000  000a1228  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00048ff1  00000000  00000000  000a3f80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   000438c7  00000000  00000000  000ecf71  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    001b2824  00000000  00000000  00130838  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000053  00000000  00000000  002e305c  2**0
                  CONTENTS, READONLY
 19 .debug_frame  0000dd80  00000000  00000000  002e30b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

081002a0 <__do_global_dtors_aux>:
 81002a0:	b510      	push	{r4, lr}
 81002a2:	4c05      	ldr	r4, [pc, #20]	; (81002b8 <__do_global_dtors_aux+0x18>)
 81002a4:	7823      	ldrb	r3, [r4, #0]
 81002a6:	b933      	cbnz	r3, 81002b6 <__do_global_dtors_aux+0x16>
 81002a8:	4b04      	ldr	r3, [pc, #16]	; (81002bc <__do_global_dtors_aux+0x1c>)
 81002aa:	b113      	cbz	r3, 81002b2 <__do_global_dtors_aux+0x12>
 81002ac:	4804      	ldr	r0, [pc, #16]	; (81002c0 <__do_global_dtors_aux+0x20>)
 81002ae:	f3af 8000 	nop.w
 81002b2:	2301      	movs	r3, #1
 81002b4:	7023      	strb	r3, [r4, #0]
 81002b6:	bd10      	pop	{r4, pc}
 81002b8:	10000358 	.word	0x10000358
 81002bc:	00000000 	.word	0x00000000
 81002c0:	0811b8e8 	.word	0x0811b8e8

081002c4 <frame_dummy>:
 81002c4:	b508      	push	{r3, lr}
 81002c6:	4b03      	ldr	r3, [pc, #12]	; (81002d4 <frame_dummy+0x10>)
 81002c8:	b11b      	cbz	r3, 81002d2 <frame_dummy+0xe>
 81002ca:	4903      	ldr	r1, [pc, #12]	; (81002d8 <frame_dummy+0x14>)
 81002cc:	4803      	ldr	r0, [pc, #12]	; (81002dc <frame_dummy+0x18>)
 81002ce:	f3af 8000 	nop.w
 81002d2:	bd08      	pop	{r3, pc}
 81002d4:	00000000 	.word	0x00000000
 81002d8:	1000035c 	.word	0x1000035c
 81002dc:	0811b8e8 	.word	0x0811b8e8

081002e0 <strlen>:
 81002e0:	4603      	mov	r3, r0
 81002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 81002e6:	2a00      	cmp	r2, #0
 81002e8:	d1fb      	bne.n	81002e2 <strlen+0x2>
 81002ea:	1a18      	subs	r0, r3, r0
 81002ec:	3801      	subs	r0, #1
 81002ee:	4770      	bx	lr

081002f0 <memchr>:
 81002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 81002f4:	2a10      	cmp	r2, #16
 81002f6:	db2b      	blt.n	8100350 <memchr+0x60>
 81002f8:	f010 0f07 	tst.w	r0, #7
 81002fc:	d008      	beq.n	8100310 <memchr+0x20>
 81002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8100302:	3a01      	subs	r2, #1
 8100304:	428b      	cmp	r3, r1
 8100306:	d02d      	beq.n	8100364 <memchr+0x74>
 8100308:	f010 0f07 	tst.w	r0, #7
 810030c:	b342      	cbz	r2, 8100360 <memchr+0x70>
 810030e:	d1f6      	bne.n	81002fe <memchr+0xe>
 8100310:	b4f0      	push	{r4, r5, r6, r7}
 8100312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8100316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 810031a:	f022 0407 	bic.w	r4, r2, #7
 810031e:	f07f 0700 	mvns.w	r7, #0
 8100322:	2300      	movs	r3, #0
 8100324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8100328:	3c08      	subs	r4, #8
 810032a:	ea85 0501 	eor.w	r5, r5, r1
 810032e:	ea86 0601 	eor.w	r6, r6, r1
 8100332:	fa85 f547 	uadd8	r5, r5, r7
 8100336:	faa3 f587 	sel	r5, r3, r7
 810033a:	fa86 f647 	uadd8	r6, r6, r7
 810033e:	faa5 f687 	sel	r6, r5, r7
 8100342:	b98e      	cbnz	r6, 8100368 <memchr+0x78>
 8100344:	d1ee      	bne.n	8100324 <memchr+0x34>
 8100346:	bcf0      	pop	{r4, r5, r6, r7}
 8100348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 810034c:	f002 0207 	and.w	r2, r2, #7
 8100350:	b132      	cbz	r2, 8100360 <memchr+0x70>
 8100352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8100356:	3a01      	subs	r2, #1
 8100358:	ea83 0301 	eor.w	r3, r3, r1
 810035c:	b113      	cbz	r3, 8100364 <memchr+0x74>
 810035e:	d1f8      	bne.n	8100352 <memchr+0x62>
 8100360:	2000      	movs	r0, #0
 8100362:	4770      	bx	lr
 8100364:	3801      	subs	r0, #1
 8100366:	4770      	bx	lr
 8100368:	2d00      	cmp	r5, #0
 810036a:	bf06      	itte	eq
 810036c:	4635      	moveq	r5, r6
 810036e:	3803      	subeq	r0, #3
 8100370:	3807      	subne	r0, #7
 8100372:	f015 0f01 	tst.w	r5, #1
 8100376:	d107      	bne.n	8100388 <memchr+0x98>
 8100378:	3001      	adds	r0, #1
 810037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 810037e:	bf02      	ittt	eq
 8100380:	3001      	addeq	r0, #1
 8100382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8100386:	3001      	addeq	r0, #1
 8100388:	bcf0      	pop	{r4, r5, r6, r7}
 810038a:	3801      	subs	r0, #1
 810038c:	4770      	bx	lr
 810038e:	bf00      	nop

08100390 <__aeabi_drsub>:
 8100390:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8100394:	e002      	b.n	810039c <__adddf3>
 8100396:	bf00      	nop

08100398 <__aeabi_dsub>:
 8100398:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0810039c <__adddf3>:
 810039c:	b530      	push	{r4, r5, lr}
 810039e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 81003a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 81003a6:	ea94 0f05 	teq	r4, r5
 81003aa:	bf08      	it	eq
 81003ac:	ea90 0f02 	teqeq	r0, r2
 81003b0:	bf1f      	itttt	ne
 81003b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 81003b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 81003ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 81003be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 81003c2:	f000 80e2 	beq.w	810058a <__adddf3+0x1ee>
 81003c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 81003ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 81003ce:	bfb8      	it	lt
 81003d0:	426d      	neglt	r5, r5
 81003d2:	dd0c      	ble.n	81003ee <__adddf3+0x52>
 81003d4:	442c      	add	r4, r5
 81003d6:	ea80 0202 	eor.w	r2, r0, r2
 81003da:	ea81 0303 	eor.w	r3, r1, r3
 81003de:	ea82 0000 	eor.w	r0, r2, r0
 81003e2:	ea83 0101 	eor.w	r1, r3, r1
 81003e6:	ea80 0202 	eor.w	r2, r0, r2
 81003ea:	ea81 0303 	eor.w	r3, r1, r3
 81003ee:	2d36      	cmp	r5, #54	; 0x36
 81003f0:	bf88      	it	hi
 81003f2:	bd30      	pophi	{r4, r5, pc}
 81003f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 81003f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 81003fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8100400:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8100404:	d002      	beq.n	810040c <__adddf3+0x70>
 8100406:	4240      	negs	r0, r0
 8100408:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 810040c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8100410:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8100414:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8100418:	d002      	beq.n	8100420 <__adddf3+0x84>
 810041a:	4252      	negs	r2, r2
 810041c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8100420:	ea94 0f05 	teq	r4, r5
 8100424:	f000 80a7 	beq.w	8100576 <__adddf3+0x1da>
 8100428:	f1a4 0401 	sub.w	r4, r4, #1
 810042c:	f1d5 0e20 	rsbs	lr, r5, #32
 8100430:	db0d      	blt.n	810044e <__adddf3+0xb2>
 8100432:	fa02 fc0e 	lsl.w	ip, r2, lr
 8100436:	fa22 f205 	lsr.w	r2, r2, r5
 810043a:	1880      	adds	r0, r0, r2
 810043c:	f141 0100 	adc.w	r1, r1, #0
 8100440:	fa03 f20e 	lsl.w	r2, r3, lr
 8100444:	1880      	adds	r0, r0, r2
 8100446:	fa43 f305 	asr.w	r3, r3, r5
 810044a:	4159      	adcs	r1, r3
 810044c:	e00e      	b.n	810046c <__adddf3+0xd0>
 810044e:	f1a5 0520 	sub.w	r5, r5, #32
 8100452:	f10e 0e20 	add.w	lr, lr, #32
 8100456:	2a01      	cmp	r2, #1
 8100458:	fa03 fc0e 	lsl.w	ip, r3, lr
 810045c:	bf28      	it	cs
 810045e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8100462:	fa43 f305 	asr.w	r3, r3, r5
 8100466:	18c0      	adds	r0, r0, r3
 8100468:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 810046c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8100470:	d507      	bpl.n	8100482 <__adddf3+0xe6>
 8100472:	f04f 0e00 	mov.w	lr, #0
 8100476:	f1dc 0c00 	rsbs	ip, ip, #0
 810047a:	eb7e 0000 	sbcs.w	r0, lr, r0
 810047e:	eb6e 0101 	sbc.w	r1, lr, r1
 8100482:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8100486:	d31b      	bcc.n	81004c0 <__adddf3+0x124>
 8100488:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 810048c:	d30c      	bcc.n	81004a8 <__adddf3+0x10c>
 810048e:	0849      	lsrs	r1, r1, #1
 8100490:	ea5f 0030 	movs.w	r0, r0, rrx
 8100494:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8100498:	f104 0401 	add.w	r4, r4, #1
 810049c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 81004a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 81004a4:	f080 809a 	bcs.w	81005dc <__adddf3+0x240>
 81004a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 81004ac:	bf08      	it	eq
 81004ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 81004b2:	f150 0000 	adcs.w	r0, r0, #0
 81004b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 81004ba:	ea41 0105 	orr.w	r1, r1, r5
 81004be:	bd30      	pop	{r4, r5, pc}
 81004c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 81004c4:	4140      	adcs	r0, r0
 81004c6:	eb41 0101 	adc.w	r1, r1, r1
 81004ca:	3c01      	subs	r4, #1
 81004cc:	bf28      	it	cs
 81004ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 81004d2:	d2e9      	bcs.n	81004a8 <__adddf3+0x10c>
 81004d4:	f091 0f00 	teq	r1, #0
 81004d8:	bf04      	itt	eq
 81004da:	4601      	moveq	r1, r0
 81004dc:	2000      	moveq	r0, #0
 81004de:	fab1 f381 	clz	r3, r1
 81004e2:	bf08      	it	eq
 81004e4:	3320      	addeq	r3, #32
 81004e6:	f1a3 030b 	sub.w	r3, r3, #11
 81004ea:	f1b3 0220 	subs.w	r2, r3, #32
 81004ee:	da0c      	bge.n	810050a <__adddf3+0x16e>
 81004f0:	320c      	adds	r2, #12
 81004f2:	dd08      	ble.n	8100506 <__adddf3+0x16a>
 81004f4:	f102 0c14 	add.w	ip, r2, #20
 81004f8:	f1c2 020c 	rsb	r2, r2, #12
 81004fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8100500:	fa21 f102 	lsr.w	r1, r1, r2
 8100504:	e00c      	b.n	8100520 <__adddf3+0x184>
 8100506:	f102 0214 	add.w	r2, r2, #20
 810050a:	bfd8      	it	le
 810050c:	f1c2 0c20 	rsble	ip, r2, #32
 8100510:	fa01 f102 	lsl.w	r1, r1, r2
 8100514:	fa20 fc0c 	lsr.w	ip, r0, ip
 8100518:	bfdc      	itt	le
 810051a:	ea41 010c 	orrle.w	r1, r1, ip
 810051e:	4090      	lslle	r0, r2
 8100520:	1ae4      	subs	r4, r4, r3
 8100522:	bfa2      	ittt	ge
 8100524:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8100528:	4329      	orrge	r1, r5
 810052a:	bd30      	popge	{r4, r5, pc}
 810052c:	ea6f 0404 	mvn.w	r4, r4
 8100530:	3c1f      	subs	r4, #31
 8100532:	da1c      	bge.n	810056e <__adddf3+0x1d2>
 8100534:	340c      	adds	r4, #12
 8100536:	dc0e      	bgt.n	8100556 <__adddf3+0x1ba>
 8100538:	f104 0414 	add.w	r4, r4, #20
 810053c:	f1c4 0220 	rsb	r2, r4, #32
 8100540:	fa20 f004 	lsr.w	r0, r0, r4
 8100544:	fa01 f302 	lsl.w	r3, r1, r2
 8100548:	ea40 0003 	orr.w	r0, r0, r3
 810054c:	fa21 f304 	lsr.w	r3, r1, r4
 8100550:	ea45 0103 	orr.w	r1, r5, r3
 8100554:	bd30      	pop	{r4, r5, pc}
 8100556:	f1c4 040c 	rsb	r4, r4, #12
 810055a:	f1c4 0220 	rsb	r2, r4, #32
 810055e:	fa20 f002 	lsr.w	r0, r0, r2
 8100562:	fa01 f304 	lsl.w	r3, r1, r4
 8100566:	ea40 0003 	orr.w	r0, r0, r3
 810056a:	4629      	mov	r1, r5
 810056c:	bd30      	pop	{r4, r5, pc}
 810056e:	fa21 f004 	lsr.w	r0, r1, r4
 8100572:	4629      	mov	r1, r5
 8100574:	bd30      	pop	{r4, r5, pc}
 8100576:	f094 0f00 	teq	r4, #0
 810057a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 810057e:	bf06      	itte	eq
 8100580:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8100584:	3401      	addeq	r4, #1
 8100586:	3d01      	subne	r5, #1
 8100588:	e74e      	b.n	8100428 <__adddf3+0x8c>
 810058a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 810058e:	bf18      	it	ne
 8100590:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8100594:	d029      	beq.n	81005ea <__adddf3+0x24e>
 8100596:	ea94 0f05 	teq	r4, r5
 810059a:	bf08      	it	eq
 810059c:	ea90 0f02 	teqeq	r0, r2
 81005a0:	d005      	beq.n	81005ae <__adddf3+0x212>
 81005a2:	ea54 0c00 	orrs.w	ip, r4, r0
 81005a6:	bf04      	itt	eq
 81005a8:	4619      	moveq	r1, r3
 81005aa:	4610      	moveq	r0, r2
 81005ac:	bd30      	pop	{r4, r5, pc}
 81005ae:	ea91 0f03 	teq	r1, r3
 81005b2:	bf1e      	ittt	ne
 81005b4:	2100      	movne	r1, #0
 81005b6:	2000      	movne	r0, #0
 81005b8:	bd30      	popne	{r4, r5, pc}
 81005ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 81005be:	d105      	bne.n	81005cc <__adddf3+0x230>
 81005c0:	0040      	lsls	r0, r0, #1
 81005c2:	4149      	adcs	r1, r1
 81005c4:	bf28      	it	cs
 81005c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 81005ca:	bd30      	pop	{r4, r5, pc}
 81005cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 81005d0:	bf3c      	itt	cc
 81005d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 81005d6:	bd30      	popcc	{r4, r5, pc}
 81005d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 81005dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 81005e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 81005e4:	f04f 0000 	mov.w	r0, #0
 81005e8:	bd30      	pop	{r4, r5, pc}
 81005ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 81005ee:	bf1a      	itte	ne
 81005f0:	4619      	movne	r1, r3
 81005f2:	4610      	movne	r0, r2
 81005f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 81005f8:	bf1c      	itt	ne
 81005fa:	460b      	movne	r3, r1
 81005fc:	4602      	movne	r2, r0
 81005fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8100602:	bf06      	itte	eq
 8100604:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8100608:	ea91 0f03 	teqeq	r1, r3
 810060c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8100610:	bd30      	pop	{r4, r5, pc}
 8100612:	bf00      	nop

08100614 <__aeabi_ui2d>:
 8100614:	f090 0f00 	teq	r0, #0
 8100618:	bf04      	itt	eq
 810061a:	2100      	moveq	r1, #0
 810061c:	4770      	bxeq	lr
 810061e:	b530      	push	{r4, r5, lr}
 8100620:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8100624:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8100628:	f04f 0500 	mov.w	r5, #0
 810062c:	f04f 0100 	mov.w	r1, #0
 8100630:	e750      	b.n	81004d4 <__adddf3+0x138>
 8100632:	bf00      	nop

08100634 <__aeabi_i2d>:
 8100634:	f090 0f00 	teq	r0, #0
 8100638:	bf04      	itt	eq
 810063a:	2100      	moveq	r1, #0
 810063c:	4770      	bxeq	lr
 810063e:	b530      	push	{r4, r5, lr}
 8100640:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8100644:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8100648:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 810064c:	bf48      	it	mi
 810064e:	4240      	negmi	r0, r0
 8100650:	f04f 0100 	mov.w	r1, #0
 8100654:	e73e      	b.n	81004d4 <__adddf3+0x138>
 8100656:	bf00      	nop

08100658 <__aeabi_f2d>:
 8100658:	0042      	lsls	r2, r0, #1
 810065a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 810065e:	ea4f 0131 	mov.w	r1, r1, rrx
 8100662:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8100666:	bf1f      	itttt	ne
 8100668:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 810066c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8100670:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8100674:	4770      	bxne	lr
 8100676:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 810067a:	bf08      	it	eq
 810067c:	4770      	bxeq	lr
 810067e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8100682:	bf04      	itt	eq
 8100684:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8100688:	4770      	bxeq	lr
 810068a:	b530      	push	{r4, r5, lr}
 810068c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8100690:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8100694:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8100698:	e71c      	b.n	81004d4 <__adddf3+0x138>
 810069a:	bf00      	nop

0810069c <__aeabi_ul2d>:
 810069c:	ea50 0201 	orrs.w	r2, r0, r1
 81006a0:	bf08      	it	eq
 81006a2:	4770      	bxeq	lr
 81006a4:	b530      	push	{r4, r5, lr}
 81006a6:	f04f 0500 	mov.w	r5, #0
 81006aa:	e00a      	b.n	81006c2 <__aeabi_l2d+0x16>

081006ac <__aeabi_l2d>:
 81006ac:	ea50 0201 	orrs.w	r2, r0, r1
 81006b0:	bf08      	it	eq
 81006b2:	4770      	bxeq	lr
 81006b4:	b530      	push	{r4, r5, lr}
 81006b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 81006ba:	d502      	bpl.n	81006c2 <__aeabi_l2d+0x16>
 81006bc:	4240      	negs	r0, r0
 81006be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 81006c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 81006c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 81006ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 81006ce:	f43f aed8 	beq.w	8100482 <__adddf3+0xe6>
 81006d2:	f04f 0203 	mov.w	r2, #3
 81006d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 81006da:	bf18      	it	ne
 81006dc:	3203      	addne	r2, #3
 81006de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 81006e2:	bf18      	it	ne
 81006e4:	3203      	addne	r2, #3
 81006e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 81006ea:	f1c2 0320 	rsb	r3, r2, #32
 81006ee:	fa00 fc03 	lsl.w	ip, r0, r3
 81006f2:	fa20 f002 	lsr.w	r0, r0, r2
 81006f6:	fa01 fe03 	lsl.w	lr, r1, r3
 81006fa:	ea40 000e 	orr.w	r0, r0, lr
 81006fe:	fa21 f102 	lsr.w	r1, r1, r2
 8100702:	4414      	add	r4, r2
 8100704:	e6bd      	b.n	8100482 <__adddf3+0xe6>
 8100706:	bf00      	nop

08100708 <__aeabi_dmul>:
 8100708:	b570      	push	{r4, r5, r6, lr}
 810070a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 810070e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8100712:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8100716:	bf1d      	ittte	ne
 8100718:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 810071c:	ea94 0f0c 	teqne	r4, ip
 8100720:	ea95 0f0c 	teqne	r5, ip
 8100724:	f000 f8de 	bleq	81008e4 <__aeabi_dmul+0x1dc>
 8100728:	442c      	add	r4, r5
 810072a:	ea81 0603 	eor.w	r6, r1, r3
 810072e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8100732:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8100736:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 810073a:	bf18      	it	ne
 810073c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8100740:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8100744:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8100748:	d038      	beq.n	81007bc <__aeabi_dmul+0xb4>
 810074a:	fba0 ce02 	umull	ip, lr, r0, r2
 810074e:	f04f 0500 	mov.w	r5, #0
 8100752:	fbe1 e502 	umlal	lr, r5, r1, r2
 8100756:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 810075a:	fbe0 e503 	umlal	lr, r5, r0, r3
 810075e:	f04f 0600 	mov.w	r6, #0
 8100762:	fbe1 5603 	umlal	r5, r6, r1, r3
 8100766:	f09c 0f00 	teq	ip, #0
 810076a:	bf18      	it	ne
 810076c:	f04e 0e01 	orrne.w	lr, lr, #1
 8100770:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8100774:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8100778:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 810077c:	d204      	bcs.n	8100788 <__aeabi_dmul+0x80>
 810077e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8100782:	416d      	adcs	r5, r5
 8100784:	eb46 0606 	adc.w	r6, r6, r6
 8100788:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 810078c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8100790:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8100794:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8100798:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 810079c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 81007a0:	bf88      	it	hi
 81007a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 81007a6:	d81e      	bhi.n	81007e6 <__aeabi_dmul+0xde>
 81007a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 81007ac:	bf08      	it	eq
 81007ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 81007b2:	f150 0000 	adcs.w	r0, r0, #0
 81007b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 81007ba:	bd70      	pop	{r4, r5, r6, pc}
 81007bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 81007c0:	ea46 0101 	orr.w	r1, r6, r1
 81007c4:	ea40 0002 	orr.w	r0, r0, r2
 81007c8:	ea81 0103 	eor.w	r1, r1, r3
 81007cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 81007d0:	bfc2      	ittt	gt
 81007d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 81007d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 81007da:	bd70      	popgt	{r4, r5, r6, pc}
 81007dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 81007e0:	f04f 0e00 	mov.w	lr, #0
 81007e4:	3c01      	subs	r4, #1
 81007e6:	f300 80ab 	bgt.w	8100940 <__aeabi_dmul+0x238>
 81007ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 81007ee:	bfde      	ittt	le
 81007f0:	2000      	movle	r0, #0
 81007f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 81007f6:	bd70      	pople	{r4, r5, r6, pc}
 81007f8:	f1c4 0400 	rsb	r4, r4, #0
 81007fc:	3c20      	subs	r4, #32
 81007fe:	da35      	bge.n	810086c <__aeabi_dmul+0x164>
 8100800:	340c      	adds	r4, #12
 8100802:	dc1b      	bgt.n	810083c <__aeabi_dmul+0x134>
 8100804:	f104 0414 	add.w	r4, r4, #20
 8100808:	f1c4 0520 	rsb	r5, r4, #32
 810080c:	fa00 f305 	lsl.w	r3, r0, r5
 8100810:	fa20 f004 	lsr.w	r0, r0, r4
 8100814:	fa01 f205 	lsl.w	r2, r1, r5
 8100818:	ea40 0002 	orr.w	r0, r0, r2
 810081c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8100820:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8100824:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8100828:	fa21 f604 	lsr.w	r6, r1, r4
 810082c:	eb42 0106 	adc.w	r1, r2, r6
 8100830:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8100834:	bf08      	it	eq
 8100836:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 810083a:	bd70      	pop	{r4, r5, r6, pc}
 810083c:	f1c4 040c 	rsb	r4, r4, #12
 8100840:	f1c4 0520 	rsb	r5, r4, #32
 8100844:	fa00 f304 	lsl.w	r3, r0, r4
 8100848:	fa20 f005 	lsr.w	r0, r0, r5
 810084c:	fa01 f204 	lsl.w	r2, r1, r4
 8100850:	ea40 0002 	orr.w	r0, r0, r2
 8100854:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8100858:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 810085c:	f141 0100 	adc.w	r1, r1, #0
 8100860:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8100864:	bf08      	it	eq
 8100866:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 810086a:	bd70      	pop	{r4, r5, r6, pc}
 810086c:	f1c4 0520 	rsb	r5, r4, #32
 8100870:	fa00 f205 	lsl.w	r2, r0, r5
 8100874:	ea4e 0e02 	orr.w	lr, lr, r2
 8100878:	fa20 f304 	lsr.w	r3, r0, r4
 810087c:	fa01 f205 	lsl.w	r2, r1, r5
 8100880:	ea43 0302 	orr.w	r3, r3, r2
 8100884:	fa21 f004 	lsr.w	r0, r1, r4
 8100888:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 810088c:	fa21 f204 	lsr.w	r2, r1, r4
 8100890:	ea20 0002 	bic.w	r0, r0, r2
 8100894:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8100898:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 810089c:	bf08      	it	eq
 810089e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 81008a2:	bd70      	pop	{r4, r5, r6, pc}
 81008a4:	f094 0f00 	teq	r4, #0
 81008a8:	d10f      	bne.n	81008ca <__aeabi_dmul+0x1c2>
 81008aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 81008ae:	0040      	lsls	r0, r0, #1
 81008b0:	eb41 0101 	adc.w	r1, r1, r1
 81008b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 81008b8:	bf08      	it	eq
 81008ba:	3c01      	subeq	r4, #1
 81008bc:	d0f7      	beq.n	81008ae <__aeabi_dmul+0x1a6>
 81008be:	ea41 0106 	orr.w	r1, r1, r6
 81008c2:	f095 0f00 	teq	r5, #0
 81008c6:	bf18      	it	ne
 81008c8:	4770      	bxne	lr
 81008ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 81008ce:	0052      	lsls	r2, r2, #1
 81008d0:	eb43 0303 	adc.w	r3, r3, r3
 81008d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 81008d8:	bf08      	it	eq
 81008da:	3d01      	subeq	r5, #1
 81008dc:	d0f7      	beq.n	81008ce <__aeabi_dmul+0x1c6>
 81008de:	ea43 0306 	orr.w	r3, r3, r6
 81008e2:	4770      	bx	lr
 81008e4:	ea94 0f0c 	teq	r4, ip
 81008e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 81008ec:	bf18      	it	ne
 81008ee:	ea95 0f0c 	teqne	r5, ip
 81008f2:	d00c      	beq.n	810090e <__aeabi_dmul+0x206>
 81008f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 81008f8:	bf18      	it	ne
 81008fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 81008fe:	d1d1      	bne.n	81008a4 <__aeabi_dmul+0x19c>
 8100900:	ea81 0103 	eor.w	r1, r1, r3
 8100904:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8100908:	f04f 0000 	mov.w	r0, #0
 810090c:	bd70      	pop	{r4, r5, r6, pc}
 810090e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8100912:	bf06      	itte	eq
 8100914:	4610      	moveq	r0, r2
 8100916:	4619      	moveq	r1, r3
 8100918:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 810091c:	d019      	beq.n	8100952 <__aeabi_dmul+0x24a>
 810091e:	ea94 0f0c 	teq	r4, ip
 8100922:	d102      	bne.n	810092a <__aeabi_dmul+0x222>
 8100924:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8100928:	d113      	bne.n	8100952 <__aeabi_dmul+0x24a>
 810092a:	ea95 0f0c 	teq	r5, ip
 810092e:	d105      	bne.n	810093c <__aeabi_dmul+0x234>
 8100930:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8100934:	bf1c      	itt	ne
 8100936:	4610      	movne	r0, r2
 8100938:	4619      	movne	r1, r3
 810093a:	d10a      	bne.n	8100952 <__aeabi_dmul+0x24a>
 810093c:	ea81 0103 	eor.w	r1, r1, r3
 8100940:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8100944:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8100948:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 810094c:	f04f 0000 	mov.w	r0, #0
 8100950:	bd70      	pop	{r4, r5, r6, pc}
 8100952:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8100956:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 810095a:	bd70      	pop	{r4, r5, r6, pc}

0810095c <__aeabi_ddiv>:
 810095c:	b570      	push	{r4, r5, r6, lr}
 810095e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8100962:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8100966:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 810096a:	bf1d      	ittte	ne
 810096c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8100970:	ea94 0f0c 	teqne	r4, ip
 8100974:	ea95 0f0c 	teqne	r5, ip
 8100978:	f000 f8a7 	bleq	8100aca <__aeabi_ddiv+0x16e>
 810097c:	eba4 0405 	sub.w	r4, r4, r5
 8100980:	ea81 0e03 	eor.w	lr, r1, r3
 8100984:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8100988:	ea4f 3101 	mov.w	r1, r1, lsl #12
 810098c:	f000 8088 	beq.w	8100aa0 <__aeabi_ddiv+0x144>
 8100990:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8100994:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8100998:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 810099c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 81009a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 81009a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 81009a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 81009ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 81009b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 81009b4:	429d      	cmp	r5, r3
 81009b6:	bf08      	it	eq
 81009b8:	4296      	cmpeq	r6, r2
 81009ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 81009be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 81009c2:	d202      	bcs.n	81009ca <__aeabi_ddiv+0x6e>
 81009c4:	085b      	lsrs	r3, r3, #1
 81009c6:	ea4f 0232 	mov.w	r2, r2, rrx
 81009ca:	1ab6      	subs	r6, r6, r2
 81009cc:	eb65 0503 	sbc.w	r5, r5, r3
 81009d0:	085b      	lsrs	r3, r3, #1
 81009d2:	ea4f 0232 	mov.w	r2, r2, rrx
 81009d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 81009da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 81009de:	ebb6 0e02 	subs.w	lr, r6, r2
 81009e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 81009e6:	bf22      	ittt	cs
 81009e8:	1ab6      	subcs	r6, r6, r2
 81009ea:	4675      	movcs	r5, lr
 81009ec:	ea40 000c 	orrcs.w	r0, r0, ip
 81009f0:	085b      	lsrs	r3, r3, #1
 81009f2:	ea4f 0232 	mov.w	r2, r2, rrx
 81009f6:	ebb6 0e02 	subs.w	lr, r6, r2
 81009fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 81009fe:	bf22      	ittt	cs
 8100a00:	1ab6      	subcs	r6, r6, r2
 8100a02:	4675      	movcs	r5, lr
 8100a04:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8100a08:	085b      	lsrs	r3, r3, #1
 8100a0a:	ea4f 0232 	mov.w	r2, r2, rrx
 8100a0e:	ebb6 0e02 	subs.w	lr, r6, r2
 8100a12:	eb75 0e03 	sbcs.w	lr, r5, r3
 8100a16:	bf22      	ittt	cs
 8100a18:	1ab6      	subcs	r6, r6, r2
 8100a1a:	4675      	movcs	r5, lr
 8100a1c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8100a20:	085b      	lsrs	r3, r3, #1
 8100a22:	ea4f 0232 	mov.w	r2, r2, rrx
 8100a26:	ebb6 0e02 	subs.w	lr, r6, r2
 8100a2a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8100a2e:	bf22      	ittt	cs
 8100a30:	1ab6      	subcs	r6, r6, r2
 8100a32:	4675      	movcs	r5, lr
 8100a34:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8100a38:	ea55 0e06 	orrs.w	lr, r5, r6
 8100a3c:	d018      	beq.n	8100a70 <__aeabi_ddiv+0x114>
 8100a3e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8100a42:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8100a46:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8100a4a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8100a4e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8100a52:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8100a56:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8100a5a:	d1c0      	bne.n	81009de <__aeabi_ddiv+0x82>
 8100a5c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8100a60:	d10b      	bne.n	8100a7a <__aeabi_ddiv+0x11e>
 8100a62:	ea41 0100 	orr.w	r1, r1, r0
 8100a66:	f04f 0000 	mov.w	r0, #0
 8100a6a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8100a6e:	e7b6      	b.n	81009de <__aeabi_ddiv+0x82>
 8100a70:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8100a74:	bf04      	itt	eq
 8100a76:	4301      	orreq	r1, r0
 8100a78:	2000      	moveq	r0, #0
 8100a7a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8100a7e:	bf88      	it	hi
 8100a80:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8100a84:	f63f aeaf 	bhi.w	81007e6 <__aeabi_dmul+0xde>
 8100a88:	ebb5 0c03 	subs.w	ip, r5, r3
 8100a8c:	bf04      	itt	eq
 8100a8e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8100a92:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8100a96:	f150 0000 	adcs.w	r0, r0, #0
 8100a9a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8100a9e:	bd70      	pop	{r4, r5, r6, pc}
 8100aa0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8100aa4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8100aa8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8100aac:	bfc2      	ittt	gt
 8100aae:	ebd4 050c 	rsbsgt	r5, r4, ip
 8100ab2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8100ab6:	bd70      	popgt	{r4, r5, r6, pc}
 8100ab8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8100abc:	f04f 0e00 	mov.w	lr, #0
 8100ac0:	3c01      	subs	r4, #1
 8100ac2:	e690      	b.n	81007e6 <__aeabi_dmul+0xde>
 8100ac4:	ea45 0e06 	orr.w	lr, r5, r6
 8100ac8:	e68d      	b.n	81007e6 <__aeabi_dmul+0xde>
 8100aca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8100ace:	ea94 0f0c 	teq	r4, ip
 8100ad2:	bf08      	it	eq
 8100ad4:	ea95 0f0c 	teqeq	r5, ip
 8100ad8:	f43f af3b 	beq.w	8100952 <__aeabi_dmul+0x24a>
 8100adc:	ea94 0f0c 	teq	r4, ip
 8100ae0:	d10a      	bne.n	8100af8 <__aeabi_ddiv+0x19c>
 8100ae2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8100ae6:	f47f af34 	bne.w	8100952 <__aeabi_dmul+0x24a>
 8100aea:	ea95 0f0c 	teq	r5, ip
 8100aee:	f47f af25 	bne.w	810093c <__aeabi_dmul+0x234>
 8100af2:	4610      	mov	r0, r2
 8100af4:	4619      	mov	r1, r3
 8100af6:	e72c      	b.n	8100952 <__aeabi_dmul+0x24a>
 8100af8:	ea95 0f0c 	teq	r5, ip
 8100afc:	d106      	bne.n	8100b0c <__aeabi_ddiv+0x1b0>
 8100afe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8100b02:	f43f aefd 	beq.w	8100900 <__aeabi_dmul+0x1f8>
 8100b06:	4610      	mov	r0, r2
 8100b08:	4619      	mov	r1, r3
 8100b0a:	e722      	b.n	8100952 <__aeabi_dmul+0x24a>
 8100b0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8100b10:	bf18      	it	ne
 8100b12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8100b16:	f47f aec5 	bne.w	81008a4 <__aeabi_dmul+0x19c>
 8100b1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8100b1e:	f47f af0d 	bne.w	810093c <__aeabi_dmul+0x234>
 8100b22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8100b26:	f47f aeeb 	bne.w	8100900 <__aeabi_dmul+0x1f8>
 8100b2a:	e712      	b.n	8100952 <__aeabi_dmul+0x24a>

08100b2c <__gedf2>:
 8100b2c:	f04f 3cff 	mov.w	ip, #4294967295
 8100b30:	e006      	b.n	8100b40 <__cmpdf2+0x4>
 8100b32:	bf00      	nop

08100b34 <__ledf2>:
 8100b34:	f04f 0c01 	mov.w	ip, #1
 8100b38:	e002      	b.n	8100b40 <__cmpdf2+0x4>
 8100b3a:	bf00      	nop

08100b3c <__cmpdf2>:
 8100b3c:	f04f 0c01 	mov.w	ip, #1
 8100b40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8100b44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100b48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8100b50:	bf18      	it	ne
 8100b52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8100b56:	d01b      	beq.n	8100b90 <__cmpdf2+0x54>
 8100b58:	b001      	add	sp, #4
 8100b5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8100b5e:	bf0c      	ite	eq
 8100b60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8100b64:	ea91 0f03 	teqne	r1, r3
 8100b68:	bf02      	ittt	eq
 8100b6a:	ea90 0f02 	teqeq	r0, r2
 8100b6e:	2000      	moveq	r0, #0
 8100b70:	4770      	bxeq	lr
 8100b72:	f110 0f00 	cmn.w	r0, #0
 8100b76:	ea91 0f03 	teq	r1, r3
 8100b7a:	bf58      	it	pl
 8100b7c:	4299      	cmppl	r1, r3
 8100b7e:	bf08      	it	eq
 8100b80:	4290      	cmpeq	r0, r2
 8100b82:	bf2c      	ite	cs
 8100b84:	17d8      	asrcs	r0, r3, #31
 8100b86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8100b8a:	f040 0001 	orr.w	r0, r0, #1
 8100b8e:	4770      	bx	lr
 8100b90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100b94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100b98:	d102      	bne.n	8100ba0 <__cmpdf2+0x64>
 8100b9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8100b9e:	d107      	bne.n	8100bb0 <__cmpdf2+0x74>
 8100ba0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8100ba4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100ba8:	d1d6      	bne.n	8100b58 <__cmpdf2+0x1c>
 8100baa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8100bae:	d0d3      	beq.n	8100b58 <__cmpdf2+0x1c>
 8100bb0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8100bb4:	4770      	bx	lr
 8100bb6:	bf00      	nop

08100bb8 <__aeabi_cdrcmple>:
 8100bb8:	4684      	mov	ip, r0
 8100bba:	4610      	mov	r0, r2
 8100bbc:	4662      	mov	r2, ip
 8100bbe:	468c      	mov	ip, r1
 8100bc0:	4619      	mov	r1, r3
 8100bc2:	4663      	mov	r3, ip
 8100bc4:	e000      	b.n	8100bc8 <__aeabi_cdcmpeq>
 8100bc6:	bf00      	nop

08100bc8 <__aeabi_cdcmpeq>:
 8100bc8:	b501      	push	{r0, lr}
 8100bca:	f7ff ffb7 	bl	8100b3c <__cmpdf2>
 8100bce:	2800      	cmp	r0, #0
 8100bd0:	bf48      	it	mi
 8100bd2:	f110 0f00 	cmnmi.w	r0, #0
 8100bd6:	bd01      	pop	{r0, pc}

08100bd8 <__aeabi_dcmpeq>:
 8100bd8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100bdc:	f7ff fff4 	bl	8100bc8 <__aeabi_cdcmpeq>
 8100be0:	bf0c      	ite	eq
 8100be2:	2001      	moveq	r0, #1
 8100be4:	2000      	movne	r0, #0
 8100be6:	f85d fb08 	ldr.w	pc, [sp], #8
 8100bea:	bf00      	nop

08100bec <__aeabi_dcmplt>:
 8100bec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100bf0:	f7ff ffea 	bl	8100bc8 <__aeabi_cdcmpeq>
 8100bf4:	bf34      	ite	cc
 8100bf6:	2001      	movcc	r0, #1
 8100bf8:	2000      	movcs	r0, #0
 8100bfa:	f85d fb08 	ldr.w	pc, [sp], #8
 8100bfe:	bf00      	nop

08100c00 <__aeabi_dcmple>:
 8100c00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100c04:	f7ff ffe0 	bl	8100bc8 <__aeabi_cdcmpeq>
 8100c08:	bf94      	ite	ls
 8100c0a:	2001      	movls	r0, #1
 8100c0c:	2000      	movhi	r0, #0
 8100c0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8100c12:	bf00      	nop

08100c14 <__aeabi_dcmpge>:
 8100c14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100c18:	f7ff ffce 	bl	8100bb8 <__aeabi_cdrcmple>
 8100c1c:	bf94      	ite	ls
 8100c1e:	2001      	movls	r0, #1
 8100c20:	2000      	movhi	r0, #0
 8100c22:	f85d fb08 	ldr.w	pc, [sp], #8
 8100c26:	bf00      	nop

08100c28 <__aeabi_dcmpgt>:
 8100c28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100c2c:	f7ff ffc4 	bl	8100bb8 <__aeabi_cdrcmple>
 8100c30:	bf34      	ite	cc
 8100c32:	2001      	movcc	r0, #1
 8100c34:	2000      	movcs	r0, #0
 8100c36:	f85d fb08 	ldr.w	pc, [sp], #8
 8100c3a:	bf00      	nop

08100c3c <__aeabi_dcmpun>:
 8100c3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100c40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100c44:	d102      	bne.n	8100c4c <__aeabi_dcmpun+0x10>
 8100c46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8100c4a:	d10a      	bne.n	8100c62 <__aeabi_dcmpun+0x26>
 8100c4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8100c50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100c54:	d102      	bne.n	8100c5c <__aeabi_dcmpun+0x20>
 8100c56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8100c5a:	d102      	bne.n	8100c62 <__aeabi_dcmpun+0x26>
 8100c5c:	f04f 0000 	mov.w	r0, #0
 8100c60:	4770      	bx	lr
 8100c62:	f04f 0001 	mov.w	r0, #1
 8100c66:	4770      	bx	lr

08100c68 <__aeabi_d2iz>:
 8100c68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8100c6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8100c70:	d215      	bcs.n	8100c9e <__aeabi_d2iz+0x36>
 8100c72:	d511      	bpl.n	8100c98 <__aeabi_d2iz+0x30>
 8100c74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8100c78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8100c7c:	d912      	bls.n	8100ca4 <__aeabi_d2iz+0x3c>
 8100c7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8100c82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8100c86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8100c8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8100c8e:	fa23 f002 	lsr.w	r0, r3, r2
 8100c92:	bf18      	it	ne
 8100c94:	4240      	negne	r0, r0
 8100c96:	4770      	bx	lr
 8100c98:	f04f 0000 	mov.w	r0, #0
 8100c9c:	4770      	bx	lr
 8100c9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8100ca2:	d105      	bne.n	8100cb0 <__aeabi_d2iz+0x48>
 8100ca4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8100ca8:	bf08      	it	eq
 8100caa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8100cae:	4770      	bx	lr
 8100cb0:	f04f 0000 	mov.w	r0, #0
 8100cb4:	4770      	bx	lr
 8100cb6:	bf00      	nop

08100cb8 <__aeabi_uldivmod>:
 8100cb8:	b953      	cbnz	r3, 8100cd0 <__aeabi_uldivmod+0x18>
 8100cba:	b94a      	cbnz	r2, 8100cd0 <__aeabi_uldivmod+0x18>
 8100cbc:	2900      	cmp	r1, #0
 8100cbe:	bf08      	it	eq
 8100cc0:	2800      	cmpeq	r0, #0
 8100cc2:	bf1c      	itt	ne
 8100cc4:	f04f 31ff 	movne.w	r1, #4294967295
 8100cc8:	f04f 30ff 	movne.w	r0, #4294967295
 8100ccc:	f000 b96e 	b.w	8100fac <__aeabi_idiv0>
 8100cd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8100cd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8100cd8:	f000 f806 	bl	8100ce8 <__udivmoddi4>
 8100cdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8100ce0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8100ce4:	b004      	add	sp, #16
 8100ce6:	4770      	bx	lr

08100ce8 <__udivmoddi4>:
 8100ce8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8100cec:	9d08      	ldr	r5, [sp, #32]
 8100cee:	4604      	mov	r4, r0
 8100cf0:	468c      	mov	ip, r1
 8100cf2:	2b00      	cmp	r3, #0
 8100cf4:	f040 8083 	bne.w	8100dfe <__udivmoddi4+0x116>
 8100cf8:	428a      	cmp	r2, r1
 8100cfa:	4617      	mov	r7, r2
 8100cfc:	d947      	bls.n	8100d8e <__udivmoddi4+0xa6>
 8100cfe:	fab2 f282 	clz	r2, r2
 8100d02:	b142      	cbz	r2, 8100d16 <__udivmoddi4+0x2e>
 8100d04:	f1c2 0020 	rsb	r0, r2, #32
 8100d08:	fa24 f000 	lsr.w	r0, r4, r0
 8100d0c:	4091      	lsls	r1, r2
 8100d0e:	4097      	lsls	r7, r2
 8100d10:	ea40 0c01 	orr.w	ip, r0, r1
 8100d14:	4094      	lsls	r4, r2
 8100d16:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8100d1a:	0c23      	lsrs	r3, r4, #16
 8100d1c:	fbbc f6f8 	udiv	r6, ip, r8
 8100d20:	fa1f fe87 	uxth.w	lr, r7
 8100d24:	fb08 c116 	mls	r1, r8, r6, ip
 8100d28:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8100d2c:	fb06 f10e 	mul.w	r1, r6, lr
 8100d30:	4299      	cmp	r1, r3
 8100d32:	d909      	bls.n	8100d48 <__udivmoddi4+0x60>
 8100d34:	18fb      	adds	r3, r7, r3
 8100d36:	f106 30ff 	add.w	r0, r6, #4294967295
 8100d3a:	f080 8119 	bcs.w	8100f70 <__udivmoddi4+0x288>
 8100d3e:	4299      	cmp	r1, r3
 8100d40:	f240 8116 	bls.w	8100f70 <__udivmoddi4+0x288>
 8100d44:	3e02      	subs	r6, #2
 8100d46:	443b      	add	r3, r7
 8100d48:	1a5b      	subs	r3, r3, r1
 8100d4a:	b2a4      	uxth	r4, r4
 8100d4c:	fbb3 f0f8 	udiv	r0, r3, r8
 8100d50:	fb08 3310 	mls	r3, r8, r0, r3
 8100d54:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8100d58:	fb00 fe0e 	mul.w	lr, r0, lr
 8100d5c:	45a6      	cmp	lr, r4
 8100d5e:	d909      	bls.n	8100d74 <__udivmoddi4+0x8c>
 8100d60:	193c      	adds	r4, r7, r4
 8100d62:	f100 33ff 	add.w	r3, r0, #4294967295
 8100d66:	f080 8105 	bcs.w	8100f74 <__udivmoddi4+0x28c>
 8100d6a:	45a6      	cmp	lr, r4
 8100d6c:	f240 8102 	bls.w	8100f74 <__udivmoddi4+0x28c>
 8100d70:	3802      	subs	r0, #2
 8100d72:	443c      	add	r4, r7
 8100d74:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8100d78:	eba4 040e 	sub.w	r4, r4, lr
 8100d7c:	2600      	movs	r6, #0
 8100d7e:	b11d      	cbz	r5, 8100d88 <__udivmoddi4+0xa0>
 8100d80:	40d4      	lsrs	r4, r2
 8100d82:	2300      	movs	r3, #0
 8100d84:	e9c5 4300 	strd	r4, r3, [r5]
 8100d88:	4631      	mov	r1, r6
 8100d8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8100d8e:	b902      	cbnz	r2, 8100d92 <__udivmoddi4+0xaa>
 8100d90:	deff      	udf	#255	; 0xff
 8100d92:	fab2 f282 	clz	r2, r2
 8100d96:	2a00      	cmp	r2, #0
 8100d98:	d150      	bne.n	8100e3c <__udivmoddi4+0x154>
 8100d9a:	1bcb      	subs	r3, r1, r7
 8100d9c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8100da0:	fa1f f887 	uxth.w	r8, r7
 8100da4:	2601      	movs	r6, #1
 8100da6:	fbb3 fcfe 	udiv	ip, r3, lr
 8100daa:	0c21      	lsrs	r1, r4, #16
 8100dac:	fb0e 331c 	mls	r3, lr, ip, r3
 8100db0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8100db4:	fb08 f30c 	mul.w	r3, r8, ip
 8100db8:	428b      	cmp	r3, r1
 8100dba:	d907      	bls.n	8100dcc <__udivmoddi4+0xe4>
 8100dbc:	1879      	adds	r1, r7, r1
 8100dbe:	f10c 30ff 	add.w	r0, ip, #4294967295
 8100dc2:	d202      	bcs.n	8100dca <__udivmoddi4+0xe2>
 8100dc4:	428b      	cmp	r3, r1
 8100dc6:	f200 80e9 	bhi.w	8100f9c <__udivmoddi4+0x2b4>
 8100dca:	4684      	mov	ip, r0
 8100dcc:	1ac9      	subs	r1, r1, r3
 8100dce:	b2a3      	uxth	r3, r4
 8100dd0:	fbb1 f0fe 	udiv	r0, r1, lr
 8100dd4:	fb0e 1110 	mls	r1, lr, r0, r1
 8100dd8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8100ddc:	fb08 f800 	mul.w	r8, r8, r0
 8100de0:	45a0      	cmp	r8, r4
 8100de2:	d907      	bls.n	8100df4 <__udivmoddi4+0x10c>
 8100de4:	193c      	adds	r4, r7, r4
 8100de6:	f100 33ff 	add.w	r3, r0, #4294967295
 8100dea:	d202      	bcs.n	8100df2 <__udivmoddi4+0x10a>
 8100dec:	45a0      	cmp	r8, r4
 8100dee:	f200 80d9 	bhi.w	8100fa4 <__udivmoddi4+0x2bc>
 8100df2:	4618      	mov	r0, r3
 8100df4:	eba4 0408 	sub.w	r4, r4, r8
 8100df8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8100dfc:	e7bf      	b.n	8100d7e <__udivmoddi4+0x96>
 8100dfe:	428b      	cmp	r3, r1
 8100e00:	d909      	bls.n	8100e16 <__udivmoddi4+0x12e>
 8100e02:	2d00      	cmp	r5, #0
 8100e04:	f000 80b1 	beq.w	8100f6a <__udivmoddi4+0x282>
 8100e08:	2600      	movs	r6, #0
 8100e0a:	e9c5 0100 	strd	r0, r1, [r5]
 8100e0e:	4630      	mov	r0, r6
 8100e10:	4631      	mov	r1, r6
 8100e12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8100e16:	fab3 f683 	clz	r6, r3
 8100e1a:	2e00      	cmp	r6, #0
 8100e1c:	d14a      	bne.n	8100eb4 <__udivmoddi4+0x1cc>
 8100e1e:	428b      	cmp	r3, r1
 8100e20:	d302      	bcc.n	8100e28 <__udivmoddi4+0x140>
 8100e22:	4282      	cmp	r2, r0
 8100e24:	f200 80b8 	bhi.w	8100f98 <__udivmoddi4+0x2b0>
 8100e28:	1a84      	subs	r4, r0, r2
 8100e2a:	eb61 0103 	sbc.w	r1, r1, r3
 8100e2e:	2001      	movs	r0, #1
 8100e30:	468c      	mov	ip, r1
 8100e32:	2d00      	cmp	r5, #0
 8100e34:	d0a8      	beq.n	8100d88 <__udivmoddi4+0xa0>
 8100e36:	e9c5 4c00 	strd	r4, ip, [r5]
 8100e3a:	e7a5      	b.n	8100d88 <__udivmoddi4+0xa0>
 8100e3c:	f1c2 0320 	rsb	r3, r2, #32
 8100e40:	fa20 f603 	lsr.w	r6, r0, r3
 8100e44:	4097      	lsls	r7, r2
 8100e46:	fa01 f002 	lsl.w	r0, r1, r2
 8100e4a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8100e4e:	40d9      	lsrs	r1, r3
 8100e50:	4330      	orrs	r0, r6
 8100e52:	0c03      	lsrs	r3, r0, #16
 8100e54:	fbb1 f6fe 	udiv	r6, r1, lr
 8100e58:	fa1f f887 	uxth.w	r8, r7
 8100e5c:	fb0e 1116 	mls	r1, lr, r6, r1
 8100e60:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8100e64:	fb06 f108 	mul.w	r1, r6, r8
 8100e68:	4299      	cmp	r1, r3
 8100e6a:	fa04 f402 	lsl.w	r4, r4, r2
 8100e6e:	d909      	bls.n	8100e84 <__udivmoddi4+0x19c>
 8100e70:	18fb      	adds	r3, r7, r3
 8100e72:	f106 3cff 	add.w	ip, r6, #4294967295
 8100e76:	f080 808d 	bcs.w	8100f94 <__udivmoddi4+0x2ac>
 8100e7a:	4299      	cmp	r1, r3
 8100e7c:	f240 808a 	bls.w	8100f94 <__udivmoddi4+0x2ac>
 8100e80:	3e02      	subs	r6, #2
 8100e82:	443b      	add	r3, r7
 8100e84:	1a5b      	subs	r3, r3, r1
 8100e86:	b281      	uxth	r1, r0
 8100e88:	fbb3 f0fe 	udiv	r0, r3, lr
 8100e8c:	fb0e 3310 	mls	r3, lr, r0, r3
 8100e90:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8100e94:	fb00 f308 	mul.w	r3, r0, r8
 8100e98:	428b      	cmp	r3, r1
 8100e9a:	d907      	bls.n	8100eac <__udivmoddi4+0x1c4>
 8100e9c:	1879      	adds	r1, r7, r1
 8100e9e:	f100 3cff 	add.w	ip, r0, #4294967295
 8100ea2:	d273      	bcs.n	8100f8c <__udivmoddi4+0x2a4>
 8100ea4:	428b      	cmp	r3, r1
 8100ea6:	d971      	bls.n	8100f8c <__udivmoddi4+0x2a4>
 8100ea8:	3802      	subs	r0, #2
 8100eaa:	4439      	add	r1, r7
 8100eac:	1acb      	subs	r3, r1, r3
 8100eae:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8100eb2:	e778      	b.n	8100da6 <__udivmoddi4+0xbe>
 8100eb4:	f1c6 0c20 	rsb	ip, r6, #32
 8100eb8:	fa03 f406 	lsl.w	r4, r3, r6
 8100ebc:	fa22 f30c 	lsr.w	r3, r2, ip
 8100ec0:	431c      	orrs	r4, r3
 8100ec2:	fa20 f70c 	lsr.w	r7, r0, ip
 8100ec6:	fa01 f306 	lsl.w	r3, r1, r6
 8100eca:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8100ece:	fa21 f10c 	lsr.w	r1, r1, ip
 8100ed2:	431f      	orrs	r7, r3
 8100ed4:	0c3b      	lsrs	r3, r7, #16
 8100ed6:	fbb1 f9fe 	udiv	r9, r1, lr
 8100eda:	fa1f f884 	uxth.w	r8, r4
 8100ede:	fb0e 1119 	mls	r1, lr, r9, r1
 8100ee2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8100ee6:	fb09 fa08 	mul.w	sl, r9, r8
 8100eea:	458a      	cmp	sl, r1
 8100eec:	fa02 f206 	lsl.w	r2, r2, r6
 8100ef0:	fa00 f306 	lsl.w	r3, r0, r6
 8100ef4:	d908      	bls.n	8100f08 <__udivmoddi4+0x220>
 8100ef6:	1861      	adds	r1, r4, r1
 8100ef8:	f109 30ff 	add.w	r0, r9, #4294967295
 8100efc:	d248      	bcs.n	8100f90 <__udivmoddi4+0x2a8>
 8100efe:	458a      	cmp	sl, r1
 8100f00:	d946      	bls.n	8100f90 <__udivmoddi4+0x2a8>
 8100f02:	f1a9 0902 	sub.w	r9, r9, #2
 8100f06:	4421      	add	r1, r4
 8100f08:	eba1 010a 	sub.w	r1, r1, sl
 8100f0c:	b2bf      	uxth	r7, r7
 8100f0e:	fbb1 f0fe 	udiv	r0, r1, lr
 8100f12:	fb0e 1110 	mls	r1, lr, r0, r1
 8100f16:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8100f1a:	fb00 f808 	mul.w	r8, r0, r8
 8100f1e:	45b8      	cmp	r8, r7
 8100f20:	d907      	bls.n	8100f32 <__udivmoddi4+0x24a>
 8100f22:	19e7      	adds	r7, r4, r7
 8100f24:	f100 31ff 	add.w	r1, r0, #4294967295
 8100f28:	d22e      	bcs.n	8100f88 <__udivmoddi4+0x2a0>
 8100f2a:	45b8      	cmp	r8, r7
 8100f2c:	d92c      	bls.n	8100f88 <__udivmoddi4+0x2a0>
 8100f2e:	3802      	subs	r0, #2
 8100f30:	4427      	add	r7, r4
 8100f32:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8100f36:	eba7 0708 	sub.w	r7, r7, r8
 8100f3a:	fba0 8902 	umull	r8, r9, r0, r2
 8100f3e:	454f      	cmp	r7, r9
 8100f40:	46c6      	mov	lr, r8
 8100f42:	4649      	mov	r1, r9
 8100f44:	d31a      	bcc.n	8100f7c <__udivmoddi4+0x294>
 8100f46:	d017      	beq.n	8100f78 <__udivmoddi4+0x290>
 8100f48:	b15d      	cbz	r5, 8100f62 <__udivmoddi4+0x27a>
 8100f4a:	ebb3 020e 	subs.w	r2, r3, lr
 8100f4e:	eb67 0701 	sbc.w	r7, r7, r1
 8100f52:	fa07 fc0c 	lsl.w	ip, r7, ip
 8100f56:	40f2      	lsrs	r2, r6
 8100f58:	ea4c 0202 	orr.w	r2, ip, r2
 8100f5c:	40f7      	lsrs	r7, r6
 8100f5e:	e9c5 2700 	strd	r2, r7, [r5]
 8100f62:	2600      	movs	r6, #0
 8100f64:	4631      	mov	r1, r6
 8100f66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8100f6a:	462e      	mov	r6, r5
 8100f6c:	4628      	mov	r0, r5
 8100f6e:	e70b      	b.n	8100d88 <__udivmoddi4+0xa0>
 8100f70:	4606      	mov	r6, r0
 8100f72:	e6e9      	b.n	8100d48 <__udivmoddi4+0x60>
 8100f74:	4618      	mov	r0, r3
 8100f76:	e6fd      	b.n	8100d74 <__udivmoddi4+0x8c>
 8100f78:	4543      	cmp	r3, r8
 8100f7a:	d2e5      	bcs.n	8100f48 <__udivmoddi4+0x260>
 8100f7c:	ebb8 0e02 	subs.w	lr, r8, r2
 8100f80:	eb69 0104 	sbc.w	r1, r9, r4
 8100f84:	3801      	subs	r0, #1
 8100f86:	e7df      	b.n	8100f48 <__udivmoddi4+0x260>
 8100f88:	4608      	mov	r0, r1
 8100f8a:	e7d2      	b.n	8100f32 <__udivmoddi4+0x24a>
 8100f8c:	4660      	mov	r0, ip
 8100f8e:	e78d      	b.n	8100eac <__udivmoddi4+0x1c4>
 8100f90:	4681      	mov	r9, r0
 8100f92:	e7b9      	b.n	8100f08 <__udivmoddi4+0x220>
 8100f94:	4666      	mov	r6, ip
 8100f96:	e775      	b.n	8100e84 <__udivmoddi4+0x19c>
 8100f98:	4630      	mov	r0, r6
 8100f9a:	e74a      	b.n	8100e32 <__udivmoddi4+0x14a>
 8100f9c:	f1ac 0c02 	sub.w	ip, ip, #2
 8100fa0:	4439      	add	r1, r7
 8100fa2:	e713      	b.n	8100dcc <__udivmoddi4+0xe4>
 8100fa4:	3802      	subs	r0, #2
 8100fa6:	443c      	add	r4, r7
 8100fa8:	e724      	b.n	8100df4 <__udivmoddi4+0x10c>
 8100faa:	bf00      	nop

08100fac <__aeabi_idiv0>:
 8100fac:	4770      	bx	lr
 8100fae:	bf00      	nop

08100fb0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8100fb0:	b480      	push	{r7}
 8100fb2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8100fb4:	4b0b      	ldr	r3, [pc, #44]	; (8100fe4 <SystemInit+0x34>)
 8100fb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8100fba:	4a0a      	ldr	r2, [pc, #40]	; (8100fe4 <SystemInit+0x34>)
 8100fbc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8100fc0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Pos;
 8100fc4:	4b07      	ldr	r3, [pc, #28]	; (8100fe4 <SystemInit+0x34>)
 8100fc6:	691b      	ldr	r3, [r3, #16]
 8100fc8:	4a06      	ldr	r2, [pc, #24]	; (8100fe4 <SystemInit+0x34>)
 8100fca:	f043 0304 	orr.w	r3, r3, #4
 8100fce:	6113      	str	r3, [r2, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D2_AHBSRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BANK2_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8100fd0:	4b04      	ldr	r3, [pc, #16]	; (8100fe4 <SystemInit+0x34>)
 8100fd2:	f04f 6201 	mov.w	r2, #135266304	; 0x8100000
 8100fd6:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 8100fd8:	bf00      	nop
 8100fda:	46bd      	mov	sp, r7
 8100fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100fe0:	4770      	bx	lr
 8100fe2:	bf00      	nop
 8100fe4:	e000ed00 	.word	0xe000ed00

08100fe8 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8100fe8:	b580      	push	{r7, lr}
 8100fea:	b08a      	sub	sp, #40	; 0x28
 8100fec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8100fee:	f107 031c 	add.w	r3, r7, #28
 8100ff2:	2200      	movs	r2, #0
 8100ff4:	601a      	str	r2, [r3, #0]
 8100ff6:	605a      	str	r2, [r3, #4]
 8100ff8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8100ffa:	463b      	mov	r3, r7
 8100ffc:	2200      	movs	r2, #0
 8100ffe:	601a      	str	r2, [r3, #0]
 8101000:	605a      	str	r2, [r3, #4]
 8101002:	609a      	str	r2, [r3, #8]
 8101004:	60da      	str	r2, [r3, #12]
 8101006:	611a      	str	r2, [r3, #16]
 8101008:	615a      	str	r2, [r3, #20]
 810100a:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 810100c:	4b30      	ldr	r3, [pc, #192]	; (81010d0 <MX_ADC1_Init+0xe8>)
 810100e:	4a31      	ldr	r2, [pc, #196]	; (81010d4 <MX_ADC1_Init+0xec>)
 8101010:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV8;
 8101012:	4b2f      	ldr	r3, [pc, #188]	; (81010d0 <MX_ADC1_Init+0xe8>)
 8101014:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8101018:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 810101a:	4b2d      	ldr	r3, [pc, #180]	; (81010d0 <MX_ADC1_Init+0xe8>)
 810101c:	2200      	movs	r2, #0
 810101e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8101020:	4b2b      	ldr	r3, [pc, #172]	; (81010d0 <MX_ADC1_Init+0xe8>)
 8101022:	2200      	movs	r2, #0
 8101024:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8101026:	4b2a      	ldr	r3, [pc, #168]	; (81010d0 <MX_ADC1_Init+0xe8>)
 8101028:	2204      	movs	r2, #4
 810102a:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 810102c:	4b28      	ldr	r3, [pc, #160]	; (81010d0 <MX_ADC1_Init+0xe8>)
 810102e:	2200      	movs	r2, #0
 8101030:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8101032:	4b27      	ldr	r3, [pc, #156]	; (81010d0 <MX_ADC1_Init+0xe8>)
 8101034:	2201      	movs	r2, #1
 8101036:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 8101038:	4b25      	ldr	r3, [pc, #148]	; (81010d0 <MX_ADC1_Init+0xe8>)
 810103a:	2201      	movs	r2, #1
 810103c:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 810103e:	4b24      	ldr	r3, [pc, #144]	; (81010d0 <MX_ADC1_Init+0xe8>)
 8101040:	2200      	movs	r2, #0
 8101042:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8101044:	4b22      	ldr	r3, [pc, #136]	; (81010d0 <MX_ADC1_Init+0xe8>)
 8101046:	2200      	movs	r2, #0
 8101048:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 810104a:	4b21      	ldr	r3, [pc, #132]	; (81010d0 <MX_ADC1_Init+0xe8>)
 810104c:	2200      	movs	r2, #0
 810104e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8101050:	4b1f      	ldr	r3, [pc, #124]	; (81010d0 <MX_ADC1_Init+0xe8>)
 8101052:	2203      	movs	r2, #3
 8101054:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8101056:	4b1e      	ldr	r3, [pc, #120]	; (81010d0 <MX_ADC1_Init+0xe8>)
 8101058:	2200      	movs	r2, #0
 810105a:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 810105c:	4b1c      	ldr	r3, [pc, #112]	; (81010d0 <MX_ADC1_Init+0xe8>)
 810105e:	2200      	movs	r2, #0
 8101060:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8101062:	4b1b      	ldr	r3, [pc, #108]	; (81010d0 <MX_ADC1_Init+0xe8>)
 8101064:	2200      	movs	r2, #0
 8101066:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 810106a:	4819      	ldr	r0, [pc, #100]	; (81010d0 <MX_ADC1_Init+0xe8>)
 810106c:	f001 ff16 	bl	8102e9c <HAL_ADC_Init>
 8101070:	4603      	mov	r3, r0
 8101072:	2b00      	cmp	r3, #0
 8101074:	d001      	beq.n	810107a <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8101076:	f000 fdc1 	bl	8101bfc <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 810107a:	2300      	movs	r3, #0
 810107c:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 810107e:	f107 031c 	add.w	r3, r7, #28
 8101082:	4619      	mov	r1, r3
 8101084:	4812      	ldr	r0, [pc, #72]	; (81010d0 <MX_ADC1_Init+0xe8>)
 8101086:	f002 ffb3 	bl	8103ff0 <HAL_ADCEx_MultiModeConfigChannel>
 810108a:	4603      	mov	r3, r0
 810108c:	2b00      	cmp	r3, #0
 810108e:	d001      	beq.n	8101094 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8101090:	f000 fdb4 	bl	8101bfc <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8101094:	4b10      	ldr	r3, [pc, #64]	; (81010d8 <MX_ADC1_Init+0xf0>)
 8101096:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8101098:	2306      	movs	r3, #6
 810109a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 810109c:	2300      	movs	r3, #0
 810109e:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 81010a0:	f240 73ff 	movw	r3, #2047	; 0x7ff
 81010a4:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 81010a6:	2304      	movs	r3, #4
 81010a8:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 81010aa:	2300      	movs	r3, #0
 81010ac:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 81010ae:	2300      	movs	r3, #0
 81010b0:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 81010b2:	463b      	mov	r3, r7
 81010b4:	4619      	mov	r1, r3
 81010b6:	4806      	ldr	r0, [pc, #24]	; (81010d0 <MX_ADC1_Init+0xe8>)
 81010b8:	f002 fae8 	bl	810368c <HAL_ADC_ConfigChannel>
 81010bc:	4603      	mov	r3, r0
 81010be:	2b00      	cmp	r3, #0
 81010c0:	d001      	beq.n	81010c6 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 81010c2:	f000 fd9b 	bl	8101bfc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 81010c6:	bf00      	nop
 81010c8:	3728      	adds	r7, #40	; 0x28
 81010ca:	46bd      	mov	sp, r7
 81010cc:	bd80      	pop	{r7, pc}
 81010ce:	bf00      	nop
 81010d0:	10004ed0 	.word	0x10004ed0
 81010d4:	40022000 	.word	0x40022000
 81010d8:	08600004 	.word	0x08600004

081010dc <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 81010dc:	b580      	push	{r7, lr}
 81010de:	b08a      	sub	sp, #40	; 0x28
 81010e0:	af00      	add	r7, sp, #0
 81010e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 81010e4:	f107 0314 	add.w	r3, r7, #20
 81010e8:	2200      	movs	r2, #0
 81010ea:	601a      	str	r2, [r3, #0]
 81010ec:	605a      	str	r2, [r3, #4]
 81010ee:	609a      	str	r2, [r3, #8]
 81010f0:	60da      	str	r2, [r3, #12]
 81010f2:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 81010f4:	687b      	ldr	r3, [r7, #4]
 81010f6:	681b      	ldr	r3, [r3, #0]
 81010f8:	4a34      	ldr	r2, [pc, #208]	; (81011cc <HAL_ADC_MspInit+0xf0>)
 81010fa:	4293      	cmp	r3, r2
 81010fc:	d162      	bne.n	81011c4 <HAL_ADC_MspInit+0xe8>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 81010fe:	4b34      	ldr	r3, [pc, #208]	; (81011d0 <HAL_ADC_MspInit+0xf4>)
 8101100:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8101104:	4a32      	ldr	r2, [pc, #200]	; (81011d0 <HAL_ADC_MspInit+0xf4>)
 8101106:	f043 0320 	orr.w	r3, r3, #32
 810110a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 810110e:	4b30      	ldr	r3, [pc, #192]	; (81011d0 <HAL_ADC_MspInit+0xf4>)
 8101110:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8101114:	f003 0320 	and.w	r3, r3, #32
 8101118:	613b      	str	r3, [r7, #16]
 810111a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 810111c:	4b2c      	ldr	r3, [pc, #176]	; (81011d0 <HAL_ADC_MspInit+0xf4>)
 810111e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101122:	4a2b      	ldr	r2, [pc, #172]	; (81011d0 <HAL_ADC_MspInit+0xf4>)
 8101124:	f043 0320 	orr.w	r3, r3, #32
 8101128:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 810112c:	4b28      	ldr	r3, [pc, #160]	; (81011d0 <HAL_ADC_MspInit+0xf4>)
 810112e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101132:	f003 0320 	and.w	r3, r3, #32
 8101136:	60fb      	str	r3, [r7, #12]
 8101138:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PF11     ------> ADC1_INP2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 810113a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 810113e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8101140:	2303      	movs	r3, #3
 8101142:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101144:	2300      	movs	r3, #0
 8101146:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8101148:	f107 0314 	add.w	r3, r7, #20
 810114c:	4619      	mov	r1, r3
 810114e:	4821      	ldr	r0, [pc, #132]	; (81011d4 <HAL_ADC_MspInit+0xf8>)
 8101150:	f005 ff76 	bl	8107040 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream4;
 8101154:	4b20      	ldr	r3, [pc, #128]	; (81011d8 <HAL_ADC_MspInit+0xfc>)
 8101156:	4a21      	ldr	r2, [pc, #132]	; (81011dc <HAL_ADC_MspInit+0x100>)
 8101158:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 810115a:	4b1f      	ldr	r3, [pc, #124]	; (81011d8 <HAL_ADC_MspInit+0xfc>)
 810115c:	2209      	movs	r2, #9
 810115e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8101160:	4b1d      	ldr	r3, [pc, #116]	; (81011d8 <HAL_ADC_MspInit+0xfc>)
 8101162:	2200      	movs	r2, #0
 8101164:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8101166:	4b1c      	ldr	r3, [pc, #112]	; (81011d8 <HAL_ADC_MspInit+0xfc>)
 8101168:	2200      	movs	r2, #0
 810116a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 810116c:	4b1a      	ldr	r3, [pc, #104]	; (81011d8 <HAL_ADC_MspInit+0xfc>)
 810116e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8101172:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8101174:	4b18      	ldr	r3, [pc, #96]	; (81011d8 <HAL_ADC_MspInit+0xfc>)
 8101176:	f44f 6200 	mov.w	r2, #2048	; 0x800
 810117a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 810117c:	4b16      	ldr	r3, [pc, #88]	; (81011d8 <HAL_ADC_MspInit+0xfc>)
 810117e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8101182:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8101184:	4b14      	ldr	r3, [pc, #80]	; (81011d8 <HAL_ADC_MspInit+0xfc>)
 8101186:	f44f 7280 	mov.w	r2, #256	; 0x100
 810118a:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 810118c:	4b12      	ldr	r3, [pc, #72]	; (81011d8 <HAL_ADC_MspInit+0xfc>)
 810118e:	2200      	movs	r2, #0
 8101190:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8101192:	4b11      	ldr	r3, [pc, #68]	; (81011d8 <HAL_ADC_MspInit+0xfc>)
 8101194:	2200      	movs	r2, #0
 8101196:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8101198:	480f      	ldr	r0, [pc, #60]	; (81011d8 <HAL_ADC_MspInit+0xfc>)
 810119a:	f003 f8ff 	bl	810439c <HAL_DMA_Init>
 810119e:	4603      	mov	r3, r0
 81011a0:	2b00      	cmp	r3, #0
 81011a2:	d001      	beq.n	81011a8 <HAL_ADC_MspInit+0xcc>
    {
      Error_Handler();
 81011a4:	f000 fd2a 	bl	8101bfc <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 81011a8:	687b      	ldr	r3, [r7, #4]
 81011aa:	4a0b      	ldr	r2, [pc, #44]	; (81011d8 <HAL_ADC_MspInit+0xfc>)
 81011ac:	64da      	str	r2, [r3, #76]	; 0x4c
 81011ae:	4a0a      	ldr	r2, [pc, #40]	; (81011d8 <HAL_ADC_MspInit+0xfc>)
 81011b0:	687b      	ldr	r3, [r7, #4]
 81011b2:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 81011b4:	2200      	movs	r2, #0
 81011b6:	2105      	movs	r1, #5
 81011b8:	2012      	movs	r0, #18
 81011ba:	f003 f8b3 	bl	8104324 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 81011be:	2012      	movs	r0, #18
 81011c0:	f003 f8ca 	bl	8104358 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 81011c4:	bf00      	nop
 81011c6:	3728      	adds	r7, #40	; 0x28
 81011c8:	46bd      	mov	sp, r7
 81011ca:	bd80      	pop	{r7, pc}
 81011cc:	40022000 	.word	0x40022000
 81011d0:	58024400 	.word	0x58024400
 81011d4:	58021400 	.word	0x58021400
 81011d8:	10004f34 	.word	0x10004f34
 81011dc:	40020070 	.word	0x40020070

081011e0 <BMP280ReadSensorID>:
#include "bmp280.h"
#include "common.h"


uint8_t BMP280ReadSensorID()
{
 81011e0:	b580      	push	{r7, lr}
 81011e2:	b082      	sub	sp, #8
 81011e4:	af00      	add	r7, sp, #0
	uint8_t data = 0;
 81011e6:	2300      	movs	r3, #0
 81011e8:	71bb      	strb	r3, [r7, #6]
	uint8_t status = BMP280_ReadReg8(BMP280_REG_ID, &data);
 81011ea:	1dbb      	adds	r3, r7, #6
 81011ec:	4619      	mov	r1, r3
 81011ee:	20d0      	movs	r0, #208	; 0xd0
 81011f0:	f000 f80c 	bl	810120c <BMP280_ReadReg8>
 81011f4:	4603      	mov	r3, r0
 81011f6:	71fb      	strb	r3, [r7, #7]
	if(status == HAL_OK)
 81011f8:	79fb      	ldrb	r3, [r7, #7]
 81011fa:	2b00      	cmp	r3, #0
 81011fc:	d101      	bne.n	8101202 <BMP280ReadSensorID+0x22>
	{
		return data;
 81011fe:	79bb      	ldrb	r3, [r7, #6]
 8101200:	e000      	b.n	8101204 <BMP280ReadSensorID+0x24>
	}

	else
	{
		return HAL_ERROR;
 8101202:	2301      	movs	r3, #1
	}

}
 8101204:	4618      	mov	r0, r3
 8101206:	3708      	adds	r7, #8
 8101208:	46bd      	mov	sp, r7
 810120a:	bd80      	pop	{r7, pc}

0810120c <BMP280_ReadReg8>:


uint8_t BMP280_ReadReg8(uint8_t address, uint8_t* data)
{
 810120c:	b580      	push	{r7, lr}
 810120e:	b084      	sub	sp, #16
 8101210:	af00      	add	r7, sp, #0
 8101212:	4603      	mov	r3, r0
 8101214:	6039      	str	r1, [r7, #0]
 8101216:	71fb      	strb	r3, [r7, #7]
	// Pull Pin low initially
	uint8_t txBuf[2] = {(0xD0|SPI_READ), 0x00};
 8101218:	23d0      	movs	r3, #208	; 0xd0
 810121a:	81bb      	strh	r3, [r7, #12]
	uint8_t rx_buff[2];
	HAL_GPIO_WritePin(SPI1_NCS_Port, SPI1_NCS_Pin, GPIO_PIN_RESET);
 810121c:	2200      	movs	r2, #0
 810121e:	2110      	movs	r1, #16
 8101220:	480e      	ldr	r0, [pc, #56]	; (810125c <BMP280_ReadReg8+0x50>)
 8101222:	f006 f8bd 	bl	81073a0 <HAL_GPIO_WritePin>
	if(HAL_SPI_TransmitReceive_DMA(&hspi1, txBuf, rx_buff, 2) == HAL_OK)
 8101226:	f107 0208 	add.w	r2, r7, #8
 810122a:	f107 010c 	add.w	r1, r7, #12
 810122e:	2302      	movs	r3, #2
 8101230:	480b      	ldr	r0, [pc, #44]	; (8101260 <BMP280_ReadReg8+0x54>)
 8101232:	f00c fcc7 	bl	810dbc4 <HAL_SPI_TransmitReceive_DMA>
 8101236:	4603      	mov	r3, r0
 8101238:	2b00      	cmp	r3, #0
 810123a:	d104      	bne.n	8101246 <BMP280_ReadReg8+0x3a>
	{
        *data = rx_buff[1];
 810123c:	7a7a      	ldrb	r2, [r7, #9]
 810123e:	683b      	ldr	r3, [r7, #0]
 8101240:	701a      	strb	r2, [r3, #0]
        return HAL_OK;
 8101242:	2300      	movs	r3, #0
 8101244:	e005      	b.n	8101252 <BMP280_ReadReg8+0x46>
	}

	else
	{
		HAL_GPIO_WritePin(SPI1_NCS_Port, SPI1_NCS_Pin, GPIO_PIN_SET);
 8101246:	2201      	movs	r2, #1
 8101248:	2110      	movs	r1, #16
 810124a:	4804      	ldr	r0, [pc, #16]	; (810125c <BMP280_ReadReg8+0x50>)
 810124c:	f006 f8a8 	bl	81073a0 <HAL_GPIO_WritePin>
		return HAL_ERROR;
 8101250:	2301      	movs	r3, #1
	}
}
 8101252:	4618      	mov	r0, r3
 8101254:	3710      	adds	r7, #16
 8101256:	46bd      	mov	sp, r7
 8101258:	bd80      	pop	{r7, pc}
 810125a:	bf00      	nop
 810125c:	58020000 	.word	0x58020000
 8101260:	10005218 	.word	0x10005218

08101264 <HAL_SPI_TxRxCpltCallback>:
{

}

void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8101264:	b480      	push	{r7}
 8101266:	b083      	sub	sp, #12
 8101268:	af00      	add	r7, sp, #0
 810126a:	6078      	str	r0, [r7, #4]
    //while(1);
}
 810126c:	bf00      	nop
 810126e:	370c      	adds	r7, #12
 8101270:	46bd      	mov	sp, r7
 8101272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101276:	4770      	bx	lr

08101278 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8101278:	b580      	push	{r7, lr}
 810127a:	b082      	sub	sp, #8
 810127c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 810127e:	4b2d      	ldr	r3, [pc, #180]	; (8101334 <MX_DMA_Init+0xbc>)
 8101280:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8101284:	4a2b      	ldr	r2, [pc, #172]	; (8101334 <MX_DMA_Init+0xbc>)
 8101286:	f043 0301 	orr.w	r3, r3, #1
 810128a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 810128e:	4b29      	ldr	r3, [pc, #164]	; (8101334 <MX_DMA_Init+0xbc>)
 8101290:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8101294:	f003 0301 	and.w	r3, r3, #1
 8101298:	607b      	str	r3, [r7, #4]
 810129a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 810129c:	4b25      	ldr	r3, [pc, #148]	; (8101334 <MX_DMA_Init+0xbc>)
 810129e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 81012a2:	4a24      	ldr	r2, [pc, #144]	; (8101334 <MX_DMA_Init+0xbc>)
 81012a4:	f043 0302 	orr.w	r3, r3, #2
 81012a8:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 81012ac:	4b21      	ldr	r3, [pc, #132]	; (8101334 <MX_DMA_Init+0xbc>)
 81012ae:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 81012b2:	f003 0302 	and.w	r3, r3, #2
 81012b6:	603b      	str	r3, [r7, #0]
 81012b8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 81012ba:	2200      	movs	r2, #0
 81012bc:	2105      	movs	r1, #5
 81012be:	200b      	movs	r0, #11
 81012c0:	f003 f830 	bl	8104324 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 81012c4:	200b      	movs	r0, #11
 81012c6:	f003 f847 	bl	8104358 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 81012ca:	2200      	movs	r2, #0
 81012cc:	2105      	movs	r1, #5
 81012ce:	200c      	movs	r0, #12
 81012d0:	f003 f828 	bl	8104324 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 81012d4:	200c      	movs	r0, #12
 81012d6:	f003 f83f 	bl	8104358 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 5, 0);
 81012da:	2200      	movs	r2, #0
 81012dc:	2105      	movs	r1, #5
 81012de:	200f      	movs	r0, #15
 81012e0:	f003 f820 	bl	8104324 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 81012e4:	200f      	movs	r0, #15
 81012e6:	f003 f837 	bl	8104358 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 81012ea:	2200      	movs	r2, #0
 81012ec:	2105      	movs	r1, #5
 81012ee:	2010      	movs	r0, #16
 81012f0:	f003 f818 	bl	8104324 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 81012f4:	2010      	movs	r0, #16
 81012f6:	f003 f82f 	bl	8104358 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 81012fa:	2200      	movs	r2, #0
 81012fc:	2105      	movs	r1, #5
 81012fe:	2011      	movs	r0, #17
 8101300:	f003 f810 	bl	8104324 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8101304:	2011      	movs	r0, #17
 8101306:	f003 f827 	bl	8104358 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 5, 0);
 810130a:	2200      	movs	r2, #0
 810130c:	2105      	movs	r1, #5
 810130e:	202f      	movs	r0, #47	; 0x2f
 8101310:	f003 f808 	bl	8104324 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8101314:	202f      	movs	r0, #47	; 0x2f
 8101316:	f003 f81f 	bl	8104358 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 810131a:	2200      	movs	r2, #0
 810131c:	2105      	movs	r1, #5
 810131e:	2038      	movs	r0, #56	; 0x38
 8101320:	f003 f800 	bl	8104324 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8101324:	2038      	movs	r0, #56	; 0x38
 8101326:	f003 f817 	bl	8104358 <HAL_NVIC_EnableIRQ>

}
 810132a:	bf00      	nop
 810132c:	3708      	adds	r7, #8
 810132e:	46bd      	mov	sp, r7
 8101330:	bd80      	pop	{r7, pc}
 8101332:	bf00      	nop
 8101334:	58024400 	.word	0x58024400

08101338 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8101338:	b580      	push	{r7, lr}
 810133a:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 810133c:	4a04      	ldr	r2, [pc, #16]	; (8101350 <MX_FREERTOS_Init+0x18>)
 810133e:	2100      	movs	r1, #0
 8101340:	4804      	ldr	r0, [pc, #16]	; (8101354 <MX_FREERTOS_Init+0x1c>)
 8101342:	f014 f9d2 	bl	81156ea <osThreadNew>
 8101346:	4603      	mov	r3, r0
 8101348:	4a03      	ldr	r2, [pc, #12]	; (8101358 <MX_FREERTOS_Init+0x20>)
 810134a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 810134c:	bf00      	nop
 810134e:	bd80      	pop	{r7, pc}
 8101350:	0811ba00 	.word	0x0811ba00
 8101354:	0810135d 	.word	0x0810135d
 8101358:	10004fac 	.word	0x10004fac

0810135c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 810135c:	b580      	push	{r7, lr}
 810135e:	b084      	sub	sp, #16
 8101360:	af00      	add	r7, sp, #0
 8101362:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8101364:	f017 f8c4 	bl	81184f0 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
	  int status = BMP280ReadSensorID();
 8101368:	f7ff ff3a 	bl	81011e0 <BMP280ReadSensorID>
 810136c:	60f8      	str	r0, [r7, #12]
    osDelay(1);
 810136e:	2001      	movs	r0, #1
 8101370:	f014 fa4d 	bl	811580e <osDelay>
  {
 8101374:	e7f8      	b.n	8101368 <StartDefaultTask+0xc>
	...

08101378 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8101378:	b580      	push	{r7, lr}
 810137a:	b08c      	sub	sp, #48	; 0x30
 810137c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 810137e:	f107 031c 	add.w	r3, r7, #28
 8101382:	2200      	movs	r2, #0
 8101384:	601a      	str	r2, [r3, #0]
 8101386:	605a      	str	r2, [r3, #4]
 8101388:	609a      	str	r2, [r3, #8]
 810138a:	60da      	str	r2, [r3, #12]
 810138c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 810138e:	4b41      	ldr	r3, [pc, #260]	; (8101494 <MX_GPIO_Init+0x11c>)
 8101390:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101394:	4a3f      	ldr	r2, [pc, #252]	; (8101494 <MX_GPIO_Init+0x11c>)
 8101396:	f043 0301 	orr.w	r3, r3, #1
 810139a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 810139e:	4b3d      	ldr	r3, [pc, #244]	; (8101494 <MX_GPIO_Init+0x11c>)
 81013a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81013a4:	f003 0301 	and.w	r3, r3, #1
 81013a8:	61bb      	str	r3, [r7, #24]
 81013aa:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 81013ac:	4b39      	ldr	r3, [pc, #228]	; (8101494 <MX_GPIO_Init+0x11c>)
 81013ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81013b2:	4a38      	ldr	r2, [pc, #224]	; (8101494 <MX_GPIO_Init+0x11c>)
 81013b4:	f043 0320 	orr.w	r3, r3, #32
 81013b8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81013bc:	4b35      	ldr	r3, [pc, #212]	; (8101494 <MX_GPIO_Init+0x11c>)
 81013be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81013c2:	f003 0320 	and.w	r3, r3, #32
 81013c6:	617b      	str	r3, [r7, #20]
 81013c8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 81013ca:	4b32      	ldr	r3, [pc, #200]	; (8101494 <MX_GPIO_Init+0x11c>)
 81013cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81013d0:	4a30      	ldr	r2, [pc, #192]	; (8101494 <MX_GPIO_Init+0x11c>)
 81013d2:	f043 0310 	orr.w	r3, r3, #16
 81013d6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81013da:	4b2e      	ldr	r3, [pc, #184]	; (8101494 <MX_GPIO_Init+0x11c>)
 81013dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81013e0:	f003 0310 	and.w	r3, r3, #16
 81013e4:	613b      	str	r3, [r7, #16]
 81013e6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 81013e8:	4b2a      	ldr	r3, [pc, #168]	; (8101494 <MX_GPIO_Init+0x11c>)
 81013ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81013ee:	4a29      	ldr	r2, [pc, #164]	; (8101494 <MX_GPIO_Init+0x11c>)
 81013f0:	f043 0302 	orr.w	r3, r3, #2
 81013f4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81013f8:	4b26      	ldr	r3, [pc, #152]	; (8101494 <MX_GPIO_Init+0x11c>)
 81013fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81013fe:	f003 0302 	and.w	r3, r3, #2
 8101402:	60fb      	str	r3, [r7, #12]
 8101404:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8101406:	4b23      	ldr	r3, [pc, #140]	; (8101494 <MX_GPIO_Init+0x11c>)
 8101408:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810140c:	4a21      	ldr	r2, [pc, #132]	; (8101494 <MX_GPIO_Init+0x11c>)
 810140e:	f043 0308 	orr.w	r3, r3, #8
 8101412:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101416:	4b1f      	ldr	r3, [pc, #124]	; (8101494 <MX_GPIO_Init+0x11c>)
 8101418:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810141c:	f003 0308 	and.w	r3, r3, #8
 8101420:	60bb      	str	r3, [r7, #8]
 8101422:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8101424:	4b1b      	ldr	r3, [pc, #108]	; (8101494 <MX_GPIO_Init+0x11c>)
 8101426:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810142a:	4a1a      	ldr	r2, [pc, #104]	; (8101494 <MX_GPIO_Init+0x11c>)
 810142c:	f043 0304 	orr.w	r3, r3, #4
 8101430:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101434:	4b17      	ldr	r3, [pc, #92]	; (8101494 <MX_GPIO_Init+0x11c>)
 8101436:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810143a:	f003 0304 	and.w	r3, r3, #4
 810143e:	607b      	str	r3, [r7, #4]
 8101440:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8101442:	4b14      	ldr	r3, [pc, #80]	; (8101494 <MX_GPIO_Init+0x11c>)
 8101444:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101448:	4a12      	ldr	r2, [pc, #72]	; (8101494 <MX_GPIO_Init+0x11c>)
 810144a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 810144e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101452:	4b10      	ldr	r3, [pc, #64]	; (8101494 <MX_GPIO_Init+0x11c>)
 8101454:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101458:	f003 0340 	and.w	r3, r3, #64	; 0x40
 810145c:	603b      	str	r3, [r7, #0]
 810145e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pins : PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = LSM9DS1_INT2_AG_Pin|LSM9DS1_INT_AG_Pin|LSM9DS1_INT_M_Pin;
 8101460:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8101464:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8101466:	4b0c      	ldr	r3, [pc, #48]	; (8101498 <MX_GPIO_Init+0x120>)
 8101468:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 810146a:	2300      	movs	r3, #0
 810146c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 810146e:	f107 031c 	add.w	r3, r7, #28
 8101472:	4619      	mov	r1, r3
 8101474:	4809      	ldr	r0, [pc, #36]	; (810149c <MX_GPIO_Init+0x124>)
 8101476:	f005 fde3 	bl	8107040 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 810147a:	2200      	movs	r2, #0
 810147c:	2105      	movs	r1, #5
 810147e:	2028      	movs	r0, #40	; 0x28
 8101480:	f002 ff50 	bl	8104324 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8101484:	2028      	movs	r0, #40	; 0x28
 8101486:	f002 ff67 	bl	8104358 <HAL_NVIC_EnableIRQ>

}
 810148a:	bf00      	nop
 810148c:	3730      	adds	r7, #48	; 0x30
 810148e:	46bd      	mov	sp, r7
 8101490:	bd80      	pop	{r7, pc}
 8101492:	bf00      	nop
 8101494:	58024400 	.word	0x58024400
 8101498:	11110000 	.word	0x11110000
 810149c:	58021800 	.word	0x58021800

081014a0 <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_rx;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 81014a0:	b580      	push	{r7, lr}
 81014a2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 81014a4:	4b1b      	ldr	r3, [pc, #108]	; (8101514 <MX_I2C1_Init+0x74>)
 81014a6:	4a1c      	ldr	r2, [pc, #112]	; (8101518 <MX_I2C1_Init+0x78>)
 81014a8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x302027FF;
 81014aa:	4b1a      	ldr	r3, [pc, #104]	; (8101514 <MX_I2C1_Init+0x74>)
 81014ac:	4a1b      	ldr	r2, [pc, #108]	; (810151c <MX_I2C1_Init+0x7c>)
 81014ae:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 81014b0:	4b18      	ldr	r3, [pc, #96]	; (8101514 <MX_I2C1_Init+0x74>)
 81014b2:	2200      	movs	r2, #0
 81014b4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 81014b6:	4b17      	ldr	r3, [pc, #92]	; (8101514 <MX_I2C1_Init+0x74>)
 81014b8:	2201      	movs	r2, #1
 81014ba:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 81014bc:	4b15      	ldr	r3, [pc, #84]	; (8101514 <MX_I2C1_Init+0x74>)
 81014be:	2200      	movs	r2, #0
 81014c0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 81014c2:	4b14      	ldr	r3, [pc, #80]	; (8101514 <MX_I2C1_Init+0x74>)
 81014c4:	2200      	movs	r2, #0
 81014c6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 81014c8:	4b12      	ldr	r3, [pc, #72]	; (8101514 <MX_I2C1_Init+0x74>)
 81014ca:	2200      	movs	r2, #0
 81014cc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 81014ce:	4b11      	ldr	r3, [pc, #68]	; (8101514 <MX_I2C1_Init+0x74>)
 81014d0:	2200      	movs	r2, #0
 81014d2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 81014d4:	4b0f      	ldr	r3, [pc, #60]	; (8101514 <MX_I2C1_Init+0x74>)
 81014d6:	2200      	movs	r2, #0
 81014d8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 81014da:	480e      	ldr	r0, [pc, #56]	; (8101514 <MX_I2C1_Init+0x74>)
 81014dc:	f005 ffd4 	bl	8107488 <HAL_I2C_Init>
 81014e0:	4603      	mov	r3, r0
 81014e2:	2b00      	cmp	r3, #0
 81014e4:	d001      	beq.n	81014ea <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 81014e6:	f000 fb89 	bl	8101bfc <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 81014ea:	2100      	movs	r1, #0
 81014ec:	4809      	ldr	r0, [pc, #36]	; (8101514 <MX_I2C1_Init+0x74>)
 81014ee:	f006 fee0 	bl	81082b2 <HAL_I2CEx_ConfigAnalogFilter>
 81014f2:	4603      	mov	r3, r0
 81014f4:	2b00      	cmp	r3, #0
 81014f6:	d001      	beq.n	81014fc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 81014f8:	f000 fb80 	bl	8101bfc <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 81014fc:	2100      	movs	r1, #0
 81014fe:	4805      	ldr	r0, [pc, #20]	; (8101514 <MX_I2C1_Init+0x74>)
 8101500:	f006 ff22 	bl	8108348 <HAL_I2CEx_ConfigDigitalFilter>
 8101504:	4603      	mov	r3, r0
 8101506:	2b00      	cmp	r3, #0
 8101508:	d001      	beq.n	810150e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 810150a:	f000 fb77 	bl	8101bfc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 810150e:	bf00      	nop
 8101510:	bd80      	pop	{r7, pc}
 8101512:	bf00      	nop
 8101514:	10005028 	.word	0x10005028
 8101518:	40005400 	.word	0x40005400
 810151c:	302027ff 	.word	0x302027ff

08101520 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8101520:	b580      	push	{r7, lr}
 8101522:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8101524:	4b1b      	ldr	r3, [pc, #108]	; (8101594 <MX_I2C2_Init+0x74>)
 8101526:	4a1c      	ldr	r2, [pc, #112]	; (8101598 <MX_I2C2_Init+0x78>)
 8101528:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x307075B1;
 810152a:	4b1a      	ldr	r3, [pc, #104]	; (8101594 <MX_I2C2_Init+0x74>)
 810152c:	4a1b      	ldr	r2, [pc, #108]	; (810159c <MX_I2C2_Init+0x7c>)
 810152e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8101530:	4b18      	ldr	r3, [pc, #96]	; (8101594 <MX_I2C2_Init+0x74>)
 8101532:	2200      	movs	r2, #0
 8101534:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8101536:	4b17      	ldr	r3, [pc, #92]	; (8101594 <MX_I2C2_Init+0x74>)
 8101538:	2201      	movs	r2, #1
 810153a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 810153c:	4b15      	ldr	r3, [pc, #84]	; (8101594 <MX_I2C2_Init+0x74>)
 810153e:	2200      	movs	r2, #0
 8101540:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8101542:	4b14      	ldr	r3, [pc, #80]	; (8101594 <MX_I2C2_Init+0x74>)
 8101544:	2200      	movs	r2, #0
 8101546:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8101548:	4b12      	ldr	r3, [pc, #72]	; (8101594 <MX_I2C2_Init+0x74>)
 810154a:	2200      	movs	r2, #0
 810154c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 810154e:	4b11      	ldr	r3, [pc, #68]	; (8101594 <MX_I2C2_Init+0x74>)
 8101550:	2200      	movs	r2, #0
 8101552:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8101554:	4b0f      	ldr	r3, [pc, #60]	; (8101594 <MX_I2C2_Init+0x74>)
 8101556:	2200      	movs	r2, #0
 8101558:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 810155a:	480e      	ldr	r0, [pc, #56]	; (8101594 <MX_I2C2_Init+0x74>)
 810155c:	f005 ff94 	bl	8107488 <HAL_I2C_Init>
 8101560:	4603      	mov	r3, r0
 8101562:	2b00      	cmp	r3, #0
 8101564:	d001      	beq.n	810156a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8101566:	f000 fb49 	bl	8101bfc <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 810156a:	2100      	movs	r1, #0
 810156c:	4809      	ldr	r0, [pc, #36]	; (8101594 <MX_I2C2_Init+0x74>)
 810156e:	f006 fea0 	bl	81082b2 <HAL_I2CEx_ConfigAnalogFilter>
 8101572:	4603      	mov	r3, r0
 8101574:	2b00      	cmp	r3, #0
 8101576:	d001      	beq.n	810157c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8101578:	f000 fb40 	bl	8101bfc <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 810157c:	2100      	movs	r1, #0
 810157e:	4805      	ldr	r0, [pc, #20]	; (8101594 <MX_I2C2_Init+0x74>)
 8101580:	f006 fee2 	bl	8108348 <HAL_I2CEx_ConfigDigitalFilter>
 8101584:	4603      	mov	r3, r0
 8101586:	2b00      	cmp	r3, #0
 8101588:	d001      	beq.n	810158e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 810158a:	f000 fb37 	bl	8101bfc <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 810158e:	bf00      	nop
 8101590:	bd80      	pop	{r7, pc}
 8101592:	bf00      	nop
 8101594:	10005074 	.word	0x10005074
 8101598:	40005800 	.word	0x40005800
 810159c:	307075b1 	.word	0x307075b1

081015a0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 81015a0:	b580      	push	{r7, lr}
 81015a2:	b0ba      	sub	sp, #232	; 0xe8
 81015a4:	af00      	add	r7, sp, #0
 81015a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 81015a8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 81015ac:	2200      	movs	r2, #0
 81015ae:	601a      	str	r2, [r3, #0]
 81015b0:	605a      	str	r2, [r3, #4]
 81015b2:	609a      	str	r2, [r3, #8]
 81015b4:	60da      	str	r2, [r3, #12]
 81015b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 81015b8:	f107 0318 	add.w	r3, r7, #24
 81015bc:	22bc      	movs	r2, #188	; 0xbc
 81015be:	2100      	movs	r1, #0
 81015c0:	4618      	mov	r0, r3
 81015c2:	f017 fcc7 	bl	8118f54 <memset>
  if(i2cHandle->Instance==I2C1)
 81015c6:	687b      	ldr	r3, [r7, #4]
 81015c8:	681b      	ldr	r3, [r3, #0]
 81015ca:	4a80      	ldr	r2, [pc, #512]	; (81017cc <HAL_I2C_MspInit+0x22c>)
 81015cc:	4293      	cmp	r3, r2
 81015ce:	f040 80b0 	bne.w	8101732 <HAL_I2C_MspInit+0x192>
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 81015d2:	2308      	movs	r3, #8
 81015d4:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 81015d6:	2300      	movs	r3, #0
 81015d8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 81015dc:	f107 0318 	add.w	r3, r7, #24
 81015e0:	4618      	mov	r0, r3
 81015e2:	f008 fb8b 	bl	8109cfc <HAL_RCCEx_PeriphCLKConfig>
 81015e6:	4603      	mov	r3, r0
 81015e8:	2b00      	cmp	r3, #0
 81015ea:	d001      	beq.n	81015f0 <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 81015ec:	f000 fb06 	bl	8101bfc <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 81015f0:	4b77      	ldr	r3, [pc, #476]	; (81017d0 <HAL_I2C_MspInit+0x230>)
 81015f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81015f6:	4a76      	ldr	r2, [pc, #472]	; (81017d0 <HAL_I2C_MspInit+0x230>)
 81015f8:	f043 0302 	orr.w	r3, r3, #2
 81015fc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101600:	4b73      	ldr	r3, [pc, #460]	; (81017d0 <HAL_I2C_MspInit+0x230>)
 8101602:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101606:	f003 0302 	and.w	r3, r3, #2
 810160a:	617b      	str	r3, [r7, #20]
 810160c:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 810160e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8101612:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8101616:	2312      	movs	r3, #18
 8101618:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 810161c:	2300      	movs	r3, #0
 810161e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101622:	2300      	movs	r3, #0
 8101624:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8101628:	2304      	movs	r3, #4
 810162a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 810162e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8101632:	4619      	mov	r1, r3
 8101634:	4867      	ldr	r0, [pc, #412]	; (81017d4 <HAL_I2C_MspInit+0x234>)
 8101636:	f005 fd03 	bl	8107040 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 810163a:	4b65      	ldr	r3, [pc, #404]	; (81017d0 <HAL_I2C_MspInit+0x230>)
 810163c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8101640:	4a63      	ldr	r2, [pc, #396]	; (81017d0 <HAL_I2C_MspInit+0x230>)
 8101642:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8101646:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 810164a:	4b61      	ldr	r3, [pc, #388]	; (81017d0 <HAL_I2C_MspInit+0x230>)
 810164c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8101650:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8101654:	613b      	str	r3, [r7, #16]
 8101656:	693b      	ldr	r3, [r7, #16]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream5;
 8101658:	4b5f      	ldr	r3, [pc, #380]	; (81017d8 <HAL_I2C_MspInit+0x238>)
 810165a:	4a60      	ldr	r2, [pc, #384]	; (81017dc <HAL_I2C_MspInit+0x23c>)
 810165c:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_I2C1_RX;
 810165e:	4b5e      	ldr	r3, [pc, #376]	; (81017d8 <HAL_I2C_MspInit+0x238>)
 8101660:	2221      	movs	r2, #33	; 0x21
 8101662:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8101664:	4b5c      	ldr	r3, [pc, #368]	; (81017d8 <HAL_I2C_MspInit+0x238>)
 8101666:	2200      	movs	r2, #0
 8101668:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 810166a:	4b5b      	ldr	r3, [pc, #364]	; (81017d8 <HAL_I2C_MspInit+0x238>)
 810166c:	2200      	movs	r2, #0
 810166e:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8101670:	4b59      	ldr	r3, [pc, #356]	; (81017d8 <HAL_I2C_MspInit+0x238>)
 8101672:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8101676:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8101678:	4b57      	ldr	r3, [pc, #348]	; (81017d8 <HAL_I2C_MspInit+0x238>)
 810167a:	2200      	movs	r2, #0
 810167c:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 810167e:	4b56      	ldr	r3, [pc, #344]	; (81017d8 <HAL_I2C_MspInit+0x238>)
 8101680:	2200      	movs	r2, #0
 8101682:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8101684:	4b54      	ldr	r3, [pc, #336]	; (81017d8 <HAL_I2C_MspInit+0x238>)
 8101686:	2200      	movs	r2, #0
 8101688:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 810168a:	4b53      	ldr	r3, [pc, #332]	; (81017d8 <HAL_I2C_MspInit+0x238>)
 810168c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8101690:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8101692:	4b51      	ldr	r3, [pc, #324]	; (81017d8 <HAL_I2C_MspInit+0x238>)
 8101694:	2200      	movs	r2, #0
 8101696:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8101698:	484f      	ldr	r0, [pc, #316]	; (81017d8 <HAL_I2C_MspInit+0x238>)
 810169a:	f002 fe7f 	bl	810439c <HAL_DMA_Init>
 810169e:	4603      	mov	r3, r0
 81016a0:	2b00      	cmp	r3, #0
 81016a2:	d001      	beq.n	81016a8 <HAL_I2C_MspInit+0x108>
    {
      Error_Handler();
 81016a4:	f000 faaa 	bl	8101bfc <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 81016a8:	687b      	ldr	r3, [r7, #4]
 81016aa:	4a4b      	ldr	r2, [pc, #300]	; (81017d8 <HAL_I2C_MspInit+0x238>)
 81016ac:	63da      	str	r2, [r3, #60]	; 0x3c
 81016ae:	4a4a      	ldr	r2, [pc, #296]	; (81017d8 <HAL_I2C_MspInit+0x238>)
 81016b0:	687b      	ldr	r3, [r7, #4]
 81016b2:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream6;
 81016b4:	4b4a      	ldr	r3, [pc, #296]	; (81017e0 <HAL_I2C_MspInit+0x240>)
 81016b6:	4a4b      	ldr	r2, [pc, #300]	; (81017e4 <HAL_I2C_MspInit+0x244>)
 81016b8:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_I2C1_TX;
 81016ba:	4b49      	ldr	r3, [pc, #292]	; (81017e0 <HAL_I2C_MspInit+0x240>)
 81016bc:	2222      	movs	r2, #34	; 0x22
 81016be:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 81016c0:	4b47      	ldr	r3, [pc, #284]	; (81017e0 <HAL_I2C_MspInit+0x240>)
 81016c2:	2240      	movs	r2, #64	; 0x40
 81016c4:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 81016c6:	4b46      	ldr	r3, [pc, #280]	; (81017e0 <HAL_I2C_MspInit+0x240>)
 81016c8:	2200      	movs	r2, #0
 81016ca:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 81016cc:	4b44      	ldr	r3, [pc, #272]	; (81017e0 <HAL_I2C_MspInit+0x240>)
 81016ce:	f44f 6280 	mov.w	r2, #1024	; 0x400
 81016d2:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 81016d4:	4b42      	ldr	r3, [pc, #264]	; (81017e0 <HAL_I2C_MspInit+0x240>)
 81016d6:	2200      	movs	r2, #0
 81016d8:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 81016da:	4b41      	ldr	r3, [pc, #260]	; (81017e0 <HAL_I2C_MspInit+0x240>)
 81016dc:	2200      	movs	r2, #0
 81016de:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 81016e0:	4b3f      	ldr	r3, [pc, #252]	; (81017e0 <HAL_I2C_MspInit+0x240>)
 81016e2:	2200      	movs	r2, #0
 81016e4:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 81016e6:	4b3e      	ldr	r3, [pc, #248]	; (81017e0 <HAL_I2C_MspInit+0x240>)
 81016e8:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 81016ec:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 81016ee:	4b3c      	ldr	r3, [pc, #240]	; (81017e0 <HAL_I2C_MspInit+0x240>)
 81016f0:	2200      	movs	r2, #0
 81016f2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 81016f4:	483a      	ldr	r0, [pc, #232]	; (81017e0 <HAL_I2C_MspInit+0x240>)
 81016f6:	f002 fe51 	bl	810439c <HAL_DMA_Init>
 81016fa:	4603      	mov	r3, r0
 81016fc:	2b00      	cmp	r3, #0
 81016fe:	d001      	beq.n	8101704 <HAL_I2C_MspInit+0x164>
    {
      Error_Handler();
 8101700:	f000 fa7c 	bl	8101bfc <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 8101704:	687b      	ldr	r3, [r7, #4]
 8101706:	4a36      	ldr	r2, [pc, #216]	; (81017e0 <HAL_I2C_MspInit+0x240>)
 8101708:	639a      	str	r2, [r3, #56]	; 0x38
 810170a:	4a35      	ldr	r2, [pc, #212]	; (81017e0 <HAL_I2C_MspInit+0x240>)
 810170c:	687b      	ldr	r3, [r7, #4]
 810170e:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 8101710:	2200      	movs	r2, #0
 8101712:	2105      	movs	r1, #5
 8101714:	201f      	movs	r0, #31
 8101716:	f002 fe05 	bl	8104324 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 810171a:	201f      	movs	r0, #31
 810171c:	f002 fe1c 	bl	8104358 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 8101720:	2200      	movs	r2, #0
 8101722:	2105      	movs	r1, #5
 8101724:	2020      	movs	r0, #32
 8101726:	f002 fdfd 	bl	8104324 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 810172a:	2020      	movs	r0, #32
 810172c:	f002 fe14 	bl	8104358 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8101730:	e047      	b.n	81017c2 <HAL_I2C_MspInit+0x222>
  else if(i2cHandle->Instance==I2C2)
 8101732:	687b      	ldr	r3, [r7, #4]
 8101734:	681b      	ldr	r3, [r3, #0]
 8101736:	4a2c      	ldr	r2, [pc, #176]	; (81017e8 <HAL_I2C_MspInit+0x248>)
 8101738:	4293      	cmp	r3, r2
 810173a:	d142      	bne.n	81017c2 <HAL_I2C_MspInit+0x222>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 810173c:	2308      	movs	r3, #8
 810173e:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8101740:	2300      	movs	r3, #0
 8101742:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8101746:	f107 0318 	add.w	r3, r7, #24
 810174a:	4618      	mov	r0, r3
 810174c:	f008 fad6 	bl	8109cfc <HAL_RCCEx_PeriphCLKConfig>
 8101750:	4603      	mov	r3, r0
 8101752:	2b00      	cmp	r3, #0
 8101754:	d001      	beq.n	810175a <HAL_I2C_MspInit+0x1ba>
      Error_Handler();
 8101756:	f000 fa51 	bl	8101bfc <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 810175a:	4b1d      	ldr	r3, [pc, #116]	; (81017d0 <HAL_I2C_MspInit+0x230>)
 810175c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101760:	4a1b      	ldr	r2, [pc, #108]	; (81017d0 <HAL_I2C_MspInit+0x230>)
 8101762:	f043 0302 	orr.w	r3, r3, #2
 8101766:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 810176a:	4b19      	ldr	r3, [pc, #100]	; (81017d0 <HAL_I2C_MspInit+0x230>)
 810176c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101770:	f003 0302 	and.w	r3, r3, #2
 8101774:	60fb      	str	r3, [r7, #12]
 8101776:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8101778:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 810177c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8101780:	2312      	movs	r3, #18
 8101782:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101786:	2300      	movs	r3, #0
 8101788:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 810178c:	2300      	movs	r3, #0
 810178e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8101792:	2304      	movs	r3, #4
 8101794:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8101798:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 810179c:	4619      	mov	r1, r3
 810179e:	480d      	ldr	r0, [pc, #52]	; (81017d4 <HAL_I2C_MspInit+0x234>)
 81017a0:	f005 fc4e 	bl	8107040 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 81017a4:	4b0a      	ldr	r3, [pc, #40]	; (81017d0 <HAL_I2C_MspInit+0x230>)
 81017a6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 81017aa:	4a09      	ldr	r2, [pc, #36]	; (81017d0 <HAL_I2C_MspInit+0x230>)
 81017ac:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 81017b0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 81017b4:	4b06      	ldr	r3, [pc, #24]	; (81017d0 <HAL_I2C_MspInit+0x230>)
 81017b6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 81017ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 81017be:	60bb      	str	r3, [r7, #8]
 81017c0:	68bb      	ldr	r3, [r7, #8]
}
 81017c2:	bf00      	nop
 81017c4:	37e8      	adds	r7, #232	; 0xe8
 81017c6:	46bd      	mov	sp, r7
 81017c8:	bd80      	pop	{r7, pc}
 81017ca:	bf00      	nop
 81017cc:	40005400 	.word	0x40005400
 81017d0:	58024400 	.word	0x58024400
 81017d4:	58020400 	.word	0x58020400
 81017d8:	100050c0 	.word	0x100050c0
 81017dc:	40020088 	.word	0x40020088
 81017e0:	10004fb0 	.word	0x10004fb0
 81017e4:	400200a0 	.word	0x400200a0
 81017e8:	40005800 	.word	0x40005800

081017ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 81017ec:	b580      	push	{r7, lr}
 81017ee:	b082      	sub	sp, #8
 81017f0:	af00      	add	r7, sp, #0

  /* USER CODE END 1 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /*HW semaphore Clock enable*/
  __HAL_RCC_HSEM_CLK_ENABLE();
 81017f2:	4b2f      	ldr	r3, [pc, #188]	; (81018b0 <main+0xc4>)
 81017f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81017f8:	4a2d      	ldr	r2, [pc, #180]	; (81018b0 <main+0xc4>)
 81017fa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 81017fe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101802:	4b2b      	ldr	r3, [pc, #172]	; (81018b0 <main+0xc4>)
 8101804:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101808:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 810180c:	607b      	str	r3, [r7, #4]
 810180e:	687b      	ldr	r3, [r7, #4]
  /* Activate HSEM notification for Cortex-M4*/
  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8101810:	2001      	movs	r0, #1
 8101812:	f005 fe03 	bl	810741c <HAL_HSEM_ActivateNotification>
  /*
  Domain D2 goes to STOP mode (Cortex-M4 in deep-sleep) waiting for Cortex-M7 to
  perform system initialization (system clock config, external memory configuration.. )
  */
  HAL_PWREx_ClearPendingEvent();
 8101816:	f008 f839 	bl	810988c <HAL_PWREx_ClearPendingEvent>
  HAL_PWREx_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_STOPENTRY_WFE, PWR_D2_DOMAIN);
 810181a:	2201      	movs	r2, #1
 810181c:	2102      	movs	r1, #2
 810181e:	2000      	movs	r0, #0
 8101820:	f007 ffba 	bl	8109798 <HAL_PWREx_EnterSTOPMode>
  /* Clear HSEM flag */
  __HAL_HSEM_CLEAR_FLAG(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8101824:	4b23      	ldr	r3, [pc, #140]	; (81018b4 <main+0xc8>)
 8101826:	681b      	ldr	r3, [r3, #0]
 8101828:	091b      	lsrs	r3, r3, #4
 810182a:	f003 030f 	and.w	r3, r3, #15
 810182e:	2b07      	cmp	r3, #7
 8101830:	d108      	bne.n	8101844 <main+0x58>
 8101832:	4b21      	ldr	r3, [pc, #132]	; (81018b8 <main+0xcc>)
 8101834:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8101838:	4a1f      	ldr	r2, [pc, #124]	; (81018b8 <main+0xcc>)
 810183a:	f043 0301 	orr.w	r3, r3, #1
 810183e:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
 8101842:	e007      	b.n	8101854 <main+0x68>
 8101844:	4b1c      	ldr	r3, [pc, #112]	; (81018b8 <main+0xcc>)
 8101846:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 810184a:	4a1b      	ldr	r2, [pc, #108]	; (81018b8 <main+0xcc>)
 810184c:	f043 0301 	orr.w	r3, r3, #1
 8101850:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114

/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8101854:	f001 f8a6 	bl	81029a4 <HAL_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8101858:	f7ff fd8e 	bl	8101378 <MX_GPIO_Init>
  MX_DMA_Init();
 810185c:	f7ff fd0c 	bl	8101278 <MX_DMA_Init>
  MX_USART3_UART_Init();
 8101860:	f000 ff58 	bl	8102714 <MX_USART3_UART_Init>
  MX_TIM1_Init();
 8101864:	f000 fdd8 	bl	8102418 <MX_TIM1_Init>
  MX_I2C1_Init();
 8101868:	f7ff fe1a 	bl	81014a0 <MX_I2C1_Init>
  MX_SPI1_Init();
 810186c:	f000 fa88 	bl	8101d80 <MX_SPI1_Init>
  MX_ADC1_Init();
 8101870:	f7ff fbba 	bl	8100fe8 <MX_ADC1_Init>
  MX_I2C2_Init();
 8101874:	f7ff fe54 	bl	8101520 <MX_I2C2_Init>
  MX_SDMMC1_SD_Init();
 8101878:	f000 f9c8 	bl	8101c0c <MX_SDMMC1_SD_Init>
  MX_FATFS_Init();
 810187c:	f011 ff70 	bl	8113760 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  ConfigGPS();
 8101880:	f000 f822 	bl	81018c8 <ConfigGPS>


  if(HAL_UART_Receive_DMA(&huart3, (uint8_t *)data_byte, 1)== HAL_OK)
 8101884:	2201      	movs	r2, #1
 8101886:	490d      	ldr	r1, [pc, #52]	; (81018bc <main+0xd0>)
 8101888:	480d      	ldr	r0, [pc, #52]	; (81018c0 <main+0xd4>)
 810188a:	f00e f93f 	bl	810fb0c <HAL_UART_Receive_DMA>
 810188e:	4603      	mov	r3, r0
 8101890:	2b00      	cmp	r3, #0
 8101892:	d105      	bne.n	81018a0 <main+0xb4>
  {
	  	LEDC_ON();
 8101894:	2201      	movs	r2, #1
 8101896:	f44f 7180 	mov.w	r1, #256	; 0x100
 810189a:	480a      	ldr	r0, [pc, #40]	; (81018c4 <main+0xd8>)
 810189c:	f005 fd80 	bl	81073a0 <HAL_GPIO_WritePin>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 81018a0:	f013 fea2 	bl	81155e8 <osKernelInitialize>
  MX_FREERTOS_Init();
 81018a4:	f7ff fd48 	bl	8101338 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 81018a8:	f013 fee4 	bl	8115674 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 81018ac:	e7fe      	b.n	81018ac <main+0xc0>
 81018ae:	bf00      	nop
 81018b0:	58024400 	.word	0x58024400
 81018b4:	e000ed00 	.word	0xe000ed00
 81018b8:	58026400 	.word	0x58026400
 81018bc:	10000374 	.word	0x10000374
 81018c0:	100054a0 	.word	0x100054a0
 81018c4:	58021400 	.word	0x58021400

081018c8 <ConfigGPS>:
  }
  /* USER CODE END 3 */
}

void ConfigGPS(void)
{
 81018c8:	b590      	push	{r4, r7, lr}
 81018ca:	b0c1      	sub	sp, #260	; 0x104
 81018cc:	af00      	add	r7, sp, #0
		if(HAL_UART_Transmit_DMA(&huart3, (uint8_t *)UBLOX_10HZ_RATE, sizeof(UBLOX_10HZ_RATE)) == HAL_OK)
 81018ce:	4b65      	ldr	r3, [pc, #404]	; (8101a64 <ConfigGPS+0x19c>)
 81018d0:	f107 04f0 	add.w	r4, r7, #240	; 0xf0
 81018d4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 81018d6:	c407      	stmia	r4!, {r0, r1, r2}
 81018d8:	8023      	strh	r3, [r4, #0]
 81018da:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 81018de:	220e      	movs	r2, #14
 81018e0:	4619      	mov	r1, r3
 81018e2:	4861      	ldr	r0, [pc, #388]	; (8101a68 <ConfigGPS+0x1a0>)
 81018e4:	f00e f892 	bl	810fa0c <HAL_UART_Transmit_DMA>
 81018e8:	4603      	mov	r3, r0
 81018ea:	2b00      	cmp	r3, #0
 81018ec:	d105      	bne.n	81018fa <ConfigGPS+0x32>
		{
		  LEDD_ON();
 81018ee:	2201      	movs	r2, #1
 81018f0:	f44f 7100 	mov.w	r1, #512	; 0x200
 81018f4:	485d      	ldr	r0, [pc, #372]	; (8101a6c <ConfigGPS+0x1a4>)
 81018f6:	f005 fd53 	bl	81073a0 <HAL_GPIO_WritePin>
		}
		HAL_Delay(100);
 81018fa:	2064      	movs	r0, #100	; 0x64
 81018fc:	f001 f8d0 	bl	8102aa0 <HAL_Delay>

	    if(HAL_UART_Transmit_DMA(&huart3, (uint8_t *)UBLOX_GXGGA_OFF, sizeof(UBLOX_GXGGA_OFF)) == HAL_OK)
 8101900:	4b5b      	ldr	r3, [pc, #364]	; (8101a70 <ConfigGPS+0x1a8>)
 8101902:	f107 04d0 	add.w	r4, r7, #208	; 0xd0
 8101906:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8101908:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 810190c:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8101910:	2210      	movs	r2, #16
 8101912:	4619      	mov	r1, r3
 8101914:	4854      	ldr	r0, [pc, #336]	; (8101a68 <ConfigGPS+0x1a0>)
 8101916:	f00e f879 	bl	810fa0c <HAL_UART_Transmit_DMA>
 810191a:	4603      	mov	r3, r0
 810191c:	2b00      	cmp	r3, #0
 810191e:	d105      	bne.n	810192c <ConfigGPS+0x64>
	    {
	  	  LEDD_ON();
 8101920:	2201      	movs	r2, #1
 8101922:	f44f 7100 	mov.w	r1, #512	; 0x200
 8101926:	4851      	ldr	r0, [pc, #324]	; (8101a6c <ConfigGPS+0x1a4>)
 8101928:	f005 fd3a 	bl	81073a0 <HAL_GPIO_WritePin>
	    }
	    HAL_Delay(100);
 810192c:	2064      	movs	r0, #100	; 0x64
 810192e:	f001 f8b7 	bl	8102aa0 <HAL_Delay>

	    if(HAL_UART_Transmit_DMA(&huart3, (uint8_t *)UBLOX_GXGLL_OFF, sizeof(UBLOX_GXGLL_OFF)) == HAL_OK)
 8101932:	4b50      	ldr	r3, [pc, #320]	; (8101a74 <ConfigGPS+0x1ac>)
 8101934:	f107 04b0 	add.w	r4, r7, #176	; 0xb0
 8101938:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 810193a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 810193e:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8101942:	2210      	movs	r2, #16
 8101944:	4619      	mov	r1, r3
 8101946:	4848      	ldr	r0, [pc, #288]	; (8101a68 <ConfigGPS+0x1a0>)
 8101948:	f00e f860 	bl	810fa0c <HAL_UART_Transmit_DMA>
 810194c:	4603      	mov	r3, r0
 810194e:	2b00      	cmp	r3, #0
 8101950:	d105      	bne.n	810195e <ConfigGPS+0x96>
	    {
	  	  LEDD_ON();
 8101952:	2201      	movs	r2, #1
 8101954:	f44f 7100 	mov.w	r1, #512	; 0x200
 8101958:	4844      	ldr	r0, [pc, #272]	; (8101a6c <ConfigGPS+0x1a4>)
 810195a:	f005 fd21 	bl	81073a0 <HAL_GPIO_WritePin>
	    }
	    HAL_Delay(100);
 810195e:	2064      	movs	r0, #100	; 0x64
 8101960:	f001 f89e 	bl	8102aa0 <HAL_Delay>

	    if(HAL_UART_Transmit_DMA(&huart3, (uint8_t *)UBLOX_GXGSA_OFF, sizeof(UBLOX_GXGSA_OFF)) == HAL_OK)
 8101964:	4b44      	ldr	r3, [pc, #272]	; (8101a78 <ConfigGPS+0x1b0>)
 8101966:	f107 0490 	add.w	r4, r7, #144	; 0x90
 810196a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 810196c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8101970:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8101974:	2210      	movs	r2, #16
 8101976:	4619      	mov	r1, r3
 8101978:	483b      	ldr	r0, [pc, #236]	; (8101a68 <ConfigGPS+0x1a0>)
 810197a:	f00e f847 	bl	810fa0c <HAL_UART_Transmit_DMA>
 810197e:	4603      	mov	r3, r0
 8101980:	2b00      	cmp	r3, #0
 8101982:	d105      	bne.n	8101990 <ConfigGPS+0xc8>
	    {
	  	  LEDD_ON();
 8101984:	2201      	movs	r2, #1
 8101986:	f44f 7100 	mov.w	r1, #512	; 0x200
 810198a:	4838      	ldr	r0, [pc, #224]	; (8101a6c <ConfigGPS+0x1a4>)
 810198c:	f005 fd08 	bl	81073a0 <HAL_GPIO_WritePin>
	    }
	    HAL_Delay(100);
 8101990:	2064      	movs	r0, #100	; 0x64
 8101992:	f001 f885 	bl	8102aa0 <HAL_Delay>

	    if(HAL_UART_Transmit_DMA(&huart3, (uint8_t *)UBLOX_GXGSV_OFF, sizeof(UBLOX_GXGSV_OFF)) == HAL_OK)
 8101996:	4b39      	ldr	r3, [pc, #228]	; (8101a7c <ConfigGPS+0x1b4>)
 8101998:	f107 0470 	add.w	r4, r7, #112	; 0x70
 810199c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 810199e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 81019a2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 81019a6:	2210      	movs	r2, #16
 81019a8:	4619      	mov	r1, r3
 81019aa:	482f      	ldr	r0, [pc, #188]	; (8101a68 <ConfigGPS+0x1a0>)
 81019ac:	f00e f82e 	bl	810fa0c <HAL_UART_Transmit_DMA>
 81019b0:	4603      	mov	r3, r0
 81019b2:	2b00      	cmp	r3, #0
 81019b4:	d105      	bne.n	81019c2 <ConfigGPS+0xfa>
	    {
	  	  LEDD_ON();
 81019b6:	2201      	movs	r2, #1
 81019b8:	f44f 7100 	mov.w	r1, #512	; 0x200
 81019bc:	482b      	ldr	r0, [pc, #172]	; (8101a6c <ConfigGPS+0x1a4>)
 81019be:	f005 fcef 	bl	81073a0 <HAL_GPIO_WritePin>
	    }
	    HAL_Delay(100);
 81019c2:	2064      	movs	r0, #100	; 0x64
 81019c4:	f001 f86c 	bl	8102aa0 <HAL_Delay>

	    if(HAL_UART_Transmit_DMA(&huart3, (uint8_t *)UBLOX_GXRMC_OFF, sizeof(UBLOX_GXRMC_OFF)) == HAL_OK)
 81019c8:	4b2d      	ldr	r3, [pc, #180]	; (8101a80 <ConfigGPS+0x1b8>)
 81019ca:	f107 0450 	add.w	r4, r7, #80	; 0x50
 81019ce:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 81019d0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 81019d4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 81019d8:	2210      	movs	r2, #16
 81019da:	4619      	mov	r1, r3
 81019dc:	4822      	ldr	r0, [pc, #136]	; (8101a68 <ConfigGPS+0x1a0>)
 81019de:	f00e f815 	bl	810fa0c <HAL_UART_Transmit_DMA>
 81019e2:	4603      	mov	r3, r0
 81019e4:	2b00      	cmp	r3, #0
 81019e6:	d105      	bne.n	81019f4 <ConfigGPS+0x12c>
	    {
	  	  LEDD_ON();
 81019e8:	2201      	movs	r2, #1
 81019ea:	f44f 7100 	mov.w	r1, #512	; 0x200
 81019ee:	481f      	ldr	r0, [pc, #124]	; (8101a6c <ConfigGPS+0x1a4>)
 81019f0:	f005 fcd6 	bl	81073a0 <HAL_GPIO_WritePin>
	    }
	    HAL_Delay(100);
 81019f4:	2064      	movs	r0, #100	; 0x64
 81019f6:	f001 f853 	bl	8102aa0 <HAL_Delay>

	    if(HAL_UART_Transmit_DMA(&huart3, (uint8_t *)UBLOX_GXVTG_OFF, sizeof(UBLOX_GXVTG_OFF)) == HAL_OK)
 81019fa:	4b22      	ldr	r3, [pc, #136]	; (8101a84 <ConfigGPS+0x1bc>)
 81019fc:	f107 0430 	add.w	r4, r7, #48	; 0x30
 8101a00:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8101a02:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8101a06:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8101a0a:	2210      	movs	r2, #16
 8101a0c:	4619      	mov	r1, r3
 8101a0e:	4816      	ldr	r0, [pc, #88]	; (8101a68 <ConfigGPS+0x1a0>)
 8101a10:	f00d fffc 	bl	810fa0c <HAL_UART_Transmit_DMA>
 8101a14:	4603      	mov	r3, r0
 8101a16:	2b00      	cmp	r3, #0
 8101a18:	d105      	bne.n	8101a26 <ConfigGPS+0x15e>
	    {
	  	  LEDD_ON();
 8101a1a:	2201      	movs	r2, #1
 8101a1c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8101a20:	4812      	ldr	r0, [pc, #72]	; (8101a6c <ConfigGPS+0x1a4>)
 8101a22:	f005 fcbd 	bl	81073a0 <HAL_GPIO_WritePin>
	    }
	    HAL_Delay(100);
 8101a26:	2064      	movs	r0, #100	; 0x64
 8101a28:	f001 f83a 	bl	8102aa0 <HAL_Delay>

	    if(HAL_UART_Transmit_DMA(&huart3, (uint8_t *)UBLOX_NAVPVT_ON, sizeof(UBLOX_NAVPVT_ON)) == HAL_OK)
 8101a2c:	4b16      	ldr	r3, [pc, #88]	; (8101a88 <ConfigGPS+0x1c0>)
 8101a2e:	f107 0410 	add.w	r4, r7, #16
 8101a32:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8101a34:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8101a38:	f107 0310 	add.w	r3, r7, #16
 8101a3c:	2210      	movs	r2, #16
 8101a3e:	4619      	mov	r1, r3
 8101a40:	4809      	ldr	r0, [pc, #36]	; (8101a68 <ConfigGPS+0x1a0>)
 8101a42:	f00d ffe3 	bl	810fa0c <HAL_UART_Transmit_DMA>
 8101a46:	4603      	mov	r3, r0
 8101a48:	2b00      	cmp	r3, #0
 8101a4a:	d105      	bne.n	8101a58 <ConfigGPS+0x190>
	    {
	  	  LEDD_ON();
 8101a4c:	2201      	movs	r2, #1
 8101a4e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8101a52:	4806      	ldr	r0, [pc, #24]	; (8101a6c <ConfigGPS+0x1a4>)
 8101a54:	f005 fca4 	bl	81073a0 <HAL_GPIO_WritePin>
	    }
}
 8101a58:	bf00      	nop
 8101a5a:	f507 7782 	add.w	r7, r7, #260	; 0x104
 8101a5e:	46bd      	mov	sp, r7
 8101a60:	bd90      	pop	{r4, r7, pc}
 8101a62:	bf00      	nop
 8101a64:	0811b90c 	.word	0x0811b90c
 8101a68:	100054a0 	.word	0x100054a0
 8101a6c:	58021400 	.word	0x58021400
 8101a70:	0811b91c 	.word	0x0811b91c
 8101a74:	0811b92c 	.word	0x0811b92c
 8101a78:	0811b93c 	.word	0x0811b93c
 8101a7c:	0811b94c 	.word	0x0811b94c
 8101a80:	0811b95c 	.word	0x0811b95c
 8101a84:	0811b96c 	.word	0x0811b96c
 8101a88:	0811b97c 	.word	0x0811b97c

08101a8c <HAL_UART_RxCpltCallback>:


/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8101a8c:	b580      	push	{r7, lr}
 8101a8e:	b084      	sub	sp, #16
 8101a90:	af00      	add	r7, sp, #0
 8101a92:	6078      	str	r0, [r7, #4]
	static int byte_pos = 0;
	static unsigned char checksum[2];
	const int data_size = sizeof(pvt);
 8101a94:	2360      	movs	r3, #96	; 0x60
 8101a96:	60fb      	str	r3, [r7, #12]

	if(huart->Instance == USART3)
 8101a98:	687b      	ldr	r3, [r7, #4]
 8101a9a:	681b      	ldr	r3, [r3, #0]
 8101a9c:	4a37      	ldr	r2, [pc, #220]	; (8101b7c <HAL_UART_RxCpltCallback+0xf0>)
 8101a9e:	4293      	cmp	r3, r2
 8101aa0:	d167      	bne.n	8101b72 <HAL_UART_RxCpltCallback+0xe6>
	{
		if(byte_pos < 2)
 8101aa2:	4b37      	ldr	r3, [pc, #220]	; (8101b80 <HAL_UART_RxCpltCallback+0xf4>)
 8101aa4:	681b      	ldr	r3, [r3, #0]
 8101aa6:	2b01      	cmp	r3, #1
 8101aa8:	dc17      	bgt.n	8101ada <HAL_UART_RxCpltCallback+0x4e>
		{
			if(data_byte[0] == UBX_HEADER[byte_pos])
 8101aaa:	4b36      	ldr	r3, [pc, #216]	; (8101b84 <HAL_UART_RxCpltCallback+0xf8>)
 8101aac:	781a      	ldrb	r2, [r3, #0]
 8101aae:	4b36      	ldr	r3, [pc, #216]	; (8101b88 <HAL_UART_RxCpltCallback+0xfc>)
 8101ab0:	881b      	ldrh	r3, [r3, #0]
 8101ab2:	813b      	strh	r3, [r7, #8]
 8101ab4:	4b32      	ldr	r3, [pc, #200]	; (8101b80 <HAL_UART_RxCpltCallback+0xf4>)
 8101ab6:	681b      	ldr	r3, [r3, #0]
 8101ab8:	f107 0110 	add.w	r1, r7, #16
 8101abc:	440b      	add	r3, r1
 8101abe:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 8101ac2:	429a      	cmp	r2, r3
 8101ac4:	d105      	bne.n	8101ad2 <HAL_UART_RxCpltCallback+0x46>
			{
				byte_pos++;
 8101ac6:	4b2e      	ldr	r3, [pc, #184]	; (8101b80 <HAL_UART_RxCpltCallback+0xf4>)
 8101ac8:	681b      	ldr	r3, [r3, #0]
 8101aca:	3301      	adds	r3, #1
 8101acc:	4a2c      	ldr	r2, [pc, #176]	; (8101b80 <HAL_UART_RxCpltCallback+0xf4>)
 8101ace:	6013      	str	r3, [r2, #0]
		    	  byte_pos = 0;
		      }
		}
	}

}
 8101ad0:	e04f      	b.n	8101b72 <HAL_UART_RxCpltCallback+0xe6>
				byte_pos = 0;
 8101ad2:	4b2b      	ldr	r3, [pc, #172]	; (8101b80 <HAL_UART_RxCpltCallback+0xf4>)
 8101ad4:	2200      	movs	r2, #0
 8101ad6:	601a      	str	r2, [r3, #0]
}
 8101ad8:	e04b      	b.n	8101b72 <HAL_UART_RxCpltCallback+0xe6>
			if( (byte_pos-2) < data_size)
 8101ada:	4b29      	ldr	r3, [pc, #164]	; (8101b80 <HAL_UART_RxCpltCallback+0xf4>)
 8101adc:	681b      	ldr	r3, [r3, #0]
 8101ade:	3b01      	subs	r3, #1
 8101ae0:	68fa      	ldr	r2, [r7, #12]
 8101ae2:	429a      	cmp	r2, r3
 8101ae4:	db07      	blt.n	8101af6 <HAL_UART_RxCpltCallback+0x6a>
				((unsigned char*)(&pvt))[byte_pos-2] = data_byte[0];
 8101ae6:	4b26      	ldr	r3, [pc, #152]	; (8101b80 <HAL_UART_RxCpltCallback+0xf4>)
 8101ae8:	681b      	ldr	r3, [r3, #0]
 8101aea:	3b02      	subs	r3, #2
 8101aec:	4a27      	ldr	r2, [pc, #156]	; (8101b8c <HAL_UART_RxCpltCallback+0x100>)
 8101aee:	4413      	add	r3, r2
 8101af0:	4a24      	ldr	r2, [pc, #144]	; (8101b84 <HAL_UART_RxCpltCallback+0xf8>)
 8101af2:	7812      	ldrb	r2, [r2, #0]
 8101af4:	701a      	strb	r2, [r3, #0]
			byte_pos++;
 8101af6:	4b22      	ldr	r3, [pc, #136]	; (8101b80 <HAL_UART_RxCpltCallback+0xf4>)
 8101af8:	681b      	ldr	r3, [r3, #0]
 8101afa:	3301      	adds	r3, #1
 8101afc:	4a20      	ldr	r2, [pc, #128]	; (8101b80 <HAL_UART_RxCpltCallback+0xf4>)
 8101afe:	6013      	str	r3, [r2, #0]
			if ( byte_pos == (data_size+2) )
 8101b00:	68fb      	ldr	r3, [r7, #12]
 8101b02:	1c9a      	adds	r2, r3, #2
 8101b04:	4b1e      	ldr	r3, [pc, #120]	; (8101b80 <HAL_UART_RxCpltCallback+0xf4>)
 8101b06:	681b      	ldr	r3, [r3, #0]
 8101b08:	429a      	cmp	r2, r3
 8101b0a:	d103      	bne.n	8101b14 <HAL_UART_RxCpltCallback+0x88>
			        calcChecksum(checksum);
 8101b0c:	4820      	ldr	r0, [pc, #128]	; (8101b90 <HAL_UART_RxCpltCallback+0x104>)
 8101b0e:	f000 fdd3 	bl	81026b8 <calcChecksum>
}
 8101b12:	e02e      	b.n	8101b72 <HAL_UART_RxCpltCallback+0xe6>
			else if ( byte_pos == (data_size+3) )
 8101b14:	68fb      	ldr	r3, [r7, #12]
 8101b16:	1cda      	adds	r2, r3, #3
 8101b18:	4b19      	ldr	r3, [pc, #100]	; (8101b80 <HAL_UART_RxCpltCallback+0xf4>)
 8101b1a:	681b      	ldr	r3, [r3, #0]
 8101b1c:	429a      	cmp	r2, r3
 8101b1e:	d109      	bne.n	8101b34 <HAL_UART_RxCpltCallback+0xa8>
				if ( data_byte[0] != checksum[0] )
 8101b20:	4b18      	ldr	r3, [pc, #96]	; (8101b84 <HAL_UART_RxCpltCallback+0xf8>)
 8101b22:	781a      	ldrb	r2, [r3, #0]
 8101b24:	4b1a      	ldr	r3, [pc, #104]	; (8101b90 <HAL_UART_RxCpltCallback+0x104>)
 8101b26:	781b      	ldrb	r3, [r3, #0]
 8101b28:	429a      	cmp	r2, r3
 8101b2a:	d022      	beq.n	8101b72 <HAL_UART_RxCpltCallback+0xe6>
					byte_pos = 0;
 8101b2c:	4b14      	ldr	r3, [pc, #80]	; (8101b80 <HAL_UART_RxCpltCallback+0xf4>)
 8101b2e:	2200      	movs	r2, #0
 8101b30:	601a      	str	r2, [r3, #0]
}
 8101b32:	e01e      	b.n	8101b72 <HAL_UART_RxCpltCallback+0xe6>
		      else if ( byte_pos == (data_size+4) ) {
 8101b34:	68fb      	ldr	r3, [r7, #12]
 8101b36:	1d1a      	adds	r2, r3, #4
 8101b38:	4b11      	ldr	r3, [pc, #68]	; (8101b80 <HAL_UART_RxCpltCallback+0xf4>)
 8101b3a:	681b      	ldr	r3, [r3, #0]
 8101b3c:	429a      	cmp	r2, r3
 8101b3e:	d10f      	bne.n	8101b60 <HAL_UART_RxCpltCallback+0xd4>
		    	  byte_pos = 0;
 8101b40:	4b0f      	ldr	r3, [pc, #60]	; (8101b80 <HAL_UART_RxCpltCallback+0xf4>)
 8101b42:	2200      	movs	r2, #0
 8101b44:	601a      	str	r2, [r3, #0]
		        if ( data_byte[0] == checksum[1] ) {
 8101b46:	4b0f      	ldr	r3, [pc, #60]	; (8101b84 <HAL_UART_RxCpltCallback+0xf8>)
 8101b48:	781a      	ldrb	r2, [r3, #0]
 8101b4a:	4b11      	ldr	r3, [pc, #68]	; (8101b90 <HAL_UART_RxCpltCallback+0x104>)
 8101b4c:	785b      	ldrb	r3, [r3, #1]
 8101b4e:	429a      	cmp	r2, r3
 8101b50:	d10f      	bne.n	8101b72 <HAL_UART_RxCpltCallback+0xe6>
		        	LEDB_ON();
 8101b52:	2201      	movs	r2, #1
 8101b54:	f44f 7180 	mov.w	r1, #256	; 0x100
 8101b58:	480e      	ldr	r0, [pc, #56]	; (8101b94 <HAL_UART_RxCpltCallback+0x108>)
 8101b5a:	f005 fc21 	bl	81073a0 <HAL_GPIO_WritePin>
}
 8101b5e:	e008      	b.n	8101b72 <HAL_UART_RxCpltCallback+0xe6>
		      else if ( byte_pos > (data_size+4) ) {
 8101b60:	68fb      	ldr	r3, [r7, #12]
 8101b62:	1d1a      	adds	r2, r3, #4
 8101b64:	4b06      	ldr	r3, [pc, #24]	; (8101b80 <HAL_UART_RxCpltCallback+0xf4>)
 8101b66:	681b      	ldr	r3, [r3, #0]
 8101b68:	429a      	cmp	r2, r3
 8101b6a:	da02      	bge.n	8101b72 <HAL_UART_RxCpltCallback+0xe6>
		    	  byte_pos = 0;
 8101b6c:	4b04      	ldr	r3, [pc, #16]	; (8101b80 <HAL_UART_RxCpltCallback+0xf4>)
 8101b6e:	2200      	movs	r2, #0
 8101b70:	601a      	str	r2, [r3, #0]
}
 8101b72:	bf00      	nop
 8101b74:	3710      	adds	r7, #16
 8101b76:	46bd      	mov	sp, r7
 8101b78:	bd80      	pop	{r7, pc}
 8101b7a:	bf00      	nop
 8101b7c:	40004800 	.word	0x40004800
 8101b80:	10000378 	.word	0x10000378
 8101b84:	10000374 	.word	0x10000374
 8101b88:	0811b98c 	.word	0x0811b98c
 8101b8c:	10005138 	.word	0x10005138
 8101b90:	1000037c 	.word	0x1000037c
 8101b94:	58021000 	.word	0x58021000

08101b98 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8101b98:	b580      	push	{r7, lr}
 8101b9a:	b082      	sub	sp, #8
 8101b9c:	af00      	add	r7, sp, #0
 8101b9e:	6078      	str	r0, [r7, #4]
   if(huart->Instance == USART3)
 8101ba0:	687b      	ldr	r3, [r7, #4]
 8101ba2:	681b      	ldr	r3, [r3, #0]
 8101ba4:	4a05      	ldr	r2, [pc, #20]	; (8101bbc <HAL_UART_TxCpltCallback+0x24>)
 8101ba6:	4293      	cmp	r3, r2
 8101ba8:	d104      	bne.n	8101bb4 <HAL_UART_TxCpltCallback+0x1c>
	 {
	   LEDA_ON();
 8101baa:	2201      	movs	r2, #1
 8101bac:	2180      	movs	r1, #128	; 0x80
 8101bae:	4804      	ldr	r0, [pc, #16]	; (8101bc0 <HAL_UART_TxCpltCallback+0x28>)
 8101bb0:	f005 fbf6 	bl	81073a0 <HAL_GPIO_WritePin>
	 }
}
 8101bb4:	bf00      	nop
 8101bb6:	3708      	adds	r7, #8
 8101bb8:	46bd      	mov	sp, r7
 8101bba:	bd80      	pop	{r7, pc}
 8101bbc:	40004800 	.word	0x40004800
 8101bc0:	58021000 	.word	0x58021000

08101bc4 <HAL_UART_ErrorCallback>:



void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8101bc4:	b480      	push	{r7}
 8101bc6:	b083      	sub	sp, #12
 8101bc8:	af00      	add	r7, sp, #0
 8101bca:	6078      	str	r0, [r7, #4]
  /* Initialization Error */


}
 8101bcc:	bf00      	nop
 8101bce:	370c      	adds	r7, #12
 8101bd0:	46bd      	mov	sp, r7
 8101bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101bd6:	4770      	bx	lr

08101bd8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8101bd8:	b580      	push	{r7, lr}
 8101bda:	b082      	sub	sp, #8
 8101bdc:	af00      	add	r7, sp, #0
 8101bde:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 8101be0:	687b      	ldr	r3, [r7, #4]
 8101be2:	681b      	ldr	r3, [r3, #0]
 8101be4:	4a04      	ldr	r2, [pc, #16]	; (8101bf8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8101be6:	4293      	cmp	r3, r2
 8101be8:	d101      	bne.n	8101bee <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8101bea:	f000 ff39 	bl	8102a60 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8101bee:	bf00      	nop
 8101bf0:	3708      	adds	r7, #8
 8101bf2:	46bd      	mov	sp, r7
 8101bf4:	bd80      	pop	{r7, pc}
 8101bf6:	bf00      	nop
 8101bf8:	40001400 	.word	0x40001400

08101bfc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8101bfc:	b480      	push	{r7}
 8101bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8101c00:	bf00      	nop
 8101c02:	46bd      	mov	sp, r7
 8101c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101c08:	4770      	bx	lr
	...

08101c0c <MX_SDMMC1_SD_Init>:
SD_HandleTypeDef hsd1;

/* SDMMC1 init function */

void MX_SDMMC1_SD_Init(void)
{
 8101c0c:	b580      	push	{r7, lr}
 8101c0e:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8101c10:	4b0f      	ldr	r3, [pc, #60]	; (8101c50 <MX_SDMMC1_SD_Init+0x44>)
 8101c12:	4a10      	ldr	r2, [pc, #64]	; (8101c54 <MX_SDMMC1_SD_Init+0x48>)
 8101c14:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8101c16:	4b0e      	ldr	r3, [pc, #56]	; (8101c50 <MX_SDMMC1_SD_Init+0x44>)
 8101c18:	2200      	movs	r2, #0
 8101c1a:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8101c1c:	4b0c      	ldr	r3, [pc, #48]	; (8101c50 <MX_SDMMC1_SD_Init+0x44>)
 8101c1e:	2200      	movs	r2, #0
 8101c20:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8101c22:	4b0b      	ldr	r3, [pc, #44]	; (8101c50 <MX_SDMMC1_SD_Init+0x44>)
 8101c24:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8101c28:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8101c2a:	4b09      	ldr	r3, [pc, #36]	; (8101c50 <MX_SDMMC1_SD_Init+0x44>)
 8101c2c:	2200      	movs	r2, #0
 8101c2e:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 4;
 8101c30:	4b07      	ldr	r3, [pc, #28]	; (8101c50 <MX_SDMMC1_SD_Init+0x44>)
 8101c32:	2204      	movs	r2, #4
 8101c34:	615a      	str	r2, [r3, #20]
  hsd1.Init.TranceiverPresent = SDMMC_TRANSCEIVER_NOT_PRESENT;
 8101c36:	4b06      	ldr	r3, [pc, #24]	; (8101c50 <MX_SDMMC1_SD_Init+0x44>)
 8101c38:	2201      	movs	r2, #1
 8101c3a:	619a      	str	r2, [r3, #24]
  if (HAL_SD_Init(&hsd1) != HAL_OK)
 8101c3c:	4804      	ldr	r0, [pc, #16]	; (8101c50 <MX_SDMMC1_SD_Init+0x44>)
 8101c3e:	f00a f9e3 	bl	810c008 <HAL_SD_Init>
 8101c42:	4603      	mov	r3, r0
 8101c44:	2b00      	cmp	r3, #0
 8101c46:	d001      	beq.n	8101c4c <MX_SDMMC1_SD_Init+0x40>
  {
    Error_Handler();
 8101c48:	f7ff ffd8 	bl	8101bfc <Error_Handler>
  }
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8101c4c:	bf00      	nop
 8101c4e:	bd80      	pop	{r7, pc}
 8101c50:	10005198 	.word	0x10005198
 8101c54:	52007000 	.word	0x52007000

08101c58 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 8101c58:	b580      	push	{r7, lr}
 8101c5a:	b0ba      	sub	sp, #232	; 0xe8
 8101c5c:	af00      	add	r7, sp, #0
 8101c5e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8101c60:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8101c64:	2200      	movs	r2, #0
 8101c66:	601a      	str	r2, [r3, #0]
 8101c68:	605a      	str	r2, [r3, #4]
 8101c6a:	609a      	str	r2, [r3, #8]
 8101c6c:	60da      	str	r2, [r3, #12]
 8101c6e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8101c70:	f107 0318 	add.w	r3, r7, #24
 8101c74:	22bc      	movs	r2, #188	; 0xbc
 8101c76:	2100      	movs	r1, #0
 8101c78:	4618      	mov	r0, r3
 8101c7a:	f017 f96b 	bl	8118f54 <memset>
  if(sdHandle->Instance==SDMMC1)
 8101c7e:	687b      	ldr	r3, [r7, #4]
 8101c80:	681b      	ldr	r3, [r3, #0]
 8101c82:	4a3b      	ldr	r2, [pc, #236]	; (8101d70 <HAL_SD_MspInit+0x118>)
 8101c84:	4293      	cmp	r3, r2
 8101c86:	d16e      	bne.n	8101d66 <HAL_SD_MspInit+0x10e>
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 8101c88:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8101c8c:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 8101c8e:	2300      	movs	r3, #0
 8101c90:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8101c92:	f107 0318 	add.w	r3, r7, #24
 8101c96:	4618      	mov	r0, r3
 8101c98:	f008 f830 	bl	8109cfc <HAL_RCCEx_PeriphCLKConfig>
 8101c9c:	4603      	mov	r3, r0
 8101c9e:	2b00      	cmp	r3, #0
 8101ca0:	d001      	beq.n	8101ca6 <HAL_SD_MspInit+0x4e>
    {
      Error_Handler();
 8101ca2:	f7ff ffab 	bl	8101bfc <Error_Handler>
    }

    /* SDMMC1 clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8101ca6:	4b33      	ldr	r3, [pc, #204]	; (8101d74 <HAL_SD_MspInit+0x11c>)
 8101ca8:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8101cac:	4a31      	ldr	r2, [pc, #196]	; (8101d74 <HAL_SD_MspInit+0x11c>)
 8101cae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8101cb2:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8101cb6:	4b2f      	ldr	r3, [pc, #188]	; (8101d74 <HAL_SD_MspInit+0x11c>)
 8101cb8:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8101cbc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8101cc0:	617b      	str	r3, [r7, #20]
 8101cc2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8101cc4:	4b2b      	ldr	r3, [pc, #172]	; (8101d74 <HAL_SD_MspInit+0x11c>)
 8101cc6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101cca:	4a2a      	ldr	r2, [pc, #168]	; (8101d74 <HAL_SD_MspInit+0x11c>)
 8101ccc:	f043 0304 	orr.w	r3, r3, #4
 8101cd0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101cd4:	4b27      	ldr	r3, [pc, #156]	; (8101d74 <HAL_SD_MspInit+0x11c>)
 8101cd6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101cda:	f003 0304 	and.w	r3, r3, #4
 8101cde:	613b      	str	r3, [r7, #16]
 8101ce0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8101ce2:	4b24      	ldr	r3, [pc, #144]	; (8101d74 <HAL_SD_MspInit+0x11c>)
 8101ce4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101ce8:	4a22      	ldr	r2, [pc, #136]	; (8101d74 <HAL_SD_MspInit+0x11c>)
 8101cea:	f043 0308 	orr.w	r3, r3, #8
 8101cee:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101cf2:	4b20      	ldr	r3, [pc, #128]	; (8101d74 <HAL_SD_MspInit+0x11c>)
 8101cf4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101cf8:	f003 0308 	and.w	r3, r3, #8
 8101cfc:	60fb      	str	r3, [r7, #12]
 8101cfe:	68fb      	ldr	r3, [r7, #12]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8101d00:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8101d04:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101d08:	2302      	movs	r3, #2
 8101d0a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101d0e:	2300      	movs	r3, #0
 8101d10:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8101d14:	2303      	movs	r3, #3
 8101d16:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8101d1a:	230c      	movs	r3, #12
 8101d1c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8101d20:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8101d24:	4619      	mov	r1, r3
 8101d26:	4814      	ldr	r0, [pc, #80]	; (8101d78 <HAL_SD_MspInit+0x120>)
 8101d28:	f005 f98a 	bl	8107040 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8101d2c:	2304      	movs	r3, #4
 8101d2e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101d32:	2302      	movs	r3, #2
 8101d34:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101d38:	2300      	movs	r3, #0
 8101d3a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8101d3e:	2303      	movs	r3, #3
 8101d40:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8101d44:	230c      	movs	r3, #12
 8101d46:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8101d4a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8101d4e:	4619      	mov	r1, r3
 8101d50:	480a      	ldr	r0, [pc, #40]	; (8101d7c <HAL_SD_MspInit+0x124>)
 8101d52:	f005 f975 	bl	8107040 <HAL_GPIO_Init>

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 5, 0);
 8101d56:	2200      	movs	r2, #0
 8101d58:	2105      	movs	r1, #5
 8101d5a:	2031      	movs	r0, #49	; 0x31
 8101d5c:	f002 fae2 	bl	8104324 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 8101d60:	2031      	movs	r0, #49	; 0x31
 8101d62:	f002 faf9 	bl	8104358 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }
}
 8101d66:	bf00      	nop
 8101d68:	37e8      	adds	r7, #232	; 0xe8
 8101d6a:	46bd      	mov	sp, r7
 8101d6c:	bd80      	pop	{r7, pc}
 8101d6e:	bf00      	nop
 8101d70:	52007000 	.word	0x52007000
 8101d74:	58024400 	.word	0x58024400
 8101d78:	58020800 	.word	0x58020800
 8101d7c:	58020c00 	.word	0x58020c00

08101d80 <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi1_rx;
DMA_HandleTypeDef hdma_spi1_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8101d80:	b580      	push	{r7, lr}
 8101d82:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8101d84:	4b27      	ldr	r3, [pc, #156]	; (8101e24 <MX_SPI1_Init+0xa4>)
 8101d86:	4a28      	ldr	r2, [pc, #160]	; (8101e28 <MX_SPI1_Init+0xa8>)
 8101d88:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8101d8a:	4b26      	ldr	r3, [pc, #152]	; (8101e24 <MX_SPI1_Init+0xa4>)
 8101d8c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8101d90:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8101d92:	4b24      	ldr	r3, [pc, #144]	; (8101e24 <MX_SPI1_Init+0xa4>)
 8101d94:	2200      	movs	r2, #0
 8101d96:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8101d98:	4b22      	ldr	r3, [pc, #136]	; (8101e24 <MX_SPI1_Init+0xa4>)
 8101d9a:	2207      	movs	r2, #7
 8101d9c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8101d9e:	4b21      	ldr	r3, [pc, #132]	; (8101e24 <MX_SPI1_Init+0xa4>)
 8101da0:	2200      	movs	r2, #0
 8101da2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8101da4:	4b1f      	ldr	r3, [pc, #124]	; (8101e24 <MX_SPI1_Init+0xa4>)
 8101da6:	2200      	movs	r2, #0
 8101da8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8101daa:	4b1e      	ldr	r3, [pc, #120]	; (8101e24 <MX_SPI1_Init+0xa4>)
 8101dac:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8101db0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8101db2:	4b1c      	ldr	r3, [pc, #112]	; (8101e24 <MX_SPI1_Init+0xa4>)
 8101db4:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 8101db8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8101dba:	4b1a      	ldr	r3, [pc, #104]	; (8101e24 <MX_SPI1_Init+0xa4>)
 8101dbc:	2200      	movs	r2, #0
 8101dbe:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8101dc0:	4b18      	ldr	r3, [pc, #96]	; (8101e24 <MX_SPI1_Init+0xa4>)
 8101dc2:	2200      	movs	r2, #0
 8101dc4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8101dc6:	4b17      	ldr	r3, [pc, #92]	; (8101e24 <MX_SPI1_Init+0xa4>)
 8101dc8:	2200      	movs	r2, #0
 8101dca:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8101dcc:	4b15      	ldr	r3, [pc, #84]	; (8101e24 <MX_SPI1_Init+0xa4>)
 8101dce:	2200      	movs	r2, #0
 8101dd0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8101dd2:	4b14      	ldr	r3, [pc, #80]	; (8101e24 <MX_SPI1_Init+0xa4>)
 8101dd4:	2200      	movs	r2, #0
 8101dd6:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8101dd8:	4b12      	ldr	r3, [pc, #72]	; (8101e24 <MX_SPI1_Init+0xa4>)
 8101dda:	2200      	movs	r2, #0
 8101ddc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8101dde:	4b11      	ldr	r3, [pc, #68]	; (8101e24 <MX_SPI1_Init+0xa4>)
 8101de0:	2200      	movs	r2, #0
 8101de2:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8101de4:	4b0f      	ldr	r3, [pc, #60]	; (8101e24 <MX_SPI1_Init+0xa4>)
 8101de6:	2200      	movs	r2, #0
 8101de8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8101dea:	4b0e      	ldr	r3, [pc, #56]	; (8101e24 <MX_SPI1_Init+0xa4>)
 8101dec:	2200      	movs	r2, #0
 8101dee:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8101df0:	4b0c      	ldr	r3, [pc, #48]	; (8101e24 <MX_SPI1_Init+0xa4>)
 8101df2:	2200      	movs	r2, #0
 8101df4:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8101df6:	4b0b      	ldr	r3, [pc, #44]	; (8101e24 <MX_SPI1_Init+0xa4>)
 8101df8:	2200      	movs	r2, #0
 8101dfa:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8101dfc:	4b09      	ldr	r3, [pc, #36]	; (8101e24 <MX_SPI1_Init+0xa4>)
 8101dfe:	2200      	movs	r2, #0
 8101e00:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8101e02:	4b08      	ldr	r3, [pc, #32]	; (8101e24 <MX_SPI1_Init+0xa4>)
 8101e04:	2200      	movs	r2, #0
 8101e06:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8101e08:	4b06      	ldr	r3, [pc, #24]	; (8101e24 <MX_SPI1_Init+0xa4>)
 8101e0a:	2200      	movs	r2, #0
 8101e0c:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8101e0e:	4805      	ldr	r0, [pc, #20]	; (8101e24 <MX_SPI1_Init+0xa4>)
 8101e10:	f00b fdd6 	bl	810d9c0 <HAL_SPI_Init>
 8101e14:	4603      	mov	r3, r0
 8101e16:	2b00      	cmp	r3, #0
 8101e18:	d001      	beq.n	8101e1e <MX_SPI1_Init+0x9e>
  {
    Error_Handler();
 8101e1a:	f7ff feef 	bl	8101bfc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8101e1e:	bf00      	nop
 8101e20:	bd80      	pop	{r7, pc}
 8101e22:	bf00      	nop
 8101e24:	10005218 	.word	0x10005218
 8101e28:	40013000 	.word	0x40013000

08101e2c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8101e2c:	b580      	push	{r7, lr}
 8101e2e:	b0b8      	sub	sp, #224	; 0xe0
 8101e30:	af00      	add	r7, sp, #0
 8101e32:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8101e34:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8101e38:	2200      	movs	r2, #0
 8101e3a:	601a      	str	r2, [r3, #0]
 8101e3c:	605a      	str	r2, [r3, #4]
 8101e3e:	609a      	str	r2, [r3, #8]
 8101e40:	60da      	str	r2, [r3, #12]
 8101e42:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8101e44:	f107 0310 	add.w	r3, r7, #16
 8101e48:	22bc      	movs	r2, #188	; 0xbc
 8101e4a:	2100      	movs	r1, #0
 8101e4c:	4618      	mov	r0, r3
 8101e4e:	f017 f881 	bl	8118f54 <memset>
  if(spiHandle->Instance==SPI1)
 8101e52:	687b      	ldr	r3, [r7, #4]
 8101e54:	681b      	ldr	r3, [r3, #0]
 8101e56:	4a57      	ldr	r2, [pc, #348]	; (8101fb4 <HAL_SPI_MspInit+0x188>)
 8101e58:	4293      	cmp	r3, r2
 8101e5a:	f040 80a7 	bne.w	8101fac <HAL_SPI_MspInit+0x180>
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8101e5e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8101e62:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8101e64:	2300      	movs	r3, #0
 8101e66:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8101e68:	f107 0310 	add.w	r3, r7, #16
 8101e6c:	4618      	mov	r0, r3
 8101e6e:	f007 ff45 	bl	8109cfc <HAL_RCCEx_PeriphCLKConfig>
 8101e72:	4603      	mov	r3, r0
 8101e74:	2b00      	cmp	r3, #0
 8101e76:	d001      	beq.n	8101e7c <HAL_SPI_MspInit+0x50>
    {
      Error_Handler();
 8101e78:	f7ff fec0 	bl	8101bfc <Error_Handler>
    }

    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8101e7c:	4b4e      	ldr	r3, [pc, #312]	; (8101fb8 <HAL_SPI_MspInit+0x18c>)
 8101e7e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8101e82:	4a4d      	ldr	r2, [pc, #308]	; (8101fb8 <HAL_SPI_MspInit+0x18c>)
 8101e84:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8101e88:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8101e8c:	4b4a      	ldr	r3, [pc, #296]	; (8101fb8 <HAL_SPI_MspInit+0x18c>)
 8101e8e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8101e92:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8101e96:	60fb      	str	r3, [r7, #12]
 8101e98:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8101e9a:	4b47      	ldr	r3, [pc, #284]	; (8101fb8 <HAL_SPI_MspInit+0x18c>)
 8101e9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101ea0:	4a45      	ldr	r2, [pc, #276]	; (8101fb8 <HAL_SPI_MspInit+0x18c>)
 8101ea2:	f043 0301 	orr.w	r3, r3, #1
 8101ea6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101eaa:	4b43      	ldr	r3, [pc, #268]	; (8101fb8 <HAL_SPI_MspInit+0x18c>)
 8101eac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101eb0:	f003 0301 	and.w	r3, r3, #1
 8101eb4:	60bb      	str	r3, [r7, #8]
 8101eb6:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8101eb8:	23e0      	movs	r3, #224	; 0xe0
 8101eba:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101ebe:	2302      	movs	r3, #2
 8101ec0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101ec4:	2300      	movs	r3, #0
 8101ec6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101eca:	2300      	movs	r3, #0
 8101ecc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8101ed0:	2305      	movs	r3, #5
 8101ed2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8101ed6:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8101eda:	4619      	mov	r1, r3
 8101edc:	4837      	ldr	r0, [pc, #220]	; (8101fbc <HAL_SPI_MspInit+0x190>)
 8101ede:	f005 f8af 	bl	8107040 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Stream0;
 8101ee2:	4b37      	ldr	r3, [pc, #220]	; (8101fc0 <HAL_SPI_MspInit+0x194>)
 8101ee4:	4a37      	ldr	r2, [pc, #220]	; (8101fc4 <HAL_SPI_MspInit+0x198>)
 8101ee6:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 8101ee8:	4b35      	ldr	r3, [pc, #212]	; (8101fc0 <HAL_SPI_MspInit+0x194>)
 8101eea:	2225      	movs	r2, #37	; 0x25
 8101eec:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8101eee:	4b34      	ldr	r3, [pc, #208]	; (8101fc0 <HAL_SPI_MspInit+0x194>)
 8101ef0:	2200      	movs	r2, #0
 8101ef2:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8101ef4:	4b32      	ldr	r3, [pc, #200]	; (8101fc0 <HAL_SPI_MspInit+0x194>)
 8101ef6:	2200      	movs	r2, #0
 8101ef8:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8101efa:	4b31      	ldr	r3, [pc, #196]	; (8101fc0 <HAL_SPI_MspInit+0x194>)
 8101efc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8101f00:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8101f02:	4b2f      	ldr	r3, [pc, #188]	; (8101fc0 <HAL_SPI_MspInit+0x194>)
 8101f04:	2200      	movs	r2, #0
 8101f06:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8101f08:	4b2d      	ldr	r3, [pc, #180]	; (8101fc0 <HAL_SPI_MspInit+0x194>)
 8101f0a:	2200      	movs	r2, #0
 8101f0c:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_CIRCULAR;
 8101f0e:	4b2c      	ldr	r3, [pc, #176]	; (8101fc0 <HAL_SPI_MspInit+0x194>)
 8101f10:	f44f 7280 	mov.w	r2, #256	; 0x100
 8101f14:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8101f16:	4b2a      	ldr	r3, [pc, #168]	; (8101fc0 <HAL_SPI_MspInit+0x194>)
 8101f18:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8101f1c:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8101f1e:	4b28      	ldr	r3, [pc, #160]	; (8101fc0 <HAL_SPI_MspInit+0x194>)
 8101f20:	2200      	movs	r2, #0
 8101f22:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8101f24:	4826      	ldr	r0, [pc, #152]	; (8101fc0 <HAL_SPI_MspInit+0x194>)
 8101f26:	f002 fa39 	bl	810439c <HAL_DMA_Init>
 8101f2a:	4603      	mov	r3, r0
 8101f2c:	2b00      	cmp	r3, #0
 8101f2e:	d001      	beq.n	8101f34 <HAL_SPI_MspInit+0x108>
    {
      Error_Handler();
 8101f30:	f7ff fe64 	bl	8101bfc <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 8101f34:	687b      	ldr	r3, [r7, #4]
 8101f36:	4a22      	ldr	r2, [pc, #136]	; (8101fc0 <HAL_SPI_MspInit+0x194>)
 8101f38:	67da      	str	r2, [r3, #124]	; 0x7c
 8101f3a:	4a21      	ldr	r2, [pc, #132]	; (8101fc0 <HAL_SPI_MspInit+0x194>)
 8101f3c:	687b      	ldr	r3, [r7, #4]
 8101f3e:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Stream1;
 8101f40:	4b21      	ldr	r3, [pc, #132]	; (8101fc8 <HAL_SPI_MspInit+0x19c>)
 8101f42:	4a22      	ldr	r2, [pc, #136]	; (8101fcc <HAL_SPI_MspInit+0x1a0>)
 8101f44:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 8101f46:	4b20      	ldr	r3, [pc, #128]	; (8101fc8 <HAL_SPI_MspInit+0x19c>)
 8101f48:	2226      	movs	r2, #38	; 0x26
 8101f4a:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8101f4c:	4b1e      	ldr	r3, [pc, #120]	; (8101fc8 <HAL_SPI_MspInit+0x19c>)
 8101f4e:	2240      	movs	r2, #64	; 0x40
 8101f50:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8101f52:	4b1d      	ldr	r3, [pc, #116]	; (8101fc8 <HAL_SPI_MspInit+0x19c>)
 8101f54:	2200      	movs	r2, #0
 8101f56:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8101f58:	4b1b      	ldr	r3, [pc, #108]	; (8101fc8 <HAL_SPI_MspInit+0x19c>)
 8101f5a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8101f5e:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8101f60:	4b19      	ldr	r3, [pc, #100]	; (8101fc8 <HAL_SPI_MspInit+0x19c>)
 8101f62:	2200      	movs	r2, #0
 8101f64:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8101f66:	4b18      	ldr	r3, [pc, #96]	; (8101fc8 <HAL_SPI_MspInit+0x19c>)
 8101f68:	2200      	movs	r2, #0
 8101f6a:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8101f6c:	4b16      	ldr	r3, [pc, #88]	; (8101fc8 <HAL_SPI_MspInit+0x19c>)
 8101f6e:	2200      	movs	r2, #0
 8101f70:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8101f72:	4b15      	ldr	r3, [pc, #84]	; (8101fc8 <HAL_SPI_MspInit+0x19c>)
 8101f74:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8101f78:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8101f7a:	4b13      	ldr	r3, [pc, #76]	; (8101fc8 <HAL_SPI_MspInit+0x19c>)
 8101f7c:	2200      	movs	r2, #0
 8101f7e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8101f80:	4811      	ldr	r0, [pc, #68]	; (8101fc8 <HAL_SPI_MspInit+0x19c>)
 8101f82:	f002 fa0b 	bl	810439c <HAL_DMA_Init>
 8101f86:	4603      	mov	r3, r0
 8101f88:	2b00      	cmp	r3, #0
 8101f8a:	d001      	beq.n	8101f90 <HAL_SPI_MspInit+0x164>
    {
      Error_Handler();
 8101f8c:	f7ff fe36 	bl	8101bfc <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 8101f90:	687b      	ldr	r3, [r7, #4]
 8101f92:	4a0d      	ldr	r2, [pc, #52]	; (8101fc8 <HAL_SPI_MspInit+0x19c>)
 8101f94:	679a      	str	r2, [r3, #120]	; 0x78
 8101f96:	4a0c      	ldr	r2, [pc, #48]	; (8101fc8 <HAL_SPI_MspInit+0x19c>)
 8101f98:	687b      	ldr	r3, [r7, #4]
 8101f9a:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 8101f9c:	2200      	movs	r2, #0
 8101f9e:	2105      	movs	r1, #5
 8101fa0:	2023      	movs	r0, #35	; 0x23
 8101fa2:	f002 f9bf 	bl	8104324 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8101fa6:	2023      	movs	r0, #35	; 0x23
 8101fa8:	f002 f9d6 	bl	8104358 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8101fac:	bf00      	nop
 8101fae:	37e0      	adds	r7, #224	; 0xe0
 8101fb0:	46bd      	mov	sp, r7
 8101fb2:	bd80      	pop	{r7, pc}
 8101fb4:	40013000 	.word	0x40013000
 8101fb8:	58024400 	.word	0x58024400
 8101fbc:	58020000 	.word	0x58020000
 8101fc0:	100052a0 	.word	0x100052a0
 8101fc4:	40020010 	.word	0x40020010
 8101fc8:	10005318 	.word	0x10005318
 8101fcc:	40020028 	.word	0x40020028

08101fd0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8101fd0:	b580      	push	{r7, lr}
 8101fd2:	b082      	sub	sp, #8
 8101fd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8101fd6:	4b14      	ldr	r3, [pc, #80]	; (8102028 <HAL_MspInit+0x58>)
 8101fd8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8101fdc:	4a12      	ldr	r2, [pc, #72]	; (8102028 <HAL_MspInit+0x58>)
 8101fde:	f043 0302 	orr.w	r3, r3, #2
 8101fe2:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8101fe6:	4b10      	ldr	r3, [pc, #64]	; (8102028 <HAL_MspInit+0x58>)
 8101fe8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8101fec:	f003 0302 	and.w	r3, r3, #2
 8101ff0:	607b      	str	r3, [r7, #4]
 8101ff2:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8101ff4:	2200      	movs	r2, #0
 8101ff6:	210f      	movs	r1, #15
 8101ff8:	f06f 0001 	mvn.w	r0, #1
 8101ffc:	f002 f992 	bl	8104324 <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* CM7_SEV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(CM7_SEV_IRQn, 5, 0);
 8102000:	2200      	movs	r2, #0
 8102002:	2105      	movs	r1, #5
 8102004:	2040      	movs	r0, #64	; 0x40
 8102006:	f002 f98d 	bl	8104324 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CM7_SEV_IRQn);
 810200a:	2040      	movs	r0, #64	; 0x40
 810200c:	f002 f9a4 	bl	8104358 <HAL_NVIC_EnableIRQ>
  /* HSEM2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM2_IRQn, 5, 0);
 8102010:	2200      	movs	r2, #0
 8102012:	2105      	movs	r1, #5
 8102014:	207e      	movs	r0, #126	; 0x7e
 8102016:	f002 f985 	bl	8104324 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM2_IRQn);
 810201a:	207e      	movs	r0, #126	; 0x7e
 810201c:	f002 f99c 	bl	8104358 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8102020:	bf00      	nop
 8102022:	3708      	adds	r7, #8
 8102024:	46bd      	mov	sp, r7
 8102026:	bd80      	pop	{r7, pc}
 8102028:	58024400 	.word	0x58024400

0810202c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 810202c:	b580      	push	{r7, lr}
 810202e:	b090      	sub	sp, #64	; 0x40
 8102030:	af00      	add	r7, sp, #0
 8102032:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM7 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8102034:	687b      	ldr	r3, [r7, #4]
 8102036:	2b0f      	cmp	r3, #15
 8102038:	d827      	bhi.n	810208a <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority ,0U);
 810203a:	2200      	movs	r2, #0
 810203c:	6879      	ldr	r1, [r7, #4]
 810203e:	2037      	movs	r0, #55	; 0x37
 8102040:	f002 f970 	bl	8104324 <HAL_NVIC_SetPriority>

  /* Enable the TIM7 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8102044:	2037      	movs	r0, #55	; 0x37
 8102046:	f002 f987 	bl	8104358 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 810204a:	4a29      	ldr	r2, [pc, #164]	; (81020f0 <HAL_InitTick+0xc4>)
 810204c:	687b      	ldr	r3, [r7, #4]
 810204e:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8102050:	4b28      	ldr	r3, [pc, #160]	; (81020f4 <HAL_InitTick+0xc8>)
 8102052:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8102056:	4a27      	ldr	r2, [pc, #156]	; (81020f4 <HAL_InitTick+0xc8>)
 8102058:	f043 0320 	orr.w	r3, r3, #32
 810205c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8102060:	4b24      	ldr	r3, [pc, #144]	; (81020f4 <HAL_InitTick+0xc8>)
 8102062:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8102066:	f003 0320 	and.w	r3, r3, #32
 810206a:	60fb      	str	r3, [r7, #12]
 810206c:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 810206e:	f107 0210 	add.w	r2, r7, #16
 8102072:	f107 0314 	add.w	r3, r7, #20
 8102076:	4611      	mov	r1, r2
 8102078:	4618      	mov	r0, r3
 810207a:	f007 fdfd 	bl	8109c78 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 810207e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8102080:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM7 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8102082:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8102084:	2b00      	cmp	r3, #0
 8102086:	d106      	bne.n	8102096 <HAL_InitTick+0x6a>
 8102088:	e001      	b.n	810208e <HAL_InitTick+0x62>
    return HAL_ERROR;
 810208a:	2301      	movs	r3, #1
 810208c:	e02b      	b.n	81020e6 <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 810208e:	f007 fdc7 	bl	8109c20 <HAL_RCC_GetPCLK1Freq>
 8102092:	63f8      	str	r0, [r7, #60]	; 0x3c
 8102094:	e004      	b.n	81020a0 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8102096:	f007 fdc3 	bl	8109c20 <HAL_RCC_GetPCLK1Freq>
 810209a:	4603      	mov	r3, r0
 810209c:	005b      	lsls	r3, r3, #1
 810209e:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 81020a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 81020a2:	4a15      	ldr	r2, [pc, #84]	; (81020f8 <HAL_InitTick+0xcc>)
 81020a4:	fba2 2303 	umull	r2, r3, r2, r3
 81020a8:	0c9b      	lsrs	r3, r3, #18
 81020aa:	3b01      	subs	r3, #1
 81020ac:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 81020ae:	4b13      	ldr	r3, [pc, #76]	; (81020fc <HAL_InitTick+0xd0>)
 81020b0:	4a13      	ldr	r2, [pc, #76]	; (8102100 <HAL_InitTick+0xd4>)
 81020b2:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 81020b4:	4b11      	ldr	r3, [pc, #68]	; (81020fc <HAL_InitTick+0xd0>)
 81020b6:	f240 32e7 	movw	r2, #999	; 0x3e7
 81020ba:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 81020bc:	4a0f      	ldr	r2, [pc, #60]	; (81020fc <HAL_InitTick+0xd0>)
 81020be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 81020c0:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 81020c2:	4b0e      	ldr	r3, [pc, #56]	; (81020fc <HAL_InitTick+0xd0>)
 81020c4:	2200      	movs	r2, #0
 81020c6:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 81020c8:	4b0c      	ldr	r3, [pc, #48]	; (81020fc <HAL_InitTick+0xd0>)
 81020ca:	2200      	movs	r2, #0
 81020cc:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim7) == HAL_OK)
 81020ce:	480b      	ldr	r0, [pc, #44]	; (81020fc <HAL_InitTick+0xd0>)
 81020d0:	f00c fab0 	bl	810e634 <HAL_TIM_Base_Init>
 81020d4:	4603      	mov	r3, r0
 81020d6:	2b00      	cmp	r3, #0
 81020d8:	d104      	bne.n	81020e4 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim7);
 81020da:	4808      	ldr	r0, [pc, #32]	; (81020fc <HAL_InitTick+0xd0>)
 81020dc:	f00c fb02 	bl	810e6e4 <HAL_TIM_Base_Start_IT>
 81020e0:	4603      	mov	r3, r0
 81020e2:	e000      	b.n	81020e6 <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 81020e4:	2301      	movs	r3, #1
}
 81020e6:	4618      	mov	r0, r3
 81020e8:	3740      	adds	r7, #64	; 0x40
 81020ea:	46bd      	mov	sp, r7
 81020ec:	bd80      	pop	{r7, pc}
 81020ee:	bf00      	nop
 81020f0:	10000008 	.word	0x10000008
 81020f4:	58024400 	.word	0x58024400
 81020f8:	431bde83 	.word	0x431bde83
 81020fc:	10005390 	.word	0x10005390
 8102100:	40001400 	.word	0x40001400

08102104 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8102104:	b480      	push	{r7}
 8102106:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8102108:	bf00      	nop
 810210a:	46bd      	mov	sp, r7
 810210c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102110:	4770      	bx	lr

08102112 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8102112:	b480      	push	{r7}
 8102114:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8102116:	e7fe      	b.n	8102116 <HardFault_Handler+0x4>

08102118 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8102118:	b480      	push	{r7}
 810211a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 810211c:	e7fe      	b.n	810211c <MemManage_Handler+0x4>

0810211e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 810211e:	b480      	push	{r7}
 8102120:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8102122:	e7fe      	b.n	8102122 <BusFault_Handler+0x4>

08102124 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8102124:	b480      	push	{r7}
 8102126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8102128:	e7fe      	b.n	8102128 <UsageFault_Handler+0x4>

0810212a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 810212a:	b480      	push	{r7}
 810212c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 810212e:	bf00      	nop
 8102130:	46bd      	mov	sp, r7
 8102132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102136:	4770      	bx	lr

08102138 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8102138:	b580      	push	{r7, lr}
 810213a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 810213c:	4802      	ldr	r0, [pc, #8]	; (8102148 <DMA1_Stream0_IRQHandler+0x10>)
 810213e:	f003 fc53 	bl	81059e8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8102142:	bf00      	nop
 8102144:	bd80      	pop	{r7, pc}
 8102146:	bf00      	nop
 8102148:	100052a0 	.word	0x100052a0

0810214c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 810214c:	b580      	push	{r7, lr}
 810214e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8102150:	4802      	ldr	r0, [pc, #8]	; (810215c <DMA1_Stream1_IRQHandler+0x10>)
 8102152:	f003 fc49 	bl	81059e8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8102156:	bf00      	nop
 8102158:	bd80      	pop	{r7, pc}
 810215a:	bf00      	nop
 810215c:	10005318 	.word	0x10005318

08102160 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8102160:	b580      	push	{r7, lr}
 8102162:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8102164:	4802      	ldr	r0, [pc, #8]	; (8102170 <DMA1_Stream4_IRQHandler+0x10>)
 8102166:	f003 fc3f 	bl	81059e8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 810216a:	bf00      	nop
 810216c:	bd80      	pop	{r7, pc}
 810216e:	bf00      	nop
 8102170:	10004f34 	.word	0x10004f34

08102174 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8102174:	b580      	push	{r7, lr}
 8102176:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8102178:	4802      	ldr	r0, [pc, #8]	; (8102184 <DMA1_Stream5_IRQHandler+0x10>)
 810217a:	f003 fc35 	bl	81059e8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 810217e:	bf00      	nop
 8102180:	bd80      	pop	{r7, pc}
 8102182:	bf00      	nop
 8102184:	100050c0 	.word	0x100050c0

08102188 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8102188:	b580      	push	{r7, lr}
 810218a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 810218c:	4802      	ldr	r0, [pc, #8]	; (8102198 <DMA1_Stream6_IRQHandler+0x10>)
 810218e:	f003 fc2b 	bl	81059e8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8102192:	bf00      	nop
 8102194:	bd80      	pop	{r7, pc}
 8102196:	bf00      	nop
 8102198:	10004fb0 	.word	0x10004fb0

0810219c <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC_IRQHandler(void)
{
 810219c:	b580      	push	{r7, lr}
 810219e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 81021a0:	4802      	ldr	r0, [pc, #8]	; (81021ac <ADC_IRQHandler+0x10>)
 81021a2:	f001 f81b 	bl	81031dc <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 81021a6:	bf00      	nop
 81021a8:	bd80      	pop	{r7, pc}
 81021aa:	bf00      	nop
 81021ac:	10004ed0 	.word	0x10004ed0

081021b0 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 81021b0:	b580      	push	{r7, lr}
 81021b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 81021b4:	4802      	ldr	r0, [pc, #8]	; (81021c0 <I2C1_EV_IRQHandler+0x10>)
 81021b6:	f005 f9f6 	bl	81075a6 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 81021ba:	bf00      	nop
 81021bc:	bd80      	pop	{r7, pc}
 81021be:	bf00      	nop
 81021c0:	10005028 	.word	0x10005028

081021c4 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 81021c4:	b580      	push	{r7, lr}
 81021c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 81021c8:	4802      	ldr	r0, [pc, #8]	; (81021d4 <I2C1_ER_IRQHandler+0x10>)
 81021ca:	f005 fa06 	bl	81075da <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 81021ce:	bf00      	nop
 81021d0:	bd80      	pop	{r7, pc}
 81021d2:	bf00      	nop
 81021d4:	10005028 	.word	0x10005028

081021d8 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 81021d8:	b580      	push	{r7, lr}
 81021da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 81021dc:	4802      	ldr	r0, [pc, #8]	; (81021e8 <SPI1_IRQHandler+0x10>)
 81021de:	f00b febd 	bl	810df5c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 81021e2:	bf00      	nop
 81021e4:	bd80      	pop	{r7, pc}
 81021e6:	bf00      	nop
 81021e8:	10005218 	.word	0x10005218

081021ec <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 81021ec:	b580      	push	{r7, lr}
 81021ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 81021f0:	4802      	ldr	r0, [pc, #8]	; (81021fc <USART3_IRQHandler+0x10>)
 81021f2:	f00d fcd1 	bl	810fb98 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 81021f6:	bf00      	nop
 81021f8:	bd80      	pop	{r7, pc}
 81021fa:	bf00      	nop
 81021fc:	100054a0 	.word	0x100054a0

08102200 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8102200:	b580      	push	{r7, lr}
 8102202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8102204:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8102208:	f005 f8e3 	bl	81073d2 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 810220c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8102210:	f005 f8df 	bl	81073d2 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8102214:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8102218:	f005 f8db 	bl	81073d2 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 810221c:	bf00      	nop
 810221e:	bd80      	pop	{r7, pc}

08102220 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 8102220:	b580      	push	{r7, lr}
 8102222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8102224:	4802      	ldr	r0, [pc, #8]	; (8102230 <DMA1_Stream7_IRQHandler+0x10>)
 8102226:	f003 fbdf 	bl	81059e8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 810222a:	bf00      	nop
 810222c:	bd80      	pop	{r7, pc}
 810222e:	bf00      	nop
 8102230:	10005428 	.word	0x10005428

08102234 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 8102234:	b580      	push	{r7, lr}
 8102236:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 8102238:	4802      	ldr	r0, [pc, #8]	; (8102244 <SDMMC1_IRQHandler+0x10>)
 810223a:	f00a f961 	bl	810c500 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 810223e:	bf00      	nop
 8102240:	bd80      	pop	{r7, pc}
 8102242:	bf00      	nop
 8102244:	10005198 	.word	0x10005198

08102248 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8102248:	b580      	push	{r7, lr}
 810224a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 810224c:	4802      	ldr	r0, [pc, #8]	; (8102258 <TIM7_IRQHandler+0x10>)
 810224e:	f00c fb1a 	bl	810e886 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8102252:	bf00      	nop
 8102254:	bd80      	pop	{r7, pc}
 8102256:	bf00      	nop
 8102258:	10005390 	.word	0x10005390

0810225c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 810225c:	b580      	push	{r7, lr}
 810225e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8102260:	4802      	ldr	r0, [pc, #8]	; (810226c <DMA2_Stream0_IRQHandler+0x10>)
 8102262:	f003 fbc1 	bl	81059e8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8102266:	bf00      	nop
 8102268:	bd80      	pop	{r7, pc}
 810226a:	bf00      	nop
 810226c:	10005530 	.word	0x10005530

08102270 <CM7_SEV_IRQHandler>:

/**
  * @brief This function handles CM7 send event interrupt for CM4.
  */
void CM7_SEV_IRQHandler(void)
{
 8102270:	b480      	push	{r7}
 8102272:	af00      	add	r7, sp, #0

  /* USER CODE END CM7_SEV_IRQn 0 */
  /* USER CODE BEGIN CM7_SEV_IRQn 1 */

  /* USER CODE END CM7_SEV_IRQn 1 */
}
 8102274:	bf00      	nop
 8102276:	46bd      	mov	sp, r7
 8102278:	f85d 7b04 	ldr.w	r7, [sp], #4
 810227c:	4770      	bx	lr
	...

08102280 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8102280:	b580      	push	{r7, lr}
 8102282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8102284:	4802      	ldr	r0, [pc, #8]	; (8102290 <OTG_FS_IRQHandler+0x10>)
 8102286:	f006 fa02 	bl	810868e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 810228a:	bf00      	nop
 810228c:	bd80      	pop	{r7, pc}
 810228e:	bf00      	nop
 8102290:	10008b2c 	.word	0x10008b2c

08102294 <HSEM2_IRQHandler>:

/**
  * @brief This function handles HSEM2 global interrupt.
  */
void HSEM2_IRQHandler(void)
{
 8102294:	b580      	push	{r7, lr}
 8102296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM2_IRQn 0 */

  /* USER CODE END HSEM2_IRQn 0 */
  HAL_HSEM_IRQHandler();
 8102298:	f005 f8d2 	bl	8107440 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM2_IRQn 1 */

  /* USER CODE END HSEM2_IRQn 1 */
}
 810229c:	bf00      	nop
 810229e:	bd80      	pop	{r7, pc}

081022a0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 81022a0:	b480      	push	{r7}
 81022a2:	af00      	add	r7, sp, #0
	return 1;
 81022a4:	2301      	movs	r3, #1
}
 81022a6:	4618      	mov	r0, r3
 81022a8:	46bd      	mov	sp, r7
 81022aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 81022ae:	4770      	bx	lr

081022b0 <_kill>:

int _kill(int pid, int sig)
{
 81022b0:	b580      	push	{r7, lr}
 81022b2:	b082      	sub	sp, #8
 81022b4:	af00      	add	r7, sp, #0
 81022b6:	6078      	str	r0, [r7, #4]
 81022b8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 81022ba:	f016 fe13 	bl	8118ee4 <__errno>
 81022be:	4603      	mov	r3, r0
 81022c0:	2216      	movs	r2, #22
 81022c2:	601a      	str	r2, [r3, #0]
	return -1;
 81022c4:	f04f 33ff 	mov.w	r3, #4294967295
}
 81022c8:	4618      	mov	r0, r3
 81022ca:	3708      	adds	r7, #8
 81022cc:	46bd      	mov	sp, r7
 81022ce:	bd80      	pop	{r7, pc}

081022d0 <_exit>:

void _exit (int status)
{
 81022d0:	b580      	push	{r7, lr}
 81022d2:	b082      	sub	sp, #8
 81022d4:	af00      	add	r7, sp, #0
 81022d6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 81022d8:	f04f 31ff 	mov.w	r1, #4294967295
 81022dc:	6878      	ldr	r0, [r7, #4]
 81022de:	f7ff ffe7 	bl	81022b0 <_kill>
	while (1) {}		/* Make sure we hang here */
 81022e2:	e7fe      	b.n	81022e2 <_exit+0x12>

081022e4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 81022e4:	b580      	push	{r7, lr}
 81022e6:	b086      	sub	sp, #24
 81022e8:	af00      	add	r7, sp, #0
 81022ea:	60f8      	str	r0, [r7, #12]
 81022ec:	60b9      	str	r1, [r7, #8]
 81022ee:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 81022f0:	2300      	movs	r3, #0
 81022f2:	617b      	str	r3, [r7, #20]
 81022f4:	e00a      	b.n	810230c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 81022f6:	f3af 8000 	nop.w
 81022fa:	4601      	mov	r1, r0
 81022fc:	68bb      	ldr	r3, [r7, #8]
 81022fe:	1c5a      	adds	r2, r3, #1
 8102300:	60ba      	str	r2, [r7, #8]
 8102302:	b2ca      	uxtb	r2, r1
 8102304:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8102306:	697b      	ldr	r3, [r7, #20]
 8102308:	3301      	adds	r3, #1
 810230a:	617b      	str	r3, [r7, #20]
 810230c:	697a      	ldr	r2, [r7, #20]
 810230e:	687b      	ldr	r3, [r7, #4]
 8102310:	429a      	cmp	r2, r3
 8102312:	dbf0      	blt.n	81022f6 <_read+0x12>
	}

return len;
 8102314:	687b      	ldr	r3, [r7, #4]
}
 8102316:	4618      	mov	r0, r3
 8102318:	3718      	adds	r7, #24
 810231a:	46bd      	mov	sp, r7
 810231c:	bd80      	pop	{r7, pc}

0810231e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 810231e:	b580      	push	{r7, lr}
 8102320:	b086      	sub	sp, #24
 8102322:	af00      	add	r7, sp, #0
 8102324:	60f8      	str	r0, [r7, #12]
 8102326:	60b9      	str	r1, [r7, #8]
 8102328:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 810232a:	2300      	movs	r3, #0
 810232c:	617b      	str	r3, [r7, #20]
 810232e:	e009      	b.n	8102344 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8102330:	68bb      	ldr	r3, [r7, #8]
 8102332:	1c5a      	adds	r2, r3, #1
 8102334:	60ba      	str	r2, [r7, #8]
 8102336:	781b      	ldrb	r3, [r3, #0]
 8102338:	4618      	mov	r0, r3
 810233a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 810233e:	697b      	ldr	r3, [r7, #20]
 8102340:	3301      	adds	r3, #1
 8102342:	617b      	str	r3, [r7, #20]
 8102344:	697a      	ldr	r2, [r7, #20]
 8102346:	687b      	ldr	r3, [r7, #4]
 8102348:	429a      	cmp	r2, r3
 810234a:	dbf1      	blt.n	8102330 <_write+0x12>
	}
	return len;
 810234c:	687b      	ldr	r3, [r7, #4]
}
 810234e:	4618      	mov	r0, r3
 8102350:	3718      	adds	r7, #24
 8102352:	46bd      	mov	sp, r7
 8102354:	bd80      	pop	{r7, pc}

08102356 <_close>:

int _close(int file)
{
 8102356:	b480      	push	{r7}
 8102358:	b083      	sub	sp, #12
 810235a:	af00      	add	r7, sp, #0
 810235c:	6078      	str	r0, [r7, #4]
	return -1;
 810235e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8102362:	4618      	mov	r0, r3
 8102364:	370c      	adds	r7, #12
 8102366:	46bd      	mov	sp, r7
 8102368:	f85d 7b04 	ldr.w	r7, [sp], #4
 810236c:	4770      	bx	lr

0810236e <_fstat>:


int _fstat(int file, struct stat *st)
{
 810236e:	b480      	push	{r7}
 8102370:	b083      	sub	sp, #12
 8102372:	af00      	add	r7, sp, #0
 8102374:	6078      	str	r0, [r7, #4]
 8102376:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8102378:	683b      	ldr	r3, [r7, #0]
 810237a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 810237e:	605a      	str	r2, [r3, #4]
	return 0;
 8102380:	2300      	movs	r3, #0
}
 8102382:	4618      	mov	r0, r3
 8102384:	370c      	adds	r7, #12
 8102386:	46bd      	mov	sp, r7
 8102388:	f85d 7b04 	ldr.w	r7, [sp], #4
 810238c:	4770      	bx	lr

0810238e <_isatty>:

int _isatty(int file)
{
 810238e:	b480      	push	{r7}
 8102390:	b083      	sub	sp, #12
 8102392:	af00      	add	r7, sp, #0
 8102394:	6078      	str	r0, [r7, #4]
	return 1;
 8102396:	2301      	movs	r3, #1
}
 8102398:	4618      	mov	r0, r3
 810239a:	370c      	adds	r7, #12
 810239c:	46bd      	mov	sp, r7
 810239e:	f85d 7b04 	ldr.w	r7, [sp], #4
 81023a2:	4770      	bx	lr

081023a4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 81023a4:	b480      	push	{r7}
 81023a6:	b085      	sub	sp, #20
 81023a8:	af00      	add	r7, sp, #0
 81023aa:	60f8      	str	r0, [r7, #12]
 81023ac:	60b9      	str	r1, [r7, #8]
 81023ae:	607a      	str	r2, [r7, #4]
	return 0;
 81023b0:	2300      	movs	r3, #0
}
 81023b2:	4618      	mov	r0, r3
 81023b4:	3714      	adds	r7, #20
 81023b6:	46bd      	mov	sp, r7
 81023b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81023bc:	4770      	bx	lr
	...

081023c0 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 81023c0:	b580      	push	{r7, lr}
 81023c2:	b084      	sub	sp, #16
 81023c4:	af00      	add	r7, sp, #0
 81023c6:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 81023c8:	4b11      	ldr	r3, [pc, #68]	; (8102410 <_sbrk+0x50>)
 81023ca:	681b      	ldr	r3, [r3, #0]
 81023cc:	2b00      	cmp	r3, #0
 81023ce:	d102      	bne.n	81023d6 <_sbrk+0x16>
		heap_end = &end;
 81023d0:	4b0f      	ldr	r3, [pc, #60]	; (8102410 <_sbrk+0x50>)
 81023d2:	4a10      	ldr	r2, [pc, #64]	; (8102414 <_sbrk+0x54>)
 81023d4:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 81023d6:	4b0e      	ldr	r3, [pc, #56]	; (8102410 <_sbrk+0x50>)
 81023d8:	681b      	ldr	r3, [r3, #0]
 81023da:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 81023dc:	4b0c      	ldr	r3, [pc, #48]	; (8102410 <_sbrk+0x50>)
 81023de:	681a      	ldr	r2, [r3, #0]
 81023e0:	687b      	ldr	r3, [r7, #4]
 81023e2:	4413      	add	r3, r2
 81023e4:	466a      	mov	r2, sp
 81023e6:	4293      	cmp	r3, r2
 81023e8:	d907      	bls.n	81023fa <_sbrk+0x3a>
	{
		errno = ENOMEM;
 81023ea:	f016 fd7b 	bl	8118ee4 <__errno>
 81023ee:	4603      	mov	r3, r0
 81023f0:	220c      	movs	r2, #12
 81023f2:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 81023f4:	f04f 33ff 	mov.w	r3, #4294967295
 81023f8:	e006      	b.n	8102408 <_sbrk+0x48>
	}

	heap_end += incr;
 81023fa:	4b05      	ldr	r3, [pc, #20]	; (8102410 <_sbrk+0x50>)
 81023fc:	681a      	ldr	r2, [r3, #0]
 81023fe:	687b      	ldr	r3, [r7, #4]
 8102400:	4413      	add	r3, r2
 8102402:	4a03      	ldr	r2, [pc, #12]	; (8102410 <_sbrk+0x50>)
 8102404:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8102406:	68fb      	ldr	r3, [r7, #12]
}
 8102408:	4618      	mov	r0, r3
 810240a:	3710      	adds	r7, #16
 810240c:	46bd      	mov	sp, r7
 810240e:	bd80      	pop	{r7, pc}
 8102410:	10000380 	.word	0x10000380
 8102414:	10008f48 	.word	0x10008f48

08102418 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8102418:	b580      	push	{r7, lr}
 810241a:	b09a      	sub	sp, #104	; 0x68
 810241c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 810241e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8102422:	2200      	movs	r2, #0
 8102424:	601a      	str	r2, [r3, #0]
 8102426:	605a      	str	r2, [r3, #4]
 8102428:	609a      	str	r2, [r3, #8]
 810242a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 810242c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8102430:	2200      	movs	r2, #0
 8102432:	601a      	str	r2, [r3, #0]
 8102434:	605a      	str	r2, [r3, #4]
 8102436:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8102438:	f107 0330 	add.w	r3, r7, #48	; 0x30
 810243c:	2200      	movs	r2, #0
 810243e:	601a      	str	r2, [r3, #0]
 8102440:	605a      	str	r2, [r3, #4]
 8102442:	609a      	str	r2, [r3, #8]
 8102444:	60da      	str	r2, [r3, #12]
 8102446:	611a      	str	r2, [r3, #16]
 8102448:	615a      	str	r2, [r3, #20]
 810244a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 810244c:	1d3b      	adds	r3, r7, #4
 810244e:	222c      	movs	r2, #44	; 0x2c
 8102450:	2100      	movs	r1, #0
 8102452:	4618      	mov	r0, r3
 8102454:	f016 fd7e 	bl	8118f54 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8102458:	4b55      	ldr	r3, [pc, #340]	; (81025b0 <MX_TIM1_Init+0x198>)
 810245a:	4a56      	ldr	r2, [pc, #344]	; (81025b4 <MX_TIM1_Init+0x19c>)
 810245c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 54;
 810245e:	4b54      	ldr	r3, [pc, #336]	; (81025b0 <MX_TIM1_Init+0x198>)
 8102460:	2236      	movs	r2, #54	; 0x36
 8102462:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8102464:	4b52      	ldr	r3, [pc, #328]	; (81025b0 <MX_TIM1_Init+0x198>)
 8102466:	2200      	movs	r2, #0
 8102468:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 11000;
 810246a:	4b51      	ldr	r3, [pc, #324]	; (81025b0 <MX_TIM1_Init+0x198>)
 810246c:	f642 22f8 	movw	r2, #11000	; 0x2af8
 8102470:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8102472:	4b4f      	ldr	r3, [pc, #316]	; (81025b0 <MX_TIM1_Init+0x198>)
 8102474:	2200      	movs	r2, #0
 8102476:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8102478:	4b4d      	ldr	r3, [pc, #308]	; (81025b0 <MX_TIM1_Init+0x198>)
 810247a:	2200      	movs	r2, #0
 810247c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 810247e:	4b4c      	ldr	r3, [pc, #304]	; (81025b0 <MX_TIM1_Init+0x198>)
 8102480:	2200      	movs	r2, #0
 8102482:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8102484:	484a      	ldr	r0, [pc, #296]	; (81025b0 <MX_TIM1_Init+0x198>)
 8102486:	f00c f8d5 	bl	810e634 <HAL_TIM_Base_Init>
 810248a:	4603      	mov	r3, r0
 810248c:	2b00      	cmp	r3, #0
 810248e:	d001      	beq.n	8102494 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8102490:	f7ff fbb4 	bl	8101bfc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8102494:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8102498:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 810249a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 810249e:	4619      	mov	r1, r3
 81024a0:	4843      	ldr	r0, [pc, #268]	; (81025b0 <MX_TIM1_Init+0x198>)
 81024a2:	f00c fc1f 	bl	810ece4 <HAL_TIM_ConfigClockSource>
 81024a6:	4603      	mov	r3, r0
 81024a8:	2b00      	cmp	r3, #0
 81024aa:	d001      	beq.n	81024b0 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 81024ac:	f7ff fba6 	bl	8101bfc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 81024b0:	483f      	ldr	r0, [pc, #252]	; (81025b0 <MX_TIM1_Init+0x198>)
 81024b2:	f00c f987 	bl	810e7c4 <HAL_TIM_PWM_Init>
 81024b6:	4603      	mov	r3, r0
 81024b8:	2b00      	cmp	r3, #0
 81024ba:	d001      	beq.n	81024c0 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 81024bc:	f7ff fb9e 	bl	8101bfc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 81024c0:	2300      	movs	r3, #0
 81024c2:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 81024c4:	2300      	movs	r3, #0
 81024c6:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 81024c8:	2300      	movs	r3, #0
 81024ca:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 81024cc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 81024d0:	4619      	mov	r1, r3
 81024d2:	4837      	ldr	r0, [pc, #220]	; (81025b0 <MX_TIM1_Init+0x198>)
 81024d4:	f00d f926 	bl	810f724 <HAL_TIMEx_MasterConfigSynchronization>
 81024d8:	4603      	mov	r3, r0
 81024da:	2b00      	cmp	r3, #0
 81024dc:	d001      	beq.n	81024e2 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 81024de:	f7ff fb8d 	bl	8101bfc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 81024e2:	2360      	movs	r3, #96	; 0x60
 81024e4:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 50;
 81024e6:	2332      	movs	r3, #50	; 0x32
 81024e8:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 81024ea:	2300      	movs	r3, #0
 81024ec:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 81024ee:	2300      	movs	r3, #0
 81024f0:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 81024f2:	2300      	movs	r3, #0
 81024f4:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 81024f6:	2300      	movs	r3, #0
 81024f8:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 81024fa:	2300      	movs	r3, #0
 81024fc:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 81024fe:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8102502:	2200      	movs	r2, #0
 8102504:	4619      	mov	r1, r3
 8102506:	482a      	ldr	r0, [pc, #168]	; (81025b0 <MX_TIM1_Init+0x198>)
 8102508:	f00c fadc 	bl	810eac4 <HAL_TIM_PWM_ConfigChannel>
 810250c:	4603      	mov	r3, r0
 810250e:	2b00      	cmp	r3, #0
 8102510:	d001      	beq.n	8102516 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8102512:	f7ff fb73 	bl	8101bfc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8102516:	f107 0330 	add.w	r3, r7, #48	; 0x30
 810251a:	2204      	movs	r2, #4
 810251c:	4619      	mov	r1, r3
 810251e:	4824      	ldr	r0, [pc, #144]	; (81025b0 <MX_TIM1_Init+0x198>)
 8102520:	f00c fad0 	bl	810eac4 <HAL_TIM_PWM_ConfigChannel>
 8102524:	4603      	mov	r3, r0
 8102526:	2b00      	cmp	r3, #0
 8102528:	d001      	beq.n	810252e <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 810252a:	f7ff fb67 	bl	8101bfc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 810252e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8102532:	2208      	movs	r2, #8
 8102534:	4619      	mov	r1, r3
 8102536:	481e      	ldr	r0, [pc, #120]	; (81025b0 <MX_TIM1_Init+0x198>)
 8102538:	f00c fac4 	bl	810eac4 <HAL_TIM_PWM_ConfigChannel>
 810253c:	4603      	mov	r3, r0
 810253e:	2b00      	cmp	r3, #0
 8102540:	d001      	beq.n	8102546 <MX_TIM1_Init+0x12e>
  {
    Error_Handler();
 8102542:	f7ff fb5b 	bl	8101bfc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8102546:	f107 0330 	add.w	r3, r7, #48	; 0x30
 810254a:	220c      	movs	r2, #12
 810254c:	4619      	mov	r1, r3
 810254e:	4818      	ldr	r0, [pc, #96]	; (81025b0 <MX_TIM1_Init+0x198>)
 8102550:	f00c fab8 	bl	810eac4 <HAL_TIM_PWM_ConfigChannel>
 8102554:	4603      	mov	r3, r0
 8102556:	2b00      	cmp	r3, #0
 8102558:	d001      	beq.n	810255e <MX_TIM1_Init+0x146>
  {
    Error_Handler();
 810255a:	f7ff fb4f 	bl	8101bfc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 810255e:	2300      	movs	r3, #0
 8102560:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8102562:	2300      	movs	r3, #0
 8102564:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8102566:	2300      	movs	r3, #0
 8102568:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 810256a:	2300      	movs	r3, #0
 810256c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 810256e:	2300      	movs	r3, #0
 8102570:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8102572:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8102576:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8102578:	2300      	movs	r3, #0
 810257a:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 810257c:	2300      	movs	r3, #0
 810257e:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8102580:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8102584:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8102586:	2300      	movs	r3, #0
 8102588:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 810258a:	2300      	movs	r3, #0
 810258c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 810258e:	1d3b      	adds	r3, r7, #4
 8102590:	4619      	mov	r1, r3
 8102592:	4807      	ldr	r0, [pc, #28]	; (81025b0 <MX_TIM1_Init+0x198>)
 8102594:	f00d f94e 	bl	810f834 <HAL_TIMEx_ConfigBreakDeadTime>
 8102598:	4603      	mov	r3, r0
 810259a:	2b00      	cmp	r3, #0
 810259c:	d001      	beq.n	81025a2 <MX_TIM1_Init+0x18a>
  {
    Error_Handler();
 810259e:	f7ff fb2d 	bl	8101bfc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 81025a2:	4803      	ldr	r0, [pc, #12]	; (81025b0 <MX_TIM1_Init+0x198>)
 81025a4:	f000 f82a 	bl	81025fc <HAL_TIM_MspPostInit>

}
 81025a8:	bf00      	nop
 81025aa:	3768      	adds	r7, #104	; 0x68
 81025ac:	46bd      	mov	sp, r7
 81025ae:	bd80      	pop	{r7, pc}
 81025b0:	100053dc 	.word	0x100053dc
 81025b4:	40010000 	.word	0x40010000

081025b8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 81025b8:	b480      	push	{r7}
 81025ba:	b085      	sub	sp, #20
 81025bc:	af00      	add	r7, sp, #0
 81025be:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 81025c0:	687b      	ldr	r3, [r7, #4]
 81025c2:	681b      	ldr	r3, [r3, #0]
 81025c4:	4a0b      	ldr	r2, [pc, #44]	; (81025f4 <HAL_TIM_Base_MspInit+0x3c>)
 81025c6:	4293      	cmp	r3, r2
 81025c8:	d10e      	bne.n	81025e8 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 81025ca:	4b0b      	ldr	r3, [pc, #44]	; (81025f8 <HAL_TIM_Base_MspInit+0x40>)
 81025cc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 81025d0:	4a09      	ldr	r2, [pc, #36]	; (81025f8 <HAL_TIM_Base_MspInit+0x40>)
 81025d2:	f043 0301 	orr.w	r3, r3, #1
 81025d6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 81025da:	4b07      	ldr	r3, [pc, #28]	; (81025f8 <HAL_TIM_Base_MspInit+0x40>)
 81025dc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 81025e0:	f003 0301 	and.w	r3, r3, #1
 81025e4:	60fb      	str	r3, [r7, #12]
 81025e6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 81025e8:	bf00      	nop
 81025ea:	3714      	adds	r7, #20
 81025ec:	46bd      	mov	sp, r7
 81025ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 81025f2:	4770      	bx	lr
 81025f4:	40010000 	.word	0x40010000
 81025f8:	58024400 	.word	0x58024400

081025fc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 81025fc:	b580      	push	{r7, lr}
 81025fe:	b08a      	sub	sp, #40	; 0x28
 8102600:	af00      	add	r7, sp, #0
 8102602:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8102604:	f107 0314 	add.w	r3, r7, #20
 8102608:	2200      	movs	r2, #0
 810260a:	601a      	str	r2, [r3, #0]
 810260c:	605a      	str	r2, [r3, #4]
 810260e:	609a      	str	r2, [r3, #8]
 8102610:	60da      	str	r2, [r3, #12]
 8102612:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8102614:	687b      	ldr	r3, [r7, #4]
 8102616:	681b      	ldr	r3, [r3, #0]
 8102618:	4a23      	ldr	r2, [pc, #140]	; (81026a8 <HAL_TIM_MspPostInit+0xac>)
 810261a:	4293      	cmp	r3, r2
 810261c:	d13f      	bne.n	810269e <HAL_TIM_MspPostInit+0xa2>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 810261e:	4b23      	ldr	r3, [pc, #140]	; (81026ac <HAL_TIM_MspPostInit+0xb0>)
 8102620:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8102624:	4a21      	ldr	r2, [pc, #132]	; (81026ac <HAL_TIM_MspPostInit+0xb0>)
 8102626:	f043 0310 	orr.w	r3, r3, #16
 810262a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 810262e:	4b1f      	ldr	r3, [pc, #124]	; (81026ac <HAL_TIM_MspPostInit+0xb0>)
 8102630:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8102634:	f003 0310 	and.w	r3, r3, #16
 8102638:	613b      	str	r3, [r7, #16]
 810263a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 810263c:	4b1b      	ldr	r3, [pc, #108]	; (81026ac <HAL_TIM_MspPostInit+0xb0>)
 810263e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8102642:	4a1a      	ldr	r2, [pc, #104]	; (81026ac <HAL_TIM_MspPostInit+0xb0>)
 8102644:	f043 0301 	orr.w	r3, r3, #1
 8102648:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 810264c:	4b17      	ldr	r3, [pc, #92]	; (81026ac <HAL_TIM_MspPostInit+0xb0>)
 810264e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8102652:	f003 0301 	and.w	r3, r3, #1
 8102656:	60fb      	str	r3, [r7, #12]
 8102658:	68fb      	ldr	r3, [r7, #12]
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_14;
 810265a:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 810265e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8102660:	2302      	movs	r3, #2
 8102662:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8102664:	2300      	movs	r3, #0
 8102666:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8102668:	2300      	movs	r3, #0
 810266a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 810266c:	2301      	movs	r3, #1
 810266e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8102670:	f107 0314 	add.w	r3, r7, #20
 8102674:	4619      	mov	r1, r3
 8102676:	480e      	ldr	r0, [pc, #56]	; (81026b0 <HAL_TIM_MspPostInit+0xb4>)
 8102678:	f004 fce2 	bl	8107040 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 810267c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8102680:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8102682:	2302      	movs	r3, #2
 8102684:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8102686:	2300      	movs	r3, #0
 8102688:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 810268a:	2300      	movs	r3, #0
 810268c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 810268e:	2301      	movs	r3, #1
 8102690:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8102692:	f107 0314 	add.w	r3, r7, #20
 8102696:	4619      	mov	r1, r3
 8102698:	4806      	ldr	r0, [pc, #24]	; (81026b4 <HAL_TIM_MspPostInit+0xb8>)
 810269a:	f004 fcd1 	bl	8107040 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 810269e:	bf00      	nop
 81026a0:	3728      	adds	r7, #40	; 0x28
 81026a2:	46bd      	mov	sp, r7
 81026a4:	bd80      	pop	{r7, pc}
 81026a6:	bf00      	nop
 81026a8:	40010000 	.word	0x40010000
 81026ac:	58024400 	.word	0x58024400
 81026b0:	58021000 	.word	0x58021000
 81026b4:	58020000 	.word	0x58020000

081026b8 <calcChecksum>:

GPS gps;
struct NAV_PVT pvt;

void calcChecksum(unsigned char* CK)
{
 81026b8:	b580      	push	{r7, lr}
 81026ba:	b084      	sub	sp, #16
 81026bc:	af00      	add	r7, sp, #0
 81026be:	6078      	str	r0, [r7, #4]
	memset(CK, 0, 2);
 81026c0:	2202      	movs	r2, #2
 81026c2:	2100      	movs	r1, #0
 81026c4:	6878      	ldr	r0, [r7, #4]
 81026c6:	f016 fc45 	bl	8118f54 <memset>
	for (int i = 0; i < (int)sizeof(pvt); i++)
 81026ca:	2300      	movs	r3, #0
 81026cc:	60fb      	str	r3, [r7, #12]
 81026ce:	e016      	b.n	81026fe <calcChecksum+0x46>
	{
		CK[0] = CK[0] + ((unsigned char*)(&pvt))[i];
 81026d0:	687b      	ldr	r3, [r7, #4]
 81026d2:	781a      	ldrb	r2, [r3, #0]
 81026d4:	68fb      	ldr	r3, [r7, #12]
 81026d6:	490e      	ldr	r1, [pc, #56]	; (8102710 <calcChecksum+0x58>)
 81026d8:	440b      	add	r3, r1
 81026da:	781b      	ldrb	r3, [r3, #0]
 81026dc:	4413      	add	r3, r2
 81026de:	b2da      	uxtb	r2, r3
 81026e0:	687b      	ldr	r3, [r7, #4]
 81026e2:	701a      	strb	r2, [r3, #0]
		CK[1] = CK[1] + CK[0];
 81026e4:	687b      	ldr	r3, [r7, #4]
 81026e6:	3301      	adds	r3, #1
 81026e8:	7819      	ldrb	r1, [r3, #0]
 81026ea:	687b      	ldr	r3, [r7, #4]
 81026ec:	781a      	ldrb	r2, [r3, #0]
 81026ee:	687b      	ldr	r3, [r7, #4]
 81026f0:	3301      	adds	r3, #1
 81026f2:	440a      	add	r2, r1
 81026f4:	b2d2      	uxtb	r2, r2
 81026f6:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < (int)sizeof(pvt); i++)
 81026f8:	68fb      	ldr	r3, [r7, #12]
 81026fa:	3301      	adds	r3, #1
 81026fc:	60fb      	str	r3, [r7, #12]
 81026fe:	68fb      	ldr	r3, [r7, #12]
 8102700:	2b5f      	cmp	r3, #95	; 0x5f
 8102702:	dde5      	ble.n	81026d0 <calcChecksum+0x18>
	}

}
 8102704:	bf00      	nop
 8102706:	bf00      	nop
 8102708:	3710      	adds	r7, #16
 810270a:	46bd      	mov	sp, r7
 810270c:	bd80      	pop	{r7, pc}
 810270e:	bf00      	nop
 8102710:	10005138 	.word	0x10005138

08102714 <MX_USART3_UART_Init>:
DMA_HandleTypeDef hdma_usart3_tx;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8102714:	b580      	push	{r7, lr}
 8102716:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8102718:	4b22      	ldr	r3, [pc, #136]	; (81027a4 <MX_USART3_UART_Init+0x90>)
 810271a:	4a23      	ldr	r2, [pc, #140]	; (81027a8 <MX_USART3_UART_Init+0x94>)
 810271c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 810271e:	4b21      	ldr	r3, [pc, #132]	; (81027a4 <MX_USART3_UART_Init+0x90>)
 8102720:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8102724:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8102726:	4b1f      	ldr	r3, [pc, #124]	; (81027a4 <MX_USART3_UART_Init+0x90>)
 8102728:	2200      	movs	r2, #0
 810272a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 810272c:	4b1d      	ldr	r3, [pc, #116]	; (81027a4 <MX_USART3_UART_Init+0x90>)
 810272e:	2200      	movs	r2, #0
 8102730:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8102732:	4b1c      	ldr	r3, [pc, #112]	; (81027a4 <MX_USART3_UART_Init+0x90>)
 8102734:	2200      	movs	r2, #0
 8102736:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8102738:	4b1a      	ldr	r3, [pc, #104]	; (81027a4 <MX_USART3_UART_Init+0x90>)
 810273a:	220c      	movs	r2, #12
 810273c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 810273e:	4b19      	ldr	r3, [pc, #100]	; (81027a4 <MX_USART3_UART_Init+0x90>)
 8102740:	2200      	movs	r2, #0
 8102742:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8102744:	4b17      	ldr	r3, [pc, #92]	; (81027a4 <MX_USART3_UART_Init+0x90>)
 8102746:	2200      	movs	r2, #0
 8102748:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 810274a:	4b16      	ldr	r3, [pc, #88]	; (81027a4 <MX_USART3_UART_Init+0x90>)
 810274c:	2200      	movs	r2, #0
 810274e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8102750:	4b14      	ldr	r3, [pc, #80]	; (81027a4 <MX_USART3_UART_Init+0x90>)
 8102752:	2200      	movs	r2, #0
 8102754:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8102756:	4b13      	ldr	r3, [pc, #76]	; (81027a4 <MX_USART3_UART_Init+0x90>)
 8102758:	2200      	movs	r2, #0
 810275a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 810275c:	4811      	ldr	r0, [pc, #68]	; (81027a4 <MX_USART3_UART_Init+0x90>)
 810275e:	f00d f905 	bl	810f96c <HAL_UART_Init>
 8102762:	4603      	mov	r3, r0
 8102764:	2b00      	cmp	r3, #0
 8102766:	d001      	beq.n	810276c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8102768:	f7ff fa48 	bl	8101bfc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 810276c:	2100      	movs	r1, #0
 810276e:	480d      	ldr	r0, [pc, #52]	; (81027a4 <MX_USART3_UART_Init+0x90>)
 8102770:	f00e fddc 	bl	811132c <HAL_UARTEx_SetTxFifoThreshold>
 8102774:	4603      	mov	r3, r0
 8102776:	2b00      	cmp	r3, #0
 8102778:	d001      	beq.n	810277e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 810277a:	f7ff fa3f 	bl	8101bfc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 810277e:	2100      	movs	r1, #0
 8102780:	4808      	ldr	r0, [pc, #32]	; (81027a4 <MX_USART3_UART_Init+0x90>)
 8102782:	f00e fe11 	bl	81113a8 <HAL_UARTEx_SetRxFifoThreshold>
 8102786:	4603      	mov	r3, r0
 8102788:	2b00      	cmp	r3, #0
 810278a:	d001      	beq.n	8102790 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 810278c:	f7ff fa36 	bl	8101bfc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8102790:	4804      	ldr	r0, [pc, #16]	; (81027a4 <MX_USART3_UART_Init+0x90>)
 8102792:	f00e fd92 	bl	81112ba <HAL_UARTEx_DisableFifoMode>
 8102796:	4603      	mov	r3, r0
 8102798:	2b00      	cmp	r3, #0
 810279a:	d001      	beq.n	81027a0 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 810279c:	f7ff fa2e 	bl	8101bfc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 81027a0:	bf00      	nop
 81027a2:	bd80      	pop	{r7, pc}
 81027a4:	100054a0 	.word	0x100054a0
 81027a8:	40004800 	.word	0x40004800

081027ac <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 81027ac:	b580      	push	{r7, lr}
 81027ae:	b0b8      	sub	sp, #224	; 0xe0
 81027b0:	af00      	add	r7, sp, #0
 81027b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 81027b4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 81027b8:	2200      	movs	r2, #0
 81027ba:	601a      	str	r2, [r3, #0]
 81027bc:	605a      	str	r2, [r3, #4]
 81027be:	609a      	str	r2, [r3, #8]
 81027c0:	60da      	str	r2, [r3, #12]
 81027c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 81027c4:	f107 0310 	add.w	r3, r7, #16
 81027c8:	22bc      	movs	r2, #188	; 0xbc
 81027ca:	2100      	movs	r1, #0
 81027cc:	4618      	mov	r0, r3
 81027ce:	f016 fbc1 	bl	8118f54 <memset>
  if(uartHandle->Instance==USART3)
 81027d2:	687b      	ldr	r3, [r7, #4]
 81027d4:	681b      	ldr	r3, [r3, #0]
 81027d6:	4a57      	ldr	r2, [pc, #348]	; (8102934 <HAL_UART_MspInit+0x188>)
 81027d8:	4293      	cmp	r3, r2
 81027da:	f040 80a7 	bne.w	810292c <HAL_UART_MspInit+0x180>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 81027de:	2302      	movs	r3, #2
 81027e0:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 81027e2:	2300      	movs	r3, #0
 81027e4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 81027e8:	f107 0310 	add.w	r3, r7, #16
 81027ec:	4618      	mov	r0, r3
 81027ee:	f007 fa85 	bl	8109cfc <HAL_RCCEx_PeriphCLKConfig>
 81027f2:	4603      	mov	r3, r0
 81027f4:	2b00      	cmp	r3, #0
 81027f6:	d001      	beq.n	81027fc <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 81027f8:	f7ff fa00 	bl	8101bfc <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 81027fc:	4b4e      	ldr	r3, [pc, #312]	; (8102938 <HAL_UART_MspInit+0x18c>)
 81027fe:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8102802:	4a4d      	ldr	r2, [pc, #308]	; (8102938 <HAL_UART_MspInit+0x18c>)
 8102804:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8102808:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 810280c:	4b4a      	ldr	r3, [pc, #296]	; (8102938 <HAL_UART_MspInit+0x18c>)
 810280e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8102812:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8102816:	60fb      	str	r3, [r7, #12]
 8102818:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 810281a:	4b47      	ldr	r3, [pc, #284]	; (8102938 <HAL_UART_MspInit+0x18c>)
 810281c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8102820:	4a45      	ldr	r2, [pc, #276]	; (8102938 <HAL_UART_MspInit+0x18c>)
 8102822:	f043 0308 	orr.w	r3, r3, #8
 8102826:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 810282a:	4b43      	ldr	r3, [pc, #268]	; (8102938 <HAL_UART_MspInit+0x18c>)
 810282c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8102830:	f003 0308 	and.w	r3, r3, #8
 8102834:	60bb      	str	r3, [r7, #8]
 8102836:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8102838:	f44f 7340 	mov.w	r3, #768	; 0x300
 810283c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8102840:	2302      	movs	r3, #2
 8102842:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8102846:	2300      	movs	r3, #0
 8102848:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 810284c:	2300      	movs	r3, #0
 810284e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8102852:	2307      	movs	r3, #7
 8102854:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8102858:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 810285c:	4619      	mov	r1, r3
 810285e:	4837      	ldr	r0, [pc, #220]	; (810293c <HAL_UART_MspInit+0x190>)
 8102860:	f004 fbee 	bl	8107040 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream7;
 8102864:	4b36      	ldr	r3, [pc, #216]	; (8102940 <HAL_UART_MspInit+0x194>)
 8102866:	4a37      	ldr	r2, [pc, #220]	; (8102944 <HAL_UART_MspInit+0x198>)
 8102868:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 810286a:	4b35      	ldr	r3, [pc, #212]	; (8102940 <HAL_UART_MspInit+0x194>)
 810286c:	222d      	movs	r2, #45	; 0x2d
 810286e:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8102870:	4b33      	ldr	r3, [pc, #204]	; (8102940 <HAL_UART_MspInit+0x194>)
 8102872:	2200      	movs	r2, #0
 8102874:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8102876:	4b32      	ldr	r3, [pc, #200]	; (8102940 <HAL_UART_MspInit+0x194>)
 8102878:	2200      	movs	r2, #0
 810287a:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 810287c:	4b30      	ldr	r3, [pc, #192]	; (8102940 <HAL_UART_MspInit+0x194>)
 810287e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8102882:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8102884:	4b2e      	ldr	r3, [pc, #184]	; (8102940 <HAL_UART_MspInit+0x194>)
 8102886:	2200      	movs	r2, #0
 8102888:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 810288a:	4b2d      	ldr	r3, [pc, #180]	; (8102940 <HAL_UART_MspInit+0x194>)
 810288c:	2200      	movs	r2, #0
 810288e:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8102890:	4b2b      	ldr	r3, [pc, #172]	; (8102940 <HAL_UART_MspInit+0x194>)
 8102892:	f44f 7280 	mov.w	r2, #256	; 0x100
 8102896:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8102898:	4b29      	ldr	r3, [pc, #164]	; (8102940 <HAL_UART_MspInit+0x194>)
 810289a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 810289e:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 81028a0:	4b27      	ldr	r3, [pc, #156]	; (8102940 <HAL_UART_MspInit+0x194>)
 81028a2:	2200      	movs	r2, #0
 81028a4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 81028a6:	4826      	ldr	r0, [pc, #152]	; (8102940 <HAL_UART_MspInit+0x194>)
 81028a8:	f001 fd78 	bl	810439c <HAL_DMA_Init>
 81028ac:	4603      	mov	r3, r0
 81028ae:	2b00      	cmp	r3, #0
 81028b0:	d001      	beq.n	81028b6 <HAL_UART_MspInit+0x10a>
    {
      Error_Handler();
 81028b2:	f7ff f9a3 	bl	8101bfc <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 81028b6:	687b      	ldr	r3, [r7, #4]
 81028b8:	4a21      	ldr	r2, [pc, #132]	; (8102940 <HAL_UART_MspInit+0x194>)
 81028ba:	67da      	str	r2, [r3, #124]	; 0x7c
 81028bc:	4a20      	ldr	r2, [pc, #128]	; (8102940 <HAL_UART_MspInit+0x194>)
 81028be:	687b      	ldr	r3, [r7, #4]
 81028c0:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA2_Stream0;
 81028c2:	4b21      	ldr	r3, [pc, #132]	; (8102948 <HAL_UART_MspInit+0x19c>)
 81028c4:	4a21      	ldr	r2, [pc, #132]	; (810294c <HAL_UART_MspInit+0x1a0>)
 81028c6:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 81028c8:	4b1f      	ldr	r3, [pc, #124]	; (8102948 <HAL_UART_MspInit+0x19c>)
 81028ca:	222e      	movs	r2, #46	; 0x2e
 81028cc:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 81028ce:	4b1e      	ldr	r3, [pc, #120]	; (8102948 <HAL_UART_MspInit+0x19c>)
 81028d0:	2240      	movs	r2, #64	; 0x40
 81028d2:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 81028d4:	4b1c      	ldr	r3, [pc, #112]	; (8102948 <HAL_UART_MspInit+0x19c>)
 81028d6:	2200      	movs	r2, #0
 81028d8:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 81028da:	4b1b      	ldr	r3, [pc, #108]	; (8102948 <HAL_UART_MspInit+0x19c>)
 81028dc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 81028e0:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 81028e2:	4b19      	ldr	r3, [pc, #100]	; (8102948 <HAL_UART_MspInit+0x19c>)
 81028e4:	2200      	movs	r2, #0
 81028e6:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 81028e8:	4b17      	ldr	r3, [pc, #92]	; (8102948 <HAL_UART_MspInit+0x19c>)
 81028ea:	2200      	movs	r2, #0
 81028ec:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 81028ee:	4b16      	ldr	r3, [pc, #88]	; (8102948 <HAL_UART_MspInit+0x19c>)
 81028f0:	2200      	movs	r2, #0
 81028f2:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 81028f4:	4b14      	ldr	r3, [pc, #80]	; (8102948 <HAL_UART_MspInit+0x19c>)
 81028f6:	2200      	movs	r2, #0
 81028f8:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 81028fa:	4b13      	ldr	r3, [pc, #76]	; (8102948 <HAL_UART_MspInit+0x19c>)
 81028fc:	2200      	movs	r2, #0
 81028fe:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8102900:	4811      	ldr	r0, [pc, #68]	; (8102948 <HAL_UART_MspInit+0x19c>)
 8102902:	f001 fd4b 	bl	810439c <HAL_DMA_Init>
 8102906:	4603      	mov	r3, r0
 8102908:	2b00      	cmp	r3, #0
 810290a:	d001      	beq.n	8102910 <HAL_UART_MspInit+0x164>
    {
      Error_Handler();
 810290c:	f7ff f976 	bl	8101bfc <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 8102910:	687b      	ldr	r3, [r7, #4]
 8102912:	4a0d      	ldr	r2, [pc, #52]	; (8102948 <HAL_UART_MspInit+0x19c>)
 8102914:	679a      	str	r2, [r3, #120]	; 0x78
 8102916:	4a0c      	ldr	r2, [pc, #48]	; (8102948 <HAL_UART_MspInit+0x19c>)
 8102918:	687b      	ldr	r3, [r7, #4]
 810291a:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 810291c:	2200      	movs	r2, #0
 810291e:	2105      	movs	r1, #5
 8102920:	2027      	movs	r0, #39	; 0x27
 8102922:	f001 fcff 	bl	8104324 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8102926:	2027      	movs	r0, #39	; 0x27
 8102928:	f001 fd16 	bl	8104358 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 810292c:	bf00      	nop
 810292e:	37e0      	adds	r7, #224	; 0xe0
 8102930:	46bd      	mov	sp, r7
 8102932:	bd80      	pop	{r7, pc}
 8102934:	40004800 	.word	0x40004800
 8102938:	58024400 	.word	0x58024400
 810293c:	58020c00 	.word	0x58020c00
 8102940:	10005428 	.word	0x10005428
 8102944:	400200b8 	.word	0x400200b8
 8102948:	10005530 	.word	0x10005530
 810294c:	40020410 	.word	0x40020410

08102950 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8102950:	f8df d034 	ldr.w	sp, [pc, #52]	; 8102988 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8102954:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8102956:	e003      	b.n	8102960 <LoopCopyDataInit>

08102958 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8102958:	4b0c      	ldr	r3, [pc, #48]	; (810298c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 810295a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 810295c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 810295e:	3104      	adds	r1, #4

08102960 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8102960:	480b      	ldr	r0, [pc, #44]	; (8102990 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8102962:	4b0c      	ldr	r3, [pc, #48]	; (8102994 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8102964:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8102966:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8102968:	d3f6      	bcc.n	8102958 <CopyDataInit>
  ldr  r2, =_sbss
 810296a:	4a0b      	ldr	r2, [pc, #44]	; (8102998 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 810296c:	e002      	b.n	8102974 <LoopFillZerobss>

0810296e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 810296e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8102970:	f842 3b04 	str.w	r3, [r2], #4

08102974 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8102974:	4b09      	ldr	r3, [pc, #36]	; (810299c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8102976:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8102978:	d3f9      	bcc.n	810296e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 810297a:	f7fe fb19 	bl	8100fb0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 810297e:	f016 fab7 	bl	8118ef0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8102982:	f7fe ff33 	bl	81017ec <main>
  bx  lr    
 8102986:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8102988:	10048000 	.word	0x10048000
  ldr  r3, =_sidata
 810298c:	0811be5c 	.word	0x0811be5c
  ldr  r0, =_sdata
 8102990:	10000000 	.word	0x10000000
  ldr  r3, =_edata
 8102994:	10000358 	.word	0x10000358
  ldr  r2, =_sbss
 8102998:	10000358 	.word	0x10000358
  ldr  r3, = _ebss
 810299c:	10008f44 	.word	0x10008f44

081029a0 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 81029a0:	e7fe      	b.n	81029a0 <ADC3_IRQHandler>
	...

081029a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 81029a4:	b580      	push	{r7, lr}
 81029a6:	b082      	sub	sp, #8
 81029a8:	af00      	add	r7, sp, #0

uint32_t common_system_clock;

#if defined(DUAL_CORE) && defined(CORE_CM4)
   /* Configure Cortex-M4 Instruction cache through ART accelerator */
   __HAL_RCC_ART_CLK_ENABLE();                   /* Enable the Cortex-M4 ART Clock */
 81029aa:	4b28      	ldr	r3, [pc, #160]	; (8102a4c <HAL_Init+0xa8>)
 81029ac:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 81029b0:	4a26      	ldr	r2, [pc, #152]	; (8102a4c <HAL_Init+0xa8>)
 81029b2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 81029b6:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 81029ba:	4b24      	ldr	r3, [pc, #144]	; (8102a4c <HAL_Init+0xa8>)
 81029bc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 81029c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 81029c4:	603b      	str	r3, [r7, #0]
 81029c6:	683b      	ldr	r3, [r7, #0]
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
 81029c8:	4b21      	ldr	r3, [pc, #132]	; (8102a50 <HAL_Init+0xac>)
 81029ca:	681b      	ldr	r3, [r3, #0]
 81029cc:	f423 237f 	bic.w	r3, r3, #1044480	; 0xff000
 81029d0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 81029d4:	4a1e      	ldr	r2, [pc, #120]	; (8102a50 <HAL_Init+0xac>)
 81029d6:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 81029da:	6013      	str	r3, [r2, #0]
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
 81029dc:	4b1c      	ldr	r3, [pc, #112]	; (8102a50 <HAL_Init+0xac>)
 81029de:	681b      	ldr	r3, [r3, #0]
 81029e0:	4a1b      	ldr	r2, [pc, #108]	; (8102a50 <HAL_Init+0xac>)
 81029e2:	f043 0301 	orr.w	r3, r3, #1
 81029e6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 81029e8:	2003      	movs	r0, #3
 81029ea:	f001 fc90 	bl	810430e <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 81029ee:	f006 ff6b 	bl	81098c8 <HAL_RCC_GetSysClockFreq>
 81029f2:	4602      	mov	r2, r0
 81029f4:	4b15      	ldr	r3, [pc, #84]	; (8102a4c <HAL_Init+0xa8>)
 81029f6:	699b      	ldr	r3, [r3, #24]
 81029f8:	0a1b      	lsrs	r3, r3, #8
 81029fa:	f003 030f 	and.w	r3, r3, #15
 81029fe:	4915      	ldr	r1, [pc, #84]	; (8102a54 <HAL_Init+0xb0>)
 8102a00:	5ccb      	ldrb	r3, [r1, r3]
 8102a02:	f003 031f 	and.w	r3, r3, #31
 8102a06:	fa22 f303 	lsr.w	r3, r2, r3
 8102a0a:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8102a0c:	4b0f      	ldr	r3, [pc, #60]	; (8102a4c <HAL_Init+0xa8>)
 8102a0e:	699b      	ldr	r3, [r3, #24]
 8102a10:	f003 030f 	and.w	r3, r3, #15
 8102a14:	4a0f      	ldr	r2, [pc, #60]	; (8102a54 <HAL_Init+0xb0>)
 8102a16:	5cd3      	ldrb	r3, [r2, r3]
 8102a18:	f003 031f 	and.w	r3, r3, #31
 8102a1c:	687a      	ldr	r2, [r7, #4]
 8102a1e:	fa22 f303 	lsr.w	r3, r2, r3
 8102a22:	4a0d      	ldr	r2, [pc, #52]	; (8102a58 <HAL_Init+0xb4>)
 8102a24:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 8102a26:	4b0c      	ldr	r3, [pc, #48]	; (8102a58 <HAL_Init+0xb4>)
 8102a28:	681b      	ldr	r3, [r3, #0]
 8102a2a:	4a0c      	ldr	r2, [pc, #48]	; (8102a5c <HAL_Init+0xb8>)
 8102a2c:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8102a2e:	2000      	movs	r0, #0
 8102a30:	f7ff fafc 	bl	810202c <HAL_InitTick>
 8102a34:	4603      	mov	r3, r0
 8102a36:	2b00      	cmp	r3, #0
 8102a38:	d001      	beq.n	8102a3e <HAL_Init+0x9a>
  {
    return HAL_ERROR;
 8102a3a:	2301      	movs	r3, #1
 8102a3c:	e002      	b.n	8102a44 <HAL_Init+0xa0>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8102a3e:	f7ff fac7 	bl	8101fd0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8102a42:	2300      	movs	r3, #0
}
 8102a44:	4618      	mov	r0, r3
 8102a46:	3708      	adds	r7, #8
 8102a48:	46bd      	mov	sp, r7
 8102a4a:	bd80      	pop	{r7, pc}
 8102a4c:	58024400 	.word	0x58024400
 8102a50:	40024400 	.word	0x40024400
 8102a54:	0811b9f0 	.word	0x0811b9f0
 8102a58:	10000004 	.word	0x10000004
 8102a5c:	10000000 	.word	0x10000000

08102a60 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8102a60:	b480      	push	{r7}
 8102a62:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8102a64:	4b06      	ldr	r3, [pc, #24]	; (8102a80 <HAL_IncTick+0x20>)
 8102a66:	781b      	ldrb	r3, [r3, #0]
 8102a68:	461a      	mov	r2, r3
 8102a6a:	4b06      	ldr	r3, [pc, #24]	; (8102a84 <HAL_IncTick+0x24>)
 8102a6c:	681b      	ldr	r3, [r3, #0]
 8102a6e:	4413      	add	r3, r2
 8102a70:	4a04      	ldr	r2, [pc, #16]	; (8102a84 <HAL_IncTick+0x24>)
 8102a72:	6013      	str	r3, [r2, #0]
}
 8102a74:	bf00      	nop
 8102a76:	46bd      	mov	sp, r7
 8102a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102a7c:	4770      	bx	lr
 8102a7e:	bf00      	nop
 8102a80:	1000000c 	.word	0x1000000c
 8102a84:	100055a8 	.word	0x100055a8

08102a88 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8102a88:	b480      	push	{r7}
 8102a8a:	af00      	add	r7, sp, #0
  return uwTick;
 8102a8c:	4b03      	ldr	r3, [pc, #12]	; (8102a9c <HAL_GetTick+0x14>)
 8102a8e:	681b      	ldr	r3, [r3, #0]
}
 8102a90:	4618      	mov	r0, r3
 8102a92:	46bd      	mov	sp, r7
 8102a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102a98:	4770      	bx	lr
 8102a9a:	bf00      	nop
 8102a9c:	100055a8 	.word	0x100055a8

08102aa0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8102aa0:	b580      	push	{r7, lr}
 8102aa2:	b084      	sub	sp, #16
 8102aa4:	af00      	add	r7, sp, #0
 8102aa6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8102aa8:	f7ff ffee 	bl	8102a88 <HAL_GetTick>
 8102aac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8102aae:	687b      	ldr	r3, [r7, #4]
 8102ab0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8102ab2:	68fb      	ldr	r3, [r7, #12]
 8102ab4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8102ab8:	d005      	beq.n	8102ac6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8102aba:	4b0a      	ldr	r3, [pc, #40]	; (8102ae4 <HAL_Delay+0x44>)
 8102abc:	781b      	ldrb	r3, [r3, #0]
 8102abe:	461a      	mov	r2, r3
 8102ac0:	68fb      	ldr	r3, [r7, #12]
 8102ac2:	4413      	add	r3, r2
 8102ac4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8102ac6:	bf00      	nop
 8102ac8:	f7ff ffde 	bl	8102a88 <HAL_GetTick>
 8102acc:	4602      	mov	r2, r0
 8102ace:	68bb      	ldr	r3, [r7, #8]
 8102ad0:	1ad3      	subs	r3, r2, r3
 8102ad2:	68fa      	ldr	r2, [r7, #12]
 8102ad4:	429a      	cmp	r2, r3
 8102ad6:	d8f7      	bhi.n	8102ac8 <HAL_Delay+0x28>
  {
  }
}
 8102ad8:	bf00      	nop
 8102ada:	bf00      	nop
 8102adc:	3710      	adds	r7, #16
 8102ade:	46bd      	mov	sp, r7
 8102ae0:	bd80      	pop	{r7, pc}
 8102ae2:	bf00      	nop
 8102ae4:	1000000c 	.word	0x1000000c

08102ae8 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8102ae8:	b480      	push	{r7}
 8102aea:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8102aec:	4b03      	ldr	r3, [pc, #12]	; (8102afc <HAL_GetREVID+0x14>)
 8102aee:	681b      	ldr	r3, [r3, #0]
 8102af0:	0c1b      	lsrs	r3, r3, #16
}
 8102af2:	4618      	mov	r0, r3
 8102af4:	46bd      	mov	sp, r7
 8102af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102afa:	4770      	bx	lr
 8102afc:	5c001000 	.word	0x5c001000

08102b00 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8102b00:	b480      	push	{r7}
 8102b02:	b083      	sub	sp, #12
 8102b04:	af00      	add	r7, sp, #0
 8102b06:	6078      	str	r0, [r7, #4]
 8102b08:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8102b0a:	687b      	ldr	r3, [r7, #4]
 8102b0c:	689b      	ldr	r3, [r3, #8]
 8102b0e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8102b12:	683b      	ldr	r3, [r7, #0]
 8102b14:	431a      	orrs	r2, r3
 8102b16:	687b      	ldr	r3, [r7, #4]
 8102b18:	609a      	str	r2, [r3, #8]
}
 8102b1a:	bf00      	nop
 8102b1c:	370c      	adds	r7, #12
 8102b1e:	46bd      	mov	sp, r7
 8102b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102b24:	4770      	bx	lr

08102b26 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8102b26:	b480      	push	{r7}
 8102b28:	b083      	sub	sp, #12
 8102b2a:	af00      	add	r7, sp, #0
 8102b2c:	6078      	str	r0, [r7, #4]
 8102b2e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8102b30:	687b      	ldr	r3, [r7, #4]
 8102b32:	689b      	ldr	r3, [r3, #8]
 8102b34:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8102b38:	683b      	ldr	r3, [r7, #0]
 8102b3a:	431a      	orrs	r2, r3
 8102b3c:	687b      	ldr	r3, [r7, #4]
 8102b3e:	609a      	str	r2, [r3, #8]
}
 8102b40:	bf00      	nop
 8102b42:	370c      	adds	r7, #12
 8102b44:	46bd      	mov	sp, r7
 8102b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102b4a:	4770      	bx	lr

08102b4c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8102b4c:	b480      	push	{r7}
 8102b4e:	b083      	sub	sp, #12
 8102b50:	af00      	add	r7, sp, #0
 8102b52:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8102b54:	687b      	ldr	r3, [r7, #4]
 8102b56:	689b      	ldr	r3, [r3, #8]
 8102b58:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8102b5c:	4618      	mov	r0, r3
 8102b5e:	370c      	adds	r7, #12
 8102b60:	46bd      	mov	sp, r7
 8102b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102b66:	4770      	bx	lr

08102b68 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8102b68:	b480      	push	{r7}
 8102b6a:	b087      	sub	sp, #28
 8102b6c:	af00      	add	r7, sp, #0
 8102b6e:	60f8      	str	r0, [r7, #12]
 8102b70:	60b9      	str	r1, [r7, #8]
 8102b72:	607a      	str	r2, [r7, #4]
 8102b74:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8102b76:	68fb      	ldr	r3, [r7, #12]
 8102b78:	3360      	adds	r3, #96	; 0x60
 8102b7a:	461a      	mov	r2, r3
 8102b7c:	68bb      	ldr	r3, [r7, #8]
 8102b7e:	009b      	lsls	r3, r3, #2
 8102b80:	4413      	add	r3, r2
 8102b82:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8102b84:	697b      	ldr	r3, [r7, #20]
 8102b86:	681b      	ldr	r3, [r3, #0]
 8102b88:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8102b8c:	687b      	ldr	r3, [r7, #4]
 8102b8e:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8102b92:	683b      	ldr	r3, [r7, #0]
 8102b94:	430b      	orrs	r3, r1
 8102b96:	431a      	orrs	r2, r3
 8102b98:	697b      	ldr	r3, [r7, #20]
 8102b9a:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8102b9c:	bf00      	nop
 8102b9e:	371c      	adds	r7, #28
 8102ba0:	46bd      	mov	sp, r7
 8102ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102ba6:	4770      	bx	lr

08102ba8 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8102ba8:	b480      	push	{r7}
 8102baa:	b085      	sub	sp, #20
 8102bac:	af00      	add	r7, sp, #0
 8102bae:	60f8      	str	r0, [r7, #12]
 8102bb0:	60b9      	str	r1, [r7, #8]
 8102bb2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8102bb4:	68fb      	ldr	r3, [r7, #12]
 8102bb6:	691b      	ldr	r3, [r3, #16]
 8102bb8:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8102bbc:	68bb      	ldr	r3, [r7, #8]
 8102bbe:	f003 031f 	and.w	r3, r3, #31
 8102bc2:	6879      	ldr	r1, [r7, #4]
 8102bc4:	fa01 f303 	lsl.w	r3, r1, r3
 8102bc8:	431a      	orrs	r2, r3
 8102bca:	68fb      	ldr	r3, [r7, #12]
 8102bcc:	611a      	str	r2, [r3, #16]
}
 8102bce:	bf00      	nop
 8102bd0:	3714      	adds	r7, #20
 8102bd2:	46bd      	mov	sp, r7
 8102bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102bd8:	4770      	bx	lr

08102bda <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8102bda:	b480      	push	{r7}
 8102bdc:	b087      	sub	sp, #28
 8102bde:	af00      	add	r7, sp, #0
 8102be0:	60f8      	str	r0, [r7, #12]
 8102be2:	60b9      	str	r1, [r7, #8]
 8102be4:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8102be6:	68fb      	ldr	r3, [r7, #12]
 8102be8:	3360      	adds	r3, #96	; 0x60
 8102bea:	461a      	mov	r2, r3
 8102bec:	68bb      	ldr	r3, [r7, #8]
 8102bee:	009b      	lsls	r3, r3, #2
 8102bf0:	4413      	add	r3, r2
 8102bf2:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8102bf4:	697b      	ldr	r3, [r7, #20]
 8102bf6:	681b      	ldr	r3, [r3, #0]
 8102bf8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8102bfc:	687b      	ldr	r3, [r7, #4]
 8102bfe:	431a      	orrs	r2, r3
 8102c00:	697b      	ldr	r3, [r7, #20]
 8102c02:	601a      	str	r2, [r3, #0]
  }
}
 8102c04:	bf00      	nop
 8102c06:	371c      	adds	r7, #28
 8102c08:	46bd      	mov	sp, r7
 8102c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102c0e:	4770      	bx	lr

08102c10 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8102c10:	b480      	push	{r7}
 8102c12:	b083      	sub	sp, #12
 8102c14:	af00      	add	r7, sp, #0
 8102c16:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8102c18:	687b      	ldr	r3, [r7, #4]
 8102c1a:	68db      	ldr	r3, [r3, #12]
 8102c1c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8102c20:	2b00      	cmp	r3, #0
 8102c22:	d101      	bne.n	8102c28 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8102c24:	2301      	movs	r3, #1
 8102c26:	e000      	b.n	8102c2a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8102c28:	2300      	movs	r3, #0
}
 8102c2a:	4618      	mov	r0, r3
 8102c2c:	370c      	adds	r7, #12
 8102c2e:	46bd      	mov	sp, r7
 8102c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102c34:	4770      	bx	lr

08102c36 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8102c36:	b480      	push	{r7}
 8102c38:	b087      	sub	sp, #28
 8102c3a:	af00      	add	r7, sp, #0
 8102c3c:	60f8      	str	r0, [r7, #12]
 8102c3e:	60b9      	str	r1, [r7, #8]
 8102c40:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8102c42:	68fb      	ldr	r3, [r7, #12]
 8102c44:	3330      	adds	r3, #48	; 0x30
 8102c46:	461a      	mov	r2, r3
 8102c48:	68bb      	ldr	r3, [r7, #8]
 8102c4a:	0a1b      	lsrs	r3, r3, #8
 8102c4c:	009b      	lsls	r3, r3, #2
 8102c4e:	f003 030c 	and.w	r3, r3, #12
 8102c52:	4413      	add	r3, r2
 8102c54:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8102c56:	697b      	ldr	r3, [r7, #20]
 8102c58:	681a      	ldr	r2, [r3, #0]
 8102c5a:	68bb      	ldr	r3, [r7, #8]
 8102c5c:	f003 031f 	and.w	r3, r3, #31
 8102c60:	211f      	movs	r1, #31
 8102c62:	fa01 f303 	lsl.w	r3, r1, r3
 8102c66:	43db      	mvns	r3, r3
 8102c68:	401a      	ands	r2, r3
 8102c6a:	687b      	ldr	r3, [r7, #4]
 8102c6c:	0e9b      	lsrs	r3, r3, #26
 8102c6e:	f003 011f 	and.w	r1, r3, #31
 8102c72:	68bb      	ldr	r3, [r7, #8]
 8102c74:	f003 031f 	and.w	r3, r3, #31
 8102c78:	fa01 f303 	lsl.w	r3, r1, r3
 8102c7c:	431a      	orrs	r2, r3
 8102c7e:	697b      	ldr	r3, [r7, #20]
 8102c80:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8102c82:	bf00      	nop
 8102c84:	371c      	adds	r7, #28
 8102c86:	46bd      	mov	sp, r7
 8102c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102c8c:	4770      	bx	lr

08102c8e <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8102c8e:	b480      	push	{r7}
 8102c90:	b083      	sub	sp, #12
 8102c92:	af00      	add	r7, sp, #0
 8102c94:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8102c96:	687b      	ldr	r3, [r7, #4]
 8102c98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8102c9a:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8102c9e:	2b00      	cmp	r3, #0
 8102ca0:	d101      	bne.n	8102ca6 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8102ca2:	2301      	movs	r3, #1
 8102ca4:	e000      	b.n	8102ca8 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8102ca6:	2300      	movs	r3, #0
}
 8102ca8:	4618      	mov	r0, r3
 8102caa:	370c      	adds	r7, #12
 8102cac:	46bd      	mov	sp, r7
 8102cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102cb2:	4770      	bx	lr

08102cb4 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8102cb4:	b480      	push	{r7}
 8102cb6:	b087      	sub	sp, #28
 8102cb8:	af00      	add	r7, sp, #0
 8102cba:	60f8      	str	r0, [r7, #12]
 8102cbc:	60b9      	str	r1, [r7, #8]
 8102cbe:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8102cc0:	68fb      	ldr	r3, [r7, #12]
 8102cc2:	3314      	adds	r3, #20
 8102cc4:	461a      	mov	r2, r3
 8102cc6:	68bb      	ldr	r3, [r7, #8]
 8102cc8:	0e5b      	lsrs	r3, r3, #25
 8102cca:	009b      	lsls	r3, r3, #2
 8102ccc:	f003 0304 	and.w	r3, r3, #4
 8102cd0:	4413      	add	r3, r2
 8102cd2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8102cd4:	697b      	ldr	r3, [r7, #20]
 8102cd6:	681a      	ldr	r2, [r3, #0]
 8102cd8:	68bb      	ldr	r3, [r7, #8]
 8102cda:	0d1b      	lsrs	r3, r3, #20
 8102cdc:	f003 031f 	and.w	r3, r3, #31
 8102ce0:	2107      	movs	r1, #7
 8102ce2:	fa01 f303 	lsl.w	r3, r1, r3
 8102ce6:	43db      	mvns	r3, r3
 8102ce8:	401a      	ands	r2, r3
 8102cea:	68bb      	ldr	r3, [r7, #8]
 8102cec:	0d1b      	lsrs	r3, r3, #20
 8102cee:	f003 031f 	and.w	r3, r3, #31
 8102cf2:	6879      	ldr	r1, [r7, #4]
 8102cf4:	fa01 f303 	lsl.w	r3, r1, r3
 8102cf8:	431a      	orrs	r2, r3
 8102cfa:	697b      	ldr	r3, [r7, #20]
 8102cfc:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8102cfe:	bf00      	nop
 8102d00:	371c      	adds	r7, #28
 8102d02:	46bd      	mov	sp, r7
 8102d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102d08:	4770      	bx	lr
	...

08102d0c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8102d0c:	b480      	push	{r7}
 8102d0e:	b085      	sub	sp, #20
 8102d10:	af00      	add	r7, sp, #0
 8102d12:	60f8      	str	r0, [r7, #12]
 8102d14:	60b9      	str	r1, [r7, #8]
 8102d16:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8102d18:	68fb      	ldr	r3, [r7, #12]
 8102d1a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8102d1e:	68bb      	ldr	r3, [r7, #8]
 8102d20:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8102d24:	43db      	mvns	r3, r3
 8102d26:	401a      	ands	r2, r3
 8102d28:	687b      	ldr	r3, [r7, #4]
 8102d2a:	f003 0318 	and.w	r3, r3, #24
 8102d2e:	4908      	ldr	r1, [pc, #32]	; (8102d50 <LL_ADC_SetChannelSingleDiff+0x44>)
 8102d30:	40d9      	lsrs	r1, r3
 8102d32:	68bb      	ldr	r3, [r7, #8]
 8102d34:	400b      	ands	r3, r1
 8102d36:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8102d3a:	431a      	orrs	r2, r3
 8102d3c:	68fb      	ldr	r3, [r7, #12]
 8102d3e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 8102d42:	bf00      	nop
 8102d44:	3714      	adds	r7, #20
 8102d46:	46bd      	mov	sp, r7
 8102d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102d4c:	4770      	bx	lr
 8102d4e:	bf00      	nop
 8102d50:	000fffff 	.word	0x000fffff

08102d54 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8102d54:	b480      	push	{r7}
 8102d56:	b083      	sub	sp, #12
 8102d58:	af00      	add	r7, sp, #0
 8102d5a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8102d5c:	687b      	ldr	r3, [r7, #4]
 8102d5e:	689b      	ldr	r3, [r3, #8]
 8102d60:	f003 031f 	and.w	r3, r3, #31
}
 8102d64:	4618      	mov	r0, r3
 8102d66:	370c      	adds	r7, #12
 8102d68:	46bd      	mov	sp, r7
 8102d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102d6e:	4770      	bx	lr

08102d70 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8102d70:	b480      	push	{r7}
 8102d72:	b083      	sub	sp, #12
 8102d74:	af00      	add	r7, sp, #0
 8102d76:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8102d78:	687b      	ldr	r3, [r7, #4]
 8102d7a:	689b      	ldr	r3, [r3, #8]
 8102d7c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
}
 8102d80:	4618      	mov	r0, r3
 8102d82:	370c      	adds	r7, #12
 8102d84:	46bd      	mov	sp, r7
 8102d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102d8a:	4770      	bx	lr

08102d8c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8102d8c:	b480      	push	{r7}
 8102d8e:	b083      	sub	sp, #12
 8102d90:	af00      	add	r7, sp, #0
 8102d92:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8102d94:	687b      	ldr	r3, [r7, #4]
 8102d96:	689b      	ldr	r3, [r3, #8]
 8102d98:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8102d9c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8102da0:	687a      	ldr	r2, [r7, #4]
 8102da2:	6093      	str	r3, [r2, #8]
}
 8102da4:	bf00      	nop
 8102da6:	370c      	adds	r7, #12
 8102da8:	46bd      	mov	sp, r7
 8102daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102dae:	4770      	bx	lr

08102db0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8102db0:	b480      	push	{r7}
 8102db2:	b083      	sub	sp, #12
 8102db4:	af00      	add	r7, sp, #0
 8102db6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8102db8:	687b      	ldr	r3, [r7, #4]
 8102dba:	689b      	ldr	r3, [r3, #8]
 8102dbc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8102dc0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8102dc4:	d101      	bne.n	8102dca <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8102dc6:	2301      	movs	r3, #1
 8102dc8:	e000      	b.n	8102dcc <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8102dca:	2300      	movs	r3, #0
}
 8102dcc:	4618      	mov	r0, r3
 8102dce:	370c      	adds	r7, #12
 8102dd0:	46bd      	mov	sp, r7
 8102dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102dd6:	4770      	bx	lr

08102dd8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8102dd8:	b480      	push	{r7}
 8102dda:	b083      	sub	sp, #12
 8102ddc:	af00      	add	r7, sp, #0
 8102dde:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8102de0:	687b      	ldr	r3, [r7, #4]
 8102de2:	689b      	ldr	r3, [r3, #8]
 8102de4:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8102de8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8102dec:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8102df0:	687b      	ldr	r3, [r7, #4]
 8102df2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8102df4:	bf00      	nop
 8102df6:	370c      	adds	r7, #12
 8102df8:	46bd      	mov	sp, r7
 8102dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102dfe:	4770      	bx	lr

08102e00 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8102e00:	b480      	push	{r7}
 8102e02:	b083      	sub	sp, #12
 8102e04:	af00      	add	r7, sp, #0
 8102e06:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8102e08:	687b      	ldr	r3, [r7, #4]
 8102e0a:	689b      	ldr	r3, [r3, #8]
 8102e0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8102e10:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8102e14:	d101      	bne.n	8102e1a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8102e16:	2301      	movs	r3, #1
 8102e18:	e000      	b.n	8102e1c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8102e1a:	2300      	movs	r3, #0
}
 8102e1c:	4618      	mov	r0, r3
 8102e1e:	370c      	adds	r7, #12
 8102e20:	46bd      	mov	sp, r7
 8102e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102e26:	4770      	bx	lr

08102e28 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8102e28:	b480      	push	{r7}
 8102e2a:	b083      	sub	sp, #12
 8102e2c:	af00      	add	r7, sp, #0
 8102e2e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8102e30:	687b      	ldr	r3, [r7, #4]
 8102e32:	689b      	ldr	r3, [r3, #8]
 8102e34:	f003 0301 	and.w	r3, r3, #1
 8102e38:	2b01      	cmp	r3, #1
 8102e3a:	d101      	bne.n	8102e40 <LL_ADC_IsEnabled+0x18>
 8102e3c:	2301      	movs	r3, #1
 8102e3e:	e000      	b.n	8102e42 <LL_ADC_IsEnabled+0x1a>
 8102e40:	2300      	movs	r3, #0
}
 8102e42:	4618      	mov	r0, r3
 8102e44:	370c      	adds	r7, #12
 8102e46:	46bd      	mov	sp, r7
 8102e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102e4c:	4770      	bx	lr

08102e4e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8102e4e:	b480      	push	{r7}
 8102e50:	b083      	sub	sp, #12
 8102e52:	af00      	add	r7, sp, #0
 8102e54:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8102e56:	687b      	ldr	r3, [r7, #4]
 8102e58:	689b      	ldr	r3, [r3, #8]
 8102e5a:	f003 0304 	and.w	r3, r3, #4
 8102e5e:	2b04      	cmp	r3, #4
 8102e60:	d101      	bne.n	8102e66 <LL_ADC_REG_IsConversionOngoing+0x18>
 8102e62:	2301      	movs	r3, #1
 8102e64:	e000      	b.n	8102e68 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8102e66:	2300      	movs	r3, #0
}
 8102e68:	4618      	mov	r0, r3
 8102e6a:	370c      	adds	r7, #12
 8102e6c:	46bd      	mov	sp, r7
 8102e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102e72:	4770      	bx	lr

08102e74 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8102e74:	b480      	push	{r7}
 8102e76:	b083      	sub	sp, #12
 8102e78:	af00      	add	r7, sp, #0
 8102e7a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8102e7c:	687b      	ldr	r3, [r7, #4]
 8102e7e:	689b      	ldr	r3, [r3, #8]
 8102e80:	f003 0308 	and.w	r3, r3, #8
 8102e84:	2b08      	cmp	r3, #8
 8102e86:	d101      	bne.n	8102e8c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8102e88:	2301      	movs	r3, #1
 8102e8a:	e000      	b.n	8102e8e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8102e8c:	2300      	movs	r3, #0
}
 8102e8e:	4618      	mov	r0, r3
 8102e90:	370c      	adds	r7, #12
 8102e92:	46bd      	mov	sp, r7
 8102e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102e98:	4770      	bx	lr
	...

08102e9c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8102e9c:	b590      	push	{r4, r7, lr}
 8102e9e:	b089      	sub	sp, #36	; 0x24
 8102ea0:	af00      	add	r7, sp, #0
 8102ea2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8102ea4:	2300      	movs	r3, #0
 8102ea6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8102ea8:	2300      	movs	r3, #0
 8102eaa:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8102eac:	687b      	ldr	r3, [r7, #4]
 8102eae:	2b00      	cmp	r3, #0
 8102eb0:	d101      	bne.n	8102eb6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8102eb2:	2301      	movs	r3, #1
 8102eb4:	e18e      	b.n	81031d4 <HAL_ADC_Init+0x338>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8102eb6:	687b      	ldr	r3, [r7, #4]
 8102eb8:	68db      	ldr	r3, [r3, #12]
 8102eba:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8102ebc:	687b      	ldr	r3, [r7, #4]
 8102ebe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8102ec0:	2b00      	cmp	r3, #0
 8102ec2:	d109      	bne.n	8102ed8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8102ec4:	6878      	ldr	r0, [r7, #4]
 8102ec6:	f7fe f909 	bl	81010dc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8102eca:	687b      	ldr	r3, [r7, #4]
 8102ecc:	2200      	movs	r2, #0
 8102ece:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8102ed0:	687b      	ldr	r3, [r7, #4]
 8102ed2:	2200      	movs	r2, #0
 8102ed4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8102ed8:	687b      	ldr	r3, [r7, #4]
 8102eda:	681b      	ldr	r3, [r3, #0]
 8102edc:	4618      	mov	r0, r3
 8102ede:	f7ff ff67 	bl	8102db0 <LL_ADC_IsDeepPowerDownEnabled>
 8102ee2:	4603      	mov	r3, r0
 8102ee4:	2b00      	cmp	r3, #0
 8102ee6:	d004      	beq.n	8102ef2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8102ee8:	687b      	ldr	r3, [r7, #4]
 8102eea:	681b      	ldr	r3, [r3, #0]
 8102eec:	4618      	mov	r0, r3
 8102eee:	f7ff ff4d 	bl	8102d8c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8102ef2:	687b      	ldr	r3, [r7, #4]
 8102ef4:	681b      	ldr	r3, [r3, #0]
 8102ef6:	4618      	mov	r0, r3
 8102ef8:	f7ff ff82 	bl	8102e00 <LL_ADC_IsInternalRegulatorEnabled>
 8102efc:	4603      	mov	r3, r0
 8102efe:	2b00      	cmp	r3, #0
 8102f00:	d114      	bne.n	8102f2c <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8102f02:	687b      	ldr	r3, [r7, #4]
 8102f04:	681b      	ldr	r3, [r3, #0]
 8102f06:	4618      	mov	r0, r3
 8102f08:	f7ff ff66 	bl	8102dd8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8102f0c:	4b9b      	ldr	r3, [pc, #620]	; (810317c <HAL_ADC_Init+0x2e0>)
 8102f0e:	681b      	ldr	r3, [r3, #0]
 8102f10:	099b      	lsrs	r3, r3, #6
 8102f12:	4a9b      	ldr	r2, [pc, #620]	; (8103180 <HAL_ADC_Init+0x2e4>)
 8102f14:	fba2 2303 	umull	r2, r3, r2, r3
 8102f18:	099b      	lsrs	r3, r3, #6
 8102f1a:	3301      	adds	r3, #1
 8102f1c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8102f1e:	e002      	b.n	8102f26 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8102f20:	68bb      	ldr	r3, [r7, #8]
 8102f22:	3b01      	subs	r3, #1
 8102f24:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8102f26:	68bb      	ldr	r3, [r7, #8]
 8102f28:	2b00      	cmp	r3, #0
 8102f2a:	d1f9      	bne.n	8102f20 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8102f2c:	687b      	ldr	r3, [r7, #4]
 8102f2e:	681b      	ldr	r3, [r3, #0]
 8102f30:	4618      	mov	r0, r3
 8102f32:	f7ff ff65 	bl	8102e00 <LL_ADC_IsInternalRegulatorEnabled>
 8102f36:	4603      	mov	r3, r0
 8102f38:	2b00      	cmp	r3, #0
 8102f3a:	d10d      	bne.n	8102f58 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8102f3c:	687b      	ldr	r3, [r7, #4]
 8102f3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8102f40:	f043 0210 	orr.w	r2, r3, #16
 8102f44:	687b      	ldr	r3, [r7, #4]
 8102f46:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8102f48:	687b      	ldr	r3, [r7, #4]
 8102f4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8102f4c:	f043 0201 	orr.w	r2, r3, #1
 8102f50:	687b      	ldr	r3, [r7, #4]
 8102f52:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8102f54:	2301      	movs	r3, #1
 8102f56:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8102f58:	687b      	ldr	r3, [r7, #4]
 8102f5a:	681b      	ldr	r3, [r3, #0]
 8102f5c:	4618      	mov	r0, r3
 8102f5e:	f7ff ff76 	bl	8102e4e <LL_ADC_REG_IsConversionOngoing>
 8102f62:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8102f64:	687b      	ldr	r3, [r7, #4]
 8102f66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8102f68:	f003 0310 	and.w	r3, r3, #16
 8102f6c:	2b00      	cmp	r3, #0
 8102f6e:	f040 8128 	bne.w	81031c2 <HAL_ADC_Init+0x326>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8102f72:	697b      	ldr	r3, [r7, #20]
 8102f74:	2b00      	cmp	r3, #0
 8102f76:	f040 8124 	bne.w	81031c2 <HAL_ADC_Init+0x326>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8102f7a:	687b      	ldr	r3, [r7, #4]
 8102f7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8102f7e:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8102f82:	f043 0202 	orr.w	r2, r3, #2
 8102f86:	687b      	ldr	r3, [r7, #4]
 8102f88:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8102f8a:	687b      	ldr	r3, [r7, #4]
 8102f8c:	681b      	ldr	r3, [r3, #0]
 8102f8e:	4618      	mov	r0, r3
 8102f90:	f7ff ff4a 	bl	8102e28 <LL_ADC_IsEnabled>
 8102f94:	4603      	mov	r3, r0
 8102f96:	2b00      	cmp	r3, #0
 8102f98:	d136      	bne.n	8103008 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8102f9a:	687b      	ldr	r3, [r7, #4]
 8102f9c:	681b      	ldr	r3, [r3, #0]
 8102f9e:	4a79      	ldr	r2, [pc, #484]	; (8103184 <HAL_ADC_Init+0x2e8>)
 8102fa0:	4293      	cmp	r3, r2
 8102fa2:	d004      	beq.n	8102fae <HAL_ADC_Init+0x112>
 8102fa4:	687b      	ldr	r3, [r7, #4]
 8102fa6:	681b      	ldr	r3, [r3, #0]
 8102fa8:	4a77      	ldr	r2, [pc, #476]	; (8103188 <HAL_ADC_Init+0x2ec>)
 8102faa:	4293      	cmp	r3, r2
 8102fac:	d10e      	bne.n	8102fcc <HAL_ADC_Init+0x130>
 8102fae:	4875      	ldr	r0, [pc, #468]	; (8103184 <HAL_ADC_Init+0x2e8>)
 8102fb0:	f7ff ff3a 	bl	8102e28 <LL_ADC_IsEnabled>
 8102fb4:	4604      	mov	r4, r0
 8102fb6:	4874      	ldr	r0, [pc, #464]	; (8103188 <HAL_ADC_Init+0x2ec>)
 8102fb8:	f7ff ff36 	bl	8102e28 <LL_ADC_IsEnabled>
 8102fbc:	4603      	mov	r3, r0
 8102fbe:	4323      	orrs	r3, r4
 8102fc0:	2b00      	cmp	r3, #0
 8102fc2:	bf0c      	ite	eq
 8102fc4:	2301      	moveq	r3, #1
 8102fc6:	2300      	movne	r3, #0
 8102fc8:	b2db      	uxtb	r3, r3
 8102fca:	e008      	b.n	8102fde <HAL_ADC_Init+0x142>
 8102fcc:	486f      	ldr	r0, [pc, #444]	; (810318c <HAL_ADC_Init+0x2f0>)
 8102fce:	f7ff ff2b 	bl	8102e28 <LL_ADC_IsEnabled>
 8102fd2:	4603      	mov	r3, r0
 8102fd4:	2b00      	cmp	r3, #0
 8102fd6:	bf0c      	ite	eq
 8102fd8:	2301      	moveq	r3, #1
 8102fda:	2300      	movne	r3, #0
 8102fdc:	b2db      	uxtb	r3, r3
 8102fde:	2b00      	cmp	r3, #0
 8102fe0:	d012      	beq.n	8103008 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8102fe2:	687b      	ldr	r3, [r7, #4]
 8102fe4:	681b      	ldr	r3, [r3, #0]
 8102fe6:	4a67      	ldr	r2, [pc, #412]	; (8103184 <HAL_ADC_Init+0x2e8>)
 8102fe8:	4293      	cmp	r3, r2
 8102fea:	d004      	beq.n	8102ff6 <HAL_ADC_Init+0x15a>
 8102fec:	687b      	ldr	r3, [r7, #4]
 8102fee:	681b      	ldr	r3, [r3, #0]
 8102ff0:	4a65      	ldr	r2, [pc, #404]	; (8103188 <HAL_ADC_Init+0x2ec>)
 8102ff2:	4293      	cmp	r3, r2
 8102ff4:	d101      	bne.n	8102ffa <HAL_ADC_Init+0x15e>
 8102ff6:	4a66      	ldr	r2, [pc, #408]	; (8103190 <HAL_ADC_Init+0x2f4>)
 8102ff8:	e000      	b.n	8102ffc <HAL_ADC_Init+0x160>
 8102ffa:	4a66      	ldr	r2, [pc, #408]	; (8103194 <HAL_ADC_Init+0x2f8>)
 8102ffc:	687b      	ldr	r3, [r7, #4]
 8102ffe:	685b      	ldr	r3, [r3, #4]
 8103000:	4619      	mov	r1, r3
 8103002:	4610      	mov	r0, r2
 8103004:	f7ff fd7c 	bl	8102b00 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8103008:	f7ff fd6e 	bl	8102ae8 <HAL_GetREVID>
 810300c:	4603      	mov	r3, r0
 810300e:	f241 0203 	movw	r2, #4099	; 0x1003
 8103012:	4293      	cmp	r3, r2
 8103014:	d914      	bls.n	8103040 <HAL_ADC_Init+0x1a4>
 8103016:	687b      	ldr	r3, [r7, #4]
 8103018:	689b      	ldr	r3, [r3, #8]
 810301a:	2b10      	cmp	r3, #16
 810301c:	d110      	bne.n	8103040 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 810301e:	687b      	ldr	r3, [r7, #4]
 8103020:	7d5b      	ldrb	r3, [r3, #21]
 8103022:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8103024:	687b      	ldr	r3, [r7, #4]
 8103026:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8103028:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 810302a:	687b      	ldr	r3, [r7, #4]
 810302c:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 810302e:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8103030:	687b      	ldr	r3, [r7, #4]
 8103032:	7f1b      	ldrb	r3, [r3, #28]
 8103034:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8103036:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8103038:	f043 030c 	orr.w	r3, r3, #12
 810303c:	61bb      	str	r3, [r7, #24]
 810303e:	e00d      	b.n	810305c <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8103040:	687b      	ldr	r3, [r7, #4]
 8103042:	7d5b      	ldrb	r3, [r3, #21]
 8103044:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8103046:	687b      	ldr	r3, [r7, #4]
 8103048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 810304a:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 810304c:	687b      	ldr	r3, [r7, #4]
 810304e:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8103050:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8103052:	687b      	ldr	r3, [r7, #4]
 8103054:	7f1b      	ldrb	r3, [r3, #28]
 8103056:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8103058:	4313      	orrs	r3, r2
 810305a:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 810305c:	687b      	ldr	r3, [r7, #4]
 810305e:	7f1b      	ldrb	r3, [r3, #28]
 8103060:	2b01      	cmp	r3, #1
 8103062:	d106      	bne.n	8103072 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8103064:	687b      	ldr	r3, [r7, #4]
 8103066:	6a1b      	ldr	r3, [r3, #32]
 8103068:	3b01      	subs	r3, #1
 810306a:	045b      	lsls	r3, r3, #17
 810306c:	69ba      	ldr	r2, [r7, #24]
 810306e:	4313      	orrs	r3, r2
 8103070:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8103072:	687b      	ldr	r3, [r7, #4]
 8103074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8103076:	2b00      	cmp	r3, #0
 8103078:	d009      	beq.n	810308e <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 810307a:	687b      	ldr	r3, [r7, #4]
 810307c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810307e:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8103082:	687b      	ldr	r3, [r7, #4]
 8103084:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8103086:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8103088:	69ba      	ldr	r2, [r7, #24]
 810308a:	4313      	orrs	r3, r2
 810308c:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 810308e:	687b      	ldr	r3, [r7, #4]
 8103090:	681b      	ldr	r3, [r3, #0]
 8103092:	68da      	ldr	r2, [r3, #12]
 8103094:	4b40      	ldr	r3, [pc, #256]	; (8103198 <HAL_ADC_Init+0x2fc>)
 8103096:	4013      	ands	r3, r2
 8103098:	687a      	ldr	r2, [r7, #4]
 810309a:	6812      	ldr	r2, [r2, #0]
 810309c:	69b9      	ldr	r1, [r7, #24]
 810309e:	430b      	orrs	r3, r1
 81030a0:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 81030a2:	687b      	ldr	r3, [r7, #4]
 81030a4:	681b      	ldr	r3, [r3, #0]
 81030a6:	4618      	mov	r0, r3
 81030a8:	f7ff fed1 	bl	8102e4e <LL_ADC_REG_IsConversionOngoing>
 81030ac:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 81030ae:	687b      	ldr	r3, [r7, #4]
 81030b0:	681b      	ldr	r3, [r3, #0]
 81030b2:	4618      	mov	r0, r3
 81030b4:	f7ff fede 	bl	8102e74 <LL_ADC_INJ_IsConversionOngoing>
 81030b8:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 81030ba:	693b      	ldr	r3, [r7, #16]
 81030bc:	2b00      	cmp	r3, #0
 81030be:	d14c      	bne.n	810315a <HAL_ADC_Init+0x2be>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 81030c0:	68fb      	ldr	r3, [r7, #12]
 81030c2:	2b00      	cmp	r3, #0
 81030c4:	d149      	bne.n	810315a <HAL_ADC_Init+0x2be>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 81030c6:	687b      	ldr	r3, [r7, #4]
 81030c8:	7d1b      	ldrb	r3, [r3, #20]
 81030ca:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 81030cc:	687b      	ldr	r3, [r7, #4]
 81030ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 81030d0:	4313      	orrs	r3, r2
 81030d2:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 81030d4:	687b      	ldr	r3, [r7, #4]
 81030d6:	681b      	ldr	r3, [r3, #0]
 81030d8:	68db      	ldr	r3, [r3, #12]
 81030da:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 81030de:	f023 0303 	bic.w	r3, r3, #3
 81030e2:	687a      	ldr	r2, [r7, #4]
 81030e4:	6812      	ldr	r2, [r2, #0]
 81030e6:	69b9      	ldr	r1, [r7, #24]
 81030e8:	430b      	orrs	r3, r1
 81030ea:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 81030ec:	687b      	ldr	r3, [r7, #4]
 81030ee:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 81030f2:	2b01      	cmp	r3, #1
 81030f4:	d11b      	bne.n	810312e <HAL_ADC_Init+0x292>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 81030f6:	687b      	ldr	r3, [r7, #4]
 81030f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81030fa:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 81030fc:	687b      	ldr	r3, [r7, #4]
 81030fe:	681b      	ldr	r3, [r3, #0]
 8103100:	691a      	ldr	r2, [r3, #16]
 8103102:	4b26      	ldr	r3, [pc, #152]	; (810319c <HAL_ADC_Init+0x300>)
 8103104:	4013      	ands	r3, r2
 8103106:	687a      	ldr	r2, [r7, #4]
 8103108:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 810310a:	3a01      	subs	r2, #1
 810310c:	0411      	lsls	r1, r2, #16
 810310e:	687a      	ldr	r2, [r7, #4]
 8103110:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8103112:	4311      	orrs	r1, r2
 8103114:	687a      	ldr	r2, [r7, #4]
 8103116:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8103118:	4311      	orrs	r1, r2
 810311a:	687a      	ldr	r2, [r7, #4]
 810311c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 810311e:	430a      	orrs	r2, r1
 8103120:	431a      	orrs	r2, r3
 8103122:	687b      	ldr	r3, [r7, #4]
 8103124:	681b      	ldr	r3, [r3, #0]
 8103126:	f042 0201 	orr.w	r2, r2, #1
 810312a:	611a      	str	r2, [r3, #16]
 810312c:	e007      	b.n	810313e <HAL_ADC_Init+0x2a2>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 810312e:	687b      	ldr	r3, [r7, #4]
 8103130:	681b      	ldr	r3, [r3, #0]
 8103132:	691a      	ldr	r2, [r3, #16]
 8103134:	687b      	ldr	r3, [r7, #4]
 8103136:	681b      	ldr	r3, [r3, #0]
 8103138:	f022 0201 	bic.w	r2, r2, #1
 810313c:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 810313e:	687b      	ldr	r3, [r7, #4]
 8103140:	681b      	ldr	r3, [r3, #0]
 8103142:	691b      	ldr	r3, [r3, #16]
 8103144:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8103148:	687b      	ldr	r3, [r7, #4]
 810314a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 810314c:	687b      	ldr	r3, [r7, #4]
 810314e:	681b      	ldr	r3, [r3, #0]
 8103150:	430a      	orrs	r2, r1
 8103152:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8103154:	6878      	ldr	r0, [r7, #4]
 8103156:	f000 fde9 	bl	8103d2c <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 810315a:	687b      	ldr	r3, [r7, #4]
 810315c:	68db      	ldr	r3, [r3, #12]
 810315e:	2b01      	cmp	r3, #1
 8103160:	d11e      	bne.n	81031a0 <HAL_ADC_Init+0x304>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8103162:	687b      	ldr	r3, [r7, #4]
 8103164:	681b      	ldr	r3, [r3, #0]
 8103166:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8103168:	f023 010f 	bic.w	r1, r3, #15
 810316c:	687b      	ldr	r3, [r7, #4]
 810316e:	699b      	ldr	r3, [r3, #24]
 8103170:	1e5a      	subs	r2, r3, #1
 8103172:	687b      	ldr	r3, [r7, #4]
 8103174:	681b      	ldr	r3, [r3, #0]
 8103176:	430a      	orrs	r2, r1
 8103178:	631a      	str	r2, [r3, #48]	; 0x30
 810317a:	e019      	b.n	81031b0 <HAL_ADC_Init+0x314>
 810317c:	10000000 	.word	0x10000000
 8103180:	053e2d63 	.word	0x053e2d63
 8103184:	40022000 	.word	0x40022000
 8103188:	40022100 	.word	0x40022100
 810318c:	58026000 	.word	0x58026000
 8103190:	40022300 	.word	0x40022300
 8103194:	58026300 	.word	0x58026300
 8103198:	fff0c003 	.word	0xfff0c003
 810319c:	fc00f81e 	.word	0xfc00f81e
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 81031a0:	687b      	ldr	r3, [r7, #4]
 81031a2:	681b      	ldr	r3, [r3, #0]
 81031a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 81031a6:	687b      	ldr	r3, [r7, #4]
 81031a8:	681b      	ldr	r3, [r3, #0]
 81031aa:	f022 020f 	bic.w	r2, r2, #15
 81031ae:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 81031b0:	687b      	ldr	r3, [r7, #4]
 81031b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81031b4:	f023 0303 	bic.w	r3, r3, #3
 81031b8:	f043 0201 	orr.w	r2, r3, #1
 81031bc:	687b      	ldr	r3, [r7, #4]
 81031be:	655a      	str	r2, [r3, #84]	; 0x54
 81031c0:	e007      	b.n	81031d2 <HAL_ADC_Init+0x336>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 81031c2:	687b      	ldr	r3, [r7, #4]
 81031c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81031c6:	f043 0210 	orr.w	r2, r3, #16
 81031ca:	687b      	ldr	r3, [r7, #4]
 81031cc:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 81031ce:	2301      	movs	r3, #1
 81031d0:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 81031d2:	7ffb      	ldrb	r3, [r7, #31]
}
 81031d4:	4618      	mov	r0, r3
 81031d6:	3724      	adds	r7, #36	; 0x24
 81031d8:	46bd      	mov	sp, r7
 81031da:	bd90      	pop	{r4, r7, pc}

081031dc <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 81031dc:	b580      	push	{r7, lr}
 81031de:	b08a      	sub	sp, #40	; 0x28
 81031e0:	af00      	add	r7, sp, #0
 81031e2:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 81031e4:	2300      	movs	r3, #0
 81031e6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 81031e8:	687b      	ldr	r3, [r7, #4]
 81031ea:	681b      	ldr	r3, [r3, #0]
 81031ec:	681b      	ldr	r3, [r3, #0]
 81031ee:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 81031f0:	687b      	ldr	r3, [r7, #4]
 81031f2:	681b      	ldr	r3, [r3, #0]
 81031f4:	685b      	ldr	r3, [r3, #4]
 81031f6:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 81031f8:	687b      	ldr	r3, [r7, #4]
 81031fa:	681b      	ldr	r3, [r3, #0]
 81031fc:	4a87      	ldr	r2, [pc, #540]	; (810341c <HAL_ADC_IRQHandler+0x240>)
 81031fe:	4293      	cmp	r3, r2
 8103200:	d004      	beq.n	810320c <HAL_ADC_IRQHandler+0x30>
 8103202:	687b      	ldr	r3, [r7, #4]
 8103204:	681b      	ldr	r3, [r3, #0]
 8103206:	4a86      	ldr	r2, [pc, #536]	; (8103420 <HAL_ADC_IRQHandler+0x244>)
 8103208:	4293      	cmp	r3, r2
 810320a:	d101      	bne.n	8103210 <HAL_ADC_IRQHandler+0x34>
 810320c:	4b85      	ldr	r3, [pc, #532]	; (8103424 <HAL_ADC_IRQHandler+0x248>)
 810320e:	e000      	b.n	8103212 <HAL_ADC_IRQHandler+0x36>
 8103210:	4b85      	ldr	r3, [pc, #532]	; (8103428 <HAL_ADC_IRQHandler+0x24c>)
 8103212:	4618      	mov	r0, r3
 8103214:	f7ff fd9e 	bl	8102d54 <LL_ADC_GetMultimode>
 8103218:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 810321a:	69fb      	ldr	r3, [r7, #28]
 810321c:	f003 0302 	and.w	r3, r3, #2
 8103220:	2b00      	cmp	r3, #0
 8103222:	d017      	beq.n	8103254 <HAL_ADC_IRQHandler+0x78>
 8103224:	69bb      	ldr	r3, [r7, #24]
 8103226:	f003 0302 	and.w	r3, r3, #2
 810322a:	2b00      	cmp	r3, #0
 810322c:	d012      	beq.n	8103254 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 810322e:	687b      	ldr	r3, [r7, #4]
 8103230:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103232:	f003 0310 	and.w	r3, r3, #16
 8103236:	2b00      	cmp	r3, #0
 8103238:	d105      	bne.n	8103246 <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 810323a:	687b      	ldr	r3, [r7, #4]
 810323c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810323e:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8103242:	687b      	ldr	r3, [r7, #4]
 8103244:	655a      	str	r2, [r3, #84]	; 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8103246:	6878      	ldr	r0, [r7, #4]
 8103248:	f000 fec8 	bl	8103fdc <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 810324c:	687b      	ldr	r3, [r7, #4]
 810324e:	681b      	ldr	r3, [r3, #0]
 8103250:	2202      	movs	r2, #2
 8103252:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8103254:	69fb      	ldr	r3, [r7, #28]
 8103256:	f003 0304 	and.w	r3, r3, #4
 810325a:	2b00      	cmp	r3, #0
 810325c:	d004      	beq.n	8103268 <HAL_ADC_IRQHandler+0x8c>
 810325e:	69bb      	ldr	r3, [r7, #24]
 8103260:	f003 0304 	and.w	r3, r3, #4
 8103264:	2b00      	cmp	r3, #0
 8103266:	d10a      	bne.n	810327e <HAL_ADC_IRQHandler+0xa2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8103268:	69fb      	ldr	r3, [r7, #28]
 810326a:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 810326e:	2b00      	cmp	r3, #0
 8103270:	f000 8083 	beq.w	810337a <HAL_ADC_IRQHandler+0x19e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8103274:	69bb      	ldr	r3, [r7, #24]
 8103276:	f003 0308 	and.w	r3, r3, #8
 810327a:	2b00      	cmp	r3, #0
 810327c:	d07d      	beq.n	810337a <HAL_ADC_IRQHandler+0x19e>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 810327e:	687b      	ldr	r3, [r7, #4]
 8103280:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103282:	f003 0310 	and.w	r3, r3, #16
 8103286:	2b00      	cmp	r3, #0
 8103288:	d105      	bne.n	8103296 <HAL_ADC_IRQHandler+0xba>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 810328a:	687b      	ldr	r3, [r7, #4]
 810328c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810328e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8103292:	687b      	ldr	r3, [r7, #4]
 8103294:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8103296:	687b      	ldr	r3, [r7, #4]
 8103298:	681b      	ldr	r3, [r3, #0]
 810329a:	4618      	mov	r0, r3
 810329c:	f7ff fcb8 	bl	8102c10 <LL_ADC_REG_IsTriggerSourceSWStart>
 81032a0:	4603      	mov	r3, r0
 81032a2:	2b00      	cmp	r3, #0
 81032a4:	d062      	beq.n	810336c <HAL_ADC_IRQHandler+0x190>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 81032a6:	687b      	ldr	r3, [r7, #4]
 81032a8:	681b      	ldr	r3, [r3, #0]
 81032aa:	4a5d      	ldr	r2, [pc, #372]	; (8103420 <HAL_ADC_IRQHandler+0x244>)
 81032ac:	4293      	cmp	r3, r2
 81032ae:	d002      	beq.n	81032b6 <HAL_ADC_IRQHandler+0xda>
 81032b0:	687b      	ldr	r3, [r7, #4]
 81032b2:	681b      	ldr	r3, [r3, #0]
 81032b4:	e000      	b.n	81032b8 <HAL_ADC_IRQHandler+0xdc>
 81032b6:	4b59      	ldr	r3, [pc, #356]	; (810341c <HAL_ADC_IRQHandler+0x240>)
 81032b8:	687a      	ldr	r2, [r7, #4]
 81032ba:	6812      	ldr	r2, [r2, #0]
 81032bc:	4293      	cmp	r3, r2
 81032be:	d008      	beq.n	81032d2 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 81032c0:	697b      	ldr	r3, [r7, #20]
 81032c2:	2b00      	cmp	r3, #0
 81032c4:	d005      	beq.n	81032d2 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 81032c6:	697b      	ldr	r3, [r7, #20]
 81032c8:	2b05      	cmp	r3, #5
 81032ca:	d002      	beq.n	81032d2 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 81032cc:	697b      	ldr	r3, [r7, #20]
 81032ce:	2b09      	cmp	r3, #9
 81032d0:	d104      	bne.n	81032dc <HAL_ADC_IRQHandler+0x100>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 81032d2:	687b      	ldr	r3, [r7, #4]
 81032d4:	681b      	ldr	r3, [r3, #0]
 81032d6:	68db      	ldr	r3, [r3, #12]
 81032d8:	623b      	str	r3, [r7, #32]
 81032da:	e00c      	b.n	81032f6 <HAL_ADC_IRQHandler+0x11a>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 81032dc:	687b      	ldr	r3, [r7, #4]
 81032de:	681b      	ldr	r3, [r3, #0]
 81032e0:	4a4f      	ldr	r2, [pc, #316]	; (8103420 <HAL_ADC_IRQHandler+0x244>)
 81032e2:	4293      	cmp	r3, r2
 81032e4:	d002      	beq.n	81032ec <HAL_ADC_IRQHandler+0x110>
 81032e6:	687b      	ldr	r3, [r7, #4]
 81032e8:	681b      	ldr	r3, [r3, #0]
 81032ea:	e000      	b.n	81032ee <HAL_ADC_IRQHandler+0x112>
 81032ec:	4b4b      	ldr	r3, [pc, #300]	; (810341c <HAL_ADC_IRQHandler+0x240>)
 81032ee:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 81032f0:	693b      	ldr	r3, [r7, #16]
 81032f2:	68db      	ldr	r3, [r3, #12]
 81032f4:	623b      	str	r3, [r7, #32]
      }

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 81032f6:	6a3b      	ldr	r3, [r7, #32]
 81032f8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 81032fc:	2b00      	cmp	r3, #0
 81032fe:	d135      	bne.n	810336c <HAL_ADC_IRQHandler+0x190>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8103300:	687b      	ldr	r3, [r7, #4]
 8103302:	681b      	ldr	r3, [r3, #0]
 8103304:	681b      	ldr	r3, [r3, #0]
 8103306:	f003 0308 	and.w	r3, r3, #8
 810330a:	2b08      	cmp	r3, #8
 810330c:	d12e      	bne.n	810336c <HAL_ADC_IRQHandler+0x190>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 810330e:	687b      	ldr	r3, [r7, #4]
 8103310:	681b      	ldr	r3, [r3, #0]
 8103312:	4618      	mov	r0, r3
 8103314:	f7ff fd9b 	bl	8102e4e <LL_ADC_REG_IsConversionOngoing>
 8103318:	4603      	mov	r3, r0
 810331a:	2b00      	cmp	r3, #0
 810331c:	d11a      	bne.n	8103354 <HAL_ADC_IRQHandler+0x178>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 810331e:	687b      	ldr	r3, [r7, #4]
 8103320:	681b      	ldr	r3, [r3, #0]
 8103322:	685a      	ldr	r2, [r3, #4]
 8103324:	687b      	ldr	r3, [r7, #4]
 8103326:	681b      	ldr	r3, [r3, #0]
 8103328:	f022 020c 	bic.w	r2, r2, #12
 810332c:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 810332e:	687b      	ldr	r3, [r7, #4]
 8103330:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103332:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8103336:	687b      	ldr	r3, [r7, #4]
 8103338:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 810333a:	687b      	ldr	r3, [r7, #4]
 810333c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810333e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8103342:	2b00      	cmp	r3, #0
 8103344:	d112      	bne.n	810336c <HAL_ADC_IRQHandler+0x190>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8103346:	687b      	ldr	r3, [r7, #4]
 8103348:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810334a:	f043 0201 	orr.w	r2, r3, #1
 810334e:	687b      	ldr	r3, [r7, #4]
 8103350:	655a      	str	r2, [r3, #84]	; 0x54
 8103352:	e00b      	b.n	810336c <HAL_ADC_IRQHandler+0x190>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8103354:	687b      	ldr	r3, [r7, #4]
 8103356:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103358:	f043 0210 	orr.w	r2, r3, #16
 810335c:	687b      	ldr	r3, [r7, #4]
 810335e:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8103360:	687b      	ldr	r3, [r7, #4]
 8103362:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8103364:	f043 0201 	orr.w	r2, r3, #1
 8103368:	687b      	ldr	r3, [r7, #4]
 810336a:	659a      	str	r2, [r3, #88]	; 0x58
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 810336c:	6878      	ldr	r0, [r7, #4]
 810336e:	f000 f96f 	bl	8103650 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8103372:	687b      	ldr	r3, [r7, #4]
 8103374:	681b      	ldr	r3, [r3, #0]
 8103376:	220c      	movs	r2, #12
 8103378:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 810337a:	69fb      	ldr	r3, [r7, #28]
 810337c:	f003 0320 	and.w	r3, r3, #32
 8103380:	2b00      	cmp	r3, #0
 8103382:	d004      	beq.n	810338e <HAL_ADC_IRQHandler+0x1b2>
 8103384:	69bb      	ldr	r3, [r7, #24]
 8103386:	f003 0320 	and.w	r3, r3, #32
 810338a:	2b00      	cmp	r3, #0
 810338c:	d10b      	bne.n	81033a6 <HAL_ADC_IRQHandler+0x1ca>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 810338e:	69fb      	ldr	r3, [r7, #28]
 8103390:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8103394:	2b00      	cmp	r3, #0
 8103396:	f000 80a0 	beq.w	81034da <HAL_ADC_IRQHandler+0x2fe>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 810339a:	69bb      	ldr	r3, [r7, #24]
 810339c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 81033a0:	2b00      	cmp	r3, #0
 81033a2:	f000 809a 	beq.w	81034da <HAL_ADC_IRQHandler+0x2fe>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 81033a6:	687b      	ldr	r3, [r7, #4]
 81033a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81033aa:	f003 0310 	and.w	r3, r3, #16
 81033ae:	2b00      	cmp	r3, #0
 81033b0:	d105      	bne.n	81033be <HAL_ADC_IRQHandler+0x1e2>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 81033b2:	687b      	ldr	r3, [r7, #4]
 81033b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81033b6:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 81033ba:	687b      	ldr	r3, [r7, #4]
 81033bc:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 81033be:	687b      	ldr	r3, [r7, #4]
 81033c0:	681b      	ldr	r3, [r3, #0]
 81033c2:	4618      	mov	r0, r3
 81033c4:	f7ff fc63 	bl	8102c8e <LL_ADC_INJ_IsTriggerSourceSWStart>
 81033c8:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 81033ca:	687b      	ldr	r3, [r7, #4]
 81033cc:	681b      	ldr	r3, [r3, #0]
 81033ce:	4618      	mov	r0, r3
 81033d0:	f7ff fc1e 	bl	8102c10 <LL_ADC_REG_IsTriggerSourceSWStart>
 81033d4:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 81033d6:	687b      	ldr	r3, [r7, #4]
 81033d8:	681b      	ldr	r3, [r3, #0]
 81033da:	4a11      	ldr	r2, [pc, #68]	; (8103420 <HAL_ADC_IRQHandler+0x244>)
 81033dc:	4293      	cmp	r3, r2
 81033de:	d002      	beq.n	81033e6 <HAL_ADC_IRQHandler+0x20a>
 81033e0:	687b      	ldr	r3, [r7, #4]
 81033e2:	681b      	ldr	r3, [r3, #0]
 81033e4:	e000      	b.n	81033e8 <HAL_ADC_IRQHandler+0x20c>
 81033e6:	4b0d      	ldr	r3, [pc, #52]	; (810341c <HAL_ADC_IRQHandler+0x240>)
 81033e8:	687a      	ldr	r2, [r7, #4]
 81033ea:	6812      	ldr	r2, [r2, #0]
 81033ec:	4293      	cmp	r3, r2
 81033ee:	d008      	beq.n	8103402 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 81033f0:	697b      	ldr	r3, [r7, #20]
 81033f2:	2b00      	cmp	r3, #0
 81033f4:	d005      	beq.n	8103402 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 81033f6:	697b      	ldr	r3, [r7, #20]
 81033f8:	2b06      	cmp	r3, #6
 81033fa:	d002      	beq.n	8103402 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 81033fc:	697b      	ldr	r3, [r7, #20]
 81033fe:	2b07      	cmp	r3, #7
 8103400:	d104      	bne.n	810340c <HAL_ADC_IRQHandler+0x230>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8103402:	687b      	ldr	r3, [r7, #4]
 8103404:	681b      	ldr	r3, [r3, #0]
 8103406:	68db      	ldr	r3, [r3, #12]
 8103408:	623b      	str	r3, [r7, #32]
 810340a:	e014      	b.n	8103436 <HAL_ADC_IRQHandler+0x25a>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 810340c:	687b      	ldr	r3, [r7, #4]
 810340e:	681b      	ldr	r3, [r3, #0]
 8103410:	4a03      	ldr	r2, [pc, #12]	; (8103420 <HAL_ADC_IRQHandler+0x244>)
 8103412:	4293      	cmp	r3, r2
 8103414:	d00a      	beq.n	810342c <HAL_ADC_IRQHandler+0x250>
 8103416:	687b      	ldr	r3, [r7, #4]
 8103418:	681b      	ldr	r3, [r3, #0]
 810341a:	e008      	b.n	810342e <HAL_ADC_IRQHandler+0x252>
 810341c:	40022000 	.word	0x40022000
 8103420:	40022100 	.word	0x40022100
 8103424:	40022300 	.word	0x40022300
 8103428:	58026300 	.word	0x58026300
 810342c:	4b84      	ldr	r3, [pc, #528]	; (8103640 <HAL_ADC_IRQHandler+0x464>)
 810342e:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8103430:	693b      	ldr	r3, [r7, #16]
 8103432:	68db      	ldr	r3, [r3, #12]
 8103434:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if ((tmp_adc_inj_is_trigger_source_sw_start != 0UL)            ||
 8103436:	68fb      	ldr	r3, [r7, #12]
 8103438:	2b00      	cmp	r3, #0
 810343a:	d10c      	bne.n	8103456 <HAL_ADC_IRQHandler+0x27a>
        ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL)      &&
 810343c:	6a3b      	ldr	r3, [r7, #32]
 810343e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    if ((tmp_adc_inj_is_trigger_source_sw_start != 0UL)            ||
 8103442:	2b00      	cmp	r3, #0
 8103444:	d142      	bne.n	81034cc <HAL_ADC_IRQHandler+0x2f0>
        ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL)      &&
 8103446:	68bb      	ldr	r3, [r7, #8]
 8103448:	2b00      	cmp	r3, #0
 810344a:	d03f      	beq.n	81034cc <HAL_ADC_IRQHandler+0x2f0>
         ((tmp_adc_reg_is_trigger_source_sw_start != 0UL)  &&
          (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL))))
 810344c:	6a3b      	ldr	r3, [r7, #32]
 810344e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
         ((tmp_adc_reg_is_trigger_source_sw_start != 0UL)  &&
 8103452:	2b00      	cmp	r3, #0
 8103454:	d13a      	bne.n	81034cc <HAL_ADC_IRQHandler+0x2f0>
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8103456:	687b      	ldr	r3, [r7, #4]
 8103458:	681b      	ldr	r3, [r3, #0]
 810345a:	681b      	ldr	r3, [r3, #0]
 810345c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8103460:	2b40      	cmp	r3, #64	; 0x40
 8103462:	d133      	bne.n	81034cc <HAL_ADC_IRQHandler+0x2f0>
        /* when the last context has been fully processed, JSQR is reset      */
        /* by the hardware. Even if no injected conversion is planned to come */
        /* (queue empty, triggers are ignored), it can start again            */
        /* immediately after setting a new context (JADSTART is still set).   */
        /* Therefore, state of HAL ADC injected group is kept to busy.        */
        if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8103464:	6a3b      	ldr	r3, [r7, #32]
 8103466:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 810346a:	2b00      	cmp	r3, #0
 810346c:	d12e      	bne.n	81034cc <HAL_ADC_IRQHandler+0x2f0>
        {
          /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
          /* JADSTART==0 (no conversion on going)                             */
          if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 810346e:	687b      	ldr	r3, [r7, #4]
 8103470:	681b      	ldr	r3, [r3, #0]
 8103472:	4618      	mov	r0, r3
 8103474:	f7ff fcfe 	bl	8102e74 <LL_ADC_INJ_IsConversionOngoing>
 8103478:	4603      	mov	r3, r0
 810347a:	2b00      	cmp	r3, #0
 810347c:	d11a      	bne.n	81034b4 <HAL_ADC_IRQHandler+0x2d8>
          {
            /* Disable ADC end of sequence conversion interrupt  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 810347e:	687b      	ldr	r3, [r7, #4]
 8103480:	681b      	ldr	r3, [r3, #0]
 8103482:	685a      	ldr	r2, [r3, #4]
 8103484:	687b      	ldr	r3, [r7, #4]
 8103486:	681b      	ldr	r3, [r3, #0]
 8103488:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 810348c:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 810348e:	687b      	ldr	r3, [r7, #4]
 8103490:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103492:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8103496:	687b      	ldr	r3, [r7, #4]
 8103498:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 810349a:	687b      	ldr	r3, [r7, #4]
 810349c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810349e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 81034a2:	2b00      	cmp	r3, #0
 81034a4:	d112      	bne.n	81034cc <HAL_ADC_IRQHandler+0x2f0>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 81034a6:	687b      	ldr	r3, [r7, #4]
 81034a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81034aa:	f043 0201 	orr.w	r2, r3, #1
 81034ae:	687b      	ldr	r3, [r7, #4]
 81034b0:	655a      	str	r2, [r3, #84]	; 0x54
 81034b2:	e00b      	b.n	81034cc <HAL_ADC_IRQHandler+0x2f0>
            }
          }
          else
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 81034b4:	687b      	ldr	r3, [r7, #4]
 81034b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81034b8:	f043 0210 	orr.w	r2, r3, #16
 81034bc:	687b      	ldr	r3, [r7, #4]
 81034be:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 81034c0:	687b      	ldr	r3, [r7, #4]
 81034c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81034c4:	f043 0201 	orr.w	r2, r3, #1
 81034c8:	687b      	ldr	r3, [r7, #4]
 81034ca:	659a      	str	r2, [r3, #88]	; 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 81034cc:	6878      	ldr	r0, [r7, #4]
 81034ce:	f000 fd5d 	bl	8103f8c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 81034d2:	687b      	ldr	r3, [r7, #4]
 81034d4:	681b      	ldr	r3, [r3, #0]
 81034d6:	2260      	movs	r2, #96	; 0x60
 81034d8:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 81034da:	69fb      	ldr	r3, [r7, #28]
 81034dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 81034e0:	2b00      	cmp	r3, #0
 81034e2:	d011      	beq.n	8103508 <HAL_ADC_IRQHandler+0x32c>
 81034e4:	69bb      	ldr	r3, [r7, #24]
 81034e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 81034ea:	2b00      	cmp	r3, #0
 81034ec:	d00c      	beq.n	8103508 <HAL_ADC_IRQHandler+0x32c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 81034ee:	687b      	ldr	r3, [r7, #4]
 81034f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81034f2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 81034f6:	687b      	ldr	r3, [r7, #4]
 81034f8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 81034fa:	6878      	ldr	r0, [r7, #4]
 81034fc:	f000 f8b2 	bl	8103664 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8103500:	687b      	ldr	r3, [r7, #4]
 8103502:	681b      	ldr	r3, [r3, #0]
 8103504:	2280      	movs	r2, #128	; 0x80
 8103506:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8103508:	69fb      	ldr	r3, [r7, #28]
 810350a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 810350e:	2b00      	cmp	r3, #0
 8103510:	d012      	beq.n	8103538 <HAL_ADC_IRQHandler+0x35c>
 8103512:	69bb      	ldr	r3, [r7, #24]
 8103514:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8103518:	2b00      	cmp	r3, #0
 810351a:	d00d      	beq.n	8103538 <HAL_ADC_IRQHandler+0x35c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 810351c:	687b      	ldr	r3, [r7, #4]
 810351e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103520:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8103524:	687b      	ldr	r3, [r7, #4]
 8103526:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8103528:	6878      	ldr	r0, [r7, #4]
 810352a:	f000 fd43 	bl	8103fb4 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 810352e:	687b      	ldr	r3, [r7, #4]
 8103530:	681b      	ldr	r3, [r3, #0]
 8103532:	f44f 7280 	mov.w	r2, #256	; 0x100
 8103536:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8103538:	69fb      	ldr	r3, [r7, #28]
 810353a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 810353e:	2b00      	cmp	r3, #0
 8103540:	d012      	beq.n	8103568 <HAL_ADC_IRQHandler+0x38c>
 8103542:	69bb      	ldr	r3, [r7, #24]
 8103544:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8103548:	2b00      	cmp	r3, #0
 810354a:	d00d      	beq.n	8103568 <HAL_ADC_IRQHandler+0x38c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 810354c:	687b      	ldr	r3, [r7, #4]
 810354e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103550:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8103554:	687b      	ldr	r3, [r7, #4]
 8103556:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8103558:	6878      	ldr	r0, [r7, #4]
 810355a:	f000 fd35 	bl	8103fc8 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 810355e:	687b      	ldr	r3, [r7, #4]
 8103560:	681b      	ldr	r3, [r3, #0]
 8103562:	f44f 7200 	mov.w	r2, #512	; 0x200
 8103566:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8103568:	69fb      	ldr	r3, [r7, #28]
 810356a:	f003 0310 	and.w	r3, r3, #16
 810356e:	2b00      	cmp	r3, #0
 8103570:	d043      	beq.n	81035fa <HAL_ADC_IRQHandler+0x41e>
 8103572:	69bb      	ldr	r3, [r7, #24]
 8103574:	f003 0310 	and.w	r3, r3, #16
 8103578:	2b00      	cmp	r3, #0
 810357a:	d03e      	beq.n	81035fa <HAL_ADC_IRQHandler+0x41e>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 810357c:	687b      	ldr	r3, [r7, #4]
 810357e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8103580:	2b00      	cmp	r3, #0
 8103582:	d102      	bne.n	810358a <HAL_ADC_IRQHandler+0x3ae>
    {
      overrun_error = 1UL;
 8103584:	2301      	movs	r3, #1
 8103586:	627b      	str	r3, [r7, #36]	; 0x24
 8103588:	e021      	b.n	81035ce <HAL_ADC_IRQHandler+0x3f2>
    }
    else
    {
      /* Check DMA configuration */
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 810358a:	697b      	ldr	r3, [r7, #20]
 810358c:	2b00      	cmp	r3, #0
 810358e:	d015      	beq.n	81035bc <HAL_ADC_IRQHandler+0x3e0>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8103590:	687b      	ldr	r3, [r7, #4]
 8103592:	681b      	ldr	r3, [r3, #0]
 8103594:	4a2a      	ldr	r2, [pc, #168]	; (8103640 <HAL_ADC_IRQHandler+0x464>)
 8103596:	4293      	cmp	r3, r2
 8103598:	d004      	beq.n	81035a4 <HAL_ADC_IRQHandler+0x3c8>
 810359a:	687b      	ldr	r3, [r7, #4]
 810359c:	681b      	ldr	r3, [r3, #0]
 810359e:	4a29      	ldr	r2, [pc, #164]	; (8103644 <HAL_ADC_IRQHandler+0x468>)
 81035a0:	4293      	cmp	r3, r2
 81035a2:	d101      	bne.n	81035a8 <HAL_ADC_IRQHandler+0x3cc>
 81035a4:	4b28      	ldr	r3, [pc, #160]	; (8103648 <HAL_ADC_IRQHandler+0x46c>)
 81035a6:	e000      	b.n	81035aa <HAL_ADC_IRQHandler+0x3ce>
 81035a8:	4b28      	ldr	r3, [pc, #160]	; (810364c <HAL_ADC_IRQHandler+0x470>)
 81035aa:	4618      	mov	r0, r3
 81035ac:	f7ff fbe0 	bl	8102d70 <LL_ADC_GetMultiDMATransfer>
 81035b0:	4603      	mov	r3, r0
 81035b2:	2b00      	cmp	r3, #0
 81035b4:	d00b      	beq.n	81035ce <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 81035b6:	2301      	movs	r3, #1
 81035b8:	627b      	str	r3, [r7, #36]	; 0x24
 81035ba:	e008      	b.n	81035ce <HAL_ADC_IRQHandler+0x3f2>
        }
      }
      else
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 81035bc:	687b      	ldr	r3, [r7, #4]
 81035be:	681b      	ldr	r3, [r3, #0]
 81035c0:	68db      	ldr	r3, [r3, #12]
 81035c2:	f003 0303 	and.w	r3, r3, #3
 81035c6:	2b00      	cmp	r3, #0
 81035c8:	d001      	beq.n	81035ce <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 81035ca:	2301      	movs	r3, #1
 81035cc:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 81035ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81035d0:	2b01      	cmp	r3, #1
 81035d2:	d10e      	bne.n	81035f2 <HAL_ADC_IRQHandler+0x416>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 81035d4:	687b      	ldr	r3, [r7, #4]
 81035d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81035d8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 81035dc:	687b      	ldr	r3, [r7, #4]
 81035de:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 81035e0:	687b      	ldr	r3, [r7, #4]
 81035e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81035e4:	f043 0202 	orr.w	r2, r3, #2
 81035e8:	687b      	ldr	r3, [r7, #4]
 81035ea:	659a      	str	r2, [r3, #88]	; 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 81035ec:	6878      	ldr	r0, [r7, #4]
 81035ee:	f000 f843 	bl	8103678 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 81035f2:	687b      	ldr	r3, [r7, #4]
 81035f4:	681b      	ldr	r3, [r3, #0]
 81035f6:	2210      	movs	r2, #16
 81035f8:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 81035fa:	69fb      	ldr	r3, [r7, #28]
 81035fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8103600:	2b00      	cmp	r3, #0
 8103602:	d018      	beq.n	8103636 <HAL_ADC_IRQHandler+0x45a>
 8103604:	69bb      	ldr	r3, [r7, #24]
 8103606:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 810360a:	2b00      	cmp	r3, #0
 810360c:	d013      	beq.n	8103636 <HAL_ADC_IRQHandler+0x45a>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 810360e:	687b      	ldr	r3, [r7, #4]
 8103610:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103612:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8103616:	687b      	ldr	r3, [r7, #4]
 8103618:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 810361a:	687b      	ldr	r3, [r7, #4]
 810361c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810361e:	f043 0208 	orr.w	r2, r3, #8
 8103622:	687b      	ldr	r3, [r7, #4]
 8103624:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8103626:	687b      	ldr	r3, [r7, #4]
 8103628:	681b      	ldr	r3, [r3, #0]
 810362a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 810362e:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8103630:	6878      	ldr	r0, [r7, #4]
 8103632:	f000 fcb5 	bl	8103fa0 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8103636:	bf00      	nop
 8103638:	3728      	adds	r7, #40	; 0x28
 810363a:	46bd      	mov	sp, r7
 810363c:	bd80      	pop	{r7, pc}
 810363e:	bf00      	nop
 8103640:	40022000 	.word	0x40022000
 8103644:	40022100 	.word	0x40022100
 8103648:	40022300 	.word	0x40022300
 810364c:	58026300 	.word	0x58026300

08103650 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8103650:	b480      	push	{r7}
 8103652:	b083      	sub	sp, #12
 8103654:	af00      	add	r7, sp, #0
 8103656:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8103658:	bf00      	nop
 810365a:	370c      	adds	r7, #12
 810365c:	46bd      	mov	sp, r7
 810365e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103662:	4770      	bx	lr

08103664 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8103664:	b480      	push	{r7}
 8103666:	b083      	sub	sp, #12
 8103668:	af00      	add	r7, sp, #0
 810366a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 810366c:	bf00      	nop
 810366e:	370c      	adds	r7, #12
 8103670:	46bd      	mov	sp, r7
 8103672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103676:	4770      	bx	lr

08103678 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8103678:	b480      	push	{r7}
 810367a:	b083      	sub	sp, #12
 810367c:	af00      	add	r7, sp, #0
 810367e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8103680:	bf00      	nop
 8103682:	370c      	adds	r7, #12
 8103684:	46bd      	mov	sp, r7
 8103686:	f85d 7b04 	ldr.w	r7, [sp], #4
 810368a:	4770      	bx	lr

0810368c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 810368c:	b590      	push	{r4, r7, lr}
 810368e:	b0a1      	sub	sp, #132	; 0x84
 8103690:	af00      	add	r7, sp, #0
 8103692:	6078      	str	r0, [r7, #4]
 8103694:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8103696:	2300      	movs	r3, #0
 8103698:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 810369c:	2300      	movs	r3, #0
 810369e:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 81036a0:	683b      	ldr	r3, [r7, #0]
 81036a2:	68db      	ldr	r3, [r3, #12]
 81036a4:	4a9d      	ldr	r2, [pc, #628]	; (810391c <HAL_ADC_ConfigChannel+0x290>)
 81036a6:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 81036a8:	687b      	ldr	r3, [r7, #4]
 81036aa:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 81036ae:	2b01      	cmp	r3, #1
 81036b0:	d101      	bne.n	81036b6 <HAL_ADC_ConfigChannel+0x2a>
 81036b2:	2302      	movs	r3, #2
 81036b4:	e321      	b.n	8103cfa <HAL_ADC_ConfigChannel+0x66e>
 81036b6:	687b      	ldr	r3, [r7, #4]
 81036b8:	2201      	movs	r2, #1
 81036ba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 81036be:	687b      	ldr	r3, [r7, #4]
 81036c0:	681b      	ldr	r3, [r3, #0]
 81036c2:	4618      	mov	r0, r3
 81036c4:	f7ff fbc3 	bl	8102e4e <LL_ADC_REG_IsConversionOngoing>
 81036c8:	4603      	mov	r3, r0
 81036ca:	2b00      	cmp	r3, #0
 81036cc:	f040 8306 	bne.w	8103cdc <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 81036d0:	683b      	ldr	r3, [r7, #0]
 81036d2:	681b      	ldr	r3, [r3, #0]
 81036d4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 81036d8:	2b00      	cmp	r3, #0
 81036da:	d108      	bne.n	81036ee <HAL_ADC_ConfigChannel+0x62>
 81036dc:	683b      	ldr	r3, [r7, #0]
 81036de:	681b      	ldr	r3, [r3, #0]
 81036e0:	0e9b      	lsrs	r3, r3, #26
 81036e2:	f003 031f 	and.w	r3, r3, #31
 81036e6:	2201      	movs	r2, #1
 81036e8:	fa02 f303 	lsl.w	r3, r2, r3
 81036ec:	e016      	b.n	810371c <HAL_ADC_ConfigChannel+0x90>
 81036ee:	683b      	ldr	r3, [r7, #0]
 81036f0:	681b      	ldr	r3, [r3, #0]
 81036f2:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 81036f4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 81036f6:	fa93 f3a3 	rbit	r3, r3
 81036fa:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 81036fc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 81036fe:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8103700:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8103702:	2b00      	cmp	r3, #0
 8103704:	d101      	bne.n	810370a <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 8103706:	2320      	movs	r3, #32
 8103708:	e003      	b.n	8103712 <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 810370a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 810370c:	fab3 f383 	clz	r3, r3
 8103710:	b2db      	uxtb	r3, r3
 8103712:	f003 031f 	and.w	r3, r3, #31
 8103716:	2201      	movs	r2, #1
 8103718:	fa02 f303 	lsl.w	r3, r2, r3
 810371c:	687a      	ldr	r2, [r7, #4]
 810371e:	6812      	ldr	r2, [r2, #0]
 8103720:	69d1      	ldr	r1, [r2, #28]
 8103722:	687a      	ldr	r2, [r7, #4]
 8103724:	6812      	ldr	r2, [r2, #0]
 8103726:	430b      	orrs	r3, r1
 8103728:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 810372a:	687b      	ldr	r3, [r7, #4]
 810372c:	6818      	ldr	r0, [r3, #0]
 810372e:	683b      	ldr	r3, [r7, #0]
 8103730:	6859      	ldr	r1, [r3, #4]
 8103732:	683b      	ldr	r3, [r7, #0]
 8103734:	681b      	ldr	r3, [r3, #0]
 8103736:	461a      	mov	r2, r3
 8103738:	f7ff fa7d 	bl	8102c36 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 810373c:	687b      	ldr	r3, [r7, #4]
 810373e:	681b      	ldr	r3, [r3, #0]
 8103740:	4618      	mov	r0, r3
 8103742:	f7ff fb84 	bl	8102e4e <LL_ADC_REG_IsConversionOngoing>
 8103746:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8103748:	687b      	ldr	r3, [r7, #4]
 810374a:	681b      	ldr	r3, [r3, #0]
 810374c:	4618      	mov	r0, r3
 810374e:	f7ff fb91 	bl	8102e74 <LL_ADC_INJ_IsConversionOngoing>
 8103752:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8103754:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8103756:	2b00      	cmp	r3, #0
 8103758:	f040 80b3 	bne.w	81038c2 <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 810375c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 810375e:	2b00      	cmp	r3, #0
 8103760:	f040 80af 	bne.w	81038c2 <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8103764:	687b      	ldr	r3, [r7, #4]
 8103766:	6818      	ldr	r0, [r3, #0]
 8103768:	683b      	ldr	r3, [r7, #0]
 810376a:	6819      	ldr	r1, [r3, #0]
 810376c:	683b      	ldr	r3, [r7, #0]
 810376e:	689b      	ldr	r3, [r3, #8]
 8103770:	461a      	mov	r2, r3
 8103772:	f7ff fa9f 	bl	8102cb4 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8103776:	4b6a      	ldr	r3, [pc, #424]	; (8103920 <HAL_ADC_ConfigChannel+0x294>)
 8103778:	681b      	ldr	r3, [r3, #0]
 810377a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 810377e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8103782:	d10b      	bne.n	810379c <HAL_ADC_ConfigChannel+0x110>
 8103784:	683b      	ldr	r3, [r7, #0]
 8103786:	695a      	ldr	r2, [r3, #20]
 8103788:	687b      	ldr	r3, [r7, #4]
 810378a:	681b      	ldr	r3, [r3, #0]
 810378c:	68db      	ldr	r3, [r3, #12]
 810378e:	089b      	lsrs	r3, r3, #2
 8103790:	f003 0307 	and.w	r3, r3, #7
 8103794:	005b      	lsls	r3, r3, #1
 8103796:	fa02 f303 	lsl.w	r3, r2, r3
 810379a:	e01d      	b.n	81037d8 <HAL_ADC_ConfigChannel+0x14c>
 810379c:	687b      	ldr	r3, [r7, #4]
 810379e:	681b      	ldr	r3, [r3, #0]
 81037a0:	68db      	ldr	r3, [r3, #12]
 81037a2:	f003 0310 	and.w	r3, r3, #16
 81037a6:	2b00      	cmp	r3, #0
 81037a8:	d10b      	bne.n	81037c2 <HAL_ADC_ConfigChannel+0x136>
 81037aa:	683b      	ldr	r3, [r7, #0]
 81037ac:	695a      	ldr	r2, [r3, #20]
 81037ae:	687b      	ldr	r3, [r7, #4]
 81037b0:	681b      	ldr	r3, [r3, #0]
 81037b2:	68db      	ldr	r3, [r3, #12]
 81037b4:	089b      	lsrs	r3, r3, #2
 81037b6:	f003 0307 	and.w	r3, r3, #7
 81037ba:	005b      	lsls	r3, r3, #1
 81037bc:	fa02 f303 	lsl.w	r3, r2, r3
 81037c0:	e00a      	b.n	81037d8 <HAL_ADC_ConfigChannel+0x14c>
 81037c2:	683b      	ldr	r3, [r7, #0]
 81037c4:	695a      	ldr	r2, [r3, #20]
 81037c6:	687b      	ldr	r3, [r7, #4]
 81037c8:	681b      	ldr	r3, [r3, #0]
 81037ca:	68db      	ldr	r3, [r3, #12]
 81037cc:	089b      	lsrs	r3, r3, #2
 81037ce:	f003 0304 	and.w	r3, r3, #4
 81037d2:	005b      	lsls	r3, r3, #1
 81037d4:	fa02 f303 	lsl.w	r3, r2, r3
 81037d8:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 81037da:	683b      	ldr	r3, [r7, #0]
 81037dc:	691b      	ldr	r3, [r3, #16]
 81037de:	2b04      	cmp	r3, #4
 81037e0:	d027      	beq.n	8103832 <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 81037e2:	687b      	ldr	r3, [r7, #4]
 81037e4:	6818      	ldr	r0, [r3, #0]
 81037e6:	683b      	ldr	r3, [r7, #0]
 81037e8:	6919      	ldr	r1, [r3, #16]
 81037ea:	683b      	ldr	r3, [r7, #0]
 81037ec:	681a      	ldr	r2, [r3, #0]
 81037ee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 81037f0:	f7ff f9ba 	bl	8102b68 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 81037f4:	687b      	ldr	r3, [r7, #4]
 81037f6:	6818      	ldr	r0, [r3, #0]
 81037f8:	683b      	ldr	r3, [r7, #0]
 81037fa:	6919      	ldr	r1, [r3, #16]
 81037fc:	683b      	ldr	r3, [r7, #0]
 81037fe:	7e5b      	ldrb	r3, [r3, #25]
 8103800:	2b01      	cmp	r3, #1
 8103802:	d102      	bne.n	810380a <HAL_ADC_ConfigChannel+0x17e>
 8103804:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8103808:	e000      	b.n	810380c <HAL_ADC_ConfigChannel+0x180>
 810380a:	2300      	movs	r3, #0
 810380c:	461a      	mov	r2, r3
 810380e:	f7ff f9e4 	bl	8102bda <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8103812:	687b      	ldr	r3, [r7, #4]
 8103814:	6818      	ldr	r0, [r3, #0]
 8103816:	683b      	ldr	r3, [r7, #0]
 8103818:	6919      	ldr	r1, [r3, #16]
 810381a:	683b      	ldr	r3, [r7, #0]
 810381c:	7e1b      	ldrb	r3, [r3, #24]
 810381e:	2b01      	cmp	r3, #1
 8103820:	d102      	bne.n	8103828 <HAL_ADC_ConfigChannel+0x19c>
 8103822:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8103826:	e000      	b.n	810382a <HAL_ADC_ConfigChannel+0x19e>
 8103828:	2300      	movs	r3, #0
 810382a:	461a      	mov	r2, r3
 810382c:	f7ff f9bc 	bl	8102ba8 <LL_ADC_SetDataRightShift>
 8103830:	e047      	b.n	81038c2 <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8103832:	687b      	ldr	r3, [r7, #4]
 8103834:	681b      	ldr	r3, [r3, #0]
 8103836:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8103838:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 810383c:	683b      	ldr	r3, [r7, #0]
 810383e:	681b      	ldr	r3, [r3, #0]
 8103840:	069b      	lsls	r3, r3, #26
 8103842:	429a      	cmp	r2, r3
 8103844:	d107      	bne.n	8103856 <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8103846:	687b      	ldr	r3, [r7, #4]
 8103848:	681b      	ldr	r3, [r3, #0]
 810384a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 810384c:	687b      	ldr	r3, [r7, #4]
 810384e:	681b      	ldr	r3, [r3, #0]
 8103850:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8103854:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8103856:	687b      	ldr	r3, [r7, #4]
 8103858:	681b      	ldr	r3, [r3, #0]
 810385a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810385c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8103860:	683b      	ldr	r3, [r7, #0]
 8103862:	681b      	ldr	r3, [r3, #0]
 8103864:	069b      	lsls	r3, r3, #26
 8103866:	429a      	cmp	r2, r3
 8103868:	d107      	bne.n	810387a <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 810386a:	687b      	ldr	r3, [r7, #4]
 810386c:	681b      	ldr	r3, [r3, #0]
 810386e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8103870:	687b      	ldr	r3, [r7, #4]
 8103872:	681b      	ldr	r3, [r3, #0]
 8103874:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8103878:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 810387a:	687b      	ldr	r3, [r7, #4]
 810387c:	681b      	ldr	r3, [r3, #0]
 810387e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8103880:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8103884:	683b      	ldr	r3, [r7, #0]
 8103886:	681b      	ldr	r3, [r3, #0]
 8103888:	069b      	lsls	r3, r3, #26
 810388a:	429a      	cmp	r2, r3
 810388c:	d107      	bne.n	810389e <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 810388e:	687b      	ldr	r3, [r7, #4]
 8103890:	681b      	ldr	r3, [r3, #0]
 8103892:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8103894:	687b      	ldr	r3, [r7, #4]
 8103896:	681b      	ldr	r3, [r3, #0]
 8103898:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 810389c:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 810389e:	687b      	ldr	r3, [r7, #4]
 81038a0:	681b      	ldr	r3, [r3, #0]
 81038a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 81038a4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 81038a8:	683b      	ldr	r3, [r7, #0]
 81038aa:	681b      	ldr	r3, [r3, #0]
 81038ac:	069b      	lsls	r3, r3, #26
 81038ae:	429a      	cmp	r2, r3
 81038b0:	d107      	bne.n	81038c2 <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 81038b2:	687b      	ldr	r3, [r7, #4]
 81038b4:	681b      	ldr	r3, [r3, #0]
 81038b6:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 81038b8:	687b      	ldr	r3, [r7, #4]
 81038ba:	681b      	ldr	r3, [r3, #0]
 81038bc:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 81038c0:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 81038c2:	687b      	ldr	r3, [r7, #4]
 81038c4:	681b      	ldr	r3, [r3, #0]
 81038c6:	4618      	mov	r0, r3
 81038c8:	f7ff faae 	bl	8102e28 <LL_ADC_IsEnabled>
 81038cc:	4603      	mov	r3, r0
 81038ce:	2b00      	cmp	r3, #0
 81038d0:	f040 820d 	bne.w	8103cee <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 81038d4:	687b      	ldr	r3, [r7, #4]
 81038d6:	6818      	ldr	r0, [r3, #0]
 81038d8:	683b      	ldr	r3, [r7, #0]
 81038da:	6819      	ldr	r1, [r3, #0]
 81038dc:	683b      	ldr	r3, [r7, #0]
 81038de:	68db      	ldr	r3, [r3, #12]
 81038e0:	461a      	mov	r2, r3
 81038e2:	f7ff fa13 	bl	8102d0c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 81038e6:	683b      	ldr	r3, [r7, #0]
 81038e8:	68db      	ldr	r3, [r3, #12]
 81038ea:	4a0c      	ldr	r2, [pc, #48]	; (810391c <HAL_ADC_ConfigChannel+0x290>)
 81038ec:	4293      	cmp	r3, r2
 81038ee:	f040 8133 	bne.w	8103b58 <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 81038f2:	687b      	ldr	r3, [r7, #4]
 81038f4:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 81038f6:	683b      	ldr	r3, [r7, #0]
 81038f8:	681b      	ldr	r3, [r3, #0]
 81038fa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 81038fe:	2b00      	cmp	r3, #0
 8103900:	d110      	bne.n	8103924 <HAL_ADC_ConfigChannel+0x298>
 8103902:	683b      	ldr	r3, [r7, #0]
 8103904:	681b      	ldr	r3, [r3, #0]
 8103906:	0e9b      	lsrs	r3, r3, #26
 8103908:	3301      	adds	r3, #1
 810390a:	f003 031f 	and.w	r3, r3, #31
 810390e:	2b09      	cmp	r3, #9
 8103910:	bf94      	ite	ls
 8103912:	2301      	movls	r3, #1
 8103914:	2300      	movhi	r3, #0
 8103916:	b2db      	uxtb	r3, r3
 8103918:	e01e      	b.n	8103958 <HAL_ADC_ConfigChannel+0x2cc>
 810391a:	bf00      	nop
 810391c:	47ff0000 	.word	0x47ff0000
 8103920:	5c001000 	.word	0x5c001000
 8103924:	683b      	ldr	r3, [r7, #0]
 8103926:	681b      	ldr	r3, [r3, #0]
 8103928:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 810392a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 810392c:	fa93 f3a3 	rbit	r3, r3
 8103930:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8103932:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8103934:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8103936:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8103938:	2b00      	cmp	r3, #0
 810393a:	d101      	bne.n	8103940 <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 810393c:	2320      	movs	r3, #32
 810393e:	e003      	b.n	8103948 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8103940:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8103942:	fab3 f383 	clz	r3, r3
 8103946:	b2db      	uxtb	r3, r3
 8103948:	3301      	adds	r3, #1
 810394a:	f003 031f 	and.w	r3, r3, #31
 810394e:	2b09      	cmp	r3, #9
 8103950:	bf94      	ite	ls
 8103952:	2301      	movls	r3, #1
 8103954:	2300      	movhi	r3, #0
 8103956:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8103958:	2b00      	cmp	r3, #0
 810395a:	d079      	beq.n	8103a50 <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 810395c:	683b      	ldr	r3, [r7, #0]
 810395e:	681b      	ldr	r3, [r3, #0]
 8103960:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8103964:	2b00      	cmp	r3, #0
 8103966:	d107      	bne.n	8103978 <HAL_ADC_ConfigChannel+0x2ec>
 8103968:	683b      	ldr	r3, [r7, #0]
 810396a:	681b      	ldr	r3, [r3, #0]
 810396c:	0e9b      	lsrs	r3, r3, #26
 810396e:	3301      	adds	r3, #1
 8103970:	069b      	lsls	r3, r3, #26
 8103972:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8103976:	e015      	b.n	81039a4 <HAL_ADC_ConfigChannel+0x318>
 8103978:	683b      	ldr	r3, [r7, #0]
 810397a:	681b      	ldr	r3, [r3, #0]
 810397c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 810397e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8103980:	fa93 f3a3 	rbit	r3, r3
 8103984:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8103986:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8103988:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 810398a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 810398c:	2b00      	cmp	r3, #0
 810398e:	d101      	bne.n	8103994 <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 8103990:	2320      	movs	r3, #32
 8103992:	e003      	b.n	810399c <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8103994:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8103996:	fab3 f383 	clz	r3, r3
 810399a:	b2db      	uxtb	r3, r3
 810399c:	3301      	adds	r3, #1
 810399e:	069b      	lsls	r3, r3, #26
 81039a0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 81039a4:	683b      	ldr	r3, [r7, #0]
 81039a6:	681b      	ldr	r3, [r3, #0]
 81039a8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 81039ac:	2b00      	cmp	r3, #0
 81039ae:	d109      	bne.n	81039c4 <HAL_ADC_ConfigChannel+0x338>
 81039b0:	683b      	ldr	r3, [r7, #0]
 81039b2:	681b      	ldr	r3, [r3, #0]
 81039b4:	0e9b      	lsrs	r3, r3, #26
 81039b6:	3301      	adds	r3, #1
 81039b8:	f003 031f 	and.w	r3, r3, #31
 81039bc:	2101      	movs	r1, #1
 81039be:	fa01 f303 	lsl.w	r3, r1, r3
 81039c2:	e017      	b.n	81039f4 <HAL_ADC_ConfigChannel+0x368>
 81039c4:	683b      	ldr	r3, [r7, #0]
 81039c6:	681b      	ldr	r3, [r3, #0]
 81039c8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 81039ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 81039cc:	fa93 f3a3 	rbit	r3, r3
 81039d0:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 81039d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 81039d4:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 81039d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 81039d8:	2b00      	cmp	r3, #0
 81039da:	d101      	bne.n	81039e0 <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 81039dc:	2320      	movs	r3, #32
 81039de:	e003      	b.n	81039e8 <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 81039e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 81039e2:	fab3 f383 	clz	r3, r3
 81039e6:	b2db      	uxtb	r3, r3
 81039e8:	3301      	adds	r3, #1
 81039ea:	f003 031f 	and.w	r3, r3, #31
 81039ee:	2101      	movs	r1, #1
 81039f0:	fa01 f303 	lsl.w	r3, r1, r3
 81039f4:	ea42 0103 	orr.w	r1, r2, r3
 81039f8:	683b      	ldr	r3, [r7, #0]
 81039fa:	681b      	ldr	r3, [r3, #0]
 81039fc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8103a00:	2b00      	cmp	r3, #0
 8103a02:	d10a      	bne.n	8103a1a <HAL_ADC_ConfigChannel+0x38e>
 8103a04:	683b      	ldr	r3, [r7, #0]
 8103a06:	681b      	ldr	r3, [r3, #0]
 8103a08:	0e9b      	lsrs	r3, r3, #26
 8103a0a:	3301      	adds	r3, #1
 8103a0c:	f003 021f 	and.w	r2, r3, #31
 8103a10:	4613      	mov	r3, r2
 8103a12:	005b      	lsls	r3, r3, #1
 8103a14:	4413      	add	r3, r2
 8103a16:	051b      	lsls	r3, r3, #20
 8103a18:	e018      	b.n	8103a4c <HAL_ADC_ConfigChannel+0x3c0>
 8103a1a:	683b      	ldr	r3, [r7, #0]
 8103a1c:	681b      	ldr	r3, [r3, #0]
 8103a1e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8103a20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8103a22:	fa93 f3a3 	rbit	r3, r3
 8103a26:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8103a28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8103a2a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8103a2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8103a2e:	2b00      	cmp	r3, #0
 8103a30:	d101      	bne.n	8103a36 <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 8103a32:	2320      	movs	r3, #32
 8103a34:	e003      	b.n	8103a3e <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 8103a36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8103a38:	fab3 f383 	clz	r3, r3
 8103a3c:	b2db      	uxtb	r3, r3
 8103a3e:	3301      	adds	r3, #1
 8103a40:	f003 021f 	and.w	r2, r3, #31
 8103a44:	4613      	mov	r3, r2
 8103a46:	005b      	lsls	r3, r3, #1
 8103a48:	4413      	add	r3, r2
 8103a4a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8103a4c:	430b      	orrs	r3, r1
 8103a4e:	e07e      	b.n	8103b4e <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8103a50:	683b      	ldr	r3, [r7, #0]
 8103a52:	681b      	ldr	r3, [r3, #0]
 8103a54:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8103a58:	2b00      	cmp	r3, #0
 8103a5a:	d107      	bne.n	8103a6c <HAL_ADC_ConfigChannel+0x3e0>
 8103a5c:	683b      	ldr	r3, [r7, #0]
 8103a5e:	681b      	ldr	r3, [r3, #0]
 8103a60:	0e9b      	lsrs	r3, r3, #26
 8103a62:	3301      	adds	r3, #1
 8103a64:	069b      	lsls	r3, r3, #26
 8103a66:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8103a6a:	e015      	b.n	8103a98 <HAL_ADC_ConfigChannel+0x40c>
 8103a6c:	683b      	ldr	r3, [r7, #0]
 8103a6e:	681b      	ldr	r3, [r3, #0]
 8103a70:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8103a72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8103a74:	fa93 f3a3 	rbit	r3, r3
 8103a78:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8103a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8103a7c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8103a7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8103a80:	2b00      	cmp	r3, #0
 8103a82:	d101      	bne.n	8103a88 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8103a84:	2320      	movs	r3, #32
 8103a86:	e003      	b.n	8103a90 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8103a88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8103a8a:	fab3 f383 	clz	r3, r3
 8103a8e:	b2db      	uxtb	r3, r3
 8103a90:	3301      	adds	r3, #1
 8103a92:	069b      	lsls	r3, r3, #26
 8103a94:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8103a98:	683b      	ldr	r3, [r7, #0]
 8103a9a:	681b      	ldr	r3, [r3, #0]
 8103a9c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8103aa0:	2b00      	cmp	r3, #0
 8103aa2:	d109      	bne.n	8103ab8 <HAL_ADC_ConfigChannel+0x42c>
 8103aa4:	683b      	ldr	r3, [r7, #0]
 8103aa6:	681b      	ldr	r3, [r3, #0]
 8103aa8:	0e9b      	lsrs	r3, r3, #26
 8103aaa:	3301      	adds	r3, #1
 8103aac:	f003 031f 	and.w	r3, r3, #31
 8103ab0:	2101      	movs	r1, #1
 8103ab2:	fa01 f303 	lsl.w	r3, r1, r3
 8103ab6:	e017      	b.n	8103ae8 <HAL_ADC_ConfigChannel+0x45c>
 8103ab8:	683b      	ldr	r3, [r7, #0]
 8103aba:	681b      	ldr	r3, [r3, #0]
 8103abc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8103abe:	69fb      	ldr	r3, [r7, #28]
 8103ac0:	fa93 f3a3 	rbit	r3, r3
 8103ac4:	61bb      	str	r3, [r7, #24]
  return result;
 8103ac6:	69bb      	ldr	r3, [r7, #24]
 8103ac8:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8103aca:	6a3b      	ldr	r3, [r7, #32]
 8103acc:	2b00      	cmp	r3, #0
 8103ace:	d101      	bne.n	8103ad4 <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 8103ad0:	2320      	movs	r3, #32
 8103ad2:	e003      	b.n	8103adc <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 8103ad4:	6a3b      	ldr	r3, [r7, #32]
 8103ad6:	fab3 f383 	clz	r3, r3
 8103ada:	b2db      	uxtb	r3, r3
 8103adc:	3301      	adds	r3, #1
 8103ade:	f003 031f 	and.w	r3, r3, #31
 8103ae2:	2101      	movs	r1, #1
 8103ae4:	fa01 f303 	lsl.w	r3, r1, r3
 8103ae8:	ea42 0103 	orr.w	r1, r2, r3
 8103aec:	683b      	ldr	r3, [r7, #0]
 8103aee:	681b      	ldr	r3, [r3, #0]
 8103af0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8103af4:	2b00      	cmp	r3, #0
 8103af6:	d10d      	bne.n	8103b14 <HAL_ADC_ConfigChannel+0x488>
 8103af8:	683b      	ldr	r3, [r7, #0]
 8103afa:	681b      	ldr	r3, [r3, #0]
 8103afc:	0e9b      	lsrs	r3, r3, #26
 8103afe:	3301      	adds	r3, #1
 8103b00:	f003 021f 	and.w	r2, r3, #31
 8103b04:	4613      	mov	r3, r2
 8103b06:	005b      	lsls	r3, r3, #1
 8103b08:	4413      	add	r3, r2
 8103b0a:	3b1e      	subs	r3, #30
 8103b0c:	051b      	lsls	r3, r3, #20
 8103b0e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8103b12:	e01b      	b.n	8103b4c <HAL_ADC_ConfigChannel+0x4c0>
 8103b14:	683b      	ldr	r3, [r7, #0]
 8103b16:	681b      	ldr	r3, [r3, #0]
 8103b18:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8103b1a:	693b      	ldr	r3, [r7, #16]
 8103b1c:	fa93 f3a3 	rbit	r3, r3
 8103b20:	60fb      	str	r3, [r7, #12]
  return result;
 8103b22:	68fb      	ldr	r3, [r7, #12]
 8103b24:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8103b26:	697b      	ldr	r3, [r7, #20]
 8103b28:	2b00      	cmp	r3, #0
 8103b2a:	d101      	bne.n	8103b30 <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 8103b2c:	2320      	movs	r3, #32
 8103b2e:	e003      	b.n	8103b38 <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 8103b30:	697b      	ldr	r3, [r7, #20]
 8103b32:	fab3 f383 	clz	r3, r3
 8103b36:	b2db      	uxtb	r3, r3
 8103b38:	3301      	adds	r3, #1
 8103b3a:	f003 021f 	and.w	r2, r3, #31
 8103b3e:	4613      	mov	r3, r2
 8103b40:	005b      	lsls	r3, r3, #1
 8103b42:	4413      	add	r3, r2
 8103b44:	3b1e      	subs	r3, #30
 8103b46:	051b      	lsls	r3, r3, #20
 8103b48:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8103b4c:	430b      	orrs	r3, r1
 8103b4e:	683a      	ldr	r2, [r7, #0]
 8103b50:	6892      	ldr	r2, [r2, #8]
 8103b52:	4619      	mov	r1, r3
 8103b54:	f7ff f8ae 	bl	8102cb4 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8103b58:	683b      	ldr	r3, [r7, #0]
 8103b5a:	681b      	ldr	r3, [r3, #0]
 8103b5c:	2b00      	cmp	r3, #0
 8103b5e:	f280 80c6 	bge.w	8103cee <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8103b62:	687b      	ldr	r3, [r7, #4]
 8103b64:	681b      	ldr	r3, [r3, #0]
 8103b66:	4a67      	ldr	r2, [pc, #412]	; (8103d04 <HAL_ADC_ConfigChannel+0x678>)
 8103b68:	4293      	cmp	r3, r2
 8103b6a:	d004      	beq.n	8103b76 <HAL_ADC_ConfigChannel+0x4ea>
 8103b6c:	687b      	ldr	r3, [r7, #4]
 8103b6e:	681b      	ldr	r3, [r3, #0]
 8103b70:	4a65      	ldr	r2, [pc, #404]	; (8103d08 <HAL_ADC_ConfigChannel+0x67c>)
 8103b72:	4293      	cmp	r3, r2
 8103b74:	d101      	bne.n	8103b7a <HAL_ADC_ConfigChannel+0x4ee>
 8103b76:	4b65      	ldr	r3, [pc, #404]	; (8103d0c <HAL_ADC_ConfigChannel+0x680>)
 8103b78:	e000      	b.n	8103b7c <HAL_ADC_ConfigChannel+0x4f0>
 8103b7a:	4b65      	ldr	r3, [pc, #404]	; (8103d10 <HAL_ADC_ConfigChannel+0x684>)
 8103b7c:	4618      	mov	r0, r3
 8103b7e:	f7fe ffe5 	bl	8102b4c <LL_ADC_GetCommonPathInternalCh>
 8103b82:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8103b84:	687b      	ldr	r3, [r7, #4]
 8103b86:	681b      	ldr	r3, [r3, #0]
 8103b88:	4a5e      	ldr	r2, [pc, #376]	; (8103d04 <HAL_ADC_ConfigChannel+0x678>)
 8103b8a:	4293      	cmp	r3, r2
 8103b8c:	d004      	beq.n	8103b98 <HAL_ADC_ConfigChannel+0x50c>
 8103b8e:	687b      	ldr	r3, [r7, #4]
 8103b90:	681b      	ldr	r3, [r3, #0]
 8103b92:	4a5d      	ldr	r2, [pc, #372]	; (8103d08 <HAL_ADC_ConfigChannel+0x67c>)
 8103b94:	4293      	cmp	r3, r2
 8103b96:	d10e      	bne.n	8103bb6 <HAL_ADC_ConfigChannel+0x52a>
 8103b98:	485a      	ldr	r0, [pc, #360]	; (8103d04 <HAL_ADC_ConfigChannel+0x678>)
 8103b9a:	f7ff f945 	bl	8102e28 <LL_ADC_IsEnabled>
 8103b9e:	4604      	mov	r4, r0
 8103ba0:	4859      	ldr	r0, [pc, #356]	; (8103d08 <HAL_ADC_ConfigChannel+0x67c>)
 8103ba2:	f7ff f941 	bl	8102e28 <LL_ADC_IsEnabled>
 8103ba6:	4603      	mov	r3, r0
 8103ba8:	4323      	orrs	r3, r4
 8103baa:	2b00      	cmp	r3, #0
 8103bac:	bf0c      	ite	eq
 8103bae:	2301      	moveq	r3, #1
 8103bb0:	2300      	movne	r3, #0
 8103bb2:	b2db      	uxtb	r3, r3
 8103bb4:	e008      	b.n	8103bc8 <HAL_ADC_ConfigChannel+0x53c>
 8103bb6:	4857      	ldr	r0, [pc, #348]	; (8103d14 <HAL_ADC_ConfigChannel+0x688>)
 8103bb8:	f7ff f936 	bl	8102e28 <LL_ADC_IsEnabled>
 8103bbc:	4603      	mov	r3, r0
 8103bbe:	2b00      	cmp	r3, #0
 8103bc0:	bf0c      	ite	eq
 8103bc2:	2301      	moveq	r3, #1
 8103bc4:	2300      	movne	r3, #0
 8103bc6:	b2db      	uxtb	r3, r3
 8103bc8:	2b00      	cmp	r3, #0
 8103bca:	d07d      	beq.n	8103cc8 <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8103bcc:	683b      	ldr	r3, [r7, #0]
 8103bce:	681b      	ldr	r3, [r3, #0]
 8103bd0:	4a51      	ldr	r2, [pc, #324]	; (8103d18 <HAL_ADC_ConfigChannel+0x68c>)
 8103bd2:	4293      	cmp	r3, r2
 8103bd4:	d130      	bne.n	8103c38 <HAL_ADC_ConfigChannel+0x5ac>
 8103bd6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8103bd8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8103bdc:	2b00      	cmp	r3, #0
 8103bde:	d12b      	bne.n	8103c38 <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8103be0:	687b      	ldr	r3, [r7, #4]
 8103be2:	681b      	ldr	r3, [r3, #0]
 8103be4:	4a4b      	ldr	r2, [pc, #300]	; (8103d14 <HAL_ADC_ConfigChannel+0x688>)
 8103be6:	4293      	cmp	r3, r2
 8103be8:	f040 8081 	bne.w	8103cee <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8103bec:	687b      	ldr	r3, [r7, #4]
 8103bee:	681b      	ldr	r3, [r3, #0]
 8103bf0:	4a44      	ldr	r2, [pc, #272]	; (8103d04 <HAL_ADC_ConfigChannel+0x678>)
 8103bf2:	4293      	cmp	r3, r2
 8103bf4:	d004      	beq.n	8103c00 <HAL_ADC_ConfigChannel+0x574>
 8103bf6:	687b      	ldr	r3, [r7, #4]
 8103bf8:	681b      	ldr	r3, [r3, #0]
 8103bfa:	4a43      	ldr	r2, [pc, #268]	; (8103d08 <HAL_ADC_ConfigChannel+0x67c>)
 8103bfc:	4293      	cmp	r3, r2
 8103bfe:	d101      	bne.n	8103c04 <HAL_ADC_ConfigChannel+0x578>
 8103c00:	4a42      	ldr	r2, [pc, #264]	; (8103d0c <HAL_ADC_ConfigChannel+0x680>)
 8103c02:	e000      	b.n	8103c06 <HAL_ADC_ConfigChannel+0x57a>
 8103c04:	4a42      	ldr	r2, [pc, #264]	; (8103d10 <HAL_ADC_ConfigChannel+0x684>)
 8103c06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8103c08:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8103c0c:	4619      	mov	r1, r3
 8103c0e:	4610      	mov	r0, r2
 8103c10:	f7fe ff89 	bl	8102b26 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8103c14:	4b41      	ldr	r3, [pc, #260]	; (8103d1c <HAL_ADC_ConfigChannel+0x690>)
 8103c16:	681b      	ldr	r3, [r3, #0]
 8103c18:	099b      	lsrs	r3, r3, #6
 8103c1a:	4a41      	ldr	r2, [pc, #260]	; (8103d20 <HAL_ADC_ConfigChannel+0x694>)
 8103c1c:	fba2 2303 	umull	r2, r3, r2, r3
 8103c20:	099b      	lsrs	r3, r3, #6
 8103c22:	3301      	adds	r3, #1
 8103c24:	005b      	lsls	r3, r3, #1
 8103c26:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8103c28:	e002      	b.n	8103c30 <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 8103c2a:	68bb      	ldr	r3, [r7, #8]
 8103c2c:	3b01      	subs	r3, #1
 8103c2e:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8103c30:	68bb      	ldr	r3, [r7, #8]
 8103c32:	2b00      	cmp	r3, #0
 8103c34:	d1f9      	bne.n	8103c2a <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8103c36:	e05a      	b.n	8103cee <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8103c38:	683b      	ldr	r3, [r7, #0]
 8103c3a:	681b      	ldr	r3, [r3, #0]
 8103c3c:	4a39      	ldr	r2, [pc, #228]	; (8103d24 <HAL_ADC_ConfigChannel+0x698>)
 8103c3e:	4293      	cmp	r3, r2
 8103c40:	d11e      	bne.n	8103c80 <HAL_ADC_ConfigChannel+0x5f4>
 8103c42:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8103c44:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8103c48:	2b00      	cmp	r3, #0
 8103c4a:	d119      	bne.n	8103c80 <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8103c4c:	687b      	ldr	r3, [r7, #4]
 8103c4e:	681b      	ldr	r3, [r3, #0]
 8103c50:	4a30      	ldr	r2, [pc, #192]	; (8103d14 <HAL_ADC_ConfigChannel+0x688>)
 8103c52:	4293      	cmp	r3, r2
 8103c54:	d14b      	bne.n	8103cee <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8103c56:	687b      	ldr	r3, [r7, #4]
 8103c58:	681b      	ldr	r3, [r3, #0]
 8103c5a:	4a2a      	ldr	r2, [pc, #168]	; (8103d04 <HAL_ADC_ConfigChannel+0x678>)
 8103c5c:	4293      	cmp	r3, r2
 8103c5e:	d004      	beq.n	8103c6a <HAL_ADC_ConfigChannel+0x5de>
 8103c60:	687b      	ldr	r3, [r7, #4]
 8103c62:	681b      	ldr	r3, [r3, #0]
 8103c64:	4a28      	ldr	r2, [pc, #160]	; (8103d08 <HAL_ADC_ConfigChannel+0x67c>)
 8103c66:	4293      	cmp	r3, r2
 8103c68:	d101      	bne.n	8103c6e <HAL_ADC_ConfigChannel+0x5e2>
 8103c6a:	4a28      	ldr	r2, [pc, #160]	; (8103d0c <HAL_ADC_ConfigChannel+0x680>)
 8103c6c:	e000      	b.n	8103c70 <HAL_ADC_ConfigChannel+0x5e4>
 8103c6e:	4a28      	ldr	r2, [pc, #160]	; (8103d10 <HAL_ADC_ConfigChannel+0x684>)
 8103c70:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8103c72:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8103c76:	4619      	mov	r1, r3
 8103c78:	4610      	mov	r0, r2
 8103c7a:	f7fe ff54 	bl	8102b26 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8103c7e:	e036      	b.n	8103cee <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8103c80:	683b      	ldr	r3, [r7, #0]
 8103c82:	681b      	ldr	r3, [r3, #0]
 8103c84:	4a28      	ldr	r2, [pc, #160]	; (8103d28 <HAL_ADC_ConfigChannel+0x69c>)
 8103c86:	4293      	cmp	r3, r2
 8103c88:	d131      	bne.n	8103cee <HAL_ADC_ConfigChannel+0x662>
 8103c8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8103c8c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8103c90:	2b00      	cmp	r3, #0
 8103c92:	d12c      	bne.n	8103cee <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8103c94:	687b      	ldr	r3, [r7, #4]
 8103c96:	681b      	ldr	r3, [r3, #0]
 8103c98:	4a1e      	ldr	r2, [pc, #120]	; (8103d14 <HAL_ADC_ConfigChannel+0x688>)
 8103c9a:	4293      	cmp	r3, r2
 8103c9c:	d127      	bne.n	8103cee <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8103c9e:	687b      	ldr	r3, [r7, #4]
 8103ca0:	681b      	ldr	r3, [r3, #0]
 8103ca2:	4a18      	ldr	r2, [pc, #96]	; (8103d04 <HAL_ADC_ConfigChannel+0x678>)
 8103ca4:	4293      	cmp	r3, r2
 8103ca6:	d004      	beq.n	8103cb2 <HAL_ADC_ConfigChannel+0x626>
 8103ca8:	687b      	ldr	r3, [r7, #4]
 8103caa:	681b      	ldr	r3, [r3, #0]
 8103cac:	4a16      	ldr	r2, [pc, #88]	; (8103d08 <HAL_ADC_ConfigChannel+0x67c>)
 8103cae:	4293      	cmp	r3, r2
 8103cb0:	d101      	bne.n	8103cb6 <HAL_ADC_ConfigChannel+0x62a>
 8103cb2:	4a16      	ldr	r2, [pc, #88]	; (8103d0c <HAL_ADC_ConfigChannel+0x680>)
 8103cb4:	e000      	b.n	8103cb8 <HAL_ADC_ConfigChannel+0x62c>
 8103cb6:	4a16      	ldr	r2, [pc, #88]	; (8103d10 <HAL_ADC_ConfigChannel+0x684>)
 8103cb8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8103cba:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8103cbe:	4619      	mov	r1, r3
 8103cc0:	4610      	mov	r0, r2
 8103cc2:	f7fe ff30 	bl	8102b26 <LL_ADC_SetCommonPathInternalCh>
 8103cc6:	e012      	b.n	8103cee <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8103cc8:	687b      	ldr	r3, [r7, #4]
 8103cca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103ccc:	f043 0220 	orr.w	r2, r3, #32
 8103cd0:	687b      	ldr	r3, [r7, #4]
 8103cd2:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8103cd4:	2301      	movs	r3, #1
 8103cd6:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8103cda:	e008      	b.n	8103cee <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8103cdc:	687b      	ldr	r3, [r7, #4]
 8103cde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103ce0:	f043 0220 	orr.w	r2, r3, #32
 8103ce4:	687b      	ldr	r3, [r7, #4]
 8103ce6:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8103ce8:	2301      	movs	r3, #1
 8103cea:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8103cee:	687b      	ldr	r3, [r7, #4]
 8103cf0:	2200      	movs	r2, #0
 8103cf2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8103cf6:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8103cfa:	4618      	mov	r0, r3
 8103cfc:	3784      	adds	r7, #132	; 0x84
 8103cfe:	46bd      	mov	sp, r7
 8103d00:	bd90      	pop	{r4, r7, pc}
 8103d02:	bf00      	nop
 8103d04:	40022000 	.word	0x40022000
 8103d08:	40022100 	.word	0x40022100
 8103d0c:	40022300 	.word	0x40022300
 8103d10:	58026300 	.word	0x58026300
 8103d14:	58026000 	.word	0x58026000
 8103d18:	cb840000 	.word	0xcb840000
 8103d1c:	10000000 	.word	0x10000000
 8103d20:	053e2d63 	.word	0x053e2d63
 8103d24:	c7520000 	.word	0xc7520000
 8103d28:	cfb80000 	.word	0xcfb80000

08103d2c <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8103d2c:	b580      	push	{r7, lr}
 8103d2e:	b084      	sub	sp, #16
 8103d30:	af00      	add	r7, sp, #0
 8103d32:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8103d34:	687b      	ldr	r3, [r7, #4]
 8103d36:	681b      	ldr	r3, [r3, #0]
 8103d38:	4a79      	ldr	r2, [pc, #484]	; (8103f20 <ADC_ConfigureBoostMode+0x1f4>)
 8103d3a:	4293      	cmp	r3, r2
 8103d3c:	d004      	beq.n	8103d48 <ADC_ConfigureBoostMode+0x1c>
 8103d3e:	687b      	ldr	r3, [r7, #4]
 8103d40:	681b      	ldr	r3, [r3, #0]
 8103d42:	4a78      	ldr	r2, [pc, #480]	; (8103f24 <ADC_ConfigureBoostMode+0x1f8>)
 8103d44:	4293      	cmp	r3, r2
 8103d46:	d109      	bne.n	8103d5c <ADC_ConfigureBoostMode+0x30>
 8103d48:	4b77      	ldr	r3, [pc, #476]	; (8103f28 <ADC_ConfigureBoostMode+0x1fc>)
 8103d4a:	689b      	ldr	r3, [r3, #8]
 8103d4c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8103d50:	2b00      	cmp	r3, #0
 8103d52:	bf14      	ite	ne
 8103d54:	2301      	movne	r3, #1
 8103d56:	2300      	moveq	r3, #0
 8103d58:	b2db      	uxtb	r3, r3
 8103d5a:	e008      	b.n	8103d6e <ADC_ConfigureBoostMode+0x42>
 8103d5c:	4b73      	ldr	r3, [pc, #460]	; (8103f2c <ADC_ConfigureBoostMode+0x200>)
 8103d5e:	689b      	ldr	r3, [r3, #8]
 8103d60:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8103d64:	2b00      	cmp	r3, #0
 8103d66:	bf14      	ite	ne
 8103d68:	2301      	movne	r3, #1
 8103d6a:	2300      	moveq	r3, #0
 8103d6c:	b2db      	uxtb	r3, r3
 8103d6e:	2b00      	cmp	r3, #0
 8103d70:	d01c      	beq.n	8103dac <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8103d72:	f005 ff23 	bl	8109bbc <HAL_RCC_GetHCLKFreq>
 8103d76:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8103d78:	687b      	ldr	r3, [r7, #4]
 8103d7a:	685b      	ldr	r3, [r3, #4]
 8103d7c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8103d80:	d010      	beq.n	8103da4 <ADC_ConfigureBoostMode+0x78>
 8103d82:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8103d86:	d871      	bhi.n	8103e6c <ADC_ConfigureBoostMode+0x140>
 8103d88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8103d8c:	d002      	beq.n	8103d94 <ADC_ConfigureBoostMode+0x68>
 8103d8e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8103d92:	d16b      	bne.n	8103e6c <ADC_ConfigureBoostMode+0x140>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8103d94:	687b      	ldr	r3, [r7, #4]
 8103d96:	685b      	ldr	r3, [r3, #4]
 8103d98:	0c1b      	lsrs	r3, r3, #16
 8103d9a:	68fa      	ldr	r2, [r7, #12]
 8103d9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8103da0:	60fb      	str	r3, [r7, #12]
        break;
 8103da2:	e066      	b.n	8103e72 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8103da4:	68fb      	ldr	r3, [r7, #12]
 8103da6:	089b      	lsrs	r3, r3, #2
 8103da8:	60fb      	str	r3, [r7, #12]
        break;
 8103daa:	e062      	b.n	8103e72 <ADC_ConfigureBoostMode+0x146>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8103dac:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8103db0:	f006 fee4 	bl	810ab7c <HAL_RCCEx_GetPeriphCLKFreq>
 8103db4:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8103db6:	687b      	ldr	r3, [r7, #4]
 8103db8:	685b      	ldr	r3, [r3, #4]
 8103dba:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8103dbe:	d051      	beq.n	8103e64 <ADC_ConfigureBoostMode+0x138>
 8103dc0:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8103dc4:	d854      	bhi.n	8103e70 <ADC_ConfigureBoostMode+0x144>
 8103dc6:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8103dca:	d047      	beq.n	8103e5c <ADC_ConfigureBoostMode+0x130>
 8103dcc:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8103dd0:	d84e      	bhi.n	8103e70 <ADC_ConfigureBoostMode+0x144>
 8103dd2:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8103dd6:	d03d      	beq.n	8103e54 <ADC_ConfigureBoostMode+0x128>
 8103dd8:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8103ddc:	d848      	bhi.n	8103e70 <ADC_ConfigureBoostMode+0x144>
 8103dde:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8103de2:	d033      	beq.n	8103e4c <ADC_ConfigureBoostMode+0x120>
 8103de4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8103de8:	d842      	bhi.n	8103e70 <ADC_ConfigureBoostMode+0x144>
 8103dea:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8103dee:	d029      	beq.n	8103e44 <ADC_ConfigureBoostMode+0x118>
 8103df0:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8103df4:	d83c      	bhi.n	8103e70 <ADC_ConfigureBoostMode+0x144>
 8103df6:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8103dfa:	d01a      	beq.n	8103e32 <ADC_ConfigureBoostMode+0x106>
 8103dfc:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8103e00:	d836      	bhi.n	8103e70 <ADC_ConfigureBoostMode+0x144>
 8103e02:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8103e06:	d014      	beq.n	8103e32 <ADC_ConfigureBoostMode+0x106>
 8103e08:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8103e0c:	d830      	bhi.n	8103e70 <ADC_ConfigureBoostMode+0x144>
 8103e0e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8103e12:	d00e      	beq.n	8103e32 <ADC_ConfigureBoostMode+0x106>
 8103e14:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8103e18:	d82a      	bhi.n	8103e70 <ADC_ConfigureBoostMode+0x144>
 8103e1a:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8103e1e:	d008      	beq.n	8103e32 <ADC_ConfigureBoostMode+0x106>
 8103e20:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8103e24:	d824      	bhi.n	8103e70 <ADC_ConfigureBoostMode+0x144>
 8103e26:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8103e2a:	d002      	beq.n	8103e32 <ADC_ConfigureBoostMode+0x106>
 8103e2c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8103e30:	d11e      	bne.n	8103e70 <ADC_ConfigureBoostMode+0x144>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8103e32:	687b      	ldr	r3, [r7, #4]
 8103e34:	685b      	ldr	r3, [r3, #4]
 8103e36:	0c9b      	lsrs	r3, r3, #18
 8103e38:	005b      	lsls	r3, r3, #1
 8103e3a:	68fa      	ldr	r2, [r7, #12]
 8103e3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8103e40:	60fb      	str	r3, [r7, #12]
        break;
 8103e42:	e016      	b.n	8103e72 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8103e44:	68fb      	ldr	r3, [r7, #12]
 8103e46:	091b      	lsrs	r3, r3, #4
 8103e48:	60fb      	str	r3, [r7, #12]
        break;
 8103e4a:	e012      	b.n	8103e72 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8103e4c:	68fb      	ldr	r3, [r7, #12]
 8103e4e:	095b      	lsrs	r3, r3, #5
 8103e50:	60fb      	str	r3, [r7, #12]
        break;
 8103e52:	e00e      	b.n	8103e72 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8103e54:	68fb      	ldr	r3, [r7, #12]
 8103e56:	099b      	lsrs	r3, r3, #6
 8103e58:	60fb      	str	r3, [r7, #12]
        break;
 8103e5a:	e00a      	b.n	8103e72 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8103e5c:	68fb      	ldr	r3, [r7, #12]
 8103e5e:	09db      	lsrs	r3, r3, #7
 8103e60:	60fb      	str	r3, [r7, #12]
        break;
 8103e62:	e006      	b.n	8103e72 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8103e64:	68fb      	ldr	r3, [r7, #12]
 8103e66:	0a1b      	lsrs	r3, r3, #8
 8103e68:	60fb      	str	r3, [r7, #12]
        break;
 8103e6a:	e002      	b.n	8103e72 <ADC_ConfigureBoostMode+0x146>
        break;
 8103e6c:	bf00      	nop
 8103e6e:	e000      	b.n	8103e72 <ADC_ConfigureBoostMode+0x146>
      default:
        break;
 8103e70:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8103e72:	f7fe fe39 	bl	8102ae8 <HAL_GetREVID>
 8103e76:	4603      	mov	r3, r0
 8103e78:	f241 0203 	movw	r2, #4099	; 0x1003
 8103e7c:	4293      	cmp	r3, r2
 8103e7e:	d815      	bhi.n	8103eac <ADC_ConfigureBoostMode+0x180>
  {
    if (freq > 20000000UL)
 8103e80:	68fb      	ldr	r3, [r7, #12]
 8103e82:	4a2b      	ldr	r2, [pc, #172]	; (8103f30 <ADC_ConfigureBoostMode+0x204>)
 8103e84:	4293      	cmp	r3, r2
 8103e86:	d908      	bls.n	8103e9a <ADC_ConfigureBoostMode+0x16e>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8103e88:	687b      	ldr	r3, [r7, #4]
 8103e8a:	681b      	ldr	r3, [r3, #0]
 8103e8c:	689a      	ldr	r2, [r3, #8]
 8103e8e:	687b      	ldr	r3, [r7, #4]
 8103e90:	681b      	ldr	r3, [r3, #0]
 8103e92:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8103e96:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8103e98:	e03e      	b.n	8103f18 <ADC_ConfigureBoostMode+0x1ec>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8103e9a:	687b      	ldr	r3, [r7, #4]
 8103e9c:	681b      	ldr	r3, [r3, #0]
 8103e9e:	689a      	ldr	r2, [r3, #8]
 8103ea0:	687b      	ldr	r3, [r7, #4]
 8103ea2:	681b      	ldr	r3, [r3, #0]
 8103ea4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8103ea8:	609a      	str	r2, [r3, #8]
}
 8103eaa:	e035      	b.n	8103f18 <ADC_ConfigureBoostMode+0x1ec>
    freq /= 2U; /* divider by 2 for Rev.V */
 8103eac:	68fb      	ldr	r3, [r7, #12]
 8103eae:	085b      	lsrs	r3, r3, #1
 8103eb0:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8103eb2:	68fb      	ldr	r3, [r7, #12]
 8103eb4:	4a1f      	ldr	r2, [pc, #124]	; (8103f34 <ADC_ConfigureBoostMode+0x208>)
 8103eb6:	4293      	cmp	r3, r2
 8103eb8:	d808      	bhi.n	8103ecc <ADC_ConfigureBoostMode+0x1a0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8103eba:	687b      	ldr	r3, [r7, #4]
 8103ebc:	681b      	ldr	r3, [r3, #0]
 8103ebe:	689a      	ldr	r2, [r3, #8]
 8103ec0:	687b      	ldr	r3, [r7, #4]
 8103ec2:	681b      	ldr	r3, [r3, #0]
 8103ec4:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8103ec8:	609a      	str	r2, [r3, #8]
}
 8103eca:	e025      	b.n	8103f18 <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 12500000UL)
 8103ecc:	68fb      	ldr	r3, [r7, #12]
 8103ece:	4a1a      	ldr	r2, [pc, #104]	; (8103f38 <ADC_ConfigureBoostMode+0x20c>)
 8103ed0:	4293      	cmp	r3, r2
 8103ed2:	d80a      	bhi.n	8103eea <ADC_ConfigureBoostMode+0x1be>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8103ed4:	687b      	ldr	r3, [r7, #4]
 8103ed6:	681b      	ldr	r3, [r3, #0]
 8103ed8:	689b      	ldr	r3, [r3, #8]
 8103eda:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8103ede:	687b      	ldr	r3, [r7, #4]
 8103ee0:	681b      	ldr	r3, [r3, #0]
 8103ee2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8103ee6:	609a      	str	r2, [r3, #8]
}
 8103ee8:	e016      	b.n	8103f18 <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 25000000UL)
 8103eea:	68fb      	ldr	r3, [r7, #12]
 8103eec:	4a13      	ldr	r2, [pc, #76]	; (8103f3c <ADC_ConfigureBoostMode+0x210>)
 8103eee:	4293      	cmp	r3, r2
 8103ef0:	d80a      	bhi.n	8103f08 <ADC_ConfigureBoostMode+0x1dc>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8103ef2:	687b      	ldr	r3, [r7, #4]
 8103ef4:	681b      	ldr	r3, [r3, #0]
 8103ef6:	689b      	ldr	r3, [r3, #8]
 8103ef8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8103efc:	687b      	ldr	r3, [r7, #4]
 8103efe:	681b      	ldr	r3, [r3, #0]
 8103f00:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8103f04:	609a      	str	r2, [r3, #8]
}
 8103f06:	e007      	b.n	8103f18 <ADC_ConfigureBoostMode+0x1ec>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8103f08:	687b      	ldr	r3, [r7, #4]
 8103f0a:	681b      	ldr	r3, [r3, #0]
 8103f0c:	689a      	ldr	r2, [r3, #8]
 8103f0e:	687b      	ldr	r3, [r7, #4]
 8103f10:	681b      	ldr	r3, [r3, #0]
 8103f12:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8103f16:	609a      	str	r2, [r3, #8]
}
 8103f18:	bf00      	nop
 8103f1a:	3710      	adds	r7, #16
 8103f1c:	46bd      	mov	sp, r7
 8103f1e:	bd80      	pop	{r7, pc}
 8103f20:	40022000 	.word	0x40022000
 8103f24:	40022100 	.word	0x40022100
 8103f28:	40022300 	.word	0x40022300
 8103f2c:	58026300 	.word	0x58026300
 8103f30:	01312d00 	.word	0x01312d00
 8103f34:	005f5e10 	.word	0x005f5e10
 8103f38:	00bebc20 	.word	0x00bebc20
 8103f3c:	017d7840 	.word	0x017d7840

08103f40 <LL_ADC_IsEnabled>:
{
 8103f40:	b480      	push	{r7}
 8103f42:	b083      	sub	sp, #12
 8103f44:	af00      	add	r7, sp, #0
 8103f46:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8103f48:	687b      	ldr	r3, [r7, #4]
 8103f4a:	689b      	ldr	r3, [r3, #8]
 8103f4c:	f003 0301 	and.w	r3, r3, #1
 8103f50:	2b01      	cmp	r3, #1
 8103f52:	d101      	bne.n	8103f58 <LL_ADC_IsEnabled+0x18>
 8103f54:	2301      	movs	r3, #1
 8103f56:	e000      	b.n	8103f5a <LL_ADC_IsEnabled+0x1a>
 8103f58:	2300      	movs	r3, #0
}
 8103f5a:	4618      	mov	r0, r3
 8103f5c:	370c      	adds	r7, #12
 8103f5e:	46bd      	mov	sp, r7
 8103f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103f64:	4770      	bx	lr

08103f66 <LL_ADC_REG_IsConversionOngoing>:
{
 8103f66:	b480      	push	{r7}
 8103f68:	b083      	sub	sp, #12
 8103f6a:	af00      	add	r7, sp, #0
 8103f6c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8103f6e:	687b      	ldr	r3, [r7, #4]
 8103f70:	689b      	ldr	r3, [r3, #8]
 8103f72:	f003 0304 	and.w	r3, r3, #4
 8103f76:	2b04      	cmp	r3, #4
 8103f78:	d101      	bne.n	8103f7e <LL_ADC_REG_IsConversionOngoing+0x18>
 8103f7a:	2301      	movs	r3, #1
 8103f7c:	e000      	b.n	8103f80 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8103f7e:	2300      	movs	r3, #0
}
 8103f80:	4618      	mov	r0, r3
 8103f82:	370c      	adds	r7, #12
 8103f84:	46bd      	mov	sp, r7
 8103f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103f8a:	4770      	bx	lr

08103f8c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8103f8c:	b480      	push	{r7}
 8103f8e:	b083      	sub	sp, #12
 8103f90:	af00      	add	r7, sp, #0
 8103f92:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8103f94:	bf00      	nop
 8103f96:	370c      	adds	r7, #12
 8103f98:	46bd      	mov	sp, r7
 8103f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103f9e:	4770      	bx	lr

08103fa0 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8103fa0:	b480      	push	{r7}
 8103fa2:	b083      	sub	sp, #12
 8103fa4:	af00      	add	r7, sp, #0
 8103fa6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8103fa8:	bf00      	nop
 8103faa:	370c      	adds	r7, #12
 8103fac:	46bd      	mov	sp, r7
 8103fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103fb2:	4770      	bx	lr

08103fb4 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8103fb4:	b480      	push	{r7}
 8103fb6:	b083      	sub	sp, #12
 8103fb8:	af00      	add	r7, sp, #0
 8103fba:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8103fbc:	bf00      	nop
 8103fbe:	370c      	adds	r7, #12
 8103fc0:	46bd      	mov	sp, r7
 8103fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103fc6:	4770      	bx	lr

08103fc8 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8103fc8:	b480      	push	{r7}
 8103fca:	b083      	sub	sp, #12
 8103fcc:	af00      	add	r7, sp, #0
 8103fce:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8103fd0:	bf00      	nop
 8103fd2:	370c      	adds	r7, #12
 8103fd4:	46bd      	mov	sp, r7
 8103fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103fda:	4770      	bx	lr

08103fdc <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8103fdc:	b480      	push	{r7}
 8103fde:	b083      	sub	sp, #12
 8103fe0:	af00      	add	r7, sp, #0
 8103fe2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8103fe4:	bf00      	nop
 8103fe6:	370c      	adds	r7, #12
 8103fe8:	46bd      	mov	sp, r7
 8103fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103fee:	4770      	bx	lr

08103ff0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8103ff0:	b590      	push	{r4, r7, lr}
 8103ff2:	b09f      	sub	sp, #124	; 0x7c
 8103ff4:	af00      	add	r7, sp, #0
 8103ff6:	6078      	str	r0, [r7, #4]
 8103ff8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8103ffa:	2300      	movs	r3, #0
 8103ffc:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8104000:	687b      	ldr	r3, [r7, #4]
 8104002:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8104006:	2b01      	cmp	r3, #1
 8104008:	d101      	bne.n	810400e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 810400a:	2302      	movs	r3, #2
 810400c:	e0c4      	b.n	8104198 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
 810400e:	687b      	ldr	r3, [r7, #4]
 8104010:	2201      	movs	r2, #1
 8104012:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8104016:	2300      	movs	r3, #0
 8104018:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 810401a:	2300      	movs	r3, #0
 810401c:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 810401e:	687b      	ldr	r3, [r7, #4]
 8104020:	681b      	ldr	r3, [r3, #0]
 8104022:	4a5f      	ldr	r2, [pc, #380]	; (81041a0 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8104024:	4293      	cmp	r3, r2
 8104026:	d102      	bne.n	810402e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8104028:	4b5e      	ldr	r3, [pc, #376]	; (81041a4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 810402a:	60bb      	str	r3, [r7, #8]
 810402c:	e001      	b.n	8104032 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 810402e:	2300      	movs	r3, #0
 8104030:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8104032:	68bb      	ldr	r3, [r7, #8]
 8104034:	2b00      	cmp	r3, #0
 8104036:	d10b      	bne.n	8104050 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8104038:	687b      	ldr	r3, [r7, #4]
 810403a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810403c:	f043 0220 	orr.w	r2, r3, #32
 8104040:	687b      	ldr	r3, [r7, #4]
 8104042:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8104044:	687b      	ldr	r3, [r7, #4]
 8104046:	2200      	movs	r2, #0
 8104048:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 810404c:	2301      	movs	r3, #1
 810404e:	e0a3      	b.n	8104198 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8104050:	68bb      	ldr	r3, [r7, #8]
 8104052:	4618      	mov	r0, r3
 8104054:	f7ff ff87 	bl	8103f66 <LL_ADC_REG_IsConversionOngoing>
 8104058:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 810405a:	687b      	ldr	r3, [r7, #4]
 810405c:	681b      	ldr	r3, [r3, #0]
 810405e:	4618      	mov	r0, r3
 8104060:	f7ff ff81 	bl	8103f66 <LL_ADC_REG_IsConversionOngoing>
 8104064:	4603      	mov	r3, r0
 8104066:	2b00      	cmp	r3, #0
 8104068:	f040 8085 	bne.w	8104176 <HAL_ADCEx_MultiModeConfigChannel+0x186>
      && (tmphadcSlave_conversion_on_going == 0UL))
 810406c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 810406e:	2b00      	cmp	r3, #0
 8104070:	f040 8081 	bne.w	8104176 <HAL_ADCEx_MultiModeConfigChannel+0x186>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8104074:	687b      	ldr	r3, [r7, #4]
 8104076:	681b      	ldr	r3, [r3, #0]
 8104078:	4a49      	ldr	r2, [pc, #292]	; (81041a0 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 810407a:	4293      	cmp	r3, r2
 810407c:	d004      	beq.n	8104088 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 810407e:	687b      	ldr	r3, [r7, #4]
 8104080:	681b      	ldr	r3, [r3, #0]
 8104082:	4a48      	ldr	r2, [pc, #288]	; (81041a4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8104084:	4293      	cmp	r3, r2
 8104086:	d101      	bne.n	810408c <HAL_ADCEx_MultiModeConfigChannel+0x9c>
 8104088:	4b47      	ldr	r3, [pc, #284]	; (81041a8 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 810408a:	e000      	b.n	810408e <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 810408c:	4b47      	ldr	r3, [pc, #284]	; (81041ac <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 810408e:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8104090:	683b      	ldr	r3, [r7, #0]
 8104092:	681b      	ldr	r3, [r3, #0]
 8104094:	2b00      	cmp	r3, #0
 8104096:	d03b      	beq.n	8104110 <HAL_ADCEx_MultiModeConfigChannel+0x120>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8104098:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 810409a:	689b      	ldr	r3, [r3, #8]
 810409c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 81040a0:	683b      	ldr	r3, [r7, #0]
 81040a2:	685b      	ldr	r3, [r3, #4]
 81040a4:	431a      	orrs	r2, r3
 81040a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 81040a8:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 81040aa:	687b      	ldr	r3, [r7, #4]
 81040ac:	681b      	ldr	r3, [r3, #0]
 81040ae:	4a3c      	ldr	r2, [pc, #240]	; (81041a0 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 81040b0:	4293      	cmp	r3, r2
 81040b2:	d004      	beq.n	81040be <HAL_ADCEx_MultiModeConfigChannel+0xce>
 81040b4:	687b      	ldr	r3, [r7, #4]
 81040b6:	681b      	ldr	r3, [r3, #0]
 81040b8:	4a3a      	ldr	r2, [pc, #232]	; (81041a4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 81040ba:	4293      	cmp	r3, r2
 81040bc:	d10e      	bne.n	81040dc <HAL_ADCEx_MultiModeConfigChannel+0xec>
 81040be:	4838      	ldr	r0, [pc, #224]	; (81041a0 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 81040c0:	f7ff ff3e 	bl	8103f40 <LL_ADC_IsEnabled>
 81040c4:	4604      	mov	r4, r0
 81040c6:	4837      	ldr	r0, [pc, #220]	; (81041a4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 81040c8:	f7ff ff3a 	bl	8103f40 <LL_ADC_IsEnabled>
 81040cc:	4603      	mov	r3, r0
 81040ce:	4323      	orrs	r3, r4
 81040d0:	2b00      	cmp	r3, #0
 81040d2:	bf0c      	ite	eq
 81040d4:	2301      	moveq	r3, #1
 81040d6:	2300      	movne	r3, #0
 81040d8:	b2db      	uxtb	r3, r3
 81040da:	e008      	b.n	81040ee <HAL_ADCEx_MultiModeConfigChannel+0xfe>
 81040dc:	4834      	ldr	r0, [pc, #208]	; (81041b0 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 81040de:	f7ff ff2f 	bl	8103f40 <LL_ADC_IsEnabled>
 81040e2:	4603      	mov	r3, r0
 81040e4:	2b00      	cmp	r3, #0
 81040e6:	bf0c      	ite	eq
 81040e8:	2301      	moveq	r3, #1
 81040ea:	2300      	movne	r3, #0
 81040ec:	b2db      	uxtb	r3, r3
 81040ee:	2b00      	cmp	r3, #0
 81040f0:	d04b      	beq.n	810418a <HAL_ADCEx_MultiModeConfigChannel+0x19a>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 81040f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 81040f4:	689b      	ldr	r3, [r3, #8]
 81040f6:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 81040fa:	f023 030f 	bic.w	r3, r3, #15
 81040fe:	683a      	ldr	r2, [r7, #0]
 8104100:	6811      	ldr	r1, [r2, #0]
 8104102:	683a      	ldr	r2, [r7, #0]
 8104104:	6892      	ldr	r2, [r2, #8]
 8104106:	430a      	orrs	r2, r1
 8104108:	431a      	orrs	r2, r3
 810410a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 810410c:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 810410e:	e03c      	b.n	810418a <HAL_ADCEx_MultiModeConfigChannel+0x19a>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8104110:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8104112:	689b      	ldr	r3, [r3, #8]
 8104114:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8104118:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 810411a:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 810411c:	687b      	ldr	r3, [r7, #4]
 810411e:	681b      	ldr	r3, [r3, #0]
 8104120:	4a1f      	ldr	r2, [pc, #124]	; (81041a0 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8104122:	4293      	cmp	r3, r2
 8104124:	d004      	beq.n	8104130 <HAL_ADCEx_MultiModeConfigChannel+0x140>
 8104126:	687b      	ldr	r3, [r7, #4]
 8104128:	681b      	ldr	r3, [r3, #0]
 810412a:	4a1e      	ldr	r2, [pc, #120]	; (81041a4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 810412c:	4293      	cmp	r3, r2
 810412e:	d10e      	bne.n	810414e <HAL_ADCEx_MultiModeConfigChannel+0x15e>
 8104130:	481b      	ldr	r0, [pc, #108]	; (81041a0 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8104132:	f7ff ff05 	bl	8103f40 <LL_ADC_IsEnabled>
 8104136:	4604      	mov	r4, r0
 8104138:	481a      	ldr	r0, [pc, #104]	; (81041a4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 810413a:	f7ff ff01 	bl	8103f40 <LL_ADC_IsEnabled>
 810413e:	4603      	mov	r3, r0
 8104140:	4323      	orrs	r3, r4
 8104142:	2b00      	cmp	r3, #0
 8104144:	bf0c      	ite	eq
 8104146:	2301      	moveq	r3, #1
 8104148:	2300      	movne	r3, #0
 810414a:	b2db      	uxtb	r3, r3
 810414c:	e008      	b.n	8104160 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 810414e:	4818      	ldr	r0, [pc, #96]	; (81041b0 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8104150:	f7ff fef6 	bl	8103f40 <LL_ADC_IsEnabled>
 8104154:	4603      	mov	r3, r0
 8104156:	2b00      	cmp	r3, #0
 8104158:	bf0c      	ite	eq
 810415a:	2301      	moveq	r3, #1
 810415c:	2300      	movne	r3, #0
 810415e:	b2db      	uxtb	r3, r3
 8104160:	2b00      	cmp	r3, #0
 8104162:	d012      	beq.n	810418a <HAL_ADCEx_MultiModeConfigChannel+0x19a>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8104164:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8104166:	689b      	ldr	r3, [r3, #8]
 8104168:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 810416c:	f023 030f 	bic.w	r3, r3, #15
 8104170:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8104172:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8104174:	e009      	b.n	810418a <HAL_ADCEx_MultiModeConfigChannel+0x19a>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8104176:	687b      	ldr	r3, [r7, #4]
 8104178:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810417a:	f043 0220 	orr.w	r2, r3, #32
 810417e:	687b      	ldr	r3, [r7, #4]
 8104180:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8104182:	2301      	movs	r3, #1
 8104184:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8104188:	e000      	b.n	810418c <HAL_ADCEx_MultiModeConfigChannel+0x19c>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 810418a:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 810418c:	687b      	ldr	r3, [r7, #4]
 810418e:	2200      	movs	r2, #0
 8104190:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8104194:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8104198:	4618      	mov	r0, r3
 810419a:	377c      	adds	r7, #124	; 0x7c
 810419c:	46bd      	mov	sp, r7
 810419e:	bd90      	pop	{r4, r7, pc}
 81041a0:	40022000 	.word	0x40022000
 81041a4:	40022100 	.word	0x40022100
 81041a8:	40022300 	.word	0x40022300
 81041ac:	58026300 	.word	0x58026300
 81041b0:	58026000 	.word	0x58026000

081041b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 81041b4:	b480      	push	{r7}
 81041b6:	b085      	sub	sp, #20
 81041b8:	af00      	add	r7, sp, #0
 81041ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 81041bc:	687b      	ldr	r3, [r7, #4]
 81041be:	f003 0307 	and.w	r3, r3, #7
 81041c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 81041c4:	4b0c      	ldr	r3, [pc, #48]	; (81041f8 <__NVIC_SetPriorityGrouping+0x44>)
 81041c6:	68db      	ldr	r3, [r3, #12]
 81041c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 81041ca:	68ba      	ldr	r2, [r7, #8]
 81041cc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 81041d0:	4013      	ands	r3, r2
 81041d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 81041d4:	68fb      	ldr	r3, [r7, #12]
 81041d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 81041d8:	68bb      	ldr	r3, [r7, #8]
 81041da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 81041dc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 81041e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81041e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 81041e6:	4a04      	ldr	r2, [pc, #16]	; (81041f8 <__NVIC_SetPriorityGrouping+0x44>)
 81041e8:	68bb      	ldr	r3, [r7, #8]
 81041ea:	60d3      	str	r3, [r2, #12]
}
 81041ec:	bf00      	nop
 81041ee:	3714      	adds	r7, #20
 81041f0:	46bd      	mov	sp, r7
 81041f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81041f6:	4770      	bx	lr
 81041f8:	e000ed00 	.word	0xe000ed00

081041fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 81041fc:	b480      	push	{r7}
 81041fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8104200:	4b04      	ldr	r3, [pc, #16]	; (8104214 <__NVIC_GetPriorityGrouping+0x18>)
 8104202:	68db      	ldr	r3, [r3, #12]
 8104204:	0a1b      	lsrs	r3, r3, #8
 8104206:	f003 0307 	and.w	r3, r3, #7
}
 810420a:	4618      	mov	r0, r3
 810420c:	46bd      	mov	sp, r7
 810420e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104212:	4770      	bx	lr
 8104214:	e000ed00 	.word	0xe000ed00

08104218 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8104218:	b480      	push	{r7}
 810421a:	b083      	sub	sp, #12
 810421c:	af00      	add	r7, sp, #0
 810421e:	4603      	mov	r3, r0
 8104220:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8104222:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8104226:	2b00      	cmp	r3, #0
 8104228:	db0b      	blt.n	8104242 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 810422a:	88fb      	ldrh	r3, [r7, #6]
 810422c:	f003 021f 	and.w	r2, r3, #31
 8104230:	4907      	ldr	r1, [pc, #28]	; (8104250 <__NVIC_EnableIRQ+0x38>)
 8104232:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8104236:	095b      	lsrs	r3, r3, #5
 8104238:	2001      	movs	r0, #1
 810423a:	fa00 f202 	lsl.w	r2, r0, r2
 810423e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8104242:	bf00      	nop
 8104244:	370c      	adds	r7, #12
 8104246:	46bd      	mov	sp, r7
 8104248:	f85d 7b04 	ldr.w	r7, [sp], #4
 810424c:	4770      	bx	lr
 810424e:	bf00      	nop
 8104250:	e000e100 	.word	0xe000e100

08104254 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8104254:	b480      	push	{r7}
 8104256:	b083      	sub	sp, #12
 8104258:	af00      	add	r7, sp, #0
 810425a:	4603      	mov	r3, r0
 810425c:	6039      	str	r1, [r7, #0]
 810425e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8104260:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8104264:	2b00      	cmp	r3, #0
 8104266:	db0a      	blt.n	810427e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8104268:	683b      	ldr	r3, [r7, #0]
 810426a:	b2da      	uxtb	r2, r3
 810426c:	490c      	ldr	r1, [pc, #48]	; (81042a0 <__NVIC_SetPriority+0x4c>)
 810426e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8104272:	0112      	lsls	r2, r2, #4
 8104274:	b2d2      	uxtb	r2, r2
 8104276:	440b      	add	r3, r1
 8104278:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 810427c:	e00a      	b.n	8104294 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 810427e:	683b      	ldr	r3, [r7, #0]
 8104280:	b2da      	uxtb	r2, r3
 8104282:	4908      	ldr	r1, [pc, #32]	; (81042a4 <__NVIC_SetPriority+0x50>)
 8104284:	88fb      	ldrh	r3, [r7, #6]
 8104286:	f003 030f 	and.w	r3, r3, #15
 810428a:	3b04      	subs	r3, #4
 810428c:	0112      	lsls	r2, r2, #4
 810428e:	b2d2      	uxtb	r2, r2
 8104290:	440b      	add	r3, r1
 8104292:	761a      	strb	r2, [r3, #24]
}
 8104294:	bf00      	nop
 8104296:	370c      	adds	r7, #12
 8104298:	46bd      	mov	sp, r7
 810429a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810429e:	4770      	bx	lr
 81042a0:	e000e100 	.word	0xe000e100
 81042a4:	e000ed00 	.word	0xe000ed00

081042a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 81042a8:	b480      	push	{r7}
 81042aa:	b089      	sub	sp, #36	; 0x24
 81042ac:	af00      	add	r7, sp, #0
 81042ae:	60f8      	str	r0, [r7, #12]
 81042b0:	60b9      	str	r1, [r7, #8]
 81042b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 81042b4:	68fb      	ldr	r3, [r7, #12]
 81042b6:	f003 0307 	and.w	r3, r3, #7
 81042ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 81042bc:	69fb      	ldr	r3, [r7, #28]
 81042be:	f1c3 0307 	rsb	r3, r3, #7
 81042c2:	2b04      	cmp	r3, #4
 81042c4:	bf28      	it	cs
 81042c6:	2304      	movcs	r3, #4
 81042c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 81042ca:	69fb      	ldr	r3, [r7, #28]
 81042cc:	3304      	adds	r3, #4
 81042ce:	2b06      	cmp	r3, #6
 81042d0:	d902      	bls.n	81042d8 <NVIC_EncodePriority+0x30>
 81042d2:	69fb      	ldr	r3, [r7, #28]
 81042d4:	3b03      	subs	r3, #3
 81042d6:	e000      	b.n	81042da <NVIC_EncodePriority+0x32>
 81042d8:	2300      	movs	r3, #0
 81042da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 81042dc:	f04f 32ff 	mov.w	r2, #4294967295
 81042e0:	69bb      	ldr	r3, [r7, #24]
 81042e2:	fa02 f303 	lsl.w	r3, r2, r3
 81042e6:	43da      	mvns	r2, r3
 81042e8:	68bb      	ldr	r3, [r7, #8]
 81042ea:	401a      	ands	r2, r3
 81042ec:	697b      	ldr	r3, [r7, #20]
 81042ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 81042f0:	f04f 31ff 	mov.w	r1, #4294967295
 81042f4:	697b      	ldr	r3, [r7, #20]
 81042f6:	fa01 f303 	lsl.w	r3, r1, r3
 81042fa:	43d9      	mvns	r1, r3
 81042fc:	687b      	ldr	r3, [r7, #4]
 81042fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8104300:	4313      	orrs	r3, r2
         );
}
 8104302:	4618      	mov	r0, r3
 8104304:	3724      	adds	r7, #36	; 0x24
 8104306:	46bd      	mov	sp, r7
 8104308:	f85d 7b04 	ldr.w	r7, [sp], #4
 810430c:	4770      	bx	lr

0810430e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 810430e:	b580      	push	{r7, lr}
 8104310:	b082      	sub	sp, #8
 8104312:	af00      	add	r7, sp, #0
 8104314:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8104316:	6878      	ldr	r0, [r7, #4]
 8104318:	f7ff ff4c 	bl	81041b4 <__NVIC_SetPriorityGrouping>
}
 810431c:	bf00      	nop
 810431e:	3708      	adds	r7, #8
 8104320:	46bd      	mov	sp, r7
 8104322:	bd80      	pop	{r7, pc}

08104324 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8104324:	b580      	push	{r7, lr}
 8104326:	b086      	sub	sp, #24
 8104328:	af00      	add	r7, sp, #0
 810432a:	4603      	mov	r3, r0
 810432c:	60b9      	str	r1, [r7, #8]
 810432e:	607a      	str	r2, [r7, #4]
 8104330:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8104332:	f7ff ff63 	bl	81041fc <__NVIC_GetPriorityGrouping>
 8104336:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8104338:	687a      	ldr	r2, [r7, #4]
 810433a:	68b9      	ldr	r1, [r7, #8]
 810433c:	6978      	ldr	r0, [r7, #20]
 810433e:	f7ff ffb3 	bl	81042a8 <NVIC_EncodePriority>
 8104342:	4602      	mov	r2, r0
 8104344:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8104348:	4611      	mov	r1, r2
 810434a:	4618      	mov	r0, r3
 810434c:	f7ff ff82 	bl	8104254 <__NVIC_SetPriority>
}
 8104350:	bf00      	nop
 8104352:	3718      	adds	r7, #24
 8104354:	46bd      	mov	sp, r7
 8104356:	bd80      	pop	{r7, pc}

08104358 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8104358:	b580      	push	{r7, lr}
 810435a:	b082      	sub	sp, #8
 810435c:	af00      	add	r7, sp, #0
 810435e:	4603      	mov	r3, r0
 8104360:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8104362:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8104366:	4618      	mov	r0, r3
 8104368:	f7ff ff56 	bl	8104218 <__NVIC_EnableIRQ>
}
 810436c:	bf00      	nop
 810436e:	3708      	adds	r7, #8
 8104370:	46bd      	mov	sp, r7
 8104372:	bd80      	pop	{r7, pc}

08104374 <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 8104374:	b480      	push	{r7}
 8104376:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 8104378:	4b07      	ldr	r3, [pc, #28]	; (8104398 <HAL_GetCurrentCPUID+0x24>)
 810437a:	681b      	ldr	r3, [r3, #0]
 810437c:	091b      	lsrs	r3, r3, #4
 810437e:	f003 030f 	and.w	r3, r3, #15
 8104382:	2b07      	cmp	r3, #7
 8104384:	d101      	bne.n	810438a <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 8104386:	2303      	movs	r3, #3
 8104388:	e000      	b.n	810438c <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 810438a:	2301      	movs	r3, #1
  }
}
 810438c:	4618      	mov	r0, r3
 810438e:	46bd      	mov	sp, r7
 8104390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104394:	4770      	bx	lr
 8104396:	bf00      	nop
 8104398:	e000ed00 	.word	0xe000ed00

0810439c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 810439c:	b580      	push	{r7, lr}
 810439e:	b086      	sub	sp, #24
 81043a0:	af00      	add	r7, sp, #0
 81043a2:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 81043a4:	f7fe fb70 	bl	8102a88 <HAL_GetTick>
 81043a8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 81043aa:	687b      	ldr	r3, [r7, #4]
 81043ac:	2b00      	cmp	r3, #0
 81043ae:	d101      	bne.n	81043b4 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 81043b0:	2301      	movs	r3, #1
 81043b2:	e314      	b.n	81049de <HAL_DMA_Init+0x642>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 81043b4:	687b      	ldr	r3, [r7, #4]
 81043b6:	681b      	ldr	r3, [r3, #0]
 81043b8:	4a66      	ldr	r2, [pc, #408]	; (8104554 <HAL_DMA_Init+0x1b8>)
 81043ba:	4293      	cmp	r3, r2
 81043bc:	d04a      	beq.n	8104454 <HAL_DMA_Init+0xb8>
 81043be:	687b      	ldr	r3, [r7, #4]
 81043c0:	681b      	ldr	r3, [r3, #0]
 81043c2:	4a65      	ldr	r2, [pc, #404]	; (8104558 <HAL_DMA_Init+0x1bc>)
 81043c4:	4293      	cmp	r3, r2
 81043c6:	d045      	beq.n	8104454 <HAL_DMA_Init+0xb8>
 81043c8:	687b      	ldr	r3, [r7, #4]
 81043ca:	681b      	ldr	r3, [r3, #0]
 81043cc:	4a63      	ldr	r2, [pc, #396]	; (810455c <HAL_DMA_Init+0x1c0>)
 81043ce:	4293      	cmp	r3, r2
 81043d0:	d040      	beq.n	8104454 <HAL_DMA_Init+0xb8>
 81043d2:	687b      	ldr	r3, [r7, #4]
 81043d4:	681b      	ldr	r3, [r3, #0]
 81043d6:	4a62      	ldr	r2, [pc, #392]	; (8104560 <HAL_DMA_Init+0x1c4>)
 81043d8:	4293      	cmp	r3, r2
 81043da:	d03b      	beq.n	8104454 <HAL_DMA_Init+0xb8>
 81043dc:	687b      	ldr	r3, [r7, #4]
 81043de:	681b      	ldr	r3, [r3, #0]
 81043e0:	4a60      	ldr	r2, [pc, #384]	; (8104564 <HAL_DMA_Init+0x1c8>)
 81043e2:	4293      	cmp	r3, r2
 81043e4:	d036      	beq.n	8104454 <HAL_DMA_Init+0xb8>
 81043e6:	687b      	ldr	r3, [r7, #4]
 81043e8:	681b      	ldr	r3, [r3, #0]
 81043ea:	4a5f      	ldr	r2, [pc, #380]	; (8104568 <HAL_DMA_Init+0x1cc>)
 81043ec:	4293      	cmp	r3, r2
 81043ee:	d031      	beq.n	8104454 <HAL_DMA_Init+0xb8>
 81043f0:	687b      	ldr	r3, [r7, #4]
 81043f2:	681b      	ldr	r3, [r3, #0]
 81043f4:	4a5d      	ldr	r2, [pc, #372]	; (810456c <HAL_DMA_Init+0x1d0>)
 81043f6:	4293      	cmp	r3, r2
 81043f8:	d02c      	beq.n	8104454 <HAL_DMA_Init+0xb8>
 81043fa:	687b      	ldr	r3, [r7, #4]
 81043fc:	681b      	ldr	r3, [r3, #0]
 81043fe:	4a5c      	ldr	r2, [pc, #368]	; (8104570 <HAL_DMA_Init+0x1d4>)
 8104400:	4293      	cmp	r3, r2
 8104402:	d027      	beq.n	8104454 <HAL_DMA_Init+0xb8>
 8104404:	687b      	ldr	r3, [r7, #4]
 8104406:	681b      	ldr	r3, [r3, #0]
 8104408:	4a5a      	ldr	r2, [pc, #360]	; (8104574 <HAL_DMA_Init+0x1d8>)
 810440a:	4293      	cmp	r3, r2
 810440c:	d022      	beq.n	8104454 <HAL_DMA_Init+0xb8>
 810440e:	687b      	ldr	r3, [r7, #4]
 8104410:	681b      	ldr	r3, [r3, #0]
 8104412:	4a59      	ldr	r2, [pc, #356]	; (8104578 <HAL_DMA_Init+0x1dc>)
 8104414:	4293      	cmp	r3, r2
 8104416:	d01d      	beq.n	8104454 <HAL_DMA_Init+0xb8>
 8104418:	687b      	ldr	r3, [r7, #4]
 810441a:	681b      	ldr	r3, [r3, #0]
 810441c:	4a57      	ldr	r2, [pc, #348]	; (810457c <HAL_DMA_Init+0x1e0>)
 810441e:	4293      	cmp	r3, r2
 8104420:	d018      	beq.n	8104454 <HAL_DMA_Init+0xb8>
 8104422:	687b      	ldr	r3, [r7, #4]
 8104424:	681b      	ldr	r3, [r3, #0]
 8104426:	4a56      	ldr	r2, [pc, #344]	; (8104580 <HAL_DMA_Init+0x1e4>)
 8104428:	4293      	cmp	r3, r2
 810442a:	d013      	beq.n	8104454 <HAL_DMA_Init+0xb8>
 810442c:	687b      	ldr	r3, [r7, #4]
 810442e:	681b      	ldr	r3, [r3, #0]
 8104430:	4a54      	ldr	r2, [pc, #336]	; (8104584 <HAL_DMA_Init+0x1e8>)
 8104432:	4293      	cmp	r3, r2
 8104434:	d00e      	beq.n	8104454 <HAL_DMA_Init+0xb8>
 8104436:	687b      	ldr	r3, [r7, #4]
 8104438:	681b      	ldr	r3, [r3, #0]
 810443a:	4a53      	ldr	r2, [pc, #332]	; (8104588 <HAL_DMA_Init+0x1ec>)
 810443c:	4293      	cmp	r3, r2
 810443e:	d009      	beq.n	8104454 <HAL_DMA_Init+0xb8>
 8104440:	687b      	ldr	r3, [r7, #4]
 8104442:	681b      	ldr	r3, [r3, #0]
 8104444:	4a51      	ldr	r2, [pc, #324]	; (810458c <HAL_DMA_Init+0x1f0>)
 8104446:	4293      	cmp	r3, r2
 8104448:	d004      	beq.n	8104454 <HAL_DMA_Init+0xb8>
 810444a:	687b      	ldr	r3, [r7, #4]
 810444c:	681b      	ldr	r3, [r3, #0]
 810444e:	4a50      	ldr	r2, [pc, #320]	; (8104590 <HAL_DMA_Init+0x1f4>)
 8104450:	4293      	cmp	r3, r2
 8104452:	d101      	bne.n	8104458 <HAL_DMA_Init+0xbc>
 8104454:	2301      	movs	r3, #1
 8104456:	e000      	b.n	810445a <HAL_DMA_Init+0xbe>
 8104458:	2300      	movs	r3, #0
 810445a:	2b00      	cmp	r3, #0
 810445c:	f000 813b 	beq.w	81046d6 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8104460:	687b      	ldr	r3, [r7, #4]
 8104462:	2200      	movs	r2, #0
 8104464:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8104468:	687b      	ldr	r3, [r7, #4]
 810446a:	2202      	movs	r2, #2
 810446c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8104470:	687b      	ldr	r3, [r7, #4]
 8104472:	681b      	ldr	r3, [r3, #0]
 8104474:	4a37      	ldr	r2, [pc, #220]	; (8104554 <HAL_DMA_Init+0x1b8>)
 8104476:	4293      	cmp	r3, r2
 8104478:	d04a      	beq.n	8104510 <HAL_DMA_Init+0x174>
 810447a:	687b      	ldr	r3, [r7, #4]
 810447c:	681b      	ldr	r3, [r3, #0]
 810447e:	4a36      	ldr	r2, [pc, #216]	; (8104558 <HAL_DMA_Init+0x1bc>)
 8104480:	4293      	cmp	r3, r2
 8104482:	d045      	beq.n	8104510 <HAL_DMA_Init+0x174>
 8104484:	687b      	ldr	r3, [r7, #4]
 8104486:	681b      	ldr	r3, [r3, #0]
 8104488:	4a34      	ldr	r2, [pc, #208]	; (810455c <HAL_DMA_Init+0x1c0>)
 810448a:	4293      	cmp	r3, r2
 810448c:	d040      	beq.n	8104510 <HAL_DMA_Init+0x174>
 810448e:	687b      	ldr	r3, [r7, #4]
 8104490:	681b      	ldr	r3, [r3, #0]
 8104492:	4a33      	ldr	r2, [pc, #204]	; (8104560 <HAL_DMA_Init+0x1c4>)
 8104494:	4293      	cmp	r3, r2
 8104496:	d03b      	beq.n	8104510 <HAL_DMA_Init+0x174>
 8104498:	687b      	ldr	r3, [r7, #4]
 810449a:	681b      	ldr	r3, [r3, #0]
 810449c:	4a31      	ldr	r2, [pc, #196]	; (8104564 <HAL_DMA_Init+0x1c8>)
 810449e:	4293      	cmp	r3, r2
 81044a0:	d036      	beq.n	8104510 <HAL_DMA_Init+0x174>
 81044a2:	687b      	ldr	r3, [r7, #4]
 81044a4:	681b      	ldr	r3, [r3, #0]
 81044a6:	4a30      	ldr	r2, [pc, #192]	; (8104568 <HAL_DMA_Init+0x1cc>)
 81044a8:	4293      	cmp	r3, r2
 81044aa:	d031      	beq.n	8104510 <HAL_DMA_Init+0x174>
 81044ac:	687b      	ldr	r3, [r7, #4]
 81044ae:	681b      	ldr	r3, [r3, #0]
 81044b0:	4a2e      	ldr	r2, [pc, #184]	; (810456c <HAL_DMA_Init+0x1d0>)
 81044b2:	4293      	cmp	r3, r2
 81044b4:	d02c      	beq.n	8104510 <HAL_DMA_Init+0x174>
 81044b6:	687b      	ldr	r3, [r7, #4]
 81044b8:	681b      	ldr	r3, [r3, #0]
 81044ba:	4a2d      	ldr	r2, [pc, #180]	; (8104570 <HAL_DMA_Init+0x1d4>)
 81044bc:	4293      	cmp	r3, r2
 81044be:	d027      	beq.n	8104510 <HAL_DMA_Init+0x174>
 81044c0:	687b      	ldr	r3, [r7, #4]
 81044c2:	681b      	ldr	r3, [r3, #0]
 81044c4:	4a2b      	ldr	r2, [pc, #172]	; (8104574 <HAL_DMA_Init+0x1d8>)
 81044c6:	4293      	cmp	r3, r2
 81044c8:	d022      	beq.n	8104510 <HAL_DMA_Init+0x174>
 81044ca:	687b      	ldr	r3, [r7, #4]
 81044cc:	681b      	ldr	r3, [r3, #0]
 81044ce:	4a2a      	ldr	r2, [pc, #168]	; (8104578 <HAL_DMA_Init+0x1dc>)
 81044d0:	4293      	cmp	r3, r2
 81044d2:	d01d      	beq.n	8104510 <HAL_DMA_Init+0x174>
 81044d4:	687b      	ldr	r3, [r7, #4]
 81044d6:	681b      	ldr	r3, [r3, #0]
 81044d8:	4a28      	ldr	r2, [pc, #160]	; (810457c <HAL_DMA_Init+0x1e0>)
 81044da:	4293      	cmp	r3, r2
 81044dc:	d018      	beq.n	8104510 <HAL_DMA_Init+0x174>
 81044de:	687b      	ldr	r3, [r7, #4]
 81044e0:	681b      	ldr	r3, [r3, #0]
 81044e2:	4a27      	ldr	r2, [pc, #156]	; (8104580 <HAL_DMA_Init+0x1e4>)
 81044e4:	4293      	cmp	r3, r2
 81044e6:	d013      	beq.n	8104510 <HAL_DMA_Init+0x174>
 81044e8:	687b      	ldr	r3, [r7, #4]
 81044ea:	681b      	ldr	r3, [r3, #0]
 81044ec:	4a25      	ldr	r2, [pc, #148]	; (8104584 <HAL_DMA_Init+0x1e8>)
 81044ee:	4293      	cmp	r3, r2
 81044f0:	d00e      	beq.n	8104510 <HAL_DMA_Init+0x174>
 81044f2:	687b      	ldr	r3, [r7, #4]
 81044f4:	681b      	ldr	r3, [r3, #0]
 81044f6:	4a24      	ldr	r2, [pc, #144]	; (8104588 <HAL_DMA_Init+0x1ec>)
 81044f8:	4293      	cmp	r3, r2
 81044fa:	d009      	beq.n	8104510 <HAL_DMA_Init+0x174>
 81044fc:	687b      	ldr	r3, [r7, #4]
 81044fe:	681b      	ldr	r3, [r3, #0]
 8104500:	4a22      	ldr	r2, [pc, #136]	; (810458c <HAL_DMA_Init+0x1f0>)
 8104502:	4293      	cmp	r3, r2
 8104504:	d004      	beq.n	8104510 <HAL_DMA_Init+0x174>
 8104506:	687b      	ldr	r3, [r7, #4]
 8104508:	681b      	ldr	r3, [r3, #0]
 810450a:	4a21      	ldr	r2, [pc, #132]	; (8104590 <HAL_DMA_Init+0x1f4>)
 810450c:	4293      	cmp	r3, r2
 810450e:	d108      	bne.n	8104522 <HAL_DMA_Init+0x186>
 8104510:	687b      	ldr	r3, [r7, #4]
 8104512:	681b      	ldr	r3, [r3, #0]
 8104514:	681a      	ldr	r2, [r3, #0]
 8104516:	687b      	ldr	r3, [r7, #4]
 8104518:	681b      	ldr	r3, [r3, #0]
 810451a:	f022 0201 	bic.w	r2, r2, #1
 810451e:	601a      	str	r2, [r3, #0]
 8104520:	e007      	b.n	8104532 <HAL_DMA_Init+0x196>
 8104522:	687b      	ldr	r3, [r7, #4]
 8104524:	681b      	ldr	r3, [r3, #0]
 8104526:	681a      	ldr	r2, [r3, #0]
 8104528:	687b      	ldr	r3, [r7, #4]
 810452a:	681b      	ldr	r3, [r3, #0]
 810452c:	f022 0201 	bic.w	r2, r2, #1
 8104530:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8104532:	e02f      	b.n	8104594 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8104534:	f7fe faa8 	bl	8102a88 <HAL_GetTick>
 8104538:	4602      	mov	r2, r0
 810453a:	693b      	ldr	r3, [r7, #16]
 810453c:	1ad3      	subs	r3, r2, r3
 810453e:	2b05      	cmp	r3, #5
 8104540:	d928      	bls.n	8104594 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8104542:	687b      	ldr	r3, [r7, #4]
 8104544:	2220      	movs	r2, #32
 8104546:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8104548:	687b      	ldr	r3, [r7, #4]
 810454a:	2203      	movs	r2, #3
 810454c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8104550:	2301      	movs	r3, #1
 8104552:	e244      	b.n	81049de <HAL_DMA_Init+0x642>
 8104554:	40020010 	.word	0x40020010
 8104558:	40020028 	.word	0x40020028
 810455c:	40020040 	.word	0x40020040
 8104560:	40020058 	.word	0x40020058
 8104564:	40020070 	.word	0x40020070
 8104568:	40020088 	.word	0x40020088
 810456c:	400200a0 	.word	0x400200a0
 8104570:	400200b8 	.word	0x400200b8
 8104574:	40020410 	.word	0x40020410
 8104578:	40020428 	.word	0x40020428
 810457c:	40020440 	.word	0x40020440
 8104580:	40020458 	.word	0x40020458
 8104584:	40020470 	.word	0x40020470
 8104588:	40020488 	.word	0x40020488
 810458c:	400204a0 	.word	0x400204a0
 8104590:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8104594:	687b      	ldr	r3, [r7, #4]
 8104596:	681b      	ldr	r3, [r3, #0]
 8104598:	681b      	ldr	r3, [r3, #0]
 810459a:	f003 0301 	and.w	r3, r3, #1
 810459e:	2b00      	cmp	r3, #0
 81045a0:	d1c8      	bne.n	8104534 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 81045a2:	687b      	ldr	r3, [r7, #4]
 81045a4:	681b      	ldr	r3, [r3, #0]
 81045a6:	681b      	ldr	r3, [r3, #0]
 81045a8:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 81045aa:	697a      	ldr	r2, [r7, #20]
 81045ac:	4b84      	ldr	r3, [pc, #528]	; (81047c0 <HAL_DMA_Init+0x424>)
 81045ae:	4013      	ands	r3, r2
 81045b0:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 81045b2:	687b      	ldr	r3, [r7, #4]
 81045b4:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 81045b6:	687b      	ldr	r3, [r7, #4]
 81045b8:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 81045ba:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 81045bc:	687b      	ldr	r3, [r7, #4]
 81045be:	691b      	ldr	r3, [r3, #16]
 81045c0:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 81045c2:	687b      	ldr	r3, [r7, #4]
 81045c4:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 81045c6:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 81045c8:	687b      	ldr	r3, [r7, #4]
 81045ca:	699b      	ldr	r3, [r3, #24]
 81045cc:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 81045ce:	687b      	ldr	r3, [r7, #4]
 81045d0:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 81045d2:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 81045d4:	687b      	ldr	r3, [r7, #4]
 81045d6:	6a1b      	ldr	r3, [r3, #32]
 81045d8:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 81045da:	697a      	ldr	r2, [r7, #20]
 81045dc:	4313      	orrs	r3, r2
 81045de:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 81045e0:	687b      	ldr	r3, [r7, #4]
 81045e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81045e4:	2b04      	cmp	r3, #4
 81045e6:	d107      	bne.n	81045f8 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 81045e8:	687b      	ldr	r3, [r7, #4]
 81045ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 81045ec:	687b      	ldr	r3, [r7, #4]
 81045ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81045f0:	4313      	orrs	r3, r2
 81045f2:	697a      	ldr	r2, [r7, #20]
 81045f4:	4313      	orrs	r3, r2
 81045f6:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 81045f8:	4b72      	ldr	r3, [pc, #456]	; (81047c4 <HAL_DMA_Init+0x428>)
 81045fa:	681b      	ldr	r3, [r3, #0]
 81045fc:	0c1b      	lsrs	r3, r3, #16
 81045fe:	041b      	lsls	r3, r3, #16
 8104600:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8104604:	d328      	bcc.n	8104658 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8104606:	687b      	ldr	r3, [r7, #4]
 8104608:	685b      	ldr	r3, [r3, #4]
 810460a:	2b28      	cmp	r3, #40	; 0x28
 810460c:	d903      	bls.n	8104616 <HAL_DMA_Init+0x27a>
 810460e:	687b      	ldr	r3, [r7, #4]
 8104610:	685b      	ldr	r3, [r3, #4]
 8104612:	2b2e      	cmp	r3, #46	; 0x2e
 8104614:	d917      	bls.n	8104646 <HAL_DMA_Init+0x2aa>
 8104616:	687b      	ldr	r3, [r7, #4]
 8104618:	685b      	ldr	r3, [r3, #4]
 810461a:	2b3e      	cmp	r3, #62	; 0x3e
 810461c:	d903      	bls.n	8104626 <HAL_DMA_Init+0x28a>
 810461e:	687b      	ldr	r3, [r7, #4]
 8104620:	685b      	ldr	r3, [r3, #4]
 8104622:	2b42      	cmp	r3, #66	; 0x42
 8104624:	d90f      	bls.n	8104646 <HAL_DMA_Init+0x2aa>
 8104626:	687b      	ldr	r3, [r7, #4]
 8104628:	685b      	ldr	r3, [r3, #4]
 810462a:	2b46      	cmp	r3, #70	; 0x46
 810462c:	d903      	bls.n	8104636 <HAL_DMA_Init+0x29a>
 810462e:	687b      	ldr	r3, [r7, #4]
 8104630:	685b      	ldr	r3, [r3, #4]
 8104632:	2b48      	cmp	r3, #72	; 0x48
 8104634:	d907      	bls.n	8104646 <HAL_DMA_Init+0x2aa>
 8104636:	687b      	ldr	r3, [r7, #4]
 8104638:	685b      	ldr	r3, [r3, #4]
 810463a:	2b4e      	cmp	r3, #78	; 0x4e
 810463c:	d905      	bls.n	810464a <HAL_DMA_Init+0x2ae>
 810463e:	687b      	ldr	r3, [r7, #4]
 8104640:	685b      	ldr	r3, [r3, #4]
 8104642:	2b52      	cmp	r3, #82	; 0x52
 8104644:	d801      	bhi.n	810464a <HAL_DMA_Init+0x2ae>
 8104646:	2301      	movs	r3, #1
 8104648:	e000      	b.n	810464c <HAL_DMA_Init+0x2b0>
 810464a:	2300      	movs	r3, #0
 810464c:	2b00      	cmp	r3, #0
 810464e:	d003      	beq.n	8104658 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8104650:	697b      	ldr	r3, [r7, #20]
 8104652:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8104656:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8104658:	687b      	ldr	r3, [r7, #4]
 810465a:	681b      	ldr	r3, [r3, #0]
 810465c:	697a      	ldr	r2, [r7, #20]
 810465e:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8104660:	687b      	ldr	r3, [r7, #4]
 8104662:	681b      	ldr	r3, [r3, #0]
 8104664:	695b      	ldr	r3, [r3, #20]
 8104666:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8104668:	697b      	ldr	r3, [r7, #20]
 810466a:	f023 0307 	bic.w	r3, r3, #7
 810466e:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8104670:	687b      	ldr	r3, [r7, #4]
 8104672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8104674:	697a      	ldr	r2, [r7, #20]
 8104676:	4313      	orrs	r3, r2
 8104678:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 810467a:	687b      	ldr	r3, [r7, #4]
 810467c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810467e:	2b04      	cmp	r3, #4
 8104680:	d117      	bne.n	81046b2 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8104682:	687b      	ldr	r3, [r7, #4]
 8104684:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8104686:	697a      	ldr	r2, [r7, #20]
 8104688:	4313      	orrs	r3, r2
 810468a:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 810468c:	687b      	ldr	r3, [r7, #4]
 810468e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104690:	2b00      	cmp	r3, #0
 8104692:	d00e      	beq.n	81046b2 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8104694:	6878      	ldr	r0, [r7, #4]
 8104696:	f002 fb49 	bl	8106d2c <DMA_CheckFifoParam>
 810469a:	4603      	mov	r3, r0
 810469c:	2b00      	cmp	r3, #0
 810469e:	d008      	beq.n	81046b2 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 81046a0:	687b      	ldr	r3, [r7, #4]
 81046a2:	2240      	movs	r2, #64	; 0x40
 81046a4:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 81046a6:	687b      	ldr	r3, [r7, #4]
 81046a8:	2201      	movs	r2, #1
 81046aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 81046ae:	2301      	movs	r3, #1
 81046b0:	e195      	b.n	81049de <HAL_DMA_Init+0x642>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 81046b2:	687b      	ldr	r3, [r7, #4]
 81046b4:	681b      	ldr	r3, [r3, #0]
 81046b6:	697a      	ldr	r2, [r7, #20]
 81046b8:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 81046ba:	6878      	ldr	r0, [r7, #4]
 81046bc:	f002 fa84 	bl	8106bc8 <DMA_CalcBaseAndBitshift>
 81046c0:	4603      	mov	r3, r0
 81046c2:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 81046c4:	687b      	ldr	r3, [r7, #4]
 81046c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81046c8:	f003 031f 	and.w	r3, r3, #31
 81046cc:	223f      	movs	r2, #63	; 0x3f
 81046ce:	409a      	lsls	r2, r3
 81046d0:	68bb      	ldr	r3, [r7, #8]
 81046d2:	609a      	str	r2, [r3, #8]
 81046d4:	e0cb      	b.n	810486e <HAL_DMA_Init+0x4d2>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 81046d6:	687b      	ldr	r3, [r7, #4]
 81046d8:	681b      	ldr	r3, [r3, #0]
 81046da:	4a3b      	ldr	r2, [pc, #236]	; (81047c8 <HAL_DMA_Init+0x42c>)
 81046dc:	4293      	cmp	r3, r2
 81046de:	d022      	beq.n	8104726 <HAL_DMA_Init+0x38a>
 81046e0:	687b      	ldr	r3, [r7, #4]
 81046e2:	681b      	ldr	r3, [r3, #0]
 81046e4:	4a39      	ldr	r2, [pc, #228]	; (81047cc <HAL_DMA_Init+0x430>)
 81046e6:	4293      	cmp	r3, r2
 81046e8:	d01d      	beq.n	8104726 <HAL_DMA_Init+0x38a>
 81046ea:	687b      	ldr	r3, [r7, #4]
 81046ec:	681b      	ldr	r3, [r3, #0]
 81046ee:	4a38      	ldr	r2, [pc, #224]	; (81047d0 <HAL_DMA_Init+0x434>)
 81046f0:	4293      	cmp	r3, r2
 81046f2:	d018      	beq.n	8104726 <HAL_DMA_Init+0x38a>
 81046f4:	687b      	ldr	r3, [r7, #4]
 81046f6:	681b      	ldr	r3, [r3, #0]
 81046f8:	4a36      	ldr	r2, [pc, #216]	; (81047d4 <HAL_DMA_Init+0x438>)
 81046fa:	4293      	cmp	r3, r2
 81046fc:	d013      	beq.n	8104726 <HAL_DMA_Init+0x38a>
 81046fe:	687b      	ldr	r3, [r7, #4]
 8104700:	681b      	ldr	r3, [r3, #0]
 8104702:	4a35      	ldr	r2, [pc, #212]	; (81047d8 <HAL_DMA_Init+0x43c>)
 8104704:	4293      	cmp	r3, r2
 8104706:	d00e      	beq.n	8104726 <HAL_DMA_Init+0x38a>
 8104708:	687b      	ldr	r3, [r7, #4]
 810470a:	681b      	ldr	r3, [r3, #0]
 810470c:	4a33      	ldr	r2, [pc, #204]	; (81047dc <HAL_DMA_Init+0x440>)
 810470e:	4293      	cmp	r3, r2
 8104710:	d009      	beq.n	8104726 <HAL_DMA_Init+0x38a>
 8104712:	687b      	ldr	r3, [r7, #4]
 8104714:	681b      	ldr	r3, [r3, #0]
 8104716:	4a32      	ldr	r2, [pc, #200]	; (81047e0 <HAL_DMA_Init+0x444>)
 8104718:	4293      	cmp	r3, r2
 810471a:	d004      	beq.n	8104726 <HAL_DMA_Init+0x38a>
 810471c:	687b      	ldr	r3, [r7, #4]
 810471e:	681b      	ldr	r3, [r3, #0]
 8104720:	4a30      	ldr	r2, [pc, #192]	; (81047e4 <HAL_DMA_Init+0x448>)
 8104722:	4293      	cmp	r3, r2
 8104724:	d101      	bne.n	810472a <HAL_DMA_Init+0x38e>
 8104726:	2301      	movs	r3, #1
 8104728:	e000      	b.n	810472c <HAL_DMA_Init+0x390>
 810472a:	2300      	movs	r3, #0
 810472c:	2b00      	cmp	r3, #0
 810472e:	f000 8095 	beq.w	810485c <HAL_DMA_Init+0x4c0>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8104732:	687b      	ldr	r3, [r7, #4]
 8104734:	681b      	ldr	r3, [r3, #0]
 8104736:	4a24      	ldr	r2, [pc, #144]	; (81047c8 <HAL_DMA_Init+0x42c>)
 8104738:	4293      	cmp	r3, r2
 810473a:	d021      	beq.n	8104780 <HAL_DMA_Init+0x3e4>
 810473c:	687b      	ldr	r3, [r7, #4]
 810473e:	681b      	ldr	r3, [r3, #0]
 8104740:	4a22      	ldr	r2, [pc, #136]	; (81047cc <HAL_DMA_Init+0x430>)
 8104742:	4293      	cmp	r3, r2
 8104744:	d01c      	beq.n	8104780 <HAL_DMA_Init+0x3e4>
 8104746:	687b      	ldr	r3, [r7, #4]
 8104748:	681b      	ldr	r3, [r3, #0]
 810474a:	4a21      	ldr	r2, [pc, #132]	; (81047d0 <HAL_DMA_Init+0x434>)
 810474c:	4293      	cmp	r3, r2
 810474e:	d017      	beq.n	8104780 <HAL_DMA_Init+0x3e4>
 8104750:	687b      	ldr	r3, [r7, #4]
 8104752:	681b      	ldr	r3, [r3, #0]
 8104754:	4a1f      	ldr	r2, [pc, #124]	; (81047d4 <HAL_DMA_Init+0x438>)
 8104756:	4293      	cmp	r3, r2
 8104758:	d012      	beq.n	8104780 <HAL_DMA_Init+0x3e4>
 810475a:	687b      	ldr	r3, [r7, #4]
 810475c:	681b      	ldr	r3, [r3, #0]
 810475e:	4a1e      	ldr	r2, [pc, #120]	; (81047d8 <HAL_DMA_Init+0x43c>)
 8104760:	4293      	cmp	r3, r2
 8104762:	d00d      	beq.n	8104780 <HAL_DMA_Init+0x3e4>
 8104764:	687b      	ldr	r3, [r7, #4]
 8104766:	681b      	ldr	r3, [r3, #0]
 8104768:	4a1c      	ldr	r2, [pc, #112]	; (81047dc <HAL_DMA_Init+0x440>)
 810476a:	4293      	cmp	r3, r2
 810476c:	d008      	beq.n	8104780 <HAL_DMA_Init+0x3e4>
 810476e:	687b      	ldr	r3, [r7, #4]
 8104770:	681b      	ldr	r3, [r3, #0]
 8104772:	4a1b      	ldr	r2, [pc, #108]	; (81047e0 <HAL_DMA_Init+0x444>)
 8104774:	4293      	cmp	r3, r2
 8104776:	d003      	beq.n	8104780 <HAL_DMA_Init+0x3e4>
 8104778:	687b      	ldr	r3, [r7, #4]
 810477a:	681b      	ldr	r3, [r3, #0]
 810477c:	4a19      	ldr	r2, [pc, #100]	; (81047e4 <HAL_DMA_Init+0x448>)
 810477e:	4293      	cmp	r3, r2
 8104780:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8104782:	687b      	ldr	r3, [r7, #4]
 8104784:	2200      	movs	r2, #0
 8104786:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 810478a:	687b      	ldr	r3, [r7, #4]
 810478c:	2202      	movs	r2, #2
 810478e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8104792:	687b      	ldr	r3, [r7, #4]
 8104794:	681b      	ldr	r3, [r3, #0]
 8104796:	681b      	ldr	r3, [r3, #0]
 8104798:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 810479a:	697b      	ldr	r3, [r7, #20]
 810479c:	f423 33ff 	bic.w	r3, r3, #130560	; 0x1fe00
 81047a0:	f423 73f8 	bic.w	r3, r3, #496	; 0x1f0
 81047a4:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 81047a6:	687b      	ldr	r3, [r7, #4]
 81047a8:	689b      	ldr	r3, [r3, #8]
 81047aa:	2b40      	cmp	r3, #64	; 0x40
 81047ac:	d01c      	beq.n	81047e8 <HAL_DMA_Init+0x44c>
 81047ae:	687b      	ldr	r3, [r7, #4]
 81047b0:	689b      	ldr	r3, [r3, #8]
 81047b2:	2b80      	cmp	r3, #128	; 0x80
 81047b4:	d102      	bne.n	81047bc <HAL_DMA_Init+0x420>
 81047b6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 81047ba:	e016      	b.n	81047ea <HAL_DMA_Init+0x44e>
 81047bc:	2300      	movs	r3, #0
 81047be:	e014      	b.n	81047ea <HAL_DMA_Init+0x44e>
 81047c0:	fe10803f 	.word	0xfe10803f
 81047c4:	5c001000 	.word	0x5c001000
 81047c8:	58025408 	.word	0x58025408
 81047cc:	5802541c 	.word	0x5802541c
 81047d0:	58025430 	.word	0x58025430
 81047d4:	58025444 	.word	0x58025444
 81047d8:	58025458 	.word	0x58025458
 81047dc:	5802546c 	.word	0x5802546c
 81047e0:	58025480 	.word	0x58025480
 81047e4:	58025494 	.word	0x58025494
 81047e8:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 81047ea:	687a      	ldr	r2, [r7, #4]
 81047ec:	68d2      	ldr	r2, [r2, #12]
 81047ee:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 81047f0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 81047f2:	687b      	ldr	r3, [r7, #4]
 81047f4:	691b      	ldr	r3, [r3, #16]
 81047f6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 81047f8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 81047fa:	687b      	ldr	r3, [r7, #4]
 81047fc:	695b      	ldr	r3, [r3, #20]
 81047fe:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8104800:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8104802:	687b      	ldr	r3, [r7, #4]
 8104804:	699b      	ldr	r3, [r3, #24]
 8104806:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8104808:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 810480a:	687b      	ldr	r3, [r7, #4]
 810480c:	69db      	ldr	r3, [r3, #28]
 810480e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8104810:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8104812:	687b      	ldr	r3, [r7, #4]
 8104814:	6a1b      	ldr	r3, [r3, #32]
 8104816:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8104818:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 810481a:	697a      	ldr	r2, [r7, #20]
 810481c:	4313      	orrs	r3, r2
 810481e:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8104820:	687b      	ldr	r3, [r7, #4]
 8104822:	681b      	ldr	r3, [r3, #0]
 8104824:	697a      	ldr	r2, [r7, #20]
 8104826:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8104828:	687b      	ldr	r3, [r7, #4]
 810482a:	681b      	ldr	r3, [r3, #0]
 810482c:	461a      	mov	r2, r3
 810482e:	4b6e      	ldr	r3, [pc, #440]	; (81049e8 <HAL_DMA_Init+0x64c>)
 8104830:	4413      	add	r3, r2
 8104832:	4a6e      	ldr	r2, [pc, #440]	; (81049ec <HAL_DMA_Init+0x650>)
 8104834:	fba2 2303 	umull	r2, r3, r2, r3
 8104838:	091b      	lsrs	r3, r3, #4
 810483a:	009a      	lsls	r2, r3, #2
 810483c:	687b      	ldr	r3, [r7, #4]
 810483e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8104840:	6878      	ldr	r0, [r7, #4]
 8104842:	f002 f9c1 	bl	8106bc8 <DMA_CalcBaseAndBitshift>
 8104846:	4603      	mov	r3, r0
 8104848:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 810484a:	687b      	ldr	r3, [r7, #4]
 810484c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 810484e:	f003 031f 	and.w	r3, r3, #31
 8104852:	2201      	movs	r2, #1
 8104854:	409a      	lsls	r2, r3
 8104856:	68fb      	ldr	r3, [r7, #12]
 8104858:	605a      	str	r2, [r3, #4]
 810485a:	e008      	b.n	810486e <HAL_DMA_Init+0x4d2>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 810485c:	687b      	ldr	r3, [r7, #4]
 810485e:	2240      	movs	r2, #64	; 0x40
 8104860:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8104862:	687b      	ldr	r3, [r7, #4]
 8104864:	2203      	movs	r2, #3
 8104866:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 810486a:	2301      	movs	r3, #1
 810486c:	e0b7      	b.n	81049de <HAL_DMA_Init+0x642>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 810486e:	687b      	ldr	r3, [r7, #4]
 8104870:	681b      	ldr	r3, [r3, #0]
 8104872:	4a5f      	ldr	r2, [pc, #380]	; (81049f0 <HAL_DMA_Init+0x654>)
 8104874:	4293      	cmp	r3, r2
 8104876:	d072      	beq.n	810495e <HAL_DMA_Init+0x5c2>
 8104878:	687b      	ldr	r3, [r7, #4]
 810487a:	681b      	ldr	r3, [r3, #0]
 810487c:	4a5d      	ldr	r2, [pc, #372]	; (81049f4 <HAL_DMA_Init+0x658>)
 810487e:	4293      	cmp	r3, r2
 8104880:	d06d      	beq.n	810495e <HAL_DMA_Init+0x5c2>
 8104882:	687b      	ldr	r3, [r7, #4]
 8104884:	681b      	ldr	r3, [r3, #0]
 8104886:	4a5c      	ldr	r2, [pc, #368]	; (81049f8 <HAL_DMA_Init+0x65c>)
 8104888:	4293      	cmp	r3, r2
 810488a:	d068      	beq.n	810495e <HAL_DMA_Init+0x5c2>
 810488c:	687b      	ldr	r3, [r7, #4]
 810488e:	681b      	ldr	r3, [r3, #0]
 8104890:	4a5a      	ldr	r2, [pc, #360]	; (81049fc <HAL_DMA_Init+0x660>)
 8104892:	4293      	cmp	r3, r2
 8104894:	d063      	beq.n	810495e <HAL_DMA_Init+0x5c2>
 8104896:	687b      	ldr	r3, [r7, #4]
 8104898:	681b      	ldr	r3, [r3, #0]
 810489a:	4a59      	ldr	r2, [pc, #356]	; (8104a00 <HAL_DMA_Init+0x664>)
 810489c:	4293      	cmp	r3, r2
 810489e:	d05e      	beq.n	810495e <HAL_DMA_Init+0x5c2>
 81048a0:	687b      	ldr	r3, [r7, #4]
 81048a2:	681b      	ldr	r3, [r3, #0]
 81048a4:	4a57      	ldr	r2, [pc, #348]	; (8104a04 <HAL_DMA_Init+0x668>)
 81048a6:	4293      	cmp	r3, r2
 81048a8:	d059      	beq.n	810495e <HAL_DMA_Init+0x5c2>
 81048aa:	687b      	ldr	r3, [r7, #4]
 81048ac:	681b      	ldr	r3, [r3, #0]
 81048ae:	4a56      	ldr	r2, [pc, #344]	; (8104a08 <HAL_DMA_Init+0x66c>)
 81048b0:	4293      	cmp	r3, r2
 81048b2:	d054      	beq.n	810495e <HAL_DMA_Init+0x5c2>
 81048b4:	687b      	ldr	r3, [r7, #4]
 81048b6:	681b      	ldr	r3, [r3, #0]
 81048b8:	4a54      	ldr	r2, [pc, #336]	; (8104a0c <HAL_DMA_Init+0x670>)
 81048ba:	4293      	cmp	r3, r2
 81048bc:	d04f      	beq.n	810495e <HAL_DMA_Init+0x5c2>
 81048be:	687b      	ldr	r3, [r7, #4]
 81048c0:	681b      	ldr	r3, [r3, #0]
 81048c2:	4a53      	ldr	r2, [pc, #332]	; (8104a10 <HAL_DMA_Init+0x674>)
 81048c4:	4293      	cmp	r3, r2
 81048c6:	d04a      	beq.n	810495e <HAL_DMA_Init+0x5c2>
 81048c8:	687b      	ldr	r3, [r7, #4]
 81048ca:	681b      	ldr	r3, [r3, #0]
 81048cc:	4a51      	ldr	r2, [pc, #324]	; (8104a14 <HAL_DMA_Init+0x678>)
 81048ce:	4293      	cmp	r3, r2
 81048d0:	d045      	beq.n	810495e <HAL_DMA_Init+0x5c2>
 81048d2:	687b      	ldr	r3, [r7, #4]
 81048d4:	681b      	ldr	r3, [r3, #0]
 81048d6:	4a50      	ldr	r2, [pc, #320]	; (8104a18 <HAL_DMA_Init+0x67c>)
 81048d8:	4293      	cmp	r3, r2
 81048da:	d040      	beq.n	810495e <HAL_DMA_Init+0x5c2>
 81048dc:	687b      	ldr	r3, [r7, #4]
 81048de:	681b      	ldr	r3, [r3, #0]
 81048e0:	4a4e      	ldr	r2, [pc, #312]	; (8104a1c <HAL_DMA_Init+0x680>)
 81048e2:	4293      	cmp	r3, r2
 81048e4:	d03b      	beq.n	810495e <HAL_DMA_Init+0x5c2>
 81048e6:	687b      	ldr	r3, [r7, #4]
 81048e8:	681b      	ldr	r3, [r3, #0]
 81048ea:	4a4d      	ldr	r2, [pc, #308]	; (8104a20 <HAL_DMA_Init+0x684>)
 81048ec:	4293      	cmp	r3, r2
 81048ee:	d036      	beq.n	810495e <HAL_DMA_Init+0x5c2>
 81048f0:	687b      	ldr	r3, [r7, #4]
 81048f2:	681b      	ldr	r3, [r3, #0]
 81048f4:	4a4b      	ldr	r2, [pc, #300]	; (8104a24 <HAL_DMA_Init+0x688>)
 81048f6:	4293      	cmp	r3, r2
 81048f8:	d031      	beq.n	810495e <HAL_DMA_Init+0x5c2>
 81048fa:	687b      	ldr	r3, [r7, #4]
 81048fc:	681b      	ldr	r3, [r3, #0]
 81048fe:	4a4a      	ldr	r2, [pc, #296]	; (8104a28 <HAL_DMA_Init+0x68c>)
 8104900:	4293      	cmp	r3, r2
 8104902:	d02c      	beq.n	810495e <HAL_DMA_Init+0x5c2>
 8104904:	687b      	ldr	r3, [r7, #4]
 8104906:	681b      	ldr	r3, [r3, #0]
 8104908:	4a48      	ldr	r2, [pc, #288]	; (8104a2c <HAL_DMA_Init+0x690>)
 810490a:	4293      	cmp	r3, r2
 810490c:	d027      	beq.n	810495e <HAL_DMA_Init+0x5c2>
 810490e:	687b      	ldr	r3, [r7, #4]
 8104910:	681b      	ldr	r3, [r3, #0]
 8104912:	4a47      	ldr	r2, [pc, #284]	; (8104a30 <HAL_DMA_Init+0x694>)
 8104914:	4293      	cmp	r3, r2
 8104916:	d022      	beq.n	810495e <HAL_DMA_Init+0x5c2>
 8104918:	687b      	ldr	r3, [r7, #4]
 810491a:	681b      	ldr	r3, [r3, #0]
 810491c:	4a45      	ldr	r2, [pc, #276]	; (8104a34 <HAL_DMA_Init+0x698>)
 810491e:	4293      	cmp	r3, r2
 8104920:	d01d      	beq.n	810495e <HAL_DMA_Init+0x5c2>
 8104922:	687b      	ldr	r3, [r7, #4]
 8104924:	681b      	ldr	r3, [r3, #0]
 8104926:	4a44      	ldr	r2, [pc, #272]	; (8104a38 <HAL_DMA_Init+0x69c>)
 8104928:	4293      	cmp	r3, r2
 810492a:	d018      	beq.n	810495e <HAL_DMA_Init+0x5c2>
 810492c:	687b      	ldr	r3, [r7, #4]
 810492e:	681b      	ldr	r3, [r3, #0]
 8104930:	4a42      	ldr	r2, [pc, #264]	; (8104a3c <HAL_DMA_Init+0x6a0>)
 8104932:	4293      	cmp	r3, r2
 8104934:	d013      	beq.n	810495e <HAL_DMA_Init+0x5c2>
 8104936:	687b      	ldr	r3, [r7, #4]
 8104938:	681b      	ldr	r3, [r3, #0]
 810493a:	4a41      	ldr	r2, [pc, #260]	; (8104a40 <HAL_DMA_Init+0x6a4>)
 810493c:	4293      	cmp	r3, r2
 810493e:	d00e      	beq.n	810495e <HAL_DMA_Init+0x5c2>
 8104940:	687b      	ldr	r3, [r7, #4]
 8104942:	681b      	ldr	r3, [r3, #0]
 8104944:	4a3f      	ldr	r2, [pc, #252]	; (8104a44 <HAL_DMA_Init+0x6a8>)
 8104946:	4293      	cmp	r3, r2
 8104948:	d009      	beq.n	810495e <HAL_DMA_Init+0x5c2>
 810494a:	687b      	ldr	r3, [r7, #4]
 810494c:	681b      	ldr	r3, [r3, #0]
 810494e:	4a3e      	ldr	r2, [pc, #248]	; (8104a48 <HAL_DMA_Init+0x6ac>)
 8104950:	4293      	cmp	r3, r2
 8104952:	d004      	beq.n	810495e <HAL_DMA_Init+0x5c2>
 8104954:	687b      	ldr	r3, [r7, #4]
 8104956:	681b      	ldr	r3, [r3, #0]
 8104958:	4a3c      	ldr	r2, [pc, #240]	; (8104a4c <HAL_DMA_Init+0x6b0>)
 810495a:	4293      	cmp	r3, r2
 810495c:	d101      	bne.n	8104962 <HAL_DMA_Init+0x5c6>
 810495e:	2301      	movs	r3, #1
 8104960:	e000      	b.n	8104964 <HAL_DMA_Init+0x5c8>
 8104962:	2300      	movs	r3, #0
 8104964:	2b00      	cmp	r3, #0
 8104966:	d032      	beq.n	81049ce <HAL_DMA_Init+0x632>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8104968:	6878      	ldr	r0, [r7, #4]
 810496a:	f002 fa5b 	bl	8106e24 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 810496e:	687b      	ldr	r3, [r7, #4]
 8104970:	689b      	ldr	r3, [r3, #8]
 8104972:	2b80      	cmp	r3, #128	; 0x80
 8104974:	d102      	bne.n	810497c <HAL_DMA_Init+0x5e0>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8104976:	687b      	ldr	r3, [r7, #4]
 8104978:	2200      	movs	r2, #0
 810497a:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 810497c:	687b      	ldr	r3, [r7, #4]
 810497e:	685a      	ldr	r2, [r3, #4]
 8104980:	687b      	ldr	r3, [r7, #4]
 8104982:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8104984:	b2d2      	uxtb	r2, r2
 8104986:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8104988:	687b      	ldr	r3, [r7, #4]
 810498a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810498c:	687a      	ldr	r2, [r7, #4]
 810498e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8104990:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8104992:	687b      	ldr	r3, [r7, #4]
 8104994:	685b      	ldr	r3, [r3, #4]
 8104996:	2b00      	cmp	r3, #0
 8104998:	d010      	beq.n	81049bc <HAL_DMA_Init+0x620>
 810499a:	687b      	ldr	r3, [r7, #4]
 810499c:	685b      	ldr	r3, [r3, #4]
 810499e:	2b08      	cmp	r3, #8
 81049a0:	d80c      	bhi.n	81049bc <HAL_DMA_Init+0x620>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 81049a2:	6878      	ldr	r0, [r7, #4]
 81049a4:	f002 fad8 	bl	8106f58 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 81049a8:	687b      	ldr	r3, [r7, #4]
 81049aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 81049ac:	2200      	movs	r2, #0
 81049ae:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 81049b0:	687b      	ldr	r3, [r7, #4]
 81049b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 81049b4:	687a      	ldr	r2, [r7, #4]
 81049b6:	6f52      	ldr	r2, [r2, #116]	; 0x74
 81049b8:	605a      	str	r2, [r3, #4]
 81049ba:	e008      	b.n	81049ce <HAL_DMA_Init+0x632>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 81049bc:	687b      	ldr	r3, [r7, #4]
 81049be:	2200      	movs	r2, #0
 81049c0:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 81049c2:	687b      	ldr	r3, [r7, #4]
 81049c4:	2200      	movs	r2, #0
 81049c6:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 81049c8:	687b      	ldr	r3, [r7, #4]
 81049ca:	2200      	movs	r2, #0
 81049cc:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 81049ce:	687b      	ldr	r3, [r7, #4]
 81049d0:	2200      	movs	r2, #0
 81049d2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 81049d4:	687b      	ldr	r3, [r7, #4]
 81049d6:	2201      	movs	r2, #1
 81049d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 81049dc:	2300      	movs	r3, #0
}
 81049de:	4618      	mov	r0, r3
 81049e0:	3718      	adds	r7, #24
 81049e2:	46bd      	mov	sp, r7
 81049e4:	bd80      	pop	{r7, pc}
 81049e6:	bf00      	nop
 81049e8:	a7fdabf8 	.word	0xa7fdabf8
 81049ec:	cccccccd 	.word	0xcccccccd
 81049f0:	40020010 	.word	0x40020010
 81049f4:	40020028 	.word	0x40020028
 81049f8:	40020040 	.word	0x40020040
 81049fc:	40020058 	.word	0x40020058
 8104a00:	40020070 	.word	0x40020070
 8104a04:	40020088 	.word	0x40020088
 8104a08:	400200a0 	.word	0x400200a0
 8104a0c:	400200b8 	.word	0x400200b8
 8104a10:	40020410 	.word	0x40020410
 8104a14:	40020428 	.word	0x40020428
 8104a18:	40020440 	.word	0x40020440
 8104a1c:	40020458 	.word	0x40020458
 8104a20:	40020470 	.word	0x40020470
 8104a24:	40020488 	.word	0x40020488
 8104a28:	400204a0 	.word	0x400204a0
 8104a2c:	400204b8 	.word	0x400204b8
 8104a30:	58025408 	.word	0x58025408
 8104a34:	5802541c 	.word	0x5802541c
 8104a38:	58025430 	.word	0x58025430
 8104a3c:	58025444 	.word	0x58025444
 8104a40:	58025458 	.word	0x58025458
 8104a44:	5802546c 	.word	0x5802546c
 8104a48:	58025480 	.word	0x58025480
 8104a4c:	58025494 	.word	0x58025494

08104a50 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8104a50:	b580      	push	{r7, lr}
 8104a52:	b086      	sub	sp, #24
 8104a54:	af00      	add	r7, sp, #0
 8104a56:	60f8      	str	r0, [r7, #12]
 8104a58:	60b9      	str	r1, [r7, #8]
 8104a5a:	607a      	str	r2, [r7, #4]
 8104a5c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8104a5e:	2300      	movs	r3, #0
 8104a60:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8104a62:	68fb      	ldr	r3, [r7, #12]
 8104a64:	2b00      	cmp	r3, #0
 8104a66:	d101      	bne.n	8104a6c <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8104a68:	2301      	movs	r3, #1
 8104a6a:	e226      	b.n	8104eba <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8104a6c:	68fb      	ldr	r3, [r7, #12]
 8104a6e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8104a72:	2b01      	cmp	r3, #1
 8104a74:	d101      	bne.n	8104a7a <HAL_DMA_Start_IT+0x2a>
 8104a76:	2302      	movs	r3, #2
 8104a78:	e21f      	b.n	8104eba <HAL_DMA_Start_IT+0x46a>
 8104a7a:	68fb      	ldr	r3, [r7, #12]
 8104a7c:	2201      	movs	r2, #1
 8104a7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8104a82:	68fb      	ldr	r3, [r7, #12]
 8104a84:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8104a88:	b2db      	uxtb	r3, r3
 8104a8a:	2b01      	cmp	r3, #1
 8104a8c:	f040 820a 	bne.w	8104ea4 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8104a90:	68fb      	ldr	r3, [r7, #12]
 8104a92:	2202      	movs	r2, #2
 8104a94:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8104a98:	68fb      	ldr	r3, [r7, #12]
 8104a9a:	2200      	movs	r2, #0
 8104a9c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8104a9e:	68fb      	ldr	r3, [r7, #12]
 8104aa0:	681b      	ldr	r3, [r3, #0]
 8104aa2:	4a68      	ldr	r2, [pc, #416]	; (8104c44 <HAL_DMA_Start_IT+0x1f4>)
 8104aa4:	4293      	cmp	r3, r2
 8104aa6:	d04a      	beq.n	8104b3e <HAL_DMA_Start_IT+0xee>
 8104aa8:	68fb      	ldr	r3, [r7, #12]
 8104aaa:	681b      	ldr	r3, [r3, #0]
 8104aac:	4a66      	ldr	r2, [pc, #408]	; (8104c48 <HAL_DMA_Start_IT+0x1f8>)
 8104aae:	4293      	cmp	r3, r2
 8104ab0:	d045      	beq.n	8104b3e <HAL_DMA_Start_IT+0xee>
 8104ab2:	68fb      	ldr	r3, [r7, #12]
 8104ab4:	681b      	ldr	r3, [r3, #0]
 8104ab6:	4a65      	ldr	r2, [pc, #404]	; (8104c4c <HAL_DMA_Start_IT+0x1fc>)
 8104ab8:	4293      	cmp	r3, r2
 8104aba:	d040      	beq.n	8104b3e <HAL_DMA_Start_IT+0xee>
 8104abc:	68fb      	ldr	r3, [r7, #12]
 8104abe:	681b      	ldr	r3, [r3, #0]
 8104ac0:	4a63      	ldr	r2, [pc, #396]	; (8104c50 <HAL_DMA_Start_IT+0x200>)
 8104ac2:	4293      	cmp	r3, r2
 8104ac4:	d03b      	beq.n	8104b3e <HAL_DMA_Start_IT+0xee>
 8104ac6:	68fb      	ldr	r3, [r7, #12]
 8104ac8:	681b      	ldr	r3, [r3, #0]
 8104aca:	4a62      	ldr	r2, [pc, #392]	; (8104c54 <HAL_DMA_Start_IT+0x204>)
 8104acc:	4293      	cmp	r3, r2
 8104ace:	d036      	beq.n	8104b3e <HAL_DMA_Start_IT+0xee>
 8104ad0:	68fb      	ldr	r3, [r7, #12]
 8104ad2:	681b      	ldr	r3, [r3, #0]
 8104ad4:	4a60      	ldr	r2, [pc, #384]	; (8104c58 <HAL_DMA_Start_IT+0x208>)
 8104ad6:	4293      	cmp	r3, r2
 8104ad8:	d031      	beq.n	8104b3e <HAL_DMA_Start_IT+0xee>
 8104ada:	68fb      	ldr	r3, [r7, #12]
 8104adc:	681b      	ldr	r3, [r3, #0]
 8104ade:	4a5f      	ldr	r2, [pc, #380]	; (8104c5c <HAL_DMA_Start_IT+0x20c>)
 8104ae0:	4293      	cmp	r3, r2
 8104ae2:	d02c      	beq.n	8104b3e <HAL_DMA_Start_IT+0xee>
 8104ae4:	68fb      	ldr	r3, [r7, #12]
 8104ae6:	681b      	ldr	r3, [r3, #0]
 8104ae8:	4a5d      	ldr	r2, [pc, #372]	; (8104c60 <HAL_DMA_Start_IT+0x210>)
 8104aea:	4293      	cmp	r3, r2
 8104aec:	d027      	beq.n	8104b3e <HAL_DMA_Start_IT+0xee>
 8104aee:	68fb      	ldr	r3, [r7, #12]
 8104af0:	681b      	ldr	r3, [r3, #0]
 8104af2:	4a5c      	ldr	r2, [pc, #368]	; (8104c64 <HAL_DMA_Start_IT+0x214>)
 8104af4:	4293      	cmp	r3, r2
 8104af6:	d022      	beq.n	8104b3e <HAL_DMA_Start_IT+0xee>
 8104af8:	68fb      	ldr	r3, [r7, #12]
 8104afa:	681b      	ldr	r3, [r3, #0]
 8104afc:	4a5a      	ldr	r2, [pc, #360]	; (8104c68 <HAL_DMA_Start_IT+0x218>)
 8104afe:	4293      	cmp	r3, r2
 8104b00:	d01d      	beq.n	8104b3e <HAL_DMA_Start_IT+0xee>
 8104b02:	68fb      	ldr	r3, [r7, #12]
 8104b04:	681b      	ldr	r3, [r3, #0]
 8104b06:	4a59      	ldr	r2, [pc, #356]	; (8104c6c <HAL_DMA_Start_IT+0x21c>)
 8104b08:	4293      	cmp	r3, r2
 8104b0a:	d018      	beq.n	8104b3e <HAL_DMA_Start_IT+0xee>
 8104b0c:	68fb      	ldr	r3, [r7, #12]
 8104b0e:	681b      	ldr	r3, [r3, #0]
 8104b10:	4a57      	ldr	r2, [pc, #348]	; (8104c70 <HAL_DMA_Start_IT+0x220>)
 8104b12:	4293      	cmp	r3, r2
 8104b14:	d013      	beq.n	8104b3e <HAL_DMA_Start_IT+0xee>
 8104b16:	68fb      	ldr	r3, [r7, #12]
 8104b18:	681b      	ldr	r3, [r3, #0]
 8104b1a:	4a56      	ldr	r2, [pc, #344]	; (8104c74 <HAL_DMA_Start_IT+0x224>)
 8104b1c:	4293      	cmp	r3, r2
 8104b1e:	d00e      	beq.n	8104b3e <HAL_DMA_Start_IT+0xee>
 8104b20:	68fb      	ldr	r3, [r7, #12]
 8104b22:	681b      	ldr	r3, [r3, #0]
 8104b24:	4a54      	ldr	r2, [pc, #336]	; (8104c78 <HAL_DMA_Start_IT+0x228>)
 8104b26:	4293      	cmp	r3, r2
 8104b28:	d009      	beq.n	8104b3e <HAL_DMA_Start_IT+0xee>
 8104b2a:	68fb      	ldr	r3, [r7, #12]
 8104b2c:	681b      	ldr	r3, [r3, #0]
 8104b2e:	4a53      	ldr	r2, [pc, #332]	; (8104c7c <HAL_DMA_Start_IT+0x22c>)
 8104b30:	4293      	cmp	r3, r2
 8104b32:	d004      	beq.n	8104b3e <HAL_DMA_Start_IT+0xee>
 8104b34:	68fb      	ldr	r3, [r7, #12]
 8104b36:	681b      	ldr	r3, [r3, #0]
 8104b38:	4a51      	ldr	r2, [pc, #324]	; (8104c80 <HAL_DMA_Start_IT+0x230>)
 8104b3a:	4293      	cmp	r3, r2
 8104b3c:	d108      	bne.n	8104b50 <HAL_DMA_Start_IT+0x100>
 8104b3e:	68fb      	ldr	r3, [r7, #12]
 8104b40:	681b      	ldr	r3, [r3, #0]
 8104b42:	681a      	ldr	r2, [r3, #0]
 8104b44:	68fb      	ldr	r3, [r7, #12]
 8104b46:	681b      	ldr	r3, [r3, #0]
 8104b48:	f022 0201 	bic.w	r2, r2, #1
 8104b4c:	601a      	str	r2, [r3, #0]
 8104b4e:	e007      	b.n	8104b60 <HAL_DMA_Start_IT+0x110>
 8104b50:	68fb      	ldr	r3, [r7, #12]
 8104b52:	681b      	ldr	r3, [r3, #0]
 8104b54:	681a      	ldr	r2, [r3, #0]
 8104b56:	68fb      	ldr	r3, [r7, #12]
 8104b58:	681b      	ldr	r3, [r3, #0]
 8104b5a:	f022 0201 	bic.w	r2, r2, #1
 8104b5e:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8104b60:	683b      	ldr	r3, [r7, #0]
 8104b62:	687a      	ldr	r2, [r7, #4]
 8104b64:	68b9      	ldr	r1, [r7, #8]
 8104b66:	68f8      	ldr	r0, [r7, #12]
 8104b68:	f001 fe82 	bl	8106870 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8104b6c:	68fb      	ldr	r3, [r7, #12]
 8104b6e:	681b      	ldr	r3, [r3, #0]
 8104b70:	4a34      	ldr	r2, [pc, #208]	; (8104c44 <HAL_DMA_Start_IT+0x1f4>)
 8104b72:	4293      	cmp	r3, r2
 8104b74:	d04a      	beq.n	8104c0c <HAL_DMA_Start_IT+0x1bc>
 8104b76:	68fb      	ldr	r3, [r7, #12]
 8104b78:	681b      	ldr	r3, [r3, #0]
 8104b7a:	4a33      	ldr	r2, [pc, #204]	; (8104c48 <HAL_DMA_Start_IT+0x1f8>)
 8104b7c:	4293      	cmp	r3, r2
 8104b7e:	d045      	beq.n	8104c0c <HAL_DMA_Start_IT+0x1bc>
 8104b80:	68fb      	ldr	r3, [r7, #12]
 8104b82:	681b      	ldr	r3, [r3, #0]
 8104b84:	4a31      	ldr	r2, [pc, #196]	; (8104c4c <HAL_DMA_Start_IT+0x1fc>)
 8104b86:	4293      	cmp	r3, r2
 8104b88:	d040      	beq.n	8104c0c <HAL_DMA_Start_IT+0x1bc>
 8104b8a:	68fb      	ldr	r3, [r7, #12]
 8104b8c:	681b      	ldr	r3, [r3, #0]
 8104b8e:	4a30      	ldr	r2, [pc, #192]	; (8104c50 <HAL_DMA_Start_IT+0x200>)
 8104b90:	4293      	cmp	r3, r2
 8104b92:	d03b      	beq.n	8104c0c <HAL_DMA_Start_IT+0x1bc>
 8104b94:	68fb      	ldr	r3, [r7, #12]
 8104b96:	681b      	ldr	r3, [r3, #0]
 8104b98:	4a2e      	ldr	r2, [pc, #184]	; (8104c54 <HAL_DMA_Start_IT+0x204>)
 8104b9a:	4293      	cmp	r3, r2
 8104b9c:	d036      	beq.n	8104c0c <HAL_DMA_Start_IT+0x1bc>
 8104b9e:	68fb      	ldr	r3, [r7, #12]
 8104ba0:	681b      	ldr	r3, [r3, #0]
 8104ba2:	4a2d      	ldr	r2, [pc, #180]	; (8104c58 <HAL_DMA_Start_IT+0x208>)
 8104ba4:	4293      	cmp	r3, r2
 8104ba6:	d031      	beq.n	8104c0c <HAL_DMA_Start_IT+0x1bc>
 8104ba8:	68fb      	ldr	r3, [r7, #12]
 8104baa:	681b      	ldr	r3, [r3, #0]
 8104bac:	4a2b      	ldr	r2, [pc, #172]	; (8104c5c <HAL_DMA_Start_IT+0x20c>)
 8104bae:	4293      	cmp	r3, r2
 8104bb0:	d02c      	beq.n	8104c0c <HAL_DMA_Start_IT+0x1bc>
 8104bb2:	68fb      	ldr	r3, [r7, #12]
 8104bb4:	681b      	ldr	r3, [r3, #0]
 8104bb6:	4a2a      	ldr	r2, [pc, #168]	; (8104c60 <HAL_DMA_Start_IT+0x210>)
 8104bb8:	4293      	cmp	r3, r2
 8104bba:	d027      	beq.n	8104c0c <HAL_DMA_Start_IT+0x1bc>
 8104bbc:	68fb      	ldr	r3, [r7, #12]
 8104bbe:	681b      	ldr	r3, [r3, #0]
 8104bc0:	4a28      	ldr	r2, [pc, #160]	; (8104c64 <HAL_DMA_Start_IT+0x214>)
 8104bc2:	4293      	cmp	r3, r2
 8104bc4:	d022      	beq.n	8104c0c <HAL_DMA_Start_IT+0x1bc>
 8104bc6:	68fb      	ldr	r3, [r7, #12]
 8104bc8:	681b      	ldr	r3, [r3, #0]
 8104bca:	4a27      	ldr	r2, [pc, #156]	; (8104c68 <HAL_DMA_Start_IT+0x218>)
 8104bcc:	4293      	cmp	r3, r2
 8104bce:	d01d      	beq.n	8104c0c <HAL_DMA_Start_IT+0x1bc>
 8104bd0:	68fb      	ldr	r3, [r7, #12]
 8104bd2:	681b      	ldr	r3, [r3, #0]
 8104bd4:	4a25      	ldr	r2, [pc, #148]	; (8104c6c <HAL_DMA_Start_IT+0x21c>)
 8104bd6:	4293      	cmp	r3, r2
 8104bd8:	d018      	beq.n	8104c0c <HAL_DMA_Start_IT+0x1bc>
 8104bda:	68fb      	ldr	r3, [r7, #12]
 8104bdc:	681b      	ldr	r3, [r3, #0]
 8104bde:	4a24      	ldr	r2, [pc, #144]	; (8104c70 <HAL_DMA_Start_IT+0x220>)
 8104be0:	4293      	cmp	r3, r2
 8104be2:	d013      	beq.n	8104c0c <HAL_DMA_Start_IT+0x1bc>
 8104be4:	68fb      	ldr	r3, [r7, #12]
 8104be6:	681b      	ldr	r3, [r3, #0]
 8104be8:	4a22      	ldr	r2, [pc, #136]	; (8104c74 <HAL_DMA_Start_IT+0x224>)
 8104bea:	4293      	cmp	r3, r2
 8104bec:	d00e      	beq.n	8104c0c <HAL_DMA_Start_IT+0x1bc>
 8104bee:	68fb      	ldr	r3, [r7, #12]
 8104bf0:	681b      	ldr	r3, [r3, #0]
 8104bf2:	4a21      	ldr	r2, [pc, #132]	; (8104c78 <HAL_DMA_Start_IT+0x228>)
 8104bf4:	4293      	cmp	r3, r2
 8104bf6:	d009      	beq.n	8104c0c <HAL_DMA_Start_IT+0x1bc>
 8104bf8:	68fb      	ldr	r3, [r7, #12]
 8104bfa:	681b      	ldr	r3, [r3, #0]
 8104bfc:	4a1f      	ldr	r2, [pc, #124]	; (8104c7c <HAL_DMA_Start_IT+0x22c>)
 8104bfe:	4293      	cmp	r3, r2
 8104c00:	d004      	beq.n	8104c0c <HAL_DMA_Start_IT+0x1bc>
 8104c02:	68fb      	ldr	r3, [r7, #12]
 8104c04:	681b      	ldr	r3, [r3, #0]
 8104c06:	4a1e      	ldr	r2, [pc, #120]	; (8104c80 <HAL_DMA_Start_IT+0x230>)
 8104c08:	4293      	cmp	r3, r2
 8104c0a:	d101      	bne.n	8104c10 <HAL_DMA_Start_IT+0x1c0>
 8104c0c:	2301      	movs	r3, #1
 8104c0e:	e000      	b.n	8104c12 <HAL_DMA_Start_IT+0x1c2>
 8104c10:	2300      	movs	r3, #0
 8104c12:	2b00      	cmp	r3, #0
 8104c14:	d036      	beq.n	8104c84 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8104c16:	68fb      	ldr	r3, [r7, #12]
 8104c18:	681b      	ldr	r3, [r3, #0]
 8104c1a:	681b      	ldr	r3, [r3, #0]
 8104c1c:	f023 021e 	bic.w	r2, r3, #30
 8104c20:	68fb      	ldr	r3, [r7, #12]
 8104c22:	681b      	ldr	r3, [r3, #0]
 8104c24:	f042 0216 	orr.w	r2, r2, #22
 8104c28:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8104c2a:	68fb      	ldr	r3, [r7, #12]
 8104c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8104c2e:	2b00      	cmp	r3, #0
 8104c30:	d03e      	beq.n	8104cb0 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8104c32:	68fb      	ldr	r3, [r7, #12]
 8104c34:	681b      	ldr	r3, [r3, #0]
 8104c36:	681a      	ldr	r2, [r3, #0]
 8104c38:	68fb      	ldr	r3, [r7, #12]
 8104c3a:	681b      	ldr	r3, [r3, #0]
 8104c3c:	f042 0208 	orr.w	r2, r2, #8
 8104c40:	601a      	str	r2, [r3, #0]
 8104c42:	e035      	b.n	8104cb0 <HAL_DMA_Start_IT+0x260>
 8104c44:	40020010 	.word	0x40020010
 8104c48:	40020028 	.word	0x40020028
 8104c4c:	40020040 	.word	0x40020040
 8104c50:	40020058 	.word	0x40020058
 8104c54:	40020070 	.word	0x40020070
 8104c58:	40020088 	.word	0x40020088
 8104c5c:	400200a0 	.word	0x400200a0
 8104c60:	400200b8 	.word	0x400200b8
 8104c64:	40020410 	.word	0x40020410
 8104c68:	40020428 	.word	0x40020428
 8104c6c:	40020440 	.word	0x40020440
 8104c70:	40020458 	.word	0x40020458
 8104c74:	40020470 	.word	0x40020470
 8104c78:	40020488 	.word	0x40020488
 8104c7c:	400204a0 	.word	0x400204a0
 8104c80:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8104c84:	68fb      	ldr	r3, [r7, #12]
 8104c86:	681b      	ldr	r3, [r3, #0]
 8104c88:	681b      	ldr	r3, [r3, #0]
 8104c8a:	f023 020e 	bic.w	r2, r3, #14
 8104c8e:	68fb      	ldr	r3, [r7, #12]
 8104c90:	681b      	ldr	r3, [r3, #0]
 8104c92:	f042 020a 	orr.w	r2, r2, #10
 8104c96:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8104c98:	68fb      	ldr	r3, [r7, #12]
 8104c9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8104c9c:	2b00      	cmp	r3, #0
 8104c9e:	d007      	beq.n	8104cb0 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8104ca0:	68fb      	ldr	r3, [r7, #12]
 8104ca2:	681b      	ldr	r3, [r3, #0]
 8104ca4:	681a      	ldr	r2, [r3, #0]
 8104ca6:	68fb      	ldr	r3, [r7, #12]
 8104ca8:	681b      	ldr	r3, [r3, #0]
 8104caa:	f042 0204 	orr.w	r2, r2, #4
 8104cae:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8104cb0:	68fb      	ldr	r3, [r7, #12]
 8104cb2:	681b      	ldr	r3, [r3, #0]
 8104cb4:	4a83      	ldr	r2, [pc, #524]	; (8104ec4 <HAL_DMA_Start_IT+0x474>)
 8104cb6:	4293      	cmp	r3, r2
 8104cb8:	d072      	beq.n	8104da0 <HAL_DMA_Start_IT+0x350>
 8104cba:	68fb      	ldr	r3, [r7, #12]
 8104cbc:	681b      	ldr	r3, [r3, #0]
 8104cbe:	4a82      	ldr	r2, [pc, #520]	; (8104ec8 <HAL_DMA_Start_IT+0x478>)
 8104cc0:	4293      	cmp	r3, r2
 8104cc2:	d06d      	beq.n	8104da0 <HAL_DMA_Start_IT+0x350>
 8104cc4:	68fb      	ldr	r3, [r7, #12]
 8104cc6:	681b      	ldr	r3, [r3, #0]
 8104cc8:	4a80      	ldr	r2, [pc, #512]	; (8104ecc <HAL_DMA_Start_IT+0x47c>)
 8104cca:	4293      	cmp	r3, r2
 8104ccc:	d068      	beq.n	8104da0 <HAL_DMA_Start_IT+0x350>
 8104cce:	68fb      	ldr	r3, [r7, #12]
 8104cd0:	681b      	ldr	r3, [r3, #0]
 8104cd2:	4a7f      	ldr	r2, [pc, #508]	; (8104ed0 <HAL_DMA_Start_IT+0x480>)
 8104cd4:	4293      	cmp	r3, r2
 8104cd6:	d063      	beq.n	8104da0 <HAL_DMA_Start_IT+0x350>
 8104cd8:	68fb      	ldr	r3, [r7, #12]
 8104cda:	681b      	ldr	r3, [r3, #0]
 8104cdc:	4a7d      	ldr	r2, [pc, #500]	; (8104ed4 <HAL_DMA_Start_IT+0x484>)
 8104cde:	4293      	cmp	r3, r2
 8104ce0:	d05e      	beq.n	8104da0 <HAL_DMA_Start_IT+0x350>
 8104ce2:	68fb      	ldr	r3, [r7, #12]
 8104ce4:	681b      	ldr	r3, [r3, #0]
 8104ce6:	4a7c      	ldr	r2, [pc, #496]	; (8104ed8 <HAL_DMA_Start_IT+0x488>)
 8104ce8:	4293      	cmp	r3, r2
 8104cea:	d059      	beq.n	8104da0 <HAL_DMA_Start_IT+0x350>
 8104cec:	68fb      	ldr	r3, [r7, #12]
 8104cee:	681b      	ldr	r3, [r3, #0]
 8104cf0:	4a7a      	ldr	r2, [pc, #488]	; (8104edc <HAL_DMA_Start_IT+0x48c>)
 8104cf2:	4293      	cmp	r3, r2
 8104cf4:	d054      	beq.n	8104da0 <HAL_DMA_Start_IT+0x350>
 8104cf6:	68fb      	ldr	r3, [r7, #12]
 8104cf8:	681b      	ldr	r3, [r3, #0]
 8104cfa:	4a79      	ldr	r2, [pc, #484]	; (8104ee0 <HAL_DMA_Start_IT+0x490>)
 8104cfc:	4293      	cmp	r3, r2
 8104cfe:	d04f      	beq.n	8104da0 <HAL_DMA_Start_IT+0x350>
 8104d00:	68fb      	ldr	r3, [r7, #12]
 8104d02:	681b      	ldr	r3, [r3, #0]
 8104d04:	4a77      	ldr	r2, [pc, #476]	; (8104ee4 <HAL_DMA_Start_IT+0x494>)
 8104d06:	4293      	cmp	r3, r2
 8104d08:	d04a      	beq.n	8104da0 <HAL_DMA_Start_IT+0x350>
 8104d0a:	68fb      	ldr	r3, [r7, #12]
 8104d0c:	681b      	ldr	r3, [r3, #0]
 8104d0e:	4a76      	ldr	r2, [pc, #472]	; (8104ee8 <HAL_DMA_Start_IT+0x498>)
 8104d10:	4293      	cmp	r3, r2
 8104d12:	d045      	beq.n	8104da0 <HAL_DMA_Start_IT+0x350>
 8104d14:	68fb      	ldr	r3, [r7, #12]
 8104d16:	681b      	ldr	r3, [r3, #0]
 8104d18:	4a74      	ldr	r2, [pc, #464]	; (8104eec <HAL_DMA_Start_IT+0x49c>)
 8104d1a:	4293      	cmp	r3, r2
 8104d1c:	d040      	beq.n	8104da0 <HAL_DMA_Start_IT+0x350>
 8104d1e:	68fb      	ldr	r3, [r7, #12]
 8104d20:	681b      	ldr	r3, [r3, #0]
 8104d22:	4a73      	ldr	r2, [pc, #460]	; (8104ef0 <HAL_DMA_Start_IT+0x4a0>)
 8104d24:	4293      	cmp	r3, r2
 8104d26:	d03b      	beq.n	8104da0 <HAL_DMA_Start_IT+0x350>
 8104d28:	68fb      	ldr	r3, [r7, #12]
 8104d2a:	681b      	ldr	r3, [r3, #0]
 8104d2c:	4a71      	ldr	r2, [pc, #452]	; (8104ef4 <HAL_DMA_Start_IT+0x4a4>)
 8104d2e:	4293      	cmp	r3, r2
 8104d30:	d036      	beq.n	8104da0 <HAL_DMA_Start_IT+0x350>
 8104d32:	68fb      	ldr	r3, [r7, #12]
 8104d34:	681b      	ldr	r3, [r3, #0]
 8104d36:	4a70      	ldr	r2, [pc, #448]	; (8104ef8 <HAL_DMA_Start_IT+0x4a8>)
 8104d38:	4293      	cmp	r3, r2
 8104d3a:	d031      	beq.n	8104da0 <HAL_DMA_Start_IT+0x350>
 8104d3c:	68fb      	ldr	r3, [r7, #12]
 8104d3e:	681b      	ldr	r3, [r3, #0]
 8104d40:	4a6e      	ldr	r2, [pc, #440]	; (8104efc <HAL_DMA_Start_IT+0x4ac>)
 8104d42:	4293      	cmp	r3, r2
 8104d44:	d02c      	beq.n	8104da0 <HAL_DMA_Start_IT+0x350>
 8104d46:	68fb      	ldr	r3, [r7, #12]
 8104d48:	681b      	ldr	r3, [r3, #0]
 8104d4a:	4a6d      	ldr	r2, [pc, #436]	; (8104f00 <HAL_DMA_Start_IT+0x4b0>)
 8104d4c:	4293      	cmp	r3, r2
 8104d4e:	d027      	beq.n	8104da0 <HAL_DMA_Start_IT+0x350>
 8104d50:	68fb      	ldr	r3, [r7, #12]
 8104d52:	681b      	ldr	r3, [r3, #0]
 8104d54:	4a6b      	ldr	r2, [pc, #428]	; (8104f04 <HAL_DMA_Start_IT+0x4b4>)
 8104d56:	4293      	cmp	r3, r2
 8104d58:	d022      	beq.n	8104da0 <HAL_DMA_Start_IT+0x350>
 8104d5a:	68fb      	ldr	r3, [r7, #12]
 8104d5c:	681b      	ldr	r3, [r3, #0]
 8104d5e:	4a6a      	ldr	r2, [pc, #424]	; (8104f08 <HAL_DMA_Start_IT+0x4b8>)
 8104d60:	4293      	cmp	r3, r2
 8104d62:	d01d      	beq.n	8104da0 <HAL_DMA_Start_IT+0x350>
 8104d64:	68fb      	ldr	r3, [r7, #12]
 8104d66:	681b      	ldr	r3, [r3, #0]
 8104d68:	4a68      	ldr	r2, [pc, #416]	; (8104f0c <HAL_DMA_Start_IT+0x4bc>)
 8104d6a:	4293      	cmp	r3, r2
 8104d6c:	d018      	beq.n	8104da0 <HAL_DMA_Start_IT+0x350>
 8104d6e:	68fb      	ldr	r3, [r7, #12]
 8104d70:	681b      	ldr	r3, [r3, #0]
 8104d72:	4a67      	ldr	r2, [pc, #412]	; (8104f10 <HAL_DMA_Start_IT+0x4c0>)
 8104d74:	4293      	cmp	r3, r2
 8104d76:	d013      	beq.n	8104da0 <HAL_DMA_Start_IT+0x350>
 8104d78:	68fb      	ldr	r3, [r7, #12]
 8104d7a:	681b      	ldr	r3, [r3, #0]
 8104d7c:	4a65      	ldr	r2, [pc, #404]	; (8104f14 <HAL_DMA_Start_IT+0x4c4>)
 8104d7e:	4293      	cmp	r3, r2
 8104d80:	d00e      	beq.n	8104da0 <HAL_DMA_Start_IT+0x350>
 8104d82:	68fb      	ldr	r3, [r7, #12]
 8104d84:	681b      	ldr	r3, [r3, #0]
 8104d86:	4a64      	ldr	r2, [pc, #400]	; (8104f18 <HAL_DMA_Start_IT+0x4c8>)
 8104d88:	4293      	cmp	r3, r2
 8104d8a:	d009      	beq.n	8104da0 <HAL_DMA_Start_IT+0x350>
 8104d8c:	68fb      	ldr	r3, [r7, #12]
 8104d8e:	681b      	ldr	r3, [r3, #0]
 8104d90:	4a62      	ldr	r2, [pc, #392]	; (8104f1c <HAL_DMA_Start_IT+0x4cc>)
 8104d92:	4293      	cmp	r3, r2
 8104d94:	d004      	beq.n	8104da0 <HAL_DMA_Start_IT+0x350>
 8104d96:	68fb      	ldr	r3, [r7, #12]
 8104d98:	681b      	ldr	r3, [r3, #0]
 8104d9a:	4a61      	ldr	r2, [pc, #388]	; (8104f20 <HAL_DMA_Start_IT+0x4d0>)
 8104d9c:	4293      	cmp	r3, r2
 8104d9e:	d101      	bne.n	8104da4 <HAL_DMA_Start_IT+0x354>
 8104da0:	2301      	movs	r3, #1
 8104da2:	e000      	b.n	8104da6 <HAL_DMA_Start_IT+0x356>
 8104da4:	2300      	movs	r3, #0
 8104da6:	2b00      	cmp	r3, #0
 8104da8:	d01a      	beq.n	8104de0 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8104daa:	68fb      	ldr	r3, [r7, #12]
 8104dac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8104dae:	681b      	ldr	r3, [r3, #0]
 8104db0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8104db4:	2b00      	cmp	r3, #0
 8104db6:	d007      	beq.n	8104dc8 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8104db8:	68fb      	ldr	r3, [r7, #12]
 8104dba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8104dbc:	681a      	ldr	r2, [r3, #0]
 8104dbe:	68fb      	ldr	r3, [r7, #12]
 8104dc0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8104dc2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8104dc6:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8104dc8:	68fb      	ldr	r3, [r7, #12]
 8104dca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8104dcc:	2b00      	cmp	r3, #0
 8104dce:	d007      	beq.n	8104de0 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8104dd0:	68fb      	ldr	r3, [r7, #12]
 8104dd2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8104dd4:	681a      	ldr	r2, [r3, #0]
 8104dd6:	68fb      	ldr	r3, [r7, #12]
 8104dd8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8104dda:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8104dde:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8104de0:	68fb      	ldr	r3, [r7, #12]
 8104de2:	681b      	ldr	r3, [r3, #0]
 8104de4:	4a37      	ldr	r2, [pc, #220]	; (8104ec4 <HAL_DMA_Start_IT+0x474>)
 8104de6:	4293      	cmp	r3, r2
 8104de8:	d04a      	beq.n	8104e80 <HAL_DMA_Start_IT+0x430>
 8104dea:	68fb      	ldr	r3, [r7, #12]
 8104dec:	681b      	ldr	r3, [r3, #0]
 8104dee:	4a36      	ldr	r2, [pc, #216]	; (8104ec8 <HAL_DMA_Start_IT+0x478>)
 8104df0:	4293      	cmp	r3, r2
 8104df2:	d045      	beq.n	8104e80 <HAL_DMA_Start_IT+0x430>
 8104df4:	68fb      	ldr	r3, [r7, #12]
 8104df6:	681b      	ldr	r3, [r3, #0]
 8104df8:	4a34      	ldr	r2, [pc, #208]	; (8104ecc <HAL_DMA_Start_IT+0x47c>)
 8104dfa:	4293      	cmp	r3, r2
 8104dfc:	d040      	beq.n	8104e80 <HAL_DMA_Start_IT+0x430>
 8104dfe:	68fb      	ldr	r3, [r7, #12]
 8104e00:	681b      	ldr	r3, [r3, #0]
 8104e02:	4a33      	ldr	r2, [pc, #204]	; (8104ed0 <HAL_DMA_Start_IT+0x480>)
 8104e04:	4293      	cmp	r3, r2
 8104e06:	d03b      	beq.n	8104e80 <HAL_DMA_Start_IT+0x430>
 8104e08:	68fb      	ldr	r3, [r7, #12]
 8104e0a:	681b      	ldr	r3, [r3, #0]
 8104e0c:	4a31      	ldr	r2, [pc, #196]	; (8104ed4 <HAL_DMA_Start_IT+0x484>)
 8104e0e:	4293      	cmp	r3, r2
 8104e10:	d036      	beq.n	8104e80 <HAL_DMA_Start_IT+0x430>
 8104e12:	68fb      	ldr	r3, [r7, #12]
 8104e14:	681b      	ldr	r3, [r3, #0]
 8104e16:	4a30      	ldr	r2, [pc, #192]	; (8104ed8 <HAL_DMA_Start_IT+0x488>)
 8104e18:	4293      	cmp	r3, r2
 8104e1a:	d031      	beq.n	8104e80 <HAL_DMA_Start_IT+0x430>
 8104e1c:	68fb      	ldr	r3, [r7, #12]
 8104e1e:	681b      	ldr	r3, [r3, #0]
 8104e20:	4a2e      	ldr	r2, [pc, #184]	; (8104edc <HAL_DMA_Start_IT+0x48c>)
 8104e22:	4293      	cmp	r3, r2
 8104e24:	d02c      	beq.n	8104e80 <HAL_DMA_Start_IT+0x430>
 8104e26:	68fb      	ldr	r3, [r7, #12]
 8104e28:	681b      	ldr	r3, [r3, #0]
 8104e2a:	4a2d      	ldr	r2, [pc, #180]	; (8104ee0 <HAL_DMA_Start_IT+0x490>)
 8104e2c:	4293      	cmp	r3, r2
 8104e2e:	d027      	beq.n	8104e80 <HAL_DMA_Start_IT+0x430>
 8104e30:	68fb      	ldr	r3, [r7, #12]
 8104e32:	681b      	ldr	r3, [r3, #0]
 8104e34:	4a2b      	ldr	r2, [pc, #172]	; (8104ee4 <HAL_DMA_Start_IT+0x494>)
 8104e36:	4293      	cmp	r3, r2
 8104e38:	d022      	beq.n	8104e80 <HAL_DMA_Start_IT+0x430>
 8104e3a:	68fb      	ldr	r3, [r7, #12]
 8104e3c:	681b      	ldr	r3, [r3, #0]
 8104e3e:	4a2a      	ldr	r2, [pc, #168]	; (8104ee8 <HAL_DMA_Start_IT+0x498>)
 8104e40:	4293      	cmp	r3, r2
 8104e42:	d01d      	beq.n	8104e80 <HAL_DMA_Start_IT+0x430>
 8104e44:	68fb      	ldr	r3, [r7, #12]
 8104e46:	681b      	ldr	r3, [r3, #0]
 8104e48:	4a28      	ldr	r2, [pc, #160]	; (8104eec <HAL_DMA_Start_IT+0x49c>)
 8104e4a:	4293      	cmp	r3, r2
 8104e4c:	d018      	beq.n	8104e80 <HAL_DMA_Start_IT+0x430>
 8104e4e:	68fb      	ldr	r3, [r7, #12]
 8104e50:	681b      	ldr	r3, [r3, #0]
 8104e52:	4a27      	ldr	r2, [pc, #156]	; (8104ef0 <HAL_DMA_Start_IT+0x4a0>)
 8104e54:	4293      	cmp	r3, r2
 8104e56:	d013      	beq.n	8104e80 <HAL_DMA_Start_IT+0x430>
 8104e58:	68fb      	ldr	r3, [r7, #12]
 8104e5a:	681b      	ldr	r3, [r3, #0]
 8104e5c:	4a25      	ldr	r2, [pc, #148]	; (8104ef4 <HAL_DMA_Start_IT+0x4a4>)
 8104e5e:	4293      	cmp	r3, r2
 8104e60:	d00e      	beq.n	8104e80 <HAL_DMA_Start_IT+0x430>
 8104e62:	68fb      	ldr	r3, [r7, #12]
 8104e64:	681b      	ldr	r3, [r3, #0]
 8104e66:	4a24      	ldr	r2, [pc, #144]	; (8104ef8 <HAL_DMA_Start_IT+0x4a8>)
 8104e68:	4293      	cmp	r3, r2
 8104e6a:	d009      	beq.n	8104e80 <HAL_DMA_Start_IT+0x430>
 8104e6c:	68fb      	ldr	r3, [r7, #12]
 8104e6e:	681b      	ldr	r3, [r3, #0]
 8104e70:	4a22      	ldr	r2, [pc, #136]	; (8104efc <HAL_DMA_Start_IT+0x4ac>)
 8104e72:	4293      	cmp	r3, r2
 8104e74:	d004      	beq.n	8104e80 <HAL_DMA_Start_IT+0x430>
 8104e76:	68fb      	ldr	r3, [r7, #12]
 8104e78:	681b      	ldr	r3, [r3, #0]
 8104e7a:	4a21      	ldr	r2, [pc, #132]	; (8104f00 <HAL_DMA_Start_IT+0x4b0>)
 8104e7c:	4293      	cmp	r3, r2
 8104e7e:	d108      	bne.n	8104e92 <HAL_DMA_Start_IT+0x442>
 8104e80:	68fb      	ldr	r3, [r7, #12]
 8104e82:	681b      	ldr	r3, [r3, #0]
 8104e84:	681a      	ldr	r2, [r3, #0]
 8104e86:	68fb      	ldr	r3, [r7, #12]
 8104e88:	681b      	ldr	r3, [r3, #0]
 8104e8a:	f042 0201 	orr.w	r2, r2, #1
 8104e8e:	601a      	str	r2, [r3, #0]
 8104e90:	e012      	b.n	8104eb8 <HAL_DMA_Start_IT+0x468>
 8104e92:	68fb      	ldr	r3, [r7, #12]
 8104e94:	681b      	ldr	r3, [r3, #0]
 8104e96:	681a      	ldr	r2, [r3, #0]
 8104e98:	68fb      	ldr	r3, [r7, #12]
 8104e9a:	681b      	ldr	r3, [r3, #0]
 8104e9c:	f042 0201 	orr.w	r2, r2, #1
 8104ea0:	601a      	str	r2, [r3, #0]
 8104ea2:	e009      	b.n	8104eb8 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8104ea4:	68fb      	ldr	r3, [r7, #12]
 8104ea6:	2200      	movs	r2, #0
 8104ea8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8104eac:	68fb      	ldr	r3, [r7, #12]
 8104eae:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8104eb2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    status = HAL_ERROR;
 8104eb4:	2301      	movs	r3, #1
 8104eb6:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8104eb8:	7dfb      	ldrb	r3, [r7, #23]
}
 8104eba:	4618      	mov	r0, r3
 8104ebc:	3718      	adds	r7, #24
 8104ebe:	46bd      	mov	sp, r7
 8104ec0:	bd80      	pop	{r7, pc}
 8104ec2:	bf00      	nop
 8104ec4:	40020010 	.word	0x40020010
 8104ec8:	40020028 	.word	0x40020028
 8104ecc:	40020040 	.word	0x40020040
 8104ed0:	40020058 	.word	0x40020058
 8104ed4:	40020070 	.word	0x40020070
 8104ed8:	40020088 	.word	0x40020088
 8104edc:	400200a0 	.word	0x400200a0
 8104ee0:	400200b8 	.word	0x400200b8
 8104ee4:	40020410 	.word	0x40020410
 8104ee8:	40020428 	.word	0x40020428
 8104eec:	40020440 	.word	0x40020440
 8104ef0:	40020458 	.word	0x40020458
 8104ef4:	40020470 	.word	0x40020470
 8104ef8:	40020488 	.word	0x40020488
 8104efc:	400204a0 	.word	0x400204a0
 8104f00:	400204b8 	.word	0x400204b8
 8104f04:	58025408 	.word	0x58025408
 8104f08:	5802541c 	.word	0x5802541c
 8104f0c:	58025430 	.word	0x58025430
 8104f10:	58025444 	.word	0x58025444
 8104f14:	58025458 	.word	0x58025458
 8104f18:	5802546c 	.word	0x5802546c
 8104f1c:	58025480 	.word	0x58025480
 8104f20:	58025494 	.word	0x58025494

08104f24 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8104f24:	b580      	push	{r7, lr}
 8104f26:	b086      	sub	sp, #24
 8104f28:	af00      	add	r7, sp, #0
 8104f2a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8104f2c:	f7fd fdac 	bl	8102a88 <HAL_GetTick>
 8104f30:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8104f32:	687b      	ldr	r3, [r7, #4]
 8104f34:	2b00      	cmp	r3, #0
 8104f36:	d101      	bne.n	8104f3c <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8104f38:	2301      	movs	r3, #1
 8104f3a:	e2dc      	b.n	81054f6 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8104f3c:	687b      	ldr	r3, [r7, #4]
 8104f3e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8104f42:	b2db      	uxtb	r3, r3
 8104f44:	2b02      	cmp	r3, #2
 8104f46:	d008      	beq.n	8104f5a <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8104f48:	687b      	ldr	r3, [r7, #4]
 8104f4a:	2280      	movs	r2, #128	; 0x80
 8104f4c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8104f4e:	687b      	ldr	r3, [r7, #4]
 8104f50:	2200      	movs	r2, #0
 8104f52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8104f56:	2301      	movs	r3, #1
 8104f58:	e2cd      	b.n	81054f6 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8104f5a:	687b      	ldr	r3, [r7, #4]
 8104f5c:	681b      	ldr	r3, [r3, #0]
 8104f5e:	4a76      	ldr	r2, [pc, #472]	; (8105138 <HAL_DMA_Abort+0x214>)
 8104f60:	4293      	cmp	r3, r2
 8104f62:	d04a      	beq.n	8104ffa <HAL_DMA_Abort+0xd6>
 8104f64:	687b      	ldr	r3, [r7, #4]
 8104f66:	681b      	ldr	r3, [r3, #0]
 8104f68:	4a74      	ldr	r2, [pc, #464]	; (810513c <HAL_DMA_Abort+0x218>)
 8104f6a:	4293      	cmp	r3, r2
 8104f6c:	d045      	beq.n	8104ffa <HAL_DMA_Abort+0xd6>
 8104f6e:	687b      	ldr	r3, [r7, #4]
 8104f70:	681b      	ldr	r3, [r3, #0]
 8104f72:	4a73      	ldr	r2, [pc, #460]	; (8105140 <HAL_DMA_Abort+0x21c>)
 8104f74:	4293      	cmp	r3, r2
 8104f76:	d040      	beq.n	8104ffa <HAL_DMA_Abort+0xd6>
 8104f78:	687b      	ldr	r3, [r7, #4]
 8104f7a:	681b      	ldr	r3, [r3, #0]
 8104f7c:	4a71      	ldr	r2, [pc, #452]	; (8105144 <HAL_DMA_Abort+0x220>)
 8104f7e:	4293      	cmp	r3, r2
 8104f80:	d03b      	beq.n	8104ffa <HAL_DMA_Abort+0xd6>
 8104f82:	687b      	ldr	r3, [r7, #4]
 8104f84:	681b      	ldr	r3, [r3, #0]
 8104f86:	4a70      	ldr	r2, [pc, #448]	; (8105148 <HAL_DMA_Abort+0x224>)
 8104f88:	4293      	cmp	r3, r2
 8104f8a:	d036      	beq.n	8104ffa <HAL_DMA_Abort+0xd6>
 8104f8c:	687b      	ldr	r3, [r7, #4]
 8104f8e:	681b      	ldr	r3, [r3, #0]
 8104f90:	4a6e      	ldr	r2, [pc, #440]	; (810514c <HAL_DMA_Abort+0x228>)
 8104f92:	4293      	cmp	r3, r2
 8104f94:	d031      	beq.n	8104ffa <HAL_DMA_Abort+0xd6>
 8104f96:	687b      	ldr	r3, [r7, #4]
 8104f98:	681b      	ldr	r3, [r3, #0]
 8104f9a:	4a6d      	ldr	r2, [pc, #436]	; (8105150 <HAL_DMA_Abort+0x22c>)
 8104f9c:	4293      	cmp	r3, r2
 8104f9e:	d02c      	beq.n	8104ffa <HAL_DMA_Abort+0xd6>
 8104fa0:	687b      	ldr	r3, [r7, #4]
 8104fa2:	681b      	ldr	r3, [r3, #0]
 8104fa4:	4a6b      	ldr	r2, [pc, #428]	; (8105154 <HAL_DMA_Abort+0x230>)
 8104fa6:	4293      	cmp	r3, r2
 8104fa8:	d027      	beq.n	8104ffa <HAL_DMA_Abort+0xd6>
 8104faa:	687b      	ldr	r3, [r7, #4]
 8104fac:	681b      	ldr	r3, [r3, #0]
 8104fae:	4a6a      	ldr	r2, [pc, #424]	; (8105158 <HAL_DMA_Abort+0x234>)
 8104fb0:	4293      	cmp	r3, r2
 8104fb2:	d022      	beq.n	8104ffa <HAL_DMA_Abort+0xd6>
 8104fb4:	687b      	ldr	r3, [r7, #4]
 8104fb6:	681b      	ldr	r3, [r3, #0]
 8104fb8:	4a68      	ldr	r2, [pc, #416]	; (810515c <HAL_DMA_Abort+0x238>)
 8104fba:	4293      	cmp	r3, r2
 8104fbc:	d01d      	beq.n	8104ffa <HAL_DMA_Abort+0xd6>
 8104fbe:	687b      	ldr	r3, [r7, #4]
 8104fc0:	681b      	ldr	r3, [r3, #0]
 8104fc2:	4a67      	ldr	r2, [pc, #412]	; (8105160 <HAL_DMA_Abort+0x23c>)
 8104fc4:	4293      	cmp	r3, r2
 8104fc6:	d018      	beq.n	8104ffa <HAL_DMA_Abort+0xd6>
 8104fc8:	687b      	ldr	r3, [r7, #4]
 8104fca:	681b      	ldr	r3, [r3, #0]
 8104fcc:	4a65      	ldr	r2, [pc, #404]	; (8105164 <HAL_DMA_Abort+0x240>)
 8104fce:	4293      	cmp	r3, r2
 8104fd0:	d013      	beq.n	8104ffa <HAL_DMA_Abort+0xd6>
 8104fd2:	687b      	ldr	r3, [r7, #4]
 8104fd4:	681b      	ldr	r3, [r3, #0]
 8104fd6:	4a64      	ldr	r2, [pc, #400]	; (8105168 <HAL_DMA_Abort+0x244>)
 8104fd8:	4293      	cmp	r3, r2
 8104fda:	d00e      	beq.n	8104ffa <HAL_DMA_Abort+0xd6>
 8104fdc:	687b      	ldr	r3, [r7, #4]
 8104fde:	681b      	ldr	r3, [r3, #0]
 8104fe0:	4a62      	ldr	r2, [pc, #392]	; (810516c <HAL_DMA_Abort+0x248>)
 8104fe2:	4293      	cmp	r3, r2
 8104fe4:	d009      	beq.n	8104ffa <HAL_DMA_Abort+0xd6>
 8104fe6:	687b      	ldr	r3, [r7, #4]
 8104fe8:	681b      	ldr	r3, [r3, #0]
 8104fea:	4a61      	ldr	r2, [pc, #388]	; (8105170 <HAL_DMA_Abort+0x24c>)
 8104fec:	4293      	cmp	r3, r2
 8104fee:	d004      	beq.n	8104ffa <HAL_DMA_Abort+0xd6>
 8104ff0:	687b      	ldr	r3, [r7, #4]
 8104ff2:	681b      	ldr	r3, [r3, #0]
 8104ff4:	4a5f      	ldr	r2, [pc, #380]	; (8105174 <HAL_DMA_Abort+0x250>)
 8104ff6:	4293      	cmp	r3, r2
 8104ff8:	d101      	bne.n	8104ffe <HAL_DMA_Abort+0xda>
 8104ffa:	2301      	movs	r3, #1
 8104ffc:	e000      	b.n	8105000 <HAL_DMA_Abort+0xdc>
 8104ffe:	2300      	movs	r3, #0
 8105000:	2b00      	cmp	r3, #0
 8105002:	d013      	beq.n	810502c <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8105004:	687b      	ldr	r3, [r7, #4]
 8105006:	681b      	ldr	r3, [r3, #0]
 8105008:	681a      	ldr	r2, [r3, #0]
 810500a:	687b      	ldr	r3, [r7, #4]
 810500c:	681b      	ldr	r3, [r3, #0]
 810500e:	f022 021e 	bic.w	r2, r2, #30
 8105012:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8105014:	687b      	ldr	r3, [r7, #4]
 8105016:	681b      	ldr	r3, [r3, #0]
 8105018:	695a      	ldr	r2, [r3, #20]
 810501a:	687b      	ldr	r3, [r7, #4]
 810501c:	681b      	ldr	r3, [r3, #0]
 810501e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8105022:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8105024:	687b      	ldr	r3, [r7, #4]
 8105026:	681b      	ldr	r3, [r3, #0]
 8105028:	617b      	str	r3, [r7, #20]
 810502a:	e00a      	b.n	8105042 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 810502c:	687b      	ldr	r3, [r7, #4]
 810502e:	681b      	ldr	r3, [r3, #0]
 8105030:	681a      	ldr	r2, [r3, #0]
 8105032:	687b      	ldr	r3, [r7, #4]
 8105034:	681b      	ldr	r3, [r3, #0]
 8105036:	f022 020e 	bic.w	r2, r2, #14
 810503a:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 810503c:	687b      	ldr	r3, [r7, #4]
 810503e:	681b      	ldr	r3, [r3, #0]
 8105040:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8105042:	687b      	ldr	r3, [r7, #4]
 8105044:	681b      	ldr	r3, [r3, #0]
 8105046:	4a3c      	ldr	r2, [pc, #240]	; (8105138 <HAL_DMA_Abort+0x214>)
 8105048:	4293      	cmp	r3, r2
 810504a:	d072      	beq.n	8105132 <HAL_DMA_Abort+0x20e>
 810504c:	687b      	ldr	r3, [r7, #4]
 810504e:	681b      	ldr	r3, [r3, #0]
 8105050:	4a3a      	ldr	r2, [pc, #232]	; (810513c <HAL_DMA_Abort+0x218>)
 8105052:	4293      	cmp	r3, r2
 8105054:	d06d      	beq.n	8105132 <HAL_DMA_Abort+0x20e>
 8105056:	687b      	ldr	r3, [r7, #4]
 8105058:	681b      	ldr	r3, [r3, #0]
 810505a:	4a39      	ldr	r2, [pc, #228]	; (8105140 <HAL_DMA_Abort+0x21c>)
 810505c:	4293      	cmp	r3, r2
 810505e:	d068      	beq.n	8105132 <HAL_DMA_Abort+0x20e>
 8105060:	687b      	ldr	r3, [r7, #4]
 8105062:	681b      	ldr	r3, [r3, #0]
 8105064:	4a37      	ldr	r2, [pc, #220]	; (8105144 <HAL_DMA_Abort+0x220>)
 8105066:	4293      	cmp	r3, r2
 8105068:	d063      	beq.n	8105132 <HAL_DMA_Abort+0x20e>
 810506a:	687b      	ldr	r3, [r7, #4]
 810506c:	681b      	ldr	r3, [r3, #0]
 810506e:	4a36      	ldr	r2, [pc, #216]	; (8105148 <HAL_DMA_Abort+0x224>)
 8105070:	4293      	cmp	r3, r2
 8105072:	d05e      	beq.n	8105132 <HAL_DMA_Abort+0x20e>
 8105074:	687b      	ldr	r3, [r7, #4]
 8105076:	681b      	ldr	r3, [r3, #0]
 8105078:	4a34      	ldr	r2, [pc, #208]	; (810514c <HAL_DMA_Abort+0x228>)
 810507a:	4293      	cmp	r3, r2
 810507c:	d059      	beq.n	8105132 <HAL_DMA_Abort+0x20e>
 810507e:	687b      	ldr	r3, [r7, #4]
 8105080:	681b      	ldr	r3, [r3, #0]
 8105082:	4a33      	ldr	r2, [pc, #204]	; (8105150 <HAL_DMA_Abort+0x22c>)
 8105084:	4293      	cmp	r3, r2
 8105086:	d054      	beq.n	8105132 <HAL_DMA_Abort+0x20e>
 8105088:	687b      	ldr	r3, [r7, #4]
 810508a:	681b      	ldr	r3, [r3, #0]
 810508c:	4a31      	ldr	r2, [pc, #196]	; (8105154 <HAL_DMA_Abort+0x230>)
 810508e:	4293      	cmp	r3, r2
 8105090:	d04f      	beq.n	8105132 <HAL_DMA_Abort+0x20e>
 8105092:	687b      	ldr	r3, [r7, #4]
 8105094:	681b      	ldr	r3, [r3, #0]
 8105096:	4a30      	ldr	r2, [pc, #192]	; (8105158 <HAL_DMA_Abort+0x234>)
 8105098:	4293      	cmp	r3, r2
 810509a:	d04a      	beq.n	8105132 <HAL_DMA_Abort+0x20e>
 810509c:	687b      	ldr	r3, [r7, #4]
 810509e:	681b      	ldr	r3, [r3, #0]
 81050a0:	4a2e      	ldr	r2, [pc, #184]	; (810515c <HAL_DMA_Abort+0x238>)
 81050a2:	4293      	cmp	r3, r2
 81050a4:	d045      	beq.n	8105132 <HAL_DMA_Abort+0x20e>
 81050a6:	687b      	ldr	r3, [r7, #4]
 81050a8:	681b      	ldr	r3, [r3, #0]
 81050aa:	4a2d      	ldr	r2, [pc, #180]	; (8105160 <HAL_DMA_Abort+0x23c>)
 81050ac:	4293      	cmp	r3, r2
 81050ae:	d040      	beq.n	8105132 <HAL_DMA_Abort+0x20e>
 81050b0:	687b      	ldr	r3, [r7, #4]
 81050b2:	681b      	ldr	r3, [r3, #0]
 81050b4:	4a2b      	ldr	r2, [pc, #172]	; (8105164 <HAL_DMA_Abort+0x240>)
 81050b6:	4293      	cmp	r3, r2
 81050b8:	d03b      	beq.n	8105132 <HAL_DMA_Abort+0x20e>
 81050ba:	687b      	ldr	r3, [r7, #4]
 81050bc:	681b      	ldr	r3, [r3, #0]
 81050be:	4a2a      	ldr	r2, [pc, #168]	; (8105168 <HAL_DMA_Abort+0x244>)
 81050c0:	4293      	cmp	r3, r2
 81050c2:	d036      	beq.n	8105132 <HAL_DMA_Abort+0x20e>
 81050c4:	687b      	ldr	r3, [r7, #4]
 81050c6:	681b      	ldr	r3, [r3, #0]
 81050c8:	4a28      	ldr	r2, [pc, #160]	; (810516c <HAL_DMA_Abort+0x248>)
 81050ca:	4293      	cmp	r3, r2
 81050cc:	d031      	beq.n	8105132 <HAL_DMA_Abort+0x20e>
 81050ce:	687b      	ldr	r3, [r7, #4]
 81050d0:	681b      	ldr	r3, [r3, #0]
 81050d2:	4a27      	ldr	r2, [pc, #156]	; (8105170 <HAL_DMA_Abort+0x24c>)
 81050d4:	4293      	cmp	r3, r2
 81050d6:	d02c      	beq.n	8105132 <HAL_DMA_Abort+0x20e>
 81050d8:	687b      	ldr	r3, [r7, #4]
 81050da:	681b      	ldr	r3, [r3, #0]
 81050dc:	4a25      	ldr	r2, [pc, #148]	; (8105174 <HAL_DMA_Abort+0x250>)
 81050de:	4293      	cmp	r3, r2
 81050e0:	d027      	beq.n	8105132 <HAL_DMA_Abort+0x20e>
 81050e2:	687b      	ldr	r3, [r7, #4]
 81050e4:	681b      	ldr	r3, [r3, #0]
 81050e6:	4a24      	ldr	r2, [pc, #144]	; (8105178 <HAL_DMA_Abort+0x254>)
 81050e8:	4293      	cmp	r3, r2
 81050ea:	d022      	beq.n	8105132 <HAL_DMA_Abort+0x20e>
 81050ec:	687b      	ldr	r3, [r7, #4]
 81050ee:	681b      	ldr	r3, [r3, #0]
 81050f0:	4a22      	ldr	r2, [pc, #136]	; (810517c <HAL_DMA_Abort+0x258>)
 81050f2:	4293      	cmp	r3, r2
 81050f4:	d01d      	beq.n	8105132 <HAL_DMA_Abort+0x20e>
 81050f6:	687b      	ldr	r3, [r7, #4]
 81050f8:	681b      	ldr	r3, [r3, #0]
 81050fa:	4a21      	ldr	r2, [pc, #132]	; (8105180 <HAL_DMA_Abort+0x25c>)
 81050fc:	4293      	cmp	r3, r2
 81050fe:	d018      	beq.n	8105132 <HAL_DMA_Abort+0x20e>
 8105100:	687b      	ldr	r3, [r7, #4]
 8105102:	681b      	ldr	r3, [r3, #0]
 8105104:	4a1f      	ldr	r2, [pc, #124]	; (8105184 <HAL_DMA_Abort+0x260>)
 8105106:	4293      	cmp	r3, r2
 8105108:	d013      	beq.n	8105132 <HAL_DMA_Abort+0x20e>
 810510a:	687b      	ldr	r3, [r7, #4]
 810510c:	681b      	ldr	r3, [r3, #0]
 810510e:	4a1e      	ldr	r2, [pc, #120]	; (8105188 <HAL_DMA_Abort+0x264>)
 8105110:	4293      	cmp	r3, r2
 8105112:	d00e      	beq.n	8105132 <HAL_DMA_Abort+0x20e>
 8105114:	687b      	ldr	r3, [r7, #4]
 8105116:	681b      	ldr	r3, [r3, #0]
 8105118:	4a1c      	ldr	r2, [pc, #112]	; (810518c <HAL_DMA_Abort+0x268>)
 810511a:	4293      	cmp	r3, r2
 810511c:	d009      	beq.n	8105132 <HAL_DMA_Abort+0x20e>
 810511e:	687b      	ldr	r3, [r7, #4]
 8105120:	681b      	ldr	r3, [r3, #0]
 8105122:	4a1b      	ldr	r2, [pc, #108]	; (8105190 <HAL_DMA_Abort+0x26c>)
 8105124:	4293      	cmp	r3, r2
 8105126:	d004      	beq.n	8105132 <HAL_DMA_Abort+0x20e>
 8105128:	687b      	ldr	r3, [r7, #4]
 810512a:	681b      	ldr	r3, [r3, #0]
 810512c:	4a19      	ldr	r2, [pc, #100]	; (8105194 <HAL_DMA_Abort+0x270>)
 810512e:	4293      	cmp	r3, r2
 8105130:	d132      	bne.n	8105198 <HAL_DMA_Abort+0x274>
 8105132:	2301      	movs	r3, #1
 8105134:	e031      	b.n	810519a <HAL_DMA_Abort+0x276>
 8105136:	bf00      	nop
 8105138:	40020010 	.word	0x40020010
 810513c:	40020028 	.word	0x40020028
 8105140:	40020040 	.word	0x40020040
 8105144:	40020058 	.word	0x40020058
 8105148:	40020070 	.word	0x40020070
 810514c:	40020088 	.word	0x40020088
 8105150:	400200a0 	.word	0x400200a0
 8105154:	400200b8 	.word	0x400200b8
 8105158:	40020410 	.word	0x40020410
 810515c:	40020428 	.word	0x40020428
 8105160:	40020440 	.word	0x40020440
 8105164:	40020458 	.word	0x40020458
 8105168:	40020470 	.word	0x40020470
 810516c:	40020488 	.word	0x40020488
 8105170:	400204a0 	.word	0x400204a0
 8105174:	400204b8 	.word	0x400204b8
 8105178:	58025408 	.word	0x58025408
 810517c:	5802541c 	.word	0x5802541c
 8105180:	58025430 	.word	0x58025430
 8105184:	58025444 	.word	0x58025444
 8105188:	58025458 	.word	0x58025458
 810518c:	5802546c 	.word	0x5802546c
 8105190:	58025480 	.word	0x58025480
 8105194:	58025494 	.word	0x58025494
 8105198:	2300      	movs	r3, #0
 810519a:	2b00      	cmp	r3, #0
 810519c:	d007      	beq.n	81051ae <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 810519e:	687b      	ldr	r3, [r7, #4]
 81051a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 81051a2:	681a      	ldr	r2, [r3, #0]
 81051a4:	687b      	ldr	r3, [r7, #4]
 81051a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 81051a8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 81051ac:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 81051ae:	687b      	ldr	r3, [r7, #4]
 81051b0:	681b      	ldr	r3, [r3, #0]
 81051b2:	4a6d      	ldr	r2, [pc, #436]	; (8105368 <HAL_DMA_Abort+0x444>)
 81051b4:	4293      	cmp	r3, r2
 81051b6:	d04a      	beq.n	810524e <HAL_DMA_Abort+0x32a>
 81051b8:	687b      	ldr	r3, [r7, #4]
 81051ba:	681b      	ldr	r3, [r3, #0]
 81051bc:	4a6b      	ldr	r2, [pc, #428]	; (810536c <HAL_DMA_Abort+0x448>)
 81051be:	4293      	cmp	r3, r2
 81051c0:	d045      	beq.n	810524e <HAL_DMA_Abort+0x32a>
 81051c2:	687b      	ldr	r3, [r7, #4]
 81051c4:	681b      	ldr	r3, [r3, #0]
 81051c6:	4a6a      	ldr	r2, [pc, #424]	; (8105370 <HAL_DMA_Abort+0x44c>)
 81051c8:	4293      	cmp	r3, r2
 81051ca:	d040      	beq.n	810524e <HAL_DMA_Abort+0x32a>
 81051cc:	687b      	ldr	r3, [r7, #4]
 81051ce:	681b      	ldr	r3, [r3, #0]
 81051d0:	4a68      	ldr	r2, [pc, #416]	; (8105374 <HAL_DMA_Abort+0x450>)
 81051d2:	4293      	cmp	r3, r2
 81051d4:	d03b      	beq.n	810524e <HAL_DMA_Abort+0x32a>
 81051d6:	687b      	ldr	r3, [r7, #4]
 81051d8:	681b      	ldr	r3, [r3, #0]
 81051da:	4a67      	ldr	r2, [pc, #412]	; (8105378 <HAL_DMA_Abort+0x454>)
 81051dc:	4293      	cmp	r3, r2
 81051de:	d036      	beq.n	810524e <HAL_DMA_Abort+0x32a>
 81051e0:	687b      	ldr	r3, [r7, #4]
 81051e2:	681b      	ldr	r3, [r3, #0]
 81051e4:	4a65      	ldr	r2, [pc, #404]	; (810537c <HAL_DMA_Abort+0x458>)
 81051e6:	4293      	cmp	r3, r2
 81051e8:	d031      	beq.n	810524e <HAL_DMA_Abort+0x32a>
 81051ea:	687b      	ldr	r3, [r7, #4]
 81051ec:	681b      	ldr	r3, [r3, #0]
 81051ee:	4a64      	ldr	r2, [pc, #400]	; (8105380 <HAL_DMA_Abort+0x45c>)
 81051f0:	4293      	cmp	r3, r2
 81051f2:	d02c      	beq.n	810524e <HAL_DMA_Abort+0x32a>
 81051f4:	687b      	ldr	r3, [r7, #4]
 81051f6:	681b      	ldr	r3, [r3, #0]
 81051f8:	4a62      	ldr	r2, [pc, #392]	; (8105384 <HAL_DMA_Abort+0x460>)
 81051fa:	4293      	cmp	r3, r2
 81051fc:	d027      	beq.n	810524e <HAL_DMA_Abort+0x32a>
 81051fe:	687b      	ldr	r3, [r7, #4]
 8105200:	681b      	ldr	r3, [r3, #0]
 8105202:	4a61      	ldr	r2, [pc, #388]	; (8105388 <HAL_DMA_Abort+0x464>)
 8105204:	4293      	cmp	r3, r2
 8105206:	d022      	beq.n	810524e <HAL_DMA_Abort+0x32a>
 8105208:	687b      	ldr	r3, [r7, #4]
 810520a:	681b      	ldr	r3, [r3, #0]
 810520c:	4a5f      	ldr	r2, [pc, #380]	; (810538c <HAL_DMA_Abort+0x468>)
 810520e:	4293      	cmp	r3, r2
 8105210:	d01d      	beq.n	810524e <HAL_DMA_Abort+0x32a>
 8105212:	687b      	ldr	r3, [r7, #4]
 8105214:	681b      	ldr	r3, [r3, #0]
 8105216:	4a5e      	ldr	r2, [pc, #376]	; (8105390 <HAL_DMA_Abort+0x46c>)
 8105218:	4293      	cmp	r3, r2
 810521a:	d018      	beq.n	810524e <HAL_DMA_Abort+0x32a>
 810521c:	687b      	ldr	r3, [r7, #4]
 810521e:	681b      	ldr	r3, [r3, #0]
 8105220:	4a5c      	ldr	r2, [pc, #368]	; (8105394 <HAL_DMA_Abort+0x470>)
 8105222:	4293      	cmp	r3, r2
 8105224:	d013      	beq.n	810524e <HAL_DMA_Abort+0x32a>
 8105226:	687b      	ldr	r3, [r7, #4]
 8105228:	681b      	ldr	r3, [r3, #0]
 810522a:	4a5b      	ldr	r2, [pc, #364]	; (8105398 <HAL_DMA_Abort+0x474>)
 810522c:	4293      	cmp	r3, r2
 810522e:	d00e      	beq.n	810524e <HAL_DMA_Abort+0x32a>
 8105230:	687b      	ldr	r3, [r7, #4]
 8105232:	681b      	ldr	r3, [r3, #0]
 8105234:	4a59      	ldr	r2, [pc, #356]	; (810539c <HAL_DMA_Abort+0x478>)
 8105236:	4293      	cmp	r3, r2
 8105238:	d009      	beq.n	810524e <HAL_DMA_Abort+0x32a>
 810523a:	687b      	ldr	r3, [r7, #4]
 810523c:	681b      	ldr	r3, [r3, #0]
 810523e:	4a58      	ldr	r2, [pc, #352]	; (81053a0 <HAL_DMA_Abort+0x47c>)
 8105240:	4293      	cmp	r3, r2
 8105242:	d004      	beq.n	810524e <HAL_DMA_Abort+0x32a>
 8105244:	687b      	ldr	r3, [r7, #4]
 8105246:	681b      	ldr	r3, [r3, #0]
 8105248:	4a56      	ldr	r2, [pc, #344]	; (81053a4 <HAL_DMA_Abort+0x480>)
 810524a:	4293      	cmp	r3, r2
 810524c:	d108      	bne.n	8105260 <HAL_DMA_Abort+0x33c>
 810524e:	687b      	ldr	r3, [r7, #4]
 8105250:	681b      	ldr	r3, [r3, #0]
 8105252:	681a      	ldr	r2, [r3, #0]
 8105254:	687b      	ldr	r3, [r7, #4]
 8105256:	681b      	ldr	r3, [r3, #0]
 8105258:	f022 0201 	bic.w	r2, r2, #1
 810525c:	601a      	str	r2, [r3, #0]
 810525e:	e007      	b.n	8105270 <HAL_DMA_Abort+0x34c>
 8105260:	687b      	ldr	r3, [r7, #4]
 8105262:	681b      	ldr	r3, [r3, #0]
 8105264:	681a      	ldr	r2, [r3, #0]
 8105266:	687b      	ldr	r3, [r7, #4]
 8105268:	681b      	ldr	r3, [r3, #0]
 810526a:	f022 0201 	bic.w	r2, r2, #1
 810526e:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8105270:	e013      	b.n	810529a <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8105272:	f7fd fc09 	bl	8102a88 <HAL_GetTick>
 8105276:	4602      	mov	r2, r0
 8105278:	693b      	ldr	r3, [r7, #16]
 810527a:	1ad3      	subs	r3, r2, r3
 810527c:	2b05      	cmp	r3, #5
 810527e:	d90c      	bls.n	810529a <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8105280:	687b      	ldr	r3, [r7, #4]
 8105282:	2220      	movs	r2, #32
 8105284:	655a      	str	r2, [r3, #84]	; 0x54

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8105286:	687b      	ldr	r3, [r7, #4]
 8105288:	2200      	movs	r2, #0
 810528a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 810528e:	687b      	ldr	r3, [r7, #4]
 8105290:	2203      	movs	r2, #3
 8105292:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8105296:	2301      	movs	r3, #1
 8105298:	e12d      	b.n	81054f6 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 810529a:	697b      	ldr	r3, [r7, #20]
 810529c:	681b      	ldr	r3, [r3, #0]
 810529e:	f003 0301 	and.w	r3, r3, #1
 81052a2:	2b00      	cmp	r3, #0
 81052a4:	d1e5      	bne.n	8105272 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 81052a6:	687b      	ldr	r3, [r7, #4]
 81052a8:	681b      	ldr	r3, [r3, #0]
 81052aa:	4a2f      	ldr	r2, [pc, #188]	; (8105368 <HAL_DMA_Abort+0x444>)
 81052ac:	4293      	cmp	r3, r2
 81052ae:	d04a      	beq.n	8105346 <HAL_DMA_Abort+0x422>
 81052b0:	687b      	ldr	r3, [r7, #4]
 81052b2:	681b      	ldr	r3, [r3, #0]
 81052b4:	4a2d      	ldr	r2, [pc, #180]	; (810536c <HAL_DMA_Abort+0x448>)
 81052b6:	4293      	cmp	r3, r2
 81052b8:	d045      	beq.n	8105346 <HAL_DMA_Abort+0x422>
 81052ba:	687b      	ldr	r3, [r7, #4]
 81052bc:	681b      	ldr	r3, [r3, #0]
 81052be:	4a2c      	ldr	r2, [pc, #176]	; (8105370 <HAL_DMA_Abort+0x44c>)
 81052c0:	4293      	cmp	r3, r2
 81052c2:	d040      	beq.n	8105346 <HAL_DMA_Abort+0x422>
 81052c4:	687b      	ldr	r3, [r7, #4]
 81052c6:	681b      	ldr	r3, [r3, #0]
 81052c8:	4a2a      	ldr	r2, [pc, #168]	; (8105374 <HAL_DMA_Abort+0x450>)
 81052ca:	4293      	cmp	r3, r2
 81052cc:	d03b      	beq.n	8105346 <HAL_DMA_Abort+0x422>
 81052ce:	687b      	ldr	r3, [r7, #4]
 81052d0:	681b      	ldr	r3, [r3, #0]
 81052d2:	4a29      	ldr	r2, [pc, #164]	; (8105378 <HAL_DMA_Abort+0x454>)
 81052d4:	4293      	cmp	r3, r2
 81052d6:	d036      	beq.n	8105346 <HAL_DMA_Abort+0x422>
 81052d8:	687b      	ldr	r3, [r7, #4]
 81052da:	681b      	ldr	r3, [r3, #0]
 81052dc:	4a27      	ldr	r2, [pc, #156]	; (810537c <HAL_DMA_Abort+0x458>)
 81052de:	4293      	cmp	r3, r2
 81052e0:	d031      	beq.n	8105346 <HAL_DMA_Abort+0x422>
 81052e2:	687b      	ldr	r3, [r7, #4]
 81052e4:	681b      	ldr	r3, [r3, #0]
 81052e6:	4a26      	ldr	r2, [pc, #152]	; (8105380 <HAL_DMA_Abort+0x45c>)
 81052e8:	4293      	cmp	r3, r2
 81052ea:	d02c      	beq.n	8105346 <HAL_DMA_Abort+0x422>
 81052ec:	687b      	ldr	r3, [r7, #4]
 81052ee:	681b      	ldr	r3, [r3, #0]
 81052f0:	4a24      	ldr	r2, [pc, #144]	; (8105384 <HAL_DMA_Abort+0x460>)
 81052f2:	4293      	cmp	r3, r2
 81052f4:	d027      	beq.n	8105346 <HAL_DMA_Abort+0x422>
 81052f6:	687b      	ldr	r3, [r7, #4]
 81052f8:	681b      	ldr	r3, [r3, #0]
 81052fa:	4a23      	ldr	r2, [pc, #140]	; (8105388 <HAL_DMA_Abort+0x464>)
 81052fc:	4293      	cmp	r3, r2
 81052fe:	d022      	beq.n	8105346 <HAL_DMA_Abort+0x422>
 8105300:	687b      	ldr	r3, [r7, #4]
 8105302:	681b      	ldr	r3, [r3, #0]
 8105304:	4a21      	ldr	r2, [pc, #132]	; (810538c <HAL_DMA_Abort+0x468>)
 8105306:	4293      	cmp	r3, r2
 8105308:	d01d      	beq.n	8105346 <HAL_DMA_Abort+0x422>
 810530a:	687b      	ldr	r3, [r7, #4]
 810530c:	681b      	ldr	r3, [r3, #0]
 810530e:	4a20      	ldr	r2, [pc, #128]	; (8105390 <HAL_DMA_Abort+0x46c>)
 8105310:	4293      	cmp	r3, r2
 8105312:	d018      	beq.n	8105346 <HAL_DMA_Abort+0x422>
 8105314:	687b      	ldr	r3, [r7, #4]
 8105316:	681b      	ldr	r3, [r3, #0]
 8105318:	4a1e      	ldr	r2, [pc, #120]	; (8105394 <HAL_DMA_Abort+0x470>)
 810531a:	4293      	cmp	r3, r2
 810531c:	d013      	beq.n	8105346 <HAL_DMA_Abort+0x422>
 810531e:	687b      	ldr	r3, [r7, #4]
 8105320:	681b      	ldr	r3, [r3, #0]
 8105322:	4a1d      	ldr	r2, [pc, #116]	; (8105398 <HAL_DMA_Abort+0x474>)
 8105324:	4293      	cmp	r3, r2
 8105326:	d00e      	beq.n	8105346 <HAL_DMA_Abort+0x422>
 8105328:	687b      	ldr	r3, [r7, #4]
 810532a:	681b      	ldr	r3, [r3, #0]
 810532c:	4a1b      	ldr	r2, [pc, #108]	; (810539c <HAL_DMA_Abort+0x478>)
 810532e:	4293      	cmp	r3, r2
 8105330:	d009      	beq.n	8105346 <HAL_DMA_Abort+0x422>
 8105332:	687b      	ldr	r3, [r7, #4]
 8105334:	681b      	ldr	r3, [r3, #0]
 8105336:	4a1a      	ldr	r2, [pc, #104]	; (81053a0 <HAL_DMA_Abort+0x47c>)
 8105338:	4293      	cmp	r3, r2
 810533a:	d004      	beq.n	8105346 <HAL_DMA_Abort+0x422>
 810533c:	687b      	ldr	r3, [r7, #4]
 810533e:	681b      	ldr	r3, [r3, #0]
 8105340:	4a18      	ldr	r2, [pc, #96]	; (81053a4 <HAL_DMA_Abort+0x480>)
 8105342:	4293      	cmp	r3, r2
 8105344:	d101      	bne.n	810534a <HAL_DMA_Abort+0x426>
 8105346:	2301      	movs	r3, #1
 8105348:	e000      	b.n	810534c <HAL_DMA_Abort+0x428>
 810534a:	2300      	movs	r3, #0
 810534c:	2b00      	cmp	r3, #0
 810534e:	d02b      	beq.n	81053a8 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8105350:	687b      	ldr	r3, [r7, #4]
 8105352:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8105354:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8105356:	687b      	ldr	r3, [r7, #4]
 8105358:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 810535a:	f003 031f 	and.w	r3, r3, #31
 810535e:	223f      	movs	r2, #63	; 0x3f
 8105360:	409a      	lsls	r2, r3
 8105362:	68bb      	ldr	r3, [r7, #8]
 8105364:	609a      	str	r2, [r3, #8]
 8105366:	e02a      	b.n	81053be <HAL_DMA_Abort+0x49a>
 8105368:	40020010 	.word	0x40020010
 810536c:	40020028 	.word	0x40020028
 8105370:	40020040 	.word	0x40020040
 8105374:	40020058 	.word	0x40020058
 8105378:	40020070 	.word	0x40020070
 810537c:	40020088 	.word	0x40020088
 8105380:	400200a0 	.word	0x400200a0
 8105384:	400200b8 	.word	0x400200b8
 8105388:	40020410 	.word	0x40020410
 810538c:	40020428 	.word	0x40020428
 8105390:	40020440 	.word	0x40020440
 8105394:	40020458 	.word	0x40020458
 8105398:	40020470 	.word	0x40020470
 810539c:	40020488 	.word	0x40020488
 81053a0:	400204a0 	.word	0x400204a0
 81053a4:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 81053a8:	687b      	ldr	r3, [r7, #4]
 81053aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81053ac:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 81053ae:	687b      	ldr	r3, [r7, #4]
 81053b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81053b2:	f003 031f 	and.w	r3, r3, #31
 81053b6:	2201      	movs	r2, #1
 81053b8:	409a      	lsls	r2, r3
 81053ba:	68fb      	ldr	r3, [r7, #12]
 81053bc:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 81053be:	687b      	ldr	r3, [r7, #4]
 81053c0:	681b      	ldr	r3, [r3, #0]
 81053c2:	4a4f      	ldr	r2, [pc, #316]	; (8105500 <HAL_DMA_Abort+0x5dc>)
 81053c4:	4293      	cmp	r3, r2
 81053c6:	d072      	beq.n	81054ae <HAL_DMA_Abort+0x58a>
 81053c8:	687b      	ldr	r3, [r7, #4]
 81053ca:	681b      	ldr	r3, [r3, #0]
 81053cc:	4a4d      	ldr	r2, [pc, #308]	; (8105504 <HAL_DMA_Abort+0x5e0>)
 81053ce:	4293      	cmp	r3, r2
 81053d0:	d06d      	beq.n	81054ae <HAL_DMA_Abort+0x58a>
 81053d2:	687b      	ldr	r3, [r7, #4]
 81053d4:	681b      	ldr	r3, [r3, #0]
 81053d6:	4a4c      	ldr	r2, [pc, #304]	; (8105508 <HAL_DMA_Abort+0x5e4>)
 81053d8:	4293      	cmp	r3, r2
 81053da:	d068      	beq.n	81054ae <HAL_DMA_Abort+0x58a>
 81053dc:	687b      	ldr	r3, [r7, #4]
 81053de:	681b      	ldr	r3, [r3, #0]
 81053e0:	4a4a      	ldr	r2, [pc, #296]	; (810550c <HAL_DMA_Abort+0x5e8>)
 81053e2:	4293      	cmp	r3, r2
 81053e4:	d063      	beq.n	81054ae <HAL_DMA_Abort+0x58a>
 81053e6:	687b      	ldr	r3, [r7, #4]
 81053e8:	681b      	ldr	r3, [r3, #0]
 81053ea:	4a49      	ldr	r2, [pc, #292]	; (8105510 <HAL_DMA_Abort+0x5ec>)
 81053ec:	4293      	cmp	r3, r2
 81053ee:	d05e      	beq.n	81054ae <HAL_DMA_Abort+0x58a>
 81053f0:	687b      	ldr	r3, [r7, #4]
 81053f2:	681b      	ldr	r3, [r3, #0]
 81053f4:	4a47      	ldr	r2, [pc, #284]	; (8105514 <HAL_DMA_Abort+0x5f0>)
 81053f6:	4293      	cmp	r3, r2
 81053f8:	d059      	beq.n	81054ae <HAL_DMA_Abort+0x58a>
 81053fa:	687b      	ldr	r3, [r7, #4]
 81053fc:	681b      	ldr	r3, [r3, #0]
 81053fe:	4a46      	ldr	r2, [pc, #280]	; (8105518 <HAL_DMA_Abort+0x5f4>)
 8105400:	4293      	cmp	r3, r2
 8105402:	d054      	beq.n	81054ae <HAL_DMA_Abort+0x58a>
 8105404:	687b      	ldr	r3, [r7, #4]
 8105406:	681b      	ldr	r3, [r3, #0]
 8105408:	4a44      	ldr	r2, [pc, #272]	; (810551c <HAL_DMA_Abort+0x5f8>)
 810540a:	4293      	cmp	r3, r2
 810540c:	d04f      	beq.n	81054ae <HAL_DMA_Abort+0x58a>
 810540e:	687b      	ldr	r3, [r7, #4]
 8105410:	681b      	ldr	r3, [r3, #0]
 8105412:	4a43      	ldr	r2, [pc, #268]	; (8105520 <HAL_DMA_Abort+0x5fc>)
 8105414:	4293      	cmp	r3, r2
 8105416:	d04a      	beq.n	81054ae <HAL_DMA_Abort+0x58a>
 8105418:	687b      	ldr	r3, [r7, #4]
 810541a:	681b      	ldr	r3, [r3, #0]
 810541c:	4a41      	ldr	r2, [pc, #260]	; (8105524 <HAL_DMA_Abort+0x600>)
 810541e:	4293      	cmp	r3, r2
 8105420:	d045      	beq.n	81054ae <HAL_DMA_Abort+0x58a>
 8105422:	687b      	ldr	r3, [r7, #4]
 8105424:	681b      	ldr	r3, [r3, #0]
 8105426:	4a40      	ldr	r2, [pc, #256]	; (8105528 <HAL_DMA_Abort+0x604>)
 8105428:	4293      	cmp	r3, r2
 810542a:	d040      	beq.n	81054ae <HAL_DMA_Abort+0x58a>
 810542c:	687b      	ldr	r3, [r7, #4]
 810542e:	681b      	ldr	r3, [r3, #0]
 8105430:	4a3e      	ldr	r2, [pc, #248]	; (810552c <HAL_DMA_Abort+0x608>)
 8105432:	4293      	cmp	r3, r2
 8105434:	d03b      	beq.n	81054ae <HAL_DMA_Abort+0x58a>
 8105436:	687b      	ldr	r3, [r7, #4]
 8105438:	681b      	ldr	r3, [r3, #0]
 810543a:	4a3d      	ldr	r2, [pc, #244]	; (8105530 <HAL_DMA_Abort+0x60c>)
 810543c:	4293      	cmp	r3, r2
 810543e:	d036      	beq.n	81054ae <HAL_DMA_Abort+0x58a>
 8105440:	687b      	ldr	r3, [r7, #4]
 8105442:	681b      	ldr	r3, [r3, #0]
 8105444:	4a3b      	ldr	r2, [pc, #236]	; (8105534 <HAL_DMA_Abort+0x610>)
 8105446:	4293      	cmp	r3, r2
 8105448:	d031      	beq.n	81054ae <HAL_DMA_Abort+0x58a>
 810544a:	687b      	ldr	r3, [r7, #4]
 810544c:	681b      	ldr	r3, [r3, #0]
 810544e:	4a3a      	ldr	r2, [pc, #232]	; (8105538 <HAL_DMA_Abort+0x614>)
 8105450:	4293      	cmp	r3, r2
 8105452:	d02c      	beq.n	81054ae <HAL_DMA_Abort+0x58a>
 8105454:	687b      	ldr	r3, [r7, #4]
 8105456:	681b      	ldr	r3, [r3, #0]
 8105458:	4a38      	ldr	r2, [pc, #224]	; (810553c <HAL_DMA_Abort+0x618>)
 810545a:	4293      	cmp	r3, r2
 810545c:	d027      	beq.n	81054ae <HAL_DMA_Abort+0x58a>
 810545e:	687b      	ldr	r3, [r7, #4]
 8105460:	681b      	ldr	r3, [r3, #0]
 8105462:	4a37      	ldr	r2, [pc, #220]	; (8105540 <HAL_DMA_Abort+0x61c>)
 8105464:	4293      	cmp	r3, r2
 8105466:	d022      	beq.n	81054ae <HAL_DMA_Abort+0x58a>
 8105468:	687b      	ldr	r3, [r7, #4]
 810546a:	681b      	ldr	r3, [r3, #0]
 810546c:	4a35      	ldr	r2, [pc, #212]	; (8105544 <HAL_DMA_Abort+0x620>)
 810546e:	4293      	cmp	r3, r2
 8105470:	d01d      	beq.n	81054ae <HAL_DMA_Abort+0x58a>
 8105472:	687b      	ldr	r3, [r7, #4]
 8105474:	681b      	ldr	r3, [r3, #0]
 8105476:	4a34      	ldr	r2, [pc, #208]	; (8105548 <HAL_DMA_Abort+0x624>)
 8105478:	4293      	cmp	r3, r2
 810547a:	d018      	beq.n	81054ae <HAL_DMA_Abort+0x58a>
 810547c:	687b      	ldr	r3, [r7, #4]
 810547e:	681b      	ldr	r3, [r3, #0]
 8105480:	4a32      	ldr	r2, [pc, #200]	; (810554c <HAL_DMA_Abort+0x628>)
 8105482:	4293      	cmp	r3, r2
 8105484:	d013      	beq.n	81054ae <HAL_DMA_Abort+0x58a>
 8105486:	687b      	ldr	r3, [r7, #4]
 8105488:	681b      	ldr	r3, [r3, #0]
 810548a:	4a31      	ldr	r2, [pc, #196]	; (8105550 <HAL_DMA_Abort+0x62c>)
 810548c:	4293      	cmp	r3, r2
 810548e:	d00e      	beq.n	81054ae <HAL_DMA_Abort+0x58a>
 8105490:	687b      	ldr	r3, [r7, #4]
 8105492:	681b      	ldr	r3, [r3, #0]
 8105494:	4a2f      	ldr	r2, [pc, #188]	; (8105554 <HAL_DMA_Abort+0x630>)
 8105496:	4293      	cmp	r3, r2
 8105498:	d009      	beq.n	81054ae <HAL_DMA_Abort+0x58a>
 810549a:	687b      	ldr	r3, [r7, #4]
 810549c:	681b      	ldr	r3, [r3, #0]
 810549e:	4a2e      	ldr	r2, [pc, #184]	; (8105558 <HAL_DMA_Abort+0x634>)
 81054a0:	4293      	cmp	r3, r2
 81054a2:	d004      	beq.n	81054ae <HAL_DMA_Abort+0x58a>
 81054a4:	687b      	ldr	r3, [r7, #4]
 81054a6:	681b      	ldr	r3, [r3, #0]
 81054a8:	4a2c      	ldr	r2, [pc, #176]	; (810555c <HAL_DMA_Abort+0x638>)
 81054aa:	4293      	cmp	r3, r2
 81054ac:	d101      	bne.n	81054b2 <HAL_DMA_Abort+0x58e>
 81054ae:	2301      	movs	r3, #1
 81054b0:	e000      	b.n	81054b4 <HAL_DMA_Abort+0x590>
 81054b2:	2300      	movs	r3, #0
 81054b4:	2b00      	cmp	r3, #0
 81054b6:	d015      	beq.n	81054e4 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 81054b8:	687b      	ldr	r3, [r7, #4]
 81054ba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 81054bc:	687a      	ldr	r2, [r7, #4]
 81054be:	6e92      	ldr	r2, [r2, #104]	; 0x68
 81054c0:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 81054c2:	687b      	ldr	r3, [r7, #4]
 81054c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 81054c6:	2b00      	cmp	r3, #0
 81054c8:	d00c      	beq.n	81054e4 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 81054ca:	687b      	ldr	r3, [r7, #4]
 81054cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 81054ce:	681a      	ldr	r2, [r3, #0]
 81054d0:	687b      	ldr	r3, [r7, #4]
 81054d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 81054d4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 81054d8:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 81054da:	687b      	ldr	r3, [r7, #4]
 81054dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 81054de:	687a      	ldr	r2, [r7, #4]
 81054e0:	6f52      	ldr	r2, [r2, #116]	; 0x74
 81054e2:	605a      	str	r2, [r3, #4]
      }
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 81054e4:	687b      	ldr	r3, [r7, #4]
 81054e6:	2200      	movs	r2, #0
 81054e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 81054ec:	687b      	ldr	r3, [r7, #4]
 81054ee:	2201      	movs	r2, #1
 81054f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }

  return HAL_OK;
 81054f4:	2300      	movs	r3, #0
}
 81054f6:	4618      	mov	r0, r3
 81054f8:	3718      	adds	r7, #24
 81054fa:	46bd      	mov	sp, r7
 81054fc:	bd80      	pop	{r7, pc}
 81054fe:	bf00      	nop
 8105500:	40020010 	.word	0x40020010
 8105504:	40020028 	.word	0x40020028
 8105508:	40020040 	.word	0x40020040
 810550c:	40020058 	.word	0x40020058
 8105510:	40020070 	.word	0x40020070
 8105514:	40020088 	.word	0x40020088
 8105518:	400200a0 	.word	0x400200a0
 810551c:	400200b8 	.word	0x400200b8
 8105520:	40020410 	.word	0x40020410
 8105524:	40020428 	.word	0x40020428
 8105528:	40020440 	.word	0x40020440
 810552c:	40020458 	.word	0x40020458
 8105530:	40020470 	.word	0x40020470
 8105534:	40020488 	.word	0x40020488
 8105538:	400204a0 	.word	0x400204a0
 810553c:	400204b8 	.word	0x400204b8
 8105540:	58025408 	.word	0x58025408
 8105544:	5802541c 	.word	0x5802541c
 8105548:	58025430 	.word	0x58025430
 810554c:	58025444 	.word	0x58025444
 8105550:	58025458 	.word	0x58025458
 8105554:	5802546c 	.word	0x5802546c
 8105558:	58025480 	.word	0x58025480
 810555c:	58025494 	.word	0x58025494

08105560 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8105560:	b580      	push	{r7, lr}
 8105562:	b084      	sub	sp, #16
 8105564:	af00      	add	r7, sp, #0
 8105566:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8105568:	687b      	ldr	r3, [r7, #4]
 810556a:	2b00      	cmp	r3, #0
 810556c:	d101      	bne.n	8105572 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 810556e:	2301      	movs	r3, #1
 8105570:	e205      	b.n	810597e <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8105572:	687b      	ldr	r3, [r7, #4]
 8105574:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8105578:	b2db      	uxtb	r3, r3
 810557a:	2b02      	cmp	r3, #2
 810557c:	d004      	beq.n	8105588 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 810557e:	687b      	ldr	r3, [r7, #4]
 8105580:	2280      	movs	r2, #128	; 0x80
 8105582:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8105584:	2301      	movs	r3, #1
 8105586:	e1fa      	b.n	810597e <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8105588:	687b      	ldr	r3, [r7, #4]
 810558a:	681b      	ldr	r3, [r3, #0]
 810558c:	4a8c      	ldr	r2, [pc, #560]	; (81057c0 <HAL_DMA_Abort_IT+0x260>)
 810558e:	4293      	cmp	r3, r2
 8105590:	d04a      	beq.n	8105628 <HAL_DMA_Abort_IT+0xc8>
 8105592:	687b      	ldr	r3, [r7, #4]
 8105594:	681b      	ldr	r3, [r3, #0]
 8105596:	4a8b      	ldr	r2, [pc, #556]	; (81057c4 <HAL_DMA_Abort_IT+0x264>)
 8105598:	4293      	cmp	r3, r2
 810559a:	d045      	beq.n	8105628 <HAL_DMA_Abort_IT+0xc8>
 810559c:	687b      	ldr	r3, [r7, #4]
 810559e:	681b      	ldr	r3, [r3, #0]
 81055a0:	4a89      	ldr	r2, [pc, #548]	; (81057c8 <HAL_DMA_Abort_IT+0x268>)
 81055a2:	4293      	cmp	r3, r2
 81055a4:	d040      	beq.n	8105628 <HAL_DMA_Abort_IT+0xc8>
 81055a6:	687b      	ldr	r3, [r7, #4]
 81055a8:	681b      	ldr	r3, [r3, #0]
 81055aa:	4a88      	ldr	r2, [pc, #544]	; (81057cc <HAL_DMA_Abort_IT+0x26c>)
 81055ac:	4293      	cmp	r3, r2
 81055ae:	d03b      	beq.n	8105628 <HAL_DMA_Abort_IT+0xc8>
 81055b0:	687b      	ldr	r3, [r7, #4]
 81055b2:	681b      	ldr	r3, [r3, #0]
 81055b4:	4a86      	ldr	r2, [pc, #536]	; (81057d0 <HAL_DMA_Abort_IT+0x270>)
 81055b6:	4293      	cmp	r3, r2
 81055b8:	d036      	beq.n	8105628 <HAL_DMA_Abort_IT+0xc8>
 81055ba:	687b      	ldr	r3, [r7, #4]
 81055bc:	681b      	ldr	r3, [r3, #0]
 81055be:	4a85      	ldr	r2, [pc, #532]	; (81057d4 <HAL_DMA_Abort_IT+0x274>)
 81055c0:	4293      	cmp	r3, r2
 81055c2:	d031      	beq.n	8105628 <HAL_DMA_Abort_IT+0xc8>
 81055c4:	687b      	ldr	r3, [r7, #4]
 81055c6:	681b      	ldr	r3, [r3, #0]
 81055c8:	4a83      	ldr	r2, [pc, #524]	; (81057d8 <HAL_DMA_Abort_IT+0x278>)
 81055ca:	4293      	cmp	r3, r2
 81055cc:	d02c      	beq.n	8105628 <HAL_DMA_Abort_IT+0xc8>
 81055ce:	687b      	ldr	r3, [r7, #4]
 81055d0:	681b      	ldr	r3, [r3, #0]
 81055d2:	4a82      	ldr	r2, [pc, #520]	; (81057dc <HAL_DMA_Abort_IT+0x27c>)
 81055d4:	4293      	cmp	r3, r2
 81055d6:	d027      	beq.n	8105628 <HAL_DMA_Abort_IT+0xc8>
 81055d8:	687b      	ldr	r3, [r7, #4]
 81055da:	681b      	ldr	r3, [r3, #0]
 81055dc:	4a80      	ldr	r2, [pc, #512]	; (81057e0 <HAL_DMA_Abort_IT+0x280>)
 81055de:	4293      	cmp	r3, r2
 81055e0:	d022      	beq.n	8105628 <HAL_DMA_Abort_IT+0xc8>
 81055e2:	687b      	ldr	r3, [r7, #4]
 81055e4:	681b      	ldr	r3, [r3, #0]
 81055e6:	4a7f      	ldr	r2, [pc, #508]	; (81057e4 <HAL_DMA_Abort_IT+0x284>)
 81055e8:	4293      	cmp	r3, r2
 81055ea:	d01d      	beq.n	8105628 <HAL_DMA_Abort_IT+0xc8>
 81055ec:	687b      	ldr	r3, [r7, #4]
 81055ee:	681b      	ldr	r3, [r3, #0]
 81055f0:	4a7d      	ldr	r2, [pc, #500]	; (81057e8 <HAL_DMA_Abort_IT+0x288>)
 81055f2:	4293      	cmp	r3, r2
 81055f4:	d018      	beq.n	8105628 <HAL_DMA_Abort_IT+0xc8>
 81055f6:	687b      	ldr	r3, [r7, #4]
 81055f8:	681b      	ldr	r3, [r3, #0]
 81055fa:	4a7c      	ldr	r2, [pc, #496]	; (81057ec <HAL_DMA_Abort_IT+0x28c>)
 81055fc:	4293      	cmp	r3, r2
 81055fe:	d013      	beq.n	8105628 <HAL_DMA_Abort_IT+0xc8>
 8105600:	687b      	ldr	r3, [r7, #4]
 8105602:	681b      	ldr	r3, [r3, #0]
 8105604:	4a7a      	ldr	r2, [pc, #488]	; (81057f0 <HAL_DMA_Abort_IT+0x290>)
 8105606:	4293      	cmp	r3, r2
 8105608:	d00e      	beq.n	8105628 <HAL_DMA_Abort_IT+0xc8>
 810560a:	687b      	ldr	r3, [r7, #4]
 810560c:	681b      	ldr	r3, [r3, #0]
 810560e:	4a79      	ldr	r2, [pc, #484]	; (81057f4 <HAL_DMA_Abort_IT+0x294>)
 8105610:	4293      	cmp	r3, r2
 8105612:	d009      	beq.n	8105628 <HAL_DMA_Abort_IT+0xc8>
 8105614:	687b      	ldr	r3, [r7, #4]
 8105616:	681b      	ldr	r3, [r3, #0]
 8105618:	4a77      	ldr	r2, [pc, #476]	; (81057f8 <HAL_DMA_Abort_IT+0x298>)
 810561a:	4293      	cmp	r3, r2
 810561c:	d004      	beq.n	8105628 <HAL_DMA_Abort_IT+0xc8>
 810561e:	687b      	ldr	r3, [r7, #4]
 8105620:	681b      	ldr	r3, [r3, #0]
 8105622:	4a76      	ldr	r2, [pc, #472]	; (81057fc <HAL_DMA_Abort_IT+0x29c>)
 8105624:	4293      	cmp	r3, r2
 8105626:	d101      	bne.n	810562c <HAL_DMA_Abort_IT+0xcc>
 8105628:	2301      	movs	r3, #1
 810562a:	e000      	b.n	810562e <HAL_DMA_Abort_IT+0xce>
 810562c:	2300      	movs	r3, #0
 810562e:	2b00      	cmp	r3, #0
 8105630:	d065      	beq.n	81056fe <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8105632:	687b      	ldr	r3, [r7, #4]
 8105634:	2204      	movs	r2, #4
 8105636:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 810563a:	687b      	ldr	r3, [r7, #4]
 810563c:	681b      	ldr	r3, [r3, #0]
 810563e:	4a60      	ldr	r2, [pc, #384]	; (81057c0 <HAL_DMA_Abort_IT+0x260>)
 8105640:	4293      	cmp	r3, r2
 8105642:	d04a      	beq.n	81056da <HAL_DMA_Abort_IT+0x17a>
 8105644:	687b      	ldr	r3, [r7, #4]
 8105646:	681b      	ldr	r3, [r3, #0]
 8105648:	4a5e      	ldr	r2, [pc, #376]	; (81057c4 <HAL_DMA_Abort_IT+0x264>)
 810564a:	4293      	cmp	r3, r2
 810564c:	d045      	beq.n	81056da <HAL_DMA_Abort_IT+0x17a>
 810564e:	687b      	ldr	r3, [r7, #4]
 8105650:	681b      	ldr	r3, [r3, #0]
 8105652:	4a5d      	ldr	r2, [pc, #372]	; (81057c8 <HAL_DMA_Abort_IT+0x268>)
 8105654:	4293      	cmp	r3, r2
 8105656:	d040      	beq.n	81056da <HAL_DMA_Abort_IT+0x17a>
 8105658:	687b      	ldr	r3, [r7, #4]
 810565a:	681b      	ldr	r3, [r3, #0]
 810565c:	4a5b      	ldr	r2, [pc, #364]	; (81057cc <HAL_DMA_Abort_IT+0x26c>)
 810565e:	4293      	cmp	r3, r2
 8105660:	d03b      	beq.n	81056da <HAL_DMA_Abort_IT+0x17a>
 8105662:	687b      	ldr	r3, [r7, #4]
 8105664:	681b      	ldr	r3, [r3, #0]
 8105666:	4a5a      	ldr	r2, [pc, #360]	; (81057d0 <HAL_DMA_Abort_IT+0x270>)
 8105668:	4293      	cmp	r3, r2
 810566a:	d036      	beq.n	81056da <HAL_DMA_Abort_IT+0x17a>
 810566c:	687b      	ldr	r3, [r7, #4]
 810566e:	681b      	ldr	r3, [r3, #0]
 8105670:	4a58      	ldr	r2, [pc, #352]	; (81057d4 <HAL_DMA_Abort_IT+0x274>)
 8105672:	4293      	cmp	r3, r2
 8105674:	d031      	beq.n	81056da <HAL_DMA_Abort_IT+0x17a>
 8105676:	687b      	ldr	r3, [r7, #4]
 8105678:	681b      	ldr	r3, [r3, #0]
 810567a:	4a57      	ldr	r2, [pc, #348]	; (81057d8 <HAL_DMA_Abort_IT+0x278>)
 810567c:	4293      	cmp	r3, r2
 810567e:	d02c      	beq.n	81056da <HAL_DMA_Abort_IT+0x17a>
 8105680:	687b      	ldr	r3, [r7, #4]
 8105682:	681b      	ldr	r3, [r3, #0]
 8105684:	4a55      	ldr	r2, [pc, #340]	; (81057dc <HAL_DMA_Abort_IT+0x27c>)
 8105686:	4293      	cmp	r3, r2
 8105688:	d027      	beq.n	81056da <HAL_DMA_Abort_IT+0x17a>
 810568a:	687b      	ldr	r3, [r7, #4]
 810568c:	681b      	ldr	r3, [r3, #0]
 810568e:	4a54      	ldr	r2, [pc, #336]	; (81057e0 <HAL_DMA_Abort_IT+0x280>)
 8105690:	4293      	cmp	r3, r2
 8105692:	d022      	beq.n	81056da <HAL_DMA_Abort_IT+0x17a>
 8105694:	687b      	ldr	r3, [r7, #4]
 8105696:	681b      	ldr	r3, [r3, #0]
 8105698:	4a52      	ldr	r2, [pc, #328]	; (81057e4 <HAL_DMA_Abort_IT+0x284>)
 810569a:	4293      	cmp	r3, r2
 810569c:	d01d      	beq.n	81056da <HAL_DMA_Abort_IT+0x17a>
 810569e:	687b      	ldr	r3, [r7, #4]
 81056a0:	681b      	ldr	r3, [r3, #0]
 81056a2:	4a51      	ldr	r2, [pc, #324]	; (81057e8 <HAL_DMA_Abort_IT+0x288>)
 81056a4:	4293      	cmp	r3, r2
 81056a6:	d018      	beq.n	81056da <HAL_DMA_Abort_IT+0x17a>
 81056a8:	687b      	ldr	r3, [r7, #4]
 81056aa:	681b      	ldr	r3, [r3, #0]
 81056ac:	4a4f      	ldr	r2, [pc, #316]	; (81057ec <HAL_DMA_Abort_IT+0x28c>)
 81056ae:	4293      	cmp	r3, r2
 81056b0:	d013      	beq.n	81056da <HAL_DMA_Abort_IT+0x17a>
 81056b2:	687b      	ldr	r3, [r7, #4]
 81056b4:	681b      	ldr	r3, [r3, #0]
 81056b6:	4a4e      	ldr	r2, [pc, #312]	; (81057f0 <HAL_DMA_Abort_IT+0x290>)
 81056b8:	4293      	cmp	r3, r2
 81056ba:	d00e      	beq.n	81056da <HAL_DMA_Abort_IT+0x17a>
 81056bc:	687b      	ldr	r3, [r7, #4]
 81056be:	681b      	ldr	r3, [r3, #0]
 81056c0:	4a4c      	ldr	r2, [pc, #304]	; (81057f4 <HAL_DMA_Abort_IT+0x294>)
 81056c2:	4293      	cmp	r3, r2
 81056c4:	d009      	beq.n	81056da <HAL_DMA_Abort_IT+0x17a>
 81056c6:	687b      	ldr	r3, [r7, #4]
 81056c8:	681b      	ldr	r3, [r3, #0]
 81056ca:	4a4b      	ldr	r2, [pc, #300]	; (81057f8 <HAL_DMA_Abort_IT+0x298>)
 81056cc:	4293      	cmp	r3, r2
 81056ce:	d004      	beq.n	81056da <HAL_DMA_Abort_IT+0x17a>
 81056d0:	687b      	ldr	r3, [r7, #4]
 81056d2:	681b      	ldr	r3, [r3, #0]
 81056d4:	4a49      	ldr	r2, [pc, #292]	; (81057fc <HAL_DMA_Abort_IT+0x29c>)
 81056d6:	4293      	cmp	r3, r2
 81056d8:	d108      	bne.n	81056ec <HAL_DMA_Abort_IT+0x18c>
 81056da:	687b      	ldr	r3, [r7, #4]
 81056dc:	681b      	ldr	r3, [r3, #0]
 81056de:	681a      	ldr	r2, [r3, #0]
 81056e0:	687b      	ldr	r3, [r7, #4]
 81056e2:	681b      	ldr	r3, [r3, #0]
 81056e4:	f022 0201 	bic.w	r2, r2, #1
 81056e8:	601a      	str	r2, [r3, #0]
 81056ea:	e147      	b.n	810597c <HAL_DMA_Abort_IT+0x41c>
 81056ec:	687b      	ldr	r3, [r7, #4]
 81056ee:	681b      	ldr	r3, [r3, #0]
 81056f0:	681a      	ldr	r2, [r3, #0]
 81056f2:	687b      	ldr	r3, [r7, #4]
 81056f4:	681b      	ldr	r3, [r3, #0]
 81056f6:	f022 0201 	bic.w	r2, r2, #1
 81056fa:	601a      	str	r2, [r3, #0]
 81056fc:	e13e      	b.n	810597c <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 81056fe:	687b      	ldr	r3, [r7, #4]
 8105700:	681b      	ldr	r3, [r3, #0]
 8105702:	681a      	ldr	r2, [r3, #0]
 8105704:	687b      	ldr	r3, [r7, #4]
 8105706:	681b      	ldr	r3, [r3, #0]
 8105708:	f022 020e 	bic.w	r2, r2, #14
 810570c:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 810570e:	687b      	ldr	r3, [r7, #4]
 8105710:	681b      	ldr	r3, [r3, #0]
 8105712:	4a2b      	ldr	r2, [pc, #172]	; (81057c0 <HAL_DMA_Abort_IT+0x260>)
 8105714:	4293      	cmp	r3, r2
 8105716:	d04a      	beq.n	81057ae <HAL_DMA_Abort_IT+0x24e>
 8105718:	687b      	ldr	r3, [r7, #4]
 810571a:	681b      	ldr	r3, [r3, #0]
 810571c:	4a29      	ldr	r2, [pc, #164]	; (81057c4 <HAL_DMA_Abort_IT+0x264>)
 810571e:	4293      	cmp	r3, r2
 8105720:	d045      	beq.n	81057ae <HAL_DMA_Abort_IT+0x24e>
 8105722:	687b      	ldr	r3, [r7, #4]
 8105724:	681b      	ldr	r3, [r3, #0]
 8105726:	4a28      	ldr	r2, [pc, #160]	; (81057c8 <HAL_DMA_Abort_IT+0x268>)
 8105728:	4293      	cmp	r3, r2
 810572a:	d040      	beq.n	81057ae <HAL_DMA_Abort_IT+0x24e>
 810572c:	687b      	ldr	r3, [r7, #4]
 810572e:	681b      	ldr	r3, [r3, #0]
 8105730:	4a26      	ldr	r2, [pc, #152]	; (81057cc <HAL_DMA_Abort_IT+0x26c>)
 8105732:	4293      	cmp	r3, r2
 8105734:	d03b      	beq.n	81057ae <HAL_DMA_Abort_IT+0x24e>
 8105736:	687b      	ldr	r3, [r7, #4]
 8105738:	681b      	ldr	r3, [r3, #0]
 810573a:	4a25      	ldr	r2, [pc, #148]	; (81057d0 <HAL_DMA_Abort_IT+0x270>)
 810573c:	4293      	cmp	r3, r2
 810573e:	d036      	beq.n	81057ae <HAL_DMA_Abort_IT+0x24e>
 8105740:	687b      	ldr	r3, [r7, #4]
 8105742:	681b      	ldr	r3, [r3, #0]
 8105744:	4a23      	ldr	r2, [pc, #140]	; (81057d4 <HAL_DMA_Abort_IT+0x274>)
 8105746:	4293      	cmp	r3, r2
 8105748:	d031      	beq.n	81057ae <HAL_DMA_Abort_IT+0x24e>
 810574a:	687b      	ldr	r3, [r7, #4]
 810574c:	681b      	ldr	r3, [r3, #0]
 810574e:	4a22      	ldr	r2, [pc, #136]	; (81057d8 <HAL_DMA_Abort_IT+0x278>)
 8105750:	4293      	cmp	r3, r2
 8105752:	d02c      	beq.n	81057ae <HAL_DMA_Abort_IT+0x24e>
 8105754:	687b      	ldr	r3, [r7, #4]
 8105756:	681b      	ldr	r3, [r3, #0]
 8105758:	4a20      	ldr	r2, [pc, #128]	; (81057dc <HAL_DMA_Abort_IT+0x27c>)
 810575a:	4293      	cmp	r3, r2
 810575c:	d027      	beq.n	81057ae <HAL_DMA_Abort_IT+0x24e>
 810575e:	687b      	ldr	r3, [r7, #4]
 8105760:	681b      	ldr	r3, [r3, #0]
 8105762:	4a1f      	ldr	r2, [pc, #124]	; (81057e0 <HAL_DMA_Abort_IT+0x280>)
 8105764:	4293      	cmp	r3, r2
 8105766:	d022      	beq.n	81057ae <HAL_DMA_Abort_IT+0x24e>
 8105768:	687b      	ldr	r3, [r7, #4]
 810576a:	681b      	ldr	r3, [r3, #0]
 810576c:	4a1d      	ldr	r2, [pc, #116]	; (81057e4 <HAL_DMA_Abort_IT+0x284>)
 810576e:	4293      	cmp	r3, r2
 8105770:	d01d      	beq.n	81057ae <HAL_DMA_Abort_IT+0x24e>
 8105772:	687b      	ldr	r3, [r7, #4]
 8105774:	681b      	ldr	r3, [r3, #0]
 8105776:	4a1c      	ldr	r2, [pc, #112]	; (81057e8 <HAL_DMA_Abort_IT+0x288>)
 8105778:	4293      	cmp	r3, r2
 810577a:	d018      	beq.n	81057ae <HAL_DMA_Abort_IT+0x24e>
 810577c:	687b      	ldr	r3, [r7, #4]
 810577e:	681b      	ldr	r3, [r3, #0]
 8105780:	4a1a      	ldr	r2, [pc, #104]	; (81057ec <HAL_DMA_Abort_IT+0x28c>)
 8105782:	4293      	cmp	r3, r2
 8105784:	d013      	beq.n	81057ae <HAL_DMA_Abort_IT+0x24e>
 8105786:	687b      	ldr	r3, [r7, #4]
 8105788:	681b      	ldr	r3, [r3, #0]
 810578a:	4a19      	ldr	r2, [pc, #100]	; (81057f0 <HAL_DMA_Abort_IT+0x290>)
 810578c:	4293      	cmp	r3, r2
 810578e:	d00e      	beq.n	81057ae <HAL_DMA_Abort_IT+0x24e>
 8105790:	687b      	ldr	r3, [r7, #4]
 8105792:	681b      	ldr	r3, [r3, #0]
 8105794:	4a17      	ldr	r2, [pc, #92]	; (81057f4 <HAL_DMA_Abort_IT+0x294>)
 8105796:	4293      	cmp	r3, r2
 8105798:	d009      	beq.n	81057ae <HAL_DMA_Abort_IT+0x24e>
 810579a:	687b      	ldr	r3, [r7, #4]
 810579c:	681b      	ldr	r3, [r3, #0]
 810579e:	4a16      	ldr	r2, [pc, #88]	; (81057f8 <HAL_DMA_Abort_IT+0x298>)
 81057a0:	4293      	cmp	r3, r2
 81057a2:	d004      	beq.n	81057ae <HAL_DMA_Abort_IT+0x24e>
 81057a4:	687b      	ldr	r3, [r7, #4]
 81057a6:	681b      	ldr	r3, [r3, #0]
 81057a8:	4a14      	ldr	r2, [pc, #80]	; (81057fc <HAL_DMA_Abort_IT+0x29c>)
 81057aa:	4293      	cmp	r3, r2
 81057ac:	d128      	bne.n	8105800 <HAL_DMA_Abort_IT+0x2a0>
 81057ae:	687b      	ldr	r3, [r7, #4]
 81057b0:	681b      	ldr	r3, [r3, #0]
 81057b2:	681a      	ldr	r2, [r3, #0]
 81057b4:	687b      	ldr	r3, [r7, #4]
 81057b6:	681b      	ldr	r3, [r3, #0]
 81057b8:	f022 0201 	bic.w	r2, r2, #1
 81057bc:	601a      	str	r2, [r3, #0]
 81057be:	e027      	b.n	8105810 <HAL_DMA_Abort_IT+0x2b0>
 81057c0:	40020010 	.word	0x40020010
 81057c4:	40020028 	.word	0x40020028
 81057c8:	40020040 	.word	0x40020040
 81057cc:	40020058 	.word	0x40020058
 81057d0:	40020070 	.word	0x40020070
 81057d4:	40020088 	.word	0x40020088
 81057d8:	400200a0 	.word	0x400200a0
 81057dc:	400200b8 	.word	0x400200b8
 81057e0:	40020410 	.word	0x40020410
 81057e4:	40020428 	.word	0x40020428
 81057e8:	40020440 	.word	0x40020440
 81057ec:	40020458 	.word	0x40020458
 81057f0:	40020470 	.word	0x40020470
 81057f4:	40020488 	.word	0x40020488
 81057f8:	400204a0 	.word	0x400204a0
 81057fc:	400204b8 	.word	0x400204b8
 8105800:	687b      	ldr	r3, [r7, #4]
 8105802:	681b      	ldr	r3, [r3, #0]
 8105804:	681a      	ldr	r2, [r3, #0]
 8105806:	687b      	ldr	r3, [r7, #4]
 8105808:	681b      	ldr	r3, [r3, #0]
 810580a:	f022 0201 	bic.w	r2, r2, #1
 810580e:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8105810:	687b      	ldr	r3, [r7, #4]
 8105812:	681b      	ldr	r3, [r3, #0]
 8105814:	4a5c      	ldr	r2, [pc, #368]	; (8105988 <HAL_DMA_Abort_IT+0x428>)
 8105816:	4293      	cmp	r3, r2
 8105818:	d072      	beq.n	8105900 <HAL_DMA_Abort_IT+0x3a0>
 810581a:	687b      	ldr	r3, [r7, #4]
 810581c:	681b      	ldr	r3, [r3, #0]
 810581e:	4a5b      	ldr	r2, [pc, #364]	; (810598c <HAL_DMA_Abort_IT+0x42c>)
 8105820:	4293      	cmp	r3, r2
 8105822:	d06d      	beq.n	8105900 <HAL_DMA_Abort_IT+0x3a0>
 8105824:	687b      	ldr	r3, [r7, #4]
 8105826:	681b      	ldr	r3, [r3, #0]
 8105828:	4a59      	ldr	r2, [pc, #356]	; (8105990 <HAL_DMA_Abort_IT+0x430>)
 810582a:	4293      	cmp	r3, r2
 810582c:	d068      	beq.n	8105900 <HAL_DMA_Abort_IT+0x3a0>
 810582e:	687b      	ldr	r3, [r7, #4]
 8105830:	681b      	ldr	r3, [r3, #0]
 8105832:	4a58      	ldr	r2, [pc, #352]	; (8105994 <HAL_DMA_Abort_IT+0x434>)
 8105834:	4293      	cmp	r3, r2
 8105836:	d063      	beq.n	8105900 <HAL_DMA_Abort_IT+0x3a0>
 8105838:	687b      	ldr	r3, [r7, #4]
 810583a:	681b      	ldr	r3, [r3, #0]
 810583c:	4a56      	ldr	r2, [pc, #344]	; (8105998 <HAL_DMA_Abort_IT+0x438>)
 810583e:	4293      	cmp	r3, r2
 8105840:	d05e      	beq.n	8105900 <HAL_DMA_Abort_IT+0x3a0>
 8105842:	687b      	ldr	r3, [r7, #4]
 8105844:	681b      	ldr	r3, [r3, #0]
 8105846:	4a55      	ldr	r2, [pc, #340]	; (810599c <HAL_DMA_Abort_IT+0x43c>)
 8105848:	4293      	cmp	r3, r2
 810584a:	d059      	beq.n	8105900 <HAL_DMA_Abort_IT+0x3a0>
 810584c:	687b      	ldr	r3, [r7, #4]
 810584e:	681b      	ldr	r3, [r3, #0]
 8105850:	4a53      	ldr	r2, [pc, #332]	; (81059a0 <HAL_DMA_Abort_IT+0x440>)
 8105852:	4293      	cmp	r3, r2
 8105854:	d054      	beq.n	8105900 <HAL_DMA_Abort_IT+0x3a0>
 8105856:	687b      	ldr	r3, [r7, #4]
 8105858:	681b      	ldr	r3, [r3, #0]
 810585a:	4a52      	ldr	r2, [pc, #328]	; (81059a4 <HAL_DMA_Abort_IT+0x444>)
 810585c:	4293      	cmp	r3, r2
 810585e:	d04f      	beq.n	8105900 <HAL_DMA_Abort_IT+0x3a0>
 8105860:	687b      	ldr	r3, [r7, #4]
 8105862:	681b      	ldr	r3, [r3, #0]
 8105864:	4a50      	ldr	r2, [pc, #320]	; (81059a8 <HAL_DMA_Abort_IT+0x448>)
 8105866:	4293      	cmp	r3, r2
 8105868:	d04a      	beq.n	8105900 <HAL_DMA_Abort_IT+0x3a0>
 810586a:	687b      	ldr	r3, [r7, #4]
 810586c:	681b      	ldr	r3, [r3, #0]
 810586e:	4a4f      	ldr	r2, [pc, #316]	; (81059ac <HAL_DMA_Abort_IT+0x44c>)
 8105870:	4293      	cmp	r3, r2
 8105872:	d045      	beq.n	8105900 <HAL_DMA_Abort_IT+0x3a0>
 8105874:	687b      	ldr	r3, [r7, #4]
 8105876:	681b      	ldr	r3, [r3, #0]
 8105878:	4a4d      	ldr	r2, [pc, #308]	; (81059b0 <HAL_DMA_Abort_IT+0x450>)
 810587a:	4293      	cmp	r3, r2
 810587c:	d040      	beq.n	8105900 <HAL_DMA_Abort_IT+0x3a0>
 810587e:	687b      	ldr	r3, [r7, #4]
 8105880:	681b      	ldr	r3, [r3, #0]
 8105882:	4a4c      	ldr	r2, [pc, #304]	; (81059b4 <HAL_DMA_Abort_IT+0x454>)
 8105884:	4293      	cmp	r3, r2
 8105886:	d03b      	beq.n	8105900 <HAL_DMA_Abort_IT+0x3a0>
 8105888:	687b      	ldr	r3, [r7, #4]
 810588a:	681b      	ldr	r3, [r3, #0]
 810588c:	4a4a      	ldr	r2, [pc, #296]	; (81059b8 <HAL_DMA_Abort_IT+0x458>)
 810588e:	4293      	cmp	r3, r2
 8105890:	d036      	beq.n	8105900 <HAL_DMA_Abort_IT+0x3a0>
 8105892:	687b      	ldr	r3, [r7, #4]
 8105894:	681b      	ldr	r3, [r3, #0]
 8105896:	4a49      	ldr	r2, [pc, #292]	; (81059bc <HAL_DMA_Abort_IT+0x45c>)
 8105898:	4293      	cmp	r3, r2
 810589a:	d031      	beq.n	8105900 <HAL_DMA_Abort_IT+0x3a0>
 810589c:	687b      	ldr	r3, [r7, #4]
 810589e:	681b      	ldr	r3, [r3, #0]
 81058a0:	4a47      	ldr	r2, [pc, #284]	; (81059c0 <HAL_DMA_Abort_IT+0x460>)
 81058a2:	4293      	cmp	r3, r2
 81058a4:	d02c      	beq.n	8105900 <HAL_DMA_Abort_IT+0x3a0>
 81058a6:	687b      	ldr	r3, [r7, #4]
 81058a8:	681b      	ldr	r3, [r3, #0]
 81058aa:	4a46      	ldr	r2, [pc, #280]	; (81059c4 <HAL_DMA_Abort_IT+0x464>)
 81058ac:	4293      	cmp	r3, r2
 81058ae:	d027      	beq.n	8105900 <HAL_DMA_Abort_IT+0x3a0>
 81058b0:	687b      	ldr	r3, [r7, #4]
 81058b2:	681b      	ldr	r3, [r3, #0]
 81058b4:	4a44      	ldr	r2, [pc, #272]	; (81059c8 <HAL_DMA_Abort_IT+0x468>)
 81058b6:	4293      	cmp	r3, r2
 81058b8:	d022      	beq.n	8105900 <HAL_DMA_Abort_IT+0x3a0>
 81058ba:	687b      	ldr	r3, [r7, #4]
 81058bc:	681b      	ldr	r3, [r3, #0]
 81058be:	4a43      	ldr	r2, [pc, #268]	; (81059cc <HAL_DMA_Abort_IT+0x46c>)
 81058c0:	4293      	cmp	r3, r2
 81058c2:	d01d      	beq.n	8105900 <HAL_DMA_Abort_IT+0x3a0>
 81058c4:	687b      	ldr	r3, [r7, #4]
 81058c6:	681b      	ldr	r3, [r3, #0]
 81058c8:	4a41      	ldr	r2, [pc, #260]	; (81059d0 <HAL_DMA_Abort_IT+0x470>)
 81058ca:	4293      	cmp	r3, r2
 81058cc:	d018      	beq.n	8105900 <HAL_DMA_Abort_IT+0x3a0>
 81058ce:	687b      	ldr	r3, [r7, #4]
 81058d0:	681b      	ldr	r3, [r3, #0]
 81058d2:	4a40      	ldr	r2, [pc, #256]	; (81059d4 <HAL_DMA_Abort_IT+0x474>)
 81058d4:	4293      	cmp	r3, r2
 81058d6:	d013      	beq.n	8105900 <HAL_DMA_Abort_IT+0x3a0>
 81058d8:	687b      	ldr	r3, [r7, #4]
 81058da:	681b      	ldr	r3, [r3, #0]
 81058dc:	4a3e      	ldr	r2, [pc, #248]	; (81059d8 <HAL_DMA_Abort_IT+0x478>)
 81058de:	4293      	cmp	r3, r2
 81058e0:	d00e      	beq.n	8105900 <HAL_DMA_Abort_IT+0x3a0>
 81058e2:	687b      	ldr	r3, [r7, #4]
 81058e4:	681b      	ldr	r3, [r3, #0]
 81058e6:	4a3d      	ldr	r2, [pc, #244]	; (81059dc <HAL_DMA_Abort_IT+0x47c>)
 81058e8:	4293      	cmp	r3, r2
 81058ea:	d009      	beq.n	8105900 <HAL_DMA_Abort_IT+0x3a0>
 81058ec:	687b      	ldr	r3, [r7, #4]
 81058ee:	681b      	ldr	r3, [r3, #0]
 81058f0:	4a3b      	ldr	r2, [pc, #236]	; (81059e0 <HAL_DMA_Abort_IT+0x480>)
 81058f2:	4293      	cmp	r3, r2
 81058f4:	d004      	beq.n	8105900 <HAL_DMA_Abort_IT+0x3a0>
 81058f6:	687b      	ldr	r3, [r7, #4]
 81058f8:	681b      	ldr	r3, [r3, #0]
 81058fa:	4a3a      	ldr	r2, [pc, #232]	; (81059e4 <HAL_DMA_Abort_IT+0x484>)
 81058fc:	4293      	cmp	r3, r2
 81058fe:	d101      	bne.n	8105904 <HAL_DMA_Abort_IT+0x3a4>
 8105900:	2301      	movs	r3, #1
 8105902:	e000      	b.n	8105906 <HAL_DMA_Abort_IT+0x3a6>
 8105904:	2300      	movs	r3, #0
 8105906:	2b00      	cmp	r3, #0
 8105908:	d028      	beq.n	810595c <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 810590a:	687b      	ldr	r3, [r7, #4]
 810590c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 810590e:	681a      	ldr	r2, [r3, #0]
 8105910:	687b      	ldr	r3, [r7, #4]
 8105912:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8105914:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8105918:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 810591a:	687b      	ldr	r3, [r7, #4]
 810591c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810591e:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8105920:	687b      	ldr	r3, [r7, #4]
 8105922:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8105924:	f003 031f 	and.w	r3, r3, #31
 8105928:	2201      	movs	r2, #1
 810592a:	409a      	lsls	r2, r3
 810592c:	68fb      	ldr	r3, [r7, #12]
 810592e:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8105930:	687b      	ldr	r3, [r7, #4]
 8105932:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8105934:	687a      	ldr	r2, [r7, #4]
 8105936:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8105938:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 810593a:	687b      	ldr	r3, [r7, #4]
 810593c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 810593e:	2b00      	cmp	r3, #0
 8105940:	d00c      	beq.n	810595c <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8105942:	687b      	ldr	r3, [r7, #4]
 8105944:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8105946:	681a      	ldr	r2, [r3, #0]
 8105948:	687b      	ldr	r3, [r7, #4]
 810594a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 810594c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8105950:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8105952:	687b      	ldr	r3, [r7, #4]
 8105954:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8105956:	687a      	ldr	r2, [r7, #4]
 8105958:	6f52      	ldr	r2, [r2, #116]	; 0x74
 810595a:	605a      	str	r2, [r3, #4]
        }
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 810595c:	687b      	ldr	r3, [r7, #4]
 810595e:	2200      	movs	r2, #0
 8105960:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8105964:	687b      	ldr	r3, [r7, #4]
 8105966:	2201      	movs	r2, #1
 8105968:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 810596c:	687b      	ldr	r3, [r7, #4]
 810596e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8105970:	2b00      	cmp	r3, #0
 8105972:	d003      	beq.n	810597c <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 8105974:	687b      	ldr	r3, [r7, #4]
 8105976:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8105978:	6878      	ldr	r0, [r7, #4]
 810597a:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 810597c:	2300      	movs	r3, #0
}
 810597e:	4618      	mov	r0, r3
 8105980:	3710      	adds	r7, #16
 8105982:	46bd      	mov	sp, r7
 8105984:	bd80      	pop	{r7, pc}
 8105986:	bf00      	nop
 8105988:	40020010 	.word	0x40020010
 810598c:	40020028 	.word	0x40020028
 8105990:	40020040 	.word	0x40020040
 8105994:	40020058 	.word	0x40020058
 8105998:	40020070 	.word	0x40020070
 810599c:	40020088 	.word	0x40020088
 81059a0:	400200a0 	.word	0x400200a0
 81059a4:	400200b8 	.word	0x400200b8
 81059a8:	40020410 	.word	0x40020410
 81059ac:	40020428 	.word	0x40020428
 81059b0:	40020440 	.word	0x40020440
 81059b4:	40020458 	.word	0x40020458
 81059b8:	40020470 	.word	0x40020470
 81059bc:	40020488 	.word	0x40020488
 81059c0:	400204a0 	.word	0x400204a0
 81059c4:	400204b8 	.word	0x400204b8
 81059c8:	58025408 	.word	0x58025408
 81059cc:	5802541c 	.word	0x5802541c
 81059d0:	58025430 	.word	0x58025430
 81059d4:	58025444 	.word	0x58025444
 81059d8:	58025458 	.word	0x58025458
 81059dc:	5802546c 	.word	0x5802546c
 81059e0:	58025480 	.word	0x58025480
 81059e4:	58025494 	.word	0x58025494

081059e8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 81059e8:	b580      	push	{r7, lr}
 81059ea:	b08a      	sub	sp, #40	; 0x28
 81059ec:	af00      	add	r7, sp, #0
 81059ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 81059f0:	2300      	movs	r3, #0
 81059f2:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 81059f4:	4b67      	ldr	r3, [pc, #412]	; (8105b94 <HAL_DMA_IRQHandler+0x1ac>)
 81059f6:	681b      	ldr	r3, [r3, #0]
 81059f8:	4a67      	ldr	r2, [pc, #412]	; (8105b98 <HAL_DMA_IRQHandler+0x1b0>)
 81059fa:	fba2 2303 	umull	r2, r3, r2, r3
 81059fe:	0a9b      	lsrs	r3, r3, #10
 8105a00:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8105a02:	687b      	ldr	r3, [r7, #4]
 8105a04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8105a06:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8105a08:	687b      	ldr	r3, [r7, #4]
 8105a0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8105a0c:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8105a0e:	6a3b      	ldr	r3, [r7, #32]
 8105a10:	681b      	ldr	r3, [r3, #0]
 8105a12:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8105a14:	69fb      	ldr	r3, [r7, #28]
 8105a16:	681b      	ldr	r3, [r3, #0]
 8105a18:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8105a1a:	687b      	ldr	r3, [r7, #4]
 8105a1c:	681b      	ldr	r3, [r3, #0]
 8105a1e:	4a5f      	ldr	r2, [pc, #380]	; (8105b9c <HAL_DMA_IRQHandler+0x1b4>)
 8105a20:	4293      	cmp	r3, r2
 8105a22:	d04a      	beq.n	8105aba <HAL_DMA_IRQHandler+0xd2>
 8105a24:	687b      	ldr	r3, [r7, #4]
 8105a26:	681b      	ldr	r3, [r3, #0]
 8105a28:	4a5d      	ldr	r2, [pc, #372]	; (8105ba0 <HAL_DMA_IRQHandler+0x1b8>)
 8105a2a:	4293      	cmp	r3, r2
 8105a2c:	d045      	beq.n	8105aba <HAL_DMA_IRQHandler+0xd2>
 8105a2e:	687b      	ldr	r3, [r7, #4]
 8105a30:	681b      	ldr	r3, [r3, #0]
 8105a32:	4a5c      	ldr	r2, [pc, #368]	; (8105ba4 <HAL_DMA_IRQHandler+0x1bc>)
 8105a34:	4293      	cmp	r3, r2
 8105a36:	d040      	beq.n	8105aba <HAL_DMA_IRQHandler+0xd2>
 8105a38:	687b      	ldr	r3, [r7, #4]
 8105a3a:	681b      	ldr	r3, [r3, #0]
 8105a3c:	4a5a      	ldr	r2, [pc, #360]	; (8105ba8 <HAL_DMA_IRQHandler+0x1c0>)
 8105a3e:	4293      	cmp	r3, r2
 8105a40:	d03b      	beq.n	8105aba <HAL_DMA_IRQHandler+0xd2>
 8105a42:	687b      	ldr	r3, [r7, #4]
 8105a44:	681b      	ldr	r3, [r3, #0]
 8105a46:	4a59      	ldr	r2, [pc, #356]	; (8105bac <HAL_DMA_IRQHandler+0x1c4>)
 8105a48:	4293      	cmp	r3, r2
 8105a4a:	d036      	beq.n	8105aba <HAL_DMA_IRQHandler+0xd2>
 8105a4c:	687b      	ldr	r3, [r7, #4]
 8105a4e:	681b      	ldr	r3, [r3, #0]
 8105a50:	4a57      	ldr	r2, [pc, #348]	; (8105bb0 <HAL_DMA_IRQHandler+0x1c8>)
 8105a52:	4293      	cmp	r3, r2
 8105a54:	d031      	beq.n	8105aba <HAL_DMA_IRQHandler+0xd2>
 8105a56:	687b      	ldr	r3, [r7, #4]
 8105a58:	681b      	ldr	r3, [r3, #0]
 8105a5a:	4a56      	ldr	r2, [pc, #344]	; (8105bb4 <HAL_DMA_IRQHandler+0x1cc>)
 8105a5c:	4293      	cmp	r3, r2
 8105a5e:	d02c      	beq.n	8105aba <HAL_DMA_IRQHandler+0xd2>
 8105a60:	687b      	ldr	r3, [r7, #4]
 8105a62:	681b      	ldr	r3, [r3, #0]
 8105a64:	4a54      	ldr	r2, [pc, #336]	; (8105bb8 <HAL_DMA_IRQHandler+0x1d0>)
 8105a66:	4293      	cmp	r3, r2
 8105a68:	d027      	beq.n	8105aba <HAL_DMA_IRQHandler+0xd2>
 8105a6a:	687b      	ldr	r3, [r7, #4]
 8105a6c:	681b      	ldr	r3, [r3, #0]
 8105a6e:	4a53      	ldr	r2, [pc, #332]	; (8105bbc <HAL_DMA_IRQHandler+0x1d4>)
 8105a70:	4293      	cmp	r3, r2
 8105a72:	d022      	beq.n	8105aba <HAL_DMA_IRQHandler+0xd2>
 8105a74:	687b      	ldr	r3, [r7, #4]
 8105a76:	681b      	ldr	r3, [r3, #0]
 8105a78:	4a51      	ldr	r2, [pc, #324]	; (8105bc0 <HAL_DMA_IRQHandler+0x1d8>)
 8105a7a:	4293      	cmp	r3, r2
 8105a7c:	d01d      	beq.n	8105aba <HAL_DMA_IRQHandler+0xd2>
 8105a7e:	687b      	ldr	r3, [r7, #4]
 8105a80:	681b      	ldr	r3, [r3, #0]
 8105a82:	4a50      	ldr	r2, [pc, #320]	; (8105bc4 <HAL_DMA_IRQHandler+0x1dc>)
 8105a84:	4293      	cmp	r3, r2
 8105a86:	d018      	beq.n	8105aba <HAL_DMA_IRQHandler+0xd2>
 8105a88:	687b      	ldr	r3, [r7, #4]
 8105a8a:	681b      	ldr	r3, [r3, #0]
 8105a8c:	4a4e      	ldr	r2, [pc, #312]	; (8105bc8 <HAL_DMA_IRQHandler+0x1e0>)
 8105a8e:	4293      	cmp	r3, r2
 8105a90:	d013      	beq.n	8105aba <HAL_DMA_IRQHandler+0xd2>
 8105a92:	687b      	ldr	r3, [r7, #4]
 8105a94:	681b      	ldr	r3, [r3, #0]
 8105a96:	4a4d      	ldr	r2, [pc, #308]	; (8105bcc <HAL_DMA_IRQHandler+0x1e4>)
 8105a98:	4293      	cmp	r3, r2
 8105a9a:	d00e      	beq.n	8105aba <HAL_DMA_IRQHandler+0xd2>
 8105a9c:	687b      	ldr	r3, [r7, #4]
 8105a9e:	681b      	ldr	r3, [r3, #0]
 8105aa0:	4a4b      	ldr	r2, [pc, #300]	; (8105bd0 <HAL_DMA_IRQHandler+0x1e8>)
 8105aa2:	4293      	cmp	r3, r2
 8105aa4:	d009      	beq.n	8105aba <HAL_DMA_IRQHandler+0xd2>
 8105aa6:	687b      	ldr	r3, [r7, #4]
 8105aa8:	681b      	ldr	r3, [r3, #0]
 8105aaa:	4a4a      	ldr	r2, [pc, #296]	; (8105bd4 <HAL_DMA_IRQHandler+0x1ec>)
 8105aac:	4293      	cmp	r3, r2
 8105aae:	d004      	beq.n	8105aba <HAL_DMA_IRQHandler+0xd2>
 8105ab0:	687b      	ldr	r3, [r7, #4]
 8105ab2:	681b      	ldr	r3, [r3, #0]
 8105ab4:	4a48      	ldr	r2, [pc, #288]	; (8105bd8 <HAL_DMA_IRQHandler+0x1f0>)
 8105ab6:	4293      	cmp	r3, r2
 8105ab8:	d101      	bne.n	8105abe <HAL_DMA_IRQHandler+0xd6>
 8105aba:	2301      	movs	r3, #1
 8105abc:	e000      	b.n	8105ac0 <HAL_DMA_IRQHandler+0xd8>
 8105abe:	2300      	movs	r3, #0
 8105ac0:	2b00      	cmp	r3, #0
 8105ac2:	f000 842b 	beq.w	810631c <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8105ac6:	687b      	ldr	r3, [r7, #4]
 8105ac8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8105aca:	f003 031f 	and.w	r3, r3, #31
 8105ace:	2208      	movs	r2, #8
 8105ad0:	409a      	lsls	r2, r3
 8105ad2:	69bb      	ldr	r3, [r7, #24]
 8105ad4:	4013      	ands	r3, r2
 8105ad6:	2b00      	cmp	r3, #0
 8105ad8:	f000 80a2 	beq.w	8105c20 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8105adc:	687b      	ldr	r3, [r7, #4]
 8105ade:	681b      	ldr	r3, [r3, #0]
 8105ae0:	4a2e      	ldr	r2, [pc, #184]	; (8105b9c <HAL_DMA_IRQHandler+0x1b4>)
 8105ae2:	4293      	cmp	r3, r2
 8105ae4:	d04a      	beq.n	8105b7c <HAL_DMA_IRQHandler+0x194>
 8105ae6:	687b      	ldr	r3, [r7, #4]
 8105ae8:	681b      	ldr	r3, [r3, #0]
 8105aea:	4a2d      	ldr	r2, [pc, #180]	; (8105ba0 <HAL_DMA_IRQHandler+0x1b8>)
 8105aec:	4293      	cmp	r3, r2
 8105aee:	d045      	beq.n	8105b7c <HAL_DMA_IRQHandler+0x194>
 8105af0:	687b      	ldr	r3, [r7, #4]
 8105af2:	681b      	ldr	r3, [r3, #0]
 8105af4:	4a2b      	ldr	r2, [pc, #172]	; (8105ba4 <HAL_DMA_IRQHandler+0x1bc>)
 8105af6:	4293      	cmp	r3, r2
 8105af8:	d040      	beq.n	8105b7c <HAL_DMA_IRQHandler+0x194>
 8105afa:	687b      	ldr	r3, [r7, #4]
 8105afc:	681b      	ldr	r3, [r3, #0]
 8105afe:	4a2a      	ldr	r2, [pc, #168]	; (8105ba8 <HAL_DMA_IRQHandler+0x1c0>)
 8105b00:	4293      	cmp	r3, r2
 8105b02:	d03b      	beq.n	8105b7c <HAL_DMA_IRQHandler+0x194>
 8105b04:	687b      	ldr	r3, [r7, #4]
 8105b06:	681b      	ldr	r3, [r3, #0]
 8105b08:	4a28      	ldr	r2, [pc, #160]	; (8105bac <HAL_DMA_IRQHandler+0x1c4>)
 8105b0a:	4293      	cmp	r3, r2
 8105b0c:	d036      	beq.n	8105b7c <HAL_DMA_IRQHandler+0x194>
 8105b0e:	687b      	ldr	r3, [r7, #4]
 8105b10:	681b      	ldr	r3, [r3, #0]
 8105b12:	4a27      	ldr	r2, [pc, #156]	; (8105bb0 <HAL_DMA_IRQHandler+0x1c8>)
 8105b14:	4293      	cmp	r3, r2
 8105b16:	d031      	beq.n	8105b7c <HAL_DMA_IRQHandler+0x194>
 8105b18:	687b      	ldr	r3, [r7, #4]
 8105b1a:	681b      	ldr	r3, [r3, #0]
 8105b1c:	4a25      	ldr	r2, [pc, #148]	; (8105bb4 <HAL_DMA_IRQHandler+0x1cc>)
 8105b1e:	4293      	cmp	r3, r2
 8105b20:	d02c      	beq.n	8105b7c <HAL_DMA_IRQHandler+0x194>
 8105b22:	687b      	ldr	r3, [r7, #4]
 8105b24:	681b      	ldr	r3, [r3, #0]
 8105b26:	4a24      	ldr	r2, [pc, #144]	; (8105bb8 <HAL_DMA_IRQHandler+0x1d0>)
 8105b28:	4293      	cmp	r3, r2
 8105b2a:	d027      	beq.n	8105b7c <HAL_DMA_IRQHandler+0x194>
 8105b2c:	687b      	ldr	r3, [r7, #4]
 8105b2e:	681b      	ldr	r3, [r3, #0]
 8105b30:	4a22      	ldr	r2, [pc, #136]	; (8105bbc <HAL_DMA_IRQHandler+0x1d4>)
 8105b32:	4293      	cmp	r3, r2
 8105b34:	d022      	beq.n	8105b7c <HAL_DMA_IRQHandler+0x194>
 8105b36:	687b      	ldr	r3, [r7, #4]
 8105b38:	681b      	ldr	r3, [r3, #0]
 8105b3a:	4a21      	ldr	r2, [pc, #132]	; (8105bc0 <HAL_DMA_IRQHandler+0x1d8>)
 8105b3c:	4293      	cmp	r3, r2
 8105b3e:	d01d      	beq.n	8105b7c <HAL_DMA_IRQHandler+0x194>
 8105b40:	687b      	ldr	r3, [r7, #4]
 8105b42:	681b      	ldr	r3, [r3, #0]
 8105b44:	4a1f      	ldr	r2, [pc, #124]	; (8105bc4 <HAL_DMA_IRQHandler+0x1dc>)
 8105b46:	4293      	cmp	r3, r2
 8105b48:	d018      	beq.n	8105b7c <HAL_DMA_IRQHandler+0x194>
 8105b4a:	687b      	ldr	r3, [r7, #4]
 8105b4c:	681b      	ldr	r3, [r3, #0]
 8105b4e:	4a1e      	ldr	r2, [pc, #120]	; (8105bc8 <HAL_DMA_IRQHandler+0x1e0>)
 8105b50:	4293      	cmp	r3, r2
 8105b52:	d013      	beq.n	8105b7c <HAL_DMA_IRQHandler+0x194>
 8105b54:	687b      	ldr	r3, [r7, #4]
 8105b56:	681b      	ldr	r3, [r3, #0]
 8105b58:	4a1c      	ldr	r2, [pc, #112]	; (8105bcc <HAL_DMA_IRQHandler+0x1e4>)
 8105b5a:	4293      	cmp	r3, r2
 8105b5c:	d00e      	beq.n	8105b7c <HAL_DMA_IRQHandler+0x194>
 8105b5e:	687b      	ldr	r3, [r7, #4]
 8105b60:	681b      	ldr	r3, [r3, #0]
 8105b62:	4a1b      	ldr	r2, [pc, #108]	; (8105bd0 <HAL_DMA_IRQHandler+0x1e8>)
 8105b64:	4293      	cmp	r3, r2
 8105b66:	d009      	beq.n	8105b7c <HAL_DMA_IRQHandler+0x194>
 8105b68:	687b      	ldr	r3, [r7, #4]
 8105b6a:	681b      	ldr	r3, [r3, #0]
 8105b6c:	4a19      	ldr	r2, [pc, #100]	; (8105bd4 <HAL_DMA_IRQHandler+0x1ec>)
 8105b6e:	4293      	cmp	r3, r2
 8105b70:	d004      	beq.n	8105b7c <HAL_DMA_IRQHandler+0x194>
 8105b72:	687b      	ldr	r3, [r7, #4]
 8105b74:	681b      	ldr	r3, [r3, #0]
 8105b76:	4a18      	ldr	r2, [pc, #96]	; (8105bd8 <HAL_DMA_IRQHandler+0x1f0>)
 8105b78:	4293      	cmp	r3, r2
 8105b7a:	d12f      	bne.n	8105bdc <HAL_DMA_IRQHandler+0x1f4>
 8105b7c:	687b      	ldr	r3, [r7, #4]
 8105b7e:	681b      	ldr	r3, [r3, #0]
 8105b80:	681b      	ldr	r3, [r3, #0]
 8105b82:	f003 0304 	and.w	r3, r3, #4
 8105b86:	2b00      	cmp	r3, #0
 8105b88:	bf14      	ite	ne
 8105b8a:	2301      	movne	r3, #1
 8105b8c:	2300      	moveq	r3, #0
 8105b8e:	b2db      	uxtb	r3, r3
 8105b90:	e02e      	b.n	8105bf0 <HAL_DMA_IRQHandler+0x208>
 8105b92:	bf00      	nop
 8105b94:	10000000 	.word	0x10000000
 8105b98:	1b4e81b5 	.word	0x1b4e81b5
 8105b9c:	40020010 	.word	0x40020010
 8105ba0:	40020028 	.word	0x40020028
 8105ba4:	40020040 	.word	0x40020040
 8105ba8:	40020058 	.word	0x40020058
 8105bac:	40020070 	.word	0x40020070
 8105bb0:	40020088 	.word	0x40020088
 8105bb4:	400200a0 	.word	0x400200a0
 8105bb8:	400200b8 	.word	0x400200b8
 8105bbc:	40020410 	.word	0x40020410
 8105bc0:	40020428 	.word	0x40020428
 8105bc4:	40020440 	.word	0x40020440
 8105bc8:	40020458 	.word	0x40020458
 8105bcc:	40020470 	.word	0x40020470
 8105bd0:	40020488 	.word	0x40020488
 8105bd4:	400204a0 	.word	0x400204a0
 8105bd8:	400204b8 	.word	0x400204b8
 8105bdc:	687b      	ldr	r3, [r7, #4]
 8105bde:	681b      	ldr	r3, [r3, #0]
 8105be0:	681b      	ldr	r3, [r3, #0]
 8105be2:	f003 0308 	and.w	r3, r3, #8
 8105be6:	2b00      	cmp	r3, #0
 8105be8:	bf14      	ite	ne
 8105bea:	2301      	movne	r3, #1
 8105bec:	2300      	moveq	r3, #0
 8105bee:	b2db      	uxtb	r3, r3
 8105bf0:	2b00      	cmp	r3, #0
 8105bf2:	d015      	beq.n	8105c20 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8105bf4:	687b      	ldr	r3, [r7, #4]
 8105bf6:	681b      	ldr	r3, [r3, #0]
 8105bf8:	681a      	ldr	r2, [r3, #0]
 8105bfa:	687b      	ldr	r3, [r7, #4]
 8105bfc:	681b      	ldr	r3, [r3, #0]
 8105bfe:	f022 0204 	bic.w	r2, r2, #4
 8105c02:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8105c04:	687b      	ldr	r3, [r7, #4]
 8105c06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8105c08:	f003 031f 	and.w	r3, r3, #31
 8105c0c:	2208      	movs	r2, #8
 8105c0e:	409a      	lsls	r2, r3
 8105c10:	6a3b      	ldr	r3, [r7, #32]
 8105c12:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8105c14:	687b      	ldr	r3, [r7, #4]
 8105c16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8105c18:	f043 0201 	orr.w	r2, r3, #1
 8105c1c:	687b      	ldr	r3, [r7, #4]
 8105c1e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8105c20:	687b      	ldr	r3, [r7, #4]
 8105c22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8105c24:	f003 031f 	and.w	r3, r3, #31
 8105c28:	69ba      	ldr	r2, [r7, #24]
 8105c2a:	fa22 f303 	lsr.w	r3, r2, r3
 8105c2e:	f003 0301 	and.w	r3, r3, #1
 8105c32:	2b00      	cmp	r3, #0
 8105c34:	d06e      	beq.n	8105d14 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8105c36:	687b      	ldr	r3, [r7, #4]
 8105c38:	681b      	ldr	r3, [r3, #0]
 8105c3a:	4a69      	ldr	r2, [pc, #420]	; (8105de0 <HAL_DMA_IRQHandler+0x3f8>)
 8105c3c:	4293      	cmp	r3, r2
 8105c3e:	d04a      	beq.n	8105cd6 <HAL_DMA_IRQHandler+0x2ee>
 8105c40:	687b      	ldr	r3, [r7, #4]
 8105c42:	681b      	ldr	r3, [r3, #0]
 8105c44:	4a67      	ldr	r2, [pc, #412]	; (8105de4 <HAL_DMA_IRQHandler+0x3fc>)
 8105c46:	4293      	cmp	r3, r2
 8105c48:	d045      	beq.n	8105cd6 <HAL_DMA_IRQHandler+0x2ee>
 8105c4a:	687b      	ldr	r3, [r7, #4]
 8105c4c:	681b      	ldr	r3, [r3, #0]
 8105c4e:	4a66      	ldr	r2, [pc, #408]	; (8105de8 <HAL_DMA_IRQHandler+0x400>)
 8105c50:	4293      	cmp	r3, r2
 8105c52:	d040      	beq.n	8105cd6 <HAL_DMA_IRQHandler+0x2ee>
 8105c54:	687b      	ldr	r3, [r7, #4]
 8105c56:	681b      	ldr	r3, [r3, #0]
 8105c58:	4a64      	ldr	r2, [pc, #400]	; (8105dec <HAL_DMA_IRQHandler+0x404>)
 8105c5a:	4293      	cmp	r3, r2
 8105c5c:	d03b      	beq.n	8105cd6 <HAL_DMA_IRQHandler+0x2ee>
 8105c5e:	687b      	ldr	r3, [r7, #4]
 8105c60:	681b      	ldr	r3, [r3, #0]
 8105c62:	4a63      	ldr	r2, [pc, #396]	; (8105df0 <HAL_DMA_IRQHandler+0x408>)
 8105c64:	4293      	cmp	r3, r2
 8105c66:	d036      	beq.n	8105cd6 <HAL_DMA_IRQHandler+0x2ee>
 8105c68:	687b      	ldr	r3, [r7, #4]
 8105c6a:	681b      	ldr	r3, [r3, #0]
 8105c6c:	4a61      	ldr	r2, [pc, #388]	; (8105df4 <HAL_DMA_IRQHandler+0x40c>)
 8105c6e:	4293      	cmp	r3, r2
 8105c70:	d031      	beq.n	8105cd6 <HAL_DMA_IRQHandler+0x2ee>
 8105c72:	687b      	ldr	r3, [r7, #4]
 8105c74:	681b      	ldr	r3, [r3, #0]
 8105c76:	4a60      	ldr	r2, [pc, #384]	; (8105df8 <HAL_DMA_IRQHandler+0x410>)
 8105c78:	4293      	cmp	r3, r2
 8105c7a:	d02c      	beq.n	8105cd6 <HAL_DMA_IRQHandler+0x2ee>
 8105c7c:	687b      	ldr	r3, [r7, #4]
 8105c7e:	681b      	ldr	r3, [r3, #0]
 8105c80:	4a5e      	ldr	r2, [pc, #376]	; (8105dfc <HAL_DMA_IRQHandler+0x414>)
 8105c82:	4293      	cmp	r3, r2
 8105c84:	d027      	beq.n	8105cd6 <HAL_DMA_IRQHandler+0x2ee>
 8105c86:	687b      	ldr	r3, [r7, #4]
 8105c88:	681b      	ldr	r3, [r3, #0]
 8105c8a:	4a5d      	ldr	r2, [pc, #372]	; (8105e00 <HAL_DMA_IRQHandler+0x418>)
 8105c8c:	4293      	cmp	r3, r2
 8105c8e:	d022      	beq.n	8105cd6 <HAL_DMA_IRQHandler+0x2ee>
 8105c90:	687b      	ldr	r3, [r7, #4]
 8105c92:	681b      	ldr	r3, [r3, #0]
 8105c94:	4a5b      	ldr	r2, [pc, #364]	; (8105e04 <HAL_DMA_IRQHandler+0x41c>)
 8105c96:	4293      	cmp	r3, r2
 8105c98:	d01d      	beq.n	8105cd6 <HAL_DMA_IRQHandler+0x2ee>
 8105c9a:	687b      	ldr	r3, [r7, #4]
 8105c9c:	681b      	ldr	r3, [r3, #0]
 8105c9e:	4a5a      	ldr	r2, [pc, #360]	; (8105e08 <HAL_DMA_IRQHandler+0x420>)
 8105ca0:	4293      	cmp	r3, r2
 8105ca2:	d018      	beq.n	8105cd6 <HAL_DMA_IRQHandler+0x2ee>
 8105ca4:	687b      	ldr	r3, [r7, #4]
 8105ca6:	681b      	ldr	r3, [r3, #0]
 8105ca8:	4a58      	ldr	r2, [pc, #352]	; (8105e0c <HAL_DMA_IRQHandler+0x424>)
 8105caa:	4293      	cmp	r3, r2
 8105cac:	d013      	beq.n	8105cd6 <HAL_DMA_IRQHandler+0x2ee>
 8105cae:	687b      	ldr	r3, [r7, #4]
 8105cb0:	681b      	ldr	r3, [r3, #0]
 8105cb2:	4a57      	ldr	r2, [pc, #348]	; (8105e10 <HAL_DMA_IRQHandler+0x428>)
 8105cb4:	4293      	cmp	r3, r2
 8105cb6:	d00e      	beq.n	8105cd6 <HAL_DMA_IRQHandler+0x2ee>
 8105cb8:	687b      	ldr	r3, [r7, #4]
 8105cba:	681b      	ldr	r3, [r3, #0]
 8105cbc:	4a55      	ldr	r2, [pc, #340]	; (8105e14 <HAL_DMA_IRQHandler+0x42c>)
 8105cbe:	4293      	cmp	r3, r2
 8105cc0:	d009      	beq.n	8105cd6 <HAL_DMA_IRQHandler+0x2ee>
 8105cc2:	687b      	ldr	r3, [r7, #4]
 8105cc4:	681b      	ldr	r3, [r3, #0]
 8105cc6:	4a54      	ldr	r2, [pc, #336]	; (8105e18 <HAL_DMA_IRQHandler+0x430>)
 8105cc8:	4293      	cmp	r3, r2
 8105cca:	d004      	beq.n	8105cd6 <HAL_DMA_IRQHandler+0x2ee>
 8105ccc:	687b      	ldr	r3, [r7, #4]
 8105cce:	681b      	ldr	r3, [r3, #0]
 8105cd0:	4a52      	ldr	r2, [pc, #328]	; (8105e1c <HAL_DMA_IRQHandler+0x434>)
 8105cd2:	4293      	cmp	r3, r2
 8105cd4:	d10a      	bne.n	8105cec <HAL_DMA_IRQHandler+0x304>
 8105cd6:	687b      	ldr	r3, [r7, #4]
 8105cd8:	681b      	ldr	r3, [r3, #0]
 8105cda:	695b      	ldr	r3, [r3, #20]
 8105cdc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8105ce0:	2b00      	cmp	r3, #0
 8105ce2:	bf14      	ite	ne
 8105ce4:	2301      	movne	r3, #1
 8105ce6:	2300      	moveq	r3, #0
 8105ce8:	b2db      	uxtb	r3, r3
 8105cea:	e003      	b.n	8105cf4 <HAL_DMA_IRQHandler+0x30c>
 8105cec:	687b      	ldr	r3, [r7, #4]
 8105cee:	681b      	ldr	r3, [r3, #0]
 8105cf0:	681b      	ldr	r3, [r3, #0]
 8105cf2:	2300      	movs	r3, #0
 8105cf4:	2b00      	cmp	r3, #0
 8105cf6:	d00d      	beq.n	8105d14 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8105cf8:	687b      	ldr	r3, [r7, #4]
 8105cfa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8105cfc:	f003 031f 	and.w	r3, r3, #31
 8105d00:	2201      	movs	r2, #1
 8105d02:	409a      	lsls	r2, r3
 8105d04:	6a3b      	ldr	r3, [r7, #32]
 8105d06:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8105d08:	687b      	ldr	r3, [r7, #4]
 8105d0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8105d0c:	f043 0202 	orr.w	r2, r3, #2
 8105d10:	687b      	ldr	r3, [r7, #4]
 8105d12:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8105d14:	687b      	ldr	r3, [r7, #4]
 8105d16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8105d18:	f003 031f 	and.w	r3, r3, #31
 8105d1c:	2204      	movs	r2, #4
 8105d1e:	409a      	lsls	r2, r3
 8105d20:	69bb      	ldr	r3, [r7, #24]
 8105d22:	4013      	ands	r3, r2
 8105d24:	2b00      	cmp	r3, #0
 8105d26:	f000 808f 	beq.w	8105e48 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8105d2a:	687b      	ldr	r3, [r7, #4]
 8105d2c:	681b      	ldr	r3, [r3, #0]
 8105d2e:	4a2c      	ldr	r2, [pc, #176]	; (8105de0 <HAL_DMA_IRQHandler+0x3f8>)
 8105d30:	4293      	cmp	r3, r2
 8105d32:	d04a      	beq.n	8105dca <HAL_DMA_IRQHandler+0x3e2>
 8105d34:	687b      	ldr	r3, [r7, #4]
 8105d36:	681b      	ldr	r3, [r3, #0]
 8105d38:	4a2a      	ldr	r2, [pc, #168]	; (8105de4 <HAL_DMA_IRQHandler+0x3fc>)
 8105d3a:	4293      	cmp	r3, r2
 8105d3c:	d045      	beq.n	8105dca <HAL_DMA_IRQHandler+0x3e2>
 8105d3e:	687b      	ldr	r3, [r7, #4]
 8105d40:	681b      	ldr	r3, [r3, #0]
 8105d42:	4a29      	ldr	r2, [pc, #164]	; (8105de8 <HAL_DMA_IRQHandler+0x400>)
 8105d44:	4293      	cmp	r3, r2
 8105d46:	d040      	beq.n	8105dca <HAL_DMA_IRQHandler+0x3e2>
 8105d48:	687b      	ldr	r3, [r7, #4]
 8105d4a:	681b      	ldr	r3, [r3, #0]
 8105d4c:	4a27      	ldr	r2, [pc, #156]	; (8105dec <HAL_DMA_IRQHandler+0x404>)
 8105d4e:	4293      	cmp	r3, r2
 8105d50:	d03b      	beq.n	8105dca <HAL_DMA_IRQHandler+0x3e2>
 8105d52:	687b      	ldr	r3, [r7, #4]
 8105d54:	681b      	ldr	r3, [r3, #0]
 8105d56:	4a26      	ldr	r2, [pc, #152]	; (8105df0 <HAL_DMA_IRQHandler+0x408>)
 8105d58:	4293      	cmp	r3, r2
 8105d5a:	d036      	beq.n	8105dca <HAL_DMA_IRQHandler+0x3e2>
 8105d5c:	687b      	ldr	r3, [r7, #4]
 8105d5e:	681b      	ldr	r3, [r3, #0]
 8105d60:	4a24      	ldr	r2, [pc, #144]	; (8105df4 <HAL_DMA_IRQHandler+0x40c>)
 8105d62:	4293      	cmp	r3, r2
 8105d64:	d031      	beq.n	8105dca <HAL_DMA_IRQHandler+0x3e2>
 8105d66:	687b      	ldr	r3, [r7, #4]
 8105d68:	681b      	ldr	r3, [r3, #0]
 8105d6a:	4a23      	ldr	r2, [pc, #140]	; (8105df8 <HAL_DMA_IRQHandler+0x410>)
 8105d6c:	4293      	cmp	r3, r2
 8105d6e:	d02c      	beq.n	8105dca <HAL_DMA_IRQHandler+0x3e2>
 8105d70:	687b      	ldr	r3, [r7, #4]
 8105d72:	681b      	ldr	r3, [r3, #0]
 8105d74:	4a21      	ldr	r2, [pc, #132]	; (8105dfc <HAL_DMA_IRQHandler+0x414>)
 8105d76:	4293      	cmp	r3, r2
 8105d78:	d027      	beq.n	8105dca <HAL_DMA_IRQHandler+0x3e2>
 8105d7a:	687b      	ldr	r3, [r7, #4]
 8105d7c:	681b      	ldr	r3, [r3, #0]
 8105d7e:	4a20      	ldr	r2, [pc, #128]	; (8105e00 <HAL_DMA_IRQHandler+0x418>)
 8105d80:	4293      	cmp	r3, r2
 8105d82:	d022      	beq.n	8105dca <HAL_DMA_IRQHandler+0x3e2>
 8105d84:	687b      	ldr	r3, [r7, #4]
 8105d86:	681b      	ldr	r3, [r3, #0]
 8105d88:	4a1e      	ldr	r2, [pc, #120]	; (8105e04 <HAL_DMA_IRQHandler+0x41c>)
 8105d8a:	4293      	cmp	r3, r2
 8105d8c:	d01d      	beq.n	8105dca <HAL_DMA_IRQHandler+0x3e2>
 8105d8e:	687b      	ldr	r3, [r7, #4]
 8105d90:	681b      	ldr	r3, [r3, #0]
 8105d92:	4a1d      	ldr	r2, [pc, #116]	; (8105e08 <HAL_DMA_IRQHandler+0x420>)
 8105d94:	4293      	cmp	r3, r2
 8105d96:	d018      	beq.n	8105dca <HAL_DMA_IRQHandler+0x3e2>
 8105d98:	687b      	ldr	r3, [r7, #4]
 8105d9a:	681b      	ldr	r3, [r3, #0]
 8105d9c:	4a1b      	ldr	r2, [pc, #108]	; (8105e0c <HAL_DMA_IRQHandler+0x424>)
 8105d9e:	4293      	cmp	r3, r2
 8105da0:	d013      	beq.n	8105dca <HAL_DMA_IRQHandler+0x3e2>
 8105da2:	687b      	ldr	r3, [r7, #4]
 8105da4:	681b      	ldr	r3, [r3, #0]
 8105da6:	4a1a      	ldr	r2, [pc, #104]	; (8105e10 <HAL_DMA_IRQHandler+0x428>)
 8105da8:	4293      	cmp	r3, r2
 8105daa:	d00e      	beq.n	8105dca <HAL_DMA_IRQHandler+0x3e2>
 8105dac:	687b      	ldr	r3, [r7, #4]
 8105dae:	681b      	ldr	r3, [r3, #0]
 8105db0:	4a18      	ldr	r2, [pc, #96]	; (8105e14 <HAL_DMA_IRQHandler+0x42c>)
 8105db2:	4293      	cmp	r3, r2
 8105db4:	d009      	beq.n	8105dca <HAL_DMA_IRQHandler+0x3e2>
 8105db6:	687b      	ldr	r3, [r7, #4]
 8105db8:	681b      	ldr	r3, [r3, #0]
 8105dba:	4a17      	ldr	r2, [pc, #92]	; (8105e18 <HAL_DMA_IRQHandler+0x430>)
 8105dbc:	4293      	cmp	r3, r2
 8105dbe:	d004      	beq.n	8105dca <HAL_DMA_IRQHandler+0x3e2>
 8105dc0:	687b      	ldr	r3, [r7, #4]
 8105dc2:	681b      	ldr	r3, [r3, #0]
 8105dc4:	4a15      	ldr	r2, [pc, #84]	; (8105e1c <HAL_DMA_IRQHandler+0x434>)
 8105dc6:	4293      	cmp	r3, r2
 8105dc8:	d12a      	bne.n	8105e20 <HAL_DMA_IRQHandler+0x438>
 8105dca:	687b      	ldr	r3, [r7, #4]
 8105dcc:	681b      	ldr	r3, [r3, #0]
 8105dce:	681b      	ldr	r3, [r3, #0]
 8105dd0:	f003 0302 	and.w	r3, r3, #2
 8105dd4:	2b00      	cmp	r3, #0
 8105dd6:	bf14      	ite	ne
 8105dd8:	2301      	movne	r3, #1
 8105dda:	2300      	moveq	r3, #0
 8105ddc:	b2db      	uxtb	r3, r3
 8105dde:	e023      	b.n	8105e28 <HAL_DMA_IRQHandler+0x440>
 8105de0:	40020010 	.word	0x40020010
 8105de4:	40020028 	.word	0x40020028
 8105de8:	40020040 	.word	0x40020040
 8105dec:	40020058 	.word	0x40020058
 8105df0:	40020070 	.word	0x40020070
 8105df4:	40020088 	.word	0x40020088
 8105df8:	400200a0 	.word	0x400200a0
 8105dfc:	400200b8 	.word	0x400200b8
 8105e00:	40020410 	.word	0x40020410
 8105e04:	40020428 	.word	0x40020428
 8105e08:	40020440 	.word	0x40020440
 8105e0c:	40020458 	.word	0x40020458
 8105e10:	40020470 	.word	0x40020470
 8105e14:	40020488 	.word	0x40020488
 8105e18:	400204a0 	.word	0x400204a0
 8105e1c:	400204b8 	.word	0x400204b8
 8105e20:	687b      	ldr	r3, [r7, #4]
 8105e22:	681b      	ldr	r3, [r3, #0]
 8105e24:	681b      	ldr	r3, [r3, #0]
 8105e26:	2300      	movs	r3, #0
 8105e28:	2b00      	cmp	r3, #0
 8105e2a:	d00d      	beq.n	8105e48 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8105e2c:	687b      	ldr	r3, [r7, #4]
 8105e2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8105e30:	f003 031f 	and.w	r3, r3, #31
 8105e34:	2204      	movs	r2, #4
 8105e36:	409a      	lsls	r2, r3
 8105e38:	6a3b      	ldr	r3, [r7, #32]
 8105e3a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8105e3c:	687b      	ldr	r3, [r7, #4]
 8105e3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8105e40:	f043 0204 	orr.w	r2, r3, #4
 8105e44:	687b      	ldr	r3, [r7, #4]
 8105e46:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8105e48:	687b      	ldr	r3, [r7, #4]
 8105e4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8105e4c:	f003 031f 	and.w	r3, r3, #31
 8105e50:	2210      	movs	r2, #16
 8105e52:	409a      	lsls	r2, r3
 8105e54:	69bb      	ldr	r3, [r7, #24]
 8105e56:	4013      	ands	r3, r2
 8105e58:	2b00      	cmp	r3, #0
 8105e5a:	f000 80a6 	beq.w	8105faa <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8105e5e:	687b      	ldr	r3, [r7, #4]
 8105e60:	681b      	ldr	r3, [r3, #0]
 8105e62:	4a85      	ldr	r2, [pc, #532]	; (8106078 <HAL_DMA_IRQHandler+0x690>)
 8105e64:	4293      	cmp	r3, r2
 8105e66:	d04a      	beq.n	8105efe <HAL_DMA_IRQHandler+0x516>
 8105e68:	687b      	ldr	r3, [r7, #4]
 8105e6a:	681b      	ldr	r3, [r3, #0]
 8105e6c:	4a83      	ldr	r2, [pc, #524]	; (810607c <HAL_DMA_IRQHandler+0x694>)
 8105e6e:	4293      	cmp	r3, r2
 8105e70:	d045      	beq.n	8105efe <HAL_DMA_IRQHandler+0x516>
 8105e72:	687b      	ldr	r3, [r7, #4]
 8105e74:	681b      	ldr	r3, [r3, #0]
 8105e76:	4a82      	ldr	r2, [pc, #520]	; (8106080 <HAL_DMA_IRQHandler+0x698>)
 8105e78:	4293      	cmp	r3, r2
 8105e7a:	d040      	beq.n	8105efe <HAL_DMA_IRQHandler+0x516>
 8105e7c:	687b      	ldr	r3, [r7, #4]
 8105e7e:	681b      	ldr	r3, [r3, #0]
 8105e80:	4a80      	ldr	r2, [pc, #512]	; (8106084 <HAL_DMA_IRQHandler+0x69c>)
 8105e82:	4293      	cmp	r3, r2
 8105e84:	d03b      	beq.n	8105efe <HAL_DMA_IRQHandler+0x516>
 8105e86:	687b      	ldr	r3, [r7, #4]
 8105e88:	681b      	ldr	r3, [r3, #0]
 8105e8a:	4a7f      	ldr	r2, [pc, #508]	; (8106088 <HAL_DMA_IRQHandler+0x6a0>)
 8105e8c:	4293      	cmp	r3, r2
 8105e8e:	d036      	beq.n	8105efe <HAL_DMA_IRQHandler+0x516>
 8105e90:	687b      	ldr	r3, [r7, #4]
 8105e92:	681b      	ldr	r3, [r3, #0]
 8105e94:	4a7d      	ldr	r2, [pc, #500]	; (810608c <HAL_DMA_IRQHandler+0x6a4>)
 8105e96:	4293      	cmp	r3, r2
 8105e98:	d031      	beq.n	8105efe <HAL_DMA_IRQHandler+0x516>
 8105e9a:	687b      	ldr	r3, [r7, #4]
 8105e9c:	681b      	ldr	r3, [r3, #0]
 8105e9e:	4a7c      	ldr	r2, [pc, #496]	; (8106090 <HAL_DMA_IRQHandler+0x6a8>)
 8105ea0:	4293      	cmp	r3, r2
 8105ea2:	d02c      	beq.n	8105efe <HAL_DMA_IRQHandler+0x516>
 8105ea4:	687b      	ldr	r3, [r7, #4]
 8105ea6:	681b      	ldr	r3, [r3, #0]
 8105ea8:	4a7a      	ldr	r2, [pc, #488]	; (8106094 <HAL_DMA_IRQHandler+0x6ac>)
 8105eaa:	4293      	cmp	r3, r2
 8105eac:	d027      	beq.n	8105efe <HAL_DMA_IRQHandler+0x516>
 8105eae:	687b      	ldr	r3, [r7, #4]
 8105eb0:	681b      	ldr	r3, [r3, #0]
 8105eb2:	4a79      	ldr	r2, [pc, #484]	; (8106098 <HAL_DMA_IRQHandler+0x6b0>)
 8105eb4:	4293      	cmp	r3, r2
 8105eb6:	d022      	beq.n	8105efe <HAL_DMA_IRQHandler+0x516>
 8105eb8:	687b      	ldr	r3, [r7, #4]
 8105eba:	681b      	ldr	r3, [r3, #0]
 8105ebc:	4a77      	ldr	r2, [pc, #476]	; (810609c <HAL_DMA_IRQHandler+0x6b4>)
 8105ebe:	4293      	cmp	r3, r2
 8105ec0:	d01d      	beq.n	8105efe <HAL_DMA_IRQHandler+0x516>
 8105ec2:	687b      	ldr	r3, [r7, #4]
 8105ec4:	681b      	ldr	r3, [r3, #0]
 8105ec6:	4a76      	ldr	r2, [pc, #472]	; (81060a0 <HAL_DMA_IRQHandler+0x6b8>)
 8105ec8:	4293      	cmp	r3, r2
 8105eca:	d018      	beq.n	8105efe <HAL_DMA_IRQHandler+0x516>
 8105ecc:	687b      	ldr	r3, [r7, #4]
 8105ece:	681b      	ldr	r3, [r3, #0]
 8105ed0:	4a74      	ldr	r2, [pc, #464]	; (81060a4 <HAL_DMA_IRQHandler+0x6bc>)
 8105ed2:	4293      	cmp	r3, r2
 8105ed4:	d013      	beq.n	8105efe <HAL_DMA_IRQHandler+0x516>
 8105ed6:	687b      	ldr	r3, [r7, #4]
 8105ed8:	681b      	ldr	r3, [r3, #0]
 8105eda:	4a73      	ldr	r2, [pc, #460]	; (81060a8 <HAL_DMA_IRQHandler+0x6c0>)
 8105edc:	4293      	cmp	r3, r2
 8105ede:	d00e      	beq.n	8105efe <HAL_DMA_IRQHandler+0x516>
 8105ee0:	687b      	ldr	r3, [r7, #4]
 8105ee2:	681b      	ldr	r3, [r3, #0]
 8105ee4:	4a71      	ldr	r2, [pc, #452]	; (81060ac <HAL_DMA_IRQHandler+0x6c4>)
 8105ee6:	4293      	cmp	r3, r2
 8105ee8:	d009      	beq.n	8105efe <HAL_DMA_IRQHandler+0x516>
 8105eea:	687b      	ldr	r3, [r7, #4]
 8105eec:	681b      	ldr	r3, [r3, #0]
 8105eee:	4a70      	ldr	r2, [pc, #448]	; (81060b0 <HAL_DMA_IRQHandler+0x6c8>)
 8105ef0:	4293      	cmp	r3, r2
 8105ef2:	d004      	beq.n	8105efe <HAL_DMA_IRQHandler+0x516>
 8105ef4:	687b      	ldr	r3, [r7, #4]
 8105ef6:	681b      	ldr	r3, [r3, #0]
 8105ef8:	4a6e      	ldr	r2, [pc, #440]	; (81060b4 <HAL_DMA_IRQHandler+0x6cc>)
 8105efa:	4293      	cmp	r3, r2
 8105efc:	d10a      	bne.n	8105f14 <HAL_DMA_IRQHandler+0x52c>
 8105efe:	687b      	ldr	r3, [r7, #4]
 8105f00:	681b      	ldr	r3, [r3, #0]
 8105f02:	681b      	ldr	r3, [r3, #0]
 8105f04:	f003 0308 	and.w	r3, r3, #8
 8105f08:	2b00      	cmp	r3, #0
 8105f0a:	bf14      	ite	ne
 8105f0c:	2301      	movne	r3, #1
 8105f0e:	2300      	moveq	r3, #0
 8105f10:	b2db      	uxtb	r3, r3
 8105f12:	e009      	b.n	8105f28 <HAL_DMA_IRQHandler+0x540>
 8105f14:	687b      	ldr	r3, [r7, #4]
 8105f16:	681b      	ldr	r3, [r3, #0]
 8105f18:	681b      	ldr	r3, [r3, #0]
 8105f1a:	f003 0304 	and.w	r3, r3, #4
 8105f1e:	2b00      	cmp	r3, #0
 8105f20:	bf14      	ite	ne
 8105f22:	2301      	movne	r3, #1
 8105f24:	2300      	moveq	r3, #0
 8105f26:	b2db      	uxtb	r3, r3
 8105f28:	2b00      	cmp	r3, #0
 8105f2a:	d03e      	beq.n	8105faa <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8105f2c:	687b      	ldr	r3, [r7, #4]
 8105f2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8105f30:	f003 031f 	and.w	r3, r3, #31
 8105f34:	2210      	movs	r2, #16
 8105f36:	409a      	lsls	r2, r3
 8105f38:	6a3b      	ldr	r3, [r7, #32]
 8105f3a:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8105f3c:	687b      	ldr	r3, [r7, #4]
 8105f3e:	681b      	ldr	r3, [r3, #0]
 8105f40:	681b      	ldr	r3, [r3, #0]
 8105f42:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8105f46:	2b00      	cmp	r3, #0
 8105f48:	d018      	beq.n	8105f7c <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8105f4a:	687b      	ldr	r3, [r7, #4]
 8105f4c:	681b      	ldr	r3, [r3, #0]
 8105f4e:	681b      	ldr	r3, [r3, #0]
 8105f50:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8105f54:	2b00      	cmp	r3, #0
 8105f56:	d108      	bne.n	8105f6a <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8105f58:	687b      	ldr	r3, [r7, #4]
 8105f5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8105f5c:	2b00      	cmp	r3, #0
 8105f5e:	d024      	beq.n	8105faa <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8105f60:	687b      	ldr	r3, [r7, #4]
 8105f62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8105f64:	6878      	ldr	r0, [r7, #4]
 8105f66:	4798      	blx	r3
 8105f68:	e01f      	b.n	8105faa <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8105f6a:	687b      	ldr	r3, [r7, #4]
 8105f6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8105f6e:	2b00      	cmp	r3, #0
 8105f70:	d01b      	beq.n	8105faa <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8105f72:	687b      	ldr	r3, [r7, #4]
 8105f74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8105f76:	6878      	ldr	r0, [r7, #4]
 8105f78:	4798      	blx	r3
 8105f7a:	e016      	b.n	8105faa <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8105f7c:	687b      	ldr	r3, [r7, #4]
 8105f7e:	681b      	ldr	r3, [r3, #0]
 8105f80:	681b      	ldr	r3, [r3, #0]
 8105f82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8105f86:	2b00      	cmp	r3, #0
 8105f88:	d107      	bne.n	8105f9a <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8105f8a:	687b      	ldr	r3, [r7, #4]
 8105f8c:	681b      	ldr	r3, [r3, #0]
 8105f8e:	681a      	ldr	r2, [r3, #0]
 8105f90:	687b      	ldr	r3, [r7, #4]
 8105f92:	681b      	ldr	r3, [r3, #0]
 8105f94:	f022 0208 	bic.w	r2, r2, #8
 8105f98:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8105f9a:	687b      	ldr	r3, [r7, #4]
 8105f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8105f9e:	2b00      	cmp	r3, #0
 8105fa0:	d003      	beq.n	8105faa <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8105fa2:	687b      	ldr	r3, [r7, #4]
 8105fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8105fa6:	6878      	ldr	r0, [r7, #4]
 8105fa8:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8105faa:	687b      	ldr	r3, [r7, #4]
 8105fac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8105fae:	f003 031f 	and.w	r3, r3, #31
 8105fb2:	2220      	movs	r2, #32
 8105fb4:	409a      	lsls	r2, r3
 8105fb6:	69bb      	ldr	r3, [r7, #24]
 8105fb8:	4013      	ands	r3, r2
 8105fba:	2b00      	cmp	r3, #0
 8105fbc:	f000 8110 	beq.w	81061e0 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8105fc0:	687b      	ldr	r3, [r7, #4]
 8105fc2:	681b      	ldr	r3, [r3, #0]
 8105fc4:	4a2c      	ldr	r2, [pc, #176]	; (8106078 <HAL_DMA_IRQHandler+0x690>)
 8105fc6:	4293      	cmp	r3, r2
 8105fc8:	d04a      	beq.n	8106060 <HAL_DMA_IRQHandler+0x678>
 8105fca:	687b      	ldr	r3, [r7, #4]
 8105fcc:	681b      	ldr	r3, [r3, #0]
 8105fce:	4a2b      	ldr	r2, [pc, #172]	; (810607c <HAL_DMA_IRQHandler+0x694>)
 8105fd0:	4293      	cmp	r3, r2
 8105fd2:	d045      	beq.n	8106060 <HAL_DMA_IRQHandler+0x678>
 8105fd4:	687b      	ldr	r3, [r7, #4]
 8105fd6:	681b      	ldr	r3, [r3, #0]
 8105fd8:	4a29      	ldr	r2, [pc, #164]	; (8106080 <HAL_DMA_IRQHandler+0x698>)
 8105fda:	4293      	cmp	r3, r2
 8105fdc:	d040      	beq.n	8106060 <HAL_DMA_IRQHandler+0x678>
 8105fde:	687b      	ldr	r3, [r7, #4]
 8105fe0:	681b      	ldr	r3, [r3, #0]
 8105fe2:	4a28      	ldr	r2, [pc, #160]	; (8106084 <HAL_DMA_IRQHandler+0x69c>)
 8105fe4:	4293      	cmp	r3, r2
 8105fe6:	d03b      	beq.n	8106060 <HAL_DMA_IRQHandler+0x678>
 8105fe8:	687b      	ldr	r3, [r7, #4]
 8105fea:	681b      	ldr	r3, [r3, #0]
 8105fec:	4a26      	ldr	r2, [pc, #152]	; (8106088 <HAL_DMA_IRQHandler+0x6a0>)
 8105fee:	4293      	cmp	r3, r2
 8105ff0:	d036      	beq.n	8106060 <HAL_DMA_IRQHandler+0x678>
 8105ff2:	687b      	ldr	r3, [r7, #4]
 8105ff4:	681b      	ldr	r3, [r3, #0]
 8105ff6:	4a25      	ldr	r2, [pc, #148]	; (810608c <HAL_DMA_IRQHandler+0x6a4>)
 8105ff8:	4293      	cmp	r3, r2
 8105ffa:	d031      	beq.n	8106060 <HAL_DMA_IRQHandler+0x678>
 8105ffc:	687b      	ldr	r3, [r7, #4]
 8105ffe:	681b      	ldr	r3, [r3, #0]
 8106000:	4a23      	ldr	r2, [pc, #140]	; (8106090 <HAL_DMA_IRQHandler+0x6a8>)
 8106002:	4293      	cmp	r3, r2
 8106004:	d02c      	beq.n	8106060 <HAL_DMA_IRQHandler+0x678>
 8106006:	687b      	ldr	r3, [r7, #4]
 8106008:	681b      	ldr	r3, [r3, #0]
 810600a:	4a22      	ldr	r2, [pc, #136]	; (8106094 <HAL_DMA_IRQHandler+0x6ac>)
 810600c:	4293      	cmp	r3, r2
 810600e:	d027      	beq.n	8106060 <HAL_DMA_IRQHandler+0x678>
 8106010:	687b      	ldr	r3, [r7, #4]
 8106012:	681b      	ldr	r3, [r3, #0]
 8106014:	4a20      	ldr	r2, [pc, #128]	; (8106098 <HAL_DMA_IRQHandler+0x6b0>)
 8106016:	4293      	cmp	r3, r2
 8106018:	d022      	beq.n	8106060 <HAL_DMA_IRQHandler+0x678>
 810601a:	687b      	ldr	r3, [r7, #4]
 810601c:	681b      	ldr	r3, [r3, #0]
 810601e:	4a1f      	ldr	r2, [pc, #124]	; (810609c <HAL_DMA_IRQHandler+0x6b4>)
 8106020:	4293      	cmp	r3, r2
 8106022:	d01d      	beq.n	8106060 <HAL_DMA_IRQHandler+0x678>
 8106024:	687b      	ldr	r3, [r7, #4]
 8106026:	681b      	ldr	r3, [r3, #0]
 8106028:	4a1d      	ldr	r2, [pc, #116]	; (81060a0 <HAL_DMA_IRQHandler+0x6b8>)
 810602a:	4293      	cmp	r3, r2
 810602c:	d018      	beq.n	8106060 <HAL_DMA_IRQHandler+0x678>
 810602e:	687b      	ldr	r3, [r7, #4]
 8106030:	681b      	ldr	r3, [r3, #0]
 8106032:	4a1c      	ldr	r2, [pc, #112]	; (81060a4 <HAL_DMA_IRQHandler+0x6bc>)
 8106034:	4293      	cmp	r3, r2
 8106036:	d013      	beq.n	8106060 <HAL_DMA_IRQHandler+0x678>
 8106038:	687b      	ldr	r3, [r7, #4]
 810603a:	681b      	ldr	r3, [r3, #0]
 810603c:	4a1a      	ldr	r2, [pc, #104]	; (81060a8 <HAL_DMA_IRQHandler+0x6c0>)
 810603e:	4293      	cmp	r3, r2
 8106040:	d00e      	beq.n	8106060 <HAL_DMA_IRQHandler+0x678>
 8106042:	687b      	ldr	r3, [r7, #4]
 8106044:	681b      	ldr	r3, [r3, #0]
 8106046:	4a19      	ldr	r2, [pc, #100]	; (81060ac <HAL_DMA_IRQHandler+0x6c4>)
 8106048:	4293      	cmp	r3, r2
 810604a:	d009      	beq.n	8106060 <HAL_DMA_IRQHandler+0x678>
 810604c:	687b      	ldr	r3, [r7, #4]
 810604e:	681b      	ldr	r3, [r3, #0]
 8106050:	4a17      	ldr	r2, [pc, #92]	; (81060b0 <HAL_DMA_IRQHandler+0x6c8>)
 8106052:	4293      	cmp	r3, r2
 8106054:	d004      	beq.n	8106060 <HAL_DMA_IRQHandler+0x678>
 8106056:	687b      	ldr	r3, [r7, #4]
 8106058:	681b      	ldr	r3, [r3, #0]
 810605a:	4a16      	ldr	r2, [pc, #88]	; (81060b4 <HAL_DMA_IRQHandler+0x6cc>)
 810605c:	4293      	cmp	r3, r2
 810605e:	d12b      	bne.n	81060b8 <HAL_DMA_IRQHandler+0x6d0>
 8106060:	687b      	ldr	r3, [r7, #4]
 8106062:	681b      	ldr	r3, [r3, #0]
 8106064:	681b      	ldr	r3, [r3, #0]
 8106066:	f003 0310 	and.w	r3, r3, #16
 810606a:	2b00      	cmp	r3, #0
 810606c:	bf14      	ite	ne
 810606e:	2301      	movne	r3, #1
 8106070:	2300      	moveq	r3, #0
 8106072:	b2db      	uxtb	r3, r3
 8106074:	e02a      	b.n	81060cc <HAL_DMA_IRQHandler+0x6e4>
 8106076:	bf00      	nop
 8106078:	40020010 	.word	0x40020010
 810607c:	40020028 	.word	0x40020028
 8106080:	40020040 	.word	0x40020040
 8106084:	40020058 	.word	0x40020058
 8106088:	40020070 	.word	0x40020070
 810608c:	40020088 	.word	0x40020088
 8106090:	400200a0 	.word	0x400200a0
 8106094:	400200b8 	.word	0x400200b8
 8106098:	40020410 	.word	0x40020410
 810609c:	40020428 	.word	0x40020428
 81060a0:	40020440 	.word	0x40020440
 81060a4:	40020458 	.word	0x40020458
 81060a8:	40020470 	.word	0x40020470
 81060ac:	40020488 	.word	0x40020488
 81060b0:	400204a0 	.word	0x400204a0
 81060b4:	400204b8 	.word	0x400204b8
 81060b8:	687b      	ldr	r3, [r7, #4]
 81060ba:	681b      	ldr	r3, [r3, #0]
 81060bc:	681b      	ldr	r3, [r3, #0]
 81060be:	f003 0302 	and.w	r3, r3, #2
 81060c2:	2b00      	cmp	r3, #0
 81060c4:	bf14      	ite	ne
 81060c6:	2301      	movne	r3, #1
 81060c8:	2300      	moveq	r3, #0
 81060ca:	b2db      	uxtb	r3, r3
 81060cc:	2b00      	cmp	r3, #0
 81060ce:	f000 8087 	beq.w	81061e0 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 81060d2:	687b      	ldr	r3, [r7, #4]
 81060d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81060d6:	f003 031f 	and.w	r3, r3, #31
 81060da:	2220      	movs	r2, #32
 81060dc:	409a      	lsls	r2, r3
 81060de:	6a3b      	ldr	r3, [r7, #32]
 81060e0:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 81060e2:	687b      	ldr	r3, [r7, #4]
 81060e4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 81060e8:	b2db      	uxtb	r3, r3
 81060ea:	2b04      	cmp	r3, #4
 81060ec:	d139      	bne.n	8106162 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 81060ee:	687b      	ldr	r3, [r7, #4]
 81060f0:	681b      	ldr	r3, [r3, #0]
 81060f2:	681a      	ldr	r2, [r3, #0]
 81060f4:	687b      	ldr	r3, [r7, #4]
 81060f6:	681b      	ldr	r3, [r3, #0]
 81060f8:	f022 0216 	bic.w	r2, r2, #22
 81060fc:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 81060fe:	687b      	ldr	r3, [r7, #4]
 8106100:	681b      	ldr	r3, [r3, #0]
 8106102:	695a      	ldr	r2, [r3, #20]
 8106104:	687b      	ldr	r3, [r7, #4]
 8106106:	681b      	ldr	r3, [r3, #0]
 8106108:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 810610c:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 810610e:	687b      	ldr	r3, [r7, #4]
 8106110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8106112:	2b00      	cmp	r3, #0
 8106114:	d103      	bne.n	810611e <HAL_DMA_IRQHandler+0x736>
 8106116:	687b      	ldr	r3, [r7, #4]
 8106118:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 810611a:	2b00      	cmp	r3, #0
 810611c:	d007      	beq.n	810612e <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 810611e:	687b      	ldr	r3, [r7, #4]
 8106120:	681b      	ldr	r3, [r3, #0]
 8106122:	681a      	ldr	r2, [r3, #0]
 8106124:	687b      	ldr	r3, [r7, #4]
 8106126:	681b      	ldr	r3, [r3, #0]
 8106128:	f022 0208 	bic.w	r2, r2, #8
 810612c:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 810612e:	687b      	ldr	r3, [r7, #4]
 8106130:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8106132:	f003 031f 	and.w	r3, r3, #31
 8106136:	223f      	movs	r2, #63	; 0x3f
 8106138:	409a      	lsls	r2, r3
 810613a:	6a3b      	ldr	r3, [r7, #32]
 810613c:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 810613e:	687b      	ldr	r3, [r7, #4]
 8106140:	2200      	movs	r2, #0
 8106142:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8106146:	687b      	ldr	r3, [r7, #4]
 8106148:	2201      	movs	r2, #1
 810614a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 810614e:	687b      	ldr	r3, [r7, #4]
 8106150:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8106152:	2b00      	cmp	r3, #0
 8106154:	f000 834a 	beq.w	81067ec <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8106158:	687b      	ldr	r3, [r7, #4]
 810615a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810615c:	6878      	ldr	r0, [r7, #4]
 810615e:	4798      	blx	r3
          }
          return;
 8106160:	e344      	b.n	81067ec <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8106162:	687b      	ldr	r3, [r7, #4]
 8106164:	681b      	ldr	r3, [r3, #0]
 8106166:	681b      	ldr	r3, [r3, #0]
 8106168:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 810616c:	2b00      	cmp	r3, #0
 810616e:	d018      	beq.n	81061a2 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8106170:	687b      	ldr	r3, [r7, #4]
 8106172:	681b      	ldr	r3, [r3, #0]
 8106174:	681b      	ldr	r3, [r3, #0]
 8106176:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 810617a:	2b00      	cmp	r3, #0
 810617c:	d108      	bne.n	8106190 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 810617e:	687b      	ldr	r3, [r7, #4]
 8106180:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8106182:	2b00      	cmp	r3, #0
 8106184:	d02c      	beq.n	81061e0 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8106186:	687b      	ldr	r3, [r7, #4]
 8106188:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 810618a:	6878      	ldr	r0, [r7, #4]
 810618c:	4798      	blx	r3
 810618e:	e027      	b.n	81061e0 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8106190:	687b      	ldr	r3, [r7, #4]
 8106192:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8106194:	2b00      	cmp	r3, #0
 8106196:	d023      	beq.n	81061e0 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8106198:	687b      	ldr	r3, [r7, #4]
 810619a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810619c:	6878      	ldr	r0, [r7, #4]
 810619e:	4798      	blx	r3
 81061a0:	e01e      	b.n	81061e0 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 81061a2:	687b      	ldr	r3, [r7, #4]
 81061a4:	681b      	ldr	r3, [r3, #0]
 81061a6:	681b      	ldr	r3, [r3, #0]
 81061a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 81061ac:	2b00      	cmp	r3, #0
 81061ae:	d10f      	bne.n	81061d0 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 81061b0:	687b      	ldr	r3, [r7, #4]
 81061b2:	681b      	ldr	r3, [r3, #0]
 81061b4:	681a      	ldr	r2, [r3, #0]
 81061b6:	687b      	ldr	r3, [r7, #4]
 81061b8:	681b      	ldr	r3, [r3, #0]
 81061ba:	f022 0210 	bic.w	r2, r2, #16
 81061be:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 81061c0:	687b      	ldr	r3, [r7, #4]
 81061c2:	2200      	movs	r2, #0
 81061c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 81061c8:	687b      	ldr	r3, [r7, #4]
 81061ca:	2201      	movs	r2, #1
 81061cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 81061d0:	687b      	ldr	r3, [r7, #4]
 81061d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81061d4:	2b00      	cmp	r3, #0
 81061d6:	d003      	beq.n	81061e0 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 81061d8:	687b      	ldr	r3, [r7, #4]
 81061da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81061dc:	6878      	ldr	r0, [r7, #4]
 81061de:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 81061e0:	687b      	ldr	r3, [r7, #4]
 81061e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81061e4:	2b00      	cmp	r3, #0
 81061e6:	f000 8306 	beq.w	81067f6 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 81061ea:	687b      	ldr	r3, [r7, #4]
 81061ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81061ee:	f003 0301 	and.w	r3, r3, #1
 81061f2:	2b00      	cmp	r3, #0
 81061f4:	f000 8088 	beq.w	8106308 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 81061f8:	687b      	ldr	r3, [r7, #4]
 81061fa:	2204      	movs	r2, #4
 81061fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8106200:	687b      	ldr	r3, [r7, #4]
 8106202:	681b      	ldr	r3, [r3, #0]
 8106204:	4a7a      	ldr	r2, [pc, #488]	; (81063f0 <HAL_DMA_IRQHandler+0xa08>)
 8106206:	4293      	cmp	r3, r2
 8106208:	d04a      	beq.n	81062a0 <HAL_DMA_IRQHandler+0x8b8>
 810620a:	687b      	ldr	r3, [r7, #4]
 810620c:	681b      	ldr	r3, [r3, #0]
 810620e:	4a79      	ldr	r2, [pc, #484]	; (81063f4 <HAL_DMA_IRQHandler+0xa0c>)
 8106210:	4293      	cmp	r3, r2
 8106212:	d045      	beq.n	81062a0 <HAL_DMA_IRQHandler+0x8b8>
 8106214:	687b      	ldr	r3, [r7, #4]
 8106216:	681b      	ldr	r3, [r3, #0]
 8106218:	4a77      	ldr	r2, [pc, #476]	; (81063f8 <HAL_DMA_IRQHandler+0xa10>)
 810621a:	4293      	cmp	r3, r2
 810621c:	d040      	beq.n	81062a0 <HAL_DMA_IRQHandler+0x8b8>
 810621e:	687b      	ldr	r3, [r7, #4]
 8106220:	681b      	ldr	r3, [r3, #0]
 8106222:	4a76      	ldr	r2, [pc, #472]	; (81063fc <HAL_DMA_IRQHandler+0xa14>)
 8106224:	4293      	cmp	r3, r2
 8106226:	d03b      	beq.n	81062a0 <HAL_DMA_IRQHandler+0x8b8>
 8106228:	687b      	ldr	r3, [r7, #4]
 810622a:	681b      	ldr	r3, [r3, #0]
 810622c:	4a74      	ldr	r2, [pc, #464]	; (8106400 <HAL_DMA_IRQHandler+0xa18>)
 810622e:	4293      	cmp	r3, r2
 8106230:	d036      	beq.n	81062a0 <HAL_DMA_IRQHandler+0x8b8>
 8106232:	687b      	ldr	r3, [r7, #4]
 8106234:	681b      	ldr	r3, [r3, #0]
 8106236:	4a73      	ldr	r2, [pc, #460]	; (8106404 <HAL_DMA_IRQHandler+0xa1c>)
 8106238:	4293      	cmp	r3, r2
 810623a:	d031      	beq.n	81062a0 <HAL_DMA_IRQHandler+0x8b8>
 810623c:	687b      	ldr	r3, [r7, #4]
 810623e:	681b      	ldr	r3, [r3, #0]
 8106240:	4a71      	ldr	r2, [pc, #452]	; (8106408 <HAL_DMA_IRQHandler+0xa20>)
 8106242:	4293      	cmp	r3, r2
 8106244:	d02c      	beq.n	81062a0 <HAL_DMA_IRQHandler+0x8b8>
 8106246:	687b      	ldr	r3, [r7, #4]
 8106248:	681b      	ldr	r3, [r3, #0]
 810624a:	4a70      	ldr	r2, [pc, #448]	; (810640c <HAL_DMA_IRQHandler+0xa24>)
 810624c:	4293      	cmp	r3, r2
 810624e:	d027      	beq.n	81062a0 <HAL_DMA_IRQHandler+0x8b8>
 8106250:	687b      	ldr	r3, [r7, #4]
 8106252:	681b      	ldr	r3, [r3, #0]
 8106254:	4a6e      	ldr	r2, [pc, #440]	; (8106410 <HAL_DMA_IRQHandler+0xa28>)
 8106256:	4293      	cmp	r3, r2
 8106258:	d022      	beq.n	81062a0 <HAL_DMA_IRQHandler+0x8b8>
 810625a:	687b      	ldr	r3, [r7, #4]
 810625c:	681b      	ldr	r3, [r3, #0]
 810625e:	4a6d      	ldr	r2, [pc, #436]	; (8106414 <HAL_DMA_IRQHandler+0xa2c>)
 8106260:	4293      	cmp	r3, r2
 8106262:	d01d      	beq.n	81062a0 <HAL_DMA_IRQHandler+0x8b8>
 8106264:	687b      	ldr	r3, [r7, #4]
 8106266:	681b      	ldr	r3, [r3, #0]
 8106268:	4a6b      	ldr	r2, [pc, #428]	; (8106418 <HAL_DMA_IRQHandler+0xa30>)
 810626a:	4293      	cmp	r3, r2
 810626c:	d018      	beq.n	81062a0 <HAL_DMA_IRQHandler+0x8b8>
 810626e:	687b      	ldr	r3, [r7, #4]
 8106270:	681b      	ldr	r3, [r3, #0]
 8106272:	4a6a      	ldr	r2, [pc, #424]	; (810641c <HAL_DMA_IRQHandler+0xa34>)
 8106274:	4293      	cmp	r3, r2
 8106276:	d013      	beq.n	81062a0 <HAL_DMA_IRQHandler+0x8b8>
 8106278:	687b      	ldr	r3, [r7, #4]
 810627a:	681b      	ldr	r3, [r3, #0]
 810627c:	4a68      	ldr	r2, [pc, #416]	; (8106420 <HAL_DMA_IRQHandler+0xa38>)
 810627e:	4293      	cmp	r3, r2
 8106280:	d00e      	beq.n	81062a0 <HAL_DMA_IRQHandler+0x8b8>
 8106282:	687b      	ldr	r3, [r7, #4]
 8106284:	681b      	ldr	r3, [r3, #0]
 8106286:	4a67      	ldr	r2, [pc, #412]	; (8106424 <HAL_DMA_IRQHandler+0xa3c>)
 8106288:	4293      	cmp	r3, r2
 810628a:	d009      	beq.n	81062a0 <HAL_DMA_IRQHandler+0x8b8>
 810628c:	687b      	ldr	r3, [r7, #4]
 810628e:	681b      	ldr	r3, [r3, #0]
 8106290:	4a65      	ldr	r2, [pc, #404]	; (8106428 <HAL_DMA_IRQHandler+0xa40>)
 8106292:	4293      	cmp	r3, r2
 8106294:	d004      	beq.n	81062a0 <HAL_DMA_IRQHandler+0x8b8>
 8106296:	687b      	ldr	r3, [r7, #4]
 8106298:	681b      	ldr	r3, [r3, #0]
 810629a:	4a64      	ldr	r2, [pc, #400]	; (810642c <HAL_DMA_IRQHandler+0xa44>)
 810629c:	4293      	cmp	r3, r2
 810629e:	d108      	bne.n	81062b2 <HAL_DMA_IRQHandler+0x8ca>
 81062a0:	687b      	ldr	r3, [r7, #4]
 81062a2:	681b      	ldr	r3, [r3, #0]
 81062a4:	681a      	ldr	r2, [r3, #0]
 81062a6:	687b      	ldr	r3, [r7, #4]
 81062a8:	681b      	ldr	r3, [r3, #0]
 81062aa:	f022 0201 	bic.w	r2, r2, #1
 81062ae:	601a      	str	r2, [r3, #0]
 81062b0:	e007      	b.n	81062c2 <HAL_DMA_IRQHandler+0x8da>
 81062b2:	687b      	ldr	r3, [r7, #4]
 81062b4:	681b      	ldr	r3, [r3, #0]
 81062b6:	681a      	ldr	r2, [r3, #0]
 81062b8:	687b      	ldr	r3, [r7, #4]
 81062ba:	681b      	ldr	r3, [r3, #0]
 81062bc:	f022 0201 	bic.w	r2, r2, #1
 81062c0:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 81062c2:	68fb      	ldr	r3, [r7, #12]
 81062c4:	3301      	adds	r3, #1
 81062c6:	60fb      	str	r3, [r7, #12]
 81062c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 81062ca:	429a      	cmp	r2, r3
 81062cc:	d307      	bcc.n	81062de <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 81062ce:	687b      	ldr	r3, [r7, #4]
 81062d0:	681b      	ldr	r3, [r3, #0]
 81062d2:	681b      	ldr	r3, [r3, #0]
 81062d4:	f003 0301 	and.w	r3, r3, #1
 81062d8:	2b00      	cmp	r3, #0
 81062da:	d1f2      	bne.n	81062c2 <HAL_DMA_IRQHandler+0x8da>
 81062dc:	e000      	b.n	81062e0 <HAL_DMA_IRQHandler+0x8f8>
            break;
 81062de:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 81062e0:	687b      	ldr	r3, [r7, #4]
 81062e2:	2200      	movs	r2, #0
 81062e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 81062e8:	687b      	ldr	r3, [r7, #4]
 81062ea:	681b      	ldr	r3, [r3, #0]
 81062ec:	681b      	ldr	r3, [r3, #0]
 81062ee:	f003 0301 	and.w	r3, r3, #1
 81062f2:	2b00      	cmp	r3, #0
 81062f4:	d004      	beq.n	8106300 <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 81062f6:	687b      	ldr	r3, [r7, #4]
 81062f8:	2203      	movs	r2, #3
 81062fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 81062fe:	e003      	b.n	8106308 <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8106300:	687b      	ldr	r3, [r7, #4]
 8106302:	2201      	movs	r2, #1
 8106304:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 8106308:	687b      	ldr	r3, [r7, #4]
 810630a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 810630c:	2b00      	cmp	r3, #0
 810630e:	f000 8272 	beq.w	81067f6 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8106312:	687b      	ldr	r3, [r7, #4]
 8106314:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8106316:	6878      	ldr	r0, [r7, #4]
 8106318:	4798      	blx	r3
 810631a:	e26c      	b.n	81067f6 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 810631c:	687b      	ldr	r3, [r7, #4]
 810631e:	681b      	ldr	r3, [r3, #0]
 8106320:	4a43      	ldr	r2, [pc, #268]	; (8106430 <HAL_DMA_IRQHandler+0xa48>)
 8106322:	4293      	cmp	r3, r2
 8106324:	d022      	beq.n	810636c <HAL_DMA_IRQHandler+0x984>
 8106326:	687b      	ldr	r3, [r7, #4]
 8106328:	681b      	ldr	r3, [r3, #0]
 810632a:	4a42      	ldr	r2, [pc, #264]	; (8106434 <HAL_DMA_IRQHandler+0xa4c>)
 810632c:	4293      	cmp	r3, r2
 810632e:	d01d      	beq.n	810636c <HAL_DMA_IRQHandler+0x984>
 8106330:	687b      	ldr	r3, [r7, #4]
 8106332:	681b      	ldr	r3, [r3, #0]
 8106334:	4a40      	ldr	r2, [pc, #256]	; (8106438 <HAL_DMA_IRQHandler+0xa50>)
 8106336:	4293      	cmp	r3, r2
 8106338:	d018      	beq.n	810636c <HAL_DMA_IRQHandler+0x984>
 810633a:	687b      	ldr	r3, [r7, #4]
 810633c:	681b      	ldr	r3, [r3, #0]
 810633e:	4a3f      	ldr	r2, [pc, #252]	; (810643c <HAL_DMA_IRQHandler+0xa54>)
 8106340:	4293      	cmp	r3, r2
 8106342:	d013      	beq.n	810636c <HAL_DMA_IRQHandler+0x984>
 8106344:	687b      	ldr	r3, [r7, #4]
 8106346:	681b      	ldr	r3, [r3, #0]
 8106348:	4a3d      	ldr	r2, [pc, #244]	; (8106440 <HAL_DMA_IRQHandler+0xa58>)
 810634a:	4293      	cmp	r3, r2
 810634c:	d00e      	beq.n	810636c <HAL_DMA_IRQHandler+0x984>
 810634e:	687b      	ldr	r3, [r7, #4]
 8106350:	681b      	ldr	r3, [r3, #0]
 8106352:	4a3c      	ldr	r2, [pc, #240]	; (8106444 <HAL_DMA_IRQHandler+0xa5c>)
 8106354:	4293      	cmp	r3, r2
 8106356:	d009      	beq.n	810636c <HAL_DMA_IRQHandler+0x984>
 8106358:	687b      	ldr	r3, [r7, #4]
 810635a:	681b      	ldr	r3, [r3, #0]
 810635c:	4a3a      	ldr	r2, [pc, #232]	; (8106448 <HAL_DMA_IRQHandler+0xa60>)
 810635e:	4293      	cmp	r3, r2
 8106360:	d004      	beq.n	810636c <HAL_DMA_IRQHandler+0x984>
 8106362:	687b      	ldr	r3, [r7, #4]
 8106364:	681b      	ldr	r3, [r3, #0]
 8106366:	4a39      	ldr	r2, [pc, #228]	; (810644c <HAL_DMA_IRQHandler+0xa64>)
 8106368:	4293      	cmp	r3, r2
 810636a:	d101      	bne.n	8106370 <HAL_DMA_IRQHandler+0x988>
 810636c:	2301      	movs	r3, #1
 810636e:	e000      	b.n	8106372 <HAL_DMA_IRQHandler+0x98a>
 8106370:	2300      	movs	r3, #0
 8106372:	2b00      	cmp	r3, #0
 8106374:	f000 823f 	beq.w	81067f6 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8106378:	687b      	ldr	r3, [r7, #4]
 810637a:	681b      	ldr	r3, [r3, #0]
 810637c:	681b      	ldr	r3, [r3, #0]
 810637e:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8106380:	687b      	ldr	r3, [r7, #4]
 8106382:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8106384:	f003 031f 	and.w	r3, r3, #31
 8106388:	2204      	movs	r2, #4
 810638a:	409a      	lsls	r2, r3
 810638c:	697b      	ldr	r3, [r7, #20]
 810638e:	4013      	ands	r3, r2
 8106390:	2b00      	cmp	r3, #0
 8106392:	f000 80cd 	beq.w	8106530 <HAL_DMA_IRQHandler+0xb48>
 8106396:	693b      	ldr	r3, [r7, #16]
 8106398:	f003 0304 	and.w	r3, r3, #4
 810639c:	2b00      	cmp	r3, #0
 810639e:	f000 80c7 	beq.w	8106530 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 81063a2:	687b      	ldr	r3, [r7, #4]
 81063a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81063a6:	f003 031f 	and.w	r3, r3, #31
 81063aa:	2204      	movs	r2, #4
 81063ac:	409a      	lsls	r2, r3
 81063ae:	69fb      	ldr	r3, [r7, #28]
 81063b0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 81063b2:	693b      	ldr	r3, [r7, #16]
 81063b4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 81063b8:	2b00      	cmp	r3, #0
 81063ba:	d049      	beq.n	8106450 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 81063bc:	693b      	ldr	r3, [r7, #16]
 81063be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 81063c2:	2b00      	cmp	r3, #0
 81063c4:	d109      	bne.n	81063da <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 81063c6:	687b      	ldr	r3, [r7, #4]
 81063c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 81063ca:	2b00      	cmp	r3, #0
 81063cc:	f000 8210 	beq.w	81067f0 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 81063d0:	687b      	ldr	r3, [r7, #4]
 81063d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 81063d4:	6878      	ldr	r0, [r7, #4]
 81063d6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 81063d8:	e20a      	b.n	81067f0 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 81063da:	687b      	ldr	r3, [r7, #4]
 81063dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81063de:	2b00      	cmp	r3, #0
 81063e0:	f000 8206 	beq.w	81067f0 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 81063e4:	687b      	ldr	r3, [r7, #4]
 81063e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81063e8:	6878      	ldr	r0, [r7, #4]
 81063ea:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 81063ec:	e200      	b.n	81067f0 <HAL_DMA_IRQHandler+0xe08>
 81063ee:	bf00      	nop
 81063f0:	40020010 	.word	0x40020010
 81063f4:	40020028 	.word	0x40020028
 81063f8:	40020040 	.word	0x40020040
 81063fc:	40020058 	.word	0x40020058
 8106400:	40020070 	.word	0x40020070
 8106404:	40020088 	.word	0x40020088
 8106408:	400200a0 	.word	0x400200a0
 810640c:	400200b8 	.word	0x400200b8
 8106410:	40020410 	.word	0x40020410
 8106414:	40020428 	.word	0x40020428
 8106418:	40020440 	.word	0x40020440
 810641c:	40020458 	.word	0x40020458
 8106420:	40020470 	.word	0x40020470
 8106424:	40020488 	.word	0x40020488
 8106428:	400204a0 	.word	0x400204a0
 810642c:	400204b8 	.word	0x400204b8
 8106430:	58025408 	.word	0x58025408
 8106434:	5802541c 	.word	0x5802541c
 8106438:	58025430 	.word	0x58025430
 810643c:	58025444 	.word	0x58025444
 8106440:	58025458 	.word	0x58025458
 8106444:	5802546c 	.word	0x5802546c
 8106448:	58025480 	.word	0x58025480
 810644c:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8106450:	693b      	ldr	r3, [r7, #16]
 8106452:	f003 0320 	and.w	r3, r3, #32
 8106456:	2b00      	cmp	r3, #0
 8106458:	d160      	bne.n	810651c <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 810645a:	687b      	ldr	r3, [r7, #4]
 810645c:	681b      	ldr	r3, [r3, #0]
 810645e:	4a8c      	ldr	r2, [pc, #560]	; (8106690 <HAL_DMA_IRQHandler+0xca8>)
 8106460:	4293      	cmp	r3, r2
 8106462:	d04a      	beq.n	81064fa <HAL_DMA_IRQHandler+0xb12>
 8106464:	687b      	ldr	r3, [r7, #4]
 8106466:	681b      	ldr	r3, [r3, #0]
 8106468:	4a8a      	ldr	r2, [pc, #552]	; (8106694 <HAL_DMA_IRQHandler+0xcac>)
 810646a:	4293      	cmp	r3, r2
 810646c:	d045      	beq.n	81064fa <HAL_DMA_IRQHandler+0xb12>
 810646e:	687b      	ldr	r3, [r7, #4]
 8106470:	681b      	ldr	r3, [r3, #0]
 8106472:	4a89      	ldr	r2, [pc, #548]	; (8106698 <HAL_DMA_IRQHandler+0xcb0>)
 8106474:	4293      	cmp	r3, r2
 8106476:	d040      	beq.n	81064fa <HAL_DMA_IRQHandler+0xb12>
 8106478:	687b      	ldr	r3, [r7, #4]
 810647a:	681b      	ldr	r3, [r3, #0]
 810647c:	4a87      	ldr	r2, [pc, #540]	; (810669c <HAL_DMA_IRQHandler+0xcb4>)
 810647e:	4293      	cmp	r3, r2
 8106480:	d03b      	beq.n	81064fa <HAL_DMA_IRQHandler+0xb12>
 8106482:	687b      	ldr	r3, [r7, #4]
 8106484:	681b      	ldr	r3, [r3, #0]
 8106486:	4a86      	ldr	r2, [pc, #536]	; (81066a0 <HAL_DMA_IRQHandler+0xcb8>)
 8106488:	4293      	cmp	r3, r2
 810648a:	d036      	beq.n	81064fa <HAL_DMA_IRQHandler+0xb12>
 810648c:	687b      	ldr	r3, [r7, #4]
 810648e:	681b      	ldr	r3, [r3, #0]
 8106490:	4a84      	ldr	r2, [pc, #528]	; (81066a4 <HAL_DMA_IRQHandler+0xcbc>)
 8106492:	4293      	cmp	r3, r2
 8106494:	d031      	beq.n	81064fa <HAL_DMA_IRQHandler+0xb12>
 8106496:	687b      	ldr	r3, [r7, #4]
 8106498:	681b      	ldr	r3, [r3, #0]
 810649a:	4a83      	ldr	r2, [pc, #524]	; (81066a8 <HAL_DMA_IRQHandler+0xcc0>)
 810649c:	4293      	cmp	r3, r2
 810649e:	d02c      	beq.n	81064fa <HAL_DMA_IRQHandler+0xb12>
 81064a0:	687b      	ldr	r3, [r7, #4]
 81064a2:	681b      	ldr	r3, [r3, #0]
 81064a4:	4a81      	ldr	r2, [pc, #516]	; (81066ac <HAL_DMA_IRQHandler+0xcc4>)
 81064a6:	4293      	cmp	r3, r2
 81064a8:	d027      	beq.n	81064fa <HAL_DMA_IRQHandler+0xb12>
 81064aa:	687b      	ldr	r3, [r7, #4]
 81064ac:	681b      	ldr	r3, [r3, #0]
 81064ae:	4a80      	ldr	r2, [pc, #512]	; (81066b0 <HAL_DMA_IRQHandler+0xcc8>)
 81064b0:	4293      	cmp	r3, r2
 81064b2:	d022      	beq.n	81064fa <HAL_DMA_IRQHandler+0xb12>
 81064b4:	687b      	ldr	r3, [r7, #4]
 81064b6:	681b      	ldr	r3, [r3, #0]
 81064b8:	4a7e      	ldr	r2, [pc, #504]	; (81066b4 <HAL_DMA_IRQHandler+0xccc>)
 81064ba:	4293      	cmp	r3, r2
 81064bc:	d01d      	beq.n	81064fa <HAL_DMA_IRQHandler+0xb12>
 81064be:	687b      	ldr	r3, [r7, #4]
 81064c0:	681b      	ldr	r3, [r3, #0]
 81064c2:	4a7d      	ldr	r2, [pc, #500]	; (81066b8 <HAL_DMA_IRQHandler+0xcd0>)
 81064c4:	4293      	cmp	r3, r2
 81064c6:	d018      	beq.n	81064fa <HAL_DMA_IRQHandler+0xb12>
 81064c8:	687b      	ldr	r3, [r7, #4]
 81064ca:	681b      	ldr	r3, [r3, #0]
 81064cc:	4a7b      	ldr	r2, [pc, #492]	; (81066bc <HAL_DMA_IRQHandler+0xcd4>)
 81064ce:	4293      	cmp	r3, r2
 81064d0:	d013      	beq.n	81064fa <HAL_DMA_IRQHandler+0xb12>
 81064d2:	687b      	ldr	r3, [r7, #4]
 81064d4:	681b      	ldr	r3, [r3, #0]
 81064d6:	4a7a      	ldr	r2, [pc, #488]	; (81066c0 <HAL_DMA_IRQHandler+0xcd8>)
 81064d8:	4293      	cmp	r3, r2
 81064da:	d00e      	beq.n	81064fa <HAL_DMA_IRQHandler+0xb12>
 81064dc:	687b      	ldr	r3, [r7, #4]
 81064de:	681b      	ldr	r3, [r3, #0]
 81064e0:	4a78      	ldr	r2, [pc, #480]	; (81066c4 <HAL_DMA_IRQHandler+0xcdc>)
 81064e2:	4293      	cmp	r3, r2
 81064e4:	d009      	beq.n	81064fa <HAL_DMA_IRQHandler+0xb12>
 81064e6:	687b      	ldr	r3, [r7, #4]
 81064e8:	681b      	ldr	r3, [r3, #0]
 81064ea:	4a77      	ldr	r2, [pc, #476]	; (81066c8 <HAL_DMA_IRQHandler+0xce0>)
 81064ec:	4293      	cmp	r3, r2
 81064ee:	d004      	beq.n	81064fa <HAL_DMA_IRQHandler+0xb12>
 81064f0:	687b      	ldr	r3, [r7, #4]
 81064f2:	681b      	ldr	r3, [r3, #0]
 81064f4:	4a75      	ldr	r2, [pc, #468]	; (81066cc <HAL_DMA_IRQHandler+0xce4>)
 81064f6:	4293      	cmp	r3, r2
 81064f8:	d108      	bne.n	810650c <HAL_DMA_IRQHandler+0xb24>
 81064fa:	687b      	ldr	r3, [r7, #4]
 81064fc:	681b      	ldr	r3, [r3, #0]
 81064fe:	681a      	ldr	r2, [r3, #0]
 8106500:	687b      	ldr	r3, [r7, #4]
 8106502:	681b      	ldr	r3, [r3, #0]
 8106504:	f022 0208 	bic.w	r2, r2, #8
 8106508:	601a      	str	r2, [r3, #0]
 810650a:	e007      	b.n	810651c <HAL_DMA_IRQHandler+0xb34>
 810650c:	687b      	ldr	r3, [r7, #4]
 810650e:	681b      	ldr	r3, [r3, #0]
 8106510:	681a      	ldr	r2, [r3, #0]
 8106512:	687b      	ldr	r3, [r7, #4]
 8106514:	681b      	ldr	r3, [r3, #0]
 8106516:	f022 0204 	bic.w	r2, r2, #4
 810651a:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 810651c:	687b      	ldr	r3, [r7, #4]
 810651e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8106520:	2b00      	cmp	r3, #0
 8106522:	f000 8165 	beq.w	81067f0 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8106526:	687b      	ldr	r3, [r7, #4]
 8106528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810652a:	6878      	ldr	r0, [r7, #4]
 810652c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 810652e:	e15f      	b.n	81067f0 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8106530:	687b      	ldr	r3, [r7, #4]
 8106532:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8106534:	f003 031f 	and.w	r3, r3, #31
 8106538:	2202      	movs	r2, #2
 810653a:	409a      	lsls	r2, r3
 810653c:	697b      	ldr	r3, [r7, #20]
 810653e:	4013      	ands	r3, r2
 8106540:	2b00      	cmp	r3, #0
 8106542:	f000 80c5 	beq.w	81066d0 <HAL_DMA_IRQHandler+0xce8>
 8106546:	693b      	ldr	r3, [r7, #16]
 8106548:	f003 0302 	and.w	r3, r3, #2
 810654c:	2b00      	cmp	r3, #0
 810654e:	f000 80bf 	beq.w	81066d0 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8106552:	687b      	ldr	r3, [r7, #4]
 8106554:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8106556:	f003 031f 	and.w	r3, r3, #31
 810655a:	2202      	movs	r2, #2
 810655c:	409a      	lsls	r2, r3
 810655e:	69fb      	ldr	r3, [r7, #28]
 8106560:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8106562:	693b      	ldr	r3, [r7, #16]
 8106564:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8106568:	2b00      	cmp	r3, #0
 810656a:	d018      	beq.n	810659e <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 810656c:	693b      	ldr	r3, [r7, #16]
 810656e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8106572:	2b00      	cmp	r3, #0
 8106574:	d109      	bne.n	810658a <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8106576:	687b      	ldr	r3, [r7, #4]
 8106578:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 810657a:	2b00      	cmp	r3, #0
 810657c:	f000 813a 	beq.w	81067f4 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8106580:	687b      	ldr	r3, [r7, #4]
 8106582:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8106584:	6878      	ldr	r0, [r7, #4]
 8106586:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8106588:	e134      	b.n	81067f4 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 810658a:	687b      	ldr	r3, [r7, #4]
 810658c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810658e:	2b00      	cmp	r3, #0
 8106590:	f000 8130 	beq.w	81067f4 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8106594:	687b      	ldr	r3, [r7, #4]
 8106596:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8106598:	6878      	ldr	r0, [r7, #4]
 810659a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 810659c:	e12a      	b.n	81067f4 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 810659e:	693b      	ldr	r3, [r7, #16]
 81065a0:	f003 0320 	and.w	r3, r3, #32
 81065a4:	2b00      	cmp	r3, #0
 81065a6:	d168      	bne.n	810667a <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 81065a8:	687b      	ldr	r3, [r7, #4]
 81065aa:	681b      	ldr	r3, [r3, #0]
 81065ac:	4a38      	ldr	r2, [pc, #224]	; (8106690 <HAL_DMA_IRQHandler+0xca8>)
 81065ae:	4293      	cmp	r3, r2
 81065b0:	d04a      	beq.n	8106648 <HAL_DMA_IRQHandler+0xc60>
 81065b2:	687b      	ldr	r3, [r7, #4]
 81065b4:	681b      	ldr	r3, [r3, #0]
 81065b6:	4a37      	ldr	r2, [pc, #220]	; (8106694 <HAL_DMA_IRQHandler+0xcac>)
 81065b8:	4293      	cmp	r3, r2
 81065ba:	d045      	beq.n	8106648 <HAL_DMA_IRQHandler+0xc60>
 81065bc:	687b      	ldr	r3, [r7, #4]
 81065be:	681b      	ldr	r3, [r3, #0]
 81065c0:	4a35      	ldr	r2, [pc, #212]	; (8106698 <HAL_DMA_IRQHandler+0xcb0>)
 81065c2:	4293      	cmp	r3, r2
 81065c4:	d040      	beq.n	8106648 <HAL_DMA_IRQHandler+0xc60>
 81065c6:	687b      	ldr	r3, [r7, #4]
 81065c8:	681b      	ldr	r3, [r3, #0]
 81065ca:	4a34      	ldr	r2, [pc, #208]	; (810669c <HAL_DMA_IRQHandler+0xcb4>)
 81065cc:	4293      	cmp	r3, r2
 81065ce:	d03b      	beq.n	8106648 <HAL_DMA_IRQHandler+0xc60>
 81065d0:	687b      	ldr	r3, [r7, #4]
 81065d2:	681b      	ldr	r3, [r3, #0]
 81065d4:	4a32      	ldr	r2, [pc, #200]	; (81066a0 <HAL_DMA_IRQHandler+0xcb8>)
 81065d6:	4293      	cmp	r3, r2
 81065d8:	d036      	beq.n	8106648 <HAL_DMA_IRQHandler+0xc60>
 81065da:	687b      	ldr	r3, [r7, #4]
 81065dc:	681b      	ldr	r3, [r3, #0]
 81065de:	4a31      	ldr	r2, [pc, #196]	; (81066a4 <HAL_DMA_IRQHandler+0xcbc>)
 81065e0:	4293      	cmp	r3, r2
 81065e2:	d031      	beq.n	8106648 <HAL_DMA_IRQHandler+0xc60>
 81065e4:	687b      	ldr	r3, [r7, #4]
 81065e6:	681b      	ldr	r3, [r3, #0]
 81065e8:	4a2f      	ldr	r2, [pc, #188]	; (81066a8 <HAL_DMA_IRQHandler+0xcc0>)
 81065ea:	4293      	cmp	r3, r2
 81065ec:	d02c      	beq.n	8106648 <HAL_DMA_IRQHandler+0xc60>
 81065ee:	687b      	ldr	r3, [r7, #4]
 81065f0:	681b      	ldr	r3, [r3, #0]
 81065f2:	4a2e      	ldr	r2, [pc, #184]	; (81066ac <HAL_DMA_IRQHandler+0xcc4>)
 81065f4:	4293      	cmp	r3, r2
 81065f6:	d027      	beq.n	8106648 <HAL_DMA_IRQHandler+0xc60>
 81065f8:	687b      	ldr	r3, [r7, #4]
 81065fa:	681b      	ldr	r3, [r3, #0]
 81065fc:	4a2c      	ldr	r2, [pc, #176]	; (81066b0 <HAL_DMA_IRQHandler+0xcc8>)
 81065fe:	4293      	cmp	r3, r2
 8106600:	d022      	beq.n	8106648 <HAL_DMA_IRQHandler+0xc60>
 8106602:	687b      	ldr	r3, [r7, #4]
 8106604:	681b      	ldr	r3, [r3, #0]
 8106606:	4a2b      	ldr	r2, [pc, #172]	; (81066b4 <HAL_DMA_IRQHandler+0xccc>)
 8106608:	4293      	cmp	r3, r2
 810660a:	d01d      	beq.n	8106648 <HAL_DMA_IRQHandler+0xc60>
 810660c:	687b      	ldr	r3, [r7, #4]
 810660e:	681b      	ldr	r3, [r3, #0]
 8106610:	4a29      	ldr	r2, [pc, #164]	; (81066b8 <HAL_DMA_IRQHandler+0xcd0>)
 8106612:	4293      	cmp	r3, r2
 8106614:	d018      	beq.n	8106648 <HAL_DMA_IRQHandler+0xc60>
 8106616:	687b      	ldr	r3, [r7, #4]
 8106618:	681b      	ldr	r3, [r3, #0]
 810661a:	4a28      	ldr	r2, [pc, #160]	; (81066bc <HAL_DMA_IRQHandler+0xcd4>)
 810661c:	4293      	cmp	r3, r2
 810661e:	d013      	beq.n	8106648 <HAL_DMA_IRQHandler+0xc60>
 8106620:	687b      	ldr	r3, [r7, #4]
 8106622:	681b      	ldr	r3, [r3, #0]
 8106624:	4a26      	ldr	r2, [pc, #152]	; (81066c0 <HAL_DMA_IRQHandler+0xcd8>)
 8106626:	4293      	cmp	r3, r2
 8106628:	d00e      	beq.n	8106648 <HAL_DMA_IRQHandler+0xc60>
 810662a:	687b      	ldr	r3, [r7, #4]
 810662c:	681b      	ldr	r3, [r3, #0]
 810662e:	4a25      	ldr	r2, [pc, #148]	; (81066c4 <HAL_DMA_IRQHandler+0xcdc>)
 8106630:	4293      	cmp	r3, r2
 8106632:	d009      	beq.n	8106648 <HAL_DMA_IRQHandler+0xc60>
 8106634:	687b      	ldr	r3, [r7, #4]
 8106636:	681b      	ldr	r3, [r3, #0]
 8106638:	4a23      	ldr	r2, [pc, #140]	; (81066c8 <HAL_DMA_IRQHandler+0xce0>)
 810663a:	4293      	cmp	r3, r2
 810663c:	d004      	beq.n	8106648 <HAL_DMA_IRQHandler+0xc60>
 810663e:	687b      	ldr	r3, [r7, #4]
 8106640:	681b      	ldr	r3, [r3, #0]
 8106642:	4a22      	ldr	r2, [pc, #136]	; (81066cc <HAL_DMA_IRQHandler+0xce4>)
 8106644:	4293      	cmp	r3, r2
 8106646:	d108      	bne.n	810665a <HAL_DMA_IRQHandler+0xc72>
 8106648:	687b      	ldr	r3, [r7, #4]
 810664a:	681b      	ldr	r3, [r3, #0]
 810664c:	681a      	ldr	r2, [r3, #0]
 810664e:	687b      	ldr	r3, [r7, #4]
 8106650:	681b      	ldr	r3, [r3, #0]
 8106652:	f022 0214 	bic.w	r2, r2, #20
 8106656:	601a      	str	r2, [r3, #0]
 8106658:	e007      	b.n	810666a <HAL_DMA_IRQHandler+0xc82>
 810665a:	687b      	ldr	r3, [r7, #4]
 810665c:	681b      	ldr	r3, [r3, #0]
 810665e:	681a      	ldr	r2, [r3, #0]
 8106660:	687b      	ldr	r3, [r7, #4]
 8106662:	681b      	ldr	r3, [r3, #0]
 8106664:	f022 020a 	bic.w	r2, r2, #10
 8106668:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 810666a:	687b      	ldr	r3, [r7, #4]
 810666c:	2200      	movs	r2, #0
 810666e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8106672:	687b      	ldr	r3, [r7, #4]
 8106674:	2201      	movs	r2, #1
 8106676:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 810667a:	687b      	ldr	r3, [r7, #4]
 810667c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810667e:	2b00      	cmp	r3, #0
 8106680:	f000 80b8 	beq.w	81067f4 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8106684:	687b      	ldr	r3, [r7, #4]
 8106686:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8106688:	6878      	ldr	r0, [r7, #4]
 810668a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 810668c:	e0b2      	b.n	81067f4 <HAL_DMA_IRQHandler+0xe0c>
 810668e:	bf00      	nop
 8106690:	40020010 	.word	0x40020010
 8106694:	40020028 	.word	0x40020028
 8106698:	40020040 	.word	0x40020040
 810669c:	40020058 	.word	0x40020058
 81066a0:	40020070 	.word	0x40020070
 81066a4:	40020088 	.word	0x40020088
 81066a8:	400200a0 	.word	0x400200a0
 81066ac:	400200b8 	.word	0x400200b8
 81066b0:	40020410 	.word	0x40020410
 81066b4:	40020428 	.word	0x40020428
 81066b8:	40020440 	.word	0x40020440
 81066bc:	40020458 	.word	0x40020458
 81066c0:	40020470 	.word	0x40020470
 81066c4:	40020488 	.word	0x40020488
 81066c8:	400204a0 	.word	0x400204a0
 81066cc:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 81066d0:	687b      	ldr	r3, [r7, #4]
 81066d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81066d4:	f003 031f 	and.w	r3, r3, #31
 81066d8:	2208      	movs	r2, #8
 81066da:	409a      	lsls	r2, r3
 81066dc:	697b      	ldr	r3, [r7, #20]
 81066de:	4013      	ands	r3, r2
 81066e0:	2b00      	cmp	r3, #0
 81066e2:	f000 8088 	beq.w	81067f6 <HAL_DMA_IRQHandler+0xe0e>
 81066e6:	693b      	ldr	r3, [r7, #16]
 81066e8:	f003 0308 	and.w	r3, r3, #8
 81066ec:	2b00      	cmp	r3, #0
 81066ee:	f000 8082 	beq.w	81067f6 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 81066f2:	687b      	ldr	r3, [r7, #4]
 81066f4:	681b      	ldr	r3, [r3, #0]
 81066f6:	4a41      	ldr	r2, [pc, #260]	; (81067fc <HAL_DMA_IRQHandler+0xe14>)
 81066f8:	4293      	cmp	r3, r2
 81066fa:	d04a      	beq.n	8106792 <HAL_DMA_IRQHandler+0xdaa>
 81066fc:	687b      	ldr	r3, [r7, #4]
 81066fe:	681b      	ldr	r3, [r3, #0]
 8106700:	4a3f      	ldr	r2, [pc, #252]	; (8106800 <HAL_DMA_IRQHandler+0xe18>)
 8106702:	4293      	cmp	r3, r2
 8106704:	d045      	beq.n	8106792 <HAL_DMA_IRQHandler+0xdaa>
 8106706:	687b      	ldr	r3, [r7, #4]
 8106708:	681b      	ldr	r3, [r3, #0]
 810670a:	4a3e      	ldr	r2, [pc, #248]	; (8106804 <HAL_DMA_IRQHandler+0xe1c>)
 810670c:	4293      	cmp	r3, r2
 810670e:	d040      	beq.n	8106792 <HAL_DMA_IRQHandler+0xdaa>
 8106710:	687b      	ldr	r3, [r7, #4]
 8106712:	681b      	ldr	r3, [r3, #0]
 8106714:	4a3c      	ldr	r2, [pc, #240]	; (8106808 <HAL_DMA_IRQHandler+0xe20>)
 8106716:	4293      	cmp	r3, r2
 8106718:	d03b      	beq.n	8106792 <HAL_DMA_IRQHandler+0xdaa>
 810671a:	687b      	ldr	r3, [r7, #4]
 810671c:	681b      	ldr	r3, [r3, #0]
 810671e:	4a3b      	ldr	r2, [pc, #236]	; (810680c <HAL_DMA_IRQHandler+0xe24>)
 8106720:	4293      	cmp	r3, r2
 8106722:	d036      	beq.n	8106792 <HAL_DMA_IRQHandler+0xdaa>
 8106724:	687b      	ldr	r3, [r7, #4]
 8106726:	681b      	ldr	r3, [r3, #0]
 8106728:	4a39      	ldr	r2, [pc, #228]	; (8106810 <HAL_DMA_IRQHandler+0xe28>)
 810672a:	4293      	cmp	r3, r2
 810672c:	d031      	beq.n	8106792 <HAL_DMA_IRQHandler+0xdaa>
 810672e:	687b      	ldr	r3, [r7, #4]
 8106730:	681b      	ldr	r3, [r3, #0]
 8106732:	4a38      	ldr	r2, [pc, #224]	; (8106814 <HAL_DMA_IRQHandler+0xe2c>)
 8106734:	4293      	cmp	r3, r2
 8106736:	d02c      	beq.n	8106792 <HAL_DMA_IRQHandler+0xdaa>
 8106738:	687b      	ldr	r3, [r7, #4]
 810673a:	681b      	ldr	r3, [r3, #0]
 810673c:	4a36      	ldr	r2, [pc, #216]	; (8106818 <HAL_DMA_IRQHandler+0xe30>)
 810673e:	4293      	cmp	r3, r2
 8106740:	d027      	beq.n	8106792 <HAL_DMA_IRQHandler+0xdaa>
 8106742:	687b      	ldr	r3, [r7, #4]
 8106744:	681b      	ldr	r3, [r3, #0]
 8106746:	4a35      	ldr	r2, [pc, #212]	; (810681c <HAL_DMA_IRQHandler+0xe34>)
 8106748:	4293      	cmp	r3, r2
 810674a:	d022      	beq.n	8106792 <HAL_DMA_IRQHandler+0xdaa>
 810674c:	687b      	ldr	r3, [r7, #4]
 810674e:	681b      	ldr	r3, [r3, #0]
 8106750:	4a33      	ldr	r2, [pc, #204]	; (8106820 <HAL_DMA_IRQHandler+0xe38>)
 8106752:	4293      	cmp	r3, r2
 8106754:	d01d      	beq.n	8106792 <HAL_DMA_IRQHandler+0xdaa>
 8106756:	687b      	ldr	r3, [r7, #4]
 8106758:	681b      	ldr	r3, [r3, #0]
 810675a:	4a32      	ldr	r2, [pc, #200]	; (8106824 <HAL_DMA_IRQHandler+0xe3c>)
 810675c:	4293      	cmp	r3, r2
 810675e:	d018      	beq.n	8106792 <HAL_DMA_IRQHandler+0xdaa>
 8106760:	687b      	ldr	r3, [r7, #4]
 8106762:	681b      	ldr	r3, [r3, #0]
 8106764:	4a30      	ldr	r2, [pc, #192]	; (8106828 <HAL_DMA_IRQHandler+0xe40>)
 8106766:	4293      	cmp	r3, r2
 8106768:	d013      	beq.n	8106792 <HAL_DMA_IRQHandler+0xdaa>
 810676a:	687b      	ldr	r3, [r7, #4]
 810676c:	681b      	ldr	r3, [r3, #0]
 810676e:	4a2f      	ldr	r2, [pc, #188]	; (810682c <HAL_DMA_IRQHandler+0xe44>)
 8106770:	4293      	cmp	r3, r2
 8106772:	d00e      	beq.n	8106792 <HAL_DMA_IRQHandler+0xdaa>
 8106774:	687b      	ldr	r3, [r7, #4]
 8106776:	681b      	ldr	r3, [r3, #0]
 8106778:	4a2d      	ldr	r2, [pc, #180]	; (8106830 <HAL_DMA_IRQHandler+0xe48>)
 810677a:	4293      	cmp	r3, r2
 810677c:	d009      	beq.n	8106792 <HAL_DMA_IRQHandler+0xdaa>
 810677e:	687b      	ldr	r3, [r7, #4]
 8106780:	681b      	ldr	r3, [r3, #0]
 8106782:	4a2c      	ldr	r2, [pc, #176]	; (8106834 <HAL_DMA_IRQHandler+0xe4c>)
 8106784:	4293      	cmp	r3, r2
 8106786:	d004      	beq.n	8106792 <HAL_DMA_IRQHandler+0xdaa>
 8106788:	687b      	ldr	r3, [r7, #4]
 810678a:	681b      	ldr	r3, [r3, #0]
 810678c:	4a2a      	ldr	r2, [pc, #168]	; (8106838 <HAL_DMA_IRQHandler+0xe50>)
 810678e:	4293      	cmp	r3, r2
 8106790:	d108      	bne.n	81067a4 <HAL_DMA_IRQHandler+0xdbc>
 8106792:	687b      	ldr	r3, [r7, #4]
 8106794:	681b      	ldr	r3, [r3, #0]
 8106796:	681a      	ldr	r2, [r3, #0]
 8106798:	687b      	ldr	r3, [r7, #4]
 810679a:	681b      	ldr	r3, [r3, #0]
 810679c:	f022 021c 	bic.w	r2, r2, #28
 81067a0:	601a      	str	r2, [r3, #0]
 81067a2:	e007      	b.n	81067b4 <HAL_DMA_IRQHandler+0xdcc>
 81067a4:	687b      	ldr	r3, [r7, #4]
 81067a6:	681b      	ldr	r3, [r3, #0]
 81067a8:	681a      	ldr	r2, [r3, #0]
 81067aa:	687b      	ldr	r3, [r7, #4]
 81067ac:	681b      	ldr	r3, [r3, #0]
 81067ae:	f022 020e 	bic.w	r2, r2, #14
 81067b2:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 81067b4:	687b      	ldr	r3, [r7, #4]
 81067b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81067b8:	f003 031f 	and.w	r3, r3, #31
 81067bc:	2201      	movs	r2, #1
 81067be:	409a      	lsls	r2, r3
 81067c0:	69fb      	ldr	r3, [r7, #28]
 81067c2:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 81067c4:	687b      	ldr	r3, [r7, #4]
 81067c6:	2201      	movs	r2, #1
 81067c8:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 81067ca:	687b      	ldr	r3, [r7, #4]
 81067cc:	2200      	movs	r2, #0
 81067ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 81067d2:	687b      	ldr	r3, [r7, #4]
 81067d4:	2201      	movs	r2, #1
 81067d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 81067da:	687b      	ldr	r3, [r7, #4]
 81067dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 81067de:	2b00      	cmp	r3, #0
 81067e0:	d009      	beq.n	81067f6 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 81067e2:	687b      	ldr	r3, [r7, #4]
 81067e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 81067e6:	6878      	ldr	r0, [r7, #4]
 81067e8:	4798      	blx	r3
 81067ea:	e004      	b.n	81067f6 <HAL_DMA_IRQHandler+0xe0e>
          return;
 81067ec:	bf00      	nop
 81067ee:	e002      	b.n	81067f6 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 81067f0:	bf00      	nop
 81067f2:	e000      	b.n	81067f6 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 81067f4:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 81067f6:	3728      	adds	r7, #40	; 0x28
 81067f8:	46bd      	mov	sp, r7
 81067fa:	bd80      	pop	{r7, pc}
 81067fc:	40020010 	.word	0x40020010
 8106800:	40020028 	.word	0x40020028
 8106804:	40020040 	.word	0x40020040
 8106808:	40020058 	.word	0x40020058
 810680c:	40020070 	.word	0x40020070
 8106810:	40020088 	.word	0x40020088
 8106814:	400200a0 	.word	0x400200a0
 8106818:	400200b8 	.word	0x400200b8
 810681c:	40020410 	.word	0x40020410
 8106820:	40020428 	.word	0x40020428
 8106824:	40020440 	.word	0x40020440
 8106828:	40020458 	.word	0x40020458
 810682c:	40020470 	.word	0x40020470
 8106830:	40020488 	.word	0x40020488
 8106834:	400204a0 	.word	0x400204a0
 8106838:	400204b8 	.word	0x400204b8

0810683c <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 810683c:	b480      	push	{r7}
 810683e:	b083      	sub	sp, #12
 8106840:	af00      	add	r7, sp, #0
 8106842:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8106844:	687b      	ldr	r3, [r7, #4]
 8106846:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 810684a:	b2db      	uxtb	r3, r3
}
 810684c:	4618      	mov	r0, r3
 810684e:	370c      	adds	r7, #12
 8106850:	46bd      	mov	sp, r7
 8106852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106856:	4770      	bx	lr

08106858 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8106858:	b480      	push	{r7}
 810685a:	b083      	sub	sp, #12
 810685c:	af00      	add	r7, sp, #0
 810685e:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8106860:	687b      	ldr	r3, [r7, #4]
 8106862:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8106864:	4618      	mov	r0, r3
 8106866:	370c      	adds	r7, #12
 8106868:	46bd      	mov	sp, r7
 810686a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810686e:	4770      	bx	lr

08106870 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8106870:	b480      	push	{r7}
 8106872:	b087      	sub	sp, #28
 8106874:	af00      	add	r7, sp, #0
 8106876:	60f8      	str	r0, [r7, #12]
 8106878:	60b9      	str	r1, [r7, #8]
 810687a:	607a      	str	r2, [r7, #4]
 810687c:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 810687e:	68fb      	ldr	r3, [r7, #12]
 8106880:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8106882:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8106884:	68fb      	ldr	r3, [r7, #12]
 8106886:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8106888:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 810688a:	68fb      	ldr	r3, [r7, #12]
 810688c:	681b      	ldr	r3, [r3, #0]
 810688e:	4a84      	ldr	r2, [pc, #528]	; (8106aa0 <DMA_SetConfig+0x230>)
 8106890:	4293      	cmp	r3, r2
 8106892:	d072      	beq.n	810697a <DMA_SetConfig+0x10a>
 8106894:	68fb      	ldr	r3, [r7, #12]
 8106896:	681b      	ldr	r3, [r3, #0]
 8106898:	4a82      	ldr	r2, [pc, #520]	; (8106aa4 <DMA_SetConfig+0x234>)
 810689a:	4293      	cmp	r3, r2
 810689c:	d06d      	beq.n	810697a <DMA_SetConfig+0x10a>
 810689e:	68fb      	ldr	r3, [r7, #12]
 81068a0:	681b      	ldr	r3, [r3, #0]
 81068a2:	4a81      	ldr	r2, [pc, #516]	; (8106aa8 <DMA_SetConfig+0x238>)
 81068a4:	4293      	cmp	r3, r2
 81068a6:	d068      	beq.n	810697a <DMA_SetConfig+0x10a>
 81068a8:	68fb      	ldr	r3, [r7, #12]
 81068aa:	681b      	ldr	r3, [r3, #0]
 81068ac:	4a7f      	ldr	r2, [pc, #508]	; (8106aac <DMA_SetConfig+0x23c>)
 81068ae:	4293      	cmp	r3, r2
 81068b0:	d063      	beq.n	810697a <DMA_SetConfig+0x10a>
 81068b2:	68fb      	ldr	r3, [r7, #12]
 81068b4:	681b      	ldr	r3, [r3, #0]
 81068b6:	4a7e      	ldr	r2, [pc, #504]	; (8106ab0 <DMA_SetConfig+0x240>)
 81068b8:	4293      	cmp	r3, r2
 81068ba:	d05e      	beq.n	810697a <DMA_SetConfig+0x10a>
 81068bc:	68fb      	ldr	r3, [r7, #12]
 81068be:	681b      	ldr	r3, [r3, #0]
 81068c0:	4a7c      	ldr	r2, [pc, #496]	; (8106ab4 <DMA_SetConfig+0x244>)
 81068c2:	4293      	cmp	r3, r2
 81068c4:	d059      	beq.n	810697a <DMA_SetConfig+0x10a>
 81068c6:	68fb      	ldr	r3, [r7, #12]
 81068c8:	681b      	ldr	r3, [r3, #0]
 81068ca:	4a7b      	ldr	r2, [pc, #492]	; (8106ab8 <DMA_SetConfig+0x248>)
 81068cc:	4293      	cmp	r3, r2
 81068ce:	d054      	beq.n	810697a <DMA_SetConfig+0x10a>
 81068d0:	68fb      	ldr	r3, [r7, #12]
 81068d2:	681b      	ldr	r3, [r3, #0]
 81068d4:	4a79      	ldr	r2, [pc, #484]	; (8106abc <DMA_SetConfig+0x24c>)
 81068d6:	4293      	cmp	r3, r2
 81068d8:	d04f      	beq.n	810697a <DMA_SetConfig+0x10a>
 81068da:	68fb      	ldr	r3, [r7, #12]
 81068dc:	681b      	ldr	r3, [r3, #0]
 81068de:	4a78      	ldr	r2, [pc, #480]	; (8106ac0 <DMA_SetConfig+0x250>)
 81068e0:	4293      	cmp	r3, r2
 81068e2:	d04a      	beq.n	810697a <DMA_SetConfig+0x10a>
 81068e4:	68fb      	ldr	r3, [r7, #12]
 81068e6:	681b      	ldr	r3, [r3, #0]
 81068e8:	4a76      	ldr	r2, [pc, #472]	; (8106ac4 <DMA_SetConfig+0x254>)
 81068ea:	4293      	cmp	r3, r2
 81068ec:	d045      	beq.n	810697a <DMA_SetConfig+0x10a>
 81068ee:	68fb      	ldr	r3, [r7, #12]
 81068f0:	681b      	ldr	r3, [r3, #0]
 81068f2:	4a75      	ldr	r2, [pc, #468]	; (8106ac8 <DMA_SetConfig+0x258>)
 81068f4:	4293      	cmp	r3, r2
 81068f6:	d040      	beq.n	810697a <DMA_SetConfig+0x10a>
 81068f8:	68fb      	ldr	r3, [r7, #12]
 81068fa:	681b      	ldr	r3, [r3, #0]
 81068fc:	4a73      	ldr	r2, [pc, #460]	; (8106acc <DMA_SetConfig+0x25c>)
 81068fe:	4293      	cmp	r3, r2
 8106900:	d03b      	beq.n	810697a <DMA_SetConfig+0x10a>
 8106902:	68fb      	ldr	r3, [r7, #12]
 8106904:	681b      	ldr	r3, [r3, #0]
 8106906:	4a72      	ldr	r2, [pc, #456]	; (8106ad0 <DMA_SetConfig+0x260>)
 8106908:	4293      	cmp	r3, r2
 810690a:	d036      	beq.n	810697a <DMA_SetConfig+0x10a>
 810690c:	68fb      	ldr	r3, [r7, #12]
 810690e:	681b      	ldr	r3, [r3, #0]
 8106910:	4a70      	ldr	r2, [pc, #448]	; (8106ad4 <DMA_SetConfig+0x264>)
 8106912:	4293      	cmp	r3, r2
 8106914:	d031      	beq.n	810697a <DMA_SetConfig+0x10a>
 8106916:	68fb      	ldr	r3, [r7, #12]
 8106918:	681b      	ldr	r3, [r3, #0]
 810691a:	4a6f      	ldr	r2, [pc, #444]	; (8106ad8 <DMA_SetConfig+0x268>)
 810691c:	4293      	cmp	r3, r2
 810691e:	d02c      	beq.n	810697a <DMA_SetConfig+0x10a>
 8106920:	68fb      	ldr	r3, [r7, #12]
 8106922:	681b      	ldr	r3, [r3, #0]
 8106924:	4a6d      	ldr	r2, [pc, #436]	; (8106adc <DMA_SetConfig+0x26c>)
 8106926:	4293      	cmp	r3, r2
 8106928:	d027      	beq.n	810697a <DMA_SetConfig+0x10a>
 810692a:	68fb      	ldr	r3, [r7, #12]
 810692c:	681b      	ldr	r3, [r3, #0]
 810692e:	4a6c      	ldr	r2, [pc, #432]	; (8106ae0 <DMA_SetConfig+0x270>)
 8106930:	4293      	cmp	r3, r2
 8106932:	d022      	beq.n	810697a <DMA_SetConfig+0x10a>
 8106934:	68fb      	ldr	r3, [r7, #12]
 8106936:	681b      	ldr	r3, [r3, #0]
 8106938:	4a6a      	ldr	r2, [pc, #424]	; (8106ae4 <DMA_SetConfig+0x274>)
 810693a:	4293      	cmp	r3, r2
 810693c:	d01d      	beq.n	810697a <DMA_SetConfig+0x10a>
 810693e:	68fb      	ldr	r3, [r7, #12]
 8106940:	681b      	ldr	r3, [r3, #0]
 8106942:	4a69      	ldr	r2, [pc, #420]	; (8106ae8 <DMA_SetConfig+0x278>)
 8106944:	4293      	cmp	r3, r2
 8106946:	d018      	beq.n	810697a <DMA_SetConfig+0x10a>
 8106948:	68fb      	ldr	r3, [r7, #12]
 810694a:	681b      	ldr	r3, [r3, #0]
 810694c:	4a67      	ldr	r2, [pc, #412]	; (8106aec <DMA_SetConfig+0x27c>)
 810694e:	4293      	cmp	r3, r2
 8106950:	d013      	beq.n	810697a <DMA_SetConfig+0x10a>
 8106952:	68fb      	ldr	r3, [r7, #12]
 8106954:	681b      	ldr	r3, [r3, #0]
 8106956:	4a66      	ldr	r2, [pc, #408]	; (8106af0 <DMA_SetConfig+0x280>)
 8106958:	4293      	cmp	r3, r2
 810695a:	d00e      	beq.n	810697a <DMA_SetConfig+0x10a>
 810695c:	68fb      	ldr	r3, [r7, #12]
 810695e:	681b      	ldr	r3, [r3, #0]
 8106960:	4a64      	ldr	r2, [pc, #400]	; (8106af4 <DMA_SetConfig+0x284>)
 8106962:	4293      	cmp	r3, r2
 8106964:	d009      	beq.n	810697a <DMA_SetConfig+0x10a>
 8106966:	68fb      	ldr	r3, [r7, #12]
 8106968:	681b      	ldr	r3, [r3, #0]
 810696a:	4a63      	ldr	r2, [pc, #396]	; (8106af8 <DMA_SetConfig+0x288>)
 810696c:	4293      	cmp	r3, r2
 810696e:	d004      	beq.n	810697a <DMA_SetConfig+0x10a>
 8106970:	68fb      	ldr	r3, [r7, #12]
 8106972:	681b      	ldr	r3, [r3, #0]
 8106974:	4a61      	ldr	r2, [pc, #388]	; (8106afc <DMA_SetConfig+0x28c>)
 8106976:	4293      	cmp	r3, r2
 8106978:	d101      	bne.n	810697e <DMA_SetConfig+0x10e>
 810697a:	2301      	movs	r3, #1
 810697c:	e000      	b.n	8106980 <DMA_SetConfig+0x110>
 810697e:	2300      	movs	r3, #0
 8106980:	2b00      	cmp	r3, #0
 8106982:	d00d      	beq.n	81069a0 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8106984:	68fb      	ldr	r3, [r7, #12]
 8106986:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8106988:	68fa      	ldr	r2, [r7, #12]
 810698a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 810698c:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 810698e:	68fb      	ldr	r3, [r7, #12]
 8106990:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8106992:	2b00      	cmp	r3, #0
 8106994:	d004      	beq.n	81069a0 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8106996:	68fb      	ldr	r3, [r7, #12]
 8106998:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 810699a:	68fa      	ldr	r2, [r7, #12]
 810699c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 810699e:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 81069a0:	68fb      	ldr	r3, [r7, #12]
 81069a2:	681b      	ldr	r3, [r3, #0]
 81069a4:	4a3e      	ldr	r2, [pc, #248]	; (8106aa0 <DMA_SetConfig+0x230>)
 81069a6:	4293      	cmp	r3, r2
 81069a8:	d04a      	beq.n	8106a40 <DMA_SetConfig+0x1d0>
 81069aa:	68fb      	ldr	r3, [r7, #12]
 81069ac:	681b      	ldr	r3, [r3, #0]
 81069ae:	4a3d      	ldr	r2, [pc, #244]	; (8106aa4 <DMA_SetConfig+0x234>)
 81069b0:	4293      	cmp	r3, r2
 81069b2:	d045      	beq.n	8106a40 <DMA_SetConfig+0x1d0>
 81069b4:	68fb      	ldr	r3, [r7, #12]
 81069b6:	681b      	ldr	r3, [r3, #0]
 81069b8:	4a3b      	ldr	r2, [pc, #236]	; (8106aa8 <DMA_SetConfig+0x238>)
 81069ba:	4293      	cmp	r3, r2
 81069bc:	d040      	beq.n	8106a40 <DMA_SetConfig+0x1d0>
 81069be:	68fb      	ldr	r3, [r7, #12]
 81069c0:	681b      	ldr	r3, [r3, #0]
 81069c2:	4a3a      	ldr	r2, [pc, #232]	; (8106aac <DMA_SetConfig+0x23c>)
 81069c4:	4293      	cmp	r3, r2
 81069c6:	d03b      	beq.n	8106a40 <DMA_SetConfig+0x1d0>
 81069c8:	68fb      	ldr	r3, [r7, #12]
 81069ca:	681b      	ldr	r3, [r3, #0]
 81069cc:	4a38      	ldr	r2, [pc, #224]	; (8106ab0 <DMA_SetConfig+0x240>)
 81069ce:	4293      	cmp	r3, r2
 81069d0:	d036      	beq.n	8106a40 <DMA_SetConfig+0x1d0>
 81069d2:	68fb      	ldr	r3, [r7, #12]
 81069d4:	681b      	ldr	r3, [r3, #0]
 81069d6:	4a37      	ldr	r2, [pc, #220]	; (8106ab4 <DMA_SetConfig+0x244>)
 81069d8:	4293      	cmp	r3, r2
 81069da:	d031      	beq.n	8106a40 <DMA_SetConfig+0x1d0>
 81069dc:	68fb      	ldr	r3, [r7, #12]
 81069de:	681b      	ldr	r3, [r3, #0]
 81069e0:	4a35      	ldr	r2, [pc, #212]	; (8106ab8 <DMA_SetConfig+0x248>)
 81069e2:	4293      	cmp	r3, r2
 81069e4:	d02c      	beq.n	8106a40 <DMA_SetConfig+0x1d0>
 81069e6:	68fb      	ldr	r3, [r7, #12]
 81069e8:	681b      	ldr	r3, [r3, #0]
 81069ea:	4a34      	ldr	r2, [pc, #208]	; (8106abc <DMA_SetConfig+0x24c>)
 81069ec:	4293      	cmp	r3, r2
 81069ee:	d027      	beq.n	8106a40 <DMA_SetConfig+0x1d0>
 81069f0:	68fb      	ldr	r3, [r7, #12]
 81069f2:	681b      	ldr	r3, [r3, #0]
 81069f4:	4a32      	ldr	r2, [pc, #200]	; (8106ac0 <DMA_SetConfig+0x250>)
 81069f6:	4293      	cmp	r3, r2
 81069f8:	d022      	beq.n	8106a40 <DMA_SetConfig+0x1d0>
 81069fa:	68fb      	ldr	r3, [r7, #12]
 81069fc:	681b      	ldr	r3, [r3, #0]
 81069fe:	4a31      	ldr	r2, [pc, #196]	; (8106ac4 <DMA_SetConfig+0x254>)
 8106a00:	4293      	cmp	r3, r2
 8106a02:	d01d      	beq.n	8106a40 <DMA_SetConfig+0x1d0>
 8106a04:	68fb      	ldr	r3, [r7, #12]
 8106a06:	681b      	ldr	r3, [r3, #0]
 8106a08:	4a2f      	ldr	r2, [pc, #188]	; (8106ac8 <DMA_SetConfig+0x258>)
 8106a0a:	4293      	cmp	r3, r2
 8106a0c:	d018      	beq.n	8106a40 <DMA_SetConfig+0x1d0>
 8106a0e:	68fb      	ldr	r3, [r7, #12]
 8106a10:	681b      	ldr	r3, [r3, #0]
 8106a12:	4a2e      	ldr	r2, [pc, #184]	; (8106acc <DMA_SetConfig+0x25c>)
 8106a14:	4293      	cmp	r3, r2
 8106a16:	d013      	beq.n	8106a40 <DMA_SetConfig+0x1d0>
 8106a18:	68fb      	ldr	r3, [r7, #12]
 8106a1a:	681b      	ldr	r3, [r3, #0]
 8106a1c:	4a2c      	ldr	r2, [pc, #176]	; (8106ad0 <DMA_SetConfig+0x260>)
 8106a1e:	4293      	cmp	r3, r2
 8106a20:	d00e      	beq.n	8106a40 <DMA_SetConfig+0x1d0>
 8106a22:	68fb      	ldr	r3, [r7, #12]
 8106a24:	681b      	ldr	r3, [r3, #0]
 8106a26:	4a2b      	ldr	r2, [pc, #172]	; (8106ad4 <DMA_SetConfig+0x264>)
 8106a28:	4293      	cmp	r3, r2
 8106a2a:	d009      	beq.n	8106a40 <DMA_SetConfig+0x1d0>
 8106a2c:	68fb      	ldr	r3, [r7, #12]
 8106a2e:	681b      	ldr	r3, [r3, #0]
 8106a30:	4a29      	ldr	r2, [pc, #164]	; (8106ad8 <DMA_SetConfig+0x268>)
 8106a32:	4293      	cmp	r3, r2
 8106a34:	d004      	beq.n	8106a40 <DMA_SetConfig+0x1d0>
 8106a36:	68fb      	ldr	r3, [r7, #12]
 8106a38:	681b      	ldr	r3, [r3, #0]
 8106a3a:	4a28      	ldr	r2, [pc, #160]	; (8106adc <DMA_SetConfig+0x26c>)
 8106a3c:	4293      	cmp	r3, r2
 8106a3e:	d101      	bne.n	8106a44 <DMA_SetConfig+0x1d4>
 8106a40:	2301      	movs	r3, #1
 8106a42:	e000      	b.n	8106a46 <DMA_SetConfig+0x1d6>
 8106a44:	2300      	movs	r3, #0
 8106a46:	2b00      	cmp	r3, #0
 8106a48:	d05a      	beq.n	8106b00 <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8106a4a:	68fb      	ldr	r3, [r7, #12]
 8106a4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8106a4e:	f003 031f 	and.w	r3, r3, #31
 8106a52:	223f      	movs	r2, #63	; 0x3f
 8106a54:	409a      	lsls	r2, r3
 8106a56:	697b      	ldr	r3, [r7, #20]
 8106a58:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8106a5a:	68fb      	ldr	r3, [r7, #12]
 8106a5c:	681b      	ldr	r3, [r3, #0]
 8106a5e:	681a      	ldr	r2, [r3, #0]
 8106a60:	68fb      	ldr	r3, [r7, #12]
 8106a62:	681b      	ldr	r3, [r3, #0]
 8106a64:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8106a68:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8106a6a:	68fb      	ldr	r3, [r7, #12]
 8106a6c:	681b      	ldr	r3, [r3, #0]
 8106a6e:	683a      	ldr	r2, [r7, #0]
 8106a70:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8106a72:	68fb      	ldr	r3, [r7, #12]
 8106a74:	689b      	ldr	r3, [r3, #8]
 8106a76:	2b40      	cmp	r3, #64	; 0x40
 8106a78:	d108      	bne.n	8106a8c <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8106a7a:	68fb      	ldr	r3, [r7, #12]
 8106a7c:	681b      	ldr	r3, [r3, #0]
 8106a7e:	687a      	ldr	r2, [r7, #4]
 8106a80:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8106a82:	68fb      	ldr	r3, [r7, #12]
 8106a84:	681b      	ldr	r3, [r3, #0]
 8106a86:	68ba      	ldr	r2, [r7, #8]
 8106a88:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8106a8a:	e087      	b.n	8106b9c <DMA_SetConfig+0x32c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8106a8c:	68fb      	ldr	r3, [r7, #12]
 8106a8e:	681b      	ldr	r3, [r3, #0]
 8106a90:	68ba      	ldr	r2, [r7, #8]
 8106a92:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8106a94:	68fb      	ldr	r3, [r7, #12]
 8106a96:	681b      	ldr	r3, [r3, #0]
 8106a98:	687a      	ldr	r2, [r7, #4]
 8106a9a:	60da      	str	r2, [r3, #12]
}
 8106a9c:	e07e      	b.n	8106b9c <DMA_SetConfig+0x32c>
 8106a9e:	bf00      	nop
 8106aa0:	40020010 	.word	0x40020010
 8106aa4:	40020028 	.word	0x40020028
 8106aa8:	40020040 	.word	0x40020040
 8106aac:	40020058 	.word	0x40020058
 8106ab0:	40020070 	.word	0x40020070
 8106ab4:	40020088 	.word	0x40020088
 8106ab8:	400200a0 	.word	0x400200a0
 8106abc:	400200b8 	.word	0x400200b8
 8106ac0:	40020410 	.word	0x40020410
 8106ac4:	40020428 	.word	0x40020428
 8106ac8:	40020440 	.word	0x40020440
 8106acc:	40020458 	.word	0x40020458
 8106ad0:	40020470 	.word	0x40020470
 8106ad4:	40020488 	.word	0x40020488
 8106ad8:	400204a0 	.word	0x400204a0
 8106adc:	400204b8 	.word	0x400204b8
 8106ae0:	58025408 	.word	0x58025408
 8106ae4:	5802541c 	.word	0x5802541c
 8106ae8:	58025430 	.word	0x58025430
 8106aec:	58025444 	.word	0x58025444
 8106af0:	58025458 	.word	0x58025458
 8106af4:	5802546c 	.word	0x5802546c
 8106af8:	58025480 	.word	0x58025480
 8106afc:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8106b00:	68fb      	ldr	r3, [r7, #12]
 8106b02:	681b      	ldr	r3, [r3, #0]
 8106b04:	4a28      	ldr	r2, [pc, #160]	; (8106ba8 <DMA_SetConfig+0x338>)
 8106b06:	4293      	cmp	r3, r2
 8106b08:	d022      	beq.n	8106b50 <DMA_SetConfig+0x2e0>
 8106b0a:	68fb      	ldr	r3, [r7, #12]
 8106b0c:	681b      	ldr	r3, [r3, #0]
 8106b0e:	4a27      	ldr	r2, [pc, #156]	; (8106bac <DMA_SetConfig+0x33c>)
 8106b10:	4293      	cmp	r3, r2
 8106b12:	d01d      	beq.n	8106b50 <DMA_SetConfig+0x2e0>
 8106b14:	68fb      	ldr	r3, [r7, #12]
 8106b16:	681b      	ldr	r3, [r3, #0]
 8106b18:	4a25      	ldr	r2, [pc, #148]	; (8106bb0 <DMA_SetConfig+0x340>)
 8106b1a:	4293      	cmp	r3, r2
 8106b1c:	d018      	beq.n	8106b50 <DMA_SetConfig+0x2e0>
 8106b1e:	68fb      	ldr	r3, [r7, #12]
 8106b20:	681b      	ldr	r3, [r3, #0]
 8106b22:	4a24      	ldr	r2, [pc, #144]	; (8106bb4 <DMA_SetConfig+0x344>)
 8106b24:	4293      	cmp	r3, r2
 8106b26:	d013      	beq.n	8106b50 <DMA_SetConfig+0x2e0>
 8106b28:	68fb      	ldr	r3, [r7, #12]
 8106b2a:	681b      	ldr	r3, [r3, #0]
 8106b2c:	4a22      	ldr	r2, [pc, #136]	; (8106bb8 <DMA_SetConfig+0x348>)
 8106b2e:	4293      	cmp	r3, r2
 8106b30:	d00e      	beq.n	8106b50 <DMA_SetConfig+0x2e0>
 8106b32:	68fb      	ldr	r3, [r7, #12]
 8106b34:	681b      	ldr	r3, [r3, #0]
 8106b36:	4a21      	ldr	r2, [pc, #132]	; (8106bbc <DMA_SetConfig+0x34c>)
 8106b38:	4293      	cmp	r3, r2
 8106b3a:	d009      	beq.n	8106b50 <DMA_SetConfig+0x2e0>
 8106b3c:	68fb      	ldr	r3, [r7, #12]
 8106b3e:	681b      	ldr	r3, [r3, #0]
 8106b40:	4a1f      	ldr	r2, [pc, #124]	; (8106bc0 <DMA_SetConfig+0x350>)
 8106b42:	4293      	cmp	r3, r2
 8106b44:	d004      	beq.n	8106b50 <DMA_SetConfig+0x2e0>
 8106b46:	68fb      	ldr	r3, [r7, #12]
 8106b48:	681b      	ldr	r3, [r3, #0]
 8106b4a:	4a1e      	ldr	r2, [pc, #120]	; (8106bc4 <DMA_SetConfig+0x354>)
 8106b4c:	4293      	cmp	r3, r2
 8106b4e:	d101      	bne.n	8106b54 <DMA_SetConfig+0x2e4>
 8106b50:	2301      	movs	r3, #1
 8106b52:	e000      	b.n	8106b56 <DMA_SetConfig+0x2e6>
 8106b54:	2300      	movs	r3, #0
 8106b56:	2b00      	cmp	r3, #0
 8106b58:	d020      	beq.n	8106b9c <DMA_SetConfig+0x32c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8106b5a:	68fb      	ldr	r3, [r7, #12]
 8106b5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8106b5e:	f003 031f 	and.w	r3, r3, #31
 8106b62:	2201      	movs	r2, #1
 8106b64:	409a      	lsls	r2, r3
 8106b66:	693b      	ldr	r3, [r7, #16]
 8106b68:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8106b6a:	68fb      	ldr	r3, [r7, #12]
 8106b6c:	681b      	ldr	r3, [r3, #0]
 8106b6e:	683a      	ldr	r2, [r7, #0]
 8106b70:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8106b72:	68fb      	ldr	r3, [r7, #12]
 8106b74:	689b      	ldr	r3, [r3, #8]
 8106b76:	2b40      	cmp	r3, #64	; 0x40
 8106b78:	d108      	bne.n	8106b8c <DMA_SetConfig+0x31c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8106b7a:	68fb      	ldr	r3, [r7, #12]
 8106b7c:	681b      	ldr	r3, [r3, #0]
 8106b7e:	687a      	ldr	r2, [r7, #4]
 8106b80:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8106b82:	68fb      	ldr	r3, [r7, #12]
 8106b84:	681b      	ldr	r3, [r3, #0]
 8106b86:	68ba      	ldr	r2, [r7, #8]
 8106b88:	60da      	str	r2, [r3, #12]
}
 8106b8a:	e007      	b.n	8106b9c <DMA_SetConfig+0x32c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8106b8c:	68fb      	ldr	r3, [r7, #12]
 8106b8e:	681b      	ldr	r3, [r3, #0]
 8106b90:	68ba      	ldr	r2, [r7, #8]
 8106b92:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8106b94:	68fb      	ldr	r3, [r7, #12]
 8106b96:	681b      	ldr	r3, [r3, #0]
 8106b98:	687a      	ldr	r2, [r7, #4]
 8106b9a:	60da      	str	r2, [r3, #12]
}
 8106b9c:	bf00      	nop
 8106b9e:	371c      	adds	r7, #28
 8106ba0:	46bd      	mov	sp, r7
 8106ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106ba6:	4770      	bx	lr
 8106ba8:	58025408 	.word	0x58025408
 8106bac:	5802541c 	.word	0x5802541c
 8106bb0:	58025430 	.word	0x58025430
 8106bb4:	58025444 	.word	0x58025444
 8106bb8:	58025458 	.word	0x58025458
 8106bbc:	5802546c 	.word	0x5802546c
 8106bc0:	58025480 	.word	0x58025480
 8106bc4:	58025494 	.word	0x58025494

08106bc8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8106bc8:	b480      	push	{r7}
 8106bca:	b085      	sub	sp, #20
 8106bcc:	af00      	add	r7, sp, #0
 8106bce:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8106bd0:	687b      	ldr	r3, [r7, #4]
 8106bd2:	681b      	ldr	r3, [r3, #0]
 8106bd4:	4a43      	ldr	r2, [pc, #268]	; (8106ce4 <DMA_CalcBaseAndBitshift+0x11c>)
 8106bd6:	4293      	cmp	r3, r2
 8106bd8:	d04a      	beq.n	8106c70 <DMA_CalcBaseAndBitshift+0xa8>
 8106bda:	687b      	ldr	r3, [r7, #4]
 8106bdc:	681b      	ldr	r3, [r3, #0]
 8106bde:	4a42      	ldr	r2, [pc, #264]	; (8106ce8 <DMA_CalcBaseAndBitshift+0x120>)
 8106be0:	4293      	cmp	r3, r2
 8106be2:	d045      	beq.n	8106c70 <DMA_CalcBaseAndBitshift+0xa8>
 8106be4:	687b      	ldr	r3, [r7, #4]
 8106be6:	681b      	ldr	r3, [r3, #0]
 8106be8:	4a40      	ldr	r2, [pc, #256]	; (8106cec <DMA_CalcBaseAndBitshift+0x124>)
 8106bea:	4293      	cmp	r3, r2
 8106bec:	d040      	beq.n	8106c70 <DMA_CalcBaseAndBitshift+0xa8>
 8106bee:	687b      	ldr	r3, [r7, #4]
 8106bf0:	681b      	ldr	r3, [r3, #0]
 8106bf2:	4a3f      	ldr	r2, [pc, #252]	; (8106cf0 <DMA_CalcBaseAndBitshift+0x128>)
 8106bf4:	4293      	cmp	r3, r2
 8106bf6:	d03b      	beq.n	8106c70 <DMA_CalcBaseAndBitshift+0xa8>
 8106bf8:	687b      	ldr	r3, [r7, #4]
 8106bfa:	681b      	ldr	r3, [r3, #0]
 8106bfc:	4a3d      	ldr	r2, [pc, #244]	; (8106cf4 <DMA_CalcBaseAndBitshift+0x12c>)
 8106bfe:	4293      	cmp	r3, r2
 8106c00:	d036      	beq.n	8106c70 <DMA_CalcBaseAndBitshift+0xa8>
 8106c02:	687b      	ldr	r3, [r7, #4]
 8106c04:	681b      	ldr	r3, [r3, #0]
 8106c06:	4a3c      	ldr	r2, [pc, #240]	; (8106cf8 <DMA_CalcBaseAndBitshift+0x130>)
 8106c08:	4293      	cmp	r3, r2
 8106c0a:	d031      	beq.n	8106c70 <DMA_CalcBaseAndBitshift+0xa8>
 8106c0c:	687b      	ldr	r3, [r7, #4]
 8106c0e:	681b      	ldr	r3, [r3, #0]
 8106c10:	4a3a      	ldr	r2, [pc, #232]	; (8106cfc <DMA_CalcBaseAndBitshift+0x134>)
 8106c12:	4293      	cmp	r3, r2
 8106c14:	d02c      	beq.n	8106c70 <DMA_CalcBaseAndBitshift+0xa8>
 8106c16:	687b      	ldr	r3, [r7, #4]
 8106c18:	681b      	ldr	r3, [r3, #0]
 8106c1a:	4a39      	ldr	r2, [pc, #228]	; (8106d00 <DMA_CalcBaseAndBitshift+0x138>)
 8106c1c:	4293      	cmp	r3, r2
 8106c1e:	d027      	beq.n	8106c70 <DMA_CalcBaseAndBitshift+0xa8>
 8106c20:	687b      	ldr	r3, [r7, #4]
 8106c22:	681b      	ldr	r3, [r3, #0]
 8106c24:	4a37      	ldr	r2, [pc, #220]	; (8106d04 <DMA_CalcBaseAndBitshift+0x13c>)
 8106c26:	4293      	cmp	r3, r2
 8106c28:	d022      	beq.n	8106c70 <DMA_CalcBaseAndBitshift+0xa8>
 8106c2a:	687b      	ldr	r3, [r7, #4]
 8106c2c:	681b      	ldr	r3, [r3, #0]
 8106c2e:	4a36      	ldr	r2, [pc, #216]	; (8106d08 <DMA_CalcBaseAndBitshift+0x140>)
 8106c30:	4293      	cmp	r3, r2
 8106c32:	d01d      	beq.n	8106c70 <DMA_CalcBaseAndBitshift+0xa8>
 8106c34:	687b      	ldr	r3, [r7, #4]
 8106c36:	681b      	ldr	r3, [r3, #0]
 8106c38:	4a34      	ldr	r2, [pc, #208]	; (8106d0c <DMA_CalcBaseAndBitshift+0x144>)
 8106c3a:	4293      	cmp	r3, r2
 8106c3c:	d018      	beq.n	8106c70 <DMA_CalcBaseAndBitshift+0xa8>
 8106c3e:	687b      	ldr	r3, [r7, #4]
 8106c40:	681b      	ldr	r3, [r3, #0]
 8106c42:	4a33      	ldr	r2, [pc, #204]	; (8106d10 <DMA_CalcBaseAndBitshift+0x148>)
 8106c44:	4293      	cmp	r3, r2
 8106c46:	d013      	beq.n	8106c70 <DMA_CalcBaseAndBitshift+0xa8>
 8106c48:	687b      	ldr	r3, [r7, #4]
 8106c4a:	681b      	ldr	r3, [r3, #0]
 8106c4c:	4a31      	ldr	r2, [pc, #196]	; (8106d14 <DMA_CalcBaseAndBitshift+0x14c>)
 8106c4e:	4293      	cmp	r3, r2
 8106c50:	d00e      	beq.n	8106c70 <DMA_CalcBaseAndBitshift+0xa8>
 8106c52:	687b      	ldr	r3, [r7, #4]
 8106c54:	681b      	ldr	r3, [r3, #0]
 8106c56:	4a30      	ldr	r2, [pc, #192]	; (8106d18 <DMA_CalcBaseAndBitshift+0x150>)
 8106c58:	4293      	cmp	r3, r2
 8106c5a:	d009      	beq.n	8106c70 <DMA_CalcBaseAndBitshift+0xa8>
 8106c5c:	687b      	ldr	r3, [r7, #4]
 8106c5e:	681b      	ldr	r3, [r3, #0]
 8106c60:	4a2e      	ldr	r2, [pc, #184]	; (8106d1c <DMA_CalcBaseAndBitshift+0x154>)
 8106c62:	4293      	cmp	r3, r2
 8106c64:	d004      	beq.n	8106c70 <DMA_CalcBaseAndBitshift+0xa8>
 8106c66:	687b      	ldr	r3, [r7, #4]
 8106c68:	681b      	ldr	r3, [r3, #0]
 8106c6a:	4a2d      	ldr	r2, [pc, #180]	; (8106d20 <DMA_CalcBaseAndBitshift+0x158>)
 8106c6c:	4293      	cmp	r3, r2
 8106c6e:	d101      	bne.n	8106c74 <DMA_CalcBaseAndBitshift+0xac>
 8106c70:	2301      	movs	r3, #1
 8106c72:	e000      	b.n	8106c76 <DMA_CalcBaseAndBitshift+0xae>
 8106c74:	2300      	movs	r3, #0
 8106c76:	2b00      	cmp	r3, #0
 8106c78:	d026      	beq.n	8106cc8 <DMA_CalcBaseAndBitshift+0x100>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8106c7a:	687b      	ldr	r3, [r7, #4]
 8106c7c:	681b      	ldr	r3, [r3, #0]
 8106c7e:	b2db      	uxtb	r3, r3
 8106c80:	3b10      	subs	r3, #16
 8106c82:	4a28      	ldr	r2, [pc, #160]	; (8106d24 <DMA_CalcBaseAndBitshift+0x15c>)
 8106c84:	fba2 2303 	umull	r2, r3, r2, r3
 8106c88:	091b      	lsrs	r3, r3, #4
 8106c8a:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8106c8c:	68fb      	ldr	r3, [r7, #12]
 8106c8e:	f003 0307 	and.w	r3, r3, #7
 8106c92:	4a25      	ldr	r2, [pc, #148]	; (8106d28 <DMA_CalcBaseAndBitshift+0x160>)
 8106c94:	5cd3      	ldrb	r3, [r2, r3]
 8106c96:	461a      	mov	r2, r3
 8106c98:	687b      	ldr	r3, [r7, #4]
 8106c9a:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8106c9c:	68fb      	ldr	r3, [r7, #12]
 8106c9e:	2b03      	cmp	r3, #3
 8106ca0:	d909      	bls.n	8106cb6 <DMA_CalcBaseAndBitshift+0xee>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8106ca2:	687b      	ldr	r3, [r7, #4]
 8106ca4:	681b      	ldr	r3, [r3, #0]
 8106ca6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8106caa:	f023 0303 	bic.w	r3, r3, #3
 8106cae:	1d1a      	adds	r2, r3, #4
 8106cb0:	687b      	ldr	r3, [r7, #4]
 8106cb2:	659a      	str	r2, [r3, #88]	; 0x58
 8106cb4:	e00e      	b.n	8106cd4 <DMA_CalcBaseAndBitshift+0x10c>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8106cb6:	687b      	ldr	r3, [r7, #4]
 8106cb8:	681b      	ldr	r3, [r3, #0]
 8106cba:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8106cbe:	f023 0303 	bic.w	r3, r3, #3
 8106cc2:	687a      	ldr	r2, [r7, #4]
 8106cc4:	6593      	str	r3, [r2, #88]	; 0x58
 8106cc6:	e005      	b.n	8106cd4 <DMA_CalcBaseAndBitshift+0x10c>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8106cc8:	687b      	ldr	r3, [r7, #4]
 8106cca:	681b      	ldr	r3, [r3, #0]
 8106ccc:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8106cd0:	687b      	ldr	r3, [r7, #4]
 8106cd2:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8106cd4:	687b      	ldr	r3, [r7, #4]
 8106cd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8106cd8:	4618      	mov	r0, r3
 8106cda:	3714      	adds	r7, #20
 8106cdc:	46bd      	mov	sp, r7
 8106cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106ce2:	4770      	bx	lr
 8106ce4:	40020010 	.word	0x40020010
 8106ce8:	40020028 	.word	0x40020028
 8106cec:	40020040 	.word	0x40020040
 8106cf0:	40020058 	.word	0x40020058
 8106cf4:	40020070 	.word	0x40020070
 8106cf8:	40020088 	.word	0x40020088
 8106cfc:	400200a0 	.word	0x400200a0
 8106d00:	400200b8 	.word	0x400200b8
 8106d04:	40020410 	.word	0x40020410
 8106d08:	40020428 	.word	0x40020428
 8106d0c:	40020440 	.word	0x40020440
 8106d10:	40020458 	.word	0x40020458
 8106d14:	40020470 	.word	0x40020470
 8106d18:	40020488 	.word	0x40020488
 8106d1c:	400204a0 	.word	0x400204a0
 8106d20:	400204b8 	.word	0x400204b8
 8106d24:	aaaaaaab 	.word	0xaaaaaaab
 8106d28:	0811ba24 	.word	0x0811ba24

08106d2c <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8106d2c:	b480      	push	{r7}
 8106d2e:	b085      	sub	sp, #20
 8106d30:	af00      	add	r7, sp, #0
 8106d32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8106d34:	2300      	movs	r3, #0
 8106d36:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8106d38:	687b      	ldr	r3, [r7, #4]
 8106d3a:	699b      	ldr	r3, [r3, #24]
 8106d3c:	2b00      	cmp	r3, #0
 8106d3e:	d120      	bne.n	8106d82 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8106d40:	687b      	ldr	r3, [r7, #4]
 8106d42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8106d44:	2b03      	cmp	r3, #3
 8106d46:	d858      	bhi.n	8106dfa <DMA_CheckFifoParam+0xce>
 8106d48:	a201      	add	r2, pc, #4	; (adr r2, 8106d50 <DMA_CheckFifoParam+0x24>)
 8106d4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8106d4e:	bf00      	nop
 8106d50:	08106d61 	.word	0x08106d61
 8106d54:	08106d73 	.word	0x08106d73
 8106d58:	08106d61 	.word	0x08106d61
 8106d5c:	08106dfb 	.word	0x08106dfb
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8106d60:	687b      	ldr	r3, [r7, #4]
 8106d62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8106d64:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8106d68:	2b00      	cmp	r3, #0
 8106d6a:	d048      	beq.n	8106dfe <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8106d6c:	2301      	movs	r3, #1
 8106d6e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8106d70:	e045      	b.n	8106dfe <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8106d72:	687b      	ldr	r3, [r7, #4]
 8106d74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8106d76:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8106d7a:	d142      	bne.n	8106e02 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8106d7c:	2301      	movs	r3, #1
 8106d7e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8106d80:	e03f      	b.n	8106e02 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8106d82:	687b      	ldr	r3, [r7, #4]
 8106d84:	699b      	ldr	r3, [r3, #24]
 8106d86:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8106d8a:	d123      	bne.n	8106dd4 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8106d8c:	687b      	ldr	r3, [r7, #4]
 8106d8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8106d90:	2b03      	cmp	r3, #3
 8106d92:	d838      	bhi.n	8106e06 <DMA_CheckFifoParam+0xda>
 8106d94:	a201      	add	r2, pc, #4	; (adr r2, 8106d9c <DMA_CheckFifoParam+0x70>)
 8106d96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8106d9a:	bf00      	nop
 8106d9c:	08106dad 	.word	0x08106dad
 8106da0:	08106db3 	.word	0x08106db3
 8106da4:	08106dad 	.word	0x08106dad
 8106da8:	08106dc5 	.word	0x08106dc5
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8106dac:	2301      	movs	r3, #1
 8106dae:	73fb      	strb	r3, [r7, #15]
        break;
 8106db0:	e030      	b.n	8106e14 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8106db2:	687b      	ldr	r3, [r7, #4]
 8106db4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8106db6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8106dba:	2b00      	cmp	r3, #0
 8106dbc:	d025      	beq.n	8106e0a <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8106dbe:	2301      	movs	r3, #1
 8106dc0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8106dc2:	e022      	b.n	8106e0a <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8106dc4:	687b      	ldr	r3, [r7, #4]
 8106dc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8106dc8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8106dcc:	d11f      	bne.n	8106e0e <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8106dce:	2301      	movs	r3, #1
 8106dd0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8106dd2:	e01c      	b.n	8106e0e <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8106dd4:	687b      	ldr	r3, [r7, #4]
 8106dd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8106dd8:	2b02      	cmp	r3, #2
 8106dda:	d902      	bls.n	8106de2 <DMA_CheckFifoParam+0xb6>
 8106ddc:	2b03      	cmp	r3, #3
 8106dde:	d003      	beq.n	8106de8 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8106de0:	e018      	b.n	8106e14 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8106de2:	2301      	movs	r3, #1
 8106de4:	73fb      	strb	r3, [r7, #15]
        break;
 8106de6:	e015      	b.n	8106e14 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8106de8:	687b      	ldr	r3, [r7, #4]
 8106dea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8106dec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8106df0:	2b00      	cmp	r3, #0
 8106df2:	d00e      	beq.n	8106e12 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8106df4:	2301      	movs	r3, #1
 8106df6:	73fb      	strb	r3, [r7, #15]
    break;
 8106df8:	e00b      	b.n	8106e12 <DMA_CheckFifoParam+0xe6>
        break;
 8106dfa:	bf00      	nop
 8106dfc:	e00a      	b.n	8106e14 <DMA_CheckFifoParam+0xe8>
        break;
 8106dfe:	bf00      	nop
 8106e00:	e008      	b.n	8106e14 <DMA_CheckFifoParam+0xe8>
        break;
 8106e02:	bf00      	nop
 8106e04:	e006      	b.n	8106e14 <DMA_CheckFifoParam+0xe8>
        break;
 8106e06:	bf00      	nop
 8106e08:	e004      	b.n	8106e14 <DMA_CheckFifoParam+0xe8>
        break;
 8106e0a:	bf00      	nop
 8106e0c:	e002      	b.n	8106e14 <DMA_CheckFifoParam+0xe8>
        break;
 8106e0e:	bf00      	nop
 8106e10:	e000      	b.n	8106e14 <DMA_CheckFifoParam+0xe8>
    break;
 8106e12:	bf00      	nop
    }
  }

  return status;
 8106e14:	7bfb      	ldrb	r3, [r7, #15]
}
 8106e16:	4618      	mov	r0, r3
 8106e18:	3714      	adds	r7, #20
 8106e1a:	46bd      	mov	sp, r7
 8106e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106e20:	4770      	bx	lr
 8106e22:	bf00      	nop

08106e24 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8106e24:	b480      	push	{r7}
 8106e26:	b085      	sub	sp, #20
 8106e28:	af00      	add	r7, sp, #0
 8106e2a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8106e2c:	687b      	ldr	r3, [r7, #4]
 8106e2e:	681b      	ldr	r3, [r3, #0]
 8106e30:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8106e32:	687b      	ldr	r3, [r7, #4]
 8106e34:	681b      	ldr	r3, [r3, #0]
 8106e36:	4a3a      	ldr	r2, [pc, #232]	; (8106f20 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8106e38:	4293      	cmp	r3, r2
 8106e3a:	d022      	beq.n	8106e82 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8106e3c:	687b      	ldr	r3, [r7, #4]
 8106e3e:	681b      	ldr	r3, [r3, #0]
 8106e40:	4a38      	ldr	r2, [pc, #224]	; (8106f24 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8106e42:	4293      	cmp	r3, r2
 8106e44:	d01d      	beq.n	8106e82 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8106e46:	687b      	ldr	r3, [r7, #4]
 8106e48:	681b      	ldr	r3, [r3, #0]
 8106e4a:	4a37      	ldr	r2, [pc, #220]	; (8106f28 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8106e4c:	4293      	cmp	r3, r2
 8106e4e:	d018      	beq.n	8106e82 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8106e50:	687b      	ldr	r3, [r7, #4]
 8106e52:	681b      	ldr	r3, [r3, #0]
 8106e54:	4a35      	ldr	r2, [pc, #212]	; (8106f2c <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8106e56:	4293      	cmp	r3, r2
 8106e58:	d013      	beq.n	8106e82 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8106e5a:	687b      	ldr	r3, [r7, #4]
 8106e5c:	681b      	ldr	r3, [r3, #0]
 8106e5e:	4a34      	ldr	r2, [pc, #208]	; (8106f30 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8106e60:	4293      	cmp	r3, r2
 8106e62:	d00e      	beq.n	8106e82 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8106e64:	687b      	ldr	r3, [r7, #4]
 8106e66:	681b      	ldr	r3, [r3, #0]
 8106e68:	4a32      	ldr	r2, [pc, #200]	; (8106f34 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8106e6a:	4293      	cmp	r3, r2
 8106e6c:	d009      	beq.n	8106e82 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8106e6e:	687b      	ldr	r3, [r7, #4]
 8106e70:	681b      	ldr	r3, [r3, #0]
 8106e72:	4a31      	ldr	r2, [pc, #196]	; (8106f38 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8106e74:	4293      	cmp	r3, r2
 8106e76:	d004      	beq.n	8106e82 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8106e78:	687b      	ldr	r3, [r7, #4]
 8106e7a:	681b      	ldr	r3, [r3, #0]
 8106e7c:	4a2f      	ldr	r2, [pc, #188]	; (8106f3c <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8106e7e:	4293      	cmp	r3, r2
 8106e80:	d101      	bne.n	8106e86 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8106e82:	2301      	movs	r3, #1
 8106e84:	e000      	b.n	8106e88 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8106e86:	2300      	movs	r3, #0
 8106e88:	2b00      	cmp	r3, #0
 8106e8a:	d01c      	beq.n	8106ec6 <DMA_CalcDMAMUXChannelBaseAndMask+0xa2>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8106e8c:	687b      	ldr	r3, [r7, #4]
 8106e8e:	681b      	ldr	r3, [r3, #0]
 8106e90:	b2db      	uxtb	r3, r3
 8106e92:	3b08      	subs	r3, #8
 8106e94:	4a2a      	ldr	r2, [pc, #168]	; (8106f40 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8106e96:	fba2 2303 	umull	r2, r3, r2, r3
 8106e9a:	091b      	lsrs	r3, r3, #4
 8106e9c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8106e9e:	68fb      	ldr	r3, [r7, #12]
 8106ea0:	f103 53b0 	add.w	r3, r3, #369098752	; 0x16000000
 8106ea4:	f503 4316 	add.w	r3, r3, #38400	; 0x9600
 8106ea8:	009b      	lsls	r3, r3, #2
 8106eaa:	461a      	mov	r2, r3
 8106eac:	687b      	ldr	r3, [r7, #4]
 8106eae:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8106eb0:	687b      	ldr	r3, [r7, #4]
 8106eb2:	4a24      	ldr	r2, [pc, #144]	; (8106f44 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8106eb4:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8106eb6:	68fb      	ldr	r3, [r7, #12]
 8106eb8:	f003 031f 	and.w	r3, r3, #31
 8106ebc:	2201      	movs	r2, #1
 8106ebe:	409a      	lsls	r2, r3
 8106ec0:	687b      	ldr	r3, [r7, #4]
 8106ec2:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8106ec4:	e026      	b.n	8106f14 <DMA_CalcDMAMUXChannelBaseAndMask+0xf0>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8106ec6:	687b      	ldr	r3, [r7, #4]
 8106ec8:	681b      	ldr	r3, [r3, #0]
 8106eca:	b2db      	uxtb	r3, r3
 8106ecc:	3b10      	subs	r3, #16
 8106ece:	4a1e      	ldr	r2, [pc, #120]	; (8106f48 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8106ed0:	fba2 2303 	umull	r2, r3, r2, r3
 8106ed4:	091b      	lsrs	r3, r3, #4
 8106ed6:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8106ed8:	68bb      	ldr	r3, [r7, #8]
 8106eda:	4a1c      	ldr	r2, [pc, #112]	; (8106f4c <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8106edc:	4293      	cmp	r3, r2
 8106ede:	d806      	bhi.n	8106eee <DMA_CalcDMAMUXChannelBaseAndMask+0xca>
 8106ee0:	68bb      	ldr	r3, [r7, #8]
 8106ee2:	4a1b      	ldr	r2, [pc, #108]	; (8106f50 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8106ee4:	4293      	cmp	r3, r2
 8106ee6:	d902      	bls.n	8106eee <DMA_CalcDMAMUXChannelBaseAndMask+0xca>
      stream_number += 8U;
 8106ee8:	68fb      	ldr	r3, [r7, #12]
 8106eea:	3308      	adds	r3, #8
 8106eec:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8106eee:	68fb      	ldr	r3, [r7, #12]
 8106ef0:	f103 5380 	add.w	r3, r3, #268435456	; 0x10000000
 8106ef4:	f503 4302 	add.w	r3, r3, #33280	; 0x8200
 8106ef8:	009b      	lsls	r3, r3, #2
 8106efa:	461a      	mov	r2, r3
 8106efc:	687b      	ldr	r3, [r7, #4]
 8106efe:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8106f00:	687b      	ldr	r3, [r7, #4]
 8106f02:	4a14      	ldr	r2, [pc, #80]	; (8106f54 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8106f04:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8106f06:	68fb      	ldr	r3, [r7, #12]
 8106f08:	f003 031f 	and.w	r3, r3, #31
 8106f0c:	2201      	movs	r2, #1
 8106f0e:	409a      	lsls	r2, r3
 8106f10:	687b      	ldr	r3, [r7, #4]
 8106f12:	669a      	str	r2, [r3, #104]	; 0x68
}
 8106f14:	bf00      	nop
 8106f16:	3714      	adds	r7, #20
 8106f18:	46bd      	mov	sp, r7
 8106f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106f1e:	4770      	bx	lr
 8106f20:	58025408 	.word	0x58025408
 8106f24:	5802541c 	.word	0x5802541c
 8106f28:	58025430 	.word	0x58025430
 8106f2c:	58025444 	.word	0x58025444
 8106f30:	58025458 	.word	0x58025458
 8106f34:	5802546c 	.word	0x5802546c
 8106f38:	58025480 	.word	0x58025480
 8106f3c:	58025494 	.word	0x58025494
 8106f40:	cccccccd 	.word	0xcccccccd
 8106f44:	58025880 	.word	0x58025880
 8106f48:	aaaaaaab 	.word	0xaaaaaaab
 8106f4c:	400204b8 	.word	0x400204b8
 8106f50:	4002040f 	.word	0x4002040f
 8106f54:	40020880 	.word	0x40020880

08106f58 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8106f58:	b480      	push	{r7}
 8106f5a:	b085      	sub	sp, #20
 8106f5c:	af00      	add	r7, sp, #0
 8106f5e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8106f60:	687b      	ldr	r3, [r7, #4]
 8106f62:	685b      	ldr	r3, [r3, #4]
 8106f64:	b2db      	uxtb	r3, r3
 8106f66:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8106f68:	68fb      	ldr	r3, [r7, #12]
 8106f6a:	2b00      	cmp	r3, #0
 8106f6c:	d04a      	beq.n	8107004 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8106f6e:	68fb      	ldr	r3, [r7, #12]
 8106f70:	2b08      	cmp	r3, #8
 8106f72:	d847      	bhi.n	8107004 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8106f74:	687b      	ldr	r3, [r7, #4]
 8106f76:	681b      	ldr	r3, [r3, #0]
 8106f78:	4a25      	ldr	r2, [pc, #148]	; (8107010 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8106f7a:	4293      	cmp	r3, r2
 8106f7c:	d022      	beq.n	8106fc4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8106f7e:	687b      	ldr	r3, [r7, #4]
 8106f80:	681b      	ldr	r3, [r3, #0]
 8106f82:	4a24      	ldr	r2, [pc, #144]	; (8107014 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8106f84:	4293      	cmp	r3, r2
 8106f86:	d01d      	beq.n	8106fc4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8106f88:	687b      	ldr	r3, [r7, #4]
 8106f8a:	681b      	ldr	r3, [r3, #0]
 8106f8c:	4a22      	ldr	r2, [pc, #136]	; (8107018 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8106f8e:	4293      	cmp	r3, r2
 8106f90:	d018      	beq.n	8106fc4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8106f92:	687b      	ldr	r3, [r7, #4]
 8106f94:	681b      	ldr	r3, [r3, #0]
 8106f96:	4a21      	ldr	r2, [pc, #132]	; (810701c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8106f98:	4293      	cmp	r3, r2
 8106f9a:	d013      	beq.n	8106fc4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8106f9c:	687b      	ldr	r3, [r7, #4]
 8106f9e:	681b      	ldr	r3, [r3, #0]
 8106fa0:	4a1f      	ldr	r2, [pc, #124]	; (8107020 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8106fa2:	4293      	cmp	r3, r2
 8106fa4:	d00e      	beq.n	8106fc4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8106fa6:	687b      	ldr	r3, [r7, #4]
 8106fa8:	681b      	ldr	r3, [r3, #0]
 8106faa:	4a1e      	ldr	r2, [pc, #120]	; (8107024 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8106fac:	4293      	cmp	r3, r2
 8106fae:	d009      	beq.n	8106fc4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8106fb0:	687b      	ldr	r3, [r7, #4]
 8106fb2:	681b      	ldr	r3, [r3, #0]
 8106fb4:	4a1c      	ldr	r2, [pc, #112]	; (8107028 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8106fb6:	4293      	cmp	r3, r2
 8106fb8:	d004      	beq.n	8106fc4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8106fba:	687b      	ldr	r3, [r7, #4]
 8106fbc:	681b      	ldr	r3, [r3, #0]
 8106fbe:	4a1b      	ldr	r2, [pc, #108]	; (810702c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8106fc0:	4293      	cmp	r3, r2
 8106fc2:	d101      	bne.n	8106fc8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8106fc4:	2301      	movs	r3, #1
 8106fc6:	e000      	b.n	8106fca <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8106fc8:	2300      	movs	r3, #0
 8106fca:	2b00      	cmp	r3, #0
 8106fcc:	d00a      	beq.n	8106fe4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8106fce:	68fa      	ldr	r2, [r7, #12]
 8106fd0:	4b17      	ldr	r3, [pc, #92]	; (8107030 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8106fd2:	4413      	add	r3, r2
 8106fd4:	009b      	lsls	r3, r3, #2
 8106fd6:	461a      	mov	r2, r3
 8106fd8:	687b      	ldr	r3, [r7, #4]
 8106fda:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8106fdc:	687b      	ldr	r3, [r7, #4]
 8106fde:	4a15      	ldr	r2, [pc, #84]	; (8107034 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8106fe0:	671a      	str	r2, [r3, #112]	; 0x70
 8106fe2:	e009      	b.n	8106ff8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8106fe4:	68fa      	ldr	r2, [r7, #12]
 8106fe6:	4b14      	ldr	r3, [pc, #80]	; (8107038 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8106fe8:	4413      	add	r3, r2
 8106fea:	009b      	lsls	r3, r3, #2
 8106fec:	461a      	mov	r2, r3
 8106fee:	687b      	ldr	r3, [r7, #4]
 8106ff0:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8106ff2:	687b      	ldr	r3, [r7, #4]
 8106ff4:	4a11      	ldr	r2, [pc, #68]	; (810703c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8106ff6:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8106ff8:	68fb      	ldr	r3, [r7, #12]
 8106ffa:	3b01      	subs	r3, #1
 8106ffc:	2201      	movs	r2, #1
 8106ffe:	409a      	lsls	r2, r3
 8107000:	687b      	ldr	r3, [r7, #4]
 8107002:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8107004:	bf00      	nop
 8107006:	3714      	adds	r7, #20
 8107008:	46bd      	mov	sp, r7
 810700a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810700e:	4770      	bx	lr
 8107010:	58025408 	.word	0x58025408
 8107014:	5802541c 	.word	0x5802541c
 8107018:	58025430 	.word	0x58025430
 810701c:	58025444 	.word	0x58025444
 8107020:	58025458 	.word	0x58025458
 8107024:	5802546c 	.word	0x5802546c
 8107028:	58025480 	.word	0x58025480
 810702c:	58025494 	.word	0x58025494
 8107030:	1600963f 	.word	0x1600963f
 8107034:	58025940 	.word	0x58025940
 8107038:	1000823f 	.word	0x1000823f
 810703c:	40020940 	.word	0x40020940

08107040 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8107040:	b480      	push	{r7}
 8107042:	b089      	sub	sp, #36	; 0x24
 8107044:	af00      	add	r7, sp, #0
 8107046:	6078      	str	r0, [r7, #4]
 8107048:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 810704a:	2300      	movs	r3, #0
 810704c:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent;
  uint32_t temp;
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
 810704e:	4b89      	ldr	r3, [pc, #548]	; (8107274 <HAL_GPIO_Init+0x234>)
 8107050:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8107052:	e194      	b.n	810737e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8107054:	683b      	ldr	r3, [r7, #0]
 8107056:	681a      	ldr	r2, [r3, #0]
 8107058:	2101      	movs	r1, #1
 810705a:	69fb      	ldr	r3, [r7, #28]
 810705c:	fa01 f303 	lsl.w	r3, r1, r3
 8107060:	4013      	ands	r3, r2
 8107062:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8107064:	693b      	ldr	r3, [r7, #16]
 8107066:	2b00      	cmp	r3, #0
 8107068:	f000 8186 	beq.w	8107378 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 810706c:	683b      	ldr	r3, [r7, #0]
 810706e:	685b      	ldr	r3, [r3, #4]
 8107070:	2b01      	cmp	r3, #1
 8107072:	d00b      	beq.n	810708c <HAL_GPIO_Init+0x4c>
 8107074:	683b      	ldr	r3, [r7, #0]
 8107076:	685b      	ldr	r3, [r3, #4]
 8107078:	2b02      	cmp	r3, #2
 810707a:	d007      	beq.n	810708c <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 810707c:	683b      	ldr	r3, [r7, #0]
 810707e:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8107080:	2b11      	cmp	r3, #17
 8107082:	d003      	beq.n	810708c <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8107084:	683b      	ldr	r3, [r7, #0]
 8107086:	685b      	ldr	r3, [r3, #4]
 8107088:	2b12      	cmp	r3, #18
 810708a:	d130      	bne.n	81070ee <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 810708c:	687b      	ldr	r3, [r7, #4]
 810708e:	689b      	ldr	r3, [r3, #8]
 8107090:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8107092:	69fb      	ldr	r3, [r7, #28]
 8107094:	005b      	lsls	r3, r3, #1
 8107096:	2203      	movs	r2, #3
 8107098:	fa02 f303 	lsl.w	r3, r2, r3
 810709c:	43db      	mvns	r3, r3
 810709e:	69ba      	ldr	r2, [r7, #24]
 81070a0:	4013      	ands	r3, r2
 81070a2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 81070a4:	683b      	ldr	r3, [r7, #0]
 81070a6:	68da      	ldr	r2, [r3, #12]
 81070a8:	69fb      	ldr	r3, [r7, #28]
 81070aa:	005b      	lsls	r3, r3, #1
 81070ac:	fa02 f303 	lsl.w	r3, r2, r3
 81070b0:	69ba      	ldr	r2, [r7, #24]
 81070b2:	4313      	orrs	r3, r2
 81070b4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 81070b6:	687b      	ldr	r3, [r7, #4]
 81070b8:	69ba      	ldr	r2, [r7, #24]
 81070ba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 81070bc:	687b      	ldr	r3, [r7, #4]
 81070be:	685b      	ldr	r3, [r3, #4]
 81070c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 81070c2:	2201      	movs	r2, #1
 81070c4:	69fb      	ldr	r3, [r7, #28]
 81070c6:	fa02 f303 	lsl.w	r3, r2, r3
 81070ca:	43db      	mvns	r3, r3
 81070cc:	69ba      	ldr	r2, [r7, #24]
 81070ce:	4013      	ands	r3, r2
 81070d0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 81070d2:	683b      	ldr	r3, [r7, #0]
 81070d4:	685b      	ldr	r3, [r3, #4]
 81070d6:	091b      	lsrs	r3, r3, #4
 81070d8:	f003 0201 	and.w	r2, r3, #1
 81070dc:	69fb      	ldr	r3, [r7, #28]
 81070de:	fa02 f303 	lsl.w	r3, r2, r3
 81070e2:	69ba      	ldr	r2, [r7, #24]
 81070e4:	4313      	orrs	r3, r2
 81070e6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 81070e8:	687b      	ldr	r3, [r7, #4]
 81070ea:	69ba      	ldr	r2, [r7, #24]
 81070ec:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 81070ee:	687b      	ldr	r3, [r7, #4]
 81070f0:	68db      	ldr	r3, [r3, #12]
 81070f2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 81070f4:	69fb      	ldr	r3, [r7, #28]
 81070f6:	005b      	lsls	r3, r3, #1
 81070f8:	2203      	movs	r2, #3
 81070fa:	fa02 f303 	lsl.w	r3, r2, r3
 81070fe:	43db      	mvns	r3, r3
 8107100:	69ba      	ldr	r2, [r7, #24]
 8107102:	4013      	ands	r3, r2
 8107104:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8107106:	683b      	ldr	r3, [r7, #0]
 8107108:	689a      	ldr	r2, [r3, #8]
 810710a:	69fb      	ldr	r3, [r7, #28]
 810710c:	005b      	lsls	r3, r3, #1
 810710e:	fa02 f303 	lsl.w	r3, r2, r3
 8107112:	69ba      	ldr	r2, [r7, #24]
 8107114:	4313      	orrs	r3, r2
 8107116:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8107118:	687b      	ldr	r3, [r7, #4]
 810711a:	69ba      	ldr	r2, [r7, #24]
 810711c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 810711e:	683b      	ldr	r3, [r7, #0]
 8107120:	685b      	ldr	r3, [r3, #4]
 8107122:	2b02      	cmp	r3, #2
 8107124:	d003      	beq.n	810712e <HAL_GPIO_Init+0xee>
 8107126:	683b      	ldr	r3, [r7, #0]
 8107128:	685b      	ldr	r3, [r3, #4]
 810712a:	2b12      	cmp	r3, #18
 810712c:	d123      	bne.n	8107176 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 810712e:	69fb      	ldr	r3, [r7, #28]
 8107130:	08da      	lsrs	r2, r3, #3
 8107132:	687b      	ldr	r3, [r7, #4]
 8107134:	3208      	adds	r2, #8
 8107136:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 810713a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 810713c:	69fb      	ldr	r3, [r7, #28]
 810713e:	f003 0307 	and.w	r3, r3, #7
 8107142:	009b      	lsls	r3, r3, #2
 8107144:	220f      	movs	r2, #15
 8107146:	fa02 f303 	lsl.w	r3, r2, r3
 810714a:	43db      	mvns	r3, r3
 810714c:	69ba      	ldr	r2, [r7, #24]
 810714e:	4013      	ands	r3, r2
 8107150:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8107152:	683b      	ldr	r3, [r7, #0]
 8107154:	691a      	ldr	r2, [r3, #16]
 8107156:	69fb      	ldr	r3, [r7, #28]
 8107158:	f003 0307 	and.w	r3, r3, #7
 810715c:	009b      	lsls	r3, r3, #2
 810715e:	fa02 f303 	lsl.w	r3, r2, r3
 8107162:	69ba      	ldr	r2, [r7, #24]
 8107164:	4313      	orrs	r3, r2
 8107166:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8107168:	69fb      	ldr	r3, [r7, #28]
 810716a:	08da      	lsrs	r2, r3, #3
 810716c:	687b      	ldr	r3, [r7, #4]
 810716e:	3208      	adds	r2, #8
 8107170:	69b9      	ldr	r1, [r7, #24]
 8107172:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8107176:	687b      	ldr	r3, [r7, #4]
 8107178:	681b      	ldr	r3, [r3, #0]
 810717a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 810717c:	69fb      	ldr	r3, [r7, #28]
 810717e:	005b      	lsls	r3, r3, #1
 8107180:	2203      	movs	r2, #3
 8107182:	fa02 f303 	lsl.w	r3, r2, r3
 8107186:	43db      	mvns	r3, r3
 8107188:	69ba      	ldr	r2, [r7, #24]
 810718a:	4013      	ands	r3, r2
 810718c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 810718e:	683b      	ldr	r3, [r7, #0]
 8107190:	685b      	ldr	r3, [r3, #4]
 8107192:	f003 0203 	and.w	r2, r3, #3
 8107196:	69fb      	ldr	r3, [r7, #28]
 8107198:	005b      	lsls	r3, r3, #1
 810719a:	fa02 f303 	lsl.w	r3, r2, r3
 810719e:	69ba      	ldr	r2, [r7, #24]
 81071a0:	4313      	orrs	r3, r2
 81071a2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 81071a4:	687b      	ldr	r3, [r7, #4]
 81071a6:	69ba      	ldr	r2, [r7, #24]
 81071a8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 81071aa:	683b      	ldr	r3, [r7, #0]
 81071ac:	685b      	ldr	r3, [r3, #4]
 81071ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 81071b2:	2b00      	cmp	r3, #0
 81071b4:	f000 80e0 	beq.w	8107378 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 81071b8:	4b2f      	ldr	r3, [pc, #188]	; (8107278 <HAL_GPIO_Init+0x238>)
 81071ba:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 81071be:	4a2e      	ldr	r2, [pc, #184]	; (8107278 <HAL_GPIO_Init+0x238>)
 81071c0:	f043 0302 	orr.w	r3, r3, #2
 81071c4:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 81071c8:	4b2b      	ldr	r3, [pc, #172]	; (8107278 <HAL_GPIO_Init+0x238>)
 81071ca:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 81071ce:	f003 0302 	and.w	r3, r3, #2
 81071d2:	60fb      	str	r3, [r7, #12]
 81071d4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 81071d6:	4a29      	ldr	r2, [pc, #164]	; (810727c <HAL_GPIO_Init+0x23c>)
 81071d8:	69fb      	ldr	r3, [r7, #28]
 81071da:	089b      	lsrs	r3, r3, #2
 81071dc:	3302      	adds	r3, #2
 81071de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 81071e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 81071e4:	69fb      	ldr	r3, [r7, #28]
 81071e6:	f003 0303 	and.w	r3, r3, #3
 81071ea:	009b      	lsls	r3, r3, #2
 81071ec:	220f      	movs	r2, #15
 81071ee:	fa02 f303 	lsl.w	r3, r2, r3
 81071f2:	43db      	mvns	r3, r3
 81071f4:	69ba      	ldr	r2, [r7, #24]
 81071f6:	4013      	ands	r3, r2
 81071f8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 81071fa:	687b      	ldr	r3, [r7, #4]
 81071fc:	4a20      	ldr	r2, [pc, #128]	; (8107280 <HAL_GPIO_Init+0x240>)
 81071fe:	4293      	cmp	r3, r2
 8107200:	d052      	beq.n	81072a8 <HAL_GPIO_Init+0x268>
 8107202:	687b      	ldr	r3, [r7, #4]
 8107204:	4a1f      	ldr	r2, [pc, #124]	; (8107284 <HAL_GPIO_Init+0x244>)
 8107206:	4293      	cmp	r3, r2
 8107208:	d031      	beq.n	810726e <HAL_GPIO_Init+0x22e>
 810720a:	687b      	ldr	r3, [r7, #4]
 810720c:	4a1e      	ldr	r2, [pc, #120]	; (8107288 <HAL_GPIO_Init+0x248>)
 810720e:	4293      	cmp	r3, r2
 8107210:	d02b      	beq.n	810726a <HAL_GPIO_Init+0x22a>
 8107212:	687b      	ldr	r3, [r7, #4]
 8107214:	4a1d      	ldr	r2, [pc, #116]	; (810728c <HAL_GPIO_Init+0x24c>)
 8107216:	4293      	cmp	r3, r2
 8107218:	d025      	beq.n	8107266 <HAL_GPIO_Init+0x226>
 810721a:	687b      	ldr	r3, [r7, #4]
 810721c:	4a1c      	ldr	r2, [pc, #112]	; (8107290 <HAL_GPIO_Init+0x250>)
 810721e:	4293      	cmp	r3, r2
 8107220:	d01f      	beq.n	8107262 <HAL_GPIO_Init+0x222>
 8107222:	687b      	ldr	r3, [r7, #4]
 8107224:	4a1b      	ldr	r2, [pc, #108]	; (8107294 <HAL_GPIO_Init+0x254>)
 8107226:	4293      	cmp	r3, r2
 8107228:	d019      	beq.n	810725e <HAL_GPIO_Init+0x21e>
 810722a:	687b      	ldr	r3, [r7, #4]
 810722c:	4a1a      	ldr	r2, [pc, #104]	; (8107298 <HAL_GPIO_Init+0x258>)
 810722e:	4293      	cmp	r3, r2
 8107230:	d013      	beq.n	810725a <HAL_GPIO_Init+0x21a>
 8107232:	687b      	ldr	r3, [r7, #4]
 8107234:	4a19      	ldr	r2, [pc, #100]	; (810729c <HAL_GPIO_Init+0x25c>)
 8107236:	4293      	cmp	r3, r2
 8107238:	d00d      	beq.n	8107256 <HAL_GPIO_Init+0x216>
 810723a:	687b      	ldr	r3, [r7, #4]
 810723c:	4a18      	ldr	r2, [pc, #96]	; (81072a0 <HAL_GPIO_Init+0x260>)
 810723e:	4293      	cmp	r3, r2
 8107240:	d007      	beq.n	8107252 <HAL_GPIO_Init+0x212>
 8107242:	687b      	ldr	r3, [r7, #4]
 8107244:	4a17      	ldr	r2, [pc, #92]	; (81072a4 <HAL_GPIO_Init+0x264>)
 8107246:	4293      	cmp	r3, r2
 8107248:	d101      	bne.n	810724e <HAL_GPIO_Init+0x20e>
 810724a:	2309      	movs	r3, #9
 810724c:	e02d      	b.n	81072aa <HAL_GPIO_Init+0x26a>
 810724e:	230a      	movs	r3, #10
 8107250:	e02b      	b.n	81072aa <HAL_GPIO_Init+0x26a>
 8107252:	2308      	movs	r3, #8
 8107254:	e029      	b.n	81072aa <HAL_GPIO_Init+0x26a>
 8107256:	2307      	movs	r3, #7
 8107258:	e027      	b.n	81072aa <HAL_GPIO_Init+0x26a>
 810725a:	2306      	movs	r3, #6
 810725c:	e025      	b.n	81072aa <HAL_GPIO_Init+0x26a>
 810725e:	2305      	movs	r3, #5
 8107260:	e023      	b.n	81072aa <HAL_GPIO_Init+0x26a>
 8107262:	2304      	movs	r3, #4
 8107264:	e021      	b.n	81072aa <HAL_GPIO_Init+0x26a>
 8107266:	2303      	movs	r3, #3
 8107268:	e01f      	b.n	81072aa <HAL_GPIO_Init+0x26a>
 810726a:	2302      	movs	r3, #2
 810726c:	e01d      	b.n	81072aa <HAL_GPIO_Init+0x26a>
 810726e:	2301      	movs	r3, #1
 8107270:	e01b      	b.n	81072aa <HAL_GPIO_Init+0x26a>
 8107272:	bf00      	nop
 8107274:	580000c0 	.word	0x580000c0
 8107278:	58024400 	.word	0x58024400
 810727c:	58000400 	.word	0x58000400
 8107280:	58020000 	.word	0x58020000
 8107284:	58020400 	.word	0x58020400
 8107288:	58020800 	.word	0x58020800
 810728c:	58020c00 	.word	0x58020c00
 8107290:	58021000 	.word	0x58021000
 8107294:	58021400 	.word	0x58021400
 8107298:	58021800 	.word	0x58021800
 810729c:	58021c00 	.word	0x58021c00
 81072a0:	58022000 	.word	0x58022000
 81072a4:	58022400 	.word	0x58022400
 81072a8:	2300      	movs	r3, #0
 81072aa:	69fa      	ldr	r2, [r7, #28]
 81072ac:	f002 0203 	and.w	r2, r2, #3
 81072b0:	0092      	lsls	r2, r2, #2
 81072b2:	4093      	lsls	r3, r2
 81072b4:	69ba      	ldr	r2, [r7, #24]
 81072b6:	4313      	orrs	r3, r2
 81072b8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 81072ba:	4938      	ldr	r1, [pc, #224]	; (810739c <HAL_GPIO_Init+0x35c>)
 81072bc:	69fb      	ldr	r3, [r7, #28]
 81072be:	089b      	lsrs	r3, r3, #2
 81072c0:	3302      	adds	r3, #2
 81072c2:	69ba      	ldr	r2, [r7, #24]
 81072c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 81072c8:	697b      	ldr	r3, [r7, #20]
 81072ca:	681b      	ldr	r3, [r3, #0]
 81072cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 81072ce:	693b      	ldr	r3, [r7, #16]
 81072d0:	43db      	mvns	r3, r3
 81072d2:	69ba      	ldr	r2, [r7, #24]
 81072d4:	4013      	ands	r3, r2
 81072d6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 81072d8:	683b      	ldr	r3, [r7, #0]
 81072da:	685b      	ldr	r3, [r3, #4]
 81072dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 81072e0:	2b00      	cmp	r3, #0
 81072e2:	d003      	beq.n	81072ec <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 81072e4:	69ba      	ldr	r2, [r7, #24]
 81072e6:	693b      	ldr	r3, [r7, #16]
 81072e8:	4313      	orrs	r3, r2
 81072ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 81072ec:	697b      	ldr	r3, [r7, #20]
 81072ee:	69ba      	ldr	r2, [r7, #24]
 81072f0:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 81072f2:	697b      	ldr	r3, [r7, #20]
 81072f4:	685b      	ldr	r3, [r3, #4]
 81072f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 81072f8:	693b      	ldr	r3, [r7, #16]
 81072fa:	43db      	mvns	r3, r3
 81072fc:	69ba      	ldr	r2, [r7, #24]
 81072fe:	4013      	ands	r3, r2
 8107300:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8107302:	683b      	ldr	r3, [r7, #0]
 8107304:	685b      	ldr	r3, [r3, #4]
 8107306:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 810730a:	2b00      	cmp	r3, #0
 810730c:	d003      	beq.n	8107316 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 810730e:	69ba      	ldr	r2, [r7, #24]
 8107310:	693b      	ldr	r3, [r7, #16]
 8107312:	4313      	orrs	r3, r2
 8107314:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8107316:	697b      	ldr	r3, [r7, #20]
 8107318:	69ba      	ldr	r2, [r7, #24]
 810731a:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 810731c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8107320:	681b      	ldr	r3, [r3, #0]
 8107322:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8107324:	693b      	ldr	r3, [r7, #16]
 8107326:	43db      	mvns	r3, r3
 8107328:	69ba      	ldr	r2, [r7, #24]
 810732a:	4013      	ands	r3, r2
 810732c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 810732e:	683b      	ldr	r3, [r7, #0]
 8107330:	685b      	ldr	r3, [r3, #4]
 8107332:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8107336:	2b00      	cmp	r3, #0
 8107338:	d003      	beq.n	8107342 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 810733a:	69ba      	ldr	r2, [r7, #24]
 810733c:	693b      	ldr	r3, [r7, #16]
 810733e:	4313      	orrs	r3, r2
 8107340:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8107342:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8107346:	69bb      	ldr	r3, [r7, #24]
 8107348:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 810734a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 810734e:	685b      	ldr	r3, [r3, #4]
 8107350:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8107352:	693b      	ldr	r3, [r7, #16]
 8107354:	43db      	mvns	r3, r3
 8107356:	69ba      	ldr	r2, [r7, #24]
 8107358:	4013      	ands	r3, r2
 810735a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 810735c:	683b      	ldr	r3, [r7, #0]
 810735e:	685b      	ldr	r3, [r3, #4]
 8107360:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8107364:	2b00      	cmp	r3, #0
 8107366:	d003      	beq.n	8107370 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8107368:	69ba      	ldr	r2, [r7, #24]
 810736a:	693b      	ldr	r3, [r7, #16]
 810736c:	4313      	orrs	r3, r2
 810736e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8107370:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8107374:	69bb      	ldr	r3, [r7, #24]
 8107376:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8107378:	69fb      	ldr	r3, [r7, #28]
 810737a:	3301      	adds	r3, #1
 810737c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 810737e:	683b      	ldr	r3, [r7, #0]
 8107380:	681a      	ldr	r2, [r3, #0]
 8107382:	69fb      	ldr	r3, [r7, #28]
 8107384:	fa22 f303 	lsr.w	r3, r2, r3
 8107388:	2b00      	cmp	r3, #0
 810738a:	f47f ae63 	bne.w	8107054 <HAL_GPIO_Init+0x14>
  }
}
 810738e:	bf00      	nop
 8107390:	bf00      	nop
 8107392:	3724      	adds	r7, #36	; 0x24
 8107394:	46bd      	mov	sp, r7
 8107396:	f85d 7b04 	ldr.w	r7, [sp], #4
 810739a:	4770      	bx	lr
 810739c:	58000400 	.word	0x58000400

081073a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 81073a0:	b480      	push	{r7}
 81073a2:	b083      	sub	sp, #12
 81073a4:	af00      	add	r7, sp, #0
 81073a6:	6078      	str	r0, [r7, #4]
 81073a8:	460b      	mov	r3, r1
 81073aa:	807b      	strh	r3, [r7, #2]
 81073ac:	4613      	mov	r3, r2
 81073ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 81073b0:	787b      	ldrb	r3, [r7, #1]
 81073b2:	2b00      	cmp	r3, #0
 81073b4:	d003      	beq.n	81073be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 81073b6:	887a      	ldrh	r2, [r7, #2]
 81073b8:	687b      	ldr	r3, [r7, #4]
 81073ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 81073bc:	e003      	b.n	81073c6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 81073be:	887b      	ldrh	r3, [r7, #2]
 81073c0:	041a      	lsls	r2, r3, #16
 81073c2:	687b      	ldr	r3, [r7, #4]
 81073c4:	619a      	str	r2, [r3, #24]
}
 81073c6:	bf00      	nop
 81073c8:	370c      	adds	r7, #12
 81073ca:	46bd      	mov	sp, r7
 81073cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 81073d0:	4770      	bx	lr

081073d2 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 81073d2:	b580      	push	{r7, lr}
 81073d4:	b082      	sub	sp, #8
 81073d6:	af00      	add	r7, sp, #0
 81073d8:	4603      	mov	r3, r0
 81073da:	80fb      	strh	r3, [r7, #6]
#if defined(DUAL_CORE) && defined(CORE_CM4)
  if (__HAL_GPIO_EXTID2_GET_IT(GPIO_Pin) != 0x00U)
 81073dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 81073e0:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 81073e4:	88fb      	ldrh	r3, [r7, #6]
 81073e6:	4013      	ands	r3, r2
 81073e8:	2b00      	cmp	r3, #0
 81073ea:	d008      	beq.n	81073fe <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
 81073ec:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 81073f0:	88fb      	ldrh	r3, [r7, #6]
 81073f2:	f8c2 30c8 	str.w	r3, [r2, #200]	; 0xc8
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 81073f6:	88fb      	ldrh	r3, [r7, #6]
 81073f8:	4618      	mov	r0, r3
 81073fa:	f000 f804 	bl	8107406 <HAL_GPIO_EXTI_Callback>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#endif
}
 81073fe:	bf00      	nop
 8107400:	3708      	adds	r7, #8
 8107402:	46bd      	mov	sp, r7
 8107404:	bd80      	pop	{r7, pc}

08107406 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8107406:	b480      	push	{r7}
 8107408:	b083      	sub	sp, #12
 810740a:	af00      	add	r7, sp, #0
 810740c:	4603      	mov	r3, r0
 810740e:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8107410:	bf00      	nop
 8107412:	370c      	adds	r7, #12
 8107414:	46bd      	mov	sp, r7
 8107416:	f85d 7b04 	ldr.w	r7, [sp], #4
 810741a:	4770      	bx	lr

0810741c <HAL_HSEM_ActivateNotification>:
  * @brief  Activate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_ActivateNotification(uint32_t SemMask)
{
 810741c:	b480      	push	{r7}
 810741e:	b083      	sub	sp, #12
 8107420:	af00      	add	r7, sp, #0
 8107422:	6078      	str	r0, [r7, #4]
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
 8107424:	4b05      	ldr	r3, [pc, #20]	; (810743c <HAL_HSEM_ActivateNotification+0x20>)
 8107426:	681a      	ldr	r2, [r3, #0]
 8107428:	4904      	ldr	r1, [pc, #16]	; (810743c <HAL_HSEM_ActivateNotification+0x20>)
 810742a:	687b      	ldr	r3, [r7, #4]
 810742c:	4313      	orrs	r3, r2
 810742e:	600b      	str	r3, [r1, #0]
#endif
}
 8107430:	bf00      	nop
 8107432:	370c      	adds	r7, #12
 8107434:	46bd      	mov	sp, r7
 8107436:	f85d 7b04 	ldr.w	r7, [sp], #4
 810743a:	4770      	bx	lr
 810743c:	58026510 	.word	0x58026510

08107440 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 8107440:	b580      	push	{r7, lr}
 8107442:	b082      	sub	sp, #8
 8107444:	af00      	add	r7, sp, #0
    /*Clear Flags*/
    HSEM->C2ICR = ((uint32_t)statusreg);
  }
#else
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 8107446:	4b0a      	ldr	r3, [pc, #40]	; (8107470 <HAL_HSEM_IRQHandler+0x30>)
 8107448:	68db      	ldr	r3, [r3, #12]
 810744a:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 810744c:	4b08      	ldr	r3, [pc, #32]	; (8107470 <HAL_HSEM_IRQHandler+0x30>)
 810744e:	681a      	ldr	r2, [r3, #0]
 8107450:	687b      	ldr	r3, [r7, #4]
 8107452:	43db      	mvns	r3, r3
 8107454:	4906      	ldr	r1, [pc, #24]	; (8107470 <HAL_HSEM_IRQHandler+0x30>)
 8107456:	4013      	ands	r3, r2
 8107458:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 810745a:	4a05      	ldr	r2, [pc, #20]	; (8107470 <HAL_HSEM_IRQHandler+0x30>)
 810745c:	687b      	ldr	r3, [r7, #4]
 810745e:	6053      	str	r3, [r2, #4]

#endif
  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 8107460:	6878      	ldr	r0, [r7, #4]
 8107462:	f000 f807 	bl	8107474 <HAL_HSEM_FreeCallback>
}
 8107466:	bf00      	nop
 8107468:	3708      	adds	r7, #8
 810746a:	46bd      	mov	sp, r7
 810746c:	bd80      	pop	{r7, pc}
 810746e:	bf00      	nop
 8107470:	58026510 	.word	0x58026510

08107474 <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 8107474:	b480      	push	{r7}
 8107476:	b083      	sub	sp, #12
 8107478:	af00      	add	r7, sp, #0
 810747a:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 810747c:	bf00      	nop
 810747e:	370c      	adds	r7, #12
 8107480:	46bd      	mov	sp, r7
 8107482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107486:	4770      	bx	lr

08107488 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8107488:	b580      	push	{r7, lr}
 810748a:	b082      	sub	sp, #8
 810748c:	af00      	add	r7, sp, #0
 810748e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8107490:	687b      	ldr	r3, [r7, #4]
 8107492:	2b00      	cmp	r3, #0
 8107494:	d101      	bne.n	810749a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8107496:	2301      	movs	r3, #1
 8107498:	e081      	b.n	810759e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 810749a:	687b      	ldr	r3, [r7, #4]
 810749c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 81074a0:	b2db      	uxtb	r3, r3
 81074a2:	2b00      	cmp	r3, #0
 81074a4:	d106      	bne.n	81074b4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 81074a6:	687b      	ldr	r3, [r7, #4]
 81074a8:	2200      	movs	r2, #0
 81074aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 81074ae:	6878      	ldr	r0, [r7, #4]
 81074b0:	f7fa f876 	bl	81015a0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 81074b4:	687b      	ldr	r3, [r7, #4]
 81074b6:	2224      	movs	r2, #36	; 0x24
 81074b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 81074bc:	687b      	ldr	r3, [r7, #4]
 81074be:	681b      	ldr	r3, [r3, #0]
 81074c0:	681a      	ldr	r2, [r3, #0]
 81074c2:	687b      	ldr	r3, [r7, #4]
 81074c4:	681b      	ldr	r3, [r3, #0]
 81074c6:	f022 0201 	bic.w	r2, r2, #1
 81074ca:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 81074cc:	687b      	ldr	r3, [r7, #4]
 81074ce:	685a      	ldr	r2, [r3, #4]
 81074d0:	687b      	ldr	r3, [r7, #4]
 81074d2:	681b      	ldr	r3, [r3, #0]
 81074d4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 81074d8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 81074da:	687b      	ldr	r3, [r7, #4]
 81074dc:	681b      	ldr	r3, [r3, #0]
 81074de:	689a      	ldr	r2, [r3, #8]
 81074e0:	687b      	ldr	r3, [r7, #4]
 81074e2:	681b      	ldr	r3, [r3, #0]
 81074e4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 81074e8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 81074ea:	687b      	ldr	r3, [r7, #4]
 81074ec:	68db      	ldr	r3, [r3, #12]
 81074ee:	2b01      	cmp	r3, #1
 81074f0:	d107      	bne.n	8107502 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 81074f2:	687b      	ldr	r3, [r7, #4]
 81074f4:	689a      	ldr	r2, [r3, #8]
 81074f6:	687b      	ldr	r3, [r7, #4]
 81074f8:	681b      	ldr	r3, [r3, #0]
 81074fa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 81074fe:	609a      	str	r2, [r3, #8]
 8107500:	e006      	b.n	8107510 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8107502:	687b      	ldr	r3, [r7, #4]
 8107504:	689a      	ldr	r2, [r3, #8]
 8107506:	687b      	ldr	r3, [r7, #4]
 8107508:	681b      	ldr	r3, [r3, #0]
 810750a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 810750e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8107510:	687b      	ldr	r3, [r7, #4]
 8107512:	68db      	ldr	r3, [r3, #12]
 8107514:	2b02      	cmp	r3, #2
 8107516:	d104      	bne.n	8107522 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8107518:	687b      	ldr	r3, [r7, #4]
 810751a:	681b      	ldr	r3, [r3, #0]
 810751c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8107520:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8107522:	687b      	ldr	r3, [r7, #4]
 8107524:	681b      	ldr	r3, [r3, #0]
 8107526:	685b      	ldr	r3, [r3, #4]
 8107528:	687a      	ldr	r2, [r7, #4]
 810752a:	6812      	ldr	r2, [r2, #0]
 810752c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8107530:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8107534:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8107536:	687b      	ldr	r3, [r7, #4]
 8107538:	681b      	ldr	r3, [r3, #0]
 810753a:	68da      	ldr	r2, [r3, #12]
 810753c:	687b      	ldr	r3, [r7, #4]
 810753e:	681b      	ldr	r3, [r3, #0]
 8107540:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8107544:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8107546:	687b      	ldr	r3, [r7, #4]
 8107548:	691a      	ldr	r2, [r3, #16]
 810754a:	687b      	ldr	r3, [r7, #4]
 810754c:	695b      	ldr	r3, [r3, #20]
 810754e:	ea42 0103 	orr.w	r1, r2, r3
 8107552:	687b      	ldr	r3, [r7, #4]
 8107554:	699b      	ldr	r3, [r3, #24]
 8107556:	021a      	lsls	r2, r3, #8
 8107558:	687b      	ldr	r3, [r7, #4]
 810755a:	681b      	ldr	r3, [r3, #0]
 810755c:	430a      	orrs	r2, r1
 810755e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8107560:	687b      	ldr	r3, [r7, #4]
 8107562:	69d9      	ldr	r1, [r3, #28]
 8107564:	687b      	ldr	r3, [r7, #4]
 8107566:	6a1a      	ldr	r2, [r3, #32]
 8107568:	687b      	ldr	r3, [r7, #4]
 810756a:	681b      	ldr	r3, [r3, #0]
 810756c:	430a      	orrs	r2, r1
 810756e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8107570:	687b      	ldr	r3, [r7, #4]
 8107572:	681b      	ldr	r3, [r3, #0]
 8107574:	681a      	ldr	r2, [r3, #0]
 8107576:	687b      	ldr	r3, [r7, #4]
 8107578:	681b      	ldr	r3, [r3, #0]
 810757a:	f042 0201 	orr.w	r2, r2, #1
 810757e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8107580:	687b      	ldr	r3, [r7, #4]
 8107582:	2200      	movs	r2, #0
 8107584:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8107586:	687b      	ldr	r3, [r7, #4]
 8107588:	2220      	movs	r2, #32
 810758a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 810758e:	687b      	ldr	r3, [r7, #4]
 8107590:	2200      	movs	r2, #0
 8107592:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8107594:	687b      	ldr	r3, [r7, #4]
 8107596:	2200      	movs	r2, #0
 8107598:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 810759c:	2300      	movs	r3, #0
}
 810759e:	4618      	mov	r0, r3
 81075a0:	3708      	adds	r7, #8
 81075a2:	46bd      	mov	sp, r7
 81075a4:	bd80      	pop	{r7, pc}

081075a6 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 81075a6:	b580      	push	{r7, lr}
 81075a8:	b084      	sub	sp, #16
 81075aa:	af00      	add	r7, sp, #0
 81075ac:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 81075ae:	687b      	ldr	r3, [r7, #4]
 81075b0:	681b      	ldr	r3, [r3, #0]
 81075b2:	699b      	ldr	r3, [r3, #24]
 81075b4:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 81075b6:	687b      	ldr	r3, [r7, #4]
 81075b8:	681b      	ldr	r3, [r3, #0]
 81075ba:	681b      	ldr	r3, [r3, #0]
 81075bc:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 81075be:	687b      	ldr	r3, [r7, #4]
 81075c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 81075c2:	2b00      	cmp	r3, #0
 81075c4:	d005      	beq.n	81075d2 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 81075c6:	687b      	ldr	r3, [r7, #4]
 81075c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 81075ca:	68ba      	ldr	r2, [r7, #8]
 81075cc:	68f9      	ldr	r1, [r7, #12]
 81075ce:	6878      	ldr	r0, [r7, #4]
 81075d0:	4798      	blx	r3
  }
}
 81075d2:	bf00      	nop
 81075d4:	3710      	adds	r7, #16
 81075d6:	46bd      	mov	sp, r7
 81075d8:	bd80      	pop	{r7, pc}

081075da <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 81075da:	b580      	push	{r7, lr}
 81075dc:	b086      	sub	sp, #24
 81075de:	af00      	add	r7, sp, #0
 81075e0:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 81075e2:	687b      	ldr	r3, [r7, #4]
 81075e4:	681b      	ldr	r3, [r3, #0]
 81075e6:	699b      	ldr	r3, [r3, #24]
 81075e8:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 81075ea:	687b      	ldr	r3, [r7, #4]
 81075ec:	681b      	ldr	r3, [r3, #0]
 81075ee:	681b      	ldr	r3, [r3, #0]
 81075f0:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 81075f2:	697b      	ldr	r3, [r7, #20]
 81075f4:	0a1b      	lsrs	r3, r3, #8
 81075f6:	f003 0301 	and.w	r3, r3, #1
 81075fa:	2b00      	cmp	r3, #0
 81075fc:	d010      	beq.n	8107620 <HAL_I2C_ER_IRQHandler+0x46>
 81075fe:	693b      	ldr	r3, [r7, #16]
 8107600:	09db      	lsrs	r3, r3, #7
 8107602:	f003 0301 	and.w	r3, r3, #1
 8107606:	2b00      	cmp	r3, #0
 8107608:	d00a      	beq.n	8107620 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 810760a:	687b      	ldr	r3, [r7, #4]
 810760c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 810760e:	f043 0201 	orr.w	r2, r3, #1
 8107612:	687b      	ldr	r3, [r7, #4]
 8107614:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8107616:	687b      	ldr	r3, [r7, #4]
 8107618:	681b      	ldr	r3, [r3, #0]
 810761a:	f44f 7280 	mov.w	r2, #256	; 0x100
 810761e:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8107620:	697b      	ldr	r3, [r7, #20]
 8107622:	0a9b      	lsrs	r3, r3, #10
 8107624:	f003 0301 	and.w	r3, r3, #1
 8107628:	2b00      	cmp	r3, #0
 810762a:	d010      	beq.n	810764e <HAL_I2C_ER_IRQHandler+0x74>
 810762c:	693b      	ldr	r3, [r7, #16]
 810762e:	09db      	lsrs	r3, r3, #7
 8107630:	f003 0301 	and.w	r3, r3, #1
 8107634:	2b00      	cmp	r3, #0
 8107636:	d00a      	beq.n	810764e <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8107638:	687b      	ldr	r3, [r7, #4]
 810763a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 810763c:	f043 0208 	orr.w	r2, r3, #8
 8107640:	687b      	ldr	r3, [r7, #4]
 8107642:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8107644:	687b      	ldr	r3, [r7, #4]
 8107646:	681b      	ldr	r3, [r3, #0]
 8107648:	f44f 6280 	mov.w	r2, #1024	; 0x400
 810764c:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 810764e:	697b      	ldr	r3, [r7, #20]
 8107650:	0a5b      	lsrs	r3, r3, #9
 8107652:	f003 0301 	and.w	r3, r3, #1
 8107656:	2b00      	cmp	r3, #0
 8107658:	d010      	beq.n	810767c <HAL_I2C_ER_IRQHandler+0xa2>
 810765a:	693b      	ldr	r3, [r7, #16]
 810765c:	09db      	lsrs	r3, r3, #7
 810765e:	f003 0301 	and.w	r3, r3, #1
 8107662:	2b00      	cmp	r3, #0
 8107664:	d00a      	beq.n	810767c <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8107666:	687b      	ldr	r3, [r7, #4]
 8107668:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 810766a:	f043 0202 	orr.w	r2, r3, #2
 810766e:	687b      	ldr	r3, [r7, #4]
 8107670:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8107672:	687b      	ldr	r3, [r7, #4]
 8107674:	681b      	ldr	r3, [r3, #0]
 8107676:	f44f 7200 	mov.w	r2, #512	; 0x200
 810767a:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 810767c:	687b      	ldr	r3, [r7, #4]
 810767e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8107680:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8107682:	68fb      	ldr	r3, [r7, #12]
 8107684:	f003 030b 	and.w	r3, r3, #11
 8107688:	2b00      	cmp	r3, #0
 810768a:	d003      	beq.n	8107694 <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 810768c:	68f9      	ldr	r1, [r7, #12]
 810768e:	6878      	ldr	r0, [r7, #4]
 8107690:	f000 fc78 	bl	8107f84 <I2C_ITError>
  }
}
 8107694:	bf00      	nop
 8107696:	3718      	adds	r7, #24
 8107698:	46bd      	mov	sp, r7
 810769a:	bd80      	pop	{r7, pc}

0810769c <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 810769c:	b480      	push	{r7}
 810769e:	b083      	sub	sp, #12
 81076a0:	af00      	add	r7, sp, #0
 81076a2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 81076a4:	bf00      	nop
 81076a6:	370c      	adds	r7, #12
 81076a8:	46bd      	mov	sp, r7
 81076aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 81076ae:	4770      	bx	lr

081076b0 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 81076b0:	b480      	push	{r7}
 81076b2:	b083      	sub	sp, #12
 81076b4:	af00      	add	r7, sp, #0
 81076b6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 81076b8:	bf00      	nop
 81076ba:	370c      	adds	r7, #12
 81076bc:	46bd      	mov	sp, r7
 81076be:	f85d 7b04 	ldr.w	r7, [sp], #4
 81076c2:	4770      	bx	lr

081076c4 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 81076c4:	b480      	push	{r7}
 81076c6:	b083      	sub	sp, #12
 81076c8:	af00      	add	r7, sp, #0
 81076ca:	6078      	str	r0, [r7, #4]
 81076cc:	460b      	mov	r3, r1
 81076ce:	70fb      	strb	r3, [r7, #3]
 81076d0:	4613      	mov	r3, r2
 81076d2:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 81076d4:	bf00      	nop
 81076d6:	370c      	adds	r7, #12
 81076d8:	46bd      	mov	sp, r7
 81076da:	f85d 7b04 	ldr.w	r7, [sp], #4
 81076de:	4770      	bx	lr

081076e0 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 81076e0:	b480      	push	{r7}
 81076e2:	b083      	sub	sp, #12
 81076e4:	af00      	add	r7, sp, #0
 81076e6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 81076e8:	bf00      	nop
 81076ea:	370c      	adds	r7, #12
 81076ec:	46bd      	mov	sp, r7
 81076ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 81076f2:	4770      	bx	lr

081076f4 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 81076f4:	b480      	push	{r7}
 81076f6:	b083      	sub	sp, #12
 81076f8:	af00      	add	r7, sp, #0
 81076fa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 81076fc:	bf00      	nop
 81076fe:	370c      	adds	r7, #12
 8107700:	46bd      	mov	sp, r7
 8107702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107706:	4770      	bx	lr

08107708 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8107708:	b480      	push	{r7}
 810770a:	b083      	sub	sp, #12
 810770c:	af00      	add	r7, sp, #0
 810770e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8107710:	bf00      	nop
 8107712:	370c      	adds	r7, #12
 8107714:	46bd      	mov	sp, r7
 8107716:	f85d 7b04 	ldr.w	r7, [sp], #4
 810771a:	4770      	bx	lr

0810771c <I2C_Slave_ISR_IT>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 810771c:	b580      	push	{r7, lr}
 810771e:	b086      	sub	sp, #24
 8107720:	af00      	add	r7, sp, #0
 8107722:	60f8      	str	r0, [r7, #12]
 8107724:	60b9      	str	r1, [r7, #8]
 8107726:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8107728:	68fb      	ldr	r3, [r7, #12]
 810772a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810772c:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 810772e:	68bb      	ldr	r3, [r7, #8]
 8107730:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8107732:	68fb      	ldr	r3, [r7, #12]
 8107734:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8107738:	2b01      	cmp	r3, #1
 810773a:	d101      	bne.n	8107740 <I2C_Slave_ISR_IT+0x24>
 810773c:	2302      	movs	r3, #2
 810773e:	e0ec      	b.n	810791a <I2C_Slave_ISR_IT+0x1fe>
 8107740:	68fb      	ldr	r3, [r7, #12]
 8107742:	2201      	movs	r2, #1
 8107744:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8107748:	693b      	ldr	r3, [r7, #16]
 810774a:	095b      	lsrs	r3, r3, #5
 810774c:	f003 0301 	and.w	r3, r3, #1
 8107750:	2b00      	cmp	r3, #0
 8107752:	d009      	beq.n	8107768 <I2C_Slave_ISR_IT+0x4c>
 8107754:	687b      	ldr	r3, [r7, #4]
 8107756:	095b      	lsrs	r3, r3, #5
 8107758:	f003 0301 	and.w	r3, r3, #1
 810775c:	2b00      	cmp	r3, #0
 810775e:	d003      	beq.n	8107768 <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8107760:	6939      	ldr	r1, [r7, #16]
 8107762:	68f8      	ldr	r0, [r7, #12]
 8107764:	f000 f9c0 	bl	8107ae8 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8107768:	693b      	ldr	r3, [r7, #16]
 810776a:	091b      	lsrs	r3, r3, #4
 810776c:	f003 0301 	and.w	r3, r3, #1
 8107770:	2b00      	cmp	r3, #0
 8107772:	d04d      	beq.n	8107810 <I2C_Slave_ISR_IT+0xf4>
 8107774:	687b      	ldr	r3, [r7, #4]
 8107776:	091b      	lsrs	r3, r3, #4
 8107778:	f003 0301 	and.w	r3, r3, #1
 810777c:	2b00      	cmp	r3, #0
 810777e:	d047      	beq.n	8107810 <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8107780:	68fb      	ldr	r3, [r7, #12]
 8107782:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8107784:	b29b      	uxth	r3, r3
 8107786:	2b00      	cmp	r3, #0
 8107788:	d128      	bne.n	81077dc <I2C_Slave_ISR_IT+0xc0>
    {
      /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 810778a:	68fb      	ldr	r3, [r7, #12]
 810778c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8107790:	b2db      	uxtb	r3, r3
 8107792:	2b28      	cmp	r3, #40	; 0x28
 8107794:	d108      	bne.n	81077a8 <I2C_Slave_ISR_IT+0x8c>
 8107796:	697b      	ldr	r3, [r7, #20]
 8107798:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 810779c:	d104      	bne.n	81077a8 <I2C_Slave_ISR_IT+0x8c>
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 810779e:	6939      	ldr	r1, [r7, #16]
 81077a0:	68f8      	ldr	r0, [r7, #12]
 81077a2:	f000 fb99 	bl	8107ed8 <I2C_ITListenCplt>
 81077a6:	e032      	b.n	810780e <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 81077a8:	68fb      	ldr	r3, [r7, #12]
 81077aa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 81077ae:	b2db      	uxtb	r3, r3
 81077b0:	2b29      	cmp	r3, #41	; 0x29
 81077b2:	d10e      	bne.n	81077d2 <I2C_Slave_ISR_IT+0xb6>
 81077b4:	697b      	ldr	r3, [r7, #20]
 81077b6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 81077ba:	d00a      	beq.n	81077d2 <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 81077bc:	68fb      	ldr	r3, [r7, #12]
 81077be:	681b      	ldr	r3, [r3, #0]
 81077c0:	2210      	movs	r2, #16
 81077c2:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 81077c4:	68f8      	ldr	r0, [r7, #12]
 81077c6:	f000 fcd4 	bl	8108172 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 81077ca:	68f8      	ldr	r0, [r7, #12]
 81077cc:	f000 f92d 	bl	8107a2a <I2C_ITSlaveSeqCplt>
 81077d0:	e01d      	b.n	810780e <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 81077d2:	68fb      	ldr	r3, [r7, #12]
 81077d4:	681b      	ldr	r3, [r3, #0]
 81077d6:	2210      	movs	r2, #16
 81077d8:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 81077da:	e096      	b.n	810790a <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 81077dc:	68fb      	ldr	r3, [r7, #12]
 81077de:	681b      	ldr	r3, [r3, #0]
 81077e0:	2210      	movs	r2, #16
 81077e2:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 81077e4:	68fb      	ldr	r3, [r7, #12]
 81077e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 81077e8:	f043 0204 	orr.w	r2, r3, #4
 81077ec:	68fb      	ldr	r3, [r7, #12]
 81077ee:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 81077f0:	697b      	ldr	r3, [r7, #20]
 81077f2:	2b00      	cmp	r3, #0
 81077f4:	d004      	beq.n	8107800 <I2C_Slave_ISR_IT+0xe4>
 81077f6:	697b      	ldr	r3, [r7, #20]
 81077f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 81077fc:	f040 8085 	bne.w	810790a <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8107800:	68fb      	ldr	r3, [r7, #12]
 8107802:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8107804:	4619      	mov	r1, r3
 8107806:	68f8      	ldr	r0, [r7, #12]
 8107808:	f000 fbbc 	bl	8107f84 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 810780c:	e07d      	b.n	810790a <I2C_Slave_ISR_IT+0x1ee>
 810780e:	e07c      	b.n	810790a <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8107810:	693b      	ldr	r3, [r7, #16]
 8107812:	089b      	lsrs	r3, r3, #2
 8107814:	f003 0301 	and.w	r3, r3, #1
 8107818:	2b00      	cmp	r3, #0
 810781a:	d030      	beq.n	810787e <I2C_Slave_ISR_IT+0x162>
 810781c:	687b      	ldr	r3, [r7, #4]
 810781e:	089b      	lsrs	r3, r3, #2
 8107820:	f003 0301 	and.w	r3, r3, #1
 8107824:	2b00      	cmp	r3, #0
 8107826:	d02a      	beq.n	810787e <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 8107828:	68fb      	ldr	r3, [r7, #12]
 810782a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 810782c:	b29b      	uxth	r3, r3
 810782e:	2b00      	cmp	r3, #0
 8107830:	d018      	beq.n	8107864 <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8107832:	68fb      	ldr	r3, [r7, #12]
 8107834:	681b      	ldr	r3, [r3, #0]
 8107836:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8107838:	68fb      	ldr	r3, [r7, #12]
 810783a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810783c:	b2d2      	uxtb	r2, r2
 810783e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8107840:	68fb      	ldr	r3, [r7, #12]
 8107842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8107844:	1c5a      	adds	r2, r3, #1
 8107846:	68fb      	ldr	r3, [r7, #12]
 8107848:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 810784a:	68fb      	ldr	r3, [r7, #12]
 810784c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 810784e:	3b01      	subs	r3, #1
 8107850:	b29a      	uxth	r2, r3
 8107852:	68fb      	ldr	r3, [r7, #12]
 8107854:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8107856:	68fb      	ldr	r3, [r7, #12]
 8107858:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 810785a:	b29b      	uxth	r3, r3
 810785c:	3b01      	subs	r3, #1
 810785e:	b29a      	uxth	r2, r3
 8107860:	68fb      	ldr	r3, [r7, #12]
 8107862:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8107864:	68fb      	ldr	r3, [r7, #12]
 8107866:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8107868:	b29b      	uxth	r3, r3
 810786a:	2b00      	cmp	r3, #0
 810786c:	d14f      	bne.n	810790e <I2C_Slave_ISR_IT+0x1f2>
 810786e:	697b      	ldr	r3, [r7, #20]
 8107870:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8107874:	d04b      	beq.n	810790e <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8107876:	68f8      	ldr	r0, [r7, #12]
 8107878:	f000 f8d7 	bl	8107a2a <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 810787c:	e047      	b.n	810790e <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 810787e:	693b      	ldr	r3, [r7, #16]
 8107880:	08db      	lsrs	r3, r3, #3
 8107882:	f003 0301 	and.w	r3, r3, #1
 8107886:	2b00      	cmp	r3, #0
 8107888:	d00a      	beq.n	81078a0 <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 810788a:	687b      	ldr	r3, [r7, #4]
 810788c:	08db      	lsrs	r3, r3, #3
 810788e:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8107892:	2b00      	cmp	r3, #0
 8107894:	d004      	beq.n	81078a0 <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8107896:	6939      	ldr	r1, [r7, #16]
 8107898:	68f8      	ldr	r0, [r7, #12]
 810789a:	f000 f842 	bl	8107922 <I2C_ITAddrCplt>
 810789e:	e037      	b.n	8107910 <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 81078a0:	693b      	ldr	r3, [r7, #16]
 81078a2:	085b      	lsrs	r3, r3, #1
 81078a4:	f003 0301 	and.w	r3, r3, #1
 81078a8:	2b00      	cmp	r3, #0
 81078aa:	d031      	beq.n	8107910 <I2C_Slave_ISR_IT+0x1f4>
 81078ac:	687b      	ldr	r3, [r7, #4]
 81078ae:	085b      	lsrs	r3, r3, #1
 81078b0:	f003 0301 	and.w	r3, r3, #1
 81078b4:	2b00      	cmp	r3, #0
 81078b6:	d02b      	beq.n	8107910 <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 81078b8:	68fb      	ldr	r3, [r7, #12]
 81078ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 81078bc:	b29b      	uxth	r3, r3
 81078be:	2b00      	cmp	r3, #0
 81078c0:	d018      	beq.n	81078f4 <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 81078c2:	68fb      	ldr	r3, [r7, #12]
 81078c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81078c6:	781a      	ldrb	r2, [r3, #0]
 81078c8:	68fb      	ldr	r3, [r7, #12]
 81078ca:	681b      	ldr	r3, [r3, #0]
 81078cc:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 81078ce:	68fb      	ldr	r3, [r7, #12]
 81078d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81078d2:	1c5a      	adds	r2, r3, #1
 81078d4:	68fb      	ldr	r3, [r7, #12]
 81078d6:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 81078d8:	68fb      	ldr	r3, [r7, #12]
 81078da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 81078dc:	b29b      	uxth	r3, r3
 81078de:	3b01      	subs	r3, #1
 81078e0:	b29a      	uxth	r2, r3
 81078e2:	68fb      	ldr	r3, [r7, #12]
 81078e4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 81078e6:	68fb      	ldr	r3, [r7, #12]
 81078e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 81078ea:	3b01      	subs	r3, #1
 81078ec:	b29a      	uxth	r2, r3
 81078ee:	68fb      	ldr	r3, [r7, #12]
 81078f0:	851a      	strh	r2, [r3, #40]	; 0x28
 81078f2:	e00d      	b.n	8107910 <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 81078f4:	697b      	ldr	r3, [r7, #20]
 81078f6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 81078fa:	d002      	beq.n	8107902 <I2C_Slave_ISR_IT+0x1e6>
 81078fc:	697b      	ldr	r3, [r7, #20]
 81078fe:	2b00      	cmp	r3, #0
 8107900:	d106      	bne.n	8107910 <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8107902:	68f8      	ldr	r0, [r7, #12]
 8107904:	f000 f891 	bl	8107a2a <I2C_ITSlaveSeqCplt>
 8107908:	e002      	b.n	8107910 <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 810790a:	bf00      	nop
 810790c:	e000      	b.n	8107910 <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 810790e:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8107910:	68fb      	ldr	r3, [r7, #12]
 8107912:	2200      	movs	r2, #0
 8107914:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8107918:	2300      	movs	r3, #0
}
 810791a:	4618      	mov	r0, r3
 810791c:	3718      	adds	r7, #24
 810791e:	46bd      	mov	sp, r7
 8107920:	bd80      	pop	{r7, pc}

08107922 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8107922:	b580      	push	{r7, lr}
 8107924:	b084      	sub	sp, #16
 8107926:	af00      	add	r7, sp, #0
 8107928:	6078      	str	r0, [r7, #4]
 810792a:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 810792c:	687b      	ldr	r3, [r7, #4]
 810792e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8107932:	b2db      	uxtb	r3, r3
 8107934:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8107938:	2b28      	cmp	r3, #40	; 0x28
 810793a:	d16a      	bne.n	8107a12 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 810793c:	687b      	ldr	r3, [r7, #4]
 810793e:	681b      	ldr	r3, [r3, #0]
 8107940:	699b      	ldr	r3, [r3, #24]
 8107942:	0c1b      	lsrs	r3, r3, #16
 8107944:	b2db      	uxtb	r3, r3
 8107946:	f003 0301 	and.w	r3, r3, #1
 810794a:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 810794c:	687b      	ldr	r3, [r7, #4]
 810794e:	681b      	ldr	r3, [r3, #0]
 8107950:	699b      	ldr	r3, [r3, #24]
 8107952:	0c1b      	lsrs	r3, r3, #16
 8107954:	b29b      	uxth	r3, r3
 8107956:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 810795a:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 810795c:	687b      	ldr	r3, [r7, #4]
 810795e:	681b      	ldr	r3, [r3, #0]
 8107960:	689b      	ldr	r3, [r3, #8]
 8107962:	b29b      	uxth	r3, r3
 8107964:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8107968:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 810796a:	687b      	ldr	r3, [r7, #4]
 810796c:	681b      	ldr	r3, [r3, #0]
 810796e:	68db      	ldr	r3, [r3, #12]
 8107970:	b29b      	uxth	r3, r3
 8107972:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8107976:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8107978:	687b      	ldr	r3, [r7, #4]
 810797a:	68db      	ldr	r3, [r3, #12]
 810797c:	2b02      	cmp	r3, #2
 810797e:	d138      	bne.n	81079f2 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 8107980:	897b      	ldrh	r3, [r7, #10]
 8107982:	09db      	lsrs	r3, r3, #7
 8107984:	b29a      	uxth	r2, r3
 8107986:	89bb      	ldrh	r3, [r7, #12]
 8107988:	4053      	eors	r3, r2
 810798a:	b29b      	uxth	r3, r3
 810798c:	f003 0306 	and.w	r3, r3, #6
 8107990:	2b00      	cmp	r3, #0
 8107992:	d11c      	bne.n	81079ce <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8107994:	897b      	ldrh	r3, [r7, #10]
 8107996:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8107998:	687b      	ldr	r3, [r7, #4]
 810799a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 810799c:	1c5a      	adds	r2, r3, #1
 810799e:	687b      	ldr	r3, [r7, #4]
 81079a0:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 81079a2:	687b      	ldr	r3, [r7, #4]
 81079a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 81079a6:	2b02      	cmp	r3, #2
 81079a8:	d13b      	bne.n	8107a22 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 81079aa:	687b      	ldr	r3, [r7, #4]
 81079ac:	2200      	movs	r2, #0
 81079ae:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 81079b0:	687b      	ldr	r3, [r7, #4]
 81079b2:	681b      	ldr	r3, [r3, #0]
 81079b4:	2208      	movs	r2, #8
 81079b6:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 81079b8:	687b      	ldr	r3, [r7, #4]
 81079ba:	2200      	movs	r2, #0
 81079bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 81079c0:	89ba      	ldrh	r2, [r7, #12]
 81079c2:	7bfb      	ldrb	r3, [r7, #15]
 81079c4:	4619      	mov	r1, r3
 81079c6:	6878      	ldr	r0, [r7, #4]
 81079c8:	f7ff fe7c 	bl	81076c4 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 81079cc:	e029      	b.n	8107a22 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 81079ce:	893b      	ldrh	r3, [r7, #8]
 81079d0:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 81079d2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 81079d6:	6878      	ldr	r0, [r7, #4]
 81079d8:	f000 fc0d 	bl	81081f6 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 81079dc:	687b      	ldr	r3, [r7, #4]
 81079de:	2200      	movs	r2, #0
 81079e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 81079e4:	89ba      	ldrh	r2, [r7, #12]
 81079e6:	7bfb      	ldrb	r3, [r7, #15]
 81079e8:	4619      	mov	r1, r3
 81079ea:	6878      	ldr	r0, [r7, #4]
 81079ec:	f7ff fe6a 	bl	81076c4 <HAL_I2C_AddrCallback>
}
 81079f0:	e017      	b.n	8107a22 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 81079f2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 81079f6:	6878      	ldr	r0, [r7, #4]
 81079f8:	f000 fbfd 	bl	81081f6 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 81079fc:	687b      	ldr	r3, [r7, #4]
 81079fe:	2200      	movs	r2, #0
 8107a00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8107a04:	89ba      	ldrh	r2, [r7, #12]
 8107a06:	7bfb      	ldrb	r3, [r7, #15]
 8107a08:	4619      	mov	r1, r3
 8107a0a:	6878      	ldr	r0, [r7, #4]
 8107a0c:	f7ff fe5a 	bl	81076c4 <HAL_I2C_AddrCallback>
}
 8107a10:	e007      	b.n	8107a22 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8107a12:	687b      	ldr	r3, [r7, #4]
 8107a14:	681b      	ldr	r3, [r3, #0]
 8107a16:	2208      	movs	r2, #8
 8107a18:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8107a1a:	687b      	ldr	r3, [r7, #4]
 8107a1c:	2200      	movs	r2, #0
 8107a1e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8107a22:	bf00      	nop
 8107a24:	3710      	adds	r7, #16
 8107a26:	46bd      	mov	sp, r7
 8107a28:	bd80      	pop	{r7, pc}

08107a2a <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8107a2a:	b580      	push	{r7, lr}
 8107a2c:	b084      	sub	sp, #16
 8107a2e:	af00      	add	r7, sp, #0
 8107a30:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8107a32:	687b      	ldr	r3, [r7, #4]
 8107a34:	681b      	ldr	r3, [r3, #0]
 8107a36:	681b      	ldr	r3, [r3, #0]
 8107a38:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8107a3a:	687b      	ldr	r3, [r7, #4]
 8107a3c:	2200      	movs	r2, #0
 8107a3e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8107a42:	68fb      	ldr	r3, [r7, #12]
 8107a44:	0b9b      	lsrs	r3, r3, #14
 8107a46:	f003 0301 	and.w	r3, r3, #1
 8107a4a:	2b00      	cmp	r3, #0
 8107a4c:	d008      	beq.n	8107a60 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8107a4e:	687b      	ldr	r3, [r7, #4]
 8107a50:	681b      	ldr	r3, [r3, #0]
 8107a52:	681a      	ldr	r2, [r3, #0]
 8107a54:	687b      	ldr	r3, [r7, #4]
 8107a56:	681b      	ldr	r3, [r3, #0]
 8107a58:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8107a5c:	601a      	str	r2, [r3, #0]
 8107a5e:	e00d      	b.n	8107a7c <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8107a60:	68fb      	ldr	r3, [r7, #12]
 8107a62:	0bdb      	lsrs	r3, r3, #15
 8107a64:	f003 0301 	and.w	r3, r3, #1
 8107a68:	2b00      	cmp	r3, #0
 8107a6a:	d007      	beq.n	8107a7c <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8107a6c:	687b      	ldr	r3, [r7, #4]
 8107a6e:	681b      	ldr	r3, [r3, #0]
 8107a70:	681a      	ldr	r2, [r3, #0]
 8107a72:	687b      	ldr	r3, [r7, #4]
 8107a74:	681b      	ldr	r3, [r3, #0]
 8107a76:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8107a7a:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8107a7c:	687b      	ldr	r3, [r7, #4]
 8107a7e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8107a82:	b2db      	uxtb	r3, r3
 8107a84:	2b29      	cmp	r3, #41	; 0x29
 8107a86:	d112      	bne.n	8107aae <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8107a88:	687b      	ldr	r3, [r7, #4]
 8107a8a:	2228      	movs	r2, #40	; 0x28
 8107a8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8107a90:	687b      	ldr	r3, [r7, #4]
 8107a92:	2221      	movs	r2, #33	; 0x21
 8107a94:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8107a96:	2101      	movs	r1, #1
 8107a98:	6878      	ldr	r0, [r7, #4]
 8107a9a:	f000 fbac 	bl	81081f6 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8107a9e:	687b      	ldr	r3, [r7, #4]
 8107aa0:	2200      	movs	r2, #0
 8107aa2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8107aa6:	6878      	ldr	r0, [r7, #4]
 8107aa8:	f7ff fdf8 	bl	810769c <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8107aac:	e017      	b.n	8107ade <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8107aae:	687b      	ldr	r3, [r7, #4]
 8107ab0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8107ab4:	b2db      	uxtb	r3, r3
 8107ab6:	2b2a      	cmp	r3, #42	; 0x2a
 8107ab8:	d111      	bne.n	8107ade <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8107aba:	687b      	ldr	r3, [r7, #4]
 8107abc:	2228      	movs	r2, #40	; 0x28
 8107abe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8107ac2:	687b      	ldr	r3, [r7, #4]
 8107ac4:	2222      	movs	r2, #34	; 0x22
 8107ac6:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8107ac8:	2102      	movs	r1, #2
 8107aca:	6878      	ldr	r0, [r7, #4]
 8107acc:	f000 fb93 	bl	81081f6 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8107ad0:	687b      	ldr	r3, [r7, #4]
 8107ad2:	2200      	movs	r2, #0
 8107ad4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8107ad8:	6878      	ldr	r0, [r7, #4]
 8107ada:	f7ff fde9 	bl	81076b0 <HAL_I2C_SlaveRxCpltCallback>
}
 8107ade:	bf00      	nop
 8107ae0:	3710      	adds	r7, #16
 8107ae2:	46bd      	mov	sp, r7
 8107ae4:	bd80      	pop	{r7, pc}
	...

08107ae8 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8107ae8:	b580      	push	{r7, lr}
 8107aea:	b086      	sub	sp, #24
 8107aec:	af00      	add	r7, sp, #0
 8107aee:	6078      	str	r0, [r7, #4]
 8107af0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8107af2:	687b      	ldr	r3, [r7, #4]
 8107af4:	681b      	ldr	r3, [r3, #0]
 8107af6:	681b      	ldr	r3, [r3, #0]
 8107af8:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8107afa:	683b      	ldr	r3, [r7, #0]
 8107afc:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8107afe:	687b      	ldr	r3, [r7, #4]
 8107b00:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8107b04:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8107b06:	687b      	ldr	r3, [r7, #4]
 8107b08:	681b      	ldr	r3, [r3, #0]
 8107b0a:	2220      	movs	r2, #32
 8107b0c:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8107b0e:	7bfb      	ldrb	r3, [r7, #15]
 8107b10:	2b21      	cmp	r3, #33	; 0x21
 8107b12:	d002      	beq.n	8107b1a <I2C_ITSlaveCplt+0x32>
 8107b14:	7bfb      	ldrb	r3, [r7, #15]
 8107b16:	2b29      	cmp	r3, #41	; 0x29
 8107b18:	d108      	bne.n	8107b2c <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8107b1a:	f248 0101 	movw	r1, #32769	; 0x8001
 8107b1e:	6878      	ldr	r0, [r7, #4]
 8107b20:	f000 fb69 	bl	81081f6 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8107b24:	687b      	ldr	r3, [r7, #4]
 8107b26:	2221      	movs	r2, #33	; 0x21
 8107b28:	631a      	str	r2, [r3, #48]	; 0x30
 8107b2a:	e00d      	b.n	8107b48 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8107b2c:	7bfb      	ldrb	r3, [r7, #15]
 8107b2e:	2b22      	cmp	r3, #34	; 0x22
 8107b30:	d002      	beq.n	8107b38 <I2C_ITSlaveCplt+0x50>
 8107b32:	7bfb      	ldrb	r3, [r7, #15]
 8107b34:	2b2a      	cmp	r3, #42	; 0x2a
 8107b36:	d107      	bne.n	8107b48 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8107b38:	f248 0102 	movw	r1, #32770	; 0x8002
 8107b3c:	6878      	ldr	r0, [r7, #4]
 8107b3e:	f000 fb5a 	bl	81081f6 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8107b42:	687b      	ldr	r3, [r7, #4]
 8107b44:	2222      	movs	r2, #34	; 0x22
 8107b46:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8107b48:	687b      	ldr	r3, [r7, #4]
 8107b4a:	681b      	ldr	r3, [r3, #0]
 8107b4c:	685a      	ldr	r2, [r3, #4]
 8107b4e:	687b      	ldr	r3, [r7, #4]
 8107b50:	681b      	ldr	r3, [r3, #0]
 8107b52:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8107b56:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8107b58:	687b      	ldr	r3, [r7, #4]
 8107b5a:	681b      	ldr	r3, [r3, #0]
 8107b5c:	6859      	ldr	r1, [r3, #4]
 8107b5e:	687b      	ldr	r3, [r7, #4]
 8107b60:	681a      	ldr	r2, [r3, #0]
 8107b62:	4b80      	ldr	r3, [pc, #512]	; (8107d64 <I2C_ITSlaveCplt+0x27c>)
 8107b64:	400b      	ands	r3, r1
 8107b66:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8107b68:	6878      	ldr	r0, [r7, #4]
 8107b6a:	f000 fb02 	bl	8108172 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8107b6e:	693b      	ldr	r3, [r7, #16]
 8107b70:	0b9b      	lsrs	r3, r3, #14
 8107b72:	f003 0301 	and.w	r3, r3, #1
 8107b76:	2b00      	cmp	r3, #0
 8107b78:	d07a      	beq.n	8107c70 <I2C_ITSlaveCplt+0x188>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8107b7a:	687b      	ldr	r3, [r7, #4]
 8107b7c:	681b      	ldr	r3, [r3, #0]
 8107b7e:	681a      	ldr	r2, [r3, #0]
 8107b80:	687b      	ldr	r3, [r7, #4]
 8107b82:	681b      	ldr	r3, [r3, #0]
 8107b84:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8107b88:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8107b8a:	687b      	ldr	r3, [r7, #4]
 8107b8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8107b8e:	2b00      	cmp	r3, #0
 8107b90:	f000 8111 	beq.w	8107db6 <I2C_ITSlaveCplt+0x2ce>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 8107b94:	687b      	ldr	r3, [r7, #4]
 8107b96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8107b98:	681b      	ldr	r3, [r3, #0]
 8107b9a:	4a73      	ldr	r2, [pc, #460]	; (8107d68 <I2C_ITSlaveCplt+0x280>)
 8107b9c:	4293      	cmp	r3, r2
 8107b9e:	d059      	beq.n	8107c54 <I2C_ITSlaveCplt+0x16c>
 8107ba0:	687b      	ldr	r3, [r7, #4]
 8107ba2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8107ba4:	681b      	ldr	r3, [r3, #0]
 8107ba6:	4a71      	ldr	r2, [pc, #452]	; (8107d6c <I2C_ITSlaveCplt+0x284>)
 8107ba8:	4293      	cmp	r3, r2
 8107baa:	d053      	beq.n	8107c54 <I2C_ITSlaveCplt+0x16c>
 8107bac:	687b      	ldr	r3, [r7, #4]
 8107bae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8107bb0:	681b      	ldr	r3, [r3, #0]
 8107bb2:	4a6f      	ldr	r2, [pc, #444]	; (8107d70 <I2C_ITSlaveCplt+0x288>)
 8107bb4:	4293      	cmp	r3, r2
 8107bb6:	d04d      	beq.n	8107c54 <I2C_ITSlaveCplt+0x16c>
 8107bb8:	687b      	ldr	r3, [r7, #4]
 8107bba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8107bbc:	681b      	ldr	r3, [r3, #0]
 8107bbe:	4a6d      	ldr	r2, [pc, #436]	; (8107d74 <I2C_ITSlaveCplt+0x28c>)
 8107bc0:	4293      	cmp	r3, r2
 8107bc2:	d047      	beq.n	8107c54 <I2C_ITSlaveCplt+0x16c>
 8107bc4:	687b      	ldr	r3, [r7, #4]
 8107bc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8107bc8:	681b      	ldr	r3, [r3, #0]
 8107bca:	4a6b      	ldr	r2, [pc, #428]	; (8107d78 <I2C_ITSlaveCplt+0x290>)
 8107bcc:	4293      	cmp	r3, r2
 8107bce:	d041      	beq.n	8107c54 <I2C_ITSlaveCplt+0x16c>
 8107bd0:	687b      	ldr	r3, [r7, #4]
 8107bd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8107bd4:	681b      	ldr	r3, [r3, #0]
 8107bd6:	4a69      	ldr	r2, [pc, #420]	; (8107d7c <I2C_ITSlaveCplt+0x294>)
 8107bd8:	4293      	cmp	r3, r2
 8107bda:	d03b      	beq.n	8107c54 <I2C_ITSlaveCplt+0x16c>
 8107bdc:	687b      	ldr	r3, [r7, #4]
 8107bde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8107be0:	681b      	ldr	r3, [r3, #0]
 8107be2:	4a67      	ldr	r2, [pc, #412]	; (8107d80 <I2C_ITSlaveCplt+0x298>)
 8107be4:	4293      	cmp	r3, r2
 8107be6:	d035      	beq.n	8107c54 <I2C_ITSlaveCplt+0x16c>
 8107be8:	687b      	ldr	r3, [r7, #4]
 8107bea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8107bec:	681b      	ldr	r3, [r3, #0]
 8107bee:	4a65      	ldr	r2, [pc, #404]	; (8107d84 <I2C_ITSlaveCplt+0x29c>)
 8107bf0:	4293      	cmp	r3, r2
 8107bf2:	d02f      	beq.n	8107c54 <I2C_ITSlaveCplt+0x16c>
 8107bf4:	687b      	ldr	r3, [r7, #4]
 8107bf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8107bf8:	681b      	ldr	r3, [r3, #0]
 8107bfa:	4a63      	ldr	r2, [pc, #396]	; (8107d88 <I2C_ITSlaveCplt+0x2a0>)
 8107bfc:	4293      	cmp	r3, r2
 8107bfe:	d029      	beq.n	8107c54 <I2C_ITSlaveCplt+0x16c>
 8107c00:	687b      	ldr	r3, [r7, #4]
 8107c02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8107c04:	681b      	ldr	r3, [r3, #0]
 8107c06:	4a61      	ldr	r2, [pc, #388]	; (8107d8c <I2C_ITSlaveCplt+0x2a4>)
 8107c08:	4293      	cmp	r3, r2
 8107c0a:	d023      	beq.n	8107c54 <I2C_ITSlaveCplt+0x16c>
 8107c0c:	687b      	ldr	r3, [r7, #4]
 8107c0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8107c10:	681b      	ldr	r3, [r3, #0]
 8107c12:	4a5f      	ldr	r2, [pc, #380]	; (8107d90 <I2C_ITSlaveCplt+0x2a8>)
 8107c14:	4293      	cmp	r3, r2
 8107c16:	d01d      	beq.n	8107c54 <I2C_ITSlaveCplt+0x16c>
 8107c18:	687b      	ldr	r3, [r7, #4]
 8107c1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8107c1c:	681b      	ldr	r3, [r3, #0]
 8107c1e:	4a5d      	ldr	r2, [pc, #372]	; (8107d94 <I2C_ITSlaveCplt+0x2ac>)
 8107c20:	4293      	cmp	r3, r2
 8107c22:	d017      	beq.n	8107c54 <I2C_ITSlaveCplt+0x16c>
 8107c24:	687b      	ldr	r3, [r7, #4]
 8107c26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8107c28:	681b      	ldr	r3, [r3, #0]
 8107c2a:	4a5b      	ldr	r2, [pc, #364]	; (8107d98 <I2C_ITSlaveCplt+0x2b0>)
 8107c2c:	4293      	cmp	r3, r2
 8107c2e:	d011      	beq.n	8107c54 <I2C_ITSlaveCplt+0x16c>
 8107c30:	687b      	ldr	r3, [r7, #4]
 8107c32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8107c34:	681b      	ldr	r3, [r3, #0]
 8107c36:	4a59      	ldr	r2, [pc, #356]	; (8107d9c <I2C_ITSlaveCplt+0x2b4>)
 8107c38:	4293      	cmp	r3, r2
 8107c3a:	d00b      	beq.n	8107c54 <I2C_ITSlaveCplt+0x16c>
 8107c3c:	687b      	ldr	r3, [r7, #4]
 8107c3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8107c40:	681b      	ldr	r3, [r3, #0]
 8107c42:	4a57      	ldr	r2, [pc, #348]	; (8107da0 <I2C_ITSlaveCplt+0x2b8>)
 8107c44:	4293      	cmp	r3, r2
 8107c46:	d005      	beq.n	8107c54 <I2C_ITSlaveCplt+0x16c>
 8107c48:	687b      	ldr	r3, [r7, #4]
 8107c4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8107c4c:	681b      	ldr	r3, [r3, #0]
 8107c4e:	4a55      	ldr	r2, [pc, #340]	; (8107da4 <I2C_ITSlaveCplt+0x2bc>)
 8107c50:	4293      	cmp	r3, r2
 8107c52:	d105      	bne.n	8107c60 <I2C_ITSlaveCplt+0x178>
 8107c54:	687b      	ldr	r3, [r7, #4]
 8107c56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8107c58:	681b      	ldr	r3, [r3, #0]
 8107c5a:	685b      	ldr	r3, [r3, #4]
 8107c5c:	b29b      	uxth	r3, r3
 8107c5e:	e004      	b.n	8107c6a <I2C_ITSlaveCplt+0x182>
 8107c60:	687b      	ldr	r3, [r7, #4]
 8107c62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8107c64:	681b      	ldr	r3, [r3, #0]
 8107c66:	685b      	ldr	r3, [r3, #4]
 8107c68:	b29b      	uxth	r3, r3
 8107c6a:	687a      	ldr	r2, [r7, #4]
 8107c6c:	8553      	strh	r3, [r2, #42]	; 0x2a
 8107c6e:	e0a2      	b.n	8107db6 <I2C_ITSlaveCplt+0x2ce>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8107c70:	693b      	ldr	r3, [r7, #16]
 8107c72:	0bdb      	lsrs	r3, r3, #15
 8107c74:	f003 0301 	and.w	r3, r3, #1
 8107c78:	2b00      	cmp	r3, #0
 8107c7a:	f000 809c 	beq.w	8107db6 <I2C_ITSlaveCplt+0x2ce>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8107c7e:	687b      	ldr	r3, [r7, #4]
 8107c80:	681b      	ldr	r3, [r3, #0]
 8107c82:	681a      	ldr	r2, [r3, #0]
 8107c84:	687b      	ldr	r3, [r7, #4]
 8107c86:	681b      	ldr	r3, [r3, #0]
 8107c88:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8107c8c:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8107c8e:	687b      	ldr	r3, [r7, #4]
 8107c90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8107c92:	2b00      	cmp	r3, #0
 8107c94:	f000 808f 	beq.w	8107db6 <I2C_ITSlaveCplt+0x2ce>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 8107c98:	687b      	ldr	r3, [r7, #4]
 8107c9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8107c9c:	681b      	ldr	r3, [r3, #0]
 8107c9e:	4a32      	ldr	r2, [pc, #200]	; (8107d68 <I2C_ITSlaveCplt+0x280>)
 8107ca0:	4293      	cmp	r3, r2
 8107ca2:	d059      	beq.n	8107d58 <I2C_ITSlaveCplt+0x270>
 8107ca4:	687b      	ldr	r3, [r7, #4]
 8107ca6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8107ca8:	681b      	ldr	r3, [r3, #0]
 8107caa:	4a30      	ldr	r2, [pc, #192]	; (8107d6c <I2C_ITSlaveCplt+0x284>)
 8107cac:	4293      	cmp	r3, r2
 8107cae:	d053      	beq.n	8107d58 <I2C_ITSlaveCplt+0x270>
 8107cb0:	687b      	ldr	r3, [r7, #4]
 8107cb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8107cb4:	681b      	ldr	r3, [r3, #0]
 8107cb6:	4a2e      	ldr	r2, [pc, #184]	; (8107d70 <I2C_ITSlaveCplt+0x288>)
 8107cb8:	4293      	cmp	r3, r2
 8107cba:	d04d      	beq.n	8107d58 <I2C_ITSlaveCplt+0x270>
 8107cbc:	687b      	ldr	r3, [r7, #4]
 8107cbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8107cc0:	681b      	ldr	r3, [r3, #0]
 8107cc2:	4a2c      	ldr	r2, [pc, #176]	; (8107d74 <I2C_ITSlaveCplt+0x28c>)
 8107cc4:	4293      	cmp	r3, r2
 8107cc6:	d047      	beq.n	8107d58 <I2C_ITSlaveCplt+0x270>
 8107cc8:	687b      	ldr	r3, [r7, #4]
 8107cca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8107ccc:	681b      	ldr	r3, [r3, #0]
 8107cce:	4a2a      	ldr	r2, [pc, #168]	; (8107d78 <I2C_ITSlaveCplt+0x290>)
 8107cd0:	4293      	cmp	r3, r2
 8107cd2:	d041      	beq.n	8107d58 <I2C_ITSlaveCplt+0x270>
 8107cd4:	687b      	ldr	r3, [r7, #4]
 8107cd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8107cd8:	681b      	ldr	r3, [r3, #0]
 8107cda:	4a28      	ldr	r2, [pc, #160]	; (8107d7c <I2C_ITSlaveCplt+0x294>)
 8107cdc:	4293      	cmp	r3, r2
 8107cde:	d03b      	beq.n	8107d58 <I2C_ITSlaveCplt+0x270>
 8107ce0:	687b      	ldr	r3, [r7, #4]
 8107ce2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8107ce4:	681b      	ldr	r3, [r3, #0]
 8107ce6:	4a26      	ldr	r2, [pc, #152]	; (8107d80 <I2C_ITSlaveCplt+0x298>)
 8107ce8:	4293      	cmp	r3, r2
 8107cea:	d035      	beq.n	8107d58 <I2C_ITSlaveCplt+0x270>
 8107cec:	687b      	ldr	r3, [r7, #4]
 8107cee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8107cf0:	681b      	ldr	r3, [r3, #0]
 8107cf2:	4a24      	ldr	r2, [pc, #144]	; (8107d84 <I2C_ITSlaveCplt+0x29c>)
 8107cf4:	4293      	cmp	r3, r2
 8107cf6:	d02f      	beq.n	8107d58 <I2C_ITSlaveCplt+0x270>
 8107cf8:	687b      	ldr	r3, [r7, #4]
 8107cfa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8107cfc:	681b      	ldr	r3, [r3, #0]
 8107cfe:	4a22      	ldr	r2, [pc, #136]	; (8107d88 <I2C_ITSlaveCplt+0x2a0>)
 8107d00:	4293      	cmp	r3, r2
 8107d02:	d029      	beq.n	8107d58 <I2C_ITSlaveCplt+0x270>
 8107d04:	687b      	ldr	r3, [r7, #4]
 8107d06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8107d08:	681b      	ldr	r3, [r3, #0]
 8107d0a:	4a20      	ldr	r2, [pc, #128]	; (8107d8c <I2C_ITSlaveCplt+0x2a4>)
 8107d0c:	4293      	cmp	r3, r2
 8107d0e:	d023      	beq.n	8107d58 <I2C_ITSlaveCplt+0x270>
 8107d10:	687b      	ldr	r3, [r7, #4]
 8107d12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8107d14:	681b      	ldr	r3, [r3, #0]
 8107d16:	4a1e      	ldr	r2, [pc, #120]	; (8107d90 <I2C_ITSlaveCplt+0x2a8>)
 8107d18:	4293      	cmp	r3, r2
 8107d1a:	d01d      	beq.n	8107d58 <I2C_ITSlaveCplt+0x270>
 8107d1c:	687b      	ldr	r3, [r7, #4]
 8107d1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8107d20:	681b      	ldr	r3, [r3, #0]
 8107d22:	4a1c      	ldr	r2, [pc, #112]	; (8107d94 <I2C_ITSlaveCplt+0x2ac>)
 8107d24:	4293      	cmp	r3, r2
 8107d26:	d017      	beq.n	8107d58 <I2C_ITSlaveCplt+0x270>
 8107d28:	687b      	ldr	r3, [r7, #4]
 8107d2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8107d2c:	681b      	ldr	r3, [r3, #0]
 8107d2e:	4a1a      	ldr	r2, [pc, #104]	; (8107d98 <I2C_ITSlaveCplt+0x2b0>)
 8107d30:	4293      	cmp	r3, r2
 8107d32:	d011      	beq.n	8107d58 <I2C_ITSlaveCplt+0x270>
 8107d34:	687b      	ldr	r3, [r7, #4]
 8107d36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8107d38:	681b      	ldr	r3, [r3, #0]
 8107d3a:	4a18      	ldr	r2, [pc, #96]	; (8107d9c <I2C_ITSlaveCplt+0x2b4>)
 8107d3c:	4293      	cmp	r3, r2
 8107d3e:	d00b      	beq.n	8107d58 <I2C_ITSlaveCplt+0x270>
 8107d40:	687b      	ldr	r3, [r7, #4]
 8107d42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8107d44:	681b      	ldr	r3, [r3, #0]
 8107d46:	4a16      	ldr	r2, [pc, #88]	; (8107da0 <I2C_ITSlaveCplt+0x2b8>)
 8107d48:	4293      	cmp	r3, r2
 8107d4a:	d005      	beq.n	8107d58 <I2C_ITSlaveCplt+0x270>
 8107d4c:	687b      	ldr	r3, [r7, #4]
 8107d4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8107d50:	681b      	ldr	r3, [r3, #0]
 8107d52:	4a14      	ldr	r2, [pc, #80]	; (8107da4 <I2C_ITSlaveCplt+0x2bc>)
 8107d54:	4293      	cmp	r3, r2
 8107d56:	d127      	bne.n	8107da8 <I2C_ITSlaveCplt+0x2c0>
 8107d58:	687b      	ldr	r3, [r7, #4]
 8107d5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8107d5c:	681b      	ldr	r3, [r3, #0]
 8107d5e:	685b      	ldr	r3, [r3, #4]
 8107d60:	b29b      	uxth	r3, r3
 8107d62:	e026      	b.n	8107db2 <I2C_ITSlaveCplt+0x2ca>
 8107d64:	fe00e800 	.word	0xfe00e800
 8107d68:	40020010 	.word	0x40020010
 8107d6c:	40020028 	.word	0x40020028
 8107d70:	40020040 	.word	0x40020040
 8107d74:	40020058 	.word	0x40020058
 8107d78:	40020070 	.word	0x40020070
 8107d7c:	40020088 	.word	0x40020088
 8107d80:	400200a0 	.word	0x400200a0
 8107d84:	400200b8 	.word	0x400200b8
 8107d88:	40020410 	.word	0x40020410
 8107d8c:	40020428 	.word	0x40020428
 8107d90:	40020440 	.word	0x40020440
 8107d94:	40020458 	.word	0x40020458
 8107d98:	40020470 	.word	0x40020470
 8107d9c:	40020488 	.word	0x40020488
 8107da0:	400204a0 	.word	0x400204a0
 8107da4:	400204b8 	.word	0x400204b8
 8107da8:	687b      	ldr	r3, [r7, #4]
 8107daa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8107dac:	681b      	ldr	r3, [r3, #0]
 8107dae:	685b      	ldr	r3, [r3, #4]
 8107db0:	b29b      	uxth	r3, r3
 8107db2:	687a      	ldr	r2, [r7, #4]
 8107db4:	8553      	strh	r3, [r2, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8107db6:	697b      	ldr	r3, [r7, #20]
 8107db8:	089b      	lsrs	r3, r3, #2
 8107dba:	f003 0301 	and.w	r3, r3, #1
 8107dbe:	2b00      	cmp	r3, #0
 8107dc0:	d020      	beq.n	8107e04 <I2C_ITSlaveCplt+0x31c>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8107dc2:	697b      	ldr	r3, [r7, #20]
 8107dc4:	f023 0304 	bic.w	r3, r3, #4
 8107dc8:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8107dca:	687b      	ldr	r3, [r7, #4]
 8107dcc:	681b      	ldr	r3, [r3, #0]
 8107dce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8107dd0:	687b      	ldr	r3, [r7, #4]
 8107dd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8107dd4:	b2d2      	uxtb	r2, r2
 8107dd6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8107dd8:	687b      	ldr	r3, [r7, #4]
 8107dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8107ddc:	1c5a      	adds	r2, r3, #1
 8107dde:	687b      	ldr	r3, [r7, #4]
 8107de0:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8107de2:	687b      	ldr	r3, [r7, #4]
 8107de4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8107de6:	2b00      	cmp	r3, #0
 8107de8:	d00c      	beq.n	8107e04 <I2C_ITSlaveCplt+0x31c>
    {
      hi2c->XferSize--;
 8107dea:	687b      	ldr	r3, [r7, #4]
 8107dec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8107dee:	3b01      	subs	r3, #1
 8107df0:	b29a      	uxth	r2, r3
 8107df2:	687b      	ldr	r3, [r7, #4]
 8107df4:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8107df6:	687b      	ldr	r3, [r7, #4]
 8107df8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8107dfa:	b29b      	uxth	r3, r3
 8107dfc:	3b01      	subs	r3, #1
 8107dfe:	b29a      	uxth	r2, r3
 8107e00:	687b      	ldr	r3, [r7, #4]
 8107e02:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8107e04:	687b      	ldr	r3, [r7, #4]
 8107e06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8107e08:	b29b      	uxth	r3, r3
 8107e0a:	2b00      	cmp	r3, #0
 8107e0c:	d005      	beq.n	8107e1a <I2C_ITSlaveCplt+0x332>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8107e0e:	687b      	ldr	r3, [r7, #4]
 8107e10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8107e12:	f043 0204 	orr.w	r2, r3, #4
 8107e16:	687b      	ldr	r3, [r7, #4]
 8107e18:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8107e1a:	687b      	ldr	r3, [r7, #4]
 8107e1c:	2200      	movs	r2, #0
 8107e1e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8107e22:	687b      	ldr	r3, [r7, #4]
 8107e24:	2200      	movs	r2, #0
 8107e26:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8107e28:	687b      	ldr	r3, [r7, #4]
 8107e2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8107e2c:	2b00      	cmp	r3, #0
 8107e2e:	d010      	beq.n	8107e52 <I2C_ITSlaveCplt+0x36a>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8107e30:	687b      	ldr	r3, [r7, #4]
 8107e32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8107e34:	4619      	mov	r1, r3
 8107e36:	6878      	ldr	r0, [r7, #4]
 8107e38:	f000 f8a4 	bl	8107f84 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8107e3c:	687b      	ldr	r3, [r7, #4]
 8107e3e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8107e42:	b2db      	uxtb	r3, r3
 8107e44:	2b28      	cmp	r3, #40	; 0x28
 8107e46:	d141      	bne.n	8107ecc <I2C_ITSlaveCplt+0x3e4>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8107e48:	6979      	ldr	r1, [r7, #20]
 8107e4a:	6878      	ldr	r0, [r7, #4]
 8107e4c:	f000 f844 	bl	8107ed8 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8107e50:	e03c      	b.n	8107ecc <I2C_ITSlaveCplt+0x3e4>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8107e52:	687b      	ldr	r3, [r7, #4]
 8107e54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8107e56:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8107e5a:	d014      	beq.n	8107e86 <I2C_ITSlaveCplt+0x39e>
    I2C_ITSlaveSeqCplt(hi2c);
 8107e5c:	6878      	ldr	r0, [r7, #4]
 8107e5e:	f7ff fde4 	bl	8107a2a <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8107e62:	687b      	ldr	r3, [r7, #4]
 8107e64:	4a1b      	ldr	r2, [pc, #108]	; (8107ed4 <I2C_ITSlaveCplt+0x3ec>)
 8107e66:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8107e68:	687b      	ldr	r3, [r7, #4]
 8107e6a:	2220      	movs	r2, #32
 8107e6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8107e70:	687b      	ldr	r3, [r7, #4]
 8107e72:	2200      	movs	r2, #0
 8107e74:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8107e76:	687b      	ldr	r3, [r7, #4]
 8107e78:	2200      	movs	r2, #0
 8107e7a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8107e7e:	6878      	ldr	r0, [r7, #4]
 8107e80:	f7ff fc2e 	bl	81076e0 <HAL_I2C_ListenCpltCallback>
}
 8107e84:	e022      	b.n	8107ecc <I2C_ITSlaveCplt+0x3e4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8107e86:	687b      	ldr	r3, [r7, #4]
 8107e88:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8107e8c:	b2db      	uxtb	r3, r3
 8107e8e:	2b22      	cmp	r3, #34	; 0x22
 8107e90:	d10e      	bne.n	8107eb0 <I2C_ITSlaveCplt+0x3c8>
    hi2c->State = HAL_I2C_STATE_READY;
 8107e92:	687b      	ldr	r3, [r7, #4]
 8107e94:	2220      	movs	r2, #32
 8107e96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8107e9a:	687b      	ldr	r3, [r7, #4]
 8107e9c:	2200      	movs	r2, #0
 8107e9e:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8107ea0:	687b      	ldr	r3, [r7, #4]
 8107ea2:	2200      	movs	r2, #0
 8107ea4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8107ea8:	6878      	ldr	r0, [r7, #4]
 8107eaa:	f7ff fc01 	bl	81076b0 <HAL_I2C_SlaveRxCpltCallback>
}
 8107eae:	e00d      	b.n	8107ecc <I2C_ITSlaveCplt+0x3e4>
    hi2c->State = HAL_I2C_STATE_READY;
 8107eb0:	687b      	ldr	r3, [r7, #4]
 8107eb2:	2220      	movs	r2, #32
 8107eb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8107eb8:	687b      	ldr	r3, [r7, #4]
 8107eba:	2200      	movs	r2, #0
 8107ebc:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8107ebe:	687b      	ldr	r3, [r7, #4]
 8107ec0:	2200      	movs	r2, #0
 8107ec2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8107ec6:	6878      	ldr	r0, [r7, #4]
 8107ec8:	f7ff fbe8 	bl	810769c <HAL_I2C_SlaveTxCpltCallback>
}
 8107ecc:	bf00      	nop
 8107ece:	3718      	adds	r7, #24
 8107ed0:	46bd      	mov	sp, r7
 8107ed2:	bd80      	pop	{r7, pc}
 8107ed4:	ffff0000 	.word	0xffff0000

08107ed8 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8107ed8:	b580      	push	{r7, lr}
 8107eda:	b082      	sub	sp, #8
 8107edc:	af00      	add	r7, sp, #0
 8107ede:	6078      	str	r0, [r7, #4]
 8107ee0:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8107ee2:	687b      	ldr	r3, [r7, #4]
 8107ee4:	4a26      	ldr	r2, [pc, #152]	; (8107f80 <I2C_ITListenCplt+0xa8>)
 8107ee6:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8107ee8:	687b      	ldr	r3, [r7, #4]
 8107eea:	2200      	movs	r2, #0
 8107eec:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8107eee:	687b      	ldr	r3, [r7, #4]
 8107ef0:	2220      	movs	r2, #32
 8107ef2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8107ef6:	687b      	ldr	r3, [r7, #4]
 8107ef8:	2200      	movs	r2, #0
 8107efa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8107efe:	687b      	ldr	r3, [r7, #4]
 8107f00:	2200      	movs	r2, #0
 8107f02:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8107f04:	683b      	ldr	r3, [r7, #0]
 8107f06:	089b      	lsrs	r3, r3, #2
 8107f08:	f003 0301 	and.w	r3, r3, #1
 8107f0c:	2b00      	cmp	r3, #0
 8107f0e:	d022      	beq.n	8107f56 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8107f10:	687b      	ldr	r3, [r7, #4]
 8107f12:	681b      	ldr	r3, [r3, #0]
 8107f14:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8107f16:	687b      	ldr	r3, [r7, #4]
 8107f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8107f1a:	b2d2      	uxtb	r2, r2
 8107f1c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8107f1e:	687b      	ldr	r3, [r7, #4]
 8107f20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8107f22:	1c5a      	adds	r2, r3, #1
 8107f24:	687b      	ldr	r3, [r7, #4]
 8107f26:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8107f28:	687b      	ldr	r3, [r7, #4]
 8107f2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8107f2c:	2b00      	cmp	r3, #0
 8107f2e:	d012      	beq.n	8107f56 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8107f30:	687b      	ldr	r3, [r7, #4]
 8107f32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8107f34:	3b01      	subs	r3, #1
 8107f36:	b29a      	uxth	r2, r3
 8107f38:	687b      	ldr	r3, [r7, #4]
 8107f3a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8107f3c:	687b      	ldr	r3, [r7, #4]
 8107f3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8107f40:	b29b      	uxth	r3, r3
 8107f42:	3b01      	subs	r3, #1
 8107f44:	b29a      	uxth	r2, r3
 8107f46:	687b      	ldr	r3, [r7, #4]
 8107f48:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8107f4a:	687b      	ldr	r3, [r7, #4]
 8107f4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8107f4e:	f043 0204 	orr.w	r2, r3, #4
 8107f52:	687b      	ldr	r3, [r7, #4]
 8107f54:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8107f56:	f248 0103 	movw	r1, #32771	; 0x8003
 8107f5a:	6878      	ldr	r0, [r7, #4]
 8107f5c:	f000 f94b 	bl	81081f6 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8107f60:	687b      	ldr	r3, [r7, #4]
 8107f62:	681b      	ldr	r3, [r3, #0]
 8107f64:	2210      	movs	r2, #16
 8107f66:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8107f68:	687b      	ldr	r3, [r7, #4]
 8107f6a:	2200      	movs	r2, #0
 8107f6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8107f70:	6878      	ldr	r0, [r7, #4]
 8107f72:	f7ff fbb5 	bl	81076e0 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8107f76:	bf00      	nop
 8107f78:	3708      	adds	r7, #8
 8107f7a:	46bd      	mov	sp, r7
 8107f7c:	bd80      	pop	{r7, pc}
 8107f7e:	bf00      	nop
 8107f80:	ffff0000 	.word	0xffff0000

08107f84 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8107f84:	b580      	push	{r7, lr}
 8107f86:	b084      	sub	sp, #16
 8107f88:	af00      	add	r7, sp, #0
 8107f8a:	6078      	str	r0, [r7, #4]
 8107f8c:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8107f8e:	687b      	ldr	r3, [r7, #4]
 8107f90:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8107f94:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8107f96:	687b      	ldr	r3, [r7, #4]
 8107f98:	2200      	movs	r2, #0
 8107f9a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8107f9e:	687b      	ldr	r3, [r7, #4]
 8107fa0:	4a5d      	ldr	r2, [pc, #372]	; (8108118 <I2C_ITError+0x194>)
 8107fa2:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8107fa4:	687b      	ldr	r3, [r7, #4]
 8107fa6:	2200      	movs	r2, #0
 8107fa8:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8107faa:	687b      	ldr	r3, [r7, #4]
 8107fac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8107fae:	683b      	ldr	r3, [r7, #0]
 8107fb0:	431a      	orrs	r2, r3
 8107fb2:	687b      	ldr	r3, [r7, #4]
 8107fb4:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8107fb6:	7bfb      	ldrb	r3, [r7, #15]
 8107fb8:	2b28      	cmp	r3, #40	; 0x28
 8107fba:	d005      	beq.n	8107fc8 <I2C_ITError+0x44>
 8107fbc:	7bfb      	ldrb	r3, [r7, #15]
 8107fbe:	2b29      	cmp	r3, #41	; 0x29
 8107fc0:	d002      	beq.n	8107fc8 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8107fc2:	7bfb      	ldrb	r3, [r7, #15]
 8107fc4:	2b2a      	cmp	r3, #42	; 0x2a
 8107fc6:	d10b      	bne.n	8107fe0 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8107fc8:	2103      	movs	r1, #3
 8107fca:	6878      	ldr	r0, [r7, #4]
 8107fcc:	f000 f913 	bl	81081f6 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8107fd0:	687b      	ldr	r3, [r7, #4]
 8107fd2:	2228      	movs	r2, #40	; 0x28
 8107fd4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8107fd8:	687b      	ldr	r3, [r7, #4]
 8107fda:	4a50      	ldr	r2, [pc, #320]	; (810811c <I2C_ITError+0x198>)
 8107fdc:	635a      	str	r2, [r3, #52]	; 0x34
 8107fde:	e011      	b.n	8108004 <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8107fe0:	f248 0103 	movw	r1, #32771	; 0x8003
 8107fe4:	6878      	ldr	r0, [r7, #4]
 8107fe6:	f000 f906 	bl	81081f6 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8107fea:	687b      	ldr	r3, [r7, #4]
 8107fec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8107ff0:	b2db      	uxtb	r3, r3
 8107ff2:	2b60      	cmp	r3, #96	; 0x60
 8107ff4:	d003      	beq.n	8107ffe <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8107ff6:	687b      	ldr	r3, [r7, #4]
 8107ff8:	2220      	movs	r2, #32
 8107ffa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 8107ffe:	687b      	ldr	r3, [r7, #4]
 8108000:	2200      	movs	r2, #0
 8108002:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8108004:	687b      	ldr	r3, [r7, #4]
 8108006:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8108008:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 810800a:	687b      	ldr	r3, [r7, #4]
 810800c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810800e:	2b00      	cmp	r3, #0
 8108010:	d039      	beq.n	8108086 <I2C_ITError+0x102>
 8108012:	68bb      	ldr	r3, [r7, #8]
 8108014:	2b11      	cmp	r3, #17
 8108016:	d002      	beq.n	810801e <I2C_ITError+0x9a>
 8108018:	68bb      	ldr	r3, [r7, #8]
 810801a:	2b21      	cmp	r3, #33	; 0x21
 810801c:	d133      	bne.n	8108086 <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 810801e:	687b      	ldr	r3, [r7, #4]
 8108020:	681b      	ldr	r3, [r3, #0]
 8108022:	681b      	ldr	r3, [r3, #0]
 8108024:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8108028:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 810802c:	d107      	bne.n	810803e <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 810802e:	687b      	ldr	r3, [r7, #4]
 8108030:	681b      	ldr	r3, [r3, #0]
 8108032:	681a      	ldr	r2, [r3, #0]
 8108034:	687b      	ldr	r3, [r7, #4]
 8108036:	681b      	ldr	r3, [r3, #0]
 8108038:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 810803c:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 810803e:	687b      	ldr	r3, [r7, #4]
 8108040:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8108042:	4618      	mov	r0, r3
 8108044:	f7fe fbfa 	bl	810683c <HAL_DMA_GetState>
 8108048:	4603      	mov	r3, r0
 810804a:	2b01      	cmp	r3, #1
 810804c:	d017      	beq.n	810807e <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 810804e:	687b      	ldr	r3, [r7, #4]
 8108050:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8108052:	4a33      	ldr	r2, [pc, #204]	; (8108120 <I2C_ITError+0x19c>)
 8108054:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8108056:	687b      	ldr	r3, [r7, #4]
 8108058:	2200      	movs	r2, #0
 810805a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 810805e:	687b      	ldr	r3, [r7, #4]
 8108060:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8108062:	4618      	mov	r0, r3
 8108064:	f7fd fa7c 	bl	8105560 <HAL_DMA_Abort_IT>
 8108068:	4603      	mov	r3, r0
 810806a:	2b00      	cmp	r3, #0
 810806c:	d04d      	beq.n	810810a <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 810806e:	687b      	ldr	r3, [r7, #4]
 8108070:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8108072:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8108074:	687a      	ldr	r2, [r7, #4]
 8108076:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8108078:	4610      	mov	r0, r2
 810807a:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 810807c:	e045      	b.n	810810a <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 810807e:	6878      	ldr	r0, [r7, #4]
 8108080:	f000 f850 	bl	8108124 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8108084:	e041      	b.n	810810a <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8108086:	687b      	ldr	r3, [r7, #4]
 8108088:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810808a:	2b00      	cmp	r3, #0
 810808c:	d039      	beq.n	8108102 <I2C_ITError+0x17e>
 810808e:	68bb      	ldr	r3, [r7, #8]
 8108090:	2b12      	cmp	r3, #18
 8108092:	d002      	beq.n	810809a <I2C_ITError+0x116>
 8108094:	68bb      	ldr	r3, [r7, #8]
 8108096:	2b22      	cmp	r3, #34	; 0x22
 8108098:	d133      	bne.n	8108102 <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 810809a:	687b      	ldr	r3, [r7, #4]
 810809c:	681b      	ldr	r3, [r3, #0]
 810809e:	681b      	ldr	r3, [r3, #0]
 81080a0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 81080a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 81080a8:	d107      	bne.n	81080ba <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 81080aa:	687b      	ldr	r3, [r7, #4]
 81080ac:	681b      	ldr	r3, [r3, #0]
 81080ae:	681a      	ldr	r2, [r3, #0]
 81080b0:	687b      	ldr	r3, [r7, #4]
 81080b2:	681b      	ldr	r3, [r3, #0]
 81080b4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 81080b8:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 81080ba:	687b      	ldr	r3, [r7, #4]
 81080bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81080be:	4618      	mov	r0, r3
 81080c0:	f7fe fbbc 	bl	810683c <HAL_DMA_GetState>
 81080c4:	4603      	mov	r3, r0
 81080c6:	2b01      	cmp	r3, #1
 81080c8:	d017      	beq.n	81080fa <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 81080ca:	687b      	ldr	r3, [r7, #4]
 81080cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81080ce:	4a14      	ldr	r2, [pc, #80]	; (8108120 <I2C_ITError+0x19c>)
 81080d0:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 81080d2:	687b      	ldr	r3, [r7, #4]
 81080d4:	2200      	movs	r2, #0
 81080d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 81080da:	687b      	ldr	r3, [r7, #4]
 81080dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81080de:	4618      	mov	r0, r3
 81080e0:	f7fd fa3e 	bl	8105560 <HAL_DMA_Abort_IT>
 81080e4:	4603      	mov	r3, r0
 81080e6:	2b00      	cmp	r3, #0
 81080e8:	d011      	beq.n	810810e <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 81080ea:	687b      	ldr	r3, [r7, #4]
 81080ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81080ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81080f0:	687a      	ldr	r2, [r7, #4]
 81080f2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 81080f4:	4610      	mov	r0, r2
 81080f6:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 81080f8:	e009      	b.n	810810e <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 81080fa:	6878      	ldr	r0, [r7, #4]
 81080fc:	f000 f812 	bl	8108124 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8108100:	e005      	b.n	810810e <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8108102:	6878      	ldr	r0, [r7, #4]
 8108104:	f000 f80e 	bl	8108124 <I2C_TreatErrorCallback>
  }
}
 8108108:	e002      	b.n	8108110 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 810810a:	bf00      	nop
 810810c:	e000      	b.n	8108110 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 810810e:	bf00      	nop
}
 8108110:	bf00      	nop
 8108112:	3710      	adds	r7, #16
 8108114:	46bd      	mov	sp, r7
 8108116:	bd80      	pop	{r7, pc}
 8108118:	ffff0000 	.word	0xffff0000
 810811c:	0810771d 	.word	0x0810771d
 8108120:	081081bb 	.word	0x081081bb

08108124 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8108124:	b580      	push	{r7, lr}
 8108126:	b082      	sub	sp, #8
 8108128:	af00      	add	r7, sp, #0
 810812a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 810812c:	687b      	ldr	r3, [r7, #4]
 810812e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8108132:	b2db      	uxtb	r3, r3
 8108134:	2b60      	cmp	r3, #96	; 0x60
 8108136:	d10e      	bne.n	8108156 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8108138:	687b      	ldr	r3, [r7, #4]
 810813a:	2220      	movs	r2, #32
 810813c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8108140:	687b      	ldr	r3, [r7, #4]
 8108142:	2200      	movs	r2, #0
 8108144:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8108146:	687b      	ldr	r3, [r7, #4]
 8108148:	2200      	movs	r2, #0
 810814a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 810814e:	6878      	ldr	r0, [r7, #4]
 8108150:	f7ff fada 	bl	8107708 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8108154:	e009      	b.n	810816a <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8108156:	687b      	ldr	r3, [r7, #4]
 8108158:	2200      	movs	r2, #0
 810815a:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 810815c:	687b      	ldr	r3, [r7, #4]
 810815e:	2200      	movs	r2, #0
 8108160:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8108164:	6878      	ldr	r0, [r7, #4]
 8108166:	f7ff fac5 	bl	81076f4 <HAL_I2C_ErrorCallback>
}
 810816a:	bf00      	nop
 810816c:	3708      	adds	r7, #8
 810816e:	46bd      	mov	sp, r7
 8108170:	bd80      	pop	{r7, pc}

08108172 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8108172:	b480      	push	{r7}
 8108174:	b083      	sub	sp, #12
 8108176:	af00      	add	r7, sp, #0
 8108178:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 810817a:	687b      	ldr	r3, [r7, #4]
 810817c:	681b      	ldr	r3, [r3, #0]
 810817e:	699b      	ldr	r3, [r3, #24]
 8108180:	f003 0302 	and.w	r3, r3, #2
 8108184:	2b02      	cmp	r3, #2
 8108186:	d103      	bne.n	8108190 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8108188:	687b      	ldr	r3, [r7, #4]
 810818a:	681b      	ldr	r3, [r3, #0]
 810818c:	2200      	movs	r2, #0
 810818e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8108190:	687b      	ldr	r3, [r7, #4]
 8108192:	681b      	ldr	r3, [r3, #0]
 8108194:	699b      	ldr	r3, [r3, #24]
 8108196:	f003 0301 	and.w	r3, r3, #1
 810819a:	2b01      	cmp	r3, #1
 810819c:	d007      	beq.n	81081ae <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 810819e:	687b      	ldr	r3, [r7, #4]
 81081a0:	681b      	ldr	r3, [r3, #0]
 81081a2:	699a      	ldr	r2, [r3, #24]
 81081a4:	687b      	ldr	r3, [r7, #4]
 81081a6:	681b      	ldr	r3, [r3, #0]
 81081a8:	f042 0201 	orr.w	r2, r2, #1
 81081ac:	619a      	str	r2, [r3, #24]
  }
}
 81081ae:	bf00      	nop
 81081b0:	370c      	adds	r7, #12
 81081b2:	46bd      	mov	sp, r7
 81081b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81081b8:	4770      	bx	lr

081081ba <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 81081ba:	b580      	push	{r7, lr}
 81081bc:	b084      	sub	sp, #16
 81081be:	af00      	add	r7, sp, #0
 81081c0:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 81081c2:	687b      	ldr	r3, [r7, #4]
 81081c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81081c6:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 81081c8:	68fb      	ldr	r3, [r7, #12]
 81081ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81081cc:	2b00      	cmp	r3, #0
 81081ce:	d003      	beq.n	81081d8 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 81081d0:	68fb      	ldr	r3, [r7, #12]
 81081d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81081d4:	2200      	movs	r2, #0
 81081d6:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 81081d8:	68fb      	ldr	r3, [r7, #12]
 81081da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81081dc:	2b00      	cmp	r3, #0
 81081de:	d003      	beq.n	81081e8 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 81081e0:	68fb      	ldr	r3, [r7, #12]
 81081e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81081e4:	2200      	movs	r2, #0
 81081e6:	651a      	str	r2, [r3, #80]	; 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 81081e8:	68f8      	ldr	r0, [r7, #12]
 81081ea:	f7ff ff9b 	bl	8108124 <I2C_TreatErrorCallback>
}
 81081ee:	bf00      	nop
 81081f0:	3710      	adds	r7, #16
 81081f2:	46bd      	mov	sp, r7
 81081f4:	bd80      	pop	{r7, pc}

081081f6 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 81081f6:	b480      	push	{r7}
 81081f8:	b085      	sub	sp, #20
 81081fa:	af00      	add	r7, sp, #0
 81081fc:	6078      	str	r0, [r7, #4]
 81081fe:	460b      	mov	r3, r1
 8108200:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8108202:	2300      	movs	r3, #0
 8108204:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8108206:	887b      	ldrh	r3, [r7, #2]
 8108208:	f003 0301 	and.w	r3, r3, #1
 810820c:	2b00      	cmp	r3, #0
 810820e:	d00f      	beq.n	8108230 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8108210:	68fb      	ldr	r3, [r7, #12]
 8108212:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8108216:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8108218:	687b      	ldr	r3, [r7, #4]
 810821a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 810821e:	b2db      	uxtb	r3, r3
 8108220:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8108224:	2b28      	cmp	r3, #40	; 0x28
 8108226:	d003      	beq.n	8108230 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8108228:	68fb      	ldr	r3, [r7, #12]
 810822a:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 810822e:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8108230:	887b      	ldrh	r3, [r7, #2]
 8108232:	f003 0302 	and.w	r3, r3, #2
 8108236:	2b00      	cmp	r3, #0
 8108238:	d00f      	beq.n	810825a <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 810823a:	68fb      	ldr	r3, [r7, #12]
 810823c:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8108240:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8108242:	687b      	ldr	r3, [r7, #4]
 8108244:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8108248:	b2db      	uxtb	r3, r3
 810824a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 810824e:	2b28      	cmp	r3, #40	; 0x28
 8108250:	d003      	beq.n	810825a <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8108252:	68fb      	ldr	r3, [r7, #12]
 8108254:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8108258:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 810825a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 810825e:	2b00      	cmp	r3, #0
 8108260:	da03      	bge.n	810826a <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8108262:	68fb      	ldr	r3, [r7, #12]
 8108264:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8108268:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 810826a:	887b      	ldrh	r3, [r7, #2]
 810826c:	2b10      	cmp	r3, #16
 810826e:	d103      	bne.n	8108278 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8108270:	68fb      	ldr	r3, [r7, #12]
 8108272:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8108276:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8108278:	887b      	ldrh	r3, [r7, #2]
 810827a:	2b20      	cmp	r3, #32
 810827c:	d103      	bne.n	8108286 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 810827e:	68fb      	ldr	r3, [r7, #12]
 8108280:	f043 0320 	orr.w	r3, r3, #32
 8108284:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8108286:	887b      	ldrh	r3, [r7, #2]
 8108288:	2b40      	cmp	r3, #64	; 0x40
 810828a:	d103      	bne.n	8108294 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 810828c:	68fb      	ldr	r3, [r7, #12]
 810828e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8108292:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8108294:	687b      	ldr	r3, [r7, #4]
 8108296:	681b      	ldr	r3, [r3, #0]
 8108298:	6819      	ldr	r1, [r3, #0]
 810829a:	68fb      	ldr	r3, [r7, #12]
 810829c:	43da      	mvns	r2, r3
 810829e:	687b      	ldr	r3, [r7, #4]
 81082a0:	681b      	ldr	r3, [r3, #0]
 81082a2:	400a      	ands	r2, r1
 81082a4:	601a      	str	r2, [r3, #0]
}
 81082a6:	bf00      	nop
 81082a8:	3714      	adds	r7, #20
 81082aa:	46bd      	mov	sp, r7
 81082ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 81082b0:	4770      	bx	lr

081082b2 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 81082b2:	b480      	push	{r7}
 81082b4:	b083      	sub	sp, #12
 81082b6:	af00      	add	r7, sp, #0
 81082b8:	6078      	str	r0, [r7, #4]
 81082ba:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 81082bc:	687b      	ldr	r3, [r7, #4]
 81082be:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 81082c2:	b2db      	uxtb	r3, r3
 81082c4:	2b20      	cmp	r3, #32
 81082c6:	d138      	bne.n	810833a <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 81082c8:	687b      	ldr	r3, [r7, #4]
 81082ca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 81082ce:	2b01      	cmp	r3, #1
 81082d0:	d101      	bne.n	81082d6 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 81082d2:	2302      	movs	r3, #2
 81082d4:	e032      	b.n	810833c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 81082d6:	687b      	ldr	r3, [r7, #4]
 81082d8:	2201      	movs	r2, #1
 81082da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 81082de:	687b      	ldr	r3, [r7, #4]
 81082e0:	2224      	movs	r2, #36	; 0x24
 81082e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 81082e6:	687b      	ldr	r3, [r7, #4]
 81082e8:	681b      	ldr	r3, [r3, #0]
 81082ea:	681a      	ldr	r2, [r3, #0]
 81082ec:	687b      	ldr	r3, [r7, #4]
 81082ee:	681b      	ldr	r3, [r3, #0]
 81082f0:	f022 0201 	bic.w	r2, r2, #1
 81082f4:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 81082f6:	687b      	ldr	r3, [r7, #4]
 81082f8:	681b      	ldr	r3, [r3, #0]
 81082fa:	681a      	ldr	r2, [r3, #0]
 81082fc:	687b      	ldr	r3, [r7, #4]
 81082fe:	681b      	ldr	r3, [r3, #0]
 8108300:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8108304:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8108306:	687b      	ldr	r3, [r7, #4]
 8108308:	681b      	ldr	r3, [r3, #0]
 810830a:	6819      	ldr	r1, [r3, #0]
 810830c:	687b      	ldr	r3, [r7, #4]
 810830e:	681b      	ldr	r3, [r3, #0]
 8108310:	683a      	ldr	r2, [r7, #0]
 8108312:	430a      	orrs	r2, r1
 8108314:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8108316:	687b      	ldr	r3, [r7, #4]
 8108318:	681b      	ldr	r3, [r3, #0]
 810831a:	681a      	ldr	r2, [r3, #0]
 810831c:	687b      	ldr	r3, [r7, #4]
 810831e:	681b      	ldr	r3, [r3, #0]
 8108320:	f042 0201 	orr.w	r2, r2, #1
 8108324:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8108326:	687b      	ldr	r3, [r7, #4]
 8108328:	2220      	movs	r2, #32
 810832a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 810832e:	687b      	ldr	r3, [r7, #4]
 8108330:	2200      	movs	r2, #0
 8108332:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8108336:	2300      	movs	r3, #0
 8108338:	e000      	b.n	810833c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 810833a:	2302      	movs	r3, #2
  }
}
 810833c:	4618      	mov	r0, r3
 810833e:	370c      	adds	r7, #12
 8108340:	46bd      	mov	sp, r7
 8108342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108346:	4770      	bx	lr

08108348 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8108348:	b480      	push	{r7}
 810834a:	b085      	sub	sp, #20
 810834c:	af00      	add	r7, sp, #0
 810834e:	6078      	str	r0, [r7, #4]
 8108350:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8108352:	687b      	ldr	r3, [r7, #4]
 8108354:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8108358:	b2db      	uxtb	r3, r3
 810835a:	2b20      	cmp	r3, #32
 810835c:	d139      	bne.n	81083d2 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 810835e:	687b      	ldr	r3, [r7, #4]
 8108360:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8108364:	2b01      	cmp	r3, #1
 8108366:	d101      	bne.n	810836c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8108368:	2302      	movs	r3, #2
 810836a:	e033      	b.n	81083d4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 810836c:	687b      	ldr	r3, [r7, #4]
 810836e:	2201      	movs	r2, #1
 8108370:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8108374:	687b      	ldr	r3, [r7, #4]
 8108376:	2224      	movs	r2, #36	; 0x24
 8108378:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 810837c:	687b      	ldr	r3, [r7, #4]
 810837e:	681b      	ldr	r3, [r3, #0]
 8108380:	681a      	ldr	r2, [r3, #0]
 8108382:	687b      	ldr	r3, [r7, #4]
 8108384:	681b      	ldr	r3, [r3, #0]
 8108386:	f022 0201 	bic.w	r2, r2, #1
 810838a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 810838c:	687b      	ldr	r3, [r7, #4]
 810838e:	681b      	ldr	r3, [r3, #0]
 8108390:	681b      	ldr	r3, [r3, #0]
 8108392:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8108394:	68fb      	ldr	r3, [r7, #12]
 8108396:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 810839a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 810839c:	683b      	ldr	r3, [r7, #0]
 810839e:	021b      	lsls	r3, r3, #8
 81083a0:	68fa      	ldr	r2, [r7, #12]
 81083a2:	4313      	orrs	r3, r2
 81083a4:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 81083a6:	687b      	ldr	r3, [r7, #4]
 81083a8:	681b      	ldr	r3, [r3, #0]
 81083aa:	68fa      	ldr	r2, [r7, #12]
 81083ac:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 81083ae:	687b      	ldr	r3, [r7, #4]
 81083b0:	681b      	ldr	r3, [r3, #0]
 81083b2:	681a      	ldr	r2, [r3, #0]
 81083b4:	687b      	ldr	r3, [r7, #4]
 81083b6:	681b      	ldr	r3, [r3, #0]
 81083b8:	f042 0201 	orr.w	r2, r2, #1
 81083bc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 81083be:	687b      	ldr	r3, [r7, #4]
 81083c0:	2220      	movs	r2, #32
 81083c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 81083c6:	687b      	ldr	r3, [r7, #4]
 81083c8:	2200      	movs	r2, #0
 81083ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 81083ce:	2300      	movs	r3, #0
 81083d0:	e000      	b.n	81083d4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 81083d2:	2302      	movs	r3, #2
  }
}
 81083d4:	4618      	mov	r0, r3
 81083d6:	3714      	adds	r7, #20
 81083d8:	46bd      	mov	sp, r7
 81083da:	f85d 7b04 	ldr.w	r7, [sp], #4
 81083de:	4770      	bx	lr

081083e0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 81083e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 81083e2:	b08f      	sub	sp, #60	; 0x3c
 81083e4:	af0a      	add	r7, sp, #40	; 0x28
 81083e6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 81083e8:	687b      	ldr	r3, [r7, #4]
 81083ea:	2b00      	cmp	r3, #0
 81083ec:	d101      	bne.n	81083f2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 81083ee:	2301      	movs	r3, #1
 81083f0:	e116      	b.n	8108620 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 81083f2:	687b      	ldr	r3, [r7, #4]
 81083f4:	681b      	ldr	r3, [r3, #0]
 81083f6:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 81083f8:	687b      	ldr	r3, [r7, #4]
 81083fa:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 81083fe:	b2db      	uxtb	r3, r3
 8108400:	2b00      	cmp	r3, #0
 8108402:	d106      	bne.n	8108412 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8108404:	687b      	ldr	r3, [r7, #4]
 8108406:	2200      	movs	r2, #0
 8108408:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 810840c:	6878      	ldr	r0, [r7, #4]
 810840e:	f010 fa51 	bl	81188b4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8108412:	687b      	ldr	r3, [r7, #4]
 8108414:	2203      	movs	r2, #3
 8108416:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 810841a:	68bb      	ldr	r3, [r7, #8]
 810841c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810841e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8108422:	2b00      	cmp	r3, #0
 8108424:	d102      	bne.n	810842c <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8108426:	687b      	ldr	r3, [r7, #4]
 8108428:	2200      	movs	r2, #0
 810842a:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 810842c:	687b      	ldr	r3, [r7, #4]
 810842e:	681b      	ldr	r3, [r3, #0]
 8108430:	4618      	mov	r0, r3
 8108432:	f009 ff52 	bl	81122da <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8108436:	687b      	ldr	r3, [r7, #4]
 8108438:	681b      	ldr	r3, [r3, #0]
 810843a:	603b      	str	r3, [r7, #0]
 810843c:	687e      	ldr	r6, [r7, #4]
 810843e:	466d      	mov	r5, sp
 8108440:	f106 0410 	add.w	r4, r6, #16
 8108444:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8108446:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8108448:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 810844a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 810844c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8108450:	e885 0003 	stmia.w	r5, {r0, r1}
 8108454:	1d33      	adds	r3, r6, #4
 8108456:	cb0e      	ldmia	r3, {r1, r2, r3}
 8108458:	6838      	ldr	r0, [r7, #0]
 810845a:	f009 fe1d 	bl	8112098 <USB_CoreInit>
 810845e:	4603      	mov	r3, r0
 8108460:	2b00      	cmp	r3, #0
 8108462:	d005      	beq.n	8108470 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8108464:	687b      	ldr	r3, [r7, #4]
 8108466:	2202      	movs	r2, #2
 8108468:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 810846c:	2301      	movs	r3, #1
 810846e:	e0d7      	b.n	8108620 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8108470:	687b      	ldr	r3, [r7, #4]
 8108472:	681b      	ldr	r3, [r3, #0]
 8108474:	2100      	movs	r1, #0
 8108476:	4618      	mov	r0, r3
 8108478:	f009 ff40 	bl	81122fc <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 810847c:	2300      	movs	r3, #0
 810847e:	73fb      	strb	r3, [r7, #15]
 8108480:	e04a      	b.n	8108518 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8108482:	7bfa      	ldrb	r2, [r7, #15]
 8108484:	6879      	ldr	r1, [r7, #4]
 8108486:	4613      	mov	r3, r2
 8108488:	00db      	lsls	r3, r3, #3
 810848a:	1a9b      	subs	r3, r3, r2
 810848c:	009b      	lsls	r3, r3, #2
 810848e:	440b      	add	r3, r1
 8108490:	333d      	adds	r3, #61	; 0x3d
 8108492:	2201      	movs	r2, #1
 8108494:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8108496:	7bfa      	ldrb	r2, [r7, #15]
 8108498:	6879      	ldr	r1, [r7, #4]
 810849a:	4613      	mov	r3, r2
 810849c:	00db      	lsls	r3, r3, #3
 810849e:	1a9b      	subs	r3, r3, r2
 81084a0:	009b      	lsls	r3, r3, #2
 81084a2:	440b      	add	r3, r1
 81084a4:	333c      	adds	r3, #60	; 0x3c
 81084a6:	7bfa      	ldrb	r2, [r7, #15]
 81084a8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 81084aa:	7bfa      	ldrb	r2, [r7, #15]
 81084ac:	7bfb      	ldrb	r3, [r7, #15]
 81084ae:	b298      	uxth	r0, r3
 81084b0:	6879      	ldr	r1, [r7, #4]
 81084b2:	4613      	mov	r3, r2
 81084b4:	00db      	lsls	r3, r3, #3
 81084b6:	1a9b      	subs	r3, r3, r2
 81084b8:	009b      	lsls	r3, r3, #2
 81084ba:	440b      	add	r3, r1
 81084bc:	3342      	adds	r3, #66	; 0x42
 81084be:	4602      	mov	r2, r0
 81084c0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 81084c2:	7bfa      	ldrb	r2, [r7, #15]
 81084c4:	6879      	ldr	r1, [r7, #4]
 81084c6:	4613      	mov	r3, r2
 81084c8:	00db      	lsls	r3, r3, #3
 81084ca:	1a9b      	subs	r3, r3, r2
 81084cc:	009b      	lsls	r3, r3, #2
 81084ce:	440b      	add	r3, r1
 81084d0:	333f      	adds	r3, #63	; 0x3f
 81084d2:	2200      	movs	r2, #0
 81084d4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 81084d6:	7bfa      	ldrb	r2, [r7, #15]
 81084d8:	6879      	ldr	r1, [r7, #4]
 81084da:	4613      	mov	r3, r2
 81084dc:	00db      	lsls	r3, r3, #3
 81084de:	1a9b      	subs	r3, r3, r2
 81084e0:	009b      	lsls	r3, r3, #2
 81084e2:	440b      	add	r3, r1
 81084e4:	3344      	adds	r3, #68	; 0x44
 81084e6:	2200      	movs	r2, #0
 81084e8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 81084ea:	7bfa      	ldrb	r2, [r7, #15]
 81084ec:	6879      	ldr	r1, [r7, #4]
 81084ee:	4613      	mov	r3, r2
 81084f0:	00db      	lsls	r3, r3, #3
 81084f2:	1a9b      	subs	r3, r3, r2
 81084f4:	009b      	lsls	r3, r3, #2
 81084f6:	440b      	add	r3, r1
 81084f8:	3348      	adds	r3, #72	; 0x48
 81084fa:	2200      	movs	r2, #0
 81084fc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 81084fe:	7bfa      	ldrb	r2, [r7, #15]
 8108500:	6879      	ldr	r1, [r7, #4]
 8108502:	4613      	mov	r3, r2
 8108504:	00db      	lsls	r3, r3, #3
 8108506:	1a9b      	subs	r3, r3, r2
 8108508:	009b      	lsls	r3, r3, #2
 810850a:	440b      	add	r3, r1
 810850c:	3350      	adds	r3, #80	; 0x50
 810850e:	2200      	movs	r2, #0
 8108510:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8108512:	7bfb      	ldrb	r3, [r7, #15]
 8108514:	3301      	adds	r3, #1
 8108516:	73fb      	strb	r3, [r7, #15]
 8108518:	7bfa      	ldrb	r2, [r7, #15]
 810851a:	687b      	ldr	r3, [r7, #4]
 810851c:	685b      	ldr	r3, [r3, #4]
 810851e:	429a      	cmp	r2, r3
 8108520:	d3af      	bcc.n	8108482 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8108522:	2300      	movs	r3, #0
 8108524:	73fb      	strb	r3, [r7, #15]
 8108526:	e044      	b.n	81085b2 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8108528:	7bfa      	ldrb	r2, [r7, #15]
 810852a:	6879      	ldr	r1, [r7, #4]
 810852c:	4613      	mov	r3, r2
 810852e:	00db      	lsls	r3, r3, #3
 8108530:	1a9b      	subs	r3, r3, r2
 8108532:	009b      	lsls	r3, r3, #2
 8108534:	440b      	add	r3, r1
 8108536:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 810853a:	2200      	movs	r2, #0
 810853c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 810853e:	7bfa      	ldrb	r2, [r7, #15]
 8108540:	6879      	ldr	r1, [r7, #4]
 8108542:	4613      	mov	r3, r2
 8108544:	00db      	lsls	r3, r3, #3
 8108546:	1a9b      	subs	r3, r3, r2
 8108548:	009b      	lsls	r3, r3, #2
 810854a:	440b      	add	r3, r1
 810854c:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8108550:	7bfa      	ldrb	r2, [r7, #15]
 8108552:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8108554:	7bfa      	ldrb	r2, [r7, #15]
 8108556:	6879      	ldr	r1, [r7, #4]
 8108558:	4613      	mov	r3, r2
 810855a:	00db      	lsls	r3, r3, #3
 810855c:	1a9b      	subs	r3, r3, r2
 810855e:	009b      	lsls	r3, r3, #2
 8108560:	440b      	add	r3, r1
 8108562:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8108566:	2200      	movs	r2, #0
 8108568:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 810856a:	7bfa      	ldrb	r2, [r7, #15]
 810856c:	6879      	ldr	r1, [r7, #4]
 810856e:	4613      	mov	r3, r2
 8108570:	00db      	lsls	r3, r3, #3
 8108572:	1a9b      	subs	r3, r3, r2
 8108574:	009b      	lsls	r3, r3, #2
 8108576:	440b      	add	r3, r1
 8108578:	f503 7301 	add.w	r3, r3, #516	; 0x204
 810857c:	2200      	movs	r2, #0
 810857e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8108580:	7bfa      	ldrb	r2, [r7, #15]
 8108582:	6879      	ldr	r1, [r7, #4]
 8108584:	4613      	mov	r3, r2
 8108586:	00db      	lsls	r3, r3, #3
 8108588:	1a9b      	subs	r3, r3, r2
 810858a:	009b      	lsls	r3, r3, #2
 810858c:	440b      	add	r3, r1
 810858e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8108592:	2200      	movs	r2, #0
 8108594:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8108596:	7bfa      	ldrb	r2, [r7, #15]
 8108598:	6879      	ldr	r1, [r7, #4]
 810859a:	4613      	mov	r3, r2
 810859c:	00db      	lsls	r3, r3, #3
 810859e:	1a9b      	subs	r3, r3, r2
 81085a0:	009b      	lsls	r3, r3, #2
 81085a2:	440b      	add	r3, r1
 81085a4:	f503 7304 	add.w	r3, r3, #528	; 0x210
 81085a8:	2200      	movs	r2, #0
 81085aa:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 81085ac:	7bfb      	ldrb	r3, [r7, #15]
 81085ae:	3301      	adds	r3, #1
 81085b0:	73fb      	strb	r3, [r7, #15]
 81085b2:	7bfa      	ldrb	r2, [r7, #15]
 81085b4:	687b      	ldr	r3, [r7, #4]
 81085b6:	685b      	ldr	r3, [r3, #4]
 81085b8:	429a      	cmp	r2, r3
 81085ba:	d3b5      	bcc.n	8108528 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 81085bc:	687b      	ldr	r3, [r7, #4]
 81085be:	681b      	ldr	r3, [r3, #0]
 81085c0:	603b      	str	r3, [r7, #0]
 81085c2:	687e      	ldr	r6, [r7, #4]
 81085c4:	466d      	mov	r5, sp
 81085c6:	f106 0410 	add.w	r4, r6, #16
 81085ca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 81085cc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 81085ce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 81085d0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 81085d2:	e894 0003 	ldmia.w	r4, {r0, r1}
 81085d6:	e885 0003 	stmia.w	r5, {r0, r1}
 81085da:	1d33      	adds	r3, r6, #4
 81085dc:	cb0e      	ldmia	r3, {r1, r2, r3}
 81085de:	6838      	ldr	r0, [r7, #0]
 81085e0:	f009 feb6 	bl	8112350 <USB_DevInit>
 81085e4:	4603      	mov	r3, r0
 81085e6:	2b00      	cmp	r3, #0
 81085e8:	d005      	beq.n	81085f6 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 81085ea:	687b      	ldr	r3, [r7, #4]
 81085ec:	2202      	movs	r2, #2
 81085ee:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 81085f2:	2301      	movs	r3, #1
 81085f4:	e014      	b.n	8108620 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 81085f6:	687b      	ldr	r3, [r7, #4]
 81085f8:	2200      	movs	r2, #0
 81085fa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 81085fe:	687b      	ldr	r3, [r7, #4]
 8108600:	2201      	movs	r2, #1
 8108602:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8108606:	687b      	ldr	r3, [r7, #4]
 8108608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810860a:	2b01      	cmp	r3, #1
 810860c:	d102      	bne.n	8108614 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 810860e:	6878      	ldr	r0, [r7, #4]
 8108610:	f001 f892 	bl	8109738 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8108614:	687b      	ldr	r3, [r7, #4]
 8108616:	681b      	ldr	r3, [r3, #0]
 8108618:	4618      	mov	r0, r3
 810861a:	f00a ff29 	bl	8113470 <USB_DevDisconnect>

  return HAL_OK;
 810861e:	2300      	movs	r3, #0
}
 8108620:	4618      	mov	r0, r3
 8108622:	3714      	adds	r7, #20
 8108624:	46bd      	mov	sp, r7
 8108626:	bdf0      	pop	{r4, r5, r6, r7, pc}

08108628 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8108628:	b580      	push	{r7, lr}
 810862a:	b084      	sub	sp, #16
 810862c:	af00      	add	r7, sp, #0
 810862e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8108630:	687b      	ldr	r3, [r7, #4]
 8108632:	681b      	ldr	r3, [r3, #0]
 8108634:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8108636:	687b      	ldr	r3, [r7, #4]
 8108638:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 810863c:	2b01      	cmp	r3, #1
 810863e:	d101      	bne.n	8108644 <HAL_PCD_Start+0x1c>
 8108640:	2302      	movs	r3, #2
 8108642:	e020      	b.n	8108686 <HAL_PCD_Start+0x5e>
 8108644:	687b      	ldr	r3, [r7, #4]
 8108646:	2201      	movs	r2, #1
 8108648:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 810864c:	687b      	ldr	r3, [r7, #4]
 810864e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8108650:	2b01      	cmp	r3, #1
 8108652:	d109      	bne.n	8108668 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8108654:	687b      	ldr	r3, [r7, #4]
 8108656:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8108658:	2b01      	cmp	r3, #1
 810865a:	d005      	beq.n	8108668 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 810865c:	68fb      	ldr	r3, [r7, #12]
 810865e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8108660:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8108664:	68fb      	ldr	r3, [r7, #12]
 8108666:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8108668:	687b      	ldr	r3, [r7, #4]
 810866a:	681b      	ldr	r3, [r3, #0]
 810866c:	4618      	mov	r0, r3
 810866e:	f009 fe23 	bl	81122b8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8108672:	687b      	ldr	r3, [r7, #4]
 8108674:	681b      	ldr	r3, [r3, #0]
 8108676:	4618      	mov	r0, r3
 8108678:	f00a fed9 	bl	811342e <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 810867c:	687b      	ldr	r3, [r7, #4]
 810867e:	2200      	movs	r2, #0
 8108680:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8108684:	2300      	movs	r3, #0
}
 8108686:	4618      	mov	r0, r3
 8108688:	3710      	adds	r7, #16
 810868a:	46bd      	mov	sp, r7
 810868c:	bd80      	pop	{r7, pc}

0810868e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 810868e:	b590      	push	{r4, r7, lr}
 8108690:	b08d      	sub	sp, #52	; 0x34
 8108692:	af00      	add	r7, sp, #0
 8108694:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8108696:	687b      	ldr	r3, [r7, #4]
 8108698:	681b      	ldr	r3, [r3, #0]
 810869a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 810869c:	6a3b      	ldr	r3, [r7, #32]
 810869e:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 81086a0:	687b      	ldr	r3, [r7, #4]
 81086a2:	681b      	ldr	r3, [r3, #0]
 81086a4:	4618      	mov	r0, r3
 81086a6:	f00a ff97 	bl	81135d8 <USB_GetMode>
 81086aa:	4603      	mov	r3, r0
 81086ac:	2b00      	cmp	r3, #0
 81086ae:	f040 83ca 	bne.w	8108e46 <HAL_PCD_IRQHandler+0x7b8>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 81086b2:	687b      	ldr	r3, [r7, #4]
 81086b4:	681b      	ldr	r3, [r3, #0]
 81086b6:	4618      	mov	r0, r3
 81086b8:	f00a fefb 	bl	81134b2 <USB_ReadInterrupts>
 81086bc:	4603      	mov	r3, r0
 81086be:	2b00      	cmp	r3, #0
 81086c0:	f000 83c0 	beq.w	8108e44 <HAL_PCD_IRQHandler+0x7b6>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 81086c4:	687b      	ldr	r3, [r7, #4]
 81086c6:	681b      	ldr	r3, [r3, #0]
 81086c8:	4618      	mov	r0, r3
 81086ca:	f00a fef2 	bl	81134b2 <USB_ReadInterrupts>
 81086ce:	4603      	mov	r3, r0
 81086d0:	f003 0302 	and.w	r3, r3, #2
 81086d4:	2b02      	cmp	r3, #2
 81086d6:	d107      	bne.n	81086e8 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 81086d8:	687b      	ldr	r3, [r7, #4]
 81086da:	681b      	ldr	r3, [r3, #0]
 81086dc:	695a      	ldr	r2, [r3, #20]
 81086de:	687b      	ldr	r3, [r7, #4]
 81086e0:	681b      	ldr	r3, [r3, #0]
 81086e2:	f002 0202 	and.w	r2, r2, #2
 81086e6:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 81086e8:	687b      	ldr	r3, [r7, #4]
 81086ea:	681b      	ldr	r3, [r3, #0]
 81086ec:	4618      	mov	r0, r3
 81086ee:	f00a fee0 	bl	81134b2 <USB_ReadInterrupts>
 81086f2:	4603      	mov	r3, r0
 81086f4:	f003 0310 	and.w	r3, r3, #16
 81086f8:	2b10      	cmp	r3, #16
 81086fa:	d161      	bne.n	81087c0 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 81086fc:	687b      	ldr	r3, [r7, #4]
 81086fe:	681b      	ldr	r3, [r3, #0]
 8108700:	699a      	ldr	r2, [r3, #24]
 8108702:	687b      	ldr	r3, [r7, #4]
 8108704:	681b      	ldr	r3, [r3, #0]
 8108706:	f022 0210 	bic.w	r2, r2, #16
 810870a:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 810870c:	6a3b      	ldr	r3, [r7, #32]
 810870e:	6a1b      	ldr	r3, [r3, #32]
 8108710:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8108712:	69bb      	ldr	r3, [r7, #24]
 8108714:	f003 020f 	and.w	r2, r3, #15
 8108718:	4613      	mov	r3, r2
 810871a:	00db      	lsls	r3, r3, #3
 810871c:	1a9b      	subs	r3, r3, r2
 810871e:	009b      	lsls	r3, r3, #2
 8108720:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8108724:	687a      	ldr	r2, [r7, #4]
 8108726:	4413      	add	r3, r2
 8108728:	3304      	adds	r3, #4
 810872a:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 810872c:	69bb      	ldr	r3, [r7, #24]
 810872e:	0c5b      	lsrs	r3, r3, #17
 8108730:	f003 030f 	and.w	r3, r3, #15
 8108734:	2b02      	cmp	r3, #2
 8108736:	d124      	bne.n	8108782 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8108738:	69ba      	ldr	r2, [r7, #24]
 810873a:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 810873e:	4013      	ands	r3, r2
 8108740:	2b00      	cmp	r3, #0
 8108742:	d035      	beq.n	81087b0 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8108744:	697b      	ldr	r3, [r7, #20]
 8108746:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8108748:	69bb      	ldr	r3, [r7, #24]
 810874a:	091b      	lsrs	r3, r3, #4
 810874c:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 810874e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8108752:	b29b      	uxth	r3, r3
 8108754:	461a      	mov	r2, r3
 8108756:	6a38      	ldr	r0, [r7, #32]
 8108758:	f00a fd17 	bl	811318a <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 810875c:	697b      	ldr	r3, [r7, #20]
 810875e:	68da      	ldr	r2, [r3, #12]
 8108760:	69bb      	ldr	r3, [r7, #24]
 8108762:	091b      	lsrs	r3, r3, #4
 8108764:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8108768:	441a      	add	r2, r3
 810876a:	697b      	ldr	r3, [r7, #20]
 810876c:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 810876e:	697b      	ldr	r3, [r7, #20]
 8108770:	699a      	ldr	r2, [r3, #24]
 8108772:	69bb      	ldr	r3, [r7, #24]
 8108774:	091b      	lsrs	r3, r3, #4
 8108776:	f3c3 030a 	ubfx	r3, r3, #0, #11
 810877a:	441a      	add	r2, r3
 810877c:	697b      	ldr	r3, [r7, #20]
 810877e:	619a      	str	r2, [r3, #24]
 8108780:	e016      	b.n	81087b0 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8108782:	69bb      	ldr	r3, [r7, #24]
 8108784:	0c5b      	lsrs	r3, r3, #17
 8108786:	f003 030f 	and.w	r3, r3, #15
 810878a:	2b06      	cmp	r3, #6
 810878c:	d110      	bne.n	81087b0 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 810878e:	687b      	ldr	r3, [r7, #4]
 8108790:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8108794:	2208      	movs	r2, #8
 8108796:	4619      	mov	r1, r3
 8108798:	6a38      	ldr	r0, [r7, #32]
 810879a:	f00a fcf6 	bl	811318a <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 810879e:	697b      	ldr	r3, [r7, #20]
 81087a0:	699a      	ldr	r2, [r3, #24]
 81087a2:	69bb      	ldr	r3, [r7, #24]
 81087a4:	091b      	lsrs	r3, r3, #4
 81087a6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 81087aa:	441a      	add	r2, r3
 81087ac:	697b      	ldr	r3, [r7, #20]
 81087ae:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 81087b0:	687b      	ldr	r3, [r7, #4]
 81087b2:	681b      	ldr	r3, [r3, #0]
 81087b4:	699a      	ldr	r2, [r3, #24]
 81087b6:	687b      	ldr	r3, [r7, #4]
 81087b8:	681b      	ldr	r3, [r3, #0]
 81087ba:	f042 0210 	orr.w	r2, r2, #16
 81087be:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 81087c0:	687b      	ldr	r3, [r7, #4]
 81087c2:	681b      	ldr	r3, [r3, #0]
 81087c4:	4618      	mov	r0, r3
 81087c6:	f00a fe74 	bl	81134b2 <USB_ReadInterrupts>
 81087ca:	4603      	mov	r3, r0
 81087cc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 81087d0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 81087d4:	d16e      	bne.n	81088b4 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 81087d6:	2300      	movs	r3, #0
 81087d8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 81087da:	687b      	ldr	r3, [r7, #4]
 81087dc:	681b      	ldr	r3, [r3, #0]
 81087de:	4618      	mov	r0, r3
 81087e0:	f00a fe7a 	bl	81134d8 <USB_ReadDevAllOutEpInterrupt>
 81087e4:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 81087e6:	e062      	b.n	81088ae <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 81087e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81087ea:	f003 0301 	and.w	r3, r3, #1
 81087ee:	2b00      	cmp	r3, #0
 81087f0:	d057      	beq.n	81088a2 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 81087f2:	687b      	ldr	r3, [r7, #4]
 81087f4:	681b      	ldr	r3, [r3, #0]
 81087f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 81087f8:	b2d2      	uxtb	r2, r2
 81087fa:	4611      	mov	r1, r2
 81087fc:	4618      	mov	r0, r3
 81087fe:	f00a fe9f 	bl	8113540 <USB_ReadDevOutEPInterrupt>
 8108802:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8108804:	693b      	ldr	r3, [r7, #16]
 8108806:	f003 0301 	and.w	r3, r3, #1
 810880a:	2b00      	cmp	r3, #0
 810880c:	d00c      	beq.n	8108828 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 810880e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8108810:	015a      	lsls	r2, r3, #5
 8108812:	69fb      	ldr	r3, [r7, #28]
 8108814:	4413      	add	r3, r2
 8108816:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 810881a:	461a      	mov	r2, r3
 810881c:	2301      	movs	r3, #1
 810881e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8108820:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8108822:	6878      	ldr	r0, [r7, #4]
 8108824:	f000 fdde 	bl	81093e4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8108828:	693b      	ldr	r3, [r7, #16]
 810882a:	f003 0308 	and.w	r3, r3, #8
 810882e:	2b00      	cmp	r3, #0
 8108830:	d00c      	beq.n	810884c <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8108832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8108834:	015a      	lsls	r2, r3, #5
 8108836:	69fb      	ldr	r3, [r7, #28]
 8108838:	4413      	add	r3, r2
 810883a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 810883e:	461a      	mov	r2, r3
 8108840:	2308      	movs	r3, #8
 8108842:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8108844:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8108846:	6878      	ldr	r0, [r7, #4]
 8108848:	f000 fed8 	bl	81095fc <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 810884c:	693b      	ldr	r3, [r7, #16]
 810884e:	f003 0310 	and.w	r3, r3, #16
 8108852:	2b00      	cmp	r3, #0
 8108854:	d008      	beq.n	8108868 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8108856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8108858:	015a      	lsls	r2, r3, #5
 810885a:	69fb      	ldr	r3, [r7, #28]
 810885c:	4413      	add	r3, r2
 810885e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8108862:	461a      	mov	r2, r3
 8108864:	2310      	movs	r3, #16
 8108866:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8108868:	693b      	ldr	r3, [r7, #16]
 810886a:	f003 0320 	and.w	r3, r3, #32
 810886e:	2b00      	cmp	r3, #0
 8108870:	d008      	beq.n	8108884 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8108872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8108874:	015a      	lsls	r2, r3, #5
 8108876:	69fb      	ldr	r3, [r7, #28]
 8108878:	4413      	add	r3, r2
 810887a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 810887e:	461a      	mov	r2, r3
 8108880:	2320      	movs	r3, #32
 8108882:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8108884:	693b      	ldr	r3, [r7, #16]
 8108886:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 810888a:	2b00      	cmp	r3, #0
 810888c:	d009      	beq.n	81088a2 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 810888e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8108890:	015a      	lsls	r2, r3, #5
 8108892:	69fb      	ldr	r3, [r7, #28]
 8108894:	4413      	add	r3, r2
 8108896:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 810889a:	461a      	mov	r2, r3
 810889c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 81088a0:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 81088a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81088a4:	3301      	adds	r3, #1
 81088a6:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 81088a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81088aa:	085b      	lsrs	r3, r3, #1
 81088ac:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 81088ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81088b0:	2b00      	cmp	r3, #0
 81088b2:	d199      	bne.n	81087e8 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 81088b4:	687b      	ldr	r3, [r7, #4]
 81088b6:	681b      	ldr	r3, [r3, #0]
 81088b8:	4618      	mov	r0, r3
 81088ba:	f00a fdfa 	bl	81134b2 <USB_ReadInterrupts>
 81088be:	4603      	mov	r3, r0
 81088c0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 81088c4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 81088c8:	f040 80c0 	bne.w	8108a4c <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 81088cc:	687b      	ldr	r3, [r7, #4]
 81088ce:	681b      	ldr	r3, [r3, #0]
 81088d0:	4618      	mov	r0, r3
 81088d2:	f00a fe1b 	bl	811350c <USB_ReadDevAllInEpInterrupt>
 81088d6:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 81088d8:	2300      	movs	r3, #0
 81088da:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 81088dc:	e0b2      	b.n	8108a44 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 81088de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81088e0:	f003 0301 	and.w	r3, r3, #1
 81088e4:	2b00      	cmp	r3, #0
 81088e6:	f000 80a7 	beq.w	8108a38 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 81088ea:	687b      	ldr	r3, [r7, #4]
 81088ec:	681b      	ldr	r3, [r3, #0]
 81088ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 81088f0:	b2d2      	uxtb	r2, r2
 81088f2:	4611      	mov	r1, r2
 81088f4:	4618      	mov	r0, r3
 81088f6:	f00a fe41 	bl	811357c <USB_ReadDevInEPInterrupt>
 81088fa:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 81088fc:	693b      	ldr	r3, [r7, #16]
 81088fe:	f003 0301 	and.w	r3, r3, #1
 8108902:	2b00      	cmp	r3, #0
 8108904:	d057      	beq.n	81089b6 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8108906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8108908:	f003 030f 	and.w	r3, r3, #15
 810890c:	2201      	movs	r2, #1
 810890e:	fa02 f303 	lsl.w	r3, r2, r3
 8108912:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8108914:	69fb      	ldr	r3, [r7, #28]
 8108916:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 810891a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 810891c:	68fb      	ldr	r3, [r7, #12]
 810891e:	43db      	mvns	r3, r3
 8108920:	69f9      	ldr	r1, [r7, #28]
 8108922:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8108926:	4013      	ands	r3, r2
 8108928:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 810892a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810892c:	015a      	lsls	r2, r3, #5
 810892e:	69fb      	ldr	r3, [r7, #28]
 8108930:	4413      	add	r3, r2
 8108932:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8108936:	461a      	mov	r2, r3
 8108938:	2301      	movs	r3, #1
 810893a:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 810893c:	687b      	ldr	r3, [r7, #4]
 810893e:	691b      	ldr	r3, [r3, #16]
 8108940:	2b01      	cmp	r3, #1
 8108942:	d132      	bne.n	81089aa <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8108944:	6879      	ldr	r1, [r7, #4]
 8108946:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8108948:	4613      	mov	r3, r2
 810894a:	00db      	lsls	r3, r3, #3
 810894c:	1a9b      	subs	r3, r3, r2
 810894e:	009b      	lsls	r3, r3, #2
 8108950:	440b      	add	r3, r1
 8108952:	3348      	adds	r3, #72	; 0x48
 8108954:	6819      	ldr	r1, [r3, #0]
 8108956:	6878      	ldr	r0, [r7, #4]
 8108958:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 810895a:	4613      	mov	r3, r2
 810895c:	00db      	lsls	r3, r3, #3
 810895e:	1a9b      	subs	r3, r3, r2
 8108960:	009b      	lsls	r3, r3, #2
 8108962:	4403      	add	r3, r0
 8108964:	3344      	adds	r3, #68	; 0x44
 8108966:	681b      	ldr	r3, [r3, #0]
 8108968:	4419      	add	r1, r3
 810896a:	6878      	ldr	r0, [r7, #4]
 810896c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 810896e:	4613      	mov	r3, r2
 8108970:	00db      	lsls	r3, r3, #3
 8108972:	1a9b      	subs	r3, r3, r2
 8108974:	009b      	lsls	r3, r3, #2
 8108976:	4403      	add	r3, r0
 8108978:	3348      	adds	r3, #72	; 0x48
 810897a:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 810897c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810897e:	2b00      	cmp	r3, #0
 8108980:	d113      	bne.n	81089aa <HAL_PCD_IRQHandler+0x31c>
 8108982:	6879      	ldr	r1, [r7, #4]
 8108984:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8108986:	4613      	mov	r3, r2
 8108988:	00db      	lsls	r3, r3, #3
 810898a:	1a9b      	subs	r3, r3, r2
 810898c:	009b      	lsls	r3, r3, #2
 810898e:	440b      	add	r3, r1
 8108990:	3350      	adds	r3, #80	; 0x50
 8108992:	681b      	ldr	r3, [r3, #0]
 8108994:	2b00      	cmp	r3, #0
 8108996:	d108      	bne.n	81089aa <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8108998:	687b      	ldr	r3, [r7, #4]
 810899a:	6818      	ldr	r0, [r3, #0]
 810899c:	687b      	ldr	r3, [r7, #4]
 810899e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 81089a2:	461a      	mov	r2, r3
 81089a4:	2101      	movs	r1, #1
 81089a6:	f00a fe49 	bl	811363c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 81089aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81089ac:	b2db      	uxtb	r3, r3
 81089ae:	4619      	mov	r1, r3
 81089b0:	6878      	ldr	r0, [r7, #4]
 81089b2:	f010 f800 	bl	81189b6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 81089b6:	693b      	ldr	r3, [r7, #16]
 81089b8:	f003 0308 	and.w	r3, r3, #8
 81089bc:	2b00      	cmp	r3, #0
 81089be:	d008      	beq.n	81089d2 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 81089c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81089c2:	015a      	lsls	r2, r3, #5
 81089c4:	69fb      	ldr	r3, [r7, #28]
 81089c6:	4413      	add	r3, r2
 81089c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 81089cc:	461a      	mov	r2, r3
 81089ce:	2308      	movs	r3, #8
 81089d0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 81089d2:	693b      	ldr	r3, [r7, #16]
 81089d4:	f003 0310 	and.w	r3, r3, #16
 81089d8:	2b00      	cmp	r3, #0
 81089da:	d008      	beq.n	81089ee <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 81089dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81089de:	015a      	lsls	r2, r3, #5
 81089e0:	69fb      	ldr	r3, [r7, #28]
 81089e2:	4413      	add	r3, r2
 81089e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 81089e8:	461a      	mov	r2, r3
 81089ea:	2310      	movs	r3, #16
 81089ec:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 81089ee:	693b      	ldr	r3, [r7, #16]
 81089f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 81089f4:	2b00      	cmp	r3, #0
 81089f6:	d008      	beq.n	8108a0a <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 81089f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81089fa:	015a      	lsls	r2, r3, #5
 81089fc:	69fb      	ldr	r3, [r7, #28]
 81089fe:	4413      	add	r3, r2
 8108a00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8108a04:	461a      	mov	r2, r3
 8108a06:	2340      	movs	r3, #64	; 0x40
 8108a08:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8108a0a:	693b      	ldr	r3, [r7, #16]
 8108a0c:	f003 0302 	and.w	r3, r3, #2
 8108a10:	2b00      	cmp	r3, #0
 8108a12:	d008      	beq.n	8108a26 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8108a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8108a16:	015a      	lsls	r2, r3, #5
 8108a18:	69fb      	ldr	r3, [r7, #28]
 8108a1a:	4413      	add	r3, r2
 8108a1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8108a20:	461a      	mov	r2, r3
 8108a22:	2302      	movs	r3, #2
 8108a24:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8108a26:	693b      	ldr	r3, [r7, #16]
 8108a28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8108a2c:	2b00      	cmp	r3, #0
 8108a2e:	d003      	beq.n	8108a38 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8108a30:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8108a32:	6878      	ldr	r0, [r7, #4]
 8108a34:	f000 fc48 	bl	81092c8 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8108a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8108a3a:	3301      	adds	r3, #1
 8108a3c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8108a3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8108a40:	085b      	lsrs	r3, r3, #1
 8108a42:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8108a44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8108a46:	2b00      	cmp	r3, #0
 8108a48:	f47f af49 	bne.w	81088de <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8108a4c:	687b      	ldr	r3, [r7, #4]
 8108a4e:	681b      	ldr	r3, [r3, #0]
 8108a50:	4618      	mov	r0, r3
 8108a52:	f00a fd2e 	bl	81134b2 <USB_ReadInterrupts>
 8108a56:	4603      	mov	r3, r0
 8108a58:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8108a5c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8108a60:	d122      	bne.n	8108aa8 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8108a62:	69fb      	ldr	r3, [r7, #28]
 8108a64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8108a68:	685b      	ldr	r3, [r3, #4]
 8108a6a:	69fa      	ldr	r2, [r7, #28]
 8108a6c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8108a70:	f023 0301 	bic.w	r3, r3, #1
 8108a74:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8108a76:	687b      	ldr	r3, [r7, #4]
 8108a78:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8108a7c:	2b01      	cmp	r3, #1
 8108a7e:	d108      	bne.n	8108a92 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8108a80:	687b      	ldr	r3, [r7, #4]
 8108a82:	2200      	movs	r2, #0
 8108a84:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8108a88:	2100      	movs	r1, #0
 8108a8a:	6878      	ldr	r0, [r7, #4]
 8108a8c:	f000 fe78 	bl	8109780 <HAL_PCDEx_LPM_Callback>
 8108a90:	e002      	b.n	8108a98 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8108a92:	6878      	ldr	r0, [r7, #4]
 8108a94:	f010 f806 	bl	8118aa4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8108a98:	687b      	ldr	r3, [r7, #4]
 8108a9a:	681b      	ldr	r3, [r3, #0]
 8108a9c:	695a      	ldr	r2, [r3, #20]
 8108a9e:	687b      	ldr	r3, [r7, #4]
 8108aa0:	681b      	ldr	r3, [r3, #0]
 8108aa2:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8108aa6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8108aa8:	687b      	ldr	r3, [r7, #4]
 8108aaa:	681b      	ldr	r3, [r3, #0]
 8108aac:	4618      	mov	r0, r3
 8108aae:	f00a fd00 	bl	81134b2 <USB_ReadInterrupts>
 8108ab2:	4603      	mov	r3, r0
 8108ab4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8108ab8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8108abc:	d112      	bne.n	8108ae4 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8108abe:	69fb      	ldr	r3, [r7, #28]
 8108ac0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8108ac4:	689b      	ldr	r3, [r3, #8]
 8108ac6:	f003 0301 	and.w	r3, r3, #1
 8108aca:	2b01      	cmp	r3, #1
 8108acc:	d102      	bne.n	8108ad4 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8108ace:	6878      	ldr	r0, [r7, #4]
 8108ad0:	f00f ffc2 	bl	8118a58 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8108ad4:	687b      	ldr	r3, [r7, #4]
 8108ad6:	681b      	ldr	r3, [r3, #0]
 8108ad8:	695a      	ldr	r2, [r3, #20]
 8108ada:	687b      	ldr	r3, [r7, #4]
 8108adc:	681b      	ldr	r3, [r3, #0]
 8108ade:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8108ae2:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8108ae4:	687b      	ldr	r3, [r7, #4]
 8108ae6:	681b      	ldr	r3, [r3, #0]
 8108ae8:	4618      	mov	r0, r3
 8108aea:	f00a fce2 	bl	81134b2 <USB_ReadInterrupts>
 8108aee:	4603      	mov	r3, r0
 8108af0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8108af4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8108af8:	d121      	bne.n	8108b3e <HAL_PCD_IRQHandler+0x4b0>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8108afa:	687b      	ldr	r3, [r7, #4]
 8108afc:	681b      	ldr	r3, [r3, #0]
 8108afe:	695a      	ldr	r2, [r3, #20]
 8108b00:	687b      	ldr	r3, [r7, #4]
 8108b02:	681b      	ldr	r3, [r3, #0]
 8108b04:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8108b08:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8108b0a:	687b      	ldr	r3, [r7, #4]
 8108b0c:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8108b10:	2b00      	cmp	r3, #0
 8108b12:	d111      	bne.n	8108b38 <HAL_PCD_IRQHandler+0x4aa>
      {
        hpcd->LPM_State = LPM_L1;
 8108b14:	687b      	ldr	r3, [r7, #4]
 8108b16:	2201      	movs	r2, #1
 8108b18:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8108b1c:	687b      	ldr	r3, [r7, #4]
 8108b1e:	681b      	ldr	r3, [r3, #0]
 8108b20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8108b22:	089b      	lsrs	r3, r3, #2
 8108b24:	f003 020f 	and.w	r2, r3, #15
 8108b28:	687b      	ldr	r3, [r7, #4]
 8108b2a:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8108b2e:	2101      	movs	r1, #1
 8108b30:	6878      	ldr	r0, [r7, #4]
 8108b32:	f000 fe25 	bl	8109780 <HAL_PCDEx_LPM_Callback>
 8108b36:	e002      	b.n	8108b3e <HAL_PCD_IRQHandler+0x4b0>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8108b38:	6878      	ldr	r0, [r7, #4]
 8108b3a:	f00f ff8d 	bl	8118a58 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8108b3e:	687b      	ldr	r3, [r7, #4]
 8108b40:	681b      	ldr	r3, [r3, #0]
 8108b42:	4618      	mov	r0, r3
 8108b44:	f00a fcb5 	bl	81134b2 <USB_ReadInterrupts>
 8108b48:	4603      	mov	r3, r0
 8108b4a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8108b4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8108b52:	f040 80c7 	bne.w	8108ce4 <HAL_PCD_IRQHandler+0x656>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8108b56:	69fb      	ldr	r3, [r7, #28]
 8108b58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8108b5c:	685b      	ldr	r3, [r3, #4]
 8108b5e:	69fa      	ldr	r2, [r7, #28]
 8108b60:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8108b64:	f023 0301 	bic.w	r3, r3, #1
 8108b68:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8108b6a:	687b      	ldr	r3, [r7, #4]
 8108b6c:	681b      	ldr	r3, [r3, #0]
 8108b6e:	2110      	movs	r1, #16
 8108b70:	4618      	mov	r0, r3
 8108b72:	f009 fd4b 	bl	811260c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8108b76:	2300      	movs	r3, #0
 8108b78:	62fb      	str	r3, [r7, #44]	; 0x2c
 8108b7a:	e056      	b.n	8108c2a <HAL_PCD_IRQHandler+0x59c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8108b7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8108b7e:	015a      	lsls	r2, r3, #5
 8108b80:	69fb      	ldr	r3, [r7, #28]
 8108b82:	4413      	add	r3, r2
 8108b84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8108b88:	461a      	mov	r2, r3
 8108b8a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8108b8e:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8108b90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8108b92:	015a      	lsls	r2, r3, #5
 8108b94:	69fb      	ldr	r3, [r7, #28]
 8108b96:	4413      	add	r3, r2
 8108b98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8108b9c:	681b      	ldr	r3, [r3, #0]
 8108b9e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8108ba0:	0151      	lsls	r1, r2, #5
 8108ba2:	69fa      	ldr	r2, [r7, #28]
 8108ba4:	440a      	add	r2, r1
 8108ba6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8108baa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8108bae:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8108bb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8108bb2:	015a      	lsls	r2, r3, #5
 8108bb4:	69fb      	ldr	r3, [r7, #28]
 8108bb6:	4413      	add	r3, r2
 8108bb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8108bbc:	681b      	ldr	r3, [r3, #0]
 8108bbe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8108bc0:	0151      	lsls	r1, r2, #5
 8108bc2:	69fa      	ldr	r2, [r7, #28]
 8108bc4:	440a      	add	r2, r1
 8108bc6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8108bca:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8108bce:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8108bd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8108bd2:	015a      	lsls	r2, r3, #5
 8108bd4:	69fb      	ldr	r3, [r7, #28]
 8108bd6:	4413      	add	r3, r2
 8108bd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8108bdc:	461a      	mov	r2, r3
 8108bde:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8108be2:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8108be4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8108be6:	015a      	lsls	r2, r3, #5
 8108be8:	69fb      	ldr	r3, [r7, #28]
 8108bea:	4413      	add	r3, r2
 8108bec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8108bf0:	681b      	ldr	r3, [r3, #0]
 8108bf2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8108bf4:	0151      	lsls	r1, r2, #5
 8108bf6:	69fa      	ldr	r2, [r7, #28]
 8108bf8:	440a      	add	r2, r1
 8108bfa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8108bfe:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8108c02:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8108c04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8108c06:	015a      	lsls	r2, r3, #5
 8108c08:	69fb      	ldr	r3, [r7, #28]
 8108c0a:	4413      	add	r3, r2
 8108c0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8108c10:	681b      	ldr	r3, [r3, #0]
 8108c12:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8108c14:	0151      	lsls	r1, r2, #5
 8108c16:	69fa      	ldr	r2, [r7, #28]
 8108c18:	440a      	add	r2, r1
 8108c1a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8108c1e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8108c22:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8108c24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8108c26:	3301      	adds	r3, #1
 8108c28:	62fb      	str	r3, [r7, #44]	; 0x2c
 8108c2a:	687b      	ldr	r3, [r7, #4]
 8108c2c:	685b      	ldr	r3, [r3, #4]
 8108c2e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8108c30:	429a      	cmp	r2, r3
 8108c32:	d3a3      	bcc.n	8108b7c <HAL_PCD_IRQHandler+0x4ee>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8108c34:	69fb      	ldr	r3, [r7, #28]
 8108c36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8108c3a:	69db      	ldr	r3, [r3, #28]
 8108c3c:	69fa      	ldr	r2, [r7, #28]
 8108c3e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8108c42:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8108c46:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8108c48:	687b      	ldr	r3, [r7, #4]
 8108c4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8108c4c:	2b00      	cmp	r3, #0
 8108c4e:	d016      	beq.n	8108c7e <HAL_PCD_IRQHandler+0x5f0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8108c50:	69fb      	ldr	r3, [r7, #28]
 8108c52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8108c56:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8108c5a:	69fa      	ldr	r2, [r7, #28]
 8108c5c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8108c60:	f043 030b 	orr.w	r3, r3, #11
 8108c64:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8108c68:	69fb      	ldr	r3, [r7, #28]
 8108c6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8108c6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8108c70:	69fa      	ldr	r2, [r7, #28]
 8108c72:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8108c76:	f043 030b 	orr.w	r3, r3, #11
 8108c7a:	6453      	str	r3, [r2, #68]	; 0x44
 8108c7c:	e015      	b.n	8108caa <HAL_PCD_IRQHandler+0x61c>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8108c7e:	69fb      	ldr	r3, [r7, #28]
 8108c80:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8108c84:	695b      	ldr	r3, [r3, #20]
 8108c86:	69fa      	ldr	r2, [r7, #28]
 8108c88:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8108c8c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8108c90:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8108c94:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8108c96:	69fb      	ldr	r3, [r7, #28]
 8108c98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8108c9c:	691b      	ldr	r3, [r3, #16]
 8108c9e:	69fa      	ldr	r2, [r7, #28]
 8108ca0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8108ca4:	f043 030b 	orr.w	r3, r3, #11
 8108ca8:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8108caa:	69fb      	ldr	r3, [r7, #28]
 8108cac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8108cb0:	681b      	ldr	r3, [r3, #0]
 8108cb2:	69fa      	ldr	r2, [r7, #28]
 8108cb4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8108cb8:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8108cbc:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8108cbe:	687b      	ldr	r3, [r7, #4]
 8108cc0:	6818      	ldr	r0, [r3, #0]
 8108cc2:	687b      	ldr	r3, [r7, #4]
 8108cc4:	691b      	ldr	r3, [r3, #16]
 8108cc6:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8108cc8:	687b      	ldr	r3, [r7, #4]
 8108cca:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8108cce:	461a      	mov	r2, r3
 8108cd0:	f00a fcb4 	bl	811363c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8108cd4:	687b      	ldr	r3, [r7, #4]
 8108cd6:	681b      	ldr	r3, [r3, #0]
 8108cd8:	695a      	ldr	r2, [r3, #20]
 8108cda:	687b      	ldr	r3, [r7, #4]
 8108cdc:	681b      	ldr	r3, [r3, #0]
 8108cde:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8108ce2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8108ce4:	687b      	ldr	r3, [r7, #4]
 8108ce6:	681b      	ldr	r3, [r3, #0]
 8108ce8:	4618      	mov	r0, r3
 8108cea:	f00a fbe2 	bl	81134b2 <USB_ReadInterrupts>
 8108cee:	4603      	mov	r3, r0
 8108cf0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8108cf4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8108cf8:	d124      	bne.n	8108d44 <HAL_PCD_IRQHandler+0x6b6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8108cfa:	687b      	ldr	r3, [r7, #4]
 8108cfc:	681b      	ldr	r3, [r3, #0]
 8108cfe:	4618      	mov	r0, r3
 8108d00:	f00a fc78 	bl	81135f4 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8108d04:	687b      	ldr	r3, [r7, #4]
 8108d06:	681b      	ldr	r3, [r3, #0]
 8108d08:	4618      	mov	r0, r3
 8108d0a:	f009 fce0 	bl	81126ce <USB_GetDevSpeed>
 8108d0e:	4603      	mov	r3, r0
 8108d10:	461a      	mov	r2, r3
 8108d12:	687b      	ldr	r3, [r7, #4]
 8108d14:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8108d16:	687b      	ldr	r3, [r7, #4]
 8108d18:	681c      	ldr	r4, [r3, #0]
 8108d1a:	f000 ff4f 	bl	8109bbc <HAL_RCC_GetHCLKFreq>
 8108d1e:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8108d20:	687b      	ldr	r3, [r7, #4]
 8108d22:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8108d24:	b2db      	uxtb	r3, r3
 8108d26:	461a      	mov	r2, r3
 8108d28:	4620      	mov	r0, r4
 8108d2a:	f009 fa23 	bl	8112174 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8108d2e:	6878      	ldr	r0, [r7, #4]
 8108d30:	f00f fe69 	bl	8118a06 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8108d34:	687b      	ldr	r3, [r7, #4]
 8108d36:	681b      	ldr	r3, [r3, #0]
 8108d38:	695a      	ldr	r2, [r3, #20]
 8108d3a:	687b      	ldr	r3, [r7, #4]
 8108d3c:	681b      	ldr	r3, [r3, #0]
 8108d3e:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8108d42:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8108d44:	687b      	ldr	r3, [r7, #4]
 8108d46:	681b      	ldr	r3, [r3, #0]
 8108d48:	4618      	mov	r0, r3
 8108d4a:	f00a fbb2 	bl	81134b2 <USB_ReadInterrupts>
 8108d4e:	4603      	mov	r3, r0
 8108d50:	f003 0308 	and.w	r3, r3, #8
 8108d54:	2b08      	cmp	r3, #8
 8108d56:	d10a      	bne.n	8108d6e <HAL_PCD_IRQHandler+0x6e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8108d58:	6878      	ldr	r0, [r7, #4]
 8108d5a:	f00f fe46 	bl	81189ea <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8108d5e:	687b      	ldr	r3, [r7, #4]
 8108d60:	681b      	ldr	r3, [r3, #0]
 8108d62:	695a      	ldr	r2, [r3, #20]
 8108d64:	687b      	ldr	r3, [r7, #4]
 8108d66:	681b      	ldr	r3, [r3, #0]
 8108d68:	f002 0208 	and.w	r2, r2, #8
 8108d6c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8108d6e:	687b      	ldr	r3, [r7, #4]
 8108d70:	681b      	ldr	r3, [r3, #0]
 8108d72:	4618      	mov	r0, r3
 8108d74:	f00a fb9d 	bl	81134b2 <USB_ReadInterrupts>
 8108d78:	4603      	mov	r3, r0
 8108d7a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8108d7e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8108d82:	d10f      	bne.n	8108da4 <HAL_PCD_IRQHandler+0x716>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8108d84:	2300      	movs	r3, #0
 8108d86:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8108d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8108d8a:	b2db      	uxtb	r3, r3
 8108d8c:	4619      	mov	r1, r3
 8108d8e:	6878      	ldr	r0, [r7, #4]
 8108d90:	f00f fea8 	bl	8118ae4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8108d94:	687b      	ldr	r3, [r7, #4]
 8108d96:	681b      	ldr	r3, [r3, #0]
 8108d98:	695a      	ldr	r2, [r3, #20]
 8108d9a:	687b      	ldr	r3, [r7, #4]
 8108d9c:	681b      	ldr	r3, [r3, #0]
 8108d9e:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8108da2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8108da4:	687b      	ldr	r3, [r7, #4]
 8108da6:	681b      	ldr	r3, [r3, #0]
 8108da8:	4618      	mov	r0, r3
 8108daa:	f00a fb82 	bl	81134b2 <USB_ReadInterrupts>
 8108dae:	4603      	mov	r3, r0
 8108db0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8108db4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8108db8:	d10f      	bne.n	8108dda <HAL_PCD_IRQHandler+0x74c>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8108dba:	2300      	movs	r3, #0
 8108dbc:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8108dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8108dc0:	b2db      	uxtb	r3, r3
 8108dc2:	4619      	mov	r1, r3
 8108dc4:	6878      	ldr	r0, [r7, #4]
 8108dc6:	f00f fe7b 	bl	8118ac0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8108dca:	687b      	ldr	r3, [r7, #4]
 8108dcc:	681b      	ldr	r3, [r3, #0]
 8108dce:	695a      	ldr	r2, [r3, #20]
 8108dd0:	687b      	ldr	r3, [r7, #4]
 8108dd2:	681b      	ldr	r3, [r3, #0]
 8108dd4:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8108dd8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8108dda:	687b      	ldr	r3, [r7, #4]
 8108ddc:	681b      	ldr	r3, [r3, #0]
 8108dde:	4618      	mov	r0, r3
 8108de0:	f00a fb67 	bl	81134b2 <USB_ReadInterrupts>
 8108de4:	4603      	mov	r3, r0
 8108de6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8108dea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8108dee:	d10a      	bne.n	8108e06 <HAL_PCD_IRQHandler+0x778>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8108df0:	6878      	ldr	r0, [r7, #4]
 8108df2:	f00f fe89 	bl	8118b08 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8108df6:	687b      	ldr	r3, [r7, #4]
 8108df8:	681b      	ldr	r3, [r3, #0]
 8108dfa:	695a      	ldr	r2, [r3, #20]
 8108dfc:	687b      	ldr	r3, [r7, #4]
 8108dfe:	681b      	ldr	r3, [r3, #0]
 8108e00:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8108e04:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8108e06:	687b      	ldr	r3, [r7, #4]
 8108e08:	681b      	ldr	r3, [r3, #0]
 8108e0a:	4618      	mov	r0, r3
 8108e0c:	f00a fb51 	bl	81134b2 <USB_ReadInterrupts>
 8108e10:	4603      	mov	r3, r0
 8108e12:	f003 0304 	and.w	r3, r3, #4
 8108e16:	2b04      	cmp	r3, #4
 8108e18:	d115      	bne.n	8108e46 <HAL_PCD_IRQHandler+0x7b8>
    {
      temp = hpcd->Instance->GOTGINT;
 8108e1a:	687b      	ldr	r3, [r7, #4]
 8108e1c:	681b      	ldr	r3, [r3, #0]
 8108e1e:	685b      	ldr	r3, [r3, #4]
 8108e20:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8108e22:	69bb      	ldr	r3, [r7, #24]
 8108e24:	f003 0304 	and.w	r3, r3, #4
 8108e28:	2b00      	cmp	r3, #0
 8108e2a:	d002      	beq.n	8108e32 <HAL_PCD_IRQHandler+0x7a4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8108e2c:	6878      	ldr	r0, [r7, #4]
 8108e2e:	f00f fe79 	bl	8118b24 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8108e32:	687b      	ldr	r3, [r7, #4]
 8108e34:	681b      	ldr	r3, [r3, #0]
 8108e36:	6859      	ldr	r1, [r3, #4]
 8108e38:	687b      	ldr	r3, [r7, #4]
 8108e3a:	681b      	ldr	r3, [r3, #0]
 8108e3c:	69ba      	ldr	r2, [r7, #24]
 8108e3e:	430a      	orrs	r2, r1
 8108e40:	605a      	str	r2, [r3, #4]
 8108e42:	e000      	b.n	8108e46 <HAL_PCD_IRQHandler+0x7b8>
      return;
 8108e44:	bf00      	nop
    }
  }
}
 8108e46:	3734      	adds	r7, #52	; 0x34
 8108e48:	46bd      	mov	sp, r7
 8108e4a:	bd90      	pop	{r4, r7, pc}

08108e4c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8108e4c:	b580      	push	{r7, lr}
 8108e4e:	b082      	sub	sp, #8
 8108e50:	af00      	add	r7, sp, #0
 8108e52:	6078      	str	r0, [r7, #4]
 8108e54:	460b      	mov	r3, r1
 8108e56:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8108e58:	687b      	ldr	r3, [r7, #4]
 8108e5a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8108e5e:	2b01      	cmp	r3, #1
 8108e60:	d101      	bne.n	8108e66 <HAL_PCD_SetAddress+0x1a>
 8108e62:	2302      	movs	r3, #2
 8108e64:	e013      	b.n	8108e8e <HAL_PCD_SetAddress+0x42>
 8108e66:	687b      	ldr	r3, [r7, #4]
 8108e68:	2201      	movs	r2, #1
 8108e6a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8108e6e:	687b      	ldr	r3, [r7, #4]
 8108e70:	78fa      	ldrb	r2, [r7, #3]
 8108e72:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8108e76:	687b      	ldr	r3, [r7, #4]
 8108e78:	681b      	ldr	r3, [r3, #0]
 8108e7a:	78fa      	ldrb	r2, [r7, #3]
 8108e7c:	4611      	mov	r1, r2
 8108e7e:	4618      	mov	r0, r3
 8108e80:	f00a faaf 	bl	81133e2 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8108e84:	687b      	ldr	r3, [r7, #4]
 8108e86:	2200      	movs	r2, #0
 8108e88:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8108e8c:	2300      	movs	r3, #0
}
 8108e8e:	4618      	mov	r0, r3
 8108e90:	3708      	adds	r7, #8
 8108e92:	46bd      	mov	sp, r7
 8108e94:	bd80      	pop	{r7, pc}

08108e96 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8108e96:	b580      	push	{r7, lr}
 8108e98:	b084      	sub	sp, #16
 8108e9a:	af00      	add	r7, sp, #0
 8108e9c:	6078      	str	r0, [r7, #4]
 8108e9e:	4608      	mov	r0, r1
 8108ea0:	4611      	mov	r1, r2
 8108ea2:	461a      	mov	r2, r3
 8108ea4:	4603      	mov	r3, r0
 8108ea6:	70fb      	strb	r3, [r7, #3]
 8108ea8:	460b      	mov	r3, r1
 8108eaa:	803b      	strh	r3, [r7, #0]
 8108eac:	4613      	mov	r3, r2
 8108eae:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8108eb0:	2300      	movs	r3, #0
 8108eb2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8108eb4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8108eb8:	2b00      	cmp	r3, #0
 8108eba:	da0f      	bge.n	8108edc <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8108ebc:	78fb      	ldrb	r3, [r7, #3]
 8108ebe:	f003 020f 	and.w	r2, r3, #15
 8108ec2:	4613      	mov	r3, r2
 8108ec4:	00db      	lsls	r3, r3, #3
 8108ec6:	1a9b      	subs	r3, r3, r2
 8108ec8:	009b      	lsls	r3, r3, #2
 8108eca:	3338      	adds	r3, #56	; 0x38
 8108ecc:	687a      	ldr	r2, [r7, #4]
 8108ece:	4413      	add	r3, r2
 8108ed0:	3304      	adds	r3, #4
 8108ed2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8108ed4:	68fb      	ldr	r3, [r7, #12]
 8108ed6:	2201      	movs	r2, #1
 8108ed8:	705a      	strb	r2, [r3, #1]
 8108eda:	e00f      	b.n	8108efc <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8108edc:	78fb      	ldrb	r3, [r7, #3]
 8108ede:	f003 020f 	and.w	r2, r3, #15
 8108ee2:	4613      	mov	r3, r2
 8108ee4:	00db      	lsls	r3, r3, #3
 8108ee6:	1a9b      	subs	r3, r3, r2
 8108ee8:	009b      	lsls	r3, r3, #2
 8108eea:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8108eee:	687a      	ldr	r2, [r7, #4]
 8108ef0:	4413      	add	r3, r2
 8108ef2:	3304      	adds	r3, #4
 8108ef4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8108ef6:	68fb      	ldr	r3, [r7, #12]
 8108ef8:	2200      	movs	r2, #0
 8108efa:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8108efc:	78fb      	ldrb	r3, [r7, #3]
 8108efe:	f003 030f 	and.w	r3, r3, #15
 8108f02:	b2da      	uxtb	r2, r3
 8108f04:	68fb      	ldr	r3, [r7, #12]
 8108f06:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8108f08:	883a      	ldrh	r2, [r7, #0]
 8108f0a:	68fb      	ldr	r3, [r7, #12]
 8108f0c:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8108f0e:	68fb      	ldr	r3, [r7, #12]
 8108f10:	78ba      	ldrb	r2, [r7, #2]
 8108f12:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8108f14:	68fb      	ldr	r3, [r7, #12]
 8108f16:	785b      	ldrb	r3, [r3, #1]
 8108f18:	2b00      	cmp	r3, #0
 8108f1a:	d004      	beq.n	8108f26 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8108f1c:	68fb      	ldr	r3, [r7, #12]
 8108f1e:	781b      	ldrb	r3, [r3, #0]
 8108f20:	b29a      	uxth	r2, r3
 8108f22:	68fb      	ldr	r3, [r7, #12]
 8108f24:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8108f26:	78bb      	ldrb	r3, [r7, #2]
 8108f28:	2b02      	cmp	r3, #2
 8108f2a:	d102      	bne.n	8108f32 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8108f2c:	68fb      	ldr	r3, [r7, #12]
 8108f2e:	2200      	movs	r2, #0
 8108f30:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8108f32:	687b      	ldr	r3, [r7, #4]
 8108f34:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8108f38:	2b01      	cmp	r3, #1
 8108f3a:	d101      	bne.n	8108f40 <HAL_PCD_EP_Open+0xaa>
 8108f3c:	2302      	movs	r3, #2
 8108f3e:	e00e      	b.n	8108f5e <HAL_PCD_EP_Open+0xc8>
 8108f40:	687b      	ldr	r3, [r7, #4]
 8108f42:	2201      	movs	r2, #1
 8108f44:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8108f48:	687b      	ldr	r3, [r7, #4]
 8108f4a:	681b      	ldr	r3, [r3, #0]
 8108f4c:	68f9      	ldr	r1, [r7, #12]
 8108f4e:	4618      	mov	r0, r3
 8108f50:	f009 fbe2 	bl	8112718 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8108f54:	687b      	ldr	r3, [r7, #4]
 8108f56:	2200      	movs	r2, #0
 8108f58:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8108f5c:	7afb      	ldrb	r3, [r7, #11]
}
 8108f5e:	4618      	mov	r0, r3
 8108f60:	3710      	adds	r7, #16
 8108f62:	46bd      	mov	sp, r7
 8108f64:	bd80      	pop	{r7, pc}

08108f66 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8108f66:	b580      	push	{r7, lr}
 8108f68:	b084      	sub	sp, #16
 8108f6a:	af00      	add	r7, sp, #0
 8108f6c:	6078      	str	r0, [r7, #4]
 8108f6e:	460b      	mov	r3, r1
 8108f70:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8108f72:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8108f76:	2b00      	cmp	r3, #0
 8108f78:	da0f      	bge.n	8108f9a <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8108f7a:	78fb      	ldrb	r3, [r7, #3]
 8108f7c:	f003 020f 	and.w	r2, r3, #15
 8108f80:	4613      	mov	r3, r2
 8108f82:	00db      	lsls	r3, r3, #3
 8108f84:	1a9b      	subs	r3, r3, r2
 8108f86:	009b      	lsls	r3, r3, #2
 8108f88:	3338      	adds	r3, #56	; 0x38
 8108f8a:	687a      	ldr	r2, [r7, #4]
 8108f8c:	4413      	add	r3, r2
 8108f8e:	3304      	adds	r3, #4
 8108f90:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8108f92:	68fb      	ldr	r3, [r7, #12]
 8108f94:	2201      	movs	r2, #1
 8108f96:	705a      	strb	r2, [r3, #1]
 8108f98:	e00f      	b.n	8108fba <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8108f9a:	78fb      	ldrb	r3, [r7, #3]
 8108f9c:	f003 020f 	and.w	r2, r3, #15
 8108fa0:	4613      	mov	r3, r2
 8108fa2:	00db      	lsls	r3, r3, #3
 8108fa4:	1a9b      	subs	r3, r3, r2
 8108fa6:	009b      	lsls	r3, r3, #2
 8108fa8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8108fac:	687a      	ldr	r2, [r7, #4]
 8108fae:	4413      	add	r3, r2
 8108fb0:	3304      	adds	r3, #4
 8108fb2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8108fb4:	68fb      	ldr	r3, [r7, #12]
 8108fb6:	2200      	movs	r2, #0
 8108fb8:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8108fba:	78fb      	ldrb	r3, [r7, #3]
 8108fbc:	f003 030f 	and.w	r3, r3, #15
 8108fc0:	b2da      	uxtb	r2, r3
 8108fc2:	68fb      	ldr	r3, [r7, #12]
 8108fc4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8108fc6:	687b      	ldr	r3, [r7, #4]
 8108fc8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8108fcc:	2b01      	cmp	r3, #1
 8108fce:	d101      	bne.n	8108fd4 <HAL_PCD_EP_Close+0x6e>
 8108fd0:	2302      	movs	r3, #2
 8108fd2:	e00e      	b.n	8108ff2 <HAL_PCD_EP_Close+0x8c>
 8108fd4:	687b      	ldr	r3, [r7, #4]
 8108fd6:	2201      	movs	r2, #1
 8108fd8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8108fdc:	687b      	ldr	r3, [r7, #4]
 8108fde:	681b      	ldr	r3, [r3, #0]
 8108fe0:	68f9      	ldr	r1, [r7, #12]
 8108fe2:	4618      	mov	r0, r3
 8108fe4:	f009 fc20 	bl	8112828 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8108fe8:	687b      	ldr	r3, [r7, #4]
 8108fea:	2200      	movs	r2, #0
 8108fec:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8108ff0:	2300      	movs	r3, #0
}
 8108ff2:	4618      	mov	r0, r3
 8108ff4:	3710      	adds	r7, #16
 8108ff6:	46bd      	mov	sp, r7
 8108ff8:	bd80      	pop	{r7, pc}

08108ffa <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8108ffa:	b580      	push	{r7, lr}
 8108ffc:	b086      	sub	sp, #24
 8108ffe:	af00      	add	r7, sp, #0
 8109000:	60f8      	str	r0, [r7, #12]
 8109002:	607a      	str	r2, [r7, #4]
 8109004:	603b      	str	r3, [r7, #0]
 8109006:	460b      	mov	r3, r1
 8109008:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 810900a:	7afb      	ldrb	r3, [r7, #11]
 810900c:	f003 020f 	and.w	r2, r3, #15
 8109010:	4613      	mov	r3, r2
 8109012:	00db      	lsls	r3, r3, #3
 8109014:	1a9b      	subs	r3, r3, r2
 8109016:	009b      	lsls	r3, r3, #2
 8109018:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 810901c:	68fa      	ldr	r2, [r7, #12]
 810901e:	4413      	add	r3, r2
 8109020:	3304      	adds	r3, #4
 8109022:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8109024:	697b      	ldr	r3, [r7, #20]
 8109026:	687a      	ldr	r2, [r7, #4]
 8109028:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 810902a:	697b      	ldr	r3, [r7, #20]
 810902c:	683a      	ldr	r2, [r7, #0]
 810902e:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8109030:	697b      	ldr	r3, [r7, #20]
 8109032:	2200      	movs	r2, #0
 8109034:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8109036:	697b      	ldr	r3, [r7, #20]
 8109038:	2200      	movs	r2, #0
 810903a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 810903c:	7afb      	ldrb	r3, [r7, #11]
 810903e:	f003 030f 	and.w	r3, r3, #15
 8109042:	b2da      	uxtb	r2, r3
 8109044:	697b      	ldr	r3, [r7, #20]
 8109046:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8109048:	68fb      	ldr	r3, [r7, #12]
 810904a:	691b      	ldr	r3, [r3, #16]
 810904c:	2b01      	cmp	r3, #1
 810904e:	d102      	bne.n	8109056 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8109050:	687a      	ldr	r2, [r7, #4]
 8109052:	697b      	ldr	r3, [r7, #20]
 8109054:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8109056:	7afb      	ldrb	r3, [r7, #11]
 8109058:	f003 030f 	and.w	r3, r3, #15
 810905c:	2b00      	cmp	r3, #0
 810905e:	d109      	bne.n	8109074 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8109060:	68fb      	ldr	r3, [r7, #12]
 8109062:	6818      	ldr	r0, [r3, #0]
 8109064:	68fb      	ldr	r3, [r7, #12]
 8109066:	691b      	ldr	r3, [r3, #16]
 8109068:	b2db      	uxtb	r3, r3
 810906a:	461a      	mov	r2, r3
 810906c:	6979      	ldr	r1, [r7, #20]
 810906e:	f009 fefb 	bl	8112e68 <USB_EP0StartXfer>
 8109072:	e008      	b.n	8109086 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8109074:	68fb      	ldr	r3, [r7, #12]
 8109076:	6818      	ldr	r0, [r3, #0]
 8109078:	68fb      	ldr	r3, [r7, #12]
 810907a:	691b      	ldr	r3, [r3, #16]
 810907c:	b2db      	uxtb	r3, r3
 810907e:	461a      	mov	r2, r3
 8109080:	6979      	ldr	r1, [r7, #20]
 8109082:	f009 fcad 	bl	81129e0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8109086:	2300      	movs	r3, #0
}
 8109088:	4618      	mov	r0, r3
 810908a:	3718      	adds	r7, #24
 810908c:	46bd      	mov	sp, r7
 810908e:	bd80      	pop	{r7, pc}

08109090 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8109090:	b480      	push	{r7}
 8109092:	b083      	sub	sp, #12
 8109094:	af00      	add	r7, sp, #0
 8109096:	6078      	str	r0, [r7, #4]
 8109098:	460b      	mov	r3, r1
 810909a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 810909c:	78fb      	ldrb	r3, [r7, #3]
 810909e:	f003 020f 	and.w	r2, r3, #15
 81090a2:	6879      	ldr	r1, [r7, #4]
 81090a4:	4613      	mov	r3, r2
 81090a6:	00db      	lsls	r3, r3, #3
 81090a8:	1a9b      	subs	r3, r3, r2
 81090aa:	009b      	lsls	r3, r3, #2
 81090ac:	440b      	add	r3, r1
 81090ae:	f503 7305 	add.w	r3, r3, #532	; 0x214
 81090b2:	681b      	ldr	r3, [r3, #0]
}
 81090b4:	4618      	mov	r0, r3
 81090b6:	370c      	adds	r7, #12
 81090b8:	46bd      	mov	sp, r7
 81090ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 81090be:	4770      	bx	lr

081090c0 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 81090c0:	b580      	push	{r7, lr}
 81090c2:	b086      	sub	sp, #24
 81090c4:	af00      	add	r7, sp, #0
 81090c6:	60f8      	str	r0, [r7, #12]
 81090c8:	607a      	str	r2, [r7, #4]
 81090ca:	603b      	str	r3, [r7, #0]
 81090cc:	460b      	mov	r3, r1
 81090ce:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 81090d0:	7afb      	ldrb	r3, [r7, #11]
 81090d2:	f003 020f 	and.w	r2, r3, #15
 81090d6:	4613      	mov	r3, r2
 81090d8:	00db      	lsls	r3, r3, #3
 81090da:	1a9b      	subs	r3, r3, r2
 81090dc:	009b      	lsls	r3, r3, #2
 81090de:	3338      	adds	r3, #56	; 0x38
 81090e0:	68fa      	ldr	r2, [r7, #12]
 81090e2:	4413      	add	r3, r2
 81090e4:	3304      	adds	r3, #4
 81090e6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 81090e8:	697b      	ldr	r3, [r7, #20]
 81090ea:	687a      	ldr	r2, [r7, #4]
 81090ec:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 81090ee:	697b      	ldr	r3, [r7, #20]
 81090f0:	683a      	ldr	r2, [r7, #0]
 81090f2:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 81090f4:	697b      	ldr	r3, [r7, #20]
 81090f6:	2200      	movs	r2, #0
 81090f8:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 81090fa:	697b      	ldr	r3, [r7, #20]
 81090fc:	2201      	movs	r2, #1
 81090fe:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8109100:	7afb      	ldrb	r3, [r7, #11]
 8109102:	f003 030f 	and.w	r3, r3, #15
 8109106:	b2da      	uxtb	r2, r3
 8109108:	697b      	ldr	r3, [r7, #20]
 810910a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 810910c:	68fb      	ldr	r3, [r7, #12]
 810910e:	691b      	ldr	r3, [r3, #16]
 8109110:	2b01      	cmp	r3, #1
 8109112:	d102      	bne.n	810911a <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8109114:	687a      	ldr	r2, [r7, #4]
 8109116:	697b      	ldr	r3, [r7, #20]
 8109118:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 810911a:	7afb      	ldrb	r3, [r7, #11]
 810911c:	f003 030f 	and.w	r3, r3, #15
 8109120:	2b00      	cmp	r3, #0
 8109122:	d109      	bne.n	8109138 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8109124:	68fb      	ldr	r3, [r7, #12]
 8109126:	6818      	ldr	r0, [r3, #0]
 8109128:	68fb      	ldr	r3, [r7, #12]
 810912a:	691b      	ldr	r3, [r3, #16]
 810912c:	b2db      	uxtb	r3, r3
 810912e:	461a      	mov	r2, r3
 8109130:	6979      	ldr	r1, [r7, #20]
 8109132:	f009 fe99 	bl	8112e68 <USB_EP0StartXfer>
 8109136:	e008      	b.n	810914a <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8109138:	68fb      	ldr	r3, [r7, #12]
 810913a:	6818      	ldr	r0, [r3, #0]
 810913c:	68fb      	ldr	r3, [r7, #12]
 810913e:	691b      	ldr	r3, [r3, #16]
 8109140:	b2db      	uxtb	r3, r3
 8109142:	461a      	mov	r2, r3
 8109144:	6979      	ldr	r1, [r7, #20]
 8109146:	f009 fc4b 	bl	81129e0 <USB_EPStartXfer>
  }

  return HAL_OK;
 810914a:	2300      	movs	r3, #0
}
 810914c:	4618      	mov	r0, r3
 810914e:	3718      	adds	r7, #24
 8109150:	46bd      	mov	sp, r7
 8109152:	bd80      	pop	{r7, pc}

08109154 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8109154:	b580      	push	{r7, lr}
 8109156:	b084      	sub	sp, #16
 8109158:	af00      	add	r7, sp, #0
 810915a:	6078      	str	r0, [r7, #4]
 810915c:	460b      	mov	r3, r1
 810915e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8109160:	78fb      	ldrb	r3, [r7, #3]
 8109162:	f003 020f 	and.w	r2, r3, #15
 8109166:	687b      	ldr	r3, [r7, #4]
 8109168:	685b      	ldr	r3, [r3, #4]
 810916a:	429a      	cmp	r2, r3
 810916c:	d901      	bls.n	8109172 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 810916e:	2301      	movs	r3, #1
 8109170:	e050      	b.n	8109214 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8109172:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8109176:	2b00      	cmp	r3, #0
 8109178:	da0f      	bge.n	810919a <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 810917a:	78fb      	ldrb	r3, [r7, #3]
 810917c:	f003 020f 	and.w	r2, r3, #15
 8109180:	4613      	mov	r3, r2
 8109182:	00db      	lsls	r3, r3, #3
 8109184:	1a9b      	subs	r3, r3, r2
 8109186:	009b      	lsls	r3, r3, #2
 8109188:	3338      	adds	r3, #56	; 0x38
 810918a:	687a      	ldr	r2, [r7, #4]
 810918c:	4413      	add	r3, r2
 810918e:	3304      	adds	r3, #4
 8109190:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8109192:	68fb      	ldr	r3, [r7, #12]
 8109194:	2201      	movs	r2, #1
 8109196:	705a      	strb	r2, [r3, #1]
 8109198:	e00d      	b.n	81091b6 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 810919a:	78fa      	ldrb	r2, [r7, #3]
 810919c:	4613      	mov	r3, r2
 810919e:	00db      	lsls	r3, r3, #3
 81091a0:	1a9b      	subs	r3, r3, r2
 81091a2:	009b      	lsls	r3, r3, #2
 81091a4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 81091a8:	687a      	ldr	r2, [r7, #4]
 81091aa:	4413      	add	r3, r2
 81091ac:	3304      	adds	r3, #4
 81091ae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 81091b0:	68fb      	ldr	r3, [r7, #12]
 81091b2:	2200      	movs	r2, #0
 81091b4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 81091b6:	68fb      	ldr	r3, [r7, #12]
 81091b8:	2201      	movs	r2, #1
 81091ba:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 81091bc:	78fb      	ldrb	r3, [r7, #3]
 81091be:	f003 030f 	and.w	r3, r3, #15
 81091c2:	b2da      	uxtb	r2, r3
 81091c4:	68fb      	ldr	r3, [r7, #12]
 81091c6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 81091c8:	687b      	ldr	r3, [r7, #4]
 81091ca:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 81091ce:	2b01      	cmp	r3, #1
 81091d0:	d101      	bne.n	81091d6 <HAL_PCD_EP_SetStall+0x82>
 81091d2:	2302      	movs	r3, #2
 81091d4:	e01e      	b.n	8109214 <HAL_PCD_EP_SetStall+0xc0>
 81091d6:	687b      	ldr	r3, [r7, #4]
 81091d8:	2201      	movs	r2, #1
 81091da:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 81091de:	687b      	ldr	r3, [r7, #4]
 81091e0:	681b      	ldr	r3, [r3, #0]
 81091e2:	68f9      	ldr	r1, [r7, #12]
 81091e4:	4618      	mov	r0, r3
 81091e6:	f00a f828 	bl	811323a <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 81091ea:	78fb      	ldrb	r3, [r7, #3]
 81091ec:	f003 030f 	and.w	r3, r3, #15
 81091f0:	2b00      	cmp	r3, #0
 81091f2:	d10a      	bne.n	810920a <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 81091f4:	687b      	ldr	r3, [r7, #4]
 81091f6:	6818      	ldr	r0, [r3, #0]
 81091f8:	687b      	ldr	r3, [r7, #4]
 81091fa:	691b      	ldr	r3, [r3, #16]
 81091fc:	b2d9      	uxtb	r1, r3
 81091fe:	687b      	ldr	r3, [r7, #4]
 8109200:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8109204:	461a      	mov	r2, r3
 8109206:	f00a fa19 	bl	811363c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 810920a:	687b      	ldr	r3, [r7, #4]
 810920c:	2200      	movs	r2, #0
 810920e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8109212:	2300      	movs	r3, #0
}
 8109214:	4618      	mov	r0, r3
 8109216:	3710      	adds	r7, #16
 8109218:	46bd      	mov	sp, r7
 810921a:	bd80      	pop	{r7, pc}

0810921c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 810921c:	b580      	push	{r7, lr}
 810921e:	b084      	sub	sp, #16
 8109220:	af00      	add	r7, sp, #0
 8109222:	6078      	str	r0, [r7, #4]
 8109224:	460b      	mov	r3, r1
 8109226:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8109228:	78fb      	ldrb	r3, [r7, #3]
 810922a:	f003 020f 	and.w	r2, r3, #15
 810922e:	687b      	ldr	r3, [r7, #4]
 8109230:	685b      	ldr	r3, [r3, #4]
 8109232:	429a      	cmp	r2, r3
 8109234:	d901      	bls.n	810923a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8109236:	2301      	movs	r3, #1
 8109238:	e042      	b.n	81092c0 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 810923a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 810923e:	2b00      	cmp	r3, #0
 8109240:	da0f      	bge.n	8109262 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8109242:	78fb      	ldrb	r3, [r7, #3]
 8109244:	f003 020f 	and.w	r2, r3, #15
 8109248:	4613      	mov	r3, r2
 810924a:	00db      	lsls	r3, r3, #3
 810924c:	1a9b      	subs	r3, r3, r2
 810924e:	009b      	lsls	r3, r3, #2
 8109250:	3338      	adds	r3, #56	; 0x38
 8109252:	687a      	ldr	r2, [r7, #4]
 8109254:	4413      	add	r3, r2
 8109256:	3304      	adds	r3, #4
 8109258:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 810925a:	68fb      	ldr	r3, [r7, #12]
 810925c:	2201      	movs	r2, #1
 810925e:	705a      	strb	r2, [r3, #1]
 8109260:	e00f      	b.n	8109282 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8109262:	78fb      	ldrb	r3, [r7, #3]
 8109264:	f003 020f 	and.w	r2, r3, #15
 8109268:	4613      	mov	r3, r2
 810926a:	00db      	lsls	r3, r3, #3
 810926c:	1a9b      	subs	r3, r3, r2
 810926e:	009b      	lsls	r3, r3, #2
 8109270:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8109274:	687a      	ldr	r2, [r7, #4]
 8109276:	4413      	add	r3, r2
 8109278:	3304      	adds	r3, #4
 810927a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 810927c:	68fb      	ldr	r3, [r7, #12]
 810927e:	2200      	movs	r2, #0
 8109280:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8109282:	68fb      	ldr	r3, [r7, #12]
 8109284:	2200      	movs	r2, #0
 8109286:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8109288:	78fb      	ldrb	r3, [r7, #3]
 810928a:	f003 030f 	and.w	r3, r3, #15
 810928e:	b2da      	uxtb	r2, r3
 8109290:	68fb      	ldr	r3, [r7, #12]
 8109292:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8109294:	687b      	ldr	r3, [r7, #4]
 8109296:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 810929a:	2b01      	cmp	r3, #1
 810929c:	d101      	bne.n	81092a2 <HAL_PCD_EP_ClrStall+0x86>
 810929e:	2302      	movs	r3, #2
 81092a0:	e00e      	b.n	81092c0 <HAL_PCD_EP_ClrStall+0xa4>
 81092a2:	687b      	ldr	r3, [r7, #4]
 81092a4:	2201      	movs	r2, #1
 81092a6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 81092aa:	687b      	ldr	r3, [r7, #4]
 81092ac:	681b      	ldr	r3, [r3, #0]
 81092ae:	68f9      	ldr	r1, [r7, #12]
 81092b0:	4618      	mov	r0, r3
 81092b2:	f00a f830 	bl	8113316 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 81092b6:	687b      	ldr	r3, [r7, #4]
 81092b8:	2200      	movs	r2, #0
 81092ba:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 81092be:	2300      	movs	r3, #0
}
 81092c0:	4618      	mov	r0, r3
 81092c2:	3710      	adds	r7, #16
 81092c4:	46bd      	mov	sp, r7
 81092c6:	bd80      	pop	{r7, pc}

081092c8 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 81092c8:	b580      	push	{r7, lr}
 81092ca:	b08a      	sub	sp, #40	; 0x28
 81092cc:	af02      	add	r7, sp, #8
 81092ce:	6078      	str	r0, [r7, #4]
 81092d0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 81092d2:	687b      	ldr	r3, [r7, #4]
 81092d4:	681b      	ldr	r3, [r3, #0]
 81092d6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 81092d8:	697b      	ldr	r3, [r7, #20]
 81092da:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 81092dc:	683a      	ldr	r2, [r7, #0]
 81092de:	4613      	mov	r3, r2
 81092e0:	00db      	lsls	r3, r3, #3
 81092e2:	1a9b      	subs	r3, r3, r2
 81092e4:	009b      	lsls	r3, r3, #2
 81092e6:	3338      	adds	r3, #56	; 0x38
 81092e8:	687a      	ldr	r2, [r7, #4]
 81092ea:	4413      	add	r3, r2
 81092ec:	3304      	adds	r3, #4
 81092ee:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 81092f0:	68fb      	ldr	r3, [r7, #12]
 81092f2:	699a      	ldr	r2, [r3, #24]
 81092f4:	68fb      	ldr	r3, [r7, #12]
 81092f6:	695b      	ldr	r3, [r3, #20]
 81092f8:	429a      	cmp	r2, r3
 81092fa:	d901      	bls.n	8109300 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 81092fc:	2301      	movs	r3, #1
 81092fe:	e06c      	b.n	81093da <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8109300:	68fb      	ldr	r3, [r7, #12]
 8109302:	695a      	ldr	r2, [r3, #20]
 8109304:	68fb      	ldr	r3, [r7, #12]
 8109306:	699b      	ldr	r3, [r3, #24]
 8109308:	1ad3      	subs	r3, r2, r3
 810930a:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 810930c:	68fb      	ldr	r3, [r7, #12]
 810930e:	689b      	ldr	r3, [r3, #8]
 8109310:	69fa      	ldr	r2, [r7, #28]
 8109312:	429a      	cmp	r2, r3
 8109314:	d902      	bls.n	810931c <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8109316:	68fb      	ldr	r3, [r7, #12]
 8109318:	689b      	ldr	r3, [r3, #8]
 810931a:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 810931c:	69fb      	ldr	r3, [r7, #28]
 810931e:	3303      	adds	r3, #3
 8109320:	089b      	lsrs	r3, r3, #2
 8109322:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8109324:	e02b      	b.n	810937e <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8109326:	68fb      	ldr	r3, [r7, #12]
 8109328:	695a      	ldr	r2, [r3, #20]
 810932a:	68fb      	ldr	r3, [r7, #12]
 810932c:	699b      	ldr	r3, [r3, #24]
 810932e:	1ad3      	subs	r3, r2, r3
 8109330:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8109332:	68fb      	ldr	r3, [r7, #12]
 8109334:	689b      	ldr	r3, [r3, #8]
 8109336:	69fa      	ldr	r2, [r7, #28]
 8109338:	429a      	cmp	r2, r3
 810933a:	d902      	bls.n	8109342 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 810933c:	68fb      	ldr	r3, [r7, #12]
 810933e:	689b      	ldr	r3, [r3, #8]
 8109340:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8109342:	69fb      	ldr	r3, [r7, #28]
 8109344:	3303      	adds	r3, #3
 8109346:	089b      	lsrs	r3, r3, #2
 8109348:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 810934a:	68fb      	ldr	r3, [r7, #12]
 810934c:	68d9      	ldr	r1, [r3, #12]
 810934e:	683b      	ldr	r3, [r7, #0]
 8109350:	b2da      	uxtb	r2, r3
 8109352:	69fb      	ldr	r3, [r7, #28]
 8109354:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8109356:	687b      	ldr	r3, [r7, #4]
 8109358:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 810935a:	b2db      	uxtb	r3, r3
 810935c:	9300      	str	r3, [sp, #0]
 810935e:	4603      	mov	r3, r0
 8109360:	6978      	ldr	r0, [r7, #20]
 8109362:	f009 fed4 	bl	811310e <USB_WritePacket>

    ep->xfer_buff  += len;
 8109366:	68fb      	ldr	r3, [r7, #12]
 8109368:	68da      	ldr	r2, [r3, #12]
 810936a:	69fb      	ldr	r3, [r7, #28]
 810936c:	441a      	add	r2, r3
 810936e:	68fb      	ldr	r3, [r7, #12]
 8109370:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8109372:	68fb      	ldr	r3, [r7, #12]
 8109374:	699a      	ldr	r2, [r3, #24]
 8109376:	69fb      	ldr	r3, [r7, #28]
 8109378:	441a      	add	r2, r3
 810937a:	68fb      	ldr	r3, [r7, #12]
 810937c:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 810937e:	683b      	ldr	r3, [r7, #0]
 8109380:	015a      	lsls	r2, r3, #5
 8109382:	693b      	ldr	r3, [r7, #16]
 8109384:	4413      	add	r3, r2
 8109386:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 810938a:	699b      	ldr	r3, [r3, #24]
 810938c:	b29b      	uxth	r3, r3
 810938e:	69ba      	ldr	r2, [r7, #24]
 8109390:	429a      	cmp	r2, r3
 8109392:	d809      	bhi.n	81093a8 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8109394:	68fb      	ldr	r3, [r7, #12]
 8109396:	699a      	ldr	r2, [r3, #24]
 8109398:	68fb      	ldr	r3, [r7, #12]
 810939a:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 810939c:	429a      	cmp	r2, r3
 810939e:	d203      	bcs.n	81093a8 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 81093a0:	68fb      	ldr	r3, [r7, #12]
 81093a2:	695b      	ldr	r3, [r3, #20]
 81093a4:	2b00      	cmp	r3, #0
 81093a6:	d1be      	bne.n	8109326 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 81093a8:	68fb      	ldr	r3, [r7, #12]
 81093aa:	695a      	ldr	r2, [r3, #20]
 81093ac:	68fb      	ldr	r3, [r7, #12]
 81093ae:	699b      	ldr	r3, [r3, #24]
 81093b0:	429a      	cmp	r2, r3
 81093b2:	d811      	bhi.n	81093d8 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 81093b4:	683b      	ldr	r3, [r7, #0]
 81093b6:	f003 030f 	and.w	r3, r3, #15
 81093ba:	2201      	movs	r2, #1
 81093bc:	fa02 f303 	lsl.w	r3, r2, r3
 81093c0:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 81093c2:	693b      	ldr	r3, [r7, #16]
 81093c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 81093c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 81093ca:	68bb      	ldr	r3, [r7, #8]
 81093cc:	43db      	mvns	r3, r3
 81093ce:	6939      	ldr	r1, [r7, #16]
 81093d0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 81093d4:	4013      	ands	r3, r2
 81093d6:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 81093d8:	2300      	movs	r3, #0
}
 81093da:	4618      	mov	r0, r3
 81093dc:	3720      	adds	r7, #32
 81093de:	46bd      	mov	sp, r7
 81093e0:	bd80      	pop	{r7, pc}
	...

081093e4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 81093e4:	b580      	push	{r7, lr}
 81093e6:	b086      	sub	sp, #24
 81093e8:	af00      	add	r7, sp, #0
 81093ea:	6078      	str	r0, [r7, #4]
 81093ec:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 81093ee:	687b      	ldr	r3, [r7, #4]
 81093f0:	681b      	ldr	r3, [r3, #0]
 81093f2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 81093f4:	697b      	ldr	r3, [r7, #20]
 81093f6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 81093f8:	697b      	ldr	r3, [r7, #20]
 81093fa:	333c      	adds	r3, #60	; 0x3c
 81093fc:	3304      	adds	r3, #4
 81093fe:	681b      	ldr	r3, [r3, #0]
 8109400:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8109402:	683b      	ldr	r3, [r7, #0]
 8109404:	015a      	lsls	r2, r3, #5
 8109406:	693b      	ldr	r3, [r7, #16]
 8109408:	4413      	add	r3, r2
 810940a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 810940e:	689b      	ldr	r3, [r3, #8]
 8109410:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8109412:	687b      	ldr	r3, [r7, #4]
 8109414:	691b      	ldr	r3, [r3, #16]
 8109416:	2b01      	cmp	r3, #1
 8109418:	f040 80a0 	bne.w	810955c <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 810941c:	68bb      	ldr	r3, [r7, #8]
 810941e:	f003 0308 	and.w	r3, r3, #8
 8109422:	2b00      	cmp	r3, #0
 8109424:	d015      	beq.n	8109452 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8109426:	68fb      	ldr	r3, [r7, #12]
 8109428:	4a72      	ldr	r2, [pc, #456]	; (81095f4 <PCD_EP_OutXfrComplete_int+0x210>)
 810942a:	4293      	cmp	r3, r2
 810942c:	f240 80dd 	bls.w	81095ea <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8109430:	68bb      	ldr	r3, [r7, #8]
 8109432:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8109436:	2b00      	cmp	r3, #0
 8109438:	f000 80d7 	beq.w	81095ea <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 810943c:	683b      	ldr	r3, [r7, #0]
 810943e:	015a      	lsls	r2, r3, #5
 8109440:	693b      	ldr	r3, [r7, #16]
 8109442:	4413      	add	r3, r2
 8109444:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8109448:	461a      	mov	r2, r3
 810944a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 810944e:	6093      	str	r3, [r2, #8]
 8109450:	e0cb      	b.n	81095ea <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8109452:	68bb      	ldr	r3, [r7, #8]
 8109454:	f003 0320 	and.w	r3, r3, #32
 8109458:	2b00      	cmp	r3, #0
 810945a:	d009      	beq.n	8109470 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 810945c:	683b      	ldr	r3, [r7, #0]
 810945e:	015a      	lsls	r2, r3, #5
 8109460:	693b      	ldr	r3, [r7, #16]
 8109462:	4413      	add	r3, r2
 8109464:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8109468:	461a      	mov	r2, r3
 810946a:	2320      	movs	r3, #32
 810946c:	6093      	str	r3, [r2, #8]
 810946e:	e0bc      	b.n	81095ea <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8109470:	68bb      	ldr	r3, [r7, #8]
 8109472:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8109476:	2b00      	cmp	r3, #0
 8109478:	f040 80b7 	bne.w	81095ea <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 810947c:	68fb      	ldr	r3, [r7, #12]
 810947e:	4a5d      	ldr	r2, [pc, #372]	; (81095f4 <PCD_EP_OutXfrComplete_int+0x210>)
 8109480:	4293      	cmp	r3, r2
 8109482:	d90f      	bls.n	81094a4 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8109484:	68bb      	ldr	r3, [r7, #8]
 8109486:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 810948a:	2b00      	cmp	r3, #0
 810948c:	d00a      	beq.n	81094a4 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 810948e:	683b      	ldr	r3, [r7, #0]
 8109490:	015a      	lsls	r2, r3, #5
 8109492:	693b      	ldr	r3, [r7, #16]
 8109494:	4413      	add	r3, r2
 8109496:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 810949a:	461a      	mov	r2, r3
 810949c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 81094a0:	6093      	str	r3, [r2, #8]
 81094a2:	e0a2      	b.n	81095ea <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 81094a4:	6879      	ldr	r1, [r7, #4]
 81094a6:	683a      	ldr	r2, [r7, #0]
 81094a8:	4613      	mov	r3, r2
 81094aa:	00db      	lsls	r3, r3, #3
 81094ac:	1a9b      	subs	r3, r3, r2
 81094ae:	009b      	lsls	r3, r3, #2
 81094b0:	440b      	add	r3, r1
 81094b2:	f503 7301 	add.w	r3, r3, #516	; 0x204
 81094b6:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 81094b8:	683b      	ldr	r3, [r7, #0]
 81094ba:	0159      	lsls	r1, r3, #5
 81094bc:	693b      	ldr	r3, [r7, #16]
 81094be:	440b      	add	r3, r1
 81094c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 81094c4:	691b      	ldr	r3, [r3, #16]
 81094c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 81094ca:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 81094cc:	6878      	ldr	r0, [r7, #4]
 81094ce:	683a      	ldr	r2, [r7, #0]
 81094d0:	4613      	mov	r3, r2
 81094d2:	00db      	lsls	r3, r3, #3
 81094d4:	1a9b      	subs	r3, r3, r2
 81094d6:	009b      	lsls	r3, r3, #2
 81094d8:	4403      	add	r3, r0
 81094da:	f503 7305 	add.w	r3, r3, #532	; 0x214
 81094de:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 81094e0:	6879      	ldr	r1, [r7, #4]
 81094e2:	683a      	ldr	r2, [r7, #0]
 81094e4:	4613      	mov	r3, r2
 81094e6:	00db      	lsls	r3, r3, #3
 81094e8:	1a9b      	subs	r3, r3, r2
 81094ea:	009b      	lsls	r3, r3, #2
 81094ec:	440b      	add	r3, r1
 81094ee:	f503 7302 	add.w	r3, r3, #520	; 0x208
 81094f2:	6819      	ldr	r1, [r3, #0]
 81094f4:	6878      	ldr	r0, [r7, #4]
 81094f6:	683a      	ldr	r2, [r7, #0]
 81094f8:	4613      	mov	r3, r2
 81094fa:	00db      	lsls	r3, r3, #3
 81094fc:	1a9b      	subs	r3, r3, r2
 81094fe:	009b      	lsls	r3, r3, #2
 8109500:	4403      	add	r3, r0
 8109502:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8109506:	681b      	ldr	r3, [r3, #0]
 8109508:	4419      	add	r1, r3
 810950a:	6878      	ldr	r0, [r7, #4]
 810950c:	683a      	ldr	r2, [r7, #0]
 810950e:	4613      	mov	r3, r2
 8109510:	00db      	lsls	r3, r3, #3
 8109512:	1a9b      	subs	r3, r3, r2
 8109514:	009b      	lsls	r3, r3, #2
 8109516:	4403      	add	r3, r0
 8109518:	f503 7302 	add.w	r3, r3, #520	; 0x208
 810951c:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 810951e:	683b      	ldr	r3, [r7, #0]
 8109520:	2b00      	cmp	r3, #0
 8109522:	d114      	bne.n	810954e <PCD_EP_OutXfrComplete_int+0x16a>
 8109524:	6879      	ldr	r1, [r7, #4]
 8109526:	683a      	ldr	r2, [r7, #0]
 8109528:	4613      	mov	r3, r2
 810952a:	00db      	lsls	r3, r3, #3
 810952c:	1a9b      	subs	r3, r3, r2
 810952e:	009b      	lsls	r3, r3, #2
 8109530:	440b      	add	r3, r1
 8109532:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8109536:	681b      	ldr	r3, [r3, #0]
 8109538:	2b00      	cmp	r3, #0
 810953a:	d108      	bne.n	810954e <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 810953c:	687b      	ldr	r3, [r7, #4]
 810953e:	6818      	ldr	r0, [r3, #0]
 8109540:	687b      	ldr	r3, [r7, #4]
 8109542:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8109546:	461a      	mov	r2, r3
 8109548:	2101      	movs	r1, #1
 810954a:	f00a f877 	bl	811363c <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 810954e:	683b      	ldr	r3, [r7, #0]
 8109550:	b2db      	uxtb	r3, r3
 8109552:	4619      	mov	r1, r3
 8109554:	6878      	ldr	r0, [r7, #4]
 8109556:	f00f fa13 	bl	8118980 <HAL_PCD_DataOutStageCallback>
 810955a:	e046      	b.n	81095ea <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 810955c:	68fb      	ldr	r3, [r7, #12]
 810955e:	4a26      	ldr	r2, [pc, #152]	; (81095f8 <PCD_EP_OutXfrComplete_int+0x214>)
 8109560:	4293      	cmp	r3, r2
 8109562:	d124      	bne.n	81095ae <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8109564:	68bb      	ldr	r3, [r7, #8]
 8109566:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 810956a:	2b00      	cmp	r3, #0
 810956c:	d00a      	beq.n	8109584 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 810956e:	683b      	ldr	r3, [r7, #0]
 8109570:	015a      	lsls	r2, r3, #5
 8109572:	693b      	ldr	r3, [r7, #16]
 8109574:	4413      	add	r3, r2
 8109576:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 810957a:	461a      	mov	r2, r3
 810957c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8109580:	6093      	str	r3, [r2, #8]
 8109582:	e032      	b.n	81095ea <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8109584:	68bb      	ldr	r3, [r7, #8]
 8109586:	f003 0320 	and.w	r3, r3, #32
 810958a:	2b00      	cmp	r3, #0
 810958c:	d008      	beq.n	81095a0 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 810958e:	683b      	ldr	r3, [r7, #0]
 8109590:	015a      	lsls	r2, r3, #5
 8109592:	693b      	ldr	r3, [r7, #16]
 8109594:	4413      	add	r3, r2
 8109596:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 810959a:	461a      	mov	r2, r3
 810959c:	2320      	movs	r3, #32
 810959e:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 81095a0:	683b      	ldr	r3, [r7, #0]
 81095a2:	b2db      	uxtb	r3, r3
 81095a4:	4619      	mov	r1, r3
 81095a6:	6878      	ldr	r0, [r7, #4]
 81095a8:	f00f f9ea 	bl	8118980 <HAL_PCD_DataOutStageCallback>
 81095ac:	e01d      	b.n	81095ea <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 81095ae:	683b      	ldr	r3, [r7, #0]
 81095b0:	2b00      	cmp	r3, #0
 81095b2:	d114      	bne.n	81095de <PCD_EP_OutXfrComplete_int+0x1fa>
 81095b4:	6879      	ldr	r1, [r7, #4]
 81095b6:	683a      	ldr	r2, [r7, #0]
 81095b8:	4613      	mov	r3, r2
 81095ba:	00db      	lsls	r3, r3, #3
 81095bc:	1a9b      	subs	r3, r3, r2
 81095be:	009b      	lsls	r3, r3, #2
 81095c0:	440b      	add	r3, r1
 81095c2:	f503 7304 	add.w	r3, r3, #528	; 0x210
 81095c6:	681b      	ldr	r3, [r3, #0]
 81095c8:	2b00      	cmp	r3, #0
 81095ca:	d108      	bne.n	81095de <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 81095cc:	687b      	ldr	r3, [r7, #4]
 81095ce:	6818      	ldr	r0, [r3, #0]
 81095d0:	687b      	ldr	r3, [r7, #4]
 81095d2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 81095d6:	461a      	mov	r2, r3
 81095d8:	2100      	movs	r1, #0
 81095da:	f00a f82f 	bl	811363c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 81095de:	683b      	ldr	r3, [r7, #0]
 81095e0:	b2db      	uxtb	r3, r3
 81095e2:	4619      	mov	r1, r3
 81095e4:	6878      	ldr	r0, [r7, #4]
 81095e6:	f00f f9cb 	bl	8118980 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 81095ea:	2300      	movs	r3, #0
}
 81095ec:	4618      	mov	r0, r3
 81095ee:	3718      	adds	r7, #24
 81095f0:	46bd      	mov	sp, r7
 81095f2:	bd80      	pop	{r7, pc}
 81095f4:	4f54300a 	.word	0x4f54300a
 81095f8:	4f54310a 	.word	0x4f54310a

081095fc <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 81095fc:	b580      	push	{r7, lr}
 81095fe:	b086      	sub	sp, #24
 8109600:	af00      	add	r7, sp, #0
 8109602:	6078      	str	r0, [r7, #4]
 8109604:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8109606:	687b      	ldr	r3, [r7, #4]
 8109608:	681b      	ldr	r3, [r3, #0]
 810960a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 810960c:	697b      	ldr	r3, [r7, #20]
 810960e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8109610:	697b      	ldr	r3, [r7, #20]
 8109612:	333c      	adds	r3, #60	; 0x3c
 8109614:	3304      	adds	r3, #4
 8109616:	681b      	ldr	r3, [r3, #0]
 8109618:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 810961a:	683b      	ldr	r3, [r7, #0]
 810961c:	015a      	lsls	r2, r3, #5
 810961e:	693b      	ldr	r3, [r7, #16]
 8109620:	4413      	add	r3, r2
 8109622:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8109626:	689b      	ldr	r3, [r3, #8]
 8109628:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 810962a:	68fb      	ldr	r3, [r7, #12]
 810962c:	4a15      	ldr	r2, [pc, #84]	; (8109684 <PCD_EP_OutSetupPacket_int+0x88>)
 810962e:	4293      	cmp	r3, r2
 8109630:	d90e      	bls.n	8109650 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8109632:	68bb      	ldr	r3, [r7, #8]
 8109634:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8109638:	2b00      	cmp	r3, #0
 810963a:	d009      	beq.n	8109650 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 810963c:	683b      	ldr	r3, [r7, #0]
 810963e:	015a      	lsls	r2, r3, #5
 8109640:	693b      	ldr	r3, [r7, #16]
 8109642:	4413      	add	r3, r2
 8109644:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8109648:	461a      	mov	r2, r3
 810964a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 810964e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8109650:	6878      	ldr	r0, [r7, #4]
 8109652:	f00f f983 	bl	811895c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8109656:	68fb      	ldr	r3, [r7, #12]
 8109658:	4a0a      	ldr	r2, [pc, #40]	; (8109684 <PCD_EP_OutSetupPacket_int+0x88>)
 810965a:	4293      	cmp	r3, r2
 810965c:	d90c      	bls.n	8109678 <PCD_EP_OutSetupPacket_int+0x7c>
 810965e:	687b      	ldr	r3, [r7, #4]
 8109660:	691b      	ldr	r3, [r3, #16]
 8109662:	2b01      	cmp	r3, #1
 8109664:	d108      	bne.n	8109678 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8109666:	687b      	ldr	r3, [r7, #4]
 8109668:	6818      	ldr	r0, [r3, #0]
 810966a:	687b      	ldr	r3, [r7, #4]
 810966c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8109670:	461a      	mov	r2, r3
 8109672:	2101      	movs	r1, #1
 8109674:	f009 ffe2 	bl	811363c <USB_EP0_OutStart>
  }

  return HAL_OK;
 8109678:	2300      	movs	r3, #0
}
 810967a:	4618      	mov	r0, r3
 810967c:	3718      	adds	r7, #24
 810967e:	46bd      	mov	sp, r7
 8109680:	bd80      	pop	{r7, pc}
 8109682:	bf00      	nop
 8109684:	4f54300a 	.word	0x4f54300a

08109688 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8109688:	b480      	push	{r7}
 810968a:	b085      	sub	sp, #20
 810968c:	af00      	add	r7, sp, #0
 810968e:	6078      	str	r0, [r7, #4]
 8109690:	460b      	mov	r3, r1
 8109692:	70fb      	strb	r3, [r7, #3]
 8109694:	4613      	mov	r3, r2
 8109696:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8109698:	687b      	ldr	r3, [r7, #4]
 810969a:	681b      	ldr	r3, [r3, #0]
 810969c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810969e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 81096a0:	78fb      	ldrb	r3, [r7, #3]
 81096a2:	2b00      	cmp	r3, #0
 81096a4:	d107      	bne.n	81096b6 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 81096a6:	883b      	ldrh	r3, [r7, #0]
 81096a8:	0419      	lsls	r1, r3, #16
 81096aa:	687b      	ldr	r3, [r7, #4]
 81096ac:	681b      	ldr	r3, [r3, #0]
 81096ae:	68ba      	ldr	r2, [r7, #8]
 81096b0:	430a      	orrs	r2, r1
 81096b2:	629a      	str	r2, [r3, #40]	; 0x28
 81096b4:	e028      	b.n	8109708 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 81096b6:	687b      	ldr	r3, [r7, #4]
 81096b8:	681b      	ldr	r3, [r3, #0]
 81096ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81096bc:	0c1b      	lsrs	r3, r3, #16
 81096be:	68ba      	ldr	r2, [r7, #8]
 81096c0:	4413      	add	r3, r2
 81096c2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 81096c4:	2300      	movs	r3, #0
 81096c6:	73fb      	strb	r3, [r7, #15]
 81096c8:	e00d      	b.n	81096e6 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 81096ca:	687b      	ldr	r3, [r7, #4]
 81096cc:	681a      	ldr	r2, [r3, #0]
 81096ce:	7bfb      	ldrb	r3, [r7, #15]
 81096d0:	3340      	adds	r3, #64	; 0x40
 81096d2:	009b      	lsls	r3, r3, #2
 81096d4:	4413      	add	r3, r2
 81096d6:	685b      	ldr	r3, [r3, #4]
 81096d8:	0c1b      	lsrs	r3, r3, #16
 81096da:	68ba      	ldr	r2, [r7, #8]
 81096dc:	4413      	add	r3, r2
 81096de:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 81096e0:	7bfb      	ldrb	r3, [r7, #15]
 81096e2:	3301      	adds	r3, #1
 81096e4:	73fb      	strb	r3, [r7, #15]
 81096e6:	7bfa      	ldrb	r2, [r7, #15]
 81096e8:	78fb      	ldrb	r3, [r7, #3]
 81096ea:	3b01      	subs	r3, #1
 81096ec:	429a      	cmp	r2, r3
 81096ee:	d3ec      	bcc.n	81096ca <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 81096f0:	883b      	ldrh	r3, [r7, #0]
 81096f2:	0418      	lsls	r0, r3, #16
 81096f4:	687b      	ldr	r3, [r7, #4]
 81096f6:	6819      	ldr	r1, [r3, #0]
 81096f8:	78fb      	ldrb	r3, [r7, #3]
 81096fa:	3b01      	subs	r3, #1
 81096fc:	68ba      	ldr	r2, [r7, #8]
 81096fe:	4302      	orrs	r2, r0
 8109700:	3340      	adds	r3, #64	; 0x40
 8109702:	009b      	lsls	r3, r3, #2
 8109704:	440b      	add	r3, r1
 8109706:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8109708:	2300      	movs	r3, #0
}
 810970a:	4618      	mov	r0, r3
 810970c:	3714      	adds	r7, #20
 810970e:	46bd      	mov	sp, r7
 8109710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109714:	4770      	bx	lr

08109716 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8109716:	b480      	push	{r7}
 8109718:	b083      	sub	sp, #12
 810971a:	af00      	add	r7, sp, #0
 810971c:	6078      	str	r0, [r7, #4]
 810971e:	460b      	mov	r3, r1
 8109720:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8109722:	687b      	ldr	r3, [r7, #4]
 8109724:	681b      	ldr	r3, [r3, #0]
 8109726:	887a      	ldrh	r2, [r7, #2]
 8109728:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 810972a:	2300      	movs	r3, #0
}
 810972c:	4618      	mov	r0, r3
 810972e:	370c      	adds	r7, #12
 8109730:	46bd      	mov	sp, r7
 8109732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109736:	4770      	bx	lr

08109738 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8109738:	b480      	push	{r7}
 810973a:	b085      	sub	sp, #20
 810973c:	af00      	add	r7, sp, #0
 810973e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8109740:	687b      	ldr	r3, [r7, #4]
 8109742:	681b      	ldr	r3, [r3, #0]
 8109744:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8109746:	687b      	ldr	r3, [r7, #4]
 8109748:	2201      	movs	r2, #1
 810974a:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 810974e:	687b      	ldr	r3, [r7, #4]
 8109750:	2200      	movs	r2, #0
 8109752:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8109756:	68fb      	ldr	r3, [r7, #12]
 8109758:	699b      	ldr	r3, [r3, #24]
 810975a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 810975e:	68fb      	ldr	r3, [r7, #12]
 8109760:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8109762:	68fb      	ldr	r3, [r7, #12]
 8109764:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8109766:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 810976a:	f043 0303 	orr.w	r3, r3, #3
 810976e:	68fa      	ldr	r2, [r7, #12]
 8109770:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8109772:	2300      	movs	r3, #0
}
 8109774:	4618      	mov	r0, r3
 8109776:	3714      	adds	r7, #20
 8109778:	46bd      	mov	sp, r7
 810977a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810977e:	4770      	bx	lr

08109780 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8109780:	b480      	push	{r7}
 8109782:	b083      	sub	sp, #12
 8109784:	af00      	add	r7, sp, #0
 8109786:	6078      	str	r0, [r7, #4]
 8109788:	460b      	mov	r3, r1
 810978a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 810978c:	bf00      	nop
 810978e:	370c      	adds	r7, #12
 8109790:	46bd      	mov	sp, r7
 8109792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109796:	4770      	bx	lr

08109798 <HAL_PWREx_EnterSTOPMode>:
  *            @arg PWR_D2_DOMAIN : Enter D2 Domain to DSTOP mode.
  *            @arg PWR_D3_DOMAIN : Enter D3/SRD Domain to DSTOP mode.
  * @retval None.
  */
void HAL_PWREx_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry, uint32_t Domain)
{
 8109798:	b580      	push	{r7, lr}
 810979a:	b084      	sub	sp, #16
 810979c:	af00      	add	r7, sp, #0
 810979e:	60f8      	str	r0, [r7, #12]
 81097a0:	460b      	mov	r3, r1
 81097a2:	607a      	str	r2, [r7, #4]
 81097a4:	72fb      	strb	r3, [r7, #11]
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));
  assert_param (IS_PWR_DOMAIN (Domain));

  /* Select the regulator state in Stop mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 81097a6:	4b37      	ldr	r3, [pc, #220]	; (8109884 <HAL_PWREx_EnterSTOPMode+0xec>)
 81097a8:	681b      	ldr	r3, [r3, #0]
 81097aa:	f023 0201 	bic.w	r2, r3, #1
 81097ae:	4935      	ldr	r1, [pc, #212]	; (8109884 <HAL_PWREx_EnterSTOPMode+0xec>)
 81097b0:	68fb      	ldr	r3, [r7, #12]
 81097b2:	4313      	orrs	r3, r2
 81097b4:	600b      	str	r3, [r1, #0]

  /* Select the domain Power Down DeepSleep */
  if (Domain == PWR_D1_DOMAIN)
 81097b6:	687b      	ldr	r3, [r7, #4]
 81097b8:	2b00      	cmp	r3, #0
 81097ba:	d123      	bne.n	8109804 <HAL_PWREx_EnterSTOPMode+0x6c>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM7_CPUID)
 81097bc:	f7fa fdda 	bl	8104374 <HAL_GetCurrentCPUID>
 81097c0:	4603      	mov	r3, r0
 81097c2:	2b03      	cmp	r3, #3
 81097c4:	d158      	bne.n	8109878 <HAL_PWREx_EnterSTOPMode+0xe0>
      return;
    }
#endif /* defined (DUAL_CORE) */

    /* Keep DSTOP mode when D1/CD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D1);
 81097c6:	4b2f      	ldr	r3, [pc, #188]	; (8109884 <HAL_PWREx_EnterSTOPMode+0xec>)
 81097c8:	691b      	ldr	r3, [r3, #16]
 81097ca:	4a2e      	ldr	r2, [pc, #184]	; (8109884 <HAL_PWREx_EnterSTOPMode+0xec>)
 81097cc:	f023 0301 	bic.w	r3, r3, #1
 81097d0:	6113      	str	r3, [r2, #16]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 81097d2:	4b2d      	ldr	r3, [pc, #180]	; (8109888 <HAL_PWREx_EnterSTOPMode+0xf0>)
 81097d4:	691b      	ldr	r3, [r3, #16]
 81097d6:	4a2c      	ldr	r2, [pc, #176]	; (8109888 <HAL_PWREx_EnterSTOPMode+0xf0>)
 81097d8:	f043 0304 	orr.w	r3, r3, #4
 81097dc:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 81097de:	f3bf 8f4f 	dsb	sy
}
 81097e2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 81097e4:	f3bf 8f6f 	isb	sy
}
 81097e8:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 81097ea:	7afb      	ldrb	r3, [r7, #11]
 81097ec:	2b01      	cmp	r3, #1
 81097ee:	d101      	bne.n	81097f4 <HAL_PWREx_EnterSTOPMode+0x5c>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 81097f0:	bf30      	wfi
 81097f2:	e000      	b.n	81097f6 <HAL_PWREx_EnterSTOPMode+0x5e>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 81097f4:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 81097f6:	4b24      	ldr	r3, [pc, #144]	; (8109888 <HAL_PWREx_EnterSTOPMode+0xf0>)
 81097f8:	691b      	ldr	r3, [r3, #16]
 81097fa:	4a23      	ldr	r2, [pc, #140]	; (8109888 <HAL_PWREx_EnterSTOPMode+0xf0>)
 81097fc:	f023 0304 	bic.w	r3, r3, #4
 8109800:	6113      	str	r3, [r2, #16]
 8109802:	e03c      	b.n	810987e <HAL_PWREx_EnterSTOPMode+0xe6>
  }
#if defined (PWR_CPUCR_PDDS_D2)
  else if (Domain == PWR_D2_DOMAIN)
 8109804:	687b      	ldr	r3, [r7, #4]
 8109806:	2b01      	cmp	r3, #1
 8109808:	d123      	bne.n	8109852 <HAL_PWREx_EnterSTOPMode+0xba>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM4_CPUID)
 810980a:	f7fa fdb3 	bl	8104374 <HAL_GetCurrentCPUID>
 810980e:	4603      	mov	r3, r0
 8109810:	2b01      	cmp	r3, #1
 8109812:	d133      	bne.n	810987c <HAL_PWREx_EnterSTOPMode+0xe4>
      */
      return;
    }

    /* Keep DSTOP mode when D2 domain enters Deepsleep */
    CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D2);
 8109814:	4b1b      	ldr	r3, [pc, #108]	; (8109884 <HAL_PWREx_EnterSTOPMode+0xec>)
 8109816:	695b      	ldr	r3, [r3, #20]
 8109818:	4a1a      	ldr	r2, [pc, #104]	; (8109884 <HAL_PWREx_EnterSTOPMode+0xec>)
 810981a:	f023 0302 	bic.w	r3, r3, #2
 810981e:	6153      	str	r3, [r2, #20]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8109820:	4b19      	ldr	r3, [pc, #100]	; (8109888 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8109822:	691b      	ldr	r3, [r3, #16]
 8109824:	4a18      	ldr	r2, [pc, #96]	; (8109888 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8109826:	f043 0304 	orr.w	r3, r3, #4
 810982a:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 810982c:	f3bf 8f4f 	dsb	sy
}
 8109830:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8109832:	f3bf 8f6f 	isb	sy
}
 8109836:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8109838:	7afb      	ldrb	r3, [r7, #11]
 810983a:	2b01      	cmp	r3, #1
 810983c:	d101      	bne.n	8109842 <HAL_PWREx_EnterSTOPMode+0xaa>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 810983e:	bf30      	wfi
 8109840:	e000      	b.n	8109844 <HAL_PWREx_EnterSTOPMode+0xac>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8109842:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8109844:	4b10      	ldr	r3, [pc, #64]	; (8109888 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8109846:	691b      	ldr	r3, [r3, #16]
 8109848:	4a0f      	ldr	r2, [pc, #60]	; (8109888 <HAL_PWREx_EnterSTOPMode+0xf0>)
 810984a:	f023 0304 	bic.w	r3, r3, #4
 810984e:	6113      	str	r3, [r2, #16]
 8109850:	e015      	b.n	810987e <HAL_PWREx_EnterSTOPMode+0xe6>
#endif /* defined (PWR_CPUCR_PDDS_D2) */
  else
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8109852:	f7fa fd8f 	bl	8104374 <HAL_GetCurrentCPUID>
 8109856:	4603      	mov	r3, r0
 8109858:	2b03      	cmp	r3, #3
 810985a:	d106      	bne.n	810986a <HAL_PWREx_EnterSTOPMode+0xd2>
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
 810985c:	4b09      	ldr	r3, [pc, #36]	; (8109884 <HAL_PWREx_EnterSTOPMode+0xec>)
 810985e:	691b      	ldr	r3, [r3, #16]
 8109860:	4a08      	ldr	r2, [pc, #32]	; (8109884 <HAL_PWREx_EnterSTOPMode+0xec>)
 8109862:	f023 0304 	bic.w	r3, r3, #4
 8109866:	6113      	str	r3, [r2, #16]
 8109868:	e009      	b.n	810987e <HAL_PWREx_EnterSTOPMode+0xe6>
    }
    else
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D3);
 810986a:	4b06      	ldr	r3, [pc, #24]	; (8109884 <HAL_PWREx_EnterSTOPMode+0xec>)
 810986c:	695b      	ldr	r3, [r3, #20]
 810986e:	4a05      	ldr	r2, [pc, #20]	; (8109884 <HAL_PWREx_EnterSTOPMode+0xec>)
 8109870:	f023 0304 	bic.w	r3, r3, #4
 8109874:	6153      	str	r3, [r2, #20]
 8109876:	e002      	b.n	810987e <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 8109878:	bf00      	nop
 810987a:	e000      	b.n	810987e <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 810987c:	bf00      	nop
#else
    /* Keep DSTOP mode when D3/SRD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
#endif  /* defined (DUAL_CORE) */
  }
}
 810987e:	3710      	adds	r7, #16
 8109880:	46bd      	mov	sp, r7
 8109882:	bd80      	pop	{r7, pc}
 8109884:	58024800 	.word	0x58024800
 8109888:	e000ed00 	.word	0xe000ed00

0810988c <HAL_PWREx_ClearPendingEvent>:
  *         enter low power mode using Wait For Event request.
  * @note   Cortex-M7 must be in CRUN mode when calling this API by Cortex-M4.
  * @retval None.
  */
void HAL_PWREx_ClearPendingEvent (void)
{
 810988c:	b580      	push	{r7, lr}
 810988e:	af00      	add	r7, sp, #0
#if defined (DUAL_CORE)
  /* Check the current Core */
  if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8109890:	f7fa fd70 	bl	8104374 <HAL_GetCurrentCPUID>
 8109894:	4603      	mov	r3, r0
 8109896:	2b03      	cmp	r3, #3
 8109898:	d101      	bne.n	810989e <HAL_PWREx_ClearPendingEvent+0x12>
  {
    __WFE ();
 810989a:	bf20      	wfe
    __WFE ();
  }
#else
  __WFE ();
#endif /* defined (DUAL_CORE) */
}
 810989c:	e001      	b.n	81098a2 <HAL_PWREx_ClearPendingEvent+0x16>
    __SEV ();
 810989e:	bf40      	sev
    __WFE ();
 81098a0:	bf20      	wfe
}
 81098a2:	bf00      	nop
 81098a4:	bd80      	pop	{r7, pc}
	...

081098a8 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 81098a8:	b480      	push	{r7}
 81098aa:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 81098ac:	4b05      	ldr	r3, [pc, #20]	; (81098c4 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 81098ae:	68db      	ldr	r3, [r3, #12]
 81098b0:	4a04      	ldr	r2, [pc, #16]	; (81098c4 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 81098b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 81098b6:	60d3      	str	r3, [r2, #12]
}
 81098b8:	bf00      	nop
 81098ba:	46bd      	mov	sp, r7
 81098bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 81098c0:	4770      	bx	lr
 81098c2:	bf00      	nop
 81098c4:	58024800 	.word	0x58024800

081098c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 81098c8:	b480      	push	{r7}
 81098ca:	b089      	sub	sp, #36	; 0x24
 81098cc:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 81098ce:	4bb3      	ldr	r3, [pc, #716]	; (8109b9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 81098d0:	691b      	ldr	r3, [r3, #16]
 81098d2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 81098d6:	2b18      	cmp	r3, #24
 81098d8:	f200 8155 	bhi.w	8109b86 <HAL_RCC_GetSysClockFreq+0x2be>
 81098dc:	a201      	add	r2, pc, #4	; (adr r2, 81098e4 <HAL_RCC_GetSysClockFreq+0x1c>)
 81098de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81098e2:	bf00      	nop
 81098e4:	08109949 	.word	0x08109949
 81098e8:	08109b87 	.word	0x08109b87
 81098ec:	08109b87 	.word	0x08109b87
 81098f0:	08109b87 	.word	0x08109b87
 81098f4:	08109b87 	.word	0x08109b87
 81098f8:	08109b87 	.word	0x08109b87
 81098fc:	08109b87 	.word	0x08109b87
 8109900:	08109b87 	.word	0x08109b87
 8109904:	0810996f 	.word	0x0810996f
 8109908:	08109b87 	.word	0x08109b87
 810990c:	08109b87 	.word	0x08109b87
 8109910:	08109b87 	.word	0x08109b87
 8109914:	08109b87 	.word	0x08109b87
 8109918:	08109b87 	.word	0x08109b87
 810991c:	08109b87 	.word	0x08109b87
 8109920:	08109b87 	.word	0x08109b87
 8109924:	08109975 	.word	0x08109975
 8109928:	08109b87 	.word	0x08109b87
 810992c:	08109b87 	.word	0x08109b87
 8109930:	08109b87 	.word	0x08109b87
 8109934:	08109b87 	.word	0x08109b87
 8109938:	08109b87 	.word	0x08109b87
 810993c:	08109b87 	.word	0x08109b87
 8109940:	08109b87 	.word	0x08109b87
 8109944:	0810997b 	.word	0x0810997b
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8109948:	4b94      	ldr	r3, [pc, #592]	; (8109b9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 810994a:	681b      	ldr	r3, [r3, #0]
 810994c:	f003 0320 	and.w	r3, r3, #32
 8109950:	2b00      	cmp	r3, #0
 8109952:	d009      	beq.n	8109968 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8109954:	4b91      	ldr	r3, [pc, #580]	; (8109b9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8109956:	681b      	ldr	r3, [r3, #0]
 8109958:	08db      	lsrs	r3, r3, #3
 810995a:	f003 0303 	and.w	r3, r3, #3
 810995e:	4a90      	ldr	r2, [pc, #576]	; (8109ba0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8109960:	fa22 f303 	lsr.w	r3, r2, r3
 8109964:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8109966:	e111      	b.n	8109b8c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8109968:	4b8d      	ldr	r3, [pc, #564]	; (8109ba0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 810996a:	61bb      	str	r3, [r7, #24]
    break;
 810996c:	e10e      	b.n	8109b8c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 810996e:	4b8d      	ldr	r3, [pc, #564]	; (8109ba4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8109970:	61bb      	str	r3, [r7, #24]
    break;
 8109972:	e10b      	b.n	8109b8c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8109974:	4b8c      	ldr	r3, [pc, #560]	; (8109ba8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8109976:	61bb      	str	r3, [r7, #24]
    break;
 8109978:	e108      	b.n	8109b8c <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 810997a:	4b88      	ldr	r3, [pc, #544]	; (8109b9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 810997c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810997e:	f003 0303 	and.w	r3, r3, #3
 8109982:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8109984:	4b85      	ldr	r3, [pc, #532]	; (8109b9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8109986:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8109988:	091b      	lsrs	r3, r3, #4
 810998a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 810998e:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8109990:	4b82      	ldr	r3, [pc, #520]	; (8109b9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8109992:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8109994:	f003 0301 	and.w	r3, r3, #1
 8109998:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 810999a:	4b80      	ldr	r3, [pc, #512]	; (8109b9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 810999c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 810999e:	08db      	lsrs	r3, r3, #3
 81099a0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 81099a4:	68fa      	ldr	r2, [r7, #12]
 81099a6:	fb02 f303 	mul.w	r3, r2, r3
 81099aa:	ee07 3a90 	vmov	s15, r3
 81099ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81099b2:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 81099b6:	693b      	ldr	r3, [r7, #16]
 81099b8:	2b00      	cmp	r3, #0
 81099ba:	f000 80e1 	beq.w	8109b80 <HAL_RCC_GetSysClockFreq+0x2b8>
 81099be:	697b      	ldr	r3, [r7, #20]
 81099c0:	2b02      	cmp	r3, #2
 81099c2:	f000 8083 	beq.w	8109acc <HAL_RCC_GetSysClockFreq+0x204>
 81099c6:	697b      	ldr	r3, [r7, #20]
 81099c8:	2b02      	cmp	r3, #2
 81099ca:	f200 80a1 	bhi.w	8109b10 <HAL_RCC_GetSysClockFreq+0x248>
 81099ce:	697b      	ldr	r3, [r7, #20]
 81099d0:	2b00      	cmp	r3, #0
 81099d2:	d003      	beq.n	81099dc <HAL_RCC_GetSysClockFreq+0x114>
 81099d4:	697b      	ldr	r3, [r7, #20]
 81099d6:	2b01      	cmp	r3, #1
 81099d8:	d056      	beq.n	8109a88 <HAL_RCC_GetSysClockFreq+0x1c0>
 81099da:	e099      	b.n	8109b10 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 81099dc:	4b6f      	ldr	r3, [pc, #444]	; (8109b9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 81099de:	681b      	ldr	r3, [r3, #0]
 81099e0:	f003 0320 	and.w	r3, r3, #32
 81099e4:	2b00      	cmp	r3, #0
 81099e6:	d02d      	beq.n	8109a44 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 81099e8:	4b6c      	ldr	r3, [pc, #432]	; (8109b9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 81099ea:	681b      	ldr	r3, [r3, #0]
 81099ec:	08db      	lsrs	r3, r3, #3
 81099ee:	f003 0303 	and.w	r3, r3, #3
 81099f2:	4a6b      	ldr	r2, [pc, #428]	; (8109ba0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 81099f4:	fa22 f303 	lsr.w	r3, r2, r3
 81099f8:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 81099fa:	687b      	ldr	r3, [r7, #4]
 81099fc:	ee07 3a90 	vmov	s15, r3
 8109a00:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8109a04:	693b      	ldr	r3, [r7, #16]
 8109a06:	ee07 3a90 	vmov	s15, r3
 8109a0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8109a0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8109a12:	4b62      	ldr	r3, [pc, #392]	; (8109b9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8109a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8109a16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8109a1a:	ee07 3a90 	vmov	s15, r3
 8109a1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8109a22:	ed97 6a02 	vldr	s12, [r7, #8]
 8109a26:	eddf 5a61 	vldr	s11, [pc, #388]	; 8109bac <HAL_RCC_GetSysClockFreq+0x2e4>
 8109a2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8109a2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8109a32:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8109a36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8109a3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8109a3e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8109a42:	e087      	b.n	8109b54 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8109a44:	693b      	ldr	r3, [r7, #16]
 8109a46:	ee07 3a90 	vmov	s15, r3
 8109a4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8109a4e:	eddf 6a58 	vldr	s13, [pc, #352]	; 8109bb0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8109a52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8109a56:	4b51      	ldr	r3, [pc, #324]	; (8109b9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8109a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8109a5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8109a5e:	ee07 3a90 	vmov	s15, r3
 8109a62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8109a66:	ed97 6a02 	vldr	s12, [r7, #8]
 8109a6a:	eddf 5a50 	vldr	s11, [pc, #320]	; 8109bac <HAL_RCC_GetSysClockFreq+0x2e4>
 8109a6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8109a72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8109a76:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8109a7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8109a7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8109a82:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8109a86:	e065      	b.n	8109b54 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8109a88:	693b      	ldr	r3, [r7, #16]
 8109a8a:	ee07 3a90 	vmov	s15, r3
 8109a8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8109a92:	eddf 6a48 	vldr	s13, [pc, #288]	; 8109bb4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8109a96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8109a9a:	4b40      	ldr	r3, [pc, #256]	; (8109b9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8109a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8109a9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8109aa2:	ee07 3a90 	vmov	s15, r3
 8109aa6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8109aaa:	ed97 6a02 	vldr	s12, [r7, #8]
 8109aae:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8109bac <HAL_RCC_GetSysClockFreq+0x2e4>
 8109ab2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8109ab6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8109aba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8109abe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8109ac2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8109ac6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8109aca:	e043      	b.n	8109b54 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8109acc:	693b      	ldr	r3, [r7, #16]
 8109ace:	ee07 3a90 	vmov	s15, r3
 8109ad2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8109ad6:	eddf 6a38 	vldr	s13, [pc, #224]	; 8109bb8 <HAL_RCC_GetSysClockFreq+0x2f0>
 8109ada:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8109ade:	4b2f      	ldr	r3, [pc, #188]	; (8109b9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8109ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8109ae2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8109ae6:	ee07 3a90 	vmov	s15, r3
 8109aea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8109aee:	ed97 6a02 	vldr	s12, [r7, #8]
 8109af2:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8109bac <HAL_RCC_GetSysClockFreq+0x2e4>
 8109af6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8109afa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8109afe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8109b02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8109b06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8109b0a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8109b0e:	e021      	b.n	8109b54 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8109b10:	693b      	ldr	r3, [r7, #16]
 8109b12:	ee07 3a90 	vmov	s15, r3
 8109b16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8109b1a:	eddf 6a26 	vldr	s13, [pc, #152]	; 8109bb4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8109b1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8109b22:	4b1e      	ldr	r3, [pc, #120]	; (8109b9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8109b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8109b26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8109b2a:	ee07 3a90 	vmov	s15, r3
 8109b2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8109b32:	ed97 6a02 	vldr	s12, [r7, #8]
 8109b36:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8109bac <HAL_RCC_GetSysClockFreq+0x2e4>
 8109b3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8109b3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8109b42:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8109b46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8109b4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8109b4e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8109b52:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8109b54:	4b11      	ldr	r3, [pc, #68]	; (8109b9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8109b56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8109b58:	0a5b      	lsrs	r3, r3, #9
 8109b5a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8109b5e:	3301      	adds	r3, #1
 8109b60:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8109b62:	683b      	ldr	r3, [r7, #0]
 8109b64:	ee07 3a90 	vmov	s15, r3
 8109b68:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8109b6c:	edd7 6a07 	vldr	s13, [r7, #28]
 8109b70:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8109b74:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8109b78:	ee17 3a90 	vmov	r3, s15
 8109b7c:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8109b7e:	e005      	b.n	8109b8c <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8109b80:	2300      	movs	r3, #0
 8109b82:	61bb      	str	r3, [r7, #24]
    break;
 8109b84:	e002      	b.n	8109b8c <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8109b86:	4b07      	ldr	r3, [pc, #28]	; (8109ba4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8109b88:	61bb      	str	r3, [r7, #24]
    break;
 8109b8a:	bf00      	nop
  }

  return sysclockfreq;
 8109b8c:	69bb      	ldr	r3, [r7, #24]
}
 8109b8e:	4618      	mov	r0, r3
 8109b90:	3724      	adds	r7, #36	; 0x24
 8109b92:	46bd      	mov	sp, r7
 8109b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109b98:	4770      	bx	lr
 8109b9a:	bf00      	nop
 8109b9c:	58024400 	.word	0x58024400
 8109ba0:	03d09000 	.word	0x03d09000
 8109ba4:	003d0900 	.word	0x003d0900
 8109ba8:	00f42400 	.word	0x00f42400
 8109bac:	46000000 	.word	0x46000000
 8109bb0:	4c742400 	.word	0x4c742400
 8109bb4:	4a742400 	.word	0x4a742400
 8109bb8:	4b742400 	.word	0x4b742400

08109bbc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8109bbc:	b580      	push	{r7, lr}
 8109bbe:	b082      	sub	sp, #8
 8109bc0:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8109bc2:	f7ff fe81 	bl	81098c8 <HAL_RCC_GetSysClockFreq>
 8109bc6:	4602      	mov	r2, r0
 8109bc8:	4b11      	ldr	r3, [pc, #68]	; (8109c10 <HAL_RCC_GetHCLKFreq+0x54>)
 8109bca:	699b      	ldr	r3, [r3, #24]
 8109bcc:	0a1b      	lsrs	r3, r3, #8
 8109bce:	f003 030f 	and.w	r3, r3, #15
 8109bd2:	4910      	ldr	r1, [pc, #64]	; (8109c14 <HAL_RCC_GetHCLKFreq+0x58>)
 8109bd4:	5ccb      	ldrb	r3, [r1, r3]
 8109bd6:	f003 031f 	and.w	r3, r3, #31
 8109bda:	fa22 f303 	lsr.w	r3, r2, r3
 8109bde:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8109be0:	4b0b      	ldr	r3, [pc, #44]	; (8109c10 <HAL_RCC_GetHCLKFreq+0x54>)
 8109be2:	699b      	ldr	r3, [r3, #24]
 8109be4:	f003 030f 	and.w	r3, r3, #15
 8109be8:	4a0a      	ldr	r2, [pc, #40]	; (8109c14 <HAL_RCC_GetHCLKFreq+0x58>)
 8109bea:	5cd3      	ldrb	r3, [r2, r3]
 8109bec:	f003 031f 	and.w	r3, r3, #31
 8109bf0:	687a      	ldr	r2, [r7, #4]
 8109bf2:	fa22 f303 	lsr.w	r3, r2, r3
 8109bf6:	4a08      	ldr	r2, [pc, #32]	; (8109c18 <HAL_RCC_GetHCLKFreq+0x5c>)
 8109bf8:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 8109bfa:	4b07      	ldr	r3, [pc, #28]	; (8109c18 <HAL_RCC_GetHCLKFreq+0x5c>)
 8109bfc:	681b      	ldr	r3, [r3, #0]
 8109bfe:	4a07      	ldr	r2, [pc, #28]	; (8109c1c <HAL_RCC_GetHCLKFreq+0x60>)
 8109c00:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8109c02:	4b05      	ldr	r3, [pc, #20]	; (8109c18 <HAL_RCC_GetHCLKFreq+0x5c>)
 8109c04:	681b      	ldr	r3, [r3, #0]
}
 8109c06:	4618      	mov	r0, r3
 8109c08:	3708      	adds	r7, #8
 8109c0a:	46bd      	mov	sp, r7
 8109c0c:	bd80      	pop	{r7, pc}
 8109c0e:	bf00      	nop
 8109c10:	58024400 	.word	0x58024400
 8109c14:	0811b9f0 	.word	0x0811b9f0
 8109c18:	10000004 	.word	0x10000004
 8109c1c:	10000000 	.word	0x10000000

08109c20 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8109c20:	b580      	push	{r7, lr}
 8109c22:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8109c24:	f7ff ffca 	bl	8109bbc <HAL_RCC_GetHCLKFreq>
 8109c28:	4602      	mov	r2, r0
 8109c2a:	4b06      	ldr	r3, [pc, #24]	; (8109c44 <HAL_RCC_GetPCLK1Freq+0x24>)
 8109c2c:	69db      	ldr	r3, [r3, #28]
 8109c2e:	091b      	lsrs	r3, r3, #4
 8109c30:	f003 0307 	and.w	r3, r3, #7
 8109c34:	4904      	ldr	r1, [pc, #16]	; (8109c48 <HAL_RCC_GetPCLK1Freq+0x28>)
 8109c36:	5ccb      	ldrb	r3, [r1, r3]
 8109c38:	f003 031f 	and.w	r3, r3, #31
 8109c3c:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8109c40:	4618      	mov	r0, r3
 8109c42:	bd80      	pop	{r7, pc}
 8109c44:	58024400 	.word	0x58024400
 8109c48:	0811b9f0 	.word	0x0811b9f0

08109c4c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8109c4c:	b580      	push	{r7, lr}
 8109c4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8109c50:	f7ff ffb4 	bl	8109bbc <HAL_RCC_GetHCLKFreq>
 8109c54:	4602      	mov	r2, r0
 8109c56:	4b06      	ldr	r3, [pc, #24]	; (8109c70 <HAL_RCC_GetPCLK2Freq+0x24>)
 8109c58:	69db      	ldr	r3, [r3, #28]
 8109c5a:	0a1b      	lsrs	r3, r3, #8
 8109c5c:	f003 0307 	and.w	r3, r3, #7
 8109c60:	4904      	ldr	r1, [pc, #16]	; (8109c74 <HAL_RCC_GetPCLK2Freq+0x28>)
 8109c62:	5ccb      	ldrb	r3, [r1, r3]
 8109c64:	f003 031f 	and.w	r3, r3, #31
 8109c68:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8109c6c:	4618      	mov	r0, r3
 8109c6e:	bd80      	pop	{r7, pc}
 8109c70:	58024400 	.word	0x58024400
 8109c74:	0811b9f0 	.word	0x0811b9f0

08109c78 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8109c78:	b480      	push	{r7}
 8109c7a:	b083      	sub	sp, #12
 8109c7c:	af00      	add	r7, sp, #0
 8109c7e:	6078      	str	r0, [r7, #4]
 8109c80:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8109c82:	687b      	ldr	r3, [r7, #4]
 8109c84:	223f      	movs	r2, #63	; 0x3f
 8109c86:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8109c88:	4b1a      	ldr	r3, [pc, #104]	; (8109cf4 <HAL_RCC_GetClockConfig+0x7c>)
 8109c8a:	691b      	ldr	r3, [r3, #16]
 8109c8c:	f003 0207 	and.w	r2, r3, #7
 8109c90:	687b      	ldr	r3, [r7, #4]
 8109c92:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8109c94:	4b17      	ldr	r3, [pc, #92]	; (8109cf4 <HAL_RCC_GetClockConfig+0x7c>)
 8109c96:	699b      	ldr	r3, [r3, #24]
 8109c98:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8109c9c:	687b      	ldr	r3, [r7, #4]
 8109c9e:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8109ca0:	4b14      	ldr	r3, [pc, #80]	; (8109cf4 <HAL_RCC_GetClockConfig+0x7c>)
 8109ca2:	699b      	ldr	r3, [r3, #24]
 8109ca4:	f003 020f 	and.w	r2, r3, #15
 8109ca8:	687b      	ldr	r3, [r7, #4]
 8109caa:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8109cac:	4b11      	ldr	r3, [pc, #68]	; (8109cf4 <HAL_RCC_GetClockConfig+0x7c>)
 8109cae:	699b      	ldr	r3, [r3, #24]
 8109cb0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8109cb4:	687b      	ldr	r3, [r7, #4]
 8109cb6:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8109cb8:	4b0e      	ldr	r3, [pc, #56]	; (8109cf4 <HAL_RCC_GetClockConfig+0x7c>)
 8109cba:	69db      	ldr	r3, [r3, #28]
 8109cbc:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8109cc0:	687b      	ldr	r3, [r7, #4]
 8109cc2:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8109cc4:	4b0b      	ldr	r3, [pc, #44]	; (8109cf4 <HAL_RCC_GetClockConfig+0x7c>)
 8109cc6:	69db      	ldr	r3, [r3, #28]
 8109cc8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8109ccc:	687b      	ldr	r3, [r7, #4]
 8109cce:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8109cd0:	4b08      	ldr	r3, [pc, #32]	; (8109cf4 <HAL_RCC_GetClockConfig+0x7c>)
 8109cd2:	6a1b      	ldr	r3, [r3, #32]
 8109cd4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8109cd8:	687b      	ldr	r3, [r7, #4]
 8109cda:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8109cdc:	4b06      	ldr	r3, [pc, #24]	; (8109cf8 <HAL_RCC_GetClockConfig+0x80>)
 8109cde:	681b      	ldr	r3, [r3, #0]
 8109ce0:	f003 020f 	and.w	r2, r3, #15
 8109ce4:	683b      	ldr	r3, [r7, #0]
 8109ce6:	601a      	str	r2, [r3, #0]
}
 8109ce8:	bf00      	nop
 8109cea:	370c      	adds	r7, #12
 8109cec:	46bd      	mov	sp, r7
 8109cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109cf2:	4770      	bx	lr
 8109cf4:	58024400 	.word	0x58024400
 8109cf8:	52002000 	.word	0x52002000

08109cfc <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8109cfc:	b580      	push	{r7, lr}
 8109cfe:	b086      	sub	sp, #24
 8109d00:	af00      	add	r7, sp, #0
 8109d02:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8109d04:	2300      	movs	r3, #0
 8109d06:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8109d08:	2300      	movs	r3, #0
 8109d0a:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8109d0c:	687b      	ldr	r3, [r7, #4]
 8109d0e:	681b      	ldr	r3, [r3, #0]
 8109d10:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8109d14:	2b00      	cmp	r3, #0
 8109d16:	d03f      	beq.n	8109d98 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8109d18:	687b      	ldr	r3, [r7, #4]
 8109d1a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8109d1c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8109d20:	d02a      	beq.n	8109d78 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8109d22:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8109d26:	d824      	bhi.n	8109d72 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8109d28:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8109d2c:	d018      	beq.n	8109d60 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8109d2e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8109d32:	d81e      	bhi.n	8109d72 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8109d34:	2b00      	cmp	r3, #0
 8109d36:	d003      	beq.n	8109d40 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8109d38:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8109d3c:	d007      	beq.n	8109d4e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8109d3e:	e018      	b.n	8109d72 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8109d40:	4bab      	ldr	r3, [pc, #684]	; (8109ff0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8109d42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8109d44:	4aaa      	ldr	r2, [pc, #680]	; (8109ff0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8109d46:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8109d4a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8109d4c:	e015      	b.n	8109d7a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8109d4e:	687b      	ldr	r3, [r7, #4]
 8109d50:	3304      	adds	r3, #4
 8109d52:	2102      	movs	r1, #2
 8109d54:	4618      	mov	r0, r3
 8109d56:	f001 fff3 	bl	810bd40 <RCCEx_PLL2_Config>
 8109d5a:	4603      	mov	r3, r0
 8109d5c:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8109d5e:	e00c      	b.n	8109d7a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8109d60:	687b      	ldr	r3, [r7, #4]
 8109d62:	3324      	adds	r3, #36	; 0x24
 8109d64:	2102      	movs	r1, #2
 8109d66:	4618      	mov	r0, r3
 8109d68:	f002 f89c 	bl	810bea4 <RCCEx_PLL3_Config>
 8109d6c:	4603      	mov	r3, r0
 8109d6e:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8109d70:	e003      	b.n	8109d7a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8109d72:	2301      	movs	r3, #1
 8109d74:	75fb      	strb	r3, [r7, #23]
      break;
 8109d76:	e000      	b.n	8109d7a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8109d78:	bf00      	nop
    }

    if(ret == HAL_OK)
 8109d7a:	7dfb      	ldrb	r3, [r7, #23]
 8109d7c:	2b00      	cmp	r3, #0
 8109d7e:	d109      	bne.n	8109d94 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8109d80:	4b9b      	ldr	r3, [pc, #620]	; (8109ff0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8109d82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8109d84:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8109d88:	687b      	ldr	r3, [r7, #4]
 8109d8a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8109d8c:	4998      	ldr	r1, [pc, #608]	; (8109ff0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8109d8e:	4313      	orrs	r3, r2
 8109d90:	650b      	str	r3, [r1, #80]	; 0x50
 8109d92:	e001      	b.n	8109d98 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8109d94:	7dfb      	ldrb	r3, [r7, #23]
 8109d96:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8109d98:	687b      	ldr	r3, [r7, #4]
 8109d9a:	681b      	ldr	r3, [r3, #0]
 8109d9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8109da0:	2b00      	cmp	r3, #0
 8109da2:	d03d      	beq.n	8109e20 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8109da4:	687b      	ldr	r3, [r7, #4]
 8109da6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8109da8:	2b04      	cmp	r3, #4
 8109daa:	d826      	bhi.n	8109dfa <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8109dac:	a201      	add	r2, pc, #4	; (adr r2, 8109db4 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8109dae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8109db2:	bf00      	nop
 8109db4:	08109dc9 	.word	0x08109dc9
 8109db8:	08109dd7 	.word	0x08109dd7
 8109dbc:	08109de9 	.word	0x08109de9
 8109dc0:	08109e01 	.word	0x08109e01
 8109dc4:	08109e01 	.word	0x08109e01
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8109dc8:	4b89      	ldr	r3, [pc, #548]	; (8109ff0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8109dca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8109dcc:	4a88      	ldr	r2, [pc, #544]	; (8109ff0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8109dce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8109dd2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8109dd4:	e015      	b.n	8109e02 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8109dd6:	687b      	ldr	r3, [r7, #4]
 8109dd8:	3304      	adds	r3, #4
 8109dda:	2100      	movs	r1, #0
 8109ddc:	4618      	mov	r0, r3
 8109dde:	f001 ffaf 	bl	810bd40 <RCCEx_PLL2_Config>
 8109de2:	4603      	mov	r3, r0
 8109de4:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8109de6:	e00c      	b.n	8109e02 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8109de8:	687b      	ldr	r3, [r7, #4]
 8109dea:	3324      	adds	r3, #36	; 0x24
 8109dec:	2100      	movs	r1, #0
 8109dee:	4618      	mov	r0, r3
 8109df0:	f002 f858 	bl	810bea4 <RCCEx_PLL3_Config>
 8109df4:	4603      	mov	r3, r0
 8109df6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8109df8:	e003      	b.n	8109e02 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8109dfa:	2301      	movs	r3, #1
 8109dfc:	75fb      	strb	r3, [r7, #23]
      break;
 8109dfe:	e000      	b.n	8109e02 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8109e00:	bf00      	nop
    }

    if(ret == HAL_OK)
 8109e02:	7dfb      	ldrb	r3, [r7, #23]
 8109e04:	2b00      	cmp	r3, #0
 8109e06:	d109      	bne.n	8109e1c <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8109e08:	4b79      	ldr	r3, [pc, #484]	; (8109ff0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8109e0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8109e0c:	f023 0207 	bic.w	r2, r3, #7
 8109e10:	687b      	ldr	r3, [r7, #4]
 8109e12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8109e14:	4976      	ldr	r1, [pc, #472]	; (8109ff0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8109e16:	4313      	orrs	r3, r2
 8109e18:	650b      	str	r3, [r1, #80]	; 0x50
 8109e1a:	e001      	b.n	8109e20 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8109e1c:	7dfb      	ldrb	r3, [r7, #23]
 8109e1e:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8109e20:	687b      	ldr	r3, [r7, #4]
 8109e22:	681b      	ldr	r3, [r3, #0]
 8109e24:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8109e28:	2b00      	cmp	r3, #0
 8109e2a:	d042      	beq.n	8109eb2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8109e2c:	687b      	ldr	r3, [r7, #4]
 8109e2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8109e30:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8109e34:	d02b      	beq.n	8109e8e <HAL_RCCEx_PeriphCLKConfig+0x192>
 8109e36:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8109e3a:	d825      	bhi.n	8109e88 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8109e3c:	2bc0      	cmp	r3, #192	; 0xc0
 8109e3e:	d028      	beq.n	8109e92 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8109e40:	2bc0      	cmp	r3, #192	; 0xc0
 8109e42:	d821      	bhi.n	8109e88 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8109e44:	2b80      	cmp	r3, #128	; 0x80
 8109e46:	d016      	beq.n	8109e76 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8109e48:	2b80      	cmp	r3, #128	; 0x80
 8109e4a:	d81d      	bhi.n	8109e88 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8109e4c:	2b00      	cmp	r3, #0
 8109e4e:	d002      	beq.n	8109e56 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8109e50:	2b40      	cmp	r3, #64	; 0x40
 8109e52:	d007      	beq.n	8109e64 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8109e54:	e018      	b.n	8109e88 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8109e56:	4b66      	ldr	r3, [pc, #408]	; (8109ff0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8109e58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8109e5a:	4a65      	ldr	r2, [pc, #404]	; (8109ff0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8109e5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8109e60:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8109e62:	e017      	b.n	8109e94 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8109e64:	687b      	ldr	r3, [r7, #4]
 8109e66:	3304      	adds	r3, #4
 8109e68:	2100      	movs	r1, #0
 8109e6a:	4618      	mov	r0, r3
 8109e6c:	f001 ff68 	bl	810bd40 <RCCEx_PLL2_Config>
 8109e70:	4603      	mov	r3, r0
 8109e72:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8109e74:	e00e      	b.n	8109e94 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8109e76:	687b      	ldr	r3, [r7, #4]
 8109e78:	3324      	adds	r3, #36	; 0x24
 8109e7a:	2100      	movs	r1, #0
 8109e7c:	4618      	mov	r0, r3
 8109e7e:	f002 f811 	bl	810bea4 <RCCEx_PLL3_Config>
 8109e82:	4603      	mov	r3, r0
 8109e84:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8109e86:	e005      	b.n	8109e94 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8109e88:	2301      	movs	r3, #1
 8109e8a:	75fb      	strb	r3, [r7, #23]
      break;
 8109e8c:	e002      	b.n	8109e94 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8109e8e:	bf00      	nop
 8109e90:	e000      	b.n	8109e94 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8109e92:	bf00      	nop
    }

    if(ret == HAL_OK)
 8109e94:	7dfb      	ldrb	r3, [r7, #23]
 8109e96:	2b00      	cmp	r3, #0
 8109e98:	d109      	bne.n	8109eae <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8109e9a:	4b55      	ldr	r3, [pc, #340]	; (8109ff0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8109e9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8109e9e:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8109ea2:	687b      	ldr	r3, [r7, #4]
 8109ea4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8109ea6:	4952      	ldr	r1, [pc, #328]	; (8109ff0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8109ea8:	4313      	orrs	r3, r2
 8109eaa:	650b      	str	r3, [r1, #80]	; 0x50
 8109eac:	e001      	b.n	8109eb2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8109eae:	7dfb      	ldrb	r3, [r7, #23]
 8109eb0:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8109eb2:	687b      	ldr	r3, [r7, #4]
 8109eb4:	681b      	ldr	r3, [r3, #0]
 8109eb6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8109eba:	2b00      	cmp	r3, #0
 8109ebc:	d049      	beq.n	8109f52 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8109ebe:	687b      	ldr	r3, [r7, #4]
 8109ec0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8109ec4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8109ec8:	d030      	beq.n	8109f2c <HAL_RCCEx_PeriphCLKConfig+0x230>
 8109eca:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8109ece:	d82a      	bhi.n	8109f26 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8109ed0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8109ed4:	d02c      	beq.n	8109f30 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8109ed6:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8109eda:	d824      	bhi.n	8109f26 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8109edc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8109ee0:	d018      	beq.n	8109f14 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8109ee2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8109ee6:	d81e      	bhi.n	8109f26 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8109ee8:	2b00      	cmp	r3, #0
 8109eea:	d003      	beq.n	8109ef4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8109eec:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8109ef0:	d007      	beq.n	8109f02 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8109ef2:	e018      	b.n	8109f26 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8109ef4:	4b3e      	ldr	r3, [pc, #248]	; (8109ff0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8109ef6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8109ef8:	4a3d      	ldr	r2, [pc, #244]	; (8109ff0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8109efa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8109efe:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8109f00:	e017      	b.n	8109f32 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8109f02:	687b      	ldr	r3, [r7, #4]
 8109f04:	3304      	adds	r3, #4
 8109f06:	2100      	movs	r1, #0
 8109f08:	4618      	mov	r0, r3
 8109f0a:	f001 ff19 	bl	810bd40 <RCCEx_PLL2_Config>
 8109f0e:	4603      	mov	r3, r0
 8109f10:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8109f12:	e00e      	b.n	8109f32 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8109f14:	687b      	ldr	r3, [r7, #4]
 8109f16:	3324      	adds	r3, #36	; 0x24
 8109f18:	2100      	movs	r1, #0
 8109f1a:	4618      	mov	r0, r3
 8109f1c:	f001 ffc2 	bl	810bea4 <RCCEx_PLL3_Config>
 8109f20:	4603      	mov	r3, r0
 8109f22:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8109f24:	e005      	b.n	8109f32 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8109f26:	2301      	movs	r3, #1
 8109f28:	75fb      	strb	r3, [r7, #23]
      break;
 8109f2a:	e002      	b.n	8109f32 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8109f2c:	bf00      	nop
 8109f2e:	e000      	b.n	8109f32 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8109f30:	bf00      	nop
    }

    if(ret == HAL_OK)
 8109f32:	7dfb      	ldrb	r3, [r7, #23]
 8109f34:	2b00      	cmp	r3, #0
 8109f36:	d10a      	bne.n	8109f4e <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8109f38:	4b2d      	ldr	r3, [pc, #180]	; (8109ff0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8109f3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8109f3c:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8109f40:	687b      	ldr	r3, [r7, #4]
 8109f42:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8109f46:	492a      	ldr	r1, [pc, #168]	; (8109ff0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8109f48:	4313      	orrs	r3, r2
 8109f4a:	658b      	str	r3, [r1, #88]	; 0x58
 8109f4c:	e001      	b.n	8109f52 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8109f4e:	7dfb      	ldrb	r3, [r7, #23]
 8109f50:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8109f52:	687b      	ldr	r3, [r7, #4]
 8109f54:	681b      	ldr	r3, [r3, #0]
 8109f56:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8109f5a:	2b00      	cmp	r3, #0
 8109f5c:	d04c      	beq.n	8109ff8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8109f5e:	687b      	ldr	r3, [r7, #4]
 8109f60:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8109f64:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8109f68:	d030      	beq.n	8109fcc <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8109f6a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8109f6e:	d82a      	bhi.n	8109fc6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8109f70:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8109f74:	d02c      	beq.n	8109fd0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 8109f76:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8109f7a:	d824      	bhi.n	8109fc6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8109f7c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8109f80:	d018      	beq.n	8109fb4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8109f82:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8109f86:	d81e      	bhi.n	8109fc6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8109f88:	2b00      	cmp	r3, #0
 8109f8a:	d003      	beq.n	8109f94 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8109f8c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8109f90:	d007      	beq.n	8109fa2 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8109f92:	e018      	b.n	8109fc6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8109f94:	4b16      	ldr	r3, [pc, #88]	; (8109ff0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8109f96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8109f98:	4a15      	ldr	r2, [pc, #84]	; (8109ff0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8109f9a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8109f9e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8109fa0:	e017      	b.n	8109fd2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8109fa2:	687b      	ldr	r3, [r7, #4]
 8109fa4:	3304      	adds	r3, #4
 8109fa6:	2100      	movs	r1, #0
 8109fa8:	4618      	mov	r0, r3
 8109faa:	f001 fec9 	bl	810bd40 <RCCEx_PLL2_Config>
 8109fae:	4603      	mov	r3, r0
 8109fb0:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8109fb2:	e00e      	b.n	8109fd2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8109fb4:	687b      	ldr	r3, [r7, #4]
 8109fb6:	3324      	adds	r3, #36	; 0x24
 8109fb8:	2100      	movs	r1, #0
 8109fba:	4618      	mov	r0, r3
 8109fbc:	f001 ff72 	bl	810bea4 <RCCEx_PLL3_Config>
 8109fc0:	4603      	mov	r3, r0
 8109fc2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8109fc4:	e005      	b.n	8109fd2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8109fc6:	2301      	movs	r3, #1
 8109fc8:	75fb      	strb	r3, [r7, #23]
      break;
 8109fca:	e002      	b.n	8109fd2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8109fcc:	bf00      	nop
 8109fce:	e000      	b.n	8109fd2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8109fd0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8109fd2:	7dfb      	ldrb	r3, [r7, #23]
 8109fd4:	2b00      	cmp	r3, #0
 8109fd6:	d10d      	bne.n	8109ff4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8109fd8:	4b05      	ldr	r3, [pc, #20]	; (8109ff0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8109fda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8109fdc:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8109fe0:	687b      	ldr	r3, [r7, #4]
 8109fe2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8109fe6:	4902      	ldr	r1, [pc, #8]	; (8109ff0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8109fe8:	4313      	orrs	r3, r2
 8109fea:	658b      	str	r3, [r1, #88]	; 0x58
 8109fec:	e004      	b.n	8109ff8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8109fee:	bf00      	nop
 8109ff0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8109ff4:	7dfb      	ldrb	r3, [r7, #23]
 8109ff6:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8109ff8:	687b      	ldr	r3, [r7, #4]
 8109ffa:	681b      	ldr	r3, [r3, #0]
 8109ffc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 810a000:	2b00      	cmp	r3, #0
 810a002:	d032      	beq.n	810a06a <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 810a004:	687b      	ldr	r3, [r7, #4]
 810a006:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 810a008:	2b30      	cmp	r3, #48	; 0x30
 810a00a:	d01c      	beq.n	810a046 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 810a00c:	2b30      	cmp	r3, #48	; 0x30
 810a00e:	d817      	bhi.n	810a040 <HAL_RCCEx_PeriphCLKConfig+0x344>
 810a010:	2b20      	cmp	r3, #32
 810a012:	d00c      	beq.n	810a02e <HAL_RCCEx_PeriphCLKConfig+0x332>
 810a014:	2b20      	cmp	r3, #32
 810a016:	d813      	bhi.n	810a040 <HAL_RCCEx_PeriphCLKConfig+0x344>
 810a018:	2b00      	cmp	r3, #0
 810a01a:	d016      	beq.n	810a04a <HAL_RCCEx_PeriphCLKConfig+0x34e>
 810a01c:	2b10      	cmp	r3, #16
 810a01e:	d10f      	bne.n	810a040 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810a020:	4baf      	ldr	r3, [pc, #700]	; (810a2e0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 810a022:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810a024:	4aae      	ldr	r2, [pc, #696]	; (810a2e0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 810a026:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 810a02a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 810a02c:	e00e      	b.n	810a04c <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 810a02e:	687b      	ldr	r3, [r7, #4]
 810a030:	3304      	adds	r3, #4
 810a032:	2102      	movs	r1, #2
 810a034:	4618      	mov	r0, r3
 810a036:	f001 fe83 	bl	810bd40 <RCCEx_PLL2_Config>
 810a03a:	4603      	mov	r3, r0
 810a03c:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 810a03e:	e005      	b.n	810a04c <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 810a040:	2301      	movs	r3, #1
 810a042:	75fb      	strb	r3, [r7, #23]
      break;
 810a044:	e002      	b.n	810a04c <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 810a046:	bf00      	nop
 810a048:	e000      	b.n	810a04c <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 810a04a:	bf00      	nop
    }

    if(ret == HAL_OK)
 810a04c:	7dfb      	ldrb	r3, [r7, #23]
 810a04e:	2b00      	cmp	r3, #0
 810a050:	d109      	bne.n	810a066 <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 810a052:	4ba3      	ldr	r3, [pc, #652]	; (810a2e0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 810a054:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 810a056:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 810a05a:	687b      	ldr	r3, [r7, #4]
 810a05c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 810a05e:	49a0      	ldr	r1, [pc, #640]	; (810a2e0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 810a060:	4313      	orrs	r3, r2
 810a062:	64cb      	str	r3, [r1, #76]	; 0x4c
 810a064:	e001      	b.n	810a06a <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810a066:	7dfb      	ldrb	r3, [r7, #23]
 810a068:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 810a06a:	687b      	ldr	r3, [r7, #4]
 810a06c:	681b      	ldr	r3, [r3, #0]
 810a06e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 810a072:	2b00      	cmp	r3, #0
 810a074:	d047      	beq.n	810a106 <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 810a076:	687b      	ldr	r3, [r7, #4]
 810a078:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 810a07a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 810a07e:	d030      	beq.n	810a0e2 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 810a080:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 810a084:	d82a      	bhi.n	810a0dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 810a086:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 810a08a:	d02c      	beq.n	810a0e6 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 810a08c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 810a090:	d824      	bhi.n	810a0dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 810a092:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 810a096:	d018      	beq.n	810a0ca <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 810a098:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 810a09c:	d81e      	bhi.n	810a0dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 810a09e:	2b00      	cmp	r3, #0
 810a0a0:	d003      	beq.n	810a0aa <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 810a0a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 810a0a6:	d007      	beq.n	810a0b8 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 810a0a8:	e018      	b.n	810a0dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810a0aa:	4b8d      	ldr	r3, [pc, #564]	; (810a2e0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 810a0ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810a0ae:	4a8c      	ldr	r2, [pc, #560]	; (810a2e0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 810a0b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 810a0b4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 810a0b6:	e017      	b.n	810a0e8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 810a0b8:	687b      	ldr	r3, [r7, #4]
 810a0ba:	3304      	adds	r3, #4
 810a0bc:	2100      	movs	r1, #0
 810a0be:	4618      	mov	r0, r3
 810a0c0:	f001 fe3e 	bl	810bd40 <RCCEx_PLL2_Config>
 810a0c4:	4603      	mov	r3, r0
 810a0c6:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 810a0c8:	e00e      	b.n	810a0e8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 810a0ca:	687b      	ldr	r3, [r7, #4]
 810a0cc:	3324      	adds	r3, #36	; 0x24
 810a0ce:	2100      	movs	r1, #0
 810a0d0:	4618      	mov	r0, r3
 810a0d2:	f001 fee7 	bl	810bea4 <RCCEx_PLL3_Config>
 810a0d6:	4603      	mov	r3, r0
 810a0d8:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 810a0da:	e005      	b.n	810a0e8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 810a0dc:	2301      	movs	r3, #1
 810a0de:	75fb      	strb	r3, [r7, #23]
      break;
 810a0e0:	e002      	b.n	810a0e8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 810a0e2:	bf00      	nop
 810a0e4:	e000      	b.n	810a0e8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 810a0e6:	bf00      	nop
    }

    if(ret == HAL_OK)
 810a0e8:	7dfb      	ldrb	r3, [r7, #23]
 810a0ea:	2b00      	cmp	r3, #0
 810a0ec:	d109      	bne.n	810a102 <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 810a0ee:	4b7c      	ldr	r3, [pc, #496]	; (810a2e0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 810a0f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810a0f2:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 810a0f6:	687b      	ldr	r3, [r7, #4]
 810a0f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 810a0fa:	4979      	ldr	r1, [pc, #484]	; (810a2e0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 810a0fc:	4313      	orrs	r3, r2
 810a0fe:	650b      	str	r3, [r1, #80]	; 0x50
 810a100:	e001      	b.n	810a106 <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810a102:	7dfb      	ldrb	r3, [r7, #23]
 810a104:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 810a106:	687b      	ldr	r3, [r7, #4]
 810a108:	681b      	ldr	r3, [r3, #0]
 810a10a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 810a10e:	2b00      	cmp	r3, #0
 810a110:	d049      	beq.n	810a1a6 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 810a112:	687b      	ldr	r3, [r7, #4]
 810a114:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 810a116:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 810a11a:	d02e      	beq.n	810a17a <HAL_RCCEx_PeriphCLKConfig+0x47e>
 810a11c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 810a120:	d828      	bhi.n	810a174 <HAL_RCCEx_PeriphCLKConfig+0x478>
 810a122:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 810a126:	d02a      	beq.n	810a17e <HAL_RCCEx_PeriphCLKConfig+0x482>
 810a128:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 810a12c:	d822      	bhi.n	810a174 <HAL_RCCEx_PeriphCLKConfig+0x478>
 810a12e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 810a132:	d026      	beq.n	810a182 <HAL_RCCEx_PeriphCLKConfig+0x486>
 810a134:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 810a138:	d81c      	bhi.n	810a174 <HAL_RCCEx_PeriphCLKConfig+0x478>
 810a13a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 810a13e:	d010      	beq.n	810a162 <HAL_RCCEx_PeriphCLKConfig+0x466>
 810a140:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 810a144:	d816      	bhi.n	810a174 <HAL_RCCEx_PeriphCLKConfig+0x478>
 810a146:	2b00      	cmp	r3, #0
 810a148:	d01d      	beq.n	810a186 <HAL_RCCEx_PeriphCLKConfig+0x48a>
 810a14a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 810a14e:	d111      	bne.n	810a174 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 810a150:	687b      	ldr	r3, [r7, #4]
 810a152:	3304      	adds	r3, #4
 810a154:	2101      	movs	r1, #1
 810a156:	4618      	mov	r0, r3
 810a158:	f001 fdf2 	bl	810bd40 <RCCEx_PLL2_Config>
 810a15c:	4603      	mov	r3, r0
 810a15e:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 810a160:	e012      	b.n	810a188 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 810a162:	687b      	ldr	r3, [r7, #4]
 810a164:	3324      	adds	r3, #36	; 0x24
 810a166:	2101      	movs	r1, #1
 810a168:	4618      	mov	r0, r3
 810a16a:	f001 fe9b 	bl	810bea4 <RCCEx_PLL3_Config>
 810a16e:	4603      	mov	r3, r0
 810a170:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 810a172:	e009      	b.n	810a188 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 810a174:	2301      	movs	r3, #1
 810a176:	75fb      	strb	r3, [r7, #23]
      break;
 810a178:	e006      	b.n	810a188 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 810a17a:	bf00      	nop
 810a17c:	e004      	b.n	810a188 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 810a17e:	bf00      	nop
 810a180:	e002      	b.n	810a188 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 810a182:	bf00      	nop
 810a184:	e000      	b.n	810a188 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 810a186:	bf00      	nop
    }

    if(ret == HAL_OK)
 810a188:	7dfb      	ldrb	r3, [r7, #23]
 810a18a:	2b00      	cmp	r3, #0
 810a18c:	d109      	bne.n	810a1a2 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 810a18e:	4b54      	ldr	r3, [pc, #336]	; (810a2e0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 810a190:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810a192:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 810a196:	687b      	ldr	r3, [r7, #4]
 810a198:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 810a19a:	4951      	ldr	r1, [pc, #324]	; (810a2e0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 810a19c:	4313      	orrs	r3, r2
 810a19e:	650b      	str	r3, [r1, #80]	; 0x50
 810a1a0:	e001      	b.n	810a1a6 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810a1a2:	7dfb      	ldrb	r3, [r7, #23]
 810a1a4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 810a1a6:	687b      	ldr	r3, [r7, #4]
 810a1a8:	681b      	ldr	r3, [r3, #0]
 810a1aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 810a1ae:	2b00      	cmp	r3, #0
 810a1b0:	d04b      	beq.n	810a24a <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 810a1b2:	687b      	ldr	r3, [r7, #4]
 810a1b4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 810a1b8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 810a1bc:	d02e      	beq.n	810a21c <HAL_RCCEx_PeriphCLKConfig+0x520>
 810a1be:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 810a1c2:	d828      	bhi.n	810a216 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 810a1c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 810a1c8:	d02a      	beq.n	810a220 <HAL_RCCEx_PeriphCLKConfig+0x524>
 810a1ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 810a1ce:	d822      	bhi.n	810a216 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 810a1d0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 810a1d4:	d026      	beq.n	810a224 <HAL_RCCEx_PeriphCLKConfig+0x528>
 810a1d6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 810a1da:	d81c      	bhi.n	810a216 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 810a1dc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 810a1e0:	d010      	beq.n	810a204 <HAL_RCCEx_PeriphCLKConfig+0x508>
 810a1e2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 810a1e6:	d816      	bhi.n	810a216 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 810a1e8:	2b00      	cmp	r3, #0
 810a1ea:	d01d      	beq.n	810a228 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 810a1ec:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 810a1f0:	d111      	bne.n	810a216 <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 810a1f2:	687b      	ldr	r3, [r7, #4]
 810a1f4:	3304      	adds	r3, #4
 810a1f6:	2101      	movs	r1, #1
 810a1f8:	4618      	mov	r0, r3
 810a1fa:	f001 fda1 	bl	810bd40 <RCCEx_PLL2_Config>
 810a1fe:	4603      	mov	r3, r0
 810a200:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 810a202:	e012      	b.n	810a22a <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 810a204:	687b      	ldr	r3, [r7, #4]
 810a206:	3324      	adds	r3, #36	; 0x24
 810a208:	2101      	movs	r1, #1
 810a20a:	4618      	mov	r0, r3
 810a20c:	f001 fe4a 	bl	810bea4 <RCCEx_PLL3_Config>
 810a210:	4603      	mov	r3, r0
 810a212:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 810a214:	e009      	b.n	810a22a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 810a216:	2301      	movs	r3, #1
 810a218:	75fb      	strb	r3, [r7, #23]
      break;
 810a21a:	e006      	b.n	810a22a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 810a21c:	bf00      	nop
 810a21e:	e004      	b.n	810a22a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 810a220:	bf00      	nop
 810a222:	e002      	b.n	810a22a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 810a224:	bf00      	nop
 810a226:	e000      	b.n	810a22a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 810a228:	bf00      	nop
    }

    if(ret == HAL_OK)
 810a22a:	7dfb      	ldrb	r3, [r7, #23]
 810a22c:	2b00      	cmp	r3, #0
 810a22e:	d10a      	bne.n	810a246 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 810a230:	4b2b      	ldr	r3, [pc, #172]	; (810a2e0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 810a232:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810a234:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 810a238:	687b      	ldr	r3, [r7, #4]
 810a23a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 810a23e:	4928      	ldr	r1, [pc, #160]	; (810a2e0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 810a240:	4313      	orrs	r3, r2
 810a242:	658b      	str	r3, [r1, #88]	; 0x58
 810a244:	e001      	b.n	810a24a <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810a246:	7dfb      	ldrb	r3, [r7, #23]
 810a248:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 810a24a:	687b      	ldr	r3, [r7, #4]
 810a24c:	681b      	ldr	r3, [r3, #0]
 810a24e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 810a252:	2b00      	cmp	r3, #0
 810a254:	d02f      	beq.n	810a2b6 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 810a256:	687b      	ldr	r3, [r7, #4]
 810a258:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 810a25a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 810a25e:	d00e      	beq.n	810a27e <HAL_RCCEx_PeriphCLKConfig+0x582>
 810a260:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 810a264:	d814      	bhi.n	810a290 <HAL_RCCEx_PeriphCLKConfig+0x594>
 810a266:	2b00      	cmp	r3, #0
 810a268:	d015      	beq.n	810a296 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 810a26a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 810a26e:	d10f      	bne.n	810a290 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810a270:	4b1b      	ldr	r3, [pc, #108]	; (810a2e0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 810a272:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810a274:	4a1a      	ldr	r2, [pc, #104]	; (810a2e0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 810a276:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 810a27a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 810a27c:	e00c      	b.n	810a298 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 810a27e:	687b      	ldr	r3, [r7, #4]
 810a280:	3304      	adds	r3, #4
 810a282:	2101      	movs	r1, #1
 810a284:	4618      	mov	r0, r3
 810a286:	f001 fd5b 	bl	810bd40 <RCCEx_PLL2_Config>
 810a28a:	4603      	mov	r3, r0
 810a28c:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 810a28e:	e003      	b.n	810a298 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 810a290:	2301      	movs	r3, #1
 810a292:	75fb      	strb	r3, [r7, #23]
      break;
 810a294:	e000      	b.n	810a298 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 810a296:	bf00      	nop
    }

    if(ret == HAL_OK)
 810a298:	7dfb      	ldrb	r3, [r7, #23]
 810a29a:	2b00      	cmp	r3, #0
 810a29c:	d109      	bne.n	810a2b2 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 810a29e:	4b10      	ldr	r3, [pc, #64]	; (810a2e0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 810a2a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810a2a2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 810a2a6:	687b      	ldr	r3, [r7, #4]
 810a2a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 810a2aa:	490d      	ldr	r1, [pc, #52]	; (810a2e0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 810a2ac:	4313      	orrs	r3, r2
 810a2ae:	650b      	str	r3, [r1, #80]	; 0x50
 810a2b0:	e001      	b.n	810a2b6 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810a2b2:	7dfb      	ldrb	r3, [r7, #23]
 810a2b4:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 810a2b6:	687b      	ldr	r3, [r7, #4]
 810a2b8:	681b      	ldr	r3, [r3, #0]
 810a2ba:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 810a2be:	2b00      	cmp	r3, #0
 810a2c0:	d033      	beq.n	810a32a <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 810a2c2:	687b      	ldr	r3, [r7, #4]
 810a2c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 810a2c6:	2b03      	cmp	r3, #3
 810a2c8:	d81c      	bhi.n	810a304 <HAL_RCCEx_PeriphCLKConfig+0x608>
 810a2ca:	a201      	add	r2, pc, #4	; (adr r2, 810a2d0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 810a2cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810a2d0:	0810a30b 	.word	0x0810a30b
 810a2d4:	0810a2e5 	.word	0x0810a2e5
 810a2d8:	0810a2f3 	.word	0x0810a2f3
 810a2dc:	0810a30b 	.word	0x0810a30b
 810a2e0:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810a2e4:	4bb9      	ldr	r3, [pc, #740]	; (810a5cc <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 810a2e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810a2e8:	4ab8      	ldr	r2, [pc, #736]	; (810a5cc <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 810a2ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 810a2ee:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 810a2f0:	e00c      	b.n	810a30c <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 810a2f2:	687b      	ldr	r3, [r7, #4]
 810a2f4:	3304      	adds	r3, #4
 810a2f6:	2102      	movs	r1, #2
 810a2f8:	4618      	mov	r0, r3
 810a2fa:	f001 fd21 	bl	810bd40 <RCCEx_PLL2_Config>
 810a2fe:	4603      	mov	r3, r0
 810a300:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 810a302:	e003      	b.n	810a30c <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 810a304:	2301      	movs	r3, #1
 810a306:	75fb      	strb	r3, [r7, #23]
      break;
 810a308:	e000      	b.n	810a30c <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 810a30a:	bf00      	nop
    }

    if(ret == HAL_OK)
 810a30c:	7dfb      	ldrb	r3, [r7, #23]
 810a30e:	2b00      	cmp	r3, #0
 810a310:	d109      	bne.n	810a326 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 810a312:	4bae      	ldr	r3, [pc, #696]	; (810a5cc <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 810a314:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 810a316:	f023 0203 	bic.w	r2, r3, #3
 810a31a:	687b      	ldr	r3, [r7, #4]
 810a31c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 810a31e:	49ab      	ldr	r1, [pc, #684]	; (810a5cc <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 810a320:	4313      	orrs	r3, r2
 810a322:	64cb      	str	r3, [r1, #76]	; 0x4c
 810a324:	e001      	b.n	810a32a <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810a326:	7dfb      	ldrb	r3, [r7, #23]
 810a328:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 810a32a:	687b      	ldr	r3, [r7, #4]
 810a32c:	681b      	ldr	r3, [r3, #0]
 810a32e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 810a332:	2b00      	cmp	r3, #0
 810a334:	f000 8088 	beq.w	810a448 <HAL_RCCEx_PeriphCLKConfig+0x74c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 810a338:	4ba5      	ldr	r3, [pc, #660]	; (810a5d0 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 810a33a:	681b      	ldr	r3, [r3, #0]
 810a33c:	4aa4      	ldr	r2, [pc, #656]	; (810a5d0 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 810a33e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 810a342:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 810a344:	f7f8 fba0 	bl	8102a88 <HAL_GetTick>
 810a348:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 810a34a:	e009      	b.n	810a360 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 810a34c:	f7f8 fb9c 	bl	8102a88 <HAL_GetTick>
 810a350:	4602      	mov	r2, r0
 810a352:	693b      	ldr	r3, [r7, #16]
 810a354:	1ad3      	subs	r3, r2, r3
 810a356:	2b64      	cmp	r3, #100	; 0x64
 810a358:	d902      	bls.n	810a360 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 810a35a:	2303      	movs	r3, #3
 810a35c:	75fb      	strb	r3, [r7, #23]
        break;
 810a35e:	e005      	b.n	810a36c <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 810a360:	4b9b      	ldr	r3, [pc, #620]	; (810a5d0 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 810a362:	681b      	ldr	r3, [r3, #0]
 810a364:	f403 7380 	and.w	r3, r3, #256	; 0x100
 810a368:	2b00      	cmp	r3, #0
 810a36a:	d0ef      	beq.n	810a34c <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 810a36c:	7dfb      	ldrb	r3, [r7, #23]
 810a36e:	2b00      	cmp	r3, #0
 810a370:	d168      	bne.n	810a444 <HAL_RCCEx_PeriphCLKConfig+0x748>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 810a372:	4b96      	ldr	r3, [pc, #600]	; (810a5cc <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 810a374:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 810a376:	687b      	ldr	r3, [r7, #4]
 810a378:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 810a37c:	4053      	eors	r3, r2
 810a37e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 810a382:	2b00      	cmp	r3, #0
 810a384:	d013      	beq.n	810a3ae <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 810a386:	4b91      	ldr	r3, [pc, #580]	; (810a5cc <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 810a388:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 810a38a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 810a38e:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 810a390:	4b8e      	ldr	r3, [pc, #568]	; (810a5cc <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 810a392:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 810a394:	4a8d      	ldr	r2, [pc, #564]	; (810a5cc <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 810a396:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 810a39a:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 810a39c:	4b8b      	ldr	r3, [pc, #556]	; (810a5cc <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 810a39e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 810a3a0:	4a8a      	ldr	r2, [pc, #552]	; (810a5cc <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 810a3a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 810a3a6:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 810a3a8:	4a88      	ldr	r2, [pc, #544]	; (810a5cc <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 810a3aa:	68fb      	ldr	r3, [r7, #12]
 810a3ac:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 810a3ae:	687b      	ldr	r3, [r7, #4]
 810a3b0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 810a3b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810a3b8:	d115      	bne.n	810a3e6 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 810a3ba:	f7f8 fb65 	bl	8102a88 <HAL_GetTick>
 810a3be:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 810a3c0:	e00b      	b.n	810a3da <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 810a3c2:	f7f8 fb61 	bl	8102a88 <HAL_GetTick>
 810a3c6:	4602      	mov	r2, r0
 810a3c8:	693b      	ldr	r3, [r7, #16]
 810a3ca:	1ad3      	subs	r3, r2, r3
 810a3cc:	f241 3288 	movw	r2, #5000	; 0x1388
 810a3d0:	4293      	cmp	r3, r2
 810a3d2:	d902      	bls.n	810a3da <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 810a3d4:	2303      	movs	r3, #3
 810a3d6:	75fb      	strb	r3, [r7, #23]
            break;
 810a3d8:	e005      	b.n	810a3e6 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 810a3da:	4b7c      	ldr	r3, [pc, #496]	; (810a5cc <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 810a3dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 810a3de:	f003 0302 	and.w	r3, r3, #2
 810a3e2:	2b00      	cmp	r3, #0
 810a3e4:	d0ed      	beq.n	810a3c2 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 810a3e6:	7dfb      	ldrb	r3, [r7, #23]
 810a3e8:	2b00      	cmp	r3, #0
 810a3ea:	d128      	bne.n	810a43e <HAL_RCCEx_PeriphCLKConfig+0x742>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 810a3ec:	687b      	ldr	r3, [r7, #4]
 810a3ee:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 810a3f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 810a3f6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 810a3fa:	d10f      	bne.n	810a41c <HAL_RCCEx_PeriphCLKConfig+0x720>
 810a3fc:	4b73      	ldr	r3, [pc, #460]	; (810a5cc <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 810a3fe:	691b      	ldr	r3, [r3, #16]
 810a400:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 810a404:	687b      	ldr	r3, [r7, #4]
 810a406:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 810a40a:	091b      	lsrs	r3, r3, #4
 810a40c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 810a410:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 810a414:	496d      	ldr	r1, [pc, #436]	; (810a5cc <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 810a416:	4313      	orrs	r3, r2
 810a418:	610b      	str	r3, [r1, #16]
 810a41a:	e005      	b.n	810a428 <HAL_RCCEx_PeriphCLKConfig+0x72c>
 810a41c:	4b6b      	ldr	r3, [pc, #428]	; (810a5cc <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 810a41e:	691b      	ldr	r3, [r3, #16]
 810a420:	4a6a      	ldr	r2, [pc, #424]	; (810a5cc <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 810a422:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 810a426:	6113      	str	r3, [r2, #16]
 810a428:	4b68      	ldr	r3, [pc, #416]	; (810a5cc <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 810a42a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 810a42c:	687b      	ldr	r3, [r7, #4]
 810a42e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 810a432:	f3c3 030b 	ubfx	r3, r3, #0, #12
 810a436:	4965      	ldr	r1, [pc, #404]	; (810a5cc <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 810a438:	4313      	orrs	r3, r2
 810a43a:	670b      	str	r3, [r1, #112]	; 0x70
 810a43c:	e004      	b.n	810a448 <HAL_RCCEx_PeriphCLKConfig+0x74c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 810a43e:	7dfb      	ldrb	r3, [r7, #23]
 810a440:	75bb      	strb	r3, [r7, #22]
 810a442:	e001      	b.n	810a448 <HAL_RCCEx_PeriphCLKConfig+0x74c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 810a444:	7dfb      	ldrb	r3, [r7, #23]
 810a446:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 810a448:	687b      	ldr	r3, [r7, #4]
 810a44a:	681b      	ldr	r3, [r3, #0]
 810a44c:	f003 0301 	and.w	r3, r3, #1
 810a450:	2b00      	cmp	r3, #0
 810a452:	d07e      	beq.n	810a552 <HAL_RCCEx_PeriphCLKConfig+0x856>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 810a454:	687b      	ldr	r3, [r7, #4]
 810a456:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810a458:	2b28      	cmp	r3, #40	; 0x28
 810a45a:	d867      	bhi.n	810a52c <HAL_RCCEx_PeriphCLKConfig+0x830>
 810a45c:	a201      	add	r2, pc, #4	; (adr r2, 810a464 <HAL_RCCEx_PeriphCLKConfig+0x768>)
 810a45e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810a462:	bf00      	nop
 810a464:	0810a533 	.word	0x0810a533
 810a468:	0810a52d 	.word	0x0810a52d
 810a46c:	0810a52d 	.word	0x0810a52d
 810a470:	0810a52d 	.word	0x0810a52d
 810a474:	0810a52d 	.word	0x0810a52d
 810a478:	0810a52d 	.word	0x0810a52d
 810a47c:	0810a52d 	.word	0x0810a52d
 810a480:	0810a52d 	.word	0x0810a52d
 810a484:	0810a509 	.word	0x0810a509
 810a488:	0810a52d 	.word	0x0810a52d
 810a48c:	0810a52d 	.word	0x0810a52d
 810a490:	0810a52d 	.word	0x0810a52d
 810a494:	0810a52d 	.word	0x0810a52d
 810a498:	0810a52d 	.word	0x0810a52d
 810a49c:	0810a52d 	.word	0x0810a52d
 810a4a0:	0810a52d 	.word	0x0810a52d
 810a4a4:	0810a51b 	.word	0x0810a51b
 810a4a8:	0810a52d 	.word	0x0810a52d
 810a4ac:	0810a52d 	.word	0x0810a52d
 810a4b0:	0810a52d 	.word	0x0810a52d
 810a4b4:	0810a52d 	.word	0x0810a52d
 810a4b8:	0810a52d 	.word	0x0810a52d
 810a4bc:	0810a52d 	.word	0x0810a52d
 810a4c0:	0810a52d 	.word	0x0810a52d
 810a4c4:	0810a533 	.word	0x0810a533
 810a4c8:	0810a52d 	.word	0x0810a52d
 810a4cc:	0810a52d 	.word	0x0810a52d
 810a4d0:	0810a52d 	.word	0x0810a52d
 810a4d4:	0810a52d 	.word	0x0810a52d
 810a4d8:	0810a52d 	.word	0x0810a52d
 810a4dc:	0810a52d 	.word	0x0810a52d
 810a4e0:	0810a52d 	.word	0x0810a52d
 810a4e4:	0810a533 	.word	0x0810a533
 810a4e8:	0810a52d 	.word	0x0810a52d
 810a4ec:	0810a52d 	.word	0x0810a52d
 810a4f0:	0810a52d 	.word	0x0810a52d
 810a4f4:	0810a52d 	.word	0x0810a52d
 810a4f8:	0810a52d 	.word	0x0810a52d
 810a4fc:	0810a52d 	.word	0x0810a52d
 810a500:	0810a52d 	.word	0x0810a52d
 810a504:	0810a533 	.word	0x0810a533
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 810a508:	687b      	ldr	r3, [r7, #4]
 810a50a:	3304      	adds	r3, #4
 810a50c:	2101      	movs	r1, #1
 810a50e:	4618      	mov	r0, r3
 810a510:	f001 fc16 	bl	810bd40 <RCCEx_PLL2_Config>
 810a514:	4603      	mov	r3, r0
 810a516:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 810a518:	e00c      	b.n	810a534 <HAL_RCCEx_PeriphCLKConfig+0x838>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 810a51a:	687b      	ldr	r3, [r7, #4]
 810a51c:	3324      	adds	r3, #36	; 0x24
 810a51e:	2101      	movs	r1, #1
 810a520:	4618      	mov	r0, r3
 810a522:	f001 fcbf 	bl	810bea4 <RCCEx_PLL3_Config>
 810a526:	4603      	mov	r3, r0
 810a528:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 810a52a:	e003      	b.n	810a534 <HAL_RCCEx_PeriphCLKConfig+0x838>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 810a52c:	2301      	movs	r3, #1
 810a52e:	75fb      	strb	r3, [r7, #23]
      break;
 810a530:	e000      	b.n	810a534 <HAL_RCCEx_PeriphCLKConfig+0x838>
      break;
 810a532:	bf00      	nop
    }

    if(ret == HAL_OK)
 810a534:	7dfb      	ldrb	r3, [r7, #23]
 810a536:	2b00      	cmp	r3, #0
 810a538:	d109      	bne.n	810a54e <HAL_RCCEx_PeriphCLKConfig+0x852>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 810a53a:	4b24      	ldr	r3, [pc, #144]	; (810a5cc <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 810a53c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810a53e:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 810a542:	687b      	ldr	r3, [r7, #4]
 810a544:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810a546:	4921      	ldr	r1, [pc, #132]	; (810a5cc <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 810a548:	4313      	orrs	r3, r2
 810a54a:	654b      	str	r3, [r1, #84]	; 0x54
 810a54c:	e001      	b.n	810a552 <HAL_RCCEx_PeriphCLKConfig+0x856>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810a54e:	7dfb      	ldrb	r3, [r7, #23]
 810a550:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 810a552:	687b      	ldr	r3, [r7, #4]
 810a554:	681b      	ldr	r3, [r3, #0]
 810a556:	f003 0302 	and.w	r3, r3, #2
 810a55a:	2b00      	cmp	r3, #0
 810a55c:	d03c      	beq.n	810a5d8 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 810a55e:	687b      	ldr	r3, [r7, #4]
 810a560:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 810a562:	2b05      	cmp	r3, #5
 810a564:	d820      	bhi.n	810a5a8 <HAL_RCCEx_PeriphCLKConfig+0x8ac>
 810a566:	a201      	add	r2, pc, #4	; (adr r2, 810a56c <HAL_RCCEx_PeriphCLKConfig+0x870>)
 810a568:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810a56c:	0810a5af 	.word	0x0810a5af
 810a570:	0810a585 	.word	0x0810a585
 810a574:	0810a597 	.word	0x0810a597
 810a578:	0810a5af 	.word	0x0810a5af
 810a57c:	0810a5af 	.word	0x0810a5af
 810a580:	0810a5af 	.word	0x0810a5af
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 810a584:	687b      	ldr	r3, [r7, #4]
 810a586:	3304      	adds	r3, #4
 810a588:	2101      	movs	r1, #1
 810a58a:	4618      	mov	r0, r3
 810a58c:	f001 fbd8 	bl	810bd40 <RCCEx_PLL2_Config>
 810a590:	4603      	mov	r3, r0
 810a592:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 810a594:	e00c      	b.n	810a5b0 <HAL_RCCEx_PeriphCLKConfig+0x8b4>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 810a596:	687b      	ldr	r3, [r7, #4]
 810a598:	3324      	adds	r3, #36	; 0x24
 810a59a:	2101      	movs	r1, #1
 810a59c:	4618      	mov	r0, r3
 810a59e:	f001 fc81 	bl	810bea4 <RCCEx_PLL3_Config>
 810a5a2:	4603      	mov	r3, r0
 810a5a4:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 810a5a6:	e003      	b.n	810a5b0 <HAL_RCCEx_PeriphCLKConfig+0x8b4>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 810a5a8:	2301      	movs	r3, #1
 810a5aa:	75fb      	strb	r3, [r7, #23]
      break;
 810a5ac:	e000      	b.n	810a5b0 <HAL_RCCEx_PeriphCLKConfig+0x8b4>
      break;
 810a5ae:	bf00      	nop
    }

    if(ret == HAL_OK)
 810a5b0:	7dfb      	ldrb	r3, [r7, #23]
 810a5b2:	2b00      	cmp	r3, #0
 810a5b4:	d10e      	bne.n	810a5d4 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 810a5b6:	4b05      	ldr	r3, [pc, #20]	; (810a5cc <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 810a5b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810a5ba:	f023 0207 	bic.w	r2, r3, #7
 810a5be:	687b      	ldr	r3, [r7, #4]
 810a5c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 810a5c2:	4902      	ldr	r1, [pc, #8]	; (810a5cc <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 810a5c4:	4313      	orrs	r3, r2
 810a5c6:	654b      	str	r3, [r1, #84]	; 0x54
 810a5c8:	e006      	b.n	810a5d8 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 810a5ca:	bf00      	nop
 810a5cc:	58024400 	.word	0x58024400
 810a5d0:	58024800 	.word	0x58024800
    }
    else
    {
      /* set overall return value */
      status = ret;
 810a5d4:	7dfb      	ldrb	r3, [r7, #23]
 810a5d6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 810a5d8:	687b      	ldr	r3, [r7, #4]
 810a5da:	681b      	ldr	r3, [r3, #0]
 810a5dc:	f003 0304 	and.w	r3, r3, #4
 810a5e0:	2b00      	cmp	r3, #0
 810a5e2:	d039      	beq.n	810a658 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 810a5e4:	687b      	ldr	r3, [r7, #4]
 810a5e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 810a5ea:	2b05      	cmp	r3, #5
 810a5ec:	d820      	bhi.n	810a630 <HAL_RCCEx_PeriphCLKConfig+0x934>
 810a5ee:	a201      	add	r2, pc, #4	; (adr r2, 810a5f4 <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 810a5f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810a5f4:	0810a637 	.word	0x0810a637
 810a5f8:	0810a60d 	.word	0x0810a60d
 810a5fc:	0810a61f 	.word	0x0810a61f
 810a600:	0810a637 	.word	0x0810a637
 810a604:	0810a637 	.word	0x0810a637
 810a608:	0810a637 	.word	0x0810a637
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 810a60c:	687b      	ldr	r3, [r7, #4]
 810a60e:	3304      	adds	r3, #4
 810a610:	2101      	movs	r1, #1
 810a612:	4618      	mov	r0, r3
 810a614:	f001 fb94 	bl	810bd40 <RCCEx_PLL2_Config>
 810a618:	4603      	mov	r3, r0
 810a61a:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 810a61c:	e00c      	b.n	810a638 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 810a61e:	687b      	ldr	r3, [r7, #4]
 810a620:	3324      	adds	r3, #36	; 0x24
 810a622:	2101      	movs	r1, #1
 810a624:	4618      	mov	r0, r3
 810a626:	f001 fc3d 	bl	810bea4 <RCCEx_PLL3_Config>
 810a62a:	4603      	mov	r3, r0
 810a62c:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 810a62e:	e003      	b.n	810a638 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 810a630:	2301      	movs	r3, #1
 810a632:	75fb      	strb	r3, [r7, #23]
      break;
 810a634:	e000      	b.n	810a638 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 810a636:	bf00      	nop
    }

    if(ret == HAL_OK)
 810a638:	7dfb      	ldrb	r3, [r7, #23]
 810a63a:	2b00      	cmp	r3, #0
 810a63c:	d10a      	bne.n	810a654 <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 810a63e:	4bb7      	ldr	r3, [pc, #732]	; (810a91c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 810a640:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810a642:	f023 0207 	bic.w	r2, r3, #7
 810a646:	687b      	ldr	r3, [r7, #4]
 810a648:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 810a64c:	49b3      	ldr	r1, [pc, #716]	; (810a91c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 810a64e:	4313      	orrs	r3, r2
 810a650:	658b      	str	r3, [r1, #88]	; 0x58
 810a652:	e001      	b.n	810a658 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810a654:	7dfb      	ldrb	r3, [r7, #23]
 810a656:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 810a658:	687b      	ldr	r3, [r7, #4]
 810a65a:	681b      	ldr	r3, [r3, #0]
 810a65c:	f003 0320 	and.w	r3, r3, #32
 810a660:	2b00      	cmp	r3, #0
 810a662:	d04b      	beq.n	810a6fc <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 810a664:	687b      	ldr	r3, [r7, #4]
 810a666:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 810a66a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 810a66e:	d02e      	beq.n	810a6ce <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 810a670:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 810a674:	d828      	bhi.n	810a6c8 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 810a676:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 810a67a:	d02a      	beq.n	810a6d2 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 810a67c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 810a680:	d822      	bhi.n	810a6c8 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 810a682:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 810a686:	d026      	beq.n	810a6d6 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 810a688:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 810a68c:	d81c      	bhi.n	810a6c8 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 810a68e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 810a692:	d010      	beq.n	810a6b6 <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 810a694:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 810a698:	d816      	bhi.n	810a6c8 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 810a69a:	2b00      	cmp	r3, #0
 810a69c:	d01d      	beq.n	810a6da <HAL_RCCEx_PeriphCLKConfig+0x9de>
 810a69e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 810a6a2:	d111      	bne.n	810a6c8 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 810a6a4:	687b      	ldr	r3, [r7, #4]
 810a6a6:	3304      	adds	r3, #4
 810a6a8:	2100      	movs	r1, #0
 810a6aa:	4618      	mov	r0, r3
 810a6ac:	f001 fb48 	bl	810bd40 <RCCEx_PLL2_Config>
 810a6b0:	4603      	mov	r3, r0
 810a6b2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 810a6b4:	e012      	b.n	810a6dc <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 810a6b6:	687b      	ldr	r3, [r7, #4]
 810a6b8:	3324      	adds	r3, #36	; 0x24
 810a6ba:	2102      	movs	r1, #2
 810a6bc:	4618      	mov	r0, r3
 810a6be:	f001 fbf1 	bl	810bea4 <RCCEx_PLL3_Config>
 810a6c2:	4603      	mov	r3, r0
 810a6c4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 810a6c6:	e009      	b.n	810a6dc <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 810a6c8:	2301      	movs	r3, #1
 810a6ca:	75fb      	strb	r3, [r7, #23]
      break;
 810a6cc:	e006      	b.n	810a6dc <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 810a6ce:	bf00      	nop
 810a6d0:	e004      	b.n	810a6dc <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 810a6d2:	bf00      	nop
 810a6d4:	e002      	b.n	810a6dc <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 810a6d6:	bf00      	nop
 810a6d8:	e000      	b.n	810a6dc <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 810a6da:	bf00      	nop
    }

    if(ret == HAL_OK)
 810a6dc:	7dfb      	ldrb	r3, [r7, #23]
 810a6de:	2b00      	cmp	r3, #0
 810a6e0:	d10a      	bne.n	810a6f8 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 810a6e2:	4b8e      	ldr	r3, [pc, #568]	; (810a91c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 810a6e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810a6e6:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 810a6ea:	687b      	ldr	r3, [r7, #4]
 810a6ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 810a6f0:	498a      	ldr	r1, [pc, #552]	; (810a91c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 810a6f2:	4313      	orrs	r3, r2
 810a6f4:	654b      	str	r3, [r1, #84]	; 0x54
 810a6f6:	e001      	b.n	810a6fc <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810a6f8:	7dfb      	ldrb	r3, [r7, #23]
 810a6fa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 810a6fc:	687b      	ldr	r3, [r7, #4]
 810a6fe:	681b      	ldr	r3, [r3, #0]
 810a700:	f003 0340 	and.w	r3, r3, #64	; 0x40
 810a704:	2b00      	cmp	r3, #0
 810a706:	d04b      	beq.n	810a7a0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 810a708:	687b      	ldr	r3, [r7, #4]
 810a70a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 810a70e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 810a712:	d02e      	beq.n	810a772 <HAL_RCCEx_PeriphCLKConfig+0xa76>
 810a714:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 810a718:	d828      	bhi.n	810a76c <HAL_RCCEx_PeriphCLKConfig+0xa70>
 810a71a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 810a71e:	d02a      	beq.n	810a776 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 810a720:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 810a724:	d822      	bhi.n	810a76c <HAL_RCCEx_PeriphCLKConfig+0xa70>
 810a726:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 810a72a:	d026      	beq.n	810a77a <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 810a72c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 810a730:	d81c      	bhi.n	810a76c <HAL_RCCEx_PeriphCLKConfig+0xa70>
 810a732:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 810a736:	d010      	beq.n	810a75a <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 810a738:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 810a73c:	d816      	bhi.n	810a76c <HAL_RCCEx_PeriphCLKConfig+0xa70>
 810a73e:	2b00      	cmp	r3, #0
 810a740:	d01d      	beq.n	810a77e <HAL_RCCEx_PeriphCLKConfig+0xa82>
 810a742:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 810a746:	d111      	bne.n	810a76c <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 810a748:	687b      	ldr	r3, [r7, #4]
 810a74a:	3304      	adds	r3, #4
 810a74c:	2100      	movs	r1, #0
 810a74e:	4618      	mov	r0, r3
 810a750:	f001 faf6 	bl	810bd40 <RCCEx_PLL2_Config>
 810a754:	4603      	mov	r3, r0
 810a756:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 810a758:	e012      	b.n	810a780 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 810a75a:	687b      	ldr	r3, [r7, #4]
 810a75c:	3324      	adds	r3, #36	; 0x24
 810a75e:	2102      	movs	r1, #2
 810a760:	4618      	mov	r0, r3
 810a762:	f001 fb9f 	bl	810bea4 <RCCEx_PLL3_Config>
 810a766:	4603      	mov	r3, r0
 810a768:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 810a76a:	e009      	b.n	810a780 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 810a76c:	2301      	movs	r3, #1
 810a76e:	75fb      	strb	r3, [r7, #23]
      break;
 810a770:	e006      	b.n	810a780 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 810a772:	bf00      	nop
 810a774:	e004      	b.n	810a780 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 810a776:	bf00      	nop
 810a778:	e002      	b.n	810a780 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 810a77a:	bf00      	nop
 810a77c:	e000      	b.n	810a780 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 810a77e:	bf00      	nop
    }

    if(ret == HAL_OK)
 810a780:	7dfb      	ldrb	r3, [r7, #23]
 810a782:	2b00      	cmp	r3, #0
 810a784:	d10a      	bne.n	810a79c <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 810a786:	4b65      	ldr	r3, [pc, #404]	; (810a91c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 810a788:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810a78a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 810a78e:	687b      	ldr	r3, [r7, #4]
 810a790:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 810a794:	4961      	ldr	r1, [pc, #388]	; (810a91c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 810a796:	4313      	orrs	r3, r2
 810a798:	658b      	str	r3, [r1, #88]	; 0x58
 810a79a:	e001      	b.n	810a7a0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810a79c:	7dfb      	ldrb	r3, [r7, #23]
 810a79e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 810a7a0:	687b      	ldr	r3, [r7, #4]
 810a7a2:	681b      	ldr	r3, [r3, #0]
 810a7a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 810a7a8:	2b00      	cmp	r3, #0
 810a7aa:	d04b      	beq.n	810a844 <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 810a7ac:	687b      	ldr	r3, [r7, #4]
 810a7ae:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 810a7b2:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 810a7b6:	d02e      	beq.n	810a816 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 810a7b8:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 810a7bc:	d828      	bhi.n	810a810 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 810a7be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 810a7c2:	d02a      	beq.n	810a81a <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 810a7c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 810a7c8:	d822      	bhi.n	810a810 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 810a7ca:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 810a7ce:	d026      	beq.n	810a81e <HAL_RCCEx_PeriphCLKConfig+0xb22>
 810a7d0:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 810a7d4:	d81c      	bhi.n	810a810 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 810a7d6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 810a7da:	d010      	beq.n	810a7fe <HAL_RCCEx_PeriphCLKConfig+0xb02>
 810a7dc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 810a7e0:	d816      	bhi.n	810a810 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 810a7e2:	2b00      	cmp	r3, #0
 810a7e4:	d01d      	beq.n	810a822 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 810a7e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 810a7ea:	d111      	bne.n	810a810 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 810a7ec:	687b      	ldr	r3, [r7, #4]
 810a7ee:	3304      	adds	r3, #4
 810a7f0:	2100      	movs	r1, #0
 810a7f2:	4618      	mov	r0, r3
 810a7f4:	f001 faa4 	bl	810bd40 <RCCEx_PLL2_Config>
 810a7f8:	4603      	mov	r3, r0
 810a7fa:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 810a7fc:	e012      	b.n	810a824 <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 810a7fe:	687b      	ldr	r3, [r7, #4]
 810a800:	3324      	adds	r3, #36	; 0x24
 810a802:	2102      	movs	r1, #2
 810a804:	4618      	mov	r0, r3
 810a806:	f001 fb4d 	bl	810bea4 <RCCEx_PLL3_Config>
 810a80a:	4603      	mov	r3, r0
 810a80c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 810a80e:	e009      	b.n	810a824 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 810a810:	2301      	movs	r3, #1
 810a812:	75fb      	strb	r3, [r7, #23]
      break;
 810a814:	e006      	b.n	810a824 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 810a816:	bf00      	nop
 810a818:	e004      	b.n	810a824 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 810a81a:	bf00      	nop
 810a81c:	e002      	b.n	810a824 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 810a81e:	bf00      	nop
 810a820:	e000      	b.n	810a824 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 810a822:	bf00      	nop
    }

    if(ret == HAL_OK)
 810a824:	7dfb      	ldrb	r3, [r7, #23]
 810a826:	2b00      	cmp	r3, #0
 810a828:	d10a      	bne.n	810a840 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 810a82a:	4b3c      	ldr	r3, [pc, #240]	; (810a91c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 810a82c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810a82e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 810a832:	687b      	ldr	r3, [r7, #4]
 810a834:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 810a838:	4938      	ldr	r1, [pc, #224]	; (810a91c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 810a83a:	4313      	orrs	r3, r2
 810a83c:	658b      	str	r3, [r1, #88]	; 0x58
 810a83e:	e001      	b.n	810a844 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810a840:	7dfb      	ldrb	r3, [r7, #23]
 810a842:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 810a844:	687b      	ldr	r3, [r7, #4]
 810a846:	681b      	ldr	r3, [r3, #0]
 810a848:	f003 0308 	and.w	r3, r3, #8
 810a84c:	2b00      	cmp	r3, #0
 810a84e:	d01a      	beq.n	810a886 <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 810a850:	687b      	ldr	r3, [r7, #4]
 810a852:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 810a856:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 810a85a:	d10a      	bne.n	810a872 <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 810a85c:	687b      	ldr	r3, [r7, #4]
 810a85e:	3324      	adds	r3, #36	; 0x24
 810a860:	2102      	movs	r1, #2
 810a862:	4618      	mov	r0, r3
 810a864:	f001 fb1e 	bl	810bea4 <RCCEx_PLL3_Config>
 810a868:	4603      	mov	r3, r0
 810a86a:	2b00      	cmp	r3, #0
 810a86c:	d001      	beq.n	810a872 <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 810a86e:	2301      	movs	r3, #1
 810a870:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 810a872:	4b2a      	ldr	r3, [pc, #168]	; (810a91c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 810a874:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810a876:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 810a87a:	687b      	ldr	r3, [r7, #4]
 810a87c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 810a880:	4926      	ldr	r1, [pc, #152]	; (810a91c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 810a882:	4313      	orrs	r3, r2
 810a884:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 810a886:	687b      	ldr	r3, [r7, #4]
 810a888:	681b      	ldr	r3, [r3, #0]
 810a88a:	f003 0310 	and.w	r3, r3, #16
 810a88e:	2b00      	cmp	r3, #0
 810a890:	d01a      	beq.n	810a8c8 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 810a892:	687b      	ldr	r3, [r7, #4]
 810a894:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 810a898:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810a89c:	d10a      	bne.n	810a8b4 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 810a89e:	687b      	ldr	r3, [r7, #4]
 810a8a0:	3324      	adds	r3, #36	; 0x24
 810a8a2:	2102      	movs	r1, #2
 810a8a4:	4618      	mov	r0, r3
 810a8a6:	f001 fafd 	bl	810bea4 <RCCEx_PLL3_Config>
 810a8aa:	4603      	mov	r3, r0
 810a8ac:	2b00      	cmp	r3, #0
 810a8ae:	d001      	beq.n	810a8b4 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 810a8b0:	2301      	movs	r3, #1
 810a8b2:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 810a8b4:	4b19      	ldr	r3, [pc, #100]	; (810a91c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 810a8b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810a8b8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 810a8bc:	687b      	ldr	r3, [r7, #4]
 810a8be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 810a8c2:	4916      	ldr	r1, [pc, #88]	; (810a91c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 810a8c4:	4313      	orrs	r3, r2
 810a8c6:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 810a8c8:	687b      	ldr	r3, [r7, #4]
 810a8ca:	681b      	ldr	r3, [r3, #0]
 810a8cc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 810a8d0:	2b00      	cmp	r3, #0
 810a8d2:	d036      	beq.n	810a942 <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 810a8d4:	687b      	ldr	r3, [r7, #4]
 810a8d6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 810a8da:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 810a8de:	d01f      	beq.n	810a920 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 810a8e0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 810a8e4:	d817      	bhi.n	810a916 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 810a8e6:	2b00      	cmp	r3, #0
 810a8e8:	d003      	beq.n	810a8f2 <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 810a8ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 810a8ee:	d009      	beq.n	810a904 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 810a8f0:	e011      	b.n	810a916 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 810a8f2:	687b      	ldr	r3, [r7, #4]
 810a8f4:	3304      	adds	r3, #4
 810a8f6:	2100      	movs	r1, #0
 810a8f8:	4618      	mov	r0, r3
 810a8fa:	f001 fa21 	bl	810bd40 <RCCEx_PLL2_Config>
 810a8fe:	4603      	mov	r3, r0
 810a900:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 810a902:	e00e      	b.n	810a922 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 810a904:	687b      	ldr	r3, [r7, #4]
 810a906:	3324      	adds	r3, #36	; 0x24
 810a908:	2102      	movs	r1, #2
 810a90a:	4618      	mov	r0, r3
 810a90c:	f001 faca 	bl	810bea4 <RCCEx_PLL3_Config>
 810a910:	4603      	mov	r3, r0
 810a912:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 810a914:	e005      	b.n	810a922 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 810a916:	2301      	movs	r3, #1
 810a918:	75fb      	strb	r3, [r7, #23]
      break;
 810a91a:	e002      	b.n	810a922 <HAL_RCCEx_PeriphCLKConfig+0xc26>
 810a91c:	58024400 	.word	0x58024400
      break;
 810a920:	bf00      	nop
    }

    if(ret == HAL_OK)
 810a922:	7dfb      	ldrb	r3, [r7, #23]
 810a924:	2b00      	cmp	r3, #0
 810a926:	d10a      	bne.n	810a93e <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 810a928:	4b93      	ldr	r3, [pc, #588]	; (810ab78 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 810a92a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810a92c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 810a930:	687b      	ldr	r3, [r7, #4]
 810a932:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 810a936:	4990      	ldr	r1, [pc, #576]	; (810ab78 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 810a938:	4313      	orrs	r3, r2
 810a93a:	658b      	str	r3, [r1, #88]	; 0x58
 810a93c:	e001      	b.n	810a942 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810a93e:	7dfb      	ldrb	r3, [r7, #23]
 810a940:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 810a942:	687b      	ldr	r3, [r7, #4]
 810a944:	681b      	ldr	r3, [r3, #0]
 810a946:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 810a94a:	2b00      	cmp	r3, #0
 810a94c:	d033      	beq.n	810a9b6 <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 810a94e:	687b      	ldr	r3, [r7, #4]
 810a950:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810a954:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 810a958:	d01c      	beq.n	810a994 <HAL_RCCEx_PeriphCLKConfig+0xc98>
 810a95a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 810a95e:	d816      	bhi.n	810a98e <HAL_RCCEx_PeriphCLKConfig+0xc92>
 810a960:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 810a964:	d003      	beq.n	810a96e <HAL_RCCEx_PeriphCLKConfig+0xc72>
 810a966:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 810a96a:	d007      	beq.n	810a97c <HAL_RCCEx_PeriphCLKConfig+0xc80>
 810a96c:	e00f      	b.n	810a98e <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810a96e:	4b82      	ldr	r3, [pc, #520]	; (810ab78 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 810a970:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810a972:	4a81      	ldr	r2, [pc, #516]	; (810ab78 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 810a974:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 810a978:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 810a97a:	e00c      	b.n	810a996 <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 810a97c:	687b      	ldr	r3, [r7, #4]
 810a97e:	3324      	adds	r3, #36	; 0x24
 810a980:	2101      	movs	r1, #1
 810a982:	4618      	mov	r0, r3
 810a984:	f001 fa8e 	bl	810bea4 <RCCEx_PLL3_Config>
 810a988:	4603      	mov	r3, r0
 810a98a:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 810a98c:	e003      	b.n	810a996 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 810a98e:	2301      	movs	r3, #1
 810a990:	75fb      	strb	r3, [r7, #23]
      break;
 810a992:	e000      	b.n	810a996 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 810a994:	bf00      	nop
    }

    if(ret == HAL_OK)
 810a996:	7dfb      	ldrb	r3, [r7, #23]
 810a998:	2b00      	cmp	r3, #0
 810a99a:	d10a      	bne.n	810a9b2 <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 810a99c:	4b76      	ldr	r3, [pc, #472]	; (810ab78 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 810a99e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810a9a0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 810a9a4:	687b      	ldr	r3, [r7, #4]
 810a9a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810a9aa:	4973      	ldr	r1, [pc, #460]	; (810ab78 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 810a9ac:	4313      	orrs	r3, r2
 810a9ae:	654b      	str	r3, [r1, #84]	; 0x54
 810a9b0:	e001      	b.n	810a9b6 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810a9b2:	7dfb      	ldrb	r3, [r7, #23]
 810a9b4:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 810a9b6:	687b      	ldr	r3, [r7, #4]
 810a9b8:	681b      	ldr	r3, [r3, #0]
 810a9ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 810a9be:	2b00      	cmp	r3, #0
 810a9c0:	d029      	beq.n	810aa16 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 810a9c2:	687b      	ldr	r3, [r7, #4]
 810a9c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 810a9c6:	2b00      	cmp	r3, #0
 810a9c8:	d003      	beq.n	810a9d2 <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 810a9ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 810a9ce:	d007      	beq.n	810a9e0 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 810a9d0:	e00f      	b.n	810a9f2 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810a9d2:	4b69      	ldr	r3, [pc, #420]	; (810ab78 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 810a9d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810a9d6:	4a68      	ldr	r2, [pc, #416]	; (810ab78 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 810a9d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 810a9dc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 810a9de:	e00b      	b.n	810a9f8 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 810a9e0:	687b      	ldr	r3, [r7, #4]
 810a9e2:	3304      	adds	r3, #4
 810a9e4:	2102      	movs	r1, #2
 810a9e6:	4618      	mov	r0, r3
 810a9e8:	f001 f9aa 	bl	810bd40 <RCCEx_PLL2_Config>
 810a9ec:	4603      	mov	r3, r0
 810a9ee:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 810a9f0:	e002      	b.n	810a9f8 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 810a9f2:	2301      	movs	r3, #1
 810a9f4:	75fb      	strb	r3, [r7, #23]
      break;
 810a9f6:	bf00      	nop
    }

    if(ret == HAL_OK)
 810a9f8:	7dfb      	ldrb	r3, [r7, #23]
 810a9fa:	2b00      	cmp	r3, #0
 810a9fc:	d109      	bne.n	810aa12 <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 810a9fe:	4b5e      	ldr	r3, [pc, #376]	; (810ab78 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 810aa00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 810aa02:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 810aa06:	687b      	ldr	r3, [r7, #4]
 810aa08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 810aa0a:	495b      	ldr	r1, [pc, #364]	; (810ab78 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 810aa0c:	4313      	orrs	r3, r2
 810aa0e:	64cb      	str	r3, [r1, #76]	; 0x4c
 810aa10:	e001      	b.n	810aa16 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810aa12:	7dfb      	ldrb	r3, [r7, #23]
 810aa14:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 810aa16:	687b      	ldr	r3, [r7, #4]
 810aa18:	681b      	ldr	r3, [r3, #0]
 810aa1a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 810aa1e:	2b00      	cmp	r3, #0
 810aa20:	d00a      	beq.n	810aa38 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 810aa22:	687b      	ldr	r3, [r7, #4]
 810aa24:	3324      	adds	r3, #36	; 0x24
 810aa26:	2102      	movs	r1, #2
 810aa28:	4618      	mov	r0, r3
 810aa2a:	f001 fa3b 	bl	810bea4 <RCCEx_PLL3_Config>
 810aa2e:	4603      	mov	r3, r0
 810aa30:	2b00      	cmp	r3, #0
 810aa32:	d001      	beq.n	810aa38 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 810aa34:	2301      	movs	r3, #1
 810aa36:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 810aa38:	687b      	ldr	r3, [r7, #4]
 810aa3a:	681b      	ldr	r3, [r3, #0]
 810aa3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 810aa40:	2b00      	cmp	r3, #0
 810aa42:	d030      	beq.n	810aaa6 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 810aa44:	687b      	ldr	r3, [r7, #4]
 810aa46:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810aa48:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 810aa4c:	d017      	beq.n	810aa7e <HAL_RCCEx_PeriphCLKConfig+0xd82>
 810aa4e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 810aa52:	d811      	bhi.n	810aa78 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 810aa54:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 810aa58:	d013      	beq.n	810aa82 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 810aa5a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 810aa5e:	d80b      	bhi.n	810aa78 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 810aa60:	2b00      	cmp	r3, #0
 810aa62:	d010      	beq.n	810aa86 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 810aa64:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810aa68:	d106      	bne.n	810aa78 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810aa6a:	4b43      	ldr	r3, [pc, #268]	; (810ab78 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 810aa6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810aa6e:	4a42      	ldr	r2, [pc, #264]	; (810ab78 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 810aa70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 810aa74:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 810aa76:	e007      	b.n	810aa88 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 810aa78:	2301      	movs	r3, #1
 810aa7a:	75fb      	strb	r3, [r7, #23]
      break;
 810aa7c:	e004      	b.n	810aa88 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 810aa7e:	bf00      	nop
 810aa80:	e002      	b.n	810aa88 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 810aa82:	bf00      	nop
 810aa84:	e000      	b.n	810aa88 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 810aa86:	bf00      	nop
    }

    if(ret == HAL_OK)
 810aa88:	7dfb      	ldrb	r3, [r7, #23]
 810aa8a:	2b00      	cmp	r3, #0
 810aa8c:	d109      	bne.n	810aaa2 <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 810aa8e:	4b3a      	ldr	r3, [pc, #232]	; (810ab78 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 810aa90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810aa92:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 810aa96:	687b      	ldr	r3, [r7, #4]
 810aa98:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810aa9a:	4937      	ldr	r1, [pc, #220]	; (810ab78 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 810aa9c:	4313      	orrs	r3, r2
 810aa9e:	654b      	str	r3, [r1, #84]	; 0x54
 810aaa0:	e001      	b.n	810aaa6 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810aaa2:	7dfb      	ldrb	r3, [r7, #23]
 810aaa4:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 810aaa6:	687b      	ldr	r3, [r7, #4]
 810aaa8:	681b      	ldr	r3, [r3, #0]
 810aaaa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 810aaae:	2b00      	cmp	r3, #0
 810aab0:	d008      	beq.n	810aac4 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 810aab2:	4b31      	ldr	r3, [pc, #196]	; (810ab78 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 810aab4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810aab6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 810aaba:	687b      	ldr	r3, [r7, #4]
 810aabc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 810aabe:	492e      	ldr	r1, [pc, #184]	; (810ab78 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 810aac0:	4313      	orrs	r3, r2
 810aac2:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 810aac4:	687b      	ldr	r3, [r7, #4]
 810aac6:	681b      	ldr	r3, [r3, #0]
 810aac8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 810aacc:	2b00      	cmp	r3, #0
 810aace:	d009      	beq.n	810aae4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 810aad0:	4b29      	ldr	r3, [pc, #164]	; (810ab78 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 810aad2:	691b      	ldr	r3, [r3, #16]
 810aad4:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 810aad8:	687b      	ldr	r3, [r7, #4]
 810aada:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 810aade:	4926      	ldr	r1, [pc, #152]	; (810ab78 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 810aae0:	4313      	orrs	r3, r2
 810aae2:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 810aae4:	687b      	ldr	r3, [r7, #4]
 810aae6:	681b      	ldr	r3, [r3, #0]
 810aae8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 810aaec:	2b00      	cmp	r3, #0
 810aaee:	d008      	beq.n	810ab02 <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 810aaf0:	4b21      	ldr	r3, [pc, #132]	; (810ab78 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 810aaf2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810aaf4:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 810aaf8:	687b      	ldr	r3, [r7, #4]
 810aafa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 810aafc:	491e      	ldr	r1, [pc, #120]	; (810ab78 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 810aafe:	4313      	orrs	r3, r2
 810ab00:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 810ab02:	687b      	ldr	r3, [r7, #4]
 810ab04:	681b      	ldr	r3, [r3, #0]
 810ab06:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 810ab0a:	2b00      	cmp	r3, #0
 810ab0c:	d00d      	beq.n	810ab2a <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 810ab0e:	4b1a      	ldr	r3, [pc, #104]	; (810ab78 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 810ab10:	691b      	ldr	r3, [r3, #16]
 810ab12:	4a19      	ldr	r2, [pc, #100]	; (810ab78 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 810ab14:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 810ab18:	6113      	str	r3, [r2, #16]
 810ab1a:	4b17      	ldr	r3, [pc, #92]	; (810ab78 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 810ab1c:	691a      	ldr	r2, [r3, #16]
 810ab1e:	687b      	ldr	r3, [r7, #4]
 810ab20:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 810ab24:	4914      	ldr	r1, [pc, #80]	; (810ab78 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 810ab26:	4313      	orrs	r3, r2
 810ab28:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 810ab2a:	687b      	ldr	r3, [r7, #4]
 810ab2c:	681b      	ldr	r3, [r3, #0]
 810ab2e:	2b00      	cmp	r3, #0
 810ab30:	da08      	bge.n	810ab44 <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 810ab32:	4b11      	ldr	r3, [pc, #68]	; (810ab78 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 810ab34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 810ab36:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 810ab3a:	687b      	ldr	r3, [r7, #4]
 810ab3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810ab3e:	490e      	ldr	r1, [pc, #56]	; (810ab78 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 810ab40:	4313      	orrs	r3, r2
 810ab42:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 810ab44:	687b      	ldr	r3, [r7, #4]
 810ab46:	681b      	ldr	r3, [r3, #0]
 810ab48:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 810ab4c:	2b00      	cmp	r3, #0
 810ab4e:	d009      	beq.n	810ab64 <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 810ab50:	4b09      	ldr	r3, [pc, #36]	; (810ab78 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 810ab52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810ab54:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 810ab58:	687b      	ldr	r3, [r7, #4]
 810ab5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 810ab5e:	4906      	ldr	r1, [pc, #24]	; (810ab78 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 810ab60:	4313      	orrs	r3, r2
 810ab62:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 810ab64:	7dbb      	ldrb	r3, [r7, #22]
 810ab66:	2b00      	cmp	r3, #0
 810ab68:	d101      	bne.n	810ab6e <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 810ab6a:	2300      	movs	r3, #0
 810ab6c:	e000      	b.n	810ab70 <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 810ab6e:	2301      	movs	r3, #1
}
 810ab70:	4618      	mov	r0, r3
 810ab72:	3718      	adds	r7, #24
 810ab74:	46bd      	mov	sp, r7
 810ab76:	bd80      	pop	{r7, pc}
 810ab78:	58024400 	.word	0x58024400

0810ab7c <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 810ab7c:	b580      	push	{r7, lr}
 810ab7e:	b090      	sub	sp, #64	; 0x40
 810ab80:	af00      	add	r7, sp, #0
 810ab82:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 810ab84:	687b      	ldr	r3, [r7, #4]
 810ab86:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810ab8a:	f040 8095 	bne.w	810acb8 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 810ab8e:	4bae      	ldr	r3, [pc, #696]	; (810ae48 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 810ab90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810ab92:	f003 0307 	and.w	r3, r3, #7
 810ab96:	633b      	str	r3, [r7, #48]	; 0x30
 810ab98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810ab9a:	2b04      	cmp	r3, #4
 810ab9c:	f200 8088 	bhi.w	810acb0 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 810aba0:	a201      	add	r2, pc, #4	; (adr r2, 810aba8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c>)
 810aba2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810aba6:	bf00      	nop
 810aba8:	0810abbd 	.word	0x0810abbd
 810abac:	0810abe5 	.word	0x0810abe5
 810abb0:	0810ac0d 	.word	0x0810ac0d
 810abb4:	0810aca9 	.word	0x0810aca9
 810abb8:	0810ac35 	.word	0x0810ac35

      switch (saiclocksource)
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 810abbc:	4ba2      	ldr	r3, [pc, #648]	; (810ae48 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 810abbe:	681b      	ldr	r3, [r3, #0]
 810abc0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 810abc4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 810abc8:	d108      	bne.n	810abdc <HAL_RCCEx_GetPeriphCLKFreq+0x60>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 810abca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 810abce:	4618      	mov	r0, r3
 810abd0:	f000 ff64 	bl	810ba9c <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 810abd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810abd6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 810abd8:	f000 bc95 	b.w	810b506 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 810abdc:	2300      	movs	r3, #0
 810abde:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 810abe0:	f000 bc91 	b.w	810b506 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 810abe4:	4b98      	ldr	r3, [pc, #608]	; (810ae48 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 810abe6:	681b      	ldr	r3, [r3, #0]
 810abe8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 810abec:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 810abf0:	d108      	bne.n	810ac04 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810abf2:	f107 0318 	add.w	r3, r7, #24
 810abf6:	4618      	mov	r0, r3
 810abf8:	f000 fca8 	bl	810b54c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 810abfc:	69bb      	ldr	r3, [r7, #24]
 810abfe:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 810ac00:	f000 bc81 	b.w	810b506 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 810ac04:	2300      	movs	r3, #0
 810ac06:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 810ac08:	f000 bc7d 	b.w	810b506 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 810ac0c:	4b8e      	ldr	r3, [pc, #568]	; (810ae48 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 810ac0e:	681b      	ldr	r3, [r3, #0]
 810ac10:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 810ac14:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 810ac18:	d108      	bne.n	810ac2c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810ac1a:	f107 030c 	add.w	r3, r7, #12
 810ac1e:	4618      	mov	r0, r3
 810ac20:	f000 fde8 	bl	810b7f4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 810ac24:	68fb      	ldr	r3, [r7, #12]
 810ac26:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 810ac28:	f000 bc6d 	b.w	810b506 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 810ac2c:	2300      	movs	r3, #0
 810ac2e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 810ac30:	f000 bc69 	b.w	810b506 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 810ac34:	4b84      	ldr	r3, [pc, #528]	; (810ae48 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 810ac36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 810ac38:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 810ac3c:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 810ac3e:	4b82      	ldr	r3, [pc, #520]	; (810ae48 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 810ac40:	681b      	ldr	r3, [r3, #0]
 810ac42:	f003 0304 	and.w	r3, r3, #4
 810ac46:	2b04      	cmp	r3, #4
 810ac48:	d10c      	bne.n	810ac64 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 810ac4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 810ac4c:	2b00      	cmp	r3, #0
 810ac4e:	d109      	bne.n	810ac64 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 810ac50:	4b7d      	ldr	r3, [pc, #500]	; (810ae48 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 810ac52:	681b      	ldr	r3, [r3, #0]
 810ac54:	08db      	lsrs	r3, r3, #3
 810ac56:	f003 0303 	and.w	r3, r3, #3
 810ac5a:	4a7c      	ldr	r2, [pc, #496]	; (810ae4c <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 810ac5c:	fa22 f303 	lsr.w	r3, r2, r3
 810ac60:	63fb      	str	r3, [r7, #60]	; 0x3c
 810ac62:	e01f      	b.n	810aca4 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 810ac64:	4b78      	ldr	r3, [pc, #480]	; (810ae48 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 810ac66:	681b      	ldr	r3, [r3, #0]
 810ac68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 810ac6c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810ac70:	d106      	bne.n	810ac80 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 810ac72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 810ac74:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 810ac78:	d102      	bne.n	810ac80 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 810ac7a:	4b75      	ldr	r3, [pc, #468]	; (810ae50 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 810ac7c:	63fb      	str	r3, [r7, #60]	; 0x3c
 810ac7e:	e011      	b.n	810aca4 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 810ac80:	4b71      	ldr	r3, [pc, #452]	; (810ae48 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 810ac82:	681b      	ldr	r3, [r3, #0]
 810ac84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 810ac88:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 810ac8c:	d106      	bne.n	810ac9c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 810ac8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 810ac90:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 810ac94:	d102      	bne.n	810ac9c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 810ac96:	4b6f      	ldr	r3, [pc, #444]	; (810ae54 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 810ac98:	63fb      	str	r3, [r7, #60]	; 0x3c
 810ac9a:	e003      	b.n	810aca4 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 810ac9c:	2300      	movs	r3, #0
 810ac9e:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 810aca0:	f000 bc31 	b.w	810b506 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 810aca4:	f000 bc2f 	b.w	810b506 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 810aca8:	4b6b      	ldr	r3, [pc, #428]	; (810ae58 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 810acaa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 810acac:	f000 bc2b 	b.w	810b506 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 810acb0:	2300      	movs	r3, #0
 810acb2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 810acb4:	f000 bc27 	b.w	810b506 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 810acb8:	687b      	ldr	r3, [r7, #4]
 810acba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 810acbe:	f040 8095 	bne.w	810adec <HAL_RCCEx_GetPeriphCLKFreq+0x270>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 810acc2:	4b61      	ldr	r3, [pc, #388]	; (810ae48 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 810acc4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810acc6:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 810acca:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 810accc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810acce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810acd2:	d04d      	beq.n	810ad70 <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
 810acd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810acd6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810acda:	f200 8084 	bhi.w	810ade6 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 810acde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810ace0:	2bc0      	cmp	r3, #192	; 0xc0
 810ace2:	d07d      	beq.n	810ade0 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 810ace4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810ace6:	2bc0      	cmp	r3, #192	; 0xc0
 810ace8:	d87d      	bhi.n	810ade6 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 810acea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810acec:	2b80      	cmp	r3, #128	; 0x80
 810acee:	d02d      	beq.n	810ad4c <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 810acf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810acf2:	2b80      	cmp	r3, #128	; 0x80
 810acf4:	d877      	bhi.n	810ade6 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 810acf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810acf8:	2b00      	cmp	r3, #0
 810acfa:	d003      	beq.n	810ad04 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
 810acfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810acfe:	2b40      	cmp	r3, #64	; 0x40
 810ad00:	d012      	beq.n	810ad28 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 810ad02:	e070      	b.n	810ade6 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
      {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 810ad04:	4b50      	ldr	r3, [pc, #320]	; (810ae48 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 810ad06:	681b      	ldr	r3, [r3, #0]
 810ad08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 810ad0c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 810ad10:	d107      	bne.n	810ad22 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 810ad12:	f107 0324 	add.w	r3, r7, #36	; 0x24
 810ad16:	4618      	mov	r0, r3
 810ad18:	f000 fec0 	bl	810ba9c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 810ad1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810ad1e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 810ad20:	e3f1      	b.n	810b506 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 810ad22:	2300      	movs	r3, #0
 810ad24:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 810ad26:	e3ee      	b.n	810b506 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 810ad28:	4b47      	ldr	r3, [pc, #284]	; (810ae48 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 810ad2a:	681b      	ldr	r3, [r3, #0]
 810ad2c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 810ad30:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 810ad34:	d107      	bne.n	810ad46 <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810ad36:	f107 0318 	add.w	r3, r7, #24
 810ad3a:	4618      	mov	r0, r3
 810ad3c:	f000 fc06 	bl	810b54c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 810ad40:	69bb      	ldr	r3, [r7, #24]
 810ad42:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 810ad44:	e3df      	b.n	810b506 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 810ad46:	2300      	movs	r3, #0
 810ad48:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 810ad4a:	e3dc      	b.n	810b506 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 810ad4c:	4b3e      	ldr	r3, [pc, #248]	; (810ae48 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 810ad4e:	681b      	ldr	r3, [r3, #0]
 810ad50:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 810ad54:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 810ad58:	d107      	bne.n	810ad6a <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810ad5a:	f107 030c 	add.w	r3, r7, #12
 810ad5e:	4618      	mov	r0, r3
 810ad60:	f000 fd48 	bl	810b7f4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 810ad64:	68fb      	ldr	r3, [r7, #12]
 810ad66:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 810ad68:	e3cd      	b.n	810b506 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 810ad6a:	2300      	movs	r3, #0
 810ad6c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 810ad6e:	e3ca      	b.n	810b506 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 810ad70:	4b35      	ldr	r3, [pc, #212]	; (810ae48 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 810ad72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 810ad74:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 810ad78:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 810ad7a:	4b33      	ldr	r3, [pc, #204]	; (810ae48 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 810ad7c:	681b      	ldr	r3, [r3, #0]
 810ad7e:	f003 0304 	and.w	r3, r3, #4
 810ad82:	2b04      	cmp	r3, #4
 810ad84:	d10c      	bne.n	810ada0 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
 810ad86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 810ad88:	2b00      	cmp	r3, #0
 810ad8a:	d109      	bne.n	810ada0 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 810ad8c:	4b2e      	ldr	r3, [pc, #184]	; (810ae48 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 810ad8e:	681b      	ldr	r3, [r3, #0]
 810ad90:	08db      	lsrs	r3, r3, #3
 810ad92:	f003 0303 	and.w	r3, r3, #3
 810ad96:	4a2d      	ldr	r2, [pc, #180]	; (810ae4c <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 810ad98:	fa22 f303 	lsr.w	r3, r2, r3
 810ad9c:	63fb      	str	r3, [r7, #60]	; 0x3c
 810ad9e:	e01e      	b.n	810adde <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 810ada0:	4b29      	ldr	r3, [pc, #164]	; (810ae48 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 810ada2:	681b      	ldr	r3, [r3, #0]
 810ada4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 810ada8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810adac:	d106      	bne.n	810adbc <HAL_RCCEx_GetPeriphCLKFreq+0x240>
 810adae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 810adb0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 810adb4:	d102      	bne.n	810adbc <HAL_RCCEx_GetPeriphCLKFreq+0x240>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 810adb6:	4b26      	ldr	r3, [pc, #152]	; (810ae50 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 810adb8:	63fb      	str	r3, [r7, #60]	; 0x3c
 810adba:	e010      	b.n	810adde <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 810adbc:	4b22      	ldr	r3, [pc, #136]	; (810ae48 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 810adbe:	681b      	ldr	r3, [r3, #0]
 810adc0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 810adc4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 810adc8:	d106      	bne.n	810add8 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
 810adca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 810adcc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 810add0:	d102      	bne.n	810add8 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 810add2:	4b20      	ldr	r3, [pc, #128]	; (810ae54 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 810add4:	63fb      	str	r3, [r7, #60]	; 0x3c
 810add6:	e002      	b.n	810adde <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 810add8:	2300      	movs	r3, #0
 810adda:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 810addc:	e393      	b.n	810b506 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 810adde:	e392      	b.n	810b506 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 810ade0:	4b1d      	ldr	r3, [pc, #116]	; (810ae58 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 810ade2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 810ade4:	e38f      	b.n	810b506 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 810ade6:	2300      	movs	r3, #0
 810ade8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 810adea:	e38c      	b.n	810b506 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 810adec:	687b      	ldr	r3, [r7, #4]
 810adee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 810adf2:	f040 80a7 	bne.w	810af44 <HAL_RCCEx_GetPeriphCLKFreq+0x3c8>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 810adf6:	4b14      	ldr	r3, [pc, #80]	; (810ae48 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 810adf8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810adfa:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 810adfe:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 810ae00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810ae02:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 810ae06:	d05f      	beq.n	810aec8 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 810ae08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810ae0a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 810ae0e:	f200 8096 	bhi.w	810af3e <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 810ae12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810ae14:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 810ae18:	f000 808e 	beq.w	810af38 <HAL_RCCEx_GetPeriphCLKFreq+0x3bc>
 810ae1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810ae1e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 810ae22:	f200 808c 	bhi.w	810af3e <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 810ae26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810ae28:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 810ae2c:	d03a      	beq.n	810aea4 <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 810ae2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810ae30:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 810ae34:	f200 8083 	bhi.w	810af3e <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 810ae38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810ae3a:	2b00      	cmp	r3, #0
 810ae3c:	d00e      	beq.n	810ae5c <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>
 810ae3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810ae40:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 810ae44:	d01c      	beq.n	810ae80 <HAL_RCCEx_GetPeriphCLKFreq+0x304>
 810ae46:	e07a      	b.n	810af3e <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 810ae48:	58024400 	.word	0x58024400
 810ae4c:	03d09000 	.word	0x03d09000
 810ae50:	003d0900 	.word	0x003d0900
 810ae54:	00f42400 	.word	0x00f42400
 810ae58:	00bb8000 	.word	0x00bb8000
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 810ae5c:	4baa      	ldr	r3, [pc, #680]	; (810b108 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 810ae5e:	681b      	ldr	r3, [r3, #0]
 810ae60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 810ae64:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 810ae68:	d107      	bne.n	810ae7a <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 810ae6a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 810ae6e:	4618      	mov	r0, r3
 810ae70:	f000 fe14 	bl	810ba9c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 810ae74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810ae76:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 810ae78:	e345      	b.n	810b506 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 810ae7a:	2300      	movs	r3, #0
 810ae7c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 810ae7e:	e342      	b.n	810b506 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 810ae80:	4ba1      	ldr	r3, [pc, #644]	; (810b108 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 810ae82:	681b      	ldr	r3, [r3, #0]
 810ae84:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 810ae88:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 810ae8c:	d107      	bne.n	810ae9e <HAL_RCCEx_GetPeriphCLKFreq+0x322>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810ae8e:	f107 0318 	add.w	r3, r7, #24
 810ae92:	4618      	mov	r0, r3
 810ae94:	f000 fb5a 	bl	810b54c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 810ae98:	69bb      	ldr	r3, [r7, #24]
 810ae9a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 810ae9c:	e333      	b.n	810b506 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 810ae9e:	2300      	movs	r3, #0
 810aea0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 810aea2:	e330      	b.n	810b506 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 810aea4:	4b98      	ldr	r3, [pc, #608]	; (810b108 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 810aea6:	681b      	ldr	r3, [r3, #0]
 810aea8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 810aeac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 810aeb0:	d107      	bne.n	810aec2 <HAL_RCCEx_GetPeriphCLKFreq+0x346>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810aeb2:	f107 030c 	add.w	r3, r7, #12
 810aeb6:	4618      	mov	r0, r3
 810aeb8:	f000 fc9c 	bl	810b7f4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 810aebc:	68fb      	ldr	r3, [r7, #12]
 810aebe:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 810aec0:	e321      	b.n	810b506 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 810aec2:	2300      	movs	r3, #0
 810aec4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 810aec6:	e31e      	b.n	810b506 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 810aec8:	4b8f      	ldr	r3, [pc, #572]	; (810b108 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 810aeca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 810aecc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 810aed0:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 810aed2:	4b8d      	ldr	r3, [pc, #564]	; (810b108 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 810aed4:	681b      	ldr	r3, [r3, #0]
 810aed6:	f003 0304 	and.w	r3, r3, #4
 810aeda:	2b04      	cmp	r3, #4
 810aedc:	d10c      	bne.n	810aef8 <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
 810aede:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 810aee0:	2b00      	cmp	r3, #0
 810aee2:	d109      	bne.n	810aef8 <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 810aee4:	4b88      	ldr	r3, [pc, #544]	; (810b108 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 810aee6:	681b      	ldr	r3, [r3, #0]
 810aee8:	08db      	lsrs	r3, r3, #3
 810aeea:	f003 0303 	and.w	r3, r3, #3
 810aeee:	4a87      	ldr	r2, [pc, #540]	; (810b10c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 810aef0:	fa22 f303 	lsr.w	r3, r2, r3
 810aef4:	63fb      	str	r3, [r7, #60]	; 0x3c
 810aef6:	e01e      	b.n	810af36 <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 810aef8:	4b83      	ldr	r3, [pc, #524]	; (810b108 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 810aefa:	681b      	ldr	r3, [r3, #0]
 810aefc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 810af00:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810af04:	d106      	bne.n	810af14 <HAL_RCCEx_GetPeriphCLKFreq+0x398>
 810af06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 810af08:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 810af0c:	d102      	bne.n	810af14 <HAL_RCCEx_GetPeriphCLKFreq+0x398>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 810af0e:	4b80      	ldr	r3, [pc, #512]	; (810b110 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 810af10:	63fb      	str	r3, [r7, #60]	; 0x3c
 810af12:	e010      	b.n	810af36 <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 810af14:	4b7c      	ldr	r3, [pc, #496]	; (810b108 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 810af16:	681b      	ldr	r3, [r3, #0]
 810af18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 810af1c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 810af20:	d106      	bne.n	810af30 <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>
 810af22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 810af24:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 810af28:	d102      	bne.n	810af30 <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 810af2a:	4b7a      	ldr	r3, [pc, #488]	; (810b114 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 810af2c:	63fb      	str	r3, [r7, #60]	; 0x3c
 810af2e:	e002      	b.n	810af36 <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 810af30:	2300      	movs	r3, #0
 810af32:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 810af34:	e2e7      	b.n	810b506 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 810af36:	e2e6      	b.n	810b506 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 810af38:	4b77      	ldr	r3, [pc, #476]	; (810b118 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 810af3a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 810af3c:	e2e3      	b.n	810b506 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 810af3e:	2300      	movs	r3, #0
 810af40:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 810af42:	e2e0      	b.n	810b506 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 810af44:	687b      	ldr	r3, [r7, #4]
 810af46:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 810af4a:	f040 809c 	bne.w	810b086 <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 810af4e:	4b6e      	ldr	r3, [pc, #440]	; (810b108 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 810af50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810af52:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 810af56:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 810af58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810af5a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 810af5e:	d054      	beq.n	810b00a <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
 810af60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810af62:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 810af66:	f200 808b 	bhi.w	810b080 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 810af6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810af6c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 810af70:	f000 8083 	beq.w	810b07a <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
 810af74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810af76:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 810af7a:	f200 8081 	bhi.w	810b080 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 810af7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810af80:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 810af84:	d02f      	beq.n	810afe6 <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 810af86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810af88:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 810af8c:	d878      	bhi.n	810b080 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 810af8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810af90:	2b00      	cmp	r3, #0
 810af92:	d004      	beq.n	810af9e <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 810af94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810af96:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 810af9a:	d012      	beq.n	810afc2 <HAL_RCCEx_GetPeriphCLKFreq+0x446>
 810af9c:	e070      	b.n	810b080 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 810af9e:	4b5a      	ldr	r3, [pc, #360]	; (810b108 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 810afa0:	681b      	ldr	r3, [r3, #0]
 810afa2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 810afa6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 810afaa:	d107      	bne.n	810afbc <HAL_RCCEx_GetPeriphCLKFreq+0x440>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 810afac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 810afb0:	4618      	mov	r0, r3
 810afb2:	f000 fd73 	bl	810ba9c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 810afb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810afb8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 810afba:	e2a4      	b.n	810b506 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 810afbc:	2300      	movs	r3, #0
 810afbe:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 810afc0:	e2a1      	b.n	810b506 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 810afc2:	4b51      	ldr	r3, [pc, #324]	; (810b108 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 810afc4:	681b      	ldr	r3, [r3, #0]
 810afc6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 810afca:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 810afce:	d107      	bne.n	810afe0 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810afd0:	f107 0318 	add.w	r3, r7, #24
 810afd4:	4618      	mov	r0, r3
 810afd6:	f000 fab9 	bl	810b54c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 810afda:	69bb      	ldr	r3, [r7, #24]
 810afdc:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 810afde:	e292      	b.n	810b506 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 810afe0:	2300      	movs	r3, #0
 810afe2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 810afe4:	e28f      	b.n	810b506 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 810afe6:	4b48      	ldr	r3, [pc, #288]	; (810b108 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 810afe8:	681b      	ldr	r3, [r3, #0]
 810afea:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 810afee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 810aff2:	d107      	bne.n	810b004 <HAL_RCCEx_GetPeriphCLKFreq+0x488>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810aff4:	f107 030c 	add.w	r3, r7, #12
 810aff8:	4618      	mov	r0, r3
 810affa:	f000 fbfb 	bl	810b7f4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 810affe:	68fb      	ldr	r3, [r7, #12]
 810b000:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 810b002:	e280      	b.n	810b506 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 810b004:	2300      	movs	r3, #0
 810b006:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 810b008:	e27d      	b.n	810b506 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 810b00a:	4b3f      	ldr	r3, [pc, #252]	; (810b108 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 810b00c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 810b00e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 810b012:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 810b014:	4b3c      	ldr	r3, [pc, #240]	; (810b108 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 810b016:	681b      	ldr	r3, [r3, #0]
 810b018:	f003 0304 	and.w	r3, r3, #4
 810b01c:	2b04      	cmp	r3, #4
 810b01e:	d10c      	bne.n	810b03a <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 810b020:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 810b022:	2b00      	cmp	r3, #0
 810b024:	d109      	bne.n	810b03a <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 810b026:	4b38      	ldr	r3, [pc, #224]	; (810b108 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 810b028:	681b      	ldr	r3, [r3, #0]
 810b02a:	08db      	lsrs	r3, r3, #3
 810b02c:	f003 0303 	and.w	r3, r3, #3
 810b030:	4a36      	ldr	r2, [pc, #216]	; (810b10c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 810b032:	fa22 f303 	lsr.w	r3, r2, r3
 810b036:	63fb      	str	r3, [r7, #60]	; 0x3c
 810b038:	e01e      	b.n	810b078 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 810b03a:	4b33      	ldr	r3, [pc, #204]	; (810b108 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 810b03c:	681b      	ldr	r3, [r3, #0]
 810b03e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 810b042:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810b046:	d106      	bne.n	810b056 <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
 810b048:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 810b04a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 810b04e:	d102      	bne.n	810b056 <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 810b050:	4b2f      	ldr	r3, [pc, #188]	; (810b110 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 810b052:	63fb      	str	r3, [r7, #60]	; 0x3c
 810b054:	e010      	b.n	810b078 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 810b056:	4b2c      	ldr	r3, [pc, #176]	; (810b108 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 810b058:	681b      	ldr	r3, [r3, #0]
 810b05a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 810b05e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 810b062:	d106      	bne.n	810b072 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 810b064:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 810b066:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 810b06a:	d102      	bne.n	810b072 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 810b06c:	4b29      	ldr	r3, [pc, #164]	; (810b114 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 810b06e:	63fb      	str	r3, [r7, #60]	; 0x3c
 810b070:	e002      	b.n	810b078 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 810b072:	2300      	movs	r3, #0
 810b074:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 810b076:	e246      	b.n	810b506 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 810b078:	e245      	b.n	810b506 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 810b07a:	4b27      	ldr	r3, [pc, #156]	; (810b118 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 810b07c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 810b07e:	e242      	b.n	810b506 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 810b080:	2300      	movs	r3, #0
 810b082:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 810b084:	e23f      	b.n	810b506 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 810b086:	687b      	ldr	r3, [r7, #4]
 810b088:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 810b08c:	f040 80a8 	bne.w	810b1e0 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 810b090:	4b1d      	ldr	r3, [pc, #116]	; (810b108 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 810b092:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810b094:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 810b098:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 810b09a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810b09c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 810b0a0:	d060      	beq.n	810b164 <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
 810b0a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810b0a4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 810b0a8:	f200 8097 	bhi.w	810b1da <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 810b0ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810b0ae:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 810b0b2:	f000 808f 	beq.w	810b1d4 <HAL_RCCEx_GetPeriphCLKFreq+0x658>
 810b0b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810b0b8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 810b0bc:	f200 808d 	bhi.w	810b1da <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 810b0c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810b0c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 810b0c6:	d03b      	beq.n	810b140 <HAL_RCCEx_GetPeriphCLKFreq+0x5c4>
 810b0c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810b0ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 810b0ce:	f200 8084 	bhi.w	810b1da <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 810b0d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810b0d4:	2b00      	cmp	r3, #0
 810b0d6:	d004      	beq.n	810b0e2 <HAL_RCCEx_GetPeriphCLKFreq+0x566>
 810b0d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810b0da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 810b0de:	d01d      	beq.n	810b11c <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>
 810b0e0:	e07b      	b.n	810b1da <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 810b0e2:	4b09      	ldr	r3, [pc, #36]	; (810b108 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 810b0e4:	681b      	ldr	r3, [r3, #0]
 810b0e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 810b0ea:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 810b0ee:	d107      	bne.n	810b100 <HAL_RCCEx_GetPeriphCLKFreq+0x584>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 810b0f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 810b0f4:	4618      	mov	r0, r3
 810b0f6:	f000 fcd1 	bl	810ba9c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 810b0fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810b0fc:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 810b0fe:	e202      	b.n	810b506 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 810b100:	2300      	movs	r3, #0
 810b102:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 810b104:	e1ff      	b.n	810b506 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 810b106:	bf00      	nop
 810b108:	58024400 	.word	0x58024400
 810b10c:	03d09000 	.word	0x03d09000
 810b110:	003d0900 	.word	0x003d0900
 810b114:	00f42400 	.word	0x00f42400
 810b118:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 810b11c:	4ba3      	ldr	r3, [pc, #652]	; (810b3ac <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 810b11e:	681b      	ldr	r3, [r3, #0]
 810b120:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 810b124:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 810b128:	d107      	bne.n	810b13a <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810b12a:	f107 0318 	add.w	r3, r7, #24
 810b12e:	4618      	mov	r0, r3
 810b130:	f000 fa0c 	bl	810b54c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 810b134:	69bb      	ldr	r3, [r7, #24]
 810b136:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 810b138:	e1e5      	b.n	810b506 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 810b13a:	2300      	movs	r3, #0
 810b13c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 810b13e:	e1e2      	b.n	810b506 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 810b140:	4b9a      	ldr	r3, [pc, #616]	; (810b3ac <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 810b142:	681b      	ldr	r3, [r3, #0]
 810b144:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 810b148:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 810b14c:	d107      	bne.n	810b15e <HAL_RCCEx_GetPeriphCLKFreq+0x5e2>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810b14e:	f107 030c 	add.w	r3, r7, #12
 810b152:	4618      	mov	r0, r3
 810b154:	f000 fb4e 	bl	810b7f4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 810b158:	68fb      	ldr	r3, [r7, #12]
 810b15a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 810b15c:	e1d3      	b.n	810b506 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 810b15e:	2300      	movs	r3, #0
 810b160:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 810b162:	e1d0      	b.n	810b506 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 810b164:	4b91      	ldr	r3, [pc, #580]	; (810b3ac <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 810b166:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 810b168:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 810b16c:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 810b16e:	4b8f      	ldr	r3, [pc, #572]	; (810b3ac <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 810b170:	681b      	ldr	r3, [r3, #0]
 810b172:	f003 0304 	and.w	r3, r3, #4
 810b176:	2b04      	cmp	r3, #4
 810b178:	d10c      	bne.n	810b194 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
 810b17a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 810b17c:	2b00      	cmp	r3, #0
 810b17e:	d109      	bne.n	810b194 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 810b180:	4b8a      	ldr	r3, [pc, #552]	; (810b3ac <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 810b182:	681b      	ldr	r3, [r3, #0]
 810b184:	08db      	lsrs	r3, r3, #3
 810b186:	f003 0303 	and.w	r3, r3, #3
 810b18a:	4a89      	ldr	r2, [pc, #548]	; (810b3b0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 810b18c:	fa22 f303 	lsr.w	r3, r2, r3
 810b190:	63fb      	str	r3, [r7, #60]	; 0x3c
 810b192:	e01e      	b.n	810b1d2 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 810b194:	4b85      	ldr	r3, [pc, #532]	; (810b3ac <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 810b196:	681b      	ldr	r3, [r3, #0]
 810b198:	f403 7380 	and.w	r3, r3, #256	; 0x100
 810b19c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810b1a0:	d106      	bne.n	810b1b0 <HAL_RCCEx_GetPeriphCLKFreq+0x634>
 810b1a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 810b1a4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 810b1a8:	d102      	bne.n	810b1b0 <HAL_RCCEx_GetPeriphCLKFreq+0x634>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 810b1aa:	4b82      	ldr	r3, [pc, #520]	; (810b3b4 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 810b1ac:	63fb      	str	r3, [r7, #60]	; 0x3c
 810b1ae:	e010      	b.n	810b1d2 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 810b1b0:	4b7e      	ldr	r3, [pc, #504]	; (810b3ac <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 810b1b2:	681b      	ldr	r3, [r3, #0]
 810b1b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 810b1b8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 810b1bc:	d106      	bne.n	810b1cc <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 810b1be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 810b1c0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 810b1c4:	d102      	bne.n	810b1cc <HAL_RCCEx_GetPeriphCLKFreq+0x650>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 810b1c6:	4b7c      	ldr	r3, [pc, #496]	; (810b3b8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 810b1c8:	63fb      	str	r3, [r7, #60]	; 0x3c
 810b1ca:	e002      	b.n	810b1d2 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 810b1cc:	2300      	movs	r3, #0
 810b1ce:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 810b1d0:	e199      	b.n	810b506 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 810b1d2:	e198      	b.n	810b506 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 810b1d4:	4b79      	ldr	r3, [pc, #484]	; (810b3bc <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 810b1d6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 810b1d8:	e195      	b.n	810b506 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 810b1da:	2300      	movs	r3, #0
 810b1dc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 810b1de:	e192      	b.n	810b506 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 810b1e0:	687b      	ldr	r3, [r7, #4]
 810b1e2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 810b1e6:	d173      	bne.n	810b2d0 <HAL_RCCEx_GetPeriphCLKFreq+0x754>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 810b1e8:	4b70      	ldr	r3, [pc, #448]	; (810b3ac <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 810b1ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810b1ec:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 810b1f0:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 810b1f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810b1f4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 810b1f8:	d02f      	beq.n	810b25a <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
 810b1fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810b1fc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 810b200:	d863      	bhi.n	810b2ca <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
 810b202:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810b204:	2b00      	cmp	r3, #0
 810b206:	d004      	beq.n	810b212 <HAL_RCCEx_GetPeriphCLKFreq+0x696>
 810b208:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810b20a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 810b20e:	d012      	beq.n	810b236 <HAL_RCCEx_GetPeriphCLKFreq+0x6ba>
 810b210:	e05b      	b.n	810b2ca <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 810b212:	4b66      	ldr	r3, [pc, #408]	; (810b3ac <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 810b214:	681b      	ldr	r3, [r3, #0]
 810b216:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 810b21a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 810b21e:	d107      	bne.n	810b230 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810b220:	f107 0318 	add.w	r3, r7, #24
 810b224:	4618      	mov	r0, r3
 810b226:	f000 f991 	bl	810b54c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 810b22a:	69bb      	ldr	r3, [r7, #24]
 810b22c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 810b22e:	e16a      	b.n	810b506 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 810b230:	2300      	movs	r3, #0
 810b232:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 810b234:	e167      	b.n	810b506 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 810b236:	4b5d      	ldr	r3, [pc, #372]	; (810b3ac <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 810b238:	681b      	ldr	r3, [r3, #0]
 810b23a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 810b23e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 810b242:	d107      	bne.n	810b254 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810b244:	f107 030c 	add.w	r3, r7, #12
 810b248:	4618      	mov	r0, r3
 810b24a:	f000 fad3 	bl	810b7f4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 810b24e:	697b      	ldr	r3, [r7, #20]
 810b250:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 810b252:	e158      	b.n	810b506 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 810b254:	2300      	movs	r3, #0
 810b256:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 810b258:	e155      	b.n	810b506 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 810b25a:	4b54      	ldr	r3, [pc, #336]	; (810b3ac <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 810b25c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 810b25e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 810b262:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 810b264:	4b51      	ldr	r3, [pc, #324]	; (810b3ac <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 810b266:	681b      	ldr	r3, [r3, #0]
 810b268:	f003 0304 	and.w	r3, r3, #4
 810b26c:	2b04      	cmp	r3, #4
 810b26e:	d10c      	bne.n	810b28a <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
 810b270:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 810b272:	2b00      	cmp	r3, #0
 810b274:	d109      	bne.n	810b28a <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 810b276:	4b4d      	ldr	r3, [pc, #308]	; (810b3ac <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 810b278:	681b      	ldr	r3, [r3, #0]
 810b27a:	08db      	lsrs	r3, r3, #3
 810b27c:	f003 0303 	and.w	r3, r3, #3
 810b280:	4a4b      	ldr	r2, [pc, #300]	; (810b3b0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 810b282:	fa22 f303 	lsr.w	r3, r2, r3
 810b286:	63fb      	str	r3, [r7, #60]	; 0x3c
 810b288:	e01e      	b.n	810b2c8 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 810b28a:	4b48      	ldr	r3, [pc, #288]	; (810b3ac <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 810b28c:	681b      	ldr	r3, [r3, #0]
 810b28e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 810b292:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810b296:	d106      	bne.n	810b2a6 <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
 810b298:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 810b29a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 810b29e:	d102      	bne.n	810b2a6 <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 810b2a0:	4b44      	ldr	r3, [pc, #272]	; (810b3b4 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 810b2a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 810b2a4:	e010      	b.n	810b2c8 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 810b2a6:	4b41      	ldr	r3, [pc, #260]	; (810b3ac <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 810b2a8:	681b      	ldr	r3, [r3, #0]
 810b2aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 810b2ae:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 810b2b2:	d106      	bne.n	810b2c2 <HAL_RCCEx_GetPeriphCLKFreq+0x746>
 810b2b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 810b2b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 810b2ba:	d102      	bne.n	810b2c2 <HAL_RCCEx_GetPeriphCLKFreq+0x746>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 810b2bc:	4b3e      	ldr	r3, [pc, #248]	; (810b3b8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 810b2be:	63fb      	str	r3, [r7, #60]	; 0x3c
 810b2c0:	e002      	b.n	810b2c8 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 810b2c2:	2300      	movs	r3, #0
 810b2c4:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 810b2c6:	e11e      	b.n	810b506 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 810b2c8:	e11d      	b.n	810b506 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 810b2ca:	2300      	movs	r3, #0
 810b2cc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 810b2ce:	e11a      	b.n	810b506 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 810b2d0:	687b      	ldr	r3, [r7, #4]
 810b2d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 810b2d6:	d133      	bne.n	810b340 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 810b2d8:	4b34      	ldr	r3, [pc, #208]	; (810b3ac <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 810b2da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 810b2dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 810b2e0:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 810b2e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810b2e4:	2b00      	cmp	r3, #0
 810b2e6:	d004      	beq.n	810b2f2 <HAL_RCCEx_GetPeriphCLKFreq+0x776>
 810b2e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810b2ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 810b2ee:	d012      	beq.n	810b316 <HAL_RCCEx_GetPeriphCLKFreq+0x79a>
 810b2f0:	e023      	b.n	810b33a <HAL_RCCEx_GetPeriphCLKFreq+0x7be>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 810b2f2:	4b2e      	ldr	r3, [pc, #184]	; (810b3ac <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 810b2f4:	681b      	ldr	r3, [r3, #0]
 810b2f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 810b2fa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 810b2fe:	d107      	bne.n	810b310 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 810b300:	f107 0324 	add.w	r3, r7, #36	; 0x24
 810b304:	4618      	mov	r0, r3
 810b306:	f000 fbc9 	bl	810ba9c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 810b30a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810b30c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 810b30e:	e0fa      	b.n	810b506 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 810b310:	2300      	movs	r3, #0
 810b312:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 810b314:	e0f7      	b.n	810b506 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 810b316:	4b25      	ldr	r3, [pc, #148]	; (810b3ac <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 810b318:	681b      	ldr	r3, [r3, #0]
 810b31a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 810b31e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 810b322:	d107      	bne.n	810b334 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810b324:	f107 0318 	add.w	r3, r7, #24
 810b328:	4618      	mov	r0, r3
 810b32a:	f000 f90f 	bl	810b54c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 810b32e:	6a3b      	ldr	r3, [r7, #32]
 810b330:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 810b332:	e0e8      	b.n	810b506 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 810b334:	2300      	movs	r3, #0
 810b336:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 810b338:	e0e5      	b.n	810b506 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 810b33a:	2300      	movs	r3, #0
 810b33c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 810b33e:	e0e2      	b.n	810b506 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 810b340:	687b      	ldr	r3, [r7, #4]
 810b342:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 810b346:	f040 808f 	bne.w	810b468 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 810b34a:	4b18      	ldr	r3, [pc, #96]	; (810b3ac <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 810b34c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810b34e:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 810b352:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 810b354:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810b356:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 810b35a:	d075      	beq.n	810b448 <HAL_RCCEx_GetPeriphCLKFreq+0x8cc>
 810b35c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810b35e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 810b362:	d87e      	bhi.n	810b462 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 810b364:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810b366:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 810b36a:	d060      	beq.n	810b42e <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
 810b36c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810b36e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 810b372:	d876      	bhi.n	810b462 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 810b374:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810b376:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 810b37a:	d045      	beq.n	810b408 <HAL_RCCEx_GetPeriphCLKFreq+0x88c>
 810b37c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810b37e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 810b382:	d86e      	bhi.n	810b462 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 810b384:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810b386:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 810b38a:	d02b      	beq.n	810b3e4 <HAL_RCCEx_GetPeriphCLKFreq+0x868>
 810b38c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810b38e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 810b392:	d866      	bhi.n	810b462 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 810b394:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810b396:	2b00      	cmp	r3, #0
 810b398:	d004      	beq.n	810b3a4 <HAL_RCCEx_GetPeriphCLKFreq+0x828>
 810b39a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810b39c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 810b3a0:	d00e      	beq.n	810b3c0 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 810b3a2:	e05e      	b.n	810b462 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 810b3a4:	f000 f8bc 	bl	810b520 <HAL_RCCEx_GetD3PCLK1Freq>
 810b3a8:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 810b3aa:	e0ac      	b.n	810b506 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 810b3ac:	58024400 	.word	0x58024400
 810b3b0:	03d09000 	.word	0x03d09000
 810b3b4:	003d0900 	.word	0x003d0900
 810b3b8:	00f42400 	.word	0x00f42400
 810b3bc:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 810b3c0:	4b53      	ldr	r3, [pc, #332]	; (810b510 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 810b3c2:	681b      	ldr	r3, [r3, #0]
 810b3c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 810b3c8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 810b3cc:	d107      	bne.n	810b3de <HAL_RCCEx_GetPeriphCLKFreq+0x862>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810b3ce:	f107 0318 	add.w	r3, r7, #24
 810b3d2:	4618      	mov	r0, r3
 810b3d4:	f000 f8ba 	bl	810b54c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 810b3d8:	69fb      	ldr	r3, [r7, #28]
 810b3da:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 810b3dc:	e093      	b.n	810b506 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 810b3de:	2300      	movs	r3, #0
 810b3e0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 810b3e2:	e090      	b.n	810b506 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 810b3e4:	4b4a      	ldr	r3, [pc, #296]	; (810b510 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 810b3e6:	681b      	ldr	r3, [r3, #0]
 810b3e8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 810b3ec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 810b3f0:	d107      	bne.n	810b402 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810b3f2:	f107 030c 	add.w	r3, r7, #12
 810b3f6:	4618      	mov	r0, r3
 810b3f8:	f000 f9fc 	bl	810b7f4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 810b3fc:	693b      	ldr	r3, [r7, #16]
 810b3fe:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 810b400:	e081      	b.n	810b506 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 810b402:	2300      	movs	r3, #0
 810b404:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 810b406:	e07e      	b.n	810b506 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 810b408:	4b41      	ldr	r3, [pc, #260]	; (810b510 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 810b40a:	681b      	ldr	r3, [r3, #0]
 810b40c:	f003 0304 	and.w	r3, r3, #4
 810b410:	2b04      	cmp	r3, #4
 810b412:	d109      	bne.n	810b428 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 810b414:	4b3e      	ldr	r3, [pc, #248]	; (810b510 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 810b416:	681b      	ldr	r3, [r3, #0]
 810b418:	08db      	lsrs	r3, r3, #3
 810b41a:	f003 0303 	and.w	r3, r3, #3
 810b41e:	4a3d      	ldr	r2, [pc, #244]	; (810b514 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 810b420:	fa22 f303 	lsr.w	r3, r2, r3
 810b424:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 810b426:	e06e      	b.n	810b506 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 810b428:	2300      	movs	r3, #0
 810b42a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 810b42c:	e06b      	b.n	810b506 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 810b42e:	4b38      	ldr	r3, [pc, #224]	; (810b510 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 810b430:	681b      	ldr	r3, [r3, #0]
 810b432:	f403 7380 	and.w	r3, r3, #256	; 0x100
 810b436:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810b43a:	d102      	bne.n	810b442 <HAL_RCCEx_GetPeriphCLKFreq+0x8c6>
         {
          frequency = CSI_VALUE;
 810b43c:	4b36      	ldr	r3, [pc, #216]	; (810b518 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 810b43e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 810b440:	e061      	b.n	810b506 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 810b442:	2300      	movs	r3, #0
 810b444:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 810b446:	e05e      	b.n	810b506 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 810b448:	4b31      	ldr	r3, [pc, #196]	; (810b510 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 810b44a:	681b      	ldr	r3, [r3, #0]
 810b44c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 810b450:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 810b454:	d102      	bne.n	810b45c <HAL_RCCEx_GetPeriphCLKFreq+0x8e0>
         {
          frequency = HSE_VALUE;
 810b456:	4b31      	ldr	r3, [pc, #196]	; (810b51c <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 810b458:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 810b45a:	e054      	b.n	810b506 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 810b45c:	2300      	movs	r3, #0
 810b45e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 810b460:	e051      	b.n	810b506 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 810b462:	2300      	movs	r3, #0
 810b464:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 810b466:	e04e      	b.n	810b506 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 810b468:	687b      	ldr	r3, [r7, #4]
 810b46a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 810b46e:	d148      	bne.n	810b502 <HAL_RCCEx_GetPeriphCLKFreq+0x986>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 810b470:	4b27      	ldr	r3, [pc, #156]	; (810b510 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 810b472:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810b474:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 810b478:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 810b47a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810b47c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 810b480:	d02a      	beq.n	810b4d8 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 810b482:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810b484:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 810b488:	d838      	bhi.n	810b4fc <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 810b48a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810b48c:	2b00      	cmp	r3, #0
 810b48e:	d004      	beq.n	810b49a <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 810b490:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810b492:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 810b496:	d00d      	beq.n	810b4b4 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 810b498:	e030      	b.n	810b4fc <HAL_RCCEx_GetPeriphCLKFreq+0x980>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 810b49a:	4b1d      	ldr	r3, [pc, #116]	; (810b510 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 810b49c:	681b      	ldr	r3, [r3, #0]
 810b49e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 810b4a2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 810b4a6:	d102      	bne.n	810b4ae <HAL_RCCEx_GetPeriphCLKFreq+0x932>
         {
          frequency = HSE_VALUE;
 810b4a8:	4b1c      	ldr	r3, [pc, #112]	; (810b51c <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 810b4aa:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 810b4ac:	e02b      	b.n	810b506 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 810b4ae:	2300      	movs	r3, #0
 810b4b0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 810b4b2:	e028      	b.n	810b506 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 810b4b4:	4b16      	ldr	r3, [pc, #88]	; (810b510 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 810b4b6:	681b      	ldr	r3, [r3, #0]
 810b4b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 810b4bc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 810b4c0:	d107      	bne.n	810b4d2 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 810b4c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 810b4c6:	4618      	mov	r0, r3
 810b4c8:	f000 fae8 	bl	810ba9c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 810b4cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810b4ce:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 810b4d0:	e019      	b.n	810b506 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 810b4d2:	2300      	movs	r3, #0
 810b4d4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 810b4d6:	e016      	b.n	810b506 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 810b4d8:	4b0d      	ldr	r3, [pc, #52]	; (810b510 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 810b4da:	681b      	ldr	r3, [r3, #0]
 810b4dc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 810b4e0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 810b4e4:	d107      	bne.n	810b4f6 <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810b4e6:	f107 0318 	add.w	r3, r7, #24
 810b4ea:	4618      	mov	r0, r3
 810b4ec:	f000 f82e 	bl	810b54c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 810b4f0:	69fb      	ldr	r3, [r7, #28]
 810b4f2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 810b4f4:	e007      	b.n	810b506 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 810b4f6:	2300      	movs	r3, #0
 810b4f8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 810b4fa:	e004      	b.n	810b506 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 810b4fc:	2300      	movs	r3, #0
 810b4fe:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 810b500:	e001      	b.n	810b506 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else
    {
      frequency = 0;
 810b502:	2300      	movs	r3, #0
 810b504:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 810b506:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 810b508:	4618      	mov	r0, r3
 810b50a:	3740      	adds	r7, #64	; 0x40
 810b50c:	46bd      	mov	sp, r7
 810b50e:	bd80      	pop	{r7, pc}
 810b510:	58024400 	.word	0x58024400
 810b514:	03d09000 	.word	0x03d09000
 810b518:	003d0900 	.word	0x003d0900
 810b51c:	00f42400 	.word	0x00f42400

0810b520 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 810b520:	b580      	push	{r7, lr}
 810b522:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 810b524:	f7fe fb4a 	bl	8109bbc <HAL_RCC_GetHCLKFreq>
 810b528:	4602      	mov	r2, r0
 810b52a:	4b06      	ldr	r3, [pc, #24]	; (810b544 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 810b52c:	6a1b      	ldr	r3, [r3, #32]
 810b52e:	091b      	lsrs	r3, r3, #4
 810b530:	f003 0307 	and.w	r3, r3, #7
 810b534:	4904      	ldr	r1, [pc, #16]	; (810b548 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 810b536:	5ccb      	ldrb	r3, [r1, r3]
 810b538:	f003 031f 	and.w	r3, r3, #31
 810b53c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 810b540:	4618      	mov	r0, r3
 810b542:	bd80      	pop	{r7, pc}
 810b544:	58024400 	.word	0x58024400
 810b548:	0811b9f0 	.word	0x0811b9f0

0810b54c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 810b54c:	b480      	push	{r7}
 810b54e:	b089      	sub	sp, #36	; 0x24
 810b550:	af00      	add	r7, sp, #0
 810b552:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 810b554:	4ba1      	ldr	r3, [pc, #644]	; (810b7dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810b556:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810b558:	f003 0303 	and.w	r3, r3, #3
 810b55c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 810b55e:	4b9f      	ldr	r3, [pc, #636]	; (810b7dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810b560:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810b562:	0b1b      	lsrs	r3, r3, #12
 810b564:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 810b568:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 810b56a:	4b9c      	ldr	r3, [pc, #624]	; (810b7dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810b56c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810b56e:	091b      	lsrs	r3, r3, #4
 810b570:	f003 0301 	and.w	r3, r3, #1
 810b574:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 810b576:	4b99      	ldr	r3, [pc, #612]	; (810b7dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810b578:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810b57a:	08db      	lsrs	r3, r3, #3
 810b57c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 810b580:	693a      	ldr	r2, [r7, #16]
 810b582:	fb02 f303 	mul.w	r3, r2, r3
 810b586:	ee07 3a90 	vmov	s15, r3
 810b58a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810b58e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 810b592:	697b      	ldr	r3, [r7, #20]
 810b594:	2b00      	cmp	r3, #0
 810b596:	f000 8111 	beq.w	810b7bc <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 810b59a:	69bb      	ldr	r3, [r7, #24]
 810b59c:	2b02      	cmp	r3, #2
 810b59e:	f000 8083 	beq.w	810b6a8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 810b5a2:	69bb      	ldr	r3, [r7, #24]
 810b5a4:	2b02      	cmp	r3, #2
 810b5a6:	f200 80a1 	bhi.w	810b6ec <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 810b5aa:	69bb      	ldr	r3, [r7, #24]
 810b5ac:	2b00      	cmp	r3, #0
 810b5ae:	d003      	beq.n	810b5b8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 810b5b0:	69bb      	ldr	r3, [r7, #24]
 810b5b2:	2b01      	cmp	r3, #1
 810b5b4:	d056      	beq.n	810b664 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 810b5b6:	e099      	b.n	810b6ec <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810b5b8:	4b88      	ldr	r3, [pc, #544]	; (810b7dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810b5ba:	681b      	ldr	r3, [r3, #0]
 810b5bc:	f003 0320 	and.w	r3, r3, #32
 810b5c0:	2b00      	cmp	r3, #0
 810b5c2:	d02d      	beq.n	810b620 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 810b5c4:	4b85      	ldr	r3, [pc, #532]	; (810b7dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810b5c6:	681b      	ldr	r3, [r3, #0]
 810b5c8:	08db      	lsrs	r3, r3, #3
 810b5ca:	f003 0303 	and.w	r3, r3, #3
 810b5ce:	4a84      	ldr	r2, [pc, #528]	; (810b7e0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 810b5d0:	fa22 f303 	lsr.w	r3, r2, r3
 810b5d4:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 810b5d6:	68bb      	ldr	r3, [r7, #8]
 810b5d8:	ee07 3a90 	vmov	s15, r3
 810b5dc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810b5e0:	697b      	ldr	r3, [r7, #20]
 810b5e2:	ee07 3a90 	vmov	s15, r3
 810b5e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810b5ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810b5ee:	4b7b      	ldr	r3, [pc, #492]	; (810b7dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810b5f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810b5f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810b5f6:	ee07 3a90 	vmov	s15, r3
 810b5fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810b5fe:	ed97 6a03 	vldr	s12, [r7, #12]
 810b602:	eddf 5a78 	vldr	s11, [pc, #480]	; 810b7e4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 810b606:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810b60a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810b60e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810b612:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810b616:	ee67 7a27 	vmul.f32	s15, s14, s15
 810b61a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 810b61e:	e087      	b.n	810b730 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 810b620:	697b      	ldr	r3, [r7, #20]
 810b622:	ee07 3a90 	vmov	s15, r3
 810b626:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810b62a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 810b7e8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 810b62e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810b632:	4b6a      	ldr	r3, [pc, #424]	; (810b7dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810b634:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810b636:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810b63a:	ee07 3a90 	vmov	s15, r3
 810b63e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810b642:	ed97 6a03 	vldr	s12, [r7, #12]
 810b646:	eddf 5a67 	vldr	s11, [pc, #412]	; 810b7e4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 810b64a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810b64e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810b652:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810b656:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810b65a:	ee67 7a27 	vmul.f32	s15, s14, s15
 810b65e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 810b662:	e065      	b.n	810b730 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 810b664:	697b      	ldr	r3, [r7, #20]
 810b666:	ee07 3a90 	vmov	s15, r3
 810b66a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810b66e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 810b7ec <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 810b672:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810b676:	4b59      	ldr	r3, [pc, #356]	; (810b7dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810b678:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810b67a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810b67e:	ee07 3a90 	vmov	s15, r3
 810b682:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810b686:	ed97 6a03 	vldr	s12, [r7, #12]
 810b68a:	eddf 5a56 	vldr	s11, [pc, #344]	; 810b7e4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 810b68e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810b692:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810b696:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810b69a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810b69e:	ee67 7a27 	vmul.f32	s15, s14, s15
 810b6a2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 810b6a6:	e043      	b.n	810b730 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 810b6a8:	697b      	ldr	r3, [r7, #20]
 810b6aa:	ee07 3a90 	vmov	s15, r3
 810b6ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810b6b2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 810b7f0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 810b6b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810b6ba:	4b48      	ldr	r3, [pc, #288]	; (810b7dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810b6bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810b6be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810b6c2:	ee07 3a90 	vmov	s15, r3
 810b6c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810b6ca:	ed97 6a03 	vldr	s12, [r7, #12]
 810b6ce:	eddf 5a45 	vldr	s11, [pc, #276]	; 810b7e4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 810b6d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810b6d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810b6da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810b6de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810b6e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 810b6e6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 810b6ea:	e021      	b.n	810b730 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 810b6ec:	697b      	ldr	r3, [r7, #20]
 810b6ee:	ee07 3a90 	vmov	s15, r3
 810b6f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810b6f6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 810b7ec <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 810b6fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810b6fe:	4b37      	ldr	r3, [pc, #220]	; (810b7dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810b700:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810b702:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810b706:	ee07 3a90 	vmov	s15, r3
 810b70a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810b70e:	ed97 6a03 	vldr	s12, [r7, #12]
 810b712:	eddf 5a34 	vldr	s11, [pc, #208]	; 810b7e4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 810b716:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810b71a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810b71e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810b722:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810b726:	ee67 7a27 	vmul.f32	s15, s14, s15
 810b72a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 810b72e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 810b730:	4b2a      	ldr	r3, [pc, #168]	; (810b7dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810b732:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810b734:	0a5b      	lsrs	r3, r3, #9
 810b736:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 810b73a:	ee07 3a90 	vmov	s15, r3
 810b73e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810b742:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 810b746:	ee37 7a87 	vadd.f32	s14, s15, s14
 810b74a:	edd7 6a07 	vldr	s13, [r7, #28]
 810b74e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810b752:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810b756:	ee17 2a90 	vmov	r2, s15
 810b75a:	687b      	ldr	r3, [r7, #4]
 810b75c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 810b75e:	4b1f      	ldr	r3, [pc, #124]	; (810b7dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810b760:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810b762:	0c1b      	lsrs	r3, r3, #16
 810b764:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 810b768:	ee07 3a90 	vmov	s15, r3
 810b76c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810b770:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 810b774:	ee37 7a87 	vadd.f32	s14, s15, s14
 810b778:	edd7 6a07 	vldr	s13, [r7, #28]
 810b77c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810b780:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810b784:	ee17 2a90 	vmov	r2, s15
 810b788:	687b      	ldr	r3, [r7, #4]
 810b78a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 810b78c:	4b13      	ldr	r3, [pc, #76]	; (810b7dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810b78e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810b790:	0e1b      	lsrs	r3, r3, #24
 810b792:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 810b796:	ee07 3a90 	vmov	s15, r3
 810b79a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810b79e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 810b7a2:	ee37 7a87 	vadd.f32	s14, s15, s14
 810b7a6:	edd7 6a07 	vldr	s13, [r7, #28]
 810b7aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810b7ae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810b7b2:	ee17 2a90 	vmov	r2, s15
 810b7b6:	687b      	ldr	r3, [r7, #4]
 810b7b8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 810b7ba:	e008      	b.n	810b7ce <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 810b7bc:	687b      	ldr	r3, [r7, #4]
 810b7be:	2200      	movs	r2, #0
 810b7c0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 810b7c2:	687b      	ldr	r3, [r7, #4]
 810b7c4:	2200      	movs	r2, #0
 810b7c6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 810b7c8:	687b      	ldr	r3, [r7, #4]
 810b7ca:	2200      	movs	r2, #0
 810b7cc:	609a      	str	r2, [r3, #8]
}
 810b7ce:	bf00      	nop
 810b7d0:	3724      	adds	r7, #36	; 0x24
 810b7d2:	46bd      	mov	sp, r7
 810b7d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b7d8:	4770      	bx	lr
 810b7da:	bf00      	nop
 810b7dc:	58024400 	.word	0x58024400
 810b7e0:	03d09000 	.word	0x03d09000
 810b7e4:	46000000 	.word	0x46000000
 810b7e8:	4c742400 	.word	0x4c742400
 810b7ec:	4a742400 	.word	0x4a742400
 810b7f0:	4b742400 	.word	0x4b742400

0810b7f4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 810b7f4:	b480      	push	{r7}
 810b7f6:	b089      	sub	sp, #36	; 0x24
 810b7f8:	af00      	add	r7, sp, #0
 810b7fa:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 810b7fc:	4ba1      	ldr	r3, [pc, #644]	; (810ba84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810b7fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810b800:	f003 0303 	and.w	r3, r3, #3
 810b804:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 810b806:	4b9f      	ldr	r3, [pc, #636]	; (810ba84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810b808:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810b80a:	0d1b      	lsrs	r3, r3, #20
 810b80c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 810b810:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 810b812:	4b9c      	ldr	r3, [pc, #624]	; (810ba84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810b814:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810b816:	0a1b      	lsrs	r3, r3, #8
 810b818:	f003 0301 	and.w	r3, r3, #1
 810b81c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 810b81e:	4b99      	ldr	r3, [pc, #612]	; (810ba84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810b820:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 810b822:	08db      	lsrs	r3, r3, #3
 810b824:	f3c3 030c 	ubfx	r3, r3, #0, #13
 810b828:	693a      	ldr	r2, [r7, #16]
 810b82a:	fb02 f303 	mul.w	r3, r2, r3
 810b82e:	ee07 3a90 	vmov	s15, r3
 810b832:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810b836:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 810b83a:	697b      	ldr	r3, [r7, #20]
 810b83c:	2b00      	cmp	r3, #0
 810b83e:	f000 8111 	beq.w	810ba64 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 810b842:	69bb      	ldr	r3, [r7, #24]
 810b844:	2b02      	cmp	r3, #2
 810b846:	f000 8083 	beq.w	810b950 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 810b84a:	69bb      	ldr	r3, [r7, #24]
 810b84c:	2b02      	cmp	r3, #2
 810b84e:	f200 80a1 	bhi.w	810b994 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 810b852:	69bb      	ldr	r3, [r7, #24]
 810b854:	2b00      	cmp	r3, #0
 810b856:	d003      	beq.n	810b860 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 810b858:	69bb      	ldr	r3, [r7, #24]
 810b85a:	2b01      	cmp	r3, #1
 810b85c:	d056      	beq.n	810b90c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 810b85e:	e099      	b.n	810b994 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810b860:	4b88      	ldr	r3, [pc, #544]	; (810ba84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810b862:	681b      	ldr	r3, [r3, #0]
 810b864:	f003 0320 	and.w	r3, r3, #32
 810b868:	2b00      	cmp	r3, #0
 810b86a:	d02d      	beq.n	810b8c8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 810b86c:	4b85      	ldr	r3, [pc, #532]	; (810ba84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810b86e:	681b      	ldr	r3, [r3, #0]
 810b870:	08db      	lsrs	r3, r3, #3
 810b872:	f003 0303 	and.w	r3, r3, #3
 810b876:	4a84      	ldr	r2, [pc, #528]	; (810ba88 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 810b878:	fa22 f303 	lsr.w	r3, r2, r3
 810b87c:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 810b87e:	68bb      	ldr	r3, [r7, #8]
 810b880:	ee07 3a90 	vmov	s15, r3
 810b884:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810b888:	697b      	ldr	r3, [r7, #20]
 810b88a:	ee07 3a90 	vmov	s15, r3
 810b88e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810b892:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810b896:	4b7b      	ldr	r3, [pc, #492]	; (810ba84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810b898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810b89a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810b89e:	ee07 3a90 	vmov	s15, r3
 810b8a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810b8a6:	ed97 6a03 	vldr	s12, [r7, #12]
 810b8aa:	eddf 5a78 	vldr	s11, [pc, #480]	; 810ba8c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 810b8ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810b8b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810b8b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810b8ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810b8be:	ee67 7a27 	vmul.f32	s15, s14, s15
 810b8c2:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 810b8c6:	e087      	b.n	810b9d8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 810b8c8:	697b      	ldr	r3, [r7, #20]
 810b8ca:	ee07 3a90 	vmov	s15, r3
 810b8ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810b8d2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 810ba90 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 810b8d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810b8da:	4b6a      	ldr	r3, [pc, #424]	; (810ba84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810b8dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810b8de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810b8e2:	ee07 3a90 	vmov	s15, r3
 810b8e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810b8ea:	ed97 6a03 	vldr	s12, [r7, #12]
 810b8ee:	eddf 5a67 	vldr	s11, [pc, #412]	; 810ba8c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 810b8f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810b8f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810b8fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810b8fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810b902:	ee67 7a27 	vmul.f32	s15, s14, s15
 810b906:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 810b90a:	e065      	b.n	810b9d8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 810b90c:	697b      	ldr	r3, [r7, #20]
 810b90e:	ee07 3a90 	vmov	s15, r3
 810b912:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810b916:	eddf 6a5f 	vldr	s13, [pc, #380]	; 810ba94 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 810b91a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810b91e:	4b59      	ldr	r3, [pc, #356]	; (810ba84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810b920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810b922:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810b926:	ee07 3a90 	vmov	s15, r3
 810b92a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810b92e:	ed97 6a03 	vldr	s12, [r7, #12]
 810b932:	eddf 5a56 	vldr	s11, [pc, #344]	; 810ba8c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 810b936:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810b93a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810b93e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810b942:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810b946:	ee67 7a27 	vmul.f32	s15, s14, s15
 810b94a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 810b94e:	e043      	b.n	810b9d8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 810b950:	697b      	ldr	r3, [r7, #20]
 810b952:	ee07 3a90 	vmov	s15, r3
 810b956:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810b95a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 810ba98 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 810b95e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810b962:	4b48      	ldr	r3, [pc, #288]	; (810ba84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810b964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810b966:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810b96a:	ee07 3a90 	vmov	s15, r3
 810b96e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810b972:	ed97 6a03 	vldr	s12, [r7, #12]
 810b976:	eddf 5a45 	vldr	s11, [pc, #276]	; 810ba8c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 810b97a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810b97e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810b982:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810b986:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810b98a:	ee67 7a27 	vmul.f32	s15, s14, s15
 810b98e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 810b992:	e021      	b.n	810b9d8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 810b994:	697b      	ldr	r3, [r7, #20]
 810b996:	ee07 3a90 	vmov	s15, r3
 810b99a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810b99e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 810ba94 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 810b9a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810b9a6:	4b37      	ldr	r3, [pc, #220]	; (810ba84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810b9a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810b9aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810b9ae:	ee07 3a90 	vmov	s15, r3
 810b9b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810b9b6:	ed97 6a03 	vldr	s12, [r7, #12]
 810b9ba:	eddf 5a34 	vldr	s11, [pc, #208]	; 810ba8c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 810b9be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810b9c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810b9c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810b9ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810b9ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 810b9d2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 810b9d6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 810b9d8:	4b2a      	ldr	r3, [pc, #168]	; (810ba84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810b9da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810b9dc:	0a5b      	lsrs	r3, r3, #9
 810b9de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 810b9e2:	ee07 3a90 	vmov	s15, r3
 810b9e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810b9ea:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 810b9ee:	ee37 7a87 	vadd.f32	s14, s15, s14
 810b9f2:	edd7 6a07 	vldr	s13, [r7, #28]
 810b9f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810b9fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810b9fe:	ee17 2a90 	vmov	r2, s15
 810ba02:	687b      	ldr	r3, [r7, #4]
 810ba04:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 810ba06:	4b1f      	ldr	r3, [pc, #124]	; (810ba84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810ba08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810ba0a:	0c1b      	lsrs	r3, r3, #16
 810ba0c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 810ba10:	ee07 3a90 	vmov	s15, r3
 810ba14:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810ba18:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 810ba1c:	ee37 7a87 	vadd.f32	s14, s15, s14
 810ba20:	edd7 6a07 	vldr	s13, [r7, #28]
 810ba24:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810ba28:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810ba2c:	ee17 2a90 	vmov	r2, s15
 810ba30:	687b      	ldr	r3, [r7, #4]
 810ba32:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 810ba34:	4b13      	ldr	r3, [pc, #76]	; (810ba84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810ba36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810ba38:	0e1b      	lsrs	r3, r3, #24
 810ba3a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 810ba3e:	ee07 3a90 	vmov	s15, r3
 810ba42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810ba46:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 810ba4a:	ee37 7a87 	vadd.f32	s14, s15, s14
 810ba4e:	edd7 6a07 	vldr	s13, [r7, #28]
 810ba52:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810ba56:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810ba5a:	ee17 2a90 	vmov	r2, s15
 810ba5e:	687b      	ldr	r3, [r7, #4]
 810ba60:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 810ba62:	e008      	b.n	810ba76 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 810ba64:	687b      	ldr	r3, [r7, #4]
 810ba66:	2200      	movs	r2, #0
 810ba68:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 810ba6a:	687b      	ldr	r3, [r7, #4]
 810ba6c:	2200      	movs	r2, #0
 810ba6e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 810ba70:	687b      	ldr	r3, [r7, #4]
 810ba72:	2200      	movs	r2, #0
 810ba74:	609a      	str	r2, [r3, #8]
}
 810ba76:	bf00      	nop
 810ba78:	3724      	adds	r7, #36	; 0x24
 810ba7a:	46bd      	mov	sp, r7
 810ba7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 810ba80:	4770      	bx	lr
 810ba82:	bf00      	nop
 810ba84:	58024400 	.word	0x58024400
 810ba88:	03d09000 	.word	0x03d09000
 810ba8c:	46000000 	.word	0x46000000
 810ba90:	4c742400 	.word	0x4c742400
 810ba94:	4a742400 	.word	0x4a742400
 810ba98:	4b742400 	.word	0x4b742400

0810ba9c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 810ba9c:	b480      	push	{r7}
 810ba9e:	b089      	sub	sp, #36	; 0x24
 810baa0:	af00      	add	r7, sp, #0
 810baa2:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 810baa4:	4ba0      	ldr	r3, [pc, #640]	; (810bd28 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 810baa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810baa8:	f003 0303 	and.w	r3, r3, #3
 810baac:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 810baae:	4b9e      	ldr	r3, [pc, #632]	; (810bd28 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 810bab0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810bab2:	091b      	lsrs	r3, r3, #4
 810bab4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 810bab8:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 810baba:	4b9b      	ldr	r3, [pc, #620]	; (810bd28 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 810babc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810babe:	f003 0301 	and.w	r3, r3, #1
 810bac2:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 810bac4:	4b98      	ldr	r3, [pc, #608]	; (810bd28 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 810bac6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 810bac8:	08db      	lsrs	r3, r3, #3
 810baca:	f3c3 030c 	ubfx	r3, r3, #0, #13
 810bace:	693a      	ldr	r2, [r7, #16]
 810bad0:	fb02 f303 	mul.w	r3, r2, r3
 810bad4:	ee07 3a90 	vmov	s15, r3
 810bad8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810badc:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 810bae0:	697b      	ldr	r3, [r7, #20]
 810bae2:	2b00      	cmp	r3, #0
 810bae4:	f000 8111 	beq.w	810bd0a <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 810bae8:	69bb      	ldr	r3, [r7, #24]
 810baea:	2b02      	cmp	r3, #2
 810baec:	f000 8083 	beq.w	810bbf6 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 810baf0:	69bb      	ldr	r3, [r7, #24]
 810baf2:	2b02      	cmp	r3, #2
 810baf4:	f200 80a1 	bhi.w	810bc3a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 810baf8:	69bb      	ldr	r3, [r7, #24]
 810bafa:	2b00      	cmp	r3, #0
 810bafc:	d003      	beq.n	810bb06 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 810bafe:	69bb      	ldr	r3, [r7, #24]
 810bb00:	2b01      	cmp	r3, #1
 810bb02:	d056      	beq.n	810bbb2 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 810bb04:	e099      	b.n	810bc3a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810bb06:	4b88      	ldr	r3, [pc, #544]	; (810bd28 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 810bb08:	681b      	ldr	r3, [r3, #0]
 810bb0a:	f003 0320 	and.w	r3, r3, #32
 810bb0e:	2b00      	cmp	r3, #0
 810bb10:	d02d      	beq.n	810bb6e <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 810bb12:	4b85      	ldr	r3, [pc, #532]	; (810bd28 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 810bb14:	681b      	ldr	r3, [r3, #0]
 810bb16:	08db      	lsrs	r3, r3, #3
 810bb18:	f003 0303 	and.w	r3, r3, #3
 810bb1c:	4a83      	ldr	r2, [pc, #524]	; (810bd2c <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 810bb1e:	fa22 f303 	lsr.w	r3, r2, r3
 810bb22:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 810bb24:	68bb      	ldr	r3, [r7, #8]
 810bb26:	ee07 3a90 	vmov	s15, r3
 810bb2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810bb2e:	697b      	ldr	r3, [r7, #20]
 810bb30:	ee07 3a90 	vmov	s15, r3
 810bb34:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810bb38:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810bb3c:	4b7a      	ldr	r3, [pc, #488]	; (810bd28 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 810bb3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810bb40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810bb44:	ee07 3a90 	vmov	s15, r3
 810bb48:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810bb4c:	ed97 6a03 	vldr	s12, [r7, #12]
 810bb50:	eddf 5a77 	vldr	s11, [pc, #476]	; 810bd30 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 810bb54:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810bb58:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810bb5c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810bb60:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810bb64:	ee67 7a27 	vmul.f32	s15, s14, s15
 810bb68:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 810bb6c:	e087      	b.n	810bc7e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 810bb6e:	697b      	ldr	r3, [r7, #20]
 810bb70:	ee07 3a90 	vmov	s15, r3
 810bb74:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810bb78:	eddf 6a6e 	vldr	s13, [pc, #440]	; 810bd34 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 810bb7c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810bb80:	4b69      	ldr	r3, [pc, #420]	; (810bd28 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 810bb82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810bb84:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810bb88:	ee07 3a90 	vmov	s15, r3
 810bb8c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810bb90:	ed97 6a03 	vldr	s12, [r7, #12]
 810bb94:	eddf 5a66 	vldr	s11, [pc, #408]	; 810bd30 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 810bb98:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810bb9c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810bba0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810bba4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810bba8:	ee67 7a27 	vmul.f32	s15, s14, s15
 810bbac:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 810bbb0:	e065      	b.n	810bc7e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 810bbb2:	697b      	ldr	r3, [r7, #20]
 810bbb4:	ee07 3a90 	vmov	s15, r3
 810bbb8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810bbbc:	eddf 6a5e 	vldr	s13, [pc, #376]	; 810bd38 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 810bbc0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810bbc4:	4b58      	ldr	r3, [pc, #352]	; (810bd28 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 810bbc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810bbc8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810bbcc:	ee07 3a90 	vmov	s15, r3
 810bbd0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810bbd4:	ed97 6a03 	vldr	s12, [r7, #12]
 810bbd8:	eddf 5a55 	vldr	s11, [pc, #340]	; 810bd30 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 810bbdc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810bbe0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810bbe4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810bbe8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810bbec:	ee67 7a27 	vmul.f32	s15, s14, s15
 810bbf0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 810bbf4:	e043      	b.n	810bc7e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 810bbf6:	697b      	ldr	r3, [r7, #20]
 810bbf8:	ee07 3a90 	vmov	s15, r3
 810bbfc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810bc00:	eddf 6a4e 	vldr	s13, [pc, #312]	; 810bd3c <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 810bc04:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810bc08:	4b47      	ldr	r3, [pc, #284]	; (810bd28 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 810bc0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810bc0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810bc10:	ee07 3a90 	vmov	s15, r3
 810bc14:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810bc18:	ed97 6a03 	vldr	s12, [r7, #12]
 810bc1c:	eddf 5a44 	vldr	s11, [pc, #272]	; 810bd30 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 810bc20:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810bc24:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810bc28:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810bc2c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810bc30:	ee67 7a27 	vmul.f32	s15, s14, s15
 810bc34:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 810bc38:	e021      	b.n	810bc7e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 810bc3a:	697b      	ldr	r3, [r7, #20]
 810bc3c:	ee07 3a90 	vmov	s15, r3
 810bc40:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810bc44:	eddf 6a3b 	vldr	s13, [pc, #236]	; 810bd34 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 810bc48:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810bc4c:	4b36      	ldr	r3, [pc, #216]	; (810bd28 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 810bc4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810bc50:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810bc54:	ee07 3a90 	vmov	s15, r3
 810bc58:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810bc5c:	ed97 6a03 	vldr	s12, [r7, #12]
 810bc60:	eddf 5a33 	vldr	s11, [pc, #204]	; 810bd30 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 810bc64:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810bc68:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810bc6c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810bc70:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810bc74:	ee67 7a27 	vmul.f32	s15, s14, s15
 810bc78:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 810bc7c:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 810bc7e:	4b2a      	ldr	r3, [pc, #168]	; (810bd28 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 810bc80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810bc82:	0a5b      	lsrs	r3, r3, #9
 810bc84:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 810bc88:	ee07 3a90 	vmov	s15, r3
 810bc8c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810bc90:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 810bc94:	ee37 7a87 	vadd.f32	s14, s15, s14
 810bc98:	edd7 6a07 	vldr	s13, [r7, #28]
 810bc9c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810bca0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810bca4:	ee17 2a90 	vmov	r2, s15
 810bca8:	687b      	ldr	r3, [r7, #4]
 810bcaa:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 810bcac:	4b1e      	ldr	r3, [pc, #120]	; (810bd28 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 810bcae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810bcb0:	0c1b      	lsrs	r3, r3, #16
 810bcb2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 810bcb6:	ee07 3a90 	vmov	s15, r3
 810bcba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810bcbe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 810bcc2:	ee37 7a87 	vadd.f32	s14, s15, s14
 810bcc6:	edd7 6a07 	vldr	s13, [r7, #28]
 810bcca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810bcce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810bcd2:	ee17 2a90 	vmov	r2, s15
 810bcd6:	687b      	ldr	r3, [r7, #4]
 810bcd8:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 810bcda:	4b13      	ldr	r3, [pc, #76]	; (810bd28 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 810bcdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810bcde:	0e1b      	lsrs	r3, r3, #24
 810bce0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 810bce4:	ee07 3a90 	vmov	s15, r3
 810bce8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810bcec:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 810bcf0:	ee37 7a87 	vadd.f32	s14, s15, s14
 810bcf4:	edd7 6a07 	vldr	s13, [r7, #28]
 810bcf8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810bcfc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810bd00:	ee17 2a90 	vmov	r2, s15
 810bd04:	687b      	ldr	r3, [r7, #4]
 810bd06:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 810bd08:	e008      	b.n	810bd1c <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 810bd0a:	687b      	ldr	r3, [r7, #4]
 810bd0c:	2200      	movs	r2, #0
 810bd0e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 810bd10:	687b      	ldr	r3, [r7, #4]
 810bd12:	2200      	movs	r2, #0
 810bd14:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 810bd16:	687b      	ldr	r3, [r7, #4]
 810bd18:	2200      	movs	r2, #0
 810bd1a:	609a      	str	r2, [r3, #8]
}
 810bd1c:	bf00      	nop
 810bd1e:	3724      	adds	r7, #36	; 0x24
 810bd20:	46bd      	mov	sp, r7
 810bd22:	f85d 7b04 	ldr.w	r7, [sp], #4
 810bd26:	4770      	bx	lr
 810bd28:	58024400 	.word	0x58024400
 810bd2c:	03d09000 	.word	0x03d09000
 810bd30:	46000000 	.word	0x46000000
 810bd34:	4c742400 	.word	0x4c742400
 810bd38:	4a742400 	.word	0x4a742400
 810bd3c:	4b742400 	.word	0x4b742400

0810bd40 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 810bd40:	b580      	push	{r7, lr}
 810bd42:	b084      	sub	sp, #16
 810bd44:	af00      	add	r7, sp, #0
 810bd46:	6078      	str	r0, [r7, #4]
 810bd48:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 810bd4a:	2300      	movs	r3, #0
 810bd4c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 810bd4e:	4b54      	ldr	r3, [pc, #336]	; (810bea0 <RCCEx_PLL2_Config+0x160>)
 810bd50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810bd52:	f003 0303 	and.w	r3, r3, #3
 810bd56:	2b03      	cmp	r3, #3
 810bd58:	d101      	bne.n	810bd5e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 810bd5a:	2301      	movs	r3, #1
 810bd5c:	e09b      	b.n	810be96 <RCCEx_PLL2_Config+0x156>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 810bd5e:	4b50      	ldr	r3, [pc, #320]	; (810bea0 <RCCEx_PLL2_Config+0x160>)
 810bd60:	681b      	ldr	r3, [r3, #0]
 810bd62:	4a4f      	ldr	r2, [pc, #316]	; (810bea0 <RCCEx_PLL2_Config+0x160>)
 810bd64:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 810bd68:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 810bd6a:	f7f6 fe8d 	bl	8102a88 <HAL_GetTick>
 810bd6e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 810bd70:	e008      	b.n	810bd84 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 810bd72:	f7f6 fe89 	bl	8102a88 <HAL_GetTick>
 810bd76:	4602      	mov	r2, r0
 810bd78:	68bb      	ldr	r3, [r7, #8]
 810bd7a:	1ad3      	subs	r3, r2, r3
 810bd7c:	2b02      	cmp	r3, #2
 810bd7e:	d901      	bls.n	810bd84 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 810bd80:	2303      	movs	r3, #3
 810bd82:	e088      	b.n	810be96 <RCCEx_PLL2_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 810bd84:	4b46      	ldr	r3, [pc, #280]	; (810bea0 <RCCEx_PLL2_Config+0x160>)
 810bd86:	681b      	ldr	r3, [r3, #0]
 810bd88:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 810bd8c:	2b00      	cmp	r3, #0
 810bd8e:	d1f0      	bne.n	810bd72 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 810bd90:	4b43      	ldr	r3, [pc, #268]	; (810bea0 <RCCEx_PLL2_Config+0x160>)
 810bd92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810bd94:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 810bd98:	687b      	ldr	r3, [r7, #4]
 810bd9a:	681b      	ldr	r3, [r3, #0]
 810bd9c:	031b      	lsls	r3, r3, #12
 810bd9e:	4940      	ldr	r1, [pc, #256]	; (810bea0 <RCCEx_PLL2_Config+0x160>)
 810bda0:	4313      	orrs	r3, r2
 810bda2:	628b      	str	r3, [r1, #40]	; 0x28
 810bda4:	687b      	ldr	r3, [r7, #4]
 810bda6:	685b      	ldr	r3, [r3, #4]
 810bda8:	3b01      	subs	r3, #1
 810bdaa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 810bdae:	687b      	ldr	r3, [r7, #4]
 810bdb0:	689b      	ldr	r3, [r3, #8]
 810bdb2:	3b01      	subs	r3, #1
 810bdb4:	025b      	lsls	r3, r3, #9
 810bdb6:	b29b      	uxth	r3, r3
 810bdb8:	431a      	orrs	r2, r3
 810bdba:	687b      	ldr	r3, [r7, #4]
 810bdbc:	68db      	ldr	r3, [r3, #12]
 810bdbe:	3b01      	subs	r3, #1
 810bdc0:	041b      	lsls	r3, r3, #16
 810bdc2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 810bdc6:	431a      	orrs	r2, r3
 810bdc8:	687b      	ldr	r3, [r7, #4]
 810bdca:	691b      	ldr	r3, [r3, #16]
 810bdcc:	3b01      	subs	r3, #1
 810bdce:	061b      	lsls	r3, r3, #24
 810bdd0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 810bdd4:	4932      	ldr	r1, [pc, #200]	; (810bea0 <RCCEx_PLL2_Config+0x160>)
 810bdd6:	4313      	orrs	r3, r2
 810bdd8:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 810bdda:	4b31      	ldr	r3, [pc, #196]	; (810bea0 <RCCEx_PLL2_Config+0x160>)
 810bddc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810bdde:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 810bde2:	687b      	ldr	r3, [r7, #4]
 810bde4:	695b      	ldr	r3, [r3, #20]
 810bde6:	492e      	ldr	r1, [pc, #184]	; (810bea0 <RCCEx_PLL2_Config+0x160>)
 810bde8:	4313      	orrs	r3, r2
 810bdea:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 810bdec:	4b2c      	ldr	r3, [pc, #176]	; (810bea0 <RCCEx_PLL2_Config+0x160>)
 810bdee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810bdf0:	f023 0220 	bic.w	r2, r3, #32
 810bdf4:	687b      	ldr	r3, [r7, #4]
 810bdf6:	699b      	ldr	r3, [r3, #24]
 810bdf8:	4929      	ldr	r1, [pc, #164]	; (810bea0 <RCCEx_PLL2_Config+0x160>)
 810bdfa:	4313      	orrs	r3, r2
 810bdfc:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 810bdfe:	4b28      	ldr	r3, [pc, #160]	; (810bea0 <RCCEx_PLL2_Config+0x160>)
 810be00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810be02:	4a27      	ldr	r2, [pc, #156]	; (810bea0 <RCCEx_PLL2_Config+0x160>)
 810be04:	f023 0310 	bic.w	r3, r3, #16
 810be08:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 810be0a:	4b25      	ldr	r3, [pc, #148]	; (810bea0 <RCCEx_PLL2_Config+0x160>)
 810be0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810be0e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 810be12:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 810be16:	687a      	ldr	r2, [r7, #4]
 810be18:	69d2      	ldr	r2, [r2, #28]
 810be1a:	00d2      	lsls	r2, r2, #3
 810be1c:	4920      	ldr	r1, [pc, #128]	; (810bea0 <RCCEx_PLL2_Config+0x160>)
 810be1e:	4313      	orrs	r3, r2
 810be20:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 810be22:	4b1f      	ldr	r3, [pc, #124]	; (810bea0 <RCCEx_PLL2_Config+0x160>)
 810be24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810be26:	4a1e      	ldr	r2, [pc, #120]	; (810bea0 <RCCEx_PLL2_Config+0x160>)
 810be28:	f043 0310 	orr.w	r3, r3, #16
 810be2c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 810be2e:	683b      	ldr	r3, [r7, #0]
 810be30:	2b00      	cmp	r3, #0
 810be32:	d106      	bne.n	810be42 <RCCEx_PLL2_Config+0x102>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 810be34:	4b1a      	ldr	r3, [pc, #104]	; (810bea0 <RCCEx_PLL2_Config+0x160>)
 810be36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810be38:	4a19      	ldr	r2, [pc, #100]	; (810bea0 <RCCEx_PLL2_Config+0x160>)
 810be3a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 810be3e:	62d3      	str	r3, [r2, #44]	; 0x2c
 810be40:	e00f      	b.n	810be62 <RCCEx_PLL2_Config+0x122>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 810be42:	683b      	ldr	r3, [r7, #0]
 810be44:	2b01      	cmp	r3, #1
 810be46:	d106      	bne.n	810be56 <RCCEx_PLL2_Config+0x116>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 810be48:	4b15      	ldr	r3, [pc, #84]	; (810bea0 <RCCEx_PLL2_Config+0x160>)
 810be4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810be4c:	4a14      	ldr	r2, [pc, #80]	; (810bea0 <RCCEx_PLL2_Config+0x160>)
 810be4e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 810be52:	62d3      	str	r3, [r2, #44]	; 0x2c
 810be54:	e005      	b.n	810be62 <RCCEx_PLL2_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 810be56:	4b12      	ldr	r3, [pc, #72]	; (810bea0 <RCCEx_PLL2_Config+0x160>)
 810be58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810be5a:	4a11      	ldr	r2, [pc, #68]	; (810bea0 <RCCEx_PLL2_Config+0x160>)
 810be5c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 810be60:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 810be62:	4b0f      	ldr	r3, [pc, #60]	; (810bea0 <RCCEx_PLL2_Config+0x160>)
 810be64:	681b      	ldr	r3, [r3, #0]
 810be66:	4a0e      	ldr	r2, [pc, #56]	; (810bea0 <RCCEx_PLL2_Config+0x160>)
 810be68:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 810be6c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 810be6e:	f7f6 fe0b 	bl	8102a88 <HAL_GetTick>
 810be72:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 810be74:	e008      	b.n	810be88 <RCCEx_PLL2_Config+0x148>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 810be76:	f7f6 fe07 	bl	8102a88 <HAL_GetTick>
 810be7a:	4602      	mov	r2, r0
 810be7c:	68bb      	ldr	r3, [r7, #8]
 810be7e:	1ad3      	subs	r3, r2, r3
 810be80:	2b02      	cmp	r3, #2
 810be82:	d901      	bls.n	810be88 <RCCEx_PLL2_Config+0x148>
      {
        return HAL_TIMEOUT;
 810be84:	2303      	movs	r3, #3
 810be86:	e006      	b.n	810be96 <RCCEx_PLL2_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 810be88:	4b05      	ldr	r3, [pc, #20]	; (810bea0 <RCCEx_PLL2_Config+0x160>)
 810be8a:	681b      	ldr	r3, [r3, #0]
 810be8c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 810be90:	2b00      	cmp	r3, #0
 810be92:	d0f0      	beq.n	810be76 <RCCEx_PLL2_Config+0x136>
    }

  }


  return status;
 810be94:	7bfb      	ldrb	r3, [r7, #15]
}
 810be96:	4618      	mov	r0, r3
 810be98:	3710      	adds	r7, #16
 810be9a:	46bd      	mov	sp, r7
 810be9c:	bd80      	pop	{r7, pc}
 810be9e:	bf00      	nop
 810bea0:	58024400 	.word	0x58024400

0810bea4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 810bea4:	b580      	push	{r7, lr}
 810bea6:	b084      	sub	sp, #16
 810bea8:	af00      	add	r7, sp, #0
 810beaa:	6078      	str	r0, [r7, #4]
 810beac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 810beae:	2300      	movs	r3, #0
 810beb0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 810beb2:	4b54      	ldr	r3, [pc, #336]	; (810c004 <RCCEx_PLL3_Config+0x160>)
 810beb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810beb6:	f003 0303 	and.w	r3, r3, #3
 810beba:	2b03      	cmp	r3, #3
 810bebc:	d101      	bne.n	810bec2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 810bebe:	2301      	movs	r3, #1
 810bec0:	e09b      	b.n	810bffa <RCCEx_PLL3_Config+0x156>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 810bec2:	4b50      	ldr	r3, [pc, #320]	; (810c004 <RCCEx_PLL3_Config+0x160>)
 810bec4:	681b      	ldr	r3, [r3, #0]
 810bec6:	4a4f      	ldr	r2, [pc, #316]	; (810c004 <RCCEx_PLL3_Config+0x160>)
 810bec8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 810becc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 810bece:	f7f6 fddb 	bl	8102a88 <HAL_GetTick>
 810bed2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 810bed4:	e008      	b.n	810bee8 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 810bed6:	f7f6 fdd7 	bl	8102a88 <HAL_GetTick>
 810beda:	4602      	mov	r2, r0
 810bedc:	68bb      	ldr	r3, [r7, #8]
 810bede:	1ad3      	subs	r3, r2, r3
 810bee0:	2b02      	cmp	r3, #2
 810bee2:	d901      	bls.n	810bee8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 810bee4:	2303      	movs	r3, #3
 810bee6:	e088      	b.n	810bffa <RCCEx_PLL3_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 810bee8:	4b46      	ldr	r3, [pc, #280]	; (810c004 <RCCEx_PLL3_Config+0x160>)
 810beea:	681b      	ldr	r3, [r3, #0]
 810beec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 810bef0:	2b00      	cmp	r3, #0
 810bef2:	d1f0      	bne.n	810bed6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 810bef4:	4b43      	ldr	r3, [pc, #268]	; (810c004 <RCCEx_PLL3_Config+0x160>)
 810bef6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810bef8:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 810befc:	687b      	ldr	r3, [r7, #4]
 810befe:	681b      	ldr	r3, [r3, #0]
 810bf00:	051b      	lsls	r3, r3, #20
 810bf02:	4940      	ldr	r1, [pc, #256]	; (810c004 <RCCEx_PLL3_Config+0x160>)
 810bf04:	4313      	orrs	r3, r2
 810bf06:	628b      	str	r3, [r1, #40]	; 0x28
 810bf08:	687b      	ldr	r3, [r7, #4]
 810bf0a:	685b      	ldr	r3, [r3, #4]
 810bf0c:	3b01      	subs	r3, #1
 810bf0e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 810bf12:	687b      	ldr	r3, [r7, #4]
 810bf14:	689b      	ldr	r3, [r3, #8]
 810bf16:	3b01      	subs	r3, #1
 810bf18:	025b      	lsls	r3, r3, #9
 810bf1a:	b29b      	uxth	r3, r3
 810bf1c:	431a      	orrs	r2, r3
 810bf1e:	687b      	ldr	r3, [r7, #4]
 810bf20:	68db      	ldr	r3, [r3, #12]
 810bf22:	3b01      	subs	r3, #1
 810bf24:	041b      	lsls	r3, r3, #16
 810bf26:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 810bf2a:	431a      	orrs	r2, r3
 810bf2c:	687b      	ldr	r3, [r7, #4]
 810bf2e:	691b      	ldr	r3, [r3, #16]
 810bf30:	3b01      	subs	r3, #1
 810bf32:	061b      	lsls	r3, r3, #24
 810bf34:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 810bf38:	4932      	ldr	r1, [pc, #200]	; (810c004 <RCCEx_PLL3_Config+0x160>)
 810bf3a:	4313      	orrs	r3, r2
 810bf3c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 810bf3e:	4b31      	ldr	r3, [pc, #196]	; (810c004 <RCCEx_PLL3_Config+0x160>)
 810bf40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810bf42:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 810bf46:	687b      	ldr	r3, [r7, #4]
 810bf48:	695b      	ldr	r3, [r3, #20]
 810bf4a:	492e      	ldr	r1, [pc, #184]	; (810c004 <RCCEx_PLL3_Config+0x160>)
 810bf4c:	4313      	orrs	r3, r2
 810bf4e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 810bf50:	4b2c      	ldr	r3, [pc, #176]	; (810c004 <RCCEx_PLL3_Config+0x160>)
 810bf52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810bf54:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 810bf58:	687b      	ldr	r3, [r7, #4]
 810bf5a:	699b      	ldr	r3, [r3, #24]
 810bf5c:	4929      	ldr	r1, [pc, #164]	; (810c004 <RCCEx_PLL3_Config+0x160>)
 810bf5e:	4313      	orrs	r3, r2
 810bf60:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 810bf62:	4b28      	ldr	r3, [pc, #160]	; (810c004 <RCCEx_PLL3_Config+0x160>)
 810bf64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810bf66:	4a27      	ldr	r2, [pc, #156]	; (810c004 <RCCEx_PLL3_Config+0x160>)
 810bf68:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 810bf6c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 810bf6e:	4b25      	ldr	r3, [pc, #148]	; (810c004 <RCCEx_PLL3_Config+0x160>)
 810bf70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 810bf72:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 810bf76:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 810bf7a:	687a      	ldr	r2, [r7, #4]
 810bf7c:	69d2      	ldr	r2, [r2, #28]
 810bf7e:	00d2      	lsls	r2, r2, #3
 810bf80:	4920      	ldr	r1, [pc, #128]	; (810c004 <RCCEx_PLL3_Config+0x160>)
 810bf82:	4313      	orrs	r3, r2
 810bf84:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 810bf86:	4b1f      	ldr	r3, [pc, #124]	; (810c004 <RCCEx_PLL3_Config+0x160>)
 810bf88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810bf8a:	4a1e      	ldr	r2, [pc, #120]	; (810c004 <RCCEx_PLL3_Config+0x160>)
 810bf8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 810bf90:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 810bf92:	683b      	ldr	r3, [r7, #0]
 810bf94:	2b00      	cmp	r3, #0
 810bf96:	d106      	bne.n	810bfa6 <RCCEx_PLL3_Config+0x102>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 810bf98:	4b1a      	ldr	r3, [pc, #104]	; (810c004 <RCCEx_PLL3_Config+0x160>)
 810bf9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810bf9c:	4a19      	ldr	r2, [pc, #100]	; (810c004 <RCCEx_PLL3_Config+0x160>)
 810bf9e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 810bfa2:	62d3      	str	r3, [r2, #44]	; 0x2c
 810bfa4:	e00f      	b.n	810bfc6 <RCCEx_PLL3_Config+0x122>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 810bfa6:	683b      	ldr	r3, [r7, #0]
 810bfa8:	2b01      	cmp	r3, #1
 810bfaa:	d106      	bne.n	810bfba <RCCEx_PLL3_Config+0x116>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 810bfac:	4b15      	ldr	r3, [pc, #84]	; (810c004 <RCCEx_PLL3_Config+0x160>)
 810bfae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810bfb0:	4a14      	ldr	r2, [pc, #80]	; (810c004 <RCCEx_PLL3_Config+0x160>)
 810bfb2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 810bfb6:	62d3      	str	r3, [r2, #44]	; 0x2c
 810bfb8:	e005      	b.n	810bfc6 <RCCEx_PLL3_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 810bfba:	4b12      	ldr	r3, [pc, #72]	; (810c004 <RCCEx_PLL3_Config+0x160>)
 810bfbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810bfbe:	4a11      	ldr	r2, [pc, #68]	; (810c004 <RCCEx_PLL3_Config+0x160>)
 810bfc0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 810bfc4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 810bfc6:	4b0f      	ldr	r3, [pc, #60]	; (810c004 <RCCEx_PLL3_Config+0x160>)
 810bfc8:	681b      	ldr	r3, [r3, #0]
 810bfca:	4a0e      	ldr	r2, [pc, #56]	; (810c004 <RCCEx_PLL3_Config+0x160>)
 810bfcc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 810bfd0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 810bfd2:	f7f6 fd59 	bl	8102a88 <HAL_GetTick>
 810bfd6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 810bfd8:	e008      	b.n	810bfec <RCCEx_PLL3_Config+0x148>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 810bfda:	f7f6 fd55 	bl	8102a88 <HAL_GetTick>
 810bfde:	4602      	mov	r2, r0
 810bfe0:	68bb      	ldr	r3, [r7, #8]
 810bfe2:	1ad3      	subs	r3, r2, r3
 810bfe4:	2b02      	cmp	r3, #2
 810bfe6:	d901      	bls.n	810bfec <RCCEx_PLL3_Config+0x148>
      {
        return HAL_TIMEOUT;
 810bfe8:	2303      	movs	r3, #3
 810bfea:	e006      	b.n	810bffa <RCCEx_PLL3_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 810bfec:	4b05      	ldr	r3, [pc, #20]	; (810c004 <RCCEx_PLL3_Config+0x160>)
 810bfee:	681b      	ldr	r3, [r3, #0]
 810bff0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 810bff4:	2b00      	cmp	r3, #0
 810bff6:	d0f0      	beq.n	810bfda <RCCEx_PLL3_Config+0x136>
    }

  }


  return status;
 810bff8:	7bfb      	ldrb	r3, [r7, #15]
}
 810bffa:	4618      	mov	r0, r3
 810bffc:	3710      	adds	r7, #16
 810bffe:	46bd      	mov	sp, r7
 810c000:	bd80      	pop	{r7, pc}
 810c002:	bf00      	nop
 810c004:	58024400 	.word	0x58024400

0810c008 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 810c008:	b580      	push	{r7, lr}
 810c00a:	b08a      	sub	sp, #40	; 0x28
 810c00c:	af00      	add	r7, sp, #0
 810c00e:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 810c010:	687b      	ldr	r3, [r7, #4]
 810c012:	2b00      	cmp	r3, #0
 810c014:	d101      	bne.n	810c01a <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 810c016:	2301      	movs	r3, #1
 810c018:	e07c      	b.n	810c114 <HAL_SD_Init+0x10c>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 810c01a:	687b      	ldr	r3, [r7, #4]
 810c01c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 810c020:	b2db      	uxtb	r3, r3
 810c022:	2b00      	cmp	r3, #0
 810c024:	d10c      	bne.n	810c040 <HAL_SD_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 810c026:	687b      	ldr	r3, [r7, #4]
 810c028:	2200      	movs	r2, #0
 810c02a:	771a      	strb	r2, [r3, #28]

#if (USE_SD_TRANSCEIVER != 0U)
    /* Force  SDMMC_TRANSCEIVER_PRESENT for Legacy usage */
    if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_UNKNOWN)
 810c02c:	687b      	ldr	r3, [r7, #4]
 810c02e:	699b      	ldr	r3, [r3, #24]
 810c030:	2b00      	cmp	r3, #0
 810c032:	d102      	bne.n	810c03a <HAL_SD_Init+0x32>
    {
      hsd->Init.TranceiverPresent = SDMMC_TRANSCEIVER_PRESENT;
 810c034:	687b      	ldr	r3, [r7, #4]
 810c036:	2202      	movs	r2, #2
 810c038:	619a      	str	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 810c03a:	6878      	ldr	r0, [r7, #4]
 810c03c:	f7f5 fe0c 	bl	8101c58 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 810c040:	687b      	ldr	r3, [r7, #4]
 810c042:	2203      	movs	r2, #3
 810c044:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 810c048:	6878      	ldr	r0, [r7, #4]
 810c04a:	f000 f867 	bl	810c11c <HAL_SD_InitCard>
 810c04e:	4603      	mov	r3, r0
 810c050:	2b00      	cmp	r3, #0
 810c052:	d001      	beq.n	810c058 <HAL_SD_Init+0x50>
  {
    return HAL_ERROR;
 810c054:	2301      	movs	r3, #1
 810c056:	e05d      	b.n	810c114 <HAL_SD_Init+0x10c>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 810c058:	f107 0308 	add.w	r3, r7, #8
 810c05c:	4619      	mov	r1, r3
 810c05e:	6878      	ldr	r0, [r7, #4]
 810c060:	f000 fdbe 	bl	810cbe0 <HAL_SD_GetCardStatus>
 810c064:	4603      	mov	r3, r0
 810c066:	2b00      	cmp	r3, #0
 810c068:	d001      	beq.n	810c06e <HAL_SD_Init+0x66>
  {
    return HAL_ERROR;
 810c06a:	2301      	movs	r3, #1
 810c06c:	e052      	b.n	810c114 <HAL_SD_Init+0x10c>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 810c06e:	7e3b      	ldrb	r3, [r7, #24]
 810c070:	b2db      	uxtb	r3, r3
 810c072:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 810c074:	7e7b      	ldrb	r3, [r7, #25]
 810c076:	b2db      	uxtb	r3, r3
 810c078:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 810c07a:	687b      	ldr	r3, [r7, #4]
 810c07c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810c07e:	2b01      	cmp	r3, #1
 810c080:	d10a      	bne.n	810c098 <HAL_SD_Init+0x90>
 810c082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810c084:	2b00      	cmp	r3, #0
 810c086:	d102      	bne.n	810c08e <HAL_SD_Init+0x86>
 810c088:	6a3b      	ldr	r3, [r7, #32]
 810c08a:	2b00      	cmp	r3, #0
 810c08c:	d004      	beq.n	810c098 <HAL_SD_Init+0x90>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 810c08e:	687b      	ldr	r3, [r7, #4]
 810c090:	f44f 7200 	mov.w	r2, #512	; 0x200
 810c094:	65da      	str	r2, [r3, #92]	; 0x5c
 810c096:	e00b      	b.n	810c0b0 <HAL_SD_Init+0xa8>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 810c098:	687b      	ldr	r3, [r7, #4]
 810c09a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810c09c:	2b01      	cmp	r3, #1
 810c09e:	d104      	bne.n	810c0aa <HAL_SD_Init+0xa2>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 810c0a0:	687b      	ldr	r3, [r7, #4]
 810c0a2:	f44f 7280 	mov.w	r2, #256	; 0x100
 810c0a6:	65da      	str	r2, [r3, #92]	; 0x5c
 810c0a8:	e002      	b.n	810c0b0 <HAL_SD_Init+0xa8>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 810c0aa:	687b      	ldr	r3, [r7, #4]
 810c0ac:	2200      	movs	r2, #0
 810c0ae:	65da      	str	r2, [r3, #92]	; 0x5c
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 810c0b0:	687b      	ldr	r3, [r7, #4]
 810c0b2:	68db      	ldr	r3, [r3, #12]
 810c0b4:	4619      	mov	r1, r3
 810c0b6:	6878      	ldr	r0, [r7, #4]
 810c0b8:	f000 fe74 	bl	810cda4 <HAL_SD_ConfigWideBusOperation>
 810c0bc:	4603      	mov	r3, r0
 810c0be:	2b00      	cmp	r3, #0
 810c0c0:	d001      	beq.n	810c0c6 <HAL_SD_Init+0xbe>
  {
    return HAL_ERROR;
 810c0c2:	2301      	movs	r3, #1
 810c0c4:	e026      	b.n	810c114 <HAL_SD_Init+0x10c>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 810c0c6:	f7f6 fcdf 	bl	8102a88 <HAL_GetTick>
 810c0ca:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 810c0cc:	e011      	b.n	810c0f2 <HAL_SD_Init+0xea>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 810c0ce:	f7f6 fcdb 	bl	8102a88 <HAL_GetTick>
 810c0d2:	4602      	mov	r2, r0
 810c0d4:	69fb      	ldr	r3, [r7, #28]
 810c0d6:	1ad3      	subs	r3, r2, r3
 810c0d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 810c0dc:	d109      	bne.n	810c0f2 <HAL_SD_Init+0xea>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 810c0de:	687b      	ldr	r3, [r7, #4]
 810c0e0:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 810c0e4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 810c0e6:	687b      	ldr	r3, [r7, #4]
 810c0e8:	2201      	movs	r2, #1
 810c0ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_TIMEOUT;
 810c0ee:	2303      	movs	r3, #3
 810c0f0:	e010      	b.n	810c114 <HAL_SD_Init+0x10c>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 810c0f2:	6878      	ldr	r0, [r7, #4]
 810c0f4:	f000 ff6a 	bl	810cfcc <HAL_SD_GetCardState>
 810c0f8:	4603      	mov	r3, r0
 810c0fa:	2b04      	cmp	r3, #4
 810c0fc:	d1e7      	bne.n	810c0ce <HAL_SD_Init+0xc6>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 810c0fe:	687b      	ldr	r3, [r7, #4]
 810c100:	2200      	movs	r2, #0
 810c102:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 810c104:	687b      	ldr	r3, [r7, #4]
 810c106:	2200      	movs	r2, #0
 810c108:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 810c10a:	687b      	ldr	r3, [r7, #4]
 810c10c:	2201      	movs	r2, #1
 810c10e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 810c112:	2300      	movs	r3, #0
}
 810c114:	4618      	mov	r0, r3
 810c116:	3728      	adds	r7, #40	; 0x28
 810c118:	46bd      	mov	sp, r7
 810c11a:	bd80      	pop	{r7, pc}

0810c11c <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 810c11c:	b5b0      	push	{r4, r5, r7, lr}
 810c11e:	b08e      	sub	sp, #56	; 0x38
 810c120:	af04      	add	r7, sp, #16
 810c122:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 810c124:	2300      	movs	r3, #0
 810c126:	60bb      	str	r3, [r7, #8]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 810c128:	2300      	movs	r3, #0
 810c12a:	60fb      	str	r3, [r7, #12]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 810c12c:	2300      	movs	r3, #0
 810c12e:	613b      	str	r3, [r7, #16]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 810c130:	2300      	movs	r3, #0
 810c132:	617b      	str	r3, [r7, #20]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 810c134:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 810c138:	f7fe fd20 	bl	810ab7c <HAL_RCCEx_GetPeriphCLKFreq>
 810c13c:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 810c13e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810c140:	2b00      	cmp	r3, #0
 810c142:	d109      	bne.n	810c158 <HAL_SD_InitCard+0x3c>
  {
    hsd->State = HAL_SD_STATE_READY;
 810c144:	687b      	ldr	r3, [r7, #4]
 810c146:	2201      	movs	r2, #1
 810c148:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 810c14c:	687b      	ldr	r3, [r7, #4]
 810c14e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 810c152:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 810c154:	2301      	movs	r3, #1
 810c156:	e079      	b.n	810c24c <HAL_SD_InitCard+0x130>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 810c158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810c15a:	0a1b      	lsrs	r3, r3, #8
 810c15c:	4a3d      	ldr	r2, [pc, #244]	; (810c254 <HAL_SD_InitCard+0x138>)
 810c15e:	fba2 2303 	umull	r2, r3, r2, r3
 810c162:	091b      	lsrs	r3, r3, #4
 810c164:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
  Init.TranceiverPresent = hsd->Init.TranceiverPresent;
 810c166:	687b      	ldr	r3, [r7, #4]
 810c168:	699b      	ldr	r3, [r3, #24]
 810c16a:	61fb      	str	r3, [r7, #28]

  if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 810c16c:	687b      	ldr	r3, [r7, #4]
 810c16e:	699b      	ldr	r3, [r3, #24]
 810c170:	2b02      	cmp	r3, #2
 810c172:	d107      	bne.n	810c184 <HAL_SD_InitCard+0x68>
  {
    /* Set Transceiver polarity */
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
 810c174:	687b      	ldr	r3, [r7, #4]
 810c176:	681b      	ldr	r3, [r3, #0]
 810c178:	681a      	ldr	r2, [r3, #0]
 810c17a:	687b      	ldr	r3, [r7, #4]
 810c17c:	681b      	ldr	r3, [r3, #0]
 810c17e:	f042 0210 	orr.w	r2, r2, #16
 810c182:	601a      	str	r2, [r3, #0]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 810c184:	687b      	ldr	r3, [r7, #4]
 810c186:	681d      	ldr	r5, [r3, #0]
 810c188:	466c      	mov	r4, sp
 810c18a:	f107 0314 	add.w	r3, r7, #20
 810c18e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 810c192:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 810c196:	f107 0308 	add.w	r3, r7, #8
 810c19a:	cb0e      	ldmia	r3, {r1, r2, r3}
 810c19c:	4628      	mov	r0, r5
 810c19e:	f005 f98f 	bl	81114c0 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 810c1a2:	687b      	ldr	r3, [r7, #4]
 810c1a4:	681b      	ldr	r3, [r3, #0]
 810c1a6:	4618      	mov	r0, r3
 810c1a8:	f005 f9d2 	bl	8111550 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 810c1ac:	69bb      	ldr	r3, [r7, #24]
 810c1ae:	005b      	lsls	r3, r3, #1
 810c1b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 810c1b2:	fbb2 f3f3 	udiv	r3, r2, r3
 810c1b6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 810c1b8:	4a27      	ldr	r2, [pc, #156]	; (810c258 <HAL_SD_InitCard+0x13c>)
 810c1ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810c1bc:	fbb2 f3f3 	udiv	r3, r2, r3
 810c1c0:	3301      	adds	r3, #1
 810c1c2:	4618      	mov	r0, r3
 810c1c4:	f7f6 fc6c 	bl	8102aa0 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 810c1c8:	6878      	ldr	r0, [r7, #4]
 810c1ca:	f000 ffdb 	bl	810d184 <SD_PowerON>
 810c1ce:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 810c1d0:	6a3b      	ldr	r3, [r7, #32]
 810c1d2:	2b00      	cmp	r3, #0
 810c1d4:	d00b      	beq.n	810c1ee <HAL_SD_InitCard+0xd2>
  {
    hsd->State = HAL_SD_STATE_READY;
 810c1d6:	687b      	ldr	r3, [r7, #4]
 810c1d8:	2201      	movs	r2, #1
 810c1da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 810c1de:	687b      	ldr	r3, [r7, #4]
 810c1e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 810c1e2:	6a3b      	ldr	r3, [r7, #32]
 810c1e4:	431a      	orrs	r2, r3
 810c1e6:	687b      	ldr	r3, [r7, #4]
 810c1e8:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 810c1ea:	2301      	movs	r3, #1
 810c1ec:	e02e      	b.n	810c24c <HAL_SD_InitCard+0x130>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 810c1ee:	6878      	ldr	r0, [r7, #4]
 810c1f0:	f000 ff0c 	bl	810d00c <SD_InitCard>
 810c1f4:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 810c1f6:	6a3b      	ldr	r3, [r7, #32]
 810c1f8:	2b00      	cmp	r3, #0
 810c1fa:	d00b      	beq.n	810c214 <HAL_SD_InitCard+0xf8>
  {
    hsd->State = HAL_SD_STATE_READY;
 810c1fc:	687b      	ldr	r3, [r7, #4]
 810c1fe:	2201      	movs	r2, #1
 810c200:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 810c204:	687b      	ldr	r3, [r7, #4]
 810c206:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 810c208:	6a3b      	ldr	r3, [r7, #32]
 810c20a:	431a      	orrs	r2, r3
 810c20c:	687b      	ldr	r3, [r7, #4]
 810c20e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 810c210:	2301      	movs	r3, #1
 810c212:	e01b      	b.n	810c24c <HAL_SD_InitCard+0x130>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 810c214:	687b      	ldr	r3, [r7, #4]
 810c216:	681b      	ldr	r3, [r3, #0]
 810c218:	f44f 7100 	mov.w	r1, #512	; 0x200
 810c21c:	4618      	mov	r0, r3
 810c21e:	f005 fa2d 	bl	811167c <SDMMC_CmdBlockLength>
 810c222:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 810c224:	6a3b      	ldr	r3, [r7, #32]
 810c226:	2b00      	cmp	r3, #0
 810c228:	d00f      	beq.n	810c24a <HAL_SD_InitCard+0x12e>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 810c22a:	687b      	ldr	r3, [r7, #4]
 810c22c:	681b      	ldr	r3, [r3, #0]
 810c22e:	4a0b      	ldr	r2, [pc, #44]	; (810c25c <HAL_SD_InitCard+0x140>)
 810c230:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 810c232:	687b      	ldr	r3, [r7, #4]
 810c234:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 810c236:	6a3b      	ldr	r3, [r7, #32]
 810c238:	431a      	orrs	r2, r3
 810c23a:	687b      	ldr	r3, [r7, #4]
 810c23c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 810c23e:	687b      	ldr	r3, [r7, #4]
 810c240:	2201      	movs	r2, #1
 810c242:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 810c246:	2301      	movs	r3, #1
 810c248:	e000      	b.n	810c24c <HAL_SD_InitCard+0x130>
  }

  return HAL_OK;
 810c24a:	2300      	movs	r3, #0
}
 810c24c:	4618      	mov	r0, r3
 810c24e:	3728      	adds	r7, #40	; 0x28
 810c250:	46bd      	mov	sp, r7
 810c252:	bdb0      	pop	{r4, r5, r7, pc}
 810c254:	014f8b59 	.word	0x014f8b59
 810c258:	00012110 	.word	0x00012110
 810c25c:	1fe00fff 	.word	0x1fe00fff

0810c260 <HAL_SD_ReadBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd,
                                        uint32_t NumberOfBlocks)
{
 810c260:	b580      	push	{r7, lr}
 810c262:	b08c      	sub	sp, #48	; 0x30
 810c264:	af00      	add	r7, sp, #0
 810c266:	60f8      	str	r0, [r7, #12]
 810c268:	60b9      	str	r1, [r7, #8]
 810c26a:	607a      	str	r2, [r7, #4]
 810c26c:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 810c26e:	687b      	ldr	r3, [r7, #4]
 810c270:	62bb      	str	r3, [r7, #40]	; 0x28

  if (NULL == pData)
 810c272:	68bb      	ldr	r3, [r7, #8]
 810c274:	2b00      	cmp	r3, #0
 810c276:	d107      	bne.n	810c288 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 810c278:	68fb      	ldr	r3, [r7, #12]
 810c27a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810c27c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 810c280:	68fb      	ldr	r3, [r7, #12]
 810c282:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 810c284:	2301      	movs	r3, #1
 810c286:	e08d      	b.n	810c3a4 <HAL_SD_ReadBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 810c288:	68fb      	ldr	r3, [r7, #12]
 810c28a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 810c28e:	b2db      	uxtb	r3, r3
 810c290:	2b01      	cmp	r3, #1
 810c292:	f040 8086 	bne.w	810c3a2 <HAL_SD_ReadBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 810c296:	68fb      	ldr	r3, [r7, #12]
 810c298:	2200      	movs	r2, #0
 810c29a:	639a      	str	r2, [r3, #56]	; 0x38

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 810c29c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 810c29e:	683b      	ldr	r3, [r7, #0]
 810c2a0:	441a      	add	r2, r3
 810c2a2:	68fb      	ldr	r3, [r7, #12]
 810c2a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810c2a6:	429a      	cmp	r2, r3
 810c2a8:	d907      	bls.n	810c2ba <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 810c2aa:	68fb      	ldr	r3, [r7, #12]
 810c2ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810c2ae:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 810c2b2:	68fb      	ldr	r3, [r7, #12]
 810c2b4:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 810c2b6:	2301      	movs	r3, #1
 810c2b8:	e074      	b.n	810c3a4 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 810c2ba:	68fb      	ldr	r3, [r7, #12]
 810c2bc:	2203      	movs	r2, #3
 810c2be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 810c2c2:	68fb      	ldr	r3, [r7, #12]
 810c2c4:	681b      	ldr	r3, [r3, #0]
 810c2c6:	2200      	movs	r2, #0
 810c2c8:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pRxBuffPtr = pData;
 810c2ca:	68fb      	ldr	r3, [r7, #12]
 810c2cc:	68ba      	ldr	r2, [r7, #8]
 810c2ce:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 810c2d0:	683b      	ldr	r3, [r7, #0]
 810c2d2:	025a      	lsls	r2, r3, #9
 810c2d4:	68fb      	ldr	r3, [r7, #12]
 810c2d6:	62da      	str	r2, [r3, #44]	; 0x2c

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 810c2d8:	68fb      	ldr	r3, [r7, #12]
 810c2da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810c2dc:	2b01      	cmp	r3, #1
 810c2de:	d002      	beq.n	810c2e6 <HAL_SD_ReadBlocks_DMA+0x86>
    {
      add *= 512U;
 810c2e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810c2e2:	025b      	lsls	r3, r3, #9
 810c2e4:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 810c2e6:	f04f 33ff 	mov.w	r3, #4294967295
 810c2ea:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 810c2ec:	683b      	ldr	r3, [r7, #0]
 810c2ee:	025b      	lsls	r3, r3, #9
 810c2f0:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 810c2f2:	2390      	movs	r3, #144	; 0x90
 810c2f4:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 810c2f6:	2302      	movs	r3, #2
 810c2f8:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 810c2fa:	2300      	movs	r3, #0
 810c2fc:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 810c2fe:	2300      	movs	r3, #0
 810c300:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 810c302:	68fb      	ldr	r3, [r7, #12]
 810c304:	681b      	ldr	r3, [r3, #0]
 810c306:	f107 0210 	add.w	r2, r7, #16
 810c30a:	4611      	mov	r1, r2
 810c30c:	4618      	mov	r0, r3
 810c30e:	f005 f989 	bl	8111624 <SDMMC_ConfigData>

    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 810c312:	68fb      	ldr	r3, [r7, #12]
 810c314:	681b      	ldr	r3, [r3, #0]
 810c316:	68da      	ldr	r2, [r3, #12]
 810c318:	68fb      	ldr	r3, [r7, #12]
 810c31a:	681b      	ldr	r3, [r3, #0]
 810c31c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 810c320:	60da      	str	r2, [r3, #12]
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 810c322:	68fb      	ldr	r3, [r7, #12]
 810c324:	681b      	ldr	r3, [r3, #0]
 810c326:	68ba      	ldr	r2, [r7, #8]
 810c328:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 810c32a:	68fb      	ldr	r3, [r7, #12]
 810c32c:	681b      	ldr	r3, [r3, #0]
 810c32e:	2201      	movs	r2, #1
 810c330:	651a      	str	r2, [r3, #80]	; 0x50

    /* Read Blocks in DMA mode */
    if (NumberOfBlocks > 1U)
 810c332:	683b      	ldr	r3, [r7, #0]
 810c334:	2b01      	cmp	r3, #1
 810c336:	d90a      	bls.n	810c34e <HAL_SD_ReadBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 810c338:	68fb      	ldr	r3, [r7, #12]
 810c33a:	2282      	movs	r2, #130	; 0x82
 810c33c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 810c33e:	68fb      	ldr	r3, [r7, #12]
 810c340:	681b      	ldr	r3, [r3, #0]
 810c342:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 810c344:	4618      	mov	r0, r3
 810c346:	f005 f9df 	bl	8111708 <SDMMC_CmdReadMultiBlock>
 810c34a:	62f8      	str	r0, [r7, #44]	; 0x2c
 810c34c:	e009      	b.n	810c362 <HAL_SD_ReadBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 810c34e:	68fb      	ldr	r3, [r7, #12]
 810c350:	2281      	movs	r2, #129	; 0x81
 810c352:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 810c354:	68fb      	ldr	r3, [r7, #12]
 810c356:	681b      	ldr	r3, [r3, #0]
 810c358:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 810c35a:	4618      	mov	r0, r3
 810c35c:	f005 f9b1 	bl	81116c2 <SDMMC_CmdReadSingleBlock>
 810c360:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 810c362:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810c364:	2b00      	cmp	r3, #0
 810c366:	d012      	beq.n	810c38e <HAL_SD_ReadBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 810c368:	68fb      	ldr	r3, [r7, #12]
 810c36a:	681b      	ldr	r3, [r3, #0]
 810c36c:	4a0f      	ldr	r2, [pc, #60]	; (810c3ac <HAL_SD_ReadBlocks_DMA+0x14c>)
 810c36e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 810c370:	68fb      	ldr	r3, [r7, #12]
 810c372:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 810c374:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810c376:	431a      	orrs	r2, r3
 810c378:	68fb      	ldr	r3, [r7, #12]
 810c37a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 810c37c:	68fb      	ldr	r3, [r7, #12]
 810c37e:	2201      	movs	r2, #1
 810c380:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 810c384:	68fb      	ldr	r3, [r7, #12]
 810c386:	2200      	movs	r2, #0
 810c388:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 810c38a:	2301      	movs	r3, #1
 810c38c:	e00a      	b.n	810c3a4 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 810c38e:	68fb      	ldr	r3, [r7, #12]
 810c390:	681b      	ldr	r3, [r3, #0]
 810c392:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 810c394:	68fb      	ldr	r3, [r7, #12]
 810c396:	681b      	ldr	r3, [r3, #0]
 810c398:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 810c39c:	63da      	str	r2, [r3, #60]	; 0x3c


    return HAL_OK;
 810c39e:	2300      	movs	r3, #0
 810c3a0:	e000      	b.n	810c3a4 <HAL_SD_ReadBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 810c3a2:	2302      	movs	r3, #2
  }
}
 810c3a4:	4618      	mov	r0, r3
 810c3a6:	3730      	adds	r7, #48	; 0x30
 810c3a8:	46bd      	mov	sp, r7
 810c3aa:	bd80      	pop	{r7, pc}
 810c3ac:	1fe00fff 	.word	0x1fe00fff

0810c3b0 <HAL_SD_WriteBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd,
                                         uint32_t NumberOfBlocks)
{
 810c3b0:	b580      	push	{r7, lr}
 810c3b2:	b08c      	sub	sp, #48	; 0x30
 810c3b4:	af00      	add	r7, sp, #0
 810c3b6:	60f8      	str	r0, [r7, #12]
 810c3b8:	60b9      	str	r1, [r7, #8]
 810c3ba:	607a      	str	r2, [r7, #4]
 810c3bc:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 810c3be:	687b      	ldr	r3, [r7, #4]
 810c3c0:	62bb      	str	r3, [r7, #40]	; 0x28

  if (NULL == pData)
 810c3c2:	68bb      	ldr	r3, [r7, #8]
 810c3c4:	2b00      	cmp	r3, #0
 810c3c6:	d107      	bne.n	810c3d8 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 810c3c8:	68fb      	ldr	r3, [r7, #12]
 810c3ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810c3cc:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 810c3d0:	68fb      	ldr	r3, [r7, #12]
 810c3d2:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 810c3d4:	2301      	movs	r3, #1
 810c3d6:	e08d      	b.n	810c4f4 <HAL_SD_WriteBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 810c3d8:	68fb      	ldr	r3, [r7, #12]
 810c3da:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 810c3de:	b2db      	uxtb	r3, r3
 810c3e0:	2b01      	cmp	r3, #1
 810c3e2:	f040 8086 	bne.w	810c4f2 <HAL_SD_WriteBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 810c3e6:	68fb      	ldr	r3, [r7, #12]
 810c3e8:	2200      	movs	r2, #0
 810c3ea:	639a      	str	r2, [r3, #56]	; 0x38

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 810c3ec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 810c3ee:	683b      	ldr	r3, [r7, #0]
 810c3f0:	441a      	add	r2, r3
 810c3f2:	68fb      	ldr	r3, [r7, #12]
 810c3f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810c3f6:	429a      	cmp	r2, r3
 810c3f8:	d907      	bls.n	810c40a <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 810c3fa:	68fb      	ldr	r3, [r7, #12]
 810c3fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810c3fe:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 810c402:	68fb      	ldr	r3, [r7, #12]
 810c404:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 810c406:	2301      	movs	r3, #1
 810c408:	e074      	b.n	810c4f4 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 810c40a:	68fb      	ldr	r3, [r7, #12]
 810c40c:	2203      	movs	r2, #3
 810c40e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 810c412:	68fb      	ldr	r3, [r7, #12]
 810c414:	681b      	ldr	r3, [r3, #0]
 810c416:	2200      	movs	r2, #0
 810c418:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pTxBuffPtr = pData;
 810c41a:	68fb      	ldr	r3, [r7, #12]
 810c41c:	68ba      	ldr	r2, [r7, #8]
 810c41e:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 810c420:	683b      	ldr	r3, [r7, #0]
 810c422:	025a      	lsls	r2, r3, #9
 810c424:	68fb      	ldr	r3, [r7, #12]
 810c426:	625a      	str	r2, [r3, #36]	; 0x24

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 810c428:	68fb      	ldr	r3, [r7, #12]
 810c42a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810c42c:	2b01      	cmp	r3, #1
 810c42e:	d002      	beq.n	810c436 <HAL_SD_WriteBlocks_DMA+0x86>
    {
      add *= 512U;
 810c430:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810c432:	025b      	lsls	r3, r3, #9
 810c434:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 810c436:	f04f 33ff 	mov.w	r3, #4294967295
 810c43a:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 810c43c:	683b      	ldr	r3, [r7, #0]
 810c43e:	025b      	lsls	r3, r3, #9
 810c440:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 810c442:	2390      	movs	r3, #144	; 0x90
 810c444:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 810c446:	2300      	movs	r3, #0
 810c448:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 810c44a:	2300      	movs	r3, #0
 810c44c:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 810c44e:	2300      	movs	r3, #0
 810c450:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 810c452:	68fb      	ldr	r3, [r7, #12]
 810c454:	681b      	ldr	r3, [r3, #0]
 810c456:	f107 0210 	add.w	r2, r7, #16
 810c45a:	4611      	mov	r1, r2
 810c45c:	4618      	mov	r0, r3
 810c45e:	f005 f8e1 	bl	8111624 <SDMMC_ConfigData>


    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 810c462:	68fb      	ldr	r3, [r7, #12]
 810c464:	681b      	ldr	r3, [r3, #0]
 810c466:	68da      	ldr	r2, [r3, #12]
 810c468:	68fb      	ldr	r3, [r7, #12]
 810c46a:	681b      	ldr	r3, [r3, #0]
 810c46c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 810c470:	60da      	str	r2, [r3, #12]

    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 810c472:	68fb      	ldr	r3, [r7, #12]
 810c474:	681b      	ldr	r3, [r3, #0]
 810c476:	68ba      	ldr	r2, [r7, #8]
 810c478:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 810c47a:	68fb      	ldr	r3, [r7, #12]
 810c47c:	681b      	ldr	r3, [r3, #0]
 810c47e:	2201      	movs	r2, #1
 810c480:	651a      	str	r2, [r3, #80]	; 0x50

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 810c482:	683b      	ldr	r3, [r7, #0]
 810c484:	2b01      	cmp	r3, #1
 810c486:	d90a      	bls.n	810c49e <HAL_SD_WriteBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 810c488:	68fb      	ldr	r3, [r7, #12]
 810c48a:	22a0      	movs	r2, #160	; 0xa0
 810c48c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 810c48e:	68fb      	ldr	r3, [r7, #12]
 810c490:	681b      	ldr	r3, [r3, #0]
 810c492:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 810c494:	4618      	mov	r0, r3
 810c496:	f005 f97d 	bl	8111794 <SDMMC_CmdWriteMultiBlock>
 810c49a:	62f8      	str	r0, [r7, #44]	; 0x2c
 810c49c:	e009      	b.n	810c4b2 <HAL_SD_WriteBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 810c49e:	68fb      	ldr	r3, [r7, #12]
 810c4a0:	2290      	movs	r2, #144	; 0x90
 810c4a2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 810c4a4:	68fb      	ldr	r3, [r7, #12]
 810c4a6:	681b      	ldr	r3, [r3, #0]
 810c4a8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 810c4aa:	4618      	mov	r0, r3
 810c4ac:	f005 f94f 	bl	811174e <SDMMC_CmdWriteSingleBlock>
 810c4b0:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 810c4b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810c4b4:	2b00      	cmp	r3, #0
 810c4b6:	d012      	beq.n	810c4de <HAL_SD_WriteBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 810c4b8:	68fb      	ldr	r3, [r7, #12]
 810c4ba:	681b      	ldr	r3, [r3, #0]
 810c4bc:	4a0f      	ldr	r2, [pc, #60]	; (810c4fc <HAL_SD_WriteBlocks_DMA+0x14c>)
 810c4be:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 810c4c0:	68fb      	ldr	r3, [r7, #12]
 810c4c2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 810c4c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810c4c6:	431a      	orrs	r2, r3
 810c4c8:	68fb      	ldr	r3, [r7, #12]
 810c4ca:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 810c4cc:	68fb      	ldr	r3, [r7, #12]
 810c4ce:	2201      	movs	r2, #1
 810c4d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 810c4d4:	68fb      	ldr	r3, [r7, #12]
 810c4d6:	2200      	movs	r2, #0
 810c4d8:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 810c4da:	2301      	movs	r3, #1
 810c4dc:	e00a      	b.n	810c4f4 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 810c4de:	68fb      	ldr	r3, [r7, #12]
 810c4e0:	681b      	ldr	r3, [r3, #0]
 810c4e2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 810c4e4:	68fb      	ldr	r3, [r7, #12]
 810c4e6:	681b      	ldr	r3, [r3, #0]
 810c4e8:	f442 728d 	orr.w	r2, r2, #282	; 0x11a
 810c4ec:	63da      	str	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 810c4ee:	2300      	movs	r3, #0
 810c4f0:	e000      	b.n	810c4f4 <HAL_SD_WriteBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 810c4f2:	2302      	movs	r3, #2
  }
}
 810c4f4:	4618      	mov	r0, r3
 810c4f6:	3730      	adds	r7, #48	; 0x30
 810c4f8:	46bd      	mov	sp, r7
 810c4fa:	bd80      	pop	{r7, pc}
 810c4fc:	1fe00fff 	.word	0x1fe00fff

0810c500 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 810c500:	b580      	push	{r7, lr}
 810c502:	b084      	sub	sp, #16
 810c504:	af00      	add	r7, sp, #0
 810c506:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 810c508:	687b      	ldr	r3, [r7, #4]
 810c50a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810c50c:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 810c50e:	687b      	ldr	r3, [r7, #4]
 810c510:	681b      	ldr	r3, [r3, #0]
 810c512:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 810c514:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 810c518:	2b00      	cmp	r3, #0
 810c51a:	d008      	beq.n	810c52e <HAL_SD_IRQHandler+0x2e>
 810c51c:	68fb      	ldr	r3, [r7, #12]
 810c51e:	f003 0308 	and.w	r3, r3, #8
 810c522:	2b00      	cmp	r3, #0
 810c524:	d003      	beq.n	810c52e <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 810c526:	6878      	ldr	r0, [r7, #4]
 810c528:	f001 f992 	bl	810d850 <SD_Read_IT>
 810c52c:	e199      	b.n	810c862 <HAL_SD_IRQHandler+0x362>
  }

  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 810c52e:	687b      	ldr	r3, [r7, #4]
 810c530:	681b      	ldr	r3, [r3, #0]
 810c532:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 810c534:	f403 7380 	and.w	r3, r3, #256	; 0x100
 810c538:	2b00      	cmp	r3, #0
 810c53a:	f000 80ae 	beq.w	810c69a <HAL_SD_IRQHandler+0x19a>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 810c53e:	687b      	ldr	r3, [r7, #4]
 810c540:	681b      	ldr	r3, [r3, #0]
 810c542:	f44f 7280 	mov.w	r2, #256	; 0x100
 810c546:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 810c548:	687b      	ldr	r3, [r7, #4]
 810c54a:	681b      	ldr	r3, [r3, #0]
 810c54c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810c54e:	687a      	ldr	r2, [r7, #4]
 810c550:	6812      	ldr	r2, [r2, #0]
 810c552:	f423 4341 	bic.w	r3, r3, #49408	; 0xc100
 810c556:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 810c55a:	63d3      	str	r3, [r2, #60]	; 0x3c
                        SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE | \
                        SDMMC_IT_RXFIFOHF);

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 810c55c:	687b      	ldr	r3, [r7, #4]
 810c55e:	681b      	ldr	r3, [r3, #0]
 810c560:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 810c562:	687b      	ldr	r3, [r7, #4]
 810c564:	681b      	ldr	r3, [r3, #0]
 810c566:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 810c56a:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 810c56c:	687b      	ldr	r3, [r7, #4]
 810c56e:	681b      	ldr	r3, [r3, #0]
 810c570:	68da      	ldr	r2, [r3, #12]
 810c572:	687b      	ldr	r3, [r7, #4]
 810c574:	681b      	ldr	r3, [r3, #0]
 810c576:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 810c57a:	60da      	str	r2, [r3, #12]

    if ((context & SD_CONTEXT_IT) != 0U)
 810c57c:	68fb      	ldr	r3, [r7, #12]
 810c57e:	f003 0308 	and.w	r3, r3, #8
 810c582:	2b00      	cmp	r3, #0
 810c584:	d038      	beq.n	810c5f8 <HAL_SD_IRQHandler+0xf8>
    {
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 810c586:	68fb      	ldr	r3, [r7, #12]
 810c588:	f003 0302 	and.w	r3, r3, #2
 810c58c:	2b00      	cmp	r3, #0
 810c58e:	d104      	bne.n	810c59a <HAL_SD_IRQHandler+0x9a>
 810c590:	68fb      	ldr	r3, [r7, #12]
 810c592:	f003 0320 	and.w	r3, r3, #32
 810c596:	2b00      	cmp	r3, #0
 810c598:	d011      	beq.n	810c5be <HAL_SD_IRQHandler+0xbe>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 810c59a:	687b      	ldr	r3, [r7, #4]
 810c59c:	681b      	ldr	r3, [r3, #0]
 810c59e:	4618      	mov	r0, r3
 810c5a0:	f005 f91c 	bl	81117dc <SDMMC_CmdStopTransfer>
 810c5a4:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 810c5a6:	68bb      	ldr	r3, [r7, #8]
 810c5a8:	2b00      	cmp	r3, #0
 810c5aa:	d008      	beq.n	810c5be <HAL_SD_IRQHandler+0xbe>
        {
          hsd->ErrorCode |= errorstate;
 810c5ac:	687b      	ldr	r3, [r7, #4]
 810c5ae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 810c5b0:	68bb      	ldr	r3, [r7, #8]
 810c5b2:	431a      	orrs	r2, r3
 810c5b4:	687b      	ldr	r3, [r7, #4]
 810c5b6:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 810c5b8:	6878      	ldr	r0, [r7, #4]
 810c5ba:	f000 f957 	bl	810c86c <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 810c5be:	687b      	ldr	r3, [r7, #4]
 810c5c0:	681b      	ldr	r3, [r3, #0]
 810c5c2:	4aa0      	ldr	r2, [pc, #640]	; (810c844 <HAL_SD_IRQHandler+0x344>)
 810c5c4:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 810c5c6:	687b      	ldr	r3, [r7, #4]
 810c5c8:	2201      	movs	r2, #1
 810c5ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 810c5ce:	687b      	ldr	r3, [r7, #4]
 810c5d0:	2200      	movs	r2, #0
 810c5d2:	631a      	str	r2, [r3, #48]	; 0x30
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 810c5d4:	68fb      	ldr	r3, [r7, #12]
 810c5d6:	f003 0301 	and.w	r3, r3, #1
 810c5da:	2b00      	cmp	r3, #0
 810c5dc:	d104      	bne.n	810c5e8 <HAL_SD_IRQHandler+0xe8>
 810c5de:	68fb      	ldr	r3, [r7, #12]
 810c5e0:	f003 0302 	and.w	r3, r3, #2
 810c5e4:	2b00      	cmp	r3, #0
 810c5e6:	d003      	beq.n	810c5f0 <HAL_SD_IRQHandler+0xf0>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 810c5e8:	6878      	ldr	r0, [r7, #4]
 810c5ea:	f007 f94d 	bl	8113888 <HAL_SD_RxCpltCallback>
 810c5ee:	e138      	b.n	810c862 <HAL_SD_IRQHandler+0x362>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 810c5f0:	6878      	ldr	r0, [r7, #4]
 810c5f2:	f007 f93f 	bl	8113874 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 810c5f6:	e134      	b.n	810c862 <HAL_SD_IRQHandler+0x362>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 810c5f8:	68fb      	ldr	r3, [r7, #12]
 810c5fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 810c5fe:	2b00      	cmp	r3, #0
 810c600:	f000 812f 	beq.w	810c862 <HAL_SD_IRQHandler+0x362>
      hsd->Instance->DLEN = 0;
 810c604:	687b      	ldr	r3, [r7, #4]
 810c606:	681b      	ldr	r3, [r3, #0]
 810c608:	2200      	movs	r2, #0
 810c60a:	629a      	str	r2, [r3, #40]	; 0x28
      hsd->Instance->DCTRL = 0;
 810c60c:	687b      	ldr	r3, [r7, #4]
 810c60e:	681b      	ldr	r3, [r3, #0]
 810c610:	2200      	movs	r2, #0
 810c612:	62da      	str	r2, [r3, #44]	; 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 810c614:	687b      	ldr	r3, [r7, #4]
 810c616:	681b      	ldr	r3, [r3, #0]
 810c618:	2200      	movs	r2, #0
 810c61a:	651a      	str	r2, [r3, #80]	; 0x50
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 810c61c:	68fb      	ldr	r3, [r7, #12]
 810c61e:	f003 0302 	and.w	r3, r3, #2
 810c622:	2b00      	cmp	r3, #0
 810c624:	d104      	bne.n	810c630 <HAL_SD_IRQHandler+0x130>
 810c626:	68fb      	ldr	r3, [r7, #12]
 810c628:	f003 0320 	and.w	r3, r3, #32
 810c62c:	2b00      	cmp	r3, #0
 810c62e:	d011      	beq.n	810c654 <HAL_SD_IRQHandler+0x154>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 810c630:	687b      	ldr	r3, [r7, #4]
 810c632:	681b      	ldr	r3, [r3, #0]
 810c634:	4618      	mov	r0, r3
 810c636:	f005 f8d1 	bl	81117dc <SDMMC_CmdStopTransfer>
 810c63a:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 810c63c:	68bb      	ldr	r3, [r7, #8]
 810c63e:	2b00      	cmp	r3, #0
 810c640:	d008      	beq.n	810c654 <HAL_SD_IRQHandler+0x154>
          hsd->ErrorCode |= errorstate;
 810c642:	687b      	ldr	r3, [r7, #4]
 810c644:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 810c646:	68bb      	ldr	r3, [r7, #8]
 810c648:	431a      	orrs	r2, r3
 810c64a:	687b      	ldr	r3, [r7, #4]
 810c64c:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 810c64e:	6878      	ldr	r0, [r7, #4]
 810c650:	f000 f90c 	bl	810c86c <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 810c654:	687b      	ldr	r3, [r7, #4]
 810c656:	2201      	movs	r2, #1
 810c658:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 810c65c:	687b      	ldr	r3, [r7, #4]
 810c65e:	2200      	movs	r2, #0
 810c660:	631a      	str	r2, [r3, #48]	; 0x30
      if (((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 810c662:	68fb      	ldr	r3, [r7, #12]
 810c664:	f003 0310 	and.w	r3, r3, #16
 810c668:	2b00      	cmp	r3, #0
 810c66a:	d104      	bne.n	810c676 <HAL_SD_IRQHandler+0x176>
 810c66c:	68fb      	ldr	r3, [r7, #12]
 810c66e:	f003 0320 	and.w	r3, r3, #32
 810c672:	2b00      	cmp	r3, #0
 810c674:	d002      	beq.n	810c67c <HAL_SD_IRQHandler+0x17c>
        HAL_SD_TxCpltCallback(hsd);
 810c676:	6878      	ldr	r0, [r7, #4]
 810c678:	f007 f8fc 	bl	8113874 <HAL_SD_TxCpltCallback>
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 810c67c:	68fb      	ldr	r3, [r7, #12]
 810c67e:	f003 0301 	and.w	r3, r3, #1
 810c682:	2b00      	cmp	r3, #0
 810c684:	d105      	bne.n	810c692 <HAL_SD_IRQHandler+0x192>
 810c686:	68fb      	ldr	r3, [r7, #12]
 810c688:	f003 0302 	and.w	r3, r3, #2
 810c68c:	2b00      	cmp	r3, #0
 810c68e:	f000 80e8 	beq.w	810c862 <HAL_SD_IRQHandler+0x362>
        HAL_SD_RxCpltCallback(hsd);
 810c692:	6878      	ldr	r0, [r7, #4]
 810c694:	f007 f8f8 	bl	8113888 <HAL_SD_RxCpltCallback>
}
 810c698:	e0e3      	b.n	810c862 <HAL_SD_IRQHandler+0x362>
  else if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 810c69a:	687b      	ldr	r3, [r7, #4]
 810c69c:	681b      	ldr	r3, [r3, #0]
 810c69e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 810c6a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 810c6a4:	2b00      	cmp	r3, #0
 810c6a6:	d008      	beq.n	810c6ba <HAL_SD_IRQHandler+0x1ba>
 810c6a8:	68fb      	ldr	r3, [r7, #12]
 810c6aa:	f003 0308 	and.w	r3, r3, #8
 810c6ae:	2b00      	cmp	r3, #0
 810c6b0:	d003      	beq.n	810c6ba <HAL_SD_IRQHandler+0x1ba>
    SD_Write_IT(hsd);
 810c6b2:	6878      	ldr	r0, [r7, #4]
 810c6b4:	f001 f912 	bl	810d8dc <SD_Write_IT>
 810c6b8:	e0d3      	b.n	810c862 <HAL_SD_IRQHandler+0x362>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR |
 810c6ba:	687b      	ldr	r3, [r7, #4]
 810c6bc:	681b      	ldr	r3, [r3, #0]
 810c6be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 810c6c0:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 810c6c4:	2b00      	cmp	r3, #0
 810c6c6:	f000 809d 	beq.w	810c804 <HAL_SD_IRQHandler+0x304>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 810c6ca:	687b      	ldr	r3, [r7, #4]
 810c6cc:	681b      	ldr	r3, [r3, #0]
 810c6ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 810c6d0:	f003 0302 	and.w	r3, r3, #2
 810c6d4:	2b00      	cmp	r3, #0
 810c6d6:	d005      	beq.n	810c6e4 <HAL_SD_IRQHandler+0x1e4>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 810c6d8:	687b      	ldr	r3, [r7, #4]
 810c6da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810c6dc:	f043 0202 	orr.w	r2, r3, #2
 810c6e0:	687b      	ldr	r3, [r7, #4]
 810c6e2:	639a      	str	r2, [r3, #56]	; 0x38
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 810c6e4:	687b      	ldr	r3, [r7, #4]
 810c6e6:	681b      	ldr	r3, [r3, #0]
 810c6e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 810c6ea:	f003 0308 	and.w	r3, r3, #8
 810c6ee:	2b00      	cmp	r3, #0
 810c6f0:	d005      	beq.n	810c6fe <HAL_SD_IRQHandler+0x1fe>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 810c6f2:	687b      	ldr	r3, [r7, #4]
 810c6f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810c6f6:	f043 0208 	orr.w	r2, r3, #8
 810c6fa:	687b      	ldr	r3, [r7, #4]
 810c6fc:	639a      	str	r2, [r3, #56]	; 0x38
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 810c6fe:	687b      	ldr	r3, [r7, #4]
 810c700:	681b      	ldr	r3, [r3, #0]
 810c702:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 810c704:	f003 0320 	and.w	r3, r3, #32
 810c708:	2b00      	cmp	r3, #0
 810c70a:	d005      	beq.n	810c718 <HAL_SD_IRQHandler+0x218>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 810c70c:	687b      	ldr	r3, [r7, #4]
 810c70e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810c710:	f043 0220 	orr.w	r2, r3, #32
 810c714:	687b      	ldr	r3, [r7, #4]
 810c716:	639a      	str	r2, [r3, #56]	; 0x38
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 810c718:	687b      	ldr	r3, [r7, #4]
 810c71a:	681b      	ldr	r3, [r3, #0]
 810c71c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 810c71e:	f003 0310 	and.w	r3, r3, #16
 810c722:	2b00      	cmp	r3, #0
 810c724:	d005      	beq.n	810c732 <HAL_SD_IRQHandler+0x232>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 810c726:	687b      	ldr	r3, [r7, #4]
 810c728:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810c72a:	f043 0210 	orr.w	r2, r3, #16
 810c72e:	687b      	ldr	r3, [r7, #4]
 810c730:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 810c732:	687b      	ldr	r3, [r7, #4]
 810c734:	681b      	ldr	r3, [r3, #0]
 810c736:	4a43      	ldr	r2, [pc, #268]	; (810c844 <HAL_SD_IRQHandler+0x344>)
 810c738:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 810c73a:	687b      	ldr	r3, [r7, #4]
 810c73c:	681b      	ldr	r3, [r3, #0]
 810c73e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 810c740:	687b      	ldr	r3, [r7, #4]
 810c742:	681b      	ldr	r3, [r3, #0]
 810c744:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 810c748:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 810c74a:	687b      	ldr	r3, [r7, #4]
 810c74c:	681b      	ldr	r3, [r3, #0]
 810c74e:	68da      	ldr	r2, [r3, #12]
 810c750:	687b      	ldr	r3, [r7, #4]
 810c752:	681b      	ldr	r3, [r3, #0]
 810c754:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 810c758:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 810c75a:	687b      	ldr	r3, [r7, #4]
 810c75c:	681b      	ldr	r3, [r3, #0]
 810c75e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810c760:	687b      	ldr	r3, [r7, #4]
 810c762:	681b      	ldr	r3, [r3, #0]
 810c764:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 810c768:	62da      	str	r2, [r3, #44]	; 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 810c76a:	687b      	ldr	r3, [r7, #4]
 810c76c:	681b      	ldr	r3, [r3, #0]
 810c76e:	68da      	ldr	r2, [r3, #12]
 810c770:	687b      	ldr	r3, [r7, #4]
 810c772:	681b      	ldr	r3, [r3, #0]
 810c774:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 810c778:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 810c77a:	687b      	ldr	r3, [r7, #4]
 810c77c:	681b      	ldr	r3, [r3, #0]
 810c77e:	4618      	mov	r0, r3
 810c780:	f005 f82c 	bl	81117dc <SDMMC_CmdStopTransfer>
 810c784:	4602      	mov	r2, r0
 810c786:	687b      	ldr	r3, [r7, #4]
 810c788:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810c78a:	431a      	orrs	r2, r3
 810c78c:	687b      	ldr	r3, [r7, #4]
 810c78e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 810c790:	687b      	ldr	r3, [r7, #4]
 810c792:	681b      	ldr	r3, [r3, #0]
 810c794:	68da      	ldr	r2, [r3, #12]
 810c796:	687b      	ldr	r3, [r7, #4]
 810c798:	681b      	ldr	r3, [r3, #0]
 810c79a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 810c79e:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 810c7a0:	687b      	ldr	r3, [r7, #4]
 810c7a2:	681b      	ldr	r3, [r3, #0]
 810c7a4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 810c7a8:	639a      	str	r2, [r3, #56]	; 0x38
    if ((context & SD_CONTEXT_IT) != 0U)
 810c7aa:	68fb      	ldr	r3, [r7, #12]
 810c7ac:	f003 0308 	and.w	r3, r3, #8
 810c7b0:	2b00      	cmp	r3, #0
 810c7b2:	d00a      	beq.n	810c7ca <HAL_SD_IRQHandler+0x2ca>
      hsd->State = HAL_SD_STATE_READY;
 810c7b4:	687b      	ldr	r3, [r7, #4]
 810c7b6:	2201      	movs	r2, #1
 810c7b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 810c7bc:	687b      	ldr	r3, [r7, #4]
 810c7be:	2200      	movs	r2, #0
 810c7c0:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 810c7c2:	6878      	ldr	r0, [r7, #4]
 810c7c4:	f000 f852 	bl	810c86c <HAL_SD_ErrorCallback>
}
 810c7c8:	e04b      	b.n	810c862 <HAL_SD_IRQHandler+0x362>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 810c7ca:	68fb      	ldr	r3, [r7, #12]
 810c7cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 810c7d0:	2b00      	cmp	r3, #0
 810c7d2:	d046      	beq.n	810c862 <HAL_SD_IRQHandler+0x362>
      if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 810c7d4:	687b      	ldr	r3, [r7, #4]
 810c7d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810c7d8:	2b00      	cmp	r3, #0
 810c7da:	d042      	beq.n	810c862 <HAL_SD_IRQHandler+0x362>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 810c7dc:	687b      	ldr	r3, [r7, #4]
 810c7de:	681b      	ldr	r3, [r3, #0]
 810c7e0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 810c7e2:	687b      	ldr	r3, [r7, #4]
 810c7e4:	681b      	ldr	r3, [r3, #0]
 810c7e6:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 810c7ea:	63da      	str	r2, [r3, #60]	; 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 810c7ec:	687b      	ldr	r3, [r7, #4]
 810c7ee:	681b      	ldr	r3, [r3, #0]
 810c7f0:	2200      	movs	r2, #0
 810c7f2:	651a      	str	r2, [r3, #80]	; 0x50
        hsd->State = HAL_SD_STATE_READY;
 810c7f4:	687b      	ldr	r3, [r7, #4]
 810c7f6:	2201      	movs	r2, #1
 810c7f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_ErrorCallback(hsd);
 810c7fc:	6878      	ldr	r0, [r7, #4]
 810c7fe:	f000 f835 	bl	810c86c <HAL_SD_ErrorCallback>
}
 810c802:	e02e      	b.n	810c862 <HAL_SD_IRQHandler+0x362>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 810c804:	687b      	ldr	r3, [r7, #4]
 810c806:	681b      	ldr	r3, [r3, #0]
 810c808:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 810c80a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 810c80e:	2b00      	cmp	r3, #0
 810c810:	d027      	beq.n	810c862 <HAL_SD_IRQHandler+0x362>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 810c812:	687b      	ldr	r3, [r7, #4]
 810c814:	681b      	ldr	r3, [r3, #0]
 810c816:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 810c81a:	639a      	str	r2, [r3, #56]	; 0x38
    if (READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 810c81c:	687b      	ldr	r3, [r7, #4]
 810c81e:	681b      	ldr	r3, [r3, #0]
 810c820:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810c822:	f003 0304 	and.w	r3, r3, #4
 810c826:	2b00      	cmp	r3, #0
 810c828:	d10e      	bne.n	810c848 <HAL_SD_IRQHandler+0x348>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 810c82a:	68fb      	ldr	r3, [r7, #12]
 810c82c:	f003 0320 	and.w	r3, r3, #32
 810c830:	2b00      	cmp	r3, #0
 810c832:	d003      	beq.n	810c83c <HAL_SD_IRQHandler+0x33c>
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 810c834:	6878      	ldr	r0, [r7, #4]
 810c836:	f001 f8b9 	bl	810d9ac <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>
}
 810c83a:	e012      	b.n	810c862 <HAL_SD_IRQHandler+0x362>
        HAL_SDEx_Read_DMADoubleBuf1CpltCallback(hsd);
 810c83c:	6878      	ldr	r0, [r7, #4]
 810c83e:	f001 f8a1 	bl	810d984 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>
}
 810c842:	e00e      	b.n	810c862 <HAL_SD_IRQHandler+0x362>
 810c844:	18000f3a 	.word	0x18000f3a
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 810c848:	68fb      	ldr	r3, [r7, #12]
 810c84a:	f003 0320 	and.w	r3, r3, #32
 810c84e:	2b00      	cmp	r3, #0
 810c850:	d003      	beq.n	810c85a <HAL_SD_IRQHandler+0x35a>
        HAL_SDEx_Write_DMADoubleBuf0CpltCallback(hsd);
 810c852:	6878      	ldr	r0, [r7, #4]
 810c854:	f001 f8a0 	bl	810d998 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>
}
 810c858:	e003      	b.n	810c862 <HAL_SD_IRQHandler+0x362>
        HAL_SDEx_Read_DMADoubleBuf0CpltCallback(hsd);
 810c85a:	6878      	ldr	r0, [r7, #4]
 810c85c:	f001 f888 	bl	810d970 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>
}
 810c860:	e7ff      	b.n	810c862 <HAL_SD_IRQHandler+0x362>
 810c862:	bf00      	nop
 810c864:	3710      	adds	r7, #16
 810c866:	46bd      	mov	sp, r7
 810c868:	bd80      	pop	{r7, pc}
 810c86a:	bf00      	nop

0810c86c <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 810c86c:	b480      	push	{r7}
 810c86e:	b083      	sub	sp, #12
 810c870:	af00      	add	r7, sp, #0
 810c872:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 810c874:	bf00      	nop
 810c876:	370c      	adds	r7, #12
 810c878:	46bd      	mov	sp, r7
 810c87a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c87e:	4770      	bx	lr

0810c880 <HAL_SD_DriveTransceiver_1_8V_Callback>:
  * @brief  Enable/Disable the SD Transceiver 1.8V Mode Callback.
  * @param  status: Voltage Switch State
  * @retval None
  */
__weak  void HAL_SD_DriveTransceiver_1_8V_Callback(FlagStatus status)
{
 810c880:	b480      	push	{r7}
 810c882:	b083      	sub	sp, #12
 810c884:	af00      	add	r7, sp, #0
 810c886:	4603      	mov	r3, r0
 810c888:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(status);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_EnableTransceiver could be implemented in the user file
   */
}
 810c88a:	bf00      	nop
 810c88c:	370c      	adds	r7, #12
 810c88e:	46bd      	mov	sp, r7
 810c890:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c894:	4770      	bx	lr
	...

0810c898 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 810c898:	b480      	push	{r7}
 810c89a:	b083      	sub	sp, #12
 810c89c:	af00      	add	r7, sp, #0
 810c89e:	6078      	str	r0, [r7, #4]
 810c8a0:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 810c8a2:	687b      	ldr	r3, [r7, #4]
 810c8a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 810c8a6:	0f9b      	lsrs	r3, r3, #30
 810c8a8:	b2da      	uxtb	r2, r3
 810c8aa:	683b      	ldr	r3, [r7, #0]
 810c8ac:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 810c8ae:	687b      	ldr	r3, [r7, #4]
 810c8b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 810c8b2:	0e9b      	lsrs	r3, r3, #26
 810c8b4:	b2db      	uxtb	r3, r3
 810c8b6:	f003 030f 	and.w	r3, r3, #15
 810c8ba:	b2da      	uxtb	r2, r3
 810c8bc:	683b      	ldr	r3, [r7, #0]
 810c8be:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 810c8c0:	687b      	ldr	r3, [r7, #4]
 810c8c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 810c8c4:	0e1b      	lsrs	r3, r3, #24
 810c8c6:	b2db      	uxtb	r3, r3
 810c8c8:	f003 0303 	and.w	r3, r3, #3
 810c8cc:	b2da      	uxtb	r2, r3
 810c8ce:	683b      	ldr	r3, [r7, #0]
 810c8d0:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 810c8d2:	687b      	ldr	r3, [r7, #4]
 810c8d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 810c8d6:	0c1b      	lsrs	r3, r3, #16
 810c8d8:	b2da      	uxtb	r2, r3
 810c8da:	683b      	ldr	r3, [r7, #0]
 810c8dc:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 810c8de:	687b      	ldr	r3, [r7, #4]
 810c8e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 810c8e2:	0a1b      	lsrs	r3, r3, #8
 810c8e4:	b2da      	uxtb	r2, r3
 810c8e6:	683b      	ldr	r3, [r7, #0]
 810c8e8:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 810c8ea:	687b      	ldr	r3, [r7, #4]
 810c8ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 810c8ee:	b2da      	uxtb	r2, r3
 810c8f0:	683b      	ldr	r3, [r7, #0]
 810c8f2:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 810c8f4:	687b      	ldr	r3, [r7, #4]
 810c8f6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810c8f8:	0d1b      	lsrs	r3, r3, #20
 810c8fa:	b29a      	uxth	r2, r3
 810c8fc:	683b      	ldr	r3, [r7, #0]
 810c8fe:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 810c900:	687b      	ldr	r3, [r7, #4]
 810c902:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810c904:	0c1b      	lsrs	r3, r3, #16
 810c906:	b2db      	uxtb	r3, r3
 810c908:	f003 030f 	and.w	r3, r3, #15
 810c90c:	b2da      	uxtb	r2, r3
 810c90e:	683b      	ldr	r3, [r7, #0]
 810c910:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 810c912:	687b      	ldr	r3, [r7, #4]
 810c914:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810c916:	0bdb      	lsrs	r3, r3, #15
 810c918:	b2db      	uxtb	r3, r3
 810c91a:	f003 0301 	and.w	r3, r3, #1
 810c91e:	b2da      	uxtb	r2, r3
 810c920:	683b      	ldr	r3, [r7, #0]
 810c922:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 810c924:	687b      	ldr	r3, [r7, #4]
 810c926:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810c928:	0b9b      	lsrs	r3, r3, #14
 810c92a:	b2db      	uxtb	r3, r3
 810c92c:	f003 0301 	and.w	r3, r3, #1
 810c930:	b2da      	uxtb	r2, r3
 810c932:	683b      	ldr	r3, [r7, #0]
 810c934:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 810c936:	687b      	ldr	r3, [r7, #4]
 810c938:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810c93a:	0b5b      	lsrs	r3, r3, #13
 810c93c:	b2db      	uxtb	r3, r3
 810c93e:	f003 0301 	and.w	r3, r3, #1
 810c942:	b2da      	uxtb	r2, r3
 810c944:	683b      	ldr	r3, [r7, #0]
 810c946:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 810c948:	687b      	ldr	r3, [r7, #4]
 810c94a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810c94c:	0b1b      	lsrs	r3, r3, #12
 810c94e:	b2db      	uxtb	r3, r3
 810c950:	f003 0301 	and.w	r3, r3, #1
 810c954:	b2da      	uxtb	r2, r3
 810c956:	683b      	ldr	r3, [r7, #0]
 810c958:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 810c95a:	683b      	ldr	r3, [r7, #0]
 810c95c:	2200      	movs	r2, #0
 810c95e:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 810c960:	687b      	ldr	r3, [r7, #4]
 810c962:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810c964:	2b00      	cmp	r3, #0
 810c966:	d163      	bne.n	810ca30 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 810c968:	687b      	ldr	r3, [r7, #4]
 810c96a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810c96c:	009a      	lsls	r2, r3, #2
 810c96e:	f640 73fc 	movw	r3, #4092	; 0xffc
 810c972:	4013      	ands	r3, r2
 810c974:	687a      	ldr	r2, [r7, #4]
 810c976:	6e92      	ldr	r2, [r2, #104]	; 0x68
 810c978:	0f92      	lsrs	r2, r2, #30
 810c97a:	431a      	orrs	r2, r3
 810c97c:	683b      	ldr	r3, [r7, #0]
 810c97e:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 810c980:	687b      	ldr	r3, [r7, #4]
 810c982:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 810c984:	0edb      	lsrs	r3, r3, #27
 810c986:	b2db      	uxtb	r3, r3
 810c988:	f003 0307 	and.w	r3, r3, #7
 810c98c:	b2da      	uxtb	r2, r3
 810c98e:	683b      	ldr	r3, [r7, #0]
 810c990:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 810c992:	687b      	ldr	r3, [r7, #4]
 810c994:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 810c996:	0e1b      	lsrs	r3, r3, #24
 810c998:	b2db      	uxtb	r3, r3
 810c99a:	f003 0307 	and.w	r3, r3, #7
 810c99e:	b2da      	uxtb	r2, r3
 810c9a0:	683b      	ldr	r3, [r7, #0]
 810c9a2:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 810c9a4:	687b      	ldr	r3, [r7, #4]
 810c9a6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 810c9a8:	0d5b      	lsrs	r3, r3, #21
 810c9aa:	b2db      	uxtb	r3, r3
 810c9ac:	f003 0307 	and.w	r3, r3, #7
 810c9b0:	b2da      	uxtb	r2, r3
 810c9b2:	683b      	ldr	r3, [r7, #0]
 810c9b4:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 810c9b6:	687b      	ldr	r3, [r7, #4]
 810c9b8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 810c9ba:	0c9b      	lsrs	r3, r3, #18
 810c9bc:	b2db      	uxtb	r3, r3
 810c9be:	f003 0307 	and.w	r3, r3, #7
 810c9c2:	b2da      	uxtb	r2, r3
 810c9c4:	683b      	ldr	r3, [r7, #0]
 810c9c6:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 810c9c8:	687b      	ldr	r3, [r7, #4]
 810c9ca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 810c9cc:	0bdb      	lsrs	r3, r3, #15
 810c9ce:	b2db      	uxtb	r3, r3
 810c9d0:	f003 0307 	and.w	r3, r3, #7
 810c9d4:	b2da      	uxtb	r2, r3
 810c9d6:	683b      	ldr	r3, [r7, #0]
 810c9d8:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 810c9da:	683b      	ldr	r3, [r7, #0]
 810c9dc:	691b      	ldr	r3, [r3, #16]
 810c9de:	1c5a      	adds	r2, r3, #1
 810c9e0:	687b      	ldr	r3, [r7, #4]
 810c9e2:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 810c9e4:	683b      	ldr	r3, [r7, #0]
 810c9e6:	7e1b      	ldrb	r3, [r3, #24]
 810c9e8:	b2db      	uxtb	r3, r3
 810c9ea:	f003 0307 	and.w	r3, r3, #7
 810c9ee:	3302      	adds	r3, #2
 810c9f0:	2201      	movs	r2, #1
 810c9f2:	fa02 f303 	lsl.w	r3, r2, r3
 810c9f6:	687a      	ldr	r2, [r7, #4]
 810c9f8:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 810c9fa:	fb02 f203 	mul.w	r2, r2, r3
 810c9fe:	687b      	ldr	r3, [r7, #4]
 810ca00:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 810ca02:	683b      	ldr	r3, [r7, #0]
 810ca04:	7a1b      	ldrb	r3, [r3, #8]
 810ca06:	b2db      	uxtb	r3, r3
 810ca08:	f003 030f 	and.w	r3, r3, #15
 810ca0c:	2201      	movs	r2, #1
 810ca0e:	409a      	lsls	r2, r3
 810ca10:	687b      	ldr	r3, [r7, #4]
 810ca12:	651a      	str	r2, [r3, #80]	; 0x50

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 810ca14:	687b      	ldr	r3, [r7, #4]
 810ca16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 810ca18:	687a      	ldr	r2, [r7, #4]
 810ca1a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 810ca1c:	0a52      	lsrs	r2, r2, #9
 810ca1e:	fb02 f203 	mul.w	r2, r2, r3
 810ca22:	687b      	ldr	r3, [r7, #4]
 810ca24:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockSize = 512U;
 810ca26:	687b      	ldr	r3, [r7, #4]
 810ca28:	f44f 7200 	mov.w	r2, #512	; 0x200
 810ca2c:	659a      	str	r2, [r3, #88]	; 0x58
 810ca2e:	e031      	b.n	810ca94 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 810ca30:	687b      	ldr	r3, [r7, #4]
 810ca32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810ca34:	2b01      	cmp	r3, #1
 810ca36:	d11d      	bne.n	810ca74 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 810ca38:	687b      	ldr	r3, [r7, #4]
 810ca3a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810ca3c:	041b      	lsls	r3, r3, #16
 810ca3e:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 810ca42:	687b      	ldr	r3, [r7, #4]
 810ca44:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 810ca46:	0c1b      	lsrs	r3, r3, #16
 810ca48:	431a      	orrs	r2, r3
 810ca4a:	683b      	ldr	r3, [r7, #0]
 810ca4c:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 810ca4e:	683b      	ldr	r3, [r7, #0]
 810ca50:	691b      	ldr	r3, [r3, #16]
 810ca52:	3301      	adds	r3, #1
 810ca54:	029a      	lsls	r2, r3, #10
 810ca56:	687b      	ldr	r3, [r7, #4]
 810ca58:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 810ca5a:	687b      	ldr	r3, [r7, #4]
 810ca5c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 810ca5e:	687b      	ldr	r3, [r7, #4]
 810ca60:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = 512U;
 810ca62:	687b      	ldr	r3, [r7, #4]
 810ca64:	f44f 7200 	mov.w	r2, #512	; 0x200
 810ca68:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 810ca6a:	687b      	ldr	r3, [r7, #4]
 810ca6c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 810ca6e:	687b      	ldr	r3, [r7, #4]
 810ca70:	659a      	str	r2, [r3, #88]	; 0x58
 810ca72:	e00f      	b.n	810ca94 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 810ca74:	687b      	ldr	r3, [r7, #4]
 810ca76:	681b      	ldr	r3, [r3, #0]
 810ca78:	4a58      	ldr	r2, [pc, #352]	; (810cbdc <HAL_SD_GetCardCSD+0x344>)
 810ca7a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 810ca7c:	687b      	ldr	r3, [r7, #4]
 810ca7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810ca80:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 810ca84:	687b      	ldr	r3, [r7, #4]
 810ca86:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 810ca88:	687b      	ldr	r3, [r7, #4]
 810ca8a:	2201      	movs	r2, #1
 810ca8c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 810ca90:	2301      	movs	r3, #1
 810ca92:	e09d      	b.n	810cbd0 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 810ca94:	687b      	ldr	r3, [r7, #4]
 810ca96:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 810ca98:	0b9b      	lsrs	r3, r3, #14
 810ca9a:	b2db      	uxtb	r3, r3
 810ca9c:	f003 0301 	and.w	r3, r3, #1
 810caa0:	b2da      	uxtb	r2, r3
 810caa2:	683b      	ldr	r3, [r7, #0]
 810caa4:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 810caa6:	687b      	ldr	r3, [r7, #4]
 810caa8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 810caaa:	09db      	lsrs	r3, r3, #7
 810caac:	b2db      	uxtb	r3, r3
 810caae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 810cab2:	b2da      	uxtb	r2, r3
 810cab4:	683b      	ldr	r3, [r7, #0]
 810cab6:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 810cab8:	687b      	ldr	r3, [r7, #4]
 810caba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 810cabc:	b2db      	uxtb	r3, r3
 810cabe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 810cac2:	b2da      	uxtb	r2, r3
 810cac4:	683b      	ldr	r3, [r7, #0]
 810cac6:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 810cac8:	687b      	ldr	r3, [r7, #4]
 810caca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 810cacc:	0fdb      	lsrs	r3, r3, #31
 810cace:	b2da      	uxtb	r2, r3
 810cad0:	683b      	ldr	r3, [r7, #0]
 810cad2:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 810cad4:	687b      	ldr	r3, [r7, #4]
 810cad6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 810cad8:	0f5b      	lsrs	r3, r3, #29
 810cada:	b2db      	uxtb	r3, r3
 810cadc:	f003 0303 	and.w	r3, r3, #3
 810cae0:	b2da      	uxtb	r2, r3
 810cae2:	683b      	ldr	r3, [r7, #0]
 810cae4:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 810cae6:	687b      	ldr	r3, [r7, #4]
 810cae8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 810caea:	0e9b      	lsrs	r3, r3, #26
 810caec:	b2db      	uxtb	r3, r3
 810caee:	f003 0307 	and.w	r3, r3, #7
 810caf2:	b2da      	uxtb	r2, r3
 810caf4:	683b      	ldr	r3, [r7, #0]
 810caf6:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 810caf8:	687b      	ldr	r3, [r7, #4]
 810cafa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 810cafc:	0d9b      	lsrs	r3, r3, #22
 810cafe:	b2db      	uxtb	r3, r3
 810cb00:	f003 030f 	and.w	r3, r3, #15
 810cb04:	b2da      	uxtb	r2, r3
 810cb06:	683b      	ldr	r3, [r7, #0]
 810cb08:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 810cb0a:	687b      	ldr	r3, [r7, #4]
 810cb0c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 810cb0e:	0d5b      	lsrs	r3, r3, #21
 810cb10:	b2db      	uxtb	r3, r3
 810cb12:	f003 0301 	and.w	r3, r3, #1
 810cb16:	b2da      	uxtb	r2, r3
 810cb18:	683b      	ldr	r3, [r7, #0]
 810cb1a:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 810cb1e:	683b      	ldr	r3, [r7, #0]
 810cb20:	2200      	movs	r2, #0
 810cb22:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 810cb26:	687b      	ldr	r3, [r7, #4]
 810cb28:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 810cb2a:	0c1b      	lsrs	r3, r3, #16
 810cb2c:	b2db      	uxtb	r3, r3
 810cb2e:	f003 0301 	and.w	r3, r3, #1
 810cb32:	b2da      	uxtb	r2, r3
 810cb34:	683b      	ldr	r3, [r7, #0]
 810cb36:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 810cb3a:	687b      	ldr	r3, [r7, #4]
 810cb3c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 810cb3e:	0bdb      	lsrs	r3, r3, #15
 810cb40:	b2db      	uxtb	r3, r3
 810cb42:	f003 0301 	and.w	r3, r3, #1
 810cb46:	b2da      	uxtb	r2, r3
 810cb48:	683b      	ldr	r3, [r7, #0]
 810cb4a:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 810cb4e:	687b      	ldr	r3, [r7, #4]
 810cb50:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 810cb52:	0b9b      	lsrs	r3, r3, #14
 810cb54:	b2db      	uxtb	r3, r3
 810cb56:	f003 0301 	and.w	r3, r3, #1
 810cb5a:	b2da      	uxtb	r2, r3
 810cb5c:	683b      	ldr	r3, [r7, #0]
 810cb5e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 810cb62:	687b      	ldr	r3, [r7, #4]
 810cb64:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 810cb66:	0b5b      	lsrs	r3, r3, #13
 810cb68:	b2db      	uxtb	r3, r3
 810cb6a:	f003 0301 	and.w	r3, r3, #1
 810cb6e:	b2da      	uxtb	r2, r3
 810cb70:	683b      	ldr	r3, [r7, #0]
 810cb72:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 810cb76:	687b      	ldr	r3, [r7, #4]
 810cb78:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 810cb7a:	0b1b      	lsrs	r3, r3, #12
 810cb7c:	b2db      	uxtb	r3, r3
 810cb7e:	f003 0301 	and.w	r3, r3, #1
 810cb82:	b2da      	uxtb	r2, r3
 810cb84:	683b      	ldr	r3, [r7, #0]
 810cb86:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 810cb8a:	687b      	ldr	r3, [r7, #4]
 810cb8c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 810cb8e:	0a9b      	lsrs	r3, r3, #10
 810cb90:	b2db      	uxtb	r3, r3
 810cb92:	f003 0303 	and.w	r3, r3, #3
 810cb96:	b2da      	uxtb	r2, r3
 810cb98:	683b      	ldr	r3, [r7, #0]
 810cb9a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 810cb9e:	687b      	ldr	r3, [r7, #4]
 810cba0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 810cba2:	0a1b      	lsrs	r3, r3, #8
 810cba4:	b2db      	uxtb	r3, r3
 810cba6:	f003 0303 	and.w	r3, r3, #3
 810cbaa:	b2da      	uxtb	r2, r3
 810cbac:	683b      	ldr	r3, [r7, #0]
 810cbae:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 810cbb2:	687b      	ldr	r3, [r7, #4]
 810cbb4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 810cbb6:	085b      	lsrs	r3, r3, #1
 810cbb8:	b2db      	uxtb	r3, r3
 810cbba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 810cbbe:	b2da      	uxtb	r2, r3
 810cbc0:	683b      	ldr	r3, [r7, #0]
 810cbc2:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 810cbc6:	683b      	ldr	r3, [r7, #0]
 810cbc8:	2201      	movs	r2, #1
 810cbca:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 810cbce:	2300      	movs	r3, #0
}
 810cbd0:	4618      	mov	r0, r3
 810cbd2:	370c      	adds	r7, #12
 810cbd4:	46bd      	mov	sp, r7
 810cbd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 810cbda:	4770      	bx	lr
 810cbdc:	1fe00fff 	.word	0x1fe00fff

0810cbe0 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 810cbe0:	b580      	push	{r7, lr}
 810cbe2:	b094      	sub	sp, #80	; 0x50
 810cbe4:	af00      	add	r7, sp, #0
 810cbe6:	6078      	str	r0, [r7, #4]
 810cbe8:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 810cbea:	2300      	movs	r3, #0
 810cbec:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  errorstate = SD_SendSDStatus(hsd, sd_status);
 810cbf0:	f107 0308 	add.w	r3, r7, #8
 810cbf4:	4619      	mov	r1, r3
 810cbf6:	6878      	ldr	r0, [r7, #4]
 810cbf8:	f000 fbcc 	bl	810d394 <SD_SendSDStatus>
 810cbfc:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 810cbfe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 810cc00:	2b00      	cmp	r3, #0
 810cc02:	d011      	beq.n	810cc28 <HAL_SD_GetCardStatus+0x48>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 810cc04:	687b      	ldr	r3, [r7, #4]
 810cc06:	681b      	ldr	r3, [r3, #0]
 810cc08:	4a4f      	ldr	r2, [pc, #316]	; (810cd48 <HAL_SD_GetCardStatus+0x168>)
 810cc0a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 810cc0c:	687b      	ldr	r3, [r7, #4]
 810cc0e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 810cc10:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 810cc12:	431a      	orrs	r2, r3
 810cc14:	687b      	ldr	r3, [r7, #4]
 810cc16:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 810cc18:	687b      	ldr	r3, [r7, #4]
 810cc1a:	2201      	movs	r2, #1
 810cc1c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 810cc20:	2301      	movs	r3, #1
 810cc22:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 810cc26:	e070      	b.n	810cd0a <HAL_SD_GetCardStatus+0x12a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 810cc28:	68bb      	ldr	r3, [r7, #8]
 810cc2a:	099b      	lsrs	r3, r3, #6
 810cc2c:	b2db      	uxtb	r3, r3
 810cc2e:	f003 0303 	and.w	r3, r3, #3
 810cc32:	b2da      	uxtb	r2, r3
 810cc34:	683b      	ldr	r3, [r7, #0]
 810cc36:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 810cc38:	68bb      	ldr	r3, [r7, #8]
 810cc3a:	095b      	lsrs	r3, r3, #5
 810cc3c:	b2db      	uxtb	r3, r3
 810cc3e:	f003 0301 	and.w	r3, r3, #1
 810cc42:	b2da      	uxtb	r2, r3
 810cc44:	683b      	ldr	r3, [r7, #0]
 810cc46:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 810cc48:	68bb      	ldr	r3, [r7, #8]
 810cc4a:	0a1b      	lsrs	r3, r3, #8
 810cc4c:	b29b      	uxth	r3, r3
 810cc4e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 810cc52:	b29a      	uxth	r2, r3
 810cc54:	68bb      	ldr	r3, [r7, #8]
 810cc56:	0e1b      	lsrs	r3, r3, #24
 810cc58:	b29b      	uxth	r3, r3
 810cc5a:	4313      	orrs	r3, r2
 810cc5c:	b29a      	uxth	r2, r3
 810cc5e:	683b      	ldr	r3, [r7, #0]
 810cc60:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 810cc62:	68fb      	ldr	r3, [r7, #12]
 810cc64:	061a      	lsls	r2, r3, #24
 810cc66:	68fb      	ldr	r3, [r7, #12]
 810cc68:	021b      	lsls	r3, r3, #8
 810cc6a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 810cc6e:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 810cc70:	68fb      	ldr	r3, [r7, #12]
 810cc72:	0a1b      	lsrs	r3, r3, #8
 810cc74:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 810cc78:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 810cc7a:	68fb      	ldr	r3, [r7, #12]
 810cc7c:	0e1b      	lsrs	r3, r3, #24
 810cc7e:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 810cc80:	683b      	ldr	r3, [r7, #0]
 810cc82:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 810cc84:	693b      	ldr	r3, [r7, #16]
 810cc86:	b2da      	uxtb	r2, r3
 810cc88:	683b      	ldr	r3, [r7, #0]
 810cc8a:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 810cc8c:	693b      	ldr	r3, [r7, #16]
 810cc8e:	0a1b      	lsrs	r3, r3, #8
 810cc90:	b2da      	uxtb	r2, r3
 810cc92:	683b      	ldr	r3, [r7, #0]
 810cc94:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 810cc96:	693b      	ldr	r3, [r7, #16]
 810cc98:	0d1b      	lsrs	r3, r3, #20
 810cc9a:	b2db      	uxtb	r3, r3
 810cc9c:	f003 030f 	and.w	r3, r3, #15
 810cca0:	b2da      	uxtb	r2, r3
 810cca2:	683b      	ldr	r3, [r7, #0]
 810cca4:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 810cca6:	693b      	ldr	r3, [r7, #16]
 810cca8:	0c1b      	lsrs	r3, r3, #16
 810ccaa:	b29b      	uxth	r3, r3
 810ccac:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 810ccb0:	b29a      	uxth	r2, r3
 810ccb2:	697b      	ldr	r3, [r7, #20]
 810ccb4:	b29b      	uxth	r3, r3
 810ccb6:	b2db      	uxtb	r3, r3
 810ccb8:	b29b      	uxth	r3, r3
 810ccba:	4313      	orrs	r3, r2
 810ccbc:	b29a      	uxth	r2, r3
 810ccbe:	683b      	ldr	r3, [r7, #0]
 810ccc0:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 810ccc2:	697b      	ldr	r3, [r7, #20]
 810ccc4:	0a9b      	lsrs	r3, r3, #10
 810ccc6:	b2db      	uxtb	r3, r3
 810ccc8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 810cccc:	b2da      	uxtb	r2, r3
 810ccce:	683b      	ldr	r3, [r7, #0]
 810ccd0:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 810ccd2:	697b      	ldr	r3, [r7, #20]
 810ccd4:	0a1b      	lsrs	r3, r3, #8
 810ccd6:	b2db      	uxtb	r3, r3
 810ccd8:	f003 0303 	and.w	r3, r3, #3
 810ccdc:	b2da      	uxtb	r2, r3
 810ccde:	683b      	ldr	r3, [r7, #0]
 810cce0:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 810cce2:	697b      	ldr	r3, [r7, #20]
 810cce4:	091b      	lsrs	r3, r3, #4
 810cce6:	b2db      	uxtb	r3, r3
 810cce8:	f003 030f 	and.w	r3, r3, #15
 810ccec:	b2da      	uxtb	r2, r3
 810ccee:	683b      	ldr	r3, [r7, #0]
 810ccf0:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 810ccf2:	697b      	ldr	r3, [r7, #20]
 810ccf4:	b2db      	uxtb	r3, r3
 810ccf6:	f003 030f 	and.w	r3, r3, #15
 810ccfa:	b2da      	uxtb	r2, r3
 810ccfc:	683b      	ldr	r3, [r7, #0]
 810ccfe:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 810cd00:	69bb      	ldr	r3, [r7, #24]
 810cd02:	0e1b      	lsrs	r3, r3, #24
 810cd04:	b2da      	uxtb	r2, r3
 810cd06:	683b      	ldr	r3, [r7, #0]
 810cd08:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 810cd0a:	687b      	ldr	r3, [r7, #4]
 810cd0c:	681b      	ldr	r3, [r3, #0]
 810cd0e:	f44f 7100 	mov.w	r1, #512	; 0x200
 810cd12:	4618      	mov	r0, r3
 810cd14:	f004 fcb2 	bl	811167c <SDMMC_CmdBlockLength>
 810cd18:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 810cd1a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 810cd1c:	2b00      	cmp	r3, #0
 810cd1e:	d00d      	beq.n	810cd3c <HAL_SD_GetCardStatus+0x15c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 810cd20:	687b      	ldr	r3, [r7, #4]
 810cd22:	681b      	ldr	r3, [r3, #0]
 810cd24:	4a08      	ldr	r2, [pc, #32]	; (810cd48 <HAL_SD_GetCardStatus+0x168>)
 810cd26:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 810cd28:	687b      	ldr	r3, [r7, #4]
 810cd2a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 810cd2c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 810cd2e:	687b      	ldr	r3, [r7, #4]
 810cd30:	2201      	movs	r2, #1
 810cd32:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 810cd36:	2301      	movs	r3, #1
 810cd38:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }

  return status;
 810cd3c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 810cd40:	4618      	mov	r0, r3
 810cd42:	3750      	adds	r7, #80	; 0x50
 810cd44:	46bd      	mov	sp, r7
 810cd46:	bd80      	pop	{r7, pc}
 810cd48:	1fe00fff 	.word	0x1fe00fff

0810cd4c <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 810cd4c:	b480      	push	{r7}
 810cd4e:	b083      	sub	sp, #12
 810cd50:	af00      	add	r7, sp, #0
 810cd52:	6078      	str	r0, [r7, #4]
 810cd54:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 810cd56:	687b      	ldr	r3, [r7, #4]
 810cd58:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 810cd5a:	683b      	ldr	r3, [r7, #0]
 810cd5c:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 810cd5e:	687b      	ldr	r3, [r7, #4]
 810cd60:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 810cd62:	683b      	ldr	r3, [r7, #0]
 810cd64:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 810cd66:	687b      	ldr	r3, [r7, #4]
 810cd68:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 810cd6a:	683b      	ldr	r3, [r7, #0]
 810cd6c:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 810cd6e:	687b      	ldr	r3, [r7, #4]
 810cd70:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 810cd72:	683b      	ldr	r3, [r7, #0]
 810cd74:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 810cd76:	687b      	ldr	r3, [r7, #4]
 810cd78:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 810cd7a:	683b      	ldr	r3, [r7, #0]
 810cd7c:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 810cd7e:	687b      	ldr	r3, [r7, #4]
 810cd80:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 810cd82:	683b      	ldr	r3, [r7, #0]
 810cd84:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 810cd86:	687b      	ldr	r3, [r7, #4]
 810cd88:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 810cd8a:	683b      	ldr	r3, [r7, #0]
 810cd8c:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 810cd8e:	687b      	ldr	r3, [r7, #4]
 810cd90:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 810cd92:	683b      	ldr	r3, [r7, #0]
 810cd94:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 810cd96:	2300      	movs	r3, #0
}
 810cd98:	4618      	mov	r0, r3
 810cd9a:	370c      	adds	r7, #12
 810cd9c:	46bd      	mov	sp, r7
 810cd9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 810cda2:	4770      	bx	lr

0810cda4 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 810cda4:	b5b0      	push	{r4, r5, r7, lr}
 810cda6:	b090      	sub	sp, #64	; 0x40
 810cda8:	af04      	add	r7, sp, #16
 810cdaa:	6078      	str	r0, [r7, #4]
 810cdac:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 810cdae:	2300      	movs	r3, #0
 810cdb0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 810cdb4:	687b      	ldr	r3, [r7, #4]
 810cdb6:	2203      	movs	r2, #3
 810cdb8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if (hsd->SdCard.CardType != CARD_SECURED)
 810cdbc:	687b      	ldr	r3, [r7, #4]
 810cdbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810cdc0:	2b03      	cmp	r3, #3
 810cdc2:	d02e      	beq.n	810ce22 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 810cdc4:	683b      	ldr	r3, [r7, #0]
 810cdc6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 810cdca:	d106      	bne.n	810cdda <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 810cdcc:	687b      	ldr	r3, [r7, #4]
 810cdce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810cdd0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 810cdd4:	687b      	ldr	r3, [r7, #4]
 810cdd6:	639a      	str	r2, [r3, #56]	; 0x38
 810cdd8:	e029      	b.n	810ce2e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 810cdda:	683b      	ldr	r3, [r7, #0]
 810cddc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 810cde0:	d10a      	bne.n	810cdf8 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 810cde2:	6878      	ldr	r0, [r7, #4]
 810cde4:	f000 fbce 	bl	810d584 <SD_WideBus_Enable>
 810cde8:	62b8      	str	r0, [r7, #40]	; 0x28

      hsd->ErrorCode |= errorstate;
 810cdea:	687b      	ldr	r3, [r7, #4]
 810cdec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 810cdee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810cdf0:	431a      	orrs	r2, r3
 810cdf2:	687b      	ldr	r3, [r7, #4]
 810cdf4:	639a      	str	r2, [r3, #56]	; 0x38
 810cdf6:	e01a      	b.n	810ce2e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 810cdf8:	683b      	ldr	r3, [r7, #0]
 810cdfa:	2b00      	cmp	r3, #0
 810cdfc:	d10a      	bne.n	810ce14 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 810cdfe:	6878      	ldr	r0, [r7, #4]
 810ce00:	f000 fc0b 	bl	810d61a <SD_WideBus_Disable>
 810ce04:	62b8      	str	r0, [r7, #40]	; 0x28

      hsd->ErrorCode |= errorstate;
 810ce06:	687b      	ldr	r3, [r7, #4]
 810ce08:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 810ce0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810ce0c:	431a      	orrs	r2, r3
 810ce0e:	687b      	ldr	r3, [r7, #4]
 810ce10:	639a      	str	r2, [r3, #56]	; 0x38
 810ce12:	e00c      	b.n	810ce2e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 810ce14:	687b      	ldr	r3, [r7, #4]
 810ce16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810ce18:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 810ce1c:	687b      	ldr	r3, [r7, #4]
 810ce1e:	639a      	str	r2, [r3, #56]	; 0x38
 810ce20:	e005      	b.n	810ce2e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 810ce22:	687b      	ldr	r3, [r7, #4]
 810ce24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810ce26:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 810ce2a:	687b      	ldr	r3, [r7, #4]
 810ce2c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 810ce2e:	687b      	ldr	r3, [r7, #4]
 810ce30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810ce32:	2b00      	cmp	r3, #0
 810ce34:	d007      	beq.n	810ce46 <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 810ce36:	687b      	ldr	r3, [r7, #4]
 810ce38:	681b      	ldr	r3, [r3, #0]
 810ce3a:	4a60      	ldr	r2, [pc, #384]	; (810cfbc <HAL_SD_ConfigWideBusOperation+0x218>)
 810ce3c:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 810ce3e:	2301      	movs	r3, #1
 810ce40:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 810ce44:	e097      	b.n	810cf76 <HAL_SD_ConfigWideBusOperation+0x1d2>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 810ce46:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 810ce4a:	f7fd fe97 	bl	810ab7c <HAL_RCCEx_GetPeriphCLKFreq>
 810ce4e:	6278      	str	r0, [r7, #36]	; 0x24
    if (sdmmc_clk != 0U)
 810ce50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810ce52:	2b00      	cmp	r3, #0
 810ce54:	f000 8086 	beq.w	810cf64 <HAL_SD_ConfigWideBusOperation+0x1c0>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 810ce58:	687b      	ldr	r3, [r7, #4]
 810ce5a:	685b      	ldr	r3, [r3, #4]
 810ce5c:	60fb      	str	r3, [r7, #12]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 810ce5e:	687b      	ldr	r3, [r7, #4]
 810ce60:	689b      	ldr	r3, [r3, #8]
 810ce62:	613b      	str	r3, [r7, #16]
      Init.BusWide             = WideMode;
 810ce64:	683b      	ldr	r3, [r7, #0]
 810ce66:	617b      	str	r3, [r7, #20]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 810ce68:	687b      	ldr	r3, [r7, #4]
 810ce6a:	691b      	ldr	r3, [r3, #16]
 810ce6c:	61bb      	str	r3, [r7, #24]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 810ce6e:	687b      	ldr	r3, [r7, #4]
 810ce70:	695a      	ldr	r2, [r3, #20]
 810ce72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810ce74:	4952      	ldr	r1, [pc, #328]	; (810cfc0 <HAL_SD_ConfigWideBusOperation+0x21c>)
 810ce76:	fba1 1303 	umull	r1, r3, r1, r3
 810ce7a:	0e1b      	lsrs	r3, r3, #24
 810ce7c:	429a      	cmp	r2, r3
 810ce7e:	d303      	bcc.n	810ce88 <HAL_SD_ConfigWideBusOperation+0xe4>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 810ce80:	687b      	ldr	r3, [r7, #4]
 810ce82:	695b      	ldr	r3, [r3, #20]
 810ce84:	61fb      	str	r3, [r7, #28]
 810ce86:	e05a      	b.n	810cf3e <HAL_SD_ConfigWideBusOperation+0x19a>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 810ce88:	687b      	ldr	r3, [r7, #4]
 810ce8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 810ce8c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 810ce90:	d103      	bne.n	810ce9a <HAL_SD_ConfigWideBusOperation+0xf6>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 810ce92:	687b      	ldr	r3, [r7, #4]
 810ce94:	695b      	ldr	r3, [r3, #20]
 810ce96:	61fb      	str	r3, [r7, #28]
 810ce98:	e051      	b.n	810cf3e <HAL_SD_ConfigWideBusOperation+0x19a>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 810ce9a:	687b      	ldr	r3, [r7, #4]
 810ce9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 810ce9e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810cea2:	d126      	bne.n	810cef2 <HAL_SD_ConfigWideBusOperation+0x14e>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 810cea4:	687b      	ldr	r3, [r7, #4]
 810cea6:	695b      	ldr	r3, [r3, #20]
 810cea8:	2b00      	cmp	r3, #0
 810ceaa:	d10e      	bne.n	810ceca <HAL_SD_ConfigWideBusOperation+0x126>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 810ceac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810ceae:	4a45      	ldr	r2, [pc, #276]	; (810cfc4 <HAL_SD_ConfigWideBusOperation+0x220>)
 810ceb0:	4293      	cmp	r3, r2
 810ceb2:	d906      	bls.n	810cec2 <HAL_SD_ConfigWideBusOperation+0x11e>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 810ceb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810ceb6:	4a42      	ldr	r2, [pc, #264]	; (810cfc0 <HAL_SD_ConfigWideBusOperation+0x21c>)
 810ceb8:	fba2 2303 	umull	r2, r3, r2, r3
 810cebc:	0e5b      	lsrs	r3, r3, #25
 810cebe:	61fb      	str	r3, [r7, #28]
 810cec0:	e03d      	b.n	810cf3e <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 810cec2:	687b      	ldr	r3, [r7, #4]
 810cec4:	695b      	ldr	r3, [r3, #20]
 810cec6:	61fb      	str	r3, [r7, #28]
 810cec8:	e039      	b.n	810cf3e <HAL_SD_ConfigWideBusOperation+0x19a>
          }
        }
        else
        {
          if ((sdmmc_clk/(2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 810ceca:	687b      	ldr	r3, [r7, #4]
 810cecc:	695b      	ldr	r3, [r3, #20]
 810cece:	005b      	lsls	r3, r3, #1
 810ced0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 810ced2:	fbb2 f3f3 	udiv	r3, r2, r3
 810ced6:	4a3b      	ldr	r2, [pc, #236]	; (810cfc4 <HAL_SD_ConfigWideBusOperation+0x220>)
 810ced8:	4293      	cmp	r3, r2
 810ceda:	d906      	bls.n	810ceea <HAL_SD_ConfigWideBusOperation+0x146>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 810cedc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810cede:	4a38      	ldr	r2, [pc, #224]	; (810cfc0 <HAL_SD_ConfigWideBusOperation+0x21c>)
 810cee0:	fba2 2303 	umull	r2, r3, r2, r3
 810cee4:	0e5b      	lsrs	r3, r3, #25
 810cee6:	61fb      	str	r3, [r7, #28]
 810cee8:	e029      	b.n	810cf3e <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 810ceea:	687b      	ldr	r3, [r7, #4]
 810ceec:	695b      	ldr	r3, [r3, #20]
 810ceee:	61fb      	str	r3, [r7, #28]
 810cef0:	e025      	b.n	810cf3e <HAL_SD_ConfigWideBusOperation+0x19a>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 810cef2:	687b      	ldr	r3, [r7, #4]
 810cef4:	695b      	ldr	r3, [r3, #20]
 810cef6:	2b00      	cmp	r3, #0
 810cef8:	d10e      	bne.n	810cf18 <HAL_SD_ConfigWideBusOperation+0x174>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 810cefa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810cefc:	4a32      	ldr	r2, [pc, #200]	; (810cfc8 <HAL_SD_ConfigWideBusOperation+0x224>)
 810cefe:	4293      	cmp	r3, r2
 810cf00:	d906      	bls.n	810cf10 <HAL_SD_ConfigWideBusOperation+0x16c>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 810cf02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810cf04:	4a2e      	ldr	r2, [pc, #184]	; (810cfc0 <HAL_SD_ConfigWideBusOperation+0x21c>)
 810cf06:	fba2 2303 	umull	r2, r3, r2, r3
 810cf0a:	0e1b      	lsrs	r3, r3, #24
 810cf0c:	61fb      	str	r3, [r7, #28]
 810cf0e:	e016      	b.n	810cf3e <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 810cf10:	687b      	ldr	r3, [r7, #4]
 810cf12:	695b      	ldr	r3, [r3, #20]
 810cf14:	61fb      	str	r3, [r7, #28]
 810cf16:	e012      	b.n	810cf3e <HAL_SD_ConfigWideBusOperation+0x19a>
          }
        }
        else
        {
          if ((sdmmc_clk/(2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 810cf18:	687b      	ldr	r3, [r7, #4]
 810cf1a:	695b      	ldr	r3, [r3, #20]
 810cf1c:	005b      	lsls	r3, r3, #1
 810cf1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 810cf20:	fbb2 f3f3 	udiv	r3, r2, r3
 810cf24:	4a28      	ldr	r2, [pc, #160]	; (810cfc8 <HAL_SD_ConfigWideBusOperation+0x224>)
 810cf26:	4293      	cmp	r3, r2
 810cf28:	d906      	bls.n	810cf38 <HAL_SD_ConfigWideBusOperation+0x194>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 810cf2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810cf2c:	4a24      	ldr	r2, [pc, #144]	; (810cfc0 <HAL_SD_ConfigWideBusOperation+0x21c>)
 810cf2e:	fba2 2303 	umull	r2, r3, r2, r3
 810cf32:	0e1b      	lsrs	r3, r3, #24
 810cf34:	61fb      	str	r3, [r7, #28]
 810cf36:	e002      	b.n	810cf3e <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 810cf38:	687b      	ldr	r3, [r7, #4]
 810cf3a:	695b      	ldr	r3, [r3, #20]
 810cf3c:	61fb      	str	r3, [r7, #28]
          }
        }
      }

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
 810cf3e:	687b      	ldr	r3, [r7, #4]
 810cf40:	699b      	ldr	r3, [r3, #24]
 810cf42:	623b      	str	r3, [r7, #32]
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 810cf44:	687b      	ldr	r3, [r7, #4]
 810cf46:	681d      	ldr	r5, [r3, #0]
 810cf48:	466c      	mov	r4, sp
 810cf4a:	f107 0318 	add.w	r3, r7, #24
 810cf4e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 810cf52:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 810cf56:	f107 030c 	add.w	r3, r7, #12
 810cf5a:	cb0e      	ldmia	r3, {r1, r2, r3}
 810cf5c:	4628      	mov	r0, r5
 810cf5e:	f004 faaf 	bl	81114c0 <SDMMC_Init>
 810cf62:	e008      	b.n	810cf76 <HAL_SD_ConfigWideBusOperation+0x1d2>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 810cf64:	687b      	ldr	r3, [r7, #4]
 810cf66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810cf68:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 810cf6c:	687b      	ldr	r3, [r7, #4]
 810cf6e:	639a      	str	r2, [r3, #56]	; 0x38
      status = HAL_ERROR;
 810cf70:	2301      	movs	r3, #1
 810cf72:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 810cf76:	687b      	ldr	r3, [r7, #4]
 810cf78:	681b      	ldr	r3, [r3, #0]
 810cf7a:	f44f 7100 	mov.w	r1, #512	; 0x200
 810cf7e:	4618      	mov	r0, r3
 810cf80:	f004 fb7c 	bl	811167c <SDMMC_CmdBlockLength>
 810cf84:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 810cf86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810cf88:	2b00      	cmp	r3, #0
 810cf8a:	d00c      	beq.n	810cfa6 <HAL_SD_ConfigWideBusOperation+0x202>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 810cf8c:	687b      	ldr	r3, [r7, #4]
 810cf8e:	681b      	ldr	r3, [r3, #0]
 810cf90:	4a0a      	ldr	r2, [pc, #40]	; (810cfbc <HAL_SD_ConfigWideBusOperation+0x218>)
 810cf92:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 810cf94:	687b      	ldr	r3, [r7, #4]
 810cf96:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 810cf98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810cf9a:	431a      	orrs	r2, r3
 810cf9c:	687b      	ldr	r3, [r7, #4]
 810cf9e:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 810cfa0:	2301      	movs	r3, #1
 810cfa2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 810cfa6:	687b      	ldr	r3, [r7, #4]
 810cfa8:	2201      	movs	r2, #1
 810cfaa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 810cfae:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 810cfb2:	4618      	mov	r0, r3
 810cfb4:	3730      	adds	r7, #48	; 0x30
 810cfb6:	46bd      	mov	sp, r7
 810cfb8:	bdb0      	pop	{r4, r5, r7, pc}
 810cfba:	bf00      	nop
 810cfbc:	1fe00fff 	.word	0x1fe00fff
 810cfc0:	55e63b89 	.word	0x55e63b89
 810cfc4:	02faf080 	.word	0x02faf080
 810cfc8:	017d7840 	.word	0x017d7840

0810cfcc <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 810cfcc:	b580      	push	{r7, lr}
 810cfce:	b086      	sub	sp, #24
 810cfd0:	af00      	add	r7, sp, #0
 810cfd2:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 810cfd4:	2300      	movs	r3, #0
 810cfd6:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 810cfd8:	f107 030c 	add.w	r3, r7, #12
 810cfdc:	4619      	mov	r1, r3
 810cfde:	6878      	ldr	r0, [r7, #4]
 810cfe0:	f000 faa8 	bl	810d534 <SD_SendStatus>
 810cfe4:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 810cfe6:	697b      	ldr	r3, [r7, #20]
 810cfe8:	2b00      	cmp	r3, #0
 810cfea:	d005      	beq.n	810cff8 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 810cfec:	687b      	ldr	r3, [r7, #4]
 810cfee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 810cff0:	697b      	ldr	r3, [r7, #20]
 810cff2:	431a      	orrs	r2, r3
 810cff4:	687b      	ldr	r3, [r7, #4]
 810cff6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 810cff8:	68fb      	ldr	r3, [r7, #12]
 810cffa:	0a5b      	lsrs	r3, r3, #9
 810cffc:	f003 030f 	and.w	r3, r3, #15
 810d000:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 810d002:	693b      	ldr	r3, [r7, #16]
}
 810d004:	4618      	mov	r0, r3
 810d006:	3718      	adds	r7, #24
 810d008:	46bd      	mov	sp, r7
 810d00a:	bd80      	pop	{r7, pc}

0810d00c <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 810d00c:	b580      	push	{r7, lr}
 810d00e:	b090      	sub	sp, #64	; 0x40
 810d010:	af00      	add	r7, sp, #0
 810d012:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 810d014:	2301      	movs	r3, #1
 810d016:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 810d018:	687b      	ldr	r3, [r7, #4]
 810d01a:	681b      	ldr	r3, [r3, #0]
 810d01c:	4618      	mov	r0, r3
 810d01e:	f004 faa8 	bl	8111572 <SDMMC_GetPowerState>
 810d022:	4603      	mov	r3, r0
 810d024:	2b00      	cmp	r3, #0
 810d026:	d102      	bne.n	810d02e <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 810d028:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 810d02c:	e0a5      	b.n	810d17a <SD_InitCard+0x16e>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 810d02e:	687b      	ldr	r3, [r7, #4]
 810d030:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810d032:	2b03      	cmp	r3, #3
 810d034:	d02e      	beq.n	810d094 <SD_InitCard+0x88>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 810d036:	687b      	ldr	r3, [r7, #4]
 810d038:	681b      	ldr	r3, [r3, #0]
 810d03a:	4618      	mov	r0, r3
 810d03c:	f004 fcf3 	bl	8111a26 <SDMMC_CmdSendCID>
 810d040:	63f8      	str	r0, [r7, #60]	; 0x3c
    if (errorstate != HAL_SD_ERROR_NONE)
 810d042:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 810d044:	2b00      	cmp	r3, #0
 810d046:	d001      	beq.n	810d04c <SD_InitCard+0x40>
    {
      return errorstate;
 810d048:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 810d04a:	e096      	b.n	810d17a <SD_InitCard+0x16e>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 810d04c:	687b      	ldr	r3, [r7, #4]
 810d04e:	681b      	ldr	r3, [r3, #0]
 810d050:	2100      	movs	r1, #0
 810d052:	4618      	mov	r0, r3
 810d054:	f004 fad3 	bl	81115fe <SDMMC_GetResponse>
 810d058:	4602      	mov	r2, r0
 810d05a:	687b      	ldr	r3, [r7, #4]
 810d05c:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 810d05e:	687b      	ldr	r3, [r7, #4]
 810d060:	681b      	ldr	r3, [r3, #0]
 810d062:	2104      	movs	r1, #4
 810d064:	4618      	mov	r0, r3
 810d066:	f004 faca 	bl	81115fe <SDMMC_GetResponse>
 810d06a:	4602      	mov	r2, r0
 810d06c:	687b      	ldr	r3, [r7, #4]
 810d06e:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 810d070:	687b      	ldr	r3, [r7, #4]
 810d072:	681b      	ldr	r3, [r3, #0]
 810d074:	2108      	movs	r1, #8
 810d076:	4618      	mov	r0, r3
 810d078:	f004 fac1 	bl	81115fe <SDMMC_GetResponse>
 810d07c:	4602      	mov	r2, r0
 810d07e:	687b      	ldr	r3, [r7, #4]
 810d080:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 810d082:	687b      	ldr	r3, [r7, #4]
 810d084:	681b      	ldr	r3, [r3, #0]
 810d086:	210c      	movs	r1, #12
 810d088:	4618      	mov	r0, r3
 810d08a:	f004 fab8 	bl	81115fe <SDMMC_GetResponse>
 810d08e:	4602      	mov	r2, r0
 810d090:	687b      	ldr	r3, [r7, #4]
 810d092:	67da      	str	r2, [r3, #124]	; 0x7c
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 810d094:	687b      	ldr	r3, [r7, #4]
 810d096:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810d098:	2b03      	cmp	r3, #3
 810d09a:	d00d      	beq.n	810d0b8 <SD_InitCard+0xac>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 810d09c:	687b      	ldr	r3, [r7, #4]
 810d09e:	681b      	ldr	r3, [r3, #0]
 810d0a0:	f107 020e 	add.w	r2, r7, #14
 810d0a4:	4611      	mov	r1, r2
 810d0a6:	4618      	mov	r0, r3
 810d0a8:	f004 fcfc 	bl	8111aa4 <SDMMC_CmdSetRelAdd>
 810d0ac:	63f8      	str	r0, [r7, #60]	; 0x3c
    if (errorstate != HAL_SD_ERROR_NONE)
 810d0ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 810d0b0:	2b00      	cmp	r3, #0
 810d0b2:	d001      	beq.n	810d0b8 <SD_InitCard+0xac>
    {
      return errorstate;
 810d0b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 810d0b6:	e060      	b.n	810d17a <SD_InitCard+0x16e>
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 810d0b8:	687b      	ldr	r3, [r7, #4]
 810d0ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810d0bc:	2b03      	cmp	r3, #3
 810d0be:	d036      	beq.n	810d12e <SD_InitCard+0x122>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 810d0c0:	89fb      	ldrh	r3, [r7, #14]
 810d0c2:	461a      	mov	r2, r3
 810d0c4:	687b      	ldr	r3, [r7, #4]
 810d0c6:	649a      	str	r2, [r3, #72]	; 0x48

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 810d0c8:	687b      	ldr	r3, [r7, #4]
 810d0ca:	681a      	ldr	r2, [r3, #0]
 810d0cc:	687b      	ldr	r3, [r7, #4]
 810d0ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 810d0d0:	041b      	lsls	r3, r3, #16
 810d0d2:	4619      	mov	r1, r3
 810d0d4:	4610      	mov	r0, r2
 810d0d6:	f004 fcc5 	bl	8111a64 <SDMMC_CmdSendCSD>
 810d0da:	63f8      	str	r0, [r7, #60]	; 0x3c
    if (errorstate != HAL_SD_ERROR_NONE)
 810d0dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 810d0de:	2b00      	cmp	r3, #0
 810d0e0:	d001      	beq.n	810d0e6 <SD_InitCard+0xda>
    {
      return errorstate;
 810d0e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 810d0e4:	e049      	b.n	810d17a <SD_InitCard+0x16e>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 810d0e6:	687b      	ldr	r3, [r7, #4]
 810d0e8:	681b      	ldr	r3, [r3, #0]
 810d0ea:	2100      	movs	r1, #0
 810d0ec:	4618      	mov	r0, r3
 810d0ee:	f004 fa86 	bl	81115fe <SDMMC_GetResponse>
 810d0f2:	4602      	mov	r2, r0
 810d0f4:	687b      	ldr	r3, [r7, #4]
 810d0f6:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 810d0f8:	687b      	ldr	r3, [r7, #4]
 810d0fa:	681b      	ldr	r3, [r3, #0]
 810d0fc:	2104      	movs	r1, #4
 810d0fe:	4618      	mov	r0, r3
 810d100:	f004 fa7d 	bl	81115fe <SDMMC_GetResponse>
 810d104:	4602      	mov	r2, r0
 810d106:	687b      	ldr	r3, [r7, #4]
 810d108:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 810d10a:	687b      	ldr	r3, [r7, #4]
 810d10c:	681b      	ldr	r3, [r3, #0]
 810d10e:	2108      	movs	r1, #8
 810d110:	4618      	mov	r0, r3
 810d112:	f004 fa74 	bl	81115fe <SDMMC_GetResponse>
 810d116:	4602      	mov	r2, r0
 810d118:	687b      	ldr	r3, [r7, #4]
 810d11a:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 810d11c:	687b      	ldr	r3, [r7, #4]
 810d11e:	681b      	ldr	r3, [r3, #0]
 810d120:	210c      	movs	r1, #12
 810d122:	4618      	mov	r0, r3
 810d124:	f004 fa6b 	bl	81115fe <SDMMC_GetResponse>
 810d128:	4602      	mov	r2, r0
 810d12a:	687b      	ldr	r3, [r7, #4]
 810d12c:	66da      	str	r2, [r3, #108]	; 0x6c
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 810d12e:	687b      	ldr	r3, [r7, #4]
 810d130:	681b      	ldr	r3, [r3, #0]
 810d132:	2104      	movs	r1, #4
 810d134:	4618      	mov	r0, r3
 810d136:	f004 fa62 	bl	81115fe <SDMMC_GetResponse>
 810d13a:	4603      	mov	r3, r0
 810d13c:	0d1a      	lsrs	r2, r3, #20
 810d13e:	687b      	ldr	r3, [r7, #4]
 810d140:	645a      	str	r2, [r3, #68]	; 0x44

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 810d142:	f107 0310 	add.w	r3, r7, #16
 810d146:	4619      	mov	r1, r3
 810d148:	6878      	ldr	r0, [r7, #4]
 810d14a:	f7ff fba5 	bl	810c898 <HAL_SD_GetCardCSD>
 810d14e:	4603      	mov	r3, r0
 810d150:	2b00      	cmp	r3, #0
 810d152:	d002      	beq.n	810d15a <SD_InitCard+0x14e>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 810d154:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 810d158:	e00f      	b.n	810d17a <SD_InitCard+0x16e>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 810d15a:	687b      	ldr	r3, [r7, #4]
 810d15c:	681a      	ldr	r2, [r3, #0]
 810d15e:	687b      	ldr	r3, [r7, #4]
 810d160:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 810d162:	041b      	lsls	r3, r3, #16
 810d164:	4619      	mov	r1, r3
 810d166:	4610      	mov	r0, r2
 810d168:	f004 fb74 	bl	8111854 <SDMMC_CmdSelDesel>
 810d16c:	63f8      	str	r0, [r7, #60]	; 0x3c
  if (errorstate != HAL_SD_ERROR_NONE)
 810d16e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 810d170:	2b00      	cmp	r3, #0
 810d172:	d001      	beq.n	810d178 <SD_InitCard+0x16c>
  {
    return errorstate;
 810d174:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 810d176:	e000      	b.n	810d17a <SD_InitCard+0x16e>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 810d178:	2300      	movs	r3, #0
}
 810d17a:	4618      	mov	r0, r3
 810d17c:	3740      	adds	r7, #64	; 0x40
 810d17e:	46bd      	mov	sp, r7
 810d180:	bd80      	pop	{r7, pc}
	...

0810d184 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 810d184:	b580      	push	{r7, lr}
 810d186:	b088      	sub	sp, #32
 810d188:	af00      	add	r7, sp, #0
 810d18a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 810d18c:	2300      	movs	r3, #0
 810d18e:	60fb      	str	r3, [r7, #12]
  uint32_t response = 0U;
 810d190:	2300      	movs	r3, #0
 810d192:	61fb      	str	r3, [r7, #28]
  uint32_t validvoltage = 0U;
 810d194:	2300      	movs	r3, #0
 810d196:	61bb      	str	r3, [r7, #24]
  uint32_t errorstate;
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
 810d198:	f7f5 fc76 	bl	8102a88 <HAL_GetTick>
 810d19c:	6178      	str	r0, [r7, #20]
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 810d19e:	687b      	ldr	r3, [r7, #4]
 810d1a0:	681b      	ldr	r3, [r3, #0]
 810d1a2:	4618      	mov	r0, r3
 810d1a4:	f004 fb79 	bl	811189a <SDMMC_CmdGoIdleState>
 810d1a8:	6138      	str	r0, [r7, #16]
  if (errorstate != HAL_SD_ERROR_NONE)
 810d1aa:	693b      	ldr	r3, [r7, #16]
 810d1ac:	2b00      	cmp	r3, #0
 810d1ae:	d001      	beq.n	810d1b4 <SD_PowerON+0x30>
  {
    return errorstate;
 810d1b0:	693b      	ldr	r3, [r7, #16]
 810d1b2:	e0e9      	b.n	810d388 <SD_PowerON+0x204>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 810d1b4:	687b      	ldr	r3, [r7, #4]
 810d1b6:	681b      	ldr	r3, [r3, #0]
 810d1b8:	4618      	mov	r0, r3
 810d1ba:	f004 fb8c 	bl	81118d6 <SDMMC_CmdOperCond>
 810d1be:	6138      	str	r0, [r7, #16]
  if (errorstate != HAL_SD_ERROR_NONE)
 810d1c0:	693b      	ldr	r3, [r7, #16]
 810d1c2:	2b00      	cmp	r3, #0
 810d1c4:	d00d      	beq.n	810d1e2 <SD_PowerON+0x5e>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 810d1c6:	687b      	ldr	r3, [r7, #4]
 810d1c8:	2200      	movs	r2, #0
 810d1ca:	641a      	str	r2, [r3, #64]	; 0x40
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 810d1cc:	687b      	ldr	r3, [r7, #4]
 810d1ce:	681b      	ldr	r3, [r3, #0]
 810d1d0:	4618      	mov	r0, r3
 810d1d2:	f004 fb62 	bl	811189a <SDMMC_CmdGoIdleState>
 810d1d6:	6138      	str	r0, [r7, #16]
    if (errorstate != HAL_SD_ERROR_NONE)
 810d1d8:	693b      	ldr	r3, [r7, #16]
 810d1da:	2b00      	cmp	r3, #0
 810d1dc:	d004      	beq.n	810d1e8 <SD_PowerON+0x64>
    {
      return errorstate;
 810d1de:	693b      	ldr	r3, [r7, #16]
 810d1e0:	e0d2      	b.n	810d388 <SD_PowerON+0x204>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 810d1e2:	687b      	ldr	r3, [r7, #4]
 810d1e4:	2201      	movs	r2, #1
 810d1e6:	641a      	str	r2, [r3, #64]	; 0x40
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 810d1e8:	687b      	ldr	r3, [r7, #4]
 810d1ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810d1ec:	2b01      	cmp	r3, #1
 810d1ee:	d137      	bne.n	810d260 <SD_PowerON+0xdc>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 810d1f0:	687b      	ldr	r3, [r7, #4]
 810d1f2:	681b      	ldr	r3, [r3, #0]
 810d1f4:	2100      	movs	r1, #0
 810d1f6:	4618      	mov	r0, r3
 810d1f8:	f004 fb8d 	bl	8111916 <SDMMC_CmdAppCommand>
 810d1fc:	6138      	str	r0, [r7, #16]
    if (errorstate != HAL_SD_ERROR_NONE)
 810d1fe:	693b      	ldr	r3, [r7, #16]
 810d200:	2b00      	cmp	r3, #0
 810d202:	d02d      	beq.n	810d260 <SD_PowerON+0xdc>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 810d204:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 810d208:	e0be      	b.n	810d388 <SD_PowerON+0x204>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 810d20a:	687b      	ldr	r3, [r7, #4]
 810d20c:	681b      	ldr	r3, [r3, #0]
 810d20e:	2100      	movs	r1, #0
 810d210:	4618      	mov	r0, r3
 810d212:	f004 fb80 	bl	8111916 <SDMMC_CmdAppCommand>
 810d216:	6138      	str	r0, [r7, #16]
    if (errorstate != HAL_SD_ERROR_NONE)
 810d218:	693b      	ldr	r3, [r7, #16]
 810d21a:	2b00      	cmp	r3, #0
 810d21c:	d001      	beq.n	810d222 <SD_PowerON+0x9e>
    {
      return errorstate;
 810d21e:	693b      	ldr	r3, [r7, #16]
 810d220:	e0b2      	b.n	810d388 <SD_PowerON+0x204>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 810d222:	687b      	ldr	r3, [r7, #4]
 810d224:	681b      	ldr	r3, [r3, #0]
 810d226:	495a      	ldr	r1, [pc, #360]	; (810d390 <SD_PowerON+0x20c>)
 810d228:	4618      	mov	r0, r3
 810d22a:	f004 fb97 	bl	811195c <SDMMC_CmdAppOperCommand>
 810d22e:	6138      	str	r0, [r7, #16]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 810d230:	693b      	ldr	r3, [r7, #16]
 810d232:	2b00      	cmp	r3, #0
 810d234:	d002      	beq.n	810d23c <SD_PowerON+0xb8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 810d236:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 810d23a:	e0a5      	b.n	810d388 <SD_PowerON+0x204>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 810d23c:	687b      	ldr	r3, [r7, #4]
 810d23e:	681b      	ldr	r3, [r3, #0]
 810d240:	2100      	movs	r1, #0
 810d242:	4618      	mov	r0, r3
 810d244:	f004 f9db 	bl	81115fe <SDMMC_GetResponse>
 810d248:	61f8      	str	r0, [r7, #28]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 810d24a:	69fb      	ldr	r3, [r7, #28]
 810d24c:	0fdb      	lsrs	r3, r3, #31
 810d24e:	2b01      	cmp	r3, #1
 810d250:	d101      	bne.n	810d256 <SD_PowerON+0xd2>
 810d252:	2301      	movs	r3, #1
 810d254:	e000      	b.n	810d258 <SD_PowerON+0xd4>
 810d256:	2300      	movs	r3, #0
 810d258:	61bb      	str	r3, [r7, #24]

    count++;
 810d25a:	68fb      	ldr	r3, [r7, #12]
 810d25c:	3301      	adds	r3, #1
 810d25e:	60fb      	str	r3, [r7, #12]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 810d260:	68fb      	ldr	r3, [r7, #12]
 810d262:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 810d266:	4293      	cmp	r3, r2
 810d268:	d802      	bhi.n	810d270 <SD_PowerON+0xec>
 810d26a:	69bb      	ldr	r3, [r7, #24]
 810d26c:	2b00      	cmp	r3, #0
 810d26e:	d0cc      	beq.n	810d20a <SD_PowerON+0x86>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 810d270:	68fb      	ldr	r3, [r7, #12]
 810d272:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 810d276:	4293      	cmp	r3, r2
 810d278:	d902      	bls.n	810d280 <SD_PowerON+0xfc>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 810d27a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 810d27e:	e083      	b.n	810d388 <SD_PowerON+0x204>
  }

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 810d280:	69fb      	ldr	r3, [r7, #28]
 810d282:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 810d286:	2b00      	cmp	r3, #0
 810d288:	d07d      	beq.n	810d386 <SD_PowerON+0x202>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 810d28a:	687b      	ldr	r3, [r7, #4]
 810d28c:	2201      	movs	r2, #1
 810d28e:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_SD_TRANSCEIVER != 0U)
    if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 810d290:	687b      	ldr	r3, [r7, #4]
 810d292:	699b      	ldr	r3, [r3, #24]
 810d294:	2b02      	cmp	r3, #2
 810d296:	d176      	bne.n	810d386 <SD_PowerON+0x202>
    {
      if ((response & SD_SWITCH_1_8V_CAPACITY) == SD_SWITCH_1_8V_CAPACITY)
 810d298:	69fb      	ldr	r3, [r7, #28]
 810d29a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 810d29e:	2b00      	cmp	r3, #0
 810d2a0:	d071      	beq.n	810d386 <SD_PowerON+0x202>
      {
        hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 810d2a2:	687b      	ldr	r3, [r7, #4]
 810d2a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 810d2a8:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Start switching procedue */
        hsd->Instance->POWER |= SDMMC_POWER_VSWITCHEN;
 810d2aa:	687b      	ldr	r3, [r7, #4]
 810d2ac:	681b      	ldr	r3, [r3, #0]
 810d2ae:	681a      	ldr	r2, [r3, #0]
 810d2b0:	687b      	ldr	r3, [r7, #4]
 810d2b2:	681b      	ldr	r3, [r3, #0]
 810d2b4:	f042 0208 	orr.w	r2, r2, #8
 810d2b8:	601a      	str	r2, [r3, #0]

        /* Send CMD11 to switch 1.8V mode */
        errorstate = SDMMC_CmdVoltageSwitch(hsd->Instance);
 810d2ba:	687b      	ldr	r3, [r7, #4]
 810d2bc:	681b      	ldr	r3, [r3, #0]
 810d2be:	4618      	mov	r0, r3
 810d2c0:	f004 fc57 	bl	8111b72 <SDMMC_CmdVoltageSwitch>
 810d2c4:	6138      	str	r0, [r7, #16]
        if (errorstate != HAL_SD_ERROR_NONE)
 810d2c6:	693b      	ldr	r3, [r7, #16]
 810d2c8:	2b00      	cmp	r3, #0
 810d2ca:	d00c      	beq.n	810d2e6 <SD_PowerON+0x162>
        {
          return errorstate;
 810d2cc:	693b      	ldr	r3, [r7, #16]
 810d2ce:	e05b      	b.n	810d388 <SD_PowerON+0x204>
        }

        /* Check to CKSTOP */
        while ((hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
        {
          if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 810d2d0:	f7f5 fbda 	bl	8102a88 <HAL_GetTick>
 810d2d4:	4602      	mov	r2, r0
 810d2d6:	697b      	ldr	r3, [r7, #20]
 810d2d8:	1ad3      	subs	r3, r2, r3
 810d2da:	f1b3 3fff 	cmp.w	r3, #4294967295
 810d2de:	d102      	bne.n	810d2e6 <SD_PowerON+0x162>
          {
            return HAL_SD_ERROR_TIMEOUT;
 810d2e0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 810d2e4:	e050      	b.n	810d388 <SD_PowerON+0x204>
        while ((hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
 810d2e6:	687b      	ldr	r3, [r7, #4]
 810d2e8:	681b      	ldr	r3, [r3, #0]
 810d2ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 810d2ec:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 810d2f0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 810d2f4:	d1ec      	bne.n	810d2d0 <SD_PowerON+0x14c>
          }
        }

        /* Clear CKSTOP Flag */
        hsd->Instance->ICR = SDMMC_FLAG_CKSTOP;
 810d2f6:	687b      	ldr	r3, [r7, #4]
 810d2f8:	681b      	ldr	r3, [r3, #0]
 810d2fa:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 810d2fe:	639a      	str	r2, [r3, #56]	; 0x38

        /* Check to BusyD0 */
        if ((hsd->Instance->STA & SDMMC_FLAG_BUSYD0) != SDMMC_FLAG_BUSYD0)
 810d300:	687b      	ldr	r3, [r7, #4]
 810d302:	681b      	ldr	r3, [r3, #0]
 810d304:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 810d306:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 810d30a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 810d30e:	d002      	beq.n	810d316 <SD_PowerON+0x192>
        {
          /* Error when activate Voltage Switch in SDMMC Peripheral */
          return SDMMC_ERROR_UNSUPPORTED_FEATURE;
 810d310:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 810d314:	e038      	b.n	810d388 <SD_PowerON+0x204>
        {
          /* Enable Transceiver Switch PIN */
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->DriveTransceiver_1_8V_Callback(SET);
#else
          HAL_SD_DriveTransceiver_1_8V_Callback(SET);
 810d316:	2001      	movs	r0, #1
 810d318:	f7ff fab2 	bl	810c880 <HAL_SD_DriveTransceiver_1_8V_Callback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */

          /* Switch ready */
          hsd->Instance->POWER |= SDMMC_POWER_VSWITCH;
 810d31c:	687b      	ldr	r3, [r7, #4]
 810d31e:	681b      	ldr	r3, [r3, #0]
 810d320:	681a      	ldr	r2, [r3, #0]
 810d322:	687b      	ldr	r3, [r7, #4]
 810d324:	681b      	ldr	r3, [r3, #0]
 810d326:	f042 0204 	orr.w	r2, r2, #4
 810d32a:	601a      	str	r2, [r3, #0]

          /* Check VSWEND Flag */
          while ((hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 810d32c:	e00a      	b.n	810d344 <SD_PowerON+0x1c0>
          {
            if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 810d32e:	f7f5 fbab 	bl	8102a88 <HAL_GetTick>
 810d332:	4602      	mov	r2, r0
 810d334:	697b      	ldr	r3, [r7, #20]
 810d336:	1ad3      	subs	r3, r2, r3
 810d338:	f1b3 3fff 	cmp.w	r3, #4294967295
 810d33c:	d102      	bne.n	810d344 <SD_PowerON+0x1c0>
            {
              return HAL_SD_ERROR_TIMEOUT;
 810d33e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 810d342:	e021      	b.n	810d388 <SD_PowerON+0x204>
          while ((hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 810d344:	687b      	ldr	r3, [r7, #4]
 810d346:	681b      	ldr	r3, [r3, #0]
 810d348:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 810d34a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 810d34e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 810d352:	d1ec      	bne.n	810d32e <SD_PowerON+0x1aa>
            }
          }

          /* Clear VSWEND Flag */
          hsd->Instance->ICR = SDMMC_FLAG_VSWEND;
 810d354:	687b      	ldr	r3, [r7, #4]
 810d356:	681b      	ldr	r3, [r3, #0]
 810d358:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 810d35c:	639a      	str	r2, [r3, #56]	; 0x38

          /* Check BusyD0 status */
          if ((hsd->Instance->STA & SDMMC_FLAG_BUSYD0) == SDMMC_FLAG_BUSYD0)
 810d35e:	687b      	ldr	r3, [r7, #4]
 810d360:	681b      	ldr	r3, [r3, #0]
 810d362:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 810d364:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 810d368:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 810d36c:	d102      	bne.n	810d374 <SD_PowerON+0x1f0>
          {
            /* Error when enabling 1.8V mode */
            return HAL_SD_ERROR_INVALID_VOLTRANGE;
 810d36e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 810d372:	e009      	b.n	810d388 <SD_PowerON+0x204>
          }
          /* Switch to 1.8V OK */

          /* Disable VSWITCH FLAG from SDMMC Peripheral */
          hsd->Instance->POWER = 0x13U;
 810d374:	687b      	ldr	r3, [r7, #4]
 810d376:	681b      	ldr	r3, [r3, #0]
 810d378:	2213      	movs	r2, #19
 810d37a:	601a      	str	r2, [r3, #0]

          /* Clean Status flags */
          hsd->Instance->ICR = 0xFFFFFFFFU;
 810d37c:	687b      	ldr	r3, [r7, #4]
 810d37e:	681b      	ldr	r3, [r3, #0]
 810d380:	f04f 32ff 	mov.w	r2, #4294967295
 810d384:	639a      	str	r2, [r3, #56]	; 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 810d386:	2300      	movs	r3, #0
}
 810d388:	4618      	mov	r0, r3
 810d38a:	3720      	adds	r7, #32
 810d38c:	46bd      	mov	sp, r7
 810d38e:	bd80      	pop	{r7, pc}
 810d390:	c1100000 	.word	0xc1100000

0810d394 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 810d394:	b580      	push	{r7, lr}
 810d396:	b08c      	sub	sp, #48	; 0x30
 810d398:	af00      	add	r7, sp, #0
 810d39a:	6078      	str	r0, [r7, #4]
 810d39c:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 810d39e:	f7f5 fb73 	bl	8102a88 <HAL_GetTick>
 810d3a2:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 810d3a4:	683b      	ldr	r3, [r7, #0]
 810d3a6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 810d3a8:	687b      	ldr	r3, [r7, #4]
 810d3aa:	681b      	ldr	r3, [r3, #0]
 810d3ac:	2100      	movs	r1, #0
 810d3ae:	4618      	mov	r0, r3
 810d3b0:	f004 f925 	bl	81115fe <SDMMC_GetResponse>
 810d3b4:	4603      	mov	r3, r0
 810d3b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 810d3ba:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 810d3be:	d102      	bne.n	810d3c6 <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 810d3c0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 810d3c4:	e0b0      	b.n	810d528 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 810d3c6:	687b      	ldr	r3, [r7, #4]
 810d3c8:	681b      	ldr	r3, [r3, #0]
 810d3ca:	2140      	movs	r1, #64	; 0x40
 810d3cc:	4618      	mov	r0, r3
 810d3ce:	f004 f955 	bl	811167c <SDMMC_CmdBlockLength>
 810d3d2:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 810d3d4:	6a3b      	ldr	r3, [r7, #32]
 810d3d6:	2b00      	cmp	r3, #0
 810d3d8:	d005      	beq.n	810d3e6 <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 810d3da:	687b      	ldr	r3, [r7, #4]
 810d3dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 810d3de:	687b      	ldr	r3, [r7, #4]
 810d3e0:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 810d3e2:	6a3b      	ldr	r3, [r7, #32]
 810d3e4:	e0a0      	b.n	810d528 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 810d3e6:	687b      	ldr	r3, [r7, #4]
 810d3e8:	681a      	ldr	r2, [r3, #0]
 810d3ea:	687b      	ldr	r3, [r7, #4]
 810d3ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 810d3ee:	041b      	lsls	r3, r3, #16
 810d3f0:	4619      	mov	r1, r3
 810d3f2:	4610      	mov	r0, r2
 810d3f4:	f004 fa8f 	bl	8111916 <SDMMC_CmdAppCommand>
 810d3f8:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 810d3fa:	6a3b      	ldr	r3, [r7, #32]
 810d3fc:	2b00      	cmp	r3, #0
 810d3fe:	d005      	beq.n	810d40c <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 810d400:	687b      	ldr	r3, [r7, #4]
 810d402:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 810d404:	687b      	ldr	r3, [r7, #4]
 810d406:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 810d408:	6a3b      	ldr	r3, [r7, #32]
 810d40a:	e08d      	b.n	810d528 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 810d40c:	f04f 33ff 	mov.w	r3, #4294967295
 810d410:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 810d412:	2340      	movs	r3, #64	; 0x40
 810d414:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 810d416:	2360      	movs	r3, #96	; 0x60
 810d418:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 810d41a:	2302      	movs	r3, #2
 810d41c:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 810d41e:	2300      	movs	r3, #0
 810d420:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 810d422:	2301      	movs	r3, #1
 810d424:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 810d426:	687b      	ldr	r3, [r7, #4]
 810d428:	681b      	ldr	r3, [r3, #0]
 810d42a:	f107 0208 	add.w	r2, r7, #8
 810d42e:	4611      	mov	r1, r2
 810d430:	4618      	mov	r0, r3
 810d432:	f004 f8f7 	bl	8111624 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 810d436:	687b      	ldr	r3, [r7, #4]
 810d438:	681b      	ldr	r3, [r3, #0]
 810d43a:	4618      	mov	r0, r3
 810d43c:	f004 fb77 	bl	8111b2e <SDMMC_CmdStatusRegister>
 810d440:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 810d442:	6a3b      	ldr	r3, [r7, #32]
 810d444:	2b00      	cmp	r3, #0
 810d446:	d02b      	beq.n	810d4a0 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 810d448:	687b      	ldr	r3, [r7, #4]
 810d44a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 810d44c:	687b      	ldr	r3, [r7, #4]
 810d44e:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 810d450:	6a3b      	ldr	r3, [r7, #32]
 810d452:	e069      	b.n	810d528 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 810d454:	687b      	ldr	r3, [r7, #4]
 810d456:	681b      	ldr	r3, [r3, #0]
 810d458:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 810d45a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 810d45e:	2b00      	cmp	r3, #0
 810d460:	d013      	beq.n	810d48a <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 810d462:	2300      	movs	r3, #0
 810d464:	62fb      	str	r3, [r7, #44]	; 0x2c
 810d466:	e00d      	b.n	810d484 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 810d468:	687b      	ldr	r3, [r7, #4]
 810d46a:	681b      	ldr	r3, [r3, #0]
 810d46c:	4618      	mov	r0, r3
 810d46e:	f004 f851 	bl	8111514 <SDMMC_ReadFIFO>
 810d472:	4602      	mov	r2, r0
 810d474:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810d476:	601a      	str	r2, [r3, #0]
        pData++;
 810d478:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810d47a:	3304      	adds	r3, #4
 810d47c:	62bb      	str	r3, [r7, #40]	; 0x28
      for (count = 0U; count < 8U; count++)
 810d47e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810d480:	3301      	adds	r3, #1
 810d482:	62fb      	str	r3, [r7, #44]	; 0x2c
 810d484:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810d486:	2b07      	cmp	r3, #7
 810d488:	d9ee      	bls.n	810d468 <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 810d48a:	f7f5 fafd 	bl	8102a88 <HAL_GetTick>
 810d48e:	4602      	mov	r2, r0
 810d490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810d492:	1ad3      	subs	r3, r2, r3
 810d494:	f1b3 3fff 	cmp.w	r3, #4294967295
 810d498:	d102      	bne.n	810d4a0 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 810d49a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 810d49e:	e043      	b.n	810d528 <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 810d4a0:	687b      	ldr	r3, [r7, #4]
 810d4a2:	681b      	ldr	r3, [r3, #0]
 810d4a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 810d4a6:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 810d4aa:	2b00      	cmp	r3, #0
 810d4ac:	d0d2      	beq.n	810d454 <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 810d4ae:	687b      	ldr	r3, [r7, #4]
 810d4b0:	681b      	ldr	r3, [r3, #0]
 810d4b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 810d4b4:	f003 0308 	and.w	r3, r3, #8
 810d4b8:	2b00      	cmp	r3, #0
 810d4ba:	d001      	beq.n	810d4c0 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 810d4bc:	2308      	movs	r3, #8
 810d4be:	e033      	b.n	810d528 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 810d4c0:	687b      	ldr	r3, [r7, #4]
 810d4c2:	681b      	ldr	r3, [r3, #0]
 810d4c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 810d4c6:	f003 0302 	and.w	r3, r3, #2
 810d4ca:	2b00      	cmp	r3, #0
 810d4cc:	d001      	beq.n	810d4d2 <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 810d4ce:	2302      	movs	r3, #2
 810d4d0:	e02a      	b.n	810d528 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 810d4d2:	687b      	ldr	r3, [r7, #4]
 810d4d4:	681b      	ldr	r3, [r3, #0]
 810d4d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 810d4d8:	f003 0320 	and.w	r3, r3, #32
 810d4dc:	2b00      	cmp	r3, #0
 810d4de:	d017      	beq.n	810d510 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 810d4e0:	2320      	movs	r3, #32
 810d4e2:	e021      	b.n	810d528 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 810d4e4:	687b      	ldr	r3, [r7, #4]
 810d4e6:	681b      	ldr	r3, [r3, #0]
 810d4e8:	4618      	mov	r0, r3
 810d4ea:	f004 f813 	bl	8111514 <SDMMC_ReadFIFO>
 810d4ee:	4602      	mov	r2, r0
 810d4f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810d4f2:	601a      	str	r2, [r3, #0]
    pData++;
 810d4f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810d4f6:	3304      	adds	r3, #4
 810d4f8:	62bb      	str	r3, [r7, #40]	; 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 810d4fa:	f7f5 fac5 	bl	8102a88 <HAL_GetTick>
 810d4fe:	4602      	mov	r2, r0
 810d500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810d502:	1ad3      	subs	r3, r2, r3
 810d504:	f1b3 3fff 	cmp.w	r3, #4294967295
 810d508:	d102      	bne.n	810d510 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 810d50a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 810d50e:	e00b      	b.n	810d528 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 810d510:	687b      	ldr	r3, [r7, #4]
 810d512:	681b      	ldr	r3, [r3, #0]
 810d514:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 810d516:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 810d51a:	2b00      	cmp	r3, #0
 810d51c:	d1e2      	bne.n	810d4e4 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 810d51e:	687b      	ldr	r3, [r7, #4]
 810d520:	681b      	ldr	r3, [r3, #0]
 810d522:	4a03      	ldr	r2, [pc, #12]	; (810d530 <SD_SendSDStatus+0x19c>)
 810d524:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 810d526:	2300      	movs	r3, #0
}
 810d528:	4618      	mov	r0, r3
 810d52a:	3730      	adds	r7, #48	; 0x30
 810d52c:	46bd      	mov	sp, r7
 810d52e:	bd80      	pop	{r7, pc}
 810d530:	18000f3a 	.word	0x18000f3a

0810d534 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 810d534:	b580      	push	{r7, lr}
 810d536:	b084      	sub	sp, #16
 810d538:	af00      	add	r7, sp, #0
 810d53a:	6078      	str	r0, [r7, #4]
 810d53c:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 810d53e:	683b      	ldr	r3, [r7, #0]
 810d540:	2b00      	cmp	r3, #0
 810d542:	d102      	bne.n	810d54a <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 810d544:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 810d548:	e018      	b.n	810d57c <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 810d54a:	687b      	ldr	r3, [r7, #4]
 810d54c:	681a      	ldr	r2, [r3, #0]
 810d54e:	687b      	ldr	r3, [r7, #4]
 810d550:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 810d552:	041b      	lsls	r3, r3, #16
 810d554:	4619      	mov	r1, r3
 810d556:	4610      	mov	r0, r2
 810d558:	f004 fac6 	bl	8111ae8 <SDMMC_CmdSendStatus>
 810d55c:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 810d55e:	68fb      	ldr	r3, [r7, #12]
 810d560:	2b00      	cmp	r3, #0
 810d562:	d001      	beq.n	810d568 <SD_SendStatus+0x34>
  {
    return errorstate;
 810d564:	68fb      	ldr	r3, [r7, #12]
 810d566:	e009      	b.n	810d57c <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 810d568:	687b      	ldr	r3, [r7, #4]
 810d56a:	681b      	ldr	r3, [r3, #0]
 810d56c:	2100      	movs	r1, #0
 810d56e:	4618      	mov	r0, r3
 810d570:	f004 f845 	bl	81115fe <SDMMC_GetResponse>
 810d574:	4602      	mov	r2, r0
 810d576:	683b      	ldr	r3, [r7, #0]
 810d578:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 810d57a:	2300      	movs	r3, #0
}
 810d57c:	4618      	mov	r0, r3
 810d57e:	3710      	adds	r7, #16
 810d580:	46bd      	mov	sp, r7
 810d582:	bd80      	pop	{r7, pc}

0810d584 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 810d584:	b580      	push	{r7, lr}
 810d586:	b086      	sub	sp, #24
 810d588:	af00      	add	r7, sp, #0
 810d58a:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 810d58c:	2300      	movs	r3, #0
 810d58e:	60fb      	str	r3, [r7, #12]
 810d590:	2300      	movs	r3, #0
 810d592:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 810d594:	687b      	ldr	r3, [r7, #4]
 810d596:	681b      	ldr	r3, [r3, #0]
 810d598:	2100      	movs	r1, #0
 810d59a:	4618      	mov	r0, r3
 810d59c:	f004 f82f 	bl	81115fe <SDMMC_GetResponse>
 810d5a0:	4603      	mov	r3, r0
 810d5a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 810d5a6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 810d5aa:	d102      	bne.n	810d5b2 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 810d5ac:	f44f 6300 	mov.w	r3, #2048	; 0x800
 810d5b0:	e02f      	b.n	810d612 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 810d5b2:	f107 030c 	add.w	r3, r7, #12
 810d5b6:	4619      	mov	r1, r3
 810d5b8:	6878      	ldr	r0, [r7, #4]
 810d5ba:	f000 f879 	bl	810d6b0 <SD_FindSCR>
 810d5be:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 810d5c0:	697b      	ldr	r3, [r7, #20]
 810d5c2:	2b00      	cmp	r3, #0
 810d5c4:	d001      	beq.n	810d5ca <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 810d5c6:	697b      	ldr	r3, [r7, #20]
 810d5c8:	e023      	b.n	810d612 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 810d5ca:	693b      	ldr	r3, [r7, #16]
 810d5cc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 810d5d0:	2b00      	cmp	r3, #0
 810d5d2:	d01c      	beq.n	810d60e <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 810d5d4:	687b      	ldr	r3, [r7, #4]
 810d5d6:	681a      	ldr	r2, [r3, #0]
 810d5d8:	687b      	ldr	r3, [r7, #4]
 810d5da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 810d5dc:	041b      	lsls	r3, r3, #16
 810d5de:	4619      	mov	r1, r3
 810d5e0:	4610      	mov	r0, r2
 810d5e2:	f004 f998 	bl	8111916 <SDMMC_CmdAppCommand>
 810d5e6:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 810d5e8:	697b      	ldr	r3, [r7, #20]
 810d5ea:	2b00      	cmp	r3, #0
 810d5ec:	d001      	beq.n	810d5f2 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 810d5ee:	697b      	ldr	r3, [r7, #20]
 810d5f0:	e00f      	b.n	810d612 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 810d5f2:	687b      	ldr	r3, [r7, #4]
 810d5f4:	681b      	ldr	r3, [r3, #0]
 810d5f6:	2102      	movs	r1, #2
 810d5f8:	4618      	mov	r0, r3
 810d5fa:	f004 f9cf 	bl	811199c <SDMMC_CmdBusWidth>
 810d5fe:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 810d600:	697b      	ldr	r3, [r7, #20]
 810d602:	2b00      	cmp	r3, #0
 810d604:	d001      	beq.n	810d60a <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 810d606:	697b      	ldr	r3, [r7, #20]
 810d608:	e003      	b.n	810d612 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 810d60a:	2300      	movs	r3, #0
 810d60c:	e001      	b.n	810d612 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 810d60e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 810d612:	4618      	mov	r0, r3
 810d614:	3718      	adds	r7, #24
 810d616:	46bd      	mov	sp, r7
 810d618:	bd80      	pop	{r7, pc}

0810d61a <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 810d61a:	b580      	push	{r7, lr}
 810d61c:	b086      	sub	sp, #24
 810d61e:	af00      	add	r7, sp, #0
 810d620:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 810d622:	2300      	movs	r3, #0
 810d624:	60fb      	str	r3, [r7, #12]
 810d626:	2300      	movs	r3, #0
 810d628:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 810d62a:	687b      	ldr	r3, [r7, #4]
 810d62c:	681b      	ldr	r3, [r3, #0]
 810d62e:	2100      	movs	r1, #0
 810d630:	4618      	mov	r0, r3
 810d632:	f003 ffe4 	bl	81115fe <SDMMC_GetResponse>
 810d636:	4603      	mov	r3, r0
 810d638:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 810d63c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 810d640:	d102      	bne.n	810d648 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 810d642:	f44f 6300 	mov.w	r3, #2048	; 0x800
 810d646:	e02f      	b.n	810d6a8 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 810d648:	f107 030c 	add.w	r3, r7, #12
 810d64c:	4619      	mov	r1, r3
 810d64e:	6878      	ldr	r0, [r7, #4]
 810d650:	f000 f82e 	bl	810d6b0 <SD_FindSCR>
 810d654:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 810d656:	697b      	ldr	r3, [r7, #20]
 810d658:	2b00      	cmp	r3, #0
 810d65a:	d001      	beq.n	810d660 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 810d65c:	697b      	ldr	r3, [r7, #20]
 810d65e:	e023      	b.n	810d6a8 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 810d660:	693b      	ldr	r3, [r7, #16]
 810d662:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 810d666:	2b00      	cmp	r3, #0
 810d668:	d01c      	beq.n	810d6a4 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 810d66a:	687b      	ldr	r3, [r7, #4]
 810d66c:	681a      	ldr	r2, [r3, #0]
 810d66e:	687b      	ldr	r3, [r7, #4]
 810d670:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 810d672:	041b      	lsls	r3, r3, #16
 810d674:	4619      	mov	r1, r3
 810d676:	4610      	mov	r0, r2
 810d678:	f004 f94d 	bl	8111916 <SDMMC_CmdAppCommand>
 810d67c:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 810d67e:	697b      	ldr	r3, [r7, #20]
 810d680:	2b00      	cmp	r3, #0
 810d682:	d001      	beq.n	810d688 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 810d684:	697b      	ldr	r3, [r7, #20]
 810d686:	e00f      	b.n	810d6a8 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 810d688:	687b      	ldr	r3, [r7, #4]
 810d68a:	681b      	ldr	r3, [r3, #0]
 810d68c:	2100      	movs	r1, #0
 810d68e:	4618      	mov	r0, r3
 810d690:	f004 f984 	bl	811199c <SDMMC_CmdBusWidth>
 810d694:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 810d696:	697b      	ldr	r3, [r7, #20]
 810d698:	2b00      	cmp	r3, #0
 810d69a:	d001      	beq.n	810d6a0 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 810d69c:	697b      	ldr	r3, [r7, #20]
 810d69e:	e003      	b.n	810d6a8 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 810d6a0:	2300      	movs	r3, #0
 810d6a2:	e001      	b.n	810d6a8 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 810d6a4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 810d6a8:	4618      	mov	r0, r3
 810d6aa:	3718      	adds	r7, #24
 810d6ac:	46bd      	mov	sp, r7
 810d6ae:	bd80      	pop	{r7, pc}

0810d6b0 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 810d6b0:	b580      	push	{r7, lr}
 810d6b2:	b08e      	sub	sp, #56	; 0x38
 810d6b4:	af00      	add	r7, sp, #0
 810d6b6:	6078      	str	r0, [r7, #4]
 810d6b8:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 810d6ba:	f7f5 f9e5 	bl	8102a88 <HAL_GetTick>
 810d6be:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 810d6c0:	2300      	movs	r3, #0
 810d6c2:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 810d6c4:	2300      	movs	r3, #0
 810d6c6:	60bb      	str	r3, [r7, #8]
 810d6c8:	2300      	movs	r3, #0
 810d6ca:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 810d6cc:	683b      	ldr	r3, [r7, #0]
 810d6ce:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 810d6d0:	687b      	ldr	r3, [r7, #4]
 810d6d2:	681b      	ldr	r3, [r3, #0]
 810d6d4:	2108      	movs	r1, #8
 810d6d6:	4618      	mov	r0, r3
 810d6d8:	f003 ffd0 	bl	811167c <SDMMC_CmdBlockLength>
 810d6dc:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 810d6de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810d6e0:	2b00      	cmp	r3, #0
 810d6e2:	d001      	beq.n	810d6e8 <SD_FindSCR+0x38>
  {
    return errorstate;
 810d6e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810d6e6:	e0ad      	b.n	810d844 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 810d6e8:	687b      	ldr	r3, [r7, #4]
 810d6ea:	681a      	ldr	r2, [r3, #0]
 810d6ec:	687b      	ldr	r3, [r7, #4]
 810d6ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 810d6f0:	041b      	lsls	r3, r3, #16
 810d6f2:	4619      	mov	r1, r3
 810d6f4:	4610      	mov	r0, r2
 810d6f6:	f004 f90e 	bl	8111916 <SDMMC_CmdAppCommand>
 810d6fa:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 810d6fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810d6fe:	2b00      	cmp	r3, #0
 810d700:	d001      	beq.n	810d706 <SD_FindSCR+0x56>
  {
    return errorstate;
 810d702:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810d704:	e09e      	b.n	810d844 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 810d706:	f04f 33ff 	mov.w	r3, #4294967295
 810d70a:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 810d70c:	2308      	movs	r3, #8
 810d70e:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 810d710:	2330      	movs	r3, #48	; 0x30
 810d712:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 810d714:	2302      	movs	r3, #2
 810d716:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 810d718:	2300      	movs	r3, #0
 810d71a:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 810d71c:	2301      	movs	r3, #1
 810d71e:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 810d720:	687b      	ldr	r3, [r7, #4]
 810d722:	681b      	ldr	r3, [r3, #0]
 810d724:	f107 0210 	add.w	r2, r7, #16
 810d728:	4611      	mov	r1, r2
 810d72a:	4618      	mov	r0, r3
 810d72c:	f003 ff7a 	bl	8111624 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 810d730:	687b      	ldr	r3, [r7, #4]
 810d732:	681b      	ldr	r3, [r3, #0]
 810d734:	4618      	mov	r0, r3
 810d736:	f004 f954 	bl	81119e2 <SDMMC_CmdSendSCR>
 810d73a:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 810d73c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810d73e:	2b00      	cmp	r3, #0
 810d740:	d027      	beq.n	810d792 <SD_FindSCR+0xe2>
  {
    return errorstate;
 810d742:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810d744:	e07e      	b.n	810d844 <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 810d746:	687b      	ldr	r3, [r7, #4]
 810d748:	681b      	ldr	r3, [r3, #0]
 810d74a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 810d74c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 810d750:	2b00      	cmp	r3, #0
 810d752:	d113      	bne.n	810d77c <SD_FindSCR+0xcc>
 810d754:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 810d756:	2b00      	cmp	r3, #0
 810d758:	d110      	bne.n	810d77c <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 810d75a:	687b      	ldr	r3, [r7, #4]
 810d75c:	681b      	ldr	r3, [r3, #0]
 810d75e:	4618      	mov	r0, r3
 810d760:	f003 fed8 	bl	8111514 <SDMMC_ReadFIFO>
 810d764:	4603      	mov	r3, r0
 810d766:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 810d768:	687b      	ldr	r3, [r7, #4]
 810d76a:	681b      	ldr	r3, [r3, #0]
 810d76c:	4618      	mov	r0, r3
 810d76e:	f003 fed1 	bl	8111514 <SDMMC_ReadFIFO>
 810d772:	4603      	mov	r3, r0
 810d774:	60fb      	str	r3, [r7, #12]
      index++;
 810d776:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 810d778:	3301      	adds	r3, #1
 810d77a:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 810d77c:	f7f5 f984 	bl	8102a88 <HAL_GetTick>
 810d780:	4602      	mov	r2, r0
 810d782:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810d784:	1ad3      	subs	r3, r2, r3
 810d786:	f1b3 3fff 	cmp.w	r3, #4294967295
 810d78a:	d102      	bne.n	810d792 <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 810d78c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 810d790:	e058      	b.n	810d844 <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 810d792:	687b      	ldr	r3, [r7, #4]
 810d794:	681b      	ldr	r3, [r3, #0]
 810d796:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 810d798:	f240 532a 	movw	r3, #1322	; 0x52a
 810d79c:	4013      	ands	r3, r2
 810d79e:	2b00      	cmp	r3, #0
 810d7a0:	d0d1      	beq.n	810d746 <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 810d7a2:	687b      	ldr	r3, [r7, #4]
 810d7a4:	681b      	ldr	r3, [r3, #0]
 810d7a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 810d7a8:	f003 0308 	and.w	r3, r3, #8
 810d7ac:	2b00      	cmp	r3, #0
 810d7ae:	d005      	beq.n	810d7bc <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 810d7b0:	687b      	ldr	r3, [r7, #4]
 810d7b2:	681b      	ldr	r3, [r3, #0]
 810d7b4:	2208      	movs	r2, #8
 810d7b6:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 810d7b8:	2308      	movs	r3, #8
 810d7ba:	e043      	b.n	810d844 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 810d7bc:	687b      	ldr	r3, [r7, #4]
 810d7be:	681b      	ldr	r3, [r3, #0]
 810d7c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 810d7c2:	f003 0302 	and.w	r3, r3, #2
 810d7c6:	2b00      	cmp	r3, #0
 810d7c8:	d005      	beq.n	810d7d6 <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 810d7ca:	687b      	ldr	r3, [r7, #4]
 810d7cc:	681b      	ldr	r3, [r3, #0]
 810d7ce:	2202      	movs	r2, #2
 810d7d0:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 810d7d2:	2302      	movs	r3, #2
 810d7d4:	e036      	b.n	810d844 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 810d7d6:	687b      	ldr	r3, [r7, #4]
 810d7d8:	681b      	ldr	r3, [r3, #0]
 810d7da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 810d7dc:	f003 0320 	and.w	r3, r3, #32
 810d7e0:	2b00      	cmp	r3, #0
 810d7e2:	d005      	beq.n	810d7f0 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 810d7e4:	687b      	ldr	r3, [r7, #4]
 810d7e6:	681b      	ldr	r3, [r3, #0]
 810d7e8:	2220      	movs	r2, #32
 810d7ea:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 810d7ec:	2320      	movs	r3, #32
 810d7ee:	e029      	b.n	810d844 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 810d7f0:	687b      	ldr	r3, [r7, #4]
 810d7f2:	681b      	ldr	r3, [r3, #0]
 810d7f4:	4a15      	ldr	r2, [pc, #84]	; (810d84c <SD_FindSCR+0x19c>)
 810d7f6:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 810d7f8:	68fb      	ldr	r3, [r7, #12]
 810d7fa:	061a      	lsls	r2, r3, #24
 810d7fc:	68fb      	ldr	r3, [r7, #12]
 810d7fe:	021b      	lsls	r3, r3, #8
 810d800:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 810d804:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 810d806:	68fb      	ldr	r3, [r7, #12]
 810d808:	0a1b      	lsrs	r3, r3, #8
 810d80a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 810d80e:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 810d810:	68fb      	ldr	r3, [r7, #12]
 810d812:	0e1b      	lsrs	r3, r3, #24
 810d814:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 810d816:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810d818:	601a      	str	r2, [r3, #0]
    scr++;
 810d81a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810d81c:	3304      	adds	r3, #4
 810d81e:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 810d820:	68bb      	ldr	r3, [r7, #8]
 810d822:	061a      	lsls	r2, r3, #24
 810d824:	68bb      	ldr	r3, [r7, #8]
 810d826:	021b      	lsls	r3, r3, #8
 810d828:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 810d82c:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 810d82e:	68bb      	ldr	r3, [r7, #8]
 810d830:	0a1b      	lsrs	r3, r3, #8
 810d832:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 810d836:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 810d838:	68bb      	ldr	r3, [r7, #8]
 810d83a:	0e1b      	lsrs	r3, r3, #24
 810d83c:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 810d83e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810d840:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 810d842:	2300      	movs	r3, #0
}
 810d844:	4618      	mov	r0, r3
 810d846:	3738      	adds	r7, #56	; 0x38
 810d848:	46bd      	mov	sp, r7
 810d84a:	bd80      	pop	{r7, pc}
 810d84c:	18000f3a 	.word	0x18000f3a

0810d850 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 810d850:	b580      	push	{r7, lr}
 810d852:	b086      	sub	sp, #24
 810d854:	af00      	add	r7, sp, #0
 810d856:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pRxBuffPtr;
 810d858:	687b      	ldr	r3, [r7, #4]
 810d85a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810d85c:	613b      	str	r3, [r7, #16]

  if (hsd->RxXferSize >= 32U)
 810d85e:	687b      	ldr	r3, [r7, #4]
 810d860:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810d862:	2b1f      	cmp	r3, #31
 810d864:	d936      	bls.n	810d8d4 <SD_Read_IT+0x84>
  {
    /* Read data from SDMMC Rx FIFO */
    for (count = 0U; count < 8U; count++)
 810d866:	2300      	movs	r3, #0
 810d868:	617b      	str	r3, [r7, #20]
 810d86a:	e027      	b.n	810d8bc <SD_Read_IT+0x6c>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 810d86c:	687b      	ldr	r3, [r7, #4]
 810d86e:	681b      	ldr	r3, [r3, #0]
 810d870:	4618      	mov	r0, r3
 810d872:	f003 fe4f 	bl	8111514 <SDMMC_ReadFIFO>
 810d876:	60f8      	str	r0, [r7, #12]
      *tmp = (uint8_t)(data & 0xFFU);
 810d878:	68fb      	ldr	r3, [r7, #12]
 810d87a:	b2da      	uxtb	r2, r3
 810d87c:	693b      	ldr	r3, [r7, #16]
 810d87e:	701a      	strb	r2, [r3, #0]
      tmp++;
 810d880:	693b      	ldr	r3, [r7, #16]
 810d882:	3301      	adds	r3, #1
 810d884:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 810d886:	68fb      	ldr	r3, [r7, #12]
 810d888:	0a1b      	lsrs	r3, r3, #8
 810d88a:	b2da      	uxtb	r2, r3
 810d88c:	693b      	ldr	r3, [r7, #16]
 810d88e:	701a      	strb	r2, [r3, #0]
      tmp++;
 810d890:	693b      	ldr	r3, [r7, #16]
 810d892:	3301      	adds	r3, #1
 810d894:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 810d896:	68fb      	ldr	r3, [r7, #12]
 810d898:	0c1b      	lsrs	r3, r3, #16
 810d89a:	b2da      	uxtb	r2, r3
 810d89c:	693b      	ldr	r3, [r7, #16]
 810d89e:	701a      	strb	r2, [r3, #0]
      tmp++;
 810d8a0:	693b      	ldr	r3, [r7, #16]
 810d8a2:	3301      	adds	r3, #1
 810d8a4:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 810d8a6:	68fb      	ldr	r3, [r7, #12]
 810d8a8:	0e1b      	lsrs	r3, r3, #24
 810d8aa:	b2da      	uxtb	r2, r3
 810d8ac:	693b      	ldr	r3, [r7, #16]
 810d8ae:	701a      	strb	r2, [r3, #0]
      tmp++;
 810d8b0:	693b      	ldr	r3, [r7, #16]
 810d8b2:	3301      	adds	r3, #1
 810d8b4:	613b      	str	r3, [r7, #16]
    for (count = 0U; count < 8U; count++)
 810d8b6:	697b      	ldr	r3, [r7, #20]
 810d8b8:	3301      	adds	r3, #1
 810d8ba:	617b      	str	r3, [r7, #20]
 810d8bc:	697b      	ldr	r3, [r7, #20]
 810d8be:	2b07      	cmp	r3, #7
 810d8c0:	d9d4      	bls.n	810d86c <SD_Read_IT+0x1c>
    }

    hsd->pRxBuffPtr = tmp;
 810d8c2:	687b      	ldr	r3, [r7, #4]
 810d8c4:	693a      	ldr	r2, [r7, #16]
 810d8c6:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize -= 32U;
 810d8c8:	687b      	ldr	r3, [r7, #4]
 810d8ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810d8cc:	f1a3 0220 	sub.w	r2, r3, #32
 810d8d0:	687b      	ldr	r3, [r7, #4]
 810d8d2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 810d8d4:	bf00      	nop
 810d8d6:	3718      	adds	r7, #24
 810d8d8:	46bd      	mov	sp, r7
 810d8da:	bd80      	pop	{r7, pc}

0810d8dc <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 810d8dc:	b580      	push	{r7, lr}
 810d8de:	b086      	sub	sp, #24
 810d8e0:	af00      	add	r7, sp, #0
 810d8e2:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pTxBuffPtr;
 810d8e4:	687b      	ldr	r3, [r7, #4]
 810d8e6:	6a1b      	ldr	r3, [r3, #32]
 810d8e8:	613b      	str	r3, [r7, #16]

  if (hsd->TxXferSize >= 32U)
 810d8ea:	687b      	ldr	r3, [r7, #4]
 810d8ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810d8ee:	2b1f      	cmp	r3, #31
 810d8f0:	d93a      	bls.n	810d968 <SD_Write_IT+0x8c>
  {
    /* Write data to SDMMC Tx FIFO */
    for (count = 0U; count < 8U; count++)
 810d8f2:	2300      	movs	r3, #0
 810d8f4:	617b      	str	r3, [r7, #20]
 810d8f6:	e02b      	b.n	810d950 <SD_Write_IT+0x74>
    {
      data = (uint32_t)(*tmp);
 810d8f8:	693b      	ldr	r3, [r7, #16]
 810d8fa:	781b      	ldrb	r3, [r3, #0]
 810d8fc:	60fb      	str	r3, [r7, #12]
      tmp++;
 810d8fe:	693b      	ldr	r3, [r7, #16]
 810d900:	3301      	adds	r3, #1
 810d902:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 810d904:	693b      	ldr	r3, [r7, #16]
 810d906:	781b      	ldrb	r3, [r3, #0]
 810d908:	021a      	lsls	r2, r3, #8
 810d90a:	68fb      	ldr	r3, [r7, #12]
 810d90c:	4313      	orrs	r3, r2
 810d90e:	60fb      	str	r3, [r7, #12]
      tmp++;
 810d910:	693b      	ldr	r3, [r7, #16]
 810d912:	3301      	adds	r3, #1
 810d914:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 810d916:	693b      	ldr	r3, [r7, #16]
 810d918:	781b      	ldrb	r3, [r3, #0]
 810d91a:	041a      	lsls	r2, r3, #16
 810d91c:	68fb      	ldr	r3, [r7, #12]
 810d91e:	4313      	orrs	r3, r2
 810d920:	60fb      	str	r3, [r7, #12]
      tmp++;
 810d922:	693b      	ldr	r3, [r7, #16]
 810d924:	3301      	adds	r3, #1
 810d926:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 810d928:	693b      	ldr	r3, [r7, #16]
 810d92a:	781b      	ldrb	r3, [r3, #0]
 810d92c:	061a      	lsls	r2, r3, #24
 810d92e:	68fb      	ldr	r3, [r7, #12]
 810d930:	4313      	orrs	r3, r2
 810d932:	60fb      	str	r3, [r7, #12]
      tmp++;
 810d934:	693b      	ldr	r3, [r7, #16]
 810d936:	3301      	adds	r3, #1
 810d938:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 810d93a:	687b      	ldr	r3, [r7, #4]
 810d93c:	681b      	ldr	r3, [r3, #0]
 810d93e:	f107 020c 	add.w	r2, r7, #12
 810d942:	4611      	mov	r1, r2
 810d944:	4618      	mov	r0, r3
 810d946:	f003 fdf2 	bl	811152e <SDMMC_WriteFIFO>
    for (count = 0U; count < 8U; count++)
 810d94a:	697b      	ldr	r3, [r7, #20]
 810d94c:	3301      	adds	r3, #1
 810d94e:	617b      	str	r3, [r7, #20]
 810d950:	697b      	ldr	r3, [r7, #20]
 810d952:	2b07      	cmp	r3, #7
 810d954:	d9d0      	bls.n	810d8f8 <SD_Write_IT+0x1c>
    }

    hsd->pTxBuffPtr = tmp;
 810d956:	687b      	ldr	r3, [r7, #4]
 810d958:	693a      	ldr	r2, [r7, #16]
 810d95a:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize -= 32U;
 810d95c:	687b      	ldr	r3, [r7, #4]
 810d95e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810d960:	f1a3 0220 	sub.w	r2, r3, #32
 810d964:	687b      	ldr	r3, [r7, #4]
 810d966:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 810d968:	bf00      	nop
 810d96a:	3718      	adds	r7, #24
 810d96c:	46bd      	mov	sp, r7
 810d96e:	bd80      	pop	{r7, pc}

0810d970 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 810d970:	b480      	push	{r7}
 810d972:	b083      	sub	sp, #12
 810d974:	af00      	add	r7, sp, #0
 810d976:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 810d978:	bf00      	nop
 810d97a:	370c      	adds	r7, #12
 810d97c:	46bd      	mov	sp, r7
 810d97e:	f85d 7b04 	ldr.w	r7, [sp], #4
 810d982:	4770      	bx	lr

0810d984 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 810d984:	b480      	push	{r7}
 810d986:	b083      	sub	sp, #12
 810d988:	af00      	add	r7, sp, #0
 810d98a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 810d98c:	bf00      	nop
 810d98e:	370c      	adds	r7, #12
 810d990:	46bd      	mov	sp, r7
 810d992:	f85d 7b04 	ldr.w	r7, [sp], #4
 810d996:	4770      	bx	lr

0810d998 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 810d998:	b480      	push	{r7}
 810d99a:	b083      	sub	sp, #12
 810d99c:	af00      	add	r7, sp, #0
 810d99e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 810d9a0:	bf00      	nop
 810d9a2:	370c      	adds	r7, #12
 810d9a4:	46bd      	mov	sp, r7
 810d9a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 810d9aa:	4770      	bx	lr

0810d9ac <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 810d9ac:	b480      	push	{r7}
 810d9ae:	b083      	sub	sp, #12
 810d9b0:	af00      	add	r7, sp, #0
 810d9b2:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 810d9b4:	bf00      	nop
 810d9b6:	370c      	adds	r7, #12
 810d9b8:	46bd      	mov	sp, r7
 810d9ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 810d9be:	4770      	bx	lr

0810d9c0 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 810d9c0:	b580      	push	{r7, lr}
 810d9c2:	b084      	sub	sp, #16
 810d9c4:	af00      	add	r7, sp, #0
 810d9c6:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_length;
#else
  uint32_t crc_length = 0UL;
 810d9c8:	2300      	movs	r3, #0
 810d9ca:	60fb      	str	r3, [r7, #12]
#endif
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 810d9cc:	687b      	ldr	r3, [r7, #4]
 810d9ce:	2b00      	cmp	r3, #0
 810d9d0:	d101      	bne.n	810d9d6 <HAL_SPI_Init+0x16>
  {
    return HAL_ERROR;
 810d9d2:	2301      	movs	r3, #1
 810d9d4:	e0eb      	b.n	810dbae <HAL_SPI_Init+0x1ee>
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 810d9d6:	687b      	ldr	r3, [r7, #4]
 810d9d8:	2200      	movs	r2, #0
 810d9da:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 810d9dc:	687b      	ldr	r3, [r7, #4]
 810d9de:	681b      	ldr	r3, [r3, #0]
 810d9e0:	4a75      	ldr	r2, [pc, #468]	; (810dbb8 <HAL_SPI_Init+0x1f8>)
 810d9e2:	4293      	cmp	r3, r2
 810d9e4:	d00f      	beq.n	810da06 <HAL_SPI_Init+0x46>
 810d9e6:	687b      	ldr	r3, [r7, #4]
 810d9e8:	681b      	ldr	r3, [r3, #0]
 810d9ea:	4a74      	ldr	r2, [pc, #464]	; (810dbbc <HAL_SPI_Init+0x1fc>)
 810d9ec:	4293      	cmp	r3, r2
 810d9ee:	d00a      	beq.n	810da06 <HAL_SPI_Init+0x46>
 810d9f0:	687b      	ldr	r3, [r7, #4]
 810d9f2:	681b      	ldr	r3, [r3, #0]
 810d9f4:	4a72      	ldr	r2, [pc, #456]	; (810dbc0 <HAL_SPI_Init+0x200>)
 810d9f6:	4293      	cmp	r3, r2
 810d9f8:	d005      	beq.n	810da06 <HAL_SPI_Init+0x46>
 810d9fa:	687b      	ldr	r3, [r7, #4]
 810d9fc:	68db      	ldr	r3, [r3, #12]
 810d9fe:	2b0f      	cmp	r3, #15
 810da00:	d901      	bls.n	810da06 <HAL_SPI_Init+0x46>
  {
    return HAL_ERROR;
 810da02:	2301      	movs	r3, #1
 810da04:	e0d3      	b.n	810dbae <HAL_SPI_Init+0x1ee>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 810da06:	6878      	ldr	r0, [r7, #4]
 810da08:	f000 fdf9 	bl	810e5fe <SPI_GetPacketSize>
 810da0c:	60b8      	str	r0, [r7, #8]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 810da0e:	687b      	ldr	r3, [r7, #4]
 810da10:	681b      	ldr	r3, [r3, #0]
 810da12:	4a69      	ldr	r2, [pc, #420]	; (810dbb8 <HAL_SPI_Init+0x1f8>)
 810da14:	4293      	cmp	r3, r2
 810da16:	d00c      	beq.n	810da32 <HAL_SPI_Init+0x72>
 810da18:	687b      	ldr	r3, [r7, #4]
 810da1a:	681b      	ldr	r3, [r3, #0]
 810da1c:	4a67      	ldr	r2, [pc, #412]	; (810dbbc <HAL_SPI_Init+0x1fc>)
 810da1e:	4293      	cmp	r3, r2
 810da20:	d007      	beq.n	810da32 <HAL_SPI_Init+0x72>
 810da22:	687b      	ldr	r3, [r7, #4]
 810da24:	681b      	ldr	r3, [r3, #0]
 810da26:	4a66      	ldr	r2, [pc, #408]	; (810dbc0 <HAL_SPI_Init+0x200>)
 810da28:	4293      	cmp	r3, r2
 810da2a:	d002      	beq.n	810da32 <HAL_SPI_Init+0x72>
 810da2c:	68bb      	ldr	r3, [r7, #8]
 810da2e:	2b08      	cmp	r3, #8
 810da30:	d811      	bhi.n	810da56 <HAL_SPI_Init+0x96>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 810da32:	687b      	ldr	r3, [r7, #4]
 810da34:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 810da36:	4a60      	ldr	r2, [pc, #384]	; (810dbb8 <HAL_SPI_Init+0x1f8>)
 810da38:	4293      	cmp	r3, r2
 810da3a:	d009      	beq.n	810da50 <HAL_SPI_Init+0x90>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 810da3c:	687b      	ldr	r3, [r7, #4]
 810da3e:	681b      	ldr	r3, [r3, #0]
 810da40:	4a5e      	ldr	r2, [pc, #376]	; (810dbbc <HAL_SPI_Init+0x1fc>)
 810da42:	4293      	cmp	r3, r2
 810da44:	d004      	beq.n	810da50 <HAL_SPI_Init+0x90>
 810da46:	687b      	ldr	r3, [r7, #4]
 810da48:	681b      	ldr	r3, [r3, #0]
 810da4a:	4a5d      	ldr	r2, [pc, #372]	; (810dbc0 <HAL_SPI_Init+0x200>)
 810da4c:	4293      	cmp	r3, r2
 810da4e:	d104      	bne.n	810da5a <HAL_SPI_Init+0x9a>
 810da50:	68bb      	ldr	r3, [r7, #8]
 810da52:	2b10      	cmp	r3, #16
 810da54:	d901      	bls.n	810da5a <HAL_SPI_Init+0x9a>
  {
    return HAL_ERROR;
 810da56:	2301      	movs	r3, #1
 810da58:	e0a9      	b.n	810dbae <HAL_SPI_Init+0x1ee>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 810da5a:	687b      	ldr	r3, [r7, #4]
 810da5c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 810da60:	b2db      	uxtb	r3, r3
 810da62:	2b00      	cmp	r3, #0
 810da64:	d106      	bne.n	810da74 <HAL_SPI_Init+0xb4>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 810da66:	687b      	ldr	r3, [r7, #4]
 810da68:	2200      	movs	r2, #0
 810da6a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 810da6e:	6878      	ldr	r0, [r7, #4]
 810da70:	f7f4 f9dc 	bl	8101e2c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 810da74:	687b      	ldr	r3, [r7, #4]
 810da76:	2202      	movs	r2, #2
 810da78:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 810da7c:	687b      	ldr	r3, [r7, #4]
 810da7e:	681b      	ldr	r3, [r3, #0]
 810da80:	681a      	ldr	r2, [r3, #0]
 810da82:	687b      	ldr	r3, [r7, #4]
 810da84:	681b      	ldr	r3, [r3, #0]
 810da86:	f022 0201 	bic.w	r2, r2, #1
 810da8a:	601a      	str	r2, [r3, #0]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 810da8c:	687b      	ldr	r3, [r7, #4]
 810da8e:	699b      	ldr	r3, [r3, #24]
 810da90:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 810da94:	d119      	bne.n	810daca <HAL_SPI_Init+0x10a>
 810da96:	687b      	ldr	r3, [r7, #4]
 810da98:	685b      	ldr	r3, [r3, #4]
 810da9a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 810da9e:	d103      	bne.n	810daa8 <HAL_SPI_Init+0xe8>
 810daa0:	687b      	ldr	r3, [r7, #4]
 810daa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810daa4:	2b00      	cmp	r3, #0
 810daa6:	d008      	beq.n	810daba <HAL_SPI_Init+0xfa>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 810daa8:	687b      	ldr	r3, [r7, #4]
 810daaa:	685b      	ldr	r3, [r3, #4]
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 810daac:	2b00      	cmp	r3, #0
 810daae:	d10c      	bne.n	810daca <HAL_SPI_Init+0x10a>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 810dab0:	687b      	ldr	r3, [r7, #4]
 810dab2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810dab4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 810dab8:	d107      	bne.n	810daca <HAL_SPI_Init+0x10a>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 810daba:	687b      	ldr	r3, [r7, #4]
 810dabc:	681b      	ldr	r3, [r3, #0]
 810dabe:	681a      	ldr	r2, [r3, #0]
 810dac0:	687b      	ldr	r3, [r7, #4]
 810dac2:	681b      	ldr	r3, [r3, #0]
 810dac4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 810dac8:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 810daca:	687b      	ldr	r3, [r7, #4]
 810dacc:	69da      	ldr	r2, [r3, #28]
 810dace:	687b      	ldr	r3, [r7, #4]
 810dad0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810dad2:	431a      	orrs	r2, r3
 810dad4:	68fb      	ldr	r3, [r7, #12]
 810dad6:	431a      	orrs	r2, r3
 810dad8:	687b      	ldr	r3, [r7, #4]
 810dada:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810dadc:	ea42 0103 	orr.w	r1, r2, r3
 810dae0:	687b      	ldr	r3, [r7, #4]
 810dae2:	68da      	ldr	r2, [r3, #12]
 810dae4:	687b      	ldr	r3, [r7, #4]
 810dae6:	681b      	ldr	r3, [r3, #0]
 810dae8:	430a      	orrs	r2, r1
 810daea:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 810daec:	687b      	ldr	r3, [r7, #4]
 810daee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 810daf0:	687b      	ldr	r3, [r7, #4]
 810daf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810daf4:	431a      	orrs	r2, r3
 810daf6:	687b      	ldr	r3, [r7, #4]
 810daf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810dafa:	431a      	orrs	r2, r3
 810dafc:	687b      	ldr	r3, [r7, #4]
 810dafe:	699b      	ldr	r3, [r3, #24]
 810db00:	431a      	orrs	r2, r3
 810db02:	687b      	ldr	r3, [r7, #4]
 810db04:	691b      	ldr	r3, [r3, #16]
 810db06:	431a      	orrs	r2, r3
 810db08:	687b      	ldr	r3, [r7, #4]
 810db0a:	695b      	ldr	r3, [r3, #20]
 810db0c:	431a      	orrs	r2, r3
 810db0e:	687b      	ldr	r3, [r7, #4]
 810db10:	6a1b      	ldr	r3, [r3, #32]
 810db12:	431a      	orrs	r2, r3
 810db14:	687b      	ldr	r3, [r7, #4]
 810db16:	685b      	ldr	r3, [r3, #4]
 810db18:	431a      	orrs	r2, r3
 810db1a:	687b      	ldr	r3, [r7, #4]
 810db1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 810db1e:	431a      	orrs	r2, r3
 810db20:	687b      	ldr	r3, [r7, #4]
 810db22:	689b      	ldr	r3, [r3, #8]
 810db24:	431a      	orrs	r2, r3
 810db26:	687b      	ldr	r3, [r7, #4]
 810db28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 810db2a:	ea42 0103 	orr.w	r1, r2, r3
 810db2e:	687b      	ldr	r3, [r7, #4]
 810db30:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 810db32:	687b      	ldr	r3, [r7, #4]
 810db34:	681b      	ldr	r3, [r3, #0]
 810db36:	430a      	orrs	r2, r1
 810db38:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 810db3a:	687b      	ldr	r3, [r7, #4]
 810db3c:	685b      	ldr	r3, [r3, #4]
 810db3e:	2b00      	cmp	r3, #0
 810db40:	d113      	bne.n	810db6a <HAL_SPI_Init+0x1aa>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 810db42:	687b      	ldr	r3, [r7, #4]
 810db44:	681b      	ldr	r3, [r3, #0]
 810db46:	689b      	ldr	r3, [r3, #8]
 810db48:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 810db4c:	687b      	ldr	r3, [r7, #4]
 810db4e:	681b      	ldr	r3, [r3, #0]
 810db50:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 810db54:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 810db56:	687b      	ldr	r3, [r7, #4]
 810db58:	681b      	ldr	r3, [r3, #0]
 810db5a:	689b      	ldr	r3, [r3, #8]
 810db5c:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 810db60:	687b      	ldr	r3, [r7, #4]
 810db62:	681b      	ldr	r3, [r3, #0]
 810db64:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 810db68:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 810db6a:	687b      	ldr	r3, [r7, #4]
 810db6c:	681b      	ldr	r3, [r3, #0]
 810db6e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 810db70:	687b      	ldr	r3, [r7, #4]
 810db72:	681b      	ldr	r3, [r3, #0]
 810db74:	f022 0201 	bic.w	r2, r2, #1
 810db78:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 810db7a:	687b      	ldr	r3, [r7, #4]
 810db7c:	685b      	ldr	r3, [r3, #4]
 810db7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 810db82:	2b00      	cmp	r3, #0
 810db84:	d00a      	beq.n	810db9c <HAL_SPI_Init+0x1dc>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 810db86:	687b      	ldr	r3, [r7, #4]
 810db88:	681b      	ldr	r3, [r3, #0]
 810db8a:	68db      	ldr	r3, [r3, #12]
 810db8c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 810db90:	687b      	ldr	r3, [r7, #4]
 810db92:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 810db94:	687b      	ldr	r3, [r7, #4]
 810db96:	681b      	ldr	r3, [r3, #0]
 810db98:	430a      	orrs	r2, r1
 810db9a:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 810db9c:	687b      	ldr	r3, [r7, #4]
 810db9e:	2200      	movs	r2, #0
 810dba0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 810dba4:	687b      	ldr	r3, [r7, #4]
 810dba6:	2201      	movs	r2, #1
 810dba8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 810dbac:	2300      	movs	r3, #0
}
 810dbae:	4618      	mov	r0, r3
 810dbb0:	3710      	adds	r7, #16
 810dbb2:	46bd      	mov	sp, r7
 810dbb4:	bd80      	pop	{r7, pc}
 810dbb6:	bf00      	nop
 810dbb8:	40013000 	.word	0x40013000
 810dbbc:	40003800 	.word	0x40003800
 810dbc0:	40003c00 	.word	0x40003c00

0810dbc4 <HAL_SPI_TransmitReceive_DMA>:
  * @note   When the CRC feature is enabled the pRxData Length must be Size + 1
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 810dbc4:	b580      	push	{r7, lr}
 810dbc6:	b086      	sub	sp, #24
 810dbc8:	af00      	add	r7, sp, #0
 810dbca:	60f8      	str	r0, [r7, #12]
 810dbcc:	60b9      	str	r1, [r7, #8]
 810dbce:	607a      	str	r2, [r7, #4]
 810dbd0:	807b      	strh	r3, [r7, #2]
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 810dbd2:	2300      	movs	r3, #0
 810dbd4:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 810dbd6:	68fb      	ldr	r3, [r7, #12]
 810dbd8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 810dbdc:	2b01      	cmp	r3, #1
 810dbde:	d101      	bne.n	810dbe4 <HAL_SPI_TransmitReceive_DMA+0x20>
 810dbe0:	2302      	movs	r3, #2
 810dbe2:	e1ac      	b.n	810df3e <HAL_SPI_TransmitReceive_DMA+0x37a>
 810dbe4:	68fb      	ldr	r3, [r7, #12]
 810dbe6:	2201      	movs	r2, #1
 810dbe8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init temporary variables */
  tmp_state   = hspi->State;
 810dbec:	68fb      	ldr	r3, [r7, #12]
 810dbee:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 810dbf2:	75bb      	strb	r3, [r7, #22]
  tmp_mode    = hspi->Init.Mode;
 810dbf4:	68fb      	ldr	r3, [r7, #12]
 810dbf6:	685b      	ldr	r3, [r3, #4]
 810dbf8:	613b      	str	r3, [r7, #16]

  if (!(((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX)) || (tmp_state == HAL_SPI_STATE_READY)))
 810dbfa:	693b      	ldr	r3, [r7, #16]
 810dbfc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 810dc00:	d106      	bne.n	810dc10 <HAL_SPI_TransmitReceive_DMA+0x4c>
 810dc02:	68fb      	ldr	r3, [r7, #12]
 810dc04:	689b      	ldr	r3, [r3, #8]
 810dc06:	2b00      	cmp	r3, #0
 810dc08:	d102      	bne.n	810dc10 <HAL_SPI_TransmitReceive_DMA+0x4c>
 810dc0a:	7dbb      	ldrb	r3, [r7, #22]
 810dc0c:	2b04      	cmp	r3, #4
 810dc0e:	d00a      	beq.n	810dc26 <HAL_SPI_TransmitReceive_DMA+0x62>
 810dc10:	7dbb      	ldrb	r3, [r7, #22]
 810dc12:	2b01      	cmp	r3, #1
 810dc14:	d007      	beq.n	810dc26 <HAL_SPI_TransmitReceive_DMA+0x62>
  {
    errorcode = HAL_BUSY;
 810dc16:	2302      	movs	r3, #2
 810dc18:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 810dc1a:	68fb      	ldr	r3, [r7, #12]
 810dc1c:	2200      	movs	r2, #0
 810dc1e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 810dc22:	7dfb      	ldrb	r3, [r7, #23]
 810dc24:	e18b      	b.n	810df3e <HAL_SPI_TransmitReceive_DMA+0x37a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 810dc26:	68bb      	ldr	r3, [r7, #8]
 810dc28:	2b00      	cmp	r3, #0
 810dc2a:	d005      	beq.n	810dc38 <HAL_SPI_TransmitReceive_DMA+0x74>
 810dc2c:	687b      	ldr	r3, [r7, #4]
 810dc2e:	2b00      	cmp	r3, #0
 810dc30:	d002      	beq.n	810dc38 <HAL_SPI_TransmitReceive_DMA+0x74>
 810dc32:	887b      	ldrh	r3, [r7, #2]
 810dc34:	2b00      	cmp	r3, #0
 810dc36:	d107      	bne.n	810dc48 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    errorcode = HAL_ERROR;
 810dc38:	2301      	movs	r3, #1
 810dc3a:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 810dc3c:	68fb      	ldr	r3, [r7, #12]
 810dc3e:	2200      	movs	r2, #0
 810dc40:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 810dc44:	7dfb      	ldrb	r3, [r7, #23]
 810dc46:	e17a      	b.n	810df3e <HAL_SPI_TransmitReceive_DMA+0x37a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 810dc48:	68fb      	ldr	r3, [r7, #12]
 810dc4a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 810dc4e:	b2db      	uxtb	r3, r3
 810dc50:	2b04      	cmp	r3, #4
 810dc52:	d003      	beq.n	810dc5c <HAL_SPI_TransmitReceive_DMA+0x98>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 810dc54:	68fb      	ldr	r3, [r7, #12]
 810dc56:	2205      	movs	r2, #5
 810dc58:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 810dc5c:	68fb      	ldr	r3, [r7, #12]
 810dc5e:	2200      	movs	r2, #0
 810dc60:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 810dc64:	68fb      	ldr	r3, [r7, #12]
 810dc66:	68ba      	ldr	r2, [r7, #8]
 810dc68:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 810dc6a:	68fb      	ldr	r3, [r7, #12]
 810dc6c:	887a      	ldrh	r2, [r7, #2]
 810dc6e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 810dc72:	68fb      	ldr	r3, [r7, #12]
 810dc74:	887a      	ldrh	r2, [r7, #2]
 810dc76:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 810dc7a:	68fb      	ldr	r3, [r7, #12]
 810dc7c:	687a      	ldr	r2, [r7, #4]
 810dc7e:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 810dc80:	68fb      	ldr	r3, [r7, #12]
 810dc82:	887a      	ldrh	r2, [r7, #2]
 810dc84:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 810dc88:	68fb      	ldr	r3, [r7, #12]
 810dc8a:	887a      	ldrh	r2, [r7, #2]
 810dc8c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 810dc90:	68fb      	ldr	r3, [r7, #12]
 810dc92:	2200      	movs	r2, #0
 810dc94:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 810dc96:	68fb      	ldr	r3, [r7, #12]
 810dc98:	2200      	movs	r2, #0
 810dc9a:	675a      	str	r2, [r3, #116]	; 0x74

  /* Reset the Tx/Rx DMA bits */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 810dc9c:	68fb      	ldr	r3, [r7, #12]
 810dc9e:	681b      	ldr	r3, [r3, #0]
 810dca0:	689a      	ldr	r2, [r3, #8]
 810dca2:	68fb      	ldr	r3, [r7, #12]
 810dca4:	681b      	ldr	r3, [r3, #0]
 810dca6:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 810dcaa:	609a      	str	r2, [r3, #8]

  /* Packing mode management is enabled by the DMA settings */
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 810dcac:	68fb      	ldr	r3, [r7, #12]
 810dcae:	68db      	ldr	r3, [r3, #12]
 810dcb0:	2b0f      	cmp	r3, #15
 810dcb2:	d905      	bls.n	810dcc0 <HAL_SPI_TransmitReceive_DMA+0xfc>
 810dcb4:	68fb      	ldr	r3, [r7, #12]
 810dcb6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810dcb8:	699b      	ldr	r3, [r3, #24]
 810dcba:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 810dcbe:	d10f      	bne.n	810dce0 <HAL_SPI_TransmitReceive_DMA+0x11c>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 810dcc0:	68fb      	ldr	r3, [r7, #12]
 810dcc2:	68db      	ldr	r3, [r3, #12]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 810dcc4:	2b07      	cmp	r3, #7
 810dcc6:	d913      	bls.n	810dcf0 <HAL_SPI_TransmitReceive_DMA+0x12c>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 810dcc8:	68fb      	ldr	r3, [r7, #12]
 810dcca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810dccc:	699b      	ldr	r3, [r3, #24]
 810dcce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 810dcd2:	d00d      	beq.n	810dcf0 <HAL_SPI_TransmitReceive_DMA+0x12c>
                                                     (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))))
 810dcd4:	68fb      	ldr	r3, [r7, #12]
 810dcd6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810dcd8:	699b      	ldr	r3, [r3, #24]
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 810dcda:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 810dcde:	d007      	beq.n	810dcf0 <HAL_SPI_TransmitReceive_DMA+0x12c>
  {
    /* Restriction the DMA data received is not allowed in this mode */
    errorcode = HAL_ERROR;
 810dce0:	2301      	movs	r3, #1
 810dce2:	75fb      	strb	r3, [r7, #23]
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 810dce4:	68fb      	ldr	r3, [r7, #12]
 810dce6:	2200      	movs	r2, #0
 810dce8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 810dcec:	7dfb      	ldrb	r3, [r7, #23]
 810dcee:	e126      	b.n	810df3e <HAL_SPI_TransmitReceive_DMA+0x37a>
  }

  /* Adjust XferCount according to DMA alignment / Data size */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 810dcf0:	68fb      	ldr	r3, [r7, #12]
 810dcf2:	68db      	ldr	r3, [r3, #12]
 810dcf4:	2b07      	cmp	r3, #7
 810dcf6:	d840      	bhi.n	810dd7a <HAL_SPI_TransmitReceive_DMA+0x1b6>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 810dcf8:	68fb      	ldr	r3, [r7, #12]
 810dcfa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810dcfc:	699b      	ldr	r3, [r3, #24]
 810dcfe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 810dd02:	d109      	bne.n	810dd18 <HAL_SPI_TransmitReceive_DMA+0x154>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 810dd04:	68fb      	ldr	r3, [r7, #12]
 810dd06:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 810dd0a:	b29b      	uxth	r3, r3
 810dd0c:	3301      	adds	r3, #1
 810dd0e:	105b      	asrs	r3, r3, #1
 810dd10:	b29a      	uxth	r2, r3
 810dd12:	68fb      	ldr	r3, [r7, #12]
 810dd14:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    }
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 810dd18:	68fb      	ldr	r3, [r7, #12]
 810dd1a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810dd1c:	699b      	ldr	r3, [r3, #24]
 810dd1e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 810dd22:	d109      	bne.n	810dd38 <HAL_SPI_TransmitReceive_DMA+0x174>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 3UL) >> 2UL;
 810dd24:	68fb      	ldr	r3, [r7, #12]
 810dd26:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 810dd2a:	b29b      	uxth	r3, r3
 810dd2c:	3303      	adds	r3, #3
 810dd2e:	109b      	asrs	r3, r3, #2
 810dd30:	b29a      	uxth	r2, r3
 810dd32:	68fb      	ldr	r3, [r7, #12]
 810dd34:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    }
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 810dd38:	68fb      	ldr	r3, [r7, #12]
 810dd3a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810dd3c:	699b      	ldr	r3, [r3, #24]
 810dd3e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 810dd42:	d109      	bne.n	810dd58 <HAL_SPI_TransmitReceive_DMA+0x194>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 810dd44:	68fb      	ldr	r3, [r7, #12]
 810dd46:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 810dd4a:	b29b      	uxth	r3, r3
 810dd4c:	3301      	adds	r3, #1
 810dd4e:	105b      	asrs	r3, r3, #1
 810dd50:	b29a      	uxth	r2, r3
 810dd52:	68fb      	ldr	r3, [r7, #12]
 810dd54:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    }
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 810dd58:	68fb      	ldr	r3, [r7, #12]
 810dd5a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810dd5c:	699b      	ldr	r3, [r3, #24]
 810dd5e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 810dd62:	d12e      	bne.n	810ddc2 <HAL_SPI_TransmitReceive_DMA+0x1fe>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 3UL) >> 2UL;
 810dd64:	68fb      	ldr	r3, [r7, #12]
 810dd66:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 810dd6a:	b29b      	uxth	r3, r3
 810dd6c:	3303      	adds	r3, #3
 810dd6e:	109b      	asrs	r3, r3, #2
 810dd70:	b29a      	uxth	r2, r3
 810dd72:	68fb      	ldr	r3, [r7, #12]
 810dd74:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 810dd78:	e023      	b.n	810ddc2 <HAL_SPI_TransmitReceive_DMA+0x1fe>
    }
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 810dd7a:	68fb      	ldr	r3, [r7, #12]
 810dd7c:	68db      	ldr	r3, [r3, #12]
 810dd7e:	2b0f      	cmp	r3, #15
 810dd80:	d81f      	bhi.n	810ddc2 <HAL_SPI_TransmitReceive_DMA+0x1fe>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 810dd82:	68fb      	ldr	r3, [r7, #12]
 810dd84:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810dd86:	699b      	ldr	r3, [r3, #24]
 810dd88:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 810dd8c:	d109      	bne.n	810dda2 <HAL_SPI_TransmitReceive_DMA+0x1de>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 810dd8e:	68fb      	ldr	r3, [r7, #12]
 810dd90:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 810dd94:	b29b      	uxth	r3, r3
 810dd96:	3301      	adds	r3, #1
 810dd98:	105b      	asrs	r3, r3, #1
 810dd9a:	b29a      	uxth	r2, r3
 810dd9c:	68fb      	ldr	r3, [r7, #12]
 810dd9e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    }
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 810dda2:	68fb      	ldr	r3, [r7, #12]
 810dda4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810dda6:	699b      	ldr	r3, [r3, #24]
 810dda8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 810ddac:	d109      	bne.n	810ddc2 <HAL_SPI_TransmitReceive_DMA+0x1fe>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 810ddae:	68fb      	ldr	r3, [r7, #12]
 810ddb0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 810ddb4:	b29b      	uxth	r3, r3
 810ddb6:	3301      	adds	r3, #1
 810ddb8:	105b      	asrs	r3, r3, #1
 810ddba:	b29a      	uxth	r2, r3
 810ddbc:	68fb      	ldr	r3, [r7, #12]
 810ddbe:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  {
    /* Adjustment done */
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 810ddc2:	68fb      	ldr	r3, [r7, #12]
 810ddc4:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 810ddc8:	b2db      	uxtb	r3, r3
 810ddca:	2b04      	cmp	r3, #4
 810ddcc:	d108      	bne.n	810dde0 <HAL_SPI_TransmitReceive_DMA+0x21c>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 810ddce:	68fb      	ldr	r3, [r7, #12]
 810ddd0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810ddd2:	4a5d      	ldr	r2, [pc, #372]	; (810df48 <HAL_SPI_TransmitReceive_DMA+0x384>)
 810ddd4:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 810ddd6:	68fb      	ldr	r3, [r7, #12]
 810ddd8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810ddda:	4a5c      	ldr	r2, [pc, #368]	; (810df4c <HAL_SPI_TransmitReceive_DMA+0x388>)
 810dddc:	63da      	str	r2, [r3, #60]	; 0x3c
 810ddde:	e007      	b.n	810ddf0 <HAL_SPI_TransmitReceive_DMA+0x22c>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 810dde0:	68fb      	ldr	r3, [r7, #12]
 810dde2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810dde4:	4a5a      	ldr	r2, [pc, #360]	; (810df50 <HAL_SPI_TransmitReceive_DMA+0x38c>)
 810dde6:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 810dde8:	68fb      	ldr	r3, [r7, #12]
 810ddea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810ddec:	4a59      	ldr	r2, [pc, #356]	; (810df54 <HAL_SPI_TransmitReceive_DMA+0x390>)
 810ddee:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 810ddf0:	68fb      	ldr	r3, [r7, #12]
 810ddf2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810ddf4:	4a58      	ldr	r2, [pc, #352]	; (810df58 <HAL_SPI_TransmitReceive_DMA+0x394>)
 810ddf6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 810ddf8:	68fb      	ldr	r3, [r7, #12]
 810ddfa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810ddfc:	2200      	movs	r2, #0
 810ddfe:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr, hspi->RxXferCount))
 810de00:	68fb      	ldr	r3, [r7, #12]
 810de02:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 810de04:	68fb      	ldr	r3, [r7, #12]
 810de06:	681b      	ldr	r3, [r3, #0]
 810de08:	3330      	adds	r3, #48	; 0x30
 810de0a:	4619      	mov	r1, r3
 810de0c:	68fb      	ldr	r3, [r7, #12]
 810de0e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810de10:	461a      	mov	r2, r3
 810de12:	68fb      	ldr	r3, [r7, #12]
 810de14:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 810de18:	b29b      	uxth	r3, r3
 810de1a:	f7f6 fe19 	bl	8104a50 <HAL_DMA_Start_IT>
 810de1e:	4603      	mov	r3, r0
 810de20:	2b00      	cmp	r3, #0
 810de22:	d00f      	beq.n	810de44 <HAL_SPI_TransmitReceive_DMA+0x280>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 810de24:	68fb      	ldr	r3, [r7, #12]
 810de26:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810de2a:	f043 0210 	orr.w	r2, r3, #16
 810de2e:	68fb      	ldr	r3, [r7, #12]
 810de30:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    errorcode = HAL_ERROR;
 810de34:	2301      	movs	r3, #1
 810de36:	75fb      	strb	r3, [r7, #23]
    hspi->State = HAL_SPI_STATE_READY;
 810de38:	68fb      	ldr	r3, [r7, #12]
 810de3a:	2201      	movs	r2, #1
 810de3c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    return errorcode;
 810de40:	7dfb      	ldrb	r3, [r7, #23]
 810de42:	e07c      	b.n	810df3e <HAL_SPI_TransmitReceive_DMA+0x37a>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 810de44:	68fb      	ldr	r3, [r7, #12]
 810de46:	681b      	ldr	r3, [r3, #0]
 810de48:	689a      	ldr	r2, [r3, #8]
 810de4a:	68fb      	ldr	r3, [r7, #12]
 810de4c:	681b      	ldr	r3, [r3, #0]
 810de4e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 810de52:	609a      	str	r2, [r3, #8]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 810de54:	68fb      	ldr	r3, [r7, #12]
 810de56:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810de58:	2200      	movs	r2, #0
 810de5a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 810de5c:	68fb      	ldr	r3, [r7, #12]
 810de5e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810de60:	2200      	movs	r2, #0
 810de62:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 810de64:	68fb      	ldr	r3, [r7, #12]
 810de66:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810de68:	2200      	movs	r2, #0
 810de6a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 810de6c:	68fb      	ldr	r3, [r7, #12]
 810de6e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810de70:	2200      	movs	r2, #0
 810de72:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR, hspi->TxXferCount))
 810de74:	68fb      	ldr	r3, [r7, #12]
 810de76:	6f98      	ldr	r0, [r3, #120]	; 0x78
 810de78:	68fb      	ldr	r3, [r7, #12]
 810de7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 810de7c:	4619      	mov	r1, r3
 810de7e:	68fb      	ldr	r3, [r7, #12]
 810de80:	681b      	ldr	r3, [r3, #0]
 810de82:	3320      	adds	r3, #32
 810de84:	461a      	mov	r2, r3
 810de86:	68fb      	ldr	r3, [r7, #12]
 810de88:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 810de8c:	b29b      	uxth	r3, r3
 810de8e:	f7f6 fddf 	bl	8104a50 <HAL_DMA_Start_IT>
 810de92:	4603      	mov	r3, r0
 810de94:	2b00      	cmp	r3, #0
 810de96:	d00f      	beq.n	810deb8 <HAL_SPI_TransmitReceive_DMA+0x2f4>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 810de98:	68fb      	ldr	r3, [r7, #12]
 810de9a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810de9e:	f043 0210 	orr.w	r2, r3, #16
 810dea2:	68fb      	ldr	r3, [r7, #12]
 810dea4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    errorcode = HAL_ERROR;
 810dea8:	2301      	movs	r3, #1
 810deaa:	75fb      	strb	r3, [r7, #23]
    hspi->State = HAL_SPI_STATE_READY;
 810deac:	68fb      	ldr	r3, [r7, #12]
 810deae:	2201      	movs	r2, #1
 810deb0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    return errorcode;
 810deb4:	7dfb      	ldrb	r3, [r7, #23]
 810deb6:	e042      	b.n	810df3e <HAL_SPI_TransmitReceive_DMA+0x37a>
  }

  if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 810deb8:	68fb      	ldr	r3, [r7, #12]
 810deba:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810debc:	69db      	ldr	r3, [r3, #28]
 810debe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810dec2:	d108      	bne.n	810ded6 <HAL_SPI_TransmitReceive_DMA+0x312>
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 810dec4:	68fb      	ldr	r3, [r7, #12]
 810dec6:	681b      	ldr	r3, [r3, #0]
 810dec8:	685b      	ldr	r3, [r3, #4]
 810deca:	68fa      	ldr	r2, [r7, #12]
 810decc:	6812      	ldr	r2, [r2, #0]
 810dece:	0c1b      	lsrs	r3, r3, #16
 810ded0:	041b      	lsls	r3, r3, #16
 810ded2:	6053      	str	r3, [r2, #4]
 810ded4:	e009      	b.n	810deea <HAL_SPI_TransmitReceive_DMA+0x326>
  }
  else
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 810ded6:	68fb      	ldr	r3, [r7, #12]
 810ded8:	681b      	ldr	r3, [r3, #0]
 810deda:	685b      	ldr	r3, [r3, #4]
 810dedc:	0c1b      	lsrs	r3, r3, #16
 810dede:	041b      	lsls	r3, r3, #16
 810dee0:	8879      	ldrh	r1, [r7, #2]
 810dee2:	68fa      	ldr	r2, [r7, #12]
 810dee4:	6812      	ldr	r2, [r2, #0]
 810dee6:	430b      	orrs	r3, r1
 810dee8:	6053      	str	r3, [r2, #4]
  }

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 810deea:	68fb      	ldr	r3, [r7, #12]
 810deec:	681b      	ldr	r3, [r3, #0]
 810deee:	689a      	ldr	r2, [r3, #8]
 810def0:	68fb      	ldr	r3, [r7, #12]
 810def2:	681b      	ldr	r3, [r3, #0]
 810def4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 810def8:	609a      	str	r2, [r3, #8]

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_OVR | SPI_IT_UDR | SPI_IT_FRE | SPI_IT_MODF));
 810defa:	68fb      	ldr	r3, [r7, #12]
 810defc:	681b      	ldr	r3, [r3, #0]
 810defe:	691a      	ldr	r2, [r3, #16]
 810df00:	68fb      	ldr	r3, [r7, #12]
 810df02:	681b      	ldr	r3, [r3, #0]
 810df04:	f442 7258 	orr.w	r2, r2, #864	; 0x360
 810df08:	611a      	str	r2, [r3, #16]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 810df0a:	68fb      	ldr	r3, [r7, #12]
 810df0c:	681b      	ldr	r3, [r3, #0]
 810df0e:	681a      	ldr	r2, [r3, #0]
 810df10:	68fb      	ldr	r3, [r7, #12]
 810df12:	681b      	ldr	r3, [r3, #0]
 810df14:	f042 0201 	orr.w	r2, r2, #1
 810df18:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 810df1a:	68fb      	ldr	r3, [r7, #12]
 810df1c:	685b      	ldr	r3, [r3, #4]
 810df1e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 810df22:	d107      	bne.n	810df34 <HAL_SPI_TransmitReceive_DMA+0x370>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 810df24:	68fb      	ldr	r3, [r7, #12]
 810df26:	681b      	ldr	r3, [r3, #0]
 810df28:	681a      	ldr	r2, [r3, #0]
 810df2a:	68fb      	ldr	r3, [r7, #12]
 810df2c:	681b      	ldr	r3, [r3, #0]
 810df2e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 810df32:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 810df34:	68fb      	ldr	r3, [r7, #12]
 810df36:	2200      	movs	r2, #0
 810df38:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  return errorcode;
 810df3c:	7dfb      	ldrb	r3, [r7, #23]
}
 810df3e:	4618      	mov	r0, r3
 810df40:	3718      	adds	r7, #24
 810df42:	46bd      	mov	sp, r7
 810df44:	bd80      	pop	{r7, pc}
 810df46:	bf00      	nop
 810df48:	0810e40d 	.word	0x0810e40d
 810df4c:	0810e381 	.word	0x0810e381
 810df50:	0810e429 	.word	0x0810e429
 810df54:	0810e3c7 	.word	0x0810e3c7
 810df58:	0810e445 	.word	0x0810e445

0810df5c <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 810df5c:	b580      	push	{r7, lr}
 810df5e:	b08a      	sub	sp, #40	; 0x28
 810df60:	af00      	add	r7, sp, #0
 810df62:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 810df64:	687b      	ldr	r3, [r7, #4]
 810df66:	681b      	ldr	r3, [r3, #0]
 810df68:	691b      	ldr	r3, [r3, #16]
 810df6a:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 810df6c:	687b      	ldr	r3, [r7, #4]
 810df6e:	681b      	ldr	r3, [r3, #0]
 810df70:	695b      	ldr	r3, [r3, #20]
 810df72:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 810df74:	6a3a      	ldr	r2, [r7, #32]
 810df76:	69fb      	ldr	r3, [r7, #28]
 810df78:	4013      	ands	r3, r2
 810df7a:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 810df7c:	687b      	ldr	r3, [r7, #4]
 810df7e:	681b      	ldr	r3, [r3, #0]
 810df80:	689b      	ldr	r3, [r3, #8]
 810df82:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 810df84:	2300      	movs	r3, #0
 810df86:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 810df88:	687b      	ldr	r3, [r7, #4]
 810df8a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 810df8e:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 810df90:	687b      	ldr	r3, [r7, #4]
 810df92:	681b      	ldr	r3, [r3, #0]
 810df94:	3330      	adds	r3, #48	; 0x30
 810df96:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */


  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 810df98:	69bb      	ldr	r3, [r7, #24]
 810df9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 810df9e:	2b00      	cmp	r3, #0
 810dfa0:	d113      	bne.n	810dfca <HAL_SPI_IRQHandler+0x6e>
 810dfa2:	69bb      	ldr	r3, [r7, #24]
 810dfa4:	f003 0320 	and.w	r3, r3, #32
 810dfa8:	2b00      	cmp	r3, #0
 810dfaa:	d10e      	bne.n	810dfca <HAL_SPI_IRQHandler+0x6e>
 810dfac:	69bb      	ldr	r3, [r7, #24]
 810dfae:	f003 0304 	and.w	r3, r3, #4
 810dfb2:	2b00      	cmp	r3, #0
 810dfb4:	d009      	beq.n	810dfca <HAL_SPI_IRQHandler+0x6e>
  {
    hspi->TxISR(hspi);
 810dfb6:	687b      	ldr	r3, [r7, #4]
 810dfb8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 810dfba:	6878      	ldr	r0, [r7, #4]
 810dfbc:	4798      	blx	r3
    hspi->RxISR(hspi);
 810dfbe:	687b      	ldr	r3, [r7, #4]
 810dfc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 810dfc2:	6878      	ldr	r0, [r7, #4]
 810dfc4:	4798      	blx	r3
    handled = 1UL;
 810dfc6:	2301      	movs	r3, #1
 810dfc8:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 810dfca:	69bb      	ldr	r3, [r7, #24]
 810dfcc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 810dfd0:	2b00      	cmp	r3, #0
 810dfd2:	d10f      	bne.n	810dff4 <HAL_SPI_IRQHandler+0x98>
 810dfd4:	69bb      	ldr	r3, [r7, #24]
 810dfd6:	f003 0301 	and.w	r3, r3, #1
 810dfda:	2b00      	cmp	r3, #0
 810dfdc:	d00a      	beq.n	810dff4 <HAL_SPI_IRQHandler+0x98>
 810dfde:	69bb      	ldr	r3, [r7, #24]
 810dfe0:	f003 0304 	and.w	r3, r3, #4
 810dfe4:	2b00      	cmp	r3, #0
 810dfe6:	d105      	bne.n	810dff4 <HAL_SPI_IRQHandler+0x98>
  {
    hspi->RxISR(hspi);
 810dfe8:	687b      	ldr	r3, [r7, #4]
 810dfea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 810dfec:	6878      	ldr	r0, [r7, #4]
 810dfee:	4798      	blx	r3
    handled = 1UL;
 810dff0:	2301      	movs	r3, #1
 810dff2:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 810dff4:	69bb      	ldr	r3, [r7, #24]
 810dff6:	f003 0320 	and.w	r3, r3, #32
 810dffa:	2b00      	cmp	r3, #0
 810dffc:	d10f      	bne.n	810e01e <HAL_SPI_IRQHandler+0xc2>
 810dffe:	69bb      	ldr	r3, [r7, #24]
 810e000:	f003 0302 	and.w	r3, r3, #2
 810e004:	2b00      	cmp	r3, #0
 810e006:	d00a      	beq.n	810e01e <HAL_SPI_IRQHandler+0xc2>
 810e008:	69bb      	ldr	r3, [r7, #24]
 810e00a:	f003 0304 	and.w	r3, r3, #4
 810e00e:	2b00      	cmp	r3, #0
 810e010:	d105      	bne.n	810e01e <HAL_SPI_IRQHandler+0xc2>
  {
    hspi->TxISR(hspi);
 810e012:	687b      	ldr	r3, [r7, #4]
 810e014:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 810e016:	6878      	ldr	r0, [r7, #4]
 810e018:	4798      	blx	r3
    handled = 1UL;
 810e01a:	2301      	movs	r3, #1
 810e01c:	627b      	str	r3, [r7, #36]	; 0x24
    hspi->Reload.Requested = 0UL;
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_HSPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 810e01e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810e020:	2b00      	cmp	r3, #0
 810e022:	f040 8171 	bne.w	810e308 <HAL_SPI_IRQHandler+0x3ac>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 810e026:	69bb      	ldr	r3, [r7, #24]
 810e028:	f003 0308 	and.w	r3, r3, #8
 810e02c:	2b00      	cmp	r3, #0
 810e02e:	f000 80a0 	beq.w	810e172 <HAL_SPI_IRQHandler+0x216>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 810e032:	687b      	ldr	r3, [r7, #4]
 810e034:	681b      	ldr	r3, [r3, #0]
 810e036:	699a      	ldr	r2, [r3, #24]
 810e038:	687b      	ldr	r3, [r7, #4]
 810e03a:	681b      	ldr	r3, [r3, #0]
 810e03c:	f042 0208 	orr.w	r2, r2, #8
 810e040:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 810e042:	687b      	ldr	r3, [r7, #4]
 810e044:	681b      	ldr	r3, [r3, #0]
 810e046:	699a      	ldr	r2, [r3, #24]
 810e048:	687b      	ldr	r3, [r7, #4]
 810e04a:	681b      	ldr	r3, [r3, #0]
 810e04c:	f042 0210 	orr.w	r2, r2, #16
 810e050:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 810e052:	687b      	ldr	r3, [r7, #4]
 810e054:	681b      	ldr	r3, [r3, #0]
 810e056:	699a      	ldr	r2, [r3, #24]
 810e058:	687b      	ldr	r3, [r7, #4]
 810e05a:	681b      	ldr	r3, [r3, #0]
 810e05c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 810e060:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 810e062:	687b      	ldr	r3, [r7, #4]
 810e064:	681b      	ldr	r3, [r3, #0]
 810e066:	691a      	ldr	r2, [r3, #16]
 810e068:	687b      	ldr	r3, [r7, #4]
 810e06a:	681b      	ldr	r3, [r3, #0]
 810e06c:	f022 0208 	bic.w	r2, r2, #8
 810e070:	611a      	str	r2, [r3, #16]

    /* DMA Normal Mode */
    if (HAL_IS_BIT_CLR(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN) ||                    // IT based transfer is done
 810e072:	697b      	ldr	r3, [r7, #20]
 810e074:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 810e078:	2b00      	cmp	r3, #0
 810e07a:	d00f      	beq.n	810e09c <HAL_SPI_IRQHandler+0x140>
 810e07c:	7cfb      	ldrb	r3, [r7, #19]
 810e07e:	2b04      	cmp	r3, #4
 810e080:	d004      	beq.n	810e08c <HAL_SPI_IRQHandler+0x130>
      ((State != HAL_SPI_STATE_BUSY_RX) && (hspi->hdmatx->Init.Mode == DMA_NORMAL)) ||  // DMA is used in normal mode
 810e082:	687b      	ldr	r3, [r7, #4]
 810e084:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810e086:	69db      	ldr	r3, [r3, #28]
 810e088:	2b00      	cmp	r3, #0
 810e08a:	d007      	beq.n	810e09c <HAL_SPI_IRQHandler+0x140>
 810e08c:	7cfb      	ldrb	r3, [r7, #19]
 810e08e:	2b03      	cmp	r3, #3
 810e090:	d059      	beq.n	810e146 <HAL_SPI_IRQHandler+0x1ea>
      ((State != HAL_SPI_STATE_BUSY_TX) && (hspi->hdmarx->Init.Mode == DMA_NORMAL)))    // DMA is used in normal mode
 810e092:	687b      	ldr	r3, [r7, #4]
 810e094:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810e096:	69db      	ldr	r3, [r3, #28]
 810e098:	2b00      	cmp	r3, #0
 810e09a:	d154      	bne.n	810e146 <HAL_SPI_IRQHandler+0x1ea>
    {
      /* For the IT based receive extra polling maybe required for last packet */
      if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 810e09c:	687b      	ldr	r3, [r7, #4]
 810e09e:	681b      	ldr	r3, [r3, #0]
 810e0a0:	689b      	ldr	r3, [r3, #8]
 810e0a2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 810e0a6:	2b00      	cmp	r3, #0
 810e0a8:	d13d      	bne.n	810e126 <HAL_SPI_IRQHandler+0x1ca>
      {
        /* Pooling remaining data */
        while (hspi->RxXferCount != 0UL)
 810e0aa:	e036      	b.n	810e11a <HAL_SPI_IRQHandler+0x1be>
        {
          /* Receive data in 32 Bit mode */
          if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 810e0ac:	687b      	ldr	r3, [r7, #4]
 810e0ae:	68db      	ldr	r3, [r3, #12]
 810e0b0:	2b0f      	cmp	r3, #15
 810e0b2:	d90b      	bls.n	810e0cc <HAL_SPI_IRQHandler+0x170>
          {
            *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 810e0b4:	687b      	ldr	r3, [r7, #4]
 810e0b6:	681a      	ldr	r2, [r3, #0]
 810e0b8:	687b      	ldr	r3, [r7, #4]
 810e0ba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810e0bc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 810e0be:	601a      	str	r2, [r3, #0]
            hspi->pRxBuffPtr += sizeof(uint32_t);
 810e0c0:	687b      	ldr	r3, [r7, #4]
 810e0c2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810e0c4:	1d1a      	adds	r2, r3, #4
 810e0c6:	687b      	ldr	r3, [r7, #4]
 810e0c8:	665a      	str	r2, [r3, #100]	; 0x64
 810e0ca:	e01d      	b.n	810e108 <HAL_SPI_IRQHandler+0x1ac>
          }
          /* Receive data in 16 Bit mode */
          else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 810e0cc:	687b      	ldr	r3, [r7, #4]
 810e0ce:	68db      	ldr	r3, [r3, #12]
 810e0d0:	2b07      	cmp	r3, #7
 810e0d2:	d90b      	bls.n	810e0ec <HAL_SPI_IRQHandler+0x190>
          {
#if defined (__GNUC__)
            *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 810e0d4:	687b      	ldr	r3, [r7, #4]
 810e0d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810e0d8:	68fa      	ldr	r2, [r7, #12]
 810e0da:	8812      	ldrh	r2, [r2, #0]
 810e0dc:	b292      	uxth	r2, r2
 810e0de:	801a      	strh	r2, [r3, #0]
#else
            *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
            hspi->pRxBuffPtr += sizeof(uint16_t);
 810e0e0:	687b      	ldr	r3, [r7, #4]
 810e0e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810e0e4:	1c9a      	adds	r2, r3, #2
 810e0e6:	687b      	ldr	r3, [r7, #4]
 810e0e8:	665a      	str	r2, [r3, #100]	; 0x64
 810e0ea:	e00d      	b.n	810e108 <HAL_SPI_IRQHandler+0x1ac>
          }
          /* Receive data in 8 Bit mode */
          else
          {
            *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 810e0ec:	687b      	ldr	r3, [r7, #4]
 810e0ee:	681b      	ldr	r3, [r3, #0]
 810e0f0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 810e0f4:	687b      	ldr	r3, [r7, #4]
 810e0f6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810e0f8:	7812      	ldrb	r2, [r2, #0]
 810e0fa:	b2d2      	uxtb	r2, r2
 810e0fc:	701a      	strb	r2, [r3, #0]
            hspi->pRxBuffPtr += sizeof(uint8_t);
 810e0fe:	687b      	ldr	r3, [r7, #4]
 810e100:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810e102:	1c5a      	adds	r2, r3, #1
 810e104:	687b      	ldr	r3, [r7, #4]
 810e106:	665a      	str	r2, [r3, #100]	; 0x64
          }

          hspi->RxXferCount--;
 810e108:	687b      	ldr	r3, [r7, #4]
 810e10a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 810e10e:	b29b      	uxth	r3, r3
 810e110:	3b01      	subs	r3, #1
 810e112:	b29a      	uxth	r2, r3
 810e114:	687b      	ldr	r3, [r7, #4]
 810e116:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        while (hspi->RxXferCount != 0UL)
 810e11a:	687b      	ldr	r3, [r7, #4]
 810e11c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 810e120:	b29b      	uxth	r3, r3
 810e122:	2b00      	cmp	r3, #0
 810e124:	d1c2      	bne.n	810e0ac <HAL_SPI_IRQHandler+0x150>
        }
      }

      /* Call SPI Standard close procedure */
      SPI_CloseTransfer(hspi);
 810e126:	6878      	ldr	r0, [r7, #4]
 810e128:	f000 f9c9 	bl	810e4be <SPI_CloseTransfer>

      hspi->State = HAL_SPI_STATE_READY;
 810e12c:	687b      	ldr	r3, [r7, #4]
 810e12e:	2201      	movs	r2, #1
 810e130:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
      if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 810e134:	687b      	ldr	r3, [r7, #4]
 810e136:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810e13a:	2b00      	cmp	r3, #0
 810e13c:	d003      	beq.n	810e146 <HAL_SPI_IRQHandler+0x1ea>
      {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 810e13e:	6878      	ldr	r0, [r7, #4]
 810e140:	f000 f914 	bl	810e36c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
        return;
 810e144:	e0e5      	b.n	810e312 <HAL_SPI_IRQHandler+0x3b6>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 810e146:	7cfb      	ldrb	r3, [r7, #19]
 810e148:	2b05      	cmp	r3, #5
 810e14a:	d103      	bne.n	810e154 <HAL_SPI_IRQHandler+0x1f8>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 810e14c:	6878      	ldr	r0, [r7, #4]
 810e14e:	f7f3 f889 	bl	8101264 <HAL_SPI_TxRxCpltCallback>
	else
    {
      /* End of the appropriate call */
    }

    return;
 810e152:	e0db      	b.n	810e30c <HAL_SPI_IRQHandler+0x3b0>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 810e154:	7cfb      	ldrb	r3, [r7, #19]
 810e156:	2b04      	cmp	r3, #4
 810e158:	d103      	bne.n	810e162 <HAL_SPI_IRQHandler+0x206>
      HAL_SPI_RxCpltCallback(hspi);
 810e15a:	6878      	ldr	r0, [r7, #4]
 810e15c:	f000 f8e8 	bl	810e330 <HAL_SPI_RxCpltCallback>
    return;
 810e160:	e0d4      	b.n	810e30c <HAL_SPI_IRQHandler+0x3b0>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 810e162:	7cfb      	ldrb	r3, [r7, #19]
 810e164:	2b03      	cmp	r3, #3
 810e166:	f040 80d1 	bne.w	810e30c <HAL_SPI_IRQHandler+0x3b0>
      HAL_SPI_TxCpltCallback(hspi);
 810e16a:	6878      	ldr	r0, [r7, #4]
 810e16c:	f000 f8d6 	bl	810e31c <HAL_SPI_TxCpltCallback>
    return;
 810e170:	e0cc      	b.n	810e30c <HAL_SPI_IRQHandler+0x3b0>
  }

  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 810e172:	69fb      	ldr	r3, [r7, #28]
 810e174:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 810e178:	2b00      	cmp	r3, #0
 810e17a:	d00d      	beq.n	810e198 <HAL_SPI_IRQHandler+0x23c>
 810e17c:	6a3b      	ldr	r3, [r7, #32]
 810e17e:	f003 0308 	and.w	r3, r3, #8
 810e182:	2b00      	cmp	r3, #0
 810e184:	d008      	beq.n	810e198 <HAL_SPI_IRQHandler+0x23c>
  {
    /* Abort on going, clear SUSP flag to avoid infinite looping */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 810e186:	687b      	ldr	r3, [r7, #4]
 810e188:	681b      	ldr	r3, [r3, #0]
 810e18a:	699a      	ldr	r2, [r3, #24]
 810e18c:	687b      	ldr	r3, [r7, #4]
 810e18e:	681b      	ldr	r3, [r3, #0]
 810e190:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 810e194:	619a      	str	r2, [r3, #24]

    return;
 810e196:	e0bc      	b.n	810e312 <HAL_SPI_IRQHandler+0x3b6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 810e198:	69bb      	ldr	r3, [r7, #24]
 810e19a:	f403 7358 	and.w	r3, r3, #864	; 0x360
 810e19e:	2b00      	cmp	r3, #0
 810e1a0:	f000 80b7 	beq.w	810e312 <HAL_SPI_IRQHandler+0x3b6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 810e1a4:	69bb      	ldr	r3, [r7, #24]
 810e1a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 810e1aa:	2b00      	cmp	r3, #0
 810e1ac:	d00f      	beq.n	810e1ce <HAL_SPI_IRQHandler+0x272>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 810e1ae:	687b      	ldr	r3, [r7, #4]
 810e1b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810e1b4:	f043 0204 	orr.w	r2, r3, #4
 810e1b8:	687b      	ldr	r3, [r7, #4]
 810e1ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 810e1be:	687b      	ldr	r3, [r7, #4]
 810e1c0:	681b      	ldr	r3, [r3, #0]
 810e1c2:	699a      	ldr	r2, [r3, #24]
 810e1c4:	687b      	ldr	r3, [r7, #4]
 810e1c6:	681b      	ldr	r3, [r3, #0]
 810e1c8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 810e1cc:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 810e1ce:	69bb      	ldr	r3, [r7, #24]
 810e1d0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 810e1d4:	2b00      	cmp	r3, #0
 810e1d6:	d00f      	beq.n	810e1f8 <HAL_SPI_IRQHandler+0x29c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 810e1d8:	687b      	ldr	r3, [r7, #4]
 810e1da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810e1de:	f043 0201 	orr.w	r2, r3, #1
 810e1e2:	687b      	ldr	r3, [r7, #4]
 810e1e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 810e1e8:	687b      	ldr	r3, [r7, #4]
 810e1ea:	681b      	ldr	r3, [r3, #0]
 810e1ec:	699a      	ldr	r2, [r3, #24]
 810e1ee:	687b      	ldr	r3, [r7, #4]
 810e1f0:	681b      	ldr	r3, [r3, #0]
 810e1f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 810e1f6:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 810e1f8:	69bb      	ldr	r3, [r7, #24]
 810e1fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 810e1fe:	2b00      	cmp	r3, #0
 810e200:	d00f      	beq.n	810e222 <HAL_SPI_IRQHandler+0x2c6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 810e202:	687b      	ldr	r3, [r7, #4]
 810e204:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810e208:	f043 0208 	orr.w	r2, r3, #8
 810e20c:	687b      	ldr	r3, [r7, #4]
 810e20e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 810e212:	687b      	ldr	r3, [r7, #4]
 810e214:	681b      	ldr	r3, [r3, #0]
 810e216:	699a      	ldr	r2, [r3, #24]
 810e218:	687b      	ldr	r3, [r7, #4]
 810e21a:	681b      	ldr	r3, [r3, #0]
 810e21c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 810e220:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 810e222:	69bb      	ldr	r3, [r7, #24]
 810e224:	f003 0320 	and.w	r3, r3, #32
 810e228:	2b00      	cmp	r3, #0
 810e22a:	d00f      	beq.n	810e24c <HAL_SPI_IRQHandler+0x2f0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 810e22c:	687b      	ldr	r3, [r7, #4]
 810e22e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810e232:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 810e236:	687b      	ldr	r3, [r7, #4]
 810e238:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 810e23c:	687b      	ldr	r3, [r7, #4]
 810e23e:	681b      	ldr	r3, [r3, #0]
 810e240:	699a      	ldr	r2, [r3, #24]
 810e242:	687b      	ldr	r3, [r7, #4]
 810e244:	681b      	ldr	r3, [r3, #0]
 810e246:	f042 0220 	orr.w	r2, r2, #32
 810e24a:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 810e24c:	687b      	ldr	r3, [r7, #4]
 810e24e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810e252:	2b00      	cmp	r3, #0
 810e254:	d05c      	beq.n	810e310 <HAL_SPI_IRQHandler+0x3b4>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 810e256:	687b      	ldr	r3, [r7, #4]
 810e258:	681b      	ldr	r3, [r3, #0]
 810e25a:	681a      	ldr	r2, [r3, #0]
 810e25c:	687b      	ldr	r3, [r7, #4]
 810e25e:	681b      	ldr	r3, [r3, #0]
 810e260:	f022 0201 	bic.w	r2, r2, #1
 810e264:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR);
 810e266:	687b      	ldr	r3, [r7, #4]
 810e268:	681b      	ldr	r3, [r3, #0]
 810e26a:	691b      	ldr	r3, [r3, #16]
 810e26c:	687a      	ldr	r2, [r7, #4]
 810e26e:	6812      	ldr	r2, [r2, #0]
 810e270:	f423 735a 	bic.w	r3, r3, #872	; 0x368
 810e274:	f023 0303 	bic.w	r3, r3, #3
 810e278:	6113      	str	r3, [r2, #16]

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 810e27a:	697b      	ldr	r3, [r7, #20]
 810e27c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 810e280:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 810e284:	d138      	bne.n	810e2f8 <HAL_SPI_IRQHandler+0x39c>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 810e286:	687b      	ldr	r3, [r7, #4]
 810e288:	681b      	ldr	r3, [r3, #0]
 810e28a:	689a      	ldr	r2, [r3, #8]
 810e28c:	687b      	ldr	r3, [r7, #4]
 810e28e:	681b      	ldr	r3, [r3, #0]
 810e290:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 810e294:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 810e296:	687b      	ldr	r3, [r7, #4]
 810e298:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810e29a:	2b00      	cmp	r3, #0
 810e29c:	d013      	beq.n	810e2c6 <HAL_SPI_IRQHandler+0x36a>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 810e29e:	687b      	ldr	r3, [r7, #4]
 810e2a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810e2a2:	4a1d      	ldr	r2, [pc, #116]	; (810e318 <HAL_SPI_IRQHandler+0x3bc>)
 810e2a4:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 810e2a6:	687b      	ldr	r3, [r7, #4]
 810e2a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810e2aa:	4618      	mov	r0, r3
 810e2ac:	f7f7 f958 	bl	8105560 <HAL_DMA_Abort_IT>
 810e2b0:	4603      	mov	r3, r0
 810e2b2:	2b00      	cmp	r3, #0
 810e2b4:	d007      	beq.n	810e2c6 <HAL_SPI_IRQHandler+0x36a>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 810e2b6:	687b      	ldr	r3, [r7, #4]
 810e2b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810e2bc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 810e2c0:	687b      	ldr	r3, [r7, #4]
 810e2c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 810e2c6:	687b      	ldr	r3, [r7, #4]
 810e2c8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810e2ca:	2b00      	cmp	r3, #0
 810e2cc:	d020      	beq.n	810e310 <HAL_SPI_IRQHandler+0x3b4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 810e2ce:	687b      	ldr	r3, [r7, #4]
 810e2d0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810e2d2:	4a11      	ldr	r2, [pc, #68]	; (810e318 <HAL_SPI_IRQHandler+0x3bc>)
 810e2d4:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 810e2d6:	687b      	ldr	r3, [r7, #4]
 810e2d8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810e2da:	4618      	mov	r0, r3
 810e2dc:	f7f7 f940 	bl	8105560 <HAL_DMA_Abort_IT>
 810e2e0:	4603      	mov	r3, r0
 810e2e2:	2b00      	cmp	r3, #0
 810e2e4:	d014      	beq.n	810e310 <HAL_SPI_IRQHandler+0x3b4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 810e2e6:	687b      	ldr	r3, [r7, #4]
 810e2e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810e2ec:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 810e2f0:	687b      	ldr	r3, [r7, #4]
 810e2f2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 810e2f6:	e00b      	b.n	810e310 <HAL_SPI_IRQHandler+0x3b4>
        hspi->State = HAL_SPI_STATE_READY;
 810e2f8:	687b      	ldr	r3, [r7, #4]
 810e2fa:	2201      	movs	r2, #1
 810e2fc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        HAL_SPI_ErrorCallback(hspi);
 810e300:	6878      	ldr	r0, [r7, #4]
 810e302:	f000 f833 	bl	810e36c <HAL_SPI_ErrorCallback>
    return;
 810e306:	e003      	b.n	810e310 <HAL_SPI_IRQHandler+0x3b4>
    return;
 810e308:	bf00      	nop
 810e30a:	e002      	b.n	810e312 <HAL_SPI_IRQHandler+0x3b6>
    return;
 810e30c:	bf00      	nop
 810e30e:	e000      	b.n	810e312 <HAL_SPI_IRQHandler+0x3b6>
    return;
 810e310:	bf00      	nop
  }
}
 810e312:	3728      	adds	r7, #40	; 0x28
 810e314:	46bd      	mov	sp, r7
 810e316:	bd80      	pop	{r7, pc}
 810e318:	0810e48b 	.word	0x0810e48b

0810e31c <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 810e31c:	b480      	push	{r7}
 810e31e:	b083      	sub	sp, #12
 810e320:	af00      	add	r7, sp, #0
 810e322:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 810e324:	bf00      	nop
 810e326:	370c      	adds	r7, #12
 810e328:	46bd      	mov	sp, r7
 810e32a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810e32e:	4770      	bx	lr

0810e330 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 810e330:	b480      	push	{r7}
 810e332:	b083      	sub	sp, #12
 810e334:	af00      	add	r7, sp, #0
 810e336:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 810e338:	bf00      	nop
 810e33a:	370c      	adds	r7, #12
 810e33c:	46bd      	mov	sp, r7
 810e33e:	f85d 7b04 	ldr.w	r7, [sp], #4
 810e342:	4770      	bx	lr

0810e344 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 810e344:	b480      	push	{r7}
 810e346:	b083      	sub	sp, #12
 810e348:	af00      	add	r7, sp, #0
 810e34a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 810e34c:	bf00      	nop
 810e34e:	370c      	adds	r7, #12
 810e350:	46bd      	mov	sp, r7
 810e352:	f85d 7b04 	ldr.w	r7, [sp], #4
 810e356:	4770      	bx	lr

0810e358 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 810e358:	b480      	push	{r7}
 810e35a:	b083      	sub	sp, #12
 810e35c:	af00      	add	r7, sp, #0
 810e35e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 810e360:	bf00      	nop
 810e362:	370c      	adds	r7, #12
 810e364:	46bd      	mov	sp, r7
 810e366:	f85d 7b04 	ldr.w	r7, [sp], #4
 810e36a:	4770      	bx	lr

0810e36c <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 810e36c:	b480      	push	{r7}
 810e36e:	b083      	sub	sp, #12
 810e370:	af00      	add	r7, sp, #0
 810e372:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 810e374:	bf00      	nop
 810e376:	370c      	adds	r7, #12
 810e378:	46bd      	mov	sp, r7
 810e37a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810e37e:	4770      	bx	lr

0810e380 <SPI_DMAReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 810e380:	b580      	push	{r7, lr}
 810e382:	b084      	sub	sp, #16
 810e384:	af00      	add	r7, sp, #0
 810e386:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 810e388:	687b      	ldr	r3, [r7, #4]
 810e38a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810e38c:	60fb      	str	r3, [r7, #12]

  if (hspi->State != HAL_SPI_STATE_ABORT)
 810e38e:	68fb      	ldr	r3, [r7, #12]
 810e390:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 810e394:	b2db      	uxtb	r3, r3
 810e396:	2b07      	cmp	r3, #7
 810e398:	d011      	beq.n	810e3be <SPI_DMAReceiveCplt+0x3e>
  {
    if (hspi->hdmarx->Init.Mode == DMA_CIRCULAR)
 810e39a:	68fb      	ldr	r3, [r7, #12]
 810e39c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810e39e:	69db      	ldr	r3, [r3, #28]
 810e3a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810e3a4:	d103      	bne.n	810e3ae <SPI_DMAReceiveCplt+0x2e>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 810e3a6:	68f8      	ldr	r0, [r7, #12]
 810e3a8:	f7ff ffc2 	bl	810e330 <HAL_SPI_RxCpltCallback>
    {
      /* Enable EOT interrupt */
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
    }
  }
}
 810e3ac:	e007      	b.n	810e3be <SPI_DMAReceiveCplt+0x3e>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 810e3ae:	68fb      	ldr	r3, [r7, #12]
 810e3b0:	681b      	ldr	r3, [r3, #0]
 810e3b2:	691a      	ldr	r2, [r3, #16]
 810e3b4:	68fb      	ldr	r3, [r7, #12]
 810e3b6:	681b      	ldr	r3, [r3, #0]
 810e3b8:	f042 0208 	orr.w	r2, r2, #8
 810e3bc:	611a      	str	r2, [r3, #16]
}
 810e3be:	bf00      	nop
 810e3c0:	3710      	adds	r7, #16
 810e3c2:	46bd      	mov	sp, r7
 810e3c4:	bd80      	pop	{r7, pc}

0810e3c6 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 810e3c6:	b580      	push	{r7, lr}
 810e3c8:	b084      	sub	sp, #16
 810e3ca:	af00      	add	r7, sp, #0
 810e3cc:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 810e3ce:	687b      	ldr	r3, [r7, #4]
 810e3d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810e3d2:	60fb      	str	r3, [r7, #12]

  if (hspi->State != HAL_SPI_STATE_ABORT)
 810e3d4:	68fb      	ldr	r3, [r7, #12]
 810e3d6:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 810e3da:	b2db      	uxtb	r3, r3
 810e3dc:	2b07      	cmp	r3, #7
 810e3de:	d011      	beq.n	810e404 <SPI_DMATransmitReceiveCplt+0x3e>
  {
    if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 810e3e0:	68fb      	ldr	r3, [r7, #12]
 810e3e2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810e3e4:	69db      	ldr	r3, [r3, #28]
 810e3e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810e3ea:	d103      	bne.n	810e3f4 <SPI_DMATransmitReceiveCplt+0x2e>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->TxRxCpltCallback(hspi);
#else
      HAL_SPI_TxRxCpltCallback(hspi);
 810e3ec:	68f8      	ldr	r0, [r7, #12]
 810e3ee:	f7f2 ff39 	bl	8101264 <HAL_SPI_TxRxCpltCallback>
    {
      /* Enable EOT interrupt */
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
    }
  }
}
 810e3f2:	e007      	b.n	810e404 <SPI_DMATransmitReceiveCplt+0x3e>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 810e3f4:	68fb      	ldr	r3, [r7, #12]
 810e3f6:	681b      	ldr	r3, [r3, #0]
 810e3f8:	691a      	ldr	r2, [r3, #16]
 810e3fa:	68fb      	ldr	r3, [r7, #12]
 810e3fc:	681b      	ldr	r3, [r3, #0]
 810e3fe:	f042 0208 	orr.w	r2, r2, #8
 810e402:	611a      	str	r2, [r3, #16]
}
 810e404:	bf00      	nop
 810e406:	3710      	adds	r7, #16
 810e408:	46bd      	mov	sp, r7
 810e40a:	bd80      	pop	{r7, pc}

0810e40c <SPI_DMAHalfReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 810e40c:	b580      	push	{r7, lr}
 810e40e:	b084      	sub	sp, #16
 810e410:	af00      	add	r7, sp, #0
 810e412:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 810e414:	687b      	ldr	r3, [r7, #4]
 810e416:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810e418:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 810e41a:	68f8      	ldr	r0, [r7, #12]
 810e41c:	f7ff ff92 	bl	810e344 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 810e420:	bf00      	nop
 810e422:	3710      	adds	r7, #16
 810e424:	46bd      	mov	sp, r7
 810e426:	bd80      	pop	{r7, pc}

0810e428 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 810e428:	b580      	push	{r7, lr}
 810e42a:	b084      	sub	sp, #16
 810e42c:	af00      	add	r7, sp, #0
 810e42e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 810e430:	687b      	ldr	r3, [r7, #4]
 810e432:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810e434:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 810e436:	68f8      	ldr	r0, [r7, #12]
 810e438:	f7ff ff8e 	bl	810e358 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 810e43c:	bf00      	nop
 810e43e:	3710      	adds	r7, #16
 810e440:	46bd      	mov	sp, r7
 810e442:	bd80      	pop	{r7, pc}

0810e444 <SPI_DMAError>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 810e444:	b580      	push	{r7, lr}
 810e446:	b084      	sub	sp, #16
 810e448:	af00      	add	r7, sp, #0
 810e44a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 810e44c:	687b      	ldr	r3, [r7, #4]
 810e44e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810e450:	60fb      	str	r3, [r7, #12]

  /* if DMA error is FIFO error ignore it */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 810e452:	6878      	ldr	r0, [r7, #4]
 810e454:	f7f8 fa00 	bl	8106858 <HAL_DMA_GetError>
 810e458:	4603      	mov	r3, r0
 810e45a:	2b02      	cmp	r3, #2
 810e45c:	d011      	beq.n	810e482 <SPI_DMAError+0x3e>
  {
    /* Call SPI standard close procedure */
    SPI_CloseTransfer(hspi);
 810e45e:	68f8      	ldr	r0, [r7, #12]
 810e460:	f000 f82d 	bl	810e4be <SPI_CloseTransfer>

    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 810e464:	68fb      	ldr	r3, [r7, #12]
 810e466:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810e46a:	f043 0210 	orr.w	r2, r3, #16
 810e46e:	68fb      	ldr	r3, [r7, #12]
 810e470:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 810e474:	68fb      	ldr	r3, [r7, #12]
 810e476:	2201      	movs	r2, #1
 810e478:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 810e47c:	68f8      	ldr	r0, [r7, #12]
 810e47e:	f7ff ff75 	bl	810e36c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 810e482:	bf00      	nop
 810e484:	3710      	adds	r7, #16
 810e486:	46bd      	mov	sp, r7
 810e488:	bd80      	pop	{r7, pc}

0810e48a <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 810e48a:	b580      	push	{r7, lr}
 810e48c:	b084      	sub	sp, #16
 810e48e:	af00      	add	r7, sp, #0
 810e490:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 810e492:	687b      	ldr	r3, [r7, #4]
 810e494:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810e496:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 810e498:	68fb      	ldr	r3, [r7, #12]
 810e49a:	2200      	movs	r2, #0
 810e49c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 810e4a0:	68fb      	ldr	r3, [r7, #12]
 810e4a2:	2200      	movs	r2, #0
 810e4a4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 810e4a8:	68fb      	ldr	r3, [r7, #12]
 810e4aa:	2201      	movs	r2, #1
 810e4ac:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 810e4b0:	68f8      	ldr	r0, [r7, #12]
 810e4b2:	f7ff ff5b 	bl	810e36c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 810e4b6:	bf00      	nop
 810e4b8:	3710      	adds	r7, #16
 810e4ba:	46bd      	mov	sp, r7
 810e4bc:	bd80      	pop	{r7, pc}

0810e4be <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
*         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 810e4be:	b480      	push	{r7}
 810e4c0:	b085      	sub	sp, #20
 810e4c2:	af00      	add	r7, sp, #0
 810e4c4:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 810e4c6:	687b      	ldr	r3, [r7, #4]
 810e4c8:	681b      	ldr	r3, [r3, #0]
 810e4ca:	695b      	ldr	r3, [r3, #20]
 810e4cc:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 810e4ce:	687b      	ldr	r3, [r7, #4]
 810e4d0:	681b      	ldr	r3, [r3, #0]
 810e4d2:	699a      	ldr	r2, [r3, #24]
 810e4d4:	687b      	ldr	r3, [r7, #4]
 810e4d6:	681b      	ldr	r3, [r3, #0]
 810e4d8:	f042 0208 	orr.w	r2, r2, #8
 810e4dc:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 810e4de:	687b      	ldr	r3, [r7, #4]
 810e4e0:	681b      	ldr	r3, [r3, #0]
 810e4e2:	699a      	ldr	r2, [r3, #24]
 810e4e4:	687b      	ldr	r3, [r7, #4]
 810e4e6:	681b      	ldr	r3, [r3, #0]
 810e4e8:	f042 0210 	orr.w	r2, r2, #16
 810e4ec:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 810e4ee:	687b      	ldr	r3, [r7, #4]
 810e4f0:	681b      	ldr	r3, [r3, #0]
 810e4f2:	681a      	ldr	r2, [r3, #0]
 810e4f4:	687b      	ldr	r3, [r7, #4]
 810e4f6:	681b      	ldr	r3, [r3, #0]
 810e4f8:	f022 0201 	bic.w	r2, r2, #1
 810e4fc:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 810e4fe:	687b      	ldr	r3, [r7, #4]
 810e500:	681b      	ldr	r3, [r3, #0]
 810e502:	691b      	ldr	r3, [r3, #16]
 810e504:	687a      	ldr	r2, [r7, #4]
 810e506:	6812      	ldr	r2, [r2, #0]
 810e508:	f423 735b 	bic.w	r3, r3, #876	; 0x36c
 810e50c:	f023 0303 	bic.w	r3, r3, #3
 810e510:	6113      	str	r3, [r2, #16]

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 810e512:	687b      	ldr	r3, [r7, #4]
 810e514:	681b      	ldr	r3, [r3, #0]
 810e516:	689a      	ldr	r2, [r3, #8]
 810e518:	687b      	ldr	r3, [r7, #4]
 810e51a:	681b      	ldr	r3, [r3, #0]
 810e51c:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 810e520:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 810e522:	687b      	ldr	r3, [r7, #4]
 810e524:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 810e528:	b2db      	uxtb	r3, r3
 810e52a:	2b04      	cmp	r3, #4
 810e52c:	d014      	beq.n	810e558 <SPI_CloseTransfer+0x9a>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 810e52e:	68fb      	ldr	r3, [r7, #12]
 810e530:	f003 0320 	and.w	r3, r3, #32
 810e534:	2b00      	cmp	r3, #0
 810e536:	d00f      	beq.n	810e558 <SPI_CloseTransfer+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 810e538:	687b      	ldr	r3, [r7, #4]
 810e53a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810e53e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 810e542:	687b      	ldr	r3, [r7, #4]
 810e544:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 810e548:	687b      	ldr	r3, [r7, #4]
 810e54a:	681b      	ldr	r3, [r3, #0]
 810e54c:	699a      	ldr	r2, [r3, #24]
 810e54e:	687b      	ldr	r3, [r7, #4]
 810e550:	681b      	ldr	r3, [r3, #0]
 810e552:	f042 0220 	orr.w	r2, r2, #32
 810e556:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 810e558:	687b      	ldr	r3, [r7, #4]
 810e55a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 810e55e:	b2db      	uxtb	r3, r3
 810e560:	2b03      	cmp	r3, #3
 810e562:	d014      	beq.n	810e58e <SPI_CloseTransfer+0xd0>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 810e564:	68fb      	ldr	r3, [r7, #12]
 810e566:	f003 0340 	and.w	r3, r3, #64	; 0x40
 810e56a:	2b00      	cmp	r3, #0
 810e56c:	d00f      	beq.n	810e58e <SPI_CloseTransfer+0xd0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 810e56e:	687b      	ldr	r3, [r7, #4]
 810e570:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810e574:	f043 0204 	orr.w	r2, r3, #4
 810e578:	687b      	ldr	r3, [r7, #4]
 810e57a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 810e57e:	687b      	ldr	r3, [r7, #4]
 810e580:	681b      	ldr	r3, [r3, #0]
 810e582:	699a      	ldr	r2, [r3, #24]
 810e584:	687b      	ldr	r3, [r7, #4]
 810e586:	681b      	ldr	r3, [r3, #0]
 810e588:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 810e58c:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 810e58e:	68fb      	ldr	r3, [r7, #12]
 810e590:	f403 7300 	and.w	r3, r3, #512	; 0x200
 810e594:	2b00      	cmp	r3, #0
 810e596:	d00f      	beq.n	810e5b8 <SPI_CloseTransfer+0xfa>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 810e598:	687b      	ldr	r3, [r7, #4]
 810e59a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810e59e:	f043 0201 	orr.w	r2, r3, #1
 810e5a2:	687b      	ldr	r3, [r7, #4]
 810e5a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 810e5a8:	687b      	ldr	r3, [r7, #4]
 810e5aa:	681b      	ldr	r3, [r3, #0]
 810e5ac:	699a      	ldr	r2, [r3, #24]
 810e5ae:	687b      	ldr	r3, [r7, #4]
 810e5b0:	681b      	ldr	r3, [r3, #0]
 810e5b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 810e5b6:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 810e5b8:	68fb      	ldr	r3, [r7, #12]
 810e5ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 810e5be:	2b00      	cmp	r3, #0
 810e5c0:	d00f      	beq.n	810e5e2 <SPI_CloseTransfer+0x124>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 810e5c2:	687b      	ldr	r3, [r7, #4]
 810e5c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810e5c8:	f043 0208 	orr.w	r2, r3, #8
 810e5cc:	687b      	ldr	r3, [r7, #4]
 810e5ce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 810e5d2:	687b      	ldr	r3, [r7, #4]
 810e5d4:	681b      	ldr	r3, [r3, #0]
 810e5d6:	699a      	ldr	r2, [r3, #24]
 810e5d8:	687b      	ldr	r3, [r7, #4]
 810e5da:	681b      	ldr	r3, [r3, #0]
 810e5dc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 810e5e0:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 810e5e2:	687b      	ldr	r3, [r7, #4]
 810e5e4:	2200      	movs	r2, #0
 810e5e6:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 810e5ea:	687b      	ldr	r3, [r7, #4]
 810e5ec:	2200      	movs	r2, #0
 810e5ee:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 810e5f2:	bf00      	nop
 810e5f4:	3714      	adds	r7, #20
 810e5f6:	46bd      	mov	sp, r7
 810e5f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 810e5fc:	4770      	bx	lr

0810e5fe <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 810e5fe:	b480      	push	{r7}
 810e600:	b085      	sub	sp, #20
 810e602:	af00      	add	r7, sp, #0
 810e604:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 810e606:	687b      	ldr	r3, [r7, #4]
 810e608:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810e60a:	095b      	lsrs	r3, r3, #5
 810e60c:	3301      	adds	r3, #1
 810e60e:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 810e610:	687b      	ldr	r3, [r7, #4]
 810e612:	68db      	ldr	r3, [r3, #12]
 810e614:	3301      	adds	r3, #1
 810e616:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 810e618:	68bb      	ldr	r3, [r7, #8]
 810e61a:	3307      	adds	r3, #7
 810e61c:	08db      	lsrs	r3, r3, #3
 810e61e:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 810e620:	68bb      	ldr	r3, [r7, #8]
 810e622:	68fa      	ldr	r2, [r7, #12]
 810e624:	fb02 f303 	mul.w	r3, r2, r3
}
 810e628:	4618      	mov	r0, r3
 810e62a:	3714      	adds	r7, #20
 810e62c:	46bd      	mov	sp, r7
 810e62e:	f85d 7b04 	ldr.w	r7, [sp], #4
 810e632:	4770      	bx	lr

0810e634 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 810e634:	b580      	push	{r7, lr}
 810e636:	b082      	sub	sp, #8
 810e638:	af00      	add	r7, sp, #0
 810e63a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 810e63c:	687b      	ldr	r3, [r7, #4]
 810e63e:	2b00      	cmp	r3, #0
 810e640:	d101      	bne.n	810e646 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 810e642:	2301      	movs	r3, #1
 810e644:	e049      	b.n	810e6da <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 810e646:	687b      	ldr	r3, [r7, #4]
 810e648:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 810e64c:	b2db      	uxtb	r3, r3
 810e64e:	2b00      	cmp	r3, #0
 810e650:	d106      	bne.n	810e660 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 810e652:	687b      	ldr	r3, [r7, #4]
 810e654:	2200      	movs	r2, #0
 810e656:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 810e65a:	6878      	ldr	r0, [r7, #4]
 810e65c:	f7f3 ffac 	bl	81025b8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 810e660:	687b      	ldr	r3, [r7, #4]
 810e662:	2202      	movs	r2, #2
 810e664:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 810e668:	687b      	ldr	r3, [r7, #4]
 810e66a:	681a      	ldr	r2, [r3, #0]
 810e66c:	687b      	ldr	r3, [r7, #4]
 810e66e:	3304      	adds	r3, #4
 810e670:	4619      	mov	r1, r3
 810e672:	4610      	mov	r0, r2
 810e674:	f000 fc52 	bl	810ef1c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 810e678:	687b      	ldr	r3, [r7, #4]
 810e67a:	2201      	movs	r2, #1
 810e67c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 810e680:	687b      	ldr	r3, [r7, #4]
 810e682:	2201      	movs	r2, #1
 810e684:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 810e688:	687b      	ldr	r3, [r7, #4]
 810e68a:	2201      	movs	r2, #1
 810e68c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 810e690:	687b      	ldr	r3, [r7, #4]
 810e692:	2201      	movs	r2, #1
 810e694:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 810e698:	687b      	ldr	r3, [r7, #4]
 810e69a:	2201      	movs	r2, #1
 810e69c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 810e6a0:	687b      	ldr	r3, [r7, #4]
 810e6a2:	2201      	movs	r2, #1
 810e6a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 810e6a8:	687b      	ldr	r3, [r7, #4]
 810e6aa:	2201      	movs	r2, #1
 810e6ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 810e6b0:	687b      	ldr	r3, [r7, #4]
 810e6b2:	2201      	movs	r2, #1
 810e6b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 810e6b8:	687b      	ldr	r3, [r7, #4]
 810e6ba:	2201      	movs	r2, #1
 810e6bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 810e6c0:	687b      	ldr	r3, [r7, #4]
 810e6c2:	2201      	movs	r2, #1
 810e6c4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 810e6c8:	687b      	ldr	r3, [r7, #4]
 810e6ca:	2201      	movs	r2, #1
 810e6cc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 810e6d0:	687b      	ldr	r3, [r7, #4]
 810e6d2:	2201      	movs	r2, #1
 810e6d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 810e6d8:	2300      	movs	r3, #0
}
 810e6da:	4618      	mov	r0, r3
 810e6dc:	3708      	adds	r7, #8
 810e6de:	46bd      	mov	sp, r7
 810e6e0:	bd80      	pop	{r7, pc}
	...

0810e6e4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 810e6e4:	b480      	push	{r7}
 810e6e6:	b085      	sub	sp, #20
 810e6e8:	af00      	add	r7, sp, #0
 810e6ea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 810e6ec:	687b      	ldr	r3, [r7, #4]
 810e6ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 810e6f2:	b2db      	uxtb	r3, r3
 810e6f4:	2b01      	cmp	r3, #1
 810e6f6:	d001      	beq.n	810e6fc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 810e6f8:	2301      	movs	r3, #1
 810e6fa:	e04f      	b.n	810e79c <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 810e6fc:	687b      	ldr	r3, [r7, #4]
 810e6fe:	2202      	movs	r2, #2
 810e700:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 810e704:	687b      	ldr	r3, [r7, #4]
 810e706:	681b      	ldr	r3, [r3, #0]
 810e708:	68da      	ldr	r2, [r3, #12]
 810e70a:	687b      	ldr	r3, [r7, #4]
 810e70c:	681b      	ldr	r3, [r3, #0]
 810e70e:	f042 0201 	orr.w	r2, r2, #1
 810e712:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 810e714:	687b      	ldr	r3, [r7, #4]
 810e716:	681b      	ldr	r3, [r3, #0]
 810e718:	4a23      	ldr	r2, [pc, #140]	; (810e7a8 <HAL_TIM_Base_Start_IT+0xc4>)
 810e71a:	4293      	cmp	r3, r2
 810e71c:	d01d      	beq.n	810e75a <HAL_TIM_Base_Start_IT+0x76>
 810e71e:	687b      	ldr	r3, [r7, #4]
 810e720:	681b      	ldr	r3, [r3, #0]
 810e722:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 810e726:	d018      	beq.n	810e75a <HAL_TIM_Base_Start_IT+0x76>
 810e728:	687b      	ldr	r3, [r7, #4]
 810e72a:	681b      	ldr	r3, [r3, #0]
 810e72c:	4a1f      	ldr	r2, [pc, #124]	; (810e7ac <HAL_TIM_Base_Start_IT+0xc8>)
 810e72e:	4293      	cmp	r3, r2
 810e730:	d013      	beq.n	810e75a <HAL_TIM_Base_Start_IT+0x76>
 810e732:	687b      	ldr	r3, [r7, #4]
 810e734:	681b      	ldr	r3, [r3, #0]
 810e736:	4a1e      	ldr	r2, [pc, #120]	; (810e7b0 <HAL_TIM_Base_Start_IT+0xcc>)
 810e738:	4293      	cmp	r3, r2
 810e73a:	d00e      	beq.n	810e75a <HAL_TIM_Base_Start_IT+0x76>
 810e73c:	687b      	ldr	r3, [r7, #4]
 810e73e:	681b      	ldr	r3, [r3, #0]
 810e740:	4a1c      	ldr	r2, [pc, #112]	; (810e7b4 <HAL_TIM_Base_Start_IT+0xd0>)
 810e742:	4293      	cmp	r3, r2
 810e744:	d009      	beq.n	810e75a <HAL_TIM_Base_Start_IT+0x76>
 810e746:	687b      	ldr	r3, [r7, #4]
 810e748:	681b      	ldr	r3, [r3, #0]
 810e74a:	4a1b      	ldr	r2, [pc, #108]	; (810e7b8 <HAL_TIM_Base_Start_IT+0xd4>)
 810e74c:	4293      	cmp	r3, r2
 810e74e:	d004      	beq.n	810e75a <HAL_TIM_Base_Start_IT+0x76>
 810e750:	687b      	ldr	r3, [r7, #4]
 810e752:	681b      	ldr	r3, [r3, #0]
 810e754:	4a19      	ldr	r2, [pc, #100]	; (810e7bc <HAL_TIM_Base_Start_IT+0xd8>)
 810e756:	4293      	cmp	r3, r2
 810e758:	d115      	bne.n	810e786 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 810e75a:	687b      	ldr	r3, [r7, #4]
 810e75c:	681b      	ldr	r3, [r3, #0]
 810e75e:	689a      	ldr	r2, [r3, #8]
 810e760:	4b17      	ldr	r3, [pc, #92]	; (810e7c0 <HAL_TIM_Base_Start_IT+0xdc>)
 810e762:	4013      	ands	r3, r2
 810e764:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 810e766:	68fb      	ldr	r3, [r7, #12]
 810e768:	2b06      	cmp	r3, #6
 810e76a:	d015      	beq.n	810e798 <HAL_TIM_Base_Start_IT+0xb4>
 810e76c:	68fb      	ldr	r3, [r7, #12]
 810e76e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 810e772:	d011      	beq.n	810e798 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 810e774:	687b      	ldr	r3, [r7, #4]
 810e776:	681b      	ldr	r3, [r3, #0]
 810e778:	681a      	ldr	r2, [r3, #0]
 810e77a:	687b      	ldr	r3, [r7, #4]
 810e77c:	681b      	ldr	r3, [r3, #0]
 810e77e:	f042 0201 	orr.w	r2, r2, #1
 810e782:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 810e784:	e008      	b.n	810e798 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 810e786:	687b      	ldr	r3, [r7, #4]
 810e788:	681b      	ldr	r3, [r3, #0]
 810e78a:	681a      	ldr	r2, [r3, #0]
 810e78c:	687b      	ldr	r3, [r7, #4]
 810e78e:	681b      	ldr	r3, [r3, #0]
 810e790:	f042 0201 	orr.w	r2, r2, #1
 810e794:	601a      	str	r2, [r3, #0]
 810e796:	e000      	b.n	810e79a <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 810e798:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 810e79a:	2300      	movs	r3, #0
}
 810e79c:	4618      	mov	r0, r3
 810e79e:	3714      	adds	r7, #20
 810e7a0:	46bd      	mov	sp, r7
 810e7a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 810e7a6:	4770      	bx	lr
 810e7a8:	40010000 	.word	0x40010000
 810e7ac:	40000400 	.word	0x40000400
 810e7b0:	40000800 	.word	0x40000800
 810e7b4:	40000c00 	.word	0x40000c00
 810e7b8:	40010400 	.word	0x40010400
 810e7bc:	40001800 	.word	0x40001800
 810e7c0:	00010007 	.word	0x00010007

0810e7c4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 810e7c4:	b580      	push	{r7, lr}
 810e7c6:	b082      	sub	sp, #8
 810e7c8:	af00      	add	r7, sp, #0
 810e7ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 810e7cc:	687b      	ldr	r3, [r7, #4]
 810e7ce:	2b00      	cmp	r3, #0
 810e7d0:	d101      	bne.n	810e7d6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 810e7d2:	2301      	movs	r3, #1
 810e7d4:	e049      	b.n	810e86a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 810e7d6:	687b      	ldr	r3, [r7, #4]
 810e7d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 810e7dc:	b2db      	uxtb	r3, r3
 810e7de:	2b00      	cmp	r3, #0
 810e7e0:	d106      	bne.n	810e7f0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 810e7e2:	687b      	ldr	r3, [r7, #4]
 810e7e4:	2200      	movs	r2, #0
 810e7e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 810e7ea:	6878      	ldr	r0, [r7, #4]
 810e7ec:	f000 f841 	bl	810e872 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 810e7f0:	687b      	ldr	r3, [r7, #4]
 810e7f2:	2202      	movs	r2, #2
 810e7f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 810e7f8:	687b      	ldr	r3, [r7, #4]
 810e7fa:	681a      	ldr	r2, [r3, #0]
 810e7fc:	687b      	ldr	r3, [r7, #4]
 810e7fe:	3304      	adds	r3, #4
 810e800:	4619      	mov	r1, r3
 810e802:	4610      	mov	r0, r2
 810e804:	f000 fb8a 	bl	810ef1c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 810e808:	687b      	ldr	r3, [r7, #4]
 810e80a:	2201      	movs	r2, #1
 810e80c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 810e810:	687b      	ldr	r3, [r7, #4]
 810e812:	2201      	movs	r2, #1
 810e814:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 810e818:	687b      	ldr	r3, [r7, #4]
 810e81a:	2201      	movs	r2, #1
 810e81c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 810e820:	687b      	ldr	r3, [r7, #4]
 810e822:	2201      	movs	r2, #1
 810e824:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 810e828:	687b      	ldr	r3, [r7, #4]
 810e82a:	2201      	movs	r2, #1
 810e82c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 810e830:	687b      	ldr	r3, [r7, #4]
 810e832:	2201      	movs	r2, #1
 810e834:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 810e838:	687b      	ldr	r3, [r7, #4]
 810e83a:	2201      	movs	r2, #1
 810e83c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 810e840:	687b      	ldr	r3, [r7, #4]
 810e842:	2201      	movs	r2, #1
 810e844:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 810e848:	687b      	ldr	r3, [r7, #4]
 810e84a:	2201      	movs	r2, #1
 810e84c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 810e850:	687b      	ldr	r3, [r7, #4]
 810e852:	2201      	movs	r2, #1
 810e854:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 810e858:	687b      	ldr	r3, [r7, #4]
 810e85a:	2201      	movs	r2, #1
 810e85c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 810e860:	687b      	ldr	r3, [r7, #4]
 810e862:	2201      	movs	r2, #1
 810e864:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 810e868:	2300      	movs	r3, #0
}
 810e86a:	4618      	mov	r0, r3
 810e86c:	3708      	adds	r7, #8
 810e86e:	46bd      	mov	sp, r7
 810e870:	bd80      	pop	{r7, pc}

0810e872 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 810e872:	b480      	push	{r7}
 810e874:	b083      	sub	sp, #12
 810e876:	af00      	add	r7, sp, #0
 810e878:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 810e87a:	bf00      	nop
 810e87c:	370c      	adds	r7, #12
 810e87e:	46bd      	mov	sp, r7
 810e880:	f85d 7b04 	ldr.w	r7, [sp], #4
 810e884:	4770      	bx	lr

0810e886 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 810e886:	b580      	push	{r7, lr}
 810e888:	b082      	sub	sp, #8
 810e88a:	af00      	add	r7, sp, #0
 810e88c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 810e88e:	687b      	ldr	r3, [r7, #4]
 810e890:	681b      	ldr	r3, [r3, #0]
 810e892:	691b      	ldr	r3, [r3, #16]
 810e894:	f003 0302 	and.w	r3, r3, #2
 810e898:	2b02      	cmp	r3, #2
 810e89a:	d122      	bne.n	810e8e2 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 810e89c:	687b      	ldr	r3, [r7, #4]
 810e89e:	681b      	ldr	r3, [r3, #0]
 810e8a0:	68db      	ldr	r3, [r3, #12]
 810e8a2:	f003 0302 	and.w	r3, r3, #2
 810e8a6:	2b02      	cmp	r3, #2
 810e8a8:	d11b      	bne.n	810e8e2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 810e8aa:	687b      	ldr	r3, [r7, #4]
 810e8ac:	681b      	ldr	r3, [r3, #0]
 810e8ae:	f06f 0202 	mvn.w	r2, #2
 810e8b2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 810e8b4:	687b      	ldr	r3, [r7, #4]
 810e8b6:	2201      	movs	r2, #1
 810e8b8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 810e8ba:	687b      	ldr	r3, [r7, #4]
 810e8bc:	681b      	ldr	r3, [r3, #0]
 810e8be:	699b      	ldr	r3, [r3, #24]
 810e8c0:	f003 0303 	and.w	r3, r3, #3
 810e8c4:	2b00      	cmp	r3, #0
 810e8c6:	d003      	beq.n	810e8d0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 810e8c8:	6878      	ldr	r0, [r7, #4]
 810e8ca:	f000 fb09 	bl	810eee0 <HAL_TIM_IC_CaptureCallback>
 810e8ce:	e005      	b.n	810e8dc <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 810e8d0:	6878      	ldr	r0, [r7, #4]
 810e8d2:	f000 fafb 	bl	810eecc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 810e8d6:	6878      	ldr	r0, [r7, #4]
 810e8d8:	f000 fb0c 	bl	810eef4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 810e8dc:	687b      	ldr	r3, [r7, #4]
 810e8de:	2200      	movs	r2, #0
 810e8e0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 810e8e2:	687b      	ldr	r3, [r7, #4]
 810e8e4:	681b      	ldr	r3, [r3, #0]
 810e8e6:	691b      	ldr	r3, [r3, #16]
 810e8e8:	f003 0304 	and.w	r3, r3, #4
 810e8ec:	2b04      	cmp	r3, #4
 810e8ee:	d122      	bne.n	810e936 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 810e8f0:	687b      	ldr	r3, [r7, #4]
 810e8f2:	681b      	ldr	r3, [r3, #0]
 810e8f4:	68db      	ldr	r3, [r3, #12]
 810e8f6:	f003 0304 	and.w	r3, r3, #4
 810e8fa:	2b04      	cmp	r3, #4
 810e8fc:	d11b      	bne.n	810e936 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 810e8fe:	687b      	ldr	r3, [r7, #4]
 810e900:	681b      	ldr	r3, [r3, #0]
 810e902:	f06f 0204 	mvn.w	r2, #4
 810e906:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 810e908:	687b      	ldr	r3, [r7, #4]
 810e90a:	2202      	movs	r2, #2
 810e90c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 810e90e:	687b      	ldr	r3, [r7, #4]
 810e910:	681b      	ldr	r3, [r3, #0]
 810e912:	699b      	ldr	r3, [r3, #24]
 810e914:	f403 7340 	and.w	r3, r3, #768	; 0x300
 810e918:	2b00      	cmp	r3, #0
 810e91a:	d003      	beq.n	810e924 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 810e91c:	6878      	ldr	r0, [r7, #4]
 810e91e:	f000 fadf 	bl	810eee0 <HAL_TIM_IC_CaptureCallback>
 810e922:	e005      	b.n	810e930 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 810e924:	6878      	ldr	r0, [r7, #4]
 810e926:	f000 fad1 	bl	810eecc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 810e92a:	6878      	ldr	r0, [r7, #4]
 810e92c:	f000 fae2 	bl	810eef4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 810e930:	687b      	ldr	r3, [r7, #4]
 810e932:	2200      	movs	r2, #0
 810e934:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 810e936:	687b      	ldr	r3, [r7, #4]
 810e938:	681b      	ldr	r3, [r3, #0]
 810e93a:	691b      	ldr	r3, [r3, #16]
 810e93c:	f003 0308 	and.w	r3, r3, #8
 810e940:	2b08      	cmp	r3, #8
 810e942:	d122      	bne.n	810e98a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 810e944:	687b      	ldr	r3, [r7, #4]
 810e946:	681b      	ldr	r3, [r3, #0]
 810e948:	68db      	ldr	r3, [r3, #12]
 810e94a:	f003 0308 	and.w	r3, r3, #8
 810e94e:	2b08      	cmp	r3, #8
 810e950:	d11b      	bne.n	810e98a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 810e952:	687b      	ldr	r3, [r7, #4]
 810e954:	681b      	ldr	r3, [r3, #0]
 810e956:	f06f 0208 	mvn.w	r2, #8
 810e95a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 810e95c:	687b      	ldr	r3, [r7, #4]
 810e95e:	2204      	movs	r2, #4
 810e960:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 810e962:	687b      	ldr	r3, [r7, #4]
 810e964:	681b      	ldr	r3, [r3, #0]
 810e966:	69db      	ldr	r3, [r3, #28]
 810e968:	f003 0303 	and.w	r3, r3, #3
 810e96c:	2b00      	cmp	r3, #0
 810e96e:	d003      	beq.n	810e978 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 810e970:	6878      	ldr	r0, [r7, #4]
 810e972:	f000 fab5 	bl	810eee0 <HAL_TIM_IC_CaptureCallback>
 810e976:	e005      	b.n	810e984 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 810e978:	6878      	ldr	r0, [r7, #4]
 810e97a:	f000 faa7 	bl	810eecc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 810e97e:	6878      	ldr	r0, [r7, #4]
 810e980:	f000 fab8 	bl	810eef4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 810e984:	687b      	ldr	r3, [r7, #4]
 810e986:	2200      	movs	r2, #0
 810e988:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 810e98a:	687b      	ldr	r3, [r7, #4]
 810e98c:	681b      	ldr	r3, [r3, #0]
 810e98e:	691b      	ldr	r3, [r3, #16]
 810e990:	f003 0310 	and.w	r3, r3, #16
 810e994:	2b10      	cmp	r3, #16
 810e996:	d122      	bne.n	810e9de <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 810e998:	687b      	ldr	r3, [r7, #4]
 810e99a:	681b      	ldr	r3, [r3, #0]
 810e99c:	68db      	ldr	r3, [r3, #12]
 810e99e:	f003 0310 	and.w	r3, r3, #16
 810e9a2:	2b10      	cmp	r3, #16
 810e9a4:	d11b      	bne.n	810e9de <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 810e9a6:	687b      	ldr	r3, [r7, #4]
 810e9a8:	681b      	ldr	r3, [r3, #0]
 810e9aa:	f06f 0210 	mvn.w	r2, #16
 810e9ae:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 810e9b0:	687b      	ldr	r3, [r7, #4]
 810e9b2:	2208      	movs	r2, #8
 810e9b4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 810e9b6:	687b      	ldr	r3, [r7, #4]
 810e9b8:	681b      	ldr	r3, [r3, #0]
 810e9ba:	69db      	ldr	r3, [r3, #28]
 810e9bc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 810e9c0:	2b00      	cmp	r3, #0
 810e9c2:	d003      	beq.n	810e9cc <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 810e9c4:	6878      	ldr	r0, [r7, #4]
 810e9c6:	f000 fa8b 	bl	810eee0 <HAL_TIM_IC_CaptureCallback>
 810e9ca:	e005      	b.n	810e9d8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 810e9cc:	6878      	ldr	r0, [r7, #4]
 810e9ce:	f000 fa7d 	bl	810eecc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 810e9d2:	6878      	ldr	r0, [r7, #4]
 810e9d4:	f000 fa8e 	bl	810eef4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 810e9d8:	687b      	ldr	r3, [r7, #4]
 810e9da:	2200      	movs	r2, #0
 810e9dc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 810e9de:	687b      	ldr	r3, [r7, #4]
 810e9e0:	681b      	ldr	r3, [r3, #0]
 810e9e2:	691b      	ldr	r3, [r3, #16]
 810e9e4:	f003 0301 	and.w	r3, r3, #1
 810e9e8:	2b01      	cmp	r3, #1
 810e9ea:	d10e      	bne.n	810ea0a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 810e9ec:	687b      	ldr	r3, [r7, #4]
 810e9ee:	681b      	ldr	r3, [r3, #0]
 810e9f0:	68db      	ldr	r3, [r3, #12]
 810e9f2:	f003 0301 	and.w	r3, r3, #1
 810e9f6:	2b01      	cmp	r3, #1
 810e9f8:	d107      	bne.n	810ea0a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 810e9fa:	687b      	ldr	r3, [r7, #4]
 810e9fc:	681b      	ldr	r3, [r3, #0]
 810e9fe:	f06f 0201 	mvn.w	r2, #1
 810ea02:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 810ea04:	6878      	ldr	r0, [r7, #4]
 810ea06:	f7f3 f8e7 	bl	8101bd8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 810ea0a:	687b      	ldr	r3, [r7, #4]
 810ea0c:	681b      	ldr	r3, [r3, #0]
 810ea0e:	691b      	ldr	r3, [r3, #16]
 810ea10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 810ea14:	2b80      	cmp	r3, #128	; 0x80
 810ea16:	d10e      	bne.n	810ea36 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 810ea18:	687b      	ldr	r3, [r7, #4]
 810ea1a:	681b      	ldr	r3, [r3, #0]
 810ea1c:	68db      	ldr	r3, [r3, #12]
 810ea1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 810ea22:	2b80      	cmp	r3, #128	; 0x80
 810ea24:	d107      	bne.n	810ea36 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 810ea26:	687b      	ldr	r3, [r7, #4]
 810ea28:	681b      	ldr	r3, [r3, #0]
 810ea2a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 810ea2e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 810ea30:	6878      	ldr	r0, [r7, #4]
 810ea32:	f000 ff87 	bl	810f944 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 810ea36:	687b      	ldr	r3, [r7, #4]
 810ea38:	681b      	ldr	r3, [r3, #0]
 810ea3a:	691b      	ldr	r3, [r3, #16]
 810ea3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 810ea40:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810ea44:	d10e      	bne.n	810ea64 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 810ea46:	687b      	ldr	r3, [r7, #4]
 810ea48:	681b      	ldr	r3, [r3, #0]
 810ea4a:	68db      	ldr	r3, [r3, #12]
 810ea4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 810ea50:	2b80      	cmp	r3, #128	; 0x80
 810ea52:	d107      	bne.n	810ea64 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 810ea54:	687b      	ldr	r3, [r7, #4]
 810ea56:	681b      	ldr	r3, [r3, #0]
 810ea58:	f46f 7280 	mvn.w	r2, #256	; 0x100
 810ea5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 810ea5e:	6878      	ldr	r0, [r7, #4]
 810ea60:	f000 ff7a 	bl	810f958 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 810ea64:	687b      	ldr	r3, [r7, #4]
 810ea66:	681b      	ldr	r3, [r3, #0]
 810ea68:	691b      	ldr	r3, [r3, #16]
 810ea6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 810ea6e:	2b40      	cmp	r3, #64	; 0x40
 810ea70:	d10e      	bne.n	810ea90 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 810ea72:	687b      	ldr	r3, [r7, #4]
 810ea74:	681b      	ldr	r3, [r3, #0]
 810ea76:	68db      	ldr	r3, [r3, #12]
 810ea78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 810ea7c:	2b40      	cmp	r3, #64	; 0x40
 810ea7e:	d107      	bne.n	810ea90 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 810ea80:	687b      	ldr	r3, [r7, #4]
 810ea82:	681b      	ldr	r3, [r3, #0]
 810ea84:	f06f 0240 	mvn.w	r2, #64	; 0x40
 810ea88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 810ea8a:	6878      	ldr	r0, [r7, #4]
 810ea8c:	f000 fa3c 	bl	810ef08 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 810ea90:	687b      	ldr	r3, [r7, #4]
 810ea92:	681b      	ldr	r3, [r3, #0]
 810ea94:	691b      	ldr	r3, [r3, #16]
 810ea96:	f003 0320 	and.w	r3, r3, #32
 810ea9a:	2b20      	cmp	r3, #32
 810ea9c:	d10e      	bne.n	810eabc <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 810ea9e:	687b      	ldr	r3, [r7, #4]
 810eaa0:	681b      	ldr	r3, [r3, #0]
 810eaa2:	68db      	ldr	r3, [r3, #12]
 810eaa4:	f003 0320 	and.w	r3, r3, #32
 810eaa8:	2b20      	cmp	r3, #32
 810eaaa:	d107      	bne.n	810eabc <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 810eaac:	687b      	ldr	r3, [r7, #4]
 810eaae:	681b      	ldr	r3, [r3, #0]
 810eab0:	f06f 0220 	mvn.w	r2, #32
 810eab4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 810eab6:	6878      	ldr	r0, [r7, #4]
 810eab8:	f000 ff3a 	bl	810f930 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 810eabc:	bf00      	nop
 810eabe:	3708      	adds	r7, #8
 810eac0:	46bd      	mov	sp, r7
 810eac2:	bd80      	pop	{r7, pc}

0810eac4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 810eac4:	b580      	push	{r7, lr}
 810eac6:	b084      	sub	sp, #16
 810eac8:	af00      	add	r7, sp, #0
 810eaca:	60f8      	str	r0, [r7, #12]
 810eacc:	60b9      	str	r1, [r7, #8]
 810eace:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 810ead0:	68fb      	ldr	r3, [r7, #12]
 810ead2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 810ead6:	2b01      	cmp	r3, #1
 810ead8:	d101      	bne.n	810eade <HAL_TIM_PWM_ConfigChannel+0x1a>
 810eada:	2302      	movs	r3, #2
 810eadc:	e0fd      	b.n	810ecda <HAL_TIM_PWM_ConfigChannel+0x216>
 810eade:	68fb      	ldr	r3, [r7, #12]
 810eae0:	2201      	movs	r2, #1
 810eae2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 810eae6:	687b      	ldr	r3, [r7, #4]
 810eae8:	2b14      	cmp	r3, #20
 810eaea:	f200 80f0 	bhi.w	810ecce <HAL_TIM_PWM_ConfigChannel+0x20a>
 810eaee:	a201      	add	r2, pc, #4	; (adr r2, 810eaf4 <HAL_TIM_PWM_ConfigChannel+0x30>)
 810eaf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810eaf4:	0810eb49 	.word	0x0810eb49
 810eaf8:	0810eccf 	.word	0x0810eccf
 810eafc:	0810eccf 	.word	0x0810eccf
 810eb00:	0810eccf 	.word	0x0810eccf
 810eb04:	0810eb89 	.word	0x0810eb89
 810eb08:	0810eccf 	.word	0x0810eccf
 810eb0c:	0810eccf 	.word	0x0810eccf
 810eb10:	0810eccf 	.word	0x0810eccf
 810eb14:	0810ebcb 	.word	0x0810ebcb
 810eb18:	0810eccf 	.word	0x0810eccf
 810eb1c:	0810eccf 	.word	0x0810eccf
 810eb20:	0810eccf 	.word	0x0810eccf
 810eb24:	0810ec0b 	.word	0x0810ec0b
 810eb28:	0810eccf 	.word	0x0810eccf
 810eb2c:	0810eccf 	.word	0x0810eccf
 810eb30:	0810eccf 	.word	0x0810eccf
 810eb34:	0810ec4d 	.word	0x0810ec4d
 810eb38:	0810eccf 	.word	0x0810eccf
 810eb3c:	0810eccf 	.word	0x0810eccf
 810eb40:	0810eccf 	.word	0x0810eccf
 810eb44:	0810ec8d 	.word	0x0810ec8d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 810eb48:	68fb      	ldr	r3, [r7, #12]
 810eb4a:	681b      	ldr	r3, [r3, #0]
 810eb4c:	68b9      	ldr	r1, [r7, #8]
 810eb4e:	4618      	mov	r0, r3
 810eb50:	f000 fa7e 	bl	810f050 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 810eb54:	68fb      	ldr	r3, [r7, #12]
 810eb56:	681b      	ldr	r3, [r3, #0]
 810eb58:	699a      	ldr	r2, [r3, #24]
 810eb5a:	68fb      	ldr	r3, [r7, #12]
 810eb5c:	681b      	ldr	r3, [r3, #0]
 810eb5e:	f042 0208 	orr.w	r2, r2, #8
 810eb62:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 810eb64:	68fb      	ldr	r3, [r7, #12]
 810eb66:	681b      	ldr	r3, [r3, #0]
 810eb68:	699a      	ldr	r2, [r3, #24]
 810eb6a:	68fb      	ldr	r3, [r7, #12]
 810eb6c:	681b      	ldr	r3, [r3, #0]
 810eb6e:	f022 0204 	bic.w	r2, r2, #4
 810eb72:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 810eb74:	68fb      	ldr	r3, [r7, #12]
 810eb76:	681b      	ldr	r3, [r3, #0]
 810eb78:	6999      	ldr	r1, [r3, #24]
 810eb7a:	68bb      	ldr	r3, [r7, #8]
 810eb7c:	691a      	ldr	r2, [r3, #16]
 810eb7e:	68fb      	ldr	r3, [r7, #12]
 810eb80:	681b      	ldr	r3, [r3, #0]
 810eb82:	430a      	orrs	r2, r1
 810eb84:	619a      	str	r2, [r3, #24]
      break;
 810eb86:	e0a3      	b.n	810ecd0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 810eb88:	68fb      	ldr	r3, [r7, #12]
 810eb8a:	681b      	ldr	r3, [r3, #0]
 810eb8c:	68b9      	ldr	r1, [r7, #8]
 810eb8e:	4618      	mov	r0, r3
 810eb90:	f000 faee 	bl	810f170 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 810eb94:	68fb      	ldr	r3, [r7, #12]
 810eb96:	681b      	ldr	r3, [r3, #0]
 810eb98:	699a      	ldr	r2, [r3, #24]
 810eb9a:	68fb      	ldr	r3, [r7, #12]
 810eb9c:	681b      	ldr	r3, [r3, #0]
 810eb9e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 810eba2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 810eba4:	68fb      	ldr	r3, [r7, #12]
 810eba6:	681b      	ldr	r3, [r3, #0]
 810eba8:	699a      	ldr	r2, [r3, #24]
 810ebaa:	68fb      	ldr	r3, [r7, #12]
 810ebac:	681b      	ldr	r3, [r3, #0]
 810ebae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 810ebb2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 810ebb4:	68fb      	ldr	r3, [r7, #12]
 810ebb6:	681b      	ldr	r3, [r3, #0]
 810ebb8:	6999      	ldr	r1, [r3, #24]
 810ebba:	68bb      	ldr	r3, [r7, #8]
 810ebbc:	691b      	ldr	r3, [r3, #16]
 810ebbe:	021a      	lsls	r2, r3, #8
 810ebc0:	68fb      	ldr	r3, [r7, #12]
 810ebc2:	681b      	ldr	r3, [r3, #0]
 810ebc4:	430a      	orrs	r2, r1
 810ebc6:	619a      	str	r2, [r3, #24]
      break;
 810ebc8:	e082      	b.n	810ecd0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 810ebca:	68fb      	ldr	r3, [r7, #12]
 810ebcc:	681b      	ldr	r3, [r3, #0]
 810ebce:	68b9      	ldr	r1, [r7, #8]
 810ebd0:	4618      	mov	r0, r3
 810ebd2:	f000 fb57 	bl	810f284 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 810ebd6:	68fb      	ldr	r3, [r7, #12]
 810ebd8:	681b      	ldr	r3, [r3, #0]
 810ebda:	69da      	ldr	r2, [r3, #28]
 810ebdc:	68fb      	ldr	r3, [r7, #12]
 810ebde:	681b      	ldr	r3, [r3, #0]
 810ebe0:	f042 0208 	orr.w	r2, r2, #8
 810ebe4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 810ebe6:	68fb      	ldr	r3, [r7, #12]
 810ebe8:	681b      	ldr	r3, [r3, #0]
 810ebea:	69da      	ldr	r2, [r3, #28]
 810ebec:	68fb      	ldr	r3, [r7, #12]
 810ebee:	681b      	ldr	r3, [r3, #0]
 810ebf0:	f022 0204 	bic.w	r2, r2, #4
 810ebf4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 810ebf6:	68fb      	ldr	r3, [r7, #12]
 810ebf8:	681b      	ldr	r3, [r3, #0]
 810ebfa:	69d9      	ldr	r1, [r3, #28]
 810ebfc:	68bb      	ldr	r3, [r7, #8]
 810ebfe:	691a      	ldr	r2, [r3, #16]
 810ec00:	68fb      	ldr	r3, [r7, #12]
 810ec02:	681b      	ldr	r3, [r3, #0]
 810ec04:	430a      	orrs	r2, r1
 810ec06:	61da      	str	r2, [r3, #28]
      break;
 810ec08:	e062      	b.n	810ecd0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 810ec0a:	68fb      	ldr	r3, [r7, #12]
 810ec0c:	681b      	ldr	r3, [r3, #0]
 810ec0e:	68b9      	ldr	r1, [r7, #8]
 810ec10:	4618      	mov	r0, r3
 810ec12:	f000 fbbd 	bl	810f390 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 810ec16:	68fb      	ldr	r3, [r7, #12]
 810ec18:	681b      	ldr	r3, [r3, #0]
 810ec1a:	69da      	ldr	r2, [r3, #28]
 810ec1c:	68fb      	ldr	r3, [r7, #12]
 810ec1e:	681b      	ldr	r3, [r3, #0]
 810ec20:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 810ec24:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 810ec26:	68fb      	ldr	r3, [r7, #12]
 810ec28:	681b      	ldr	r3, [r3, #0]
 810ec2a:	69da      	ldr	r2, [r3, #28]
 810ec2c:	68fb      	ldr	r3, [r7, #12]
 810ec2e:	681b      	ldr	r3, [r3, #0]
 810ec30:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 810ec34:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 810ec36:	68fb      	ldr	r3, [r7, #12]
 810ec38:	681b      	ldr	r3, [r3, #0]
 810ec3a:	69d9      	ldr	r1, [r3, #28]
 810ec3c:	68bb      	ldr	r3, [r7, #8]
 810ec3e:	691b      	ldr	r3, [r3, #16]
 810ec40:	021a      	lsls	r2, r3, #8
 810ec42:	68fb      	ldr	r3, [r7, #12]
 810ec44:	681b      	ldr	r3, [r3, #0]
 810ec46:	430a      	orrs	r2, r1
 810ec48:	61da      	str	r2, [r3, #28]
      break;
 810ec4a:	e041      	b.n	810ecd0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 810ec4c:	68fb      	ldr	r3, [r7, #12]
 810ec4e:	681b      	ldr	r3, [r3, #0]
 810ec50:	68b9      	ldr	r1, [r7, #8]
 810ec52:	4618      	mov	r0, r3
 810ec54:	f000 fc04 	bl	810f460 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 810ec58:	68fb      	ldr	r3, [r7, #12]
 810ec5a:	681b      	ldr	r3, [r3, #0]
 810ec5c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 810ec5e:	68fb      	ldr	r3, [r7, #12]
 810ec60:	681b      	ldr	r3, [r3, #0]
 810ec62:	f042 0208 	orr.w	r2, r2, #8
 810ec66:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 810ec68:	68fb      	ldr	r3, [r7, #12]
 810ec6a:	681b      	ldr	r3, [r3, #0]
 810ec6c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 810ec6e:	68fb      	ldr	r3, [r7, #12]
 810ec70:	681b      	ldr	r3, [r3, #0]
 810ec72:	f022 0204 	bic.w	r2, r2, #4
 810ec76:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 810ec78:	68fb      	ldr	r3, [r7, #12]
 810ec7a:	681b      	ldr	r3, [r3, #0]
 810ec7c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 810ec7e:	68bb      	ldr	r3, [r7, #8]
 810ec80:	691a      	ldr	r2, [r3, #16]
 810ec82:	68fb      	ldr	r3, [r7, #12]
 810ec84:	681b      	ldr	r3, [r3, #0]
 810ec86:	430a      	orrs	r2, r1
 810ec88:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 810ec8a:	e021      	b.n	810ecd0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 810ec8c:	68fb      	ldr	r3, [r7, #12]
 810ec8e:	681b      	ldr	r3, [r3, #0]
 810ec90:	68b9      	ldr	r1, [r7, #8]
 810ec92:	4618      	mov	r0, r3
 810ec94:	f000 fc46 	bl	810f524 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 810ec98:	68fb      	ldr	r3, [r7, #12]
 810ec9a:	681b      	ldr	r3, [r3, #0]
 810ec9c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 810ec9e:	68fb      	ldr	r3, [r7, #12]
 810eca0:	681b      	ldr	r3, [r3, #0]
 810eca2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 810eca6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 810eca8:	68fb      	ldr	r3, [r7, #12]
 810ecaa:	681b      	ldr	r3, [r3, #0]
 810ecac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 810ecae:	68fb      	ldr	r3, [r7, #12]
 810ecb0:	681b      	ldr	r3, [r3, #0]
 810ecb2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 810ecb6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 810ecb8:	68fb      	ldr	r3, [r7, #12]
 810ecba:	681b      	ldr	r3, [r3, #0]
 810ecbc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 810ecbe:	68bb      	ldr	r3, [r7, #8]
 810ecc0:	691b      	ldr	r3, [r3, #16]
 810ecc2:	021a      	lsls	r2, r3, #8
 810ecc4:	68fb      	ldr	r3, [r7, #12]
 810ecc6:	681b      	ldr	r3, [r3, #0]
 810ecc8:	430a      	orrs	r2, r1
 810ecca:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 810eccc:	e000      	b.n	810ecd0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 810ecce:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 810ecd0:	68fb      	ldr	r3, [r7, #12]
 810ecd2:	2200      	movs	r2, #0
 810ecd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 810ecd8:	2300      	movs	r3, #0
}
 810ecda:	4618      	mov	r0, r3
 810ecdc:	3710      	adds	r7, #16
 810ecde:	46bd      	mov	sp, r7
 810ece0:	bd80      	pop	{r7, pc}
 810ece2:	bf00      	nop

0810ece4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 810ece4:	b580      	push	{r7, lr}
 810ece6:	b084      	sub	sp, #16
 810ece8:	af00      	add	r7, sp, #0
 810ecea:	6078      	str	r0, [r7, #4]
 810ecec:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 810ecee:	687b      	ldr	r3, [r7, #4]
 810ecf0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 810ecf4:	2b01      	cmp	r3, #1
 810ecf6:	d101      	bne.n	810ecfc <HAL_TIM_ConfigClockSource+0x18>
 810ecf8:	2302      	movs	r3, #2
 810ecfa:	e0dd      	b.n	810eeb8 <HAL_TIM_ConfigClockSource+0x1d4>
 810ecfc:	687b      	ldr	r3, [r7, #4]
 810ecfe:	2201      	movs	r2, #1
 810ed00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 810ed04:	687b      	ldr	r3, [r7, #4]
 810ed06:	2202      	movs	r2, #2
 810ed08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 810ed0c:	687b      	ldr	r3, [r7, #4]
 810ed0e:	681b      	ldr	r3, [r3, #0]
 810ed10:	689b      	ldr	r3, [r3, #8]
 810ed12:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 810ed14:	68fb      	ldr	r3, [r7, #12]
 810ed16:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 810ed1a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 810ed1e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 810ed20:	68fb      	ldr	r3, [r7, #12]
 810ed22:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 810ed26:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 810ed28:	687b      	ldr	r3, [r7, #4]
 810ed2a:	681b      	ldr	r3, [r3, #0]
 810ed2c:	68fa      	ldr	r2, [r7, #12]
 810ed2e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 810ed30:	683b      	ldr	r3, [r7, #0]
 810ed32:	681b      	ldr	r3, [r3, #0]
 810ed34:	4a62      	ldr	r2, [pc, #392]	; (810eec0 <HAL_TIM_ConfigClockSource+0x1dc>)
 810ed36:	4293      	cmp	r3, r2
 810ed38:	f000 80a9 	beq.w	810ee8e <HAL_TIM_ConfigClockSource+0x1aa>
 810ed3c:	4a60      	ldr	r2, [pc, #384]	; (810eec0 <HAL_TIM_ConfigClockSource+0x1dc>)
 810ed3e:	4293      	cmp	r3, r2
 810ed40:	f200 80ae 	bhi.w	810eea0 <HAL_TIM_ConfigClockSource+0x1bc>
 810ed44:	4a5f      	ldr	r2, [pc, #380]	; (810eec4 <HAL_TIM_ConfigClockSource+0x1e0>)
 810ed46:	4293      	cmp	r3, r2
 810ed48:	f000 80a1 	beq.w	810ee8e <HAL_TIM_ConfigClockSource+0x1aa>
 810ed4c:	4a5d      	ldr	r2, [pc, #372]	; (810eec4 <HAL_TIM_ConfigClockSource+0x1e0>)
 810ed4e:	4293      	cmp	r3, r2
 810ed50:	f200 80a6 	bhi.w	810eea0 <HAL_TIM_ConfigClockSource+0x1bc>
 810ed54:	4a5c      	ldr	r2, [pc, #368]	; (810eec8 <HAL_TIM_ConfigClockSource+0x1e4>)
 810ed56:	4293      	cmp	r3, r2
 810ed58:	f000 8099 	beq.w	810ee8e <HAL_TIM_ConfigClockSource+0x1aa>
 810ed5c:	4a5a      	ldr	r2, [pc, #360]	; (810eec8 <HAL_TIM_ConfigClockSource+0x1e4>)
 810ed5e:	4293      	cmp	r3, r2
 810ed60:	f200 809e 	bhi.w	810eea0 <HAL_TIM_ConfigClockSource+0x1bc>
 810ed64:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 810ed68:	f000 8091 	beq.w	810ee8e <HAL_TIM_ConfigClockSource+0x1aa>
 810ed6c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 810ed70:	f200 8096 	bhi.w	810eea0 <HAL_TIM_ConfigClockSource+0x1bc>
 810ed74:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 810ed78:	f000 8089 	beq.w	810ee8e <HAL_TIM_ConfigClockSource+0x1aa>
 810ed7c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 810ed80:	f200 808e 	bhi.w	810eea0 <HAL_TIM_ConfigClockSource+0x1bc>
 810ed84:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 810ed88:	d03e      	beq.n	810ee08 <HAL_TIM_ConfigClockSource+0x124>
 810ed8a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 810ed8e:	f200 8087 	bhi.w	810eea0 <HAL_TIM_ConfigClockSource+0x1bc>
 810ed92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 810ed96:	f000 8085 	beq.w	810eea4 <HAL_TIM_ConfigClockSource+0x1c0>
 810ed9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 810ed9e:	d87f      	bhi.n	810eea0 <HAL_TIM_ConfigClockSource+0x1bc>
 810eda0:	2b70      	cmp	r3, #112	; 0x70
 810eda2:	d01a      	beq.n	810edda <HAL_TIM_ConfigClockSource+0xf6>
 810eda4:	2b70      	cmp	r3, #112	; 0x70
 810eda6:	d87b      	bhi.n	810eea0 <HAL_TIM_ConfigClockSource+0x1bc>
 810eda8:	2b60      	cmp	r3, #96	; 0x60
 810edaa:	d050      	beq.n	810ee4e <HAL_TIM_ConfigClockSource+0x16a>
 810edac:	2b60      	cmp	r3, #96	; 0x60
 810edae:	d877      	bhi.n	810eea0 <HAL_TIM_ConfigClockSource+0x1bc>
 810edb0:	2b50      	cmp	r3, #80	; 0x50
 810edb2:	d03c      	beq.n	810ee2e <HAL_TIM_ConfigClockSource+0x14a>
 810edb4:	2b50      	cmp	r3, #80	; 0x50
 810edb6:	d873      	bhi.n	810eea0 <HAL_TIM_ConfigClockSource+0x1bc>
 810edb8:	2b40      	cmp	r3, #64	; 0x40
 810edba:	d058      	beq.n	810ee6e <HAL_TIM_ConfigClockSource+0x18a>
 810edbc:	2b40      	cmp	r3, #64	; 0x40
 810edbe:	d86f      	bhi.n	810eea0 <HAL_TIM_ConfigClockSource+0x1bc>
 810edc0:	2b30      	cmp	r3, #48	; 0x30
 810edc2:	d064      	beq.n	810ee8e <HAL_TIM_ConfigClockSource+0x1aa>
 810edc4:	2b30      	cmp	r3, #48	; 0x30
 810edc6:	d86b      	bhi.n	810eea0 <HAL_TIM_ConfigClockSource+0x1bc>
 810edc8:	2b20      	cmp	r3, #32
 810edca:	d060      	beq.n	810ee8e <HAL_TIM_ConfigClockSource+0x1aa>
 810edcc:	2b20      	cmp	r3, #32
 810edce:	d867      	bhi.n	810eea0 <HAL_TIM_ConfigClockSource+0x1bc>
 810edd0:	2b00      	cmp	r3, #0
 810edd2:	d05c      	beq.n	810ee8e <HAL_TIM_ConfigClockSource+0x1aa>
 810edd4:	2b10      	cmp	r3, #16
 810edd6:	d05a      	beq.n	810ee8e <HAL_TIM_ConfigClockSource+0x1aa>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 810edd8:	e062      	b.n	810eea0 <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_ETR_SetConfig(htim->Instance,
 810edda:	687b      	ldr	r3, [r7, #4]
 810eddc:	6818      	ldr	r0, [r3, #0]
 810edde:	683b      	ldr	r3, [r7, #0]
 810ede0:	6899      	ldr	r1, [r3, #8]
 810ede2:	683b      	ldr	r3, [r7, #0]
 810ede4:	685a      	ldr	r2, [r3, #4]
 810ede6:	683b      	ldr	r3, [r7, #0]
 810ede8:	68db      	ldr	r3, [r3, #12]
 810edea:	f000 fc7b 	bl	810f6e4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 810edee:	687b      	ldr	r3, [r7, #4]
 810edf0:	681b      	ldr	r3, [r3, #0]
 810edf2:	689b      	ldr	r3, [r3, #8]
 810edf4:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 810edf6:	68fb      	ldr	r3, [r7, #12]
 810edf8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 810edfc:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 810edfe:	687b      	ldr	r3, [r7, #4]
 810ee00:	681b      	ldr	r3, [r3, #0]
 810ee02:	68fa      	ldr	r2, [r7, #12]
 810ee04:	609a      	str	r2, [r3, #8]
      break;
 810ee06:	e04e      	b.n	810eea6 <HAL_TIM_ConfigClockSource+0x1c2>
      TIM_ETR_SetConfig(htim->Instance,
 810ee08:	687b      	ldr	r3, [r7, #4]
 810ee0a:	6818      	ldr	r0, [r3, #0]
 810ee0c:	683b      	ldr	r3, [r7, #0]
 810ee0e:	6899      	ldr	r1, [r3, #8]
 810ee10:	683b      	ldr	r3, [r7, #0]
 810ee12:	685a      	ldr	r2, [r3, #4]
 810ee14:	683b      	ldr	r3, [r7, #0]
 810ee16:	68db      	ldr	r3, [r3, #12]
 810ee18:	f000 fc64 	bl	810f6e4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 810ee1c:	687b      	ldr	r3, [r7, #4]
 810ee1e:	681b      	ldr	r3, [r3, #0]
 810ee20:	689a      	ldr	r2, [r3, #8]
 810ee22:	687b      	ldr	r3, [r7, #4]
 810ee24:	681b      	ldr	r3, [r3, #0]
 810ee26:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 810ee2a:	609a      	str	r2, [r3, #8]
      break;
 810ee2c:	e03b      	b.n	810eea6 <HAL_TIM_ConfigClockSource+0x1c2>
      TIM_TI1_ConfigInputStage(htim->Instance,
 810ee2e:	687b      	ldr	r3, [r7, #4]
 810ee30:	6818      	ldr	r0, [r3, #0]
 810ee32:	683b      	ldr	r3, [r7, #0]
 810ee34:	6859      	ldr	r1, [r3, #4]
 810ee36:	683b      	ldr	r3, [r7, #0]
 810ee38:	68db      	ldr	r3, [r3, #12]
 810ee3a:	461a      	mov	r2, r3
 810ee3c:	f000 fbd6 	bl	810f5ec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 810ee40:	687b      	ldr	r3, [r7, #4]
 810ee42:	681b      	ldr	r3, [r3, #0]
 810ee44:	2150      	movs	r1, #80	; 0x50
 810ee46:	4618      	mov	r0, r3
 810ee48:	f000 fc2f 	bl	810f6aa <TIM_ITRx_SetConfig>
      break;
 810ee4c:	e02b      	b.n	810eea6 <HAL_TIM_ConfigClockSource+0x1c2>
      TIM_TI2_ConfigInputStage(htim->Instance,
 810ee4e:	687b      	ldr	r3, [r7, #4]
 810ee50:	6818      	ldr	r0, [r3, #0]
 810ee52:	683b      	ldr	r3, [r7, #0]
 810ee54:	6859      	ldr	r1, [r3, #4]
 810ee56:	683b      	ldr	r3, [r7, #0]
 810ee58:	68db      	ldr	r3, [r3, #12]
 810ee5a:	461a      	mov	r2, r3
 810ee5c:	f000 fbf5 	bl	810f64a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 810ee60:	687b      	ldr	r3, [r7, #4]
 810ee62:	681b      	ldr	r3, [r3, #0]
 810ee64:	2160      	movs	r1, #96	; 0x60
 810ee66:	4618      	mov	r0, r3
 810ee68:	f000 fc1f 	bl	810f6aa <TIM_ITRx_SetConfig>
      break;
 810ee6c:	e01b      	b.n	810eea6 <HAL_TIM_ConfigClockSource+0x1c2>
      TIM_TI1_ConfigInputStage(htim->Instance,
 810ee6e:	687b      	ldr	r3, [r7, #4]
 810ee70:	6818      	ldr	r0, [r3, #0]
 810ee72:	683b      	ldr	r3, [r7, #0]
 810ee74:	6859      	ldr	r1, [r3, #4]
 810ee76:	683b      	ldr	r3, [r7, #0]
 810ee78:	68db      	ldr	r3, [r3, #12]
 810ee7a:	461a      	mov	r2, r3
 810ee7c:	f000 fbb6 	bl	810f5ec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 810ee80:	687b      	ldr	r3, [r7, #4]
 810ee82:	681b      	ldr	r3, [r3, #0]
 810ee84:	2140      	movs	r1, #64	; 0x40
 810ee86:	4618      	mov	r0, r3
 810ee88:	f000 fc0f 	bl	810f6aa <TIM_ITRx_SetConfig>
      break;
 810ee8c:	e00b      	b.n	810eea6 <HAL_TIM_ConfigClockSource+0x1c2>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 810ee8e:	687b      	ldr	r3, [r7, #4]
 810ee90:	681a      	ldr	r2, [r3, #0]
 810ee92:	683b      	ldr	r3, [r7, #0]
 810ee94:	681b      	ldr	r3, [r3, #0]
 810ee96:	4619      	mov	r1, r3
 810ee98:	4610      	mov	r0, r2
 810ee9a:	f000 fc06 	bl	810f6aa <TIM_ITRx_SetConfig>
        break;
 810ee9e:	e002      	b.n	810eea6 <HAL_TIM_ConfigClockSource+0x1c2>
      break;
 810eea0:	bf00      	nop
 810eea2:	e000      	b.n	810eea6 <HAL_TIM_ConfigClockSource+0x1c2>
      break;
 810eea4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 810eea6:	687b      	ldr	r3, [r7, #4]
 810eea8:	2201      	movs	r2, #1
 810eeaa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 810eeae:	687b      	ldr	r3, [r7, #4]
 810eeb0:	2200      	movs	r2, #0
 810eeb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 810eeb6:	2300      	movs	r3, #0
}
 810eeb8:	4618      	mov	r0, r3
 810eeba:	3710      	adds	r7, #16
 810eebc:	46bd      	mov	sp, r7
 810eebe:	bd80      	pop	{r7, pc}
 810eec0:	00100040 	.word	0x00100040
 810eec4:	00100030 	.word	0x00100030
 810eec8:	00100020 	.word	0x00100020

0810eecc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 810eecc:	b480      	push	{r7}
 810eece:	b083      	sub	sp, #12
 810eed0:	af00      	add	r7, sp, #0
 810eed2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 810eed4:	bf00      	nop
 810eed6:	370c      	adds	r7, #12
 810eed8:	46bd      	mov	sp, r7
 810eeda:	f85d 7b04 	ldr.w	r7, [sp], #4
 810eede:	4770      	bx	lr

0810eee0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 810eee0:	b480      	push	{r7}
 810eee2:	b083      	sub	sp, #12
 810eee4:	af00      	add	r7, sp, #0
 810eee6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 810eee8:	bf00      	nop
 810eeea:	370c      	adds	r7, #12
 810eeec:	46bd      	mov	sp, r7
 810eeee:	f85d 7b04 	ldr.w	r7, [sp], #4
 810eef2:	4770      	bx	lr

0810eef4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 810eef4:	b480      	push	{r7}
 810eef6:	b083      	sub	sp, #12
 810eef8:	af00      	add	r7, sp, #0
 810eefa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 810eefc:	bf00      	nop
 810eefe:	370c      	adds	r7, #12
 810ef00:	46bd      	mov	sp, r7
 810ef02:	f85d 7b04 	ldr.w	r7, [sp], #4
 810ef06:	4770      	bx	lr

0810ef08 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 810ef08:	b480      	push	{r7}
 810ef0a:	b083      	sub	sp, #12
 810ef0c:	af00      	add	r7, sp, #0
 810ef0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 810ef10:	bf00      	nop
 810ef12:	370c      	adds	r7, #12
 810ef14:	46bd      	mov	sp, r7
 810ef16:	f85d 7b04 	ldr.w	r7, [sp], #4
 810ef1a:	4770      	bx	lr

0810ef1c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 810ef1c:	b480      	push	{r7}
 810ef1e:	b085      	sub	sp, #20
 810ef20:	af00      	add	r7, sp, #0
 810ef22:	6078      	str	r0, [r7, #4]
 810ef24:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 810ef26:	687b      	ldr	r3, [r7, #4]
 810ef28:	681b      	ldr	r3, [r3, #0]
 810ef2a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 810ef2c:	687b      	ldr	r3, [r7, #4]
 810ef2e:	4a40      	ldr	r2, [pc, #256]	; (810f030 <TIM_Base_SetConfig+0x114>)
 810ef30:	4293      	cmp	r3, r2
 810ef32:	d013      	beq.n	810ef5c <TIM_Base_SetConfig+0x40>
 810ef34:	687b      	ldr	r3, [r7, #4]
 810ef36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 810ef3a:	d00f      	beq.n	810ef5c <TIM_Base_SetConfig+0x40>
 810ef3c:	687b      	ldr	r3, [r7, #4]
 810ef3e:	4a3d      	ldr	r2, [pc, #244]	; (810f034 <TIM_Base_SetConfig+0x118>)
 810ef40:	4293      	cmp	r3, r2
 810ef42:	d00b      	beq.n	810ef5c <TIM_Base_SetConfig+0x40>
 810ef44:	687b      	ldr	r3, [r7, #4]
 810ef46:	4a3c      	ldr	r2, [pc, #240]	; (810f038 <TIM_Base_SetConfig+0x11c>)
 810ef48:	4293      	cmp	r3, r2
 810ef4a:	d007      	beq.n	810ef5c <TIM_Base_SetConfig+0x40>
 810ef4c:	687b      	ldr	r3, [r7, #4]
 810ef4e:	4a3b      	ldr	r2, [pc, #236]	; (810f03c <TIM_Base_SetConfig+0x120>)
 810ef50:	4293      	cmp	r3, r2
 810ef52:	d003      	beq.n	810ef5c <TIM_Base_SetConfig+0x40>
 810ef54:	687b      	ldr	r3, [r7, #4]
 810ef56:	4a3a      	ldr	r2, [pc, #232]	; (810f040 <TIM_Base_SetConfig+0x124>)
 810ef58:	4293      	cmp	r3, r2
 810ef5a:	d108      	bne.n	810ef6e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 810ef5c:	68fb      	ldr	r3, [r7, #12]
 810ef5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 810ef62:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 810ef64:	683b      	ldr	r3, [r7, #0]
 810ef66:	685b      	ldr	r3, [r3, #4]
 810ef68:	68fa      	ldr	r2, [r7, #12]
 810ef6a:	4313      	orrs	r3, r2
 810ef6c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 810ef6e:	687b      	ldr	r3, [r7, #4]
 810ef70:	4a2f      	ldr	r2, [pc, #188]	; (810f030 <TIM_Base_SetConfig+0x114>)
 810ef72:	4293      	cmp	r3, r2
 810ef74:	d01f      	beq.n	810efb6 <TIM_Base_SetConfig+0x9a>
 810ef76:	687b      	ldr	r3, [r7, #4]
 810ef78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 810ef7c:	d01b      	beq.n	810efb6 <TIM_Base_SetConfig+0x9a>
 810ef7e:	687b      	ldr	r3, [r7, #4]
 810ef80:	4a2c      	ldr	r2, [pc, #176]	; (810f034 <TIM_Base_SetConfig+0x118>)
 810ef82:	4293      	cmp	r3, r2
 810ef84:	d017      	beq.n	810efb6 <TIM_Base_SetConfig+0x9a>
 810ef86:	687b      	ldr	r3, [r7, #4]
 810ef88:	4a2b      	ldr	r2, [pc, #172]	; (810f038 <TIM_Base_SetConfig+0x11c>)
 810ef8a:	4293      	cmp	r3, r2
 810ef8c:	d013      	beq.n	810efb6 <TIM_Base_SetConfig+0x9a>
 810ef8e:	687b      	ldr	r3, [r7, #4]
 810ef90:	4a2a      	ldr	r2, [pc, #168]	; (810f03c <TIM_Base_SetConfig+0x120>)
 810ef92:	4293      	cmp	r3, r2
 810ef94:	d00f      	beq.n	810efb6 <TIM_Base_SetConfig+0x9a>
 810ef96:	687b      	ldr	r3, [r7, #4]
 810ef98:	4a29      	ldr	r2, [pc, #164]	; (810f040 <TIM_Base_SetConfig+0x124>)
 810ef9a:	4293      	cmp	r3, r2
 810ef9c:	d00b      	beq.n	810efb6 <TIM_Base_SetConfig+0x9a>
 810ef9e:	687b      	ldr	r3, [r7, #4]
 810efa0:	4a28      	ldr	r2, [pc, #160]	; (810f044 <TIM_Base_SetConfig+0x128>)
 810efa2:	4293      	cmp	r3, r2
 810efa4:	d007      	beq.n	810efb6 <TIM_Base_SetConfig+0x9a>
 810efa6:	687b      	ldr	r3, [r7, #4]
 810efa8:	4a27      	ldr	r2, [pc, #156]	; (810f048 <TIM_Base_SetConfig+0x12c>)
 810efaa:	4293      	cmp	r3, r2
 810efac:	d003      	beq.n	810efb6 <TIM_Base_SetConfig+0x9a>
 810efae:	687b      	ldr	r3, [r7, #4]
 810efb0:	4a26      	ldr	r2, [pc, #152]	; (810f04c <TIM_Base_SetConfig+0x130>)
 810efb2:	4293      	cmp	r3, r2
 810efb4:	d108      	bne.n	810efc8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 810efb6:	68fb      	ldr	r3, [r7, #12]
 810efb8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 810efbc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 810efbe:	683b      	ldr	r3, [r7, #0]
 810efc0:	68db      	ldr	r3, [r3, #12]
 810efc2:	68fa      	ldr	r2, [r7, #12]
 810efc4:	4313      	orrs	r3, r2
 810efc6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 810efc8:	68fb      	ldr	r3, [r7, #12]
 810efca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 810efce:	683b      	ldr	r3, [r7, #0]
 810efd0:	695b      	ldr	r3, [r3, #20]
 810efd2:	4313      	orrs	r3, r2
 810efd4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 810efd6:	687b      	ldr	r3, [r7, #4]
 810efd8:	68fa      	ldr	r2, [r7, #12]
 810efda:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 810efdc:	683b      	ldr	r3, [r7, #0]
 810efde:	689a      	ldr	r2, [r3, #8]
 810efe0:	687b      	ldr	r3, [r7, #4]
 810efe2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 810efe4:	683b      	ldr	r3, [r7, #0]
 810efe6:	681a      	ldr	r2, [r3, #0]
 810efe8:	687b      	ldr	r3, [r7, #4]
 810efea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 810efec:	687b      	ldr	r3, [r7, #4]
 810efee:	4a10      	ldr	r2, [pc, #64]	; (810f030 <TIM_Base_SetConfig+0x114>)
 810eff0:	4293      	cmp	r3, r2
 810eff2:	d00f      	beq.n	810f014 <TIM_Base_SetConfig+0xf8>
 810eff4:	687b      	ldr	r3, [r7, #4]
 810eff6:	4a12      	ldr	r2, [pc, #72]	; (810f040 <TIM_Base_SetConfig+0x124>)
 810eff8:	4293      	cmp	r3, r2
 810effa:	d00b      	beq.n	810f014 <TIM_Base_SetConfig+0xf8>
 810effc:	687b      	ldr	r3, [r7, #4]
 810effe:	4a11      	ldr	r2, [pc, #68]	; (810f044 <TIM_Base_SetConfig+0x128>)
 810f000:	4293      	cmp	r3, r2
 810f002:	d007      	beq.n	810f014 <TIM_Base_SetConfig+0xf8>
 810f004:	687b      	ldr	r3, [r7, #4]
 810f006:	4a10      	ldr	r2, [pc, #64]	; (810f048 <TIM_Base_SetConfig+0x12c>)
 810f008:	4293      	cmp	r3, r2
 810f00a:	d003      	beq.n	810f014 <TIM_Base_SetConfig+0xf8>
 810f00c:	687b      	ldr	r3, [r7, #4]
 810f00e:	4a0f      	ldr	r2, [pc, #60]	; (810f04c <TIM_Base_SetConfig+0x130>)
 810f010:	4293      	cmp	r3, r2
 810f012:	d103      	bne.n	810f01c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 810f014:	683b      	ldr	r3, [r7, #0]
 810f016:	691a      	ldr	r2, [r3, #16]
 810f018:	687b      	ldr	r3, [r7, #4]
 810f01a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 810f01c:	687b      	ldr	r3, [r7, #4]
 810f01e:	2201      	movs	r2, #1
 810f020:	615a      	str	r2, [r3, #20]
}
 810f022:	bf00      	nop
 810f024:	3714      	adds	r7, #20
 810f026:	46bd      	mov	sp, r7
 810f028:	f85d 7b04 	ldr.w	r7, [sp], #4
 810f02c:	4770      	bx	lr
 810f02e:	bf00      	nop
 810f030:	40010000 	.word	0x40010000
 810f034:	40000400 	.word	0x40000400
 810f038:	40000800 	.word	0x40000800
 810f03c:	40000c00 	.word	0x40000c00
 810f040:	40010400 	.word	0x40010400
 810f044:	40014000 	.word	0x40014000
 810f048:	40014400 	.word	0x40014400
 810f04c:	40014800 	.word	0x40014800

0810f050 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 810f050:	b480      	push	{r7}
 810f052:	b087      	sub	sp, #28
 810f054:	af00      	add	r7, sp, #0
 810f056:	6078      	str	r0, [r7, #4]
 810f058:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 810f05a:	687b      	ldr	r3, [r7, #4]
 810f05c:	6a1b      	ldr	r3, [r3, #32]
 810f05e:	f023 0201 	bic.w	r2, r3, #1
 810f062:	687b      	ldr	r3, [r7, #4]
 810f064:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 810f066:	687b      	ldr	r3, [r7, #4]
 810f068:	6a1b      	ldr	r3, [r3, #32]
 810f06a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 810f06c:	687b      	ldr	r3, [r7, #4]
 810f06e:	685b      	ldr	r3, [r3, #4]
 810f070:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 810f072:	687b      	ldr	r3, [r7, #4]
 810f074:	699b      	ldr	r3, [r3, #24]
 810f076:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 810f078:	68fb      	ldr	r3, [r7, #12]
 810f07a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 810f07e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 810f082:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 810f084:	68fb      	ldr	r3, [r7, #12]
 810f086:	f023 0303 	bic.w	r3, r3, #3
 810f08a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 810f08c:	683b      	ldr	r3, [r7, #0]
 810f08e:	681b      	ldr	r3, [r3, #0]
 810f090:	68fa      	ldr	r2, [r7, #12]
 810f092:	4313      	orrs	r3, r2
 810f094:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 810f096:	697b      	ldr	r3, [r7, #20]
 810f098:	f023 0302 	bic.w	r3, r3, #2
 810f09c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 810f09e:	683b      	ldr	r3, [r7, #0]
 810f0a0:	689b      	ldr	r3, [r3, #8]
 810f0a2:	697a      	ldr	r2, [r7, #20]
 810f0a4:	4313      	orrs	r3, r2
 810f0a6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 810f0a8:	687b      	ldr	r3, [r7, #4]
 810f0aa:	4a2c      	ldr	r2, [pc, #176]	; (810f15c <TIM_OC1_SetConfig+0x10c>)
 810f0ac:	4293      	cmp	r3, r2
 810f0ae:	d00f      	beq.n	810f0d0 <TIM_OC1_SetConfig+0x80>
 810f0b0:	687b      	ldr	r3, [r7, #4]
 810f0b2:	4a2b      	ldr	r2, [pc, #172]	; (810f160 <TIM_OC1_SetConfig+0x110>)
 810f0b4:	4293      	cmp	r3, r2
 810f0b6:	d00b      	beq.n	810f0d0 <TIM_OC1_SetConfig+0x80>
 810f0b8:	687b      	ldr	r3, [r7, #4]
 810f0ba:	4a2a      	ldr	r2, [pc, #168]	; (810f164 <TIM_OC1_SetConfig+0x114>)
 810f0bc:	4293      	cmp	r3, r2
 810f0be:	d007      	beq.n	810f0d0 <TIM_OC1_SetConfig+0x80>
 810f0c0:	687b      	ldr	r3, [r7, #4]
 810f0c2:	4a29      	ldr	r2, [pc, #164]	; (810f168 <TIM_OC1_SetConfig+0x118>)
 810f0c4:	4293      	cmp	r3, r2
 810f0c6:	d003      	beq.n	810f0d0 <TIM_OC1_SetConfig+0x80>
 810f0c8:	687b      	ldr	r3, [r7, #4]
 810f0ca:	4a28      	ldr	r2, [pc, #160]	; (810f16c <TIM_OC1_SetConfig+0x11c>)
 810f0cc:	4293      	cmp	r3, r2
 810f0ce:	d10c      	bne.n	810f0ea <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 810f0d0:	697b      	ldr	r3, [r7, #20]
 810f0d2:	f023 0308 	bic.w	r3, r3, #8
 810f0d6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 810f0d8:	683b      	ldr	r3, [r7, #0]
 810f0da:	68db      	ldr	r3, [r3, #12]
 810f0dc:	697a      	ldr	r2, [r7, #20]
 810f0de:	4313      	orrs	r3, r2
 810f0e0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 810f0e2:	697b      	ldr	r3, [r7, #20]
 810f0e4:	f023 0304 	bic.w	r3, r3, #4
 810f0e8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 810f0ea:	687b      	ldr	r3, [r7, #4]
 810f0ec:	4a1b      	ldr	r2, [pc, #108]	; (810f15c <TIM_OC1_SetConfig+0x10c>)
 810f0ee:	4293      	cmp	r3, r2
 810f0f0:	d00f      	beq.n	810f112 <TIM_OC1_SetConfig+0xc2>
 810f0f2:	687b      	ldr	r3, [r7, #4]
 810f0f4:	4a1a      	ldr	r2, [pc, #104]	; (810f160 <TIM_OC1_SetConfig+0x110>)
 810f0f6:	4293      	cmp	r3, r2
 810f0f8:	d00b      	beq.n	810f112 <TIM_OC1_SetConfig+0xc2>
 810f0fa:	687b      	ldr	r3, [r7, #4]
 810f0fc:	4a19      	ldr	r2, [pc, #100]	; (810f164 <TIM_OC1_SetConfig+0x114>)
 810f0fe:	4293      	cmp	r3, r2
 810f100:	d007      	beq.n	810f112 <TIM_OC1_SetConfig+0xc2>
 810f102:	687b      	ldr	r3, [r7, #4]
 810f104:	4a18      	ldr	r2, [pc, #96]	; (810f168 <TIM_OC1_SetConfig+0x118>)
 810f106:	4293      	cmp	r3, r2
 810f108:	d003      	beq.n	810f112 <TIM_OC1_SetConfig+0xc2>
 810f10a:	687b      	ldr	r3, [r7, #4]
 810f10c:	4a17      	ldr	r2, [pc, #92]	; (810f16c <TIM_OC1_SetConfig+0x11c>)
 810f10e:	4293      	cmp	r3, r2
 810f110:	d111      	bne.n	810f136 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 810f112:	693b      	ldr	r3, [r7, #16]
 810f114:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 810f118:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 810f11a:	693b      	ldr	r3, [r7, #16]
 810f11c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 810f120:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 810f122:	683b      	ldr	r3, [r7, #0]
 810f124:	695b      	ldr	r3, [r3, #20]
 810f126:	693a      	ldr	r2, [r7, #16]
 810f128:	4313      	orrs	r3, r2
 810f12a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 810f12c:	683b      	ldr	r3, [r7, #0]
 810f12e:	699b      	ldr	r3, [r3, #24]
 810f130:	693a      	ldr	r2, [r7, #16]
 810f132:	4313      	orrs	r3, r2
 810f134:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 810f136:	687b      	ldr	r3, [r7, #4]
 810f138:	693a      	ldr	r2, [r7, #16]
 810f13a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 810f13c:	687b      	ldr	r3, [r7, #4]
 810f13e:	68fa      	ldr	r2, [r7, #12]
 810f140:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 810f142:	683b      	ldr	r3, [r7, #0]
 810f144:	685a      	ldr	r2, [r3, #4]
 810f146:	687b      	ldr	r3, [r7, #4]
 810f148:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 810f14a:	687b      	ldr	r3, [r7, #4]
 810f14c:	697a      	ldr	r2, [r7, #20]
 810f14e:	621a      	str	r2, [r3, #32]
}
 810f150:	bf00      	nop
 810f152:	371c      	adds	r7, #28
 810f154:	46bd      	mov	sp, r7
 810f156:	f85d 7b04 	ldr.w	r7, [sp], #4
 810f15a:	4770      	bx	lr
 810f15c:	40010000 	.word	0x40010000
 810f160:	40010400 	.word	0x40010400
 810f164:	40014000 	.word	0x40014000
 810f168:	40014400 	.word	0x40014400
 810f16c:	40014800 	.word	0x40014800

0810f170 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 810f170:	b480      	push	{r7}
 810f172:	b087      	sub	sp, #28
 810f174:	af00      	add	r7, sp, #0
 810f176:	6078      	str	r0, [r7, #4]
 810f178:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 810f17a:	687b      	ldr	r3, [r7, #4]
 810f17c:	6a1b      	ldr	r3, [r3, #32]
 810f17e:	f023 0210 	bic.w	r2, r3, #16
 810f182:	687b      	ldr	r3, [r7, #4]
 810f184:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 810f186:	687b      	ldr	r3, [r7, #4]
 810f188:	6a1b      	ldr	r3, [r3, #32]
 810f18a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 810f18c:	687b      	ldr	r3, [r7, #4]
 810f18e:	685b      	ldr	r3, [r3, #4]
 810f190:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 810f192:	687b      	ldr	r3, [r7, #4]
 810f194:	699b      	ldr	r3, [r3, #24]
 810f196:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 810f198:	68fb      	ldr	r3, [r7, #12]
 810f19a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 810f19e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 810f1a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 810f1a4:	68fb      	ldr	r3, [r7, #12]
 810f1a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 810f1aa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 810f1ac:	683b      	ldr	r3, [r7, #0]
 810f1ae:	681b      	ldr	r3, [r3, #0]
 810f1b0:	021b      	lsls	r3, r3, #8
 810f1b2:	68fa      	ldr	r2, [r7, #12]
 810f1b4:	4313      	orrs	r3, r2
 810f1b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 810f1b8:	697b      	ldr	r3, [r7, #20]
 810f1ba:	f023 0320 	bic.w	r3, r3, #32
 810f1be:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 810f1c0:	683b      	ldr	r3, [r7, #0]
 810f1c2:	689b      	ldr	r3, [r3, #8]
 810f1c4:	011b      	lsls	r3, r3, #4
 810f1c6:	697a      	ldr	r2, [r7, #20]
 810f1c8:	4313      	orrs	r3, r2
 810f1ca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 810f1cc:	687b      	ldr	r3, [r7, #4]
 810f1ce:	4a28      	ldr	r2, [pc, #160]	; (810f270 <TIM_OC2_SetConfig+0x100>)
 810f1d0:	4293      	cmp	r3, r2
 810f1d2:	d003      	beq.n	810f1dc <TIM_OC2_SetConfig+0x6c>
 810f1d4:	687b      	ldr	r3, [r7, #4]
 810f1d6:	4a27      	ldr	r2, [pc, #156]	; (810f274 <TIM_OC2_SetConfig+0x104>)
 810f1d8:	4293      	cmp	r3, r2
 810f1da:	d10d      	bne.n	810f1f8 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 810f1dc:	697b      	ldr	r3, [r7, #20]
 810f1de:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 810f1e2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 810f1e4:	683b      	ldr	r3, [r7, #0]
 810f1e6:	68db      	ldr	r3, [r3, #12]
 810f1e8:	011b      	lsls	r3, r3, #4
 810f1ea:	697a      	ldr	r2, [r7, #20]
 810f1ec:	4313      	orrs	r3, r2
 810f1ee:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 810f1f0:	697b      	ldr	r3, [r7, #20]
 810f1f2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 810f1f6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 810f1f8:	687b      	ldr	r3, [r7, #4]
 810f1fa:	4a1d      	ldr	r2, [pc, #116]	; (810f270 <TIM_OC2_SetConfig+0x100>)
 810f1fc:	4293      	cmp	r3, r2
 810f1fe:	d00f      	beq.n	810f220 <TIM_OC2_SetConfig+0xb0>
 810f200:	687b      	ldr	r3, [r7, #4]
 810f202:	4a1c      	ldr	r2, [pc, #112]	; (810f274 <TIM_OC2_SetConfig+0x104>)
 810f204:	4293      	cmp	r3, r2
 810f206:	d00b      	beq.n	810f220 <TIM_OC2_SetConfig+0xb0>
 810f208:	687b      	ldr	r3, [r7, #4]
 810f20a:	4a1b      	ldr	r2, [pc, #108]	; (810f278 <TIM_OC2_SetConfig+0x108>)
 810f20c:	4293      	cmp	r3, r2
 810f20e:	d007      	beq.n	810f220 <TIM_OC2_SetConfig+0xb0>
 810f210:	687b      	ldr	r3, [r7, #4]
 810f212:	4a1a      	ldr	r2, [pc, #104]	; (810f27c <TIM_OC2_SetConfig+0x10c>)
 810f214:	4293      	cmp	r3, r2
 810f216:	d003      	beq.n	810f220 <TIM_OC2_SetConfig+0xb0>
 810f218:	687b      	ldr	r3, [r7, #4]
 810f21a:	4a19      	ldr	r2, [pc, #100]	; (810f280 <TIM_OC2_SetConfig+0x110>)
 810f21c:	4293      	cmp	r3, r2
 810f21e:	d113      	bne.n	810f248 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 810f220:	693b      	ldr	r3, [r7, #16]
 810f222:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 810f226:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 810f228:	693b      	ldr	r3, [r7, #16]
 810f22a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 810f22e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 810f230:	683b      	ldr	r3, [r7, #0]
 810f232:	695b      	ldr	r3, [r3, #20]
 810f234:	009b      	lsls	r3, r3, #2
 810f236:	693a      	ldr	r2, [r7, #16]
 810f238:	4313      	orrs	r3, r2
 810f23a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 810f23c:	683b      	ldr	r3, [r7, #0]
 810f23e:	699b      	ldr	r3, [r3, #24]
 810f240:	009b      	lsls	r3, r3, #2
 810f242:	693a      	ldr	r2, [r7, #16]
 810f244:	4313      	orrs	r3, r2
 810f246:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 810f248:	687b      	ldr	r3, [r7, #4]
 810f24a:	693a      	ldr	r2, [r7, #16]
 810f24c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 810f24e:	687b      	ldr	r3, [r7, #4]
 810f250:	68fa      	ldr	r2, [r7, #12]
 810f252:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 810f254:	683b      	ldr	r3, [r7, #0]
 810f256:	685a      	ldr	r2, [r3, #4]
 810f258:	687b      	ldr	r3, [r7, #4]
 810f25a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 810f25c:	687b      	ldr	r3, [r7, #4]
 810f25e:	697a      	ldr	r2, [r7, #20]
 810f260:	621a      	str	r2, [r3, #32]
}
 810f262:	bf00      	nop
 810f264:	371c      	adds	r7, #28
 810f266:	46bd      	mov	sp, r7
 810f268:	f85d 7b04 	ldr.w	r7, [sp], #4
 810f26c:	4770      	bx	lr
 810f26e:	bf00      	nop
 810f270:	40010000 	.word	0x40010000
 810f274:	40010400 	.word	0x40010400
 810f278:	40014000 	.word	0x40014000
 810f27c:	40014400 	.word	0x40014400
 810f280:	40014800 	.word	0x40014800

0810f284 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 810f284:	b480      	push	{r7}
 810f286:	b087      	sub	sp, #28
 810f288:	af00      	add	r7, sp, #0
 810f28a:	6078      	str	r0, [r7, #4]
 810f28c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 810f28e:	687b      	ldr	r3, [r7, #4]
 810f290:	6a1b      	ldr	r3, [r3, #32]
 810f292:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 810f296:	687b      	ldr	r3, [r7, #4]
 810f298:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 810f29a:	687b      	ldr	r3, [r7, #4]
 810f29c:	6a1b      	ldr	r3, [r3, #32]
 810f29e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 810f2a0:	687b      	ldr	r3, [r7, #4]
 810f2a2:	685b      	ldr	r3, [r3, #4]
 810f2a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 810f2a6:	687b      	ldr	r3, [r7, #4]
 810f2a8:	69db      	ldr	r3, [r3, #28]
 810f2aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 810f2ac:	68fb      	ldr	r3, [r7, #12]
 810f2ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 810f2b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 810f2b4:	68fb      	ldr	r3, [r7, #12]
 810f2b6:	f023 0303 	bic.w	r3, r3, #3
 810f2ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 810f2bc:	683b      	ldr	r3, [r7, #0]
 810f2be:	681b      	ldr	r3, [r3, #0]
 810f2c0:	68fa      	ldr	r2, [r7, #12]
 810f2c2:	4313      	orrs	r3, r2
 810f2c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 810f2c6:	697b      	ldr	r3, [r7, #20]
 810f2c8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 810f2cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 810f2ce:	683b      	ldr	r3, [r7, #0]
 810f2d0:	689b      	ldr	r3, [r3, #8]
 810f2d2:	021b      	lsls	r3, r3, #8
 810f2d4:	697a      	ldr	r2, [r7, #20]
 810f2d6:	4313      	orrs	r3, r2
 810f2d8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 810f2da:	687b      	ldr	r3, [r7, #4]
 810f2dc:	4a27      	ldr	r2, [pc, #156]	; (810f37c <TIM_OC3_SetConfig+0xf8>)
 810f2de:	4293      	cmp	r3, r2
 810f2e0:	d003      	beq.n	810f2ea <TIM_OC3_SetConfig+0x66>
 810f2e2:	687b      	ldr	r3, [r7, #4]
 810f2e4:	4a26      	ldr	r2, [pc, #152]	; (810f380 <TIM_OC3_SetConfig+0xfc>)
 810f2e6:	4293      	cmp	r3, r2
 810f2e8:	d10d      	bne.n	810f306 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 810f2ea:	697b      	ldr	r3, [r7, #20]
 810f2ec:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 810f2f0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 810f2f2:	683b      	ldr	r3, [r7, #0]
 810f2f4:	68db      	ldr	r3, [r3, #12]
 810f2f6:	021b      	lsls	r3, r3, #8
 810f2f8:	697a      	ldr	r2, [r7, #20]
 810f2fa:	4313      	orrs	r3, r2
 810f2fc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 810f2fe:	697b      	ldr	r3, [r7, #20]
 810f300:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 810f304:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 810f306:	687b      	ldr	r3, [r7, #4]
 810f308:	4a1c      	ldr	r2, [pc, #112]	; (810f37c <TIM_OC3_SetConfig+0xf8>)
 810f30a:	4293      	cmp	r3, r2
 810f30c:	d00f      	beq.n	810f32e <TIM_OC3_SetConfig+0xaa>
 810f30e:	687b      	ldr	r3, [r7, #4]
 810f310:	4a1b      	ldr	r2, [pc, #108]	; (810f380 <TIM_OC3_SetConfig+0xfc>)
 810f312:	4293      	cmp	r3, r2
 810f314:	d00b      	beq.n	810f32e <TIM_OC3_SetConfig+0xaa>
 810f316:	687b      	ldr	r3, [r7, #4]
 810f318:	4a1a      	ldr	r2, [pc, #104]	; (810f384 <TIM_OC3_SetConfig+0x100>)
 810f31a:	4293      	cmp	r3, r2
 810f31c:	d007      	beq.n	810f32e <TIM_OC3_SetConfig+0xaa>
 810f31e:	687b      	ldr	r3, [r7, #4]
 810f320:	4a19      	ldr	r2, [pc, #100]	; (810f388 <TIM_OC3_SetConfig+0x104>)
 810f322:	4293      	cmp	r3, r2
 810f324:	d003      	beq.n	810f32e <TIM_OC3_SetConfig+0xaa>
 810f326:	687b      	ldr	r3, [r7, #4]
 810f328:	4a18      	ldr	r2, [pc, #96]	; (810f38c <TIM_OC3_SetConfig+0x108>)
 810f32a:	4293      	cmp	r3, r2
 810f32c:	d113      	bne.n	810f356 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 810f32e:	693b      	ldr	r3, [r7, #16]
 810f330:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 810f334:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 810f336:	693b      	ldr	r3, [r7, #16]
 810f338:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 810f33c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 810f33e:	683b      	ldr	r3, [r7, #0]
 810f340:	695b      	ldr	r3, [r3, #20]
 810f342:	011b      	lsls	r3, r3, #4
 810f344:	693a      	ldr	r2, [r7, #16]
 810f346:	4313      	orrs	r3, r2
 810f348:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 810f34a:	683b      	ldr	r3, [r7, #0]
 810f34c:	699b      	ldr	r3, [r3, #24]
 810f34e:	011b      	lsls	r3, r3, #4
 810f350:	693a      	ldr	r2, [r7, #16]
 810f352:	4313      	orrs	r3, r2
 810f354:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 810f356:	687b      	ldr	r3, [r7, #4]
 810f358:	693a      	ldr	r2, [r7, #16]
 810f35a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 810f35c:	687b      	ldr	r3, [r7, #4]
 810f35e:	68fa      	ldr	r2, [r7, #12]
 810f360:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 810f362:	683b      	ldr	r3, [r7, #0]
 810f364:	685a      	ldr	r2, [r3, #4]
 810f366:	687b      	ldr	r3, [r7, #4]
 810f368:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 810f36a:	687b      	ldr	r3, [r7, #4]
 810f36c:	697a      	ldr	r2, [r7, #20]
 810f36e:	621a      	str	r2, [r3, #32]
}
 810f370:	bf00      	nop
 810f372:	371c      	adds	r7, #28
 810f374:	46bd      	mov	sp, r7
 810f376:	f85d 7b04 	ldr.w	r7, [sp], #4
 810f37a:	4770      	bx	lr
 810f37c:	40010000 	.word	0x40010000
 810f380:	40010400 	.word	0x40010400
 810f384:	40014000 	.word	0x40014000
 810f388:	40014400 	.word	0x40014400
 810f38c:	40014800 	.word	0x40014800

0810f390 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 810f390:	b480      	push	{r7}
 810f392:	b087      	sub	sp, #28
 810f394:	af00      	add	r7, sp, #0
 810f396:	6078      	str	r0, [r7, #4]
 810f398:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 810f39a:	687b      	ldr	r3, [r7, #4]
 810f39c:	6a1b      	ldr	r3, [r3, #32]
 810f39e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 810f3a2:	687b      	ldr	r3, [r7, #4]
 810f3a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 810f3a6:	687b      	ldr	r3, [r7, #4]
 810f3a8:	6a1b      	ldr	r3, [r3, #32]
 810f3aa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 810f3ac:	687b      	ldr	r3, [r7, #4]
 810f3ae:	685b      	ldr	r3, [r3, #4]
 810f3b0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 810f3b2:	687b      	ldr	r3, [r7, #4]
 810f3b4:	69db      	ldr	r3, [r3, #28]
 810f3b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 810f3b8:	68fb      	ldr	r3, [r7, #12]
 810f3ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 810f3be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 810f3c0:	68fb      	ldr	r3, [r7, #12]
 810f3c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 810f3c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 810f3c8:	683b      	ldr	r3, [r7, #0]
 810f3ca:	681b      	ldr	r3, [r3, #0]
 810f3cc:	021b      	lsls	r3, r3, #8
 810f3ce:	68fa      	ldr	r2, [r7, #12]
 810f3d0:	4313      	orrs	r3, r2
 810f3d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 810f3d4:	693b      	ldr	r3, [r7, #16]
 810f3d6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 810f3da:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 810f3dc:	683b      	ldr	r3, [r7, #0]
 810f3de:	689b      	ldr	r3, [r3, #8]
 810f3e0:	031b      	lsls	r3, r3, #12
 810f3e2:	693a      	ldr	r2, [r7, #16]
 810f3e4:	4313      	orrs	r3, r2
 810f3e6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 810f3e8:	687b      	ldr	r3, [r7, #4]
 810f3ea:	4a18      	ldr	r2, [pc, #96]	; (810f44c <TIM_OC4_SetConfig+0xbc>)
 810f3ec:	4293      	cmp	r3, r2
 810f3ee:	d00f      	beq.n	810f410 <TIM_OC4_SetConfig+0x80>
 810f3f0:	687b      	ldr	r3, [r7, #4]
 810f3f2:	4a17      	ldr	r2, [pc, #92]	; (810f450 <TIM_OC4_SetConfig+0xc0>)
 810f3f4:	4293      	cmp	r3, r2
 810f3f6:	d00b      	beq.n	810f410 <TIM_OC4_SetConfig+0x80>
 810f3f8:	687b      	ldr	r3, [r7, #4]
 810f3fa:	4a16      	ldr	r2, [pc, #88]	; (810f454 <TIM_OC4_SetConfig+0xc4>)
 810f3fc:	4293      	cmp	r3, r2
 810f3fe:	d007      	beq.n	810f410 <TIM_OC4_SetConfig+0x80>
 810f400:	687b      	ldr	r3, [r7, #4]
 810f402:	4a15      	ldr	r2, [pc, #84]	; (810f458 <TIM_OC4_SetConfig+0xc8>)
 810f404:	4293      	cmp	r3, r2
 810f406:	d003      	beq.n	810f410 <TIM_OC4_SetConfig+0x80>
 810f408:	687b      	ldr	r3, [r7, #4]
 810f40a:	4a14      	ldr	r2, [pc, #80]	; (810f45c <TIM_OC4_SetConfig+0xcc>)
 810f40c:	4293      	cmp	r3, r2
 810f40e:	d109      	bne.n	810f424 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 810f410:	697b      	ldr	r3, [r7, #20]
 810f412:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 810f416:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 810f418:	683b      	ldr	r3, [r7, #0]
 810f41a:	695b      	ldr	r3, [r3, #20]
 810f41c:	019b      	lsls	r3, r3, #6
 810f41e:	697a      	ldr	r2, [r7, #20]
 810f420:	4313      	orrs	r3, r2
 810f422:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 810f424:	687b      	ldr	r3, [r7, #4]
 810f426:	697a      	ldr	r2, [r7, #20]
 810f428:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 810f42a:	687b      	ldr	r3, [r7, #4]
 810f42c:	68fa      	ldr	r2, [r7, #12]
 810f42e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 810f430:	683b      	ldr	r3, [r7, #0]
 810f432:	685a      	ldr	r2, [r3, #4]
 810f434:	687b      	ldr	r3, [r7, #4]
 810f436:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 810f438:	687b      	ldr	r3, [r7, #4]
 810f43a:	693a      	ldr	r2, [r7, #16]
 810f43c:	621a      	str	r2, [r3, #32]
}
 810f43e:	bf00      	nop
 810f440:	371c      	adds	r7, #28
 810f442:	46bd      	mov	sp, r7
 810f444:	f85d 7b04 	ldr.w	r7, [sp], #4
 810f448:	4770      	bx	lr
 810f44a:	bf00      	nop
 810f44c:	40010000 	.word	0x40010000
 810f450:	40010400 	.word	0x40010400
 810f454:	40014000 	.word	0x40014000
 810f458:	40014400 	.word	0x40014400
 810f45c:	40014800 	.word	0x40014800

0810f460 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 810f460:	b480      	push	{r7}
 810f462:	b087      	sub	sp, #28
 810f464:	af00      	add	r7, sp, #0
 810f466:	6078      	str	r0, [r7, #4]
 810f468:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 810f46a:	687b      	ldr	r3, [r7, #4]
 810f46c:	6a1b      	ldr	r3, [r3, #32]
 810f46e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 810f472:	687b      	ldr	r3, [r7, #4]
 810f474:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 810f476:	687b      	ldr	r3, [r7, #4]
 810f478:	6a1b      	ldr	r3, [r3, #32]
 810f47a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 810f47c:	687b      	ldr	r3, [r7, #4]
 810f47e:	685b      	ldr	r3, [r3, #4]
 810f480:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 810f482:	687b      	ldr	r3, [r7, #4]
 810f484:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810f486:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 810f488:	68fb      	ldr	r3, [r7, #12]
 810f48a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 810f48e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 810f490:	683b      	ldr	r3, [r7, #0]
 810f492:	681b      	ldr	r3, [r3, #0]
 810f494:	68fa      	ldr	r2, [r7, #12]
 810f496:	4313      	orrs	r3, r2
 810f498:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 810f49a:	693b      	ldr	r3, [r7, #16]
 810f49c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 810f4a0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 810f4a2:	683b      	ldr	r3, [r7, #0]
 810f4a4:	689b      	ldr	r3, [r3, #8]
 810f4a6:	041b      	lsls	r3, r3, #16
 810f4a8:	693a      	ldr	r2, [r7, #16]
 810f4aa:	4313      	orrs	r3, r2
 810f4ac:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 810f4ae:	687b      	ldr	r3, [r7, #4]
 810f4b0:	4a17      	ldr	r2, [pc, #92]	; (810f510 <TIM_OC5_SetConfig+0xb0>)
 810f4b2:	4293      	cmp	r3, r2
 810f4b4:	d00f      	beq.n	810f4d6 <TIM_OC5_SetConfig+0x76>
 810f4b6:	687b      	ldr	r3, [r7, #4]
 810f4b8:	4a16      	ldr	r2, [pc, #88]	; (810f514 <TIM_OC5_SetConfig+0xb4>)
 810f4ba:	4293      	cmp	r3, r2
 810f4bc:	d00b      	beq.n	810f4d6 <TIM_OC5_SetConfig+0x76>
 810f4be:	687b      	ldr	r3, [r7, #4]
 810f4c0:	4a15      	ldr	r2, [pc, #84]	; (810f518 <TIM_OC5_SetConfig+0xb8>)
 810f4c2:	4293      	cmp	r3, r2
 810f4c4:	d007      	beq.n	810f4d6 <TIM_OC5_SetConfig+0x76>
 810f4c6:	687b      	ldr	r3, [r7, #4]
 810f4c8:	4a14      	ldr	r2, [pc, #80]	; (810f51c <TIM_OC5_SetConfig+0xbc>)
 810f4ca:	4293      	cmp	r3, r2
 810f4cc:	d003      	beq.n	810f4d6 <TIM_OC5_SetConfig+0x76>
 810f4ce:	687b      	ldr	r3, [r7, #4]
 810f4d0:	4a13      	ldr	r2, [pc, #76]	; (810f520 <TIM_OC5_SetConfig+0xc0>)
 810f4d2:	4293      	cmp	r3, r2
 810f4d4:	d109      	bne.n	810f4ea <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 810f4d6:	697b      	ldr	r3, [r7, #20]
 810f4d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 810f4dc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 810f4de:	683b      	ldr	r3, [r7, #0]
 810f4e0:	695b      	ldr	r3, [r3, #20]
 810f4e2:	021b      	lsls	r3, r3, #8
 810f4e4:	697a      	ldr	r2, [r7, #20]
 810f4e6:	4313      	orrs	r3, r2
 810f4e8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 810f4ea:	687b      	ldr	r3, [r7, #4]
 810f4ec:	697a      	ldr	r2, [r7, #20]
 810f4ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 810f4f0:	687b      	ldr	r3, [r7, #4]
 810f4f2:	68fa      	ldr	r2, [r7, #12]
 810f4f4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 810f4f6:	683b      	ldr	r3, [r7, #0]
 810f4f8:	685a      	ldr	r2, [r3, #4]
 810f4fa:	687b      	ldr	r3, [r7, #4]
 810f4fc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 810f4fe:	687b      	ldr	r3, [r7, #4]
 810f500:	693a      	ldr	r2, [r7, #16]
 810f502:	621a      	str	r2, [r3, #32]
}
 810f504:	bf00      	nop
 810f506:	371c      	adds	r7, #28
 810f508:	46bd      	mov	sp, r7
 810f50a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810f50e:	4770      	bx	lr
 810f510:	40010000 	.word	0x40010000
 810f514:	40010400 	.word	0x40010400
 810f518:	40014000 	.word	0x40014000
 810f51c:	40014400 	.word	0x40014400
 810f520:	40014800 	.word	0x40014800

0810f524 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 810f524:	b480      	push	{r7}
 810f526:	b087      	sub	sp, #28
 810f528:	af00      	add	r7, sp, #0
 810f52a:	6078      	str	r0, [r7, #4]
 810f52c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 810f52e:	687b      	ldr	r3, [r7, #4]
 810f530:	6a1b      	ldr	r3, [r3, #32]
 810f532:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 810f536:	687b      	ldr	r3, [r7, #4]
 810f538:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 810f53a:	687b      	ldr	r3, [r7, #4]
 810f53c:	6a1b      	ldr	r3, [r3, #32]
 810f53e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 810f540:	687b      	ldr	r3, [r7, #4]
 810f542:	685b      	ldr	r3, [r3, #4]
 810f544:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 810f546:	687b      	ldr	r3, [r7, #4]
 810f548:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810f54a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 810f54c:	68fb      	ldr	r3, [r7, #12]
 810f54e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 810f552:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 810f554:	683b      	ldr	r3, [r7, #0]
 810f556:	681b      	ldr	r3, [r3, #0]
 810f558:	021b      	lsls	r3, r3, #8
 810f55a:	68fa      	ldr	r2, [r7, #12]
 810f55c:	4313      	orrs	r3, r2
 810f55e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 810f560:	693b      	ldr	r3, [r7, #16]
 810f562:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 810f566:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 810f568:	683b      	ldr	r3, [r7, #0]
 810f56a:	689b      	ldr	r3, [r3, #8]
 810f56c:	051b      	lsls	r3, r3, #20
 810f56e:	693a      	ldr	r2, [r7, #16]
 810f570:	4313      	orrs	r3, r2
 810f572:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 810f574:	687b      	ldr	r3, [r7, #4]
 810f576:	4a18      	ldr	r2, [pc, #96]	; (810f5d8 <TIM_OC6_SetConfig+0xb4>)
 810f578:	4293      	cmp	r3, r2
 810f57a:	d00f      	beq.n	810f59c <TIM_OC6_SetConfig+0x78>
 810f57c:	687b      	ldr	r3, [r7, #4]
 810f57e:	4a17      	ldr	r2, [pc, #92]	; (810f5dc <TIM_OC6_SetConfig+0xb8>)
 810f580:	4293      	cmp	r3, r2
 810f582:	d00b      	beq.n	810f59c <TIM_OC6_SetConfig+0x78>
 810f584:	687b      	ldr	r3, [r7, #4]
 810f586:	4a16      	ldr	r2, [pc, #88]	; (810f5e0 <TIM_OC6_SetConfig+0xbc>)
 810f588:	4293      	cmp	r3, r2
 810f58a:	d007      	beq.n	810f59c <TIM_OC6_SetConfig+0x78>
 810f58c:	687b      	ldr	r3, [r7, #4]
 810f58e:	4a15      	ldr	r2, [pc, #84]	; (810f5e4 <TIM_OC6_SetConfig+0xc0>)
 810f590:	4293      	cmp	r3, r2
 810f592:	d003      	beq.n	810f59c <TIM_OC6_SetConfig+0x78>
 810f594:	687b      	ldr	r3, [r7, #4]
 810f596:	4a14      	ldr	r2, [pc, #80]	; (810f5e8 <TIM_OC6_SetConfig+0xc4>)
 810f598:	4293      	cmp	r3, r2
 810f59a:	d109      	bne.n	810f5b0 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 810f59c:	697b      	ldr	r3, [r7, #20]
 810f59e:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 810f5a2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 810f5a4:	683b      	ldr	r3, [r7, #0]
 810f5a6:	695b      	ldr	r3, [r3, #20]
 810f5a8:	029b      	lsls	r3, r3, #10
 810f5aa:	697a      	ldr	r2, [r7, #20]
 810f5ac:	4313      	orrs	r3, r2
 810f5ae:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 810f5b0:	687b      	ldr	r3, [r7, #4]
 810f5b2:	697a      	ldr	r2, [r7, #20]
 810f5b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 810f5b6:	687b      	ldr	r3, [r7, #4]
 810f5b8:	68fa      	ldr	r2, [r7, #12]
 810f5ba:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 810f5bc:	683b      	ldr	r3, [r7, #0]
 810f5be:	685a      	ldr	r2, [r3, #4]
 810f5c0:	687b      	ldr	r3, [r7, #4]
 810f5c2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 810f5c4:	687b      	ldr	r3, [r7, #4]
 810f5c6:	693a      	ldr	r2, [r7, #16]
 810f5c8:	621a      	str	r2, [r3, #32]
}
 810f5ca:	bf00      	nop
 810f5cc:	371c      	adds	r7, #28
 810f5ce:	46bd      	mov	sp, r7
 810f5d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 810f5d4:	4770      	bx	lr
 810f5d6:	bf00      	nop
 810f5d8:	40010000 	.word	0x40010000
 810f5dc:	40010400 	.word	0x40010400
 810f5e0:	40014000 	.word	0x40014000
 810f5e4:	40014400 	.word	0x40014400
 810f5e8:	40014800 	.word	0x40014800

0810f5ec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 810f5ec:	b480      	push	{r7}
 810f5ee:	b087      	sub	sp, #28
 810f5f0:	af00      	add	r7, sp, #0
 810f5f2:	60f8      	str	r0, [r7, #12]
 810f5f4:	60b9      	str	r1, [r7, #8]
 810f5f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 810f5f8:	68fb      	ldr	r3, [r7, #12]
 810f5fa:	6a1b      	ldr	r3, [r3, #32]
 810f5fc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 810f5fe:	68fb      	ldr	r3, [r7, #12]
 810f600:	6a1b      	ldr	r3, [r3, #32]
 810f602:	f023 0201 	bic.w	r2, r3, #1
 810f606:	68fb      	ldr	r3, [r7, #12]
 810f608:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 810f60a:	68fb      	ldr	r3, [r7, #12]
 810f60c:	699b      	ldr	r3, [r3, #24]
 810f60e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 810f610:	693b      	ldr	r3, [r7, #16]
 810f612:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 810f616:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 810f618:	687b      	ldr	r3, [r7, #4]
 810f61a:	011b      	lsls	r3, r3, #4
 810f61c:	693a      	ldr	r2, [r7, #16]
 810f61e:	4313      	orrs	r3, r2
 810f620:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 810f622:	697b      	ldr	r3, [r7, #20]
 810f624:	f023 030a 	bic.w	r3, r3, #10
 810f628:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 810f62a:	697a      	ldr	r2, [r7, #20]
 810f62c:	68bb      	ldr	r3, [r7, #8]
 810f62e:	4313      	orrs	r3, r2
 810f630:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 810f632:	68fb      	ldr	r3, [r7, #12]
 810f634:	693a      	ldr	r2, [r7, #16]
 810f636:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 810f638:	68fb      	ldr	r3, [r7, #12]
 810f63a:	697a      	ldr	r2, [r7, #20]
 810f63c:	621a      	str	r2, [r3, #32]
}
 810f63e:	bf00      	nop
 810f640:	371c      	adds	r7, #28
 810f642:	46bd      	mov	sp, r7
 810f644:	f85d 7b04 	ldr.w	r7, [sp], #4
 810f648:	4770      	bx	lr

0810f64a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 810f64a:	b480      	push	{r7}
 810f64c:	b087      	sub	sp, #28
 810f64e:	af00      	add	r7, sp, #0
 810f650:	60f8      	str	r0, [r7, #12]
 810f652:	60b9      	str	r1, [r7, #8]
 810f654:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 810f656:	68fb      	ldr	r3, [r7, #12]
 810f658:	6a1b      	ldr	r3, [r3, #32]
 810f65a:	f023 0210 	bic.w	r2, r3, #16
 810f65e:	68fb      	ldr	r3, [r7, #12]
 810f660:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 810f662:	68fb      	ldr	r3, [r7, #12]
 810f664:	699b      	ldr	r3, [r3, #24]
 810f666:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 810f668:	68fb      	ldr	r3, [r7, #12]
 810f66a:	6a1b      	ldr	r3, [r3, #32]
 810f66c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 810f66e:	697b      	ldr	r3, [r7, #20]
 810f670:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 810f674:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 810f676:	687b      	ldr	r3, [r7, #4]
 810f678:	031b      	lsls	r3, r3, #12
 810f67a:	697a      	ldr	r2, [r7, #20]
 810f67c:	4313      	orrs	r3, r2
 810f67e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 810f680:	693b      	ldr	r3, [r7, #16]
 810f682:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 810f686:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 810f688:	68bb      	ldr	r3, [r7, #8]
 810f68a:	011b      	lsls	r3, r3, #4
 810f68c:	693a      	ldr	r2, [r7, #16]
 810f68e:	4313      	orrs	r3, r2
 810f690:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 810f692:	68fb      	ldr	r3, [r7, #12]
 810f694:	697a      	ldr	r2, [r7, #20]
 810f696:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 810f698:	68fb      	ldr	r3, [r7, #12]
 810f69a:	693a      	ldr	r2, [r7, #16]
 810f69c:	621a      	str	r2, [r3, #32]
}
 810f69e:	bf00      	nop
 810f6a0:	371c      	adds	r7, #28
 810f6a2:	46bd      	mov	sp, r7
 810f6a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 810f6a8:	4770      	bx	lr

0810f6aa <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 810f6aa:	b480      	push	{r7}
 810f6ac:	b085      	sub	sp, #20
 810f6ae:	af00      	add	r7, sp, #0
 810f6b0:	6078      	str	r0, [r7, #4]
 810f6b2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 810f6b4:	687b      	ldr	r3, [r7, #4]
 810f6b6:	689b      	ldr	r3, [r3, #8]
 810f6b8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 810f6ba:	68fb      	ldr	r3, [r7, #12]
 810f6bc:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 810f6c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 810f6c4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 810f6c6:	683a      	ldr	r2, [r7, #0]
 810f6c8:	68fb      	ldr	r3, [r7, #12]
 810f6ca:	4313      	orrs	r3, r2
 810f6cc:	f043 0307 	orr.w	r3, r3, #7
 810f6d0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 810f6d2:	687b      	ldr	r3, [r7, #4]
 810f6d4:	68fa      	ldr	r2, [r7, #12]
 810f6d6:	609a      	str	r2, [r3, #8]
}
 810f6d8:	bf00      	nop
 810f6da:	3714      	adds	r7, #20
 810f6dc:	46bd      	mov	sp, r7
 810f6de:	f85d 7b04 	ldr.w	r7, [sp], #4
 810f6e2:	4770      	bx	lr

0810f6e4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 810f6e4:	b480      	push	{r7}
 810f6e6:	b087      	sub	sp, #28
 810f6e8:	af00      	add	r7, sp, #0
 810f6ea:	60f8      	str	r0, [r7, #12]
 810f6ec:	60b9      	str	r1, [r7, #8]
 810f6ee:	607a      	str	r2, [r7, #4]
 810f6f0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 810f6f2:	68fb      	ldr	r3, [r7, #12]
 810f6f4:	689b      	ldr	r3, [r3, #8]
 810f6f6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 810f6f8:	697b      	ldr	r3, [r7, #20]
 810f6fa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 810f6fe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 810f700:	683b      	ldr	r3, [r7, #0]
 810f702:	021a      	lsls	r2, r3, #8
 810f704:	687b      	ldr	r3, [r7, #4]
 810f706:	431a      	orrs	r2, r3
 810f708:	68bb      	ldr	r3, [r7, #8]
 810f70a:	4313      	orrs	r3, r2
 810f70c:	697a      	ldr	r2, [r7, #20]
 810f70e:	4313      	orrs	r3, r2
 810f710:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 810f712:	68fb      	ldr	r3, [r7, #12]
 810f714:	697a      	ldr	r2, [r7, #20]
 810f716:	609a      	str	r2, [r3, #8]
}
 810f718:	bf00      	nop
 810f71a:	371c      	adds	r7, #28
 810f71c:	46bd      	mov	sp, r7
 810f71e:	f85d 7b04 	ldr.w	r7, [sp], #4
 810f722:	4770      	bx	lr

0810f724 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 810f724:	b480      	push	{r7}
 810f726:	b085      	sub	sp, #20
 810f728:	af00      	add	r7, sp, #0
 810f72a:	6078      	str	r0, [r7, #4]
 810f72c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 810f72e:	687b      	ldr	r3, [r7, #4]
 810f730:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 810f734:	2b01      	cmp	r3, #1
 810f736:	d101      	bne.n	810f73c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 810f738:	2302      	movs	r3, #2
 810f73a:	e068      	b.n	810f80e <HAL_TIMEx_MasterConfigSynchronization+0xea>
 810f73c:	687b      	ldr	r3, [r7, #4]
 810f73e:	2201      	movs	r2, #1
 810f740:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 810f744:	687b      	ldr	r3, [r7, #4]
 810f746:	2202      	movs	r2, #2
 810f748:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 810f74c:	687b      	ldr	r3, [r7, #4]
 810f74e:	681b      	ldr	r3, [r3, #0]
 810f750:	685b      	ldr	r3, [r3, #4]
 810f752:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 810f754:	687b      	ldr	r3, [r7, #4]
 810f756:	681b      	ldr	r3, [r3, #0]
 810f758:	689b      	ldr	r3, [r3, #8]
 810f75a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 810f75c:	687b      	ldr	r3, [r7, #4]
 810f75e:	681b      	ldr	r3, [r3, #0]
 810f760:	4a2e      	ldr	r2, [pc, #184]	; (810f81c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 810f762:	4293      	cmp	r3, r2
 810f764:	d004      	beq.n	810f770 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 810f766:	687b      	ldr	r3, [r7, #4]
 810f768:	681b      	ldr	r3, [r3, #0]
 810f76a:	4a2d      	ldr	r2, [pc, #180]	; (810f820 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 810f76c:	4293      	cmp	r3, r2
 810f76e:	d108      	bne.n	810f782 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 810f770:	68fb      	ldr	r3, [r7, #12]
 810f772:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 810f776:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 810f778:	683b      	ldr	r3, [r7, #0]
 810f77a:	685b      	ldr	r3, [r3, #4]
 810f77c:	68fa      	ldr	r2, [r7, #12]
 810f77e:	4313      	orrs	r3, r2
 810f780:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 810f782:	68fb      	ldr	r3, [r7, #12]
 810f784:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 810f788:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 810f78a:	683b      	ldr	r3, [r7, #0]
 810f78c:	681b      	ldr	r3, [r3, #0]
 810f78e:	68fa      	ldr	r2, [r7, #12]
 810f790:	4313      	orrs	r3, r2
 810f792:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 810f794:	687b      	ldr	r3, [r7, #4]
 810f796:	681b      	ldr	r3, [r3, #0]
 810f798:	68fa      	ldr	r2, [r7, #12]
 810f79a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 810f79c:	687b      	ldr	r3, [r7, #4]
 810f79e:	681b      	ldr	r3, [r3, #0]
 810f7a0:	4a1e      	ldr	r2, [pc, #120]	; (810f81c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 810f7a2:	4293      	cmp	r3, r2
 810f7a4:	d01d      	beq.n	810f7e2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 810f7a6:	687b      	ldr	r3, [r7, #4]
 810f7a8:	681b      	ldr	r3, [r3, #0]
 810f7aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 810f7ae:	d018      	beq.n	810f7e2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 810f7b0:	687b      	ldr	r3, [r7, #4]
 810f7b2:	681b      	ldr	r3, [r3, #0]
 810f7b4:	4a1b      	ldr	r2, [pc, #108]	; (810f824 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 810f7b6:	4293      	cmp	r3, r2
 810f7b8:	d013      	beq.n	810f7e2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 810f7ba:	687b      	ldr	r3, [r7, #4]
 810f7bc:	681b      	ldr	r3, [r3, #0]
 810f7be:	4a1a      	ldr	r2, [pc, #104]	; (810f828 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 810f7c0:	4293      	cmp	r3, r2
 810f7c2:	d00e      	beq.n	810f7e2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 810f7c4:	687b      	ldr	r3, [r7, #4]
 810f7c6:	681b      	ldr	r3, [r3, #0]
 810f7c8:	4a18      	ldr	r2, [pc, #96]	; (810f82c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 810f7ca:	4293      	cmp	r3, r2
 810f7cc:	d009      	beq.n	810f7e2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 810f7ce:	687b      	ldr	r3, [r7, #4]
 810f7d0:	681b      	ldr	r3, [r3, #0]
 810f7d2:	4a13      	ldr	r2, [pc, #76]	; (810f820 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 810f7d4:	4293      	cmp	r3, r2
 810f7d6:	d004      	beq.n	810f7e2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 810f7d8:	687b      	ldr	r3, [r7, #4]
 810f7da:	681b      	ldr	r3, [r3, #0]
 810f7dc:	4a14      	ldr	r2, [pc, #80]	; (810f830 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 810f7de:	4293      	cmp	r3, r2
 810f7e0:	d10c      	bne.n	810f7fc <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 810f7e2:	68bb      	ldr	r3, [r7, #8]
 810f7e4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 810f7e8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 810f7ea:	683b      	ldr	r3, [r7, #0]
 810f7ec:	689b      	ldr	r3, [r3, #8]
 810f7ee:	68ba      	ldr	r2, [r7, #8]
 810f7f0:	4313      	orrs	r3, r2
 810f7f2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 810f7f4:	687b      	ldr	r3, [r7, #4]
 810f7f6:	681b      	ldr	r3, [r3, #0]
 810f7f8:	68ba      	ldr	r2, [r7, #8]
 810f7fa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 810f7fc:	687b      	ldr	r3, [r7, #4]
 810f7fe:	2201      	movs	r2, #1
 810f800:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 810f804:	687b      	ldr	r3, [r7, #4]
 810f806:	2200      	movs	r2, #0
 810f808:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 810f80c:	2300      	movs	r3, #0
}
 810f80e:	4618      	mov	r0, r3
 810f810:	3714      	adds	r7, #20
 810f812:	46bd      	mov	sp, r7
 810f814:	f85d 7b04 	ldr.w	r7, [sp], #4
 810f818:	4770      	bx	lr
 810f81a:	bf00      	nop
 810f81c:	40010000 	.word	0x40010000
 810f820:	40010400 	.word	0x40010400
 810f824:	40000400 	.word	0x40000400
 810f828:	40000800 	.word	0x40000800
 810f82c:	40000c00 	.word	0x40000c00
 810f830:	40001800 	.word	0x40001800

0810f834 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 810f834:	b480      	push	{r7}
 810f836:	b085      	sub	sp, #20
 810f838:	af00      	add	r7, sp, #0
 810f83a:	6078      	str	r0, [r7, #4]
 810f83c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 810f83e:	2300      	movs	r3, #0
 810f840:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 810f842:	687b      	ldr	r3, [r7, #4]
 810f844:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 810f848:	2b01      	cmp	r3, #1
 810f84a:	d101      	bne.n	810f850 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 810f84c:	2302      	movs	r3, #2
 810f84e:	e065      	b.n	810f91c <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 810f850:	687b      	ldr	r3, [r7, #4]
 810f852:	2201      	movs	r2, #1
 810f854:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 810f858:	68fb      	ldr	r3, [r7, #12]
 810f85a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 810f85e:	683b      	ldr	r3, [r7, #0]
 810f860:	68db      	ldr	r3, [r3, #12]
 810f862:	4313      	orrs	r3, r2
 810f864:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 810f866:	68fb      	ldr	r3, [r7, #12]
 810f868:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 810f86c:	683b      	ldr	r3, [r7, #0]
 810f86e:	689b      	ldr	r3, [r3, #8]
 810f870:	4313      	orrs	r3, r2
 810f872:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 810f874:	68fb      	ldr	r3, [r7, #12]
 810f876:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 810f87a:	683b      	ldr	r3, [r7, #0]
 810f87c:	685b      	ldr	r3, [r3, #4]
 810f87e:	4313      	orrs	r3, r2
 810f880:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 810f882:	68fb      	ldr	r3, [r7, #12]
 810f884:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 810f888:	683b      	ldr	r3, [r7, #0]
 810f88a:	681b      	ldr	r3, [r3, #0]
 810f88c:	4313      	orrs	r3, r2
 810f88e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 810f890:	68fb      	ldr	r3, [r7, #12]
 810f892:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 810f896:	683b      	ldr	r3, [r7, #0]
 810f898:	691b      	ldr	r3, [r3, #16]
 810f89a:	4313      	orrs	r3, r2
 810f89c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 810f89e:	68fb      	ldr	r3, [r7, #12]
 810f8a0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 810f8a4:	683b      	ldr	r3, [r7, #0]
 810f8a6:	695b      	ldr	r3, [r3, #20]
 810f8a8:	4313      	orrs	r3, r2
 810f8aa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 810f8ac:	68fb      	ldr	r3, [r7, #12]
 810f8ae:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 810f8b2:	683b      	ldr	r3, [r7, #0]
 810f8b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810f8b6:	4313      	orrs	r3, r2
 810f8b8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 810f8ba:	68fb      	ldr	r3, [r7, #12]
 810f8bc:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 810f8c0:	683b      	ldr	r3, [r7, #0]
 810f8c2:	699b      	ldr	r3, [r3, #24]
 810f8c4:	041b      	lsls	r3, r3, #16
 810f8c6:	4313      	orrs	r3, r2
 810f8c8:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 810f8ca:	687b      	ldr	r3, [r7, #4]
 810f8cc:	681b      	ldr	r3, [r3, #0]
 810f8ce:	4a16      	ldr	r2, [pc, #88]	; (810f928 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 810f8d0:	4293      	cmp	r3, r2
 810f8d2:	d004      	beq.n	810f8de <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 810f8d4:	687b      	ldr	r3, [r7, #4]
 810f8d6:	681b      	ldr	r3, [r3, #0]
 810f8d8:	4a14      	ldr	r2, [pc, #80]	; (810f92c <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 810f8da:	4293      	cmp	r3, r2
 810f8dc:	d115      	bne.n	810f90a <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 810f8de:	68fb      	ldr	r3, [r7, #12]
 810f8e0:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 810f8e4:	683b      	ldr	r3, [r7, #0]
 810f8e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810f8e8:	051b      	lsls	r3, r3, #20
 810f8ea:	4313      	orrs	r3, r2
 810f8ec:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 810f8ee:	68fb      	ldr	r3, [r7, #12]
 810f8f0:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 810f8f4:	683b      	ldr	r3, [r7, #0]
 810f8f6:	69db      	ldr	r3, [r3, #28]
 810f8f8:	4313      	orrs	r3, r2
 810f8fa:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 810f8fc:	68fb      	ldr	r3, [r7, #12]
 810f8fe:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 810f902:	683b      	ldr	r3, [r7, #0]
 810f904:	6a1b      	ldr	r3, [r3, #32]
 810f906:	4313      	orrs	r3, r2
 810f908:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 810f90a:	687b      	ldr	r3, [r7, #4]
 810f90c:	681b      	ldr	r3, [r3, #0]
 810f90e:	68fa      	ldr	r2, [r7, #12]
 810f910:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 810f912:	687b      	ldr	r3, [r7, #4]
 810f914:	2200      	movs	r2, #0
 810f916:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 810f91a:	2300      	movs	r3, #0
}
 810f91c:	4618      	mov	r0, r3
 810f91e:	3714      	adds	r7, #20
 810f920:	46bd      	mov	sp, r7
 810f922:	f85d 7b04 	ldr.w	r7, [sp], #4
 810f926:	4770      	bx	lr
 810f928:	40010000 	.word	0x40010000
 810f92c:	40010400 	.word	0x40010400

0810f930 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 810f930:	b480      	push	{r7}
 810f932:	b083      	sub	sp, #12
 810f934:	af00      	add	r7, sp, #0
 810f936:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 810f938:	bf00      	nop
 810f93a:	370c      	adds	r7, #12
 810f93c:	46bd      	mov	sp, r7
 810f93e:	f85d 7b04 	ldr.w	r7, [sp], #4
 810f942:	4770      	bx	lr

0810f944 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 810f944:	b480      	push	{r7}
 810f946:	b083      	sub	sp, #12
 810f948:	af00      	add	r7, sp, #0
 810f94a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 810f94c:	bf00      	nop
 810f94e:	370c      	adds	r7, #12
 810f950:	46bd      	mov	sp, r7
 810f952:	f85d 7b04 	ldr.w	r7, [sp], #4
 810f956:	4770      	bx	lr

0810f958 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 810f958:	b480      	push	{r7}
 810f95a:	b083      	sub	sp, #12
 810f95c:	af00      	add	r7, sp, #0
 810f95e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 810f960:	bf00      	nop
 810f962:	370c      	adds	r7, #12
 810f964:	46bd      	mov	sp, r7
 810f966:	f85d 7b04 	ldr.w	r7, [sp], #4
 810f96a:	4770      	bx	lr

0810f96c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 810f96c:	b580      	push	{r7, lr}
 810f96e:	b082      	sub	sp, #8
 810f970:	af00      	add	r7, sp, #0
 810f972:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 810f974:	687b      	ldr	r3, [r7, #4]
 810f976:	2b00      	cmp	r3, #0
 810f978:	d101      	bne.n	810f97e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 810f97a:	2301      	movs	r3, #1
 810f97c:	e042      	b.n	810fa04 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 810f97e:	687b      	ldr	r3, [r7, #4]
 810f980:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810f984:	2b00      	cmp	r3, #0
 810f986:	d106      	bne.n	810f996 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 810f988:	687b      	ldr	r3, [r7, #4]
 810f98a:	2200      	movs	r2, #0
 810f98c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 810f990:	6878      	ldr	r0, [r7, #4]
 810f992:	f7f2 ff0b 	bl	81027ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 810f996:	687b      	ldr	r3, [r7, #4]
 810f998:	2224      	movs	r2, #36	; 0x24
 810f99a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 810f99e:	687b      	ldr	r3, [r7, #4]
 810f9a0:	681b      	ldr	r3, [r3, #0]
 810f9a2:	681a      	ldr	r2, [r3, #0]
 810f9a4:	687b      	ldr	r3, [r7, #4]
 810f9a6:	681b      	ldr	r3, [r3, #0]
 810f9a8:	f022 0201 	bic.w	r2, r2, #1
 810f9ac:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 810f9ae:	6878      	ldr	r0, [r7, #4]
 810f9b0:	f000 fbcc 	bl	811014c <UART_SetConfig>
 810f9b4:	4603      	mov	r3, r0
 810f9b6:	2b01      	cmp	r3, #1
 810f9b8:	d101      	bne.n	810f9be <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 810f9ba:	2301      	movs	r3, #1
 810f9bc:	e022      	b.n	810fa04 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 810f9be:	687b      	ldr	r3, [r7, #4]
 810f9c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810f9c2:	2b00      	cmp	r3, #0
 810f9c4:	d002      	beq.n	810f9cc <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 810f9c6:	6878      	ldr	r0, [r7, #4]
 810f9c8:	f001 f920 	bl	8110c0c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 810f9cc:	687b      	ldr	r3, [r7, #4]
 810f9ce:	681b      	ldr	r3, [r3, #0]
 810f9d0:	685a      	ldr	r2, [r3, #4]
 810f9d2:	687b      	ldr	r3, [r7, #4]
 810f9d4:	681b      	ldr	r3, [r3, #0]
 810f9d6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 810f9da:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 810f9dc:	687b      	ldr	r3, [r7, #4]
 810f9de:	681b      	ldr	r3, [r3, #0]
 810f9e0:	689a      	ldr	r2, [r3, #8]
 810f9e2:	687b      	ldr	r3, [r7, #4]
 810f9e4:	681b      	ldr	r3, [r3, #0]
 810f9e6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 810f9ea:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 810f9ec:	687b      	ldr	r3, [r7, #4]
 810f9ee:	681b      	ldr	r3, [r3, #0]
 810f9f0:	681a      	ldr	r2, [r3, #0]
 810f9f2:	687b      	ldr	r3, [r7, #4]
 810f9f4:	681b      	ldr	r3, [r3, #0]
 810f9f6:	f042 0201 	orr.w	r2, r2, #1
 810f9fa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 810f9fc:	6878      	ldr	r0, [r7, #4]
 810f9fe:	f001 f9a7 	bl	8110d50 <UART_CheckIdleState>
 810fa02:	4603      	mov	r3, r0
}
 810fa04:	4618      	mov	r0, r3
 810fa06:	3708      	adds	r7, #8
 810fa08:	46bd      	mov	sp, r7
 810fa0a:	bd80      	pop	{r7, pc}

0810fa0c <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 810fa0c:	b580      	push	{r7, lr}
 810fa0e:	b084      	sub	sp, #16
 810fa10:	af00      	add	r7, sp, #0
 810fa12:	60f8      	str	r0, [r7, #12]
 810fa14:	60b9      	str	r1, [r7, #8]
 810fa16:	4613      	mov	r3, r2
 810fa18:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 810fa1a:	68fb      	ldr	r3, [r7, #12]
 810fa1c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810fa20:	2b20      	cmp	r3, #32
 810fa22:	d168      	bne.n	810faf6 <HAL_UART_Transmit_DMA+0xea>
  {
    if ((pData == NULL) || (Size == 0U))
 810fa24:	68bb      	ldr	r3, [r7, #8]
 810fa26:	2b00      	cmp	r3, #0
 810fa28:	d002      	beq.n	810fa30 <HAL_UART_Transmit_DMA+0x24>
 810fa2a:	88fb      	ldrh	r3, [r7, #6]
 810fa2c:	2b00      	cmp	r3, #0
 810fa2e:	d101      	bne.n	810fa34 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 810fa30:	2301      	movs	r3, #1
 810fa32:	e061      	b.n	810faf8 <HAL_UART_Transmit_DMA+0xec>
    }

    __HAL_LOCK(huart);
 810fa34:	68fb      	ldr	r3, [r7, #12]
 810fa36:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 810fa3a:	2b01      	cmp	r3, #1
 810fa3c:	d101      	bne.n	810fa42 <HAL_UART_Transmit_DMA+0x36>
 810fa3e:	2302      	movs	r3, #2
 810fa40:	e05a      	b.n	810faf8 <HAL_UART_Transmit_DMA+0xec>
 810fa42:	68fb      	ldr	r3, [r7, #12]
 810fa44:	2201      	movs	r2, #1
 810fa46:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 810fa4a:	68fb      	ldr	r3, [r7, #12]
 810fa4c:	68ba      	ldr	r2, [r7, #8]
 810fa4e:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 810fa50:	68fb      	ldr	r3, [r7, #12]
 810fa52:	88fa      	ldrh	r2, [r7, #6]
 810fa54:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 810fa58:	68fb      	ldr	r3, [r7, #12]
 810fa5a:	88fa      	ldrh	r2, [r7, #6]
 810fa5c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 810fa60:	68fb      	ldr	r3, [r7, #12]
 810fa62:	2200      	movs	r2, #0
 810fa64:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 810fa68:	68fb      	ldr	r3, [r7, #12]
 810fa6a:	2221      	movs	r2, #33	; 0x21
 810fa6c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmatx != NULL)
 810fa70:	68fb      	ldr	r3, [r7, #12]
 810fa72:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810fa74:	2b00      	cmp	r3, #0
 810fa76:	d02c      	beq.n	810fad2 <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 810fa78:	68fb      	ldr	r3, [r7, #12]
 810fa7a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810fa7c:	4a20      	ldr	r2, [pc, #128]	; (810fb00 <HAL_UART_Transmit_DMA+0xf4>)
 810fa7e:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 810fa80:	68fb      	ldr	r3, [r7, #12]
 810fa82:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810fa84:	4a1f      	ldr	r2, [pc, #124]	; (810fb04 <HAL_UART_Transmit_DMA+0xf8>)
 810fa86:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 810fa88:	68fb      	ldr	r3, [r7, #12]
 810fa8a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810fa8c:	4a1e      	ldr	r2, [pc, #120]	; (810fb08 <HAL_UART_Transmit_DMA+0xfc>)
 810fa8e:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 810fa90:	68fb      	ldr	r3, [r7, #12]
 810fa92:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810fa94:	2200      	movs	r2, #0
 810fa96:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 810fa98:	68fb      	ldr	r3, [r7, #12]
 810fa9a:	6f98      	ldr	r0, [r3, #120]	; 0x78
 810fa9c:	68fb      	ldr	r3, [r7, #12]
 810fa9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810faa0:	4619      	mov	r1, r3
 810faa2:	68fb      	ldr	r3, [r7, #12]
 810faa4:	681b      	ldr	r3, [r3, #0]
 810faa6:	3328      	adds	r3, #40	; 0x28
 810faa8:	461a      	mov	r2, r3
 810faaa:	88fb      	ldrh	r3, [r7, #6]
 810faac:	f7f4 ffd0 	bl	8104a50 <HAL_DMA_Start_IT>
 810fab0:	4603      	mov	r3, r0
 810fab2:	2b00      	cmp	r3, #0
 810fab4:	d00d      	beq.n	810fad2 <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 810fab6:	68fb      	ldr	r3, [r7, #12]
 810fab8:	2210      	movs	r2, #16
 810faba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 810fabe:	68fb      	ldr	r3, [r7, #12]
 810fac0:	2200      	movs	r2, #0
 810fac2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 810fac6:	68fb      	ldr	r3, [r7, #12]
 810fac8:	2220      	movs	r2, #32
 810faca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        return HAL_ERROR;
 810face:	2301      	movs	r3, #1
 810fad0:	e012      	b.n	810faf8 <HAL_UART_Transmit_DMA+0xec>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 810fad2:	68fb      	ldr	r3, [r7, #12]
 810fad4:	681b      	ldr	r3, [r3, #0]
 810fad6:	2240      	movs	r2, #64	; 0x40
 810fad8:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 810fada:	68fb      	ldr	r3, [r7, #12]
 810fadc:	2200      	movs	r2, #0
 810fade:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 810fae2:	68fb      	ldr	r3, [r7, #12]
 810fae4:	681b      	ldr	r3, [r3, #0]
 810fae6:	689a      	ldr	r2, [r3, #8]
 810fae8:	68fb      	ldr	r3, [r7, #12]
 810faea:	681b      	ldr	r3, [r3, #0]
 810faec:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 810faf0:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 810faf2:	2300      	movs	r3, #0
 810faf4:	e000      	b.n	810faf8 <HAL_UART_Transmit_DMA+0xec>
  }
  else
  {
    return HAL_BUSY;
 810faf6:	2302      	movs	r3, #2
  }
}
 810faf8:	4618      	mov	r0, r3
 810fafa:	3710      	adds	r7, #16
 810fafc:	46bd      	mov	sp, r7
 810fafe:	bd80      	pop	{r7, pc}
 810fb00:	08111065 	.word	0x08111065
 810fb04:	081110b5 	.word	0x081110b5
 810fb08:	0811119f 	.word	0x0811119f

0810fb0c <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 810fb0c:	b580      	push	{r7, lr}
 810fb0e:	b084      	sub	sp, #16
 810fb10:	af00      	add	r7, sp, #0
 810fb12:	60f8      	str	r0, [r7, #12]
 810fb14:	60b9      	str	r1, [r7, #8]
 810fb16:	4613      	mov	r3, r2
 810fb18:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 810fb1a:	68fb      	ldr	r3, [r7, #12]
 810fb1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 810fb20:	2b20      	cmp	r3, #32
 810fb22:	d131      	bne.n	810fb88 <HAL_UART_Receive_DMA+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 810fb24:	68bb      	ldr	r3, [r7, #8]
 810fb26:	2b00      	cmp	r3, #0
 810fb28:	d002      	beq.n	810fb30 <HAL_UART_Receive_DMA+0x24>
 810fb2a:	88fb      	ldrh	r3, [r7, #6]
 810fb2c:	2b00      	cmp	r3, #0
 810fb2e:	d101      	bne.n	810fb34 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 810fb30:	2301      	movs	r3, #1
 810fb32:	e02a      	b.n	810fb8a <HAL_UART_Receive_DMA+0x7e>
    }

    __HAL_LOCK(huart);
 810fb34:	68fb      	ldr	r3, [r7, #12]
 810fb36:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 810fb3a:	2b01      	cmp	r3, #1
 810fb3c:	d101      	bne.n	810fb42 <HAL_UART_Receive_DMA+0x36>
 810fb3e:	2302      	movs	r3, #2
 810fb40:	e023      	b.n	810fb8a <HAL_UART_Receive_DMA+0x7e>
 810fb42:	68fb      	ldr	r3, [r7, #12]
 810fb44:	2201      	movs	r2, #1
 810fb46:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 810fb4a:	68fb      	ldr	r3, [r7, #12]
 810fb4c:	2200      	movs	r2, #0
 810fb4e:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 810fb50:	68fb      	ldr	r3, [r7, #12]
 810fb52:	681b      	ldr	r3, [r3, #0]
 810fb54:	4a0f      	ldr	r2, [pc, #60]	; (810fb94 <HAL_UART_Receive_DMA+0x88>)
 810fb56:	4293      	cmp	r3, r2
 810fb58:	d00e      	beq.n	810fb78 <HAL_UART_Receive_DMA+0x6c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 810fb5a:	68fb      	ldr	r3, [r7, #12]
 810fb5c:	681b      	ldr	r3, [r3, #0]
 810fb5e:	685b      	ldr	r3, [r3, #4]
 810fb60:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 810fb64:	2b00      	cmp	r3, #0
 810fb66:	d007      	beq.n	810fb78 <HAL_UART_Receive_DMA+0x6c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 810fb68:	68fb      	ldr	r3, [r7, #12]
 810fb6a:	681b      	ldr	r3, [r3, #0]
 810fb6c:	681a      	ldr	r2, [r3, #0]
 810fb6e:	68fb      	ldr	r3, [r7, #12]
 810fb70:	681b      	ldr	r3, [r3, #0]
 810fb72:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 810fb76:	601a      	str	r2, [r3, #0]
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 810fb78:	88fb      	ldrh	r3, [r7, #6]
 810fb7a:	461a      	mov	r2, r3
 810fb7c:	68b9      	ldr	r1, [r7, #8]
 810fb7e:	68f8      	ldr	r0, [r7, #12]
 810fb80:	f001 f9b2 	bl	8110ee8 <UART_Start_Receive_DMA>
 810fb84:	4603      	mov	r3, r0
 810fb86:	e000      	b.n	810fb8a <HAL_UART_Receive_DMA+0x7e>
  }
  else
  {
    return HAL_BUSY;
 810fb88:	2302      	movs	r3, #2
  }
}
 810fb8a:	4618      	mov	r0, r3
 810fb8c:	3710      	adds	r7, #16
 810fb8e:	46bd      	mov	sp, r7
 810fb90:	bd80      	pop	{r7, pc}
 810fb92:	bf00      	nop
 810fb94:	58000c00 	.word	0x58000c00

0810fb98 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 810fb98:	b580      	push	{r7, lr}
 810fb9a:	b088      	sub	sp, #32
 810fb9c:	af00      	add	r7, sp, #0
 810fb9e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 810fba0:	687b      	ldr	r3, [r7, #4]
 810fba2:	681b      	ldr	r3, [r3, #0]
 810fba4:	69db      	ldr	r3, [r3, #28]
 810fba6:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 810fba8:	687b      	ldr	r3, [r7, #4]
 810fbaa:	681b      	ldr	r3, [r3, #0]
 810fbac:	681b      	ldr	r3, [r3, #0]
 810fbae:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 810fbb0:	687b      	ldr	r3, [r7, #4]
 810fbb2:	681b      	ldr	r3, [r3, #0]
 810fbb4:	689b      	ldr	r3, [r3, #8]
 810fbb6:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 810fbb8:	69fa      	ldr	r2, [r7, #28]
 810fbba:	f640 030f 	movw	r3, #2063	; 0x80f
 810fbbe:	4013      	ands	r3, r2
 810fbc0:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 810fbc2:	693b      	ldr	r3, [r7, #16]
 810fbc4:	2b00      	cmp	r3, #0
 810fbc6:	d118      	bne.n	810fbfa <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 810fbc8:	69fb      	ldr	r3, [r7, #28]
 810fbca:	f003 0320 	and.w	r3, r3, #32
 810fbce:	2b00      	cmp	r3, #0
 810fbd0:	d013      	beq.n	810fbfa <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 810fbd2:	69bb      	ldr	r3, [r7, #24]
 810fbd4:	f003 0320 	and.w	r3, r3, #32
 810fbd8:	2b00      	cmp	r3, #0
 810fbda:	d104      	bne.n	810fbe6 <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 810fbdc:	697b      	ldr	r3, [r7, #20]
 810fbde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 810fbe2:	2b00      	cmp	r3, #0
 810fbe4:	d009      	beq.n	810fbfa <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 810fbe6:	687b      	ldr	r3, [r7, #4]
 810fbe8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 810fbea:	2b00      	cmp	r3, #0
 810fbec:	f000 8282 	beq.w	81100f4 <HAL_UART_IRQHandler+0x55c>
      {
        huart->RxISR(huart);
 810fbf0:	687b      	ldr	r3, [r7, #4]
 810fbf2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 810fbf4:	6878      	ldr	r0, [r7, #4]
 810fbf6:	4798      	blx	r3
      }
      return;
 810fbf8:	e27c      	b.n	81100f4 <HAL_UART_IRQHandler+0x55c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 810fbfa:	693b      	ldr	r3, [r7, #16]
 810fbfc:	2b00      	cmp	r3, #0
 810fbfe:	f000 80ef 	beq.w	810fde0 <HAL_UART_IRQHandler+0x248>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 810fc02:	697a      	ldr	r2, [r7, #20]
 810fc04:	4b73      	ldr	r3, [pc, #460]	; (810fdd4 <HAL_UART_IRQHandler+0x23c>)
 810fc06:	4013      	ands	r3, r2
 810fc08:	2b00      	cmp	r3, #0
 810fc0a:	d105      	bne.n	810fc18 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 810fc0c:	69ba      	ldr	r2, [r7, #24]
 810fc0e:	4b72      	ldr	r3, [pc, #456]	; (810fdd8 <HAL_UART_IRQHandler+0x240>)
 810fc10:	4013      	ands	r3, r2
 810fc12:	2b00      	cmp	r3, #0
 810fc14:	f000 80e4 	beq.w	810fde0 <HAL_UART_IRQHandler+0x248>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 810fc18:	69fb      	ldr	r3, [r7, #28]
 810fc1a:	f003 0301 	and.w	r3, r3, #1
 810fc1e:	2b00      	cmp	r3, #0
 810fc20:	d010      	beq.n	810fc44 <HAL_UART_IRQHandler+0xac>
 810fc22:	69bb      	ldr	r3, [r7, #24]
 810fc24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 810fc28:	2b00      	cmp	r3, #0
 810fc2a:	d00b      	beq.n	810fc44 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 810fc2c:	687b      	ldr	r3, [r7, #4]
 810fc2e:	681b      	ldr	r3, [r3, #0]
 810fc30:	2201      	movs	r2, #1
 810fc32:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 810fc34:	687b      	ldr	r3, [r7, #4]
 810fc36:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 810fc3a:	f043 0201 	orr.w	r2, r3, #1
 810fc3e:	687b      	ldr	r3, [r7, #4]
 810fc40:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 810fc44:	69fb      	ldr	r3, [r7, #28]
 810fc46:	f003 0302 	and.w	r3, r3, #2
 810fc4a:	2b00      	cmp	r3, #0
 810fc4c:	d010      	beq.n	810fc70 <HAL_UART_IRQHandler+0xd8>
 810fc4e:	697b      	ldr	r3, [r7, #20]
 810fc50:	f003 0301 	and.w	r3, r3, #1
 810fc54:	2b00      	cmp	r3, #0
 810fc56:	d00b      	beq.n	810fc70 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 810fc58:	687b      	ldr	r3, [r7, #4]
 810fc5a:	681b      	ldr	r3, [r3, #0]
 810fc5c:	2202      	movs	r2, #2
 810fc5e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 810fc60:	687b      	ldr	r3, [r7, #4]
 810fc62:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 810fc66:	f043 0204 	orr.w	r2, r3, #4
 810fc6a:	687b      	ldr	r3, [r7, #4]
 810fc6c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 810fc70:	69fb      	ldr	r3, [r7, #28]
 810fc72:	f003 0304 	and.w	r3, r3, #4
 810fc76:	2b00      	cmp	r3, #0
 810fc78:	d010      	beq.n	810fc9c <HAL_UART_IRQHandler+0x104>
 810fc7a:	697b      	ldr	r3, [r7, #20]
 810fc7c:	f003 0301 	and.w	r3, r3, #1
 810fc80:	2b00      	cmp	r3, #0
 810fc82:	d00b      	beq.n	810fc9c <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 810fc84:	687b      	ldr	r3, [r7, #4]
 810fc86:	681b      	ldr	r3, [r3, #0]
 810fc88:	2204      	movs	r2, #4
 810fc8a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 810fc8c:	687b      	ldr	r3, [r7, #4]
 810fc8e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 810fc92:	f043 0202 	orr.w	r2, r3, #2
 810fc96:	687b      	ldr	r3, [r7, #4]
 810fc98:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 810fc9c:	69fb      	ldr	r3, [r7, #28]
 810fc9e:	f003 0308 	and.w	r3, r3, #8
 810fca2:	2b00      	cmp	r3, #0
 810fca4:	d015      	beq.n	810fcd2 <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 810fca6:	69bb      	ldr	r3, [r7, #24]
 810fca8:	f003 0320 	and.w	r3, r3, #32
 810fcac:	2b00      	cmp	r3, #0
 810fcae:	d104      	bne.n	810fcba <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 810fcb0:	697a      	ldr	r2, [r7, #20]
 810fcb2:	4b48      	ldr	r3, [pc, #288]	; (810fdd4 <HAL_UART_IRQHandler+0x23c>)
 810fcb4:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 810fcb6:	2b00      	cmp	r3, #0
 810fcb8:	d00b      	beq.n	810fcd2 <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 810fcba:	687b      	ldr	r3, [r7, #4]
 810fcbc:	681b      	ldr	r3, [r3, #0]
 810fcbe:	2208      	movs	r2, #8
 810fcc0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 810fcc2:	687b      	ldr	r3, [r7, #4]
 810fcc4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 810fcc8:	f043 0208 	orr.w	r2, r3, #8
 810fccc:	687b      	ldr	r3, [r7, #4]
 810fcce:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 810fcd2:	69fb      	ldr	r3, [r7, #28]
 810fcd4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 810fcd8:	2b00      	cmp	r3, #0
 810fcda:	d011      	beq.n	810fd00 <HAL_UART_IRQHandler+0x168>
 810fcdc:	69bb      	ldr	r3, [r7, #24]
 810fcde:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 810fce2:	2b00      	cmp	r3, #0
 810fce4:	d00c      	beq.n	810fd00 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 810fce6:	687b      	ldr	r3, [r7, #4]
 810fce8:	681b      	ldr	r3, [r3, #0]
 810fcea:	f44f 6200 	mov.w	r2, #2048	; 0x800
 810fcee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 810fcf0:	687b      	ldr	r3, [r7, #4]
 810fcf2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 810fcf6:	f043 0220 	orr.w	r2, r3, #32
 810fcfa:	687b      	ldr	r3, [r7, #4]
 810fcfc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 810fd00:	687b      	ldr	r3, [r7, #4]
 810fd02:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 810fd06:	2b00      	cmp	r3, #0
 810fd08:	f000 81f6 	beq.w	81100f8 <HAL_UART_IRQHandler+0x560>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 810fd0c:	69fb      	ldr	r3, [r7, #28]
 810fd0e:	f003 0320 	and.w	r3, r3, #32
 810fd12:	2b00      	cmp	r3, #0
 810fd14:	d011      	beq.n	810fd3a <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 810fd16:	69bb      	ldr	r3, [r7, #24]
 810fd18:	f003 0320 	and.w	r3, r3, #32
 810fd1c:	2b00      	cmp	r3, #0
 810fd1e:	d104      	bne.n	810fd2a <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 810fd20:	697b      	ldr	r3, [r7, #20]
 810fd22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 810fd26:	2b00      	cmp	r3, #0
 810fd28:	d007      	beq.n	810fd3a <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 810fd2a:	687b      	ldr	r3, [r7, #4]
 810fd2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 810fd2e:	2b00      	cmp	r3, #0
 810fd30:	d003      	beq.n	810fd3a <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 810fd32:	687b      	ldr	r3, [r7, #4]
 810fd34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 810fd36:	6878      	ldr	r0, [r7, #4]
 810fd38:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 810fd3a:	687b      	ldr	r3, [r7, #4]
 810fd3c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 810fd40:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 810fd42:	687b      	ldr	r3, [r7, #4]
 810fd44:	681b      	ldr	r3, [r3, #0]
 810fd46:	689b      	ldr	r3, [r3, #8]
 810fd48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 810fd4c:	2b40      	cmp	r3, #64	; 0x40
 810fd4e:	d004      	beq.n	810fd5a <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 810fd50:	68fb      	ldr	r3, [r7, #12]
 810fd52:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 810fd56:	2b00      	cmp	r3, #0
 810fd58:	d031      	beq.n	810fdbe <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 810fd5a:	6878      	ldr	r0, [r7, #4]
 810fd5c:	f001 f950 	bl	8111000 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 810fd60:	687b      	ldr	r3, [r7, #4]
 810fd62:	681b      	ldr	r3, [r3, #0]
 810fd64:	689b      	ldr	r3, [r3, #8]
 810fd66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 810fd6a:	2b40      	cmp	r3, #64	; 0x40
 810fd6c:	d123      	bne.n	810fdb6 <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 810fd6e:	687b      	ldr	r3, [r7, #4]
 810fd70:	681b      	ldr	r3, [r3, #0]
 810fd72:	689a      	ldr	r2, [r3, #8]
 810fd74:	687b      	ldr	r3, [r7, #4]
 810fd76:	681b      	ldr	r3, [r3, #0]
 810fd78:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 810fd7c:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 810fd7e:	687b      	ldr	r3, [r7, #4]
 810fd80:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810fd82:	2b00      	cmp	r3, #0
 810fd84:	d013      	beq.n	810fdae <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 810fd86:	687b      	ldr	r3, [r7, #4]
 810fd88:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810fd8a:	4a14      	ldr	r2, [pc, #80]	; (810fddc <HAL_UART_IRQHandler+0x244>)
 810fd8c:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 810fd8e:	687b      	ldr	r3, [r7, #4]
 810fd90:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810fd92:	4618      	mov	r0, r3
 810fd94:	f7f5 fbe4 	bl	8105560 <HAL_DMA_Abort_IT>
 810fd98:	4603      	mov	r3, r0
 810fd9a:	2b00      	cmp	r3, #0
 810fd9c:	d017      	beq.n	810fdce <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 810fd9e:	687b      	ldr	r3, [r7, #4]
 810fda0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810fda2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810fda4:	687a      	ldr	r2, [r7, #4]
 810fda6:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 810fda8:	4610      	mov	r0, r2
 810fdaa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 810fdac:	e00f      	b.n	810fdce <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 810fdae:	6878      	ldr	r0, [r7, #4]
 810fdb0:	f7f1 ff08 	bl	8101bc4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 810fdb4:	e00b      	b.n	810fdce <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 810fdb6:	6878      	ldr	r0, [r7, #4]
 810fdb8:	f7f1 ff04 	bl	8101bc4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 810fdbc:	e007      	b.n	810fdce <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 810fdbe:	6878      	ldr	r0, [r7, #4]
 810fdc0:	f7f1 ff00 	bl	8101bc4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 810fdc4:	687b      	ldr	r3, [r7, #4]
 810fdc6:	2200      	movs	r2, #0
 810fdc8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 810fdcc:	e194      	b.n	81100f8 <HAL_UART_IRQHandler+0x560>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 810fdce:	bf00      	nop
    return;
 810fdd0:	e192      	b.n	81100f8 <HAL_UART_IRQHandler+0x560>
 810fdd2:	bf00      	nop
 810fdd4:	10000001 	.word	0x10000001
 810fdd8:	04000120 	.word	0x04000120
 810fddc:	0811121f 	.word	0x0811121f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 810fde0:	687b      	ldr	r3, [r7, #4]
 810fde2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 810fde4:	2b01      	cmp	r3, #1
 810fde6:	f040 8111 	bne.w	811000c <HAL_UART_IRQHandler+0x474>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 810fdea:	69fb      	ldr	r3, [r7, #28]
 810fdec:	f003 0310 	and.w	r3, r3, #16
 810fdf0:	2b00      	cmp	r3, #0
 810fdf2:	f000 810b 	beq.w	811000c <HAL_UART_IRQHandler+0x474>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 810fdf6:	69bb      	ldr	r3, [r7, #24]
 810fdf8:	f003 0310 	and.w	r3, r3, #16
 810fdfc:	2b00      	cmp	r3, #0
 810fdfe:	f000 8105 	beq.w	811000c <HAL_UART_IRQHandler+0x474>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 810fe02:	687b      	ldr	r3, [r7, #4]
 810fe04:	681b      	ldr	r3, [r3, #0]
 810fe06:	2210      	movs	r2, #16
 810fe08:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 810fe0a:	687b      	ldr	r3, [r7, #4]
 810fe0c:	681b      	ldr	r3, [r3, #0]
 810fe0e:	689b      	ldr	r3, [r3, #8]
 810fe10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 810fe14:	2b40      	cmp	r3, #64	; 0x40
 810fe16:	f040 80bb 	bne.w	810ff90 <HAL_UART_IRQHandler+0x3f8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 810fe1a:	687b      	ldr	r3, [r7, #4]
 810fe1c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810fe1e:	681b      	ldr	r3, [r3, #0]
 810fe20:	4a97      	ldr	r2, [pc, #604]	; (8110080 <HAL_UART_IRQHandler+0x4e8>)
 810fe22:	4293      	cmp	r3, r2
 810fe24:	d059      	beq.n	810feda <HAL_UART_IRQHandler+0x342>
 810fe26:	687b      	ldr	r3, [r7, #4]
 810fe28:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810fe2a:	681b      	ldr	r3, [r3, #0]
 810fe2c:	4a95      	ldr	r2, [pc, #596]	; (8110084 <HAL_UART_IRQHandler+0x4ec>)
 810fe2e:	4293      	cmp	r3, r2
 810fe30:	d053      	beq.n	810feda <HAL_UART_IRQHandler+0x342>
 810fe32:	687b      	ldr	r3, [r7, #4]
 810fe34:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810fe36:	681b      	ldr	r3, [r3, #0]
 810fe38:	4a93      	ldr	r2, [pc, #588]	; (8110088 <HAL_UART_IRQHandler+0x4f0>)
 810fe3a:	4293      	cmp	r3, r2
 810fe3c:	d04d      	beq.n	810feda <HAL_UART_IRQHandler+0x342>
 810fe3e:	687b      	ldr	r3, [r7, #4]
 810fe40:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810fe42:	681b      	ldr	r3, [r3, #0]
 810fe44:	4a91      	ldr	r2, [pc, #580]	; (811008c <HAL_UART_IRQHandler+0x4f4>)
 810fe46:	4293      	cmp	r3, r2
 810fe48:	d047      	beq.n	810feda <HAL_UART_IRQHandler+0x342>
 810fe4a:	687b      	ldr	r3, [r7, #4]
 810fe4c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810fe4e:	681b      	ldr	r3, [r3, #0]
 810fe50:	4a8f      	ldr	r2, [pc, #572]	; (8110090 <HAL_UART_IRQHandler+0x4f8>)
 810fe52:	4293      	cmp	r3, r2
 810fe54:	d041      	beq.n	810feda <HAL_UART_IRQHandler+0x342>
 810fe56:	687b      	ldr	r3, [r7, #4]
 810fe58:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810fe5a:	681b      	ldr	r3, [r3, #0]
 810fe5c:	4a8d      	ldr	r2, [pc, #564]	; (8110094 <HAL_UART_IRQHandler+0x4fc>)
 810fe5e:	4293      	cmp	r3, r2
 810fe60:	d03b      	beq.n	810feda <HAL_UART_IRQHandler+0x342>
 810fe62:	687b      	ldr	r3, [r7, #4]
 810fe64:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810fe66:	681b      	ldr	r3, [r3, #0]
 810fe68:	4a8b      	ldr	r2, [pc, #556]	; (8110098 <HAL_UART_IRQHandler+0x500>)
 810fe6a:	4293      	cmp	r3, r2
 810fe6c:	d035      	beq.n	810feda <HAL_UART_IRQHandler+0x342>
 810fe6e:	687b      	ldr	r3, [r7, #4]
 810fe70:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810fe72:	681b      	ldr	r3, [r3, #0]
 810fe74:	4a89      	ldr	r2, [pc, #548]	; (811009c <HAL_UART_IRQHandler+0x504>)
 810fe76:	4293      	cmp	r3, r2
 810fe78:	d02f      	beq.n	810feda <HAL_UART_IRQHandler+0x342>
 810fe7a:	687b      	ldr	r3, [r7, #4]
 810fe7c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810fe7e:	681b      	ldr	r3, [r3, #0]
 810fe80:	4a87      	ldr	r2, [pc, #540]	; (81100a0 <HAL_UART_IRQHandler+0x508>)
 810fe82:	4293      	cmp	r3, r2
 810fe84:	d029      	beq.n	810feda <HAL_UART_IRQHandler+0x342>
 810fe86:	687b      	ldr	r3, [r7, #4]
 810fe88:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810fe8a:	681b      	ldr	r3, [r3, #0]
 810fe8c:	4a85      	ldr	r2, [pc, #532]	; (81100a4 <HAL_UART_IRQHandler+0x50c>)
 810fe8e:	4293      	cmp	r3, r2
 810fe90:	d023      	beq.n	810feda <HAL_UART_IRQHandler+0x342>
 810fe92:	687b      	ldr	r3, [r7, #4]
 810fe94:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810fe96:	681b      	ldr	r3, [r3, #0]
 810fe98:	4a83      	ldr	r2, [pc, #524]	; (81100a8 <HAL_UART_IRQHandler+0x510>)
 810fe9a:	4293      	cmp	r3, r2
 810fe9c:	d01d      	beq.n	810feda <HAL_UART_IRQHandler+0x342>
 810fe9e:	687b      	ldr	r3, [r7, #4]
 810fea0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810fea2:	681b      	ldr	r3, [r3, #0]
 810fea4:	4a81      	ldr	r2, [pc, #516]	; (81100ac <HAL_UART_IRQHandler+0x514>)
 810fea6:	4293      	cmp	r3, r2
 810fea8:	d017      	beq.n	810feda <HAL_UART_IRQHandler+0x342>
 810feaa:	687b      	ldr	r3, [r7, #4]
 810feac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810feae:	681b      	ldr	r3, [r3, #0]
 810feb0:	4a7f      	ldr	r2, [pc, #508]	; (81100b0 <HAL_UART_IRQHandler+0x518>)
 810feb2:	4293      	cmp	r3, r2
 810feb4:	d011      	beq.n	810feda <HAL_UART_IRQHandler+0x342>
 810feb6:	687b      	ldr	r3, [r7, #4]
 810feb8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810feba:	681b      	ldr	r3, [r3, #0]
 810febc:	4a7d      	ldr	r2, [pc, #500]	; (81100b4 <HAL_UART_IRQHandler+0x51c>)
 810febe:	4293      	cmp	r3, r2
 810fec0:	d00b      	beq.n	810feda <HAL_UART_IRQHandler+0x342>
 810fec2:	687b      	ldr	r3, [r7, #4]
 810fec4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810fec6:	681b      	ldr	r3, [r3, #0]
 810fec8:	4a7b      	ldr	r2, [pc, #492]	; (81100b8 <HAL_UART_IRQHandler+0x520>)
 810feca:	4293      	cmp	r3, r2
 810fecc:	d005      	beq.n	810feda <HAL_UART_IRQHandler+0x342>
 810fece:	687b      	ldr	r3, [r7, #4]
 810fed0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810fed2:	681b      	ldr	r3, [r3, #0]
 810fed4:	4a79      	ldr	r2, [pc, #484]	; (81100bc <HAL_UART_IRQHandler+0x524>)
 810fed6:	4293      	cmp	r3, r2
 810fed8:	d105      	bne.n	810fee6 <HAL_UART_IRQHandler+0x34e>
 810feda:	687b      	ldr	r3, [r7, #4]
 810fedc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810fede:	681b      	ldr	r3, [r3, #0]
 810fee0:	685b      	ldr	r3, [r3, #4]
 810fee2:	b29b      	uxth	r3, r3
 810fee4:	e004      	b.n	810fef0 <HAL_UART_IRQHandler+0x358>
 810fee6:	687b      	ldr	r3, [r7, #4]
 810fee8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810feea:	681b      	ldr	r3, [r3, #0]
 810feec:	685b      	ldr	r3, [r3, #4]
 810feee:	b29b      	uxth	r3, r3
 810fef0:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 810fef2:	893b      	ldrh	r3, [r7, #8]
 810fef4:	2b00      	cmp	r3, #0
 810fef6:	f000 8101 	beq.w	81100fc <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 810fefa:	687b      	ldr	r3, [r7, #4]
 810fefc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 810ff00:	893a      	ldrh	r2, [r7, #8]
 810ff02:	429a      	cmp	r2, r3
 810ff04:	f080 80fa 	bcs.w	81100fc <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 810ff08:	687b      	ldr	r3, [r7, #4]
 810ff0a:	893a      	ldrh	r2, [r7, #8]
 810ff0c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 810ff10:	687b      	ldr	r3, [r7, #4]
 810ff12:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810ff14:	69db      	ldr	r3, [r3, #28]
 810ff16:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810ff1a:	d02b      	beq.n	810ff74 <HAL_UART_IRQHandler+0x3dc>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 810ff1c:	687b      	ldr	r3, [r7, #4]
 810ff1e:	681b      	ldr	r3, [r3, #0]
 810ff20:	681a      	ldr	r2, [r3, #0]
 810ff22:	687b      	ldr	r3, [r7, #4]
 810ff24:	681b      	ldr	r3, [r3, #0]
 810ff26:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 810ff2a:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 810ff2c:	687b      	ldr	r3, [r7, #4]
 810ff2e:	681b      	ldr	r3, [r3, #0]
 810ff30:	689a      	ldr	r2, [r3, #8]
 810ff32:	687b      	ldr	r3, [r7, #4]
 810ff34:	681b      	ldr	r3, [r3, #0]
 810ff36:	f022 0201 	bic.w	r2, r2, #1
 810ff3a:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 810ff3c:	687b      	ldr	r3, [r7, #4]
 810ff3e:	681b      	ldr	r3, [r3, #0]
 810ff40:	689a      	ldr	r2, [r3, #8]
 810ff42:	687b      	ldr	r3, [r7, #4]
 810ff44:	681b      	ldr	r3, [r3, #0]
 810ff46:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 810ff4a:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 810ff4c:	687b      	ldr	r3, [r7, #4]
 810ff4e:	2220      	movs	r2, #32
 810ff50:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 810ff54:	687b      	ldr	r3, [r7, #4]
 810ff56:	2200      	movs	r2, #0
 810ff58:	66da      	str	r2, [r3, #108]	; 0x6c

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 810ff5a:	687b      	ldr	r3, [r7, #4]
 810ff5c:	681b      	ldr	r3, [r3, #0]
 810ff5e:	681a      	ldr	r2, [r3, #0]
 810ff60:	687b      	ldr	r3, [r7, #4]
 810ff62:	681b      	ldr	r3, [r3, #0]
 810ff64:	f022 0210 	bic.w	r2, r2, #16
 810ff68:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 810ff6a:	687b      	ldr	r3, [r7, #4]
 810ff6c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810ff6e:	4618      	mov	r0, r3
 810ff70:	f7f4 ffd8 	bl	8104f24 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 810ff74:	687b      	ldr	r3, [r7, #4]
 810ff76:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 810ff7a:	687b      	ldr	r3, [r7, #4]
 810ff7c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 810ff80:	b29b      	uxth	r3, r3
 810ff82:	1ad3      	subs	r3, r2, r3
 810ff84:	b29b      	uxth	r3, r3
 810ff86:	4619      	mov	r1, r3
 810ff88:	6878      	ldr	r0, [r7, #4]
 810ff8a:	f000 f8d3 	bl	8110134 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 810ff8e:	e0b5      	b.n	81100fc <HAL_UART_IRQHandler+0x564>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 810ff90:	687b      	ldr	r3, [r7, #4]
 810ff92:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 810ff96:	687b      	ldr	r3, [r7, #4]
 810ff98:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 810ff9c:	b29b      	uxth	r3, r3
 810ff9e:	1ad3      	subs	r3, r2, r3
 810ffa0:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 810ffa2:	687b      	ldr	r3, [r7, #4]
 810ffa4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 810ffa8:	b29b      	uxth	r3, r3
 810ffaa:	2b00      	cmp	r3, #0
 810ffac:	f000 80a8 	beq.w	8110100 <HAL_UART_IRQHandler+0x568>
          && (nb_rx_data > 0U))
 810ffb0:	897b      	ldrh	r3, [r7, #10]
 810ffb2:	2b00      	cmp	r3, #0
 810ffb4:	f000 80a4 	beq.w	8110100 <HAL_UART_IRQHandler+0x568>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 810ffb8:	687b      	ldr	r3, [r7, #4]
 810ffba:	681b      	ldr	r3, [r3, #0]
 810ffbc:	681a      	ldr	r2, [r3, #0]
 810ffbe:	687b      	ldr	r3, [r7, #4]
 810ffc0:	681b      	ldr	r3, [r3, #0]
 810ffc2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 810ffc6:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 810ffc8:	687b      	ldr	r3, [r7, #4]
 810ffca:	681b      	ldr	r3, [r3, #0]
 810ffcc:	689b      	ldr	r3, [r3, #8]
 810ffce:	687a      	ldr	r2, [r7, #4]
 810ffd0:	6812      	ldr	r2, [r2, #0]
 810ffd2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 810ffd6:	f023 0301 	bic.w	r3, r3, #1
 810ffda:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 810ffdc:	687b      	ldr	r3, [r7, #4]
 810ffde:	2220      	movs	r2, #32
 810ffe0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 810ffe4:	687b      	ldr	r3, [r7, #4]
 810ffe6:	2200      	movs	r2, #0
 810ffe8:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 810ffea:	687b      	ldr	r3, [r7, #4]
 810ffec:	2200      	movs	r2, #0
 810ffee:	671a      	str	r2, [r3, #112]	; 0x70

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 810fff0:	687b      	ldr	r3, [r7, #4]
 810fff2:	681b      	ldr	r3, [r3, #0]
 810fff4:	681a      	ldr	r2, [r3, #0]
 810fff6:	687b      	ldr	r3, [r7, #4]
 810fff8:	681b      	ldr	r3, [r3, #0]
 810fffa:	f022 0210 	bic.w	r2, r2, #16
 810fffe:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8110000:	897b      	ldrh	r3, [r7, #10]
 8110002:	4619      	mov	r1, r3
 8110004:	6878      	ldr	r0, [r7, #4]
 8110006:	f000 f895 	bl	8110134 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 811000a:	e079      	b.n	8110100 <HAL_UART_IRQHandler+0x568>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 811000c:	69fb      	ldr	r3, [r7, #28]
 811000e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8110012:	2b00      	cmp	r3, #0
 8110014:	d00d      	beq.n	8110032 <HAL_UART_IRQHandler+0x49a>
 8110016:	697b      	ldr	r3, [r7, #20]
 8110018:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 811001c:	2b00      	cmp	r3, #0
 811001e:	d008      	beq.n	8110032 <HAL_UART_IRQHandler+0x49a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8110020:	687b      	ldr	r3, [r7, #4]
 8110022:	681b      	ldr	r3, [r3, #0]
 8110024:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8110028:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 811002a:	6878      	ldr	r0, [r7, #4]
 811002c:	f001 f927 	bl	811127e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8110030:	e069      	b.n	8110106 <HAL_UART_IRQHandler+0x56e>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8110032:	69fb      	ldr	r3, [r7, #28]
 8110034:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8110038:	2b00      	cmp	r3, #0
 811003a:	d012      	beq.n	8110062 <HAL_UART_IRQHandler+0x4ca>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 811003c:	69bb      	ldr	r3, [r7, #24]
 811003e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8110042:	2b00      	cmp	r3, #0
 8110044:	d104      	bne.n	8110050 <HAL_UART_IRQHandler+0x4b8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8110046:	697b      	ldr	r3, [r7, #20]
 8110048:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 811004c:	2b00      	cmp	r3, #0
 811004e:	d008      	beq.n	8110062 <HAL_UART_IRQHandler+0x4ca>
  {
    if (huart->TxISR != NULL)
 8110050:	687b      	ldr	r3, [r7, #4]
 8110052:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8110054:	2b00      	cmp	r3, #0
 8110056:	d055      	beq.n	8110104 <HAL_UART_IRQHandler+0x56c>
    {
      huart->TxISR(huart);
 8110058:	687b      	ldr	r3, [r7, #4]
 811005a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 811005c:	6878      	ldr	r0, [r7, #4]
 811005e:	4798      	blx	r3
    }
    return;
 8110060:	e050      	b.n	8110104 <HAL_UART_IRQHandler+0x56c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8110062:	69fb      	ldr	r3, [r7, #28]
 8110064:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8110068:	2b00      	cmp	r3, #0
 811006a:	d029      	beq.n	81100c0 <HAL_UART_IRQHandler+0x528>
 811006c:	69bb      	ldr	r3, [r7, #24]
 811006e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8110072:	2b00      	cmp	r3, #0
 8110074:	d024      	beq.n	81100c0 <HAL_UART_IRQHandler+0x528>
  {
    UART_EndTransmit_IT(huart);
 8110076:	6878      	ldr	r0, [r7, #4]
 8110078:	f001 f8e7 	bl	811124a <UART_EndTransmit_IT>
    return;
 811007c:	e043      	b.n	8110106 <HAL_UART_IRQHandler+0x56e>
 811007e:	bf00      	nop
 8110080:	40020010 	.word	0x40020010
 8110084:	40020028 	.word	0x40020028
 8110088:	40020040 	.word	0x40020040
 811008c:	40020058 	.word	0x40020058
 8110090:	40020070 	.word	0x40020070
 8110094:	40020088 	.word	0x40020088
 8110098:	400200a0 	.word	0x400200a0
 811009c:	400200b8 	.word	0x400200b8
 81100a0:	40020410 	.word	0x40020410
 81100a4:	40020428 	.word	0x40020428
 81100a8:	40020440 	.word	0x40020440
 81100ac:	40020458 	.word	0x40020458
 81100b0:	40020470 	.word	0x40020470
 81100b4:	40020488 	.word	0x40020488
 81100b8:	400204a0 	.word	0x400204a0
 81100bc:	400204b8 	.word	0x400204b8
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 81100c0:	69fb      	ldr	r3, [r7, #28]
 81100c2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 81100c6:	2b00      	cmp	r3, #0
 81100c8:	d008      	beq.n	81100dc <HAL_UART_IRQHandler+0x544>
 81100ca:	69bb      	ldr	r3, [r7, #24]
 81100cc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 81100d0:	2b00      	cmp	r3, #0
 81100d2:	d003      	beq.n	81100dc <HAL_UART_IRQHandler+0x544>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 81100d4:	6878      	ldr	r0, [r7, #4]
 81100d6:	f001 f8e6 	bl	81112a6 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 81100da:	e014      	b.n	8110106 <HAL_UART_IRQHandler+0x56e>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 81100dc:	69fb      	ldr	r3, [r7, #28]
 81100de:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 81100e2:	2b00      	cmp	r3, #0
 81100e4:	d00f      	beq.n	8110106 <HAL_UART_IRQHandler+0x56e>
 81100e6:	69bb      	ldr	r3, [r7, #24]
 81100e8:	2b00      	cmp	r3, #0
 81100ea:	da0c      	bge.n	8110106 <HAL_UART_IRQHandler+0x56e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 81100ec:	6878      	ldr	r0, [r7, #4]
 81100ee:	f001 f8d0 	bl	8111292 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 81100f2:	e008      	b.n	8110106 <HAL_UART_IRQHandler+0x56e>
      return;
 81100f4:	bf00      	nop
 81100f6:	e006      	b.n	8110106 <HAL_UART_IRQHandler+0x56e>
    return;
 81100f8:	bf00      	nop
 81100fa:	e004      	b.n	8110106 <HAL_UART_IRQHandler+0x56e>
      return;
 81100fc:	bf00      	nop
 81100fe:	e002      	b.n	8110106 <HAL_UART_IRQHandler+0x56e>
      return;
 8110100:	bf00      	nop
 8110102:	e000      	b.n	8110106 <HAL_UART_IRQHandler+0x56e>
    return;
 8110104:	bf00      	nop
  }
}
 8110106:	3720      	adds	r7, #32
 8110108:	46bd      	mov	sp, r7
 811010a:	bd80      	pop	{r7, pc}

0811010c <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 811010c:	b480      	push	{r7}
 811010e:	b083      	sub	sp, #12
 8110110:	af00      	add	r7, sp, #0
 8110112:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8110114:	bf00      	nop
 8110116:	370c      	adds	r7, #12
 8110118:	46bd      	mov	sp, r7
 811011a:	f85d 7b04 	ldr.w	r7, [sp], #4
 811011e:	4770      	bx	lr

08110120 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8110120:	b480      	push	{r7}
 8110122:	b083      	sub	sp, #12
 8110124:	af00      	add	r7, sp, #0
 8110126:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8110128:	bf00      	nop
 811012a:	370c      	adds	r7, #12
 811012c:	46bd      	mov	sp, r7
 811012e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8110132:	4770      	bx	lr

08110134 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8110134:	b480      	push	{r7}
 8110136:	b083      	sub	sp, #12
 8110138:	af00      	add	r7, sp, #0
 811013a:	6078      	str	r0, [r7, #4]
 811013c:	460b      	mov	r3, r1
 811013e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8110140:	bf00      	nop
 8110142:	370c      	adds	r7, #12
 8110144:	46bd      	mov	sp, r7
 8110146:	f85d 7b04 	ldr.w	r7, [sp], #4
 811014a:	4770      	bx	lr

0811014c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 811014c:	b5b0      	push	{r4, r5, r7, lr}
 811014e:	b08e      	sub	sp, #56	; 0x38
 8110150:	af00      	add	r7, sp, #0
 8110152:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8110154:	2300      	movs	r3, #0
 8110156:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 811015a:	687b      	ldr	r3, [r7, #4]
 811015c:	689a      	ldr	r2, [r3, #8]
 811015e:	687b      	ldr	r3, [r7, #4]
 8110160:	691b      	ldr	r3, [r3, #16]
 8110162:	431a      	orrs	r2, r3
 8110164:	687b      	ldr	r3, [r7, #4]
 8110166:	695b      	ldr	r3, [r3, #20]
 8110168:	431a      	orrs	r2, r3
 811016a:	687b      	ldr	r3, [r7, #4]
 811016c:	69db      	ldr	r3, [r3, #28]
 811016e:	4313      	orrs	r3, r2
 8110170:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8110172:	687b      	ldr	r3, [r7, #4]
 8110174:	681b      	ldr	r3, [r3, #0]
 8110176:	681a      	ldr	r2, [r3, #0]
 8110178:	4bc0      	ldr	r3, [pc, #768]	; (811047c <UART_SetConfig+0x330>)
 811017a:	4013      	ands	r3, r2
 811017c:	687a      	ldr	r2, [r7, #4]
 811017e:	6812      	ldr	r2, [r2, #0]
 8110180:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8110182:	430b      	orrs	r3, r1
 8110184:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8110186:	687b      	ldr	r3, [r7, #4]
 8110188:	681b      	ldr	r3, [r3, #0]
 811018a:	685b      	ldr	r3, [r3, #4]
 811018c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8110190:	687b      	ldr	r3, [r7, #4]
 8110192:	68da      	ldr	r2, [r3, #12]
 8110194:	687b      	ldr	r3, [r7, #4]
 8110196:	681b      	ldr	r3, [r3, #0]
 8110198:	430a      	orrs	r2, r1
 811019a:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 811019c:	687b      	ldr	r3, [r7, #4]
 811019e:	699b      	ldr	r3, [r3, #24]
 81101a0:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 81101a2:	687b      	ldr	r3, [r7, #4]
 81101a4:	681b      	ldr	r3, [r3, #0]
 81101a6:	4ab6      	ldr	r2, [pc, #728]	; (8110480 <UART_SetConfig+0x334>)
 81101a8:	4293      	cmp	r3, r2
 81101aa:	d004      	beq.n	81101b6 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 81101ac:	687b      	ldr	r3, [r7, #4]
 81101ae:	6a1b      	ldr	r3, [r3, #32]
 81101b0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 81101b2:	4313      	orrs	r3, r2
 81101b4:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 81101b6:	687b      	ldr	r3, [r7, #4]
 81101b8:	681b      	ldr	r3, [r3, #0]
 81101ba:	689b      	ldr	r3, [r3, #8]
 81101bc:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 81101c0:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 81101c4:	687a      	ldr	r2, [r7, #4]
 81101c6:	6812      	ldr	r2, [r2, #0]
 81101c8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 81101ca:	430b      	orrs	r3, r1
 81101cc:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 81101ce:	687b      	ldr	r3, [r7, #4]
 81101d0:	681b      	ldr	r3, [r3, #0]
 81101d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81101d4:	f023 010f 	bic.w	r1, r3, #15
 81101d8:	687b      	ldr	r3, [r7, #4]
 81101da:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 81101dc:	687b      	ldr	r3, [r7, #4]
 81101de:	681b      	ldr	r3, [r3, #0]
 81101e0:	430a      	orrs	r2, r1
 81101e2:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 81101e4:	687b      	ldr	r3, [r7, #4]
 81101e6:	681b      	ldr	r3, [r3, #0]
 81101e8:	4aa6      	ldr	r2, [pc, #664]	; (8110484 <UART_SetConfig+0x338>)
 81101ea:	4293      	cmp	r3, r2
 81101ec:	d176      	bne.n	81102dc <UART_SetConfig+0x190>
 81101ee:	4ba6      	ldr	r3, [pc, #664]	; (8110488 <UART_SetConfig+0x33c>)
 81101f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81101f2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 81101f6:	2b28      	cmp	r3, #40	; 0x28
 81101f8:	d86c      	bhi.n	81102d4 <UART_SetConfig+0x188>
 81101fa:	a201      	add	r2, pc, #4	; (adr r2, 8110200 <UART_SetConfig+0xb4>)
 81101fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8110200:	081102a5 	.word	0x081102a5
 8110204:	081102d5 	.word	0x081102d5
 8110208:	081102d5 	.word	0x081102d5
 811020c:	081102d5 	.word	0x081102d5
 8110210:	081102d5 	.word	0x081102d5
 8110214:	081102d5 	.word	0x081102d5
 8110218:	081102d5 	.word	0x081102d5
 811021c:	081102d5 	.word	0x081102d5
 8110220:	081102ad 	.word	0x081102ad
 8110224:	081102d5 	.word	0x081102d5
 8110228:	081102d5 	.word	0x081102d5
 811022c:	081102d5 	.word	0x081102d5
 8110230:	081102d5 	.word	0x081102d5
 8110234:	081102d5 	.word	0x081102d5
 8110238:	081102d5 	.word	0x081102d5
 811023c:	081102d5 	.word	0x081102d5
 8110240:	081102b5 	.word	0x081102b5
 8110244:	081102d5 	.word	0x081102d5
 8110248:	081102d5 	.word	0x081102d5
 811024c:	081102d5 	.word	0x081102d5
 8110250:	081102d5 	.word	0x081102d5
 8110254:	081102d5 	.word	0x081102d5
 8110258:	081102d5 	.word	0x081102d5
 811025c:	081102d5 	.word	0x081102d5
 8110260:	081102bd 	.word	0x081102bd
 8110264:	081102d5 	.word	0x081102d5
 8110268:	081102d5 	.word	0x081102d5
 811026c:	081102d5 	.word	0x081102d5
 8110270:	081102d5 	.word	0x081102d5
 8110274:	081102d5 	.word	0x081102d5
 8110278:	081102d5 	.word	0x081102d5
 811027c:	081102d5 	.word	0x081102d5
 8110280:	081102c5 	.word	0x081102c5
 8110284:	081102d5 	.word	0x081102d5
 8110288:	081102d5 	.word	0x081102d5
 811028c:	081102d5 	.word	0x081102d5
 8110290:	081102d5 	.word	0x081102d5
 8110294:	081102d5 	.word	0x081102d5
 8110298:	081102d5 	.word	0x081102d5
 811029c:	081102d5 	.word	0x081102d5
 81102a0:	081102cd 	.word	0x081102cd
 81102a4:	2301      	movs	r3, #1
 81102a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81102aa:	e220      	b.n	81106ee <UART_SetConfig+0x5a2>
 81102ac:	2304      	movs	r3, #4
 81102ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81102b2:	e21c      	b.n	81106ee <UART_SetConfig+0x5a2>
 81102b4:	2308      	movs	r3, #8
 81102b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81102ba:	e218      	b.n	81106ee <UART_SetConfig+0x5a2>
 81102bc:	2310      	movs	r3, #16
 81102be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81102c2:	e214      	b.n	81106ee <UART_SetConfig+0x5a2>
 81102c4:	2320      	movs	r3, #32
 81102c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81102ca:	e210      	b.n	81106ee <UART_SetConfig+0x5a2>
 81102cc:	2340      	movs	r3, #64	; 0x40
 81102ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81102d2:	e20c      	b.n	81106ee <UART_SetConfig+0x5a2>
 81102d4:	2380      	movs	r3, #128	; 0x80
 81102d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81102da:	e208      	b.n	81106ee <UART_SetConfig+0x5a2>
 81102dc:	687b      	ldr	r3, [r7, #4]
 81102de:	681b      	ldr	r3, [r3, #0]
 81102e0:	4a6a      	ldr	r2, [pc, #424]	; (811048c <UART_SetConfig+0x340>)
 81102e2:	4293      	cmp	r3, r2
 81102e4:	d130      	bne.n	8110348 <UART_SetConfig+0x1fc>
 81102e6:	4b68      	ldr	r3, [pc, #416]	; (8110488 <UART_SetConfig+0x33c>)
 81102e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81102ea:	f003 0307 	and.w	r3, r3, #7
 81102ee:	2b05      	cmp	r3, #5
 81102f0:	d826      	bhi.n	8110340 <UART_SetConfig+0x1f4>
 81102f2:	a201      	add	r2, pc, #4	; (adr r2, 81102f8 <UART_SetConfig+0x1ac>)
 81102f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81102f8:	08110311 	.word	0x08110311
 81102fc:	08110319 	.word	0x08110319
 8110300:	08110321 	.word	0x08110321
 8110304:	08110329 	.word	0x08110329
 8110308:	08110331 	.word	0x08110331
 811030c:	08110339 	.word	0x08110339
 8110310:	2300      	movs	r3, #0
 8110312:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8110316:	e1ea      	b.n	81106ee <UART_SetConfig+0x5a2>
 8110318:	2304      	movs	r3, #4
 811031a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 811031e:	e1e6      	b.n	81106ee <UART_SetConfig+0x5a2>
 8110320:	2308      	movs	r3, #8
 8110322:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8110326:	e1e2      	b.n	81106ee <UART_SetConfig+0x5a2>
 8110328:	2310      	movs	r3, #16
 811032a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 811032e:	e1de      	b.n	81106ee <UART_SetConfig+0x5a2>
 8110330:	2320      	movs	r3, #32
 8110332:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8110336:	e1da      	b.n	81106ee <UART_SetConfig+0x5a2>
 8110338:	2340      	movs	r3, #64	; 0x40
 811033a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 811033e:	e1d6      	b.n	81106ee <UART_SetConfig+0x5a2>
 8110340:	2380      	movs	r3, #128	; 0x80
 8110342:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8110346:	e1d2      	b.n	81106ee <UART_SetConfig+0x5a2>
 8110348:	687b      	ldr	r3, [r7, #4]
 811034a:	681b      	ldr	r3, [r3, #0]
 811034c:	4a50      	ldr	r2, [pc, #320]	; (8110490 <UART_SetConfig+0x344>)
 811034e:	4293      	cmp	r3, r2
 8110350:	d130      	bne.n	81103b4 <UART_SetConfig+0x268>
 8110352:	4b4d      	ldr	r3, [pc, #308]	; (8110488 <UART_SetConfig+0x33c>)
 8110354:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8110356:	f003 0307 	and.w	r3, r3, #7
 811035a:	2b05      	cmp	r3, #5
 811035c:	d826      	bhi.n	81103ac <UART_SetConfig+0x260>
 811035e:	a201      	add	r2, pc, #4	; (adr r2, 8110364 <UART_SetConfig+0x218>)
 8110360:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8110364:	0811037d 	.word	0x0811037d
 8110368:	08110385 	.word	0x08110385
 811036c:	0811038d 	.word	0x0811038d
 8110370:	08110395 	.word	0x08110395
 8110374:	0811039d 	.word	0x0811039d
 8110378:	081103a5 	.word	0x081103a5
 811037c:	2300      	movs	r3, #0
 811037e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8110382:	e1b4      	b.n	81106ee <UART_SetConfig+0x5a2>
 8110384:	2304      	movs	r3, #4
 8110386:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 811038a:	e1b0      	b.n	81106ee <UART_SetConfig+0x5a2>
 811038c:	2308      	movs	r3, #8
 811038e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8110392:	e1ac      	b.n	81106ee <UART_SetConfig+0x5a2>
 8110394:	2310      	movs	r3, #16
 8110396:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 811039a:	e1a8      	b.n	81106ee <UART_SetConfig+0x5a2>
 811039c:	2320      	movs	r3, #32
 811039e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81103a2:	e1a4      	b.n	81106ee <UART_SetConfig+0x5a2>
 81103a4:	2340      	movs	r3, #64	; 0x40
 81103a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81103aa:	e1a0      	b.n	81106ee <UART_SetConfig+0x5a2>
 81103ac:	2380      	movs	r3, #128	; 0x80
 81103ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81103b2:	e19c      	b.n	81106ee <UART_SetConfig+0x5a2>
 81103b4:	687b      	ldr	r3, [r7, #4]
 81103b6:	681b      	ldr	r3, [r3, #0]
 81103b8:	4a36      	ldr	r2, [pc, #216]	; (8110494 <UART_SetConfig+0x348>)
 81103ba:	4293      	cmp	r3, r2
 81103bc:	d130      	bne.n	8110420 <UART_SetConfig+0x2d4>
 81103be:	4b32      	ldr	r3, [pc, #200]	; (8110488 <UART_SetConfig+0x33c>)
 81103c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81103c2:	f003 0307 	and.w	r3, r3, #7
 81103c6:	2b05      	cmp	r3, #5
 81103c8:	d826      	bhi.n	8110418 <UART_SetConfig+0x2cc>
 81103ca:	a201      	add	r2, pc, #4	; (adr r2, 81103d0 <UART_SetConfig+0x284>)
 81103cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81103d0:	081103e9 	.word	0x081103e9
 81103d4:	081103f1 	.word	0x081103f1
 81103d8:	081103f9 	.word	0x081103f9
 81103dc:	08110401 	.word	0x08110401
 81103e0:	08110409 	.word	0x08110409
 81103e4:	08110411 	.word	0x08110411
 81103e8:	2300      	movs	r3, #0
 81103ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81103ee:	e17e      	b.n	81106ee <UART_SetConfig+0x5a2>
 81103f0:	2304      	movs	r3, #4
 81103f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81103f6:	e17a      	b.n	81106ee <UART_SetConfig+0x5a2>
 81103f8:	2308      	movs	r3, #8
 81103fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81103fe:	e176      	b.n	81106ee <UART_SetConfig+0x5a2>
 8110400:	2310      	movs	r3, #16
 8110402:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8110406:	e172      	b.n	81106ee <UART_SetConfig+0x5a2>
 8110408:	2320      	movs	r3, #32
 811040a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 811040e:	e16e      	b.n	81106ee <UART_SetConfig+0x5a2>
 8110410:	2340      	movs	r3, #64	; 0x40
 8110412:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8110416:	e16a      	b.n	81106ee <UART_SetConfig+0x5a2>
 8110418:	2380      	movs	r3, #128	; 0x80
 811041a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 811041e:	e166      	b.n	81106ee <UART_SetConfig+0x5a2>
 8110420:	687b      	ldr	r3, [r7, #4]
 8110422:	681b      	ldr	r3, [r3, #0]
 8110424:	4a1c      	ldr	r2, [pc, #112]	; (8110498 <UART_SetConfig+0x34c>)
 8110426:	4293      	cmp	r3, r2
 8110428:	d140      	bne.n	81104ac <UART_SetConfig+0x360>
 811042a:	4b17      	ldr	r3, [pc, #92]	; (8110488 <UART_SetConfig+0x33c>)
 811042c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 811042e:	f003 0307 	and.w	r3, r3, #7
 8110432:	2b05      	cmp	r3, #5
 8110434:	d836      	bhi.n	81104a4 <UART_SetConfig+0x358>
 8110436:	a201      	add	r2, pc, #4	; (adr r2, 811043c <UART_SetConfig+0x2f0>)
 8110438:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 811043c:	08110455 	.word	0x08110455
 8110440:	0811045d 	.word	0x0811045d
 8110444:	08110465 	.word	0x08110465
 8110448:	0811046d 	.word	0x0811046d
 811044c:	08110475 	.word	0x08110475
 8110450:	0811049d 	.word	0x0811049d
 8110454:	2300      	movs	r3, #0
 8110456:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 811045a:	e148      	b.n	81106ee <UART_SetConfig+0x5a2>
 811045c:	2304      	movs	r3, #4
 811045e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8110462:	e144      	b.n	81106ee <UART_SetConfig+0x5a2>
 8110464:	2308      	movs	r3, #8
 8110466:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 811046a:	e140      	b.n	81106ee <UART_SetConfig+0x5a2>
 811046c:	2310      	movs	r3, #16
 811046e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8110472:	e13c      	b.n	81106ee <UART_SetConfig+0x5a2>
 8110474:	2320      	movs	r3, #32
 8110476:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 811047a:	e138      	b.n	81106ee <UART_SetConfig+0x5a2>
 811047c:	cfff69f3 	.word	0xcfff69f3
 8110480:	58000c00 	.word	0x58000c00
 8110484:	40011000 	.word	0x40011000
 8110488:	58024400 	.word	0x58024400
 811048c:	40004400 	.word	0x40004400
 8110490:	40004800 	.word	0x40004800
 8110494:	40004c00 	.word	0x40004c00
 8110498:	40005000 	.word	0x40005000
 811049c:	2340      	movs	r3, #64	; 0x40
 811049e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81104a2:	e124      	b.n	81106ee <UART_SetConfig+0x5a2>
 81104a4:	2380      	movs	r3, #128	; 0x80
 81104a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81104aa:	e120      	b.n	81106ee <UART_SetConfig+0x5a2>
 81104ac:	687b      	ldr	r3, [r7, #4]
 81104ae:	681b      	ldr	r3, [r3, #0]
 81104b0:	4acc      	ldr	r2, [pc, #816]	; (81107e4 <UART_SetConfig+0x698>)
 81104b2:	4293      	cmp	r3, r2
 81104b4:	d176      	bne.n	81105a4 <UART_SetConfig+0x458>
 81104b6:	4bcc      	ldr	r3, [pc, #816]	; (81107e8 <UART_SetConfig+0x69c>)
 81104b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81104ba:	f003 0338 	and.w	r3, r3, #56	; 0x38
 81104be:	2b28      	cmp	r3, #40	; 0x28
 81104c0:	d86c      	bhi.n	811059c <UART_SetConfig+0x450>
 81104c2:	a201      	add	r2, pc, #4	; (adr r2, 81104c8 <UART_SetConfig+0x37c>)
 81104c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81104c8:	0811056d 	.word	0x0811056d
 81104cc:	0811059d 	.word	0x0811059d
 81104d0:	0811059d 	.word	0x0811059d
 81104d4:	0811059d 	.word	0x0811059d
 81104d8:	0811059d 	.word	0x0811059d
 81104dc:	0811059d 	.word	0x0811059d
 81104e0:	0811059d 	.word	0x0811059d
 81104e4:	0811059d 	.word	0x0811059d
 81104e8:	08110575 	.word	0x08110575
 81104ec:	0811059d 	.word	0x0811059d
 81104f0:	0811059d 	.word	0x0811059d
 81104f4:	0811059d 	.word	0x0811059d
 81104f8:	0811059d 	.word	0x0811059d
 81104fc:	0811059d 	.word	0x0811059d
 8110500:	0811059d 	.word	0x0811059d
 8110504:	0811059d 	.word	0x0811059d
 8110508:	0811057d 	.word	0x0811057d
 811050c:	0811059d 	.word	0x0811059d
 8110510:	0811059d 	.word	0x0811059d
 8110514:	0811059d 	.word	0x0811059d
 8110518:	0811059d 	.word	0x0811059d
 811051c:	0811059d 	.word	0x0811059d
 8110520:	0811059d 	.word	0x0811059d
 8110524:	0811059d 	.word	0x0811059d
 8110528:	08110585 	.word	0x08110585
 811052c:	0811059d 	.word	0x0811059d
 8110530:	0811059d 	.word	0x0811059d
 8110534:	0811059d 	.word	0x0811059d
 8110538:	0811059d 	.word	0x0811059d
 811053c:	0811059d 	.word	0x0811059d
 8110540:	0811059d 	.word	0x0811059d
 8110544:	0811059d 	.word	0x0811059d
 8110548:	0811058d 	.word	0x0811058d
 811054c:	0811059d 	.word	0x0811059d
 8110550:	0811059d 	.word	0x0811059d
 8110554:	0811059d 	.word	0x0811059d
 8110558:	0811059d 	.word	0x0811059d
 811055c:	0811059d 	.word	0x0811059d
 8110560:	0811059d 	.word	0x0811059d
 8110564:	0811059d 	.word	0x0811059d
 8110568:	08110595 	.word	0x08110595
 811056c:	2301      	movs	r3, #1
 811056e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8110572:	e0bc      	b.n	81106ee <UART_SetConfig+0x5a2>
 8110574:	2304      	movs	r3, #4
 8110576:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 811057a:	e0b8      	b.n	81106ee <UART_SetConfig+0x5a2>
 811057c:	2308      	movs	r3, #8
 811057e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8110582:	e0b4      	b.n	81106ee <UART_SetConfig+0x5a2>
 8110584:	2310      	movs	r3, #16
 8110586:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 811058a:	e0b0      	b.n	81106ee <UART_SetConfig+0x5a2>
 811058c:	2320      	movs	r3, #32
 811058e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8110592:	e0ac      	b.n	81106ee <UART_SetConfig+0x5a2>
 8110594:	2340      	movs	r3, #64	; 0x40
 8110596:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 811059a:	e0a8      	b.n	81106ee <UART_SetConfig+0x5a2>
 811059c:	2380      	movs	r3, #128	; 0x80
 811059e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81105a2:	e0a4      	b.n	81106ee <UART_SetConfig+0x5a2>
 81105a4:	687b      	ldr	r3, [r7, #4]
 81105a6:	681b      	ldr	r3, [r3, #0]
 81105a8:	4a90      	ldr	r2, [pc, #576]	; (81107ec <UART_SetConfig+0x6a0>)
 81105aa:	4293      	cmp	r3, r2
 81105ac:	d130      	bne.n	8110610 <UART_SetConfig+0x4c4>
 81105ae:	4b8e      	ldr	r3, [pc, #568]	; (81107e8 <UART_SetConfig+0x69c>)
 81105b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81105b2:	f003 0307 	and.w	r3, r3, #7
 81105b6:	2b05      	cmp	r3, #5
 81105b8:	d826      	bhi.n	8110608 <UART_SetConfig+0x4bc>
 81105ba:	a201      	add	r2, pc, #4	; (adr r2, 81105c0 <UART_SetConfig+0x474>)
 81105bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81105c0:	081105d9 	.word	0x081105d9
 81105c4:	081105e1 	.word	0x081105e1
 81105c8:	081105e9 	.word	0x081105e9
 81105cc:	081105f1 	.word	0x081105f1
 81105d0:	081105f9 	.word	0x081105f9
 81105d4:	08110601 	.word	0x08110601
 81105d8:	2300      	movs	r3, #0
 81105da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81105de:	e086      	b.n	81106ee <UART_SetConfig+0x5a2>
 81105e0:	2304      	movs	r3, #4
 81105e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81105e6:	e082      	b.n	81106ee <UART_SetConfig+0x5a2>
 81105e8:	2308      	movs	r3, #8
 81105ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81105ee:	e07e      	b.n	81106ee <UART_SetConfig+0x5a2>
 81105f0:	2310      	movs	r3, #16
 81105f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81105f6:	e07a      	b.n	81106ee <UART_SetConfig+0x5a2>
 81105f8:	2320      	movs	r3, #32
 81105fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81105fe:	e076      	b.n	81106ee <UART_SetConfig+0x5a2>
 8110600:	2340      	movs	r3, #64	; 0x40
 8110602:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8110606:	e072      	b.n	81106ee <UART_SetConfig+0x5a2>
 8110608:	2380      	movs	r3, #128	; 0x80
 811060a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 811060e:	e06e      	b.n	81106ee <UART_SetConfig+0x5a2>
 8110610:	687b      	ldr	r3, [r7, #4]
 8110612:	681b      	ldr	r3, [r3, #0]
 8110614:	4a76      	ldr	r2, [pc, #472]	; (81107f0 <UART_SetConfig+0x6a4>)
 8110616:	4293      	cmp	r3, r2
 8110618:	d130      	bne.n	811067c <UART_SetConfig+0x530>
 811061a:	4b73      	ldr	r3, [pc, #460]	; (81107e8 <UART_SetConfig+0x69c>)
 811061c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 811061e:	f003 0307 	and.w	r3, r3, #7
 8110622:	2b05      	cmp	r3, #5
 8110624:	d826      	bhi.n	8110674 <UART_SetConfig+0x528>
 8110626:	a201      	add	r2, pc, #4	; (adr r2, 811062c <UART_SetConfig+0x4e0>)
 8110628:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 811062c:	08110645 	.word	0x08110645
 8110630:	0811064d 	.word	0x0811064d
 8110634:	08110655 	.word	0x08110655
 8110638:	0811065d 	.word	0x0811065d
 811063c:	08110665 	.word	0x08110665
 8110640:	0811066d 	.word	0x0811066d
 8110644:	2300      	movs	r3, #0
 8110646:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 811064a:	e050      	b.n	81106ee <UART_SetConfig+0x5a2>
 811064c:	2304      	movs	r3, #4
 811064e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8110652:	e04c      	b.n	81106ee <UART_SetConfig+0x5a2>
 8110654:	2308      	movs	r3, #8
 8110656:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 811065a:	e048      	b.n	81106ee <UART_SetConfig+0x5a2>
 811065c:	2310      	movs	r3, #16
 811065e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8110662:	e044      	b.n	81106ee <UART_SetConfig+0x5a2>
 8110664:	2320      	movs	r3, #32
 8110666:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 811066a:	e040      	b.n	81106ee <UART_SetConfig+0x5a2>
 811066c:	2340      	movs	r3, #64	; 0x40
 811066e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8110672:	e03c      	b.n	81106ee <UART_SetConfig+0x5a2>
 8110674:	2380      	movs	r3, #128	; 0x80
 8110676:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 811067a:	e038      	b.n	81106ee <UART_SetConfig+0x5a2>
 811067c:	687b      	ldr	r3, [r7, #4]
 811067e:	681b      	ldr	r3, [r3, #0]
 8110680:	4a5c      	ldr	r2, [pc, #368]	; (81107f4 <UART_SetConfig+0x6a8>)
 8110682:	4293      	cmp	r3, r2
 8110684:	d130      	bne.n	81106e8 <UART_SetConfig+0x59c>
 8110686:	4b58      	ldr	r3, [pc, #352]	; (81107e8 <UART_SetConfig+0x69c>)
 8110688:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 811068a:	f003 0307 	and.w	r3, r3, #7
 811068e:	2b05      	cmp	r3, #5
 8110690:	d826      	bhi.n	81106e0 <UART_SetConfig+0x594>
 8110692:	a201      	add	r2, pc, #4	; (adr r2, 8110698 <UART_SetConfig+0x54c>)
 8110694:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8110698:	081106b1 	.word	0x081106b1
 811069c:	081106b9 	.word	0x081106b9
 81106a0:	081106c1 	.word	0x081106c1
 81106a4:	081106c9 	.word	0x081106c9
 81106a8:	081106d1 	.word	0x081106d1
 81106ac:	081106d9 	.word	0x081106d9
 81106b0:	2302      	movs	r3, #2
 81106b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81106b6:	e01a      	b.n	81106ee <UART_SetConfig+0x5a2>
 81106b8:	2304      	movs	r3, #4
 81106ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81106be:	e016      	b.n	81106ee <UART_SetConfig+0x5a2>
 81106c0:	2308      	movs	r3, #8
 81106c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81106c6:	e012      	b.n	81106ee <UART_SetConfig+0x5a2>
 81106c8:	2310      	movs	r3, #16
 81106ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81106ce:	e00e      	b.n	81106ee <UART_SetConfig+0x5a2>
 81106d0:	2320      	movs	r3, #32
 81106d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81106d6:	e00a      	b.n	81106ee <UART_SetConfig+0x5a2>
 81106d8:	2340      	movs	r3, #64	; 0x40
 81106da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81106de:	e006      	b.n	81106ee <UART_SetConfig+0x5a2>
 81106e0:	2380      	movs	r3, #128	; 0x80
 81106e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81106e6:	e002      	b.n	81106ee <UART_SetConfig+0x5a2>
 81106e8:	2380      	movs	r3, #128	; 0x80
 81106ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 81106ee:	687b      	ldr	r3, [r7, #4]
 81106f0:	681b      	ldr	r3, [r3, #0]
 81106f2:	4a40      	ldr	r2, [pc, #256]	; (81107f4 <UART_SetConfig+0x6a8>)
 81106f4:	4293      	cmp	r3, r2
 81106f6:	f040 80ef 	bne.w	81108d8 <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 81106fa:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 81106fe:	2b20      	cmp	r3, #32
 8110700:	dc46      	bgt.n	8110790 <UART_SetConfig+0x644>
 8110702:	2b02      	cmp	r3, #2
 8110704:	f2c0 8081 	blt.w	811080a <UART_SetConfig+0x6be>
 8110708:	3b02      	subs	r3, #2
 811070a:	2b1e      	cmp	r3, #30
 811070c:	d87d      	bhi.n	811080a <UART_SetConfig+0x6be>
 811070e:	a201      	add	r2, pc, #4	; (adr r2, 8110714 <UART_SetConfig+0x5c8>)
 8110710:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8110714:	08110797 	.word	0x08110797
 8110718:	0811080b 	.word	0x0811080b
 811071c:	0811079f 	.word	0x0811079f
 8110720:	0811080b 	.word	0x0811080b
 8110724:	0811080b 	.word	0x0811080b
 8110728:	0811080b 	.word	0x0811080b
 811072c:	081107af 	.word	0x081107af
 8110730:	0811080b 	.word	0x0811080b
 8110734:	0811080b 	.word	0x0811080b
 8110738:	0811080b 	.word	0x0811080b
 811073c:	0811080b 	.word	0x0811080b
 8110740:	0811080b 	.word	0x0811080b
 8110744:	0811080b 	.word	0x0811080b
 8110748:	0811080b 	.word	0x0811080b
 811074c:	081107bf 	.word	0x081107bf
 8110750:	0811080b 	.word	0x0811080b
 8110754:	0811080b 	.word	0x0811080b
 8110758:	0811080b 	.word	0x0811080b
 811075c:	0811080b 	.word	0x0811080b
 8110760:	0811080b 	.word	0x0811080b
 8110764:	0811080b 	.word	0x0811080b
 8110768:	0811080b 	.word	0x0811080b
 811076c:	0811080b 	.word	0x0811080b
 8110770:	0811080b 	.word	0x0811080b
 8110774:	0811080b 	.word	0x0811080b
 8110778:	0811080b 	.word	0x0811080b
 811077c:	0811080b 	.word	0x0811080b
 8110780:	0811080b 	.word	0x0811080b
 8110784:	0811080b 	.word	0x0811080b
 8110788:	0811080b 	.word	0x0811080b
 811078c:	081107fd 	.word	0x081107fd
 8110790:	2b40      	cmp	r3, #64	; 0x40
 8110792:	d036      	beq.n	8110802 <UART_SetConfig+0x6b6>
 8110794:	e039      	b.n	811080a <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8110796:	f7fa fec3 	bl	810b520 <HAL_RCCEx_GetD3PCLK1Freq>
 811079a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 811079c:	e03b      	b.n	8110816 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 811079e:	f107 0314 	add.w	r3, r7, #20
 81107a2:	4618      	mov	r0, r3
 81107a4:	f7fa fed2 	bl	810b54c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 81107a8:	69bb      	ldr	r3, [r7, #24]
 81107aa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 81107ac:	e033      	b.n	8110816 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 81107ae:	f107 0308 	add.w	r3, r7, #8
 81107b2:	4618      	mov	r0, r3
 81107b4:	f7fb f81e 	bl	810b7f4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 81107b8:	68fb      	ldr	r3, [r7, #12]
 81107ba:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 81107bc:	e02b      	b.n	8110816 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 81107be:	4b0a      	ldr	r3, [pc, #40]	; (81107e8 <UART_SetConfig+0x69c>)
 81107c0:	681b      	ldr	r3, [r3, #0]
 81107c2:	f003 0320 	and.w	r3, r3, #32
 81107c6:	2b00      	cmp	r3, #0
 81107c8:	d009      	beq.n	81107de <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 81107ca:	4b07      	ldr	r3, [pc, #28]	; (81107e8 <UART_SetConfig+0x69c>)
 81107cc:	681b      	ldr	r3, [r3, #0]
 81107ce:	08db      	lsrs	r3, r3, #3
 81107d0:	f003 0303 	and.w	r3, r3, #3
 81107d4:	4a08      	ldr	r2, [pc, #32]	; (81107f8 <UART_SetConfig+0x6ac>)
 81107d6:	fa22 f303 	lsr.w	r3, r2, r3
 81107da:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 81107dc:	e01b      	b.n	8110816 <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 81107de:	4b06      	ldr	r3, [pc, #24]	; (81107f8 <UART_SetConfig+0x6ac>)
 81107e0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 81107e2:	e018      	b.n	8110816 <UART_SetConfig+0x6ca>
 81107e4:	40011400 	.word	0x40011400
 81107e8:	58024400 	.word	0x58024400
 81107ec:	40007800 	.word	0x40007800
 81107f0:	40007c00 	.word	0x40007c00
 81107f4:	58000c00 	.word	0x58000c00
 81107f8:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 81107fc:	4bc4      	ldr	r3, [pc, #784]	; (8110b10 <UART_SetConfig+0x9c4>)
 81107fe:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8110800:	e009      	b.n	8110816 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8110802:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8110806:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8110808:	e005      	b.n	8110816 <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 811080a:	2300      	movs	r3, #0
 811080c:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 811080e:	2301      	movs	r3, #1
 8110810:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8110814:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8110816:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8110818:	2b00      	cmp	r3, #0
 811081a:	f000 81da 	beq.w	8110bd2 <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 811081e:	687b      	ldr	r3, [r7, #4]
 8110820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8110822:	4abc      	ldr	r2, [pc, #752]	; (8110b14 <UART_SetConfig+0x9c8>)
 8110824:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8110828:	461a      	mov	r2, r3
 811082a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 811082c:	fbb3 f3f2 	udiv	r3, r3, r2
 8110830:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8110832:	687b      	ldr	r3, [r7, #4]
 8110834:	685a      	ldr	r2, [r3, #4]
 8110836:	4613      	mov	r3, r2
 8110838:	005b      	lsls	r3, r3, #1
 811083a:	4413      	add	r3, r2
 811083c:	6a3a      	ldr	r2, [r7, #32]
 811083e:	429a      	cmp	r2, r3
 8110840:	d305      	bcc.n	811084e <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8110842:	687b      	ldr	r3, [r7, #4]
 8110844:	685b      	ldr	r3, [r3, #4]
 8110846:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8110848:	6a3a      	ldr	r2, [r7, #32]
 811084a:	429a      	cmp	r2, r3
 811084c:	d903      	bls.n	8110856 <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 811084e:	2301      	movs	r3, #1
 8110850:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8110854:	e1bd      	b.n	8110bd2 <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8110856:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8110858:	4618      	mov	r0, r3
 811085a:	f04f 0100 	mov.w	r1, #0
 811085e:	687b      	ldr	r3, [r7, #4]
 8110860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8110862:	4aac      	ldr	r2, [pc, #688]	; (8110b14 <UART_SetConfig+0x9c8>)
 8110864:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8110868:	b29a      	uxth	r2, r3
 811086a:	f04f 0300 	mov.w	r3, #0
 811086e:	f7f0 fa23 	bl	8100cb8 <__aeabi_uldivmod>
 8110872:	4602      	mov	r2, r0
 8110874:	460b      	mov	r3, r1
 8110876:	4610      	mov	r0, r2
 8110878:	4619      	mov	r1, r3
 811087a:	f04f 0200 	mov.w	r2, #0
 811087e:	f04f 0300 	mov.w	r3, #0
 8110882:	020b      	lsls	r3, r1, #8
 8110884:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8110888:	0202      	lsls	r2, r0, #8
 811088a:	6879      	ldr	r1, [r7, #4]
 811088c:	6849      	ldr	r1, [r1, #4]
 811088e:	0849      	lsrs	r1, r1, #1
 8110890:	4608      	mov	r0, r1
 8110892:	f04f 0100 	mov.w	r1, #0
 8110896:	1814      	adds	r4, r2, r0
 8110898:	eb43 0501 	adc.w	r5, r3, r1
 811089c:	687b      	ldr	r3, [r7, #4]
 811089e:	685b      	ldr	r3, [r3, #4]
 81108a0:	461a      	mov	r2, r3
 81108a2:	f04f 0300 	mov.w	r3, #0
 81108a6:	4620      	mov	r0, r4
 81108a8:	4629      	mov	r1, r5
 81108aa:	f7f0 fa05 	bl	8100cb8 <__aeabi_uldivmod>
 81108ae:	4602      	mov	r2, r0
 81108b0:	460b      	mov	r3, r1
 81108b2:	4613      	mov	r3, r2
 81108b4:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 81108b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81108b8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 81108bc:	d308      	bcc.n	81108d0 <UART_SetConfig+0x784>
 81108be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81108c0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 81108c4:	d204      	bcs.n	81108d0 <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 81108c6:	687b      	ldr	r3, [r7, #4]
 81108c8:	681b      	ldr	r3, [r3, #0]
 81108ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 81108cc:	60da      	str	r2, [r3, #12]
 81108ce:	e180      	b.n	8110bd2 <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 81108d0:	2301      	movs	r3, #1
 81108d2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 81108d6:	e17c      	b.n	8110bd2 <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 81108d8:	687b      	ldr	r3, [r7, #4]
 81108da:	69db      	ldr	r3, [r3, #28]
 81108dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 81108e0:	f040 80bf 	bne.w	8110a62 <UART_SetConfig+0x916>
  {
    switch (clocksource)
 81108e4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 81108e8:	2b20      	cmp	r3, #32
 81108ea:	dc49      	bgt.n	8110980 <UART_SetConfig+0x834>
 81108ec:	2b00      	cmp	r3, #0
 81108ee:	db7c      	blt.n	81109ea <UART_SetConfig+0x89e>
 81108f0:	2b20      	cmp	r3, #32
 81108f2:	d87a      	bhi.n	81109ea <UART_SetConfig+0x89e>
 81108f4:	a201      	add	r2, pc, #4	; (adr r2, 81108fc <UART_SetConfig+0x7b0>)
 81108f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81108fa:	bf00      	nop
 81108fc:	08110987 	.word	0x08110987
 8110900:	0811098f 	.word	0x0811098f
 8110904:	081109eb 	.word	0x081109eb
 8110908:	081109eb 	.word	0x081109eb
 811090c:	08110997 	.word	0x08110997
 8110910:	081109eb 	.word	0x081109eb
 8110914:	081109eb 	.word	0x081109eb
 8110918:	081109eb 	.word	0x081109eb
 811091c:	081109a7 	.word	0x081109a7
 8110920:	081109eb 	.word	0x081109eb
 8110924:	081109eb 	.word	0x081109eb
 8110928:	081109eb 	.word	0x081109eb
 811092c:	081109eb 	.word	0x081109eb
 8110930:	081109eb 	.word	0x081109eb
 8110934:	081109eb 	.word	0x081109eb
 8110938:	081109eb 	.word	0x081109eb
 811093c:	081109b7 	.word	0x081109b7
 8110940:	081109eb 	.word	0x081109eb
 8110944:	081109eb 	.word	0x081109eb
 8110948:	081109eb 	.word	0x081109eb
 811094c:	081109eb 	.word	0x081109eb
 8110950:	081109eb 	.word	0x081109eb
 8110954:	081109eb 	.word	0x081109eb
 8110958:	081109eb 	.word	0x081109eb
 811095c:	081109eb 	.word	0x081109eb
 8110960:	081109eb 	.word	0x081109eb
 8110964:	081109eb 	.word	0x081109eb
 8110968:	081109eb 	.word	0x081109eb
 811096c:	081109eb 	.word	0x081109eb
 8110970:	081109eb 	.word	0x081109eb
 8110974:	081109eb 	.word	0x081109eb
 8110978:	081109eb 	.word	0x081109eb
 811097c:	081109dd 	.word	0x081109dd
 8110980:	2b40      	cmp	r3, #64	; 0x40
 8110982:	d02e      	beq.n	81109e2 <UART_SetConfig+0x896>
 8110984:	e031      	b.n	81109ea <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8110986:	f7f9 f94b 	bl	8109c20 <HAL_RCC_GetPCLK1Freq>
 811098a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 811098c:	e033      	b.n	81109f6 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 811098e:	f7f9 f95d 	bl	8109c4c <HAL_RCC_GetPCLK2Freq>
 8110992:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8110994:	e02f      	b.n	81109f6 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8110996:	f107 0314 	add.w	r3, r7, #20
 811099a:	4618      	mov	r0, r3
 811099c:	f7fa fdd6 	bl	810b54c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 81109a0:	69bb      	ldr	r3, [r7, #24]
 81109a2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 81109a4:	e027      	b.n	81109f6 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 81109a6:	f107 0308 	add.w	r3, r7, #8
 81109aa:	4618      	mov	r0, r3
 81109ac:	f7fa ff22 	bl	810b7f4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 81109b0:	68fb      	ldr	r3, [r7, #12]
 81109b2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 81109b4:	e01f      	b.n	81109f6 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 81109b6:	4b58      	ldr	r3, [pc, #352]	; (8110b18 <UART_SetConfig+0x9cc>)
 81109b8:	681b      	ldr	r3, [r3, #0]
 81109ba:	f003 0320 	and.w	r3, r3, #32
 81109be:	2b00      	cmp	r3, #0
 81109c0:	d009      	beq.n	81109d6 <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 81109c2:	4b55      	ldr	r3, [pc, #340]	; (8110b18 <UART_SetConfig+0x9cc>)
 81109c4:	681b      	ldr	r3, [r3, #0]
 81109c6:	08db      	lsrs	r3, r3, #3
 81109c8:	f003 0303 	and.w	r3, r3, #3
 81109cc:	4a53      	ldr	r2, [pc, #332]	; (8110b1c <UART_SetConfig+0x9d0>)
 81109ce:	fa22 f303 	lsr.w	r3, r2, r3
 81109d2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 81109d4:	e00f      	b.n	81109f6 <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 81109d6:	4b51      	ldr	r3, [pc, #324]	; (8110b1c <UART_SetConfig+0x9d0>)
 81109d8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 81109da:	e00c      	b.n	81109f6 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 81109dc:	4b4c      	ldr	r3, [pc, #304]	; (8110b10 <UART_SetConfig+0x9c4>)
 81109de:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 81109e0:	e009      	b.n	81109f6 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 81109e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 81109e6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 81109e8:	e005      	b.n	81109f6 <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 81109ea:	2300      	movs	r3, #0
 81109ec:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 81109ee:	2301      	movs	r3, #1
 81109f0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 81109f4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 81109f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 81109f8:	2b00      	cmp	r3, #0
 81109fa:	f000 80ea 	beq.w	8110bd2 <UART_SetConfig+0xa86>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 81109fe:	687b      	ldr	r3, [r7, #4]
 8110a00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8110a02:	4a44      	ldr	r2, [pc, #272]	; (8110b14 <UART_SetConfig+0x9c8>)
 8110a04:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8110a08:	461a      	mov	r2, r3
 8110a0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8110a0c:	fbb3 f3f2 	udiv	r3, r3, r2
 8110a10:	005a      	lsls	r2, r3, #1
 8110a12:	687b      	ldr	r3, [r7, #4]
 8110a14:	685b      	ldr	r3, [r3, #4]
 8110a16:	085b      	lsrs	r3, r3, #1
 8110a18:	441a      	add	r2, r3
 8110a1a:	687b      	ldr	r3, [r7, #4]
 8110a1c:	685b      	ldr	r3, [r3, #4]
 8110a1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8110a22:	b29b      	uxth	r3, r3
 8110a24:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8110a26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8110a28:	2b0f      	cmp	r3, #15
 8110a2a:	d916      	bls.n	8110a5a <UART_SetConfig+0x90e>
 8110a2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8110a2e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8110a32:	d212      	bcs.n	8110a5a <UART_SetConfig+0x90e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8110a34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8110a36:	b29b      	uxth	r3, r3
 8110a38:	f023 030f 	bic.w	r3, r3, #15
 8110a3c:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8110a3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8110a40:	085b      	lsrs	r3, r3, #1
 8110a42:	b29b      	uxth	r3, r3
 8110a44:	f003 0307 	and.w	r3, r3, #7
 8110a48:	b29a      	uxth	r2, r3
 8110a4a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8110a4c:	4313      	orrs	r3, r2
 8110a4e:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 8110a50:	687b      	ldr	r3, [r7, #4]
 8110a52:	681b      	ldr	r3, [r3, #0]
 8110a54:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8110a56:	60da      	str	r2, [r3, #12]
 8110a58:	e0bb      	b.n	8110bd2 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 8110a5a:	2301      	movs	r3, #1
 8110a5c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8110a60:	e0b7      	b.n	8110bd2 <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 8110a62:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8110a66:	2b20      	cmp	r3, #32
 8110a68:	dc4a      	bgt.n	8110b00 <UART_SetConfig+0x9b4>
 8110a6a:	2b00      	cmp	r3, #0
 8110a6c:	f2c0 8086 	blt.w	8110b7c <UART_SetConfig+0xa30>
 8110a70:	2b20      	cmp	r3, #32
 8110a72:	f200 8083 	bhi.w	8110b7c <UART_SetConfig+0xa30>
 8110a76:	a201      	add	r2, pc, #4	; (adr r2, 8110a7c <UART_SetConfig+0x930>)
 8110a78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8110a7c:	08110b07 	.word	0x08110b07
 8110a80:	08110b21 	.word	0x08110b21
 8110a84:	08110b7d 	.word	0x08110b7d
 8110a88:	08110b7d 	.word	0x08110b7d
 8110a8c:	08110b29 	.word	0x08110b29
 8110a90:	08110b7d 	.word	0x08110b7d
 8110a94:	08110b7d 	.word	0x08110b7d
 8110a98:	08110b7d 	.word	0x08110b7d
 8110a9c:	08110b39 	.word	0x08110b39
 8110aa0:	08110b7d 	.word	0x08110b7d
 8110aa4:	08110b7d 	.word	0x08110b7d
 8110aa8:	08110b7d 	.word	0x08110b7d
 8110aac:	08110b7d 	.word	0x08110b7d
 8110ab0:	08110b7d 	.word	0x08110b7d
 8110ab4:	08110b7d 	.word	0x08110b7d
 8110ab8:	08110b7d 	.word	0x08110b7d
 8110abc:	08110b49 	.word	0x08110b49
 8110ac0:	08110b7d 	.word	0x08110b7d
 8110ac4:	08110b7d 	.word	0x08110b7d
 8110ac8:	08110b7d 	.word	0x08110b7d
 8110acc:	08110b7d 	.word	0x08110b7d
 8110ad0:	08110b7d 	.word	0x08110b7d
 8110ad4:	08110b7d 	.word	0x08110b7d
 8110ad8:	08110b7d 	.word	0x08110b7d
 8110adc:	08110b7d 	.word	0x08110b7d
 8110ae0:	08110b7d 	.word	0x08110b7d
 8110ae4:	08110b7d 	.word	0x08110b7d
 8110ae8:	08110b7d 	.word	0x08110b7d
 8110aec:	08110b7d 	.word	0x08110b7d
 8110af0:	08110b7d 	.word	0x08110b7d
 8110af4:	08110b7d 	.word	0x08110b7d
 8110af8:	08110b7d 	.word	0x08110b7d
 8110afc:	08110b6f 	.word	0x08110b6f
 8110b00:	2b40      	cmp	r3, #64	; 0x40
 8110b02:	d037      	beq.n	8110b74 <UART_SetConfig+0xa28>
 8110b04:	e03a      	b.n	8110b7c <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8110b06:	f7f9 f88b 	bl	8109c20 <HAL_RCC_GetPCLK1Freq>
 8110b0a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8110b0c:	e03c      	b.n	8110b88 <UART_SetConfig+0xa3c>
 8110b0e:	bf00      	nop
 8110b10:	003d0900 	.word	0x003d0900
 8110b14:	0811ba2c 	.word	0x0811ba2c
 8110b18:	58024400 	.word	0x58024400
 8110b1c:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8110b20:	f7f9 f894 	bl	8109c4c <HAL_RCC_GetPCLK2Freq>
 8110b24:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8110b26:	e02f      	b.n	8110b88 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8110b28:	f107 0314 	add.w	r3, r7, #20
 8110b2c:	4618      	mov	r0, r3
 8110b2e:	f7fa fd0d 	bl	810b54c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8110b32:	69bb      	ldr	r3, [r7, #24]
 8110b34:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8110b36:	e027      	b.n	8110b88 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8110b38:	f107 0308 	add.w	r3, r7, #8
 8110b3c:	4618      	mov	r0, r3
 8110b3e:	f7fa fe59 	bl	810b7f4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8110b42:	68fb      	ldr	r3, [r7, #12]
 8110b44:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8110b46:	e01f      	b.n	8110b88 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8110b48:	4b2c      	ldr	r3, [pc, #176]	; (8110bfc <UART_SetConfig+0xab0>)
 8110b4a:	681b      	ldr	r3, [r3, #0]
 8110b4c:	f003 0320 	and.w	r3, r3, #32
 8110b50:	2b00      	cmp	r3, #0
 8110b52:	d009      	beq.n	8110b68 <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8110b54:	4b29      	ldr	r3, [pc, #164]	; (8110bfc <UART_SetConfig+0xab0>)
 8110b56:	681b      	ldr	r3, [r3, #0]
 8110b58:	08db      	lsrs	r3, r3, #3
 8110b5a:	f003 0303 	and.w	r3, r3, #3
 8110b5e:	4a28      	ldr	r2, [pc, #160]	; (8110c00 <UART_SetConfig+0xab4>)
 8110b60:	fa22 f303 	lsr.w	r3, r2, r3
 8110b64:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8110b66:	e00f      	b.n	8110b88 <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 8110b68:	4b25      	ldr	r3, [pc, #148]	; (8110c00 <UART_SetConfig+0xab4>)
 8110b6a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8110b6c:	e00c      	b.n	8110b88 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8110b6e:	4b25      	ldr	r3, [pc, #148]	; (8110c04 <UART_SetConfig+0xab8>)
 8110b70:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8110b72:	e009      	b.n	8110b88 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8110b74:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8110b78:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8110b7a:	e005      	b.n	8110b88 <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 8110b7c:	2300      	movs	r3, #0
 8110b7e:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8110b80:	2301      	movs	r3, #1
 8110b82:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8110b86:	bf00      	nop
    }

    if (pclk != 0U)
 8110b88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8110b8a:	2b00      	cmp	r3, #0
 8110b8c:	d021      	beq.n	8110bd2 <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8110b8e:	687b      	ldr	r3, [r7, #4]
 8110b90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8110b92:	4a1d      	ldr	r2, [pc, #116]	; (8110c08 <UART_SetConfig+0xabc>)
 8110b94:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8110b98:	461a      	mov	r2, r3
 8110b9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8110b9c:	fbb3 f2f2 	udiv	r2, r3, r2
 8110ba0:	687b      	ldr	r3, [r7, #4]
 8110ba2:	685b      	ldr	r3, [r3, #4]
 8110ba4:	085b      	lsrs	r3, r3, #1
 8110ba6:	441a      	add	r2, r3
 8110ba8:	687b      	ldr	r3, [r7, #4]
 8110baa:	685b      	ldr	r3, [r3, #4]
 8110bac:	fbb2 f3f3 	udiv	r3, r2, r3
 8110bb0:	b29b      	uxth	r3, r3
 8110bb2:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8110bb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8110bb6:	2b0f      	cmp	r3, #15
 8110bb8:	d908      	bls.n	8110bcc <UART_SetConfig+0xa80>
 8110bba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8110bbc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8110bc0:	d204      	bcs.n	8110bcc <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = usartdiv;
 8110bc2:	687b      	ldr	r3, [r7, #4]
 8110bc4:	681b      	ldr	r3, [r3, #0]
 8110bc6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8110bc8:	60da      	str	r2, [r3, #12]
 8110bca:	e002      	b.n	8110bd2 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 8110bcc:	2301      	movs	r3, #1
 8110bce:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8110bd2:	687b      	ldr	r3, [r7, #4]
 8110bd4:	2201      	movs	r2, #1
 8110bd6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8110bda:	687b      	ldr	r3, [r7, #4]
 8110bdc:	2201      	movs	r2, #1
 8110bde:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8110be2:	687b      	ldr	r3, [r7, #4]
 8110be4:	2200      	movs	r2, #0
 8110be6:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8110be8:	687b      	ldr	r3, [r7, #4]
 8110bea:	2200      	movs	r2, #0
 8110bec:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8110bee:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 8110bf2:	4618      	mov	r0, r3
 8110bf4:	3738      	adds	r7, #56	; 0x38
 8110bf6:	46bd      	mov	sp, r7
 8110bf8:	bdb0      	pop	{r4, r5, r7, pc}
 8110bfa:	bf00      	nop
 8110bfc:	58024400 	.word	0x58024400
 8110c00:	03d09000 	.word	0x03d09000
 8110c04:	003d0900 	.word	0x003d0900
 8110c08:	0811ba2c 	.word	0x0811ba2c

08110c0c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8110c0c:	b480      	push	{r7}
 8110c0e:	b083      	sub	sp, #12
 8110c10:	af00      	add	r7, sp, #0
 8110c12:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8110c14:	687b      	ldr	r3, [r7, #4]
 8110c16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8110c18:	f003 0301 	and.w	r3, r3, #1
 8110c1c:	2b00      	cmp	r3, #0
 8110c1e:	d00a      	beq.n	8110c36 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8110c20:	687b      	ldr	r3, [r7, #4]
 8110c22:	681b      	ldr	r3, [r3, #0]
 8110c24:	685b      	ldr	r3, [r3, #4]
 8110c26:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8110c2a:	687b      	ldr	r3, [r7, #4]
 8110c2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8110c2e:	687b      	ldr	r3, [r7, #4]
 8110c30:	681b      	ldr	r3, [r3, #0]
 8110c32:	430a      	orrs	r2, r1
 8110c34:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8110c36:	687b      	ldr	r3, [r7, #4]
 8110c38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8110c3a:	f003 0302 	and.w	r3, r3, #2
 8110c3e:	2b00      	cmp	r3, #0
 8110c40:	d00a      	beq.n	8110c58 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8110c42:	687b      	ldr	r3, [r7, #4]
 8110c44:	681b      	ldr	r3, [r3, #0]
 8110c46:	685b      	ldr	r3, [r3, #4]
 8110c48:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8110c4c:	687b      	ldr	r3, [r7, #4]
 8110c4e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8110c50:	687b      	ldr	r3, [r7, #4]
 8110c52:	681b      	ldr	r3, [r3, #0]
 8110c54:	430a      	orrs	r2, r1
 8110c56:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8110c58:	687b      	ldr	r3, [r7, #4]
 8110c5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8110c5c:	f003 0304 	and.w	r3, r3, #4
 8110c60:	2b00      	cmp	r3, #0
 8110c62:	d00a      	beq.n	8110c7a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8110c64:	687b      	ldr	r3, [r7, #4]
 8110c66:	681b      	ldr	r3, [r3, #0]
 8110c68:	685b      	ldr	r3, [r3, #4]
 8110c6a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8110c6e:	687b      	ldr	r3, [r7, #4]
 8110c70:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8110c72:	687b      	ldr	r3, [r7, #4]
 8110c74:	681b      	ldr	r3, [r3, #0]
 8110c76:	430a      	orrs	r2, r1
 8110c78:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8110c7a:	687b      	ldr	r3, [r7, #4]
 8110c7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8110c7e:	f003 0308 	and.w	r3, r3, #8
 8110c82:	2b00      	cmp	r3, #0
 8110c84:	d00a      	beq.n	8110c9c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8110c86:	687b      	ldr	r3, [r7, #4]
 8110c88:	681b      	ldr	r3, [r3, #0]
 8110c8a:	685b      	ldr	r3, [r3, #4]
 8110c8c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8110c90:	687b      	ldr	r3, [r7, #4]
 8110c92:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8110c94:	687b      	ldr	r3, [r7, #4]
 8110c96:	681b      	ldr	r3, [r3, #0]
 8110c98:	430a      	orrs	r2, r1
 8110c9a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8110c9c:	687b      	ldr	r3, [r7, #4]
 8110c9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8110ca0:	f003 0310 	and.w	r3, r3, #16
 8110ca4:	2b00      	cmp	r3, #0
 8110ca6:	d00a      	beq.n	8110cbe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8110ca8:	687b      	ldr	r3, [r7, #4]
 8110caa:	681b      	ldr	r3, [r3, #0]
 8110cac:	689b      	ldr	r3, [r3, #8]
 8110cae:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8110cb2:	687b      	ldr	r3, [r7, #4]
 8110cb4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8110cb6:	687b      	ldr	r3, [r7, #4]
 8110cb8:	681b      	ldr	r3, [r3, #0]
 8110cba:	430a      	orrs	r2, r1
 8110cbc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8110cbe:	687b      	ldr	r3, [r7, #4]
 8110cc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8110cc2:	f003 0320 	and.w	r3, r3, #32
 8110cc6:	2b00      	cmp	r3, #0
 8110cc8:	d00a      	beq.n	8110ce0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8110cca:	687b      	ldr	r3, [r7, #4]
 8110ccc:	681b      	ldr	r3, [r3, #0]
 8110cce:	689b      	ldr	r3, [r3, #8]
 8110cd0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8110cd4:	687b      	ldr	r3, [r7, #4]
 8110cd6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8110cd8:	687b      	ldr	r3, [r7, #4]
 8110cda:	681b      	ldr	r3, [r3, #0]
 8110cdc:	430a      	orrs	r2, r1
 8110cde:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8110ce0:	687b      	ldr	r3, [r7, #4]
 8110ce2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8110ce4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8110ce8:	2b00      	cmp	r3, #0
 8110cea:	d01a      	beq.n	8110d22 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8110cec:	687b      	ldr	r3, [r7, #4]
 8110cee:	681b      	ldr	r3, [r3, #0]
 8110cf0:	685b      	ldr	r3, [r3, #4]
 8110cf2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8110cf6:	687b      	ldr	r3, [r7, #4]
 8110cf8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8110cfa:	687b      	ldr	r3, [r7, #4]
 8110cfc:	681b      	ldr	r3, [r3, #0]
 8110cfe:	430a      	orrs	r2, r1
 8110d00:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8110d02:	687b      	ldr	r3, [r7, #4]
 8110d04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8110d06:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8110d0a:	d10a      	bne.n	8110d22 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8110d0c:	687b      	ldr	r3, [r7, #4]
 8110d0e:	681b      	ldr	r3, [r3, #0]
 8110d10:	685b      	ldr	r3, [r3, #4]
 8110d12:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8110d16:	687b      	ldr	r3, [r7, #4]
 8110d18:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8110d1a:	687b      	ldr	r3, [r7, #4]
 8110d1c:	681b      	ldr	r3, [r3, #0]
 8110d1e:	430a      	orrs	r2, r1
 8110d20:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8110d22:	687b      	ldr	r3, [r7, #4]
 8110d24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8110d26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8110d2a:	2b00      	cmp	r3, #0
 8110d2c:	d00a      	beq.n	8110d44 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8110d2e:	687b      	ldr	r3, [r7, #4]
 8110d30:	681b      	ldr	r3, [r3, #0]
 8110d32:	685b      	ldr	r3, [r3, #4]
 8110d34:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8110d38:	687b      	ldr	r3, [r7, #4]
 8110d3a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8110d3c:	687b      	ldr	r3, [r7, #4]
 8110d3e:	681b      	ldr	r3, [r3, #0]
 8110d40:	430a      	orrs	r2, r1
 8110d42:	605a      	str	r2, [r3, #4]
  }
}
 8110d44:	bf00      	nop
 8110d46:	370c      	adds	r7, #12
 8110d48:	46bd      	mov	sp, r7
 8110d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8110d4e:	4770      	bx	lr

08110d50 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8110d50:	b580      	push	{r7, lr}
 8110d52:	b086      	sub	sp, #24
 8110d54:	af02      	add	r7, sp, #8
 8110d56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8110d58:	687b      	ldr	r3, [r7, #4]
 8110d5a:	2200      	movs	r2, #0
 8110d5c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8110d60:	f7f1 fe92 	bl	8102a88 <HAL_GetTick>
 8110d64:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8110d66:	687b      	ldr	r3, [r7, #4]
 8110d68:	681b      	ldr	r3, [r3, #0]
 8110d6a:	681b      	ldr	r3, [r3, #0]
 8110d6c:	f003 0308 	and.w	r3, r3, #8
 8110d70:	2b08      	cmp	r3, #8
 8110d72:	d10e      	bne.n	8110d92 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8110d74:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8110d78:	9300      	str	r3, [sp, #0]
 8110d7a:	68fb      	ldr	r3, [r7, #12]
 8110d7c:	2200      	movs	r2, #0
 8110d7e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8110d82:	6878      	ldr	r0, [r7, #4]
 8110d84:	f000 f82f 	bl	8110de6 <UART_WaitOnFlagUntilTimeout>
 8110d88:	4603      	mov	r3, r0
 8110d8a:	2b00      	cmp	r3, #0
 8110d8c:	d001      	beq.n	8110d92 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8110d8e:	2303      	movs	r3, #3
 8110d90:	e025      	b.n	8110dde <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8110d92:	687b      	ldr	r3, [r7, #4]
 8110d94:	681b      	ldr	r3, [r3, #0]
 8110d96:	681b      	ldr	r3, [r3, #0]
 8110d98:	f003 0304 	and.w	r3, r3, #4
 8110d9c:	2b04      	cmp	r3, #4
 8110d9e:	d10e      	bne.n	8110dbe <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8110da0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8110da4:	9300      	str	r3, [sp, #0]
 8110da6:	68fb      	ldr	r3, [r7, #12]
 8110da8:	2200      	movs	r2, #0
 8110daa:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8110dae:	6878      	ldr	r0, [r7, #4]
 8110db0:	f000 f819 	bl	8110de6 <UART_WaitOnFlagUntilTimeout>
 8110db4:	4603      	mov	r3, r0
 8110db6:	2b00      	cmp	r3, #0
 8110db8:	d001      	beq.n	8110dbe <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8110dba:	2303      	movs	r3, #3
 8110dbc:	e00f      	b.n	8110dde <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8110dbe:	687b      	ldr	r3, [r7, #4]
 8110dc0:	2220      	movs	r2, #32
 8110dc2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8110dc6:	687b      	ldr	r3, [r7, #4]
 8110dc8:	2220      	movs	r2, #32
 8110dca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8110dce:	687b      	ldr	r3, [r7, #4]
 8110dd0:	2200      	movs	r2, #0
 8110dd2:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8110dd4:	687b      	ldr	r3, [r7, #4]
 8110dd6:	2200      	movs	r2, #0
 8110dd8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8110ddc:	2300      	movs	r3, #0
}
 8110dde:	4618      	mov	r0, r3
 8110de0:	3710      	adds	r7, #16
 8110de2:	46bd      	mov	sp, r7
 8110de4:	bd80      	pop	{r7, pc}

08110de6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8110de6:	b580      	push	{r7, lr}
 8110de8:	b084      	sub	sp, #16
 8110dea:	af00      	add	r7, sp, #0
 8110dec:	60f8      	str	r0, [r7, #12]
 8110dee:	60b9      	str	r1, [r7, #8]
 8110df0:	603b      	str	r3, [r7, #0]
 8110df2:	4613      	mov	r3, r2
 8110df4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8110df6:	e062      	b.n	8110ebe <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8110df8:	69bb      	ldr	r3, [r7, #24]
 8110dfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8110dfe:	d05e      	beq.n	8110ebe <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8110e00:	f7f1 fe42 	bl	8102a88 <HAL_GetTick>
 8110e04:	4602      	mov	r2, r0
 8110e06:	683b      	ldr	r3, [r7, #0]
 8110e08:	1ad3      	subs	r3, r2, r3
 8110e0a:	69ba      	ldr	r2, [r7, #24]
 8110e0c:	429a      	cmp	r2, r3
 8110e0e:	d302      	bcc.n	8110e16 <UART_WaitOnFlagUntilTimeout+0x30>
 8110e10:	69bb      	ldr	r3, [r7, #24]
 8110e12:	2b00      	cmp	r3, #0
 8110e14:	d11d      	bne.n	8110e52 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8110e16:	68fb      	ldr	r3, [r7, #12]
 8110e18:	681b      	ldr	r3, [r3, #0]
 8110e1a:	681a      	ldr	r2, [r3, #0]
 8110e1c:	68fb      	ldr	r3, [r7, #12]
 8110e1e:	681b      	ldr	r3, [r3, #0]
 8110e20:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8110e24:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8110e26:	68fb      	ldr	r3, [r7, #12]
 8110e28:	681b      	ldr	r3, [r3, #0]
 8110e2a:	689a      	ldr	r2, [r3, #8]
 8110e2c:	68fb      	ldr	r3, [r7, #12]
 8110e2e:	681b      	ldr	r3, [r3, #0]
 8110e30:	f022 0201 	bic.w	r2, r2, #1
 8110e34:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8110e36:	68fb      	ldr	r3, [r7, #12]
 8110e38:	2220      	movs	r2, #32
 8110e3a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8110e3e:	68fb      	ldr	r3, [r7, #12]
 8110e40:	2220      	movs	r2, #32
 8110e42:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8110e46:	68fb      	ldr	r3, [r7, #12]
 8110e48:	2200      	movs	r2, #0
 8110e4a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8110e4e:	2303      	movs	r3, #3
 8110e50:	e045      	b.n	8110ede <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8110e52:	68fb      	ldr	r3, [r7, #12]
 8110e54:	681b      	ldr	r3, [r3, #0]
 8110e56:	681b      	ldr	r3, [r3, #0]
 8110e58:	f003 0304 	and.w	r3, r3, #4
 8110e5c:	2b00      	cmp	r3, #0
 8110e5e:	d02e      	beq.n	8110ebe <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8110e60:	68fb      	ldr	r3, [r7, #12]
 8110e62:	681b      	ldr	r3, [r3, #0]
 8110e64:	69db      	ldr	r3, [r3, #28]
 8110e66:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8110e6a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8110e6e:	d126      	bne.n	8110ebe <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8110e70:	68fb      	ldr	r3, [r7, #12]
 8110e72:	681b      	ldr	r3, [r3, #0]
 8110e74:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8110e78:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8110e7a:	68fb      	ldr	r3, [r7, #12]
 8110e7c:	681b      	ldr	r3, [r3, #0]
 8110e7e:	681a      	ldr	r2, [r3, #0]
 8110e80:	68fb      	ldr	r3, [r7, #12]
 8110e82:	681b      	ldr	r3, [r3, #0]
 8110e84:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8110e88:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8110e8a:	68fb      	ldr	r3, [r7, #12]
 8110e8c:	681b      	ldr	r3, [r3, #0]
 8110e8e:	689a      	ldr	r2, [r3, #8]
 8110e90:	68fb      	ldr	r3, [r7, #12]
 8110e92:	681b      	ldr	r3, [r3, #0]
 8110e94:	f022 0201 	bic.w	r2, r2, #1
 8110e98:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8110e9a:	68fb      	ldr	r3, [r7, #12]
 8110e9c:	2220      	movs	r2, #32
 8110e9e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8110ea2:	68fb      	ldr	r3, [r7, #12]
 8110ea4:	2220      	movs	r2, #32
 8110ea6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8110eaa:	68fb      	ldr	r3, [r7, #12]
 8110eac:	2220      	movs	r2, #32
 8110eae:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8110eb2:	68fb      	ldr	r3, [r7, #12]
 8110eb4:	2200      	movs	r2, #0
 8110eb6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8110eba:	2303      	movs	r3, #3
 8110ebc:	e00f      	b.n	8110ede <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8110ebe:	68fb      	ldr	r3, [r7, #12]
 8110ec0:	681b      	ldr	r3, [r3, #0]
 8110ec2:	69da      	ldr	r2, [r3, #28]
 8110ec4:	68bb      	ldr	r3, [r7, #8]
 8110ec6:	4013      	ands	r3, r2
 8110ec8:	68ba      	ldr	r2, [r7, #8]
 8110eca:	429a      	cmp	r2, r3
 8110ecc:	bf0c      	ite	eq
 8110ece:	2301      	moveq	r3, #1
 8110ed0:	2300      	movne	r3, #0
 8110ed2:	b2db      	uxtb	r3, r3
 8110ed4:	461a      	mov	r2, r3
 8110ed6:	79fb      	ldrb	r3, [r7, #7]
 8110ed8:	429a      	cmp	r2, r3
 8110eda:	d08d      	beq.n	8110df8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8110edc:	2300      	movs	r3, #0
}
 8110ede:	4618      	mov	r0, r3
 8110ee0:	3710      	adds	r7, #16
 8110ee2:	46bd      	mov	sp, r7
 8110ee4:	bd80      	pop	{r7, pc}
	...

08110ee8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8110ee8:	b580      	push	{r7, lr}
 8110eea:	b084      	sub	sp, #16
 8110eec:	af00      	add	r7, sp, #0
 8110eee:	60f8      	str	r0, [r7, #12]
 8110ef0:	60b9      	str	r1, [r7, #8]
 8110ef2:	4613      	mov	r3, r2
 8110ef4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8110ef6:	68fb      	ldr	r3, [r7, #12]
 8110ef8:	68ba      	ldr	r2, [r7, #8]
 8110efa:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 8110efc:	68fb      	ldr	r3, [r7, #12]
 8110efe:	88fa      	ldrh	r2, [r7, #6]
 8110f00:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8110f04:	68fb      	ldr	r3, [r7, #12]
 8110f06:	2200      	movs	r2, #0
 8110f08:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8110f0c:	68fb      	ldr	r3, [r7, #12]
 8110f0e:	2222      	movs	r2, #34	; 0x22
 8110f10:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  if (huart->hdmarx != NULL)
 8110f14:	68fb      	ldr	r3, [r7, #12]
 8110f16:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8110f18:	2b00      	cmp	r3, #0
 8110f1a:	d02c      	beq.n	8110f76 <UART_Start_Receive_DMA+0x8e>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8110f1c:	68fb      	ldr	r3, [r7, #12]
 8110f1e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8110f20:	4a25      	ldr	r2, [pc, #148]	; (8110fb8 <UART_Start_Receive_DMA+0xd0>)
 8110f22:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8110f24:	68fb      	ldr	r3, [r7, #12]
 8110f26:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8110f28:	4a24      	ldr	r2, [pc, #144]	; (8110fbc <UART_Start_Receive_DMA+0xd4>)
 8110f2a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8110f2c:	68fb      	ldr	r3, [r7, #12]
 8110f2e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8110f30:	4a23      	ldr	r2, [pc, #140]	; (8110fc0 <UART_Start_Receive_DMA+0xd8>)
 8110f32:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8110f34:	68fb      	ldr	r3, [r7, #12]
 8110f36:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8110f38:	2200      	movs	r2, #0
 8110f3a:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8110f3c:	68fb      	ldr	r3, [r7, #12]
 8110f3e:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 8110f40:	68fb      	ldr	r3, [r7, #12]
 8110f42:	681b      	ldr	r3, [r3, #0]
 8110f44:	3324      	adds	r3, #36	; 0x24
 8110f46:	4619      	mov	r1, r3
 8110f48:	68fb      	ldr	r3, [r7, #12]
 8110f4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8110f4c:	461a      	mov	r2, r3
 8110f4e:	88fb      	ldrh	r3, [r7, #6]
 8110f50:	f7f3 fd7e 	bl	8104a50 <HAL_DMA_Start_IT>
 8110f54:	4603      	mov	r3, r0
 8110f56:	2b00      	cmp	r3, #0
 8110f58:	d00d      	beq.n	8110f76 <UART_Start_Receive_DMA+0x8e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8110f5a:	68fb      	ldr	r3, [r7, #12]
 8110f5c:	2210      	movs	r2, #16
 8110f5e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8110f62:	68fb      	ldr	r3, [r7, #12]
 8110f64:	2200      	movs	r2, #0
 8110f66:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Restore huart->gState to ready */
      huart->gState = HAL_UART_STATE_READY;
 8110f6a:	68fb      	ldr	r3, [r7, #12]
 8110f6c:	2220      	movs	r2, #32
 8110f6e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      return HAL_ERROR;
 8110f72:	2301      	movs	r3, #1
 8110f74:	e01c      	b.n	8110fb0 <UART_Start_Receive_DMA+0xc8>
    }
  }
  __HAL_UNLOCK(huart);
 8110f76:	68fb      	ldr	r3, [r7, #12]
 8110f78:	2200      	movs	r2, #0
 8110f7a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8110f7e:	68fb      	ldr	r3, [r7, #12]
 8110f80:	681b      	ldr	r3, [r3, #0]
 8110f82:	681a      	ldr	r2, [r3, #0]
 8110f84:	68fb      	ldr	r3, [r7, #12]
 8110f86:	681b      	ldr	r3, [r3, #0]
 8110f88:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8110f8c:	601a      	str	r2, [r3, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8110f8e:	68fb      	ldr	r3, [r7, #12]
 8110f90:	681b      	ldr	r3, [r3, #0]
 8110f92:	689a      	ldr	r2, [r3, #8]
 8110f94:	68fb      	ldr	r3, [r7, #12]
 8110f96:	681b      	ldr	r3, [r3, #0]
 8110f98:	f042 0201 	orr.w	r2, r2, #1
 8110f9c:	609a      	str	r2, [r3, #8]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8110f9e:	68fb      	ldr	r3, [r7, #12]
 8110fa0:	681b      	ldr	r3, [r3, #0]
 8110fa2:	689a      	ldr	r2, [r3, #8]
 8110fa4:	68fb      	ldr	r3, [r7, #12]
 8110fa6:	681b      	ldr	r3, [r3, #0]
 8110fa8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8110fac:	609a      	str	r2, [r3, #8]

  return HAL_OK;
 8110fae:	2300      	movs	r3, #0
}
 8110fb0:	4618      	mov	r0, r3
 8110fb2:	3710      	adds	r7, #16
 8110fb4:	46bd      	mov	sp, r7
 8110fb6:	bd80      	pop	{r7, pc}
 8110fb8:	081110d1 	.word	0x081110d1
 8110fbc:	08111167 	.word	0x08111167
 8110fc0:	0811119f 	.word	0x0811119f

08110fc4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8110fc4:	b480      	push	{r7}
 8110fc6:	b083      	sub	sp, #12
 8110fc8:	af00      	add	r7, sp, #0
 8110fca:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8110fcc:	687b      	ldr	r3, [r7, #4]
 8110fce:	681b      	ldr	r3, [r3, #0]
 8110fd0:	681a      	ldr	r2, [r3, #0]
 8110fd2:	687b      	ldr	r3, [r7, #4]
 8110fd4:	681b      	ldr	r3, [r3, #0]
 8110fd6:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8110fda:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8110fdc:	687b      	ldr	r3, [r7, #4]
 8110fde:	681b      	ldr	r3, [r3, #0]
 8110fe0:	689a      	ldr	r2, [r3, #8]
 8110fe2:	687b      	ldr	r3, [r7, #4]
 8110fe4:	681b      	ldr	r3, [r3, #0]
 8110fe6:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8110fea:	609a      	str	r2, [r3, #8]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8110fec:	687b      	ldr	r3, [r7, #4]
 8110fee:	2220      	movs	r2, #32
 8110ff0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 8110ff4:	bf00      	nop
 8110ff6:	370c      	adds	r7, #12
 8110ff8:	46bd      	mov	sp, r7
 8110ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8110ffe:	4770      	bx	lr

08111000 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8111000:	b480      	push	{r7}
 8111002:	b083      	sub	sp, #12
 8111004:	af00      	add	r7, sp, #0
 8111006:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8111008:	687b      	ldr	r3, [r7, #4]
 811100a:	681b      	ldr	r3, [r3, #0]
 811100c:	681a      	ldr	r2, [r3, #0]
 811100e:	687b      	ldr	r3, [r7, #4]
 8111010:	681b      	ldr	r3, [r3, #0]
 8111012:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8111016:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8111018:	687b      	ldr	r3, [r7, #4]
 811101a:	681b      	ldr	r3, [r3, #0]
 811101c:	689b      	ldr	r3, [r3, #8]
 811101e:	687a      	ldr	r2, [r7, #4]
 8111020:	6812      	ldr	r2, [r2, #0]
 8111022:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8111026:	f023 0301 	bic.w	r3, r3, #1
 811102a:	6093      	str	r3, [r2, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 811102c:	687b      	ldr	r3, [r7, #4]
 811102e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8111030:	2b01      	cmp	r3, #1
 8111032:	d107      	bne.n	8111044 <UART_EndRxTransfer+0x44>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8111034:	687b      	ldr	r3, [r7, #4]
 8111036:	681b      	ldr	r3, [r3, #0]
 8111038:	681a      	ldr	r2, [r3, #0]
 811103a:	687b      	ldr	r3, [r7, #4]
 811103c:	681b      	ldr	r3, [r3, #0]
 811103e:	f022 0210 	bic.w	r2, r2, #16
 8111042:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8111044:	687b      	ldr	r3, [r7, #4]
 8111046:	2220      	movs	r2, #32
 8111048:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 811104c:	687b      	ldr	r3, [r7, #4]
 811104e:	2200      	movs	r2, #0
 8111050:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8111052:	687b      	ldr	r3, [r7, #4]
 8111054:	2200      	movs	r2, #0
 8111056:	671a      	str	r2, [r3, #112]	; 0x70
}
 8111058:	bf00      	nop
 811105a:	370c      	adds	r7, #12
 811105c:	46bd      	mov	sp, r7
 811105e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8111062:	4770      	bx	lr

08111064 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8111064:	b580      	push	{r7, lr}
 8111066:	b084      	sub	sp, #16
 8111068:	af00      	add	r7, sp, #0
 811106a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 811106c:	687b      	ldr	r3, [r7, #4]
 811106e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8111070:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8111072:	687b      	ldr	r3, [r7, #4]
 8111074:	69db      	ldr	r3, [r3, #28]
 8111076:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 811107a:	d014      	beq.n	81110a6 <UART_DMATransmitCplt+0x42>
  {
    huart->TxXferCount = 0U;
 811107c:	68fb      	ldr	r3, [r7, #12]
 811107e:	2200      	movs	r2, #0
 8111080:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8111084:	68fb      	ldr	r3, [r7, #12]
 8111086:	681b      	ldr	r3, [r3, #0]
 8111088:	689a      	ldr	r2, [r3, #8]
 811108a:	68fb      	ldr	r3, [r7, #12]
 811108c:	681b      	ldr	r3, [r3, #0]
 811108e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8111092:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8111094:	68fb      	ldr	r3, [r7, #12]
 8111096:	681b      	ldr	r3, [r3, #0]
 8111098:	681a      	ldr	r2, [r3, #0]
 811109a:	68fb      	ldr	r3, [r7, #12]
 811109c:	681b      	ldr	r3, [r3, #0]
 811109e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 81110a2:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 81110a4:	e002      	b.n	81110ac <UART_DMATransmitCplt+0x48>
    HAL_UART_TxCpltCallback(huart);
 81110a6:	68f8      	ldr	r0, [r7, #12]
 81110a8:	f7f0 fd76 	bl	8101b98 <HAL_UART_TxCpltCallback>
}
 81110ac:	bf00      	nop
 81110ae:	3710      	adds	r7, #16
 81110b0:	46bd      	mov	sp, r7
 81110b2:	bd80      	pop	{r7, pc}

081110b4 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 81110b4:	b580      	push	{r7, lr}
 81110b6:	b084      	sub	sp, #16
 81110b8:	af00      	add	r7, sp, #0
 81110ba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 81110bc:	687b      	ldr	r3, [r7, #4]
 81110be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81110c0:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 81110c2:	68f8      	ldr	r0, [r7, #12]
 81110c4:	f7ff f822 	bl	811010c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 81110c8:	bf00      	nop
 81110ca:	3710      	adds	r7, #16
 81110cc:	46bd      	mov	sp, r7
 81110ce:	bd80      	pop	{r7, pc}

081110d0 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 81110d0:	b580      	push	{r7, lr}
 81110d2:	b084      	sub	sp, #16
 81110d4:	af00      	add	r7, sp, #0
 81110d6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 81110d8:	687b      	ldr	r3, [r7, #4]
 81110da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81110dc:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 81110de:	687b      	ldr	r3, [r7, #4]
 81110e0:	69db      	ldr	r3, [r3, #28]
 81110e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 81110e6:	d02b      	beq.n	8111140 <UART_DMAReceiveCplt+0x70>
  {
    huart->RxXferCount = 0U;
 81110e8:	68fb      	ldr	r3, [r7, #12]
 81110ea:	2200      	movs	r2, #0
 81110ec:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 81110f0:	68fb      	ldr	r3, [r7, #12]
 81110f2:	681b      	ldr	r3, [r3, #0]
 81110f4:	681a      	ldr	r2, [r3, #0]
 81110f6:	68fb      	ldr	r3, [r7, #12]
 81110f8:	681b      	ldr	r3, [r3, #0]
 81110fa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 81110fe:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8111100:	68fb      	ldr	r3, [r7, #12]
 8111102:	681b      	ldr	r3, [r3, #0]
 8111104:	689a      	ldr	r2, [r3, #8]
 8111106:	68fb      	ldr	r3, [r7, #12]
 8111108:	681b      	ldr	r3, [r3, #0]
 811110a:	f022 0201 	bic.w	r2, r2, #1
 811110e:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8111110:	68fb      	ldr	r3, [r7, #12]
 8111112:	681b      	ldr	r3, [r3, #0]
 8111114:	689a      	ldr	r2, [r3, #8]
 8111116:	68fb      	ldr	r3, [r7, #12]
 8111118:	681b      	ldr	r3, [r3, #0]
 811111a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 811111e:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8111120:	68fb      	ldr	r3, [r7, #12]
 8111122:	2220      	movs	r2, #32
 8111124:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8111128:	68fb      	ldr	r3, [r7, #12]
 811112a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 811112c:	2b01      	cmp	r3, #1
 811112e:	d107      	bne.n	8111140 <UART_DMAReceiveCplt+0x70>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8111130:	68fb      	ldr	r3, [r7, #12]
 8111132:	681b      	ldr	r3, [r3, #0]
 8111134:	681a      	ldr	r2, [r3, #0]
 8111136:	68fb      	ldr	r3, [r7, #12]
 8111138:	681b      	ldr	r3, [r3, #0]
 811113a:	f022 0210 	bic.w	r2, r2, #16
 811113e:	601a      	str	r2, [r3, #0]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8111140:	68fb      	ldr	r3, [r7, #12]
 8111142:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8111144:	2b01      	cmp	r3, #1
 8111146:	d107      	bne.n	8111158 <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8111148:	68fb      	ldr	r3, [r7, #12]
 811114a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 811114e:	4619      	mov	r1, r3
 8111150:	68f8      	ldr	r0, [r7, #12]
 8111152:	f7fe ffef 	bl	8110134 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8111156:	e002      	b.n	811115e <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 8111158:	68f8      	ldr	r0, [r7, #12]
 811115a:	f7f0 fc97 	bl	8101a8c <HAL_UART_RxCpltCallback>
}
 811115e:	bf00      	nop
 8111160:	3710      	adds	r7, #16
 8111162:	46bd      	mov	sp, r7
 8111164:	bd80      	pop	{r7, pc}

08111166 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8111166:	b580      	push	{r7, lr}
 8111168:	b084      	sub	sp, #16
 811116a:	af00      	add	r7, sp, #0
 811116c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 811116e:	687b      	ldr	r3, [r7, #4]
 8111170:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8111172:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8111174:	68fb      	ldr	r3, [r7, #12]
 8111176:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8111178:	2b01      	cmp	r3, #1
 811117a:	d109      	bne.n	8111190 <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 811117c:	68fb      	ldr	r3, [r7, #12]
 811117e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8111182:	085b      	lsrs	r3, r3, #1
 8111184:	b29b      	uxth	r3, r3
 8111186:	4619      	mov	r1, r3
 8111188:	68f8      	ldr	r0, [r7, #12]
 811118a:	f7fe ffd3 	bl	8110134 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 811118e:	e002      	b.n	8111196 <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 8111190:	68f8      	ldr	r0, [r7, #12]
 8111192:	f7fe ffc5 	bl	8110120 <HAL_UART_RxHalfCpltCallback>
}
 8111196:	bf00      	nop
 8111198:	3710      	adds	r7, #16
 811119a:	46bd      	mov	sp, r7
 811119c:	bd80      	pop	{r7, pc}

0811119e <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 811119e:	b580      	push	{r7, lr}
 81111a0:	b086      	sub	sp, #24
 81111a2:	af00      	add	r7, sp, #0
 81111a4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 81111a6:	687b      	ldr	r3, [r7, #4]
 81111a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81111aa:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 81111ac:	697b      	ldr	r3, [r7, #20]
 81111ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 81111b2:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 81111b4:	697b      	ldr	r3, [r7, #20]
 81111b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 81111ba:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 81111bc:	697b      	ldr	r3, [r7, #20]
 81111be:	681b      	ldr	r3, [r3, #0]
 81111c0:	689b      	ldr	r3, [r3, #8]
 81111c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 81111c6:	2b80      	cmp	r3, #128	; 0x80
 81111c8:	d109      	bne.n	81111de <UART_DMAError+0x40>
 81111ca:	693b      	ldr	r3, [r7, #16]
 81111cc:	2b21      	cmp	r3, #33	; 0x21
 81111ce:	d106      	bne.n	81111de <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 81111d0:	697b      	ldr	r3, [r7, #20]
 81111d2:	2200      	movs	r2, #0
 81111d4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 81111d8:	6978      	ldr	r0, [r7, #20]
 81111da:	f7ff fef3 	bl	8110fc4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 81111de:	697b      	ldr	r3, [r7, #20]
 81111e0:	681b      	ldr	r3, [r3, #0]
 81111e2:	689b      	ldr	r3, [r3, #8]
 81111e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 81111e8:	2b40      	cmp	r3, #64	; 0x40
 81111ea:	d109      	bne.n	8111200 <UART_DMAError+0x62>
 81111ec:	68fb      	ldr	r3, [r7, #12]
 81111ee:	2b22      	cmp	r3, #34	; 0x22
 81111f0:	d106      	bne.n	8111200 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 81111f2:	697b      	ldr	r3, [r7, #20]
 81111f4:	2200      	movs	r2, #0
 81111f6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 81111fa:	6978      	ldr	r0, [r7, #20]
 81111fc:	f7ff ff00 	bl	8111000 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8111200:	697b      	ldr	r3, [r7, #20]
 8111202:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8111206:	f043 0210 	orr.w	r2, r3, #16
 811120a:	697b      	ldr	r3, [r7, #20]
 811120c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8111210:	6978      	ldr	r0, [r7, #20]
 8111212:	f7f0 fcd7 	bl	8101bc4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8111216:	bf00      	nop
 8111218:	3718      	adds	r7, #24
 811121a:	46bd      	mov	sp, r7
 811121c:	bd80      	pop	{r7, pc}

0811121e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 811121e:	b580      	push	{r7, lr}
 8111220:	b084      	sub	sp, #16
 8111222:	af00      	add	r7, sp, #0
 8111224:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8111226:	687b      	ldr	r3, [r7, #4]
 8111228:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 811122a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 811122c:	68fb      	ldr	r3, [r7, #12]
 811122e:	2200      	movs	r2, #0
 8111230:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8111234:	68fb      	ldr	r3, [r7, #12]
 8111236:	2200      	movs	r2, #0
 8111238:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 811123c:	68f8      	ldr	r0, [r7, #12]
 811123e:	f7f0 fcc1 	bl	8101bc4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8111242:	bf00      	nop
 8111244:	3710      	adds	r7, #16
 8111246:	46bd      	mov	sp, r7
 8111248:	bd80      	pop	{r7, pc}

0811124a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 811124a:	b580      	push	{r7, lr}
 811124c:	b082      	sub	sp, #8
 811124e:	af00      	add	r7, sp, #0
 8111250:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8111252:	687b      	ldr	r3, [r7, #4]
 8111254:	681b      	ldr	r3, [r3, #0]
 8111256:	681a      	ldr	r2, [r3, #0]
 8111258:	687b      	ldr	r3, [r7, #4]
 811125a:	681b      	ldr	r3, [r3, #0]
 811125c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8111260:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8111262:	687b      	ldr	r3, [r7, #4]
 8111264:	2220      	movs	r2, #32
 8111266:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 811126a:	687b      	ldr	r3, [r7, #4]
 811126c:	2200      	movs	r2, #0
 811126e:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8111270:	6878      	ldr	r0, [r7, #4]
 8111272:	f7f0 fc91 	bl	8101b98 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8111276:	bf00      	nop
 8111278:	3708      	adds	r7, #8
 811127a:	46bd      	mov	sp, r7
 811127c:	bd80      	pop	{r7, pc}

0811127e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 811127e:	b480      	push	{r7}
 8111280:	b083      	sub	sp, #12
 8111282:	af00      	add	r7, sp, #0
 8111284:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8111286:	bf00      	nop
 8111288:	370c      	adds	r7, #12
 811128a:	46bd      	mov	sp, r7
 811128c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8111290:	4770      	bx	lr

08111292 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8111292:	b480      	push	{r7}
 8111294:	b083      	sub	sp, #12
 8111296:	af00      	add	r7, sp, #0
 8111298:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 811129a:	bf00      	nop
 811129c:	370c      	adds	r7, #12
 811129e:	46bd      	mov	sp, r7
 81112a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81112a4:	4770      	bx	lr

081112a6 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 81112a6:	b480      	push	{r7}
 81112a8:	b083      	sub	sp, #12
 81112aa:	af00      	add	r7, sp, #0
 81112ac:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 81112ae:	bf00      	nop
 81112b0:	370c      	adds	r7, #12
 81112b2:	46bd      	mov	sp, r7
 81112b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81112b8:	4770      	bx	lr

081112ba <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 81112ba:	b480      	push	{r7}
 81112bc:	b085      	sub	sp, #20
 81112be:	af00      	add	r7, sp, #0
 81112c0:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 81112c2:	687b      	ldr	r3, [r7, #4]
 81112c4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 81112c8:	2b01      	cmp	r3, #1
 81112ca:	d101      	bne.n	81112d0 <HAL_UARTEx_DisableFifoMode+0x16>
 81112cc:	2302      	movs	r3, #2
 81112ce:	e027      	b.n	8111320 <HAL_UARTEx_DisableFifoMode+0x66>
 81112d0:	687b      	ldr	r3, [r7, #4]
 81112d2:	2201      	movs	r2, #1
 81112d4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 81112d8:	687b      	ldr	r3, [r7, #4]
 81112da:	2224      	movs	r2, #36	; 0x24
 81112dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 81112e0:	687b      	ldr	r3, [r7, #4]
 81112e2:	681b      	ldr	r3, [r3, #0]
 81112e4:	681b      	ldr	r3, [r3, #0]
 81112e6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 81112e8:	687b      	ldr	r3, [r7, #4]
 81112ea:	681b      	ldr	r3, [r3, #0]
 81112ec:	681a      	ldr	r2, [r3, #0]
 81112ee:	687b      	ldr	r3, [r7, #4]
 81112f0:	681b      	ldr	r3, [r3, #0]
 81112f2:	f022 0201 	bic.w	r2, r2, #1
 81112f6:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 81112f8:	68fb      	ldr	r3, [r7, #12]
 81112fa:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 81112fe:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8111300:	687b      	ldr	r3, [r7, #4]
 8111302:	2200      	movs	r2, #0
 8111304:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8111306:	687b      	ldr	r3, [r7, #4]
 8111308:	681b      	ldr	r3, [r3, #0]
 811130a:	68fa      	ldr	r2, [r7, #12]
 811130c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 811130e:	687b      	ldr	r3, [r7, #4]
 8111310:	2220      	movs	r2, #32
 8111312:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8111316:	687b      	ldr	r3, [r7, #4]
 8111318:	2200      	movs	r2, #0
 811131a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 811131e:	2300      	movs	r3, #0
}
 8111320:	4618      	mov	r0, r3
 8111322:	3714      	adds	r7, #20
 8111324:	46bd      	mov	sp, r7
 8111326:	f85d 7b04 	ldr.w	r7, [sp], #4
 811132a:	4770      	bx	lr

0811132c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 811132c:	b580      	push	{r7, lr}
 811132e:	b084      	sub	sp, #16
 8111330:	af00      	add	r7, sp, #0
 8111332:	6078      	str	r0, [r7, #4]
 8111334:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8111336:	687b      	ldr	r3, [r7, #4]
 8111338:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 811133c:	2b01      	cmp	r3, #1
 811133e:	d101      	bne.n	8111344 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8111340:	2302      	movs	r3, #2
 8111342:	e02d      	b.n	81113a0 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8111344:	687b      	ldr	r3, [r7, #4]
 8111346:	2201      	movs	r2, #1
 8111348:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 811134c:	687b      	ldr	r3, [r7, #4]
 811134e:	2224      	movs	r2, #36	; 0x24
 8111350:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8111354:	687b      	ldr	r3, [r7, #4]
 8111356:	681b      	ldr	r3, [r3, #0]
 8111358:	681b      	ldr	r3, [r3, #0]
 811135a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 811135c:	687b      	ldr	r3, [r7, #4]
 811135e:	681b      	ldr	r3, [r3, #0]
 8111360:	681a      	ldr	r2, [r3, #0]
 8111362:	687b      	ldr	r3, [r7, #4]
 8111364:	681b      	ldr	r3, [r3, #0]
 8111366:	f022 0201 	bic.w	r2, r2, #1
 811136a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 811136c:	687b      	ldr	r3, [r7, #4]
 811136e:	681b      	ldr	r3, [r3, #0]
 8111370:	689b      	ldr	r3, [r3, #8]
 8111372:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8111376:	687b      	ldr	r3, [r7, #4]
 8111378:	681b      	ldr	r3, [r3, #0]
 811137a:	683a      	ldr	r2, [r7, #0]
 811137c:	430a      	orrs	r2, r1
 811137e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8111380:	6878      	ldr	r0, [r7, #4]
 8111382:	f000 f84f 	bl	8111424 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8111386:	687b      	ldr	r3, [r7, #4]
 8111388:	681b      	ldr	r3, [r3, #0]
 811138a:	68fa      	ldr	r2, [r7, #12]
 811138c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 811138e:	687b      	ldr	r3, [r7, #4]
 8111390:	2220      	movs	r2, #32
 8111392:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8111396:	687b      	ldr	r3, [r7, #4]
 8111398:	2200      	movs	r2, #0
 811139a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 811139e:	2300      	movs	r3, #0
}
 81113a0:	4618      	mov	r0, r3
 81113a2:	3710      	adds	r7, #16
 81113a4:	46bd      	mov	sp, r7
 81113a6:	bd80      	pop	{r7, pc}

081113a8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 81113a8:	b580      	push	{r7, lr}
 81113aa:	b084      	sub	sp, #16
 81113ac:	af00      	add	r7, sp, #0
 81113ae:	6078      	str	r0, [r7, #4]
 81113b0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 81113b2:	687b      	ldr	r3, [r7, #4]
 81113b4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 81113b8:	2b01      	cmp	r3, #1
 81113ba:	d101      	bne.n	81113c0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 81113bc:	2302      	movs	r3, #2
 81113be:	e02d      	b.n	811141c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 81113c0:	687b      	ldr	r3, [r7, #4]
 81113c2:	2201      	movs	r2, #1
 81113c4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 81113c8:	687b      	ldr	r3, [r7, #4]
 81113ca:	2224      	movs	r2, #36	; 0x24
 81113cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 81113d0:	687b      	ldr	r3, [r7, #4]
 81113d2:	681b      	ldr	r3, [r3, #0]
 81113d4:	681b      	ldr	r3, [r3, #0]
 81113d6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 81113d8:	687b      	ldr	r3, [r7, #4]
 81113da:	681b      	ldr	r3, [r3, #0]
 81113dc:	681a      	ldr	r2, [r3, #0]
 81113de:	687b      	ldr	r3, [r7, #4]
 81113e0:	681b      	ldr	r3, [r3, #0]
 81113e2:	f022 0201 	bic.w	r2, r2, #1
 81113e6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 81113e8:	687b      	ldr	r3, [r7, #4]
 81113ea:	681b      	ldr	r3, [r3, #0]
 81113ec:	689b      	ldr	r3, [r3, #8]
 81113ee:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 81113f2:	687b      	ldr	r3, [r7, #4]
 81113f4:	681b      	ldr	r3, [r3, #0]
 81113f6:	683a      	ldr	r2, [r7, #0]
 81113f8:	430a      	orrs	r2, r1
 81113fa:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 81113fc:	6878      	ldr	r0, [r7, #4]
 81113fe:	f000 f811 	bl	8111424 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8111402:	687b      	ldr	r3, [r7, #4]
 8111404:	681b      	ldr	r3, [r3, #0]
 8111406:	68fa      	ldr	r2, [r7, #12]
 8111408:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 811140a:	687b      	ldr	r3, [r7, #4]
 811140c:	2220      	movs	r2, #32
 811140e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8111412:	687b      	ldr	r3, [r7, #4]
 8111414:	2200      	movs	r2, #0
 8111416:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 811141a:	2300      	movs	r3, #0
}
 811141c:	4618      	mov	r0, r3
 811141e:	3710      	adds	r7, #16
 8111420:	46bd      	mov	sp, r7
 8111422:	bd80      	pop	{r7, pc}

08111424 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8111424:	b480      	push	{r7}
 8111426:	b085      	sub	sp, #20
 8111428:	af00      	add	r7, sp, #0
 811142a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 811142c:	687b      	ldr	r3, [r7, #4]
 811142e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8111430:	2b00      	cmp	r3, #0
 8111432:	d108      	bne.n	8111446 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8111434:	687b      	ldr	r3, [r7, #4]
 8111436:	2201      	movs	r2, #1
 8111438:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 811143c:	687b      	ldr	r3, [r7, #4]
 811143e:	2201      	movs	r2, #1
 8111440:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8111444:	e031      	b.n	81114aa <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8111446:	2310      	movs	r3, #16
 8111448:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 811144a:	2310      	movs	r3, #16
 811144c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 811144e:	687b      	ldr	r3, [r7, #4]
 8111450:	681b      	ldr	r3, [r3, #0]
 8111452:	689b      	ldr	r3, [r3, #8]
 8111454:	0e5b      	lsrs	r3, r3, #25
 8111456:	b2db      	uxtb	r3, r3
 8111458:	f003 0307 	and.w	r3, r3, #7
 811145c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 811145e:	687b      	ldr	r3, [r7, #4]
 8111460:	681b      	ldr	r3, [r3, #0]
 8111462:	689b      	ldr	r3, [r3, #8]
 8111464:	0f5b      	lsrs	r3, r3, #29
 8111466:	b2db      	uxtb	r3, r3
 8111468:	f003 0307 	and.w	r3, r3, #7
 811146c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 811146e:	7bbb      	ldrb	r3, [r7, #14]
 8111470:	7b3a      	ldrb	r2, [r7, #12]
 8111472:	4911      	ldr	r1, [pc, #68]	; (81114b8 <UARTEx_SetNbDataToProcess+0x94>)
 8111474:	5c8a      	ldrb	r2, [r1, r2]
 8111476:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 811147a:	7b3a      	ldrb	r2, [r7, #12]
 811147c:	490f      	ldr	r1, [pc, #60]	; (81114bc <UARTEx_SetNbDataToProcess+0x98>)
 811147e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8111480:	fb93 f3f2 	sdiv	r3, r3, r2
 8111484:	b29a      	uxth	r2, r3
 8111486:	687b      	ldr	r3, [r7, #4]
 8111488:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 811148c:	7bfb      	ldrb	r3, [r7, #15]
 811148e:	7b7a      	ldrb	r2, [r7, #13]
 8111490:	4909      	ldr	r1, [pc, #36]	; (81114b8 <UARTEx_SetNbDataToProcess+0x94>)
 8111492:	5c8a      	ldrb	r2, [r1, r2]
 8111494:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8111498:	7b7a      	ldrb	r2, [r7, #13]
 811149a:	4908      	ldr	r1, [pc, #32]	; (81114bc <UARTEx_SetNbDataToProcess+0x98>)
 811149c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 811149e:	fb93 f3f2 	sdiv	r3, r3, r2
 81114a2:	b29a      	uxth	r2, r3
 81114a4:	687b      	ldr	r3, [r7, #4]
 81114a6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 81114aa:	bf00      	nop
 81114ac:	3714      	adds	r7, #20
 81114ae:	46bd      	mov	sp, r7
 81114b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81114b4:	4770      	bx	lr
 81114b6:	bf00      	nop
 81114b8:	0811ba44 	.word	0x0811ba44
 81114bc:	0811ba4c 	.word	0x0811ba4c

081114c0 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 81114c0:	b084      	sub	sp, #16
 81114c2:	b480      	push	{r7}
 81114c4:	b085      	sub	sp, #20
 81114c6:	af00      	add	r7, sp, #0
 81114c8:	6078      	str	r0, [r7, #4]
 81114ca:	f107 001c 	add.w	r0, r7, #28
 81114ce:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 81114d2:	2300      	movs	r3, #0
 81114d4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 81114d6:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 81114d8:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 81114da:	431a      	orrs	r2, r3
             Init.BusWide             | \
 81114dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      | \
 81114de:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 81114e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             | \
 81114e2:	431a      	orrs	r2, r3
             Init.ClockDiv
 81114e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl | \
 81114e6:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 81114e8:	68fa      	ldr	r2, [r7, #12]
 81114ea:	4313      	orrs	r3, r2
 81114ec:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 81114ee:	687b      	ldr	r3, [r7, #4]
 81114f0:	685a      	ldr	r2, [r3, #4]
 81114f2:	4b07      	ldr	r3, [pc, #28]	; (8111510 <SDMMC_Init+0x50>)
 81114f4:	4013      	ands	r3, r2
 81114f6:	68fa      	ldr	r2, [r7, #12]
 81114f8:	431a      	orrs	r2, r3
 81114fa:	687b      	ldr	r3, [r7, #4]
 81114fc:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 81114fe:	2300      	movs	r3, #0
}
 8111500:	4618      	mov	r0, r3
 8111502:	3714      	adds	r7, #20
 8111504:	46bd      	mov	sp, r7
 8111506:	f85d 7b04 	ldr.w	r7, [sp], #4
 811150a:	b004      	add	sp, #16
 811150c:	4770      	bx	lr
 811150e:	bf00      	nop
 8111510:	ffc02c00 	.word	0xffc02c00

08111514 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8111514:	b480      	push	{r7}
 8111516:	b083      	sub	sp, #12
 8111518:	af00      	add	r7, sp, #0
 811151a:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 811151c:	687b      	ldr	r3, [r7, #4]
 811151e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8111522:	4618      	mov	r0, r3
 8111524:	370c      	adds	r7, #12
 8111526:	46bd      	mov	sp, r7
 8111528:	f85d 7b04 	ldr.w	r7, [sp], #4
 811152c:	4770      	bx	lr

0811152e <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 811152e:	b480      	push	{r7}
 8111530:	b083      	sub	sp, #12
 8111532:	af00      	add	r7, sp, #0
 8111534:	6078      	str	r0, [r7, #4]
 8111536:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 8111538:	683b      	ldr	r3, [r7, #0]
 811153a:	681a      	ldr	r2, [r3, #0]
 811153c:	687b      	ldr	r3, [r7, #4]
 811153e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8111542:	2300      	movs	r3, #0
}
 8111544:	4618      	mov	r0, r3
 8111546:	370c      	adds	r7, #12
 8111548:	46bd      	mov	sp, r7
 811154a:	f85d 7b04 	ldr.w	r7, [sp], #4
 811154e:	4770      	bx	lr

08111550 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 8111550:	b480      	push	{r7}
 8111552:	b083      	sub	sp, #12
 8111554:	af00      	add	r7, sp, #0
 8111556:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 8111558:	687b      	ldr	r3, [r7, #4]
 811155a:	681b      	ldr	r3, [r3, #0]
 811155c:	f043 0203 	orr.w	r2, r3, #3
 8111560:	687b      	ldr	r3, [r7, #4]
 8111562:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8111564:	2300      	movs	r3, #0
}
 8111566:	4618      	mov	r0, r3
 8111568:	370c      	adds	r7, #12
 811156a:	46bd      	mov	sp, r7
 811156c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8111570:	4770      	bx	lr

08111572 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 8111572:	b480      	push	{r7}
 8111574:	b083      	sub	sp, #12
 8111576:	af00      	add	r7, sp, #0
 8111578:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 811157a:	687b      	ldr	r3, [r7, #4]
 811157c:	681b      	ldr	r3, [r3, #0]
 811157e:	f003 0303 	and.w	r3, r3, #3
}
 8111582:	4618      	mov	r0, r3
 8111584:	370c      	adds	r7, #12
 8111586:	46bd      	mov	sp, r7
 8111588:	f85d 7b04 	ldr.w	r7, [sp], #4
 811158c:	4770      	bx	lr
	...

08111590 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8111590:	b480      	push	{r7}
 8111592:	b085      	sub	sp, #20
 8111594:	af00      	add	r7, sp, #0
 8111596:	6078      	str	r0, [r7, #4]
 8111598:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 811159a:	2300      	movs	r3, #0
 811159c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 811159e:	683b      	ldr	r3, [r7, #0]
 81115a0:	681a      	ldr	r2, [r3, #0]
 81115a2:	687b      	ldr	r3, [r7, #4]
 81115a4:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 81115a6:	683b      	ldr	r3, [r7, #0]
 81115a8:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 81115aa:	683b      	ldr	r3, [r7, #0]
 81115ac:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 81115ae:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 81115b0:	683b      	ldr	r3, [r7, #0]
 81115b2:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 81115b4:	431a      	orrs	r2, r3
                       Command->CPSM);
 81115b6:	683b      	ldr	r3, [r7, #0]
 81115b8:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 81115ba:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 81115bc:	68fa      	ldr	r2, [r7, #12]
 81115be:	4313      	orrs	r3, r2
 81115c0:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 81115c2:	687b      	ldr	r3, [r7, #4]
 81115c4:	68da      	ldr	r2, [r3, #12]
 81115c6:	4b06      	ldr	r3, [pc, #24]	; (81115e0 <SDMMC_SendCommand+0x50>)
 81115c8:	4013      	ands	r3, r2
 81115ca:	68fa      	ldr	r2, [r7, #12]
 81115cc:	431a      	orrs	r2, r3
 81115ce:	687b      	ldr	r3, [r7, #4]
 81115d0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 81115d2:	2300      	movs	r3, #0
}
 81115d4:	4618      	mov	r0, r3
 81115d6:	3714      	adds	r7, #20
 81115d8:	46bd      	mov	sp, r7
 81115da:	f85d 7b04 	ldr.w	r7, [sp], #4
 81115de:	4770      	bx	lr
 81115e0:	fffee0c0 	.word	0xfffee0c0

081115e4 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 81115e4:	b480      	push	{r7}
 81115e6:	b083      	sub	sp, #12
 81115e8:	af00      	add	r7, sp, #0
 81115ea:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 81115ec:	687b      	ldr	r3, [r7, #4]
 81115ee:	691b      	ldr	r3, [r3, #16]
 81115f0:	b2db      	uxtb	r3, r3
}
 81115f2:	4618      	mov	r0, r3
 81115f4:	370c      	adds	r7, #12
 81115f6:	46bd      	mov	sp, r7
 81115f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81115fc:	4770      	bx	lr

081115fe <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 81115fe:	b480      	push	{r7}
 8111600:	b085      	sub	sp, #20
 8111602:	af00      	add	r7, sp, #0
 8111604:	6078      	str	r0, [r7, #4]
 8111606:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8111608:	687b      	ldr	r3, [r7, #4]
 811160a:	3314      	adds	r3, #20
 811160c:	461a      	mov	r2, r3
 811160e:	683b      	ldr	r3, [r7, #0]
 8111610:	4413      	add	r3, r2
 8111612:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 8111614:	68fb      	ldr	r3, [r7, #12]
 8111616:	681b      	ldr	r3, [r3, #0]
}
 8111618:	4618      	mov	r0, r3
 811161a:	3714      	adds	r7, #20
 811161c:	46bd      	mov	sp, r7
 811161e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8111622:	4770      	bx	lr

08111624 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 8111624:	b480      	push	{r7}
 8111626:	b085      	sub	sp, #20
 8111628:	af00      	add	r7, sp, #0
 811162a:	6078      	str	r0, [r7, #4]
 811162c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 811162e:	2300      	movs	r3, #0
 8111630:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8111632:	683b      	ldr	r3, [r7, #0]
 8111634:	681a      	ldr	r2, [r3, #0]
 8111636:	687b      	ldr	r3, [r7, #4]
 8111638:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 811163a:	683b      	ldr	r3, [r7, #0]
 811163c:	685a      	ldr	r2, [r3, #4]
 811163e:	687b      	ldr	r3, [r7, #4]
 8111640:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8111642:	683b      	ldr	r3, [r7, #0]
 8111644:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 8111646:	683b      	ldr	r3, [r7, #0]
 8111648:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 811164a:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 811164c:	683b      	ldr	r3, [r7, #0]
 811164e:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 8111650:	431a      	orrs	r2, r3
                       Data->DPSM);
 8111652:	683b      	ldr	r3, [r7, #0]
 8111654:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 8111656:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8111658:	68fa      	ldr	r2, [r7, #12]
 811165a:	4313      	orrs	r3, r2
 811165c:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 811165e:	687b      	ldr	r3, [r7, #4]
 8111660:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8111662:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8111666:	68fb      	ldr	r3, [r7, #12]
 8111668:	431a      	orrs	r2, r3
 811166a:	687b      	ldr	r3, [r7, #4]
 811166c:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 811166e:	2300      	movs	r3, #0

}
 8111670:	4618      	mov	r0, r3
 8111672:	3714      	adds	r7, #20
 8111674:	46bd      	mov	sp, r7
 8111676:	f85d 7b04 	ldr.w	r7, [sp], #4
 811167a:	4770      	bx	lr

0811167c <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 811167c:	b580      	push	{r7, lr}
 811167e:	b088      	sub	sp, #32
 8111680:	af00      	add	r7, sp, #0
 8111682:	6078      	str	r0, [r7, #4]
 8111684:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8111686:	683b      	ldr	r3, [r7, #0]
 8111688:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 811168a:	2310      	movs	r3, #16
 811168c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 811168e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8111692:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8111694:	2300      	movs	r3, #0
 8111696:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8111698:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 811169c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 811169e:	f107 0308 	add.w	r3, r7, #8
 81116a2:	4619      	mov	r1, r3
 81116a4:	6878      	ldr	r0, [r7, #4]
 81116a6:	f7ff ff73 	bl	8111590 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 81116aa:	f241 3288 	movw	r2, #5000	; 0x1388
 81116ae:	2110      	movs	r1, #16
 81116b0:	6878      	ldr	r0, [r7, #4]
 81116b2:	f000 fa81 	bl	8111bb8 <SDMMC_GetCmdResp1>
 81116b6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 81116b8:	69fb      	ldr	r3, [r7, #28]
}
 81116ba:	4618      	mov	r0, r3
 81116bc:	3720      	adds	r7, #32
 81116be:	46bd      	mov	sp, r7
 81116c0:	bd80      	pop	{r7, pc}

081116c2 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 81116c2:	b580      	push	{r7, lr}
 81116c4:	b088      	sub	sp, #32
 81116c6:	af00      	add	r7, sp, #0
 81116c8:	6078      	str	r0, [r7, #4]
 81116ca:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 81116cc:	683b      	ldr	r3, [r7, #0]
 81116ce:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 81116d0:	2311      	movs	r3, #17
 81116d2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 81116d4:	f44f 7380 	mov.w	r3, #256	; 0x100
 81116d8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 81116da:	2300      	movs	r3, #0
 81116dc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 81116de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 81116e2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 81116e4:	f107 0308 	add.w	r3, r7, #8
 81116e8:	4619      	mov	r1, r3
 81116ea:	6878      	ldr	r0, [r7, #4]
 81116ec:	f7ff ff50 	bl	8111590 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 81116f0:	f241 3288 	movw	r2, #5000	; 0x1388
 81116f4:	2111      	movs	r1, #17
 81116f6:	6878      	ldr	r0, [r7, #4]
 81116f8:	f000 fa5e 	bl	8111bb8 <SDMMC_GetCmdResp1>
 81116fc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 81116fe:	69fb      	ldr	r3, [r7, #28]
}
 8111700:	4618      	mov	r0, r3
 8111702:	3720      	adds	r7, #32
 8111704:	46bd      	mov	sp, r7
 8111706:	bd80      	pop	{r7, pc}

08111708 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8111708:	b580      	push	{r7, lr}
 811170a:	b088      	sub	sp, #32
 811170c:	af00      	add	r7, sp, #0
 811170e:	6078      	str	r0, [r7, #4]
 8111710:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8111712:	683b      	ldr	r3, [r7, #0]
 8111714:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8111716:	2312      	movs	r3, #18
 8111718:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 811171a:	f44f 7380 	mov.w	r3, #256	; 0x100
 811171e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8111720:	2300      	movs	r3, #0
 8111722:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8111724:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8111728:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 811172a:	f107 0308 	add.w	r3, r7, #8
 811172e:	4619      	mov	r1, r3
 8111730:	6878      	ldr	r0, [r7, #4]
 8111732:	f7ff ff2d 	bl	8111590 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8111736:	f241 3288 	movw	r2, #5000	; 0x1388
 811173a:	2112      	movs	r1, #18
 811173c:	6878      	ldr	r0, [r7, #4]
 811173e:	f000 fa3b 	bl	8111bb8 <SDMMC_GetCmdResp1>
 8111742:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8111744:	69fb      	ldr	r3, [r7, #28]
}
 8111746:	4618      	mov	r0, r3
 8111748:	3720      	adds	r7, #32
 811174a:	46bd      	mov	sp, r7
 811174c:	bd80      	pop	{r7, pc}

0811174e <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 811174e:	b580      	push	{r7, lr}
 8111750:	b088      	sub	sp, #32
 8111752:	af00      	add	r7, sp, #0
 8111754:	6078      	str	r0, [r7, #4]
 8111756:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8111758:	683b      	ldr	r3, [r7, #0]
 811175a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 811175c:	2318      	movs	r3, #24
 811175e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8111760:	f44f 7380 	mov.w	r3, #256	; 0x100
 8111764:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8111766:	2300      	movs	r3, #0
 8111768:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 811176a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 811176e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8111770:	f107 0308 	add.w	r3, r7, #8
 8111774:	4619      	mov	r1, r3
 8111776:	6878      	ldr	r0, [r7, #4]
 8111778:	f7ff ff0a 	bl	8111590 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 811177c:	f241 3288 	movw	r2, #5000	; 0x1388
 8111780:	2118      	movs	r1, #24
 8111782:	6878      	ldr	r0, [r7, #4]
 8111784:	f000 fa18 	bl	8111bb8 <SDMMC_GetCmdResp1>
 8111788:	61f8      	str	r0, [r7, #28]

  return errorstate;
 811178a:	69fb      	ldr	r3, [r7, #28]
}
 811178c:	4618      	mov	r0, r3
 811178e:	3720      	adds	r7, #32
 8111790:	46bd      	mov	sp, r7
 8111792:	bd80      	pop	{r7, pc}

08111794 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8111794:	b580      	push	{r7, lr}
 8111796:	b088      	sub	sp, #32
 8111798:	af00      	add	r7, sp, #0
 811179a:	6078      	str	r0, [r7, #4]
 811179c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 811179e:	683b      	ldr	r3, [r7, #0]
 81117a0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 81117a2:	2319      	movs	r3, #25
 81117a4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 81117a6:	f44f 7380 	mov.w	r3, #256	; 0x100
 81117aa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 81117ac:	2300      	movs	r3, #0
 81117ae:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 81117b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 81117b4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 81117b6:	f107 0308 	add.w	r3, r7, #8
 81117ba:	4619      	mov	r1, r3
 81117bc:	6878      	ldr	r0, [r7, #4]
 81117be:	f7ff fee7 	bl	8111590 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 81117c2:	f241 3288 	movw	r2, #5000	; 0x1388
 81117c6:	2119      	movs	r1, #25
 81117c8:	6878      	ldr	r0, [r7, #4]
 81117ca:	f000 f9f5 	bl	8111bb8 <SDMMC_GetCmdResp1>
 81117ce:	61f8      	str	r0, [r7, #28]

  return errorstate;
 81117d0:	69fb      	ldr	r3, [r7, #28]
}
 81117d2:	4618      	mov	r0, r3
 81117d4:	3720      	adds	r7, #32
 81117d6:	46bd      	mov	sp, r7
 81117d8:	bd80      	pop	{r7, pc}
	...

081117dc <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 81117dc:	b580      	push	{r7, lr}
 81117de:	b088      	sub	sp, #32
 81117e0:	af00      	add	r7, sp, #0
 81117e2:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 81117e4:	2300      	movs	r3, #0
 81117e6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 81117e8:	230c      	movs	r3, #12
 81117ea:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 81117ec:	f44f 7380 	mov.w	r3, #256	; 0x100
 81117f0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 81117f2:	2300      	movs	r3, #0
 81117f4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 81117f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 81117fa:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 81117fc:	687b      	ldr	r3, [r7, #4]
 81117fe:	68db      	ldr	r3, [r3, #12]
 8111800:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8111804:	687b      	ldr	r3, [r7, #4]
 8111806:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 8111808:	687b      	ldr	r3, [r7, #4]
 811180a:	68db      	ldr	r3, [r3, #12]
 811180c:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8111810:	687b      	ldr	r3, [r7, #4]
 8111812:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8111814:	f107 0308 	add.w	r3, r7, #8
 8111818:	4619      	mov	r1, r3
 811181a:	6878      	ldr	r0, [r7, #4]
 811181c:	f7ff feb8 	bl	8111590 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8111820:	4a0b      	ldr	r2, [pc, #44]	; (8111850 <SDMMC_CmdStopTransfer+0x74>)
 8111822:	210c      	movs	r1, #12
 8111824:	6878      	ldr	r0, [r7, #4]
 8111826:	f000 f9c7 	bl	8111bb8 <SDMMC_GetCmdResp1>
 811182a:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 811182c:	687b      	ldr	r3, [r7, #4]
 811182e:	68db      	ldr	r3, [r3, #12]
 8111830:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8111834:	687b      	ldr	r3, [r7, #4]
 8111836:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8111838:	69fb      	ldr	r3, [r7, #28]
 811183a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 811183e:	d101      	bne.n	8111844 <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 8111840:	2300      	movs	r3, #0
 8111842:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 8111844:	69fb      	ldr	r3, [r7, #28]
}
 8111846:	4618      	mov	r0, r3
 8111848:	3720      	adds	r7, #32
 811184a:	46bd      	mov	sp, r7
 811184c:	bd80      	pop	{r7, pc}
 811184e:	bf00      	nop
 8111850:	05f5e100 	.word	0x05f5e100

08111854 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 8111854:	b580      	push	{r7, lr}
 8111856:	b088      	sub	sp, #32
 8111858:	af00      	add	r7, sp, #0
 811185a:	6078      	str	r0, [r7, #4]
 811185c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 811185e:	683b      	ldr	r3, [r7, #0]
 8111860:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8111862:	2307      	movs	r3, #7
 8111864:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8111866:	f44f 7380 	mov.w	r3, #256	; 0x100
 811186a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 811186c:	2300      	movs	r3, #0
 811186e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8111870:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8111874:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8111876:	f107 0308 	add.w	r3, r7, #8
 811187a:	4619      	mov	r1, r3
 811187c:	6878      	ldr	r0, [r7, #4]
 811187e:	f7ff fe87 	bl	8111590 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8111882:	f241 3288 	movw	r2, #5000	; 0x1388
 8111886:	2107      	movs	r1, #7
 8111888:	6878      	ldr	r0, [r7, #4]
 811188a:	f000 f995 	bl	8111bb8 <SDMMC_GetCmdResp1>
 811188e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8111890:	69fb      	ldr	r3, [r7, #28]
}
 8111892:	4618      	mov	r0, r3
 8111894:	3720      	adds	r7, #32
 8111896:	46bd      	mov	sp, r7
 8111898:	bd80      	pop	{r7, pc}

0811189a <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 811189a:	b580      	push	{r7, lr}
 811189c:	b088      	sub	sp, #32
 811189e:	af00      	add	r7, sp, #0
 81118a0:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 81118a2:	2300      	movs	r3, #0
 81118a4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 81118a6:	2300      	movs	r3, #0
 81118a8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 81118aa:	2300      	movs	r3, #0
 81118ac:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 81118ae:	2300      	movs	r3, #0
 81118b0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 81118b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 81118b6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 81118b8:	f107 0308 	add.w	r3, r7, #8
 81118bc:	4619      	mov	r1, r3
 81118be:	6878      	ldr	r0, [r7, #4]
 81118c0:	f7ff fe66 	bl	8111590 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 81118c4:	6878      	ldr	r0, [r7, #4]
 81118c6:	f000 fbb9 	bl	811203c <SDMMC_GetCmdError>
 81118ca:	61f8      	str	r0, [r7, #28]

  return errorstate;
 81118cc:	69fb      	ldr	r3, [r7, #28]
}
 81118ce:	4618      	mov	r0, r3
 81118d0:	3720      	adds	r7, #32
 81118d2:	46bd      	mov	sp, r7
 81118d4:	bd80      	pop	{r7, pc}

081118d6 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 81118d6:	b580      	push	{r7, lr}
 81118d8:	b088      	sub	sp, #32
 81118da:	af00      	add	r7, sp, #0
 81118dc:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 81118de:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 81118e2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 81118e4:	2308      	movs	r3, #8
 81118e6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 81118e8:	f44f 7380 	mov.w	r3, #256	; 0x100
 81118ec:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 81118ee:	2300      	movs	r3, #0
 81118f0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 81118f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 81118f6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 81118f8:	f107 0308 	add.w	r3, r7, #8
 81118fc:	4619      	mov	r1, r3
 81118fe:	6878      	ldr	r0, [r7, #4]
 8111900:	f7ff fe46 	bl	8111590 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8111904:	6878      	ldr	r0, [r7, #4]
 8111906:	f000 fb4b 	bl	8111fa0 <SDMMC_GetCmdResp7>
 811190a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 811190c:	69fb      	ldr	r3, [r7, #28]
}
 811190e:	4618      	mov	r0, r3
 8111910:	3720      	adds	r7, #32
 8111912:	46bd      	mov	sp, r7
 8111914:	bd80      	pop	{r7, pc}

08111916 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8111916:	b580      	push	{r7, lr}
 8111918:	b088      	sub	sp, #32
 811191a:	af00      	add	r7, sp, #0
 811191c:	6078      	str	r0, [r7, #4]
 811191e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8111920:	683b      	ldr	r3, [r7, #0]
 8111922:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8111924:	2337      	movs	r3, #55	; 0x37
 8111926:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8111928:	f44f 7380 	mov.w	r3, #256	; 0x100
 811192c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 811192e:	2300      	movs	r3, #0
 8111930:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8111932:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8111936:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8111938:	f107 0308 	add.w	r3, r7, #8
 811193c:	4619      	mov	r1, r3
 811193e:	6878      	ldr	r0, [r7, #4]
 8111940:	f7ff fe26 	bl	8111590 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8111944:	f241 3288 	movw	r2, #5000	; 0x1388
 8111948:	2137      	movs	r1, #55	; 0x37
 811194a:	6878      	ldr	r0, [r7, #4]
 811194c:	f000 f934 	bl	8111bb8 <SDMMC_GetCmdResp1>
 8111950:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8111952:	69fb      	ldr	r3, [r7, #28]
}
 8111954:	4618      	mov	r0, r3
 8111956:	3720      	adds	r7, #32
 8111958:	46bd      	mov	sp, r7
 811195a:	bd80      	pop	{r7, pc}

0811195c <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 811195c:	b580      	push	{r7, lr}
 811195e:	b088      	sub	sp, #32
 8111960:	af00      	add	r7, sp, #0
 8111962:	6078      	str	r0, [r7, #4]
 8111964:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8111966:	683b      	ldr	r3, [r7, #0]
 8111968:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 811196a:	2329      	movs	r3, #41	; 0x29
 811196c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 811196e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8111972:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8111974:	2300      	movs	r3, #0
 8111976:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8111978:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 811197c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 811197e:	f107 0308 	add.w	r3, r7, #8
 8111982:	4619      	mov	r1, r3
 8111984:	6878      	ldr	r0, [r7, #4]
 8111986:	f7ff fe03 	bl	8111590 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 811198a:	6878      	ldr	r0, [r7, #4]
 811198c:	f000 fa50 	bl	8111e30 <SDMMC_GetCmdResp3>
 8111990:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8111992:	69fb      	ldr	r3, [r7, #28]
}
 8111994:	4618      	mov	r0, r3
 8111996:	3720      	adds	r7, #32
 8111998:	46bd      	mov	sp, r7
 811199a:	bd80      	pop	{r7, pc}

0811199c <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 811199c:	b580      	push	{r7, lr}
 811199e:	b088      	sub	sp, #32
 81119a0:	af00      	add	r7, sp, #0
 81119a2:	6078      	str	r0, [r7, #4]
 81119a4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 81119a6:	683b      	ldr	r3, [r7, #0]
 81119a8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 81119aa:	2306      	movs	r3, #6
 81119ac:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 81119ae:	f44f 7380 	mov.w	r3, #256	; 0x100
 81119b2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 81119b4:	2300      	movs	r3, #0
 81119b6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 81119b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 81119bc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 81119be:	f107 0308 	add.w	r3, r7, #8
 81119c2:	4619      	mov	r1, r3
 81119c4:	6878      	ldr	r0, [r7, #4]
 81119c6:	f7ff fde3 	bl	8111590 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 81119ca:	f241 3288 	movw	r2, #5000	; 0x1388
 81119ce:	2106      	movs	r1, #6
 81119d0:	6878      	ldr	r0, [r7, #4]
 81119d2:	f000 f8f1 	bl	8111bb8 <SDMMC_GetCmdResp1>
 81119d6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 81119d8:	69fb      	ldr	r3, [r7, #28]
}
 81119da:	4618      	mov	r0, r3
 81119dc:	3720      	adds	r7, #32
 81119de:	46bd      	mov	sp, r7
 81119e0:	bd80      	pop	{r7, pc}

081119e2 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 81119e2:	b580      	push	{r7, lr}
 81119e4:	b088      	sub	sp, #32
 81119e6:	af00      	add	r7, sp, #0
 81119e8:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 81119ea:	2300      	movs	r3, #0
 81119ec:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 81119ee:	2333      	movs	r3, #51	; 0x33
 81119f0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 81119f2:	f44f 7380 	mov.w	r3, #256	; 0x100
 81119f6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 81119f8:	2300      	movs	r3, #0
 81119fa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 81119fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8111a00:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8111a02:	f107 0308 	add.w	r3, r7, #8
 8111a06:	4619      	mov	r1, r3
 8111a08:	6878      	ldr	r0, [r7, #4]
 8111a0a:	f7ff fdc1 	bl	8111590 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 8111a0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8111a12:	2133      	movs	r1, #51	; 0x33
 8111a14:	6878      	ldr	r0, [r7, #4]
 8111a16:	f000 f8cf 	bl	8111bb8 <SDMMC_GetCmdResp1>
 8111a1a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8111a1c:	69fb      	ldr	r3, [r7, #28]
}
 8111a1e:	4618      	mov	r0, r3
 8111a20:	3720      	adds	r7, #32
 8111a22:	46bd      	mov	sp, r7
 8111a24:	bd80      	pop	{r7, pc}

08111a26 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8111a26:	b580      	push	{r7, lr}
 8111a28:	b088      	sub	sp, #32
 8111a2a:	af00      	add	r7, sp, #0
 8111a2c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8111a2e:	2300      	movs	r3, #0
 8111a30:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8111a32:	2302      	movs	r3, #2
 8111a34:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8111a36:	f44f 7340 	mov.w	r3, #768	; 0x300
 8111a3a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8111a3c:	2300      	movs	r3, #0
 8111a3e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8111a40:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8111a44:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8111a46:	f107 0308 	add.w	r3, r7, #8
 8111a4a:	4619      	mov	r1, r3
 8111a4c:	6878      	ldr	r0, [r7, #4]
 8111a4e:	f7ff fd9f 	bl	8111590 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8111a52:	6878      	ldr	r0, [r7, #4]
 8111a54:	f000 f9a2 	bl	8111d9c <SDMMC_GetCmdResp2>
 8111a58:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8111a5a:	69fb      	ldr	r3, [r7, #28]
}
 8111a5c:	4618      	mov	r0, r3
 8111a5e:	3720      	adds	r7, #32
 8111a60:	46bd      	mov	sp, r7
 8111a62:	bd80      	pop	{r7, pc}

08111a64 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8111a64:	b580      	push	{r7, lr}
 8111a66:	b088      	sub	sp, #32
 8111a68:	af00      	add	r7, sp, #0
 8111a6a:	6078      	str	r0, [r7, #4]
 8111a6c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8111a6e:	683b      	ldr	r3, [r7, #0]
 8111a70:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8111a72:	2309      	movs	r3, #9
 8111a74:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8111a76:	f44f 7340 	mov.w	r3, #768	; 0x300
 8111a7a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8111a7c:	2300      	movs	r3, #0
 8111a7e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8111a80:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8111a84:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8111a86:	f107 0308 	add.w	r3, r7, #8
 8111a8a:	4619      	mov	r1, r3
 8111a8c:	6878      	ldr	r0, [r7, #4]
 8111a8e:	f7ff fd7f 	bl	8111590 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8111a92:	6878      	ldr	r0, [r7, #4]
 8111a94:	f000 f982 	bl	8111d9c <SDMMC_GetCmdResp2>
 8111a98:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8111a9a:	69fb      	ldr	r3, [r7, #28]
}
 8111a9c:	4618      	mov	r0, r3
 8111a9e:	3720      	adds	r7, #32
 8111aa0:	46bd      	mov	sp, r7
 8111aa2:	bd80      	pop	{r7, pc}

08111aa4 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8111aa4:	b580      	push	{r7, lr}
 8111aa6:	b088      	sub	sp, #32
 8111aa8:	af00      	add	r7, sp, #0
 8111aaa:	6078      	str	r0, [r7, #4]
 8111aac:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8111aae:	2300      	movs	r3, #0
 8111ab0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8111ab2:	2303      	movs	r3, #3
 8111ab4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8111ab6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8111aba:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8111abc:	2300      	movs	r3, #0
 8111abe:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8111ac0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8111ac4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8111ac6:	f107 0308 	add.w	r3, r7, #8
 8111aca:	4619      	mov	r1, r3
 8111acc:	6878      	ldr	r0, [r7, #4]
 8111ace:	f7ff fd5f 	bl	8111590 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8111ad2:	683a      	ldr	r2, [r7, #0]
 8111ad4:	2103      	movs	r1, #3
 8111ad6:	6878      	ldr	r0, [r7, #4]
 8111ad8:	f000 f9ea 	bl	8111eb0 <SDMMC_GetCmdResp6>
 8111adc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8111ade:	69fb      	ldr	r3, [r7, #28]
}
 8111ae0:	4618      	mov	r0, r3
 8111ae2:	3720      	adds	r7, #32
 8111ae4:	46bd      	mov	sp, r7
 8111ae6:	bd80      	pop	{r7, pc}

08111ae8 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8111ae8:	b580      	push	{r7, lr}
 8111aea:	b088      	sub	sp, #32
 8111aec:	af00      	add	r7, sp, #0
 8111aee:	6078      	str	r0, [r7, #4]
 8111af0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8111af2:	683b      	ldr	r3, [r7, #0]
 8111af4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8111af6:	230d      	movs	r3, #13
 8111af8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8111afa:	f44f 7380 	mov.w	r3, #256	; 0x100
 8111afe:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8111b00:	2300      	movs	r3, #0
 8111b02:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8111b04:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8111b08:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8111b0a:	f107 0308 	add.w	r3, r7, #8
 8111b0e:	4619      	mov	r1, r3
 8111b10:	6878      	ldr	r0, [r7, #4]
 8111b12:	f7ff fd3d 	bl	8111590 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8111b16:	f241 3288 	movw	r2, #5000	; 0x1388
 8111b1a:	210d      	movs	r1, #13
 8111b1c:	6878      	ldr	r0, [r7, #4]
 8111b1e:	f000 f84b 	bl	8111bb8 <SDMMC_GetCmdResp1>
 8111b22:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8111b24:	69fb      	ldr	r3, [r7, #28]
}
 8111b26:	4618      	mov	r0, r3
 8111b28:	3720      	adds	r7, #32
 8111b2a:	46bd      	mov	sp, r7
 8111b2c:	bd80      	pop	{r7, pc}

08111b2e <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 8111b2e:	b580      	push	{r7, lr}
 8111b30:	b088      	sub	sp, #32
 8111b32:	af00      	add	r7, sp, #0
 8111b34:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8111b36:	2300      	movs	r3, #0
 8111b38:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 8111b3a:	230d      	movs	r3, #13
 8111b3c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8111b3e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8111b42:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8111b44:	2300      	movs	r3, #0
 8111b46:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8111b48:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8111b4c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8111b4e:	f107 0308 	add.w	r3, r7, #8
 8111b52:	4619      	mov	r1, r3
 8111b54:	6878      	ldr	r0, [r7, #4]
 8111b56:	f7ff fd1b 	bl	8111590 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 8111b5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8111b5e:	210d      	movs	r1, #13
 8111b60:	6878      	ldr	r0, [r7, #4]
 8111b62:	f000 f829 	bl	8111bb8 <SDMMC_GetCmdResp1>
 8111b66:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8111b68:	69fb      	ldr	r3, [r7, #28]
}
 8111b6a:	4618      	mov	r0, r3
 8111b6c:	3720      	adds	r7, #32
 8111b6e:	46bd      	mov	sp, r7
 8111b70:	bd80      	pop	{r7, pc}

08111b72 <SDMMC_CmdVoltageSwitch>:
  *         condition register (OCR)
  * @param  None
  * @retval HAL status
  */
uint32_t SDMMC_CmdVoltageSwitch(SDMMC_TypeDef *SDMMCx)
{
 8111b72:	b580      	push	{r7, lr}
 8111b74:	b088      	sub	sp, #32
 8111b76:	af00      	add	r7, sp, #0
 8111b78:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0x00000000;
 8111b7a:	2300      	movs	r3, #0
 8111b7c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_VOLTAGE_SWITCH;
 8111b7e:	230b      	movs	r3, #11
 8111b80:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8111b82:	f44f 7380 	mov.w	r3, #256	; 0x100
 8111b86:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8111b88:	2300      	movs	r3, #0
 8111b8a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8111b8c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8111b90:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8111b92:	f107 0308 	add.w	r3, r7, #8
 8111b96:	4619      	mov	r1, r3
 8111b98:	6878      	ldr	r0, [r7, #4]
 8111b9a:	f7ff fcf9 	bl	8111590 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_VOLTAGE_SWITCH, SDMMC_CMDTIMEOUT);
 8111b9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8111ba2:	210b      	movs	r1, #11
 8111ba4:	6878      	ldr	r0, [r7, #4]
 8111ba6:	f000 f807 	bl	8111bb8 <SDMMC_GetCmdResp1>
 8111baa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8111bac:	69fb      	ldr	r3, [r7, #28]
}
 8111bae:	4618      	mov	r0, r3
 8111bb0:	3720      	adds	r7, #32
 8111bb2:	46bd      	mov	sp, r7
 8111bb4:	bd80      	pop	{r7, pc}
	...

08111bb8 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8111bb8:	b580      	push	{r7, lr}
 8111bba:	b088      	sub	sp, #32
 8111bbc:	af00      	add	r7, sp, #0
 8111bbe:	60f8      	str	r0, [r7, #12]
 8111bc0:	460b      	mov	r3, r1
 8111bc2:	607a      	str	r2, [r7, #4]
 8111bc4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8111bc6:	4b70      	ldr	r3, [pc, #448]	; (8111d88 <SDMMC_GetCmdResp1+0x1d0>)
 8111bc8:	681b      	ldr	r3, [r3, #0]
 8111bca:	4a70      	ldr	r2, [pc, #448]	; (8111d8c <SDMMC_GetCmdResp1+0x1d4>)
 8111bcc:	fba2 2303 	umull	r2, r3, r2, r3
 8111bd0:	0a5a      	lsrs	r2, r3, #9
 8111bd2:	687b      	ldr	r3, [r7, #4]
 8111bd4:	fb02 f303 	mul.w	r3, r2, r3
 8111bd8:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8111bda:	69fb      	ldr	r3, [r7, #28]
 8111bdc:	1e5a      	subs	r2, r3, #1
 8111bde:	61fa      	str	r2, [r7, #28]
 8111be0:	2b00      	cmp	r3, #0
 8111be2:	d102      	bne.n	8111bea <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8111be4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8111be8:	e0c9      	b.n	8111d7e <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 8111bea:	68fb      	ldr	r3, [r7, #12]
 8111bec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8111bee:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 8111bf0:	69ba      	ldr	r2, [r7, #24]
 8111bf2:	4b67      	ldr	r3, [pc, #412]	; (8111d90 <SDMMC_GetCmdResp1+0x1d8>)
 8111bf4:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8111bf6:	2b00      	cmp	r3, #0
 8111bf8:	d0ef      	beq.n	8111bda <SDMMC_GetCmdResp1+0x22>
 8111bfa:	69bb      	ldr	r3, [r7, #24]
 8111bfc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8111c00:	2b00      	cmp	r3, #0
 8111c02:	d1ea      	bne.n	8111bda <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8111c04:	68fb      	ldr	r3, [r7, #12]
 8111c06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8111c08:	f003 0304 	and.w	r3, r3, #4
 8111c0c:	2b00      	cmp	r3, #0
 8111c0e:	d004      	beq.n	8111c1a <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8111c10:	68fb      	ldr	r3, [r7, #12]
 8111c12:	2204      	movs	r2, #4
 8111c14:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8111c16:	2304      	movs	r3, #4
 8111c18:	e0b1      	b.n	8111d7e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8111c1a:	68fb      	ldr	r3, [r7, #12]
 8111c1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8111c1e:	f003 0301 	and.w	r3, r3, #1
 8111c22:	2b00      	cmp	r3, #0
 8111c24:	d004      	beq.n	8111c30 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8111c26:	68fb      	ldr	r3, [r7, #12]
 8111c28:	2201      	movs	r2, #1
 8111c2a:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8111c2c:	2301      	movs	r3, #1
 8111c2e:	e0a6      	b.n	8111d7e <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8111c30:	68fb      	ldr	r3, [r7, #12]
 8111c32:	4a58      	ldr	r2, [pc, #352]	; (8111d94 <SDMMC_GetCmdResp1+0x1dc>)
 8111c34:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8111c36:	68f8      	ldr	r0, [r7, #12]
 8111c38:	f7ff fcd4 	bl	81115e4 <SDMMC_GetCommandResponse>
 8111c3c:	4603      	mov	r3, r0
 8111c3e:	461a      	mov	r2, r3
 8111c40:	7afb      	ldrb	r3, [r7, #11]
 8111c42:	4293      	cmp	r3, r2
 8111c44:	d001      	beq.n	8111c4a <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8111c46:	2301      	movs	r3, #1
 8111c48:	e099      	b.n	8111d7e <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8111c4a:	2100      	movs	r1, #0
 8111c4c:	68f8      	ldr	r0, [r7, #12]
 8111c4e:	f7ff fcd6 	bl	81115fe <SDMMC_GetResponse>
 8111c52:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8111c54:	697a      	ldr	r2, [r7, #20]
 8111c56:	4b50      	ldr	r3, [pc, #320]	; (8111d98 <SDMMC_GetCmdResp1+0x1e0>)
 8111c58:	4013      	ands	r3, r2
 8111c5a:	2b00      	cmp	r3, #0
 8111c5c:	d101      	bne.n	8111c62 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8111c5e:	2300      	movs	r3, #0
 8111c60:	e08d      	b.n	8111d7e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8111c62:	697b      	ldr	r3, [r7, #20]
 8111c64:	2b00      	cmp	r3, #0
 8111c66:	da02      	bge.n	8111c6e <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8111c68:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8111c6c:	e087      	b.n	8111d7e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8111c6e:	697b      	ldr	r3, [r7, #20]
 8111c70:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8111c74:	2b00      	cmp	r3, #0
 8111c76:	d001      	beq.n	8111c7c <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8111c78:	2340      	movs	r3, #64	; 0x40
 8111c7a:	e080      	b.n	8111d7e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8111c7c:	697b      	ldr	r3, [r7, #20]
 8111c7e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8111c82:	2b00      	cmp	r3, #0
 8111c84:	d001      	beq.n	8111c8a <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8111c86:	2380      	movs	r3, #128	; 0x80
 8111c88:	e079      	b.n	8111d7e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8111c8a:	697b      	ldr	r3, [r7, #20]
 8111c8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8111c90:	2b00      	cmp	r3, #0
 8111c92:	d002      	beq.n	8111c9a <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8111c94:	f44f 7380 	mov.w	r3, #256	; 0x100
 8111c98:	e071      	b.n	8111d7e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8111c9a:	697b      	ldr	r3, [r7, #20]
 8111c9c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8111ca0:	2b00      	cmp	r3, #0
 8111ca2:	d002      	beq.n	8111caa <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8111ca4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8111ca8:	e069      	b.n	8111d7e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8111caa:	697b      	ldr	r3, [r7, #20]
 8111cac:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8111cb0:	2b00      	cmp	r3, #0
 8111cb2:	d002      	beq.n	8111cba <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8111cb4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8111cb8:	e061      	b.n	8111d7e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8111cba:	697b      	ldr	r3, [r7, #20]
 8111cbc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8111cc0:	2b00      	cmp	r3, #0
 8111cc2:	d002      	beq.n	8111cca <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8111cc4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8111cc8:	e059      	b.n	8111d7e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8111cca:	697b      	ldr	r3, [r7, #20]
 8111ccc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8111cd0:	2b00      	cmp	r3, #0
 8111cd2:	d002      	beq.n	8111cda <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8111cd4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8111cd8:	e051      	b.n	8111d7e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8111cda:	697b      	ldr	r3, [r7, #20]
 8111cdc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8111ce0:	2b00      	cmp	r3, #0
 8111ce2:	d002      	beq.n	8111cea <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8111ce4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8111ce8:	e049      	b.n	8111d7e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8111cea:	697b      	ldr	r3, [r7, #20]
 8111cec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8111cf0:	2b00      	cmp	r3, #0
 8111cf2:	d002      	beq.n	8111cfa <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8111cf4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8111cf8:	e041      	b.n	8111d7e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8111cfa:	697b      	ldr	r3, [r7, #20]
 8111cfc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8111d00:	2b00      	cmp	r3, #0
 8111d02:	d002      	beq.n	8111d0a <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8111d04:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8111d08:	e039      	b.n	8111d7e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8111d0a:	697b      	ldr	r3, [r7, #20]
 8111d0c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8111d10:	2b00      	cmp	r3, #0
 8111d12:	d002      	beq.n	8111d1a <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8111d14:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8111d18:	e031      	b.n	8111d7e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8111d1a:	697b      	ldr	r3, [r7, #20]
 8111d1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8111d20:	2b00      	cmp	r3, #0
 8111d22:	d002      	beq.n	8111d2a <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8111d24:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8111d28:	e029      	b.n	8111d7e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8111d2a:	697b      	ldr	r3, [r7, #20]
 8111d2c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8111d30:	2b00      	cmp	r3, #0
 8111d32:	d002      	beq.n	8111d3a <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8111d34:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8111d38:	e021      	b.n	8111d7e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8111d3a:	697b      	ldr	r3, [r7, #20]
 8111d3c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8111d40:	2b00      	cmp	r3, #0
 8111d42:	d002      	beq.n	8111d4a <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8111d44:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8111d48:	e019      	b.n	8111d7e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8111d4a:	697b      	ldr	r3, [r7, #20]
 8111d4c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8111d50:	2b00      	cmp	r3, #0
 8111d52:	d002      	beq.n	8111d5a <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8111d54:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8111d58:	e011      	b.n	8111d7e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8111d5a:	697b      	ldr	r3, [r7, #20]
 8111d5c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8111d60:	2b00      	cmp	r3, #0
 8111d62:	d002      	beq.n	8111d6a <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8111d64:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8111d68:	e009      	b.n	8111d7e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8111d6a:	697b      	ldr	r3, [r7, #20]
 8111d6c:	f003 0308 	and.w	r3, r3, #8
 8111d70:	2b00      	cmp	r3, #0
 8111d72:	d002      	beq.n	8111d7a <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8111d74:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8111d78:	e001      	b.n	8111d7e <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8111d7a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8111d7e:	4618      	mov	r0, r3
 8111d80:	3720      	adds	r7, #32
 8111d82:	46bd      	mov	sp, r7
 8111d84:	bd80      	pop	{r7, pc}
 8111d86:	bf00      	nop
 8111d88:	10000000 	.word	0x10000000
 8111d8c:	10624dd3 	.word	0x10624dd3
 8111d90:	00200045 	.word	0x00200045
 8111d94:	002000c5 	.word	0x002000c5
 8111d98:	fdffe008 	.word	0xfdffe008

08111d9c <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8111d9c:	b480      	push	{r7}
 8111d9e:	b085      	sub	sp, #20
 8111da0:	af00      	add	r7, sp, #0
 8111da2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8111da4:	4b1f      	ldr	r3, [pc, #124]	; (8111e24 <SDMMC_GetCmdResp2+0x88>)
 8111da6:	681b      	ldr	r3, [r3, #0]
 8111da8:	4a1f      	ldr	r2, [pc, #124]	; (8111e28 <SDMMC_GetCmdResp2+0x8c>)
 8111daa:	fba2 2303 	umull	r2, r3, r2, r3
 8111dae:	0a5b      	lsrs	r3, r3, #9
 8111db0:	f241 3288 	movw	r2, #5000	; 0x1388
 8111db4:	fb02 f303 	mul.w	r3, r2, r3
 8111db8:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8111dba:	68fb      	ldr	r3, [r7, #12]
 8111dbc:	1e5a      	subs	r2, r3, #1
 8111dbe:	60fa      	str	r2, [r7, #12]
 8111dc0:	2b00      	cmp	r3, #0
 8111dc2:	d102      	bne.n	8111dca <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8111dc4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8111dc8:	e026      	b.n	8111e18 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 8111dca:	687b      	ldr	r3, [r7, #4]
 8111dcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8111dce:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8111dd0:	68bb      	ldr	r3, [r7, #8]
 8111dd2:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8111dd6:	2b00      	cmp	r3, #0
 8111dd8:	d0ef      	beq.n	8111dba <SDMMC_GetCmdResp2+0x1e>
 8111dda:	68bb      	ldr	r3, [r7, #8]
 8111ddc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8111de0:	2b00      	cmp	r3, #0
 8111de2:	d1ea      	bne.n	8111dba <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8111de4:	687b      	ldr	r3, [r7, #4]
 8111de6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8111de8:	f003 0304 	and.w	r3, r3, #4
 8111dec:	2b00      	cmp	r3, #0
 8111dee:	d004      	beq.n	8111dfa <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8111df0:	687b      	ldr	r3, [r7, #4]
 8111df2:	2204      	movs	r2, #4
 8111df4:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8111df6:	2304      	movs	r3, #4
 8111df8:	e00e      	b.n	8111e18 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8111dfa:	687b      	ldr	r3, [r7, #4]
 8111dfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8111dfe:	f003 0301 	and.w	r3, r3, #1
 8111e02:	2b00      	cmp	r3, #0
 8111e04:	d004      	beq.n	8111e10 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8111e06:	687b      	ldr	r3, [r7, #4]
 8111e08:	2201      	movs	r2, #1
 8111e0a:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8111e0c:	2301      	movs	r3, #1
 8111e0e:	e003      	b.n	8111e18 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8111e10:	687b      	ldr	r3, [r7, #4]
 8111e12:	4a06      	ldr	r2, [pc, #24]	; (8111e2c <SDMMC_GetCmdResp2+0x90>)
 8111e14:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8111e16:	2300      	movs	r3, #0
}
 8111e18:	4618      	mov	r0, r3
 8111e1a:	3714      	adds	r7, #20
 8111e1c:	46bd      	mov	sp, r7
 8111e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8111e22:	4770      	bx	lr
 8111e24:	10000000 	.word	0x10000000
 8111e28:	10624dd3 	.word	0x10624dd3
 8111e2c:	002000c5 	.word	0x002000c5

08111e30 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8111e30:	b480      	push	{r7}
 8111e32:	b085      	sub	sp, #20
 8111e34:	af00      	add	r7, sp, #0
 8111e36:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8111e38:	4b1a      	ldr	r3, [pc, #104]	; (8111ea4 <SDMMC_GetCmdResp3+0x74>)
 8111e3a:	681b      	ldr	r3, [r3, #0]
 8111e3c:	4a1a      	ldr	r2, [pc, #104]	; (8111ea8 <SDMMC_GetCmdResp3+0x78>)
 8111e3e:	fba2 2303 	umull	r2, r3, r2, r3
 8111e42:	0a5b      	lsrs	r3, r3, #9
 8111e44:	f241 3288 	movw	r2, #5000	; 0x1388
 8111e48:	fb02 f303 	mul.w	r3, r2, r3
 8111e4c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8111e4e:	68fb      	ldr	r3, [r7, #12]
 8111e50:	1e5a      	subs	r2, r3, #1
 8111e52:	60fa      	str	r2, [r7, #12]
 8111e54:	2b00      	cmp	r3, #0
 8111e56:	d102      	bne.n	8111e5e <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8111e58:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8111e5c:	e01b      	b.n	8111e96 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 8111e5e:	687b      	ldr	r3, [r7, #4]
 8111e60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8111e62:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8111e64:	68bb      	ldr	r3, [r7, #8]
 8111e66:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8111e6a:	2b00      	cmp	r3, #0
 8111e6c:	d0ef      	beq.n	8111e4e <SDMMC_GetCmdResp3+0x1e>
 8111e6e:	68bb      	ldr	r3, [r7, #8]
 8111e70:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8111e74:	2b00      	cmp	r3, #0
 8111e76:	d1ea      	bne.n	8111e4e <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8111e78:	687b      	ldr	r3, [r7, #4]
 8111e7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8111e7c:	f003 0304 	and.w	r3, r3, #4
 8111e80:	2b00      	cmp	r3, #0
 8111e82:	d004      	beq.n	8111e8e <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8111e84:	687b      	ldr	r3, [r7, #4]
 8111e86:	2204      	movs	r2, #4
 8111e88:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8111e8a:	2304      	movs	r3, #4
 8111e8c:	e003      	b.n	8111e96 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8111e8e:	687b      	ldr	r3, [r7, #4]
 8111e90:	4a06      	ldr	r2, [pc, #24]	; (8111eac <SDMMC_GetCmdResp3+0x7c>)
 8111e92:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8111e94:	2300      	movs	r3, #0
}
 8111e96:	4618      	mov	r0, r3
 8111e98:	3714      	adds	r7, #20
 8111e9a:	46bd      	mov	sp, r7
 8111e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8111ea0:	4770      	bx	lr
 8111ea2:	bf00      	nop
 8111ea4:	10000000 	.word	0x10000000
 8111ea8:	10624dd3 	.word	0x10624dd3
 8111eac:	002000c5 	.word	0x002000c5

08111eb0 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8111eb0:	b580      	push	{r7, lr}
 8111eb2:	b088      	sub	sp, #32
 8111eb4:	af00      	add	r7, sp, #0
 8111eb6:	60f8      	str	r0, [r7, #12]
 8111eb8:	460b      	mov	r3, r1
 8111eba:	607a      	str	r2, [r7, #4]
 8111ebc:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8111ebe:	4b35      	ldr	r3, [pc, #212]	; (8111f94 <SDMMC_GetCmdResp6+0xe4>)
 8111ec0:	681b      	ldr	r3, [r3, #0]
 8111ec2:	4a35      	ldr	r2, [pc, #212]	; (8111f98 <SDMMC_GetCmdResp6+0xe8>)
 8111ec4:	fba2 2303 	umull	r2, r3, r2, r3
 8111ec8:	0a5b      	lsrs	r3, r3, #9
 8111eca:	f241 3288 	movw	r2, #5000	; 0x1388
 8111ece:	fb02 f303 	mul.w	r3, r2, r3
 8111ed2:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8111ed4:	69fb      	ldr	r3, [r7, #28]
 8111ed6:	1e5a      	subs	r2, r3, #1
 8111ed8:	61fa      	str	r2, [r7, #28]
 8111eda:	2b00      	cmp	r3, #0
 8111edc:	d102      	bne.n	8111ee4 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8111ede:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8111ee2:	e052      	b.n	8111f8a <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 8111ee4:	68fb      	ldr	r3, [r7, #12]
 8111ee6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8111ee8:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8111eea:	69bb      	ldr	r3, [r7, #24]
 8111eec:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8111ef0:	2b00      	cmp	r3, #0
 8111ef2:	d0ef      	beq.n	8111ed4 <SDMMC_GetCmdResp6+0x24>
 8111ef4:	69bb      	ldr	r3, [r7, #24]
 8111ef6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8111efa:	2b00      	cmp	r3, #0
 8111efc:	d1ea      	bne.n	8111ed4 <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8111efe:	68fb      	ldr	r3, [r7, #12]
 8111f00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8111f02:	f003 0304 	and.w	r3, r3, #4
 8111f06:	2b00      	cmp	r3, #0
 8111f08:	d004      	beq.n	8111f14 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8111f0a:	68fb      	ldr	r3, [r7, #12]
 8111f0c:	2204      	movs	r2, #4
 8111f0e:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8111f10:	2304      	movs	r3, #4
 8111f12:	e03a      	b.n	8111f8a <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8111f14:	68fb      	ldr	r3, [r7, #12]
 8111f16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8111f18:	f003 0301 	and.w	r3, r3, #1
 8111f1c:	2b00      	cmp	r3, #0
 8111f1e:	d004      	beq.n	8111f2a <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8111f20:	68fb      	ldr	r3, [r7, #12]
 8111f22:	2201      	movs	r2, #1
 8111f24:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8111f26:	2301      	movs	r3, #1
 8111f28:	e02f      	b.n	8111f8a <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8111f2a:	68f8      	ldr	r0, [r7, #12]
 8111f2c:	f7ff fb5a 	bl	81115e4 <SDMMC_GetCommandResponse>
 8111f30:	4603      	mov	r3, r0
 8111f32:	461a      	mov	r2, r3
 8111f34:	7afb      	ldrb	r3, [r7, #11]
 8111f36:	4293      	cmp	r3, r2
 8111f38:	d001      	beq.n	8111f3e <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8111f3a:	2301      	movs	r3, #1
 8111f3c:	e025      	b.n	8111f8a <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8111f3e:	68fb      	ldr	r3, [r7, #12]
 8111f40:	4a16      	ldr	r2, [pc, #88]	; (8111f9c <SDMMC_GetCmdResp6+0xec>)
 8111f42:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8111f44:	2100      	movs	r1, #0
 8111f46:	68f8      	ldr	r0, [r7, #12]
 8111f48:	f7ff fb59 	bl	81115fe <SDMMC_GetResponse>
 8111f4c:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 8111f4e:	697b      	ldr	r3, [r7, #20]
 8111f50:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8111f54:	2b00      	cmp	r3, #0
 8111f56:	d106      	bne.n	8111f66 <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 8111f58:	697b      	ldr	r3, [r7, #20]
 8111f5a:	0c1b      	lsrs	r3, r3, #16
 8111f5c:	b29a      	uxth	r2, r3
 8111f5e:	687b      	ldr	r3, [r7, #4]
 8111f60:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 8111f62:	2300      	movs	r3, #0
 8111f64:	e011      	b.n	8111f8a <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8111f66:	697b      	ldr	r3, [r7, #20]
 8111f68:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8111f6c:	2b00      	cmp	r3, #0
 8111f6e:	d002      	beq.n	8111f76 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8111f70:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8111f74:	e009      	b.n	8111f8a <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8111f76:	697b      	ldr	r3, [r7, #20]
 8111f78:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8111f7c:	2b00      	cmp	r3, #0
 8111f7e:	d002      	beq.n	8111f86 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8111f80:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8111f84:	e001      	b.n	8111f8a <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8111f86:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8111f8a:	4618      	mov	r0, r3
 8111f8c:	3720      	adds	r7, #32
 8111f8e:	46bd      	mov	sp, r7
 8111f90:	bd80      	pop	{r7, pc}
 8111f92:	bf00      	nop
 8111f94:	10000000 	.word	0x10000000
 8111f98:	10624dd3 	.word	0x10624dd3
 8111f9c:	002000c5 	.word	0x002000c5

08111fa0 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8111fa0:	b480      	push	{r7}
 8111fa2:	b085      	sub	sp, #20
 8111fa4:	af00      	add	r7, sp, #0
 8111fa6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8111fa8:	4b22      	ldr	r3, [pc, #136]	; (8112034 <SDMMC_GetCmdResp7+0x94>)
 8111faa:	681b      	ldr	r3, [r3, #0]
 8111fac:	4a22      	ldr	r2, [pc, #136]	; (8112038 <SDMMC_GetCmdResp7+0x98>)
 8111fae:	fba2 2303 	umull	r2, r3, r2, r3
 8111fb2:	0a5b      	lsrs	r3, r3, #9
 8111fb4:	f241 3288 	movw	r2, #5000	; 0x1388
 8111fb8:	fb02 f303 	mul.w	r3, r2, r3
 8111fbc:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8111fbe:	68fb      	ldr	r3, [r7, #12]
 8111fc0:	1e5a      	subs	r2, r3, #1
 8111fc2:	60fa      	str	r2, [r7, #12]
 8111fc4:	2b00      	cmp	r3, #0
 8111fc6:	d102      	bne.n	8111fce <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8111fc8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8111fcc:	e02c      	b.n	8112028 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 8111fce:	687b      	ldr	r3, [r7, #4]
 8111fd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8111fd2:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8111fd4:	68bb      	ldr	r3, [r7, #8]
 8111fd6:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8111fda:	2b00      	cmp	r3, #0
 8111fdc:	d0ef      	beq.n	8111fbe <SDMMC_GetCmdResp7+0x1e>
 8111fde:	68bb      	ldr	r3, [r7, #8]
 8111fe0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8111fe4:	2b00      	cmp	r3, #0
 8111fe6:	d1ea      	bne.n	8111fbe <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8111fe8:	687b      	ldr	r3, [r7, #4]
 8111fea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8111fec:	f003 0304 	and.w	r3, r3, #4
 8111ff0:	2b00      	cmp	r3, #0
 8111ff2:	d004      	beq.n	8111ffe <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8111ff4:	687b      	ldr	r3, [r7, #4]
 8111ff6:	2204      	movs	r2, #4
 8111ff8:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8111ffa:	2304      	movs	r3, #4
 8111ffc:	e014      	b.n	8112028 <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8111ffe:	687b      	ldr	r3, [r7, #4]
 8112000:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8112002:	f003 0301 	and.w	r3, r3, #1
 8112006:	2b00      	cmp	r3, #0
 8112008:	d004      	beq.n	8112014 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 811200a:	687b      	ldr	r3, [r7, #4]
 811200c:	2201      	movs	r2, #1
 811200e:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8112010:	2301      	movs	r3, #1
 8112012:	e009      	b.n	8112028 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8112014:	687b      	ldr	r3, [r7, #4]
 8112016:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8112018:	f003 0340 	and.w	r3, r3, #64	; 0x40
 811201c:	2b00      	cmp	r3, #0
 811201e:	d002      	beq.n	8112026 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8112020:	687b      	ldr	r3, [r7, #4]
 8112022:	2240      	movs	r2, #64	; 0x40
 8112024:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8112026:	2300      	movs	r3, #0

}
 8112028:	4618      	mov	r0, r3
 811202a:	3714      	adds	r7, #20
 811202c:	46bd      	mov	sp, r7
 811202e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8112032:	4770      	bx	lr
 8112034:	10000000 	.word	0x10000000
 8112038:	10624dd3 	.word	0x10624dd3

0811203c <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 811203c:	b480      	push	{r7}
 811203e:	b085      	sub	sp, #20
 8112040:	af00      	add	r7, sp, #0
 8112042:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8112044:	4b11      	ldr	r3, [pc, #68]	; (811208c <SDMMC_GetCmdError+0x50>)
 8112046:	681b      	ldr	r3, [r3, #0]
 8112048:	4a11      	ldr	r2, [pc, #68]	; (8112090 <SDMMC_GetCmdError+0x54>)
 811204a:	fba2 2303 	umull	r2, r3, r2, r3
 811204e:	0a5b      	lsrs	r3, r3, #9
 8112050:	f241 3288 	movw	r2, #5000	; 0x1388
 8112054:	fb02 f303 	mul.w	r3, r2, r3
 8112058:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 811205a:	68fb      	ldr	r3, [r7, #12]
 811205c:	1e5a      	subs	r2, r3, #1
 811205e:	60fa      	str	r2, [r7, #12]
 8112060:	2b00      	cmp	r3, #0
 8112062:	d102      	bne.n	811206a <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8112064:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8112068:	e009      	b.n	811207e <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 811206a:	687b      	ldr	r3, [r7, #4]
 811206c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 811206e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8112072:	2b00      	cmp	r3, #0
 8112074:	d0f1      	beq.n	811205a <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8112076:	687b      	ldr	r3, [r7, #4]
 8112078:	4a06      	ldr	r2, [pc, #24]	; (8112094 <SDMMC_GetCmdError+0x58>)
 811207a:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 811207c:	2300      	movs	r3, #0
}
 811207e:	4618      	mov	r0, r3
 8112080:	3714      	adds	r7, #20
 8112082:	46bd      	mov	sp, r7
 8112084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8112088:	4770      	bx	lr
 811208a:	bf00      	nop
 811208c:	10000000 	.word	0x10000000
 8112090:	10624dd3 	.word	0x10624dd3
 8112094:	002000c5 	.word	0x002000c5

08112098 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8112098:	b084      	sub	sp, #16
 811209a:	b580      	push	{r7, lr}
 811209c:	b084      	sub	sp, #16
 811209e:	af00      	add	r7, sp, #0
 81120a0:	6078      	str	r0, [r7, #4]
 81120a2:	f107 001c 	add.w	r0, r7, #28
 81120a6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 81120aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81120ac:	2b01      	cmp	r3, #1
 81120ae:	d122      	bne.n	81120f6 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 81120b0:	687b      	ldr	r3, [r7, #4]
 81120b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81120b4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 81120b8:	687b      	ldr	r3, [r7, #4]
 81120ba:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 81120bc:	687b      	ldr	r3, [r7, #4]
 81120be:	68db      	ldr	r3, [r3, #12]
 81120c0:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 81120c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 81120c8:	687a      	ldr	r2, [r7, #4]
 81120ca:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 81120cc:	687b      	ldr	r3, [r7, #4]
 81120ce:	68db      	ldr	r3, [r3, #12]
 81120d0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 81120d4:	687b      	ldr	r3, [r7, #4]
 81120d6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 81120d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 81120da:	2b01      	cmp	r3, #1
 81120dc:	d105      	bne.n	81120ea <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 81120de:	687b      	ldr	r3, [r7, #4]
 81120e0:	68db      	ldr	r3, [r3, #12]
 81120e2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 81120e6:	687b      	ldr	r3, [r7, #4]
 81120e8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 81120ea:	6878      	ldr	r0, [r7, #4]
 81120ec:	f001 fb04 	bl	81136f8 <USB_CoreReset>
 81120f0:	4603      	mov	r3, r0
 81120f2:	73fb      	strb	r3, [r7, #15]
 81120f4:	e01a      	b.n	811212c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 81120f6:	687b      	ldr	r3, [r7, #4]
 81120f8:	68db      	ldr	r3, [r3, #12]
 81120fa:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 81120fe:	687b      	ldr	r3, [r7, #4]
 8112100:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8112102:	6878      	ldr	r0, [r7, #4]
 8112104:	f001 faf8 	bl	81136f8 <USB_CoreReset>
 8112108:	4603      	mov	r3, r0
 811210a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 811210c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 811210e:	2b00      	cmp	r3, #0
 8112110:	d106      	bne.n	8112120 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8112112:	687b      	ldr	r3, [r7, #4]
 8112114:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8112116:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 811211a:	687b      	ldr	r3, [r7, #4]
 811211c:	639a      	str	r2, [r3, #56]	; 0x38
 811211e:	e005      	b.n	811212c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8112120:	687b      	ldr	r3, [r7, #4]
 8112122:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8112124:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8112128:	687b      	ldr	r3, [r7, #4]
 811212a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 811212c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 811212e:	2b01      	cmp	r3, #1
 8112130:	d118      	bne.n	8112164 <USB_CoreInit+0xcc>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8112132:	687b      	ldr	r3, [r7, #4]
 8112134:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8112136:	b29a      	uxth	r2, r3
 8112138:	687b      	ldr	r3, [r7, #4]
 811213a:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 811213c:	687b      	ldr	r3, [r7, #4]
 811213e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8112140:	f043 737b 	orr.w	r3, r3, #65798144	; 0x3ec0000
 8112144:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8112148:	687a      	ldr	r2, [r7, #4]
 811214a:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 811214c:	687b      	ldr	r3, [r7, #4]
 811214e:	689b      	ldr	r3, [r3, #8]
 8112150:	f043 0206 	orr.w	r2, r3, #6
 8112154:	687b      	ldr	r3, [r7, #4]
 8112156:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8112158:	687b      	ldr	r3, [r7, #4]
 811215a:	689b      	ldr	r3, [r3, #8]
 811215c:	f043 0220 	orr.w	r2, r3, #32
 8112160:	687b      	ldr	r3, [r7, #4]
 8112162:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8112164:	7bfb      	ldrb	r3, [r7, #15]
}
 8112166:	4618      	mov	r0, r3
 8112168:	3710      	adds	r7, #16
 811216a:	46bd      	mov	sp, r7
 811216c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8112170:	b004      	add	sp, #16
 8112172:	4770      	bx	lr

08112174 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8112174:	b480      	push	{r7}
 8112176:	b087      	sub	sp, #28
 8112178:	af00      	add	r7, sp, #0
 811217a:	60f8      	str	r0, [r7, #12]
 811217c:	60b9      	str	r1, [r7, #8]
 811217e:	4613      	mov	r3, r2
 8112180:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8112182:	79fb      	ldrb	r3, [r7, #7]
 8112184:	2b02      	cmp	r3, #2
 8112186:	d165      	bne.n	8112254 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8112188:	68bb      	ldr	r3, [r7, #8]
 811218a:	4a41      	ldr	r2, [pc, #260]	; (8112290 <USB_SetTurnaroundTime+0x11c>)
 811218c:	4293      	cmp	r3, r2
 811218e:	d906      	bls.n	811219e <USB_SetTurnaroundTime+0x2a>
 8112190:	68bb      	ldr	r3, [r7, #8]
 8112192:	4a40      	ldr	r2, [pc, #256]	; (8112294 <USB_SetTurnaroundTime+0x120>)
 8112194:	4293      	cmp	r3, r2
 8112196:	d202      	bcs.n	811219e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8112198:	230f      	movs	r3, #15
 811219a:	617b      	str	r3, [r7, #20]
 811219c:	e062      	b.n	8112264 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 811219e:	68bb      	ldr	r3, [r7, #8]
 81121a0:	4a3c      	ldr	r2, [pc, #240]	; (8112294 <USB_SetTurnaroundTime+0x120>)
 81121a2:	4293      	cmp	r3, r2
 81121a4:	d306      	bcc.n	81121b4 <USB_SetTurnaroundTime+0x40>
 81121a6:	68bb      	ldr	r3, [r7, #8]
 81121a8:	4a3b      	ldr	r2, [pc, #236]	; (8112298 <USB_SetTurnaroundTime+0x124>)
 81121aa:	4293      	cmp	r3, r2
 81121ac:	d202      	bcs.n	81121b4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 81121ae:	230e      	movs	r3, #14
 81121b0:	617b      	str	r3, [r7, #20]
 81121b2:	e057      	b.n	8112264 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 81121b4:	68bb      	ldr	r3, [r7, #8]
 81121b6:	4a38      	ldr	r2, [pc, #224]	; (8112298 <USB_SetTurnaroundTime+0x124>)
 81121b8:	4293      	cmp	r3, r2
 81121ba:	d306      	bcc.n	81121ca <USB_SetTurnaroundTime+0x56>
 81121bc:	68bb      	ldr	r3, [r7, #8]
 81121be:	4a37      	ldr	r2, [pc, #220]	; (811229c <USB_SetTurnaroundTime+0x128>)
 81121c0:	4293      	cmp	r3, r2
 81121c2:	d202      	bcs.n	81121ca <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 81121c4:	230d      	movs	r3, #13
 81121c6:	617b      	str	r3, [r7, #20]
 81121c8:	e04c      	b.n	8112264 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 81121ca:	68bb      	ldr	r3, [r7, #8]
 81121cc:	4a33      	ldr	r2, [pc, #204]	; (811229c <USB_SetTurnaroundTime+0x128>)
 81121ce:	4293      	cmp	r3, r2
 81121d0:	d306      	bcc.n	81121e0 <USB_SetTurnaroundTime+0x6c>
 81121d2:	68bb      	ldr	r3, [r7, #8]
 81121d4:	4a32      	ldr	r2, [pc, #200]	; (81122a0 <USB_SetTurnaroundTime+0x12c>)
 81121d6:	4293      	cmp	r3, r2
 81121d8:	d802      	bhi.n	81121e0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 81121da:	230c      	movs	r3, #12
 81121dc:	617b      	str	r3, [r7, #20]
 81121de:	e041      	b.n	8112264 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 81121e0:	68bb      	ldr	r3, [r7, #8]
 81121e2:	4a2f      	ldr	r2, [pc, #188]	; (81122a0 <USB_SetTurnaroundTime+0x12c>)
 81121e4:	4293      	cmp	r3, r2
 81121e6:	d906      	bls.n	81121f6 <USB_SetTurnaroundTime+0x82>
 81121e8:	68bb      	ldr	r3, [r7, #8]
 81121ea:	4a2e      	ldr	r2, [pc, #184]	; (81122a4 <USB_SetTurnaroundTime+0x130>)
 81121ec:	4293      	cmp	r3, r2
 81121ee:	d802      	bhi.n	81121f6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 81121f0:	230b      	movs	r3, #11
 81121f2:	617b      	str	r3, [r7, #20]
 81121f4:	e036      	b.n	8112264 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 81121f6:	68bb      	ldr	r3, [r7, #8]
 81121f8:	4a2a      	ldr	r2, [pc, #168]	; (81122a4 <USB_SetTurnaroundTime+0x130>)
 81121fa:	4293      	cmp	r3, r2
 81121fc:	d906      	bls.n	811220c <USB_SetTurnaroundTime+0x98>
 81121fe:	68bb      	ldr	r3, [r7, #8]
 8112200:	4a29      	ldr	r2, [pc, #164]	; (81122a8 <USB_SetTurnaroundTime+0x134>)
 8112202:	4293      	cmp	r3, r2
 8112204:	d802      	bhi.n	811220c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8112206:	230a      	movs	r3, #10
 8112208:	617b      	str	r3, [r7, #20]
 811220a:	e02b      	b.n	8112264 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 811220c:	68bb      	ldr	r3, [r7, #8]
 811220e:	4a26      	ldr	r2, [pc, #152]	; (81122a8 <USB_SetTurnaroundTime+0x134>)
 8112210:	4293      	cmp	r3, r2
 8112212:	d906      	bls.n	8112222 <USB_SetTurnaroundTime+0xae>
 8112214:	68bb      	ldr	r3, [r7, #8]
 8112216:	4a25      	ldr	r2, [pc, #148]	; (81122ac <USB_SetTurnaroundTime+0x138>)
 8112218:	4293      	cmp	r3, r2
 811221a:	d202      	bcs.n	8112222 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 811221c:	2309      	movs	r3, #9
 811221e:	617b      	str	r3, [r7, #20]
 8112220:	e020      	b.n	8112264 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8112222:	68bb      	ldr	r3, [r7, #8]
 8112224:	4a21      	ldr	r2, [pc, #132]	; (81122ac <USB_SetTurnaroundTime+0x138>)
 8112226:	4293      	cmp	r3, r2
 8112228:	d306      	bcc.n	8112238 <USB_SetTurnaroundTime+0xc4>
 811222a:	68bb      	ldr	r3, [r7, #8]
 811222c:	4a20      	ldr	r2, [pc, #128]	; (81122b0 <USB_SetTurnaroundTime+0x13c>)
 811222e:	4293      	cmp	r3, r2
 8112230:	d802      	bhi.n	8112238 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8112232:	2308      	movs	r3, #8
 8112234:	617b      	str	r3, [r7, #20]
 8112236:	e015      	b.n	8112264 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8112238:	68bb      	ldr	r3, [r7, #8]
 811223a:	4a1d      	ldr	r2, [pc, #116]	; (81122b0 <USB_SetTurnaroundTime+0x13c>)
 811223c:	4293      	cmp	r3, r2
 811223e:	d906      	bls.n	811224e <USB_SetTurnaroundTime+0xda>
 8112240:	68bb      	ldr	r3, [r7, #8]
 8112242:	4a1c      	ldr	r2, [pc, #112]	; (81122b4 <USB_SetTurnaroundTime+0x140>)
 8112244:	4293      	cmp	r3, r2
 8112246:	d202      	bcs.n	811224e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8112248:	2307      	movs	r3, #7
 811224a:	617b      	str	r3, [r7, #20]
 811224c:	e00a      	b.n	8112264 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 811224e:	2306      	movs	r3, #6
 8112250:	617b      	str	r3, [r7, #20]
 8112252:	e007      	b.n	8112264 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8112254:	79fb      	ldrb	r3, [r7, #7]
 8112256:	2b00      	cmp	r3, #0
 8112258:	d102      	bne.n	8112260 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 811225a:	2309      	movs	r3, #9
 811225c:	617b      	str	r3, [r7, #20]
 811225e:	e001      	b.n	8112264 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8112260:	2309      	movs	r3, #9
 8112262:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8112264:	68fb      	ldr	r3, [r7, #12]
 8112266:	68db      	ldr	r3, [r3, #12]
 8112268:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 811226c:	68fb      	ldr	r3, [r7, #12]
 811226e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8112270:	68fb      	ldr	r3, [r7, #12]
 8112272:	68da      	ldr	r2, [r3, #12]
 8112274:	697b      	ldr	r3, [r7, #20]
 8112276:	029b      	lsls	r3, r3, #10
 8112278:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 811227c:	431a      	orrs	r2, r3
 811227e:	68fb      	ldr	r3, [r7, #12]
 8112280:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8112282:	2300      	movs	r3, #0
}
 8112284:	4618      	mov	r0, r3
 8112286:	371c      	adds	r7, #28
 8112288:	46bd      	mov	sp, r7
 811228a:	f85d 7b04 	ldr.w	r7, [sp], #4
 811228e:	4770      	bx	lr
 8112290:	00d8acbf 	.word	0x00d8acbf
 8112294:	00e4e1c0 	.word	0x00e4e1c0
 8112298:	00f42400 	.word	0x00f42400
 811229c:	01067380 	.word	0x01067380
 81122a0:	011a499f 	.word	0x011a499f
 81122a4:	01312cff 	.word	0x01312cff
 81122a8:	014ca43f 	.word	0x014ca43f
 81122ac:	016e3600 	.word	0x016e3600
 81122b0:	01a6ab1f 	.word	0x01a6ab1f
 81122b4:	01e84800 	.word	0x01e84800

081122b8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 81122b8:	b480      	push	{r7}
 81122ba:	b083      	sub	sp, #12
 81122bc:	af00      	add	r7, sp, #0
 81122be:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 81122c0:	687b      	ldr	r3, [r7, #4]
 81122c2:	689b      	ldr	r3, [r3, #8]
 81122c4:	f043 0201 	orr.w	r2, r3, #1
 81122c8:	687b      	ldr	r3, [r7, #4]
 81122ca:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 81122cc:	2300      	movs	r3, #0
}
 81122ce:	4618      	mov	r0, r3
 81122d0:	370c      	adds	r7, #12
 81122d2:	46bd      	mov	sp, r7
 81122d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81122d8:	4770      	bx	lr

081122da <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 81122da:	b480      	push	{r7}
 81122dc:	b083      	sub	sp, #12
 81122de:	af00      	add	r7, sp, #0
 81122e0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 81122e2:	687b      	ldr	r3, [r7, #4]
 81122e4:	689b      	ldr	r3, [r3, #8]
 81122e6:	f023 0201 	bic.w	r2, r3, #1
 81122ea:	687b      	ldr	r3, [r7, #4]
 81122ec:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 81122ee:	2300      	movs	r3, #0
}
 81122f0:	4618      	mov	r0, r3
 81122f2:	370c      	adds	r7, #12
 81122f4:	46bd      	mov	sp, r7
 81122f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81122fa:	4770      	bx	lr

081122fc <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 81122fc:	b580      	push	{r7, lr}
 81122fe:	b082      	sub	sp, #8
 8112300:	af00      	add	r7, sp, #0
 8112302:	6078      	str	r0, [r7, #4]
 8112304:	460b      	mov	r3, r1
 8112306:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8112308:	687b      	ldr	r3, [r7, #4]
 811230a:	68db      	ldr	r3, [r3, #12]
 811230c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8112310:	687b      	ldr	r3, [r7, #4]
 8112312:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8112314:	78fb      	ldrb	r3, [r7, #3]
 8112316:	2b01      	cmp	r3, #1
 8112318:	d106      	bne.n	8112328 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 811231a:	687b      	ldr	r3, [r7, #4]
 811231c:	68db      	ldr	r3, [r3, #12]
 811231e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8112322:	687b      	ldr	r3, [r7, #4]
 8112324:	60da      	str	r2, [r3, #12]
 8112326:	e00b      	b.n	8112340 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8112328:	78fb      	ldrb	r3, [r7, #3]
 811232a:	2b00      	cmp	r3, #0
 811232c:	d106      	bne.n	811233c <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 811232e:	687b      	ldr	r3, [r7, #4]
 8112330:	68db      	ldr	r3, [r3, #12]
 8112332:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8112336:	687b      	ldr	r3, [r7, #4]
 8112338:	60da      	str	r2, [r3, #12]
 811233a:	e001      	b.n	8112340 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 811233c:	2301      	movs	r3, #1
 811233e:	e003      	b.n	8112348 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8112340:	2032      	movs	r0, #50	; 0x32
 8112342:	f7f0 fbad 	bl	8102aa0 <HAL_Delay>

  return HAL_OK;
 8112346:	2300      	movs	r3, #0
}
 8112348:	4618      	mov	r0, r3
 811234a:	3708      	adds	r7, #8
 811234c:	46bd      	mov	sp, r7
 811234e:	bd80      	pop	{r7, pc}

08112350 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8112350:	b084      	sub	sp, #16
 8112352:	b580      	push	{r7, lr}
 8112354:	b086      	sub	sp, #24
 8112356:	af00      	add	r7, sp, #0
 8112358:	6078      	str	r0, [r7, #4]
 811235a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 811235e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8112362:	2300      	movs	r3, #0
 8112364:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8112366:	687b      	ldr	r3, [r7, #4]
 8112368:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 811236a:	2300      	movs	r3, #0
 811236c:	613b      	str	r3, [r7, #16]
 811236e:	e009      	b.n	8112384 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8112370:	687a      	ldr	r2, [r7, #4]
 8112372:	693b      	ldr	r3, [r7, #16]
 8112374:	3340      	adds	r3, #64	; 0x40
 8112376:	009b      	lsls	r3, r3, #2
 8112378:	4413      	add	r3, r2
 811237a:	2200      	movs	r2, #0
 811237c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 811237e:	693b      	ldr	r3, [r7, #16]
 8112380:	3301      	adds	r3, #1
 8112382:	613b      	str	r3, [r7, #16]
 8112384:	693b      	ldr	r3, [r7, #16]
 8112386:	2b0e      	cmp	r3, #14
 8112388:	d9f2      	bls.n	8112370 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 811238a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 811238c:	2b00      	cmp	r3, #0
 811238e:	d11c      	bne.n	81123ca <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8112390:	68fb      	ldr	r3, [r7, #12]
 8112392:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8112396:	685b      	ldr	r3, [r3, #4]
 8112398:	68fa      	ldr	r2, [r7, #12]
 811239a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 811239e:	f043 0302 	orr.w	r3, r3, #2
 81123a2:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 81123a4:	687b      	ldr	r3, [r7, #4]
 81123a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81123a8:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 81123ac:	687b      	ldr	r3, [r7, #4]
 81123ae:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 81123b0:	687b      	ldr	r3, [r7, #4]
 81123b2:	681b      	ldr	r3, [r3, #0]
 81123b4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 81123b8:	687b      	ldr	r3, [r7, #4]
 81123ba:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 81123bc:	687b      	ldr	r3, [r7, #4]
 81123be:	681b      	ldr	r3, [r3, #0]
 81123c0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 81123c4:	687b      	ldr	r3, [r7, #4]
 81123c6:	601a      	str	r2, [r3, #0]
 81123c8:	e005      	b.n	81123d6 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 81123ca:	687b      	ldr	r3, [r7, #4]
 81123cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81123ce:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 81123d2:	687b      	ldr	r3, [r7, #4]
 81123d4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 81123d6:	68fb      	ldr	r3, [r7, #12]
 81123d8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 81123dc:	461a      	mov	r2, r3
 81123de:	2300      	movs	r3, #0
 81123e0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 81123e2:	68fb      	ldr	r3, [r7, #12]
 81123e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 81123e8:	4619      	mov	r1, r3
 81123ea:	68fb      	ldr	r3, [r7, #12]
 81123ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 81123f0:	461a      	mov	r2, r3
 81123f2:	680b      	ldr	r3, [r1, #0]
 81123f4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 81123f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81123f8:	2b01      	cmp	r3, #1
 81123fa:	d10c      	bne.n	8112416 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 81123fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 81123fe:	2b00      	cmp	r3, #0
 8112400:	d104      	bne.n	811240c <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8112402:	2100      	movs	r1, #0
 8112404:	6878      	ldr	r0, [r7, #4]
 8112406:	f000 f949 	bl	811269c <USB_SetDevSpeed>
 811240a:	e008      	b.n	811241e <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 811240c:	2101      	movs	r1, #1
 811240e:	6878      	ldr	r0, [r7, #4]
 8112410:	f000 f944 	bl	811269c <USB_SetDevSpeed>
 8112414:	e003      	b.n	811241e <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8112416:	2103      	movs	r1, #3
 8112418:	6878      	ldr	r0, [r7, #4]
 811241a:	f000 f93f 	bl	811269c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 811241e:	2110      	movs	r1, #16
 8112420:	6878      	ldr	r0, [r7, #4]
 8112422:	f000 f8f3 	bl	811260c <USB_FlushTxFifo>
 8112426:	4603      	mov	r3, r0
 8112428:	2b00      	cmp	r3, #0
 811242a:	d001      	beq.n	8112430 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 811242c:	2301      	movs	r3, #1
 811242e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8112430:	6878      	ldr	r0, [r7, #4]
 8112432:	f000 f911 	bl	8112658 <USB_FlushRxFifo>
 8112436:	4603      	mov	r3, r0
 8112438:	2b00      	cmp	r3, #0
 811243a:	d001      	beq.n	8112440 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 811243c:	2301      	movs	r3, #1
 811243e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8112440:	68fb      	ldr	r3, [r7, #12]
 8112442:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8112446:	461a      	mov	r2, r3
 8112448:	2300      	movs	r3, #0
 811244a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 811244c:	68fb      	ldr	r3, [r7, #12]
 811244e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8112452:	461a      	mov	r2, r3
 8112454:	2300      	movs	r3, #0
 8112456:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8112458:	68fb      	ldr	r3, [r7, #12]
 811245a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 811245e:	461a      	mov	r2, r3
 8112460:	2300      	movs	r3, #0
 8112462:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8112464:	2300      	movs	r3, #0
 8112466:	613b      	str	r3, [r7, #16]
 8112468:	e043      	b.n	81124f2 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 811246a:	693b      	ldr	r3, [r7, #16]
 811246c:	015a      	lsls	r2, r3, #5
 811246e:	68fb      	ldr	r3, [r7, #12]
 8112470:	4413      	add	r3, r2
 8112472:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8112476:	681b      	ldr	r3, [r3, #0]
 8112478:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 811247c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8112480:	d118      	bne.n	81124b4 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8112482:	693b      	ldr	r3, [r7, #16]
 8112484:	2b00      	cmp	r3, #0
 8112486:	d10a      	bne.n	811249e <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8112488:	693b      	ldr	r3, [r7, #16]
 811248a:	015a      	lsls	r2, r3, #5
 811248c:	68fb      	ldr	r3, [r7, #12]
 811248e:	4413      	add	r3, r2
 8112490:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8112494:	461a      	mov	r2, r3
 8112496:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 811249a:	6013      	str	r3, [r2, #0]
 811249c:	e013      	b.n	81124c6 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 811249e:	693b      	ldr	r3, [r7, #16]
 81124a0:	015a      	lsls	r2, r3, #5
 81124a2:	68fb      	ldr	r3, [r7, #12]
 81124a4:	4413      	add	r3, r2
 81124a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 81124aa:	461a      	mov	r2, r3
 81124ac:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 81124b0:	6013      	str	r3, [r2, #0]
 81124b2:	e008      	b.n	81124c6 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 81124b4:	693b      	ldr	r3, [r7, #16]
 81124b6:	015a      	lsls	r2, r3, #5
 81124b8:	68fb      	ldr	r3, [r7, #12]
 81124ba:	4413      	add	r3, r2
 81124bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 81124c0:	461a      	mov	r2, r3
 81124c2:	2300      	movs	r3, #0
 81124c4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 81124c6:	693b      	ldr	r3, [r7, #16]
 81124c8:	015a      	lsls	r2, r3, #5
 81124ca:	68fb      	ldr	r3, [r7, #12]
 81124cc:	4413      	add	r3, r2
 81124ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 81124d2:	461a      	mov	r2, r3
 81124d4:	2300      	movs	r3, #0
 81124d6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 81124d8:	693b      	ldr	r3, [r7, #16]
 81124da:	015a      	lsls	r2, r3, #5
 81124dc:	68fb      	ldr	r3, [r7, #12]
 81124de:	4413      	add	r3, r2
 81124e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 81124e4:	461a      	mov	r2, r3
 81124e6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 81124ea:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 81124ec:	693b      	ldr	r3, [r7, #16]
 81124ee:	3301      	adds	r3, #1
 81124f0:	613b      	str	r3, [r7, #16]
 81124f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81124f4:	693a      	ldr	r2, [r7, #16]
 81124f6:	429a      	cmp	r2, r3
 81124f8:	d3b7      	bcc.n	811246a <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 81124fa:	2300      	movs	r3, #0
 81124fc:	613b      	str	r3, [r7, #16]
 81124fe:	e043      	b.n	8112588 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8112500:	693b      	ldr	r3, [r7, #16]
 8112502:	015a      	lsls	r2, r3, #5
 8112504:	68fb      	ldr	r3, [r7, #12]
 8112506:	4413      	add	r3, r2
 8112508:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 811250c:	681b      	ldr	r3, [r3, #0]
 811250e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8112512:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8112516:	d118      	bne.n	811254a <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8112518:	693b      	ldr	r3, [r7, #16]
 811251a:	2b00      	cmp	r3, #0
 811251c:	d10a      	bne.n	8112534 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 811251e:	693b      	ldr	r3, [r7, #16]
 8112520:	015a      	lsls	r2, r3, #5
 8112522:	68fb      	ldr	r3, [r7, #12]
 8112524:	4413      	add	r3, r2
 8112526:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 811252a:	461a      	mov	r2, r3
 811252c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8112530:	6013      	str	r3, [r2, #0]
 8112532:	e013      	b.n	811255c <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8112534:	693b      	ldr	r3, [r7, #16]
 8112536:	015a      	lsls	r2, r3, #5
 8112538:	68fb      	ldr	r3, [r7, #12]
 811253a:	4413      	add	r3, r2
 811253c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8112540:	461a      	mov	r2, r3
 8112542:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8112546:	6013      	str	r3, [r2, #0]
 8112548:	e008      	b.n	811255c <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 811254a:	693b      	ldr	r3, [r7, #16]
 811254c:	015a      	lsls	r2, r3, #5
 811254e:	68fb      	ldr	r3, [r7, #12]
 8112550:	4413      	add	r3, r2
 8112552:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8112556:	461a      	mov	r2, r3
 8112558:	2300      	movs	r3, #0
 811255a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 811255c:	693b      	ldr	r3, [r7, #16]
 811255e:	015a      	lsls	r2, r3, #5
 8112560:	68fb      	ldr	r3, [r7, #12]
 8112562:	4413      	add	r3, r2
 8112564:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8112568:	461a      	mov	r2, r3
 811256a:	2300      	movs	r3, #0
 811256c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 811256e:	693b      	ldr	r3, [r7, #16]
 8112570:	015a      	lsls	r2, r3, #5
 8112572:	68fb      	ldr	r3, [r7, #12]
 8112574:	4413      	add	r3, r2
 8112576:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 811257a:	461a      	mov	r2, r3
 811257c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8112580:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8112582:	693b      	ldr	r3, [r7, #16]
 8112584:	3301      	adds	r3, #1
 8112586:	613b      	str	r3, [r7, #16]
 8112588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 811258a:	693a      	ldr	r2, [r7, #16]
 811258c:	429a      	cmp	r2, r3
 811258e:	d3b7      	bcc.n	8112500 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8112590:	68fb      	ldr	r3, [r7, #12]
 8112592:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8112596:	691b      	ldr	r3, [r3, #16]
 8112598:	68fa      	ldr	r2, [r7, #12]
 811259a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 811259e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 81125a2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 81125a4:	687b      	ldr	r3, [r7, #4]
 81125a6:	2200      	movs	r2, #0
 81125a8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 81125aa:	687b      	ldr	r3, [r7, #4]
 81125ac:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 81125b0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 81125b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81125b4:	2b00      	cmp	r3, #0
 81125b6:	d105      	bne.n	81125c4 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 81125b8:	687b      	ldr	r3, [r7, #4]
 81125ba:	699b      	ldr	r3, [r3, #24]
 81125bc:	f043 0210 	orr.w	r2, r3, #16
 81125c0:	687b      	ldr	r3, [r7, #4]
 81125c2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 81125c4:	687b      	ldr	r3, [r7, #4]
 81125c6:	699a      	ldr	r2, [r3, #24]
 81125c8:	4b0f      	ldr	r3, [pc, #60]	; (8112608 <USB_DevInit+0x2b8>)
 81125ca:	4313      	orrs	r3, r2
 81125cc:	687a      	ldr	r2, [r7, #4]
 81125ce:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 81125d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 81125d2:	2b00      	cmp	r3, #0
 81125d4:	d005      	beq.n	81125e2 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 81125d6:	687b      	ldr	r3, [r7, #4]
 81125d8:	699b      	ldr	r3, [r3, #24]
 81125da:	f043 0208 	orr.w	r2, r3, #8
 81125de:	687b      	ldr	r3, [r7, #4]
 81125e0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 81125e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 81125e4:	2b01      	cmp	r3, #1
 81125e6:	d107      	bne.n	81125f8 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 81125e8:	687b      	ldr	r3, [r7, #4]
 81125ea:	699b      	ldr	r3, [r3, #24]
 81125ec:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 81125f0:	f043 0304 	orr.w	r3, r3, #4
 81125f4:	687a      	ldr	r2, [r7, #4]
 81125f6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 81125f8:	7dfb      	ldrb	r3, [r7, #23]
}
 81125fa:	4618      	mov	r0, r3
 81125fc:	3718      	adds	r7, #24
 81125fe:	46bd      	mov	sp, r7
 8112600:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8112604:	b004      	add	sp, #16
 8112606:	4770      	bx	lr
 8112608:	803c3800 	.word	0x803c3800

0811260c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 811260c:	b480      	push	{r7}
 811260e:	b085      	sub	sp, #20
 8112610:	af00      	add	r7, sp, #0
 8112612:	6078      	str	r0, [r7, #4]
 8112614:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8112616:	2300      	movs	r3, #0
 8112618:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 811261a:	683b      	ldr	r3, [r7, #0]
 811261c:	019b      	lsls	r3, r3, #6
 811261e:	f043 0220 	orr.w	r2, r3, #32
 8112622:	687b      	ldr	r3, [r7, #4]
 8112624:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8112626:	68fb      	ldr	r3, [r7, #12]
 8112628:	3301      	adds	r3, #1
 811262a:	60fb      	str	r3, [r7, #12]
 811262c:	68fb      	ldr	r3, [r7, #12]
 811262e:	4a09      	ldr	r2, [pc, #36]	; (8112654 <USB_FlushTxFifo+0x48>)
 8112630:	4293      	cmp	r3, r2
 8112632:	d901      	bls.n	8112638 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8112634:	2303      	movs	r3, #3
 8112636:	e006      	b.n	8112646 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8112638:	687b      	ldr	r3, [r7, #4]
 811263a:	691b      	ldr	r3, [r3, #16]
 811263c:	f003 0320 	and.w	r3, r3, #32
 8112640:	2b20      	cmp	r3, #32
 8112642:	d0f0      	beq.n	8112626 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8112644:	2300      	movs	r3, #0
}
 8112646:	4618      	mov	r0, r3
 8112648:	3714      	adds	r7, #20
 811264a:	46bd      	mov	sp, r7
 811264c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8112650:	4770      	bx	lr
 8112652:	bf00      	nop
 8112654:	00030d40 	.word	0x00030d40

08112658 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8112658:	b480      	push	{r7}
 811265a:	b085      	sub	sp, #20
 811265c:	af00      	add	r7, sp, #0
 811265e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8112660:	2300      	movs	r3, #0
 8112662:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8112664:	687b      	ldr	r3, [r7, #4]
 8112666:	2210      	movs	r2, #16
 8112668:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 811266a:	68fb      	ldr	r3, [r7, #12]
 811266c:	3301      	adds	r3, #1
 811266e:	60fb      	str	r3, [r7, #12]
 8112670:	68fb      	ldr	r3, [r7, #12]
 8112672:	4a09      	ldr	r2, [pc, #36]	; (8112698 <USB_FlushRxFifo+0x40>)
 8112674:	4293      	cmp	r3, r2
 8112676:	d901      	bls.n	811267c <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8112678:	2303      	movs	r3, #3
 811267a:	e006      	b.n	811268a <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 811267c:	687b      	ldr	r3, [r7, #4]
 811267e:	691b      	ldr	r3, [r3, #16]
 8112680:	f003 0310 	and.w	r3, r3, #16
 8112684:	2b10      	cmp	r3, #16
 8112686:	d0f0      	beq.n	811266a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8112688:	2300      	movs	r3, #0
}
 811268a:	4618      	mov	r0, r3
 811268c:	3714      	adds	r7, #20
 811268e:	46bd      	mov	sp, r7
 8112690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8112694:	4770      	bx	lr
 8112696:	bf00      	nop
 8112698:	00030d40 	.word	0x00030d40

0811269c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 811269c:	b480      	push	{r7}
 811269e:	b085      	sub	sp, #20
 81126a0:	af00      	add	r7, sp, #0
 81126a2:	6078      	str	r0, [r7, #4]
 81126a4:	460b      	mov	r3, r1
 81126a6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 81126a8:	687b      	ldr	r3, [r7, #4]
 81126aa:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 81126ac:	68fb      	ldr	r3, [r7, #12]
 81126ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 81126b2:	681a      	ldr	r2, [r3, #0]
 81126b4:	78fb      	ldrb	r3, [r7, #3]
 81126b6:	68f9      	ldr	r1, [r7, #12]
 81126b8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 81126bc:	4313      	orrs	r3, r2
 81126be:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 81126c0:	2300      	movs	r3, #0
}
 81126c2:	4618      	mov	r0, r3
 81126c4:	3714      	adds	r7, #20
 81126c6:	46bd      	mov	sp, r7
 81126c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81126cc:	4770      	bx	lr

081126ce <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 81126ce:	b480      	push	{r7}
 81126d0:	b087      	sub	sp, #28
 81126d2:	af00      	add	r7, sp, #0
 81126d4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 81126d6:	687b      	ldr	r3, [r7, #4]
 81126d8:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 81126da:	693b      	ldr	r3, [r7, #16]
 81126dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 81126e0:	689b      	ldr	r3, [r3, #8]
 81126e2:	f003 0306 	and.w	r3, r3, #6
 81126e6:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 81126e8:	68fb      	ldr	r3, [r7, #12]
 81126ea:	2b00      	cmp	r3, #0
 81126ec:	d102      	bne.n	81126f4 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 81126ee:	2300      	movs	r3, #0
 81126f0:	75fb      	strb	r3, [r7, #23]
 81126f2:	e00a      	b.n	811270a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 81126f4:	68fb      	ldr	r3, [r7, #12]
 81126f6:	2b02      	cmp	r3, #2
 81126f8:	d002      	beq.n	8112700 <USB_GetDevSpeed+0x32>
 81126fa:	68fb      	ldr	r3, [r7, #12]
 81126fc:	2b06      	cmp	r3, #6
 81126fe:	d102      	bne.n	8112706 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8112700:	2302      	movs	r3, #2
 8112702:	75fb      	strb	r3, [r7, #23]
 8112704:	e001      	b.n	811270a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8112706:	230f      	movs	r3, #15
 8112708:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 811270a:	7dfb      	ldrb	r3, [r7, #23]
}
 811270c:	4618      	mov	r0, r3
 811270e:	371c      	adds	r7, #28
 8112710:	46bd      	mov	sp, r7
 8112712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8112716:	4770      	bx	lr

08112718 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8112718:	b480      	push	{r7}
 811271a:	b085      	sub	sp, #20
 811271c:	af00      	add	r7, sp, #0
 811271e:	6078      	str	r0, [r7, #4]
 8112720:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8112722:	687b      	ldr	r3, [r7, #4]
 8112724:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8112726:	683b      	ldr	r3, [r7, #0]
 8112728:	781b      	ldrb	r3, [r3, #0]
 811272a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 811272c:	683b      	ldr	r3, [r7, #0]
 811272e:	785b      	ldrb	r3, [r3, #1]
 8112730:	2b01      	cmp	r3, #1
 8112732:	d13a      	bne.n	81127aa <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8112734:	68fb      	ldr	r3, [r7, #12]
 8112736:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 811273a:	69da      	ldr	r2, [r3, #28]
 811273c:	683b      	ldr	r3, [r7, #0]
 811273e:	781b      	ldrb	r3, [r3, #0]
 8112740:	f003 030f 	and.w	r3, r3, #15
 8112744:	2101      	movs	r1, #1
 8112746:	fa01 f303 	lsl.w	r3, r1, r3
 811274a:	b29b      	uxth	r3, r3
 811274c:	68f9      	ldr	r1, [r7, #12]
 811274e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8112752:	4313      	orrs	r3, r2
 8112754:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8112756:	68bb      	ldr	r3, [r7, #8]
 8112758:	015a      	lsls	r2, r3, #5
 811275a:	68fb      	ldr	r3, [r7, #12]
 811275c:	4413      	add	r3, r2
 811275e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8112762:	681b      	ldr	r3, [r3, #0]
 8112764:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8112768:	2b00      	cmp	r3, #0
 811276a:	d155      	bne.n	8112818 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 811276c:	68bb      	ldr	r3, [r7, #8]
 811276e:	015a      	lsls	r2, r3, #5
 8112770:	68fb      	ldr	r3, [r7, #12]
 8112772:	4413      	add	r3, r2
 8112774:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8112778:	681a      	ldr	r2, [r3, #0]
 811277a:	683b      	ldr	r3, [r7, #0]
 811277c:	689b      	ldr	r3, [r3, #8]
 811277e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8112782:	683b      	ldr	r3, [r7, #0]
 8112784:	78db      	ldrb	r3, [r3, #3]
 8112786:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8112788:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 811278a:	68bb      	ldr	r3, [r7, #8]
 811278c:	059b      	lsls	r3, r3, #22
 811278e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8112790:	4313      	orrs	r3, r2
 8112792:	68ba      	ldr	r2, [r7, #8]
 8112794:	0151      	lsls	r1, r2, #5
 8112796:	68fa      	ldr	r2, [r7, #12]
 8112798:	440a      	add	r2, r1
 811279a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 811279e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 81127a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 81127a6:	6013      	str	r3, [r2, #0]
 81127a8:	e036      	b.n	8112818 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 81127aa:	68fb      	ldr	r3, [r7, #12]
 81127ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 81127b0:	69da      	ldr	r2, [r3, #28]
 81127b2:	683b      	ldr	r3, [r7, #0]
 81127b4:	781b      	ldrb	r3, [r3, #0]
 81127b6:	f003 030f 	and.w	r3, r3, #15
 81127ba:	2101      	movs	r1, #1
 81127bc:	fa01 f303 	lsl.w	r3, r1, r3
 81127c0:	041b      	lsls	r3, r3, #16
 81127c2:	68f9      	ldr	r1, [r7, #12]
 81127c4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 81127c8:	4313      	orrs	r3, r2
 81127ca:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 81127cc:	68bb      	ldr	r3, [r7, #8]
 81127ce:	015a      	lsls	r2, r3, #5
 81127d0:	68fb      	ldr	r3, [r7, #12]
 81127d2:	4413      	add	r3, r2
 81127d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 81127d8:	681b      	ldr	r3, [r3, #0]
 81127da:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 81127de:	2b00      	cmp	r3, #0
 81127e0:	d11a      	bne.n	8112818 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 81127e2:	68bb      	ldr	r3, [r7, #8]
 81127e4:	015a      	lsls	r2, r3, #5
 81127e6:	68fb      	ldr	r3, [r7, #12]
 81127e8:	4413      	add	r3, r2
 81127ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 81127ee:	681a      	ldr	r2, [r3, #0]
 81127f0:	683b      	ldr	r3, [r7, #0]
 81127f2:	689b      	ldr	r3, [r3, #8]
 81127f4:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 81127f8:	683b      	ldr	r3, [r7, #0]
 81127fa:	78db      	ldrb	r3, [r3, #3]
 81127fc:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 81127fe:	430b      	orrs	r3, r1
 8112800:	4313      	orrs	r3, r2
 8112802:	68ba      	ldr	r2, [r7, #8]
 8112804:	0151      	lsls	r1, r2, #5
 8112806:	68fa      	ldr	r2, [r7, #12]
 8112808:	440a      	add	r2, r1
 811280a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 811280e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8112812:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8112816:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8112818:	2300      	movs	r3, #0
}
 811281a:	4618      	mov	r0, r3
 811281c:	3714      	adds	r7, #20
 811281e:	46bd      	mov	sp, r7
 8112820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8112824:	4770      	bx	lr
	...

08112828 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8112828:	b480      	push	{r7}
 811282a:	b085      	sub	sp, #20
 811282c:	af00      	add	r7, sp, #0
 811282e:	6078      	str	r0, [r7, #4]
 8112830:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8112832:	687b      	ldr	r3, [r7, #4]
 8112834:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8112836:	683b      	ldr	r3, [r7, #0]
 8112838:	781b      	ldrb	r3, [r3, #0]
 811283a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 811283c:	683b      	ldr	r3, [r7, #0]
 811283e:	785b      	ldrb	r3, [r3, #1]
 8112840:	2b01      	cmp	r3, #1
 8112842:	d161      	bne.n	8112908 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8112844:	68bb      	ldr	r3, [r7, #8]
 8112846:	015a      	lsls	r2, r3, #5
 8112848:	68fb      	ldr	r3, [r7, #12]
 811284a:	4413      	add	r3, r2
 811284c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8112850:	681b      	ldr	r3, [r3, #0]
 8112852:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8112856:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 811285a:	d11f      	bne.n	811289c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 811285c:	68bb      	ldr	r3, [r7, #8]
 811285e:	015a      	lsls	r2, r3, #5
 8112860:	68fb      	ldr	r3, [r7, #12]
 8112862:	4413      	add	r3, r2
 8112864:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8112868:	681b      	ldr	r3, [r3, #0]
 811286a:	68ba      	ldr	r2, [r7, #8]
 811286c:	0151      	lsls	r1, r2, #5
 811286e:	68fa      	ldr	r2, [r7, #12]
 8112870:	440a      	add	r2, r1
 8112872:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8112876:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 811287a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 811287c:	68bb      	ldr	r3, [r7, #8]
 811287e:	015a      	lsls	r2, r3, #5
 8112880:	68fb      	ldr	r3, [r7, #12]
 8112882:	4413      	add	r3, r2
 8112884:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8112888:	681b      	ldr	r3, [r3, #0]
 811288a:	68ba      	ldr	r2, [r7, #8]
 811288c:	0151      	lsls	r1, r2, #5
 811288e:	68fa      	ldr	r2, [r7, #12]
 8112890:	440a      	add	r2, r1
 8112892:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8112896:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 811289a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 811289c:	68fb      	ldr	r3, [r7, #12]
 811289e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 81128a2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 81128a4:	683b      	ldr	r3, [r7, #0]
 81128a6:	781b      	ldrb	r3, [r3, #0]
 81128a8:	f003 030f 	and.w	r3, r3, #15
 81128ac:	2101      	movs	r1, #1
 81128ae:	fa01 f303 	lsl.w	r3, r1, r3
 81128b2:	b29b      	uxth	r3, r3
 81128b4:	43db      	mvns	r3, r3
 81128b6:	68f9      	ldr	r1, [r7, #12]
 81128b8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 81128bc:	4013      	ands	r3, r2
 81128be:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 81128c0:	68fb      	ldr	r3, [r7, #12]
 81128c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 81128c6:	69da      	ldr	r2, [r3, #28]
 81128c8:	683b      	ldr	r3, [r7, #0]
 81128ca:	781b      	ldrb	r3, [r3, #0]
 81128cc:	f003 030f 	and.w	r3, r3, #15
 81128d0:	2101      	movs	r1, #1
 81128d2:	fa01 f303 	lsl.w	r3, r1, r3
 81128d6:	b29b      	uxth	r3, r3
 81128d8:	43db      	mvns	r3, r3
 81128da:	68f9      	ldr	r1, [r7, #12]
 81128dc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 81128e0:	4013      	ands	r3, r2
 81128e2:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 81128e4:	68bb      	ldr	r3, [r7, #8]
 81128e6:	015a      	lsls	r2, r3, #5
 81128e8:	68fb      	ldr	r3, [r7, #12]
 81128ea:	4413      	add	r3, r2
 81128ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 81128f0:	681a      	ldr	r2, [r3, #0]
 81128f2:	68bb      	ldr	r3, [r7, #8]
 81128f4:	0159      	lsls	r1, r3, #5
 81128f6:	68fb      	ldr	r3, [r7, #12]
 81128f8:	440b      	add	r3, r1
 81128fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 81128fe:	4619      	mov	r1, r3
 8112900:	4b35      	ldr	r3, [pc, #212]	; (81129d8 <USB_DeactivateEndpoint+0x1b0>)
 8112902:	4013      	ands	r3, r2
 8112904:	600b      	str	r3, [r1, #0]
 8112906:	e060      	b.n	81129ca <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8112908:	68bb      	ldr	r3, [r7, #8]
 811290a:	015a      	lsls	r2, r3, #5
 811290c:	68fb      	ldr	r3, [r7, #12]
 811290e:	4413      	add	r3, r2
 8112910:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8112914:	681b      	ldr	r3, [r3, #0]
 8112916:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 811291a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 811291e:	d11f      	bne.n	8112960 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8112920:	68bb      	ldr	r3, [r7, #8]
 8112922:	015a      	lsls	r2, r3, #5
 8112924:	68fb      	ldr	r3, [r7, #12]
 8112926:	4413      	add	r3, r2
 8112928:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 811292c:	681b      	ldr	r3, [r3, #0]
 811292e:	68ba      	ldr	r2, [r7, #8]
 8112930:	0151      	lsls	r1, r2, #5
 8112932:	68fa      	ldr	r2, [r7, #12]
 8112934:	440a      	add	r2, r1
 8112936:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 811293a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 811293e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8112940:	68bb      	ldr	r3, [r7, #8]
 8112942:	015a      	lsls	r2, r3, #5
 8112944:	68fb      	ldr	r3, [r7, #12]
 8112946:	4413      	add	r3, r2
 8112948:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 811294c:	681b      	ldr	r3, [r3, #0]
 811294e:	68ba      	ldr	r2, [r7, #8]
 8112950:	0151      	lsls	r1, r2, #5
 8112952:	68fa      	ldr	r2, [r7, #12]
 8112954:	440a      	add	r2, r1
 8112956:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 811295a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 811295e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8112960:	68fb      	ldr	r3, [r7, #12]
 8112962:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8112966:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8112968:	683b      	ldr	r3, [r7, #0]
 811296a:	781b      	ldrb	r3, [r3, #0]
 811296c:	f003 030f 	and.w	r3, r3, #15
 8112970:	2101      	movs	r1, #1
 8112972:	fa01 f303 	lsl.w	r3, r1, r3
 8112976:	041b      	lsls	r3, r3, #16
 8112978:	43db      	mvns	r3, r3
 811297a:	68f9      	ldr	r1, [r7, #12]
 811297c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8112980:	4013      	ands	r3, r2
 8112982:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8112984:	68fb      	ldr	r3, [r7, #12]
 8112986:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 811298a:	69da      	ldr	r2, [r3, #28]
 811298c:	683b      	ldr	r3, [r7, #0]
 811298e:	781b      	ldrb	r3, [r3, #0]
 8112990:	f003 030f 	and.w	r3, r3, #15
 8112994:	2101      	movs	r1, #1
 8112996:	fa01 f303 	lsl.w	r3, r1, r3
 811299a:	041b      	lsls	r3, r3, #16
 811299c:	43db      	mvns	r3, r3
 811299e:	68f9      	ldr	r1, [r7, #12]
 81129a0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 81129a4:	4013      	ands	r3, r2
 81129a6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 81129a8:	68bb      	ldr	r3, [r7, #8]
 81129aa:	015a      	lsls	r2, r3, #5
 81129ac:	68fb      	ldr	r3, [r7, #12]
 81129ae:	4413      	add	r3, r2
 81129b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 81129b4:	681a      	ldr	r2, [r3, #0]
 81129b6:	68bb      	ldr	r3, [r7, #8]
 81129b8:	0159      	lsls	r1, r3, #5
 81129ba:	68fb      	ldr	r3, [r7, #12]
 81129bc:	440b      	add	r3, r1
 81129be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 81129c2:	4619      	mov	r1, r3
 81129c4:	4b05      	ldr	r3, [pc, #20]	; (81129dc <USB_DeactivateEndpoint+0x1b4>)
 81129c6:	4013      	ands	r3, r2
 81129c8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 81129ca:	2300      	movs	r3, #0
}
 81129cc:	4618      	mov	r0, r3
 81129ce:	3714      	adds	r7, #20
 81129d0:	46bd      	mov	sp, r7
 81129d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81129d6:	4770      	bx	lr
 81129d8:	ec337800 	.word	0xec337800
 81129dc:	eff37800 	.word	0xeff37800

081129e0 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 81129e0:	b580      	push	{r7, lr}
 81129e2:	b08a      	sub	sp, #40	; 0x28
 81129e4:	af02      	add	r7, sp, #8
 81129e6:	60f8      	str	r0, [r7, #12]
 81129e8:	60b9      	str	r1, [r7, #8]
 81129ea:	4613      	mov	r3, r2
 81129ec:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 81129ee:	68fb      	ldr	r3, [r7, #12]
 81129f0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 81129f2:	68bb      	ldr	r3, [r7, #8]
 81129f4:	781b      	ldrb	r3, [r3, #0]
 81129f6:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 81129f8:	68bb      	ldr	r3, [r7, #8]
 81129fa:	785b      	ldrb	r3, [r3, #1]
 81129fc:	2b01      	cmp	r3, #1
 81129fe:	f040 815c 	bne.w	8112cba <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8112a02:	68bb      	ldr	r3, [r7, #8]
 8112a04:	695b      	ldr	r3, [r3, #20]
 8112a06:	2b00      	cmp	r3, #0
 8112a08:	d132      	bne.n	8112a70 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8112a0a:	69bb      	ldr	r3, [r7, #24]
 8112a0c:	015a      	lsls	r2, r3, #5
 8112a0e:	69fb      	ldr	r3, [r7, #28]
 8112a10:	4413      	add	r3, r2
 8112a12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8112a16:	691b      	ldr	r3, [r3, #16]
 8112a18:	69ba      	ldr	r2, [r7, #24]
 8112a1a:	0151      	lsls	r1, r2, #5
 8112a1c:	69fa      	ldr	r2, [r7, #28]
 8112a1e:	440a      	add	r2, r1
 8112a20:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8112a24:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8112a28:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8112a2c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8112a2e:	69bb      	ldr	r3, [r7, #24]
 8112a30:	015a      	lsls	r2, r3, #5
 8112a32:	69fb      	ldr	r3, [r7, #28]
 8112a34:	4413      	add	r3, r2
 8112a36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8112a3a:	691b      	ldr	r3, [r3, #16]
 8112a3c:	69ba      	ldr	r2, [r7, #24]
 8112a3e:	0151      	lsls	r1, r2, #5
 8112a40:	69fa      	ldr	r2, [r7, #28]
 8112a42:	440a      	add	r2, r1
 8112a44:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8112a48:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8112a4c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8112a4e:	69bb      	ldr	r3, [r7, #24]
 8112a50:	015a      	lsls	r2, r3, #5
 8112a52:	69fb      	ldr	r3, [r7, #28]
 8112a54:	4413      	add	r3, r2
 8112a56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8112a5a:	691b      	ldr	r3, [r3, #16]
 8112a5c:	69ba      	ldr	r2, [r7, #24]
 8112a5e:	0151      	lsls	r1, r2, #5
 8112a60:	69fa      	ldr	r2, [r7, #28]
 8112a62:	440a      	add	r2, r1
 8112a64:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8112a68:	0cdb      	lsrs	r3, r3, #19
 8112a6a:	04db      	lsls	r3, r3, #19
 8112a6c:	6113      	str	r3, [r2, #16]
 8112a6e:	e074      	b.n	8112b5a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8112a70:	69bb      	ldr	r3, [r7, #24]
 8112a72:	015a      	lsls	r2, r3, #5
 8112a74:	69fb      	ldr	r3, [r7, #28]
 8112a76:	4413      	add	r3, r2
 8112a78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8112a7c:	691b      	ldr	r3, [r3, #16]
 8112a7e:	69ba      	ldr	r2, [r7, #24]
 8112a80:	0151      	lsls	r1, r2, #5
 8112a82:	69fa      	ldr	r2, [r7, #28]
 8112a84:	440a      	add	r2, r1
 8112a86:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8112a8a:	0cdb      	lsrs	r3, r3, #19
 8112a8c:	04db      	lsls	r3, r3, #19
 8112a8e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8112a90:	69bb      	ldr	r3, [r7, #24]
 8112a92:	015a      	lsls	r2, r3, #5
 8112a94:	69fb      	ldr	r3, [r7, #28]
 8112a96:	4413      	add	r3, r2
 8112a98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8112a9c:	691b      	ldr	r3, [r3, #16]
 8112a9e:	69ba      	ldr	r2, [r7, #24]
 8112aa0:	0151      	lsls	r1, r2, #5
 8112aa2:	69fa      	ldr	r2, [r7, #28]
 8112aa4:	440a      	add	r2, r1
 8112aa6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8112aaa:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8112aae:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8112ab2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8112ab4:	69bb      	ldr	r3, [r7, #24]
 8112ab6:	015a      	lsls	r2, r3, #5
 8112ab8:	69fb      	ldr	r3, [r7, #28]
 8112aba:	4413      	add	r3, r2
 8112abc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8112ac0:	691a      	ldr	r2, [r3, #16]
 8112ac2:	68bb      	ldr	r3, [r7, #8]
 8112ac4:	6959      	ldr	r1, [r3, #20]
 8112ac6:	68bb      	ldr	r3, [r7, #8]
 8112ac8:	689b      	ldr	r3, [r3, #8]
 8112aca:	440b      	add	r3, r1
 8112acc:	1e59      	subs	r1, r3, #1
 8112ace:	68bb      	ldr	r3, [r7, #8]
 8112ad0:	689b      	ldr	r3, [r3, #8]
 8112ad2:	fbb1 f3f3 	udiv	r3, r1, r3
 8112ad6:	04d9      	lsls	r1, r3, #19
 8112ad8:	4b9d      	ldr	r3, [pc, #628]	; (8112d50 <USB_EPStartXfer+0x370>)
 8112ada:	400b      	ands	r3, r1
 8112adc:	69b9      	ldr	r1, [r7, #24]
 8112ade:	0148      	lsls	r0, r1, #5
 8112ae0:	69f9      	ldr	r1, [r7, #28]
 8112ae2:	4401      	add	r1, r0
 8112ae4:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8112ae8:	4313      	orrs	r3, r2
 8112aea:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8112aec:	69bb      	ldr	r3, [r7, #24]
 8112aee:	015a      	lsls	r2, r3, #5
 8112af0:	69fb      	ldr	r3, [r7, #28]
 8112af2:	4413      	add	r3, r2
 8112af4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8112af8:	691a      	ldr	r2, [r3, #16]
 8112afa:	68bb      	ldr	r3, [r7, #8]
 8112afc:	695b      	ldr	r3, [r3, #20]
 8112afe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8112b02:	69b9      	ldr	r1, [r7, #24]
 8112b04:	0148      	lsls	r0, r1, #5
 8112b06:	69f9      	ldr	r1, [r7, #28]
 8112b08:	4401      	add	r1, r0
 8112b0a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8112b0e:	4313      	orrs	r3, r2
 8112b10:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8112b12:	68bb      	ldr	r3, [r7, #8]
 8112b14:	78db      	ldrb	r3, [r3, #3]
 8112b16:	2b01      	cmp	r3, #1
 8112b18:	d11f      	bne.n	8112b5a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8112b1a:	69bb      	ldr	r3, [r7, #24]
 8112b1c:	015a      	lsls	r2, r3, #5
 8112b1e:	69fb      	ldr	r3, [r7, #28]
 8112b20:	4413      	add	r3, r2
 8112b22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8112b26:	691b      	ldr	r3, [r3, #16]
 8112b28:	69ba      	ldr	r2, [r7, #24]
 8112b2a:	0151      	lsls	r1, r2, #5
 8112b2c:	69fa      	ldr	r2, [r7, #28]
 8112b2e:	440a      	add	r2, r1
 8112b30:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8112b34:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8112b38:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8112b3a:	69bb      	ldr	r3, [r7, #24]
 8112b3c:	015a      	lsls	r2, r3, #5
 8112b3e:	69fb      	ldr	r3, [r7, #28]
 8112b40:	4413      	add	r3, r2
 8112b42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8112b46:	691b      	ldr	r3, [r3, #16]
 8112b48:	69ba      	ldr	r2, [r7, #24]
 8112b4a:	0151      	lsls	r1, r2, #5
 8112b4c:	69fa      	ldr	r2, [r7, #28]
 8112b4e:	440a      	add	r2, r1
 8112b50:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8112b54:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8112b58:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8112b5a:	79fb      	ldrb	r3, [r7, #7]
 8112b5c:	2b01      	cmp	r3, #1
 8112b5e:	d14b      	bne.n	8112bf8 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8112b60:	68bb      	ldr	r3, [r7, #8]
 8112b62:	691b      	ldr	r3, [r3, #16]
 8112b64:	2b00      	cmp	r3, #0
 8112b66:	d009      	beq.n	8112b7c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8112b68:	69bb      	ldr	r3, [r7, #24]
 8112b6a:	015a      	lsls	r2, r3, #5
 8112b6c:	69fb      	ldr	r3, [r7, #28]
 8112b6e:	4413      	add	r3, r2
 8112b70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8112b74:	461a      	mov	r2, r3
 8112b76:	68bb      	ldr	r3, [r7, #8]
 8112b78:	691b      	ldr	r3, [r3, #16]
 8112b7a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8112b7c:	68bb      	ldr	r3, [r7, #8]
 8112b7e:	78db      	ldrb	r3, [r3, #3]
 8112b80:	2b01      	cmp	r3, #1
 8112b82:	d128      	bne.n	8112bd6 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8112b84:	69fb      	ldr	r3, [r7, #28]
 8112b86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8112b8a:	689b      	ldr	r3, [r3, #8]
 8112b8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8112b90:	2b00      	cmp	r3, #0
 8112b92:	d110      	bne.n	8112bb6 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8112b94:	69bb      	ldr	r3, [r7, #24]
 8112b96:	015a      	lsls	r2, r3, #5
 8112b98:	69fb      	ldr	r3, [r7, #28]
 8112b9a:	4413      	add	r3, r2
 8112b9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8112ba0:	681b      	ldr	r3, [r3, #0]
 8112ba2:	69ba      	ldr	r2, [r7, #24]
 8112ba4:	0151      	lsls	r1, r2, #5
 8112ba6:	69fa      	ldr	r2, [r7, #28]
 8112ba8:	440a      	add	r2, r1
 8112baa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8112bae:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8112bb2:	6013      	str	r3, [r2, #0]
 8112bb4:	e00f      	b.n	8112bd6 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8112bb6:	69bb      	ldr	r3, [r7, #24]
 8112bb8:	015a      	lsls	r2, r3, #5
 8112bba:	69fb      	ldr	r3, [r7, #28]
 8112bbc:	4413      	add	r3, r2
 8112bbe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8112bc2:	681b      	ldr	r3, [r3, #0]
 8112bc4:	69ba      	ldr	r2, [r7, #24]
 8112bc6:	0151      	lsls	r1, r2, #5
 8112bc8:	69fa      	ldr	r2, [r7, #28]
 8112bca:	440a      	add	r2, r1
 8112bcc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8112bd0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8112bd4:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8112bd6:	69bb      	ldr	r3, [r7, #24]
 8112bd8:	015a      	lsls	r2, r3, #5
 8112bda:	69fb      	ldr	r3, [r7, #28]
 8112bdc:	4413      	add	r3, r2
 8112bde:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8112be2:	681b      	ldr	r3, [r3, #0]
 8112be4:	69ba      	ldr	r2, [r7, #24]
 8112be6:	0151      	lsls	r1, r2, #5
 8112be8:	69fa      	ldr	r2, [r7, #28]
 8112bea:	440a      	add	r2, r1
 8112bec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8112bf0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8112bf4:	6013      	str	r3, [r2, #0]
 8112bf6:	e12f      	b.n	8112e58 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8112bf8:	69bb      	ldr	r3, [r7, #24]
 8112bfa:	015a      	lsls	r2, r3, #5
 8112bfc:	69fb      	ldr	r3, [r7, #28]
 8112bfe:	4413      	add	r3, r2
 8112c00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8112c04:	681b      	ldr	r3, [r3, #0]
 8112c06:	69ba      	ldr	r2, [r7, #24]
 8112c08:	0151      	lsls	r1, r2, #5
 8112c0a:	69fa      	ldr	r2, [r7, #28]
 8112c0c:	440a      	add	r2, r1
 8112c0e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8112c12:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8112c16:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8112c18:	68bb      	ldr	r3, [r7, #8]
 8112c1a:	78db      	ldrb	r3, [r3, #3]
 8112c1c:	2b01      	cmp	r3, #1
 8112c1e:	d015      	beq.n	8112c4c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8112c20:	68bb      	ldr	r3, [r7, #8]
 8112c22:	695b      	ldr	r3, [r3, #20]
 8112c24:	2b00      	cmp	r3, #0
 8112c26:	f000 8117 	beq.w	8112e58 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8112c2a:	69fb      	ldr	r3, [r7, #28]
 8112c2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8112c30:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8112c32:	68bb      	ldr	r3, [r7, #8]
 8112c34:	781b      	ldrb	r3, [r3, #0]
 8112c36:	f003 030f 	and.w	r3, r3, #15
 8112c3a:	2101      	movs	r1, #1
 8112c3c:	fa01 f303 	lsl.w	r3, r1, r3
 8112c40:	69f9      	ldr	r1, [r7, #28]
 8112c42:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8112c46:	4313      	orrs	r3, r2
 8112c48:	634b      	str	r3, [r1, #52]	; 0x34
 8112c4a:	e105      	b.n	8112e58 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8112c4c:	69fb      	ldr	r3, [r7, #28]
 8112c4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8112c52:	689b      	ldr	r3, [r3, #8]
 8112c54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8112c58:	2b00      	cmp	r3, #0
 8112c5a:	d110      	bne.n	8112c7e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8112c5c:	69bb      	ldr	r3, [r7, #24]
 8112c5e:	015a      	lsls	r2, r3, #5
 8112c60:	69fb      	ldr	r3, [r7, #28]
 8112c62:	4413      	add	r3, r2
 8112c64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8112c68:	681b      	ldr	r3, [r3, #0]
 8112c6a:	69ba      	ldr	r2, [r7, #24]
 8112c6c:	0151      	lsls	r1, r2, #5
 8112c6e:	69fa      	ldr	r2, [r7, #28]
 8112c70:	440a      	add	r2, r1
 8112c72:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8112c76:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8112c7a:	6013      	str	r3, [r2, #0]
 8112c7c:	e00f      	b.n	8112c9e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8112c7e:	69bb      	ldr	r3, [r7, #24]
 8112c80:	015a      	lsls	r2, r3, #5
 8112c82:	69fb      	ldr	r3, [r7, #28]
 8112c84:	4413      	add	r3, r2
 8112c86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8112c8a:	681b      	ldr	r3, [r3, #0]
 8112c8c:	69ba      	ldr	r2, [r7, #24]
 8112c8e:	0151      	lsls	r1, r2, #5
 8112c90:	69fa      	ldr	r2, [r7, #28]
 8112c92:	440a      	add	r2, r1
 8112c94:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8112c98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8112c9c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8112c9e:	68bb      	ldr	r3, [r7, #8]
 8112ca0:	68d9      	ldr	r1, [r3, #12]
 8112ca2:	68bb      	ldr	r3, [r7, #8]
 8112ca4:	781a      	ldrb	r2, [r3, #0]
 8112ca6:	68bb      	ldr	r3, [r7, #8]
 8112ca8:	695b      	ldr	r3, [r3, #20]
 8112caa:	b298      	uxth	r0, r3
 8112cac:	79fb      	ldrb	r3, [r7, #7]
 8112cae:	9300      	str	r3, [sp, #0]
 8112cb0:	4603      	mov	r3, r0
 8112cb2:	68f8      	ldr	r0, [r7, #12]
 8112cb4:	f000 fa2b 	bl	811310e <USB_WritePacket>
 8112cb8:	e0ce      	b.n	8112e58 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8112cba:	69bb      	ldr	r3, [r7, #24]
 8112cbc:	015a      	lsls	r2, r3, #5
 8112cbe:	69fb      	ldr	r3, [r7, #28]
 8112cc0:	4413      	add	r3, r2
 8112cc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8112cc6:	691b      	ldr	r3, [r3, #16]
 8112cc8:	69ba      	ldr	r2, [r7, #24]
 8112cca:	0151      	lsls	r1, r2, #5
 8112ccc:	69fa      	ldr	r2, [r7, #28]
 8112cce:	440a      	add	r2, r1
 8112cd0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8112cd4:	0cdb      	lsrs	r3, r3, #19
 8112cd6:	04db      	lsls	r3, r3, #19
 8112cd8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8112cda:	69bb      	ldr	r3, [r7, #24]
 8112cdc:	015a      	lsls	r2, r3, #5
 8112cde:	69fb      	ldr	r3, [r7, #28]
 8112ce0:	4413      	add	r3, r2
 8112ce2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8112ce6:	691b      	ldr	r3, [r3, #16]
 8112ce8:	69ba      	ldr	r2, [r7, #24]
 8112cea:	0151      	lsls	r1, r2, #5
 8112cec:	69fa      	ldr	r2, [r7, #28]
 8112cee:	440a      	add	r2, r1
 8112cf0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8112cf4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8112cf8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8112cfc:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8112cfe:	68bb      	ldr	r3, [r7, #8]
 8112d00:	695b      	ldr	r3, [r3, #20]
 8112d02:	2b00      	cmp	r3, #0
 8112d04:	d126      	bne.n	8112d54 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8112d06:	69bb      	ldr	r3, [r7, #24]
 8112d08:	015a      	lsls	r2, r3, #5
 8112d0a:	69fb      	ldr	r3, [r7, #28]
 8112d0c:	4413      	add	r3, r2
 8112d0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8112d12:	691a      	ldr	r2, [r3, #16]
 8112d14:	68bb      	ldr	r3, [r7, #8]
 8112d16:	689b      	ldr	r3, [r3, #8]
 8112d18:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8112d1c:	69b9      	ldr	r1, [r7, #24]
 8112d1e:	0148      	lsls	r0, r1, #5
 8112d20:	69f9      	ldr	r1, [r7, #28]
 8112d22:	4401      	add	r1, r0
 8112d24:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8112d28:	4313      	orrs	r3, r2
 8112d2a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8112d2c:	69bb      	ldr	r3, [r7, #24]
 8112d2e:	015a      	lsls	r2, r3, #5
 8112d30:	69fb      	ldr	r3, [r7, #28]
 8112d32:	4413      	add	r3, r2
 8112d34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8112d38:	691b      	ldr	r3, [r3, #16]
 8112d3a:	69ba      	ldr	r2, [r7, #24]
 8112d3c:	0151      	lsls	r1, r2, #5
 8112d3e:	69fa      	ldr	r2, [r7, #28]
 8112d40:	440a      	add	r2, r1
 8112d42:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8112d46:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8112d4a:	6113      	str	r3, [r2, #16]
 8112d4c:	e036      	b.n	8112dbc <USB_EPStartXfer+0x3dc>
 8112d4e:	bf00      	nop
 8112d50:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8112d54:	68bb      	ldr	r3, [r7, #8]
 8112d56:	695a      	ldr	r2, [r3, #20]
 8112d58:	68bb      	ldr	r3, [r7, #8]
 8112d5a:	689b      	ldr	r3, [r3, #8]
 8112d5c:	4413      	add	r3, r2
 8112d5e:	1e5a      	subs	r2, r3, #1
 8112d60:	68bb      	ldr	r3, [r7, #8]
 8112d62:	689b      	ldr	r3, [r3, #8]
 8112d64:	fbb2 f3f3 	udiv	r3, r2, r3
 8112d68:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8112d6a:	69bb      	ldr	r3, [r7, #24]
 8112d6c:	015a      	lsls	r2, r3, #5
 8112d6e:	69fb      	ldr	r3, [r7, #28]
 8112d70:	4413      	add	r3, r2
 8112d72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8112d76:	691a      	ldr	r2, [r3, #16]
 8112d78:	8afb      	ldrh	r3, [r7, #22]
 8112d7a:	04d9      	lsls	r1, r3, #19
 8112d7c:	4b39      	ldr	r3, [pc, #228]	; (8112e64 <USB_EPStartXfer+0x484>)
 8112d7e:	400b      	ands	r3, r1
 8112d80:	69b9      	ldr	r1, [r7, #24]
 8112d82:	0148      	lsls	r0, r1, #5
 8112d84:	69f9      	ldr	r1, [r7, #28]
 8112d86:	4401      	add	r1, r0
 8112d88:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8112d8c:	4313      	orrs	r3, r2
 8112d8e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8112d90:	69bb      	ldr	r3, [r7, #24]
 8112d92:	015a      	lsls	r2, r3, #5
 8112d94:	69fb      	ldr	r3, [r7, #28]
 8112d96:	4413      	add	r3, r2
 8112d98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8112d9c:	691a      	ldr	r2, [r3, #16]
 8112d9e:	68bb      	ldr	r3, [r7, #8]
 8112da0:	689b      	ldr	r3, [r3, #8]
 8112da2:	8af9      	ldrh	r1, [r7, #22]
 8112da4:	fb01 f303 	mul.w	r3, r1, r3
 8112da8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8112dac:	69b9      	ldr	r1, [r7, #24]
 8112dae:	0148      	lsls	r0, r1, #5
 8112db0:	69f9      	ldr	r1, [r7, #28]
 8112db2:	4401      	add	r1, r0
 8112db4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8112db8:	4313      	orrs	r3, r2
 8112dba:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8112dbc:	79fb      	ldrb	r3, [r7, #7]
 8112dbe:	2b01      	cmp	r3, #1
 8112dc0:	d10d      	bne.n	8112dde <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8112dc2:	68bb      	ldr	r3, [r7, #8]
 8112dc4:	68db      	ldr	r3, [r3, #12]
 8112dc6:	2b00      	cmp	r3, #0
 8112dc8:	d009      	beq.n	8112dde <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8112dca:	68bb      	ldr	r3, [r7, #8]
 8112dcc:	68d9      	ldr	r1, [r3, #12]
 8112dce:	69bb      	ldr	r3, [r7, #24]
 8112dd0:	015a      	lsls	r2, r3, #5
 8112dd2:	69fb      	ldr	r3, [r7, #28]
 8112dd4:	4413      	add	r3, r2
 8112dd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8112dda:	460a      	mov	r2, r1
 8112ddc:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8112dde:	68bb      	ldr	r3, [r7, #8]
 8112de0:	78db      	ldrb	r3, [r3, #3]
 8112de2:	2b01      	cmp	r3, #1
 8112de4:	d128      	bne.n	8112e38 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8112de6:	69fb      	ldr	r3, [r7, #28]
 8112de8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8112dec:	689b      	ldr	r3, [r3, #8]
 8112dee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8112df2:	2b00      	cmp	r3, #0
 8112df4:	d110      	bne.n	8112e18 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8112df6:	69bb      	ldr	r3, [r7, #24]
 8112df8:	015a      	lsls	r2, r3, #5
 8112dfa:	69fb      	ldr	r3, [r7, #28]
 8112dfc:	4413      	add	r3, r2
 8112dfe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8112e02:	681b      	ldr	r3, [r3, #0]
 8112e04:	69ba      	ldr	r2, [r7, #24]
 8112e06:	0151      	lsls	r1, r2, #5
 8112e08:	69fa      	ldr	r2, [r7, #28]
 8112e0a:	440a      	add	r2, r1
 8112e0c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8112e10:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8112e14:	6013      	str	r3, [r2, #0]
 8112e16:	e00f      	b.n	8112e38 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8112e18:	69bb      	ldr	r3, [r7, #24]
 8112e1a:	015a      	lsls	r2, r3, #5
 8112e1c:	69fb      	ldr	r3, [r7, #28]
 8112e1e:	4413      	add	r3, r2
 8112e20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8112e24:	681b      	ldr	r3, [r3, #0]
 8112e26:	69ba      	ldr	r2, [r7, #24]
 8112e28:	0151      	lsls	r1, r2, #5
 8112e2a:	69fa      	ldr	r2, [r7, #28]
 8112e2c:	440a      	add	r2, r1
 8112e2e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8112e32:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8112e36:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8112e38:	69bb      	ldr	r3, [r7, #24]
 8112e3a:	015a      	lsls	r2, r3, #5
 8112e3c:	69fb      	ldr	r3, [r7, #28]
 8112e3e:	4413      	add	r3, r2
 8112e40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8112e44:	681b      	ldr	r3, [r3, #0]
 8112e46:	69ba      	ldr	r2, [r7, #24]
 8112e48:	0151      	lsls	r1, r2, #5
 8112e4a:	69fa      	ldr	r2, [r7, #28]
 8112e4c:	440a      	add	r2, r1
 8112e4e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8112e52:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8112e56:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8112e58:	2300      	movs	r3, #0
}
 8112e5a:	4618      	mov	r0, r3
 8112e5c:	3720      	adds	r7, #32
 8112e5e:	46bd      	mov	sp, r7
 8112e60:	bd80      	pop	{r7, pc}
 8112e62:	bf00      	nop
 8112e64:	1ff80000 	.word	0x1ff80000

08112e68 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8112e68:	b480      	push	{r7}
 8112e6a:	b087      	sub	sp, #28
 8112e6c:	af00      	add	r7, sp, #0
 8112e6e:	60f8      	str	r0, [r7, #12]
 8112e70:	60b9      	str	r1, [r7, #8]
 8112e72:	4613      	mov	r3, r2
 8112e74:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8112e76:	68fb      	ldr	r3, [r7, #12]
 8112e78:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8112e7a:	68bb      	ldr	r3, [r7, #8]
 8112e7c:	781b      	ldrb	r3, [r3, #0]
 8112e7e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8112e80:	68bb      	ldr	r3, [r7, #8]
 8112e82:	785b      	ldrb	r3, [r3, #1]
 8112e84:	2b01      	cmp	r3, #1
 8112e86:	f040 80cd 	bne.w	8113024 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8112e8a:	68bb      	ldr	r3, [r7, #8]
 8112e8c:	695b      	ldr	r3, [r3, #20]
 8112e8e:	2b00      	cmp	r3, #0
 8112e90:	d132      	bne.n	8112ef8 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8112e92:	693b      	ldr	r3, [r7, #16]
 8112e94:	015a      	lsls	r2, r3, #5
 8112e96:	697b      	ldr	r3, [r7, #20]
 8112e98:	4413      	add	r3, r2
 8112e9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8112e9e:	691b      	ldr	r3, [r3, #16]
 8112ea0:	693a      	ldr	r2, [r7, #16]
 8112ea2:	0151      	lsls	r1, r2, #5
 8112ea4:	697a      	ldr	r2, [r7, #20]
 8112ea6:	440a      	add	r2, r1
 8112ea8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8112eac:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8112eb0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8112eb4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8112eb6:	693b      	ldr	r3, [r7, #16]
 8112eb8:	015a      	lsls	r2, r3, #5
 8112eba:	697b      	ldr	r3, [r7, #20]
 8112ebc:	4413      	add	r3, r2
 8112ebe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8112ec2:	691b      	ldr	r3, [r3, #16]
 8112ec4:	693a      	ldr	r2, [r7, #16]
 8112ec6:	0151      	lsls	r1, r2, #5
 8112ec8:	697a      	ldr	r2, [r7, #20]
 8112eca:	440a      	add	r2, r1
 8112ecc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8112ed0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8112ed4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8112ed6:	693b      	ldr	r3, [r7, #16]
 8112ed8:	015a      	lsls	r2, r3, #5
 8112eda:	697b      	ldr	r3, [r7, #20]
 8112edc:	4413      	add	r3, r2
 8112ede:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8112ee2:	691b      	ldr	r3, [r3, #16]
 8112ee4:	693a      	ldr	r2, [r7, #16]
 8112ee6:	0151      	lsls	r1, r2, #5
 8112ee8:	697a      	ldr	r2, [r7, #20]
 8112eea:	440a      	add	r2, r1
 8112eec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8112ef0:	0cdb      	lsrs	r3, r3, #19
 8112ef2:	04db      	lsls	r3, r3, #19
 8112ef4:	6113      	str	r3, [r2, #16]
 8112ef6:	e04e      	b.n	8112f96 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8112ef8:	693b      	ldr	r3, [r7, #16]
 8112efa:	015a      	lsls	r2, r3, #5
 8112efc:	697b      	ldr	r3, [r7, #20]
 8112efe:	4413      	add	r3, r2
 8112f00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8112f04:	691b      	ldr	r3, [r3, #16]
 8112f06:	693a      	ldr	r2, [r7, #16]
 8112f08:	0151      	lsls	r1, r2, #5
 8112f0a:	697a      	ldr	r2, [r7, #20]
 8112f0c:	440a      	add	r2, r1
 8112f0e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8112f12:	0cdb      	lsrs	r3, r3, #19
 8112f14:	04db      	lsls	r3, r3, #19
 8112f16:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8112f18:	693b      	ldr	r3, [r7, #16]
 8112f1a:	015a      	lsls	r2, r3, #5
 8112f1c:	697b      	ldr	r3, [r7, #20]
 8112f1e:	4413      	add	r3, r2
 8112f20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8112f24:	691b      	ldr	r3, [r3, #16]
 8112f26:	693a      	ldr	r2, [r7, #16]
 8112f28:	0151      	lsls	r1, r2, #5
 8112f2a:	697a      	ldr	r2, [r7, #20]
 8112f2c:	440a      	add	r2, r1
 8112f2e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8112f32:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8112f36:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8112f3a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8112f3c:	68bb      	ldr	r3, [r7, #8]
 8112f3e:	695a      	ldr	r2, [r3, #20]
 8112f40:	68bb      	ldr	r3, [r7, #8]
 8112f42:	689b      	ldr	r3, [r3, #8]
 8112f44:	429a      	cmp	r2, r3
 8112f46:	d903      	bls.n	8112f50 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8112f48:	68bb      	ldr	r3, [r7, #8]
 8112f4a:	689a      	ldr	r2, [r3, #8]
 8112f4c:	68bb      	ldr	r3, [r7, #8]
 8112f4e:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8112f50:	693b      	ldr	r3, [r7, #16]
 8112f52:	015a      	lsls	r2, r3, #5
 8112f54:	697b      	ldr	r3, [r7, #20]
 8112f56:	4413      	add	r3, r2
 8112f58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8112f5c:	691b      	ldr	r3, [r3, #16]
 8112f5e:	693a      	ldr	r2, [r7, #16]
 8112f60:	0151      	lsls	r1, r2, #5
 8112f62:	697a      	ldr	r2, [r7, #20]
 8112f64:	440a      	add	r2, r1
 8112f66:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8112f6a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8112f6e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8112f70:	693b      	ldr	r3, [r7, #16]
 8112f72:	015a      	lsls	r2, r3, #5
 8112f74:	697b      	ldr	r3, [r7, #20]
 8112f76:	4413      	add	r3, r2
 8112f78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8112f7c:	691a      	ldr	r2, [r3, #16]
 8112f7e:	68bb      	ldr	r3, [r7, #8]
 8112f80:	695b      	ldr	r3, [r3, #20]
 8112f82:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8112f86:	6939      	ldr	r1, [r7, #16]
 8112f88:	0148      	lsls	r0, r1, #5
 8112f8a:	6979      	ldr	r1, [r7, #20]
 8112f8c:	4401      	add	r1, r0
 8112f8e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8112f92:	4313      	orrs	r3, r2
 8112f94:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8112f96:	79fb      	ldrb	r3, [r7, #7]
 8112f98:	2b01      	cmp	r3, #1
 8112f9a:	d11e      	bne.n	8112fda <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8112f9c:	68bb      	ldr	r3, [r7, #8]
 8112f9e:	691b      	ldr	r3, [r3, #16]
 8112fa0:	2b00      	cmp	r3, #0
 8112fa2:	d009      	beq.n	8112fb8 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8112fa4:	693b      	ldr	r3, [r7, #16]
 8112fa6:	015a      	lsls	r2, r3, #5
 8112fa8:	697b      	ldr	r3, [r7, #20]
 8112faa:	4413      	add	r3, r2
 8112fac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8112fb0:	461a      	mov	r2, r3
 8112fb2:	68bb      	ldr	r3, [r7, #8]
 8112fb4:	691b      	ldr	r3, [r3, #16]
 8112fb6:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8112fb8:	693b      	ldr	r3, [r7, #16]
 8112fba:	015a      	lsls	r2, r3, #5
 8112fbc:	697b      	ldr	r3, [r7, #20]
 8112fbe:	4413      	add	r3, r2
 8112fc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8112fc4:	681b      	ldr	r3, [r3, #0]
 8112fc6:	693a      	ldr	r2, [r7, #16]
 8112fc8:	0151      	lsls	r1, r2, #5
 8112fca:	697a      	ldr	r2, [r7, #20]
 8112fcc:	440a      	add	r2, r1
 8112fce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8112fd2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8112fd6:	6013      	str	r3, [r2, #0]
 8112fd8:	e092      	b.n	8113100 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8112fda:	693b      	ldr	r3, [r7, #16]
 8112fdc:	015a      	lsls	r2, r3, #5
 8112fde:	697b      	ldr	r3, [r7, #20]
 8112fe0:	4413      	add	r3, r2
 8112fe2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8112fe6:	681b      	ldr	r3, [r3, #0]
 8112fe8:	693a      	ldr	r2, [r7, #16]
 8112fea:	0151      	lsls	r1, r2, #5
 8112fec:	697a      	ldr	r2, [r7, #20]
 8112fee:	440a      	add	r2, r1
 8112ff0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8112ff4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8112ff8:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8112ffa:	68bb      	ldr	r3, [r7, #8]
 8112ffc:	695b      	ldr	r3, [r3, #20]
 8112ffe:	2b00      	cmp	r3, #0
 8113000:	d07e      	beq.n	8113100 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8113002:	697b      	ldr	r3, [r7, #20]
 8113004:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8113008:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 811300a:	68bb      	ldr	r3, [r7, #8]
 811300c:	781b      	ldrb	r3, [r3, #0]
 811300e:	f003 030f 	and.w	r3, r3, #15
 8113012:	2101      	movs	r1, #1
 8113014:	fa01 f303 	lsl.w	r3, r1, r3
 8113018:	6979      	ldr	r1, [r7, #20]
 811301a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 811301e:	4313      	orrs	r3, r2
 8113020:	634b      	str	r3, [r1, #52]	; 0x34
 8113022:	e06d      	b.n	8113100 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8113024:	693b      	ldr	r3, [r7, #16]
 8113026:	015a      	lsls	r2, r3, #5
 8113028:	697b      	ldr	r3, [r7, #20]
 811302a:	4413      	add	r3, r2
 811302c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8113030:	691b      	ldr	r3, [r3, #16]
 8113032:	693a      	ldr	r2, [r7, #16]
 8113034:	0151      	lsls	r1, r2, #5
 8113036:	697a      	ldr	r2, [r7, #20]
 8113038:	440a      	add	r2, r1
 811303a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 811303e:	0cdb      	lsrs	r3, r3, #19
 8113040:	04db      	lsls	r3, r3, #19
 8113042:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8113044:	693b      	ldr	r3, [r7, #16]
 8113046:	015a      	lsls	r2, r3, #5
 8113048:	697b      	ldr	r3, [r7, #20]
 811304a:	4413      	add	r3, r2
 811304c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8113050:	691b      	ldr	r3, [r3, #16]
 8113052:	693a      	ldr	r2, [r7, #16]
 8113054:	0151      	lsls	r1, r2, #5
 8113056:	697a      	ldr	r2, [r7, #20]
 8113058:	440a      	add	r2, r1
 811305a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 811305e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8113062:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8113066:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8113068:	68bb      	ldr	r3, [r7, #8]
 811306a:	695b      	ldr	r3, [r3, #20]
 811306c:	2b00      	cmp	r3, #0
 811306e:	d003      	beq.n	8113078 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8113070:	68bb      	ldr	r3, [r7, #8]
 8113072:	689a      	ldr	r2, [r3, #8]
 8113074:	68bb      	ldr	r3, [r7, #8]
 8113076:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8113078:	693b      	ldr	r3, [r7, #16]
 811307a:	015a      	lsls	r2, r3, #5
 811307c:	697b      	ldr	r3, [r7, #20]
 811307e:	4413      	add	r3, r2
 8113080:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8113084:	691b      	ldr	r3, [r3, #16]
 8113086:	693a      	ldr	r2, [r7, #16]
 8113088:	0151      	lsls	r1, r2, #5
 811308a:	697a      	ldr	r2, [r7, #20]
 811308c:	440a      	add	r2, r1
 811308e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8113092:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8113096:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8113098:	693b      	ldr	r3, [r7, #16]
 811309a:	015a      	lsls	r2, r3, #5
 811309c:	697b      	ldr	r3, [r7, #20]
 811309e:	4413      	add	r3, r2
 81130a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 81130a4:	691a      	ldr	r2, [r3, #16]
 81130a6:	68bb      	ldr	r3, [r7, #8]
 81130a8:	689b      	ldr	r3, [r3, #8]
 81130aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 81130ae:	6939      	ldr	r1, [r7, #16]
 81130b0:	0148      	lsls	r0, r1, #5
 81130b2:	6979      	ldr	r1, [r7, #20]
 81130b4:	4401      	add	r1, r0
 81130b6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 81130ba:	4313      	orrs	r3, r2
 81130bc:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 81130be:	79fb      	ldrb	r3, [r7, #7]
 81130c0:	2b01      	cmp	r3, #1
 81130c2:	d10d      	bne.n	81130e0 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 81130c4:	68bb      	ldr	r3, [r7, #8]
 81130c6:	68db      	ldr	r3, [r3, #12]
 81130c8:	2b00      	cmp	r3, #0
 81130ca:	d009      	beq.n	81130e0 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 81130cc:	68bb      	ldr	r3, [r7, #8]
 81130ce:	68d9      	ldr	r1, [r3, #12]
 81130d0:	693b      	ldr	r3, [r7, #16]
 81130d2:	015a      	lsls	r2, r3, #5
 81130d4:	697b      	ldr	r3, [r7, #20]
 81130d6:	4413      	add	r3, r2
 81130d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 81130dc:	460a      	mov	r2, r1
 81130de:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 81130e0:	693b      	ldr	r3, [r7, #16]
 81130e2:	015a      	lsls	r2, r3, #5
 81130e4:	697b      	ldr	r3, [r7, #20]
 81130e6:	4413      	add	r3, r2
 81130e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 81130ec:	681b      	ldr	r3, [r3, #0]
 81130ee:	693a      	ldr	r2, [r7, #16]
 81130f0:	0151      	lsls	r1, r2, #5
 81130f2:	697a      	ldr	r2, [r7, #20]
 81130f4:	440a      	add	r2, r1
 81130f6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 81130fa:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 81130fe:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8113100:	2300      	movs	r3, #0
}
 8113102:	4618      	mov	r0, r3
 8113104:	371c      	adds	r7, #28
 8113106:	46bd      	mov	sp, r7
 8113108:	f85d 7b04 	ldr.w	r7, [sp], #4
 811310c:	4770      	bx	lr

0811310e <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 811310e:	b480      	push	{r7}
 8113110:	b089      	sub	sp, #36	; 0x24
 8113112:	af00      	add	r7, sp, #0
 8113114:	60f8      	str	r0, [r7, #12]
 8113116:	60b9      	str	r1, [r7, #8]
 8113118:	4611      	mov	r1, r2
 811311a:	461a      	mov	r2, r3
 811311c:	460b      	mov	r3, r1
 811311e:	71fb      	strb	r3, [r7, #7]
 8113120:	4613      	mov	r3, r2
 8113122:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8113124:	68fb      	ldr	r3, [r7, #12]
 8113126:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8113128:	68bb      	ldr	r3, [r7, #8]
 811312a:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 811312c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8113130:	2b00      	cmp	r3, #0
 8113132:	d123      	bne.n	811317c <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8113134:	88bb      	ldrh	r3, [r7, #4]
 8113136:	3303      	adds	r3, #3
 8113138:	089b      	lsrs	r3, r3, #2
 811313a:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 811313c:	2300      	movs	r3, #0
 811313e:	61bb      	str	r3, [r7, #24]
 8113140:	e018      	b.n	8113174 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8113142:	79fb      	ldrb	r3, [r7, #7]
 8113144:	031a      	lsls	r2, r3, #12
 8113146:	697b      	ldr	r3, [r7, #20]
 8113148:	4413      	add	r3, r2
 811314a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 811314e:	461a      	mov	r2, r3
 8113150:	69fb      	ldr	r3, [r7, #28]
 8113152:	681b      	ldr	r3, [r3, #0]
 8113154:	6013      	str	r3, [r2, #0]
      pSrc++;
 8113156:	69fb      	ldr	r3, [r7, #28]
 8113158:	3301      	adds	r3, #1
 811315a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 811315c:	69fb      	ldr	r3, [r7, #28]
 811315e:	3301      	adds	r3, #1
 8113160:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8113162:	69fb      	ldr	r3, [r7, #28]
 8113164:	3301      	adds	r3, #1
 8113166:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8113168:	69fb      	ldr	r3, [r7, #28]
 811316a:	3301      	adds	r3, #1
 811316c:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 811316e:	69bb      	ldr	r3, [r7, #24]
 8113170:	3301      	adds	r3, #1
 8113172:	61bb      	str	r3, [r7, #24]
 8113174:	69ba      	ldr	r2, [r7, #24]
 8113176:	693b      	ldr	r3, [r7, #16]
 8113178:	429a      	cmp	r2, r3
 811317a:	d3e2      	bcc.n	8113142 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 811317c:	2300      	movs	r3, #0
}
 811317e:	4618      	mov	r0, r3
 8113180:	3724      	adds	r7, #36	; 0x24
 8113182:	46bd      	mov	sp, r7
 8113184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8113188:	4770      	bx	lr

0811318a <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 811318a:	b480      	push	{r7}
 811318c:	b08b      	sub	sp, #44	; 0x2c
 811318e:	af00      	add	r7, sp, #0
 8113190:	60f8      	str	r0, [r7, #12]
 8113192:	60b9      	str	r1, [r7, #8]
 8113194:	4613      	mov	r3, r2
 8113196:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8113198:	68fb      	ldr	r3, [r7, #12]
 811319a:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 811319c:	68bb      	ldr	r3, [r7, #8]
 811319e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 81131a0:	88fb      	ldrh	r3, [r7, #6]
 81131a2:	089b      	lsrs	r3, r3, #2
 81131a4:	b29b      	uxth	r3, r3
 81131a6:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 81131a8:	88fb      	ldrh	r3, [r7, #6]
 81131aa:	f003 0303 	and.w	r3, r3, #3
 81131ae:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 81131b0:	2300      	movs	r3, #0
 81131b2:	623b      	str	r3, [r7, #32]
 81131b4:	e014      	b.n	81131e0 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 81131b6:	69bb      	ldr	r3, [r7, #24]
 81131b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 81131bc:	681a      	ldr	r2, [r3, #0]
 81131be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81131c0:	601a      	str	r2, [r3, #0]
    pDest++;
 81131c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81131c4:	3301      	adds	r3, #1
 81131c6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 81131c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81131ca:	3301      	adds	r3, #1
 81131cc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 81131ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81131d0:	3301      	adds	r3, #1
 81131d2:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 81131d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81131d6:	3301      	adds	r3, #1
 81131d8:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 81131da:	6a3b      	ldr	r3, [r7, #32]
 81131dc:	3301      	adds	r3, #1
 81131de:	623b      	str	r3, [r7, #32]
 81131e0:	6a3a      	ldr	r2, [r7, #32]
 81131e2:	697b      	ldr	r3, [r7, #20]
 81131e4:	429a      	cmp	r2, r3
 81131e6:	d3e6      	bcc.n	81131b6 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 81131e8:	8bfb      	ldrh	r3, [r7, #30]
 81131ea:	2b00      	cmp	r3, #0
 81131ec:	d01e      	beq.n	811322c <USB_ReadPacket+0xa2>
  {
    i = 0U;
 81131ee:	2300      	movs	r3, #0
 81131f0:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 81131f2:	69bb      	ldr	r3, [r7, #24]
 81131f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 81131f8:	461a      	mov	r2, r3
 81131fa:	f107 0310 	add.w	r3, r7, #16
 81131fe:	6812      	ldr	r2, [r2, #0]
 8113200:	601a      	str	r2, [r3, #0]
	
    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8113202:	693a      	ldr	r2, [r7, #16]
 8113204:	6a3b      	ldr	r3, [r7, #32]
 8113206:	b2db      	uxtb	r3, r3
 8113208:	00db      	lsls	r3, r3, #3
 811320a:	fa22 f303 	lsr.w	r3, r2, r3
 811320e:	b2da      	uxtb	r2, r3
 8113210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8113212:	701a      	strb	r2, [r3, #0]
      i++;
 8113214:	6a3b      	ldr	r3, [r7, #32]
 8113216:	3301      	adds	r3, #1
 8113218:	623b      	str	r3, [r7, #32]
      pDest++;
 811321a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 811321c:	3301      	adds	r3, #1
 811321e:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8113220:	8bfb      	ldrh	r3, [r7, #30]
 8113222:	3b01      	subs	r3, #1
 8113224:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8113226:	8bfb      	ldrh	r3, [r7, #30]
 8113228:	2b00      	cmp	r3, #0
 811322a:	d1ea      	bne.n	8113202 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 811322c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 811322e:	4618      	mov	r0, r3
 8113230:	372c      	adds	r7, #44	; 0x2c
 8113232:	46bd      	mov	sp, r7
 8113234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8113238:	4770      	bx	lr

0811323a <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 811323a:	b480      	push	{r7}
 811323c:	b085      	sub	sp, #20
 811323e:	af00      	add	r7, sp, #0
 8113240:	6078      	str	r0, [r7, #4]
 8113242:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8113244:	687b      	ldr	r3, [r7, #4]
 8113246:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8113248:	683b      	ldr	r3, [r7, #0]
 811324a:	781b      	ldrb	r3, [r3, #0]
 811324c:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 811324e:	683b      	ldr	r3, [r7, #0]
 8113250:	785b      	ldrb	r3, [r3, #1]
 8113252:	2b01      	cmp	r3, #1
 8113254:	d12c      	bne.n	81132b0 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8113256:	68bb      	ldr	r3, [r7, #8]
 8113258:	015a      	lsls	r2, r3, #5
 811325a:	68fb      	ldr	r3, [r7, #12]
 811325c:	4413      	add	r3, r2
 811325e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8113262:	681b      	ldr	r3, [r3, #0]
 8113264:	2b00      	cmp	r3, #0
 8113266:	db12      	blt.n	811328e <USB_EPSetStall+0x54>
 8113268:	68bb      	ldr	r3, [r7, #8]
 811326a:	2b00      	cmp	r3, #0
 811326c:	d00f      	beq.n	811328e <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 811326e:	68bb      	ldr	r3, [r7, #8]
 8113270:	015a      	lsls	r2, r3, #5
 8113272:	68fb      	ldr	r3, [r7, #12]
 8113274:	4413      	add	r3, r2
 8113276:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 811327a:	681b      	ldr	r3, [r3, #0]
 811327c:	68ba      	ldr	r2, [r7, #8]
 811327e:	0151      	lsls	r1, r2, #5
 8113280:	68fa      	ldr	r2, [r7, #12]
 8113282:	440a      	add	r2, r1
 8113284:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8113288:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 811328c:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 811328e:	68bb      	ldr	r3, [r7, #8]
 8113290:	015a      	lsls	r2, r3, #5
 8113292:	68fb      	ldr	r3, [r7, #12]
 8113294:	4413      	add	r3, r2
 8113296:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 811329a:	681b      	ldr	r3, [r3, #0]
 811329c:	68ba      	ldr	r2, [r7, #8]
 811329e:	0151      	lsls	r1, r2, #5
 81132a0:	68fa      	ldr	r2, [r7, #12]
 81132a2:	440a      	add	r2, r1
 81132a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 81132a8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 81132ac:	6013      	str	r3, [r2, #0]
 81132ae:	e02b      	b.n	8113308 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 81132b0:	68bb      	ldr	r3, [r7, #8]
 81132b2:	015a      	lsls	r2, r3, #5
 81132b4:	68fb      	ldr	r3, [r7, #12]
 81132b6:	4413      	add	r3, r2
 81132b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 81132bc:	681b      	ldr	r3, [r3, #0]
 81132be:	2b00      	cmp	r3, #0
 81132c0:	db12      	blt.n	81132e8 <USB_EPSetStall+0xae>
 81132c2:	68bb      	ldr	r3, [r7, #8]
 81132c4:	2b00      	cmp	r3, #0
 81132c6:	d00f      	beq.n	81132e8 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 81132c8:	68bb      	ldr	r3, [r7, #8]
 81132ca:	015a      	lsls	r2, r3, #5
 81132cc:	68fb      	ldr	r3, [r7, #12]
 81132ce:	4413      	add	r3, r2
 81132d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 81132d4:	681b      	ldr	r3, [r3, #0]
 81132d6:	68ba      	ldr	r2, [r7, #8]
 81132d8:	0151      	lsls	r1, r2, #5
 81132da:	68fa      	ldr	r2, [r7, #12]
 81132dc:	440a      	add	r2, r1
 81132de:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 81132e2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 81132e6:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 81132e8:	68bb      	ldr	r3, [r7, #8]
 81132ea:	015a      	lsls	r2, r3, #5
 81132ec:	68fb      	ldr	r3, [r7, #12]
 81132ee:	4413      	add	r3, r2
 81132f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 81132f4:	681b      	ldr	r3, [r3, #0]
 81132f6:	68ba      	ldr	r2, [r7, #8]
 81132f8:	0151      	lsls	r1, r2, #5
 81132fa:	68fa      	ldr	r2, [r7, #12]
 81132fc:	440a      	add	r2, r1
 81132fe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8113302:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8113306:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8113308:	2300      	movs	r3, #0
}
 811330a:	4618      	mov	r0, r3
 811330c:	3714      	adds	r7, #20
 811330e:	46bd      	mov	sp, r7
 8113310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8113314:	4770      	bx	lr

08113316 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8113316:	b480      	push	{r7}
 8113318:	b085      	sub	sp, #20
 811331a:	af00      	add	r7, sp, #0
 811331c:	6078      	str	r0, [r7, #4]
 811331e:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8113320:	687b      	ldr	r3, [r7, #4]
 8113322:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8113324:	683b      	ldr	r3, [r7, #0]
 8113326:	781b      	ldrb	r3, [r3, #0]
 8113328:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 811332a:	683b      	ldr	r3, [r7, #0]
 811332c:	785b      	ldrb	r3, [r3, #1]
 811332e:	2b01      	cmp	r3, #1
 8113330:	d128      	bne.n	8113384 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8113332:	68bb      	ldr	r3, [r7, #8]
 8113334:	015a      	lsls	r2, r3, #5
 8113336:	68fb      	ldr	r3, [r7, #12]
 8113338:	4413      	add	r3, r2
 811333a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 811333e:	681b      	ldr	r3, [r3, #0]
 8113340:	68ba      	ldr	r2, [r7, #8]
 8113342:	0151      	lsls	r1, r2, #5
 8113344:	68fa      	ldr	r2, [r7, #12]
 8113346:	440a      	add	r2, r1
 8113348:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 811334c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8113350:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8113352:	683b      	ldr	r3, [r7, #0]
 8113354:	78db      	ldrb	r3, [r3, #3]
 8113356:	2b03      	cmp	r3, #3
 8113358:	d003      	beq.n	8113362 <USB_EPClearStall+0x4c>
 811335a:	683b      	ldr	r3, [r7, #0]
 811335c:	78db      	ldrb	r3, [r3, #3]
 811335e:	2b02      	cmp	r3, #2
 8113360:	d138      	bne.n	81133d4 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8113362:	68bb      	ldr	r3, [r7, #8]
 8113364:	015a      	lsls	r2, r3, #5
 8113366:	68fb      	ldr	r3, [r7, #12]
 8113368:	4413      	add	r3, r2
 811336a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 811336e:	681b      	ldr	r3, [r3, #0]
 8113370:	68ba      	ldr	r2, [r7, #8]
 8113372:	0151      	lsls	r1, r2, #5
 8113374:	68fa      	ldr	r2, [r7, #12]
 8113376:	440a      	add	r2, r1
 8113378:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 811337c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8113380:	6013      	str	r3, [r2, #0]
 8113382:	e027      	b.n	81133d4 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8113384:	68bb      	ldr	r3, [r7, #8]
 8113386:	015a      	lsls	r2, r3, #5
 8113388:	68fb      	ldr	r3, [r7, #12]
 811338a:	4413      	add	r3, r2
 811338c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8113390:	681b      	ldr	r3, [r3, #0]
 8113392:	68ba      	ldr	r2, [r7, #8]
 8113394:	0151      	lsls	r1, r2, #5
 8113396:	68fa      	ldr	r2, [r7, #12]
 8113398:	440a      	add	r2, r1
 811339a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 811339e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 81133a2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 81133a4:	683b      	ldr	r3, [r7, #0]
 81133a6:	78db      	ldrb	r3, [r3, #3]
 81133a8:	2b03      	cmp	r3, #3
 81133aa:	d003      	beq.n	81133b4 <USB_EPClearStall+0x9e>
 81133ac:	683b      	ldr	r3, [r7, #0]
 81133ae:	78db      	ldrb	r3, [r3, #3]
 81133b0:	2b02      	cmp	r3, #2
 81133b2:	d10f      	bne.n	81133d4 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 81133b4:	68bb      	ldr	r3, [r7, #8]
 81133b6:	015a      	lsls	r2, r3, #5
 81133b8:	68fb      	ldr	r3, [r7, #12]
 81133ba:	4413      	add	r3, r2
 81133bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 81133c0:	681b      	ldr	r3, [r3, #0]
 81133c2:	68ba      	ldr	r2, [r7, #8]
 81133c4:	0151      	lsls	r1, r2, #5
 81133c6:	68fa      	ldr	r2, [r7, #12]
 81133c8:	440a      	add	r2, r1
 81133ca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 81133ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 81133d2:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 81133d4:	2300      	movs	r3, #0
}
 81133d6:	4618      	mov	r0, r3
 81133d8:	3714      	adds	r7, #20
 81133da:	46bd      	mov	sp, r7
 81133dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 81133e0:	4770      	bx	lr

081133e2 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 81133e2:	b480      	push	{r7}
 81133e4:	b085      	sub	sp, #20
 81133e6:	af00      	add	r7, sp, #0
 81133e8:	6078      	str	r0, [r7, #4]
 81133ea:	460b      	mov	r3, r1
 81133ec:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 81133ee:	687b      	ldr	r3, [r7, #4]
 81133f0:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 81133f2:	68fb      	ldr	r3, [r7, #12]
 81133f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 81133f8:	681b      	ldr	r3, [r3, #0]
 81133fa:	68fa      	ldr	r2, [r7, #12]
 81133fc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8113400:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8113404:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8113406:	68fb      	ldr	r3, [r7, #12]
 8113408:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 811340c:	681a      	ldr	r2, [r3, #0]
 811340e:	78fb      	ldrb	r3, [r7, #3]
 8113410:	011b      	lsls	r3, r3, #4
 8113412:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8113416:	68f9      	ldr	r1, [r7, #12]
 8113418:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 811341c:	4313      	orrs	r3, r2
 811341e:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8113420:	2300      	movs	r3, #0
}
 8113422:	4618      	mov	r0, r3
 8113424:	3714      	adds	r7, #20
 8113426:	46bd      	mov	sp, r7
 8113428:	f85d 7b04 	ldr.w	r7, [sp], #4
 811342c:	4770      	bx	lr

0811342e <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 811342e:	b480      	push	{r7}
 8113430:	b085      	sub	sp, #20
 8113432:	af00      	add	r7, sp, #0
 8113434:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8113436:	687b      	ldr	r3, [r7, #4]
 8113438:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 811343a:	68fb      	ldr	r3, [r7, #12]
 811343c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8113440:	681b      	ldr	r3, [r3, #0]
 8113442:	68fa      	ldr	r2, [r7, #12]
 8113444:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8113448:	f023 0303 	bic.w	r3, r3, #3
 811344c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 811344e:	68fb      	ldr	r3, [r7, #12]
 8113450:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8113454:	685b      	ldr	r3, [r3, #4]
 8113456:	68fa      	ldr	r2, [r7, #12]
 8113458:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 811345c:	f023 0302 	bic.w	r3, r3, #2
 8113460:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8113462:	2300      	movs	r3, #0
}
 8113464:	4618      	mov	r0, r3
 8113466:	3714      	adds	r7, #20
 8113468:	46bd      	mov	sp, r7
 811346a:	f85d 7b04 	ldr.w	r7, [sp], #4
 811346e:	4770      	bx	lr

08113470 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8113470:	b480      	push	{r7}
 8113472:	b085      	sub	sp, #20
 8113474:	af00      	add	r7, sp, #0
 8113476:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8113478:	687b      	ldr	r3, [r7, #4]
 811347a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 811347c:	68fb      	ldr	r3, [r7, #12]
 811347e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8113482:	681b      	ldr	r3, [r3, #0]
 8113484:	68fa      	ldr	r2, [r7, #12]
 8113486:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 811348a:	f023 0303 	bic.w	r3, r3, #3
 811348e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8113490:	68fb      	ldr	r3, [r7, #12]
 8113492:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8113496:	685b      	ldr	r3, [r3, #4]
 8113498:	68fa      	ldr	r2, [r7, #12]
 811349a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 811349e:	f043 0302 	orr.w	r3, r3, #2
 81134a2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 81134a4:	2300      	movs	r3, #0
}
 81134a6:	4618      	mov	r0, r3
 81134a8:	3714      	adds	r7, #20
 81134aa:	46bd      	mov	sp, r7
 81134ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 81134b0:	4770      	bx	lr

081134b2 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 81134b2:	b480      	push	{r7}
 81134b4:	b085      	sub	sp, #20
 81134b6:	af00      	add	r7, sp, #0
 81134b8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 81134ba:	687b      	ldr	r3, [r7, #4]
 81134bc:	695b      	ldr	r3, [r3, #20]
 81134be:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 81134c0:	687b      	ldr	r3, [r7, #4]
 81134c2:	699b      	ldr	r3, [r3, #24]
 81134c4:	68fa      	ldr	r2, [r7, #12]
 81134c6:	4013      	ands	r3, r2
 81134c8:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 81134ca:	68fb      	ldr	r3, [r7, #12]
}
 81134cc:	4618      	mov	r0, r3
 81134ce:	3714      	adds	r7, #20
 81134d0:	46bd      	mov	sp, r7
 81134d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81134d6:	4770      	bx	lr

081134d8 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 81134d8:	b480      	push	{r7}
 81134da:	b085      	sub	sp, #20
 81134dc:	af00      	add	r7, sp, #0
 81134de:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 81134e0:	687b      	ldr	r3, [r7, #4]
 81134e2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 81134e4:	68fb      	ldr	r3, [r7, #12]
 81134e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 81134ea:	699b      	ldr	r3, [r3, #24]
 81134ec:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 81134ee:	68fb      	ldr	r3, [r7, #12]
 81134f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 81134f4:	69db      	ldr	r3, [r3, #28]
 81134f6:	68ba      	ldr	r2, [r7, #8]
 81134f8:	4013      	ands	r3, r2
 81134fa:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 81134fc:	68bb      	ldr	r3, [r7, #8]
 81134fe:	0c1b      	lsrs	r3, r3, #16
}
 8113500:	4618      	mov	r0, r3
 8113502:	3714      	adds	r7, #20
 8113504:	46bd      	mov	sp, r7
 8113506:	f85d 7b04 	ldr.w	r7, [sp], #4
 811350a:	4770      	bx	lr

0811350c <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 811350c:	b480      	push	{r7}
 811350e:	b085      	sub	sp, #20
 8113510:	af00      	add	r7, sp, #0
 8113512:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8113514:	687b      	ldr	r3, [r7, #4]
 8113516:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8113518:	68fb      	ldr	r3, [r7, #12]
 811351a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 811351e:	699b      	ldr	r3, [r3, #24]
 8113520:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8113522:	68fb      	ldr	r3, [r7, #12]
 8113524:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8113528:	69db      	ldr	r3, [r3, #28]
 811352a:	68ba      	ldr	r2, [r7, #8]
 811352c:	4013      	ands	r3, r2
 811352e:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8113530:	68bb      	ldr	r3, [r7, #8]
 8113532:	b29b      	uxth	r3, r3
}
 8113534:	4618      	mov	r0, r3
 8113536:	3714      	adds	r7, #20
 8113538:	46bd      	mov	sp, r7
 811353a:	f85d 7b04 	ldr.w	r7, [sp], #4
 811353e:	4770      	bx	lr

08113540 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8113540:	b480      	push	{r7}
 8113542:	b085      	sub	sp, #20
 8113544:	af00      	add	r7, sp, #0
 8113546:	6078      	str	r0, [r7, #4]
 8113548:	460b      	mov	r3, r1
 811354a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 811354c:	687b      	ldr	r3, [r7, #4]
 811354e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8113550:	78fb      	ldrb	r3, [r7, #3]
 8113552:	015a      	lsls	r2, r3, #5
 8113554:	68fb      	ldr	r3, [r7, #12]
 8113556:	4413      	add	r3, r2
 8113558:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 811355c:	689b      	ldr	r3, [r3, #8]
 811355e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8113560:	68fb      	ldr	r3, [r7, #12]
 8113562:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8113566:	695b      	ldr	r3, [r3, #20]
 8113568:	68ba      	ldr	r2, [r7, #8]
 811356a:	4013      	ands	r3, r2
 811356c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 811356e:	68bb      	ldr	r3, [r7, #8]
}
 8113570:	4618      	mov	r0, r3
 8113572:	3714      	adds	r7, #20
 8113574:	46bd      	mov	sp, r7
 8113576:	f85d 7b04 	ldr.w	r7, [sp], #4
 811357a:	4770      	bx	lr

0811357c <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 811357c:	b480      	push	{r7}
 811357e:	b087      	sub	sp, #28
 8113580:	af00      	add	r7, sp, #0
 8113582:	6078      	str	r0, [r7, #4]
 8113584:	460b      	mov	r3, r1
 8113586:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8113588:	687b      	ldr	r3, [r7, #4]
 811358a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 811358c:	697b      	ldr	r3, [r7, #20]
 811358e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8113592:	691b      	ldr	r3, [r3, #16]
 8113594:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8113596:	697b      	ldr	r3, [r7, #20]
 8113598:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 811359c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 811359e:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 81135a0:	78fb      	ldrb	r3, [r7, #3]
 81135a2:	f003 030f 	and.w	r3, r3, #15
 81135a6:	68fa      	ldr	r2, [r7, #12]
 81135a8:	fa22 f303 	lsr.w	r3, r2, r3
 81135ac:	01db      	lsls	r3, r3, #7
 81135ae:	b2db      	uxtb	r3, r3
 81135b0:	693a      	ldr	r2, [r7, #16]
 81135b2:	4313      	orrs	r3, r2
 81135b4:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 81135b6:	78fb      	ldrb	r3, [r7, #3]
 81135b8:	015a      	lsls	r2, r3, #5
 81135ba:	697b      	ldr	r3, [r7, #20]
 81135bc:	4413      	add	r3, r2
 81135be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 81135c2:	689b      	ldr	r3, [r3, #8]
 81135c4:	693a      	ldr	r2, [r7, #16]
 81135c6:	4013      	ands	r3, r2
 81135c8:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 81135ca:	68bb      	ldr	r3, [r7, #8]
}
 81135cc:	4618      	mov	r0, r3
 81135ce:	371c      	adds	r7, #28
 81135d0:	46bd      	mov	sp, r7
 81135d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81135d6:	4770      	bx	lr

081135d8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 81135d8:	b480      	push	{r7}
 81135da:	b083      	sub	sp, #12
 81135dc:	af00      	add	r7, sp, #0
 81135de:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 81135e0:	687b      	ldr	r3, [r7, #4]
 81135e2:	695b      	ldr	r3, [r3, #20]
 81135e4:	f003 0301 	and.w	r3, r3, #1
}
 81135e8:	4618      	mov	r0, r3
 81135ea:	370c      	adds	r7, #12
 81135ec:	46bd      	mov	sp, r7
 81135ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 81135f2:	4770      	bx	lr

081135f4 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 81135f4:	b480      	push	{r7}
 81135f6:	b085      	sub	sp, #20
 81135f8:	af00      	add	r7, sp, #0
 81135fa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 81135fc:	687b      	ldr	r3, [r7, #4]
 81135fe:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8113600:	68fb      	ldr	r3, [r7, #12]
 8113602:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8113606:	681b      	ldr	r3, [r3, #0]
 8113608:	68fa      	ldr	r2, [r7, #12]
 811360a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 811360e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8113612:	f023 0307 	bic.w	r3, r3, #7
 8113616:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8113618:	68fb      	ldr	r3, [r7, #12]
 811361a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 811361e:	685b      	ldr	r3, [r3, #4]
 8113620:	68fa      	ldr	r2, [r7, #12]
 8113622:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8113626:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 811362a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 811362c:	2300      	movs	r3, #0
}
 811362e:	4618      	mov	r0, r3
 8113630:	3714      	adds	r7, #20
 8113632:	46bd      	mov	sp, r7
 8113634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8113638:	4770      	bx	lr
	...

0811363c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 811363c:	b480      	push	{r7}
 811363e:	b087      	sub	sp, #28
 8113640:	af00      	add	r7, sp, #0
 8113642:	60f8      	str	r0, [r7, #12]
 8113644:	460b      	mov	r3, r1
 8113646:	607a      	str	r2, [r7, #4]
 8113648:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 811364a:	68fb      	ldr	r3, [r7, #12]
 811364c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 811364e:	68fb      	ldr	r3, [r7, #12]
 8113650:	333c      	adds	r3, #60	; 0x3c
 8113652:	3304      	adds	r3, #4
 8113654:	681b      	ldr	r3, [r3, #0]
 8113656:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8113658:	693b      	ldr	r3, [r7, #16]
 811365a:	4a26      	ldr	r2, [pc, #152]	; (81136f4 <USB_EP0_OutStart+0xb8>)
 811365c:	4293      	cmp	r3, r2
 811365e:	d90a      	bls.n	8113676 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8113660:	697b      	ldr	r3, [r7, #20]
 8113662:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8113666:	681b      	ldr	r3, [r3, #0]
 8113668:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 811366c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8113670:	d101      	bne.n	8113676 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8113672:	2300      	movs	r3, #0
 8113674:	e037      	b.n	81136e6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8113676:	697b      	ldr	r3, [r7, #20]
 8113678:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 811367c:	461a      	mov	r2, r3
 811367e:	2300      	movs	r3, #0
 8113680:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8113682:	697b      	ldr	r3, [r7, #20]
 8113684:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8113688:	691b      	ldr	r3, [r3, #16]
 811368a:	697a      	ldr	r2, [r7, #20]
 811368c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8113690:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8113694:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8113696:	697b      	ldr	r3, [r7, #20]
 8113698:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 811369c:	691b      	ldr	r3, [r3, #16]
 811369e:	697a      	ldr	r2, [r7, #20]
 81136a0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 81136a4:	f043 0318 	orr.w	r3, r3, #24
 81136a8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 81136aa:	697b      	ldr	r3, [r7, #20]
 81136ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 81136b0:	691b      	ldr	r3, [r3, #16]
 81136b2:	697a      	ldr	r2, [r7, #20]
 81136b4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 81136b8:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 81136bc:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 81136be:	7afb      	ldrb	r3, [r7, #11]
 81136c0:	2b01      	cmp	r3, #1
 81136c2:	d10f      	bne.n	81136e4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 81136c4:	697b      	ldr	r3, [r7, #20]
 81136c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 81136ca:	461a      	mov	r2, r3
 81136cc:	687b      	ldr	r3, [r7, #4]
 81136ce:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 81136d0:	697b      	ldr	r3, [r7, #20]
 81136d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 81136d6:	681b      	ldr	r3, [r3, #0]
 81136d8:	697a      	ldr	r2, [r7, #20]
 81136da:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 81136de:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 81136e2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 81136e4:	2300      	movs	r3, #0
}
 81136e6:	4618      	mov	r0, r3
 81136e8:	371c      	adds	r7, #28
 81136ea:	46bd      	mov	sp, r7
 81136ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 81136f0:	4770      	bx	lr
 81136f2:	bf00      	nop
 81136f4:	4f54300a 	.word	0x4f54300a

081136f8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 81136f8:	b480      	push	{r7}
 81136fa:	b085      	sub	sp, #20
 81136fc:	af00      	add	r7, sp, #0
 81136fe:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8113700:	2300      	movs	r3, #0
 8113702:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8113704:	68fb      	ldr	r3, [r7, #12]
 8113706:	3301      	adds	r3, #1
 8113708:	60fb      	str	r3, [r7, #12]
 811370a:	68fb      	ldr	r3, [r7, #12]
 811370c:	4a13      	ldr	r2, [pc, #76]	; (811375c <USB_CoreReset+0x64>)
 811370e:	4293      	cmp	r3, r2
 8113710:	d901      	bls.n	8113716 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8113712:	2303      	movs	r3, #3
 8113714:	e01b      	b.n	811374e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8113716:	687b      	ldr	r3, [r7, #4]
 8113718:	691b      	ldr	r3, [r3, #16]
 811371a:	2b00      	cmp	r3, #0
 811371c:	daf2      	bge.n	8113704 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 811371e:	2300      	movs	r3, #0
 8113720:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8113722:	687b      	ldr	r3, [r7, #4]
 8113724:	691b      	ldr	r3, [r3, #16]
 8113726:	f043 0201 	orr.w	r2, r3, #1
 811372a:	687b      	ldr	r3, [r7, #4]
 811372c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 811372e:	68fb      	ldr	r3, [r7, #12]
 8113730:	3301      	adds	r3, #1
 8113732:	60fb      	str	r3, [r7, #12]
 8113734:	68fb      	ldr	r3, [r7, #12]
 8113736:	4a09      	ldr	r2, [pc, #36]	; (811375c <USB_CoreReset+0x64>)
 8113738:	4293      	cmp	r3, r2
 811373a:	d901      	bls.n	8113740 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 811373c:	2303      	movs	r3, #3
 811373e:	e006      	b.n	811374e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8113740:	687b      	ldr	r3, [r7, #4]
 8113742:	691b      	ldr	r3, [r3, #16]
 8113744:	f003 0301 	and.w	r3, r3, #1
 8113748:	2b01      	cmp	r3, #1
 811374a:	d0f0      	beq.n	811372e <USB_CoreReset+0x36>

  return HAL_OK;
 811374c:	2300      	movs	r3, #0
}
 811374e:	4618      	mov	r0, r3
 8113750:	3714      	adds	r7, #20
 8113752:	46bd      	mov	sp, r7
 8113754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8113758:	4770      	bx	lr
 811375a:	bf00      	nop
 811375c:	00030d40 	.word	0x00030d40

08113760 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8113760:	b580      	push	{r7, lr}
 8113762:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8113764:	4904      	ldr	r1, [pc, #16]	; (8113778 <MX_FATFS_Init+0x18>)
 8113766:	4805      	ldr	r0, [pc, #20]	; (811377c <MX_FATFS_Init+0x1c>)
 8113768:	f001 feea 	bl	8115540 <FATFS_LinkDriver>
 811376c:	4603      	mov	r3, r0
 811376e:	461a      	mov	r2, r3
 8113770:	4b03      	ldr	r3, [pc, #12]	; (8113780 <MX_FATFS_Init+0x20>)
 8113772:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8113774:	bf00      	nop
 8113776:	bd80      	pop	{r7, pc}
 8113778:	100055b0 	.word	0x100055b0
 811377c:	0811ba54 	.word	0x0811ba54
 8113780:	100055ac 	.word	0x100055ac

08113784 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8113784:	b580      	push	{r7, lr}
 8113786:	b082      	sub	sp, #8
 8113788:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 811378a:	2300      	movs	r3, #0
 811378c:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 811378e:	f000 f885 	bl	811389c <BSP_SD_IsDetected>
 8113792:	4603      	mov	r3, r0
 8113794:	2b01      	cmp	r3, #1
 8113796:	d001      	beq.n	811379c <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 8113798:	2302      	movs	r3, #2
 811379a:	e012      	b.n	81137c2 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 811379c:	480b      	ldr	r0, [pc, #44]	; (81137cc <BSP_SD_Init+0x48>)
 811379e:	f7f8 fc33 	bl	810c008 <HAL_SD_Init>
 81137a2:	4603      	mov	r3, r0
 81137a4:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 81137a6:	79fb      	ldrb	r3, [r7, #7]
 81137a8:	2b00      	cmp	r3, #0
 81137aa:	d109      	bne.n	81137c0 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 81137ac:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 81137b0:	4806      	ldr	r0, [pc, #24]	; (81137cc <BSP_SD_Init+0x48>)
 81137b2:	f7f9 faf7 	bl	810cda4 <HAL_SD_ConfigWideBusOperation>
 81137b6:	4603      	mov	r3, r0
 81137b8:	2b00      	cmp	r3, #0
 81137ba:	d001      	beq.n	81137c0 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 81137bc:	2301      	movs	r3, #1
 81137be:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 81137c0:	79fb      	ldrb	r3, [r7, #7]
}
 81137c2:	4618      	mov	r0, r3
 81137c4:	3708      	adds	r7, #8
 81137c6:	46bd      	mov	sp, r7
 81137c8:	bd80      	pop	{r7, pc}
 81137ca:	bf00      	nop
 81137cc:	10005198 	.word	0x10005198

081137d0 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 81137d0:	b580      	push	{r7, lr}
 81137d2:	b086      	sub	sp, #24
 81137d4:	af00      	add	r7, sp, #0
 81137d6:	60f8      	str	r0, [r7, #12]
 81137d8:	60b9      	str	r1, [r7, #8]
 81137da:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 81137dc:	2300      	movs	r3, #0
 81137de:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 81137e0:	687b      	ldr	r3, [r7, #4]
 81137e2:	68ba      	ldr	r2, [r7, #8]
 81137e4:	68f9      	ldr	r1, [r7, #12]
 81137e6:	4806      	ldr	r0, [pc, #24]	; (8113800 <BSP_SD_ReadBlocks_DMA+0x30>)
 81137e8:	f7f8 fd3a 	bl	810c260 <HAL_SD_ReadBlocks_DMA>
 81137ec:	4603      	mov	r3, r0
 81137ee:	2b00      	cmp	r3, #0
 81137f0:	d001      	beq.n	81137f6 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 81137f2:	2301      	movs	r3, #1
 81137f4:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 81137f6:	7dfb      	ldrb	r3, [r7, #23]
}
 81137f8:	4618      	mov	r0, r3
 81137fa:	3718      	adds	r7, #24
 81137fc:	46bd      	mov	sp, r7
 81137fe:	bd80      	pop	{r7, pc}
 8113800:	10005198 	.word	0x10005198

08113804 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8113804:	b580      	push	{r7, lr}
 8113806:	b086      	sub	sp, #24
 8113808:	af00      	add	r7, sp, #0
 811380a:	60f8      	str	r0, [r7, #12]
 811380c:	60b9      	str	r1, [r7, #8]
 811380e:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8113810:	2300      	movs	r3, #0
 8113812:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8113814:	687b      	ldr	r3, [r7, #4]
 8113816:	68ba      	ldr	r2, [r7, #8]
 8113818:	68f9      	ldr	r1, [r7, #12]
 811381a:	4806      	ldr	r0, [pc, #24]	; (8113834 <BSP_SD_WriteBlocks_DMA+0x30>)
 811381c:	f7f8 fdc8 	bl	810c3b0 <HAL_SD_WriteBlocks_DMA>
 8113820:	4603      	mov	r3, r0
 8113822:	2b00      	cmp	r3, #0
 8113824:	d001      	beq.n	811382a <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8113826:	2301      	movs	r3, #1
 8113828:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 811382a:	7dfb      	ldrb	r3, [r7, #23]
}
 811382c:	4618      	mov	r0, r3
 811382e:	3718      	adds	r7, #24
 8113830:	46bd      	mov	sp, r7
 8113832:	bd80      	pop	{r7, pc}
 8113834:	10005198 	.word	0x10005198

08113838 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8113838:	b580      	push	{r7, lr}
 811383a:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 811383c:	4805      	ldr	r0, [pc, #20]	; (8113854 <BSP_SD_GetCardState+0x1c>)
 811383e:	f7f9 fbc5 	bl	810cfcc <HAL_SD_GetCardState>
 8113842:	4603      	mov	r3, r0
 8113844:	2b04      	cmp	r3, #4
 8113846:	bf14      	ite	ne
 8113848:	2301      	movne	r3, #1
 811384a:	2300      	moveq	r3, #0
 811384c:	b2db      	uxtb	r3, r3
}
 811384e:	4618      	mov	r0, r3
 8113850:	bd80      	pop	{r7, pc}
 8113852:	bf00      	nop
 8113854:	10005198 	.word	0x10005198

08113858 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8113858:	b580      	push	{r7, lr}
 811385a:	b082      	sub	sp, #8
 811385c:	af00      	add	r7, sp, #0
 811385e:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 8113860:	6879      	ldr	r1, [r7, #4]
 8113862:	4803      	ldr	r0, [pc, #12]	; (8113870 <BSP_SD_GetCardInfo+0x18>)
 8113864:	f7f9 fa72 	bl	810cd4c <HAL_SD_GetCardInfo>
}
 8113868:	bf00      	nop
 811386a:	3708      	adds	r7, #8
 811386c:	46bd      	mov	sp, r7
 811386e:	bd80      	pop	{r7, pc}
 8113870:	10005198 	.word	0x10005198

08113874 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8113874:	b580      	push	{r7, lr}
 8113876:	b082      	sub	sp, #8
 8113878:	af00      	add	r7, sp, #0
 811387a:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 811387c:	f000 f990 	bl	8113ba0 <BSP_SD_WriteCpltCallback>
}
 8113880:	bf00      	nop
 8113882:	3708      	adds	r7, #8
 8113884:	46bd      	mov	sp, r7
 8113886:	bd80      	pop	{r7, pc}

08113888 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8113888:	b580      	push	{r7, lr}
 811388a:	b082      	sub	sp, #8
 811388c:	af00      	add	r7, sp, #0
 811388e:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8113890:	f000 f998 	bl	8113bc4 <BSP_SD_ReadCpltCallback>
}
 8113894:	bf00      	nop
 8113896:	3708      	adds	r7, #8
 8113898:	46bd      	mov	sp, r7
 811389a:	bd80      	pop	{r7, pc}

0811389c <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 811389c:	b480      	push	{r7}
 811389e:	b083      	sub	sp, #12
 81138a0:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 81138a2:	2301      	movs	r3, #1
 81138a4:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN IsDetectedSection */
  /* user code can be inserted here */
  /* USER CODE END IsDetectedSection */

  return status;
 81138a6:	79fb      	ldrb	r3, [r7, #7]
 81138a8:	b2db      	uxtb	r3, r3
}
 81138aa:	4618      	mov	r0, r3
 81138ac:	370c      	adds	r7, #12
 81138ae:	46bd      	mov	sp, r7
 81138b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81138b4:	4770      	bx	lr

081138b6 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 81138b6:	b580      	push	{r7, lr}
 81138b8:	b084      	sub	sp, #16
 81138ba:	af00      	add	r7, sp, #0
 81138bc:	6078      	str	r0, [r7, #4]
  /* block until SDIO peripheral is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
  while( osKernelSysTick() - timer < timeout)
#else
  timer = osKernelGetTickCount();
 81138be:	f001 feff 	bl	81156c0 <osKernelGetTickCount>
 81138c2:	60f8      	str	r0, [r7, #12]
  while( osKernelGetTickCount() - timer < timeout)
 81138c4:	e006      	b.n	81138d4 <SD_CheckStatusWithTimeout+0x1e>
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 81138c6:	f7ff ffb7 	bl	8113838 <BSP_SD_GetCardState>
 81138ca:	4603      	mov	r3, r0
 81138cc:	2b00      	cmp	r3, #0
 81138ce:	d101      	bne.n	81138d4 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 81138d0:	2300      	movs	r3, #0
 81138d2:	e009      	b.n	81138e8 <SD_CheckStatusWithTimeout+0x32>
  while( osKernelGetTickCount() - timer < timeout)
 81138d4:	f001 fef4 	bl	81156c0 <osKernelGetTickCount>
 81138d8:	4602      	mov	r2, r0
 81138da:	68fb      	ldr	r3, [r7, #12]
 81138dc:	1ad3      	subs	r3, r2, r3
 81138de:	687a      	ldr	r2, [r7, #4]
 81138e0:	429a      	cmp	r2, r3
 81138e2:	d8f0      	bhi.n	81138c6 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 81138e4:	f04f 33ff 	mov.w	r3, #4294967295
}
 81138e8:	4618      	mov	r0, r3
 81138ea:	3710      	adds	r7, #16
 81138ec:	46bd      	mov	sp, r7
 81138ee:	bd80      	pop	{r7, pc}

081138f0 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 81138f0:	b580      	push	{r7, lr}
 81138f2:	b082      	sub	sp, #8
 81138f4:	af00      	add	r7, sp, #0
 81138f6:	4603      	mov	r3, r0
 81138f8:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 81138fa:	4b0b      	ldr	r3, [pc, #44]	; (8113928 <SD_CheckStatus+0x38>)
 81138fc:	2201      	movs	r2, #1
 81138fe:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8113900:	f7ff ff9a 	bl	8113838 <BSP_SD_GetCardState>
 8113904:	4603      	mov	r3, r0
 8113906:	2b00      	cmp	r3, #0
 8113908:	d107      	bne.n	811391a <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 811390a:	4b07      	ldr	r3, [pc, #28]	; (8113928 <SD_CheckStatus+0x38>)
 811390c:	781b      	ldrb	r3, [r3, #0]
 811390e:	b2db      	uxtb	r3, r3
 8113910:	f023 0301 	bic.w	r3, r3, #1
 8113914:	b2da      	uxtb	r2, r3
 8113916:	4b04      	ldr	r3, [pc, #16]	; (8113928 <SD_CheckStatus+0x38>)
 8113918:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 811391a:	4b03      	ldr	r3, [pc, #12]	; (8113928 <SD_CheckStatus+0x38>)
 811391c:	781b      	ldrb	r3, [r3, #0]
 811391e:	b2db      	uxtb	r3, r3
}
 8113920:	4618      	mov	r0, r3
 8113922:	3708      	adds	r7, #8
 8113924:	46bd      	mov	sp, r7
 8113926:	bd80      	pop	{r7, pc}
 8113928:	1000000d 	.word	0x1000000d

0811392c <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 811392c:	b580      	push	{r7, lr}
 811392e:	b082      	sub	sp, #8
 8113930:	af00      	add	r7, sp, #0
 8113932:	4603      	mov	r3, r0
 8113934:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 8113936:	4b1c      	ldr	r3, [pc, #112]	; (81139a8 <SD_initialize+0x7c>)
 8113938:	2201      	movs	r2, #1
 811393a:	701a      	strb	r2, [r3, #0]
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
#else
  if(osKernelGetState() == osKernelRunning)
 811393c:	f001 fe78 	bl	8115630 <osKernelGetState>
 8113940:	4603      	mov	r3, r0
 8113942:	2b02      	cmp	r3, #2
 8113944:	d129      	bne.n	811399a <SD_initialize+0x6e>
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 8113946:	f7ff ff1d 	bl	8113784 <BSP_SD_Init>
 811394a:	4603      	mov	r3, r0
 811394c:	2b00      	cmp	r3, #0
 811394e:	d107      	bne.n	8113960 <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 8113950:	79fb      	ldrb	r3, [r7, #7]
 8113952:	4618      	mov	r0, r3
 8113954:	f7ff ffcc 	bl	81138f0 <SD_CheckStatus>
 8113958:	4603      	mov	r3, r0
 811395a:	461a      	mov	r2, r3
 811395c:	4b12      	ldr	r3, [pc, #72]	; (81139a8 <SD_initialize+0x7c>)
 811395e:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 8113960:	4b11      	ldr	r3, [pc, #68]	; (81139a8 <SD_initialize+0x7c>)
 8113962:	781b      	ldrb	r3, [r3, #0]
 8113964:	b2db      	uxtb	r3, r3
 8113966:	2b01      	cmp	r3, #1
 8113968:	d017      	beq.n	811399a <SD_initialize+0x6e>
    {
      if (SDQueueID == NULL)
 811396a:	4b10      	ldr	r3, [pc, #64]	; (81139ac <SD_initialize+0x80>)
 811396c:	681b      	ldr	r3, [r3, #0]
 811396e:	2b00      	cmp	r3, #0
 8113970:	d107      	bne.n	8113982 <SD_initialize+0x56>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
 8113972:	2200      	movs	r2, #0
 8113974:	2102      	movs	r1, #2
 8113976:	200a      	movs	r0, #10
 8113978:	f001 ff64 	bl	8115844 <osMessageQueueNew>
 811397c:	4603      	mov	r3, r0
 811397e:	4a0b      	ldr	r2, [pc, #44]	; (81139ac <SD_initialize+0x80>)
 8113980:	6013      	str	r3, [r2, #0]
#endif
      }

      if (SDQueueID == NULL)
 8113982:	4b0a      	ldr	r3, [pc, #40]	; (81139ac <SD_initialize+0x80>)
 8113984:	681b      	ldr	r3, [r3, #0]
 8113986:	2b00      	cmp	r3, #0
 8113988:	d107      	bne.n	811399a <SD_initialize+0x6e>
      {
        Stat |= STA_NOINIT;
 811398a:	4b07      	ldr	r3, [pc, #28]	; (81139a8 <SD_initialize+0x7c>)
 811398c:	781b      	ldrb	r3, [r3, #0]
 811398e:	b2db      	uxtb	r3, r3
 8113990:	f043 0301 	orr.w	r3, r3, #1
 8113994:	b2da      	uxtb	r2, r3
 8113996:	4b04      	ldr	r3, [pc, #16]	; (81139a8 <SD_initialize+0x7c>)
 8113998:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 811399a:	4b03      	ldr	r3, [pc, #12]	; (81139a8 <SD_initialize+0x7c>)
 811399c:	781b      	ldrb	r3, [r3, #0]
 811399e:	b2db      	uxtb	r3, r3
}
 81139a0:	4618      	mov	r0, r3
 81139a2:	3708      	adds	r7, #8
 81139a4:	46bd      	mov	sp, r7
 81139a6:	bd80      	pop	{r7, pc}
 81139a8:	1000000d 	.word	0x1000000d
 81139ac:	10000384 	.word	0x10000384

081139b0 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 81139b0:	b580      	push	{r7, lr}
 81139b2:	b082      	sub	sp, #8
 81139b4:	af00      	add	r7, sp, #0
 81139b6:	4603      	mov	r3, r0
 81139b8:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 81139ba:	79fb      	ldrb	r3, [r7, #7]
 81139bc:	4618      	mov	r0, r3
 81139be:	f7ff ff97 	bl	81138f0 <SD_CheckStatus>
 81139c2:	4603      	mov	r3, r0
}
 81139c4:	4618      	mov	r0, r3
 81139c6:	3708      	adds	r7, #8
 81139c8:	46bd      	mov	sp, r7
 81139ca:	bd80      	pop	{r7, pc}

081139cc <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 81139cc:	b580      	push	{r7, lr}
 81139ce:	b088      	sub	sp, #32
 81139d0:	af00      	add	r7, sp, #0
 81139d2:	60b9      	str	r1, [r7, #8]
 81139d4:	607a      	str	r2, [r7, #4]
 81139d6:	603b      	str	r3, [r7, #0]
 81139d8:	4603      	mov	r3, r0
 81139da:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 81139dc:	2301      	movs	r3, #1
 81139de:	77fb      	strb	r3, [r7, #31]
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 81139e0:	f247 5030 	movw	r0, #30000	; 0x7530
 81139e4:	f7ff ff67 	bl	81138b6 <SD_CheckStatusWithTimeout>
 81139e8:	4603      	mov	r3, r0
 81139ea:	2b00      	cmp	r3, #0
 81139ec:	da01      	bge.n	81139f2 <SD_read+0x26>
  {
    return res;
 81139ee:	7ffb      	ldrb	r3, [r7, #31]
 81139f0:	e02f      	b.n	8113a52 <SD_read+0x86>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    uint8_t ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 81139f2:	683a      	ldr	r2, [r7, #0]
 81139f4:	6879      	ldr	r1, [r7, #4]
 81139f6:	68b8      	ldr	r0, [r7, #8]
 81139f8:	f7ff feea 	bl	81137d0 <BSP_SD_ReadBlocks_DMA>
 81139fc:	4603      	mov	r3, r0
 81139fe:	77bb      	strb	r3, [r7, #30]

    if (ret == MSD_OK) {
 8113a00:	7fbb      	ldrb	r3, [r7, #30]
 8113a02:	2b00      	cmp	r3, #0
 8113a04:	d124      	bne.n	8113a50 <SD_read+0x84>
      {
        timer = osKernelSysTick();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
#else
          status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 8113a06:	4b15      	ldr	r3, [pc, #84]	; (8113a5c <SD_read+0x90>)
 8113a08:	6818      	ldr	r0, [r3, #0]
 8113a0a:	f107 0112 	add.w	r1, r7, #18
 8113a0e:	f247 5330 	movw	r3, #30000	; 0x7530
 8113a12:	2200      	movs	r2, #0
 8113a14:	f001 ffea 	bl	81159ec <osMessageQueueGet>
 8113a18:	61b8      	str	r0, [r7, #24]
          if ((status == osOK) && (event == READ_CPLT_MSG))
 8113a1a:	69bb      	ldr	r3, [r7, #24]
 8113a1c:	2b00      	cmp	r3, #0
 8113a1e:	d117      	bne.n	8113a50 <SD_read+0x84>
 8113a20:	8a7b      	ldrh	r3, [r7, #18]
 8113a22:	2b01      	cmp	r3, #1
 8113a24:	d114      	bne.n	8113a50 <SD_read+0x84>
          {
            timer = osKernelGetTickCount();
 8113a26:	f001 fe4b 	bl	81156c0 <osKernelGetTickCount>
 8113a2a:	6178      	str	r0, [r7, #20]
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 8113a2c:	e007      	b.n	8113a3e <SD_read+0x72>
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8113a2e:	f7ff ff03 	bl	8113838 <BSP_SD_GetCardState>
 8113a32:	4603      	mov	r3, r0
 8113a34:	2b00      	cmp	r3, #0
 8113a36:	d102      	bne.n	8113a3e <SD_read+0x72>
              {
                res = RES_OK;
 8113a38:	2300      	movs	r3, #0
 8113a3a:	77fb      	strb	r3, [r7, #31]
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 8113a3c:	e008      	b.n	8113a50 <SD_read+0x84>
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 8113a3e:	f001 fe3f 	bl	81156c0 <osKernelGetTickCount>
 8113a42:	4602      	mov	r2, r0
 8113a44:	697b      	ldr	r3, [r7, #20]
 8113a46:	1ad3      	subs	r3, r2, r3
 8113a48:	f247 522f 	movw	r2, #29999	; 0x752f
 8113a4c:	4293      	cmp	r3, r2
 8113a4e:	d9ee      	bls.n	8113a2e <SD_read+0x62>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 8113a50:	7ffb      	ldrb	r3, [r7, #31]
}
 8113a52:	4618      	mov	r0, r3
 8113a54:	3720      	adds	r7, #32
 8113a56:	46bd      	mov	sp, r7
 8113a58:	bd80      	pop	{r7, pc}
 8113a5a:	bf00      	nop
 8113a5c:	10000384 	.word	0x10000384

08113a60 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8113a60:	b580      	push	{r7, lr}
 8113a62:	b088      	sub	sp, #32
 8113a64:	af00      	add	r7, sp, #0
 8113a66:	60b9      	str	r1, [r7, #8]
 8113a68:	607a      	str	r2, [r7, #4]
 8113a6a:	603b      	str	r3, [r7, #0]
 8113a6c:	4603      	mov	r3, r0
 8113a6e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8113a70:	2301      	movs	r3, #1
 8113a72:	77fb      	strb	r3, [r7, #31]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8113a74:	f247 5030 	movw	r0, #30000	; 0x7530
 8113a78:	f7ff ff1d 	bl	81138b6 <SD_CheckStatusWithTimeout>
 8113a7c:	4603      	mov	r3, r0
 8113a7e:	2b00      	cmp	r3, #0
 8113a80:	da01      	bge.n	8113a86 <SD_write+0x26>
  {
    return res;
 8113a82:	7ffb      	ldrb	r3, [r7, #31]
 8113a84:	e02d      	b.n	8113ae2 <SD_write+0x82>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8113a86:	683a      	ldr	r2, [r7, #0]
 8113a88:	6879      	ldr	r1, [r7, #4]
 8113a8a:	68b8      	ldr	r0, [r7, #8]
 8113a8c:	f7ff feba 	bl	8113804 <BSP_SD_WriteBlocks_DMA>
 8113a90:	4603      	mov	r3, r0
 8113a92:	2b00      	cmp	r3, #0
 8113a94:	d124      	bne.n	8113ae0 <SD_write+0x80>
    if (event.status == osEventMessage)
    {
      if (event.value.v == WRITE_CPLT_MSG)
      {
#else
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 8113a96:	4b15      	ldr	r3, [pc, #84]	; (8113aec <SD_write+0x8c>)
 8113a98:	6818      	ldr	r0, [r3, #0]
 8113a9a:	f107 0112 	add.w	r1, r7, #18
 8113a9e:	f247 5330 	movw	r3, #30000	; 0x7530
 8113aa2:	2200      	movs	r2, #0
 8113aa4:	f001 ffa2 	bl	81159ec <osMessageQueueGet>
 8113aa8:	61b8      	str	r0, [r7, #24]
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
 8113aaa:	69bb      	ldr	r3, [r7, #24]
 8113aac:	2b00      	cmp	r3, #0
 8113aae:	d117      	bne.n	8113ae0 <SD_write+0x80>
 8113ab0:	8a7b      	ldrh	r3, [r7, #18]
 8113ab2:	2b02      	cmp	r3, #2
 8113ab4:	d114      	bne.n	8113ae0 <SD_write+0x80>
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
#else
        timer = osKernelGetTickCount();
 8113ab6:	f001 fe03 	bl	81156c0 <osKernelGetTickCount>
 8113aba:	6178      	str	r0, [r7, #20]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 8113abc:	e007      	b.n	8113ace <SD_write+0x6e>
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8113abe:	f7ff febb 	bl	8113838 <BSP_SD_GetCardState>
 8113ac2:	4603      	mov	r3, r0
 8113ac4:	2b00      	cmp	r3, #0
 8113ac6:	d102      	bne.n	8113ace <SD_write+0x6e>
          {
            res = RES_OK;
 8113ac8:	2300      	movs	r3, #0
 8113aca:	77fb      	strb	r3, [r7, #31]
            break;
 8113acc:	e008      	b.n	8113ae0 <SD_write+0x80>
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 8113ace:	f001 fdf7 	bl	81156c0 <osKernelGetTickCount>
 8113ad2:	4602      	mov	r2, r0
 8113ad4:	697b      	ldr	r3, [r7, #20]
 8113ad6:	1ad3      	subs	r3, r2, r3
 8113ad8:	f247 522f 	movw	r2, #29999	; 0x752f
 8113adc:	4293      	cmp	r3, r2
 8113ade:	d9ee      	bls.n	8113abe <SD_write+0x5e>
    }

  }
#endif

  return res;
 8113ae0:	7ffb      	ldrb	r3, [r7, #31]
}
 8113ae2:	4618      	mov	r0, r3
 8113ae4:	3720      	adds	r7, #32
 8113ae6:	46bd      	mov	sp, r7
 8113ae8:	bd80      	pop	{r7, pc}
 8113aea:	bf00      	nop
 8113aec:	10000384 	.word	0x10000384

08113af0 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8113af0:	b580      	push	{r7, lr}
 8113af2:	b08c      	sub	sp, #48	; 0x30
 8113af4:	af00      	add	r7, sp, #0
 8113af6:	4603      	mov	r3, r0
 8113af8:	603a      	str	r2, [r7, #0]
 8113afa:	71fb      	strb	r3, [r7, #7]
 8113afc:	460b      	mov	r3, r1
 8113afe:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8113b00:	2301      	movs	r3, #1
 8113b02:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8113b06:	4b25      	ldr	r3, [pc, #148]	; (8113b9c <SD_ioctl+0xac>)
 8113b08:	781b      	ldrb	r3, [r3, #0]
 8113b0a:	b2db      	uxtb	r3, r3
 8113b0c:	f003 0301 	and.w	r3, r3, #1
 8113b10:	2b00      	cmp	r3, #0
 8113b12:	d001      	beq.n	8113b18 <SD_ioctl+0x28>
 8113b14:	2303      	movs	r3, #3
 8113b16:	e03c      	b.n	8113b92 <SD_ioctl+0xa2>

  switch (cmd)
 8113b18:	79bb      	ldrb	r3, [r7, #6]
 8113b1a:	2b03      	cmp	r3, #3
 8113b1c:	d834      	bhi.n	8113b88 <SD_ioctl+0x98>
 8113b1e:	a201      	add	r2, pc, #4	; (adr r2, 8113b24 <SD_ioctl+0x34>)
 8113b20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8113b24:	08113b35 	.word	0x08113b35
 8113b28:	08113b3d 	.word	0x08113b3d
 8113b2c:	08113b55 	.word	0x08113b55
 8113b30:	08113b6f 	.word	0x08113b6f
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8113b34:	2300      	movs	r3, #0
 8113b36:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8113b3a:	e028      	b.n	8113b8e <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8113b3c:	f107 0308 	add.w	r3, r7, #8
 8113b40:	4618      	mov	r0, r3
 8113b42:	f7ff fe89 	bl	8113858 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8113b46:	6a3a      	ldr	r2, [r7, #32]
 8113b48:	683b      	ldr	r3, [r7, #0]
 8113b4a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8113b4c:	2300      	movs	r3, #0
 8113b4e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8113b52:	e01c      	b.n	8113b8e <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8113b54:	f107 0308 	add.w	r3, r7, #8
 8113b58:	4618      	mov	r0, r3
 8113b5a:	f7ff fe7d 	bl	8113858 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8113b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8113b60:	b29a      	uxth	r2, r3
 8113b62:	683b      	ldr	r3, [r7, #0]
 8113b64:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8113b66:	2300      	movs	r3, #0
 8113b68:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8113b6c:	e00f      	b.n	8113b8e <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8113b6e:	f107 0308 	add.w	r3, r7, #8
 8113b72:	4618      	mov	r0, r3
 8113b74:	f7ff fe70 	bl	8113858 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8113b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8113b7a:	0a5a      	lsrs	r2, r3, #9
 8113b7c:	683b      	ldr	r3, [r7, #0]
 8113b7e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8113b80:	2300      	movs	r3, #0
 8113b82:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8113b86:	e002      	b.n	8113b8e <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8113b88:	2304      	movs	r3, #4
 8113b8a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8113b8e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8113b92:	4618      	mov	r0, r3
 8113b94:	3730      	adds	r7, #48	; 0x30
 8113b96:	46bd      	mov	sp, r7
 8113b98:	bd80      	pop	{r7, pc}
 8113b9a:	bf00      	nop
 8113b9c:	1000000d 	.word	0x1000000d

08113ba0 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 8113ba0:	b580      	push	{r7, lr}
 8113ba2:	b082      	sub	sp, #8
 8113ba4:	af00      	add	r7, sp, #0
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, WRITE_CPLT_MSG, 0);
#else
   const uint16_t msg = WRITE_CPLT_MSG;
 8113ba6:	2302      	movs	r3, #2
 8113ba8:	80fb      	strh	r3, [r7, #6]
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
 8113baa:	4b05      	ldr	r3, [pc, #20]	; (8113bc0 <BSP_SD_WriteCpltCallback+0x20>)
 8113bac:	6818      	ldr	r0, [r3, #0]
 8113bae:	1db9      	adds	r1, r7, #6
 8113bb0:	2300      	movs	r3, #0
 8113bb2:	2200      	movs	r2, #0
 8113bb4:	f001 feba 	bl	811592c <osMessageQueuePut>
#endif
}
 8113bb8:	bf00      	nop
 8113bba:	3708      	adds	r7, #8
 8113bbc:	46bd      	mov	sp, r7
 8113bbe:	bd80      	pop	{r7, pc}
 8113bc0:	10000384 	.word	0x10000384

08113bc4 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8113bc4:	b580      	push	{r7, lr}
 8113bc6:	b082      	sub	sp, #8
 8113bc8:	af00      	add	r7, sp, #0
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
#else
   const uint16_t msg = READ_CPLT_MSG;
 8113bca:	2301      	movs	r3, #1
 8113bcc:	80fb      	strh	r3, [r7, #6]
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
 8113bce:	4b05      	ldr	r3, [pc, #20]	; (8113be4 <BSP_SD_ReadCpltCallback+0x20>)
 8113bd0:	6818      	ldr	r0, [r3, #0]
 8113bd2:	1db9      	adds	r1, r7, #6
 8113bd4:	2300      	movs	r3, #0
 8113bd6:	2200      	movs	r2, #0
 8113bd8:	f001 fea8 	bl	811592c <osMessageQueuePut>
#endif
}
 8113bdc:	bf00      	nop
 8113bde:	3708      	adds	r7, #8
 8113be0:	46bd      	mov	sp, r7
 8113be2:	bd80      	pop	{r7, pc}
 8113be4:	10000384 	.word	0x10000384

08113be8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8113be8:	b580      	push	{r7, lr}
 8113bea:	b084      	sub	sp, #16
 8113bec:	af00      	add	r7, sp, #0
 8113bee:	6078      	str	r0, [r7, #4]
 8113bf0:	460b      	mov	r3, r1
 8113bf2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8113bf4:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8113bf8:	f005 f930 	bl	8118e5c <USBD_static_malloc>
 8113bfc:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8113bfe:	68fb      	ldr	r3, [r7, #12]
 8113c00:	2b00      	cmp	r3, #0
 8113c02:	d105      	bne.n	8113c10 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8113c04:	687b      	ldr	r3, [r7, #4]
 8113c06:	2200      	movs	r2, #0
 8113c08:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8113c0c:	2302      	movs	r3, #2
 8113c0e:	e066      	b.n	8113cde <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8113c10:	687b      	ldr	r3, [r7, #4]
 8113c12:	68fa      	ldr	r2, [r7, #12]
 8113c14:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8113c18:	687b      	ldr	r3, [r7, #4]
 8113c1a:	7c1b      	ldrb	r3, [r3, #16]
 8113c1c:	2b00      	cmp	r3, #0
 8113c1e:	d119      	bne.n	8113c54 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8113c20:	f44f 7300 	mov.w	r3, #512	; 0x200
 8113c24:	2202      	movs	r2, #2
 8113c26:	2181      	movs	r1, #129	; 0x81
 8113c28:	6878      	ldr	r0, [r7, #4]
 8113c2a:	f004 fff4 	bl	8118c16 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8113c2e:	687b      	ldr	r3, [r7, #4]
 8113c30:	2201      	movs	r2, #1
 8113c32:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8113c34:	f44f 7300 	mov.w	r3, #512	; 0x200
 8113c38:	2202      	movs	r2, #2
 8113c3a:	2101      	movs	r1, #1
 8113c3c:	6878      	ldr	r0, [r7, #4]
 8113c3e:	f004 ffea 	bl	8118c16 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8113c42:	687b      	ldr	r3, [r7, #4]
 8113c44:	2201      	movs	r2, #1
 8113c46:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8113c4a:	687b      	ldr	r3, [r7, #4]
 8113c4c:	2210      	movs	r2, #16
 8113c4e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8113c52:	e016      	b.n	8113c82 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8113c54:	2340      	movs	r3, #64	; 0x40
 8113c56:	2202      	movs	r2, #2
 8113c58:	2181      	movs	r1, #129	; 0x81
 8113c5a:	6878      	ldr	r0, [r7, #4]
 8113c5c:	f004 ffdb 	bl	8118c16 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8113c60:	687b      	ldr	r3, [r7, #4]
 8113c62:	2201      	movs	r2, #1
 8113c64:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8113c66:	2340      	movs	r3, #64	; 0x40
 8113c68:	2202      	movs	r2, #2
 8113c6a:	2101      	movs	r1, #1
 8113c6c:	6878      	ldr	r0, [r7, #4]
 8113c6e:	f004 ffd2 	bl	8118c16 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8113c72:	687b      	ldr	r3, [r7, #4]
 8113c74:	2201      	movs	r2, #1
 8113c76:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8113c7a:	687b      	ldr	r3, [r7, #4]
 8113c7c:	2210      	movs	r2, #16
 8113c7e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8113c82:	2308      	movs	r3, #8
 8113c84:	2203      	movs	r2, #3
 8113c86:	2182      	movs	r1, #130	; 0x82
 8113c88:	6878      	ldr	r0, [r7, #4]
 8113c8a:	f004 ffc4 	bl	8118c16 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8113c8e:	687b      	ldr	r3, [r7, #4]
 8113c90:	2201      	movs	r2, #1
 8113c92:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8113c96:	687b      	ldr	r3, [r7, #4]
 8113c98:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8113c9c:	681b      	ldr	r3, [r3, #0]
 8113c9e:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8113ca0:	68fb      	ldr	r3, [r7, #12]
 8113ca2:	2200      	movs	r2, #0
 8113ca4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8113ca8:	68fb      	ldr	r3, [r7, #12]
 8113caa:	2200      	movs	r2, #0
 8113cac:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8113cb0:	687b      	ldr	r3, [r7, #4]
 8113cb2:	7c1b      	ldrb	r3, [r3, #16]
 8113cb4:	2b00      	cmp	r3, #0
 8113cb6:	d109      	bne.n	8113ccc <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8113cb8:	68fb      	ldr	r3, [r7, #12]
 8113cba:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8113cbe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8113cc2:	2101      	movs	r1, #1
 8113cc4:	6878      	ldr	r0, [r7, #4]
 8113cc6:	f005 f895 	bl	8118df4 <USBD_LL_PrepareReceive>
 8113cca:	e007      	b.n	8113cdc <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8113ccc:	68fb      	ldr	r3, [r7, #12]
 8113cce:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8113cd2:	2340      	movs	r3, #64	; 0x40
 8113cd4:	2101      	movs	r1, #1
 8113cd6:	6878      	ldr	r0, [r7, #4]
 8113cd8:	f005 f88c 	bl	8118df4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8113cdc:	2300      	movs	r3, #0
}
 8113cde:	4618      	mov	r0, r3
 8113ce0:	3710      	adds	r7, #16
 8113ce2:	46bd      	mov	sp, r7
 8113ce4:	bd80      	pop	{r7, pc}

08113ce6 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8113ce6:	b580      	push	{r7, lr}
 8113ce8:	b082      	sub	sp, #8
 8113cea:	af00      	add	r7, sp, #0
 8113cec:	6078      	str	r0, [r7, #4]
 8113cee:	460b      	mov	r3, r1
 8113cf0:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8113cf2:	2181      	movs	r1, #129	; 0x81
 8113cf4:	6878      	ldr	r0, [r7, #4]
 8113cf6:	f004 ffb4 	bl	8118c62 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8113cfa:	687b      	ldr	r3, [r7, #4]
 8113cfc:	2200      	movs	r2, #0
 8113cfe:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8113d00:	2101      	movs	r1, #1
 8113d02:	6878      	ldr	r0, [r7, #4]
 8113d04:	f004 ffad 	bl	8118c62 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8113d08:	687b      	ldr	r3, [r7, #4]
 8113d0a:	2200      	movs	r2, #0
 8113d0c:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8113d10:	2182      	movs	r1, #130	; 0x82
 8113d12:	6878      	ldr	r0, [r7, #4]
 8113d14:	f004 ffa5 	bl	8118c62 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8113d18:	687b      	ldr	r3, [r7, #4]
 8113d1a:	2200      	movs	r2, #0
 8113d1c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8113d20:	687b      	ldr	r3, [r7, #4]
 8113d22:	2200      	movs	r2, #0
 8113d24:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8113d28:	687b      	ldr	r3, [r7, #4]
 8113d2a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8113d2e:	2b00      	cmp	r3, #0
 8113d30:	d00e      	beq.n	8113d50 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8113d32:	687b      	ldr	r3, [r7, #4]
 8113d34:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8113d38:	685b      	ldr	r3, [r3, #4]
 8113d3a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8113d3c:	687b      	ldr	r3, [r7, #4]
 8113d3e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8113d42:	4618      	mov	r0, r3
 8113d44:	f005 f898 	bl	8118e78 <USBD_static_free>
    pdev->pClassData = NULL;
 8113d48:	687b      	ldr	r3, [r7, #4]
 8113d4a:	2200      	movs	r2, #0
 8113d4c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8113d50:	2300      	movs	r3, #0
}
 8113d52:	4618      	mov	r0, r3
 8113d54:	3708      	adds	r7, #8
 8113d56:	46bd      	mov	sp, r7
 8113d58:	bd80      	pop	{r7, pc}
	...

08113d5c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8113d5c:	b580      	push	{r7, lr}
 8113d5e:	b086      	sub	sp, #24
 8113d60:	af00      	add	r7, sp, #0
 8113d62:	6078      	str	r0, [r7, #4]
 8113d64:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8113d66:	687b      	ldr	r3, [r7, #4]
 8113d68:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8113d6c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8113d6e:	2300      	movs	r3, #0
 8113d70:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8113d72:	2300      	movs	r3, #0
 8113d74:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8113d76:	2300      	movs	r3, #0
 8113d78:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8113d7a:	693b      	ldr	r3, [r7, #16]
 8113d7c:	2b00      	cmp	r3, #0
 8113d7e:	d101      	bne.n	8113d84 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8113d80:	2303      	movs	r3, #3
 8113d82:	e0af      	b.n	8113ee4 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8113d84:	683b      	ldr	r3, [r7, #0]
 8113d86:	781b      	ldrb	r3, [r3, #0]
 8113d88:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8113d8c:	2b00      	cmp	r3, #0
 8113d8e:	d03f      	beq.n	8113e10 <USBD_CDC_Setup+0xb4>
 8113d90:	2b20      	cmp	r3, #32
 8113d92:	f040 809f 	bne.w	8113ed4 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8113d96:	683b      	ldr	r3, [r7, #0]
 8113d98:	88db      	ldrh	r3, [r3, #6]
 8113d9a:	2b00      	cmp	r3, #0
 8113d9c:	d02e      	beq.n	8113dfc <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8113d9e:	683b      	ldr	r3, [r7, #0]
 8113da0:	781b      	ldrb	r3, [r3, #0]
 8113da2:	b25b      	sxtb	r3, r3
 8113da4:	2b00      	cmp	r3, #0
 8113da6:	da16      	bge.n	8113dd6 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8113da8:	687b      	ldr	r3, [r7, #4]
 8113daa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8113dae:	689b      	ldr	r3, [r3, #8]
 8113db0:	683a      	ldr	r2, [r7, #0]
 8113db2:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8113db4:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8113db6:	683a      	ldr	r2, [r7, #0]
 8113db8:	88d2      	ldrh	r2, [r2, #6]
 8113dba:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8113dbc:	683b      	ldr	r3, [r7, #0]
 8113dbe:	88db      	ldrh	r3, [r3, #6]
 8113dc0:	2b07      	cmp	r3, #7
 8113dc2:	bf28      	it	cs
 8113dc4:	2307      	movcs	r3, #7
 8113dc6:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8113dc8:	693b      	ldr	r3, [r7, #16]
 8113dca:	89fa      	ldrh	r2, [r7, #14]
 8113dcc:	4619      	mov	r1, r3
 8113dce:	6878      	ldr	r0, [r7, #4]
 8113dd0:	f001 fae9 	bl	81153a6 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8113dd4:	e085      	b.n	8113ee2 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 8113dd6:	683b      	ldr	r3, [r7, #0]
 8113dd8:	785a      	ldrb	r2, [r3, #1]
 8113dda:	693b      	ldr	r3, [r7, #16]
 8113ddc:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8113de0:	683b      	ldr	r3, [r7, #0]
 8113de2:	88db      	ldrh	r3, [r3, #6]
 8113de4:	b2da      	uxtb	r2, r3
 8113de6:	693b      	ldr	r3, [r7, #16]
 8113de8:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8113dec:	6939      	ldr	r1, [r7, #16]
 8113dee:	683b      	ldr	r3, [r7, #0]
 8113df0:	88db      	ldrh	r3, [r3, #6]
 8113df2:	461a      	mov	r2, r3
 8113df4:	6878      	ldr	r0, [r7, #4]
 8113df6:	f001 fb02 	bl	81153fe <USBD_CtlPrepareRx>
      break;
 8113dfa:	e072      	b.n	8113ee2 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8113dfc:	687b      	ldr	r3, [r7, #4]
 8113dfe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8113e02:	689b      	ldr	r3, [r3, #8]
 8113e04:	683a      	ldr	r2, [r7, #0]
 8113e06:	7850      	ldrb	r0, [r2, #1]
 8113e08:	2200      	movs	r2, #0
 8113e0a:	6839      	ldr	r1, [r7, #0]
 8113e0c:	4798      	blx	r3
      break;
 8113e0e:	e068      	b.n	8113ee2 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8113e10:	683b      	ldr	r3, [r7, #0]
 8113e12:	785b      	ldrb	r3, [r3, #1]
 8113e14:	2b0b      	cmp	r3, #11
 8113e16:	d852      	bhi.n	8113ebe <USBD_CDC_Setup+0x162>
 8113e18:	a201      	add	r2, pc, #4	; (adr r2, 8113e20 <USBD_CDC_Setup+0xc4>)
 8113e1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8113e1e:	bf00      	nop
 8113e20:	08113e51 	.word	0x08113e51
 8113e24:	08113ecd 	.word	0x08113ecd
 8113e28:	08113ebf 	.word	0x08113ebf
 8113e2c:	08113ebf 	.word	0x08113ebf
 8113e30:	08113ebf 	.word	0x08113ebf
 8113e34:	08113ebf 	.word	0x08113ebf
 8113e38:	08113ebf 	.word	0x08113ebf
 8113e3c:	08113ebf 	.word	0x08113ebf
 8113e40:	08113ebf 	.word	0x08113ebf
 8113e44:	08113ebf 	.word	0x08113ebf
 8113e48:	08113e7b 	.word	0x08113e7b
 8113e4c:	08113ea5 	.word	0x08113ea5
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8113e50:	687b      	ldr	r3, [r7, #4]
 8113e52:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8113e56:	b2db      	uxtb	r3, r3
 8113e58:	2b03      	cmp	r3, #3
 8113e5a:	d107      	bne.n	8113e6c <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8113e5c:	f107 030a 	add.w	r3, r7, #10
 8113e60:	2202      	movs	r2, #2
 8113e62:	4619      	mov	r1, r3
 8113e64:	6878      	ldr	r0, [r7, #4]
 8113e66:	f001 fa9e 	bl	81153a6 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8113e6a:	e032      	b.n	8113ed2 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8113e6c:	6839      	ldr	r1, [r7, #0]
 8113e6e:	6878      	ldr	r0, [r7, #4]
 8113e70:	f001 fa28 	bl	81152c4 <USBD_CtlError>
            ret = USBD_FAIL;
 8113e74:	2303      	movs	r3, #3
 8113e76:	75fb      	strb	r3, [r7, #23]
          break;
 8113e78:	e02b      	b.n	8113ed2 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8113e7a:	687b      	ldr	r3, [r7, #4]
 8113e7c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8113e80:	b2db      	uxtb	r3, r3
 8113e82:	2b03      	cmp	r3, #3
 8113e84:	d107      	bne.n	8113e96 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8113e86:	f107 030d 	add.w	r3, r7, #13
 8113e8a:	2201      	movs	r2, #1
 8113e8c:	4619      	mov	r1, r3
 8113e8e:	6878      	ldr	r0, [r7, #4]
 8113e90:	f001 fa89 	bl	81153a6 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8113e94:	e01d      	b.n	8113ed2 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8113e96:	6839      	ldr	r1, [r7, #0]
 8113e98:	6878      	ldr	r0, [r7, #4]
 8113e9a:	f001 fa13 	bl	81152c4 <USBD_CtlError>
            ret = USBD_FAIL;
 8113e9e:	2303      	movs	r3, #3
 8113ea0:	75fb      	strb	r3, [r7, #23]
          break;
 8113ea2:	e016      	b.n	8113ed2 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8113ea4:	687b      	ldr	r3, [r7, #4]
 8113ea6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8113eaa:	b2db      	uxtb	r3, r3
 8113eac:	2b03      	cmp	r3, #3
 8113eae:	d00f      	beq.n	8113ed0 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8113eb0:	6839      	ldr	r1, [r7, #0]
 8113eb2:	6878      	ldr	r0, [r7, #4]
 8113eb4:	f001 fa06 	bl	81152c4 <USBD_CtlError>
            ret = USBD_FAIL;
 8113eb8:	2303      	movs	r3, #3
 8113eba:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8113ebc:	e008      	b.n	8113ed0 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8113ebe:	6839      	ldr	r1, [r7, #0]
 8113ec0:	6878      	ldr	r0, [r7, #4]
 8113ec2:	f001 f9ff 	bl	81152c4 <USBD_CtlError>
          ret = USBD_FAIL;
 8113ec6:	2303      	movs	r3, #3
 8113ec8:	75fb      	strb	r3, [r7, #23]
          break;
 8113eca:	e002      	b.n	8113ed2 <USBD_CDC_Setup+0x176>
          break;
 8113ecc:	bf00      	nop
 8113ece:	e008      	b.n	8113ee2 <USBD_CDC_Setup+0x186>
          break;
 8113ed0:	bf00      	nop
      }
      break;
 8113ed2:	e006      	b.n	8113ee2 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8113ed4:	6839      	ldr	r1, [r7, #0]
 8113ed6:	6878      	ldr	r0, [r7, #4]
 8113ed8:	f001 f9f4 	bl	81152c4 <USBD_CtlError>
      ret = USBD_FAIL;
 8113edc:	2303      	movs	r3, #3
 8113ede:	75fb      	strb	r3, [r7, #23]
      break;
 8113ee0:	bf00      	nop
  }

  return (uint8_t)ret;
 8113ee2:	7dfb      	ldrb	r3, [r7, #23]
}
 8113ee4:	4618      	mov	r0, r3
 8113ee6:	3718      	adds	r7, #24
 8113ee8:	46bd      	mov	sp, r7
 8113eea:	bd80      	pop	{r7, pc}

08113eec <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8113eec:	b580      	push	{r7, lr}
 8113eee:	b084      	sub	sp, #16
 8113ef0:	af00      	add	r7, sp, #0
 8113ef2:	6078      	str	r0, [r7, #4]
 8113ef4:	460b      	mov	r3, r1
 8113ef6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8113ef8:	687b      	ldr	r3, [r7, #4]
 8113efa:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8113efe:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8113f00:	687b      	ldr	r3, [r7, #4]
 8113f02:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8113f06:	2b00      	cmp	r3, #0
 8113f08:	d101      	bne.n	8113f0e <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8113f0a:	2303      	movs	r3, #3
 8113f0c:	e04f      	b.n	8113fae <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8113f0e:	687b      	ldr	r3, [r7, #4]
 8113f10:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8113f14:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8113f16:	78fa      	ldrb	r2, [r7, #3]
 8113f18:	6879      	ldr	r1, [r7, #4]
 8113f1a:	4613      	mov	r3, r2
 8113f1c:	009b      	lsls	r3, r3, #2
 8113f1e:	4413      	add	r3, r2
 8113f20:	009b      	lsls	r3, r3, #2
 8113f22:	440b      	add	r3, r1
 8113f24:	3318      	adds	r3, #24
 8113f26:	681b      	ldr	r3, [r3, #0]
 8113f28:	2b00      	cmp	r3, #0
 8113f2a:	d029      	beq.n	8113f80 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8113f2c:	78fa      	ldrb	r2, [r7, #3]
 8113f2e:	6879      	ldr	r1, [r7, #4]
 8113f30:	4613      	mov	r3, r2
 8113f32:	009b      	lsls	r3, r3, #2
 8113f34:	4413      	add	r3, r2
 8113f36:	009b      	lsls	r3, r3, #2
 8113f38:	440b      	add	r3, r1
 8113f3a:	3318      	adds	r3, #24
 8113f3c:	681a      	ldr	r2, [r3, #0]
 8113f3e:	78f9      	ldrb	r1, [r7, #3]
 8113f40:	68f8      	ldr	r0, [r7, #12]
 8113f42:	460b      	mov	r3, r1
 8113f44:	00db      	lsls	r3, r3, #3
 8113f46:	1a5b      	subs	r3, r3, r1
 8113f48:	009b      	lsls	r3, r3, #2
 8113f4a:	4403      	add	r3, r0
 8113f4c:	3344      	adds	r3, #68	; 0x44
 8113f4e:	681b      	ldr	r3, [r3, #0]
 8113f50:	fbb2 f1f3 	udiv	r1, r2, r3
 8113f54:	fb03 f301 	mul.w	r3, r3, r1
 8113f58:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8113f5a:	2b00      	cmp	r3, #0
 8113f5c:	d110      	bne.n	8113f80 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8113f5e:	78fa      	ldrb	r2, [r7, #3]
 8113f60:	6879      	ldr	r1, [r7, #4]
 8113f62:	4613      	mov	r3, r2
 8113f64:	009b      	lsls	r3, r3, #2
 8113f66:	4413      	add	r3, r2
 8113f68:	009b      	lsls	r3, r3, #2
 8113f6a:	440b      	add	r3, r1
 8113f6c:	3318      	adds	r3, #24
 8113f6e:	2200      	movs	r2, #0
 8113f70:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8113f72:	78f9      	ldrb	r1, [r7, #3]
 8113f74:	2300      	movs	r3, #0
 8113f76:	2200      	movs	r2, #0
 8113f78:	6878      	ldr	r0, [r7, #4]
 8113f7a:	f004 ff1a 	bl	8118db2 <USBD_LL_Transmit>
 8113f7e:	e015      	b.n	8113fac <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8113f80:	68bb      	ldr	r3, [r7, #8]
 8113f82:	2200      	movs	r2, #0
 8113f84:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8113f88:	687b      	ldr	r3, [r7, #4]
 8113f8a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8113f8e:	691b      	ldr	r3, [r3, #16]
 8113f90:	2b00      	cmp	r3, #0
 8113f92:	d00b      	beq.n	8113fac <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8113f94:	687b      	ldr	r3, [r7, #4]
 8113f96:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8113f9a:	691b      	ldr	r3, [r3, #16]
 8113f9c:	68ba      	ldr	r2, [r7, #8]
 8113f9e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8113fa2:	68ba      	ldr	r2, [r7, #8]
 8113fa4:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8113fa8:	78fa      	ldrb	r2, [r7, #3]
 8113faa:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8113fac:	2300      	movs	r3, #0
}
 8113fae:	4618      	mov	r0, r3
 8113fb0:	3710      	adds	r7, #16
 8113fb2:	46bd      	mov	sp, r7
 8113fb4:	bd80      	pop	{r7, pc}

08113fb6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8113fb6:	b580      	push	{r7, lr}
 8113fb8:	b084      	sub	sp, #16
 8113fba:	af00      	add	r7, sp, #0
 8113fbc:	6078      	str	r0, [r7, #4]
 8113fbe:	460b      	mov	r3, r1
 8113fc0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8113fc2:	687b      	ldr	r3, [r7, #4]
 8113fc4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8113fc8:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8113fca:	687b      	ldr	r3, [r7, #4]
 8113fcc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8113fd0:	2b00      	cmp	r3, #0
 8113fd2:	d101      	bne.n	8113fd8 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8113fd4:	2303      	movs	r3, #3
 8113fd6:	e015      	b.n	8114004 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8113fd8:	78fb      	ldrb	r3, [r7, #3]
 8113fda:	4619      	mov	r1, r3
 8113fdc:	6878      	ldr	r0, [r7, #4]
 8113fde:	f004 ff2a 	bl	8118e36 <USBD_LL_GetRxDataSize>
 8113fe2:	4602      	mov	r2, r0
 8113fe4:	68fb      	ldr	r3, [r7, #12]
 8113fe6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8113fea:	687b      	ldr	r3, [r7, #4]
 8113fec:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8113ff0:	68db      	ldr	r3, [r3, #12]
 8113ff2:	68fa      	ldr	r2, [r7, #12]
 8113ff4:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8113ff8:	68fa      	ldr	r2, [r7, #12]
 8113ffa:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8113ffe:	4611      	mov	r1, r2
 8114000:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8114002:	2300      	movs	r3, #0
}
 8114004:	4618      	mov	r0, r3
 8114006:	3710      	adds	r7, #16
 8114008:	46bd      	mov	sp, r7
 811400a:	bd80      	pop	{r7, pc}

0811400c <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 811400c:	b580      	push	{r7, lr}
 811400e:	b084      	sub	sp, #16
 8114010:	af00      	add	r7, sp, #0
 8114012:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8114014:	687b      	ldr	r3, [r7, #4]
 8114016:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 811401a:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 811401c:	68fb      	ldr	r3, [r7, #12]
 811401e:	2b00      	cmp	r3, #0
 8114020:	d101      	bne.n	8114026 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8114022:	2303      	movs	r3, #3
 8114024:	e01b      	b.n	811405e <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8114026:	687b      	ldr	r3, [r7, #4]
 8114028:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 811402c:	2b00      	cmp	r3, #0
 811402e:	d015      	beq.n	811405c <USBD_CDC_EP0_RxReady+0x50>
 8114030:	68fb      	ldr	r3, [r7, #12]
 8114032:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8114036:	2bff      	cmp	r3, #255	; 0xff
 8114038:	d010      	beq.n	811405c <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 811403a:	687b      	ldr	r3, [r7, #4]
 811403c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8114040:	689b      	ldr	r3, [r3, #8]
 8114042:	68fa      	ldr	r2, [r7, #12]
 8114044:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8114048:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 811404a:	68fa      	ldr	r2, [r7, #12]
 811404c:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8114050:	b292      	uxth	r2, r2
 8114052:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8114054:	68fb      	ldr	r3, [r7, #12]
 8114056:	22ff      	movs	r2, #255	; 0xff
 8114058:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 811405c:	2300      	movs	r3, #0
}
 811405e:	4618      	mov	r0, r3
 8114060:	3710      	adds	r7, #16
 8114062:	46bd      	mov	sp, r7
 8114064:	bd80      	pop	{r7, pc}
	...

08114068 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8114068:	b480      	push	{r7}
 811406a:	b083      	sub	sp, #12
 811406c:	af00      	add	r7, sp, #0
 811406e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8114070:	687b      	ldr	r3, [r7, #4]
 8114072:	2243      	movs	r2, #67	; 0x43
 8114074:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8114076:	4b03      	ldr	r3, [pc, #12]	; (8114084 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8114078:	4618      	mov	r0, r3
 811407a:	370c      	adds	r7, #12
 811407c:	46bd      	mov	sp, r7
 811407e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8114082:	4770      	bx	lr
 8114084:	10000098 	.word	0x10000098

08114088 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8114088:	b480      	push	{r7}
 811408a:	b083      	sub	sp, #12
 811408c:	af00      	add	r7, sp, #0
 811408e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8114090:	687b      	ldr	r3, [r7, #4]
 8114092:	2243      	movs	r2, #67	; 0x43
 8114094:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8114096:	4b03      	ldr	r3, [pc, #12]	; (81140a4 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8114098:	4618      	mov	r0, r3
 811409a:	370c      	adds	r7, #12
 811409c:	46bd      	mov	sp, r7
 811409e:	f85d 7b04 	ldr.w	r7, [sp], #4
 81140a2:	4770      	bx	lr
 81140a4:	10000054 	.word	0x10000054

081140a8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 81140a8:	b480      	push	{r7}
 81140aa:	b083      	sub	sp, #12
 81140ac:	af00      	add	r7, sp, #0
 81140ae:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 81140b0:	687b      	ldr	r3, [r7, #4]
 81140b2:	2243      	movs	r2, #67	; 0x43
 81140b4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 81140b6:	4b03      	ldr	r3, [pc, #12]	; (81140c4 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 81140b8:	4618      	mov	r0, r3
 81140ba:	370c      	adds	r7, #12
 81140bc:	46bd      	mov	sp, r7
 81140be:	f85d 7b04 	ldr.w	r7, [sp], #4
 81140c2:	4770      	bx	lr
 81140c4:	100000dc 	.word	0x100000dc

081140c8 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 81140c8:	b480      	push	{r7}
 81140ca:	b083      	sub	sp, #12
 81140cc:	af00      	add	r7, sp, #0
 81140ce:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 81140d0:	687b      	ldr	r3, [r7, #4]
 81140d2:	220a      	movs	r2, #10
 81140d4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 81140d6:	4b03      	ldr	r3, [pc, #12]	; (81140e4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 81140d8:	4618      	mov	r0, r3
 81140da:	370c      	adds	r7, #12
 81140dc:	46bd      	mov	sp, r7
 81140de:	f85d 7b04 	ldr.w	r7, [sp], #4
 81140e2:	4770      	bx	lr
 81140e4:	10000010 	.word	0x10000010

081140e8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 81140e8:	b480      	push	{r7}
 81140ea:	b083      	sub	sp, #12
 81140ec:	af00      	add	r7, sp, #0
 81140ee:	6078      	str	r0, [r7, #4]
 81140f0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 81140f2:	683b      	ldr	r3, [r7, #0]
 81140f4:	2b00      	cmp	r3, #0
 81140f6:	d101      	bne.n	81140fc <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 81140f8:	2303      	movs	r3, #3
 81140fa:	e004      	b.n	8114106 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 81140fc:	687b      	ldr	r3, [r7, #4]
 81140fe:	683a      	ldr	r2, [r7, #0]
 8114100:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8114104:	2300      	movs	r3, #0
}
 8114106:	4618      	mov	r0, r3
 8114108:	370c      	adds	r7, #12
 811410a:	46bd      	mov	sp, r7
 811410c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8114110:	4770      	bx	lr

08114112 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8114112:	b480      	push	{r7}
 8114114:	b087      	sub	sp, #28
 8114116:	af00      	add	r7, sp, #0
 8114118:	60f8      	str	r0, [r7, #12]
 811411a:	60b9      	str	r1, [r7, #8]
 811411c:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 811411e:	68fb      	ldr	r3, [r7, #12]
 8114120:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8114124:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8114126:	697b      	ldr	r3, [r7, #20]
 8114128:	2b00      	cmp	r3, #0
 811412a:	d101      	bne.n	8114130 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 811412c:	2303      	movs	r3, #3
 811412e:	e008      	b.n	8114142 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8114130:	697b      	ldr	r3, [r7, #20]
 8114132:	68ba      	ldr	r2, [r7, #8]
 8114134:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8114138:	697b      	ldr	r3, [r7, #20]
 811413a:	687a      	ldr	r2, [r7, #4]
 811413c:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8114140:	2300      	movs	r3, #0
}
 8114142:	4618      	mov	r0, r3
 8114144:	371c      	adds	r7, #28
 8114146:	46bd      	mov	sp, r7
 8114148:	f85d 7b04 	ldr.w	r7, [sp], #4
 811414c:	4770      	bx	lr

0811414e <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 811414e:	b480      	push	{r7}
 8114150:	b085      	sub	sp, #20
 8114152:	af00      	add	r7, sp, #0
 8114154:	6078      	str	r0, [r7, #4]
 8114156:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8114158:	687b      	ldr	r3, [r7, #4]
 811415a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 811415e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8114160:	68fb      	ldr	r3, [r7, #12]
 8114162:	2b00      	cmp	r3, #0
 8114164:	d101      	bne.n	811416a <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8114166:	2303      	movs	r3, #3
 8114168:	e004      	b.n	8114174 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 811416a:	68fb      	ldr	r3, [r7, #12]
 811416c:	683a      	ldr	r2, [r7, #0]
 811416e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8114172:	2300      	movs	r3, #0
}
 8114174:	4618      	mov	r0, r3
 8114176:	3714      	adds	r7, #20
 8114178:	46bd      	mov	sp, r7
 811417a:	f85d 7b04 	ldr.w	r7, [sp], #4
 811417e:	4770      	bx	lr

08114180 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8114180:	b580      	push	{r7, lr}
 8114182:	b084      	sub	sp, #16
 8114184:	af00      	add	r7, sp, #0
 8114186:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8114188:	687b      	ldr	r3, [r7, #4]
 811418a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 811418e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8114190:	687b      	ldr	r3, [r7, #4]
 8114192:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8114196:	2b00      	cmp	r3, #0
 8114198:	d101      	bne.n	811419e <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 811419a:	2303      	movs	r3, #3
 811419c:	e016      	b.n	81141cc <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 811419e:	687b      	ldr	r3, [r7, #4]
 81141a0:	7c1b      	ldrb	r3, [r3, #16]
 81141a2:	2b00      	cmp	r3, #0
 81141a4:	d109      	bne.n	81141ba <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 81141a6:	68fb      	ldr	r3, [r7, #12]
 81141a8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 81141ac:	f44f 7300 	mov.w	r3, #512	; 0x200
 81141b0:	2101      	movs	r1, #1
 81141b2:	6878      	ldr	r0, [r7, #4]
 81141b4:	f004 fe1e 	bl	8118df4 <USBD_LL_PrepareReceive>
 81141b8:	e007      	b.n	81141ca <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 81141ba:	68fb      	ldr	r3, [r7, #12]
 81141bc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 81141c0:	2340      	movs	r3, #64	; 0x40
 81141c2:	2101      	movs	r1, #1
 81141c4:	6878      	ldr	r0, [r7, #4]
 81141c6:	f004 fe15 	bl	8118df4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 81141ca:	2300      	movs	r3, #0
}
 81141cc:	4618      	mov	r0, r3
 81141ce:	3710      	adds	r7, #16
 81141d0:	46bd      	mov	sp, r7
 81141d2:	bd80      	pop	{r7, pc}

081141d4 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 81141d4:	b580      	push	{r7, lr}
 81141d6:	b086      	sub	sp, #24
 81141d8:	af00      	add	r7, sp, #0
 81141da:	60f8      	str	r0, [r7, #12]
 81141dc:	60b9      	str	r1, [r7, #8]
 81141de:	4613      	mov	r3, r2
 81141e0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 81141e2:	68fb      	ldr	r3, [r7, #12]
 81141e4:	2b00      	cmp	r3, #0
 81141e6:	d101      	bne.n	81141ec <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 81141e8:	2303      	movs	r3, #3
 81141ea:	e01f      	b.n	811422c <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 81141ec:	68fb      	ldr	r3, [r7, #12]
 81141ee:	2200      	movs	r2, #0
 81141f0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 81141f4:	68fb      	ldr	r3, [r7, #12]
 81141f6:	2200      	movs	r2, #0
 81141f8:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 81141fc:	68fb      	ldr	r3, [r7, #12]
 81141fe:	2200      	movs	r2, #0
 8114200:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8114204:	68bb      	ldr	r3, [r7, #8]
 8114206:	2b00      	cmp	r3, #0
 8114208:	d003      	beq.n	8114212 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 811420a:	68fb      	ldr	r3, [r7, #12]
 811420c:	68ba      	ldr	r2, [r7, #8]
 811420e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8114212:	68fb      	ldr	r3, [r7, #12]
 8114214:	2201      	movs	r2, #1
 8114216:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 811421a:	68fb      	ldr	r3, [r7, #12]
 811421c:	79fa      	ldrb	r2, [r7, #7]
 811421e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8114220:	68f8      	ldr	r0, [r7, #12]
 8114222:	f004 fc8d 	bl	8118b40 <USBD_LL_Init>
 8114226:	4603      	mov	r3, r0
 8114228:	75fb      	strb	r3, [r7, #23]

  return ret;
 811422a:	7dfb      	ldrb	r3, [r7, #23]
}
 811422c:	4618      	mov	r0, r3
 811422e:	3718      	adds	r7, #24
 8114230:	46bd      	mov	sp, r7
 8114232:	bd80      	pop	{r7, pc}

08114234 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8114234:	b580      	push	{r7, lr}
 8114236:	b084      	sub	sp, #16
 8114238:	af00      	add	r7, sp, #0
 811423a:	6078      	str	r0, [r7, #4]
 811423c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 811423e:	2300      	movs	r3, #0
 8114240:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8114242:	683b      	ldr	r3, [r7, #0]
 8114244:	2b00      	cmp	r3, #0
 8114246:	d101      	bne.n	811424c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8114248:	2303      	movs	r3, #3
 811424a:	e016      	b.n	811427a <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 811424c:	687b      	ldr	r3, [r7, #4]
 811424e:	683a      	ldr	r2, [r7, #0]
 8114250:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8114254:	687b      	ldr	r3, [r7, #4]
 8114256:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 811425a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 811425c:	2b00      	cmp	r3, #0
 811425e:	d00b      	beq.n	8114278 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8114260:	687b      	ldr	r3, [r7, #4]
 8114262:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8114266:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8114268:	f107 020e 	add.w	r2, r7, #14
 811426c:	4610      	mov	r0, r2
 811426e:	4798      	blx	r3
 8114270:	4602      	mov	r2, r0
 8114272:	687b      	ldr	r3, [r7, #4]
 8114274:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8114278:	2300      	movs	r3, #0
}
 811427a:	4618      	mov	r0, r3
 811427c:	3710      	adds	r7, #16
 811427e:	46bd      	mov	sp, r7
 8114280:	bd80      	pop	{r7, pc}

08114282 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8114282:	b580      	push	{r7, lr}
 8114284:	b082      	sub	sp, #8
 8114286:	af00      	add	r7, sp, #0
 8114288:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 811428a:	6878      	ldr	r0, [r7, #4]
 811428c:	f004 fca8 	bl	8118be0 <USBD_LL_Start>
 8114290:	4603      	mov	r3, r0
}
 8114292:	4618      	mov	r0, r3
 8114294:	3708      	adds	r7, #8
 8114296:	46bd      	mov	sp, r7
 8114298:	bd80      	pop	{r7, pc}

0811429a <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 811429a:	b480      	push	{r7}
 811429c:	b083      	sub	sp, #12
 811429e:	af00      	add	r7, sp, #0
 81142a0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 81142a2:	2300      	movs	r3, #0
}
 81142a4:	4618      	mov	r0, r3
 81142a6:	370c      	adds	r7, #12
 81142a8:	46bd      	mov	sp, r7
 81142aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 81142ae:	4770      	bx	lr

081142b0 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 81142b0:	b580      	push	{r7, lr}
 81142b2:	b084      	sub	sp, #16
 81142b4:	af00      	add	r7, sp, #0
 81142b6:	6078      	str	r0, [r7, #4]
 81142b8:	460b      	mov	r3, r1
 81142ba:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 81142bc:	2303      	movs	r3, #3
 81142be:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 81142c0:	687b      	ldr	r3, [r7, #4]
 81142c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 81142c6:	2b00      	cmp	r3, #0
 81142c8:	d009      	beq.n	81142de <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 81142ca:	687b      	ldr	r3, [r7, #4]
 81142cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 81142d0:	681b      	ldr	r3, [r3, #0]
 81142d2:	78fa      	ldrb	r2, [r7, #3]
 81142d4:	4611      	mov	r1, r2
 81142d6:	6878      	ldr	r0, [r7, #4]
 81142d8:	4798      	blx	r3
 81142da:	4603      	mov	r3, r0
 81142dc:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 81142de:	7bfb      	ldrb	r3, [r7, #15]
}
 81142e0:	4618      	mov	r0, r3
 81142e2:	3710      	adds	r7, #16
 81142e4:	46bd      	mov	sp, r7
 81142e6:	bd80      	pop	{r7, pc}

081142e8 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 81142e8:	b580      	push	{r7, lr}
 81142ea:	b082      	sub	sp, #8
 81142ec:	af00      	add	r7, sp, #0
 81142ee:	6078      	str	r0, [r7, #4]
 81142f0:	460b      	mov	r3, r1
 81142f2:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 81142f4:	687b      	ldr	r3, [r7, #4]
 81142f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 81142fa:	2b00      	cmp	r3, #0
 81142fc:	d007      	beq.n	811430e <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 81142fe:	687b      	ldr	r3, [r7, #4]
 8114300:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8114304:	685b      	ldr	r3, [r3, #4]
 8114306:	78fa      	ldrb	r2, [r7, #3]
 8114308:	4611      	mov	r1, r2
 811430a:	6878      	ldr	r0, [r7, #4]
 811430c:	4798      	blx	r3
  }

  return USBD_OK;
 811430e:	2300      	movs	r3, #0
}
 8114310:	4618      	mov	r0, r3
 8114312:	3708      	adds	r7, #8
 8114314:	46bd      	mov	sp, r7
 8114316:	bd80      	pop	{r7, pc}

08114318 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8114318:	b580      	push	{r7, lr}
 811431a:	b084      	sub	sp, #16
 811431c:	af00      	add	r7, sp, #0
 811431e:	6078      	str	r0, [r7, #4]
 8114320:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8114322:	687b      	ldr	r3, [r7, #4]
 8114324:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8114328:	6839      	ldr	r1, [r7, #0]
 811432a:	4618      	mov	r0, r3
 811432c:	f000 ff90 	bl	8115250 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8114330:	687b      	ldr	r3, [r7, #4]
 8114332:	2201      	movs	r2, #1
 8114334:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8114338:	687b      	ldr	r3, [r7, #4]
 811433a:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 811433e:	461a      	mov	r2, r3
 8114340:	687b      	ldr	r3, [r7, #4]
 8114342:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8114346:	687b      	ldr	r3, [r7, #4]
 8114348:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 811434c:	f003 031f 	and.w	r3, r3, #31
 8114350:	2b02      	cmp	r3, #2
 8114352:	d01a      	beq.n	811438a <USBD_LL_SetupStage+0x72>
 8114354:	2b02      	cmp	r3, #2
 8114356:	d822      	bhi.n	811439e <USBD_LL_SetupStage+0x86>
 8114358:	2b00      	cmp	r3, #0
 811435a:	d002      	beq.n	8114362 <USBD_LL_SetupStage+0x4a>
 811435c:	2b01      	cmp	r3, #1
 811435e:	d00a      	beq.n	8114376 <USBD_LL_SetupStage+0x5e>
 8114360:	e01d      	b.n	811439e <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8114362:	687b      	ldr	r3, [r7, #4]
 8114364:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8114368:	4619      	mov	r1, r3
 811436a:	6878      	ldr	r0, [r7, #4]
 811436c:	f000 fa62 	bl	8114834 <USBD_StdDevReq>
 8114370:	4603      	mov	r3, r0
 8114372:	73fb      	strb	r3, [r7, #15]
      break;
 8114374:	e020      	b.n	81143b8 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8114376:	687b      	ldr	r3, [r7, #4]
 8114378:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 811437c:	4619      	mov	r1, r3
 811437e:	6878      	ldr	r0, [r7, #4]
 8114380:	f000 fac6 	bl	8114910 <USBD_StdItfReq>
 8114384:	4603      	mov	r3, r0
 8114386:	73fb      	strb	r3, [r7, #15]
      break;
 8114388:	e016      	b.n	81143b8 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 811438a:	687b      	ldr	r3, [r7, #4]
 811438c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8114390:	4619      	mov	r1, r3
 8114392:	6878      	ldr	r0, [r7, #4]
 8114394:	f000 fb05 	bl	81149a2 <USBD_StdEPReq>
 8114398:	4603      	mov	r3, r0
 811439a:	73fb      	strb	r3, [r7, #15]
      break;
 811439c:	e00c      	b.n	81143b8 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 811439e:	687b      	ldr	r3, [r7, #4]
 81143a0:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 81143a4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 81143a8:	b2db      	uxtb	r3, r3
 81143aa:	4619      	mov	r1, r3
 81143ac:	6878      	ldr	r0, [r7, #4]
 81143ae:	f004 fc77 	bl	8118ca0 <USBD_LL_StallEP>
 81143b2:	4603      	mov	r3, r0
 81143b4:	73fb      	strb	r3, [r7, #15]
      break;
 81143b6:	bf00      	nop
  }

  return ret;
 81143b8:	7bfb      	ldrb	r3, [r7, #15]
}
 81143ba:	4618      	mov	r0, r3
 81143bc:	3710      	adds	r7, #16
 81143be:	46bd      	mov	sp, r7
 81143c0:	bd80      	pop	{r7, pc}

081143c2 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 81143c2:	b580      	push	{r7, lr}
 81143c4:	b086      	sub	sp, #24
 81143c6:	af00      	add	r7, sp, #0
 81143c8:	60f8      	str	r0, [r7, #12]
 81143ca:	460b      	mov	r3, r1
 81143cc:	607a      	str	r2, [r7, #4]
 81143ce:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 81143d0:	7afb      	ldrb	r3, [r7, #11]
 81143d2:	2b00      	cmp	r3, #0
 81143d4:	d138      	bne.n	8114448 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 81143d6:	68fb      	ldr	r3, [r7, #12]
 81143d8:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 81143dc:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 81143de:	68fb      	ldr	r3, [r7, #12]
 81143e0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 81143e4:	2b03      	cmp	r3, #3
 81143e6:	d14a      	bne.n	811447e <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 81143e8:	693b      	ldr	r3, [r7, #16]
 81143ea:	689a      	ldr	r2, [r3, #8]
 81143ec:	693b      	ldr	r3, [r7, #16]
 81143ee:	68db      	ldr	r3, [r3, #12]
 81143f0:	429a      	cmp	r2, r3
 81143f2:	d913      	bls.n	811441c <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 81143f4:	693b      	ldr	r3, [r7, #16]
 81143f6:	689a      	ldr	r2, [r3, #8]
 81143f8:	693b      	ldr	r3, [r7, #16]
 81143fa:	68db      	ldr	r3, [r3, #12]
 81143fc:	1ad2      	subs	r2, r2, r3
 81143fe:	693b      	ldr	r3, [r7, #16]
 8114400:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8114402:	693b      	ldr	r3, [r7, #16]
 8114404:	68da      	ldr	r2, [r3, #12]
 8114406:	693b      	ldr	r3, [r7, #16]
 8114408:	689b      	ldr	r3, [r3, #8]
 811440a:	4293      	cmp	r3, r2
 811440c:	bf28      	it	cs
 811440e:	4613      	movcs	r3, r2
 8114410:	461a      	mov	r2, r3
 8114412:	6879      	ldr	r1, [r7, #4]
 8114414:	68f8      	ldr	r0, [r7, #12]
 8114416:	f001 f80f 	bl	8115438 <USBD_CtlContinueRx>
 811441a:	e030      	b.n	811447e <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 811441c:	68fb      	ldr	r3, [r7, #12]
 811441e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8114422:	b2db      	uxtb	r3, r3
 8114424:	2b03      	cmp	r3, #3
 8114426:	d10b      	bne.n	8114440 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8114428:	68fb      	ldr	r3, [r7, #12]
 811442a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 811442e:	691b      	ldr	r3, [r3, #16]
 8114430:	2b00      	cmp	r3, #0
 8114432:	d005      	beq.n	8114440 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8114434:	68fb      	ldr	r3, [r7, #12]
 8114436:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 811443a:	691b      	ldr	r3, [r3, #16]
 811443c:	68f8      	ldr	r0, [r7, #12]
 811443e:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8114440:	68f8      	ldr	r0, [r7, #12]
 8114442:	f001 f80a 	bl	811545a <USBD_CtlSendStatus>
 8114446:	e01a      	b.n	811447e <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8114448:	68fb      	ldr	r3, [r7, #12]
 811444a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 811444e:	b2db      	uxtb	r3, r3
 8114450:	2b03      	cmp	r3, #3
 8114452:	d114      	bne.n	811447e <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8114454:	68fb      	ldr	r3, [r7, #12]
 8114456:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 811445a:	699b      	ldr	r3, [r3, #24]
 811445c:	2b00      	cmp	r3, #0
 811445e:	d00e      	beq.n	811447e <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8114460:	68fb      	ldr	r3, [r7, #12]
 8114462:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8114466:	699b      	ldr	r3, [r3, #24]
 8114468:	7afa      	ldrb	r2, [r7, #11]
 811446a:	4611      	mov	r1, r2
 811446c:	68f8      	ldr	r0, [r7, #12]
 811446e:	4798      	blx	r3
 8114470:	4603      	mov	r3, r0
 8114472:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8114474:	7dfb      	ldrb	r3, [r7, #23]
 8114476:	2b00      	cmp	r3, #0
 8114478:	d001      	beq.n	811447e <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 811447a:	7dfb      	ldrb	r3, [r7, #23]
 811447c:	e000      	b.n	8114480 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 811447e:	2300      	movs	r3, #0
}
 8114480:	4618      	mov	r0, r3
 8114482:	3718      	adds	r7, #24
 8114484:	46bd      	mov	sp, r7
 8114486:	bd80      	pop	{r7, pc}

08114488 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8114488:	b580      	push	{r7, lr}
 811448a:	b086      	sub	sp, #24
 811448c:	af00      	add	r7, sp, #0
 811448e:	60f8      	str	r0, [r7, #12]
 8114490:	460b      	mov	r3, r1
 8114492:	607a      	str	r2, [r7, #4]
 8114494:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8114496:	7afb      	ldrb	r3, [r7, #11]
 8114498:	2b00      	cmp	r3, #0
 811449a:	d16b      	bne.n	8114574 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 811449c:	68fb      	ldr	r3, [r7, #12]
 811449e:	3314      	adds	r3, #20
 81144a0:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 81144a2:	68fb      	ldr	r3, [r7, #12]
 81144a4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 81144a8:	2b02      	cmp	r3, #2
 81144aa:	d156      	bne.n	811455a <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 81144ac:	693b      	ldr	r3, [r7, #16]
 81144ae:	689a      	ldr	r2, [r3, #8]
 81144b0:	693b      	ldr	r3, [r7, #16]
 81144b2:	68db      	ldr	r3, [r3, #12]
 81144b4:	429a      	cmp	r2, r3
 81144b6:	d914      	bls.n	81144e2 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 81144b8:	693b      	ldr	r3, [r7, #16]
 81144ba:	689a      	ldr	r2, [r3, #8]
 81144bc:	693b      	ldr	r3, [r7, #16]
 81144be:	68db      	ldr	r3, [r3, #12]
 81144c0:	1ad2      	subs	r2, r2, r3
 81144c2:	693b      	ldr	r3, [r7, #16]
 81144c4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 81144c6:	693b      	ldr	r3, [r7, #16]
 81144c8:	689b      	ldr	r3, [r3, #8]
 81144ca:	461a      	mov	r2, r3
 81144cc:	6879      	ldr	r1, [r7, #4]
 81144ce:	68f8      	ldr	r0, [r7, #12]
 81144d0:	f000 ff84 	bl	81153dc <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 81144d4:	2300      	movs	r3, #0
 81144d6:	2200      	movs	r2, #0
 81144d8:	2100      	movs	r1, #0
 81144da:	68f8      	ldr	r0, [r7, #12]
 81144dc:	f004 fc8a 	bl	8118df4 <USBD_LL_PrepareReceive>
 81144e0:	e03b      	b.n	811455a <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 81144e2:	693b      	ldr	r3, [r7, #16]
 81144e4:	68da      	ldr	r2, [r3, #12]
 81144e6:	693b      	ldr	r3, [r7, #16]
 81144e8:	689b      	ldr	r3, [r3, #8]
 81144ea:	429a      	cmp	r2, r3
 81144ec:	d11c      	bne.n	8114528 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 81144ee:	693b      	ldr	r3, [r7, #16]
 81144f0:	685a      	ldr	r2, [r3, #4]
 81144f2:	693b      	ldr	r3, [r7, #16]
 81144f4:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 81144f6:	429a      	cmp	r2, r3
 81144f8:	d316      	bcc.n	8114528 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 81144fa:	693b      	ldr	r3, [r7, #16]
 81144fc:	685a      	ldr	r2, [r3, #4]
 81144fe:	68fb      	ldr	r3, [r7, #12]
 8114500:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8114504:	429a      	cmp	r2, r3
 8114506:	d20f      	bcs.n	8114528 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8114508:	2200      	movs	r2, #0
 811450a:	2100      	movs	r1, #0
 811450c:	68f8      	ldr	r0, [r7, #12]
 811450e:	f000 ff65 	bl	81153dc <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8114512:	68fb      	ldr	r3, [r7, #12]
 8114514:	2200      	movs	r2, #0
 8114516:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 811451a:	2300      	movs	r3, #0
 811451c:	2200      	movs	r2, #0
 811451e:	2100      	movs	r1, #0
 8114520:	68f8      	ldr	r0, [r7, #12]
 8114522:	f004 fc67 	bl	8118df4 <USBD_LL_PrepareReceive>
 8114526:	e018      	b.n	811455a <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8114528:	68fb      	ldr	r3, [r7, #12]
 811452a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 811452e:	b2db      	uxtb	r3, r3
 8114530:	2b03      	cmp	r3, #3
 8114532:	d10b      	bne.n	811454c <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8114534:	68fb      	ldr	r3, [r7, #12]
 8114536:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 811453a:	68db      	ldr	r3, [r3, #12]
 811453c:	2b00      	cmp	r3, #0
 811453e:	d005      	beq.n	811454c <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8114540:	68fb      	ldr	r3, [r7, #12]
 8114542:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8114546:	68db      	ldr	r3, [r3, #12]
 8114548:	68f8      	ldr	r0, [r7, #12]
 811454a:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 811454c:	2180      	movs	r1, #128	; 0x80
 811454e:	68f8      	ldr	r0, [r7, #12]
 8114550:	f004 fba6 	bl	8118ca0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8114554:	68f8      	ldr	r0, [r7, #12]
 8114556:	f000 ff93 	bl	8115480 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 811455a:	68fb      	ldr	r3, [r7, #12]
 811455c:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8114560:	2b01      	cmp	r3, #1
 8114562:	d122      	bne.n	81145aa <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8114564:	68f8      	ldr	r0, [r7, #12]
 8114566:	f7ff fe98 	bl	811429a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 811456a:	68fb      	ldr	r3, [r7, #12]
 811456c:	2200      	movs	r2, #0
 811456e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8114572:	e01a      	b.n	81145aa <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8114574:	68fb      	ldr	r3, [r7, #12]
 8114576:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 811457a:	b2db      	uxtb	r3, r3
 811457c:	2b03      	cmp	r3, #3
 811457e:	d114      	bne.n	81145aa <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8114580:	68fb      	ldr	r3, [r7, #12]
 8114582:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8114586:	695b      	ldr	r3, [r3, #20]
 8114588:	2b00      	cmp	r3, #0
 811458a:	d00e      	beq.n	81145aa <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 811458c:	68fb      	ldr	r3, [r7, #12]
 811458e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8114592:	695b      	ldr	r3, [r3, #20]
 8114594:	7afa      	ldrb	r2, [r7, #11]
 8114596:	4611      	mov	r1, r2
 8114598:	68f8      	ldr	r0, [r7, #12]
 811459a:	4798      	blx	r3
 811459c:	4603      	mov	r3, r0
 811459e:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 81145a0:	7dfb      	ldrb	r3, [r7, #23]
 81145a2:	2b00      	cmp	r3, #0
 81145a4:	d001      	beq.n	81145aa <USBD_LL_DataInStage+0x122>
        {
          return ret;
 81145a6:	7dfb      	ldrb	r3, [r7, #23]
 81145a8:	e000      	b.n	81145ac <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 81145aa:	2300      	movs	r3, #0
}
 81145ac:	4618      	mov	r0, r3
 81145ae:	3718      	adds	r7, #24
 81145b0:	46bd      	mov	sp, r7
 81145b2:	bd80      	pop	{r7, pc}

081145b4 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 81145b4:	b580      	push	{r7, lr}
 81145b6:	b082      	sub	sp, #8
 81145b8:	af00      	add	r7, sp, #0
 81145ba:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 81145bc:	687b      	ldr	r3, [r7, #4]
 81145be:	2201      	movs	r2, #1
 81145c0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 81145c4:	687b      	ldr	r3, [r7, #4]
 81145c6:	2200      	movs	r2, #0
 81145c8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 81145cc:	687b      	ldr	r3, [r7, #4]
 81145ce:	2200      	movs	r2, #0
 81145d0:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 81145d2:	687b      	ldr	r3, [r7, #4]
 81145d4:	2200      	movs	r2, #0
 81145d6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 81145da:	687b      	ldr	r3, [r7, #4]
 81145dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 81145e0:	2b00      	cmp	r3, #0
 81145e2:	d101      	bne.n	81145e8 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 81145e4:	2303      	movs	r3, #3
 81145e6:	e02f      	b.n	8114648 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 81145e8:	687b      	ldr	r3, [r7, #4]
 81145ea:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 81145ee:	2b00      	cmp	r3, #0
 81145f0:	d00f      	beq.n	8114612 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 81145f2:	687b      	ldr	r3, [r7, #4]
 81145f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 81145f8:	685b      	ldr	r3, [r3, #4]
 81145fa:	2b00      	cmp	r3, #0
 81145fc:	d009      	beq.n	8114612 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 81145fe:	687b      	ldr	r3, [r7, #4]
 8114600:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8114604:	685b      	ldr	r3, [r3, #4]
 8114606:	687a      	ldr	r2, [r7, #4]
 8114608:	6852      	ldr	r2, [r2, #4]
 811460a:	b2d2      	uxtb	r2, r2
 811460c:	4611      	mov	r1, r2
 811460e:	6878      	ldr	r0, [r7, #4]
 8114610:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8114612:	2340      	movs	r3, #64	; 0x40
 8114614:	2200      	movs	r2, #0
 8114616:	2100      	movs	r1, #0
 8114618:	6878      	ldr	r0, [r7, #4]
 811461a:	f004 fafc 	bl	8118c16 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 811461e:	687b      	ldr	r3, [r7, #4]
 8114620:	2201      	movs	r2, #1
 8114622:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8114626:	687b      	ldr	r3, [r7, #4]
 8114628:	2240      	movs	r2, #64	; 0x40
 811462a:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 811462e:	2340      	movs	r3, #64	; 0x40
 8114630:	2200      	movs	r2, #0
 8114632:	2180      	movs	r1, #128	; 0x80
 8114634:	6878      	ldr	r0, [r7, #4]
 8114636:	f004 faee 	bl	8118c16 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 811463a:	687b      	ldr	r3, [r7, #4]
 811463c:	2201      	movs	r2, #1
 811463e:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8114640:	687b      	ldr	r3, [r7, #4]
 8114642:	2240      	movs	r2, #64	; 0x40
 8114644:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8114646:	2300      	movs	r3, #0
}
 8114648:	4618      	mov	r0, r3
 811464a:	3708      	adds	r7, #8
 811464c:	46bd      	mov	sp, r7
 811464e:	bd80      	pop	{r7, pc}

08114650 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8114650:	b480      	push	{r7}
 8114652:	b083      	sub	sp, #12
 8114654:	af00      	add	r7, sp, #0
 8114656:	6078      	str	r0, [r7, #4]
 8114658:	460b      	mov	r3, r1
 811465a:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 811465c:	687b      	ldr	r3, [r7, #4]
 811465e:	78fa      	ldrb	r2, [r7, #3]
 8114660:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8114662:	2300      	movs	r3, #0
}
 8114664:	4618      	mov	r0, r3
 8114666:	370c      	adds	r7, #12
 8114668:	46bd      	mov	sp, r7
 811466a:	f85d 7b04 	ldr.w	r7, [sp], #4
 811466e:	4770      	bx	lr

08114670 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8114670:	b480      	push	{r7}
 8114672:	b083      	sub	sp, #12
 8114674:	af00      	add	r7, sp, #0
 8114676:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8114678:	687b      	ldr	r3, [r7, #4]
 811467a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 811467e:	b2da      	uxtb	r2, r3
 8114680:	687b      	ldr	r3, [r7, #4]
 8114682:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8114686:	687b      	ldr	r3, [r7, #4]
 8114688:	2204      	movs	r2, #4
 811468a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 811468e:	2300      	movs	r3, #0
}
 8114690:	4618      	mov	r0, r3
 8114692:	370c      	adds	r7, #12
 8114694:	46bd      	mov	sp, r7
 8114696:	f85d 7b04 	ldr.w	r7, [sp], #4
 811469a:	4770      	bx	lr

0811469c <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 811469c:	b480      	push	{r7}
 811469e:	b083      	sub	sp, #12
 81146a0:	af00      	add	r7, sp, #0
 81146a2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 81146a4:	687b      	ldr	r3, [r7, #4]
 81146a6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 81146aa:	b2db      	uxtb	r3, r3
 81146ac:	2b04      	cmp	r3, #4
 81146ae:	d106      	bne.n	81146be <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 81146b0:	687b      	ldr	r3, [r7, #4]
 81146b2:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 81146b6:	b2da      	uxtb	r2, r3
 81146b8:	687b      	ldr	r3, [r7, #4]
 81146ba:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 81146be:	2300      	movs	r3, #0
}
 81146c0:	4618      	mov	r0, r3
 81146c2:	370c      	adds	r7, #12
 81146c4:	46bd      	mov	sp, r7
 81146c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81146ca:	4770      	bx	lr

081146cc <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 81146cc:	b580      	push	{r7, lr}
 81146ce:	b082      	sub	sp, #8
 81146d0:	af00      	add	r7, sp, #0
 81146d2:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 81146d4:	687b      	ldr	r3, [r7, #4]
 81146d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 81146da:	2b00      	cmp	r3, #0
 81146dc:	d101      	bne.n	81146e2 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 81146de:	2303      	movs	r3, #3
 81146e0:	e012      	b.n	8114708 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 81146e2:	687b      	ldr	r3, [r7, #4]
 81146e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 81146e8:	b2db      	uxtb	r3, r3
 81146ea:	2b03      	cmp	r3, #3
 81146ec:	d10b      	bne.n	8114706 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 81146ee:	687b      	ldr	r3, [r7, #4]
 81146f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 81146f4:	69db      	ldr	r3, [r3, #28]
 81146f6:	2b00      	cmp	r3, #0
 81146f8:	d005      	beq.n	8114706 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 81146fa:	687b      	ldr	r3, [r7, #4]
 81146fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8114700:	69db      	ldr	r3, [r3, #28]
 8114702:	6878      	ldr	r0, [r7, #4]
 8114704:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8114706:	2300      	movs	r3, #0
}
 8114708:	4618      	mov	r0, r3
 811470a:	3708      	adds	r7, #8
 811470c:	46bd      	mov	sp, r7
 811470e:	bd80      	pop	{r7, pc}

08114710 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8114710:	b580      	push	{r7, lr}
 8114712:	b082      	sub	sp, #8
 8114714:	af00      	add	r7, sp, #0
 8114716:	6078      	str	r0, [r7, #4]
 8114718:	460b      	mov	r3, r1
 811471a:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 811471c:	687b      	ldr	r3, [r7, #4]
 811471e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8114722:	2b00      	cmp	r3, #0
 8114724:	d101      	bne.n	811472a <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 8114726:	2303      	movs	r3, #3
 8114728:	e014      	b.n	8114754 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 811472a:	687b      	ldr	r3, [r7, #4]
 811472c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8114730:	b2db      	uxtb	r3, r3
 8114732:	2b03      	cmp	r3, #3
 8114734:	d10d      	bne.n	8114752 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 8114736:	687b      	ldr	r3, [r7, #4]
 8114738:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 811473c:	6a1b      	ldr	r3, [r3, #32]
 811473e:	2b00      	cmp	r3, #0
 8114740:	d007      	beq.n	8114752 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 8114742:	687b      	ldr	r3, [r7, #4]
 8114744:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8114748:	6a1b      	ldr	r3, [r3, #32]
 811474a:	78fa      	ldrb	r2, [r7, #3]
 811474c:	4611      	mov	r1, r2
 811474e:	6878      	ldr	r0, [r7, #4]
 8114750:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8114752:	2300      	movs	r3, #0
}
 8114754:	4618      	mov	r0, r3
 8114756:	3708      	adds	r7, #8
 8114758:	46bd      	mov	sp, r7
 811475a:	bd80      	pop	{r7, pc}

0811475c <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 811475c:	b580      	push	{r7, lr}
 811475e:	b082      	sub	sp, #8
 8114760:	af00      	add	r7, sp, #0
 8114762:	6078      	str	r0, [r7, #4]
 8114764:	460b      	mov	r3, r1
 8114766:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8114768:	687b      	ldr	r3, [r7, #4]
 811476a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 811476e:	2b00      	cmp	r3, #0
 8114770:	d101      	bne.n	8114776 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 8114772:	2303      	movs	r3, #3
 8114774:	e014      	b.n	81147a0 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8114776:	687b      	ldr	r3, [r7, #4]
 8114778:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 811477c:	b2db      	uxtb	r3, r3
 811477e:	2b03      	cmp	r3, #3
 8114780:	d10d      	bne.n	811479e <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 8114782:	687b      	ldr	r3, [r7, #4]
 8114784:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8114788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 811478a:	2b00      	cmp	r3, #0
 811478c:	d007      	beq.n	811479e <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 811478e:	687b      	ldr	r3, [r7, #4]
 8114790:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8114794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8114796:	78fa      	ldrb	r2, [r7, #3]
 8114798:	4611      	mov	r1, r2
 811479a:	6878      	ldr	r0, [r7, #4]
 811479c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 811479e:	2300      	movs	r3, #0
}
 81147a0:	4618      	mov	r0, r3
 81147a2:	3708      	adds	r7, #8
 81147a4:	46bd      	mov	sp, r7
 81147a6:	bd80      	pop	{r7, pc}

081147a8 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 81147a8:	b480      	push	{r7}
 81147aa:	b083      	sub	sp, #12
 81147ac:	af00      	add	r7, sp, #0
 81147ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 81147b0:	2300      	movs	r3, #0
}
 81147b2:	4618      	mov	r0, r3
 81147b4:	370c      	adds	r7, #12
 81147b6:	46bd      	mov	sp, r7
 81147b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81147bc:	4770      	bx	lr

081147be <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 81147be:	b580      	push	{r7, lr}
 81147c0:	b082      	sub	sp, #8
 81147c2:	af00      	add	r7, sp, #0
 81147c4:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 81147c6:	687b      	ldr	r3, [r7, #4]
 81147c8:	2201      	movs	r2, #1
 81147ca:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 81147ce:	687b      	ldr	r3, [r7, #4]
 81147d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 81147d4:	2b00      	cmp	r3, #0
 81147d6:	d009      	beq.n	81147ec <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 81147d8:	687b      	ldr	r3, [r7, #4]
 81147da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 81147de:	685b      	ldr	r3, [r3, #4]
 81147e0:	687a      	ldr	r2, [r7, #4]
 81147e2:	6852      	ldr	r2, [r2, #4]
 81147e4:	b2d2      	uxtb	r2, r2
 81147e6:	4611      	mov	r1, r2
 81147e8:	6878      	ldr	r0, [r7, #4]
 81147ea:	4798      	blx	r3
  }

  return USBD_OK;
 81147ec:	2300      	movs	r3, #0
}
 81147ee:	4618      	mov	r0, r3
 81147f0:	3708      	adds	r7, #8
 81147f2:	46bd      	mov	sp, r7
 81147f4:	bd80      	pop	{r7, pc}

081147f6 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 81147f6:	b480      	push	{r7}
 81147f8:	b087      	sub	sp, #28
 81147fa:	af00      	add	r7, sp, #0
 81147fc:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 81147fe:	687b      	ldr	r3, [r7, #4]
 8114800:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8114802:	697b      	ldr	r3, [r7, #20]
 8114804:	781b      	ldrb	r3, [r3, #0]
 8114806:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8114808:	697b      	ldr	r3, [r7, #20]
 811480a:	3301      	adds	r3, #1
 811480c:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 811480e:	697b      	ldr	r3, [r7, #20]
 8114810:	781b      	ldrb	r3, [r3, #0]
 8114812:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8114814:	8a3b      	ldrh	r3, [r7, #16]
 8114816:	021b      	lsls	r3, r3, #8
 8114818:	b21a      	sxth	r2, r3
 811481a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 811481e:	4313      	orrs	r3, r2
 8114820:	b21b      	sxth	r3, r3
 8114822:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8114824:	89fb      	ldrh	r3, [r7, #14]
}
 8114826:	4618      	mov	r0, r3
 8114828:	371c      	adds	r7, #28
 811482a:	46bd      	mov	sp, r7
 811482c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8114830:	4770      	bx	lr
	...

08114834 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8114834:	b580      	push	{r7, lr}
 8114836:	b084      	sub	sp, #16
 8114838:	af00      	add	r7, sp, #0
 811483a:	6078      	str	r0, [r7, #4]
 811483c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 811483e:	2300      	movs	r3, #0
 8114840:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8114842:	683b      	ldr	r3, [r7, #0]
 8114844:	781b      	ldrb	r3, [r3, #0]
 8114846:	f003 0360 	and.w	r3, r3, #96	; 0x60
 811484a:	2b40      	cmp	r3, #64	; 0x40
 811484c:	d005      	beq.n	811485a <USBD_StdDevReq+0x26>
 811484e:	2b40      	cmp	r3, #64	; 0x40
 8114850:	d853      	bhi.n	81148fa <USBD_StdDevReq+0xc6>
 8114852:	2b00      	cmp	r3, #0
 8114854:	d00b      	beq.n	811486e <USBD_StdDevReq+0x3a>
 8114856:	2b20      	cmp	r3, #32
 8114858:	d14f      	bne.n	81148fa <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 811485a:	687b      	ldr	r3, [r7, #4]
 811485c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8114860:	689b      	ldr	r3, [r3, #8]
 8114862:	6839      	ldr	r1, [r7, #0]
 8114864:	6878      	ldr	r0, [r7, #4]
 8114866:	4798      	blx	r3
 8114868:	4603      	mov	r3, r0
 811486a:	73fb      	strb	r3, [r7, #15]
      break;
 811486c:	e04a      	b.n	8114904 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 811486e:	683b      	ldr	r3, [r7, #0]
 8114870:	785b      	ldrb	r3, [r3, #1]
 8114872:	2b09      	cmp	r3, #9
 8114874:	d83b      	bhi.n	81148ee <USBD_StdDevReq+0xba>
 8114876:	a201      	add	r2, pc, #4	; (adr r2, 811487c <USBD_StdDevReq+0x48>)
 8114878:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 811487c:	081148d1 	.word	0x081148d1
 8114880:	081148e5 	.word	0x081148e5
 8114884:	081148ef 	.word	0x081148ef
 8114888:	081148db 	.word	0x081148db
 811488c:	081148ef 	.word	0x081148ef
 8114890:	081148af 	.word	0x081148af
 8114894:	081148a5 	.word	0x081148a5
 8114898:	081148ef 	.word	0x081148ef
 811489c:	081148c7 	.word	0x081148c7
 81148a0:	081148b9 	.word	0x081148b9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 81148a4:	6839      	ldr	r1, [r7, #0]
 81148a6:	6878      	ldr	r0, [r7, #4]
 81148a8:	f000 f9de 	bl	8114c68 <USBD_GetDescriptor>
          break;
 81148ac:	e024      	b.n	81148f8 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 81148ae:	6839      	ldr	r1, [r7, #0]
 81148b0:	6878      	ldr	r0, [r7, #4]
 81148b2:	f000 fb43 	bl	8114f3c <USBD_SetAddress>
          break;
 81148b6:	e01f      	b.n	81148f8 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 81148b8:	6839      	ldr	r1, [r7, #0]
 81148ba:	6878      	ldr	r0, [r7, #4]
 81148bc:	f000 fb82 	bl	8114fc4 <USBD_SetConfig>
 81148c0:	4603      	mov	r3, r0
 81148c2:	73fb      	strb	r3, [r7, #15]
          break;
 81148c4:	e018      	b.n	81148f8 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 81148c6:	6839      	ldr	r1, [r7, #0]
 81148c8:	6878      	ldr	r0, [r7, #4]
 81148ca:	f000 fc21 	bl	8115110 <USBD_GetConfig>
          break;
 81148ce:	e013      	b.n	81148f8 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 81148d0:	6839      	ldr	r1, [r7, #0]
 81148d2:	6878      	ldr	r0, [r7, #4]
 81148d4:	f000 fc52 	bl	811517c <USBD_GetStatus>
          break;
 81148d8:	e00e      	b.n	81148f8 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 81148da:	6839      	ldr	r1, [r7, #0]
 81148dc:	6878      	ldr	r0, [r7, #4]
 81148de:	f000 fc81 	bl	81151e4 <USBD_SetFeature>
          break;
 81148e2:	e009      	b.n	81148f8 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 81148e4:	6839      	ldr	r1, [r7, #0]
 81148e6:	6878      	ldr	r0, [r7, #4]
 81148e8:	f000 fc90 	bl	811520c <USBD_ClrFeature>
          break;
 81148ec:	e004      	b.n	81148f8 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 81148ee:	6839      	ldr	r1, [r7, #0]
 81148f0:	6878      	ldr	r0, [r7, #4]
 81148f2:	f000 fce7 	bl	81152c4 <USBD_CtlError>
          break;
 81148f6:	bf00      	nop
      }
      break;
 81148f8:	e004      	b.n	8114904 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 81148fa:	6839      	ldr	r1, [r7, #0]
 81148fc:	6878      	ldr	r0, [r7, #4]
 81148fe:	f000 fce1 	bl	81152c4 <USBD_CtlError>
      break;
 8114902:	bf00      	nop
  }

  return ret;
 8114904:	7bfb      	ldrb	r3, [r7, #15]
}
 8114906:	4618      	mov	r0, r3
 8114908:	3710      	adds	r7, #16
 811490a:	46bd      	mov	sp, r7
 811490c:	bd80      	pop	{r7, pc}
 811490e:	bf00      	nop

08114910 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8114910:	b580      	push	{r7, lr}
 8114912:	b084      	sub	sp, #16
 8114914:	af00      	add	r7, sp, #0
 8114916:	6078      	str	r0, [r7, #4]
 8114918:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 811491a:	2300      	movs	r3, #0
 811491c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 811491e:	683b      	ldr	r3, [r7, #0]
 8114920:	781b      	ldrb	r3, [r3, #0]
 8114922:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8114926:	2b40      	cmp	r3, #64	; 0x40
 8114928:	d005      	beq.n	8114936 <USBD_StdItfReq+0x26>
 811492a:	2b40      	cmp	r3, #64	; 0x40
 811492c:	d82f      	bhi.n	811498e <USBD_StdItfReq+0x7e>
 811492e:	2b00      	cmp	r3, #0
 8114930:	d001      	beq.n	8114936 <USBD_StdItfReq+0x26>
 8114932:	2b20      	cmp	r3, #32
 8114934:	d12b      	bne.n	811498e <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8114936:	687b      	ldr	r3, [r7, #4]
 8114938:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 811493c:	b2db      	uxtb	r3, r3
 811493e:	3b01      	subs	r3, #1
 8114940:	2b02      	cmp	r3, #2
 8114942:	d81d      	bhi.n	8114980 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8114944:	683b      	ldr	r3, [r7, #0]
 8114946:	889b      	ldrh	r3, [r3, #4]
 8114948:	b2db      	uxtb	r3, r3
 811494a:	2b01      	cmp	r3, #1
 811494c:	d813      	bhi.n	8114976 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 811494e:	687b      	ldr	r3, [r7, #4]
 8114950:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8114954:	689b      	ldr	r3, [r3, #8]
 8114956:	6839      	ldr	r1, [r7, #0]
 8114958:	6878      	ldr	r0, [r7, #4]
 811495a:	4798      	blx	r3
 811495c:	4603      	mov	r3, r0
 811495e:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8114960:	683b      	ldr	r3, [r7, #0]
 8114962:	88db      	ldrh	r3, [r3, #6]
 8114964:	2b00      	cmp	r3, #0
 8114966:	d110      	bne.n	811498a <USBD_StdItfReq+0x7a>
 8114968:	7bfb      	ldrb	r3, [r7, #15]
 811496a:	2b00      	cmp	r3, #0
 811496c:	d10d      	bne.n	811498a <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 811496e:	6878      	ldr	r0, [r7, #4]
 8114970:	f000 fd73 	bl	811545a <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8114974:	e009      	b.n	811498a <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8114976:	6839      	ldr	r1, [r7, #0]
 8114978:	6878      	ldr	r0, [r7, #4]
 811497a:	f000 fca3 	bl	81152c4 <USBD_CtlError>
          break;
 811497e:	e004      	b.n	811498a <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8114980:	6839      	ldr	r1, [r7, #0]
 8114982:	6878      	ldr	r0, [r7, #4]
 8114984:	f000 fc9e 	bl	81152c4 <USBD_CtlError>
          break;
 8114988:	e000      	b.n	811498c <USBD_StdItfReq+0x7c>
          break;
 811498a:	bf00      	nop
      }
      break;
 811498c:	e004      	b.n	8114998 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 811498e:	6839      	ldr	r1, [r7, #0]
 8114990:	6878      	ldr	r0, [r7, #4]
 8114992:	f000 fc97 	bl	81152c4 <USBD_CtlError>
      break;
 8114996:	bf00      	nop
  }

  return ret;
 8114998:	7bfb      	ldrb	r3, [r7, #15]
}
 811499a:	4618      	mov	r0, r3
 811499c:	3710      	adds	r7, #16
 811499e:	46bd      	mov	sp, r7
 81149a0:	bd80      	pop	{r7, pc}

081149a2 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 81149a2:	b580      	push	{r7, lr}
 81149a4:	b084      	sub	sp, #16
 81149a6:	af00      	add	r7, sp, #0
 81149a8:	6078      	str	r0, [r7, #4]
 81149aa:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 81149ac:	2300      	movs	r3, #0
 81149ae:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 81149b0:	683b      	ldr	r3, [r7, #0]
 81149b2:	889b      	ldrh	r3, [r3, #4]
 81149b4:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 81149b6:	683b      	ldr	r3, [r7, #0]
 81149b8:	781b      	ldrb	r3, [r3, #0]
 81149ba:	f003 0360 	and.w	r3, r3, #96	; 0x60
 81149be:	2b40      	cmp	r3, #64	; 0x40
 81149c0:	d007      	beq.n	81149d2 <USBD_StdEPReq+0x30>
 81149c2:	2b40      	cmp	r3, #64	; 0x40
 81149c4:	f200 8145 	bhi.w	8114c52 <USBD_StdEPReq+0x2b0>
 81149c8:	2b00      	cmp	r3, #0
 81149ca:	d00c      	beq.n	81149e6 <USBD_StdEPReq+0x44>
 81149cc:	2b20      	cmp	r3, #32
 81149ce:	f040 8140 	bne.w	8114c52 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 81149d2:	687b      	ldr	r3, [r7, #4]
 81149d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 81149d8:	689b      	ldr	r3, [r3, #8]
 81149da:	6839      	ldr	r1, [r7, #0]
 81149dc:	6878      	ldr	r0, [r7, #4]
 81149de:	4798      	blx	r3
 81149e0:	4603      	mov	r3, r0
 81149e2:	73fb      	strb	r3, [r7, #15]
      break;
 81149e4:	e13a      	b.n	8114c5c <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 81149e6:	683b      	ldr	r3, [r7, #0]
 81149e8:	785b      	ldrb	r3, [r3, #1]
 81149ea:	2b03      	cmp	r3, #3
 81149ec:	d007      	beq.n	81149fe <USBD_StdEPReq+0x5c>
 81149ee:	2b03      	cmp	r3, #3
 81149f0:	f300 8129 	bgt.w	8114c46 <USBD_StdEPReq+0x2a4>
 81149f4:	2b00      	cmp	r3, #0
 81149f6:	d07f      	beq.n	8114af8 <USBD_StdEPReq+0x156>
 81149f8:	2b01      	cmp	r3, #1
 81149fa:	d03c      	beq.n	8114a76 <USBD_StdEPReq+0xd4>
 81149fc:	e123      	b.n	8114c46 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 81149fe:	687b      	ldr	r3, [r7, #4]
 8114a00:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8114a04:	b2db      	uxtb	r3, r3
 8114a06:	2b02      	cmp	r3, #2
 8114a08:	d002      	beq.n	8114a10 <USBD_StdEPReq+0x6e>
 8114a0a:	2b03      	cmp	r3, #3
 8114a0c:	d016      	beq.n	8114a3c <USBD_StdEPReq+0x9a>
 8114a0e:	e02c      	b.n	8114a6a <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8114a10:	7bbb      	ldrb	r3, [r7, #14]
 8114a12:	2b00      	cmp	r3, #0
 8114a14:	d00d      	beq.n	8114a32 <USBD_StdEPReq+0x90>
 8114a16:	7bbb      	ldrb	r3, [r7, #14]
 8114a18:	2b80      	cmp	r3, #128	; 0x80
 8114a1a:	d00a      	beq.n	8114a32 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8114a1c:	7bbb      	ldrb	r3, [r7, #14]
 8114a1e:	4619      	mov	r1, r3
 8114a20:	6878      	ldr	r0, [r7, #4]
 8114a22:	f004 f93d 	bl	8118ca0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8114a26:	2180      	movs	r1, #128	; 0x80
 8114a28:	6878      	ldr	r0, [r7, #4]
 8114a2a:	f004 f939 	bl	8118ca0 <USBD_LL_StallEP>
 8114a2e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8114a30:	e020      	b.n	8114a74 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8114a32:	6839      	ldr	r1, [r7, #0]
 8114a34:	6878      	ldr	r0, [r7, #4]
 8114a36:	f000 fc45 	bl	81152c4 <USBD_CtlError>
              break;
 8114a3a:	e01b      	b.n	8114a74 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8114a3c:	683b      	ldr	r3, [r7, #0]
 8114a3e:	885b      	ldrh	r3, [r3, #2]
 8114a40:	2b00      	cmp	r3, #0
 8114a42:	d10e      	bne.n	8114a62 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8114a44:	7bbb      	ldrb	r3, [r7, #14]
 8114a46:	2b00      	cmp	r3, #0
 8114a48:	d00b      	beq.n	8114a62 <USBD_StdEPReq+0xc0>
 8114a4a:	7bbb      	ldrb	r3, [r7, #14]
 8114a4c:	2b80      	cmp	r3, #128	; 0x80
 8114a4e:	d008      	beq.n	8114a62 <USBD_StdEPReq+0xc0>
 8114a50:	683b      	ldr	r3, [r7, #0]
 8114a52:	88db      	ldrh	r3, [r3, #6]
 8114a54:	2b00      	cmp	r3, #0
 8114a56:	d104      	bne.n	8114a62 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8114a58:	7bbb      	ldrb	r3, [r7, #14]
 8114a5a:	4619      	mov	r1, r3
 8114a5c:	6878      	ldr	r0, [r7, #4]
 8114a5e:	f004 f91f 	bl	8118ca0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8114a62:	6878      	ldr	r0, [r7, #4]
 8114a64:	f000 fcf9 	bl	811545a <USBD_CtlSendStatus>

              break;
 8114a68:	e004      	b.n	8114a74 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8114a6a:	6839      	ldr	r1, [r7, #0]
 8114a6c:	6878      	ldr	r0, [r7, #4]
 8114a6e:	f000 fc29 	bl	81152c4 <USBD_CtlError>
              break;
 8114a72:	bf00      	nop
          }
          break;
 8114a74:	e0ec      	b.n	8114c50 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8114a76:	687b      	ldr	r3, [r7, #4]
 8114a78:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8114a7c:	b2db      	uxtb	r3, r3
 8114a7e:	2b02      	cmp	r3, #2
 8114a80:	d002      	beq.n	8114a88 <USBD_StdEPReq+0xe6>
 8114a82:	2b03      	cmp	r3, #3
 8114a84:	d016      	beq.n	8114ab4 <USBD_StdEPReq+0x112>
 8114a86:	e030      	b.n	8114aea <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8114a88:	7bbb      	ldrb	r3, [r7, #14]
 8114a8a:	2b00      	cmp	r3, #0
 8114a8c:	d00d      	beq.n	8114aaa <USBD_StdEPReq+0x108>
 8114a8e:	7bbb      	ldrb	r3, [r7, #14]
 8114a90:	2b80      	cmp	r3, #128	; 0x80
 8114a92:	d00a      	beq.n	8114aaa <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8114a94:	7bbb      	ldrb	r3, [r7, #14]
 8114a96:	4619      	mov	r1, r3
 8114a98:	6878      	ldr	r0, [r7, #4]
 8114a9a:	f004 f901 	bl	8118ca0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8114a9e:	2180      	movs	r1, #128	; 0x80
 8114aa0:	6878      	ldr	r0, [r7, #4]
 8114aa2:	f004 f8fd 	bl	8118ca0 <USBD_LL_StallEP>
 8114aa6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8114aa8:	e025      	b.n	8114af6 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8114aaa:	6839      	ldr	r1, [r7, #0]
 8114aac:	6878      	ldr	r0, [r7, #4]
 8114aae:	f000 fc09 	bl	81152c4 <USBD_CtlError>
              break;
 8114ab2:	e020      	b.n	8114af6 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8114ab4:	683b      	ldr	r3, [r7, #0]
 8114ab6:	885b      	ldrh	r3, [r3, #2]
 8114ab8:	2b00      	cmp	r3, #0
 8114aba:	d11b      	bne.n	8114af4 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8114abc:	7bbb      	ldrb	r3, [r7, #14]
 8114abe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8114ac2:	2b00      	cmp	r3, #0
 8114ac4:	d004      	beq.n	8114ad0 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8114ac6:	7bbb      	ldrb	r3, [r7, #14]
 8114ac8:	4619      	mov	r1, r3
 8114aca:	6878      	ldr	r0, [r7, #4]
 8114acc:	f004 f907 	bl	8118cde <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8114ad0:	6878      	ldr	r0, [r7, #4]
 8114ad2:	f000 fcc2 	bl	811545a <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8114ad6:	687b      	ldr	r3, [r7, #4]
 8114ad8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8114adc:	689b      	ldr	r3, [r3, #8]
 8114ade:	6839      	ldr	r1, [r7, #0]
 8114ae0:	6878      	ldr	r0, [r7, #4]
 8114ae2:	4798      	blx	r3
 8114ae4:	4603      	mov	r3, r0
 8114ae6:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8114ae8:	e004      	b.n	8114af4 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8114aea:	6839      	ldr	r1, [r7, #0]
 8114aec:	6878      	ldr	r0, [r7, #4]
 8114aee:	f000 fbe9 	bl	81152c4 <USBD_CtlError>
              break;
 8114af2:	e000      	b.n	8114af6 <USBD_StdEPReq+0x154>
              break;
 8114af4:	bf00      	nop
          }
          break;
 8114af6:	e0ab      	b.n	8114c50 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8114af8:	687b      	ldr	r3, [r7, #4]
 8114afa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8114afe:	b2db      	uxtb	r3, r3
 8114b00:	2b02      	cmp	r3, #2
 8114b02:	d002      	beq.n	8114b0a <USBD_StdEPReq+0x168>
 8114b04:	2b03      	cmp	r3, #3
 8114b06:	d032      	beq.n	8114b6e <USBD_StdEPReq+0x1cc>
 8114b08:	e097      	b.n	8114c3a <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8114b0a:	7bbb      	ldrb	r3, [r7, #14]
 8114b0c:	2b00      	cmp	r3, #0
 8114b0e:	d007      	beq.n	8114b20 <USBD_StdEPReq+0x17e>
 8114b10:	7bbb      	ldrb	r3, [r7, #14]
 8114b12:	2b80      	cmp	r3, #128	; 0x80
 8114b14:	d004      	beq.n	8114b20 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8114b16:	6839      	ldr	r1, [r7, #0]
 8114b18:	6878      	ldr	r0, [r7, #4]
 8114b1a:	f000 fbd3 	bl	81152c4 <USBD_CtlError>
                break;
 8114b1e:	e091      	b.n	8114c44 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8114b20:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8114b24:	2b00      	cmp	r3, #0
 8114b26:	da0b      	bge.n	8114b40 <USBD_StdEPReq+0x19e>
 8114b28:	7bbb      	ldrb	r3, [r7, #14]
 8114b2a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8114b2e:	4613      	mov	r3, r2
 8114b30:	009b      	lsls	r3, r3, #2
 8114b32:	4413      	add	r3, r2
 8114b34:	009b      	lsls	r3, r3, #2
 8114b36:	3310      	adds	r3, #16
 8114b38:	687a      	ldr	r2, [r7, #4]
 8114b3a:	4413      	add	r3, r2
 8114b3c:	3304      	adds	r3, #4
 8114b3e:	e00b      	b.n	8114b58 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8114b40:	7bbb      	ldrb	r3, [r7, #14]
 8114b42:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8114b46:	4613      	mov	r3, r2
 8114b48:	009b      	lsls	r3, r3, #2
 8114b4a:	4413      	add	r3, r2
 8114b4c:	009b      	lsls	r3, r3, #2
 8114b4e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8114b52:	687a      	ldr	r2, [r7, #4]
 8114b54:	4413      	add	r3, r2
 8114b56:	3304      	adds	r3, #4
 8114b58:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8114b5a:	68bb      	ldr	r3, [r7, #8]
 8114b5c:	2200      	movs	r2, #0
 8114b5e:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8114b60:	68bb      	ldr	r3, [r7, #8]
 8114b62:	2202      	movs	r2, #2
 8114b64:	4619      	mov	r1, r3
 8114b66:	6878      	ldr	r0, [r7, #4]
 8114b68:	f000 fc1d 	bl	81153a6 <USBD_CtlSendData>
              break;
 8114b6c:	e06a      	b.n	8114c44 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8114b6e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8114b72:	2b00      	cmp	r3, #0
 8114b74:	da11      	bge.n	8114b9a <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8114b76:	7bbb      	ldrb	r3, [r7, #14]
 8114b78:	f003 020f 	and.w	r2, r3, #15
 8114b7c:	6879      	ldr	r1, [r7, #4]
 8114b7e:	4613      	mov	r3, r2
 8114b80:	009b      	lsls	r3, r3, #2
 8114b82:	4413      	add	r3, r2
 8114b84:	009b      	lsls	r3, r3, #2
 8114b86:	440b      	add	r3, r1
 8114b88:	3324      	adds	r3, #36	; 0x24
 8114b8a:	881b      	ldrh	r3, [r3, #0]
 8114b8c:	2b00      	cmp	r3, #0
 8114b8e:	d117      	bne.n	8114bc0 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8114b90:	6839      	ldr	r1, [r7, #0]
 8114b92:	6878      	ldr	r0, [r7, #4]
 8114b94:	f000 fb96 	bl	81152c4 <USBD_CtlError>
                  break;
 8114b98:	e054      	b.n	8114c44 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8114b9a:	7bbb      	ldrb	r3, [r7, #14]
 8114b9c:	f003 020f 	and.w	r2, r3, #15
 8114ba0:	6879      	ldr	r1, [r7, #4]
 8114ba2:	4613      	mov	r3, r2
 8114ba4:	009b      	lsls	r3, r3, #2
 8114ba6:	4413      	add	r3, r2
 8114ba8:	009b      	lsls	r3, r3, #2
 8114baa:	440b      	add	r3, r1
 8114bac:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8114bb0:	881b      	ldrh	r3, [r3, #0]
 8114bb2:	2b00      	cmp	r3, #0
 8114bb4:	d104      	bne.n	8114bc0 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8114bb6:	6839      	ldr	r1, [r7, #0]
 8114bb8:	6878      	ldr	r0, [r7, #4]
 8114bba:	f000 fb83 	bl	81152c4 <USBD_CtlError>
                  break;
 8114bbe:	e041      	b.n	8114c44 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8114bc0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8114bc4:	2b00      	cmp	r3, #0
 8114bc6:	da0b      	bge.n	8114be0 <USBD_StdEPReq+0x23e>
 8114bc8:	7bbb      	ldrb	r3, [r7, #14]
 8114bca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8114bce:	4613      	mov	r3, r2
 8114bd0:	009b      	lsls	r3, r3, #2
 8114bd2:	4413      	add	r3, r2
 8114bd4:	009b      	lsls	r3, r3, #2
 8114bd6:	3310      	adds	r3, #16
 8114bd8:	687a      	ldr	r2, [r7, #4]
 8114bda:	4413      	add	r3, r2
 8114bdc:	3304      	adds	r3, #4
 8114bde:	e00b      	b.n	8114bf8 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8114be0:	7bbb      	ldrb	r3, [r7, #14]
 8114be2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8114be6:	4613      	mov	r3, r2
 8114be8:	009b      	lsls	r3, r3, #2
 8114bea:	4413      	add	r3, r2
 8114bec:	009b      	lsls	r3, r3, #2
 8114bee:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8114bf2:	687a      	ldr	r2, [r7, #4]
 8114bf4:	4413      	add	r3, r2
 8114bf6:	3304      	adds	r3, #4
 8114bf8:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8114bfa:	7bbb      	ldrb	r3, [r7, #14]
 8114bfc:	2b00      	cmp	r3, #0
 8114bfe:	d002      	beq.n	8114c06 <USBD_StdEPReq+0x264>
 8114c00:	7bbb      	ldrb	r3, [r7, #14]
 8114c02:	2b80      	cmp	r3, #128	; 0x80
 8114c04:	d103      	bne.n	8114c0e <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8114c06:	68bb      	ldr	r3, [r7, #8]
 8114c08:	2200      	movs	r2, #0
 8114c0a:	601a      	str	r2, [r3, #0]
 8114c0c:	e00e      	b.n	8114c2c <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8114c0e:	7bbb      	ldrb	r3, [r7, #14]
 8114c10:	4619      	mov	r1, r3
 8114c12:	6878      	ldr	r0, [r7, #4]
 8114c14:	f004 f882 	bl	8118d1c <USBD_LL_IsStallEP>
 8114c18:	4603      	mov	r3, r0
 8114c1a:	2b00      	cmp	r3, #0
 8114c1c:	d003      	beq.n	8114c26 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8114c1e:	68bb      	ldr	r3, [r7, #8]
 8114c20:	2201      	movs	r2, #1
 8114c22:	601a      	str	r2, [r3, #0]
 8114c24:	e002      	b.n	8114c2c <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8114c26:	68bb      	ldr	r3, [r7, #8]
 8114c28:	2200      	movs	r2, #0
 8114c2a:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8114c2c:	68bb      	ldr	r3, [r7, #8]
 8114c2e:	2202      	movs	r2, #2
 8114c30:	4619      	mov	r1, r3
 8114c32:	6878      	ldr	r0, [r7, #4]
 8114c34:	f000 fbb7 	bl	81153a6 <USBD_CtlSendData>
              break;
 8114c38:	e004      	b.n	8114c44 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8114c3a:	6839      	ldr	r1, [r7, #0]
 8114c3c:	6878      	ldr	r0, [r7, #4]
 8114c3e:	f000 fb41 	bl	81152c4 <USBD_CtlError>
              break;
 8114c42:	bf00      	nop
          }
          break;
 8114c44:	e004      	b.n	8114c50 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8114c46:	6839      	ldr	r1, [r7, #0]
 8114c48:	6878      	ldr	r0, [r7, #4]
 8114c4a:	f000 fb3b 	bl	81152c4 <USBD_CtlError>
          break;
 8114c4e:	bf00      	nop
      }
      break;
 8114c50:	e004      	b.n	8114c5c <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8114c52:	6839      	ldr	r1, [r7, #0]
 8114c54:	6878      	ldr	r0, [r7, #4]
 8114c56:	f000 fb35 	bl	81152c4 <USBD_CtlError>
      break;
 8114c5a:	bf00      	nop
  }

  return ret;
 8114c5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8114c5e:	4618      	mov	r0, r3
 8114c60:	3710      	adds	r7, #16
 8114c62:	46bd      	mov	sp, r7
 8114c64:	bd80      	pop	{r7, pc}
	...

08114c68 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8114c68:	b580      	push	{r7, lr}
 8114c6a:	b084      	sub	sp, #16
 8114c6c:	af00      	add	r7, sp, #0
 8114c6e:	6078      	str	r0, [r7, #4]
 8114c70:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8114c72:	2300      	movs	r3, #0
 8114c74:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8114c76:	2300      	movs	r3, #0
 8114c78:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8114c7a:	2300      	movs	r3, #0
 8114c7c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8114c7e:	683b      	ldr	r3, [r7, #0]
 8114c80:	885b      	ldrh	r3, [r3, #2]
 8114c82:	0a1b      	lsrs	r3, r3, #8
 8114c84:	b29b      	uxth	r3, r3
 8114c86:	3b01      	subs	r3, #1
 8114c88:	2b06      	cmp	r3, #6
 8114c8a:	f200 8128 	bhi.w	8114ede <USBD_GetDescriptor+0x276>
 8114c8e:	a201      	add	r2, pc, #4	; (adr r2, 8114c94 <USBD_GetDescriptor+0x2c>)
 8114c90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8114c94:	08114cb1 	.word	0x08114cb1
 8114c98:	08114cc9 	.word	0x08114cc9
 8114c9c:	08114d09 	.word	0x08114d09
 8114ca0:	08114edf 	.word	0x08114edf
 8114ca4:	08114edf 	.word	0x08114edf
 8114ca8:	08114e7f 	.word	0x08114e7f
 8114cac:	08114eab 	.word	0x08114eab
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8114cb0:	687b      	ldr	r3, [r7, #4]
 8114cb2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8114cb6:	681b      	ldr	r3, [r3, #0]
 8114cb8:	687a      	ldr	r2, [r7, #4]
 8114cba:	7c12      	ldrb	r2, [r2, #16]
 8114cbc:	f107 0108 	add.w	r1, r7, #8
 8114cc0:	4610      	mov	r0, r2
 8114cc2:	4798      	blx	r3
 8114cc4:	60f8      	str	r0, [r7, #12]
      break;
 8114cc6:	e112      	b.n	8114eee <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8114cc8:	687b      	ldr	r3, [r7, #4]
 8114cca:	7c1b      	ldrb	r3, [r3, #16]
 8114ccc:	2b00      	cmp	r3, #0
 8114cce:	d10d      	bne.n	8114cec <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8114cd0:	687b      	ldr	r3, [r7, #4]
 8114cd2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8114cd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8114cd8:	f107 0208 	add.w	r2, r7, #8
 8114cdc:	4610      	mov	r0, r2
 8114cde:	4798      	blx	r3
 8114ce0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8114ce2:	68fb      	ldr	r3, [r7, #12]
 8114ce4:	3301      	adds	r3, #1
 8114ce6:	2202      	movs	r2, #2
 8114ce8:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8114cea:	e100      	b.n	8114eee <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8114cec:	687b      	ldr	r3, [r7, #4]
 8114cee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8114cf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8114cf4:	f107 0208 	add.w	r2, r7, #8
 8114cf8:	4610      	mov	r0, r2
 8114cfa:	4798      	blx	r3
 8114cfc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8114cfe:	68fb      	ldr	r3, [r7, #12]
 8114d00:	3301      	adds	r3, #1
 8114d02:	2202      	movs	r2, #2
 8114d04:	701a      	strb	r2, [r3, #0]
      break;
 8114d06:	e0f2      	b.n	8114eee <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8114d08:	683b      	ldr	r3, [r7, #0]
 8114d0a:	885b      	ldrh	r3, [r3, #2]
 8114d0c:	b2db      	uxtb	r3, r3
 8114d0e:	2b05      	cmp	r3, #5
 8114d10:	f200 80ac 	bhi.w	8114e6c <USBD_GetDescriptor+0x204>
 8114d14:	a201      	add	r2, pc, #4	; (adr r2, 8114d1c <USBD_GetDescriptor+0xb4>)
 8114d16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8114d1a:	bf00      	nop
 8114d1c:	08114d35 	.word	0x08114d35
 8114d20:	08114d69 	.word	0x08114d69
 8114d24:	08114d9d 	.word	0x08114d9d
 8114d28:	08114dd1 	.word	0x08114dd1
 8114d2c:	08114e05 	.word	0x08114e05
 8114d30:	08114e39 	.word	0x08114e39
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8114d34:	687b      	ldr	r3, [r7, #4]
 8114d36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8114d3a:	685b      	ldr	r3, [r3, #4]
 8114d3c:	2b00      	cmp	r3, #0
 8114d3e:	d00b      	beq.n	8114d58 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8114d40:	687b      	ldr	r3, [r7, #4]
 8114d42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8114d46:	685b      	ldr	r3, [r3, #4]
 8114d48:	687a      	ldr	r2, [r7, #4]
 8114d4a:	7c12      	ldrb	r2, [r2, #16]
 8114d4c:	f107 0108 	add.w	r1, r7, #8
 8114d50:	4610      	mov	r0, r2
 8114d52:	4798      	blx	r3
 8114d54:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8114d56:	e091      	b.n	8114e7c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8114d58:	6839      	ldr	r1, [r7, #0]
 8114d5a:	6878      	ldr	r0, [r7, #4]
 8114d5c:	f000 fab2 	bl	81152c4 <USBD_CtlError>
            err++;
 8114d60:	7afb      	ldrb	r3, [r7, #11]
 8114d62:	3301      	adds	r3, #1
 8114d64:	72fb      	strb	r3, [r7, #11]
          break;
 8114d66:	e089      	b.n	8114e7c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8114d68:	687b      	ldr	r3, [r7, #4]
 8114d6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8114d6e:	689b      	ldr	r3, [r3, #8]
 8114d70:	2b00      	cmp	r3, #0
 8114d72:	d00b      	beq.n	8114d8c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8114d74:	687b      	ldr	r3, [r7, #4]
 8114d76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8114d7a:	689b      	ldr	r3, [r3, #8]
 8114d7c:	687a      	ldr	r2, [r7, #4]
 8114d7e:	7c12      	ldrb	r2, [r2, #16]
 8114d80:	f107 0108 	add.w	r1, r7, #8
 8114d84:	4610      	mov	r0, r2
 8114d86:	4798      	blx	r3
 8114d88:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8114d8a:	e077      	b.n	8114e7c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8114d8c:	6839      	ldr	r1, [r7, #0]
 8114d8e:	6878      	ldr	r0, [r7, #4]
 8114d90:	f000 fa98 	bl	81152c4 <USBD_CtlError>
            err++;
 8114d94:	7afb      	ldrb	r3, [r7, #11]
 8114d96:	3301      	adds	r3, #1
 8114d98:	72fb      	strb	r3, [r7, #11]
          break;
 8114d9a:	e06f      	b.n	8114e7c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8114d9c:	687b      	ldr	r3, [r7, #4]
 8114d9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8114da2:	68db      	ldr	r3, [r3, #12]
 8114da4:	2b00      	cmp	r3, #0
 8114da6:	d00b      	beq.n	8114dc0 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8114da8:	687b      	ldr	r3, [r7, #4]
 8114daa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8114dae:	68db      	ldr	r3, [r3, #12]
 8114db0:	687a      	ldr	r2, [r7, #4]
 8114db2:	7c12      	ldrb	r2, [r2, #16]
 8114db4:	f107 0108 	add.w	r1, r7, #8
 8114db8:	4610      	mov	r0, r2
 8114dba:	4798      	blx	r3
 8114dbc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8114dbe:	e05d      	b.n	8114e7c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8114dc0:	6839      	ldr	r1, [r7, #0]
 8114dc2:	6878      	ldr	r0, [r7, #4]
 8114dc4:	f000 fa7e 	bl	81152c4 <USBD_CtlError>
            err++;
 8114dc8:	7afb      	ldrb	r3, [r7, #11]
 8114dca:	3301      	adds	r3, #1
 8114dcc:	72fb      	strb	r3, [r7, #11]
          break;
 8114dce:	e055      	b.n	8114e7c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8114dd0:	687b      	ldr	r3, [r7, #4]
 8114dd2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8114dd6:	691b      	ldr	r3, [r3, #16]
 8114dd8:	2b00      	cmp	r3, #0
 8114dda:	d00b      	beq.n	8114df4 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8114ddc:	687b      	ldr	r3, [r7, #4]
 8114dde:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8114de2:	691b      	ldr	r3, [r3, #16]
 8114de4:	687a      	ldr	r2, [r7, #4]
 8114de6:	7c12      	ldrb	r2, [r2, #16]
 8114de8:	f107 0108 	add.w	r1, r7, #8
 8114dec:	4610      	mov	r0, r2
 8114dee:	4798      	blx	r3
 8114df0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8114df2:	e043      	b.n	8114e7c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8114df4:	6839      	ldr	r1, [r7, #0]
 8114df6:	6878      	ldr	r0, [r7, #4]
 8114df8:	f000 fa64 	bl	81152c4 <USBD_CtlError>
            err++;
 8114dfc:	7afb      	ldrb	r3, [r7, #11]
 8114dfe:	3301      	adds	r3, #1
 8114e00:	72fb      	strb	r3, [r7, #11]
          break;
 8114e02:	e03b      	b.n	8114e7c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8114e04:	687b      	ldr	r3, [r7, #4]
 8114e06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8114e0a:	695b      	ldr	r3, [r3, #20]
 8114e0c:	2b00      	cmp	r3, #0
 8114e0e:	d00b      	beq.n	8114e28 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8114e10:	687b      	ldr	r3, [r7, #4]
 8114e12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8114e16:	695b      	ldr	r3, [r3, #20]
 8114e18:	687a      	ldr	r2, [r7, #4]
 8114e1a:	7c12      	ldrb	r2, [r2, #16]
 8114e1c:	f107 0108 	add.w	r1, r7, #8
 8114e20:	4610      	mov	r0, r2
 8114e22:	4798      	blx	r3
 8114e24:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8114e26:	e029      	b.n	8114e7c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8114e28:	6839      	ldr	r1, [r7, #0]
 8114e2a:	6878      	ldr	r0, [r7, #4]
 8114e2c:	f000 fa4a 	bl	81152c4 <USBD_CtlError>
            err++;
 8114e30:	7afb      	ldrb	r3, [r7, #11]
 8114e32:	3301      	adds	r3, #1
 8114e34:	72fb      	strb	r3, [r7, #11]
          break;
 8114e36:	e021      	b.n	8114e7c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8114e38:	687b      	ldr	r3, [r7, #4]
 8114e3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8114e3e:	699b      	ldr	r3, [r3, #24]
 8114e40:	2b00      	cmp	r3, #0
 8114e42:	d00b      	beq.n	8114e5c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8114e44:	687b      	ldr	r3, [r7, #4]
 8114e46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8114e4a:	699b      	ldr	r3, [r3, #24]
 8114e4c:	687a      	ldr	r2, [r7, #4]
 8114e4e:	7c12      	ldrb	r2, [r2, #16]
 8114e50:	f107 0108 	add.w	r1, r7, #8
 8114e54:	4610      	mov	r0, r2
 8114e56:	4798      	blx	r3
 8114e58:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8114e5a:	e00f      	b.n	8114e7c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8114e5c:	6839      	ldr	r1, [r7, #0]
 8114e5e:	6878      	ldr	r0, [r7, #4]
 8114e60:	f000 fa30 	bl	81152c4 <USBD_CtlError>
            err++;
 8114e64:	7afb      	ldrb	r3, [r7, #11]
 8114e66:	3301      	adds	r3, #1
 8114e68:	72fb      	strb	r3, [r7, #11]
          break;
 8114e6a:	e007      	b.n	8114e7c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8114e6c:	6839      	ldr	r1, [r7, #0]
 8114e6e:	6878      	ldr	r0, [r7, #4]
 8114e70:	f000 fa28 	bl	81152c4 <USBD_CtlError>
          err++;
 8114e74:	7afb      	ldrb	r3, [r7, #11]
 8114e76:	3301      	adds	r3, #1
 8114e78:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8114e7a:	bf00      	nop
      }
      break;
 8114e7c:	e037      	b.n	8114eee <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8114e7e:	687b      	ldr	r3, [r7, #4]
 8114e80:	7c1b      	ldrb	r3, [r3, #16]
 8114e82:	2b00      	cmp	r3, #0
 8114e84:	d109      	bne.n	8114e9a <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8114e86:	687b      	ldr	r3, [r7, #4]
 8114e88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8114e8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8114e8e:	f107 0208 	add.w	r2, r7, #8
 8114e92:	4610      	mov	r0, r2
 8114e94:	4798      	blx	r3
 8114e96:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8114e98:	e029      	b.n	8114eee <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8114e9a:	6839      	ldr	r1, [r7, #0]
 8114e9c:	6878      	ldr	r0, [r7, #4]
 8114e9e:	f000 fa11 	bl	81152c4 <USBD_CtlError>
        err++;
 8114ea2:	7afb      	ldrb	r3, [r7, #11]
 8114ea4:	3301      	adds	r3, #1
 8114ea6:	72fb      	strb	r3, [r7, #11]
      break;
 8114ea8:	e021      	b.n	8114eee <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8114eaa:	687b      	ldr	r3, [r7, #4]
 8114eac:	7c1b      	ldrb	r3, [r3, #16]
 8114eae:	2b00      	cmp	r3, #0
 8114eb0:	d10d      	bne.n	8114ece <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8114eb2:	687b      	ldr	r3, [r7, #4]
 8114eb4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8114eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8114eba:	f107 0208 	add.w	r2, r7, #8
 8114ebe:	4610      	mov	r0, r2
 8114ec0:	4798      	blx	r3
 8114ec2:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8114ec4:	68fb      	ldr	r3, [r7, #12]
 8114ec6:	3301      	adds	r3, #1
 8114ec8:	2207      	movs	r2, #7
 8114eca:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8114ecc:	e00f      	b.n	8114eee <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8114ece:	6839      	ldr	r1, [r7, #0]
 8114ed0:	6878      	ldr	r0, [r7, #4]
 8114ed2:	f000 f9f7 	bl	81152c4 <USBD_CtlError>
        err++;
 8114ed6:	7afb      	ldrb	r3, [r7, #11]
 8114ed8:	3301      	adds	r3, #1
 8114eda:	72fb      	strb	r3, [r7, #11]
      break;
 8114edc:	e007      	b.n	8114eee <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8114ede:	6839      	ldr	r1, [r7, #0]
 8114ee0:	6878      	ldr	r0, [r7, #4]
 8114ee2:	f000 f9ef 	bl	81152c4 <USBD_CtlError>
      err++;
 8114ee6:	7afb      	ldrb	r3, [r7, #11]
 8114ee8:	3301      	adds	r3, #1
 8114eea:	72fb      	strb	r3, [r7, #11]
      break;
 8114eec:	bf00      	nop
  }

  if (err != 0U)
 8114eee:	7afb      	ldrb	r3, [r7, #11]
 8114ef0:	2b00      	cmp	r3, #0
 8114ef2:	d11e      	bne.n	8114f32 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8114ef4:	683b      	ldr	r3, [r7, #0]
 8114ef6:	88db      	ldrh	r3, [r3, #6]
 8114ef8:	2b00      	cmp	r3, #0
 8114efa:	d016      	beq.n	8114f2a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8114efc:	893b      	ldrh	r3, [r7, #8]
 8114efe:	2b00      	cmp	r3, #0
 8114f00:	d00e      	beq.n	8114f20 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8114f02:	683b      	ldr	r3, [r7, #0]
 8114f04:	88da      	ldrh	r2, [r3, #6]
 8114f06:	893b      	ldrh	r3, [r7, #8]
 8114f08:	4293      	cmp	r3, r2
 8114f0a:	bf28      	it	cs
 8114f0c:	4613      	movcs	r3, r2
 8114f0e:	b29b      	uxth	r3, r3
 8114f10:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8114f12:	893b      	ldrh	r3, [r7, #8]
 8114f14:	461a      	mov	r2, r3
 8114f16:	68f9      	ldr	r1, [r7, #12]
 8114f18:	6878      	ldr	r0, [r7, #4]
 8114f1a:	f000 fa44 	bl	81153a6 <USBD_CtlSendData>
 8114f1e:	e009      	b.n	8114f34 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8114f20:	6839      	ldr	r1, [r7, #0]
 8114f22:	6878      	ldr	r0, [r7, #4]
 8114f24:	f000 f9ce 	bl	81152c4 <USBD_CtlError>
 8114f28:	e004      	b.n	8114f34 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8114f2a:	6878      	ldr	r0, [r7, #4]
 8114f2c:	f000 fa95 	bl	811545a <USBD_CtlSendStatus>
 8114f30:	e000      	b.n	8114f34 <USBD_GetDescriptor+0x2cc>
    return;
 8114f32:	bf00      	nop
  }
}
 8114f34:	3710      	adds	r7, #16
 8114f36:	46bd      	mov	sp, r7
 8114f38:	bd80      	pop	{r7, pc}
 8114f3a:	bf00      	nop

08114f3c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8114f3c:	b580      	push	{r7, lr}
 8114f3e:	b084      	sub	sp, #16
 8114f40:	af00      	add	r7, sp, #0
 8114f42:	6078      	str	r0, [r7, #4]
 8114f44:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8114f46:	683b      	ldr	r3, [r7, #0]
 8114f48:	889b      	ldrh	r3, [r3, #4]
 8114f4a:	2b00      	cmp	r3, #0
 8114f4c:	d131      	bne.n	8114fb2 <USBD_SetAddress+0x76>
 8114f4e:	683b      	ldr	r3, [r7, #0]
 8114f50:	88db      	ldrh	r3, [r3, #6]
 8114f52:	2b00      	cmp	r3, #0
 8114f54:	d12d      	bne.n	8114fb2 <USBD_SetAddress+0x76>
 8114f56:	683b      	ldr	r3, [r7, #0]
 8114f58:	885b      	ldrh	r3, [r3, #2]
 8114f5a:	2b7f      	cmp	r3, #127	; 0x7f
 8114f5c:	d829      	bhi.n	8114fb2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8114f5e:	683b      	ldr	r3, [r7, #0]
 8114f60:	885b      	ldrh	r3, [r3, #2]
 8114f62:	b2db      	uxtb	r3, r3
 8114f64:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8114f68:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8114f6a:	687b      	ldr	r3, [r7, #4]
 8114f6c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8114f70:	b2db      	uxtb	r3, r3
 8114f72:	2b03      	cmp	r3, #3
 8114f74:	d104      	bne.n	8114f80 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8114f76:	6839      	ldr	r1, [r7, #0]
 8114f78:	6878      	ldr	r0, [r7, #4]
 8114f7a:	f000 f9a3 	bl	81152c4 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8114f7e:	e01d      	b.n	8114fbc <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8114f80:	687b      	ldr	r3, [r7, #4]
 8114f82:	7bfa      	ldrb	r2, [r7, #15]
 8114f84:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8114f88:	7bfb      	ldrb	r3, [r7, #15]
 8114f8a:	4619      	mov	r1, r3
 8114f8c:	6878      	ldr	r0, [r7, #4]
 8114f8e:	f003 fef1 	bl	8118d74 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8114f92:	6878      	ldr	r0, [r7, #4]
 8114f94:	f000 fa61 	bl	811545a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8114f98:	7bfb      	ldrb	r3, [r7, #15]
 8114f9a:	2b00      	cmp	r3, #0
 8114f9c:	d004      	beq.n	8114fa8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8114f9e:	687b      	ldr	r3, [r7, #4]
 8114fa0:	2202      	movs	r2, #2
 8114fa2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8114fa6:	e009      	b.n	8114fbc <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8114fa8:	687b      	ldr	r3, [r7, #4]
 8114faa:	2201      	movs	r2, #1
 8114fac:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8114fb0:	e004      	b.n	8114fbc <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8114fb2:	6839      	ldr	r1, [r7, #0]
 8114fb4:	6878      	ldr	r0, [r7, #4]
 8114fb6:	f000 f985 	bl	81152c4 <USBD_CtlError>
  }
}
 8114fba:	bf00      	nop
 8114fbc:	bf00      	nop
 8114fbe:	3710      	adds	r7, #16
 8114fc0:	46bd      	mov	sp, r7
 8114fc2:	bd80      	pop	{r7, pc}

08114fc4 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8114fc4:	b580      	push	{r7, lr}
 8114fc6:	b084      	sub	sp, #16
 8114fc8:	af00      	add	r7, sp, #0
 8114fca:	6078      	str	r0, [r7, #4]
 8114fcc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8114fce:	2300      	movs	r3, #0
 8114fd0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8114fd2:	683b      	ldr	r3, [r7, #0]
 8114fd4:	885b      	ldrh	r3, [r3, #2]
 8114fd6:	b2da      	uxtb	r2, r3
 8114fd8:	4b4c      	ldr	r3, [pc, #304]	; (811510c <USBD_SetConfig+0x148>)
 8114fda:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8114fdc:	4b4b      	ldr	r3, [pc, #300]	; (811510c <USBD_SetConfig+0x148>)
 8114fde:	781b      	ldrb	r3, [r3, #0]
 8114fe0:	2b01      	cmp	r3, #1
 8114fe2:	d905      	bls.n	8114ff0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8114fe4:	6839      	ldr	r1, [r7, #0]
 8114fe6:	6878      	ldr	r0, [r7, #4]
 8114fe8:	f000 f96c 	bl	81152c4 <USBD_CtlError>
    return USBD_FAIL;
 8114fec:	2303      	movs	r3, #3
 8114fee:	e088      	b.n	8115102 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8114ff0:	687b      	ldr	r3, [r7, #4]
 8114ff2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8114ff6:	b2db      	uxtb	r3, r3
 8114ff8:	2b02      	cmp	r3, #2
 8114ffa:	d002      	beq.n	8115002 <USBD_SetConfig+0x3e>
 8114ffc:	2b03      	cmp	r3, #3
 8114ffe:	d025      	beq.n	811504c <USBD_SetConfig+0x88>
 8115000:	e071      	b.n	81150e6 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8115002:	4b42      	ldr	r3, [pc, #264]	; (811510c <USBD_SetConfig+0x148>)
 8115004:	781b      	ldrb	r3, [r3, #0]
 8115006:	2b00      	cmp	r3, #0
 8115008:	d01c      	beq.n	8115044 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 811500a:	4b40      	ldr	r3, [pc, #256]	; (811510c <USBD_SetConfig+0x148>)
 811500c:	781b      	ldrb	r3, [r3, #0]
 811500e:	461a      	mov	r2, r3
 8115010:	687b      	ldr	r3, [r7, #4]
 8115012:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8115014:	4b3d      	ldr	r3, [pc, #244]	; (811510c <USBD_SetConfig+0x148>)
 8115016:	781b      	ldrb	r3, [r3, #0]
 8115018:	4619      	mov	r1, r3
 811501a:	6878      	ldr	r0, [r7, #4]
 811501c:	f7ff f948 	bl	81142b0 <USBD_SetClassConfig>
 8115020:	4603      	mov	r3, r0
 8115022:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8115024:	7bfb      	ldrb	r3, [r7, #15]
 8115026:	2b00      	cmp	r3, #0
 8115028:	d004      	beq.n	8115034 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 811502a:	6839      	ldr	r1, [r7, #0]
 811502c:	6878      	ldr	r0, [r7, #4]
 811502e:	f000 f949 	bl	81152c4 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8115032:	e065      	b.n	8115100 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8115034:	6878      	ldr	r0, [r7, #4]
 8115036:	f000 fa10 	bl	811545a <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 811503a:	687b      	ldr	r3, [r7, #4]
 811503c:	2203      	movs	r2, #3
 811503e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8115042:	e05d      	b.n	8115100 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8115044:	6878      	ldr	r0, [r7, #4]
 8115046:	f000 fa08 	bl	811545a <USBD_CtlSendStatus>
      break;
 811504a:	e059      	b.n	8115100 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 811504c:	4b2f      	ldr	r3, [pc, #188]	; (811510c <USBD_SetConfig+0x148>)
 811504e:	781b      	ldrb	r3, [r3, #0]
 8115050:	2b00      	cmp	r3, #0
 8115052:	d112      	bne.n	811507a <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8115054:	687b      	ldr	r3, [r7, #4]
 8115056:	2202      	movs	r2, #2
 8115058:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 811505c:	4b2b      	ldr	r3, [pc, #172]	; (811510c <USBD_SetConfig+0x148>)
 811505e:	781b      	ldrb	r3, [r3, #0]
 8115060:	461a      	mov	r2, r3
 8115062:	687b      	ldr	r3, [r7, #4]
 8115064:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8115066:	4b29      	ldr	r3, [pc, #164]	; (811510c <USBD_SetConfig+0x148>)
 8115068:	781b      	ldrb	r3, [r3, #0]
 811506a:	4619      	mov	r1, r3
 811506c:	6878      	ldr	r0, [r7, #4]
 811506e:	f7ff f93b 	bl	81142e8 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8115072:	6878      	ldr	r0, [r7, #4]
 8115074:	f000 f9f1 	bl	811545a <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8115078:	e042      	b.n	8115100 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 811507a:	4b24      	ldr	r3, [pc, #144]	; (811510c <USBD_SetConfig+0x148>)
 811507c:	781b      	ldrb	r3, [r3, #0]
 811507e:	461a      	mov	r2, r3
 8115080:	687b      	ldr	r3, [r7, #4]
 8115082:	685b      	ldr	r3, [r3, #4]
 8115084:	429a      	cmp	r2, r3
 8115086:	d02a      	beq.n	81150de <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8115088:	687b      	ldr	r3, [r7, #4]
 811508a:	685b      	ldr	r3, [r3, #4]
 811508c:	b2db      	uxtb	r3, r3
 811508e:	4619      	mov	r1, r3
 8115090:	6878      	ldr	r0, [r7, #4]
 8115092:	f7ff f929 	bl	81142e8 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8115096:	4b1d      	ldr	r3, [pc, #116]	; (811510c <USBD_SetConfig+0x148>)
 8115098:	781b      	ldrb	r3, [r3, #0]
 811509a:	461a      	mov	r2, r3
 811509c:	687b      	ldr	r3, [r7, #4]
 811509e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 81150a0:	4b1a      	ldr	r3, [pc, #104]	; (811510c <USBD_SetConfig+0x148>)
 81150a2:	781b      	ldrb	r3, [r3, #0]
 81150a4:	4619      	mov	r1, r3
 81150a6:	6878      	ldr	r0, [r7, #4]
 81150a8:	f7ff f902 	bl	81142b0 <USBD_SetClassConfig>
 81150ac:	4603      	mov	r3, r0
 81150ae:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 81150b0:	7bfb      	ldrb	r3, [r7, #15]
 81150b2:	2b00      	cmp	r3, #0
 81150b4:	d00f      	beq.n	81150d6 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 81150b6:	6839      	ldr	r1, [r7, #0]
 81150b8:	6878      	ldr	r0, [r7, #4]
 81150ba:	f000 f903 	bl	81152c4 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 81150be:	687b      	ldr	r3, [r7, #4]
 81150c0:	685b      	ldr	r3, [r3, #4]
 81150c2:	b2db      	uxtb	r3, r3
 81150c4:	4619      	mov	r1, r3
 81150c6:	6878      	ldr	r0, [r7, #4]
 81150c8:	f7ff f90e 	bl	81142e8 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 81150cc:	687b      	ldr	r3, [r7, #4]
 81150ce:	2202      	movs	r2, #2
 81150d0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 81150d4:	e014      	b.n	8115100 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 81150d6:	6878      	ldr	r0, [r7, #4]
 81150d8:	f000 f9bf 	bl	811545a <USBD_CtlSendStatus>
      break;
 81150dc:	e010      	b.n	8115100 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 81150de:	6878      	ldr	r0, [r7, #4]
 81150e0:	f000 f9bb 	bl	811545a <USBD_CtlSendStatus>
      break;
 81150e4:	e00c      	b.n	8115100 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 81150e6:	6839      	ldr	r1, [r7, #0]
 81150e8:	6878      	ldr	r0, [r7, #4]
 81150ea:	f000 f8eb 	bl	81152c4 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 81150ee:	4b07      	ldr	r3, [pc, #28]	; (811510c <USBD_SetConfig+0x148>)
 81150f0:	781b      	ldrb	r3, [r3, #0]
 81150f2:	4619      	mov	r1, r3
 81150f4:	6878      	ldr	r0, [r7, #4]
 81150f6:	f7ff f8f7 	bl	81142e8 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 81150fa:	2303      	movs	r3, #3
 81150fc:	73fb      	strb	r3, [r7, #15]
      break;
 81150fe:	bf00      	nop
  }

  return ret;
 8115100:	7bfb      	ldrb	r3, [r7, #15]
}
 8115102:	4618      	mov	r0, r3
 8115104:	3710      	adds	r7, #16
 8115106:	46bd      	mov	sp, r7
 8115108:	bd80      	pop	{r7, pc}
 811510a:	bf00      	nop
 811510c:	10000388 	.word	0x10000388

08115110 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8115110:	b580      	push	{r7, lr}
 8115112:	b082      	sub	sp, #8
 8115114:	af00      	add	r7, sp, #0
 8115116:	6078      	str	r0, [r7, #4]
 8115118:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 811511a:	683b      	ldr	r3, [r7, #0]
 811511c:	88db      	ldrh	r3, [r3, #6]
 811511e:	2b01      	cmp	r3, #1
 8115120:	d004      	beq.n	811512c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8115122:	6839      	ldr	r1, [r7, #0]
 8115124:	6878      	ldr	r0, [r7, #4]
 8115126:	f000 f8cd 	bl	81152c4 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 811512a:	e023      	b.n	8115174 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 811512c:	687b      	ldr	r3, [r7, #4]
 811512e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8115132:	b2db      	uxtb	r3, r3
 8115134:	2b02      	cmp	r3, #2
 8115136:	dc02      	bgt.n	811513e <USBD_GetConfig+0x2e>
 8115138:	2b00      	cmp	r3, #0
 811513a:	dc03      	bgt.n	8115144 <USBD_GetConfig+0x34>
 811513c:	e015      	b.n	811516a <USBD_GetConfig+0x5a>
 811513e:	2b03      	cmp	r3, #3
 8115140:	d00b      	beq.n	811515a <USBD_GetConfig+0x4a>
 8115142:	e012      	b.n	811516a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8115144:	687b      	ldr	r3, [r7, #4]
 8115146:	2200      	movs	r2, #0
 8115148:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 811514a:	687b      	ldr	r3, [r7, #4]
 811514c:	3308      	adds	r3, #8
 811514e:	2201      	movs	r2, #1
 8115150:	4619      	mov	r1, r3
 8115152:	6878      	ldr	r0, [r7, #4]
 8115154:	f000 f927 	bl	81153a6 <USBD_CtlSendData>
        break;
 8115158:	e00c      	b.n	8115174 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 811515a:	687b      	ldr	r3, [r7, #4]
 811515c:	3304      	adds	r3, #4
 811515e:	2201      	movs	r2, #1
 8115160:	4619      	mov	r1, r3
 8115162:	6878      	ldr	r0, [r7, #4]
 8115164:	f000 f91f 	bl	81153a6 <USBD_CtlSendData>
        break;
 8115168:	e004      	b.n	8115174 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 811516a:	6839      	ldr	r1, [r7, #0]
 811516c:	6878      	ldr	r0, [r7, #4]
 811516e:	f000 f8a9 	bl	81152c4 <USBD_CtlError>
        break;
 8115172:	bf00      	nop
}
 8115174:	bf00      	nop
 8115176:	3708      	adds	r7, #8
 8115178:	46bd      	mov	sp, r7
 811517a:	bd80      	pop	{r7, pc}

0811517c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 811517c:	b580      	push	{r7, lr}
 811517e:	b082      	sub	sp, #8
 8115180:	af00      	add	r7, sp, #0
 8115182:	6078      	str	r0, [r7, #4]
 8115184:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8115186:	687b      	ldr	r3, [r7, #4]
 8115188:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 811518c:	b2db      	uxtb	r3, r3
 811518e:	3b01      	subs	r3, #1
 8115190:	2b02      	cmp	r3, #2
 8115192:	d81e      	bhi.n	81151d2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8115194:	683b      	ldr	r3, [r7, #0]
 8115196:	88db      	ldrh	r3, [r3, #6]
 8115198:	2b02      	cmp	r3, #2
 811519a:	d004      	beq.n	81151a6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 811519c:	6839      	ldr	r1, [r7, #0]
 811519e:	6878      	ldr	r0, [r7, #4]
 81151a0:	f000 f890 	bl	81152c4 <USBD_CtlError>
        break;
 81151a4:	e01a      	b.n	81151dc <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 81151a6:	687b      	ldr	r3, [r7, #4]
 81151a8:	2201      	movs	r2, #1
 81151aa:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 81151ac:	687b      	ldr	r3, [r7, #4]
 81151ae:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 81151b2:	2b00      	cmp	r3, #0
 81151b4:	d005      	beq.n	81151c2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 81151b6:	687b      	ldr	r3, [r7, #4]
 81151b8:	68db      	ldr	r3, [r3, #12]
 81151ba:	f043 0202 	orr.w	r2, r3, #2
 81151be:	687b      	ldr	r3, [r7, #4]
 81151c0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 81151c2:	687b      	ldr	r3, [r7, #4]
 81151c4:	330c      	adds	r3, #12
 81151c6:	2202      	movs	r2, #2
 81151c8:	4619      	mov	r1, r3
 81151ca:	6878      	ldr	r0, [r7, #4]
 81151cc:	f000 f8eb 	bl	81153a6 <USBD_CtlSendData>
      break;
 81151d0:	e004      	b.n	81151dc <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 81151d2:	6839      	ldr	r1, [r7, #0]
 81151d4:	6878      	ldr	r0, [r7, #4]
 81151d6:	f000 f875 	bl	81152c4 <USBD_CtlError>
      break;
 81151da:	bf00      	nop
  }
}
 81151dc:	bf00      	nop
 81151de:	3708      	adds	r7, #8
 81151e0:	46bd      	mov	sp, r7
 81151e2:	bd80      	pop	{r7, pc}

081151e4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 81151e4:	b580      	push	{r7, lr}
 81151e6:	b082      	sub	sp, #8
 81151e8:	af00      	add	r7, sp, #0
 81151ea:	6078      	str	r0, [r7, #4]
 81151ec:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 81151ee:	683b      	ldr	r3, [r7, #0]
 81151f0:	885b      	ldrh	r3, [r3, #2]
 81151f2:	2b01      	cmp	r3, #1
 81151f4:	d106      	bne.n	8115204 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 81151f6:	687b      	ldr	r3, [r7, #4]
 81151f8:	2201      	movs	r2, #1
 81151fa:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 81151fe:	6878      	ldr	r0, [r7, #4]
 8115200:	f000 f92b 	bl	811545a <USBD_CtlSendStatus>
  }
}
 8115204:	bf00      	nop
 8115206:	3708      	adds	r7, #8
 8115208:	46bd      	mov	sp, r7
 811520a:	bd80      	pop	{r7, pc}

0811520c <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 811520c:	b580      	push	{r7, lr}
 811520e:	b082      	sub	sp, #8
 8115210:	af00      	add	r7, sp, #0
 8115212:	6078      	str	r0, [r7, #4]
 8115214:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8115216:	687b      	ldr	r3, [r7, #4]
 8115218:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 811521c:	b2db      	uxtb	r3, r3
 811521e:	3b01      	subs	r3, #1
 8115220:	2b02      	cmp	r3, #2
 8115222:	d80b      	bhi.n	811523c <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8115224:	683b      	ldr	r3, [r7, #0]
 8115226:	885b      	ldrh	r3, [r3, #2]
 8115228:	2b01      	cmp	r3, #1
 811522a:	d10c      	bne.n	8115246 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 811522c:	687b      	ldr	r3, [r7, #4]
 811522e:	2200      	movs	r2, #0
 8115230:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8115234:	6878      	ldr	r0, [r7, #4]
 8115236:	f000 f910 	bl	811545a <USBD_CtlSendStatus>
      }
      break;
 811523a:	e004      	b.n	8115246 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 811523c:	6839      	ldr	r1, [r7, #0]
 811523e:	6878      	ldr	r0, [r7, #4]
 8115240:	f000 f840 	bl	81152c4 <USBD_CtlError>
      break;
 8115244:	e000      	b.n	8115248 <USBD_ClrFeature+0x3c>
      break;
 8115246:	bf00      	nop
  }
}
 8115248:	bf00      	nop
 811524a:	3708      	adds	r7, #8
 811524c:	46bd      	mov	sp, r7
 811524e:	bd80      	pop	{r7, pc}

08115250 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8115250:	b580      	push	{r7, lr}
 8115252:	b084      	sub	sp, #16
 8115254:	af00      	add	r7, sp, #0
 8115256:	6078      	str	r0, [r7, #4]
 8115258:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 811525a:	683b      	ldr	r3, [r7, #0]
 811525c:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 811525e:	68fb      	ldr	r3, [r7, #12]
 8115260:	781a      	ldrb	r2, [r3, #0]
 8115262:	687b      	ldr	r3, [r7, #4]
 8115264:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8115266:	68fb      	ldr	r3, [r7, #12]
 8115268:	3301      	adds	r3, #1
 811526a:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 811526c:	68fb      	ldr	r3, [r7, #12]
 811526e:	781a      	ldrb	r2, [r3, #0]
 8115270:	687b      	ldr	r3, [r7, #4]
 8115272:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8115274:	68fb      	ldr	r3, [r7, #12]
 8115276:	3301      	adds	r3, #1
 8115278:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 811527a:	68f8      	ldr	r0, [r7, #12]
 811527c:	f7ff fabb 	bl	81147f6 <SWAPBYTE>
 8115280:	4603      	mov	r3, r0
 8115282:	461a      	mov	r2, r3
 8115284:	687b      	ldr	r3, [r7, #4]
 8115286:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8115288:	68fb      	ldr	r3, [r7, #12]
 811528a:	3301      	adds	r3, #1
 811528c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 811528e:	68fb      	ldr	r3, [r7, #12]
 8115290:	3301      	adds	r3, #1
 8115292:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8115294:	68f8      	ldr	r0, [r7, #12]
 8115296:	f7ff faae 	bl	81147f6 <SWAPBYTE>
 811529a:	4603      	mov	r3, r0
 811529c:	461a      	mov	r2, r3
 811529e:	687b      	ldr	r3, [r7, #4]
 81152a0:	809a      	strh	r2, [r3, #4]

  pbuff++;
 81152a2:	68fb      	ldr	r3, [r7, #12]
 81152a4:	3301      	adds	r3, #1
 81152a6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 81152a8:	68fb      	ldr	r3, [r7, #12]
 81152aa:	3301      	adds	r3, #1
 81152ac:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 81152ae:	68f8      	ldr	r0, [r7, #12]
 81152b0:	f7ff faa1 	bl	81147f6 <SWAPBYTE>
 81152b4:	4603      	mov	r3, r0
 81152b6:	461a      	mov	r2, r3
 81152b8:	687b      	ldr	r3, [r7, #4]
 81152ba:	80da      	strh	r2, [r3, #6]
}
 81152bc:	bf00      	nop
 81152be:	3710      	adds	r7, #16
 81152c0:	46bd      	mov	sp, r7
 81152c2:	bd80      	pop	{r7, pc}

081152c4 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 81152c4:	b580      	push	{r7, lr}
 81152c6:	b082      	sub	sp, #8
 81152c8:	af00      	add	r7, sp, #0
 81152ca:	6078      	str	r0, [r7, #4]
 81152cc:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 81152ce:	2180      	movs	r1, #128	; 0x80
 81152d0:	6878      	ldr	r0, [r7, #4]
 81152d2:	f003 fce5 	bl	8118ca0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 81152d6:	2100      	movs	r1, #0
 81152d8:	6878      	ldr	r0, [r7, #4]
 81152da:	f003 fce1 	bl	8118ca0 <USBD_LL_StallEP>
}
 81152de:	bf00      	nop
 81152e0:	3708      	adds	r7, #8
 81152e2:	46bd      	mov	sp, r7
 81152e4:	bd80      	pop	{r7, pc}

081152e6 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 81152e6:	b580      	push	{r7, lr}
 81152e8:	b086      	sub	sp, #24
 81152ea:	af00      	add	r7, sp, #0
 81152ec:	60f8      	str	r0, [r7, #12]
 81152ee:	60b9      	str	r1, [r7, #8]
 81152f0:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 81152f2:	2300      	movs	r3, #0
 81152f4:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 81152f6:	68fb      	ldr	r3, [r7, #12]
 81152f8:	2b00      	cmp	r3, #0
 81152fa:	d036      	beq.n	811536a <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 81152fc:	68fb      	ldr	r3, [r7, #12]
 81152fe:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8115300:	6938      	ldr	r0, [r7, #16]
 8115302:	f000 f836 	bl	8115372 <USBD_GetLen>
 8115306:	4603      	mov	r3, r0
 8115308:	3301      	adds	r3, #1
 811530a:	b29b      	uxth	r3, r3
 811530c:	005b      	lsls	r3, r3, #1
 811530e:	b29a      	uxth	r2, r3
 8115310:	687b      	ldr	r3, [r7, #4]
 8115312:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8115314:	7dfb      	ldrb	r3, [r7, #23]
 8115316:	68ba      	ldr	r2, [r7, #8]
 8115318:	4413      	add	r3, r2
 811531a:	687a      	ldr	r2, [r7, #4]
 811531c:	7812      	ldrb	r2, [r2, #0]
 811531e:	701a      	strb	r2, [r3, #0]
  idx++;
 8115320:	7dfb      	ldrb	r3, [r7, #23]
 8115322:	3301      	adds	r3, #1
 8115324:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8115326:	7dfb      	ldrb	r3, [r7, #23]
 8115328:	68ba      	ldr	r2, [r7, #8]
 811532a:	4413      	add	r3, r2
 811532c:	2203      	movs	r2, #3
 811532e:	701a      	strb	r2, [r3, #0]
  idx++;
 8115330:	7dfb      	ldrb	r3, [r7, #23]
 8115332:	3301      	adds	r3, #1
 8115334:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8115336:	e013      	b.n	8115360 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8115338:	7dfb      	ldrb	r3, [r7, #23]
 811533a:	68ba      	ldr	r2, [r7, #8]
 811533c:	4413      	add	r3, r2
 811533e:	693a      	ldr	r2, [r7, #16]
 8115340:	7812      	ldrb	r2, [r2, #0]
 8115342:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8115344:	693b      	ldr	r3, [r7, #16]
 8115346:	3301      	adds	r3, #1
 8115348:	613b      	str	r3, [r7, #16]
    idx++;
 811534a:	7dfb      	ldrb	r3, [r7, #23]
 811534c:	3301      	adds	r3, #1
 811534e:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8115350:	7dfb      	ldrb	r3, [r7, #23]
 8115352:	68ba      	ldr	r2, [r7, #8]
 8115354:	4413      	add	r3, r2
 8115356:	2200      	movs	r2, #0
 8115358:	701a      	strb	r2, [r3, #0]
    idx++;
 811535a:	7dfb      	ldrb	r3, [r7, #23]
 811535c:	3301      	adds	r3, #1
 811535e:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8115360:	693b      	ldr	r3, [r7, #16]
 8115362:	781b      	ldrb	r3, [r3, #0]
 8115364:	2b00      	cmp	r3, #0
 8115366:	d1e7      	bne.n	8115338 <USBD_GetString+0x52>
 8115368:	e000      	b.n	811536c <USBD_GetString+0x86>
    return;
 811536a:	bf00      	nop
  }
}
 811536c:	3718      	adds	r7, #24
 811536e:	46bd      	mov	sp, r7
 8115370:	bd80      	pop	{r7, pc}

08115372 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8115372:	b480      	push	{r7}
 8115374:	b085      	sub	sp, #20
 8115376:	af00      	add	r7, sp, #0
 8115378:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 811537a:	2300      	movs	r3, #0
 811537c:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 811537e:	687b      	ldr	r3, [r7, #4]
 8115380:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8115382:	e005      	b.n	8115390 <USBD_GetLen+0x1e>
  {
    len++;
 8115384:	7bfb      	ldrb	r3, [r7, #15]
 8115386:	3301      	adds	r3, #1
 8115388:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 811538a:	68bb      	ldr	r3, [r7, #8]
 811538c:	3301      	adds	r3, #1
 811538e:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8115390:	68bb      	ldr	r3, [r7, #8]
 8115392:	781b      	ldrb	r3, [r3, #0]
 8115394:	2b00      	cmp	r3, #0
 8115396:	d1f5      	bne.n	8115384 <USBD_GetLen+0x12>
  }

  return len;
 8115398:	7bfb      	ldrb	r3, [r7, #15]
}
 811539a:	4618      	mov	r0, r3
 811539c:	3714      	adds	r7, #20
 811539e:	46bd      	mov	sp, r7
 81153a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81153a4:	4770      	bx	lr

081153a6 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 81153a6:	b580      	push	{r7, lr}
 81153a8:	b084      	sub	sp, #16
 81153aa:	af00      	add	r7, sp, #0
 81153ac:	60f8      	str	r0, [r7, #12]
 81153ae:	60b9      	str	r1, [r7, #8]
 81153b0:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 81153b2:	68fb      	ldr	r3, [r7, #12]
 81153b4:	2202      	movs	r2, #2
 81153b6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 81153ba:	68fb      	ldr	r3, [r7, #12]
 81153bc:	687a      	ldr	r2, [r7, #4]
 81153be:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 81153c0:	68fb      	ldr	r3, [r7, #12]
 81153c2:	687a      	ldr	r2, [r7, #4]
 81153c4:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 81153c6:	687b      	ldr	r3, [r7, #4]
 81153c8:	68ba      	ldr	r2, [r7, #8]
 81153ca:	2100      	movs	r1, #0
 81153cc:	68f8      	ldr	r0, [r7, #12]
 81153ce:	f003 fcf0 	bl	8118db2 <USBD_LL_Transmit>

  return USBD_OK;
 81153d2:	2300      	movs	r3, #0
}
 81153d4:	4618      	mov	r0, r3
 81153d6:	3710      	adds	r7, #16
 81153d8:	46bd      	mov	sp, r7
 81153da:	bd80      	pop	{r7, pc}

081153dc <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 81153dc:	b580      	push	{r7, lr}
 81153de:	b084      	sub	sp, #16
 81153e0:	af00      	add	r7, sp, #0
 81153e2:	60f8      	str	r0, [r7, #12]
 81153e4:	60b9      	str	r1, [r7, #8]
 81153e6:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 81153e8:	687b      	ldr	r3, [r7, #4]
 81153ea:	68ba      	ldr	r2, [r7, #8]
 81153ec:	2100      	movs	r1, #0
 81153ee:	68f8      	ldr	r0, [r7, #12]
 81153f0:	f003 fcdf 	bl	8118db2 <USBD_LL_Transmit>

  return USBD_OK;
 81153f4:	2300      	movs	r3, #0
}
 81153f6:	4618      	mov	r0, r3
 81153f8:	3710      	adds	r7, #16
 81153fa:	46bd      	mov	sp, r7
 81153fc:	bd80      	pop	{r7, pc}

081153fe <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 81153fe:	b580      	push	{r7, lr}
 8115400:	b084      	sub	sp, #16
 8115402:	af00      	add	r7, sp, #0
 8115404:	60f8      	str	r0, [r7, #12]
 8115406:	60b9      	str	r1, [r7, #8]
 8115408:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 811540a:	68fb      	ldr	r3, [r7, #12]
 811540c:	2203      	movs	r2, #3
 811540e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8115412:	68fb      	ldr	r3, [r7, #12]
 8115414:	687a      	ldr	r2, [r7, #4]
 8115416:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 811541a:	68fb      	ldr	r3, [r7, #12]
 811541c:	687a      	ldr	r2, [r7, #4]
 811541e:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8115422:	687b      	ldr	r3, [r7, #4]
 8115424:	68ba      	ldr	r2, [r7, #8]
 8115426:	2100      	movs	r1, #0
 8115428:	68f8      	ldr	r0, [r7, #12]
 811542a:	f003 fce3 	bl	8118df4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 811542e:	2300      	movs	r3, #0
}
 8115430:	4618      	mov	r0, r3
 8115432:	3710      	adds	r7, #16
 8115434:	46bd      	mov	sp, r7
 8115436:	bd80      	pop	{r7, pc}

08115438 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8115438:	b580      	push	{r7, lr}
 811543a:	b084      	sub	sp, #16
 811543c:	af00      	add	r7, sp, #0
 811543e:	60f8      	str	r0, [r7, #12]
 8115440:	60b9      	str	r1, [r7, #8]
 8115442:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8115444:	687b      	ldr	r3, [r7, #4]
 8115446:	68ba      	ldr	r2, [r7, #8]
 8115448:	2100      	movs	r1, #0
 811544a:	68f8      	ldr	r0, [r7, #12]
 811544c:	f003 fcd2 	bl	8118df4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8115450:	2300      	movs	r3, #0
}
 8115452:	4618      	mov	r0, r3
 8115454:	3710      	adds	r7, #16
 8115456:	46bd      	mov	sp, r7
 8115458:	bd80      	pop	{r7, pc}

0811545a <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 811545a:	b580      	push	{r7, lr}
 811545c:	b082      	sub	sp, #8
 811545e:	af00      	add	r7, sp, #0
 8115460:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8115462:	687b      	ldr	r3, [r7, #4]
 8115464:	2204      	movs	r2, #4
 8115466:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 811546a:	2300      	movs	r3, #0
 811546c:	2200      	movs	r2, #0
 811546e:	2100      	movs	r1, #0
 8115470:	6878      	ldr	r0, [r7, #4]
 8115472:	f003 fc9e 	bl	8118db2 <USBD_LL_Transmit>

  return USBD_OK;
 8115476:	2300      	movs	r3, #0
}
 8115478:	4618      	mov	r0, r3
 811547a:	3708      	adds	r7, #8
 811547c:	46bd      	mov	sp, r7
 811547e:	bd80      	pop	{r7, pc}

08115480 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8115480:	b580      	push	{r7, lr}
 8115482:	b082      	sub	sp, #8
 8115484:	af00      	add	r7, sp, #0
 8115486:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8115488:	687b      	ldr	r3, [r7, #4]
 811548a:	2205      	movs	r2, #5
 811548c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8115490:	2300      	movs	r3, #0
 8115492:	2200      	movs	r2, #0
 8115494:	2100      	movs	r1, #0
 8115496:	6878      	ldr	r0, [r7, #4]
 8115498:	f003 fcac 	bl	8118df4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 811549c:	2300      	movs	r3, #0
}
 811549e:	4618      	mov	r0, r3
 81154a0:	3708      	adds	r7, #8
 81154a2:	46bd      	mov	sp, r7
 81154a4:	bd80      	pop	{r7, pc}
	...

081154a8 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 81154a8:	b480      	push	{r7}
 81154aa:	b087      	sub	sp, #28
 81154ac:	af00      	add	r7, sp, #0
 81154ae:	60f8      	str	r0, [r7, #12]
 81154b0:	60b9      	str	r1, [r7, #8]
 81154b2:	4613      	mov	r3, r2
 81154b4:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 81154b6:	2301      	movs	r3, #1
 81154b8:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 81154ba:	2300      	movs	r3, #0
 81154bc:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 81154be:	4b1f      	ldr	r3, [pc, #124]	; (811553c <FATFS_LinkDriverEx+0x94>)
 81154c0:	7a5b      	ldrb	r3, [r3, #9]
 81154c2:	b2db      	uxtb	r3, r3
 81154c4:	2b00      	cmp	r3, #0
 81154c6:	d131      	bne.n	811552c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 81154c8:	4b1c      	ldr	r3, [pc, #112]	; (811553c <FATFS_LinkDriverEx+0x94>)
 81154ca:	7a5b      	ldrb	r3, [r3, #9]
 81154cc:	b2db      	uxtb	r3, r3
 81154ce:	461a      	mov	r2, r3
 81154d0:	4b1a      	ldr	r3, [pc, #104]	; (811553c <FATFS_LinkDriverEx+0x94>)
 81154d2:	2100      	movs	r1, #0
 81154d4:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 81154d6:	4b19      	ldr	r3, [pc, #100]	; (811553c <FATFS_LinkDriverEx+0x94>)
 81154d8:	7a5b      	ldrb	r3, [r3, #9]
 81154da:	b2db      	uxtb	r3, r3
 81154dc:	4a17      	ldr	r2, [pc, #92]	; (811553c <FATFS_LinkDriverEx+0x94>)
 81154de:	009b      	lsls	r3, r3, #2
 81154e0:	4413      	add	r3, r2
 81154e2:	68fa      	ldr	r2, [r7, #12]
 81154e4:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 81154e6:	4b15      	ldr	r3, [pc, #84]	; (811553c <FATFS_LinkDriverEx+0x94>)
 81154e8:	7a5b      	ldrb	r3, [r3, #9]
 81154ea:	b2db      	uxtb	r3, r3
 81154ec:	461a      	mov	r2, r3
 81154ee:	4b13      	ldr	r3, [pc, #76]	; (811553c <FATFS_LinkDriverEx+0x94>)
 81154f0:	4413      	add	r3, r2
 81154f2:	79fa      	ldrb	r2, [r7, #7]
 81154f4:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 81154f6:	4b11      	ldr	r3, [pc, #68]	; (811553c <FATFS_LinkDriverEx+0x94>)
 81154f8:	7a5b      	ldrb	r3, [r3, #9]
 81154fa:	b2db      	uxtb	r3, r3
 81154fc:	1c5a      	adds	r2, r3, #1
 81154fe:	b2d1      	uxtb	r1, r2
 8115500:	4a0e      	ldr	r2, [pc, #56]	; (811553c <FATFS_LinkDriverEx+0x94>)
 8115502:	7251      	strb	r1, [r2, #9]
 8115504:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8115506:	7dbb      	ldrb	r3, [r7, #22]
 8115508:	3330      	adds	r3, #48	; 0x30
 811550a:	b2da      	uxtb	r2, r3
 811550c:	68bb      	ldr	r3, [r7, #8]
 811550e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8115510:	68bb      	ldr	r3, [r7, #8]
 8115512:	3301      	adds	r3, #1
 8115514:	223a      	movs	r2, #58	; 0x3a
 8115516:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8115518:	68bb      	ldr	r3, [r7, #8]
 811551a:	3302      	adds	r3, #2
 811551c:	222f      	movs	r2, #47	; 0x2f
 811551e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8115520:	68bb      	ldr	r3, [r7, #8]
 8115522:	3303      	adds	r3, #3
 8115524:	2200      	movs	r2, #0
 8115526:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8115528:	2300      	movs	r3, #0
 811552a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 811552c:	7dfb      	ldrb	r3, [r7, #23]
}
 811552e:	4618      	mov	r0, r3
 8115530:	371c      	adds	r7, #28
 8115532:	46bd      	mov	sp, r7
 8115534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8115538:	4770      	bx	lr
 811553a:	bf00      	nop
 811553c:	1000038c 	.word	0x1000038c

08115540 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8115540:	b580      	push	{r7, lr}
 8115542:	b082      	sub	sp, #8
 8115544:	af00      	add	r7, sp, #0
 8115546:	6078      	str	r0, [r7, #4]
 8115548:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 811554a:	2200      	movs	r2, #0
 811554c:	6839      	ldr	r1, [r7, #0]
 811554e:	6878      	ldr	r0, [r7, #4]
 8115550:	f7ff ffaa 	bl	81154a8 <FATFS_LinkDriverEx>
 8115554:	4603      	mov	r3, r0
}
 8115556:	4618      	mov	r0, r3
 8115558:	3708      	adds	r7, #8
 811555a:	46bd      	mov	sp, r7
 811555c:	bd80      	pop	{r7, pc}
	...

08115560 <__NVIC_SetPriority>:
{
 8115560:	b480      	push	{r7}
 8115562:	b083      	sub	sp, #12
 8115564:	af00      	add	r7, sp, #0
 8115566:	4603      	mov	r3, r0
 8115568:	6039      	str	r1, [r7, #0]
 811556a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 811556c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8115570:	2b00      	cmp	r3, #0
 8115572:	db0a      	blt.n	811558a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8115574:	683b      	ldr	r3, [r7, #0]
 8115576:	b2da      	uxtb	r2, r3
 8115578:	490c      	ldr	r1, [pc, #48]	; (81155ac <__NVIC_SetPriority+0x4c>)
 811557a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 811557e:	0112      	lsls	r2, r2, #4
 8115580:	b2d2      	uxtb	r2, r2
 8115582:	440b      	add	r3, r1
 8115584:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8115588:	e00a      	b.n	81155a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 811558a:	683b      	ldr	r3, [r7, #0]
 811558c:	b2da      	uxtb	r2, r3
 811558e:	4908      	ldr	r1, [pc, #32]	; (81155b0 <__NVIC_SetPriority+0x50>)
 8115590:	88fb      	ldrh	r3, [r7, #6]
 8115592:	f003 030f 	and.w	r3, r3, #15
 8115596:	3b04      	subs	r3, #4
 8115598:	0112      	lsls	r2, r2, #4
 811559a:	b2d2      	uxtb	r2, r2
 811559c:	440b      	add	r3, r1
 811559e:	761a      	strb	r2, [r3, #24]
}
 81155a0:	bf00      	nop
 81155a2:	370c      	adds	r7, #12
 81155a4:	46bd      	mov	sp, r7
 81155a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81155aa:	4770      	bx	lr
 81155ac:	e000e100 	.word	0xe000e100
 81155b0:	e000ed00 	.word	0xe000ed00

081155b4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 81155b4:	b580      	push	{r7, lr}
 81155b6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 81155b8:	4b05      	ldr	r3, [pc, #20]	; (81155d0 <SysTick_Handler+0x1c>)
 81155ba:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 81155bc:	f002 fb6a 	bl	8117c94 <xTaskGetSchedulerState>
 81155c0:	4603      	mov	r3, r0
 81155c2:	2b01      	cmp	r3, #1
 81155c4:	d001      	beq.n	81155ca <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 81155c6:	f000 feff 	bl	81163c8 <xPortSysTickHandler>
  }
}
 81155ca:	bf00      	nop
 81155cc:	bd80      	pop	{r7, pc}
 81155ce:	bf00      	nop
 81155d0:	e000e010 	.word	0xe000e010

081155d4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 81155d4:	b580      	push	{r7, lr}
 81155d6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 81155d8:	2100      	movs	r1, #0
 81155da:	f06f 0004 	mvn.w	r0, #4
 81155de:	f7ff ffbf 	bl	8115560 <__NVIC_SetPriority>
#endif
}
 81155e2:	bf00      	nop
 81155e4:	bd80      	pop	{r7, pc}
	...

081155e8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 81155e8:	b480      	push	{r7}
 81155ea:	b083      	sub	sp, #12
 81155ec:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 81155ee:	f3ef 8305 	mrs	r3, IPSR
 81155f2:	603b      	str	r3, [r7, #0]
  return(result);
 81155f4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 81155f6:	2b00      	cmp	r3, #0
 81155f8:	d003      	beq.n	8115602 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 81155fa:	f06f 0305 	mvn.w	r3, #5
 81155fe:	607b      	str	r3, [r7, #4]
 8115600:	e00c      	b.n	811561c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8115602:	4b0a      	ldr	r3, [pc, #40]	; (811562c <osKernelInitialize+0x44>)
 8115604:	681b      	ldr	r3, [r3, #0]
 8115606:	2b00      	cmp	r3, #0
 8115608:	d105      	bne.n	8115616 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 811560a:	4b08      	ldr	r3, [pc, #32]	; (811562c <osKernelInitialize+0x44>)
 811560c:	2201      	movs	r2, #1
 811560e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8115610:	2300      	movs	r3, #0
 8115612:	607b      	str	r3, [r7, #4]
 8115614:	e002      	b.n	811561c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8115616:	f04f 33ff 	mov.w	r3, #4294967295
 811561a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 811561c:	687b      	ldr	r3, [r7, #4]
}
 811561e:	4618      	mov	r0, r3
 8115620:	370c      	adds	r7, #12
 8115622:	46bd      	mov	sp, r7
 8115624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8115628:	4770      	bx	lr
 811562a:	bf00      	nop
 811562c:	10000398 	.word	0x10000398

08115630 <osKernelGetState>:
  }

  return (osOK);
}

osKernelState_t osKernelGetState (void) {
 8115630:	b580      	push	{r7, lr}
 8115632:	b082      	sub	sp, #8
 8115634:	af00      	add	r7, sp, #0
  osKernelState_t state;

  switch (xTaskGetSchedulerState()) {
 8115636:	f002 fb2d 	bl	8117c94 <xTaskGetSchedulerState>
 811563a:	4603      	mov	r3, r0
 811563c:	2b00      	cmp	r3, #0
 811563e:	d004      	beq.n	811564a <osKernelGetState+0x1a>
 8115640:	2b02      	cmp	r3, #2
 8115642:	d105      	bne.n	8115650 <osKernelGetState+0x20>
    case taskSCHEDULER_RUNNING:
      state = osKernelRunning;
 8115644:	2302      	movs	r3, #2
 8115646:	607b      	str	r3, [r7, #4]
      break;
 8115648:	e00c      	b.n	8115664 <osKernelGetState+0x34>

    case taskSCHEDULER_SUSPENDED:
      state = osKernelLocked;
 811564a:	2303      	movs	r3, #3
 811564c:	607b      	str	r3, [r7, #4]
      break;
 811564e:	e009      	b.n	8115664 <osKernelGetState+0x34>

    case taskSCHEDULER_NOT_STARTED:
    default:
      if (KernelState == osKernelReady) {
 8115650:	4b07      	ldr	r3, [pc, #28]	; (8115670 <osKernelGetState+0x40>)
 8115652:	681b      	ldr	r3, [r3, #0]
 8115654:	2b01      	cmp	r3, #1
 8115656:	d102      	bne.n	811565e <osKernelGetState+0x2e>
        state = osKernelReady;
 8115658:	2301      	movs	r3, #1
 811565a:	607b      	str	r3, [r7, #4]
      } else {
        state = osKernelInactive;
      }
      break;
 811565c:	e001      	b.n	8115662 <osKernelGetState+0x32>
        state = osKernelInactive;
 811565e:	2300      	movs	r3, #0
 8115660:	607b      	str	r3, [r7, #4]
      break;
 8115662:	bf00      	nop
  }

  return (state);
 8115664:	687b      	ldr	r3, [r7, #4]
}
 8115666:	4618      	mov	r0, r3
 8115668:	3708      	adds	r7, #8
 811566a:	46bd      	mov	sp, r7
 811566c:	bd80      	pop	{r7, pc}
 811566e:	bf00      	nop
 8115670:	10000398 	.word	0x10000398

08115674 <osKernelStart>:

osStatus_t osKernelStart (void) {
 8115674:	b580      	push	{r7, lr}
 8115676:	b082      	sub	sp, #8
 8115678:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 811567a:	f3ef 8305 	mrs	r3, IPSR
 811567e:	603b      	str	r3, [r7, #0]
  return(result);
 8115680:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8115682:	2b00      	cmp	r3, #0
 8115684:	d003      	beq.n	811568e <osKernelStart+0x1a>
    stat = osErrorISR;
 8115686:	f06f 0305 	mvn.w	r3, #5
 811568a:	607b      	str	r3, [r7, #4]
 811568c:	e010      	b.n	81156b0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 811568e:	4b0b      	ldr	r3, [pc, #44]	; (81156bc <osKernelStart+0x48>)
 8115690:	681b      	ldr	r3, [r3, #0]
 8115692:	2b01      	cmp	r3, #1
 8115694:	d109      	bne.n	81156aa <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8115696:	f7ff ff9d 	bl	81155d4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 811569a:	4b08      	ldr	r3, [pc, #32]	; (81156bc <osKernelStart+0x48>)
 811569c:	2202      	movs	r2, #2
 811569e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 81156a0:	f001 fe9e 	bl	81173e0 <vTaskStartScheduler>
      stat = osOK;
 81156a4:	2300      	movs	r3, #0
 81156a6:	607b      	str	r3, [r7, #4]
 81156a8:	e002      	b.n	81156b0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 81156aa:	f04f 33ff 	mov.w	r3, #4294967295
 81156ae:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 81156b0:	687b      	ldr	r3, [r7, #4]
}
 81156b2:	4618      	mov	r0, r3
 81156b4:	3708      	adds	r7, #8
 81156b6:	46bd      	mov	sp, r7
 81156b8:	bd80      	pop	{r7, pc}
 81156ba:	bf00      	nop
 81156bc:	10000398 	.word	0x10000398

081156c0 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 81156c0:	b580      	push	{r7, lr}
 81156c2:	b082      	sub	sp, #8
 81156c4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 81156c6:	f3ef 8305 	mrs	r3, IPSR
 81156ca:	603b      	str	r3, [r7, #0]
  return(result);
 81156cc:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 81156ce:	2b00      	cmp	r3, #0
 81156d0:	d003      	beq.n	81156da <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 81156d2:	f001 ffa7 	bl	8117624 <xTaskGetTickCountFromISR>
 81156d6:	6078      	str	r0, [r7, #4]
 81156d8:	e002      	b.n	81156e0 <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 81156da:	f001 ff93 	bl	8117604 <xTaskGetTickCount>
 81156de:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 81156e0:	687b      	ldr	r3, [r7, #4]
}
 81156e2:	4618      	mov	r0, r3
 81156e4:	3708      	adds	r7, #8
 81156e6:	46bd      	mov	sp, r7
 81156e8:	bd80      	pop	{r7, pc}

081156ea <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 81156ea:	b580      	push	{r7, lr}
 81156ec:	b08e      	sub	sp, #56	; 0x38
 81156ee:	af04      	add	r7, sp, #16
 81156f0:	60f8      	str	r0, [r7, #12]
 81156f2:	60b9      	str	r1, [r7, #8]
 81156f4:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 81156f6:	2300      	movs	r3, #0
 81156f8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 81156fa:	f3ef 8305 	mrs	r3, IPSR
 81156fe:	617b      	str	r3, [r7, #20]
  return(result);
 8115700:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8115702:	2b00      	cmp	r3, #0
 8115704:	d17e      	bne.n	8115804 <osThreadNew+0x11a>
 8115706:	68fb      	ldr	r3, [r7, #12]
 8115708:	2b00      	cmp	r3, #0
 811570a:	d07b      	beq.n	8115804 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 811570c:	2380      	movs	r3, #128	; 0x80
 811570e:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8115710:	2318      	movs	r3, #24
 8115712:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8115714:	2300      	movs	r3, #0
 8115716:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8115718:	f04f 33ff 	mov.w	r3, #4294967295
 811571c:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 811571e:	687b      	ldr	r3, [r7, #4]
 8115720:	2b00      	cmp	r3, #0
 8115722:	d045      	beq.n	81157b0 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8115724:	687b      	ldr	r3, [r7, #4]
 8115726:	681b      	ldr	r3, [r3, #0]
 8115728:	2b00      	cmp	r3, #0
 811572a:	d002      	beq.n	8115732 <osThreadNew+0x48>
        name = attr->name;
 811572c:	687b      	ldr	r3, [r7, #4]
 811572e:	681b      	ldr	r3, [r3, #0]
 8115730:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8115732:	687b      	ldr	r3, [r7, #4]
 8115734:	699b      	ldr	r3, [r3, #24]
 8115736:	2b00      	cmp	r3, #0
 8115738:	d002      	beq.n	8115740 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 811573a:	687b      	ldr	r3, [r7, #4]
 811573c:	699b      	ldr	r3, [r3, #24]
 811573e:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8115740:	69fb      	ldr	r3, [r7, #28]
 8115742:	2b00      	cmp	r3, #0
 8115744:	d008      	beq.n	8115758 <osThreadNew+0x6e>
 8115746:	69fb      	ldr	r3, [r7, #28]
 8115748:	2b38      	cmp	r3, #56	; 0x38
 811574a:	d805      	bhi.n	8115758 <osThreadNew+0x6e>
 811574c:	687b      	ldr	r3, [r7, #4]
 811574e:	685b      	ldr	r3, [r3, #4]
 8115750:	f003 0301 	and.w	r3, r3, #1
 8115754:	2b00      	cmp	r3, #0
 8115756:	d001      	beq.n	811575c <osThreadNew+0x72>
        return (NULL);
 8115758:	2300      	movs	r3, #0
 811575a:	e054      	b.n	8115806 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 811575c:	687b      	ldr	r3, [r7, #4]
 811575e:	695b      	ldr	r3, [r3, #20]
 8115760:	2b00      	cmp	r3, #0
 8115762:	d003      	beq.n	811576c <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8115764:	687b      	ldr	r3, [r7, #4]
 8115766:	695b      	ldr	r3, [r3, #20]
 8115768:	089b      	lsrs	r3, r3, #2
 811576a:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 811576c:	687b      	ldr	r3, [r7, #4]
 811576e:	689b      	ldr	r3, [r3, #8]
 8115770:	2b00      	cmp	r3, #0
 8115772:	d00e      	beq.n	8115792 <osThreadNew+0xa8>
 8115774:	687b      	ldr	r3, [r7, #4]
 8115776:	68db      	ldr	r3, [r3, #12]
 8115778:	2b5b      	cmp	r3, #91	; 0x5b
 811577a:	d90a      	bls.n	8115792 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 811577c:	687b      	ldr	r3, [r7, #4]
 811577e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8115780:	2b00      	cmp	r3, #0
 8115782:	d006      	beq.n	8115792 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8115784:	687b      	ldr	r3, [r7, #4]
 8115786:	695b      	ldr	r3, [r3, #20]
 8115788:	2b00      	cmp	r3, #0
 811578a:	d002      	beq.n	8115792 <osThreadNew+0xa8>
        mem = 1;
 811578c:	2301      	movs	r3, #1
 811578e:	61bb      	str	r3, [r7, #24]
 8115790:	e010      	b.n	81157b4 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8115792:	687b      	ldr	r3, [r7, #4]
 8115794:	689b      	ldr	r3, [r3, #8]
 8115796:	2b00      	cmp	r3, #0
 8115798:	d10c      	bne.n	81157b4 <osThreadNew+0xca>
 811579a:	687b      	ldr	r3, [r7, #4]
 811579c:	68db      	ldr	r3, [r3, #12]
 811579e:	2b00      	cmp	r3, #0
 81157a0:	d108      	bne.n	81157b4 <osThreadNew+0xca>
 81157a2:	687b      	ldr	r3, [r7, #4]
 81157a4:	691b      	ldr	r3, [r3, #16]
 81157a6:	2b00      	cmp	r3, #0
 81157a8:	d104      	bne.n	81157b4 <osThreadNew+0xca>
          mem = 0;
 81157aa:	2300      	movs	r3, #0
 81157ac:	61bb      	str	r3, [r7, #24]
 81157ae:	e001      	b.n	81157b4 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 81157b0:	2300      	movs	r3, #0
 81157b2:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 81157b4:	69bb      	ldr	r3, [r7, #24]
 81157b6:	2b01      	cmp	r3, #1
 81157b8:	d110      	bne.n	81157dc <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 81157ba:	687b      	ldr	r3, [r7, #4]
 81157bc:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 81157be:	687a      	ldr	r2, [r7, #4]
 81157c0:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 81157c2:	9202      	str	r2, [sp, #8]
 81157c4:	9301      	str	r3, [sp, #4]
 81157c6:	69fb      	ldr	r3, [r7, #28]
 81157c8:	9300      	str	r3, [sp, #0]
 81157ca:	68bb      	ldr	r3, [r7, #8]
 81157cc:	6a3a      	ldr	r2, [r7, #32]
 81157ce:	6a79      	ldr	r1, [r7, #36]	; 0x24
 81157d0:	68f8      	ldr	r0, [r7, #12]
 81157d2:	f001 fc2f 	bl	8117034 <xTaskCreateStatic>
 81157d6:	4603      	mov	r3, r0
 81157d8:	613b      	str	r3, [r7, #16]
 81157da:	e013      	b.n	8115804 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 81157dc:	69bb      	ldr	r3, [r7, #24]
 81157de:	2b00      	cmp	r3, #0
 81157e0:	d110      	bne.n	8115804 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 81157e2:	6a3b      	ldr	r3, [r7, #32]
 81157e4:	b29a      	uxth	r2, r3
 81157e6:	f107 0310 	add.w	r3, r7, #16
 81157ea:	9301      	str	r3, [sp, #4]
 81157ec:	69fb      	ldr	r3, [r7, #28]
 81157ee:	9300      	str	r3, [sp, #0]
 81157f0:	68bb      	ldr	r3, [r7, #8]
 81157f2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 81157f4:	68f8      	ldr	r0, [r7, #12]
 81157f6:	f001 fc7a 	bl	81170ee <xTaskCreate>
 81157fa:	4603      	mov	r3, r0
 81157fc:	2b01      	cmp	r3, #1
 81157fe:	d001      	beq.n	8115804 <osThreadNew+0x11a>
            hTask = NULL;
 8115800:	2300      	movs	r3, #0
 8115802:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8115804:	693b      	ldr	r3, [r7, #16]
}
 8115806:	4618      	mov	r0, r3
 8115808:	3728      	adds	r7, #40	; 0x28
 811580a:	46bd      	mov	sp, r7
 811580c:	bd80      	pop	{r7, pc}

0811580e <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 811580e:	b580      	push	{r7, lr}
 8115810:	b084      	sub	sp, #16
 8115812:	af00      	add	r7, sp, #0
 8115814:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8115816:	f3ef 8305 	mrs	r3, IPSR
 811581a:	60bb      	str	r3, [r7, #8]
  return(result);
 811581c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 811581e:	2b00      	cmp	r3, #0
 8115820:	d003      	beq.n	811582a <osDelay+0x1c>
    stat = osErrorISR;
 8115822:	f06f 0305 	mvn.w	r3, #5
 8115826:	60fb      	str	r3, [r7, #12]
 8115828:	e007      	b.n	811583a <osDelay+0x2c>
  }
  else {
    stat = osOK;
 811582a:	2300      	movs	r3, #0
 811582c:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 811582e:	687b      	ldr	r3, [r7, #4]
 8115830:	2b00      	cmp	r3, #0
 8115832:	d002      	beq.n	811583a <osDelay+0x2c>
      vTaskDelay(ticks);
 8115834:	6878      	ldr	r0, [r7, #4]
 8115836:	f001 fd9f 	bl	8117378 <vTaskDelay>
    }
  }

  return (stat);
 811583a:	68fb      	ldr	r3, [r7, #12]
}
 811583c:	4618      	mov	r0, r3
 811583e:	3710      	adds	r7, #16
 8115840:	46bd      	mov	sp, r7
 8115842:	bd80      	pop	{r7, pc}

08115844 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8115844:	b580      	push	{r7, lr}
 8115846:	b08a      	sub	sp, #40	; 0x28
 8115848:	af02      	add	r7, sp, #8
 811584a:	60f8      	str	r0, [r7, #12]
 811584c:	60b9      	str	r1, [r7, #8]
 811584e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8115850:	2300      	movs	r3, #0
 8115852:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8115854:	f3ef 8305 	mrs	r3, IPSR
 8115858:	613b      	str	r3, [r7, #16]
  return(result);
 811585a:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 811585c:	2b00      	cmp	r3, #0
 811585e:	d15f      	bne.n	8115920 <osMessageQueueNew+0xdc>
 8115860:	68fb      	ldr	r3, [r7, #12]
 8115862:	2b00      	cmp	r3, #0
 8115864:	d05c      	beq.n	8115920 <osMessageQueueNew+0xdc>
 8115866:	68bb      	ldr	r3, [r7, #8]
 8115868:	2b00      	cmp	r3, #0
 811586a:	d059      	beq.n	8115920 <osMessageQueueNew+0xdc>
    mem = -1;
 811586c:	f04f 33ff 	mov.w	r3, #4294967295
 8115870:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8115872:	687b      	ldr	r3, [r7, #4]
 8115874:	2b00      	cmp	r3, #0
 8115876:	d029      	beq.n	81158cc <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8115878:	687b      	ldr	r3, [r7, #4]
 811587a:	689b      	ldr	r3, [r3, #8]
 811587c:	2b00      	cmp	r3, #0
 811587e:	d012      	beq.n	81158a6 <osMessageQueueNew+0x62>
 8115880:	687b      	ldr	r3, [r7, #4]
 8115882:	68db      	ldr	r3, [r3, #12]
 8115884:	2b4f      	cmp	r3, #79	; 0x4f
 8115886:	d90e      	bls.n	81158a6 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8115888:	687b      	ldr	r3, [r7, #4]
 811588a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 811588c:	2b00      	cmp	r3, #0
 811588e:	d00a      	beq.n	81158a6 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8115890:	687b      	ldr	r3, [r7, #4]
 8115892:	695a      	ldr	r2, [r3, #20]
 8115894:	68fb      	ldr	r3, [r7, #12]
 8115896:	68b9      	ldr	r1, [r7, #8]
 8115898:	fb01 f303 	mul.w	r3, r1, r3
 811589c:	429a      	cmp	r2, r3
 811589e:	d302      	bcc.n	81158a6 <osMessageQueueNew+0x62>
        mem = 1;
 81158a0:	2301      	movs	r3, #1
 81158a2:	61bb      	str	r3, [r7, #24]
 81158a4:	e014      	b.n	81158d0 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 81158a6:	687b      	ldr	r3, [r7, #4]
 81158a8:	689b      	ldr	r3, [r3, #8]
 81158aa:	2b00      	cmp	r3, #0
 81158ac:	d110      	bne.n	81158d0 <osMessageQueueNew+0x8c>
 81158ae:	687b      	ldr	r3, [r7, #4]
 81158b0:	68db      	ldr	r3, [r3, #12]
 81158b2:	2b00      	cmp	r3, #0
 81158b4:	d10c      	bne.n	81158d0 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 81158b6:	687b      	ldr	r3, [r7, #4]
 81158b8:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 81158ba:	2b00      	cmp	r3, #0
 81158bc:	d108      	bne.n	81158d0 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 81158be:	687b      	ldr	r3, [r7, #4]
 81158c0:	695b      	ldr	r3, [r3, #20]
 81158c2:	2b00      	cmp	r3, #0
 81158c4:	d104      	bne.n	81158d0 <osMessageQueueNew+0x8c>
          mem = 0;
 81158c6:	2300      	movs	r3, #0
 81158c8:	61bb      	str	r3, [r7, #24]
 81158ca:	e001      	b.n	81158d0 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 81158cc:	2300      	movs	r3, #0
 81158ce:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 81158d0:	69bb      	ldr	r3, [r7, #24]
 81158d2:	2b01      	cmp	r3, #1
 81158d4:	d10b      	bne.n	81158ee <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 81158d6:	687b      	ldr	r3, [r7, #4]
 81158d8:	691a      	ldr	r2, [r3, #16]
 81158da:	687b      	ldr	r3, [r7, #4]
 81158dc:	689b      	ldr	r3, [r3, #8]
 81158de:	2100      	movs	r1, #0
 81158e0:	9100      	str	r1, [sp, #0]
 81158e2:	68b9      	ldr	r1, [r7, #8]
 81158e4:	68f8      	ldr	r0, [r7, #12]
 81158e6:	f000 fe67 	bl	81165b8 <xQueueGenericCreateStatic>
 81158ea:	61f8      	str	r0, [r7, #28]
 81158ec:	e008      	b.n	8115900 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 81158ee:	69bb      	ldr	r3, [r7, #24]
 81158f0:	2b00      	cmp	r3, #0
 81158f2:	d105      	bne.n	8115900 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 81158f4:	2200      	movs	r2, #0
 81158f6:	68b9      	ldr	r1, [r7, #8]
 81158f8:	68f8      	ldr	r0, [r7, #12]
 81158fa:	f000 fed5 	bl	81166a8 <xQueueGenericCreate>
 81158fe:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8115900:	69fb      	ldr	r3, [r7, #28]
 8115902:	2b00      	cmp	r3, #0
 8115904:	d00c      	beq.n	8115920 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8115906:	687b      	ldr	r3, [r7, #4]
 8115908:	2b00      	cmp	r3, #0
 811590a:	d003      	beq.n	8115914 <osMessageQueueNew+0xd0>
        name = attr->name;
 811590c:	687b      	ldr	r3, [r7, #4]
 811590e:	681b      	ldr	r3, [r3, #0]
 8115910:	617b      	str	r3, [r7, #20]
 8115912:	e001      	b.n	8115918 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8115914:	2300      	movs	r3, #0
 8115916:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8115918:	6979      	ldr	r1, [r7, #20]
 811591a:	69f8      	ldr	r0, [r7, #28]
 811591c:	f001 fb2c 	bl	8116f78 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8115920:	69fb      	ldr	r3, [r7, #28]
}
 8115922:	4618      	mov	r0, r3
 8115924:	3720      	adds	r7, #32
 8115926:	46bd      	mov	sp, r7
 8115928:	bd80      	pop	{r7, pc}
	...

0811592c <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 811592c:	b580      	push	{r7, lr}
 811592e:	b088      	sub	sp, #32
 8115930:	af00      	add	r7, sp, #0
 8115932:	60f8      	str	r0, [r7, #12]
 8115934:	60b9      	str	r1, [r7, #8]
 8115936:	603b      	str	r3, [r7, #0]
 8115938:	4613      	mov	r3, r2
 811593a:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 811593c:	68fb      	ldr	r3, [r7, #12]
 811593e:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8115940:	2300      	movs	r3, #0
 8115942:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8115944:	f3ef 8305 	mrs	r3, IPSR
 8115948:	617b      	str	r3, [r7, #20]
  return(result);
 811594a:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 811594c:	2b00      	cmp	r3, #0
 811594e:	d028      	beq.n	81159a2 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8115950:	69bb      	ldr	r3, [r7, #24]
 8115952:	2b00      	cmp	r3, #0
 8115954:	d005      	beq.n	8115962 <osMessageQueuePut+0x36>
 8115956:	68bb      	ldr	r3, [r7, #8]
 8115958:	2b00      	cmp	r3, #0
 811595a:	d002      	beq.n	8115962 <osMessageQueuePut+0x36>
 811595c:	683b      	ldr	r3, [r7, #0]
 811595e:	2b00      	cmp	r3, #0
 8115960:	d003      	beq.n	811596a <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8115962:	f06f 0303 	mvn.w	r3, #3
 8115966:	61fb      	str	r3, [r7, #28]
 8115968:	e038      	b.n	81159dc <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 811596a:	2300      	movs	r3, #0
 811596c:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 811596e:	f107 0210 	add.w	r2, r7, #16
 8115972:	2300      	movs	r3, #0
 8115974:	68b9      	ldr	r1, [r7, #8]
 8115976:	69b8      	ldr	r0, [r7, #24]
 8115978:	f000 fff2 	bl	8116960 <xQueueGenericSendFromISR>
 811597c:	4603      	mov	r3, r0
 811597e:	2b01      	cmp	r3, #1
 8115980:	d003      	beq.n	811598a <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8115982:	f06f 0302 	mvn.w	r3, #2
 8115986:	61fb      	str	r3, [r7, #28]
 8115988:	e028      	b.n	81159dc <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 811598a:	693b      	ldr	r3, [r7, #16]
 811598c:	2b00      	cmp	r3, #0
 811598e:	d025      	beq.n	81159dc <osMessageQueuePut+0xb0>
 8115990:	4b15      	ldr	r3, [pc, #84]	; (81159e8 <osMessageQueuePut+0xbc>)
 8115992:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8115996:	601a      	str	r2, [r3, #0]
 8115998:	f3bf 8f4f 	dsb	sy
 811599c:	f3bf 8f6f 	isb	sy
 81159a0:	e01c      	b.n	81159dc <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 81159a2:	69bb      	ldr	r3, [r7, #24]
 81159a4:	2b00      	cmp	r3, #0
 81159a6:	d002      	beq.n	81159ae <osMessageQueuePut+0x82>
 81159a8:	68bb      	ldr	r3, [r7, #8]
 81159aa:	2b00      	cmp	r3, #0
 81159ac:	d103      	bne.n	81159b6 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 81159ae:	f06f 0303 	mvn.w	r3, #3
 81159b2:	61fb      	str	r3, [r7, #28]
 81159b4:	e012      	b.n	81159dc <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 81159b6:	2300      	movs	r3, #0
 81159b8:	683a      	ldr	r2, [r7, #0]
 81159ba:	68b9      	ldr	r1, [r7, #8]
 81159bc:	69b8      	ldr	r0, [r7, #24]
 81159be:	f000 fed1 	bl	8116764 <xQueueGenericSend>
 81159c2:	4603      	mov	r3, r0
 81159c4:	2b01      	cmp	r3, #1
 81159c6:	d009      	beq.n	81159dc <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 81159c8:	683b      	ldr	r3, [r7, #0]
 81159ca:	2b00      	cmp	r3, #0
 81159cc:	d003      	beq.n	81159d6 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 81159ce:	f06f 0301 	mvn.w	r3, #1
 81159d2:	61fb      	str	r3, [r7, #28]
 81159d4:	e002      	b.n	81159dc <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 81159d6:	f06f 0302 	mvn.w	r3, #2
 81159da:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 81159dc:	69fb      	ldr	r3, [r7, #28]
}
 81159de:	4618      	mov	r0, r3
 81159e0:	3720      	adds	r7, #32
 81159e2:	46bd      	mov	sp, r7
 81159e4:	bd80      	pop	{r7, pc}
 81159e6:	bf00      	nop
 81159e8:	e000ed04 	.word	0xe000ed04

081159ec <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 81159ec:	b580      	push	{r7, lr}
 81159ee:	b088      	sub	sp, #32
 81159f0:	af00      	add	r7, sp, #0
 81159f2:	60f8      	str	r0, [r7, #12]
 81159f4:	60b9      	str	r1, [r7, #8]
 81159f6:	607a      	str	r2, [r7, #4]
 81159f8:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 81159fa:	68fb      	ldr	r3, [r7, #12]
 81159fc:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 81159fe:	2300      	movs	r3, #0
 8115a00:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8115a02:	f3ef 8305 	mrs	r3, IPSR
 8115a06:	617b      	str	r3, [r7, #20]
  return(result);
 8115a08:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8115a0a:	2b00      	cmp	r3, #0
 8115a0c:	d028      	beq.n	8115a60 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8115a0e:	69bb      	ldr	r3, [r7, #24]
 8115a10:	2b00      	cmp	r3, #0
 8115a12:	d005      	beq.n	8115a20 <osMessageQueueGet+0x34>
 8115a14:	68bb      	ldr	r3, [r7, #8]
 8115a16:	2b00      	cmp	r3, #0
 8115a18:	d002      	beq.n	8115a20 <osMessageQueueGet+0x34>
 8115a1a:	683b      	ldr	r3, [r7, #0]
 8115a1c:	2b00      	cmp	r3, #0
 8115a1e:	d003      	beq.n	8115a28 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8115a20:	f06f 0303 	mvn.w	r3, #3
 8115a24:	61fb      	str	r3, [r7, #28]
 8115a26:	e037      	b.n	8115a98 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8115a28:	2300      	movs	r3, #0
 8115a2a:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8115a2c:	f107 0310 	add.w	r3, r7, #16
 8115a30:	461a      	mov	r2, r3
 8115a32:	68b9      	ldr	r1, [r7, #8]
 8115a34:	69b8      	ldr	r0, [r7, #24]
 8115a36:	f001 f90f 	bl	8116c58 <xQueueReceiveFromISR>
 8115a3a:	4603      	mov	r3, r0
 8115a3c:	2b01      	cmp	r3, #1
 8115a3e:	d003      	beq.n	8115a48 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8115a40:	f06f 0302 	mvn.w	r3, #2
 8115a44:	61fb      	str	r3, [r7, #28]
 8115a46:	e027      	b.n	8115a98 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8115a48:	693b      	ldr	r3, [r7, #16]
 8115a4a:	2b00      	cmp	r3, #0
 8115a4c:	d024      	beq.n	8115a98 <osMessageQueueGet+0xac>
 8115a4e:	4b15      	ldr	r3, [pc, #84]	; (8115aa4 <osMessageQueueGet+0xb8>)
 8115a50:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8115a54:	601a      	str	r2, [r3, #0]
 8115a56:	f3bf 8f4f 	dsb	sy
 8115a5a:	f3bf 8f6f 	isb	sy
 8115a5e:	e01b      	b.n	8115a98 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8115a60:	69bb      	ldr	r3, [r7, #24]
 8115a62:	2b00      	cmp	r3, #0
 8115a64:	d002      	beq.n	8115a6c <osMessageQueueGet+0x80>
 8115a66:	68bb      	ldr	r3, [r7, #8]
 8115a68:	2b00      	cmp	r3, #0
 8115a6a:	d103      	bne.n	8115a74 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8115a6c:	f06f 0303 	mvn.w	r3, #3
 8115a70:	61fb      	str	r3, [r7, #28]
 8115a72:	e011      	b.n	8115a98 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8115a74:	683a      	ldr	r2, [r7, #0]
 8115a76:	68b9      	ldr	r1, [r7, #8]
 8115a78:	69b8      	ldr	r0, [r7, #24]
 8115a7a:	f001 f80d 	bl	8116a98 <xQueueReceive>
 8115a7e:	4603      	mov	r3, r0
 8115a80:	2b01      	cmp	r3, #1
 8115a82:	d009      	beq.n	8115a98 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8115a84:	683b      	ldr	r3, [r7, #0]
 8115a86:	2b00      	cmp	r3, #0
 8115a88:	d003      	beq.n	8115a92 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8115a8a:	f06f 0301 	mvn.w	r3, #1
 8115a8e:	61fb      	str	r3, [r7, #28]
 8115a90:	e002      	b.n	8115a98 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8115a92:	f06f 0302 	mvn.w	r3, #2
 8115a96:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8115a98:	69fb      	ldr	r3, [r7, #28]
}
 8115a9a:	4618      	mov	r0, r3
 8115a9c:	3720      	adds	r7, #32
 8115a9e:	46bd      	mov	sp, r7
 8115aa0:	bd80      	pop	{r7, pc}
 8115aa2:	bf00      	nop
 8115aa4:	e000ed04 	.word	0xe000ed04

08115aa8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8115aa8:	b480      	push	{r7}
 8115aaa:	b085      	sub	sp, #20
 8115aac:	af00      	add	r7, sp, #0
 8115aae:	60f8      	str	r0, [r7, #12]
 8115ab0:	60b9      	str	r1, [r7, #8]
 8115ab2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8115ab4:	68fb      	ldr	r3, [r7, #12]
 8115ab6:	4a07      	ldr	r2, [pc, #28]	; (8115ad4 <vApplicationGetIdleTaskMemory+0x2c>)
 8115ab8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8115aba:	68bb      	ldr	r3, [r7, #8]
 8115abc:	4a06      	ldr	r2, [pc, #24]	; (8115ad8 <vApplicationGetIdleTaskMemory+0x30>)
 8115abe:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8115ac0:	687b      	ldr	r3, [r7, #4]
 8115ac2:	2280      	movs	r2, #128	; 0x80
 8115ac4:	601a      	str	r2, [r3, #0]
}
 8115ac6:	bf00      	nop
 8115ac8:	3714      	adds	r7, #20
 8115aca:	46bd      	mov	sp, r7
 8115acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8115ad0:	4770      	bx	lr
 8115ad2:	bf00      	nop
 8115ad4:	1000039c 	.word	0x1000039c
 8115ad8:	100003f8 	.word	0x100003f8

08115adc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8115adc:	b480      	push	{r7}
 8115ade:	b085      	sub	sp, #20
 8115ae0:	af00      	add	r7, sp, #0
 8115ae2:	60f8      	str	r0, [r7, #12]
 8115ae4:	60b9      	str	r1, [r7, #8]
 8115ae6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8115ae8:	68fb      	ldr	r3, [r7, #12]
 8115aea:	4a07      	ldr	r2, [pc, #28]	; (8115b08 <vApplicationGetTimerTaskMemory+0x2c>)
 8115aec:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8115aee:	68bb      	ldr	r3, [r7, #8]
 8115af0:	4a06      	ldr	r2, [pc, #24]	; (8115b0c <vApplicationGetTimerTaskMemory+0x30>)
 8115af2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8115af4:	687b      	ldr	r3, [r7, #4]
 8115af6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8115afa:	601a      	str	r2, [r3, #0]
}
 8115afc:	bf00      	nop
 8115afe:	3714      	adds	r7, #20
 8115b00:	46bd      	mov	sp, r7
 8115b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8115b06:	4770      	bx	lr
 8115b08:	100005f8 	.word	0x100005f8
 8115b0c:	10000654 	.word	0x10000654

08115b10 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8115b10:	b580      	push	{r7, lr}
 8115b12:	b08a      	sub	sp, #40	; 0x28
 8115b14:	af00      	add	r7, sp, #0
 8115b16:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8115b18:	2300      	movs	r3, #0
 8115b1a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8115b1c:	f001 fcc6 	bl	81174ac <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8115b20:	4b5b      	ldr	r3, [pc, #364]	; (8115c90 <pvPortMalloc+0x180>)
 8115b22:	681b      	ldr	r3, [r3, #0]
 8115b24:	2b00      	cmp	r3, #0
 8115b26:	d101      	bne.n	8115b2c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8115b28:	f000 f920 	bl	8115d6c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8115b2c:	4b59      	ldr	r3, [pc, #356]	; (8115c94 <pvPortMalloc+0x184>)
 8115b2e:	681a      	ldr	r2, [r3, #0]
 8115b30:	687b      	ldr	r3, [r7, #4]
 8115b32:	4013      	ands	r3, r2
 8115b34:	2b00      	cmp	r3, #0
 8115b36:	f040 8093 	bne.w	8115c60 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8115b3a:	687b      	ldr	r3, [r7, #4]
 8115b3c:	2b00      	cmp	r3, #0
 8115b3e:	d01d      	beq.n	8115b7c <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8115b40:	2208      	movs	r2, #8
 8115b42:	687b      	ldr	r3, [r7, #4]
 8115b44:	4413      	add	r3, r2
 8115b46:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8115b48:	687b      	ldr	r3, [r7, #4]
 8115b4a:	f003 0307 	and.w	r3, r3, #7
 8115b4e:	2b00      	cmp	r3, #0
 8115b50:	d014      	beq.n	8115b7c <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8115b52:	687b      	ldr	r3, [r7, #4]
 8115b54:	f023 0307 	bic.w	r3, r3, #7
 8115b58:	3308      	adds	r3, #8
 8115b5a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8115b5c:	687b      	ldr	r3, [r7, #4]
 8115b5e:	f003 0307 	and.w	r3, r3, #7
 8115b62:	2b00      	cmp	r3, #0
 8115b64:	d00a      	beq.n	8115b7c <pvPortMalloc+0x6c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8115b66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8115b6a:	f383 8811 	msr	BASEPRI, r3
 8115b6e:	f3bf 8f6f 	isb	sy
 8115b72:	f3bf 8f4f 	dsb	sy
 8115b76:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8115b78:	bf00      	nop
 8115b7a:	e7fe      	b.n	8115b7a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8115b7c:	687b      	ldr	r3, [r7, #4]
 8115b7e:	2b00      	cmp	r3, #0
 8115b80:	d06e      	beq.n	8115c60 <pvPortMalloc+0x150>
 8115b82:	4b45      	ldr	r3, [pc, #276]	; (8115c98 <pvPortMalloc+0x188>)
 8115b84:	681b      	ldr	r3, [r3, #0]
 8115b86:	687a      	ldr	r2, [r7, #4]
 8115b88:	429a      	cmp	r2, r3
 8115b8a:	d869      	bhi.n	8115c60 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8115b8c:	4b43      	ldr	r3, [pc, #268]	; (8115c9c <pvPortMalloc+0x18c>)
 8115b8e:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8115b90:	4b42      	ldr	r3, [pc, #264]	; (8115c9c <pvPortMalloc+0x18c>)
 8115b92:	681b      	ldr	r3, [r3, #0]
 8115b94:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8115b96:	e004      	b.n	8115ba2 <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8115b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8115b9a:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8115b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8115b9e:	681b      	ldr	r3, [r3, #0]
 8115ba0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8115ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8115ba4:	685b      	ldr	r3, [r3, #4]
 8115ba6:	687a      	ldr	r2, [r7, #4]
 8115ba8:	429a      	cmp	r2, r3
 8115baa:	d903      	bls.n	8115bb4 <pvPortMalloc+0xa4>
 8115bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8115bae:	681b      	ldr	r3, [r3, #0]
 8115bb0:	2b00      	cmp	r3, #0
 8115bb2:	d1f1      	bne.n	8115b98 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8115bb4:	4b36      	ldr	r3, [pc, #216]	; (8115c90 <pvPortMalloc+0x180>)
 8115bb6:	681b      	ldr	r3, [r3, #0]
 8115bb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8115bba:	429a      	cmp	r2, r3
 8115bbc:	d050      	beq.n	8115c60 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8115bbe:	6a3b      	ldr	r3, [r7, #32]
 8115bc0:	681b      	ldr	r3, [r3, #0]
 8115bc2:	2208      	movs	r2, #8
 8115bc4:	4413      	add	r3, r2
 8115bc6:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8115bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8115bca:	681a      	ldr	r2, [r3, #0]
 8115bcc:	6a3b      	ldr	r3, [r7, #32]
 8115bce:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8115bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8115bd2:	685a      	ldr	r2, [r3, #4]
 8115bd4:	687b      	ldr	r3, [r7, #4]
 8115bd6:	1ad2      	subs	r2, r2, r3
 8115bd8:	2308      	movs	r3, #8
 8115bda:	005b      	lsls	r3, r3, #1
 8115bdc:	429a      	cmp	r2, r3
 8115bde:	d91f      	bls.n	8115c20 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8115be0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8115be2:	687b      	ldr	r3, [r7, #4]
 8115be4:	4413      	add	r3, r2
 8115be6:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8115be8:	69bb      	ldr	r3, [r7, #24]
 8115bea:	f003 0307 	and.w	r3, r3, #7
 8115bee:	2b00      	cmp	r3, #0
 8115bf0:	d00a      	beq.n	8115c08 <pvPortMalloc+0xf8>
	__asm volatile
 8115bf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8115bf6:	f383 8811 	msr	BASEPRI, r3
 8115bfa:	f3bf 8f6f 	isb	sy
 8115bfe:	f3bf 8f4f 	dsb	sy
 8115c02:	613b      	str	r3, [r7, #16]
}
 8115c04:	bf00      	nop
 8115c06:	e7fe      	b.n	8115c06 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8115c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8115c0a:	685a      	ldr	r2, [r3, #4]
 8115c0c:	687b      	ldr	r3, [r7, #4]
 8115c0e:	1ad2      	subs	r2, r2, r3
 8115c10:	69bb      	ldr	r3, [r7, #24]
 8115c12:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8115c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8115c16:	687a      	ldr	r2, [r7, #4]
 8115c18:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8115c1a:	69b8      	ldr	r0, [r7, #24]
 8115c1c:	f000 f908 	bl	8115e30 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8115c20:	4b1d      	ldr	r3, [pc, #116]	; (8115c98 <pvPortMalloc+0x188>)
 8115c22:	681a      	ldr	r2, [r3, #0]
 8115c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8115c26:	685b      	ldr	r3, [r3, #4]
 8115c28:	1ad3      	subs	r3, r2, r3
 8115c2a:	4a1b      	ldr	r2, [pc, #108]	; (8115c98 <pvPortMalloc+0x188>)
 8115c2c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8115c2e:	4b1a      	ldr	r3, [pc, #104]	; (8115c98 <pvPortMalloc+0x188>)
 8115c30:	681a      	ldr	r2, [r3, #0]
 8115c32:	4b1b      	ldr	r3, [pc, #108]	; (8115ca0 <pvPortMalloc+0x190>)
 8115c34:	681b      	ldr	r3, [r3, #0]
 8115c36:	429a      	cmp	r2, r3
 8115c38:	d203      	bcs.n	8115c42 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8115c3a:	4b17      	ldr	r3, [pc, #92]	; (8115c98 <pvPortMalloc+0x188>)
 8115c3c:	681b      	ldr	r3, [r3, #0]
 8115c3e:	4a18      	ldr	r2, [pc, #96]	; (8115ca0 <pvPortMalloc+0x190>)
 8115c40:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8115c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8115c44:	685a      	ldr	r2, [r3, #4]
 8115c46:	4b13      	ldr	r3, [pc, #76]	; (8115c94 <pvPortMalloc+0x184>)
 8115c48:	681b      	ldr	r3, [r3, #0]
 8115c4a:	431a      	orrs	r2, r3
 8115c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8115c4e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8115c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8115c52:	2200      	movs	r2, #0
 8115c54:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8115c56:	4b13      	ldr	r3, [pc, #76]	; (8115ca4 <pvPortMalloc+0x194>)
 8115c58:	681b      	ldr	r3, [r3, #0]
 8115c5a:	3301      	adds	r3, #1
 8115c5c:	4a11      	ldr	r2, [pc, #68]	; (8115ca4 <pvPortMalloc+0x194>)
 8115c5e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8115c60:	f001 fc32 	bl	81174c8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8115c64:	69fb      	ldr	r3, [r7, #28]
 8115c66:	f003 0307 	and.w	r3, r3, #7
 8115c6a:	2b00      	cmp	r3, #0
 8115c6c:	d00a      	beq.n	8115c84 <pvPortMalloc+0x174>
	__asm volatile
 8115c6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8115c72:	f383 8811 	msr	BASEPRI, r3
 8115c76:	f3bf 8f6f 	isb	sy
 8115c7a:	f3bf 8f4f 	dsb	sy
 8115c7e:	60fb      	str	r3, [r7, #12]
}
 8115c80:	bf00      	nop
 8115c82:	e7fe      	b.n	8115c82 <pvPortMalloc+0x172>
	return pvReturn;
 8115c84:	69fb      	ldr	r3, [r7, #28]
}
 8115c86:	4618      	mov	r0, r3
 8115c88:	3728      	adds	r7, #40	; 0x28
 8115c8a:	46bd      	mov	sp, r7
 8115c8c:	bd80      	pop	{r7, pc}
 8115c8e:	bf00      	nop
 8115c90:	1000465c 	.word	0x1000465c
 8115c94:	10004670 	.word	0x10004670
 8115c98:	10004660 	.word	0x10004660
 8115c9c:	10004654 	.word	0x10004654
 8115ca0:	10004664 	.word	0x10004664
 8115ca4:	10004668 	.word	0x10004668

08115ca8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8115ca8:	b580      	push	{r7, lr}
 8115caa:	b086      	sub	sp, #24
 8115cac:	af00      	add	r7, sp, #0
 8115cae:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8115cb0:	687b      	ldr	r3, [r7, #4]
 8115cb2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8115cb4:	687b      	ldr	r3, [r7, #4]
 8115cb6:	2b00      	cmp	r3, #0
 8115cb8:	d04d      	beq.n	8115d56 <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8115cba:	2308      	movs	r3, #8
 8115cbc:	425b      	negs	r3, r3
 8115cbe:	697a      	ldr	r2, [r7, #20]
 8115cc0:	4413      	add	r3, r2
 8115cc2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8115cc4:	697b      	ldr	r3, [r7, #20]
 8115cc6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8115cc8:	693b      	ldr	r3, [r7, #16]
 8115cca:	685a      	ldr	r2, [r3, #4]
 8115ccc:	4b24      	ldr	r3, [pc, #144]	; (8115d60 <vPortFree+0xb8>)
 8115cce:	681b      	ldr	r3, [r3, #0]
 8115cd0:	4013      	ands	r3, r2
 8115cd2:	2b00      	cmp	r3, #0
 8115cd4:	d10a      	bne.n	8115cec <vPortFree+0x44>
	__asm volatile
 8115cd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8115cda:	f383 8811 	msr	BASEPRI, r3
 8115cde:	f3bf 8f6f 	isb	sy
 8115ce2:	f3bf 8f4f 	dsb	sy
 8115ce6:	60fb      	str	r3, [r7, #12]
}
 8115ce8:	bf00      	nop
 8115cea:	e7fe      	b.n	8115cea <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8115cec:	693b      	ldr	r3, [r7, #16]
 8115cee:	681b      	ldr	r3, [r3, #0]
 8115cf0:	2b00      	cmp	r3, #0
 8115cf2:	d00a      	beq.n	8115d0a <vPortFree+0x62>
	__asm volatile
 8115cf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8115cf8:	f383 8811 	msr	BASEPRI, r3
 8115cfc:	f3bf 8f6f 	isb	sy
 8115d00:	f3bf 8f4f 	dsb	sy
 8115d04:	60bb      	str	r3, [r7, #8]
}
 8115d06:	bf00      	nop
 8115d08:	e7fe      	b.n	8115d08 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8115d0a:	693b      	ldr	r3, [r7, #16]
 8115d0c:	685a      	ldr	r2, [r3, #4]
 8115d0e:	4b14      	ldr	r3, [pc, #80]	; (8115d60 <vPortFree+0xb8>)
 8115d10:	681b      	ldr	r3, [r3, #0]
 8115d12:	4013      	ands	r3, r2
 8115d14:	2b00      	cmp	r3, #0
 8115d16:	d01e      	beq.n	8115d56 <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8115d18:	693b      	ldr	r3, [r7, #16]
 8115d1a:	681b      	ldr	r3, [r3, #0]
 8115d1c:	2b00      	cmp	r3, #0
 8115d1e:	d11a      	bne.n	8115d56 <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8115d20:	693b      	ldr	r3, [r7, #16]
 8115d22:	685a      	ldr	r2, [r3, #4]
 8115d24:	4b0e      	ldr	r3, [pc, #56]	; (8115d60 <vPortFree+0xb8>)
 8115d26:	681b      	ldr	r3, [r3, #0]
 8115d28:	43db      	mvns	r3, r3
 8115d2a:	401a      	ands	r2, r3
 8115d2c:	693b      	ldr	r3, [r7, #16]
 8115d2e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8115d30:	f001 fbbc 	bl	81174ac <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8115d34:	693b      	ldr	r3, [r7, #16]
 8115d36:	685a      	ldr	r2, [r3, #4]
 8115d38:	4b0a      	ldr	r3, [pc, #40]	; (8115d64 <vPortFree+0xbc>)
 8115d3a:	681b      	ldr	r3, [r3, #0]
 8115d3c:	4413      	add	r3, r2
 8115d3e:	4a09      	ldr	r2, [pc, #36]	; (8115d64 <vPortFree+0xbc>)
 8115d40:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8115d42:	6938      	ldr	r0, [r7, #16]
 8115d44:	f000 f874 	bl	8115e30 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8115d48:	4b07      	ldr	r3, [pc, #28]	; (8115d68 <vPortFree+0xc0>)
 8115d4a:	681b      	ldr	r3, [r3, #0]
 8115d4c:	3301      	adds	r3, #1
 8115d4e:	4a06      	ldr	r2, [pc, #24]	; (8115d68 <vPortFree+0xc0>)
 8115d50:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8115d52:	f001 fbb9 	bl	81174c8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8115d56:	bf00      	nop
 8115d58:	3718      	adds	r7, #24
 8115d5a:	46bd      	mov	sp, r7
 8115d5c:	bd80      	pop	{r7, pc}
 8115d5e:	bf00      	nop
 8115d60:	10004670 	.word	0x10004670
 8115d64:	10004660 	.word	0x10004660
 8115d68:	1000466c 	.word	0x1000466c

08115d6c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8115d6c:	b480      	push	{r7}
 8115d6e:	b085      	sub	sp, #20
 8115d70:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8115d72:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8115d76:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8115d78:	4b27      	ldr	r3, [pc, #156]	; (8115e18 <prvHeapInit+0xac>)
 8115d7a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8115d7c:	68fb      	ldr	r3, [r7, #12]
 8115d7e:	f003 0307 	and.w	r3, r3, #7
 8115d82:	2b00      	cmp	r3, #0
 8115d84:	d00c      	beq.n	8115da0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8115d86:	68fb      	ldr	r3, [r7, #12]
 8115d88:	3307      	adds	r3, #7
 8115d8a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8115d8c:	68fb      	ldr	r3, [r7, #12]
 8115d8e:	f023 0307 	bic.w	r3, r3, #7
 8115d92:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8115d94:	68ba      	ldr	r2, [r7, #8]
 8115d96:	68fb      	ldr	r3, [r7, #12]
 8115d98:	1ad3      	subs	r3, r2, r3
 8115d9a:	4a1f      	ldr	r2, [pc, #124]	; (8115e18 <prvHeapInit+0xac>)
 8115d9c:	4413      	add	r3, r2
 8115d9e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8115da0:	68fb      	ldr	r3, [r7, #12]
 8115da2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8115da4:	4a1d      	ldr	r2, [pc, #116]	; (8115e1c <prvHeapInit+0xb0>)
 8115da6:	687b      	ldr	r3, [r7, #4]
 8115da8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8115daa:	4b1c      	ldr	r3, [pc, #112]	; (8115e1c <prvHeapInit+0xb0>)
 8115dac:	2200      	movs	r2, #0
 8115dae:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8115db0:	687b      	ldr	r3, [r7, #4]
 8115db2:	68ba      	ldr	r2, [r7, #8]
 8115db4:	4413      	add	r3, r2
 8115db6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8115db8:	2208      	movs	r2, #8
 8115dba:	68fb      	ldr	r3, [r7, #12]
 8115dbc:	1a9b      	subs	r3, r3, r2
 8115dbe:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8115dc0:	68fb      	ldr	r3, [r7, #12]
 8115dc2:	f023 0307 	bic.w	r3, r3, #7
 8115dc6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8115dc8:	68fb      	ldr	r3, [r7, #12]
 8115dca:	4a15      	ldr	r2, [pc, #84]	; (8115e20 <prvHeapInit+0xb4>)
 8115dcc:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8115dce:	4b14      	ldr	r3, [pc, #80]	; (8115e20 <prvHeapInit+0xb4>)
 8115dd0:	681b      	ldr	r3, [r3, #0]
 8115dd2:	2200      	movs	r2, #0
 8115dd4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8115dd6:	4b12      	ldr	r3, [pc, #72]	; (8115e20 <prvHeapInit+0xb4>)
 8115dd8:	681b      	ldr	r3, [r3, #0]
 8115dda:	2200      	movs	r2, #0
 8115ddc:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8115dde:	687b      	ldr	r3, [r7, #4]
 8115de0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8115de2:	683b      	ldr	r3, [r7, #0]
 8115de4:	68fa      	ldr	r2, [r7, #12]
 8115de6:	1ad2      	subs	r2, r2, r3
 8115de8:	683b      	ldr	r3, [r7, #0]
 8115dea:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8115dec:	4b0c      	ldr	r3, [pc, #48]	; (8115e20 <prvHeapInit+0xb4>)
 8115dee:	681a      	ldr	r2, [r3, #0]
 8115df0:	683b      	ldr	r3, [r7, #0]
 8115df2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8115df4:	683b      	ldr	r3, [r7, #0]
 8115df6:	685b      	ldr	r3, [r3, #4]
 8115df8:	4a0a      	ldr	r2, [pc, #40]	; (8115e24 <prvHeapInit+0xb8>)
 8115dfa:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8115dfc:	683b      	ldr	r3, [r7, #0]
 8115dfe:	685b      	ldr	r3, [r3, #4]
 8115e00:	4a09      	ldr	r2, [pc, #36]	; (8115e28 <prvHeapInit+0xbc>)
 8115e02:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8115e04:	4b09      	ldr	r3, [pc, #36]	; (8115e2c <prvHeapInit+0xc0>)
 8115e06:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8115e0a:	601a      	str	r2, [r3, #0]
}
 8115e0c:	bf00      	nop
 8115e0e:	3714      	adds	r7, #20
 8115e10:	46bd      	mov	sp, r7
 8115e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8115e16:	4770      	bx	lr
 8115e18:	10000a54 	.word	0x10000a54
 8115e1c:	10004654 	.word	0x10004654
 8115e20:	1000465c 	.word	0x1000465c
 8115e24:	10004664 	.word	0x10004664
 8115e28:	10004660 	.word	0x10004660
 8115e2c:	10004670 	.word	0x10004670

08115e30 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8115e30:	b480      	push	{r7}
 8115e32:	b085      	sub	sp, #20
 8115e34:	af00      	add	r7, sp, #0
 8115e36:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8115e38:	4b28      	ldr	r3, [pc, #160]	; (8115edc <prvInsertBlockIntoFreeList+0xac>)
 8115e3a:	60fb      	str	r3, [r7, #12]
 8115e3c:	e002      	b.n	8115e44 <prvInsertBlockIntoFreeList+0x14>
 8115e3e:	68fb      	ldr	r3, [r7, #12]
 8115e40:	681b      	ldr	r3, [r3, #0]
 8115e42:	60fb      	str	r3, [r7, #12]
 8115e44:	68fb      	ldr	r3, [r7, #12]
 8115e46:	681b      	ldr	r3, [r3, #0]
 8115e48:	687a      	ldr	r2, [r7, #4]
 8115e4a:	429a      	cmp	r2, r3
 8115e4c:	d8f7      	bhi.n	8115e3e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8115e4e:	68fb      	ldr	r3, [r7, #12]
 8115e50:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8115e52:	68fb      	ldr	r3, [r7, #12]
 8115e54:	685b      	ldr	r3, [r3, #4]
 8115e56:	68ba      	ldr	r2, [r7, #8]
 8115e58:	4413      	add	r3, r2
 8115e5a:	687a      	ldr	r2, [r7, #4]
 8115e5c:	429a      	cmp	r2, r3
 8115e5e:	d108      	bne.n	8115e72 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8115e60:	68fb      	ldr	r3, [r7, #12]
 8115e62:	685a      	ldr	r2, [r3, #4]
 8115e64:	687b      	ldr	r3, [r7, #4]
 8115e66:	685b      	ldr	r3, [r3, #4]
 8115e68:	441a      	add	r2, r3
 8115e6a:	68fb      	ldr	r3, [r7, #12]
 8115e6c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8115e6e:	68fb      	ldr	r3, [r7, #12]
 8115e70:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8115e72:	687b      	ldr	r3, [r7, #4]
 8115e74:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8115e76:	687b      	ldr	r3, [r7, #4]
 8115e78:	685b      	ldr	r3, [r3, #4]
 8115e7a:	68ba      	ldr	r2, [r7, #8]
 8115e7c:	441a      	add	r2, r3
 8115e7e:	68fb      	ldr	r3, [r7, #12]
 8115e80:	681b      	ldr	r3, [r3, #0]
 8115e82:	429a      	cmp	r2, r3
 8115e84:	d118      	bne.n	8115eb8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8115e86:	68fb      	ldr	r3, [r7, #12]
 8115e88:	681a      	ldr	r2, [r3, #0]
 8115e8a:	4b15      	ldr	r3, [pc, #84]	; (8115ee0 <prvInsertBlockIntoFreeList+0xb0>)
 8115e8c:	681b      	ldr	r3, [r3, #0]
 8115e8e:	429a      	cmp	r2, r3
 8115e90:	d00d      	beq.n	8115eae <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8115e92:	687b      	ldr	r3, [r7, #4]
 8115e94:	685a      	ldr	r2, [r3, #4]
 8115e96:	68fb      	ldr	r3, [r7, #12]
 8115e98:	681b      	ldr	r3, [r3, #0]
 8115e9a:	685b      	ldr	r3, [r3, #4]
 8115e9c:	441a      	add	r2, r3
 8115e9e:	687b      	ldr	r3, [r7, #4]
 8115ea0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8115ea2:	68fb      	ldr	r3, [r7, #12]
 8115ea4:	681b      	ldr	r3, [r3, #0]
 8115ea6:	681a      	ldr	r2, [r3, #0]
 8115ea8:	687b      	ldr	r3, [r7, #4]
 8115eaa:	601a      	str	r2, [r3, #0]
 8115eac:	e008      	b.n	8115ec0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8115eae:	4b0c      	ldr	r3, [pc, #48]	; (8115ee0 <prvInsertBlockIntoFreeList+0xb0>)
 8115eb0:	681a      	ldr	r2, [r3, #0]
 8115eb2:	687b      	ldr	r3, [r7, #4]
 8115eb4:	601a      	str	r2, [r3, #0]
 8115eb6:	e003      	b.n	8115ec0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8115eb8:	68fb      	ldr	r3, [r7, #12]
 8115eba:	681a      	ldr	r2, [r3, #0]
 8115ebc:	687b      	ldr	r3, [r7, #4]
 8115ebe:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8115ec0:	68fa      	ldr	r2, [r7, #12]
 8115ec2:	687b      	ldr	r3, [r7, #4]
 8115ec4:	429a      	cmp	r2, r3
 8115ec6:	d002      	beq.n	8115ece <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8115ec8:	68fb      	ldr	r3, [r7, #12]
 8115eca:	687a      	ldr	r2, [r7, #4]
 8115ecc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8115ece:	bf00      	nop
 8115ed0:	3714      	adds	r7, #20
 8115ed2:	46bd      	mov	sp, r7
 8115ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8115ed8:	4770      	bx	lr
 8115eda:	bf00      	nop
 8115edc:	10004654 	.word	0x10004654
 8115ee0:	1000465c 	.word	0x1000465c

08115ee4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8115ee4:	b480      	push	{r7}
 8115ee6:	b083      	sub	sp, #12
 8115ee8:	af00      	add	r7, sp, #0
 8115eea:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8115eec:	687b      	ldr	r3, [r7, #4]
 8115eee:	f103 0208 	add.w	r2, r3, #8
 8115ef2:	687b      	ldr	r3, [r7, #4]
 8115ef4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8115ef6:	687b      	ldr	r3, [r7, #4]
 8115ef8:	f04f 32ff 	mov.w	r2, #4294967295
 8115efc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8115efe:	687b      	ldr	r3, [r7, #4]
 8115f00:	f103 0208 	add.w	r2, r3, #8
 8115f04:	687b      	ldr	r3, [r7, #4]
 8115f06:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8115f08:	687b      	ldr	r3, [r7, #4]
 8115f0a:	f103 0208 	add.w	r2, r3, #8
 8115f0e:	687b      	ldr	r3, [r7, #4]
 8115f10:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8115f12:	687b      	ldr	r3, [r7, #4]
 8115f14:	2200      	movs	r2, #0
 8115f16:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8115f18:	bf00      	nop
 8115f1a:	370c      	adds	r7, #12
 8115f1c:	46bd      	mov	sp, r7
 8115f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8115f22:	4770      	bx	lr

08115f24 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8115f24:	b480      	push	{r7}
 8115f26:	b083      	sub	sp, #12
 8115f28:	af00      	add	r7, sp, #0
 8115f2a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8115f2c:	687b      	ldr	r3, [r7, #4]
 8115f2e:	2200      	movs	r2, #0
 8115f30:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8115f32:	bf00      	nop
 8115f34:	370c      	adds	r7, #12
 8115f36:	46bd      	mov	sp, r7
 8115f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8115f3c:	4770      	bx	lr

08115f3e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8115f3e:	b480      	push	{r7}
 8115f40:	b085      	sub	sp, #20
 8115f42:	af00      	add	r7, sp, #0
 8115f44:	6078      	str	r0, [r7, #4]
 8115f46:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8115f48:	687b      	ldr	r3, [r7, #4]
 8115f4a:	685b      	ldr	r3, [r3, #4]
 8115f4c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8115f4e:	683b      	ldr	r3, [r7, #0]
 8115f50:	68fa      	ldr	r2, [r7, #12]
 8115f52:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8115f54:	68fb      	ldr	r3, [r7, #12]
 8115f56:	689a      	ldr	r2, [r3, #8]
 8115f58:	683b      	ldr	r3, [r7, #0]
 8115f5a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8115f5c:	68fb      	ldr	r3, [r7, #12]
 8115f5e:	689b      	ldr	r3, [r3, #8]
 8115f60:	683a      	ldr	r2, [r7, #0]
 8115f62:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8115f64:	68fb      	ldr	r3, [r7, #12]
 8115f66:	683a      	ldr	r2, [r7, #0]
 8115f68:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8115f6a:	683b      	ldr	r3, [r7, #0]
 8115f6c:	687a      	ldr	r2, [r7, #4]
 8115f6e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8115f70:	687b      	ldr	r3, [r7, #4]
 8115f72:	681b      	ldr	r3, [r3, #0]
 8115f74:	1c5a      	adds	r2, r3, #1
 8115f76:	687b      	ldr	r3, [r7, #4]
 8115f78:	601a      	str	r2, [r3, #0]
}
 8115f7a:	bf00      	nop
 8115f7c:	3714      	adds	r7, #20
 8115f7e:	46bd      	mov	sp, r7
 8115f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8115f84:	4770      	bx	lr

08115f86 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8115f86:	b480      	push	{r7}
 8115f88:	b085      	sub	sp, #20
 8115f8a:	af00      	add	r7, sp, #0
 8115f8c:	6078      	str	r0, [r7, #4]
 8115f8e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8115f90:	683b      	ldr	r3, [r7, #0]
 8115f92:	681b      	ldr	r3, [r3, #0]
 8115f94:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8115f96:	68bb      	ldr	r3, [r7, #8]
 8115f98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8115f9c:	d103      	bne.n	8115fa6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8115f9e:	687b      	ldr	r3, [r7, #4]
 8115fa0:	691b      	ldr	r3, [r3, #16]
 8115fa2:	60fb      	str	r3, [r7, #12]
 8115fa4:	e00c      	b.n	8115fc0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8115fa6:	687b      	ldr	r3, [r7, #4]
 8115fa8:	3308      	adds	r3, #8
 8115faa:	60fb      	str	r3, [r7, #12]
 8115fac:	e002      	b.n	8115fb4 <vListInsert+0x2e>
 8115fae:	68fb      	ldr	r3, [r7, #12]
 8115fb0:	685b      	ldr	r3, [r3, #4]
 8115fb2:	60fb      	str	r3, [r7, #12]
 8115fb4:	68fb      	ldr	r3, [r7, #12]
 8115fb6:	685b      	ldr	r3, [r3, #4]
 8115fb8:	681b      	ldr	r3, [r3, #0]
 8115fba:	68ba      	ldr	r2, [r7, #8]
 8115fbc:	429a      	cmp	r2, r3
 8115fbe:	d2f6      	bcs.n	8115fae <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8115fc0:	68fb      	ldr	r3, [r7, #12]
 8115fc2:	685a      	ldr	r2, [r3, #4]
 8115fc4:	683b      	ldr	r3, [r7, #0]
 8115fc6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8115fc8:	683b      	ldr	r3, [r7, #0]
 8115fca:	685b      	ldr	r3, [r3, #4]
 8115fcc:	683a      	ldr	r2, [r7, #0]
 8115fce:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8115fd0:	683b      	ldr	r3, [r7, #0]
 8115fd2:	68fa      	ldr	r2, [r7, #12]
 8115fd4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8115fd6:	68fb      	ldr	r3, [r7, #12]
 8115fd8:	683a      	ldr	r2, [r7, #0]
 8115fda:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8115fdc:	683b      	ldr	r3, [r7, #0]
 8115fde:	687a      	ldr	r2, [r7, #4]
 8115fe0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8115fe2:	687b      	ldr	r3, [r7, #4]
 8115fe4:	681b      	ldr	r3, [r3, #0]
 8115fe6:	1c5a      	adds	r2, r3, #1
 8115fe8:	687b      	ldr	r3, [r7, #4]
 8115fea:	601a      	str	r2, [r3, #0]
}
 8115fec:	bf00      	nop
 8115fee:	3714      	adds	r7, #20
 8115ff0:	46bd      	mov	sp, r7
 8115ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8115ff6:	4770      	bx	lr

08115ff8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8115ff8:	b480      	push	{r7}
 8115ffa:	b085      	sub	sp, #20
 8115ffc:	af00      	add	r7, sp, #0
 8115ffe:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8116000:	687b      	ldr	r3, [r7, #4]
 8116002:	691b      	ldr	r3, [r3, #16]
 8116004:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8116006:	687b      	ldr	r3, [r7, #4]
 8116008:	685b      	ldr	r3, [r3, #4]
 811600a:	687a      	ldr	r2, [r7, #4]
 811600c:	6892      	ldr	r2, [r2, #8]
 811600e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8116010:	687b      	ldr	r3, [r7, #4]
 8116012:	689b      	ldr	r3, [r3, #8]
 8116014:	687a      	ldr	r2, [r7, #4]
 8116016:	6852      	ldr	r2, [r2, #4]
 8116018:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 811601a:	68fb      	ldr	r3, [r7, #12]
 811601c:	685b      	ldr	r3, [r3, #4]
 811601e:	687a      	ldr	r2, [r7, #4]
 8116020:	429a      	cmp	r2, r3
 8116022:	d103      	bne.n	811602c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8116024:	687b      	ldr	r3, [r7, #4]
 8116026:	689a      	ldr	r2, [r3, #8]
 8116028:	68fb      	ldr	r3, [r7, #12]
 811602a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 811602c:	687b      	ldr	r3, [r7, #4]
 811602e:	2200      	movs	r2, #0
 8116030:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8116032:	68fb      	ldr	r3, [r7, #12]
 8116034:	681b      	ldr	r3, [r3, #0]
 8116036:	1e5a      	subs	r2, r3, #1
 8116038:	68fb      	ldr	r3, [r7, #12]
 811603a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 811603c:	68fb      	ldr	r3, [r7, #12]
 811603e:	681b      	ldr	r3, [r3, #0]
}
 8116040:	4618      	mov	r0, r3
 8116042:	3714      	adds	r7, #20
 8116044:	46bd      	mov	sp, r7
 8116046:	f85d 7b04 	ldr.w	r7, [sp], #4
 811604a:	4770      	bx	lr

0811604c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 811604c:	b480      	push	{r7}
 811604e:	b085      	sub	sp, #20
 8116050:	af00      	add	r7, sp, #0
 8116052:	60f8      	str	r0, [r7, #12]
 8116054:	60b9      	str	r1, [r7, #8]
 8116056:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8116058:	68fb      	ldr	r3, [r7, #12]
 811605a:	3b04      	subs	r3, #4
 811605c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 811605e:	68fb      	ldr	r3, [r7, #12]
 8116060:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8116064:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8116066:	68fb      	ldr	r3, [r7, #12]
 8116068:	3b04      	subs	r3, #4
 811606a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 811606c:	68bb      	ldr	r3, [r7, #8]
 811606e:	f023 0201 	bic.w	r2, r3, #1
 8116072:	68fb      	ldr	r3, [r7, #12]
 8116074:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8116076:	68fb      	ldr	r3, [r7, #12]
 8116078:	3b04      	subs	r3, #4
 811607a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 811607c:	4a0c      	ldr	r2, [pc, #48]	; (81160b0 <pxPortInitialiseStack+0x64>)
 811607e:	68fb      	ldr	r3, [r7, #12]
 8116080:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8116082:	68fb      	ldr	r3, [r7, #12]
 8116084:	3b14      	subs	r3, #20
 8116086:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8116088:	687a      	ldr	r2, [r7, #4]
 811608a:	68fb      	ldr	r3, [r7, #12]
 811608c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 811608e:	68fb      	ldr	r3, [r7, #12]
 8116090:	3b04      	subs	r3, #4
 8116092:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8116094:	68fb      	ldr	r3, [r7, #12]
 8116096:	f06f 0202 	mvn.w	r2, #2
 811609a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 811609c:	68fb      	ldr	r3, [r7, #12]
 811609e:	3b20      	subs	r3, #32
 81160a0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 81160a2:	68fb      	ldr	r3, [r7, #12]
}
 81160a4:	4618      	mov	r0, r3
 81160a6:	3714      	adds	r7, #20
 81160a8:	46bd      	mov	sp, r7
 81160aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 81160ae:	4770      	bx	lr
 81160b0:	081160b5 	.word	0x081160b5

081160b4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 81160b4:	b480      	push	{r7}
 81160b6:	b085      	sub	sp, #20
 81160b8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 81160ba:	2300      	movs	r3, #0
 81160bc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 81160be:	4b12      	ldr	r3, [pc, #72]	; (8116108 <prvTaskExitError+0x54>)
 81160c0:	681b      	ldr	r3, [r3, #0]
 81160c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 81160c6:	d00a      	beq.n	81160de <prvTaskExitError+0x2a>
	__asm volatile
 81160c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 81160cc:	f383 8811 	msr	BASEPRI, r3
 81160d0:	f3bf 8f6f 	isb	sy
 81160d4:	f3bf 8f4f 	dsb	sy
 81160d8:	60fb      	str	r3, [r7, #12]
}
 81160da:	bf00      	nop
 81160dc:	e7fe      	b.n	81160dc <prvTaskExitError+0x28>
	__asm volatile
 81160de:	f04f 0350 	mov.w	r3, #80	; 0x50
 81160e2:	f383 8811 	msr	BASEPRI, r3
 81160e6:	f3bf 8f6f 	isb	sy
 81160ea:	f3bf 8f4f 	dsb	sy
 81160ee:	60bb      	str	r3, [r7, #8]
}
 81160f0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 81160f2:	bf00      	nop
 81160f4:	687b      	ldr	r3, [r7, #4]
 81160f6:	2b00      	cmp	r3, #0
 81160f8:	d0fc      	beq.n	81160f4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 81160fa:	bf00      	nop
 81160fc:	bf00      	nop
 81160fe:	3714      	adds	r7, #20
 8116100:	46bd      	mov	sp, r7
 8116102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8116106:	4770      	bx	lr
 8116108:	10000120 	.word	0x10000120
 811610c:	00000000 	.word	0x00000000

08116110 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8116110:	4b07      	ldr	r3, [pc, #28]	; (8116130 <pxCurrentTCBConst2>)
 8116112:	6819      	ldr	r1, [r3, #0]
 8116114:	6808      	ldr	r0, [r1, #0]
 8116116:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 811611a:	f380 8809 	msr	PSP, r0
 811611e:	f3bf 8f6f 	isb	sy
 8116122:	f04f 0000 	mov.w	r0, #0
 8116126:	f380 8811 	msr	BASEPRI, r0
 811612a:	4770      	bx	lr
 811612c:	f3af 8000 	nop.w

08116130 <pxCurrentTCBConst2>:
 8116130:	1000467c 	.word	0x1000467c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8116134:	bf00      	nop
 8116136:	bf00      	nop

08116138 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8116138:	4808      	ldr	r0, [pc, #32]	; (811615c <prvPortStartFirstTask+0x24>)
 811613a:	6800      	ldr	r0, [r0, #0]
 811613c:	6800      	ldr	r0, [r0, #0]
 811613e:	f380 8808 	msr	MSP, r0
 8116142:	f04f 0000 	mov.w	r0, #0
 8116146:	f380 8814 	msr	CONTROL, r0
 811614a:	b662      	cpsie	i
 811614c:	b661      	cpsie	f
 811614e:	f3bf 8f4f 	dsb	sy
 8116152:	f3bf 8f6f 	isb	sy
 8116156:	df00      	svc	0
 8116158:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 811615a:	bf00      	nop
 811615c:	e000ed08 	.word	0xe000ed08

08116160 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8116160:	b580      	push	{r7, lr}
 8116162:	b086      	sub	sp, #24
 8116164:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8116166:	4b46      	ldr	r3, [pc, #280]	; (8116280 <xPortStartScheduler+0x120>)
 8116168:	681b      	ldr	r3, [r3, #0]
 811616a:	4a46      	ldr	r2, [pc, #280]	; (8116284 <xPortStartScheduler+0x124>)
 811616c:	4293      	cmp	r3, r2
 811616e:	d10a      	bne.n	8116186 <xPortStartScheduler+0x26>
	__asm volatile
 8116170:	f04f 0350 	mov.w	r3, #80	; 0x50
 8116174:	f383 8811 	msr	BASEPRI, r3
 8116178:	f3bf 8f6f 	isb	sy
 811617c:	f3bf 8f4f 	dsb	sy
 8116180:	613b      	str	r3, [r7, #16]
}
 8116182:	bf00      	nop
 8116184:	e7fe      	b.n	8116184 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8116186:	4b3e      	ldr	r3, [pc, #248]	; (8116280 <xPortStartScheduler+0x120>)
 8116188:	681b      	ldr	r3, [r3, #0]
 811618a:	4a3f      	ldr	r2, [pc, #252]	; (8116288 <xPortStartScheduler+0x128>)
 811618c:	4293      	cmp	r3, r2
 811618e:	d10a      	bne.n	81161a6 <xPortStartScheduler+0x46>
	__asm volatile
 8116190:	f04f 0350 	mov.w	r3, #80	; 0x50
 8116194:	f383 8811 	msr	BASEPRI, r3
 8116198:	f3bf 8f6f 	isb	sy
 811619c:	f3bf 8f4f 	dsb	sy
 81161a0:	60fb      	str	r3, [r7, #12]
}
 81161a2:	bf00      	nop
 81161a4:	e7fe      	b.n	81161a4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 81161a6:	4b39      	ldr	r3, [pc, #228]	; (811628c <xPortStartScheduler+0x12c>)
 81161a8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 81161aa:	697b      	ldr	r3, [r7, #20]
 81161ac:	781b      	ldrb	r3, [r3, #0]
 81161ae:	b2db      	uxtb	r3, r3
 81161b0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 81161b2:	697b      	ldr	r3, [r7, #20]
 81161b4:	22ff      	movs	r2, #255	; 0xff
 81161b6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 81161b8:	697b      	ldr	r3, [r7, #20]
 81161ba:	781b      	ldrb	r3, [r3, #0]
 81161bc:	b2db      	uxtb	r3, r3
 81161be:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 81161c0:	78fb      	ldrb	r3, [r7, #3]
 81161c2:	b2db      	uxtb	r3, r3
 81161c4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 81161c8:	b2da      	uxtb	r2, r3
 81161ca:	4b31      	ldr	r3, [pc, #196]	; (8116290 <xPortStartScheduler+0x130>)
 81161cc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 81161ce:	4b31      	ldr	r3, [pc, #196]	; (8116294 <xPortStartScheduler+0x134>)
 81161d0:	2207      	movs	r2, #7
 81161d2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 81161d4:	e009      	b.n	81161ea <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 81161d6:	4b2f      	ldr	r3, [pc, #188]	; (8116294 <xPortStartScheduler+0x134>)
 81161d8:	681b      	ldr	r3, [r3, #0]
 81161da:	3b01      	subs	r3, #1
 81161dc:	4a2d      	ldr	r2, [pc, #180]	; (8116294 <xPortStartScheduler+0x134>)
 81161de:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 81161e0:	78fb      	ldrb	r3, [r7, #3]
 81161e2:	b2db      	uxtb	r3, r3
 81161e4:	005b      	lsls	r3, r3, #1
 81161e6:	b2db      	uxtb	r3, r3
 81161e8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 81161ea:	78fb      	ldrb	r3, [r7, #3]
 81161ec:	b2db      	uxtb	r3, r3
 81161ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 81161f2:	2b80      	cmp	r3, #128	; 0x80
 81161f4:	d0ef      	beq.n	81161d6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 81161f6:	4b27      	ldr	r3, [pc, #156]	; (8116294 <xPortStartScheduler+0x134>)
 81161f8:	681b      	ldr	r3, [r3, #0]
 81161fa:	f1c3 0307 	rsb	r3, r3, #7
 81161fe:	2b04      	cmp	r3, #4
 8116200:	d00a      	beq.n	8116218 <xPortStartScheduler+0xb8>
	__asm volatile
 8116202:	f04f 0350 	mov.w	r3, #80	; 0x50
 8116206:	f383 8811 	msr	BASEPRI, r3
 811620a:	f3bf 8f6f 	isb	sy
 811620e:	f3bf 8f4f 	dsb	sy
 8116212:	60bb      	str	r3, [r7, #8]
}
 8116214:	bf00      	nop
 8116216:	e7fe      	b.n	8116216 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8116218:	4b1e      	ldr	r3, [pc, #120]	; (8116294 <xPortStartScheduler+0x134>)
 811621a:	681b      	ldr	r3, [r3, #0]
 811621c:	021b      	lsls	r3, r3, #8
 811621e:	4a1d      	ldr	r2, [pc, #116]	; (8116294 <xPortStartScheduler+0x134>)
 8116220:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8116222:	4b1c      	ldr	r3, [pc, #112]	; (8116294 <xPortStartScheduler+0x134>)
 8116224:	681b      	ldr	r3, [r3, #0]
 8116226:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 811622a:	4a1a      	ldr	r2, [pc, #104]	; (8116294 <xPortStartScheduler+0x134>)
 811622c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 811622e:	687b      	ldr	r3, [r7, #4]
 8116230:	b2da      	uxtb	r2, r3
 8116232:	697b      	ldr	r3, [r7, #20]
 8116234:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8116236:	4b18      	ldr	r3, [pc, #96]	; (8116298 <xPortStartScheduler+0x138>)
 8116238:	681b      	ldr	r3, [r3, #0]
 811623a:	4a17      	ldr	r2, [pc, #92]	; (8116298 <xPortStartScheduler+0x138>)
 811623c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8116240:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8116242:	4b15      	ldr	r3, [pc, #84]	; (8116298 <xPortStartScheduler+0x138>)
 8116244:	681b      	ldr	r3, [r3, #0]
 8116246:	4a14      	ldr	r2, [pc, #80]	; (8116298 <xPortStartScheduler+0x138>)
 8116248:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 811624c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 811624e:	f000 f8dd 	bl	811640c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8116252:	4b12      	ldr	r3, [pc, #72]	; (811629c <xPortStartScheduler+0x13c>)
 8116254:	2200      	movs	r2, #0
 8116256:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8116258:	f000 f8fc 	bl	8116454 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 811625c:	4b10      	ldr	r3, [pc, #64]	; (81162a0 <xPortStartScheduler+0x140>)
 811625e:	681b      	ldr	r3, [r3, #0]
 8116260:	4a0f      	ldr	r2, [pc, #60]	; (81162a0 <xPortStartScheduler+0x140>)
 8116262:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8116266:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8116268:	f7ff ff66 	bl	8116138 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 811626c:	f001 faa6 	bl	81177bc <vTaskSwitchContext>
	prvTaskExitError();
 8116270:	f7ff ff20 	bl	81160b4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8116274:	2300      	movs	r3, #0
}
 8116276:	4618      	mov	r0, r3
 8116278:	3718      	adds	r7, #24
 811627a:	46bd      	mov	sp, r7
 811627c:	bd80      	pop	{r7, pc}
 811627e:	bf00      	nop
 8116280:	e000ed00 	.word	0xe000ed00
 8116284:	410fc271 	.word	0x410fc271
 8116288:	410fc270 	.word	0x410fc270
 811628c:	e000e400 	.word	0xe000e400
 8116290:	10004674 	.word	0x10004674
 8116294:	10004678 	.word	0x10004678
 8116298:	e000ed20 	.word	0xe000ed20
 811629c:	10000120 	.word	0x10000120
 81162a0:	e000ef34 	.word	0xe000ef34

081162a4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 81162a4:	b480      	push	{r7}
 81162a6:	b083      	sub	sp, #12
 81162a8:	af00      	add	r7, sp, #0
	__asm volatile
 81162aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 81162ae:	f383 8811 	msr	BASEPRI, r3
 81162b2:	f3bf 8f6f 	isb	sy
 81162b6:	f3bf 8f4f 	dsb	sy
 81162ba:	607b      	str	r3, [r7, #4]
}
 81162bc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 81162be:	4b0f      	ldr	r3, [pc, #60]	; (81162fc <vPortEnterCritical+0x58>)
 81162c0:	681b      	ldr	r3, [r3, #0]
 81162c2:	3301      	adds	r3, #1
 81162c4:	4a0d      	ldr	r2, [pc, #52]	; (81162fc <vPortEnterCritical+0x58>)
 81162c6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 81162c8:	4b0c      	ldr	r3, [pc, #48]	; (81162fc <vPortEnterCritical+0x58>)
 81162ca:	681b      	ldr	r3, [r3, #0]
 81162cc:	2b01      	cmp	r3, #1
 81162ce:	d10f      	bne.n	81162f0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 81162d0:	4b0b      	ldr	r3, [pc, #44]	; (8116300 <vPortEnterCritical+0x5c>)
 81162d2:	681b      	ldr	r3, [r3, #0]
 81162d4:	b2db      	uxtb	r3, r3
 81162d6:	2b00      	cmp	r3, #0
 81162d8:	d00a      	beq.n	81162f0 <vPortEnterCritical+0x4c>
	__asm volatile
 81162da:	f04f 0350 	mov.w	r3, #80	; 0x50
 81162de:	f383 8811 	msr	BASEPRI, r3
 81162e2:	f3bf 8f6f 	isb	sy
 81162e6:	f3bf 8f4f 	dsb	sy
 81162ea:	603b      	str	r3, [r7, #0]
}
 81162ec:	bf00      	nop
 81162ee:	e7fe      	b.n	81162ee <vPortEnterCritical+0x4a>
	}
}
 81162f0:	bf00      	nop
 81162f2:	370c      	adds	r7, #12
 81162f4:	46bd      	mov	sp, r7
 81162f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81162fa:	4770      	bx	lr
 81162fc:	10000120 	.word	0x10000120
 8116300:	e000ed04 	.word	0xe000ed04

08116304 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8116304:	b480      	push	{r7}
 8116306:	b083      	sub	sp, #12
 8116308:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 811630a:	4b12      	ldr	r3, [pc, #72]	; (8116354 <vPortExitCritical+0x50>)
 811630c:	681b      	ldr	r3, [r3, #0]
 811630e:	2b00      	cmp	r3, #0
 8116310:	d10a      	bne.n	8116328 <vPortExitCritical+0x24>
	__asm volatile
 8116312:	f04f 0350 	mov.w	r3, #80	; 0x50
 8116316:	f383 8811 	msr	BASEPRI, r3
 811631a:	f3bf 8f6f 	isb	sy
 811631e:	f3bf 8f4f 	dsb	sy
 8116322:	607b      	str	r3, [r7, #4]
}
 8116324:	bf00      	nop
 8116326:	e7fe      	b.n	8116326 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8116328:	4b0a      	ldr	r3, [pc, #40]	; (8116354 <vPortExitCritical+0x50>)
 811632a:	681b      	ldr	r3, [r3, #0]
 811632c:	3b01      	subs	r3, #1
 811632e:	4a09      	ldr	r2, [pc, #36]	; (8116354 <vPortExitCritical+0x50>)
 8116330:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8116332:	4b08      	ldr	r3, [pc, #32]	; (8116354 <vPortExitCritical+0x50>)
 8116334:	681b      	ldr	r3, [r3, #0]
 8116336:	2b00      	cmp	r3, #0
 8116338:	d105      	bne.n	8116346 <vPortExitCritical+0x42>
 811633a:	2300      	movs	r3, #0
 811633c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 811633e:	683b      	ldr	r3, [r7, #0]
 8116340:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8116344:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8116346:	bf00      	nop
 8116348:	370c      	adds	r7, #12
 811634a:	46bd      	mov	sp, r7
 811634c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8116350:	4770      	bx	lr
 8116352:	bf00      	nop
 8116354:	10000120 	.word	0x10000120
	...

08116360 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8116360:	f3ef 8009 	mrs	r0, PSP
 8116364:	f3bf 8f6f 	isb	sy
 8116368:	4b15      	ldr	r3, [pc, #84]	; (81163c0 <pxCurrentTCBConst>)
 811636a:	681a      	ldr	r2, [r3, #0]
 811636c:	f01e 0f10 	tst.w	lr, #16
 8116370:	bf08      	it	eq
 8116372:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8116376:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 811637a:	6010      	str	r0, [r2, #0]
 811637c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8116380:	f04f 0050 	mov.w	r0, #80	; 0x50
 8116384:	f380 8811 	msr	BASEPRI, r0
 8116388:	f3bf 8f4f 	dsb	sy
 811638c:	f3bf 8f6f 	isb	sy
 8116390:	f001 fa14 	bl	81177bc <vTaskSwitchContext>
 8116394:	f04f 0000 	mov.w	r0, #0
 8116398:	f380 8811 	msr	BASEPRI, r0
 811639c:	bc09      	pop	{r0, r3}
 811639e:	6819      	ldr	r1, [r3, #0]
 81163a0:	6808      	ldr	r0, [r1, #0]
 81163a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 81163a6:	f01e 0f10 	tst.w	lr, #16
 81163aa:	bf08      	it	eq
 81163ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 81163b0:	f380 8809 	msr	PSP, r0
 81163b4:	f3bf 8f6f 	isb	sy
 81163b8:	4770      	bx	lr
 81163ba:	bf00      	nop
 81163bc:	f3af 8000 	nop.w

081163c0 <pxCurrentTCBConst>:
 81163c0:	1000467c 	.word	0x1000467c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 81163c4:	bf00      	nop
 81163c6:	bf00      	nop

081163c8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 81163c8:	b580      	push	{r7, lr}
 81163ca:	b082      	sub	sp, #8
 81163cc:	af00      	add	r7, sp, #0
	__asm volatile
 81163ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 81163d2:	f383 8811 	msr	BASEPRI, r3
 81163d6:	f3bf 8f6f 	isb	sy
 81163da:	f3bf 8f4f 	dsb	sy
 81163de:	607b      	str	r3, [r7, #4]
}
 81163e0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 81163e2:	f001 f931 	bl	8117648 <xTaskIncrementTick>
 81163e6:	4603      	mov	r3, r0
 81163e8:	2b00      	cmp	r3, #0
 81163ea:	d003      	beq.n	81163f4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 81163ec:	4b06      	ldr	r3, [pc, #24]	; (8116408 <xPortSysTickHandler+0x40>)
 81163ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 81163f2:	601a      	str	r2, [r3, #0]
 81163f4:	2300      	movs	r3, #0
 81163f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 81163f8:	683b      	ldr	r3, [r7, #0]
 81163fa:	f383 8811 	msr	BASEPRI, r3
}
 81163fe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8116400:	bf00      	nop
 8116402:	3708      	adds	r7, #8
 8116404:	46bd      	mov	sp, r7
 8116406:	bd80      	pop	{r7, pc}
 8116408:	e000ed04 	.word	0xe000ed04

0811640c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 811640c:	b480      	push	{r7}
 811640e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8116410:	4b0b      	ldr	r3, [pc, #44]	; (8116440 <vPortSetupTimerInterrupt+0x34>)
 8116412:	2200      	movs	r2, #0
 8116414:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8116416:	4b0b      	ldr	r3, [pc, #44]	; (8116444 <vPortSetupTimerInterrupt+0x38>)
 8116418:	2200      	movs	r2, #0
 811641a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 811641c:	4b0a      	ldr	r3, [pc, #40]	; (8116448 <vPortSetupTimerInterrupt+0x3c>)
 811641e:	681b      	ldr	r3, [r3, #0]
 8116420:	4a0a      	ldr	r2, [pc, #40]	; (811644c <vPortSetupTimerInterrupt+0x40>)
 8116422:	fba2 2303 	umull	r2, r3, r2, r3
 8116426:	099b      	lsrs	r3, r3, #6
 8116428:	4a09      	ldr	r2, [pc, #36]	; (8116450 <vPortSetupTimerInterrupt+0x44>)
 811642a:	3b01      	subs	r3, #1
 811642c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 811642e:	4b04      	ldr	r3, [pc, #16]	; (8116440 <vPortSetupTimerInterrupt+0x34>)
 8116430:	2207      	movs	r2, #7
 8116432:	601a      	str	r2, [r3, #0]
}
 8116434:	bf00      	nop
 8116436:	46bd      	mov	sp, r7
 8116438:	f85d 7b04 	ldr.w	r7, [sp], #4
 811643c:	4770      	bx	lr
 811643e:	bf00      	nop
 8116440:	e000e010 	.word	0xe000e010
 8116444:	e000e018 	.word	0xe000e018
 8116448:	10000004 	.word	0x10000004
 811644c:	10624dd3 	.word	0x10624dd3
 8116450:	e000e014 	.word	0xe000e014

08116454 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8116454:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8116464 <vPortEnableVFP+0x10>
 8116458:	6801      	ldr	r1, [r0, #0]
 811645a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 811645e:	6001      	str	r1, [r0, #0]
 8116460:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8116462:	bf00      	nop
 8116464:	e000ed88 	.word	0xe000ed88

08116468 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8116468:	b480      	push	{r7}
 811646a:	b085      	sub	sp, #20
 811646c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 811646e:	f3ef 8305 	mrs	r3, IPSR
 8116472:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8116474:	68fb      	ldr	r3, [r7, #12]
 8116476:	2b0f      	cmp	r3, #15
 8116478:	d914      	bls.n	81164a4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 811647a:	4a17      	ldr	r2, [pc, #92]	; (81164d8 <vPortValidateInterruptPriority+0x70>)
 811647c:	68fb      	ldr	r3, [r7, #12]
 811647e:	4413      	add	r3, r2
 8116480:	781b      	ldrb	r3, [r3, #0]
 8116482:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8116484:	4b15      	ldr	r3, [pc, #84]	; (81164dc <vPortValidateInterruptPriority+0x74>)
 8116486:	781b      	ldrb	r3, [r3, #0]
 8116488:	7afa      	ldrb	r2, [r7, #11]
 811648a:	429a      	cmp	r2, r3
 811648c:	d20a      	bcs.n	81164a4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 811648e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8116492:	f383 8811 	msr	BASEPRI, r3
 8116496:	f3bf 8f6f 	isb	sy
 811649a:	f3bf 8f4f 	dsb	sy
 811649e:	607b      	str	r3, [r7, #4]
}
 81164a0:	bf00      	nop
 81164a2:	e7fe      	b.n	81164a2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 81164a4:	4b0e      	ldr	r3, [pc, #56]	; (81164e0 <vPortValidateInterruptPriority+0x78>)
 81164a6:	681b      	ldr	r3, [r3, #0]
 81164a8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 81164ac:	4b0d      	ldr	r3, [pc, #52]	; (81164e4 <vPortValidateInterruptPriority+0x7c>)
 81164ae:	681b      	ldr	r3, [r3, #0]
 81164b0:	429a      	cmp	r2, r3
 81164b2:	d90a      	bls.n	81164ca <vPortValidateInterruptPriority+0x62>
	__asm volatile
 81164b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 81164b8:	f383 8811 	msr	BASEPRI, r3
 81164bc:	f3bf 8f6f 	isb	sy
 81164c0:	f3bf 8f4f 	dsb	sy
 81164c4:	603b      	str	r3, [r7, #0]
}
 81164c6:	bf00      	nop
 81164c8:	e7fe      	b.n	81164c8 <vPortValidateInterruptPriority+0x60>
	}
 81164ca:	bf00      	nop
 81164cc:	3714      	adds	r7, #20
 81164ce:	46bd      	mov	sp, r7
 81164d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81164d4:	4770      	bx	lr
 81164d6:	bf00      	nop
 81164d8:	e000e3f0 	.word	0xe000e3f0
 81164dc:	10004674 	.word	0x10004674
 81164e0:	e000ed0c 	.word	0xe000ed0c
 81164e4:	10004678 	.word	0x10004678

081164e8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 81164e8:	b580      	push	{r7, lr}
 81164ea:	b084      	sub	sp, #16
 81164ec:	af00      	add	r7, sp, #0
 81164ee:	6078      	str	r0, [r7, #4]
 81164f0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 81164f2:	687b      	ldr	r3, [r7, #4]
 81164f4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 81164f6:	68fb      	ldr	r3, [r7, #12]
 81164f8:	2b00      	cmp	r3, #0
 81164fa:	d10a      	bne.n	8116512 <xQueueGenericReset+0x2a>
	__asm volatile
 81164fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8116500:	f383 8811 	msr	BASEPRI, r3
 8116504:	f3bf 8f6f 	isb	sy
 8116508:	f3bf 8f4f 	dsb	sy
 811650c:	60bb      	str	r3, [r7, #8]
}
 811650e:	bf00      	nop
 8116510:	e7fe      	b.n	8116510 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8116512:	f7ff fec7 	bl	81162a4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8116516:	68fb      	ldr	r3, [r7, #12]
 8116518:	681a      	ldr	r2, [r3, #0]
 811651a:	68fb      	ldr	r3, [r7, #12]
 811651c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 811651e:	68f9      	ldr	r1, [r7, #12]
 8116520:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8116522:	fb01 f303 	mul.w	r3, r1, r3
 8116526:	441a      	add	r2, r3
 8116528:	68fb      	ldr	r3, [r7, #12]
 811652a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 811652c:	68fb      	ldr	r3, [r7, #12]
 811652e:	2200      	movs	r2, #0
 8116530:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8116532:	68fb      	ldr	r3, [r7, #12]
 8116534:	681a      	ldr	r2, [r3, #0]
 8116536:	68fb      	ldr	r3, [r7, #12]
 8116538:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 811653a:	68fb      	ldr	r3, [r7, #12]
 811653c:	681a      	ldr	r2, [r3, #0]
 811653e:	68fb      	ldr	r3, [r7, #12]
 8116540:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8116542:	3b01      	subs	r3, #1
 8116544:	68f9      	ldr	r1, [r7, #12]
 8116546:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8116548:	fb01 f303 	mul.w	r3, r1, r3
 811654c:	441a      	add	r2, r3
 811654e:	68fb      	ldr	r3, [r7, #12]
 8116550:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8116552:	68fb      	ldr	r3, [r7, #12]
 8116554:	22ff      	movs	r2, #255	; 0xff
 8116556:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 811655a:	68fb      	ldr	r3, [r7, #12]
 811655c:	22ff      	movs	r2, #255	; 0xff
 811655e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8116562:	683b      	ldr	r3, [r7, #0]
 8116564:	2b00      	cmp	r3, #0
 8116566:	d114      	bne.n	8116592 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8116568:	68fb      	ldr	r3, [r7, #12]
 811656a:	691b      	ldr	r3, [r3, #16]
 811656c:	2b00      	cmp	r3, #0
 811656e:	d01a      	beq.n	81165a6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8116570:	68fb      	ldr	r3, [r7, #12]
 8116572:	3310      	adds	r3, #16
 8116574:	4618      	mov	r0, r3
 8116576:	f001 f9cf 	bl	8117918 <xTaskRemoveFromEventList>
 811657a:	4603      	mov	r3, r0
 811657c:	2b00      	cmp	r3, #0
 811657e:	d012      	beq.n	81165a6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8116580:	4b0c      	ldr	r3, [pc, #48]	; (81165b4 <xQueueGenericReset+0xcc>)
 8116582:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8116586:	601a      	str	r2, [r3, #0]
 8116588:	f3bf 8f4f 	dsb	sy
 811658c:	f3bf 8f6f 	isb	sy
 8116590:	e009      	b.n	81165a6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8116592:	68fb      	ldr	r3, [r7, #12]
 8116594:	3310      	adds	r3, #16
 8116596:	4618      	mov	r0, r3
 8116598:	f7ff fca4 	bl	8115ee4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 811659c:	68fb      	ldr	r3, [r7, #12]
 811659e:	3324      	adds	r3, #36	; 0x24
 81165a0:	4618      	mov	r0, r3
 81165a2:	f7ff fc9f 	bl	8115ee4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 81165a6:	f7ff fead 	bl	8116304 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 81165aa:	2301      	movs	r3, #1
}
 81165ac:	4618      	mov	r0, r3
 81165ae:	3710      	adds	r7, #16
 81165b0:	46bd      	mov	sp, r7
 81165b2:	bd80      	pop	{r7, pc}
 81165b4:	e000ed04 	.word	0xe000ed04

081165b8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 81165b8:	b580      	push	{r7, lr}
 81165ba:	b08e      	sub	sp, #56	; 0x38
 81165bc:	af02      	add	r7, sp, #8
 81165be:	60f8      	str	r0, [r7, #12]
 81165c0:	60b9      	str	r1, [r7, #8]
 81165c2:	607a      	str	r2, [r7, #4]
 81165c4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 81165c6:	68fb      	ldr	r3, [r7, #12]
 81165c8:	2b00      	cmp	r3, #0
 81165ca:	d10a      	bne.n	81165e2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 81165cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 81165d0:	f383 8811 	msr	BASEPRI, r3
 81165d4:	f3bf 8f6f 	isb	sy
 81165d8:	f3bf 8f4f 	dsb	sy
 81165dc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 81165de:	bf00      	nop
 81165e0:	e7fe      	b.n	81165e0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 81165e2:	683b      	ldr	r3, [r7, #0]
 81165e4:	2b00      	cmp	r3, #0
 81165e6:	d10a      	bne.n	81165fe <xQueueGenericCreateStatic+0x46>
	__asm volatile
 81165e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 81165ec:	f383 8811 	msr	BASEPRI, r3
 81165f0:	f3bf 8f6f 	isb	sy
 81165f4:	f3bf 8f4f 	dsb	sy
 81165f8:	627b      	str	r3, [r7, #36]	; 0x24
}
 81165fa:	bf00      	nop
 81165fc:	e7fe      	b.n	81165fc <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 81165fe:	687b      	ldr	r3, [r7, #4]
 8116600:	2b00      	cmp	r3, #0
 8116602:	d002      	beq.n	811660a <xQueueGenericCreateStatic+0x52>
 8116604:	68bb      	ldr	r3, [r7, #8]
 8116606:	2b00      	cmp	r3, #0
 8116608:	d001      	beq.n	811660e <xQueueGenericCreateStatic+0x56>
 811660a:	2301      	movs	r3, #1
 811660c:	e000      	b.n	8116610 <xQueueGenericCreateStatic+0x58>
 811660e:	2300      	movs	r3, #0
 8116610:	2b00      	cmp	r3, #0
 8116612:	d10a      	bne.n	811662a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8116614:	f04f 0350 	mov.w	r3, #80	; 0x50
 8116618:	f383 8811 	msr	BASEPRI, r3
 811661c:	f3bf 8f6f 	isb	sy
 8116620:	f3bf 8f4f 	dsb	sy
 8116624:	623b      	str	r3, [r7, #32]
}
 8116626:	bf00      	nop
 8116628:	e7fe      	b.n	8116628 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 811662a:	687b      	ldr	r3, [r7, #4]
 811662c:	2b00      	cmp	r3, #0
 811662e:	d102      	bne.n	8116636 <xQueueGenericCreateStatic+0x7e>
 8116630:	68bb      	ldr	r3, [r7, #8]
 8116632:	2b00      	cmp	r3, #0
 8116634:	d101      	bne.n	811663a <xQueueGenericCreateStatic+0x82>
 8116636:	2301      	movs	r3, #1
 8116638:	e000      	b.n	811663c <xQueueGenericCreateStatic+0x84>
 811663a:	2300      	movs	r3, #0
 811663c:	2b00      	cmp	r3, #0
 811663e:	d10a      	bne.n	8116656 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8116640:	f04f 0350 	mov.w	r3, #80	; 0x50
 8116644:	f383 8811 	msr	BASEPRI, r3
 8116648:	f3bf 8f6f 	isb	sy
 811664c:	f3bf 8f4f 	dsb	sy
 8116650:	61fb      	str	r3, [r7, #28]
}
 8116652:	bf00      	nop
 8116654:	e7fe      	b.n	8116654 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8116656:	2350      	movs	r3, #80	; 0x50
 8116658:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 811665a:	697b      	ldr	r3, [r7, #20]
 811665c:	2b50      	cmp	r3, #80	; 0x50
 811665e:	d00a      	beq.n	8116676 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8116660:	f04f 0350 	mov.w	r3, #80	; 0x50
 8116664:	f383 8811 	msr	BASEPRI, r3
 8116668:	f3bf 8f6f 	isb	sy
 811666c:	f3bf 8f4f 	dsb	sy
 8116670:	61bb      	str	r3, [r7, #24]
}
 8116672:	bf00      	nop
 8116674:	e7fe      	b.n	8116674 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8116676:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8116678:	683b      	ldr	r3, [r7, #0]
 811667a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 811667c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 811667e:	2b00      	cmp	r3, #0
 8116680:	d00d      	beq.n	811669e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8116682:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8116684:	2201      	movs	r2, #1
 8116686:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 811668a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 811668e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8116690:	9300      	str	r3, [sp, #0]
 8116692:	4613      	mov	r3, r2
 8116694:	687a      	ldr	r2, [r7, #4]
 8116696:	68b9      	ldr	r1, [r7, #8]
 8116698:	68f8      	ldr	r0, [r7, #12]
 811669a:	f000 f83f 	bl	811671c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 811669e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 81166a0:	4618      	mov	r0, r3
 81166a2:	3730      	adds	r7, #48	; 0x30
 81166a4:	46bd      	mov	sp, r7
 81166a6:	bd80      	pop	{r7, pc}

081166a8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 81166a8:	b580      	push	{r7, lr}
 81166aa:	b08a      	sub	sp, #40	; 0x28
 81166ac:	af02      	add	r7, sp, #8
 81166ae:	60f8      	str	r0, [r7, #12]
 81166b0:	60b9      	str	r1, [r7, #8]
 81166b2:	4613      	mov	r3, r2
 81166b4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 81166b6:	68fb      	ldr	r3, [r7, #12]
 81166b8:	2b00      	cmp	r3, #0
 81166ba:	d10a      	bne.n	81166d2 <xQueueGenericCreate+0x2a>
	__asm volatile
 81166bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 81166c0:	f383 8811 	msr	BASEPRI, r3
 81166c4:	f3bf 8f6f 	isb	sy
 81166c8:	f3bf 8f4f 	dsb	sy
 81166cc:	613b      	str	r3, [r7, #16]
}
 81166ce:	bf00      	nop
 81166d0:	e7fe      	b.n	81166d0 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 81166d2:	68fb      	ldr	r3, [r7, #12]
 81166d4:	68ba      	ldr	r2, [r7, #8]
 81166d6:	fb02 f303 	mul.w	r3, r2, r3
 81166da:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 81166dc:	69fb      	ldr	r3, [r7, #28]
 81166de:	3350      	adds	r3, #80	; 0x50
 81166e0:	4618      	mov	r0, r3
 81166e2:	f7ff fa15 	bl	8115b10 <pvPortMalloc>
 81166e6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 81166e8:	69bb      	ldr	r3, [r7, #24]
 81166ea:	2b00      	cmp	r3, #0
 81166ec:	d011      	beq.n	8116712 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 81166ee:	69bb      	ldr	r3, [r7, #24]
 81166f0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 81166f2:	697b      	ldr	r3, [r7, #20]
 81166f4:	3350      	adds	r3, #80	; 0x50
 81166f6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 81166f8:	69bb      	ldr	r3, [r7, #24]
 81166fa:	2200      	movs	r2, #0
 81166fc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8116700:	79fa      	ldrb	r2, [r7, #7]
 8116702:	69bb      	ldr	r3, [r7, #24]
 8116704:	9300      	str	r3, [sp, #0]
 8116706:	4613      	mov	r3, r2
 8116708:	697a      	ldr	r2, [r7, #20]
 811670a:	68b9      	ldr	r1, [r7, #8]
 811670c:	68f8      	ldr	r0, [r7, #12]
 811670e:	f000 f805 	bl	811671c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8116712:	69bb      	ldr	r3, [r7, #24]
	}
 8116714:	4618      	mov	r0, r3
 8116716:	3720      	adds	r7, #32
 8116718:	46bd      	mov	sp, r7
 811671a:	bd80      	pop	{r7, pc}

0811671c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 811671c:	b580      	push	{r7, lr}
 811671e:	b084      	sub	sp, #16
 8116720:	af00      	add	r7, sp, #0
 8116722:	60f8      	str	r0, [r7, #12]
 8116724:	60b9      	str	r1, [r7, #8]
 8116726:	607a      	str	r2, [r7, #4]
 8116728:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 811672a:	68bb      	ldr	r3, [r7, #8]
 811672c:	2b00      	cmp	r3, #0
 811672e:	d103      	bne.n	8116738 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8116730:	69bb      	ldr	r3, [r7, #24]
 8116732:	69ba      	ldr	r2, [r7, #24]
 8116734:	601a      	str	r2, [r3, #0]
 8116736:	e002      	b.n	811673e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8116738:	69bb      	ldr	r3, [r7, #24]
 811673a:	687a      	ldr	r2, [r7, #4]
 811673c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 811673e:	69bb      	ldr	r3, [r7, #24]
 8116740:	68fa      	ldr	r2, [r7, #12]
 8116742:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8116744:	69bb      	ldr	r3, [r7, #24]
 8116746:	68ba      	ldr	r2, [r7, #8]
 8116748:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 811674a:	2101      	movs	r1, #1
 811674c:	69b8      	ldr	r0, [r7, #24]
 811674e:	f7ff fecb 	bl	81164e8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8116752:	69bb      	ldr	r3, [r7, #24]
 8116754:	78fa      	ldrb	r2, [r7, #3]
 8116756:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 811675a:	bf00      	nop
 811675c:	3710      	adds	r7, #16
 811675e:	46bd      	mov	sp, r7
 8116760:	bd80      	pop	{r7, pc}
	...

08116764 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8116764:	b580      	push	{r7, lr}
 8116766:	b08e      	sub	sp, #56	; 0x38
 8116768:	af00      	add	r7, sp, #0
 811676a:	60f8      	str	r0, [r7, #12]
 811676c:	60b9      	str	r1, [r7, #8]
 811676e:	607a      	str	r2, [r7, #4]
 8116770:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8116772:	2300      	movs	r3, #0
 8116774:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8116776:	68fb      	ldr	r3, [r7, #12]
 8116778:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 811677a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 811677c:	2b00      	cmp	r3, #0
 811677e:	d10a      	bne.n	8116796 <xQueueGenericSend+0x32>
	__asm volatile
 8116780:	f04f 0350 	mov.w	r3, #80	; 0x50
 8116784:	f383 8811 	msr	BASEPRI, r3
 8116788:	f3bf 8f6f 	isb	sy
 811678c:	f3bf 8f4f 	dsb	sy
 8116790:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8116792:	bf00      	nop
 8116794:	e7fe      	b.n	8116794 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8116796:	68bb      	ldr	r3, [r7, #8]
 8116798:	2b00      	cmp	r3, #0
 811679a:	d103      	bne.n	81167a4 <xQueueGenericSend+0x40>
 811679c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 811679e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81167a0:	2b00      	cmp	r3, #0
 81167a2:	d101      	bne.n	81167a8 <xQueueGenericSend+0x44>
 81167a4:	2301      	movs	r3, #1
 81167a6:	e000      	b.n	81167aa <xQueueGenericSend+0x46>
 81167a8:	2300      	movs	r3, #0
 81167aa:	2b00      	cmp	r3, #0
 81167ac:	d10a      	bne.n	81167c4 <xQueueGenericSend+0x60>
	__asm volatile
 81167ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 81167b2:	f383 8811 	msr	BASEPRI, r3
 81167b6:	f3bf 8f6f 	isb	sy
 81167ba:	f3bf 8f4f 	dsb	sy
 81167be:	627b      	str	r3, [r7, #36]	; 0x24
}
 81167c0:	bf00      	nop
 81167c2:	e7fe      	b.n	81167c2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 81167c4:	683b      	ldr	r3, [r7, #0]
 81167c6:	2b02      	cmp	r3, #2
 81167c8:	d103      	bne.n	81167d2 <xQueueGenericSend+0x6e>
 81167ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81167cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81167ce:	2b01      	cmp	r3, #1
 81167d0:	d101      	bne.n	81167d6 <xQueueGenericSend+0x72>
 81167d2:	2301      	movs	r3, #1
 81167d4:	e000      	b.n	81167d8 <xQueueGenericSend+0x74>
 81167d6:	2300      	movs	r3, #0
 81167d8:	2b00      	cmp	r3, #0
 81167da:	d10a      	bne.n	81167f2 <xQueueGenericSend+0x8e>
	__asm volatile
 81167dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 81167e0:	f383 8811 	msr	BASEPRI, r3
 81167e4:	f3bf 8f6f 	isb	sy
 81167e8:	f3bf 8f4f 	dsb	sy
 81167ec:	623b      	str	r3, [r7, #32]
}
 81167ee:	bf00      	nop
 81167f0:	e7fe      	b.n	81167f0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 81167f2:	f001 fa4f 	bl	8117c94 <xTaskGetSchedulerState>
 81167f6:	4603      	mov	r3, r0
 81167f8:	2b00      	cmp	r3, #0
 81167fa:	d102      	bne.n	8116802 <xQueueGenericSend+0x9e>
 81167fc:	687b      	ldr	r3, [r7, #4]
 81167fe:	2b00      	cmp	r3, #0
 8116800:	d101      	bne.n	8116806 <xQueueGenericSend+0xa2>
 8116802:	2301      	movs	r3, #1
 8116804:	e000      	b.n	8116808 <xQueueGenericSend+0xa4>
 8116806:	2300      	movs	r3, #0
 8116808:	2b00      	cmp	r3, #0
 811680a:	d10a      	bne.n	8116822 <xQueueGenericSend+0xbe>
	__asm volatile
 811680c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8116810:	f383 8811 	msr	BASEPRI, r3
 8116814:	f3bf 8f6f 	isb	sy
 8116818:	f3bf 8f4f 	dsb	sy
 811681c:	61fb      	str	r3, [r7, #28]
}
 811681e:	bf00      	nop
 8116820:	e7fe      	b.n	8116820 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8116822:	f7ff fd3f 	bl	81162a4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8116826:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8116828:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 811682a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 811682c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 811682e:	429a      	cmp	r2, r3
 8116830:	d302      	bcc.n	8116838 <xQueueGenericSend+0xd4>
 8116832:	683b      	ldr	r3, [r7, #0]
 8116834:	2b02      	cmp	r3, #2
 8116836:	d129      	bne.n	811688c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8116838:	683a      	ldr	r2, [r7, #0]
 811683a:	68b9      	ldr	r1, [r7, #8]
 811683c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 811683e:	f000 fa8b 	bl	8116d58 <prvCopyDataToQueue>
 8116842:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8116844:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8116846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8116848:	2b00      	cmp	r3, #0
 811684a:	d010      	beq.n	811686e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 811684c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 811684e:	3324      	adds	r3, #36	; 0x24
 8116850:	4618      	mov	r0, r3
 8116852:	f001 f861 	bl	8117918 <xTaskRemoveFromEventList>
 8116856:	4603      	mov	r3, r0
 8116858:	2b00      	cmp	r3, #0
 811685a:	d013      	beq.n	8116884 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 811685c:	4b3f      	ldr	r3, [pc, #252]	; (811695c <xQueueGenericSend+0x1f8>)
 811685e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8116862:	601a      	str	r2, [r3, #0]
 8116864:	f3bf 8f4f 	dsb	sy
 8116868:	f3bf 8f6f 	isb	sy
 811686c:	e00a      	b.n	8116884 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 811686e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8116870:	2b00      	cmp	r3, #0
 8116872:	d007      	beq.n	8116884 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8116874:	4b39      	ldr	r3, [pc, #228]	; (811695c <xQueueGenericSend+0x1f8>)
 8116876:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 811687a:	601a      	str	r2, [r3, #0]
 811687c:	f3bf 8f4f 	dsb	sy
 8116880:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8116884:	f7ff fd3e 	bl	8116304 <vPortExitCritical>
				return pdPASS;
 8116888:	2301      	movs	r3, #1
 811688a:	e063      	b.n	8116954 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 811688c:	687b      	ldr	r3, [r7, #4]
 811688e:	2b00      	cmp	r3, #0
 8116890:	d103      	bne.n	811689a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8116892:	f7ff fd37 	bl	8116304 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8116896:	2300      	movs	r3, #0
 8116898:	e05c      	b.n	8116954 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 811689a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 811689c:	2b00      	cmp	r3, #0
 811689e:	d106      	bne.n	81168ae <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 81168a0:	f107 0314 	add.w	r3, r7, #20
 81168a4:	4618      	mov	r0, r3
 81168a6:	f001 f89b 	bl	81179e0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 81168aa:	2301      	movs	r3, #1
 81168ac:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 81168ae:	f7ff fd29 	bl	8116304 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 81168b2:	f000 fdfb 	bl	81174ac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 81168b6:	f7ff fcf5 	bl	81162a4 <vPortEnterCritical>
 81168ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81168bc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 81168c0:	b25b      	sxtb	r3, r3
 81168c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 81168c6:	d103      	bne.n	81168d0 <xQueueGenericSend+0x16c>
 81168c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81168ca:	2200      	movs	r2, #0
 81168cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 81168d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81168d2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 81168d6:	b25b      	sxtb	r3, r3
 81168d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 81168dc:	d103      	bne.n	81168e6 <xQueueGenericSend+0x182>
 81168de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81168e0:	2200      	movs	r2, #0
 81168e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 81168e6:	f7ff fd0d 	bl	8116304 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 81168ea:	1d3a      	adds	r2, r7, #4
 81168ec:	f107 0314 	add.w	r3, r7, #20
 81168f0:	4611      	mov	r1, r2
 81168f2:	4618      	mov	r0, r3
 81168f4:	f001 f88a 	bl	8117a0c <xTaskCheckForTimeOut>
 81168f8:	4603      	mov	r3, r0
 81168fa:	2b00      	cmp	r3, #0
 81168fc:	d124      	bne.n	8116948 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 81168fe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8116900:	f000 fb22 	bl	8116f48 <prvIsQueueFull>
 8116904:	4603      	mov	r3, r0
 8116906:	2b00      	cmp	r3, #0
 8116908:	d018      	beq.n	811693c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 811690a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 811690c:	3310      	adds	r3, #16
 811690e:	687a      	ldr	r2, [r7, #4]
 8116910:	4611      	mov	r1, r2
 8116912:	4618      	mov	r0, r3
 8116914:	f000 ffb0 	bl	8117878 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8116918:	6b38      	ldr	r0, [r7, #48]	; 0x30
 811691a:	f000 faad 	bl	8116e78 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 811691e:	f000 fdd3 	bl	81174c8 <xTaskResumeAll>
 8116922:	4603      	mov	r3, r0
 8116924:	2b00      	cmp	r3, #0
 8116926:	f47f af7c 	bne.w	8116822 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 811692a:	4b0c      	ldr	r3, [pc, #48]	; (811695c <xQueueGenericSend+0x1f8>)
 811692c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8116930:	601a      	str	r2, [r3, #0]
 8116932:	f3bf 8f4f 	dsb	sy
 8116936:	f3bf 8f6f 	isb	sy
 811693a:	e772      	b.n	8116822 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 811693c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 811693e:	f000 fa9b 	bl	8116e78 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8116942:	f000 fdc1 	bl	81174c8 <xTaskResumeAll>
 8116946:	e76c      	b.n	8116822 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8116948:	6b38      	ldr	r0, [r7, #48]	; 0x30
 811694a:	f000 fa95 	bl	8116e78 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 811694e:	f000 fdbb 	bl	81174c8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8116952:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8116954:	4618      	mov	r0, r3
 8116956:	3738      	adds	r7, #56	; 0x38
 8116958:	46bd      	mov	sp, r7
 811695a:	bd80      	pop	{r7, pc}
 811695c:	e000ed04 	.word	0xe000ed04

08116960 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8116960:	b580      	push	{r7, lr}
 8116962:	b090      	sub	sp, #64	; 0x40
 8116964:	af00      	add	r7, sp, #0
 8116966:	60f8      	str	r0, [r7, #12]
 8116968:	60b9      	str	r1, [r7, #8]
 811696a:	607a      	str	r2, [r7, #4]
 811696c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 811696e:	68fb      	ldr	r3, [r7, #12]
 8116970:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8116972:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8116974:	2b00      	cmp	r3, #0
 8116976:	d10a      	bne.n	811698e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8116978:	f04f 0350 	mov.w	r3, #80	; 0x50
 811697c:	f383 8811 	msr	BASEPRI, r3
 8116980:	f3bf 8f6f 	isb	sy
 8116984:	f3bf 8f4f 	dsb	sy
 8116988:	62bb      	str	r3, [r7, #40]	; 0x28
}
 811698a:	bf00      	nop
 811698c:	e7fe      	b.n	811698c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 811698e:	68bb      	ldr	r3, [r7, #8]
 8116990:	2b00      	cmp	r3, #0
 8116992:	d103      	bne.n	811699c <xQueueGenericSendFromISR+0x3c>
 8116994:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8116996:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8116998:	2b00      	cmp	r3, #0
 811699a:	d101      	bne.n	81169a0 <xQueueGenericSendFromISR+0x40>
 811699c:	2301      	movs	r3, #1
 811699e:	e000      	b.n	81169a2 <xQueueGenericSendFromISR+0x42>
 81169a0:	2300      	movs	r3, #0
 81169a2:	2b00      	cmp	r3, #0
 81169a4:	d10a      	bne.n	81169bc <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 81169a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 81169aa:	f383 8811 	msr	BASEPRI, r3
 81169ae:	f3bf 8f6f 	isb	sy
 81169b2:	f3bf 8f4f 	dsb	sy
 81169b6:	627b      	str	r3, [r7, #36]	; 0x24
}
 81169b8:	bf00      	nop
 81169ba:	e7fe      	b.n	81169ba <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 81169bc:	683b      	ldr	r3, [r7, #0]
 81169be:	2b02      	cmp	r3, #2
 81169c0:	d103      	bne.n	81169ca <xQueueGenericSendFromISR+0x6a>
 81169c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81169c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81169c6:	2b01      	cmp	r3, #1
 81169c8:	d101      	bne.n	81169ce <xQueueGenericSendFromISR+0x6e>
 81169ca:	2301      	movs	r3, #1
 81169cc:	e000      	b.n	81169d0 <xQueueGenericSendFromISR+0x70>
 81169ce:	2300      	movs	r3, #0
 81169d0:	2b00      	cmp	r3, #0
 81169d2:	d10a      	bne.n	81169ea <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 81169d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 81169d8:	f383 8811 	msr	BASEPRI, r3
 81169dc:	f3bf 8f6f 	isb	sy
 81169e0:	f3bf 8f4f 	dsb	sy
 81169e4:	623b      	str	r3, [r7, #32]
}
 81169e6:	bf00      	nop
 81169e8:	e7fe      	b.n	81169e8 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 81169ea:	f7ff fd3d 	bl	8116468 <vPortValidateInterruptPriority>
	__asm volatile
 81169ee:	f3ef 8211 	mrs	r2, BASEPRI
 81169f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 81169f6:	f383 8811 	msr	BASEPRI, r3
 81169fa:	f3bf 8f6f 	isb	sy
 81169fe:	f3bf 8f4f 	dsb	sy
 8116a02:	61fa      	str	r2, [r7, #28]
 8116a04:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 8116a06:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8116a08:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8116a0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8116a0c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8116a0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8116a10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8116a12:	429a      	cmp	r2, r3
 8116a14:	d302      	bcc.n	8116a1c <xQueueGenericSendFromISR+0xbc>
 8116a16:	683b      	ldr	r3, [r7, #0]
 8116a18:	2b02      	cmp	r3, #2
 8116a1a:	d12f      	bne.n	8116a7c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8116a1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8116a1e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8116a22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8116a26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8116a28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8116a2a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8116a2c:	683a      	ldr	r2, [r7, #0]
 8116a2e:	68b9      	ldr	r1, [r7, #8]
 8116a30:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8116a32:	f000 f991 	bl	8116d58 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8116a36:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8116a3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8116a3e:	d112      	bne.n	8116a66 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8116a40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8116a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8116a44:	2b00      	cmp	r3, #0
 8116a46:	d016      	beq.n	8116a76 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8116a48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8116a4a:	3324      	adds	r3, #36	; 0x24
 8116a4c:	4618      	mov	r0, r3
 8116a4e:	f000 ff63 	bl	8117918 <xTaskRemoveFromEventList>
 8116a52:	4603      	mov	r3, r0
 8116a54:	2b00      	cmp	r3, #0
 8116a56:	d00e      	beq.n	8116a76 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8116a58:	687b      	ldr	r3, [r7, #4]
 8116a5a:	2b00      	cmp	r3, #0
 8116a5c:	d00b      	beq.n	8116a76 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8116a5e:	687b      	ldr	r3, [r7, #4]
 8116a60:	2201      	movs	r2, #1
 8116a62:	601a      	str	r2, [r3, #0]
 8116a64:	e007      	b.n	8116a76 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8116a66:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8116a6a:	3301      	adds	r3, #1
 8116a6c:	b2db      	uxtb	r3, r3
 8116a6e:	b25a      	sxtb	r2, r3
 8116a70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8116a72:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8116a76:	2301      	movs	r3, #1
 8116a78:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8116a7a:	e001      	b.n	8116a80 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8116a7c:	2300      	movs	r3, #0
 8116a7e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8116a80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8116a82:	617b      	str	r3, [r7, #20]
	__asm volatile
 8116a84:	697b      	ldr	r3, [r7, #20]
 8116a86:	f383 8811 	msr	BASEPRI, r3
}
 8116a8a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8116a8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8116a8e:	4618      	mov	r0, r3
 8116a90:	3740      	adds	r7, #64	; 0x40
 8116a92:	46bd      	mov	sp, r7
 8116a94:	bd80      	pop	{r7, pc}
	...

08116a98 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8116a98:	b580      	push	{r7, lr}
 8116a9a:	b08c      	sub	sp, #48	; 0x30
 8116a9c:	af00      	add	r7, sp, #0
 8116a9e:	60f8      	str	r0, [r7, #12]
 8116aa0:	60b9      	str	r1, [r7, #8]
 8116aa2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8116aa4:	2300      	movs	r3, #0
 8116aa6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8116aa8:	68fb      	ldr	r3, [r7, #12]
 8116aaa:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8116aac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8116aae:	2b00      	cmp	r3, #0
 8116ab0:	d10a      	bne.n	8116ac8 <xQueueReceive+0x30>
	__asm volatile
 8116ab2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8116ab6:	f383 8811 	msr	BASEPRI, r3
 8116aba:	f3bf 8f6f 	isb	sy
 8116abe:	f3bf 8f4f 	dsb	sy
 8116ac2:	623b      	str	r3, [r7, #32]
}
 8116ac4:	bf00      	nop
 8116ac6:	e7fe      	b.n	8116ac6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8116ac8:	68bb      	ldr	r3, [r7, #8]
 8116aca:	2b00      	cmp	r3, #0
 8116acc:	d103      	bne.n	8116ad6 <xQueueReceive+0x3e>
 8116ace:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8116ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8116ad2:	2b00      	cmp	r3, #0
 8116ad4:	d101      	bne.n	8116ada <xQueueReceive+0x42>
 8116ad6:	2301      	movs	r3, #1
 8116ad8:	e000      	b.n	8116adc <xQueueReceive+0x44>
 8116ada:	2300      	movs	r3, #0
 8116adc:	2b00      	cmp	r3, #0
 8116ade:	d10a      	bne.n	8116af6 <xQueueReceive+0x5e>
	__asm volatile
 8116ae0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8116ae4:	f383 8811 	msr	BASEPRI, r3
 8116ae8:	f3bf 8f6f 	isb	sy
 8116aec:	f3bf 8f4f 	dsb	sy
 8116af0:	61fb      	str	r3, [r7, #28]
}
 8116af2:	bf00      	nop
 8116af4:	e7fe      	b.n	8116af4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8116af6:	f001 f8cd 	bl	8117c94 <xTaskGetSchedulerState>
 8116afa:	4603      	mov	r3, r0
 8116afc:	2b00      	cmp	r3, #0
 8116afe:	d102      	bne.n	8116b06 <xQueueReceive+0x6e>
 8116b00:	687b      	ldr	r3, [r7, #4]
 8116b02:	2b00      	cmp	r3, #0
 8116b04:	d101      	bne.n	8116b0a <xQueueReceive+0x72>
 8116b06:	2301      	movs	r3, #1
 8116b08:	e000      	b.n	8116b0c <xQueueReceive+0x74>
 8116b0a:	2300      	movs	r3, #0
 8116b0c:	2b00      	cmp	r3, #0
 8116b0e:	d10a      	bne.n	8116b26 <xQueueReceive+0x8e>
	__asm volatile
 8116b10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8116b14:	f383 8811 	msr	BASEPRI, r3
 8116b18:	f3bf 8f6f 	isb	sy
 8116b1c:	f3bf 8f4f 	dsb	sy
 8116b20:	61bb      	str	r3, [r7, #24]
}
 8116b22:	bf00      	nop
 8116b24:	e7fe      	b.n	8116b24 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8116b26:	f7ff fbbd 	bl	81162a4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8116b2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8116b2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8116b2e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8116b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8116b32:	2b00      	cmp	r3, #0
 8116b34:	d01f      	beq.n	8116b76 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8116b36:	68b9      	ldr	r1, [r7, #8]
 8116b38:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8116b3a:	f000 f977 	bl	8116e2c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8116b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8116b40:	1e5a      	subs	r2, r3, #1
 8116b42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8116b44:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8116b46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8116b48:	691b      	ldr	r3, [r3, #16]
 8116b4a:	2b00      	cmp	r3, #0
 8116b4c:	d00f      	beq.n	8116b6e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8116b4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8116b50:	3310      	adds	r3, #16
 8116b52:	4618      	mov	r0, r3
 8116b54:	f000 fee0 	bl	8117918 <xTaskRemoveFromEventList>
 8116b58:	4603      	mov	r3, r0
 8116b5a:	2b00      	cmp	r3, #0
 8116b5c:	d007      	beq.n	8116b6e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8116b5e:	4b3d      	ldr	r3, [pc, #244]	; (8116c54 <xQueueReceive+0x1bc>)
 8116b60:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8116b64:	601a      	str	r2, [r3, #0]
 8116b66:	f3bf 8f4f 	dsb	sy
 8116b6a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8116b6e:	f7ff fbc9 	bl	8116304 <vPortExitCritical>
				return pdPASS;
 8116b72:	2301      	movs	r3, #1
 8116b74:	e069      	b.n	8116c4a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8116b76:	687b      	ldr	r3, [r7, #4]
 8116b78:	2b00      	cmp	r3, #0
 8116b7a:	d103      	bne.n	8116b84 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8116b7c:	f7ff fbc2 	bl	8116304 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8116b80:	2300      	movs	r3, #0
 8116b82:	e062      	b.n	8116c4a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8116b84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8116b86:	2b00      	cmp	r3, #0
 8116b88:	d106      	bne.n	8116b98 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8116b8a:	f107 0310 	add.w	r3, r7, #16
 8116b8e:	4618      	mov	r0, r3
 8116b90:	f000 ff26 	bl	81179e0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8116b94:	2301      	movs	r3, #1
 8116b96:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8116b98:	f7ff fbb4 	bl	8116304 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8116b9c:	f000 fc86 	bl	81174ac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8116ba0:	f7ff fb80 	bl	81162a4 <vPortEnterCritical>
 8116ba4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8116ba6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8116baa:	b25b      	sxtb	r3, r3
 8116bac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8116bb0:	d103      	bne.n	8116bba <xQueueReceive+0x122>
 8116bb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8116bb4:	2200      	movs	r2, #0
 8116bb6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8116bba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8116bbc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8116bc0:	b25b      	sxtb	r3, r3
 8116bc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8116bc6:	d103      	bne.n	8116bd0 <xQueueReceive+0x138>
 8116bc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8116bca:	2200      	movs	r2, #0
 8116bcc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8116bd0:	f7ff fb98 	bl	8116304 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8116bd4:	1d3a      	adds	r2, r7, #4
 8116bd6:	f107 0310 	add.w	r3, r7, #16
 8116bda:	4611      	mov	r1, r2
 8116bdc:	4618      	mov	r0, r3
 8116bde:	f000 ff15 	bl	8117a0c <xTaskCheckForTimeOut>
 8116be2:	4603      	mov	r3, r0
 8116be4:	2b00      	cmp	r3, #0
 8116be6:	d123      	bne.n	8116c30 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8116be8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8116bea:	f000 f997 	bl	8116f1c <prvIsQueueEmpty>
 8116bee:	4603      	mov	r3, r0
 8116bf0:	2b00      	cmp	r3, #0
 8116bf2:	d017      	beq.n	8116c24 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8116bf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8116bf6:	3324      	adds	r3, #36	; 0x24
 8116bf8:	687a      	ldr	r2, [r7, #4]
 8116bfa:	4611      	mov	r1, r2
 8116bfc:	4618      	mov	r0, r3
 8116bfe:	f000 fe3b 	bl	8117878 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8116c02:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8116c04:	f000 f938 	bl	8116e78 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8116c08:	f000 fc5e 	bl	81174c8 <xTaskResumeAll>
 8116c0c:	4603      	mov	r3, r0
 8116c0e:	2b00      	cmp	r3, #0
 8116c10:	d189      	bne.n	8116b26 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8116c12:	4b10      	ldr	r3, [pc, #64]	; (8116c54 <xQueueReceive+0x1bc>)
 8116c14:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8116c18:	601a      	str	r2, [r3, #0]
 8116c1a:	f3bf 8f4f 	dsb	sy
 8116c1e:	f3bf 8f6f 	isb	sy
 8116c22:	e780      	b.n	8116b26 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8116c24:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8116c26:	f000 f927 	bl	8116e78 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8116c2a:	f000 fc4d 	bl	81174c8 <xTaskResumeAll>
 8116c2e:	e77a      	b.n	8116b26 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8116c30:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8116c32:	f000 f921 	bl	8116e78 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8116c36:	f000 fc47 	bl	81174c8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8116c3a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8116c3c:	f000 f96e 	bl	8116f1c <prvIsQueueEmpty>
 8116c40:	4603      	mov	r3, r0
 8116c42:	2b00      	cmp	r3, #0
 8116c44:	f43f af6f 	beq.w	8116b26 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8116c48:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8116c4a:	4618      	mov	r0, r3
 8116c4c:	3730      	adds	r7, #48	; 0x30
 8116c4e:	46bd      	mov	sp, r7
 8116c50:	bd80      	pop	{r7, pc}
 8116c52:	bf00      	nop
 8116c54:	e000ed04 	.word	0xe000ed04

08116c58 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8116c58:	b580      	push	{r7, lr}
 8116c5a:	b08e      	sub	sp, #56	; 0x38
 8116c5c:	af00      	add	r7, sp, #0
 8116c5e:	60f8      	str	r0, [r7, #12]
 8116c60:	60b9      	str	r1, [r7, #8]
 8116c62:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8116c64:	68fb      	ldr	r3, [r7, #12]
 8116c66:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8116c68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8116c6a:	2b00      	cmp	r3, #0
 8116c6c:	d10a      	bne.n	8116c84 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8116c6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8116c72:	f383 8811 	msr	BASEPRI, r3
 8116c76:	f3bf 8f6f 	isb	sy
 8116c7a:	f3bf 8f4f 	dsb	sy
 8116c7e:	623b      	str	r3, [r7, #32]
}
 8116c80:	bf00      	nop
 8116c82:	e7fe      	b.n	8116c82 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8116c84:	68bb      	ldr	r3, [r7, #8]
 8116c86:	2b00      	cmp	r3, #0
 8116c88:	d103      	bne.n	8116c92 <xQueueReceiveFromISR+0x3a>
 8116c8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8116c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8116c8e:	2b00      	cmp	r3, #0
 8116c90:	d101      	bne.n	8116c96 <xQueueReceiveFromISR+0x3e>
 8116c92:	2301      	movs	r3, #1
 8116c94:	e000      	b.n	8116c98 <xQueueReceiveFromISR+0x40>
 8116c96:	2300      	movs	r3, #0
 8116c98:	2b00      	cmp	r3, #0
 8116c9a:	d10a      	bne.n	8116cb2 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8116c9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8116ca0:	f383 8811 	msr	BASEPRI, r3
 8116ca4:	f3bf 8f6f 	isb	sy
 8116ca8:	f3bf 8f4f 	dsb	sy
 8116cac:	61fb      	str	r3, [r7, #28]
}
 8116cae:	bf00      	nop
 8116cb0:	e7fe      	b.n	8116cb0 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8116cb2:	f7ff fbd9 	bl	8116468 <vPortValidateInterruptPriority>
	__asm volatile
 8116cb6:	f3ef 8211 	mrs	r2, BASEPRI
 8116cba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8116cbe:	f383 8811 	msr	BASEPRI, r3
 8116cc2:	f3bf 8f6f 	isb	sy
 8116cc6:	f3bf 8f4f 	dsb	sy
 8116cca:	61ba      	str	r2, [r7, #24]
 8116ccc:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8116cce:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8116cd0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8116cd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8116cd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8116cd6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8116cd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8116cda:	2b00      	cmp	r3, #0
 8116cdc:	d02f      	beq.n	8116d3e <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8116cde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8116ce0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8116ce4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8116ce8:	68b9      	ldr	r1, [r7, #8]
 8116cea:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8116cec:	f000 f89e 	bl	8116e2c <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8116cf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8116cf2:	1e5a      	subs	r2, r3, #1
 8116cf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8116cf6:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8116cf8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8116cfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8116d00:	d112      	bne.n	8116d28 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8116d02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8116d04:	691b      	ldr	r3, [r3, #16]
 8116d06:	2b00      	cmp	r3, #0
 8116d08:	d016      	beq.n	8116d38 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8116d0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8116d0c:	3310      	adds	r3, #16
 8116d0e:	4618      	mov	r0, r3
 8116d10:	f000 fe02 	bl	8117918 <xTaskRemoveFromEventList>
 8116d14:	4603      	mov	r3, r0
 8116d16:	2b00      	cmp	r3, #0
 8116d18:	d00e      	beq.n	8116d38 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8116d1a:	687b      	ldr	r3, [r7, #4]
 8116d1c:	2b00      	cmp	r3, #0
 8116d1e:	d00b      	beq.n	8116d38 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8116d20:	687b      	ldr	r3, [r7, #4]
 8116d22:	2201      	movs	r2, #1
 8116d24:	601a      	str	r2, [r3, #0]
 8116d26:	e007      	b.n	8116d38 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8116d28:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8116d2c:	3301      	adds	r3, #1
 8116d2e:	b2db      	uxtb	r3, r3
 8116d30:	b25a      	sxtb	r2, r3
 8116d32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8116d34:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8116d38:	2301      	movs	r3, #1
 8116d3a:	637b      	str	r3, [r7, #52]	; 0x34
 8116d3c:	e001      	b.n	8116d42 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8116d3e:	2300      	movs	r3, #0
 8116d40:	637b      	str	r3, [r7, #52]	; 0x34
 8116d42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8116d44:	613b      	str	r3, [r7, #16]
	__asm volatile
 8116d46:	693b      	ldr	r3, [r7, #16]
 8116d48:	f383 8811 	msr	BASEPRI, r3
}
 8116d4c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8116d4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8116d50:	4618      	mov	r0, r3
 8116d52:	3738      	adds	r7, #56	; 0x38
 8116d54:	46bd      	mov	sp, r7
 8116d56:	bd80      	pop	{r7, pc}

08116d58 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8116d58:	b580      	push	{r7, lr}
 8116d5a:	b086      	sub	sp, #24
 8116d5c:	af00      	add	r7, sp, #0
 8116d5e:	60f8      	str	r0, [r7, #12]
 8116d60:	60b9      	str	r1, [r7, #8]
 8116d62:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8116d64:	2300      	movs	r3, #0
 8116d66:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8116d68:	68fb      	ldr	r3, [r7, #12]
 8116d6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8116d6c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8116d6e:	68fb      	ldr	r3, [r7, #12]
 8116d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8116d72:	2b00      	cmp	r3, #0
 8116d74:	d10d      	bne.n	8116d92 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8116d76:	68fb      	ldr	r3, [r7, #12]
 8116d78:	681b      	ldr	r3, [r3, #0]
 8116d7a:	2b00      	cmp	r3, #0
 8116d7c:	d14d      	bne.n	8116e1a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8116d7e:	68fb      	ldr	r3, [r7, #12]
 8116d80:	689b      	ldr	r3, [r3, #8]
 8116d82:	4618      	mov	r0, r3
 8116d84:	f000 ffa4 	bl	8117cd0 <xTaskPriorityDisinherit>
 8116d88:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8116d8a:	68fb      	ldr	r3, [r7, #12]
 8116d8c:	2200      	movs	r2, #0
 8116d8e:	609a      	str	r2, [r3, #8]
 8116d90:	e043      	b.n	8116e1a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8116d92:	687b      	ldr	r3, [r7, #4]
 8116d94:	2b00      	cmp	r3, #0
 8116d96:	d119      	bne.n	8116dcc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8116d98:	68fb      	ldr	r3, [r7, #12]
 8116d9a:	6858      	ldr	r0, [r3, #4]
 8116d9c:	68fb      	ldr	r3, [r7, #12]
 8116d9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8116da0:	461a      	mov	r2, r3
 8116da2:	68b9      	ldr	r1, [r7, #8]
 8116da4:	f002 f8c8 	bl	8118f38 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8116da8:	68fb      	ldr	r3, [r7, #12]
 8116daa:	685a      	ldr	r2, [r3, #4]
 8116dac:	68fb      	ldr	r3, [r7, #12]
 8116dae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8116db0:	441a      	add	r2, r3
 8116db2:	68fb      	ldr	r3, [r7, #12]
 8116db4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8116db6:	68fb      	ldr	r3, [r7, #12]
 8116db8:	685a      	ldr	r2, [r3, #4]
 8116dba:	68fb      	ldr	r3, [r7, #12]
 8116dbc:	689b      	ldr	r3, [r3, #8]
 8116dbe:	429a      	cmp	r2, r3
 8116dc0:	d32b      	bcc.n	8116e1a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8116dc2:	68fb      	ldr	r3, [r7, #12]
 8116dc4:	681a      	ldr	r2, [r3, #0]
 8116dc6:	68fb      	ldr	r3, [r7, #12]
 8116dc8:	605a      	str	r2, [r3, #4]
 8116dca:	e026      	b.n	8116e1a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8116dcc:	68fb      	ldr	r3, [r7, #12]
 8116dce:	68d8      	ldr	r0, [r3, #12]
 8116dd0:	68fb      	ldr	r3, [r7, #12]
 8116dd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8116dd4:	461a      	mov	r2, r3
 8116dd6:	68b9      	ldr	r1, [r7, #8]
 8116dd8:	f002 f8ae 	bl	8118f38 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8116ddc:	68fb      	ldr	r3, [r7, #12]
 8116dde:	68da      	ldr	r2, [r3, #12]
 8116de0:	68fb      	ldr	r3, [r7, #12]
 8116de2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8116de4:	425b      	negs	r3, r3
 8116de6:	441a      	add	r2, r3
 8116de8:	68fb      	ldr	r3, [r7, #12]
 8116dea:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8116dec:	68fb      	ldr	r3, [r7, #12]
 8116dee:	68da      	ldr	r2, [r3, #12]
 8116df0:	68fb      	ldr	r3, [r7, #12]
 8116df2:	681b      	ldr	r3, [r3, #0]
 8116df4:	429a      	cmp	r2, r3
 8116df6:	d207      	bcs.n	8116e08 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8116df8:	68fb      	ldr	r3, [r7, #12]
 8116dfa:	689a      	ldr	r2, [r3, #8]
 8116dfc:	68fb      	ldr	r3, [r7, #12]
 8116dfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8116e00:	425b      	negs	r3, r3
 8116e02:	441a      	add	r2, r3
 8116e04:	68fb      	ldr	r3, [r7, #12]
 8116e06:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8116e08:	687b      	ldr	r3, [r7, #4]
 8116e0a:	2b02      	cmp	r3, #2
 8116e0c:	d105      	bne.n	8116e1a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8116e0e:	693b      	ldr	r3, [r7, #16]
 8116e10:	2b00      	cmp	r3, #0
 8116e12:	d002      	beq.n	8116e1a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8116e14:	693b      	ldr	r3, [r7, #16]
 8116e16:	3b01      	subs	r3, #1
 8116e18:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8116e1a:	693b      	ldr	r3, [r7, #16]
 8116e1c:	1c5a      	adds	r2, r3, #1
 8116e1e:	68fb      	ldr	r3, [r7, #12]
 8116e20:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8116e22:	697b      	ldr	r3, [r7, #20]
}
 8116e24:	4618      	mov	r0, r3
 8116e26:	3718      	adds	r7, #24
 8116e28:	46bd      	mov	sp, r7
 8116e2a:	bd80      	pop	{r7, pc}

08116e2c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8116e2c:	b580      	push	{r7, lr}
 8116e2e:	b082      	sub	sp, #8
 8116e30:	af00      	add	r7, sp, #0
 8116e32:	6078      	str	r0, [r7, #4]
 8116e34:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8116e36:	687b      	ldr	r3, [r7, #4]
 8116e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8116e3a:	2b00      	cmp	r3, #0
 8116e3c:	d018      	beq.n	8116e70 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8116e3e:	687b      	ldr	r3, [r7, #4]
 8116e40:	68da      	ldr	r2, [r3, #12]
 8116e42:	687b      	ldr	r3, [r7, #4]
 8116e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8116e46:	441a      	add	r2, r3
 8116e48:	687b      	ldr	r3, [r7, #4]
 8116e4a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8116e4c:	687b      	ldr	r3, [r7, #4]
 8116e4e:	68da      	ldr	r2, [r3, #12]
 8116e50:	687b      	ldr	r3, [r7, #4]
 8116e52:	689b      	ldr	r3, [r3, #8]
 8116e54:	429a      	cmp	r2, r3
 8116e56:	d303      	bcc.n	8116e60 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8116e58:	687b      	ldr	r3, [r7, #4]
 8116e5a:	681a      	ldr	r2, [r3, #0]
 8116e5c:	687b      	ldr	r3, [r7, #4]
 8116e5e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8116e60:	687b      	ldr	r3, [r7, #4]
 8116e62:	68d9      	ldr	r1, [r3, #12]
 8116e64:	687b      	ldr	r3, [r7, #4]
 8116e66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8116e68:	461a      	mov	r2, r3
 8116e6a:	6838      	ldr	r0, [r7, #0]
 8116e6c:	f002 f864 	bl	8118f38 <memcpy>
	}
}
 8116e70:	bf00      	nop
 8116e72:	3708      	adds	r7, #8
 8116e74:	46bd      	mov	sp, r7
 8116e76:	bd80      	pop	{r7, pc}

08116e78 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8116e78:	b580      	push	{r7, lr}
 8116e7a:	b084      	sub	sp, #16
 8116e7c:	af00      	add	r7, sp, #0
 8116e7e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8116e80:	f7ff fa10 	bl	81162a4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8116e84:	687b      	ldr	r3, [r7, #4]
 8116e86:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8116e8a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8116e8c:	e011      	b.n	8116eb2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8116e8e:	687b      	ldr	r3, [r7, #4]
 8116e90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8116e92:	2b00      	cmp	r3, #0
 8116e94:	d012      	beq.n	8116ebc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8116e96:	687b      	ldr	r3, [r7, #4]
 8116e98:	3324      	adds	r3, #36	; 0x24
 8116e9a:	4618      	mov	r0, r3
 8116e9c:	f000 fd3c 	bl	8117918 <xTaskRemoveFromEventList>
 8116ea0:	4603      	mov	r3, r0
 8116ea2:	2b00      	cmp	r3, #0
 8116ea4:	d001      	beq.n	8116eaa <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8116ea6:	f000 fe13 	bl	8117ad0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8116eaa:	7bfb      	ldrb	r3, [r7, #15]
 8116eac:	3b01      	subs	r3, #1
 8116eae:	b2db      	uxtb	r3, r3
 8116eb0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8116eb2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8116eb6:	2b00      	cmp	r3, #0
 8116eb8:	dce9      	bgt.n	8116e8e <prvUnlockQueue+0x16>
 8116eba:	e000      	b.n	8116ebe <prvUnlockQueue+0x46>
					break;
 8116ebc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8116ebe:	687b      	ldr	r3, [r7, #4]
 8116ec0:	22ff      	movs	r2, #255	; 0xff
 8116ec2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8116ec6:	f7ff fa1d 	bl	8116304 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8116eca:	f7ff f9eb 	bl	81162a4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8116ece:	687b      	ldr	r3, [r7, #4]
 8116ed0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8116ed4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8116ed6:	e011      	b.n	8116efc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8116ed8:	687b      	ldr	r3, [r7, #4]
 8116eda:	691b      	ldr	r3, [r3, #16]
 8116edc:	2b00      	cmp	r3, #0
 8116ede:	d012      	beq.n	8116f06 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8116ee0:	687b      	ldr	r3, [r7, #4]
 8116ee2:	3310      	adds	r3, #16
 8116ee4:	4618      	mov	r0, r3
 8116ee6:	f000 fd17 	bl	8117918 <xTaskRemoveFromEventList>
 8116eea:	4603      	mov	r3, r0
 8116eec:	2b00      	cmp	r3, #0
 8116eee:	d001      	beq.n	8116ef4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8116ef0:	f000 fdee 	bl	8117ad0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8116ef4:	7bbb      	ldrb	r3, [r7, #14]
 8116ef6:	3b01      	subs	r3, #1
 8116ef8:	b2db      	uxtb	r3, r3
 8116efa:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8116efc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8116f00:	2b00      	cmp	r3, #0
 8116f02:	dce9      	bgt.n	8116ed8 <prvUnlockQueue+0x60>
 8116f04:	e000      	b.n	8116f08 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8116f06:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8116f08:	687b      	ldr	r3, [r7, #4]
 8116f0a:	22ff      	movs	r2, #255	; 0xff
 8116f0c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8116f10:	f7ff f9f8 	bl	8116304 <vPortExitCritical>
}
 8116f14:	bf00      	nop
 8116f16:	3710      	adds	r7, #16
 8116f18:	46bd      	mov	sp, r7
 8116f1a:	bd80      	pop	{r7, pc}

08116f1c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8116f1c:	b580      	push	{r7, lr}
 8116f1e:	b084      	sub	sp, #16
 8116f20:	af00      	add	r7, sp, #0
 8116f22:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8116f24:	f7ff f9be 	bl	81162a4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8116f28:	687b      	ldr	r3, [r7, #4]
 8116f2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8116f2c:	2b00      	cmp	r3, #0
 8116f2e:	d102      	bne.n	8116f36 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8116f30:	2301      	movs	r3, #1
 8116f32:	60fb      	str	r3, [r7, #12]
 8116f34:	e001      	b.n	8116f3a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8116f36:	2300      	movs	r3, #0
 8116f38:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8116f3a:	f7ff f9e3 	bl	8116304 <vPortExitCritical>

	return xReturn;
 8116f3e:	68fb      	ldr	r3, [r7, #12]
}
 8116f40:	4618      	mov	r0, r3
 8116f42:	3710      	adds	r7, #16
 8116f44:	46bd      	mov	sp, r7
 8116f46:	bd80      	pop	{r7, pc}

08116f48 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8116f48:	b580      	push	{r7, lr}
 8116f4a:	b084      	sub	sp, #16
 8116f4c:	af00      	add	r7, sp, #0
 8116f4e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8116f50:	f7ff f9a8 	bl	81162a4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8116f54:	687b      	ldr	r3, [r7, #4]
 8116f56:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8116f58:	687b      	ldr	r3, [r7, #4]
 8116f5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8116f5c:	429a      	cmp	r2, r3
 8116f5e:	d102      	bne.n	8116f66 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8116f60:	2301      	movs	r3, #1
 8116f62:	60fb      	str	r3, [r7, #12]
 8116f64:	e001      	b.n	8116f6a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8116f66:	2300      	movs	r3, #0
 8116f68:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8116f6a:	f7ff f9cb 	bl	8116304 <vPortExitCritical>

	return xReturn;
 8116f6e:	68fb      	ldr	r3, [r7, #12]
}
 8116f70:	4618      	mov	r0, r3
 8116f72:	3710      	adds	r7, #16
 8116f74:	46bd      	mov	sp, r7
 8116f76:	bd80      	pop	{r7, pc}

08116f78 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8116f78:	b480      	push	{r7}
 8116f7a:	b085      	sub	sp, #20
 8116f7c:	af00      	add	r7, sp, #0
 8116f7e:	6078      	str	r0, [r7, #4]
 8116f80:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8116f82:	2300      	movs	r3, #0
 8116f84:	60fb      	str	r3, [r7, #12]
 8116f86:	e014      	b.n	8116fb2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8116f88:	4a0f      	ldr	r2, [pc, #60]	; (8116fc8 <vQueueAddToRegistry+0x50>)
 8116f8a:	68fb      	ldr	r3, [r7, #12]
 8116f8c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8116f90:	2b00      	cmp	r3, #0
 8116f92:	d10b      	bne.n	8116fac <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8116f94:	490c      	ldr	r1, [pc, #48]	; (8116fc8 <vQueueAddToRegistry+0x50>)
 8116f96:	68fb      	ldr	r3, [r7, #12]
 8116f98:	683a      	ldr	r2, [r7, #0]
 8116f9a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8116f9e:	4a0a      	ldr	r2, [pc, #40]	; (8116fc8 <vQueueAddToRegistry+0x50>)
 8116fa0:	68fb      	ldr	r3, [r7, #12]
 8116fa2:	00db      	lsls	r3, r3, #3
 8116fa4:	4413      	add	r3, r2
 8116fa6:	687a      	ldr	r2, [r7, #4]
 8116fa8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8116faa:	e006      	b.n	8116fba <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8116fac:	68fb      	ldr	r3, [r7, #12]
 8116fae:	3301      	adds	r3, #1
 8116fb0:	60fb      	str	r3, [r7, #12]
 8116fb2:	68fb      	ldr	r3, [r7, #12]
 8116fb4:	2b07      	cmp	r3, #7
 8116fb6:	d9e7      	bls.n	8116f88 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8116fb8:	bf00      	nop
 8116fba:	bf00      	nop
 8116fbc:	3714      	adds	r7, #20
 8116fbe:	46bd      	mov	sp, r7
 8116fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8116fc4:	4770      	bx	lr
 8116fc6:	bf00      	nop
 8116fc8:	1000761c 	.word	0x1000761c

08116fcc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8116fcc:	b580      	push	{r7, lr}
 8116fce:	b086      	sub	sp, #24
 8116fd0:	af00      	add	r7, sp, #0
 8116fd2:	60f8      	str	r0, [r7, #12]
 8116fd4:	60b9      	str	r1, [r7, #8]
 8116fd6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8116fd8:	68fb      	ldr	r3, [r7, #12]
 8116fda:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8116fdc:	f7ff f962 	bl	81162a4 <vPortEnterCritical>
 8116fe0:	697b      	ldr	r3, [r7, #20]
 8116fe2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8116fe6:	b25b      	sxtb	r3, r3
 8116fe8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8116fec:	d103      	bne.n	8116ff6 <vQueueWaitForMessageRestricted+0x2a>
 8116fee:	697b      	ldr	r3, [r7, #20]
 8116ff0:	2200      	movs	r2, #0
 8116ff2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8116ff6:	697b      	ldr	r3, [r7, #20]
 8116ff8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8116ffc:	b25b      	sxtb	r3, r3
 8116ffe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8117002:	d103      	bne.n	811700c <vQueueWaitForMessageRestricted+0x40>
 8117004:	697b      	ldr	r3, [r7, #20]
 8117006:	2200      	movs	r2, #0
 8117008:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 811700c:	f7ff f97a 	bl	8116304 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8117010:	697b      	ldr	r3, [r7, #20]
 8117012:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8117014:	2b00      	cmp	r3, #0
 8117016:	d106      	bne.n	8117026 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8117018:	697b      	ldr	r3, [r7, #20]
 811701a:	3324      	adds	r3, #36	; 0x24
 811701c:	687a      	ldr	r2, [r7, #4]
 811701e:	68b9      	ldr	r1, [r7, #8]
 8117020:	4618      	mov	r0, r3
 8117022:	f000 fc4d 	bl	81178c0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8117026:	6978      	ldr	r0, [r7, #20]
 8117028:	f7ff ff26 	bl	8116e78 <prvUnlockQueue>
	}
 811702c:	bf00      	nop
 811702e:	3718      	adds	r7, #24
 8117030:	46bd      	mov	sp, r7
 8117032:	bd80      	pop	{r7, pc}

08117034 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8117034:	b580      	push	{r7, lr}
 8117036:	b08e      	sub	sp, #56	; 0x38
 8117038:	af04      	add	r7, sp, #16
 811703a:	60f8      	str	r0, [r7, #12]
 811703c:	60b9      	str	r1, [r7, #8]
 811703e:	607a      	str	r2, [r7, #4]
 8117040:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8117042:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8117044:	2b00      	cmp	r3, #0
 8117046:	d10a      	bne.n	811705e <xTaskCreateStatic+0x2a>
	__asm volatile
 8117048:	f04f 0350 	mov.w	r3, #80	; 0x50
 811704c:	f383 8811 	msr	BASEPRI, r3
 8117050:	f3bf 8f6f 	isb	sy
 8117054:	f3bf 8f4f 	dsb	sy
 8117058:	623b      	str	r3, [r7, #32]
}
 811705a:	bf00      	nop
 811705c:	e7fe      	b.n	811705c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 811705e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8117060:	2b00      	cmp	r3, #0
 8117062:	d10a      	bne.n	811707a <xTaskCreateStatic+0x46>
	__asm volatile
 8117064:	f04f 0350 	mov.w	r3, #80	; 0x50
 8117068:	f383 8811 	msr	BASEPRI, r3
 811706c:	f3bf 8f6f 	isb	sy
 8117070:	f3bf 8f4f 	dsb	sy
 8117074:	61fb      	str	r3, [r7, #28]
}
 8117076:	bf00      	nop
 8117078:	e7fe      	b.n	8117078 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 811707a:	235c      	movs	r3, #92	; 0x5c
 811707c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 811707e:	693b      	ldr	r3, [r7, #16]
 8117080:	2b5c      	cmp	r3, #92	; 0x5c
 8117082:	d00a      	beq.n	811709a <xTaskCreateStatic+0x66>
	__asm volatile
 8117084:	f04f 0350 	mov.w	r3, #80	; 0x50
 8117088:	f383 8811 	msr	BASEPRI, r3
 811708c:	f3bf 8f6f 	isb	sy
 8117090:	f3bf 8f4f 	dsb	sy
 8117094:	61bb      	str	r3, [r7, #24]
}
 8117096:	bf00      	nop
 8117098:	e7fe      	b.n	8117098 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 811709a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 811709c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 811709e:	2b00      	cmp	r3, #0
 81170a0:	d01e      	beq.n	81170e0 <xTaskCreateStatic+0xac>
 81170a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 81170a4:	2b00      	cmp	r3, #0
 81170a6:	d01b      	beq.n	81170e0 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 81170a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81170aa:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 81170ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81170ae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 81170b0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 81170b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81170b4:	2202      	movs	r2, #2
 81170b6:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 81170ba:	2300      	movs	r3, #0
 81170bc:	9303      	str	r3, [sp, #12]
 81170be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81170c0:	9302      	str	r3, [sp, #8]
 81170c2:	f107 0314 	add.w	r3, r7, #20
 81170c6:	9301      	str	r3, [sp, #4]
 81170c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81170ca:	9300      	str	r3, [sp, #0]
 81170cc:	683b      	ldr	r3, [r7, #0]
 81170ce:	687a      	ldr	r2, [r7, #4]
 81170d0:	68b9      	ldr	r1, [r7, #8]
 81170d2:	68f8      	ldr	r0, [r7, #12]
 81170d4:	f000 f850 	bl	8117178 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 81170d8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 81170da:	f000 f8dd 	bl	8117298 <prvAddNewTaskToReadyList>
 81170de:	e001      	b.n	81170e4 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 81170e0:	2300      	movs	r3, #0
 81170e2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 81170e4:	697b      	ldr	r3, [r7, #20]
	}
 81170e6:	4618      	mov	r0, r3
 81170e8:	3728      	adds	r7, #40	; 0x28
 81170ea:	46bd      	mov	sp, r7
 81170ec:	bd80      	pop	{r7, pc}

081170ee <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 81170ee:	b580      	push	{r7, lr}
 81170f0:	b08c      	sub	sp, #48	; 0x30
 81170f2:	af04      	add	r7, sp, #16
 81170f4:	60f8      	str	r0, [r7, #12]
 81170f6:	60b9      	str	r1, [r7, #8]
 81170f8:	603b      	str	r3, [r7, #0]
 81170fa:	4613      	mov	r3, r2
 81170fc:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 81170fe:	88fb      	ldrh	r3, [r7, #6]
 8117100:	009b      	lsls	r3, r3, #2
 8117102:	4618      	mov	r0, r3
 8117104:	f7fe fd04 	bl	8115b10 <pvPortMalloc>
 8117108:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 811710a:	697b      	ldr	r3, [r7, #20]
 811710c:	2b00      	cmp	r3, #0
 811710e:	d00e      	beq.n	811712e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8117110:	205c      	movs	r0, #92	; 0x5c
 8117112:	f7fe fcfd 	bl	8115b10 <pvPortMalloc>
 8117116:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8117118:	69fb      	ldr	r3, [r7, #28]
 811711a:	2b00      	cmp	r3, #0
 811711c:	d003      	beq.n	8117126 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 811711e:	69fb      	ldr	r3, [r7, #28]
 8117120:	697a      	ldr	r2, [r7, #20]
 8117122:	631a      	str	r2, [r3, #48]	; 0x30
 8117124:	e005      	b.n	8117132 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8117126:	6978      	ldr	r0, [r7, #20]
 8117128:	f7fe fdbe 	bl	8115ca8 <vPortFree>
 811712c:	e001      	b.n	8117132 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 811712e:	2300      	movs	r3, #0
 8117130:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8117132:	69fb      	ldr	r3, [r7, #28]
 8117134:	2b00      	cmp	r3, #0
 8117136:	d017      	beq.n	8117168 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8117138:	69fb      	ldr	r3, [r7, #28]
 811713a:	2200      	movs	r2, #0
 811713c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8117140:	88fa      	ldrh	r2, [r7, #6]
 8117142:	2300      	movs	r3, #0
 8117144:	9303      	str	r3, [sp, #12]
 8117146:	69fb      	ldr	r3, [r7, #28]
 8117148:	9302      	str	r3, [sp, #8]
 811714a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 811714c:	9301      	str	r3, [sp, #4]
 811714e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8117150:	9300      	str	r3, [sp, #0]
 8117152:	683b      	ldr	r3, [r7, #0]
 8117154:	68b9      	ldr	r1, [r7, #8]
 8117156:	68f8      	ldr	r0, [r7, #12]
 8117158:	f000 f80e 	bl	8117178 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 811715c:	69f8      	ldr	r0, [r7, #28]
 811715e:	f000 f89b 	bl	8117298 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8117162:	2301      	movs	r3, #1
 8117164:	61bb      	str	r3, [r7, #24]
 8117166:	e002      	b.n	811716e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8117168:	f04f 33ff 	mov.w	r3, #4294967295
 811716c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 811716e:	69bb      	ldr	r3, [r7, #24]
	}
 8117170:	4618      	mov	r0, r3
 8117172:	3720      	adds	r7, #32
 8117174:	46bd      	mov	sp, r7
 8117176:	bd80      	pop	{r7, pc}

08117178 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8117178:	b580      	push	{r7, lr}
 811717a:	b088      	sub	sp, #32
 811717c:	af00      	add	r7, sp, #0
 811717e:	60f8      	str	r0, [r7, #12]
 8117180:	60b9      	str	r1, [r7, #8]
 8117182:	607a      	str	r2, [r7, #4]
 8117184:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8117186:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8117188:	6b18      	ldr	r0, [r3, #48]	; 0x30
 811718a:	687b      	ldr	r3, [r7, #4]
 811718c:	009b      	lsls	r3, r3, #2
 811718e:	461a      	mov	r2, r3
 8117190:	21a5      	movs	r1, #165	; 0xa5
 8117192:	f001 fedf 	bl	8118f54 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8117196:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8117198:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 811719a:	687b      	ldr	r3, [r7, #4]
 811719c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 81171a0:	3b01      	subs	r3, #1
 81171a2:	009b      	lsls	r3, r3, #2
 81171a4:	4413      	add	r3, r2
 81171a6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 81171a8:	69bb      	ldr	r3, [r7, #24]
 81171aa:	f023 0307 	bic.w	r3, r3, #7
 81171ae:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 81171b0:	69bb      	ldr	r3, [r7, #24]
 81171b2:	f003 0307 	and.w	r3, r3, #7
 81171b6:	2b00      	cmp	r3, #0
 81171b8:	d00a      	beq.n	81171d0 <prvInitialiseNewTask+0x58>
	__asm volatile
 81171ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 81171be:	f383 8811 	msr	BASEPRI, r3
 81171c2:	f3bf 8f6f 	isb	sy
 81171c6:	f3bf 8f4f 	dsb	sy
 81171ca:	617b      	str	r3, [r7, #20]
}
 81171cc:	bf00      	nop
 81171ce:	e7fe      	b.n	81171ce <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 81171d0:	68bb      	ldr	r3, [r7, #8]
 81171d2:	2b00      	cmp	r3, #0
 81171d4:	d01f      	beq.n	8117216 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 81171d6:	2300      	movs	r3, #0
 81171d8:	61fb      	str	r3, [r7, #28]
 81171da:	e012      	b.n	8117202 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 81171dc:	68ba      	ldr	r2, [r7, #8]
 81171de:	69fb      	ldr	r3, [r7, #28]
 81171e0:	4413      	add	r3, r2
 81171e2:	7819      	ldrb	r1, [r3, #0]
 81171e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 81171e6:	69fb      	ldr	r3, [r7, #28]
 81171e8:	4413      	add	r3, r2
 81171ea:	3334      	adds	r3, #52	; 0x34
 81171ec:	460a      	mov	r2, r1
 81171ee:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 81171f0:	68ba      	ldr	r2, [r7, #8]
 81171f2:	69fb      	ldr	r3, [r7, #28]
 81171f4:	4413      	add	r3, r2
 81171f6:	781b      	ldrb	r3, [r3, #0]
 81171f8:	2b00      	cmp	r3, #0
 81171fa:	d006      	beq.n	811720a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 81171fc:	69fb      	ldr	r3, [r7, #28]
 81171fe:	3301      	adds	r3, #1
 8117200:	61fb      	str	r3, [r7, #28]
 8117202:	69fb      	ldr	r3, [r7, #28]
 8117204:	2b0f      	cmp	r3, #15
 8117206:	d9e9      	bls.n	81171dc <prvInitialiseNewTask+0x64>
 8117208:	e000      	b.n	811720c <prvInitialiseNewTask+0x94>
			{
				break;
 811720a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 811720c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 811720e:	2200      	movs	r2, #0
 8117210:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8117214:	e003      	b.n	811721e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8117216:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8117218:	2200      	movs	r2, #0
 811721a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 811721e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8117220:	2b37      	cmp	r3, #55	; 0x37
 8117222:	d901      	bls.n	8117228 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8117224:	2337      	movs	r3, #55	; 0x37
 8117226:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8117228:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 811722a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 811722c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 811722e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8117230:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8117232:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8117234:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8117236:	2200      	movs	r2, #0
 8117238:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 811723a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 811723c:	3304      	adds	r3, #4
 811723e:	4618      	mov	r0, r3
 8117240:	f7fe fe70 	bl	8115f24 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8117244:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8117246:	3318      	adds	r3, #24
 8117248:	4618      	mov	r0, r3
 811724a:	f7fe fe6b 	bl	8115f24 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 811724e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8117250:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8117252:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8117254:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8117256:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 811725a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 811725c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 811725e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8117260:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8117262:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8117264:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8117266:	2200      	movs	r2, #0
 8117268:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 811726a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 811726c:	2200      	movs	r2, #0
 811726e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8117272:	683a      	ldr	r2, [r7, #0]
 8117274:	68f9      	ldr	r1, [r7, #12]
 8117276:	69b8      	ldr	r0, [r7, #24]
 8117278:	f7fe fee8 	bl	811604c <pxPortInitialiseStack>
 811727c:	4602      	mov	r2, r0
 811727e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8117280:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8117282:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8117284:	2b00      	cmp	r3, #0
 8117286:	d002      	beq.n	811728e <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8117288:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 811728a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 811728c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 811728e:	bf00      	nop
 8117290:	3720      	adds	r7, #32
 8117292:	46bd      	mov	sp, r7
 8117294:	bd80      	pop	{r7, pc}
	...

08117298 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8117298:	b580      	push	{r7, lr}
 811729a:	b082      	sub	sp, #8
 811729c:	af00      	add	r7, sp, #0
 811729e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 81172a0:	f7ff f800 	bl	81162a4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 81172a4:	4b2d      	ldr	r3, [pc, #180]	; (811735c <prvAddNewTaskToReadyList+0xc4>)
 81172a6:	681b      	ldr	r3, [r3, #0]
 81172a8:	3301      	adds	r3, #1
 81172aa:	4a2c      	ldr	r2, [pc, #176]	; (811735c <prvAddNewTaskToReadyList+0xc4>)
 81172ac:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 81172ae:	4b2c      	ldr	r3, [pc, #176]	; (8117360 <prvAddNewTaskToReadyList+0xc8>)
 81172b0:	681b      	ldr	r3, [r3, #0]
 81172b2:	2b00      	cmp	r3, #0
 81172b4:	d109      	bne.n	81172ca <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 81172b6:	4a2a      	ldr	r2, [pc, #168]	; (8117360 <prvAddNewTaskToReadyList+0xc8>)
 81172b8:	687b      	ldr	r3, [r7, #4]
 81172ba:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 81172bc:	4b27      	ldr	r3, [pc, #156]	; (811735c <prvAddNewTaskToReadyList+0xc4>)
 81172be:	681b      	ldr	r3, [r3, #0]
 81172c0:	2b01      	cmp	r3, #1
 81172c2:	d110      	bne.n	81172e6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 81172c4:	f000 fc28 	bl	8117b18 <prvInitialiseTaskLists>
 81172c8:	e00d      	b.n	81172e6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 81172ca:	4b26      	ldr	r3, [pc, #152]	; (8117364 <prvAddNewTaskToReadyList+0xcc>)
 81172cc:	681b      	ldr	r3, [r3, #0]
 81172ce:	2b00      	cmp	r3, #0
 81172d0:	d109      	bne.n	81172e6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 81172d2:	4b23      	ldr	r3, [pc, #140]	; (8117360 <prvAddNewTaskToReadyList+0xc8>)
 81172d4:	681b      	ldr	r3, [r3, #0]
 81172d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 81172d8:	687b      	ldr	r3, [r7, #4]
 81172da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81172dc:	429a      	cmp	r2, r3
 81172de:	d802      	bhi.n	81172e6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 81172e0:	4a1f      	ldr	r2, [pc, #124]	; (8117360 <prvAddNewTaskToReadyList+0xc8>)
 81172e2:	687b      	ldr	r3, [r7, #4]
 81172e4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 81172e6:	4b20      	ldr	r3, [pc, #128]	; (8117368 <prvAddNewTaskToReadyList+0xd0>)
 81172e8:	681b      	ldr	r3, [r3, #0]
 81172ea:	3301      	adds	r3, #1
 81172ec:	4a1e      	ldr	r2, [pc, #120]	; (8117368 <prvAddNewTaskToReadyList+0xd0>)
 81172ee:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 81172f0:	4b1d      	ldr	r3, [pc, #116]	; (8117368 <prvAddNewTaskToReadyList+0xd0>)
 81172f2:	681a      	ldr	r2, [r3, #0]
 81172f4:	687b      	ldr	r3, [r7, #4]
 81172f6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 81172f8:	687b      	ldr	r3, [r7, #4]
 81172fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 81172fc:	4b1b      	ldr	r3, [pc, #108]	; (811736c <prvAddNewTaskToReadyList+0xd4>)
 81172fe:	681b      	ldr	r3, [r3, #0]
 8117300:	429a      	cmp	r2, r3
 8117302:	d903      	bls.n	811730c <prvAddNewTaskToReadyList+0x74>
 8117304:	687b      	ldr	r3, [r7, #4]
 8117306:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8117308:	4a18      	ldr	r2, [pc, #96]	; (811736c <prvAddNewTaskToReadyList+0xd4>)
 811730a:	6013      	str	r3, [r2, #0]
 811730c:	687b      	ldr	r3, [r7, #4]
 811730e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8117310:	4613      	mov	r3, r2
 8117312:	009b      	lsls	r3, r3, #2
 8117314:	4413      	add	r3, r2
 8117316:	009b      	lsls	r3, r3, #2
 8117318:	4a15      	ldr	r2, [pc, #84]	; (8117370 <prvAddNewTaskToReadyList+0xd8>)
 811731a:	441a      	add	r2, r3
 811731c:	687b      	ldr	r3, [r7, #4]
 811731e:	3304      	adds	r3, #4
 8117320:	4619      	mov	r1, r3
 8117322:	4610      	mov	r0, r2
 8117324:	f7fe fe0b 	bl	8115f3e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8117328:	f7fe ffec 	bl	8116304 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 811732c:	4b0d      	ldr	r3, [pc, #52]	; (8117364 <prvAddNewTaskToReadyList+0xcc>)
 811732e:	681b      	ldr	r3, [r3, #0]
 8117330:	2b00      	cmp	r3, #0
 8117332:	d00e      	beq.n	8117352 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8117334:	4b0a      	ldr	r3, [pc, #40]	; (8117360 <prvAddNewTaskToReadyList+0xc8>)
 8117336:	681b      	ldr	r3, [r3, #0]
 8117338:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 811733a:	687b      	ldr	r3, [r7, #4]
 811733c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 811733e:	429a      	cmp	r2, r3
 8117340:	d207      	bcs.n	8117352 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8117342:	4b0c      	ldr	r3, [pc, #48]	; (8117374 <prvAddNewTaskToReadyList+0xdc>)
 8117344:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8117348:	601a      	str	r2, [r3, #0]
 811734a:	f3bf 8f4f 	dsb	sy
 811734e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8117352:	bf00      	nop
 8117354:	3708      	adds	r7, #8
 8117356:	46bd      	mov	sp, r7
 8117358:	bd80      	pop	{r7, pc}
 811735a:	bf00      	nop
 811735c:	10004b50 	.word	0x10004b50
 8117360:	1000467c 	.word	0x1000467c
 8117364:	10004b5c 	.word	0x10004b5c
 8117368:	10004b6c 	.word	0x10004b6c
 811736c:	10004b58 	.word	0x10004b58
 8117370:	10004680 	.word	0x10004680
 8117374:	e000ed04 	.word	0xe000ed04

08117378 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8117378:	b580      	push	{r7, lr}
 811737a:	b084      	sub	sp, #16
 811737c:	af00      	add	r7, sp, #0
 811737e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8117380:	2300      	movs	r3, #0
 8117382:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8117384:	687b      	ldr	r3, [r7, #4]
 8117386:	2b00      	cmp	r3, #0
 8117388:	d017      	beq.n	81173ba <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 811738a:	4b13      	ldr	r3, [pc, #76]	; (81173d8 <vTaskDelay+0x60>)
 811738c:	681b      	ldr	r3, [r3, #0]
 811738e:	2b00      	cmp	r3, #0
 8117390:	d00a      	beq.n	81173a8 <vTaskDelay+0x30>
	__asm volatile
 8117392:	f04f 0350 	mov.w	r3, #80	; 0x50
 8117396:	f383 8811 	msr	BASEPRI, r3
 811739a:	f3bf 8f6f 	isb	sy
 811739e:	f3bf 8f4f 	dsb	sy
 81173a2:	60bb      	str	r3, [r7, #8]
}
 81173a4:	bf00      	nop
 81173a6:	e7fe      	b.n	81173a6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 81173a8:	f000 f880 	bl	81174ac <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 81173ac:	2100      	movs	r1, #0
 81173ae:	6878      	ldr	r0, [r7, #4]
 81173b0:	f000 fcfc 	bl	8117dac <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 81173b4:	f000 f888 	bl	81174c8 <xTaskResumeAll>
 81173b8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 81173ba:	68fb      	ldr	r3, [r7, #12]
 81173bc:	2b00      	cmp	r3, #0
 81173be:	d107      	bne.n	81173d0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 81173c0:	4b06      	ldr	r3, [pc, #24]	; (81173dc <vTaskDelay+0x64>)
 81173c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 81173c6:	601a      	str	r2, [r3, #0]
 81173c8:	f3bf 8f4f 	dsb	sy
 81173cc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 81173d0:	bf00      	nop
 81173d2:	3710      	adds	r7, #16
 81173d4:	46bd      	mov	sp, r7
 81173d6:	bd80      	pop	{r7, pc}
 81173d8:	10004b78 	.word	0x10004b78
 81173dc:	e000ed04 	.word	0xe000ed04

081173e0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 81173e0:	b580      	push	{r7, lr}
 81173e2:	b08a      	sub	sp, #40	; 0x28
 81173e4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 81173e6:	2300      	movs	r3, #0
 81173e8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 81173ea:	2300      	movs	r3, #0
 81173ec:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 81173ee:	463a      	mov	r2, r7
 81173f0:	1d39      	adds	r1, r7, #4
 81173f2:	f107 0308 	add.w	r3, r7, #8
 81173f6:	4618      	mov	r0, r3
 81173f8:	f7fe fb56 	bl	8115aa8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 81173fc:	6839      	ldr	r1, [r7, #0]
 81173fe:	687b      	ldr	r3, [r7, #4]
 8117400:	68ba      	ldr	r2, [r7, #8]
 8117402:	9202      	str	r2, [sp, #8]
 8117404:	9301      	str	r3, [sp, #4]
 8117406:	2300      	movs	r3, #0
 8117408:	9300      	str	r3, [sp, #0]
 811740a:	2300      	movs	r3, #0
 811740c:	460a      	mov	r2, r1
 811740e:	4921      	ldr	r1, [pc, #132]	; (8117494 <vTaskStartScheduler+0xb4>)
 8117410:	4821      	ldr	r0, [pc, #132]	; (8117498 <vTaskStartScheduler+0xb8>)
 8117412:	f7ff fe0f 	bl	8117034 <xTaskCreateStatic>
 8117416:	4603      	mov	r3, r0
 8117418:	4a20      	ldr	r2, [pc, #128]	; (811749c <vTaskStartScheduler+0xbc>)
 811741a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 811741c:	4b1f      	ldr	r3, [pc, #124]	; (811749c <vTaskStartScheduler+0xbc>)
 811741e:	681b      	ldr	r3, [r3, #0]
 8117420:	2b00      	cmp	r3, #0
 8117422:	d002      	beq.n	811742a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8117424:	2301      	movs	r3, #1
 8117426:	617b      	str	r3, [r7, #20]
 8117428:	e001      	b.n	811742e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 811742a:	2300      	movs	r3, #0
 811742c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 811742e:	697b      	ldr	r3, [r7, #20]
 8117430:	2b01      	cmp	r3, #1
 8117432:	d102      	bne.n	811743a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8117434:	f000 fd0e 	bl	8117e54 <xTimerCreateTimerTask>
 8117438:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 811743a:	697b      	ldr	r3, [r7, #20]
 811743c:	2b01      	cmp	r3, #1
 811743e:	d116      	bne.n	811746e <vTaskStartScheduler+0x8e>
	__asm volatile
 8117440:	f04f 0350 	mov.w	r3, #80	; 0x50
 8117444:	f383 8811 	msr	BASEPRI, r3
 8117448:	f3bf 8f6f 	isb	sy
 811744c:	f3bf 8f4f 	dsb	sy
 8117450:	613b      	str	r3, [r7, #16]
}
 8117452:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8117454:	4b12      	ldr	r3, [pc, #72]	; (81174a0 <vTaskStartScheduler+0xc0>)
 8117456:	f04f 32ff 	mov.w	r2, #4294967295
 811745a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 811745c:	4b11      	ldr	r3, [pc, #68]	; (81174a4 <vTaskStartScheduler+0xc4>)
 811745e:	2201      	movs	r2, #1
 8117460:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8117462:	4b11      	ldr	r3, [pc, #68]	; (81174a8 <vTaskStartScheduler+0xc8>)
 8117464:	2200      	movs	r2, #0
 8117466:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8117468:	f7fe fe7a 	bl	8116160 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 811746c:	e00e      	b.n	811748c <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 811746e:	697b      	ldr	r3, [r7, #20]
 8117470:	f1b3 3fff 	cmp.w	r3, #4294967295
 8117474:	d10a      	bne.n	811748c <vTaskStartScheduler+0xac>
	__asm volatile
 8117476:	f04f 0350 	mov.w	r3, #80	; 0x50
 811747a:	f383 8811 	msr	BASEPRI, r3
 811747e:	f3bf 8f6f 	isb	sy
 8117482:	f3bf 8f4f 	dsb	sy
 8117486:	60fb      	str	r3, [r7, #12]
}
 8117488:	bf00      	nop
 811748a:	e7fe      	b.n	811748a <vTaskStartScheduler+0xaa>
}
 811748c:	bf00      	nop
 811748e:	3718      	adds	r7, #24
 8117490:	46bd      	mov	sp, r7
 8117492:	bd80      	pop	{r7, pc}
 8117494:	0811b990 	.word	0x0811b990
 8117498:	08117ae9 	.word	0x08117ae9
 811749c:	10004b74 	.word	0x10004b74
 81174a0:	10004b70 	.word	0x10004b70
 81174a4:	10004b5c 	.word	0x10004b5c
 81174a8:	10004b54 	.word	0x10004b54

081174ac <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 81174ac:	b480      	push	{r7}
 81174ae:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 81174b0:	4b04      	ldr	r3, [pc, #16]	; (81174c4 <vTaskSuspendAll+0x18>)
 81174b2:	681b      	ldr	r3, [r3, #0]
 81174b4:	3301      	adds	r3, #1
 81174b6:	4a03      	ldr	r2, [pc, #12]	; (81174c4 <vTaskSuspendAll+0x18>)
 81174b8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 81174ba:	bf00      	nop
 81174bc:	46bd      	mov	sp, r7
 81174be:	f85d 7b04 	ldr.w	r7, [sp], #4
 81174c2:	4770      	bx	lr
 81174c4:	10004b78 	.word	0x10004b78

081174c8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 81174c8:	b580      	push	{r7, lr}
 81174ca:	b084      	sub	sp, #16
 81174cc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 81174ce:	2300      	movs	r3, #0
 81174d0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 81174d2:	2300      	movs	r3, #0
 81174d4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 81174d6:	4b42      	ldr	r3, [pc, #264]	; (81175e0 <xTaskResumeAll+0x118>)
 81174d8:	681b      	ldr	r3, [r3, #0]
 81174da:	2b00      	cmp	r3, #0
 81174dc:	d10a      	bne.n	81174f4 <xTaskResumeAll+0x2c>
	__asm volatile
 81174de:	f04f 0350 	mov.w	r3, #80	; 0x50
 81174e2:	f383 8811 	msr	BASEPRI, r3
 81174e6:	f3bf 8f6f 	isb	sy
 81174ea:	f3bf 8f4f 	dsb	sy
 81174ee:	603b      	str	r3, [r7, #0]
}
 81174f0:	bf00      	nop
 81174f2:	e7fe      	b.n	81174f2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 81174f4:	f7fe fed6 	bl	81162a4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 81174f8:	4b39      	ldr	r3, [pc, #228]	; (81175e0 <xTaskResumeAll+0x118>)
 81174fa:	681b      	ldr	r3, [r3, #0]
 81174fc:	3b01      	subs	r3, #1
 81174fe:	4a38      	ldr	r2, [pc, #224]	; (81175e0 <xTaskResumeAll+0x118>)
 8117500:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8117502:	4b37      	ldr	r3, [pc, #220]	; (81175e0 <xTaskResumeAll+0x118>)
 8117504:	681b      	ldr	r3, [r3, #0]
 8117506:	2b00      	cmp	r3, #0
 8117508:	d162      	bne.n	81175d0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 811750a:	4b36      	ldr	r3, [pc, #216]	; (81175e4 <xTaskResumeAll+0x11c>)
 811750c:	681b      	ldr	r3, [r3, #0]
 811750e:	2b00      	cmp	r3, #0
 8117510:	d05e      	beq.n	81175d0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8117512:	e02f      	b.n	8117574 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8117514:	4b34      	ldr	r3, [pc, #208]	; (81175e8 <xTaskResumeAll+0x120>)
 8117516:	68db      	ldr	r3, [r3, #12]
 8117518:	68db      	ldr	r3, [r3, #12]
 811751a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 811751c:	68fb      	ldr	r3, [r7, #12]
 811751e:	3318      	adds	r3, #24
 8117520:	4618      	mov	r0, r3
 8117522:	f7fe fd69 	bl	8115ff8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8117526:	68fb      	ldr	r3, [r7, #12]
 8117528:	3304      	adds	r3, #4
 811752a:	4618      	mov	r0, r3
 811752c:	f7fe fd64 	bl	8115ff8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8117530:	68fb      	ldr	r3, [r7, #12]
 8117532:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8117534:	4b2d      	ldr	r3, [pc, #180]	; (81175ec <xTaskResumeAll+0x124>)
 8117536:	681b      	ldr	r3, [r3, #0]
 8117538:	429a      	cmp	r2, r3
 811753a:	d903      	bls.n	8117544 <xTaskResumeAll+0x7c>
 811753c:	68fb      	ldr	r3, [r7, #12]
 811753e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8117540:	4a2a      	ldr	r2, [pc, #168]	; (81175ec <xTaskResumeAll+0x124>)
 8117542:	6013      	str	r3, [r2, #0]
 8117544:	68fb      	ldr	r3, [r7, #12]
 8117546:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8117548:	4613      	mov	r3, r2
 811754a:	009b      	lsls	r3, r3, #2
 811754c:	4413      	add	r3, r2
 811754e:	009b      	lsls	r3, r3, #2
 8117550:	4a27      	ldr	r2, [pc, #156]	; (81175f0 <xTaskResumeAll+0x128>)
 8117552:	441a      	add	r2, r3
 8117554:	68fb      	ldr	r3, [r7, #12]
 8117556:	3304      	adds	r3, #4
 8117558:	4619      	mov	r1, r3
 811755a:	4610      	mov	r0, r2
 811755c:	f7fe fcef 	bl	8115f3e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8117560:	68fb      	ldr	r3, [r7, #12]
 8117562:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8117564:	4b23      	ldr	r3, [pc, #140]	; (81175f4 <xTaskResumeAll+0x12c>)
 8117566:	681b      	ldr	r3, [r3, #0]
 8117568:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 811756a:	429a      	cmp	r2, r3
 811756c:	d302      	bcc.n	8117574 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 811756e:	4b22      	ldr	r3, [pc, #136]	; (81175f8 <xTaskResumeAll+0x130>)
 8117570:	2201      	movs	r2, #1
 8117572:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8117574:	4b1c      	ldr	r3, [pc, #112]	; (81175e8 <xTaskResumeAll+0x120>)
 8117576:	681b      	ldr	r3, [r3, #0]
 8117578:	2b00      	cmp	r3, #0
 811757a:	d1cb      	bne.n	8117514 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 811757c:	68fb      	ldr	r3, [r7, #12]
 811757e:	2b00      	cmp	r3, #0
 8117580:	d001      	beq.n	8117586 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8117582:	f000 fb67 	bl	8117c54 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8117586:	4b1d      	ldr	r3, [pc, #116]	; (81175fc <xTaskResumeAll+0x134>)
 8117588:	681b      	ldr	r3, [r3, #0]
 811758a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 811758c:	687b      	ldr	r3, [r7, #4]
 811758e:	2b00      	cmp	r3, #0
 8117590:	d010      	beq.n	81175b4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8117592:	f000 f859 	bl	8117648 <xTaskIncrementTick>
 8117596:	4603      	mov	r3, r0
 8117598:	2b00      	cmp	r3, #0
 811759a:	d002      	beq.n	81175a2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 811759c:	4b16      	ldr	r3, [pc, #88]	; (81175f8 <xTaskResumeAll+0x130>)
 811759e:	2201      	movs	r2, #1
 81175a0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 81175a2:	687b      	ldr	r3, [r7, #4]
 81175a4:	3b01      	subs	r3, #1
 81175a6:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 81175a8:	687b      	ldr	r3, [r7, #4]
 81175aa:	2b00      	cmp	r3, #0
 81175ac:	d1f1      	bne.n	8117592 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 81175ae:	4b13      	ldr	r3, [pc, #76]	; (81175fc <xTaskResumeAll+0x134>)
 81175b0:	2200      	movs	r2, #0
 81175b2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 81175b4:	4b10      	ldr	r3, [pc, #64]	; (81175f8 <xTaskResumeAll+0x130>)
 81175b6:	681b      	ldr	r3, [r3, #0]
 81175b8:	2b00      	cmp	r3, #0
 81175ba:	d009      	beq.n	81175d0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 81175bc:	2301      	movs	r3, #1
 81175be:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 81175c0:	4b0f      	ldr	r3, [pc, #60]	; (8117600 <xTaskResumeAll+0x138>)
 81175c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 81175c6:	601a      	str	r2, [r3, #0]
 81175c8:	f3bf 8f4f 	dsb	sy
 81175cc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 81175d0:	f7fe fe98 	bl	8116304 <vPortExitCritical>

	return xAlreadyYielded;
 81175d4:	68bb      	ldr	r3, [r7, #8]
}
 81175d6:	4618      	mov	r0, r3
 81175d8:	3710      	adds	r7, #16
 81175da:	46bd      	mov	sp, r7
 81175dc:	bd80      	pop	{r7, pc}
 81175de:	bf00      	nop
 81175e0:	10004b78 	.word	0x10004b78
 81175e4:	10004b50 	.word	0x10004b50
 81175e8:	10004b10 	.word	0x10004b10
 81175ec:	10004b58 	.word	0x10004b58
 81175f0:	10004680 	.word	0x10004680
 81175f4:	1000467c 	.word	0x1000467c
 81175f8:	10004b64 	.word	0x10004b64
 81175fc:	10004b60 	.word	0x10004b60
 8117600:	e000ed04 	.word	0xe000ed04

08117604 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8117604:	b480      	push	{r7}
 8117606:	b083      	sub	sp, #12
 8117608:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 811760a:	4b05      	ldr	r3, [pc, #20]	; (8117620 <xTaskGetTickCount+0x1c>)
 811760c:	681b      	ldr	r3, [r3, #0]
 811760e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8117610:	687b      	ldr	r3, [r7, #4]
}
 8117612:	4618      	mov	r0, r3
 8117614:	370c      	adds	r7, #12
 8117616:	46bd      	mov	sp, r7
 8117618:	f85d 7b04 	ldr.w	r7, [sp], #4
 811761c:	4770      	bx	lr
 811761e:	bf00      	nop
 8117620:	10004b54 	.word	0x10004b54

08117624 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8117624:	b580      	push	{r7, lr}
 8117626:	b082      	sub	sp, #8
 8117628:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 811762a:	f7fe ff1d 	bl	8116468 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 811762e:	2300      	movs	r3, #0
 8117630:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8117632:	4b04      	ldr	r3, [pc, #16]	; (8117644 <xTaskGetTickCountFromISR+0x20>)
 8117634:	681b      	ldr	r3, [r3, #0]
 8117636:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8117638:	683b      	ldr	r3, [r7, #0]
}
 811763a:	4618      	mov	r0, r3
 811763c:	3708      	adds	r7, #8
 811763e:	46bd      	mov	sp, r7
 8117640:	bd80      	pop	{r7, pc}
 8117642:	bf00      	nop
 8117644:	10004b54 	.word	0x10004b54

08117648 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8117648:	b580      	push	{r7, lr}
 811764a:	b086      	sub	sp, #24
 811764c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 811764e:	2300      	movs	r3, #0
 8117650:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8117652:	4b4f      	ldr	r3, [pc, #316]	; (8117790 <xTaskIncrementTick+0x148>)
 8117654:	681b      	ldr	r3, [r3, #0]
 8117656:	2b00      	cmp	r3, #0
 8117658:	f040 808f 	bne.w	811777a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 811765c:	4b4d      	ldr	r3, [pc, #308]	; (8117794 <xTaskIncrementTick+0x14c>)
 811765e:	681b      	ldr	r3, [r3, #0]
 8117660:	3301      	adds	r3, #1
 8117662:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8117664:	4a4b      	ldr	r2, [pc, #300]	; (8117794 <xTaskIncrementTick+0x14c>)
 8117666:	693b      	ldr	r3, [r7, #16]
 8117668:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 811766a:	693b      	ldr	r3, [r7, #16]
 811766c:	2b00      	cmp	r3, #0
 811766e:	d120      	bne.n	81176b2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8117670:	4b49      	ldr	r3, [pc, #292]	; (8117798 <xTaskIncrementTick+0x150>)
 8117672:	681b      	ldr	r3, [r3, #0]
 8117674:	681b      	ldr	r3, [r3, #0]
 8117676:	2b00      	cmp	r3, #0
 8117678:	d00a      	beq.n	8117690 <xTaskIncrementTick+0x48>
	__asm volatile
 811767a:	f04f 0350 	mov.w	r3, #80	; 0x50
 811767e:	f383 8811 	msr	BASEPRI, r3
 8117682:	f3bf 8f6f 	isb	sy
 8117686:	f3bf 8f4f 	dsb	sy
 811768a:	603b      	str	r3, [r7, #0]
}
 811768c:	bf00      	nop
 811768e:	e7fe      	b.n	811768e <xTaskIncrementTick+0x46>
 8117690:	4b41      	ldr	r3, [pc, #260]	; (8117798 <xTaskIncrementTick+0x150>)
 8117692:	681b      	ldr	r3, [r3, #0]
 8117694:	60fb      	str	r3, [r7, #12]
 8117696:	4b41      	ldr	r3, [pc, #260]	; (811779c <xTaskIncrementTick+0x154>)
 8117698:	681b      	ldr	r3, [r3, #0]
 811769a:	4a3f      	ldr	r2, [pc, #252]	; (8117798 <xTaskIncrementTick+0x150>)
 811769c:	6013      	str	r3, [r2, #0]
 811769e:	4a3f      	ldr	r2, [pc, #252]	; (811779c <xTaskIncrementTick+0x154>)
 81176a0:	68fb      	ldr	r3, [r7, #12]
 81176a2:	6013      	str	r3, [r2, #0]
 81176a4:	4b3e      	ldr	r3, [pc, #248]	; (81177a0 <xTaskIncrementTick+0x158>)
 81176a6:	681b      	ldr	r3, [r3, #0]
 81176a8:	3301      	adds	r3, #1
 81176aa:	4a3d      	ldr	r2, [pc, #244]	; (81177a0 <xTaskIncrementTick+0x158>)
 81176ac:	6013      	str	r3, [r2, #0]
 81176ae:	f000 fad1 	bl	8117c54 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 81176b2:	4b3c      	ldr	r3, [pc, #240]	; (81177a4 <xTaskIncrementTick+0x15c>)
 81176b4:	681b      	ldr	r3, [r3, #0]
 81176b6:	693a      	ldr	r2, [r7, #16]
 81176b8:	429a      	cmp	r2, r3
 81176ba:	d349      	bcc.n	8117750 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 81176bc:	4b36      	ldr	r3, [pc, #216]	; (8117798 <xTaskIncrementTick+0x150>)
 81176be:	681b      	ldr	r3, [r3, #0]
 81176c0:	681b      	ldr	r3, [r3, #0]
 81176c2:	2b00      	cmp	r3, #0
 81176c4:	d104      	bne.n	81176d0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 81176c6:	4b37      	ldr	r3, [pc, #220]	; (81177a4 <xTaskIncrementTick+0x15c>)
 81176c8:	f04f 32ff 	mov.w	r2, #4294967295
 81176cc:	601a      	str	r2, [r3, #0]
					break;
 81176ce:	e03f      	b.n	8117750 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 81176d0:	4b31      	ldr	r3, [pc, #196]	; (8117798 <xTaskIncrementTick+0x150>)
 81176d2:	681b      	ldr	r3, [r3, #0]
 81176d4:	68db      	ldr	r3, [r3, #12]
 81176d6:	68db      	ldr	r3, [r3, #12]
 81176d8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 81176da:	68bb      	ldr	r3, [r7, #8]
 81176dc:	685b      	ldr	r3, [r3, #4]
 81176de:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 81176e0:	693a      	ldr	r2, [r7, #16]
 81176e2:	687b      	ldr	r3, [r7, #4]
 81176e4:	429a      	cmp	r2, r3
 81176e6:	d203      	bcs.n	81176f0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 81176e8:	4a2e      	ldr	r2, [pc, #184]	; (81177a4 <xTaskIncrementTick+0x15c>)
 81176ea:	687b      	ldr	r3, [r7, #4]
 81176ec:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 81176ee:	e02f      	b.n	8117750 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 81176f0:	68bb      	ldr	r3, [r7, #8]
 81176f2:	3304      	adds	r3, #4
 81176f4:	4618      	mov	r0, r3
 81176f6:	f7fe fc7f 	bl	8115ff8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 81176fa:	68bb      	ldr	r3, [r7, #8]
 81176fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81176fe:	2b00      	cmp	r3, #0
 8117700:	d004      	beq.n	811770c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8117702:	68bb      	ldr	r3, [r7, #8]
 8117704:	3318      	adds	r3, #24
 8117706:	4618      	mov	r0, r3
 8117708:	f7fe fc76 	bl	8115ff8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 811770c:	68bb      	ldr	r3, [r7, #8]
 811770e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8117710:	4b25      	ldr	r3, [pc, #148]	; (81177a8 <xTaskIncrementTick+0x160>)
 8117712:	681b      	ldr	r3, [r3, #0]
 8117714:	429a      	cmp	r2, r3
 8117716:	d903      	bls.n	8117720 <xTaskIncrementTick+0xd8>
 8117718:	68bb      	ldr	r3, [r7, #8]
 811771a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 811771c:	4a22      	ldr	r2, [pc, #136]	; (81177a8 <xTaskIncrementTick+0x160>)
 811771e:	6013      	str	r3, [r2, #0]
 8117720:	68bb      	ldr	r3, [r7, #8]
 8117722:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8117724:	4613      	mov	r3, r2
 8117726:	009b      	lsls	r3, r3, #2
 8117728:	4413      	add	r3, r2
 811772a:	009b      	lsls	r3, r3, #2
 811772c:	4a1f      	ldr	r2, [pc, #124]	; (81177ac <xTaskIncrementTick+0x164>)
 811772e:	441a      	add	r2, r3
 8117730:	68bb      	ldr	r3, [r7, #8]
 8117732:	3304      	adds	r3, #4
 8117734:	4619      	mov	r1, r3
 8117736:	4610      	mov	r0, r2
 8117738:	f7fe fc01 	bl	8115f3e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 811773c:	68bb      	ldr	r3, [r7, #8]
 811773e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8117740:	4b1b      	ldr	r3, [pc, #108]	; (81177b0 <xTaskIncrementTick+0x168>)
 8117742:	681b      	ldr	r3, [r3, #0]
 8117744:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8117746:	429a      	cmp	r2, r3
 8117748:	d3b8      	bcc.n	81176bc <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 811774a:	2301      	movs	r3, #1
 811774c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 811774e:	e7b5      	b.n	81176bc <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8117750:	4b17      	ldr	r3, [pc, #92]	; (81177b0 <xTaskIncrementTick+0x168>)
 8117752:	681b      	ldr	r3, [r3, #0]
 8117754:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8117756:	4915      	ldr	r1, [pc, #84]	; (81177ac <xTaskIncrementTick+0x164>)
 8117758:	4613      	mov	r3, r2
 811775a:	009b      	lsls	r3, r3, #2
 811775c:	4413      	add	r3, r2
 811775e:	009b      	lsls	r3, r3, #2
 8117760:	440b      	add	r3, r1
 8117762:	681b      	ldr	r3, [r3, #0]
 8117764:	2b01      	cmp	r3, #1
 8117766:	d901      	bls.n	811776c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8117768:	2301      	movs	r3, #1
 811776a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 811776c:	4b11      	ldr	r3, [pc, #68]	; (81177b4 <xTaskIncrementTick+0x16c>)
 811776e:	681b      	ldr	r3, [r3, #0]
 8117770:	2b00      	cmp	r3, #0
 8117772:	d007      	beq.n	8117784 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8117774:	2301      	movs	r3, #1
 8117776:	617b      	str	r3, [r7, #20]
 8117778:	e004      	b.n	8117784 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 811777a:	4b0f      	ldr	r3, [pc, #60]	; (81177b8 <xTaskIncrementTick+0x170>)
 811777c:	681b      	ldr	r3, [r3, #0]
 811777e:	3301      	adds	r3, #1
 8117780:	4a0d      	ldr	r2, [pc, #52]	; (81177b8 <xTaskIncrementTick+0x170>)
 8117782:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8117784:	697b      	ldr	r3, [r7, #20]
}
 8117786:	4618      	mov	r0, r3
 8117788:	3718      	adds	r7, #24
 811778a:	46bd      	mov	sp, r7
 811778c:	bd80      	pop	{r7, pc}
 811778e:	bf00      	nop
 8117790:	10004b78 	.word	0x10004b78
 8117794:	10004b54 	.word	0x10004b54
 8117798:	10004b08 	.word	0x10004b08
 811779c:	10004b0c 	.word	0x10004b0c
 81177a0:	10004b68 	.word	0x10004b68
 81177a4:	10004b70 	.word	0x10004b70
 81177a8:	10004b58 	.word	0x10004b58
 81177ac:	10004680 	.word	0x10004680
 81177b0:	1000467c 	.word	0x1000467c
 81177b4:	10004b64 	.word	0x10004b64
 81177b8:	10004b60 	.word	0x10004b60

081177bc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 81177bc:	b480      	push	{r7}
 81177be:	b085      	sub	sp, #20
 81177c0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 81177c2:	4b28      	ldr	r3, [pc, #160]	; (8117864 <vTaskSwitchContext+0xa8>)
 81177c4:	681b      	ldr	r3, [r3, #0]
 81177c6:	2b00      	cmp	r3, #0
 81177c8:	d003      	beq.n	81177d2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 81177ca:	4b27      	ldr	r3, [pc, #156]	; (8117868 <vTaskSwitchContext+0xac>)
 81177cc:	2201      	movs	r2, #1
 81177ce:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 81177d0:	e041      	b.n	8117856 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 81177d2:	4b25      	ldr	r3, [pc, #148]	; (8117868 <vTaskSwitchContext+0xac>)
 81177d4:	2200      	movs	r2, #0
 81177d6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 81177d8:	4b24      	ldr	r3, [pc, #144]	; (811786c <vTaskSwitchContext+0xb0>)
 81177da:	681b      	ldr	r3, [r3, #0]
 81177dc:	60fb      	str	r3, [r7, #12]
 81177de:	e010      	b.n	8117802 <vTaskSwitchContext+0x46>
 81177e0:	68fb      	ldr	r3, [r7, #12]
 81177e2:	2b00      	cmp	r3, #0
 81177e4:	d10a      	bne.n	81177fc <vTaskSwitchContext+0x40>
	__asm volatile
 81177e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 81177ea:	f383 8811 	msr	BASEPRI, r3
 81177ee:	f3bf 8f6f 	isb	sy
 81177f2:	f3bf 8f4f 	dsb	sy
 81177f6:	607b      	str	r3, [r7, #4]
}
 81177f8:	bf00      	nop
 81177fa:	e7fe      	b.n	81177fa <vTaskSwitchContext+0x3e>
 81177fc:	68fb      	ldr	r3, [r7, #12]
 81177fe:	3b01      	subs	r3, #1
 8117800:	60fb      	str	r3, [r7, #12]
 8117802:	491b      	ldr	r1, [pc, #108]	; (8117870 <vTaskSwitchContext+0xb4>)
 8117804:	68fa      	ldr	r2, [r7, #12]
 8117806:	4613      	mov	r3, r2
 8117808:	009b      	lsls	r3, r3, #2
 811780a:	4413      	add	r3, r2
 811780c:	009b      	lsls	r3, r3, #2
 811780e:	440b      	add	r3, r1
 8117810:	681b      	ldr	r3, [r3, #0]
 8117812:	2b00      	cmp	r3, #0
 8117814:	d0e4      	beq.n	81177e0 <vTaskSwitchContext+0x24>
 8117816:	68fa      	ldr	r2, [r7, #12]
 8117818:	4613      	mov	r3, r2
 811781a:	009b      	lsls	r3, r3, #2
 811781c:	4413      	add	r3, r2
 811781e:	009b      	lsls	r3, r3, #2
 8117820:	4a13      	ldr	r2, [pc, #76]	; (8117870 <vTaskSwitchContext+0xb4>)
 8117822:	4413      	add	r3, r2
 8117824:	60bb      	str	r3, [r7, #8]
 8117826:	68bb      	ldr	r3, [r7, #8]
 8117828:	685b      	ldr	r3, [r3, #4]
 811782a:	685a      	ldr	r2, [r3, #4]
 811782c:	68bb      	ldr	r3, [r7, #8]
 811782e:	605a      	str	r2, [r3, #4]
 8117830:	68bb      	ldr	r3, [r7, #8]
 8117832:	685a      	ldr	r2, [r3, #4]
 8117834:	68bb      	ldr	r3, [r7, #8]
 8117836:	3308      	adds	r3, #8
 8117838:	429a      	cmp	r2, r3
 811783a:	d104      	bne.n	8117846 <vTaskSwitchContext+0x8a>
 811783c:	68bb      	ldr	r3, [r7, #8]
 811783e:	685b      	ldr	r3, [r3, #4]
 8117840:	685a      	ldr	r2, [r3, #4]
 8117842:	68bb      	ldr	r3, [r7, #8]
 8117844:	605a      	str	r2, [r3, #4]
 8117846:	68bb      	ldr	r3, [r7, #8]
 8117848:	685b      	ldr	r3, [r3, #4]
 811784a:	68db      	ldr	r3, [r3, #12]
 811784c:	4a09      	ldr	r2, [pc, #36]	; (8117874 <vTaskSwitchContext+0xb8>)
 811784e:	6013      	str	r3, [r2, #0]
 8117850:	4a06      	ldr	r2, [pc, #24]	; (811786c <vTaskSwitchContext+0xb0>)
 8117852:	68fb      	ldr	r3, [r7, #12]
 8117854:	6013      	str	r3, [r2, #0]
}
 8117856:	bf00      	nop
 8117858:	3714      	adds	r7, #20
 811785a:	46bd      	mov	sp, r7
 811785c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8117860:	4770      	bx	lr
 8117862:	bf00      	nop
 8117864:	10004b78 	.word	0x10004b78
 8117868:	10004b64 	.word	0x10004b64
 811786c:	10004b58 	.word	0x10004b58
 8117870:	10004680 	.word	0x10004680
 8117874:	1000467c 	.word	0x1000467c

08117878 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8117878:	b580      	push	{r7, lr}
 811787a:	b084      	sub	sp, #16
 811787c:	af00      	add	r7, sp, #0
 811787e:	6078      	str	r0, [r7, #4]
 8117880:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8117882:	687b      	ldr	r3, [r7, #4]
 8117884:	2b00      	cmp	r3, #0
 8117886:	d10a      	bne.n	811789e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8117888:	f04f 0350 	mov.w	r3, #80	; 0x50
 811788c:	f383 8811 	msr	BASEPRI, r3
 8117890:	f3bf 8f6f 	isb	sy
 8117894:	f3bf 8f4f 	dsb	sy
 8117898:	60fb      	str	r3, [r7, #12]
}
 811789a:	bf00      	nop
 811789c:	e7fe      	b.n	811789c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 811789e:	4b07      	ldr	r3, [pc, #28]	; (81178bc <vTaskPlaceOnEventList+0x44>)
 81178a0:	681b      	ldr	r3, [r3, #0]
 81178a2:	3318      	adds	r3, #24
 81178a4:	4619      	mov	r1, r3
 81178a6:	6878      	ldr	r0, [r7, #4]
 81178a8:	f7fe fb6d 	bl	8115f86 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 81178ac:	2101      	movs	r1, #1
 81178ae:	6838      	ldr	r0, [r7, #0]
 81178b0:	f000 fa7c 	bl	8117dac <prvAddCurrentTaskToDelayedList>
}
 81178b4:	bf00      	nop
 81178b6:	3710      	adds	r7, #16
 81178b8:	46bd      	mov	sp, r7
 81178ba:	bd80      	pop	{r7, pc}
 81178bc:	1000467c 	.word	0x1000467c

081178c0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 81178c0:	b580      	push	{r7, lr}
 81178c2:	b086      	sub	sp, #24
 81178c4:	af00      	add	r7, sp, #0
 81178c6:	60f8      	str	r0, [r7, #12]
 81178c8:	60b9      	str	r1, [r7, #8]
 81178ca:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 81178cc:	68fb      	ldr	r3, [r7, #12]
 81178ce:	2b00      	cmp	r3, #0
 81178d0:	d10a      	bne.n	81178e8 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 81178d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 81178d6:	f383 8811 	msr	BASEPRI, r3
 81178da:	f3bf 8f6f 	isb	sy
 81178de:	f3bf 8f4f 	dsb	sy
 81178e2:	617b      	str	r3, [r7, #20]
}
 81178e4:	bf00      	nop
 81178e6:	e7fe      	b.n	81178e6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 81178e8:	4b0a      	ldr	r3, [pc, #40]	; (8117914 <vTaskPlaceOnEventListRestricted+0x54>)
 81178ea:	681b      	ldr	r3, [r3, #0]
 81178ec:	3318      	adds	r3, #24
 81178ee:	4619      	mov	r1, r3
 81178f0:	68f8      	ldr	r0, [r7, #12]
 81178f2:	f7fe fb24 	bl	8115f3e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 81178f6:	687b      	ldr	r3, [r7, #4]
 81178f8:	2b00      	cmp	r3, #0
 81178fa:	d002      	beq.n	8117902 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 81178fc:	f04f 33ff 	mov.w	r3, #4294967295
 8117900:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8117902:	6879      	ldr	r1, [r7, #4]
 8117904:	68b8      	ldr	r0, [r7, #8]
 8117906:	f000 fa51 	bl	8117dac <prvAddCurrentTaskToDelayedList>
	}
 811790a:	bf00      	nop
 811790c:	3718      	adds	r7, #24
 811790e:	46bd      	mov	sp, r7
 8117910:	bd80      	pop	{r7, pc}
 8117912:	bf00      	nop
 8117914:	1000467c 	.word	0x1000467c

08117918 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8117918:	b580      	push	{r7, lr}
 811791a:	b086      	sub	sp, #24
 811791c:	af00      	add	r7, sp, #0
 811791e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8117920:	687b      	ldr	r3, [r7, #4]
 8117922:	68db      	ldr	r3, [r3, #12]
 8117924:	68db      	ldr	r3, [r3, #12]
 8117926:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8117928:	693b      	ldr	r3, [r7, #16]
 811792a:	2b00      	cmp	r3, #0
 811792c:	d10a      	bne.n	8117944 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 811792e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8117932:	f383 8811 	msr	BASEPRI, r3
 8117936:	f3bf 8f6f 	isb	sy
 811793a:	f3bf 8f4f 	dsb	sy
 811793e:	60fb      	str	r3, [r7, #12]
}
 8117940:	bf00      	nop
 8117942:	e7fe      	b.n	8117942 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8117944:	693b      	ldr	r3, [r7, #16]
 8117946:	3318      	adds	r3, #24
 8117948:	4618      	mov	r0, r3
 811794a:	f7fe fb55 	bl	8115ff8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 811794e:	4b1e      	ldr	r3, [pc, #120]	; (81179c8 <xTaskRemoveFromEventList+0xb0>)
 8117950:	681b      	ldr	r3, [r3, #0]
 8117952:	2b00      	cmp	r3, #0
 8117954:	d11d      	bne.n	8117992 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8117956:	693b      	ldr	r3, [r7, #16]
 8117958:	3304      	adds	r3, #4
 811795a:	4618      	mov	r0, r3
 811795c:	f7fe fb4c 	bl	8115ff8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8117960:	693b      	ldr	r3, [r7, #16]
 8117962:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8117964:	4b19      	ldr	r3, [pc, #100]	; (81179cc <xTaskRemoveFromEventList+0xb4>)
 8117966:	681b      	ldr	r3, [r3, #0]
 8117968:	429a      	cmp	r2, r3
 811796a:	d903      	bls.n	8117974 <xTaskRemoveFromEventList+0x5c>
 811796c:	693b      	ldr	r3, [r7, #16]
 811796e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8117970:	4a16      	ldr	r2, [pc, #88]	; (81179cc <xTaskRemoveFromEventList+0xb4>)
 8117972:	6013      	str	r3, [r2, #0]
 8117974:	693b      	ldr	r3, [r7, #16]
 8117976:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8117978:	4613      	mov	r3, r2
 811797a:	009b      	lsls	r3, r3, #2
 811797c:	4413      	add	r3, r2
 811797e:	009b      	lsls	r3, r3, #2
 8117980:	4a13      	ldr	r2, [pc, #76]	; (81179d0 <xTaskRemoveFromEventList+0xb8>)
 8117982:	441a      	add	r2, r3
 8117984:	693b      	ldr	r3, [r7, #16]
 8117986:	3304      	adds	r3, #4
 8117988:	4619      	mov	r1, r3
 811798a:	4610      	mov	r0, r2
 811798c:	f7fe fad7 	bl	8115f3e <vListInsertEnd>
 8117990:	e005      	b.n	811799e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8117992:	693b      	ldr	r3, [r7, #16]
 8117994:	3318      	adds	r3, #24
 8117996:	4619      	mov	r1, r3
 8117998:	480e      	ldr	r0, [pc, #56]	; (81179d4 <xTaskRemoveFromEventList+0xbc>)
 811799a:	f7fe fad0 	bl	8115f3e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 811799e:	693b      	ldr	r3, [r7, #16]
 81179a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 81179a2:	4b0d      	ldr	r3, [pc, #52]	; (81179d8 <xTaskRemoveFromEventList+0xc0>)
 81179a4:	681b      	ldr	r3, [r3, #0]
 81179a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81179a8:	429a      	cmp	r2, r3
 81179aa:	d905      	bls.n	81179b8 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 81179ac:	2301      	movs	r3, #1
 81179ae:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 81179b0:	4b0a      	ldr	r3, [pc, #40]	; (81179dc <xTaskRemoveFromEventList+0xc4>)
 81179b2:	2201      	movs	r2, #1
 81179b4:	601a      	str	r2, [r3, #0]
 81179b6:	e001      	b.n	81179bc <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 81179b8:	2300      	movs	r3, #0
 81179ba:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 81179bc:	697b      	ldr	r3, [r7, #20]
}
 81179be:	4618      	mov	r0, r3
 81179c0:	3718      	adds	r7, #24
 81179c2:	46bd      	mov	sp, r7
 81179c4:	bd80      	pop	{r7, pc}
 81179c6:	bf00      	nop
 81179c8:	10004b78 	.word	0x10004b78
 81179cc:	10004b58 	.word	0x10004b58
 81179d0:	10004680 	.word	0x10004680
 81179d4:	10004b10 	.word	0x10004b10
 81179d8:	1000467c 	.word	0x1000467c
 81179dc:	10004b64 	.word	0x10004b64

081179e0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 81179e0:	b480      	push	{r7}
 81179e2:	b083      	sub	sp, #12
 81179e4:	af00      	add	r7, sp, #0
 81179e6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 81179e8:	4b06      	ldr	r3, [pc, #24]	; (8117a04 <vTaskInternalSetTimeOutState+0x24>)
 81179ea:	681a      	ldr	r2, [r3, #0]
 81179ec:	687b      	ldr	r3, [r7, #4]
 81179ee:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 81179f0:	4b05      	ldr	r3, [pc, #20]	; (8117a08 <vTaskInternalSetTimeOutState+0x28>)
 81179f2:	681a      	ldr	r2, [r3, #0]
 81179f4:	687b      	ldr	r3, [r7, #4]
 81179f6:	605a      	str	r2, [r3, #4]
}
 81179f8:	bf00      	nop
 81179fa:	370c      	adds	r7, #12
 81179fc:	46bd      	mov	sp, r7
 81179fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8117a02:	4770      	bx	lr
 8117a04:	10004b68 	.word	0x10004b68
 8117a08:	10004b54 	.word	0x10004b54

08117a0c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8117a0c:	b580      	push	{r7, lr}
 8117a0e:	b088      	sub	sp, #32
 8117a10:	af00      	add	r7, sp, #0
 8117a12:	6078      	str	r0, [r7, #4]
 8117a14:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8117a16:	687b      	ldr	r3, [r7, #4]
 8117a18:	2b00      	cmp	r3, #0
 8117a1a:	d10a      	bne.n	8117a32 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8117a1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8117a20:	f383 8811 	msr	BASEPRI, r3
 8117a24:	f3bf 8f6f 	isb	sy
 8117a28:	f3bf 8f4f 	dsb	sy
 8117a2c:	613b      	str	r3, [r7, #16]
}
 8117a2e:	bf00      	nop
 8117a30:	e7fe      	b.n	8117a30 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8117a32:	683b      	ldr	r3, [r7, #0]
 8117a34:	2b00      	cmp	r3, #0
 8117a36:	d10a      	bne.n	8117a4e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8117a38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8117a3c:	f383 8811 	msr	BASEPRI, r3
 8117a40:	f3bf 8f6f 	isb	sy
 8117a44:	f3bf 8f4f 	dsb	sy
 8117a48:	60fb      	str	r3, [r7, #12]
}
 8117a4a:	bf00      	nop
 8117a4c:	e7fe      	b.n	8117a4c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8117a4e:	f7fe fc29 	bl	81162a4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8117a52:	4b1d      	ldr	r3, [pc, #116]	; (8117ac8 <xTaskCheckForTimeOut+0xbc>)
 8117a54:	681b      	ldr	r3, [r3, #0]
 8117a56:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8117a58:	687b      	ldr	r3, [r7, #4]
 8117a5a:	685b      	ldr	r3, [r3, #4]
 8117a5c:	69ba      	ldr	r2, [r7, #24]
 8117a5e:	1ad3      	subs	r3, r2, r3
 8117a60:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8117a62:	683b      	ldr	r3, [r7, #0]
 8117a64:	681b      	ldr	r3, [r3, #0]
 8117a66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8117a6a:	d102      	bne.n	8117a72 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8117a6c:	2300      	movs	r3, #0
 8117a6e:	61fb      	str	r3, [r7, #28]
 8117a70:	e023      	b.n	8117aba <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8117a72:	687b      	ldr	r3, [r7, #4]
 8117a74:	681a      	ldr	r2, [r3, #0]
 8117a76:	4b15      	ldr	r3, [pc, #84]	; (8117acc <xTaskCheckForTimeOut+0xc0>)
 8117a78:	681b      	ldr	r3, [r3, #0]
 8117a7a:	429a      	cmp	r2, r3
 8117a7c:	d007      	beq.n	8117a8e <xTaskCheckForTimeOut+0x82>
 8117a7e:	687b      	ldr	r3, [r7, #4]
 8117a80:	685b      	ldr	r3, [r3, #4]
 8117a82:	69ba      	ldr	r2, [r7, #24]
 8117a84:	429a      	cmp	r2, r3
 8117a86:	d302      	bcc.n	8117a8e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8117a88:	2301      	movs	r3, #1
 8117a8a:	61fb      	str	r3, [r7, #28]
 8117a8c:	e015      	b.n	8117aba <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8117a8e:	683b      	ldr	r3, [r7, #0]
 8117a90:	681b      	ldr	r3, [r3, #0]
 8117a92:	697a      	ldr	r2, [r7, #20]
 8117a94:	429a      	cmp	r2, r3
 8117a96:	d20b      	bcs.n	8117ab0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8117a98:	683b      	ldr	r3, [r7, #0]
 8117a9a:	681a      	ldr	r2, [r3, #0]
 8117a9c:	697b      	ldr	r3, [r7, #20]
 8117a9e:	1ad2      	subs	r2, r2, r3
 8117aa0:	683b      	ldr	r3, [r7, #0]
 8117aa2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8117aa4:	6878      	ldr	r0, [r7, #4]
 8117aa6:	f7ff ff9b 	bl	81179e0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8117aaa:	2300      	movs	r3, #0
 8117aac:	61fb      	str	r3, [r7, #28]
 8117aae:	e004      	b.n	8117aba <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8117ab0:	683b      	ldr	r3, [r7, #0]
 8117ab2:	2200      	movs	r2, #0
 8117ab4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8117ab6:	2301      	movs	r3, #1
 8117ab8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8117aba:	f7fe fc23 	bl	8116304 <vPortExitCritical>

	return xReturn;
 8117abe:	69fb      	ldr	r3, [r7, #28]
}
 8117ac0:	4618      	mov	r0, r3
 8117ac2:	3720      	adds	r7, #32
 8117ac4:	46bd      	mov	sp, r7
 8117ac6:	bd80      	pop	{r7, pc}
 8117ac8:	10004b54 	.word	0x10004b54
 8117acc:	10004b68 	.word	0x10004b68

08117ad0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8117ad0:	b480      	push	{r7}
 8117ad2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8117ad4:	4b03      	ldr	r3, [pc, #12]	; (8117ae4 <vTaskMissedYield+0x14>)
 8117ad6:	2201      	movs	r2, #1
 8117ad8:	601a      	str	r2, [r3, #0]
}
 8117ada:	bf00      	nop
 8117adc:	46bd      	mov	sp, r7
 8117ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8117ae2:	4770      	bx	lr
 8117ae4:	10004b64 	.word	0x10004b64

08117ae8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8117ae8:	b580      	push	{r7, lr}
 8117aea:	b082      	sub	sp, #8
 8117aec:	af00      	add	r7, sp, #0
 8117aee:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8117af0:	f000 f852 	bl	8117b98 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8117af4:	4b06      	ldr	r3, [pc, #24]	; (8117b10 <prvIdleTask+0x28>)
 8117af6:	681b      	ldr	r3, [r3, #0]
 8117af8:	2b01      	cmp	r3, #1
 8117afa:	d9f9      	bls.n	8117af0 <prvIdleTask+0x8>
			{
				taskYIELD();
 8117afc:	4b05      	ldr	r3, [pc, #20]	; (8117b14 <prvIdleTask+0x2c>)
 8117afe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8117b02:	601a      	str	r2, [r3, #0]
 8117b04:	f3bf 8f4f 	dsb	sy
 8117b08:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8117b0c:	e7f0      	b.n	8117af0 <prvIdleTask+0x8>
 8117b0e:	bf00      	nop
 8117b10:	10004680 	.word	0x10004680
 8117b14:	e000ed04 	.word	0xe000ed04

08117b18 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8117b18:	b580      	push	{r7, lr}
 8117b1a:	b082      	sub	sp, #8
 8117b1c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8117b1e:	2300      	movs	r3, #0
 8117b20:	607b      	str	r3, [r7, #4]
 8117b22:	e00c      	b.n	8117b3e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8117b24:	687a      	ldr	r2, [r7, #4]
 8117b26:	4613      	mov	r3, r2
 8117b28:	009b      	lsls	r3, r3, #2
 8117b2a:	4413      	add	r3, r2
 8117b2c:	009b      	lsls	r3, r3, #2
 8117b2e:	4a12      	ldr	r2, [pc, #72]	; (8117b78 <prvInitialiseTaskLists+0x60>)
 8117b30:	4413      	add	r3, r2
 8117b32:	4618      	mov	r0, r3
 8117b34:	f7fe f9d6 	bl	8115ee4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8117b38:	687b      	ldr	r3, [r7, #4]
 8117b3a:	3301      	adds	r3, #1
 8117b3c:	607b      	str	r3, [r7, #4]
 8117b3e:	687b      	ldr	r3, [r7, #4]
 8117b40:	2b37      	cmp	r3, #55	; 0x37
 8117b42:	d9ef      	bls.n	8117b24 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8117b44:	480d      	ldr	r0, [pc, #52]	; (8117b7c <prvInitialiseTaskLists+0x64>)
 8117b46:	f7fe f9cd 	bl	8115ee4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8117b4a:	480d      	ldr	r0, [pc, #52]	; (8117b80 <prvInitialiseTaskLists+0x68>)
 8117b4c:	f7fe f9ca 	bl	8115ee4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8117b50:	480c      	ldr	r0, [pc, #48]	; (8117b84 <prvInitialiseTaskLists+0x6c>)
 8117b52:	f7fe f9c7 	bl	8115ee4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8117b56:	480c      	ldr	r0, [pc, #48]	; (8117b88 <prvInitialiseTaskLists+0x70>)
 8117b58:	f7fe f9c4 	bl	8115ee4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8117b5c:	480b      	ldr	r0, [pc, #44]	; (8117b8c <prvInitialiseTaskLists+0x74>)
 8117b5e:	f7fe f9c1 	bl	8115ee4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8117b62:	4b0b      	ldr	r3, [pc, #44]	; (8117b90 <prvInitialiseTaskLists+0x78>)
 8117b64:	4a05      	ldr	r2, [pc, #20]	; (8117b7c <prvInitialiseTaskLists+0x64>)
 8117b66:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8117b68:	4b0a      	ldr	r3, [pc, #40]	; (8117b94 <prvInitialiseTaskLists+0x7c>)
 8117b6a:	4a05      	ldr	r2, [pc, #20]	; (8117b80 <prvInitialiseTaskLists+0x68>)
 8117b6c:	601a      	str	r2, [r3, #0]
}
 8117b6e:	bf00      	nop
 8117b70:	3708      	adds	r7, #8
 8117b72:	46bd      	mov	sp, r7
 8117b74:	bd80      	pop	{r7, pc}
 8117b76:	bf00      	nop
 8117b78:	10004680 	.word	0x10004680
 8117b7c:	10004ae0 	.word	0x10004ae0
 8117b80:	10004af4 	.word	0x10004af4
 8117b84:	10004b10 	.word	0x10004b10
 8117b88:	10004b24 	.word	0x10004b24
 8117b8c:	10004b3c 	.word	0x10004b3c
 8117b90:	10004b08 	.word	0x10004b08
 8117b94:	10004b0c 	.word	0x10004b0c

08117b98 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8117b98:	b580      	push	{r7, lr}
 8117b9a:	b082      	sub	sp, #8
 8117b9c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8117b9e:	e019      	b.n	8117bd4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8117ba0:	f7fe fb80 	bl	81162a4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8117ba4:	4b10      	ldr	r3, [pc, #64]	; (8117be8 <prvCheckTasksWaitingTermination+0x50>)
 8117ba6:	68db      	ldr	r3, [r3, #12]
 8117ba8:	68db      	ldr	r3, [r3, #12]
 8117baa:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8117bac:	687b      	ldr	r3, [r7, #4]
 8117bae:	3304      	adds	r3, #4
 8117bb0:	4618      	mov	r0, r3
 8117bb2:	f7fe fa21 	bl	8115ff8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8117bb6:	4b0d      	ldr	r3, [pc, #52]	; (8117bec <prvCheckTasksWaitingTermination+0x54>)
 8117bb8:	681b      	ldr	r3, [r3, #0]
 8117bba:	3b01      	subs	r3, #1
 8117bbc:	4a0b      	ldr	r2, [pc, #44]	; (8117bec <prvCheckTasksWaitingTermination+0x54>)
 8117bbe:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8117bc0:	4b0b      	ldr	r3, [pc, #44]	; (8117bf0 <prvCheckTasksWaitingTermination+0x58>)
 8117bc2:	681b      	ldr	r3, [r3, #0]
 8117bc4:	3b01      	subs	r3, #1
 8117bc6:	4a0a      	ldr	r2, [pc, #40]	; (8117bf0 <prvCheckTasksWaitingTermination+0x58>)
 8117bc8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8117bca:	f7fe fb9b 	bl	8116304 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8117bce:	6878      	ldr	r0, [r7, #4]
 8117bd0:	f000 f810 	bl	8117bf4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8117bd4:	4b06      	ldr	r3, [pc, #24]	; (8117bf0 <prvCheckTasksWaitingTermination+0x58>)
 8117bd6:	681b      	ldr	r3, [r3, #0]
 8117bd8:	2b00      	cmp	r3, #0
 8117bda:	d1e1      	bne.n	8117ba0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8117bdc:	bf00      	nop
 8117bde:	bf00      	nop
 8117be0:	3708      	adds	r7, #8
 8117be2:	46bd      	mov	sp, r7
 8117be4:	bd80      	pop	{r7, pc}
 8117be6:	bf00      	nop
 8117be8:	10004b24 	.word	0x10004b24
 8117bec:	10004b50 	.word	0x10004b50
 8117bf0:	10004b38 	.word	0x10004b38

08117bf4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8117bf4:	b580      	push	{r7, lr}
 8117bf6:	b084      	sub	sp, #16
 8117bf8:	af00      	add	r7, sp, #0
 8117bfa:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8117bfc:	687b      	ldr	r3, [r7, #4]
 8117bfe:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8117c02:	2b00      	cmp	r3, #0
 8117c04:	d108      	bne.n	8117c18 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8117c06:	687b      	ldr	r3, [r7, #4]
 8117c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8117c0a:	4618      	mov	r0, r3
 8117c0c:	f7fe f84c 	bl	8115ca8 <vPortFree>
				vPortFree( pxTCB );
 8117c10:	6878      	ldr	r0, [r7, #4]
 8117c12:	f7fe f849 	bl	8115ca8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8117c16:	e018      	b.n	8117c4a <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8117c18:	687b      	ldr	r3, [r7, #4]
 8117c1a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8117c1e:	2b01      	cmp	r3, #1
 8117c20:	d103      	bne.n	8117c2a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8117c22:	6878      	ldr	r0, [r7, #4]
 8117c24:	f7fe f840 	bl	8115ca8 <vPortFree>
	}
 8117c28:	e00f      	b.n	8117c4a <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8117c2a:	687b      	ldr	r3, [r7, #4]
 8117c2c:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8117c30:	2b02      	cmp	r3, #2
 8117c32:	d00a      	beq.n	8117c4a <prvDeleteTCB+0x56>
	__asm volatile
 8117c34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8117c38:	f383 8811 	msr	BASEPRI, r3
 8117c3c:	f3bf 8f6f 	isb	sy
 8117c40:	f3bf 8f4f 	dsb	sy
 8117c44:	60fb      	str	r3, [r7, #12]
}
 8117c46:	bf00      	nop
 8117c48:	e7fe      	b.n	8117c48 <prvDeleteTCB+0x54>
	}
 8117c4a:	bf00      	nop
 8117c4c:	3710      	adds	r7, #16
 8117c4e:	46bd      	mov	sp, r7
 8117c50:	bd80      	pop	{r7, pc}
	...

08117c54 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8117c54:	b480      	push	{r7}
 8117c56:	b083      	sub	sp, #12
 8117c58:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8117c5a:	4b0c      	ldr	r3, [pc, #48]	; (8117c8c <prvResetNextTaskUnblockTime+0x38>)
 8117c5c:	681b      	ldr	r3, [r3, #0]
 8117c5e:	681b      	ldr	r3, [r3, #0]
 8117c60:	2b00      	cmp	r3, #0
 8117c62:	d104      	bne.n	8117c6e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8117c64:	4b0a      	ldr	r3, [pc, #40]	; (8117c90 <prvResetNextTaskUnblockTime+0x3c>)
 8117c66:	f04f 32ff 	mov.w	r2, #4294967295
 8117c6a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8117c6c:	e008      	b.n	8117c80 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8117c6e:	4b07      	ldr	r3, [pc, #28]	; (8117c8c <prvResetNextTaskUnblockTime+0x38>)
 8117c70:	681b      	ldr	r3, [r3, #0]
 8117c72:	68db      	ldr	r3, [r3, #12]
 8117c74:	68db      	ldr	r3, [r3, #12]
 8117c76:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8117c78:	687b      	ldr	r3, [r7, #4]
 8117c7a:	685b      	ldr	r3, [r3, #4]
 8117c7c:	4a04      	ldr	r2, [pc, #16]	; (8117c90 <prvResetNextTaskUnblockTime+0x3c>)
 8117c7e:	6013      	str	r3, [r2, #0]
}
 8117c80:	bf00      	nop
 8117c82:	370c      	adds	r7, #12
 8117c84:	46bd      	mov	sp, r7
 8117c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8117c8a:	4770      	bx	lr
 8117c8c:	10004b08 	.word	0x10004b08
 8117c90:	10004b70 	.word	0x10004b70

08117c94 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8117c94:	b480      	push	{r7}
 8117c96:	b083      	sub	sp, #12
 8117c98:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8117c9a:	4b0b      	ldr	r3, [pc, #44]	; (8117cc8 <xTaskGetSchedulerState+0x34>)
 8117c9c:	681b      	ldr	r3, [r3, #0]
 8117c9e:	2b00      	cmp	r3, #0
 8117ca0:	d102      	bne.n	8117ca8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8117ca2:	2301      	movs	r3, #1
 8117ca4:	607b      	str	r3, [r7, #4]
 8117ca6:	e008      	b.n	8117cba <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8117ca8:	4b08      	ldr	r3, [pc, #32]	; (8117ccc <xTaskGetSchedulerState+0x38>)
 8117caa:	681b      	ldr	r3, [r3, #0]
 8117cac:	2b00      	cmp	r3, #0
 8117cae:	d102      	bne.n	8117cb6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8117cb0:	2302      	movs	r3, #2
 8117cb2:	607b      	str	r3, [r7, #4]
 8117cb4:	e001      	b.n	8117cba <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8117cb6:	2300      	movs	r3, #0
 8117cb8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8117cba:	687b      	ldr	r3, [r7, #4]
	}
 8117cbc:	4618      	mov	r0, r3
 8117cbe:	370c      	adds	r7, #12
 8117cc0:	46bd      	mov	sp, r7
 8117cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8117cc6:	4770      	bx	lr
 8117cc8:	10004b5c 	.word	0x10004b5c
 8117ccc:	10004b78 	.word	0x10004b78

08117cd0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8117cd0:	b580      	push	{r7, lr}
 8117cd2:	b086      	sub	sp, #24
 8117cd4:	af00      	add	r7, sp, #0
 8117cd6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8117cd8:	687b      	ldr	r3, [r7, #4]
 8117cda:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8117cdc:	2300      	movs	r3, #0
 8117cde:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8117ce0:	687b      	ldr	r3, [r7, #4]
 8117ce2:	2b00      	cmp	r3, #0
 8117ce4:	d056      	beq.n	8117d94 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8117ce6:	4b2e      	ldr	r3, [pc, #184]	; (8117da0 <xTaskPriorityDisinherit+0xd0>)
 8117ce8:	681b      	ldr	r3, [r3, #0]
 8117cea:	693a      	ldr	r2, [r7, #16]
 8117cec:	429a      	cmp	r2, r3
 8117cee:	d00a      	beq.n	8117d06 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8117cf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8117cf4:	f383 8811 	msr	BASEPRI, r3
 8117cf8:	f3bf 8f6f 	isb	sy
 8117cfc:	f3bf 8f4f 	dsb	sy
 8117d00:	60fb      	str	r3, [r7, #12]
}
 8117d02:	bf00      	nop
 8117d04:	e7fe      	b.n	8117d04 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8117d06:	693b      	ldr	r3, [r7, #16]
 8117d08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8117d0a:	2b00      	cmp	r3, #0
 8117d0c:	d10a      	bne.n	8117d24 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8117d0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8117d12:	f383 8811 	msr	BASEPRI, r3
 8117d16:	f3bf 8f6f 	isb	sy
 8117d1a:	f3bf 8f4f 	dsb	sy
 8117d1e:	60bb      	str	r3, [r7, #8]
}
 8117d20:	bf00      	nop
 8117d22:	e7fe      	b.n	8117d22 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8117d24:	693b      	ldr	r3, [r7, #16]
 8117d26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8117d28:	1e5a      	subs	r2, r3, #1
 8117d2a:	693b      	ldr	r3, [r7, #16]
 8117d2c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8117d2e:	693b      	ldr	r3, [r7, #16]
 8117d30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8117d32:	693b      	ldr	r3, [r7, #16]
 8117d34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8117d36:	429a      	cmp	r2, r3
 8117d38:	d02c      	beq.n	8117d94 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8117d3a:	693b      	ldr	r3, [r7, #16]
 8117d3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8117d3e:	2b00      	cmp	r3, #0
 8117d40:	d128      	bne.n	8117d94 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8117d42:	693b      	ldr	r3, [r7, #16]
 8117d44:	3304      	adds	r3, #4
 8117d46:	4618      	mov	r0, r3
 8117d48:	f7fe f956 	bl	8115ff8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8117d4c:	693b      	ldr	r3, [r7, #16]
 8117d4e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8117d50:	693b      	ldr	r3, [r7, #16]
 8117d52:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8117d54:	693b      	ldr	r3, [r7, #16]
 8117d56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8117d58:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8117d5c:	693b      	ldr	r3, [r7, #16]
 8117d5e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8117d60:	693b      	ldr	r3, [r7, #16]
 8117d62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8117d64:	4b0f      	ldr	r3, [pc, #60]	; (8117da4 <xTaskPriorityDisinherit+0xd4>)
 8117d66:	681b      	ldr	r3, [r3, #0]
 8117d68:	429a      	cmp	r2, r3
 8117d6a:	d903      	bls.n	8117d74 <xTaskPriorityDisinherit+0xa4>
 8117d6c:	693b      	ldr	r3, [r7, #16]
 8117d6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8117d70:	4a0c      	ldr	r2, [pc, #48]	; (8117da4 <xTaskPriorityDisinherit+0xd4>)
 8117d72:	6013      	str	r3, [r2, #0]
 8117d74:	693b      	ldr	r3, [r7, #16]
 8117d76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8117d78:	4613      	mov	r3, r2
 8117d7a:	009b      	lsls	r3, r3, #2
 8117d7c:	4413      	add	r3, r2
 8117d7e:	009b      	lsls	r3, r3, #2
 8117d80:	4a09      	ldr	r2, [pc, #36]	; (8117da8 <xTaskPriorityDisinherit+0xd8>)
 8117d82:	441a      	add	r2, r3
 8117d84:	693b      	ldr	r3, [r7, #16]
 8117d86:	3304      	adds	r3, #4
 8117d88:	4619      	mov	r1, r3
 8117d8a:	4610      	mov	r0, r2
 8117d8c:	f7fe f8d7 	bl	8115f3e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8117d90:	2301      	movs	r3, #1
 8117d92:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8117d94:	697b      	ldr	r3, [r7, #20]
	}
 8117d96:	4618      	mov	r0, r3
 8117d98:	3718      	adds	r7, #24
 8117d9a:	46bd      	mov	sp, r7
 8117d9c:	bd80      	pop	{r7, pc}
 8117d9e:	bf00      	nop
 8117da0:	1000467c 	.word	0x1000467c
 8117da4:	10004b58 	.word	0x10004b58
 8117da8:	10004680 	.word	0x10004680

08117dac <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8117dac:	b580      	push	{r7, lr}
 8117dae:	b084      	sub	sp, #16
 8117db0:	af00      	add	r7, sp, #0
 8117db2:	6078      	str	r0, [r7, #4]
 8117db4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8117db6:	4b21      	ldr	r3, [pc, #132]	; (8117e3c <prvAddCurrentTaskToDelayedList+0x90>)
 8117db8:	681b      	ldr	r3, [r3, #0]
 8117dba:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8117dbc:	4b20      	ldr	r3, [pc, #128]	; (8117e40 <prvAddCurrentTaskToDelayedList+0x94>)
 8117dbe:	681b      	ldr	r3, [r3, #0]
 8117dc0:	3304      	adds	r3, #4
 8117dc2:	4618      	mov	r0, r3
 8117dc4:	f7fe f918 	bl	8115ff8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8117dc8:	687b      	ldr	r3, [r7, #4]
 8117dca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8117dce:	d10a      	bne.n	8117de6 <prvAddCurrentTaskToDelayedList+0x3a>
 8117dd0:	683b      	ldr	r3, [r7, #0]
 8117dd2:	2b00      	cmp	r3, #0
 8117dd4:	d007      	beq.n	8117de6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8117dd6:	4b1a      	ldr	r3, [pc, #104]	; (8117e40 <prvAddCurrentTaskToDelayedList+0x94>)
 8117dd8:	681b      	ldr	r3, [r3, #0]
 8117dda:	3304      	adds	r3, #4
 8117ddc:	4619      	mov	r1, r3
 8117dde:	4819      	ldr	r0, [pc, #100]	; (8117e44 <prvAddCurrentTaskToDelayedList+0x98>)
 8117de0:	f7fe f8ad 	bl	8115f3e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8117de4:	e026      	b.n	8117e34 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8117de6:	68fa      	ldr	r2, [r7, #12]
 8117de8:	687b      	ldr	r3, [r7, #4]
 8117dea:	4413      	add	r3, r2
 8117dec:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8117dee:	4b14      	ldr	r3, [pc, #80]	; (8117e40 <prvAddCurrentTaskToDelayedList+0x94>)
 8117df0:	681b      	ldr	r3, [r3, #0]
 8117df2:	68ba      	ldr	r2, [r7, #8]
 8117df4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8117df6:	68ba      	ldr	r2, [r7, #8]
 8117df8:	68fb      	ldr	r3, [r7, #12]
 8117dfa:	429a      	cmp	r2, r3
 8117dfc:	d209      	bcs.n	8117e12 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8117dfe:	4b12      	ldr	r3, [pc, #72]	; (8117e48 <prvAddCurrentTaskToDelayedList+0x9c>)
 8117e00:	681a      	ldr	r2, [r3, #0]
 8117e02:	4b0f      	ldr	r3, [pc, #60]	; (8117e40 <prvAddCurrentTaskToDelayedList+0x94>)
 8117e04:	681b      	ldr	r3, [r3, #0]
 8117e06:	3304      	adds	r3, #4
 8117e08:	4619      	mov	r1, r3
 8117e0a:	4610      	mov	r0, r2
 8117e0c:	f7fe f8bb 	bl	8115f86 <vListInsert>
}
 8117e10:	e010      	b.n	8117e34 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8117e12:	4b0e      	ldr	r3, [pc, #56]	; (8117e4c <prvAddCurrentTaskToDelayedList+0xa0>)
 8117e14:	681a      	ldr	r2, [r3, #0]
 8117e16:	4b0a      	ldr	r3, [pc, #40]	; (8117e40 <prvAddCurrentTaskToDelayedList+0x94>)
 8117e18:	681b      	ldr	r3, [r3, #0]
 8117e1a:	3304      	adds	r3, #4
 8117e1c:	4619      	mov	r1, r3
 8117e1e:	4610      	mov	r0, r2
 8117e20:	f7fe f8b1 	bl	8115f86 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8117e24:	4b0a      	ldr	r3, [pc, #40]	; (8117e50 <prvAddCurrentTaskToDelayedList+0xa4>)
 8117e26:	681b      	ldr	r3, [r3, #0]
 8117e28:	68ba      	ldr	r2, [r7, #8]
 8117e2a:	429a      	cmp	r2, r3
 8117e2c:	d202      	bcs.n	8117e34 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8117e2e:	4a08      	ldr	r2, [pc, #32]	; (8117e50 <prvAddCurrentTaskToDelayedList+0xa4>)
 8117e30:	68bb      	ldr	r3, [r7, #8]
 8117e32:	6013      	str	r3, [r2, #0]
}
 8117e34:	bf00      	nop
 8117e36:	3710      	adds	r7, #16
 8117e38:	46bd      	mov	sp, r7
 8117e3a:	bd80      	pop	{r7, pc}
 8117e3c:	10004b54 	.word	0x10004b54
 8117e40:	1000467c 	.word	0x1000467c
 8117e44:	10004b3c 	.word	0x10004b3c
 8117e48:	10004b0c 	.word	0x10004b0c
 8117e4c:	10004b08 	.word	0x10004b08
 8117e50:	10004b70 	.word	0x10004b70

08117e54 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8117e54:	b580      	push	{r7, lr}
 8117e56:	b08a      	sub	sp, #40	; 0x28
 8117e58:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8117e5a:	2300      	movs	r3, #0
 8117e5c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8117e5e:	f000 fb07 	bl	8118470 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8117e62:	4b1c      	ldr	r3, [pc, #112]	; (8117ed4 <xTimerCreateTimerTask+0x80>)
 8117e64:	681b      	ldr	r3, [r3, #0]
 8117e66:	2b00      	cmp	r3, #0
 8117e68:	d021      	beq.n	8117eae <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8117e6a:	2300      	movs	r3, #0
 8117e6c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8117e6e:	2300      	movs	r3, #0
 8117e70:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8117e72:	1d3a      	adds	r2, r7, #4
 8117e74:	f107 0108 	add.w	r1, r7, #8
 8117e78:	f107 030c 	add.w	r3, r7, #12
 8117e7c:	4618      	mov	r0, r3
 8117e7e:	f7fd fe2d 	bl	8115adc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8117e82:	6879      	ldr	r1, [r7, #4]
 8117e84:	68bb      	ldr	r3, [r7, #8]
 8117e86:	68fa      	ldr	r2, [r7, #12]
 8117e88:	9202      	str	r2, [sp, #8]
 8117e8a:	9301      	str	r3, [sp, #4]
 8117e8c:	2302      	movs	r3, #2
 8117e8e:	9300      	str	r3, [sp, #0]
 8117e90:	2300      	movs	r3, #0
 8117e92:	460a      	mov	r2, r1
 8117e94:	4910      	ldr	r1, [pc, #64]	; (8117ed8 <xTimerCreateTimerTask+0x84>)
 8117e96:	4811      	ldr	r0, [pc, #68]	; (8117edc <xTimerCreateTimerTask+0x88>)
 8117e98:	f7ff f8cc 	bl	8117034 <xTaskCreateStatic>
 8117e9c:	4603      	mov	r3, r0
 8117e9e:	4a10      	ldr	r2, [pc, #64]	; (8117ee0 <xTimerCreateTimerTask+0x8c>)
 8117ea0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8117ea2:	4b0f      	ldr	r3, [pc, #60]	; (8117ee0 <xTimerCreateTimerTask+0x8c>)
 8117ea4:	681b      	ldr	r3, [r3, #0]
 8117ea6:	2b00      	cmp	r3, #0
 8117ea8:	d001      	beq.n	8117eae <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8117eaa:	2301      	movs	r3, #1
 8117eac:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8117eae:	697b      	ldr	r3, [r7, #20]
 8117eb0:	2b00      	cmp	r3, #0
 8117eb2:	d10a      	bne.n	8117eca <xTimerCreateTimerTask+0x76>
	__asm volatile
 8117eb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8117eb8:	f383 8811 	msr	BASEPRI, r3
 8117ebc:	f3bf 8f6f 	isb	sy
 8117ec0:	f3bf 8f4f 	dsb	sy
 8117ec4:	613b      	str	r3, [r7, #16]
}
 8117ec6:	bf00      	nop
 8117ec8:	e7fe      	b.n	8117ec8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8117eca:	697b      	ldr	r3, [r7, #20]
}
 8117ecc:	4618      	mov	r0, r3
 8117ece:	3718      	adds	r7, #24
 8117ed0:	46bd      	mov	sp, r7
 8117ed2:	bd80      	pop	{r7, pc}
 8117ed4:	10004bac 	.word	0x10004bac
 8117ed8:	0811b998 	.word	0x0811b998
 8117edc:	08118019 	.word	0x08118019
 8117ee0:	10004bb0 	.word	0x10004bb0

08117ee4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8117ee4:	b580      	push	{r7, lr}
 8117ee6:	b08a      	sub	sp, #40	; 0x28
 8117ee8:	af00      	add	r7, sp, #0
 8117eea:	60f8      	str	r0, [r7, #12]
 8117eec:	60b9      	str	r1, [r7, #8]
 8117eee:	607a      	str	r2, [r7, #4]
 8117ef0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8117ef2:	2300      	movs	r3, #0
 8117ef4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8117ef6:	68fb      	ldr	r3, [r7, #12]
 8117ef8:	2b00      	cmp	r3, #0
 8117efa:	d10a      	bne.n	8117f12 <xTimerGenericCommand+0x2e>
	__asm volatile
 8117efc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8117f00:	f383 8811 	msr	BASEPRI, r3
 8117f04:	f3bf 8f6f 	isb	sy
 8117f08:	f3bf 8f4f 	dsb	sy
 8117f0c:	623b      	str	r3, [r7, #32]
}
 8117f0e:	bf00      	nop
 8117f10:	e7fe      	b.n	8117f10 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8117f12:	4b1a      	ldr	r3, [pc, #104]	; (8117f7c <xTimerGenericCommand+0x98>)
 8117f14:	681b      	ldr	r3, [r3, #0]
 8117f16:	2b00      	cmp	r3, #0
 8117f18:	d02a      	beq.n	8117f70 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8117f1a:	68bb      	ldr	r3, [r7, #8]
 8117f1c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8117f1e:	687b      	ldr	r3, [r7, #4]
 8117f20:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8117f22:	68fb      	ldr	r3, [r7, #12]
 8117f24:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8117f26:	68bb      	ldr	r3, [r7, #8]
 8117f28:	2b05      	cmp	r3, #5
 8117f2a:	dc18      	bgt.n	8117f5e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8117f2c:	f7ff feb2 	bl	8117c94 <xTaskGetSchedulerState>
 8117f30:	4603      	mov	r3, r0
 8117f32:	2b02      	cmp	r3, #2
 8117f34:	d109      	bne.n	8117f4a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8117f36:	4b11      	ldr	r3, [pc, #68]	; (8117f7c <xTimerGenericCommand+0x98>)
 8117f38:	6818      	ldr	r0, [r3, #0]
 8117f3a:	f107 0110 	add.w	r1, r7, #16
 8117f3e:	2300      	movs	r3, #0
 8117f40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8117f42:	f7fe fc0f 	bl	8116764 <xQueueGenericSend>
 8117f46:	6278      	str	r0, [r7, #36]	; 0x24
 8117f48:	e012      	b.n	8117f70 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8117f4a:	4b0c      	ldr	r3, [pc, #48]	; (8117f7c <xTimerGenericCommand+0x98>)
 8117f4c:	6818      	ldr	r0, [r3, #0]
 8117f4e:	f107 0110 	add.w	r1, r7, #16
 8117f52:	2300      	movs	r3, #0
 8117f54:	2200      	movs	r2, #0
 8117f56:	f7fe fc05 	bl	8116764 <xQueueGenericSend>
 8117f5a:	6278      	str	r0, [r7, #36]	; 0x24
 8117f5c:	e008      	b.n	8117f70 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8117f5e:	4b07      	ldr	r3, [pc, #28]	; (8117f7c <xTimerGenericCommand+0x98>)
 8117f60:	6818      	ldr	r0, [r3, #0]
 8117f62:	f107 0110 	add.w	r1, r7, #16
 8117f66:	2300      	movs	r3, #0
 8117f68:	683a      	ldr	r2, [r7, #0]
 8117f6a:	f7fe fcf9 	bl	8116960 <xQueueGenericSendFromISR>
 8117f6e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8117f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8117f72:	4618      	mov	r0, r3
 8117f74:	3728      	adds	r7, #40	; 0x28
 8117f76:	46bd      	mov	sp, r7
 8117f78:	bd80      	pop	{r7, pc}
 8117f7a:	bf00      	nop
 8117f7c:	10004bac 	.word	0x10004bac

08117f80 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8117f80:	b580      	push	{r7, lr}
 8117f82:	b088      	sub	sp, #32
 8117f84:	af02      	add	r7, sp, #8
 8117f86:	6078      	str	r0, [r7, #4]
 8117f88:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8117f8a:	4b22      	ldr	r3, [pc, #136]	; (8118014 <prvProcessExpiredTimer+0x94>)
 8117f8c:	681b      	ldr	r3, [r3, #0]
 8117f8e:	68db      	ldr	r3, [r3, #12]
 8117f90:	68db      	ldr	r3, [r3, #12]
 8117f92:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8117f94:	697b      	ldr	r3, [r7, #20]
 8117f96:	3304      	adds	r3, #4
 8117f98:	4618      	mov	r0, r3
 8117f9a:	f7fe f82d 	bl	8115ff8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8117f9e:	697b      	ldr	r3, [r7, #20]
 8117fa0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8117fa4:	f003 0304 	and.w	r3, r3, #4
 8117fa8:	2b00      	cmp	r3, #0
 8117faa:	d022      	beq.n	8117ff2 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8117fac:	697b      	ldr	r3, [r7, #20]
 8117fae:	699a      	ldr	r2, [r3, #24]
 8117fb0:	687b      	ldr	r3, [r7, #4]
 8117fb2:	18d1      	adds	r1, r2, r3
 8117fb4:	687b      	ldr	r3, [r7, #4]
 8117fb6:	683a      	ldr	r2, [r7, #0]
 8117fb8:	6978      	ldr	r0, [r7, #20]
 8117fba:	f000 f8d1 	bl	8118160 <prvInsertTimerInActiveList>
 8117fbe:	4603      	mov	r3, r0
 8117fc0:	2b00      	cmp	r3, #0
 8117fc2:	d01f      	beq.n	8118004 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8117fc4:	2300      	movs	r3, #0
 8117fc6:	9300      	str	r3, [sp, #0]
 8117fc8:	2300      	movs	r3, #0
 8117fca:	687a      	ldr	r2, [r7, #4]
 8117fcc:	2100      	movs	r1, #0
 8117fce:	6978      	ldr	r0, [r7, #20]
 8117fd0:	f7ff ff88 	bl	8117ee4 <xTimerGenericCommand>
 8117fd4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8117fd6:	693b      	ldr	r3, [r7, #16]
 8117fd8:	2b00      	cmp	r3, #0
 8117fda:	d113      	bne.n	8118004 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8117fdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8117fe0:	f383 8811 	msr	BASEPRI, r3
 8117fe4:	f3bf 8f6f 	isb	sy
 8117fe8:	f3bf 8f4f 	dsb	sy
 8117fec:	60fb      	str	r3, [r7, #12]
}
 8117fee:	bf00      	nop
 8117ff0:	e7fe      	b.n	8117ff0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8117ff2:	697b      	ldr	r3, [r7, #20]
 8117ff4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8117ff8:	f023 0301 	bic.w	r3, r3, #1
 8117ffc:	b2da      	uxtb	r2, r3
 8117ffe:	697b      	ldr	r3, [r7, #20]
 8118000:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8118004:	697b      	ldr	r3, [r7, #20]
 8118006:	6a1b      	ldr	r3, [r3, #32]
 8118008:	6978      	ldr	r0, [r7, #20]
 811800a:	4798      	blx	r3
}
 811800c:	bf00      	nop
 811800e:	3718      	adds	r7, #24
 8118010:	46bd      	mov	sp, r7
 8118012:	bd80      	pop	{r7, pc}
 8118014:	10004ba4 	.word	0x10004ba4

08118018 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8118018:	b580      	push	{r7, lr}
 811801a:	b084      	sub	sp, #16
 811801c:	af00      	add	r7, sp, #0
 811801e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8118020:	f107 0308 	add.w	r3, r7, #8
 8118024:	4618      	mov	r0, r3
 8118026:	f000 f857 	bl	81180d8 <prvGetNextExpireTime>
 811802a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 811802c:	68bb      	ldr	r3, [r7, #8]
 811802e:	4619      	mov	r1, r3
 8118030:	68f8      	ldr	r0, [r7, #12]
 8118032:	f000 f803 	bl	811803c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8118036:	f000 f8d5 	bl	81181e4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 811803a:	e7f1      	b.n	8118020 <prvTimerTask+0x8>

0811803c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 811803c:	b580      	push	{r7, lr}
 811803e:	b084      	sub	sp, #16
 8118040:	af00      	add	r7, sp, #0
 8118042:	6078      	str	r0, [r7, #4]
 8118044:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8118046:	f7ff fa31 	bl	81174ac <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 811804a:	f107 0308 	add.w	r3, r7, #8
 811804e:	4618      	mov	r0, r3
 8118050:	f000 f866 	bl	8118120 <prvSampleTimeNow>
 8118054:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8118056:	68bb      	ldr	r3, [r7, #8]
 8118058:	2b00      	cmp	r3, #0
 811805a:	d130      	bne.n	81180be <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 811805c:	683b      	ldr	r3, [r7, #0]
 811805e:	2b00      	cmp	r3, #0
 8118060:	d10a      	bne.n	8118078 <prvProcessTimerOrBlockTask+0x3c>
 8118062:	687a      	ldr	r2, [r7, #4]
 8118064:	68fb      	ldr	r3, [r7, #12]
 8118066:	429a      	cmp	r2, r3
 8118068:	d806      	bhi.n	8118078 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 811806a:	f7ff fa2d 	bl	81174c8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 811806e:	68f9      	ldr	r1, [r7, #12]
 8118070:	6878      	ldr	r0, [r7, #4]
 8118072:	f7ff ff85 	bl	8117f80 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8118076:	e024      	b.n	81180c2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8118078:	683b      	ldr	r3, [r7, #0]
 811807a:	2b00      	cmp	r3, #0
 811807c:	d008      	beq.n	8118090 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 811807e:	4b13      	ldr	r3, [pc, #76]	; (81180cc <prvProcessTimerOrBlockTask+0x90>)
 8118080:	681b      	ldr	r3, [r3, #0]
 8118082:	681b      	ldr	r3, [r3, #0]
 8118084:	2b00      	cmp	r3, #0
 8118086:	d101      	bne.n	811808c <prvProcessTimerOrBlockTask+0x50>
 8118088:	2301      	movs	r3, #1
 811808a:	e000      	b.n	811808e <prvProcessTimerOrBlockTask+0x52>
 811808c:	2300      	movs	r3, #0
 811808e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8118090:	4b0f      	ldr	r3, [pc, #60]	; (81180d0 <prvProcessTimerOrBlockTask+0x94>)
 8118092:	6818      	ldr	r0, [r3, #0]
 8118094:	687a      	ldr	r2, [r7, #4]
 8118096:	68fb      	ldr	r3, [r7, #12]
 8118098:	1ad3      	subs	r3, r2, r3
 811809a:	683a      	ldr	r2, [r7, #0]
 811809c:	4619      	mov	r1, r3
 811809e:	f7fe ff95 	bl	8116fcc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 81180a2:	f7ff fa11 	bl	81174c8 <xTaskResumeAll>
 81180a6:	4603      	mov	r3, r0
 81180a8:	2b00      	cmp	r3, #0
 81180aa:	d10a      	bne.n	81180c2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 81180ac:	4b09      	ldr	r3, [pc, #36]	; (81180d4 <prvProcessTimerOrBlockTask+0x98>)
 81180ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 81180b2:	601a      	str	r2, [r3, #0]
 81180b4:	f3bf 8f4f 	dsb	sy
 81180b8:	f3bf 8f6f 	isb	sy
}
 81180bc:	e001      	b.n	81180c2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 81180be:	f7ff fa03 	bl	81174c8 <xTaskResumeAll>
}
 81180c2:	bf00      	nop
 81180c4:	3710      	adds	r7, #16
 81180c6:	46bd      	mov	sp, r7
 81180c8:	bd80      	pop	{r7, pc}
 81180ca:	bf00      	nop
 81180cc:	10004ba8 	.word	0x10004ba8
 81180d0:	10004bac 	.word	0x10004bac
 81180d4:	e000ed04 	.word	0xe000ed04

081180d8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 81180d8:	b480      	push	{r7}
 81180da:	b085      	sub	sp, #20
 81180dc:	af00      	add	r7, sp, #0
 81180de:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 81180e0:	4b0e      	ldr	r3, [pc, #56]	; (811811c <prvGetNextExpireTime+0x44>)
 81180e2:	681b      	ldr	r3, [r3, #0]
 81180e4:	681b      	ldr	r3, [r3, #0]
 81180e6:	2b00      	cmp	r3, #0
 81180e8:	d101      	bne.n	81180ee <prvGetNextExpireTime+0x16>
 81180ea:	2201      	movs	r2, #1
 81180ec:	e000      	b.n	81180f0 <prvGetNextExpireTime+0x18>
 81180ee:	2200      	movs	r2, #0
 81180f0:	687b      	ldr	r3, [r7, #4]
 81180f2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 81180f4:	687b      	ldr	r3, [r7, #4]
 81180f6:	681b      	ldr	r3, [r3, #0]
 81180f8:	2b00      	cmp	r3, #0
 81180fa:	d105      	bne.n	8118108 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 81180fc:	4b07      	ldr	r3, [pc, #28]	; (811811c <prvGetNextExpireTime+0x44>)
 81180fe:	681b      	ldr	r3, [r3, #0]
 8118100:	68db      	ldr	r3, [r3, #12]
 8118102:	681b      	ldr	r3, [r3, #0]
 8118104:	60fb      	str	r3, [r7, #12]
 8118106:	e001      	b.n	811810c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8118108:	2300      	movs	r3, #0
 811810a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 811810c:	68fb      	ldr	r3, [r7, #12]
}
 811810e:	4618      	mov	r0, r3
 8118110:	3714      	adds	r7, #20
 8118112:	46bd      	mov	sp, r7
 8118114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8118118:	4770      	bx	lr
 811811a:	bf00      	nop
 811811c:	10004ba4 	.word	0x10004ba4

08118120 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8118120:	b580      	push	{r7, lr}
 8118122:	b084      	sub	sp, #16
 8118124:	af00      	add	r7, sp, #0
 8118126:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8118128:	f7ff fa6c 	bl	8117604 <xTaskGetTickCount>
 811812c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 811812e:	4b0b      	ldr	r3, [pc, #44]	; (811815c <prvSampleTimeNow+0x3c>)
 8118130:	681b      	ldr	r3, [r3, #0]
 8118132:	68fa      	ldr	r2, [r7, #12]
 8118134:	429a      	cmp	r2, r3
 8118136:	d205      	bcs.n	8118144 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8118138:	f000 f936 	bl	81183a8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 811813c:	687b      	ldr	r3, [r7, #4]
 811813e:	2201      	movs	r2, #1
 8118140:	601a      	str	r2, [r3, #0]
 8118142:	e002      	b.n	811814a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8118144:	687b      	ldr	r3, [r7, #4]
 8118146:	2200      	movs	r2, #0
 8118148:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 811814a:	4a04      	ldr	r2, [pc, #16]	; (811815c <prvSampleTimeNow+0x3c>)
 811814c:	68fb      	ldr	r3, [r7, #12]
 811814e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8118150:	68fb      	ldr	r3, [r7, #12]
}
 8118152:	4618      	mov	r0, r3
 8118154:	3710      	adds	r7, #16
 8118156:	46bd      	mov	sp, r7
 8118158:	bd80      	pop	{r7, pc}
 811815a:	bf00      	nop
 811815c:	10004bb4 	.word	0x10004bb4

08118160 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8118160:	b580      	push	{r7, lr}
 8118162:	b086      	sub	sp, #24
 8118164:	af00      	add	r7, sp, #0
 8118166:	60f8      	str	r0, [r7, #12]
 8118168:	60b9      	str	r1, [r7, #8]
 811816a:	607a      	str	r2, [r7, #4]
 811816c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 811816e:	2300      	movs	r3, #0
 8118170:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8118172:	68fb      	ldr	r3, [r7, #12]
 8118174:	68ba      	ldr	r2, [r7, #8]
 8118176:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8118178:	68fb      	ldr	r3, [r7, #12]
 811817a:	68fa      	ldr	r2, [r7, #12]
 811817c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 811817e:	68ba      	ldr	r2, [r7, #8]
 8118180:	687b      	ldr	r3, [r7, #4]
 8118182:	429a      	cmp	r2, r3
 8118184:	d812      	bhi.n	81181ac <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8118186:	687a      	ldr	r2, [r7, #4]
 8118188:	683b      	ldr	r3, [r7, #0]
 811818a:	1ad2      	subs	r2, r2, r3
 811818c:	68fb      	ldr	r3, [r7, #12]
 811818e:	699b      	ldr	r3, [r3, #24]
 8118190:	429a      	cmp	r2, r3
 8118192:	d302      	bcc.n	811819a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8118194:	2301      	movs	r3, #1
 8118196:	617b      	str	r3, [r7, #20]
 8118198:	e01b      	b.n	81181d2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 811819a:	4b10      	ldr	r3, [pc, #64]	; (81181dc <prvInsertTimerInActiveList+0x7c>)
 811819c:	681a      	ldr	r2, [r3, #0]
 811819e:	68fb      	ldr	r3, [r7, #12]
 81181a0:	3304      	adds	r3, #4
 81181a2:	4619      	mov	r1, r3
 81181a4:	4610      	mov	r0, r2
 81181a6:	f7fd feee 	bl	8115f86 <vListInsert>
 81181aa:	e012      	b.n	81181d2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 81181ac:	687a      	ldr	r2, [r7, #4]
 81181ae:	683b      	ldr	r3, [r7, #0]
 81181b0:	429a      	cmp	r2, r3
 81181b2:	d206      	bcs.n	81181c2 <prvInsertTimerInActiveList+0x62>
 81181b4:	68ba      	ldr	r2, [r7, #8]
 81181b6:	683b      	ldr	r3, [r7, #0]
 81181b8:	429a      	cmp	r2, r3
 81181ba:	d302      	bcc.n	81181c2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 81181bc:	2301      	movs	r3, #1
 81181be:	617b      	str	r3, [r7, #20]
 81181c0:	e007      	b.n	81181d2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 81181c2:	4b07      	ldr	r3, [pc, #28]	; (81181e0 <prvInsertTimerInActiveList+0x80>)
 81181c4:	681a      	ldr	r2, [r3, #0]
 81181c6:	68fb      	ldr	r3, [r7, #12]
 81181c8:	3304      	adds	r3, #4
 81181ca:	4619      	mov	r1, r3
 81181cc:	4610      	mov	r0, r2
 81181ce:	f7fd feda 	bl	8115f86 <vListInsert>
		}
	}

	return xProcessTimerNow;
 81181d2:	697b      	ldr	r3, [r7, #20]
}
 81181d4:	4618      	mov	r0, r3
 81181d6:	3718      	adds	r7, #24
 81181d8:	46bd      	mov	sp, r7
 81181da:	bd80      	pop	{r7, pc}
 81181dc:	10004ba8 	.word	0x10004ba8
 81181e0:	10004ba4 	.word	0x10004ba4

081181e4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 81181e4:	b580      	push	{r7, lr}
 81181e6:	b08e      	sub	sp, #56	; 0x38
 81181e8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 81181ea:	e0ca      	b.n	8118382 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 81181ec:	687b      	ldr	r3, [r7, #4]
 81181ee:	2b00      	cmp	r3, #0
 81181f0:	da18      	bge.n	8118224 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 81181f2:	1d3b      	adds	r3, r7, #4
 81181f4:	3304      	adds	r3, #4
 81181f6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 81181f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 81181fa:	2b00      	cmp	r3, #0
 81181fc:	d10a      	bne.n	8118214 <prvProcessReceivedCommands+0x30>
	__asm volatile
 81181fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8118202:	f383 8811 	msr	BASEPRI, r3
 8118206:	f3bf 8f6f 	isb	sy
 811820a:	f3bf 8f4f 	dsb	sy
 811820e:	61fb      	str	r3, [r7, #28]
}
 8118210:	bf00      	nop
 8118212:	e7fe      	b.n	8118212 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8118214:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8118216:	681b      	ldr	r3, [r3, #0]
 8118218:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 811821a:	6850      	ldr	r0, [r2, #4]
 811821c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 811821e:	6892      	ldr	r2, [r2, #8]
 8118220:	4611      	mov	r1, r2
 8118222:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8118224:	687b      	ldr	r3, [r7, #4]
 8118226:	2b00      	cmp	r3, #0
 8118228:	f2c0 80aa 	blt.w	8118380 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 811822c:	68fb      	ldr	r3, [r7, #12]
 811822e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8118230:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8118232:	695b      	ldr	r3, [r3, #20]
 8118234:	2b00      	cmp	r3, #0
 8118236:	d004      	beq.n	8118242 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8118238:	6abb      	ldr	r3, [r7, #40]	; 0x28
 811823a:	3304      	adds	r3, #4
 811823c:	4618      	mov	r0, r3
 811823e:	f7fd fedb 	bl	8115ff8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8118242:	463b      	mov	r3, r7
 8118244:	4618      	mov	r0, r3
 8118246:	f7ff ff6b 	bl	8118120 <prvSampleTimeNow>
 811824a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 811824c:	687b      	ldr	r3, [r7, #4]
 811824e:	2b09      	cmp	r3, #9
 8118250:	f200 8097 	bhi.w	8118382 <prvProcessReceivedCommands+0x19e>
 8118254:	a201      	add	r2, pc, #4	; (adr r2, 811825c <prvProcessReceivedCommands+0x78>)
 8118256:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 811825a:	bf00      	nop
 811825c:	08118285 	.word	0x08118285
 8118260:	08118285 	.word	0x08118285
 8118264:	08118285 	.word	0x08118285
 8118268:	081182f9 	.word	0x081182f9
 811826c:	0811830d 	.word	0x0811830d
 8118270:	08118357 	.word	0x08118357
 8118274:	08118285 	.word	0x08118285
 8118278:	08118285 	.word	0x08118285
 811827c:	081182f9 	.word	0x081182f9
 8118280:	0811830d 	.word	0x0811830d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8118284:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8118286:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 811828a:	f043 0301 	orr.w	r3, r3, #1
 811828e:	b2da      	uxtb	r2, r3
 8118290:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8118292:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8118296:	68ba      	ldr	r2, [r7, #8]
 8118298:	6abb      	ldr	r3, [r7, #40]	; 0x28
 811829a:	699b      	ldr	r3, [r3, #24]
 811829c:	18d1      	adds	r1, r2, r3
 811829e:	68bb      	ldr	r3, [r7, #8]
 81182a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 81182a2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 81182a4:	f7ff ff5c 	bl	8118160 <prvInsertTimerInActiveList>
 81182a8:	4603      	mov	r3, r0
 81182aa:	2b00      	cmp	r3, #0
 81182ac:	d069      	beq.n	8118382 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 81182ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81182b0:	6a1b      	ldr	r3, [r3, #32]
 81182b2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 81182b4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 81182b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81182b8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 81182bc:	f003 0304 	and.w	r3, r3, #4
 81182c0:	2b00      	cmp	r3, #0
 81182c2:	d05e      	beq.n	8118382 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 81182c4:	68ba      	ldr	r2, [r7, #8]
 81182c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81182c8:	699b      	ldr	r3, [r3, #24]
 81182ca:	441a      	add	r2, r3
 81182cc:	2300      	movs	r3, #0
 81182ce:	9300      	str	r3, [sp, #0]
 81182d0:	2300      	movs	r3, #0
 81182d2:	2100      	movs	r1, #0
 81182d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 81182d6:	f7ff fe05 	bl	8117ee4 <xTimerGenericCommand>
 81182da:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 81182dc:	6a3b      	ldr	r3, [r7, #32]
 81182de:	2b00      	cmp	r3, #0
 81182e0:	d14f      	bne.n	8118382 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 81182e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 81182e6:	f383 8811 	msr	BASEPRI, r3
 81182ea:	f3bf 8f6f 	isb	sy
 81182ee:	f3bf 8f4f 	dsb	sy
 81182f2:	61bb      	str	r3, [r7, #24]
}
 81182f4:	bf00      	nop
 81182f6:	e7fe      	b.n	81182f6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 81182f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81182fa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 81182fe:	f023 0301 	bic.w	r3, r3, #1
 8118302:	b2da      	uxtb	r2, r3
 8118304:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8118306:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 811830a:	e03a      	b.n	8118382 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 811830c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 811830e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8118312:	f043 0301 	orr.w	r3, r3, #1
 8118316:	b2da      	uxtb	r2, r3
 8118318:	6abb      	ldr	r3, [r7, #40]	; 0x28
 811831a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 811831e:	68ba      	ldr	r2, [r7, #8]
 8118320:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8118322:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8118324:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8118326:	699b      	ldr	r3, [r3, #24]
 8118328:	2b00      	cmp	r3, #0
 811832a:	d10a      	bne.n	8118342 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 811832c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8118330:	f383 8811 	msr	BASEPRI, r3
 8118334:	f3bf 8f6f 	isb	sy
 8118338:	f3bf 8f4f 	dsb	sy
 811833c:	617b      	str	r3, [r7, #20]
}
 811833e:	bf00      	nop
 8118340:	e7fe      	b.n	8118340 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8118342:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8118344:	699a      	ldr	r2, [r3, #24]
 8118346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8118348:	18d1      	adds	r1, r2, r3
 811834a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 811834c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 811834e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8118350:	f7ff ff06 	bl	8118160 <prvInsertTimerInActiveList>
					break;
 8118354:	e015      	b.n	8118382 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8118356:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8118358:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 811835c:	f003 0302 	and.w	r3, r3, #2
 8118360:	2b00      	cmp	r3, #0
 8118362:	d103      	bne.n	811836c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8118364:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8118366:	f7fd fc9f 	bl	8115ca8 <vPortFree>
 811836a:	e00a      	b.n	8118382 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 811836c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 811836e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8118372:	f023 0301 	bic.w	r3, r3, #1
 8118376:	b2da      	uxtb	r2, r3
 8118378:	6abb      	ldr	r3, [r7, #40]	; 0x28
 811837a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 811837e:	e000      	b.n	8118382 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8118380:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8118382:	4b08      	ldr	r3, [pc, #32]	; (81183a4 <prvProcessReceivedCommands+0x1c0>)
 8118384:	681b      	ldr	r3, [r3, #0]
 8118386:	1d39      	adds	r1, r7, #4
 8118388:	2200      	movs	r2, #0
 811838a:	4618      	mov	r0, r3
 811838c:	f7fe fb84 	bl	8116a98 <xQueueReceive>
 8118390:	4603      	mov	r3, r0
 8118392:	2b00      	cmp	r3, #0
 8118394:	f47f af2a 	bne.w	81181ec <prvProcessReceivedCommands+0x8>
	}
}
 8118398:	bf00      	nop
 811839a:	bf00      	nop
 811839c:	3730      	adds	r7, #48	; 0x30
 811839e:	46bd      	mov	sp, r7
 81183a0:	bd80      	pop	{r7, pc}
 81183a2:	bf00      	nop
 81183a4:	10004bac 	.word	0x10004bac

081183a8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 81183a8:	b580      	push	{r7, lr}
 81183aa:	b088      	sub	sp, #32
 81183ac:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 81183ae:	e048      	b.n	8118442 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 81183b0:	4b2d      	ldr	r3, [pc, #180]	; (8118468 <prvSwitchTimerLists+0xc0>)
 81183b2:	681b      	ldr	r3, [r3, #0]
 81183b4:	68db      	ldr	r3, [r3, #12]
 81183b6:	681b      	ldr	r3, [r3, #0]
 81183b8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 81183ba:	4b2b      	ldr	r3, [pc, #172]	; (8118468 <prvSwitchTimerLists+0xc0>)
 81183bc:	681b      	ldr	r3, [r3, #0]
 81183be:	68db      	ldr	r3, [r3, #12]
 81183c0:	68db      	ldr	r3, [r3, #12]
 81183c2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 81183c4:	68fb      	ldr	r3, [r7, #12]
 81183c6:	3304      	adds	r3, #4
 81183c8:	4618      	mov	r0, r3
 81183ca:	f7fd fe15 	bl	8115ff8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 81183ce:	68fb      	ldr	r3, [r7, #12]
 81183d0:	6a1b      	ldr	r3, [r3, #32]
 81183d2:	68f8      	ldr	r0, [r7, #12]
 81183d4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 81183d6:	68fb      	ldr	r3, [r7, #12]
 81183d8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 81183dc:	f003 0304 	and.w	r3, r3, #4
 81183e0:	2b00      	cmp	r3, #0
 81183e2:	d02e      	beq.n	8118442 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 81183e4:	68fb      	ldr	r3, [r7, #12]
 81183e6:	699b      	ldr	r3, [r3, #24]
 81183e8:	693a      	ldr	r2, [r7, #16]
 81183ea:	4413      	add	r3, r2
 81183ec:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 81183ee:	68ba      	ldr	r2, [r7, #8]
 81183f0:	693b      	ldr	r3, [r7, #16]
 81183f2:	429a      	cmp	r2, r3
 81183f4:	d90e      	bls.n	8118414 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 81183f6:	68fb      	ldr	r3, [r7, #12]
 81183f8:	68ba      	ldr	r2, [r7, #8]
 81183fa:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 81183fc:	68fb      	ldr	r3, [r7, #12]
 81183fe:	68fa      	ldr	r2, [r7, #12]
 8118400:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8118402:	4b19      	ldr	r3, [pc, #100]	; (8118468 <prvSwitchTimerLists+0xc0>)
 8118404:	681a      	ldr	r2, [r3, #0]
 8118406:	68fb      	ldr	r3, [r7, #12]
 8118408:	3304      	adds	r3, #4
 811840a:	4619      	mov	r1, r3
 811840c:	4610      	mov	r0, r2
 811840e:	f7fd fdba 	bl	8115f86 <vListInsert>
 8118412:	e016      	b.n	8118442 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8118414:	2300      	movs	r3, #0
 8118416:	9300      	str	r3, [sp, #0]
 8118418:	2300      	movs	r3, #0
 811841a:	693a      	ldr	r2, [r7, #16]
 811841c:	2100      	movs	r1, #0
 811841e:	68f8      	ldr	r0, [r7, #12]
 8118420:	f7ff fd60 	bl	8117ee4 <xTimerGenericCommand>
 8118424:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8118426:	687b      	ldr	r3, [r7, #4]
 8118428:	2b00      	cmp	r3, #0
 811842a:	d10a      	bne.n	8118442 <prvSwitchTimerLists+0x9a>
	__asm volatile
 811842c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8118430:	f383 8811 	msr	BASEPRI, r3
 8118434:	f3bf 8f6f 	isb	sy
 8118438:	f3bf 8f4f 	dsb	sy
 811843c:	603b      	str	r3, [r7, #0]
}
 811843e:	bf00      	nop
 8118440:	e7fe      	b.n	8118440 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8118442:	4b09      	ldr	r3, [pc, #36]	; (8118468 <prvSwitchTimerLists+0xc0>)
 8118444:	681b      	ldr	r3, [r3, #0]
 8118446:	681b      	ldr	r3, [r3, #0]
 8118448:	2b00      	cmp	r3, #0
 811844a:	d1b1      	bne.n	81183b0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 811844c:	4b06      	ldr	r3, [pc, #24]	; (8118468 <prvSwitchTimerLists+0xc0>)
 811844e:	681b      	ldr	r3, [r3, #0]
 8118450:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8118452:	4b06      	ldr	r3, [pc, #24]	; (811846c <prvSwitchTimerLists+0xc4>)
 8118454:	681b      	ldr	r3, [r3, #0]
 8118456:	4a04      	ldr	r2, [pc, #16]	; (8118468 <prvSwitchTimerLists+0xc0>)
 8118458:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 811845a:	4a04      	ldr	r2, [pc, #16]	; (811846c <prvSwitchTimerLists+0xc4>)
 811845c:	697b      	ldr	r3, [r7, #20]
 811845e:	6013      	str	r3, [r2, #0]
}
 8118460:	bf00      	nop
 8118462:	3718      	adds	r7, #24
 8118464:	46bd      	mov	sp, r7
 8118466:	bd80      	pop	{r7, pc}
 8118468:	10004ba4 	.word	0x10004ba4
 811846c:	10004ba8 	.word	0x10004ba8

08118470 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8118470:	b580      	push	{r7, lr}
 8118472:	b082      	sub	sp, #8
 8118474:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8118476:	f7fd ff15 	bl	81162a4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 811847a:	4b15      	ldr	r3, [pc, #84]	; (81184d0 <prvCheckForValidListAndQueue+0x60>)
 811847c:	681b      	ldr	r3, [r3, #0]
 811847e:	2b00      	cmp	r3, #0
 8118480:	d120      	bne.n	81184c4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8118482:	4814      	ldr	r0, [pc, #80]	; (81184d4 <prvCheckForValidListAndQueue+0x64>)
 8118484:	f7fd fd2e 	bl	8115ee4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8118488:	4813      	ldr	r0, [pc, #76]	; (81184d8 <prvCheckForValidListAndQueue+0x68>)
 811848a:	f7fd fd2b 	bl	8115ee4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 811848e:	4b13      	ldr	r3, [pc, #76]	; (81184dc <prvCheckForValidListAndQueue+0x6c>)
 8118490:	4a10      	ldr	r2, [pc, #64]	; (81184d4 <prvCheckForValidListAndQueue+0x64>)
 8118492:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8118494:	4b12      	ldr	r3, [pc, #72]	; (81184e0 <prvCheckForValidListAndQueue+0x70>)
 8118496:	4a10      	ldr	r2, [pc, #64]	; (81184d8 <prvCheckForValidListAndQueue+0x68>)
 8118498:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 811849a:	2300      	movs	r3, #0
 811849c:	9300      	str	r3, [sp, #0]
 811849e:	4b11      	ldr	r3, [pc, #68]	; (81184e4 <prvCheckForValidListAndQueue+0x74>)
 81184a0:	4a11      	ldr	r2, [pc, #68]	; (81184e8 <prvCheckForValidListAndQueue+0x78>)
 81184a2:	2110      	movs	r1, #16
 81184a4:	200a      	movs	r0, #10
 81184a6:	f7fe f887 	bl	81165b8 <xQueueGenericCreateStatic>
 81184aa:	4603      	mov	r3, r0
 81184ac:	4a08      	ldr	r2, [pc, #32]	; (81184d0 <prvCheckForValidListAndQueue+0x60>)
 81184ae:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 81184b0:	4b07      	ldr	r3, [pc, #28]	; (81184d0 <prvCheckForValidListAndQueue+0x60>)
 81184b2:	681b      	ldr	r3, [r3, #0]
 81184b4:	2b00      	cmp	r3, #0
 81184b6:	d005      	beq.n	81184c4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 81184b8:	4b05      	ldr	r3, [pc, #20]	; (81184d0 <prvCheckForValidListAndQueue+0x60>)
 81184ba:	681b      	ldr	r3, [r3, #0]
 81184bc:	490b      	ldr	r1, [pc, #44]	; (81184ec <prvCheckForValidListAndQueue+0x7c>)
 81184be:	4618      	mov	r0, r3
 81184c0:	f7fe fd5a 	bl	8116f78 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 81184c4:	f7fd ff1e 	bl	8116304 <vPortExitCritical>
}
 81184c8:	bf00      	nop
 81184ca:	46bd      	mov	sp, r7
 81184cc:	bd80      	pop	{r7, pc}
 81184ce:	bf00      	nop
 81184d0:	10004bac 	.word	0x10004bac
 81184d4:	10004b7c 	.word	0x10004b7c
 81184d8:	10004b90 	.word	0x10004b90
 81184dc:	10004ba4 	.word	0x10004ba4
 81184e0:	10004ba8 	.word	0x10004ba8
 81184e4:	10004c58 	.word	0x10004c58
 81184e8:	10004bb8 	.word	0x10004bb8
 81184ec:	0811b9a0 	.word	0x0811b9a0

081184f0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 81184f0:	b580      	push	{r7, lr}
 81184f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 81184f4:	2200      	movs	r2, #0
 81184f6:	4913      	ldr	r1, [pc, #76]	; (8118544 <MX_USB_DEVICE_Init+0x54>)
 81184f8:	4813      	ldr	r0, [pc, #76]	; (8118548 <MX_USB_DEVICE_Init+0x58>)
 81184fa:	f7fb fe6b 	bl	81141d4 <USBD_Init>
 81184fe:	4603      	mov	r3, r0
 8118500:	2b00      	cmp	r3, #0
 8118502:	d001      	beq.n	8118508 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8118504:	f7e9 fb7a 	bl	8101bfc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8118508:	4910      	ldr	r1, [pc, #64]	; (811854c <MX_USB_DEVICE_Init+0x5c>)
 811850a:	480f      	ldr	r0, [pc, #60]	; (8118548 <MX_USB_DEVICE_Init+0x58>)
 811850c:	f7fb fe92 	bl	8114234 <USBD_RegisterClass>
 8118510:	4603      	mov	r3, r0
 8118512:	2b00      	cmp	r3, #0
 8118514:	d001      	beq.n	811851a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8118516:	f7e9 fb71 	bl	8101bfc <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 811851a:	490d      	ldr	r1, [pc, #52]	; (8118550 <MX_USB_DEVICE_Init+0x60>)
 811851c:	480a      	ldr	r0, [pc, #40]	; (8118548 <MX_USB_DEVICE_Init+0x58>)
 811851e:	f7fb fde3 	bl	81140e8 <USBD_CDC_RegisterInterface>
 8118522:	4603      	mov	r3, r0
 8118524:	2b00      	cmp	r3, #0
 8118526:	d001      	beq.n	811852c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8118528:	f7e9 fb68 	bl	8101bfc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 811852c:	4806      	ldr	r0, [pc, #24]	; (8118548 <MX_USB_DEVICE_Init+0x58>)
 811852e:	f7fb fea8 	bl	8114282 <USBD_Start>
 8118532:	4603      	mov	r3, r0
 8118534:	2b00      	cmp	r3, #0
 8118536:	d001      	beq.n	811853c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8118538:	f7e9 fb60 	bl	8101bfc <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 811853c:	f7f1 f9b4 	bl	81098a8 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8118540:	bf00      	nop
 8118542:	bd80      	pop	{r7, pc}
 8118544:	10000138 	.word	0x10000138
 8118548:	1000765c 	.word	0x1000765c
 811854c:	1000001c 	.word	0x1000001c
 8118550:	10000124 	.word	0x10000124

08118554 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8118554:	b580      	push	{r7, lr}
 8118556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8118558:	2200      	movs	r2, #0
 811855a:	4905      	ldr	r1, [pc, #20]	; (8118570 <CDC_Init_FS+0x1c>)
 811855c:	4805      	ldr	r0, [pc, #20]	; (8118574 <CDC_Init_FS+0x20>)
 811855e:	f7fb fdd8 	bl	8114112 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8118562:	4905      	ldr	r1, [pc, #20]	; (8118578 <CDC_Init_FS+0x24>)
 8118564:	4803      	ldr	r0, [pc, #12]	; (8118574 <CDC_Init_FS+0x20>)
 8118566:	f7fb fdf2 	bl	811414e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 811856a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 811856c:	4618      	mov	r0, r3
 811856e:	bd80      	pop	{r7, pc}
 8118570:	1000812c 	.word	0x1000812c
 8118574:	1000765c 	.word	0x1000765c
 8118578:	1000792c 	.word	0x1000792c

0811857c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 811857c:	b480      	push	{r7}
 811857e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8118580:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8118582:	4618      	mov	r0, r3
 8118584:	46bd      	mov	sp, r7
 8118586:	f85d 7b04 	ldr.w	r7, [sp], #4
 811858a:	4770      	bx	lr

0811858c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 811858c:	b480      	push	{r7}
 811858e:	b083      	sub	sp, #12
 8118590:	af00      	add	r7, sp, #0
 8118592:	4603      	mov	r3, r0
 8118594:	6039      	str	r1, [r7, #0]
 8118596:	71fb      	strb	r3, [r7, #7]
 8118598:	4613      	mov	r3, r2
 811859a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 811859c:	79fb      	ldrb	r3, [r7, #7]
 811859e:	2b23      	cmp	r3, #35	; 0x23
 81185a0:	d84a      	bhi.n	8118638 <CDC_Control_FS+0xac>
 81185a2:	a201      	add	r2, pc, #4	; (adr r2, 81185a8 <CDC_Control_FS+0x1c>)
 81185a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81185a8:	08118639 	.word	0x08118639
 81185ac:	08118639 	.word	0x08118639
 81185b0:	08118639 	.word	0x08118639
 81185b4:	08118639 	.word	0x08118639
 81185b8:	08118639 	.word	0x08118639
 81185bc:	08118639 	.word	0x08118639
 81185c0:	08118639 	.word	0x08118639
 81185c4:	08118639 	.word	0x08118639
 81185c8:	08118639 	.word	0x08118639
 81185cc:	08118639 	.word	0x08118639
 81185d0:	08118639 	.word	0x08118639
 81185d4:	08118639 	.word	0x08118639
 81185d8:	08118639 	.word	0x08118639
 81185dc:	08118639 	.word	0x08118639
 81185e0:	08118639 	.word	0x08118639
 81185e4:	08118639 	.word	0x08118639
 81185e8:	08118639 	.word	0x08118639
 81185ec:	08118639 	.word	0x08118639
 81185f0:	08118639 	.word	0x08118639
 81185f4:	08118639 	.word	0x08118639
 81185f8:	08118639 	.word	0x08118639
 81185fc:	08118639 	.word	0x08118639
 8118600:	08118639 	.word	0x08118639
 8118604:	08118639 	.word	0x08118639
 8118608:	08118639 	.word	0x08118639
 811860c:	08118639 	.word	0x08118639
 8118610:	08118639 	.word	0x08118639
 8118614:	08118639 	.word	0x08118639
 8118618:	08118639 	.word	0x08118639
 811861c:	08118639 	.word	0x08118639
 8118620:	08118639 	.word	0x08118639
 8118624:	08118639 	.word	0x08118639
 8118628:	08118639 	.word	0x08118639
 811862c:	08118639 	.word	0x08118639
 8118630:	08118639 	.word	0x08118639
 8118634:	08118639 	.word	0x08118639
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8118638:	bf00      	nop
  }

  return (USBD_OK);
 811863a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 811863c:	4618      	mov	r0, r3
 811863e:	370c      	adds	r7, #12
 8118640:	46bd      	mov	sp, r7
 8118642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8118646:	4770      	bx	lr

08118648 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8118648:	b580      	push	{r7, lr}
 811864a:	b082      	sub	sp, #8
 811864c:	af00      	add	r7, sp, #0
 811864e:	6078      	str	r0, [r7, #4]
 8118650:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8118652:	6879      	ldr	r1, [r7, #4]
 8118654:	4805      	ldr	r0, [pc, #20]	; (811866c <CDC_Receive_FS+0x24>)
 8118656:	f7fb fd7a 	bl	811414e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 811865a:	4804      	ldr	r0, [pc, #16]	; (811866c <CDC_Receive_FS+0x24>)
 811865c:	f7fb fd90 	bl	8114180 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8118660:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8118662:	4618      	mov	r0, r3
 8118664:	3708      	adds	r7, #8
 8118666:	46bd      	mov	sp, r7
 8118668:	bd80      	pop	{r7, pc}
 811866a:	bf00      	nop
 811866c:	1000765c 	.word	0x1000765c

08118670 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8118670:	b480      	push	{r7}
 8118672:	b087      	sub	sp, #28
 8118674:	af00      	add	r7, sp, #0
 8118676:	60f8      	str	r0, [r7, #12]
 8118678:	60b9      	str	r1, [r7, #8]
 811867a:	4613      	mov	r3, r2
 811867c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 811867e:	2300      	movs	r3, #0
 8118680:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8118682:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8118686:	4618      	mov	r0, r3
 8118688:	371c      	adds	r7, #28
 811868a:	46bd      	mov	sp, r7
 811868c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8118690:	4770      	bx	lr
	...

08118694 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8118694:	b480      	push	{r7}
 8118696:	b083      	sub	sp, #12
 8118698:	af00      	add	r7, sp, #0
 811869a:	4603      	mov	r3, r0
 811869c:	6039      	str	r1, [r7, #0]
 811869e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 81186a0:	683b      	ldr	r3, [r7, #0]
 81186a2:	2212      	movs	r2, #18
 81186a4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 81186a6:	4b03      	ldr	r3, [pc, #12]	; (81186b4 <USBD_FS_DeviceDescriptor+0x20>)
}
 81186a8:	4618      	mov	r0, r3
 81186aa:	370c      	adds	r7, #12
 81186ac:	46bd      	mov	sp, r7
 81186ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 81186b2:	4770      	bx	lr
 81186b4:	10000154 	.word	0x10000154

081186b8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 81186b8:	b480      	push	{r7}
 81186ba:	b083      	sub	sp, #12
 81186bc:	af00      	add	r7, sp, #0
 81186be:	4603      	mov	r3, r0
 81186c0:	6039      	str	r1, [r7, #0]
 81186c2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 81186c4:	683b      	ldr	r3, [r7, #0]
 81186c6:	2204      	movs	r2, #4
 81186c8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 81186ca:	4b03      	ldr	r3, [pc, #12]	; (81186d8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 81186cc:	4618      	mov	r0, r3
 81186ce:	370c      	adds	r7, #12
 81186d0:	46bd      	mov	sp, r7
 81186d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81186d6:	4770      	bx	lr
 81186d8:	10000168 	.word	0x10000168

081186dc <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 81186dc:	b580      	push	{r7, lr}
 81186de:	b082      	sub	sp, #8
 81186e0:	af00      	add	r7, sp, #0
 81186e2:	4603      	mov	r3, r0
 81186e4:	6039      	str	r1, [r7, #0]
 81186e6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 81186e8:	79fb      	ldrb	r3, [r7, #7]
 81186ea:	2b00      	cmp	r3, #0
 81186ec:	d105      	bne.n	81186fa <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 81186ee:	683a      	ldr	r2, [r7, #0]
 81186f0:	4907      	ldr	r1, [pc, #28]	; (8118710 <USBD_FS_ProductStrDescriptor+0x34>)
 81186f2:	4808      	ldr	r0, [pc, #32]	; (8118714 <USBD_FS_ProductStrDescriptor+0x38>)
 81186f4:	f7fc fdf7 	bl	81152e6 <USBD_GetString>
 81186f8:	e004      	b.n	8118704 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 81186fa:	683a      	ldr	r2, [r7, #0]
 81186fc:	4904      	ldr	r1, [pc, #16]	; (8118710 <USBD_FS_ProductStrDescriptor+0x34>)
 81186fe:	4805      	ldr	r0, [pc, #20]	; (8118714 <USBD_FS_ProductStrDescriptor+0x38>)
 8118700:	f7fc fdf1 	bl	81152e6 <USBD_GetString>
  }
  return USBD_StrDesc;
 8118704:	4b02      	ldr	r3, [pc, #8]	; (8118710 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8118706:	4618      	mov	r0, r3
 8118708:	3708      	adds	r7, #8
 811870a:	46bd      	mov	sp, r7
 811870c:	bd80      	pop	{r7, pc}
 811870e:	bf00      	nop
 8118710:	1000892c 	.word	0x1000892c
 8118714:	0811b9a8 	.word	0x0811b9a8

08118718 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8118718:	b580      	push	{r7, lr}
 811871a:	b082      	sub	sp, #8
 811871c:	af00      	add	r7, sp, #0
 811871e:	4603      	mov	r3, r0
 8118720:	6039      	str	r1, [r7, #0]
 8118722:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8118724:	683a      	ldr	r2, [r7, #0]
 8118726:	4904      	ldr	r1, [pc, #16]	; (8118738 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8118728:	4804      	ldr	r0, [pc, #16]	; (811873c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 811872a:	f7fc fddc 	bl	81152e6 <USBD_GetString>
  return USBD_StrDesc;
 811872e:	4b02      	ldr	r3, [pc, #8]	; (8118738 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8118730:	4618      	mov	r0, r3
 8118732:	3708      	adds	r7, #8
 8118734:	46bd      	mov	sp, r7
 8118736:	bd80      	pop	{r7, pc}
 8118738:	1000892c 	.word	0x1000892c
 811873c:	0811b9c0 	.word	0x0811b9c0

08118740 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8118740:	b580      	push	{r7, lr}
 8118742:	b082      	sub	sp, #8
 8118744:	af00      	add	r7, sp, #0
 8118746:	4603      	mov	r3, r0
 8118748:	6039      	str	r1, [r7, #0]
 811874a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 811874c:	683b      	ldr	r3, [r7, #0]
 811874e:	221a      	movs	r2, #26
 8118750:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8118752:	f000 f843 	bl	81187dc <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8118756:	4b02      	ldr	r3, [pc, #8]	; (8118760 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8118758:	4618      	mov	r0, r3
 811875a:	3708      	adds	r7, #8
 811875c:	46bd      	mov	sp, r7
 811875e:	bd80      	pop	{r7, pc}
 8118760:	1000016c 	.word	0x1000016c

08118764 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8118764:	b580      	push	{r7, lr}
 8118766:	b082      	sub	sp, #8
 8118768:	af00      	add	r7, sp, #0
 811876a:	4603      	mov	r3, r0
 811876c:	6039      	str	r1, [r7, #0]
 811876e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8118770:	79fb      	ldrb	r3, [r7, #7]
 8118772:	2b00      	cmp	r3, #0
 8118774:	d105      	bne.n	8118782 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8118776:	683a      	ldr	r2, [r7, #0]
 8118778:	4907      	ldr	r1, [pc, #28]	; (8118798 <USBD_FS_ConfigStrDescriptor+0x34>)
 811877a:	4808      	ldr	r0, [pc, #32]	; (811879c <USBD_FS_ConfigStrDescriptor+0x38>)
 811877c:	f7fc fdb3 	bl	81152e6 <USBD_GetString>
 8118780:	e004      	b.n	811878c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8118782:	683a      	ldr	r2, [r7, #0]
 8118784:	4904      	ldr	r1, [pc, #16]	; (8118798 <USBD_FS_ConfigStrDescriptor+0x34>)
 8118786:	4805      	ldr	r0, [pc, #20]	; (811879c <USBD_FS_ConfigStrDescriptor+0x38>)
 8118788:	f7fc fdad 	bl	81152e6 <USBD_GetString>
  }
  return USBD_StrDesc;
 811878c:	4b02      	ldr	r3, [pc, #8]	; (8118798 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 811878e:	4618      	mov	r0, r3
 8118790:	3708      	adds	r7, #8
 8118792:	46bd      	mov	sp, r7
 8118794:	bd80      	pop	{r7, pc}
 8118796:	bf00      	nop
 8118798:	1000892c 	.word	0x1000892c
 811879c:	0811b9d4 	.word	0x0811b9d4

081187a0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 81187a0:	b580      	push	{r7, lr}
 81187a2:	b082      	sub	sp, #8
 81187a4:	af00      	add	r7, sp, #0
 81187a6:	4603      	mov	r3, r0
 81187a8:	6039      	str	r1, [r7, #0]
 81187aa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 81187ac:	79fb      	ldrb	r3, [r7, #7]
 81187ae:	2b00      	cmp	r3, #0
 81187b0:	d105      	bne.n	81187be <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 81187b2:	683a      	ldr	r2, [r7, #0]
 81187b4:	4907      	ldr	r1, [pc, #28]	; (81187d4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 81187b6:	4808      	ldr	r0, [pc, #32]	; (81187d8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 81187b8:	f7fc fd95 	bl	81152e6 <USBD_GetString>
 81187bc:	e004      	b.n	81187c8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 81187be:	683a      	ldr	r2, [r7, #0]
 81187c0:	4904      	ldr	r1, [pc, #16]	; (81187d4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 81187c2:	4805      	ldr	r0, [pc, #20]	; (81187d8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 81187c4:	f7fc fd8f 	bl	81152e6 <USBD_GetString>
  }
  return USBD_StrDesc;
 81187c8:	4b02      	ldr	r3, [pc, #8]	; (81187d4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 81187ca:	4618      	mov	r0, r3
 81187cc:	3708      	adds	r7, #8
 81187ce:	46bd      	mov	sp, r7
 81187d0:	bd80      	pop	{r7, pc}
 81187d2:	bf00      	nop
 81187d4:	1000892c 	.word	0x1000892c
 81187d8:	0811b9e0 	.word	0x0811b9e0

081187dc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 81187dc:	b580      	push	{r7, lr}
 81187de:	b084      	sub	sp, #16
 81187e0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 81187e2:	4b0f      	ldr	r3, [pc, #60]	; (8118820 <Get_SerialNum+0x44>)
 81187e4:	681b      	ldr	r3, [r3, #0]
 81187e6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 81187e8:	4b0e      	ldr	r3, [pc, #56]	; (8118824 <Get_SerialNum+0x48>)
 81187ea:	681b      	ldr	r3, [r3, #0]
 81187ec:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 81187ee:	4b0e      	ldr	r3, [pc, #56]	; (8118828 <Get_SerialNum+0x4c>)
 81187f0:	681b      	ldr	r3, [r3, #0]
 81187f2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 81187f4:	68fa      	ldr	r2, [r7, #12]
 81187f6:	687b      	ldr	r3, [r7, #4]
 81187f8:	4413      	add	r3, r2
 81187fa:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 81187fc:	68fb      	ldr	r3, [r7, #12]
 81187fe:	2b00      	cmp	r3, #0
 8118800:	d009      	beq.n	8118816 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8118802:	2208      	movs	r2, #8
 8118804:	4909      	ldr	r1, [pc, #36]	; (811882c <Get_SerialNum+0x50>)
 8118806:	68f8      	ldr	r0, [r7, #12]
 8118808:	f000 f814 	bl	8118834 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 811880c:	2204      	movs	r2, #4
 811880e:	4908      	ldr	r1, [pc, #32]	; (8118830 <Get_SerialNum+0x54>)
 8118810:	68b8      	ldr	r0, [r7, #8]
 8118812:	f000 f80f 	bl	8118834 <IntToUnicode>
  }
}
 8118816:	bf00      	nop
 8118818:	3710      	adds	r7, #16
 811881a:	46bd      	mov	sp, r7
 811881c:	bd80      	pop	{r7, pc}
 811881e:	bf00      	nop
 8118820:	1ff1e800 	.word	0x1ff1e800
 8118824:	1ff1e804 	.word	0x1ff1e804
 8118828:	1ff1e808 	.word	0x1ff1e808
 811882c:	1000016e 	.word	0x1000016e
 8118830:	1000017e 	.word	0x1000017e

08118834 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8118834:	b480      	push	{r7}
 8118836:	b087      	sub	sp, #28
 8118838:	af00      	add	r7, sp, #0
 811883a:	60f8      	str	r0, [r7, #12]
 811883c:	60b9      	str	r1, [r7, #8]
 811883e:	4613      	mov	r3, r2
 8118840:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8118842:	2300      	movs	r3, #0
 8118844:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8118846:	2300      	movs	r3, #0
 8118848:	75fb      	strb	r3, [r7, #23]
 811884a:	e027      	b.n	811889c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 811884c:	68fb      	ldr	r3, [r7, #12]
 811884e:	0f1b      	lsrs	r3, r3, #28
 8118850:	2b09      	cmp	r3, #9
 8118852:	d80b      	bhi.n	811886c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8118854:	68fb      	ldr	r3, [r7, #12]
 8118856:	0f1b      	lsrs	r3, r3, #28
 8118858:	b2da      	uxtb	r2, r3
 811885a:	7dfb      	ldrb	r3, [r7, #23]
 811885c:	005b      	lsls	r3, r3, #1
 811885e:	4619      	mov	r1, r3
 8118860:	68bb      	ldr	r3, [r7, #8]
 8118862:	440b      	add	r3, r1
 8118864:	3230      	adds	r2, #48	; 0x30
 8118866:	b2d2      	uxtb	r2, r2
 8118868:	701a      	strb	r2, [r3, #0]
 811886a:	e00a      	b.n	8118882 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 811886c:	68fb      	ldr	r3, [r7, #12]
 811886e:	0f1b      	lsrs	r3, r3, #28
 8118870:	b2da      	uxtb	r2, r3
 8118872:	7dfb      	ldrb	r3, [r7, #23]
 8118874:	005b      	lsls	r3, r3, #1
 8118876:	4619      	mov	r1, r3
 8118878:	68bb      	ldr	r3, [r7, #8]
 811887a:	440b      	add	r3, r1
 811887c:	3237      	adds	r2, #55	; 0x37
 811887e:	b2d2      	uxtb	r2, r2
 8118880:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8118882:	68fb      	ldr	r3, [r7, #12]
 8118884:	011b      	lsls	r3, r3, #4
 8118886:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8118888:	7dfb      	ldrb	r3, [r7, #23]
 811888a:	005b      	lsls	r3, r3, #1
 811888c:	3301      	adds	r3, #1
 811888e:	68ba      	ldr	r2, [r7, #8]
 8118890:	4413      	add	r3, r2
 8118892:	2200      	movs	r2, #0
 8118894:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8118896:	7dfb      	ldrb	r3, [r7, #23]
 8118898:	3301      	adds	r3, #1
 811889a:	75fb      	strb	r3, [r7, #23]
 811889c:	7dfa      	ldrb	r2, [r7, #23]
 811889e:	79fb      	ldrb	r3, [r7, #7]
 81188a0:	429a      	cmp	r2, r3
 81188a2:	d3d3      	bcc.n	811884c <IntToUnicode+0x18>
  }
}
 81188a4:	bf00      	nop
 81188a6:	bf00      	nop
 81188a8:	371c      	adds	r7, #28
 81188aa:	46bd      	mov	sp, r7
 81188ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 81188b0:	4770      	bx	lr
	...

081188b4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 81188b4:	b580      	push	{r7, lr}
 81188b6:	b08a      	sub	sp, #40	; 0x28
 81188b8:	af00      	add	r7, sp, #0
 81188ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 81188bc:	f107 0314 	add.w	r3, r7, #20
 81188c0:	2200      	movs	r2, #0
 81188c2:	601a      	str	r2, [r3, #0]
 81188c4:	605a      	str	r2, [r3, #4]
 81188c6:	609a      	str	r2, [r3, #8]
 81188c8:	60da      	str	r2, [r3, #12]
 81188ca:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 81188cc:	687b      	ldr	r3, [r7, #4]
 81188ce:	681b      	ldr	r3, [r3, #0]
 81188d0:	4a1f      	ldr	r2, [pc, #124]	; (8118950 <HAL_PCD_MspInit+0x9c>)
 81188d2:	4293      	cmp	r3, r2
 81188d4:	d138      	bne.n	8118948 <HAL_PCD_MspInit+0x94>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 81188d6:	f7f0 ffe7 	bl	81098a8 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 81188da:	4b1e      	ldr	r3, [pc, #120]	; (8118954 <HAL_PCD_MspInit+0xa0>)
 81188dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81188e0:	4a1c      	ldr	r2, [pc, #112]	; (8118954 <HAL_PCD_MspInit+0xa0>)
 81188e2:	f043 0301 	orr.w	r3, r3, #1
 81188e6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81188ea:	4b1a      	ldr	r3, [pc, #104]	; (8118954 <HAL_PCD_MspInit+0xa0>)
 81188ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81188f0:	f003 0301 	and.w	r3, r3, #1
 81188f4:	613b      	str	r3, [r7, #16]
 81188f6:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 81188f8:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 81188fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81188fe:	2302      	movs	r3, #2
 8118900:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8118902:	2300      	movs	r3, #0
 8118904:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8118906:	2300      	movs	r3, #0
 8118908:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 811890a:	230a      	movs	r3, #10
 811890c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 811890e:	f107 0314 	add.w	r3, r7, #20
 8118912:	4619      	mov	r1, r3
 8118914:	4810      	ldr	r0, [pc, #64]	; (8118958 <HAL_PCD_MspInit+0xa4>)
 8118916:	f7ee fb93 	bl	8107040 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 811891a:	4b0e      	ldr	r3, [pc, #56]	; (8118954 <HAL_PCD_MspInit+0xa0>)
 811891c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8118920:	4a0c      	ldr	r2, [pc, #48]	; (8118954 <HAL_PCD_MspInit+0xa0>)
 8118922:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8118926:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 811892a:	4b0a      	ldr	r3, [pc, #40]	; (8118954 <HAL_PCD_MspInit+0xa0>)
 811892c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8118930:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8118934:	60fb      	str	r3, [r7, #12]
 8118936:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8118938:	2200      	movs	r2, #0
 811893a:	2105      	movs	r1, #5
 811893c:	2065      	movs	r0, #101	; 0x65
 811893e:	f7eb fcf1 	bl	8104324 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8118942:	2065      	movs	r0, #101	; 0x65
 8118944:	f7eb fd08 	bl	8104358 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8118948:	bf00      	nop
 811894a:	3728      	adds	r7, #40	; 0x28
 811894c:	46bd      	mov	sp, r7
 811894e:	bd80      	pop	{r7, pc}
 8118950:	40080000 	.word	0x40080000
 8118954:	58024400 	.word	0x58024400
 8118958:	58020000 	.word	0x58020000

0811895c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 811895c:	b580      	push	{r7, lr}
 811895e:	b082      	sub	sp, #8
 8118960:	af00      	add	r7, sp, #0
 8118962:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8118964:	687b      	ldr	r3, [r7, #4]
 8118966:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 811896a:	687b      	ldr	r3, [r7, #4]
 811896c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8118970:	4619      	mov	r1, r3
 8118972:	4610      	mov	r0, r2
 8118974:	f7fb fcd0 	bl	8114318 <USBD_LL_SetupStage>
}
 8118978:	bf00      	nop
 811897a:	3708      	adds	r7, #8
 811897c:	46bd      	mov	sp, r7
 811897e:	bd80      	pop	{r7, pc}

08118980 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8118980:	b580      	push	{r7, lr}
 8118982:	b082      	sub	sp, #8
 8118984:	af00      	add	r7, sp, #0
 8118986:	6078      	str	r0, [r7, #4]
 8118988:	460b      	mov	r3, r1
 811898a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 811898c:	687b      	ldr	r3, [r7, #4]
 811898e:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8118992:	78fa      	ldrb	r2, [r7, #3]
 8118994:	6879      	ldr	r1, [r7, #4]
 8118996:	4613      	mov	r3, r2
 8118998:	00db      	lsls	r3, r3, #3
 811899a:	1a9b      	subs	r3, r3, r2
 811899c:	009b      	lsls	r3, r3, #2
 811899e:	440b      	add	r3, r1
 81189a0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 81189a4:	681a      	ldr	r2, [r3, #0]
 81189a6:	78fb      	ldrb	r3, [r7, #3]
 81189a8:	4619      	mov	r1, r3
 81189aa:	f7fb fd0a 	bl	81143c2 <USBD_LL_DataOutStage>
}
 81189ae:	bf00      	nop
 81189b0:	3708      	adds	r7, #8
 81189b2:	46bd      	mov	sp, r7
 81189b4:	bd80      	pop	{r7, pc}

081189b6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 81189b6:	b580      	push	{r7, lr}
 81189b8:	b082      	sub	sp, #8
 81189ba:	af00      	add	r7, sp, #0
 81189bc:	6078      	str	r0, [r7, #4]
 81189be:	460b      	mov	r3, r1
 81189c0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 81189c2:	687b      	ldr	r3, [r7, #4]
 81189c4:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 81189c8:	78fa      	ldrb	r2, [r7, #3]
 81189ca:	6879      	ldr	r1, [r7, #4]
 81189cc:	4613      	mov	r3, r2
 81189ce:	00db      	lsls	r3, r3, #3
 81189d0:	1a9b      	subs	r3, r3, r2
 81189d2:	009b      	lsls	r3, r3, #2
 81189d4:	440b      	add	r3, r1
 81189d6:	3348      	adds	r3, #72	; 0x48
 81189d8:	681a      	ldr	r2, [r3, #0]
 81189da:	78fb      	ldrb	r3, [r7, #3]
 81189dc:	4619      	mov	r1, r3
 81189de:	f7fb fd53 	bl	8114488 <USBD_LL_DataInStage>
}
 81189e2:	bf00      	nop
 81189e4:	3708      	adds	r7, #8
 81189e6:	46bd      	mov	sp, r7
 81189e8:	bd80      	pop	{r7, pc}

081189ea <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 81189ea:	b580      	push	{r7, lr}
 81189ec:	b082      	sub	sp, #8
 81189ee:	af00      	add	r7, sp, #0
 81189f0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 81189f2:	687b      	ldr	r3, [r7, #4]
 81189f4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 81189f8:	4618      	mov	r0, r3
 81189fa:	f7fb fe67 	bl	81146cc <USBD_LL_SOF>
}
 81189fe:	bf00      	nop
 8118a00:	3708      	adds	r7, #8
 8118a02:	46bd      	mov	sp, r7
 8118a04:	bd80      	pop	{r7, pc}

08118a06 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8118a06:	b580      	push	{r7, lr}
 8118a08:	b084      	sub	sp, #16
 8118a0a:	af00      	add	r7, sp, #0
 8118a0c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8118a0e:	2301      	movs	r3, #1
 8118a10:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8118a12:	687b      	ldr	r3, [r7, #4]
 8118a14:	68db      	ldr	r3, [r3, #12]
 8118a16:	2b00      	cmp	r3, #0
 8118a18:	d102      	bne.n	8118a20 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8118a1a:	2300      	movs	r3, #0
 8118a1c:	73fb      	strb	r3, [r7, #15]
 8118a1e:	e008      	b.n	8118a32 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8118a20:	687b      	ldr	r3, [r7, #4]
 8118a22:	68db      	ldr	r3, [r3, #12]
 8118a24:	2b02      	cmp	r3, #2
 8118a26:	d102      	bne.n	8118a2e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8118a28:	2301      	movs	r3, #1
 8118a2a:	73fb      	strb	r3, [r7, #15]
 8118a2c:	e001      	b.n	8118a32 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8118a2e:	f7e9 f8e5 	bl	8101bfc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8118a32:	687b      	ldr	r3, [r7, #4]
 8118a34:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8118a38:	7bfa      	ldrb	r2, [r7, #15]
 8118a3a:	4611      	mov	r1, r2
 8118a3c:	4618      	mov	r0, r3
 8118a3e:	f7fb fe07 	bl	8114650 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8118a42:	687b      	ldr	r3, [r7, #4]
 8118a44:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8118a48:	4618      	mov	r0, r3
 8118a4a:	f7fb fdb3 	bl	81145b4 <USBD_LL_Reset>
}
 8118a4e:	bf00      	nop
 8118a50:	3710      	adds	r7, #16
 8118a52:	46bd      	mov	sp, r7
 8118a54:	bd80      	pop	{r7, pc}
	...

08118a58 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8118a58:	b580      	push	{r7, lr}
 8118a5a:	b082      	sub	sp, #8
 8118a5c:	af00      	add	r7, sp, #0
 8118a5e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8118a60:	687b      	ldr	r3, [r7, #4]
 8118a62:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8118a66:	4618      	mov	r0, r3
 8118a68:	f7fb fe02 	bl	8114670 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8118a6c:	687b      	ldr	r3, [r7, #4]
 8118a6e:	681b      	ldr	r3, [r3, #0]
 8118a70:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8118a74:	681b      	ldr	r3, [r3, #0]
 8118a76:	687a      	ldr	r2, [r7, #4]
 8118a78:	6812      	ldr	r2, [r2, #0]
 8118a7a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8118a7e:	f043 0301 	orr.w	r3, r3, #1
 8118a82:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8118a84:	687b      	ldr	r3, [r7, #4]
 8118a86:	6a1b      	ldr	r3, [r3, #32]
 8118a88:	2b00      	cmp	r3, #0
 8118a8a:	d005      	beq.n	8118a98 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8118a8c:	4b04      	ldr	r3, [pc, #16]	; (8118aa0 <HAL_PCD_SuspendCallback+0x48>)
 8118a8e:	691b      	ldr	r3, [r3, #16]
 8118a90:	4a03      	ldr	r2, [pc, #12]	; (8118aa0 <HAL_PCD_SuspendCallback+0x48>)
 8118a92:	f043 0306 	orr.w	r3, r3, #6
 8118a96:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8118a98:	bf00      	nop
 8118a9a:	3708      	adds	r7, #8
 8118a9c:	46bd      	mov	sp, r7
 8118a9e:	bd80      	pop	{r7, pc}
 8118aa0:	e000ed00 	.word	0xe000ed00

08118aa4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8118aa4:	b580      	push	{r7, lr}
 8118aa6:	b082      	sub	sp, #8
 8118aa8:	af00      	add	r7, sp, #0
 8118aaa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8118aac:	687b      	ldr	r3, [r7, #4]
 8118aae:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8118ab2:	4618      	mov	r0, r3
 8118ab4:	f7fb fdf2 	bl	811469c <USBD_LL_Resume>
}
 8118ab8:	bf00      	nop
 8118aba:	3708      	adds	r7, #8
 8118abc:	46bd      	mov	sp, r7
 8118abe:	bd80      	pop	{r7, pc}

08118ac0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8118ac0:	b580      	push	{r7, lr}
 8118ac2:	b082      	sub	sp, #8
 8118ac4:	af00      	add	r7, sp, #0
 8118ac6:	6078      	str	r0, [r7, #4]
 8118ac8:	460b      	mov	r3, r1
 8118aca:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8118acc:	687b      	ldr	r3, [r7, #4]
 8118ace:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8118ad2:	78fa      	ldrb	r2, [r7, #3]
 8118ad4:	4611      	mov	r1, r2
 8118ad6:	4618      	mov	r0, r3
 8118ad8:	f7fb fe40 	bl	811475c <USBD_LL_IsoOUTIncomplete>
}
 8118adc:	bf00      	nop
 8118ade:	3708      	adds	r7, #8
 8118ae0:	46bd      	mov	sp, r7
 8118ae2:	bd80      	pop	{r7, pc}

08118ae4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8118ae4:	b580      	push	{r7, lr}
 8118ae6:	b082      	sub	sp, #8
 8118ae8:	af00      	add	r7, sp, #0
 8118aea:	6078      	str	r0, [r7, #4]
 8118aec:	460b      	mov	r3, r1
 8118aee:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8118af0:	687b      	ldr	r3, [r7, #4]
 8118af2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8118af6:	78fa      	ldrb	r2, [r7, #3]
 8118af8:	4611      	mov	r1, r2
 8118afa:	4618      	mov	r0, r3
 8118afc:	f7fb fe08 	bl	8114710 <USBD_LL_IsoINIncomplete>
}
 8118b00:	bf00      	nop
 8118b02:	3708      	adds	r7, #8
 8118b04:	46bd      	mov	sp, r7
 8118b06:	bd80      	pop	{r7, pc}

08118b08 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8118b08:	b580      	push	{r7, lr}
 8118b0a:	b082      	sub	sp, #8
 8118b0c:	af00      	add	r7, sp, #0
 8118b0e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8118b10:	687b      	ldr	r3, [r7, #4]
 8118b12:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8118b16:	4618      	mov	r0, r3
 8118b18:	f7fb fe46 	bl	81147a8 <USBD_LL_DevConnected>
}
 8118b1c:	bf00      	nop
 8118b1e:	3708      	adds	r7, #8
 8118b20:	46bd      	mov	sp, r7
 8118b22:	bd80      	pop	{r7, pc}

08118b24 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8118b24:	b580      	push	{r7, lr}
 8118b26:	b082      	sub	sp, #8
 8118b28:	af00      	add	r7, sp, #0
 8118b2a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8118b2c:	687b      	ldr	r3, [r7, #4]
 8118b2e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8118b32:	4618      	mov	r0, r3
 8118b34:	f7fb fe43 	bl	81147be <USBD_LL_DevDisconnected>
}
 8118b38:	bf00      	nop
 8118b3a:	3708      	adds	r7, #8
 8118b3c:	46bd      	mov	sp, r7
 8118b3e:	bd80      	pop	{r7, pc}

08118b40 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8118b40:	b580      	push	{r7, lr}
 8118b42:	b082      	sub	sp, #8
 8118b44:	af00      	add	r7, sp, #0
 8118b46:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8118b48:	687b      	ldr	r3, [r7, #4]
 8118b4a:	781b      	ldrb	r3, [r3, #0]
 8118b4c:	2b00      	cmp	r3, #0
 8118b4e:	d13e      	bne.n	8118bce <USBD_LL_Init+0x8e>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8118b50:	4a21      	ldr	r2, [pc, #132]	; (8118bd8 <USBD_LL_Init+0x98>)
 8118b52:	687b      	ldr	r3, [r7, #4]
 8118b54:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8118b58:	687b      	ldr	r3, [r7, #4]
 8118b5a:	4a1f      	ldr	r2, [pc, #124]	; (8118bd8 <USBD_LL_Init+0x98>)
 8118b5c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8118b60:	4b1d      	ldr	r3, [pc, #116]	; (8118bd8 <USBD_LL_Init+0x98>)
 8118b62:	4a1e      	ldr	r2, [pc, #120]	; (8118bdc <USBD_LL_Init+0x9c>)
 8118b64:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8118b66:	4b1c      	ldr	r3, [pc, #112]	; (8118bd8 <USBD_LL_Init+0x98>)
 8118b68:	2209      	movs	r2, #9
 8118b6a:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8118b6c:	4b1a      	ldr	r3, [pc, #104]	; (8118bd8 <USBD_LL_Init+0x98>)
 8118b6e:	2202      	movs	r2, #2
 8118b70:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8118b72:	4b19      	ldr	r3, [pc, #100]	; (8118bd8 <USBD_LL_Init+0x98>)
 8118b74:	2200      	movs	r2, #0
 8118b76:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8118b78:	4b17      	ldr	r3, [pc, #92]	; (8118bd8 <USBD_LL_Init+0x98>)
 8118b7a:	2202      	movs	r2, #2
 8118b7c:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8118b7e:	4b16      	ldr	r3, [pc, #88]	; (8118bd8 <USBD_LL_Init+0x98>)
 8118b80:	2200      	movs	r2, #0
 8118b82:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8118b84:	4b14      	ldr	r3, [pc, #80]	; (8118bd8 <USBD_LL_Init+0x98>)
 8118b86:	2200      	movs	r2, #0
 8118b88:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8118b8a:	4b13      	ldr	r3, [pc, #76]	; (8118bd8 <USBD_LL_Init+0x98>)
 8118b8c:	2200      	movs	r2, #0
 8118b8e:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8118b90:	4b11      	ldr	r3, [pc, #68]	; (8118bd8 <USBD_LL_Init+0x98>)
 8118b92:	2200      	movs	r2, #0
 8118b94:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8118b96:	4b10      	ldr	r3, [pc, #64]	; (8118bd8 <USBD_LL_Init+0x98>)
 8118b98:	2200      	movs	r2, #0
 8118b9a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8118b9c:	4b0e      	ldr	r3, [pc, #56]	; (8118bd8 <USBD_LL_Init+0x98>)
 8118b9e:	2200      	movs	r2, #0
 8118ba0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8118ba2:	480d      	ldr	r0, [pc, #52]	; (8118bd8 <USBD_LL_Init+0x98>)
 8118ba4:	f7ef fc1c 	bl	81083e0 <HAL_PCD_Init>
 8118ba8:	4603      	mov	r3, r0
 8118baa:	2b00      	cmp	r3, #0
 8118bac:	d001      	beq.n	8118bb2 <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 8118bae:	f7e9 f825 	bl	8101bfc <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8118bb2:	2180      	movs	r1, #128	; 0x80
 8118bb4:	4808      	ldr	r0, [pc, #32]	; (8118bd8 <USBD_LL_Init+0x98>)
 8118bb6:	f7f0 fdae 	bl	8109716 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8118bba:	2240      	movs	r2, #64	; 0x40
 8118bbc:	2100      	movs	r1, #0
 8118bbe:	4806      	ldr	r0, [pc, #24]	; (8118bd8 <USBD_LL_Init+0x98>)
 8118bc0:	f7f0 fd62 	bl	8109688 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8118bc4:	2280      	movs	r2, #128	; 0x80
 8118bc6:	2101      	movs	r1, #1
 8118bc8:	4803      	ldr	r0, [pc, #12]	; (8118bd8 <USBD_LL_Init+0x98>)
 8118bca:	f7f0 fd5d 	bl	8109688 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8118bce:	2300      	movs	r3, #0
}
 8118bd0:	4618      	mov	r0, r3
 8118bd2:	3708      	adds	r7, #8
 8118bd4:	46bd      	mov	sp, r7
 8118bd6:	bd80      	pop	{r7, pc}
 8118bd8:	10008b2c 	.word	0x10008b2c
 8118bdc:	40080000 	.word	0x40080000

08118be0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8118be0:	b580      	push	{r7, lr}
 8118be2:	b084      	sub	sp, #16
 8118be4:	af00      	add	r7, sp, #0
 8118be6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8118be8:	2300      	movs	r3, #0
 8118bea:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8118bec:	2300      	movs	r3, #0
 8118bee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8118bf0:	687b      	ldr	r3, [r7, #4]
 8118bf2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8118bf6:	4618      	mov	r0, r3
 8118bf8:	f7ef fd16 	bl	8108628 <HAL_PCD_Start>
 8118bfc:	4603      	mov	r3, r0
 8118bfe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8118c00:	7bfb      	ldrb	r3, [r7, #15]
 8118c02:	4618      	mov	r0, r3
 8118c04:	f000 f942 	bl	8118e8c <USBD_Get_USB_Status>
 8118c08:	4603      	mov	r3, r0
 8118c0a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8118c0c:	7bbb      	ldrb	r3, [r7, #14]
}
 8118c0e:	4618      	mov	r0, r3
 8118c10:	3710      	adds	r7, #16
 8118c12:	46bd      	mov	sp, r7
 8118c14:	bd80      	pop	{r7, pc}

08118c16 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8118c16:	b580      	push	{r7, lr}
 8118c18:	b084      	sub	sp, #16
 8118c1a:	af00      	add	r7, sp, #0
 8118c1c:	6078      	str	r0, [r7, #4]
 8118c1e:	4608      	mov	r0, r1
 8118c20:	4611      	mov	r1, r2
 8118c22:	461a      	mov	r2, r3
 8118c24:	4603      	mov	r3, r0
 8118c26:	70fb      	strb	r3, [r7, #3]
 8118c28:	460b      	mov	r3, r1
 8118c2a:	70bb      	strb	r3, [r7, #2]
 8118c2c:	4613      	mov	r3, r2
 8118c2e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8118c30:	2300      	movs	r3, #0
 8118c32:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8118c34:	2300      	movs	r3, #0
 8118c36:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8118c38:	687b      	ldr	r3, [r7, #4]
 8118c3a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8118c3e:	78bb      	ldrb	r3, [r7, #2]
 8118c40:	883a      	ldrh	r2, [r7, #0]
 8118c42:	78f9      	ldrb	r1, [r7, #3]
 8118c44:	f7f0 f927 	bl	8108e96 <HAL_PCD_EP_Open>
 8118c48:	4603      	mov	r3, r0
 8118c4a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8118c4c:	7bfb      	ldrb	r3, [r7, #15]
 8118c4e:	4618      	mov	r0, r3
 8118c50:	f000 f91c 	bl	8118e8c <USBD_Get_USB_Status>
 8118c54:	4603      	mov	r3, r0
 8118c56:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8118c58:	7bbb      	ldrb	r3, [r7, #14]
}
 8118c5a:	4618      	mov	r0, r3
 8118c5c:	3710      	adds	r7, #16
 8118c5e:	46bd      	mov	sp, r7
 8118c60:	bd80      	pop	{r7, pc}

08118c62 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8118c62:	b580      	push	{r7, lr}
 8118c64:	b084      	sub	sp, #16
 8118c66:	af00      	add	r7, sp, #0
 8118c68:	6078      	str	r0, [r7, #4]
 8118c6a:	460b      	mov	r3, r1
 8118c6c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8118c6e:	2300      	movs	r3, #0
 8118c70:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8118c72:	2300      	movs	r3, #0
 8118c74:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8118c76:	687b      	ldr	r3, [r7, #4]
 8118c78:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8118c7c:	78fa      	ldrb	r2, [r7, #3]
 8118c7e:	4611      	mov	r1, r2
 8118c80:	4618      	mov	r0, r3
 8118c82:	f7f0 f970 	bl	8108f66 <HAL_PCD_EP_Close>
 8118c86:	4603      	mov	r3, r0
 8118c88:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8118c8a:	7bfb      	ldrb	r3, [r7, #15]
 8118c8c:	4618      	mov	r0, r3
 8118c8e:	f000 f8fd 	bl	8118e8c <USBD_Get_USB_Status>
 8118c92:	4603      	mov	r3, r0
 8118c94:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8118c96:	7bbb      	ldrb	r3, [r7, #14]
}
 8118c98:	4618      	mov	r0, r3
 8118c9a:	3710      	adds	r7, #16
 8118c9c:	46bd      	mov	sp, r7
 8118c9e:	bd80      	pop	{r7, pc}

08118ca0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8118ca0:	b580      	push	{r7, lr}
 8118ca2:	b084      	sub	sp, #16
 8118ca4:	af00      	add	r7, sp, #0
 8118ca6:	6078      	str	r0, [r7, #4]
 8118ca8:	460b      	mov	r3, r1
 8118caa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8118cac:	2300      	movs	r3, #0
 8118cae:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8118cb0:	2300      	movs	r3, #0
 8118cb2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8118cb4:	687b      	ldr	r3, [r7, #4]
 8118cb6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8118cba:	78fa      	ldrb	r2, [r7, #3]
 8118cbc:	4611      	mov	r1, r2
 8118cbe:	4618      	mov	r0, r3
 8118cc0:	f7f0 fa48 	bl	8109154 <HAL_PCD_EP_SetStall>
 8118cc4:	4603      	mov	r3, r0
 8118cc6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8118cc8:	7bfb      	ldrb	r3, [r7, #15]
 8118cca:	4618      	mov	r0, r3
 8118ccc:	f000 f8de 	bl	8118e8c <USBD_Get_USB_Status>
 8118cd0:	4603      	mov	r3, r0
 8118cd2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8118cd4:	7bbb      	ldrb	r3, [r7, #14]
}
 8118cd6:	4618      	mov	r0, r3
 8118cd8:	3710      	adds	r7, #16
 8118cda:	46bd      	mov	sp, r7
 8118cdc:	bd80      	pop	{r7, pc}

08118cde <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8118cde:	b580      	push	{r7, lr}
 8118ce0:	b084      	sub	sp, #16
 8118ce2:	af00      	add	r7, sp, #0
 8118ce4:	6078      	str	r0, [r7, #4]
 8118ce6:	460b      	mov	r3, r1
 8118ce8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8118cea:	2300      	movs	r3, #0
 8118cec:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8118cee:	2300      	movs	r3, #0
 8118cf0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8118cf2:	687b      	ldr	r3, [r7, #4]
 8118cf4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8118cf8:	78fa      	ldrb	r2, [r7, #3]
 8118cfa:	4611      	mov	r1, r2
 8118cfc:	4618      	mov	r0, r3
 8118cfe:	f7f0 fa8d 	bl	810921c <HAL_PCD_EP_ClrStall>
 8118d02:	4603      	mov	r3, r0
 8118d04:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8118d06:	7bfb      	ldrb	r3, [r7, #15]
 8118d08:	4618      	mov	r0, r3
 8118d0a:	f000 f8bf 	bl	8118e8c <USBD_Get_USB_Status>
 8118d0e:	4603      	mov	r3, r0
 8118d10:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8118d12:	7bbb      	ldrb	r3, [r7, #14]
}
 8118d14:	4618      	mov	r0, r3
 8118d16:	3710      	adds	r7, #16
 8118d18:	46bd      	mov	sp, r7
 8118d1a:	bd80      	pop	{r7, pc}

08118d1c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8118d1c:	b480      	push	{r7}
 8118d1e:	b085      	sub	sp, #20
 8118d20:	af00      	add	r7, sp, #0
 8118d22:	6078      	str	r0, [r7, #4]
 8118d24:	460b      	mov	r3, r1
 8118d26:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8118d28:	687b      	ldr	r3, [r7, #4]
 8118d2a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8118d2e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8118d30:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8118d34:	2b00      	cmp	r3, #0
 8118d36:	da0b      	bge.n	8118d50 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8118d38:	78fb      	ldrb	r3, [r7, #3]
 8118d3a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8118d3e:	68f9      	ldr	r1, [r7, #12]
 8118d40:	4613      	mov	r3, r2
 8118d42:	00db      	lsls	r3, r3, #3
 8118d44:	1a9b      	subs	r3, r3, r2
 8118d46:	009b      	lsls	r3, r3, #2
 8118d48:	440b      	add	r3, r1
 8118d4a:	333e      	adds	r3, #62	; 0x3e
 8118d4c:	781b      	ldrb	r3, [r3, #0]
 8118d4e:	e00b      	b.n	8118d68 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8118d50:	78fb      	ldrb	r3, [r7, #3]
 8118d52:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8118d56:	68f9      	ldr	r1, [r7, #12]
 8118d58:	4613      	mov	r3, r2
 8118d5a:	00db      	lsls	r3, r3, #3
 8118d5c:	1a9b      	subs	r3, r3, r2
 8118d5e:	009b      	lsls	r3, r3, #2
 8118d60:	440b      	add	r3, r1
 8118d62:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8118d66:	781b      	ldrb	r3, [r3, #0]
  }
}
 8118d68:	4618      	mov	r0, r3
 8118d6a:	3714      	adds	r7, #20
 8118d6c:	46bd      	mov	sp, r7
 8118d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8118d72:	4770      	bx	lr

08118d74 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8118d74:	b580      	push	{r7, lr}
 8118d76:	b084      	sub	sp, #16
 8118d78:	af00      	add	r7, sp, #0
 8118d7a:	6078      	str	r0, [r7, #4]
 8118d7c:	460b      	mov	r3, r1
 8118d7e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8118d80:	2300      	movs	r3, #0
 8118d82:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8118d84:	2300      	movs	r3, #0
 8118d86:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8118d88:	687b      	ldr	r3, [r7, #4]
 8118d8a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8118d8e:	78fa      	ldrb	r2, [r7, #3]
 8118d90:	4611      	mov	r1, r2
 8118d92:	4618      	mov	r0, r3
 8118d94:	f7f0 f85a 	bl	8108e4c <HAL_PCD_SetAddress>
 8118d98:	4603      	mov	r3, r0
 8118d9a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8118d9c:	7bfb      	ldrb	r3, [r7, #15]
 8118d9e:	4618      	mov	r0, r3
 8118da0:	f000 f874 	bl	8118e8c <USBD_Get_USB_Status>
 8118da4:	4603      	mov	r3, r0
 8118da6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8118da8:	7bbb      	ldrb	r3, [r7, #14]
}
 8118daa:	4618      	mov	r0, r3
 8118dac:	3710      	adds	r7, #16
 8118dae:	46bd      	mov	sp, r7
 8118db0:	bd80      	pop	{r7, pc}

08118db2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8118db2:	b580      	push	{r7, lr}
 8118db4:	b086      	sub	sp, #24
 8118db6:	af00      	add	r7, sp, #0
 8118db8:	60f8      	str	r0, [r7, #12]
 8118dba:	607a      	str	r2, [r7, #4]
 8118dbc:	603b      	str	r3, [r7, #0]
 8118dbe:	460b      	mov	r3, r1
 8118dc0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8118dc2:	2300      	movs	r3, #0
 8118dc4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8118dc6:	2300      	movs	r3, #0
 8118dc8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8118dca:	68fb      	ldr	r3, [r7, #12]
 8118dcc:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8118dd0:	7af9      	ldrb	r1, [r7, #11]
 8118dd2:	683b      	ldr	r3, [r7, #0]
 8118dd4:	687a      	ldr	r2, [r7, #4]
 8118dd6:	f7f0 f973 	bl	81090c0 <HAL_PCD_EP_Transmit>
 8118dda:	4603      	mov	r3, r0
 8118ddc:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8118dde:	7dfb      	ldrb	r3, [r7, #23]
 8118de0:	4618      	mov	r0, r3
 8118de2:	f000 f853 	bl	8118e8c <USBD_Get_USB_Status>
 8118de6:	4603      	mov	r3, r0
 8118de8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8118dea:	7dbb      	ldrb	r3, [r7, #22]
}
 8118dec:	4618      	mov	r0, r3
 8118dee:	3718      	adds	r7, #24
 8118df0:	46bd      	mov	sp, r7
 8118df2:	bd80      	pop	{r7, pc}

08118df4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8118df4:	b580      	push	{r7, lr}
 8118df6:	b086      	sub	sp, #24
 8118df8:	af00      	add	r7, sp, #0
 8118dfa:	60f8      	str	r0, [r7, #12]
 8118dfc:	607a      	str	r2, [r7, #4]
 8118dfe:	603b      	str	r3, [r7, #0]
 8118e00:	460b      	mov	r3, r1
 8118e02:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8118e04:	2300      	movs	r3, #0
 8118e06:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8118e08:	2300      	movs	r3, #0
 8118e0a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8118e0c:	68fb      	ldr	r3, [r7, #12]
 8118e0e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8118e12:	7af9      	ldrb	r1, [r7, #11]
 8118e14:	683b      	ldr	r3, [r7, #0]
 8118e16:	687a      	ldr	r2, [r7, #4]
 8118e18:	f7f0 f8ef 	bl	8108ffa <HAL_PCD_EP_Receive>
 8118e1c:	4603      	mov	r3, r0
 8118e1e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8118e20:	7dfb      	ldrb	r3, [r7, #23]
 8118e22:	4618      	mov	r0, r3
 8118e24:	f000 f832 	bl	8118e8c <USBD_Get_USB_Status>
 8118e28:	4603      	mov	r3, r0
 8118e2a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8118e2c:	7dbb      	ldrb	r3, [r7, #22]
}
 8118e2e:	4618      	mov	r0, r3
 8118e30:	3718      	adds	r7, #24
 8118e32:	46bd      	mov	sp, r7
 8118e34:	bd80      	pop	{r7, pc}

08118e36 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8118e36:	b580      	push	{r7, lr}
 8118e38:	b082      	sub	sp, #8
 8118e3a:	af00      	add	r7, sp, #0
 8118e3c:	6078      	str	r0, [r7, #4]
 8118e3e:	460b      	mov	r3, r1
 8118e40:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8118e42:	687b      	ldr	r3, [r7, #4]
 8118e44:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8118e48:	78fa      	ldrb	r2, [r7, #3]
 8118e4a:	4611      	mov	r1, r2
 8118e4c:	4618      	mov	r0, r3
 8118e4e:	f7f0 f91f 	bl	8109090 <HAL_PCD_EP_GetRxCount>
 8118e52:	4603      	mov	r3, r0
}
 8118e54:	4618      	mov	r0, r3
 8118e56:	3708      	adds	r7, #8
 8118e58:	46bd      	mov	sp, r7
 8118e5a:	bd80      	pop	{r7, pc}

08118e5c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8118e5c:	b480      	push	{r7}
 8118e5e:	b083      	sub	sp, #12
 8118e60:	af00      	add	r7, sp, #0
 8118e62:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8118e64:	4b03      	ldr	r3, [pc, #12]	; (8118e74 <USBD_static_malloc+0x18>)
}
 8118e66:	4618      	mov	r0, r3
 8118e68:	370c      	adds	r7, #12
 8118e6a:	46bd      	mov	sp, r7
 8118e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8118e70:	4770      	bx	lr
 8118e72:	bf00      	nop
 8118e74:	10004ca8 	.word	0x10004ca8

08118e78 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8118e78:	b480      	push	{r7}
 8118e7a:	b083      	sub	sp, #12
 8118e7c:	af00      	add	r7, sp, #0
 8118e7e:	6078      	str	r0, [r7, #4]

}
 8118e80:	bf00      	nop
 8118e82:	370c      	adds	r7, #12
 8118e84:	46bd      	mov	sp, r7
 8118e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8118e8a:	4770      	bx	lr

08118e8c <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8118e8c:	b480      	push	{r7}
 8118e8e:	b085      	sub	sp, #20
 8118e90:	af00      	add	r7, sp, #0
 8118e92:	4603      	mov	r3, r0
 8118e94:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8118e96:	2300      	movs	r3, #0
 8118e98:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8118e9a:	79fb      	ldrb	r3, [r7, #7]
 8118e9c:	2b03      	cmp	r3, #3
 8118e9e:	d817      	bhi.n	8118ed0 <USBD_Get_USB_Status+0x44>
 8118ea0:	a201      	add	r2, pc, #4	; (adr r2, 8118ea8 <USBD_Get_USB_Status+0x1c>)
 8118ea2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8118ea6:	bf00      	nop
 8118ea8:	08118eb9 	.word	0x08118eb9
 8118eac:	08118ebf 	.word	0x08118ebf
 8118eb0:	08118ec5 	.word	0x08118ec5
 8118eb4:	08118ecb 	.word	0x08118ecb
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8118eb8:	2300      	movs	r3, #0
 8118eba:	73fb      	strb	r3, [r7, #15]
    break;
 8118ebc:	e00b      	b.n	8118ed6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8118ebe:	2303      	movs	r3, #3
 8118ec0:	73fb      	strb	r3, [r7, #15]
    break;
 8118ec2:	e008      	b.n	8118ed6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8118ec4:	2301      	movs	r3, #1
 8118ec6:	73fb      	strb	r3, [r7, #15]
    break;
 8118ec8:	e005      	b.n	8118ed6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8118eca:	2303      	movs	r3, #3
 8118ecc:	73fb      	strb	r3, [r7, #15]
    break;
 8118ece:	e002      	b.n	8118ed6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8118ed0:	2303      	movs	r3, #3
 8118ed2:	73fb      	strb	r3, [r7, #15]
    break;
 8118ed4:	bf00      	nop
  }
  return usb_status;
 8118ed6:	7bfb      	ldrb	r3, [r7, #15]
}
 8118ed8:	4618      	mov	r0, r3
 8118eda:	3714      	adds	r7, #20
 8118edc:	46bd      	mov	sp, r7
 8118ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8118ee2:	4770      	bx	lr

08118ee4 <__errno>:
 8118ee4:	4b01      	ldr	r3, [pc, #4]	; (8118eec <__errno+0x8>)
 8118ee6:	6818      	ldr	r0, [r3, #0]
 8118ee8:	4770      	bx	lr
 8118eea:	bf00      	nop
 8118eec:	10000188 	.word	0x10000188

08118ef0 <__libc_init_array>:
 8118ef0:	b570      	push	{r4, r5, r6, lr}
 8118ef2:	4d0d      	ldr	r5, [pc, #52]	; (8118f28 <__libc_init_array+0x38>)
 8118ef4:	4c0d      	ldr	r4, [pc, #52]	; (8118f2c <__libc_init_array+0x3c>)
 8118ef6:	1b64      	subs	r4, r4, r5
 8118ef8:	10a4      	asrs	r4, r4, #2
 8118efa:	2600      	movs	r6, #0
 8118efc:	42a6      	cmp	r6, r4
 8118efe:	d109      	bne.n	8118f14 <__libc_init_array+0x24>
 8118f00:	4d0b      	ldr	r5, [pc, #44]	; (8118f30 <__libc_init_array+0x40>)
 8118f02:	4c0c      	ldr	r4, [pc, #48]	; (8118f34 <__libc_init_array+0x44>)
 8118f04:	f002 fcf0 	bl	811b8e8 <_init>
 8118f08:	1b64      	subs	r4, r4, r5
 8118f0a:	10a4      	asrs	r4, r4, #2
 8118f0c:	2600      	movs	r6, #0
 8118f0e:	42a6      	cmp	r6, r4
 8118f10:	d105      	bne.n	8118f1e <__libc_init_array+0x2e>
 8118f12:	bd70      	pop	{r4, r5, r6, pc}
 8118f14:	f855 3b04 	ldr.w	r3, [r5], #4
 8118f18:	4798      	blx	r3
 8118f1a:	3601      	adds	r6, #1
 8118f1c:	e7ee      	b.n	8118efc <__libc_init_array+0xc>
 8118f1e:	f855 3b04 	ldr.w	r3, [r5], #4
 8118f22:	4798      	blx	r3
 8118f24:	3601      	adds	r6, #1
 8118f26:	e7f2      	b.n	8118f0e <__libc_init_array+0x1e>
 8118f28:	0811be54 	.word	0x0811be54
 8118f2c:	0811be54 	.word	0x0811be54
 8118f30:	0811be54 	.word	0x0811be54
 8118f34:	0811be58 	.word	0x0811be58

08118f38 <memcpy>:
 8118f38:	440a      	add	r2, r1
 8118f3a:	4291      	cmp	r1, r2
 8118f3c:	f100 33ff 	add.w	r3, r0, #4294967295
 8118f40:	d100      	bne.n	8118f44 <memcpy+0xc>
 8118f42:	4770      	bx	lr
 8118f44:	b510      	push	{r4, lr}
 8118f46:	f811 4b01 	ldrb.w	r4, [r1], #1
 8118f4a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8118f4e:	4291      	cmp	r1, r2
 8118f50:	d1f9      	bne.n	8118f46 <memcpy+0xe>
 8118f52:	bd10      	pop	{r4, pc}

08118f54 <memset>:
 8118f54:	4402      	add	r2, r0
 8118f56:	4603      	mov	r3, r0
 8118f58:	4293      	cmp	r3, r2
 8118f5a:	d100      	bne.n	8118f5e <memset+0xa>
 8118f5c:	4770      	bx	lr
 8118f5e:	f803 1b01 	strb.w	r1, [r3], #1
 8118f62:	e7f9      	b.n	8118f58 <memset+0x4>

08118f64 <__cvt>:
 8118f64:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8118f68:	ec55 4b10 	vmov	r4, r5, d0
 8118f6c:	2d00      	cmp	r5, #0
 8118f6e:	460e      	mov	r6, r1
 8118f70:	4619      	mov	r1, r3
 8118f72:	462b      	mov	r3, r5
 8118f74:	bfbb      	ittet	lt
 8118f76:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8118f7a:	461d      	movlt	r5, r3
 8118f7c:	2300      	movge	r3, #0
 8118f7e:	232d      	movlt	r3, #45	; 0x2d
 8118f80:	700b      	strb	r3, [r1, #0]
 8118f82:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8118f84:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8118f88:	4691      	mov	r9, r2
 8118f8a:	f023 0820 	bic.w	r8, r3, #32
 8118f8e:	bfbc      	itt	lt
 8118f90:	4622      	movlt	r2, r4
 8118f92:	4614      	movlt	r4, r2
 8118f94:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8118f98:	d005      	beq.n	8118fa6 <__cvt+0x42>
 8118f9a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8118f9e:	d100      	bne.n	8118fa2 <__cvt+0x3e>
 8118fa0:	3601      	adds	r6, #1
 8118fa2:	2102      	movs	r1, #2
 8118fa4:	e000      	b.n	8118fa8 <__cvt+0x44>
 8118fa6:	2103      	movs	r1, #3
 8118fa8:	ab03      	add	r3, sp, #12
 8118faa:	9301      	str	r3, [sp, #4]
 8118fac:	ab02      	add	r3, sp, #8
 8118fae:	9300      	str	r3, [sp, #0]
 8118fb0:	ec45 4b10 	vmov	d0, r4, r5
 8118fb4:	4653      	mov	r3, sl
 8118fb6:	4632      	mov	r2, r6
 8118fb8:	f000 fcca 	bl	8119950 <_dtoa_r>
 8118fbc:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8118fc0:	4607      	mov	r7, r0
 8118fc2:	d102      	bne.n	8118fca <__cvt+0x66>
 8118fc4:	f019 0f01 	tst.w	r9, #1
 8118fc8:	d022      	beq.n	8119010 <__cvt+0xac>
 8118fca:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8118fce:	eb07 0906 	add.w	r9, r7, r6
 8118fd2:	d110      	bne.n	8118ff6 <__cvt+0x92>
 8118fd4:	783b      	ldrb	r3, [r7, #0]
 8118fd6:	2b30      	cmp	r3, #48	; 0x30
 8118fd8:	d10a      	bne.n	8118ff0 <__cvt+0x8c>
 8118fda:	2200      	movs	r2, #0
 8118fdc:	2300      	movs	r3, #0
 8118fde:	4620      	mov	r0, r4
 8118fe0:	4629      	mov	r1, r5
 8118fe2:	f7e7 fdf9 	bl	8100bd8 <__aeabi_dcmpeq>
 8118fe6:	b918      	cbnz	r0, 8118ff0 <__cvt+0x8c>
 8118fe8:	f1c6 0601 	rsb	r6, r6, #1
 8118fec:	f8ca 6000 	str.w	r6, [sl]
 8118ff0:	f8da 3000 	ldr.w	r3, [sl]
 8118ff4:	4499      	add	r9, r3
 8118ff6:	2200      	movs	r2, #0
 8118ff8:	2300      	movs	r3, #0
 8118ffa:	4620      	mov	r0, r4
 8118ffc:	4629      	mov	r1, r5
 8118ffe:	f7e7 fdeb 	bl	8100bd8 <__aeabi_dcmpeq>
 8119002:	b108      	cbz	r0, 8119008 <__cvt+0xa4>
 8119004:	f8cd 900c 	str.w	r9, [sp, #12]
 8119008:	2230      	movs	r2, #48	; 0x30
 811900a:	9b03      	ldr	r3, [sp, #12]
 811900c:	454b      	cmp	r3, r9
 811900e:	d307      	bcc.n	8119020 <__cvt+0xbc>
 8119010:	9b03      	ldr	r3, [sp, #12]
 8119012:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8119014:	1bdb      	subs	r3, r3, r7
 8119016:	4638      	mov	r0, r7
 8119018:	6013      	str	r3, [r2, #0]
 811901a:	b004      	add	sp, #16
 811901c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8119020:	1c59      	adds	r1, r3, #1
 8119022:	9103      	str	r1, [sp, #12]
 8119024:	701a      	strb	r2, [r3, #0]
 8119026:	e7f0      	b.n	811900a <__cvt+0xa6>

08119028 <__exponent>:
 8119028:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 811902a:	4603      	mov	r3, r0
 811902c:	2900      	cmp	r1, #0
 811902e:	bfb8      	it	lt
 8119030:	4249      	neglt	r1, r1
 8119032:	f803 2b02 	strb.w	r2, [r3], #2
 8119036:	bfb4      	ite	lt
 8119038:	222d      	movlt	r2, #45	; 0x2d
 811903a:	222b      	movge	r2, #43	; 0x2b
 811903c:	2909      	cmp	r1, #9
 811903e:	7042      	strb	r2, [r0, #1]
 8119040:	dd2a      	ble.n	8119098 <__exponent+0x70>
 8119042:	f10d 0407 	add.w	r4, sp, #7
 8119046:	46a4      	mov	ip, r4
 8119048:	270a      	movs	r7, #10
 811904a:	46a6      	mov	lr, r4
 811904c:	460a      	mov	r2, r1
 811904e:	fb91 f6f7 	sdiv	r6, r1, r7
 8119052:	fb07 1516 	mls	r5, r7, r6, r1
 8119056:	3530      	adds	r5, #48	; 0x30
 8119058:	2a63      	cmp	r2, #99	; 0x63
 811905a:	f104 34ff 	add.w	r4, r4, #4294967295
 811905e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8119062:	4631      	mov	r1, r6
 8119064:	dcf1      	bgt.n	811904a <__exponent+0x22>
 8119066:	3130      	adds	r1, #48	; 0x30
 8119068:	f1ae 0502 	sub.w	r5, lr, #2
 811906c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8119070:	1c44      	adds	r4, r0, #1
 8119072:	4629      	mov	r1, r5
 8119074:	4561      	cmp	r1, ip
 8119076:	d30a      	bcc.n	811908e <__exponent+0x66>
 8119078:	f10d 0209 	add.w	r2, sp, #9
 811907c:	eba2 020e 	sub.w	r2, r2, lr
 8119080:	4565      	cmp	r5, ip
 8119082:	bf88      	it	hi
 8119084:	2200      	movhi	r2, #0
 8119086:	4413      	add	r3, r2
 8119088:	1a18      	subs	r0, r3, r0
 811908a:	b003      	add	sp, #12
 811908c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 811908e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8119092:	f804 2f01 	strb.w	r2, [r4, #1]!
 8119096:	e7ed      	b.n	8119074 <__exponent+0x4c>
 8119098:	2330      	movs	r3, #48	; 0x30
 811909a:	3130      	adds	r1, #48	; 0x30
 811909c:	7083      	strb	r3, [r0, #2]
 811909e:	70c1      	strb	r1, [r0, #3]
 81190a0:	1d03      	adds	r3, r0, #4
 81190a2:	e7f1      	b.n	8119088 <__exponent+0x60>

081190a4 <_printf_float>:
 81190a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 81190a8:	ed2d 8b02 	vpush	{d8}
 81190ac:	b08d      	sub	sp, #52	; 0x34
 81190ae:	460c      	mov	r4, r1
 81190b0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 81190b4:	4616      	mov	r6, r2
 81190b6:	461f      	mov	r7, r3
 81190b8:	4605      	mov	r5, r0
 81190ba:	f001 fa35 	bl	811a528 <_localeconv_r>
 81190be:	f8d0 a000 	ldr.w	sl, [r0]
 81190c2:	4650      	mov	r0, sl
 81190c4:	f7e7 f90c 	bl	81002e0 <strlen>
 81190c8:	2300      	movs	r3, #0
 81190ca:	930a      	str	r3, [sp, #40]	; 0x28
 81190cc:	6823      	ldr	r3, [r4, #0]
 81190ce:	9305      	str	r3, [sp, #20]
 81190d0:	f8d8 3000 	ldr.w	r3, [r8]
 81190d4:	f894 b018 	ldrb.w	fp, [r4, #24]
 81190d8:	3307      	adds	r3, #7
 81190da:	f023 0307 	bic.w	r3, r3, #7
 81190de:	f103 0208 	add.w	r2, r3, #8
 81190e2:	f8c8 2000 	str.w	r2, [r8]
 81190e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 81190ea:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 81190ee:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 81190f2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 81190f6:	9307      	str	r3, [sp, #28]
 81190f8:	f8cd 8018 	str.w	r8, [sp, #24]
 81190fc:	ee08 0a10 	vmov	s16, r0
 8119100:	4b9f      	ldr	r3, [pc, #636]	; (8119380 <_printf_float+0x2dc>)
 8119102:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8119106:	f04f 32ff 	mov.w	r2, #4294967295
 811910a:	f7e7 fd97 	bl	8100c3c <__aeabi_dcmpun>
 811910e:	bb88      	cbnz	r0, 8119174 <_printf_float+0xd0>
 8119110:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8119114:	4b9a      	ldr	r3, [pc, #616]	; (8119380 <_printf_float+0x2dc>)
 8119116:	f04f 32ff 	mov.w	r2, #4294967295
 811911a:	f7e7 fd71 	bl	8100c00 <__aeabi_dcmple>
 811911e:	bb48      	cbnz	r0, 8119174 <_printf_float+0xd0>
 8119120:	2200      	movs	r2, #0
 8119122:	2300      	movs	r3, #0
 8119124:	4640      	mov	r0, r8
 8119126:	4649      	mov	r1, r9
 8119128:	f7e7 fd60 	bl	8100bec <__aeabi_dcmplt>
 811912c:	b110      	cbz	r0, 8119134 <_printf_float+0x90>
 811912e:	232d      	movs	r3, #45	; 0x2d
 8119130:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8119134:	4b93      	ldr	r3, [pc, #588]	; (8119384 <_printf_float+0x2e0>)
 8119136:	4894      	ldr	r0, [pc, #592]	; (8119388 <_printf_float+0x2e4>)
 8119138:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 811913c:	bf94      	ite	ls
 811913e:	4698      	movls	r8, r3
 8119140:	4680      	movhi	r8, r0
 8119142:	2303      	movs	r3, #3
 8119144:	6123      	str	r3, [r4, #16]
 8119146:	9b05      	ldr	r3, [sp, #20]
 8119148:	f023 0204 	bic.w	r2, r3, #4
 811914c:	6022      	str	r2, [r4, #0]
 811914e:	f04f 0900 	mov.w	r9, #0
 8119152:	9700      	str	r7, [sp, #0]
 8119154:	4633      	mov	r3, r6
 8119156:	aa0b      	add	r2, sp, #44	; 0x2c
 8119158:	4621      	mov	r1, r4
 811915a:	4628      	mov	r0, r5
 811915c:	f000 f9d8 	bl	8119510 <_printf_common>
 8119160:	3001      	adds	r0, #1
 8119162:	f040 8090 	bne.w	8119286 <_printf_float+0x1e2>
 8119166:	f04f 30ff 	mov.w	r0, #4294967295
 811916a:	b00d      	add	sp, #52	; 0x34
 811916c:	ecbd 8b02 	vpop	{d8}
 8119170:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8119174:	4642      	mov	r2, r8
 8119176:	464b      	mov	r3, r9
 8119178:	4640      	mov	r0, r8
 811917a:	4649      	mov	r1, r9
 811917c:	f7e7 fd5e 	bl	8100c3c <__aeabi_dcmpun>
 8119180:	b140      	cbz	r0, 8119194 <_printf_float+0xf0>
 8119182:	464b      	mov	r3, r9
 8119184:	2b00      	cmp	r3, #0
 8119186:	bfbc      	itt	lt
 8119188:	232d      	movlt	r3, #45	; 0x2d
 811918a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 811918e:	487f      	ldr	r0, [pc, #508]	; (811938c <_printf_float+0x2e8>)
 8119190:	4b7f      	ldr	r3, [pc, #508]	; (8119390 <_printf_float+0x2ec>)
 8119192:	e7d1      	b.n	8119138 <_printf_float+0x94>
 8119194:	6863      	ldr	r3, [r4, #4]
 8119196:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 811919a:	9206      	str	r2, [sp, #24]
 811919c:	1c5a      	adds	r2, r3, #1
 811919e:	d13f      	bne.n	8119220 <_printf_float+0x17c>
 81191a0:	2306      	movs	r3, #6
 81191a2:	6063      	str	r3, [r4, #4]
 81191a4:	9b05      	ldr	r3, [sp, #20]
 81191a6:	6861      	ldr	r1, [r4, #4]
 81191a8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 81191ac:	2300      	movs	r3, #0
 81191ae:	9303      	str	r3, [sp, #12]
 81191b0:	ab0a      	add	r3, sp, #40	; 0x28
 81191b2:	e9cd b301 	strd	fp, r3, [sp, #4]
 81191b6:	ab09      	add	r3, sp, #36	; 0x24
 81191b8:	ec49 8b10 	vmov	d0, r8, r9
 81191bc:	9300      	str	r3, [sp, #0]
 81191be:	6022      	str	r2, [r4, #0]
 81191c0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 81191c4:	4628      	mov	r0, r5
 81191c6:	f7ff fecd 	bl	8118f64 <__cvt>
 81191ca:	9b06      	ldr	r3, [sp, #24]
 81191cc:	9909      	ldr	r1, [sp, #36]	; 0x24
 81191ce:	2b47      	cmp	r3, #71	; 0x47
 81191d0:	4680      	mov	r8, r0
 81191d2:	d108      	bne.n	81191e6 <_printf_float+0x142>
 81191d4:	1cc8      	adds	r0, r1, #3
 81191d6:	db02      	blt.n	81191de <_printf_float+0x13a>
 81191d8:	6863      	ldr	r3, [r4, #4]
 81191da:	4299      	cmp	r1, r3
 81191dc:	dd41      	ble.n	8119262 <_printf_float+0x1be>
 81191de:	f1ab 0b02 	sub.w	fp, fp, #2
 81191e2:	fa5f fb8b 	uxtb.w	fp, fp
 81191e6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 81191ea:	d820      	bhi.n	811922e <_printf_float+0x18a>
 81191ec:	3901      	subs	r1, #1
 81191ee:	465a      	mov	r2, fp
 81191f0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 81191f4:	9109      	str	r1, [sp, #36]	; 0x24
 81191f6:	f7ff ff17 	bl	8119028 <__exponent>
 81191fa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 81191fc:	1813      	adds	r3, r2, r0
 81191fe:	2a01      	cmp	r2, #1
 8119200:	4681      	mov	r9, r0
 8119202:	6123      	str	r3, [r4, #16]
 8119204:	dc02      	bgt.n	811920c <_printf_float+0x168>
 8119206:	6822      	ldr	r2, [r4, #0]
 8119208:	07d2      	lsls	r2, r2, #31
 811920a:	d501      	bpl.n	8119210 <_printf_float+0x16c>
 811920c:	3301      	adds	r3, #1
 811920e:	6123      	str	r3, [r4, #16]
 8119210:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8119214:	2b00      	cmp	r3, #0
 8119216:	d09c      	beq.n	8119152 <_printf_float+0xae>
 8119218:	232d      	movs	r3, #45	; 0x2d
 811921a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 811921e:	e798      	b.n	8119152 <_printf_float+0xae>
 8119220:	9a06      	ldr	r2, [sp, #24]
 8119222:	2a47      	cmp	r2, #71	; 0x47
 8119224:	d1be      	bne.n	81191a4 <_printf_float+0x100>
 8119226:	2b00      	cmp	r3, #0
 8119228:	d1bc      	bne.n	81191a4 <_printf_float+0x100>
 811922a:	2301      	movs	r3, #1
 811922c:	e7b9      	b.n	81191a2 <_printf_float+0xfe>
 811922e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8119232:	d118      	bne.n	8119266 <_printf_float+0x1c2>
 8119234:	2900      	cmp	r1, #0
 8119236:	6863      	ldr	r3, [r4, #4]
 8119238:	dd0b      	ble.n	8119252 <_printf_float+0x1ae>
 811923a:	6121      	str	r1, [r4, #16]
 811923c:	b913      	cbnz	r3, 8119244 <_printf_float+0x1a0>
 811923e:	6822      	ldr	r2, [r4, #0]
 8119240:	07d0      	lsls	r0, r2, #31
 8119242:	d502      	bpl.n	811924a <_printf_float+0x1a6>
 8119244:	3301      	adds	r3, #1
 8119246:	440b      	add	r3, r1
 8119248:	6123      	str	r3, [r4, #16]
 811924a:	65a1      	str	r1, [r4, #88]	; 0x58
 811924c:	f04f 0900 	mov.w	r9, #0
 8119250:	e7de      	b.n	8119210 <_printf_float+0x16c>
 8119252:	b913      	cbnz	r3, 811925a <_printf_float+0x1b6>
 8119254:	6822      	ldr	r2, [r4, #0]
 8119256:	07d2      	lsls	r2, r2, #31
 8119258:	d501      	bpl.n	811925e <_printf_float+0x1ba>
 811925a:	3302      	adds	r3, #2
 811925c:	e7f4      	b.n	8119248 <_printf_float+0x1a4>
 811925e:	2301      	movs	r3, #1
 8119260:	e7f2      	b.n	8119248 <_printf_float+0x1a4>
 8119262:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8119266:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8119268:	4299      	cmp	r1, r3
 811926a:	db05      	blt.n	8119278 <_printf_float+0x1d4>
 811926c:	6823      	ldr	r3, [r4, #0]
 811926e:	6121      	str	r1, [r4, #16]
 8119270:	07d8      	lsls	r0, r3, #31
 8119272:	d5ea      	bpl.n	811924a <_printf_float+0x1a6>
 8119274:	1c4b      	adds	r3, r1, #1
 8119276:	e7e7      	b.n	8119248 <_printf_float+0x1a4>
 8119278:	2900      	cmp	r1, #0
 811927a:	bfd4      	ite	le
 811927c:	f1c1 0202 	rsble	r2, r1, #2
 8119280:	2201      	movgt	r2, #1
 8119282:	4413      	add	r3, r2
 8119284:	e7e0      	b.n	8119248 <_printf_float+0x1a4>
 8119286:	6823      	ldr	r3, [r4, #0]
 8119288:	055a      	lsls	r2, r3, #21
 811928a:	d407      	bmi.n	811929c <_printf_float+0x1f8>
 811928c:	6923      	ldr	r3, [r4, #16]
 811928e:	4642      	mov	r2, r8
 8119290:	4631      	mov	r1, r6
 8119292:	4628      	mov	r0, r5
 8119294:	47b8      	blx	r7
 8119296:	3001      	adds	r0, #1
 8119298:	d12c      	bne.n	81192f4 <_printf_float+0x250>
 811929a:	e764      	b.n	8119166 <_printf_float+0xc2>
 811929c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 81192a0:	f240 80e0 	bls.w	8119464 <_printf_float+0x3c0>
 81192a4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 81192a8:	2200      	movs	r2, #0
 81192aa:	2300      	movs	r3, #0
 81192ac:	f7e7 fc94 	bl	8100bd8 <__aeabi_dcmpeq>
 81192b0:	2800      	cmp	r0, #0
 81192b2:	d034      	beq.n	811931e <_printf_float+0x27a>
 81192b4:	4a37      	ldr	r2, [pc, #220]	; (8119394 <_printf_float+0x2f0>)
 81192b6:	2301      	movs	r3, #1
 81192b8:	4631      	mov	r1, r6
 81192ba:	4628      	mov	r0, r5
 81192bc:	47b8      	blx	r7
 81192be:	3001      	adds	r0, #1
 81192c0:	f43f af51 	beq.w	8119166 <_printf_float+0xc2>
 81192c4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 81192c8:	429a      	cmp	r2, r3
 81192ca:	db02      	blt.n	81192d2 <_printf_float+0x22e>
 81192cc:	6823      	ldr	r3, [r4, #0]
 81192ce:	07d8      	lsls	r0, r3, #31
 81192d0:	d510      	bpl.n	81192f4 <_printf_float+0x250>
 81192d2:	ee18 3a10 	vmov	r3, s16
 81192d6:	4652      	mov	r2, sl
 81192d8:	4631      	mov	r1, r6
 81192da:	4628      	mov	r0, r5
 81192dc:	47b8      	blx	r7
 81192de:	3001      	adds	r0, #1
 81192e0:	f43f af41 	beq.w	8119166 <_printf_float+0xc2>
 81192e4:	f04f 0800 	mov.w	r8, #0
 81192e8:	f104 091a 	add.w	r9, r4, #26
 81192ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 81192ee:	3b01      	subs	r3, #1
 81192f0:	4543      	cmp	r3, r8
 81192f2:	dc09      	bgt.n	8119308 <_printf_float+0x264>
 81192f4:	6823      	ldr	r3, [r4, #0]
 81192f6:	079b      	lsls	r3, r3, #30
 81192f8:	f100 8105 	bmi.w	8119506 <_printf_float+0x462>
 81192fc:	68e0      	ldr	r0, [r4, #12]
 81192fe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8119300:	4298      	cmp	r0, r3
 8119302:	bfb8      	it	lt
 8119304:	4618      	movlt	r0, r3
 8119306:	e730      	b.n	811916a <_printf_float+0xc6>
 8119308:	2301      	movs	r3, #1
 811930a:	464a      	mov	r2, r9
 811930c:	4631      	mov	r1, r6
 811930e:	4628      	mov	r0, r5
 8119310:	47b8      	blx	r7
 8119312:	3001      	adds	r0, #1
 8119314:	f43f af27 	beq.w	8119166 <_printf_float+0xc2>
 8119318:	f108 0801 	add.w	r8, r8, #1
 811931c:	e7e6      	b.n	81192ec <_printf_float+0x248>
 811931e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8119320:	2b00      	cmp	r3, #0
 8119322:	dc39      	bgt.n	8119398 <_printf_float+0x2f4>
 8119324:	4a1b      	ldr	r2, [pc, #108]	; (8119394 <_printf_float+0x2f0>)
 8119326:	2301      	movs	r3, #1
 8119328:	4631      	mov	r1, r6
 811932a:	4628      	mov	r0, r5
 811932c:	47b8      	blx	r7
 811932e:	3001      	adds	r0, #1
 8119330:	f43f af19 	beq.w	8119166 <_printf_float+0xc2>
 8119334:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8119338:	4313      	orrs	r3, r2
 811933a:	d102      	bne.n	8119342 <_printf_float+0x29e>
 811933c:	6823      	ldr	r3, [r4, #0]
 811933e:	07d9      	lsls	r1, r3, #31
 8119340:	d5d8      	bpl.n	81192f4 <_printf_float+0x250>
 8119342:	ee18 3a10 	vmov	r3, s16
 8119346:	4652      	mov	r2, sl
 8119348:	4631      	mov	r1, r6
 811934a:	4628      	mov	r0, r5
 811934c:	47b8      	blx	r7
 811934e:	3001      	adds	r0, #1
 8119350:	f43f af09 	beq.w	8119166 <_printf_float+0xc2>
 8119354:	f04f 0900 	mov.w	r9, #0
 8119358:	f104 0a1a 	add.w	sl, r4, #26
 811935c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 811935e:	425b      	negs	r3, r3
 8119360:	454b      	cmp	r3, r9
 8119362:	dc01      	bgt.n	8119368 <_printf_float+0x2c4>
 8119364:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8119366:	e792      	b.n	811928e <_printf_float+0x1ea>
 8119368:	2301      	movs	r3, #1
 811936a:	4652      	mov	r2, sl
 811936c:	4631      	mov	r1, r6
 811936e:	4628      	mov	r0, r5
 8119370:	47b8      	blx	r7
 8119372:	3001      	adds	r0, #1
 8119374:	f43f aef7 	beq.w	8119166 <_printf_float+0xc2>
 8119378:	f109 0901 	add.w	r9, r9, #1
 811937c:	e7ee      	b.n	811935c <_printf_float+0x2b8>
 811937e:	bf00      	nop
 8119380:	7fefffff 	.word	0x7fefffff
 8119384:	0811ba6c 	.word	0x0811ba6c
 8119388:	0811ba70 	.word	0x0811ba70
 811938c:	0811ba78 	.word	0x0811ba78
 8119390:	0811ba74 	.word	0x0811ba74
 8119394:	0811ba7c 	.word	0x0811ba7c
 8119398:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 811939a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 811939c:	429a      	cmp	r2, r3
 811939e:	bfa8      	it	ge
 81193a0:	461a      	movge	r2, r3
 81193a2:	2a00      	cmp	r2, #0
 81193a4:	4691      	mov	r9, r2
 81193a6:	dc37      	bgt.n	8119418 <_printf_float+0x374>
 81193a8:	f04f 0b00 	mov.w	fp, #0
 81193ac:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 81193b0:	f104 021a 	add.w	r2, r4, #26
 81193b4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 81193b6:	9305      	str	r3, [sp, #20]
 81193b8:	eba3 0309 	sub.w	r3, r3, r9
 81193bc:	455b      	cmp	r3, fp
 81193be:	dc33      	bgt.n	8119428 <_printf_float+0x384>
 81193c0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 81193c4:	429a      	cmp	r2, r3
 81193c6:	db3b      	blt.n	8119440 <_printf_float+0x39c>
 81193c8:	6823      	ldr	r3, [r4, #0]
 81193ca:	07da      	lsls	r2, r3, #31
 81193cc:	d438      	bmi.n	8119440 <_printf_float+0x39c>
 81193ce:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 81193d0:	9b05      	ldr	r3, [sp, #20]
 81193d2:	9909      	ldr	r1, [sp, #36]	; 0x24
 81193d4:	1ad3      	subs	r3, r2, r3
 81193d6:	eba2 0901 	sub.w	r9, r2, r1
 81193da:	4599      	cmp	r9, r3
 81193dc:	bfa8      	it	ge
 81193de:	4699      	movge	r9, r3
 81193e0:	f1b9 0f00 	cmp.w	r9, #0
 81193e4:	dc35      	bgt.n	8119452 <_printf_float+0x3ae>
 81193e6:	f04f 0800 	mov.w	r8, #0
 81193ea:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 81193ee:	f104 0a1a 	add.w	sl, r4, #26
 81193f2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 81193f6:	1a9b      	subs	r3, r3, r2
 81193f8:	eba3 0309 	sub.w	r3, r3, r9
 81193fc:	4543      	cmp	r3, r8
 81193fe:	f77f af79 	ble.w	81192f4 <_printf_float+0x250>
 8119402:	2301      	movs	r3, #1
 8119404:	4652      	mov	r2, sl
 8119406:	4631      	mov	r1, r6
 8119408:	4628      	mov	r0, r5
 811940a:	47b8      	blx	r7
 811940c:	3001      	adds	r0, #1
 811940e:	f43f aeaa 	beq.w	8119166 <_printf_float+0xc2>
 8119412:	f108 0801 	add.w	r8, r8, #1
 8119416:	e7ec      	b.n	81193f2 <_printf_float+0x34e>
 8119418:	4613      	mov	r3, r2
 811941a:	4631      	mov	r1, r6
 811941c:	4642      	mov	r2, r8
 811941e:	4628      	mov	r0, r5
 8119420:	47b8      	blx	r7
 8119422:	3001      	adds	r0, #1
 8119424:	d1c0      	bne.n	81193a8 <_printf_float+0x304>
 8119426:	e69e      	b.n	8119166 <_printf_float+0xc2>
 8119428:	2301      	movs	r3, #1
 811942a:	4631      	mov	r1, r6
 811942c:	4628      	mov	r0, r5
 811942e:	9205      	str	r2, [sp, #20]
 8119430:	47b8      	blx	r7
 8119432:	3001      	adds	r0, #1
 8119434:	f43f ae97 	beq.w	8119166 <_printf_float+0xc2>
 8119438:	9a05      	ldr	r2, [sp, #20]
 811943a:	f10b 0b01 	add.w	fp, fp, #1
 811943e:	e7b9      	b.n	81193b4 <_printf_float+0x310>
 8119440:	ee18 3a10 	vmov	r3, s16
 8119444:	4652      	mov	r2, sl
 8119446:	4631      	mov	r1, r6
 8119448:	4628      	mov	r0, r5
 811944a:	47b8      	blx	r7
 811944c:	3001      	adds	r0, #1
 811944e:	d1be      	bne.n	81193ce <_printf_float+0x32a>
 8119450:	e689      	b.n	8119166 <_printf_float+0xc2>
 8119452:	9a05      	ldr	r2, [sp, #20]
 8119454:	464b      	mov	r3, r9
 8119456:	4442      	add	r2, r8
 8119458:	4631      	mov	r1, r6
 811945a:	4628      	mov	r0, r5
 811945c:	47b8      	blx	r7
 811945e:	3001      	adds	r0, #1
 8119460:	d1c1      	bne.n	81193e6 <_printf_float+0x342>
 8119462:	e680      	b.n	8119166 <_printf_float+0xc2>
 8119464:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8119466:	2a01      	cmp	r2, #1
 8119468:	dc01      	bgt.n	811946e <_printf_float+0x3ca>
 811946a:	07db      	lsls	r3, r3, #31
 811946c:	d538      	bpl.n	81194e0 <_printf_float+0x43c>
 811946e:	2301      	movs	r3, #1
 8119470:	4642      	mov	r2, r8
 8119472:	4631      	mov	r1, r6
 8119474:	4628      	mov	r0, r5
 8119476:	47b8      	blx	r7
 8119478:	3001      	adds	r0, #1
 811947a:	f43f ae74 	beq.w	8119166 <_printf_float+0xc2>
 811947e:	ee18 3a10 	vmov	r3, s16
 8119482:	4652      	mov	r2, sl
 8119484:	4631      	mov	r1, r6
 8119486:	4628      	mov	r0, r5
 8119488:	47b8      	blx	r7
 811948a:	3001      	adds	r0, #1
 811948c:	f43f ae6b 	beq.w	8119166 <_printf_float+0xc2>
 8119490:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8119494:	2200      	movs	r2, #0
 8119496:	2300      	movs	r3, #0
 8119498:	f7e7 fb9e 	bl	8100bd8 <__aeabi_dcmpeq>
 811949c:	b9d8      	cbnz	r0, 81194d6 <_printf_float+0x432>
 811949e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 81194a0:	f108 0201 	add.w	r2, r8, #1
 81194a4:	3b01      	subs	r3, #1
 81194a6:	4631      	mov	r1, r6
 81194a8:	4628      	mov	r0, r5
 81194aa:	47b8      	blx	r7
 81194ac:	3001      	adds	r0, #1
 81194ae:	d10e      	bne.n	81194ce <_printf_float+0x42a>
 81194b0:	e659      	b.n	8119166 <_printf_float+0xc2>
 81194b2:	2301      	movs	r3, #1
 81194b4:	4652      	mov	r2, sl
 81194b6:	4631      	mov	r1, r6
 81194b8:	4628      	mov	r0, r5
 81194ba:	47b8      	blx	r7
 81194bc:	3001      	adds	r0, #1
 81194be:	f43f ae52 	beq.w	8119166 <_printf_float+0xc2>
 81194c2:	f108 0801 	add.w	r8, r8, #1
 81194c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 81194c8:	3b01      	subs	r3, #1
 81194ca:	4543      	cmp	r3, r8
 81194cc:	dcf1      	bgt.n	81194b2 <_printf_float+0x40e>
 81194ce:	464b      	mov	r3, r9
 81194d0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 81194d4:	e6dc      	b.n	8119290 <_printf_float+0x1ec>
 81194d6:	f04f 0800 	mov.w	r8, #0
 81194da:	f104 0a1a 	add.w	sl, r4, #26
 81194de:	e7f2      	b.n	81194c6 <_printf_float+0x422>
 81194e0:	2301      	movs	r3, #1
 81194e2:	4642      	mov	r2, r8
 81194e4:	e7df      	b.n	81194a6 <_printf_float+0x402>
 81194e6:	2301      	movs	r3, #1
 81194e8:	464a      	mov	r2, r9
 81194ea:	4631      	mov	r1, r6
 81194ec:	4628      	mov	r0, r5
 81194ee:	47b8      	blx	r7
 81194f0:	3001      	adds	r0, #1
 81194f2:	f43f ae38 	beq.w	8119166 <_printf_float+0xc2>
 81194f6:	f108 0801 	add.w	r8, r8, #1
 81194fa:	68e3      	ldr	r3, [r4, #12]
 81194fc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 81194fe:	1a5b      	subs	r3, r3, r1
 8119500:	4543      	cmp	r3, r8
 8119502:	dcf0      	bgt.n	81194e6 <_printf_float+0x442>
 8119504:	e6fa      	b.n	81192fc <_printf_float+0x258>
 8119506:	f04f 0800 	mov.w	r8, #0
 811950a:	f104 0919 	add.w	r9, r4, #25
 811950e:	e7f4      	b.n	81194fa <_printf_float+0x456>

08119510 <_printf_common>:
 8119510:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8119514:	4616      	mov	r6, r2
 8119516:	4699      	mov	r9, r3
 8119518:	688a      	ldr	r2, [r1, #8]
 811951a:	690b      	ldr	r3, [r1, #16]
 811951c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8119520:	4293      	cmp	r3, r2
 8119522:	bfb8      	it	lt
 8119524:	4613      	movlt	r3, r2
 8119526:	6033      	str	r3, [r6, #0]
 8119528:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 811952c:	4607      	mov	r7, r0
 811952e:	460c      	mov	r4, r1
 8119530:	b10a      	cbz	r2, 8119536 <_printf_common+0x26>
 8119532:	3301      	adds	r3, #1
 8119534:	6033      	str	r3, [r6, #0]
 8119536:	6823      	ldr	r3, [r4, #0]
 8119538:	0699      	lsls	r1, r3, #26
 811953a:	bf42      	ittt	mi
 811953c:	6833      	ldrmi	r3, [r6, #0]
 811953e:	3302      	addmi	r3, #2
 8119540:	6033      	strmi	r3, [r6, #0]
 8119542:	6825      	ldr	r5, [r4, #0]
 8119544:	f015 0506 	ands.w	r5, r5, #6
 8119548:	d106      	bne.n	8119558 <_printf_common+0x48>
 811954a:	f104 0a19 	add.w	sl, r4, #25
 811954e:	68e3      	ldr	r3, [r4, #12]
 8119550:	6832      	ldr	r2, [r6, #0]
 8119552:	1a9b      	subs	r3, r3, r2
 8119554:	42ab      	cmp	r3, r5
 8119556:	dc26      	bgt.n	81195a6 <_printf_common+0x96>
 8119558:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 811955c:	1e13      	subs	r3, r2, #0
 811955e:	6822      	ldr	r2, [r4, #0]
 8119560:	bf18      	it	ne
 8119562:	2301      	movne	r3, #1
 8119564:	0692      	lsls	r2, r2, #26
 8119566:	d42b      	bmi.n	81195c0 <_printf_common+0xb0>
 8119568:	f104 0243 	add.w	r2, r4, #67	; 0x43
 811956c:	4649      	mov	r1, r9
 811956e:	4638      	mov	r0, r7
 8119570:	47c0      	blx	r8
 8119572:	3001      	adds	r0, #1
 8119574:	d01e      	beq.n	81195b4 <_printf_common+0xa4>
 8119576:	6823      	ldr	r3, [r4, #0]
 8119578:	68e5      	ldr	r5, [r4, #12]
 811957a:	6832      	ldr	r2, [r6, #0]
 811957c:	f003 0306 	and.w	r3, r3, #6
 8119580:	2b04      	cmp	r3, #4
 8119582:	bf08      	it	eq
 8119584:	1aad      	subeq	r5, r5, r2
 8119586:	68a3      	ldr	r3, [r4, #8]
 8119588:	6922      	ldr	r2, [r4, #16]
 811958a:	bf0c      	ite	eq
 811958c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8119590:	2500      	movne	r5, #0
 8119592:	4293      	cmp	r3, r2
 8119594:	bfc4      	itt	gt
 8119596:	1a9b      	subgt	r3, r3, r2
 8119598:	18ed      	addgt	r5, r5, r3
 811959a:	2600      	movs	r6, #0
 811959c:	341a      	adds	r4, #26
 811959e:	42b5      	cmp	r5, r6
 81195a0:	d11a      	bne.n	81195d8 <_printf_common+0xc8>
 81195a2:	2000      	movs	r0, #0
 81195a4:	e008      	b.n	81195b8 <_printf_common+0xa8>
 81195a6:	2301      	movs	r3, #1
 81195a8:	4652      	mov	r2, sl
 81195aa:	4649      	mov	r1, r9
 81195ac:	4638      	mov	r0, r7
 81195ae:	47c0      	blx	r8
 81195b0:	3001      	adds	r0, #1
 81195b2:	d103      	bne.n	81195bc <_printf_common+0xac>
 81195b4:	f04f 30ff 	mov.w	r0, #4294967295
 81195b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 81195bc:	3501      	adds	r5, #1
 81195be:	e7c6      	b.n	811954e <_printf_common+0x3e>
 81195c0:	18e1      	adds	r1, r4, r3
 81195c2:	1c5a      	adds	r2, r3, #1
 81195c4:	2030      	movs	r0, #48	; 0x30
 81195c6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 81195ca:	4422      	add	r2, r4
 81195cc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 81195d0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 81195d4:	3302      	adds	r3, #2
 81195d6:	e7c7      	b.n	8119568 <_printf_common+0x58>
 81195d8:	2301      	movs	r3, #1
 81195da:	4622      	mov	r2, r4
 81195dc:	4649      	mov	r1, r9
 81195de:	4638      	mov	r0, r7
 81195e0:	47c0      	blx	r8
 81195e2:	3001      	adds	r0, #1
 81195e4:	d0e6      	beq.n	81195b4 <_printf_common+0xa4>
 81195e6:	3601      	adds	r6, #1
 81195e8:	e7d9      	b.n	811959e <_printf_common+0x8e>
	...

081195ec <_printf_i>:
 81195ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 81195f0:	460c      	mov	r4, r1
 81195f2:	4691      	mov	r9, r2
 81195f4:	7e27      	ldrb	r7, [r4, #24]
 81195f6:	990c      	ldr	r1, [sp, #48]	; 0x30
 81195f8:	2f78      	cmp	r7, #120	; 0x78
 81195fa:	4680      	mov	r8, r0
 81195fc:	469a      	mov	sl, r3
 81195fe:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8119602:	d807      	bhi.n	8119614 <_printf_i+0x28>
 8119604:	2f62      	cmp	r7, #98	; 0x62
 8119606:	d80a      	bhi.n	811961e <_printf_i+0x32>
 8119608:	2f00      	cmp	r7, #0
 811960a:	f000 80d8 	beq.w	81197be <_printf_i+0x1d2>
 811960e:	2f58      	cmp	r7, #88	; 0x58
 8119610:	f000 80a3 	beq.w	811975a <_printf_i+0x16e>
 8119614:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8119618:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 811961c:	e03a      	b.n	8119694 <_printf_i+0xa8>
 811961e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8119622:	2b15      	cmp	r3, #21
 8119624:	d8f6      	bhi.n	8119614 <_printf_i+0x28>
 8119626:	a001      	add	r0, pc, #4	; (adr r0, 811962c <_printf_i+0x40>)
 8119628:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 811962c:	08119685 	.word	0x08119685
 8119630:	08119699 	.word	0x08119699
 8119634:	08119615 	.word	0x08119615
 8119638:	08119615 	.word	0x08119615
 811963c:	08119615 	.word	0x08119615
 8119640:	08119615 	.word	0x08119615
 8119644:	08119699 	.word	0x08119699
 8119648:	08119615 	.word	0x08119615
 811964c:	08119615 	.word	0x08119615
 8119650:	08119615 	.word	0x08119615
 8119654:	08119615 	.word	0x08119615
 8119658:	081197a5 	.word	0x081197a5
 811965c:	081196c9 	.word	0x081196c9
 8119660:	08119787 	.word	0x08119787
 8119664:	08119615 	.word	0x08119615
 8119668:	08119615 	.word	0x08119615
 811966c:	081197c7 	.word	0x081197c7
 8119670:	08119615 	.word	0x08119615
 8119674:	081196c9 	.word	0x081196c9
 8119678:	08119615 	.word	0x08119615
 811967c:	08119615 	.word	0x08119615
 8119680:	0811978f 	.word	0x0811978f
 8119684:	680b      	ldr	r3, [r1, #0]
 8119686:	1d1a      	adds	r2, r3, #4
 8119688:	681b      	ldr	r3, [r3, #0]
 811968a:	600a      	str	r2, [r1, #0]
 811968c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8119690:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8119694:	2301      	movs	r3, #1
 8119696:	e0a3      	b.n	81197e0 <_printf_i+0x1f4>
 8119698:	6825      	ldr	r5, [r4, #0]
 811969a:	6808      	ldr	r0, [r1, #0]
 811969c:	062e      	lsls	r6, r5, #24
 811969e:	f100 0304 	add.w	r3, r0, #4
 81196a2:	d50a      	bpl.n	81196ba <_printf_i+0xce>
 81196a4:	6805      	ldr	r5, [r0, #0]
 81196a6:	600b      	str	r3, [r1, #0]
 81196a8:	2d00      	cmp	r5, #0
 81196aa:	da03      	bge.n	81196b4 <_printf_i+0xc8>
 81196ac:	232d      	movs	r3, #45	; 0x2d
 81196ae:	426d      	negs	r5, r5
 81196b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 81196b4:	485e      	ldr	r0, [pc, #376]	; (8119830 <_printf_i+0x244>)
 81196b6:	230a      	movs	r3, #10
 81196b8:	e019      	b.n	81196ee <_printf_i+0x102>
 81196ba:	f015 0f40 	tst.w	r5, #64	; 0x40
 81196be:	6805      	ldr	r5, [r0, #0]
 81196c0:	600b      	str	r3, [r1, #0]
 81196c2:	bf18      	it	ne
 81196c4:	b22d      	sxthne	r5, r5
 81196c6:	e7ef      	b.n	81196a8 <_printf_i+0xbc>
 81196c8:	680b      	ldr	r3, [r1, #0]
 81196ca:	6825      	ldr	r5, [r4, #0]
 81196cc:	1d18      	adds	r0, r3, #4
 81196ce:	6008      	str	r0, [r1, #0]
 81196d0:	0628      	lsls	r0, r5, #24
 81196d2:	d501      	bpl.n	81196d8 <_printf_i+0xec>
 81196d4:	681d      	ldr	r5, [r3, #0]
 81196d6:	e002      	b.n	81196de <_printf_i+0xf2>
 81196d8:	0669      	lsls	r1, r5, #25
 81196da:	d5fb      	bpl.n	81196d4 <_printf_i+0xe8>
 81196dc:	881d      	ldrh	r5, [r3, #0]
 81196de:	4854      	ldr	r0, [pc, #336]	; (8119830 <_printf_i+0x244>)
 81196e0:	2f6f      	cmp	r7, #111	; 0x6f
 81196e2:	bf0c      	ite	eq
 81196e4:	2308      	moveq	r3, #8
 81196e6:	230a      	movne	r3, #10
 81196e8:	2100      	movs	r1, #0
 81196ea:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 81196ee:	6866      	ldr	r6, [r4, #4]
 81196f0:	60a6      	str	r6, [r4, #8]
 81196f2:	2e00      	cmp	r6, #0
 81196f4:	bfa2      	ittt	ge
 81196f6:	6821      	ldrge	r1, [r4, #0]
 81196f8:	f021 0104 	bicge.w	r1, r1, #4
 81196fc:	6021      	strge	r1, [r4, #0]
 81196fe:	b90d      	cbnz	r5, 8119704 <_printf_i+0x118>
 8119700:	2e00      	cmp	r6, #0
 8119702:	d04d      	beq.n	81197a0 <_printf_i+0x1b4>
 8119704:	4616      	mov	r6, r2
 8119706:	fbb5 f1f3 	udiv	r1, r5, r3
 811970a:	fb03 5711 	mls	r7, r3, r1, r5
 811970e:	5dc7      	ldrb	r7, [r0, r7]
 8119710:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8119714:	462f      	mov	r7, r5
 8119716:	42bb      	cmp	r3, r7
 8119718:	460d      	mov	r5, r1
 811971a:	d9f4      	bls.n	8119706 <_printf_i+0x11a>
 811971c:	2b08      	cmp	r3, #8
 811971e:	d10b      	bne.n	8119738 <_printf_i+0x14c>
 8119720:	6823      	ldr	r3, [r4, #0]
 8119722:	07df      	lsls	r7, r3, #31
 8119724:	d508      	bpl.n	8119738 <_printf_i+0x14c>
 8119726:	6923      	ldr	r3, [r4, #16]
 8119728:	6861      	ldr	r1, [r4, #4]
 811972a:	4299      	cmp	r1, r3
 811972c:	bfde      	ittt	le
 811972e:	2330      	movle	r3, #48	; 0x30
 8119730:	f806 3c01 	strble.w	r3, [r6, #-1]
 8119734:	f106 36ff 	addle.w	r6, r6, #4294967295
 8119738:	1b92      	subs	r2, r2, r6
 811973a:	6122      	str	r2, [r4, #16]
 811973c:	f8cd a000 	str.w	sl, [sp]
 8119740:	464b      	mov	r3, r9
 8119742:	aa03      	add	r2, sp, #12
 8119744:	4621      	mov	r1, r4
 8119746:	4640      	mov	r0, r8
 8119748:	f7ff fee2 	bl	8119510 <_printf_common>
 811974c:	3001      	adds	r0, #1
 811974e:	d14c      	bne.n	81197ea <_printf_i+0x1fe>
 8119750:	f04f 30ff 	mov.w	r0, #4294967295
 8119754:	b004      	add	sp, #16
 8119756:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 811975a:	4835      	ldr	r0, [pc, #212]	; (8119830 <_printf_i+0x244>)
 811975c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8119760:	6823      	ldr	r3, [r4, #0]
 8119762:	680e      	ldr	r6, [r1, #0]
 8119764:	061f      	lsls	r7, r3, #24
 8119766:	f856 5b04 	ldr.w	r5, [r6], #4
 811976a:	600e      	str	r6, [r1, #0]
 811976c:	d514      	bpl.n	8119798 <_printf_i+0x1ac>
 811976e:	07d9      	lsls	r1, r3, #31
 8119770:	bf44      	itt	mi
 8119772:	f043 0320 	orrmi.w	r3, r3, #32
 8119776:	6023      	strmi	r3, [r4, #0]
 8119778:	b91d      	cbnz	r5, 8119782 <_printf_i+0x196>
 811977a:	6823      	ldr	r3, [r4, #0]
 811977c:	f023 0320 	bic.w	r3, r3, #32
 8119780:	6023      	str	r3, [r4, #0]
 8119782:	2310      	movs	r3, #16
 8119784:	e7b0      	b.n	81196e8 <_printf_i+0xfc>
 8119786:	6823      	ldr	r3, [r4, #0]
 8119788:	f043 0320 	orr.w	r3, r3, #32
 811978c:	6023      	str	r3, [r4, #0]
 811978e:	2378      	movs	r3, #120	; 0x78
 8119790:	4828      	ldr	r0, [pc, #160]	; (8119834 <_printf_i+0x248>)
 8119792:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8119796:	e7e3      	b.n	8119760 <_printf_i+0x174>
 8119798:	065e      	lsls	r6, r3, #25
 811979a:	bf48      	it	mi
 811979c:	b2ad      	uxthmi	r5, r5
 811979e:	e7e6      	b.n	811976e <_printf_i+0x182>
 81197a0:	4616      	mov	r6, r2
 81197a2:	e7bb      	b.n	811971c <_printf_i+0x130>
 81197a4:	680b      	ldr	r3, [r1, #0]
 81197a6:	6826      	ldr	r6, [r4, #0]
 81197a8:	6960      	ldr	r0, [r4, #20]
 81197aa:	1d1d      	adds	r5, r3, #4
 81197ac:	600d      	str	r5, [r1, #0]
 81197ae:	0635      	lsls	r5, r6, #24
 81197b0:	681b      	ldr	r3, [r3, #0]
 81197b2:	d501      	bpl.n	81197b8 <_printf_i+0x1cc>
 81197b4:	6018      	str	r0, [r3, #0]
 81197b6:	e002      	b.n	81197be <_printf_i+0x1d2>
 81197b8:	0671      	lsls	r1, r6, #25
 81197ba:	d5fb      	bpl.n	81197b4 <_printf_i+0x1c8>
 81197bc:	8018      	strh	r0, [r3, #0]
 81197be:	2300      	movs	r3, #0
 81197c0:	6123      	str	r3, [r4, #16]
 81197c2:	4616      	mov	r6, r2
 81197c4:	e7ba      	b.n	811973c <_printf_i+0x150>
 81197c6:	680b      	ldr	r3, [r1, #0]
 81197c8:	1d1a      	adds	r2, r3, #4
 81197ca:	600a      	str	r2, [r1, #0]
 81197cc:	681e      	ldr	r6, [r3, #0]
 81197ce:	6862      	ldr	r2, [r4, #4]
 81197d0:	2100      	movs	r1, #0
 81197d2:	4630      	mov	r0, r6
 81197d4:	f7e6 fd8c 	bl	81002f0 <memchr>
 81197d8:	b108      	cbz	r0, 81197de <_printf_i+0x1f2>
 81197da:	1b80      	subs	r0, r0, r6
 81197dc:	6060      	str	r0, [r4, #4]
 81197de:	6863      	ldr	r3, [r4, #4]
 81197e0:	6123      	str	r3, [r4, #16]
 81197e2:	2300      	movs	r3, #0
 81197e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 81197e8:	e7a8      	b.n	811973c <_printf_i+0x150>
 81197ea:	6923      	ldr	r3, [r4, #16]
 81197ec:	4632      	mov	r2, r6
 81197ee:	4649      	mov	r1, r9
 81197f0:	4640      	mov	r0, r8
 81197f2:	47d0      	blx	sl
 81197f4:	3001      	adds	r0, #1
 81197f6:	d0ab      	beq.n	8119750 <_printf_i+0x164>
 81197f8:	6823      	ldr	r3, [r4, #0]
 81197fa:	079b      	lsls	r3, r3, #30
 81197fc:	d413      	bmi.n	8119826 <_printf_i+0x23a>
 81197fe:	68e0      	ldr	r0, [r4, #12]
 8119800:	9b03      	ldr	r3, [sp, #12]
 8119802:	4298      	cmp	r0, r3
 8119804:	bfb8      	it	lt
 8119806:	4618      	movlt	r0, r3
 8119808:	e7a4      	b.n	8119754 <_printf_i+0x168>
 811980a:	2301      	movs	r3, #1
 811980c:	4632      	mov	r2, r6
 811980e:	4649      	mov	r1, r9
 8119810:	4640      	mov	r0, r8
 8119812:	47d0      	blx	sl
 8119814:	3001      	adds	r0, #1
 8119816:	d09b      	beq.n	8119750 <_printf_i+0x164>
 8119818:	3501      	adds	r5, #1
 811981a:	68e3      	ldr	r3, [r4, #12]
 811981c:	9903      	ldr	r1, [sp, #12]
 811981e:	1a5b      	subs	r3, r3, r1
 8119820:	42ab      	cmp	r3, r5
 8119822:	dcf2      	bgt.n	811980a <_printf_i+0x21e>
 8119824:	e7eb      	b.n	81197fe <_printf_i+0x212>
 8119826:	2500      	movs	r5, #0
 8119828:	f104 0619 	add.w	r6, r4, #25
 811982c:	e7f5      	b.n	811981a <_printf_i+0x22e>
 811982e:	bf00      	nop
 8119830:	0811ba7e 	.word	0x0811ba7e
 8119834:	0811ba8f 	.word	0x0811ba8f

08119838 <quorem>:
 8119838:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 811983c:	6903      	ldr	r3, [r0, #16]
 811983e:	690c      	ldr	r4, [r1, #16]
 8119840:	42a3      	cmp	r3, r4
 8119842:	4607      	mov	r7, r0
 8119844:	f2c0 8081 	blt.w	811994a <quorem+0x112>
 8119848:	3c01      	subs	r4, #1
 811984a:	f101 0814 	add.w	r8, r1, #20
 811984e:	f100 0514 	add.w	r5, r0, #20
 8119852:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8119856:	9301      	str	r3, [sp, #4]
 8119858:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 811985c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8119860:	3301      	adds	r3, #1
 8119862:	429a      	cmp	r2, r3
 8119864:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8119868:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 811986c:	fbb2 f6f3 	udiv	r6, r2, r3
 8119870:	d331      	bcc.n	81198d6 <quorem+0x9e>
 8119872:	f04f 0e00 	mov.w	lr, #0
 8119876:	4640      	mov	r0, r8
 8119878:	46ac      	mov	ip, r5
 811987a:	46f2      	mov	sl, lr
 811987c:	f850 2b04 	ldr.w	r2, [r0], #4
 8119880:	b293      	uxth	r3, r2
 8119882:	fb06 e303 	mla	r3, r6, r3, lr
 8119886:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 811988a:	b29b      	uxth	r3, r3
 811988c:	ebaa 0303 	sub.w	r3, sl, r3
 8119890:	0c12      	lsrs	r2, r2, #16
 8119892:	f8dc a000 	ldr.w	sl, [ip]
 8119896:	fb06 e202 	mla	r2, r6, r2, lr
 811989a:	fa13 f38a 	uxtah	r3, r3, sl
 811989e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 81198a2:	fa1f fa82 	uxth.w	sl, r2
 81198a6:	f8dc 2000 	ldr.w	r2, [ip]
 81198aa:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 81198ae:	eb02 4223 	add.w	r2, r2, r3, asr #16
 81198b2:	b29b      	uxth	r3, r3
 81198b4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 81198b8:	4581      	cmp	r9, r0
 81198ba:	f84c 3b04 	str.w	r3, [ip], #4
 81198be:	ea4f 4a22 	mov.w	sl, r2, asr #16
 81198c2:	d2db      	bcs.n	811987c <quorem+0x44>
 81198c4:	f855 300b 	ldr.w	r3, [r5, fp]
 81198c8:	b92b      	cbnz	r3, 81198d6 <quorem+0x9e>
 81198ca:	9b01      	ldr	r3, [sp, #4]
 81198cc:	3b04      	subs	r3, #4
 81198ce:	429d      	cmp	r5, r3
 81198d0:	461a      	mov	r2, r3
 81198d2:	d32e      	bcc.n	8119932 <quorem+0xfa>
 81198d4:	613c      	str	r4, [r7, #16]
 81198d6:	4638      	mov	r0, r7
 81198d8:	f001 f8b0 	bl	811aa3c <__mcmp>
 81198dc:	2800      	cmp	r0, #0
 81198de:	db24      	blt.n	811992a <quorem+0xf2>
 81198e0:	3601      	adds	r6, #1
 81198e2:	4628      	mov	r0, r5
 81198e4:	f04f 0c00 	mov.w	ip, #0
 81198e8:	f858 2b04 	ldr.w	r2, [r8], #4
 81198ec:	f8d0 e000 	ldr.w	lr, [r0]
 81198f0:	b293      	uxth	r3, r2
 81198f2:	ebac 0303 	sub.w	r3, ip, r3
 81198f6:	0c12      	lsrs	r2, r2, #16
 81198f8:	fa13 f38e 	uxtah	r3, r3, lr
 81198fc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8119900:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8119904:	b29b      	uxth	r3, r3
 8119906:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 811990a:	45c1      	cmp	r9, r8
 811990c:	f840 3b04 	str.w	r3, [r0], #4
 8119910:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8119914:	d2e8      	bcs.n	81198e8 <quorem+0xb0>
 8119916:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 811991a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 811991e:	b922      	cbnz	r2, 811992a <quorem+0xf2>
 8119920:	3b04      	subs	r3, #4
 8119922:	429d      	cmp	r5, r3
 8119924:	461a      	mov	r2, r3
 8119926:	d30a      	bcc.n	811993e <quorem+0x106>
 8119928:	613c      	str	r4, [r7, #16]
 811992a:	4630      	mov	r0, r6
 811992c:	b003      	add	sp, #12
 811992e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8119932:	6812      	ldr	r2, [r2, #0]
 8119934:	3b04      	subs	r3, #4
 8119936:	2a00      	cmp	r2, #0
 8119938:	d1cc      	bne.n	81198d4 <quorem+0x9c>
 811993a:	3c01      	subs	r4, #1
 811993c:	e7c7      	b.n	81198ce <quorem+0x96>
 811993e:	6812      	ldr	r2, [r2, #0]
 8119940:	3b04      	subs	r3, #4
 8119942:	2a00      	cmp	r2, #0
 8119944:	d1f0      	bne.n	8119928 <quorem+0xf0>
 8119946:	3c01      	subs	r4, #1
 8119948:	e7eb      	b.n	8119922 <quorem+0xea>
 811994a:	2000      	movs	r0, #0
 811994c:	e7ee      	b.n	811992c <quorem+0xf4>
	...

08119950 <_dtoa_r>:
 8119950:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8119954:	ed2d 8b02 	vpush	{d8}
 8119958:	ec57 6b10 	vmov	r6, r7, d0
 811995c:	b095      	sub	sp, #84	; 0x54
 811995e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8119960:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8119964:	9105      	str	r1, [sp, #20]
 8119966:	e9cd 6702 	strd	r6, r7, [sp, #8]
 811996a:	4604      	mov	r4, r0
 811996c:	9209      	str	r2, [sp, #36]	; 0x24
 811996e:	930f      	str	r3, [sp, #60]	; 0x3c
 8119970:	b975      	cbnz	r5, 8119990 <_dtoa_r+0x40>
 8119972:	2010      	movs	r0, #16
 8119974:	f000 fddc 	bl	811a530 <malloc>
 8119978:	4602      	mov	r2, r0
 811997a:	6260      	str	r0, [r4, #36]	; 0x24
 811997c:	b920      	cbnz	r0, 8119988 <_dtoa_r+0x38>
 811997e:	4bb2      	ldr	r3, [pc, #712]	; (8119c48 <_dtoa_r+0x2f8>)
 8119980:	21ea      	movs	r1, #234	; 0xea
 8119982:	48b2      	ldr	r0, [pc, #712]	; (8119c4c <_dtoa_r+0x2fc>)
 8119984:	f001 fa24 	bl	811add0 <__assert_func>
 8119988:	e9c0 5501 	strd	r5, r5, [r0, #4]
 811998c:	6005      	str	r5, [r0, #0]
 811998e:	60c5      	str	r5, [r0, #12]
 8119990:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8119992:	6819      	ldr	r1, [r3, #0]
 8119994:	b151      	cbz	r1, 81199ac <_dtoa_r+0x5c>
 8119996:	685a      	ldr	r2, [r3, #4]
 8119998:	604a      	str	r2, [r1, #4]
 811999a:	2301      	movs	r3, #1
 811999c:	4093      	lsls	r3, r2
 811999e:	608b      	str	r3, [r1, #8]
 81199a0:	4620      	mov	r0, r4
 81199a2:	f000 fe0d 	bl	811a5c0 <_Bfree>
 81199a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 81199a8:	2200      	movs	r2, #0
 81199aa:	601a      	str	r2, [r3, #0]
 81199ac:	1e3b      	subs	r3, r7, #0
 81199ae:	bfb9      	ittee	lt
 81199b0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 81199b4:	9303      	strlt	r3, [sp, #12]
 81199b6:	2300      	movge	r3, #0
 81199b8:	f8c8 3000 	strge.w	r3, [r8]
 81199bc:	f8dd 900c 	ldr.w	r9, [sp, #12]
 81199c0:	4ba3      	ldr	r3, [pc, #652]	; (8119c50 <_dtoa_r+0x300>)
 81199c2:	bfbc      	itt	lt
 81199c4:	2201      	movlt	r2, #1
 81199c6:	f8c8 2000 	strlt.w	r2, [r8]
 81199ca:	ea33 0309 	bics.w	r3, r3, r9
 81199ce:	d11b      	bne.n	8119a08 <_dtoa_r+0xb8>
 81199d0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 81199d2:	f242 730f 	movw	r3, #9999	; 0x270f
 81199d6:	6013      	str	r3, [r2, #0]
 81199d8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 81199dc:	4333      	orrs	r3, r6
 81199de:	f000 857a 	beq.w	811a4d6 <_dtoa_r+0xb86>
 81199e2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 81199e4:	b963      	cbnz	r3, 8119a00 <_dtoa_r+0xb0>
 81199e6:	4b9b      	ldr	r3, [pc, #620]	; (8119c54 <_dtoa_r+0x304>)
 81199e8:	e024      	b.n	8119a34 <_dtoa_r+0xe4>
 81199ea:	4b9b      	ldr	r3, [pc, #620]	; (8119c58 <_dtoa_r+0x308>)
 81199ec:	9300      	str	r3, [sp, #0]
 81199ee:	3308      	adds	r3, #8
 81199f0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 81199f2:	6013      	str	r3, [r2, #0]
 81199f4:	9800      	ldr	r0, [sp, #0]
 81199f6:	b015      	add	sp, #84	; 0x54
 81199f8:	ecbd 8b02 	vpop	{d8}
 81199fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8119a00:	4b94      	ldr	r3, [pc, #592]	; (8119c54 <_dtoa_r+0x304>)
 8119a02:	9300      	str	r3, [sp, #0]
 8119a04:	3303      	adds	r3, #3
 8119a06:	e7f3      	b.n	81199f0 <_dtoa_r+0xa0>
 8119a08:	ed9d 7b02 	vldr	d7, [sp, #8]
 8119a0c:	2200      	movs	r2, #0
 8119a0e:	ec51 0b17 	vmov	r0, r1, d7
 8119a12:	2300      	movs	r3, #0
 8119a14:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8119a18:	f7e7 f8de 	bl	8100bd8 <__aeabi_dcmpeq>
 8119a1c:	4680      	mov	r8, r0
 8119a1e:	b158      	cbz	r0, 8119a38 <_dtoa_r+0xe8>
 8119a20:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8119a22:	2301      	movs	r3, #1
 8119a24:	6013      	str	r3, [r2, #0]
 8119a26:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8119a28:	2b00      	cmp	r3, #0
 8119a2a:	f000 8551 	beq.w	811a4d0 <_dtoa_r+0xb80>
 8119a2e:	488b      	ldr	r0, [pc, #556]	; (8119c5c <_dtoa_r+0x30c>)
 8119a30:	6018      	str	r0, [r3, #0]
 8119a32:	1e43      	subs	r3, r0, #1
 8119a34:	9300      	str	r3, [sp, #0]
 8119a36:	e7dd      	b.n	81199f4 <_dtoa_r+0xa4>
 8119a38:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8119a3c:	aa12      	add	r2, sp, #72	; 0x48
 8119a3e:	a913      	add	r1, sp, #76	; 0x4c
 8119a40:	4620      	mov	r0, r4
 8119a42:	f001 f89f 	bl	811ab84 <__d2b>
 8119a46:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8119a4a:	4683      	mov	fp, r0
 8119a4c:	2d00      	cmp	r5, #0
 8119a4e:	d07c      	beq.n	8119b4a <_dtoa_r+0x1fa>
 8119a50:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8119a52:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8119a56:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8119a5a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8119a5e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8119a62:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8119a66:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8119a6a:	4b7d      	ldr	r3, [pc, #500]	; (8119c60 <_dtoa_r+0x310>)
 8119a6c:	2200      	movs	r2, #0
 8119a6e:	4630      	mov	r0, r6
 8119a70:	4639      	mov	r1, r7
 8119a72:	f7e6 fc91 	bl	8100398 <__aeabi_dsub>
 8119a76:	a36e      	add	r3, pc, #440	; (adr r3, 8119c30 <_dtoa_r+0x2e0>)
 8119a78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8119a7c:	f7e6 fe44 	bl	8100708 <__aeabi_dmul>
 8119a80:	a36d      	add	r3, pc, #436	; (adr r3, 8119c38 <_dtoa_r+0x2e8>)
 8119a82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8119a86:	f7e6 fc89 	bl	810039c <__adddf3>
 8119a8a:	4606      	mov	r6, r0
 8119a8c:	4628      	mov	r0, r5
 8119a8e:	460f      	mov	r7, r1
 8119a90:	f7e6 fdd0 	bl	8100634 <__aeabi_i2d>
 8119a94:	a36a      	add	r3, pc, #424	; (adr r3, 8119c40 <_dtoa_r+0x2f0>)
 8119a96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8119a9a:	f7e6 fe35 	bl	8100708 <__aeabi_dmul>
 8119a9e:	4602      	mov	r2, r0
 8119aa0:	460b      	mov	r3, r1
 8119aa2:	4630      	mov	r0, r6
 8119aa4:	4639      	mov	r1, r7
 8119aa6:	f7e6 fc79 	bl	810039c <__adddf3>
 8119aaa:	4606      	mov	r6, r0
 8119aac:	460f      	mov	r7, r1
 8119aae:	f7e7 f8db 	bl	8100c68 <__aeabi_d2iz>
 8119ab2:	2200      	movs	r2, #0
 8119ab4:	4682      	mov	sl, r0
 8119ab6:	2300      	movs	r3, #0
 8119ab8:	4630      	mov	r0, r6
 8119aba:	4639      	mov	r1, r7
 8119abc:	f7e7 f896 	bl	8100bec <__aeabi_dcmplt>
 8119ac0:	b148      	cbz	r0, 8119ad6 <_dtoa_r+0x186>
 8119ac2:	4650      	mov	r0, sl
 8119ac4:	f7e6 fdb6 	bl	8100634 <__aeabi_i2d>
 8119ac8:	4632      	mov	r2, r6
 8119aca:	463b      	mov	r3, r7
 8119acc:	f7e7 f884 	bl	8100bd8 <__aeabi_dcmpeq>
 8119ad0:	b908      	cbnz	r0, 8119ad6 <_dtoa_r+0x186>
 8119ad2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8119ad6:	f1ba 0f16 	cmp.w	sl, #22
 8119ada:	d854      	bhi.n	8119b86 <_dtoa_r+0x236>
 8119adc:	4b61      	ldr	r3, [pc, #388]	; (8119c64 <_dtoa_r+0x314>)
 8119ade:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8119ae2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8119ae6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8119aea:	f7e7 f87f 	bl	8100bec <__aeabi_dcmplt>
 8119aee:	2800      	cmp	r0, #0
 8119af0:	d04b      	beq.n	8119b8a <_dtoa_r+0x23a>
 8119af2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8119af6:	2300      	movs	r3, #0
 8119af8:	930e      	str	r3, [sp, #56]	; 0x38
 8119afa:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8119afc:	1b5d      	subs	r5, r3, r5
 8119afe:	1e6b      	subs	r3, r5, #1
 8119b00:	9304      	str	r3, [sp, #16]
 8119b02:	bf43      	ittte	mi
 8119b04:	2300      	movmi	r3, #0
 8119b06:	f1c5 0801 	rsbmi	r8, r5, #1
 8119b0a:	9304      	strmi	r3, [sp, #16]
 8119b0c:	f04f 0800 	movpl.w	r8, #0
 8119b10:	f1ba 0f00 	cmp.w	sl, #0
 8119b14:	db3b      	blt.n	8119b8e <_dtoa_r+0x23e>
 8119b16:	9b04      	ldr	r3, [sp, #16]
 8119b18:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8119b1c:	4453      	add	r3, sl
 8119b1e:	9304      	str	r3, [sp, #16]
 8119b20:	2300      	movs	r3, #0
 8119b22:	9306      	str	r3, [sp, #24]
 8119b24:	9b05      	ldr	r3, [sp, #20]
 8119b26:	2b09      	cmp	r3, #9
 8119b28:	d869      	bhi.n	8119bfe <_dtoa_r+0x2ae>
 8119b2a:	2b05      	cmp	r3, #5
 8119b2c:	bfc4      	itt	gt
 8119b2e:	3b04      	subgt	r3, #4
 8119b30:	9305      	strgt	r3, [sp, #20]
 8119b32:	9b05      	ldr	r3, [sp, #20]
 8119b34:	f1a3 0302 	sub.w	r3, r3, #2
 8119b38:	bfcc      	ite	gt
 8119b3a:	2500      	movgt	r5, #0
 8119b3c:	2501      	movle	r5, #1
 8119b3e:	2b03      	cmp	r3, #3
 8119b40:	d869      	bhi.n	8119c16 <_dtoa_r+0x2c6>
 8119b42:	e8df f003 	tbb	[pc, r3]
 8119b46:	4e2c      	.short	0x4e2c
 8119b48:	5a4c      	.short	0x5a4c
 8119b4a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8119b4e:	441d      	add	r5, r3
 8119b50:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8119b54:	2b20      	cmp	r3, #32
 8119b56:	bfc1      	itttt	gt
 8119b58:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8119b5c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8119b60:	fa09 f303 	lslgt.w	r3, r9, r3
 8119b64:	fa26 f000 	lsrgt.w	r0, r6, r0
 8119b68:	bfda      	itte	le
 8119b6a:	f1c3 0320 	rsble	r3, r3, #32
 8119b6e:	fa06 f003 	lslle.w	r0, r6, r3
 8119b72:	4318      	orrgt	r0, r3
 8119b74:	f7e6 fd4e 	bl	8100614 <__aeabi_ui2d>
 8119b78:	2301      	movs	r3, #1
 8119b7a:	4606      	mov	r6, r0
 8119b7c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8119b80:	3d01      	subs	r5, #1
 8119b82:	9310      	str	r3, [sp, #64]	; 0x40
 8119b84:	e771      	b.n	8119a6a <_dtoa_r+0x11a>
 8119b86:	2301      	movs	r3, #1
 8119b88:	e7b6      	b.n	8119af8 <_dtoa_r+0x1a8>
 8119b8a:	900e      	str	r0, [sp, #56]	; 0x38
 8119b8c:	e7b5      	b.n	8119afa <_dtoa_r+0x1aa>
 8119b8e:	f1ca 0300 	rsb	r3, sl, #0
 8119b92:	9306      	str	r3, [sp, #24]
 8119b94:	2300      	movs	r3, #0
 8119b96:	eba8 080a 	sub.w	r8, r8, sl
 8119b9a:	930d      	str	r3, [sp, #52]	; 0x34
 8119b9c:	e7c2      	b.n	8119b24 <_dtoa_r+0x1d4>
 8119b9e:	2300      	movs	r3, #0
 8119ba0:	9308      	str	r3, [sp, #32]
 8119ba2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8119ba4:	2b00      	cmp	r3, #0
 8119ba6:	dc39      	bgt.n	8119c1c <_dtoa_r+0x2cc>
 8119ba8:	f04f 0901 	mov.w	r9, #1
 8119bac:	f8cd 9004 	str.w	r9, [sp, #4]
 8119bb0:	464b      	mov	r3, r9
 8119bb2:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8119bb6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8119bb8:	2200      	movs	r2, #0
 8119bba:	6042      	str	r2, [r0, #4]
 8119bbc:	2204      	movs	r2, #4
 8119bbe:	f102 0614 	add.w	r6, r2, #20
 8119bc2:	429e      	cmp	r6, r3
 8119bc4:	6841      	ldr	r1, [r0, #4]
 8119bc6:	d92f      	bls.n	8119c28 <_dtoa_r+0x2d8>
 8119bc8:	4620      	mov	r0, r4
 8119bca:	f000 fcb9 	bl	811a540 <_Balloc>
 8119bce:	9000      	str	r0, [sp, #0]
 8119bd0:	2800      	cmp	r0, #0
 8119bd2:	d14b      	bne.n	8119c6c <_dtoa_r+0x31c>
 8119bd4:	4b24      	ldr	r3, [pc, #144]	; (8119c68 <_dtoa_r+0x318>)
 8119bd6:	4602      	mov	r2, r0
 8119bd8:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8119bdc:	e6d1      	b.n	8119982 <_dtoa_r+0x32>
 8119bde:	2301      	movs	r3, #1
 8119be0:	e7de      	b.n	8119ba0 <_dtoa_r+0x250>
 8119be2:	2300      	movs	r3, #0
 8119be4:	9308      	str	r3, [sp, #32]
 8119be6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8119be8:	eb0a 0903 	add.w	r9, sl, r3
 8119bec:	f109 0301 	add.w	r3, r9, #1
 8119bf0:	2b01      	cmp	r3, #1
 8119bf2:	9301      	str	r3, [sp, #4]
 8119bf4:	bfb8      	it	lt
 8119bf6:	2301      	movlt	r3, #1
 8119bf8:	e7dd      	b.n	8119bb6 <_dtoa_r+0x266>
 8119bfa:	2301      	movs	r3, #1
 8119bfc:	e7f2      	b.n	8119be4 <_dtoa_r+0x294>
 8119bfe:	2501      	movs	r5, #1
 8119c00:	2300      	movs	r3, #0
 8119c02:	9305      	str	r3, [sp, #20]
 8119c04:	9508      	str	r5, [sp, #32]
 8119c06:	f04f 39ff 	mov.w	r9, #4294967295
 8119c0a:	2200      	movs	r2, #0
 8119c0c:	f8cd 9004 	str.w	r9, [sp, #4]
 8119c10:	2312      	movs	r3, #18
 8119c12:	9209      	str	r2, [sp, #36]	; 0x24
 8119c14:	e7cf      	b.n	8119bb6 <_dtoa_r+0x266>
 8119c16:	2301      	movs	r3, #1
 8119c18:	9308      	str	r3, [sp, #32]
 8119c1a:	e7f4      	b.n	8119c06 <_dtoa_r+0x2b6>
 8119c1c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8119c20:	f8cd 9004 	str.w	r9, [sp, #4]
 8119c24:	464b      	mov	r3, r9
 8119c26:	e7c6      	b.n	8119bb6 <_dtoa_r+0x266>
 8119c28:	3101      	adds	r1, #1
 8119c2a:	6041      	str	r1, [r0, #4]
 8119c2c:	0052      	lsls	r2, r2, #1
 8119c2e:	e7c6      	b.n	8119bbe <_dtoa_r+0x26e>
 8119c30:	636f4361 	.word	0x636f4361
 8119c34:	3fd287a7 	.word	0x3fd287a7
 8119c38:	8b60c8b3 	.word	0x8b60c8b3
 8119c3c:	3fc68a28 	.word	0x3fc68a28
 8119c40:	509f79fb 	.word	0x509f79fb
 8119c44:	3fd34413 	.word	0x3fd34413
 8119c48:	0811baad 	.word	0x0811baad
 8119c4c:	0811bac4 	.word	0x0811bac4
 8119c50:	7ff00000 	.word	0x7ff00000
 8119c54:	0811baa9 	.word	0x0811baa9
 8119c58:	0811baa0 	.word	0x0811baa0
 8119c5c:	0811ba7d 	.word	0x0811ba7d
 8119c60:	3ff80000 	.word	0x3ff80000
 8119c64:	0811bbc0 	.word	0x0811bbc0
 8119c68:	0811bb23 	.word	0x0811bb23
 8119c6c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8119c6e:	9a00      	ldr	r2, [sp, #0]
 8119c70:	601a      	str	r2, [r3, #0]
 8119c72:	9b01      	ldr	r3, [sp, #4]
 8119c74:	2b0e      	cmp	r3, #14
 8119c76:	f200 80ad 	bhi.w	8119dd4 <_dtoa_r+0x484>
 8119c7a:	2d00      	cmp	r5, #0
 8119c7c:	f000 80aa 	beq.w	8119dd4 <_dtoa_r+0x484>
 8119c80:	f1ba 0f00 	cmp.w	sl, #0
 8119c84:	dd36      	ble.n	8119cf4 <_dtoa_r+0x3a4>
 8119c86:	4ac3      	ldr	r2, [pc, #780]	; (8119f94 <_dtoa_r+0x644>)
 8119c88:	f00a 030f 	and.w	r3, sl, #15
 8119c8c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8119c90:	ed93 7b00 	vldr	d7, [r3]
 8119c94:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8119c98:	ea4f 172a 	mov.w	r7, sl, asr #4
 8119c9c:	eeb0 8a47 	vmov.f32	s16, s14
 8119ca0:	eef0 8a67 	vmov.f32	s17, s15
 8119ca4:	d016      	beq.n	8119cd4 <_dtoa_r+0x384>
 8119ca6:	4bbc      	ldr	r3, [pc, #752]	; (8119f98 <_dtoa_r+0x648>)
 8119ca8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8119cac:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8119cb0:	f7e6 fe54 	bl	810095c <__aeabi_ddiv>
 8119cb4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8119cb8:	f007 070f 	and.w	r7, r7, #15
 8119cbc:	2503      	movs	r5, #3
 8119cbe:	4eb6      	ldr	r6, [pc, #728]	; (8119f98 <_dtoa_r+0x648>)
 8119cc0:	b957      	cbnz	r7, 8119cd8 <_dtoa_r+0x388>
 8119cc2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8119cc6:	ec53 2b18 	vmov	r2, r3, d8
 8119cca:	f7e6 fe47 	bl	810095c <__aeabi_ddiv>
 8119cce:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8119cd2:	e029      	b.n	8119d28 <_dtoa_r+0x3d8>
 8119cd4:	2502      	movs	r5, #2
 8119cd6:	e7f2      	b.n	8119cbe <_dtoa_r+0x36e>
 8119cd8:	07f9      	lsls	r1, r7, #31
 8119cda:	d508      	bpl.n	8119cee <_dtoa_r+0x39e>
 8119cdc:	ec51 0b18 	vmov	r0, r1, d8
 8119ce0:	e9d6 2300 	ldrd	r2, r3, [r6]
 8119ce4:	f7e6 fd10 	bl	8100708 <__aeabi_dmul>
 8119ce8:	ec41 0b18 	vmov	d8, r0, r1
 8119cec:	3501      	adds	r5, #1
 8119cee:	107f      	asrs	r7, r7, #1
 8119cf0:	3608      	adds	r6, #8
 8119cf2:	e7e5      	b.n	8119cc0 <_dtoa_r+0x370>
 8119cf4:	f000 80a6 	beq.w	8119e44 <_dtoa_r+0x4f4>
 8119cf8:	f1ca 0600 	rsb	r6, sl, #0
 8119cfc:	4ba5      	ldr	r3, [pc, #660]	; (8119f94 <_dtoa_r+0x644>)
 8119cfe:	4fa6      	ldr	r7, [pc, #664]	; (8119f98 <_dtoa_r+0x648>)
 8119d00:	f006 020f 	and.w	r2, r6, #15
 8119d04:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8119d08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8119d0c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8119d10:	f7e6 fcfa 	bl	8100708 <__aeabi_dmul>
 8119d14:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8119d18:	1136      	asrs	r6, r6, #4
 8119d1a:	2300      	movs	r3, #0
 8119d1c:	2502      	movs	r5, #2
 8119d1e:	2e00      	cmp	r6, #0
 8119d20:	f040 8085 	bne.w	8119e2e <_dtoa_r+0x4de>
 8119d24:	2b00      	cmp	r3, #0
 8119d26:	d1d2      	bne.n	8119cce <_dtoa_r+0x37e>
 8119d28:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8119d2a:	2b00      	cmp	r3, #0
 8119d2c:	f000 808c 	beq.w	8119e48 <_dtoa_r+0x4f8>
 8119d30:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8119d34:	4b99      	ldr	r3, [pc, #612]	; (8119f9c <_dtoa_r+0x64c>)
 8119d36:	2200      	movs	r2, #0
 8119d38:	4630      	mov	r0, r6
 8119d3a:	4639      	mov	r1, r7
 8119d3c:	f7e6 ff56 	bl	8100bec <__aeabi_dcmplt>
 8119d40:	2800      	cmp	r0, #0
 8119d42:	f000 8081 	beq.w	8119e48 <_dtoa_r+0x4f8>
 8119d46:	9b01      	ldr	r3, [sp, #4]
 8119d48:	2b00      	cmp	r3, #0
 8119d4a:	d07d      	beq.n	8119e48 <_dtoa_r+0x4f8>
 8119d4c:	f1b9 0f00 	cmp.w	r9, #0
 8119d50:	dd3c      	ble.n	8119dcc <_dtoa_r+0x47c>
 8119d52:	f10a 33ff 	add.w	r3, sl, #4294967295
 8119d56:	9307      	str	r3, [sp, #28]
 8119d58:	2200      	movs	r2, #0
 8119d5a:	4b91      	ldr	r3, [pc, #580]	; (8119fa0 <_dtoa_r+0x650>)
 8119d5c:	4630      	mov	r0, r6
 8119d5e:	4639      	mov	r1, r7
 8119d60:	f7e6 fcd2 	bl	8100708 <__aeabi_dmul>
 8119d64:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8119d68:	3501      	adds	r5, #1
 8119d6a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8119d6e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8119d72:	4628      	mov	r0, r5
 8119d74:	f7e6 fc5e 	bl	8100634 <__aeabi_i2d>
 8119d78:	4632      	mov	r2, r6
 8119d7a:	463b      	mov	r3, r7
 8119d7c:	f7e6 fcc4 	bl	8100708 <__aeabi_dmul>
 8119d80:	4b88      	ldr	r3, [pc, #544]	; (8119fa4 <_dtoa_r+0x654>)
 8119d82:	2200      	movs	r2, #0
 8119d84:	f7e6 fb0a 	bl	810039c <__adddf3>
 8119d88:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8119d8c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8119d90:	9303      	str	r3, [sp, #12]
 8119d92:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8119d94:	2b00      	cmp	r3, #0
 8119d96:	d15c      	bne.n	8119e52 <_dtoa_r+0x502>
 8119d98:	4b83      	ldr	r3, [pc, #524]	; (8119fa8 <_dtoa_r+0x658>)
 8119d9a:	2200      	movs	r2, #0
 8119d9c:	4630      	mov	r0, r6
 8119d9e:	4639      	mov	r1, r7
 8119da0:	f7e6 fafa 	bl	8100398 <__aeabi_dsub>
 8119da4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8119da8:	4606      	mov	r6, r0
 8119daa:	460f      	mov	r7, r1
 8119dac:	f7e6 ff3c 	bl	8100c28 <__aeabi_dcmpgt>
 8119db0:	2800      	cmp	r0, #0
 8119db2:	f040 8296 	bne.w	811a2e2 <_dtoa_r+0x992>
 8119db6:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8119dba:	4630      	mov	r0, r6
 8119dbc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8119dc0:	4639      	mov	r1, r7
 8119dc2:	f7e6 ff13 	bl	8100bec <__aeabi_dcmplt>
 8119dc6:	2800      	cmp	r0, #0
 8119dc8:	f040 8288 	bne.w	811a2dc <_dtoa_r+0x98c>
 8119dcc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8119dd0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8119dd4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8119dd6:	2b00      	cmp	r3, #0
 8119dd8:	f2c0 8158 	blt.w	811a08c <_dtoa_r+0x73c>
 8119ddc:	f1ba 0f0e 	cmp.w	sl, #14
 8119de0:	f300 8154 	bgt.w	811a08c <_dtoa_r+0x73c>
 8119de4:	4b6b      	ldr	r3, [pc, #428]	; (8119f94 <_dtoa_r+0x644>)
 8119de6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8119dea:	e9d3 8900 	ldrd	r8, r9, [r3]
 8119dee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8119df0:	2b00      	cmp	r3, #0
 8119df2:	f280 80e3 	bge.w	8119fbc <_dtoa_r+0x66c>
 8119df6:	9b01      	ldr	r3, [sp, #4]
 8119df8:	2b00      	cmp	r3, #0
 8119dfa:	f300 80df 	bgt.w	8119fbc <_dtoa_r+0x66c>
 8119dfe:	f040 826d 	bne.w	811a2dc <_dtoa_r+0x98c>
 8119e02:	4b69      	ldr	r3, [pc, #420]	; (8119fa8 <_dtoa_r+0x658>)
 8119e04:	2200      	movs	r2, #0
 8119e06:	4640      	mov	r0, r8
 8119e08:	4649      	mov	r1, r9
 8119e0a:	f7e6 fc7d 	bl	8100708 <__aeabi_dmul>
 8119e0e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8119e12:	f7e6 feff 	bl	8100c14 <__aeabi_dcmpge>
 8119e16:	9e01      	ldr	r6, [sp, #4]
 8119e18:	4637      	mov	r7, r6
 8119e1a:	2800      	cmp	r0, #0
 8119e1c:	f040 8243 	bne.w	811a2a6 <_dtoa_r+0x956>
 8119e20:	9d00      	ldr	r5, [sp, #0]
 8119e22:	2331      	movs	r3, #49	; 0x31
 8119e24:	f805 3b01 	strb.w	r3, [r5], #1
 8119e28:	f10a 0a01 	add.w	sl, sl, #1
 8119e2c:	e23f      	b.n	811a2ae <_dtoa_r+0x95e>
 8119e2e:	07f2      	lsls	r2, r6, #31
 8119e30:	d505      	bpl.n	8119e3e <_dtoa_r+0x4ee>
 8119e32:	e9d7 2300 	ldrd	r2, r3, [r7]
 8119e36:	f7e6 fc67 	bl	8100708 <__aeabi_dmul>
 8119e3a:	3501      	adds	r5, #1
 8119e3c:	2301      	movs	r3, #1
 8119e3e:	1076      	asrs	r6, r6, #1
 8119e40:	3708      	adds	r7, #8
 8119e42:	e76c      	b.n	8119d1e <_dtoa_r+0x3ce>
 8119e44:	2502      	movs	r5, #2
 8119e46:	e76f      	b.n	8119d28 <_dtoa_r+0x3d8>
 8119e48:	9b01      	ldr	r3, [sp, #4]
 8119e4a:	f8cd a01c 	str.w	sl, [sp, #28]
 8119e4e:	930c      	str	r3, [sp, #48]	; 0x30
 8119e50:	e78d      	b.n	8119d6e <_dtoa_r+0x41e>
 8119e52:	9900      	ldr	r1, [sp, #0]
 8119e54:	980c      	ldr	r0, [sp, #48]	; 0x30
 8119e56:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8119e58:	4b4e      	ldr	r3, [pc, #312]	; (8119f94 <_dtoa_r+0x644>)
 8119e5a:	ed9d 7b02 	vldr	d7, [sp, #8]
 8119e5e:	4401      	add	r1, r0
 8119e60:	9102      	str	r1, [sp, #8]
 8119e62:	9908      	ldr	r1, [sp, #32]
 8119e64:	eeb0 8a47 	vmov.f32	s16, s14
 8119e68:	eef0 8a67 	vmov.f32	s17, s15
 8119e6c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8119e70:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8119e74:	2900      	cmp	r1, #0
 8119e76:	d045      	beq.n	8119f04 <_dtoa_r+0x5b4>
 8119e78:	494c      	ldr	r1, [pc, #304]	; (8119fac <_dtoa_r+0x65c>)
 8119e7a:	2000      	movs	r0, #0
 8119e7c:	f7e6 fd6e 	bl	810095c <__aeabi_ddiv>
 8119e80:	ec53 2b18 	vmov	r2, r3, d8
 8119e84:	f7e6 fa88 	bl	8100398 <__aeabi_dsub>
 8119e88:	9d00      	ldr	r5, [sp, #0]
 8119e8a:	ec41 0b18 	vmov	d8, r0, r1
 8119e8e:	4639      	mov	r1, r7
 8119e90:	4630      	mov	r0, r6
 8119e92:	f7e6 fee9 	bl	8100c68 <__aeabi_d2iz>
 8119e96:	900c      	str	r0, [sp, #48]	; 0x30
 8119e98:	f7e6 fbcc 	bl	8100634 <__aeabi_i2d>
 8119e9c:	4602      	mov	r2, r0
 8119e9e:	460b      	mov	r3, r1
 8119ea0:	4630      	mov	r0, r6
 8119ea2:	4639      	mov	r1, r7
 8119ea4:	f7e6 fa78 	bl	8100398 <__aeabi_dsub>
 8119ea8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8119eaa:	3330      	adds	r3, #48	; 0x30
 8119eac:	f805 3b01 	strb.w	r3, [r5], #1
 8119eb0:	ec53 2b18 	vmov	r2, r3, d8
 8119eb4:	4606      	mov	r6, r0
 8119eb6:	460f      	mov	r7, r1
 8119eb8:	f7e6 fe98 	bl	8100bec <__aeabi_dcmplt>
 8119ebc:	2800      	cmp	r0, #0
 8119ebe:	d165      	bne.n	8119f8c <_dtoa_r+0x63c>
 8119ec0:	4632      	mov	r2, r6
 8119ec2:	463b      	mov	r3, r7
 8119ec4:	4935      	ldr	r1, [pc, #212]	; (8119f9c <_dtoa_r+0x64c>)
 8119ec6:	2000      	movs	r0, #0
 8119ec8:	f7e6 fa66 	bl	8100398 <__aeabi_dsub>
 8119ecc:	ec53 2b18 	vmov	r2, r3, d8
 8119ed0:	f7e6 fe8c 	bl	8100bec <__aeabi_dcmplt>
 8119ed4:	2800      	cmp	r0, #0
 8119ed6:	f040 80b9 	bne.w	811a04c <_dtoa_r+0x6fc>
 8119eda:	9b02      	ldr	r3, [sp, #8]
 8119edc:	429d      	cmp	r5, r3
 8119ede:	f43f af75 	beq.w	8119dcc <_dtoa_r+0x47c>
 8119ee2:	4b2f      	ldr	r3, [pc, #188]	; (8119fa0 <_dtoa_r+0x650>)
 8119ee4:	ec51 0b18 	vmov	r0, r1, d8
 8119ee8:	2200      	movs	r2, #0
 8119eea:	f7e6 fc0d 	bl	8100708 <__aeabi_dmul>
 8119eee:	4b2c      	ldr	r3, [pc, #176]	; (8119fa0 <_dtoa_r+0x650>)
 8119ef0:	ec41 0b18 	vmov	d8, r0, r1
 8119ef4:	2200      	movs	r2, #0
 8119ef6:	4630      	mov	r0, r6
 8119ef8:	4639      	mov	r1, r7
 8119efa:	f7e6 fc05 	bl	8100708 <__aeabi_dmul>
 8119efe:	4606      	mov	r6, r0
 8119f00:	460f      	mov	r7, r1
 8119f02:	e7c4      	b.n	8119e8e <_dtoa_r+0x53e>
 8119f04:	ec51 0b17 	vmov	r0, r1, d7
 8119f08:	f7e6 fbfe 	bl	8100708 <__aeabi_dmul>
 8119f0c:	9b02      	ldr	r3, [sp, #8]
 8119f0e:	9d00      	ldr	r5, [sp, #0]
 8119f10:	930c      	str	r3, [sp, #48]	; 0x30
 8119f12:	ec41 0b18 	vmov	d8, r0, r1
 8119f16:	4639      	mov	r1, r7
 8119f18:	4630      	mov	r0, r6
 8119f1a:	f7e6 fea5 	bl	8100c68 <__aeabi_d2iz>
 8119f1e:	9011      	str	r0, [sp, #68]	; 0x44
 8119f20:	f7e6 fb88 	bl	8100634 <__aeabi_i2d>
 8119f24:	4602      	mov	r2, r0
 8119f26:	460b      	mov	r3, r1
 8119f28:	4630      	mov	r0, r6
 8119f2a:	4639      	mov	r1, r7
 8119f2c:	f7e6 fa34 	bl	8100398 <__aeabi_dsub>
 8119f30:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8119f32:	3330      	adds	r3, #48	; 0x30
 8119f34:	f805 3b01 	strb.w	r3, [r5], #1
 8119f38:	9b02      	ldr	r3, [sp, #8]
 8119f3a:	429d      	cmp	r5, r3
 8119f3c:	4606      	mov	r6, r0
 8119f3e:	460f      	mov	r7, r1
 8119f40:	f04f 0200 	mov.w	r2, #0
 8119f44:	d134      	bne.n	8119fb0 <_dtoa_r+0x660>
 8119f46:	4b19      	ldr	r3, [pc, #100]	; (8119fac <_dtoa_r+0x65c>)
 8119f48:	ec51 0b18 	vmov	r0, r1, d8
 8119f4c:	f7e6 fa26 	bl	810039c <__adddf3>
 8119f50:	4602      	mov	r2, r0
 8119f52:	460b      	mov	r3, r1
 8119f54:	4630      	mov	r0, r6
 8119f56:	4639      	mov	r1, r7
 8119f58:	f7e6 fe66 	bl	8100c28 <__aeabi_dcmpgt>
 8119f5c:	2800      	cmp	r0, #0
 8119f5e:	d175      	bne.n	811a04c <_dtoa_r+0x6fc>
 8119f60:	ec53 2b18 	vmov	r2, r3, d8
 8119f64:	4911      	ldr	r1, [pc, #68]	; (8119fac <_dtoa_r+0x65c>)
 8119f66:	2000      	movs	r0, #0
 8119f68:	f7e6 fa16 	bl	8100398 <__aeabi_dsub>
 8119f6c:	4602      	mov	r2, r0
 8119f6e:	460b      	mov	r3, r1
 8119f70:	4630      	mov	r0, r6
 8119f72:	4639      	mov	r1, r7
 8119f74:	f7e6 fe3a 	bl	8100bec <__aeabi_dcmplt>
 8119f78:	2800      	cmp	r0, #0
 8119f7a:	f43f af27 	beq.w	8119dcc <_dtoa_r+0x47c>
 8119f7e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8119f80:	1e6b      	subs	r3, r5, #1
 8119f82:	930c      	str	r3, [sp, #48]	; 0x30
 8119f84:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8119f88:	2b30      	cmp	r3, #48	; 0x30
 8119f8a:	d0f8      	beq.n	8119f7e <_dtoa_r+0x62e>
 8119f8c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8119f90:	e04a      	b.n	811a028 <_dtoa_r+0x6d8>
 8119f92:	bf00      	nop
 8119f94:	0811bbc0 	.word	0x0811bbc0
 8119f98:	0811bb98 	.word	0x0811bb98
 8119f9c:	3ff00000 	.word	0x3ff00000
 8119fa0:	40240000 	.word	0x40240000
 8119fa4:	401c0000 	.word	0x401c0000
 8119fa8:	40140000 	.word	0x40140000
 8119fac:	3fe00000 	.word	0x3fe00000
 8119fb0:	4baf      	ldr	r3, [pc, #700]	; (811a270 <_dtoa_r+0x920>)
 8119fb2:	f7e6 fba9 	bl	8100708 <__aeabi_dmul>
 8119fb6:	4606      	mov	r6, r0
 8119fb8:	460f      	mov	r7, r1
 8119fba:	e7ac      	b.n	8119f16 <_dtoa_r+0x5c6>
 8119fbc:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8119fc0:	9d00      	ldr	r5, [sp, #0]
 8119fc2:	4642      	mov	r2, r8
 8119fc4:	464b      	mov	r3, r9
 8119fc6:	4630      	mov	r0, r6
 8119fc8:	4639      	mov	r1, r7
 8119fca:	f7e6 fcc7 	bl	810095c <__aeabi_ddiv>
 8119fce:	f7e6 fe4b 	bl	8100c68 <__aeabi_d2iz>
 8119fd2:	9002      	str	r0, [sp, #8]
 8119fd4:	f7e6 fb2e 	bl	8100634 <__aeabi_i2d>
 8119fd8:	4642      	mov	r2, r8
 8119fda:	464b      	mov	r3, r9
 8119fdc:	f7e6 fb94 	bl	8100708 <__aeabi_dmul>
 8119fe0:	4602      	mov	r2, r0
 8119fe2:	460b      	mov	r3, r1
 8119fe4:	4630      	mov	r0, r6
 8119fe6:	4639      	mov	r1, r7
 8119fe8:	f7e6 f9d6 	bl	8100398 <__aeabi_dsub>
 8119fec:	9e02      	ldr	r6, [sp, #8]
 8119fee:	9f01      	ldr	r7, [sp, #4]
 8119ff0:	3630      	adds	r6, #48	; 0x30
 8119ff2:	f805 6b01 	strb.w	r6, [r5], #1
 8119ff6:	9e00      	ldr	r6, [sp, #0]
 8119ff8:	1bae      	subs	r6, r5, r6
 8119ffa:	42b7      	cmp	r7, r6
 8119ffc:	4602      	mov	r2, r0
 8119ffe:	460b      	mov	r3, r1
 811a000:	d137      	bne.n	811a072 <_dtoa_r+0x722>
 811a002:	f7e6 f9cb 	bl	810039c <__adddf3>
 811a006:	4642      	mov	r2, r8
 811a008:	464b      	mov	r3, r9
 811a00a:	4606      	mov	r6, r0
 811a00c:	460f      	mov	r7, r1
 811a00e:	f7e6 fe0b 	bl	8100c28 <__aeabi_dcmpgt>
 811a012:	b9c8      	cbnz	r0, 811a048 <_dtoa_r+0x6f8>
 811a014:	4642      	mov	r2, r8
 811a016:	464b      	mov	r3, r9
 811a018:	4630      	mov	r0, r6
 811a01a:	4639      	mov	r1, r7
 811a01c:	f7e6 fddc 	bl	8100bd8 <__aeabi_dcmpeq>
 811a020:	b110      	cbz	r0, 811a028 <_dtoa_r+0x6d8>
 811a022:	9b02      	ldr	r3, [sp, #8]
 811a024:	07d9      	lsls	r1, r3, #31
 811a026:	d40f      	bmi.n	811a048 <_dtoa_r+0x6f8>
 811a028:	4620      	mov	r0, r4
 811a02a:	4659      	mov	r1, fp
 811a02c:	f000 fac8 	bl	811a5c0 <_Bfree>
 811a030:	2300      	movs	r3, #0
 811a032:	702b      	strb	r3, [r5, #0]
 811a034:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 811a036:	f10a 0001 	add.w	r0, sl, #1
 811a03a:	6018      	str	r0, [r3, #0]
 811a03c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 811a03e:	2b00      	cmp	r3, #0
 811a040:	f43f acd8 	beq.w	81199f4 <_dtoa_r+0xa4>
 811a044:	601d      	str	r5, [r3, #0]
 811a046:	e4d5      	b.n	81199f4 <_dtoa_r+0xa4>
 811a048:	f8cd a01c 	str.w	sl, [sp, #28]
 811a04c:	462b      	mov	r3, r5
 811a04e:	461d      	mov	r5, r3
 811a050:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 811a054:	2a39      	cmp	r2, #57	; 0x39
 811a056:	d108      	bne.n	811a06a <_dtoa_r+0x71a>
 811a058:	9a00      	ldr	r2, [sp, #0]
 811a05a:	429a      	cmp	r2, r3
 811a05c:	d1f7      	bne.n	811a04e <_dtoa_r+0x6fe>
 811a05e:	9a07      	ldr	r2, [sp, #28]
 811a060:	9900      	ldr	r1, [sp, #0]
 811a062:	3201      	adds	r2, #1
 811a064:	9207      	str	r2, [sp, #28]
 811a066:	2230      	movs	r2, #48	; 0x30
 811a068:	700a      	strb	r2, [r1, #0]
 811a06a:	781a      	ldrb	r2, [r3, #0]
 811a06c:	3201      	adds	r2, #1
 811a06e:	701a      	strb	r2, [r3, #0]
 811a070:	e78c      	b.n	8119f8c <_dtoa_r+0x63c>
 811a072:	4b7f      	ldr	r3, [pc, #508]	; (811a270 <_dtoa_r+0x920>)
 811a074:	2200      	movs	r2, #0
 811a076:	f7e6 fb47 	bl	8100708 <__aeabi_dmul>
 811a07a:	2200      	movs	r2, #0
 811a07c:	2300      	movs	r3, #0
 811a07e:	4606      	mov	r6, r0
 811a080:	460f      	mov	r7, r1
 811a082:	f7e6 fda9 	bl	8100bd8 <__aeabi_dcmpeq>
 811a086:	2800      	cmp	r0, #0
 811a088:	d09b      	beq.n	8119fc2 <_dtoa_r+0x672>
 811a08a:	e7cd      	b.n	811a028 <_dtoa_r+0x6d8>
 811a08c:	9a08      	ldr	r2, [sp, #32]
 811a08e:	2a00      	cmp	r2, #0
 811a090:	f000 80c4 	beq.w	811a21c <_dtoa_r+0x8cc>
 811a094:	9a05      	ldr	r2, [sp, #20]
 811a096:	2a01      	cmp	r2, #1
 811a098:	f300 80a8 	bgt.w	811a1ec <_dtoa_r+0x89c>
 811a09c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 811a09e:	2a00      	cmp	r2, #0
 811a0a0:	f000 80a0 	beq.w	811a1e4 <_dtoa_r+0x894>
 811a0a4:	f203 4333 	addw	r3, r3, #1075	; 0x433
 811a0a8:	9e06      	ldr	r6, [sp, #24]
 811a0aa:	4645      	mov	r5, r8
 811a0ac:	9a04      	ldr	r2, [sp, #16]
 811a0ae:	2101      	movs	r1, #1
 811a0b0:	441a      	add	r2, r3
 811a0b2:	4620      	mov	r0, r4
 811a0b4:	4498      	add	r8, r3
 811a0b6:	9204      	str	r2, [sp, #16]
 811a0b8:	f000 fb3e 	bl	811a738 <__i2b>
 811a0bc:	4607      	mov	r7, r0
 811a0be:	2d00      	cmp	r5, #0
 811a0c0:	dd0b      	ble.n	811a0da <_dtoa_r+0x78a>
 811a0c2:	9b04      	ldr	r3, [sp, #16]
 811a0c4:	2b00      	cmp	r3, #0
 811a0c6:	dd08      	ble.n	811a0da <_dtoa_r+0x78a>
 811a0c8:	42ab      	cmp	r3, r5
 811a0ca:	9a04      	ldr	r2, [sp, #16]
 811a0cc:	bfa8      	it	ge
 811a0ce:	462b      	movge	r3, r5
 811a0d0:	eba8 0803 	sub.w	r8, r8, r3
 811a0d4:	1aed      	subs	r5, r5, r3
 811a0d6:	1ad3      	subs	r3, r2, r3
 811a0d8:	9304      	str	r3, [sp, #16]
 811a0da:	9b06      	ldr	r3, [sp, #24]
 811a0dc:	b1fb      	cbz	r3, 811a11e <_dtoa_r+0x7ce>
 811a0de:	9b08      	ldr	r3, [sp, #32]
 811a0e0:	2b00      	cmp	r3, #0
 811a0e2:	f000 809f 	beq.w	811a224 <_dtoa_r+0x8d4>
 811a0e6:	2e00      	cmp	r6, #0
 811a0e8:	dd11      	ble.n	811a10e <_dtoa_r+0x7be>
 811a0ea:	4639      	mov	r1, r7
 811a0ec:	4632      	mov	r2, r6
 811a0ee:	4620      	mov	r0, r4
 811a0f0:	f000 fbde 	bl	811a8b0 <__pow5mult>
 811a0f4:	465a      	mov	r2, fp
 811a0f6:	4601      	mov	r1, r0
 811a0f8:	4607      	mov	r7, r0
 811a0fa:	4620      	mov	r0, r4
 811a0fc:	f000 fb32 	bl	811a764 <__multiply>
 811a100:	4659      	mov	r1, fp
 811a102:	9007      	str	r0, [sp, #28]
 811a104:	4620      	mov	r0, r4
 811a106:	f000 fa5b 	bl	811a5c0 <_Bfree>
 811a10a:	9b07      	ldr	r3, [sp, #28]
 811a10c:	469b      	mov	fp, r3
 811a10e:	9b06      	ldr	r3, [sp, #24]
 811a110:	1b9a      	subs	r2, r3, r6
 811a112:	d004      	beq.n	811a11e <_dtoa_r+0x7ce>
 811a114:	4659      	mov	r1, fp
 811a116:	4620      	mov	r0, r4
 811a118:	f000 fbca 	bl	811a8b0 <__pow5mult>
 811a11c:	4683      	mov	fp, r0
 811a11e:	2101      	movs	r1, #1
 811a120:	4620      	mov	r0, r4
 811a122:	f000 fb09 	bl	811a738 <__i2b>
 811a126:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 811a128:	2b00      	cmp	r3, #0
 811a12a:	4606      	mov	r6, r0
 811a12c:	dd7c      	ble.n	811a228 <_dtoa_r+0x8d8>
 811a12e:	461a      	mov	r2, r3
 811a130:	4601      	mov	r1, r0
 811a132:	4620      	mov	r0, r4
 811a134:	f000 fbbc 	bl	811a8b0 <__pow5mult>
 811a138:	9b05      	ldr	r3, [sp, #20]
 811a13a:	2b01      	cmp	r3, #1
 811a13c:	4606      	mov	r6, r0
 811a13e:	dd76      	ble.n	811a22e <_dtoa_r+0x8de>
 811a140:	2300      	movs	r3, #0
 811a142:	9306      	str	r3, [sp, #24]
 811a144:	6933      	ldr	r3, [r6, #16]
 811a146:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 811a14a:	6918      	ldr	r0, [r3, #16]
 811a14c:	f000 faa4 	bl	811a698 <__hi0bits>
 811a150:	f1c0 0020 	rsb	r0, r0, #32
 811a154:	9b04      	ldr	r3, [sp, #16]
 811a156:	4418      	add	r0, r3
 811a158:	f010 001f 	ands.w	r0, r0, #31
 811a15c:	f000 8086 	beq.w	811a26c <_dtoa_r+0x91c>
 811a160:	f1c0 0320 	rsb	r3, r0, #32
 811a164:	2b04      	cmp	r3, #4
 811a166:	dd7f      	ble.n	811a268 <_dtoa_r+0x918>
 811a168:	f1c0 001c 	rsb	r0, r0, #28
 811a16c:	9b04      	ldr	r3, [sp, #16]
 811a16e:	4403      	add	r3, r0
 811a170:	4480      	add	r8, r0
 811a172:	4405      	add	r5, r0
 811a174:	9304      	str	r3, [sp, #16]
 811a176:	f1b8 0f00 	cmp.w	r8, #0
 811a17a:	dd05      	ble.n	811a188 <_dtoa_r+0x838>
 811a17c:	4659      	mov	r1, fp
 811a17e:	4642      	mov	r2, r8
 811a180:	4620      	mov	r0, r4
 811a182:	f000 fbef 	bl	811a964 <__lshift>
 811a186:	4683      	mov	fp, r0
 811a188:	9b04      	ldr	r3, [sp, #16]
 811a18a:	2b00      	cmp	r3, #0
 811a18c:	dd05      	ble.n	811a19a <_dtoa_r+0x84a>
 811a18e:	4631      	mov	r1, r6
 811a190:	461a      	mov	r2, r3
 811a192:	4620      	mov	r0, r4
 811a194:	f000 fbe6 	bl	811a964 <__lshift>
 811a198:	4606      	mov	r6, r0
 811a19a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 811a19c:	2b00      	cmp	r3, #0
 811a19e:	d069      	beq.n	811a274 <_dtoa_r+0x924>
 811a1a0:	4631      	mov	r1, r6
 811a1a2:	4658      	mov	r0, fp
 811a1a4:	f000 fc4a 	bl	811aa3c <__mcmp>
 811a1a8:	2800      	cmp	r0, #0
 811a1aa:	da63      	bge.n	811a274 <_dtoa_r+0x924>
 811a1ac:	2300      	movs	r3, #0
 811a1ae:	4659      	mov	r1, fp
 811a1b0:	220a      	movs	r2, #10
 811a1b2:	4620      	mov	r0, r4
 811a1b4:	f000 fa26 	bl	811a604 <__multadd>
 811a1b8:	9b08      	ldr	r3, [sp, #32]
 811a1ba:	f10a 3aff 	add.w	sl, sl, #4294967295
 811a1be:	4683      	mov	fp, r0
 811a1c0:	2b00      	cmp	r3, #0
 811a1c2:	f000 818f 	beq.w	811a4e4 <_dtoa_r+0xb94>
 811a1c6:	4639      	mov	r1, r7
 811a1c8:	2300      	movs	r3, #0
 811a1ca:	220a      	movs	r2, #10
 811a1cc:	4620      	mov	r0, r4
 811a1ce:	f000 fa19 	bl	811a604 <__multadd>
 811a1d2:	f1b9 0f00 	cmp.w	r9, #0
 811a1d6:	4607      	mov	r7, r0
 811a1d8:	f300 808e 	bgt.w	811a2f8 <_dtoa_r+0x9a8>
 811a1dc:	9b05      	ldr	r3, [sp, #20]
 811a1de:	2b02      	cmp	r3, #2
 811a1e0:	dc50      	bgt.n	811a284 <_dtoa_r+0x934>
 811a1e2:	e089      	b.n	811a2f8 <_dtoa_r+0x9a8>
 811a1e4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 811a1e6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 811a1ea:	e75d      	b.n	811a0a8 <_dtoa_r+0x758>
 811a1ec:	9b01      	ldr	r3, [sp, #4]
 811a1ee:	1e5e      	subs	r6, r3, #1
 811a1f0:	9b06      	ldr	r3, [sp, #24]
 811a1f2:	42b3      	cmp	r3, r6
 811a1f4:	bfbf      	itttt	lt
 811a1f6:	9b06      	ldrlt	r3, [sp, #24]
 811a1f8:	9606      	strlt	r6, [sp, #24]
 811a1fa:	1af2      	sublt	r2, r6, r3
 811a1fc:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 811a1fe:	bfb6      	itet	lt
 811a200:	189b      	addlt	r3, r3, r2
 811a202:	1b9e      	subge	r6, r3, r6
 811a204:	930d      	strlt	r3, [sp, #52]	; 0x34
 811a206:	9b01      	ldr	r3, [sp, #4]
 811a208:	bfb8      	it	lt
 811a20a:	2600      	movlt	r6, #0
 811a20c:	2b00      	cmp	r3, #0
 811a20e:	bfb5      	itete	lt
 811a210:	eba8 0503 	sublt.w	r5, r8, r3
 811a214:	9b01      	ldrge	r3, [sp, #4]
 811a216:	2300      	movlt	r3, #0
 811a218:	4645      	movge	r5, r8
 811a21a:	e747      	b.n	811a0ac <_dtoa_r+0x75c>
 811a21c:	9e06      	ldr	r6, [sp, #24]
 811a21e:	9f08      	ldr	r7, [sp, #32]
 811a220:	4645      	mov	r5, r8
 811a222:	e74c      	b.n	811a0be <_dtoa_r+0x76e>
 811a224:	9a06      	ldr	r2, [sp, #24]
 811a226:	e775      	b.n	811a114 <_dtoa_r+0x7c4>
 811a228:	9b05      	ldr	r3, [sp, #20]
 811a22a:	2b01      	cmp	r3, #1
 811a22c:	dc18      	bgt.n	811a260 <_dtoa_r+0x910>
 811a22e:	9b02      	ldr	r3, [sp, #8]
 811a230:	b9b3      	cbnz	r3, 811a260 <_dtoa_r+0x910>
 811a232:	9b03      	ldr	r3, [sp, #12]
 811a234:	f3c3 0313 	ubfx	r3, r3, #0, #20
 811a238:	b9a3      	cbnz	r3, 811a264 <_dtoa_r+0x914>
 811a23a:	9b03      	ldr	r3, [sp, #12]
 811a23c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 811a240:	0d1b      	lsrs	r3, r3, #20
 811a242:	051b      	lsls	r3, r3, #20
 811a244:	b12b      	cbz	r3, 811a252 <_dtoa_r+0x902>
 811a246:	9b04      	ldr	r3, [sp, #16]
 811a248:	3301      	adds	r3, #1
 811a24a:	9304      	str	r3, [sp, #16]
 811a24c:	f108 0801 	add.w	r8, r8, #1
 811a250:	2301      	movs	r3, #1
 811a252:	9306      	str	r3, [sp, #24]
 811a254:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 811a256:	2b00      	cmp	r3, #0
 811a258:	f47f af74 	bne.w	811a144 <_dtoa_r+0x7f4>
 811a25c:	2001      	movs	r0, #1
 811a25e:	e779      	b.n	811a154 <_dtoa_r+0x804>
 811a260:	2300      	movs	r3, #0
 811a262:	e7f6      	b.n	811a252 <_dtoa_r+0x902>
 811a264:	9b02      	ldr	r3, [sp, #8]
 811a266:	e7f4      	b.n	811a252 <_dtoa_r+0x902>
 811a268:	d085      	beq.n	811a176 <_dtoa_r+0x826>
 811a26a:	4618      	mov	r0, r3
 811a26c:	301c      	adds	r0, #28
 811a26e:	e77d      	b.n	811a16c <_dtoa_r+0x81c>
 811a270:	40240000 	.word	0x40240000
 811a274:	9b01      	ldr	r3, [sp, #4]
 811a276:	2b00      	cmp	r3, #0
 811a278:	dc38      	bgt.n	811a2ec <_dtoa_r+0x99c>
 811a27a:	9b05      	ldr	r3, [sp, #20]
 811a27c:	2b02      	cmp	r3, #2
 811a27e:	dd35      	ble.n	811a2ec <_dtoa_r+0x99c>
 811a280:	f8dd 9004 	ldr.w	r9, [sp, #4]
 811a284:	f1b9 0f00 	cmp.w	r9, #0
 811a288:	d10d      	bne.n	811a2a6 <_dtoa_r+0x956>
 811a28a:	4631      	mov	r1, r6
 811a28c:	464b      	mov	r3, r9
 811a28e:	2205      	movs	r2, #5
 811a290:	4620      	mov	r0, r4
 811a292:	f000 f9b7 	bl	811a604 <__multadd>
 811a296:	4601      	mov	r1, r0
 811a298:	4606      	mov	r6, r0
 811a29a:	4658      	mov	r0, fp
 811a29c:	f000 fbce 	bl	811aa3c <__mcmp>
 811a2a0:	2800      	cmp	r0, #0
 811a2a2:	f73f adbd 	bgt.w	8119e20 <_dtoa_r+0x4d0>
 811a2a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 811a2a8:	9d00      	ldr	r5, [sp, #0]
 811a2aa:	ea6f 0a03 	mvn.w	sl, r3
 811a2ae:	f04f 0800 	mov.w	r8, #0
 811a2b2:	4631      	mov	r1, r6
 811a2b4:	4620      	mov	r0, r4
 811a2b6:	f000 f983 	bl	811a5c0 <_Bfree>
 811a2ba:	2f00      	cmp	r7, #0
 811a2bc:	f43f aeb4 	beq.w	811a028 <_dtoa_r+0x6d8>
 811a2c0:	f1b8 0f00 	cmp.w	r8, #0
 811a2c4:	d005      	beq.n	811a2d2 <_dtoa_r+0x982>
 811a2c6:	45b8      	cmp	r8, r7
 811a2c8:	d003      	beq.n	811a2d2 <_dtoa_r+0x982>
 811a2ca:	4641      	mov	r1, r8
 811a2cc:	4620      	mov	r0, r4
 811a2ce:	f000 f977 	bl	811a5c0 <_Bfree>
 811a2d2:	4639      	mov	r1, r7
 811a2d4:	4620      	mov	r0, r4
 811a2d6:	f000 f973 	bl	811a5c0 <_Bfree>
 811a2da:	e6a5      	b.n	811a028 <_dtoa_r+0x6d8>
 811a2dc:	2600      	movs	r6, #0
 811a2de:	4637      	mov	r7, r6
 811a2e0:	e7e1      	b.n	811a2a6 <_dtoa_r+0x956>
 811a2e2:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 811a2e4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 811a2e8:	4637      	mov	r7, r6
 811a2ea:	e599      	b.n	8119e20 <_dtoa_r+0x4d0>
 811a2ec:	9b08      	ldr	r3, [sp, #32]
 811a2ee:	f8dd 9004 	ldr.w	r9, [sp, #4]
 811a2f2:	2b00      	cmp	r3, #0
 811a2f4:	f000 80fd 	beq.w	811a4f2 <_dtoa_r+0xba2>
 811a2f8:	2d00      	cmp	r5, #0
 811a2fa:	dd05      	ble.n	811a308 <_dtoa_r+0x9b8>
 811a2fc:	4639      	mov	r1, r7
 811a2fe:	462a      	mov	r2, r5
 811a300:	4620      	mov	r0, r4
 811a302:	f000 fb2f 	bl	811a964 <__lshift>
 811a306:	4607      	mov	r7, r0
 811a308:	9b06      	ldr	r3, [sp, #24]
 811a30a:	2b00      	cmp	r3, #0
 811a30c:	d05c      	beq.n	811a3c8 <_dtoa_r+0xa78>
 811a30e:	6879      	ldr	r1, [r7, #4]
 811a310:	4620      	mov	r0, r4
 811a312:	f000 f915 	bl	811a540 <_Balloc>
 811a316:	4605      	mov	r5, r0
 811a318:	b928      	cbnz	r0, 811a326 <_dtoa_r+0x9d6>
 811a31a:	4b80      	ldr	r3, [pc, #512]	; (811a51c <_dtoa_r+0xbcc>)
 811a31c:	4602      	mov	r2, r0
 811a31e:	f240 21ea 	movw	r1, #746	; 0x2ea
 811a322:	f7ff bb2e 	b.w	8119982 <_dtoa_r+0x32>
 811a326:	693a      	ldr	r2, [r7, #16]
 811a328:	3202      	adds	r2, #2
 811a32a:	0092      	lsls	r2, r2, #2
 811a32c:	f107 010c 	add.w	r1, r7, #12
 811a330:	300c      	adds	r0, #12
 811a332:	f7fe fe01 	bl	8118f38 <memcpy>
 811a336:	2201      	movs	r2, #1
 811a338:	4629      	mov	r1, r5
 811a33a:	4620      	mov	r0, r4
 811a33c:	f000 fb12 	bl	811a964 <__lshift>
 811a340:	9b00      	ldr	r3, [sp, #0]
 811a342:	3301      	adds	r3, #1
 811a344:	9301      	str	r3, [sp, #4]
 811a346:	9b00      	ldr	r3, [sp, #0]
 811a348:	444b      	add	r3, r9
 811a34a:	9307      	str	r3, [sp, #28]
 811a34c:	9b02      	ldr	r3, [sp, #8]
 811a34e:	f003 0301 	and.w	r3, r3, #1
 811a352:	46b8      	mov	r8, r7
 811a354:	9306      	str	r3, [sp, #24]
 811a356:	4607      	mov	r7, r0
 811a358:	9b01      	ldr	r3, [sp, #4]
 811a35a:	4631      	mov	r1, r6
 811a35c:	3b01      	subs	r3, #1
 811a35e:	4658      	mov	r0, fp
 811a360:	9302      	str	r3, [sp, #8]
 811a362:	f7ff fa69 	bl	8119838 <quorem>
 811a366:	4603      	mov	r3, r0
 811a368:	3330      	adds	r3, #48	; 0x30
 811a36a:	9004      	str	r0, [sp, #16]
 811a36c:	4641      	mov	r1, r8
 811a36e:	4658      	mov	r0, fp
 811a370:	9308      	str	r3, [sp, #32]
 811a372:	f000 fb63 	bl	811aa3c <__mcmp>
 811a376:	463a      	mov	r2, r7
 811a378:	4681      	mov	r9, r0
 811a37a:	4631      	mov	r1, r6
 811a37c:	4620      	mov	r0, r4
 811a37e:	f000 fb79 	bl	811aa74 <__mdiff>
 811a382:	68c2      	ldr	r2, [r0, #12]
 811a384:	9b08      	ldr	r3, [sp, #32]
 811a386:	4605      	mov	r5, r0
 811a388:	bb02      	cbnz	r2, 811a3cc <_dtoa_r+0xa7c>
 811a38a:	4601      	mov	r1, r0
 811a38c:	4658      	mov	r0, fp
 811a38e:	f000 fb55 	bl	811aa3c <__mcmp>
 811a392:	9b08      	ldr	r3, [sp, #32]
 811a394:	4602      	mov	r2, r0
 811a396:	4629      	mov	r1, r5
 811a398:	4620      	mov	r0, r4
 811a39a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 811a39e:	f000 f90f 	bl	811a5c0 <_Bfree>
 811a3a2:	9b05      	ldr	r3, [sp, #20]
 811a3a4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 811a3a6:	9d01      	ldr	r5, [sp, #4]
 811a3a8:	ea43 0102 	orr.w	r1, r3, r2
 811a3ac:	9b06      	ldr	r3, [sp, #24]
 811a3ae:	430b      	orrs	r3, r1
 811a3b0:	9b08      	ldr	r3, [sp, #32]
 811a3b2:	d10d      	bne.n	811a3d0 <_dtoa_r+0xa80>
 811a3b4:	2b39      	cmp	r3, #57	; 0x39
 811a3b6:	d029      	beq.n	811a40c <_dtoa_r+0xabc>
 811a3b8:	f1b9 0f00 	cmp.w	r9, #0
 811a3bc:	dd01      	ble.n	811a3c2 <_dtoa_r+0xa72>
 811a3be:	9b04      	ldr	r3, [sp, #16]
 811a3c0:	3331      	adds	r3, #49	; 0x31
 811a3c2:	9a02      	ldr	r2, [sp, #8]
 811a3c4:	7013      	strb	r3, [r2, #0]
 811a3c6:	e774      	b.n	811a2b2 <_dtoa_r+0x962>
 811a3c8:	4638      	mov	r0, r7
 811a3ca:	e7b9      	b.n	811a340 <_dtoa_r+0x9f0>
 811a3cc:	2201      	movs	r2, #1
 811a3ce:	e7e2      	b.n	811a396 <_dtoa_r+0xa46>
 811a3d0:	f1b9 0f00 	cmp.w	r9, #0
 811a3d4:	db06      	blt.n	811a3e4 <_dtoa_r+0xa94>
 811a3d6:	9905      	ldr	r1, [sp, #20]
 811a3d8:	ea41 0909 	orr.w	r9, r1, r9
 811a3dc:	9906      	ldr	r1, [sp, #24]
 811a3de:	ea59 0101 	orrs.w	r1, r9, r1
 811a3e2:	d120      	bne.n	811a426 <_dtoa_r+0xad6>
 811a3e4:	2a00      	cmp	r2, #0
 811a3e6:	ddec      	ble.n	811a3c2 <_dtoa_r+0xa72>
 811a3e8:	4659      	mov	r1, fp
 811a3ea:	2201      	movs	r2, #1
 811a3ec:	4620      	mov	r0, r4
 811a3ee:	9301      	str	r3, [sp, #4]
 811a3f0:	f000 fab8 	bl	811a964 <__lshift>
 811a3f4:	4631      	mov	r1, r6
 811a3f6:	4683      	mov	fp, r0
 811a3f8:	f000 fb20 	bl	811aa3c <__mcmp>
 811a3fc:	2800      	cmp	r0, #0
 811a3fe:	9b01      	ldr	r3, [sp, #4]
 811a400:	dc02      	bgt.n	811a408 <_dtoa_r+0xab8>
 811a402:	d1de      	bne.n	811a3c2 <_dtoa_r+0xa72>
 811a404:	07da      	lsls	r2, r3, #31
 811a406:	d5dc      	bpl.n	811a3c2 <_dtoa_r+0xa72>
 811a408:	2b39      	cmp	r3, #57	; 0x39
 811a40a:	d1d8      	bne.n	811a3be <_dtoa_r+0xa6e>
 811a40c:	9a02      	ldr	r2, [sp, #8]
 811a40e:	2339      	movs	r3, #57	; 0x39
 811a410:	7013      	strb	r3, [r2, #0]
 811a412:	462b      	mov	r3, r5
 811a414:	461d      	mov	r5, r3
 811a416:	3b01      	subs	r3, #1
 811a418:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 811a41c:	2a39      	cmp	r2, #57	; 0x39
 811a41e:	d050      	beq.n	811a4c2 <_dtoa_r+0xb72>
 811a420:	3201      	adds	r2, #1
 811a422:	701a      	strb	r2, [r3, #0]
 811a424:	e745      	b.n	811a2b2 <_dtoa_r+0x962>
 811a426:	2a00      	cmp	r2, #0
 811a428:	dd03      	ble.n	811a432 <_dtoa_r+0xae2>
 811a42a:	2b39      	cmp	r3, #57	; 0x39
 811a42c:	d0ee      	beq.n	811a40c <_dtoa_r+0xabc>
 811a42e:	3301      	adds	r3, #1
 811a430:	e7c7      	b.n	811a3c2 <_dtoa_r+0xa72>
 811a432:	9a01      	ldr	r2, [sp, #4]
 811a434:	9907      	ldr	r1, [sp, #28]
 811a436:	f802 3c01 	strb.w	r3, [r2, #-1]
 811a43a:	428a      	cmp	r2, r1
 811a43c:	d02a      	beq.n	811a494 <_dtoa_r+0xb44>
 811a43e:	4659      	mov	r1, fp
 811a440:	2300      	movs	r3, #0
 811a442:	220a      	movs	r2, #10
 811a444:	4620      	mov	r0, r4
 811a446:	f000 f8dd 	bl	811a604 <__multadd>
 811a44a:	45b8      	cmp	r8, r7
 811a44c:	4683      	mov	fp, r0
 811a44e:	f04f 0300 	mov.w	r3, #0
 811a452:	f04f 020a 	mov.w	r2, #10
 811a456:	4641      	mov	r1, r8
 811a458:	4620      	mov	r0, r4
 811a45a:	d107      	bne.n	811a46c <_dtoa_r+0xb1c>
 811a45c:	f000 f8d2 	bl	811a604 <__multadd>
 811a460:	4680      	mov	r8, r0
 811a462:	4607      	mov	r7, r0
 811a464:	9b01      	ldr	r3, [sp, #4]
 811a466:	3301      	adds	r3, #1
 811a468:	9301      	str	r3, [sp, #4]
 811a46a:	e775      	b.n	811a358 <_dtoa_r+0xa08>
 811a46c:	f000 f8ca 	bl	811a604 <__multadd>
 811a470:	4639      	mov	r1, r7
 811a472:	4680      	mov	r8, r0
 811a474:	2300      	movs	r3, #0
 811a476:	220a      	movs	r2, #10
 811a478:	4620      	mov	r0, r4
 811a47a:	f000 f8c3 	bl	811a604 <__multadd>
 811a47e:	4607      	mov	r7, r0
 811a480:	e7f0      	b.n	811a464 <_dtoa_r+0xb14>
 811a482:	f1b9 0f00 	cmp.w	r9, #0
 811a486:	9a00      	ldr	r2, [sp, #0]
 811a488:	bfcc      	ite	gt
 811a48a:	464d      	movgt	r5, r9
 811a48c:	2501      	movle	r5, #1
 811a48e:	4415      	add	r5, r2
 811a490:	f04f 0800 	mov.w	r8, #0
 811a494:	4659      	mov	r1, fp
 811a496:	2201      	movs	r2, #1
 811a498:	4620      	mov	r0, r4
 811a49a:	9301      	str	r3, [sp, #4]
 811a49c:	f000 fa62 	bl	811a964 <__lshift>
 811a4a0:	4631      	mov	r1, r6
 811a4a2:	4683      	mov	fp, r0
 811a4a4:	f000 faca 	bl	811aa3c <__mcmp>
 811a4a8:	2800      	cmp	r0, #0
 811a4aa:	dcb2      	bgt.n	811a412 <_dtoa_r+0xac2>
 811a4ac:	d102      	bne.n	811a4b4 <_dtoa_r+0xb64>
 811a4ae:	9b01      	ldr	r3, [sp, #4]
 811a4b0:	07db      	lsls	r3, r3, #31
 811a4b2:	d4ae      	bmi.n	811a412 <_dtoa_r+0xac2>
 811a4b4:	462b      	mov	r3, r5
 811a4b6:	461d      	mov	r5, r3
 811a4b8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 811a4bc:	2a30      	cmp	r2, #48	; 0x30
 811a4be:	d0fa      	beq.n	811a4b6 <_dtoa_r+0xb66>
 811a4c0:	e6f7      	b.n	811a2b2 <_dtoa_r+0x962>
 811a4c2:	9a00      	ldr	r2, [sp, #0]
 811a4c4:	429a      	cmp	r2, r3
 811a4c6:	d1a5      	bne.n	811a414 <_dtoa_r+0xac4>
 811a4c8:	f10a 0a01 	add.w	sl, sl, #1
 811a4cc:	2331      	movs	r3, #49	; 0x31
 811a4ce:	e779      	b.n	811a3c4 <_dtoa_r+0xa74>
 811a4d0:	4b13      	ldr	r3, [pc, #76]	; (811a520 <_dtoa_r+0xbd0>)
 811a4d2:	f7ff baaf 	b.w	8119a34 <_dtoa_r+0xe4>
 811a4d6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 811a4d8:	2b00      	cmp	r3, #0
 811a4da:	f47f aa86 	bne.w	81199ea <_dtoa_r+0x9a>
 811a4de:	4b11      	ldr	r3, [pc, #68]	; (811a524 <_dtoa_r+0xbd4>)
 811a4e0:	f7ff baa8 	b.w	8119a34 <_dtoa_r+0xe4>
 811a4e4:	f1b9 0f00 	cmp.w	r9, #0
 811a4e8:	dc03      	bgt.n	811a4f2 <_dtoa_r+0xba2>
 811a4ea:	9b05      	ldr	r3, [sp, #20]
 811a4ec:	2b02      	cmp	r3, #2
 811a4ee:	f73f aec9 	bgt.w	811a284 <_dtoa_r+0x934>
 811a4f2:	9d00      	ldr	r5, [sp, #0]
 811a4f4:	4631      	mov	r1, r6
 811a4f6:	4658      	mov	r0, fp
 811a4f8:	f7ff f99e 	bl	8119838 <quorem>
 811a4fc:	f100 0330 	add.w	r3, r0, #48	; 0x30
 811a500:	f805 3b01 	strb.w	r3, [r5], #1
 811a504:	9a00      	ldr	r2, [sp, #0]
 811a506:	1aaa      	subs	r2, r5, r2
 811a508:	4591      	cmp	r9, r2
 811a50a:	ddba      	ble.n	811a482 <_dtoa_r+0xb32>
 811a50c:	4659      	mov	r1, fp
 811a50e:	2300      	movs	r3, #0
 811a510:	220a      	movs	r2, #10
 811a512:	4620      	mov	r0, r4
 811a514:	f000 f876 	bl	811a604 <__multadd>
 811a518:	4683      	mov	fp, r0
 811a51a:	e7eb      	b.n	811a4f4 <_dtoa_r+0xba4>
 811a51c:	0811bb23 	.word	0x0811bb23
 811a520:	0811ba7c 	.word	0x0811ba7c
 811a524:	0811baa0 	.word	0x0811baa0

0811a528 <_localeconv_r>:
 811a528:	4800      	ldr	r0, [pc, #0]	; (811a52c <_localeconv_r+0x4>)
 811a52a:	4770      	bx	lr
 811a52c:	100002dc 	.word	0x100002dc

0811a530 <malloc>:
 811a530:	4b02      	ldr	r3, [pc, #8]	; (811a53c <malloc+0xc>)
 811a532:	4601      	mov	r1, r0
 811a534:	6818      	ldr	r0, [r3, #0]
 811a536:	f000 bbe1 	b.w	811acfc <_malloc_r>
 811a53a:	bf00      	nop
 811a53c:	10000188 	.word	0x10000188

0811a540 <_Balloc>:
 811a540:	b570      	push	{r4, r5, r6, lr}
 811a542:	6a46      	ldr	r6, [r0, #36]	; 0x24
 811a544:	4604      	mov	r4, r0
 811a546:	460d      	mov	r5, r1
 811a548:	b976      	cbnz	r6, 811a568 <_Balloc+0x28>
 811a54a:	2010      	movs	r0, #16
 811a54c:	f7ff fff0 	bl	811a530 <malloc>
 811a550:	4602      	mov	r2, r0
 811a552:	6260      	str	r0, [r4, #36]	; 0x24
 811a554:	b920      	cbnz	r0, 811a560 <_Balloc+0x20>
 811a556:	4b18      	ldr	r3, [pc, #96]	; (811a5b8 <_Balloc+0x78>)
 811a558:	4818      	ldr	r0, [pc, #96]	; (811a5bc <_Balloc+0x7c>)
 811a55a:	2166      	movs	r1, #102	; 0x66
 811a55c:	f000 fc38 	bl	811add0 <__assert_func>
 811a560:	e9c0 6601 	strd	r6, r6, [r0, #4]
 811a564:	6006      	str	r6, [r0, #0]
 811a566:	60c6      	str	r6, [r0, #12]
 811a568:	6a66      	ldr	r6, [r4, #36]	; 0x24
 811a56a:	68f3      	ldr	r3, [r6, #12]
 811a56c:	b183      	cbz	r3, 811a590 <_Balloc+0x50>
 811a56e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 811a570:	68db      	ldr	r3, [r3, #12]
 811a572:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 811a576:	b9b8      	cbnz	r0, 811a5a8 <_Balloc+0x68>
 811a578:	2101      	movs	r1, #1
 811a57a:	fa01 f605 	lsl.w	r6, r1, r5
 811a57e:	1d72      	adds	r2, r6, #5
 811a580:	0092      	lsls	r2, r2, #2
 811a582:	4620      	mov	r0, r4
 811a584:	f000 fb5a 	bl	811ac3c <_calloc_r>
 811a588:	b160      	cbz	r0, 811a5a4 <_Balloc+0x64>
 811a58a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 811a58e:	e00e      	b.n	811a5ae <_Balloc+0x6e>
 811a590:	2221      	movs	r2, #33	; 0x21
 811a592:	2104      	movs	r1, #4
 811a594:	4620      	mov	r0, r4
 811a596:	f000 fb51 	bl	811ac3c <_calloc_r>
 811a59a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 811a59c:	60f0      	str	r0, [r6, #12]
 811a59e:	68db      	ldr	r3, [r3, #12]
 811a5a0:	2b00      	cmp	r3, #0
 811a5a2:	d1e4      	bne.n	811a56e <_Balloc+0x2e>
 811a5a4:	2000      	movs	r0, #0
 811a5a6:	bd70      	pop	{r4, r5, r6, pc}
 811a5a8:	6802      	ldr	r2, [r0, #0]
 811a5aa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 811a5ae:	2300      	movs	r3, #0
 811a5b0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 811a5b4:	e7f7      	b.n	811a5a6 <_Balloc+0x66>
 811a5b6:	bf00      	nop
 811a5b8:	0811baad 	.word	0x0811baad
 811a5bc:	0811bb34 	.word	0x0811bb34

0811a5c0 <_Bfree>:
 811a5c0:	b570      	push	{r4, r5, r6, lr}
 811a5c2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 811a5c4:	4605      	mov	r5, r0
 811a5c6:	460c      	mov	r4, r1
 811a5c8:	b976      	cbnz	r6, 811a5e8 <_Bfree+0x28>
 811a5ca:	2010      	movs	r0, #16
 811a5cc:	f7ff ffb0 	bl	811a530 <malloc>
 811a5d0:	4602      	mov	r2, r0
 811a5d2:	6268      	str	r0, [r5, #36]	; 0x24
 811a5d4:	b920      	cbnz	r0, 811a5e0 <_Bfree+0x20>
 811a5d6:	4b09      	ldr	r3, [pc, #36]	; (811a5fc <_Bfree+0x3c>)
 811a5d8:	4809      	ldr	r0, [pc, #36]	; (811a600 <_Bfree+0x40>)
 811a5da:	218a      	movs	r1, #138	; 0x8a
 811a5dc:	f000 fbf8 	bl	811add0 <__assert_func>
 811a5e0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 811a5e4:	6006      	str	r6, [r0, #0]
 811a5e6:	60c6      	str	r6, [r0, #12]
 811a5e8:	b13c      	cbz	r4, 811a5fa <_Bfree+0x3a>
 811a5ea:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 811a5ec:	6862      	ldr	r2, [r4, #4]
 811a5ee:	68db      	ldr	r3, [r3, #12]
 811a5f0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 811a5f4:	6021      	str	r1, [r4, #0]
 811a5f6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 811a5fa:	bd70      	pop	{r4, r5, r6, pc}
 811a5fc:	0811baad 	.word	0x0811baad
 811a600:	0811bb34 	.word	0x0811bb34

0811a604 <__multadd>:
 811a604:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 811a608:	690e      	ldr	r6, [r1, #16]
 811a60a:	4607      	mov	r7, r0
 811a60c:	4698      	mov	r8, r3
 811a60e:	460c      	mov	r4, r1
 811a610:	f101 0014 	add.w	r0, r1, #20
 811a614:	2300      	movs	r3, #0
 811a616:	6805      	ldr	r5, [r0, #0]
 811a618:	b2a9      	uxth	r1, r5
 811a61a:	fb02 8101 	mla	r1, r2, r1, r8
 811a61e:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 811a622:	0c2d      	lsrs	r5, r5, #16
 811a624:	fb02 c505 	mla	r5, r2, r5, ip
 811a628:	b289      	uxth	r1, r1
 811a62a:	3301      	adds	r3, #1
 811a62c:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 811a630:	429e      	cmp	r6, r3
 811a632:	f840 1b04 	str.w	r1, [r0], #4
 811a636:	ea4f 4815 	mov.w	r8, r5, lsr #16
 811a63a:	dcec      	bgt.n	811a616 <__multadd+0x12>
 811a63c:	f1b8 0f00 	cmp.w	r8, #0
 811a640:	d022      	beq.n	811a688 <__multadd+0x84>
 811a642:	68a3      	ldr	r3, [r4, #8]
 811a644:	42b3      	cmp	r3, r6
 811a646:	dc19      	bgt.n	811a67c <__multadd+0x78>
 811a648:	6861      	ldr	r1, [r4, #4]
 811a64a:	4638      	mov	r0, r7
 811a64c:	3101      	adds	r1, #1
 811a64e:	f7ff ff77 	bl	811a540 <_Balloc>
 811a652:	4605      	mov	r5, r0
 811a654:	b928      	cbnz	r0, 811a662 <__multadd+0x5e>
 811a656:	4602      	mov	r2, r0
 811a658:	4b0d      	ldr	r3, [pc, #52]	; (811a690 <__multadd+0x8c>)
 811a65a:	480e      	ldr	r0, [pc, #56]	; (811a694 <__multadd+0x90>)
 811a65c:	21b5      	movs	r1, #181	; 0xb5
 811a65e:	f000 fbb7 	bl	811add0 <__assert_func>
 811a662:	6922      	ldr	r2, [r4, #16]
 811a664:	3202      	adds	r2, #2
 811a666:	f104 010c 	add.w	r1, r4, #12
 811a66a:	0092      	lsls	r2, r2, #2
 811a66c:	300c      	adds	r0, #12
 811a66e:	f7fe fc63 	bl	8118f38 <memcpy>
 811a672:	4621      	mov	r1, r4
 811a674:	4638      	mov	r0, r7
 811a676:	f7ff ffa3 	bl	811a5c0 <_Bfree>
 811a67a:	462c      	mov	r4, r5
 811a67c:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 811a680:	3601      	adds	r6, #1
 811a682:	f8c3 8014 	str.w	r8, [r3, #20]
 811a686:	6126      	str	r6, [r4, #16]
 811a688:	4620      	mov	r0, r4
 811a68a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 811a68e:	bf00      	nop
 811a690:	0811bb23 	.word	0x0811bb23
 811a694:	0811bb34 	.word	0x0811bb34

0811a698 <__hi0bits>:
 811a698:	0c03      	lsrs	r3, r0, #16
 811a69a:	041b      	lsls	r3, r3, #16
 811a69c:	b9d3      	cbnz	r3, 811a6d4 <__hi0bits+0x3c>
 811a69e:	0400      	lsls	r0, r0, #16
 811a6a0:	2310      	movs	r3, #16
 811a6a2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 811a6a6:	bf04      	itt	eq
 811a6a8:	0200      	lsleq	r0, r0, #8
 811a6aa:	3308      	addeq	r3, #8
 811a6ac:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 811a6b0:	bf04      	itt	eq
 811a6b2:	0100      	lsleq	r0, r0, #4
 811a6b4:	3304      	addeq	r3, #4
 811a6b6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 811a6ba:	bf04      	itt	eq
 811a6bc:	0080      	lsleq	r0, r0, #2
 811a6be:	3302      	addeq	r3, #2
 811a6c0:	2800      	cmp	r0, #0
 811a6c2:	db05      	blt.n	811a6d0 <__hi0bits+0x38>
 811a6c4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 811a6c8:	f103 0301 	add.w	r3, r3, #1
 811a6cc:	bf08      	it	eq
 811a6ce:	2320      	moveq	r3, #32
 811a6d0:	4618      	mov	r0, r3
 811a6d2:	4770      	bx	lr
 811a6d4:	2300      	movs	r3, #0
 811a6d6:	e7e4      	b.n	811a6a2 <__hi0bits+0xa>

0811a6d8 <__lo0bits>:
 811a6d8:	6803      	ldr	r3, [r0, #0]
 811a6da:	f013 0207 	ands.w	r2, r3, #7
 811a6de:	4601      	mov	r1, r0
 811a6e0:	d00b      	beq.n	811a6fa <__lo0bits+0x22>
 811a6e2:	07da      	lsls	r2, r3, #31
 811a6e4:	d424      	bmi.n	811a730 <__lo0bits+0x58>
 811a6e6:	0798      	lsls	r0, r3, #30
 811a6e8:	bf49      	itett	mi
 811a6ea:	085b      	lsrmi	r3, r3, #1
 811a6ec:	089b      	lsrpl	r3, r3, #2
 811a6ee:	2001      	movmi	r0, #1
 811a6f0:	600b      	strmi	r3, [r1, #0]
 811a6f2:	bf5c      	itt	pl
 811a6f4:	600b      	strpl	r3, [r1, #0]
 811a6f6:	2002      	movpl	r0, #2
 811a6f8:	4770      	bx	lr
 811a6fa:	b298      	uxth	r0, r3
 811a6fc:	b9b0      	cbnz	r0, 811a72c <__lo0bits+0x54>
 811a6fe:	0c1b      	lsrs	r3, r3, #16
 811a700:	2010      	movs	r0, #16
 811a702:	f013 0fff 	tst.w	r3, #255	; 0xff
 811a706:	bf04      	itt	eq
 811a708:	0a1b      	lsreq	r3, r3, #8
 811a70a:	3008      	addeq	r0, #8
 811a70c:	071a      	lsls	r2, r3, #28
 811a70e:	bf04      	itt	eq
 811a710:	091b      	lsreq	r3, r3, #4
 811a712:	3004      	addeq	r0, #4
 811a714:	079a      	lsls	r2, r3, #30
 811a716:	bf04      	itt	eq
 811a718:	089b      	lsreq	r3, r3, #2
 811a71a:	3002      	addeq	r0, #2
 811a71c:	07da      	lsls	r2, r3, #31
 811a71e:	d403      	bmi.n	811a728 <__lo0bits+0x50>
 811a720:	085b      	lsrs	r3, r3, #1
 811a722:	f100 0001 	add.w	r0, r0, #1
 811a726:	d005      	beq.n	811a734 <__lo0bits+0x5c>
 811a728:	600b      	str	r3, [r1, #0]
 811a72a:	4770      	bx	lr
 811a72c:	4610      	mov	r0, r2
 811a72e:	e7e8      	b.n	811a702 <__lo0bits+0x2a>
 811a730:	2000      	movs	r0, #0
 811a732:	4770      	bx	lr
 811a734:	2020      	movs	r0, #32
 811a736:	4770      	bx	lr

0811a738 <__i2b>:
 811a738:	b510      	push	{r4, lr}
 811a73a:	460c      	mov	r4, r1
 811a73c:	2101      	movs	r1, #1
 811a73e:	f7ff feff 	bl	811a540 <_Balloc>
 811a742:	4602      	mov	r2, r0
 811a744:	b928      	cbnz	r0, 811a752 <__i2b+0x1a>
 811a746:	4b05      	ldr	r3, [pc, #20]	; (811a75c <__i2b+0x24>)
 811a748:	4805      	ldr	r0, [pc, #20]	; (811a760 <__i2b+0x28>)
 811a74a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 811a74e:	f000 fb3f 	bl	811add0 <__assert_func>
 811a752:	2301      	movs	r3, #1
 811a754:	6144      	str	r4, [r0, #20]
 811a756:	6103      	str	r3, [r0, #16]
 811a758:	bd10      	pop	{r4, pc}
 811a75a:	bf00      	nop
 811a75c:	0811bb23 	.word	0x0811bb23
 811a760:	0811bb34 	.word	0x0811bb34

0811a764 <__multiply>:
 811a764:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 811a768:	4614      	mov	r4, r2
 811a76a:	690a      	ldr	r2, [r1, #16]
 811a76c:	6923      	ldr	r3, [r4, #16]
 811a76e:	429a      	cmp	r2, r3
 811a770:	bfb8      	it	lt
 811a772:	460b      	movlt	r3, r1
 811a774:	460d      	mov	r5, r1
 811a776:	bfbc      	itt	lt
 811a778:	4625      	movlt	r5, r4
 811a77a:	461c      	movlt	r4, r3
 811a77c:	f8d5 a010 	ldr.w	sl, [r5, #16]
 811a780:	f8d4 9010 	ldr.w	r9, [r4, #16]
 811a784:	68ab      	ldr	r3, [r5, #8]
 811a786:	6869      	ldr	r1, [r5, #4]
 811a788:	eb0a 0709 	add.w	r7, sl, r9
 811a78c:	42bb      	cmp	r3, r7
 811a78e:	b085      	sub	sp, #20
 811a790:	bfb8      	it	lt
 811a792:	3101      	addlt	r1, #1
 811a794:	f7ff fed4 	bl	811a540 <_Balloc>
 811a798:	b930      	cbnz	r0, 811a7a8 <__multiply+0x44>
 811a79a:	4602      	mov	r2, r0
 811a79c:	4b42      	ldr	r3, [pc, #264]	; (811a8a8 <__multiply+0x144>)
 811a79e:	4843      	ldr	r0, [pc, #268]	; (811a8ac <__multiply+0x148>)
 811a7a0:	f240 115d 	movw	r1, #349	; 0x15d
 811a7a4:	f000 fb14 	bl	811add0 <__assert_func>
 811a7a8:	f100 0614 	add.w	r6, r0, #20
 811a7ac:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 811a7b0:	4633      	mov	r3, r6
 811a7b2:	2200      	movs	r2, #0
 811a7b4:	4543      	cmp	r3, r8
 811a7b6:	d31e      	bcc.n	811a7f6 <__multiply+0x92>
 811a7b8:	f105 0c14 	add.w	ip, r5, #20
 811a7bc:	f104 0314 	add.w	r3, r4, #20
 811a7c0:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 811a7c4:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 811a7c8:	9202      	str	r2, [sp, #8]
 811a7ca:	ebac 0205 	sub.w	r2, ip, r5
 811a7ce:	3a15      	subs	r2, #21
 811a7d0:	f022 0203 	bic.w	r2, r2, #3
 811a7d4:	3204      	adds	r2, #4
 811a7d6:	f105 0115 	add.w	r1, r5, #21
 811a7da:	458c      	cmp	ip, r1
 811a7dc:	bf38      	it	cc
 811a7de:	2204      	movcc	r2, #4
 811a7e0:	9201      	str	r2, [sp, #4]
 811a7e2:	9a02      	ldr	r2, [sp, #8]
 811a7e4:	9303      	str	r3, [sp, #12]
 811a7e6:	429a      	cmp	r2, r3
 811a7e8:	d808      	bhi.n	811a7fc <__multiply+0x98>
 811a7ea:	2f00      	cmp	r7, #0
 811a7ec:	dc55      	bgt.n	811a89a <__multiply+0x136>
 811a7ee:	6107      	str	r7, [r0, #16]
 811a7f0:	b005      	add	sp, #20
 811a7f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 811a7f6:	f843 2b04 	str.w	r2, [r3], #4
 811a7fa:	e7db      	b.n	811a7b4 <__multiply+0x50>
 811a7fc:	f8b3 a000 	ldrh.w	sl, [r3]
 811a800:	f1ba 0f00 	cmp.w	sl, #0
 811a804:	d020      	beq.n	811a848 <__multiply+0xe4>
 811a806:	f105 0e14 	add.w	lr, r5, #20
 811a80a:	46b1      	mov	r9, r6
 811a80c:	2200      	movs	r2, #0
 811a80e:	f85e 4b04 	ldr.w	r4, [lr], #4
 811a812:	f8d9 b000 	ldr.w	fp, [r9]
 811a816:	b2a1      	uxth	r1, r4
 811a818:	fa1f fb8b 	uxth.w	fp, fp
 811a81c:	fb0a b101 	mla	r1, sl, r1, fp
 811a820:	4411      	add	r1, r2
 811a822:	f8d9 2000 	ldr.w	r2, [r9]
 811a826:	0c24      	lsrs	r4, r4, #16
 811a828:	0c12      	lsrs	r2, r2, #16
 811a82a:	fb0a 2404 	mla	r4, sl, r4, r2
 811a82e:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 811a832:	b289      	uxth	r1, r1
 811a834:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 811a838:	45f4      	cmp	ip, lr
 811a83a:	f849 1b04 	str.w	r1, [r9], #4
 811a83e:	ea4f 4214 	mov.w	r2, r4, lsr #16
 811a842:	d8e4      	bhi.n	811a80e <__multiply+0xaa>
 811a844:	9901      	ldr	r1, [sp, #4]
 811a846:	5072      	str	r2, [r6, r1]
 811a848:	9a03      	ldr	r2, [sp, #12]
 811a84a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 811a84e:	3304      	adds	r3, #4
 811a850:	f1b9 0f00 	cmp.w	r9, #0
 811a854:	d01f      	beq.n	811a896 <__multiply+0x132>
 811a856:	6834      	ldr	r4, [r6, #0]
 811a858:	f105 0114 	add.w	r1, r5, #20
 811a85c:	46b6      	mov	lr, r6
 811a85e:	f04f 0a00 	mov.w	sl, #0
 811a862:	880a      	ldrh	r2, [r1, #0]
 811a864:	f8be b002 	ldrh.w	fp, [lr, #2]
 811a868:	fb09 b202 	mla	r2, r9, r2, fp
 811a86c:	4492      	add	sl, r2
 811a86e:	b2a4      	uxth	r4, r4
 811a870:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 811a874:	f84e 4b04 	str.w	r4, [lr], #4
 811a878:	f851 4b04 	ldr.w	r4, [r1], #4
 811a87c:	f8be 2000 	ldrh.w	r2, [lr]
 811a880:	0c24      	lsrs	r4, r4, #16
 811a882:	fb09 2404 	mla	r4, r9, r4, r2
 811a886:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 811a88a:	458c      	cmp	ip, r1
 811a88c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 811a890:	d8e7      	bhi.n	811a862 <__multiply+0xfe>
 811a892:	9a01      	ldr	r2, [sp, #4]
 811a894:	50b4      	str	r4, [r6, r2]
 811a896:	3604      	adds	r6, #4
 811a898:	e7a3      	b.n	811a7e2 <__multiply+0x7e>
 811a89a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 811a89e:	2b00      	cmp	r3, #0
 811a8a0:	d1a5      	bne.n	811a7ee <__multiply+0x8a>
 811a8a2:	3f01      	subs	r7, #1
 811a8a4:	e7a1      	b.n	811a7ea <__multiply+0x86>
 811a8a6:	bf00      	nop
 811a8a8:	0811bb23 	.word	0x0811bb23
 811a8ac:	0811bb34 	.word	0x0811bb34

0811a8b0 <__pow5mult>:
 811a8b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 811a8b4:	4615      	mov	r5, r2
 811a8b6:	f012 0203 	ands.w	r2, r2, #3
 811a8ba:	4606      	mov	r6, r0
 811a8bc:	460f      	mov	r7, r1
 811a8be:	d007      	beq.n	811a8d0 <__pow5mult+0x20>
 811a8c0:	4c25      	ldr	r4, [pc, #148]	; (811a958 <__pow5mult+0xa8>)
 811a8c2:	3a01      	subs	r2, #1
 811a8c4:	2300      	movs	r3, #0
 811a8c6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 811a8ca:	f7ff fe9b 	bl	811a604 <__multadd>
 811a8ce:	4607      	mov	r7, r0
 811a8d0:	10ad      	asrs	r5, r5, #2
 811a8d2:	d03d      	beq.n	811a950 <__pow5mult+0xa0>
 811a8d4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 811a8d6:	b97c      	cbnz	r4, 811a8f8 <__pow5mult+0x48>
 811a8d8:	2010      	movs	r0, #16
 811a8da:	f7ff fe29 	bl	811a530 <malloc>
 811a8de:	4602      	mov	r2, r0
 811a8e0:	6270      	str	r0, [r6, #36]	; 0x24
 811a8e2:	b928      	cbnz	r0, 811a8f0 <__pow5mult+0x40>
 811a8e4:	4b1d      	ldr	r3, [pc, #116]	; (811a95c <__pow5mult+0xac>)
 811a8e6:	481e      	ldr	r0, [pc, #120]	; (811a960 <__pow5mult+0xb0>)
 811a8e8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 811a8ec:	f000 fa70 	bl	811add0 <__assert_func>
 811a8f0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 811a8f4:	6004      	str	r4, [r0, #0]
 811a8f6:	60c4      	str	r4, [r0, #12]
 811a8f8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 811a8fc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 811a900:	b94c      	cbnz	r4, 811a916 <__pow5mult+0x66>
 811a902:	f240 2171 	movw	r1, #625	; 0x271
 811a906:	4630      	mov	r0, r6
 811a908:	f7ff ff16 	bl	811a738 <__i2b>
 811a90c:	2300      	movs	r3, #0
 811a90e:	f8c8 0008 	str.w	r0, [r8, #8]
 811a912:	4604      	mov	r4, r0
 811a914:	6003      	str	r3, [r0, #0]
 811a916:	f04f 0900 	mov.w	r9, #0
 811a91a:	07eb      	lsls	r3, r5, #31
 811a91c:	d50a      	bpl.n	811a934 <__pow5mult+0x84>
 811a91e:	4639      	mov	r1, r7
 811a920:	4622      	mov	r2, r4
 811a922:	4630      	mov	r0, r6
 811a924:	f7ff ff1e 	bl	811a764 <__multiply>
 811a928:	4639      	mov	r1, r7
 811a92a:	4680      	mov	r8, r0
 811a92c:	4630      	mov	r0, r6
 811a92e:	f7ff fe47 	bl	811a5c0 <_Bfree>
 811a932:	4647      	mov	r7, r8
 811a934:	106d      	asrs	r5, r5, #1
 811a936:	d00b      	beq.n	811a950 <__pow5mult+0xa0>
 811a938:	6820      	ldr	r0, [r4, #0]
 811a93a:	b938      	cbnz	r0, 811a94c <__pow5mult+0x9c>
 811a93c:	4622      	mov	r2, r4
 811a93e:	4621      	mov	r1, r4
 811a940:	4630      	mov	r0, r6
 811a942:	f7ff ff0f 	bl	811a764 <__multiply>
 811a946:	6020      	str	r0, [r4, #0]
 811a948:	f8c0 9000 	str.w	r9, [r0]
 811a94c:	4604      	mov	r4, r0
 811a94e:	e7e4      	b.n	811a91a <__pow5mult+0x6a>
 811a950:	4638      	mov	r0, r7
 811a952:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 811a956:	bf00      	nop
 811a958:	0811bc88 	.word	0x0811bc88
 811a95c:	0811baad 	.word	0x0811baad
 811a960:	0811bb34 	.word	0x0811bb34

0811a964 <__lshift>:
 811a964:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 811a968:	460c      	mov	r4, r1
 811a96a:	6849      	ldr	r1, [r1, #4]
 811a96c:	6923      	ldr	r3, [r4, #16]
 811a96e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 811a972:	68a3      	ldr	r3, [r4, #8]
 811a974:	4607      	mov	r7, r0
 811a976:	4691      	mov	r9, r2
 811a978:	ea4f 1a62 	mov.w	sl, r2, asr #5
 811a97c:	f108 0601 	add.w	r6, r8, #1
 811a980:	42b3      	cmp	r3, r6
 811a982:	db0b      	blt.n	811a99c <__lshift+0x38>
 811a984:	4638      	mov	r0, r7
 811a986:	f7ff fddb 	bl	811a540 <_Balloc>
 811a98a:	4605      	mov	r5, r0
 811a98c:	b948      	cbnz	r0, 811a9a2 <__lshift+0x3e>
 811a98e:	4602      	mov	r2, r0
 811a990:	4b28      	ldr	r3, [pc, #160]	; (811aa34 <__lshift+0xd0>)
 811a992:	4829      	ldr	r0, [pc, #164]	; (811aa38 <__lshift+0xd4>)
 811a994:	f240 11d9 	movw	r1, #473	; 0x1d9
 811a998:	f000 fa1a 	bl	811add0 <__assert_func>
 811a99c:	3101      	adds	r1, #1
 811a99e:	005b      	lsls	r3, r3, #1
 811a9a0:	e7ee      	b.n	811a980 <__lshift+0x1c>
 811a9a2:	2300      	movs	r3, #0
 811a9a4:	f100 0114 	add.w	r1, r0, #20
 811a9a8:	f100 0210 	add.w	r2, r0, #16
 811a9ac:	4618      	mov	r0, r3
 811a9ae:	4553      	cmp	r3, sl
 811a9b0:	db33      	blt.n	811aa1a <__lshift+0xb6>
 811a9b2:	6920      	ldr	r0, [r4, #16]
 811a9b4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 811a9b8:	f104 0314 	add.w	r3, r4, #20
 811a9bc:	f019 091f 	ands.w	r9, r9, #31
 811a9c0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 811a9c4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 811a9c8:	d02b      	beq.n	811aa22 <__lshift+0xbe>
 811a9ca:	f1c9 0e20 	rsb	lr, r9, #32
 811a9ce:	468a      	mov	sl, r1
 811a9d0:	2200      	movs	r2, #0
 811a9d2:	6818      	ldr	r0, [r3, #0]
 811a9d4:	fa00 f009 	lsl.w	r0, r0, r9
 811a9d8:	4302      	orrs	r2, r0
 811a9da:	f84a 2b04 	str.w	r2, [sl], #4
 811a9de:	f853 2b04 	ldr.w	r2, [r3], #4
 811a9e2:	459c      	cmp	ip, r3
 811a9e4:	fa22 f20e 	lsr.w	r2, r2, lr
 811a9e8:	d8f3      	bhi.n	811a9d2 <__lshift+0x6e>
 811a9ea:	ebac 0304 	sub.w	r3, ip, r4
 811a9ee:	3b15      	subs	r3, #21
 811a9f0:	f023 0303 	bic.w	r3, r3, #3
 811a9f4:	3304      	adds	r3, #4
 811a9f6:	f104 0015 	add.w	r0, r4, #21
 811a9fa:	4584      	cmp	ip, r0
 811a9fc:	bf38      	it	cc
 811a9fe:	2304      	movcc	r3, #4
 811aa00:	50ca      	str	r2, [r1, r3]
 811aa02:	b10a      	cbz	r2, 811aa08 <__lshift+0xa4>
 811aa04:	f108 0602 	add.w	r6, r8, #2
 811aa08:	3e01      	subs	r6, #1
 811aa0a:	4638      	mov	r0, r7
 811aa0c:	612e      	str	r6, [r5, #16]
 811aa0e:	4621      	mov	r1, r4
 811aa10:	f7ff fdd6 	bl	811a5c0 <_Bfree>
 811aa14:	4628      	mov	r0, r5
 811aa16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 811aa1a:	f842 0f04 	str.w	r0, [r2, #4]!
 811aa1e:	3301      	adds	r3, #1
 811aa20:	e7c5      	b.n	811a9ae <__lshift+0x4a>
 811aa22:	3904      	subs	r1, #4
 811aa24:	f853 2b04 	ldr.w	r2, [r3], #4
 811aa28:	f841 2f04 	str.w	r2, [r1, #4]!
 811aa2c:	459c      	cmp	ip, r3
 811aa2e:	d8f9      	bhi.n	811aa24 <__lshift+0xc0>
 811aa30:	e7ea      	b.n	811aa08 <__lshift+0xa4>
 811aa32:	bf00      	nop
 811aa34:	0811bb23 	.word	0x0811bb23
 811aa38:	0811bb34 	.word	0x0811bb34

0811aa3c <__mcmp>:
 811aa3c:	b530      	push	{r4, r5, lr}
 811aa3e:	6902      	ldr	r2, [r0, #16]
 811aa40:	690c      	ldr	r4, [r1, #16]
 811aa42:	1b12      	subs	r2, r2, r4
 811aa44:	d10e      	bne.n	811aa64 <__mcmp+0x28>
 811aa46:	f100 0314 	add.w	r3, r0, #20
 811aa4a:	3114      	adds	r1, #20
 811aa4c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 811aa50:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 811aa54:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 811aa58:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 811aa5c:	42a5      	cmp	r5, r4
 811aa5e:	d003      	beq.n	811aa68 <__mcmp+0x2c>
 811aa60:	d305      	bcc.n	811aa6e <__mcmp+0x32>
 811aa62:	2201      	movs	r2, #1
 811aa64:	4610      	mov	r0, r2
 811aa66:	bd30      	pop	{r4, r5, pc}
 811aa68:	4283      	cmp	r3, r0
 811aa6a:	d3f3      	bcc.n	811aa54 <__mcmp+0x18>
 811aa6c:	e7fa      	b.n	811aa64 <__mcmp+0x28>
 811aa6e:	f04f 32ff 	mov.w	r2, #4294967295
 811aa72:	e7f7      	b.n	811aa64 <__mcmp+0x28>

0811aa74 <__mdiff>:
 811aa74:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 811aa78:	460c      	mov	r4, r1
 811aa7a:	4606      	mov	r6, r0
 811aa7c:	4611      	mov	r1, r2
 811aa7e:	4620      	mov	r0, r4
 811aa80:	4617      	mov	r7, r2
 811aa82:	f7ff ffdb 	bl	811aa3c <__mcmp>
 811aa86:	1e05      	subs	r5, r0, #0
 811aa88:	d110      	bne.n	811aaac <__mdiff+0x38>
 811aa8a:	4629      	mov	r1, r5
 811aa8c:	4630      	mov	r0, r6
 811aa8e:	f7ff fd57 	bl	811a540 <_Balloc>
 811aa92:	b930      	cbnz	r0, 811aaa2 <__mdiff+0x2e>
 811aa94:	4b39      	ldr	r3, [pc, #228]	; (811ab7c <__mdiff+0x108>)
 811aa96:	4602      	mov	r2, r0
 811aa98:	f240 2132 	movw	r1, #562	; 0x232
 811aa9c:	4838      	ldr	r0, [pc, #224]	; (811ab80 <__mdiff+0x10c>)
 811aa9e:	f000 f997 	bl	811add0 <__assert_func>
 811aaa2:	2301      	movs	r3, #1
 811aaa4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 811aaa8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 811aaac:	bfa4      	itt	ge
 811aaae:	463b      	movge	r3, r7
 811aab0:	4627      	movge	r7, r4
 811aab2:	4630      	mov	r0, r6
 811aab4:	6879      	ldr	r1, [r7, #4]
 811aab6:	bfa6      	itte	ge
 811aab8:	461c      	movge	r4, r3
 811aaba:	2500      	movge	r5, #0
 811aabc:	2501      	movlt	r5, #1
 811aabe:	f7ff fd3f 	bl	811a540 <_Balloc>
 811aac2:	b920      	cbnz	r0, 811aace <__mdiff+0x5a>
 811aac4:	4b2d      	ldr	r3, [pc, #180]	; (811ab7c <__mdiff+0x108>)
 811aac6:	4602      	mov	r2, r0
 811aac8:	f44f 7110 	mov.w	r1, #576	; 0x240
 811aacc:	e7e6      	b.n	811aa9c <__mdiff+0x28>
 811aace:	693e      	ldr	r6, [r7, #16]
 811aad0:	60c5      	str	r5, [r0, #12]
 811aad2:	6925      	ldr	r5, [r4, #16]
 811aad4:	f107 0114 	add.w	r1, r7, #20
 811aad8:	f104 0914 	add.w	r9, r4, #20
 811aadc:	f100 0e14 	add.w	lr, r0, #20
 811aae0:	f107 0210 	add.w	r2, r7, #16
 811aae4:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 811aae8:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 811aaec:	46f2      	mov	sl, lr
 811aaee:	2700      	movs	r7, #0
 811aaf0:	f859 3b04 	ldr.w	r3, [r9], #4
 811aaf4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 811aaf8:	fa1f f883 	uxth.w	r8, r3
 811aafc:	fa17 f78b 	uxtah	r7, r7, fp
 811ab00:	0c1b      	lsrs	r3, r3, #16
 811ab02:	eba7 0808 	sub.w	r8, r7, r8
 811ab06:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 811ab0a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 811ab0e:	fa1f f888 	uxth.w	r8, r8
 811ab12:	141f      	asrs	r7, r3, #16
 811ab14:	454d      	cmp	r5, r9
 811ab16:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 811ab1a:	f84a 3b04 	str.w	r3, [sl], #4
 811ab1e:	d8e7      	bhi.n	811aaf0 <__mdiff+0x7c>
 811ab20:	1b2b      	subs	r3, r5, r4
 811ab22:	3b15      	subs	r3, #21
 811ab24:	f023 0303 	bic.w	r3, r3, #3
 811ab28:	3304      	adds	r3, #4
 811ab2a:	3415      	adds	r4, #21
 811ab2c:	42a5      	cmp	r5, r4
 811ab2e:	bf38      	it	cc
 811ab30:	2304      	movcc	r3, #4
 811ab32:	4419      	add	r1, r3
 811ab34:	4473      	add	r3, lr
 811ab36:	469e      	mov	lr, r3
 811ab38:	460d      	mov	r5, r1
 811ab3a:	4565      	cmp	r5, ip
 811ab3c:	d30e      	bcc.n	811ab5c <__mdiff+0xe8>
 811ab3e:	f10c 0203 	add.w	r2, ip, #3
 811ab42:	1a52      	subs	r2, r2, r1
 811ab44:	f022 0203 	bic.w	r2, r2, #3
 811ab48:	3903      	subs	r1, #3
 811ab4a:	458c      	cmp	ip, r1
 811ab4c:	bf38      	it	cc
 811ab4e:	2200      	movcc	r2, #0
 811ab50:	441a      	add	r2, r3
 811ab52:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 811ab56:	b17b      	cbz	r3, 811ab78 <__mdiff+0x104>
 811ab58:	6106      	str	r6, [r0, #16]
 811ab5a:	e7a5      	b.n	811aaa8 <__mdiff+0x34>
 811ab5c:	f855 8b04 	ldr.w	r8, [r5], #4
 811ab60:	fa17 f488 	uxtah	r4, r7, r8
 811ab64:	1422      	asrs	r2, r4, #16
 811ab66:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 811ab6a:	b2a4      	uxth	r4, r4
 811ab6c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 811ab70:	f84e 4b04 	str.w	r4, [lr], #4
 811ab74:	1417      	asrs	r7, r2, #16
 811ab76:	e7e0      	b.n	811ab3a <__mdiff+0xc6>
 811ab78:	3e01      	subs	r6, #1
 811ab7a:	e7ea      	b.n	811ab52 <__mdiff+0xde>
 811ab7c:	0811bb23 	.word	0x0811bb23
 811ab80:	0811bb34 	.word	0x0811bb34

0811ab84 <__d2b>:
 811ab84:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 811ab88:	4689      	mov	r9, r1
 811ab8a:	2101      	movs	r1, #1
 811ab8c:	ec57 6b10 	vmov	r6, r7, d0
 811ab90:	4690      	mov	r8, r2
 811ab92:	f7ff fcd5 	bl	811a540 <_Balloc>
 811ab96:	4604      	mov	r4, r0
 811ab98:	b930      	cbnz	r0, 811aba8 <__d2b+0x24>
 811ab9a:	4602      	mov	r2, r0
 811ab9c:	4b25      	ldr	r3, [pc, #148]	; (811ac34 <__d2b+0xb0>)
 811ab9e:	4826      	ldr	r0, [pc, #152]	; (811ac38 <__d2b+0xb4>)
 811aba0:	f240 310a 	movw	r1, #778	; 0x30a
 811aba4:	f000 f914 	bl	811add0 <__assert_func>
 811aba8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 811abac:	f3c7 0313 	ubfx	r3, r7, #0, #20
 811abb0:	bb35      	cbnz	r5, 811ac00 <__d2b+0x7c>
 811abb2:	2e00      	cmp	r6, #0
 811abb4:	9301      	str	r3, [sp, #4]
 811abb6:	d028      	beq.n	811ac0a <__d2b+0x86>
 811abb8:	4668      	mov	r0, sp
 811abba:	9600      	str	r6, [sp, #0]
 811abbc:	f7ff fd8c 	bl	811a6d8 <__lo0bits>
 811abc0:	9900      	ldr	r1, [sp, #0]
 811abc2:	b300      	cbz	r0, 811ac06 <__d2b+0x82>
 811abc4:	9a01      	ldr	r2, [sp, #4]
 811abc6:	f1c0 0320 	rsb	r3, r0, #32
 811abca:	fa02 f303 	lsl.w	r3, r2, r3
 811abce:	430b      	orrs	r3, r1
 811abd0:	40c2      	lsrs	r2, r0
 811abd2:	6163      	str	r3, [r4, #20]
 811abd4:	9201      	str	r2, [sp, #4]
 811abd6:	9b01      	ldr	r3, [sp, #4]
 811abd8:	61a3      	str	r3, [r4, #24]
 811abda:	2b00      	cmp	r3, #0
 811abdc:	bf14      	ite	ne
 811abde:	2202      	movne	r2, #2
 811abe0:	2201      	moveq	r2, #1
 811abe2:	6122      	str	r2, [r4, #16]
 811abe4:	b1d5      	cbz	r5, 811ac1c <__d2b+0x98>
 811abe6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 811abea:	4405      	add	r5, r0
 811abec:	f8c9 5000 	str.w	r5, [r9]
 811abf0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 811abf4:	f8c8 0000 	str.w	r0, [r8]
 811abf8:	4620      	mov	r0, r4
 811abfa:	b003      	add	sp, #12
 811abfc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 811ac00:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 811ac04:	e7d5      	b.n	811abb2 <__d2b+0x2e>
 811ac06:	6161      	str	r1, [r4, #20]
 811ac08:	e7e5      	b.n	811abd6 <__d2b+0x52>
 811ac0a:	a801      	add	r0, sp, #4
 811ac0c:	f7ff fd64 	bl	811a6d8 <__lo0bits>
 811ac10:	9b01      	ldr	r3, [sp, #4]
 811ac12:	6163      	str	r3, [r4, #20]
 811ac14:	2201      	movs	r2, #1
 811ac16:	6122      	str	r2, [r4, #16]
 811ac18:	3020      	adds	r0, #32
 811ac1a:	e7e3      	b.n	811abe4 <__d2b+0x60>
 811ac1c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 811ac20:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 811ac24:	f8c9 0000 	str.w	r0, [r9]
 811ac28:	6918      	ldr	r0, [r3, #16]
 811ac2a:	f7ff fd35 	bl	811a698 <__hi0bits>
 811ac2e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 811ac32:	e7df      	b.n	811abf4 <__d2b+0x70>
 811ac34:	0811bb23 	.word	0x0811bb23
 811ac38:	0811bb34 	.word	0x0811bb34

0811ac3c <_calloc_r>:
 811ac3c:	b513      	push	{r0, r1, r4, lr}
 811ac3e:	434a      	muls	r2, r1
 811ac40:	4611      	mov	r1, r2
 811ac42:	9201      	str	r2, [sp, #4]
 811ac44:	f000 f85a 	bl	811acfc <_malloc_r>
 811ac48:	4604      	mov	r4, r0
 811ac4a:	b118      	cbz	r0, 811ac54 <_calloc_r+0x18>
 811ac4c:	9a01      	ldr	r2, [sp, #4]
 811ac4e:	2100      	movs	r1, #0
 811ac50:	f7fe f980 	bl	8118f54 <memset>
 811ac54:	4620      	mov	r0, r4
 811ac56:	b002      	add	sp, #8
 811ac58:	bd10      	pop	{r4, pc}
	...

0811ac5c <_free_r>:
 811ac5c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 811ac5e:	2900      	cmp	r1, #0
 811ac60:	d048      	beq.n	811acf4 <_free_r+0x98>
 811ac62:	f851 3c04 	ldr.w	r3, [r1, #-4]
 811ac66:	9001      	str	r0, [sp, #4]
 811ac68:	2b00      	cmp	r3, #0
 811ac6a:	f1a1 0404 	sub.w	r4, r1, #4
 811ac6e:	bfb8      	it	lt
 811ac70:	18e4      	addlt	r4, r4, r3
 811ac72:	f000 f8ef 	bl	811ae54 <__malloc_lock>
 811ac76:	4a20      	ldr	r2, [pc, #128]	; (811acf8 <_free_r+0x9c>)
 811ac78:	9801      	ldr	r0, [sp, #4]
 811ac7a:	6813      	ldr	r3, [r2, #0]
 811ac7c:	4615      	mov	r5, r2
 811ac7e:	b933      	cbnz	r3, 811ac8e <_free_r+0x32>
 811ac80:	6063      	str	r3, [r4, #4]
 811ac82:	6014      	str	r4, [r2, #0]
 811ac84:	b003      	add	sp, #12
 811ac86:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 811ac8a:	f000 b8e9 	b.w	811ae60 <__malloc_unlock>
 811ac8e:	42a3      	cmp	r3, r4
 811ac90:	d90b      	bls.n	811acaa <_free_r+0x4e>
 811ac92:	6821      	ldr	r1, [r4, #0]
 811ac94:	1862      	adds	r2, r4, r1
 811ac96:	4293      	cmp	r3, r2
 811ac98:	bf04      	itt	eq
 811ac9a:	681a      	ldreq	r2, [r3, #0]
 811ac9c:	685b      	ldreq	r3, [r3, #4]
 811ac9e:	6063      	str	r3, [r4, #4]
 811aca0:	bf04      	itt	eq
 811aca2:	1852      	addeq	r2, r2, r1
 811aca4:	6022      	streq	r2, [r4, #0]
 811aca6:	602c      	str	r4, [r5, #0]
 811aca8:	e7ec      	b.n	811ac84 <_free_r+0x28>
 811acaa:	461a      	mov	r2, r3
 811acac:	685b      	ldr	r3, [r3, #4]
 811acae:	b10b      	cbz	r3, 811acb4 <_free_r+0x58>
 811acb0:	42a3      	cmp	r3, r4
 811acb2:	d9fa      	bls.n	811acaa <_free_r+0x4e>
 811acb4:	6811      	ldr	r1, [r2, #0]
 811acb6:	1855      	adds	r5, r2, r1
 811acb8:	42a5      	cmp	r5, r4
 811acba:	d10b      	bne.n	811acd4 <_free_r+0x78>
 811acbc:	6824      	ldr	r4, [r4, #0]
 811acbe:	4421      	add	r1, r4
 811acc0:	1854      	adds	r4, r2, r1
 811acc2:	42a3      	cmp	r3, r4
 811acc4:	6011      	str	r1, [r2, #0]
 811acc6:	d1dd      	bne.n	811ac84 <_free_r+0x28>
 811acc8:	681c      	ldr	r4, [r3, #0]
 811acca:	685b      	ldr	r3, [r3, #4]
 811accc:	6053      	str	r3, [r2, #4]
 811acce:	4421      	add	r1, r4
 811acd0:	6011      	str	r1, [r2, #0]
 811acd2:	e7d7      	b.n	811ac84 <_free_r+0x28>
 811acd4:	d902      	bls.n	811acdc <_free_r+0x80>
 811acd6:	230c      	movs	r3, #12
 811acd8:	6003      	str	r3, [r0, #0]
 811acda:	e7d3      	b.n	811ac84 <_free_r+0x28>
 811acdc:	6825      	ldr	r5, [r4, #0]
 811acde:	1961      	adds	r1, r4, r5
 811ace0:	428b      	cmp	r3, r1
 811ace2:	bf04      	itt	eq
 811ace4:	6819      	ldreq	r1, [r3, #0]
 811ace6:	685b      	ldreq	r3, [r3, #4]
 811ace8:	6063      	str	r3, [r4, #4]
 811acea:	bf04      	itt	eq
 811acec:	1949      	addeq	r1, r1, r5
 811acee:	6021      	streq	r1, [r4, #0]
 811acf0:	6054      	str	r4, [r2, #4]
 811acf2:	e7c7      	b.n	811ac84 <_free_r+0x28>
 811acf4:	b003      	add	sp, #12
 811acf6:	bd30      	pop	{r4, r5, pc}
 811acf8:	10004ec8 	.word	0x10004ec8

0811acfc <_malloc_r>:
 811acfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 811acfe:	1ccd      	adds	r5, r1, #3
 811ad00:	f025 0503 	bic.w	r5, r5, #3
 811ad04:	3508      	adds	r5, #8
 811ad06:	2d0c      	cmp	r5, #12
 811ad08:	bf38      	it	cc
 811ad0a:	250c      	movcc	r5, #12
 811ad0c:	2d00      	cmp	r5, #0
 811ad0e:	4606      	mov	r6, r0
 811ad10:	db01      	blt.n	811ad16 <_malloc_r+0x1a>
 811ad12:	42a9      	cmp	r1, r5
 811ad14:	d903      	bls.n	811ad1e <_malloc_r+0x22>
 811ad16:	230c      	movs	r3, #12
 811ad18:	6033      	str	r3, [r6, #0]
 811ad1a:	2000      	movs	r0, #0
 811ad1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 811ad1e:	f000 f899 	bl	811ae54 <__malloc_lock>
 811ad22:	4921      	ldr	r1, [pc, #132]	; (811ada8 <_malloc_r+0xac>)
 811ad24:	680a      	ldr	r2, [r1, #0]
 811ad26:	4614      	mov	r4, r2
 811ad28:	b99c      	cbnz	r4, 811ad52 <_malloc_r+0x56>
 811ad2a:	4f20      	ldr	r7, [pc, #128]	; (811adac <_malloc_r+0xb0>)
 811ad2c:	683b      	ldr	r3, [r7, #0]
 811ad2e:	b923      	cbnz	r3, 811ad3a <_malloc_r+0x3e>
 811ad30:	4621      	mov	r1, r4
 811ad32:	4630      	mov	r0, r6
 811ad34:	f000 f83c 	bl	811adb0 <_sbrk_r>
 811ad38:	6038      	str	r0, [r7, #0]
 811ad3a:	4629      	mov	r1, r5
 811ad3c:	4630      	mov	r0, r6
 811ad3e:	f000 f837 	bl	811adb0 <_sbrk_r>
 811ad42:	1c43      	adds	r3, r0, #1
 811ad44:	d123      	bne.n	811ad8e <_malloc_r+0x92>
 811ad46:	230c      	movs	r3, #12
 811ad48:	6033      	str	r3, [r6, #0]
 811ad4a:	4630      	mov	r0, r6
 811ad4c:	f000 f888 	bl	811ae60 <__malloc_unlock>
 811ad50:	e7e3      	b.n	811ad1a <_malloc_r+0x1e>
 811ad52:	6823      	ldr	r3, [r4, #0]
 811ad54:	1b5b      	subs	r3, r3, r5
 811ad56:	d417      	bmi.n	811ad88 <_malloc_r+0x8c>
 811ad58:	2b0b      	cmp	r3, #11
 811ad5a:	d903      	bls.n	811ad64 <_malloc_r+0x68>
 811ad5c:	6023      	str	r3, [r4, #0]
 811ad5e:	441c      	add	r4, r3
 811ad60:	6025      	str	r5, [r4, #0]
 811ad62:	e004      	b.n	811ad6e <_malloc_r+0x72>
 811ad64:	6863      	ldr	r3, [r4, #4]
 811ad66:	42a2      	cmp	r2, r4
 811ad68:	bf0c      	ite	eq
 811ad6a:	600b      	streq	r3, [r1, #0]
 811ad6c:	6053      	strne	r3, [r2, #4]
 811ad6e:	4630      	mov	r0, r6
 811ad70:	f000 f876 	bl	811ae60 <__malloc_unlock>
 811ad74:	f104 000b 	add.w	r0, r4, #11
 811ad78:	1d23      	adds	r3, r4, #4
 811ad7a:	f020 0007 	bic.w	r0, r0, #7
 811ad7e:	1ac2      	subs	r2, r0, r3
 811ad80:	d0cc      	beq.n	811ad1c <_malloc_r+0x20>
 811ad82:	1a1b      	subs	r3, r3, r0
 811ad84:	50a3      	str	r3, [r4, r2]
 811ad86:	e7c9      	b.n	811ad1c <_malloc_r+0x20>
 811ad88:	4622      	mov	r2, r4
 811ad8a:	6864      	ldr	r4, [r4, #4]
 811ad8c:	e7cc      	b.n	811ad28 <_malloc_r+0x2c>
 811ad8e:	1cc4      	adds	r4, r0, #3
 811ad90:	f024 0403 	bic.w	r4, r4, #3
 811ad94:	42a0      	cmp	r0, r4
 811ad96:	d0e3      	beq.n	811ad60 <_malloc_r+0x64>
 811ad98:	1a21      	subs	r1, r4, r0
 811ad9a:	4630      	mov	r0, r6
 811ad9c:	f000 f808 	bl	811adb0 <_sbrk_r>
 811ada0:	3001      	adds	r0, #1
 811ada2:	d1dd      	bne.n	811ad60 <_malloc_r+0x64>
 811ada4:	e7cf      	b.n	811ad46 <_malloc_r+0x4a>
 811ada6:	bf00      	nop
 811ada8:	10004ec8 	.word	0x10004ec8
 811adac:	10004ecc 	.word	0x10004ecc

0811adb0 <_sbrk_r>:
 811adb0:	b538      	push	{r3, r4, r5, lr}
 811adb2:	4d06      	ldr	r5, [pc, #24]	; (811adcc <_sbrk_r+0x1c>)
 811adb4:	2300      	movs	r3, #0
 811adb6:	4604      	mov	r4, r0
 811adb8:	4608      	mov	r0, r1
 811adba:	602b      	str	r3, [r5, #0]
 811adbc:	f7e7 fb00 	bl	81023c0 <_sbrk>
 811adc0:	1c43      	adds	r3, r0, #1
 811adc2:	d102      	bne.n	811adca <_sbrk_r+0x1a>
 811adc4:	682b      	ldr	r3, [r5, #0]
 811adc6:	b103      	cbz	r3, 811adca <_sbrk_r+0x1a>
 811adc8:	6023      	str	r3, [r4, #0]
 811adca:	bd38      	pop	{r3, r4, r5, pc}
 811adcc:	10008f34 	.word	0x10008f34

0811add0 <__assert_func>:
 811add0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 811add2:	4614      	mov	r4, r2
 811add4:	461a      	mov	r2, r3
 811add6:	4b09      	ldr	r3, [pc, #36]	; (811adfc <__assert_func+0x2c>)
 811add8:	681b      	ldr	r3, [r3, #0]
 811adda:	4605      	mov	r5, r0
 811addc:	68d8      	ldr	r0, [r3, #12]
 811adde:	b14c      	cbz	r4, 811adf4 <__assert_func+0x24>
 811ade0:	4b07      	ldr	r3, [pc, #28]	; (811ae00 <__assert_func+0x30>)
 811ade2:	9100      	str	r1, [sp, #0]
 811ade4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 811ade8:	4906      	ldr	r1, [pc, #24]	; (811ae04 <__assert_func+0x34>)
 811adea:	462b      	mov	r3, r5
 811adec:	f000 f80e 	bl	811ae0c <fiprintf>
 811adf0:	f000 fa64 	bl	811b2bc <abort>
 811adf4:	4b04      	ldr	r3, [pc, #16]	; (811ae08 <__assert_func+0x38>)
 811adf6:	461c      	mov	r4, r3
 811adf8:	e7f3      	b.n	811ade2 <__assert_func+0x12>
 811adfa:	bf00      	nop
 811adfc:	10000188 	.word	0x10000188
 811ae00:	0811bc94 	.word	0x0811bc94
 811ae04:	0811bca1 	.word	0x0811bca1
 811ae08:	0811bccf 	.word	0x0811bccf

0811ae0c <fiprintf>:
 811ae0c:	b40e      	push	{r1, r2, r3}
 811ae0e:	b503      	push	{r0, r1, lr}
 811ae10:	4601      	mov	r1, r0
 811ae12:	ab03      	add	r3, sp, #12
 811ae14:	4805      	ldr	r0, [pc, #20]	; (811ae2c <fiprintf+0x20>)
 811ae16:	f853 2b04 	ldr.w	r2, [r3], #4
 811ae1a:	6800      	ldr	r0, [r0, #0]
 811ae1c:	9301      	str	r3, [sp, #4]
 811ae1e:	f000 f84f 	bl	811aec0 <_vfiprintf_r>
 811ae22:	b002      	add	sp, #8
 811ae24:	f85d eb04 	ldr.w	lr, [sp], #4
 811ae28:	b003      	add	sp, #12
 811ae2a:	4770      	bx	lr
 811ae2c:	10000188 	.word	0x10000188

0811ae30 <__ascii_mbtowc>:
 811ae30:	b082      	sub	sp, #8
 811ae32:	b901      	cbnz	r1, 811ae36 <__ascii_mbtowc+0x6>
 811ae34:	a901      	add	r1, sp, #4
 811ae36:	b142      	cbz	r2, 811ae4a <__ascii_mbtowc+0x1a>
 811ae38:	b14b      	cbz	r3, 811ae4e <__ascii_mbtowc+0x1e>
 811ae3a:	7813      	ldrb	r3, [r2, #0]
 811ae3c:	600b      	str	r3, [r1, #0]
 811ae3e:	7812      	ldrb	r2, [r2, #0]
 811ae40:	1e10      	subs	r0, r2, #0
 811ae42:	bf18      	it	ne
 811ae44:	2001      	movne	r0, #1
 811ae46:	b002      	add	sp, #8
 811ae48:	4770      	bx	lr
 811ae4a:	4610      	mov	r0, r2
 811ae4c:	e7fb      	b.n	811ae46 <__ascii_mbtowc+0x16>
 811ae4e:	f06f 0001 	mvn.w	r0, #1
 811ae52:	e7f8      	b.n	811ae46 <__ascii_mbtowc+0x16>

0811ae54 <__malloc_lock>:
 811ae54:	4801      	ldr	r0, [pc, #4]	; (811ae5c <__malloc_lock+0x8>)
 811ae56:	f000 bbf1 	b.w	811b63c <__retarget_lock_acquire_recursive>
 811ae5a:	bf00      	nop
 811ae5c:	10008f3c 	.word	0x10008f3c

0811ae60 <__malloc_unlock>:
 811ae60:	4801      	ldr	r0, [pc, #4]	; (811ae68 <__malloc_unlock+0x8>)
 811ae62:	f000 bbec 	b.w	811b63e <__retarget_lock_release_recursive>
 811ae66:	bf00      	nop
 811ae68:	10008f3c 	.word	0x10008f3c

0811ae6c <__sfputc_r>:
 811ae6c:	6893      	ldr	r3, [r2, #8]
 811ae6e:	3b01      	subs	r3, #1
 811ae70:	2b00      	cmp	r3, #0
 811ae72:	b410      	push	{r4}
 811ae74:	6093      	str	r3, [r2, #8]
 811ae76:	da08      	bge.n	811ae8a <__sfputc_r+0x1e>
 811ae78:	6994      	ldr	r4, [r2, #24]
 811ae7a:	42a3      	cmp	r3, r4
 811ae7c:	db01      	blt.n	811ae82 <__sfputc_r+0x16>
 811ae7e:	290a      	cmp	r1, #10
 811ae80:	d103      	bne.n	811ae8a <__sfputc_r+0x1e>
 811ae82:	f85d 4b04 	ldr.w	r4, [sp], #4
 811ae86:	f000 b94b 	b.w	811b120 <__swbuf_r>
 811ae8a:	6813      	ldr	r3, [r2, #0]
 811ae8c:	1c58      	adds	r0, r3, #1
 811ae8e:	6010      	str	r0, [r2, #0]
 811ae90:	7019      	strb	r1, [r3, #0]
 811ae92:	4608      	mov	r0, r1
 811ae94:	f85d 4b04 	ldr.w	r4, [sp], #4
 811ae98:	4770      	bx	lr

0811ae9a <__sfputs_r>:
 811ae9a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 811ae9c:	4606      	mov	r6, r0
 811ae9e:	460f      	mov	r7, r1
 811aea0:	4614      	mov	r4, r2
 811aea2:	18d5      	adds	r5, r2, r3
 811aea4:	42ac      	cmp	r4, r5
 811aea6:	d101      	bne.n	811aeac <__sfputs_r+0x12>
 811aea8:	2000      	movs	r0, #0
 811aeaa:	e007      	b.n	811aebc <__sfputs_r+0x22>
 811aeac:	f814 1b01 	ldrb.w	r1, [r4], #1
 811aeb0:	463a      	mov	r2, r7
 811aeb2:	4630      	mov	r0, r6
 811aeb4:	f7ff ffda 	bl	811ae6c <__sfputc_r>
 811aeb8:	1c43      	adds	r3, r0, #1
 811aeba:	d1f3      	bne.n	811aea4 <__sfputs_r+0xa>
 811aebc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0811aec0 <_vfiprintf_r>:
 811aec0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 811aec4:	460d      	mov	r5, r1
 811aec6:	b09d      	sub	sp, #116	; 0x74
 811aec8:	4614      	mov	r4, r2
 811aeca:	4698      	mov	r8, r3
 811aecc:	4606      	mov	r6, r0
 811aece:	b118      	cbz	r0, 811aed8 <_vfiprintf_r+0x18>
 811aed0:	6983      	ldr	r3, [r0, #24]
 811aed2:	b90b      	cbnz	r3, 811aed8 <_vfiprintf_r+0x18>
 811aed4:	f000 fb14 	bl	811b500 <__sinit>
 811aed8:	4b89      	ldr	r3, [pc, #548]	; (811b100 <_vfiprintf_r+0x240>)
 811aeda:	429d      	cmp	r5, r3
 811aedc:	d11b      	bne.n	811af16 <_vfiprintf_r+0x56>
 811aede:	6875      	ldr	r5, [r6, #4]
 811aee0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 811aee2:	07d9      	lsls	r1, r3, #31
 811aee4:	d405      	bmi.n	811aef2 <_vfiprintf_r+0x32>
 811aee6:	89ab      	ldrh	r3, [r5, #12]
 811aee8:	059a      	lsls	r2, r3, #22
 811aeea:	d402      	bmi.n	811aef2 <_vfiprintf_r+0x32>
 811aeec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 811aeee:	f000 fba5 	bl	811b63c <__retarget_lock_acquire_recursive>
 811aef2:	89ab      	ldrh	r3, [r5, #12]
 811aef4:	071b      	lsls	r3, r3, #28
 811aef6:	d501      	bpl.n	811aefc <_vfiprintf_r+0x3c>
 811aef8:	692b      	ldr	r3, [r5, #16]
 811aefa:	b9eb      	cbnz	r3, 811af38 <_vfiprintf_r+0x78>
 811aefc:	4629      	mov	r1, r5
 811aefe:	4630      	mov	r0, r6
 811af00:	f000 f96e 	bl	811b1e0 <__swsetup_r>
 811af04:	b1c0      	cbz	r0, 811af38 <_vfiprintf_r+0x78>
 811af06:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 811af08:	07dc      	lsls	r4, r3, #31
 811af0a:	d50e      	bpl.n	811af2a <_vfiprintf_r+0x6a>
 811af0c:	f04f 30ff 	mov.w	r0, #4294967295
 811af10:	b01d      	add	sp, #116	; 0x74
 811af12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 811af16:	4b7b      	ldr	r3, [pc, #492]	; (811b104 <_vfiprintf_r+0x244>)
 811af18:	429d      	cmp	r5, r3
 811af1a:	d101      	bne.n	811af20 <_vfiprintf_r+0x60>
 811af1c:	68b5      	ldr	r5, [r6, #8]
 811af1e:	e7df      	b.n	811aee0 <_vfiprintf_r+0x20>
 811af20:	4b79      	ldr	r3, [pc, #484]	; (811b108 <_vfiprintf_r+0x248>)
 811af22:	429d      	cmp	r5, r3
 811af24:	bf08      	it	eq
 811af26:	68f5      	ldreq	r5, [r6, #12]
 811af28:	e7da      	b.n	811aee0 <_vfiprintf_r+0x20>
 811af2a:	89ab      	ldrh	r3, [r5, #12]
 811af2c:	0598      	lsls	r0, r3, #22
 811af2e:	d4ed      	bmi.n	811af0c <_vfiprintf_r+0x4c>
 811af30:	6da8      	ldr	r0, [r5, #88]	; 0x58
 811af32:	f000 fb84 	bl	811b63e <__retarget_lock_release_recursive>
 811af36:	e7e9      	b.n	811af0c <_vfiprintf_r+0x4c>
 811af38:	2300      	movs	r3, #0
 811af3a:	9309      	str	r3, [sp, #36]	; 0x24
 811af3c:	2320      	movs	r3, #32
 811af3e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 811af42:	f8cd 800c 	str.w	r8, [sp, #12]
 811af46:	2330      	movs	r3, #48	; 0x30
 811af48:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 811b10c <_vfiprintf_r+0x24c>
 811af4c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 811af50:	f04f 0901 	mov.w	r9, #1
 811af54:	4623      	mov	r3, r4
 811af56:	469a      	mov	sl, r3
 811af58:	f813 2b01 	ldrb.w	r2, [r3], #1
 811af5c:	b10a      	cbz	r2, 811af62 <_vfiprintf_r+0xa2>
 811af5e:	2a25      	cmp	r2, #37	; 0x25
 811af60:	d1f9      	bne.n	811af56 <_vfiprintf_r+0x96>
 811af62:	ebba 0b04 	subs.w	fp, sl, r4
 811af66:	d00b      	beq.n	811af80 <_vfiprintf_r+0xc0>
 811af68:	465b      	mov	r3, fp
 811af6a:	4622      	mov	r2, r4
 811af6c:	4629      	mov	r1, r5
 811af6e:	4630      	mov	r0, r6
 811af70:	f7ff ff93 	bl	811ae9a <__sfputs_r>
 811af74:	3001      	adds	r0, #1
 811af76:	f000 80aa 	beq.w	811b0ce <_vfiprintf_r+0x20e>
 811af7a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 811af7c:	445a      	add	r2, fp
 811af7e:	9209      	str	r2, [sp, #36]	; 0x24
 811af80:	f89a 3000 	ldrb.w	r3, [sl]
 811af84:	2b00      	cmp	r3, #0
 811af86:	f000 80a2 	beq.w	811b0ce <_vfiprintf_r+0x20e>
 811af8a:	2300      	movs	r3, #0
 811af8c:	f04f 32ff 	mov.w	r2, #4294967295
 811af90:	e9cd 2305 	strd	r2, r3, [sp, #20]
 811af94:	f10a 0a01 	add.w	sl, sl, #1
 811af98:	9304      	str	r3, [sp, #16]
 811af9a:	9307      	str	r3, [sp, #28]
 811af9c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 811afa0:	931a      	str	r3, [sp, #104]	; 0x68
 811afa2:	4654      	mov	r4, sl
 811afa4:	2205      	movs	r2, #5
 811afa6:	f814 1b01 	ldrb.w	r1, [r4], #1
 811afaa:	4858      	ldr	r0, [pc, #352]	; (811b10c <_vfiprintf_r+0x24c>)
 811afac:	f7e5 f9a0 	bl	81002f0 <memchr>
 811afb0:	9a04      	ldr	r2, [sp, #16]
 811afb2:	b9d8      	cbnz	r0, 811afec <_vfiprintf_r+0x12c>
 811afb4:	06d1      	lsls	r1, r2, #27
 811afb6:	bf44      	itt	mi
 811afb8:	2320      	movmi	r3, #32
 811afba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 811afbe:	0713      	lsls	r3, r2, #28
 811afc0:	bf44      	itt	mi
 811afc2:	232b      	movmi	r3, #43	; 0x2b
 811afc4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 811afc8:	f89a 3000 	ldrb.w	r3, [sl]
 811afcc:	2b2a      	cmp	r3, #42	; 0x2a
 811afce:	d015      	beq.n	811affc <_vfiprintf_r+0x13c>
 811afd0:	9a07      	ldr	r2, [sp, #28]
 811afd2:	4654      	mov	r4, sl
 811afd4:	2000      	movs	r0, #0
 811afd6:	f04f 0c0a 	mov.w	ip, #10
 811afda:	4621      	mov	r1, r4
 811afdc:	f811 3b01 	ldrb.w	r3, [r1], #1
 811afe0:	3b30      	subs	r3, #48	; 0x30
 811afe2:	2b09      	cmp	r3, #9
 811afe4:	d94e      	bls.n	811b084 <_vfiprintf_r+0x1c4>
 811afe6:	b1b0      	cbz	r0, 811b016 <_vfiprintf_r+0x156>
 811afe8:	9207      	str	r2, [sp, #28]
 811afea:	e014      	b.n	811b016 <_vfiprintf_r+0x156>
 811afec:	eba0 0308 	sub.w	r3, r0, r8
 811aff0:	fa09 f303 	lsl.w	r3, r9, r3
 811aff4:	4313      	orrs	r3, r2
 811aff6:	9304      	str	r3, [sp, #16]
 811aff8:	46a2      	mov	sl, r4
 811affa:	e7d2      	b.n	811afa2 <_vfiprintf_r+0xe2>
 811affc:	9b03      	ldr	r3, [sp, #12]
 811affe:	1d19      	adds	r1, r3, #4
 811b000:	681b      	ldr	r3, [r3, #0]
 811b002:	9103      	str	r1, [sp, #12]
 811b004:	2b00      	cmp	r3, #0
 811b006:	bfbb      	ittet	lt
 811b008:	425b      	neglt	r3, r3
 811b00a:	f042 0202 	orrlt.w	r2, r2, #2
 811b00e:	9307      	strge	r3, [sp, #28]
 811b010:	9307      	strlt	r3, [sp, #28]
 811b012:	bfb8      	it	lt
 811b014:	9204      	strlt	r2, [sp, #16]
 811b016:	7823      	ldrb	r3, [r4, #0]
 811b018:	2b2e      	cmp	r3, #46	; 0x2e
 811b01a:	d10c      	bne.n	811b036 <_vfiprintf_r+0x176>
 811b01c:	7863      	ldrb	r3, [r4, #1]
 811b01e:	2b2a      	cmp	r3, #42	; 0x2a
 811b020:	d135      	bne.n	811b08e <_vfiprintf_r+0x1ce>
 811b022:	9b03      	ldr	r3, [sp, #12]
 811b024:	1d1a      	adds	r2, r3, #4
 811b026:	681b      	ldr	r3, [r3, #0]
 811b028:	9203      	str	r2, [sp, #12]
 811b02a:	2b00      	cmp	r3, #0
 811b02c:	bfb8      	it	lt
 811b02e:	f04f 33ff 	movlt.w	r3, #4294967295
 811b032:	3402      	adds	r4, #2
 811b034:	9305      	str	r3, [sp, #20]
 811b036:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 811b11c <_vfiprintf_r+0x25c>
 811b03a:	7821      	ldrb	r1, [r4, #0]
 811b03c:	2203      	movs	r2, #3
 811b03e:	4650      	mov	r0, sl
 811b040:	f7e5 f956 	bl	81002f0 <memchr>
 811b044:	b140      	cbz	r0, 811b058 <_vfiprintf_r+0x198>
 811b046:	2340      	movs	r3, #64	; 0x40
 811b048:	eba0 000a 	sub.w	r0, r0, sl
 811b04c:	fa03 f000 	lsl.w	r0, r3, r0
 811b050:	9b04      	ldr	r3, [sp, #16]
 811b052:	4303      	orrs	r3, r0
 811b054:	3401      	adds	r4, #1
 811b056:	9304      	str	r3, [sp, #16]
 811b058:	f814 1b01 	ldrb.w	r1, [r4], #1
 811b05c:	482c      	ldr	r0, [pc, #176]	; (811b110 <_vfiprintf_r+0x250>)
 811b05e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 811b062:	2206      	movs	r2, #6
 811b064:	f7e5 f944 	bl	81002f0 <memchr>
 811b068:	2800      	cmp	r0, #0
 811b06a:	d03f      	beq.n	811b0ec <_vfiprintf_r+0x22c>
 811b06c:	4b29      	ldr	r3, [pc, #164]	; (811b114 <_vfiprintf_r+0x254>)
 811b06e:	bb1b      	cbnz	r3, 811b0b8 <_vfiprintf_r+0x1f8>
 811b070:	9b03      	ldr	r3, [sp, #12]
 811b072:	3307      	adds	r3, #7
 811b074:	f023 0307 	bic.w	r3, r3, #7
 811b078:	3308      	adds	r3, #8
 811b07a:	9303      	str	r3, [sp, #12]
 811b07c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 811b07e:	443b      	add	r3, r7
 811b080:	9309      	str	r3, [sp, #36]	; 0x24
 811b082:	e767      	b.n	811af54 <_vfiprintf_r+0x94>
 811b084:	fb0c 3202 	mla	r2, ip, r2, r3
 811b088:	460c      	mov	r4, r1
 811b08a:	2001      	movs	r0, #1
 811b08c:	e7a5      	b.n	811afda <_vfiprintf_r+0x11a>
 811b08e:	2300      	movs	r3, #0
 811b090:	3401      	adds	r4, #1
 811b092:	9305      	str	r3, [sp, #20]
 811b094:	4619      	mov	r1, r3
 811b096:	f04f 0c0a 	mov.w	ip, #10
 811b09a:	4620      	mov	r0, r4
 811b09c:	f810 2b01 	ldrb.w	r2, [r0], #1
 811b0a0:	3a30      	subs	r2, #48	; 0x30
 811b0a2:	2a09      	cmp	r2, #9
 811b0a4:	d903      	bls.n	811b0ae <_vfiprintf_r+0x1ee>
 811b0a6:	2b00      	cmp	r3, #0
 811b0a8:	d0c5      	beq.n	811b036 <_vfiprintf_r+0x176>
 811b0aa:	9105      	str	r1, [sp, #20]
 811b0ac:	e7c3      	b.n	811b036 <_vfiprintf_r+0x176>
 811b0ae:	fb0c 2101 	mla	r1, ip, r1, r2
 811b0b2:	4604      	mov	r4, r0
 811b0b4:	2301      	movs	r3, #1
 811b0b6:	e7f0      	b.n	811b09a <_vfiprintf_r+0x1da>
 811b0b8:	ab03      	add	r3, sp, #12
 811b0ba:	9300      	str	r3, [sp, #0]
 811b0bc:	462a      	mov	r2, r5
 811b0be:	4b16      	ldr	r3, [pc, #88]	; (811b118 <_vfiprintf_r+0x258>)
 811b0c0:	a904      	add	r1, sp, #16
 811b0c2:	4630      	mov	r0, r6
 811b0c4:	f7fd ffee 	bl	81190a4 <_printf_float>
 811b0c8:	4607      	mov	r7, r0
 811b0ca:	1c78      	adds	r0, r7, #1
 811b0cc:	d1d6      	bne.n	811b07c <_vfiprintf_r+0x1bc>
 811b0ce:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 811b0d0:	07d9      	lsls	r1, r3, #31
 811b0d2:	d405      	bmi.n	811b0e0 <_vfiprintf_r+0x220>
 811b0d4:	89ab      	ldrh	r3, [r5, #12]
 811b0d6:	059a      	lsls	r2, r3, #22
 811b0d8:	d402      	bmi.n	811b0e0 <_vfiprintf_r+0x220>
 811b0da:	6da8      	ldr	r0, [r5, #88]	; 0x58
 811b0dc:	f000 faaf 	bl	811b63e <__retarget_lock_release_recursive>
 811b0e0:	89ab      	ldrh	r3, [r5, #12]
 811b0e2:	065b      	lsls	r3, r3, #25
 811b0e4:	f53f af12 	bmi.w	811af0c <_vfiprintf_r+0x4c>
 811b0e8:	9809      	ldr	r0, [sp, #36]	; 0x24
 811b0ea:	e711      	b.n	811af10 <_vfiprintf_r+0x50>
 811b0ec:	ab03      	add	r3, sp, #12
 811b0ee:	9300      	str	r3, [sp, #0]
 811b0f0:	462a      	mov	r2, r5
 811b0f2:	4b09      	ldr	r3, [pc, #36]	; (811b118 <_vfiprintf_r+0x258>)
 811b0f4:	a904      	add	r1, sp, #16
 811b0f6:	4630      	mov	r0, r6
 811b0f8:	f7fe fa78 	bl	81195ec <_printf_i>
 811b0fc:	e7e4      	b.n	811b0c8 <_vfiprintf_r+0x208>
 811b0fe:	bf00      	nop
 811b100:	0811be0c 	.word	0x0811be0c
 811b104:	0811be2c 	.word	0x0811be2c
 811b108:	0811bdec 	.word	0x0811bdec
 811b10c:	0811bcda 	.word	0x0811bcda
 811b110:	0811bce4 	.word	0x0811bce4
 811b114:	081190a5 	.word	0x081190a5
 811b118:	0811ae9b 	.word	0x0811ae9b
 811b11c:	0811bce0 	.word	0x0811bce0

0811b120 <__swbuf_r>:
 811b120:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 811b122:	460e      	mov	r6, r1
 811b124:	4614      	mov	r4, r2
 811b126:	4605      	mov	r5, r0
 811b128:	b118      	cbz	r0, 811b132 <__swbuf_r+0x12>
 811b12a:	6983      	ldr	r3, [r0, #24]
 811b12c:	b90b      	cbnz	r3, 811b132 <__swbuf_r+0x12>
 811b12e:	f000 f9e7 	bl	811b500 <__sinit>
 811b132:	4b21      	ldr	r3, [pc, #132]	; (811b1b8 <__swbuf_r+0x98>)
 811b134:	429c      	cmp	r4, r3
 811b136:	d12b      	bne.n	811b190 <__swbuf_r+0x70>
 811b138:	686c      	ldr	r4, [r5, #4]
 811b13a:	69a3      	ldr	r3, [r4, #24]
 811b13c:	60a3      	str	r3, [r4, #8]
 811b13e:	89a3      	ldrh	r3, [r4, #12]
 811b140:	071a      	lsls	r2, r3, #28
 811b142:	d52f      	bpl.n	811b1a4 <__swbuf_r+0x84>
 811b144:	6923      	ldr	r3, [r4, #16]
 811b146:	b36b      	cbz	r3, 811b1a4 <__swbuf_r+0x84>
 811b148:	6923      	ldr	r3, [r4, #16]
 811b14a:	6820      	ldr	r0, [r4, #0]
 811b14c:	1ac0      	subs	r0, r0, r3
 811b14e:	6963      	ldr	r3, [r4, #20]
 811b150:	b2f6      	uxtb	r6, r6
 811b152:	4283      	cmp	r3, r0
 811b154:	4637      	mov	r7, r6
 811b156:	dc04      	bgt.n	811b162 <__swbuf_r+0x42>
 811b158:	4621      	mov	r1, r4
 811b15a:	4628      	mov	r0, r5
 811b15c:	f000 f93c 	bl	811b3d8 <_fflush_r>
 811b160:	bb30      	cbnz	r0, 811b1b0 <__swbuf_r+0x90>
 811b162:	68a3      	ldr	r3, [r4, #8]
 811b164:	3b01      	subs	r3, #1
 811b166:	60a3      	str	r3, [r4, #8]
 811b168:	6823      	ldr	r3, [r4, #0]
 811b16a:	1c5a      	adds	r2, r3, #1
 811b16c:	6022      	str	r2, [r4, #0]
 811b16e:	701e      	strb	r6, [r3, #0]
 811b170:	6963      	ldr	r3, [r4, #20]
 811b172:	3001      	adds	r0, #1
 811b174:	4283      	cmp	r3, r0
 811b176:	d004      	beq.n	811b182 <__swbuf_r+0x62>
 811b178:	89a3      	ldrh	r3, [r4, #12]
 811b17a:	07db      	lsls	r3, r3, #31
 811b17c:	d506      	bpl.n	811b18c <__swbuf_r+0x6c>
 811b17e:	2e0a      	cmp	r6, #10
 811b180:	d104      	bne.n	811b18c <__swbuf_r+0x6c>
 811b182:	4621      	mov	r1, r4
 811b184:	4628      	mov	r0, r5
 811b186:	f000 f927 	bl	811b3d8 <_fflush_r>
 811b18a:	b988      	cbnz	r0, 811b1b0 <__swbuf_r+0x90>
 811b18c:	4638      	mov	r0, r7
 811b18e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 811b190:	4b0a      	ldr	r3, [pc, #40]	; (811b1bc <__swbuf_r+0x9c>)
 811b192:	429c      	cmp	r4, r3
 811b194:	d101      	bne.n	811b19a <__swbuf_r+0x7a>
 811b196:	68ac      	ldr	r4, [r5, #8]
 811b198:	e7cf      	b.n	811b13a <__swbuf_r+0x1a>
 811b19a:	4b09      	ldr	r3, [pc, #36]	; (811b1c0 <__swbuf_r+0xa0>)
 811b19c:	429c      	cmp	r4, r3
 811b19e:	bf08      	it	eq
 811b1a0:	68ec      	ldreq	r4, [r5, #12]
 811b1a2:	e7ca      	b.n	811b13a <__swbuf_r+0x1a>
 811b1a4:	4621      	mov	r1, r4
 811b1a6:	4628      	mov	r0, r5
 811b1a8:	f000 f81a 	bl	811b1e0 <__swsetup_r>
 811b1ac:	2800      	cmp	r0, #0
 811b1ae:	d0cb      	beq.n	811b148 <__swbuf_r+0x28>
 811b1b0:	f04f 37ff 	mov.w	r7, #4294967295
 811b1b4:	e7ea      	b.n	811b18c <__swbuf_r+0x6c>
 811b1b6:	bf00      	nop
 811b1b8:	0811be0c 	.word	0x0811be0c
 811b1bc:	0811be2c 	.word	0x0811be2c
 811b1c0:	0811bdec 	.word	0x0811bdec

0811b1c4 <__ascii_wctomb>:
 811b1c4:	b149      	cbz	r1, 811b1da <__ascii_wctomb+0x16>
 811b1c6:	2aff      	cmp	r2, #255	; 0xff
 811b1c8:	bf85      	ittet	hi
 811b1ca:	238a      	movhi	r3, #138	; 0x8a
 811b1cc:	6003      	strhi	r3, [r0, #0]
 811b1ce:	700a      	strbls	r2, [r1, #0]
 811b1d0:	f04f 30ff 	movhi.w	r0, #4294967295
 811b1d4:	bf98      	it	ls
 811b1d6:	2001      	movls	r0, #1
 811b1d8:	4770      	bx	lr
 811b1da:	4608      	mov	r0, r1
 811b1dc:	4770      	bx	lr
	...

0811b1e0 <__swsetup_r>:
 811b1e0:	4b32      	ldr	r3, [pc, #200]	; (811b2ac <__swsetup_r+0xcc>)
 811b1e2:	b570      	push	{r4, r5, r6, lr}
 811b1e4:	681d      	ldr	r5, [r3, #0]
 811b1e6:	4606      	mov	r6, r0
 811b1e8:	460c      	mov	r4, r1
 811b1ea:	b125      	cbz	r5, 811b1f6 <__swsetup_r+0x16>
 811b1ec:	69ab      	ldr	r3, [r5, #24]
 811b1ee:	b913      	cbnz	r3, 811b1f6 <__swsetup_r+0x16>
 811b1f0:	4628      	mov	r0, r5
 811b1f2:	f000 f985 	bl	811b500 <__sinit>
 811b1f6:	4b2e      	ldr	r3, [pc, #184]	; (811b2b0 <__swsetup_r+0xd0>)
 811b1f8:	429c      	cmp	r4, r3
 811b1fa:	d10f      	bne.n	811b21c <__swsetup_r+0x3c>
 811b1fc:	686c      	ldr	r4, [r5, #4]
 811b1fe:	89a3      	ldrh	r3, [r4, #12]
 811b200:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 811b204:	0719      	lsls	r1, r3, #28
 811b206:	d42c      	bmi.n	811b262 <__swsetup_r+0x82>
 811b208:	06dd      	lsls	r5, r3, #27
 811b20a:	d411      	bmi.n	811b230 <__swsetup_r+0x50>
 811b20c:	2309      	movs	r3, #9
 811b20e:	6033      	str	r3, [r6, #0]
 811b210:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 811b214:	81a3      	strh	r3, [r4, #12]
 811b216:	f04f 30ff 	mov.w	r0, #4294967295
 811b21a:	e03e      	b.n	811b29a <__swsetup_r+0xba>
 811b21c:	4b25      	ldr	r3, [pc, #148]	; (811b2b4 <__swsetup_r+0xd4>)
 811b21e:	429c      	cmp	r4, r3
 811b220:	d101      	bne.n	811b226 <__swsetup_r+0x46>
 811b222:	68ac      	ldr	r4, [r5, #8]
 811b224:	e7eb      	b.n	811b1fe <__swsetup_r+0x1e>
 811b226:	4b24      	ldr	r3, [pc, #144]	; (811b2b8 <__swsetup_r+0xd8>)
 811b228:	429c      	cmp	r4, r3
 811b22a:	bf08      	it	eq
 811b22c:	68ec      	ldreq	r4, [r5, #12]
 811b22e:	e7e6      	b.n	811b1fe <__swsetup_r+0x1e>
 811b230:	0758      	lsls	r0, r3, #29
 811b232:	d512      	bpl.n	811b25a <__swsetup_r+0x7a>
 811b234:	6b61      	ldr	r1, [r4, #52]	; 0x34
 811b236:	b141      	cbz	r1, 811b24a <__swsetup_r+0x6a>
 811b238:	f104 0344 	add.w	r3, r4, #68	; 0x44
 811b23c:	4299      	cmp	r1, r3
 811b23e:	d002      	beq.n	811b246 <__swsetup_r+0x66>
 811b240:	4630      	mov	r0, r6
 811b242:	f7ff fd0b 	bl	811ac5c <_free_r>
 811b246:	2300      	movs	r3, #0
 811b248:	6363      	str	r3, [r4, #52]	; 0x34
 811b24a:	89a3      	ldrh	r3, [r4, #12]
 811b24c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 811b250:	81a3      	strh	r3, [r4, #12]
 811b252:	2300      	movs	r3, #0
 811b254:	6063      	str	r3, [r4, #4]
 811b256:	6923      	ldr	r3, [r4, #16]
 811b258:	6023      	str	r3, [r4, #0]
 811b25a:	89a3      	ldrh	r3, [r4, #12]
 811b25c:	f043 0308 	orr.w	r3, r3, #8
 811b260:	81a3      	strh	r3, [r4, #12]
 811b262:	6923      	ldr	r3, [r4, #16]
 811b264:	b94b      	cbnz	r3, 811b27a <__swsetup_r+0x9a>
 811b266:	89a3      	ldrh	r3, [r4, #12]
 811b268:	f403 7320 	and.w	r3, r3, #640	; 0x280
 811b26c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 811b270:	d003      	beq.n	811b27a <__swsetup_r+0x9a>
 811b272:	4621      	mov	r1, r4
 811b274:	4630      	mov	r0, r6
 811b276:	f000 fa07 	bl	811b688 <__smakebuf_r>
 811b27a:	89a0      	ldrh	r0, [r4, #12]
 811b27c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 811b280:	f010 0301 	ands.w	r3, r0, #1
 811b284:	d00a      	beq.n	811b29c <__swsetup_r+0xbc>
 811b286:	2300      	movs	r3, #0
 811b288:	60a3      	str	r3, [r4, #8]
 811b28a:	6963      	ldr	r3, [r4, #20]
 811b28c:	425b      	negs	r3, r3
 811b28e:	61a3      	str	r3, [r4, #24]
 811b290:	6923      	ldr	r3, [r4, #16]
 811b292:	b943      	cbnz	r3, 811b2a6 <__swsetup_r+0xc6>
 811b294:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 811b298:	d1ba      	bne.n	811b210 <__swsetup_r+0x30>
 811b29a:	bd70      	pop	{r4, r5, r6, pc}
 811b29c:	0781      	lsls	r1, r0, #30
 811b29e:	bf58      	it	pl
 811b2a0:	6963      	ldrpl	r3, [r4, #20]
 811b2a2:	60a3      	str	r3, [r4, #8]
 811b2a4:	e7f4      	b.n	811b290 <__swsetup_r+0xb0>
 811b2a6:	2000      	movs	r0, #0
 811b2a8:	e7f7      	b.n	811b29a <__swsetup_r+0xba>
 811b2aa:	bf00      	nop
 811b2ac:	10000188 	.word	0x10000188
 811b2b0:	0811be0c 	.word	0x0811be0c
 811b2b4:	0811be2c 	.word	0x0811be2c
 811b2b8:	0811bdec 	.word	0x0811bdec

0811b2bc <abort>:
 811b2bc:	b508      	push	{r3, lr}
 811b2be:	2006      	movs	r0, #6
 811b2c0:	f000 fa4a 	bl	811b758 <raise>
 811b2c4:	2001      	movs	r0, #1
 811b2c6:	f7e7 f803 	bl	81022d0 <_exit>
	...

0811b2cc <__sflush_r>:
 811b2cc:	898a      	ldrh	r2, [r1, #12]
 811b2ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 811b2d2:	4605      	mov	r5, r0
 811b2d4:	0710      	lsls	r0, r2, #28
 811b2d6:	460c      	mov	r4, r1
 811b2d8:	d458      	bmi.n	811b38c <__sflush_r+0xc0>
 811b2da:	684b      	ldr	r3, [r1, #4]
 811b2dc:	2b00      	cmp	r3, #0
 811b2de:	dc05      	bgt.n	811b2ec <__sflush_r+0x20>
 811b2e0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 811b2e2:	2b00      	cmp	r3, #0
 811b2e4:	dc02      	bgt.n	811b2ec <__sflush_r+0x20>
 811b2e6:	2000      	movs	r0, #0
 811b2e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 811b2ec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 811b2ee:	2e00      	cmp	r6, #0
 811b2f0:	d0f9      	beq.n	811b2e6 <__sflush_r+0x1a>
 811b2f2:	2300      	movs	r3, #0
 811b2f4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 811b2f8:	682f      	ldr	r7, [r5, #0]
 811b2fa:	602b      	str	r3, [r5, #0]
 811b2fc:	d032      	beq.n	811b364 <__sflush_r+0x98>
 811b2fe:	6d60      	ldr	r0, [r4, #84]	; 0x54
 811b300:	89a3      	ldrh	r3, [r4, #12]
 811b302:	075a      	lsls	r2, r3, #29
 811b304:	d505      	bpl.n	811b312 <__sflush_r+0x46>
 811b306:	6863      	ldr	r3, [r4, #4]
 811b308:	1ac0      	subs	r0, r0, r3
 811b30a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 811b30c:	b10b      	cbz	r3, 811b312 <__sflush_r+0x46>
 811b30e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 811b310:	1ac0      	subs	r0, r0, r3
 811b312:	2300      	movs	r3, #0
 811b314:	4602      	mov	r2, r0
 811b316:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 811b318:	6a21      	ldr	r1, [r4, #32]
 811b31a:	4628      	mov	r0, r5
 811b31c:	47b0      	blx	r6
 811b31e:	1c43      	adds	r3, r0, #1
 811b320:	89a3      	ldrh	r3, [r4, #12]
 811b322:	d106      	bne.n	811b332 <__sflush_r+0x66>
 811b324:	6829      	ldr	r1, [r5, #0]
 811b326:	291d      	cmp	r1, #29
 811b328:	d82c      	bhi.n	811b384 <__sflush_r+0xb8>
 811b32a:	4a2a      	ldr	r2, [pc, #168]	; (811b3d4 <__sflush_r+0x108>)
 811b32c:	40ca      	lsrs	r2, r1
 811b32e:	07d6      	lsls	r6, r2, #31
 811b330:	d528      	bpl.n	811b384 <__sflush_r+0xb8>
 811b332:	2200      	movs	r2, #0
 811b334:	6062      	str	r2, [r4, #4]
 811b336:	04d9      	lsls	r1, r3, #19
 811b338:	6922      	ldr	r2, [r4, #16]
 811b33a:	6022      	str	r2, [r4, #0]
 811b33c:	d504      	bpl.n	811b348 <__sflush_r+0x7c>
 811b33e:	1c42      	adds	r2, r0, #1
 811b340:	d101      	bne.n	811b346 <__sflush_r+0x7a>
 811b342:	682b      	ldr	r3, [r5, #0]
 811b344:	b903      	cbnz	r3, 811b348 <__sflush_r+0x7c>
 811b346:	6560      	str	r0, [r4, #84]	; 0x54
 811b348:	6b61      	ldr	r1, [r4, #52]	; 0x34
 811b34a:	602f      	str	r7, [r5, #0]
 811b34c:	2900      	cmp	r1, #0
 811b34e:	d0ca      	beq.n	811b2e6 <__sflush_r+0x1a>
 811b350:	f104 0344 	add.w	r3, r4, #68	; 0x44
 811b354:	4299      	cmp	r1, r3
 811b356:	d002      	beq.n	811b35e <__sflush_r+0x92>
 811b358:	4628      	mov	r0, r5
 811b35a:	f7ff fc7f 	bl	811ac5c <_free_r>
 811b35e:	2000      	movs	r0, #0
 811b360:	6360      	str	r0, [r4, #52]	; 0x34
 811b362:	e7c1      	b.n	811b2e8 <__sflush_r+0x1c>
 811b364:	6a21      	ldr	r1, [r4, #32]
 811b366:	2301      	movs	r3, #1
 811b368:	4628      	mov	r0, r5
 811b36a:	47b0      	blx	r6
 811b36c:	1c41      	adds	r1, r0, #1
 811b36e:	d1c7      	bne.n	811b300 <__sflush_r+0x34>
 811b370:	682b      	ldr	r3, [r5, #0]
 811b372:	2b00      	cmp	r3, #0
 811b374:	d0c4      	beq.n	811b300 <__sflush_r+0x34>
 811b376:	2b1d      	cmp	r3, #29
 811b378:	d001      	beq.n	811b37e <__sflush_r+0xb2>
 811b37a:	2b16      	cmp	r3, #22
 811b37c:	d101      	bne.n	811b382 <__sflush_r+0xb6>
 811b37e:	602f      	str	r7, [r5, #0]
 811b380:	e7b1      	b.n	811b2e6 <__sflush_r+0x1a>
 811b382:	89a3      	ldrh	r3, [r4, #12]
 811b384:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 811b388:	81a3      	strh	r3, [r4, #12]
 811b38a:	e7ad      	b.n	811b2e8 <__sflush_r+0x1c>
 811b38c:	690f      	ldr	r7, [r1, #16]
 811b38e:	2f00      	cmp	r7, #0
 811b390:	d0a9      	beq.n	811b2e6 <__sflush_r+0x1a>
 811b392:	0793      	lsls	r3, r2, #30
 811b394:	680e      	ldr	r6, [r1, #0]
 811b396:	bf08      	it	eq
 811b398:	694b      	ldreq	r3, [r1, #20]
 811b39a:	600f      	str	r7, [r1, #0]
 811b39c:	bf18      	it	ne
 811b39e:	2300      	movne	r3, #0
 811b3a0:	eba6 0807 	sub.w	r8, r6, r7
 811b3a4:	608b      	str	r3, [r1, #8]
 811b3a6:	f1b8 0f00 	cmp.w	r8, #0
 811b3aa:	dd9c      	ble.n	811b2e6 <__sflush_r+0x1a>
 811b3ac:	6a21      	ldr	r1, [r4, #32]
 811b3ae:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 811b3b0:	4643      	mov	r3, r8
 811b3b2:	463a      	mov	r2, r7
 811b3b4:	4628      	mov	r0, r5
 811b3b6:	47b0      	blx	r6
 811b3b8:	2800      	cmp	r0, #0
 811b3ba:	dc06      	bgt.n	811b3ca <__sflush_r+0xfe>
 811b3bc:	89a3      	ldrh	r3, [r4, #12]
 811b3be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 811b3c2:	81a3      	strh	r3, [r4, #12]
 811b3c4:	f04f 30ff 	mov.w	r0, #4294967295
 811b3c8:	e78e      	b.n	811b2e8 <__sflush_r+0x1c>
 811b3ca:	4407      	add	r7, r0
 811b3cc:	eba8 0800 	sub.w	r8, r8, r0
 811b3d0:	e7e9      	b.n	811b3a6 <__sflush_r+0xda>
 811b3d2:	bf00      	nop
 811b3d4:	20400001 	.word	0x20400001

0811b3d8 <_fflush_r>:
 811b3d8:	b538      	push	{r3, r4, r5, lr}
 811b3da:	690b      	ldr	r3, [r1, #16]
 811b3dc:	4605      	mov	r5, r0
 811b3de:	460c      	mov	r4, r1
 811b3e0:	b913      	cbnz	r3, 811b3e8 <_fflush_r+0x10>
 811b3e2:	2500      	movs	r5, #0
 811b3e4:	4628      	mov	r0, r5
 811b3e6:	bd38      	pop	{r3, r4, r5, pc}
 811b3e8:	b118      	cbz	r0, 811b3f2 <_fflush_r+0x1a>
 811b3ea:	6983      	ldr	r3, [r0, #24]
 811b3ec:	b90b      	cbnz	r3, 811b3f2 <_fflush_r+0x1a>
 811b3ee:	f000 f887 	bl	811b500 <__sinit>
 811b3f2:	4b14      	ldr	r3, [pc, #80]	; (811b444 <_fflush_r+0x6c>)
 811b3f4:	429c      	cmp	r4, r3
 811b3f6:	d11b      	bne.n	811b430 <_fflush_r+0x58>
 811b3f8:	686c      	ldr	r4, [r5, #4]
 811b3fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 811b3fe:	2b00      	cmp	r3, #0
 811b400:	d0ef      	beq.n	811b3e2 <_fflush_r+0xa>
 811b402:	6e62      	ldr	r2, [r4, #100]	; 0x64
 811b404:	07d0      	lsls	r0, r2, #31
 811b406:	d404      	bmi.n	811b412 <_fflush_r+0x3a>
 811b408:	0599      	lsls	r1, r3, #22
 811b40a:	d402      	bmi.n	811b412 <_fflush_r+0x3a>
 811b40c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 811b40e:	f000 f915 	bl	811b63c <__retarget_lock_acquire_recursive>
 811b412:	4628      	mov	r0, r5
 811b414:	4621      	mov	r1, r4
 811b416:	f7ff ff59 	bl	811b2cc <__sflush_r>
 811b41a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 811b41c:	07da      	lsls	r2, r3, #31
 811b41e:	4605      	mov	r5, r0
 811b420:	d4e0      	bmi.n	811b3e4 <_fflush_r+0xc>
 811b422:	89a3      	ldrh	r3, [r4, #12]
 811b424:	059b      	lsls	r3, r3, #22
 811b426:	d4dd      	bmi.n	811b3e4 <_fflush_r+0xc>
 811b428:	6da0      	ldr	r0, [r4, #88]	; 0x58
 811b42a:	f000 f908 	bl	811b63e <__retarget_lock_release_recursive>
 811b42e:	e7d9      	b.n	811b3e4 <_fflush_r+0xc>
 811b430:	4b05      	ldr	r3, [pc, #20]	; (811b448 <_fflush_r+0x70>)
 811b432:	429c      	cmp	r4, r3
 811b434:	d101      	bne.n	811b43a <_fflush_r+0x62>
 811b436:	68ac      	ldr	r4, [r5, #8]
 811b438:	e7df      	b.n	811b3fa <_fflush_r+0x22>
 811b43a:	4b04      	ldr	r3, [pc, #16]	; (811b44c <_fflush_r+0x74>)
 811b43c:	429c      	cmp	r4, r3
 811b43e:	bf08      	it	eq
 811b440:	68ec      	ldreq	r4, [r5, #12]
 811b442:	e7da      	b.n	811b3fa <_fflush_r+0x22>
 811b444:	0811be0c 	.word	0x0811be0c
 811b448:	0811be2c 	.word	0x0811be2c
 811b44c:	0811bdec 	.word	0x0811bdec

0811b450 <std>:
 811b450:	2300      	movs	r3, #0
 811b452:	b510      	push	{r4, lr}
 811b454:	4604      	mov	r4, r0
 811b456:	e9c0 3300 	strd	r3, r3, [r0]
 811b45a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 811b45e:	6083      	str	r3, [r0, #8]
 811b460:	8181      	strh	r1, [r0, #12]
 811b462:	6643      	str	r3, [r0, #100]	; 0x64
 811b464:	81c2      	strh	r2, [r0, #14]
 811b466:	6183      	str	r3, [r0, #24]
 811b468:	4619      	mov	r1, r3
 811b46a:	2208      	movs	r2, #8
 811b46c:	305c      	adds	r0, #92	; 0x5c
 811b46e:	f7fd fd71 	bl	8118f54 <memset>
 811b472:	4b05      	ldr	r3, [pc, #20]	; (811b488 <std+0x38>)
 811b474:	6263      	str	r3, [r4, #36]	; 0x24
 811b476:	4b05      	ldr	r3, [pc, #20]	; (811b48c <std+0x3c>)
 811b478:	62a3      	str	r3, [r4, #40]	; 0x28
 811b47a:	4b05      	ldr	r3, [pc, #20]	; (811b490 <std+0x40>)
 811b47c:	62e3      	str	r3, [r4, #44]	; 0x2c
 811b47e:	4b05      	ldr	r3, [pc, #20]	; (811b494 <std+0x44>)
 811b480:	6224      	str	r4, [r4, #32]
 811b482:	6323      	str	r3, [r4, #48]	; 0x30
 811b484:	bd10      	pop	{r4, pc}
 811b486:	bf00      	nop
 811b488:	0811b791 	.word	0x0811b791
 811b48c:	0811b7b3 	.word	0x0811b7b3
 811b490:	0811b7eb 	.word	0x0811b7eb
 811b494:	0811b80f 	.word	0x0811b80f

0811b498 <_cleanup_r>:
 811b498:	4901      	ldr	r1, [pc, #4]	; (811b4a0 <_cleanup_r+0x8>)
 811b49a:	f000 b8af 	b.w	811b5fc <_fwalk_reent>
 811b49e:	bf00      	nop
 811b4a0:	0811b3d9 	.word	0x0811b3d9

0811b4a4 <__sfmoreglue>:
 811b4a4:	b570      	push	{r4, r5, r6, lr}
 811b4a6:	1e4a      	subs	r2, r1, #1
 811b4a8:	2568      	movs	r5, #104	; 0x68
 811b4aa:	4355      	muls	r5, r2
 811b4ac:	460e      	mov	r6, r1
 811b4ae:	f105 0174 	add.w	r1, r5, #116	; 0x74
 811b4b2:	f7ff fc23 	bl	811acfc <_malloc_r>
 811b4b6:	4604      	mov	r4, r0
 811b4b8:	b140      	cbz	r0, 811b4cc <__sfmoreglue+0x28>
 811b4ba:	2100      	movs	r1, #0
 811b4bc:	e9c0 1600 	strd	r1, r6, [r0]
 811b4c0:	300c      	adds	r0, #12
 811b4c2:	60a0      	str	r0, [r4, #8]
 811b4c4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 811b4c8:	f7fd fd44 	bl	8118f54 <memset>
 811b4cc:	4620      	mov	r0, r4
 811b4ce:	bd70      	pop	{r4, r5, r6, pc}

0811b4d0 <__sfp_lock_acquire>:
 811b4d0:	4801      	ldr	r0, [pc, #4]	; (811b4d8 <__sfp_lock_acquire+0x8>)
 811b4d2:	f000 b8b3 	b.w	811b63c <__retarget_lock_acquire_recursive>
 811b4d6:	bf00      	nop
 811b4d8:	10008f40 	.word	0x10008f40

0811b4dc <__sfp_lock_release>:
 811b4dc:	4801      	ldr	r0, [pc, #4]	; (811b4e4 <__sfp_lock_release+0x8>)
 811b4de:	f000 b8ae 	b.w	811b63e <__retarget_lock_release_recursive>
 811b4e2:	bf00      	nop
 811b4e4:	10008f40 	.word	0x10008f40

0811b4e8 <__sinit_lock_acquire>:
 811b4e8:	4801      	ldr	r0, [pc, #4]	; (811b4f0 <__sinit_lock_acquire+0x8>)
 811b4ea:	f000 b8a7 	b.w	811b63c <__retarget_lock_acquire_recursive>
 811b4ee:	bf00      	nop
 811b4f0:	10008f3b 	.word	0x10008f3b

0811b4f4 <__sinit_lock_release>:
 811b4f4:	4801      	ldr	r0, [pc, #4]	; (811b4fc <__sinit_lock_release+0x8>)
 811b4f6:	f000 b8a2 	b.w	811b63e <__retarget_lock_release_recursive>
 811b4fa:	bf00      	nop
 811b4fc:	10008f3b 	.word	0x10008f3b

0811b500 <__sinit>:
 811b500:	b510      	push	{r4, lr}
 811b502:	4604      	mov	r4, r0
 811b504:	f7ff fff0 	bl	811b4e8 <__sinit_lock_acquire>
 811b508:	69a3      	ldr	r3, [r4, #24]
 811b50a:	b11b      	cbz	r3, 811b514 <__sinit+0x14>
 811b50c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 811b510:	f7ff bff0 	b.w	811b4f4 <__sinit_lock_release>
 811b514:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 811b518:	6523      	str	r3, [r4, #80]	; 0x50
 811b51a:	4b13      	ldr	r3, [pc, #76]	; (811b568 <__sinit+0x68>)
 811b51c:	4a13      	ldr	r2, [pc, #76]	; (811b56c <__sinit+0x6c>)
 811b51e:	681b      	ldr	r3, [r3, #0]
 811b520:	62a2      	str	r2, [r4, #40]	; 0x28
 811b522:	42a3      	cmp	r3, r4
 811b524:	bf04      	itt	eq
 811b526:	2301      	moveq	r3, #1
 811b528:	61a3      	streq	r3, [r4, #24]
 811b52a:	4620      	mov	r0, r4
 811b52c:	f000 f820 	bl	811b570 <__sfp>
 811b530:	6060      	str	r0, [r4, #4]
 811b532:	4620      	mov	r0, r4
 811b534:	f000 f81c 	bl	811b570 <__sfp>
 811b538:	60a0      	str	r0, [r4, #8]
 811b53a:	4620      	mov	r0, r4
 811b53c:	f000 f818 	bl	811b570 <__sfp>
 811b540:	2200      	movs	r2, #0
 811b542:	60e0      	str	r0, [r4, #12]
 811b544:	2104      	movs	r1, #4
 811b546:	6860      	ldr	r0, [r4, #4]
 811b548:	f7ff ff82 	bl	811b450 <std>
 811b54c:	68a0      	ldr	r0, [r4, #8]
 811b54e:	2201      	movs	r2, #1
 811b550:	2109      	movs	r1, #9
 811b552:	f7ff ff7d 	bl	811b450 <std>
 811b556:	68e0      	ldr	r0, [r4, #12]
 811b558:	2202      	movs	r2, #2
 811b55a:	2112      	movs	r1, #18
 811b55c:	f7ff ff78 	bl	811b450 <std>
 811b560:	2301      	movs	r3, #1
 811b562:	61a3      	str	r3, [r4, #24]
 811b564:	e7d2      	b.n	811b50c <__sinit+0xc>
 811b566:	bf00      	nop
 811b568:	0811ba68 	.word	0x0811ba68
 811b56c:	0811b499 	.word	0x0811b499

0811b570 <__sfp>:
 811b570:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 811b572:	4607      	mov	r7, r0
 811b574:	f7ff ffac 	bl	811b4d0 <__sfp_lock_acquire>
 811b578:	4b1e      	ldr	r3, [pc, #120]	; (811b5f4 <__sfp+0x84>)
 811b57a:	681e      	ldr	r6, [r3, #0]
 811b57c:	69b3      	ldr	r3, [r6, #24]
 811b57e:	b913      	cbnz	r3, 811b586 <__sfp+0x16>
 811b580:	4630      	mov	r0, r6
 811b582:	f7ff ffbd 	bl	811b500 <__sinit>
 811b586:	3648      	adds	r6, #72	; 0x48
 811b588:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 811b58c:	3b01      	subs	r3, #1
 811b58e:	d503      	bpl.n	811b598 <__sfp+0x28>
 811b590:	6833      	ldr	r3, [r6, #0]
 811b592:	b30b      	cbz	r3, 811b5d8 <__sfp+0x68>
 811b594:	6836      	ldr	r6, [r6, #0]
 811b596:	e7f7      	b.n	811b588 <__sfp+0x18>
 811b598:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 811b59c:	b9d5      	cbnz	r5, 811b5d4 <__sfp+0x64>
 811b59e:	4b16      	ldr	r3, [pc, #88]	; (811b5f8 <__sfp+0x88>)
 811b5a0:	60e3      	str	r3, [r4, #12]
 811b5a2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 811b5a6:	6665      	str	r5, [r4, #100]	; 0x64
 811b5a8:	f000 f847 	bl	811b63a <__retarget_lock_init_recursive>
 811b5ac:	f7ff ff96 	bl	811b4dc <__sfp_lock_release>
 811b5b0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 811b5b4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 811b5b8:	6025      	str	r5, [r4, #0]
 811b5ba:	61a5      	str	r5, [r4, #24]
 811b5bc:	2208      	movs	r2, #8
 811b5be:	4629      	mov	r1, r5
 811b5c0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 811b5c4:	f7fd fcc6 	bl	8118f54 <memset>
 811b5c8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 811b5cc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 811b5d0:	4620      	mov	r0, r4
 811b5d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 811b5d4:	3468      	adds	r4, #104	; 0x68
 811b5d6:	e7d9      	b.n	811b58c <__sfp+0x1c>
 811b5d8:	2104      	movs	r1, #4
 811b5da:	4638      	mov	r0, r7
 811b5dc:	f7ff ff62 	bl	811b4a4 <__sfmoreglue>
 811b5e0:	4604      	mov	r4, r0
 811b5e2:	6030      	str	r0, [r6, #0]
 811b5e4:	2800      	cmp	r0, #0
 811b5e6:	d1d5      	bne.n	811b594 <__sfp+0x24>
 811b5e8:	f7ff ff78 	bl	811b4dc <__sfp_lock_release>
 811b5ec:	230c      	movs	r3, #12
 811b5ee:	603b      	str	r3, [r7, #0]
 811b5f0:	e7ee      	b.n	811b5d0 <__sfp+0x60>
 811b5f2:	bf00      	nop
 811b5f4:	0811ba68 	.word	0x0811ba68
 811b5f8:	ffff0001 	.word	0xffff0001

0811b5fc <_fwalk_reent>:
 811b5fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 811b600:	4606      	mov	r6, r0
 811b602:	4688      	mov	r8, r1
 811b604:	f100 0448 	add.w	r4, r0, #72	; 0x48
 811b608:	2700      	movs	r7, #0
 811b60a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 811b60e:	f1b9 0901 	subs.w	r9, r9, #1
 811b612:	d505      	bpl.n	811b620 <_fwalk_reent+0x24>
 811b614:	6824      	ldr	r4, [r4, #0]
 811b616:	2c00      	cmp	r4, #0
 811b618:	d1f7      	bne.n	811b60a <_fwalk_reent+0xe>
 811b61a:	4638      	mov	r0, r7
 811b61c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 811b620:	89ab      	ldrh	r3, [r5, #12]
 811b622:	2b01      	cmp	r3, #1
 811b624:	d907      	bls.n	811b636 <_fwalk_reent+0x3a>
 811b626:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 811b62a:	3301      	adds	r3, #1
 811b62c:	d003      	beq.n	811b636 <_fwalk_reent+0x3a>
 811b62e:	4629      	mov	r1, r5
 811b630:	4630      	mov	r0, r6
 811b632:	47c0      	blx	r8
 811b634:	4307      	orrs	r7, r0
 811b636:	3568      	adds	r5, #104	; 0x68
 811b638:	e7e9      	b.n	811b60e <_fwalk_reent+0x12>

0811b63a <__retarget_lock_init_recursive>:
 811b63a:	4770      	bx	lr

0811b63c <__retarget_lock_acquire_recursive>:
 811b63c:	4770      	bx	lr

0811b63e <__retarget_lock_release_recursive>:
 811b63e:	4770      	bx	lr

0811b640 <__swhatbuf_r>:
 811b640:	b570      	push	{r4, r5, r6, lr}
 811b642:	460e      	mov	r6, r1
 811b644:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 811b648:	2900      	cmp	r1, #0
 811b64a:	b096      	sub	sp, #88	; 0x58
 811b64c:	4614      	mov	r4, r2
 811b64e:	461d      	mov	r5, r3
 811b650:	da07      	bge.n	811b662 <__swhatbuf_r+0x22>
 811b652:	2300      	movs	r3, #0
 811b654:	602b      	str	r3, [r5, #0]
 811b656:	89b3      	ldrh	r3, [r6, #12]
 811b658:	061a      	lsls	r2, r3, #24
 811b65a:	d410      	bmi.n	811b67e <__swhatbuf_r+0x3e>
 811b65c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 811b660:	e00e      	b.n	811b680 <__swhatbuf_r+0x40>
 811b662:	466a      	mov	r2, sp
 811b664:	f000 f8fa 	bl	811b85c <_fstat_r>
 811b668:	2800      	cmp	r0, #0
 811b66a:	dbf2      	blt.n	811b652 <__swhatbuf_r+0x12>
 811b66c:	9a01      	ldr	r2, [sp, #4]
 811b66e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 811b672:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 811b676:	425a      	negs	r2, r3
 811b678:	415a      	adcs	r2, r3
 811b67a:	602a      	str	r2, [r5, #0]
 811b67c:	e7ee      	b.n	811b65c <__swhatbuf_r+0x1c>
 811b67e:	2340      	movs	r3, #64	; 0x40
 811b680:	2000      	movs	r0, #0
 811b682:	6023      	str	r3, [r4, #0]
 811b684:	b016      	add	sp, #88	; 0x58
 811b686:	bd70      	pop	{r4, r5, r6, pc}

0811b688 <__smakebuf_r>:
 811b688:	898b      	ldrh	r3, [r1, #12]
 811b68a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 811b68c:	079d      	lsls	r5, r3, #30
 811b68e:	4606      	mov	r6, r0
 811b690:	460c      	mov	r4, r1
 811b692:	d507      	bpl.n	811b6a4 <__smakebuf_r+0x1c>
 811b694:	f104 0347 	add.w	r3, r4, #71	; 0x47
 811b698:	6023      	str	r3, [r4, #0]
 811b69a:	6123      	str	r3, [r4, #16]
 811b69c:	2301      	movs	r3, #1
 811b69e:	6163      	str	r3, [r4, #20]
 811b6a0:	b002      	add	sp, #8
 811b6a2:	bd70      	pop	{r4, r5, r6, pc}
 811b6a4:	ab01      	add	r3, sp, #4
 811b6a6:	466a      	mov	r2, sp
 811b6a8:	f7ff ffca 	bl	811b640 <__swhatbuf_r>
 811b6ac:	9900      	ldr	r1, [sp, #0]
 811b6ae:	4605      	mov	r5, r0
 811b6b0:	4630      	mov	r0, r6
 811b6b2:	f7ff fb23 	bl	811acfc <_malloc_r>
 811b6b6:	b948      	cbnz	r0, 811b6cc <__smakebuf_r+0x44>
 811b6b8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 811b6bc:	059a      	lsls	r2, r3, #22
 811b6be:	d4ef      	bmi.n	811b6a0 <__smakebuf_r+0x18>
 811b6c0:	f023 0303 	bic.w	r3, r3, #3
 811b6c4:	f043 0302 	orr.w	r3, r3, #2
 811b6c8:	81a3      	strh	r3, [r4, #12]
 811b6ca:	e7e3      	b.n	811b694 <__smakebuf_r+0xc>
 811b6cc:	4b0d      	ldr	r3, [pc, #52]	; (811b704 <__smakebuf_r+0x7c>)
 811b6ce:	62b3      	str	r3, [r6, #40]	; 0x28
 811b6d0:	89a3      	ldrh	r3, [r4, #12]
 811b6d2:	6020      	str	r0, [r4, #0]
 811b6d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 811b6d8:	81a3      	strh	r3, [r4, #12]
 811b6da:	9b00      	ldr	r3, [sp, #0]
 811b6dc:	6163      	str	r3, [r4, #20]
 811b6de:	9b01      	ldr	r3, [sp, #4]
 811b6e0:	6120      	str	r0, [r4, #16]
 811b6e2:	b15b      	cbz	r3, 811b6fc <__smakebuf_r+0x74>
 811b6e4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 811b6e8:	4630      	mov	r0, r6
 811b6ea:	f000 f8c9 	bl	811b880 <_isatty_r>
 811b6ee:	b128      	cbz	r0, 811b6fc <__smakebuf_r+0x74>
 811b6f0:	89a3      	ldrh	r3, [r4, #12]
 811b6f2:	f023 0303 	bic.w	r3, r3, #3
 811b6f6:	f043 0301 	orr.w	r3, r3, #1
 811b6fa:	81a3      	strh	r3, [r4, #12]
 811b6fc:	89a0      	ldrh	r0, [r4, #12]
 811b6fe:	4305      	orrs	r5, r0
 811b700:	81a5      	strh	r5, [r4, #12]
 811b702:	e7cd      	b.n	811b6a0 <__smakebuf_r+0x18>
 811b704:	0811b499 	.word	0x0811b499

0811b708 <_raise_r>:
 811b708:	291f      	cmp	r1, #31
 811b70a:	b538      	push	{r3, r4, r5, lr}
 811b70c:	4604      	mov	r4, r0
 811b70e:	460d      	mov	r5, r1
 811b710:	d904      	bls.n	811b71c <_raise_r+0x14>
 811b712:	2316      	movs	r3, #22
 811b714:	6003      	str	r3, [r0, #0]
 811b716:	f04f 30ff 	mov.w	r0, #4294967295
 811b71a:	bd38      	pop	{r3, r4, r5, pc}
 811b71c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 811b71e:	b112      	cbz	r2, 811b726 <_raise_r+0x1e>
 811b720:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 811b724:	b94b      	cbnz	r3, 811b73a <_raise_r+0x32>
 811b726:	4620      	mov	r0, r4
 811b728:	f000 f830 	bl	811b78c <_getpid_r>
 811b72c:	462a      	mov	r2, r5
 811b72e:	4601      	mov	r1, r0
 811b730:	4620      	mov	r0, r4
 811b732:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 811b736:	f000 b817 	b.w	811b768 <_kill_r>
 811b73a:	2b01      	cmp	r3, #1
 811b73c:	d00a      	beq.n	811b754 <_raise_r+0x4c>
 811b73e:	1c59      	adds	r1, r3, #1
 811b740:	d103      	bne.n	811b74a <_raise_r+0x42>
 811b742:	2316      	movs	r3, #22
 811b744:	6003      	str	r3, [r0, #0]
 811b746:	2001      	movs	r0, #1
 811b748:	e7e7      	b.n	811b71a <_raise_r+0x12>
 811b74a:	2400      	movs	r4, #0
 811b74c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 811b750:	4628      	mov	r0, r5
 811b752:	4798      	blx	r3
 811b754:	2000      	movs	r0, #0
 811b756:	e7e0      	b.n	811b71a <_raise_r+0x12>

0811b758 <raise>:
 811b758:	4b02      	ldr	r3, [pc, #8]	; (811b764 <raise+0xc>)
 811b75a:	4601      	mov	r1, r0
 811b75c:	6818      	ldr	r0, [r3, #0]
 811b75e:	f7ff bfd3 	b.w	811b708 <_raise_r>
 811b762:	bf00      	nop
 811b764:	10000188 	.word	0x10000188

0811b768 <_kill_r>:
 811b768:	b538      	push	{r3, r4, r5, lr}
 811b76a:	4d07      	ldr	r5, [pc, #28]	; (811b788 <_kill_r+0x20>)
 811b76c:	2300      	movs	r3, #0
 811b76e:	4604      	mov	r4, r0
 811b770:	4608      	mov	r0, r1
 811b772:	4611      	mov	r1, r2
 811b774:	602b      	str	r3, [r5, #0]
 811b776:	f7e6 fd9b 	bl	81022b0 <_kill>
 811b77a:	1c43      	adds	r3, r0, #1
 811b77c:	d102      	bne.n	811b784 <_kill_r+0x1c>
 811b77e:	682b      	ldr	r3, [r5, #0]
 811b780:	b103      	cbz	r3, 811b784 <_kill_r+0x1c>
 811b782:	6023      	str	r3, [r4, #0]
 811b784:	bd38      	pop	{r3, r4, r5, pc}
 811b786:	bf00      	nop
 811b788:	10008f34 	.word	0x10008f34

0811b78c <_getpid_r>:
 811b78c:	f7e6 bd88 	b.w	81022a0 <_getpid>

0811b790 <__sread>:
 811b790:	b510      	push	{r4, lr}
 811b792:	460c      	mov	r4, r1
 811b794:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 811b798:	f000 f894 	bl	811b8c4 <_read_r>
 811b79c:	2800      	cmp	r0, #0
 811b79e:	bfab      	itete	ge
 811b7a0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 811b7a2:	89a3      	ldrhlt	r3, [r4, #12]
 811b7a4:	181b      	addge	r3, r3, r0
 811b7a6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 811b7aa:	bfac      	ite	ge
 811b7ac:	6563      	strge	r3, [r4, #84]	; 0x54
 811b7ae:	81a3      	strhlt	r3, [r4, #12]
 811b7b0:	bd10      	pop	{r4, pc}

0811b7b2 <__swrite>:
 811b7b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 811b7b6:	461f      	mov	r7, r3
 811b7b8:	898b      	ldrh	r3, [r1, #12]
 811b7ba:	05db      	lsls	r3, r3, #23
 811b7bc:	4605      	mov	r5, r0
 811b7be:	460c      	mov	r4, r1
 811b7c0:	4616      	mov	r6, r2
 811b7c2:	d505      	bpl.n	811b7d0 <__swrite+0x1e>
 811b7c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 811b7c8:	2302      	movs	r3, #2
 811b7ca:	2200      	movs	r2, #0
 811b7cc:	f000 f868 	bl	811b8a0 <_lseek_r>
 811b7d0:	89a3      	ldrh	r3, [r4, #12]
 811b7d2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 811b7d6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 811b7da:	81a3      	strh	r3, [r4, #12]
 811b7dc:	4632      	mov	r2, r6
 811b7de:	463b      	mov	r3, r7
 811b7e0:	4628      	mov	r0, r5
 811b7e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 811b7e6:	f000 b817 	b.w	811b818 <_write_r>

0811b7ea <__sseek>:
 811b7ea:	b510      	push	{r4, lr}
 811b7ec:	460c      	mov	r4, r1
 811b7ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 811b7f2:	f000 f855 	bl	811b8a0 <_lseek_r>
 811b7f6:	1c43      	adds	r3, r0, #1
 811b7f8:	89a3      	ldrh	r3, [r4, #12]
 811b7fa:	bf15      	itete	ne
 811b7fc:	6560      	strne	r0, [r4, #84]	; 0x54
 811b7fe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 811b802:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 811b806:	81a3      	strheq	r3, [r4, #12]
 811b808:	bf18      	it	ne
 811b80a:	81a3      	strhne	r3, [r4, #12]
 811b80c:	bd10      	pop	{r4, pc}

0811b80e <__sclose>:
 811b80e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 811b812:	f000 b813 	b.w	811b83c <_close_r>
	...

0811b818 <_write_r>:
 811b818:	b538      	push	{r3, r4, r5, lr}
 811b81a:	4d07      	ldr	r5, [pc, #28]	; (811b838 <_write_r+0x20>)
 811b81c:	4604      	mov	r4, r0
 811b81e:	4608      	mov	r0, r1
 811b820:	4611      	mov	r1, r2
 811b822:	2200      	movs	r2, #0
 811b824:	602a      	str	r2, [r5, #0]
 811b826:	461a      	mov	r2, r3
 811b828:	f7e6 fd79 	bl	810231e <_write>
 811b82c:	1c43      	adds	r3, r0, #1
 811b82e:	d102      	bne.n	811b836 <_write_r+0x1e>
 811b830:	682b      	ldr	r3, [r5, #0]
 811b832:	b103      	cbz	r3, 811b836 <_write_r+0x1e>
 811b834:	6023      	str	r3, [r4, #0]
 811b836:	bd38      	pop	{r3, r4, r5, pc}
 811b838:	10008f34 	.word	0x10008f34

0811b83c <_close_r>:
 811b83c:	b538      	push	{r3, r4, r5, lr}
 811b83e:	4d06      	ldr	r5, [pc, #24]	; (811b858 <_close_r+0x1c>)
 811b840:	2300      	movs	r3, #0
 811b842:	4604      	mov	r4, r0
 811b844:	4608      	mov	r0, r1
 811b846:	602b      	str	r3, [r5, #0]
 811b848:	f7e6 fd85 	bl	8102356 <_close>
 811b84c:	1c43      	adds	r3, r0, #1
 811b84e:	d102      	bne.n	811b856 <_close_r+0x1a>
 811b850:	682b      	ldr	r3, [r5, #0]
 811b852:	b103      	cbz	r3, 811b856 <_close_r+0x1a>
 811b854:	6023      	str	r3, [r4, #0]
 811b856:	bd38      	pop	{r3, r4, r5, pc}
 811b858:	10008f34 	.word	0x10008f34

0811b85c <_fstat_r>:
 811b85c:	b538      	push	{r3, r4, r5, lr}
 811b85e:	4d07      	ldr	r5, [pc, #28]	; (811b87c <_fstat_r+0x20>)
 811b860:	2300      	movs	r3, #0
 811b862:	4604      	mov	r4, r0
 811b864:	4608      	mov	r0, r1
 811b866:	4611      	mov	r1, r2
 811b868:	602b      	str	r3, [r5, #0]
 811b86a:	f7e6 fd80 	bl	810236e <_fstat>
 811b86e:	1c43      	adds	r3, r0, #1
 811b870:	d102      	bne.n	811b878 <_fstat_r+0x1c>
 811b872:	682b      	ldr	r3, [r5, #0]
 811b874:	b103      	cbz	r3, 811b878 <_fstat_r+0x1c>
 811b876:	6023      	str	r3, [r4, #0]
 811b878:	bd38      	pop	{r3, r4, r5, pc}
 811b87a:	bf00      	nop
 811b87c:	10008f34 	.word	0x10008f34

0811b880 <_isatty_r>:
 811b880:	b538      	push	{r3, r4, r5, lr}
 811b882:	4d06      	ldr	r5, [pc, #24]	; (811b89c <_isatty_r+0x1c>)
 811b884:	2300      	movs	r3, #0
 811b886:	4604      	mov	r4, r0
 811b888:	4608      	mov	r0, r1
 811b88a:	602b      	str	r3, [r5, #0]
 811b88c:	f7e6 fd7f 	bl	810238e <_isatty>
 811b890:	1c43      	adds	r3, r0, #1
 811b892:	d102      	bne.n	811b89a <_isatty_r+0x1a>
 811b894:	682b      	ldr	r3, [r5, #0]
 811b896:	b103      	cbz	r3, 811b89a <_isatty_r+0x1a>
 811b898:	6023      	str	r3, [r4, #0]
 811b89a:	bd38      	pop	{r3, r4, r5, pc}
 811b89c:	10008f34 	.word	0x10008f34

0811b8a0 <_lseek_r>:
 811b8a0:	b538      	push	{r3, r4, r5, lr}
 811b8a2:	4d07      	ldr	r5, [pc, #28]	; (811b8c0 <_lseek_r+0x20>)
 811b8a4:	4604      	mov	r4, r0
 811b8a6:	4608      	mov	r0, r1
 811b8a8:	4611      	mov	r1, r2
 811b8aa:	2200      	movs	r2, #0
 811b8ac:	602a      	str	r2, [r5, #0]
 811b8ae:	461a      	mov	r2, r3
 811b8b0:	f7e6 fd78 	bl	81023a4 <_lseek>
 811b8b4:	1c43      	adds	r3, r0, #1
 811b8b6:	d102      	bne.n	811b8be <_lseek_r+0x1e>
 811b8b8:	682b      	ldr	r3, [r5, #0]
 811b8ba:	b103      	cbz	r3, 811b8be <_lseek_r+0x1e>
 811b8bc:	6023      	str	r3, [r4, #0]
 811b8be:	bd38      	pop	{r3, r4, r5, pc}
 811b8c0:	10008f34 	.word	0x10008f34

0811b8c4 <_read_r>:
 811b8c4:	b538      	push	{r3, r4, r5, lr}
 811b8c6:	4d07      	ldr	r5, [pc, #28]	; (811b8e4 <_read_r+0x20>)
 811b8c8:	4604      	mov	r4, r0
 811b8ca:	4608      	mov	r0, r1
 811b8cc:	4611      	mov	r1, r2
 811b8ce:	2200      	movs	r2, #0
 811b8d0:	602a      	str	r2, [r5, #0]
 811b8d2:	461a      	mov	r2, r3
 811b8d4:	f7e6 fd06 	bl	81022e4 <_read>
 811b8d8:	1c43      	adds	r3, r0, #1
 811b8da:	d102      	bne.n	811b8e2 <_read_r+0x1e>
 811b8dc:	682b      	ldr	r3, [r5, #0]
 811b8de:	b103      	cbz	r3, 811b8e2 <_read_r+0x1e>
 811b8e0:	6023      	str	r3, [r4, #0]
 811b8e2:	bd38      	pop	{r3, r4, r5, pc}
 811b8e4:	10008f34 	.word	0x10008f34

0811b8e8 <_init>:
 811b8e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 811b8ea:	bf00      	nop
 811b8ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 811b8ee:	bc08      	pop	{r3}
 811b8f0:	469e      	mov	lr, r3
 811b8f2:	4770      	bx	lr

0811b8f4 <_fini>:
 811b8f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 811b8f6:	bf00      	nop
 811b8f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 811b8fa:	bc08      	pop	{r3}
 811b8fc:	469e      	mov	lr, r3
 811b8fe:	4770      	bx	lr
