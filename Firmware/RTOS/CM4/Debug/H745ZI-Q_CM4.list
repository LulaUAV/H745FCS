
H745ZI-Q_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08100000  08100000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001b0f0  081002a0  081002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000054c  0811b390  0811b390  0002b390  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0811b8dc  0811b8dc  0002b8dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0811b8e4  0811b8e4  0002b8e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0811b8e8  0811b8e8  0002b8e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000358  10000000  0811b8ec  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00008bec  10000358  0811bc44  00030358  2**2
                  ALLOC
  8 .RAM_D3       00000000  38000000  38000000  00030358  2**0
                  CONTENTS
  9 ._user_heap_stack 00000604  10008f44  10008f44  00038f44  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  00030358  2**0
                  CONTENTS, READONLY
 11 .debug_info   00063733  00000000  00000000  00030388  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 0000a62e  00000000  00000000  00093abb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 000030e0  00000000  00000000  0009e0f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_ranges 00002d58  00000000  00000000  000a11d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00048ff1  00000000  00000000  000a3f28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   000439e0  00000000  00000000  000ecf19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    001b28d8  00000000  00000000  001308f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000053  00000000  00000000  002e31d1  2**0
                  CONTENTS, READONLY
 19 .debug_frame  0000dd80  00000000  00000000  002e3224  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

081002a0 <__do_global_dtors_aux>:
 81002a0:	b510      	push	{r4, lr}
 81002a2:	4c05      	ldr	r4, [pc, #20]	; (81002b8 <__do_global_dtors_aux+0x18>)
 81002a4:	7823      	ldrb	r3, [r4, #0]
 81002a6:	b933      	cbnz	r3, 81002b6 <__do_global_dtors_aux+0x16>
 81002a8:	4b04      	ldr	r3, [pc, #16]	; (81002bc <__do_global_dtors_aux+0x1c>)
 81002aa:	b113      	cbz	r3, 81002b2 <__do_global_dtors_aux+0x12>
 81002ac:	4804      	ldr	r0, [pc, #16]	; (81002c0 <__do_global_dtors_aux+0x20>)
 81002ae:	f3af 8000 	nop.w
 81002b2:	2301      	movs	r3, #1
 81002b4:	7023      	strb	r3, [r4, #0]
 81002b6:	bd10      	pop	{r4, pc}
 81002b8:	10000358 	.word	0x10000358
 81002bc:	00000000 	.word	0x00000000
 81002c0:	0811b378 	.word	0x0811b378

081002c4 <frame_dummy>:
 81002c4:	b508      	push	{r3, lr}
 81002c6:	4b03      	ldr	r3, [pc, #12]	; (81002d4 <frame_dummy+0x10>)
 81002c8:	b11b      	cbz	r3, 81002d2 <frame_dummy+0xe>
 81002ca:	4903      	ldr	r1, [pc, #12]	; (81002d8 <frame_dummy+0x14>)
 81002cc:	4803      	ldr	r0, [pc, #12]	; (81002dc <frame_dummy+0x18>)
 81002ce:	f3af 8000 	nop.w
 81002d2:	bd08      	pop	{r3, pc}
 81002d4:	00000000 	.word	0x00000000
 81002d8:	1000035c 	.word	0x1000035c
 81002dc:	0811b378 	.word	0x0811b378

081002e0 <strlen>:
 81002e0:	4603      	mov	r3, r0
 81002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 81002e6:	2a00      	cmp	r2, #0
 81002e8:	d1fb      	bne.n	81002e2 <strlen+0x2>
 81002ea:	1a18      	subs	r0, r3, r0
 81002ec:	3801      	subs	r0, #1
 81002ee:	4770      	bx	lr

081002f0 <memchr>:
 81002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 81002f4:	2a10      	cmp	r2, #16
 81002f6:	db2b      	blt.n	8100350 <memchr+0x60>
 81002f8:	f010 0f07 	tst.w	r0, #7
 81002fc:	d008      	beq.n	8100310 <memchr+0x20>
 81002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8100302:	3a01      	subs	r2, #1
 8100304:	428b      	cmp	r3, r1
 8100306:	d02d      	beq.n	8100364 <memchr+0x74>
 8100308:	f010 0f07 	tst.w	r0, #7
 810030c:	b342      	cbz	r2, 8100360 <memchr+0x70>
 810030e:	d1f6      	bne.n	81002fe <memchr+0xe>
 8100310:	b4f0      	push	{r4, r5, r6, r7}
 8100312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8100316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 810031a:	f022 0407 	bic.w	r4, r2, #7
 810031e:	f07f 0700 	mvns.w	r7, #0
 8100322:	2300      	movs	r3, #0
 8100324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8100328:	3c08      	subs	r4, #8
 810032a:	ea85 0501 	eor.w	r5, r5, r1
 810032e:	ea86 0601 	eor.w	r6, r6, r1
 8100332:	fa85 f547 	uadd8	r5, r5, r7
 8100336:	faa3 f587 	sel	r5, r3, r7
 810033a:	fa86 f647 	uadd8	r6, r6, r7
 810033e:	faa5 f687 	sel	r6, r5, r7
 8100342:	b98e      	cbnz	r6, 8100368 <memchr+0x78>
 8100344:	d1ee      	bne.n	8100324 <memchr+0x34>
 8100346:	bcf0      	pop	{r4, r5, r6, r7}
 8100348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 810034c:	f002 0207 	and.w	r2, r2, #7
 8100350:	b132      	cbz	r2, 8100360 <memchr+0x70>
 8100352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8100356:	3a01      	subs	r2, #1
 8100358:	ea83 0301 	eor.w	r3, r3, r1
 810035c:	b113      	cbz	r3, 8100364 <memchr+0x74>
 810035e:	d1f8      	bne.n	8100352 <memchr+0x62>
 8100360:	2000      	movs	r0, #0
 8100362:	4770      	bx	lr
 8100364:	3801      	subs	r0, #1
 8100366:	4770      	bx	lr
 8100368:	2d00      	cmp	r5, #0
 810036a:	bf06      	itte	eq
 810036c:	4635      	moveq	r5, r6
 810036e:	3803      	subeq	r0, #3
 8100370:	3807      	subne	r0, #7
 8100372:	f015 0f01 	tst.w	r5, #1
 8100376:	d107      	bne.n	8100388 <memchr+0x98>
 8100378:	3001      	adds	r0, #1
 810037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 810037e:	bf02      	ittt	eq
 8100380:	3001      	addeq	r0, #1
 8100382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8100386:	3001      	addeq	r0, #1
 8100388:	bcf0      	pop	{r4, r5, r6, r7}
 810038a:	3801      	subs	r0, #1
 810038c:	4770      	bx	lr
 810038e:	bf00      	nop

08100390 <__aeabi_drsub>:
 8100390:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8100394:	e002      	b.n	810039c <__adddf3>
 8100396:	bf00      	nop

08100398 <__aeabi_dsub>:
 8100398:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0810039c <__adddf3>:
 810039c:	b530      	push	{r4, r5, lr}
 810039e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 81003a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 81003a6:	ea94 0f05 	teq	r4, r5
 81003aa:	bf08      	it	eq
 81003ac:	ea90 0f02 	teqeq	r0, r2
 81003b0:	bf1f      	itttt	ne
 81003b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 81003b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 81003ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 81003be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 81003c2:	f000 80e2 	beq.w	810058a <__adddf3+0x1ee>
 81003c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 81003ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 81003ce:	bfb8      	it	lt
 81003d0:	426d      	neglt	r5, r5
 81003d2:	dd0c      	ble.n	81003ee <__adddf3+0x52>
 81003d4:	442c      	add	r4, r5
 81003d6:	ea80 0202 	eor.w	r2, r0, r2
 81003da:	ea81 0303 	eor.w	r3, r1, r3
 81003de:	ea82 0000 	eor.w	r0, r2, r0
 81003e2:	ea83 0101 	eor.w	r1, r3, r1
 81003e6:	ea80 0202 	eor.w	r2, r0, r2
 81003ea:	ea81 0303 	eor.w	r3, r1, r3
 81003ee:	2d36      	cmp	r5, #54	; 0x36
 81003f0:	bf88      	it	hi
 81003f2:	bd30      	pophi	{r4, r5, pc}
 81003f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 81003f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 81003fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8100400:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8100404:	d002      	beq.n	810040c <__adddf3+0x70>
 8100406:	4240      	negs	r0, r0
 8100408:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 810040c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8100410:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8100414:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8100418:	d002      	beq.n	8100420 <__adddf3+0x84>
 810041a:	4252      	negs	r2, r2
 810041c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8100420:	ea94 0f05 	teq	r4, r5
 8100424:	f000 80a7 	beq.w	8100576 <__adddf3+0x1da>
 8100428:	f1a4 0401 	sub.w	r4, r4, #1
 810042c:	f1d5 0e20 	rsbs	lr, r5, #32
 8100430:	db0d      	blt.n	810044e <__adddf3+0xb2>
 8100432:	fa02 fc0e 	lsl.w	ip, r2, lr
 8100436:	fa22 f205 	lsr.w	r2, r2, r5
 810043a:	1880      	adds	r0, r0, r2
 810043c:	f141 0100 	adc.w	r1, r1, #0
 8100440:	fa03 f20e 	lsl.w	r2, r3, lr
 8100444:	1880      	adds	r0, r0, r2
 8100446:	fa43 f305 	asr.w	r3, r3, r5
 810044a:	4159      	adcs	r1, r3
 810044c:	e00e      	b.n	810046c <__adddf3+0xd0>
 810044e:	f1a5 0520 	sub.w	r5, r5, #32
 8100452:	f10e 0e20 	add.w	lr, lr, #32
 8100456:	2a01      	cmp	r2, #1
 8100458:	fa03 fc0e 	lsl.w	ip, r3, lr
 810045c:	bf28      	it	cs
 810045e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8100462:	fa43 f305 	asr.w	r3, r3, r5
 8100466:	18c0      	adds	r0, r0, r3
 8100468:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 810046c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8100470:	d507      	bpl.n	8100482 <__adddf3+0xe6>
 8100472:	f04f 0e00 	mov.w	lr, #0
 8100476:	f1dc 0c00 	rsbs	ip, ip, #0
 810047a:	eb7e 0000 	sbcs.w	r0, lr, r0
 810047e:	eb6e 0101 	sbc.w	r1, lr, r1
 8100482:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8100486:	d31b      	bcc.n	81004c0 <__adddf3+0x124>
 8100488:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 810048c:	d30c      	bcc.n	81004a8 <__adddf3+0x10c>
 810048e:	0849      	lsrs	r1, r1, #1
 8100490:	ea5f 0030 	movs.w	r0, r0, rrx
 8100494:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8100498:	f104 0401 	add.w	r4, r4, #1
 810049c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 81004a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 81004a4:	f080 809a 	bcs.w	81005dc <__adddf3+0x240>
 81004a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 81004ac:	bf08      	it	eq
 81004ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 81004b2:	f150 0000 	adcs.w	r0, r0, #0
 81004b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 81004ba:	ea41 0105 	orr.w	r1, r1, r5
 81004be:	bd30      	pop	{r4, r5, pc}
 81004c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 81004c4:	4140      	adcs	r0, r0
 81004c6:	eb41 0101 	adc.w	r1, r1, r1
 81004ca:	3c01      	subs	r4, #1
 81004cc:	bf28      	it	cs
 81004ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 81004d2:	d2e9      	bcs.n	81004a8 <__adddf3+0x10c>
 81004d4:	f091 0f00 	teq	r1, #0
 81004d8:	bf04      	itt	eq
 81004da:	4601      	moveq	r1, r0
 81004dc:	2000      	moveq	r0, #0
 81004de:	fab1 f381 	clz	r3, r1
 81004e2:	bf08      	it	eq
 81004e4:	3320      	addeq	r3, #32
 81004e6:	f1a3 030b 	sub.w	r3, r3, #11
 81004ea:	f1b3 0220 	subs.w	r2, r3, #32
 81004ee:	da0c      	bge.n	810050a <__adddf3+0x16e>
 81004f0:	320c      	adds	r2, #12
 81004f2:	dd08      	ble.n	8100506 <__adddf3+0x16a>
 81004f4:	f102 0c14 	add.w	ip, r2, #20
 81004f8:	f1c2 020c 	rsb	r2, r2, #12
 81004fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8100500:	fa21 f102 	lsr.w	r1, r1, r2
 8100504:	e00c      	b.n	8100520 <__adddf3+0x184>
 8100506:	f102 0214 	add.w	r2, r2, #20
 810050a:	bfd8      	it	le
 810050c:	f1c2 0c20 	rsble	ip, r2, #32
 8100510:	fa01 f102 	lsl.w	r1, r1, r2
 8100514:	fa20 fc0c 	lsr.w	ip, r0, ip
 8100518:	bfdc      	itt	le
 810051a:	ea41 010c 	orrle.w	r1, r1, ip
 810051e:	4090      	lslle	r0, r2
 8100520:	1ae4      	subs	r4, r4, r3
 8100522:	bfa2      	ittt	ge
 8100524:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8100528:	4329      	orrge	r1, r5
 810052a:	bd30      	popge	{r4, r5, pc}
 810052c:	ea6f 0404 	mvn.w	r4, r4
 8100530:	3c1f      	subs	r4, #31
 8100532:	da1c      	bge.n	810056e <__adddf3+0x1d2>
 8100534:	340c      	adds	r4, #12
 8100536:	dc0e      	bgt.n	8100556 <__adddf3+0x1ba>
 8100538:	f104 0414 	add.w	r4, r4, #20
 810053c:	f1c4 0220 	rsb	r2, r4, #32
 8100540:	fa20 f004 	lsr.w	r0, r0, r4
 8100544:	fa01 f302 	lsl.w	r3, r1, r2
 8100548:	ea40 0003 	orr.w	r0, r0, r3
 810054c:	fa21 f304 	lsr.w	r3, r1, r4
 8100550:	ea45 0103 	orr.w	r1, r5, r3
 8100554:	bd30      	pop	{r4, r5, pc}
 8100556:	f1c4 040c 	rsb	r4, r4, #12
 810055a:	f1c4 0220 	rsb	r2, r4, #32
 810055e:	fa20 f002 	lsr.w	r0, r0, r2
 8100562:	fa01 f304 	lsl.w	r3, r1, r4
 8100566:	ea40 0003 	orr.w	r0, r0, r3
 810056a:	4629      	mov	r1, r5
 810056c:	bd30      	pop	{r4, r5, pc}
 810056e:	fa21 f004 	lsr.w	r0, r1, r4
 8100572:	4629      	mov	r1, r5
 8100574:	bd30      	pop	{r4, r5, pc}
 8100576:	f094 0f00 	teq	r4, #0
 810057a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 810057e:	bf06      	itte	eq
 8100580:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8100584:	3401      	addeq	r4, #1
 8100586:	3d01      	subne	r5, #1
 8100588:	e74e      	b.n	8100428 <__adddf3+0x8c>
 810058a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 810058e:	bf18      	it	ne
 8100590:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8100594:	d029      	beq.n	81005ea <__adddf3+0x24e>
 8100596:	ea94 0f05 	teq	r4, r5
 810059a:	bf08      	it	eq
 810059c:	ea90 0f02 	teqeq	r0, r2
 81005a0:	d005      	beq.n	81005ae <__adddf3+0x212>
 81005a2:	ea54 0c00 	orrs.w	ip, r4, r0
 81005a6:	bf04      	itt	eq
 81005a8:	4619      	moveq	r1, r3
 81005aa:	4610      	moveq	r0, r2
 81005ac:	bd30      	pop	{r4, r5, pc}
 81005ae:	ea91 0f03 	teq	r1, r3
 81005b2:	bf1e      	ittt	ne
 81005b4:	2100      	movne	r1, #0
 81005b6:	2000      	movne	r0, #0
 81005b8:	bd30      	popne	{r4, r5, pc}
 81005ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 81005be:	d105      	bne.n	81005cc <__adddf3+0x230>
 81005c0:	0040      	lsls	r0, r0, #1
 81005c2:	4149      	adcs	r1, r1
 81005c4:	bf28      	it	cs
 81005c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 81005ca:	bd30      	pop	{r4, r5, pc}
 81005cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 81005d0:	bf3c      	itt	cc
 81005d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 81005d6:	bd30      	popcc	{r4, r5, pc}
 81005d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 81005dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 81005e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 81005e4:	f04f 0000 	mov.w	r0, #0
 81005e8:	bd30      	pop	{r4, r5, pc}
 81005ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 81005ee:	bf1a      	itte	ne
 81005f0:	4619      	movne	r1, r3
 81005f2:	4610      	movne	r0, r2
 81005f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 81005f8:	bf1c      	itt	ne
 81005fa:	460b      	movne	r3, r1
 81005fc:	4602      	movne	r2, r0
 81005fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8100602:	bf06      	itte	eq
 8100604:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8100608:	ea91 0f03 	teqeq	r1, r3
 810060c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8100610:	bd30      	pop	{r4, r5, pc}
 8100612:	bf00      	nop

08100614 <__aeabi_ui2d>:
 8100614:	f090 0f00 	teq	r0, #0
 8100618:	bf04      	itt	eq
 810061a:	2100      	moveq	r1, #0
 810061c:	4770      	bxeq	lr
 810061e:	b530      	push	{r4, r5, lr}
 8100620:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8100624:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8100628:	f04f 0500 	mov.w	r5, #0
 810062c:	f04f 0100 	mov.w	r1, #0
 8100630:	e750      	b.n	81004d4 <__adddf3+0x138>
 8100632:	bf00      	nop

08100634 <__aeabi_i2d>:
 8100634:	f090 0f00 	teq	r0, #0
 8100638:	bf04      	itt	eq
 810063a:	2100      	moveq	r1, #0
 810063c:	4770      	bxeq	lr
 810063e:	b530      	push	{r4, r5, lr}
 8100640:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8100644:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8100648:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 810064c:	bf48      	it	mi
 810064e:	4240      	negmi	r0, r0
 8100650:	f04f 0100 	mov.w	r1, #0
 8100654:	e73e      	b.n	81004d4 <__adddf3+0x138>
 8100656:	bf00      	nop

08100658 <__aeabi_f2d>:
 8100658:	0042      	lsls	r2, r0, #1
 810065a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 810065e:	ea4f 0131 	mov.w	r1, r1, rrx
 8100662:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8100666:	bf1f      	itttt	ne
 8100668:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 810066c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8100670:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8100674:	4770      	bxne	lr
 8100676:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 810067a:	bf08      	it	eq
 810067c:	4770      	bxeq	lr
 810067e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8100682:	bf04      	itt	eq
 8100684:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8100688:	4770      	bxeq	lr
 810068a:	b530      	push	{r4, r5, lr}
 810068c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8100690:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8100694:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8100698:	e71c      	b.n	81004d4 <__adddf3+0x138>
 810069a:	bf00      	nop

0810069c <__aeabi_ul2d>:
 810069c:	ea50 0201 	orrs.w	r2, r0, r1
 81006a0:	bf08      	it	eq
 81006a2:	4770      	bxeq	lr
 81006a4:	b530      	push	{r4, r5, lr}
 81006a6:	f04f 0500 	mov.w	r5, #0
 81006aa:	e00a      	b.n	81006c2 <__aeabi_l2d+0x16>

081006ac <__aeabi_l2d>:
 81006ac:	ea50 0201 	orrs.w	r2, r0, r1
 81006b0:	bf08      	it	eq
 81006b2:	4770      	bxeq	lr
 81006b4:	b530      	push	{r4, r5, lr}
 81006b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 81006ba:	d502      	bpl.n	81006c2 <__aeabi_l2d+0x16>
 81006bc:	4240      	negs	r0, r0
 81006be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 81006c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 81006c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 81006ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 81006ce:	f43f aed8 	beq.w	8100482 <__adddf3+0xe6>
 81006d2:	f04f 0203 	mov.w	r2, #3
 81006d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 81006da:	bf18      	it	ne
 81006dc:	3203      	addne	r2, #3
 81006de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 81006e2:	bf18      	it	ne
 81006e4:	3203      	addne	r2, #3
 81006e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 81006ea:	f1c2 0320 	rsb	r3, r2, #32
 81006ee:	fa00 fc03 	lsl.w	ip, r0, r3
 81006f2:	fa20 f002 	lsr.w	r0, r0, r2
 81006f6:	fa01 fe03 	lsl.w	lr, r1, r3
 81006fa:	ea40 000e 	orr.w	r0, r0, lr
 81006fe:	fa21 f102 	lsr.w	r1, r1, r2
 8100702:	4414      	add	r4, r2
 8100704:	e6bd      	b.n	8100482 <__adddf3+0xe6>
 8100706:	bf00      	nop

08100708 <__aeabi_dmul>:
 8100708:	b570      	push	{r4, r5, r6, lr}
 810070a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 810070e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8100712:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8100716:	bf1d      	ittte	ne
 8100718:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 810071c:	ea94 0f0c 	teqne	r4, ip
 8100720:	ea95 0f0c 	teqne	r5, ip
 8100724:	f000 f8de 	bleq	81008e4 <__aeabi_dmul+0x1dc>
 8100728:	442c      	add	r4, r5
 810072a:	ea81 0603 	eor.w	r6, r1, r3
 810072e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8100732:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8100736:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 810073a:	bf18      	it	ne
 810073c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8100740:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8100744:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8100748:	d038      	beq.n	81007bc <__aeabi_dmul+0xb4>
 810074a:	fba0 ce02 	umull	ip, lr, r0, r2
 810074e:	f04f 0500 	mov.w	r5, #0
 8100752:	fbe1 e502 	umlal	lr, r5, r1, r2
 8100756:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 810075a:	fbe0 e503 	umlal	lr, r5, r0, r3
 810075e:	f04f 0600 	mov.w	r6, #0
 8100762:	fbe1 5603 	umlal	r5, r6, r1, r3
 8100766:	f09c 0f00 	teq	ip, #0
 810076a:	bf18      	it	ne
 810076c:	f04e 0e01 	orrne.w	lr, lr, #1
 8100770:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8100774:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8100778:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 810077c:	d204      	bcs.n	8100788 <__aeabi_dmul+0x80>
 810077e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8100782:	416d      	adcs	r5, r5
 8100784:	eb46 0606 	adc.w	r6, r6, r6
 8100788:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 810078c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8100790:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8100794:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8100798:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 810079c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 81007a0:	bf88      	it	hi
 81007a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 81007a6:	d81e      	bhi.n	81007e6 <__aeabi_dmul+0xde>
 81007a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 81007ac:	bf08      	it	eq
 81007ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 81007b2:	f150 0000 	adcs.w	r0, r0, #0
 81007b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 81007ba:	bd70      	pop	{r4, r5, r6, pc}
 81007bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 81007c0:	ea46 0101 	orr.w	r1, r6, r1
 81007c4:	ea40 0002 	orr.w	r0, r0, r2
 81007c8:	ea81 0103 	eor.w	r1, r1, r3
 81007cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 81007d0:	bfc2      	ittt	gt
 81007d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 81007d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 81007da:	bd70      	popgt	{r4, r5, r6, pc}
 81007dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 81007e0:	f04f 0e00 	mov.w	lr, #0
 81007e4:	3c01      	subs	r4, #1
 81007e6:	f300 80ab 	bgt.w	8100940 <__aeabi_dmul+0x238>
 81007ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 81007ee:	bfde      	ittt	le
 81007f0:	2000      	movle	r0, #0
 81007f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 81007f6:	bd70      	pople	{r4, r5, r6, pc}
 81007f8:	f1c4 0400 	rsb	r4, r4, #0
 81007fc:	3c20      	subs	r4, #32
 81007fe:	da35      	bge.n	810086c <__aeabi_dmul+0x164>
 8100800:	340c      	adds	r4, #12
 8100802:	dc1b      	bgt.n	810083c <__aeabi_dmul+0x134>
 8100804:	f104 0414 	add.w	r4, r4, #20
 8100808:	f1c4 0520 	rsb	r5, r4, #32
 810080c:	fa00 f305 	lsl.w	r3, r0, r5
 8100810:	fa20 f004 	lsr.w	r0, r0, r4
 8100814:	fa01 f205 	lsl.w	r2, r1, r5
 8100818:	ea40 0002 	orr.w	r0, r0, r2
 810081c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8100820:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8100824:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8100828:	fa21 f604 	lsr.w	r6, r1, r4
 810082c:	eb42 0106 	adc.w	r1, r2, r6
 8100830:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8100834:	bf08      	it	eq
 8100836:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 810083a:	bd70      	pop	{r4, r5, r6, pc}
 810083c:	f1c4 040c 	rsb	r4, r4, #12
 8100840:	f1c4 0520 	rsb	r5, r4, #32
 8100844:	fa00 f304 	lsl.w	r3, r0, r4
 8100848:	fa20 f005 	lsr.w	r0, r0, r5
 810084c:	fa01 f204 	lsl.w	r2, r1, r4
 8100850:	ea40 0002 	orr.w	r0, r0, r2
 8100854:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8100858:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 810085c:	f141 0100 	adc.w	r1, r1, #0
 8100860:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8100864:	bf08      	it	eq
 8100866:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 810086a:	bd70      	pop	{r4, r5, r6, pc}
 810086c:	f1c4 0520 	rsb	r5, r4, #32
 8100870:	fa00 f205 	lsl.w	r2, r0, r5
 8100874:	ea4e 0e02 	orr.w	lr, lr, r2
 8100878:	fa20 f304 	lsr.w	r3, r0, r4
 810087c:	fa01 f205 	lsl.w	r2, r1, r5
 8100880:	ea43 0302 	orr.w	r3, r3, r2
 8100884:	fa21 f004 	lsr.w	r0, r1, r4
 8100888:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 810088c:	fa21 f204 	lsr.w	r2, r1, r4
 8100890:	ea20 0002 	bic.w	r0, r0, r2
 8100894:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8100898:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 810089c:	bf08      	it	eq
 810089e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 81008a2:	bd70      	pop	{r4, r5, r6, pc}
 81008a4:	f094 0f00 	teq	r4, #0
 81008a8:	d10f      	bne.n	81008ca <__aeabi_dmul+0x1c2>
 81008aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 81008ae:	0040      	lsls	r0, r0, #1
 81008b0:	eb41 0101 	adc.w	r1, r1, r1
 81008b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 81008b8:	bf08      	it	eq
 81008ba:	3c01      	subeq	r4, #1
 81008bc:	d0f7      	beq.n	81008ae <__aeabi_dmul+0x1a6>
 81008be:	ea41 0106 	orr.w	r1, r1, r6
 81008c2:	f095 0f00 	teq	r5, #0
 81008c6:	bf18      	it	ne
 81008c8:	4770      	bxne	lr
 81008ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 81008ce:	0052      	lsls	r2, r2, #1
 81008d0:	eb43 0303 	adc.w	r3, r3, r3
 81008d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 81008d8:	bf08      	it	eq
 81008da:	3d01      	subeq	r5, #1
 81008dc:	d0f7      	beq.n	81008ce <__aeabi_dmul+0x1c6>
 81008de:	ea43 0306 	orr.w	r3, r3, r6
 81008e2:	4770      	bx	lr
 81008e4:	ea94 0f0c 	teq	r4, ip
 81008e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 81008ec:	bf18      	it	ne
 81008ee:	ea95 0f0c 	teqne	r5, ip
 81008f2:	d00c      	beq.n	810090e <__aeabi_dmul+0x206>
 81008f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 81008f8:	bf18      	it	ne
 81008fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 81008fe:	d1d1      	bne.n	81008a4 <__aeabi_dmul+0x19c>
 8100900:	ea81 0103 	eor.w	r1, r1, r3
 8100904:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8100908:	f04f 0000 	mov.w	r0, #0
 810090c:	bd70      	pop	{r4, r5, r6, pc}
 810090e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8100912:	bf06      	itte	eq
 8100914:	4610      	moveq	r0, r2
 8100916:	4619      	moveq	r1, r3
 8100918:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 810091c:	d019      	beq.n	8100952 <__aeabi_dmul+0x24a>
 810091e:	ea94 0f0c 	teq	r4, ip
 8100922:	d102      	bne.n	810092a <__aeabi_dmul+0x222>
 8100924:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8100928:	d113      	bne.n	8100952 <__aeabi_dmul+0x24a>
 810092a:	ea95 0f0c 	teq	r5, ip
 810092e:	d105      	bne.n	810093c <__aeabi_dmul+0x234>
 8100930:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8100934:	bf1c      	itt	ne
 8100936:	4610      	movne	r0, r2
 8100938:	4619      	movne	r1, r3
 810093a:	d10a      	bne.n	8100952 <__aeabi_dmul+0x24a>
 810093c:	ea81 0103 	eor.w	r1, r1, r3
 8100940:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8100944:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8100948:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 810094c:	f04f 0000 	mov.w	r0, #0
 8100950:	bd70      	pop	{r4, r5, r6, pc}
 8100952:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8100956:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 810095a:	bd70      	pop	{r4, r5, r6, pc}

0810095c <__aeabi_ddiv>:
 810095c:	b570      	push	{r4, r5, r6, lr}
 810095e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8100962:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8100966:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 810096a:	bf1d      	ittte	ne
 810096c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8100970:	ea94 0f0c 	teqne	r4, ip
 8100974:	ea95 0f0c 	teqne	r5, ip
 8100978:	f000 f8a7 	bleq	8100aca <__aeabi_ddiv+0x16e>
 810097c:	eba4 0405 	sub.w	r4, r4, r5
 8100980:	ea81 0e03 	eor.w	lr, r1, r3
 8100984:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8100988:	ea4f 3101 	mov.w	r1, r1, lsl #12
 810098c:	f000 8088 	beq.w	8100aa0 <__aeabi_ddiv+0x144>
 8100990:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8100994:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8100998:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 810099c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 81009a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 81009a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 81009a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 81009ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 81009b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 81009b4:	429d      	cmp	r5, r3
 81009b6:	bf08      	it	eq
 81009b8:	4296      	cmpeq	r6, r2
 81009ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 81009be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 81009c2:	d202      	bcs.n	81009ca <__aeabi_ddiv+0x6e>
 81009c4:	085b      	lsrs	r3, r3, #1
 81009c6:	ea4f 0232 	mov.w	r2, r2, rrx
 81009ca:	1ab6      	subs	r6, r6, r2
 81009cc:	eb65 0503 	sbc.w	r5, r5, r3
 81009d0:	085b      	lsrs	r3, r3, #1
 81009d2:	ea4f 0232 	mov.w	r2, r2, rrx
 81009d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 81009da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 81009de:	ebb6 0e02 	subs.w	lr, r6, r2
 81009e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 81009e6:	bf22      	ittt	cs
 81009e8:	1ab6      	subcs	r6, r6, r2
 81009ea:	4675      	movcs	r5, lr
 81009ec:	ea40 000c 	orrcs.w	r0, r0, ip
 81009f0:	085b      	lsrs	r3, r3, #1
 81009f2:	ea4f 0232 	mov.w	r2, r2, rrx
 81009f6:	ebb6 0e02 	subs.w	lr, r6, r2
 81009fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 81009fe:	bf22      	ittt	cs
 8100a00:	1ab6      	subcs	r6, r6, r2
 8100a02:	4675      	movcs	r5, lr
 8100a04:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8100a08:	085b      	lsrs	r3, r3, #1
 8100a0a:	ea4f 0232 	mov.w	r2, r2, rrx
 8100a0e:	ebb6 0e02 	subs.w	lr, r6, r2
 8100a12:	eb75 0e03 	sbcs.w	lr, r5, r3
 8100a16:	bf22      	ittt	cs
 8100a18:	1ab6      	subcs	r6, r6, r2
 8100a1a:	4675      	movcs	r5, lr
 8100a1c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8100a20:	085b      	lsrs	r3, r3, #1
 8100a22:	ea4f 0232 	mov.w	r2, r2, rrx
 8100a26:	ebb6 0e02 	subs.w	lr, r6, r2
 8100a2a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8100a2e:	bf22      	ittt	cs
 8100a30:	1ab6      	subcs	r6, r6, r2
 8100a32:	4675      	movcs	r5, lr
 8100a34:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8100a38:	ea55 0e06 	orrs.w	lr, r5, r6
 8100a3c:	d018      	beq.n	8100a70 <__aeabi_ddiv+0x114>
 8100a3e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8100a42:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8100a46:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8100a4a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8100a4e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8100a52:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8100a56:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8100a5a:	d1c0      	bne.n	81009de <__aeabi_ddiv+0x82>
 8100a5c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8100a60:	d10b      	bne.n	8100a7a <__aeabi_ddiv+0x11e>
 8100a62:	ea41 0100 	orr.w	r1, r1, r0
 8100a66:	f04f 0000 	mov.w	r0, #0
 8100a6a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8100a6e:	e7b6      	b.n	81009de <__aeabi_ddiv+0x82>
 8100a70:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8100a74:	bf04      	itt	eq
 8100a76:	4301      	orreq	r1, r0
 8100a78:	2000      	moveq	r0, #0
 8100a7a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8100a7e:	bf88      	it	hi
 8100a80:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8100a84:	f63f aeaf 	bhi.w	81007e6 <__aeabi_dmul+0xde>
 8100a88:	ebb5 0c03 	subs.w	ip, r5, r3
 8100a8c:	bf04      	itt	eq
 8100a8e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8100a92:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8100a96:	f150 0000 	adcs.w	r0, r0, #0
 8100a9a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8100a9e:	bd70      	pop	{r4, r5, r6, pc}
 8100aa0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8100aa4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8100aa8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8100aac:	bfc2      	ittt	gt
 8100aae:	ebd4 050c 	rsbsgt	r5, r4, ip
 8100ab2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8100ab6:	bd70      	popgt	{r4, r5, r6, pc}
 8100ab8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8100abc:	f04f 0e00 	mov.w	lr, #0
 8100ac0:	3c01      	subs	r4, #1
 8100ac2:	e690      	b.n	81007e6 <__aeabi_dmul+0xde>
 8100ac4:	ea45 0e06 	orr.w	lr, r5, r6
 8100ac8:	e68d      	b.n	81007e6 <__aeabi_dmul+0xde>
 8100aca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8100ace:	ea94 0f0c 	teq	r4, ip
 8100ad2:	bf08      	it	eq
 8100ad4:	ea95 0f0c 	teqeq	r5, ip
 8100ad8:	f43f af3b 	beq.w	8100952 <__aeabi_dmul+0x24a>
 8100adc:	ea94 0f0c 	teq	r4, ip
 8100ae0:	d10a      	bne.n	8100af8 <__aeabi_ddiv+0x19c>
 8100ae2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8100ae6:	f47f af34 	bne.w	8100952 <__aeabi_dmul+0x24a>
 8100aea:	ea95 0f0c 	teq	r5, ip
 8100aee:	f47f af25 	bne.w	810093c <__aeabi_dmul+0x234>
 8100af2:	4610      	mov	r0, r2
 8100af4:	4619      	mov	r1, r3
 8100af6:	e72c      	b.n	8100952 <__aeabi_dmul+0x24a>
 8100af8:	ea95 0f0c 	teq	r5, ip
 8100afc:	d106      	bne.n	8100b0c <__aeabi_ddiv+0x1b0>
 8100afe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8100b02:	f43f aefd 	beq.w	8100900 <__aeabi_dmul+0x1f8>
 8100b06:	4610      	mov	r0, r2
 8100b08:	4619      	mov	r1, r3
 8100b0a:	e722      	b.n	8100952 <__aeabi_dmul+0x24a>
 8100b0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8100b10:	bf18      	it	ne
 8100b12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8100b16:	f47f aec5 	bne.w	81008a4 <__aeabi_dmul+0x19c>
 8100b1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8100b1e:	f47f af0d 	bne.w	810093c <__aeabi_dmul+0x234>
 8100b22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8100b26:	f47f aeeb 	bne.w	8100900 <__aeabi_dmul+0x1f8>
 8100b2a:	e712      	b.n	8100952 <__aeabi_dmul+0x24a>

08100b2c <__gedf2>:
 8100b2c:	f04f 3cff 	mov.w	ip, #4294967295
 8100b30:	e006      	b.n	8100b40 <__cmpdf2+0x4>
 8100b32:	bf00      	nop

08100b34 <__ledf2>:
 8100b34:	f04f 0c01 	mov.w	ip, #1
 8100b38:	e002      	b.n	8100b40 <__cmpdf2+0x4>
 8100b3a:	bf00      	nop

08100b3c <__cmpdf2>:
 8100b3c:	f04f 0c01 	mov.w	ip, #1
 8100b40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8100b44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100b48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8100b50:	bf18      	it	ne
 8100b52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8100b56:	d01b      	beq.n	8100b90 <__cmpdf2+0x54>
 8100b58:	b001      	add	sp, #4
 8100b5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8100b5e:	bf0c      	ite	eq
 8100b60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8100b64:	ea91 0f03 	teqne	r1, r3
 8100b68:	bf02      	ittt	eq
 8100b6a:	ea90 0f02 	teqeq	r0, r2
 8100b6e:	2000      	moveq	r0, #0
 8100b70:	4770      	bxeq	lr
 8100b72:	f110 0f00 	cmn.w	r0, #0
 8100b76:	ea91 0f03 	teq	r1, r3
 8100b7a:	bf58      	it	pl
 8100b7c:	4299      	cmppl	r1, r3
 8100b7e:	bf08      	it	eq
 8100b80:	4290      	cmpeq	r0, r2
 8100b82:	bf2c      	ite	cs
 8100b84:	17d8      	asrcs	r0, r3, #31
 8100b86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8100b8a:	f040 0001 	orr.w	r0, r0, #1
 8100b8e:	4770      	bx	lr
 8100b90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100b94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100b98:	d102      	bne.n	8100ba0 <__cmpdf2+0x64>
 8100b9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8100b9e:	d107      	bne.n	8100bb0 <__cmpdf2+0x74>
 8100ba0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8100ba4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100ba8:	d1d6      	bne.n	8100b58 <__cmpdf2+0x1c>
 8100baa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8100bae:	d0d3      	beq.n	8100b58 <__cmpdf2+0x1c>
 8100bb0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8100bb4:	4770      	bx	lr
 8100bb6:	bf00      	nop

08100bb8 <__aeabi_cdrcmple>:
 8100bb8:	4684      	mov	ip, r0
 8100bba:	4610      	mov	r0, r2
 8100bbc:	4662      	mov	r2, ip
 8100bbe:	468c      	mov	ip, r1
 8100bc0:	4619      	mov	r1, r3
 8100bc2:	4663      	mov	r3, ip
 8100bc4:	e000      	b.n	8100bc8 <__aeabi_cdcmpeq>
 8100bc6:	bf00      	nop

08100bc8 <__aeabi_cdcmpeq>:
 8100bc8:	b501      	push	{r0, lr}
 8100bca:	f7ff ffb7 	bl	8100b3c <__cmpdf2>
 8100bce:	2800      	cmp	r0, #0
 8100bd0:	bf48      	it	mi
 8100bd2:	f110 0f00 	cmnmi.w	r0, #0
 8100bd6:	bd01      	pop	{r0, pc}

08100bd8 <__aeabi_dcmpeq>:
 8100bd8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100bdc:	f7ff fff4 	bl	8100bc8 <__aeabi_cdcmpeq>
 8100be0:	bf0c      	ite	eq
 8100be2:	2001      	moveq	r0, #1
 8100be4:	2000      	movne	r0, #0
 8100be6:	f85d fb08 	ldr.w	pc, [sp], #8
 8100bea:	bf00      	nop

08100bec <__aeabi_dcmplt>:
 8100bec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100bf0:	f7ff ffea 	bl	8100bc8 <__aeabi_cdcmpeq>
 8100bf4:	bf34      	ite	cc
 8100bf6:	2001      	movcc	r0, #1
 8100bf8:	2000      	movcs	r0, #0
 8100bfa:	f85d fb08 	ldr.w	pc, [sp], #8
 8100bfe:	bf00      	nop

08100c00 <__aeabi_dcmple>:
 8100c00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100c04:	f7ff ffe0 	bl	8100bc8 <__aeabi_cdcmpeq>
 8100c08:	bf94      	ite	ls
 8100c0a:	2001      	movls	r0, #1
 8100c0c:	2000      	movhi	r0, #0
 8100c0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8100c12:	bf00      	nop

08100c14 <__aeabi_dcmpge>:
 8100c14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100c18:	f7ff ffce 	bl	8100bb8 <__aeabi_cdrcmple>
 8100c1c:	bf94      	ite	ls
 8100c1e:	2001      	movls	r0, #1
 8100c20:	2000      	movhi	r0, #0
 8100c22:	f85d fb08 	ldr.w	pc, [sp], #8
 8100c26:	bf00      	nop

08100c28 <__aeabi_dcmpgt>:
 8100c28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100c2c:	f7ff ffc4 	bl	8100bb8 <__aeabi_cdrcmple>
 8100c30:	bf34      	ite	cc
 8100c32:	2001      	movcc	r0, #1
 8100c34:	2000      	movcs	r0, #0
 8100c36:	f85d fb08 	ldr.w	pc, [sp], #8
 8100c3a:	bf00      	nop

08100c3c <__aeabi_dcmpun>:
 8100c3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100c40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100c44:	d102      	bne.n	8100c4c <__aeabi_dcmpun+0x10>
 8100c46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8100c4a:	d10a      	bne.n	8100c62 <__aeabi_dcmpun+0x26>
 8100c4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8100c50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100c54:	d102      	bne.n	8100c5c <__aeabi_dcmpun+0x20>
 8100c56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8100c5a:	d102      	bne.n	8100c62 <__aeabi_dcmpun+0x26>
 8100c5c:	f04f 0000 	mov.w	r0, #0
 8100c60:	4770      	bx	lr
 8100c62:	f04f 0001 	mov.w	r0, #1
 8100c66:	4770      	bx	lr

08100c68 <__aeabi_d2iz>:
 8100c68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8100c6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8100c70:	d215      	bcs.n	8100c9e <__aeabi_d2iz+0x36>
 8100c72:	d511      	bpl.n	8100c98 <__aeabi_d2iz+0x30>
 8100c74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8100c78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8100c7c:	d912      	bls.n	8100ca4 <__aeabi_d2iz+0x3c>
 8100c7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8100c82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8100c86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8100c8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8100c8e:	fa23 f002 	lsr.w	r0, r3, r2
 8100c92:	bf18      	it	ne
 8100c94:	4240      	negne	r0, r0
 8100c96:	4770      	bx	lr
 8100c98:	f04f 0000 	mov.w	r0, #0
 8100c9c:	4770      	bx	lr
 8100c9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8100ca2:	d105      	bne.n	8100cb0 <__aeabi_d2iz+0x48>
 8100ca4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8100ca8:	bf08      	it	eq
 8100caa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8100cae:	4770      	bx	lr
 8100cb0:	f04f 0000 	mov.w	r0, #0
 8100cb4:	4770      	bx	lr
 8100cb6:	bf00      	nop

08100cb8 <__aeabi_uldivmod>:
 8100cb8:	b953      	cbnz	r3, 8100cd0 <__aeabi_uldivmod+0x18>
 8100cba:	b94a      	cbnz	r2, 8100cd0 <__aeabi_uldivmod+0x18>
 8100cbc:	2900      	cmp	r1, #0
 8100cbe:	bf08      	it	eq
 8100cc0:	2800      	cmpeq	r0, #0
 8100cc2:	bf1c      	itt	ne
 8100cc4:	f04f 31ff 	movne.w	r1, #4294967295
 8100cc8:	f04f 30ff 	movne.w	r0, #4294967295
 8100ccc:	f000 b96e 	b.w	8100fac <__aeabi_idiv0>
 8100cd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8100cd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8100cd8:	f000 f806 	bl	8100ce8 <__udivmoddi4>
 8100cdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8100ce0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8100ce4:	b004      	add	sp, #16
 8100ce6:	4770      	bx	lr

08100ce8 <__udivmoddi4>:
 8100ce8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8100cec:	9d08      	ldr	r5, [sp, #32]
 8100cee:	4604      	mov	r4, r0
 8100cf0:	468c      	mov	ip, r1
 8100cf2:	2b00      	cmp	r3, #0
 8100cf4:	f040 8083 	bne.w	8100dfe <__udivmoddi4+0x116>
 8100cf8:	428a      	cmp	r2, r1
 8100cfa:	4617      	mov	r7, r2
 8100cfc:	d947      	bls.n	8100d8e <__udivmoddi4+0xa6>
 8100cfe:	fab2 f282 	clz	r2, r2
 8100d02:	b142      	cbz	r2, 8100d16 <__udivmoddi4+0x2e>
 8100d04:	f1c2 0020 	rsb	r0, r2, #32
 8100d08:	fa24 f000 	lsr.w	r0, r4, r0
 8100d0c:	4091      	lsls	r1, r2
 8100d0e:	4097      	lsls	r7, r2
 8100d10:	ea40 0c01 	orr.w	ip, r0, r1
 8100d14:	4094      	lsls	r4, r2
 8100d16:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8100d1a:	0c23      	lsrs	r3, r4, #16
 8100d1c:	fbbc f6f8 	udiv	r6, ip, r8
 8100d20:	fa1f fe87 	uxth.w	lr, r7
 8100d24:	fb08 c116 	mls	r1, r8, r6, ip
 8100d28:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8100d2c:	fb06 f10e 	mul.w	r1, r6, lr
 8100d30:	4299      	cmp	r1, r3
 8100d32:	d909      	bls.n	8100d48 <__udivmoddi4+0x60>
 8100d34:	18fb      	adds	r3, r7, r3
 8100d36:	f106 30ff 	add.w	r0, r6, #4294967295
 8100d3a:	f080 8119 	bcs.w	8100f70 <__udivmoddi4+0x288>
 8100d3e:	4299      	cmp	r1, r3
 8100d40:	f240 8116 	bls.w	8100f70 <__udivmoddi4+0x288>
 8100d44:	3e02      	subs	r6, #2
 8100d46:	443b      	add	r3, r7
 8100d48:	1a5b      	subs	r3, r3, r1
 8100d4a:	b2a4      	uxth	r4, r4
 8100d4c:	fbb3 f0f8 	udiv	r0, r3, r8
 8100d50:	fb08 3310 	mls	r3, r8, r0, r3
 8100d54:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8100d58:	fb00 fe0e 	mul.w	lr, r0, lr
 8100d5c:	45a6      	cmp	lr, r4
 8100d5e:	d909      	bls.n	8100d74 <__udivmoddi4+0x8c>
 8100d60:	193c      	adds	r4, r7, r4
 8100d62:	f100 33ff 	add.w	r3, r0, #4294967295
 8100d66:	f080 8105 	bcs.w	8100f74 <__udivmoddi4+0x28c>
 8100d6a:	45a6      	cmp	lr, r4
 8100d6c:	f240 8102 	bls.w	8100f74 <__udivmoddi4+0x28c>
 8100d70:	3802      	subs	r0, #2
 8100d72:	443c      	add	r4, r7
 8100d74:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8100d78:	eba4 040e 	sub.w	r4, r4, lr
 8100d7c:	2600      	movs	r6, #0
 8100d7e:	b11d      	cbz	r5, 8100d88 <__udivmoddi4+0xa0>
 8100d80:	40d4      	lsrs	r4, r2
 8100d82:	2300      	movs	r3, #0
 8100d84:	e9c5 4300 	strd	r4, r3, [r5]
 8100d88:	4631      	mov	r1, r6
 8100d8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8100d8e:	b902      	cbnz	r2, 8100d92 <__udivmoddi4+0xaa>
 8100d90:	deff      	udf	#255	; 0xff
 8100d92:	fab2 f282 	clz	r2, r2
 8100d96:	2a00      	cmp	r2, #0
 8100d98:	d150      	bne.n	8100e3c <__udivmoddi4+0x154>
 8100d9a:	1bcb      	subs	r3, r1, r7
 8100d9c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8100da0:	fa1f f887 	uxth.w	r8, r7
 8100da4:	2601      	movs	r6, #1
 8100da6:	fbb3 fcfe 	udiv	ip, r3, lr
 8100daa:	0c21      	lsrs	r1, r4, #16
 8100dac:	fb0e 331c 	mls	r3, lr, ip, r3
 8100db0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8100db4:	fb08 f30c 	mul.w	r3, r8, ip
 8100db8:	428b      	cmp	r3, r1
 8100dba:	d907      	bls.n	8100dcc <__udivmoddi4+0xe4>
 8100dbc:	1879      	adds	r1, r7, r1
 8100dbe:	f10c 30ff 	add.w	r0, ip, #4294967295
 8100dc2:	d202      	bcs.n	8100dca <__udivmoddi4+0xe2>
 8100dc4:	428b      	cmp	r3, r1
 8100dc6:	f200 80e9 	bhi.w	8100f9c <__udivmoddi4+0x2b4>
 8100dca:	4684      	mov	ip, r0
 8100dcc:	1ac9      	subs	r1, r1, r3
 8100dce:	b2a3      	uxth	r3, r4
 8100dd0:	fbb1 f0fe 	udiv	r0, r1, lr
 8100dd4:	fb0e 1110 	mls	r1, lr, r0, r1
 8100dd8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8100ddc:	fb08 f800 	mul.w	r8, r8, r0
 8100de0:	45a0      	cmp	r8, r4
 8100de2:	d907      	bls.n	8100df4 <__udivmoddi4+0x10c>
 8100de4:	193c      	adds	r4, r7, r4
 8100de6:	f100 33ff 	add.w	r3, r0, #4294967295
 8100dea:	d202      	bcs.n	8100df2 <__udivmoddi4+0x10a>
 8100dec:	45a0      	cmp	r8, r4
 8100dee:	f200 80d9 	bhi.w	8100fa4 <__udivmoddi4+0x2bc>
 8100df2:	4618      	mov	r0, r3
 8100df4:	eba4 0408 	sub.w	r4, r4, r8
 8100df8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8100dfc:	e7bf      	b.n	8100d7e <__udivmoddi4+0x96>
 8100dfe:	428b      	cmp	r3, r1
 8100e00:	d909      	bls.n	8100e16 <__udivmoddi4+0x12e>
 8100e02:	2d00      	cmp	r5, #0
 8100e04:	f000 80b1 	beq.w	8100f6a <__udivmoddi4+0x282>
 8100e08:	2600      	movs	r6, #0
 8100e0a:	e9c5 0100 	strd	r0, r1, [r5]
 8100e0e:	4630      	mov	r0, r6
 8100e10:	4631      	mov	r1, r6
 8100e12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8100e16:	fab3 f683 	clz	r6, r3
 8100e1a:	2e00      	cmp	r6, #0
 8100e1c:	d14a      	bne.n	8100eb4 <__udivmoddi4+0x1cc>
 8100e1e:	428b      	cmp	r3, r1
 8100e20:	d302      	bcc.n	8100e28 <__udivmoddi4+0x140>
 8100e22:	4282      	cmp	r2, r0
 8100e24:	f200 80b8 	bhi.w	8100f98 <__udivmoddi4+0x2b0>
 8100e28:	1a84      	subs	r4, r0, r2
 8100e2a:	eb61 0103 	sbc.w	r1, r1, r3
 8100e2e:	2001      	movs	r0, #1
 8100e30:	468c      	mov	ip, r1
 8100e32:	2d00      	cmp	r5, #0
 8100e34:	d0a8      	beq.n	8100d88 <__udivmoddi4+0xa0>
 8100e36:	e9c5 4c00 	strd	r4, ip, [r5]
 8100e3a:	e7a5      	b.n	8100d88 <__udivmoddi4+0xa0>
 8100e3c:	f1c2 0320 	rsb	r3, r2, #32
 8100e40:	fa20 f603 	lsr.w	r6, r0, r3
 8100e44:	4097      	lsls	r7, r2
 8100e46:	fa01 f002 	lsl.w	r0, r1, r2
 8100e4a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8100e4e:	40d9      	lsrs	r1, r3
 8100e50:	4330      	orrs	r0, r6
 8100e52:	0c03      	lsrs	r3, r0, #16
 8100e54:	fbb1 f6fe 	udiv	r6, r1, lr
 8100e58:	fa1f f887 	uxth.w	r8, r7
 8100e5c:	fb0e 1116 	mls	r1, lr, r6, r1
 8100e60:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8100e64:	fb06 f108 	mul.w	r1, r6, r8
 8100e68:	4299      	cmp	r1, r3
 8100e6a:	fa04 f402 	lsl.w	r4, r4, r2
 8100e6e:	d909      	bls.n	8100e84 <__udivmoddi4+0x19c>
 8100e70:	18fb      	adds	r3, r7, r3
 8100e72:	f106 3cff 	add.w	ip, r6, #4294967295
 8100e76:	f080 808d 	bcs.w	8100f94 <__udivmoddi4+0x2ac>
 8100e7a:	4299      	cmp	r1, r3
 8100e7c:	f240 808a 	bls.w	8100f94 <__udivmoddi4+0x2ac>
 8100e80:	3e02      	subs	r6, #2
 8100e82:	443b      	add	r3, r7
 8100e84:	1a5b      	subs	r3, r3, r1
 8100e86:	b281      	uxth	r1, r0
 8100e88:	fbb3 f0fe 	udiv	r0, r3, lr
 8100e8c:	fb0e 3310 	mls	r3, lr, r0, r3
 8100e90:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8100e94:	fb00 f308 	mul.w	r3, r0, r8
 8100e98:	428b      	cmp	r3, r1
 8100e9a:	d907      	bls.n	8100eac <__udivmoddi4+0x1c4>
 8100e9c:	1879      	adds	r1, r7, r1
 8100e9e:	f100 3cff 	add.w	ip, r0, #4294967295
 8100ea2:	d273      	bcs.n	8100f8c <__udivmoddi4+0x2a4>
 8100ea4:	428b      	cmp	r3, r1
 8100ea6:	d971      	bls.n	8100f8c <__udivmoddi4+0x2a4>
 8100ea8:	3802      	subs	r0, #2
 8100eaa:	4439      	add	r1, r7
 8100eac:	1acb      	subs	r3, r1, r3
 8100eae:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8100eb2:	e778      	b.n	8100da6 <__udivmoddi4+0xbe>
 8100eb4:	f1c6 0c20 	rsb	ip, r6, #32
 8100eb8:	fa03 f406 	lsl.w	r4, r3, r6
 8100ebc:	fa22 f30c 	lsr.w	r3, r2, ip
 8100ec0:	431c      	orrs	r4, r3
 8100ec2:	fa20 f70c 	lsr.w	r7, r0, ip
 8100ec6:	fa01 f306 	lsl.w	r3, r1, r6
 8100eca:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8100ece:	fa21 f10c 	lsr.w	r1, r1, ip
 8100ed2:	431f      	orrs	r7, r3
 8100ed4:	0c3b      	lsrs	r3, r7, #16
 8100ed6:	fbb1 f9fe 	udiv	r9, r1, lr
 8100eda:	fa1f f884 	uxth.w	r8, r4
 8100ede:	fb0e 1119 	mls	r1, lr, r9, r1
 8100ee2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8100ee6:	fb09 fa08 	mul.w	sl, r9, r8
 8100eea:	458a      	cmp	sl, r1
 8100eec:	fa02 f206 	lsl.w	r2, r2, r6
 8100ef0:	fa00 f306 	lsl.w	r3, r0, r6
 8100ef4:	d908      	bls.n	8100f08 <__udivmoddi4+0x220>
 8100ef6:	1861      	adds	r1, r4, r1
 8100ef8:	f109 30ff 	add.w	r0, r9, #4294967295
 8100efc:	d248      	bcs.n	8100f90 <__udivmoddi4+0x2a8>
 8100efe:	458a      	cmp	sl, r1
 8100f00:	d946      	bls.n	8100f90 <__udivmoddi4+0x2a8>
 8100f02:	f1a9 0902 	sub.w	r9, r9, #2
 8100f06:	4421      	add	r1, r4
 8100f08:	eba1 010a 	sub.w	r1, r1, sl
 8100f0c:	b2bf      	uxth	r7, r7
 8100f0e:	fbb1 f0fe 	udiv	r0, r1, lr
 8100f12:	fb0e 1110 	mls	r1, lr, r0, r1
 8100f16:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8100f1a:	fb00 f808 	mul.w	r8, r0, r8
 8100f1e:	45b8      	cmp	r8, r7
 8100f20:	d907      	bls.n	8100f32 <__udivmoddi4+0x24a>
 8100f22:	19e7      	adds	r7, r4, r7
 8100f24:	f100 31ff 	add.w	r1, r0, #4294967295
 8100f28:	d22e      	bcs.n	8100f88 <__udivmoddi4+0x2a0>
 8100f2a:	45b8      	cmp	r8, r7
 8100f2c:	d92c      	bls.n	8100f88 <__udivmoddi4+0x2a0>
 8100f2e:	3802      	subs	r0, #2
 8100f30:	4427      	add	r7, r4
 8100f32:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8100f36:	eba7 0708 	sub.w	r7, r7, r8
 8100f3a:	fba0 8902 	umull	r8, r9, r0, r2
 8100f3e:	454f      	cmp	r7, r9
 8100f40:	46c6      	mov	lr, r8
 8100f42:	4649      	mov	r1, r9
 8100f44:	d31a      	bcc.n	8100f7c <__udivmoddi4+0x294>
 8100f46:	d017      	beq.n	8100f78 <__udivmoddi4+0x290>
 8100f48:	b15d      	cbz	r5, 8100f62 <__udivmoddi4+0x27a>
 8100f4a:	ebb3 020e 	subs.w	r2, r3, lr
 8100f4e:	eb67 0701 	sbc.w	r7, r7, r1
 8100f52:	fa07 fc0c 	lsl.w	ip, r7, ip
 8100f56:	40f2      	lsrs	r2, r6
 8100f58:	ea4c 0202 	orr.w	r2, ip, r2
 8100f5c:	40f7      	lsrs	r7, r6
 8100f5e:	e9c5 2700 	strd	r2, r7, [r5]
 8100f62:	2600      	movs	r6, #0
 8100f64:	4631      	mov	r1, r6
 8100f66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8100f6a:	462e      	mov	r6, r5
 8100f6c:	4628      	mov	r0, r5
 8100f6e:	e70b      	b.n	8100d88 <__udivmoddi4+0xa0>
 8100f70:	4606      	mov	r6, r0
 8100f72:	e6e9      	b.n	8100d48 <__udivmoddi4+0x60>
 8100f74:	4618      	mov	r0, r3
 8100f76:	e6fd      	b.n	8100d74 <__udivmoddi4+0x8c>
 8100f78:	4543      	cmp	r3, r8
 8100f7a:	d2e5      	bcs.n	8100f48 <__udivmoddi4+0x260>
 8100f7c:	ebb8 0e02 	subs.w	lr, r8, r2
 8100f80:	eb69 0104 	sbc.w	r1, r9, r4
 8100f84:	3801      	subs	r0, #1
 8100f86:	e7df      	b.n	8100f48 <__udivmoddi4+0x260>
 8100f88:	4608      	mov	r0, r1
 8100f8a:	e7d2      	b.n	8100f32 <__udivmoddi4+0x24a>
 8100f8c:	4660      	mov	r0, ip
 8100f8e:	e78d      	b.n	8100eac <__udivmoddi4+0x1c4>
 8100f90:	4681      	mov	r9, r0
 8100f92:	e7b9      	b.n	8100f08 <__udivmoddi4+0x220>
 8100f94:	4666      	mov	r6, ip
 8100f96:	e775      	b.n	8100e84 <__udivmoddi4+0x19c>
 8100f98:	4630      	mov	r0, r6
 8100f9a:	e74a      	b.n	8100e32 <__udivmoddi4+0x14a>
 8100f9c:	f1ac 0c02 	sub.w	ip, ip, #2
 8100fa0:	4439      	add	r1, r7
 8100fa2:	e713      	b.n	8100dcc <__udivmoddi4+0xe4>
 8100fa4:	3802      	subs	r0, #2
 8100fa6:	443c      	add	r4, r7
 8100fa8:	e724      	b.n	8100df4 <__udivmoddi4+0x10c>
 8100faa:	bf00      	nop

08100fac <__aeabi_idiv0>:
 8100fac:	4770      	bx	lr
 8100fae:	bf00      	nop

08100fb0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8100fb0:	b480      	push	{r7}
 8100fb2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8100fb4:	4b0b      	ldr	r3, [pc, #44]	; (8100fe4 <SystemInit+0x34>)
 8100fb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8100fba:	4a0a      	ldr	r2, [pc, #40]	; (8100fe4 <SystemInit+0x34>)
 8100fbc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8100fc0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Pos;
 8100fc4:	4b07      	ldr	r3, [pc, #28]	; (8100fe4 <SystemInit+0x34>)
 8100fc6:	691b      	ldr	r3, [r3, #16]
 8100fc8:	4a06      	ldr	r2, [pc, #24]	; (8100fe4 <SystemInit+0x34>)
 8100fca:	f043 0304 	orr.w	r3, r3, #4
 8100fce:	6113      	str	r3, [r2, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D2_AHBSRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BANK2_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8100fd0:	4b04      	ldr	r3, [pc, #16]	; (8100fe4 <SystemInit+0x34>)
 8100fd2:	f04f 6201 	mov.w	r2, #135266304	; 0x8100000
 8100fd6:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 8100fd8:	bf00      	nop
 8100fda:	46bd      	mov	sp, r7
 8100fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100fe0:	4770      	bx	lr
 8100fe2:	bf00      	nop
 8100fe4:	e000ed00 	.word	0xe000ed00

08100fe8 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8100fe8:	b580      	push	{r7, lr}
 8100fea:	b08a      	sub	sp, #40	; 0x28
 8100fec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8100fee:	f107 031c 	add.w	r3, r7, #28
 8100ff2:	2200      	movs	r2, #0
 8100ff4:	601a      	str	r2, [r3, #0]
 8100ff6:	605a      	str	r2, [r3, #4]
 8100ff8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8100ffa:	463b      	mov	r3, r7
 8100ffc:	2200      	movs	r2, #0
 8100ffe:	601a      	str	r2, [r3, #0]
 8101000:	605a      	str	r2, [r3, #4]
 8101002:	609a      	str	r2, [r3, #8]
 8101004:	60da      	str	r2, [r3, #12]
 8101006:	611a      	str	r2, [r3, #16]
 8101008:	615a      	str	r2, [r3, #20]
 810100a:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 810100c:	4b30      	ldr	r3, [pc, #192]	; (81010d0 <MX_ADC1_Init+0xe8>)
 810100e:	4a31      	ldr	r2, [pc, #196]	; (81010d4 <MX_ADC1_Init+0xec>)
 8101010:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV8;
 8101012:	4b2f      	ldr	r3, [pc, #188]	; (81010d0 <MX_ADC1_Init+0xe8>)
 8101014:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8101018:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 810101a:	4b2d      	ldr	r3, [pc, #180]	; (81010d0 <MX_ADC1_Init+0xe8>)
 810101c:	2200      	movs	r2, #0
 810101e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8101020:	4b2b      	ldr	r3, [pc, #172]	; (81010d0 <MX_ADC1_Init+0xe8>)
 8101022:	2200      	movs	r2, #0
 8101024:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8101026:	4b2a      	ldr	r3, [pc, #168]	; (81010d0 <MX_ADC1_Init+0xe8>)
 8101028:	2204      	movs	r2, #4
 810102a:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 810102c:	4b28      	ldr	r3, [pc, #160]	; (81010d0 <MX_ADC1_Init+0xe8>)
 810102e:	2200      	movs	r2, #0
 8101030:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8101032:	4b27      	ldr	r3, [pc, #156]	; (81010d0 <MX_ADC1_Init+0xe8>)
 8101034:	2201      	movs	r2, #1
 8101036:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 8101038:	4b25      	ldr	r3, [pc, #148]	; (81010d0 <MX_ADC1_Init+0xe8>)
 810103a:	2201      	movs	r2, #1
 810103c:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 810103e:	4b24      	ldr	r3, [pc, #144]	; (81010d0 <MX_ADC1_Init+0xe8>)
 8101040:	2200      	movs	r2, #0
 8101042:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8101044:	4b22      	ldr	r3, [pc, #136]	; (81010d0 <MX_ADC1_Init+0xe8>)
 8101046:	2200      	movs	r2, #0
 8101048:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 810104a:	4b21      	ldr	r3, [pc, #132]	; (81010d0 <MX_ADC1_Init+0xe8>)
 810104c:	2200      	movs	r2, #0
 810104e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8101050:	4b1f      	ldr	r3, [pc, #124]	; (81010d0 <MX_ADC1_Init+0xe8>)
 8101052:	2203      	movs	r2, #3
 8101054:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8101056:	4b1e      	ldr	r3, [pc, #120]	; (81010d0 <MX_ADC1_Init+0xe8>)
 8101058:	2200      	movs	r2, #0
 810105a:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 810105c:	4b1c      	ldr	r3, [pc, #112]	; (81010d0 <MX_ADC1_Init+0xe8>)
 810105e:	2200      	movs	r2, #0
 8101060:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8101062:	4b1b      	ldr	r3, [pc, #108]	; (81010d0 <MX_ADC1_Init+0xe8>)
 8101064:	2200      	movs	r2, #0
 8101066:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 810106a:	4819      	ldr	r0, [pc, #100]	; (81010d0 <MX_ADC1_Init+0xe8>)
 810106c:	f001 fed0 	bl	8102e10 <HAL_ADC_Init>
 8101070:	4603      	mov	r3, r0
 8101072:	2b00      	cmp	r3, #0
 8101074:	d001      	beq.n	810107a <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8101076:	f000 fd7b 	bl	8101b70 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 810107a:	2300      	movs	r3, #0
 810107c:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 810107e:	f107 031c 	add.w	r3, r7, #28
 8101082:	4619      	mov	r1, r3
 8101084:	4812      	ldr	r0, [pc, #72]	; (81010d0 <MX_ADC1_Init+0xe8>)
 8101086:	f002 ff6d 	bl	8103f64 <HAL_ADCEx_MultiModeConfigChannel>
 810108a:	4603      	mov	r3, r0
 810108c:	2b00      	cmp	r3, #0
 810108e:	d001      	beq.n	8101094 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8101090:	f000 fd6e 	bl	8101b70 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8101094:	4b10      	ldr	r3, [pc, #64]	; (81010d8 <MX_ADC1_Init+0xf0>)
 8101096:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8101098:	2306      	movs	r3, #6
 810109a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 810109c:	2300      	movs	r3, #0
 810109e:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 81010a0:	f240 73ff 	movw	r3, #2047	; 0x7ff
 81010a4:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 81010a6:	2304      	movs	r3, #4
 81010a8:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 81010aa:	2300      	movs	r3, #0
 81010ac:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 81010ae:	2300      	movs	r3, #0
 81010b0:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 81010b2:	463b      	mov	r3, r7
 81010b4:	4619      	mov	r1, r3
 81010b6:	4806      	ldr	r0, [pc, #24]	; (81010d0 <MX_ADC1_Init+0xe8>)
 81010b8:	f002 faa2 	bl	8103600 <HAL_ADC_ConfigChannel>
 81010bc:	4603      	mov	r3, r0
 81010be:	2b00      	cmp	r3, #0
 81010c0:	d001      	beq.n	81010c6 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 81010c2:	f000 fd55 	bl	8101b70 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 81010c6:	bf00      	nop
 81010c8:	3728      	adds	r7, #40	; 0x28
 81010ca:	46bd      	mov	sp, r7
 81010cc:	bd80      	pop	{r7, pc}
 81010ce:	bf00      	nop
 81010d0:	10004ed0 	.word	0x10004ed0
 81010d4:	40022000 	.word	0x40022000
 81010d8:	08600004 	.word	0x08600004

081010dc <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 81010dc:	b580      	push	{r7, lr}
 81010de:	b08a      	sub	sp, #40	; 0x28
 81010e0:	af00      	add	r7, sp, #0
 81010e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 81010e4:	f107 0314 	add.w	r3, r7, #20
 81010e8:	2200      	movs	r2, #0
 81010ea:	601a      	str	r2, [r3, #0]
 81010ec:	605a      	str	r2, [r3, #4]
 81010ee:	609a      	str	r2, [r3, #8]
 81010f0:	60da      	str	r2, [r3, #12]
 81010f2:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 81010f4:	687b      	ldr	r3, [r7, #4]
 81010f6:	681b      	ldr	r3, [r3, #0]
 81010f8:	4a34      	ldr	r2, [pc, #208]	; (81011cc <HAL_ADC_MspInit+0xf0>)
 81010fa:	4293      	cmp	r3, r2
 81010fc:	d162      	bne.n	81011c4 <HAL_ADC_MspInit+0xe8>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 81010fe:	4b34      	ldr	r3, [pc, #208]	; (81011d0 <HAL_ADC_MspInit+0xf4>)
 8101100:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8101104:	4a32      	ldr	r2, [pc, #200]	; (81011d0 <HAL_ADC_MspInit+0xf4>)
 8101106:	f043 0320 	orr.w	r3, r3, #32
 810110a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 810110e:	4b30      	ldr	r3, [pc, #192]	; (81011d0 <HAL_ADC_MspInit+0xf4>)
 8101110:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8101114:	f003 0320 	and.w	r3, r3, #32
 8101118:	613b      	str	r3, [r7, #16]
 810111a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 810111c:	4b2c      	ldr	r3, [pc, #176]	; (81011d0 <HAL_ADC_MspInit+0xf4>)
 810111e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101122:	4a2b      	ldr	r2, [pc, #172]	; (81011d0 <HAL_ADC_MspInit+0xf4>)
 8101124:	f043 0320 	orr.w	r3, r3, #32
 8101128:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 810112c:	4b28      	ldr	r3, [pc, #160]	; (81011d0 <HAL_ADC_MspInit+0xf4>)
 810112e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101132:	f003 0320 	and.w	r3, r3, #32
 8101136:	60fb      	str	r3, [r7, #12]
 8101138:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PF11     ------> ADC1_INP2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 810113a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 810113e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8101140:	2303      	movs	r3, #3
 8101142:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101144:	2300      	movs	r3, #0
 8101146:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8101148:	f107 0314 	add.w	r3, r7, #20
 810114c:	4619      	mov	r1, r3
 810114e:	4821      	ldr	r0, [pc, #132]	; (81011d4 <HAL_ADC_MspInit+0xf8>)
 8101150:	f005 ff24 	bl	8106f9c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream4;
 8101154:	4b20      	ldr	r3, [pc, #128]	; (81011d8 <HAL_ADC_MspInit+0xfc>)
 8101156:	4a21      	ldr	r2, [pc, #132]	; (81011dc <HAL_ADC_MspInit+0x100>)
 8101158:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 810115a:	4b1f      	ldr	r3, [pc, #124]	; (81011d8 <HAL_ADC_MspInit+0xfc>)
 810115c:	2209      	movs	r2, #9
 810115e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8101160:	4b1d      	ldr	r3, [pc, #116]	; (81011d8 <HAL_ADC_MspInit+0xfc>)
 8101162:	2200      	movs	r2, #0
 8101164:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8101166:	4b1c      	ldr	r3, [pc, #112]	; (81011d8 <HAL_ADC_MspInit+0xfc>)
 8101168:	2200      	movs	r2, #0
 810116a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 810116c:	4b1a      	ldr	r3, [pc, #104]	; (81011d8 <HAL_ADC_MspInit+0xfc>)
 810116e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8101172:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8101174:	4b18      	ldr	r3, [pc, #96]	; (81011d8 <HAL_ADC_MspInit+0xfc>)
 8101176:	f44f 6200 	mov.w	r2, #2048	; 0x800
 810117a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 810117c:	4b16      	ldr	r3, [pc, #88]	; (81011d8 <HAL_ADC_MspInit+0xfc>)
 810117e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8101182:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8101184:	4b14      	ldr	r3, [pc, #80]	; (81011d8 <HAL_ADC_MspInit+0xfc>)
 8101186:	f44f 7280 	mov.w	r2, #256	; 0x100
 810118a:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 810118c:	4b12      	ldr	r3, [pc, #72]	; (81011d8 <HAL_ADC_MspInit+0xfc>)
 810118e:	2200      	movs	r2, #0
 8101190:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8101192:	4b11      	ldr	r3, [pc, #68]	; (81011d8 <HAL_ADC_MspInit+0xfc>)
 8101194:	2200      	movs	r2, #0
 8101196:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8101198:	480f      	ldr	r0, [pc, #60]	; (81011d8 <HAL_ADC_MspInit+0xfc>)
 810119a:	f003 f8b9 	bl	8104310 <HAL_DMA_Init>
 810119e:	4603      	mov	r3, r0
 81011a0:	2b00      	cmp	r3, #0
 81011a2:	d001      	beq.n	81011a8 <HAL_ADC_MspInit+0xcc>
    {
      Error_Handler();
 81011a4:	f000 fce4 	bl	8101b70 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 81011a8:	687b      	ldr	r3, [r7, #4]
 81011aa:	4a0b      	ldr	r2, [pc, #44]	; (81011d8 <HAL_ADC_MspInit+0xfc>)
 81011ac:	64da      	str	r2, [r3, #76]	; 0x4c
 81011ae:	4a0a      	ldr	r2, [pc, #40]	; (81011d8 <HAL_ADC_MspInit+0xfc>)
 81011b0:	687b      	ldr	r3, [r7, #4]
 81011b2:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 81011b4:	2200      	movs	r2, #0
 81011b6:	2105      	movs	r1, #5
 81011b8:	2012      	movs	r0, #18
 81011ba:	f003 f86d 	bl	8104298 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 81011be:	2012      	movs	r0, #18
 81011c0:	f003 f884 	bl	81042cc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 81011c4:	bf00      	nop
 81011c6:	3728      	adds	r7, #40	; 0x28
 81011c8:	46bd      	mov	sp, r7
 81011ca:	bd80      	pop	{r7, pc}
 81011cc:	40022000 	.word	0x40022000
 81011d0:	58024400 	.word	0x58024400
 81011d4:	58021400 	.word	0x58021400
 81011d8:	10004f34 	.word	0x10004f34
 81011dc:	40020070 	.word	0x40020070

081011e0 <HAL_SPI_TxRxCpltCallback>:
{

}

void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 81011e0:	b480      	push	{r7}
 81011e2:	b083      	sub	sp, #12
 81011e4:	af00      	add	r7, sp, #0
 81011e6:	6078      	str	r0, [r7, #4]
    //while(1);
}
 81011e8:	bf00      	nop
 81011ea:	370c      	adds	r7, #12
 81011ec:	46bd      	mov	sp, r7
 81011ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 81011f2:	4770      	bx	lr

081011f4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 81011f4:	b580      	push	{r7, lr}
 81011f6:	b082      	sub	sp, #8
 81011f8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 81011fa:	4b2d      	ldr	r3, [pc, #180]	; (81012b0 <MX_DMA_Init+0xbc>)
 81011fc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8101200:	4a2b      	ldr	r2, [pc, #172]	; (81012b0 <MX_DMA_Init+0xbc>)
 8101202:	f043 0301 	orr.w	r3, r3, #1
 8101206:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 810120a:	4b29      	ldr	r3, [pc, #164]	; (81012b0 <MX_DMA_Init+0xbc>)
 810120c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8101210:	f003 0301 	and.w	r3, r3, #1
 8101214:	607b      	str	r3, [r7, #4]
 8101216:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8101218:	4b25      	ldr	r3, [pc, #148]	; (81012b0 <MX_DMA_Init+0xbc>)
 810121a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 810121e:	4a24      	ldr	r2, [pc, #144]	; (81012b0 <MX_DMA_Init+0xbc>)
 8101220:	f043 0302 	orr.w	r3, r3, #2
 8101224:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8101228:	4b21      	ldr	r3, [pc, #132]	; (81012b0 <MX_DMA_Init+0xbc>)
 810122a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 810122e:	f003 0302 	and.w	r3, r3, #2
 8101232:	603b      	str	r3, [r7, #0]
 8101234:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8101236:	2200      	movs	r2, #0
 8101238:	2105      	movs	r1, #5
 810123a:	200b      	movs	r0, #11
 810123c:	f003 f82c 	bl	8104298 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8101240:	200b      	movs	r0, #11
 8101242:	f003 f843 	bl	81042cc <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8101246:	2200      	movs	r2, #0
 8101248:	2105      	movs	r1, #5
 810124a:	200c      	movs	r0, #12
 810124c:	f003 f824 	bl	8104298 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8101250:	200c      	movs	r0, #12
 8101252:	f003 f83b 	bl	81042cc <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 5, 0);
 8101256:	2200      	movs	r2, #0
 8101258:	2105      	movs	r1, #5
 810125a:	200f      	movs	r0, #15
 810125c:	f003 f81c 	bl	8104298 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8101260:	200f      	movs	r0, #15
 8101262:	f003 f833 	bl	81042cc <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8101266:	2200      	movs	r2, #0
 8101268:	2105      	movs	r1, #5
 810126a:	2010      	movs	r0, #16
 810126c:	f003 f814 	bl	8104298 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8101270:	2010      	movs	r0, #16
 8101272:	f003 f82b 	bl	81042cc <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 8101276:	2200      	movs	r2, #0
 8101278:	2105      	movs	r1, #5
 810127a:	2011      	movs	r0, #17
 810127c:	f003 f80c 	bl	8104298 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8101280:	2011      	movs	r0, #17
 8101282:	f003 f823 	bl	81042cc <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 5, 0);
 8101286:	2200      	movs	r2, #0
 8101288:	2105      	movs	r1, #5
 810128a:	202f      	movs	r0, #47	; 0x2f
 810128c:	f003 f804 	bl	8104298 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8101290:	202f      	movs	r0, #47	; 0x2f
 8101292:	f003 f81b 	bl	81042cc <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8101296:	2200      	movs	r2, #0
 8101298:	2105      	movs	r1, #5
 810129a:	2038      	movs	r0, #56	; 0x38
 810129c:	f002 fffc 	bl	8104298 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 81012a0:	2038      	movs	r0, #56	; 0x38
 81012a2:	f003 f813 	bl	81042cc <HAL_NVIC_EnableIRQ>

}
 81012a6:	bf00      	nop
 81012a8:	3708      	adds	r7, #8
 81012aa:	46bd      	mov	sp, r7
 81012ac:	bd80      	pop	{r7, pc}
 81012ae:	bf00      	nop
 81012b0:	58024400 	.word	0x58024400

081012b4 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 81012b4:	b580      	push	{r7, lr}
 81012b6:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 81012b8:	4a04      	ldr	r2, [pc, #16]	; (81012cc <MX_FREERTOS_Init+0x18>)
 81012ba:	2100      	movs	r1, #0
 81012bc:	4804      	ldr	r0, [pc, #16]	; (81012d0 <MX_FREERTOS_Init+0x1c>)
 81012be:	f013 ff5c 	bl	811517a <osThreadNew>
 81012c2:	4603      	mov	r3, r0
 81012c4:	4a03      	ldr	r2, [pc, #12]	; (81012d4 <MX_FREERTOS_Init+0x20>)
 81012c6:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 81012c8:	bf00      	nop
 81012ca:	bd80      	pop	{r7, pc}
 81012cc:	0811b490 	.word	0x0811b490
 81012d0:	081012d9 	.word	0x081012d9
 81012d4:	10004fac 	.word	0x10004fac

081012d8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 81012d8:	b580      	push	{r7, lr}
 81012da:	b082      	sub	sp, #8
 81012dc:	af00      	add	r7, sp, #0
 81012de:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 81012e0:	f016 fe4e 	bl	8117f80 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
	  //int status = BMP280ReadSensorID();
    osDelay(1);
 81012e4:	2001      	movs	r0, #1
 81012e6:	f013 ffda 	bl	811529e <osDelay>
 81012ea:	e7fb      	b.n	81012e4 <StartDefaultTask+0xc>

081012ec <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 81012ec:	b580      	push	{r7, lr}
 81012ee:	b08c      	sub	sp, #48	; 0x30
 81012f0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 81012f2:	f107 031c 	add.w	r3, r7, #28
 81012f6:	2200      	movs	r2, #0
 81012f8:	601a      	str	r2, [r3, #0]
 81012fa:	605a      	str	r2, [r3, #4]
 81012fc:	609a      	str	r2, [r3, #8]
 81012fe:	60da      	str	r2, [r3, #12]
 8101300:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8101302:	4b41      	ldr	r3, [pc, #260]	; (8101408 <MX_GPIO_Init+0x11c>)
 8101304:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101308:	4a3f      	ldr	r2, [pc, #252]	; (8101408 <MX_GPIO_Init+0x11c>)
 810130a:	f043 0301 	orr.w	r3, r3, #1
 810130e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101312:	4b3d      	ldr	r3, [pc, #244]	; (8101408 <MX_GPIO_Init+0x11c>)
 8101314:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101318:	f003 0301 	and.w	r3, r3, #1
 810131c:	61bb      	str	r3, [r7, #24]
 810131e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8101320:	4b39      	ldr	r3, [pc, #228]	; (8101408 <MX_GPIO_Init+0x11c>)
 8101322:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101326:	4a38      	ldr	r2, [pc, #224]	; (8101408 <MX_GPIO_Init+0x11c>)
 8101328:	f043 0320 	orr.w	r3, r3, #32
 810132c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101330:	4b35      	ldr	r3, [pc, #212]	; (8101408 <MX_GPIO_Init+0x11c>)
 8101332:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101336:	f003 0320 	and.w	r3, r3, #32
 810133a:	617b      	str	r3, [r7, #20]
 810133c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 810133e:	4b32      	ldr	r3, [pc, #200]	; (8101408 <MX_GPIO_Init+0x11c>)
 8101340:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101344:	4a30      	ldr	r2, [pc, #192]	; (8101408 <MX_GPIO_Init+0x11c>)
 8101346:	f043 0310 	orr.w	r3, r3, #16
 810134a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 810134e:	4b2e      	ldr	r3, [pc, #184]	; (8101408 <MX_GPIO_Init+0x11c>)
 8101350:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101354:	f003 0310 	and.w	r3, r3, #16
 8101358:	613b      	str	r3, [r7, #16]
 810135a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 810135c:	4b2a      	ldr	r3, [pc, #168]	; (8101408 <MX_GPIO_Init+0x11c>)
 810135e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101362:	4a29      	ldr	r2, [pc, #164]	; (8101408 <MX_GPIO_Init+0x11c>)
 8101364:	f043 0302 	orr.w	r3, r3, #2
 8101368:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 810136c:	4b26      	ldr	r3, [pc, #152]	; (8101408 <MX_GPIO_Init+0x11c>)
 810136e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101372:	f003 0302 	and.w	r3, r3, #2
 8101376:	60fb      	str	r3, [r7, #12]
 8101378:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 810137a:	4b23      	ldr	r3, [pc, #140]	; (8101408 <MX_GPIO_Init+0x11c>)
 810137c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101380:	4a21      	ldr	r2, [pc, #132]	; (8101408 <MX_GPIO_Init+0x11c>)
 8101382:	f043 0308 	orr.w	r3, r3, #8
 8101386:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 810138a:	4b1f      	ldr	r3, [pc, #124]	; (8101408 <MX_GPIO_Init+0x11c>)
 810138c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101390:	f003 0308 	and.w	r3, r3, #8
 8101394:	60bb      	str	r3, [r7, #8]
 8101396:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8101398:	4b1b      	ldr	r3, [pc, #108]	; (8101408 <MX_GPIO_Init+0x11c>)
 810139a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810139e:	4a1a      	ldr	r2, [pc, #104]	; (8101408 <MX_GPIO_Init+0x11c>)
 81013a0:	f043 0304 	orr.w	r3, r3, #4
 81013a4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81013a8:	4b17      	ldr	r3, [pc, #92]	; (8101408 <MX_GPIO_Init+0x11c>)
 81013aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81013ae:	f003 0304 	and.w	r3, r3, #4
 81013b2:	607b      	str	r3, [r7, #4]
 81013b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 81013b6:	4b14      	ldr	r3, [pc, #80]	; (8101408 <MX_GPIO_Init+0x11c>)
 81013b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81013bc:	4a12      	ldr	r2, [pc, #72]	; (8101408 <MX_GPIO_Init+0x11c>)
 81013be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 81013c2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81013c6:	4b10      	ldr	r3, [pc, #64]	; (8101408 <MX_GPIO_Init+0x11c>)
 81013c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81013cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 81013d0:	603b      	str	r3, [r7, #0]
 81013d2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pins : PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = LSM9DS1_INT2_AG_Pin|LSM9DS1_INT_AG_Pin|LSM9DS1_INT_M_Pin;
 81013d4:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 81013d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 81013da:	4b0c      	ldr	r3, [pc, #48]	; (810140c <MX_GPIO_Init+0x120>)
 81013dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 81013de:	2300      	movs	r3, #0
 81013e0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 81013e2:	f107 031c 	add.w	r3, r7, #28
 81013e6:	4619      	mov	r1, r3
 81013e8:	4809      	ldr	r0, [pc, #36]	; (8101410 <MX_GPIO_Init+0x124>)
 81013ea:	f005 fdd7 	bl	8106f9c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 81013ee:	2200      	movs	r2, #0
 81013f0:	2105      	movs	r1, #5
 81013f2:	2028      	movs	r0, #40	; 0x28
 81013f4:	f002 ff50 	bl	8104298 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 81013f8:	2028      	movs	r0, #40	; 0x28
 81013fa:	f002 ff67 	bl	81042cc <HAL_NVIC_EnableIRQ>

}
 81013fe:	bf00      	nop
 8101400:	3730      	adds	r7, #48	; 0x30
 8101402:	46bd      	mov	sp, r7
 8101404:	bd80      	pop	{r7, pc}
 8101406:	bf00      	nop
 8101408:	58024400 	.word	0x58024400
 810140c:	11110000 	.word	0x11110000
 8101410:	58021800 	.word	0x58021800

08101414 <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_rx;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8101414:	b580      	push	{r7, lr}
 8101416:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8101418:	4b1b      	ldr	r3, [pc, #108]	; (8101488 <MX_I2C1_Init+0x74>)
 810141a:	4a1c      	ldr	r2, [pc, #112]	; (810148c <MX_I2C1_Init+0x78>)
 810141c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x302027FF;
 810141e:	4b1a      	ldr	r3, [pc, #104]	; (8101488 <MX_I2C1_Init+0x74>)
 8101420:	4a1b      	ldr	r2, [pc, #108]	; (8101490 <MX_I2C1_Init+0x7c>)
 8101422:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8101424:	4b18      	ldr	r3, [pc, #96]	; (8101488 <MX_I2C1_Init+0x74>)
 8101426:	2200      	movs	r2, #0
 8101428:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 810142a:	4b17      	ldr	r3, [pc, #92]	; (8101488 <MX_I2C1_Init+0x74>)
 810142c:	2201      	movs	r2, #1
 810142e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8101430:	4b15      	ldr	r3, [pc, #84]	; (8101488 <MX_I2C1_Init+0x74>)
 8101432:	2200      	movs	r2, #0
 8101434:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8101436:	4b14      	ldr	r3, [pc, #80]	; (8101488 <MX_I2C1_Init+0x74>)
 8101438:	2200      	movs	r2, #0
 810143a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 810143c:	4b12      	ldr	r3, [pc, #72]	; (8101488 <MX_I2C1_Init+0x74>)
 810143e:	2200      	movs	r2, #0
 8101440:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8101442:	4b11      	ldr	r3, [pc, #68]	; (8101488 <MX_I2C1_Init+0x74>)
 8101444:	2200      	movs	r2, #0
 8101446:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8101448:	4b0f      	ldr	r3, [pc, #60]	; (8101488 <MX_I2C1_Init+0x74>)
 810144a:	2200      	movs	r2, #0
 810144c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 810144e:	480e      	ldr	r0, [pc, #56]	; (8101488 <MX_I2C1_Init+0x74>)
 8101450:	f005 ffc8 	bl	81073e4 <HAL_I2C_Init>
 8101454:	4603      	mov	r3, r0
 8101456:	2b00      	cmp	r3, #0
 8101458:	d001      	beq.n	810145e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 810145a:	f000 fb89 	bl	8101b70 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 810145e:	2100      	movs	r1, #0
 8101460:	4809      	ldr	r0, [pc, #36]	; (8101488 <MX_I2C1_Init+0x74>)
 8101462:	f006 fed4 	bl	810820e <HAL_I2CEx_ConfigAnalogFilter>
 8101466:	4603      	mov	r3, r0
 8101468:	2b00      	cmp	r3, #0
 810146a:	d001      	beq.n	8101470 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 810146c:	f000 fb80 	bl	8101b70 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8101470:	2100      	movs	r1, #0
 8101472:	4805      	ldr	r0, [pc, #20]	; (8101488 <MX_I2C1_Init+0x74>)
 8101474:	f006 ff16 	bl	81082a4 <HAL_I2CEx_ConfigDigitalFilter>
 8101478:	4603      	mov	r3, r0
 810147a:	2b00      	cmp	r3, #0
 810147c:	d001      	beq.n	8101482 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 810147e:	f000 fb77 	bl	8101b70 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8101482:	bf00      	nop
 8101484:	bd80      	pop	{r7, pc}
 8101486:	bf00      	nop
 8101488:	10005028 	.word	0x10005028
 810148c:	40005400 	.word	0x40005400
 8101490:	302027ff 	.word	0x302027ff

08101494 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8101494:	b580      	push	{r7, lr}
 8101496:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8101498:	4b1b      	ldr	r3, [pc, #108]	; (8101508 <MX_I2C2_Init+0x74>)
 810149a:	4a1c      	ldr	r2, [pc, #112]	; (810150c <MX_I2C2_Init+0x78>)
 810149c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x307075B1;
 810149e:	4b1a      	ldr	r3, [pc, #104]	; (8101508 <MX_I2C2_Init+0x74>)
 81014a0:	4a1b      	ldr	r2, [pc, #108]	; (8101510 <MX_I2C2_Init+0x7c>)
 81014a2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 81014a4:	4b18      	ldr	r3, [pc, #96]	; (8101508 <MX_I2C2_Init+0x74>)
 81014a6:	2200      	movs	r2, #0
 81014a8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 81014aa:	4b17      	ldr	r3, [pc, #92]	; (8101508 <MX_I2C2_Init+0x74>)
 81014ac:	2201      	movs	r2, #1
 81014ae:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 81014b0:	4b15      	ldr	r3, [pc, #84]	; (8101508 <MX_I2C2_Init+0x74>)
 81014b2:	2200      	movs	r2, #0
 81014b4:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 81014b6:	4b14      	ldr	r3, [pc, #80]	; (8101508 <MX_I2C2_Init+0x74>)
 81014b8:	2200      	movs	r2, #0
 81014ba:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 81014bc:	4b12      	ldr	r3, [pc, #72]	; (8101508 <MX_I2C2_Init+0x74>)
 81014be:	2200      	movs	r2, #0
 81014c0:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 81014c2:	4b11      	ldr	r3, [pc, #68]	; (8101508 <MX_I2C2_Init+0x74>)
 81014c4:	2200      	movs	r2, #0
 81014c6:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 81014c8:	4b0f      	ldr	r3, [pc, #60]	; (8101508 <MX_I2C2_Init+0x74>)
 81014ca:	2200      	movs	r2, #0
 81014cc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 81014ce:	480e      	ldr	r0, [pc, #56]	; (8101508 <MX_I2C2_Init+0x74>)
 81014d0:	f005 ff88 	bl	81073e4 <HAL_I2C_Init>
 81014d4:	4603      	mov	r3, r0
 81014d6:	2b00      	cmp	r3, #0
 81014d8:	d001      	beq.n	81014de <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 81014da:	f000 fb49 	bl	8101b70 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 81014de:	2100      	movs	r1, #0
 81014e0:	4809      	ldr	r0, [pc, #36]	; (8101508 <MX_I2C2_Init+0x74>)
 81014e2:	f006 fe94 	bl	810820e <HAL_I2CEx_ConfigAnalogFilter>
 81014e6:	4603      	mov	r3, r0
 81014e8:	2b00      	cmp	r3, #0
 81014ea:	d001      	beq.n	81014f0 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 81014ec:	f000 fb40 	bl	8101b70 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 81014f0:	2100      	movs	r1, #0
 81014f2:	4805      	ldr	r0, [pc, #20]	; (8101508 <MX_I2C2_Init+0x74>)
 81014f4:	f006 fed6 	bl	81082a4 <HAL_I2CEx_ConfigDigitalFilter>
 81014f8:	4603      	mov	r3, r0
 81014fa:	2b00      	cmp	r3, #0
 81014fc:	d001      	beq.n	8101502 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 81014fe:	f000 fb37 	bl	8101b70 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8101502:	bf00      	nop
 8101504:	bd80      	pop	{r7, pc}
 8101506:	bf00      	nop
 8101508:	10005074 	.word	0x10005074
 810150c:	40005800 	.word	0x40005800
 8101510:	307075b1 	.word	0x307075b1

08101514 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8101514:	b580      	push	{r7, lr}
 8101516:	b0ba      	sub	sp, #232	; 0xe8
 8101518:	af00      	add	r7, sp, #0
 810151a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 810151c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8101520:	2200      	movs	r2, #0
 8101522:	601a      	str	r2, [r3, #0]
 8101524:	605a      	str	r2, [r3, #4]
 8101526:	609a      	str	r2, [r3, #8]
 8101528:	60da      	str	r2, [r3, #12]
 810152a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 810152c:	f107 0318 	add.w	r3, r7, #24
 8101530:	22bc      	movs	r2, #188	; 0xbc
 8101532:	2100      	movs	r1, #0
 8101534:	4618      	mov	r0, r3
 8101536:	f017 fa55 	bl	81189e4 <memset>
  if(i2cHandle->Instance==I2C1)
 810153a:	687b      	ldr	r3, [r7, #4]
 810153c:	681b      	ldr	r3, [r3, #0]
 810153e:	4a80      	ldr	r2, [pc, #512]	; (8101740 <HAL_I2C_MspInit+0x22c>)
 8101540:	4293      	cmp	r3, r2
 8101542:	f040 80b0 	bne.w	81016a6 <HAL_I2C_MspInit+0x192>
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8101546:	2308      	movs	r3, #8
 8101548:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 810154a:	2300      	movs	r3, #0
 810154c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8101550:	f107 0318 	add.w	r3, r7, #24
 8101554:	4618      	mov	r0, r3
 8101556:	f008 fb7f 	bl	8109c58 <HAL_RCCEx_PeriphCLKConfig>
 810155a:	4603      	mov	r3, r0
 810155c:	2b00      	cmp	r3, #0
 810155e:	d001      	beq.n	8101564 <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 8101560:	f000 fb06 	bl	8101b70 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8101564:	4b77      	ldr	r3, [pc, #476]	; (8101744 <HAL_I2C_MspInit+0x230>)
 8101566:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810156a:	4a76      	ldr	r2, [pc, #472]	; (8101744 <HAL_I2C_MspInit+0x230>)
 810156c:	f043 0302 	orr.w	r3, r3, #2
 8101570:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101574:	4b73      	ldr	r3, [pc, #460]	; (8101744 <HAL_I2C_MspInit+0x230>)
 8101576:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810157a:	f003 0302 	and.w	r3, r3, #2
 810157e:	617b      	str	r3, [r7, #20]
 8101580:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8101582:	f44f 7340 	mov.w	r3, #768	; 0x300
 8101586:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 810158a:	2312      	movs	r3, #18
 810158c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101590:	2300      	movs	r3, #0
 8101592:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101596:	2300      	movs	r3, #0
 8101598:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 810159c:	2304      	movs	r3, #4
 810159e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 81015a2:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 81015a6:	4619      	mov	r1, r3
 81015a8:	4867      	ldr	r0, [pc, #412]	; (8101748 <HAL_I2C_MspInit+0x234>)
 81015aa:	f005 fcf7 	bl	8106f9c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 81015ae:	4b65      	ldr	r3, [pc, #404]	; (8101744 <HAL_I2C_MspInit+0x230>)
 81015b0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 81015b4:	4a63      	ldr	r2, [pc, #396]	; (8101744 <HAL_I2C_MspInit+0x230>)
 81015b6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 81015ba:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 81015be:	4b61      	ldr	r3, [pc, #388]	; (8101744 <HAL_I2C_MspInit+0x230>)
 81015c0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 81015c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 81015c8:	613b      	str	r3, [r7, #16]
 81015ca:	693b      	ldr	r3, [r7, #16]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream5;
 81015cc:	4b5f      	ldr	r3, [pc, #380]	; (810174c <HAL_I2C_MspInit+0x238>)
 81015ce:	4a60      	ldr	r2, [pc, #384]	; (8101750 <HAL_I2C_MspInit+0x23c>)
 81015d0:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_I2C1_RX;
 81015d2:	4b5e      	ldr	r3, [pc, #376]	; (810174c <HAL_I2C_MspInit+0x238>)
 81015d4:	2221      	movs	r2, #33	; 0x21
 81015d6:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 81015d8:	4b5c      	ldr	r3, [pc, #368]	; (810174c <HAL_I2C_MspInit+0x238>)
 81015da:	2200      	movs	r2, #0
 81015dc:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 81015de:	4b5b      	ldr	r3, [pc, #364]	; (810174c <HAL_I2C_MspInit+0x238>)
 81015e0:	2200      	movs	r2, #0
 81015e2:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 81015e4:	4b59      	ldr	r3, [pc, #356]	; (810174c <HAL_I2C_MspInit+0x238>)
 81015e6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 81015ea:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 81015ec:	4b57      	ldr	r3, [pc, #348]	; (810174c <HAL_I2C_MspInit+0x238>)
 81015ee:	2200      	movs	r2, #0
 81015f0:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 81015f2:	4b56      	ldr	r3, [pc, #344]	; (810174c <HAL_I2C_MspInit+0x238>)
 81015f4:	2200      	movs	r2, #0
 81015f6:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 81015f8:	4b54      	ldr	r3, [pc, #336]	; (810174c <HAL_I2C_MspInit+0x238>)
 81015fa:	2200      	movs	r2, #0
 81015fc:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 81015fe:	4b53      	ldr	r3, [pc, #332]	; (810174c <HAL_I2C_MspInit+0x238>)
 8101600:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8101604:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8101606:	4b51      	ldr	r3, [pc, #324]	; (810174c <HAL_I2C_MspInit+0x238>)
 8101608:	2200      	movs	r2, #0
 810160a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 810160c:	484f      	ldr	r0, [pc, #316]	; (810174c <HAL_I2C_MspInit+0x238>)
 810160e:	f002 fe7f 	bl	8104310 <HAL_DMA_Init>
 8101612:	4603      	mov	r3, r0
 8101614:	2b00      	cmp	r3, #0
 8101616:	d001      	beq.n	810161c <HAL_I2C_MspInit+0x108>
    {
      Error_Handler();
 8101618:	f000 faaa 	bl	8101b70 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 810161c:	687b      	ldr	r3, [r7, #4]
 810161e:	4a4b      	ldr	r2, [pc, #300]	; (810174c <HAL_I2C_MspInit+0x238>)
 8101620:	63da      	str	r2, [r3, #60]	; 0x3c
 8101622:	4a4a      	ldr	r2, [pc, #296]	; (810174c <HAL_I2C_MspInit+0x238>)
 8101624:	687b      	ldr	r3, [r7, #4]
 8101626:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream6;
 8101628:	4b4a      	ldr	r3, [pc, #296]	; (8101754 <HAL_I2C_MspInit+0x240>)
 810162a:	4a4b      	ldr	r2, [pc, #300]	; (8101758 <HAL_I2C_MspInit+0x244>)
 810162c:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_I2C1_TX;
 810162e:	4b49      	ldr	r3, [pc, #292]	; (8101754 <HAL_I2C_MspInit+0x240>)
 8101630:	2222      	movs	r2, #34	; 0x22
 8101632:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8101634:	4b47      	ldr	r3, [pc, #284]	; (8101754 <HAL_I2C_MspInit+0x240>)
 8101636:	2240      	movs	r2, #64	; 0x40
 8101638:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 810163a:	4b46      	ldr	r3, [pc, #280]	; (8101754 <HAL_I2C_MspInit+0x240>)
 810163c:	2200      	movs	r2, #0
 810163e:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8101640:	4b44      	ldr	r3, [pc, #272]	; (8101754 <HAL_I2C_MspInit+0x240>)
 8101642:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8101646:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8101648:	4b42      	ldr	r3, [pc, #264]	; (8101754 <HAL_I2C_MspInit+0x240>)
 810164a:	2200      	movs	r2, #0
 810164c:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 810164e:	4b41      	ldr	r3, [pc, #260]	; (8101754 <HAL_I2C_MspInit+0x240>)
 8101650:	2200      	movs	r2, #0
 8101652:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8101654:	4b3f      	ldr	r3, [pc, #252]	; (8101754 <HAL_I2C_MspInit+0x240>)
 8101656:	2200      	movs	r2, #0
 8101658:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 810165a:	4b3e      	ldr	r3, [pc, #248]	; (8101754 <HAL_I2C_MspInit+0x240>)
 810165c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8101660:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8101662:	4b3c      	ldr	r3, [pc, #240]	; (8101754 <HAL_I2C_MspInit+0x240>)
 8101664:	2200      	movs	r2, #0
 8101666:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8101668:	483a      	ldr	r0, [pc, #232]	; (8101754 <HAL_I2C_MspInit+0x240>)
 810166a:	f002 fe51 	bl	8104310 <HAL_DMA_Init>
 810166e:	4603      	mov	r3, r0
 8101670:	2b00      	cmp	r3, #0
 8101672:	d001      	beq.n	8101678 <HAL_I2C_MspInit+0x164>
    {
      Error_Handler();
 8101674:	f000 fa7c 	bl	8101b70 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 8101678:	687b      	ldr	r3, [r7, #4]
 810167a:	4a36      	ldr	r2, [pc, #216]	; (8101754 <HAL_I2C_MspInit+0x240>)
 810167c:	639a      	str	r2, [r3, #56]	; 0x38
 810167e:	4a35      	ldr	r2, [pc, #212]	; (8101754 <HAL_I2C_MspInit+0x240>)
 8101680:	687b      	ldr	r3, [r7, #4]
 8101682:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 8101684:	2200      	movs	r2, #0
 8101686:	2105      	movs	r1, #5
 8101688:	201f      	movs	r0, #31
 810168a:	f002 fe05 	bl	8104298 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 810168e:	201f      	movs	r0, #31
 8101690:	f002 fe1c 	bl	81042cc <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 8101694:	2200      	movs	r2, #0
 8101696:	2105      	movs	r1, #5
 8101698:	2020      	movs	r0, #32
 810169a:	f002 fdfd 	bl	8104298 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 810169e:	2020      	movs	r0, #32
 81016a0:	f002 fe14 	bl	81042cc <HAL_NVIC_EnableIRQ>
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 81016a4:	e047      	b.n	8101736 <HAL_I2C_MspInit+0x222>
  else if(i2cHandle->Instance==I2C2)
 81016a6:	687b      	ldr	r3, [r7, #4]
 81016a8:	681b      	ldr	r3, [r3, #0]
 81016aa:	4a2c      	ldr	r2, [pc, #176]	; (810175c <HAL_I2C_MspInit+0x248>)
 81016ac:	4293      	cmp	r3, r2
 81016ae:	d142      	bne.n	8101736 <HAL_I2C_MspInit+0x222>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 81016b0:	2308      	movs	r3, #8
 81016b2:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 81016b4:	2300      	movs	r3, #0
 81016b6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 81016ba:	f107 0318 	add.w	r3, r7, #24
 81016be:	4618      	mov	r0, r3
 81016c0:	f008 faca 	bl	8109c58 <HAL_RCCEx_PeriphCLKConfig>
 81016c4:	4603      	mov	r3, r0
 81016c6:	2b00      	cmp	r3, #0
 81016c8:	d001      	beq.n	81016ce <HAL_I2C_MspInit+0x1ba>
      Error_Handler();
 81016ca:	f000 fa51 	bl	8101b70 <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 81016ce:	4b1d      	ldr	r3, [pc, #116]	; (8101744 <HAL_I2C_MspInit+0x230>)
 81016d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81016d4:	4a1b      	ldr	r2, [pc, #108]	; (8101744 <HAL_I2C_MspInit+0x230>)
 81016d6:	f043 0302 	orr.w	r3, r3, #2
 81016da:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81016de:	4b19      	ldr	r3, [pc, #100]	; (8101744 <HAL_I2C_MspInit+0x230>)
 81016e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81016e4:	f003 0302 	and.w	r3, r3, #2
 81016e8:	60fb      	str	r3, [r7, #12]
 81016ea:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 81016ec:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 81016f0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 81016f4:	2312      	movs	r3, #18
 81016f6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81016fa:	2300      	movs	r3, #0
 81016fc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101700:	2300      	movs	r3, #0
 8101702:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8101706:	2304      	movs	r3, #4
 8101708:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 810170c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8101710:	4619      	mov	r1, r3
 8101712:	480d      	ldr	r0, [pc, #52]	; (8101748 <HAL_I2C_MspInit+0x234>)
 8101714:	f005 fc42 	bl	8106f9c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8101718:	4b0a      	ldr	r3, [pc, #40]	; (8101744 <HAL_I2C_MspInit+0x230>)
 810171a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 810171e:	4a09      	ldr	r2, [pc, #36]	; (8101744 <HAL_I2C_MspInit+0x230>)
 8101720:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8101724:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8101728:	4b06      	ldr	r3, [pc, #24]	; (8101744 <HAL_I2C_MspInit+0x230>)
 810172a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 810172e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8101732:	60bb      	str	r3, [r7, #8]
 8101734:	68bb      	ldr	r3, [r7, #8]
}
 8101736:	bf00      	nop
 8101738:	37e8      	adds	r7, #232	; 0xe8
 810173a:	46bd      	mov	sp, r7
 810173c:	bd80      	pop	{r7, pc}
 810173e:	bf00      	nop
 8101740:	40005400 	.word	0x40005400
 8101744:	58024400 	.word	0x58024400
 8101748:	58020400 	.word	0x58020400
 810174c:	100050c0 	.word	0x100050c0
 8101750:	40020088 	.word	0x40020088
 8101754:	10004fb0 	.word	0x10004fb0
 8101758:	400200a0 	.word	0x400200a0
 810175c:	40005800 	.word	0x40005800

08101760 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8101760:	b580      	push	{r7, lr}
 8101762:	b082      	sub	sp, #8
 8101764:	af00      	add	r7, sp, #0

  /* USER CODE END 1 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /*HW semaphore Clock enable*/
  __HAL_RCC_HSEM_CLK_ENABLE();
 8101766:	4b2f      	ldr	r3, [pc, #188]	; (8101824 <main+0xc4>)
 8101768:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810176c:	4a2d      	ldr	r2, [pc, #180]	; (8101824 <main+0xc4>)
 810176e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8101772:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101776:	4b2b      	ldr	r3, [pc, #172]	; (8101824 <main+0xc4>)
 8101778:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810177c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8101780:	607b      	str	r3, [r7, #4]
 8101782:	687b      	ldr	r3, [r7, #4]
  /* Activate HSEM notification for Cortex-M4*/
  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8101784:	2001      	movs	r0, #1
 8101786:	f005 fdf7 	bl	8107378 <HAL_HSEM_ActivateNotification>
  /*
  Domain D2 goes to STOP mode (Cortex-M4 in deep-sleep) waiting for Cortex-M7 to
  perform system initialization (system clock config, external memory configuration.. )
  */
  HAL_PWREx_ClearPendingEvent();
 810178a:	f008 f82d 	bl	81097e8 <HAL_PWREx_ClearPendingEvent>
  HAL_PWREx_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_STOPENTRY_WFE, PWR_D2_DOMAIN);
 810178e:	2201      	movs	r2, #1
 8101790:	2102      	movs	r1, #2
 8101792:	2000      	movs	r0, #0
 8101794:	f007 ffae 	bl	81096f4 <HAL_PWREx_EnterSTOPMode>
  /* Clear HSEM flag */
  __HAL_HSEM_CLEAR_FLAG(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8101798:	4b23      	ldr	r3, [pc, #140]	; (8101828 <main+0xc8>)
 810179a:	681b      	ldr	r3, [r3, #0]
 810179c:	091b      	lsrs	r3, r3, #4
 810179e:	f003 030f 	and.w	r3, r3, #15
 81017a2:	2b07      	cmp	r3, #7
 81017a4:	d108      	bne.n	81017b8 <main+0x58>
 81017a6:	4b21      	ldr	r3, [pc, #132]	; (810182c <main+0xcc>)
 81017a8:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 81017ac:	4a1f      	ldr	r2, [pc, #124]	; (810182c <main+0xcc>)
 81017ae:	f043 0301 	orr.w	r3, r3, #1
 81017b2:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
 81017b6:	e007      	b.n	81017c8 <main+0x68>
 81017b8:	4b1c      	ldr	r3, [pc, #112]	; (810182c <main+0xcc>)
 81017ba:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 81017be:	4a1b      	ldr	r2, [pc, #108]	; (810182c <main+0xcc>)
 81017c0:	f043 0301 	orr.w	r3, r3, #1
 81017c4:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114

/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 81017c8:	f001 f8a6 	bl	8102918 <HAL_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 81017cc:	f7ff fd8e 	bl	81012ec <MX_GPIO_Init>
  MX_DMA_Init();
 81017d0:	f7ff fd10 	bl	81011f4 <MX_DMA_Init>
  MX_USART3_UART_Init();
 81017d4:	f000 ff58 	bl	8102688 <MX_USART3_UART_Init>
  MX_TIM1_Init();
 81017d8:	f000 fdd8 	bl	810238c <MX_TIM1_Init>
  MX_I2C1_Init();
 81017dc:	f7ff fe1a 	bl	8101414 <MX_I2C1_Init>
  MX_SPI1_Init();
 81017e0:	f000 fa88 	bl	8101cf4 <MX_SPI1_Init>
  MX_ADC1_Init();
 81017e4:	f7ff fc00 	bl	8100fe8 <MX_ADC1_Init>
  MX_I2C2_Init();
 81017e8:	f7ff fe54 	bl	8101494 <MX_I2C2_Init>
  MX_SDMMC1_SD_Init();
 81017ec:	f000 f9c8 	bl	8101b80 <MX_SDMMC1_SD_Init>
  MX_FATFS_Init();
 81017f0:	f011 fcfe 	bl	81131f0 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  ConfigGPS();
 81017f4:	f000 f822 	bl	810183c <ConfigGPS>


  if(HAL_UART_Receive_DMA(&huart3, (uint8_t *)data_byte, 1)== HAL_OK)
 81017f8:	2201      	movs	r2, #1
 81017fa:	490d      	ldr	r1, [pc, #52]	; (8101830 <main+0xd0>)
 81017fc:	480d      	ldr	r0, [pc, #52]	; (8101834 <main+0xd4>)
 81017fe:	f00d fecd 	bl	810f59c <HAL_UART_Receive_DMA>
 8101802:	4603      	mov	r3, r0
 8101804:	2b00      	cmp	r3, #0
 8101806:	d105      	bne.n	8101814 <main+0xb4>
  {
	  	LEDC_ON();
 8101808:	2201      	movs	r2, #1
 810180a:	f44f 7180 	mov.w	r1, #256	; 0x100
 810180e:	480a      	ldr	r0, [pc, #40]	; (8101838 <main+0xd8>)
 8101810:	f005 fd74 	bl	81072fc <HAL_GPIO_WritePin>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8101814:	f013 fc30 	bl	8115078 <osKernelInitialize>
  MX_FREERTOS_Init();
 8101818:	f7ff fd4c 	bl	81012b4 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 810181c:	f013 fc72 	bl	8115104 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8101820:	e7fe      	b.n	8101820 <main+0xc0>
 8101822:	bf00      	nop
 8101824:	58024400 	.word	0x58024400
 8101828:	e000ed00 	.word	0xe000ed00
 810182c:	58026400 	.word	0x58026400
 8101830:	10000374 	.word	0x10000374
 8101834:	100054a0 	.word	0x100054a0
 8101838:	58021400 	.word	0x58021400

0810183c <ConfigGPS>:
  }
  /* USER CODE END 3 */
}

void ConfigGPS(void)
{
 810183c:	b590      	push	{r4, r7, lr}
 810183e:	b0c1      	sub	sp, #260	; 0x104
 8101840:	af00      	add	r7, sp, #0
		if(HAL_UART_Transmit_DMA(&huart3, (uint8_t *)UBLOX_10HZ_RATE, sizeof(UBLOX_10HZ_RATE)) == HAL_OK)
 8101842:	4b65      	ldr	r3, [pc, #404]	; (81019d8 <ConfigGPS+0x19c>)
 8101844:	f107 04f0 	add.w	r4, r7, #240	; 0xf0
 8101848:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 810184a:	c407      	stmia	r4!, {r0, r1, r2}
 810184c:	8023      	strh	r3, [r4, #0]
 810184e:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8101852:	220e      	movs	r2, #14
 8101854:	4619      	mov	r1, r3
 8101856:	4861      	ldr	r0, [pc, #388]	; (81019dc <ConfigGPS+0x1a0>)
 8101858:	f00d fe20 	bl	810f49c <HAL_UART_Transmit_DMA>
 810185c:	4603      	mov	r3, r0
 810185e:	2b00      	cmp	r3, #0
 8101860:	d105      	bne.n	810186e <ConfigGPS+0x32>
		{
		  LEDD_ON();
 8101862:	2201      	movs	r2, #1
 8101864:	f44f 7100 	mov.w	r1, #512	; 0x200
 8101868:	485d      	ldr	r0, [pc, #372]	; (81019e0 <ConfigGPS+0x1a4>)
 810186a:	f005 fd47 	bl	81072fc <HAL_GPIO_WritePin>
		}
		HAL_Delay(100);
 810186e:	2064      	movs	r0, #100	; 0x64
 8101870:	f001 f8d0 	bl	8102a14 <HAL_Delay>

	    if(HAL_UART_Transmit_DMA(&huart3, (uint8_t *)UBLOX_GXGGA_OFF, sizeof(UBLOX_GXGGA_OFF)) == HAL_OK)
 8101874:	4b5b      	ldr	r3, [pc, #364]	; (81019e4 <ConfigGPS+0x1a8>)
 8101876:	f107 04d0 	add.w	r4, r7, #208	; 0xd0
 810187a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 810187c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8101880:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8101884:	2210      	movs	r2, #16
 8101886:	4619      	mov	r1, r3
 8101888:	4854      	ldr	r0, [pc, #336]	; (81019dc <ConfigGPS+0x1a0>)
 810188a:	f00d fe07 	bl	810f49c <HAL_UART_Transmit_DMA>
 810188e:	4603      	mov	r3, r0
 8101890:	2b00      	cmp	r3, #0
 8101892:	d105      	bne.n	81018a0 <ConfigGPS+0x64>
	    {
	  	  LEDD_ON();
 8101894:	2201      	movs	r2, #1
 8101896:	f44f 7100 	mov.w	r1, #512	; 0x200
 810189a:	4851      	ldr	r0, [pc, #324]	; (81019e0 <ConfigGPS+0x1a4>)
 810189c:	f005 fd2e 	bl	81072fc <HAL_GPIO_WritePin>
	    }
	    HAL_Delay(100);
 81018a0:	2064      	movs	r0, #100	; 0x64
 81018a2:	f001 f8b7 	bl	8102a14 <HAL_Delay>

	    if(HAL_UART_Transmit_DMA(&huart3, (uint8_t *)UBLOX_GXGLL_OFF, sizeof(UBLOX_GXGLL_OFF)) == HAL_OK)
 81018a6:	4b50      	ldr	r3, [pc, #320]	; (81019e8 <ConfigGPS+0x1ac>)
 81018a8:	f107 04b0 	add.w	r4, r7, #176	; 0xb0
 81018ac:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 81018ae:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 81018b2:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 81018b6:	2210      	movs	r2, #16
 81018b8:	4619      	mov	r1, r3
 81018ba:	4848      	ldr	r0, [pc, #288]	; (81019dc <ConfigGPS+0x1a0>)
 81018bc:	f00d fdee 	bl	810f49c <HAL_UART_Transmit_DMA>
 81018c0:	4603      	mov	r3, r0
 81018c2:	2b00      	cmp	r3, #0
 81018c4:	d105      	bne.n	81018d2 <ConfigGPS+0x96>
	    {
	  	  LEDD_ON();
 81018c6:	2201      	movs	r2, #1
 81018c8:	f44f 7100 	mov.w	r1, #512	; 0x200
 81018cc:	4844      	ldr	r0, [pc, #272]	; (81019e0 <ConfigGPS+0x1a4>)
 81018ce:	f005 fd15 	bl	81072fc <HAL_GPIO_WritePin>
	    }
	    HAL_Delay(100);
 81018d2:	2064      	movs	r0, #100	; 0x64
 81018d4:	f001 f89e 	bl	8102a14 <HAL_Delay>

	    if(HAL_UART_Transmit_DMA(&huart3, (uint8_t *)UBLOX_GXGSA_OFF, sizeof(UBLOX_GXGSA_OFF)) == HAL_OK)
 81018d8:	4b44      	ldr	r3, [pc, #272]	; (81019ec <ConfigGPS+0x1b0>)
 81018da:	f107 0490 	add.w	r4, r7, #144	; 0x90
 81018de:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 81018e0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 81018e4:	f107 0390 	add.w	r3, r7, #144	; 0x90
 81018e8:	2210      	movs	r2, #16
 81018ea:	4619      	mov	r1, r3
 81018ec:	483b      	ldr	r0, [pc, #236]	; (81019dc <ConfigGPS+0x1a0>)
 81018ee:	f00d fdd5 	bl	810f49c <HAL_UART_Transmit_DMA>
 81018f2:	4603      	mov	r3, r0
 81018f4:	2b00      	cmp	r3, #0
 81018f6:	d105      	bne.n	8101904 <ConfigGPS+0xc8>
	    {
	  	  LEDD_ON();
 81018f8:	2201      	movs	r2, #1
 81018fa:	f44f 7100 	mov.w	r1, #512	; 0x200
 81018fe:	4838      	ldr	r0, [pc, #224]	; (81019e0 <ConfigGPS+0x1a4>)
 8101900:	f005 fcfc 	bl	81072fc <HAL_GPIO_WritePin>
	    }
	    HAL_Delay(100);
 8101904:	2064      	movs	r0, #100	; 0x64
 8101906:	f001 f885 	bl	8102a14 <HAL_Delay>

	    if(HAL_UART_Transmit_DMA(&huart3, (uint8_t *)UBLOX_GXGSV_OFF, sizeof(UBLOX_GXGSV_OFF)) == HAL_OK)
 810190a:	4b39      	ldr	r3, [pc, #228]	; (81019f0 <ConfigGPS+0x1b4>)
 810190c:	f107 0470 	add.w	r4, r7, #112	; 0x70
 8101910:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8101912:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8101916:	f107 0370 	add.w	r3, r7, #112	; 0x70
 810191a:	2210      	movs	r2, #16
 810191c:	4619      	mov	r1, r3
 810191e:	482f      	ldr	r0, [pc, #188]	; (81019dc <ConfigGPS+0x1a0>)
 8101920:	f00d fdbc 	bl	810f49c <HAL_UART_Transmit_DMA>
 8101924:	4603      	mov	r3, r0
 8101926:	2b00      	cmp	r3, #0
 8101928:	d105      	bne.n	8101936 <ConfigGPS+0xfa>
	    {
	  	  LEDD_ON();
 810192a:	2201      	movs	r2, #1
 810192c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8101930:	482b      	ldr	r0, [pc, #172]	; (81019e0 <ConfigGPS+0x1a4>)
 8101932:	f005 fce3 	bl	81072fc <HAL_GPIO_WritePin>
	    }
	    HAL_Delay(100);
 8101936:	2064      	movs	r0, #100	; 0x64
 8101938:	f001 f86c 	bl	8102a14 <HAL_Delay>

	    if(HAL_UART_Transmit_DMA(&huart3, (uint8_t *)UBLOX_GXRMC_OFF, sizeof(UBLOX_GXRMC_OFF)) == HAL_OK)
 810193c:	4b2d      	ldr	r3, [pc, #180]	; (81019f4 <ConfigGPS+0x1b8>)
 810193e:	f107 0450 	add.w	r4, r7, #80	; 0x50
 8101942:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8101944:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8101948:	f107 0350 	add.w	r3, r7, #80	; 0x50
 810194c:	2210      	movs	r2, #16
 810194e:	4619      	mov	r1, r3
 8101950:	4822      	ldr	r0, [pc, #136]	; (81019dc <ConfigGPS+0x1a0>)
 8101952:	f00d fda3 	bl	810f49c <HAL_UART_Transmit_DMA>
 8101956:	4603      	mov	r3, r0
 8101958:	2b00      	cmp	r3, #0
 810195a:	d105      	bne.n	8101968 <ConfigGPS+0x12c>
	    {
	  	  LEDD_ON();
 810195c:	2201      	movs	r2, #1
 810195e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8101962:	481f      	ldr	r0, [pc, #124]	; (81019e0 <ConfigGPS+0x1a4>)
 8101964:	f005 fcca 	bl	81072fc <HAL_GPIO_WritePin>
	    }
	    HAL_Delay(100);
 8101968:	2064      	movs	r0, #100	; 0x64
 810196a:	f001 f853 	bl	8102a14 <HAL_Delay>

	    if(HAL_UART_Transmit_DMA(&huart3, (uint8_t *)UBLOX_GXVTG_OFF, sizeof(UBLOX_GXVTG_OFF)) == HAL_OK)
 810196e:	4b22      	ldr	r3, [pc, #136]	; (81019f8 <ConfigGPS+0x1bc>)
 8101970:	f107 0430 	add.w	r4, r7, #48	; 0x30
 8101974:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8101976:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 810197a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 810197e:	2210      	movs	r2, #16
 8101980:	4619      	mov	r1, r3
 8101982:	4816      	ldr	r0, [pc, #88]	; (81019dc <ConfigGPS+0x1a0>)
 8101984:	f00d fd8a 	bl	810f49c <HAL_UART_Transmit_DMA>
 8101988:	4603      	mov	r3, r0
 810198a:	2b00      	cmp	r3, #0
 810198c:	d105      	bne.n	810199a <ConfigGPS+0x15e>
	    {
	  	  LEDD_ON();
 810198e:	2201      	movs	r2, #1
 8101990:	f44f 7100 	mov.w	r1, #512	; 0x200
 8101994:	4812      	ldr	r0, [pc, #72]	; (81019e0 <ConfigGPS+0x1a4>)
 8101996:	f005 fcb1 	bl	81072fc <HAL_GPIO_WritePin>
	    }
	    HAL_Delay(100);
 810199a:	2064      	movs	r0, #100	; 0x64
 810199c:	f001 f83a 	bl	8102a14 <HAL_Delay>

	    if(HAL_UART_Transmit_DMA(&huart3, (uint8_t *)UBLOX_NAVPVT_ON, sizeof(UBLOX_NAVPVT_ON)) == HAL_OK)
 81019a0:	4b16      	ldr	r3, [pc, #88]	; (81019fc <ConfigGPS+0x1c0>)
 81019a2:	f107 0410 	add.w	r4, r7, #16
 81019a6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 81019a8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 81019ac:	f107 0310 	add.w	r3, r7, #16
 81019b0:	2210      	movs	r2, #16
 81019b2:	4619      	mov	r1, r3
 81019b4:	4809      	ldr	r0, [pc, #36]	; (81019dc <ConfigGPS+0x1a0>)
 81019b6:	f00d fd71 	bl	810f49c <HAL_UART_Transmit_DMA>
 81019ba:	4603      	mov	r3, r0
 81019bc:	2b00      	cmp	r3, #0
 81019be:	d105      	bne.n	81019cc <ConfigGPS+0x190>
	    {
	  	  LEDD_ON();
 81019c0:	2201      	movs	r2, #1
 81019c2:	f44f 7100 	mov.w	r1, #512	; 0x200
 81019c6:	4806      	ldr	r0, [pc, #24]	; (81019e0 <ConfigGPS+0x1a4>)
 81019c8:	f005 fc98 	bl	81072fc <HAL_GPIO_WritePin>
	    }
}
 81019cc:	bf00      	nop
 81019ce:	f507 7782 	add.w	r7, r7, #260	; 0x104
 81019d2:	46bd      	mov	sp, r7
 81019d4:	bd90      	pop	{r4, r7, pc}
 81019d6:	bf00      	nop
 81019d8:	0811b39c 	.word	0x0811b39c
 81019dc:	100054a0 	.word	0x100054a0
 81019e0:	58021400 	.word	0x58021400
 81019e4:	0811b3ac 	.word	0x0811b3ac
 81019e8:	0811b3bc 	.word	0x0811b3bc
 81019ec:	0811b3cc 	.word	0x0811b3cc
 81019f0:	0811b3dc 	.word	0x0811b3dc
 81019f4:	0811b3ec 	.word	0x0811b3ec
 81019f8:	0811b3fc 	.word	0x0811b3fc
 81019fc:	0811b40c 	.word	0x0811b40c

08101a00 <HAL_UART_RxCpltCallback>:


/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8101a00:	b580      	push	{r7, lr}
 8101a02:	b084      	sub	sp, #16
 8101a04:	af00      	add	r7, sp, #0
 8101a06:	6078      	str	r0, [r7, #4]
	static int byte_pos = 0;
	static unsigned char checksum[2];
	const int data_size = sizeof(pvt);
 8101a08:	2360      	movs	r3, #96	; 0x60
 8101a0a:	60fb      	str	r3, [r7, #12]

	if(huart->Instance == USART3)
 8101a0c:	687b      	ldr	r3, [r7, #4]
 8101a0e:	681b      	ldr	r3, [r3, #0]
 8101a10:	4a37      	ldr	r2, [pc, #220]	; (8101af0 <HAL_UART_RxCpltCallback+0xf0>)
 8101a12:	4293      	cmp	r3, r2
 8101a14:	d167      	bne.n	8101ae6 <HAL_UART_RxCpltCallback+0xe6>
	{
		if(byte_pos < 2)
 8101a16:	4b37      	ldr	r3, [pc, #220]	; (8101af4 <HAL_UART_RxCpltCallback+0xf4>)
 8101a18:	681b      	ldr	r3, [r3, #0]
 8101a1a:	2b01      	cmp	r3, #1
 8101a1c:	dc17      	bgt.n	8101a4e <HAL_UART_RxCpltCallback+0x4e>
		{
			if(data_byte[0] == UBX_HEADER[byte_pos])
 8101a1e:	4b36      	ldr	r3, [pc, #216]	; (8101af8 <HAL_UART_RxCpltCallback+0xf8>)
 8101a20:	781a      	ldrb	r2, [r3, #0]
 8101a22:	4b36      	ldr	r3, [pc, #216]	; (8101afc <HAL_UART_RxCpltCallback+0xfc>)
 8101a24:	881b      	ldrh	r3, [r3, #0]
 8101a26:	813b      	strh	r3, [r7, #8]
 8101a28:	4b32      	ldr	r3, [pc, #200]	; (8101af4 <HAL_UART_RxCpltCallback+0xf4>)
 8101a2a:	681b      	ldr	r3, [r3, #0]
 8101a2c:	f107 0110 	add.w	r1, r7, #16
 8101a30:	440b      	add	r3, r1
 8101a32:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 8101a36:	429a      	cmp	r2, r3
 8101a38:	d105      	bne.n	8101a46 <HAL_UART_RxCpltCallback+0x46>
			{
				byte_pos++;
 8101a3a:	4b2e      	ldr	r3, [pc, #184]	; (8101af4 <HAL_UART_RxCpltCallback+0xf4>)
 8101a3c:	681b      	ldr	r3, [r3, #0]
 8101a3e:	3301      	adds	r3, #1
 8101a40:	4a2c      	ldr	r2, [pc, #176]	; (8101af4 <HAL_UART_RxCpltCallback+0xf4>)
 8101a42:	6013      	str	r3, [r2, #0]
		    	  byte_pos = 0;
		      }
		}
	}

}
 8101a44:	e04f      	b.n	8101ae6 <HAL_UART_RxCpltCallback+0xe6>
				byte_pos = 0;
 8101a46:	4b2b      	ldr	r3, [pc, #172]	; (8101af4 <HAL_UART_RxCpltCallback+0xf4>)
 8101a48:	2200      	movs	r2, #0
 8101a4a:	601a      	str	r2, [r3, #0]
}
 8101a4c:	e04b      	b.n	8101ae6 <HAL_UART_RxCpltCallback+0xe6>
			if( (byte_pos-2) < data_size)
 8101a4e:	4b29      	ldr	r3, [pc, #164]	; (8101af4 <HAL_UART_RxCpltCallback+0xf4>)
 8101a50:	681b      	ldr	r3, [r3, #0]
 8101a52:	3b01      	subs	r3, #1
 8101a54:	68fa      	ldr	r2, [r7, #12]
 8101a56:	429a      	cmp	r2, r3
 8101a58:	db07      	blt.n	8101a6a <HAL_UART_RxCpltCallback+0x6a>
				((unsigned char*)(&pvt))[byte_pos-2] = data_byte[0];
 8101a5a:	4b26      	ldr	r3, [pc, #152]	; (8101af4 <HAL_UART_RxCpltCallback+0xf4>)
 8101a5c:	681b      	ldr	r3, [r3, #0]
 8101a5e:	3b02      	subs	r3, #2
 8101a60:	4a27      	ldr	r2, [pc, #156]	; (8101b00 <HAL_UART_RxCpltCallback+0x100>)
 8101a62:	4413      	add	r3, r2
 8101a64:	4a24      	ldr	r2, [pc, #144]	; (8101af8 <HAL_UART_RxCpltCallback+0xf8>)
 8101a66:	7812      	ldrb	r2, [r2, #0]
 8101a68:	701a      	strb	r2, [r3, #0]
			byte_pos++;
 8101a6a:	4b22      	ldr	r3, [pc, #136]	; (8101af4 <HAL_UART_RxCpltCallback+0xf4>)
 8101a6c:	681b      	ldr	r3, [r3, #0]
 8101a6e:	3301      	adds	r3, #1
 8101a70:	4a20      	ldr	r2, [pc, #128]	; (8101af4 <HAL_UART_RxCpltCallback+0xf4>)
 8101a72:	6013      	str	r3, [r2, #0]
			if ( byte_pos == (data_size+2) )
 8101a74:	68fb      	ldr	r3, [r7, #12]
 8101a76:	1c9a      	adds	r2, r3, #2
 8101a78:	4b1e      	ldr	r3, [pc, #120]	; (8101af4 <HAL_UART_RxCpltCallback+0xf4>)
 8101a7a:	681b      	ldr	r3, [r3, #0]
 8101a7c:	429a      	cmp	r2, r3
 8101a7e:	d103      	bne.n	8101a88 <HAL_UART_RxCpltCallback+0x88>
			        calcChecksum(checksum);
 8101a80:	4820      	ldr	r0, [pc, #128]	; (8101b04 <HAL_UART_RxCpltCallback+0x104>)
 8101a82:	f000 fdd3 	bl	810262c <calcChecksum>
}
 8101a86:	e02e      	b.n	8101ae6 <HAL_UART_RxCpltCallback+0xe6>
			else if ( byte_pos == (data_size+3) )
 8101a88:	68fb      	ldr	r3, [r7, #12]
 8101a8a:	1cda      	adds	r2, r3, #3
 8101a8c:	4b19      	ldr	r3, [pc, #100]	; (8101af4 <HAL_UART_RxCpltCallback+0xf4>)
 8101a8e:	681b      	ldr	r3, [r3, #0]
 8101a90:	429a      	cmp	r2, r3
 8101a92:	d109      	bne.n	8101aa8 <HAL_UART_RxCpltCallback+0xa8>
				if ( data_byte[0] != checksum[0] )
 8101a94:	4b18      	ldr	r3, [pc, #96]	; (8101af8 <HAL_UART_RxCpltCallback+0xf8>)
 8101a96:	781a      	ldrb	r2, [r3, #0]
 8101a98:	4b1a      	ldr	r3, [pc, #104]	; (8101b04 <HAL_UART_RxCpltCallback+0x104>)
 8101a9a:	781b      	ldrb	r3, [r3, #0]
 8101a9c:	429a      	cmp	r2, r3
 8101a9e:	d022      	beq.n	8101ae6 <HAL_UART_RxCpltCallback+0xe6>
					byte_pos = 0;
 8101aa0:	4b14      	ldr	r3, [pc, #80]	; (8101af4 <HAL_UART_RxCpltCallback+0xf4>)
 8101aa2:	2200      	movs	r2, #0
 8101aa4:	601a      	str	r2, [r3, #0]
}
 8101aa6:	e01e      	b.n	8101ae6 <HAL_UART_RxCpltCallback+0xe6>
		      else if ( byte_pos == (data_size+4) ) {
 8101aa8:	68fb      	ldr	r3, [r7, #12]
 8101aaa:	1d1a      	adds	r2, r3, #4
 8101aac:	4b11      	ldr	r3, [pc, #68]	; (8101af4 <HAL_UART_RxCpltCallback+0xf4>)
 8101aae:	681b      	ldr	r3, [r3, #0]
 8101ab0:	429a      	cmp	r2, r3
 8101ab2:	d10f      	bne.n	8101ad4 <HAL_UART_RxCpltCallback+0xd4>
		    	  byte_pos = 0;
 8101ab4:	4b0f      	ldr	r3, [pc, #60]	; (8101af4 <HAL_UART_RxCpltCallback+0xf4>)
 8101ab6:	2200      	movs	r2, #0
 8101ab8:	601a      	str	r2, [r3, #0]
		        if ( data_byte[0] == checksum[1] ) {
 8101aba:	4b0f      	ldr	r3, [pc, #60]	; (8101af8 <HAL_UART_RxCpltCallback+0xf8>)
 8101abc:	781a      	ldrb	r2, [r3, #0]
 8101abe:	4b11      	ldr	r3, [pc, #68]	; (8101b04 <HAL_UART_RxCpltCallback+0x104>)
 8101ac0:	785b      	ldrb	r3, [r3, #1]
 8101ac2:	429a      	cmp	r2, r3
 8101ac4:	d10f      	bne.n	8101ae6 <HAL_UART_RxCpltCallback+0xe6>
		        	LEDB_ON();
 8101ac6:	2201      	movs	r2, #1
 8101ac8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8101acc:	480e      	ldr	r0, [pc, #56]	; (8101b08 <HAL_UART_RxCpltCallback+0x108>)
 8101ace:	f005 fc15 	bl	81072fc <HAL_GPIO_WritePin>
}
 8101ad2:	e008      	b.n	8101ae6 <HAL_UART_RxCpltCallback+0xe6>
		      else if ( byte_pos > (data_size+4) ) {
 8101ad4:	68fb      	ldr	r3, [r7, #12]
 8101ad6:	1d1a      	adds	r2, r3, #4
 8101ad8:	4b06      	ldr	r3, [pc, #24]	; (8101af4 <HAL_UART_RxCpltCallback+0xf4>)
 8101ada:	681b      	ldr	r3, [r3, #0]
 8101adc:	429a      	cmp	r2, r3
 8101ade:	da02      	bge.n	8101ae6 <HAL_UART_RxCpltCallback+0xe6>
		    	  byte_pos = 0;
 8101ae0:	4b04      	ldr	r3, [pc, #16]	; (8101af4 <HAL_UART_RxCpltCallback+0xf4>)
 8101ae2:	2200      	movs	r2, #0
 8101ae4:	601a      	str	r2, [r3, #0]
}
 8101ae6:	bf00      	nop
 8101ae8:	3710      	adds	r7, #16
 8101aea:	46bd      	mov	sp, r7
 8101aec:	bd80      	pop	{r7, pc}
 8101aee:	bf00      	nop
 8101af0:	40004800 	.word	0x40004800
 8101af4:	10000378 	.word	0x10000378
 8101af8:	10000374 	.word	0x10000374
 8101afc:	0811b41c 	.word	0x0811b41c
 8101b00:	10005138 	.word	0x10005138
 8101b04:	1000037c 	.word	0x1000037c
 8101b08:	58021000 	.word	0x58021000

08101b0c <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8101b0c:	b580      	push	{r7, lr}
 8101b0e:	b082      	sub	sp, #8
 8101b10:	af00      	add	r7, sp, #0
 8101b12:	6078      	str	r0, [r7, #4]
   if(huart->Instance == USART3)
 8101b14:	687b      	ldr	r3, [r7, #4]
 8101b16:	681b      	ldr	r3, [r3, #0]
 8101b18:	4a05      	ldr	r2, [pc, #20]	; (8101b30 <HAL_UART_TxCpltCallback+0x24>)
 8101b1a:	4293      	cmp	r3, r2
 8101b1c:	d104      	bne.n	8101b28 <HAL_UART_TxCpltCallback+0x1c>
	 {
	   LEDA_ON();
 8101b1e:	2201      	movs	r2, #1
 8101b20:	2180      	movs	r1, #128	; 0x80
 8101b22:	4804      	ldr	r0, [pc, #16]	; (8101b34 <HAL_UART_TxCpltCallback+0x28>)
 8101b24:	f005 fbea 	bl	81072fc <HAL_GPIO_WritePin>
	 }
}
 8101b28:	bf00      	nop
 8101b2a:	3708      	adds	r7, #8
 8101b2c:	46bd      	mov	sp, r7
 8101b2e:	bd80      	pop	{r7, pc}
 8101b30:	40004800 	.word	0x40004800
 8101b34:	58021000 	.word	0x58021000

08101b38 <HAL_UART_ErrorCallback>:



void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8101b38:	b480      	push	{r7}
 8101b3a:	b083      	sub	sp, #12
 8101b3c:	af00      	add	r7, sp, #0
 8101b3e:	6078      	str	r0, [r7, #4]
  /* Initialization Error */


}
 8101b40:	bf00      	nop
 8101b42:	370c      	adds	r7, #12
 8101b44:	46bd      	mov	sp, r7
 8101b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101b4a:	4770      	bx	lr

08101b4c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8101b4c:	b580      	push	{r7, lr}
 8101b4e:	b082      	sub	sp, #8
 8101b50:	af00      	add	r7, sp, #0
 8101b52:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 8101b54:	687b      	ldr	r3, [r7, #4]
 8101b56:	681b      	ldr	r3, [r3, #0]
 8101b58:	4a04      	ldr	r2, [pc, #16]	; (8101b6c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8101b5a:	4293      	cmp	r3, r2
 8101b5c:	d101      	bne.n	8101b62 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8101b5e:	f000 ff39 	bl	81029d4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8101b62:	bf00      	nop
 8101b64:	3708      	adds	r7, #8
 8101b66:	46bd      	mov	sp, r7
 8101b68:	bd80      	pop	{r7, pc}
 8101b6a:	bf00      	nop
 8101b6c:	40001400 	.word	0x40001400

08101b70 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8101b70:	b480      	push	{r7}
 8101b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8101b74:	bf00      	nop
 8101b76:	46bd      	mov	sp, r7
 8101b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101b7c:	4770      	bx	lr
	...

08101b80 <MX_SDMMC1_SD_Init>:
SD_HandleTypeDef hsd1;

/* SDMMC1 init function */

void MX_SDMMC1_SD_Init(void)
{
 8101b80:	b580      	push	{r7, lr}
 8101b82:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8101b84:	4b0f      	ldr	r3, [pc, #60]	; (8101bc4 <MX_SDMMC1_SD_Init+0x44>)
 8101b86:	4a10      	ldr	r2, [pc, #64]	; (8101bc8 <MX_SDMMC1_SD_Init+0x48>)
 8101b88:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8101b8a:	4b0e      	ldr	r3, [pc, #56]	; (8101bc4 <MX_SDMMC1_SD_Init+0x44>)
 8101b8c:	2200      	movs	r2, #0
 8101b8e:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8101b90:	4b0c      	ldr	r3, [pc, #48]	; (8101bc4 <MX_SDMMC1_SD_Init+0x44>)
 8101b92:	2200      	movs	r2, #0
 8101b94:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8101b96:	4b0b      	ldr	r3, [pc, #44]	; (8101bc4 <MX_SDMMC1_SD_Init+0x44>)
 8101b98:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8101b9c:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8101b9e:	4b09      	ldr	r3, [pc, #36]	; (8101bc4 <MX_SDMMC1_SD_Init+0x44>)
 8101ba0:	2200      	movs	r2, #0
 8101ba2:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 4;
 8101ba4:	4b07      	ldr	r3, [pc, #28]	; (8101bc4 <MX_SDMMC1_SD_Init+0x44>)
 8101ba6:	2204      	movs	r2, #4
 8101ba8:	615a      	str	r2, [r3, #20]
  hsd1.Init.TranceiverPresent = SDMMC_TRANSCEIVER_NOT_PRESENT;
 8101baa:	4b06      	ldr	r3, [pc, #24]	; (8101bc4 <MX_SDMMC1_SD_Init+0x44>)
 8101bac:	2201      	movs	r2, #1
 8101bae:	619a      	str	r2, [r3, #24]
  if (HAL_SD_Init(&hsd1) != HAL_OK)
 8101bb0:	4804      	ldr	r0, [pc, #16]	; (8101bc4 <MX_SDMMC1_SD_Init+0x44>)
 8101bb2:	f00a f9d7 	bl	810bf64 <HAL_SD_Init>
 8101bb6:	4603      	mov	r3, r0
 8101bb8:	2b00      	cmp	r3, #0
 8101bba:	d001      	beq.n	8101bc0 <MX_SDMMC1_SD_Init+0x40>
  {
    Error_Handler();
 8101bbc:	f7ff ffd8 	bl	8101b70 <Error_Handler>
  }
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8101bc0:	bf00      	nop
 8101bc2:	bd80      	pop	{r7, pc}
 8101bc4:	10005198 	.word	0x10005198
 8101bc8:	52007000 	.word	0x52007000

08101bcc <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 8101bcc:	b580      	push	{r7, lr}
 8101bce:	b0ba      	sub	sp, #232	; 0xe8
 8101bd0:	af00      	add	r7, sp, #0
 8101bd2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8101bd4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8101bd8:	2200      	movs	r2, #0
 8101bda:	601a      	str	r2, [r3, #0]
 8101bdc:	605a      	str	r2, [r3, #4]
 8101bde:	609a      	str	r2, [r3, #8]
 8101be0:	60da      	str	r2, [r3, #12]
 8101be2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8101be4:	f107 0318 	add.w	r3, r7, #24
 8101be8:	22bc      	movs	r2, #188	; 0xbc
 8101bea:	2100      	movs	r1, #0
 8101bec:	4618      	mov	r0, r3
 8101bee:	f016 fef9 	bl	81189e4 <memset>
  if(sdHandle->Instance==SDMMC1)
 8101bf2:	687b      	ldr	r3, [r7, #4]
 8101bf4:	681b      	ldr	r3, [r3, #0]
 8101bf6:	4a3b      	ldr	r2, [pc, #236]	; (8101ce4 <HAL_SD_MspInit+0x118>)
 8101bf8:	4293      	cmp	r3, r2
 8101bfa:	d16e      	bne.n	8101cda <HAL_SD_MspInit+0x10e>
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 8101bfc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8101c00:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 8101c02:	2300      	movs	r3, #0
 8101c04:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8101c06:	f107 0318 	add.w	r3, r7, #24
 8101c0a:	4618      	mov	r0, r3
 8101c0c:	f008 f824 	bl	8109c58 <HAL_RCCEx_PeriphCLKConfig>
 8101c10:	4603      	mov	r3, r0
 8101c12:	2b00      	cmp	r3, #0
 8101c14:	d001      	beq.n	8101c1a <HAL_SD_MspInit+0x4e>
    {
      Error_Handler();
 8101c16:	f7ff ffab 	bl	8101b70 <Error_Handler>
    }

    /* SDMMC1 clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8101c1a:	4b33      	ldr	r3, [pc, #204]	; (8101ce8 <HAL_SD_MspInit+0x11c>)
 8101c1c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8101c20:	4a31      	ldr	r2, [pc, #196]	; (8101ce8 <HAL_SD_MspInit+0x11c>)
 8101c22:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8101c26:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8101c2a:	4b2f      	ldr	r3, [pc, #188]	; (8101ce8 <HAL_SD_MspInit+0x11c>)
 8101c2c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8101c30:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8101c34:	617b      	str	r3, [r7, #20]
 8101c36:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8101c38:	4b2b      	ldr	r3, [pc, #172]	; (8101ce8 <HAL_SD_MspInit+0x11c>)
 8101c3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101c3e:	4a2a      	ldr	r2, [pc, #168]	; (8101ce8 <HAL_SD_MspInit+0x11c>)
 8101c40:	f043 0304 	orr.w	r3, r3, #4
 8101c44:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101c48:	4b27      	ldr	r3, [pc, #156]	; (8101ce8 <HAL_SD_MspInit+0x11c>)
 8101c4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101c4e:	f003 0304 	and.w	r3, r3, #4
 8101c52:	613b      	str	r3, [r7, #16]
 8101c54:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8101c56:	4b24      	ldr	r3, [pc, #144]	; (8101ce8 <HAL_SD_MspInit+0x11c>)
 8101c58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101c5c:	4a22      	ldr	r2, [pc, #136]	; (8101ce8 <HAL_SD_MspInit+0x11c>)
 8101c5e:	f043 0308 	orr.w	r3, r3, #8
 8101c62:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101c66:	4b20      	ldr	r3, [pc, #128]	; (8101ce8 <HAL_SD_MspInit+0x11c>)
 8101c68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101c6c:	f003 0308 	and.w	r3, r3, #8
 8101c70:	60fb      	str	r3, [r7, #12]
 8101c72:	68fb      	ldr	r3, [r7, #12]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8101c74:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8101c78:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101c7c:	2302      	movs	r3, #2
 8101c7e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101c82:	2300      	movs	r3, #0
 8101c84:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8101c88:	2303      	movs	r3, #3
 8101c8a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8101c8e:	230c      	movs	r3, #12
 8101c90:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8101c94:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8101c98:	4619      	mov	r1, r3
 8101c9a:	4814      	ldr	r0, [pc, #80]	; (8101cec <HAL_SD_MspInit+0x120>)
 8101c9c:	f005 f97e 	bl	8106f9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8101ca0:	2304      	movs	r3, #4
 8101ca2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101ca6:	2302      	movs	r3, #2
 8101ca8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101cac:	2300      	movs	r3, #0
 8101cae:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8101cb2:	2303      	movs	r3, #3
 8101cb4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8101cb8:	230c      	movs	r3, #12
 8101cba:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8101cbe:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8101cc2:	4619      	mov	r1, r3
 8101cc4:	480a      	ldr	r0, [pc, #40]	; (8101cf0 <HAL_SD_MspInit+0x124>)
 8101cc6:	f005 f969 	bl	8106f9c <HAL_GPIO_Init>

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 5, 0);
 8101cca:	2200      	movs	r2, #0
 8101ccc:	2105      	movs	r1, #5
 8101cce:	2031      	movs	r0, #49	; 0x31
 8101cd0:	f002 fae2 	bl	8104298 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 8101cd4:	2031      	movs	r0, #49	; 0x31
 8101cd6:	f002 faf9 	bl	81042cc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }
}
 8101cda:	bf00      	nop
 8101cdc:	37e8      	adds	r7, #232	; 0xe8
 8101cde:	46bd      	mov	sp, r7
 8101ce0:	bd80      	pop	{r7, pc}
 8101ce2:	bf00      	nop
 8101ce4:	52007000 	.word	0x52007000
 8101ce8:	58024400 	.word	0x58024400
 8101cec:	58020800 	.word	0x58020800
 8101cf0:	58020c00 	.word	0x58020c00

08101cf4 <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi1_rx;
DMA_HandleTypeDef hdma_spi1_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8101cf4:	b580      	push	{r7, lr}
 8101cf6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8101cf8:	4b27      	ldr	r3, [pc, #156]	; (8101d98 <MX_SPI1_Init+0xa4>)
 8101cfa:	4a28      	ldr	r2, [pc, #160]	; (8101d9c <MX_SPI1_Init+0xa8>)
 8101cfc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8101cfe:	4b26      	ldr	r3, [pc, #152]	; (8101d98 <MX_SPI1_Init+0xa4>)
 8101d00:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8101d04:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8101d06:	4b24      	ldr	r3, [pc, #144]	; (8101d98 <MX_SPI1_Init+0xa4>)
 8101d08:	2200      	movs	r2, #0
 8101d0a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8101d0c:	4b22      	ldr	r3, [pc, #136]	; (8101d98 <MX_SPI1_Init+0xa4>)
 8101d0e:	2207      	movs	r2, #7
 8101d10:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8101d12:	4b21      	ldr	r3, [pc, #132]	; (8101d98 <MX_SPI1_Init+0xa4>)
 8101d14:	2200      	movs	r2, #0
 8101d16:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8101d18:	4b1f      	ldr	r3, [pc, #124]	; (8101d98 <MX_SPI1_Init+0xa4>)
 8101d1a:	2200      	movs	r2, #0
 8101d1c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8101d1e:	4b1e      	ldr	r3, [pc, #120]	; (8101d98 <MX_SPI1_Init+0xa4>)
 8101d20:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8101d24:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8101d26:	4b1c      	ldr	r3, [pc, #112]	; (8101d98 <MX_SPI1_Init+0xa4>)
 8101d28:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 8101d2c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8101d2e:	4b1a      	ldr	r3, [pc, #104]	; (8101d98 <MX_SPI1_Init+0xa4>)
 8101d30:	2200      	movs	r2, #0
 8101d32:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8101d34:	4b18      	ldr	r3, [pc, #96]	; (8101d98 <MX_SPI1_Init+0xa4>)
 8101d36:	2200      	movs	r2, #0
 8101d38:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8101d3a:	4b17      	ldr	r3, [pc, #92]	; (8101d98 <MX_SPI1_Init+0xa4>)
 8101d3c:	2200      	movs	r2, #0
 8101d3e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8101d40:	4b15      	ldr	r3, [pc, #84]	; (8101d98 <MX_SPI1_Init+0xa4>)
 8101d42:	2200      	movs	r2, #0
 8101d44:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8101d46:	4b14      	ldr	r3, [pc, #80]	; (8101d98 <MX_SPI1_Init+0xa4>)
 8101d48:	2200      	movs	r2, #0
 8101d4a:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8101d4c:	4b12      	ldr	r3, [pc, #72]	; (8101d98 <MX_SPI1_Init+0xa4>)
 8101d4e:	2200      	movs	r2, #0
 8101d50:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8101d52:	4b11      	ldr	r3, [pc, #68]	; (8101d98 <MX_SPI1_Init+0xa4>)
 8101d54:	2200      	movs	r2, #0
 8101d56:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8101d58:	4b0f      	ldr	r3, [pc, #60]	; (8101d98 <MX_SPI1_Init+0xa4>)
 8101d5a:	2200      	movs	r2, #0
 8101d5c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8101d5e:	4b0e      	ldr	r3, [pc, #56]	; (8101d98 <MX_SPI1_Init+0xa4>)
 8101d60:	2200      	movs	r2, #0
 8101d62:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8101d64:	4b0c      	ldr	r3, [pc, #48]	; (8101d98 <MX_SPI1_Init+0xa4>)
 8101d66:	2200      	movs	r2, #0
 8101d68:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8101d6a:	4b0b      	ldr	r3, [pc, #44]	; (8101d98 <MX_SPI1_Init+0xa4>)
 8101d6c:	2200      	movs	r2, #0
 8101d6e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8101d70:	4b09      	ldr	r3, [pc, #36]	; (8101d98 <MX_SPI1_Init+0xa4>)
 8101d72:	2200      	movs	r2, #0
 8101d74:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8101d76:	4b08      	ldr	r3, [pc, #32]	; (8101d98 <MX_SPI1_Init+0xa4>)
 8101d78:	2200      	movs	r2, #0
 8101d7a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8101d7c:	4b06      	ldr	r3, [pc, #24]	; (8101d98 <MX_SPI1_Init+0xa4>)
 8101d7e:	2200      	movs	r2, #0
 8101d80:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8101d82:	4805      	ldr	r0, [pc, #20]	; (8101d98 <MX_SPI1_Init+0xa4>)
 8101d84:	f00b fdca 	bl	810d91c <HAL_SPI_Init>
 8101d88:	4603      	mov	r3, r0
 8101d8a:	2b00      	cmp	r3, #0
 8101d8c:	d001      	beq.n	8101d92 <MX_SPI1_Init+0x9e>
  {
    Error_Handler();
 8101d8e:	f7ff feef 	bl	8101b70 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8101d92:	bf00      	nop
 8101d94:	bd80      	pop	{r7, pc}
 8101d96:	bf00      	nop
 8101d98:	10005218 	.word	0x10005218
 8101d9c:	40013000 	.word	0x40013000

08101da0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8101da0:	b580      	push	{r7, lr}
 8101da2:	b0b8      	sub	sp, #224	; 0xe0
 8101da4:	af00      	add	r7, sp, #0
 8101da6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8101da8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8101dac:	2200      	movs	r2, #0
 8101dae:	601a      	str	r2, [r3, #0]
 8101db0:	605a      	str	r2, [r3, #4]
 8101db2:	609a      	str	r2, [r3, #8]
 8101db4:	60da      	str	r2, [r3, #12]
 8101db6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8101db8:	f107 0310 	add.w	r3, r7, #16
 8101dbc:	22bc      	movs	r2, #188	; 0xbc
 8101dbe:	2100      	movs	r1, #0
 8101dc0:	4618      	mov	r0, r3
 8101dc2:	f016 fe0f 	bl	81189e4 <memset>
  if(spiHandle->Instance==SPI1)
 8101dc6:	687b      	ldr	r3, [r7, #4]
 8101dc8:	681b      	ldr	r3, [r3, #0]
 8101dca:	4a57      	ldr	r2, [pc, #348]	; (8101f28 <HAL_SPI_MspInit+0x188>)
 8101dcc:	4293      	cmp	r3, r2
 8101dce:	f040 80a7 	bne.w	8101f20 <HAL_SPI_MspInit+0x180>
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8101dd2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8101dd6:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8101dd8:	2300      	movs	r3, #0
 8101dda:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8101ddc:	f107 0310 	add.w	r3, r7, #16
 8101de0:	4618      	mov	r0, r3
 8101de2:	f007 ff39 	bl	8109c58 <HAL_RCCEx_PeriphCLKConfig>
 8101de6:	4603      	mov	r3, r0
 8101de8:	2b00      	cmp	r3, #0
 8101dea:	d001      	beq.n	8101df0 <HAL_SPI_MspInit+0x50>
    {
      Error_Handler();
 8101dec:	f7ff fec0 	bl	8101b70 <Error_Handler>
    }

    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8101df0:	4b4e      	ldr	r3, [pc, #312]	; (8101f2c <HAL_SPI_MspInit+0x18c>)
 8101df2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8101df6:	4a4d      	ldr	r2, [pc, #308]	; (8101f2c <HAL_SPI_MspInit+0x18c>)
 8101df8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8101dfc:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8101e00:	4b4a      	ldr	r3, [pc, #296]	; (8101f2c <HAL_SPI_MspInit+0x18c>)
 8101e02:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8101e06:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8101e0a:	60fb      	str	r3, [r7, #12]
 8101e0c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8101e0e:	4b47      	ldr	r3, [pc, #284]	; (8101f2c <HAL_SPI_MspInit+0x18c>)
 8101e10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101e14:	4a45      	ldr	r2, [pc, #276]	; (8101f2c <HAL_SPI_MspInit+0x18c>)
 8101e16:	f043 0301 	orr.w	r3, r3, #1
 8101e1a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101e1e:	4b43      	ldr	r3, [pc, #268]	; (8101f2c <HAL_SPI_MspInit+0x18c>)
 8101e20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101e24:	f003 0301 	and.w	r3, r3, #1
 8101e28:	60bb      	str	r3, [r7, #8]
 8101e2a:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8101e2c:	23e0      	movs	r3, #224	; 0xe0
 8101e2e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101e32:	2302      	movs	r3, #2
 8101e34:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101e38:	2300      	movs	r3, #0
 8101e3a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101e3e:	2300      	movs	r3, #0
 8101e40:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8101e44:	2305      	movs	r3, #5
 8101e46:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8101e4a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8101e4e:	4619      	mov	r1, r3
 8101e50:	4837      	ldr	r0, [pc, #220]	; (8101f30 <HAL_SPI_MspInit+0x190>)
 8101e52:	f005 f8a3 	bl	8106f9c <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Stream0;
 8101e56:	4b37      	ldr	r3, [pc, #220]	; (8101f34 <HAL_SPI_MspInit+0x194>)
 8101e58:	4a37      	ldr	r2, [pc, #220]	; (8101f38 <HAL_SPI_MspInit+0x198>)
 8101e5a:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 8101e5c:	4b35      	ldr	r3, [pc, #212]	; (8101f34 <HAL_SPI_MspInit+0x194>)
 8101e5e:	2225      	movs	r2, #37	; 0x25
 8101e60:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8101e62:	4b34      	ldr	r3, [pc, #208]	; (8101f34 <HAL_SPI_MspInit+0x194>)
 8101e64:	2200      	movs	r2, #0
 8101e66:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8101e68:	4b32      	ldr	r3, [pc, #200]	; (8101f34 <HAL_SPI_MspInit+0x194>)
 8101e6a:	2200      	movs	r2, #0
 8101e6c:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8101e6e:	4b31      	ldr	r3, [pc, #196]	; (8101f34 <HAL_SPI_MspInit+0x194>)
 8101e70:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8101e74:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8101e76:	4b2f      	ldr	r3, [pc, #188]	; (8101f34 <HAL_SPI_MspInit+0x194>)
 8101e78:	2200      	movs	r2, #0
 8101e7a:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8101e7c:	4b2d      	ldr	r3, [pc, #180]	; (8101f34 <HAL_SPI_MspInit+0x194>)
 8101e7e:	2200      	movs	r2, #0
 8101e80:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_CIRCULAR;
 8101e82:	4b2c      	ldr	r3, [pc, #176]	; (8101f34 <HAL_SPI_MspInit+0x194>)
 8101e84:	f44f 7280 	mov.w	r2, #256	; 0x100
 8101e88:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8101e8a:	4b2a      	ldr	r3, [pc, #168]	; (8101f34 <HAL_SPI_MspInit+0x194>)
 8101e8c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8101e90:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8101e92:	4b28      	ldr	r3, [pc, #160]	; (8101f34 <HAL_SPI_MspInit+0x194>)
 8101e94:	2200      	movs	r2, #0
 8101e96:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8101e98:	4826      	ldr	r0, [pc, #152]	; (8101f34 <HAL_SPI_MspInit+0x194>)
 8101e9a:	f002 fa39 	bl	8104310 <HAL_DMA_Init>
 8101e9e:	4603      	mov	r3, r0
 8101ea0:	2b00      	cmp	r3, #0
 8101ea2:	d001      	beq.n	8101ea8 <HAL_SPI_MspInit+0x108>
    {
      Error_Handler();
 8101ea4:	f7ff fe64 	bl	8101b70 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 8101ea8:	687b      	ldr	r3, [r7, #4]
 8101eaa:	4a22      	ldr	r2, [pc, #136]	; (8101f34 <HAL_SPI_MspInit+0x194>)
 8101eac:	67da      	str	r2, [r3, #124]	; 0x7c
 8101eae:	4a21      	ldr	r2, [pc, #132]	; (8101f34 <HAL_SPI_MspInit+0x194>)
 8101eb0:	687b      	ldr	r3, [r7, #4]
 8101eb2:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Stream1;
 8101eb4:	4b21      	ldr	r3, [pc, #132]	; (8101f3c <HAL_SPI_MspInit+0x19c>)
 8101eb6:	4a22      	ldr	r2, [pc, #136]	; (8101f40 <HAL_SPI_MspInit+0x1a0>)
 8101eb8:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 8101eba:	4b20      	ldr	r3, [pc, #128]	; (8101f3c <HAL_SPI_MspInit+0x19c>)
 8101ebc:	2226      	movs	r2, #38	; 0x26
 8101ebe:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8101ec0:	4b1e      	ldr	r3, [pc, #120]	; (8101f3c <HAL_SPI_MspInit+0x19c>)
 8101ec2:	2240      	movs	r2, #64	; 0x40
 8101ec4:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8101ec6:	4b1d      	ldr	r3, [pc, #116]	; (8101f3c <HAL_SPI_MspInit+0x19c>)
 8101ec8:	2200      	movs	r2, #0
 8101eca:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8101ecc:	4b1b      	ldr	r3, [pc, #108]	; (8101f3c <HAL_SPI_MspInit+0x19c>)
 8101ece:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8101ed2:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8101ed4:	4b19      	ldr	r3, [pc, #100]	; (8101f3c <HAL_SPI_MspInit+0x19c>)
 8101ed6:	2200      	movs	r2, #0
 8101ed8:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8101eda:	4b18      	ldr	r3, [pc, #96]	; (8101f3c <HAL_SPI_MspInit+0x19c>)
 8101edc:	2200      	movs	r2, #0
 8101ede:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8101ee0:	4b16      	ldr	r3, [pc, #88]	; (8101f3c <HAL_SPI_MspInit+0x19c>)
 8101ee2:	2200      	movs	r2, #0
 8101ee4:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8101ee6:	4b15      	ldr	r3, [pc, #84]	; (8101f3c <HAL_SPI_MspInit+0x19c>)
 8101ee8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8101eec:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8101eee:	4b13      	ldr	r3, [pc, #76]	; (8101f3c <HAL_SPI_MspInit+0x19c>)
 8101ef0:	2200      	movs	r2, #0
 8101ef2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8101ef4:	4811      	ldr	r0, [pc, #68]	; (8101f3c <HAL_SPI_MspInit+0x19c>)
 8101ef6:	f002 fa0b 	bl	8104310 <HAL_DMA_Init>
 8101efa:	4603      	mov	r3, r0
 8101efc:	2b00      	cmp	r3, #0
 8101efe:	d001      	beq.n	8101f04 <HAL_SPI_MspInit+0x164>
    {
      Error_Handler();
 8101f00:	f7ff fe36 	bl	8101b70 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 8101f04:	687b      	ldr	r3, [r7, #4]
 8101f06:	4a0d      	ldr	r2, [pc, #52]	; (8101f3c <HAL_SPI_MspInit+0x19c>)
 8101f08:	679a      	str	r2, [r3, #120]	; 0x78
 8101f0a:	4a0c      	ldr	r2, [pc, #48]	; (8101f3c <HAL_SPI_MspInit+0x19c>)
 8101f0c:	687b      	ldr	r3, [r7, #4]
 8101f0e:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 8101f10:	2200      	movs	r2, #0
 8101f12:	2105      	movs	r1, #5
 8101f14:	2023      	movs	r0, #35	; 0x23
 8101f16:	f002 f9bf 	bl	8104298 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8101f1a:	2023      	movs	r0, #35	; 0x23
 8101f1c:	f002 f9d6 	bl	81042cc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8101f20:	bf00      	nop
 8101f22:	37e0      	adds	r7, #224	; 0xe0
 8101f24:	46bd      	mov	sp, r7
 8101f26:	bd80      	pop	{r7, pc}
 8101f28:	40013000 	.word	0x40013000
 8101f2c:	58024400 	.word	0x58024400
 8101f30:	58020000 	.word	0x58020000
 8101f34:	100052a0 	.word	0x100052a0
 8101f38:	40020010 	.word	0x40020010
 8101f3c:	10005318 	.word	0x10005318
 8101f40:	40020028 	.word	0x40020028

08101f44 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8101f44:	b580      	push	{r7, lr}
 8101f46:	b082      	sub	sp, #8
 8101f48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8101f4a:	4b14      	ldr	r3, [pc, #80]	; (8101f9c <HAL_MspInit+0x58>)
 8101f4c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8101f50:	4a12      	ldr	r2, [pc, #72]	; (8101f9c <HAL_MspInit+0x58>)
 8101f52:	f043 0302 	orr.w	r3, r3, #2
 8101f56:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8101f5a:	4b10      	ldr	r3, [pc, #64]	; (8101f9c <HAL_MspInit+0x58>)
 8101f5c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8101f60:	f003 0302 	and.w	r3, r3, #2
 8101f64:	607b      	str	r3, [r7, #4]
 8101f66:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8101f68:	2200      	movs	r2, #0
 8101f6a:	210f      	movs	r1, #15
 8101f6c:	f06f 0001 	mvn.w	r0, #1
 8101f70:	f002 f992 	bl	8104298 <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* CM7_SEV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(CM7_SEV_IRQn, 5, 0);
 8101f74:	2200      	movs	r2, #0
 8101f76:	2105      	movs	r1, #5
 8101f78:	2040      	movs	r0, #64	; 0x40
 8101f7a:	f002 f98d 	bl	8104298 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CM7_SEV_IRQn);
 8101f7e:	2040      	movs	r0, #64	; 0x40
 8101f80:	f002 f9a4 	bl	81042cc <HAL_NVIC_EnableIRQ>
  /* HSEM2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM2_IRQn, 5, 0);
 8101f84:	2200      	movs	r2, #0
 8101f86:	2105      	movs	r1, #5
 8101f88:	207e      	movs	r0, #126	; 0x7e
 8101f8a:	f002 f985 	bl	8104298 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM2_IRQn);
 8101f8e:	207e      	movs	r0, #126	; 0x7e
 8101f90:	f002 f99c 	bl	81042cc <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8101f94:	bf00      	nop
 8101f96:	3708      	adds	r7, #8
 8101f98:	46bd      	mov	sp, r7
 8101f9a:	bd80      	pop	{r7, pc}
 8101f9c:	58024400 	.word	0x58024400

08101fa0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8101fa0:	b580      	push	{r7, lr}
 8101fa2:	b090      	sub	sp, #64	; 0x40
 8101fa4:	af00      	add	r7, sp, #0
 8101fa6:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM7 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8101fa8:	687b      	ldr	r3, [r7, #4]
 8101faa:	2b0f      	cmp	r3, #15
 8101fac:	d827      	bhi.n	8101ffe <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority ,0U);
 8101fae:	2200      	movs	r2, #0
 8101fb0:	6879      	ldr	r1, [r7, #4]
 8101fb2:	2037      	movs	r0, #55	; 0x37
 8101fb4:	f002 f970 	bl	8104298 <HAL_NVIC_SetPriority>

  /* Enable the TIM7 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8101fb8:	2037      	movs	r0, #55	; 0x37
 8101fba:	f002 f987 	bl	81042cc <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8101fbe:	4a29      	ldr	r2, [pc, #164]	; (8102064 <HAL_InitTick+0xc4>)
 8101fc0:	687b      	ldr	r3, [r7, #4]
 8101fc2:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8101fc4:	4b28      	ldr	r3, [pc, #160]	; (8102068 <HAL_InitTick+0xc8>)
 8101fc6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8101fca:	4a27      	ldr	r2, [pc, #156]	; (8102068 <HAL_InitTick+0xc8>)
 8101fcc:	f043 0320 	orr.w	r3, r3, #32
 8101fd0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8101fd4:	4b24      	ldr	r3, [pc, #144]	; (8102068 <HAL_InitTick+0xc8>)
 8101fd6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8101fda:	f003 0320 	and.w	r3, r3, #32
 8101fde:	60fb      	str	r3, [r7, #12]
 8101fe0:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8101fe2:	f107 0210 	add.w	r2, r7, #16
 8101fe6:	f107 0314 	add.w	r3, r7, #20
 8101fea:	4611      	mov	r1, r2
 8101fec:	4618      	mov	r0, r3
 8101fee:	f007 fdf1 	bl	8109bd4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8101ff2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8101ff4:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM7 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8101ff6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8101ff8:	2b00      	cmp	r3, #0
 8101ffa:	d106      	bne.n	810200a <HAL_InitTick+0x6a>
 8101ffc:	e001      	b.n	8102002 <HAL_InitTick+0x62>
    return HAL_ERROR;
 8101ffe:	2301      	movs	r3, #1
 8102000:	e02b      	b.n	810205a <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8102002:	f007 fdbb 	bl	8109b7c <HAL_RCC_GetPCLK1Freq>
 8102006:	63f8      	str	r0, [r7, #60]	; 0x3c
 8102008:	e004      	b.n	8102014 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 810200a:	f007 fdb7 	bl	8109b7c <HAL_RCC_GetPCLK1Freq>
 810200e:	4603      	mov	r3, r0
 8102010:	005b      	lsls	r3, r3, #1
 8102012:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8102014:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8102016:	4a15      	ldr	r2, [pc, #84]	; (810206c <HAL_InitTick+0xcc>)
 8102018:	fba2 2303 	umull	r2, r3, r2, r3
 810201c:	0c9b      	lsrs	r3, r3, #18
 810201e:	3b01      	subs	r3, #1
 8102020:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 8102022:	4b13      	ldr	r3, [pc, #76]	; (8102070 <HAL_InitTick+0xd0>)
 8102024:	4a13      	ldr	r2, [pc, #76]	; (8102074 <HAL_InitTick+0xd4>)
 8102026:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 8102028:	4b11      	ldr	r3, [pc, #68]	; (8102070 <HAL_InitTick+0xd0>)
 810202a:	f240 32e7 	movw	r2, #999	; 0x3e7
 810202e:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 8102030:	4a0f      	ldr	r2, [pc, #60]	; (8102070 <HAL_InitTick+0xd0>)
 8102032:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8102034:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 8102036:	4b0e      	ldr	r3, [pc, #56]	; (8102070 <HAL_InitTick+0xd0>)
 8102038:	2200      	movs	r2, #0
 810203a:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 810203c:	4b0c      	ldr	r3, [pc, #48]	; (8102070 <HAL_InitTick+0xd0>)
 810203e:	2200      	movs	r2, #0
 8102040:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim7) == HAL_OK)
 8102042:	480b      	ldr	r0, [pc, #44]	; (8102070 <HAL_InitTick+0xd0>)
 8102044:	f00c f83f 	bl	810e0c6 <HAL_TIM_Base_Init>
 8102048:	4603      	mov	r3, r0
 810204a:	2b00      	cmp	r3, #0
 810204c:	d104      	bne.n	8102058 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim7);
 810204e:	4808      	ldr	r0, [pc, #32]	; (8102070 <HAL_InitTick+0xd0>)
 8102050:	f00c f890 	bl	810e174 <HAL_TIM_Base_Start_IT>
 8102054:	4603      	mov	r3, r0
 8102056:	e000      	b.n	810205a <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8102058:	2301      	movs	r3, #1
}
 810205a:	4618      	mov	r0, r3
 810205c:	3740      	adds	r7, #64	; 0x40
 810205e:	46bd      	mov	sp, r7
 8102060:	bd80      	pop	{r7, pc}
 8102062:	bf00      	nop
 8102064:	10000008 	.word	0x10000008
 8102068:	58024400 	.word	0x58024400
 810206c:	431bde83 	.word	0x431bde83
 8102070:	10005390 	.word	0x10005390
 8102074:	40001400 	.word	0x40001400

08102078 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8102078:	b480      	push	{r7}
 810207a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 810207c:	bf00      	nop
 810207e:	46bd      	mov	sp, r7
 8102080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102084:	4770      	bx	lr

08102086 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8102086:	b480      	push	{r7}
 8102088:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 810208a:	e7fe      	b.n	810208a <HardFault_Handler+0x4>

0810208c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 810208c:	b480      	push	{r7}
 810208e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8102090:	e7fe      	b.n	8102090 <MemManage_Handler+0x4>

08102092 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8102092:	b480      	push	{r7}
 8102094:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8102096:	e7fe      	b.n	8102096 <BusFault_Handler+0x4>

08102098 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8102098:	b480      	push	{r7}
 810209a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 810209c:	e7fe      	b.n	810209c <UsageFault_Handler+0x4>

0810209e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 810209e:	b480      	push	{r7}
 81020a0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 81020a2:	bf00      	nop
 81020a4:	46bd      	mov	sp, r7
 81020a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81020aa:	4770      	bx	lr

081020ac <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 81020ac:	b580      	push	{r7, lr}
 81020ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 81020b0:	4802      	ldr	r0, [pc, #8]	; (81020bc <DMA1_Stream0_IRQHandler+0x10>)
 81020b2:	f003 fc53 	bl	810595c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 81020b6:	bf00      	nop
 81020b8:	bd80      	pop	{r7, pc}
 81020ba:	bf00      	nop
 81020bc:	100052a0 	.word	0x100052a0

081020c0 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 81020c0:	b580      	push	{r7, lr}
 81020c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 81020c4:	4802      	ldr	r0, [pc, #8]	; (81020d0 <DMA1_Stream1_IRQHandler+0x10>)
 81020c6:	f003 fc49 	bl	810595c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 81020ca:	bf00      	nop
 81020cc:	bd80      	pop	{r7, pc}
 81020ce:	bf00      	nop
 81020d0:	10005318 	.word	0x10005318

081020d4 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 81020d4:	b580      	push	{r7, lr}
 81020d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 81020d8:	4802      	ldr	r0, [pc, #8]	; (81020e4 <DMA1_Stream4_IRQHandler+0x10>)
 81020da:	f003 fc3f 	bl	810595c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 81020de:	bf00      	nop
 81020e0:	bd80      	pop	{r7, pc}
 81020e2:	bf00      	nop
 81020e4:	10004f34 	.word	0x10004f34

081020e8 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 81020e8:	b580      	push	{r7, lr}
 81020ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 81020ec:	4802      	ldr	r0, [pc, #8]	; (81020f8 <DMA1_Stream5_IRQHandler+0x10>)
 81020ee:	f003 fc35 	bl	810595c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 81020f2:	bf00      	nop
 81020f4:	bd80      	pop	{r7, pc}
 81020f6:	bf00      	nop
 81020f8:	100050c0 	.word	0x100050c0

081020fc <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 81020fc:	b580      	push	{r7, lr}
 81020fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8102100:	4802      	ldr	r0, [pc, #8]	; (810210c <DMA1_Stream6_IRQHandler+0x10>)
 8102102:	f003 fc2b 	bl	810595c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8102106:	bf00      	nop
 8102108:	bd80      	pop	{r7, pc}
 810210a:	bf00      	nop
 810210c:	10004fb0 	.word	0x10004fb0

08102110 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8102110:	b580      	push	{r7, lr}
 8102112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8102114:	4802      	ldr	r0, [pc, #8]	; (8102120 <ADC_IRQHandler+0x10>)
 8102116:	f001 f81b 	bl	8103150 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 810211a:	bf00      	nop
 810211c:	bd80      	pop	{r7, pc}
 810211e:	bf00      	nop
 8102120:	10004ed0 	.word	0x10004ed0

08102124 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8102124:	b580      	push	{r7, lr}
 8102126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8102128:	4802      	ldr	r0, [pc, #8]	; (8102134 <I2C1_EV_IRQHandler+0x10>)
 810212a:	f005 f9ea 	bl	8107502 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 810212e:	bf00      	nop
 8102130:	bd80      	pop	{r7, pc}
 8102132:	bf00      	nop
 8102134:	10005028 	.word	0x10005028

08102138 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8102138:	b580      	push	{r7, lr}
 810213a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 810213c:	4802      	ldr	r0, [pc, #8]	; (8102148 <I2C1_ER_IRQHandler+0x10>)
 810213e:	f005 f9fa 	bl	8107536 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8102142:	bf00      	nop
 8102144:	bd80      	pop	{r7, pc}
 8102146:	bf00      	nop
 8102148:	10005028 	.word	0x10005028

0810214c <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 810214c:	b580      	push	{r7, lr}
 810214e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8102150:	4802      	ldr	r0, [pc, #8]	; (810215c <SPI1_IRQHandler+0x10>)
 8102152:	f00b fce5 	bl	810db20 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8102156:	bf00      	nop
 8102158:	bd80      	pop	{r7, pc}
 810215a:	bf00      	nop
 810215c:	10005218 	.word	0x10005218

08102160 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8102160:	b580      	push	{r7, lr}
 8102162:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8102164:	4802      	ldr	r0, [pc, #8]	; (8102170 <USART3_IRQHandler+0x10>)
 8102166:	f00d fa5f 	bl	810f628 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 810216a:	bf00      	nop
 810216c:	bd80      	pop	{r7, pc}
 810216e:	bf00      	nop
 8102170:	100054a0 	.word	0x100054a0

08102174 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8102174:	b580      	push	{r7, lr}
 8102176:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8102178:	f44f 6000 	mov.w	r0, #2048	; 0x800
 810217c:	f005 f8d7 	bl	810732e <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8102180:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8102184:	f005 f8d3 	bl	810732e <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8102188:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 810218c:	f005 f8cf 	bl	810732e <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8102190:	bf00      	nop
 8102192:	bd80      	pop	{r7, pc}

08102194 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 8102194:	b580      	push	{r7, lr}
 8102196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8102198:	4802      	ldr	r0, [pc, #8]	; (81021a4 <DMA1_Stream7_IRQHandler+0x10>)
 810219a:	f003 fbdf 	bl	810595c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 810219e:	bf00      	nop
 81021a0:	bd80      	pop	{r7, pc}
 81021a2:	bf00      	nop
 81021a4:	10005428 	.word	0x10005428

081021a8 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 81021a8:	b580      	push	{r7, lr}
 81021aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 81021ac:	4802      	ldr	r0, [pc, #8]	; (81021b8 <SDMMC1_IRQHandler+0x10>)
 81021ae:	f00a f955 	bl	810c45c <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 81021b2:	bf00      	nop
 81021b4:	bd80      	pop	{r7, pc}
 81021b6:	bf00      	nop
 81021b8:	10005198 	.word	0x10005198

081021bc <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 81021bc:	b580      	push	{r7, lr}
 81021be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 81021c0:	4802      	ldr	r0, [pc, #8]	; (81021cc <TIM7_IRQHandler+0x10>)
 81021c2:	f00c f8a8 	bl	810e316 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 81021c6:	bf00      	nop
 81021c8:	bd80      	pop	{r7, pc}
 81021ca:	bf00      	nop
 81021cc:	10005390 	.word	0x10005390

081021d0 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 81021d0:	b580      	push	{r7, lr}
 81021d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 81021d4:	4802      	ldr	r0, [pc, #8]	; (81021e0 <DMA2_Stream0_IRQHandler+0x10>)
 81021d6:	f003 fbc1 	bl	810595c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 81021da:	bf00      	nop
 81021dc:	bd80      	pop	{r7, pc}
 81021de:	bf00      	nop
 81021e0:	10005530 	.word	0x10005530

081021e4 <CM7_SEV_IRQHandler>:

/**
  * @brief This function handles CM7 send event interrupt for CM4.
  */
void CM7_SEV_IRQHandler(void)
{
 81021e4:	b480      	push	{r7}
 81021e6:	af00      	add	r7, sp, #0

  /* USER CODE END CM7_SEV_IRQn 0 */
  /* USER CODE BEGIN CM7_SEV_IRQn 1 */

  /* USER CODE END CM7_SEV_IRQn 1 */
}
 81021e8:	bf00      	nop
 81021ea:	46bd      	mov	sp, r7
 81021ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 81021f0:	4770      	bx	lr
	...

081021f4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 81021f4:	b580      	push	{r7, lr}
 81021f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 81021f8:	4802      	ldr	r0, [pc, #8]	; (8102204 <OTG_FS_IRQHandler+0x10>)
 81021fa:	f006 f9f6 	bl	81085ea <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 81021fe:	bf00      	nop
 8102200:	bd80      	pop	{r7, pc}
 8102202:	bf00      	nop
 8102204:	10008b2c 	.word	0x10008b2c

08102208 <HSEM2_IRQHandler>:

/**
  * @brief This function handles HSEM2 global interrupt.
  */
void HSEM2_IRQHandler(void)
{
 8102208:	b580      	push	{r7, lr}
 810220a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM2_IRQn 0 */

  /* USER CODE END HSEM2_IRQn 0 */
  HAL_HSEM_IRQHandler();
 810220c:	f005 f8c6 	bl	810739c <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM2_IRQn 1 */

  /* USER CODE END HSEM2_IRQn 1 */
}
 8102210:	bf00      	nop
 8102212:	bd80      	pop	{r7, pc}

08102214 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8102214:	b480      	push	{r7}
 8102216:	af00      	add	r7, sp, #0
	return 1;
 8102218:	2301      	movs	r3, #1
}
 810221a:	4618      	mov	r0, r3
 810221c:	46bd      	mov	sp, r7
 810221e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102222:	4770      	bx	lr

08102224 <_kill>:

int _kill(int pid, int sig)
{
 8102224:	b580      	push	{r7, lr}
 8102226:	b082      	sub	sp, #8
 8102228:	af00      	add	r7, sp, #0
 810222a:	6078      	str	r0, [r7, #4]
 810222c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 810222e:	f016 fba1 	bl	8118974 <__errno>
 8102232:	4603      	mov	r3, r0
 8102234:	2216      	movs	r2, #22
 8102236:	601a      	str	r2, [r3, #0]
	return -1;
 8102238:	f04f 33ff 	mov.w	r3, #4294967295
}
 810223c:	4618      	mov	r0, r3
 810223e:	3708      	adds	r7, #8
 8102240:	46bd      	mov	sp, r7
 8102242:	bd80      	pop	{r7, pc}

08102244 <_exit>:

void _exit (int status)
{
 8102244:	b580      	push	{r7, lr}
 8102246:	b082      	sub	sp, #8
 8102248:	af00      	add	r7, sp, #0
 810224a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 810224c:	f04f 31ff 	mov.w	r1, #4294967295
 8102250:	6878      	ldr	r0, [r7, #4]
 8102252:	f7ff ffe7 	bl	8102224 <_kill>
	while (1) {}		/* Make sure we hang here */
 8102256:	e7fe      	b.n	8102256 <_exit+0x12>

08102258 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8102258:	b580      	push	{r7, lr}
 810225a:	b086      	sub	sp, #24
 810225c:	af00      	add	r7, sp, #0
 810225e:	60f8      	str	r0, [r7, #12]
 8102260:	60b9      	str	r1, [r7, #8]
 8102262:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8102264:	2300      	movs	r3, #0
 8102266:	617b      	str	r3, [r7, #20]
 8102268:	e00a      	b.n	8102280 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 810226a:	f3af 8000 	nop.w
 810226e:	4601      	mov	r1, r0
 8102270:	68bb      	ldr	r3, [r7, #8]
 8102272:	1c5a      	adds	r2, r3, #1
 8102274:	60ba      	str	r2, [r7, #8]
 8102276:	b2ca      	uxtb	r2, r1
 8102278:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 810227a:	697b      	ldr	r3, [r7, #20]
 810227c:	3301      	adds	r3, #1
 810227e:	617b      	str	r3, [r7, #20]
 8102280:	697a      	ldr	r2, [r7, #20]
 8102282:	687b      	ldr	r3, [r7, #4]
 8102284:	429a      	cmp	r2, r3
 8102286:	dbf0      	blt.n	810226a <_read+0x12>
	}

return len;
 8102288:	687b      	ldr	r3, [r7, #4]
}
 810228a:	4618      	mov	r0, r3
 810228c:	3718      	adds	r7, #24
 810228e:	46bd      	mov	sp, r7
 8102290:	bd80      	pop	{r7, pc}

08102292 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8102292:	b580      	push	{r7, lr}
 8102294:	b086      	sub	sp, #24
 8102296:	af00      	add	r7, sp, #0
 8102298:	60f8      	str	r0, [r7, #12]
 810229a:	60b9      	str	r1, [r7, #8]
 810229c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 810229e:	2300      	movs	r3, #0
 81022a0:	617b      	str	r3, [r7, #20]
 81022a2:	e009      	b.n	81022b8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 81022a4:	68bb      	ldr	r3, [r7, #8]
 81022a6:	1c5a      	adds	r2, r3, #1
 81022a8:	60ba      	str	r2, [r7, #8]
 81022aa:	781b      	ldrb	r3, [r3, #0]
 81022ac:	4618      	mov	r0, r3
 81022ae:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 81022b2:	697b      	ldr	r3, [r7, #20]
 81022b4:	3301      	adds	r3, #1
 81022b6:	617b      	str	r3, [r7, #20]
 81022b8:	697a      	ldr	r2, [r7, #20]
 81022ba:	687b      	ldr	r3, [r7, #4]
 81022bc:	429a      	cmp	r2, r3
 81022be:	dbf1      	blt.n	81022a4 <_write+0x12>
	}
	return len;
 81022c0:	687b      	ldr	r3, [r7, #4]
}
 81022c2:	4618      	mov	r0, r3
 81022c4:	3718      	adds	r7, #24
 81022c6:	46bd      	mov	sp, r7
 81022c8:	bd80      	pop	{r7, pc}

081022ca <_close>:

int _close(int file)
{
 81022ca:	b480      	push	{r7}
 81022cc:	b083      	sub	sp, #12
 81022ce:	af00      	add	r7, sp, #0
 81022d0:	6078      	str	r0, [r7, #4]
	return -1;
 81022d2:	f04f 33ff 	mov.w	r3, #4294967295
}
 81022d6:	4618      	mov	r0, r3
 81022d8:	370c      	adds	r7, #12
 81022da:	46bd      	mov	sp, r7
 81022dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 81022e0:	4770      	bx	lr

081022e2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 81022e2:	b480      	push	{r7}
 81022e4:	b083      	sub	sp, #12
 81022e6:	af00      	add	r7, sp, #0
 81022e8:	6078      	str	r0, [r7, #4]
 81022ea:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 81022ec:	683b      	ldr	r3, [r7, #0]
 81022ee:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 81022f2:	605a      	str	r2, [r3, #4]
	return 0;
 81022f4:	2300      	movs	r3, #0
}
 81022f6:	4618      	mov	r0, r3
 81022f8:	370c      	adds	r7, #12
 81022fa:	46bd      	mov	sp, r7
 81022fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102300:	4770      	bx	lr

08102302 <_isatty>:

int _isatty(int file)
{
 8102302:	b480      	push	{r7}
 8102304:	b083      	sub	sp, #12
 8102306:	af00      	add	r7, sp, #0
 8102308:	6078      	str	r0, [r7, #4]
	return 1;
 810230a:	2301      	movs	r3, #1
}
 810230c:	4618      	mov	r0, r3
 810230e:	370c      	adds	r7, #12
 8102310:	46bd      	mov	sp, r7
 8102312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102316:	4770      	bx	lr

08102318 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8102318:	b480      	push	{r7}
 810231a:	b085      	sub	sp, #20
 810231c:	af00      	add	r7, sp, #0
 810231e:	60f8      	str	r0, [r7, #12]
 8102320:	60b9      	str	r1, [r7, #8]
 8102322:	607a      	str	r2, [r7, #4]
	return 0;
 8102324:	2300      	movs	r3, #0
}
 8102326:	4618      	mov	r0, r3
 8102328:	3714      	adds	r7, #20
 810232a:	46bd      	mov	sp, r7
 810232c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102330:	4770      	bx	lr
	...

08102334 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8102334:	b580      	push	{r7, lr}
 8102336:	b084      	sub	sp, #16
 8102338:	af00      	add	r7, sp, #0
 810233a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 810233c:	4b11      	ldr	r3, [pc, #68]	; (8102384 <_sbrk+0x50>)
 810233e:	681b      	ldr	r3, [r3, #0]
 8102340:	2b00      	cmp	r3, #0
 8102342:	d102      	bne.n	810234a <_sbrk+0x16>
		heap_end = &end;
 8102344:	4b0f      	ldr	r3, [pc, #60]	; (8102384 <_sbrk+0x50>)
 8102346:	4a10      	ldr	r2, [pc, #64]	; (8102388 <_sbrk+0x54>)
 8102348:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 810234a:	4b0e      	ldr	r3, [pc, #56]	; (8102384 <_sbrk+0x50>)
 810234c:	681b      	ldr	r3, [r3, #0]
 810234e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8102350:	4b0c      	ldr	r3, [pc, #48]	; (8102384 <_sbrk+0x50>)
 8102352:	681a      	ldr	r2, [r3, #0]
 8102354:	687b      	ldr	r3, [r7, #4]
 8102356:	4413      	add	r3, r2
 8102358:	466a      	mov	r2, sp
 810235a:	4293      	cmp	r3, r2
 810235c:	d907      	bls.n	810236e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 810235e:	f016 fb09 	bl	8118974 <__errno>
 8102362:	4603      	mov	r3, r0
 8102364:	220c      	movs	r2, #12
 8102366:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8102368:	f04f 33ff 	mov.w	r3, #4294967295
 810236c:	e006      	b.n	810237c <_sbrk+0x48>
	}

	heap_end += incr;
 810236e:	4b05      	ldr	r3, [pc, #20]	; (8102384 <_sbrk+0x50>)
 8102370:	681a      	ldr	r2, [r3, #0]
 8102372:	687b      	ldr	r3, [r7, #4]
 8102374:	4413      	add	r3, r2
 8102376:	4a03      	ldr	r2, [pc, #12]	; (8102384 <_sbrk+0x50>)
 8102378:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 810237a:	68fb      	ldr	r3, [r7, #12]
}
 810237c:	4618      	mov	r0, r3
 810237e:	3710      	adds	r7, #16
 8102380:	46bd      	mov	sp, r7
 8102382:	bd80      	pop	{r7, pc}
 8102384:	10000380 	.word	0x10000380
 8102388:	10008f48 	.word	0x10008f48

0810238c <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 810238c:	b580      	push	{r7, lr}
 810238e:	b09a      	sub	sp, #104	; 0x68
 8102390:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8102392:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8102396:	2200      	movs	r2, #0
 8102398:	601a      	str	r2, [r3, #0]
 810239a:	605a      	str	r2, [r3, #4]
 810239c:	609a      	str	r2, [r3, #8]
 810239e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 81023a0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 81023a4:	2200      	movs	r2, #0
 81023a6:	601a      	str	r2, [r3, #0]
 81023a8:	605a      	str	r2, [r3, #4]
 81023aa:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 81023ac:	f107 0330 	add.w	r3, r7, #48	; 0x30
 81023b0:	2200      	movs	r2, #0
 81023b2:	601a      	str	r2, [r3, #0]
 81023b4:	605a      	str	r2, [r3, #4]
 81023b6:	609a      	str	r2, [r3, #8]
 81023b8:	60da      	str	r2, [r3, #12]
 81023ba:	611a      	str	r2, [r3, #16]
 81023bc:	615a      	str	r2, [r3, #20]
 81023be:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 81023c0:	1d3b      	adds	r3, r7, #4
 81023c2:	222c      	movs	r2, #44	; 0x2c
 81023c4:	2100      	movs	r1, #0
 81023c6:	4618      	mov	r0, r3
 81023c8:	f016 fb0c 	bl	81189e4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 81023cc:	4b55      	ldr	r3, [pc, #340]	; (8102524 <MX_TIM1_Init+0x198>)
 81023ce:	4a56      	ldr	r2, [pc, #344]	; (8102528 <MX_TIM1_Init+0x19c>)
 81023d0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 54;
 81023d2:	4b54      	ldr	r3, [pc, #336]	; (8102524 <MX_TIM1_Init+0x198>)
 81023d4:	2236      	movs	r2, #54	; 0x36
 81023d6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 81023d8:	4b52      	ldr	r3, [pc, #328]	; (8102524 <MX_TIM1_Init+0x198>)
 81023da:	2200      	movs	r2, #0
 81023dc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 11000;
 81023de:	4b51      	ldr	r3, [pc, #324]	; (8102524 <MX_TIM1_Init+0x198>)
 81023e0:	f642 22f8 	movw	r2, #11000	; 0x2af8
 81023e4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 81023e6:	4b4f      	ldr	r3, [pc, #316]	; (8102524 <MX_TIM1_Init+0x198>)
 81023e8:	2200      	movs	r2, #0
 81023ea:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 81023ec:	4b4d      	ldr	r3, [pc, #308]	; (8102524 <MX_TIM1_Init+0x198>)
 81023ee:	2200      	movs	r2, #0
 81023f0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 81023f2:	4b4c      	ldr	r3, [pc, #304]	; (8102524 <MX_TIM1_Init+0x198>)
 81023f4:	2200      	movs	r2, #0
 81023f6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 81023f8:	484a      	ldr	r0, [pc, #296]	; (8102524 <MX_TIM1_Init+0x198>)
 81023fa:	f00b fe64 	bl	810e0c6 <HAL_TIM_Base_Init>
 81023fe:	4603      	mov	r3, r0
 8102400:	2b00      	cmp	r3, #0
 8102402:	d001      	beq.n	8102408 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8102404:	f7ff fbb4 	bl	8101b70 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8102408:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 810240c:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 810240e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8102412:	4619      	mov	r1, r3
 8102414:	4843      	ldr	r0, [pc, #268]	; (8102524 <MX_TIM1_Init+0x198>)
 8102416:	f00c f9ad 	bl	810e774 <HAL_TIM_ConfigClockSource>
 810241a:	4603      	mov	r3, r0
 810241c:	2b00      	cmp	r3, #0
 810241e:	d001      	beq.n	8102424 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8102420:	f7ff fba6 	bl	8101b70 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8102424:	483f      	ldr	r0, [pc, #252]	; (8102524 <MX_TIM1_Init+0x198>)
 8102426:	f00b ff15 	bl	810e254 <HAL_TIM_PWM_Init>
 810242a:	4603      	mov	r3, r0
 810242c:	2b00      	cmp	r3, #0
 810242e:	d001      	beq.n	8102434 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8102430:	f7ff fb9e 	bl	8101b70 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8102434:	2300      	movs	r3, #0
 8102436:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8102438:	2300      	movs	r3, #0
 810243a:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 810243c:	2300      	movs	r3, #0
 810243e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8102440:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8102444:	4619      	mov	r1, r3
 8102446:	4837      	ldr	r0, [pc, #220]	; (8102524 <MX_TIM1_Init+0x198>)
 8102448:	f00c feb4 	bl	810f1b4 <HAL_TIMEx_MasterConfigSynchronization>
 810244c:	4603      	mov	r3, r0
 810244e:	2b00      	cmp	r3, #0
 8102450:	d001      	beq.n	8102456 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8102452:	f7ff fb8d 	bl	8101b70 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8102456:	2360      	movs	r3, #96	; 0x60
 8102458:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 50;
 810245a:	2332      	movs	r3, #50	; 0x32
 810245c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 810245e:	2300      	movs	r3, #0
 8102460:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8102462:	2300      	movs	r3, #0
 8102464:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8102466:	2300      	movs	r3, #0
 8102468:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 810246a:	2300      	movs	r3, #0
 810246c:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 810246e:	2300      	movs	r3, #0
 8102470:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8102472:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8102476:	2200      	movs	r2, #0
 8102478:	4619      	mov	r1, r3
 810247a:	482a      	ldr	r0, [pc, #168]	; (8102524 <MX_TIM1_Init+0x198>)
 810247c:	f00c f86a 	bl	810e554 <HAL_TIM_PWM_ConfigChannel>
 8102480:	4603      	mov	r3, r0
 8102482:	2b00      	cmp	r3, #0
 8102484:	d001      	beq.n	810248a <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8102486:	f7ff fb73 	bl	8101b70 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 810248a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 810248e:	2204      	movs	r2, #4
 8102490:	4619      	mov	r1, r3
 8102492:	4824      	ldr	r0, [pc, #144]	; (8102524 <MX_TIM1_Init+0x198>)
 8102494:	f00c f85e 	bl	810e554 <HAL_TIM_PWM_ConfigChannel>
 8102498:	4603      	mov	r3, r0
 810249a:	2b00      	cmp	r3, #0
 810249c:	d001      	beq.n	81024a2 <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 810249e:	f7ff fb67 	bl	8101b70 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 81024a2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 81024a6:	2208      	movs	r2, #8
 81024a8:	4619      	mov	r1, r3
 81024aa:	481e      	ldr	r0, [pc, #120]	; (8102524 <MX_TIM1_Init+0x198>)
 81024ac:	f00c f852 	bl	810e554 <HAL_TIM_PWM_ConfigChannel>
 81024b0:	4603      	mov	r3, r0
 81024b2:	2b00      	cmp	r3, #0
 81024b4:	d001      	beq.n	81024ba <MX_TIM1_Init+0x12e>
  {
    Error_Handler();
 81024b6:	f7ff fb5b 	bl	8101b70 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 81024ba:	f107 0330 	add.w	r3, r7, #48	; 0x30
 81024be:	220c      	movs	r2, #12
 81024c0:	4619      	mov	r1, r3
 81024c2:	4818      	ldr	r0, [pc, #96]	; (8102524 <MX_TIM1_Init+0x198>)
 81024c4:	f00c f846 	bl	810e554 <HAL_TIM_PWM_ConfigChannel>
 81024c8:	4603      	mov	r3, r0
 81024ca:	2b00      	cmp	r3, #0
 81024cc:	d001      	beq.n	81024d2 <MX_TIM1_Init+0x146>
  {
    Error_Handler();
 81024ce:	f7ff fb4f 	bl	8101b70 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 81024d2:	2300      	movs	r3, #0
 81024d4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 81024d6:	2300      	movs	r3, #0
 81024d8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 81024da:	2300      	movs	r3, #0
 81024dc:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 81024de:	2300      	movs	r3, #0
 81024e0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 81024e2:	2300      	movs	r3, #0
 81024e4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 81024e6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 81024ea:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 81024ec:	2300      	movs	r3, #0
 81024ee:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 81024f0:	2300      	movs	r3, #0
 81024f2:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 81024f4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 81024f8:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 81024fa:	2300      	movs	r3, #0
 81024fc:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 81024fe:	2300      	movs	r3, #0
 8102500:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8102502:	1d3b      	adds	r3, r7, #4
 8102504:	4619      	mov	r1, r3
 8102506:	4807      	ldr	r0, [pc, #28]	; (8102524 <MX_TIM1_Init+0x198>)
 8102508:	f00c fedc 	bl	810f2c4 <HAL_TIMEx_ConfigBreakDeadTime>
 810250c:	4603      	mov	r3, r0
 810250e:	2b00      	cmp	r3, #0
 8102510:	d001      	beq.n	8102516 <MX_TIM1_Init+0x18a>
  {
    Error_Handler();
 8102512:	f7ff fb2d 	bl	8101b70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8102516:	4803      	ldr	r0, [pc, #12]	; (8102524 <MX_TIM1_Init+0x198>)
 8102518:	f000 f82a 	bl	8102570 <HAL_TIM_MspPostInit>

}
 810251c:	bf00      	nop
 810251e:	3768      	adds	r7, #104	; 0x68
 8102520:	46bd      	mov	sp, r7
 8102522:	bd80      	pop	{r7, pc}
 8102524:	100053dc 	.word	0x100053dc
 8102528:	40010000 	.word	0x40010000

0810252c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 810252c:	b480      	push	{r7}
 810252e:	b085      	sub	sp, #20
 8102530:	af00      	add	r7, sp, #0
 8102532:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8102534:	687b      	ldr	r3, [r7, #4]
 8102536:	681b      	ldr	r3, [r3, #0]
 8102538:	4a0b      	ldr	r2, [pc, #44]	; (8102568 <HAL_TIM_Base_MspInit+0x3c>)
 810253a:	4293      	cmp	r3, r2
 810253c:	d10e      	bne.n	810255c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 810253e:	4b0b      	ldr	r3, [pc, #44]	; (810256c <HAL_TIM_Base_MspInit+0x40>)
 8102540:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8102544:	4a09      	ldr	r2, [pc, #36]	; (810256c <HAL_TIM_Base_MspInit+0x40>)
 8102546:	f043 0301 	orr.w	r3, r3, #1
 810254a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 810254e:	4b07      	ldr	r3, [pc, #28]	; (810256c <HAL_TIM_Base_MspInit+0x40>)
 8102550:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8102554:	f003 0301 	and.w	r3, r3, #1
 8102558:	60fb      	str	r3, [r7, #12]
 810255a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 810255c:	bf00      	nop
 810255e:	3714      	adds	r7, #20
 8102560:	46bd      	mov	sp, r7
 8102562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102566:	4770      	bx	lr
 8102568:	40010000 	.word	0x40010000
 810256c:	58024400 	.word	0x58024400

08102570 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8102570:	b580      	push	{r7, lr}
 8102572:	b08a      	sub	sp, #40	; 0x28
 8102574:	af00      	add	r7, sp, #0
 8102576:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8102578:	f107 0314 	add.w	r3, r7, #20
 810257c:	2200      	movs	r2, #0
 810257e:	601a      	str	r2, [r3, #0]
 8102580:	605a      	str	r2, [r3, #4]
 8102582:	609a      	str	r2, [r3, #8]
 8102584:	60da      	str	r2, [r3, #12]
 8102586:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8102588:	687b      	ldr	r3, [r7, #4]
 810258a:	681b      	ldr	r3, [r3, #0]
 810258c:	4a23      	ldr	r2, [pc, #140]	; (810261c <HAL_TIM_MspPostInit+0xac>)
 810258e:	4293      	cmp	r3, r2
 8102590:	d13f      	bne.n	8102612 <HAL_TIM_MspPostInit+0xa2>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8102592:	4b23      	ldr	r3, [pc, #140]	; (8102620 <HAL_TIM_MspPostInit+0xb0>)
 8102594:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8102598:	4a21      	ldr	r2, [pc, #132]	; (8102620 <HAL_TIM_MspPostInit+0xb0>)
 810259a:	f043 0310 	orr.w	r3, r3, #16
 810259e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81025a2:	4b1f      	ldr	r3, [pc, #124]	; (8102620 <HAL_TIM_MspPostInit+0xb0>)
 81025a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81025a8:	f003 0310 	and.w	r3, r3, #16
 81025ac:	613b      	str	r3, [r7, #16]
 81025ae:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 81025b0:	4b1b      	ldr	r3, [pc, #108]	; (8102620 <HAL_TIM_MspPostInit+0xb0>)
 81025b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81025b6:	4a1a      	ldr	r2, [pc, #104]	; (8102620 <HAL_TIM_MspPostInit+0xb0>)
 81025b8:	f043 0301 	orr.w	r3, r3, #1
 81025bc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81025c0:	4b17      	ldr	r3, [pc, #92]	; (8102620 <HAL_TIM_MspPostInit+0xb0>)
 81025c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81025c6:	f003 0301 	and.w	r3, r3, #1
 81025ca:	60fb      	str	r3, [r7, #12]
 81025cc:	68fb      	ldr	r3, [r7, #12]
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_14;
 81025ce:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 81025d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81025d4:	2302      	movs	r3, #2
 81025d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81025d8:	2300      	movs	r3, #0
 81025da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81025dc:	2300      	movs	r3, #0
 81025de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 81025e0:	2301      	movs	r3, #1
 81025e2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 81025e4:	f107 0314 	add.w	r3, r7, #20
 81025e8:	4619      	mov	r1, r3
 81025ea:	480e      	ldr	r0, [pc, #56]	; (8102624 <HAL_TIM_MspPostInit+0xb4>)
 81025ec:	f004 fcd6 	bl	8106f9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 81025f0:	f44f 7380 	mov.w	r3, #256	; 0x100
 81025f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81025f6:	2302      	movs	r3, #2
 81025f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81025fa:	2300      	movs	r3, #0
 81025fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81025fe:	2300      	movs	r3, #0
 8102600:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8102602:	2301      	movs	r3, #1
 8102604:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8102606:	f107 0314 	add.w	r3, r7, #20
 810260a:	4619      	mov	r1, r3
 810260c:	4806      	ldr	r0, [pc, #24]	; (8102628 <HAL_TIM_MspPostInit+0xb8>)
 810260e:	f004 fcc5 	bl	8106f9c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8102612:	bf00      	nop
 8102614:	3728      	adds	r7, #40	; 0x28
 8102616:	46bd      	mov	sp, r7
 8102618:	bd80      	pop	{r7, pc}
 810261a:	bf00      	nop
 810261c:	40010000 	.word	0x40010000
 8102620:	58024400 	.word	0x58024400
 8102624:	58021000 	.word	0x58021000
 8102628:	58020000 	.word	0x58020000

0810262c <calcChecksum>:

GPS gps;
struct NAV_PVT pvt;

void calcChecksum(unsigned char* CK)
{
 810262c:	b580      	push	{r7, lr}
 810262e:	b084      	sub	sp, #16
 8102630:	af00      	add	r7, sp, #0
 8102632:	6078      	str	r0, [r7, #4]
	memset(CK, 0, 2);
 8102634:	2202      	movs	r2, #2
 8102636:	2100      	movs	r1, #0
 8102638:	6878      	ldr	r0, [r7, #4]
 810263a:	f016 f9d3 	bl	81189e4 <memset>
	for (int i = 0; i < (int)sizeof(pvt); i++)
 810263e:	2300      	movs	r3, #0
 8102640:	60fb      	str	r3, [r7, #12]
 8102642:	e016      	b.n	8102672 <calcChecksum+0x46>
	{
		CK[0] = CK[0] + ((unsigned char*)(&pvt))[i];
 8102644:	687b      	ldr	r3, [r7, #4]
 8102646:	781a      	ldrb	r2, [r3, #0]
 8102648:	68fb      	ldr	r3, [r7, #12]
 810264a:	490e      	ldr	r1, [pc, #56]	; (8102684 <calcChecksum+0x58>)
 810264c:	440b      	add	r3, r1
 810264e:	781b      	ldrb	r3, [r3, #0]
 8102650:	4413      	add	r3, r2
 8102652:	b2da      	uxtb	r2, r3
 8102654:	687b      	ldr	r3, [r7, #4]
 8102656:	701a      	strb	r2, [r3, #0]
		CK[1] = CK[1] + CK[0];
 8102658:	687b      	ldr	r3, [r7, #4]
 810265a:	3301      	adds	r3, #1
 810265c:	7819      	ldrb	r1, [r3, #0]
 810265e:	687b      	ldr	r3, [r7, #4]
 8102660:	781a      	ldrb	r2, [r3, #0]
 8102662:	687b      	ldr	r3, [r7, #4]
 8102664:	3301      	adds	r3, #1
 8102666:	440a      	add	r2, r1
 8102668:	b2d2      	uxtb	r2, r2
 810266a:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < (int)sizeof(pvt); i++)
 810266c:	68fb      	ldr	r3, [r7, #12]
 810266e:	3301      	adds	r3, #1
 8102670:	60fb      	str	r3, [r7, #12]
 8102672:	68fb      	ldr	r3, [r7, #12]
 8102674:	2b5f      	cmp	r3, #95	; 0x5f
 8102676:	dde5      	ble.n	8102644 <calcChecksum+0x18>
	}

}
 8102678:	bf00      	nop
 810267a:	bf00      	nop
 810267c:	3710      	adds	r7, #16
 810267e:	46bd      	mov	sp, r7
 8102680:	bd80      	pop	{r7, pc}
 8102682:	bf00      	nop
 8102684:	10005138 	.word	0x10005138

08102688 <MX_USART3_UART_Init>:
DMA_HandleTypeDef hdma_usart3_tx;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8102688:	b580      	push	{r7, lr}
 810268a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 810268c:	4b22      	ldr	r3, [pc, #136]	; (8102718 <MX_USART3_UART_Init+0x90>)
 810268e:	4a23      	ldr	r2, [pc, #140]	; (810271c <MX_USART3_UART_Init+0x94>)
 8102690:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8102692:	4b21      	ldr	r3, [pc, #132]	; (8102718 <MX_USART3_UART_Init+0x90>)
 8102694:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8102698:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 810269a:	4b1f      	ldr	r3, [pc, #124]	; (8102718 <MX_USART3_UART_Init+0x90>)
 810269c:	2200      	movs	r2, #0
 810269e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 81026a0:	4b1d      	ldr	r3, [pc, #116]	; (8102718 <MX_USART3_UART_Init+0x90>)
 81026a2:	2200      	movs	r2, #0
 81026a4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 81026a6:	4b1c      	ldr	r3, [pc, #112]	; (8102718 <MX_USART3_UART_Init+0x90>)
 81026a8:	2200      	movs	r2, #0
 81026aa:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 81026ac:	4b1a      	ldr	r3, [pc, #104]	; (8102718 <MX_USART3_UART_Init+0x90>)
 81026ae:	220c      	movs	r2, #12
 81026b0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 81026b2:	4b19      	ldr	r3, [pc, #100]	; (8102718 <MX_USART3_UART_Init+0x90>)
 81026b4:	2200      	movs	r2, #0
 81026b6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 81026b8:	4b17      	ldr	r3, [pc, #92]	; (8102718 <MX_USART3_UART_Init+0x90>)
 81026ba:	2200      	movs	r2, #0
 81026bc:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 81026be:	4b16      	ldr	r3, [pc, #88]	; (8102718 <MX_USART3_UART_Init+0x90>)
 81026c0:	2200      	movs	r2, #0
 81026c2:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 81026c4:	4b14      	ldr	r3, [pc, #80]	; (8102718 <MX_USART3_UART_Init+0x90>)
 81026c6:	2200      	movs	r2, #0
 81026c8:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 81026ca:	4b13      	ldr	r3, [pc, #76]	; (8102718 <MX_USART3_UART_Init+0x90>)
 81026cc:	2200      	movs	r2, #0
 81026ce:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 81026d0:	4811      	ldr	r0, [pc, #68]	; (8102718 <MX_USART3_UART_Init+0x90>)
 81026d2:	f00c fe93 	bl	810f3fc <HAL_UART_Init>
 81026d6:	4603      	mov	r3, r0
 81026d8:	2b00      	cmp	r3, #0
 81026da:	d001      	beq.n	81026e0 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 81026dc:	f7ff fa48 	bl	8101b70 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 81026e0:	2100      	movs	r1, #0
 81026e2:	480d      	ldr	r0, [pc, #52]	; (8102718 <MX_USART3_UART_Init+0x90>)
 81026e4:	f00e fb6a 	bl	8110dbc <HAL_UARTEx_SetTxFifoThreshold>
 81026e8:	4603      	mov	r3, r0
 81026ea:	2b00      	cmp	r3, #0
 81026ec:	d001      	beq.n	81026f2 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 81026ee:	f7ff fa3f 	bl	8101b70 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 81026f2:	2100      	movs	r1, #0
 81026f4:	4808      	ldr	r0, [pc, #32]	; (8102718 <MX_USART3_UART_Init+0x90>)
 81026f6:	f00e fb9f 	bl	8110e38 <HAL_UARTEx_SetRxFifoThreshold>
 81026fa:	4603      	mov	r3, r0
 81026fc:	2b00      	cmp	r3, #0
 81026fe:	d001      	beq.n	8102704 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8102700:	f7ff fa36 	bl	8101b70 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8102704:	4804      	ldr	r0, [pc, #16]	; (8102718 <MX_USART3_UART_Init+0x90>)
 8102706:	f00e fb20 	bl	8110d4a <HAL_UARTEx_DisableFifoMode>
 810270a:	4603      	mov	r3, r0
 810270c:	2b00      	cmp	r3, #0
 810270e:	d001      	beq.n	8102714 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8102710:	f7ff fa2e 	bl	8101b70 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8102714:	bf00      	nop
 8102716:	bd80      	pop	{r7, pc}
 8102718:	100054a0 	.word	0x100054a0
 810271c:	40004800 	.word	0x40004800

08102720 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8102720:	b580      	push	{r7, lr}
 8102722:	b0b8      	sub	sp, #224	; 0xe0
 8102724:	af00      	add	r7, sp, #0
 8102726:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8102728:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 810272c:	2200      	movs	r2, #0
 810272e:	601a      	str	r2, [r3, #0]
 8102730:	605a      	str	r2, [r3, #4]
 8102732:	609a      	str	r2, [r3, #8]
 8102734:	60da      	str	r2, [r3, #12]
 8102736:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8102738:	f107 0310 	add.w	r3, r7, #16
 810273c:	22bc      	movs	r2, #188	; 0xbc
 810273e:	2100      	movs	r1, #0
 8102740:	4618      	mov	r0, r3
 8102742:	f016 f94f 	bl	81189e4 <memset>
  if(uartHandle->Instance==USART3)
 8102746:	687b      	ldr	r3, [r7, #4]
 8102748:	681b      	ldr	r3, [r3, #0]
 810274a:	4a57      	ldr	r2, [pc, #348]	; (81028a8 <HAL_UART_MspInit+0x188>)
 810274c:	4293      	cmp	r3, r2
 810274e:	f040 80a7 	bne.w	81028a0 <HAL_UART_MspInit+0x180>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8102752:	2302      	movs	r3, #2
 8102754:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8102756:	2300      	movs	r3, #0
 8102758:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 810275c:	f107 0310 	add.w	r3, r7, #16
 8102760:	4618      	mov	r0, r3
 8102762:	f007 fa79 	bl	8109c58 <HAL_RCCEx_PeriphCLKConfig>
 8102766:	4603      	mov	r3, r0
 8102768:	2b00      	cmp	r3, #0
 810276a:	d001      	beq.n	8102770 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 810276c:	f7ff fa00 	bl	8101b70 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8102770:	4b4e      	ldr	r3, [pc, #312]	; (81028ac <HAL_UART_MspInit+0x18c>)
 8102772:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8102776:	4a4d      	ldr	r2, [pc, #308]	; (81028ac <HAL_UART_MspInit+0x18c>)
 8102778:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 810277c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8102780:	4b4a      	ldr	r3, [pc, #296]	; (81028ac <HAL_UART_MspInit+0x18c>)
 8102782:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8102786:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 810278a:	60fb      	str	r3, [r7, #12]
 810278c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 810278e:	4b47      	ldr	r3, [pc, #284]	; (81028ac <HAL_UART_MspInit+0x18c>)
 8102790:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8102794:	4a45      	ldr	r2, [pc, #276]	; (81028ac <HAL_UART_MspInit+0x18c>)
 8102796:	f043 0308 	orr.w	r3, r3, #8
 810279a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 810279e:	4b43      	ldr	r3, [pc, #268]	; (81028ac <HAL_UART_MspInit+0x18c>)
 81027a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81027a4:	f003 0308 	and.w	r3, r3, #8
 81027a8:	60bb      	str	r3, [r7, #8]
 81027aa:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 81027ac:	f44f 7340 	mov.w	r3, #768	; 0x300
 81027b0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81027b4:	2302      	movs	r3, #2
 81027b6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81027ba:	2300      	movs	r3, #0
 81027bc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81027c0:	2300      	movs	r3, #0
 81027c2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 81027c6:	2307      	movs	r3, #7
 81027c8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 81027cc:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 81027d0:	4619      	mov	r1, r3
 81027d2:	4837      	ldr	r0, [pc, #220]	; (81028b0 <HAL_UART_MspInit+0x190>)
 81027d4:	f004 fbe2 	bl	8106f9c <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream7;
 81027d8:	4b36      	ldr	r3, [pc, #216]	; (81028b4 <HAL_UART_MspInit+0x194>)
 81027da:	4a37      	ldr	r2, [pc, #220]	; (81028b8 <HAL_UART_MspInit+0x198>)
 81027dc:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 81027de:	4b35      	ldr	r3, [pc, #212]	; (81028b4 <HAL_UART_MspInit+0x194>)
 81027e0:	222d      	movs	r2, #45	; 0x2d
 81027e2:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 81027e4:	4b33      	ldr	r3, [pc, #204]	; (81028b4 <HAL_UART_MspInit+0x194>)
 81027e6:	2200      	movs	r2, #0
 81027e8:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 81027ea:	4b32      	ldr	r3, [pc, #200]	; (81028b4 <HAL_UART_MspInit+0x194>)
 81027ec:	2200      	movs	r2, #0
 81027ee:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 81027f0:	4b30      	ldr	r3, [pc, #192]	; (81028b4 <HAL_UART_MspInit+0x194>)
 81027f2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 81027f6:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 81027f8:	4b2e      	ldr	r3, [pc, #184]	; (81028b4 <HAL_UART_MspInit+0x194>)
 81027fa:	2200      	movs	r2, #0
 81027fc:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 81027fe:	4b2d      	ldr	r3, [pc, #180]	; (81028b4 <HAL_UART_MspInit+0x194>)
 8102800:	2200      	movs	r2, #0
 8102802:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8102804:	4b2b      	ldr	r3, [pc, #172]	; (81028b4 <HAL_UART_MspInit+0x194>)
 8102806:	f44f 7280 	mov.w	r2, #256	; 0x100
 810280a:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_HIGH;
 810280c:	4b29      	ldr	r3, [pc, #164]	; (81028b4 <HAL_UART_MspInit+0x194>)
 810280e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8102812:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8102814:	4b27      	ldr	r3, [pc, #156]	; (81028b4 <HAL_UART_MspInit+0x194>)
 8102816:	2200      	movs	r2, #0
 8102818:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 810281a:	4826      	ldr	r0, [pc, #152]	; (81028b4 <HAL_UART_MspInit+0x194>)
 810281c:	f001 fd78 	bl	8104310 <HAL_DMA_Init>
 8102820:	4603      	mov	r3, r0
 8102822:	2b00      	cmp	r3, #0
 8102824:	d001      	beq.n	810282a <HAL_UART_MspInit+0x10a>
    {
      Error_Handler();
 8102826:	f7ff f9a3 	bl	8101b70 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 810282a:	687b      	ldr	r3, [r7, #4]
 810282c:	4a21      	ldr	r2, [pc, #132]	; (81028b4 <HAL_UART_MspInit+0x194>)
 810282e:	67da      	str	r2, [r3, #124]	; 0x7c
 8102830:	4a20      	ldr	r2, [pc, #128]	; (81028b4 <HAL_UART_MspInit+0x194>)
 8102832:	687b      	ldr	r3, [r7, #4]
 8102834:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA2_Stream0;
 8102836:	4b21      	ldr	r3, [pc, #132]	; (81028bc <HAL_UART_MspInit+0x19c>)
 8102838:	4a21      	ldr	r2, [pc, #132]	; (81028c0 <HAL_UART_MspInit+0x1a0>)
 810283a:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 810283c:	4b1f      	ldr	r3, [pc, #124]	; (81028bc <HAL_UART_MspInit+0x19c>)
 810283e:	222e      	movs	r2, #46	; 0x2e
 8102840:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8102842:	4b1e      	ldr	r3, [pc, #120]	; (81028bc <HAL_UART_MspInit+0x19c>)
 8102844:	2240      	movs	r2, #64	; 0x40
 8102846:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8102848:	4b1c      	ldr	r3, [pc, #112]	; (81028bc <HAL_UART_MspInit+0x19c>)
 810284a:	2200      	movs	r2, #0
 810284c:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 810284e:	4b1b      	ldr	r3, [pc, #108]	; (81028bc <HAL_UART_MspInit+0x19c>)
 8102850:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8102854:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8102856:	4b19      	ldr	r3, [pc, #100]	; (81028bc <HAL_UART_MspInit+0x19c>)
 8102858:	2200      	movs	r2, #0
 810285a:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 810285c:	4b17      	ldr	r3, [pc, #92]	; (81028bc <HAL_UART_MspInit+0x19c>)
 810285e:	2200      	movs	r2, #0
 8102860:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8102862:	4b16      	ldr	r3, [pc, #88]	; (81028bc <HAL_UART_MspInit+0x19c>)
 8102864:	2200      	movs	r2, #0
 8102866:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8102868:	4b14      	ldr	r3, [pc, #80]	; (81028bc <HAL_UART_MspInit+0x19c>)
 810286a:	2200      	movs	r2, #0
 810286c:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 810286e:	4b13      	ldr	r3, [pc, #76]	; (81028bc <HAL_UART_MspInit+0x19c>)
 8102870:	2200      	movs	r2, #0
 8102872:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8102874:	4811      	ldr	r0, [pc, #68]	; (81028bc <HAL_UART_MspInit+0x19c>)
 8102876:	f001 fd4b 	bl	8104310 <HAL_DMA_Init>
 810287a:	4603      	mov	r3, r0
 810287c:	2b00      	cmp	r3, #0
 810287e:	d001      	beq.n	8102884 <HAL_UART_MspInit+0x164>
    {
      Error_Handler();
 8102880:	f7ff f976 	bl	8101b70 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 8102884:	687b      	ldr	r3, [r7, #4]
 8102886:	4a0d      	ldr	r2, [pc, #52]	; (81028bc <HAL_UART_MspInit+0x19c>)
 8102888:	679a      	str	r2, [r3, #120]	; 0x78
 810288a:	4a0c      	ldr	r2, [pc, #48]	; (81028bc <HAL_UART_MspInit+0x19c>)
 810288c:	687b      	ldr	r3, [r7, #4]
 810288e:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8102890:	2200      	movs	r2, #0
 8102892:	2105      	movs	r1, #5
 8102894:	2027      	movs	r0, #39	; 0x27
 8102896:	f001 fcff 	bl	8104298 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 810289a:	2027      	movs	r0, #39	; 0x27
 810289c:	f001 fd16 	bl	81042cc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 81028a0:	bf00      	nop
 81028a2:	37e0      	adds	r7, #224	; 0xe0
 81028a4:	46bd      	mov	sp, r7
 81028a6:	bd80      	pop	{r7, pc}
 81028a8:	40004800 	.word	0x40004800
 81028ac:	58024400 	.word	0x58024400
 81028b0:	58020c00 	.word	0x58020c00
 81028b4:	10005428 	.word	0x10005428
 81028b8:	400200b8 	.word	0x400200b8
 81028bc:	10005530 	.word	0x10005530
 81028c0:	40020410 	.word	0x40020410

081028c4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 81028c4:	f8df d034 	ldr.w	sp, [pc, #52]	; 81028fc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 81028c8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 81028ca:	e003      	b.n	81028d4 <LoopCopyDataInit>

081028cc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 81028cc:	4b0c      	ldr	r3, [pc, #48]	; (8102900 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 81028ce:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 81028d0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 81028d2:	3104      	adds	r1, #4

081028d4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 81028d4:	480b      	ldr	r0, [pc, #44]	; (8102904 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 81028d6:	4b0c      	ldr	r3, [pc, #48]	; (8102908 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 81028d8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 81028da:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 81028dc:	d3f6      	bcc.n	81028cc <CopyDataInit>
  ldr  r2, =_sbss
 81028de:	4a0b      	ldr	r2, [pc, #44]	; (810290c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 81028e0:	e002      	b.n	81028e8 <LoopFillZerobss>

081028e2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 81028e2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 81028e4:	f842 3b04 	str.w	r3, [r2], #4

081028e8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 81028e8:	4b09      	ldr	r3, [pc, #36]	; (8102910 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 81028ea:	429a      	cmp	r2, r3
  bcc  FillZerobss
 81028ec:	d3f9      	bcc.n	81028e2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 81028ee:	f7fe fb5f 	bl	8100fb0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 81028f2:	f016 f845 	bl	8118980 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 81028f6:	f7fe ff33 	bl	8101760 <main>
  bx  lr    
 81028fa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 81028fc:	10048000 	.word	0x10048000
  ldr  r3, =_sidata
 8102900:	0811b8ec 	.word	0x0811b8ec
  ldr  r0, =_sdata
 8102904:	10000000 	.word	0x10000000
  ldr  r3, =_edata
 8102908:	10000358 	.word	0x10000358
  ldr  r2, =_sbss
 810290c:	10000358 	.word	0x10000358
  ldr  r3, = _ebss
 8102910:	10008f44 	.word	0x10008f44

08102914 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8102914:	e7fe      	b.n	8102914 <ADC3_IRQHandler>
	...

08102918 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8102918:	b580      	push	{r7, lr}
 810291a:	b082      	sub	sp, #8
 810291c:	af00      	add	r7, sp, #0

uint32_t common_system_clock;

#if defined(DUAL_CORE) && defined(CORE_CM4)
   /* Configure Cortex-M4 Instruction cache through ART accelerator */
   __HAL_RCC_ART_CLK_ENABLE();                   /* Enable the Cortex-M4 ART Clock */
 810291e:	4b28      	ldr	r3, [pc, #160]	; (81029c0 <HAL_Init+0xa8>)
 8102920:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8102924:	4a26      	ldr	r2, [pc, #152]	; (81029c0 <HAL_Init+0xa8>)
 8102926:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 810292a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 810292e:	4b24      	ldr	r3, [pc, #144]	; (81029c0 <HAL_Init+0xa8>)
 8102930:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8102934:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8102938:	603b      	str	r3, [r7, #0]
 810293a:	683b      	ldr	r3, [r7, #0]
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
 810293c:	4b21      	ldr	r3, [pc, #132]	; (81029c4 <HAL_Init+0xac>)
 810293e:	681b      	ldr	r3, [r3, #0]
 8102940:	f423 237f 	bic.w	r3, r3, #1044480	; 0xff000
 8102944:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8102948:	4a1e      	ldr	r2, [pc, #120]	; (81029c4 <HAL_Init+0xac>)
 810294a:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 810294e:	6013      	str	r3, [r2, #0]
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
 8102950:	4b1c      	ldr	r3, [pc, #112]	; (81029c4 <HAL_Init+0xac>)
 8102952:	681b      	ldr	r3, [r3, #0]
 8102954:	4a1b      	ldr	r2, [pc, #108]	; (81029c4 <HAL_Init+0xac>)
 8102956:	f043 0301 	orr.w	r3, r3, #1
 810295a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 810295c:	2003      	movs	r0, #3
 810295e:	f001 fc90 	bl	8104282 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8102962:	f006 ff5f 	bl	8109824 <HAL_RCC_GetSysClockFreq>
 8102966:	4602      	mov	r2, r0
 8102968:	4b15      	ldr	r3, [pc, #84]	; (81029c0 <HAL_Init+0xa8>)
 810296a:	699b      	ldr	r3, [r3, #24]
 810296c:	0a1b      	lsrs	r3, r3, #8
 810296e:	f003 030f 	and.w	r3, r3, #15
 8102972:	4915      	ldr	r1, [pc, #84]	; (81029c8 <HAL_Init+0xb0>)
 8102974:	5ccb      	ldrb	r3, [r1, r3]
 8102976:	f003 031f 	and.w	r3, r3, #31
 810297a:	fa22 f303 	lsr.w	r3, r2, r3
 810297e:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8102980:	4b0f      	ldr	r3, [pc, #60]	; (81029c0 <HAL_Init+0xa8>)
 8102982:	699b      	ldr	r3, [r3, #24]
 8102984:	f003 030f 	and.w	r3, r3, #15
 8102988:	4a0f      	ldr	r2, [pc, #60]	; (81029c8 <HAL_Init+0xb0>)
 810298a:	5cd3      	ldrb	r3, [r2, r3]
 810298c:	f003 031f 	and.w	r3, r3, #31
 8102990:	687a      	ldr	r2, [r7, #4]
 8102992:	fa22 f303 	lsr.w	r3, r2, r3
 8102996:	4a0d      	ldr	r2, [pc, #52]	; (81029cc <HAL_Init+0xb4>)
 8102998:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 810299a:	4b0c      	ldr	r3, [pc, #48]	; (81029cc <HAL_Init+0xb4>)
 810299c:	681b      	ldr	r3, [r3, #0]
 810299e:	4a0c      	ldr	r2, [pc, #48]	; (81029d0 <HAL_Init+0xb8>)
 81029a0:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 81029a2:	2000      	movs	r0, #0
 81029a4:	f7ff fafc 	bl	8101fa0 <HAL_InitTick>
 81029a8:	4603      	mov	r3, r0
 81029aa:	2b00      	cmp	r3, #0
 81029ac:	d001      	beq.n	81029b2 <HAL_Init+0x9a>
  {
    return HAL_ERROR;
 81029ae:	2301      	movs	r3, #1
 81029b0:	e002      	b.n	81029b8 <HAL_Init+0xa0>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 81029b2:	f7ff fac7 	bl	8101f44 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 81029b6:	2300      	movs	r3, #0
}
 81029b8:	4618      	mov	r0, r3
 81029ba:	3708      	adds	r7, #8
 81029bc:	46bd      	mov	sp, r7
 81029be:	bd80      	pop	{r7, pc}
 81029c0:	58024400 	.word	0x58024400
 81029c4:	40024400 	.word	0x40024400
 81029c8:	0811b480 	.word	0x0811b480
 81029cc:	10000004 	.word	0x10000004
 81029d0:	10000000 	.word	0x10000000

081029d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 81029d4:	b480      	push	{r7}
 81029d6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 81029d8:	4b06      	ldr	r3, [pc, #24]	; (81029f4 <HAL_IncTick+0x20>)
 81029da:	781b      	ldrb	r3, [r3, #0]
 81029dc:	461a      	mov	r2, r3
 81029de:	4b06      	ldr	r3, [pc, #24]	; (81029f8 <HAL_IncTick+0x24>)
 81029e0:	681b      	ldr	r3, [r3, #0]
 81029e2:	4413      	add	r3, r2
 81029e4:	4a04      	ldr	r2, [pc, #16]	; (81029f8 <HAL_IncTick+0x24>)
 81029e6:	6013      	str	r3, [r2, #0]
}
 81029e8:	bf00      	nop
 81029ea:	46bd      	mov	sp, r7
 81029ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 81029f0:	4770      	bx	lr
 81029f2:	bf00      	nop
 81029f4:	1000000c 	.word	0x1000000c
 81029f8:	100055a8 	.word	0x100055a8

081029fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 81029fc:	b480      	push	{r7}
 81029fe:	af00      	add	r7, sp, #0
  return uwTick;
 8102a00:	4b03      	ldr	r3, [pc, #12]	; (8102a10 <HAL_GetTick+0x14>)
 8102a02:	681b      	ldr	r3, [r3, #0]
}
 8102a04:	4618      	mov	r0, r3
 8102a06:	46bd      	mov	sp, r7
 8102a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102a0c:	4770      	bx	lr
 8102a0e:	bf00      	nop
 8102a10:	100055a8 	.word	0x100055a8

08102a14 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8102a14:	b580      	push	{r7, lr}
 8102a16:	b084      	sub	sp, #16
 8102a18:	af00      	add	r7, sp, #0
 8102a1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8102a1c:	f7ff ffee 	bl	81029fc <HAL_GetTick>
 8102a20:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8102a22:	687b      	ldr	r3, [r7, #4]
 8102a24:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8102a26:	68fb      	ldr	r3, [r7, #12]
 8102a28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8102a2c:	d005      	beq.n	8102a3a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8102a2e:	4b0a      	ldr	r3, [pc, #40]	; (8102a58 <HAL_Delay+0x44>)
 8102a30:	781b      	ldrb	r3, [r3, #0]
 8102a32:	461a      	mov	r2, r3
 8102a34:	68fb      	ldr	r3, [r7, #12]
 8102a36:	4413      	add	r3, r2
 8102a38:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8102a3a:	bf00      	nop
 8102a3c:	f7ff ffde 	bl	81029fc <HAL_GetTick>
 8102a40:	4602      	mov	r2, r0
 8102a42:	68bb      	ldr	r3, [r7, #8]
 8102a44:	1ad3      	subs	r3, r2, r3
 8102a46:	68fa      	ldr	r2, [r7, #12]
 8102a48:	429a      	cmp	r2, r3
 8102a4a:	d8f7      	bhi.n	8102a3c <HAL_Delay+0x28>
  {
  }
}
 8102a4c:	bf00      	nop
 8102a4e:	bf00      	nop
 8102a50:	3710      	adds	r7, #16
 8102a52:	46bd      	mov	sp, r7
 8102a54:	bd80      	pop	{r7, pc}
 8102a56:	bf00      	nop
 8102a58:	1000000c 	.word	0x1000000c

08102a5c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8102a5c:	b480      	push	{r7}
 8102a5e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8102a60:	4b03      	ldr	r3, [pc, #12]	; (8102a70 <HAL_GetREVID+0x14>)
 8102a62:	681b      	ldr	r3, [r3, #0]
 8102a64:	0c1b      	lsrs	r3, r3, #16
}
 8102a66:	4618      	mov	r0, r3
 8102a68:	46bd      	mov	sp, r7
 8102a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102a6e:	4770      	bx	lr
 8102a70:	5c001000 	.word	0x5c001000

08102a74 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8102a74:	b480      	push	{r7}
 8102a76:	b083      	sub	sp, #12
 8102a78:	af00      	add	r7, sp, #0
 8102a7a:	6078      	str	r0, [r7, #4]
 8102a7c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8102a7e:	687b      	ldr	r3, [r7, #4]
 8102a80:	689b      	ldr	r3, [r3, #8]
 8102a82:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8102a86:	683b      	ldr	r3, [r7, #0]
 8102a88:	431a      	orrs	r2, r3
 8102a8a:	687b      	ldr	r3, [r7, #4]
 8102a8c:	609a      	str	r2, [r3, #8]
}
 8102a8e:	bf00      	nop
 8102a90:	370c      	adds	r7, #12
 8102a92:	46bd      	mov	sp, r7
 8102a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102a98:	4770      	bx	lr

08102a9a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8102a9a:	b480      	push	{r7}
 8102a9c:	b083      	sub	sp, #12
 8102a9e:	af00      	add	r7, sp, #0
 8102aa0:	6078      	str	r0, [r7, #4]
 8102aa2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8102aa4:	687b      	ldr	r3, [r7, #4]
 8102aa6:	689b      	ldr	r3, [r3, #8]
 8102aa8:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8102aac:	683b      	ldr	r3, [r7, #0]
 8102aae:	431a      	orrs	r2, r3
 8102ab0:	687b      	ldr	r3, [r7, #4]
 8102ab2:	609a      	str	r2, [r3, #8]
}
 8102ab4:	bf00      	nop
 8102ab6:	370c      	adds	r7, #12
 8102ab8:	46bd      	mov	sp, r7
 8102aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102abe:	4770      	bx	lr

08102ac0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8102ac0:	b480      	push	{r7}
 8102ac2:	b083      	sub	sp, #12
 8102ac4:	af00      	add	r7, sp, #0
 8102ac6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8102ac8:	687b      	ldr	r3, [r7, #4]
 8102aca:	689b      	ldr	r3, [r3, #8]
 8102acc:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8102ad0:	4618      	mov	r0, r3
 8102ad2:	370c      	adds	r7, #12
 8102ad4:	46bd      	mov	sp, r7
 8102ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102ada:	4770      	bx	lr

08102adc <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8102adc:	b480      	push	{r7}
 8102ade:	b087      	sub	sp, #28
 8102ae0:	af00      	add	r7, sp, #0
 8102ae2:	60f8      	str	r0, [r7, #12]
 8102ae4:	60b9      	str	r1, [r7, #8]
 8102ae6:	607a      	str	r2, [r7, #4]
 8102ae8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8102aea:	68fb      	ldr	r3, [r7, #12]
 8102aec:	3360      	adds	r3, #96	; 0x60
 8102aee:	461a      	mov	r2, r3
 8102af0:	68bb      	ldr	r3, [r7, #8]
 8102af2:	009b      	lsls	r3, r3, #2
 8102af4:	4413      	add	r3, r2
 8102af6:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8102af8:	697b      	ldr	r3, [r7, #20]
 8102afa:	681b      	ldr	r3, [r3, #0]
 8102afc:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8102b00:	687b      	ldr	r3, [r7, #4]
 8102b02:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8102b06:	683b      	ldr	r3, [r7, #0]
 8102b08:	430b      	orrs	r3, r1
 8102b0a:	431a      	orrs	r2, r3
 8102b0c:	697b      	ldr	r3, [r7, #20]
 8102b0e:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8102b10:	bf00      	nop
 8102b12:	371c      	adds	r7, #28
 8102b14:	46bd      	mov	sp, r7
 8102b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102b1a:	4770      	bx	lr

08102b1c <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8102b1c:	b480      	push	{r7}
 8102b1e:	b085      	sub	sp, #20
 8102b20:	af00      	add	r7, sp, #0
 8102b22:	60f8      	str	r0, [r7, #12]
 8102b24:	60b9      	str	r1, [r7, #8]
 8102b26:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8102b28:	68fb      	ldr	r3, [r7, #12]
 8102b2a:	691b      	ldr	r3, [r3, #16]
 8102b2c:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8102b30:	68bb      	ldr	r3, [r7, #8]
 8102b32:	f003 031f 	and.w	r3, r3, #31
 8102b36:	6879      	ldr	r1, [r7, #4]
 8102b38:	fa01 f303 	lsl.w	r3, r1, r3
 8102b3c:	431a      	orrs	r2, r3
 8102b3e:	68fb      	ldr	r3, [r7, #12]
 8102b40:	611a      	str	r2, [r3, #16]
}
 8102b42:	bf00      	nop
 8102b44:	3714      	adds	r7, #20
 8102b46:	46bd      	mov	sp, r7
 8102b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102b4c:	4770      	bx	lr

08102b4e <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8102b4e:	b480      	push	{r7}
 8102b50:	b087      	sub	sp, #28
 8102b52:	af00      	add	r7, sp, #0
 8102b54:	60f8      	str	r0, [r7, #12]
 8102b56:	60b9      	str	r1, [r7, #8]
 8102b58:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8102b5a:	68fb      	ldr	r3, [r7, #12]
 8102b5c:	3360      	adds	r3, #96	; 0x60
 8102b5e:	461a      	mov	r2, r3
 8102b60:	68bb      	ldr	r3, [r7, #8]
 8102b62:	009b      	lsls	r3, r3, #2
 8102b64:	4413      	add	r3, r2
 8102b66:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8102b68:	697b      	ldr	r3, [r7, #20]
 8102b6a:	681b      	ldr	r3, [r3, #0]
 8102b6c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8102b70:	687b      	ldr	r3, [r7, #4]
 8102b72:	431a      	orrs	r2, r3
 8102b74:	697b      	ldr	r3, [r7, #20]
 8102b76:	601a      	str	r2, [r3, #0]
  }
}
 8102b78:	bf00      	nop
 8102b7a:	371c      	adds	r7, #28
 8102b7c:	46bd      	mov	sp, r7
 8102b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102b82:	4770      	bx	lr

08102b84 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8102b84:	b480      	push	{r7}
 8102b86:	b083      	sub	sp, #12
 8102b88:	af00      	add	r7, sp, #0
 8102b8a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8102b8c:	687b      	ldr	r3, [r7, #4]
 8102b8e:	68db      	ldr	r3, [r3, #12]
 8102b90:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8102b94:	2b00      	cmp	r3, #0
 8102b96:	d101      	bne.n	8102b9c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8102b98:	2301      	movs	r3, #1
 8102b9a:	e000      	b.n	8102b9e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8102b9c:	2300      	movs	r3, #0
}
 8102b9e:	4618      	mov	r0, r3
 8102ba0:	370c      	adds	r7, #12
 8102ba2:	46bd      	mov	sp, r7
 8102ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102ba8:	4770      	bx	lr

08102baa <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8102baa:	b480      	push	{r7}
 8102bac:	b087      	sub	sp, #28
 8102bae:	af00      	add	r7, sp, #0
 8102bb0:	60f8      	str	r0, [r7, #12]
 8102bb2:	60b9      	str	r1, [r7, #8]
 8102bb4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8102bb6:	68fb      	ldr	r3, [r7, #12]
 8102bb8:	3330      	adds	r3, #48	; 0x30
 8102bba:	461a      	mov	r2, r3
 8102bbc:	68bb      	ldr	r3, [r7, #8]
 8102bbe:	0a1b      	lsrs	r3, r3, #8
 8102bc0:	009b      	lsls	r3, r3, #2
 8102bc2:	f003 030c 	and.w	r3, r3, #12
 8102bc6:	4413      	add	r3, r2
 8102bc8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8102bca:	697b      	ldr	r3, [r7, #20]
 8102bcc:	681a      	ldr	r2, [r3, #0]
 8102bce:	68bb      	ldr	r3, [r7, #8]
 8102bd0:	f003 031f 	and.w	r3, r3, #31
 8102bd4:	211f      	movs	r1, #31
 8102bd6:	fa01 f303 	lsl.w	r3, r1, r3
 8102bda:	43db      	mvns	r3, r3
 8102bdc:	401a      	ands	r2, r3
 8102bde:	687b      	ldr	r3, [r7, #4]
 8102be0:	0e9b      	lsrs	r3, r3, #26
 8102be2:	f003 011f 	and.w	r1, r3, #31
 8102be6:	68bb      	ldr	r3, [r7, #8]
 8102be8:	f003 031f 	and.w	r3, r3, #31
 8102bec:	fa01 f303 	lsl.w	r3, r1, r3
 8102bf0:	431a      	orrs	r2, r3
 8102bf2:	697b      	ldr	r3, [r7, #20]
 8102bf4:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8102bf6:	bf00      	nop
 8102bf8:	371c      	adds	r7, #28
 8102bfa:	46bd      	mov	sp, r7
 8102bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102c00:	4770      	bx	lr

08102c02 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8102c02:	b480      	push	{r7}
 8102c04:	b083      	sub	sp, #12
 8102c06:	af00      	add	r7, sp, #0
 8102c08:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8102c0a:	687b      	ldr	r3, [r7, #4]
 8102c0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8102c0e:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8102c12:	2b00      	cmp	r3, #0
 8102c14:	d101      	bne.n	8102c1a <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8102c16:	2301      	movs	r3, #1
 8102c18:	e000      	b.n	8102c1c <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8102c1a:	2300      	movs	r3, #0
}
 8102c1c:	4618      	mov	r0, r3
 8102c1e:	370c      	adds	r7, #12
 8102c20:	46bd      	mov	sp, r7
 8102c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102c26:	4770      	bx	lr

08102c28 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8102c28:	b480      	push	{r7}
 8102c2a:	b087      	sub	sp, #28
 8102c2c:	af00      	add	r7, sp, #0
 8102c2e:	60f8      	str	r0, [r7, #12]
 8102c30:	60b9      	str	r1, [r7, #8]
 8102c32:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8102c34:	68fb      	ldr	r3, [r7, #12]
 8102c36:	3314      	adds	r3, #20
 8102c38:	461a      	mov	r2, r3
 8102c3a:	68bb      	ldr	r3, [r7, #8]
 8102c3c:	0e5b      	lsrs	r3, r3, #25
 8102c3e:	009b      	lsls	r3, r3, #2
 8102c40:	f003 0304 	and.w	r3, r3, #4
 8102c44:	4413      	add	r3, r2
 8102c46:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8102c48:	697b      	ldr	r3, [r7, #20]
 8102c4a:	681a      	ldr	r2, [r3, #0]
 8102c4c:	68bb      	ldr	r3, [r7, #8]
 8102c4e:	0d1b      	lsrs	r3, r3, #20
 8102c50:	f003 031f 	and.w	r3, r3, #31
 8102c54:	2107      	movs	r1, #7
 8102c56:	fa01 f303 	lsl.w	r3, r1, r3
 8102c5a:	43db      	mvns	r3, r3
 8102c5c:	401a      	ands	r2, r3
 8102c5e:	68bb      	ldr	r3, [r7, #8]
 8102c60:	0d1b      	lsrs	r3, r3, #20
 8102c62:	f003 031f 	and.w	r3, r3, #31
 8102c66:	6879      	ldr	r1, [r7, #4]
 8102c68:	fa01 f303 	lsl.w	r3, r1, r3
 8102c6c:	431a      	orrs	r2, r3
 8102c6e:	697b      	ldr	r3, [r7, #20]
 8102c70:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8102c72:	bf00      	nop
 8102c74:	371c      	adds	r7, #28
 8102c76:	46bd      	mov	sp, r7
 8102c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102c7c:	4770      	bx	lr
	...

08102c80 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8102c80:	b480      	push	{r7}
 8102c82:	b085      	sub	sp, #20
 8102c84:	af00      	add	r7, sp, #0
 8102c86:	60f8      	str	r0, [r7, #12]
 8102c88:	60b9      	str	r1, [r7, #8]
 8102c8a:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8102c8c:	68fb      	ldr	r3, [r7, #12]
 8102c8e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8102c92:	68bb      	ldr	r3, [r7, #8]
 8102c94:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8102c98:	43db      	mvns	r3, r3
 8102c9a:	401a      	ands	r2, r3
 8102c9c:	687b      	ldr	r3, [r7, #4]
 8102c9e:	f003 0318 	and.w	r3, r3, #24
 8102ca2:	4908      	ldr	r1, [pc, #32]	; (8102cc4 <LL_ADC_SetChannelSingleDiff+0x44>)
 8102ca4:	40d9      	lsrs	r1, r3
 8102ca6:	68bb      	ldr	r3, [r7, #8]
 8102ca8:	400b      	ands	r3, r1
 8102caa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8102cae:	431a      	orrs	r2, r3
 8102cb0:	68fb      	ldr	r3, [r7, #12]
 8102cb2:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 8102cb6:	bf00      	nop
 8102cb8:	3714      	adds	r7, #20
 8102cba:	46bd      	mov	sp, r7
 8102cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102cc0:	4770      	bx	lr
 8102cc2:	bf00      	nop
 8102cc4:	000fffff 	.word	0x000fffff

08102cc8 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8102cc8:	b480      	push	{r7}
 8102cca:	b083      	sub	sp, #12
 8102ccc:	af00      	add	r7, sp, #0
 8102cce:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8102cd0:	687b      	ldr	r3, [r7, #4]
 8102cd2:	689b      	ldr	r3, [r3, #8]
 8102cd4:	f003 031f 	and.w	r3, r3, #31
}
 8102cd8:	4618      	mov	r0, r3
 8102cda:	370c      	adds	r7, #12
 8102cdc:	46bd      	mov	sp, r7
 8102cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102ce2:	4770      	bx	lr

08102ce4 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8102ce4:	b480      	push	{r7}
 8102ce6:	b083      	sub	sp, #12
 8102ce8:	af00      	add	r7, sp, #0
 8102cea:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8102cec:	687b      	ldr	r3, [r7, #4]
 8102cee:	689b      	ldr	r3, [r3, #8]
 8102cf0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
}
 8102cf4:	4618      	mov	r0, r3
 8102cf6:	370c      	adds	r7, #12
 8102cf8:	46bd      	mov	sp, r7
 8102cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102cfe:	4770      	bx	lr

08102d00 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8102d00:	b480      	push	{r7}
 8102d02:	b083      	sub	sp, #12
 8102d04:	af00      	add	r7, sp, #0
 8102d06:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8102d08:	687b      	ldr	r3, [r7, #4]
 8102d0a:	689b      	ldr	r3, [r3, #8]
 8102d0c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8102d10:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8102d14:	687a      	ldr	r2, [r7, #4]
 8102d16:	6093      	str	r3, [r2, #8]
}
 8102d18:	bf00      	nop
 8102d1a:	370c      	adds	r7, #12
 8102d1c:	46bd      	mov	sp, r7
 8102d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102d22:	4770      	bx	lr

08102d24 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8102d24:	b480      	push	{r7}
 8102d26:	b083      	sub	sp, #12
 8102d28:	af00      	add	r7, sp, #0
 8102d2a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8102d2c:	687b      	ldr	r3, [r7, #4]
 8102d2e:	689b      	ldr	r3, [r3, #8]
 8102d30:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8102d34:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8102d38:	d101      	bne.n	8102d3e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8102d3a:	2301      	movs	r3, #1
 8102d3c:	e000      	b.n	8102d40 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8102d3e:	2300      	movs	r3, #0
}
 8102d40:	4618      	mov	r0, r3
 8102d42:	370c      	adds	r7, #12
 8102d44:	46bd      	mov	sp, r7
 8102d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102d4a:	4770      	bx	lr

08102d4c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8102d4c:	b480      	push	{r7}
 8102d4e:	b083      	sub	sp, #12
 8102d50:	af00      	add	r7, sp, #0
 8102d52:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8102d54:	687b      	ldr	r3, [r7, #4]
 8102d56:	689b      	ldr	r3, [r3, #8]
 8102d58:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8102d5c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8102d60:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8102d64:	687b      	ldr	r3, [r7, #4]
 8102d66:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8102d68:	bf00      	nop
 8102d6a:	370c      	adds	r7, #12
 8102d6c:	46bd      	mov	sp, r7
 8102d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102d72:	4770      	bx	lr

08102d74 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8102d74:	b480      	push	{r7}
 8102d76:	b083      	sub	sp, #12
 8102d78:	af00      	add	r7, sp, #0
 8102d7a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8102d7c:	687b      	ldr	r3, [r7, #4]
 8102d7e:	689b      	ldr	r3, [r3, #8]
 8102d80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8102d84:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8102d88:	d101      	bne.n	8102d8e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8102d8a:	2301      	movs	r3, #1
 8102d8c:	e000      	b.n	8102d90 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8102d8e:	2300      	movs	r3, #0
}
 8102d90:	4618      	mov	r0, r3
 8102d92:	370c      	adds	r7, #12
 8102d94:	46bd      	mov	sp, r7
 8102d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102d9a:	4770      	bx	lr

08102d9c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8102d9c:	b480      	push	{r7}
 8102d9e:	b083      	sub	sp, #12
 8102da0:	af00      	add	r7, sp, #0
 8102da2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8102da4:	687b      	ldr	r3, [r7, #4]
 8102da6:	689b      	ldr	r3, [r3, #8]
 8102da8:	f003 0301 	and.w	r3, r3, #1
 8102dac:	2b01      	cmp	r3, #1
 8102dae:	d101      	bne.n	8102db4 <LL_ADC_IsEnabled+0x18>
 8102db0:	2301      	movs	r3, #1
 8102db2:	e000      	b.n	8102db6 <LL_ADC_IsEnabled+0x1a>
 8102db4:	2300      	movs	r3, #0
}
 8102db6:	4618      	mov	r0, r3
 8102db8:	370c      	adds	r7, #12
 8102dba:	46bd      	mov	sp, r7
 8102dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102dc0:	4770      	bx	lr

08102dc2 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8102dc2:	b480      	push	{r7}
 8102dc4:	b083      	sub	sp, #12
 8102dc6:	af00      	add	r7, sp, #0
 8102dc8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8102dca:	687b      	ldr	r3, [r7, #4]
 8102dcc:	689b      	ldr	r3, [r3, #8]
 8102dce:	f003 0304 	and.w	r3, r3, #4
 8102dd2:	2b04      	cmp	r3, #4
 8102dd4:	d101      	bne.n	8102dda <LL_ADC_REG_IsConversionOngoing+0x18>
 8102dd6:	2301      	movs	r3, #1
 8102dd8:	e000      	b.n	8102ddc <LL_ADC_REG_IsConversionOngoing+0x1a>
 8102dda:	2300      	movs	r3, #0
}
 8102ddc:	4618      	mov	r0, r3
 8102dde:	370c      	adds	r7, #12
 8102de0:	46bd      	mov	sp, r7
 8102de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102de6:	4770      	bx	lr

08102de8 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8102de8:	b480      	push	{r7}
 8102dea:	b083      	sub	sp, #12
 8102dec:	af00      	add	r7, sp, #0
 8102dee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8102df0:	687b      	ldr	r3, [r7, #4]
 8102df2:	689b      	ldr	r3, [r3, #8]
 8102df4:	f003 0308 	and.w	r3, r3, #8
 8102df8:	2b08      	cmp	r3, #8
 8102dfa:	d101      	bne.n	8102e00 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8102dfc:	2301      	movs	r3, #1
 8102dfe:	e000      	b.n	8102e02 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8102e00:	2300      	movs	r3, #0
}
 8102e02:	4618      	mov	r0, r3
 8102e04:	370c      	adds	r7, #12
 8102e06:	46bd      	mov	sp, r7
 8102e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102e0c:	4770      	bx	lr
	...

08102e10 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8102e10:	b590      	push	{r4, r7, lr}
 8102e12:	b089      	sub	sp, #36	; 0x24
 8102e14:	af00      	add	r7, sp, #0
 8102e16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8102e18:	2300      	movs	r3, #0
 8102e1a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8102e1c:	2300      	movs	r3, #0
 8102e1e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8102e20:	687b      	ldr	r3, [r7, #4]
 8102e22:	2b00      	cmp	r3, #0
 8102e24:	d101      	bne.n	8102e2a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8102e26:	2301      	movs	r3, #1
 8102e28:	e18e      	b.n	8103148 <HAL_ADC_Init+0x338>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8102e2a:	687b      	ldr	r3, [r7, #4]
 8102e2c:	68db      	ldr	r3, [r3, #12]
 8102e2e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8102e30:	687b      	ldr	r3, [r7, #4]
 8102e32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8102e34:	2b00      	cmp	r3, #0
 8102e36:	d109      	bne.n	8102e4c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8102e38:	6878      	ldr	r0, [r7, #4]
 8102e3a:	f7fe f94f 	bl	81010dc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8102e3e:	687b      	ldr	r3, [r7, #4]
 8102e40:	2200      	movs	r2, #0
 8102e42:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8102e44:	687b      	ldr	r3, [r7, #4]
 8102e46:	2200      	movs	r2, #0
 8102e48:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8102e4c:	687b      	ldr	r3, [r7, #4]
 8102e4e:	681b      	ldr	r3, [r3, #0]
 8102e50:	4618      	mov	r0, r3
 8102e52:	f7ff ff67 	bl	8102d24 <LL_ADC_IsDeepPowerDownEnabled>
 8102e56:	4603      	mov	r3, r0
 8102e58:	2b00      	cmp	r3, #0
 8102e5a:	d004      	beq.n	8102e66 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8102e5c:	687b      	ldr	r3, [r7, #4]
 8102e5e:	681b      	ldr	r3, [r3, #0]
 8102e60:	4618      	mov	r0, r3
 8102e62:	f7ff ff4d 	bl	8102d00 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8102e66:	687b      	ldr	r3, [r7, #4]
 8102e68:	681b      	ldr	r3, [r3, #0]
 8102e6a:	4618      	mov	r0, r3
 8102e6c:	f7ff ff82 	bl	8102d74 <LL_ADC_IsInternalRegulatorEnabled>
 8102e70:	4603      	mov	r3, r0
 8102e72:	2b00      	cmp	r3, #0
 8102e74:	d114      	bne.n	8102ea0 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8102e76:	687b      	ldr	r3, [r7, #4]
 8102e78:	681b      	ldr	r3, [r3, #0]
 8102e7a:	4618      	mov	r0, r3
 8102e7c:	f7ff ff66 	bl	8102d4c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8102e80:	4b9b      	ldr	r3, [pc, #620]	; (81030f0 <HAL_ADC_Init+0x2e0>)
 8102e82:	681b      	ldr	r3, [r3, #0]
 8102e84:	099b      	lsrs	r3, r3, #6
 8102e86:	4a9b      	ldr	r2, [pc, #620]	; (81030f4 <HAL_ADC_Init+0x2e4>)
 8102e88:	fba2 2303 	umull	r2, r3, r2, r3
 8102e8c:	099b      	lsrs	r3, r3, #6
 8102e8e:	3301      	adds	r3, #1
 8102e90:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8102e92:	e002      	b.n	8102e9a <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8102e94:	68bb      	ldr	r3, [r7, #8]
 8102e96:	3b01      	subs	r3, #1
 8102e98:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8102e9a:	68bb      	ldr	r3, [r7, #8]
 8102e9c:	2b00      	cmp	r3, #0
 8102e9e:	d1f9      	bne.n	8102e94 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8102ea0:	687b      	ldr	r3, [r7, #4]
 8102ea2:	681b      	ldr	r3, [r3, #0]
 8102ea4:	4618      	mov	r0, r3
 8102ea6:	f7ff ff65 	bl	8102d74 <LL_ADC_IsInternalRegulatorEnabled>
 8102eaa:	4603      	mov	r3, r0
 8102eac:	2b00      	cmp	r3, #0
 8102eae:	d10d      	bne.n	8102ecc <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8102eb0:	687b      	ldr	r3, [r7, #4]
 8102eb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8102eb4:	f043 0210 	orr.w	r2, r3, #16
 8102eb8:	687b      	ldr	r3, [r7, #4]
 8102eba:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8102ebc:	687b      	ldr	r3, [r7, #4]
 8102ebe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8102ec0:	f043 0201 	orr.w	r2, r3, #1
 8102ec4:	687b      	ldr	r3, [r7, #4]
 8102ec6:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8102ec8:	2301      	movs	r3, #1
 8102eca:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8102ecc:	687b      	ldr	r3, [r7, #4]
 8102ece:	681b      	ldr	r3, [r3, #0]
 8102ed0:	4618      	mov	r0, r3
 8102ed2:	f7ff ff76 	bl	8102dc2 <LL_ADC_REG_IsConversionOngoing>
 8102ed6:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8102ed8:	687b      	ldr	r3, [r7, #4]
 8102eda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8102edc:	f003 0310 	and.w	r3, r3, #16
 8102ee0:	2b00      	cmp	r3, #0
 8102ee2:	f040 8128 	bne.w	8103136 <HAL_ADC_Init+0x326>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8102ee6:	697b      	ldr	r3, [r7, #20]
 8102ee8:	2b00      	cmp	r3, #0
 8102eea:	f040 8124 	bne.w	8103136 <HAL_ADC_Init+0x326>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8102eee:	687b      	ldr	r3, [r7, #4]
 8102ef0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8102ef2:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8102ef6:	f043 0202 	orr.w	r2, r3, #2
 8102efa:	687b      	ldr	r3, [r7, #4]
 8102efc:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8102efe:	687b      	ldr	r3, [r7, #4]
 8102f00:	681b      	ldr	r3, [r3, #0]
 8102f02:	4618      	mov	r0, r3
 8102f04:	f7ff ff4a 	bl	8102d9c <LL_ADC_IsEnabled>
 8102f08:	4603      	mov	r3, r0
 8102f0a:	2b00      	cmp	r3, #0
 8102f0c:	d136      	bne.n	8102f7c <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8102f0e:	687b      	ldr	r3, [r7, #4]
 8102f10:	681b      	ldr	r3, [r3, #0]
 8102f12:	4a79      	ldr	r2, [pc, #484]	; (81030f8 <HAL_ADC_Init+0x2e8>)
 8102f14:	4293      	cmp	r3, r2
 8102f16:	d004      	beq.n	8102f22 <HAL_ADC_Init+0x112>
 8102f18:	687b      	ldr	r3, [r7, #4]
 8102f1a:	681b      	ldr	r3, [r3, #0]
 8102f1c:	4a77      	ldr	r2, [pc, #476]	; (81030fc <HAL_ADC_Init+0x2ec>)
 8102f1e:	4293      	cmp	r3, r2
 8102f20:	d10e      	bne.n	8102f40 <HAL_ADC_Init+0x130>
 8102f22:	4875      	ldr	r0, [pc, #468]	; (81030f8 <HAL_ADC_Init+0x2e8>)
 8102f24:	f7ff ff3a 	bl	8102d9c <LL_ADC_IsEnabled>
 8102f28:	4604      	mov	r4, r0
 8102f2a:	4874      	ldr	r0, [pc, #464]	; (81030fc <HAL_ADC_Init+0x2ec>)
 8102f2c:	f7ff ff36 	bl	8102d9c <LL_ADC_IsEnabled>
 8102f30:	4603      	mov	r3, r0
 8102f32:	4323      	orrs	r3, r4
 8102f34:	2b00      	cmp	r3, #0
 8102f36:	bf0c      	ite	eq
 8102f38:	2301      	moveq	r3, #1
 8102f3a:	2300      	movne	r3, #0
 8102f3c:	b2db      	uxtb	r3, r3
 8102f3e:	e008      	b.n	8102f52 <HAL_ADC_Init+0x142>
 8102f40:	486f      	ldr	r0, [pc, #444]	; (8103100 <HAL_ADC_Init+0x2f0>)
 8102f42:	f7ff ff2b 	bl	8102d9c <LL_ADC_IsEnabled>
 8102f46:	4603      	mov	r3, r0
 8102f48:	2b00      	cmp	r3, #0
 8102f4a:	bf0c      	ite	eq
 8102f4c:	2301      	moveq	r3, #1
 8102f4e:	2300      	movne	r3, #0
 8102f50:	b2db      	uxtb	r3, r3
 8102f52:	2b00      	cmp	r3, #0
 8102f54:	d012      	beq.n	8102f7c <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8102f56:	687b      	ldr	r3, [r7, #4]
 8102f58:	681b      	ldr	r3, [r3, #0]
 8102f5a:	4a67      	ldr	r2, [pc, #412]	; (81030f8 <HAL_ADC_Init+0x2e8>)
 8102f5c:	4293      	cmp	r3, r2
 8102f5e:	d004      	beq.n	8102f6a <HAL_ADC_Init+0x15a>
 8102f60:	687b      	ldr	r3, [r7, #4]
 8102f62:	681b      	ldr	r3, [r3, #0]
 8102f64:	4a65      	ldr	r2, [pc, #404]	; (81030fc <HAL_ADC_Init+0x2ec>)
 8102f66:	4293      	cmp	r3, r2
 8102f68:	d101      	bne.n	8102f6e <HAL_ADC_Init+0x15e>
 8102f6a:	4a66      	ldr	r2, [pc, #408]	; (8103104 <HAL_ADC_Init+0x2f4>)
 8102f6c:	e000      	b.n	8102f70 <HAL_ADC_Init+0x160>
 8102f6e:	4a66      	ldr	r2, [pc, #408]	; (8103108 <HAL_ADC_Init+0x2f8>)
 8102f70:	687b      	ldr	r3, [r7, #4]
 8102f72:	685b      	ldr	r3, [r3, #4]
 8102f74:	4619      	mov	r1, r3
 8102f76:	4610      	mov	r0, r2
 8102f78:	f7ff fd7c 	bl	8102a74 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8102f7c:	f7ff fd6e 	bl	8102a5c <HAL_GetREVID>
 8102f80:	4603      	mov	r3, r0
 8102f82:	f241 0203 	movw	r2, #4099	; 0x1003
 8102f86:	4293      	cmp	r3, r2
 8102f88:	d914      	bls.n	8102fb4 <HAL_ADC_Init+0x1a4>
 8102f8a:	687b      	ldr	r3, [r7, #4]
 8102f8c:	689b      	ldr	r3, [r3, #8]
 8102f8e:	2b10      	cmp	r3, #16
 8102f90:	d110      	bne.n	8102fb4 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8102f92:	687b      	ldr	r3, [r7, #4]
 8102f94:	7d5b      	ldrb	r3, [r3, #21]
 8102f96:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8102f98:	687b      	ldr	r3, [r7, #4]
 8102f9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8102f9c:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8102f9e:	687b      	ldr	r3, [r7, #4]
 8102fa0:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8102fa2:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8102fa4:	687b      	ldr	r3, [r7, #4]
 8102fa6:	7f1b      	ldrb	r3, [r3, #28]
 8102fa8:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8102faa:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8102fac:	f043 030c 	orr.w	r3, r3, #12
 8102fb0:	61bb      	str	r3, [r7, #24]
 8102fb2:	e00d      	b.n	8102fd0 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8102fb4:	687b      	ldr	r3, [r7, #4]
 8102fb6:	7d5b      	ldrb	r3, [r3, #21]
 8102fb8:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8102fba:	687b      	ldr	r3, [r7, #4]
 8102fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8102fbe:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8102fc0:	687b      	ldr	r3, [r7, #4]
 8102fc2:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8102fc4:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8102fc6:	687b      	ldr	r3, [r7, #4]
 8102fc8:	7f1b      	ldrb	r3, [r3, #28]
 8102fca:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8102fcc:	4313      	orrs	r3, r2
 8102fce:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8102fd0:	687b      	ldr	r3, [r7, #4]
 8102fd2:	7f1b      	ldrb	r3, [r3, #28]
 8102fd4:	2b01      	cmp	r3, #1
 8102fd6:	d106      	bne.n	8102fe6 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8102fd8:	687b      	ldr	r3, [r7, #4]
 8102fda:	6a1b      	ldr	r3, [r3, #32]
 8102fdc:	3b01      	subs	r3, #1
 8102fde:	045b      	lsls	r3, r3, #17
 8102fe0:	69ba      	ldr	r2, [r7, #24]
 8102fe2:	4313      	orrs	r3, r2
 8102fe4:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8102fe6:	687b      	ldr	r3, [r7, #4]
 8102fe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8102fea:	2b00      	cmp	r3, #0
 8102fec:	d009      	beq.n	8103002 <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8102fee:	687b      	ldr	r3, [r7, #4]
 8102ff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8102ff2:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8102ff6:	687b      	ldr	r3, [r7, #4]
 8102ff8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8102ffa:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8102ffc:	69ba      	ldr	r2, [r7, #24]
 8102ffe:	4313      	orrs	r3, r2
 8103000:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8103002:	687b      	ldr	r3, [r7, #4]
 8103004:	681b      	ldr	r3, [r3, #0]
 8103006:	68da      	ldr	r2, [r3, #12]
 8103008:	4b40      	ldr	r3, [pc, #256]	; (810310c <HAL_ADC_Init+0x2fc>)
 810300a:	4013      	ands	r3, r2
 810300c:	687a      	ldr	r2, [r7, #4]
 810300e:	6812      	ldr	r2, [r2, #0]
 8103010:	69b9      	ldr	r1, [r7, #24]
 8103012:	430b      	orrs	r3, r1
 8103014:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8103016:	687b      	ldr	r3, [r7, #4]
 8103018:	681b      	ldr	r3, [r3, #0]
 810301a:	4618      	mov	r0, r3
 810301c:	f7ff fed1 	bl	8102dc2 <LL_ADC_REG_IsConversionOngoing>
 8103020:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8103022:	687b      	ldr	r3, [r7, #4]
 8103024:	681b      	ldr	r3, [r3, #0]
 8103026:	4618      	mov	r0, r3
 8103028:	f7ff fede 	bl	8102de8 <LL_ADC_INJ_IsConversionOngoing>
 810302c:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 810302e:	693b      	ldr	r3, [r7, #16]
 8103030:	2b00      	cmp	r3, #0
 8103032:	d14c      	bne.n	81030ce <HAL_ADC_Init+0x2be>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8103034:	68fb      	ldr	r3, [r7, #12]
 8103036:	2b00      	cmp	r3, #0
 8103038:	d149      	bne.n	81030ce <HAL_ADC_Init+0x2be>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 810303a:	687b      	ldr	r3, [r7, #4]
 810303c:	7d1b      	ldrb	r3, [r3, #20]
 810303e:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8103040:	687b      	ldr	r3, [r7, #4]
 8103042:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8103044:	4313      	orrs	r3, r2
 8103046:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8103048:	687b      	ldr	r3, [r7, #4]
 810304a:	681b      	ldr	r3, [r3, #0]
 810304c:	68db      	ldr	r3, [r3, #12]
 810304e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8103052:	f023 0303 	bic.w	r3, r3, #3
 8103056:	687a      	ldr	r2, [r7, #4]
 8103058:	6812      	ldr	r2, [r2, #0]
 810305a:	69b9      	ldr	r1, [r7, #24]
 810305c:	430b      	orrs	r3, r1
 810305e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8103060:	687b      	ldr	r3, [r7, #4]
 8103062:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8103066:	2b01      	cmp	r3, #1
 8103068:	d11b      	bne.n	81030a2 <HAL_ADC_Init+0x292>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 810306a:	687b      	ldr	r3, [r7, #4]
 810306c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810306e:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8103070:	687b      	ldr	r3, [r7, #4]
 8103072:	681b      	ldr	r3, [r3, #0]
 8103074:	691a      	ldr	r2, [r3, #16]
 8103076:	4b26      	ldr	r3, [pc, #152]	; (8103110 <HAL_ADC_Init+0x300>)
 8103078:	4013      	ands	r3, r2
 810307a:	687a      	ldr	r2, [r7, #4]
 810307c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 810307e:	3a01      	subs	r2, #1
 8103080:	0411      	lsls	r1, r2, #16
 8103082:	687a      	ldr	r2, [r7, #4]
 8103084:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8103086:	4311      	orrs	r1, r2
 8103088:	687a      	ldr	r2, [r7, #4]
 810308a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 810308c:	4311      	orrs	r1, r2
 810308e:	687a      	ldr	r2, [r7, #4]
 8103090:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8103092:	430a      	orrs	r2, r1
 8103094:	431a      	orrs	r2, r3
 8103096:	687b      	ldr	r3, [r7, #4]
 8103098:	681b      	ldr	r3, [r3, #0]
 810309a:	f042 0201 	orr.w	r2, r2, #1
 810309e:	611a      	str	r2, [r3, #16]
 81030a0:	e007      	b.n	81030b2 <HAL_ADC_Init+0x2a2>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 81030a2:	687b      	ldr	r3, [r7, #4]
 81030a4:	681b      	ldr	r3, [r3, #0]
 81030a6:	691a      	ldr	r2, [r3, #16]
 81030a8:	687b      	ldr	r3, [r7, #4]
 81030aa:	681b      	ldr	r3, [r3, #0]
 81030ac:	f022 0201 	bic.w	r2, r2, #1
 81030b0:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 81030b2:	687b      	ldr	r3, [r7, #4]
 81030b4:	681b      	ldr	r3, [r3, #0]
 81030b6:	691b      	ldr	r3, [r3, #16]
 81030b8:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 81030bc:	687b      	ldr	r3, [r7, #4]
 81030be:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 81030c0:	687b      	ldr	r3, [r7, #4]
 81030c2:	681b      	ldr	r3, [r3, #0]
 81030c4:	430a      	orrs	r2, r1
 81030c6:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 81030c8:	6878      	ldr	r0, [r7, #4]
 81030ca:	f000 fde9 	bl	8103ca0 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 81030ce:	687b      	ldr	r3, [r7, #4]
 81030d0:	68db      	ldr	r3, [r3, #12]
 81030d2:	2b01      	cmp	r3, #1
 81030d4:	d11e      	bne.n	8103114 <HAL_ADC_Init+0x304>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 81030d6:	687b      	ldr	r3, [r7, #4]
 81030d8:	681b      	ldr	r3, [r3, #0]
 81030da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81030dc:	f023 010f 	bic.w	r1, r3, #15
 81030e0:	687b      	ldr	r3, [r7, #4]
 81030e2:	699b      	ldr	r3, [r3, #24]
 81030e4:	1e5a      	subs	r2, r3, #1
 81030e6:	687b      	ldr	r3, [r7, #4]
 81030e8:	681b      	ldr	r3, [r3, #0]
 81030ea:	430a      	orrs	r2, r1
 81030ec:	631a      	str	r2, [r3, #48]	; 0x30
 81030ee:	e019      	b.n	8103124 <HAL_ADC_Init+0x314>
 81030f0:	10000000 	.word	0x10000000
 81030f4:	053e2d63 	.word	0x053e2d63
 81030f8:	40022000 	.word	0x40022000
 81030fc:	40022100 	.word	0x40022100
 8103100:	58026000 	.word	0x58026000
 8103104:	40022300 	.word	0x40022300
 8103108:	58026300 	.word	0x58026300
 810310c:	fff0c003 	.word	0xfff0c003
 8103110:	fc00f81e 	.word	0xfc00f81e
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8103114:	687b      	ldr	r3, [r7, #4]
 8103116:	681b      	ldr	r3, [r3, #0]
 8103118:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 810311a:	687b      	ldr	r3, [r7, #4]
 810311c:	681b      	ldr	r3, [r3, #0]
 810311e:	f022 020f 	bic.w	r2, r2, #15
 8103122:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8103124:	687b      	ldr	r3, [r7, #4]
 8103126:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103128:	f023 0303 	bic.w	r3, r3, #3
 810312c:	f043 0201 	orr.w	r2, r3, #1
 8103130:	687b      	ldr	r3, [r7, #4]
 8103132:	655a      	str	r2, [r3, #84]	; 0x54
 8103134:	e007      	b.n	8103146 <HAL_ADC_Init+0x336>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8103136:	687b      	ldr	r3, [r7, #4]
 8103138:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810313a:	f043 0210 	orr.w	r2, r3, #16
 810313e:	687b      	ldr	r3, [r7, #4]
 8103140:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8103142:	2301      	movs	r3, #1
 8103144:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8103146:	7ffb      	ldrb	r3, [r7, #31]
}
 8103148:	4618      	mov	r0, r3
 810314a:	3724      	adds	r7, #36	; 0x24
 810314c:	46bd      	mov	sp, r7
 810314e:	bd90      	pop	{r4, r7, pc}

08103150 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8103150:	b580      	push	{r7, lr}
 8103152:	b08a      	sub	sp, #40	; 0x28
 8103154:	af00      	add	r7, sp, #0
 8103156:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8103158:	2300      	movs	r3, #0
 810315a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 810315c:	687b      	ldr	r3, [r7, #4]
 810315e:	681b      	ldr	r3, [r3, #0]
 8103160:	681b      	ldr	r3, [r3, #0]
 8103162:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8103164:	687b      	ldr	r3, [r7, #4]
 8103166:	681b      	ldr	r3, [r3, #0]
 8103168:	685b      	ldr	r3, [r3, #4]
 810316a:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 810316c:	687b      	ldr	r3, [r7, #4]
 810316e:	681b      	ldr	r3, [r3, #0]
 8103170:	4a87      	ldr	r2, [pc, #540]	; (8103390 <HAL_ADC_IRQHandler+0x240>)
 8103172:	4293      	cmp	r3, r2
 8103174:	d004      	beq.n	8103180 <HAL_ADC_IRQHandler+0x30>
 8103176:	687b      	ldr	r3, [r7, #4]
 8103178:	681b      	ldr	r3, [r3, #0]
 810317a:	4a86      	ldr	r2, [pc, #536]	; (8103394 <HAL_ADC_IRQHandler+0x244>)
 810317c:	4293      	cmp	r3, r2
 810317e:	d101      	bne.n	8103184 <HAL_ADC_IRQHandler+0x34>
 8103180:	4b85      	ldr	r3, [pc, #532]	; (8103398 <HAL_ADC_IRQHandler+0x248>)
 8103182:	e000      	b.n	8103186 <HAL_ADC_IRQHandler+0x36>
 8103184:	4b85      	ldr	r3, [pc, #532]	; (810339c <HAL_ADC_IRQHandler+0x24c>)
 8103186:	4618      	mov	r0, r3
 8103188:	f7ff fd9e 	bl	8102cc8 <LL_ADC_GetMultimode>
 810318c:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 810318e:	69fb      	ldr	r3, [r7, #28]
 8103190:	f003 0302 	and.w	r3, r3, #2
 8103194:	2b00      	cmp	r3, #0
 8103196:	d017      	beq.n	81031c8 <HAL_ADC_IRQHandler+0x78>
 8103198:	69bb      	ldr	r3, [r7, #24]
 810319a:	f003 0302 	and.w	r3, r3, #2
 810319e:	2b00      	cmp	r3, #0
 81031a0:	d012      	beq.n	81031c8 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 81031a2:	687b      	ldr	r3, [r7, #4]
 81031a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81031a6:	f003 0310 	and.w	r3, r3, #16
 81031aa:	2b00      	cmp	r3, #0
 81031ac:	d105      	bne.n	81031ba <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 81031ae:	687b      	ldr	r3, [r7, #4]
 81031b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81031b2:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 81031b6:	687b      	ldr	r3, [r7, #4]
 81031b8:	655a      	str	r2, [r3, #84]	; 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 81031ba:	6878      	ldr	r0, [r7, #4]
 81031bc:	f000 fec8 	bl	8103f50 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 81031c0:	687b      	ldr	r3, [r7, #4]
 81031c2:	681b      	ldr	r3, [r3, #0]
 81031c4:	2202      	movs	r2, #2
 81031c6:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 81031c8:	69fb      	ldr	r3, [r7, #28]
 81031ca:	f003 0304 	and.w	r3, r3, #4
 81031ce:	2b00      	cmp	r3, #0
 81031d0:	d004      	beq.n	81031dc <HAL_ADC_IRQHandler+0x8c>
 81031d2:	69bb      	ldr	r3, [r7, #24]
 81031d4:	f003 0304 	and.w	r3, r3, #4
 81031d8:	2b00      	cmp	r3, #0
 81031da:	d10a      	bne.n	81031f2 <HAL_ADC_IRQHandler+0xa2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 81031dc:	69fb      	ldr	r3, [r7, #28]
 81031de:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 81031e2:	2b00      	cmp	r3, #0
 81031e4:	f000 8083 	beq.w	81032ee <HAL_ADC_IRQHandler+0x19e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 81031e8:	69bb      	ldr	r3, [r7, #24]
 81031ea:	f003 0308 	and.w	r3, r3, #8
 81031ee:	2b00      	cmp	r3, #0
 81031f0:	d07d      	beq.n	81032ee <HAL_ADC_IRQHandler+0x19e>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 81031f2:	687b      	ldr	r3, [r7, #4]
 81031f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81031f6:	f003 0310 	and.w	r3, r3, #16
 81031fa:	2b00      	cmp	r3, #0
 81031fc:	d105      	bne.n	810320a <HAL_ADC_IRQHandler+0xba>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 81031fe:	687b      	ldr	r3, [r7, #4]
 8103200:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103202:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8103206:	687b      	ldr	r3, [r7, #4]
 8103208:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 810320a:	687b      	ldr	r3, [r7, #4]
 810320c:	681b      	ldr	r3, [r3, #0]
 810320e:	4618      	mov	r0, r3
 8103210:	f7ff fcb8 	bl	8102b84 <LL_ADC_REG_IsTriggerSourceSWStart>
 8103214:	4603      	mov	r3, r0
 8103216:	2b00      	cmp	r3, #0
 8103218:	d062      	beq.n	81032e0 <HAL_ADC_IRQHandler+0x190>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 810321a:	687b      	ldr	r3, [r7, #4]
 810321c:	681b      	ldr	r3, [r3, #0]
 810321e:	4a5d      	ldr	r2, [pc, #372]	; (8103394 <HAL_ADC_IRQHandler+0x244>)
 8103220:	4293      	cmp	r3, r2
 8103222:	d002      	beq.n	810322a <HAL_ADC_IRQHandler+0xda>
 8103224:	687b      	ldr	r3, [r7, #4]
 8103226:	681b      	ldr	r3, [r3, #0]
 8103228:	e000      	b.n	810322c <HAL_ADC_IRQHandler+0xdc>
 810322a:	4b59      	ldr	r3, [pc, #356]	; (8103390 <HAL_ADC_IRQHandler+0x240>)
 810322c:	687a      	ldr	r2, [r7, #4]
 810322e:	6812      	ldr	r2, [r2, #0]
 8103230:	4293      	cmp	r3, r2
 8103232:	d008      	beq.n	8103246 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8103234:	697b      	ldr	r3, [r7, #20]
 8103236:	2b00      	cmp	r3, #0
 8103238:	d005      	beq.n	8103246 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 810323a:	697b      	ldr	r3, [r7, #20]
 810323c:	2b05      	cmp	r3, #5
 810323e:	d002      	beq.n	8103246 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8103240:	697b      	ldr	r3, [r7, #20]
 8103242:	2b09      	cmp	r3, #9
 8103244:	d104      	bne.n	8103250 <HAL_ADC_IRQHandler+0x100>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8103246:	687b      	ldr	r3, [r7, #4]
 8103248:	681b      	ldr	r3, [r3, #0]
 810324a:	68db      	ldr	r3, [r3, #12]
 810324c:	623b      	str	r3, [r7, #32]
 810324e:	e00c      	b.n	810326a <HAL_ADC_IRQHandler+0x11a>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8103250:	687b      	ldr	r3, [r7, #4]
 8103252:	681b      	ldr	r3, [r3, #0]
 8103254:	4a4f      	ldr	r2, [pc, #316]	; (8103394 <HAL_ADC_IRQHandler+0x244>)
 8103256:	4293      	cmp	r3, r2
 8103258:	d002      	beq.n	8103260 <HAL_ADC_IRQHandler+0x110>
 810325a:	687b      	ldr	r3, [r7, #4]
 810325c:	681b      	ldr	r3, [r3, #0]
 810325e:	e000      	b.n	8103262 <HAL_ADC_IRQHandler+0x112>
 8103260:	4b4b      	ldr	r3, [pc, #300]	; (8103390 <HAL_ADC_IRQHandler+0x240>)
 8103262:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8103264:	693b      	ldr	r3, [r7, #16]
 8103266:	68db      	ldr	r3, [r3, #12]
 8103268:	623b      	str	r3, [r7, #32]
      }

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 810326a:	6a3b      	ldr	r3, [r7, #32]
 810326c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8103270:	2b00      	cmp	r3, #0
 8103272:	d135      	bne.n	81032e0 <HAL_ADC_IRQHandler+0x190>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8103274:	687b      	ldr	r3, [r7, #4]
 8103276:	681b      	ldr	r3, [r3, #0]
 8103278:	681b      	ldr	r3, [r3, #0]
 810327a:	f003 0308 	and.w	r3, r3, #8
 810327e:	2b08      	cmp	r3, #8
 8103280:	d12e      	bne.n	81032e0 <HAL_ADC_IRQHandler+0x190>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8103282:	687b      	ldr	r3, [r7, #4]
 8103284:	681b      	ldr	r3, [r3, #0]
 8103286:	4618      	mov	r0, r3
 8103288:	f7ff fd9b 	bl	8102dc2 <LL_ADC_REG_IsConversionOngoing>
 810328c:	4603      	mov	r3, r0
 810328e:	2b00      	cmp	r3, #0
 8103290:	d11a      	bne.n	81032c8 <HAL_ADC_IRQHandler+0x178>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8103292:	687b      	ldr	r3, [r7, #4]
 8103294:	681b      	ldr	r3, [r3, #0]
 8103296:	685a      	ldr	r2, [r3, #4]
 8103298:	687b      	ldr	r3, [r7, #4]
 810329a:	681b      	ldr	r3, [r3, #0]
 810329c:	f022 020c 	bic.w	r2, r2, #12
 81032a0:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 81032a2:	687b      	ldr	r3, [r7, #4]
 81032a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81032a6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 81032aa:	687b      	ldr	r3, [r7, #4]
 81032ac:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 81032ae:	687b      	ldr	r3, [r7, #4]
 81032b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81032b2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 81032b6:	2b00      	cmp	r3, #0
 81032b8:	d112      	bne.n	81032e0 <HAL_ADC_IRQHandler+0x190>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 81032ba:	687b      	ldr	r3, [r7, #4]
 81032bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81032be:	f043 0201 	orr.w	r2, r3, #1
 81032c2:	687b      	ldr	r3, [r7, #4]
 81032c4:	655a      	str	r2, [r3, #84]	; 0x54
 81032c6:	e00b      	b.n	81032e0 <HAL_ADC_IRQHandler+0x190>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 81032c8:	687b      	ldr	r3, [r7, #4]
 81032ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81032cc:	f043 0210 	orr.w	r2, r3, #16
 81032d0:	687b      	ldr	r3, [r7, #4]
 81032d2:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 81032d4:	687b      	ldr	r3, [r7, #4]
 81032d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81032d8:	f043 0201 	orr.w	r2, r3, #1
 81032dc:	687b      	ldr	r3, [r7, #4]
 81032de:	659a      	str	r2, [r3, #88]	; 0x58
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 81032e0:	6878      	ldr	r0, [r7, #4]
 81032e2:	f000 f96f 	bl	81035c4 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 81032e6:	687b      	ldr	r3, [r7, #4]
 81032e8:	681b      	ldr	r3, [r3, #0]
 81032ea:	220c      	movs	r2, #12
 81032ec:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 81032ee:	69fb      	ldr	r3, [r7, #28]
 81032f0:	f003 0320 	and.w	r3, r3, #32
 81032f4:	2b00      	cmp	r3, #0
 81032f6:	d004      	beq.n	8103302 <HAL_ADC_IRQHandler+0x1b2>
 81032f8:	69bb      	ldr	r3, [r7, #24]
 81032fa:	f003 0320 	and.w	r3, r3, #32
 81032fe:	2b00      	cmp	r3, #0
 8103300:	d10b      	bne.n	810331a <HAL_ADC_IRQHandler+0x1ca>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8103302:	69fb      	ldr	r3, [r7, #28]
 8103304:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8103308:	2b00      	cmp	r3, #0
 810330a:	f000 80a0 	beq.w	810344e <HAL_ADC_IRQHandler+0x2fe>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 810330e:	69bb      	ldr	r3, [r7, #24]
 8103310:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8103314:	2b00      	cmp	r3, #0
 8103316:	f000 809a 	beq.w	810344e <HAL_ADC_IRQHandler+0x2fe>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 810331a:	687b      	ldr	r3, [r7, #4]
 810331c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810331e:	f003 0310 	and.w	r3, r3, #16
 8103322:	2b00      	cmp	r3, #0
 8103324:	d105      	bne.n	8103332 <HAL_ADC_IRQHandler+0x1e2>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8103326:	687b      	ldr	r3, [r7, #4]
 8103328:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810332a:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 810332e:	687b      	ldr	r3, [r7, #4]
 8103330:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8103332:	687b      	ldr	r3, [r7, #4]
 8103334:	681b      	ldr	r3, [r3, #0]
 8103336:	4618      	mov	r0, r3
 8103338:	f7ff fc63 	bl	8102c02 <LL_ADC_INJ_IsTriggerSourceSWStart>
 810333c:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 810333e:	687b      	ldr	r3, [r7, #4]
 8103340:	681b      	ldr	r3, [r3, #0]
 8103342:	4618      	mov	r0, r3
 8103344:	f7ff fc1e 	bl	8102b84 <LL_ADC_REG_IsTriggerSourceSWStart>
 8103348:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 810334a:	687b      	ldr	r3, [r7, #4]
 810334c:	681b      	ldr	r3, [r3, #0]
 810334e:	4a11      	ldr	r2, [pc, #68]	; (8103394 <HAL_ADC_IRQHandler+0x244>)
 8103350:	4293      	cmp	r3, r2
 8103352:	d002      	beq.n	810335a <HAL_ADC_IRQHandler+0x20a>
 8103354:	687b      	ldr	r3, [r7, #4]
 8103356:	681b      	ldr	r3, [r3, #0]
 8103358:	e000      	b.n	810335c <HAL_ADC_IRQHandler+0x20c>
 810335a:	4b0d      	ldr	r3, [pc, #52]	; (8103390 <HAL_ADC_IRQHandler+0x240>)
 810335c:	687a      	ldr	r2, [r7, #4]
 810335e:	6812      	ldr	r2, [r2, #0]
 8103360:	4293      	cmp	r3, r2
 8103362:	d008      	beq.n	8103376 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8103364:	697b      	ldr	r3, [r7, #20]
 8103366:	2b00      	cmp	r3, #0
 8103368:	d005      	beq.n	8103376 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 810336a:	697b      	ldr	r3, [r7, #20]
 810336c:	2b06      	cmp	r3, #6
 810336e:	d002      	beq.n	8103376 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8103370:	697b      	ldr	r3, [r7, #20]
 8103372:	2b07      	cmp	r3, #7
 8103374:	d104      	bne.n	8103380 <HAL_ADC_IRQHandler+0x230>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8103376:	687b      	ldr	r3, [r7, #4]
 8103378:	681b      	ldr	r3, [r3, #0]
 810337a:	68db      	ldr	r3, [r3, #12]
 810337c:	623b      	str	r3, [r7, #32]
 810337e:	e014      	b.n	81033aa <HAL_ADC_IRQHandler+0x25a>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8103380:	687b      	ldr	r3, [r7, #4]
 8103382:	681b      	ldr	r3, [r3, #0]
 8103384:	4a03      	ldr	r2, [pc, #12]	; (8103394 <HAL_ADC_IRQHandler+0x244>)
 8103386:	4293      	cmp	r3, r2
 8103388:	d00a      	beq.n	81033a0 <HAL_ADC_IRQHandler+0x250>
 810338a:	687b      	ldr	r3, [r7, #4]
 810338c:	681b      	ldr	r3, [r3, #0]
 810338e:	e008      	b.n	81033a2 <HAL_ADC_IRQHandler+0x252>
 8103390:	40022000 	.word	0x40022000
 8103394:	40022100 	.word	0x40022100
 8103398:	40022300 	.word	0x40022300
 810339c:	58026300 	.word	0x58026300
 81033a0:	4b84      	ldr	r3, [pc, #528]	; (81035b4 <HAL_ADC_IRQHandler+0x464>)
 81033a2:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 81033a4:	693b      	ldr	r3, [r7, #16]
 81033a6:	68db      	ldr	r3, [r3, #12]
 81033a8:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if ((tmp_adc_inj_is_trigger_source_sw_start != 0UL)            ||
 81033aa:	68fb      	ldr	r3, [r7, #12]
 81033ac:	2b00      	cmp	r3, #0
 81033ae:	d10c      	bne.n	81033ca <HAL_ADC_IRQHandler+0x27a>
        ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL)      &&
 81033b0:	6a3b      	ldr	r3, [r7, #32]
 81033b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    if ((tmp_adc_inj_is_trigger_source_sw_start != 0UL)            ||
 81033b6:	2b00      	cmp	r3, #0
 81033b8:	d142      	bne.n	8103440 <HAL_ADC_IRQHandler+0x2f0>
        ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL)      &&
 81033ba:	68bb      	ldr	r3, [r7, #8]
 81033bc:	2b00      	cmp	r3, #0
 81033be:	d03f      	beq.n	8103440 <HAL_ADC_IRQHandler+0x2f0>
         ((tmp_adc_reg_is_trigger_source_sw_start != 0UL)  &&
          (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL))))
 81033c0:	6a3b      	ldr	r3, [r7, #32]
 81033c2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
         ((tmp_adc_reg_is_trigger_source_sw_start != 0UL)  &&
 81033c6:	2b00      	cmp	r3, #0
 81033c8:	d13a      	bne.n	8103440 <HAL_ADC_IRQHandler+0x2f0>
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 81033ca:	687b      	ldr	r3, [r7, #4]
 81033cc:	681b      	ldr	r3, [r3, #0]
 81033ce:	681b      	ldr	r3, [r3, #0]
 81033d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 81033d4:	2b40      	cmp	r3, #64	; 0x40
 81033d6:	d133      	bne.n	8103440 <HAL_ADC_IRQHandler+0x2f0>
        /* when the last context has been fully processed, JSQR is reset      */
        /* by the hardware. Even if no injected conversion is planned to come */
        /* (queue empty, triggers are ignored), it can start again            */
        /* immediately after setting a new context (JADSTART is still set).   */
        /* Therefore, state of HAL ADC injected group is kept to busy.        */
        if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 81033d8:	6a3b      	ldr	r3, [r7, #32]
 81033da:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 81033de:	2b00      	cmp	r3, #0
 81033e0:	d12e      	bne.n	8103440 <HAL_ADC_IRQHandler+0x2f0>
        {
          /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
          /* JADSTART==0 (no conversion on going)                             */
          if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 81033e2:	687b      	ldr	r3, [r7, #4]
 81033e4:	681b      	ldr	r3, [r3, #0]
 81033e6:	4618      	mov	r0, r3
 81033e8:	f7ff fcfe 	bl	8102de8 <LL_ADC_INJ_IsConversionOngoing>
 81033ec:	4603      	mov	r3, r0
 81033ee:	2b00      	cmp	r3, #0
 81033f0:	d11a      	bne.n	8103428 <HAL_ADC_IRQHandler+0x2d8>
          {
            /* Disable ADC end of sequence conversion interrupt  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 81033f2:	687b      	ldr	r3, [r7, #4]
 81033f4:	681b      	ldr	r3, [r3, #0]
 81033f6:	685a      	ldr	r2, [r3, #4]
 81033f8:	687b      	ldr	r3, [r7, #4]
 81033fa:	681b      	ldr	r3, [r3, #0]
 81033fc:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8103400:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8103402:	687b      	ldr	r3, [r7, #4]
 8103404:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103406:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 810340a:	687b      	ldr	r3, [r7, #4]
 810340c:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 810340e:	687b      	ldr	r3, [r7, #4]
 8103410:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103412:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8103416:	2b00      	cmp	r3, #0
 8103418:	d112      	bne.n	8103440 <HAL_ADC_IRQHandler+0x2f0>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 810341a:	687b      	ldr	r3, [r7, #4]
 810341c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810341e:	f043 0201 	orr.w	r2, r3, #1
 8103422:	687b      	ldr	r3, [r7, #4]
 8103424:	655a      	str	r2, [r3, #84]	; 0x54
 8103426:	e00b      	b.n	8103440 <HAL_ADC_IRQHandler+0x2f0>
            }
          }
          else
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8103428:	687b      	ldr	r3, [r7, #4]
 810342a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810342c:	f043 0210 	orr.w	r2, r3, #16
 8103430:	687b      	ldr	r3, [r7, #4]
 8103432:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8103434:	687b      	ldr	r3, [r7, #4]
 8103436:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8103438:	f043 0201 	orr.w	r2, r3, #1
 810343c:	687b      	ldr	r3, [r7, #4]
 810343e:	659a      	str	r2, [r3, #88]	; 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8103440:	6878      	ldr	r0, [r7, #4]
 8103442:	f000 fd5d 	bl	8103f00 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8103446:	687b      	ldr	r3, [r7, #4]
 8103448:	681b      	ldr	r3, [r3, #0]
 810344a:	2260      	movs	r2, #96	; 0x60
 810344c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 810344e:	69fb      	ldr	r3, [r7, #28]
 8103450:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8103454:	2b00      	cmp	r3, #0
 8103456:	d011      	beq.n	810347c <HAL_ADC_IRQHandler+0x32c>
 8103458:	69bb      	ldr	r3, [r7, #24]
 810345a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 810345e:	2b00      	cmp	r3, #0
 8103460:	d00c      	beq.n	810347c <HAL_ADC_IRQHandler+0x32c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8103462:	687b      	ldr	r3, [r7, #4]
 8103464:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103466:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 810346a:	687b      	ldr	r3, [r7, #4]
 810346c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 810346e:	6878      	ldr	r0, [r7, #4]
 8103470:	f000 f8b2 	bl	81035d8 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8103474:	687b      	ldr	r3, [r7, #4]
 8103476:	681b      	ldr	r3, [r3, #0]
 8103478:	2280      	movs	r2, #128	; 0x80
 810347a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 810347c:	69fb      	ldr	r3, [r7, #28]
 810347e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8103482:	2b00      	cmp	r3, #0
 8103484:	d012      	beq.n	81034ac <HAL_ADC_IRQHandler+0x35c>
 8103486:	69bb      	ldr	r3, [r7, #24]
 8103488:	f403 7380 	and.w	r3, r3, #256	; 0x100
 810348c:	2b00      	cmp	r3, #0
 810348e:	d00d      	beq.n	81034ac <HAL_ADC_IRQHandler+0x35c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8103490:	687b      	ldr	r3, [r7, #4]
 8103492:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103494:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8103498:	687b      	ldr	r3, [r7, #4]
 810349a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 810349c:	6878      	ldr	r0, [r7, #4]
 810349e:	f000 fd43 	bl	8103f28 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 81034a2:	687b      	ldr	r3, [r7, #4]
 81034a4:	681b      	ldr	r3, [r3, #0]
 81034a6:	f44f 7280 	mov.w	r2, #256	; 0x100
 81034aa:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 81034ac:	69fb      	ldr	r3, [r7, #28]
 81034ae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 81034b2:	2b00      	cmp	r3, #0
 81034b4:	d012      	beq.n	81034dc <HAL_ADC_IRQHandler+0x38c>
 81034b6:	69bb      	ldr	r3, [r7, #24]
 81034b8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 81034bc:	2b00      	cmp	r3, #0
 81034be:	d00d      	beq.n	81034dc <HAL_ADC_IRQHandler+0x38c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 81034c0:	687b      	ldr	r3, [r7, #4]
 81034c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81034c4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 81034c8:	687b      	ldr	r3, [r7, #4]
 81034ca:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 81034cc:	6878      	ldr	r0, [r7, #4]
 81034ce:	f000 fd35 	bl	8103f3c <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 81034d2:	687b      	ldr	r3, [r7, #4]
 81034d4:	681b      	ldr	r3, [r3, #0]
 81034d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 81034da:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 81034dc:	69fb      	ldr	r3, [r7, #28]
 81034de:	f003 0310 	and.w	r3, r3, #16
 81034e2:	2b00      	cmp	r3, #0
 81034e4:	d043      	beq.n	810356e <HAL_ADC_IRQHandler+0x41e>
 81034e6:	69bb      	ldr	r3, [r7, #24]
 81034e8:	f003 0310 	and.w	r3, r3, #16
 81034ec:	2b00      	cmp	r3, #0
 81034ee:	d03e      	beq.n	810356e <HAL_ADC_IRQHandler+0x41e>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 81034f0:	687b      	ldr	r3, [r7, #4]
 81034f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81034f4:	2b00      	cmp	r3, #0
 81034f6:	d102      	bne.n	81034fe <HAL_ADC_IRQHandler+0x3ae>
    {
      overrun_error = 1UL;
 81034f8:	2301      	movs	r3, #1
 81034fa:	627b      	str	r3, [r7, #36]	; 0x24
 81034fc:	e021      	b.n	8103542 <HAL_ADC_IRQHandler+0x3f2>
    }
    else
    {
      /* Check DMA configuration */
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 81034fe:	697b      	ldr	r3, [r7, #20]
 8103500:	2b00      	cmp	r3, #0
 8103502:	d015      	beq.n	8103530 <HAL_ADC_IRQHandler+0x3e0>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8103504:	687b      	ldr	r3, [r7, #4]
 8103506:	681b      	ldr	r3, [r3, #0]
 8103508:	4a2a      	ldr	r2, [pc, #168]	; (81035b4 <HAL_ADC_IRQHandler+0x464>)
 810350a:	4293      	cmp	r3, r2
 810350c:	d004      	beq.n	8103518 <HAL_ADC_IRQHandler+0x3c8>
 810350e:	687b      	ldr	r3, [r7, #4]
 8103510:	681b      	ldr	r3, [r3, #0]
 8103512:	4a29      	ldr	r2, [pc, #164]	; (81035b8 <HAL_ADC_IRQHandler+0x468>)
 8103514:	4293      	cmp	r3, r2
 8103516:	d101      	bne.n	810351c <HAL_ADC_IRQHandler+0x3cc>
 8103518:	4b28      	ldr	r3, [pc, #160]	; (81035bc <HAL_ADC_IRQHandler+0x46c>)
 810351a:	e000      	b.n	810351e <HAL_ADC_IRQHandler+0x3ce>
 810351c:	4b28      	ldr	r3, [pc, #160]	; (81035c0 <HAL_ADC_IRQHandler+0x470>)
 810351e:	4618      	mov	r0, r3
 8103520:	f7ff fbe0 	bl	8102ce4 <LL_ADC_GetMultiDMATransfer>
 8103524:	4603      	mov	r3, r0
 8103526:	2b00      	cmp	r3, #0
 8103528:	d00b      	beq.n	8103542 <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 810352a:	2301      	movs	r3, #1
 810352c:	627b      	str	r3, [r7, #36]	; 0x24
 810352e:	e008      	b.n	8103542 <HAL_ADC_IRQHandler+0x3f2>
        }
      }
      else
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 8103530:	687b      	ldr	r3, [r7, #4]
 8103532:	681b      	ldr	r3, [r3, #0]
 8103534:	68db      	ldr	r3, [r3, #12]
 8103536:	f003 0303 	and.w	r3, r3, #3
 810353a:	2b00      	cmp	r3, #0
 810353c:	d001      	beq.n	8103542 <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 810353e:	2301      	movs	r3, #1
 8103540:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8103542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8103544:	2b01      	cmp	r3, #1
 8103546:	d10e      	bne.n	8103566 <HAL_ADC_IRQHandler+0x416>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8103548:	687b      	ldr	r3, [r7, #4]
 810354a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810354c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8103550:	687b      	ldr	r3, [r7, #4]
 8103552:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8103554:	687b      	ldr	r3, [r7, #4]
 8103556:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8103558:	f043 0202 	orr.w	r2, r3, #2
 810355c:	687b      	ldr	r3, [r7, #4]
 810355e:	659a      	str	r2, [r3, #88]	; 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8103560:	6878      	ldr	r0, [r7, #4]
 8103562:	f000 f843 	bl	81035ec <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8103566:	687b      	ldr	r3, [r7, #4]
 8103568:	681b      	ldr	r3, [r3, #0]
 810356a:	2210      	movs	r2, #16
 810356c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 810356e:	69fb      	ldr	r3, [r7, #28]
 8103570:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8103574:	2b00      	cmp	r3, #0
 8103576:	d018      	beq.n	81035aa <HAL_ADC_IRQHandler+0x45a>
 8103578:	69bb      	ldr	r3, [r7, #24]
 810357a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 810357e:	2b00      	cmp	r3, #0
 8103580:	d013      	beq.n	81035aa <HAL_ADC_IRQHandler+0x45a>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8103582:	687b      	ldr	r3, [r7, #4]
 8103584:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103586:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 810358a:	687b      	ldr	r3, [r7, #4]
 810358c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 810358e:	687b      	ldr	r3, [r7, #4]
 8103590:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8103592:	f043 0208 	orr.w	r2, r3, #8
 8103596:	687b      	ldr	r3, [r7, #4]
 8103598:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 810359a:	687b      	ldr	r3, [r7, #4]
 810359c:	681b      	ldr	r3, [r3, #0]
 810359e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 81035a2:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 81035a4:	6878      	ldr	r0, [r7, #4]
 81035a6:	f000 fcb5 	bl	8103f14 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 81035aa:	bf00      	nop
 81035ac:	3728      	adds	r7, #40	; 0x28
 81035ae:	46bd      	mov	sp, r7
 81035b0:	bd80      	pop	{r7, pc}
 81035b2:	bf00      	nop
 81035b4:	40022000 	.word	0x40022000
 81035b8:	40022100 	.word	0x40022100
 81035bc:	40022300 	.word	0x40022300
 81035c0:	58026300 	.word	0x58026300

081035c4 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 81035c4:	b480      	push	{r7}
 81035c6:	b083      	sub	sp, #12
 81035c8:	af00      	add	r7, sp, #0
 81035ca:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 81035cc:	bf00      	nop
 81035ce:	370c      	adds	r7, #12
 81035d0:	46bd      	mov	sp, r7
 81035d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81035d6:	4770      	bx	lr

081035d8 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 81035d8:	b480      	push	{r7}
 81035da:	b083      	sub	sp, #12
 81035dc:	af00      	add	r7, sp, #0
 81035de:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 81035e0:	bf00      	nop
 81035e2:	370c      	adds	r7, #12
 81035e4:	46bd      	mov	sp, r7
 81035e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81035ea:	4770      	bx	lr

081035ec <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 81035ec:	b480      	push	{r7}
 81035ee:	b083      	sub	sp, #12
 81035f0:	af00      	add	r7, sp, #0
 81035f2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 81035f4:	bf00      	nop
 81035f6:	370c      	adds	r7, #12
 81035f8:	46bd      	mov	sp, r7
 81035fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 81035fe:	4770      	bx	lr

08103600 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8103600:	b590      	push	{r4, r7, lr}
 8103602:	b0a1      	sub	sp, #132	; 0x84
 8103604:	af00      	add	r7, sp, #0
 8103606:	6078      	str	r0, [r7, #4]
 8103608:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 810360a:	2300      	movs	r3, #0
 810360c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8103610:	2300      	movs	r3, #0
 8103612:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8103614:	683b      	ldr	r3, [r7, #0]
 8103616:	68db      	ldr	r3, [r3, #12]
 8103618:	4a9d      	ldr	r2, [pc, #628]	; (8103890 <HAL_ADC_ConfigChannel+0x290>)
 810361a:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 810361c:	687b      	ldr	r3, [r7, #4]
 810361e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8103622:	2b01      	cmp	r3, #1
 8103624:	d101      	bne.n	810362a <HAL_ADC_ConfigChannel+0x2a>
 8103626:	2302      	movs	r3, #2
 8103628:	e321      	b.n	8103c6e <HAL_ADC_ConfigChannel+0x66e>
 810362a:	687b      	ldr	r3, [r7, #4]
 810362c:	2201      	movs	r2, #1
 810362e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8103632:	687b      	ldr	r3, [r7, #4]
 8103634:	681b      	ldr	r3, [r3, #0]
 8103636:	4618      	mov	r0, r3
 8103638:	f7ff fbc3 	bl	8102dc2 <LL_ADC_REG_IsConversionOngoing>
 810363c:	4603      	mov	r3, r0
 810363e:	2b00      	cmp	r3, #0
 8103640:	f040 8306 	bne.w	8103c50 <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8103644:	683b      	ldr	r3, [r7, #0]
 8103646:	681b      	ldr	r3, [r3, #0]
 8103648:	f3c3 0313 	ubfx	r3, r3, #0, #20
 810364c:	2b00      	cmp	r3, #0
 810364e:	d108      	bne.n	8103662 <HAL_ADC_ConfigChannel+0x62>
 8103650:	683b      	ldr	r3, [r7, #0]
 8103652:	681b      	ldr	r3, [r3, #0]
 8103654:	0e9b      	lsrs	r3, r3, #26
 8103656:	f003 031f 	and.w	r3, r3, #31
 810365a:	2201      	movs	r2, #1
 810365c:	fa02 f303 	lsl.w	r3, r2, r3
 8103660:	e016      	b.n	8103690 <HAL_ADC_ConfigChannel+0x90>
 8103662:	683b      	ldr	r3, [r7, #0]
 8103664:	681b      	ldr	r3, [r3, #0]
 8103666:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8103668:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 810366a:	fa93 f3a3 	rbit	r3, r3
 810366e:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8103670:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8103672:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8103674:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8103676:	2b00      	cmp	r3, #0
 8103678:	d101      	bne.n	810367e <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 810367a:	2320      	movs	r3, #32
 810367c:	e003      	b.n	8103686 <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 810367e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8103680:	fab3 f383 	clz	r3, r3
 8103684:	b2db      	uxtb	r3, r3
 8103686:	f003 031f 	and.w	r3, r3, #31
 810368a:	2201      	movs	r2, #1
 810368c:	fa02 f303 	lsl.w	r3, r2, r3
 8103690:	687a      	ldr	r2, [r7, #4]
 8103692:	6812      	ldr	r2, [r2, #0]
 8103694:	69d1      	ldr	r1, [r2, #28]
 8103696:	687a      	ldr	r2, [r7, #4]
 8103698:	6812      	ldr	r2, [r2, #0]
 810369a:	430b      	orrs	r3, r1
 810369c:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 810369e:	687b      	ldr	r3, [r7, #4]
 81036a0:	6818      	ldr	r0, [r3, #0]
 81036a2:	683b      	ldr	r3, [r7, #0]
 81036a4:	6859      	ldr	r1, [r3, #4]
 81036a6:	683b      	ldr	r3, [r7, #0]
 81036a8:	681b      	ldr	r3, [r3, #0]
 81036aa:	461a      	mov	r2, r3
 81036ac:	f7ff fa7d 	bl	8102baa <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 81036b0:	687b      	ldr	r3, [r7, #4]
 81036b2:	681b      	ldr	r3, [r3, #0]
 81036b4:	4618      	mov	r0, r3
 81036b6:	f7ff fb84 	bl	8102dc2 <LL_ADC_REG_IsConversionOngoing>
 81036ba:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 81036bc:	687b      	ldr	r3, [r7, #4]
 81036be:	681b      	ldr	r3, [r3, #0]
 81036c0:	4618      	mov	r0, r3
 81036c2:	f7ff fb91 	bl	8102de8 <LL_ADC_INJ_IsConversionOngoing>
 81036c6:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 81036c8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 81036ca:	2b00      	cmp	r3, #0
 81036cc:	f040 80b3 	bne.w	8103836 <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 81036d0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 81036d2:	2b00      	cmp	r3, #0
 81036d4:	f040 80af 	bne.w	8103836 <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 81036d8:	687b      	ldr	r3, [r7, #4]
 81036da:	6818      	ldr	r0, [r3, #0]
 81036dc:	683b      	ldr	r3, [r7, #0]
 81036de:	6819      	ldr	r1, [r3, #0]
 81036e0:	683b      	ldr	r3, [r7, #0]
 81036e2:	689b      	ldr	r3, [r3, #8]
 81036e4:	461a      	mov	r2, r3
 81036e6:	f7ff fa9f 	bl	8102c28 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 81036ea:	4b6a      	ldr	r3, [pc, #424]	; (8103894 <HAL_ADC_ConfigChannel+0x294>)
 81036ec:	681b      	ldr	r3, [r3, #0]
 81036ee:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 81036f2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 81036f6:	d10b      	bne.n	8103710 <HAL_ADC_ConfigChannel+0x110>
 81036f8:	683b      	ldr	r3, [r7, #0]
 81036fa:	695a      	ldr	r2, [r3, #20]
 81036fc:	687b      	ldr	r3, [r7, #4]
 81036fe:	681b      	ldr	r3, [r3, #0]
 8103700:	68db      	ldr	r3, [r3, #12]
 8103702:	089b      	lsrs	r3, r3, #2
 8103704:	f003 0307 	and.w	r3, r3, #7
 8103708:	005b      	lsls	r3, r3, #1
 810370a:	fa02 f303 	lsl.w	r3, r2, r3
 810370e:	e01d      	b.n	810374c <HAL_ADC_ConfigChannel+0x14c>
 8103710:	687b      	ldr	r3, [r7, #4]
 8103712:	681b      	ldr	r3, [r3, #0]
 8103714:	68db      	ldr	r3, [r3, #12]
 8103716:	f003 0310 	and.w	r3, r3, #16
 810371a:	2b00      	cmp	r3, #0
 810371c:	d10b      	bne.n	8103736 <HAL_ADC_ConfigChannel+0x136>
 810371e:	683b      	ldr	r3, [r7, #0]
 8103720:	695a      	ldr	r2, [r3, #20]
 8103722:	687b      	ldr	r3, [r7, #4]
 8103724:	681b      	ldr	r3, [r3, #0]
 8103726:	68db      	ldr	r3, [r3, #12]
 8103728:	089b      	lsrs	r3, r3, #2
 810372a:	f003 0307 	and.w	r3, r3, #7
 810372e:	005b      	lsls	r3, r3, #1
 8103730:	fa02 f303 	lsl.w	r3, r2, r3
 8103734:	e00a      	b.n	810374c <HAL_ADC_ConfigChannel+0x14c>
 8103736:	683b      	ldr	r3, [r7, #0]
 8103738:	695a      	ldr	r2, [r3, #20]
 810373a:	687b      	ldr	r3, [r7, #4]
 810373c:	681b      	ldr	r3, [r3, #0]
 810373e:	68db      	ldr	r3, [r3, #12]
 8103740:	089b      	lsrs	r3, r3, #2
 8103742:	f003 0304 	and.w	r3, r3, #4
 8103746:	005b      	lsls	r3, r3, #1
 8103748:	fa02 f303 	lsl.w	r3, r2, r3
 810374c:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 810374e:	683b      	ldr	r3, [r7, #0]
 8103750:	691b      	ldr	r3, [r3, #16]
 8103752:	2b04      	cmp	r3, #4
 8103754:	d027      	beq.n	81037a6 <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8103756:	687b      	ldr	r3, [r7, #4]
 8103758:	6818      	ldr	r0, [r3, #0]
 810375a:	683b      	ldr	r3, [r7, #0]
 810375c:	6919      	ldr	r1, [r3, #16]
 810375e:	683b      	ldr	r3, [r7, #0]
 8103760:	681a      	ldr	r2, [r3, #0]
 8103762:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8103764:	f7ff f9ba 	bl	8102adc <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8103768:	687b      	ldr	r3, [r7, #4]
 810376a:	6818      	ldr	r0, [r3, #0]
 810376c:	683b      	ldr	r3, [r7, #0]
 810376e:	6919      	ldr	r1, [r3, #16]
 8103770:	683b      	ldr	r3, [r7, #0]
 8103772:	7e5b      	ldrb	r3, [r3, #25]
 8103774:	2b01      	cmp	r3, #1
 8103776:	d102      	bne.n	810377e <HAL_ADC_ConfigChannel+0x17e>
 8103778:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 810377c:	e000      	b.n	8103780 <HAL_ADC_ConfigChannel+0x180>
 810377e:	2300      	movs	r3, #0
 8103780:	461a      	mov	r2, r3
 8103782:	f7ff f9e4 	bl	8102b4e <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8103786:	687b      	ldr	r3, [r7, #4]
 8103788:	6818      	ldr	r0, [r3, #0]
 810378a:	683b      	ldr	r3, [r7, #0]
 810378c:	6919      	ldr	r1, [r3, #16]
 810378e:	683b      	ldr	r3, [r7, #0]
 8103790:	7e1b      	ldrb	r3, [r3, #24]
 8103792:	2b01      	cmp	r3, #1
 8103794:	d102      	bne.n	810379c <HAL_ADC_ConfigChannel+0x19c>
 8103796:	f44f 6300 	mov.w	r3, #2048	; 0x800
 810379a:	e000      	b.n	810379e <HAL_ADC_ConfigChannel+0x19e>
 810379c:	2300      	movs	r3, #0
 810379e:	461a      	mov	r2, r3
 81037a0:	f7ff f9bc 	bl	8102b1c <LL_ADC_SetDataRightShift>
 81037a4:	e047      	b.n	8103836 <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 81037a6:	687b      	ldr	r3, [r7, #4]
 81037a8:	681b      	ldr	r3, [r3, #0]
 81037aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 81037ac:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 81037b0:	683b      	ldr	r3, [r7, #0]
 81037b2:	681b      	ldr	r3, [r3, #0]
 81037b4:	069b      	lsls	r3, r3, #26
 81037b6:	429a      	cmp	r2, r3
 81037b8:	d107      	bne.n	81037ca <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 81037ba:	687b      	ldr	r3, [r7, #4]
 81037bc:	681b      	ldr	r3, [r3, #0]
 81037be:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 81037c0:	687b      	ldr	r3, [r7, #4]
 81037c2:	681b      	ldr	r3, [r3, #0]
 81037c4:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 81037c8:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 81037ca:	687b      	ldr	r3, [r7, #4]
 81037cc:	681b      	ldr	r3, [r3, #0]
 81037ce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 81037d0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 81037d4:	683b      	ldr	r3, [r7, #0]
 81037d6:	681b      	ldr	r3, [r3, #0]
 81037d8:	069b      	lsls	r3, r3, #26
 81037da:	429a      	cmp	r2, r3
 81037dc:	d107      	bne.n	81037ee <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 81037de:	687b      	ldr	r3, [r7, #4]
 81037e0:	681b      	ldr	r3, [r3, #0]
 81037e2:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 81037e4:	687b      	ldr	r3, [r7, #4]
 81037e6:	681b      	ldr	r3, [r3, #0]
 81037e8:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 81037ec:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 81037ee:	687b      	ldr	r3, [r7, #4]
 81037f0:	681b      	ldr	r3, [r3, #0]
 81037f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 81037f4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 81037f8:	683b      	ldr	r3, [r7, #0]
 81037fa:	681b      	ldr	r3, [r3, #0]
 81037fc:	069b      	lsls	r3, r3, #26
 81037fe:	429a      	cmp	r2, r3
 8103800:	d107      	bne.n	8103812 <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8103802:	687b      	ldr	r3, [r7, #4]
 8103804:	681b      	ldr	r3, [r3, #0]
 8103806:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8103808:	687b      	ldr	r3, [r7, #4]
 810380a:	681b      	ldr	r3, [r3, #0]
 810380c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8103810:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8103812:	687b      	ldr	r3, [r7, #4]
 8103814:	681b      	ldr	r3, [r3, #0]
 8103816:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8103818:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 810381c:	683b      	ldr	r3, [r7, #0]
 810381e:	681b      	ldr	r3, [r3, #0]
 8103820:	069b      	lsls	r3, r3, #26
 8103822:	429a      	cmp	r2, r3
 8103824:	d107      	bne.n	8103836 <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8103826:	687b      	ldr	r3, [r7, #4]
 8103828:	681b      	ldr	r3, [r3, #0]
 810382a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 810382c:	687b      	ldr	r3, [r7, #4]
 810382e:	681b      	ldr	r3, [r3, #0]
 8103830:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8103834:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8103836:	687b      	ldr	r3, [r7, #4]
 8103838:	681b      	ldr	r3, [r3, #0]
 810383a:	4618      	mov	r0, r3
 810383c:	f7ff faae 	bl	8102d9c <LL_ADC_IsEnabled>
 8103840:	4603      	mov	r3, r0
 8103842:	2b00      	cmp	r3, #0
 8103844:	f040 820d 	bne.w	8103c62 <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8103848:	687b      	ldr	r3, [r7, #4]
 810384a:	6818      	ldr	r0, [r3, #0]
 810384c:	683b      	ldr	r3, [r7, #0]
 810384e:	6819      	ldr	r1, [r3, #0]
 8103850:	683b      	ldr	r3, [r7, #0]
 8103852:	68db      	ldr	r3, [r3, #12]
 8103854:	461a      	mov	r2, r3
 8103856:	f7ff fa13 	bl	8102c80 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 810385a:	683b      	ldr	r3, [r7, #0]
 810385c:	68db      	ldr	r3, [r3, #12]
 810385e:	4a0c      	ldr	r2, [pc, #48]	; (8103890 <HAL_ADC_ConfigChannel+0x290>)
 8103860:	4293      	cmp	r3, r2
 8103862:	f040 8133 	bne.w	8103acc <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8103866:	687b      	ldr	r3, [r7, #4]
 8103868:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 810386a:	683b      	ldr	r3, [r7, #0]
 810386c:	681b      	ldr	r3, [r3, #0]
 810386e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8103872:	2b00      	cmp	r3, #0
 8103874:	d110      	bne.n	8103898 <HAL_ADC_ConfigChannel+0x298>
 8103876:	683b      	ldr	r3, [r7, #0]
 8103878:	681b      	ldr	r3, [r3, #0]
 810387a:	0e9b      	lsrs	r3, r3, #26
 810387c:	3301      	adds	r3, #1
 810387e:	f003 031f 	and.w	r3, r3, #31
 8103882:	2b09      	cmp	r3, #9
 8103884:	bf94      	ite	ls
 8103886:	2301      	movls	r3, #1
 8103888:	2300      	movhi	r3, #0
 810388a:	b2db      	uxtb	r3, r3
 810388c:	e01e      	b.n	81038cc <HAL_ADC_ConfigChannel+0x2cc>
 810388e:	bf00      	nop
 8103890:	47ff0000 	.word	0x47ff0000
 8103894:	5c001000 	.word	0x5c001000
 8103898:	683b      	ldr	r3, [r7, #0]
 810389a:	681b      	ldr	r3, [r3, #0]
 810389c:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 810389e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 81038a0:	fa93 f3a3 	rbit	r3, r3
 81038a4:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 81038a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 81038a8:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 81038aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 81038ac:	2b00      	cmp	r3, #0
 81038ae:	d101      	bne.n	81038b4 <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 81038b0:	2320      	movs	r3, #32
 81038b2:	e003      	b.n	81038bc <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 81038b4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 81038b6:	fab3 f383 	clz	r3, r3
 81038ba:	b2db      	uxtb	r3, r3
 81038bc:	3301      	adds	r3, #1
 81038be:	f003 031f 	and.w	r3, r3, #31
 81038c2:	2b09      	cmp	r3, #9
 81038c4:	bf94      	ite	ls
 81038c6:	2301      	movls	r3, #1
 81038c8:	2300      	movhi	r3, #0
 81038ca:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 81038cc:	2b00      	cmp	r3, #0
 81038ce:	d079      	beq.n	81039c4 <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 81038d0:	683b      	ldr	r3, [r7, #0]
 81038d2:	681b      	ldr	r3, [r3, #0]
 81038d4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 81038d8:	2b00      	cmp	r3, #0
 81038da:	d107      	bne.n	81038ec <HAL_ADC_ConfigChannel+0x2ec>
 81038dc:	683b      	ldr	r3, [r7, #0]
 81038de:	681b      	ldr	r3, [r3, #0]
 81038e0:	0e9b      	lsrs	r3, r3, #26
 81038e2:	3301      	adds	r3, #1
 81038e4:	069b      	lsls	r3, r3, #26
 81038e6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 81038ea:	e015      	b.n	8103918 <HAL_ADC_ConfigChannel+0x318>
 81038ec:	683b      	ldr	r3, [r7, #0]
 81038ee:	681b      	ldr	r3, [r3, #0]
 81038f0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 81038f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 81038f4:	fa93 f3a3 	rbit	r3, r3
 81038f8:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 81038fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 81038fc:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 81038fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8103900:	2b00      	cmp	r3, #0
 8103902:	d101      	bne.n	8103908 <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 8103904:	2320      	movs	r3, #32
 8103906:	e003      	b.n	8103910 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8103908:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 810390a:	fab3 f383 	clz	r3, r3
 810390e:	b2db      	uxtb	r3, r3
 8103910:	3301      	adds	r3, #1
 8103912:	069b      	lsls	r3, r3, #26
 8103914:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8103918:	683b      	ldr	r3, [r7, #0]
 810391a:	681b      	ldr	r3, [r3, #0]
 810391c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8103920:	2b00      	cmp	r3, #0
 8103922:	d109      	bne.n	8103938 <HAL_ADC_ConfigChannel+0x338>
 8103924:	683b      	ldr	r3, [r7, #0]
 8103926:	681b      	ldr	r3, [r3, #0]
 8103928:	0e9b      	lsrs	r3, r3, #26
 810392a:	3301      	adds	r3, #1
 810392c:	f003 031f 	and.w	r3, r3, #31
 8103930:	2101      	movs	r1, #1
 8103932:	fa01 f303 	lsl.w	r3, r1, r3
 8103936:	e017      	b.n	8103968 <HAL_ADC_ConfigChannel+0x368>
 8103938:	683b      	ldr	r3, [r7, #0]
 810393a:	681b      	ldr	r3, [r3, #0]
 810393c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 810393e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8103940:	fa93 f3a3 	rbit	r3, r3
 8103944:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8103946:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8103948:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 810394a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 810394c:	2b00      	cmp	r3, #0
 810394e:	d101      	bne.n	8103954 <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 8103950:	2320      	movs	r3, #32
 8103952:	e003      	b.n	810395c <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 8103954:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8103956:	fab3 f383 	clz	r3, r3
 810395a:	b2db      	uxtb	r3, r3
 810395c:	3301      	adds	r3, #1
 810395e:	f003 031f 	and.w	r3, r3, #31
 8103962:	2101      	movs	r1, #1
 8103964:	fa01 f303 	lsl.w	r3, r1, r3
 8103968:	ea42 0103 	orr.w	r1, r2, r3
 810396c:	683b      	ldr	r3, [r7, #0]
 810396e:	681b      	ldr	r3, [r3, #0]
 8103970:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8103974:	2b00      	cmp	r3, #0
 8103976:	d10a      	bne.n	810398e <HAL_ADC_ConfigChannel+0x38e>
 8103978:	683b      	ldr	r3, [r7, #0]
 810397a:	681b      	ldr	r3, [r3, #0]
 810397c:	0e9b      	lsrs	r3, r3, #26
 810397e:	3301      	adds	r3, #1
 8103980:	f003 021f 	and.w	r2, r3, #31
 8103984:	4613      	mov	r3, r2
 8103986:	005b      	lsls	r3, r3, #1
 8103988:	4413      	add	r3, r2
 810398a:	051b      	lsls	r3, r3, #20
 810398c:	e018      	b.n	81039c0 <HAL_ADC_ConfigChannel+0x3c0>
 810398e:	683b      	ldr	r3, [r7, #0]
 8103990:	681b      	ldr	r3, [r3, #0]
 8103992:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8103994:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8103996:	fa93 f3a3 	rbit	r3, r3
 810399a:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 810399c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810399e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 81039a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81039a2:	2b00      	cmp	r3, #0
 81039a4:	d101      	bne.n	81039aa <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 81039a6:	2320      	movs	r3, #32
 81039a8:	e003      	b.n	81039b2 <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 81039aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81039ac:	fab3 f383 	clz	r3, r3
 81039b0:	b2db      	uxtb	r3, r3
 81039b2:	3301      	adds	r3, #1
 81039b4:	f003 021f 	and.w	r2, r3, #31
 81039b8:	4613      	mov	r3, r2
 81039ba:	005b      	lsls	r3, r3, #1
 81039bc:	4413      	add	r3, r2
 81039be:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 81039c0:	430b      	orrs	r3, r1
 81039c2:	e07e      	b.n	8103ac2 <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 81039c4:	683b      	ldr	r3, [r7, #0]
 81039c6:	681b      	ldr	r3, [r3, #0]
 81039c8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 81039cc:	2b00      	cmp	r3, #0
 81039ce:	d107      	bne.n	81039e0 <HAL_ADC_ConfigChannel+0x3e0>
 81039d0:	683b      	ldr	r3, [r7, #0]
 81039d2:	681b      	ldr	r3, [r3, #0]
 81039d4:	0e9b      	lsrs	r3, r3, #26
 81039d6:	3301      	adds	r3, #1
 81039d8:	069b      	lsls	r3, r3, #26
 81039da:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 81039de:	e015      	b.n	8103a0c <HAL_ADC_ConfigChannel+0x40c>
 81039e0:	683b      	ldr	r3, [r7, #0]
 81039e2:	681b      	ldr	r3, [r3, #0]
 81039e4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 81039e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81039e8:	fa93 f3a3 	rbit	r3, r3
 81039ec:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 81039ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81039f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 81039f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 81039f4:	2b00      	cmp	r3, #0
 81039f6:	d101      	bne.n	81039fc <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 81039f8:	2320      	movs	r3, #32
 81039fa:	e003      	b.n	8103a04 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 81039fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 81039fe:	fab3 f383 	clz	r3, r3
 8103a02:	b2db      	uxtb	r3, r3
 8103a04:	3301      	adds	r3, #1
 8103a06:	069b      	lsls	r3, r3, #26
 8103a08:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8103a0c:	683b      	ldr	r3, [r7, #0]
 8103a0e:	681b      	ldr	r3, [r3, #0]
 8103a10:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8103a14:	2b00      	cmp	r3, #0
 8103a16:	d109      	bne.n	8103a2c <HAL_ADC_ConfigChannel+0x42c>
 8103a18:	683b      	ldr	r3, [r7, #0]
 8103a1a:	681b      	ldr	r3, [r3, #0]
 8103a1c:	0e9b      	lsrs	r3, r3, #26
 8103a1e:	3301      	adds	r3, #1
 8103a20:	f003 031f 	and.w	r3, r3, #31
 8103a24:	2101      	movs	r1, #1
 8103a26:	fa01 f303 	lsl.w	r3, r1, r3
 8103a2a:	e017      	b.n	8103a5c <HAL_ADC_ConfigChannel+0x45c>
 8103a2c:	683b      	ldr	r3, [r7, #0]
 8103a2e:	681b      	ldr	r3, [r3, #0]
 8103a30:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8103a32:	69fb      	ldr	r3, [r7, #28]
 8103a34:	fa93 f3a3 	rbit	r3, r3
 8103a38:	61bb      	str	r3, [r7, #24]
  return result;
 8103a3a:	69bb      	ldr	r3, [r7, #24]
 8103a3c:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8103a3e:	6a3b      	ldr	r3, [r7, #32]
 8103a40:	2b00      	cmp	r3, #0
 8103a42:	d101      	bne.n	8103a48 <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 8103a44:	2320      	movs	r3, #32
 8103a46:	e003      	b.n	8103a50 <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 8103a48:	6a3b      	ldr	r3, [r7, #32]
 8103a4a:	fab3 f383 	clz	r3, r3
 8103a4e:	b2db      	uxtb	r3, r3
 8103a50:	3301      	adds	r3, #1
 8103a52:	f003 031f 	and.w	r3, r3, #31
 8103a56:	2101      	movs	r1, #1
 8103a58:	fa01 f303 	lsl.w	r3, r1, r3
 8103a5c:	ea42 0103 	orr.w	r1, r2, r3
 8103a60:	683b      	ldr	r3, [r7, #0]
 8103a62:	681b      	ldr	r3, [r3, #0]
 8103a64:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8103a68:	2b00      	cmp	r3, #0
 8103a6a:	d10d      	bne.n	8103a88 <HAL_ADC_ConfigChannel+0x488>
 8103a6c:	683b      	ldr	r3, [r7, #0]
 8103a6e:	681b      	ldr	r3, [r3, #0]
 8103a70:	0e9b      	lsrs	r3, r3, #26
 8103a72:	3301      	adds	r3, #1
 8103a74:	f003 021f 	and.w	r2, r3, #31
 8103a78:	4613      	mov	r3, r2
 8103a7a:	005b      	lsls	r3, r3, #1
 8103a7c:	4413      	add	r3, r2
 8103a7e:	3b1e      	subs	r3, #30
 8103a80:	051b      	lsls	r3, r3, #20
 8103a82:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8103a86:	e01b      	b.n	8103ac0 <HAL_ADC_ConfigChannel+0x4c0>
 8103a88:	683b      	ldr	r3, [r7, #0]
 8103a8a:	681b      	ldr	r3, [r3, #0]
 8103a8c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8103a8e:	693b      	ldr	r3, [r7, #16]
 8103a90:	fa93 f3a3 	rbit	r3, r3
 8103a94:	60fb      	str	r3, [r7, #12]
  return result;
 8103a96:	68fb      	ldr	r3, [r7, #12]
 8103a98:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8103a9a:	697b      	ldr	r3, [r7, #20]
 8103a9c:	2b00      	cmp	r3, #0
 8103a9e:	d101      	bne.n	8103aa4 <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 8103aa0:	2320      	movs	r3, #32
 8103aa2:	e003      	b.n	8103aac <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 8103aa4:	697b      	ldr	r3, [r7, #20]
 8103aa6:	fab3 f383 	clz	r3, r3
 8103aaa:	b2db      	uxtb	r3, r3
 8103aac:	3301      	adds	r3, #1
 8103aae:	f003 021f 	and.w	r2, r3, #31
 8103ab2:	4613      	mov	r3, r2
 8103ab4:	005b      	lsls	r3, r3, #1
 8103ab6:	4413      	add	r3, r2
 8103ab8:	3b1e      	subs	r3, #30
 8103aba:	051b      	lsls	r3, r3, #20
 8103abc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8103ac0:	430b      	orrs	r3, r1
 8103ac2:	683a      	ldr	r2, [r7, #0]
 8103ac4:	6892      	ldr	r2, [r2, #8]
 8103ac6:	4619      	mov	r1, r3
 8103ac8:	f7ff f8ae 	bl	8102c28 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8103acc:	683b      	ldr	r3, [r7, #0]
 8103ace:	681b      	ldr	r3, [r3, #0]
 8103ad0:	2b00      	cmp	r3, #0
 8103ad2:	f280 80c6 	bge.w	8103c62 <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8103ad6:	687b      	ldr	r3, [r7, #4]
 8103ad8:	681b      	ldr	r3, [r3, #0]
 8103ada:	4a67      	ldr	r2, [pc, #412]	; (8103c78 <HAL_ADC_ConfigChannel+0x678>)
 8103adc:	4293      	cmp	r3, r2
 8103ade:	d004      	beq.n	8103aea <HAL_ADC_ConfigChannel+0x4ea>
 8103ae0:	687b      	ldr	r3, [r7, #4]
 8103ae2:	681b      	ldr	r3, [r3, #0]
 8103ae4:	4a65      	ldr	r2, [pc, #404]	; (8103c7c <HAL_ADC_ConfigChannel+0x67c>)
 8103ae6:	4293      	cmp	r3, r2
 8103ae8:	d101      	bne.n	8103aee <HAL_ADC_ConfigChannel+0x4ee>
 8103aea:	4b65      	ldr	r3, [pc, #404]	; (8103c80 <HAL_ADC_ConfigChannel+0x680>)
 8103aec:	e000      	b.n	8103af0 <HAL_ADC_ConfigChannel+0x4f0>
 8103aee:	4b65      	ldr	r3, [pc, #404]	; (8103c84 <HAL_ADC_ConfigChannel+0x684>)
 8103af0:	4618      	mov	r0, r3
 8103af2:	f7fe ffe5 	bl	8102ac0 <LL_ADC_GetCommonPathInternalCh>
 8103af6:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8103af8:	687b      	ldr	r3, [r7, #4]
 8103afa:	681b      	ldr	r3, [r3, #0]
 8103afc:	4a5e      	ldr	r2, [pc, #376]	; (8103c78 <HAL_ADC_ConfigChannel+0x678>)
 8103afe:	4293      	cmp	r3, r2
 8103b00:	d004      	beq.n	8103b0c <HAL_ADC_ConfigChannel+0x50c>
 8103b02:	687b      	ldr	r3, [r7, #4]
 8103b04:	681b      	ldr	r3, [r3, #0]
 8103b06:	4a5d      	ldr	r2, [pc, #372]	; (8103c7c <HAL_ADC_ConfigChannel+0x67c>)
 8103b08:	4293      	cmp	r3, r2
 8103b0a:	d10e      	bne.n	8103b2a <HAL_ADC_ConfigChannel+0x52a>
 8103b0c:	485a      	ldr	r0, [pc, #360]	; (8103c78 <HAL_ADC_ConfigChannel+0x678>)
 8103b0e:	f7ff f945 	bl	8102d9c <LL_ADC_IsEnabled>
 8103b12:	4604      	mov	r4, r0
 8103b14:	4859      	ldr	r0, [pc, #356]	; (8103c7c <HAL_ADC_ConfigChannel+0x67c>)
 8103b16:	f7ff f941 	bl	8102d9c <LL_ADC_IsEnabled>
 8103b1a:	4603      	mov	r3, r0
 8103b1c:	4323      	orrs	r3, r4
 8103b1e:	2b00      	cmp	r3, #0
 8103b20:	bf0c      	ite	eq
 8103b22:	2301      	moveq	r3, #1
 8103b24:	2300      	movne	r3, #0
 8103b26:	b2db      	uxtb	r3, r3
 8103b28:	e008      	b.n	8103b3c <HAL_ADC_ConfigChannel+0x53c>
 8103b2a:	4857      	ldr	r0, [pc, #348]	; (8103c88 <HAL_ADC_ConfigChannel+0x688>)
 8103b2c:	f7ff f936 	bl	8102d9c <LL_ADC_IsEnabled>
 8103b30:	4603      	mov	r3, r0
 8103b32:	2b00      	cmp	r3, #0
 8103b34:	bf0c      	ite	eq
 8103b36:	2301      	moveq	r3, #1
 8103b38:	2300      	movne	r3, #0
 8103b3a:	b2db      	uxtb	r3, r3
 8103b3c:	2b00      	cmp	r3, #0
 8103b3e:	d07d      	beq.n	8103c3c <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8103b40:	683b      	ldr	r3, [r7, #0]
 8103b42:	681b      	ldr	r3, [r3, #0]
 8103b44:	4a51      	ldr	r2, [pc, #324]	; (8103c8c <HAL_ADC_ConfigChannel+0x68c>)
 8103b46:	4293      	cmp	r3, r2
 8103b48:	d130      	bne.n	8103bac <HAL_ADC_ConfigChannel+0x5ac>
 8103b4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8103b4c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8103b50:	2b00      	cmp	r3, #0
 8103b52:	d12b      	bne.n	8103bac <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8103b54:	687b      	ldr	r3, [r7, #4]
 8103b56:	681b      	ldr	r3, [r3, #0]
 8103b58:	4a4b      	ldr	r2, [pc, #300]	; (8103c88 <HAL_ADC_ConfigChannel+0x688>)
 8103b5a:	4293      	cmp	r3, r2
 8103b5c:	f040 8081 	bne.w	8103c62 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8103b60:	687b      	ldr	r3, [r7, #4]
 8103b62:	681b      	ldr	r3, [r3, #0]
 8103b64:	4a44      	ldr	r2, [pc, #272]	; (8103c78 <HAL_ADC_ConfigChannel+0x678>)
 8103b66:	4293      	cmp	r3, r2
 8103b68:	d004      	beq.n	8103b74 <HAL_ADC_ConfigChannel+0x574>
 8103b6a:	687b      	ldr	r3, [r7, #4]
 8103b6c:	681b      	ldr	r3, [r3, #0]
 8103b6e:	4a43      	ldr	r2, [pc, #268]	; (8103c7c <HAL_ADC_ConfigChannel+0x67c>)
 8103b70:	4293      	cmp	r3, r2
 8103b72:	d101      	bne.n	8103b78 <HAL_ADC_ConfigChannel+0x578>
 8103b74:	4a42      	ldr	r2, [pc, #264]	; (8103c80 <HAL_ADC_ConfigChannel+0x680>)
 8103b76:	e000      	b.n	8103b7a <HAL_ADC_ConfigChannel+0x57a>
 8103b78:	4a42      	ldr	r2, [pc, #264]	; (8103c84 <HAL_ADC_ConfigChannel+0x684>)
 8103b7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8103b7c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8103b80:	4619      	mov	r1, r3
 8103b82:	4610      	mov	r0, r2
 8103b84:	f7fe ff89 	bl	8102a9a <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8103b88:	4b41      	ldr	r3, [pc, #260]	; (8103c90 <HAL_ADC_ConfigChannel+0x690>)
 8103b8a:	681b      	ldr	r3, [r3, #0]
 8103b8c:	099b      	lsrs	r3, r3, #6
 8103b8e:	4a41      	ldr	r2, [pc, #260]	; (8103c94 <HAL_ADC_ConfigChannel+0x694>)
 8103b90:	fba2 2303 	umull	r2, r3, r2, r3
 8103b94:	099b      	lsrs	r3, r3, #6
 8103b96:	3301      	adds	r3, #1
 8103b98:	005b      	lsls	r3, r3, #1
 8103b9a:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8103b9c:	e002      	b.n	8103ba4 <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 8103b9e:	68bb      	ldr	r3, [r7, #8]
 8103ba0:	3b01      	subs	r3, #1
 8103ba2:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8103ba4:	68bb      	ldr	r3, [r7, #8]
 8103ba6:	2b00      	cmp	r3, #0
 8103ba8:	d1f9      	bne.n	8103b9e <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8103baa:	e05a      	b.n	8103c62 <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8103bac:	683b      	ldr	r3, [r7, #0]
 8103bae:	681b      	ldr	r3, [r3, #0]
 8103bb0:	4a39      	ldr	r2, [pc, #228]	; (8103c98 <HAL_ADC_ConfigChannel+0x698>)
 8103bb2:	4293      	cmp	r3, r2
 8103bb4:	d11e      	bne.n	8103bf4 <HAL_ADC_ConfigChannel+0x5f4>
 8103bb6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8103bb8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8103bbc:	2b00      	cmp	r3, #0
 8103bbe:	d119      	bne.n	8103bf4 <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8103bc0:	687b      	ldr	r3, [r7, #4]
 8103bc2:	681b      	ldr	r3, [r3, #0]
 8103bc4:	4a30      	ldr	r2, [pc, #192]	; (8103c88 <HAL_ADC_ConfigChannel+0x688>)
 8103bc6:	4293      	cmp	r3, r2
 8103bc8:	d14b      	bne.n	8103c62 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8103bca:	687b      	ldr	r3, [r7, #4]
 8103bcc:	681b      	ldr	r3, [r3, #0]
 8103bce:	4a2a      	ldr	r2, [pc, #168]	; (8103c78 <HAL_ADC_ConfigChannel+0x678>)
 8103bd0:	4293      	cmp	r3, r2
 8103bd2:	d004      	beq.n	8103bde <HAL_ADC_ConfigChannel+0x5de>
 8103bd4:	687b      	ldr	r3, [r7, #4]
 8103bd6:	681b      	ldr	r3, [r3, #0]
 8103bd8:	4a28      	ldr	r2, [pc, #160]	; (8103c7c <HAL_ADC_ConfigChannel+0x67c>)
 8103bda:	4293      	cmp	r3, r2
 8103bdc:	d101      	bne.n	8103be2 <HAL_ADC_ConfigChannel+0x5e2>
 8103bde:	4a28      	ldr	r2, [pc, #160]	; (8103c80 <HAL_ADC_ConfigChannel+0x680>)
 8103be0:	e000      	b.n	8103be4 <HAL_ADC_ConfigChannel+0x5e4>
 8103be2:	4a28      	ldr	r2, [pc, #160]	; (8103c84 <HAL_ADC_ConfigChannel+0x684>)
 8103be4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8103be6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8103bea:	4619      	mov	r1, r3
 8103bec:	4610      	mov	r0, r2
 8103bee:	f7fe ff54 	bl	8102a9a <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8103bf2:	e036      	b.n	8103c62 <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8103bf4:	683b      	ldr	r3, [r7, #0]
 8103bf6:	681b      	ldr	r3, [r3, #0]
 8103bf8:	4a28      	ldr	r2, [pc, #160]	; (8103c9c <HAL_ADC_ConfigChannel+0x69c>)
 8103bfa:	4293      	cmp	r3, r2
 8103bfc:	d131      	bne.n	8103c62 <HAL_ADC_ConfigChannel+0x662>
 8103bfe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8103c00:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8103c04:	2b00      	cmp	r3, #0
 8103c06:	d12c      	bne.n	8103c62 <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8103c08:	687b      	ldr	r3, [r7, #4]
 8103c0a:	681b      	ldr	r3, [r3, #0]
 8103c0c:	4a1e      	ldr	r2, [pc, #120]	; (8103c88 <HAL_ADC_ConfigChannel+0x688>)
 8103c0e:	4293      	cmp	r3, r2
 8103c10:	d127      	bne.n	8103c62 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8103c12:	687b      	ldr	r3, [r7, #4]
 8103c14:	681b      	ldr	r3, [r3, #0]
 8103c16:	4a18      	ldr	r2, [pc, #96]	; (8103c78 <HAL_ADC_ConfigChannel+0x678>)
 8103c18:	4293      	cmp	r3, r2
 8103c1a:	d004      	beq.n	8103c26 <HAL_ADC_ConfigChannel+0x626>
 8103c1c:	687b      	ldr	r3, [r7, #4]
 8103c1e:	681b      	ldr	r3, [r3, #0]
 8103c20:	4a16      	ldr	r2, [pc, #88]	; (8103c7c <HAL_ADC_ConfigChannel+0x67c>)
 8103c22:	4293      	cmp	r3, r2
 8103c24:	d101      	bne.n	8103c2a <HAL_ADC_ConfigChannel+0x62a>
 8103c26:	4a16      	ldr	r2, [pc, #88]	; (8103c80 <HAL_ADC_ConfigChannel+0x680>)
 8103c28:	e000      	b.n	8103c2c <HAL_ADC_ConfigChannel+0x62c>
 8103c2a:	4a16      	ldr	r2, [pc, #88]	; (8103c84 <HAL_ADC_ConfigChannel+0x684>)
 8103c2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8103c2e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8103c32:	4619      	mov	r1, r3
 8103c34:	4610      	mov	r0, r2
 8103c36:	f7fe ff30 	bl	8102a9a <LL_ADC_SetCommonPathInternalCh>
 8103c3a:	e012      	b.n	8103c62 <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8103c3c:	687b      	ldr	r3, [r7, #4]
 8103c3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103c40:	f043 0220 	orr.w	r2, r3, #32
 8103c44:	687b      	ldr	r3, [r7, #4]
 8103c46:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8103c48:	2301      	movs	r3, #1
 8103c4a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8103c4e:	e008      	b.n	8103c62 <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8103c50:	687b      	ldr	r3, [r7, #4]
 8103c52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103c54:	f043 0220 	orr.w	r2, r3, #32
 8103c58:	687b      	ldr	r3, [r7, #4]
 8103c5a:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8103c5c:	2301      	movs	r3, #1
 8103c5e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8103c62:	687b      	ldr	r3, [r7, #4]
 8103c64:	2200      	movs	r2, #0
 8103c66:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8103c6a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8103c6e:	4618      	mov	r0, r3
 8103c70:	3784      	adds	r7, #132	; 0x84
 8103c72:	46bd      	mov	sp, r7
 8103c74:	bd90      	pop	{r4, r7, pc}
 8103c76:	bf00      	nop
 8103c78:	40022000 	.word	0x40022000
 8103c7c:	40022100 	.word	0x40022100
 8103c80:	40022300 	.word	0x40022300
 8103c84:	58026300 	.word	0x58026300
 8103c88:	58026000 	.word	0x58026000
 8103c8c:	cb840000 	.word	0xcb840000
 8103c90:	10000000 	.word	0x10000000
 8103c94:	053e2d63 	.word	0x053e2d63
 8103c98:	c7520000 	.word	0xc7520000
 8103c9c:	cfb80000 	.word	0xcfb80000

08103ca0 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8103ca0:	b580      	push	{r7, lr}
 8103ca2:	b084      	sub	sp, #16
 8103ca4:	af00      	add	r7, sp, #0
 8103ca6:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8103ca8:	687b      	ldr	r3, [r7, #4]
 8103caa:	681b      	ldr	r3, [r3, #0]
 8103cac:	4a79      	ldr	r2, [pc, #484]	; (8103e94 <ADC_ConfigureBoostMode+0x1f4>)
 8103cae:	4293      	cmp	r3, r2
 8103cb0:	d004      	beq.n	8103cbc <ADC_ConfigureBoostMode+0x1c>
 8103cb2:	687b      	ldr	r3, [r7, #4]
 8103cb4:	681b      	ldr	r3, [r3, #0]
 8103cb6:	4a78      	ldr	r2, [pc, #480]	; (8103e98 <ADC_ConfigureBoostMode+0x1f8>)
 8103cb8:	4293      	cmp	r3, r2
 8103cba:	d109      	bne.n	8103cd0 <ADC_ConfigureBoostMode+0x30>
 8103cbc:	4b77      	ldr	r3, [pc, #476]	; (8103e9c <ADC_ConfigureBoostMode+0x1fc>)
 8103cbe:	689b      	ldr	r3, [r3, #8]
 8103cc0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8103cc4:	2b00      	cmp	r3, #0
 8103cc6:	bf14      	ite	ne
 8103cc8:	2301      	movne	r3, #1
 8103cca:	2300      	moveq	r3, #0
 8103ccc:	b2db      	uxtb	r3, r3
 8103cce:	e008      	b.n	8103ce2 <ADC_ConfigureBoostMode+0x42>
 8103cd0:	4b73      	ldr	r3, [pc, #460]	; (8103ea0 <ADC_ConfigureBoostMode+0x200>)
 8103cd2:	689b      	ldr	r3, [r3, #8]
 8103cd4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8103cd8:	2b00      	cmp	r3, #0
 8103cda:	bf14      	ite	ne
 8103cdc:	2301      	movne	r3, #1
 8103cde:	2300      	moveq	r3, #0
 8103ce0:	b2db      	uxtb	r3, r3
 8103ce2:	2b00      	cmp	r3, #0
 8103ce4:	d01c      	beq.n	8103d20 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8103ce6:	f005 ff17 	bl	8109b18 <HAL_RCC_GetHCLKFreq>
 8103cea:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8103cec:	687b      	ldr	r3, [r7, #4]
 8103cee:	685b      	ldr	r3, [r3, #4]
 8103cf0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8103cf4:	d010      	beq.n	8103d18 <ADC_ConfigureBoostMode+0x78>
 8103cf6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8103cfa:	d871      	bhi.n	8103de0 <ADC_ConfigureBoostMode+0x140>
 8103cfc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8103d00:	d002      	beq.n	8103d08 <ADC_ConfigureBoostMode+0x68>
 8103d02:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8103d06:	d16b      	bne.n	8103de0 <ADC_ConfigureBoostMode+0x140>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8103d08:	687b      	ldr	r3, [r7, #4]
 8103d0a:	685b      	ldr	r3, [r3, #4]
 8103d0c:	0c1b      	lsrs	r3, r3, #16
 8103d0e:	68fa      	ldr	r2, [r7, #12]
 8103d10:	fbb2 f3f3 	udiv	r3, r2, r3
 8103d14:	60fb      	str	r3, [r7, #12]
        break;
 8103d16:	e066      	b.n	8103de6 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8103d18:	68fb      	ldr	r3, [r7, #12]
 8103d1a:	089b      	lsrs	r3, r3, #2
 8103d1c:	60fb      	str	r3, [r7, #12]
        break;
 8103d1e:	e062      	b.n	8103de6 <ADC_ConfigureBoostMode+0x146>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8103d20:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8103d24:	f006 fed8 	bl	810aad8 <HAL_RCCEx_GetPeriphCLKFreq>
 8103d28:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8103d2a:	687b      	ldr	r3, [r7, #4]
 8103d2c:	685b      	ldr	r3, [r3, #4]
 8103d2e:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8103d32:	d051      	beq.n	8103dd8 <ADC_ConfigureBoostMode+0x138>
 8103d34:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8103d38:	d854      	bhi.n	8103de4 <ADC_ConfigureBoostMode+0x144>
 8103d3a:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8103d3e:	d047      	beq.n	8103dd0 <ADC_ConfigureBoostMode+0x130>
 8103d40:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8103d44:	d84e      	bhi.n	8103de4 <ADC_ConfigureBoostMode+0x144>
 8103d46:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8103d4a:	d03d      	beq.n	8103dc8 <ADC_ConfigureBoostMode+0x128>
 8103d4c:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8103d50:	d848      	bhi.n	8103de4 <ADC_ConfigureBoostMode+0x144>
 8103d52:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8103d56:	d033      	beq.n	8103dc0 <ADC_ConfigureBoostMode+0x120>
 8103d58:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8103d5c:	d842      	bhi.n	8103de4 <ADC_ConfigureBoostMode+0x144>
 8103d5e:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8103d62:	d029      	beq.n	8103db8 <ADC_ConfigureBoostMode+0x118>
 8103d64:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8103d68:	d83c      	bhi.n	8103de4 <ADC_ConfigureBoostMode+0x144>
 8103d6a:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8103d6e:	d01a      	beq.n	8103da6 <ADC_ConfigureBoostMode+0x106>
 8103d70:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8103d74:	d836      	bhi.n	8103de4 <ADC_ConfigureBoostMode+0x144>
 8103d76:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8103d7a:	d014      	beq.n	8103da6 <ADC_ConfigureBoostMode+0x106>
 8103d7c:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8103d80:	d830      	bhi.n	8103de4 <ADC_ConfigureBoostMode+0x144>
 8103d82:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8103d86:	d00e      	beq.n	8103da6 <ADC_ConfigureBoostMode+0x106>
 8103d88:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8103d8c:	d82a      	bhi.n	8103de4 <ADC_ConfigureBoostMode+0x144>
 8103d8e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8103d92:	d008      	beq.n	8103da6 <ADC_ConfigureBoostMode+0x106>
 8103d94:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8103d98:	d824      	bhi.n	8103de4 <ADC_ConfigureBoostMode+0x144>
 8103d9a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8103d9e:	d002      	beq.n	8103da6 <ADC_ConfigureBoostMode+0x106>
 8103da0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8103da4:	d11e      	bne.n	8103de4 <ADC_ConfigureBoostMode+0x144>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8103da6:	687b      	ldr	r3, [r7, #4]
 8103da8:	685b      	ldr	r3, [r3, #4]
 8103daa:	0c9b      	lsrs	r3, r3, #18
 8103dac:	005b      	lsls	r3, r3, #1
 8103dae:	68fa      	ldr	r2, [r7, #12]
 8103db0:	fbb2 f3f3 	udiv	r3, r2, r3
 8103db4:	60fb      	str	r3, [r7, #12]
        break;
 8103db6:	e016      	b.n	8103de6 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8103db8:	68fb      	ldr	r3, [r7, #12]
 8103dba:	091b      	lsrs	r3, r3, #4
 8103dbc:	60fb      	str	r3, [r7, #12]
        break;
 8103dbe:	e012      	b.n	8103de6 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8103dc0:	68fb      	ldr	r3, [r7, #12]
 8103dc2:	095b      	lsrs	r3, r3, #5
 8103dc4:	60fb      	str	r3, [r7, #12]
        break;
 8103dc6:	e00e      	b.n	8103de6 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8103dc8:	68fb      	ldr	r3, [r7, #12]
 8103dca:	099b      	lsrs	r3, r3, #6
 8103dcc:	60fb      	str	r3, [r7, #12]
        break;
 8103dce:	e00a      	b.n	8103de6 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8103dd0:	68fb      	ldr	r3, [r7, #12]
 8103dd2:	09db      	lsrs	r3, r3, #7
 8103dd4:	60fb      	str	r3, [r7, #12]
        break;
 8103dd6:	e006      	b.n	8103de6 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8103dd8:	68fb      	ldr	r3, [r7, #12]
 8103dda:	0a1b      	lsrs	r3, r3, #8
 8103ddc:	60fb      	str	r3, [r7, #12]
        break;
 8103dde:	e002      	b.n	8103de6 <ADC_ConfigureBoostMode+0x146>
        break;
 8103de0:	bf00      	nop
 8103de2:	e000      	b.n	8103de6 <ADC_ConfigureBoostMode+0x146>
      default:
        break;
 8103de4:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8103de6:	f7fe fe39 	bl	8102a5c <HAL_GetREVID>
 8103dea:	4603      	mov	r3, r0
 8103dec:	f241 0203 	movw	r2, #4099	; 0x1003
 8103df0:	4293      	cmp	r3, r2
 8103df2:	d815      	bhi.n	8103e20 <ADC_ConfigureBoostMode+0x180>
  {
    if (freq > 20000000UL)
 8103df4:	68fb      	ldr	r3, [r7, #12]
 8103df6:	4a2b      	ldr	r2, [pc, #172]	; (8103ea4 <ADC_ConfigureBoostMode+0x204>)
 8103df8:	4293      	cmp	r3, r2
 8103dfa:	d908      	bls.n	8103e0e <ADC_ConfigureBoostMode+0x16e>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8103dfc:	687b      	ldr	r3, [r7, #4]
 8103dfe:	681b      	ldr	r3, [r3, #0]
 8103e00:	689a      	ldr	r2, [r3, #8]
 8103e02:	687b      	ldr	r3, [r7, #4]
 8103e04:	681b      	ldr	r3, [r3, #0]
 8103e06:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8103e0a:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8103e0c:	e03e      	b.n	8103e8c <ADC_ConfigureBoostMode+0x1ec>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8103e0e:	687b      	ldr	r3, [r7, #4]
 8103e10:	681b      	ldr	r3, [r3, #0]
 8103e12:	689a      	ldr	r2, [r3, #8]
 8103e14:	687b      	ldr	r3, [r7, #4]
 8103e16:	681b      	ldr	r3, [r3, #0]
 8103e18:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8103e1c:	609a      	str	r2, [r3, #8]
}
 8103e1e:	e035      	b.n	8103e8c <ADC_ConfigureBoostMode+0x1ec>
    freq /= 2U; /* divider by 2 for Rev.V */
 8103e20:	68fb      	ldr	r3, [r7, #12]
 8103e22:	085b      	lsrs	r3, r3, #1
 8103e24:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8103e26:	68fb      	ldr	r3, [r7, #12]
 8103e28:	4a1f      	ldr	r2, [pc, #124]	; (8103ea8 <ADC_ConfigureBoostMode+0x208>)
 8103e2a:	4293      	cmp	r3, r2
 8103e2c:	d808      	bhi.n	8103e40 <ADC_ConfigureBoostMode+0x1a0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8103e2e:	687b      	ldr	r3, [r7, #4]
 8103e30:	681b      	ldr	r3, [r3, #0]
 8103e32:	689a      	ldr	r2, [r3, #8]
 8103e34:	687b      	ldr	r3, [r7, #4]
 8103e36:	681b      	ldr	r3, [r3, #0]
 8103e38:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8103e3c:	609a      	str	r2, [r3, #8]
}
 8103e3e:	e025      	b.n	8103e8c <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 12500000UL)
 8103e40:	68fb      	ldr	r3, [r7, #12]
 8103e42:	4a1a      	ldr	r2, [pc, #104]	; (8103eac <ADC_ConfigureBoostMode+0x20c>)
 8103e44:	4293      	cmp	r3, r2
 8103e46:	d80a      	bhi.n	8103e5e <ADC_ConfigureBoostMode+0x1be>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8103e48:	687b      	ldr	r3, [r7, #4]
 8103e4a:	681b      	ldr	r3, [r3, #0]
 8103e4c:	689b      	ldr	r3, [r3, #8]
 8103e4e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8103e52:	687b      	ldr	r3, [r7, #4]
 8103e54:	681b      	ldr	r3, [r3, #0]
 8103e56:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8103e5a:	609a      	str	r2, [r3, #8]
}
 8103e5c:	e016      	b.n	8103e8c <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 25000000UL)
 8103e5e:	68fb      	ldr	r3, [r7, #12]
 8103e60:	4a13      	ldr	r2, [pc, #76]	; (8103eb0 <ADC_ConfigureBoostMode+0x210>)
 8103e62:	4293      	cmp	r3, r2
 8103e64:	d80a      	bhi.n	8103e7c <ADC_ConfigureBoostMode+0x1dc>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8103e66:	687b      	ldr	r3, [r7, #4]
 8103e68:	681b      	ldr	r3, [r3, #0]
 8103e6a:	689b      	ldr	r3, [r3, #8]
 8103e6c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8103e70:	687b      	ldr	r3, [r7, #4]
 8103e72:	681b      	ldr	r3, [r3, #0]
 8103e74:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8103e78:	609a      	str	r2, [r3, #8]
}
 8103e7a:	e007      	b.n	8103e8c <ADC_ConfigureBoostMode+0x1ec>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8103e7c:	687b      	ldr	r3, [r7, #4]
 8103e7e:	681b      	ldr	r3, [r3, #0]
 8103e80:	689a      	ldr	r2, [r3, #8]
 8103e82:	687b      	ldr	r3, [r7, #4]
 8103e84:	681b      	ldr	r3, [r3, #0]
 8103e86:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8103e8a:	609a      	str	r2, [r3, #8]
}
 8103e8c:	bf00      	nop
 8103e8e:	3710      	adds	r7, #16
 8103e90:	46bd      	mov	sp, r7
 8103e92:	bd80      	pop	{r7, pc}
 8103e94:	40022000 	.word	0x40022000
 8103e98:	40022100 	.word	0x40022100
 8103e9c:	40022300 	.word	0x40022300
 8103ea0:	58026300 	.word	0x58026300
 8103ea4:	01312d00 	.word	0x01312d00
 8103ea8:	005f5e10 	.word	0x005f5e10
 8103eac:	00bebc20 	.word	0x00bebc20
 8103eb0:	017d7840 	.word	0x017d7840

08103eb4 <LL_ADC_IsEnabled>:
{
 8103eb4:	b480      	push	{r7}
 8103eb6:	b083      	sub	sp, #12
 8103eb8:	af00      	add	r7, sp, #0
 8103eba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8103ebc:	687b      	ldr	r3, [r7, #4]
 8103ebe:	689b      	ldr	r3, [r3, #8]
 8103ec0:	f003 0301 	and.w	r3, r3, #1
 8103ec4:	2b01      	cmp	r3, #1
 8103ec6:	d101      	bne.n	8103ecc <LL_ADC_IsEnabled+0x18>
 8103ec8:	2301      	movs	r3, #1
 8103eca:	e000      	b.n	8103ece <LL_ADC_IsEnabled+0x1a>
 8103ecc:	2300      	movs	r3, #0
}
 8103ece:	4618      	mov	r0, r3
 8103ed0:	370c      	adds	r7, #12
 8103ed2:	46bd      	mov	sp, r7
 8103ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103ed8:	4770      	bx	lr

08103eda <LL_ADC_REG_IsConversionOngoing>:
{
 8103eda:	b480      	push	{r7}
 8103edc:	b083      	sub	sp, #12
 8103ede:	af00      	add	r7, sp, #0
 8103ee0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8103ee2:	687b      	ldr	r3, [r7, #4]
 8103ee4:	689b      	ldr	r3, [r3, #8]
 8103ee6:	f003 0304 	and.w	r3, r3, #4
 8103eea:	2b04      	cmp	r3, #4
 8103eec:	d101      	bne.n	8103ef2 <LL_ADC_REG_IsConversionOngoing+0x18>
 8103eee:	2301      	movs	r3, #1
 8103ef0:	e000      	b.n	8103ef4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8103ef2:	2300      	movs	r3, #0
}
 8103ef4:	4618      	mov	r0, r3
 8103ef6:	370c      	adds	r7, #12
 8103ef8:	46bd      	mov	sp, r7
 8103efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103efe:	4770      	bx	lr

08103f00 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8103f00:	b480      	push	{r7}
 8103f02:	b083      	sub	sp, #12
 8103f04:	af00      	add	r7, sp, #0
 8103f06:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8103f08:	bf00      	nop
 8103f0a:	370c      	adds	r7, #12
 8103f0c:	46bd      	mov	sp, r7
 8103f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103f12:	4770      	bx	lr

08103f14 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8103f14:	b480      	push	{r7}
 8103f16:	b083      	sub	sp, #12
 8103f18:	af00      	add	r7, sp, #0
 8103f1a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8103f1c:	bf00      	nop
 8103f1e:	370c      	adds	r7, #12
 8103f20:	46bd      	mov	sp, r7
 8103f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103f26:	4770      	bx	lr

08103f28 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8103f28:	b480      	push	{r7}
 8103f2a:	b083      	sub	sp, #12
 8103f2c:	af00      	add	r7, sp, #0
 8103f2e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8103f30:	bf00      	nop
 8103f32:	370c      	adds	r7, #12
 8103f34:	46bd      	mov	sp, r7
 8103f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103f3a:	4770      	bx	lr

08103f3c <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8103f3c:	b480      	push	{r7}
 8103f3e:	b083      	sub	sp, #12
 8103f40:	af00      	add	r7, sp, #0
 8103f42:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8103f44:	bf00      	nop
 8103f46:	370c      	adds	r7, #12
 8103f48:	46bd      	mov	sp, r7
 8103f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103f4e:	4770      	bx	lr

08103f50 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8103f50:	b480      	push	{r7}
 8103f52:	b083      	sub	sp, #12
 8103f54:	af00      	add	r7, sp, #0
 8103f56:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8103f58:	bf00      	nop
 8103f5a:	370c      	adds	r7, #12
 8103f5c:	46bd      	mov	sp, r7
 8103f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103f62:	4770      	bx	lr

08103f64 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8103f64:	b590      	push	{r4, r7, lr}
 8103f66:	b09f      	sub	sp, #124	; 0x7c
 8103f68:	af00      	add	r7, sp, #0
 8103f6a:	6078      	str	r0, [r7, #4]
 8103f6c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8103f6e:	2300      	movs	r3, #0
 8103f70:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8103f74:	687b      	ldr	r3, [r7, #4]
 8103f76:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8103f7a:	2b01      	cmp	r3, #1
 8103f7c:	d101      	bne.n	8103f82 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8103f7e:	2302      	movs	r3, #2
 8103f80:	e0c4      	b.n	810410c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
 8103f82:	687b      	ldr	r3, [r7, #4]
 8103f84:	2201      	movs	r2, #1
 8103f86:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8103f8a:	2300      	movs	r3, #0
 8103f8c:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8103f8e:	2300      	movs	r3, #0
 8103f90:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8103f92:	687b      	ldr	r3, [r7, #4]
 8103f94:	681b      	ldr	r3, [r3, #0]
 8103f96:	4a5f      	ldr	r2, [pc, #380]	; (8104114 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8103f98:	4293      	cmp	r3, r2
 8103f9a:	d102      	bne.n	8103fa2 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8103f9c:	4b5e      	ldr	r3, [pc, #376]	; (8104118 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8103f9e:	60bb      	str	r3, [r7, #8]
 8103fa0:	e001      	b.n	8103fa6 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8103fa2:	2300      	movs	r3, #0
 8103fa4:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8103fa6:	68bb      	ldr	r3, [r7, #8]
 8103fa8:	2b00      	cmp	r3, #0
 8103faa:	d10b      	bne.n	8103fc4 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8103fac:	687b      	ldr	r3, [r7, #4]
 8103fae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103fb0:	f043 0220 	orr.w	r2, r3, #32
 8103fb4:	687b      	ldr	r3, [r7, #4]
 8103fb6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8103fb8:	687b      	ldr	r3, [r7, #4]
 8103fba:	2200      	movs	r2, #0
 8103fbc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8103fc0:	2301      	movs	r3, #1
 8103fc2:	e0a3      	b.n	810410c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8103fc4:	68bb      	ldr	r3, [r7, #8]
 8103fc6:	4618      	mov	r0, r3
 8103fc8:	f7ff ff87 	bl	8103eda <LL_ADC_REG_IsConversionOngoing>
 8103fcc:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8103fce:	687b      	ldr	r3, [r7, #4]
 8103fd0:	681b      	ldr	r3, [r3, #0]
 8103fd2:	4618      	mov	r0, r3
 8103fd4:	f7ff ff81 	bl	8103eda <LL_ADC_REG_IsConversionOngoing>
 8103fd8:	4603      	mov	r3, r0
 8103fda:	2b00      	cmp	r3, #0
 8103fdc:	f040 8085 	bne.w	81040ea <HAL_ADCEx_MultiModeConfigChannel+0x186>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8103fe0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8103fe2:	2b00      	cmp	r3, #0
 8103fe4:	f040 8081 	bne.w	81040ea <HAL_ADCEx_MultiModeConfigChannel+0x186>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8103fe8:	687b      	ldr	r3, [r7, #4]
 8103fea:	681b      	ldr	r3, [r3, #0]
 8103fec:	4a49      	ldr	r2, [pc, #292]	; (8104114 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8103fee:	4293      	cmp	r3, r2
 8103ff0:	d004      	beq.n	8103ffc <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8103ff2:	687b      	ldr	r3, [r7, #4]
 8103ff4:	681b      	ldr	r3, [r3, #0]
 8103ff6:	4a48      	ldr	r2, [pc, #288]	; (8104118 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8103ff8:	4293      	cmp	r3, r2
 8103ffa:	d101      	bne.n	8104000 <HAL_ADCEx_MultiModeConfigChannel+0x9c>
 8103ffc:	4b47      	ldr	r3, [pc, #284]	; (810411c <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8103ffe:	e000      	b.n	8104002 <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 8104000:	4b47      	ldr	r3, [pc, #284]	; (8104120 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8104002:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8104004:	683b      	ldr	r3, [r7, #0]
 8104006:	681b      	ldr	r3, [r3, #0]
 8104008:	2b00      	cmp	r3, #0
 810400a:	d03b      	beq.n	8104084 <HAL_ADCEx_MultiModeConfigChannel+0x120>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 810400c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 810400e:	689b      	ldr	r3, [r3, #8]
 8104010:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8104014:	683b      	ldr	r3, [r7, #0]
 8104016:	685b      	ldr	r3, [r3, #4]
 8104018:	431a      	orrs	r2, r3
 810401a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 810401c:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 810401e:	687b      	ldr	r3, [r7, #4]
 8104020:	681b      	ldr	r3, [r3, #0]
 8104022:	4a3c      	ldr	r2, [pc, #240]	; (8104114 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8104024:	4293      	cmp	r3, r2
 8104026:	d004      	beq.n	8104032 <HAL_ADCEx_MultiModeConfigChannel+0xce>
 8104028:	687b      	ldr	r3, [r7, #4]
 810402a:	681b      	ldr	r3, [r3, #0]
 810402c:	4a3a      	ldr	r2, [pc, #232]	; (8104118 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 810402e:	4293      	cmp	r3, r2
 8104030:	d10e      	bne.n	8104050 <HAL_ADCEx_MultiModeConfigChannel+0xec>
 8104032:	4838      	ldr	r0, [pc, #224]	; (8104114 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8104034:	f7ff ff3e 	bl	8103eb4 <LL_ADC_IsEnabled>
 8104038:	4604      	mov	r4, r0
 810403a:	4837      	ldr	r0, [pc, #220]	; (8104118 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 810403c:	f7ff ff3a 	bl	8103eb4 <LL_ADC_IsEnabled>
 8104040:	4603      	mov	r3, r0
 8104042:	4323      	orrs	r3, r4
 8104044:	2b00      	cmp	r3, #0
 8104046:	bf0c      	ite	eq
 8104048:	2301      	moveq	r3, #1
 810404a:	2300      	movne	r3, #0
 810404c:	b2db      	uxtb	r3, r3
 810404e:	e008      	b.n	8104062 <HAL_ADCEx_MultiModeConfigChannel+0xfe>
 8104050:	4834      	ldr	r0, [pc, #208]	; (8104124 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8104052:	f7ff ff2f 	bl	8103eb4 <LL_ADC_IsEnabled>
 8104056:	4603      	mov	r3, r0
 8104058:	2b00      	cmp	r3, #0
 810405a:	bf0c      	ite	eq
 810405c:	2301      	moveq	r3, #1
 810405e:	2300      	movne	r3, #0
 8104060:	b2db      	uxtb	r3, r3
 8104062:	2b00      	cmp	r3, #0
 8104064:	d04b      	beq.n	81040fe <HAL_ADCEx_MultiModeConfigChannel+0x19a>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8104066:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8104068:	689b      	ldr	r3, [r3, #8]
 810406a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 810406e:	f023 030f 	bic.w	r3, r3, #15
 8104072:	683a      	ldr	r2, [r7, #0]
 8104074:	6811      	ldr	r1, [r2, #0]
 8104076:	683a      	ldr	r2, [r7, #0]
 8104078:	6892      	ldr	r2, [r2, #8]
 810407a:	430a      	orrs	r2, r1
 810407c:	431a      	orrs	r2, r3
 810407e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8104080:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8104082:	e03c      	b.n	81040fe <HAL_ADCEx_MultiModeConfigChannel+0x19a>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8104084:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8104086:	689b      	ldr	r3, [r3, #8]
 8104088:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 810408c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 810408e:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8104090:	687b      	ldr	r3, [r7, #4]
 8104092:	681b      	ldr	r3, [r3, #0]
 8104094:	4a1f      	ldr	r2, [pc, #124]	; (8104114 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8104096:	4293      	cmp	r3, r2
 8104098:	d004      	beq.n	81040a4 <HAL_ADCEx_MultiModeConfigChannel+0x140>
 810409a:	687b      	ldr	r3, [r7, #4]
 810409c:	681b      	ldr	r3, [r3, #0]
 810409e:	4a1e      	ldr	r2, [pc, #120]	; (8104118 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 81040a0:	4293      	cmp	r3, r2
 81040a2:	d10e      	bne.n	81040c2 <HAL_ADCEx_MultiModeConfigChannel+0x15e>
 81040a4:	481b      	ldr	r0, [pc, #108]	; (8104114 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 81040a6:	f7ff ff05 	bl	8103eb4 <LL_ADC_IsEnabled>
 81040aa:	4604      	mov	r4, r0
 81040ac:	481a      	ldr	r0, [pc, #104]	; (8104118 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 81040ae:	f7ff ff01 	bl	8103eb4 <LL_ADC_IsEnabled>
 81040b2:	4603      	mov	r3, r0
 81040b4:	4323      	orrs	r3, r4
 81040b6:	2b00      	cmp	r3, #0
 81040b8:	bf0c      	ite	eq
 81040ba:	2301      	moveq	r3, #1
 81040bc:	2300      	movne	r3, #0
 81040be:	b2db      	uxtb	r3, r3
 81040c0:	e008      	b.n	81040d4 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 81040c2:	4818      	ldr	r0, [pc, #96]	; (8104124 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 81040c4:	f7ff fef6 	bl	8103eb4 <LL_ADC_IsEnabled>
 81040c8:	4603      	mov	r3, r0
 81040ca:	2b00      	cmp	r3, #0
 81040cc:	bf0c      	ite	eq
 81040ce:	2301      	moveq	r3, #1
 81040d0:	2300      	movne	r3, #0
 81040d2:	b2db      	uxtb	r3, r3
 81040d4:	2b00      	cmp	r3, #0
 81040d6:	d012      	beq.n	81040fe <HAL_ADCEx_MultiModeConfigChannel+0x19a>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 81040d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 81040da:	689b      	ldr	r3, [r3, #8]
 81040dc:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 81040e0:	f023 030f 	bic.w	r3, r3, #15
 81040e4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 81040e6:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 81040e8:	e009      	b.n	81040fe <HAL_ADCEx_MultiModeConfigChannel+0x19a>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 81040ea:	687b      	ldr	r3, [r7, #4]
 81040ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81040ee:	f043 0220 	orr.w	r2, r3, #32
 81040f2:	687b      	ldr	r3, [r7, #4]
 81040f4:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 81040f6:	2301      	movs	r3, #1
 81040f8:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 81040fc:	e000      	b.n	8104100 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 81040fe:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8104100:	687b      	ldr	r3, [r7, #4]
 8104102:	2200      	movs	r2, #0
 8104104:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8104108:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 810410c:	4618      	mov	r0, r3
 810410e:	377c      	adds	r7, #124	; 0x7c
 8104110:	46bd      	mov	sp, r7
 8104112:	bd90      	pop	{r4, r7, pc}
 8104114:	40022000 	.word	0x40022000
 8104118:	40022100 	.word	0x40022100
 810411c:	40022300 	.word	0x40022300
 8104120:	58026300 	.word	0x58026300
 8104124:	58026000 	.word	0x58026000

08104128 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8104128:	b480      	push	{r7}
 810412a:	b085      	sub	sp, #20
 810412c:	af00      	add	r7, sp, #0
 810412e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8104130:	687b      	ldr	r3, [r7, #4]
 8104132:	f003 0307 	and.w	r3, r3, #7
 8104136:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8104138:	4b0c      	ldr	r3, [pc, #48]	; (810416c <__NVIC_SetPriorityGrouping+0x44>)
 810413a:	68db      	ldr	r3, [r3, #12]
 810413c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 810413e:	68ba      	ldr	r2, [r7, #8]
 8104140:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8104144:	4013      	ands	r3, r2
 8104146:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8104148:	68fb      	ldr	r3, [r7, #12]
 810414a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 810414c:	68bb      	ldr	r3, [r7, #8]
 810414e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8104150:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8104154:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8104158:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 810415a:	4a04      	ldr	r2, [pc, #16]	; (810416c <__NVIC_SetPriorityGrouping+0x44>)
 810415c:	68bb      	ldr	r3, [r7, #8]
 810415e:	60d3      	str	r3, [r2, #12]
}
 8104160:	bf00      	nop
 8104162:	3714      	adds	r7, #20
 8104164:	46bd      	mov	sp, r7
 8104166:	f85d 7b04 	ldr.w	r7, [sp], #4
 810416a:	4770      	bx	lr
 810416c:	e000ed00 	.word	0xe000ed00

08104170 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8104170:	b480      	push	{r7}
 8104172:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8104174:	4b04      	ldr	r3, [pc, #16]	; (8104188 <__NVIC_GetPriorityGrouping+0x18>)
 8104176:	68db      	ldr	r3, [r3, #12]
 8104178:	0a1b      	lsrs	r3, r3, #8
 810417a:	f003 0307 	and.w	r3, r3, #7
}
 810417e:	4618      	mov	r0, r3
 8104180:	46bd      	mov	sp, r7
 8104182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104186:	4770      	bx	lr
 8104188:	e000ed00 	.word	0xe000ed00

0810418c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 810418c:	b480      	push	{r7}
 810418e:	b083      	sub	sp, #12
 8104190:	af00      	add	r7, sp, #0
 8104192:	4603      	mov	r3, r0
 8104194:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8104196:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 810419a:	2b00      	cmp	r3, #0
 810419c:	db0b      	blt.n	81041b6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 810419e:	88fb      	ldrh	r3, [r7, #6]
 81041a0:	f003 021f 	and.w	r2, r3, #31
 81041a4:	4907      	ldr	r1, [pc, #28]	; (81041c4 <__NVIC_EnableIRQ+0x38>)
 81041a6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81041aa:	095b      	lsrs	r3, r3, #5
 81041ac:	2001      	movs	r0, #1
 81041ae:	fa00 f202 	lsl.w	r2, r0, r2
 81041b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 81041b6:	bf00      	nop
 81041b8:	370c      	adds	r7, #12
 81041ba:	46bd      	mov	sp, r7
 81041bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 81041c0:	4770      	bx	lr
 81041c2:	bf00      	nop
 81041c4:	e000e100 	.word	0xe000e100

081041c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 81041c8:	b480      	push	{r7}
 81041ca:	b083      	sub	sp, #12
 81041cc:	af00      	add	r7, sp, #0
 81041ce:	4603      	mov	r3, r0
 81041d0:	6039      	str	r1, [r7, #0]
 81041d2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 81041d4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81041d8:	2b00      	cmp	r3, #0
 81041da:	db0a      	blt.n	81041f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 81041dc:	683b      	ldr	r3, [r7, #0]
 81041de:	b2da      	uxtb	r2, r3
 81041e0:	490c      	ldr	r1, [pc, #48]	; (8104214 <__NVIC_SetPriority+0x4c>)
 81041e2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81041e6:	0112      	lsls	r2, r2, #4
 81041e8:	b2d2      	uxtb	r2, r2
 81041ea:	440b      	add	r3, r1
 81041ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 81041f0:	e00a      	b.n	8104208 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 81041f2:	683b      	ldr	r3, [r7, #0]
 81041f4:	b2da      	uxtb	r2, r3
 81041f6:	4908      	ldr	r1, [pc, #32]	; (8104218 <__NVIC_SetPriority+0x50>)
 81041f8:	88fb      	ldrh	r3, [r7, #6]
 81041fa:	f003 030f 	and.w	r3, r3, #15
 81041fe:	3b04      	subs	r3, #4
 8104200:	0112      	lsls	r2, r2, #4
 8104202:	b2d2      	uxtb	r2, r2
 8104204:	440b      	add	r3, r1
 8104206:	761a      	strb	r2, [r3, #24]
}
 8104208:	bf00      	nop
 810420a:	370c      	adds	r7, #12
 810420c:	46bd      	mov	sp, r7
 810420e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104212:	4770      	bx	lr
 8104214:	e000e100 	.word	0xe000e100
 8104218:	e000ed00 	.word	0xe000ed00

0810421c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 810421c:	b480      	push	{r7}
 810421e:	b089      	sub	sp, #36	; 0x24
 8104220:	af00      	add	r7, sp, #0
 8104222:	60f8      	str	r0, [r7, #12]
 8104224:	60b9      	str	r1, [r7, #8]
 8104226:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8104228:	68fb      	ldr	r3, [r7, #12]
 810422a:	f003 0307 	and.w	r3, r3, #7
 810422e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8104230:	69fb      	ldr	r3, [r7, #28]
 8104232:	f1c3 0307 	rsb	r3, r3, #7
 8104236:	2b04      	cmp	r3, #4
 8104238:	bf28      	it	cs
 810423a:	2304      	movcs	r3, #4
 810423c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 810423e:	69fb      	ldr	r3, [r7, #28]
 8104240:	3304      	adds	r3, #4
 8104242:	2b06      	cmp	r3, #6
 8104244:	d902      	bls.n	810424c <NVIC_EncodePriority+0x30>
 8104246:	69fb      	ldr	r3, [r7, #28]
 8104248:	3b03      	subs	r3, #3
 810424a:	e000      	b.n	810424e <NVIC_EncodePriority+0x32>
 810424c:	2300      	movs	r3, #0
 810424e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8104250:	f04f 32ff 	mov.w	r2, #4294967295
 8104254:	69bb      	ldr	r3, [r7, #24]
 8104256:	fa02 f303 	lsl.w	r3, r2, r3
 810425a:	43da      	mvns	r2, r3
 810425c:	68bb      	ldr	r3, [r7, #8]
 810425e:	401a      	ands	r2, r3
 8104260:	697b      	ldr	r3, [r7, #20]
 8104262:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8104264:	f04f 31ff 	mov.w	r1, #4294967295
 8104268:	697b      	ldr	r3, [r7, #20]
 810426a:	fa01 f303 	lsl.w	r3, r1, r3
 810426e:	43d9      	mvns	r1, r3
 8104270:	687b      	ldr	r3, [r7, #4]
 8104272:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8104274:	4313      	orrs	r3, r2
         );
}
 8104276:	4618      	mov	r0, r3
 8104278:	3724      	adds	r7, #36	; 0x24
 810427a:	46bd      	mov	sp, r7
 810427c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104280:	4770      	bx	lr

08104282 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8104282:	b580      	push	{r7, lr}
 8104284:	b082      	sub	sp, #8
 8104286:	af00      	add	r7, sp, #0
 8104288:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 810428a:	6878      	ldr	r0, [r7, #4]
 810428c:	f7ff ff4c 	bl	8104128 <__NVIC_SetPriorityGrouping>
}
 8104290:	bf00      	nop
 8104292:	3708      	adds	r7, #8
 8104294:	46bd      	mov	sp, r7
 8104296:	bd80      	pop	{r7, pc}

08104298 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8104298:	b580      	push	{r7, lr}
 810429a:	b086      	sub	sp, #24
 810429c:	af00      	add	r7, sp, #0
 810429e:	4603      	mov	r3, r0
 81042a0:	60b9      	str	r1, [r7, #8]
 81042a2:	607a      	str	r2, [r7, #4]
 81042a4:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 81042a6:	f7ff ff63 	bl	8104170 <__NVIC_GetPriorityGrouping>
 81042aa:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 81042ac:	687a      	ldr	r2, [r7, #4]
 81042ae:	68b9      	ldr	r1, [r7, #8]
 81042b0:	6978      	ldr	r0, [r7, #20]
 81042b2:	f7ff ffb3 	bl	810421c <NVIC_EncodePriority>
 81042b6:	4602      	mov	r2, r0
 81042b8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 81042bc:	4611      	mov	r1, r2
 81042be:	4618      	mov	r0, r3
 81042c0:	f7ff ff82 	bl	81041c8 <__NVIC_SetPriority>
}
 81042c4:	bf00      	nop
 81042c6:	3718      	adds	r7, #24
 81042c8:	46bd      	mov	sp, r7
 81042ca:	bd80      	pop	{r7, pc}

081042cc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 81042cc:	b580      	push	{r7, lr}
 81042ce:	b082      	sub	sp, #8
 81042d0:	af00      	add	r7, sp, #0
 81042d2:	4603      	mov	r3, r0
 81042d4:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 81042d6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81042da:	4618      	mov	r0, r3
 81042dc:	f7ff ff56 	bl	810418c <__NVIC_EnableIRQ>
}
 81042e0:	bf00      	nop
 81042e2:	3708      	adds	r7, #8
 81042e4:	46bd      	mov	sp, r7
 81042e6:	bd80      	pop	{r7, pc}

081042e8 <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 81042e8:	b480      	push	{r7}
 81042ea:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 81042ec:	4b07      	ldr	r3, [pc, #28]	; (810430c <HAL_GetCurrentCPUID+0x24>)
 81042ee:	681b      	ldr	r3, [r3, #0]
 81042f0:	091b      	lsrs	r3, r3, #4
 81042f2:	f003 030f 	and.w	r3, r3, #15
 81042f6:	2b07      	cmp	r3, #7
 81042f8:	d101      	bne.n	81042fe <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 81042fa:	2303      	movs	r3, #3
 81042fc:	e000      	b.n	8104300 <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 81042fe:	2301      	movs	r3, #1
  }
}
 8104300:	4618      	mov	r0, r3
 8104302:	46bd      	mov	sp, r7
 8104304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104308:	4770      	bx	lr
 810430a:	bf00      	nop
 810430c:	e000ed00 	.word	0xe000ed00

08104310 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8104310:	b580      	push	{r7, lr}
 8104312:	b086      	sub	sp, #24
 8104314:	af00      	add	r7, sp, #0
 8104316:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8104318:	f7fe fb70 	bl	81029fc <HAL_GetTick>
 810431c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 810431e:	687b      	ldr	r3, [r7, #4]
 8104320:	2b00      	cmp	r3, #0
 8104322:	d101      	bne.n	8104328 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8104324:	2301      	movs	r3, #1
 8104326:	e314      	b.n	8104952 <HAL_DMA_Init+0x642>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8104328:	687b      	ldr	r3, [r7, #4]
 810432a:	681b      	ldr	r3, [r3, #0]
 810432c:	4a66      	ldr	r2, [pc, #408]	; (81044c8 <HAL_DMA_Init+0x1b8>)
 810432e:	4293      	cmp	r3, r2
 8104330:	d04a      	beq.n	81043c8 <HAL_DMA_Init+0xb8>
 8104332:	687b      	ldr	r3, [r7, #4]
 8104334:	681b      	ldr	r3, [r3, #0]
 8104336:	4a65      	ldr	r2, [pc, #404]	; (81044cc <HAL_DMA_Init+0x1bc>)
 8104338:	4293      	cmp	r3, r2
 810433a:	d045      	beq.n	81043c8 <HAL_DMA_Init+0xb8>
 810433c:	687b      	ldr	r3, [r7, #4]
 810433e:	681b      	ldr	r3, [r3, #0]
 8104340:	4a63      	ldr	r2, [pc, #396]	; (81044d0 <HAL_DMA_Init+0x1c0>)
 8104342:	4293      	cmp	r3, r2
 8104344:	d040      	beq.n	81043c8 <HAL_DMA_Init+0xb8>
 8104346:	687b      	ldr	r3, [r7, #4]
 8104348:	681b      	ldr	r3, [r3, #0]
 810434a:	4a62      	ldr	r2, [pc, #392]	; (81044d4 <HAL_DMA_Init+0x1c4>)
 810434c:	4293      	cmp	r3, r2
 810434e:	d03b      	beq.n	81043c8 <HAL_DMA_Init+0xb8>
 8104350:	687b      	ldr	r3, [r7, #4]
 8104352:	681b      	ldr	r3, [r3, #0]
 8104354:	4a60      	ldr	r2, [pc, #384]	; (81044d8 <HAL_DMA_Init+0x1c8>)
 8104356:	4293      	cmp	r3, r2
 8104358:	d036      	beq.n	81043c8 <HAL_DMA_Init+0xb8>
 810435a:	687b      	ldr	r3, [r7, #4]
 810435c:	681b      	ldr	r3, [r3, #0]
 810435e:	4a5f      	ldr	r2, [pc, #380]	; (81044dc <HAL_DMA_Init+0x1cc>)
 8104360:	4293      	cmp	r3, r2
 8104362:	d031      	beq.n	81043c8 <HAL_DMA_Init+0xb8>
 8104364:	687b      	ldr	r3, [r7, #4]
 8104366:	681b      	ldr	r3, [r3, #0]
 8104368:	4a5d      	ldr	r2, [pc, #372]	; (81044e0 <HAL_DMA_Init+0x1d0>)
 810436a:	4293      	cmp	r3, r2
 810436c:	d02c      	beq.n	81043c8 <HAL_DMA_Init+0xb8>
 810436e:	687b      	ldr	r3, [r7, #4]
 8104370:	681b      	ldr	r3, [r3, #0]
 8104372:	4a5c      	ldr	r2, [pc, #368]	; (81044e4 <HAL_DMA_Init+0x1d4>)
 8104374:	4293      	cmp	r3, r2
 8104376:	d027      	beq.n	81043c8 <HAL_DMA_Init+0xb8>
 8104378:	687b      	ldr	r3, [r7, #4]
 810437a:	681b      	ldr	r3, [r3, #0]
 810437c:	4a5a      	ldr	r2, [pc, #360]	; (81044e8 <HAL_DMA_Init+0x1d8>)
 810437e:	4293      	cmp	r3, r2
 8104380:	d022      	beq.n	81043c8 <HAL_DMA_Init+0xb8>
 8104382:	687b      	ldr	r3, [r7, #4]
 8104384:	681b      	ldr	r3, [r3, #0]
 8104386:	4a59      	ldr	r2, [pc, #356]	; (81044ec <HAL_DMA_Init+0x1dc>)
 8104388:	4293      	cmp	r3, r2
 810438a:	d01d      	beq.n	81043c8 <HAL_DMA_Init+0xb8>
 810438c:	687b      	ldr	r3, [r7, #4]
 810438e:	681b      	ldr	r3, [r3, #0]
 8104390:	4a57      	ldr	r2, [pc, #348]	; (81044f0 <HAL_DMA_Init+0x1e0>)
 8104392:	4293      	cmp	r3, r2
 8104394:	d018      	beq.n	81043c8 <HAL_DMA_Init+0xb8>
 8104396:	687b      	ldr	r3, [r7, #4]
 8104398:	681b      	ldr	r3, [r3, #0]
 810439a:	4a56      	ldr	r2, [pc, #344]	; (81044f4 <HAL_DMA_Init+0x1e4>)
 810439c:	4293      	cmp	r3, r2
 810439e:	d013      	beq.n	81043c8 <HAL_DMA_Init+0xb8>
 81043a0:	687b      	ldr	r3, [r7, #4]
 81043a2:	681b      	ldr	r3, [r3, #0]
 81043a4:	4a54      	ldr	r2, [pc, #336]	; (81044f8 <HAL_DMA_Init+0x1e8>)
 81043a6:	4293      	cmp	r3, r2
 81043a8:	d00e      	beq.n	81043c8 <HAL_DMA_Init+0xb8>
 81043aa:	687b      	ldr	r3, [r7, #4]
 81043ac:	681b      	ldr	r3, [r3, #0]
 81043ae:	4a53      	ldr	r2, [pc, #332]	; (81044fc <HAL_DMA_Init+0x1ec>)
 81043b0:	4293      	cmp	r3, r2
 81043b2:	d009      	beq.n	81043c8 <HAL_DMA_Init+0xb8>
 81043b4:	687b      	ldr	r3, [r7, #4]
 81043b6:	681b      	ldr	r3, [r3, #0]
 81043b8:	4a51      	ldr	r2, [pc, #324]	; (8104500 <HAL_DMA_Init+0x1f0>)
 81043ba:	4293      	cmp	r3, r2
 81043bc:	d004      	beq.n	81043c8 <HAL_DMA_Init+0xb8>
 81043be:	687b      	ldr	r3, [r7, #4]
 81043c0:	681b      	ldr	r3, [r3, #0]
 81043c2:	4a50      	ldr	r2, [pc, #320]	; (8104504 <HAL_DMA_Init+0x1f4>)
 81043c4:	4293      	cmp	r3, r2
 81043c6:	d101      	bne.n	81043cc <HAL_DMA_Init+0xbc>
 81043c8:	2301      	movs	r3, #1
 81043ca:	e000      	b.n	81043ce <HAL_DMA_Init+0xbe>
 81043cc:	2300      	movs	r3, #0
 81043ce:	2b00      	cmp	r3, #0
 81043d0:	f000 813b 	beq.w	810464a <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 81043d4:	687b      	ldr	r3, [r7, #4]
 81043d6:	2200      	movs	r2, #0
 81043d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 81043dc:	687b      	ldr	r3, [r7, #4]
 81043de:	2202      	movs	r2, #2
 81043e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 81043e4:	687b      	ldr	r3, [r7, #4]
 81043e6:	681b      	ldr	r3, [r3, #0]
 81043e8:	4a37      	ldr	r2, [pc, #220]	; (81044c8 <HAL_DMA_Init+0x1b8>)
 81043ea:	4293      	cmp	r3, r2
 81043ec:	d04a      	beq.n	8104484 <HAL_DMA_Init+0x174>
 81043ee:	687b      	ldr	r3, [r7, #4]
 81043f0:	681b      	ldr	r3, [r3, #0]
 81043f2:	4a36      	ldr	r2, [pc, #216]	; (81044cc <HAL_DMA_Init+0x1bc>)
 81043f4:	4293      	cmp	r3, r2
 81043f6:	d045      	beq.n	8104484 <HAL_DMA_Init+0x174>
 81043f8:	687b      	ldr	r3, [r7, #4]
 81043fa:	681b      	ldr	r3, [r3, #0]
 81043fc:	4a34      	ldr	r2, [pc, #208]	; (81044d0 <HAL_DMA_Init+0x1c0>)
 81043fe:	4293      	cmp	r3, r2
 8104400:	d040      	beq.n	8104484 <HAL_DMA_Init+0x174>
 8104402:	687b      	ldr	r3, [r7, #4]
 8104404:	681b      	ldr	r3, [r3, #0]
 8104406:	4a33      	ldr	r2, [pc, #204]	; (81044d4 <HAL_DMA_Init+0x1c4>)
 8104408:	4293      	cmp	r3, r2
 810440a:	d03b      	beq.n	8104484 <HAL_DMA_Init+0x174>
 810440c:	687b      	ldr	r3, [r7, #4]
 810440e:	681b      	ldr	r3, [r3, #0]
 8104410:	4a31      	ldr	r2, [pc, #196]	; (81044d8 <HAL_DMA_Init+0x1c8>)
 8104412:	4293      	cmp	r3, r2
 8104414:	d036      	beq.n	8104484 <HAL_DMA_Init+0x174>
 8104416:	687b      	ldr	r3, [r7, #4]
 8104418:	681b      	ldr	r3, [r3, #0]
 810441a:	4a30      	ldr	r2, [pc, #192]	; (81044dc <HAL_DMA_Init+0x1cc>)
 810441c:	4293      	cmp	r3, r2
 810441e:	d031      	beq.n	8104484 <HAL_DMA_Init+0x174>
 8104420:	687b      	ldr	r3, [r7, #4]
 8104422:	681b      	ldr	r3, [r3, #0]
 8104424:	4a2e      	ldr	r2, [pc, #184]	; (81044e0 <HAL_DMA_Init+0x1d0>)
 8104426:	4293      	cmp	r3, r2
 8104428:	d02c      	beq.n	8104484 <HAL_DMA_Init+0x174>
 810442a:	687b      	ldr	r3, [r7, #4]
 810442c:	681b      	ldr	r3, [r3, #0]
 810442e:	4a2d      	ldr	r2, [pc, #180]	; (81044e4 <HAL_DMA_Init+0x1d4>)
 8104430:	4293      	cmp	r3, r2
 8104432:	d027      	beq.n	8104484 <HAL_DMA_Init+0x174>
 8104434:	687b      	ldr	r3, [r7, #4]
 8104436:	681b      	ldr	r3, [r3, #0]
 8104438:	4a2b      	ldr	r2, [pc, #172]	; (81044e8 <HAL_DMA_Init+0x1d8>)
 810443a:	4293      	cmp	r3, r2
 810443c:	d022      	beq.n	8104484 <HAL_DMA_Init+0x174>
 810443e:	687b      	ldr	r3, [r7, #4]
 8104440:	681b      	ldr	r3, [r3, #0]
 8104442:	4a2a      	ldr	r2, [pc, #168]	; (81044ec <HAL_DMA_Init+0x1dc>)
 8104444:	4293      	cmp	r3, r2
 8104446:	d01d      	beq.n	8104484 <HAL_DMA_Init+0x174>
 8104448:	687b      	ldr	r3, [r7, #4]
 810444a:	681b      	ldr	r3, [r3, #0]
 810444c:	4a28      	ldr	r2, [pc, #160]	; (81044f0 <HAL_DMA_Init+0x1e0>)
 810444e:	4293      	cmp	r3, r2
 8104450:	d018      	beq.n	8104484 <HAL_DMA_Init+0x174>
 8104452:	687b      	ldr	r3, [r7, #4]
 8104454:	681b      	ldr	r3, [r3, #0]
 8104456:	4a27      	ldr	r2, [pc, #156]	; (81044f4 <HAL_DMA_Init+0x1e4>)
 8104458:	4293      	cmp	r3, r2
 810445a:	d013      	beq.n	8104484 <HAL_DMA_Init+0x174>
 810445c:	687b      	ldr	r3, [r7, #4]
 810445e:	681b      	ldr	r3, [r3, #0]
 8104460:	4a25      	ldr	r2, [pc, #148]	; (81044f8 <HAL_DMA_Init+0x1e8>)
 8104462:	4293      	cmp	r3, r2
 8104464:	d00e      	beq.n	8104484 <HAL_DMA_Init+0x174>
 8104466:	687b      	ldr	r3, [r7, #4]
 8104468:	681b      	ldr	r3, [r3, #0]
 810446a:	4a24      	ldr	r2, [pc, #144]	; (81044fc <HAL_DMA_Init+0x1ec>)
 810446c:	4293      	cmp	r3, r2
 810446e:	d009      	beq.n	8104484 <HAL_DMA_Init+0x174>
 8104470:	687b      	ldr	r3, [r7, #4]
 8104472:	681b      	ldr	r3, [r3, #0]
 8104474:	4a22      	ldr	r2, [pc, #136]	; (8104500 <HAL_DMA_Init+0x1f0>)
 8104476:	4293      	cmp	r3, r2
 8104478:	d004      	beq.n	8104484 <HAL_DMA_Init+0x174>
 810447a:	687b      	ldr	r3, [r7, #4]
 810447c:	681b      	ldr	r3, [r3, #0]
 810447e:	4a21      	ldr	r2, [pc, #132]	; (8104504 <HAL_DMA_Init+0x1f4>)
 8104480:	4293      	cmp	r3, r2
 8104482:	d108      	bne.n	8104496 <HAL_DMA_Init+0x186>
 8104484:	687b      	ldr	r3, [r7, #4]
 8104486:	681b      	ldr	r3, [r3, #0]
 8104488:	681a      	ldr	r2, [r3, #0]
 810448a:	687b      	ldr	r3, [r7, #4]
 810448c:	681b      	ldr	r3, [r3, #0]
 810448e:	f022 0201 	bic.w	r2, r2, #1
 8104492:	601a      	str	r2, [r3, #0]
 8104494:	e007      	b.n	81044a6 <HAL_DMA_Init+0x196>
 8104496:	687b      	ldr	r3, [r7, #4]
 8104498:	681b      	ldr	r3, [r3, #0]
 810449a:	681a      	ldr	r2, [r3, #0]
 810449c:	687b      	ldr	r3, [r7, #4]
 810449e:	681b      	ldr	r3, [r3, #0]
 81044a0:	f022 0201 	bic.w	r2, r2, #1
 81044a4:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 81044a6:	e02f      	b.n	8104508 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 81044a8:	f7fe faa8 	bl	81029fc <HAL_GetTick>
 81044ac:	4602      	mov	r2, r0
 81044ae:	693b      	ldr	r3, [r7, #16]
 81044b0:	1ad3      	subs	r3, r2, r3
 81044b2:	2b05      	cmp	r3, #5
 81044b4:	d928      	bls.n	8104508 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 81044b6:	687b      	ldr	r3, [r7, #4]
 81044b8:	2220      	movs	r2, #32
 81044ba:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 81044bc:	687b      	ldr	r3, [r7, #4]
 81044be:	2203      	movs	r2, #3
 81044c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 81044c4:	2301      	movs	r3, #1
 81044c6:	e244      	b.n	8104952 <HAL_DMA_Init+0x642>
 81044c8:	40020010 	.word	0x40020010
 81044cc:	40020028 	.word	0x40020028
 81044d0:	40020040 	.word	0x40020040
 81044d4:	40020058 	.word	0x40020058
 81044d8:	40020070 	.word	0x40020070
 81044dc:	40020088 	.word	0x40020088
 81044e0:	400200a0 	.word	0x400200a0
 81044e4:	400200b8 	.word	0x400200b8
 81044e8:	40020410 	.word	0x40020410
 81044ec:	40020428 	.word	0x40020428
 81044f0:	40020440 	.word	0x40020440
 81044f4:	40020458 	.word	0x40020458
 81044f8:	40020470 	.word	0x40020470
 81044fc:	40020488 	.word	0x40020488
 8104500:	400204a0 	.word	0x400204a0
 8104504:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8104508:	687b      	ldr	r3, [r7, #4]
 810450a:	681b      	ldr	r3, [r3, #0]
 810450c:	681b      	ldr	r3, [r3, #0]
 810450e:	f003 0301 	and.w	r3, r3, #1
 8104512:	2b00      	cmp	r3, #0
 8104514:	d1c8      	bne.n	81044a8 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8104516:	687b      	ldr	r3, [r7, #4]
 8104518:	681b      	ldr	r3, [r3, #0]
 810451a:	681b      	ldr	r3, [r3, #0]
 810451c:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 810451e:	697a      	ldr	r2, [r7, #20]
 8104520:	4b84      	ldr	r3, [pc, #528]	; (8104734 <HAL_DMA_Init+0x424>)
 8104522:	4013      	ands	r3, r2
 8104524:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8104526:	687b      	ldr	r3, [r7, #4]
 8104528:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 810452a:	687b      	ldr	r3, [r7, #4]
 810452c:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 810452e:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8104530:	687b      	ldr	r3, [r7, #4]
 8104532:	691b      	ldr	r3, [r3, #16]
 8104534:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8104536:	687b      	ldr	r3, [r7, #4]
 8104538:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 810453a:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 810453c:	687b      	ldr	r3, [r7, #4]
 810453e:	699b      	ldr	r3, [r3, #24]
 8104540:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8104542:	687b      	ldr	r3, [r7, #4]
 8104544:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8104546:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8104548:	687b      	ldr	r3, [r7, #4]
 810454a:	6a1b      	ldr	r3, [r3, #32]
 810454c:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 810454e:	697a      	ldr	r2, [r7, #20]
 8104550:	4313      	orrs	r3, r2
 8104552:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8104554:	687b      	ldr	r3, [r7, #4]
 8104556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8104558:	2b04      	cmp	r3, #4
 810455a:	d107      	bne.n	810456c <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 810455c:	687b      	ldr	r3, [r7, #4]
 810455e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8104560:	687b      	ldr	r3, [r7, #4]
 8104562:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8104564:	4313      	orrs	r3, r2
 8104566:	697a      	ldr	r2, [r7, #20]
 8104568:	4313      	orrs	r3, r2
 810456a:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 810456c:	4b72      	ldr	r3, [pc, #456]	; (8104738 <HAL_DMA_Init+0x428>)
 810456e:	681b      	ldr	r3, [r3, #0]
 8104570:	0c1b      	lsrs	r3, r3, #16
 8104572:	041b      	lsls	r3, r3, #16
 8104574:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8104578:	d328      	bcc.n	81045cc <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 810457a:	687b      	ldr	r3, [r7, #4]
 810457c:	685b      	ldr	r3, [r3, #4]
 810457e:	2b28      	cmp	r3, #40	; 0x28
 8104580:	d903      	bls.n	810458a <HAL_DMA_Init+0x27a>
 8104582:	687b      	ldr	r3, [r7, #4]
 8104584:	685b      	ldr	r3, [r3, #4]
 8104586:	2b2e      	cmp	r3, #46	; 0x2e
 8104588:	d917      	bls.n	81045ba <HAL_DMA_Init+0x2aa>
 810458a:	687b      	ldr	r3, [r7, #4]
 810458c:	685b      	ldr	r3, [r3, #4]
 810458e:	2b3e      	cmp	r3, #62	; 0x3e
 8104590:	d903      	bls.n	810459a <HAL_DMA_Init+0x28a>
 8104592:	687b      	ldr	r3, [r7, #4]
 8104594:	685b      	ldr	r3, [r3, #4]
 8104596:	2b42      	cmp	r3, #66	; 0x42
 8104598:	d90f      	bls.n	81045ba <HAL_DMA_Init+0x2aa>
 810459a:	687b      	ldr	r3, [r7, #4]
 810459c:	685b      	ldr	r3, [r3, #4]
 810459e:	2b46      	cmp	r3, #70	; 0x46
 81045a0:	d903      	bls.n	81045aa <HAL_DMA_Init+0x29a>
 81045a2:	687b      	ldr	r3, [r7, #4]
 81045a4:	685b      	ldr	r3, [r3, #4]
 81045a6:	2b48      	cmp	r3, #72	; 0x48
 81045a8:	d907      	bls.n	81045ba <HAL_DMA_Init+0x2aa>
 81045aa:	687b      	ldr	r3, [r7, #4]
 81045ac:	685b      	ldr	r3, [r3, #4]
 81045ae:	2b4e      	cmp	r3, #78	; 0x4e
 81045b0:	d905      	bls.n	81045be <HAL_DMA_Init+0x2ae>
 81045b2:	687b      	ldr	r3, [r7, #4]
 81045b4:	685b      	ldr	r3, [r3, #4]
 81045b6:	2b52      	cmp	r3, #82	; 0x52
 81045b8:	d801      	bhi.n	81045be <HAL_DMA_Init+0x2ae>
 81045ba:	2301      	movs	r3, #1
 81045bc:	e000      	b.n	81045c0 <HAL_DMA_Init+0x2b0>
 81045be:	2300      	movs	r3, #0
 81045c0:	2b00      	cmp	r3, #0
 81045c2:	d003      	beq.n	81045cc <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 81045c4:	697b      	ldr	r3, [r7, #20]
 81045c6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 81045ca:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 81045cc:	687b      	ldr	r3, [r7, #4]
 81045ce:	681b      	ldr	r3, [r3, #0]
 81045d0:	697a      	ldr	r2, [r7, #20]
 81045d2:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 81045d4:	687b      	ldr	r3, [r7, #4]
 81045d6:	681b      	ldr	r3, [r3, #0]
 81045d8:	695b      	ldr	r3, [r3, #20]
 81045da:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 81045dc:	697b      	ldr	r3, [r7, #20]
 81045de:	f023 0307 	bic.w	r3, r3, #7
 81045e2:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 81045e4:	687b      	ldr	r3, [r7, #4]
 81045e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81045e8:	697a      	ldr	r2, [r7, #20]
 81045ea:	4313      	orrs	r3, r2
 81045ec:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 81045ee:	687b      	ldr	r3, [r7, #4]
 81045f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81045f2:	2b04      	cmp	r3, #4
 81045f4:	d117      	bne.n	8104626 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 81045f6:	687b      	ldr	r3, [r7, #4]
 81045f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81045fa:	697a      	ldr	r2, [r7, #20]
 81045fc:	4313      	orrs	r3, r2
 81045fe:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8104600:	687b      	ldr	r3, [r7, #4]
 8104602:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104604:	2b00      	cmp	r3, #0
 8104606:	d00e      	beq.n	8104626 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8104608:	6878      	ldr	r0, [r7, #4]
 810460a:	f002 fb3d 	bl	8106c88 <DMA_CheckFifoParam>
 810460e:	4603      	mov	r3, r0
 8104610:	2b00      	cmp	r3, #0
 8104612:	d008      	beq.n	8104626 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8104614:	687b      	ldr	r3, [r7, #4]
 8104616:	2240      	movs	r2, #64	; 0x40
 8104618:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 810461a:	687b      	ldr	r3, [r7, #4]
 810461c:	2201      	movs	r2, #1
 810461e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8104622:	2301      	movs	r3, #1
 8104624:	e195      	b.n	8104952 <HAL_DMA_Init+0x642>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8104626:	687b      	ldr	r3, [r7, #4]
 8104628:	681b      	ldr	r3, [r3, #0]
 810462a:	697a      	ldr	r2, [r7, #20]
 810462c:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 810462e:	6878      	ldr	r0, [r7, #4]
 8104630:	f002 fa78 	bl	8106b24 <DMA_CalcBaseAndBitshift>
 8104634:	4603      	mov	r3, r0
 8104636:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8104638:	687b      	ldr	r3, [r7, #4]
 810463a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 810463c:	f003 031f 	and.w	r3, r3, #31
 8104640:	223f      	movs	r2, #63	; 0x3f
 8104642:	409a      	lsls	r2, r3
 8104644:	68bb      	ldr	r3, [r7, #8]
 8104646:	609a      	str	r2, [r3, #8]
 8104648:	e0cb      	b.n	81047e2 <HAL_DMA_Init+0x4d2>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 810464a:	687b      	ldr	r3, [r7, #4]
 810464c:	681b      	ldr	r3, [r3, #0]
 810464e:	4a3b      	ldr	r2, [pc, #236]	; (810473c <HAL_DMA_Init+0x42c>)
 8104650:	4293      	cmp	r3, r2
 8104652:	d022      	beq.n	810469a <HAL_DMA_Init+0x38a>
 8104654:	687b      	ldr	r3, [r7, #4]
 8104656:	681b      	ldr	r3, [r3, #0]
 8104658:	4a39      	ldr	r2, [pc, #228]	; (8104740 <HAL_DMA_Init+0x430>)
 810465a:	4293      	cmp	r3, r2
 810465c:	d01d      	beq.n	810469a <HAL_DMA_Init+0x38a>
 810465e:	687b      	ldr	r3, [r7, #4]
 8104660:	681b      	ldr	r3, [r3, #0]
 8104662:	4a38      	ldr	r2, [pc, #224]	; (8104744 <HAL_DMA_Init+0x434>)
 8104664:	4293      	cmp	r3, r2
 8104666:	d018      	beq.n	810469a <HAL_DMA_Init+0x38a>
 8104668:	687b      	ldr	r3, [r7, #4]
 810466a:	681b      	ldr	r3, [r3, #0]
 810466c:	4a36      	ldr	r2, [pc, #216]	; (8104748 <HAL_DMA_Init+0x438>)
 810466e:	4293      	cmp	r3, r2
 8104670:	d013      	beq.n	810469a <HAL_DMA_Init+0x38a>
 8104672:	687b      	ldr	r3, [r7, #4]
 8104674:	681b      	ldr	r3, [r3, #0]
 8104676:	4a35      	ldr	r2, [pc, #212]	; (810474c <HAL_DMA_Init+0x43c>)
 8104678:	4293      	cmp	r3, r2
 810467a:	d00e      	beq.n	810469a <HAL_DMA_Init+0x38a>
 810467c:	687b      	ldr	r3, [r7, #4]
 810467e:	681b      	ldr	r3, [r3, #0]
 8104680:	4a33      	ldr	r2, [pc, #204]	; (8104750 <HAL_DMA_Init+0x440>)
 8104682:	4293      	cmp	r3, r2
 8104684:	d009      	beq.n	810469a <HAL_DMA_Init+0x38a>
 8104686:	687b      	ldr	r3, [r7, #4]
 8104688:	681b      	ldr	r3, [r3, #0]
 810468a:	4a32      	ldr	r2, [pc, #200]	; (8104754 <HAL_DMA_Init+0x444>)
 810468c:	4293      	cmp	r3, r2
 810468e:	d004      	beq.n	810469a <HAL_DMA_Init+0x38a>
 8104690:	687b      	ldr	r3, [r7, #4]
 8104692:	681b      	ldr	r3, [r3, #0]
 8104694:	4a30      	ldr	r2, [pc, #192]	; (8104758 <HAL_DMA_Init+0x448>)
 8104696:	4293      	cmp	r3, r2
 8104698:	d101      	bne.n	810469e <HAL_DMA_Init+0x38e>
 810469a:	2301      	movs	r3, #1
 810469c:	e000      	b.n	81046a0 <HAL_DMA_Init+0x390>
 810469e:	2300      	movs	r3, #0
 81046a0:	2b00      	cmp	r3, #0
 81046a2:	f000 8095 	beq.w	81047d0 <HAL_DMA_Init+0x4c0>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 81046a6:	687b      	ldr	r3, [r7, #4]
 81046a8:	681b      	ldr	r3, [r3, #0]
 81046aa:	4a24      	ldr	r2, [pc, #144]	; (810473c <HAL_DMA_Init+0x42c>)
 81046ac:	4293      	cmp	r3, r2
 81046ae:	d021      	beq.n	81046f4 <HAL_DMA_Init+0x3e4>
 81046b0:	687b      	ldr	r3, [r7, #4]
 81046b2:	681b      	ldr	r3, [r3, #0]
 81046b4:	4a22      	ldr	r2, [pc, #136]	; (8104740 <HAL_DMA_Init+0x430>)
 81046b6:	4293      	cmp	r3, r2
 81046b8:	d01c      	beq.n	81046f4 <HAL_DMA_Init+0x3e4>
 81046ba:	687b      	ldr	r3, [r7, #4]
 81046bc:	681b      	ldr	r3, [r3, #0]
 81046be:	4a21      	ldr	r2, [pc, #132]	; (8104744 <HAL_DMA_Init+0x434>)
 81046c0:	4293      	cmp	r3, r2
 81046c2:	d017      	beq.n	81046f4 <HAL_DMA_Init+0x3e4>
 81046c4:	687b      	ldr	r3, [r7, #4]
 81046c6:	681b      	ldr	r3, [r3, #0]
 81046c8:	4a1f      	ldr	r2, [pc, #124]	; (8104748 <HAL_DMA_Init+0x438>)
 81046ca:	4293      	cmp	r3, r2
 81046cc:	d012      	beq.n	81046f4 <HAL_DMA_Init+0x3e4>
 81046ce:	687b      	ldr	r3, [r7, #4]
 81046d0:	681b      	ldr	r3, [r3, #0]
 81046d2:	4a1e      	ldr	r2, [pc, #120]	; (810474c <HAL_DMA_Init+0x43c>)
 81046d4:	4293      	cmp	r3, r2
 81046d6:	d00d      	beq.n	81046f4 <HAL_DMA_Init+0x3e4>
 81046d8:	687b      	ldr	r3, [r7, #4]
 81046da:	681b      	ldr	r3, [r3, #0]
 81046dc:	4a1c      	ldr	r2, [pc, #112]	; (8104750 <HAL_DMA_Init+0x440>)
 81046de:	4293      	cmp	r3, r2
 81046e0:	d008      	beq.n	81046f4 <HAL_DMA_Init+0x3e4>
 81046e2:	687b      	ldr	r3, [r7, #4]
 81046e4:	681b      	ldr	r3, [r3, #0]
 81046e6:	4a1b      	ldr	r2, [pc, #108]	; (8104754 <HAL_DMA_Init+0x444>)
 81046e8:	4293      	cmp	r3, r2
 81046ea:	d003      	beq.n	81046f4 <HAL_DMA_Init+0x3e4>
 81046ec:	687b      	ldr	r3, [r7, #4]
 81046ee:	681b      	ldr	r3, [r3, #0]
 81046f0:	4a19      	ldr	r2, [pc, #100]	; (8104758 <HAL_DMA_Init+0x448>)
 81046f2:	4293      	cmp	r3, r2
 81046f4:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 81046f6:	687b      	ldr	r3, [r7, #4]
 81046f8:	2200      	movs	r2, #0
 81046fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 81046fe:	687b      	ldr	r3, [r7, #4]
 8104700:	2202      	movs	r2, #2
 8104702:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8104706:	687b      	ldr	r3, [r7, #4]
 8104708:	681b      	ldr	r3, [r3, #0]
 810470a:	681b      	ldr	r3, [r3, #0]
 810470c:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 810470e:	697b      	ldr	r3, [r7, #20]
 8104710:	f423 33ff 	bic.w	r3, r3, #130560	; 0x1fe00
 8104714:	f423 73f8 	bic.w	r3, r3, #496	; 0x1f0
 8104718:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 810471a:	687b      	ldr	r3, [r7, #4]
 810471c:	689b      	ldr	r3, [r3, #8]
 810471e:	2b40      	cmp	r3, #64	; 0x40
 8104720:	d01c      	beq.n	810475c <HAL_DMA_Init+0x44c>
 8104722:	687b      	ldr	r3, [r7, #4]
 8104724:	689b      	ldr	r3, [r3, #8]
 8104726:	2b80      	cmp	r3, #128	; 0x80
 8104728:	d102      	bne.n	8104730 <HAL_DMA_Init+0x420>
 810472a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 810472e:	e016      	b.n	810475e <HAL_DMA_Init+0x44e>
 8104730:	2300      	movs	r3, #0
 8104732:	e014      	b.n	810475e <HAL_DMA_Init+0x44e>
 8104734:	fe10803f 	.word	0xfe10803f
 8104738:	5c001000 	.word	0x5c001000
 810473c:	58025408 	.word	0x58025408
 8104740:	5802541c 	.word	0x5802541c
 8104744:	58025430 	.word	0x58025430
 8104748:	58025444 	.word	0x58025444
 810474c:	58025458 	.word	0x58025458
 8104750:	5802546c 	.word	0x5802546c
 8104754:	58025480 	.word	0x58025480
 8104758:	58025494 	.word	0x58025494
 810475c:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 810475e:	687a      	ldr	r2, [r7, #4]
 8104760:	68d2      	ldr	r2, [r2, #12]
 8104762:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8104764:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8104766:	687b      	ldr	r3, [r7, #4]
 8104768:	691b      	ldr	r3, [r3, #16]
 810476a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 810476c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 810476e:	687b      	ldr	r3, [r7, #4]
 8104770:	695b      	ldr	r3, [r3, #20]
 8104772:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8104774:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8104776:	687b      	ldr	r3, [r7, #4]
 8104778:	699b      	ldr	r3, [r3, #24]
 810477a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 810477c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 810477e:	687b      	ldr	r3, [r7, #4]
 8104780:	69db      	ldr	r3, [r3, #28]
 8104782:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8104784:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8104786:	687b      	ldr	r3, [r7, #4]
 8104788:	6a1b      	ldr	r3, [r3, #32]
 810478a:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 810478c:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 810478e:	697a      	ldr	r2, [r7, #20]
 8104790:	4313      	orrs	r3, r2
 8104792:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8104794:	687b      	ldr	r3, [r7, #4]
 8104796:	681b      	ldr	r3, [r3, #0]
 8104798:	697a      	ldr	r2, [r7, #20]
 810479a:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 810479c:	687b      	ldr	r3, [r7, #4]
 810479e:	681b      	ldr	r3, [r3, #0]
 81047a0:	461a      	mov	r2, r3
 81047a2:	4b6e      	ldr	r3, [pc, #440]	; (810495c <HAL_DMA_Init+0x64c>)
 81047a4:	4413      	add	r3, r2
 81047a6:	4a6e      	ldr	r2, [pc, #440]	; (8104960 <HAL_DMA_Init+0x650>)
 81047a8:	fba2 2303 	umull	r2, r3, r2, r3
 81047ac:	091b      	lsrs	r3, r3, #4
 81047ae:	009a      	lsls	r2, r3, #2
 81047b0:	687b      	ldr	r3, [r7, #4]
 81047b2:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 81047b4:	6878      	ldr	r0, [r7, #4]
 81047b6:	f002 f9b5 	bl	8106b24 <DMA_CalcBaseAndBitshift>
 81047ba:	4603      	mov	r3, r0
 81047bc:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 81047be:	687b      	ldr	r3, [r7, #4]
 81047c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81047c2:	f003 031f 	and.w	r3, r3, #31
 81047c6:	2201      	movs	r2, #1
 81047c8:	409a      	lsls	r2, r3
 81047ca:	68fb      	ldr	r3, [r7, #12]
 81047cc:	605a      	str	r2, [r3, #4]
 81047ce:	e008      	b.n	81047e2 <HAL_DMA_Init+0x4d2>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 81047d0:	687b      	ldr	r3, [r7, #4]
 81047d2:	2240      	movs	r2, #64	; 0x40
 81047d4:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 81047d6:	687b      	ldr	r3, [r7, #4]
 81047d8:	2203      	movs	r2, #3
 81047da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 81047de:	2301      	movs	r3, #1
 81047e0:	e0b7      	b.n	8104952 <HAL_DMA_Init+0x642>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 81047e2:	687b      	ldr	r3, [r7, #4]
 81047e4:	681b      	ldr	r3, [r3, #0]
 81047e6:	4a5f      	ldr	r2, [pc, #380]	; (8104964 <HAL_DMA_Init+0x654>)
 81047e8:	4293      	cmp	r3, r2
 81047ea:	d072      	beq.n	81048d2 <HAL_DMA_Init+0x5c2>
 81047ec:	687b      	ldr	r3, [r7, #4]
 81047ee:	681b      	ldr	r3, [r3, #0]
 81047f0:	4a5d      	ldr	r2, [pc, #372]	; (8104968 <HAL_DMA_Init+0x658>)
 81047f2:	4293      	cmp	r3, r2
 81047f4:	d06d      	beq.n	81048d2 <HAL_DMA_Init+0x5c2>
 81047f6:	687b      	ldr	r3, [r7, #4]
 81047f8:	681b      	ldr	r3, [r3, #0]
 81047fa:	4a5c      	ldr	r2, [pc, #368]	; (810496c <HAL_DMA_Init+0x65c>)
 81047fc:	4293      	cmp	r3, r2
 81047fe:	d068      	beq.n	81048d2 <HAL_DMA_Init+0x5c2>
 8104800:	687b      	ldr	r3, [r7, #4]
 8104802:	681b      	ldr	r3, [r3, #0]
 8104804:	4a5a      	ldr	r2, [pc, #360]	; (8104970 <HAL_DMA_Init+0x660>)
 8104806:	4293      	cmp	r3, r2
 8104808:	d063      	beq.n	81048d2 <HAL_DMA_Init+0x5c2>
 810480a:	687b      	ldr	r3, [r7, #4]
 810480c:	681b      	ldr	r3, [r3, #0]
 810480e:	4a59      	ldr	r2, [pc, #356]	; (8104974 <HAL_DMA_Init+0x664>)
 8104810:	4293      	cmp	r3, r2
 8104812:	d05e      	beq.n	81048d2 <HAL_DMA_Init+0x5c2>
 8104814:	687b      	ldr	r3, [r7, #4]
 8104816:	681b      	ldr	r3, [r3, #0]
 8104818:	4a57      	ldr	r2, [pc, #348]	; (8104978 <HAL_DMA_Init+0x668>)
 810481a:	4293      	cmp	r3, r2
 810481c:	d059      	beq.n	81048d2 <HAL_DMA_Init+0x5c2>
 810481e:	687b      	ldr	r3, [r7, #4]
 8104820:	681b      	ldr	r3, [r3, #0]
 8104822:	4a56      	ldr	r2, [pc, #344]	; (810497c <HAL_DMA_Init+0x66c>)
 8104824:	4293      	cmp	r3, r2
 8104826:	d054      	beq.n	81048d2 <HAL_DMA_Init+0x5c2>
 8104828:	687b      	ldr	r3, [r7, #4]
 810482a:	681b      	ldr	r3, [r3, #0]
 810482c:	4a54      	ldr	r2, [pc, #336]	; (8104980 <HAL_DMA_Init+0x670>)
 810482e:	4293      	cmp	r3, r2
 8104830:	d04f      	beq.n	81048d2 <HAL_DMA_Init+0x5c2>
 8104832:	687b      	ldr	r3, [r7, #4]
 8104834:	681b      	ldr	r3, [r3, #0]
 8104836:	4a53      	ldr	r2, [pc, #332]	; (8104984 <HAL_DMA_Init+0x674>)
 8104838:	4293      	cmp	r3, r2
 810483a:	d04a      	beq.n	81048d2 <HAL_DMA_Init+0x5c2>
 810483c:	687b      	ldr	r3, [r7, #4]
 810483e:	681b      	ldr	r3, [r3, #0]
 8104840:	4a51      	ldr	r2, [pc, #324]	; (8104988 <HAL_DMA_Init+0x678>)
 8104842:	4293      	cmp	r3, r2
 8104844:	d045      	beq.n	81048d2 <HAL_DMA_Init+0x5c2>
 8104846:	687b      	ldr	r3, [r7, #4]
 8104848:	681b      	ldr	r3, [r3, #0]
 810484a:	4a50      	ldr	r2, [pc, #320]	; (810498c <HAL_DMA_Init+0x67c>)
 810484c:	4293      	cmp	r3, r2
 810484e:	d040      	beq.n	81048d2 <HAL_DMA_Init+0x5c2>
 8104850:	687b      	ldr	r3, [r7, #4]
 8104852:	681b      	ldr	r3, [r3, #0]
 8104854:	4a4e      	ldr	r2, [pc, #312]	; (8104990 <HAL_DMA_Init+0x680>)
 8104856:	4293      	cmp	r3, r2
 8104858:	d03b      	beq.n	81048d2 <HAL_DMA_Init+0x5c2>
 810485a:	687b      	ldr	r3, [r7, #4]
 810485c:	681b      	ldr	r3, [r3, #0]
 810485e:	4a4d      	ldr	r2, [pc, #308]	; (8104994 <HAL_DMA_Init+0x684>)
 8104860:	4293      	cmp	r3, r2
 8104862:	d036      	beq.n	81048d2 <HAL_DMA_Init+0x5c2>
 8104864:	687b      	ldr	r3, [r7, #4]
 8104866:	681b      	ldr	r3, [r3, #0]
 8104868:	4a4b      	ldr	r2, [pc, #300]	; (8104998 <HAL_DMA_Init+0x688>)
 810486a:	4293      	cmp	r3, r2
 810486c:	d031      	beq.n	81048d2 <HAL_DMA_Init+0x5c2>
 810486e:	687b      	ldr	r3, [r7, #4]
 8104870:	681b      	ldr	r3, [r3, #0]
 8104872:	4a4a      	ldr	r2, [pc, #296]	; (810499c <HAL_DMA_Init+0x68c>)
 8104874:	4293      	cmp	r3, r2
 8104876:	d02c      	beq.n	81048d2 <HAL_DMA_Init+0x5c2>
 8104878:	687b      	ldr	r3, [r7, #4]
 810487a:	681b      	ldr	r3, [r3, #0]
 810487c:	4a48      	ldr	r2, [pc, #288]	; (81049a0 <HAL_DMA_Init+0x690>)
 810487e:	4293      	cmp	r3, r2
 8104880:	d027      	beq.n	81048d2 <HAL_DMA_Init+0x5c2>
 8104882:	687b      	ldr	r3, [r7, #4]
 8104884:	681b      	ldr	r3, [r3, #0]
 8104886:	4a47      	ldr	r2, [pc, #284]	; (81049a4 <HAL_DMA_Init+0x694>)
 8104888:	4293      	cmp	r3, r2
 810488a:	d022      	beq.n	81048d2 <HAL_DMA_Init+0x5c2>
 810488c:	687b      	ldr	r3, [r7, #4]
 810488e:	681b      	ldr	r3, [r3, #0]
 8104890:	4a45      	ldr	r2, [pc, #276]	; (81049a8 <HAL_DMA_Init+0x698>)
 8104892:	4293      	cmp	r3, r2
 8104894:	d01d      	beq.n	81048d2 <HAL_DMA_Init+0x5c2>
 8104896:	687b      	ldr	r3, [r7, #4]
 8104898:	681b      	ldr	r3, [r3, #0]
 810489a:	4a44      	ldr	r2, [pc, #272]	; (81049ac <HAL_DMA_Init+0x69c>)
 810489c:	4293      	cmp	r3, r2
 810489e:	d018      	beq.n	81048d2 <HAL_DMA_Init+0x5c2>
 81048a0:	687b      	ldr	r3, [r7, #4]
 81048a2:	681b      	ldr	r3, [r3, #0]
 81048a4:	4a42      	ldr	r2, [pc, #264]	; (81049b0 <HAL_DMA_Init+0x6a0>)
 81048a6:	4293      	cmp	r3, r2
 81048a8:	d013      	beq.n	81048d2 <HAL_DMA_Init+0x5c2>
 81048aa:	687b      	ldr	r3, [r7, #4]
 81048ac:	681b      	ldr	r3, [r3, #0]
 81048ae:	4a41      	ldr	r2, [pc, #260]	; (81049b4 <HAL_DMA_Init+0x6a4>)
 81048b0:	4293      	cmp	r3, r2
 81048b2:	d00e      	beq.n	81048d2 <HAL_DMA_Init+0x5c2>
 81048b4:	687b      	ldr	r3, [r7, #4]
 81048b6:	681b      	ldr	r3, [r3, #0]
 81048b8:	4a3f      	ldr	r2, [pc, #252]	; (81049b8 <HAL_DMA_Init+0x6a8>)
 81048ba:	4293      	cmp	r3, r2
 81048bc:	d009      	beq.n	81048d2 <HAL_DMA_Init+0x5c2>
 81048be:	687b      	ldr	r3, [r7, #4]
 81048c0:	681b      	ldr	r3, [r3, #0]
 81048c2:	4a3e      	ldr	r2, [pc, #248]	; (81049bc <HAL_DMA_Init+0x6ac>)
 81048c4:	4293      	cmp	r3, r2
 81048c6:	d004      	beq.n	81048d2 <HAL_DMA_Init+0x5c2>
 81048c8:	687b      	ldr	r3, [r7, #4]
 81048ca:	681b      	ldr	r3, [r3, #0]
 81048cc:	4a3c      	ldr	r2, [pc, #240]	; (81049c0 <HAL_DMA_Init+0x6b0>)
 81048ce:	4293      	cmp	r3, r2
 81048d0:	d101      	bne.n	81048d6 <HAL_DMA_Init+0x5c6>
 81048d2:	2301      	movs	r3, #1
 81048d4:	e000      	b.n	81048d8 <HAL_DMA_Init+0x5c8>
 81048d6:	2300      	movs	r3, #0
 81048d8:	2b00      	cmp	r3, #0
 81048da:	d032      	beq.n	8104942 <HAL_DMA_Init+0x632>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 81048dc:	6878      	ldr	r0, [r7, #4]
 81048de:	f002 fa4f 	bl	8106d80 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 81048e2:	687b      	ldr	r3, [r7, #4]
 81048e4:	689b      	ldr	r3, [r3, #8]
 81048e6:	2b80      	cmp	r3, #128	; 0x80
 81048e8:	d102      	bne.n	81048f0 <HAL_DMA_Init+0x5e0>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 81048ea:	687b      	ldr	r3, [r7, #4]
 81048ec:	2200      	movs	r2, #0
 81048ee:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 81048f0:	687b      	ldr	r3, [r7, #4]
 81048f2:	685a      	ldr	r2, [r3, #4]
 81048f4:	687b      	ldr	r3, [r7, #4]
 81048f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 81048f8:	b2d2      	uxtb	r2, r2
 81048fa:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 81048fc:	687b      	ldr	r3, [r7, #4]
 81048fe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8104900:	687a      	ldr	r2, [r7, #4]
 8104902:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8104904:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8104906:	687b      	ldr	r3, [r7, #4]
 8104908:	685b      	ldr	r3, [r3, #4]
 810490a:	2b00      	cmp	r3, #0
 810490c:	d010      	beq.n	8104930 <HAL_DMA_Init+0x620>
 810490e:	687b      	ldr	r3, [r7, #4]
 8104910:	685b      	ldr	r3, [r3, #4]
 8104912:	2b08      	cmp	r3, #8
 8104914:	d80c      	bhi.n	8104930 <HAL_DMA_Init+0x620>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8104916:	6878      	ldr	r0, [r7, #4]
 8104918:	f002 facc 	bl	8106eb4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 810491c:	687b      	ldr	r3, [r7, #4]
 810491e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8104920:	2200      	movs	r2, #0
 8104922:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8104924:	687b      	ldr	r3, [r7, #4]
 8104926:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8104928:	687a      	ldr	r2, [r7, #4]
 810492a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 810492c:	605a      	str	r2, [r3, #4]
 810492e:	e008      	b.n	8104942 <HAL_DMA_Init+0x632>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8104930:	687b      	ldr	r3, [r7, #4]
 8104932:	2200      	movs	r2, #0
 8104934:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8104936:	687b      	ldr	r3, [r7, #4]
 8104938:	2200      	movs	r2, #0
 810493a:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 810493c:	687b      	ldr	r3, [r7, #4]
 810493e:	2200      	movs	r2, #0
 8104940:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8104942:	687b      	ldr	r3, [r7, #4]
 8104944:	2200      	movs	r2, #0
 8104946:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8104948:	687b      	ldr	r3, [r7, #4]
 810494a:	2201      	movs	r2, #1
 810494c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8104950:	2300      	movs	r3, #0
}
 8104952:	4618      	mov	r0, r3
 8104954:	3718      	adds	r7, #24
 8104956:	46bd      	mov	sp, r7
 8104958:	bd80      	pop	{r7, pc}
 810495a:	bf00      	nop
 810495c:	a7fdabf8 	.word	0xa7fdabf8
 8104960:	cccccccd 	.word	0xcccccccd
 8104964:	40020010 	.word	0x40020010
 8104968:	40020028 	.word	0x40020028
 810496c:	40020040 	.word	0x40020040
 8104970:	40020058 	.word	0x40020058
 8104974:	40020070 	.word	0x40020070
 8104978:	40020088 	.word	0x40020088
 810497c:	400200a0 	.word	0x400200a0
 8104980:	400200b8 	.word	0x400200b8
 8104984:	40020410 	.word	0x40020410
 8104988:	40020428 	.word	0x40020428
 810498c:	40020440 	.word	0x40020440
 8104990:	40020458 	.word	0x40020458
 8104994:	40020470 	.word	0x40020470
 8104998:	40020488 	.word	0x40020488
 810499c:	400204a0 	.word	0x400204a0
 81049a0:	400204b8 	.word	0x400204b8
 81049a4:	58025408 	.word	0x58025408
 81049a8:	5802541c 	.word	0x5802541c
 81049ac:	58025430 	.word	0x58025430
 81049b0:	58025444 	.word	0x58025444
 81049b4:	58025458 	.word	0x58025458
 81049b8:	5802546c 	.word	0x5802546c
 81049bc:	58025480 	.word	0x58025480
 81049c0:	58025494 	.word	0x58025494

081049c4 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 81049c4:	b580      	push	{r7, lr}
 81049c6:	b086      	sub	sp, #24
 81049c8:	af00      	add	r7, sp, #0
 81049ca:	60f8      	str	r0, [r7, #12]
 81049cc:	60b9      	str	r1, [r7, #8]
 81049ce:	607a      	str	r2, [r7, #4]
 81049d0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 81049d2:	2300      	movs	r3, #0
 81049d4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 81049d6:	68fb      	ldr	r3, [r7, #12]
 81049d8:	2b00      	cmp	r3, #0
 81049da:	d101      	bne.n	81049e0 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 81049dc:	2301      	movs	r3, #1
 81049de:	e226      	b.n	8104e2e <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 81049e0:	68fb      	ldr	r3, [r7, #12]
 81049e2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 81049e6:	2b01      	cmp	r3, #1
 81049e8:	d101      	bne.n	81049ee <HAL_DMA_Start_IT+0x2a>
 81049ea:	2302      	movs	r3, #2
 81049ec:	e21f      	b.n	8104e2e <HAL_DMA_Start_IT+0x46a>
 81049ee:	68fb      	ldr	r3, [r7, #12]
 81049f0:	2201      	movs	r2, #1
 81049f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 81049f6:	68fb      	ldr	r3, [r7, #12]
 81049f8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 81049fc:	b2db      	uxtb	r3, r3
 81049fe:	2b01      	cmp	r3, #1
 8104a00:	f040 820a 	bne.w	8104e18 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8104a04:	68fb      	ldr	r3, [r7, #12]
 8104a06:	2202      	movs	r2, #2
 8104a08:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8104a0c:	68fb      	ldr	r3, [r7, #12]
 8104a0e:	2200      	movs	r2, #0
 8104a10:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8104a12:	68fb      	ldr	r3, [r7, #12]
 8104a14:	681b      	ldr	r3, [r3, #0]
 8104a16:	4a68      	ldr	r2, [pc, #416]	; (8104bb8 <HAL_DMA_Start_IT+0x1f4>)
 8104a18:	4293      	cmp	r3, r2
 8104a1a:	d04a      	beq.n	8104ab2 <HAL_DMA_Start_IT+0xee>
 8104a1c:	68fb      	ldr	r3, [r7, #12]
 8104a1e:	681b      	ldr	r3, [r3, #0]
 8104a20:	4a66      	ldr	r2, [pc, #408]	; (8104bbc <HAL_DMA_Start_IT+0x1f8>)
 8104a22:	4293      	cmp	r3, r2
 8104a24:	d045      	beq.n	8104ab2 <HAL_DMA_Start_IT+0xee>
 8104a26:	68fb      	ldr	r3, [r7, #12]
 8104a28:	681b      	ldr	r3, [r3, #0]
 8104a2a:	4a65      	ldr	r2, [pc, #404]	; (8104bc0 <HAL_DMA_Start_IT+0x1fc>)
 8104a2c:	4293      	cmp	r3, r2
 8104a2e:	d040      	beq.n	8104ab2 <HAL_DMA_Start_IT+0xee>
 8104a30:	68fb      	ldr	r3, [r7, #12]
 8104a32:	681b      	ldr	r3, [r3, #0]
 8104a34:	4a63      	ldr	r2, [pc, #396]	; (8104bc4 <HAL_DMA_Start_IT+0x200>)
 8104a36:	4293      	cmp	r3, r2
 8104a38:	d03b      	beq.n	8104ab2 <HAL_DMA_Start_IT+0xee>
 8104a3a:	68fb      	ldr	r3, [r7, #12]
 8104a3c:	681b      	ldr	r3, [r3, #0]
 8104a3e:	4a62      	ldr	r2, [pc, #392]	; (8104bc8 <HAL_DMA_Start_IT+0x204>)
 8104a40:	4293      	cmp	r3, r2
 8104a42:	d036      	beq.n	8104ab2 <HAL_DMA_Start_IT+0xee>
 8104a44:	68fb      	ldr	r3, [r7, #12]
 8104a46:	681b      	ldr	r3, [r3, #0]
 8104a48:	4a60      	ldr	r2, [pc, #384]	; (8104bcc <HAL_DMA_Start_IT+0x208>)
 8104a4a:	4293      	cmp	r3, r2
 8104a4c:	d031      	beq.n	8104ab2 <HAL_DMA_Start_IT+0xee>
 8104a4e:	68fb      	ldr	r3, [r7, #12]
 8104a50:	681b      	ldr	r3, [r3, #0]
 8104a52:	4a5f      	ldr	r2, [pc, #380]	; (8104bd0 <HAL_DMA_Start_IT+0x20c>)
 8104a54:	4293      	cmp	r3, r2
 8104a56:	d02c      	beq.n	8104ab2 <HAL_DMA_Start_IT+0xee>
 8104a58:	68fb      	ldr	r3, [r7, #12]
 8104a5a:	681b      	ldr	r3, [r3, #0]
 8104a5c:	4a5d      	ldr	r2, [pc, #372]	; (8104bd4 <HAL_DMA_Start_IT+0x210>)
 8104a5e:	4293      	cmp	r3, r2
 8104a60:	d027      	beq.n	8104ab2 <HAL_DMA_Start_IT+0xee>
 8104a62:	68fb      	ldr	r3, [r7, #12]
 8104a64:	681b      	ldr	r3, [r3, #0]
 8104a66:	4a5c      	ldr	r2, [pc, #368]	; (8104bd8 <HAL_DMA_Start_IT+0x214>)
 8104a68:	4293      	cmp	r3, r2
 8104a6a:	d022      	beq.n	8104ab2 <HAL_DMA_Start_IT+0xee>
 8104a6c:	68fb      	ldr	r3, [r7, #12]
 8104a6e:	681b      	ldr	r3, [r3, #0]
 8104a70:	4a5a      	ldr	r2, [pc, #360]	; (8104bdc <HAL_DMA_Start_IT+0x218>)
 8104a72:	4293      	cmp	r3, r2
 8104a74:	d01d      	beq.n	8104ab2 <HAL_DMA_Start_IT+0xee>
 8104a76:	68fb      	ldr	r3, [r7, #12]
 8104a78:	681b      	ldr	r3, [r3, #0]
 8104a7a:	4a59      	ldr	r2, [pc, #356]	; (8104be0 <HAL_DMA_Start_IT+0x21c>)
 8104a7c:	4293      	cmp	r3, r2
 8104a7e:	d018      	beq.n	8104ab2 <HAL_DMA_Start_IT+0xee>
 8104a80:	68fb      	ldr	r3, [r7, #12]
 8104a82:	681b      	ldr	r3, [r3, #0]
 8104a84:	4a57      	ldr	r2, [pc, #348]	; (8104be4 <HAL_DMA_Start_IT+0x220>)
 8104a86:	4293      	cmp	r3, r2
 8104a88:	d013      	beq.n	8104ab2 <HAL_DMA_Start_IT+0xee>
 8104a8a:	68fb      	ldr	r3, [r7, #12]
 8104a8c:	681b      	ldr	r3, [r3, #0]
 8104a8e:	4a56      	ldr	r2, [pc, #344]	; (8104be8 <HAL_DMA_Start_IT+0x224>)
 8104a90:	4293      	cmp	r3, r2
 8104a92:	d00e      	beq.n	8104ab2 <HAL_DMA_Start_IT+0xee>
 8104a94:	68fb      	ldr	r3, [r7, #12]
 8104a96:	681b      	ldr	r3, [r3, #0]
 8104a98:	4a54      	ldr	r2, [pc, #336]	; (8104bec <HAL_DMA_Start_IT+0x228>)
 8104a9a:	4293      	cmp	r3, r2
 8104a9c:	d009      	beq.n	8104ab2 <HAL_DMA_Start_IT+0xee>
 8104a9e:	68fb      	ldr	r3, [r7, #12]
 8104aa0:	681b      	ldr	r3, [r3, #0]
 8104aa2:	4a53      	ldr	r2, [pc, #332]	; (8104bf0 <HAL_DMA_Start_IT+0x22c>)
 8104aa4:	4293      	cmp	r3, r2
 8104aa6:	d004      	beq.n	8104ab2 <HAL_DMA_Start_IT+0xee>
 8104aa8:	68fb      	ldr	r3, [r7, #12]
 8104aaa:	681b      	ldr	r3, [r3, #0]
 8104aac:	4a51      	ldr	r2, [pc, #324]	; (8104bf4 <HAL_DMA_Start_IT+0x230>)
 8104aae:	4293      	cmp	r3, r2
 8104ab0:	d108      	bne.n	8104ac4 <HAL_DMA_Start_IT+0x100>
 8104ab2:	68fb      	ldr	r3, [r7, #12]
 8104ab4:	681b      	ldr	r3, [r3, #0]
 8104ab6:	681a      	ldr	r2, [r3, #0]
 8104ab8:	68fb      	ldr	r3, [r7, #12]
 8104aba:	681b      	ldr	r3, [r3, #0]
 8104abc:	f022 0201 	bic.w	r2, r2, #1
 8104ac0:	601a      	str	r2, [r3, #0]
 8104ac2:	e007      	b.n	8104ad4 <HAL_DMA_Start_IT+0x110>
 8104ac4:	68fb      	ldr	r3, [r7, #12]
 8104ac6:	681b      	ldr	r3, [r3, #0]
 8104ac8:	681a      	ldr	r2, [r3, #0]
 8104aca:	68fb      	ldr	r3, [r7, #12]
 8104acc:	681b      	ldr	r3, [r3, #0]
 8104ace:	f022 0201 	bic.w	r2, r2, #1
 8104ad2:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8104ad4:	683b      	ldr	r3, [r7, #0]
 8104ad6:	687a      	ldr	r2, [r7, #4]
 8104ad8:	68b9      	ldr	r1, [r7, #8]
 8104ada:	68f8      	ldr	r0, [r7, #12]
 8104adc:	f001 fe76 	bl	81067cc <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8104ae0:	68fb      	ldr	r3, [r7, #12]
 8104ae2:	681b      	ldr	r3, [r3, #0]
 8104ae4:	4a34      	ldr	r2, [pc, #208]	; (8104bb8 <HAL_DMA_Start_IT+0x1f4>)
 8104ae6:	4293      	cmp	r3, r2
 8104ae8:	d04a      	beq.n	8104b80 <HAL_DMA_Start_IT+0x1bc>
 8104aea:	68fb      	ldr	r3, [r7, #12]
 8104aec:	681b      	ldr	r3, [r3, #0]
 8104aee:	4a33      	ldr	r2, [pc, #204]	; (8104bbc <HAL_DMA_Start_IT+0x1f8>)
 8104af0:	4293      	cmp	r3, r2
 8104af2:	d045      	beq.n	8104b80 <HAL_DMA_Start_IT+0x1bc>
 8104af4:	68fb      	ldr	r3, [r7, #12]
 8104af6:	681b      	ldr	r3, [r3, #0]
 8104af8:	4a31      	ldr	r2, [pc, #196]	; (8104bc0 <HAL_DMA_Start_IT+0x1fc>)
 8104afa:	4293      	cmp	r3, r2
 8104afc:	d040      	beq.n	8104b80 <HAL_DMA_Start_IT+0x1bc>
 8104afe:	68fb      	ldr	r3, [r7, #12]
 8104b00:	681b      	ldr	r3, [r3, #0]
 8104b02:	4a30      	ldr	r2, [pc, #192]	; (8104bc4 <HAL_DMA_Start_IT+0x200>)
 8104b04:	4293      	cmp	r3, r2
 8104b06:	d03b      	beq.n	8104b80 <HAL_DMA_Start_IT+0x1bc>
 8104b08:	68fb      	ldr	r3, [r7, #12]
 8104b0a:	681b      	ldr	r3, [r3, #0]
 8104b0c:	4a2e      	ldr	r2, [pc, #184]	; (8104bc8 <HAL_DMA_Start_IT+0x204>)
 8104b0e:	4293      	cmp	r3, r2
 8104b10:	d036      	beq.n	8104b80 <HAL_DMA_Start_IT+0x1bc>
 8104b12:	68fb      	ldr	r3, [r7, #12]
 8104b14:	681b      	ldr	r3, [r3, #0]
 8104b16:	4a2d      	ldr	r2, [pc, #180]	; (8104bcc <HAL_DMA_Start_IT+0x208>)
 8104b18:	4293      	cmp	r3, r2
 8104b1a:	d031      	beq.n	8104b80 <HAL_DMA_Start_IT+0x1bc>
 8104b1c:	68fb      	ldr	r3, [r7, #12]
 8104b1e:	681b      	ldr	r3, [r3, #0]
 8104b20:	4a2b      	ldr	r2, [pc, #172]	; (8104bd0 <HAL_DMA_Start_IT+0x20c>)
 8104b22:	4293      	cmp	r3, r2
 8104b24:	d02c      	beq.n	8104b80 <HAL_DMA_Start_IT+0x1bc>
 8104b26:	68fb      	ldr	r3, [r7, #12]
 8104b28:	681b      	ldr	r3, [r3, #0]
 8104b2a:	4a2a      	ldr	r2, [pc, #168]	; (8104bd4 <HAL_DMA_Start_IT+0x210>)
 8104b2c:	4293      	cmp	r3, r2
 8104b2e:	d027      	beq.n	8104b80 <HAL_DMA_Start_IT+0x1bc>
 8104b30:	68fb      	ldr	r3, [r7, #12]
 8104b32:	681b      	ldr	r3, [r3, #0]
 8104b34:	4a28      	ldr	r2, [pc, #160]	; (8104bd8 <HAL_DMA_Start_IT+0x214>)
 8104b36:	4293      	cmp	r3, r2
 8104b38:	d022      	beq.n	8104b80 <HAL_DMA_Start_IT+0x1bc>
 8104b3a:	68fb      	ldr	r3, [r7, #12]
 8104b3c:	681b      	ldr	r3, [r3, #0]
 8104b3e:	4a27      	ldr	r2, [pc, #156]	; (8104bdc <HAL_DMA_Start_IT+0x218>)
 8104b40:	4293      	cmp	r3, r2
 8104b42:	d01d      	beq.n	8104b80 <HAL_DMA_Start_IT+0x1bc>
 8104b44:	68fb      	ldr	r3, [r7, #12]
 8104b46:	681b      	ldr	r3, [r3, #0]
 8104b48:	4a25      	ldr	r2, [pc, #148]	; (8104be0 <HAL_DMA_Start_IT+0x21c>)
 8104b4a:	4293      	cmp	r3, r2
 8104b4c:	d018      	beq.n	8104b80 <HAL_DMA_Start_IT+0x1bc>
 8104b4e:	68fb      	ldr	r3, [r7, #12]
 8104b50:	681b      	ldr	r3, [r3, #0]
 8104b52:	4a24      	ldr	r2, [pc, #144]	; (8104be4 <HAL_DMA_Start_IT+0x220>)
 8104b54:	4293      	cmp	r3, r2
 8104b56:	d013      	beq.n	8104b80 <HAL_DMA_Start_IT+0x1bc>
 8104b58:	68fb      	ldr	r3, [r7, #12]
 8104b5a:	681b      	ldr	r3, [r3, #0]
 8104b5c:	4a22      	ldr	r2, [pc, #136]	; (8104be8 <HAL_DMA_Start_IT+0x224>)
 8104b5e:	4293      	cmp	r3, r2
 8104b60:	d00e      	beq.n	8104b80 <HAL_DMA_Start_IT+0x1bc>
 8104b62:	68fb      	ldr	r3, [r7, #12]
 8104b64:	681b      	ldr	r3, [r3, #0]
 8104b66:	4a21      	ldr	r2, [pc, #132]	; (8104bec <HAL_DMA_Start_IT+0x228>)
 8104b68:	4293      	cmp	r3, r2
 8104b6a:	d009      	beq.n	8104b80 <HAL_DMA_Start_IT+0x1bc>
 8104b6c:	68fb      	ldr	r3, [r7, #12]
 8104b6e:	681b      	ldr	r3, [r3, #0]
 8104b70:	4a1f      	ldr	r2, [pc, #124]	; (8104bf0 <HAL_DMA_Start_IT+0x22c>)
 8104b72:	4293      	cmp	r3, r2
 8104b74:	d004      	beq.n	8104b80 <HAL_DMA_Start_IT+0x1bc>
 8104b76:	68fb      	ldr	r3, [r7, #12]
 8104b78:	681b      	ldr	r3, [r3, #0]
 8104b7a:	4a1e      	ldr	r2, [pc, #120]	; (8104bf4 <HAL_DMA_Start_IT+0x230>)
 8104b7c:	4293      	cmp	r3, r2
 8104b7e:	d101      	bne.n	8104b84 <HAL_DMA_Start_IT+0x1c0>
 8104b80:	2301      	movs	r3, #1
 8104b82:	e000      	b.n	8104b86 <HAL_DMA_Start_IT+0x1c2>
 8104b84:	2300      	movs	r3, #0
 8104b86:	2b00      	cmp	r3, #0
 8104b88:	d036      	beq.n	8104bf8 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8104b8a:	68fb      	ldr	r3, [r7, #12]
 8104b8c:	681b      	ldr	r3, [r3, #0]
 8104b8e:	681b      	ldr	r3, [r3, #0]
 8104b90:	f023 021e 	bic.w	r2, r3, #30
 8104b94:	68fb      	ldr	r3, [r7, #12]
 8104b96:	681b      	ldr	r3, [r3, #0]
 8104b98:	f042 0216 	orr.w	r2, r2, #22
 8104b9c:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8104b9e:	68fb      	ldr	r3, [r7, #12]
 8104ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8104ba2:	2b00      	cmp	r3, #0
 8104ba4:	d03e      	beq.n	8104c24 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8104ba6:	68fb      	ldr	r3, [r7, #12]
 8104ba8:	681b      	ldr	r3, [r3, #0]
 8104baa:	681a      	ldr	r2, [r3, #0]
 8104bac:	68fb      	ldr	r3, [r7, #12]
 8104bae:	681b      	ldr	r3, [r3, #0]
 8104bb0:	f042 0208 	orr.w	r2, r2, #8
 8104bb4:	601a      	str	r2, [r3, #0]
 8104bb6:	e035      	b.n	8104c24 <HAL_DMA_Start_IT+0x260>
 8104bb8:	40020010 	.word	0x40020010
 8104bbc:	40020028 	.word	0x40020028
 8104bc0:	40020040 	.word	0x40020040
 8104bc4:	40020058 	.word	0x40020058
 8104bc8:	40020070 	.word	0x40020070
 8104bcc:	40020088 	.word	0x40020088
 8104bd0:	400200a0 	.word	0x400200a0
 8104bd4:	400200b8 	.word	0x400200b8
 8104bd8:	40020410 	.word	0x40020410
 8104bdc:	40020428 	.word	0x40020428
 8104be0:	40020440 	.word	0x40020440
 8104be4:	40020458 	.word	0x40020458
 8104be8:	40020470 	.word	0x40020470
 8104bec:	40020488 	.word	0x40020488
 8104bf0:	400204a0 	.word	0x400204a0
 8104bf4:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8104bf8:	68fb      	ldr	r3, [r7, #12]
 8104bfa:	681b      	ldr	r3, [r3, #0]
 8104bfc:	681b      	ldr	r3, [r3, #0]
 8104bfe:	f023 020e 	bic.w	r2, r3, #14
 8104c02:	68fb      	ldr	r3, [r7, #12]
 8104c04:	681b      	ldr	r3, [r3, #0]
 8104c06:	f042 020a 	orr.w	r2, r2, #10
 8104c0a:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8104c0c:	68fb      	ldr	r3, [r7, #12]
 8104c0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8104c10:	2b00      	cmp	r3, #0
 8104c12:	d007      	beq.n	8104c24 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8104c14:	68fb      	ldr	r3, [r7, #12]
 8104c16:	681b      	ldr	r3, [r3, #0]
 8104c18:	681a      	ldr	r2, [r3, #0]
 8104c1a:	68fb      	ldr	r3, [r7, #12]
 8104c1c:	681b      	ldr	r3, [r3, #0]
 8104c1e:	f042 0204 	orr.w	r2, r2, #4
 8104c22:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8104c24:	68fb      	ldr	r3, [r7, #12]
 8104c26:	681b      	ldr	r3, [r3, #0]
 8104c28:	4a83      	ldr	r2, [pc, #524]	; (8104e38 <HAL_DMA_Start_IT+0x474>)
 8104c2a:	4293      	cmp	r3, r2
 8104c2c:	d072      	beq.n	8104d14 <HAL_DMA_Start_IT+0x350>
 8104c2e:	68fb      	ldr	r3, [r7, #12]
 8104c30:	681b      	ldr	r3, [r3, #0]
 8104c32:	4a82      	ldr	r2, [pc, #520]	; (8104e3c <HAL_DMA_Start_IT+0x478>)
 8104c34:	4293      	cmp	r3, r2
 8104c36:	d06d      	beq.n	8104d14 <HAL_DMA_Start_IT+0x350>
 8104c38:	68fb      	ldr	r3, [r7, #12]
 8104c3a:	681b      	ldr	r3, [r3, #0]
 8104c3c:	4a80      	ldr	r2, [pc, #512]	; (8104e40 <HAL_DMA_Start_IT+0x47c>)
 8104c3e:	4293      	cmp	r3, r2
 8104c40:	d068      	beq.n	8104d14 <HAL_DMA_Start_IT+0x350>
 8104c42:	68fb      	ldr	r3, [r7, #12]
 8104c44:	681b      	ldr	r3, [r3, #0]
 8104c46:	4a7f      	ldr	r2, [pc, #508]	; (8104e44 <HAL_DMA_Start_IT+0x480>)
 8104c48:	4293      	cmp	r3, r2
 8104c4a:	d063      	beq.n	8104d14 <HAL_DMA_Start_IT+0x350>
 8104c4c:	68fb      	ldr	r3, [r7, #12]
 8104c4e:	681b      	ldr	r3, [r3, #0]
 8104c50:	4a7d      	ldr	r2, [pc, #500]	; (8104e48 <HAL_DMA_Start_IT+0x484>)
 8104c52:	4293      	cmp	r3, r2
 8104c54:	d05e      	beq.n	8104d14 <HAL_DMA_Start_IT+0x350>
 8104c56:	68fb      	ldr	r3, [r7, #12]
 8104c58:	681b      	ldr	r3, [r3, #0]
 8104c5a:	4a7c      	ldr	r2, [pc, #496]	; (8104e4c <HAL_DMA_Start_IT+0x488>)
 8104c5c:	4293      	cmp	r3, r2
 8104c5e:	d059      	beq.n	8104d14 <HAL_DMA_Start_IT+0x350>
 8104c60:	68fb      	ldr	r3, [r7, #12]
 8104c62:	681b      	ldr	r3, [r3, #0]
 8104c64:	4a7a      	ldr	r2, [pc, #488]	; (8104e50 <HAL_DMA_Start_IT+0x48c>)
 8104c66:	4293      	cmp	r3, r2
 8104c68:	d054      	beq.n	8104d14 <HAL_DMA_Start_IT+0x350>
 8104c6a:	68fb      	ldr	r3, [r7, #12]
 8104c6c:	681b      	ldr	r3, [r3, #0]
 8104c6e:	4a79      	ldr	r2, [pc, #484]	; (8104e54 <HAL_DMA_Start_IT+0x490>)
 8104c70:	4293      	cmp	r3, r2
 8104c72:	d04f      	beq.n	8104d14 <HAL_DMA_Start_IT+0x350>
 8104c74:	68fb      	ldr	r3, [r7, #12]
 8104c76:	681b      	ldr	r3, [r3, #0]
 8104c78:	4a77      	ldr	r2, [pc, #476]	; (8104e58 <HAL_DMA_Start_IT+0x494>)
 8104c7a:	4293      	cmp	r3, r2
 8104c7c:	d04a      	beq.n	8104d14 <HAL_DMA_Start_IT+0x350>
 8104c7e:	68fb      	ldr	r3, [r7, #12]
 8104c80:	681b      	ldr	r3, [r3, #0]
 8104c82:	4a76      	ldr	r2, [pc, #472]	; (8104e5c <HAL_DMA_Start_IT+0x498>)
 8104c84:	4293      	cmp	r3, r2
 8104c86:	d045      	beq.n	8104d14 <HAL_DMA_Start_IT+0x350>
 8104c88:	68fb      	ldr	r3, [r7, #12]
 8104c8a:	681b      	ldr	r3, [r3, #0]
 8104c8c:	4a74      	ldr	r2, [pc, #464]	; (8104e60 <HAL_DMA_Start_IT+0x49c>)
 8104c8e:	4293      	cmp	r3, r2
 8104c90:	d040      	beq.n	8104d14 <HAL_DMA_Start_IT+0x350>
 8104c92:	68fb      	ldr	r3, [r7, #12]
 8104c94:	681b      	ldr	r3, [r3, #0]
 8104c96:	4a73      	ldr	r2, [pc, #460]	; (8104e64 <HAL_DMA_Start_IT+0x4a0>)
 8104c98:	4293      	cmp	r3, r2
 8104c9a:	d03b      	beq.n	8104d14 <HAL_DMA_Start_IT+0x350>
 8104c9c:	68fb      	ldr	r3, [r7, #12]
 8104c9e:	681b      	ldr	r3, [r3, #0]
 8104ca0:	4a71      	ldr	r2, [pc, #452]	; (8104e68 <HAL_DMA_Start_IT+0x4a4>)
 8104ca2:	4293      	cmp	r3, r2
 8104ca4:	d036      	beq.n	8104d14 <HAL_DMA_Start_IT+0x350>
 8104ca6:	68fb      	ldr	r3, [r7, #12]
 8104ca8:	681b      	ldr	r3, [r3, #0]
 8104caa:	4a70      	ldr	r2, [pc, #448]	; (8104e6c <HAL_DMA_Start_IT+0x4a8>)
 8104cac:	4293      	cmp	r3, r2
 8104cae:	d031      	beq.n	8104d14 <HAL_DMA_Start_IT+0x350>
 8104cb0:	68fb      	ldr	r3, [r7, #12]
 8104cb2:	681b      	ldr	r3, [r3, #0]
 8104cb4:	4a6e      	ldr	r2, [pc, #440]	; (8104e70 <HAL_DMA_Start_IT+0x4ac>)
 8104cb6:	4293      	cmp	r3, r2
 8104cb8:	d02c      	beq.n	8104d14 <HAL_DMA_Start_IT+0x350>
 8104cba:	68fb      	ldr	r3, [r7, #12]
 8104cbc:	681b      	ldr	r3, [r3, #0]
 8104cbe:	4a6d      	ldr	r2, [pc, #436]	; (8104e74 <HAL_DMA_Start_IT+0x4b0>)
 8104cc0:	4293      	cmp	r3, r2
 8104cc2:	d027      	beq.n	8104d14 <HAL_DMA_Start_IT+0x350>
 8104cc4:	68fb      	ldr	r3, [r7, #12]
 8104cc6:	681b      	ldr	r3, [r3, #0]
 8104cc8:	4a6b      	ldr	r2, [pc, #428]	; (8104e78 <HAL_DMA_Start_IT+0x4b4>)
 8104cca:	4293      	cmp	r3, r2
 8104ccc:	d022      	beq.n	8104d14 <HAL_DMA_Start_IT+0x350>
 8104cce:	68fb      	ldr	r3, [r7, #12]
 8104cd0:	681b      	ldr	r3, [r3, #0]
 8104cd2:	4a6a      	ldr	r2, [pc, #424]	; (8104e7c <HAL_DMA_Start_IT+0x4b8>)
 8104cd4:	4293      	cmp	r3, r2
 8104cd6:	d01d      	beq.n	8104d14 <HAL_DMA_Start_IT+0x350>
 8104cd8:	68fb      	ldr	r3, [r7, #12]
 8104cda:	681b      	ldr	r3, [r3, #0]
 8104cdc:	4a68      	ldr	r2, [pc, #416]	; (8104e80 <HAL_DMA_Start_IT+0x4bc>)
 8104cde:	4293      	cmp	r3, r2
 8104ce0:	d018      	beq.n	8104d14 <HAL_DMA_Start_IT+0x350>
 8104ce2:	68fb      	ldr	r3, [r7, #12]
 8104ce4:	681b      	ldr	r3, [r3, #0]
 8104ce6:	4a67      	ldr	r2, [pc, #412]	; (8104e84 <HAL_DMA_Start_IT+0x4c0>)
 8104ce8:	4293      	cmp	r3, r2
 8104cea:	d013      	beq.n	8104d14 <HAL_DMA_Start_IT+0x350>
 8104cec:	68fb      	ldr	r3, [r7, #12]
 8104cee:	681b      	ldr	r3, [r3, #0]
 8104cf0:	4a65      	ldr	r2, [pc, #404]	; (8104e88 <HAL_DMA_Start_IT+0x4c4>)
 8104cf2:	4293      	cmp	r3, r2
 8104cf4:	d00e      	beq.n	8104d14 <HAL_DMA_Start_IT+0x350>
 8104cf6:	68fb      	ldr	r3, [r7, #12]
 8104cf8:	681b      	ldr	r3, [r3, #0]
 8104cfa:	4a64      	ldr	r2, [pc, #400]	; (8104e8c <HAL_DMA_Start_IT+0x4c8>)
 8104cfc:	4293      	cmp	r3, r2
 8104cfe:	d009      	beq.n	8104d14 <HAL_DMA_Start_IT+0x350>
 8104d00:	68fb      	ldr	r3, [r7, #12]
 8104d02:	681b      	ldr	r3, [r3, #0]
 8104d04:	4a62      	ldr	r2, [pc, #392]	; (8104e90 <HAL_DMA_Start_IT+0x4cc>)
 8104d06:	4293      	cmp	r3, r2
 8104d08:	d004      	beq.n	8104d14 <HAL_DMA_Start_IT+0x350>
 8104d0a:	68fb      	ldr	r3, [r7, #12]
 8104d0c:	681b      	ldr	r3, [r3, #0]
 8104d0e:	4a61      	ldr	r2, [pc, #388]	; (8104e94 <HAL_DMA_Start_IT+0x4d0>)
 8104d10:	4293      	cmp	r3, r2
 8104d12:	d101      	bne.n	8104d18 <HAL_DMA_Start_IT+0x354>
 8104d14:	2301      	movs	r3, #1
 8104d16:	e000      	b.n	8104d1a <HAL_DMA_Start_IT+0x356>
 8104d18:	2300      	movs	r3, #0
 8104d1a:	2b00      	cmp	r3, #0
 8104d1c:	d01a      	beq.n	8104d54 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8104d1e:	68fb      	ldr	r3, [r7, #12]
 8104d20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8104d22:	681b      	ldr	r3, [r3, #0]
 8104d24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8104d28:	2b00      	cmp	r3, #0
 8104d2a:	d007      	beq.n	8104d3c <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8104d2c:	68fb      	ldr	r3, [r7, #12]
 8104d2e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8104d30:	681a      	ldr	r2, [r3, #0]
 8104d32:	68fb      	ldr	r3, [r7, #12]
 8104d34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8104d36:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8104d3a:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8104d3c:	68fb      	ldr	r3, [r7, #12]
 8104d3e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8104d40:	2b00      	cmp	r3, #0
 8104d42:	d007      	beq.n	8104d54 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8104d44:	68fb      	ldr	r3, [r7, #12]
 8104d46:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8104d48:	681a      	ldr	r2, [r3, #0]
 8104d4a:	68fb      	ldr	r3, [r7, #12]
 8104d4c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8104d4e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8104d52:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8104d54:	68fb      	ldr	r3, [r7, #12]
 8104d56:	681b      	ldr	r3, [r3, #0]
 8104d58:	4a37      	ldr	r2, [pc, #220]	; (8104e38 <HAL_DMA_Start_IT+0x474>)
 8104d5a:	4293      	cmp	r3, r2
 8104d5c:	d04a      	beq.n	8104df4 <HAL_DMA_Start_IT+0x430>
 8104d5e:	68fb      	ldr	r3, [r7, #12]
 8104d60:	681b      	ldr	r3, [r3, #0]
 8104d62:	4a36      	ldr	r2, [pc, #216]	; (8104e3c <HAL_DMA_Start_IT+0x478>)
 8104d64:	4293      	cmp	r3, r2
 8104d66:	d045      	beq.n	8104df4 <HAL_DMA_Start_IT+0x430>
 8104d68:	68fb      	ldr	r3, [r7, #12]
 8104d6a:	681b      	ldr	r3, [r3, #0]
 8104d6c:	4a34      	ldr	r2, [pc, #208]	; (8104e40 <HAL_DMA_Start_IT+0x47c>)
 8104d6e:	4293      	cmp	r3, r2
 8104d70:	d040      	beq.n	8104df4 <HAL_DMA_Start_IT+0x430>
 8104d72:	68fb      	ldr	r3, [r7, #12]
 8104d74:	681b      	ldr	r3, [r3, #0]
 8104d76:	4a33      	ldr	r2, [pc, #204]	; (8104e44 <HAL_DMA_Start_IT+0x480>)
 8104d78:	4293      	cmp	r3, r2
 8104d7a:	d03b      	beq.n	8104df4 <HAL_DMA_Start_IT+0x430>
 8104d7c:	68fb      	ldr	r3, [r7, #12]
 8104d7e:	681b      	ldr	r3, [r3, #0]
 8104d80:	4a31      	ldr	r2, [pc, #196]	; (8104e48 <HAL_DMA_Start_IT+0x484>)
 8104d82:	4293      	cmp	r3, r2
 8104d84:	d036      	beq.n	8104df4 <HAL_DMA_Start_IT+0x430>
 8104d86:	68fb      	ldr	r3, [r7, #12]
 8104d88:	681b      	ldr	r3, [r3, #0]
 8104d8a:	4a30      	ldr	r2, [pc, #192]	; (8104e4c <HAL_DMA_Start_IT+0x488>)
 8104d8c:	4293      	cmp	r3, r2
 8104d8e:	d031      	beq.n	8104df4 <HAL_DMA_Start_IT+0x430>
 8104d90:	68fb      	ldr	r3, [r7, #12]
 8104d92:	681b      	ldr	r3, [r3, #0]
 8104d94:	4a2e      	ldr	r2, [pc, #184]	; (8104e50 <HAL_DMA_Start_IT+0x48c>)
 8104d96:	4293      	cmp	r3, r2
 8104d98:	d02c      	beq.n	8104df4 <HAL_DMA_Start_IT+0x430>
 8104d9a:	68fb      	ldr	r3, [r7, #12]
 8104d9c:	681b      	ldr	r3, [r3, #0]
 8104d9e:	4a2d      	ldr	r2, [pc, #180]	; (8104e54 <HAL_DMA_Start_IT+0x490>)
 8104da0:	4293      	cmp	r3, r2
 8104da2:	d027      	beq.n	8104df4 <HAL_DMA_Start_IT+0x430>
 8104da4:	68fb      	ldr	r3, [r7, #12]
 8104da6:	681b      	ldr	r3, [r3, #0]
 8104da8:	4a2b      	ldr	r2, [pc, #172]	; (8104e58 <HAL_DMA_Start_IT+0x494>)
 8104daa:	4293      	cmp	r3, r2
 8104dac:	d022      	beq.n	8104df4 <HAL_DMA_Start_IT+0x430>
 8104dae:	68fb      	ldr	r3, [r7, #12]
 8104db0:	681b      	ldr	r3, [r3, #0]
 8104db2:	4a2a      	ldr	r2, [pc, #168]	; (8104e5c <HAL_DMA_Start_IT+0x498>)
 8104db4:	4293      	cmp	r3, r2
 8104db6:	d01d      	beq.n	8104df4 <HAL_DMA_Start_IT+0x430>
 8104db8:	68fb      	ldr	r3, [r7, #12]
 8104dba:	681b      	ldr	r3, [r3, #0]
 8104dbc:	4a28      	ldr	r2, [pc, #160]	; (8104e60 <HAL_DMA_Start_IT+0x49c>)
 8104dbe:	4293      	cmp	r3, r2
 8104dc0:	d018      	beq.n	8104df4 <HAL_DMA_Start_IT+0x430>
 8104dc2:	68fb      	ldr	r3, [r7, #12]
 8104dc4:	681b      	ldr	r3, [r3, #0]
 8104dc6:	4a27      	ldr	r2, [pc, #156]	; (8104e64 <HAL_DMA_Start_IT+0x4a0>)
 8104dc8:	4293      	cmp	r3, r2
 8104dca:	d013      	beq.n	8104df4 <HAL_DMA_Start_IT+0x430>
 8104dcc:	68fb      	ldr	r3, [r7, #12]
 8104dce:	681b      	ldr	r3, [r3, #0]
 8104dd0:	4a25      	ldr	r2, [pc, #148]	; (8104e68 <HAL_DMA_Start_IT+0x4a4>)
 8104dd2:	4293      	cmp	r3, r2
 8104dd4:	d00e      	beq.n	8104df4 <HAL_DMA_Start_IT+0x430>
 8104dd6:	68fb      	ldr	r3, [r7, #12]
 8104dd8:	681b      	ldr	r3, [r3, #0]
 8104dda:	4a24      	ldr	r2, [pc, #144]	; (8104e6c <HAL_DMA_Start_IT+0x4a8>)
 8104ddc:	4293      	cmp	r3, r2
 8104dde:	d009      	beq.n	8104df4 <HAL_DMA_Start_IT+0x430>
 8104de0:	68fb      	ldr	r3, [r7, #12]
 8104de2:	681b      	ldr	r3, [r3, #0]
 8104de4:	4a22      	ldr	r2, [pc, #136]	; (8104e70 <HAL_DMA_Start_IT+0x4ac>)
 8104de6:	4293      	cmp	r3, r2
 8104de8:	d004      	beq.n	8104df4 <HAL_DMA_Start_IT+0x430>
 8104dea:	68fb      	ldr	r3, [r7, #12]
 8104dec:	681b      	ldr	r3, [r3, #0]
 8104dee:	4a21      	ldr	r2, [pc, #132]	; (8104e74 <HAL_DMA_Start_IT+0x4b0>)
 8104df0:	4293      	cmp	r3, r2
 8104df2:	d108      	bne.n	8104e06 <HAL_DMA_Start_IT+0x442>
 8104df4:	68fb      	ldr	r3, [r7, #12]
 8104df6:	681b      	ldr	r3, [r3, #0]
 8104df8:	681a      	ldr	r2, [r3, #0]
 8104dfa:	68fb      	ldr	r3, [r7, #12]
 8104dfc:	681b      	ldr	r3, [r3, #0]
 8104dfe:	f042 0201 	orr.w	r2, r2, #1
 8104e02:	601a      	str	r2, [r3, #0]
 8104e04:	e012      	b.n	8104e2c <HAL_DMA_Start_IT+0x468>
 8104e06:	68fb      	ldr	r3, [r7, #12]
 8104e08:	681b      	ldr	r3, [r3, #0]
 8104e0a:	681a      	ldr	r2, [r3, #0]
 8104e0c:	68fb      	ldr	r3, [r7, #12]
 8104e0e:	681b      	ldr	r3, [r3, #0]
 8104e10:	f042 0201 	orr.w	r2, r2, #1
 8104e14:	601a      	str	r2, [r3, #0]
 8104e16:	e009      	b.n	8104e2c <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8104e18:	68fb      	ldr	r3, [r7, #12]
 8104e1a:	2200      	movs	r2, #0
 8104e1c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8104e20:	68fb      	ldr	r3, [r7, #12]
 8104e22:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8104e26:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    status = HAL_ERROR;
 8104e28:	2301      	movs	r3, #1
 8104e2a:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8104e2c:	7dfb      	ldrb	r3, [r7, #23]
}
 8104e2e:	4618      	mov	r0, r3
 8104e30:	3718      	adds	r7, #24
 8104e32:	46bd      	mov	sp, r7
 8104e34:	bd80      	pop	{r7, pc}
 8104e36:	bf00      	nop
 8104e38:	40020010 	.word	0x40020010
 8104e3c:	40020028 	.word	0x40020028
 8104e40:	40020040 	.word	0x40020040
 8104e44:	40020058 	.word	0x40020058
 8104e48:	40020070 	.word	0x40020070
 8104e4c:	40020088 	.word	0x40020088
 8104e50:	400200a0 	.word	0x400200a0
 8104e54:	400200b8 	.word	0x400200b8
 8104e58:	40020410 	.word	0x40020410
 8104e5c:	40020428 	.word	0x40020428
 8104e60:	40020440 	.word	0x40020440
 8104e64:	40020458 	.word	0x40020458
 8104e68:	40020470 	.word	0x40020470
 8104e6c:	40020488 	.word	0x40020488
 8104e70:	400204a0 	.word	0x400204a0
 8104e74:	400204b8 	.word	0x400204b8
 8104e78:	58025408 	.word	0x58025408
 8104e7c:	5802541c 	.word	0x5802541c
 8104e80:	58025430 	.word	0x58025430
 8104e84:	58025444 	.word	0x58025444
 8104e88:	58025458 	.word	0x58025458
 8104e8c:	5802546c 	.word	0x5802546c
 8104e90:	58025480 	.word	0x58025480
 8104e94:	58025494 	.word	0x58025494

08104e98 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8104e98:	b580      	push	{r7, lr}
 8104e9a:	b086      	sub	sp, #24
 8104e9c:	af00      	add	r7, sp, #0
 8104e9e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8104ea0:	f7fd fdac 	bl	81029fc <HAL_GetTick>
 8104ea4:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8104ea6:	687b      	ldr	r3, [r7, #4]
 8104ea8:	2b00      	cmp	r3, #0
 8104eaa:	d101      	bne.n	8104eb0 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8104eac:	2301      	movs	r3, #1
 8104eae:	e2dc      	b.n	810546a <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8104eb0:	687b      	ldr	r3, [r7, #4]
 8104eb2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8104eb6:	b2db      	uxtb	r3, r3
 8104eb8:	2b02      	cmp	r3, #2
 8104eba:	d008      	beq.n	8104ece <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8104ebc:	687b      	ldr	r3, [r7, #4]
 8104ebe:	2280      	movs	r2, #128	; 0x80
 8104ec0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8104ec2:	687b      	ldr	r3, [r7, #4]
 8104ec4:	2200      	movs	r2, #0
 8104ec6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8104eca:	2301      	movs	r3, #1
 8104ecc:	e2cd      	b.n	810546a <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8104ece:	687b      	ldr	r3, [r7, #4]
 8104ed0:	681b      	ldr	r3, [r3, #0]
 8104ed2:	4a76      	ldr	r2, [pc, #472]	; (81050ac <HAL_DMA_Abort+0x214>)
 8104ed4:	4293      	cmp	r3, r2
 8104ed6:	d04a      	beq.n	8104f6e <HAL_DMA_Abort+0xd6>
 8104ed8:	687b      	ldr	r3, [r7, #4]
 8104eda:	681b      	ldr	r3, [r3, #0]
 8104edc:	4a74      	ldr	r2, [pc, #464]	; (81050b0 <HAL_DMA_Abort+0x218>)
 8104ede:	4293      	cmp	r3, r2
 8104ee0:	d045      	beq.n	8104f6e <HAL_DMA_Abort+0xd6>
 8104ee2:	687b      	ldr	r3, [r7, #4]
 8104ee4:	681b      	ldr	r3, [r3, #0]
 8104ee6:	4a73      	ldr	r2, [pc, #460]	; (81050b4 <HAL_DMA_Abort+0x21c>)
 8104ee8:	4293      	cmp	r3, r2
 8104eea:	d040      	beq.n	8104f6e <HAL_DMA_Abort+0xd6>
 8104eec:	687b      	ldr	r3, [r7, #4]
 8104eee:	681b      	ldr	r3, [r3, #0]
 8104ef0:	4a71      	ldr	r2, [pc, #452]	; (81050b8 <HAL_DMA_Abort+0x220>)
 8104ef2:	4293      	cmp	r3, r2
 8104ef4:	d03b      	beq.n	8104f6e <HAL_DMA_Abort+0xd6>
 8104ef6:	687b      	ldr	r3, [r7, #4]
 8104ef8:	681b      	ldr	r3, [r3, #0]
 8104efa:	4a70      	ldr	r2, [pc, #448]	; (81050bc <HAL_DMA_Abort+0x224>)
 8104efc:	4293      	cmp	r3, r2
 8104efe:	d036      	beq.n	8104f6e <HAL_DMA_Abort+0xd6>
 8104f00:	687b      	ldr	r3, [r7, #4]
 8104f02:	681b      	ldr	r3, [r3, #0]
 8104f04:	4a6e      	ldr	r2, [pc, #440]	; (81050c0 <HAL_DMA_Abort+0x228>)
 8104f06:	4293      	cmp	r3, r2
 8104f08:	d031      	beq.n	8104f6e <HAL_DMA_Abort+0xd6>
 8104f0a:	687b      	ldr	r3, [r7, #4]
 8104f0c:	681b      	ldr	r3, [r3, #0]
 8104f0e:	4a6d      	ldr	r2, [pc, #436]	; (81050c4 <HAL_DMA_Abort+0x22c>)
 8104f10:	4293      	cmp	r3, r2
 8104f12:	d02c      	beq.n	8104f6e <HAL_DMA_Abort+0xd6>
 8104f14:	687b      	ldr	r3, [r7, #4]
 8104f16:	681b      	ldr	r3, [r3, #0]
 8104f18:	4a6b      	ldr	r2, [pc, #428]	; (81050c8 <HAL_DMA_Abort+0x230>)
 8104f1a:	4293      	cmp	r3, r2
 8104f1c:	d027      	beq.n	8104f6e <HAL_DMA_Abort+0xd6>
 8104f1e:	687b      	ldr	r3, [r7, #4]
 8104f20:	681b      	ldr	r3, [r3, #0]
 8104f22:	4a6a      	ldr	r2, [pc, #424]	; (81050cc <HAL_DMA_Abort+0x234>)
 8104f24:	4293      	cmp	r3, r2
 8104f26:	d022      	beq.n	8104f6e <HAL_DMA_Abort+0xd6>
 8104f28:	687b      	ldr	r3, [r7, #4]
 8104f2a:	681b      	ldr	r3, [r3, #0]
 8104f2c:	4a68      	ldr	r2, [pc, #416]	; (81050d0 <HAL_DMA_Abort+0x238>)
 8104f2e:	4293      	cmp	r3, r2
 8104f30:	d01d      	beq.n	8104f6e <HAL_DMA_Abort+0xd6>
 8104f32:	687b      	ldr	r3, [r7, #4]
 8104f34:	681b      	ldr	r3, [r3, #0]
 8104f36:	4a67      	ldr	r2, [pc, #412]	; (81050d4 <HAL_DMA_Abort+0x23c>)
 8104f38:	4293      	cmp	r3, r2
 8104f3a:	d018      	beq.n	8104f6e <HAL_DMA_Abort+0xd6>
 8104f3c:	687b      	ldr	r3, [r7, #4]
 8104f3e:	681b      	ldr	r3, [r3, #0]
 8104f40:	4a65      	ldr	r2, [pc, #404]	; (81050d8 <HAL_DMA_Abort+0x240>)
 8104f42:	4293      	cmp	r3, r2
 8104f44:	d013      	beq.n	8104f6e <HAL_DMA_Abort+0xd6>
 8104f46:	687b      	ldr	r3, [r7, #4]
 8104f48:	681b      	ldr	r3, [r3, #0]
 8104f4a:	4a64      	ldr	r2, [pc, #400]	; (81050dc <HAL_DMA_Abort+0x244>)
 8104f4c:	4293      	cmp	r3, r2
 8104f4e:	d00e      	beq.n	8104f6e <HAL_DMA_Abort+0xd6>
 8104f50:	687b      	ldr	r3, [r7, #4]
 8104f52:	681b      	ldr	r3, [r3, #0]
 8104f54:	4a62      	ldr	r2, [pc, #392]	; (81050e0 <HAL_DMA_Abort+0x248>)
 8104f56:	4293      	cmp	r3, r2
 8104f58:	d009      	beq.n	8104f6e <HAL_DMA_Abort+0xd6>
 8104f5a:	687b      	ldr	r3, [r7, #4]
 8104f5c:	681b      	ldr	r3, [r3, #0]
 8104f5e:	4a61      	ldr	r2, [pc, #388]	; (81050e4 <HAL_DMA_Abort+0x24c>)
 8104f60:	4293      	cmp	r3, r2
 8104f62:	d004      	beq.n	8104f6e <HAL_DMA_Abort+0xd6>
 8104f64:	687b      	ldr	r3, [r7, #4]
 8104f66:	681b      	ldr	r3, [r3, #0]
 8104f68:	4a5f      	ldr	r2, [pc, #380]	; (81050e8 <HAL_DMA_Abort+0x250>)
 8104f6a:	4293      	cmp	r3, r2
 8104f6c:	d101      	bne.n	8104f72 <HAL_DMA_Abort+0xda>
 8104f6e:	2301      	movs	r3, #1
 8104f70:	e000      	b.n	8104f74 <HAL_DMA_Abort+0xdc>
 8104f72:	2300      	movs	r3, #0
 8104f74:	2b00      	cmp	r3, #0
 8104f76:	d013      	beq.n	8104fa0 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8104f78:	687b      	ldr	r3, [r7, #4]
 8104f7a:	681b      	ldr	r3, [r3, #0]
 8104f7c:	681a      	ldr	r2, [r3, #0]
 8104f7e:	687b      	ldr	r3, [r7, #4]
 8104f80:	681b      	ldr	r3, [r3, #0]
 8104f82:	f022 021e 	bic.w	r2, r2, #30
 8104f86:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8104f88:	687b      	ldr	r3, [r7, #4]
 8104f8a:	681b      	ldr	r3, [r3, #0]
 8104f8c:	695a      	ldr	r2, [r3, #20]
 8104f8e:	687b      	ldr	r3, [r7, #4]
 8104f90:	681b      	ldr	r3, [r3, #0]
 8104f92:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8104f96:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8104f98:	687b      	ldr	r3, [r7, #4]
 8104f9a:	681b      	ldr	r3, [r3, #0]
 8104f9c:	617b      	str	r3, [r7, #20]
 8104f9e:	e00a      	b.n	8104fb6 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8104fa0:	687b      	ldr	r3, [r7, #4]
 8104fa2:	681b      	ldr	r3, [r3, #0]
 8104fa4:	681a      	ldr	r2, [r3, #0]
 8104fa6:	687b      	ldr	r3, [r7, #4]
 8104fa8:	681b      	ldr	r3, [r3, #0]
 8104faa:	f022 020e 	bic.w	r2, r2, #14
 8104fae:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8104fb0:	687b      	ldr	r3, [r7, #4]
 8104fb2:	681b      	ldr	r3, [r3, #0]
 8104fb4:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8104fb6:	687b      	ldr	r3, [r7, #4]
 8104fb8:	681b      	ldr	r3, [r3, #0]
 8104fba:	4a3c      	ldr	r2, [pc, #240]	; (81050ac <HAL_DMA_Abort+0x214>)
 8104fbc:	4293      	cmp	r3, r2
 8104fbe:	d072      	beq.n	81050a6 <HAL_DMA_Abort+0x20e>
 8104fc0:	687b      	ldr	r3, [r7, #4]
 8104fc2:	681b      	ldr	r3, [r3, #0]
 8104fc4:	4a3a      	ldr	r2, [pc, #232]	; (81050b0 <HAL_DMA_Abort+0x218>)
 8104fc6:	4293      	cmp	r3, r2
 8104fc8:	d06d      	beq.n	81050a6 <HAL_DMA_Abort+0x20e>
 8104fca:	687b      	ldr	r3, [r7, #4]
 8104fcc:	681b      	ldr	r3, [r3, #0]
 8104fce:	4a39      	ldr	r2, [pc, #228]	; (81050b4 <HAL_DMA_Abort+0x21c>)
 8104fd0:	4293      	cmp	r3, r2
 8104fd2:	d068      	beq.n	81050a6 <HAL_DMA_Abort+0x20e>
 8104fd4:	687b      	ldr	r3, [r7, #4]
 8104fd6:	681b      	ldr	r3, [r3, #0]
 8104fd8:	4a37      	ldr	r2, [pc, #220]	; (81050b8 <HAL_DMA_Abort+0x220>)
 8104fda:	4293      	cmp	r3, r2
 8104fdc:	d063      	beq.n	81050a6 <HAL_DMA_Abort+0x20e>
 8104fde:	687b      	ldr	r3, [r7, #4]
 8104fe0:	681b      	ldr	r3, [r3, #0]
 8104fe2:	4a36      	ldr	r2, [pc, #216]	; (81050bc <HAL_DMA_Abort+0x224>)
 8104fe4:	4293      	cmp	r3, r2
 8104fe6:	d05e      	beq.n	81050a6 <HAL_DMA_Abort+0x20e>
 8104fe8:	687b      	ldr	r3, [r7, #4]
 8104fea:	681b      	ldr	r3, [r3, #0]
 8104fec:	4a34      	ldr	r2, [pc, #208]	; (81050c0 <HAL_DMA_Abort+0x228>)
 8104fee:	4293      	cmp	r3, r2
 8104ff0:	d059      	beq.n	81050a6 <HAL_DMA_Abort+0x20e>
 8104ff2:	687b      	ldr	r3, [r7, #4]
 8104ff4:	681b      	ldr	r3, [r3, #0]
 8104ff6:	4a33      	ldr	r2, [pc, #204]	; (81050c4 <HAL_DMA_Abort+0x22c>)
 8104ff8:	4293      	cmp	r3, r2
 8104ffa:	d054      	beq.n	81050a6 <HAL_DMA_Abort+0x20e>
 8104ffc:	687b      	ldr	r3, [r7, #4]
 8104ffe:	681b      	ldr	r3, [r3, #0]
 8105000:	4a31      	ldr	r2, [pc, #196]	; (81050c8 <HAL_DMA_Abort+0x230>)
 8105002:	4293      	cmp	r3, r2
 8105004:	d04f      	beq.n	81050a6 <HAL_DMA_Abort+0x20e>
 8105006:	687b      	ldr	r3, [r7, #4]
 8105008:	681b      	ldr	r3, [r3, #0]
 810500a:	4a30      	ldr	r2, [pc, #192]	; (81050cc <HAL_DMA_Abort+0x234>)
 810500c:	4293      	cmp	r3, r2
 810500e:	d04a      	beq.n	81050a6 <HAL_DMA_Abort+0x20e>
 8105010:	687b      	ldr	r3, [r7, #4]
 8105012:	681b      	ldr	r3, [r3, #0]
 8105014:	4a2e      	ldr	r2, [pc, #184]	; (81050d0 <HAL_DMA_Abort+0x238>)
 8105016:	4293      	cmp	r3, r2
 8105018:	d045      	beq.n	81050a6 <HAL_DMA_Abort+0x20e>
 810501a:	687b      	ldr	r3, [r7, #4]
 810501c:	681b      	ldr	r3, [r3, #0]
 810501e:	4a2d      	ldr	r2, [pc, #180]	; (81050d4 <HAL_DMA_Abort+0x23c>)
 8105020:	4293      	cmp	r3, r2
 8105022:	d040      	beq.n	81050a6 <HAL_DMA_Abort+0x20e>
 8105024:	687b      	ldr	r3, [r7, #4]
 8105026:	681b      	ldr	r3, [r3, #0]
 8105028:	4a2b      	ldr	r2, [pc, #172]	; (81050d8 <HAL_DMA_Abort+0x240>)
 810502a:	4293      	cmp	r3, r2
 810502c:	d03b      	beq.n	81050a6 <HAL_DMA_Abort+0x20e>
 810502e:	687b      	ldr	r3, [r7, #4]
 8105030:	681b      	ldr	r3, [r3, #0]
 8105032:	4a2a      	ldr	r2, [pc, #168]	; (81050dc <HAL_DMA_Abort+0x244>)
 8105034:	4293      	cmp	r3, r2
 8105036:	d036      	beq.n	81050a6 <HAL_DMA_Abort+0x20e>
 8105038:	687b      	ldr	r3, [r7, #4]
 810503a:	681b      	ldr	r3, [r3, #0]
 810503c:	4a28      	ldr	r2, [pc, #160]	; (81050e0 <HAL_DMA_Abort+0x248>)
 810503e:	4293      	cmp	r3, r2
 8105040:	d031      	beq.n	81050a6 <HAL_DMA_Abort+0x20e>
 8105042:	687b      	ldr	r3, [r7, #4]
 8105044:	681b      	ldr	r3, [r3, #0]
 8105046:	4a27      	ldr	r2, [pc, #156]	; (81050e4 <HAL_DMA_Abort+0x24c>)
 8105048:	4293      	cmp	r3, r2
 810504a:	d02c      	beq.n	81050a6 <HAL_DMA_Abort+0x20e>
 810504c:	687b      	ldr	r3, [r7, #4]
 810504e:	681b      	ldr	r3, [r3, #0]
 8105050:	4a25      	ldr	r2, [pc, #148]	; (81050e8 <HAL_DMA_Abort+0x250>)
 8105052:	4293      	cmp	r3, r2
 8105054:	d027      	beq.n	81050a6 <HAL_DMA_Abort+0x20e>
 8105056:	687b      	ldr	r3, [r7, #4]
 8105058:	681b      	ldr	r3, [r3, #0]
 810505a:	4a24      	ldr	r2, [pc, #144]	; (81050ec <HAL_DMA_Abort+0x254>)
 810505c:	4293      	cmp	r3, r2
 810505e:	d022      	beq.n	81050a6 <HAL_DMA_Abort+0x20e>
 8105060:	687b      	ldr	r3, [r7, #4]
 8105062:	681b      	ldr	r3, [r3, #0]
 8105064:	4a22      	ldr	r2, [pc, #136]	; (81050f0 <HAL_DMA_Abort+0x258>)
 8105066:	4293      	cmp	r3, r2
 8105068:	d01d      	beq.n	81050a6 <HAL_DMA_Abort+0x20e>
 810506a:	687b      	ldr	r3, [r7, #4]
 810506c:	681b      	ldr	r3, [r3, #0]
 810506e:	4a21      	ldr	r2, [pc, #132]	; (81050f4 <HAL_DMA_Abort+0x25c>)
 8105070:	4293      	cmp	r3, r2
 8105072:	d018      	beq.n	81050a6 <HAL_DMA_Abort+0x20e>
 8105074:	687b      	ldr	r3, [r7, #4]
 8105076:	681b      	ldr	r3, [r3, #0]
 8105078:	4a1f      	ldr	r2, [pc, #124]	; (81050f8 <HAL_DMA_Abort+0x260>)
 810507a:	4293      	cmp	r3, r2
 810507c:	d013      	beq.n	81050a6 <HAL_DMA_Abort+0x20e>
 810507e:	687b      	ldr	r3, [r7, #4]
 8105080:	681b      	ldr	r3, [r3, #0]
 8105082:	4a1e      	ldr	r2, [pc, #120]	; (81050fc <HAL_DMA_Abort+0x264>)
 8105084:	4293      	cmp	r3, r2
 8105086:	d00e      	beq.n	81050a6 <HAL_DMA_Abort+0x20e>
 8105088:	687b      	ldr	r3, [r7, #4]
 810508a:	681b      	ldr	r3, [r3, #0]
 810508c:	4a1c      	ldr	r2, [pc, #112]	; (8105100 <HAL_DMA_Abort+0x268>)
 810508e:	4293      	cmp	r3, r2
 8105090:	d009      	beq.n	81050a6 <HAL_DMA_Abort+0x20e>
 8105092:	687b      	ldr	r3, [r7, #4]
 8105094:	681b      	ldr	r3, [r3, #0]
 8105096:	4a1b      	ldr	r2, [pc, #108]	; (8105104 <HAL_DMA_Abort+0x26c>)
 8105098:	4293      	cmp	r3, r2
 810509a:	d004      	beq.n	81050a6 <HAL_DMA_Abort+0x20e>
 810509c:	687b      	ldr	r3, [r7, #4]
 810509e:	681b      	ldr	r3, [r3, #0]
 81050a0:	4a19      	ldr	r2, [pc, #100]	; (8105108 <HAL_DMA_Abort+0x270>)
 81050a2:	4293      	cmp	r3, r2
 81050a4:	d132      	bne.n	810510c <HAL_DMA_Abort+0x274>
 81050a6:	2301      	movs	r3, #1
 81050a8:	e031      	b.n	810510e <HAL_DMA_Abort+0x276>
 81050aa:	bf00      	nop
 81050ac:	40020010 	.word	0x40020010
 81050b0:	40020028 	.word	0x40020028
 81050b4:	40020040 	.word	0x40020040
 81050b8:	40020058 	.word	0x40020058
 81050bc:	40020070 	.word	0x40020070
 81050c0:	40020088 	.word	0x40020088
 81050c4:	400200a0 	.word	0x400200a0
 81050c8:	400200b8 	.word	0x400200b8
 81050cc:	40020410 	.word	0x40020410
 81050d0:	40020428 	.word	0x40020428
 81050d4:	40020440 	.word	0x40020440
 81050d8:	40020458 	.word	0x40020458
 81050dc:	40020470 	.word	0x40020470
 81050e0:	40020488 	.word	0x40020488
 81050e4:	400204a0 	.word	0x400204a0
 81050e8:	400204b8 	.word	0x400204b8
 81050ec:	58025408 	.word	0x58025408
 81050f0:	5802541c 	.word	0x5802541c
 81050f4:	58025430 	.word	0x58025430
 81050f8:	58025444 	.word	0x58025444
 81050fc:	58025458 	.word	0x58025458
 8105100:	5802546c 	.word	0x5802546c
 8105104:	58025480 	.word	0x58025480
 8105108:	58025494 	.word	0x58025494
 810510c:	2300      	movs	r3, #0
 810510e:	2b00      	cmp	r3, #0
 8105110:	d007      	beq.n	8105122 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8105112:	687b      	ldr	r3, [r7, #4]
 8105114:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8105116:	681a      	ldr	r2, [r3, #0]
 8105118:	687b      	ldr	r3, [r7, #4]
 810511a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 810511c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8105120:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8105122:	687b      	ldr	r3, [r7, #4]
 8105124:	681b      	ldr	r3, [r3, #0]
 8105126:	4a6d      	ldr	r2, [pc, #436]	; (81052dc <HAL_DMA_Abort+0x444>)
 8105128:	4293      	cmp	r3, r2
 810512a:	d04a      	beq.n	81051c2 <HAL_DMA_Abort+0x32a>
 810512c:	687b      	ldr	r3, [r7, #4]
 810512e:	681b      	ldr	r3, [r3, #0]
 8105130:	4a6b      	ldr	r2, [pc, #428]	; (81052e0 <HAL_DMA_Abort+0x448>)
 8105132:	4293      	cmp	r3, r2
 8105134:	d045      	beq.n	81051c2 <HAL_DMA_Abort+0x32a>
 8105136:	687b      	ldr	r3, [r7, #4]
 8105138:	681b      	ldr	r3, [r3, #0]
 810513a:	4a6a      	ldr	r2, [pc, #424]	; (81052e4 <HAL_DMA_Abort+0x44c>)
 810513c:	4293      	cmp	r3, r2
 810513e:	d040      	beq.n	81051c2 <HAL_DMA_Abort+0x32a>
 8105140:	687b      	ldr	r3, [r7, #4]
 8105142:	681b      	ldr	r3, [r3, #0]
 8105144:	4a68      	ldr	r2, [pc, #416]	; (81052e8 <HAL_DMA_Abort+0x450>)
 8105146:	4293      	cmp	r3, r2
 8105148:	d03b      	beq.n	81051c2 <HAL_DMA_Abort+0x32a>
 810514a:	687b      	ldr	r3, [r7, #4]
 810514c:	681b      	ldr	r3, [r3, #0]
 810514e:	4a67      	ldr	r2, [pc, #412]	; (81052ec <HAL_DMA_Abort+0x454>)
 8105150:	4293      	cmp	r3, r2
 8105152:	d036      	beq.n	81051c2 <HAL_DMA_Abort+0x32a>
 8105154:	687b      	ldr	r3, [r7, #4]
 8105156:	681b      	ldr	r3, [r3, #0]
 8105158:	4a65      	ldr	r2, [pc, #404]	; (81052f0 <HAL_DMA_Abort+0x458>)
 810515a:	4293      	cmp	r3, r2
 810515c:	d031      	beq.n	81051c2 <HAL_DMA_Abort+0x32a>
 810515e:	687b      	ldr	r3, [r7, #4]
 8105160:	681b      	ldr	r3, [r3, #0]
 8105162:	4a64      	ldr	r2, [pc, #400]	; (81052f4 <HAL_DMA_Abort+0x45c>)
 8105164:	4293      	cmp	r3, r2
 8105166:	d02c      	beq.n	81051c2 <HAL_DMA_Abort+0x32a>
 8105168:	687b      	ldr	r3, [r7, #4]
 810516a:	681b      	ldr	r3, [r3, #0]
 810516c:	4a62      	ldr	r2, [pc, #392]	; (81052f8 <HAL_DMA_Abort+0x460>)
 810516e:	4293      	cmp	r3, r2
 8105170:	d027      	beq.n	81051c2 <HAL_DMA_Abort+0x32a>
 8105172:	687b      	ldr	r3, [r7, #4]
 8105174:	681b      	ldr	r3, [r3, #0]
 8105176:	4a61      	ldr	r2, [pc, #388]	; (81052fc <HAL_DMA_Abort+0x464>)
 8105178:	4293      	cmp	r3, r2
 810517a:	d022      	beq.n	81051c2 <HAL_DMA_Abort+0x32a>
 810517c:	687b      	ldr	r3, [r7, #4]
 810517e:	681b      	ldr	r3, [r3, #0]
 8105180:	4a5f      	ldr	r2, [pc, #380]	; (8105300 <HAL_DMA_Abort+0x468>)
 8105182:	4293      	cmp	r3, r2
 8105184:	d01d      	beq.n	81051c2 <HAL_DMA_Abort+0x32a>
 8105186:	687b      	ldr	r3, [r7, #4]
 8105188:	681b      	ldr	r3, [r3, #0]
 810518a:	4a5e      	ldr	r2, [pc, #376]	; (8105304 <HAL_DMA_Abort+0x46c>)
 810518c:	4293      	cmp	r3, r2
 810518e:	d018      	beq.n	81051c2 <HAL_DMA_Abort+0x32a>
 8105190:	687b      	ldr	r3, [r7, #4]
 8105192:	681b      	ldr	r3, [r3, #0]
 8105194:	4a5c      	ldr	r2, [pc, #368]	; (8105308 <HAL_DMA_Abort+0x470>)
 8105196:	4293      	cmp	r3, r2
 8105198:	d013      	beq.n	81051c2 <HAL_DMA_Abort+0x32a>
 810519a:	687b      	ldr	r3, [r7, #4]
 810519c:	681b      	ldr	r3, [r3, #0]
 810519e:	4a5b      	ldr	r2, [pc, #364]	; (810530c <HAL_DMA_Abort+0x474>)
 81051a0:	4293      	cmp	r3, r2
 81051a2:	d00e      	beq.n	81051c2 <HAL_DMA_Abort+0x32a>
 81051a4:	687b      	ldr	r3, [r7, #4]
 81051a6:	681b      	ldr	r3, [r3, #0]
 81051a8:	4a59      	ldr	r2, [pc, #356]	; (8105310 <HAL_DMA_Abort+0x478>)
 81051aa:	4293      	cmp	r3, r2
 81051ac:	d009      	beq.n	81051c2 <HAL_DMA_Abort+0x32a>
 81051ae:	687b      	ldr	r3, [r7, #4]
 81051b0:	681b      	ldr	r3, [r3, #0]
 81051b2:	4a58      	ldr	r2, [pc, #352]	; (8105314 <HAL_DMA_Abort+0x47c>)
 81051b4:	4293      	cmp	r3, r2
 81051b6:	d004      	beq.n	81051c2 <HAL_DMA_Abort+0x32a>
 81051b8:	687b      	ldr	r3, [r7, #4]
 81051ba:	681b      	ldr	r3, [r3, #0]
 81051bc:	4a56      	ldr	r2, [pc, #344]	; (8105318 <HAL_DMA_Abort+0x480>)
 81051be:	4293      	cmp	r3, r2
 81051c0:	d108      	bne.n	81051d4 <HAL_DMA_Abort+0x33c>
 81051c2:	687b      	ldr	r3, [r7, #4]
 81051c4:	681b      	ldr	r3, [r3, #0]
 81051c6:	681a      	ldr	r2, [r3, #0]
 81051c8:	687b      	ldr	r3, [r7, #4]
 81051ca:	681b      	ldr	r3, [r3, #0]
 81051cc:	f022 0201 	bic.w	r2, r2, #1
 81051d0:	601a      	str	r2, [r3, #0]
 81051d2:	e007      	b.n	81051e4 <HAL_DMA_Abort+0x34c>
 81051d4:	687b      	ldr	r3, [r7, #4]
 81051d6:	681b      	ldr	r3, [r3, #0]
 81051d8:	681a      	ldr	r2, [r3, #0]
 81051da:	687b      	ldr	r3, [r7, #4]
 81051dc:	681b      	ldr	r3, [r3, #0]
 81051de:	f022 0201 	bic.w	r2, r2, #1
 81051e2:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 81051e4:	e013      	b.n	810520e <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 81051e6:	f7fd fc09 	bl	81029fc <HAL_GetTick>
 81051ea:	4602      	mov	r2, r0
 81051ec:	693b      	ldr	r3, [r7, #16]
 81051ee:	1ad3      	subs	r3, r2, r3
 81051f0:	2b05      	cmp	r3, #5
 81051f2:	d90c      	bls.n	810520e <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 81051f4:	687b      	ldr	r3, [r7, #4]
 81051f6:	2220      	movs	r2, #32
 81051f8:	655a      	str	r2, [r3, #84]	; 0x54

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 81051fa:	687b      	ldr	r3, [r7, #4]
 81051fc:	2200      	movs	r2, #0
 81051fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8105202:	687b      	ldr	r3, [r7, #4]
 8105204:	2203      	movs	r2, #3
 8105206:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 810520a:	2301      	movs	r3, #1
 810520c:	e12d      	b.n	810546a <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 810520e:	697b      	ldr	r3, [r7, #20]
 8105210:	681b      	ldr	r3, [r3, #0]
 8105212:	f003 0301 	and.w	r3, r3, #1
 8105216:	2b00      	cmp	r3, #0
 8105218:	d1e5      	bne.n	81051e6 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 810521a:	687b      	ldr	r3, [r7, #4]
 810521c:	681b      	ldr	r3, [r3, #0]
 810521e:	4a2f      	ldr	r2, [pc, #188]	; (81052dc <HAL_DMA_Abort+0x444>)
 8105220:	4293      	cmp	r3, r2
 8105222:	d04a      	beq.n	81052ba <HAL_DMA_Abort+0x422>
 8105224:	687b      	ldr	r3, [r7, #4]
 8105226:	681b      	ldr	r3, [r3, #0]
 8105228:	4a2d      	ldr	r2, [pc, #180]	; (81052e0 <HAL_DMA_Abort+0x448>)
 810522a:	4293      	cmp	r3, r2
 810522c:	d045      	beq.n	81052ba <HAL_DMA_Abort+0x422>
 810522e:	687b      	ldr	r3, [r7, #4]
 8105230:	681b      	ldr	r3, [r3, #0]
 8105232:	4a2c      	ldr	r2, [pc, #176]	; (81052e4 <HAL_DMA_Abort+0x44c>)
 8105234:	4293      	cmp	r3, r2
 8105236:	d040      	beq.n	81052ba <HAL_DMA_Abort+0x422>
 8105238:	687b      	ldr	r3, [r7, #4]
 810523a:	681b      	ldr	r3, [r3, #0]
 810523c:	4a2a      	ldr	r2, [pc, #168]	; (81052e8 <HAL_DMA_Abort+0x450>)
 810523e:	4293      	cmp	r3, r2
 8105240:	d03b      	beq.n	81052ba <HAL_DMA_Abort+0x422>
 8105242:	687b      	ldr	r3, [r7, #4]
 8105244:	681b      	ldr	r3, [r3, #0]
 8105246:	4a29      	ldr	r2, [pc, #164]	; (81052ec <HAL_DMA_Abort+0x454>)
 8105248:	4293      	cmp	r3, r2
 810524a:	d036      	beq.n	81052ba <HAL_DMA_Abort+0x422>
 810524c:	687b      	ldr	r3, [r7, #4]
 810524e:	681b      	ldr	r3, [r3, #0]
 8105250:	4a27      	ldr	r2, [pc, #156]	; (81052f0 <HAL_DMA_Abort+0x458>)
 8105252:	4293      	cmp	r3, r2
 8105254:	d031      	beq.n	81052ba <HAL_DMA_Abort+0x422>
 8105256:	687b      	ldr	r3, [r7, #4]
 8105258:	681b      	ldr	r3, [r3, #0]
 810525a:	4a26      	ldr	r2, [pc, #152]	; (81052f4 <HAL_DMA_Abort+0x45c>)
 810525c:	4293      	cmp	r3, r2
 810525e:	d02c      	beq.n	81052ba <HAL_DMA_Abort+0x422>
 8105260:	687b      	ldr	r3, [r7, #4]
 8105262:	681b      	ldr	r3, [r3, #0]
 8105264:	4a24      	ldr	r2, [pc, #144]	; (81052f8 <HAL_DMA_Abort+0x460>)
 8105266:	4293      	cmp	r3, r2
 8105268:	d027      	beq.n	81052ba <HAL_DMA_Abort+0x422>
 810526a:	687b      	ldr	r3, [r7, #4]
 810526c:	681b      	ldr	r3, [r3, #0]
 810526e:	4a23      	ldr	r2, [pc, #140]	; (81052fc <HAL_DMA_Abort+0x464>)
 8105270:	4293      	cmp	r3, r2
 8105272:	d022      	beq.n	81052ba <HAL_DMA_Abort+0x422>
 8105274:	687b      	ldr	r3, [r7, #4]
 8105276:	681b      	ldr	r3, [r3, #0]
 8105278:	4a21      	ldr	r2, [pc, #132]	; (8105300 <HAL_DMA_Abort+0x468>)
 810527a:	4293      	cmp	r3, r2
 810527c:	d01d      	beq.n	81052ba <HAL_DMA_Abort+0x422>
 810527e:	687b      	ldr	r3, [r7, #4]
 8105280:	681b      	ldr	r3, [r3, #0]
 8105282:	4a20      	ldr	r2, [pc, #128]	; (8105304 <HAL_DMA_Abort+0x46c>)
 8105284:	4293      	cmp	r3, r2
 8105286:	d018      	beq.n	81052ba <HAL_DMA_Abort+0x422>
 8105288:	687b      	ldr	r3, [r7, #4]
 810528a:	681b      	ldr	r3, [r3, #0]
 810528c:	4a1e      	ldr	r2, [pc, #120]	; (8105308 <HAL_DMA_Abort+0x470>)
 810528e:	4293      	cmp	r3, r2
 8105290:	d013      	beq.n	81052ba <HAL_DMA_Abort+0x422>
 8105292:	687b      	ldr	r3, [r7, #4]
 8105294:	681b      	ldr	r3, [r3, #0]
 8105296:	4a1d      	ldr	r2, [pc, #116]	; (810530c <HAL_DMA_Abort+0x474>)
 8105298:	4293      	cmp	r3, r2
 810529a:	d00e      	beq.n	81052ba <HAL_DMA_Abort+0x422>
 810529c:	687b      	ldr	r3, [r7, #4]
 810529e:	681b      	ldr	r3, [r3, #0]
 81052a0:	4a1b      	ldr	r2, [pc, #108]	; (8105310 <HAL_DMA_Abort+0x478>)
 81052a2:	4293      	cmp	r3, r2
 81052a4:	d009      	beq.n	81052ba <HAL_DMA_Abort+0x422>
 81052a6:	687b      	ldr	r3, [r7, #4]
 81052a8:	681b      	ldr	r3, [r3, #0]
 81052aa:	4a1a      	ldr	r2, [pc, #104]	; (8105314 <HAL_DMA_Abort+0x47c>)
 81052ac:	4293      	cmp	r3, r2
 81052ae:	d004      	beq.n	81052ba <HAL_DMA_Abort+0x422>
 81052b0:	687b      	ldr	r3, [r7, #4]
 81052b2:	681b      	ldr	r3, [r3, #0]
 81052b4:	4a18      	ldr	r2, [pc, #96]	; (8105318 <HAL_DMA_Abort+0x480>)
 81052b6:	4293      	cmp	r3, r2
 81052b8:	d101      	bne.n	81052be <HAL_DMA_Abort+0x426>
 81052ba:	2301      	movs	r3, #1
 81052bc:	e000      	b.n	81052c0 <HAL_DMA_Abort+0x428>
 81052be:	2300      	movs	r3, #0
 81052c0:	2b00      	cmp	r3, #0
 81052c2:	d02b      	beq.n	810531c <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 81052c4:	687b      	ldr	r3, [r7, #4]
 81052c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81052c8:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 81052ca:	687b      	ldr	r3, [r7, #4]
 81052cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81052ce:	f003 031f 	and.w	r3, r3, #31
 81052d2:	223f      	movs	r2, #63	; 0x3f
 81052d4:	409a      	lsls	r2, r3
 81052d6:	68bb      	ldr	r3, [r7, #8]
 81052d8:	609a      	str	r2, [r3, #8]
 81052da:	e02a      	b.n	8105332 <HAL_DMA_Abort+0x49a>
 81052dc:	40020010 	.word	0x40020010
 81052e0:	40020028 	.word	0x40020028
 81052e4:	40020040 	.word	0x40020040
 81052e8:	40020058 	.word	0x40020058
 81052ec:	40020070 	.word	0x40020070
 81052f0:	40020088 	.word	0x40020088
 81052f4:	400200a0 	.word	0x400200a0
 81052f8:	400200b8 	.word	0x400200b8
 81052fc:	40020410 	.word	0x40020410
 8105300:	40020428 	.word	0x40020428
 8105304:	40020440 	.word	0x40020440
 8105308:	40020458 	.word	0x40020458
 810530c:	40020470 	.word	0x40020470
 8105310:	40020488 	.word	0x40020488
 8105314:	400204a0 	.word	0x400204a0
 8105318:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 810531c:	687b      	ldr	r3, [r7, #4]
 810531e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8105320:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8105322:	687b      	ldr	r3, [r7, #4]
 8105324:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8105326:	f003 031f 	and.w	r3, r3, #31
 810532a:	2201      	movs	r2, #1
 810532c:	409a      	lsls	r2, r3
 810532e:	68fb      	ldr	r3, [r7, #12]
 8105330:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8105332:	687b      	ldr	r3, [r7, #4]
 8105334:	681b      	ldr	r3, [r3, #0]
 8105336:	4a4f      	ldr	r2, [pc, #316]	; (8105474 <HAL_DMA_Abort+0x5dc>)
 8105338:	4293      	cmp	r3, r2
 810533a:	d072      	beq.n	8105422 <HAL_DMA_Abort+0x58a>
 810533c:	687b      	ldr	r3, [r7, #4]
 810533e:	681b      	ldr	r3, [r3, #0]
 8105340:	4a4d      	ldr	r2, [pc, #308]	; (8105478 <HAL_DMA_Abort+0x5e0>)
 8105342:	4293      	cmp	r3, r2
 8105344:	d06d      	beq.n	8105422 <HAL_DMA_Abort+0x58a>
 8105346:	687b      	ldr	r3, [r7, #4]
 8105348:	681b      	ldr	r3, [r3, #0]
 810534a:	4a4c      	ldr	r2, [pc, #304]	; (810547c <HAL_DMA_Abort+0x5e4>)
 810534c:	4293      	cmp	r3, r2
 810534e:	d068      	beq.n	8105422 <HAL_DMA_Abort+0x58a>
 8105350:	687b      	ldr	r3, [r7, #4]
 8105352:	681b      	ldr	r3, [r3, #0]
 8105354:	4a4a      	ldr	r2, [pc, #296]	; (8105480 <HAL_DMA_Abort+0x5e8>)
 8105356:	4293      	cmp	r3, r2
 8105358:	d063      	beq.n	8105422 <HAL_DMA_Abort+0x58a>
 810535a:	687b      	ldr	r3, [r7, #4]
 810535c:	681b      	ldr	r3, [r3, #0]
 810535e:	4a49      	ldr	r2, [pc, #292]	; (8105484 <HAL_DMA_Abort+0x5ec>)
 8105360:	4293      	cmp	r3, r2
 8105362:	d05e      	beq.n	8105422 <HAL_DMA_Abort+0x58a>
 8105364:	687b      	ldr	r3, [r7, #4]
 8105366:	681b      	ldr	r3, [r3, #0]
 8105368:	4a47      	ldr	r2, [pc, #284]	; (8105488 <HAL_DMA_Abort+0x5f0>)
 810536a:	4293      	cmp	r3, r2
 810536c:	d059      	beq.n	8105422 <HAL_DMA_Abort+0x58a>
 810536e:	687b      	ldr	r3, [r7, #4]
 8105370:	681b      	ldr	r3, [r3, #0]
 8105372:	4a46      	ldr	r2, [pc, #280]	; (810548c <HAL_DMA_Abort+0x5f4>)
 8105374:	4293      	cmp	r3, r2
 8105376:	d054      	beq.n	8105422 <HAL_DMA_Abort+0x58a>
 8105378:	687b      	ldr	r3, [r7, #4]
 810537a:	681b      	ldr	r3, [r3, #0]
 810537c:	4a44      	ldr	r2, [pc, #272]	; (8105490 <HAL_DMA_Abort+0x5f8>)
 810537e:	4293      	cmp	r3, r2
 8105380:	d04f      	beq.n	8105422 <HAL_DMA_Abort+0x58a>
 8105382:	687b      	ldr	r3, [r7, #4]
 8105384:	681b      	ldr	r3, [r3, #0]
 8105386:	4a43      	ldr	r2, [pc, #268]	; (8105494 <HAL_DMA_Abort+0x5fc>)
 8105388:	4293      	cmp	r3, r2
 810538a:	d04a      	beq.n	8105422 <HAL_DMA_Abort+0x58a>
 810538c:	687b      	ldr	r3, [r7, #4]
 810538e:	681b      	ldr	r3, [r3, #0]
 8105390:	4a41      	ldr	r2, [pc, #260]	; (8105498 <HAL_DMA_Abort+0x600>)
 8105392:	4293      	cmp	r3, r2
 8105394:	d045      	beq.n	8105422 <HAL_DMA_Abort+0x58a>
 8105396:	687b      	ldr	r3, [r7, #4]
 8105398:	681b      	ldr	r3, [r3, #0]
 810539a:	4a40      	ldr	r2, [pc, #256]	; (810549c <HAL_DMA_Abort+0x604>)
 810539c:	4293      	cmp	r3, r2
 810539e:	d040      	beq.n	8105422 <HAL_DMA_Abort+0x58a>
 81053a0:	687b      	ldr	r3, [r7, #4]
 81053a2:	681b      	ldr	r3, [r3, #0]
 81053a4:	4a3e      	ldr	r2, [pc, #248]	; (81054a0 <HAL_DMA_Abort+0x608>)
 81053a6:	4293      	cmp	r3, r2
 81053a8:	d03b      	beq.n	8105422 <HAL_DMA_Abort+0x58a>
 81053aa:	687b      	ldr	r3, [r7, #4]
 81053ac:	681b      	ldr	r3, [r3, #0]
 81053ae:	4a3d      	ldr	r2, [pc, #244]	; (81054a4 <HAL_DMA_Abort+0x60c>)
 81053b0:	4293      	cmp	r3, r2
 81053b2:	d036      	beq.n	8105422 <HAL_DMA_Abort+0x58a>
 81053b4:	687b      	ldr	r3, [r7, #4]
 81053b6:	681b      	ldr	r3, [r3, #0]
 81053b8:	4a3b      	ldr	r2, [pc, #236]	; (81054a8 <HAL_DMA_Abort+0x610>)
 81053ba:	4293      	cmp	r3, r2
 81053bc:	d031      	beq.n	8105422 <HAL_DMA_Abort+0x58a>
 81053be:	687b      	ldr	r3, [r7, #4]
 81053c0:	681b      	ldr	r3, [r3, #0]
 81053c2:	4a3a      	ldr	r2, [pc, #232]	; (81054ac <HAL_DMA_Abort+0x614>)
 81053c4:	4293      	cmp	r3, r2
 81053c6:	d02c      	beq.n	8105422 <HAL_DMA_Abort+0x58a>
 81053c8:	687b      	ldr	r3, [r7, #4]
 81053ca:	681b      	ldr	r3, [r3, #0]
 81053cc:	4a38      	ldr	r2, [pc, #224]	; (81054b0 <HAL_DMA_Abort+0x618>)
 81053ce:	4293      	cmp	r3, r2
 81053d0:	d027      	beq.n	8105422 <HAL_DMA_Abort+0x58a>
 81053d2:	687b      	ldr	r3, [r7, #4]
 81053d4:	681b      	ldr	r3, [r3, #0]
 81053d6:	4a37      	ldr	r2, [pc, #220]	; (81054b4 <HAL_DMA_Abort+0x61c>)
 81053d8:	4293      	cmp	r3, r2
 81053da:	d022      	beq.n	8105422 <HAL_DMA_Abort+0x58a>
 81053dc:	687b      	ldr	r3, [r7, #4]
 81053de:	681b      	ldr	r3, [r3, #0]
 81053e0:	4a35      	ldr	r2, [pc, #212]	; (81054b8 <HAL_DMA_Abort+0x620>)
 81053e2:	4293      	cmp	r3, r2
 81053e4:	d01d      	beq.n	8105422 <HAL_DMA_Abort+0x58a>
 81053e6:	687b      	ldr	r3, [r7, #4]
 81053e8:	681b      	ldr	r3, [r3, #0]
 81053ea:	4a34      	ldr	r2, [pc, #208]	; (81054bc <HAL_DMA_Abort+0x624>)
 81053ec:	4293      	cmp	r3, r2
 81053ee:	d018      	beq.n	8105422 <HAL_DMA_Abort+0x58a>
 81053f0:	687b      	ldr	r3, [r7, #4]
 81053f2:	681b      	ldr	r3, [r3, #0]
 81053f4:	4a32      	ldr	r2, [pc, #200]	; (81054c0 <HAL_DMA_Abort+0x628>)
 81053f6:	4293      	cmp	r3, r2
 81053f8:	d013      	beq.n	8105422 <HAL_DMA_Abort+0x58a>
 81053fa:	687b      	ldr	r3, [r7, #4]
 81053fc:	681b      	ldr	r3, [r3, #0]
 81053fe:	4a31      	ldr	r2, [pc, #196]	; (81054c4 <HAL_DMA_Abort+0x62c>)
 8105400:	4293      	cmp	r3, r2
 8105402:	d00e      	beq.n	8105422 <HAL_DMA_Abort+0x58a>
 8105404:	687b      	ldr	r3, [r7, #4]
 8105406:	681b      	ldr	r3, [r3, #0]
 8105408:	4a2f      	ldr	r2, [pc, #188]	; (81054c8 <HAL_DMA_Abort+0x630>)
 810540a:	4293      	cmp	r3, r2
 810540c:	d009      	beq.n	8105422 <HAL_DMA_Abort+0x58a>
 810540e:	687b      	ldr	r3, [r7, #4]
 8105410:	681b      	ldr	r3, [r3, #0]
 8105412:	4a2e      	ldr	r2, [pc, #184]	; (81054cc <HAL_DMA_Abort+0x634>)
 8105414:	4293      	cmp	r3, r2
 8105416:	d004      	beq.n	8105422 <HAL_DMA_Abort+0x58a>
 8105418:	687b      	ldr	r3, [r7, #4]
 810541a:	681b      	ldr	r3, [r3, #0]
 810541c:	4a2c      	ldr	r2, [pc, #176]	; (81054d0 <HAL_DMA_Abort+0x638>)
 810541e:	4293      	cmp	r3, r2
 8105420:	d101      	bne.n	8105426 <HAL_DMA_Abort+0x58e>
 8105422:	2301      	movs	r3, #1
 8105424:	e000      	b.n	8105428 <HAL_DMA_Abort+0x590>
 8105426:	2300      	movs	r3, #0
 8105428:	2b00      	cmp	r3, #0
 810542a:	d015      	beq.n	8105458 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 810542c:	687b      	ldr	r3, [r7, #4]
 810542e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8105430:	687a      	ldr	r2, [r7, #4]
 8105432:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8105434:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8105436:	687b      	ldr	r3, [r7, #4]
 8105438:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 810543a:	2b00      	cmp	r3, #0
 810543c:	d00c      	beq.n	8105458 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 810543e:	687b      	ldr	r3, [r7, #4]
 8105440:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8105442:	681a      	ldr	r2, [r3, #0]
 8105444:	687b      	ldr	r3, [r7, #4]
 8105446:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8105448:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 810544c:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 810544e:	687b      	ldr	r3, [r7, #4]
 8105450:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8105452:	687a      	ldr	r2, [r7, #4]
 8105454:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8105456:	605a      	str	r2, [r3, #4]
      }
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8105458:	687b      	ldr	r3, [r7, #4]
 810545a:	2200      	movs	r2, #0
 810545c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8105460:	687b      	ldr	r3, [r7, #4]
 8105462:	2201      	movs	r2, #1
 8105464:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }

  return HAL_OK;
 8105468:	2300      	movs	r3, #0
}
 810546a:	4618      	mov	r0, r3
 810546c:	3718      	adds	r7, #24
 810546e:	46bd      	mov	sp, r7
 8105470:	bd80      	pop	{r7, pc}
 8105472:	bf00      	nop
 8105474:	40020010 	.word	0x40020010
 8105478:	40020028 	.word	0x40020028
 810547c:	40020040 	.word	0x40020040
 8105480:	40020058 	.word	0x40020058
 8105484:	40020070 	.word	0x40020070
 8105488:	40020088 	.word	0x40020088
 810548c:	400200a0 	.word	0x400200a0
 8105490:	400200b8 	.word	0x400200b8
 8105494:	40020410 	.word	0x40020410
 8105498:	40020428 	.word	0x40020428
 810549c:	40020440 	.word	0x40020440
 81054a0:	40020458 	.word	0x40020458
 81054a4:	40020470 	.word	0x40020470
 81054a8:	40020488 	.word	0x40020488
 81054ac:	400204a0 	.word	0x400204a0
 81054b0:	400204b8 	.word	0x400204b8
 81054b4:	58025408 	.word	0x58025408
 81054b8:	5802541c 	.word	0x5802541c
 81054bc:	58025430 	.word	0x58025430
 81054c0:	58025444 	.word	0x58025444
 81054c4:	58025458 	.word	0x58025458
 81054c8:	5802546c 	.word	0x5802546c
 81054cc:	58025480 	.word	0x58025480
 81054d0:	58025494 	.word	0x58025494

081054d4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 81054d4:	b580      	push	{r7, lr}
 81054d6:	b084      	sub	sp, #16
 81054d8:	af00      	add	r7, sp, #0
 81054da:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 81054dc:	687b      	ldr	r3, [r7, #4]
 81054de:	2b00      	cmp	r3, #0
 81054e0:	d101      	bne.n	81054e6 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 81054e2:	2301      	movs	r3, #1
 81054e4:	e205      	b.n	81058f2 <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 81054e6:	687b      	ldr	r3, [r7, #4]
 81054e8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 81054ec:	b2db      	uxtb	r3, r3
 81054ee:	2b02      	cmp	r3, #2
 81054f0:	d004      	beq.n	81054fc <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 81054f2:	687b      	ldr	r3, [r7, #4]
 81054f4:	2280      	movs	r2, #128	; 0x80
 81054f6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 81054f8:	2301      	movs	r3, #1
 81054fa:	e1fa      	b.n	81058f2 <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 81054fc:	687b      	ldr	r3, [r7, #4]
 81054fe:	681b      	ldr	r3, [r3, #0]
 8105500:	4a8c      	ldr	r2, [pc, #560]	; (8105734 <HAL_DMA_Abort_IT+0x260>)
 8105502:	4293      	cmp	r3, r2
 8105504:	d04a      	beq.n	810559c <HAL_DMA_Abort_IT+0xc8>
 8105506:	687b      	ldr	r3, [r7, #4]
 8105508:	681b      	ldr	r3, [r3, #0]
 810550a:	4a8b      	ldr	r2, [pc, #556]	; (8105738 <HAL_DMA_Abort_IT+0x264>)
 810550c:	4293      	cmp	r3, r2
 810550e:	d045      	beq.n	810559c <HAL_DMA_Abort_IT+0xc8>
 8105510:	687b      	ldr	r3, [r7, #4]
 8105512:	681b      	ldr	r3, [r3, #0]
 8105514:	4a89      	ldr	r2, [pc, #548]	; (810573c <HAL_DMA_Abort_IT+0x268>)
 8105516:	4293      	cmp	r3, r2
 8105518:	d040      	beq.n	810559c <HAL_DMA_Abort_IT+0xc8>
 810551a:	687b      	ldr	r3, [r7, #4]
 810551c:	681b      	ldr	r3, [r3, #0]
 810551e:	4a88      	ldr	r2, [pc, #544]	; (8105740 <HAL_DMA_Abort_IT+0x26c>)
 8105520:	4293      	cmp	r3, r2
 8105522:	d03b      	beq.n	810559c <HAL_DMA_Abort_IT+0xc8>
 8105524:	687b      	ldr	r3, [r7, #4]
 8105526:	681b      	ldr	r3, [r3, #0]
 8105528:	4a86      	ldr	r2, [pc, #536]	; (8105744 <HAL_DMA_Abort_IT+0x270>)
 810552a:	4293      	cmp	r3, r2
 810552c:	d036      	beq.n	810559c <HAL_DMA_Abort_IT+0xc8>
 810552e:	687b      	ldr	r3, [r7, #4]
 8105530:	681b      	ldr	r3, [r3, #0]
 8105532:	4a85      	ldr	r2, [pc, #532]	; (8105748 <HAL_DMA_Abort_IT+0x274>)
 8105534:	4293      	cmp	r3, r2
 8105536:	d031      	beq.n	810559c <HAL_DMA_Abort_IT+0xc8>
 8105538:	687b      	ldr	r3, [r7, #4]
 810553a:	681b      	ldr	r3, [r3, #0]
 810553c:	4a83      	ldr	r2, [pc, #524]	; (810574c <HAL_DMA_Abort_IT+0x278>)
 810553e:	4293      	cmp	r3, r2
 8105540:	d02c      	beq.n	810559c <HAL_DMA_Abort_IT+0xc8>
 8105542:	687b      	ldr	r3, [r7, #4]
 8105544:	681b      	ldr	r3, [r3, #0]
 8105546:	4a82      	ldr	r2, [pc, #520]	; (8105750 <HAL_DMA_Abort_IT+0x27c>)
 8105548:	4293      	cmp	r3, r2
 810554a:	d027      	beq.n	810559c <HAL_DMA_Abort_IT+0xc8>
 810554c:	687b      	ldr	r3, [r7, #4]
 810554e:	681b      	ldr	r3, [r3, #0]
 8105550:	4a80      	ldr	r2, [pc, #512]	; (8105754 <HAL_DMA_Abort_IT+0x280>)
 8105552:	4293      	cmp	r3, r2
 8105554:	d022      	beq.n	810559c <HAL_DMA_Abort_IT+0xc8>
 8105556:	687b      	ldr	r3, [r7, #4]
 8105558:	681b      	ldr	r3, [r3, #0]
 810555a:	4a7f      	ldr	r2, [pc, #508]	; (8105758 <HAL_DMA_Abort_IT+0x284>)
 810555c:	4293      	cmp	r3, r2
 810555e:	d01d      	beq.n	810559c <HAL_DMA_Abort_IT+0xc8>
 8105560:	687b      	ldr	r3, [r7, #4]
 8105562:	681b      	ldr	r3, [r3, #0]
 8105564:	4a7d      	ldr	r2, [pc, #500]	; (810575c <HAL_DMA_Abort_IT+0x288>)
 8105566:	4293      	cmp	r3, r2
 8105568:	d018      	beq.n	810559c <HAL_DMA_Abort_IT+0xc8>
 810556a:	687b      	ldr	r3, [r7, #4]
 810556c:	681b      	ldr	r3, [r3, #0]
 810556e:	4a7c      	ldr	r2, [pc, #496]	; (8105760 <HAL_DMA_Abort_IT+0x28c>)
 8105570:	4293      	cmp	r3, r2
 8105572:	d013      	beq.n	810559c <HAL_DMA_Abort_IT+0xc8>
 8105574:	687b      	ldr	r3, [r7, #4]
 8105576:	681b      	ldr	r3, [r3, #0]
 8105578:	4a7a      	ldr	r2, [pc, #488]	; (8105764 <HAL_DMA_Abort_IT+0x290>)
 810557a:	4293      	cmp	r3, r2
 810557c:	d00e      	beq.n	810559c <HAL_DMA_Abort_IT+0xc8>
 810557e:	687b      	ldr	r3, [r7, #4]
 8105580:	681b      	ldr	r3, [r3, #0]
 8105582:	4a79      	ldr	r2, [pc, #484]	; (8105768 <HAL_DMA_Abort_IT+0x294>)
 8105584:	4293      	cmp	r3, r2
 8105586:	d009      	beq.n	810559c <HAL_DMA_Abort_IT+0xc8>
 8105588:	687b      	ldr	r3, [r7, #4]
 810558a:	681b      	ldr	r3, [r3, #0]
 810558c:	4a77      	ldr	r2, [pc, #476]	; (810576c <HAL_DMA_Abort_IT+0x298>)
 810558e:	4293      	cmp	r3, r2
 8105590:	d004      	beq.n	810559c <HAL_DMA_Abort_IT+0xc8>
 8105592:	687b      	ldr	r3, [r7, #4]
 8105594:	681b      	ldr	r3, [r3, #0]
 8105596:	4a76      	ldr	r2, [pc, #472]	; (8105770 <HAL_DMA_Abort_IT+0x29c>)
 8105598:	4293      	cmp	r3, r2
 810559a:	d101      	bne.n	81055a0 <HAL_DMA_Abort_IT+0xcc>
 810559c:	2301      	movs	r3, #1
 810559e:	e000      	b.n	81055a2 <HAL_DMA_Abort_IT+0xce>
 81055a0:	2300      	movs	r3, #0
 81055a2:	2b00      	cmp	r3, #0
 81055a4:	d065      	beq.n	8105672 <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 81055a6:	687b      	ldr	r3, [r7, #4]
 81055a8:	2204      	movs	r2, #4
 81055aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 81055ae:	687b      	ldr	r3, [r7, #4]
 81055b0:	681b      	ldr	r3, [r3, #0]
 81055b2:	4a60      	ldr	r2, [pc, #384]	; (8105734 <HAL_DMA_Abort_IT+0x260>)
 81055b4:	4293      	cmp	r3, r2
 81055b6:	d04a      	beq.n	810564e <HAL_DMA_Abort_IT+0x17a>
 81055b8:	687b      	ldr	r3, [r7, #4]
 81055ba:	681b      	ldr	r3, [r3, #0]
 81055bc:	4a5e      	ldr	r2, [pc, #376]	; (8105738 <HAL_DMA_Abort_IT+0x264>)
 81055be:	4293      	cmp	r3, r2
 81055c0:	d045      	beq.n	810564e <HAL_DMA_Abort_IT+0x17a>
 81055c2:	687b      	ldr	r3, [r7, #4]
 81055c4:	681b      	ldr	r3, [r3, #0]
 81055c6:	4a5d      	ldr	r2, [pc, #372]	; (810573c <HAL_DMA_Abort_IT+0x268>)
 81055c8:	4293      	cmp	r3, r2
 81055ca:	d040      	beq.n	810564e <HAL_DMA_Abort_IT+0x17a>
 81055cc:	687b      	ldr	r3, [r7, #4]
 81055ce:	681b      	ldr	r3, [r3, #0]
 81055d0:	4a5b      	ldr	r2, [pc, #364]	; (8105740 <HAL_DMA_Abort_IT+0x26c>)
 81055d2:	4293      	cmp	r3, r2
 81055d4:	d03b      	beq.n	810564e <HAL_DMA_Abort_IT+0x17a>
 81055d6:	687b      	ldr	r3, [r7, #4]
 81055d8:	681b      	ldr	r3, [r3, #0]
 81055da:	4a5a      	ldr	r2, [pc, #360]	; (8105744 <HAL_DMA_Abort_IT+0x270>)
 81055dc:	4293      	cmp	r3, r2
 81055de:	d036      	beq.n	810564e <HAL_DMA_Abort_IT+0x17a>
 81055e0:	687b      	ldr	r3, [r7, #4]
 81055e2:	681b      	ldr	r3, [r3, #0]
 81055e4:	4a58      	ldr	r2, [pc, #352]	; (8105748 <HAL_DMA_Abort_IT+0x274>)
 81055e6:	4293      	cmp	r3, r2
 81055e8:	d031      	beq.n	810564e <HAL_DMA_Abort_IT+0x17a>
 81055ea:	687b      	ldr	r3, [r7, #4]
 81055ec:	681b      	ldr	r3, [r3, #0]
 81055ee:	4a57      	ldr	r2, [pc, #348]	; (810574c <HAL_DMA_Abort_IT+0x278>)
 81055f0:	4293      	cmp	r3, r2
 81055f2:	d02c      	beq.n	810564e <HAL_DMA_Abort_IT+0x17a>
 81055f4:	687b      	ldr	r3, [r7, #4]
 81055f6:	681b      	ldr	r3, [r3, #0]
 81055f8:	4a55      	ldr	r2, [pc, #340]	; (8105750 <HAL_DMA_Abort_IT+0x27c>)
 81055fa:	4293      	cmp	r3, r2
 81055fc:	d027      	beq.n	810564e <HAL_DMA_Abort_IT+0x17a>
 81055fe:	687b      	ldr	r3, [r7, #4]
 8105600:	681b      	ldr	r3, [r3, #0]
 8105602:	4a54      	ldr	r2, [pc, #336]	; (8105754 <HAL_DMA_Abort_IT+0x280>)
 8105604:	4293      	cmp	r3, r2
 8105606:	d022      	beq.n	810564e <HAL_DMA_Abort_IT+0x17a>
 8105608:	687b      	ldr	r3, [r7, #4]
 810560a:	681b      	ldr	r3, [r3, #0]
 810560c:	4a52      	ldr	r2, [pc, #328]	; (8105758 <HAL_DMA_Abort_IT+0x284>)
 810560e:	4293      	cmp	r3, r2
 8105610:	d01d      	beq.n	810564e <HAL_DMA_Abort_IT+0x17a>
 8105612:	687b      	ldr	r3, [r7, #4]
 8105614:	681b      	ldr	r3, [r3, #0]
 8105616:	4a51      	ldr	r2, [pc, #324]	; (810575c <HAL_DMA_Abort_IT+0x288>)
 8105618:	4293      	cmp	r3, r2
 810561a:	d018      	beq.n	810564e <HAL_DMA_Abort_IT+0x17a>
 810561c:	687b      	ldr	r3, [r7, #4]
 810561e:	681b      	ldr	r3, [r3, #0]
 8105620:	4a4f      	ldr	r2, [pc, #316]	; (8105760 <HAL_DMA_Abort_IT+0x28c>)
 8105622:	4293      	cmp	r3, r2
 8105624:	d013      	beq.n	810564e <HAL_DMA_Abort_IT+0x17a>
 8105626:	687b      	ldr	r3, [r7, #4]
 8105628:	681b      	ldr	r3, [r3, #0]
 810562a:	4a4e      	ldr	r2, [pc, #312]	; (8105764 <HAL_DMA_Abort_IT+0x290>)
 810562c:	4293      	cmp	r3, r2
 810562e:	d00e      	beq.n	810564e <HAL_DMA_Abort_IT+0x17a>
 8105630:	687b      	ldr	r3, [r7, #4]
 8105632:	681b      	ldr	r3, [r3, #0]
 8105634:	4a4c      	ldr	r2, [pc, #304]	; (8105768 <HAL_DMA_Abort_IT+0x294>)
 8105636:	4293      	cmp	r3, r2
 8105638:	d009      	beq.n	810564e <HAL_DMA_Abort_IT+0x17a>
 810563a:	687b      	ldr	r3, [r7, #4]
 810563c:	681b      	ldr	r3, [r3, #0]
 810563e:	4a4b      	ldr	r2, [pc, #300]	; (810576c <HAL_DMA_Abort_IT+0x298>)
 8105640:	4293      	cmp	r3, r2
 8105642:	d004      	beq.n	810564e <HAL_DMA_Abort_IT+0x17a>
 8105644:	687b      	ldr	r3, [r7, #4]
 8105646:	681b      	ldr	r3, [r3, #0]
 8105648:	4a49      	ldr	r2, [pc, #292]	; (8105770 <HAL_DMA_Abort_IT+0x29c>)
 810564a:	4293      	cmp	r3, r2
 810564c:	d108      	bne.n	8105660 <HAL_DMA_Abort_IT+0x18c>
 810564e:	687b      	ldr	r3, [r7, #4]
 8105650:	681b      	ldr	r3, [r3, #0]
 8105652:	681a      	ldr	r2, [r3, #0]
 8105654:	687b      	ldr	r3, [r7, #4]
 8105656:	681b      	ldr	r3, [r3, #0]
 8105658:	f022 0201 	bic.w	r2, r2, #1
 810565c:	601a      	str	r2, [r3, #0]
 810565e:	e147      	b.n	81058f0 <HAL_DMA_Abort_IT+0x41c>
 8105660:	687b      	ldr	r3, [r7, #4]
 8105662:	681b      	ldr	r3, [r3, #0]
 8105664:	681a      	ldr	r2, [r3, #0]
 8105666:	687b      	ldr	r3, [r7, #4]
 8105668:	681b      	ldr	r3, [r3, #0]
 810566a:	f022 0201 	bic.w	r2, r2, #1
 810566e:	601a      	str	r2, [r3, #0]
 8105670:	e13e      	b.n	81058f0 <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8105672:	687b      	ldr	r3, [r7, #4]
 8105674:	681b      	ldr	r3, [r3, #0]
 8105676:	681a      	ldr	r2, [r3, #0]
 8105678:	687b      	ldr	r3, [r7, #4]
 810567a:	681b      	ldr	r3, [r3, #0]
 810567c:	f022 020e 	bic.w	r2, r2, #14
 8105680:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8105682:	687b      	ldr	r3, [r7, #4]
 8105684:	681b      	ldr	r3, [r3, #0]
 8105686:	4a2b      	ldr	r2, [pc, #172]	; (8105734 <HAL_DMA_Abort_IT+0x260>)
 8105688:	4293      	cmp	r3, r2
 810568a:	d04a      	beq.n	8105722 <HAL_DMA_Abort_IT+0x24e>
 810568c:	687b      	ldr	r3, [r7, #4]
 810568e:	681b      	ldr	r3, [r3, #0]
 8105690:	4a29      	ldr	r2, [pc, #164]	; (8105738 <HAL_DMA_Abort_IT+0x264>)
 8105692:	4293      	cmp	r3, r2
 8105694:	d045      	beq.n	8105722 <HAL_DMA_Abort_IT+0x24e>
 8105696:	687b      	ldr	r3, [r7, #4]
 8105698:	681b      	ldr	r3, [r3, #0]
 810569a:	4a28      	ldr	r2, [pc, #160]	; (810573c <HAL_DMA_Abort_IT+0x268>)
 810569c:	4293      	cmp	r3, r2
 810569e:	d040      	beq.n	8105722 <HAL_DMA_Abort_IT+0x24e>
 81056a0:	687b      	ldr	r3, [r7, #4]
 81056a2:	681b      	ldr	r3, [r3, #0]
 81056a4:	4a26      	ldr	r2, [pc, #152]	; (8105740 <HAL_DMA_Abort_IT+0x26c>)
 81056a6:	4293      	cmp	r3, r2
 81056a8:	d03b      	beq.n	8105722 <HAL_DMA_Abort_IT+0x24e>
 81056aa:	687b      	ldr	r3, [r7, #4]
 81056ac:	681b      	ldr	r3, [r3, #0]
 81056ae:	4a25      	ldr	r2, [pc, #148]	; (8105744 <HAL_DMA_Abort_IT+0x270>)
 81056b0:	4293      	cmp	r3, r2
 81056b2:	d036      	beq.n	8105722 <HAL_DMA_Abort_IT+0x24e>
 81056b4:	687b      	ldr	r3, [r7, #4]
 81056b6:	681b      	ldr	r3, [r3, #0]
 81056b8:	4a23      	ldr	r2, [pc, #140]	; (8105748 <HAL_DMA_Abort_IT+0x274>)
 81056ba:	4293      	cmp	r3, r2
 81056bc:	d031      	beq.n	8105722 <HAL_DMA_Abort_IT+0x24e>
 81056be:	687b      	ldr	r3, [r7, #4]
 81056c0:	681b      	ldr	r3, [r3, #0]
 81056c2:	4a22      	ldr	r2, [pc, #136]	; (810574c <HAL_DMA_Abort_IT+0x278>)
 81056c4:	4293      	cmp	r3, r2
 81056c6:	d02c      	beq.n	8105722 <HAL_DMA_Abort_IT+0x24e>
 81056c8:	687b      	ldr	r3, [r7, #4]
 81056ca:	681b      	ldr	r3, [r3, #0]
 81056cc:	4a20      	ldr	r2, [pc, #128]	; (8105750 <HAL_DMA_Abort_IT+0x27c>)
 81056ce:	4293      	cmp	r3, r2
 81056d0:	d027      	beq.n	8105722 <HAL_DMA_Abort_IT+0x24e>
 81056d2:	687b      	ldr	r3, [r7, #4]
 81056d4:	681b      	ldr	r3, [r3, #0]
 81056d6:	4a1f      	ldr	r2, [pc, #124]	; (8105754 <HAL_DMA_Abort_IT+0x280>)
 81056d8:	4293      	cmp	r3, r2
 81056da:	d022      	beq.n	8105722 <HAL_DMA_Abort_IT+0x24e>
 81056dc:	687b      	ldr	r3, [r7, #4]
 81056de:	681b      	ldr	r3, [r3, #0]
 81056e0:	4a1d      	ldr	r2, [pc, #116]	; (8105758 <HAL_DMA_Abort_IT+0x284>)
 81056e2:	4293      	cmp	r3, r2
 81056e4:	d01d      	beq.n	8105722 <HAL_DMA_Abort_IT+0x24e>
 81056e6:	687b      	ldr	r3, [r7, #4]
 81056e8:	681b      	ldr	r3, [r3, #0]
 81056ea:	4a1c      	ldr	r2, [pc, #112]	; (810575c <HAL_DMA_Abort_IT+0x288>)
 81056ec:	4293      	cmp	r3, r2
 81056ee:	d018      	beq.n	8105722 <HAL_DMA_Abort_IT+0x24e>
 81056f0:	687b      	ldr	r3, [r7, #4]
 81056f2:	681b      	ldr	r3, [r3, #0]
 81056f4:	4a1a      	ldr	r2, [pc, #104]	; (8105760 <HAL_DMA_Abort_IT+0x28c>)
 81056f6:	4293      	cmp	r3, r2
 81056f8:	d013      	beq.n	8105722 <HAL_DMA_Abort_IT+0x24e>
 81056fa:	687b      	ldr	r3, [r7, #4]
 81056fc:	681b      	ldr	r3, [r3, #0]
 81056fe:	4a19      	ldr	r2, [pc, #100]	; (8105764 <HAL_DMA_Abort_IT+0x290>)
 8105700:	4293      	cmp	r3, r2
 8105702:	d00e      	beq.n	8105722 <HAL_DMA_Abort_IT+0x24e>
 8105704:	687b      	ldr	r3, [r7, #4]
 8105706:	681b      	ldr	r3, [r3, #0]
 8105708:	4a17      	ldr	r2, [pc, #92]	; (8105768 <HAL_DMA_Abort_IT+0x294>)
 810570a:	4293      	cmp	r3, r2
 810570c:	d009      	beq.n	8105722 <HAL_DMA_Abort_IT+0x24e>
 810570e:	687b      	ldr	r3, [r7, #4]
 8105710:	681b      	ldr	r3, [r3, #0]
 8105712:	4a16      	ldr	r2, [pc, #88]	; (810576c <HAL_DMA_Abort_IT+0x298>)
 8105714:	4293      	cmp	r3, r2
 8105716:	d004      	beq.n	8105722 <HAL_DMA_Abort_IT+0x24e>
 8105718:	687b      	ldr	r3, [r7, #4]
 810571a:	681b      	ldr	r3, [r3, #0]
 810571c:	4a14      	ldr	r2, [pc, #80]	; (8105770 <HAL_DMA_Abort_IT+0x29c>)
 810571e:	4293      	cmp	r3, r2
 8105720:	d128      	bne.n	8105774 <HAL_DMA_Abort_IT+0x2a0>
 8105722:	687b      	ldr	r3, [r7, #4]
 8105724:	681b      	ldr	r3, [r3, #0]
 8105726:	681a      	ldr	r2, [r3, #0]
 8105728:	687b      	ldr	r3, [r7, #4]
 810572a:	681b      	ldr	r3, [r3, #0]
 810572c:	f022 0201 	bic.w	r2, r2, #1
 8105730:	601a      	str	r2, [r3, #0]
 8105732:	e027      	b.n	8105784 <HAL_DMA_Abort_IT+0x2b0>
 8105734:	40020010 	.word	0x40020010
 8105738:	40020028 	.word	0x40020028
 810573c:	40020040 	.word	0x40020040
 8105740:	40020058 	.word	0x40020058
 8105744:	40020070 	.word	0x40020070
 8105748:	40020088 	.word	0x40020088
 810574c:	400200a0 	.word	0x400200a0
 8105750:	400200b8 	.word	0x400200b8
 8105754:	40020410 	.word	0x40020410
 8105758:	40020428 	.word	0x40020428
 810575c:	40020440 	.word	0x40020440
 8105760:	40020458 	.word	0x40020458
 8105764:	40020470 	.word	0x40020470
 8105768:	40020488 	.word	0x40020488
 810576c:	400204a0 	.word	0x400204a0
 8105770:	400204b8 	.word	0x400204b8
 8105774:	687b      	ldr	r3, [r7, #4]
 8105776:	681b      	ldr	r3, [r3, #0]
 8105778:	681a      	ldr	r2, [r3, #0]
 810577a:	687b      	ldr	r3, [r7, #4]
 810577c:	681b      	ldr	r3, [r3, #0]
 810577e:	f022 0201 	bic.w	r2, r2, #1
 8105782:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8105784:	687b      	ldr	r3, [r7, #4]
 8105786:	681b      	ldr	r3, [r3, #0]
 8105788:	4a5c      	ldr	r2, [pc, #368]	; (81058fc <HAL_DMA_Abort_IT+0x428>)
 810578a:	4293      	cmp	r3, r2
 810578c:	d072      	beq.n	8105874 <HAL_DMA_Abort_IT+0x3a0>
 810578e:	687b      	ldr	r3, [r7, #4]
 8105790:	681b      	ldr	r3, [r3, #0]
 8105792:	4a5b      	ldr	r2, [pc, #364]	; (8105900 <HAL_DMA_Abort_IT+0x42c>)
 8105794:	4293      	cmp	r3, r2
 8105796:	d06d      	beq.n	8105874 <HAL_DMA_Abort_IT+0x3a0>
 8105798:	687b      	ldr	r3, [r7, #4]
 810579a:	681b      	ldr	r3, [r3, #0]
 810579c:	4a59      	ldr	r2, [pc, #356]	; (8105904 <HAL_DMA_Abort_IT+0x430>)
 810579e:	4293      	cmp	r3, r2
 81057a0:	d068      	beq.n	8105874 <HAL_DMA_Abort_IT+0x3a0>
 81057a2:	687b      	ldr	r3, [r7, #4]
 81057a4:	681b      	ldr	r3, [r3, #0]
 81057a6:	4a58      	ldr	r2, [pc, #352]	; (8105908 <HAL_DMA_Abort_IT+0x434>)
 81057a8:	4293      	cmp	r3, r2
 81057aa:	d063      	beq.n	8105874 <HAL_DMA_Abort_IT+0x3a0>
 81057ac:	687b      	ldr	r3, [r7, #4]
 81057ae:	681b      	ldr	r3, [r3, #0]
 81057b0:	4a56      	ldr	r2, [pc, #344]	; (810590c <HAL_DMA_Abort_IT+0x438>)
 81057b2:	4293      	cmp	r3, r2
 81057b4:	d05e      	beq.n	8105874 <HAL_DMA_Abort_IT+0x3a0>
 81057b6:	687b      	ldr	r3, [r7, #4]
 81057b8:	681b      	ldr	r3, [r3, #0]
 81057ba:	4a55      	ldr	r2, [pc, #340]	; (8105910 <HAL_DMA_Abort_IT+0x43c>)
 81057bc:	4293      	cmp	r3, r2
 81057be:	d059      	beq.n	8105874 <HAL_DMA_Abort_IT+0x3a0>
 81057c0:	687b      	ldr	r3, [r7, #4]
 81057c2:	681b      	ldr	r3, [r3, #0]
 81057c4:	4a53      	ldr	r2, [pc, #332]	; (8105914 <HAL_DMA_Abort_IT+0x440>)
 81057c6:	4293      	cmp	r3, r2
 81057c8:	d054      	beq.n	8105874 <HAL_DMA_Abort_IT+0x3a0>
 81057ca:	687b      	ldr	r3, [r7, #4]
 81057cc:	681b      	ldr	r3, [r3, #0]
 81057ce:	4a52      	ldr	r2, [pc, #328]	; (8105918 <HAL_DMA_Abort_IT+0x444>)
 81057d0:	4293      	cmp	r3, r2
 81057d2:	d04f      	beq.n	8105874 <HAL_DMA_Abort_IT+0x3a0>
 81057d4:	687b      	ldr	r3, [r7, #4]
 81057d6:	681b      	ldr	r3, [r3, #0]
 81057d8:	4a50      	ldr	r2, [pc, #320]	; (810591c <HAL_DMA_Abort_IT+0x448>)
 81057da:	4293      	cmp	r3, r2
 81057dc:	d04a      	beq.n	8105874 <HAL_DMA_Abort_IT+0x3a0>
 81057de:	687b      	ldr	r3, [r7, #4]
 81057e0:	681b      	ldr	r3, [r3, #0]
 81057e2:	4a4f      	ldr	r2, [pc, #316]	; (8105920 <HAL_DMA_Abort_IT+0x44c>)
 81057e4:	4293      	cmp	r3, r2
 81057e6:	d045      	beq.n	8105874 <HAL_DMA_Abort_IT+0x3a0>
 81057e8:	687b      	ldr	r3, [r7, #4]
 81057ea:	681b      	ldr	r3, [r3, #0]
 81057ec:	4a4d      	ldr	r2, [pc, #308]	; (8105924 <HAL_DMA_Abort_IT+0x450>)
 81057ee:	4293      	cmp	r3, r2
 81057f0:	d040      	beq.n	8105874 <HAL_DMA_Abort_IT+0x3a0>
 81057f2:	687b      	ldr	r3, [r7, #4]
 81057f4:	681b      	ldr	r3, [r3, #0]
 81057f6:	4a4c      	ldr	r2, [pc, #304]	; (8105928 <HAL_DMA_Abort_IT+0x454>)
 81057f8:	4293      	cmp	r3, r2
 81057fa:	d03b      	beq.n	8105874 <HAL_DMA_Abort_IT+0x3a0>
 81057fc:	687b      	ldr	r3, [r7, #4]
 81057fe:	681b      	ldr	r3, [r3, #0]
 8105800:	4a4a      	ldr	r2, [pc, #296]	; (810592c <HAL_DMA_Abort_IT+0x458>)
 8105802:	4293      	cmp	r3, r2
 8105804:	d036      	beq.n	8105874 <HAL_DMA_Abort_IT+0x3a0>
 8105806:	687b      	ldr	r3, [r7, #4]
 8105808:	681b      	ldr	r3, [r3, #0]
 810580a:	4a49      	ldr	r2, [pc, #292]	; (8105930 <HAL_DMA_Abort_IT+0x45c>)
 810580c:	4293      	cmp	r3, r2
 810580e:	d031      	beq.n	8105874 <HAL_DMA_Abort_IT+0x3a0>
 8105810:	687b      	ldr	r3, [r7, #4]
 8105812:	681b      	ldr	r3, [r3, #0]
 8105814:	4a47      	ldr	r2, [pc, #284]	; (8105934 <HAL_DMA_Abort_IT+0x460>)
 8105816:	4293      	cmp	r3, r2
 8105818:	d02c      	beq.n	8105874 <HAL_DMA_Abort_IT+0x3a0>
 810581a:	687b      	ldr	r3, [r7, #4]
 810581c:	681b      	ldr	r3, [r3, #0]
 810581e:	4a46      	ldr	r2, [pc, #280]	; (8105938 <HAL_DMA_Abort_IT+0x464>)
 8105820:	4293      	cmp	r3, r2
 8105822:	d027      	beq.n	8105874 <HAL_DMA_Abort_IT+0x3a0>
 8105824:	687b      	ldr	r3, [r7, #4]
 8105826:	681b      	ldr	r3, [r3, #0]
 8105828:	4a44      	ldr	r2, [pc, #272]	; (810593c <HAL_DMA_Abort_IT+0x468>)
 810582a:	4293      	cmp	r3, r2
 810582c:	d022      	beq.n	8105874 <HAL_DMA_Abort_IT+0x3a0>
 810582e:	687b      	ldr	r3, [r7, #4]
 8105830:	681b      	ldr	r3, [r3, #0]
 8105832:	4a43      	ldr	r2, [pc, #268]	; (8105940 <HAL_DMA_Abort_IT+0x46c>)
 8105834:	4293      	cmp	r3, r2
 8105836:	d01d      	beq.n	8105874 <HAL_DMA_Abort_IT+0x3a0>
 8105838:	687b      	ldr	r3, [r7, #4]
 810583a:	681b      	ldr	r3, [r3, #0]
 810583c:	4a41      	ldr	r2, [pc, #260]	; (8105944 <HAL_DMA_Abort_IT+0x470>)
 810583e:	4293      	cmp	r3, r2
 8105840:	d018      	beq.n	8105874 <HAL_DMA_Abort_IT+0x3a0>
 8105842:	687b      	ldr	r3, [r7, #4]
 8105844:	681b      	ldr	r3, [r3, #0]
 8105846:	4a40      	ldr	r2, [pc, #256]	; (8105948 <HAL_DMA_Abort_IT+0x474>)
 8105848:	4293      	cmp	r3, r2
 810584a:	d013      	beq.n	8105874 <HAL_DMA_Abort_IT+0x3a0>
 810584c:	687b      	ldr	r3, [r7, #4]
 810584e:	681b      	ldr	r3, [r3, #0]
 8105850:	4a3e      	ldr	r2, [pc, #248]	; (810594c <HAL_DMA_Abort_IT+0x478>)
 8105852:	4293      	cmp	r3, r2
 8105854:	d00e      	beq.n	8105874 <HAL_DMA_Abort_IT+0x3a0>
 8105856:	687b      	ldr	r3, [r7, #4]
 8105858:	681b      	ldr	r3, [r3, #0]
 810585a:	4a3d      	ldr	r2, [pc, #244]	; (8105950 <HAL_DMA_Abort_IT+0x47c>)
 810585c:	4293      	cmp	r3, r2
 810585e:	d009      	beq.n	8105874 <HAL_DMA_Abort_IT+0x3a0>
 8105860:	687b      	ldr	r3, [r7, #4]
 8105862:	681b      	ldr	r3, [r3, #0]
 8105864:	4a3b      	ldr	r2, [pc, #236]	; (8105954 <HAL_DMA_Abort_IT+0x480>)
 8105866:	4293      	cmp	r3, r2
 8105868:	d004      	beq.n	8105874 <HAL_DMA_Abort_IT+0x3a0>
 810586a:	687b      	ldr	r3, [r7, #4]
 810586c:	681b      	ldr	r3, [r3, #0]
 810586e:	4a3a      	ldr	r2, [pc, #232]	; (8105958 <HAL_DMA_Abort_IT+0x484>)
 8105870:	4293      	cmp	r3, r2
 8105872:	d101      	bne.n	8105878 <HAL_DMA_Abort_IT+0x3a4>
 8105874:	2301      	movs	r3, #1
 8105876:	e000      	b.n	810587a <HAL_DMA_Abort_IT+0x3a6>
 8105878:	2300      	movs	r3, #0
 810587a:	2b00      	cmp	r3, #0
 810587c:	d028      	beq.n	81058d0 <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 810587e:	687b      	ldr	r3, [r7, #4]
 8105880:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8105882:	681a      	ldr	r2, [r3, #0]
 8105884:	687b      	ldr	r3, [r7, #4]
 8105886:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8105888:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 810588c:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 810588e:	687b      	ldr	r3, [r7, #4]
 8105890:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8105892:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8105894:	687b      	ldr	r3, [r7, #4]
 8105896:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8105898:	f003 031f 	and.w	r3, r3, #31
 810589c:	2201      	movs	r2, #1
 810589e:	409a      	lsls	r2, r3
 81058a0:	68fb      	ldr	r3, [r7, #12]
 81058a2:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 81058a4:	687b      	ldr	r3, [r7, #4]
 81058a6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 81058a8:	687a      	ldr	r2, [r7, #4]
 81058aa:	6e92      	ldr	r2, [r2, #104]	; 0x68
 81058ac:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 81058ae:	687b      	ldr	r3, [r7, #4]
 81058b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 81058b2:	2b00      	cmp	r3, #0
 81058b4:	d00c      	beq.n	81058d0 <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 81058b6:	687b      	ldr	r3, [r7, #4]
 81058b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 81058ba:	681a      	ldr	r2, [r3, #0]
 81058bc:	687b      	ldr	r3, [r7, #4]
 81058be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 81058c0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 81058c4:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 81058c6:	687b      	ldr	r3, [r7, #4]
 81058c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 81058ca:	687a      	ldr	r2, [r7, #4]
 81058cc:	6f52      	ldr	r2, [r2, #116]	; 0x74
 81058ce:	605a      	str	r2, [r3, #4]
        }
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 81058d0:	687b      	ldr	r3, [r7, #4]
 81058d2:	2200      	movs	r2, #0
 81058d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 81058d8:	687b      	ldr	r3, [r7, #4]
 81058da:	2201      	movs	r2, #1
 81058dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 81058e0:	687b      	ldr	r3, [r7, #4]
 81058e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81058e4:	2b00      	cmp	r3, #0
 81058e6:	d003      	beq.n	81058f0 <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 81058e8:	687b      	ldr	r3, [r7, #4]
 81058ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81058ec:	6878      	ldr	r0, [r7, #4]
 81058ee:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 81058f0:	2300      	movs	r3, #0
}
 81058f2:	4618      	mov	r0, r3
 81058f4:	3710      	adds	r7, #16
 81058f6:	46bd      	mov	sp, r7
 81058f8:	bd80      	pop	{r7, pc}
 81058fa:	bf00      	nop
 81058fc:	40020010 	.word	0x40020010
 8105900:	40020028 	.word	0x40020028
 8105904:	40020040 	.word	0x40020040
 8105908:	40020058 	.word	0x40020058
 810590c:	40020070 	.word	0x40020070
 8105910:	40020088 	.word	0x40020088
 8105914:	400200a0 	.word	0x400200a0
 8105918:	400200b8 	.word	0x400200b8
 810591c:	40020410 	.word	0x40020410
 8105920:	40020428 	.word	0x40020428
 8105924:	40020440 	.word	0x40020440
 8105928:	40020458 	.word	0x40020458
 810592c:	40020470 	.word	0x40020470
 8105930:	40020488 	.word	0x40020488
 8105934:	400204a0 	.word	0x400204a0
 8105938:	400204b8 	.word	0x400204b8
 810593c:	58025408 	.word	0x58025408
 8105940:	5802541c 	.word	0x5802541c
 8105944:	58025430 	.word	0x58025430
 8105948:	58025444 	.word	0x58025444
 810594c:	58025458 	.word	0x58025458
 8105950:	5802546c 	.word	0x5802546c
 8105954:	58025480 	.word	0x58025480
 8105958:	58025494 	.word	0x58025494

0810595c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 810595c:	b580      	push	{r7, lr}
 810595e:	b08a      	sub	sp, #40	; 0x28
 8105960:	af00      	add	r7, sp, #0
 8105962:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8105964:	2300      	movs	r3, #0
 8105966:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8105968:	4b67      	ldr	r3, [pc, #412]	; (8105b08 <HAL_DMA_IRQHandler+0x1ac>)
 810596a:	681b      	ldr	r3, [r3, #0]
 810596c:	4a67      	ldr	r2, [pc, #412]	; (8105b0c <HAL_DMA_IRQHandler+0x1b0>)
 810596e:	fba2 2303 	umull	r2, r3, r2, r3
 8105972:	0a9b      	lsrs	r3, r3, #10
 8105974:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8105976:	687b      	ldr	r3, [r7, #4]
 8105978:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810597a:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 810597c:	687b      	ldr	r3, [r7, #4]
 810597e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8105980:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8105982:	6a3b      	ldr	r3, [r7, #32]
 8105984:	681b      	ldr	r3, [r3, #0]
 8105986:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8105988:	69fb      	ldr	r3, [r7, #28]
 810598a:	681b      	ldr	r3, [r3, #0]
 810598c:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 810598e:	687b      	ldr	r3, [r7, #4]
 8105990:	681b      	ldr	r3, [r3, #0]
 8105992:	4a5f      	ldr	r2, [pc, #380]	; (8105b10 <HAL_DMA_IRQHandler+0x1b4>)
 8105994:	4293      	cmp	r3, r2
 8105996:	d04a      	beq.n	8105a2e <HAL_DMA_IRQHandler+0xd2>
 8105998:	687b      	ldr	r3, [r7, #4]
 810599a:	681b      	ldr	r3, [r3, #0]
 810599c:	4a5d      	ldr	r2, [pc, #372]	; (8105b14 <HAL_DMA_IRQHandler+0x1b8>)
 810599e:	4293      	cmp	r3, r2
 81059a0:	d045      	beq.n	8105a2e <HAL_DMA_IRQHandler+0xd2>
 81059a2:	687b      	ldr	r3, [r7, #4]
 81059a4:	681b      	ldr	r3, [r3, #0]
 81059a6:	4a5c      	ldr	r2, [pc, #368]	; (8105b18 <HAL_DMA_IRQHandler+0x1bc>)
 81059a8:	4293      	cmp	r3, r2
 81059aa:	d040      	beq.n	8105a2e <HAL_DMA_IRQHandler+0xd2>
 81059ac:	687b      	ldr	r3, [r7, #4]
 81059ae:	681b      	ldr	r3, [r3, #0]
 81059b0:	4a5a      	ldr	r2, [pc, #360]	; (8105b1c <HAL_DMA_IRQHandler+0x1c0>)
 81059b2:	4293      	cmp	r3, r2
 81059b4:	d03b      	beq.n	8105a2e <HAL_DMA_IRQHandler+0xd2>
 81059b6:	687b      	ldr	r3, [r7, #4]
 81059b8:	681b      	ldr	r3, [r3, #0]
 81059ba:	4a59      	ldr	r2, [pc, #356]	; (8105b20 <HAL_DMA_IRQHandler+0x1c4>)
 81059bc:	4293      	cmp	r3, r2
 81059be:	d036      	beq.n	8105a2e <HAL_DMA_IRQHandler+0xd2>
 81059c0:	687b      	ldr	r3, [r7, #4]
 81059c2:	681b      	ldr	r3, [r3, #0]
 81059c4:	4a57      	ldr	r2, [pc, #348]	; (8105b24 <HAL_DMA_IRQHandler+0x1c8>)
 81059c6:	4293      	cmp	r3, r2
 81059c8:	d031      	beq.n	8105a2e <HAL_DMA_IRQHandler+0xd2>
 81059ca:	687b      	ldr	r3, [r7, #4]
 81059cc:	681b      	ldr	r3, [r3, #0]
 81059ce:	4a56      	ldr	r2, [pc, #344]	; (8105b28 <HAL_DMA_IRQHandler+0x1cc>)
 81059d0:	4293      	cmp	r3, r2
 81059d2:	d02c      	beq.n	8105a2e <HAL_DMA_IRQHandler+0xd2>
 81059d4:	687b      	ldr	r3, [r7, #4]
 81059d6:	681b      	ldr	r3, [r3, #0]
 81059d8:	4a54      	ldr	r2, [pc, #336]	; (8105b2c <HAL_DMA_IRQHandler+0x1d0>)
 81059da:	4293      	cmp	r3, r2
 81059dc:	d027      	beq.n	8105a2e <HAL_DMA_IRQHandler+0xd2>
 81059de:	687b      	ldr	r3, [r7, #4]
 81059e0:	681b      	ldr	r3, [r3, #0]
 81059e2:	4a53      	ldr	r2, [pc, #332]	; (8105b30 <HAL_DMA_IRQHandler+0x1d4>)
 81059e4:	4293      	cmp	r3, r2
 81059e6:	d022      	beq.n	8105a2e <HAL_DMA_IRQHandler+0xd2>
 81059e8:	687b      	ldr	r3, [r7, #4]
 81059ea:	681b      	ldr	r3, [r3, #0]
 81059ec:	4a51      	ldr	r2, [pc, #324]	; (8105b34 <HAL_DMA_IRQHandler+0x1d8>)
 81059ee:	4293      	cmp	r3, r2
 81059f0:	d01d      	beq.n	8105a2e <HAL_DMA_IRQHandler+0xd2>
 81059f2:	687b      	ldr	r3, [r7, #4]
 81059f4:	681b      	ldr	r3, [r3, #0]
 81059f6:	4a50      	ldr	r2, [pc, #320]	; (8105b38 <HAL_DMA_IRQHandler+0x1dc>)
 81059f8:	4293      	cmp	r3, r2
 81059fa:	d018      	beq.n	8105a2e <HAL_DMA_IRQHandler+0xd2>
 81059fc:	687b      	ldr	r3, [r7, #4]
 81059fe:	681b      	ldr	r3, [r3, #0]
 8105a00:	4a4e      	ldr	r2, [pc, #312]	; (8105b3c <HAL_DMA_IRQHandler+0x1e0>)
 8105a02:	4293      	cmp	r3, r2
 8105a04:	d013      	beq.n	8105a2e <HAL_DMA_IRQHandler+0xd2>
 8105a06:	687b      	ldr	r3, [r7, #4]
 8105a08:	681b      	ldr	r3, [r3, #0]
 8105a0a:	4a4d      	ldr	r2, [pc, #308]	; (8105b40 <HAL_DMA_IRQHandler+0x1e4>)
 8105a0c:	4293      	cmp	r3, r2
 8105a0e:	d00e      	beq.n	8105a2e <HAL_DMA_IRQHandler+0xd2>
 8105a10:	687b      	ldr	r3, [r7, #4]
 8105a12:	681b      	ldr	r3, [r3, #0]
 8105a14:	4a4b      	ldr	r2, [pc, #300]	; (8105b44 <HAL_DMA_IRQHandler+0x1e8>)
 8105a16:	4293      	cmp	r3, r2
 8105a18:	d009      	beq.n	8105a2e <HAL_DMA_IRQHandler+0xd2>
 8105a1a:	687b      	ldr	r3, [r7, #4]
 8105a1c:	681b      	ldr	r3, [r3, #0]
 8105a1e:	4a4a      	ldr	r2, [pc, #296]	; (8105b48 <HAL_DMA_IRQHandler+0x1ec>)
 8105a20:	4293      	cmp	r3, r2
 8105a22:	d004      	beq.n	8105a2e <HAL_DMA_IRQHandler+0xd2>
 8105a24:	687b      	ldr	r3, [r7, #4]
 8105a26:	681b      	ldr	r3, [r3, #0]
 8105a28:	4a48      	ldr	r2, [pc, #288]	; (8105b4c <HAL_DMA_IRQHandler+0x1f0>)
 8105a2a:	4293      	cmp	r3, r2
 8105a2c:	d101      	bne.n	8105a32 <HAL_DMA_IRQHandler+0xd6>
 8105a2e:	2301      	movs	r3, #1
 8105a30:	e000      	b.n	8105a34 <HAL_DMA_IRQHandler+0xd8>
 8105a32:	2300      	movs	r3, #0
 8105a34:	2b00      	cmp	r3, #0
 8105a36:	f000 842b 	beq.w	8106290 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8105a3a:	687b      	ldr	r3, [r7, #4]
 8105a3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8105a3e:	f003 031f 	and.w	r3, r3, #31
 8105a42:	2208      	movs	r2, #8
 8105a44:	409a      	lsls	r2, r3
 8105a46:	69bb      	ldr	r3, [r7, #24]
 8105a48:	4013      	ands	r3, r2
 8105a4a:	2b00      	cmp	r3, #0
 8105a4c:	f000 80a2 	beq.w	8105b94 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8105a50:	687b      	ldr	r3, [r7, #4]
 8105a52:	681b      	ldr	r3, [r3, #0]
 8105a54:	4a2e      	ldr	r2, [pc, #184]	; (8105b10 <HAL_DMA_IRQHandler+0x1b4>)
 8105a56:	4293      	cmp	r3, r2
 8105a58:	d04a      	beq.n	8105af0 <HAL_DMA_IRQHandler+0x194>
 8105a5a:	687b      	ldr	r3, [r7, #4]
 8105a5c:	681b      	ldr	r3, [r3, #0]
 8105a5e:	4a2d      	ldr	r2, [pc, #180]	; (8105b14 <HAL_DMA_IRQHandler+0x1b8>)
 8105a60:	4293      	cmp	r3, r2
 8105a62:	d045      	beq.n	8105af0 <HAL_DMA_IRQHandler+0x194>
 8105a64:	687b      	ldr	r3, [r7, #4]
 8105a66:	681b      	ldr	r3, [r3, #0]
 8105a68:	4a2b      	ldr	r2, [pc, #172]	; (8105b18 <HAL_DMA_IRQHandler+0x1bc>)
 8105a6a:	4293      	cmp	r3, r2
 8105a6c:	d040      	beq.n	8105af0 <HAL_DMA_IRQHandler+0x194>
 8105a6e:	687b      	ldr	r3, [r7, #4]
 8105a70:	681b      	ldr	r3, [r3, #0]
 8105a72:	4a2a      	ldr	r2, [pc, #168]	; (8105b1c <HAL_DMA_IRQHandler+0x1c0>)
 8105a74:	4293      	cmp	r3, r2
 8105a76:	d03b      	beq.n	8105af0 <HAL_DMA_IRQHandler+0x194>
 8105a78:	687b      	ldr	r3, [r7, #4]
 8105a7a:	681b      	ldr	r3, [r3, #0]
 8105a7c:	4a28      	ldr	r2, [pc, #160]	; (8105b20 <HAL_DMA_IRQHandler+0x1c4>)
 8105a7e:	4293      	cmp	r3, r2
 8105a80:	d036      	beq.n	8105af0 <HAL_DMA_IRQHandler+0x194>
 8105a82:	687b      	ldr	r3, [r7, #4]
 8105a84:	681b      	ldr	r3, [r3, #0]
 8105a86:	4a27      	ldr	r2, [pc, #156]	; (8105b24 <HAL_DMA_IRQHandler+0x1c8>)
 8105a88:	4293      	cmp	r3, r2
 8105a8a:	d031      	beq.n	8105af0 <HAL_DMA_IRQHandler+0x194>
 8105a8c:	687b      	ldr	r3, [r7, #4]
 8105a8e:	681b      	ldr	r3, [r3, #0]
 8105a90:	4a25      	ldr	r2, [pc, #148]	; (8105b28 <HAL_DMA_IRQHandler+0x1cc>)
 8105a92:	4293      	cmp	r3, r2
 8105a94:	d02c      	beq.n	8105af0 <HAL_DMA_IRQHandler+0x194>
 8105a96:	687b      	ldr	r3, [r7, #4]
 8105a98:	681b      	ldr	r3, [r3, #0]
 8105a9a:	4a24      	ldr	r2, [pc, #144]	; (8105b2c <HAL_DMA_IRQHandler+0x1d0>)
 8105a9c:	4293      	cmp	r3, r2
 8105a9e:	d027      	beq.n	8105af0 <HAL_DMA_IRQHandler+0x194>
 8105aa0:	687b      	ldr	r3, [r7, #4]
 8105aa2:	681b      	ldr	r3, [r3, #0]
 8105aa4:	4a22      	ldr	r2, [pc, #136]	; (8105b30 <HAL_DMA_IRQHandler+0x1d4>)
 8105aa6:	4293      	cmp	r3, r2
 8105aa8:	d022      	beq.n	8105af0 <HAL_DMA_IRQHandler+0x194>
 8105aaa:	687b      	ldr	r3, [r7, #4]
 8105aac:	681b      	ldr	r3, [r3, #0]
 8105aae:	4a21      	ldr	r2, [pc, #132]	; (8105b34 <HAL_DMA_IRQHandler+0x1d8>)
 8105ab0:	4293      	cmp	r3, r2
 8105ab2:	d01d      	beq.n	8105af0 <HAL_DMA_IRQHandler+0x194>
 8105ab4:	687b      	ldr	r3, [r7, #4]
 8105ab6:	681b      	ldr	r3, [r3, #0]
 8105ab8:	4a1f      	ldr	r2, [pc, #124]	; (8105b38 <HAL_DMA_IRQHandler+0x1dc>)
 8105aba:	4293      	cmp	r3, r2
 8105abc:	d018      	beq.n	8105af0 <HAL_DMA_IRQHandler+0x194>
 8105abe:	687b      	ldr	r3, [r7, #4]
 8105ac0:	681b      	ldr	r3, [r3, #0]
 8105ac2:	4a1e      	ldr	r2, [pc, #120]	; (8105b3c <HAL_DMA_IRQHandler+0x1e0>)
 8105ac4:	4293      	cmp	r3, r2
 8105ac6:	d013      	beq.n	8105af0 <HAL_DMA_IRQHandler+0x194>
 8105ac8:	687b      	ldr	r3, [r7, #4]
 8105aca:	681b      	ldr	r3, [r3, #0]
 8105acc:	4a1c      	ldr	r2, [pc, #112]	; (8105b40 <HAL_DMA_IRQHandler+0x1e4>)
 8105ace:	4293      	cmp	r3, r2
 8105ad0:	d00e      	beq.n	8105af0 <HAL_DMA_IRQHandler+0x194>
 8105ad2:	687b      	ldr	r3, [r7, #4]
 8105ad4:	681b      	ldr	r3, [r3, #0]
 8105ad6:	4a1b      	ldr	r2, [pc, #108]	; (8105b44 <HAL_DMA_IRQHandler+0x1e8>)
 8105ad8:	4293      	cmp	r3, r2
 8105ada:	d009      	beq.n	8105af0 <HAL_DMA_IRQHandler+0x194>
 8105adc:	687b      	ldr	r3, [r7, #4]
 8105ade:	681b      	ldr	r3, [r3, #0]
 8105ae0:	4a19      	ldr	r2, [pc, #100]	; (8105b48 <HAL_DMA_IRQHandler+0x1ec>)
 8105ae2:	4293      	cmp	r3, r2
 8105ae4:	d004      	beq.n	8105af0 <HAL_DMA_IRQHandler+0x194>
 8105ae6:	687b      	ldr	r3, [r7, #4]
 8105ae8:	681b      	ldr	r3, [r3, #0]
 8105aea:	4a18      	ldr	r2, [pc, #96]	; (8105b4c <HAL_DMA_IRQHandler+0x1f0>)
 8105aec:	4293      	cmp	r3, r2
 8105aee:	d12f      	bne.n	8105b50 <HAL_DMA_IRQHandler+0x1f4>
 8105af0:	687b      	ldr	r3, [r7, #4]
 8105af2:	681b      	ldr	r3, [r3, #0]
 8105af4:	681b      	ldr	r3, [r3, #0]
 8105af6:	f003 0304 	and.w	r3, r3, #4
 8105afa:	2b00      	cmp	r3, #0
 8105afc:	bf14      	ite	ne
 8105afe:	2301      	movne	r3, #1
 8105b00:	2300      	moveq	r3, #0
 8105b02:	b2db      	uxtb	r3, r3
 8105b04:	e02e      	b.n	8105b64 <HAL_DMA_IRQHandler+0x208>
 8105b06:	bf00      	nop
 8105b08:	10000000 	.word	0x10000000
 8105b0c:	1b4e81b5 	.word	0x1b4e81b5
 8105b10:	40020010 	.word	0x40020010
 8105b14:	40020028 	.word	0x40020028
 8105b18:	40020040 	.word	0x40020040
 8105b1c:	40020058 	.word	0x40020058
 8105b20:	40020070 	.word	0x40020070
 8105b24:	40020088 	.word	0x40020088
 8105b28:	400200a0 	.word	0x400200a0
 8105b2c:	400200b8 	.word	0x400200b8
 8105b30:	40020410 	.word	0x40020410
 8105b34:	40020428 	.word	0x40020428
 8105b38:	40020440 	.word	0x40020440
 8105b3c:	40020458 	.word	0x40020458
 8105b40:	40020470 	.word	0x40020470
 8105b44:	40020488 	.word	0x40020488
 8105b48:	400204a0 	.word	0x400204a0
 8105b4c:	400204b8 	.word	0x400204b8
 8105b50:	687b      	ldr	r3, [r7, #4]
 8105b52:	681b      	ldr	r3, [r3, #0]
 8105b54:	681b      	ldr	r3, [r3, #0]
 8105b56:	f003 0308 	and.w	r3, r3, #8
 8105b5a:	2b00      	cmp	r3, #0
 8105b5c:	bf14      	ite	ne
 8105b5e:	2301      	movne	r3, #1
 8105b60:	2300      	moveq	r3, #0
 8105b62:	b2db      	uxtb	r3, r3
 8105b64:	2b00      	cmp	r3, #0
 8105b66:	d015      	beq.n	8105b94 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8105b68:	687b      	ldr	r3, [r7, #4]
 8105b6a:	681b      	ldr	r3, [r3, #0]
 8105b6c:	681a      	ldr	r2, [r3, #0]
 8105b6e:	687b      	ldr	r3, [r7, #4]
 8105b70:	681b      	ldr	r3, [r3, #0]
 8105b72:	f022 0204 	bic.w	r2, r2, #4
 8105b76:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8105b78:	687b      	ldr	r3, [r7, #4]
 8105b7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8105b7c:	f003 031f 	and.w	r3, r3, #31
 8105b80:	2208      	movs	r2, #8
 8105b82:	409a      	lsls	r2, r3
 8105b84:	6a3b      	ldr	r3, [r7, #32]
 8105b86:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8105b88:	687b      	ldr	r3, [r7, #4]
 8105b8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8105b8c:	f043 0201 	orr.w	r2, r3, #1
 8105b90:	687b      	ldr	r3, [r7, #4]
 8105b92:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8105b94:	687b      	ldr	r3, [r7, #4]
 8105b96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8105b98:	f003 031f 	and.w	r3, r3, #31
 8105b9c:	69ba      	ldr	r2, [r7, #24]
 8105b9e:	fa22 f303 	lsr.w	r3, r2, r3
 8105ba2:	f003 0301 	and.w	r3, r3, #1
 8105ba6:	2b00      	cmp	r3, #0
 8105ba8:	d06e      	beq.n	8105c88 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8105baa:	687b      	ldr	r3, [r7, #4]
 8105bac:	681b      	ldr	r3, [r3, #0]
 8105bae:	4a69      	ldr	r2, [pc, #420]	; (8105d54 <HAL_DMA_IRQHandler+0x3f8>)
 8105bb0:	4293      	cmp	r3, r2
 8105bb2:	d04a      	beq.n	8105c4a <HAL_DMA_IRQHandler+0x2ee>
 8105bb4:	687b      	ldr	r3, [r7, #4]
 8105bb6:	681b      	ldr	r3, [r3, #0]
 8105bb8:	4a67      	ldr	r2, [pc, #412]	; (8105d58 <HAL_DMA_IRQHandler+0x3fc>)
 8105bba:	4293      	cmp	r3, r2
 8105bbc:	d045      	beq.n	8105c4a <HAL_DMA_IRQHandler+0x2ee>
 8105bbe:	687b      	ldr	r3, [r7, #4]
 8105bc0:	681b      	ldr	r3, [r3, #0]
 8105bc2:	4a66      	ldr	r2, [pc, #408]	; (8105d5c <HAL_DMA_IRQHandler+0x400>)
 8105bc4:	4293      	cmp	r3, r2
 8105bc6:	d040      	beq.n	8105c4a <HAL_DMA_IRQHandler+0x2ee>
 8105bc8:	687b      	ldr	r3, [r7, #4]
 8105bca:	681b      	ldr	r3, [r3, #0]
 8105bcc:	4a64      	ldr	r2, [pc, #400]	; (8105d60 <HAL_DMA_IRQHandler+0x404>)
 8105bce:	4293      	cmp	r3, r2
 8105bd0:	d03b      	beq.n	8105c4a <HAL_DMA_IRQHandler+0x2ee>
 8105bd2:	687b      	ldr	r3, [r7, #4]
 8105bd4:	681b      	ldr	r3, [r3, #0]
 8105bd6:	4a63      	ldr	r2, [pc, #396]	; (8105d64 <HAL_DMA_IRQHandler+0x408>)
 8105bd8:	4293      	cmp	r3, r2
 8105bda:	d036      	beq.n	8105c4a <HAL_DMA_IRQHandler+0x2ee>
 8105bdc:	687b      	ldr	r3, [r7, #4]
 8105bde:	681b      	ldr	r3, [r3, #0]
 8105be0:	4a61      	ldr	r2, [pc, #388]	; (8105d68 <HAL_DMA_IRQHandler+0x40c>)
 8105be2:	4293      	cmp	r3, r2
 8105be4:	d031      	beq.n	8105c4a <HAL_DMA_IRQHandler+0x2ee>
 8105be6:	687b      	ldr	r3, [r7, #4]
 8105be8:	681b      	ldr	r3, [r3, #0]
 8105bea:	4a60      	ldr	r2, [pc, #384]	; (8105d6c <HAL_DMA_IRQHandler+0x410>)
 8105bec:	4293      	cmp	r3, r2
 8105bee:	d02c      	beq.n	8105c4a <HAL_DMA_IRQHandler+0x2ee>
 8105bf0:	687b      	ldr	r3, [r7, #4]
 8105bf2:	681b      	ldr	r3, [r3, #0]
 8105bf4:	4a5e      	ldr	r2, [pc, #376]	; (8105d70 <HAL_DMA_IRQHandler+0x414>)
 8105bf6:	4293      	cmp	r3, r2
 8105bf8:	d027      	beq.n	8105c4a <HAL_DMA_IRQHandler+0x2ee>
 8105bfa:	687b      	ldr	r3, [r7, #4]
 8105bfc:	681b      	ldr	r3, [r3, #0]
 8105bfe:	4a5d      	ldr	r2, [pc, #372]	; (8105d74 <HAL_DMA_IRQHandler+0x418>)
 8105c00:	4293      	cmp	r3, r2
 8105c02:	d022      	beq.n	8105c4a <HAL_DMA_IRQHandler+0x2ee>
 8105c04:	687b      	ldr	r3, [r7, #4]
 8105c06:	681b      	ldr	r3, [r3, #0]
 8105c08:	4a5b      	ldr	r2, [pc, #364]	; (8105d78 <HAL_DMA_IRQHandler+0x41c>)
 8105c0a:	4293      	cmp	r3, r2
 8105c0c:	d01d      	beq.n	8105c4a <HAL_DMA_IRQHandler+0x2ee>
 8105c0e:	687b      	ldr	r3, [r7, #4]
 8105c10:	681b      	ldr	r3, [r3, #0]
 8105c12:	4a5a      	ldr	r2, [pc, #360]	; (8105d7c <HAL_DMA_IRQHandler+0x420>)
 8105c14:	4293      	cmp	r3, r2
 8105c16:	d018      	beq.n	8105c4a <HAL_DMA_IRQHandler+0x2ee>
 8105c18:	687b      	ldr	r3, [r7, #4]
 8105c1a:	681b      	ldr	r3, [r3, #0]
 8105c1c:	4a58      	ldr	r2, [pc, #352]	; (8105d80 <HAL_DMA_IRQHandler+0x424>)
 8105c1e:	4293      	cmp	r3, r2
 8105c20:	d013      	beq.n	8105c4a <HAL_DMA_IRQHandler+0x2ee>
 8105c22:	687b      	ldr	r3, [r7, #4]
 8105c24:	681b      	ldr	r3, [r3, #0]
 8105c26:	4a57      	ldr	r2, [pc, #348]	; (8105d84 <HAL_DMA_IRQHandler+0x428>)
 8105c28:	4293      	cmp	r3, r2
 8105c2a:	d00e      	beq.n	8105c4a <HAL_DMA_IRQHandler+0x2ee>
 8105c2c:	687b      	ldr	r3, [r7, #4]
 8105c2e:	681b      	ldr	r3, [r3, #0]
 8105c30:	4a55      	ldr	r2, [pc, #340]	; (8105d88 <HAL_DMA_IRQHandler+0x42c>)
 8105c32:	4293      	cmp	r3, r2
 8105c34:	d009      	beq.n	8105c4a <HAL_DMA_IRQHandler+0x2ee>
 8105c36:	687b      	ldr	r3, [r7, #4]
 8105c38:	681b      	ldr	r3, [r3, #0]
 8105c3a:	4a54      	ldr	r2, [pc, #336]	; (8105d8c <HAL_DMA_IRQHandler+0x430>)
 8105c3c:	4293      	cmp	r3, r2
 8105c3e:	d004      	beq.n	8105c4a <HAL_DMA_IRQHandler+0x2ee>
 8105c40:	687b      	ldr	r3, [r7, #4]
 8105c42:	681b      	ldr	r3, [r3, #0]
 8105c44:	4a52      	ldr	r2, [pc, #328]	; (8105d90 <HAL_DMA_IRQHandler+0x434>)
 8105c46:	4293      	cmp	r3, r2
 8105c48:	d10a      	bne.n	8105c60 <HAL_DMA_IRQHandler+0x304>
 8105c4a:	687b      	ldr	r3, [r7, #4]
 8105c4c:	681b      	ldr	r3, [r3, #0]
 8105c4e:	695b      	ldr	r3, [r3, #20]
 8105c50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8105c54:	2b00      	cmp	r3, #0
 8105c56:	bf14      	ite	ne
 8105c58:	2301      	movne	r3, #1
 8105c5a:	2300      	moveq	r3, #0
 8105c5c:	b2db      	uxtb	r3, r3
 8105c5e:	e003      	b.n	8105c68 <HAL_DMA_IRQHandler+0x30c>
 8105c60:	687b      	ldr	r3, [r7, #4]
 8105c62:	681b      	ldr	r3, [r3, #0]
 8105c64:	681b      	ldr	r3, [r3, #0]
 8105c66:	2300      	movs	r3, #0
 8105c68:	2b00      	cmp	r3, #0
 8105c6a:	d00d      	beq.n	8105c88 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8105c6c:	687b      	ldr	r3, [r7, #4]
 8105c6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8105c70:	f003 031f 	and.w	r3, r3, #31
 8105c74:	2201      	movs	r2, #1
 8105c76:	409a      	lsls	r2, r3
 8105c78:	6a3b      	ldr	r3, [r7, #32]
 8105c7a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8105c7c:	687b      	ldr	r3, [r7, #4]
 8105c7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8105c80:	f043 0202 	orr.w	r2, r3, #2
 8105c84:	687b      	ldr	r3, [r7, #4]
 8105c86:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8105c88:	687b      	ldr	r3, [r7, #4]
 8105c8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8105c8c:	f003 031f 	and.w	r3, r3, #31
 8105c90:	2204      	movs	r2, #4
 8105c92:	409a      	lsls	r2, r3
 8105c94:	69bb      	ldr	r3, [r7, #24]
 8105c96:	4013      	ands	r3, r2
 8105c98:	2b00      	cmp	r3, #0
 8105c9a:	f000 808f 	beq.w	8105dbc <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8105c9e:	687b      	ldr	r3, [r7, #4]
 8105ca0:	681b      	ldr	r3, [r3, #0]
 8105ca2:	4a2c      	ldr	r2, [pc, #176]	; (8105d54 <HAL_DMA_IRQHandler+0x3f8>)
 8105ca4:	4293      	cmp	r3, r2
 8105ca6:	d04a      	beq.n	8105d3e <HAL_DMA_IRQHandler+0x3e2>
 8105ca8:	687b      	ldr	r3, [r7, #4]
 8105caa:	681b      	ldr	r3, [r3, #0]
 8105cac:	4a2a      	ldr	r2, [pc, #168]	; (8105d58 <HAL_DMA_IRQHandler+0x3fc>)
 8105cae:	4293      	cmp	r3, r2
 8105cb0:	d045      	beq.n	8105d3e <HAL_DMA_IRQHandler+0x3e2>
 8105cb2:	687b      	ldr	r3, [r7, #4]
 8105cb4:	681b      	ldr	r3, [r3, #0]
 8105cb6:	4a29      	ldr	r2, [pc, #164]	; (8105d5c <HAL_DMA_IRQHandler+0x400>)
 8105cb8:	4293      	cmp	r3, r2
 8105cba:	d040      	beq.n	8105d3e <HAL_DMA_IRQHandler+0x3e2>
 8105cbc:	687b      	ldr	r3, [r7, #4]
 8105cbe:	681b      	ldr	r3, [r3, #0]
 8105cc0:	4a27      	ldr	r2, [pc, #156]	; (8105d60 <HAL_DMA_IRQHandler+0x404>)
 8105cc2:	4293      	cmp	r3, r2
 8105cc4:	d03b      	beq.n	8105d3e <HAL_DMA_IRQHandler+0x3e2>
 8105cc6:	687b      	ldr	r3, [r7, #4]
 8105cc8:	681b      	ldr	r3, [r3, #0]
 8105cca:	4a26      	ldr	r2, [pc, #152]	; (8105d64 <HAL_DMA_IRQHandler+0x408>)
 8105ccc:	4293      	cmp	r3, r2
 8105cce:	d036      	beq.n	8105d3e <HAL_DMA_IRQHandler+0x3e2>
 8105cd0:	687b      	ldr	r3, [r7, #4]
 8105cd2:	681b      	ldr	r3, [r3, #0]
 8105cd4:	4a24      	ldr	r2, [pc, #144]	; (8105d68 <HAL_DMA_IRQHandler+0x40c>)
 8105cd6:	4293      	cmp	r3, r2
 8105cd8:	d031      	beq.n	8105d3e <HAL_DMA_IRQHandler+0x3e2>
 8105cda:	687b      	ldr	r3, [r7, #4]
 8105cdc:	681b      	ldr	r3, [r3, #0]
 8105cde:	4a23      	ldr	r2, [pc, #140]	; (8105d6c <HAL_DMA_IRQHandler+0x410>)
 8105ce0:	4293      	cmp	r3, r2
 8105ce2:	d02c      	beq.n	8105d3e <HAL_DMA_IRQHandler+0x3e2>
 8105ce4:	687b      	ldr	r3, [r7, #4]
 8105ce6:	681b      	ldr	r3, [r3, #0]
 8105ce8:	4a21      	ldr	r2, [pc, #132]	; (8105d70 <HAL_DMA_IRQHandler+0x414>)
 8105cea:	4293      	cmp	r3, r2
 8105cec:	d027      	beq.n	8105d3e <HAL_DMA_IRQHandler+0x3e2>
 8105cee:	687b      	ldr	r3, [r7, #4]
 8105cf0:	681b      	ldr	r3, [r3, #0]
 8105cf2:	4a20      	ldr	r2, [pc, #128]	; (8105d74 <HAL_DMA_IRQHandler+0x418>)
 8105cf4:	4293      	cmp	r3, r2
 8105cf6:	d022      	beq.n	8105d3e <HAL_DMA_IRQHandler+0x3e2>
 8105cf8:	687b      	ldr	r3, [r7, #4]
 8105cfa:	681b      	ldr	r3, [r3, #0]
 8105cfc:	4a1e      	ldr	r2, [pc, #120]	; (8105d78 <HAL_DMA_IRQHandler+0x41c>)
 8105cfe:	4293      	cmp	r3, r2
 8105d00:	d01d      	beq.n	8105d3e <HAL_DMA_IRQHandler+0x3e2>
 8105d02:	687b      	ldr	r3, [r7, #4]
 8105d04:	681b      	ldr	r3, [r3, #0]
 8105d06:	4a1d      	ldr	r2, [pc, #116]	; (8105d7c <HAL_DMA_IRQHandler+0x420>)
 8105d08:	4293      	cmp	r3, r2
 8105d0a:	d018      	beq.n	8105d3e <HAL_DMA_IRQHandler+0x3e2>
 8105d0c:	687b      	ldr	r3, [r7, #4]
 8105d0e:	681b      	ldr	r3, [r3, #0]
 8105d10:	4a1b      	ldr	r2, [pc, #108]	; (8105d80 <HAL_DMA_IRQHandler+0x424>)
 8105d12:	4293      	cmp	r3, r2
 8105d14:	d013      	beq.n	8105d3e <HAL_DMA_IRQHandler+0x3e2>
 8105d16:	687b      	ldr	r3, [r7, #4]
 8105d18:	681b      	ldr	r3, [r3, #0]
 8105d1a:	4a1a      	ldr	r2, [pc, #104]	; (8105d84 <HAL_DMA_IRQHandler+0x428>)
 8105d1c:	4293      	cmp	r3, r2
 8105d1e:	d00e      	beq.n	8105d3e <HAL_DMA_IRQHandler+0x3e2>
 8105d20:	687b      	ldr	r3, [r7, #4]
 8105d22:	681b      	ldr	r3, [r3, #0]
 8105d24:	4a18      	ldr	r2, [pc, #96]	; (8105d88 <HAL_DMA_IRQHandler+0x42c>)
 8105d26:	4293      	cmp	r3, r2
 8105d28:	d009      	beq.n	8105d3e <HAL_DMA_IRQHandler+0x3e2>
 8105d2a:	687b      	ldr	r3, [r7, #4]
 8105d2c:	681b      	ldr	r3, [r3, #0]
 8105d2e:	4a17      	ldr	r2, [pc, #92]	; (8105d8c <HAL_DMA_IRQHandler+0x430>)
 8105d30:	4293      	cmp	r3, r2
 8105d32:	d004      	beq.n	8105d3e <HAL_DMA_IRQHandler+0x3e2>
 8105d34:	687b      	ldr	r3, [r7, #4]
 8105d36:	681b      	ldr	r3, [r3, #0]
 8105d38:	4a15      	ldr	r2, [pc, #84]	; (8105d90 <HAL_DMA_IRQHandler+0x434>)
 8105d3a:	4293      	cmp	r3, r2
 8105d3c:	d12a      	bne.n	8105d94 <HAL_DMA_IRQHandler+0x438>
 8105d3e:	687b      	ldr	r3, [r7, #4]
 8105d40:	681b      	ldr	r3, [r3, #0]
 8105d42:	681b      	ldr	r3, [r3, #0]
 8105d44:	f003 0302 	and.w	r3, r3, #2
 8105d48:	2b00      	cmp	r3, #0
 8105d4a:	bf14      	ite	ne
 8105d4c:	2301      	movne	r3, #1
 8105d4e:	2300      	moveq	r3, #0
 8105d50:	b2db      	uxtb	r3, r3
 8105d52:	e023      	b.n	8105d9c <HAL_DMA_IRQHandler+0x440>
 8105d54:	40020010 	.word	0x40020010
 8105d58:	40020028 	.word	0x40020028
 8105d5c:	40020040 	.word	0x40020040
 8105d60:	40020058 	.word	0x40020058
 8105d64:	40020070 	.word	0x40020070
 8105d68:	40020088 	.word	0x40020088
 8105d6c:	400200a0 	.word	0x400200a0
 8105d70:	400200b8 	.word	0x400200b8
 8105d74:	40020410 	.word	0x40020410
 8105d78:	40020428 	.word	0x40020428
 8105d7c:	40020440 	.word	0x40020440
 8105d80:	40020458 	.word	0x40020458
 8105d84:	40020470 	.word	0x40020470
 8105d88:	40020488 	.word	0x40020488
 8105d8c:	400204a0 	.word	0x400204a0
 8105d90:	400204b8 	.word	0x400204b8
 8105d94:	687b      	ldr	r3, [r7, #4]
 8105d96:	681b      	ldr	r3, [r3, #0]
 8105d98:	681b      	ldr	r3, [r3, #0]
 8105d9a:	2300      	movs	r3, #0
 8105d9c:	2b00      	cmp	r3, #0
 8105d9e:	d00d      	beq.n	8105dbc <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8105da0:	687b      	ldr	r3, [r7, #4]
 8105da2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8105da4:	f003 031f 	and.w	r3, r3, #31
 8105da8:	2204      	movs	r2, #4
 8105daa:	409a      	lsls	r2, r3
 8105dac:	6a3b      	ldr	r3, [r7, #32]
 8105dae:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8105db0:	687b      	ldr	r3, [r7, #4]
 8105db2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8105db4:	f043 0204 	orr.w	r2, r3, #4
 8105db8:	687b      	ldr	r3, [r7, #4]
 8105dba:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8105dbc:	687b      	ldr	r3, [r7, #4]
 8105dbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8105dc0:	f003 031f 	and.w	r3, r3, #31
 8105dc4:	2210      	movs	r2, #16
 8105dc6:	409a      	lsls	r2, r3
 8105dc8:	69bb      	ldr	r3, [r7, #24]
 8105dca:	4013      	ands	r3, r2
 8105dcc:	2b00      	cmp	r3, #0
 8105dce:	f000 80a6 	beq.w	8105f1e <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8105dd2:	687b      	ldr	r3, [r7, #4]
 8105dd4:	681b      	ldr	r3, [r3, #0]
 8105dd6:	4a85      	ldr	r2, [pc, #532]	; (8105fec <HAL_DMA_IRQHandler+0x690>)
 8105dd8:	4293      	cmp	r3, r2
 8105dda:	d04a      	beq.n	8105e72 <HAL_DMA_IRQHandler+0x516>
 8105ddc:	687b      	ldr	r3, [r7, #4]
 8105dde:	681b      	ldr	r3, [r3, #0]
 8105de0:	4a83      	ldr	r2, [pc, #524]	; (8105ff0 <HAL_DMA_IRQHandler+0x694>)
 8105de2:	4293      	cmp	r3, r2
 8105de4:	d045      	beq.n	8105e72 <HAL_DMA_IRQHandler+0x516>
 8105de6:	687b      	ldr	r3, [r7, #4]
 8105de8:	681b      	ldr	r3, [r3, #0]
 8105dea:	4a82      	ldr	r2, [pc, #520]	; (8105ff4 <HAL_DMA_IRQHandler+0x698>)
 8105dec:	4293      	cmp	r3, r2
 8105dee:	d040      	beq.n	8105e72 <HAL_DMA_IRQHandler+0x516>
 8105df0:	687b      	ldr	r3, [r7, #4]
 8105df2:	681b      	ldr	r3, [r3, #0]
 8105df4:	4a80      	ldr	r2, [pc, #512]	; (8105ff8 <HAL_DMA_IRQHandler+0x69c>)
 8105df6:	4293      	cmp	r3, r2
 8105df8:	d03b      	beq.n	8105e72 <HAL_DMA_IRQHandler+0x516>
 8105dfa:	687b      	ldr	r3, [r7, #4]
 8105dfc:	681b      	ldr	r3, [r3, #0]
 8105dfe:	4a7f      	ldr	r2, [pc, #508]	; (8105ffc <HAL_DMA_IRQHandler+0x6a0>)
 8105e00:	4293      	cmp	r3, r2
 8105e02:	d036      	beq.n	8105e72 <HAL_DMA_IRQHandler+0x516>
 8105e04:	687b      	ldr	r3, [r7, #4]
 8105e06:	681b      	ldr	r3, [r3, #0]
 8105e08:	4a7d      	ldr	r2, [pc, #500]	; (8106000 <HAL_DMA_IRQHandler+0x6a4>)
 8105e0a:	4293      	cmp	r3, r2
 8105e0c:	d031      	beq.n	8105e72 <HAL_DMA_IRQHandler+0x516>
 8105e0e:	687b      	ldr	r3, [r7, #4]
 8105e10:	681b      	ldr	r3, [r3, #0]
 8105e12:	4a7c      	ldr	r2, [pc, #496]	; (8106004 <HAL_DMA_IRQHandler+0x6a8>)
 8105e14:	4293      	cmp	r3, r2
 8105e16:	d02c      	beq.n	8105e72 <HAL_DMA_IRQHandler+0x516>
 8105e18:	687b      	ldr	r3, [r7, #4]
 8105e1a:	681b      	ldr	r3, [r3, #0]
 8105e1c:	4a7a      	ldr	r2, [pc, #488]	; (8106008 <HAL_DMA_IRQHandler+0x6ac>)
 8105e1e:	4293      	cmp	r3, r2
 8105e20:	d027      	beq.n	8105e72 <HAL_DMA_IRQHandler+0x516>
 8105e22:	687b      	ldr	r3, [r7, #4]
 8105e24:	681b      	ldr	r3, [r3, #0]
 8105e26:	4a79      	ldr	r2, [pc, #484]	; (810600c <HAL_DMA_IRQHandler+0x6b0>)
 8105e28:	4293      	cmp	r3, r2
 8105e2a:	d022      	beq.n	8105e72 <HAL_DMA_IRQHandler+0x516>
 8105e2c:	687b      	ldr	r3, [r7, #4]
 8105e2e:	681b      	ldr	r3, [r3, #0]
 8105e30:	4a77      	ldr	r2, [pc, #476]	; (8106010 <HAL_DMA_IRQHandler+0x6b4>)
 8105e32:	4293      	cmp	r3, r2
 8105e34:	d01d      	beq.n	8105e72 <HAL_DMA_IRQHandler+0x516>
 8105e36:	687b      	ldr	r3, [r7, #4]
 8105e38:	681b      	ldr	r3, [r3, #0]
 8105e3a:	4a76      	ldr	r2, [pc, #472]	; (8106014 <HAL_DMA_IRQHandler+0x6b8>)
 8105e3c:	4293      	cmp	r3, r2
 8105e3e:	d018      	beq.n	8105e72 <HAL_DMA_IRQHandler+0x516>
 8105e40:	687b      	ldr	r3, [r7, #4]
 8105e42:	681b      	ldr	r3, [r3, #0]
 8105e44:	4a74      	ldr	r2, [pc, #464]	; (8106018 <HAL_DMA_IRQHandler+0x6bc>)
 8105e46:	4293      	cmp	r3, r2
 8105e48:	d013      	beq.n	8105e72 <HAL_DMA_IRQHandler+0x516>
 8105e4a:	687b      	ldr	r3, [r7, #4]
 8105e4c:	681b      	ldr	r3, [r3, #0]
 8105e4e:	4a73      	ldr	r2, [pc, #460]	; (810601c <HAL_DMA_IRQHandler+0x6c0>)
 8105e50:	4293      	cmp	r3, r2
 8105e52:	d00e      	beq.n	8105e72 <HAL_DMA_IRQHandler+0x516>
 8105e54:	687b      	ldr	r3, [r7, #4]
 8105e56:	681b      	ldr	r3, [r3, #0]
 8105e58:	4a71      	ldr	r2, [pc, #452]	; (8106020 <HAL_DMA_IRQHandler+0x6c4>)
 8105e5a:	4293      	cmp	r3, r2
 8105e5c:	d009      	beq.n	8105e72 <HAL_DMA_IRQHandler+0x516>
 8105e5e:	687b      	ldr	r3, [r7, #4]
 8105e60:	681b      	ldr	r3, [r3, #0]
 8105e62:	4a70      	ldr	r2, [pc, #448]	; (8106024 <HAL_DMA_IRQHandler+0x6c8>)
 8105e64:	4293      	cmp	r3, r2
 8105e66:	d004      	beq.n	8105e72 <HAL_DMA_IRQHandler+0x516>
 8105e68:	687b      	ldr	r3, [r7, #4]
 8105e6a:	681b      	ldr	r3, [r3, #0]
 8105e6c:	4a6e      	ldr	r2, [pc, #440]	; (8106028 <HAL_DMA_IRQHandler+0x6cc>)
 8105e6e:	4293      	cmp	r3, r2
 8105e70:	d10a      	bne.n	8105e88 <HAL_DMA_IRQHandler+0x52c>
 8105e72:	687b      	ldr	r3, [r7, #4]
 8105e74:	681b      	ldr	r3, [r3, #0]
 8105e76:	681b      	ldr	r3, [r3, #0]
 8105e78:	f003 0308 	and.w	r3, r3, #8
 8105e7c:	2b00      	cmp	r3, #0
 8105e7e:	bf14      	ite	ne
 8105e80:	2301      	movne	r3, #1
 8105e82:	2300      	moveq	r3, #0
 8105e84:	b2db      	uxtb	r3, r3
 8105e86:	e009      	b.n	8105e9c <HAL_DMA_IRQHandler+0x540>
 8105e88:	687b      	ldr	r3, [r7, #4]
 8105e8a:	681b      	ldr	r3, [r3, #0]
 8105e8c:	681b      	ldr	r3, [r3, #0]
 8105e8e:	f003 0304 	and.w	r3, r3, #4
 8105e92:	2b00      	cmp	r3, #0
 8105e94:	bf14      	ite	ne
 8105e96:	2301      	movne	r3, #1
 8105e98:	2300      	moveq	r3, #0
 8105e9a:	b2db      	uxtb	r3, r3
 8105e9c:	2b00      	cmp	r3, #0
 8105e9e:	d03e      	beq.n	8105f1e <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8105ea0:	687b      	ldr	r3, [r7, #4]
 8105ea2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8105ea4:	f003 031f 	and.w	r3, r3, #31
 8105ea8:	2210      	movs	r2, #16
 8105eaa:	409a      	lsls	r2, r3
 8105eac:	6a3b      	ldr	r3, [r7, #32]
 8105eae:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8105eb0:	687b      	ldr	r3, [r7, #4]
 8105eb2:	681b      	ldr	r3, [r3, #0]
 8105eb4:	681b      	ldr	r3, [r3, #0]
 8105eb6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8105eba:	2b00      	cmp	r3, #0
 8105ebc:	d018      	beq.n	8105ef0 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8105ebe:	687b      	ldr	r3, [r7, #4]
 8105ec0:	681b      	ldr	r3, [r3, #0]
 8105ec2:	681b      	ldr	r3, [r3, #0]
 8105ec4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8105ec8:	2b00      	cmp	r3, #0
 8105eca:	d108      	bne.n	8105ede <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8105ecc:	687b      	ldr	r3, [r7, #4]
 8105ece:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8105ed0:	2b00      	cmp	r3, #0
 8105ed2:	d024      	beq.n	8105f1e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8105ed4:	687b      	ldr	r3, [r7, #4]
 8105ed6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8105ed8:	6878      	ldr	r0, [r7, #4]
 8105eda:	4798      	blx	r3
 8105edc:	e01f      	b.n	8105f1e <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8105ede:	687b      	ldr	r3, [r7, #4]
 8105ee0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8105ee2:	2b00      	cmp	r3, #0
 8105ee4:	d01b      	beq.n	8105f1e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8105ee6:	687b      	ldr	r3, [r7, #4]
 8105ee8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8105eea:	6878      	ldr	r0, [r7, #4]
 8105eec:	4798      	blx	r3
 8105eee:	e016      	b.n	8105f1e <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8105ef0:	687b      	ldr	r3, [r7, #4]
 8105ef2:	681b      	ldr	r3, [r3, #0]
 8105ef4:	681b      	ldr	r3, [r3, #0]
 8105ef6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8105efa:	2b00      	cmp	r3, #0
 8105efc:	d107      	bne.n	8105f0e <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8105efe:	687b      	ldr	r3, [r7, #4]
 8105f00:	681b      	ldr	r3, [r3, #0]
 8105f02:	681a      	ldr	r2, [r3, #0]
 8105f04:	687b      	ldr	r3, [r7, #4]
 8105f06:	681b      	ldr	r3, [r3, #0]
 8105f08:	f022 0208 	bic.w	r2, r2, #8
 8105f0c:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8105f0e:	687b      	ldr	r3, [r7, #4]
 8105f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8105f12:	2b00      	cmp	r3, #0
 8105f14:	d003      	beq.n	8105f1e <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8105f16:	687b      	ldr	r3, [r7, #4]
 8105f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8105f1a:	6878      	ldr	r0, [r7, #4]
 8105f1c:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8105f1e:	687b      	ldr	r3, [r7, #4]
 8105f20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8105f22:	f003 031f 	and.w	r3, r3, #31
 8105f26:	2220      	movs	r2, #32
 8105f28:	409a      	lsls	r2, r3
 8105f2a:	69bb      	ldr	r3, [r7, #24]
 8105f2c:	4013      	ands	r3, r2
 8105f2e:	2b00      	cmp	r3, #0
 8105f30:	f000 8110 	beq.w	8106154 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8105f34:	687b      	ldr	r3, [r7, #4]
 8105f36:	681b      	ldr	r3, [r3, #0]
 8105f38:	4a2c      	ldr	r2, [pc, #176]	; (8105fec <HAL_DMA_IRQHandler+0x690>)
 8105f3a:	4293      	cmp	r3, r2
 8105f3c:	d04a      	beq.n	8105fd4 <HAL_DMA_IRQHandler+0x678>
 8105f3e:	687b      	ldr	r3, [r7, #4]
 8105f40:	681b      	ldr	r3, [r3, #0]
 8105f42:	4a2b      	ldr	r2, [pc, #172]	; (8105ff0 <HAL_DMA_IRQHandler+0x694>)
 8105f44:	4293      	cmp	r3, r2
 8105f46:	d045      	beq.n	8105fd4 <HAL_DMA_IRQHandler+0x678>
 8105f48:	687b      	ldr	r3, [r7, #4]
 8105f4a:	681b      	ldr	r3, [r3, #0]
 8105f4c:	4a29      	ldr	r2, [pc, #164]	; (8105ff4 <HAL_DMA_IRQHandler+0x698>)
 8105f4e:	4293      	cmp	r3, r2
 8105f50:	d040      	beq.n	8105fd4 <HAL_DMA_IRQHandler+0x678>
 8105f52:	687b      	ldr	r3, [r7, #4]
 8105f54:	681b      	ldr	r3, [r3, #0]
 8105f56:	4a28      	ldr	r2, [pc, #160]	; (8105ff8 <HAL_DMA_IRQHandler+0x69c>)
 8105f58:	4293      	cmp	r3, r2
 8105f5a:	d03b      	beq.n	8105fd4 <HAL_DMA_IRQHandler+0x678>
 8105f5c:	687b      	ldr	r3, [r7, #4]
 8105f5e:	681b      	ldr	r3, [r3, #0]
 8105f60:	4a26      	ldr	r2, [pc, #152]	; (8105ffc <HAL_DMA_IRQHandler+0x6a0>)
 8105f62:	4293      	cmp	r3, r2
 8105f64:	d036      	beq.n	8105fd4 <HAL_DMA_IRQHandler+0x678>
 8105f66:	687b      	ldr	r3, [r7, #4]
 8105f68:	681b      	ldr	r3, [r3, #0]
 8105f6a:	4a25      	ldr	r2, [pc, #148]	; (8106000 <HAL_DMA_IRQHandler+0x6a4>)
 8105f6c:	4293      	cmp	r3, r2
 8105f6e:	d031      	beq.n	8105fd4 <HAL_DMA_IRQHandler+0x678>
 8105f70:	687b      	ldr	r3, [r7, #4]
 8105f72:	681b      	ldr	r3, [r3, #0]
 8105f74:	4a23      	ldr	r2, [pc, #140]	; (8106004 <HAL_DMA_IRQHandler+0x6a8>)
 8105f76:	4293      	cmp	r3, r2
 8105f78:	d02c      	beq.n	8105fd4 <HAL_DMA_IRQHandler+0x678>
 8105f7a:	687b      	ldr	r3, [r7, #4]
 8105f7c:	681b      	ldr	r3, [r3, #0]
 8105f7e:	4a22      	ldr	r2, [pc, #136]	; (8106008 <HAL_DMA_IRQHandler+0x6ac>)
 8105f80:	4293      	cmp	r3, r2
 8105f82:	d027      	beq.n	8105fd4 <HAL_DMA_IRQHandler+0x678>
 8105f84:	687b      	ldr	r3, [r7, #4]
 8105f86:	681b      	ldr	r3, [r3, #0]
 8105f88:	4a20      	ldr	r2, [pc, #128]	; (810600c <HAL_DMA_IRQHandler+0x6b0>)
 8105f8a:	4293      	cmp	r3, r2
 8105f8c:	d022      	beq.n	8105fd4 <HAL_DMA_IRQHandler+0x678>
 8105f8e:	687b      	ldr	r3, [r7, #4]
 8105f90:	681b      	ldr	r3, [r3, #0]
 8105f92:	4a1f      	ldr	r2, [pc, #124]	; (8106010 <HAL_DMA_IRQHandler+0x6b4>)
 8105f94:	4293      	cmp	r3, r2
 8105f96:	d01d      	beq.n	8105fd4 <HAL_DMA_IRQHandler+0x678>
 8105f98:	687b      	ldr	r3, [r7, #4]
 8105f9a:	681b      	ldr	r3, [r3, #0]
 8105f9c:	4a1d      	ldr	r2, [pc, #116]	; (8106014 <HAL_DMA_IRQHandler+0x6b8>)
 8105f9e:	4293      	cmp	r3, r2
 8105fa0:	d018      	beq.n	8105fd4 <HAL_DMA_IRQHandler+0x678>
 8105fa2:	687b      	ldr	r3, [r7, #4]
 8105fa4:	681b      	ldr	r3, [r3, #0]
 8105fa6:	4a1c      	ldr	r2, [pc, #112]	; (8106018 <HAL_DMA_IRQHandler+0x6bc>)
 8105fa8:	4293      	cmp	r3, r2
 8105faa:	d013      	beq.n	8105fd4 <HAL_DMA_IRQHandler+0x678>
 8105fac:	687b      	ldr	r3, [r7, #4]
 8105fae:	681b      	ldr	r3, [r3, #0]
 8105fb0:	4a1a      	ldr	r2, [pc, #104]	; (810601c <HAL_DMA_IRQHandler+0x6c0>)
 8105fb2:	4293      	cmp	r3, r2
 8105fb4:	d00e      	beq.n	8105fd4 <HAL_DMA_IRQHandler+0x678>
 8105fb6:	687b      	ldr	r3, [r7, #4]
 8105fb8:	681b      	ldr	r3, [r3, #0]
 8105fba:	4a19      	ldr	r2, [pc, #100]	; (8106020 <HAL_DMA_IRQHandler+0x6c4>)
 8105fbc:	4293      	cmp	r3, r2
 8105fbe:	d009      	beq.n	8105fd4 <HAL_DMA_IRQHandler+0x678>
 8105fc0:	687b      	ldr	r3, [r7, #4]
 8105fc2:	681b      	ldr	r3, [r3, #0]
 8105fc4:	4a17      	ldr	r2, [pc, #92]	; (8106024 <HAL_DMA_IRQHandler+0x6c8>)
 8105fc6:	4293      	cmp	r3, r2
 8105fc8:	d004      	beq.n	8105fd4 <HAL_DMA_IRQHandler+0x678>
 8105fca:	687b      	ldr	r3, [r7, #4]
 8105fcc:	681b      	ldr	r3, [r3, #0]
 8105fce:	4a16      	ldr	r2, [pc, #88]	; (8106028 <HAL_DMA_IRQHandler+0x6cc>)
 8105fd0:	4293      	cmp	r3, r2
 8105fd2:	d12b      	bne.n	810602c <HAL_DMA_IRQHandler+0x6d0>
 8105fd4:	687b      	ldr	r3, [r7, #4]
 8105fd6:	681b      	ldr	r3, [r3, #0]
 8105fd8:	681b      	ldr	r3, [r3, #0]
 8105fda:	f003 0310 	and.w	r3, r3, #16
 8105fde:	2b00      	cmp	r3, #0
 8105fe0:	bf14      	ite	ne
 8105fe2:	2301      	movne	r3, #1
 8105fe4:	2300      	moveq	r3, #0
 8105fe6:	b2db      	uxtb	r3, r3
 8105fe8:	e02a      	b.n	8106040 <HAL_DMA_IRQHandler+0x6e4>
 8105fea:	bf00      	nop
 8105fec:	40020010 	.word	0x40020010
 8105ff0:	40020028 	.word	0x40020028
 8105ff4:	40020040 	.word	0x40020040
 8105ff8:	40020058 	.word	0x40020058
 8105ffc:	40020070 	.word	0x40020070
 8106000:	40020088 	.word	0x40020088
 8106004:	400200a0 	.word	0x400200a0
 8106008:	400200b8 	.word	0x400200b8
 810600c:	40020410 	.word	0x40020410
 8106010:	40020428 	.word	0x40020428
 8106014:	40020440 	.word	0x40020440
 8106018:	40020458 	.word	0x40020458
 810601c:	40020470 	.word	0x40020470
 8106020:	40020488 	.word	0x40020488
 8106024:	400204a0 	.word	0x400204a0
 8106028:	400204b8 	.word	0x400204b8
 810602c:	687b      	ldr	r3, [r7, #4]
 810602e:	681b      	ldr	r3, [r3, #0]
 8106030:	681b      	ldr	r3, [r3, #0]
 8106032:	f003 0302 	and.w	r3, r3, #2
 8106036:	2b00      	cmp	r3, #0
 8106038:	bf14      	ite	ne
 810603a:	2301      	movne	r3, #1
 810603c:	2300      	moveq	r3, #0
 810603e:	b2db      	uxtb	r3, r3
 8106040:	2b00      	cmp	r3, #0
 8106042:	f000 8087 	beq.w	8106154 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8106046:	687b      	ldr	r3, [r7, #4]
 8106048:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 810604a:	f003 031f 	and.w	r3, r3, #31
 810604e:	2220      	movs	r2, #32
 8106050:	409a      	lsls	r2, r3
 8106052:	6a3b      	ldr	r3, [r7, #32]
 8106054:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8106056:	687b      	ldr	r3, [r7, #4]
 8106058:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 810605c:	b2db      	uxtb	r3, r3
 810605e:	2b04      	cmp	r3, #4
 8106060:	d139      	bne.n	81060d6 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8106062:	687b      	ldr	r3, [r7, #4]
 8106064:	681b      	ldr	r3, [r3, #0]
 8106066:	681a      	ldr	r2, [r3, #0]
 8106068:	687b      	ldr	r3, [r7, #4]
 810606a:	681b      	ldr	r3, [r3, #0]
 810606c:	f022 0216 	bic.w	r2, r2, #22
 8106070:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8106072:	687b      	ldr	r3, [r7, #4]
 8106074:	681b      	ldr	r3, [r3, #0]
 8106076:	695a      	ldr	r2, [r3, #20]
 8106078:	687b      	ldr	r3, [r7, #4]
 810607a:	681b      	ldr	r3, [r3, #0]
 810607c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8106080:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8106082:	687b      	ldr	r3, [r7, #4]
 8106084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8106086:	2b00      	cmp	r3, #0
 8106088:	d103      	bne.n	8106092 <HAL_DMA_IRQHandler+0x736>
 810608a:	687b      	ldr	r3, [r7, #4]
 810608c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 810608e:	2b00      	cmp	r3, #0
 8106090:	d007      	beq.n	81060a2 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8106092:	687b      	ldr	r3, [r7, #4]
 8106094:	681b      	ldr	r3, [r3, #0]
 8106096:	681a      	ldr	r2, [r3, #0]
 8106098:	687b      	ldr	r3, [r7, #4]
 810609a:	681b      	ldr	r3, [r3, #0]
 810609c:	f022 0208 	bic.w	r2, r2, #8
 81060a0:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 81060a2:	687b      	ldr	r3, [r7, #4]
 81060a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81060a6:	f003 031f 	and.w	r3, r3, #31
 81060aa:	223f      	movs	r2, #63	; 0x3f
 81060ac:	409a      	lsls	r2, r3
 81060ae:	6a3b      	ldr	r3, [r7, #32]
 81060b0:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 81060b2:	687b      	ldr	r3, [r7, #4]
 81060b4:	2200      	movs	r2, #0
 81060b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 81060ba:	687b      	ldr	r3, [r7, #4]
 81060bc:	2201      	movs	r2, #1
 81060be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 81060c2:	687b      	ldr	r3, [r7, #4]
 81060c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81060c6:	2b00      	cmp	r3, #0
 81060c8:	f000 834a 	beq.w	8106760 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 81060cc:	687b      	ldr	r3, [r7, #4]
 81060ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81060d0:	6878      	ldr	r0, [r7, #4]
 81060d2:	4798      	blx	r3
          }
          return;
 81060d4:	e344      	b.n	8106760 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 81060d6:	687b      	ldr	r3, [r7, #4]
 81060d8:	681b      	ldr	r3, [r3, #0]
 81060da:	681b      	ldr	r3, [r3, #0]
 81060dc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 81060e0:	2b00      	cmp	r3, #0
 81060e2:	d018      	beq.n	8106116 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 81060e4:	687b      	ldr	r3, [r7, #4]
 81060e6:	681b      	ldr	r3, [r3, #0]
 81060e8:	681b      	ldr	r3, [r3, #0]
 81060ea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 81060ee:	2b00      	cmp	r3, #0
 81060f0:	d108      	bne.n	8106104 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 81060f2:	687b      	ldr	r3, [r7, #4]
 81060f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 81060f6:	2b00      	cmp	r3, #0
 81060f8:	d02c      	beq.n	8106154 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 81060fa:	687b      	ldr	r3, [r7, #4]
 81060fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 81060fe:	6878      	ldr	r0, [r7, #4]
 8106100:	4798      	blx	r3
 8106102:	e027      	b.n	8106154 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8106104:	687b      	ldr	r3, [r7, #4]
 8106106:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8106108:	2b00      	cmp	r3, #0
 810610a:	d023      	beq.n	8106154 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 810610c:	687b      	ldr	r3, [r7, #4]
 810610e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8106110:	6878      	ldr	r0, [r7, #4]
 8106112:	4798      	blx	r3
 8106114:	e01e      	b.n	8106154 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8106116:	687b      	ldr	r3, [r7, #4]
 8106118:	681b      	ldr	r3, [r3, #0]
 810611a:	681b      	ldr	r3, [r3, #0]
 810611c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8106120:	2b00      	cmp	r3, #0
 8106122:	d10f      	bne.n	8106144 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8106124:	687b      	ldr	r3, [r7, #4]
 8106126:	681b      	ldr	r3, [r3, #0]
 8106128:	681a      	ldr	r2, [r3, #0]
 810612a:	687b      	ldr	r3, [r7, #4]
 810612c:	681b      	ldr	r3, [r3, #0]
 810612e:	f022 0210 	bic.w	r2, r2, #16
 8106132:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8106134:	687b      	ldr	r3, [r7, #4]
 8106136:	2200      	movs	r2, #0
 8106138:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 810613c:	687b      	ldr	r3, [r7, #4]
 810613e:	2201      	movs	r2, #1
 8106140:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 8106144:	687b      	ldr	r3, [r7, #4]
 8106146:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8106148:	2b00      	cmp	r3, #0
 810614a:	d003      	beq.n	8106154 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 810614c:	687b      	ldr	r3, [r7, #4]
 810614e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8106150:	6878      	ldr	r0, [r7, #4]
 8106152:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8106154:	687b      	ldr	r3, [r7, #4]
 8106156:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8106158:	2b00      	cmp	r3, #0
 810615a:	f000 8306 	beq.w	810676a <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 810615e:	687b      	ldr	r3, [r7, #4]
 8106160:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8106162:	f003 0301 	and.w	r3, r3, #1
 8106166:	2b00      	cmp	r3, #0
 8106168:	f000 8088 	beq.w	810627c <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 810616c:	687b      	ldr	r3, [r7, #4]
 810616e:	2204      	movs	r2, #4
 8106170:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8106174:	687b      	ldr	r3, [r7, #4]
 8106176:	681b      	ldr	r3, [r3, #0]
 8106178:	4a7a      	ldr	r2, [pc, #488]	; (8106364 <HAL_DMA_IRQHandler+0xa08>)
 810617a:	4293      	cmp	r3, r2
 810617c:	d04a      	beq.n	8106214 <HAL_DMA_IRQHandler+0x8b8>
 810617e:	687b      	ldr	r3, [r7, #4]
 8106180:	681b      	ldr	r3, [r3, #0]
 8106182:	4a79      	ldr	r2, [pc, #484]	; (8106368 <HAL_DMA_IRQHandler+0xa0c>)
 8106184:	4293      	cmp	r3, r2
 8106186:	d045      	beq.n	8106214 <HAL_DMA_IRQHandler+0x8b8>
 8106188:	687b      	ldr	r3, [r7, #4]
 810618a:	681b      	ldr	r3, [r3, #0]
 810618c:	4a77      	ldr	r2, [pc, #476]	; (810636c <HAL_DMA_IRQHandler+0xa10>)
 810618e:	4293      	cmp	r3, r2
 8106190:	d040      	beq.n	8106214 <HAL_DMA_IRQHandler+0x8b8>
 8106192:	687b      	ldr	r3, [r7, #4]
 8106194:	681b      	ldr	r3, [r3, #0]
 8106196:	4a76      	ldr	r2, [pc, #472]	; (8106370 <HAL_DMA_IRQHandler+0xa14>)
 8106198:	4293      	cmp	r3, r2
 810619a:	d03b      	beq.n	8106214 <HAL_DMA_IRQHandler+0x8b8>
 810619c:	687b      	ldr	r3, [r7, #4]
 810619e:	681b      	ldr	r3, [r3, #0]
 81061a0:	4a74      	ldr	r2, [pc, #464]	; (8106374 <HAL_DMA_IRQHandler+0xa18>)
 81061a2:	4293      	cmp	r3, r2
 81061a4:	d036      	beq.n	8106214 <HAL_DMA_IRQHandler+0x8b8>
 81061a6:	687b      	ldr	r3, [r7, #4]
 81061a8:	681b      	ldr	r3, [r3, #0]
 81061aa:	4a73      	ldr	r2, [pc, #460]	; (8106378 <HAL_DMA_IRQHandler+0xa1c>)
 81061ac:	4293      	cmp	r3, r2
 81061ae:	d031      	beq.n	8106214 <HAL_DMA_IRQHandler+0x8b8>
 81061b0:	687b      	ldr	r3, [r7, #4]
 81061b2:	681b      	ldr	r3, [r3, #0]
 81061b4:	4a71      	ldr	r2, [pc, #452]	; (810637c <HAL_DMA_IRQHandler+0xa20>)
 81061b6:	4293      	cmp	r3, r2
 81061b8:	d02c      	beq.n	8106214 <HAL_DMA_IRQHandler+0x8b8>
 81061ba:	687b      	ldr	r3, [r7, #4]
 81061bc:	681b      	ldr	r3, [r3, #0]
 81061be:	4a70      	ldr	r2, [pc, #448]	; (8106380 <HAL_DMA_IRQHandler+0xa24>)
 81061c0:	4293      	cmp	r3, r2
 81061c2:	d027      	beq.n	8106214 <HAL_DMA_IRQHandler+0x8b8>
 81061c4:	687b      	ldr	r3, [r7, #4]
 81061c6:	681b      	ldr	r3, [r3, #0]
 81061c8:	4a6e      	ldr	r2, [pc, #440]	; (8106384 <HAL_DMA_IRQHandler+0xa28>)
 81061ca:	4293      	cmp	r3, r2
 81061cc:	d022      	beq.n	8106214 <HAL_DMA_IRQHandler+0x8b8>
 81061ce:	687b      	ldr	r3, [r7, #4]
 81061d0:	681b      	ldr	r3, [r3, #0]
 81061d2:	4a6d      	ldr	r2, [pc, #436]	; (8106388 <HAL_DMA_IRQHandler+0xa2c>)
 81061d4:	4293      	cmp	r3, r2
 81061d6:	d01d      	beq.n	8106214 <HAL_DMA_IRQHandler+0x8b8>
 81061d8:	687b      	ldr	r3, [r7, #4]
 81061da:	681b      	ldr	r3, [r3, #0]
 81061dc:	4a6b      	ldr	r2, [pc, #428]	; (810638c <HAL_DMA_IRQHandler+0xa30>)
 81061de:	4293      	cmp	r3, r2
 81061e0:	d018      	beq.n	8106214 <HAL_DMA_IRQHandler+0x8b8>
 81061e2:	687b      	ldr	r3, [r7, #4]
 81061e4:	681b      	ldr	r3, [r3, #0]
 81061e6:	4a6a      	ldr	r2, [pc, #424]	; (8106390 <HAL_DMA_IRQHandler+0xa34>)
 81061e8:	4293      	cmp	r3, r2
 81061ea:	d013      	beq.n	8106214 <HAL_DMA_IRQHandler+0x8b8>
 81061ec:	687b      	ldr	r3, [r7, #4]
 81061ee:	681b      	ldr	r3, [r3, #0]
 81061f0:	4a68      	ldr	r2, [pc, #416]	; (8106394 <HAL_DMA_IRQHandler+0xa38>)
 81061f2:	4293      	cmp	r3, r2
 81061f4:	d00e      	beq.n	8106214 <HAL_DMA_IRQHandler+0x8b8>
 81061f6:	687b      	ldr	r3, [r7, #4]
 81061f8:	681b      	ldr	r3, [r3, #0]
 81061fa:	4a67      	ldr	r2, [pc, #412]	; (8106398 <HAL_DMA_IRQHandler+0xa3c>)
 81061fc:	4293      	cmp	r3, r2
 81061fe:	d009      	beq.n	8106214 <HAL_DMA_IRQHandler+0x8b8>
 8106200:	687b      	ldr	r3, [r7, #4]
 8106202:	681b      	ldr	r3, [r3, #0]
 8106204:	4a65      	ldr	r2, [pc, #404]	; (810639c <HAL_DMA_IRQHandler+0xa40>)
 8106206:	4293      	cmp	r3, r2
 8106208:	d004      	beq.n	8106214 <HAL_DMA_IRQHandler+0x8b8>
 810620a:	687b      	ldr	r3, [r7, #4]
 810620c:	681b      	ldr	r3, [r3, #0]
 810620e:	4a64      	ldr	r2, [pc, #400]	; (81063a0 <HAL_DMA_IRQHandler+0xa44>)
 8106210:	4293      	cmp	r3, r2
 8106212:	d108      	bne.n	8106226 <HAL_DMA_IRQHandler+0x8ca>
 8106214:	687b      	ldr	r3, [r7, #4]
 8106216:	681b      	ldr	r3, [r3, #0]
 8106218:	681a      	ldr	r2, [r3, #0]
 810621a:	687b      	ldr	r3, [r7, #4]
 810621c:	681b      	ldr	r3, [r3, #0]
 810621e:	f022 0201 	bic.w	r2, r2, #1
 8106222:	601a      	str	r2, [r3, #0]
 8106224:	e007      	b.n	8106236 <HAL_DMA_IRQHandler+0x8da>
 8106226:	687b      	ldr	r3, [r7, #4]
 8106228:	681b      	ldr	r3, [r3, #0]
 810622a:	681a      	ldr	r2, [r3, #0]
 810622c:	687b      	ldr	r3, [r7, #4]
 810622e:	681b      	ldr	r3, [r3, #0]
 8106230:	f022 0201 	bic.w	r2, r2, #1
 8106234:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8106236:	68fb      	ldr	r3, [r7, #12]
 8106238:	3301      	adds	r3, #1
 810623a:	60fb      	str	r3, [r7, #12]
 810623c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 810623e:	429a      	cmp	r2, r3
 8106240:	d307      	bcc.n	8106252 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8106242:	687b      	ldr	r3, [r7, #4]
 8106244:	681b      	ldr	r3, [r3, #0]
 8106246:	681b      	ldr	r3, [r3, #0]
 8106248:	f003 0301 	and.w	r3, r3, #1
 810624c:	2b00      	cmp	r3, #0
 810624e:	d1f2      	bne.n	8106236 <HAL_DMA_IRQHandler+0x8da>
 8106250:	e000      	b.n	8106254 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8106252:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8106254:	687b      	ldr	r3, [r7, #4]
 8106256:	2200      	movs	r2, #0
 8106258:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 810625c:	687b      	ldr	r3, [r7, #4]
 810625e:	681b      	ldr	r3, [r3, #0]
 8106260:	681b      	ldr	r3, [r3, #0]
 8106262:	f003 0301 	and.w	r3, r3, #1
 8106266:	2b00      	cmp	r3, #0
 8106268:	d004      	beq.n	8106274 <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 810626a:	687b      	ldr	r3, [r7, #4]
 810626c:	2203      	movs	r2, #3
 810626e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8106272:	e003      	b.n	810627c <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8106274:	687b      	ldr	r3, [r7, #4]
 8106276:	2201      	movs	r2, #1
 8106278:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 810627c:	687b      	ldr	r3, [r7, #4]
 810627e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8106280:	2b00      	cmp	r3, #0
 8106282:	f000 8272 	beq.w	810676a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8106286:	687b      	ldr	r3, [r7, #4]
 8106288:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 810628a:	6878      	ldr	r0, [r7, #4]
 810628c:	4798      	blx	r3
 810628e:	e26c      	b.n	810676a <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8106290:	687b      	ldr	r3, [r7, #4]
 8106292:	681b      	ldr	r3, [r3, #0]
 8106294:	4a43      	ldr	r2, [pc, #268]	; (81063a4 <HAL_DMA_IRQHandler+0xa48>)
 8106296:	4293      	cmp	r3, r2
 8106298:	d022      	beq.n	81062e0 <HAL_DMA_IRQHandler+0x984>
 810629a:	687b      	ldr	r3, [r7, #4]
 810629c:	681b      	ldr	r3, [r3, #0]
 810629e:	4a42      	ldr	r2, [pc, #264]	; (81063a8 <HAL_DMA_IRQHandler+0xa4c>)
 81062a0:	4293      	cmp	r3, r2
 81062a2:	d01d      	beq.n	81062e0 <HAL_DMA_IRQHandler+0x984>
 81062a4:	687b      	ldr	r3, [r7, #4]
 81062a6:	681b      	ldr	r3, [r3, #0]
 81062a8:	4a40      	ldr	r2, [pc, #256]	; (81063ac <HAL_DMA_IRQHandler+0xa50>)
 81062aa:	4293      	cmp	r3, r2
 81062ac:	d018      	beq.n	81062e0 <HAL_DMA_IRQHandler+0x984>
 81062ae:	687b      	ldr	r3, [r7, #4]
 81062b0:	681b      	ldr	r3, [r3, #0]
 81062b2:	4a3f      	ldr	r2, [pc, #252]	; (81063b0 <HAL_DMA_IRQHandler+0xa54>)
 81062b4:	4293      	cmp	r3, r2
 81062b6:	d013      	beq.n	81062e0 <HAL_DMA_IRQHandler+0x984>
 81062b8:	687b      	ldr	r3, [r7, #4]
 81062ba:	681b      	ldr	r3, [r3, #0]
 81062bc:	4a3d      	ldr	r2, [pc, #244]	; (81063b4 <HAL_DMA_IRQHandler+0xa58>)
 81062be:	4293      	cmp	r3, r2
 81062c0:	d00e      	beq.n	81062e0 <HAL_DMA_IRQHandler+0x984>
 81062c2:	687b      	ldr	r3, [r7, #4]
 81062c4:	681b      	ldr	r3, [r3, #0]
 81062c6:	4a3c      	ldr	r2, [pc, #240]	; (81063b8 <HAL_DMA_IRQHandler+0xa5c>)
 81062c8:	4293      	cmp	r3, r2
 81062ca:	d009      	beq.n	81062e0 <HAL_DMA_IRQHandler+0x984>
 81062cc:	687b      	ldr	r3, [r7, #4]
 81062ce:	681b      	ldr	r3, [r3, #0]
 81062d0:	4a3a      	ldr	r2, [pc, #232]	; (81063bc <HAL_DMA_IRQHandler+0xa60>)
 81062d2:	4293      	cmp	r3, r2
 81062d4:	d004      	beq.n	81062e0 <HAL_DMA_IRQHandler+0x984>
 81062d6:	687b      	ldr	r3, [r7, #4]
 81062d8:	681b      	ldr	r3, [r3, #0]
 81062da:	4a39      	ldr	r2, [pc, #228]	; (81063c0 <HAL_DMA_IRQHandler+0xa64>)
 81062dc:	4293      	cmp	r3, r2
 81062de:	d101      	bne.n	81062e4 <HAL_DMA_IRQHandler+0x988>
 81062e0:	2301      	movs	r3, #1
 81062e2:	e000      	b.n	81062e6 <HAL_DMA_IRQHandler+0x98a>
 81062e4:	2300      	movs	r3, #0
 81062e6:	2b00      	cmp	r3, #0
 81062e8:	f000 823f 	beq.w	810676a <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 81062ec:	687b      	ldr	r3, [r7, #4]
 81062ee:	681b      	ldr	r3, [r3, #0]
 81062f0:	681b      	ldr	r3, [r3, #0]
 81062f2:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 81062f4:	687b      	ldr	r3, [r7, #4]
 81062f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81062f8:	f003 031f 	and.w	r3, r3, #31
 81062fc:	2204      	movs	r2, #4
 81062fe:	409a      	lsls	r2, r3
 8106300:	697b      	ldr	r3, [r7, #20]
 8106302:	4013      	ands	r3, r2
 8106304:	2b00      	cmp	r3, #0
 8106306:	f000 80cd 	beq.w	81064a4 <HAL_DMA_IRQHandler+0xb48>
 810630a:	693b      	ldr	r3, [r7, #16]
 810630c:	f003 0304 	and.w	r3, r3, #4
 8106310:	2b00      	cmp	r3, #0
 8106312:	f000 80c7 	beq.w	81064a4 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8106316:	687b      	ldr	r3, [r7, #4]
 8106318:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 810631a:	f003 031f 	and.w	r3, r3, #31
 810631e:	2204      	movs	r2, #4
 8106320:	409a      	lsls	r2, r3
 8106322:	69fb      	ldr	r3, [r7, #28]
 8106324:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8106326:	693b      	ldr	r3, [r7, #16]
 8106328:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 810632c:	2b00      	cmp	r3, #0
 810632e:	d049      	beq.n	81063c4 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8106330:	693b      	ldr	r3, [r7, #16]
 8106332:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8106336:	2b00      	cmp	r3, #0
 8106338:	d109      	bne.n	810634e <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 810633a:	687b      	ldr	r3, [r7, #4]
 810633c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 810633e:	2b00      	cmp	r3, #0
 8106340:	f000 8210 	beq.w	8106764 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8106344:	687b      	ldr	r3, [r7, #4]
 8106346:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8106348:	6878      	ldr	r0, [r7, #4]
 810634a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 810634c:	e20a      	b.n	8106764 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 810634e:	687b      	ldr	r3, [r7, #4]
 8106350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8106352:	2b00      	cmp	r3, #0
 8106354:	f000 8206 	beq.w	8106764 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8106358:	687b      	ldr	r3, [r7, #4]
 810635a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810635c:	6878      	ldr	r0, [r7, #4]
 810635e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8106360:	e200      	b.n	8106764 <HAL_DMA_IRQHandler+0xe08>
 8106362:	bf00      	nop
 8106364:	40020010 	.word	0x40020010
 8106368:	40020028 	.word	0x40020028
 810636c:	40020040 	.word	0x40020040
 8106370:	40020058 	.word	0x40020058
 8106374:	40020070 	.word	0x40020070
 8106378:	40020088 	.word	0x40020088
 810637c:	400200a0 	.word	0x400200a0
 8106380:	400200b8 	.word	0x400200b8
 8106384:	40020410 	.word	0x40020410
 8106388:	40020428 	.word	0x40020428
 810638c:	40020440 	.word	0x40020440
 8106390:	40020458 	.word	0x40020458
 8106394:	40020470 	.word	0x40020470
 8106398:	40020488 	.word	0x40020488
 810639c:	400204a0 	.word	0x400204a0
 81063a0:	400204b8 	.word	0x400204b8
 81063a4:	58025408 	.word	0x58025408
 81063a8:	5802541c 	.word	0x5802541c
 81063ac:	58025430 	.word	0x58025430
 81063b0:	58025444 	.word	0x58025444
 81063b4:	58025458 	.word	0x58025458
 81063b8:	5802546c 	.word	0x5802546c
 81063bc:	58025480 	.word	0x58025480
 81063c0:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 81063c4:	693b      	ldr	r3, [r7, #16]
 81063c6:	f003 0320 	and.w	r3, r3, #32
 81063ca:	2b00      	cmp	r3, #0
 81063cc:	d160      	bne.n	8106490 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 81063ce:	687b      	ldr	r3, [r7, #4]
 81063d0:	681b      	ldr	r3, [r3, #0]
 81063d2:	4a8c      	ldr	r2, [pc, #560]	; (8106604 <HAL_DMA_IRQHandler+0xca8>)
 81063d4:	4293      	cmp	r3, r2
 81063d6:	d04a      	beq.n	810646e <HAL_DMA_IRQHandler+0xb12>
 81063d8:	687b      	ldr	r3, [r7, #4]
 81063da:	681b      	ldr	r3, [r3, #0]
 81063dc:	4a8a      	ldr	r2, [pc, #552]	; (8106608 <HAL_DMA_IRQHandler+0xcac>)
 81063de:	4293      	cmp	r3, r2
 81063e0:	d045      	beq.n	810646e <HAL_DMA_IRQHandler+0xb12>
 81063e2:	687b      	ldr	r3, [r7, #4]
 81063e4:	681b      	ldr	r3, [r3, #0]
 81063e6:	4a89      	ldr	r2, [pc, #548]	; (810660c <HAL_DMA_IRQHandler+0xcb0>)
 81063e8:	4293      	cmp	r3, r2
 81063ea:	d040      	beq.n	810646e <HAL_DMA_IRQHandler+0xb12>
 81063ec:	687b      	ldr	r3, [r7, #4]
 81063ee:	681b      	ldr	r3, [r3, #0]
 81063f0:	4a87      	ldr	r2, [pc, #540]	; (8106610 <HAL_DMA_IRQHandler+0xcb4>)
 81063f2:	4293      	cmp	r3, r2
 81063f4:	d03b      	beq.n	810646e <HAL_DMA_IRQHandler+0xb12>
 81063f6:	687b      	ldr	r3, [r7, #4]
 81063f8:	681b      	ldr	r3, [r3, #0]
 81063fa:	4a86      	ldr	r2, [pc, #536]	; (8106614 <HAL_DMA_IRQHandler+0xcb8>)
 81063fc:	4293      	cmp	r3, r2
 81063fe:	d036      	beq.n	810646e <HAL_DMA_IRQHandler+0xb12>
 8106400:	687b      	ldr	r3, [r7, #4]
 8106402:	681b      	ldr	r3, [r3, #0]
 8106404:	4a84      	ldr	r2, [pc, #528]	; (8106618 <HAL_DMA_IRQHandler+0xcbc>)
 8106406:	4293      	cmp	r3, r2
 8106408:	d031      	beq.n	810646e <HAL_DMA_IRQHandler+0xb12>
 810640a:	687b      	ldr	r3, [r7, #4]
 810640c:	681b      	ldr	r3, [r3, #0]
 810640e:	4a83      	ldr	r2, [pc, #524]	; (810661c <HAL_DMA_IRQHandler+0xcc0>)
 8106410:	4293      	cmp	r3, r2
 8106412:	d02c      	beq.n	810646e <HAL_DMA_IRQHandler+0xb12>
 8106414:	687b      	ldr	r3, [r7, #4]
 8106416:	681b      	ldr	r3, [r3, #0]
 8106418:	4a81      	ldr	r2, [pc, #516]	; (8106620 <HAL_DMA_IRQHandler+0xcc4>)
 810641a:	4293      	cmp	r3, r2
 810641c:	d027      	beq.n	810646e <HAL_DMA_IRQHandler+0xb12>
 810641e:	687b      	ldr	r3, [r7, #4]
 8106420:	681b      	ldr	r3, [r3, #0]
 8106422:	4a80      	ldr	r2, [pc, #512]	; (8106624 <HAL_DMA_IRQHandler+0xcc8>)
 8106424:	4293      	cmp	r3, r2
 8106426:	d022      	beq.n	810646e <HAL_DMA_IRQHandler+0xb12>
 8106428:	687b      	ldr	r3, [r7, #4]
 810642a:	681b      	ldr	r3, [r3, #0]
 810642c:	4a7e      	ldr	r2, [pc, #504]	; (8106628 <HAL_DMA_IRQHandler+0xccc>)
 810642e:	4293      	cmp	r3, r2
 8106430:	d01d      	beq.n	810646e <HAL_DMA_IRQHandler+0xb12>
 8106432:	687b      	ldr	r3, [r7, #4]
 8106434:	681b      	ldr	r3, [r3, #0]
 8106436:	4a7d      	ldr	r2, [pc, #500]	; (810662c <HAL_DMA_IRQHandler+0xcd0>)
 8106438:	4293      	cmp	r3, r2
 810643a:	d018      	beq.n	810646e <HAL_DMA_IRQHandler+0xb12>
 810643c:	687b      	ldr	r3, [r7, #4]
 810643e:	681b      	ldr	r3, [r3, #0]
 8106440:	4a7b      	ldr	r2, [pc, #492]	; (8106630 <HAL_DMA_IRQHandler+0xcd4>)
 8106442:	4293      	cmp	r3, r2
 8106444:	d013      	beq.n	810646e <HAL_DMA_IRQHandler+0xb12>
 8106446:	687b      	ldr	r3, [r7, #4]
 8106448:	681b      	ldr	r3, [r3, #0]
 810644a:	4a7a      	ldr	r2, [pc, #488]	; (8106634 <HAL_DMA_IRQHandler+0xcd8>)
 810644c:	4293      	cmp	r3, r2
 810644e:	d00e      	beq.n	810646e <HAL_DMA_IRQHandler+0xb12>
 8106450:	687b      	ldr	r3, [r7, #4]
 8106452:	681b      	ldr	r3, [r3, #0]
 8106454:	4a78      	ldr	r2, [pc, #480]	; (8106638 <HAL_DMA_IRQHandler+0xcdc>)
 8106456:	4293      	cmp	r3, r2
 8106458:	d009      	beq.n	810646e <HAL_DMA_IRQHandler+0xb12>
 810645a:	687b      	ldr	r3, [r7, #4]
 810645c:	681b      	ldr	r3, [r3, #0]
 810645e:	4a77      	ldr	r2, [pc, #476]	; (810663c <HAL_DMA_IRQHandler+0xce0>)
 8106460:	4293      	cmp	r3, r2
 8106462:	d004      	beq.n	810646e <HAL_DMA_IRQHandler+0xb12>
 8106464:	687b      	ldr	r3, [r7, #4]
 8106466:	681b      	ldr	r3, [r3, #0]
 8106468:	4a75      	ldr	r2, [pc, #468]	; (8106640 <HAL_DMA_IRQHandler+0xce4>)
 810646a:	4293      	cmp	r3, r2
 810646c:	d108      	bne.n	8106480 <HAL_DMA_IRQHandler+0xb24>
 810646e:	687b      	ldr	r3, [r7, #4]
 8106470:	681b      	ldr	r3, [r3, #0]
 8106472:	681a      	ldr	r2, [r3, #0]
 8106474:	687b      	ldr	r3, [r7, #4]
 8106476:	681b      	ldr	r3, [r3, #0]
 8106478:	f022 0208 	bic.w	r2, r2, #8
 810647c:	601a      	str	r2, [r3, #0]
 810647e:	e007      	b.n	8106490 <HAL_DMA_IRQHandler+0xb34>
 8106480:	687b      	ldr	r3, [r7, #4]
 8106482:	681b      	ldr	r3, [r3, #0]
 8106484:	681a      	ldr	r2, [r3, #0]
 8106486:	687b      	ldr	r3, [r7, #4]
 8106488:	681b      	ldr	r3, [r3, #0]
 810648a:	f022 0204 	bic.w	r2, r2, #4
 810648e:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8106490:	687b      	ldr	r3, [r7, #4]
 8106492:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8106494:	2b00      	cmp	r3, #0
 8106496:	f000 8165 	beq.w	8106764 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 810649a:	687b      	ldr	r3, [r7, #4]
 810649c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810649e:	6878      	ldr	r0, [r7, #4]
 81064a0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 81064a2:	e15f      	b.n	8106764 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 81064a4:	687b      	ldr	r3, [r7, #4]
 81064a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81064a8:	f003 031f 	and.w	r3, r3, #31
 81064ac:	2202      	movs	r2, #2
 81064ae:	409a      	lsls	r2, r3
 81064b0:	697b      	ldr	r3, [r7, #20]
 81064b2:	4013      	ands	r3, r2
 81064b4:	2b00      	cmp	r3, #0
 81064b6:	f000 80c5 	beq.w	8106644 <HAL_DMA_IRQHandler+0xce8>
 81064ba:	693b      	ldr	r3, [r7, #16]
 81064bc:	f003 0302 	and.w	r3, r3, #2
 81064c0:	2b00      	cmp	r3, #0
 81064c2:	f000 80bf 	beq.w	8106644 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 81064c6:	687b      	ldr	r3, [r7, #4]
 81064c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81064ca:	f003 031f 	and.w	r3, r3, #31
 81064ce:	2202      	movs	r2, #2
 81064d0:	409a      	lsls	r2, r3
 81064d2:	69fb      	ldr	r3, [r7, #28]
 81064d4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 81064d6:	693b      	ldr	r3, [r7, #16]
 81064d8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 81064dc:	2b00      	cmp	r3, #0
 81064de:	d018      	beq.n	8106512 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 81064e0:	693b      	ldr	r3, [r7, #16]
 81064e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 81064e6:	2b00      	cmp	r3, #0
 81064e8:	d109      	bne.n	81064fe <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 81064ea:	687b      	ldr	r3, [r7, #4]
 81064ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 81064ee:	2b00      	cmp	r3, #0
 81064f0:	f000 813a 	beq.w	8106768 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 81064f4:	687b      	ldr	r3, [r7, #4]
 81064f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 81064f8:	6878      	ldr	r0, [r7, #4]
 81064fa:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 81064fc:	e134      	b.n	8106768 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 81064fe:	687b      	ldr	r3, [r7, #4]
 8106500:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8106502:	2b00      	cmp	r3, #0
 8106504:	f000 8130 	beq.w	8106768 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8106508:	687b      	ldr	r3, [r7, #4]
 810650a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810650c:	6878      	ldr	r0, [r7, #4]
 810650e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8106510:	e12a      	b.n	8106768 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8106512:	693b      	ldr	r3, [r7, #16]
 8106514:	f003 0320 	and.w	r3, r3, #32
 8106518:	2b00      	cmp	r3, #0
 810651a:	d168      	bne.n	81065ee <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 810651c:	687b      	ldr	r3, [r7, #4]
 810651e:	681b      	ldr	r3, [r3, #0]
 8106520:	4a38      	ldr	r2, [pc, #224]	; (8106604 <HAL_DMA_IRQHandler+0xca8>)
 8106522:	4293      	cmp	r3, r2
 8106524:	d04a      	beq.n	81065bc <HAL_DMA_IRQHandler+0xc60>
 8106526:	687b      	ldr	r3, [r7, #4]
 8106528:	681b      	ldr	r3, [r3, #0]
 810652a:	4a37      	ldr	r2, [pc, #220]	; (8106608 <HAL_DMA_IRQHandler+0xcac>)
 810652c:	4293      	cmp	r3, r2
 810652e:	d045      	beq.n	81065bc <HAL_DMA_IRQHandler+0xc60>
 8106530:	687b      	ldr	r3, [r7, #4]
 8106532:	681b      	ldr	r3, [r3, #0]
 8106534:	4a35      	ldr	r2, [pc, #212]	; (810660c <HAL_DMA_IRQHandler+0xcb0>)
 8106536:	4293      	cmp	r3, r2
 8106538:	d040      	beq.n	81065bc <HAL_DMA_IRQHandler+0xc60>
 810653a:	687b      	ldr	r3, [r7, #4]
 810653c:	681b      	ldr	r3, [r3, #0]
 810653e:	4a34      	ldr	r2, [pc, #208]	; (8106610 <HAL_DMA_IRQHandler+0xcb4>)
 8106540:	4293      	cmp	r3, r2
 8106542:	d03b      	beq.n	81065bc <HAL_DMA_IRQHandler+0xc60>
 8106544:	687b      	ldr	r3, [r7, #4]
 8106546:	681b      	ldr	r3, [r3, #0]
 8106548:	4a32      	ldr	r2, [pc, #200]	; (8106614 <HAL_DMA_IRQHandler+0xcb8>)
 810654a:	4293      	cmp	r3, r2
 810654c:	d036      	beq.n	81065bc <HAL_DMA_IRQHandler+0xc60>
 810654e:	687b      	ldr	r3, [r7, #4]
 8106550:	681b      	ldr	r3, [r3, #0]
 8106552:	4a31      	ldr	r2, [pc, #196]	; (8106618 <HAL_DMA_IRQHandler+0xcbc>)
 8106554:	4293      	cmp	r3, r2
 8106556:	d031      	beq.n	81065bc <HAL_DMA_IRQHandler+0xc60>
 8106558:	687b      	ldr	r3, [r7, #4]
 810655a:	681b      	ldr	r3, [r3, #0]
 810655c:	4a2f      	ldr	r2, [pc, #188]	; (810661c <HAL_DMA_IRQHandler+0xcc0>)
 810655e:	4293      	cmp	r3, r2
 8106560:	d02c      	beq.n	81065bc <HAL_DMA_IRQHandler+0xc60>
 8106562:	687b      	ldr	r3, [r7, #4]
 8106564:	681b      	ldr	r3, [r3, #0]
 8106566:	4a2e      	ldr	r2, [pc, #184]	; (8106620 <HAL_DMA_IRQHandler+0xcc4>)
 8106568:	4293      	cmp	r3, r2
 810656a:	d027      	beq.n	81065bc <HAL_DMA_IRQHandler+0xc60>
 810656c:	687b      	ldr	r3, [r7, #4]
 810656e:	681b      	ldr	r3, [r3, #0]
 8106570:	4a2c      	ldr	r2, [pc, #176]	; (8106624 <HAL_DMA_IRQHandler+0xcc8>)
 8106572:	4293      	cmp	r3, r2
 8106574:	d022      	beq.n	81065bc <HAL_DMA_IRQHandler+0xc60>
 8106576:	687b      	ldr	r3, [r7, #4]
 8106578:	681b      	ldr	r3, [r3, #0]
 810657a:	4a2b      	ldr	r2, [pc, #172]	; (8106628 <HAL_DMA_IRQHandler+0xccc>)
 810657c:	4293      	cmp	r3, r2
 810657e:	d01d      	beq.n	81065bc <HAL_DMA_IRQHandler+0xc60>
 8106580:	687b      	ldr	r3, [r7, #4]
 8106582:	681b      	ldr	r3, [r3, #0]
 8106584:	4a29      	ldr	r2, [pc, #164]	; (810662c <HAL_DMA_IRQHandler+0xcd0>)
 8106586:	4293      	cmp	r3, r2
 8106588:	d018      	beq.n	81065bc <HAL_DMA_IRQHandler+0xc60>
 810658a:	687b      	ldr	r3, [r7, #4]
 810658c:	681b      	ldr	r3, [r3, #0]
 810658e:	4a28      	ldr	r2, [pc, #160]	; (8106630 <HAL_DMA_IRQHandler+0xcd4>)
 8106590:	4293      	cmp	r3, r2
 8106592:	d013      	beq.n	81065bc <HAL_DMA_IRQHandler+0xc60>
 8106594:	687b      	ldr	r3, [r7, #4]
 8106596:	681b      	ldr	r3, [r3, #0]
 8106598:	4a26      	ldr	r2, [pc, #152]	; (8106634 <HAL_DMA_IRQHandler+0xcd8>)
 810659a:	4293      	cmp	r3, r2
 810659c:	d00e      	beq.n	81065bc <HAL_DMA_IRQHandler+0xc60>
 810659e:	687b      	ldr	r3, [r7, #4]
 81065a0:	681b      	ldr	r3, [r3, #0]
 81065a2:	4a25      	ldr	r2, [pc, #148]	; (8106638 <HAL_DMA_IRQHandler+0xcdc>)
 81065a4:	4293      	cmp	r3, r2
 81065a6:	d009      	beq.n	81065bc <HAL_DMA_IRQHandler+0xc60>
 81065a8:	687b      	ldr	r3, [r7, #4]
 81065aa:	681b      	ldr	r3, [r3, #0]
 81065ac:	4a23      	ldr	r2, [pc, #140]	; (810663c <HAL_DMA_IRQHandler+0xce0>)
 81065ae:	4293      	cmp	r3, r2
 81065b0:	d004      	beq.n	81065bc <HAL_DMA_IRQHandler+0xc60>
 81065b2:	687b      	ldr	r3, [r7, #4]
 81065b4:	681b      	ldr	r3, [r3, #0]
 81065b6:	4a22      	ldr	r2, [pc, #136]	; (8106640 <HAL_DMA_IRQHandler+0xce4>)
 81065b8:	4293      	cmp	r3, r2
 81065ba:	d108      	bne.n	81065ce <HAL_DMA_IRQHandler+0xc72>
 81065bc:	687b      	ldr	r3, [r7, #4]
 81065be:	681b      	ldr	r3, [r3, #0]
 81065c0:	681a      	ldr	r2, [r3, #0]
 81065c2:	687b      	ldr	r3, [r7, #4]
 81065c4:	681b      	ldr	r3, [r3, #0]
 81065c6:	f022 0214 	bic.w	r2, r2, #20
 81065ca:	601a      	str	r2, [r3, #0]
 81065cc:	e007      	b.n	81065de <HAL_DMA_IRQHandler+0xc82>
 81065ce:	687b      	ldr	r3, [r7, #4]
 81065d0:	681b      	ldr	r3, [r3, #0]
 81065d2:	681a      	ldr	r2, [r3, #0]
 81065d4:	687b      	ldr	r3, [r7, #4]
 81065d6:	681b      	ldr	r3, [r3, #0]
 81065d8:	f022 020a 	bic.w	r2, r2, #10
 81065dc:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 81065de:	687b      	ldr	r3, [r7, #4]
 81065e0:	2200      	movs	r2, #0
 81065e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 81065e6:	687b      	ldr	r3, [r7, #4]
 81065e8:	2201      	movs	r2, #1
 81065ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 81065ee:	687b      	ldr	r3, [r7, #4]
 81065f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81065f2:	2b00      	cmp	r3, #0
 81065f4:	f000 80b8 	beq.w	8106768 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 81065f8:	687b      	ldr	r3, [r7, #4]
 81065fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81065fc:	6878      	ldr	r0, [r7, #4]
 81065fe:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8106600:	e0b2      	b.n	8106768 <HAL_DMA_IRQHandler+0xe0c>
 8106602:	bf00      	nop
 8106604:	40020010 	.word	0x40020010
 8106608:	40020028 	.word	0x40020028
 810660c:	40020040 	.word	0x40020040
 8106610:	40020058 	.word	0x40020058
 8106614:	40020070 	.word	0x40020070
 8106618:	40020088 	.word	0x40020088
 810661c:	400200a0 	.word	0x400200a0
 8106620:	400200b8 	.word	0x400200b8
 8106624:	40020410 	.word	0x40020410
 8106628:	40020428 	.word	0x40020428
 810662c:	40020440 	.word	0x40020440
 8106630:	40020458 	.word	0x40020458
 8106634:	40020470 	.word	0x40020470
 8106638:	40020488 	.word	0x40020488
 810663c:	400204a0 	.word	0x400204a0
 8106640:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8106644:	687b      	ldr	r3, [r7, #4]
 8106646:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8106648:	f003 031f 	and.w	r3, r3, #31
 810664c:	2208      	movs	r2, #8
 810664e:	409a      	lsls	r2, r3
 8106650:	697b      	ldr	r3, [r7, #20]
 8106652:	4013      	ands	r3, r2
 8106654:	2b00      	cmp	r3, #0
 8106656:	f000 8088 	beq.w	810676a <HAL_DMA_IRQHandler+0xe0e>
 810665a:	693b      	ldr	r3, [r7, #16]
 810665c:	f003 0308 	and.w	r3, r3, #8
 8106660:	2b00      	cmp	r3, #0
 8106662:	f000 8082 	beq.w	810676a <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8106666:	687b      	ldr	r3, [r7, #4]
 8106668:	681b      	ldr	r3, [r3, #0]
 810666a:	4a41      	ldr	r2, [pc, #260]	; (8106770 <HAL_DMA_IRQHandler+0xe14>)
 810666c:	4293      	cmp	r3, r2
 810666e:	d04a      	beq.n	8106706 <HAL_DMA_IRQHandler+0xdaa>
 8106670:	687b      	ldr	r3, [r7, #4]
 8106672:	681b      	ldr	r3, [r3, #0]
 8106674:	4a3f      	ldr	r2, [pc, #252]	; (8106774 <HAL_DMA_IRQHandler+0xe18>)
 8106676:	4293      	cmp	r3, r2
 8106678:	d045      	beq.n	8106706 <HAL_DMA_IRQHandler+0xdaa>
 810667a:	687b      	ldr	r3, [r7, #4]
 810667c:	681b      	ldr	r3, [r3, #0]
 810667e:	4a3e      	ldr	r2, [pc, #248]	; (8106778 <HAL_DMA_IRQHandler+0xe1c>)
 8106680:	4293      	cmp	r3, r2
 8106682:	d040      	beq.n	8106706 <HAL_DMA_IRQHandler+0xdaa>
 8106684:	687b      	ldr	r3, [r7, #4]
 8106686:	681b      	ldr	r3, [r3, #0]
 8106688:	4a3c      	ldr	r2, [pc, #240]	; (810677c <HAL_DMA_IRQHandler+0xe20>)
 810668a:	4293      	cmp	r3, r2
 810668c:	d03b      	beq.n	8106706 <HAL_DMA_IRQHandler+0xdaa>
 810668e:	687b      	ldr	r3, [r7, #4]
 8106690:	681b      	ldr	r3, [r3, #0]
 8106692:	4a3b      	ldr	r2, [pc, #236]	; (8106780 <HAL_DMA_IRQHandler+0xe24>)
 8106694:	4293      	cmp	r3, r2
 8106696:	d036      	beq.n	8106706 <HAL_DMA_IRQHandler+0xdaa>
 8106698:	687b      	ldr	r3, [r7, #4]
 810669a:	681b      	ldr	r3, [r3, #0]
 810669c:	4a39      	ldr	r2, [pc, #228]	; (8106784 <HAL_DMA_IRQHandler+0xe28>)
 810669e:	4293      	cmp	r3, r2
 81066a0:	d031      	beq.n	8106706 <HAL_DMA_IRQHandler+0xdaa>
 81066a2:	687b      	ldr	r3, [r7, #4]
 81066a4:	681b      	ldr	r3, [r3, #0]
 81066a6:	4a38      	ldr	r2, [pc, #224]	; (8106788 <HAL_DMA_IRQHandler+0xe2c>)
 81066a8:	4293      	cmp	r3, r2
 81066aa:	d02c      	beq.n	8106706 <HAL_DMA_IRQHandler+0xdaa>
 81066ac:	687b      	ldr	r3, [r7, #4]
 81066ae:	681b      	ldr	r3, [r3, #0]
 81066b0:	4a36      	ldr	r2, [pc, #216]	; (810678c <HAL_DMA_IRQHandler+0xe30>)
 81066b2:	4293      	cmp	r3, r2
 81066b4:	d027      	beq.n	8106706 <HAL_DMA_IRQHandler+0xdaa>
 81066b6:	687b      	ldr	r3, [r7, #4]
 81066b8:	681b      	ldr	r3, [r3, #0]
 81066ba:	4a35      	ldr	r2, [pc, #212]	; (8106790 <HAL_DMA_IRQHandler+0xe34>)
 81066bc:	4293      	cmp	r3, r2
 81066be:	d022      	beq.n	8106706 <HAL_DMA_IRQHandler+0xdaa>
 81066c0:	687b      	ldr	r3, [r7, #4]
 81066c2:	681b      	ldr	r3, [r3, #0]
 81066c4:	4a33      	ldr	r2, [pc, #204]	; (8106794 <HAL_DMA_IRQHandler+0xe38>)
 81066c6:	4293      	cmp	r3, r2
 81066c8:	d01d      	beq.n	8106706 <HAL_DMA_IRQHandler+0xdaa>
 81066ca:	687b      	ldr	r3, [r7, #4]
 81066cc:	681b      	ldr	r3, [r3, #0]
 81066ce:	4a32      	ldr	r2, [pc, #200]	; (8106798 <HAL_DMA_IRQHandler+0xe3c>)
 81066d0:	4293      	cmp	r3, r2
 81066d2:	d018      	beq.n	8106706 <HAL_DMA_IRQHandler+0xdaa>
 81066d4:	687b      	ldr	r3, [r7, #4]
 81066d6:	681b      	ldr	r3, [r3, #0]
 81066d8:	4a30      	ldr	r2, [pc, #192]	; (810679c <HAL_DMA_IRQHandler+0xe40>)
 81066da:	4293      	cmp	r3, r2
 81066dc:	d013      	beq.n	8106706 <HAL_DMA_IRQHandler+0xdaa>
 81066de:	687b      	ldr	r3, [r7, #4]
 81066e0:	681b      	ldr	r3, [r3, #0]
 81066e2:	4a2f      	ldr	r2, [pc, #188]	; (81067a0 <HAL_DMA_IRQHandler+0xe44>)
 81066e4:	4293      	cmp	r3, r2
 81066e6:	d00e      	beq.n	8106706 <HAL_DMA_IRQHandler+0xdaa>
 81066e8:	687b      	ldr	r3, [r7, #4]
 81066ea:	681b      	ldr	r3, [r3, #0]
 81066ec:	4a2d      	ldr	r2, [pc, #180]	; (81067a4 <HAL_DMA_IRQHandler+0xe48>)
 81066ee:	4293      	cmp	r3, r2
 81066f0:	d009      	beq.n	8106706 <HAL_DMA_IRQHandler+0xdaa>
 81066f2:	687b      	ldr	r3, [r7, #4]
 81066f4:	681b      	ldr	r3, [r3, #0]
 81066f6:	4a2c      	ldr	r2, [pc, #176]	; (81067a8 <HAL_DMA_IRQHandler+0xe4c>)
 81066f8:	4293      	cmp	r3, r2
 81066fa:	d004      	beq.n	8106706 <HAL_DMA_IRQHandler+0xdaa>
 81066fc:	687b      	ldr	r3, [r7, #4]
 81066fe:	681b      	ldr	r3, [r3, #0]
 8106700:	4a2a      	ldr	r2, [pc, #168]	; (81067ac <HAL_DMA_IRQHandler+0xe50>)
 8106702:	4293      	cmp	r3, r2
 8106704:	d108      	bne.n	8106718 <HAL_DMA_IRQHandler+0xdbc>
 8106706:	687b      	ldr	r3, [r7, #4]
 8106708:	681b      	ldr	r3, [r3, #0]
 810670a:	681a      	ldr	r2, [r3, #0]
 810670c:	687b      	ldr	r3, [r7, #4]
 810670e:	681b      	ldr	r3, [r3, #0]
 8106710:	f022 021c 	bic.w	r2, r2, #28
 8106714:	601a      	str	r2, [r3, #0]
 8106716:	e007      	b.n	8106728 <HAL_DMA_IRQHandler+0xdcc>
 8106718:	687b      	ldr	r3, [r7, #4]
 810671a:	681b      	ldr	r3, [r3, #0]
 810671c:	681a      	ldr	r2, [r3, #0]
 810671e:	687b      	ldr	r3, [r7, #4]
 8106720:	681b      	ldr	r3, [r3, #0]
 8106722:	f022 020e 	bic.w	r2, r2, #14
 8106726:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8106728:	687b      	ldr	r3, [r7, #4]
 810672a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 810672c:	f003 031f 	and.w	r3, r3, #31
 8106730:	2201      	movs	r2, #1
 8106732:	409a      	lsls	r2, r3
 8106734:	69fb      	ldr	r3, [r7, #28]
 8106736:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8106738:	687b      	ldr	r3, [r7, #4]
 810673a:	2201      	movs	r2, #1
 810673c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 810673e:	687b      	ldr	r3, [r7, #4]
 8106740:	2200      	movs	r2, #0
 8106742:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8106746:	687b      	ldr	r3, [r7, #4]
 8106748:	2201      	movs	r2, #1
 810674a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 810674e:	687b      	ldr	r3, [r7, #4]
 8106750:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8106752:	2b00      	cmp	r3, #0
 8106754:	d009      	beq.n	810676a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8106756:	687b      	ldr	r3, [r7, #4]
 8106758:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 810675a:	6878      	ldr	r0, [r7, #4]
 810675c:	4798      	blx	r3
 810675e:	e004      	b.n	810676a <HAL_DMA_IRQHandler+0xe0e>
          return;
 8106760:	bf00      	nop
 8106762:	e002      	b.n	810676a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8106764:	bf00      	nop
 8106766:	e000      	b.n	810676a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8106768:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 810676a:	3728      	adds	r7, #40	; 0x28
 810676c:	46bd      	mov	sp, r7
 810676e:	bd80      	pop	{r7, pc}
 8106770:	40020010 	.word	0x40020010
 8106774:	40020028 	.word	0x40020028
 8106778:	40020040 	.word	0x40020040
 810677c:	40020058 	.word	0x40020058
 8106780:	40020070 	.word	0x40020070
 8106784:	40020088 	.word	0x40020088
 8106788:	400200a0 	.word	0x400200a0
 810678c:	400200b8 	.word	0x400200b8
 8106790:	40020410 	.word	0x40020410
 8106794:	40020428 	.word	0x40020428
 8106798:	40020440 	.word	0x40020440
 810679c:	40020458 	.word	0x40020458
 81067a0:	40020470 	.word	0x40020470
 81067a4:	40020488 	.word	0x40020488
 81067a8:	400204a0 	.word	0x400204a0
 81067ac:	400204b8 	.word	0x400204b8

081067b0 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 81067b0:	b480      	push	{r7}
 81067b2:	b083      	sub	sp, #12
 81067b4:	af00      	add	r7, sp, #0
 81067b6:	6078      	str	r0, [r7, #4]
  return hdma->State;
 81067b8:	687b      	ldr	r3, [r7, #4]
 81067ba:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 81067be:	b2db      	uxtb	r3, r3
}
 81067c0:	4618      	mov	r0, r3
 81067c2:	370c      	adds	r7, #12
 81067c4:	46bd      	mov	sp, r7
 81067c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81067ca:	4770      	bx	lr

081067cc <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 81067cc:	b480      	push	{r7}
 81067ce:	b087      	sub	sp, #28
 81067d0:	af00      	add	r7, sp, #0
 81067d2:	60f8      	str	r0, [r7, #12]
 81067d4:	60b9      	str	r1, [r7, #8]
 81067d6:	607a      	str	r2, [r7, #4]
 81067d8:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 81067da:	68fb      	ldr	r3, [r7, #12]
 81067dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81067de:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 81067e0:	68fb      	ldr	r3, [r7, #12]
 81067e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81067e4:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 81067e6:	68fb      	ldr	r3, [r7, #12]
 81067e8:	681b      	ldr	r3, [r3, #0]
 81067ea:	4a84      	ldr	r2, [pc, #528]	; (81069fc <DMA_SetConfig+0x230>)
 81067ec:	4293      	cmp	r3, r2
 81067ee:	d072      	beq.n	81068d6 <DMA_SetConfig+0x10a>
 81067f0:	68fb      	ldr	r3, [r7, #12]
 81067f2:	681b      	ldr	r3, [r3, #0]
 81067f4:	4a82      	ldr	r2, [pc, #520]	; (8106a00 <DMA_SetConfig+0x234>)
 81067f6:	4293      	cmp	r3, r2
 81067f8:	d06d      	beq.n	81068d6 <DMA_SetConfig+0x10a>
 81067fa:	68fb      	ldr	r3, [r7, #12]
 81067fc:	681b      	ldr	r3, [r3, #0]
 81067fe:	4a81      	ldr	r2, [pc, #516]	; (8106a04 <DMA_SetConfig+0x238>)
 8106800:	4293      	cmp	r3, r2
 8106802:	d068      	beq.n	81068d6 <DMA_SetConfig+0x10a>
 8106804:	68fb      	ldr	r3, [r7, #12]
 8106806:	681b      	ldr	r3, [r3, #0]
 8106808:	4a7f      	ldr	r2, [pc, #508]	; (8106a08 <DMA_SetConfig+0x23c>)
 810680a:	4293      	cmp	r3, r2
 810680c:	d063      	beq.n	81068d6 <DMA_SetConfig+0x10a>
 810680e:	68fb      	ldr	r3, [r7, #12]
 8106810:	681b      	ldr	r3, [r3, #0]
 8106812:	4a7e      	ldr	r2, [pc, #504]	; (8106a0c <DMA_SetConfig+0x240>)
 8106814:	4293      	cmp	r3, r2
 8106816:	d05e      	beq.n	81068d6 <DMA_SetConfig+0x10a>
 8106818:	68fb      	ldr	r3, [r7, #12]
 810681a:	681b      	ldr	r3, [r3, #0]
 810681c:	4a7c      	ldr	r2, [pc, #496]	; (8106a10 <DMA_SetConfig+0x244>)
 810681e:	4293      	cmp	r3, r2
 8106820:	d059      	beq.n	81068d6 <DMA_SetConfig+0x10a>
 8106822:	68fb      	ldr	r3, [r7, #12]
 8106824:	681b      	ldr	r3, [r3, #0]
 8106826:	4a7b      	ldr	r2, [pc, #492]	; (8106a14 <DMA_SetConfig+0x248>)
 8106828:	4293      	cmp	r3, r2
 810682a:	d054      	beq.n	81068d6 <DMA_SetConfig+0x10a>
 810682c:	68fb      	ldr	r3, [r7, #12]
 810682e:	681b      	ldr	r3, [r3, #0]
 8106830:	4a79      	ldr	r2, [pc, #484]	; (8106a18 <DMA_SetConfig+0x24c>)
 8106832:	4293      	cmp	r3, r2
 8106834:	d04f      	beq.n	81068d6 <DMA_SetConfig+0x10a>
 8106836:	68fb      	ldr	r3, [r7, #12]
 8106838:	681b      	ldr	r3, [r3, #0]
 810683a:	4a78      	ldr	r2, [pc, #480]	; (8106a1c <DMA_SetConfig+0x250>)
 810683c:	4293      	cmp	r3, r2
 810683e:	d04a      	beq.n	81068d6 <DMA_SetConfig+0x10a>
 8106840:	68fb      	ldr	r3, [r7, #12]
 8106842:	681b      	ldr	r3, [r3, #0]
 8106844:	4a76      	ldr	r2, [pc, #472]	; (8106a20 <DMA_SetConfig+0x254>)
 8106846:	4293      	cmp	r3, r2
 8106848:	d045      	beq.n	81068d6 <DMA_SetConfig+0x10a>
 810684a:	68fb      	ldr	r3, [r7, #12]
 810684c:	681b      	ldr	r3, [r3, #0]
 810684e:	4a75      	ldr	r2, [pc, #468]	; (8106a24 <DMA_SetConfig+0x258>)
 8106850:	4293      	cmp	r3, r2
 8106852:	d040      	beq.n	81068d6 <DMA_SetConfig+0x10a>
 8106854:	68fb      	ldr	r3, [r7, #12]
 8106856:	681b      	ldr	r3, [r3, #0]
 8106858:	4a73      	ldr	r2, [pc, #460]	; (8106a28 <DMA_SetConfig+0x25c>)
 810685a:	4293      	cmp	r3, r2
 810685c:	d03b      	beq.n	81068d6 <DMA_SetConfig+0x10a>
 810685e:	68fb      	ldr	r3, [r7, #12]
 8106860:	681b      	ldr	r3, [r3, #0]
 8106862:	4a72      	ldr	r2, [pc, #456]	; (8106a2c <DMA_SetConfig+0x260>)
 8106864:	4293      	cmp	r3, r2
 8106866:	d036      	beq.n	81068d6 <DMA_SetConfig+0x10a>
 8106868:	68fb      	ldr	r3, [r7, #12]
 810686a:	681b      	ldr	r3, [r3, #0]
 810686c:	4a70      	ldr	r2, [pc, #448]	; (8106a30 <DMA_SetConfig+0x264>)
 810686e:	4293      	cmp	r3, r2
 8106870:	d031      	beq.n	81068d6 <DMA_SetConfig+0x10a>
 8106872:	68fb      	ldr	r3, [r7, #12]
 8106874:	681b      	ldr	r3, [r3, #0]
 8106876:	4a6f      	ldr	r2, [pc, #444]	; (8106a34 <DMA_SetConfig+0x268>)
 8106878:	4293      	cmp	r3, r2
 810687a:	d02c      	beq.n	81068d6 <DMA_SetConfig+0x10a>
 810687c:	68fb      	ldr	r3, [r7, #12]
 810687e:	681b      	ldr	r3, [r3, #0]
 8106880:	4a6d      	ldr	r2, [pc, #436]	; (8106a38 <DMA_SetConfig+0x26c>)
 8106882:	4293      	cmp	r3, r2
 8106884:	d027      	beq.n	81068d6 <DMA_SetConfig+0x10a>
 8106886:	68fb      	ldr	r3, [r7, #12]
 8106888:	681b      	ldr	r3, [r3, #0]
 810688a:	4a6c      	ldr	r2, [pc, #432]	; (8106a3c <DMA_SetConfig+0x270>)
 810688c:	4293      	cmp	r3, r2
 810688e:	d022      	beq.n	81068d6 <DMA_SetConfig+0x10a>
 8106890:	68fb      	ldr	r3, [r7, #12]
 8106892:	681b      	ldr	r3, [r3, #0]
 8106894:	4a6a      	ldr	r2, [pc, #424]	; (8106a40 <DMA_SetConfig+0x274>)
 8106896:	4293      	cmp	r3, r2
 8106898:	d01d      	beq.n	81068d6 <DMA_SetConfig+0x10a>
 810689a:	68fb      	ldr	r3, [r7, #12]
 810689c:	681b      	ldr	r3, [r3, #0]
 810689e:	4a69      	ldr	r2, [pc, #420]	; (8106a44 <DMA_SetConfig+0x278>)
 81068a0:	4293      	cmp	r3, r2
 81068a2:	d018      	beq.n	81068d6 <DMA_SetConfig+0x10a>
 81068a4:	68fb      	ldr	r3, [r7, #12]
 81068a6:	681b      	ldr	r3, [r3, #0]
 81068a8:	4a67      	ldr	r2, [pc, #412]	; (8106a48 <DMA_SetConfig+0x27c>)
 81068aa:	4293      	cmp	r3, r2
 81068ac:	d013      	beq.n	81068d6 <DMA_SetConfig+0x10a>
 81068ae:	68fb      	ldr	r3, [r7, #12]
 81068b0:	681b      	ldr	r3, [r3, #0]
 81068b2:	4a66      	ldr	r2, [pc, #408]	; (8106a4c <DMA_SetConfig+0x280>)
 81068b4:	4293      	cmp	r3, r2
 81068b6:	d00e      	beq.n	81068d6 <DMA_SetConfig+0x10a>
 81068b8:	68fb      	ldr	r3, [r7, #12]
 81068ba:	681b      	ldr	r3, [r3, #0]
 81068bc:	4a64      	ldr	r2, [pc, #400]	; (8106a50 <DMA_SetConfig+0x284>)
 81068be:	4293      	cmp	r3, r2
 81068c0:	d009      	beq.n	81068d6 <DMA_SetConfig+0x10a>
 81068c2:	68fb      	ldr	r3, [r7, #12]
 81068c4:	681b      	ldr	r3, [r3, #0]
 81068c6:	4a63      	ldr	r2, [pc, #396]	; (8106a54 <DMA_SetConfig+0x288>)
 81068c8:	4293      	cmp	r3, r2
 81068ca:	d004      	beq.n	81068d6 <DMA_SetConfig+0x10a>
 81068cc:	68fb      	ldr	r3, [r7, #12]
 81068ce:	681b      	ldr	r3, [r3, #0]
 81068d0:	4a61      	ldr	r2, [pc, #388]	; (8106a58 <DMA_SetConfig+0x28c>)
 81068d2:	4293      	cmp	r3, r2
 81068d4:	d101      	bne.n	81068da <DMA_SetConfig+0x10e>
 81068d6:	2301      	movs	r3, #1
 81068d8:	e000      	b.n	81068dc <DMA_SetConfig+0x110>
 81068da:	2300      	movs	r3, #0
 81068dc:	2b00      	cmp	r3, #0
 81068de:	d00d      	beq.n	81068fc <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 81068e0:	68fb      	ldr	r3, [r7, #12]
 81068e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 81068e4:	68fa      	ldr	r2, [r7, #12]
 81068e6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 81068e8:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 81068ea:	68fb      	ldr	r3, [r7, #12]
 81068ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 81068ee:	2b00      	cmp	r3, #0
 81068f0:	d004      	beq.n	81068fc <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 81068f2:	68fb      	ldr	r3, [r7, #12]
 81068f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 81068f6:	68fa      	ldr	r2, [r7, #12]
 81068f8:	6f52      	ldr	r2, [r2, #116]	; 0x74
 81068fa:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 81068fc:	68fb      	ldr	r3, [r7, #12]
 81068fe:	681b      	ldr	r3, [r3, #0]
 8106900:	4a3e      	ldr	r2, [pc, #248]	; (81069fc <DMA_SetConfig+0x230>)
 8106902:	4293      	cmp	r3, r2
 8106904:	d04a      	beq.n	810699c <DMA_SetConfig+0x1d0>
 8106906:	68fb      	ldr	r3, [r7, #12]
 8106908:	681b      	ldr	r3, [r3, #0]
 810690a:	4a3d      	ldr	r2, [pc, #244]	; (8106a00 <DMA_SetConfig+0x234>)
 810690c:	4293      	cmp	r3, r2
 810690e:	d045      	beq.n	810699c <DMA_SetConfig+0x1d0>
 8106910:	68fb      	ldr	r3, [r7, #12]
 8106912:	681b      	ldr	r3, [r3, #0]
 8106914:	4a3b      	ldr	r2, [pc, #236]	; (8106a04 <DMA_SetConfig+0x238>)
 8106916:	4293      	cmp	r3, r2
 8106918:	d040      	beq.n	810699c <DMA_SetConfig+0x1d0>
 810691a:	68fb      	ldr	r3, [r7, #12]
 810691c:	681b      	ldr	r3, [r3, #0]
 810691e:	4a3a      	ldr	r2, [pc, #232]	; (8106a08 <DMA_SetConfig+0x23c>)
 8106920:	4293      	cmp	r3, r2
 8106922:	d03b      	beq.n	810699c <DMA_SetConfig+0x1d0>
 8106924:	68fb      	ldr	r3, [r7, #12]
 8106926:	681b      	ldr	r3, [r3, #0]
 8106928:	4a38      	ldr	r2, [pc, #224]	; (8106a0c <DMA_SetConfig+0x240>)
 810692a:	4293      	cmp	r3, r2
 810692c:	d036      	beq.n	810699c <DMA_SetConfig+0x1d0>
 810692e:	68fb      	ldr	r3, [r7, #12]
 8106930:	681b      	ldr	r3, [r3, #0]
 8106932:	4a37      	ldr	r2, [pc, #220]	; (8106a10 <DMA_SetConfig+0x244>)
 8106934:	4293      	cmp	r3, r2
 8106936:	d031      	beq.n	810699c <DMA_SetConfig+0x1d0>
 8106938:	68fb      	ldr	r3, [r7, #12]
 810693a:	681b      	ldr	r3, [r3, #0]
 810693c:	4a35      	ldr	r2, [pc, #212]	; (8106a14 <DMA_SetConfig+0x248>)
 810693e:	4293      	cmp	r3, r2
 8106940:	d02c      	beq.n	810699c <DMA_SetConfig+0x1d0>
 8106942:	68fb      	ldr	r3, [r7, #12]
 8106944:	681b      	ldr	r3, [r3, #0]
 8106946:	4a34      	ldr	r2, [pc, #208]	; (8106a18 <DMA_SetConfig+0x24c>)
 8106948:	4293      	cmp	r3, r2
 810694a:	d027      	beq.n	810699c <DMA_SetConfig+0x1d0>
 810694c:	68fb      	ldr	r3, [r7, #12]
 810694e:	681b      	ldr	r3, [r3, #0]
 8106950:	4a32      	ldr	r2, [pc, #200]	; (8106a1c <DMA_SetConfig+0x250>)
 8106952:	4293      	cmp	r3, r2
 8106954:	d022      	beq.n	810699c <DMA_SetConfig+0x1d0>
 8106956:	68fb      	ldr	r3, [r7, #12]
 8106958:	681b      	ldr	r3, [r3, #0]
 810695a:	4a31      	ldr	r2, [pc, #196]	; (8106a20 <DMA_SetConfig+0x254>)
 810695c:	4293      	cmp	r3, r2
 810695e:	d01d      	beq.n	810699c <DMA_SetConfig+0x1d0>
 8106960:	68fb      	ldr	r3, [r7, #12]
 8106962:	681b      	ldr	r3, [r3, #0]
 8106964:	4a2f      	ldr	r2, [pc, #188]	; (8106a24 <DMA_SetConfig+0x258>)
 8106966:	4293      	cmp	r3, r2
 8106968:	d018      	beq.n	810699c <DMA_SetConfig+0x1d0>
 810696a:	68fb      	ldr	r3, [r7, #12]
 810696c:	681b      	ldr	r3, [r3, #0]
 810696e:	4a2e      	ldr	r2, [pc, #184]	; (8106a28 <DMA_SetConfig+0x25c>)
 8106970:	4293      	cmp	r3, r2
 8106972:	d013      	beq.n	810699c <DMA_SetConfig+0x1d0>
 8106974:	68fb      	ldr	r3, [r7, #12]
 8106976:	681b      	ldr	r3, [r3, #0]
 8106978:	4a2c      	ldr	r2, [pc, #176]	; (8106a2c <DMA_SetConfig+0x260>)
 810697a:	4293      	cmp	r3, r2
 810697c:	d00e      	beq.n	810699c <DMA_SetConfig+0x1d0>
 810697e:	68fb      	ldr	r3, [r7, #12]
 8106980:	681b      	ldr	r3, [r3, #0]
 8106982:	4a2b      	ldr	r2, [pc, #172]	; (8106a30 <DMA_SetConfig+0x264>)
 8106984:	4293      	cmp	r3, r2
 8106986:	d009      	beq.n	810699c <DMA_SetConfig+0x1d0>
 8106988:	68fb      	ldr	r3, [r7, #12]
 810698a:	681b      	ldr	r3, [r3, #0]
 810698c:	4a29      	ldr	r2, [pc, #164]	; (8106a34 <DMA_SetConfig+0x268>)
 810698e:	4293      	cmp	r3, r2
 8106990:	d004      	beq.n	810699c <DMA_SetConfig+0x1d0>
 8106992:	68fb      	ldr	r3, [r7, #12]
 8106994:	681b      	ldr	r3, [r3, #0]
 8106996:	4a28      	ldr	r2, [pc, #160]	; (8106a38 <DMA_SetConfig+0x26c>)
 8106998:	4293      	cmp	r3, r2
 810699a:	d101      	bne.n	81069a0 <DMA_SetConfig+0x1d4>
 810699c:	2301      	movs	r3, #1
 810699e:	e000      	b.n	81069a2 <DMA_SetConfig+0x1d6>
 81069a0:	2300      	movs	r3, #0
 81069a2:	2b00      	cmp	r3, #0
 81069a4:	d05a      	beq.n	8106a5c <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 81069a6:	68fb      	ldr	r3, [r7, #12]
 81069a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81069aa:	f003 031f 	and.w	r3, r3, #31
 81069ae:	223f      	movs	r2, #63	; 0x3f
 81069b0:	409a      	lsls	r2, r3
 81069b2:	697b      	ldr	r3, [r7, #20]
 81069b4:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 81069b6:	68fb      	ldr	r3, [r7, #12]
 81069b8:	681b      	ldr	r3, [r3, #0]
 81069ba:	681a      	ldr	r2, [r3, #0]
 81069bc:	68fb      	ldr	r3, [r7, #12]
 81069be:	681b      	ldr	r3, [r3, #0]
 81069c0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 81069c4:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 81069c6:	68fb      	ldr	r3, [r7, #12]
 81069c8:	681b      	ldr	r3, [r3, #0]
 81069ca:	683a      	ldr	r2, [r7, #0]
 81069cc:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 81069ce:	68fb      	ldr	r3, [r7, #12]
 81069d0:	689b      	ldr	r3, [r3, #8]
 81069d2:	2b40      	cmp	r3, #64	; 0x40
 81069d4:	d108      	bne.n	81069e8 <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 81069d6:	68fb      	ldr	r3, [r7, #12]
 81069d8:	681b      	ldr	r3, [r3, #0]
 81069da:	687a      	ldr	r2, [r7, #4]
 81069dc:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 81069de:	68fb      	ldr	r3, [r7, #12]
 81069e0:	681b      	ldr	r3, [r3, #0]
 81069e2:	68ba      	ldr	r2, [r7, #8]
 81069e4:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 81069e6:	e087      	b.n	8106af8 <DMA_SetConfig+0x32c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 81069e8:	68fb      	ldr	r3, [r7, #12]
 81069ea:	681b      	ldr	r3, [r3, #0]
 81069ec:	68ba      	ldr	r2, [r7, #8]
 81069ee:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 81069f0:	68fb      	ldr	r3, [r7, #12]
 81069f2:	681b      	ldr	r3, [r3, #0]
 81069f4:	687a      	ldr	r2, [r7, #4]
 81069f6:	60da      	str	r2, [r3, #12]
}
 81069f8:	e07e      	b.n	8106af8 <DMA_SetConfig+0x32c>
 81069fa:	bf00      	nop
 81069fc:	40020010 	.word	0x40020010
 8106a00:	40020028 	.word	0x40020028
 8106a04:	40020040 	.word	0x40020040
 8106a08:	40020058 	.word	0x40020058
 8106a0c:	40020070 	.word	0x40020070
 8106a10:	40020088 	.word	0x40020088
 8106a14:	400200a0 	.word	0x400200a0
 8106a18:	400200b8 	.word	0x400200b8
 8106a1c:	40020410 	.word	0x40020410
 8106a20:	40020428 	.word	0x40020428
 8106a24:	40020440 	.word	0x40020440
 8106a28:	40020458 	.word	0x40020458
 8106a2c:	40020470 	.word	0x40020470
 8106a30:	40020488 	.word	0x40020488
 8106a34:	400204a0 	.word	0x400204a0
 8106a38:	400204b8 	.word	0x400204b8
 8106a3c:	58025408 	.word	0x58025408
 8106a40:	5802541c 	.word	0x5802541c
 8106a44:	58025430 	.word	0x58025430
 8106a48:	58025444 	.word	0x58025444
 8106a4c:	58025458 	.word	0x58025458
 8106a50:	5802546c 	.word	0x5802546c
 8106a54:	58025480 	.word	0x58025480
 8106a58:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8106a5c:	68fb      	ldr	r3, [r7, #12]
 8106a5e:	681b      	ldr	r3, [r3, #0]
 8106a60:	4a28      	ldr	r2, [pc, #160]	; (8106b04 <DMA_SetConfig+0x338>)
 8106a62:	4293      	cmp	r3, r2
 8106a64:	d022      	beq.n	8106aac <DMA_SetConfig+0x2e0>
 8106a66:	68fb      	ldr	r3, [r7, #12]
 8106a68:	681b      	ldr	r3, [r3, #0]
 8106a6a:	4a27      	ldr	r2, [pc, #156]	; (8106b08 <DMA_SetConfig+0x33c>)
 8106a6c:	4293      	cmp	r3, r2
 8106a6e:	d01d      	beq.n	8106aac <DMA_SetConfig+0x2e0>
 8106a70:	68fb      	ldr	r3, [r7, #12]
 8106a72:	681b      	ldr	r3, [r3, #0]
 8106a74:	4a25      	ldr	r2, [pc, #148]	; (8106b0c <DMA_SetConfig+0x340>)
 8106a76:	4293      	cmp	r3, r2
 8106a78:	d018      	beq.n	8106aac <DMA_SetConfig+0x2e0>
 8106a7a:	68fb      	ldr	r3, [r7, #12]
 8106a7c:	681b      	ldr	r3, [r3, #0]
 8106a7e:	4a24      	ldr	r2, [pc, #144]	; (8106b10 <DMA_SetConfig+0x344>)
 8106a80:	4293      	cmp	r3, r2
 8106a82:	d013      	beq.n	8106aac <DMA_SetConfig+0x2e0>
 8106a84:	68fb      	ldr	r3, [r7, #12]
 8106a86:	681b      	ldr	r3, [r3, #0]
 8106a88:	4a22      	ldr	r2, [pc, #136]	; (8106b14 <DMA_SetConfig+0x348>)
 8106a8a:	4293      	cmp	r3, r2
 8106a8c:	d00e      	beq.n	8106aac <DMA_SetConfig+0x2e0>
 8106a8e:	68fb      	ldr	r3, [r7, #12]
 8106a90:	681b      	ldr	r3, [r3, #0]
 8106a92:	4a21      	ldr	r2, [pc, #132]	; (8106b18 <DMA_SetConfig+0x34c>)
 8106a94:	4293      	cmp	r3, r2
 8106a96:	d009      	beq.n	8106aac <DMA_SetConfig+0x2e0>
 8106a98:	68fb      	ldr	r3, [r7, #12]
 8106a9a:	681b      	ldr	r3, [r3, #0]
 8106a9c:	4a1f      	ldr	r2, [pc, #124]	; (8106b1c <DMA_SetConfig+0x350>)
 8106a9e:	4293      	cmp	r3, r2
 8106aa0:	d004      	beq.n	8106aac <DMA_SetConfig+0x2e0>
 8106aa2:	68fb      	ldr	r3, [r7, #12]
 8106aa4:	681b      	ldr	r3, [r3, #0]
 8106aa6:	4a1e      	ldr	r2, [pc, #120]	; (8106b20 <DMA_SetConfig+0x354>)
 8106aa8:	4293      	cmp	r3, r2
 8106aaa:	d101      	bne.n	8106ab0 <DMA_SetConfig+0x2e4>
 8106aac:	2301      	movs	r3, #1
 8106aae:	e000      	b.n	8106ab2 <DMA_SetConfig+0x2e6>
 8106ab0:	2300      	movs	r3, #0
 8106ab2:	2b00      	cmp	r3, #0
 8106ab4:	d020      	beq.n	8106af8 <DMA_SetConfig+0x32c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8106ab6:	68fb      	ldr	r3, [r7, #12]
 8106ab8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8106aba:	f003 031f 	and.w	r3, r3, #31
 8106abe:	2201      	movs	r2, #1
 8106ac0:	409a      	lsls	r2, r3
 8106ac2:	693b      	ldr	r3, [r7, #16]
 8106ac4:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8106ac6:	68fb      	ldr	r3, [r7, #12]
 8106ac8:	681b      	ldr	r3, [r3, #0]
 8106aca:	683a      	ldr	r2, [r7, #0]
 8106acc:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8106ace:	68fb      	ldr	r3, [r7, #12]
 8106ad0:	689b      	ldr	r3, [r3, #8]
 8106ad2:	2b40      	cmp	r3, #64	; 0x40
 8106ad4:	d108      	bne.n	8106ae8 <DMA_SetConfig+0x31c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8106ad6:	68fb      	ldr	r3, [r7, #12]
 8106ad8:	681b      	ldr	r3, [r3, #0]
 8106ada:	687a      	ldr	r2, [r7, #4]
 8106adc:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8106ade:	68fb      	ldr	r3, [r7, #12]
 8106ae0:	681b      	ldr	r3, [r3, #0]
 8106ae2:	68ba      	ldr	r2, [r7, #8]
 8106ae4:	60da      	str	r2, [r3, #12]
}
 8106ae6:	e007      	b.n	8106af8 <DMA_SetConfig+0x32c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8106ae8:	68fb      	ldr	r3, [r7, #12]
 8106aea:	681b      	ldr	r3, [r3, #0]
 8106aec:	68ba      	ldr	r2, [r7, #8]
 8106aee:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8106af0:	68fb      	ldr	r3, [r7, #12]
 8106af2:	681b      	ldr	r3, [r3, #0]
 8106af4:	687a      	ldr	r2, [r7, #4]
 8106af6:	60da      	str	r2, [r3, #12]
}
 8106af8:	bf00      	nop
 8106afa:	371c      	adds	r7, #28
 8106afc:	46bd      	mov	sp, r7
 8106afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106b02:	4770      	bx	lr
 8106b04:	58025408 	.word	0x58025408
 8106b08:	5802541c 	.word	0x5802541c
 8106b0c:	58025430 	.word	0x58025430
 8106b10:	58025444 	.word	0x58025444
 8106b14:	58025458 	.word	0x58025458
 8106b18:	5802546c 	.word	0x5802546c
 8106b1c:	58025480 	.word	0x58025480
 8106b20:	58025494 	.word	0x58025494

08106b24 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8106b24:	b480      	push	{r7}
 8106b26:	b085      	sub	sp, #20
 8106b28:	af00      	add	r7, sp, #0
 8106b2a:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8106b2c:	687b      	ldr	r3, [r7, #4]
 8106b2e:	681b      	ldr	r3, [r3, #0]
 8106b30:	4a43      	ldr	r2, [pc, #268]	; (8106c40 <DMA_CalcBaseAndBitshift+0x11c>)
 8106b32:	4293      	cmp	r3, r2
 8106b34:	d04a      	beq.n	8106bcc <DMA_CalcBaseAndBitshift+0xa8>
 8106b36:	687b      	ldr	r3, [r7, #4]
 8106b38:	681b      	ldr	r3, [r3, #0]
 8106b3a:	4a42      	ldr	r2, [pc, #264]	; (8106c44 <DMA_CalcBaseAndBitshift+0x120>)
 8106b3c:	4293      	cmp	r3, r2
 8106b3e:	d045      	beq.n	8106bcc <DMA_CalcBaseAndBitshift+0xa8>
 8106b40:	687b      	ldr	r3, [r7, #4]
 8106b42:	681b      	ldr	r3, [r3, #0]
 8106b44:	4a40      	ldr	r2, [pc, #256]	; (8106c48 <DMA_CalcBaseAndBitshift+0x124>)
 8106b46:	4293      	cmp	r3, r2
 8106b48:	d040      	beq.n	8106bcc <DMA_CalcBaseAndBitshift+0xa8>
 8106b4a:	687b      	ldr	r3, [r7, #4]
 8106b4c:	681b      	ldr	r3, [r3, #0]
 8106b4e:	4a3f      	ldr	r2, [pc, #252]	; (8106c4c <DMA_CalcBaseAndBitshift+0x128>)
 8106b50:	4293      	cmp	r3, r2
 8106b52:	d03b      	beq.n	8106bcc <DMA_CalcBaseAndBitshift+0xa8>
 8106b54:	687b      	ldr	r3, [r7, #4]
 8106b56:	681b      	ldr	r3, [r3, #0]
 8106b58:	4a3d      	ldr	r2, [pc, #244]	; (8106c50 <DMA_CalcBaseAndBitshift+0x12c>)
 8106b5a:	4293      	cmp	r3, r2
 8106b5c:	d036      	beq.n	8106bcc <DMA_CalcBaseAndBitshift+0xa8>
 8106b5e:	687b      	ldr	r3, [r7, #4]
 8106b60:	681b      	ldr	r3, [r3, #0]
 8106b62:	4a3c      	ldr	r2, [pc, #240]	; (8106c54 <DMA_CalcBaseAndBitshift+0x130>)
 8106b64:	4293      	cmp	r3, r2
 8106b66:	d031      	beq.n	8106bcc <DMA_CalcBaseAndBitshift+0xa8>
 8106b68:	687b      	ldr	r3, [r7, #4]
 8106b6a:	681b      	ldr	r3, [r3, #0]
 8106b6c:	4a3a      	ldr	r2, [pc, #232]	; (8106c58 <DMA_CalcBaseAndBitshift+0x134>)
 8106b6e:	4293      	cmp	r3, r2
 8106b70:	d02c      	beq.n	8106bcc <DMA_CalcBaseAndBitshift+0xa8>
 8106b72:	687b      	ldr	r3, [r7, #4]
 8106b74:	681b      	ldr	r3, [r3, #0]
 8106b76:	4a39      	ldr	r2, [pc, #228]	; (8106c5c <DMA_CalcBaseAndBitshift+0x138>)
 8106b78:	4293      	cmp	r3, r2
 8106b7a:	d027      	beq.n	8106bcc <DMA_CalcBaseAndBitshift+0xa8>
 8106b7c:	687b      	ldr	r3, [r7, #4]
 8106b7e:	681b      	ldr	r3, [r3, #0]
 8106b80:	4a37      	ldr	r2, [pc, #220]	; (8106c60 <DMA_CalcBaseAndBitshift+0x13c>)
 8106b82:	4293      	cmp	r3, r2
 8106b84:	d022      	beq.n	8106bcc <DMA_CalcBaseAndBitshift+0xa8>
 8106b86:	687b      	ldr	r3, [r7, #4]
 8106b88:	681b      	ldr	r3, [r3, #0]
 8106b8a:	4a36      	ldr	r2, [pc, #216]	; (8106c64 <DMA_CalcBaseAndBitshift+0x140>)
 8106b8c:	4293      	cmp	r3, r2
 8106b8e:	d01d      	beq.n	8106bcc <DMA_CalcBaseAndBitshift+0xa8>
 8106b90:	687b      	ldr	r3, [r7, #4]
 8106b92:	681b      	ldr	r3, [r3, #0]
 8106b94:	4a34      	ldr	r2, [pc, #208]	; (8106c68 <DMA_CalcBaseAndBitshift+0x144>)
 8106b96:	4293      	cmp	r3, r2
 8106b98:	d018      	beq.n	8106bcc <DMA_CalcBaseAndBitshift+0xa8>
 8106b9a:	687b      	ldr	r3, [r7, #4]
 8106b9c:	681b      	ldr	r3, [r3, #0]
 8106b9e:	4a33      	ldr	r2, [pc, #204]	; (8106c6c <DMA_CalcBaseAndBitshift+0x148>)
 8106ba0:	4293      	cmp	r3, r2
 8106ba2:	d013      	beq.n	8106bcc <DMA_CalcBaseAndBitshift+0xa8>
 8106ba4:	687b      	ldr	r3, [r7, #4]
 8106ba6:	681b      	ldr	r3, [r3, #0]
 8106ba8:	4a31      	ldr	r2, [pc, #196]	; (8106c70 <DMA_CalcBaseAndBitshift+0x14c>)
 8106baa:	4293      	cmp	r3, r2
 8106bac:	d00e      	beq.n	8106bcc <DMA_CalcBaseAndBitshift+0xa8>
 8106bae:	687b      	ldr	r3, [r7, #4]
 8106bb0:	681b      	ldr	r3, [r3, #0]
 8106bb2:	4a30      	ldr	r2, [pc, #192]	; (8106c74 <DMA_CalcBaseAndBitshift+0x150>)
 8106bb4:	4293      	cmp	r3, r2
 8106bb6:	d009      	beq.n	8106bcc <DMA_CalcBaseAndBitshift+0xa8>
 8106bb8:	687b      	ldr	r3, [r7, #4]
 8106bba:	681b      	ldr	r3, [r3, #0]
 8106bbc:	4a2e      	ldr	r2, [pc, #184]	; (8106c78 <DMA_CalcBaseAndBitshift+0x154>)
 8106bbe:	4293      	cmp	r3, r2
 8106bc0:	d004      	beq.n	8106bcc <DMA_CalcBaseAndBitshift+0xa8>
 8106bc2:	687b      	ldr	r3, [r7, #4]
 8106bc4:	681b      	ldr	r3, [r3, #0]
 8106bc6:	4a2d      	ldr	r2, [pc, #180]	; (8106c7c <DMA_CalcBaseAndBitshift+0x158>)
 8106bc8:	4293      	cmp	r3, r2
 8106bca:	d101      	bne.n	8106bd0 <DMA_CalcBaseAndBitshift+0xac>
 8106bcc:	2301      	movs	r3, #1
 8106bce:	e000      	b.n	8106bd2 <DMA_CalcBaseAndBitshift+0xae>
 8106bd0:	2300      	movs	r3, #0
 8106bd2:	2b00      	cmp	r3, #0
 8106bd4:	d026      	beq.n	8106c24 <DMA_CalcBaseAndBitshift+0x100>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8106bd6:	687b      	ldr	r3, [r7, #4]
 8106bd8:	681b      	ldr	r3, [r3, #0]
 8106bda:	b2db      	uxtb	r3, r3
 8106bdc:	3b10      	subs	r3, #16
 8106bde:	4a28      	ldr	r2, [pc, #160]	; (8106c80 <DMA_CalcBaseAndBitshift+0x15c>)
 8106be0:	fba2 2303 	umull	r2, r3, r2, r3
 8106be4:	091b      	lsrs	r3, r3, #4
 8106be6:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8106be8:	68fb      	ldr	r3, [r7, #12]
 8106bea:	f003 0307 	and.w	r3, r3, #7
 8106bee:	4a25      	ldr	r2, [pc, #148]	; (8106c84 <DMA_CalcBaseAndBitshift+0x160>)
 8106bf0:	5cd3      	ldrb	r3, [r2, r3]
 8106bf2:	461a      	mov	r2, r3
 8106bf4:	687b      	ldr	r3, [r7, #4]
 8106bf6:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8106bf8:	68fb      	ldr	r3, [r7, #12]
 8106bfa:	2b03      	cmp	r3, #3
 8106bfc:	d909      	bls.n	8106c12 <DMA_CalcBaseAndBitshift+0xee>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8106bfe:	687b      	ldr	r3, [r7, #4]
 8106c00:	681b      	ldr	r3, [r3, #0]
 8106c02:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8106c06:	f023 0303 	bic.w	r3, r3, #3
 8106c0a:	1d1a      	adds	r2, r3, #4
 8106c0c:	687b      	ldr	r3, [r7, #4]
 8106c0e:	659a      	str	r2, [r3, #88]	; 0x58
 8106c10:	e00e      	b.n	8106c30 <DMA_CalcBaseAndBitshift+0x10c>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8106c12:	687b      	ldr	r3, [r7, #4]
 8106c14:	681b      	ldr	r3, [r3, #0]
 8106c16:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8106c1a:	f023 0303 	bic.w	r3, r3, #3
 8106c1e:	687a      	ldr	r2, [r7, #4]
 8106c20:	6593      	str	r3, [r2, #88]	; 0x58
 8106c22:	e005      	b.n	8106c30 <DMA_CalcBaseAndBitshift+0x10c>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8106c24:	687b      	ldr	r3, [r7, #4]
 8106c26:	681b      	ldr	r3, [r3, #0]
 8106c28:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8106c2c:	687b      	ldr	r3, [r7, #4]
 8106c2e:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8106c30:	687b      	ldr	r3, [r7, #4]
 8106c32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8106c34:	4618      	mov	r0, r3
 8106c36:	3714      	adds	r7, #20
 8106c38:	46bd      	mov	sp, r7
 8106c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106c3e:	4770      	bx	lr
 8106c40:	40020010 	.word	0x40020010
 8106c44:	40020028 	.word	0x40020028
 8106c48:	40020040 	.word	0x40020040
 8106c4c:	40020058 	.word	0x40020058
 8106c50:	40020070 	.word	0x40020070
 8106c54:	40020088 	.word	0x40020088
 8106c58:	400200a0 	.word	0x400200a0
 8106c5c:	400200b8 	.word	0x400200b8
 8106c60:	40020410 	.word	0x40020410
 8106c64:	40020428 	.word	0x40020428
 8106c68:	40020440 	.word	0x40020440
 8106c6c:	40020458 	.word	0x40020458
 8106c70:	40020470 	.word	0x40020470
 8106c74:	40020488 	.word	0x40020488
 8106c78:	400204a0 	.word	0x400204a0
 8106c7c:	400204b8 	.word	0x400204b8
 8106c80:	aaaaaaab 	.word	0xaaaaaaab
 8106c84:	0811b4b4 	.word	0x0811b4b4

08106c88 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8106c88:	b480      	push	{r7}
 8106c8a:	b085      	sub	sp, #20
 8106c8c:	af00      	add	r7, sp, #0
 8106c8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8106c90:	2300      	movs	r3, #0
 8106c92:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8106c94:	687b      	ldr	r3, [r7, #4]
 8106c96:	699b      	ldr	r3, [r3, #24]
 8106c98:	2b00      	cmp	r3, #0
 8106c9a:	d120      	bne.n	8106cde <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8106c9c:	687b      	ldr	r3, [r7, #4]
 8106c9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8106ca0:	2b03      	cmp	r3, #3
 8106ca2:	d858      	bhi.n	8106d56 <DMA_CheckFifoParam+0xce>
 8106ca4:	a201      	add	r2, pc, #4	; (adr r2, 8106cac <DMA_CheckFifoParam+0x24>)
 8106ca6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8106caa:	bf00      	nop
 8106cac:	08106cbd 	.word	0x08106cbd
 8106cb0:	08106ccf 	.word	0x08106ccf
 8106cb4:	08106cbd 	.word	0x08106cbd
 8106cb8:	08106d57 	.word	0x08106d57
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8106cbc:	687b      	ldr	r3, [r7, #4]
 8106cbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8106cc0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8106cc4:	2b00      	cmp	r3, #0
 8106cc6:	d048      	beq.n	8106d5a <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8106cc8:	2301      	movs	r3, #1
 8106cca:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8106ccc:	e045      	b.n	8106d5a <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8106cce:	687b      	ldr	r3, [r7, #4]
 8106cd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8106cd2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8106cd6:	d142      	bne.n	8106d5e <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8106cd8:	2301      	movs	r3, #1
 8106cda:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8106cdc:	e03f      	b.n	8106d5e <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8106cde:	687b      	ldr	r3, [r7, #4]
 8106ce0:	699b      	ldr	r3, [r3, #24]
 8106ce2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8106ce6:	d123      	bne.n	8106d30 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8106ce8:	687b      	ldr	r3, [r7, #4]
 8106cea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8106cec:	2b03      	cmp	r3, #3
 8106cee:	d838      	bhi.n	8106d62 <DMA_CheckFifoParam+0xda>
 8106cf0:	a201      	add	r2, pc, #4	; (adr r2, 8106cf8 <DMA_CheckFifoParam+0x70>)
 8106cf2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8106cf6:	bf00      	nop
 8106cf8:	08106d09 	.word	0x08106d09
 8106cfc:	08106d0f 	.word	0x08106d0f
 8106d00:	08106d09 	.word	0x08106d09
 8106d04:	08106d21 	.word	0x08106d21
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8106d08:	2301      	movs	r3, #1
 8106d0a:	73fb      	strb	r3, [r7, #15]
        break;
 8106d0c:	e030      	b.n	8106d70 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8106d0e:	687b      	ldr	r3, [r7, #4]
 8106d10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8106d12:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8106d16:	2b00      	cmp	r3, #0
 8106d18:	d025      	beq.n	8106d66 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8106d1a:	2301      	movs	r3, #1
 8106d1c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8106d1e:	e022      	b.n	8106d66 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8106d20:	687b      	ldr	r3, [r7, #4]
 8106d22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8106d24:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8106d28:	d11f      	bne.n	8106d6a <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8106d2a:	2301      	movs	r3, #1
 8106d2c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8106d2e:	e01c      	b.n	8106d6a <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8106d30:	687b      	ldr	r3, [r7, #4]
 8106d32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8106d34:	2b02      	cmp	r3, #2
 8106d36:	d902      	bls.n	8106d3e <DMA_CheckFifoParam+0xb6>
 8106d38:	2b03      	cmp	r3, #3
 8106d3a:	d003      	beq.n	8106d44 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8106d3c:	e018      	b.n	8106d70 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8106d3e:	2301      	movs	r3, #1
 8106d40:	73fb      	strb	r3, [r7, #15]
        break;
 8106d42:	e015      	b.n	8106d70 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8106d44:	687b      	ldr	r3, [r7, #4]
 8106d46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8106d48:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8106d4c:	2b00      	cmp	r3, #0
 8106d4e:	d00e      	beq.n	8106d6e <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8106d50:	2301      	movs	r3, #1
 8106d52:	73fb      	strb	r3, [r7, #15]
    break;
 8106d54:	e00b      	b.n	8106d6e <DMA_CheckFifoParam+0xe6>
        break;
 8106d56:	bf00      	nop
 8106d58:	e00a      	b.n	8106d70 <DMA_CheckFifoParam+0xe8>
        break;
 8106d5a:	bf00      	nop
 8106d5c:	e008      	b.n	8106d70 <DMA_CheckFifoParam+0xe8>
        break;
 8106d5e:	bf00      	nop
 8106d60:	e006      	b.n	8106d70 <DMA_CheckFifoParam+0xe8>
        break;
 8106d62:	bf00      	nop
 8106d64:	e004      	b.n	8106d70 <DMA_CheckFifoParam+0xe8>
        break;
 8106d66:	bf00      	nop
 8106d68:	e002      	b.n	8106d70 <DMA_CheckFifoParam+0xe8>
        break;
 8106d6a:	bf00      	nop
 8106d6c:	e000      	b.n	8106d70 <DMA_CheckFifoParam+0xe8>
    break;
 8106d6e:	bf00      	nop
    }
  }

  return status;
 8106d70:	7bfb      	ldrb	r3, [r7, #15]
}
 8106d72:	4618      	mov	r0, r3
 8106d74:	3714      	adds	r7, #20
 8106d76:	46bd      	mov	sp, r7
 8106d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106d7c:	4770      	bx	lr
 8106d7e:	bf00      	nop

08106d80 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8106d80:	b480      	push	{r7}
 8106d82:	b085      	sub	sp, #20
 8106d84:	af00      	add	r7, sp, #0
 8106d86:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8106d88:	687b      	ldr	r3, [r7, #4]
 8106d8a:	681b      	ldr	r3, [r3, #0]
 8106d8c:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8106d8e:	687b      	ldr	r3, [r7, #4]
 8106d90:	681b      	ldr	r3, [r3, #0]
 8106d92:	4a3a      	ldr	r2, [pc, #232]	; (8106e7c <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8106d94:	4293      	cmp	r3, r2
 8106d96:	d022      	beq.n	8106dde <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8106d98:	687b      	ldr	r3, [r7, #4]
 8106d9a:	681b      	ldr	r3, [r3, #0]
 8106d9c:	4a38      	ldr	r2, [pc, #224]	; (8106e80 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8106d9e:	4293      	cmp	r3, r2
 8106da0:	d01d      	beq.n	8106dde <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8106da2:	687b      	ldr	r3, [r7, #4]
 8106da4:	681b      	ldr	r3, [r3, #0]
 8106da6:	4a37      	ldr	r2, [pc, #220]	; (8106e84 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8106da8:	4293      	cmp	r3, r2
 8106daa:	d018      	beq.n	8106dde <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8106dac:	687b      	ldr	r3, [r7, #4]
 8106dae:	681b      	ldr	r3, [r3, #0]
 8106db0:	4a35      	ldr	r2, [pc, #212]	; (8106e88 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8106db2:	4293      	cmp	r3, r2
 8106db4:	d013      	beq.n	8106dde <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8106db6:	687b      	ldr	r3, [r7, #4]
 8106db8:	681b      	ldr	r3, [r3, #0]
 8106dba:	4a34      	ldr	r2, [pc, #208]	; (8106e8c <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8106dbc:	4293      	cmp	r3, r2
 8106dbe:	d00e      	beq.n	8106dde <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8106dc0:	687b      	ldr	r3, [r7, #4]
 8106dc2:	681b      	ldr	r3, [r3, #0]
 8106dc4:	4a32      	ldr	r2, [pc, #200]	; (8106e90 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8106dc6:	4293      	cmp	r3, r2
 8106dc8:	d009      	beq.n	8106dde <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8106dca:	687b      	ldr	r3, [r7, #4]
 8106dcc:	681b      	ldr	r3, [r3, #0]
 8106dce:	4a31      	ldr	r2, [pc, #196]	; (8106e94 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8106dd0:	4293      	cmp	r3, r2
 8106dd2:	d004      	beq.n	8106dde <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8106dd4:	687b      	ldr	r3, [r7, #4]
 8106dd6:	681b      	ldr	r3, [r3, #0]
 8106dd8:	4a2f      	ldr	r2, [pc, #188]	; (8106e98 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8106dda:	4293      	cmp	r3, r2
 8106ddc:	d101      	bne.n	8106de2 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8106dde:	2301      	movs	r3, #1
 8106de0:	e000      	b.n	8106de4 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8106de2:	2300      	movs	r3, #0
 8106de4:	2b00      	cmp	r3, #0
 8106de6:	d01c      	beq.n	8106e22 <DMA_CalcDMAMUXChannelBaseAndMask+0xa2>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8106de8:	687b      	ldr	r3, [r7, #4]
 8106dea:	681b      	ldr	r3, [r3, #0]
 8106dec:	b2db      	uxtb	r3, r3
 8106dee:	3b08      	subs	r3, #8
 8106df0:	4a2a      	ldr	r2, [pc, #168]	; (8106e9c <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8106df2:	fba2 2303 	umull	r2, r3, r2, r3
 8106df6:	091b      	lsrs	r3, r3, #4
 8106df8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8106dfa:	68fb      	ldr	r3, [r7, #12]
 8106dfc:	f103 53b0 	add.w	r3, r3, #369098752	; 0x16000000
 8106e00:	f503 4316 	add.w	r3, r3, #38400	; 0x9600
 8106e04:	009b      	lsls	r3, r3, #2
 8106e06:	461a      	mov	r2, r3
 8106e08:	687b      	ldr	r3, [r7, #4]
 8106e0a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8106e0c:	687b      	ldr	r3, [r7, #4]
 8106e0e:	4a24      	ldr	r2, [pc, #144]	; (8106ea0 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8106e10:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8106e12:	68fb      	ldr	r3, [r7, #12]
 8106e14:	f003 031f 	and.w	r3, r3, #31
 8106e18:	2201      	movs	r2, #1
 8106e1a:	409a      	lsls	r2, r3
 8106e1c:	687b      	ldr	r3, [r7, #4]
 8106e1e:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8106e20:	e026      	b.n	8106e70 <DMA_CalcDMAMUXChannelBaseAndMask+0xf0>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8106e22:	687b      	ldr	r3, [r7, #4]
 8106e24:	681b      	ldr	r3, [r3, #0]
 8106e26:	b2db      	uxtb	r3, r3
 8106e28:	3b10      	subs	r3, #16
 8106e2a:	4a1e      	ldr	r2, [pc, #120]	; (8106ea4 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8106e2c:	fba2 2303 	umull	r2, r3, r2, r3
 8106e30:	091b      	lsrs	r3, r3, #4
 8106e32:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8106e34:	68bb      	ldr	r3, [r7, #8]
 8106e36:	4a1c      	ldr	r2, [pc, #112]	; (8106ea8 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8106e38:	4293      	cmp	r3, r2
 8106e3a:	d806      	bhi.n	8106e4a <DMA_CalcDMAMUXChannelBaseAndMask+0xca>
 8106e3c:	68bb      	ldr	r3, [r7, #8]
 8106e3e:	4a1b      	ldr	r2, [pc, #108]	; (8106eac <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8106e40:	4293      	cmp	r3, r2
 8106e42:	d902      	bls.n	8106e4a <DMA_CalcDMAMUXChannelBaseAndMask+0xca>
      stream_number += 8U;
 8106e44:	68fb      	ldr	r3, [r7, #12]
 8106e46:	3308      	adds	r3, #8
 8106e48:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8106e4a:	68fb      	ldr	r3, [r7, #12]
 8106e4c:	f103 5380 	add.w	r3, r3, #268435456	; 0x10000000
 8106e50:	f503 4302 	add.w	r3, r3, #33280	; 0x8200
 8106e54:	009b      	lsls	r3, r3, #2
 8106e56:	461a      	mov	r2, r3
 8106e58:	687b      	ldr	r3, [r7, #4]
 8106e5a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8106e5c:	687b      	ldr	r3, [r7, #4]
 8106e5e:	4a14      	ldr	r2, [pc, #80]	; (8106eb0 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8106e60:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8106e62:	68fb      	ldr	r3, [r7, #12]
 8106e64:	f003 031f 	and.w	r3, r3, #31
 8106e68:	2201      	movs	r2, #1
 8106e6a:	409a      	lsls	r2, r3
 8106e6c:	687b      	ldr	r3, [r7, #4]
 8106e6e:	669a      	str	r2, [r3, #104]	; 0x68
}
 8106e70:	bf00      	nop
 8106e72:	3714      	adds	r7, #20
 8106e74:	46bd      	mov	sp, r7
 8106e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106e7a:	4770      	bx	lr
 8106e7c:	58025408 	.word	0x58025408
 8106e80:	5802541c 	.word	0x5802541c
 8106e84:	58025430 	.word	0x58025430
 8106e88:	58025444 	.word	0x58025444
 8106e8c:	58025458 	.word	0x58025458
 8106e90:	5802546c 	.word	0x5802546c
 8106e94:	58025480 	.word	0x58025480
 8106e98:	58025494 	.word	0x58025494
 8106e9c:	cccccccd 	.word	0xcccccccd
 8106ea0:	58025880 	.word	0x58025880
 8106ea4:	aaaaaaab 	.word	0xaaaaaaab
 8106ea8:	400204b8 	.word	0x400204b8
 8106eac:	4002040f 	.word	0x4002040f
 8106eb0:	40020880 	.word	0x40020880

08106eb4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8106eb4:	b480      	push	{r7}
 8106eb6:	b085      	sub	sp, #20
 8106eb8:	af00      	add	r7, sp, #0
 8106eba:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8106ebc:	687b      	ldr	r3, [r7, #4]
 8106ebe:	685b      	ldr	r3, [r3, #4]
 8106ec0:	b2db      	uxtb	r3, r3
 8106ec2:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8106ec4:	68fb      	ldr	r3, [r7, #12]
 8106ec6:	2b00      	cmp	r3, #0
 8106ec8:	d04a      	beq.n	8106f60 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8106eca:	68fb      	ldr	r3, [r7, #12]
 8106ecc:	2b08      	cmp	r3, #8
 8106ece:	d847      	bhi.n	8106f60 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8106ed0:	687b      	ldr	r3, [r7, #4]
 8106ed2:	681b      	ldr	r3, [r3, #0]
 8106ed4:	4a25      	ldr	r2, [pc, #148]	; (8106f6c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8106ed6:	4293      	cmp	r3, r2
 8106ed8:	d022      	beq.n	8106f20 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8106eda:	687b      	ldr	r3, [r7, #4]
 8106edc:	681b      	ldr	r3, [r3, #0]
 8106ede:	4a24      	ldr	r2, [pc, #144]	; (8106f70 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8106ee0:	4293      	cmp	r3, r2
 8106ee2:	d01d      	beq.n	8106f20 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8106ee4:	687b      	ldr	r3, [r7, #4]
 8106ee6:	681b      	ldr	r3, [r3, #0]
 8106ee8:	4a22      	ldr	r2, [pc, #136]	; (8106f74 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8106eea:	4293      	cmp	r3, r2
 8106eec:	d018      	beq.n	8106f20 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8106eee:	687b      	ldr	r3, [r7, #4]
 8106ef0:	681b      	ldr	r3, [r3, #0]
 8106ef2:	4a21      	ldr	r2, [pc, #132]	; (8106f78 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8106ef4:	4293      	cmp	r3, r2
 8106ef6:	d013      	beq.n	8106f20 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8106ef8:	687b      	ldr	r3, [r7, #4]
 8106efa:	681b      	ldr	r3, [r3, #0]
 8106efc:	4a1f      	ldr	r2, [pc, #124]	; (8106f7c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8106efe:	4293      	cmp	r3, r2
 8106f00:	d00e      	beq.n	8106f20 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8106f02:	687b      	ldr	r3, [r7, #4]
 8106f04:	681b      	ldr	r3, [r3, #0]
 8106f06:	4a1e      	ldr	r2, [pc, #120]	; (8106f80 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8106f08:	4293      	cmp	r3, r2
 8106f0a:	d009      	beq.n	8106f20 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8106f0c:	687b      	ldr	r3, [r7, #4]
 8106f0e:	681b      	ldr	r3, [r3, #0]
 8106f10:	4a1c      	ldr	r2, [pc, #112]	; (8106f84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8106f12:	4293      	cmp	r3, r2
 8106f14:	d004      	beq.n	8106f20 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8106f16:	687b      	ldr	r3, [r7, #4]
 8106f18:	681b      	ldr	r3, [r3, #0]
 8106f1a:	4a1b      	ldr	r2, [pc, #108]	; (8106f88 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8106f1c:	4293      	cmp	r3, r2
 8106f1e:	d101      	bne.n	8106f24 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8106f20:	2301      	movs	r3, #1
 8106f22:	e000      	b.n	8106f26 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8106f24:	2300      	movs	r3, #0
 8106f26:	2b00      	cmp	r3, #0
 8106f28:	d00a      	beq.n	8106f40 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8106f2a:	68fa      	ldr	r2, [r7, #12]
 8106f2c:	4b17      	ldr	r3, [pc, #92]	; (8106f8c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8106f2e:	4413      	add	r3, r2
 8106f30:	009b      	lsls	r3, r3, #2
 8106f32:	461a      	mov	r2, r3
 8106f34:	687b      	ldr	r3, [r7, #4]
 8106f36:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8106f38:	687b      	ldr	r3, [r7, #4]
 8106f3a:	4a15      	ldr	r2, [pc, #84]	; (8106f90 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8106f3c:	671a      	str	r2, [r3, #112]	; 0x70
 8106f3e:	e009      	b.n	8106f54 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8106f40:	68fa      	ldr	r2, [r7, #12]
 8106f42:	4b14      	ldr	r3, [pc, #80]	; (8106f94 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8106f44:	4413      	add	r3, r2
 8106f46:	009b      	lsls	r3, r3, #2
 8106f48:	461a      	mov	r2, r3
 8106f4a:	687b      	ldr	r3, [r7, #4]
 8106f4c:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8106f4e:	687b      	ldr	r3, [r7, #4]
 8106f50:	4a11      	ldr	r2, [pc, #68]	; (8106f98 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8106f52:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8106f54:	68fb      	ldr	r3, [r7, #12]
 8106f56:	3b01      	subs	r3, #1
 8106f58:	2201      	movs	r2, #1
 8106f5a:	409a      	lsls	r2, r3
 8106f5c:	687b      	ldr	r3, [r7, #4]
 8106f5e:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8106f60:	bf00      	nop
 8106f62:	3714      	adds	r7, #20
 8106f64:	46bd      	mov	sp, r7
 8106f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106f6a:	4770      	bx	lr
 8106f6c:	58025408 	.word	0x58025408
 8106f70:	5802541c 	.word	0x5802541c
 8106f74:	58025430 	.word	0x58025430
 8106f78:	58025444 	.word	0x58025444
 8106f7c:	58025458 	.word	0x58025458
 8106f80:	5802546c 	.word	0x5802546c
 8106f84:	58025480 	.word	0x58025480
 8106f88:	58025494 	.word	0x58025494
 8106f8c:	1600963f 	.word	0x1600963f
 8106f90:	58025940 	.word	0x58025940
 8106f94:	1000823f 	.word	0x1000823f
 8106f98:	40020940 	.word	0x40020940

08106f9c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8106f9c:	b480      	push	{r7}
 8106f9e:	b089      	sub	sp, #36	; 0x24
 8106fa0:	af00      	add	r7, sp, #0
 8106fa2:	6078      	str	r0, [r7, #4]
 8106fa4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8106fa6:	2300      	movs	r3, #0
 8106fa8:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent;
  uint32_t temp;
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
 8106faa:	4b89      	ldr	r3, [pc, #548]	; (81071d0 <HAL_GPIO_Init+0x234>)
 8106fac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8106fae:	e194      	b.n	81072da <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8106fb0:	683b      	ldr	r3, [r7, #0]
 8106fb2:	681a      	ldr	r2, [r3, #0]
 8106fb4:	2101      	movs	r1, #1
 8106fb6:	69fb      	ldr	r3, [r7, #28]
 8106fb8:	fa01 f303 	lsl.w	r3, r1, r3
 8106fbc:	4013      	ands	r3, r2
 8106fbe:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8106fc0:	693b      	ldr	r3, [r7, #16]
 8106fc2:	2b00      	cmp	r3, #0
 8106fc4:	f000 8186 	beq.w	81072d4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8106fc8:	683b      	ldr	r3, [r7, #0]
 8106fca:	685b      	ldr	r3, [r3, #4]
 8106fcc:	2b01      	cmp	r3, #1
 8106fce:	d00b      	beq.n	8106fe8 <HAL_GPIO_Init+0x4c>
 8106fd0:	683b      	ldr	r3, [r7, #0]
 8106fd2:	685b      	ldr	r3, [r3, #4]
 8106fd4:	2b02      	cmp	r3, #2
 8106fd6:	d007      	beq.n	8106fe8 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8106fd8:	683b      	ldr	r3, [r7, #0]
 8106fda:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8106fdc:	2b11      	cmp	r3, #17
 8106fde:	d003      	beq.n	8106fe8 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8106fe0:	683b      	ldr	r3, [r7, #0]
 8106fe2:	685b      	ldr	r3, [r3, #4]
 8106fe4:	2b12      	cmp	r3, #18
 8106fe6:	d130      	bne.n	810704a <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8106fe8:	687b      	ldr	r3, [r7, #4]
 8106fea:	689b      	ldr	r3, [r3, #8]
 8106fec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8106fee:	69fb      	ldr	r3, [r7, #28]
 8106ff0:	005b      	lsls	r3, r3, #1
 8106ff2:	2203      	movs	r2, #3
 8106ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8106ff8:	43db      	mvns	r3, r3
 8106ffa:	69ba      	ldr	r2, [r7, #24]
 8106ffc:	4013      	ands	r3, r2
 8106ffe:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8107000:	683b      	ldr	r3, [r7, #0]
 8107002:	68da      	ldr	r2, [r3, #12]
 8107004:	69fb      	ldr	r3, [r7, #28]
 8107006:	005b      	lsls	r3, r3, #1
 8107008:	fa02 f303 	lsl.w	r3, r2, r3
 810700c:	69ba      	ldr	r2, [r7, #24]
 810700e:	4313      	orrs	r3, r2
 8107010:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8107012:	687b      	ldr	r3, [r7, #4]
 8107014:	69ba      	ldr	r2, [r7, #24]
 8107016:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8107018:	687b      	ldr	r3, [r7, #4]
 810701a:	685b      	ldr	r3, [r3, #4]
 810701c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 810701e:	2201      	movs	r2, #1
 8107020:	69fb      	ldr	r3, [r7, #28]
 8107022:	fa02 f303 	lsl.w	r3, r2, r3
 8107026:	43db      	mvns	r3, r3
 8107028:	69ba      	ldr	r2, [r7, #24]
 810702a:	4013      	ands	r3, r2
 810702c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 810702e:	683b      	ldr	r3, [r7, #0]
 8107030:	685b      	ldr	r3, [r3, #4]
 8107032:	091b      	lsrs	r3, r3, #4
 8107034:	f003 0201 	and.w	r2, r3, #1
 8107038:	69fb      	ldr	r3, [r7, #28]
 810703a:	fa02 f303 	lsl.w	r3, r2, r3
 810703e:	69ba      	ldr	r2, [r7, #24]
 8107040:	4313      	orrs	r3, r2
 8107042:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8107044:	687b      	ldr	r3, [r7, #4]
 8107046:	69ba      	ldr	r2, [r7, #24]
 8107048:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 810704a:	687b      	ldr	r3, [r7, #4]
 810704c:	68db      	ldr	r3, [r3, #12]
 810704e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8107050:	69fb      	ldr	r3, [r7, #28]
 8107052:	005b      	lsls	r3, r3, #1
 8107054:	2203      	movs	r2, #3
 8107056:	fa02 f303 	lsl.w	r3, r2, r3
 810705a:	43db      	mvns	r3, r3
 810705c:	69ba      	ldr	r2, [r7, #24]
 810705e:	4013      	ands	r3, r2
 8107060:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8107062:	683b      	ldr	r3, [r7, #0]
 8107064:	689a      	ldr	r2, [r3, #8]
 8107066:	69fb      	ldr	r3, [r7, #28]
 8107068:	005b      	lsls	r3, r3, #1
 810706a:	fa02 f303 	lsl.w	r3, r2, r3
 810706e:	69ba      	ldr	r2, [r7, #24]
 8107070:	4313      	orrs	r3, r2
 8107072:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8107074:	687b      	ldr	r3, [r7, #4]
 8107076:	69ba      	ldr	r2, [r7, #24]
 8107078:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 810707a:	683b      	ldr	r3, [r7, #0]
 810707c:	685b      	ldr	r3, [r3, #4]
 810707e:	2b02      	cmp	r3, #2
 8107080:	d003      	beq.n	810708a <HAL_GPIO_Init+0xee>
 8107082:	683b      	ldr	r3, [r7, #0]
 8107084:	685b      	ldr	r3, [r3, #4]
 8107086:	2b12      	cmp	r3, #18
 8107088:	d123      	bne.n	81070d2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 810708a:	69fb      	ldr	r3, [r7, #28]
 810708c:	08da      	lsrs	r2, r3, #3
 810708e:	687b      	ldr	r3, [r7, #4]
 8107090:	3208      	adds	r2, #8
 8107092:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8107096:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8107098:	69fb      	ldr	r3, [r7, #28]
 810709a:	f003 0307 	and.w	r3, r3, #7
 810709e:	009b      	lsls	r3, r3, #2
 81070a0:	220f      	movs	r2, #15
 81070a2:	fa02 f303 	lsl.w	r3, r2, r3
 81070a6:	43db      	mvns	r3, r3
 81070a8:	69ba      	ldr	r2, [r7, #24]
 81070aa:	4013      	ands	r3, r2
 81070ac:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 81070ae:	683b      	ldr	r3, [r7, #0]
 81070b0:	691a      	ldr	r2, [r3, #16]
 81070b2:	69fb      	ldr	r3, [r7, #28]
 81070b4:	f003 0307 	and.w	r3, r3, #7
 81070b8:	009b      	lsls	r3, r3, #2
 81070ba:	fa02 f303 	lsl.w	r3, r2, r3
 81070be:	69ba      	ldr	r2, [r7, #24]
 81070c0:	4313      	orrs	r3, r2
 81070c2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 81070c4:	69fb      	ldr	r3, [r7, #28]
 81070c6:	08da      	lsrs	r2, r3, #3
 81070c8:	687b      	ldr	r3, [r7, #4]
 81070ca:	3208      	adds	r2, #8
 81070cc:	69b9      	ldr	r1, [r7, #24]
 81070ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 81070d2:	687b      	ldr	r3, [r7, #4]
 81070d4:	681b      	ldr	r3, [r3, #0]
 81070d6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 81070d8:	69fb      	ldr	r3, [r7, #28]
 81070da:	005b      	lsls	r3, r3, #1
 81070dc:	2203      	movs	r2, #3
 81070de:	fa02 f303 	lsl.w	r3, r2, r3
 81070e2:	43db      	mvns	r3, r3
 81070e4:	69ba      	ldr	r2, [r7, #24]
 81070e6:	4013      	ands	r3, r2
 81070e8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 81070ea:	683b      	ldr	r3, [r7, #0]
 81070ec:	685b      	ldr	r3, [r3, #4]
 81070ee:	f003 0203 	and.w	r2, r3, #3
 81070f2:	69fb      	ldr	r3, [r7, #28]
 81070f4:	005b      	lsls	r3, r3, #1
 81070f6:	fa02 f303 	lsl.w	r3, r2, r3
 81070fa:	69ba      	ldr	r2, [r7, #24]
 81070fc:	4313      	orrs	r3, r2
 81070fe:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8107100:	687b      	ldr	r3, [r7, #4]
 8107102:	69ba      	ldr	r2, [r7, #24]
 8107104:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8107106:	683b      	ldr	r3, [r7, #0]
 8107108:	685b      	ldr	r3, [r3, #4]
 810710a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 810710e:	2b00      	cmp	r3, #0
 8107110:	f000 80e0 	beq.w	81072d4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8107114:	4b2f      	ldr	r3, [pc, #188]	; (81071d4 <HAL_GPIO_Init+0x238>)
 8107116:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 810711a:	4a2e      	ldr	r2, [pc, #184]	; (81071d4 <HAL_GPIO_Init+0x238>)
 810711c:	f043 0302 	orr.w	r3, r3, #2
 8107120:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8107124:	4b2b      	ldr	r3, [pc, #172]	; (81071d4 <HAL_GPIO_Init+0x238>)
 8107126:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 810712a:	f003 0302 	and.w	r3, r3, #2
 810712e:	60fb      	str	r3, [r7, #12]
 8107130:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8107132:	4a29      	ldr	r2, [pc, #164]	; (81071d8 <HAL_GPIO_Init+0x23c>)
 8107134:	69fb      	ldr	r3, [r7, #28]
 8107136:	089b      	lsrs	r3, r3, #2
 8107138:	3302      	adds	r3, #2
 810713a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 810713e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8107140:	69fb      	ldr	r3, [r7, #28]
 8107142:	f003 0303 	and.w	r3, r3, #3
 8107146:	009b      	lsls	r3, r3, #2
 8107148:	220f      	movs	r2, #15
 810714a:	fa02 f303 	lsl.w	r3, r2, r3
 810714e:	43db      	mvns	r3, r3
 8107150:	69ba      	ldr	r2, [r7, #24]
 8107152:	4013      	ands	r3, r2
 8107154:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8107156:	687b      	ldr	r3, [r7, #4]
 8107158:	4a20      	ldr	r2, [pc, #128]	; (81071dc <HAL_GPIO_Init+0x240>)
 810715a:	4293      	cmp	r3, r2
 810715c:	d052      	beq.n	8107204 <HAL_GPIO_Init+0x268>
 810715e:	687b      	ldr	r3, [r7, #4]
 8107160:	4a1f      	ldr	r2, [pc, #124]	; (81071e0 <HAL_GPIO_Init+0x244>)
 8107162:	4293      	cmp	r3, r2
 8107164:	d031      	beq.n	81071ca <HAL_GPIO_Init+0x22e>
 8107166:	687b      	ldr	r3, [r7, #4]
 8107168:	4a1e      	ldr	r2, [pc, #120]	; (81071e4 <HAL_GPIO_Init+0x248>)
 810716a:	4293      	cmp	r3, r2
 810716c:	d02b      	beq.n	81071c6 <HAL_GPIO_Init+0x22a>
 810716e:	687b      	ldr	r3, [r7, #4]
 8107170:	4a1d      	ldr	r2, [pc, #116]	; (81071e8 <HAL_GPIO_Init+0x24c>)
 8107172:	4293      	cmp	r3, r2
 8107174:	d025      	beq.n	81071c2 <HAL_GPIO_Init+0x226>
 8107176:	687b      	ldr	r3, [r7, #4]
 8107178:	4a1c      	ldr	r2, [pc, #112]	; (81071ec <HAL_GPIO_Init+0x250>)
 810717a:	4293      	cmp	r3, r2
 810717c:	d01f      	beq.n	81071be <HAL_GPIO_Init+0x222>
 810717e:	687b      	ldr	r3, [r7, #4]
 8107180:	4a1b      	ldr	r2, [pc, #108]	; (81071f0 <HAL_GPIO_Init+0x254>)
 8107182:	4293      	cmp	r3, r2
 8107184:	d019      	beq.n	81071ba <HAL_GPIO_Init+0x21e>
 8107186:	687b      	ldr	r3, [r7, #4]
 8107188:	4a1a      	ldr	r2, [pc, #104]	; (81071f4 <HAL_GPIO_Init+0x258>)
 810718a:	4293      	cmp	r3, r2
 810718c:	d013      	beq.n	81071b6 <HAL_GPIO_Init+0x21a>
 810718e:	687b      	ldr	r3, [r7, #4]
 8107190:	4a19      	ldr	r2, [pc, #100]	; (81071f8 <HAL_GPIO_Init+0x25c>)
 8107192:	4293      	cmp	r3, r2
 8107194:	d00d      	beq.n	81071b2 <HAL_GPIO_Init+0x216>
 8107196:	687b      	ldr	r3, [r7, #4]
 8107198:	4a18      	ldr	r2, [pc, #96]	; (81071fc <HAL_GPIO_Init+0x260>)
 810719a:	4293      	cmp	r3, r2
 810719c:	d007      	beq.n	81071ae <HAL_GPIO_Init+0x212>
 810719e:	687b      	ldr	r3, [r7, #4]
 81071a0:	4a17      	ldr	r2, [pc, #92]	; (8107200 <HAL_GPIO_Init+0x264>)
 81071a2:	4293      	cmp	r3, r2
 81071a4:	d101      	bne.n	81071aa <HAL_GPIO_Init+0x20e>
 81071a6:	2309      	movs	r3, #9
 81071a8:	e02d      	b.n	8107206 <HAL_GPIO_Init+0x26a>
 81071aa:	230a      	movs	r3, #10
 81071ac:	e02b      	b.n	8107206 <HAL_GPIO_Init+0x26a>
 81071ae:	2308      	movs	r3, #8
 81071b0:	e029      	b.n	8107206 <HAL_GPIO_Init+0x26a>
 81071b2:	2307      	movs	r3, #7
 81071b4:	e027      	b.n	8107206 <HAL_GPIO_Init+0x26a>
 81071b6:	2306      	movs	r3, #6
 81071b8:	e025      	b.n	8107206 <HAL_GPIO_Init+0x26a>
 81071ba:	2305      	movs	r3, #5
 81071bc:	e023      	b.n	8107206 <HAL_GPIO_Init+0x26a>
 81071be:	2304      	movs	r3, #4
 81071c0:	e021      	b.n	8107206 <HAL_GPIO_Init+0x26a>
 81071c2:	2303      	movs	r3, #3
 81071c4:	e01f      	b.n	8107206 <HAL_GPIO_Init+0x26a>
 81071c6:	2302      	movs	r3, #2
 81071c8:	e01d      	b.n	8107206 <HAL_GPIO_Init+0x26a>
 81071ca:	2301      	movs	r3, #1
 81071cc:	e01b      	b.n	8107206 <HAL_GPIO_Init+0x26a>
 81071ce:	bf00      	nop
 81071d0:	580000c0 	.word	0x580000c0
 81071d4:	58024400 	.word	0x58024400
 81071d8:	58000400 	.word	0x58000400
 81071dc:	58020000 	.word	0x58020000
 81071e0:	58020400 	.word	0x58020400
 81071e4:	58020800 	.word	0x58020800
 81071e8:	58020c00 	.word	0x58020c00
 81071ec:	58021000 	.word	0x58021000
 81071f0:	58021400 	.word	0x58021400
 81071f4:	58021800 	.word	0x58021800
 81071f8:	58021c00 	.word	0x58021c00
 81071fc:	58022000 	.word	0x58022000
 8107200:	58022400 	.word	0x58022400
 8107204:	2300      	movs	r3, #0
 8107206:	69fa      	ldr	r2, [r7, #28]
 8107208:	f002 0203 	and.w	r2, r2, #3
 810720c:	0092      	lsls	r2, r2, #2
 810720e:	4093      	lsls	r3, r2
 8107210:	69ba      	ldr	r2, [r7, #24]
 8107212:	4313      	orrs	r3, r2
 8107214:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8107216:	4938      	ldr	r1, [pc, #224]	; (81072f8 <HAL_GPIO_Init+0x35c>)
 8107218:	69fb      	ldr	r3, [r7, #28]
 810721a:	089b      	lsrs	r3, r3, #2
 810721c:	3302      	adds	r3, #2
 810721e:	69ba      	ldr	r2, [r7, #24]
 8107220:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8107224:	697b      	ldr	r3, [r7, #20]
 8107226:	681b      	ldr	r3, [r3, #0]
 8107228:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 810722a:	693b      	ldr	r3, [r7, #16]
 810722c:	43db      	mvns	r3, r3
 810722e:	69ba      	ldr	r2, [r7, #24]
 8107230:	4013      	ands	r3, r2
 8107232:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8107234:	683b      	ldr	r3, [r7, #0]
 8107236:	685b      	ldr	r3, [r3, #4]
 8107238:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 810723c:	2b00      	cmp	r3, #0
 810723e:	d003      	beq.n	8107248 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8107240:	69ba      	ldr	r2, [r7, #24]
 8107242:	693b      	ldr	r3, [r7, #16]
 8107244:	4313      	orrs	r3, r2
 8107246:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8107248:	697b      	ldr	r3, [r7, #20]
 810724a:	69ba      	ldr	r2, [r7, #24]
 810724c:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 810724e:	697b      	ldr	r3, [r7, #20]
 8107250:	685b      	ldr	r3, [r3, #4]
 8107252:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8107254:	693b      	ldr	r3, [r7, #16]
 8107256:	43db      	mvns	r3, r3
 8107258:	69ba      	ldr	r2, [r7, #24]
 810725a:	4013      	ands	r3, r2
 810725c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 810725e:	683b      	ldr	r3, [r7, #0]
 8107260:	685b      	ldr	r3, [r3, #4]
 8107262:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8107266:	2b00      	cmp	r3, #0
 8107268:	d003      	beq.n	8107272 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 810726a:	69ba      	ldr	r2, [r7, #24]
 810726c:	693b      	ldr	r3, [r7, #16]
 810726e:	4313      	orrs	r3, r2
 8107270:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8107272:	697b      	ldr	r3, [r7, #20]
 8107274:	69ba      	ldr	r2, [r7, #24]
 8107276:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8107278:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 810727c:	681b      	ldr	r3, [r3, #0]
 810727e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8107280:	693b      	ldr	r3, [r7, #16]
 8107282:	43db      	mvns	r3, r3
 8107284:	69ba      	ldr	r2, [r7, #24]
 8107286:	4013      	ands	r3, r2
 8107288:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 810728a:	683b      	ldr	r3, [r7, #0]
 810728c:	685b      	ldr	r3, [r3, #4]
 810728e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8107292:	2b00      	cmp	r3, #0
 8107294:	d003      	beq.n	810729e <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8107296:	69ba      	ldr	r2, [r7, #24]
 8107298:	693b      	ldr	r3, [r7, #16]
 810729a:	4313      	orrs	r3, r2
 810729c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 810729e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 81072a2:	69bb      	ldr	r3, [r7, #24]
 81072a4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 81072a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 81072aa:	685b      	ldr	r3, [r3, #4]
 81072ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 81072ae:	693b      	ldr	r3, [r7, #16]
 81072b0:	43db      	mvns	r3, r3
 81072b2:	69ba      	ldr	r2, [r7, #24]
 81072b4:	4013      	ands	r3, r2
 81072b6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 81072b8:	683b      	ldr	r3, [r7, #0]
 81072ba:	685b      	ldr	r3, [r3, #4]
 81072bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 81072c0:	2b00      	cmp	r3, #0
 81072c2:	d003      	beq.n	81072cc <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 81072c4:	69ba      	ldr	r2, [r7, #24]
 81072c6:	693b      	ldr	r3, [r7, #16]
 81072c8:	4313      	orrs	r3, r2
 81072ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 81072cc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 81072d0:	69bb      	ldr	r3, [r7, #24]
 81072d2:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 81072d4:	69fb      	ldr	r3, [r7, #28]
 81072d6:	3301      	adds	r3, #1
 81072d8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 81072da:	683b      	ldr	r3, [r7, #0]
 81072dc:	681a      	ldr	r2, [r3, #0]
 81072de:	69fb      	ldr	r3, [r7, #28]
 81072e0:	fa22 f303 	lsr.w	r3, r2, r3
 81072e4:	2b00      	cmp	r3, #0
 81072e6:	f47f ae63 	bne.w	8106fb0 <HAL_GPIO_Init+0x14>
  }
}
 81072ea:	bf00      	nop
 81072ec:	bf00      	nop
 81072ee:	3724      	adds	r7, #36	; 0x24
 81072f0:	46bd      	mov	sp, r7
 81072f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81072f6:	4770      	bx	lr
 81072f8:	58000400 	.word	0x58000400

081072fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 81072fc:	b480      	push	{r7}
 81072fe:	b083      	sub	sp, #12
 8107300:	af00      	add	r7, sp, #0
 8107302:	6078      	str	r0, [r7, #4]
 8107304:	460b      	mov	r3, r1
 8107306:	807b      	strh	r3, [r7, #2]
 8107308:	4613      	mov	r3, r2
 810730a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 810730c:	787b      	ldrb	r3, [r7, #1]
 810730e:	2b00      	cmp	r3, #0
 8107310:	d003      	beq.n	810731a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8107312:	887a      	ldrh	r2, [r7, #2]
 8107314:	687b      	ldr	r3, [r7, #4]
 8107316:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8107318:	e003      	b.n	8107322 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 810731a:	887b      	ldrh	r3, [r7, #2]
 810731c:	041a      	lsls	r2, r3, #16
 810731e:	687b      	ldr	r3, [r7, #4]
 8107320:	619a      	str	r2, [r3, #24]
}
 8107322:	bf00      	nop
 8107324:	370c      	adds	r7, #12
 8107326:	46bd      	mov	sp, r7
 8107328:	f85d 7b04 	ldr.w	r7, [sp], #4
 810732c:	4770      	bx	lr

0810732e <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 810732e:	b580      	push	{r7, lr}
 8107330:	b082      	sub	sp, #8
 8107332:	af00      	add	r7, sp, #0
 8107334:	4603      	mov	r3, r0
 8107336:	80fb      	strh	r3, [r7, #6]
#if defined(DUAL_CORE) && defined(CORE_CM4)
  if (__HAL_GPIO_EXTID2_GET_IT(GPIO_Pin) != 0x00U)
 8107338:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 810733c:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8107340:	88fb      	ldrh	r3, [r7, #6]
 8107342:	4013      	ands	r3, r2
 8107344:	2b00      	cmp	r3, #0
 8107346:	d008      	beq.n	810735a <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
 8107348:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 810734c:	88fb      	ldrh	r3, [r7, #6]
 810734e:	f8c2 30c8 	str.w	r3, [r2, #200]	; 0xc8
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8107352:	88fb      	ldrh	r3, [r7, #6]
 8107354:	4618      	mov	r0, r3
 8107356:	f000 f804 	bl	8107362 <HAL_GPIO_EXTI_Callback>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#endif
}
 810735a:	bf00      	nop
 810735c:	3708      	adds	r7, #8
 810735e:	46bd      	mov	sp, r7
 8107360:	bd80      	pop	{r7, pc}

08107362 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8107362:	b480      	push	{r7}
 8107364:	b083      	sub	sp, #12
 8107366:	af00      	add	r7, sp, #0
 8107368:	4603      	mov	r3, r0
 810736a:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 810736c:	bf00      	nop
 810736e:	370c      	adds	r7, #12
 8107370:	46bd      	mov	sp, r7
 8107372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107376:	4770      	bx	lr

08107378 <HAL_HSEM_ActivateNotification>:
  * @brief  Activate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_ActivateNotification(uint32_t SemMask)
{
 8107378:	b480      	push	{r7}
 810737a:	b083      	sub	sp, #12
 810737c:	af00      	add	r7, sp, #0
 810737e:	6078      	str	r0, [r7, #4]
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
 8107380:	4b05      	ldr	r3, [pc, #20]	; (8107398 <HAL_HSEM_ActivateNotification+0x20>)
 8107382:	681a      	ldr	r2, [r3, #0]
 8107384:	4904      	ldr	r1, [pc, #16]	; (8107398 <HAL_HSEM_ActivateNotification+0x20>)
 8107386:	687b      	ldr	r3, [r7, #4]
 8107388:	4313      	orrs	r3, r2
 810738a:	600b      	str	r3, [r1, #0]
#endif
}
 810738c:	bf00      	nop
 810738e:	370c      	adds	r7, #12
 8107390:	46bd      	mov	sp, r7
 8107392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107396:	4770      	bx	lr
 8107398:	58026510 	.word	0x58026510

0810739c <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 810739c:	b580      	push	{r7, lr}
 810739e:	b082      	sub	sp, #8
 81073a0:	af00      	add	r7, sp, #0
    /*Clear Flags*/
    HSEM->C2ICR = ((uint32_t)statusreg);
  }
#else
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 81073a2:	4b0a      	ldr	r3, [pc, #40]	; (81073cc <HAL_HSEM_IRQHandler+0x30>)
 81073a4:	68db      	ldr	r3, [r3, #12]
 81073a6:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 81073a8:	4b08      	ldr	r3, [pc, #32]	; (81073cc <HAL_HSEM_IRQHandler+0x30>)
 81073aa:	681a      	ldr	r2, [r3, #0]
 81073ac:	687b      	ldr	r3, [r7, #4]
 81073ae:	43db      	mvns	r3, r3
 81073b0:	4906      	ldr	r1, [pc, #24]	; (81073cc <HAL_HSEM_IRQHandler+0x30>)
 81073b2:	4013      	ands	r3, r2
 81073b4:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 81073b6:	4a05      	ldr	r2, [pc, #20]	; (81073cc <HAL_HSEM_IRQHandler+0x30>)
 81073b8:	687b      	ldr	r3, [r7, #4]
 81073ba:	6053      	str	r3, [r2, #4]

#endif
  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 81073bc:	6878      	ldr	r0, [r7, #4]
 81073be:	f000 f807 	bl	81073d0 <HAL_HSEM_FreeCallback>
}
 81073c2:	bf00      	nop
 81073c4:	3708      	adds	r7, #8
 81073c6:	46bd      	mov	sp, r7
 81073c8:	bd80      	pop	{r7, pc}
 81073ca:	bf00      	nop
 81073cc:	58026510 	.word	0x58026510

081073d0 <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 81073d0:	b480      	push	{r7}
 81073d2:	b083      	sub	sp, #12
 81073d4:	af00      	add	r7, sp, #0
 81073d6:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 81073d8:	bf00      	nop
 81073da:	370c      	adds	r7, #12
 81073dc:	46bd      	mov	sp, r7
 81073de:	f85d 7b04 	ldr.w	r7, [sp], #4
 81073e2:	4770      	bx	lr

081073e4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 81073e4:	b580      	push	{r7, lr}
 81073e6:	b082      	sub	sp, #8
 81073e8:	af00      	add	r7, sp, #0
 81073ea:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 81073ec:	687b      	ldr	r3, [r7, #4]
 81073ee:	2b00      	cmp	r3, #0
 81073f0:	d101      	bne.n	81073f6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 81073f2:	2301      	movs	r3, #1
 81073f4:	e081      	b.n	81074fa <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 81073f6:	687b      	ldr	r3, [r7, #4]
 81073f8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 81073fc:	b2db      	uxtb	r3, r3
 81073fe:	2b00      	cmp	r3, #0
 8107400:	d106      	bne.n	8107410 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8107402:	687b      	ldr	r3, [r7, #4]
 8107404:	2200      	movs	r2, #0
 8107406:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 810740a:	6878      	ldr	r0, [r7, #4]
 810740c:	f7fa f882 	bl	8101514 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8107410:	687b      	ldr	r3, [r7, #4]
 8107412:	2224      	movs	r2, #36	; 0x24
 8107414:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8107418:	687b      	ldr	r3, [r7, #4]
 810741a:	681b      	ldr	r3, [r3, #0]
 810741c:	681a      	ldr	r2, [r3, #0]
 810741e:	687b      	ldr	r3, [r7, #4]
 8107420:	681b      	ldr	r3, [r3, #0]
 8107422:	f022 0201 	bic.w	r2, r2, #1
 8107426:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8107428:	687b      	ldr	r3, [r7, #4]
 810742a:	685a      	ldr	r2, [r3, #4]
 810742c:	687b      	ldr	r3, [r7, #4]
 810742e:	681b      	ldr	r3, [r3, #0]
 8107430:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8107434:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8107436:	687b      	ldr	r3, [r7, #4]
 8107438:	681b      	ldr	r3, [r3, #0]
 810743a:	689a      	ldr	r2, [r3, #8]
 810743c:	687b      	ldr	r3, [r7, #4]
 810743e:	681b      	ldr	r3, [r3, #0]
 8107440:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8107444:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8107446:	687b      	ldr	r3, [r7, #4]
 8107448:	68db      	ldr	r3, [r3, #12]
 810744a:	2b01      	cmp	r3, #1
 810744c:	d107      	bne.n	810745e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 810744e:	687b      	ldr	r3, [r7, #4]
 8107450:	689a      	ldr	r2, [r3, #8]
 8107452:	687b      	ldr	r3, [r7, #4]
 8107454:	681b      	ldr	r3, [r3, #0]
 8107456:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 810745a:	609a      	str	r2, [r3, #8]
 810745c:	e006      	b.n	810746c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 810745e:	687b      	ldr	r3, [r7, #4]
 8107460:	689a      	ldr	r2, [r3, #8]
 8107462:	687b      	ldr	r3, [r7, #4]
 8107464:	681b      	ldr	r3, [r3, #0]
 8107466:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 810746a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 810746c:	687b      	ldr	r3, [r7, #4]
 810746e:	68db      	ldr	r3, [r3, #12]
 8107470:	2b02      	cmp	r3, #2
 8107472:	d104      	bne.n	810747e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8107474:	687b      	ldr	r3, [r7, #4]
 8107476:	681b      	ldr	r3, [r3, #0]
 8107478:	f44f 6200 	mov.w	r2, #2048	; 0x800
 810747c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 810747e:	687b      	ldr	r3, [r7, #4]
 8107480:	681b      	ldr	r3, [r3, #0]
 8107482:	685b      	ldr	r3, [r3, #4]
 8107484:	687a      	ldr	r2, [r7, #4]
 8107486:	6812      	ldr	r2, [r2, #0]
 8107488:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 810748c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8107490:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8107492:	687b      	ldr	r3, [r7, #4]
 8107494:	681b      	ldr	r3, [r3, #0]
 8107496:	68da      	ldr	r2, [r3, #12]
 8107498:	687b      	ldr	r3, [r7, #4]
 810749a:	681b      	ldr	r3, [r3, #0]
 810749c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 81074a0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 81074a2:	687b      	ldr	r3, [r7, #4]
 81074a4:	691a      	ldr	r2, [r3, #16]
 81074a6:	687b      	ldr	r3, [r7, #4]
 81074a8:	695b      	ldr	r3, [r3, #20]
 81074aa:	ea42 0103 	orr.w	r1, r2, r3
 81074ae:	687b      	ldr	r3, [r7, #4]
 81074b0:	699b      	ldr	r3, [r3, #24]
 81074b2:	021a      	lsls	r2, r3, #8
 81074b4:	687b      	ldr	r3, [r7, #4]
 81074b6:	681b      	ldr	r3, [r3, #0]
 81074b8:	430a      	orrs	r2, r1
 81074ba:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 81074bc:	687b      	ldr	r3, [r7, #4]
 81074be:	69d9      	ldr	r1, [r3, #28]
 81074c0:	687b      	ldr	r3, [r7, #4]
 81074c2:	6a1a      	ldr	r2, [r3, #32]
 81074c4:	687b      	ldr	r3, [r7, #4]
 81074c6:	681b      	ldr	r3, [r3, #0]
 81074c8:	430a      	orrs	r2, r1
 81074ca:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 81074cc:	687b      	ldr	r3, [r7, #4]
 81074ce:	681b      	ldr	r3, [r3, #0]
 81074d0:	681a      	ldr	r2, [r3, #0]
 81074d2:	687b      	ldr	r3, [r7, #4]
 81074d4:	681b      	ldr	r3, [r3, #0]
 81074d6:	f042 0201 	orr.w	r2, r2, #1
 81074da:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 81074dc:	687b      	ldr	r3, [r7, #4]
 81074de:	2200      	movs	r2, #0
 81074e0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 81074e2:	687b      	ldr	r3, [r7, #4]
 81074e4:	2220      	movs	r2, #32
 81074e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 81074ea:	687b      	ldr	r3, [r7, #4]
 81074ec:	2200      	movs	r2, #0
 81074ee:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 81074f0:	687b      	ldr	r3, [r7, #4]
 81074f2:	2200      	movs	r2, #0
 81074f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 81074f8:	2300      	movs	r3, #0
}
 81074fa:	4618      	mov	r0, r3
 81074fc:	3708      	adds	r7, #8
 81074fe:	46bd      	mov	sp, r7
 8107500:	bd80      	pop	{r7, pc}

08107502 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8107502:	b580      	push	{r7, lr}
 8107504:	b084      	sub	sp, #16
 8107506:	af00      	add	r7, sp, #0
 8107508:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 810750a:	687b      	ldr	r3, [r7, #4]
 810750c:	681b      	ldr	r3, [r3, #0]
 810750e:	699b      	ldr	r3, [r3, #24]
 8107510:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8107512:	687b      	ldr	r3, [r7, #4]
 8107514:	681b      	ldr	r3, [r3, #0]
 8107516:	681b      	ldr	r3, [r3, #0]
 8107518:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 810751a:	687b      	ldr	r3, [r7, #4]
 810751c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 810751e:	2b00      	cmp	r3, #0
 8107520:	d005      	beq.n	810752e <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8107522:	687b      	ldr	r3, [r7, #4]
 8107524:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8107526:	68ba      	ldr	r2, [r7, #8]
 8107528:	68f9      	ldr	r1, [r7, #12]
 810752a:	6878      	ldr	r0, [r7, #4]
 810752c:	4798      	blx	r3
  }
}
 810752e:	bf00      	nop
 8107530:	3710      	adds	r7, #16
 8107532:	46bd      	mov	sp, r7
 8107534:	bd80      	pop	{r7, pc}

08107536 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8107536:	b580      	push	{r7, lr}
 8107538:	b086      	sub	sp, #24
 810753a:	af00      	add	r7, sp, #0
 810753c:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 810753e:	687b      	ldr	r3, [r7, #4]
 8107540:	681b      	ldr	r3, [r3, #0]
 8107542:	699b      	ldr	r3, [r3, #24]
 8107544:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8107546:	687b      	ldr	r3, [r7, #4]
 8107548:	681b      	ldr	r3, [r3, #0]
 810754a:	681b      	ldr	r3, [r3, #0]
 810754c:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 810754e:	697b      	ldr	r3, [r7, #20]
 8107550:	0a1b      	lsrs	r3, r3, #8
 8107552:	f003 0301 	and.w	r3, r3, #1
 8107556:	2b00      	cmp	r3, #0
 8107558:	d010      	beq.n	810757c <HAL_I2C_ER_IRQHandler+0x46>
 810755a:	693b      	ldr	r3, [r7, #16]
 810755c:	09db      	lsrs	r3, r3, #7
 810755e:	f003 0301 	and.w	r3, r3, #1
 8107562:	2b00      	cmp	r3, #0
 8107564:	d00a      	beq.n	810757c <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8107566:	687b      	ldr	r3, [r7, #4]
 8107568:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 810756a:	f043 0201 	orr.w	r2, r3, #1
 810756e:	687b      	ldr	r3, [r7, #4]
 8107570:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8107572:	687b      	ldr	r3, [r7, #4]
 8107574:	681b      	ldr	r3, [r3, #0]
 8107576:	f44f 7280 	mov.w	r2, #256	; 0x100
 810757a:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 810757c:	697b      	ldr	r3, [r7, #20]
 810757e:	0a9b      	lsrs	r3, r3, #10
 8107580:	f003 0301 	and.w	r3, r3, #1
 8107584:	2b00      	cmp	r3, #0
 8107586:	d010      	beq.n	81075aa <HAL_I2C_ER_IRQHandler+0x74>
 8107588:	693b      	ldr	r3, [r7, #16]
 810758a:	09db      	lsrs	r3, r3, #7
 810758c:	f003 0301 	and.w	r3, r3, #1
 8107590:	2b00      	cmp	r3, #0
 8107592:	d00a      	beq.n	81075aa <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8107594:	687b      	ldr	r3, [r7, #4]
 8107596:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8107598:	f043 0208 	orr.w	r2, r3, #8
 810759c:	687b      	ldr	r3, [r7, #4]
 810759e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 81075a0:	687b      	ldr	r3, [r7, #4]
 81075a2:	681b      	ldr	r3, [r3, #0]
 81075a4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 81075a8:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 81075aa:	697b      	ldr	r3, [r7, #20]
 81075ac:	0a5b      	lsrs	r3, r3, #9
 81075ae:	f003 0301 	and.w	r3, r3, #1
 81075b2:	2b00      	cmp	r3, #0
 81075b4:	d010      	beq.n	81075d8 <HAL_I2C_ER_IRQHandler+0xa2>
 81075b6:	693b      	ldr	r3, [r7, #16]
 81075b8:	09db      	lsrs	r3, r3, #7
 81075ba:	f003 0301 	and.w	r3, r3, #1
 81075be:	2b00      	cmp	r3, #0
 81075c0:	d00a      	beq.n	81075d8 <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 81075c2:	687b      	ldr	r3, [r7, #4]
 81075c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 81075c6:	f043 0202 	orr.w	r2, r3, #2
 81075ca:	687b      	ldr	r3, [r7, #4]
 81075cc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 81075ce:	687b      	ldr	r3, [r7, #4]
 81075d0:	681b      	ldr	r3, [r3, #0]
 81075d2:	f44f 7200 	mov.w	r2, #512	; 0x200
 81075d6:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 81075d8:	687b      	ldr	r3, [r7, #4]
 81075da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 81075dc:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 81075de:	68fb      	ldr	r3, [r7, #12]
 81075e0:	f003 030b 	and.w	r3, r3, #11
 81075e4:	2b00      	cmp	r3, #0
 81075e6:	d003      	beq.n	81075f0 <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 81075e8:	68f9      	ldr	r1, [r7, #12]
 81075ea:	6878      	ldr	r0, [r7, #4]
 81075ec:	f000 fc78 	bl	8107ee0 <I2C_ITError>
  }
}
 81075f0:	bf00      	nop
 81075f2:	3718      	adds	r7, #24
 81075f4:	46bd      	mov	sp, r7
 81075f6:	bd80      	pop	{r7, pc}

081075f8 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 81075f8:	b480      	push	{r7}
 81075fa:	b083      	sub	sp, #12
 81075fc:	af00      	add	r7, sp, #0
 81075fe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8107600:	bf00      	nop
 8107602:	370c      	adds	r7, #12
 8107604:	46bd      	mov	sp, r7
 8107606:	f85d 7b04 	ldr.w	r7, [sp], #4
 810760a:	4770      	bx	lr

0810760c <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 810760c:	b480      	push	{r7}
 810760e:	b083      	sub	sp, #12
 8107610:	af00      	add	r7, sp, #0
 8107612:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8107614:	bf00      	nop
 8107616:	370c      	adds	r7, #12
 8107618:	46bd      	mov	sp, r7
 810761a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810761e:	4770      	bx	lr

08107620 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8107620:	b480      	push	{r7}
 8107622:	b083      	sub	sp, #12
 8107624:	af00      	add	r7, sp, #0
 8107626:	6078      	str	r0, [r7, #4]
 8107628:	460b      	mov	r3, r1
 810762a:	70fb      	strb	r3, [r7, #3]
 810762c:	4613      	mov	r3, r2
 810762e:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8107630:	bf00      	nop
 8107632:	370c      	adds	r7, #12
 8107634:	46bd      	mov	sp, r7
 8107636:	f85d 7b04 	ldr.w	r7, [sp], #4
 810763a:	4770      	bx	lr

0810763c <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 810763c:	b480      	push	{r7}
 810763e:	b083      	sub	sp, #12
 8107640:	af00      	add	r7, sp, #0
 8107642:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8107644:	bf00      	nop
 8107646:	370c      	adds	r7, #12
 8107648:	46bd      	mov	sp, r7
 810764a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810764e:	4770      	bx	lr

08107650 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8107650:	b480      	push	{r7}
 8107652:	b083      	sub	sp, #12
 8107654:	af00      	add	r7, sp, #0
 8107656:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8107658:	bf00      	nop
 810765a:	370c      	adds	r7, #12
 810765c:	46bd      	mov	sp, r7
 810765e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107662:	4770      	bx	lr

08107664 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8107664:	b480      	push	{r7}
 8107666:	b083      	sub	sp, #12
 8107668:	af00      	add	r7, sp, #0
 810766a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 810766c:	bf00      	nop
 810766e:	370c      	adds	r7, #12
 8107670:	46bd      	mov	sp, r7
 8107672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107676:	4770      	bx	lr

08107678 <I2C_Slave_ISR_IT>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 8107678:	b580      	push	{r7, lr}
 810767a:	b086      	sub	sp, #24
 810767c:	af00      	add	r7, sp, #0
 810767e:	60f8      	str	r0, [r7, #12]
 8107680:	60b9      	str	r1, [r7, #8]
 8107682:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8107684:	68fb      	ldr	r3, [r7, #12]
 8107686:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8107688:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 810768a:	68bb      	ldr	r3, [r7, #8]
 810768c:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 810768e:	68fb      	ldr	r3, [r7, #12]
 8107690:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8107694:	2b01      	cmp	r3, #1
 8107696:	d101      	bne.n	810769c <I2C_Slave_ISR_IT+0x24>
 8107698:	2302      	movs	r3, #2
 810769a:	e0ec      	b.n	8107876 <I2C_Slave_ISR_IT+0x1fe>
 810769c:	68fb      	ldr	r3, [r7, #12]
 810769e:	2201      	movs	r2, #1
 81076a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 81076a4:	693b      	ldr	r3, [r7, #16]
 81076a6:	095b      	lsrs	r3, r3, #5
 81076a8:	f003 0301 	and.w	r3, r3, #1
 81076ac:	2b00      	cmp	r3, #0
 81076ae:	d009      	beq.n	81076c4 <I2C_Slave_ISR_IT+0x4c>
 81076b0:	687b      	ldr	r3, [r7, #4]
 81076b2:	095b      	lsrs	r3, r3, #5
 81076b4:	f003 0301 	and.w	r3, r3, #1
 81076b8:	2b00      	cmp	r3, #0
 81076ba:	d003      	beq.n	81076c4 <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 81076bc:	6939      	ldr	r1, [r7, #16]
 81076be:	68f8      	ldr	r0, [r7, #12]
 81076c0:	f000 f9c0 	bl	8107a44 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 81076c4:	693b      	ldr	r3, [r7, #16]
 81076c6:	091b      	lsrs	r3, r3, #4
 81076c8:	f003 0301 	and.w	r3, r3, #1
 81076cc:	2b00      	cmp	r3, #0
 81076ce:	d04d      	beq.n	810776c <I2C_Slave_ISR_IT+0xf4>
 81076d0:	687b      	ldr	r3, [r7, #4]
 81076d2:	091b      	lsrs	r3, r3, #4
 81076d4:	f003 0301 	and.w	r3, r3, #1
 81076d8:	2b00      	cmp	r3, #0
 81076da:	d047      	beq.n	810776c <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 81076dc:	68fb      	ldr	r3, [r7, #12]
 81076de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 81076e0:	b29b      	uxth	r3, r3
 81076e2:	2b00      	cmp	r3, #0
 81076e4:	d128      	bne.n	8107738 <I2C_Slave_ISR_IT+0xc0>
    {
      /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 81076e6:	68fb      	ldr	r3, [r7, #12]
 81076e8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 81076ec:	b2db      	uxtb	r3, r3
 81076ee:	2b28      	cmp	r3, #40	; 0x28
 81076f0:	d108      	bne.n	8107704 <I2C_Slave_ISR_IT+0x8c>
 81076f2:	697b      	ldr	r3, [r7, #20]
 81076f4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 81076f8:	d104      	bne.n	8107704 <I2C_Slave_ISR_IT+0x8c>
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 81076fa:	6939      	ldr	r1, [r7, #16]
 81076fc:	68f8      	ldr	r0, [r7, #12]
 81076fe:	f000 fb99 	bl	8107e34 <I2C_ITListenCplt>
 8107702:	e032      	b.n	810776a <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8107704:	68fb      	ldr	r3, [r7, #12]
 8107706:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 810770a:	b2db      	uxtb	r3, r3
 810770c:	2b29      	cmp	r3, #41	; 0x29
 810770e:	d10e      	bne.n	810772e <I2C_Slave_ISR_IT+0xb6>
 8107710:	697b      	ldr	r3, [r7, #20]
 8107712:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8107716:	d00a      	beq.n	810772e <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8107718:	68fb      	ldr	r3, [r7, #12]
 810771a:	681b      	ldr	r3, [r3, #0]
 810771c:	2210      	movs	r2, #16
 810771e:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8107720:	68f8      	ldr	r0, [r7, #12]
 8107722:	f000 fcd4 	bl	81080ce <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8107726:	68f8      	ldr	r0, [r7, #12]
 8107728:	f000 f92d 	bl	8107986 <I2C_ITSlaveSeqCplt>
 810772c:	e01d      	b.n	810776a <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 810772e:	68fb      	ldr	r3, [r7, #12]
 8107730:	681b      	ldr	r3, [r3, #0]
 8107732:	2210      	movs	r2, #16
 8107734:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8107736:	e096      	b.n	8107866 <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8107738:	68fb      	ldr	r3, [r7, #12]
 810773a:	681b      	ldr	r3, [r3, #0]
 810773c:	2210      	movs	r2, #16
 810773e:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8107740:	68fb      	ldr	r3, [r7, #12]
 8107742:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8107744:	f043 0204 	orr.w	r2, r3, #4
 8107748:	68fb      	ldr	r3, [r7, #12]
 810774a:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 810774c:	697b      	ldr	r3, [r7, #20]
 810774e:	2b00      	cmp	r3, #0
 8107750:	d004      	beq.n	810775c <I2C_Slave_ISR_IT+0xe4>
 8107752:	697b      	ldr	r3, [r7, #20]
 8107754:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8107758:	f040 8085 	bne.w	8107866 <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 810775c:	68fb      	ldr	r3, [r7, #12]
 810775e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8107760:	4619      	mov	r1, r3
 8107762:	68f8      	ldr	r0, [r7, #12]
 8107764:	f000 fbbc 	bl	8107ee0 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8107768:	e07d      	b.n	8107866 <I2C_Slave_ISR_IT+0x1ee>
 810776a:	e07c      	b.n	8107866 <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 810776c:	693b      	ldr	r3, [r7, #16]
 810776e:	089b      	lsrs	r3, r3, #2
 8107770:	f003 0301 	and.w	r3, r3, #1
 8107774:	2b00      	cmp	r3, #0
 8107776:	d030      	beq.n	81077da <I2C_Slave_ISR_IT+0x162>
 8107778:	687b      	ldr	r3, [r7, #4]
 810777a:	089b      	lsrs	r3, r3, #2
 810777c:	f003 0301 	and.w	r3, r3, #1
 8107780:	2b00      	cmp	r3, #0
 8107782:	d02a      	beq.n	81077da <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 8107784:	68fb      	ldr	r3, [r7, #12]
 8107786:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8107788:	b29b      	uxth	r3, r3
 810778a:	2b00      	cmp	r3, #0
 810778c:	d018      	beq.n	81077c0 <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 810778e:	68fb      	ldr	r3, [r7, #12]
 8107790:	681b      	ldr	r3, [r3, #0]
 8107792:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8107794:	68fb      	ldr	r3, [r7, #12]
 8107796:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8107798:	b2d2      	uxtb	r2, r2
 810779a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 810779c:	68fb      	ldr	r3, [r7, #12]
 810779e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81077a0:	1c5a      	adds	r2, r3, #1
 81077a2:	68fb      	ldr	r3, [r7, #12]
 81077a4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 81077a6:	68fb      	ldr	r3, [r7, #12]
 81077a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 81077aa:	3b01      	subs	r3, #1
 81077ac:	b29a      	uxth	r2, r3
 81077ae:	68fb      	ldr	r3, [r7, #12]
 81077b0:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 81077b2:	68fb      	ldr	r3, [r7, #12]
 81077b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 81077b6:	b29b      	uxth	r3, r3
 81077b8:	3b01      	subs	r3, #1
 81077ba:	b29a      	uxth	r2, r3
 81077bc:	68fb      	ldr	r3, [r7, #12]
 81077be:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 81077c0:	68fb      	ldr	r3, [r7, #12]
 81077c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 81077c4:	b29b      	uxth	r3, r3
 81077c6:	2b00      	cmp	r3, #0
 81077c8:	d14f      	bne.n	810786a <I2C_Slave_ISR_IT+0x1f2>
 81077ca:	697b      	ldr	r3, [r7, #20]
 81077cc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 81077d0:	d04b      	beq.n	810786a <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 81077d2:	68f8      	ldr	r0, [r7, #12]
 81077d4:	f000 f8d7 	bl	8107986 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 81077d8:	e047      	b.n	810786a <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 81077da:	693b      	ldr	r3, [r7, #16]
 81077dc:	08db      	lsrs	r3, r3, #3
 81077de:	f003 0301 	and.w	r3, r3, #1
 81077e2:	2b00      	cmp	r3, #0
 81077e4:	d00a      	beq.n	81077fc <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 81077e6:	687b      	ldr	r3, [r7, #4]
 81077e8:	08db      	lsrs	r3, r3, #3
 81077ea:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 81077ee:	2b00      	cmp	r3, #0
 81077f0:	d004      	beq.n	81077fc <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 81077f2:	6939      	ldr	r1, [r7, #16]
 81077f4:	68f8      	ldr	r0, [r7, #12]
 81077f6:	f000 f842 	bl	810787e <I2C_ITAddrCplt>
 81077fa:	e037      	b.n	810786c <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 81077fc:	693b      	ldr	r3, [r7, #16]
 81077fe:	085b      	lsrs	r3, r3, #1
 8107800:	f003 0301 	and.w	r3, r3, #1
 8107804:	2b00      	cmp	r3, #0
 8107806:	d031      	beq.n	810786c <I2C_Slave_ISR_IT+0x1f4>
 8107808:	687b      	ldr	r3, [r7, #4]
 810780a:	085b      	lsrs	r3, r3, #1
 810780c:	f003 0301 	and.w	r3, r3, #1
 8107810:	2b00      	cmp	r3, #0
 8107812:	d02b      	beq.n	810786c <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8107814:	68fb      	ldr	r3, [r7, #12]
 8107816:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8107818:	b29b      	uxth	r3, r3
 810781a:	2b00      	cmp	r3, #0
 810781c:	d018      	beq.n	8107850 <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 810781e:	68fb      	ldr	r3, [r7, #12]
 8107820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8107822:	781a      	ldrb	r2, [r3, #0]
 8107824:	68fb      	ldr	r3, [r7, #12]
 8107826:	681b      	ldr	r3, [r3, #0]
 8107828:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 810782a:	68fb      	ldr	r3, [r7, #12]
 810782c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810782e:	1c5a      	adds	r2, r3, #1
 8107830:	68fb      	ldr	r3, [r7, #12]
 8107832:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8107834:	68fb      	ldr	r3, [r7, #12]
 8107836:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8107838:	b29b      	uxth	r3, r3
 810783a:	3b01      	subs	r3, #1
 810783c:	b29a      	uxth	r2, r3
 810783e:	68fb      	ldr	r3, [r7, #12]
 8107840:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8107842:	68fb      	ldr	r3, [r7, #12]
 8107844:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8107846:	3b01      	subs	r3, #1
 8107848:	b29a      	uxth	r2, r3
 810784a:	68fb      	ldr	r3, [r7, #12]
 810784c:	851a      	strh	r2, [r3, #40]	; 0x28
 810784e:	e00d      	b.n	810786c <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8107850:	697b      	ldr	r3, [r7, #20]
 8107852:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8107856:	d002      	beq.n	810785e <I2C_Slave_ISR_IT+0x1e6>
 8107858:	697b      	ldr	r3, [r7, #20]
 810785a:	2b00      	cmp	r3, #0
 810785c:	d106      	bne.n	810786c <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 810785e:	68f8      	ldr	r0, [r7, #12]
 8107860:	f000 f891 	bl	8107986 <I2C_ITSlaveSeqCplt>
 8107864:	e002      	b.n	810786c <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 8107866:	bf00      	nop
 8107868:	e000      	b.n	810786c <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 810786a:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 810786c:	68fb      	ldr	r3, [r7, #12]
 810786e:	2200      	movs	r2, #0
 8107870:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8107874:	2300      	movs	r3, #0
}
 8107876:	4618      	mov	r0, r3
 8107878:	3718      	adds	r7, #24
 810787a:	46bd      	mov	sp, r7
 810787c:	bd80      	pop	{r7, pc}

0810787e <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 810787e:	b580      	push	{r7, lr}
 8107880:	b084      	sub	sp, #16
 8107882:	af00      	add	r7, sp, #0
 8107884:	6078      	str	r0, [r7, #4]
 8107886:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8107888:	687b      	ldr	r3, [r7, #4]
 810788a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 810788e:	b2db      	uxtb	r3, r3
 8107890:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8107894:	2b28      	cmp	r3, #40	; 0x28
 8107896:	d16a      	bne.n	810796e <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8107898:	687b      	ldr	r3, [r7, #4]
 810789a:	681b      	ldr	r3, [r3, #0]
 810789c:	699b      	ldr	r3, [r3, #24]
 810789e:	0c1b      	lsrs	r3, r3, #16
 81078a0:	b2db      	uxtb	r3, r3
 81078a2:	f003 0301 	and.w	r3, r3, #1
 81078a6:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 81078a8:	687b      	ldr	r3, [r7, #4]
 81078aa:	681b      	ldr	r3, [r3, #0]
 81078ac:	699b      	ldr	r3, [r3, #24]
 81078ae:	0c1b      	lsrs	r3, r3, #16
 81078b0:	b29b      	uxth	r3, r3
 81078b2:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 81078b6:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 81078b8:	687b      	ldr	r3, [r7, #4]
 81078ba:	681b      	ldr	r3, [r3, #0]
 81078bc:	689b      	ldr	r3, [r3, #8]
 81078be:	b29b      	uxth	r3, r3
 81078c0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 81078c4:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 81078c6:	687b      	ldr	r3, [r7, #4]
 81078c8:	681b      	ldr	r3, [r3, #0]
 81078ca:	68db      	ldr	r3, [r3, #12]
 81078cc:	b29b      	uxth	r3, r3
 81078ce:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 81078d2:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 81078d4:	687b      	ldr	r3, [r7, #4]
 81078d6:	68db      	ldr	r3, [r3, #12]
 81078d8:	2b02      	cmp	r3, #2
 81078da:	d138      	bne.n	810794e <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 81078dc:	897b      	ldrh	r3, [r7, #10]
 81078de:	09db      	lsrs	r3, r3, #7
 81078e0:	b29a      	uxth	r2, r3
 81078e2:	89bb      	ldrh	r3, [r7, #12]
 81078e4:	4053      	eors	r3, r2
 81078e6:	b29b      	uxth	r3, r3
 81078e8:	f003 0306 	and.w	r3, r3, #6
 81078ec:	2b00      	cmp	r3, #0
 81078ee:	d11c      	bne.n	810792a <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 81078f0:	897b      	ldrh	r3, [r7, #10]
 81078f2:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 81078f4:	687b      	ldr	r3, [r7, #4]
 81078f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 81078f8:	1c5a      	adds	r2, r3, #1
 81078fa:	687b      	ldr	r3, [r7, #4]
 81078fc:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 81078fe:	687b      	ldr	r3, [r7, #4]
 8107900:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8107902:	2b02      	cmp	r3, #2
 8107904:	d13b      	bne.n	810797e <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8107906:	687b      	ldr	r3, [r7, #4]
 8107908:	2200      	movs	r2, #0
 810790a:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 810790c:	687b      	ldr	r3, [r7, #4]
 810790e:	681b      	ldr	r3, [r3, #0]
 8107910:	2208      	movs	r2, #8
 8107912:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8107914:	687b      	ldr	r3, [r7, #4]
 8107916:	2200      	movs	r2, #0
 8107918:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 810791c:	89ba      	ldrh	r2, [r7, #12]
 810791e:	7bfb      	ldrb	r3, [r7, #15]
 8107920:	4619      	mov	r1, r3
 8107922:	6878      	ldr	r0, [r7, #4]
 8107924:	f7ff fe7c 	bl	8107620 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8107928:	e029      	b.n	810797e <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 810792a:	893b      	ldrh	r3, [r7, #8]
 810792c:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 810792e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8107932:	6878      	ldr	r0, [r7, #4]
 8107934:	f000 fc0d 	bl	8108152 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8107938:	687b      	ldr	r3, [r7, #4]
 810793a:	2200      	movs	r2, #0
 810793c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8107940:	89ba      	ldrh	r2, [r7, #12]
 8107942:	7bfb      	ldrb	r3, [r7, #15]
 8107944:	4619      	mov	r1, r3
 8107946:	6878      	ldr	r0, [r7, #4]
 8107948:	f7ff fe6a 	bl	8107620 <HAL_I2C_AddrCallback>
}
 810794c:	e017      	b.n	810797e <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 810794e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8107952:	6878      	ldr	r0, [r7, #4]
 8107954:	f000 fbfd 	bl	8108152 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8107958:	687b      	ldr	r3, [r7, #4]
 810795a:	2200      	movs	r2, #0
 810795c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8107960:	89ba      	ldrh	r2, [r7, #12]
 8107962:	7bfb      	ldrb	r3, [r7, #15]
 8107964:	4619      	mov	r1, r3
 8107966:	6878      	ldr	r0, [r7, #4]
 8107968:	f7ff fe5a 	bl	8107620 <HAL_I2C_AddrCallback>
}
 810796c:	e007      	b.n	810797e <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 810796e:	687b      	ldr	r3, [r7, #4]
 8107970:	681b      	ldr	r3, [r3, #0]
 8107972:	2208      	movs	r2, #8
 8107974:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8107976:	687b      	ldr	r3, [r7, #4]
 8107978:	2200      	movs	r2, #0
 810797a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 810797e:	bf00      	nop
 8107980:	3710      	adds	r7, #16
 8107982:	46bd      	mov	sp, r7
 8107984:	bd80      	pop	{r7, pc}

08107986 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8107986:	b580      	push	{r7, lr}
 8107988:	b084      	sub	sp, #16
 810798a:	af00      	add	r7, sp, #0
 810798c:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 810798e:	687b      	ldr	r3, [r7, #4]
 8107990:	681b      	ldr	r3, [r3, #0]
 8107992:	681b      	ldr	r3, [r3, #0]
 8107994:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8107996:	687b      	ldr	r3, [r7, #4]
 8107998:	2200      	movs	r2, #0
 810799a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 810799e:	68fb      	ldr	r3, [r7, #12]
 81079a0:	0b9b      	lsrs	r3, r3, #14
 81079a2:	f003 0301 	and.w	r3, r3, #1
 81079a6:	2b00      	cmp	r3, #0
 81079a8:	d008      	beq.n	81079bc <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 81079aa:	687b      	ldr	r3, [r7, #4]
 81079ac:	681b      	ldr	r3, [r3, #0]
 81079ae:	681a      	ldr	r2, [r3, #0]
 81079b0:	687b      	ldr	r3, [r7, #4]
 81079b2:	681b      	ldr	r3, [r3, #0]
 81079b4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 81079b8:	601a      	str	r2, [r3, #0]
 81079ba:	e00d      	b.n	81079d8 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 81079bc:	68fb      	ldr	r3, [r7, #12]
 81079be:	0bdb      	lsrs	r3, r3, #15
 81079c0:	f003 0301 	and.w	r3, r3, #1
 81079c4:	2b00      	cmp	r3, #0
 81079c6:	d007      	beq.n	81079d8 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 81079c8:	687b      	ldr	r3, [r7, #4]
 81079ca:	681b      	ldr	r3, [r3, #0]
 81079cc:	681a      	ldr	r2, [r3, #0]
 81079ce:	687b      	ldr	r3, [r7, #4]
 81079d0:	681b      	ldr	r3, [r3, #0]
 81079d2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 81079d6:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 81079d8:	687b      	ldr	r3, [r7, #4]
 81079da:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 81079de:	b2db      	uxtb	r3, r3
 81079e0:	2b29      	cmp	r3, #41	; 0x29
 81079e2:	d112      	bne.n	8107a0a <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 81079e4:	687b      	ldr	r3, [r7, #4]
 81079e6:	2228      	movs	r2, #40	; 0x28
 81079e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 81079ec:	687b      	ldr	r3, [r7, #4]
 81079ee:	2221      	movs	r2, #33	; 0x21
 81079f0:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 81079f2:	2101      	movs	r1, #1
 81079f4:	6878      	ldr	r0, [r7, #4]
 81079f6:	f000 fbac 	bl	8108152 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 81079fa:	687b      	ldr	r3, [r7, #4]
 81079fc:	2200      	movs	r2, #0
 81079fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8107a02:	6878      	ldr	r0, [r7, #4]
 8107a04:	f7ff fdf8 	bl	81075f8 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8107a08:	e017      	b.n	8107a3a <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8107a0a:	687b      	ldr	r3, [r7, #4]
 8107a0c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8107a10:	b2db      	uxtb	r3, r3
 8107a12:	2b2a      	cmp	r3, #42	; 0x2a
 8107a14:	d111      	bne.n	8107a3a <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8107a16:	687b      	ldr	r3, [r7, #4]
 8107a18:	2228      	movs	r2, #40	; 0x28
 8107a1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8107a1e:	687b      	ldr	r3, [r7, #4]
 8107a20:	2222      	movs	r2, #34	; 0x22
 8107a22:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8107a24:	2102      	movs	r1, #2
 8107a26:	6878      	ldr	r0, [r7, #4]
 8107a28:	f000 fb93 	bl	8108152 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8107a2c:	687b      	ldr	r3, [r7, #4]
 8107a2e:	2200      	movs	r2, #0
 8107a30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8107a34:	6878      	ldr	r0, [r7, #4]
 8107a36:	f7ff fde9 	bl	810760c <HAL_I2C_SlaveRxCpltCallback>
}
 8107a3a:	bf00      	nop
 8107a3c:	3710      	adds	r7, #16
 8107a3e:	46bd      	mov	sp, r7
 8107a40:	bd80      	pop	{r7, pc}
	...

08107a44 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8107a44:	b580      	push	{r7, lr}
 8107a46:	b086      	sub	sp, #24
 8107a48:	af00      	add	r7, sp, #0
 8107a4a:	6078      	str	r0, [r7, #4]
 8107a4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8107a4e:	687b      	ldr	r3, [r7, #4]
 8107a50:	681b      	ldr	r3, [r3, #0]
 8107a52:	681b      	ldr	r3, [r3, #0]
 8107a54:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8107a56:	683b      	ldr	r3, [r7, #0]
 8107a58:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8107a5a:	687b      	ldr	r3, [r7, #4]
 8107a5c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8107a60:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8107a62:	687b      	ldr	r3, [r7, #4]
 8107a64:	681b      	ldr	r3, [r3, #0]
 8107a66:	2220      	movs	r2, #32
 8107a68:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8107a6a:	7bfb      	ldrb	r3, [r7, #15]
 8107a6c:	2b21      	cmp	r3, #33	; 0x21
 8107a6e:	d002      	beq.n	8107a76 <I2C_ITSlaveCplt+0x32>
 8107a70:	7bfb      	ldrb	r3, [r7, #15]
 8107a72:	2b29      	cmp	r3, #41	; 0x29
 8107a74:	d108      	bne.n	8107a88 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8107a76:	f248 0101 	movw	r1, #32769	; 0x8001
 8107a7a:	6878      	ldr	r0, [r7, #4]
 8107a7c:	f000 fb69 	bl	8108152 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8107a80:	687b      	ldr	r3, [r7, #4]
 8107a82:	2221      	movs	r2, #33	; 0x21
 8107a84:	631a      	str	r2, [r3, #48]	; 0x30
 8107a86:	e00d      	b.n	8107aa4 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8107a88:	7bfb      	ldrb	r3, [r7, #15]
 8107a8a:	2b22      	cmp	r3, #34	; 0x22
 8107a8c:	d002      	beq.n	8107a94 <I2C_ITSlaveCplt+0x50>
 8107a8e:	7bfb      	ldrb	r3, [r7, #15]
 8107a90:	2b2a      	cmp	r3, #42	; 0x2a
 8107a92:	d107      	bne.n	8107aa4 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8107a94:	f248 0102 	movw	r1, #32770	; 0x8002
 8107a98:	6878      	ldr	r0, [r7, #4]
 8107a9a:	f000 fb5a 	bl	8108152 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8107a9e:	687b      	ldr	r3, [r7, #4]
 8107aa0:	2222      	movs	r2, #34	; 0x22
 8107aa2:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8107aa4:	687b      	ldr	r3, [r7, #4]
 8107aa6:	681b      	ldr	r3, [r3, #0]
 8107aa8:	685a      	ldr	r2, [r3, #4]
 8107aaa:	687b      	ldr	r3, [r7, #4]
 8107aac:	681b      	ldr	r3, [r3, #0]
 8107aae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8107ab2:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8107ab4:	687b      	ldr	r3, [r7, #4]
 8107ab6:	681b      	ldr	r3, [r3, #0]
 8107ab8:	6859      	ldr	r1, [r3, #4]
 8107aba:	687b      	ldr	r3, [r7, #4]
 8107abc:	681a      	ldr	r2, [r3, #0]
 8107abe:	4b80      	ldr	r3, [pc, #512]	; (8107cc0 <I2C_ITSlaveCplt+0x27c>)
 8107ac0:	400b      	ands	r3, r1
 8107ac2:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8107ac4:	6878      	ldr	r0, [r7, #4]
 8107ac6:	f000 fb02 	bl	81080ce <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8107aca:	693b      	ldr	r3, [r7, #16]
 8107acc:	0b9b      	lsrs	r3, r3, #14
 8107ace:	f003 0301 	and.w	r3, r3, #1
 8107ad2:	2b00      	cmp	r3, #0
 8107ad4:	d07a      	beq.n	8107bcc <I2C_ITSlaveCplt+0x188>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8107ad6:	687b      	ldr	r3, [r7, #4]
 8107ad8:	681b      	ldr	r3, [r3, #0]
 8107ada:	681a      	ldr	r2, [r3, #0]
 8107adc:	687b      	ldr	r3, [r7, #4]
 8107ade:	681b      	ldr	r3, [r3, #0]
 8107ae0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8107ae4:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8107ae6:	687b      	ldr	r3, [r7, #4]
 8107ae8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8107aea:	2b00      	cmp	r3, #0
 8107aec:	f000 8111 	beq.w	8107d12 <I2C_ITSlaveCplt+0x2ce>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 8107af0:	687b      	ldr	r3, [r7, #4]
 8107af2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8107af4:	681b      	ldr	r3, [r3, #0]
 8107af6:	4a73      	ldr	r2, [pc, #460]	; (8107cc4 <I2C_ITSlaveCplt+0x280>)
 8107af8:	4293      	cmp	r3, r2
 8107afa:	d059      	beq.n	8107bb0 <I2C_ITSlaveCplt+0x16c>
 8107afc:	687b      	ldr	r3, [r7, #4]
 8107afe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8107b00:	681b      	ldr	r3, [r3, #0]
 8107b02:	4a71      	ldr	r2, [pc, #452]	; (8107cc8 <I2C_ITSlaveCplt+0x284>)
 8107b04:	4293      	cmp	r3, r2
 8107b06:	d053      	beq.n	8107bb0 <I2C_ITSlaveCplt+0x16c>
 8107b08:	687b      	ldr	r3, [r7, #4]
 8107b0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8107b0c:	681b      	ldr	r3, [r3, #0]
 8107b0e:	4a6f      	ldr	r2, [pc, #444]	; (8107ccc <I2C_ITSlaveCplt+0x288>)
 8107b10:	4293      	cmp	r3, r2
 8107b12:	d04d      	beq.n	8107bb0 <I2C_ITSlaveCplt+0x16c>
 8107b14:	687b      	ldr	r3, [r7, #4]
 8107b16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8107b18:	681b      	ldr	r3, [r3, #0]
 8107b1a:	4a6d      	ldr	r2, [pc, #436]	; (8107cd0 <I2C_ITSlaveCplt+0x28c>)
 8107b1c:	4293      	cmp	r3, r2
 8107b1e:	d047      	beq.n	8107bb0 <I2C_ITSlaveCplt+0x16c>
 8107b20:	687b      	ldr	r3, [r7, #4]
 8107b22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8107b24:	681b      	ldr	r3, [r3, #0]
 8107b26:	4a6b      	ldr	r2, [pc, #428]	; (8107cd4 <I2C_ITSlaveCplt+0x290>)
 8107b28:	4293      	cmp	r3, r2
 8107b2a:	d041      	beq.n	8107bb0 <I2C_ITSlaveCplt+0x16c>
 8107b2c:	687b      	ldr	r3, [r7, #4]
 8107b2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8107b30:	681b      	ldr	r3, [r3, #0]
 8107b32:	4a69      	ldr	r2, [pc, #420]	; (8107cd8 <I2C_ITSlaveCplt+0x294>)
 8107b34:	4293      	cmp	r3, r2
 8107b36:	d03b      	beq.n	8107bb0 <I2C_ITSlaveCplt+0x16c>
 8107b38:	687b      	ldr	r3, [r7, #4]
 8107b3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8107b3c:	681b      	ldr	r3, [r3, #0]
 8107b3e:	4a67      	ldr	r2, [pc, #412]	; (8107cdc <I2C_ITSlaveCplt+0x298>)
 8107b40:	4293      	cmp	r3, r2
 8107b42:	d035      	beq.n	8107bb0 <I2C_ITSlaveCplt+0x16c>
 8107b44:	687b      	ldr	r3, [r7, #4]
 8107b46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8107b48:	681b      	ldr	r3, [r3, #0]
 8107b4a:	4a65      	ldr	r2, [pc, #404]	; (8107ce0 <I2C_ITSlaveCplt+0x29c>)
 8107b4c:	4293      	cmp	r3, r2
 8107b4e:	d02f      	beq.n	8107bb0 <I2C_ITSlaveCplt+0x16c>
 8107b50:	687b      	ldr	r3, [r7, #4]
 8107b52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8107b54:	681b      	ldr	r3, [r3, #0]
 8107b56:	4a63      	ldr	r2, [pc, #396]	; (8107ce4 <I2C_ITSlaveCplt+0x2a0>)
 8107b58:	4293      	cmp	r3, r2
 8107b5a:	d029      	beq.n	8107bb0 <I2C_ITSlaveCplt+0x16c>
 8107b5c:	687b      	ldr	r3, [r7, #4]
 8107b5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8107b60:	681b      	ldr	r3, [r3, #0]
 8107b62:	4a61      	ldr	r2, [pc, #388]	; (8107ce8 <I2C_ITSlaveCplt+0x2a4>)
 8107b64:	4293      	cmp	r3, r2
 8107b66:	d023      	beq.n	8107bb0 <I2C_ITSlaveCplt+0x16c>
 8107b68:	687b      	ldr	r3, [r7, #4]
 8107b6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8107b6c:	681b      	ldr	r3, [r3, #0]
 8107b6e:	4a5f      	ldr	r2, [pc, #380]	; (8107cec <I2C_ITSlaveCplt+0x2a8>)
 8107b70:	4293      	cmp	r3, r2
 8107b72:	d01d      	beq.n	8107bb0 <I2C_ITSlaveCplt+0x16c>
 8107b74:	687b      	ldr	r3, [r7, #4]
 8107b76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8107b78:	681b      	ldr	r3, [r3, #0]
 8107b7a:	4a5d      	ldr	r2, [pc, #372]	; (8107cf0 <I2C_ITSlaveCplt+0x2ac>)
 8107b7c:	4293      	cmp	r3, r2
 8107b7e:	d017      	beq.n	8107bb0 <I2C_ITSlaveCplt+0x16c>
 8107b80:	687b      	ldr	r3, [r7, #4]
 8107b82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8107b84:	681b      	ldr	r3, [r3, #0]
 8107b86:	4a5b      	ldr	r2, [pc, #364]	; (8107cf4 <I2C_ITSlaveCplt+0x2b0>)
 8107b88:	4293      	cmp	r3, r2
 8107b8a:	d011      	beq.n	8107bb0 <I2C_ITSlaveCplt+0x16c>
 8107b8c:	687b      	ldr	r3, [r7, #4]
 8107b8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8107b90:	681b      	ldr	r3, [r3, #0]
 8107b92:	4a59      	ldr	r2, [pc, #356]	; (8107cf8 <I2C_ITSlaveCplt+0x2b4>)
 8107b94:	4293      	cmp	r3, r2
 8107b96:	d00b      	beq.n	8107bb0 <I2C_ITSlaveCplt+0x16c>
 8107b98:	687b      	ldr	r3, [r7, #4]
 8107b9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8107b9c:	681b      	ldr	r3, [r3, #0]
 8107b9e:	4a57      	ldr	r2, [pc, #348]	; (8107cfc <I2C_ITSlaveCplt+0x2b8>)
 8107ba0:	4293      	cmp	r3, r2
 8107ba2:	d005      	beq.n	8107bb0 <I2C_ITSlaveCplt+0x16c>
 8107ba4:	687b      	ldr	r3, [r7, #4]
 8107ba6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8107ba8:	681b      	ldr	r3, [r3, #0]
 8107baa:	4a55      	ldr	r2, [pc, #340]	; (8107d00 <I2C_ITSlaveCplt+0x2bc>)
 8107bac:	4293      	cmp	r3, r2
 8107bae:	d105      	bne.n	8107bbc <I2C_ITSlaveCplt+0x178>
 8107bb0:	687b      	ldr	r3, [r7, #4]
 8107bb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8107bb4:	681b      	ldr	r3, [r3, #0]
 8107bb6:	685b      	ldr	r3, [r3, #4]
 8107bb8:	b29b      	uxth	r3, r3
 8107bba:	e004      	b.n	8107bc6 <I2C_ITSlaveCplt+0x182>
 8107bbc:	687b      	ldr	r3, [r7, #4]
 8107bbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8107bc0:	681b      	ldr	r3, [r3, #0]
 8107bc2:	685b      	ldr	r3, [r3, #4]
 8107bc4:	b29b      	uxth	r3, r3
 8107bc6:	687a      	ldr	r2, [r7, #4]
 8107bc8:	8553      	strh	r3, [r2, #42]	; 0x2a
 8107bca:	e0a2      	b.n	8107d12 <I2C_ITSlaveCplt+0x2ce>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8107bcc:	693b      	ldr	r3, [r7, #16]
 8107bce:	0bdb      	lsrs	r3, r3, #15
 8107bd0:	f003 0301 	and.w	r3, r3, #1
 8107bd4:	2b00      	cmp	r3, #0
 8107bd6:	f000 809c 	beq.w	8107d12 <I2C_ITSlaveCplt+0x2ce>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8107bda:	687b      	ldr	r3, [r7, #4]
 8107bdc:	681b      	ldr	r3, [r3, #0]
 8107bde:	681a      	ldr	r2, [r3, #0]
 8107be0:	687b      	ldr	r3, [r7, #4]
 8107be2:	681b      	ldr	r3, [r3, #0]
 8107be4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8107be8:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8107bea:	687b      	ldr	r3, [r7, #4]
 8107bec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8107bee:	2b00      	cmp	r3, #0
 8107bf0:	f000 808f 	beq.w	8107d12 <I2C_ITSlaveCplt+0x2ce>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 8107bf4:	687b      	ldr	r3, [r7, #4]
 8107bf6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8107bf8:	681b      	ldr	r3, [r3, #0]
 8107bfa:	4a32      	ldr	r2, [pc, #200]	; (8107cc4 <I2C_ITSlaveCplt+0x280>)
 8107bfc:	4293      	cmp	r3, r2
 8107bfe:	d059      	beq.n	8107cb4 <I2C_ITSlaveCplt+0x270>
 8107c00:	687b      	ldr	r3, [r7, #4]
 8107c02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8107c04:	681b      	ldr	r3, [r3, #0]
 8107c06:	4a30      	ldr	r2, [pc, #192]	; (8107cc8 <I2C_ITSlaveCplt+0x284>)
 8107c08:	4293      	cmp	r3, r2
 8107c0a:	d053      	beq.n	8107cb4 <I2C_ITSlaveCplt+0x270>
 8107c0c:	687b      	ldr	r3, [r7, #4]
 8107c0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8107c10:	681b      	ldr	r3, [r3, #0]
 8107c12:	4a2e      	ldr	r2, [pc, #184]	; (8107ccc <I2C_ITSlaveCplt+0x288>)
 8107c14:	4293      	cmp	r3, r2
 8107c16:	d04d      	beq.n	8107cb4 <I2C_ITSlaveCplt+0x270>
 8107c18:	687b      	ldr	r3, [r7, #4]
 8107c1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8107c1c:	681b      	ldr	r3, [r3, #0]
 8107c1e:	4a2c      	ldr	r2, [pc, #176]	; (8107cd0 <I2C_ITSlaveCplt+0x28c>)
 8107c20:	4293      	cmp	r3, r2
 8107c22:	d047      	beq.n	8107cb4 <I2C_ITSlaveCplt+0x270>
 8107c24:	687b      	ldr	r3, [r7, #4]
 8107c26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8107c28:	681b      	ldr	r3, [r3, #0]
 8107c2a:	4a2a      	ldr	r2, [pc, #168]	; (8107cd4 <I2C_ITSlaveCplt+0x290>)
 8107c2c:	4293      	cmp	r3, r2
 8107c2e:	d041      	beq.n	8107cb4 <I2C_ITSlaveCplt+0x270>
 8107c30:	687b      	ldr	r3, [r7, #4]
 8107c32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8107c34:	681b      	ldr	r3, [r3, #0]
 8107c36:	4a28      	ldr	r2, [pc, #160]	; (8107cd8 <I2C_ITSlaveCplt+0x294>)
 8107c38:	4293      	cmp	r3, r2
 8107c3a:	d03b      	beq.n	8107cb4 <I2C_ITSlaveCplt+0x270>
 8107c3c:	687b      	ldr	r3, [r7, #4]
 8107c3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8107c40:	681b      	ldr	r3, [r3, #0]
 8107c42:	4a26      	ldr	r2, [pc, #152]	; (8107cdc <I2C_ITSlaveCplt+0x298>)
 8107c44:	4293      	cmp	r3, r2
 8107c46:	d035      	beq.n	8107cb4 <I2C_ITSlaveCplt+0x270>
 8107c48:	687b      	ldr	r3, [r7, #4]
 8107c4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8107c4c:	681b      	ldr	r3, [r3, #0]
 8107c4e:	4a24      	ldr	r2, [pc, #144]	; (8107ce0 <I2C_ITSlaveCplt+0x29c>)
 8107c50:	4293      	cmp	r3, r2
 8107c52:	d02f      	beq.n	8107cb4 <I2C_ITSlaveCplt+0x270>
 8107c54:	687b      	ldr	r3, [r7, #4]
 8107c56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8107c58:	681b      	ldr	r3, [r3, #0]
 8107c5a:	4a22      	ldr	r2, [pc, #136]	; (8107ce4 <I2C_ITSlaveCplt+0x2a0>)
 8107c5c:	4293      	cmp	r3, r2
 8107c5e:	d029      	beq.n	8107cb4 <I2C_ITSlaveCplt+0x270>
 8107c60:	687b      	ldr	r3, [r7, #4]
 8107c62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8107c64:	681b      	ldr	r3, [r3, #0]
 8107c66:	4a20      	ldr	r2, [pc, #128]	; (8107ce8 <I2C_ITSlaveCplt+0x2a4>)
 8107c68:	4293      	cmp	r3, r2
 8107c6a:	d023      	beq.n	8107cb4 <I2C_ITSlaveCplt+0x270>
 8107c6c:	687b      	ldr	r3, [r7, #4]
 8107c6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8107c70:	681b      	ldr	r3, [r3, #0]
 8107c72:	4a1e      	ldr	r2, [pc, #120]	; (8107cec <I2C_ITSlaveCplt+0x2a8>)
 8107c74:	4293      	cmp	r3, r2
 8107c76:	d01d      	beq.n	8107cb4 <I2C_ITSlaveCplt+0x270>
 8107c78:	687b      	ldr	r3, [r7, #4]
 8107c7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8107c7c:	681b      	ldr	r3, [r3, #0]
 8107c7e:	4a1c      	ldr	r2, [pc, #112]	; (8107cf0 <I2C_ITSlaveCplt+0x2ac>)
 8107c80:	4293      	cmp	r3, r2
 8107c82:	d017      	beq.n	8107cb4 <I2C_ITSlaveCplt+0x270>
 8107c84:	687b      	ldr	r3, [r7, #4]
 8107c86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8107c88:	681b      	ldr	r3, [r3, #0]
 8107c8a:	4a1a      	ldr	r2, [pc, #104]	; (8107cf4 <I2C_ITSlaveCplt+0x2b0>)
 8107c8c:	4293      	cmp	r3, r2
 8107c8e:	d011      	beq.n	8107cb4 <I2C_ITSlaveCplt+0x270>
 8107c90:	687b      	ldr	r3, [r7, #4]
 8107c92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8107c94:	681b      	ldr	r3, [r3, #0]
 8107c96:	4a18      	ldr	r2, [pc, #96]	; (8107cf8 <I2C_ITSlaveCplt+0x2b4>)
 8107c98:	4293      	cmp	r3, r2
 8107c9a:	d00b      	beq.n	8107cb4 <I2C_ITSlaveCplt+0x270>
 8107c9c:	687b      	ldr	r3, [r7, #4]
 8107c9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8107ca0:	681b      	ldr	r3, [r3, #0]
 8107ca2:	4a16      	ldr	r2, [pc, #88]	; (8107cfc <I2C_ITSlaveCplt+0x2b8>)
 8107ca4:	4293      	cmp	r3, r2
 8107ca6:	d005      	beq.n	8107cb4 <I2C_ITSlaveCplt+0x270>
 8107ca8:	687b      	ldr	r3, [r7, #4]
 8107caa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8107cac:	681b      	ldr	r3, [r3, #0]
 8107cae:	4a14      	ldr	r2, [pc, #80]	; (8107d00 <I2C_ITSlaveCplt+0x2bc>)
 8107cb0:	4293      	cmp	r3, r2
 8107cb2:	d127      	bne.n	8107d04 <I2C_ITSlaveCplt+0x2c0>
 8107cb4:	687b      	ldr	r3, [r7, #4]
 8107cb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8107cb8:	681b      	ldr	r3, [r3, #0]
 8107cba:	685b      	ldr	r3, [r3, #4]
 8107cbc:	b29b      	uxth	r3, r3
 8107cbe:	e026      	b.n	8107d0e <I2C_ITSlaveCplt+0x2ca>
 8107cc0:	fe00e800 	.word	0xfe00e800
 8107cc4:	40020010 	.word	0x40020010
 8107cc8:	40020028 	.word	0x40020028
 8107ccc:	40020040 	.word	0x40020040
 8107cd0:	40020058 	.word	0x40020058
 8107cd4:	40020070 	.word	0x40020070
 8107cd8:	40020088 	.word	0x40020088
 8107cdc:	400200a0 	.word	0x400200a0
 8107ce0:	400200b8 	.word	0x400200b8
 8107ce4:	40020410 	.word	0x40020410
 8107ce8:	40020428 	.word	0x40020428
 8107cec:	40020440 	.word	0x40020440
 8107cf0:	40020458 	.word	0x40020458
 8107cf4:	40020470 	.word	0x40020470
 8107cf8:	40020488 	.word	0x40020488
 8107cfc:	400204a0 	.word	0x400204a0
 8107d00:	400204b8 	.word	0x400204b8
 8107d04:	687b      	ldr	r3, [r7, #4]
 8107d06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8107d08:	681b      	ldr	r3, [r3, #0]
 8107d0a:	685b      	ldr	r3, [r3, #4]
 8107d0c:	b29b      	uxth	r3, r3
 8107d0e:	687a      	ldr	r2, [r7, #4]
 8107d10:	8553      	strh	r3, [r2, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8107d12:	697b      	ldr	r3, [r7, #20]
 8107d14:	089b      	lsrs	r3, r3, #2
 8107d16:	f003 0301 	and.w	r3, r3, #1
 8107d1a:	2b00      	cmp	r3, #0
 8107d1c:	d020      	beq.n	8107d60 <I2C_ITSlaveCplt+0x31c>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8107d1e:	697b      	ldr	r3, [r7, #20]
 8107d20:	f023 0304 	bic.w	r3, r3, #4
 8107d24:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8107d26:	687b      	ldr	r3, [r7, #4]
 8107d28:	681b      	ldr	r3, [r3, #0]
 8107d2a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8107d2c:	687b      	ldr	r3, [r7, #4]
 8107d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8107d30:	b2d2      	uxtb	r2, r2
 8107d32:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8107d34:	687b      	ldr	r3, [r7, #4]
 8107d36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8107d38:	1c5a      	adds	r2, r3, #1
 8107d3a:	687b      	ldr	r3, [r7, #4]
 8107d3c:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8107d3e:	687b      	ldr	r3, [r7, #4]
 8107d40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8107d42:	2b00      	cmp	r3, #0
 8107d44:	d00c      	beq.n	8107d60 <I2C_ITSlaveCplt+0x31c>
    {
      hi2c->XferSize--;
 8107d46:	687b      	ldr	r3, [r7, #4]
 8107d48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8107d4a:	3b01      	subs	r3, #1
 8107d4c:	b29a      	uxth	r2, r3
 8107d4e:	687b      	ldr	r3, [r7, #4]
 8107d50:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8107d52:	687b      	ldr	r3, [r7, #4]
 8107d54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8107d56:	b29b      	uxth	r3, r3
 8107d58:	3b01      	subs	r3, #1
 8107d5a:	b29a      	uxth	r2, r3
 8107d5c:	687b      	ldr	r3, [r7, #4]
 8107d5e:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8107d60:	687b      	ldr	r3, [r7, #4]
 8107d62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8107d64:	b29b      	uxth	r3, r3
 8107d66:	2b00      	cmp	r3, #0
 8107d68:	d005      	beq.n	8107d76 <I2C_ITSlaveCplt+0x332>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8107d6a:	687b      	ldr	r3, [r7, #4]
 8107d6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8107d6e:	f043 0204 	orr.w	r2, r3, #4
 8107d72:	687b      	ldr	r3, [r7, #4]
 8107d74:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8107d76:	687b      	ldr	r3, [r7, #4]
 8107d78:	2200      	movs	r2, #0
 8107d7a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8107d7e:	687b      	ldr	r3, [r7, #4]
 8107d80:	2200      	movs	r2, #0
 8107d82:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8107d84:	687b      	ldr	r3, [r7, #4]
 8107d86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8107d88:	2b00      	cmp	r3, #0
 8107d8a:	d010      	beq.n	8107dae <I2C_ITSlaveCplt+0x36a>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8107d8c:	687b      	ldr	r3, [r7, #4]
 8107d8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8107d90:	4619      	mov	r1, r3
 8107d92:	6878      	ldr	r0, [r7, #4]
 8107d94:	f000 f8a4 	bl	8107ee0 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8107d98:	687b      	ldr	r3, [r7, #4]
 8107d9a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8107d9e:	b2db      	uxtb	r3, r3
 8107da0:	2b28      	cmp	r3, #40	; 0x28
 8107da2:	d141      	bne.n	8107e28 <I2C_ITSlaveCplt+0x3e4>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8107da4:	6979      	ldr	r1, [r7, #20]
 8107da6:	6878      	ldr	r0, [r7, #4]
 8107da8:	f000 f844 	bl	8107e34 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8107dac:	e03c      	b.n	8107e28 <I2C_ITSlaveCplt+0x3e4>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8107dae:	687b      	ldr	r3, [r7, #4]
 8107db0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8107db2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8107db6:	d014      	beq.n	8107de2 <I2C_ITSlaveCplt+0x39e>
    I2C_ITSlaveSeqCplt(hi2c);
 8107db8:	6878      	ldr	r0, [r7, #4]
 8107dba:	f7ff fde4 	bl	8107986 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8107dbe:	687b      	ldr	r3, [r7, #4]
 8107dc0:	4a1b      	ldr	r2, [pc, #108]	; (8107e30 <I2C_ITSlaveCplt+0x3ec>)
 8107dc2:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8107dc4:	687b      	ldr	r3, [r7, #4]
 8107dc6:	2220      	movs	r2, #32
 8107dc8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8107dcc:	687b      	ldr	r3, [r7, #4]
 8107dce:	2200      	movs	r2, #0
 8107dd0:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8107dd2:	687b      	ldr	r3, [r7, #4]
 8107dd4:	2200      	movs	r2, #0
 8107dd6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8107dda:	6878      	ldr	r0, [r7, #4]
 8107ddc:	f7ff fc2e 	bl	810763c <HAL_I2C_ListenCpltCallback>
}
 8107de0:	e022      	b.n	8107e28 <I2C_ITSlaveCplt+0x3e4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8107de2:	687b      	ldr	r3, [r7, #4]
 8107de4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8107de8:	b2db      	uxtb	r3, r3
 8107dea:	2b22      	cmp	r3, #34	; 0x22
 8107dec:	d10e      	bne.n	8107e0c <I2C_ITSlaveCplt+0x3c8>
    hi2c->State = HAL_I2C_STATE_READY;
 8107dee:	687b      	ldr	r3, [r7, #4]
 8107df0:	2220      	movs	r2, #32
 8107df2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8107df6:	687b      	ldr	r3, [r7, #4]
 8107df8:	2200      	movs	r2, #0
 8107dfa:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8107dfc:	687b      	ldr	r3, [r7, #4]
 8107dfe:	2200      	movs	r2, #0
 8107e00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8107e04:	6878      	ldr	r0, [r7, #4]
 8107e06:	f7ff fc01 	bl	810760c <HAL_I2C_SlaveRxCpltCallback>
}
 8107e0a:	e00d      	b.n	8107e28 <I2C_ITSlaveCplt+0x3e4>
    hi2c->State = HAL_I2C_STATE_READY;
 8107e0c:	687b      	ldr	r3, [r7, #4]
 8107e0e:	2220      	movs	r2, #32
 8107e10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8107e14:	687b      	ldr	r3, [r7, #4]
 8107e16:	2200      	movs	r2, #0
 8107e18:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8107e1a:	687b      	ldr	r3, [r7, #4]
 8107e1c:	2200      	movs	r2, #0
 8107e1e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8107e22:	6878      	ldr	r0, [r7, #4]
 8107e24:	f7ff fbe8 	bl	81075f8 <HAL_I2C_SlaveTxCpltCallback>
}
 8107e28:	bf00      	nop
 8107e2a:	3718      	adds	r7, #24
 8107e2c:	46bd      	mov	sp, r7
 8107e2e:	bd80      	pop	{r7, pc}
 8107e30:	ffff0000 	.word	0xffff0000

08107e34 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8107e34:	b580      	push	{r7, lr}
 8107e36:	b082      	sub	sp, #8
 8107e38:	af00      	add	r7, sp, #0
 8107e3a:	6078      	str	r0, [r7, #4]
 8107e3c:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8107e3e:	687b      	ldr	r3, [r7, #4]
 8107e40:	4a26      	ldr	r2, [pc, #152]	; (8107edc <I2C_ITListenCplt+0xa8>)
 8107e42:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8107e44:	687b      	ldr	r3, [r7, #4]
 8107e46:	2200      	movs	r2, #0
 8107e48:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8107e4a:	687b      	ldr	r3, [r7, #4]
 8107e4c:	2220      	movs	r2, #32
 8107e4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8107e52:	687b      	ldr	r3, [r7, #4]
 8107e54:	2200      	movs	r2, #0
 8107e56:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8107e5a:	687b      	ldr	r3, [r7, #4]
 8107e5c:	2200      	movs	r2, #0
 8107e5e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8107e60:	683b      	ldr	r3, [r7, #0]
 8107e62:	089b      	lsrs	r3, r3, #2
 8107e64:	f003 0301 	and.w	r3, r3, #1
 8107e68:	2b00      	cmp	r3, #0
 8107e6a:	d022      	beq.n	8107eb2 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8107e6c:	687b      	ldr	r3, [r7, #4]
 8107e6e:	681b      	ldr	r3, [r3, #0]
 8107e70:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8107e72:	687b      	ldr	r3, [r7, #4]
 8107e74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8107e76:	b2d2      	uxtb	r2, r2
 8107e78:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8107e7a:	687b      	ldr	r3, [r7, #4]
 8107e7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8107e7e:	1c5a      	adds	r2, r3, #1
 8107e80:	687b      	ldr	r3, [r7, #4]
 8107e82:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8107e84:	687b      	ldr	r3, [r7, #4]
 8107e86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8107e88:	2b00      	cmp	r3, #0
 8107e8a:	d012      	beq.n	8107eb2 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8107e8c:	687b      	ldr	r3, [r7, #4]
 8107e8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8107e90:	3b01      	subs	r3, #1
 8107e92:	b29a      	uxth	r2, r3
 8107e94:	687b      	ldr	r3, [r7, #4]
 8107e96:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8107e98:	687b      	ldr	r3, [r7, #4]
 8107e9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8107e9c:	b29b      	uxth	r3, r3
 8107e9e:	3b01      	subs	r3, #1
 8107ea0:	b29a      	uxth	r2, r3
 8107ea2:	687b      	ldr	r3, [r7, #4]
 8107ea4:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8107ea6:	687b      	ldr	r3, [r7, #4]
 8107ea8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8107eaa:	f043 0204 	orr.w	r2, r3, #4
 8107eae:	687b      	ldr	r3, [r7, #4]
 8107eb0:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8107eb2:	f248 0103 	movw	r1, #32771	; 0x8003
 8107eb6:	6878      	ldr	r0, [r7, #4]
 8107eb8:	f000 f94b 	bl	8108152 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8107ebc:	687b      	ldr	r3, [r7, #4]
 8107ebe:	681b      	ldr	r3, [r3, #0]
 8107ec0:	2210      	movs	r2, #16
 8107ec2:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8107ec4:	687b      	ldr	r3, [r7, #4]
 8107ec6:	2200      	movs	r2, #0
 8107ec8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8107ecc:	6878      	ldr	r0, [r7, #4]
 8107ece:	f7ff fbb5 	bl	810763c <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8107ed2:	bf00      	nop
 8107ed4:	3708      	adds	r7, #8
 8107ed6:	46bd      	mov	sp, r7
 8107ed8:	bd80      	pop	{r7, pc}
 8107eda:	bf00      	nop
 8107edc:	ffff0000 	.word	0xffff0000

08107ee0 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8107ee0:	b580      	push	{r7, lr}
 8107ee2:	b084      	sub	sp, #16
 8107ee4:	af00      	add	r7, sp, #0
 8107ee6:	6078      	str	r0, [r7, #4]
 8107ee8:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8107eea:	687b      	ldr	r3, [r7, #4]
 8107eec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8107ef0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8107ef2:	687b      	ldr	r3, [r7, #4]
 8107ef4:	2200      	movs	r2, #0
 8107ef6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8107efa:	687b      	ldr	r3, [r7, #4]
 8107efc:	4a5d      	ldr	r2, [pc, #372]	; (8108074 <I2C_ITError+0x194>)
 8107efe:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8107f00:	687b      	ldr	r3, [r7, #4]
 8107f02:	2200      	movs	r2, #0
 8107f04:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8107f06:	687b      	ldr	r3, [r7, #4]
 8107f08:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8107f0a:	683b      	ldr	r3, [r7, #0]
 8107f0c:	431a      	orrs	r2, r3
 8107f0e:	687b      	ldr	r3, [r7, #4]
 8107f10:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8107f12:	7bfb      	ldrb	r3, [r7, #15]
 8107f14:	2b28      	cmp	r3, #40	; 0x28
 8107f16:	d005      	beq.n	8107f24 <I2C_ITError+0x44>
 8107f18:	7bfb      	ldrb	r3, [r7, #15]
 8107f1a:	2b29      	cmp	r3, #41	; 0x29
 8107f1c:	d002      	beq.n	8107f24 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8107f1e:	7bfb      	ldrb	r3, [r7, #15]
 8107f20:	2b2a      	cmp	r3, #42	; 0x2a
 8107f22:	d10b      	bne.n	8107f3c <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8107f24:	2103      	movs	r1, #3
 8107f26:	6878      	ldr	r0, [r7, #4]
 8107f28:	f000 f913 	bl	8108152 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8107f2c:	687b      	ldr	r3, [r7, #4]
 8107f2e:	2228      	movs	r2, #40	; 0x28
 8107f30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8107f34:	687b      	ldr	r3, [r7, #4]
 8107f36:	4a50      	ldr	r2, [pc, #320]	; (8108078 <I2C_ITError+0x198>)
 8107f38:	635a      	str	r2, [r3, #52]	; 0x34
 8107f3a:	e011      	b.n	8107f60 <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8107f3c:	f248 0103 	movw	r1, #32771	; 0x8003
 8107f40:	6878      	ldr	r0, [r7, #4]
 8107f42:	f000 f906 	bl	8108152 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8107f46:	687b      	ldr	r3, [r7, #4]
 8107f48:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8107f4c:	b2db      	uxtb	r3, r3
 8107f4e:	2b60      	cmp	r3, #96	; 0x60
 8107f50:	d003      	beq.n	8107f5a <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8107f52:	687b      	ldr	r3, [r7, #4]
 8107f54:	2220      	movs	r2, #32
 8107f56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 8107f5a:	687b      	ldr	r3, [r7, #4]
 8107f5c:	2200      	movs	r2, #0
 8107f5e:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8107f60:	687b      	ldr	r3, [r7, #4]
 8107f62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8107f64:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8107f66:	687b      	ldr	r3, [r7, #4]
 8107f68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8107f6a:	2b00      	cmp	r3, #0
 8107f6c:	d039      	beq.n	8107fe2 <I2C_ITError+0x102>
 8107f6e:	68bb      	ldr	r3, [r7, #8]
 8107f70:	2b11      	cmp	r3, #17
 8107f72:	d002      	beq.n	8107f7a <I2C_ITError+0x9a>
 8107f74:	68bb      	ldr	r3, [r7, #8]
 8107f76:	2b21      	cmp	r3, #33	; 0x21
 8107f78:	d133      	bne.n	8107fe2 <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8107f7a:	687b      	ldr	r3, [r7, #4]
 8107f7c:	681b      	ldr	r3, [r3, #0]
 8107f7e:	681b      	ldr	r3, [r3, #0]
 8107f80:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8107f84:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8107f88:	d107      	bne.n	8107f9a <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8107f8a:	687b      	ldr	r3, [r7, #4]
 8107f8c:	681b      	ldr	r3, [r3, #0]
 8107f8e:	681a      	ldr	r2, [r3, #0]
 8107f90:	687b      	ldr	r3, [r7, #4]
 8107f92:	681b      	ldr	r3, [r3, #0]
 8107f94:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8107f98:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8107f9a:	687b      	ldr	r3, [r7, #4]
 8107f9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8107f9e:	4618      	mov	r0, r3
 8107fa0:	f7fe fc06 	bl	81067b0 <HAL_DMA_GetState>
 8107fa4:	4603      	mov	r3, r0
 8107fa6:	2b01      	cmp	r3, #1
 8107fa8:	d017      	beq.n	8107fda <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8107faa:	687b      	ldr	r3, [r7, #4]
 8107fac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8107fae:	4a33      	ldr	r2, [pc, #204]	; (810807c <I2C_ITError+0x19c>)
 8107fb0:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8107fb2:	687b      	ldr	r3, [r7, #4]
 8107fb4:	2200      	movs	r2, #0
 8107fb6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8107fba:	687b      	ldr	r3, [r7, #4]
 8107fbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8107fbe:	4618      	mov	r0, r3
 8107fc0:	f7fd fa88 	bl	81054d4 <HAL_DMA_Abort_IT>
 8107fc4:	4603      	mov	r3, r0
 8107fc6:	2b00      	cmp	r3, #0
 8107fc8:	d04d      	beq.n	8108066 <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8107fca:	687b      	ldr	r3, [r7, #4]
 8107fcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8107fce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8107fd0:	687a      	ldr	r2, [r7, #4]
 8107fd2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8107fd4:	4610      	mov	r0, r2
 8107fd6:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8107fd8:	e045      	b.n	8108066 <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8107fda:	6878      	ldr	r0, [r7, #4]
 8107fdc:	f000 f850 	bl	8108080 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8107fe0:	e041      	b.n	8108066 <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8107fe2:	687b      	ldr	r3, [r7, #4]
 8107fe4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8107fe6:	2b00      	cmp	r3, #0
 8107fe8:	d039      	beq.n	810805e <I2C_ITError+0x17e>
 8107fea:	68bb      	ldr	r3, [r7, #8]
 8107fec:	2b12      	cmp	r3, #18
 8107fee:	d002      	beq.n	8107ff6 <I2C_ITError+0x116>
 8107ff0:	68bb      	ldr	r3, [r7, #8]
 8107ff2:	2b22      	cmp	r3, #34	; 0x22
 8107ff4:	d133      	bne.n	810805e <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8107ff6:	687b      	ldr	r3, [r7, #4]
 8107ff8:	681b      	ldr	r3, [r3, #0]
 8107ffa:	681b      	ldr	r3, [r3, #0]
 8107ffc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8108000:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8108004:	d107      	bne.n	8108016 <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8108006:	687b      	ldr	r3, [r7, #4]
 8108008:	681b      	ldr	r3, [r3, #0]
 810800a:	681a      	ldr	r2, [r3, #0]
 810800c:	687b      	ldr	r3, [r7, #4]
 810800e:	681b      	ldr	r3, [r3, #0]
 8108010:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8108014:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8108016:	687b      	ldr	r3, [r7, #4]
 8108018:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810801a:	4618      	mov	r0, r3
 810801c:	f7fe fbc8 	bl	81067b0 <HAL_DMA_GetState>
 8108020:	4603      	mov	r3, r0
 8108022:	2b01      	cmp	r3, #1
 8108024:	d017      	beq.n	8108056 <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8108026:	687b      	ldr	r3, [r7, #4]
 8108028:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810802a:	4a14      	ldr	r2, [pc, #80]	; (810807c <I2C_ITError+0x19c>)
 810802c:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 810802e:	687b      	ldr	r3, [r7, #4]
 8108030:	2200      	movs	r2, #0
 8108032:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8108036:	687b      	ldr	r3, [r7, #4]
 8108038:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810803a:	4618      	mov	r0, r3
 810803c:	f7fd fa4a 	bl	81054d4 <HAL_DMA_Abort_IT>
 8108040:	4603      	mov	r3, r0
 8108042:	2b00      	cmp	r3, #0
 8108044:	d011      	beq.n	810806a <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8108046:	687b      	ldr	r3, [r7, #4]
 8108048:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810804a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810804c:	687a      	ldr	r2, [r7, #4]
 810804e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8108050:	4610      	mov	r0, r2
 8108052:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8108054:	e009      	b.n	810806a <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8108056:	6878      	ldr	r0, [r7, #4]
 8108058:	f000 f812 	bl	8108080 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 810805c:	e005      	b.n	810806a <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 810805e:	6878      	ldr	r0, [r7, #4]
 8108060:	f000 f80e 	bl	8108080 <I2C_TreatErrorCallback>
  }
}
 8108064:	e002      	b.n	810806c <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8108066:	bf00      	nop
 8108068:	e000      	b.n	810806c <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 810806a:	bf00      	nop
}
 810806c:	bf00      	nop
 810806e:	3710      	adds	r7, #16
 8108070:	46bd      	mov	sp, r7
 8108072:	bd80      	pop	{r7, pc}
 8108074:	ffff0000 	.word	0xffff0000
 8108078:	08107679 	.word	0x08107679
 810807c:	08108117 	.word	0x08108117

08108080 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8108080:	b580      	push	{r7, lr}
 8108082:	b082      	sub	sp, #8
 8108084:	af00      	add	r7, sp, #0
 8108086:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8108088:	687b      	ldr	r3, [r7, #4]
 810808a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 810808e:	b2db      	uxtb	r3, r3
 8108090:	2b60      	cmp	r3, #96	; 0x60
 8108092:	d10e      	bne.n	81080b2 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8108094:	687b      	ldr	r3, [r7, #4]
 8108096:	2220      	movs	r2, #32
 8108098:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 810809c:	687b      	ldr	r3, [r7, #4]
 810809e:	2200      	movs	r2, #0
 81080a0:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 81080a2:	687b      	ldr	r3, [r7, #4]
 81080a4:	2200      	movs	r2, #0
 81080a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 81080aa:	6878      	ldr	r0, [r7, #4]
 81080ac:	f7ff fada 	bl	8107664 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 81080b0:	e009      	b.n	81080c6 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 81080b2:	687b      	ldr	r3, [r7, #4]
 81080b4:	2200      	movs	r2, #0
 81080b6:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 81080b8:	687b      	ldr	r3, [r7, #4]
 81080ba:	2200      	movs	r2, #0
 81080bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 81080c0:	6878      	ldr	r0, [r7, #4]
 81080c2:	f7ff fac5 	bl	8107650 <HAL_I2C_ErrorCallback>
}
 81080c6:	bf00      	nop
 81080c8:	3708      	adds	r7, #8
 81080ca:	46bd      	mov	sp, r7
 81080cc:	bd80      	pop	{r7, pc}

081080ce <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 81080ce:	b480      	push	{r7}
 81080d0:	b083      	sub	sp, #12
 81080d2:	af00      	add	r7, sp, #0
 81080d4:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 81080d6:	687b      	ldr	r3, [r7, #4]
 81080d8:	681b      	ldr	r3, [r3, #0]
 81080da:	699b      	ldr	r3, [r3, #24]
 81080dc:	f003 0302 	and.w	r3, r3, #2
 81080e0:	2b02      	cmp	r3, #2
 81080e2:	d103      	bne.n	81080ec <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 81080e4:	687b      	ldr	r3, [r7, #4]
 81080e6:	681b      	ldr	r3, [r3, #0]
 81080e8:	2200      	movs	r2, #0
 81080ea:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 81080ec:	687b      	ldr	r3, [r7, #4]
 81080ee:	681b      	ldr	r3, [r3, #0]
 81080f0:	699b      	ldr	r3, [r3, #24]
 81080f2:	f003 0301 	and.w	r3, r3, #1
 81080f6:	2b01      	cmp	r3, #1
 81080f8:	d007      	beq.n	810810a <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 81080fa:	687b      	ldr	r3, [r7, #4]
 81080fc:	681b      	ldr	r3, [r3, #0]
 81080fe:	699a      	ldr	r2, [r3, #24]
 8108100:	687b      	ldr	r3, [r7, #4]
 8108102:	681b      	ldr	r3, [r3, #0]
 8108104:	f042 0201 	orr.w	r2, r2, #1
 8108108:	619a      	str	r2, [r3, #24]
  }
}
 810810a:	bf00      	nop
 810810c:	370c      	adds	r7, #12
 810810e:	46bd      	mov	sp, r7
 8108110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108114:	4770      	bx	lr

08108116 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8108116:	b580      	push	{r7, lr}
 8108118:	b084      	sub	sp, #16
 810811a:	af00      	add	r7, sp, #0
 810811c:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 810811e:	687b      	ldr	r3, [r7, #4]
 8108120:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8108122:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8108124:	68fb      	ldr	r3, [r7, #12]
 8108126:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8108128:	2b00      	cmp	r3, #0
 810812a:	d003      	beq.n	8108134 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 810812c:	68fb      	ldr	r3, [r7, #12]
 810812e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8108130:	2200      	movs	r2, #0
 8108132:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8108134:	68fb      	ldr	r3, [r7, #12]
 8108136:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8108138:	2b00      	cmp	r3, #0
 810813a:	d003      	beq.n	8108144 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 810813c:	68fb      	ldr	r3, [r7, #12]
 810813e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8108140:	2200      	movs	r2, #0
 8108142:	651a      	str	r2, [r3, #80]	; 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 8108144:	68f8      	ldr	r0, [r7, #12]
 8108146:	f7ff ff9b 	bl	8108080 <I2C_TreatErrorCallback>
}
 810814a:	bf00      	nop
 810814c:	3710      	adds	r7, #16
 810814e:	46bd      	mov	sp, r7
 8108150:	bd80      	pop	{r7, pc}

08108152 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8108152:	b480      	push	{r7}
 8108154:	b085      	sub	sp, #20
 8108156:	af00      	add	r7, sp, #0
 8108158:	6078      	str	r0, [r7, #4]
 810815a:	460b      	mov	r3, r1
 810815c:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 810815e:	2300      	movs	r3, #0
 8108160:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8108162:	887b      	ldrh	r3, [r7, #2]
 8108164:	f003 0301 	and.w	r3, r3, #1
 8108168:	2b00      	cmp	r3, #0
 810816a:	d00f      	beq.n	810818c <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 810816c:	68fb      	ldr	r3, [r7, #12]
 810816e:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8108172:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8108174:	687b      	ldr	r3, [r7, #4]
 8108176:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 810817a:	b2db      	uxtb	r3, r3
 810817c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8108180:	2b28      	cmp	r3, #40	; 0x28
 8108182:	d003      	beq.n	810818c <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8108184:	68fb      	ldr	r3, [r7, #12]
 8108186:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 810818a:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 810818c:	887b      	ldrh	r3, [r7, #2]
 810818e:	f003 0302 	and.w	r3, r3, #2
 8108192:	2b00      	cmp	r3, #0
 8108194:	d00f      	beq.n	81081b6 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8108196:	68fb      	ldr	r3, [r7, #12]
 8108198:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 810819c:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 810819e:	687b      	ldr	r3, [r7, #4]
 81081a0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 81081a4:	b2db      	uxtb	r3, r3
 81081a6:	f003 0328 	and.w	r3, r3, #40	; 0x28
 81081aa:	2b28      	cmp	r3, #40	; 0x28
 81081ac:	d003      	beq.n	81081b6 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 81081ae:	68fb      	ldr	r3, [r7, #12]
 81081b0:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 81081b4:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 81081b6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 81081ba:	2b00      	cmp	r3, #0
 81081bc:	da03      	bge.n	81081c6 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 81081be:	68fb      	ldr	r3, [r7, #12]
 81081c0:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 81081c4:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 81081c6:	887b      	ldrh	r3, [r7, #2]
 81081c8:	2b10      	cmp	r3, #16
 81081ca:	d103      	bne.n	81081d4 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 81081cc:	68fb      	ldr	r3, [r7, #12]
 81081ce:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 81081d2:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 81081d4:	887b      	ldrh	r3, [r7, #2]
 81081d6:	2b20      	cmp	r3, #32
 81081d8:	d103      	bne.n	81081e2 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 81081da:	68fb      	ldr	r3, [r7, #12]
 81081dc:	f043 0320 	orr.w	r3, r3, #32
 81081e0:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 81081e2:	887b      	ldrh	r3, [r7, #2]
 81081e4:	2b40      	cmp	r3, #64	; 0x40
 81081e6:	d103      	bne.n	81081f0 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 81081e8:	68fb      	ldr	r3, [r7, #12]
 81081ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 81081ee:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 81081f0:	687b      	ldr	r3, [r7, #4]
 81081f2:	681b      	ldr	r3, [r3, #0]
 81081f4:	6819      	ldr	r1, [r3, #0]
 81081f6:	68fb      	ldr	r3, [r7, #12]
 81081f8:	43da      	mvns	r2, r3
 81081fa:	687b      	ldr	r3, [r7, #4]
 81081fc:	681b      	ldr	r3, [r3, #0]
 81081fe:	400a      	ands	r2, r1
 8108200:	601a      	str	r2, [r3, #0]
}
 8108202:	bf00      	nop
 8108204:	3714      	adds	r7, #20
 8108206:	46bd      	mov	sp, r7
 8108208:	f85d 7b04 	ldr.w	r7, [sp], #4
 810820c:	4770      	bx	lr

0810820e <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 810820e:	b480      	push	{r7}
 8108210:	b083      	sub	sp, #12
 8108212:	af00      	add	r7, sp, #0
 8108214:	6078      	str	r0, [r7, #4]
 8108216:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8108218:	687b      	ldr	r3, [r7, #4]
 810821a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 810821e:	b2db      	uxtb	r3, r3
 8108220:	2b20      	cmp	r3, #32
 8108222:	d138      	bne.n	8108296 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8108224:	687b      	ldr	r3, [r7, #4]
 8108226:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 810822a:	2b01      	cmp	r3, #1
 810822c:	d101      	bne.n	8108232 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 810822e:	2302      	movs	r3, #2
 8108230:	e032      	b.n	8108298 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8108232:	687b      	ldr	r3, [r7, #4]
 8108234:	2201      	movs	r2, #1
 8108236:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 810823a:	687b      	ldr	r3, [r7, #4]
 810823c:	2224      	movs	r2, #36	; 0x24
 810823e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8108242:	687b      	ldr	r3, [r7, #4]
 8108244:	681b      	ldr	r3, [r3, #0]
 8108246:	681a      	ldr	r2, [r3, #0]
 8108248:	687b      	ldr	r3, [r7, #4]
 810824a:	681b      	ldr	r3, [r3, #0]
 810824c:	f022 0201 	bic.w	r2, r2, #1
 8108250:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8108252:	687b      	ldr	r3, [r7, #4]
 8108254:	681b      	ldr	r3, [r3, #0]
 8108256:	681a      	ldr	r2, [r3, #0]
 8108258:	687b      	ldr	r3, [r7, #4]
 810825a:	681b      	ldr	r3, [r3, #0]
 810825c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8108260:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8108262:	687b      	ldr	r3, [r7, #4]
 8108264:	681b      	ldr	r3, [r3, #0]
 8108266:	6819      	ldr	r1, [r3, #0]
 8108268:	687b      	ldr	r3, [r7, #4]
 810826a:	681b      	ldr	r3, [r3, #0]
 810826c:	683a      	ldr	r2, [r7, #0]
 810826e:	430a      	orrs	r2, r1
 8108270:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8108272:	687b      	ldr	r3, [r7, #4]
 8108274:	681b      	ldr	r3, [r3, #0]
 8108276:	681a      	ldr	r2, [r3, #0]
 8108278:	687b      	ldr	r3, [r7, #4]
 810827a:	681b      	ldr	r3, [r3, #0]
 810827c:	f042 0201 	orr.w	r2, r2, #1
 8108280:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8108282:	687b      	ldr	r3, [r7, #4]
 8108284:	2220      	movs	r2, #32
 8108286:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 810828a:	687b      	ldr	r3, [r7, #4]
 810828c:	2200      	movs	r2, #0
 810828e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8108292:	2300      	movs	r3, #0
 8108294:	e000      	b.n	8108298 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8108296:	2302      	movs	r3, #2
  }
}
 8108298:	4618      	mov	r0, r3
 810829a:	370c      	adds	r7, #12
 810829c:	46bd      	mov	sp, r7
 810829e:	f85d 7b04 	ldr.w	r7, [sp], #4
 81082a2:	4770      	bx	lr

081082a4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 81082a4:	b480      	push	{r7}
 81082a6:	b085      	sub	sp, #20
 81082a8:	af00      	add	r7, sp, #0
 81082aa:	6078      	str	r0, [r7, #4]
 81082ac:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 81082ae:	687b      	ldr	r3, [r7, #4]
 81082b0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 81082b4:	b2db      	uxtb	r3, r3
 81082b6:	2b20      	cmp	r3, #32
 81082b8:	d139      	bne.n	810832e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 81082ba:	687b      	ldr	r3, [r7, #4]
 81082bc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 81082c0:	2b01      	cmp	r3, #1
 81082c2:	d101      	bne.n	81082c8 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 81082c4:	2302      	movs	r3, #2
 81082c6:	e033      	b.n	8108330 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 81082c8:	687b      	ldr	r3, [r7, #4]
 81082ca:	2201      	movs	r2, #1
 81082cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 81082d0:	687b      	ldr	r3, [r7, #4]
 81082d2:	2224      	movs	r2, #36	; 0x24
 81082d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 81082d8:	687b      	ldr	r3, [r7, #4]
 81082da:	681b      	ldr	r3, [r3, #0]
 81082dc:	681a      	ldr	r2, [r3, #0]
 81082de:	687b      	ldr	r3, [r7, #4]
 81082e0:	681b      	ldr	r3, [r3, #0]
 81082e2:	f022 0201 	bic.w	r2, r2, #1
 81082e6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 81082e8:	687b      	ldr	r3, [r7, #4]
 81082ea:	681b      	ldr	r3, [r3, #0]
 81082ec:	681b      	ldr	r3, [r3, #0]
 81082ee:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 81082f0:	68fb      	ldr	r3, [r7, #12]
 81082f2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 81082f6:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 81082f8:	683b      	ldr	r3, [r7, #0]
 81082fa:	021b      	lsls	r3, r3, #8
 81082fc:	68fa      	ldr	r2, [r7, #12]
 81082fe:	4313      	orrs	r3, r2
 8108300:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8108302:	687b      	ldr	r3, [r7, #4]
 8108304:	681b      	ldr	r3, [r3, #0]
 8108306:	68fa      	ldr	r2, [r7, #12]
 8108308:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 810830a:	687b      	ldr	r3, [r7, #4]
 810830c:	681b      	ldr	r3, [r3, #0]
 810830e:	681a      	ldr	r2, [r3, #0]
 8108310:	687b      	ldr	r3, [r7, #4]
 8108312:	681b      	ldr	r3, [r3, #0]
 8108314:	f042 0201 	orr.w	r2, r2, #1
 8108318:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 810831a:	687b      	ldr	r3, [r7, #4]
 810831c:	2220      	movs	r2, #32
 810831e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8108322:	687b      	ldr	r3, [r7, #4]
 8108324:	2200      	movs	r2, #0
 8108326:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 810832a:	2300      	movs	r3, #0
 810832c:	e000      	b.n	8108330 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 810832e:	2302      	movs	r3, #2
  }
}
 8108330:	4618      	mov	r0, r3
 8108332:	3714      	adds	r7, #20
 8108334:	46bd      	mov	sp, r7
 8108336:	f85d 7b04 	ldr.w	r7, [sp], #4
 810833a:	4770      	bx	lr

0810833c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 810833c:	b5f0      	push	{r4, r5, r6, r7, lr}
 810833e:	b08f      	sub	sp, #60	; 0x3c
 8108340:	af0a      	add	r7, sp, #40	; 0x28
 8108342:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8108344:	687b      	ldr	r3, [r7, #4]
 8108346:	2b00      	cmp	r3, #0
 8108348:	d101      	bne.n	810834e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 810834a:	2301      	movs	r3, #1
 810834c:	e116      	b.n	810857c <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 810834e:	687b      	ldr	r3, [r7, #4]
 8108350:	681b      	ldr	r3, [r3, #0]
 8108352:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8108354:	687b      	ldr	r3, [r7, #4]
 8108356:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 810835a:	b2db      	uxtb	r3, r3
 810835c:	2b00      	cmp	r3, #0
 810835e:	d106      	bne.n	810836e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8108360:	687b      	ldr	r3, [r7, #4]
 8108362:	2200      	movs	r2, #0
 8108364:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8108368:	6878      	ldr	r0, [r7, #4]
 810836a:	f00f ffeb 	bl	8118344 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 810836e:	687b      	ldr	r3, [r7, #4]
 8108370:	2203      	movs	r2, #3
 8108372:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8108376:	68bb      	ldr	r3, [r7, #8]
 8108378:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810837a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 810837e:	2b00      	cmp	r3, #0
 8108380:	d102      	bne.n	8108388 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8108382:	687b      	ldr	r3, [r7, #4]
 8108384:	2200      	movs	r2, #0
 8108386:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8108388:	687b      	ldr	r3, [r7, #4]
 810838a:	681b      	ldr	r3, [r3, #0]
 810838c:	4618      	mov	r0, r3
 810838e:	f009 fcec 	bl	8111d6a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8108392:	687b      	ldr	r3, [r7, #4]
 8108394:	681b      	ldr	r3, [r3, #0]
 8108396:	603b      	str	r3, [r7, #0]
 8108398:	687e      	ldr	r6, [r7, #4]
 810839a:	466d      	mov	r5, sp
 810839c:	f106 0410 	add.w	r4, r6, #16
 81083a0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 81083a2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 81083a4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 81083a6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 81083a8:	e894 0003 	ldmia.w	r4, {r0, r1}
 81083ac:	e885 0003 	stmia.w	r5, {r0, r1}
 81083b0:	1d33      	adds	r3, r6, #4
 81083b2:	cb0e      	ldmia	r3, {r1, r2, r3}
 81083b4:	6838      	ldr	r0, [r7, #0]
 81083b6:	f009 fbb7 	bl	8111b28 <USB_CoreInit>
 81083ba:	4603      	mov	r3, r0
 81083bc:	2b00      	cmp	r3, #0
 81083be:	d005      	beq.n	81083cc <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 81083c0:	687b      	ldr	r3, [r7, #4]
 81083c2:	2202      	movs	r2, #2
 81083c4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 81083c8:	2301      	movs	r3, #1
 81083ca:	e0d7      	b.n	810857c <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 81083cc:	687b      	ldr	r3, [r7, #4]
 81083ce:	681b      	ldr	r3, [r3, #0]
 81083d0:	2100      	movs	r1, #0
 81083d2:	4618      	mov	r0, r3
 81083d4:	f009 fcda 	bl	8111d8c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 81083d8:	2300      	movs	r3, #0
 81083da:	73fb      	strb	r3, [r7, #15]
 81083dc:	e04a      	b.n	8108474 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 81083de:	7bfa      	ldrb	r2, [r7, #15]
 81083e0:	6879      	ldr	r1, [r7, #4]
 81083e2:	4613      	mov	r3, r2
 81083e4:	00db      	lsls	r3, r3, #3
 81083e6:	1a9b      	subs	r3, r3, r2
 81083e8:	009b      	lsls	r3, r3, #2
 81083ea:	440b      	add	r3, r1
 81083ec:	333d      	adds	r3, #61	; 0x3d
 81083ee:	2201      	movs	r2, #1
 81083f0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 81083f2:	7bfa      	ldrb	r2, [r7, #15]
 81083f4:	6879      	ldr	r1, [r7, #4]
 81083f6:	4613      	mov	r3, r2
 81083f8:	00db      	lsls	r3, r3, #3
 81083fa:	1a9b      	subs	r3, r3, r2
 81083fc:	009b      	lsls	r3, r3, #2
 81083fe:	440b      	add	r3, r1
 8108400:	333c      	adds	r3, #60	; 0x3c
 8108402:	7bfa      	ldrb	r2, [r7, #15]
 8108404:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8108406:	7bfa      	ldrb	r2, [r7, #15]
 8108408:	7bfb      	ldrb	r3, [r7, #15]
 810840a:	b298      	uxth	r0, r3
 810840c:	6879      	ldr	r1, [r7, #4]
 810840e:	4613      	mov	r3, r2
 8108410:	00db      	lsls	r3, r3, #3
 8108412:	1a9b      	subs	r3, r3, r2
 8108414:	009b      	lsls	r3, r3, #2
 8108416:	440b      	add	r3, r1
 8108418:	3342      	adds	r3, #66	; 0x42
 810841a:	4602      	mov	r2, r0
 810841c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 810841e:	7bfa      	ldrb	r2, [r7, #15]
 8108420:	6879      	ldr	r1, [r7, #4]
 8108422:	4613      	mov	r3, r2
 8108424:	00db      	lsls	r3, r3, #3
 8108426:	1a9b      	subs	r3, r3, r2
 8108428:	009b      	lsls	r3, r3, #2
 810842a:	440b      	add	r3, r1
 810842c:	333f      	adds	r3, #63	; 0x3f
 810842e:	2200      	movs	r2, #0
 8108430:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8108432:	7bfa      	ldrb	r2, [r7, #15]
 8108434:	6879      	ldr	r1, [r7, #4]
 8108436:	4613      	mov	r3, r2
 8108438:	00db      	lsls	r3, r3, #3
 810843a:	1a9b      	subs	r3, r3, r2
 810843c:	009b      	lsls	r3, r3, #2
 810843e:	440b      	add	r3, r1
 8108440:	3344      	adds	r3, #68	; 0x44
 8108442:	2200      	movs	r2, #0
 8108444:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8108446:	7bfa      	ldrb	r2, [r7, #15]
 8108448:	6879      	ldr	r1, [r7, #4]
 810844a:	4613      	mov	r3, r2
 810844c:	00db      	lsls	r3, r3, #3
 810844e:	1a9b      	subs	r3, r3, r2
 8108450:	009b      	lsls	r3, r3, #2
 8108452:	440b      	add	r3, r1
 8108454:	3348      	adds	r3, #72	; 0x48
 8108456:	2200      	movs	r2, #0
 8108458:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 810845a:	7bfa      	ldrb	r2, [r7, #15]
 810845c:	6879      	ldr	r1, [r7, #4]
 810845e:	4613      	mov	r3, r2
 8108460:	00db      	lsls	r3, r3, #3
 8108462:	1a9b      	subs	r3, r3, r2
 8108464:	009b      	lsls	r3, r3, #2
 8108466:	440b      	add	r3, r1
 8108468:	3350      	adds	r3, #80	; 0x50
 810846a:	2200      	movs	r2, #0
 810846c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 810846e:	7bfb      	ldrb	r3, [r7, #15]
 8108470:	3301      	adds	r3, #1
 8108472:	73fb      	strb	r3, [r7, #15]
 8108474:	7bfa      	ldrb	r2, [r7, #15]
 8108476:	687b      	ldr	r3, [r7, #4]
 8108478:	685b      	ldr	r3, [r3, #4]
 810847a:	429a      	cmp	r2, r3
 810847c:	d3af      	bcc.n	81083de <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 810847e:	2300      	movs	r3, #0
 8108480:	73fb      	strb	r3, [r7, #15]
 8108482:	e044      	b.n	810850e <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8108484:	7bfa      	ldrb	r2, [r7, #15]
 8108486:	6879      	ldr	r1, [r7, #4]
 8108488:	4613      	mov	r3, r2
 810848a:	00db      	lsls	r3, r3, #3
 810848c:	1a9b      	subs	r3, r3, r2
 810848e:	009b      	lsls	r3, r3, #2
 8108490:	440b      	add	r3, r1
 8108492:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8108496:	2200      	movs	r2, #0
 8108498:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 810849a:	7bfa      	ldrb	r2, [r7, #15]
 810849c:	6879      	ldr	r1, [r7, #4]
 810849e:	4613      	mov	r3, r2
 81084a0:	00db      	lsls	r3, r3, #3
 81084a2:	1a9b      	subs	r3, r3, r2
 81084a4:	009b      	lsls	r3, r3, #2
 81084a6:	440b      	add	r3, r1
 81084a8:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 81084ac:	7bfa      	ldrb	r2, [r7, #15]
 81084ae:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 81084b0:	7bfa      	ldrb	r2, [r7, #15]
 81084b2:	6879      	ldr	r1, [r7, #4]
 81084b4:	4613      	mov	r3, r2
 81084b6:	00db      	lsls	r3, r3, #3
 81084b8:	1a9b      	subs	r3, r3, r2
 81084ba:	009b      	lsls	r3, r3, #2
 81084bc:	440b      	add	r3, r1
 81084be:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 81084c2:	2200      	movs	r2, #0
 81084c4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 81084c6:	7bfa      	ldrb	r2, [r7, #15]
 81084c8:	6879      	ldr	r1, [r7, #4]
 81084ca:	4613      	mov	r3, r2
 81084cc:	00db      	lsls	r3, r3, #3
 81084ce:	1a9b      	subs	r3, r3, r2
 81084d0:	009b      	lsls	r3, r3, #2
 81084d2:	440b      	add	r3, r1
 81084d4:	f503 7301 	add.w	r3, r3, #516	; 0x204
 81084d8:	2200      	movs	r2, #0
 81084da:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 81084dc:	7bfa      	ldrb	r2, [r7, #15]
 81084de:	6879      	ldr	r1, [r7, #4]
 81084e0:	4613      	mov	r3, r2
 81084e2:	00db      	lsls	r3, r3, #3
 81084e4:	1a9b      	subs	r3, r3, r2
 81084e6:	009b      	lsls	r3, r3, #2
 81084e8:	440b      	add	r3, r1
 81084ea:	f503 7302 	add.w	r3, r3, #520	; 0x208
 81084ee:	2200      	movs	r2, #0
 81084f0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 81084f2:	7bfa      	ldrb	r2, [r7, #15]
 81084f4:	6879      	ldr	r1, [r7, #4]
 81084f6:	4613      	mov	r3, r2
 81084f8:	00db      	lsls	r3, r3, #3
 81084fa:	1a9b      	subs	r3, r3, r2
 81084fc:	009b      	lsls	r3, r3, #2
 81084fe:	440b      	add	r3, r1
 8108500:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8108504:	2200      	movs	r2, #0
 8108506:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8108508:	7bfb      	ldrb	r3, [r7, #15]
 810850a:	3301      	adds	r3, #1
 810850c:	73fb      	strb	r3, [r7, #15]
 810850e:	7bfa      	ldrb	r2, [r7, #15]
 8108510:	687b      	ldr	r3, [r7, #4]
 8108512:	685b      	ldr	r3, [r3, #4]
 8108514:	429a      	cmp	r2, r3
 8108516:	d3b5      	bcc.n	8108484 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8108518:	687b      	ldr	r3, [r7, #4]
 810851a:	681b      	ldr	r3, [r3, #0]
 810851c:	603b      	str	r3, [r7, #0]
 810851e:	687e      	ldr	r6, [r7, #4]
 8108520:	466d      	mov	r5, sp
 8108522:	f106 0410 	add.w	r4, r6, #16
 8108526:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8108528:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 810852a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 810852c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 810852e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8108532:	e885 0003 	stmia.w	r5, {r0, r1}
 8108536:	1d33      	adds	r3, r6, #4
 8108538:	cb0e      	ldmia	r3, {r1, r2, r3}
 810853a:	6838      	ldr	r0, [r7, #0]
 810853c:	f009 fc50 	bl	8111de0 <USB_DevInit>
 8108540:	4603      	mov	r3, r0
 8108542:	2b00      	cmp	r3, #0
 8108544:	d005      	beq.n	8108552 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8108546:	687b      	ldr	r3, [r7, #4]
 8108548:	2202      	movs	r2, #2
 810854a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 810854e:	2301      	movs	r3, #1
 8108550:	e014      	b.n	810857c <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8108552:	687b      	ldr	r3, [r7, #4]
 8108554:	2200      	movs	r2, #0
 8108556:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 810855a:	687b      	ldr	r3, [r7, #4]
 810855c:	2201      	movs	r2, #1
 810855e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8108562:	687b      	ldr	r3, [r7, #4]
 8108564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8108566:	2b01      	cmp	r3, #1
 8108568:	d102      	bne.n	8108570 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 810856a:	6878      	ldr	r0, [r7, #4]
 810856c:	f001 f892 	bl	8109694 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8108570:	687b      	ldr	r3, [r7, #4]
 8108572:	681b      	ldr	r3, [r3, #0]
 8108574:	4618      	mov	r0, r3
 8108576:	f00a fcc3 	bl	8112f00 <USB_DevDisconnect>

  return HAL_OK;
 810857a:	2300      	movs	r3, #0
}
 810857c:	4618      	mov	r0, r3
 810857e:	3714      	adds	r7, #20
 8108580:	46bd      	mov	sp, r7
 8108582:	bdf0      	pop	{r4, r5, r6, r7, pc}

08108584 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8108584:	b580      	push	{r7, lr}
 8108586:	b084      	sub	sp, #16
 8108588:	af00      	add	r7, sp, #0
 810858a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 810858c:	687b      	ldr	r3, [r7, #4]
 810858e:	681b      	ldr	r3, [r3, #0]
 8108590:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8108592:	687b      	ldr	r3, [r7, #4]
 8108594:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8108598:	2b01      	cmp	r3, #1
 810859a:	d101      	bne.n	81085a0 <HAL_PCD_Start+0x1c>
 810859c:	2302      	movs	r3, #2
 810859e:	e020      	b.n	81085e2 <HAL_PCD_Start+0x5e>
 81085a0:	687b      	ldr	r3, [r7, #4]
 81085a2:	2201      	movs	r2, #1
 81085a4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 81085a8:	687b      	ldr	r3, [r7, #4]
 81085aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81085ac:	2b01      	cmp	r3, #1
 81085ae:	d109      	bne.n	81085c4 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 81085b0:	687b      	ldr	r3, [r7, #4]
 81085b2:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 81085b4:	2b01      	cmp	r3, #1
 81085b6:	d005      	beq.n	81085c4 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 81085b8:	68fb      	ldr	r3, [r7, #12]
 81085ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81085bc:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 81085c0:	68fb      	ldr	r3, [r7, #12]
 81085c2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 81085c4:	687b      	ldr	r3, [r7, #4]
 81085c6:	681b      	ldr	r3, [r3, #0]
 81085c8:	4618      	mov	r0, r3
 81085ca:	f009 fbbd 	bl	8111d48 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 81085ce:	687b      	ldr	r3, [r7, #4]
 81085d0:	681b      	ldr	r3, [r3, #0]
 81085d2:	4618      	mov	r0, r3
 81085d4:	f00a fc73 	bl	8112ebe <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 81085d8:	687b      	ldr	r3, [r7, #4]
 81085da:	2200      	movs	r2, #0
 81085dc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 81085e0:	2300      	movs	r3, #0
}
 81085e2:	4618      	mov	r0, r3
 81085e4:	3710      	adds	r7, #16
 81085e6:	46bd      	mov	sp, r7
 81085e8:	bd80      	pop	{r7, pc}

081085ea <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 81085ea:	b590      	push	{r4, r7, lr}
 81085ec:	b08d      	sub	sp, #52	; 0x34
 81085ee:	af00      	add	r7, sp, #0
 81085f0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 81085f2:	687b      	ldr	r3, [r7, #4]
 81085f4:	681b      	ldr	r3, [r3, #0]
 81085f6:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 81085f8:	6a3b      	ldr	r3, [r7, #32]
 81085fa:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 81085fc:	687b      	ldr	r3, [r7, #4]
 81085fe:	681b      	ldr	r3, [r3, #0]
 8108600:	4618      	mov	r0, r3
 8108602:	f00a fd31 	bl	8113068 <USB_GetMode>
 8108606:	4603      	mov	r3, r0
 8108608:	2b00      	cmp	r3, #0
 810860a:	f040 83ca 	bne.w	8108da2 <HAL_PCD_IRQHandler+0x7b8>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 810860e:	687b      	ldr	r3, [r7, #4]
 8108610:	681b      	ldr	r3, [r3, #0]
 8108612:	4618      	mov	r0, r3
 8108614:	f00a fc95 	bl	8112f42 <USB_ReadInterrupts>
 8108618:	4603      	mov	r3, r0
 810861a:	2b00      	cmp	r3, #0
 810861c:	f000 83c0 	beq.w	8108da0 <HAL_PCD_IRQHandler+0x7b6>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8108620:	687b      	ldr	r3, [r7, #4]
 8108622:	681b      	ldr	r3, [r3, #0]
 8108624:	4618      	mov	r0, r3
 8108626:	f00a fc8c 	bl	8112f42 <USB_ReadInterrupts>
 810862a:	4603      	mov	r3, r0
 810862c:	f003 0302 	and.w	r3, r3, #2
 8108630:	2b02      	cmp	r3, #2
 8108632:	d107      	bne.n	8108644 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8108634:	687b      	ldr	r3, [r7, #4]
 8108636:	681b      	ldr	r3, [r3, #0]
 8108638:	695a      	ldr	r2, [r3, #20]
 810863a:	687b      	ldr	r3, [r7, #4]
 810863c:	681b      	ldr	r3, [r3, #0]
 810863e:	f002 0202 	and.w	r2, r2, #2
 8108642:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8108644:	687b      	ldr	r3, [r7, #4]
 8108646:	681b      	ldr	r3, [r3, #0]
 8108648:	4618      	mov	r0, r3
 810864a:	f00a fc7a 	bl	8112f42 <USB_ReadInterrupts>
 810864e:	4603      	mov	r3, r0
 8108650:	f003 0310 	and.w	r3, r3, #16
 8108654:	2b10      	cmp	r3, #16
 8108656:	d161      	bne.n	810871c <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8108658:	687b      	ldr	r3, [r7, #4]
 810865a:	681b      	ldr	r3, [r3, #0]
 810865c:	699a      	ldr	r2, [r3, #24]
 810865e:	687b      	ldr	r3, [r7, #4]
 8108660:	681b      	ldr	r3, [r3, #0]
 8108662:	f022 0210 	bic.w	r2, r2, #16
 8108666:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8108668:	6a3b      	ldr	r3, [r7, #32]
 810866a:	6a1b      	ldr	r3, [r3, #32]
 810866c:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 810866e:	69bb      	ldr	r3, [r7, #24]
 8108670:	f003 020f 	and.w	r2, r3, #15
 8108674:	4613      	mov	r3, r2
 8108676:	00db      	lsls	r3, r3, #3
 8108678:	1a9b      	subs	r3, r3, r2
 810867a:	009b      	lsls	r3, r3, #2
 810867c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8108680:	687a      	ldr	r2, [r7, #4]
 8108682:	4413      	add	r3, r2
 8108684:	3304      	adds	r3, #4
 8108686:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8108688:	69bb      	ldr	r3, [r7, #24]
 810868a:	0c5b      	lsrs	r3, r3, #17
 810868c:	f003 030f 	and.w	r3, r3, #15
 8108690:	2b02      	cmp	r3, #2
 8108692:	d124      	bne.n	81086de <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8108694:	69ba      	ldr	r2, [r7, #24]
 8108696:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 810869a:	4013      	ands	r3, r2
 810869c:	2b00      	cmp	r3, #0
 810869e:	d035      	beq.n	810870c <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 81086a0:	697b      	ldr	r3, [r7, #20]
 81086a2:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 81086a4:	69bb      	ldr	r3, [r7, #24]
 81086a6:	091b      	lsrs	r3, r3, #4
 81086a8:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 81086aa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 81086ae:	b29b      	uxth	r3, r3
 81086b0:	461a      	mov	r2, r3
 81086b2:	6a38      	ldr	r0, [r7, #32]
 81086b4:	f00a fab1 	bl	8112c1a <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 81086b8:	697b      	ldr	r3, [r7, #20]
 81086ba:	68da      	ldr	r2, [r3, #12]
 81086bc:	69bb      	ldr	r3, [r7, #24]
 81086be:	091b      	lsrs	r3, r3, #4
 81086c0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 81086c4:	441a      	add	r2, r3
 81086c6:	697b      	ldr	r3, [r7, #20]
 81086c8:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 81086ca:	697b      	ldr	r3, [r7, #20]
 81086cc:	699a      	ldr	r2, [r3, #24]
 81086ce:	69bb      	ldr	r3, [r7, #24]
 81086d0:	091b      	lsrs	r3, r3, #4
 81086d2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 81086d6:	441a      	add	r2, r3
 81086d8:	697b      	ldr	r3, [r7, #20]
 81086da:	619a      	str	r2, [r3, #24]
 81086dc:	e016      	b.n	810870c <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 81086de:	69bb      	ldr	r3, [r7, #24]
 81086e0:	0c5b      	lsrs	r3, r3, #17
 81086e2:	f003 030f 	and.w	r3, r3, #15
 81086e6:	2b06      	cmp	r3, #6
 81086e8:	d110      	bne.n	810870c <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 81086ea:	687b      	ldr	r3, [r7, #4]
 81086ec:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 81086f0:	2208      	movs	r2, #8
 81086f2:	4619      	mov	r1, r3
 81086f4:	6a38      	ldr	r0, [r7, #32]
 81086f6:	f00a fa90 	bl	8112c1a <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 81086fa:	697b      	ldr	r3, [r7, #20]
 81086fc:	699a      	ldr	r2, [r3, #24]
 81086fe:	69bb      	ldr	r3, [r7, #24]
 8108700:	091b      	lsrs	r3, r3, #4
 8108702:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8108706:	441a      	add	r2, r3
 8108708:	697b      	ldr	r3, [r7, #20]
 810870a:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 810870c:	687b      	ldr	r3, [r7, #4]
 810870e:	681b      	ldr	r3, [r3, #0]
 8108710:	699a      	ldr	r2, [r3, #24]
 8108712:	687b      	ldr	r3, [r7, #4]
 8108714:	681b      	ldr	r3, [r3, #0]
 8108716:	f042 0210 	orr.w	r2, r2, #16
 810871a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 810871c:	687b      	ldr	r3, [r7, #4]
 810871e:	681b      	ldr	r3, [r3, #0]
 8108720:	4618      	mov	r0, r3
 8108722:	f00a fc0e 	bl	8112f42 <USB_ReadInterrupts>
 8108726:	4603      	mov	r3, r0
 8108728:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 810872c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8108730:	d16e      	bne.n	8108810 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8108732:	2300      	movs	r3, #0
 8108734:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8108736:	687b      	ldr	r3, [r7, #4]
 8108738:	681b      	ldr	r3, [r3, #0]
 810873a:	4618      	mov	r0, r3
 810873c:	f00a fc14 	bl	8112f68 <USB_ReadDevAllOutEpInterrupt>
 8108740:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8108742:	e062      	b.n	810880a <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8108744:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8108746:	f003 0301 	and.w	r3, r3, #1
 810874a:	2b00      	cmp	r3, #0
 810874c:	d057      	beq.n	81087fe <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 810874e:	687b      	ldr	r3, [r7, #4]
 8108750:	681b      	ldr	r3, [r3, #0]
 8108752:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8108754:	b2d2      	uxtb	r2, r2
 8108756:	4611      	mov	r1, r2
 8108758:	4618      	mov	r0, r3
 810875a:	f00a fc39 	bl	8112fd0 <USB_ReadDevOutEPInterrupt>
 810875e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8108760:	693b      	ldr	r3, [r7, #16]
 8108762:	f003 0301 	and.w	r3, r3, #1
 8108766:	2b00      	cmp	r3, #0
 8108768:	d00c      	beq.n	8108784 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 810876a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810876c:	015a      	lsls	r2, r3, #5
 810876e:	69fb      	ldr	r3, [r7, #28]
 8108770:	4413      	add	r3, r2
 8108772:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8108776:	461a      	mov	r2, r3
 8108778:	2301      	movs	r3, #1
 810877a:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 810877c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 810877e:	6878      	ldr	r0, [r7, #4]
 8108780:	f000 fdde 	bl	8109340 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8108784:	693b      	ldr	r3, [r7, #16]
 8108786:	f003 0308 	and.w	r3, r3, #8
 810878a:	2b00      	cmp	r3, #0
 810878c:	d00c      	beq.n	81087a8 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 810878e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8108790:	015a      	lsls	r2, r3, #5
 8108792:	69fb      	ldr	r3, [r7, #28]
 8108794:	4413      	add	r3, r2
 8108796:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 810879a:	461a      	mov	r2, r3
 810879c:	2308      	movs	r3, #8
 810879e:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 81087a0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 81087a2:	6878      	ldr	r0, [r7, #4]
 81087a4:	f000 fed8 	bl	8109558 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 81087a8:	693b      	ldr	r3, [r7, #16]
 81087aa:	f003 0310 	and.w	r3, r3, #16
 81087ae:	2b00      	cmp	r3, #0
 81087b0:	d008      	beq.n	81087c4 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 81087b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81087b4:	015a      	lsls	r2, r3, #5
 81087b6:	69fb      	ldr	r3, [r7, #28]
 81087b8:	4413      	add	r3, r2
 81087ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 81087be:	461a      	mov	r2, r3
 81087c0:	2310      	movs	r3, #16
 81087c2:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 81087c4:	693b      	ldr	r3, [r7, #16]
 81087c6:	f003 0320 	and.w	r3, r3, #32
 81087ca:	2b00      	cmp	r3, #0
 81087cc:	d008      	beq.n	81087e0 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 81087ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81087d0:	015a      	lsls	r2, r3, #5
 81087d2:	69fb      	ldr	r3, [r7, #28]
 81087d4:	4413      	add	r3, r2
 81087d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 81087da:	461a      	mov	r2, r3
 81087dc:	2320      	movs	r3, #32
 81087de:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 81087e0:	693b      	ldr	r3, [r7, #16]
 81087e2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 81087e6:	2b00      	cmp	r3, #0
 81087e8:	d009      	beq.n	81087fe <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 81087ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81087ec:	015a      	lsls	r2, r3, #5
 81087ee:	69fb      	ldr	r3, [r7, #28]
 81087f0:	4413      	add	r3, r2
 81087f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 81087f6:	461a      	mov	r2, r3
 81087f8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 81087fc:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 81087fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8108800:	3301      	adds	r3, #1
 8108802:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8108804:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8108806:	085b      	lsrs	r3, r3, #1
 8108808:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 810880a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810880c:	2b00      	cmp	r3, #0
 810880e:	d199      	bne.n	8108744 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8108810:	687b      	ldr	r3, [r7, #4]
 8108812:	681b      	ldr	r3, [r3, #0]
 8108814:	4618      	mov	r0, r3
 8108816:	f00a fb94 	bl	8112f42 <USB_ReadInterrupts>
 810881a:	4603      	mov	r3, r0
 810881c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8108820:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8108824:	f040 80c0 	bne.w	81089a8 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8108828:	687b      	ldr	r3, [r7, #4]
 810882a:	681b      	ldr	r3, [r3, #0]
 810882c:	4618      	mov	r0, r3
 810882e:	f00a fbb5 	bl	8112f9c <USB_ReadDevAllInEpInterrupt>
 8108832:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8108834:	2300      	movs	r3, #0
 8108836:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8108838:	e0b2      	b.n	81089a0 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 810883a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810883c:	f003 0301 	and.w	r3, r3, #1
 8108840:	2b00      	cmp	r3, #0
 8108842:	f000 80a7 	beq.w	8108994 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8108846:	687b      	ldr	r3, [r7, #4]
 8108848:	681b      	ldr	r3, [r3, #0]
 810884a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 810884c:	b2d2      	uxtb	r2, r2
 810884e:	4611      	mov	r1, r2
 8108850:	4618      	mov	r0, r3
 8108852:	f00a fbdb 	bl	811300c <USB_ReadDevInEPInterrupt>
 8108856:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8108858:	693b      	ldr	r3, [r7, #16]
 810885a:	f003 0301 	and.w	r3, r3, #1
 810885e:	2b00      	cmp	r3, #0
 8108860:	d057      	beq.n	8108912 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8108862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8108864:	f003 030f 	and.w	r3, r3, #15
 8108868:	2201      	movs	r2, #1
 810886a:	fa02 f303 	lsl.w	r3, r2, r3
 810886e:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8108870:	69fb      	ldr	r3, [r7, #28]
 8108872:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8108876:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8108878:	68fb      	ldr	r3, [r7, #12]
 810887a:	43db      	mvns	r3, r3
 810887c:	69f9      	ldr	r1, [r7, #28]
 810887e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8108882:	4013      	ands	r3, r2
 8108884:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8108886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8108888:	015a      	lsls	r2, r3, #5
 810888a:	69fb      	ldr	r3, [r7, #28]
 810888c:	4413      	add	r3, r2
 810888e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8108892:	461a      	mov	r2, r3
 8108894:	2301      	movs	r3, #1
 8108896:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8108898:	687b      	ldr	r3, [r7, #4]
 810889a:	691b      	ldr	r3, [r3, #16]
 810889c:	2b01      	cmp	r3, #1
 810889e:	d132      	bne.n	8108906 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 81088a0:	6879      	ldr	r1, [r7, #4]
 81088a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 81088a4:	4613      	mov	r3, r2
 81088a6:	00db      	lsls	r3, r3, #3
 81088a8:	1a9b      	subs	r3, r3, r2
 81088aa:	009b      	lsls	r3, r3, #2
 81088ac:	440b      	add	r3, r1
 81088ae:	3348      	adds	r3, #72	; 0x48
 81088b0:	6819      	ldr	r1, [r3, #0]
 81088b2:	6878      	ldr	r0, [r7, #4]
 81088b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 81088b6:	4613      	mov	r3, r2
 81088b8:	00db      	lsls	r3, r3, #3
 81088ba:	1a9b      	subs	r3, r3, r2
 81088bc:	009b      	lsls	r3, r3, #2
 81088be:	4403      	add	r3, r0
 81088c0:	3344      	adds	r3, #68	; 0x44
 81088c2:	681b      	ldr	r3, [r3, #0]
 81088c4:	4419      	add	r1, r3
 81088c6:	6878      	ldr	r0, [r7, #4]
 81088c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 81088ca:	4613      	mov	r3, r2
 81088cc:	00db      	lsls	r3, r3, #3
 81088ce:	1a9b      	subs	r3, r3, r2
 81088d0:	009b      	lsls	r3, r3, #2
 81088d2:	4403      	add	r3, r0
 81088d4:	3348      	adds	r3, #72	; 0x48
 81088d6:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 81088d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81088da:	2b00      	cmp	r3, #0
 81088dc:	d113      	bne.n	8108906 <HAL_PCD_IRQHandler+0x31c>
 81088de:	6879      	ldr	r1, [r7, #4]
 81088e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 81088e2:	4613      	mov	r3, r2
 81088e4:	00db      	lsls	r3, r3, #3
 81088e6:	1a9b      	subs	r3, r3, r2
 81088e8:	009b      	lsls	r3, r3, #2
 81088ea:	440b      	add	r3, r1
 81088ec:	3350      	adds	r3, #80	; 0x50
 81088ee:	681b      	ldr	r3, [r3, #0]
 81088f0:	2b00      	cmp	r3, #0
 81088f2:	d108      	bne.n	8108906 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 81088f4:	687b      	ldr	r3, [r7, #4]
 81088f6:	6818      	ldr	r0, [r3, #0]
 81088f8:	687b      	ldr	r3, [r7, #4]
 81088fa:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 81088fe:	461a      	mov	r2, r3
 8108900:	2101      	movs	r1, #1
 8108902:	f00a fbe3 	bl	81130cc <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8108906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8108908:	b2db      	uxtb	r3, r3
 810890a:	4619      	mov	r1, r3
 810890c:	6878      	ldr	r0, [r7, #4]
 810890e:	f00f fd9a 	bl	8118446 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8108912:	693b      	ldr	r3, [r7, #16]
 8108914:	f003 0308 	and.w	r3, r3, #8
 8108918:	2b00      	cmp	r3, #0
 810891a:	d008      	beq.n	810892e <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 810891c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810891e:	015a      	lsls	r2, r3, #5
 8108920:	69fb      	ldr	r3, [r7, #28]
 8108922:	4413      	add	r3, r2
 8108924:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8108928:	461a      	mov	r2, r3
 810892a:	2308      	movs	r3, #8
 810892c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 810892e:	693b      	ldr	r3, [r7, #16]
 8108930:	f003 0310 	and.w	r3, r3, #16
 8108934:	2b00      	cmp	r3, #0
 8108936:	d008      	beq.n	810894a <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8108938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810893a:	015a      	lsls	r2, r3, #5
 810893c:	69fb      	ldr	r3, [r7, #28]
 810893e:	4413      	add	r3, r2
 8108940:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8108944:	461a      	mov	r2, r3
 8108946:	2310      	movs	r3, #16
 8108948:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 810894a:	693b      	ldr	r3, [r7, #16]
 810894c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8108950:	2b00      	cmp	r3, #0
 8108952:	d008      	beq.n	8108966 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8108954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8108956:	015a      	lsls	r2, r3, #5
 8108958:	69fb      	ldr	r3, [r7, #28]
 810895a:	4413      	add	r3, r2
 810895c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8108960:	461a      	mov	r2, r3
 8108962:	2340      	movs	r3, #64	; 0x40
 8108964:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8108966:	693b      	ldr	r3, [r7, #16]
 8108968:	f003 0302 	and.w	r3, r3, #2
 810896c:	2b00      	cmp	r3, #0
 810896e:	d008      	beq.n	8108982 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8108970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8108972:	015a      	lsls	r2, r3, #5
 8108974:	69fb      	ldr	r3, [r7, #28]
 8108976:	4413      	add	r3, r2
 8108978:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 810897c:	461a      	mov	r2, r3
 810897e:	2302      	movs	r3, #2
 8108980:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8108982:	693b      	ldr	r3, [r7, #16]
 8108984:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8108988:	2b00      	cmp	r3, #0
 810898a:	d003      	beq.n	8108994 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 810898c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 810898e:	6878      	ldr	r0, [r7, #4]
 8108990:	f000 fc48 	bl	8109224 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8108994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8108996:	3301      	adds	r3, #1
 8108998:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 810899a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810899c:	085b      	lsrs	r3, r3, #1
 810899e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 81089a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81089a2:	2b00      	cmp	r3, #0
 81089a4:	f47f af49 	bne.w	810883a <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 81089a8:	687b      	ldr	r3, [r7, #4]
 81089aa:	681b      	ldr	r3, [r3, #0]
 81089ac:	4618      	mov	r0, r3
 81089ae:	f00a fac8 	bl	8112f42 <USB_ReadInterrupts>
 81089b2:	4603      	mov	r3, r0
 81089b4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 81089b8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 81089bc:	d122      	bne.n	8108a04 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 81089be:	69fb      	ldr	r3, [r7, #28]
 81089c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 81089c4:	685b      	ldr	r3, [r3, #4]
 81089c6:	69fa      	ldr	r2, [r7, #28]
 81089c8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 81089cc:	f023 0301 	bic.w	r3, r3, #1
 81089d0:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 81089d2:	687b      	ldr	r3, [r7, #4]
 81089d4:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 81089d8:	2b01      	cmp	r3, #1
 81089da:	d108      	bne.n	81089ee <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 81089dc:	687b      	ldr	r3, [r7, #4]
 81089de:	2200      	movs	r2, #0
 81089e0:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 81089e4:	2100      	movs	r1, #0
 81089e6:	6878      	ldr	r0, [r7, #4]
 81089e8:	f000 fe78 	bl	81096dc <HAL_PCDEx_LPM_Callback>
 81089ec:	e002      	b.n	81089f4 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 81089ee:	6878      	ldr	r0, [r7, #4]
 81089f0:	f00f fda0 	bl	8118534 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 81089f4:	687b      	ldr	r3, [r7, #4]
 81089f6:	681b      	ldr	r3, [r3, #0]
 81089f8:	695a      	ldr	r2, [r3, #20]
 81089fa:	687b      	ldr	r3, [r7, #4]
 81089fc:	681b      	ldr	r3, [r3, #0]
 81089fe:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8108a02:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8108a04:	687b      	ldr	r3, [r7, #4]
 8108a06:	681b      	ldr	r3, [r3, #0]
 8108a08:	4618      	mov	r0, r3
 8108a0a:	f00a fa9a 	bl	8112f42 <USB_ReadInterrupts>
 8108a0e:	4603      	mov	r3, r0
 8108a10:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8108a14:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8108a18:	d112      	bne.n	8108a40 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8108a1a:	69fb      	ldr	r3, [r7, #28]
 8108a1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8108a20:	689b      	ldr	r3, [r3, #8]
 8108a22:	f003 0301 	and.w	r3, r3, #1
 8108a26:	2b01      	cmp	r3, #1
 8108a28:	d102      	bne.n	8108a30 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8108a2a:	6878      	ldr	r0, [r7, #4]
 8108a2c:	f00f fd5c 	bl	81184e8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8108a30:	687b      	ldr	r3, [r7, #4]
 8108a32:	681b      	ldr	r3, [r3, #0]
 8108a34:	695a      	ldr	r2, [r3, #20]
 8108a36:	687b      	ldr	r3, [r7, #4]
 8108a38:	681b      	ldr	r3, [r3, #0]
 8108a3a:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8108a3e:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8108a40:	687b      	ldr	r3, [r7, #4]
 8108a42:	681b      	ldr	r3, [r3, #0]
 8108a44:	4618      	mov	r0, r3
 8108a46:	f00a fa7c 	bl	8112f42 <USB_ReadInterrupts>
 8108a4a:	4603      	mov	r3, r0
 8108a4c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8108a50:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8108a54:	d121      	bne.n	8108a9a <HAL_PCD_IRQHandler+0x4b0>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8108a56:	687b      	ldr	r3, [r7, #4]
 8108a58:	681b      	ldr	r3, [r3, #0]
 8108a5a:	695a      	ldr	r2, [r3, #20]
 8108a5c:	687b      	ldr	r3, [r7, #4]
 8108a5e:	681b      	ldr	r3, [r3, #0]
 8108a60:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8108a64:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8108a66:	687b      	ldr	r3, [r7, #4]
 8108a68:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8108a6c:	2b00      	cmp	r3, #0
 8108a6e:	d111      	bne.n	8108a94 <HAL_PCD_IRQHandler+0x4aa>
      {
        hpcd->LPM_State = LPM_L1;
 8108a70:	687b      	ldr	r3, [r7, #4]
 8108a72:	2201      	movs	r2, #1
 8108a74:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8108a78:	687b      	ldr	r3, [r7, #4]
 8108a7a:	681b      	ldr	r3, [r3, #0]
 8108a7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8108a7e:	089b      	lsrs	r3, r3, #2
 8108a80:	f003 020f 	and.w	r2, r3, #15
 8108a84:	687b      	ldr	r3, [r7, #4]
 8108a86:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8108a8a:	2101      	movs	r1, #1
 8108a8c:	6878      	ldr	r0, [r7, #4]
 8108a8e:	f000 fe25 	bl	81096dc <HAL_PCDEx_LPM_Callback>
 8108a92:	e002      	b.n	8108a9a <HAL_PCD_IRQHandler+0x4b0>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8108a94:	6878      	ldr	r0, [r7, #4]
 8108a96:	f00f fd27 	bl	81184e8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8108a9a:	687b      	ldr	r3, [r7, #4]
 8108a9c:	681b      	ldr	r3, [r3, #0]
 8108a9e:	4618      	mov	r0, r3
 8108aa0:	f00a fa4f 	bl	8112f42 <USB_ReadInterrupts>
 8108aa4:	4603      	mov	r3, r0
 8108aa6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8108aaa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8108aae:	f040 80c7 	bne.w	8108c40 <HAL_PCD_IRQHandler+0x656>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8108ab2:	69fb      	ldr	r3, [r7, #28]
 8108ab4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8108ab8:	685b      	ldr	r3, [r3, #4]
 8108aba:	69fa      	ldr	r2, [r7, #28]
 8108abc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8108ac0:	f023 0301 	bic.w	r3, r3, #1
 8108ac4:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8108ac6:	687b      	ldr	r3, [r7, #4]
 8108ac8:	681b      	ldr	r3, [r3, #0]
 8108aca:	2110      	movs	r1, #16
 8108acc:	4618      	mov	r0, r3
 8108ace:	f009 fae5 	bl	811209c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8108ad2:	2300      	movs	r3, #0
 8108ad4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8108ad6:	e056      	b.n	8108b86 <HAL_PCD_IRQHandler+0x59c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8108ad8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8108ada:	015a      	lsls	r2, r3, #5
 8108adc:	69fb      	ldr	r3, [r7, #28]
 8108ade:	4413      	add	r3, r2
 8108ae0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8108ae4:	461a      	mov	r2, r3
 8108ae6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8108aea:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8108aec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8108aee:	015a      	lsls	r2, r3, #5
 8108af0:	69fb      	ldr	r3, [r7, #28]
 8108af2:	4413      	add	r3, r2
 8108af4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8108af8:	681b      	ldr	r3, [r3, #0]
 8108afa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8108afc:	0151      	lsls	r1, r2, #5
 8108afe:	69fa      	ldr	r2, [r7, #28]
 8108b00:	440a      	add	r2, r1
 8108b02:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8108b06:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8108b0a:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8108b0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8108b0e:	015a      	lsls	r2, r3, #5
 8108b10:	69fb      	ldr	r3, [r7, #28]
 8108b12:	4413      	add	r3, r2
 8108b14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8108b18:	681b      	ldr	r3, [r3, #0]
 8108b1a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8108b1c:	0151      	lsls	r1, r2, #5
 8108b1e:	69fa      	ldr	r2, [r7, #28]
 8108b20:	440a      	add	r2, r1
 8108b22:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8108b26:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8108b2a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8108b2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8108b2e:	015a      	lsls	r2, r3, #5
 8108b30:	69fb      	ldr	r3, [r7, #28]
 8108b32:	4413      	add	r3, r2
 8108b34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8108b38:	461a      	mov	r2, r3
 8108b3a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8108b3e:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8108b40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8108b42:	015a      	lsls	r2, r3, #5
 8108b44:	69fb      	ldr	r3, [r7, #28]
 8108b46:	4413      	add	r3, r2
 8108b48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8108b4c:	681b      	ldr	r3, [r3, #0]
 8108b4e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8108b50:	0151      	lsls	r1, r2, #5
 8108b52:	69fa      	ldr	r2, [r7, #28]
 8108b54:	440a      	add	r2, r1
 8108b56:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8108b5a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8108b5e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8108b60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8108b62:	015a      	lsls	r2, r3, #5
 8108b64:	69fb      	ldr	r3, [r7, #28]
 8108b66:	4413      	add	r3, r2
 8108b68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8108b6c:	681b      	ldr	r3, [r3, #0]
 8108b6e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8108b70:	0151      	lsls	r1, r2, #5
 8108b72:	69fa      	ldr	r2, [r7, #28]
 8108b74:	440a      	add	r2, r1
 8108b76:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8108b7a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8108b7e:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8108b80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8108b82:	3301      	adds	r3, #1
 8108b84:	62fb      	str	r3, [r7, #44]	; 0x2c
 8108b86:	687b      	ldr	r3, [r7, #4]
 8108b88:	685b      	ldr	r3, [r3, #4]
 8108b8a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8108b8c:	429a      	cmp	r2, r3
 8108b8e:	d3a3      	bcc.n	8108ad8 <HAL_PCD_IRQHandler+0x4ee>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8108b90:	69fb      	ldr	r3, [r7, #28]
 8108b92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8108b96:	69db      	ldr	r3, [r3, #28]
 8108b98:	69fa      	ldr	r2, [r7, #28]
 8108b9a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8108b9e:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8108ba2:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8108ba4:	687b      	ldr	r3, [r7, #4]
 8108ba6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8108ba8:	2b00      	cmp	r3, #0
 8108baa:	d016      	beq.n	8108bda <HAL_PCD_IRQHandler+0x5f0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8108bac:	69fb      	ldr	r3, [r7, #28]
 8108bae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8108bb2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8108bb6:	69fa      	ldr	r2, [r7, #28]
 8108bb8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8108bbc:	f043 030b 	orr.w	r3, r3, #11
 8108bc0:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8108bc4:	69fb      	ldr	r3, [r7, #28]
 8108bc6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8108bca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8108bcc:	69fa      	ldr	r2, [r7, #28]
 8108bce:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8108bd2:	f043 030b 	orr.w	r3, r3, #11
 8108bd6:	6453      	str	r3, [r2, #68]	; 0x44
 8108bd8:	e015      	b.n	8108c06 <HAL_PCD_IRQHandler+0x61c>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8108bda:	69fb      	ldr	r3, [r7, #28]
 8108bdc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8108be0:	695b      	ldr	r3, [r3, #20]
 8108be2:	69fa      	ldr	r2, [r7, #28]
 8108be4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8108be8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8108bec:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8108bf0:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8108bf2:	69fb      	ldr	r3, [r7, #28]
 8108bf4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8108bf8:	691b      	ldr	r3, [r3, #16]
 8108bfa:	69fa      	ldr	r2, [r7, #28]
 8108bfc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8108c00:	f043 030b 	orr.w	r3, r3, #11
 8108c04:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8108c06:	69fb      	ldr	r3, [r7, #28]
 8108c08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8108c0c:	681b      	ldr	r3, [r3, #0]
 8108c0e:	69fa      	ldr	r2, [r7, #28]
 8108c10:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8108c14:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8108c18:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8108c1a:	687b      	ldr	r3, [r7, #4]
 8108c1c:	6818      	ldr	r0, [r3, #0]
 8108c1e:	687b      	ldr	r3, [r7, #4]
 8108c20:	691b      	ldr	r3, [r3, #16]
 8108c22:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8108c24:	687b      	ldr	r3, [r7, #4]
 8108c26:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8108c2a:	461a      	mov	r2, r3
 8108c2c:	f00a fa4e 	bl	81130cc <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8108c30:	687b      	ldr	r3, [r7, #4]
 8108c32:	681b      	ldr	r3, [r3, #0]
 8108c34:	695a      	ldr	r2, [r3, #20]
 8108c36:	687b      	ldr	r3, [r7, #4]
 8108c38:	681b      	ldr	r3, [r3, #0]
 8108c3a:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8108c3e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8108c40:	687b      	ldr	r3, [r7, #4]
 8108c42:	681b      	ldr	r3, [r3, #0]
 8108c44:	4618      	mov	r0, r3
 8108c46:	f00a f97c 	bl	8112f42 <USB_ReadInterrupts>
 8108c4a:	4603      	mov	r3, r0
 8108c4c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8108c50:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8108c54:	d124      	bne.n	8108ca0 <HAL_PCD_IRQHandler+0x6b6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8108c56:	687b      	ldr	r3, [r7, #4]
 8108c58:	681b      	ldr	r3, [r3, #0]
 8108c5a:	4618      	mov	r0, r3
 8108c5c:	f00a fa12 	bl	8113084 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8108c60:	687b      	ldr	r3, [r7, #4]
 8108c62:	681b      	ldr	r3, [r3, #0]
 8108c64:	4618      	mov	r0, r3
 8108c66:	f009 fa7a 	bl	811215e <USB_GetDevSpeed>
 8108c6a:	4603      	mov	r3, r0
 8108c6c:	461a      	mov	r2, r3
 8108c6e:	687b      	ldr	r3, [r7, #4]
 8108c70:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8108c72:	687b      	ldr	r3, [r7, #4]
 8108c74:	681c      	ldr	r4, [r3, #0]
 8108c76:	f000 ff4f 	bl	8109b18 <HAL_RCC_GetHCLKFreq>
 8108c7a:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8108c7c:	687b      	ldr	r3, [r7, #4]
 8108c7e:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8108c80:	b2db      	uxtb	r3, r3
 8108c82:	461a      	mov	r2, r3
 8108c84:	4620      	mov	r0, r4
 8108c86:	f008 ffbd 	bl	8111c04 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8108c8a:	6878      	ldr	r0, [r7, #4]
 8108c8c:	f00f fc03 	bl	8118496 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8108c90:	687b      	ldr	r3, [r7, #4]
 8108c92:	681b      	ldr	r3, [r3, #0]
 8108c94:	695a      	ldr	r2, [r3, #20]
 8108c96:	687b      	ldr	r3, [r7, #4]
 8108c98:	681b      	ldr	r3, [r3, #0]
 8108c9a:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8108c9e:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8108ca0:	687b      	ldr	r3, [r7, #4]
 8108ca2:	681b      	ldr	r3, [r3, #0]
 8108ca4:	4618      	mov	r0, r3
 8108ca6:	f00a f94c 	bl	8112f42 <USB_ReadInterrupts>
 8108caa:	4603      	mov	r3, r0
 8108cac:	f003 0308 	and.w	r3, r3, #8
 8108cb0:	2b08      	cmp	r3, #8
 8108cb2:	d10a      	bne.n	8108cca <HAL_PCD_IRQHandler+0x6e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8108cb4:	6878      	ldr	r0, [r7, #4]
 8108cb6:	f00f fbe0 	bl	811847a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8108cba:	687b      	ldr	r3, [r7, #4]
 8108cbc:	681b      	ldr	r3, [r3, #0]
 8108cbe:	695a      	ldr	r2, [r3, #20]
 8108cc0:	687b      	ldr	r3, [r7, #4]
 8108cc2:	681b      	ldr	r3, [r3, #0]
 8108cc4:	f002 0208 	and.w	r2, r2, #8
 8108cc8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8108cca:	687b      	ldr	r3, [r7, #4]
 8108ccc:	681b      	ldr	r3, [r3, #0]
 8108cce:	4618      	mov	r0, r3
 8108cd0:	f00a f937 	bl	8112f42 <USB_ReadInterrupts>
 8108cd4:	4603      	mov	r3, r0
 8108cd6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8108cda:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8108cde:	d10f      	bne.n	8108d00 <HAL_PCD_IRQHandler+0x716>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8108ce0:	2300      	movs	r3, #0
 8108ce2:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8108ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8108ce6:	b2db      	uxtb	r3, r3
 8108ce8:	4619      	mov	r1, r3
 8108cea:	6878      	ldr	r0, [r7, #4]
 8108cec:	f00f fc42 	bl	8118574 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8108cf0:	687b      	ldr	r3, [r7, #4]
 8108cf2:	681b      	ldr	r3, [r3, #0]
 8108cf4:	695a      	ldr	r2, [r3, #20]
 8108cf6:	687b      	ldr	r3, [r7, #4]
 8108cf8:	681b      	ldr	r3, [r3, #0]
 8108cfa:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8108cfe:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8108d00:	687b      	ldr	r3, [r7, #4]
 8108d02:	681b      	ldr	r3, [r3, #0]
 8108d04:	4618      	mov	r0, r3
 8108d06:	f00a f91c 	bl	8112f42 <USB_ReadInterrupts>
 8108d0a:	4603      	mov	r3, r0
 8108d0c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8108d10:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8108d14:	d10f      	bne.n	8108d36 <HAL_PCD_IRQHandler+0x74c>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8108d16:	2300      	movs	r3, #0
 8108d18:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8108d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8108d1c:	b2db      	uxtb	r3, r3
 8108d1e:	4619      	mov	r1, r3
 8108d20:	6878      	ldr	r0, [r7, #4]
 8108d22:	f00f fc15 	bl	8118550 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8108d26:	687b      	ldr	r3, [r7, #4]
 8108d28:	681b      	ldr	r3, [r3, #0]
 8108d2a:	695a      	ldr	r2, [r3, #20]
 8108d2c:	687b      	ldr	r3, [r7, #4]
 8108d2e:	681b      	ldr	r3, [r3, #0]
 8108d30:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8108d34:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8108d36:	687b      	ldr	r3, [r7, #4]
 8108d38:	681b      	ldr	r3, [r3, #0]
 8108d3a:	4618      	mov	r0, r3
 8108d3c:	f00a f901 	bl	8112f42 <USB_ReadInterrupts>
 8108d40:	4603      	mov	r3, r0
 8108d42:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8108d46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8108d4a:	d10a      	bne.n	8108d62 <HAL_PCD_IRQHandler+0x778>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8108d4c:	6878      	ldr	r0, [r7, #4]
 8108d4e:	f00f fc23 	bl	8118598 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8108d52:	687b      	ldr	r3, [r7, #4]
 8108d54:	681b      	ldr	r3, [r3, #0]
 8108d56:	695a      	ldr	r2, [r3, #20]
 8108d58:	687b      	ldr	r3, [r7, #4]
 8108d5a:	681b      	ldr	r3, [r3, #0]
 8108d5c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8108d60:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8108d62:	687b      	ldr	r3, [r7, #4]
 8108d64:	681b      	ldr	r3, [r3, #0]
 8108d66:	4618      	mov	r0, r3
 8108d68:	f00a f8eb 	bl	8112f42 <USB_ReadInterrupts>
 8108d6c:	4603      	mov	r3, r0
 8108d6e:	f003 0304 	and.w	r3, r3, #4
 8108d72:	2b04      	cmp	r3, #4
 8108d74:	d115      	bne.n	8108da2 <HAL_PCD_IRQHandler+0x7b8>
    {
      temp = hpcd->Instance->GOTGINT;
 8108d76:	687b      	ldr	r3, [r7, #4]
 8108d78:	681b      	ldr	r3, [r3, #0]
 8108d7a:	685b      	ldr	r3, [r3, #4]
 8108d7c:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8108d7e:	69bb      	ldr	r3, [r7, #24]
 8108d80:	f003 0304 	and.w	r3, r3, #4
 8108d84:	2b00      	cmp	r3, #0
 8108d86:	d002      	beq.n	8108d8e <HAL_PCD_IRQHandler+0x7a4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8108d88:	6878      	ldr	r0, [r7, #4]
 8108d8a:	f00f fc13 	bl	81185b4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8108d8e:	687b      	ldr	r3, [r7, #4]
 8108d90:	681b      	ldr	r3, [r3, #0]
 8108d92:	6859      	ldr	r1, [r3, #4]
 8108d94:	687b      	ldr	r3, [r7, #4]
 8108d96:	681b      	ldr	r3, [r3, #0]
 8108d98:	69ba      	ldr	r2, [r7, #24]
 8108d9a:	430a      	orrs	r2, r1
 8108d9c:	605a      	str	r2, [r3, #4]
 8108d9e:	e000      	b.n	8108da2 <HAL_PCD_IRQHandler+0x7b8>
      return;
 8108da0:	bf00      	nop
    }
  }
}
 8108da2:	3734      	adds	r7, #52	; 0x34
 8108da4:	46bd      	mov	sp, r7
 8108da6:	bd90      	pop	{r4, r7, pc}

08108da8 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8108da8:	b580      	push	{r7, lr}
 8108daa:	b082      	sub	sp, #8
 8108dac:	af00      	add	r7, sp, #0
 8108dae:	6078      	str	r0, [r7, #4]
 8108db0:	460b      	mov	r3, r1
 8108db2:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8108db4:	687b      	ldr	r3, [r7, #4]
 8108db6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8108dba:	2b01      	cmp	r3, #1
 8108dbc:	d101      	bne.n	8108dc2 <HAL_PCD_SetAddress+0x1a>
 8108dbe:	2302      	movs	r3, #2
 8108dc0:	e013      	b.n	8108dea <HAL_PCD_SetAddress+0x42>
 8108dc2:	687b      	ldr	r3, [r7, #4]
 8108dc4:	2201      	movs	r2, #1
 8108dc6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8108dca:	687b      	ldr	r3, [r7, #4]
 8108dcc:	78fa      	ldrb	r2, [r7, #3]
 8108dce:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8108dd2:	687b      	ldr	r3, [r7, #4]
 8108dd4:	681b      	ldr	r3, [r3, #0]
 8108dd6:	78fa      	ldrb	r2, [r7, #3]
 8108dd8:	4611      	mov	r1, r2
 8108dda:	4618      	mov	r0, r3
 8108ddc:	f00a f849 	bl	8112e72 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8108de0:	687b      	ldr	r3, [r7, #4]
 8108de2:	2200      	movs	r2, #0
 8108de4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8108de8:	2300      	movs	r3, #0
}
 8108dea:	4618      	mov	r0, r3
 8108dec:	3708      	adds	r7, #8
 8108dee:	46bd      	mov	sp, r7
 8108df0:	bd80      	pop	{r7, pc}

08108df2 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8108df2:	b580      	push	{r7, lr}
 8108df4:	b084      	sub	sp, #16
 8108df6:	af00      	add	r7, sp, #0
 8108df8:	6078      	str	r0, [r7, #4]
 8108dfa:	4608      	mov	r0, r1
 8108dfc:	4611      	mov	r1, r2
 8108dfe:	461a      	mov	r2, r3
 8108e00:	4603      	mov	r3, r0
 8108e02:	70fb      	strb	r3, [r7, #3]
 8108e04:	460b      	mov	r3, r1
 8108e06:	803b      	strh	r3, [r7, #0]
 8108e08:	4613      	mov	r3, r2
 8108e0a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8108e0c:	2300      	movs	r3, #0
 8108e0e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8108e10:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8108e14:	2b00      	cmp	r3, #0
 8108e16:	da0f      	bge.n	8108e38 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8108e18:	78fb      	ldrb	r3, [r7, #3]
 8108e1a:	f003 020f 	and.w	r2, r3, #15
 8108e1e:	4613      	mov	r3, r2
 8108e20:	00db      	lsls	r3, r3, #3
 8108e22:	1a9b      	subs	r3, r3, r2
 8108e24:	009b      	lsls	r3, r3, #2
 8108e26:	3338      	adds	r3, #56	; 0x38
 8108e28:	687a      	ldr	r2, [r7, #4]
 8108e2a:	4413      	add	r3, r2
 8108e2c:	3304      	adds	r3, #4
 8108e2e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8108e30:	68fb      	ldr	r3, [r7, #12]
 8108e32:	2201      	movs	r2, #1
 8108e34:	705a      	strb	r2, [r3, #1]
 8108e36:	e00f      	b.n	8108e58 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8108e38:	78fb      	ldrb	r3, [r7, #3]
 8108e3a:	f003 020f 	and.w	r2, r3, #15
 8108e3e:	4613      	mov	r3, r2
 8108e40:	00db      	lsls	r3, r3, #3
 8108e42:	1a9b      	subs	r3, r3, r2
 8108e44:	009b      	lsls	r3, r3, #2
 8108e46:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8108e4a:	687a      	ldr	r2, [r7, #4]
 8108e4c:	4413      	add	r3, r2
 8108e4e:	3304      	adds	r3, #4
 8108e50:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8108e52:	68fb      	ldr	r3, [r7, #12]
 8108e54:	2200      	movs	r2, #0
 8108e56:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8108e58:	78fb      	ldrb	r3, [r7, #3]
 8108e5a:	f003 030f 	and.w	r3, r3, #15
 8108e5e:	b2da      	uxtb	r2, r3
 8108e60:	68fb      	ldr	r3, [r7, #12]
 8108e62:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8108e64:	883a      	ldrh	r2, [r7, #0]
 8108e66:	68fb      	ldr	r3, [r7, #12]
 8108e68:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8108e6a:	68fb      	ldr	r3, [r7, #12]
 8108e6c:	78ba      	ldrb	r2, [r7, #2]
 8108e6e:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8108e70:	68fb      	ldr	r3, [r7, #12]
 8108e72:	785b      	ldrb	r3, [r3, #1]
 8108e74:	2b00      	cmp	r3, #0
 8108e76:	d004      	beq.n	8108e82 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8108e78:	68fb      	ldr	r3, [r7, #12]
 8108e7a:	781b      	ldrb	r3, [r3, #0]
 8108e7c:	b29a      	uxth	r2, r3
 8108e7e:	68fb      	ldr	r3, [r7, #12]
 8108e80:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8108e82:	78bb      	ldrb	r3, [r7, #2]
 8108e84:	2b02      	cmp	r3, #2
 8108e86:	d102      	bne.n	8108e8e <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8108e88:	68fb      	ldr	r3, [r7, #12]
 8108e8a:	2200      	movs	r2, #0
 8108e8c:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8108e8e:	687b      	ldr	r3, [r7, #4]
 8108e90:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8108e94:	2b01      	cmp	r3, #1
 8108e96:	d101      	bne.n	8108e9c <HAL_PCD_EP_Open+0xaa>
 8108e98:	2302      	movs	r3, #2
 8108e9a:	e00e      	b.n	8108eba <HAL_PCD_EP_Open+0xc8>
 8108e9c:	687b      	ldr	r3, [r7, #4]
 8108e9e:	2201      	movs	r2, #1
 8108ea0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8108ea4:	687b      	ldr	r3, [r7, #4]
 8108ea6:	681b      	ldr	r3, [r3, #0]
 8108ea8:	68f9      	ldr	r1, [r7, #12]
 8108eaa:	4618      	mov	r0, r3
 8108eac:	f009 f97c 	bl	81121a8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8108eb0:	687b      	ldr	r3, [r7, #4]
 8108eb2:	2200      	movs	r2, #0
 8108eb4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8108eb8:	7afb      	ldrb	r3, [r7, #11]
}
 8108eba:	4618      	mov	r0, r3
 8108ebc:	3710      	adds	r7, #16
 8108ebe:	46bd      	mov	sp, r7
 8108ec0:	bd80      	pop	{r7, pc}

08108ec2 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8108ec2:	b580      	push	{r7, lr}
 8108ec4:	b084      	sub	sp, #16
 8108ec6:	af00      	add	r7, sp, #0
 8108ec8:	6078      	str	r0, [r7, #4]
 8108eca:	460b      	mov	r3, r1
 8108ecc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8108ece:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8108ed2:	2b00      	cmp	r3, #0
 8108ed4:	da0f      	bge.n	8108ef6 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8108ed6:	78fb      	ldrb	r3, [r7, #3]
 8108ed8:	f003 020f 	and.w	r2, r3, #15
 8108edc:	4613      	mov	r3, r2
 8108ede:	00db      	lsls	r3, r3, #3
 8108ee0:	1a9b      	subs	r3, r3, r2
 8108ee2:	009b      	lsls	r3, r3, #2
 8108ee4:	3338      	adds	r3, #56	; 0x38
 8108ee6:	687a      	ldr	r2, [r7, #4]
 8108ee8:	4413      	add	r3, r2
 8108eea:	3304      	adds	r3, #4
 8108eec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8108eee:	68fb      	ldr	r3, [r7, #12]
 8108ef0:	2201      	movs	r2, #1
 8108ef2:	705a      	strb	r2, [r3, #1]
 8108ef4:	e00f      	b.n	8108f16 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8108ef6:	78fb      	ldrb	r3, [r7, #3]
 8108ef8:	f003 020f 	and.w	r2, r3, #15
 8108efc:	4613      	mov	r3, r2
 8108efe:	00db      	lsls	r3, r3, #3
 8108f00:	1a9b      	subs	r3, r3, r2
 8108f02:	009b      	lsls	r3, r3, #2
 8108f04:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8108f08:	687a      	ldr	r2, [r7, #4]
 8108f0a:	4413      	add	r3, r2
 8108f0c:	3304      	adds	r3, #4
 8108f0e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8108f10:	68fb      	ldr	r3, [r7, #12]
 8108f12:	2200      	movs	r2, #0
 8108f14:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8108f16:	78fb      	ldrb	r3, [r7, #3]
 8108f18:	f003 030f 	and.w	r3, r3, #15
 8108f1c:	b2da      	uxtb	r2, r3
 8108f1e:	68fb      	ldr	r3, [r7, #12]
 8108f20:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8108f22:	687b      	ldr	r3, [r7, #4]
 8108f24:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8108f28:	2b01      	cmp	r3, #1
 8108f2a:	d101      	bne.n	8108f30 <HAL_PCD_EP_Close+0x6e>
 8108f2c:	2302      	movs	r3, #2
 8108f2e:	e00e      	b.n	8108f4e <HAL_PCD_EP_Close+0x8c>
 8108f30:	687b      	ldr	r3, [r7, #4]
 8108f32:	2201      	movs	r2, #1
 8108f34:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8108f38:	687b      	ldr	r3, [r7, #4]
 8108f3a:	681b      	ldr	r3, [r3, #0]
 8108f3c:	68f9      	ldr	r1, [r7, #12]
 8108f3e:	4618      	mov	r0, r3
 8108f40:	f009 f9ba 	bl	81122b8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8108f44:	687b      	ldr	r3, [r7, #4]
 8108f46:	2200      	movs	r2, #0
 8108f48:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8108f4c:	2300      	movs	r3, #0
}
 8108f4e:	4618      	mov	r0, r3
 8108f50:	3710      	adds	r7, #16
 8108f52:	46bd      	mov	sp, r7
 8108f54:	bd80      	pop	{r7, pc}

08108f56 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8108f56:	b580      	push	{r7, lr}
 8108f58:	b086      	sub	sp, #24
 8108f5a:	af00      	add	r7, sp, #0
 8108f5c:	60f8      	str	r0, [r7, #12]
 8108f5e:	607a      	str	r2, [r7, #4]
 8108f60:	603b      	str	r3, [r7, #0]
 8108f62:	460b      	mov	r3, r1
 8108f64:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8108f66:	7afb      	ldrb	r3, [r7, #11]
 8108f68:	f003 020f 	and.w	r2, r3, #15
 8108f6c:	4613      	mov	r3, r2
 8108f6e:	00db      	lsls	r3, r3, #3
 8108f70:	1a9b      	subs	r3, r3, r2
 8108f72:	009b      	lsls	r3, r3, #2
 8108f74:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8108f78:	68fa      	ldr	r2, [r7, #12]
 8108f7a:	4413      	add	r3, r2
 8108f7c:	3304      	adds	r3, #4
 8108f7e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8108f80:	697b      	ldr	r3, [r7, #20]
 8108f82:	687a      	ldr	r2, [r7, #4]
 8108f84:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8108f86:	697b      	ldr	r3, [r7, #20]
 8108f88:	683a      	ldr	r2, [r7, #0]
 8108f8a:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8108f8c:	697b      	ldr	r3, [r7, #20]
 8108f8e:	2200      	movs	r2, #0
 8108f90:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8108f92:	697b      	ldr	r3, [r7, #20]
 8108f94:	2200      	movs	r2, #0
 8108f96:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8108f98:	7afb      	ldrb	r3, [r7, #11]
 8108f9a:	f003 030f 	and.w	r3, r3, #15
 8108f9e:	b2da      	uxtb	r2, r3
 8108fa0:	697b      	ldr	r3, [r7, #20]
 8108fa2:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8108fa4:	68fb      	ldr	r3, [r7, #12]
 8108fa6:	691b      	ldr	r3, [r3, #16]
 8108fa8:	2b01      	cmp	r3, #1
 8108faa:	d102      	bne.n	8108fb2 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8108fac:	687a      	ldr	r2, [r7, #4]
 8108fae:	697b      	ldr	r3, [r7, #20]
 8108fb0:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8108fb2:	7afb      	ldrb	r3, [r7, #11]
 8108fb4:	f003 030f 	and.w	r3, r3, #15
 8108fb8:	2b00      	cmp	r3, #0
 8108fba:	d109      	bne.n	8108fd0 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8108fbc:	68fb      	ldr	r3, [r7, #12]
 8108fbe:	6818      	ldr	r0, [r3, #0]
 8108fc0:	68fb      	ldr	r3, [r7, #12]
 8108fc2:	691b      	ldr	r3, [r3, #16]
 8108fc4:	b2db      	uxtb	r3, r3
 8108fc6:	461a      	mov	r2, r3
 8108fc8:	6979      	ldr	r1, [r7, #20]
 8108fca:	f009 fc95 	bl	81128f8 <USB_EP0StartXfer>
 8108fce:	e008      	b.n	8108fe2 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8108fd0:	68fb      	ldr	r3, [r7, #12]
 8108fd2:	6818      	ldr	r0, [r3, #0]
 8108fd4:	68fb      	ldr	r3, [r7, #12]
 8108fd6:	691b      	ldr	r3, [r3, #16]
 8108fd8:	b2db      	uxtb	r3, r3
 8108fda:	461a      	mov	r2, r3
 8108fdc:	6979      	ldr	r1, [r7, #20]
 8108fde:	f009 fa47 	bl	8112470 <USB_EPStartXfer>
  }

  return HAL_OK;
 8108fe2:	2300      	movs	r3, #0
}
 8108fe4:	4618      	mov	r0, r3
 8108fe6:	3718      	adds	r7, #24
 8108fe8:	46bd      	mov	sp, r7
 8108fea:	bd80      	pop	{r7, pc}

08108fec <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8108fec:	b480      	push	{r7}
 8108fee:	b083      	sub	sp, #12
 8108ff0:	af00      	add	r7, sp, #0
 8108ff2:	6078      	str	r0, [r7, #4]
 8108ff4:	460b      	mov	r3, r1
 8108ff6:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8108ff8:	78fb      	ldrb	r3, [r7, #3]
 8108ffa:	f003 020f 	and.w	r2, r3, #15
 8108ffe:	6879      	ldr	r1, [r7, #4]
 8109000:	4613      	mov	r3, r2
 8109002:	00db      	lsls	r3, r3, #3
 8109004:	1a9b      	subs	r3, r3, r2
 8109006:	009b      	lsls	r3, r3, #2
 8109008:	440b      	add	r3, r1
 810900a:	f503 7305 	add.w	r3, r3, #532	; 0x214
 810900e:	681b      	ldr	r3, [r3, #0]
}
 8109010:	4618      	mov	r0, r3
 8109012:	370c      	adds	r7, #12
 8109014:	46bd      	mov	sp, r7
 8109016:	f85d 7b04 	ldr.w	r7, [sp], #4
 810901a:	4770      	bx	lr

0810901c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 810901c:	b580      	push	{r7, lr}
 810901e:	b086      	sub	sp, #24
 8109020:	af00      	add	r7, sp, #0
 8109022:	60f8      	str	r0, [r7, #12]
 8109024:	607a      	str	r2, [r7, #4]
 8109026:	603b      	str	r3, [r7, #0]
 8109028:	460b      	mov	r3, r1
 810902a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 810902c:	7afb      	ldrb	r3, [r7, #11]
 810902e:	f003 020f 	and.w	r2, r3, #15
 8109032:	4613      	mov	r3, r2
 8109034:	00db      	lsls	r3, r3, #3
 8109036:	1a9b      	subs	r3, r3, r2
 8109038:	009b      	lsls	r3, r3, #2
 810903a:	3338      	adds	r3, #56	; 0x38
 810903c:	68fa      	ldr	r2, [r7, #12]
 810903e:	4413      	add	r3, r2
 8109040:	3304      	adds	r3, #4
 8109042:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8109044:	697b      	ldr	r3, [r7, #20]
 8109046:	687a      	ldr	r2, [r7, #4]
 8109048:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 810904a:	697b      	ldr	r3, [r7, #20]
 810904c:	683a      	ldr	r2, [r7, #0]
 810904e:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8109050:	697b      	ldr	r3, [r7, #20]
 8109052:	2200      	movs	r2, #0
 8109054:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8109056:	697b      	ldr	r3, [r7, #20]
 8109058:	2201      	movs	r2, #1
 810905a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 810905c:	7afb      	ldrb	r3, [r7, #11]
 810905e:	f003 030f 	and.w	r3, r3, #15
 8109062:	b2da      	uxtb	r2, r3
 8109064:	697b      	ldr	r3, [r7, #20]
 8109066:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8109068:	68fb      	ldr	r3, [r7, #12]
 810906a:	691b      	ldr	r3, [r3, #16]
 810906c:	2b01      	cmp	r3, #1
 810906e:	d102      	bne.n	8109076 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8109070:	687a      	ldr	r2, [r7, #4]
 8109072:	697b      	ldr	r3, [r7, #20]
 8109074:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8109076:	7afb      	ldrb	r3, [r7, #11]
 8109078:	f003 030f 	and.w	r3, r3, #15
 810907c:	2b00      	cmp	r3, #0
 810907e:	d109      	bne.n	8109094 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8109080:	68fb      	ldr	r3, [r7, #12]
 8109082:	6818      	ldr	r0, [r3, #0]
 8109084:	68fb      	ldr	r3, [r7, #12]
 8109086:	691b      	ldr	r3, [r3, #16]
 8109088:	b2db      	uxtb	r3, r3
 810908a:	461a      	mov	r2, r3
 810908c:	6979      	ldr	r1, [r7, #20]
 810908e:	f009 fc33 	bl	81128f8 <USB_EP0StartXfer>
 8109092:	e008      	b.n	81090a6 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8109094:	68fb      	ldr	r3, [r7, #12]
 8109096:	6818      	ldr	r0, [r3, #0]
 8109098:	68fb      	ldr	r3, [r7, #12]
 810909a:	691b      	ldr	r3, [r3, #16]
 810909c:	b2db      	uxtb	r3, r3
 810909e:	461a      	mov	r2, r3
 81090a0:	6979      	ldr	r1, [r7, #20]
 81090a2:	f009 f9e5 	bl	8112470 <USB_EPStartXfer>
  }

  return HAL_OK;
 81090a6:	2300      	movs	r3, #0
}
 81090a8:	4618      	mov	r0, r3
 81090aa:	3718      	adds	r7, #24
 81090ac:	46bd      	mov	sp, r7
 81090ae:	bd80      	pop	{r7, pc}

081090b0 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 81090b0:	b580      	push	{r7, lr}
 81090b2:	b084      	sub	sp, #16
 81090b4:	af00      	add	r7, sp, #0
 81090b6:	6078      	str	r0, [r7, #4]
 81090b8:	460b      	mov	r3, r1
 81090ba:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 81090bc:	78fb      	ldrb	r3, [r7, #3]
 81090be:	f003 020f 	and.w	r2, r3, #15
 81090c2:	687b      	ldr	r3, [r7, #4]
 81090c4:	685b      	ldr	r3, [r3, #4]
 81090c6:	429a      	cmp	r2, r3
 81090c8:	d901      	bls.n	81090ce <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 81090ca:	2301      	movs	r3, #1
 81090cc:	e050      	b.n	8109170 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 81090ce:	f997 3003 	ldrsb.w	r3, [r7, #3]
 81090d2:	2b00      	cmp	r3, #0
 81090d4:	da0f      	bge.n	81090f6 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 81090d6:	78fb      	ldrb	r3, [r7, #3]
 81090d8:	f003 020f 	and.w	r2, r3, #15
 81090dc:	4613      	mov	r3, r2
 81090de:	00db      	lsls	r3, r3, #3
 81090e0:	1a9b      	subs	r3, r3, r2
 81090e2:	009b      	lsls	r3, r3, #2
 81090e4:	3338      	adds	r3, #56	; 0x38
 81090e6:	687a      	ldr	r2, [r7, #4]
 81090e8:	4413      	add	r3, r2
 81090ea:	3304      	adds	r3, #4
 81090ec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 81090ee:	68fb      	ldr	r3, [r7, #12]
 81090f0:	2201      	movs	r2, #1
 81090f2:	705a      	strb	r2, [r3, #1]
 81090f4:	e00d      	b.n	8109112 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 81090f6:	78fa      	ldrb	r2, [r7, #3]
 81090f8:	4613      	mov	r3, r2
 81090fa:	00db      	lsls	r3, r3, #3
 81090fc:	1a9b      	subs	r3, r3, r2
 81090fe:	009b      	lsls	r3, r3, #2
 8109100:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8109104:	687a      	ldr	r2, [r7, #4]
 8109106:	4413      	add	r3, r2
 8109108:	3304      	adds	r3, #4
 810910a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 810910c:	68fb      	ldr	r3, [r7, #12]
 810910e:	2200      	movs	r2, #0
 8109110:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8109112:	68fb      	ldr	r3, [r7, #12]
 8109114:	2201      	movs	r2, #1
 8109116:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8109118:	78fb      	ldrb	r3, [r7, #3]
 810911a:	f003 030f 	and.w	r3, r3, #15
 810911e:	b2da      	uxtb	r2, r3
 8109120:	68fb      	ldr	r3, [r7, #12]
 8109122:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8109124:	687b      	ldr	r3, [r7, #4]
 8109126:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 810912a:	2b01      	cmp	r3, #1
 810912c:	d101      	bne.n	8109132 <HAL_PCD_EP_SetStall+0x82>
 810912e:	2302      	movs	r3, #2
 8109130:	e01e      	b.n	8109170 <HAL_PCD_EP_SetStall+0xc0>
 8109132:	687b      	ldr	r3, [r7, #4]
 8109134:	2201      	movs	r2, #1
 8109136:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 810913a:	687b      	ldr	r3, [r7, #4]
 810913c:	681b      	ldr	r3, [r3, #0]
 810913e:	68f9      	ldr	r1, [r7, #12]
 8109140:	4618      	mov	r0, r3
 8109142:	f009 fdc2 	bl	8112cca <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8109146:	78fb      	ldrb	r3, [r7, #3]
 8109148:	f003 030f 	and.w	r3, r3, #15
 810914c:	2b00      	cmp	r3, #0
 810914e:	d10a      	bne.n	8109166 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8109150:	687b      	ldr	r3, [r7, #4]
 8109152:	6818      	ldr	r0, [r3, #0]
 8109154:	687b      	ldr	r3, [r7, #4]
 8109156:	691b      	ldr	r3, [r3, #16]
 8109158:	b2d9      	uxtb	r1, r3
 810915a:	687b      	ldr	r3, [r7, #4]
 810915c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8109160:	461a      	mov	r2, r3
 8109162:	f009 ffb3 	bl	81130cc <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8109166:	687b      	ldr	r3, [r7, #4]
 8109168:	2200      	movs	r2, #0
 810916a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 810916e:	2300      	movs	r3, #0
}
 8109170:	4618      	mov	r0, r3
 8109172:	3710      	adds	r7, #16
 8109174:	46bd      	mov	sp, r7
 8109176:	bd80      	pop	{r7, pc}

08109178 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8109178:	b580      	push	{r7, lr}
 810917a:	b084      	sub	sp, #16
 810917c:	af00      	add	r7, sp, #0
 810917e:	6078      	str	r0, [r7, #4]
 8109180:	460b      	mov	r3, r1
 8109182:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8109184:	78fb      	ldrb	r3, [r7, #3]
 8109186:	f003 020f 	and.w	r2, r3, #15
 810918a:	687b      	ldr	r3, [r7, #4]
 810918c:	685b      	ldr	r3, [r3, #4]
 810918e:	429a      	cmp	r2, r3
 8109190:	d901      	bls.n	8109196 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8109192:	2301      	movs	r3, #1
 8109194:	e042      	b.n	810921c <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8109196:	f997 3003 	ldrsb.w	r3, [r7, #3]
 810919a:	2b00      	cmp	r3, #0
 810919c:	da0f      	bge.n	81091be <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 810919e:	78fb      	ldrb	r3, [r7, #3]
 81091a0:	f003 020f 	and.w	r2, r3, #15
 81091a4:	4613      	mov	r3, r2
 81091a6:	00db      	lsls	r3, r3, #3
 81091a8:	1a9b      	subs	r3, r3, r2
 81091aa:	009b      	lsls	r3, r3, #2
 81091ac:	3338      	adds	r3, #56	; 0x38
 81091ae:	687a      	ldr	r2, [r7, #4]
 81091b0:	4413      	add	r3, r2
 81091b2:	3304      	adds	r3, #4
 81091b4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 81091b6:	68fb      	ldr	r3, [r7, #12]
 81091b8:	2201      	movs	r2, #1
 81091ba:	705a      	strb	r2, [r3, #1]
 81091bc:	e00f      	b.n	81091de <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 81091be:	78fb      	ldrb	r3, [r7, #3]
 81091c0:	f003 020f 	and.w	r2, r3, #15
 81091c4:	4613      	mov	r3, r2
 81091c6:	00db      	lsls	r3, r3, #3
 81091c8:	1a9b      	subs	r3, r3, r2
 81091ca:	009b      	lsls	r3, r3, #2
 81091cc:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 81091d0:	687a      	ldr	r2, [r7, #4]
 81091d2:	4413      	add	r3, r2
 81091d4:	3304      	adds	r3, #4
 81091d6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 81091d8:	68fb      	ldr	r3, [r7, #12]
 81091da:	2200      	movs	r2, #0
 81091dc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 81091de:	68fb      	ldr	r3, [r7, #12]
 81091e0:	2200      	movs	r2, #0
 81091e2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 81091e4:	78fb      	ldrb	r3, [r7, #3]
 81091e6:	f003 030f 	and.w	r3, r3, #15
 81091ea:	b2da      	uxtb	r2, r3
 81091ec:	68fb      	ldr	r3, [r7, #12]
 81091ee:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 81091f0:	687b      	ldr	r3, [r7, #4]
 81091f2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 81091f6:	2b01      	cmp	r3, #1
 81091f8:	d101      	bne.n	81091fe <HAL_PCD_EP_ClrStall+0x86>
 81091fa:	2302      	movs	r3, #2
 81091fc:	e00e      	b.n	810921c <HAL_PCD_EP_ClrStall+0xa4>
 81091fe:	687b      	ldr	r3, [r7, #4]
 8109200:	2201      	movs	r2, #1
 8109202:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8109206:	687b      	ldr	r3, [r7, #4]
 8109208:	681b      	ldr	r3, [r3, #0]
 810920a:	68f9      	ldr	r1, [r7, #12]
 810920c:	4618      	mov	r0, r3
 810920e:	f009 fdca 	bl	8112da6 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8109212:	687b      	ldr	r3, [r7, #4]
 8109214:	2200      	movs	r2, #0
 8109216:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 810921a:	2300      	movs	r3, #0
}
 810921c:	4618      	mov	r0, r3
 810921e:	3710      	adds	r7, #16
 8109220:	46bd      	mov	sp, r7
 8109222:	bd80      	pop	{r7, pc}

08109224 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8109224:	b580      	push	{r7, lr}
 8109226:	b08a      	sub	sp, #40	; 0x28
 8109228:	af02      	add	r7, sp, #8
 810922a:	6078      	str	r0, [r7, #4]
 810922c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 810922e:	687b      	ldr	r3, [r7, #4]
 8109230:	681b      	ldr	r3, [r3, #0]
 8109232:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8109234:	697b      	ldr	r3, [r7, #20]
 8109236:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8109238:	683a      	ldr	r2, [r7, #0]
 810923a:	4613      	mov	r3, r2
 810923c:	00db      	lsls	r3, r3, #3
 810923e:	1a9b      	subs	r3, r3, r2
 8109240:	009b      	lsls	r3, r3, #2
 8109242:	3338      	adds	r3, #56	; 0x38
 8109244:	687a      	ldr	r2, [r7, #4]
 8109246:	4413      	add	r3, r2
 8109248:	3304      	adds	r3, #4
 810924a:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 810924c:	68fb      	ldr	r3, [r7, #12]
 810924e:	699a      	ldr	r2, [r3, #24]
 8109250:	68fb      	ldr	r3, [r7, #12]
 8109252:	695b      	ldr	r3, [r3, #20]
 8109254:	429a      	cmp	r2, r3
 8109256:	d901      	bls.n	810925c <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8109258:	2301      	movs	r3, #1
 810925a:	e06c      	b.n	8109336 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 810925c:	68fb      	ldr	r3, [r7, #12]
 810925e:	695a      	ldr	r2, [r3, #20]
 8109260:	68fb      	ldr	r3, [r7, #12]
 8109262:	699b      	ldr	r3, [r3, #24]
 8109264:	1ad3      	subs	r3, r2, r3
 8109266:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8109268:	68fb      	ldr	r3, [r7, #12]
 810926a:	689b      	ldr	r3, [r3, #8]
 810926c:	69fa      	ldr	r2, [r7, #28]
 810926e:	429a      	cmp	r2, r3
 8109270:	d902      	bls.n	8109278 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8109272:	68fb      	ldr	r3, [r7, #12]
 8109274:	689b      	ldr	r3, [r3, #8]
 8109276:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8109278:	69fb      	ldr	r3, [r7, #28]
 810927a:	3303      	adds	r3, #3
 810927c:	089b      	lsrs	r3, r3, #2
 810927e:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8109280:	e02b      	b.n	81092da <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8109282:	68fb      	ldr	r3, [r7, #12]
 8109284:	695a      	ldr	r2, [r3, #20]
 8109286:	68fb      	ldr	r3, [r7, #12]
 8109288:	699b      	ldr	r3, [r3, #24]
 810928a:	1ad3      	subs	r3, r2, r3
 810928c:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 810928e:	68fb      	ldr	r3, [r7, #12]
 8109290:	689b      	ldr	r3, [r3, #8]
 8109292:	69fa      	ldr	r2, [r7, #28]
 8109294:	429a      	cmp	r2, r3
 8109296:	d902      	bls.n	810929e <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8109298:	68fb      	ldr	r3, [r7, #12]
 810929a:	689b      	ldr	r3, [r3, #8]
 810929c:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 810929e:	69fb      	ldr	r3, [r7, #28]
 81092a0:	3303      	adds	r3, #3
 81092a2:	089b      	lsrs	r3, r3, #2
 81092a4:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 81092a6:	68fb      	ldr	r3, [r7, #12]
 81092a8:	68d9      	ldr	r1, [r3, #12]
 81092aa:	683b      	ldr	r3, [r7, #0]
 81092ac:	b2da      	uxtb	r2, r3
 81092ae:	69fb      	ldr	r3, [r7, #28]
 81092b0:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 81092b2:	687b      	ldr	r3, [r7, #4]
 81092b4:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 81092b6:	b2db      	uxtb	r3, r3
 81092b8:	9300      	str	r3, [sp, #0]
 81092ba:	4603      	mov	r3, r0
 81092bc:	6978      	ldr	r0, [r7, #20]
 81092be:	f009 fc6e 	bl	8112b9e <USB_WritePacket>

    ep->xfer_buff  += len;
 81092c2:	68fb      	ldr	r3, [r7, #12]
 81092c4:	68da      	ldr	r2, [r3, #12]
 81092c6:	69fb      	ldr	r3, [r7, #28]
 81092c8:	441a      	add	r2, r3
 81092ca:	68fb      	ldr	r3, [r7, #12]
 81092cc:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 81092ce:	68fb      	ldr	r3, [r7, #12]
 81092d0:	699a      	ldr	r2, [r3, #24]
 81092d2:	69fb      	ldr	r3, [r7, #28]
 81092d4:	441a      	add	r2, r3
 81092d6:	68fb      	ldr	r3, [r7, #12]
 81092d8:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 81092da:	683b      	ldr	r3, [r7, #0]
 81092dc:	015a      	lsls	r2, r3, #5
 81092de:	693b      	ldr	r3, [r7, #16]
 81092e0:	4413      	add	r3, r2
 81092e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 81092e6:	699b      	ldr	r3, [r3, #24]
 81092e8:	b29b      	uxth	r3, r3
 81092ea:	69ba      	ldr	r2, [r7, #24]
 81092ec:	429a      	cmp	r2, r3
 81092ee:	d809      	bhi.n	8109304 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 81092f0:	68fb      	ldr	r3, [r7, #12]
 81092f2:	699a      	ldr	r2, [r3, #24]
 81092f4:	68fb      	ldr	r3, [r7, #12]
 81092f6:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 81092f8:	429a      	cmp	r2, r3
 81092fa:	d203      	bcs.n	8109304 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 81092fc:	68fb      	ldr	r3, [r7, #12]
 81092fe:	695b      	ldr	r3, [r3, #20]
 8109300:	2b00      	cmp	r3, #0
 8109302:	d1be      	bne.n	8109282 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8109304:	68fb      	ldr	r3, [r7, #12]
 8109306:	695a      	ldr	r2, [r3, #20]
 8109308:	68fb      	ldr	r3, [r7, #12]
 810930a:	699b      	ldr	r3, [r3, #24]
 810930c:	429a      	cmp	r2, r3
 810930e:	d811      	bhi.n	8109334 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8109310:	683b      	ldr	r3, [r7, #0]
 8109312:	f003 030f 	and.w	r3, r3, #15
 8109316:	2201      	movs	r2, #1
 8109318:	fa02 f303 	lsl.w	r3, r2, r3
 810931c:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 810931e:	693b      	ldr	r3, [r7, #16]
 8109320:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8109324:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8109326:	68bb      	ldr	r3, [r7, #8]
 8109328:	43db      	mvns	r3, r3
 810932a:	6939      	ldr	r1, [r7, #16]
 810932c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8109330:	4013      	ands	r3, r2
 8109332:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8109334:	2300      	movs	r3, #0
}
 8109336:	4618      	mov	r0, r3
 8109338:	3720      	adds	r7, #32
 810933a:	46bd      	mov	sp, r7
 810933c:	bd80      	pop	{r7, pc}
	...

08109340 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8109340:	b580      	push	{r7, lr}
 8109342:	b086      	sub	sp, #24
 8109344:	af00      	add	r7, sp, #0
 8109346:	6078      	str	r0, [r7, #4]
 8109348:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 810934a:	687b      	ldr	r3, [r7, #4]
 810934c:	681b      	ldr	r3, [r3, #0]
 810934e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8109350:	697b      	ldr	r3, [r7, #20]
 8109352:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8109354:	697b      	ldr	r3, [r7, #20]
 8109356:	333c      	adds	r3, #60	; 0x3c
 8109358:	3304      	adds	r3, #4
 810935a:	681b      	ldr	r3, [r3, #0]
 810935c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 810935e:	683b      	ldr	r3, [r7, #0]
 8109360:	015a      	lsls	r2, r3, #5
 8109362:	693b      	ldr	r3, [r7, #16]
 8109364:	4413      	add	r3, r2
 8109366:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 810936a:	689b      	ldr	r3, [r3, #8]
 810936c:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 810936e:	687b      	ldr	r3, [r7, #4]
 8109370:	691b      	ldr	r3, [r3, #16]
 8109372:	2b01      	cmp	r3, #1
 8109374:	f040 80a0 	bne.w	81094b8 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8109378:	68bb      	ldr	r3, [r7, #8]
 810937a:	f003 0308 	and.w	r3, r3, #8
 810937e:	2b00      	cmp	r3, #0
 8109380:	d015      	beq.n	81093ae <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8109382:	68fb      	ldr	r3, [r7, #12]
 8109384:	4a72      	ldr	r2, [pc, #456]	; (8109550 <PCD_EP_OutXfrComplete_int+0x210>)
 8109386:	4293      	cmp	r3, r2
 8109388:	f240 80dd 	bls.w	8109546 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 810938c:	68bb      	ldr	r3, [r7, #8]
 810938e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8109392:	2b00      	cmp	r3, #0
 8109394:	f000 80d7 	beq.w	8109546 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8109398:	683b      	ldr	r3, [r7, #0]
 810939a:	015a      	lsls	r2, r3, #5
 810939c:	693b      	ldr	r3, [r7, #16]
 810939e:	4413      	add	r3, r2
 81093a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 81093a4:	461a      	mov	r2, r3
 81093a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 81093aa:	6093      	str	r3, [r2, #8]
 81093ac:	e0cb      	b.n	8109546 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 81093ae:	68bb      	ldr	r3, [r7, #8]
 81093b0:	f003 0320 	and.w	r3, r3, #32
 81093b4:	2b00      	cmp	r3, #0
 81093b6:	d009      	beq.n	81093cc <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 81093b8:	683b      	ldr	r3, [r7, #0]
 81093ba:	015a      	lsls	r2, r3, #5
 81093bc:	693b      	ldr	r3, [r7, #16]
 81093be:	4413      	add	r3, r2
 81093c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 81093c4:	461a      	mov	r2, r3
 81093c6:	2320      	movs	r3, #32
 81093c8:	6093      	str	r3, [r2, #8]
 81093ca:	e0bc      	b.n	8109546 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 81093cc:	68bb      	ldr	r3, [r7, #8]
 81093ce:	f003 0328 	and.w	r3, r3, #40	; 0x28
 81093d2:	2b00      	cmp	r3, #0
 81093d4:	f040 80b7 	bne.w	8109546 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 81093d8:	68fb      	ldr	r3, [r7, #12]
 81093da:	4a5d      	ldr	r2, [pc, #372]	; (8109550 <PCD_EP_OutXfrComplete_int+0x210>)
 81093dc:	4293      	cmp	r3, r2
 81093de:	d90f      	bls.n	8109400 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 81093e0:	68bb      	ldr	r3, [r7, #8]
 81093e2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 81093e6:	2b00      	cmp	r3, #0
 81093e8:	d00a      	beq.n	8109400 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 81093ea:	683b      	ldr	r3, [r7, #0]
 81093ec:	015a      	lsls	r2, r3, #5
 81093ee:	693b      	ldr	r3, [r7, #16]
 81093f0:	4413      	add	r3, r2
 81093f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 81093f6:	461a      	mov	r2, r3
 81093f8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 81093fc:	6093      	str	r3, [r2, #8]
 81093fe:	e0a2      	b.n	8109546 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8109400:	6879      	ldr	r1, [r7, #4]
 8109402:	683a      	ldr	r2, [r7, #0]
 8109404:	4613      	mov	r3, r2
 8109406:	00db      	lsls	r3, r3, #3
 8109408:	1a9b      	subs	r3, r3, r2
 810940a:	009b      	lsls	r3, r3, #2
 810940c:	440b      	add	r3, r1
 810940e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8109412:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8109414:	683b      	ldr	r3, [r7, #0]
 8109416:	0159      	lsls	r1, r3, #5
 8109418:	693b      	ldr	r3, [r7, #16]
 810941a:	440b      	add	r3, r1
 810941c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8109420:	691b      	ldr	r3, [r3, #16]
 8109422:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8109426:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8109428:	6878      	ldr	r0, [r7, #4]
 810942a:	683a      	ldr	r2, [r7, #0]
 810942c:	4613      	mov	r3, r2
 810942e:	00db      	lsls	r3, r3, #3
 8109430:	1a9b      	subs	r3, r3, r2
 8109432:	009b      	lsls	r3, r3, #2
 8109434:	4403      	add	r3, r0
 8109436:	f503 7305 	add.w	r3, r3, #532	; 0x214
 810943a:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 810943c:	6879      	ldr	r1, [r7, #4]
 810943e:	683a      	ldr	r2, [r7, #0]
 8109440:	4613      	mov	r3, r2
 8109442:	00db      	lsls	r3, r3, #3
 8109444:	1a9b      	subs	r3, r3, r2
 8109446:	009b      	lsls	r3, r3, #2
 8109448:	440b      	add	r3, r1
 810944a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 810944e:	6819      	ldr	r1, [r3, #0]
 8109450:	6878      	ldr	r0, [r7, #4]
 8109452:	683a      	ldr	r2, [r7, #0]
 8109454:	4613      	mov	r3, r2
 8109456:	00db      	lsls	r3, r3, #3
 8109458:	1a9b      	subs	r3, r3, r2
 810945a:	009b      	lsls	r3, r3, #2
 810945c:	4403      	add	r3, r0
 810945e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8109462:	681b      	ldr	r3, [r3, #0]
 8109464:	4419      	add	r1, r3
 8109466:	6878      	ldr	r0, [r7, #4]
 8109468:	683a      	ldr	r2, [r7, #0]
 810946a:	4613      	mov	r3, r2
 810946c:	00db      	lsls	r3, r3, #3
 810946e:	1a9b      	subs	r3, r3, r2
 8109470:	009b      	lsls	r3, r3, #2
 8109472:	4403      	add	r3, r0
 8109474:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8109478:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 810947a:	683b      	ldr	r3, [r7, #0]
 810947c:	2b00      	cmp	r3, #0
 810947e:	d114      	bne.n	81094aa <PCD_EP_OutXfrComplete_int+0x16a>
 8109480:	6879      	ldr	r1, [r7, #4]
 8109482:	683a      	ldr	r2, [r7, #0]
 8109484:	4613      	mov	r3, r2
 8109486:	00db      	lsls	r3, r3, #3
 8109488:	1a9b      	subs	r3, r3, r2
 810948a:	009b      	lsls	r3, r3, #2
 810948c:	440b      	add	r3, r1
 810948e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8109492:	681b      	ldr	r3, [r3, #0]
 8109494:	2b00      	cmp	r3, #0
 8109496:	d108      	bne.n	81094aa <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8109498:	687b      	ldr	r3, [r7, #4]
 810949a:	6818      	ldr	r0, [r3, #0]
 810949c:	687b      	ldr	r3, [r7, #4]
 810949e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 81094a2:	461a      	mov	r2, r3
 81094a4:	2101      	movs	r1, #1
 81094a6:	f009 fe11 	bl	81130cc <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 81094aa:	683b      	ldr	r3, [r7, #0]
 81094ac:	b2db      	uxtb	r3, r3
 81094ae:	4619      	mov	r1, r3
 81094b0:	6878      	ldr	r0, [r7, #4]
 81094b2:	f00e ffad 	bl	8118410 <HAL_PCD_DataOutStageCallback>
 81094b6:	e046      	b.n	8109546 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 81094b8:	68fb      	ldr	r3, [r7, #12]
 81094ba:	4a26      	ldr	r2, [pc, #152]	; (8109554 <PCD_EP_OutXfrComplete_int+0x214>)
 81094bc:	4293      	cmp	r3, r2
 81094be:	d124      	bne.n	810950a <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 81094c0:	68bb      	ldr	r3, [r7, #8]
 81094c2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 81094c6:	2b00      	cmp	r3, #0
 81094c8:	d00a      	beq.n	81094e0 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 81094ca:	683b      	ldr	r3, [r7, #0]
 81094cc:	015a      	lsls	r2, r3, #5
 81094ce:	693b      	ldr	r3, [r7, #16]
 81094d0:	4413      	add	r3, r2
 81094d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 81094d6:	461a      	mov	r2, r3
 81094d8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 81094dc:	6093      	str	r3, [r2, #8]
 81094de:	e032      	b.n	8109546 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 81094e0:	68bb      	ldr	r3, [r7, #8]
 81094e2:	f003 0320 	and.w	r3, r3, #32
 81094e6:	2b00      	cmp	r3, #0
 81094e8:	d008      	beq.n	81094fc <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 81094ea:	683b      	ldr	r3, [r7, #0]
 81094ec:	015a      	lsls	r2, r3, #5
 81094ee:	693b      	ldr	r3, [r7, #16]
 81094f0:	4413      	add	r3, r2
 81094f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 81094f6:	461a      	mov	r2, r3
 81094f8:	2320      	movs	r3, #32
 81094fa:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 81094fc:	683b      	ldr	r3, [r7, #0]
 81094fe:	b2db      	uxtb	r3, r3
 8109500:	4619      	mov	r1, r3
 8109502:	6878      	ldr	r0, [r7, #4]
 8109504:	f00e ff84 	bl	8118410 <HAL_PCD_DataOutStageCallback>
 8109508:	e01d      	b.n	8109546 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 810950a:	683b      	ldr	r3, [r7, #0]
 810950c:	2b00      	cmp	r3, #0
 810950e:	d114      	bne.n	810953a <PCD_EP_OutXfrComplete_int+0x1fa>
 8109510:	6879      	ldr	r1, [r7, #4]
 8109512:	683a      	ldr	r2, [r7, #0]
 8109514:	4613      	mov	r3, r2
 8109516:	00db      	lsls	r3, r3, #3
 8109518:	1a9b      	subs	r3, r3, r2
 810951a:	009b      	lsls	r3, r3, #2
 810951c:	440b      	add	r3, r1
 810951e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8109522:	681b      	ldr	r3, [r3, #0]
 8109524:	2b00      	cmp	r3, #0
 8109526:	d108      	bne.n	810953a <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8109528:	687b      	ldr	r3, [r7, #4]
 810952a:	6818      	ldr	r0, [r3, #0]
 810952c:	687b      	ldr	r3, [r7, #4]
 810952e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8109532:	461a      	mov	r2, r3
 8109534:	2100      	movs	r1, #0
 8109536:	f009 fdc9 	bl	81130cc <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 810953a:	683b      	ldr	r3, [r7, #0]
 810953c:	b2db      	uxtb	r3, r3
 810953e:	4619      	mov	r1, r3
 8109540:	6878      	ldr	r0, [r7, #4]
 8109542:	f00e ff65 	bl	8118410 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8109546:	2300      	movs	r3, #0
}
 8109548:	4618      	mov	r0, r3
 810954a:	3718      	adds	r7, #24
 810954c:	46bd      	mov	sp, r7
 810954e:	bd80      	pop	{r7, pc}
 8109550:	4f54300a 	.word	0x4f54300a
 8109554:	4f54310a 	.word	0x4f54310a

08109558 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8109558:	b580      	push	{r7, lr}
 810955a:	b086      	sub	sp, #24
 810955c:	af00      	add	r7, sp, #0
 810955e:	6078      	str	r0, [r7, #4]
 8109560:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8109562:	687b      	ldr	r3, [r7, #4]
 8109564:	681b      	ldr	r3, [r3, #0]
 8109566:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8109568:	697b      	ldr	r3, [r7, #20]
 810956a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 810956c:	697b      	ldr	r3, [r7, #20]
 810956e:	333c      	adds	r3, #60	; 0x3c
 8109570:	3304      	adds	r3, #4
 8109572:	681b      	ldr	r3, [r3, #0]
 8109574:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8109576:	683b      	ldr	r3, [r7, #0]
 8109578:	015a      	lsls	r2, r3, #5
 810957a:	693b      	ldr	r3, [r7, #16]
 810957c:	4413      	add	r3, r2
 810957e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8109582:	689b      	ldr	r3, [r3, #8]
 8109584:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8109586:	68fb      	ldr	r3, [r7, #12]
 8109588:	4a15      	ldr	r2, [pc, #84]	; (81095e0 <PCD_EP_OutSetupPacket_int+0x88>)
 810958a:	4293      	cmp	r3, r2
 810958c:	d90e      	bls.n	81095ac <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 810958e:	68bb      	ldr	r3, [r7, #8]
 8109590:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8109594:	2b00      	cmp	r3, #0
 8109596:	d009      	beq.n	81095ac <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8109598:	683b      	ldr	r3, [r7, #0]
 810959a:	015a      	lsls	r2, r3, #5
 810959c:	693b      	ldr	r3, [r7, #16]
 810959e:	4413      	add	r3, r2
 81095a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 81095a4:	461a      	mov	r2, r3
 81095a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 81095aa:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 81095ac:	6878      	ldr	r0, [r7, #4]
 81095ae:	f00e ff1d 	bl	81183ec <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 81095b2:	68fb      	ldr	r3, [r7, #12]
 81095b4:	4a0a      	ldr	r2, [pc, #40]	; (81095e0 <PCD_EP_OutSetupPacket_int+0x88>)
 81095b6:	4293      	cmp	r3, r2
 81095b8:	d90c      	bls.n	81095d4 <PCD_EP_OutSetupPacket_int+0x7c>
 81095ba:	687b      	ldr	r3, [r7, #4]
 81095bc:	691b      	ldr	r3, [r3, #16]
 81095be:	2b01      	cmp	r3, #1
 81095c0:	d108      	bne.n	81095d4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 81095c2:	687b      	ldr	r3, [r7, #4]
 81095c4:	6818      	ldr	r0, [r3, #0]
 81095c6:	687b      	ldr	r3, [r7, #4]
 81095c8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 81095cc:	461a      	mov	r2, r3
 81095ce:	2101      	movs	r1, #1
 81095d0:	f009 fd7c 	bl	81130cc <USB_EP0_OutStart>
  }

  return HAL_OK;
 81095d4:	2300      	movs	r3, #0
}
 81095d6:	4618      	mov	r0, r3
 81095d8:	3718      	adds	r7, #24
 81095da:	46bd      	mov	sp, r7
 81095dc:	bd80      	pop	{r7, pc}
 81095de:	bf00      	nop
 81095e0:	4f54300a 	.word	0x4f54300a

081095e4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 81095e4:	b480      	push	{r7}
 81095e6:	b085      	sub	sp, #20
 81095e8:	af00      	add	r7, sp, #0
 81095ea:	6078      	str	r0, [r7, #4]
 81095ec:	460b      	mov	r3, r1
 81095ee:	70fb      	strb	r3, [r7, #3]
 81095f0:	4613      	mov	r3, r2
 81095f2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 81095f4:	687b      	ldr	r3, [r7, #4]
 81095f6:	681b      	ldr	r3, [r3, #0]
 81095f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81095fa:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 81095fc:	78fb      	ldrb	r3, [r7, #3]
 81095fe:	2b00      	cmp	r3, #0
 8109600:	d107      	bne.n	8109612 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8109602:	883b      	ldrh	r3, [r7, #0]
 8109604:	0419      	lsls	r1, r3, #16
 8109606:	687b      	ldr	r3, [r7, #4]
 8109608:	681b      	ldr	r3, [r3, #0]
 810960a:	68ba      	ldr	r2, [r7, #8]
 810960c:	430a      	orrs	r2, r1
 810960e:	629a      	str	r2, [r3, #40]	; 0x28
 8109610:	e028      	b.n	8109664 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8109612:	687b      	ldr	r3, [r7, #4]
 8109614:	681b      	ldr	r3, [r3, #0]
 8109616:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8109618:	0c1b      	lsrs	r3, r3, #16
 810961a:	68ba      	ldr	r2, [r7, #8]
 810961c:	4413      	add	r3, r2
 810961e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8109620:	2300      	movs	r3, #0
 8109622:	73fb      	strb	r3, [r7, #15]
 8109624:	e00d      	b.n	8109642 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8109626:	687b      	ldr	r3, [r7, #4]
 8109628:	681a      	ldr	r2, [r3, #0]
 810962a:	7bfb      	ldrb	r3, [r7, #15]
 810962c:	3340      	adds	r3, #64	; 0x40
 810962e:	009b      	lsls	r3, r3, #2
 8109630:	4413      	add	r3, r2
 8109632:	685b      	ldr	r3, [r3, #4]
 8109634:	0c1b      	lsrs	r3, r3, #16
 8109636:	68ba      	ldr	r2, [r7, #8]
 8109638:	4413      	add	r3, r2
 810963a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 810963c:	7bfb      	ldrb	r3, [r7, #15]
 810963e:	3301      	adds	r3, #1
 8109640:	73fb      	strb	r3, [r7, #15]
 8109642:	7bfa      	ldrb	r2, [r7, #15]
 8109644:	78fb      	ldrb	r3, [r7, #3]
 8109646:	3b01      	subs	r3, #1
 8109648:	429a      	cmp	r2, r3
 810964a:	d3ec      	bcc.n	8109626 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 810964c:	883b      	ldrh	r3, [r7, #0]
 810964e:	0418      	lsls	r0, r3, #16
 8109650:	687b      	ldr	r3, [r7, #4]
 8109652:	6819      	ldr	r1, [r3, #0]
 8109654:	78fb      	ldrb	r3, [r7, #3]
 8109656:	3b01      	subs	r3, #1
 8109658:	68ba      	ldr	r2, [r7, #8]
 810965a:	4302      	orrs	r2, r0
 810965c:	3340      	adds	r3, #64	; 0x40
 810965e:	009b      	lsls	r3, r3, #2
 8109660:	440b      	add	r3, r1
 8109662:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8109664:	2300      	movs	r3, #0
}
 8109666:	4618      	mov	r0, r3
 8109668:	3714      	adds	r7, #20
 810966a:	46bd      	mov	sp, r7
 810966c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109670:	4770      	bx	lr

08109672 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8109672:	b480      	push	{r7}
 8109674:	b083      	sub	sp, #12
 8109676:	af00      	add	r7, sp, #0
 8109678:	6078      	str	r0, [r7, #4]
 810967a:	460b      	mov	r3, r1
 810967c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 810967e:	687b      	ldr	r3, [r7, #4]
 8109680:	681b      	ldr	r3, [r3, #0]
 8109682:	887a      	ldrh	r2, [r7, #2]
 8109684:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8109686:	2300      	movs	r3, #0
}
 8109688:	4618      	mov	r0, r3
 810968a:	370c      	adds	r7, #12
 810968c:	46bd      	mov	sp, r7
 810968e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109692:	4770      	bx	lr

08109694 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8109694:	b480      	push	{r7}
 8109696:	b085      	sub	sp, #20
 8109698:	af00      	add	r7, sp, #0
 810969a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 810969c:	687b      	ldr	r3, [r7, #4]
 810969e:	681b      	ldr	r3, [r3, #0]
 81096a0:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 81096a2:	687b      	ldr	r3, [r7, #4]
 81096a4:	2201      	movs	r2, #1
 81096a6:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 81096aa:	687b      	ldr	r3, [r7, #4]
 81096ac:	2200      	movs	r2, #0
 81096ae:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 81096b2:	68fb      	ldr	r3, [r7, #12]
 81096b4:	699b      	ldr	r3, [r3, #24]
 81096b6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 81096ba:	68fb      	ldr	r3, [r7, #12]
 81096bc:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 81096be:	68fb      	ldr	r3, [r7, #12]
 81096c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81096c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 81096c6:	f043 0303 	orr.w	r3, r3, #3
 81096ca:	68fa      	ldr	r2, [r7, #12]
 81096cc:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 81096ce:	2300      	movs	r3, #0
}
 81096d0:	4618      	mov	r0, r3
 81096d2:	3714      	adds	r7, #20
 81096d4:	46bd      	mov	sp, r7
 81096d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81096da:	4770      	bx	lr

081096dc <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 81096dc:	b480      	push	{r7}
 81096de:	b083      	sub	sp, #12
 81096e0:	af00      	add	r7, sp, #0
 81096e2:	6078      	str	r0, [r7, #4]
 81096e4:	460b      	mov	r3, r1
 81096e6:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 81096e8:	bf00      	nop
 81096ea:	370c      	adds	r7, #12
 81096ec:	46bd      	mov	sp, r7
 81096ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 81096f2:	4770      	bx	lr

081096f4 <HAL_PWREx_EnterSTOPMode>:
  *            @arg PWR_D2_DOMAIN : Enter D2 Domain to DSTOP mode.
  *            @arg PWR_D3_DOMAIN : Enter D3/SRD Domain to DSTOP mode.
  * @retval None.
  */
void HAL_PWREx_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry, uint32_t Domain)
{
 81096f4:	b580      	push	{r7, lr}
 81096f6:	b084      	sub	sp, #16
 81096f8:	af00      	add	r7, sp, #0
 81096fa:	60f8      	str	r0, [r7, #12]
 81096fc:	460b      	mov	r3, r1
 81096fe:	607a      	str	r2, [r7, #4]
 8109700:	72fb      	strb	r3, [r7, #11]
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));
  assert_param (IS_PWR_DOMAIN (Domain));

  /* Select the regulator state in Stop mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 8109702:	4b37      	ldr	r3, [pc, #220]	; (81097e0 <HAL_PWREx_EnterSTOPMode+0xec>)
 8109704:	681b      	ldr	r3, [r3, #0]
 8109706:	f023 0201 	bic.w	r2, r3, #1
 810970a:	4935      	ldr	r1, [pc, #212]	; (81097e0 <HAL_PWREx_EnterSTOPMode+0xec>)
 810970c:	68fb      	ldr	r3, [r7, #12]
 810970e:	4313      	orrs	r3, r2
 8109710:	600b      	str	r3, [r1, #0]

  /* Select the domain Power Down DeepSleep */
  if (Domain == PWR_D1_DOMAIN)
 8109712:	687b      	ldr	r3, [r7, #4]
 8109714:	2b00      	cmp	r3, #0
 8109716:	d123      	bne.n	8109760 <HAL_PWREx_EnterSTOPMode+0x6c>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM7_CPUID)
 8109718:	f7fa fde6 	bl	81042e8 <HAL_GetCurrentCPUID>
 810971c:	4603      	mov	r3, r0
 810971e:	2b03      	cmp	r3, #3
 8109720:	d158      	bne.n	81097d4 <HAL_PWREx_EnterSTOPMode+0xe0>
      return;
    }
#endif /* defined (DUAL_CORE) */

    /* Keep DSTOP mode when D1/CD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D1);
 8109722:	4b2f      	ldr	r3, [pc, #188]	; (81097e0 <HAL_PWREx_EnterSTOPMode+0xec>)
 8109724:	691b      	ldr	r3, [r3, #16]
 8109726:	4a2e      	ldr	r2, [pc, #184]	; (81097e0 <HAL_PWREx_EnterSTOPMode+0xec>)
 8109728:	f023 0301 	bic.w	r3, r3, #1
 810972c:	6113      	str	r3, [r2, #16]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 810972e:	4b2d      	ldr	r3, [pc, #180]	; (81097e4 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8109730:	691b      	ldr	r3, [r3, #16]
 8109732:	4a2c      	ldr	r2, [pc, #176]	; (81097e4 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8109734:	f043 0304 	orr.w	r3, r3, #4
 8109738:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 810973a:	f3bf 8f4f 	dsb	sy
}
 810973e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8109740:	f3bf 8f6f 	isb	sy
}
 8109744:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8109746:	7afb      	ldrb	r3, [r7, #11]
 8109748:	2b01      	cmp	r3, #1
 810974a:	d101      	bne.n	8109750 <HAL_PWREx_EnterSTOPMode+0x5c>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 810974c:	bf30      	wfi
 810974e:	e000      	b.n	8109752 <HAL_PWREx_EnterSTOPMode+0x5e>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8109750:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8109752:	4b24      	ldr	r3, [pc, #144]	; (81097e4 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8109754:	691b      	ldr	r3, [r3, #16]
 8109756:	4a23      	ldr	r2, [pc, #140]	; (81097e4 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8109758:	f023 0304 	bic.w	r3, r3, #4
 810975c:	6113      	str	r3, [r2, #16]
 810975e:	e03c      	b.n	81097da <HAL_PWREx_EnterSTOPMode+0xe6>
  }
#if defined (PWR_CPUCR_PDDS_D2)
  else if (Domain == PWR_D2_DOMAIN)
 8109760:	687b      	ldr	r3, [r7, #4]
 8109762:	2b01      	cmp	r3, #1
 8109764:	d123      	bne.n	81097ae <HAL_PWREx_EnterSTOPMode+0xba>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM4_CPUID)
 8109766:	f7fa fdbf 	bl	81042e8 <HAL_GetCurrentCPUID>
 810976a:	4603      	mov	r3, r0
 810976c:	2b01      	cmp	r3, #1
 810976e:	d133      	bne.n	81097d8 <HAL_PWREx_EnterSTOPMode+0xe4>
      */
      return;
    }

    /* Keep DSTOP mode when D2 domain enters Deepsleep */
    CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D2);
 8109770:	4b1b      	ldr	r3, [pc, #108]	; (81097e0 <HAL_PWREx_EnterSTOPMode+0xec>)
 8109772:	695b      	ldr	r3, [r3, #20]
 8109774:	4a1a      	ldr	r2, [pc, #104]	; (81097e0 <HAL_PWREx_EnterSTOPMode+0xec>)
 8109776:	f023 0302 	bic.w	r3, r3, #2
 810977a:	6153      	str	r3, [r2, #20]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 810977c:	4b19      	ldr	r3, [pc, #100]	; (81097e4 <HAL_PWREx_EnterSTOPMode+0xf0>)
 810977e:	691b      	ldr	r3, [r3, #16]
 8109780:	4a18      	ldr	r2, [pc, #96]	; (81097e4 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8109782:	f043 0304 	orr.w	r3, r3, #4
 8109786:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8109788:	f3bf 8f4f 	dsb	sy
}
 810978c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 810978e:	f3bf 8f6f 	isb	sy
}
 8109792:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8109794:	7afb      	ldrb	r3, [r7, #11]
 8109796:	2b01      	cmp	r3, #1
 8109798:	d101      	bne.n	810979e <HAL_PWREx_EnterSTOPMode+0xaa>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 810979a:	bf30      	wfi
 810979c:	e000      	b.n	81097a0 <HAL_PWREx_EnterSTOPMode+0xac>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 810979e:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 81097a0:	4b10      	ldr	r3, [pc, #64]	; (81097e4 <HAL_PWREx_EnterSTOPMode+0xf0>)
 81097a2:	691b      	ldr	r3, [r3, #16]
 81097a4:	4a0f      	ldr	r2, [pc, #60]	; (81097e4 <HAL_PWREx_EnterSTOPMode+0xf0>)
 81097a6:	f023 0304 	bic.w	r3, r3, #4
 81097aa:	6113      	str	r3, [r2, #16]
 81097ac:	e015      	b.n	81097da <HAL_PWREx_EnterSTOPMode+0xe6>
#endif /* defined (PWR_CPUCR_PDDS_D2) */
  else
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
 81097ae:	f7fa fd9b 	bl	81042e8 <HAL_GetCurrentCPUID>
 81097b2:	4603      	mov	r3, r0
 81097b4:	2b03      	cmp	r3, #3
 81097b6:	d106      	bne.n	81097c6 <HAL_PWREx_EnterSTOPMode+0xd2>
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
 81097b8:	4b09      	ldr	r3, [pc, #36]	; (81097e0 <HAL_PWREx_EnterSTOPMode+0xec>)
 81097ba:	691b      	ldr	r3, [r3, #16]
 81097bc:	4a08      	ldr	r2, [pc, #32]	; (81097e0 <HAL_PWREx_EnterSTOPMode+0xec>)
 81097be:	f023 0304 	bic.w	r3, r3, #4
 81097c2:	6113      	str	r3, [r2, #16]
 81097c4:	e009      	b.n	81097da <HAL_PWREx_EnterSTOPMode+0xe6>
    }
    else
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D3);
 81097c6:	4b06      	ldr	r3, [pc, #24]	; (81097e0 <HAL_PWREx_EnterSTOPMode+0xec>)
 81097c8:	695b      	ldr	r3, [r3, #20]
 81097ca:	4a05      	ldr	r2, [pc, #20]	; (81097e0 <HAL_PWREx_EnterSTOPMode+0xec>)
 81097cc:	f023 0304 	bic.w	r3, r3, #4
 81097d0:	6153      	str	r3, [r2, #20]
 81097d2:	e002      	b.n	81097da <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 81097d4:	bf00      	nop
 81097d6:	e000      	b.n	81097da <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 81097d8:	bf00      	nop
#else
    /* Keep DSTOP mode when D3/SRD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
#endif  /* defined (DUAL_CORE) */
  }
}
 81097da:	3710      	adds	r7, #16
 81097dc:	46bd      	mov	sp, r7
 81097de:	bd80      	pop	{r7, pc}
 81097e0:	58024800 	.word	0x58024800
 81097e4:	e000ed00 	.word	0xe000ed00

081097e8 <HAL_PWREx_ClearPendingEvent>:
  *         enter low power mode using Wait For Event request.
  * @note   Cortex-M7 must be in CRUN mode when calling this API by Cortex-M4.
  * @retval None.
  */
void HAL_PWREx_ClearPendingEvent (void)
{
 81097e8:	b580      	push	{r7, lr}
 81097ea:	af00      	add	r7, sp, #0
#if defined (DUAL_CORE)
  /* Check the current Core */
  if (HAL_GetCurrentCPUID () == CM7_CPUID)
 81097ec:	f7fa fd7c 	bl	81042e8 <HAL_GetCurrentCPUID>
 81097f0:	4603      	mov	r3, r0
 81097f2:	2b03      	cmp	r3, #3
 81097f4:	d101      	bne.n	81097fa <HAL_PWREx_ClearPendingEvent+0x12>
  {
    __WFE ();
 81097f6:	bf20      	wfe
    __WFE ();
  }
#else
  __WFE ();
#endif /* defined (DUAL_CORE) */
}
 81097f8:	e001      	b.n	81097fe <HAL_PWREx_ClearPendingEvent+0x16>
    __SEV ();
 81097fa:	bf40      	sev
    __WFE ();
 81097fc:	bf20      	wfe
}
 81097fe:	bf00      	nop
 8109800:	bd80      	pop	{r7, pc}
	...

08109804 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8109804:	b480      	push	{r7}
 8109806:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8109808:	4b05      	ldr	r3, [pc, #20]	; (8109820 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 810980a:	68db      	ldr	r3, [r3, #12]
 810980c:	4a04      	ldr	r2, [pc, #16]	; (8109820 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 810980e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8109812:	60d3      	str	r3, [r2, #12]
}
 8109814:	bf00      	nop
 8109816:	46bd      	mov	sp, r7
 8109818:	f85d 7b04 	ldr.w	r7, [sp], #4
 810981c:	4770      	bx	lr
 810981e:	bf00      	nop
 8109820:	58024800 	.word	0x58024800

08109824 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8109824:	b480      	push	{r7}
 8109826:	b089      	sub	sp, #36	; 0x24
 8109828:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 810982a:	4bb3      	ldr	r3, [pc, #716]	; (8109af8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810982c:	691b      	ldr	r3, [r3, #16]
 810982e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8109832:	2b18      	cmp	r3, #24
 8109834:	f200 8155 	bhi.w	8109ae2 <HAL_RCC_GetSysClockFreq+0x2be>
 8109838:	a201      	add	r2, pc, #4	; (adr r2, 8109840 <HAL_RCC_GetSysClockFreq+0x1c>)
 810983a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810983e:	bf00      	nop
 8109840:	081098a5 	.word	0x081098a5
 8109844:	08109ae3 	.word	0x08109ae3
 8109848:	08109ae3 	.word	0x08109ae3
 810984c:	08109ae3 	.word	0x08109ae3
 8109850:	08109ae3 	.word	0x08109ae3
 8109854:	08109ae3 	.word	0x08109ae3
 8109858:	08109ae3 	.word	0x08109ae3
 810985c:	08109ae3 	.word	0x08109ae3
 8109860:	081098cb 	.word	0x081098cb
 8109864:	08109ae3 	.word	0x08109ae3
 8109868:	08109ae3 	.word	0x08109ae3
 810986c:	08109ae3 	.word	0x08109ae3
 8109870:	08109ae3 	.word	0x08109ae3
 8109874:	08109ae3 	.word	0x08109ae3
 8109878:	08109ae3 	.word	0x08109ae3
 810987c:	08109ae3 	.word	0x08109ae3
 8109880:	081098d1 	.word	0x081098d1
 8109884:	08109ae3 	.word	0x08109ae3
 8109888:	08109ae3 	.word	0x08109ae3
 810988c:	08109ae3 	.word	0x08109ae3
 8109890:	08109ae3 	.word	0x08109ae3
 8109894:	08109ae3 	.word	0x08109ae3
 8109898:	08109ae3 	.word	0x08109ae3
 810989c:	08109ae3 	.word	0x08109ae3
 81098a0:	081098d7 	.word	0x081098d7
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 81098a4:	4b94      	ldr	r3, [pc, #592]	; (8109af8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81098a6:	681b      	ldr	r3, [r3, #0]
 81098a8:	f003 0320 	and.w	r3, r3, #32
 81098ac:	2b00      	cmp	r3, #0
 81098ae:	d009      	beq.n	81098c4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 81098b0:	4b91      	ldr	r3, [pc, #580]	; (8109af8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81098b2:	681b      	ldr	r3, [r3, #0]
 81098b4:	08db      	lsrs	r3, r3, #3
 81098b6:	f003 0303 	and.w	r3, r3, #3
 81098ba:	4a90      	ldr	r2, [pc, #576]	; (8109afc <HAL_RCC_GetSysClockFreq+0x2d8>)
 81098bc:	fa22 f303 	lsr.w	r3, r2, r3
 81098c0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 81098c2:	e111      	b.n	8109ae8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 81098c4:	4b8d      	ldr	r3, [pc, #564]	; (8109afc <HAL_RCC_GetSysClockFreq+0x2d8>)
 81098c6:	61bb      	str	r3, [r7, #24]
    break;
 81098c8:	e10e      	b.n	8109ae8 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 81098ca:	4b8d      	ldr	r3, [pc, #564]	; (8109b00 <HAL_RCC_GetSysClockFreq+0x2dc>)
 81098cc:	61bb      	str	r3, [r7, #24]
    break;
 81098ce:	e10b      	b.n	8109ae8 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 81098d0:	4b8c      	ldr	r3, [pc, #560]	; (8109b04 <HAL_RCC_GetSysClockFreq+0x2e0>)
 81098d2:	61bb      	str	r3, [r7, #24]
    break;
 81098d4:	e108      	b.n	8109ae8 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 81098d6:	4b88      	ldr	r3, [pc, #544]	; (8109af8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81098d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81098da:	f003 0303 	and.w	r3, r3, #3
 81098de:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 81098e0:	4b85      	ldr	r3, [pc, #532]	; (8109af8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81098e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81098e4:	091b      	lsrs	r3, r3, #4
 81098e6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 81098ea:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 81098ec:	4b82      	ldr	r3, [pc, #520]	; (8109af8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81098ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81098f0:	f003 0301 	and.w	r3, r3, #1
 81098f4:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 81098f6:	4b80      	ldr	r3, [pc, #512]	; (8109af8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81098f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 81098fa:	08db      	lsrs	r3, r3, #3
 81098fc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8109900:	68fa      	ldr	r2, [r7, #12]
 8109902:	fb02 f303 	mul.w	r3, r2, r3
 8109906:	ee07 3a90 	vmov	s15, r3
 810990a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810990e:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8109912:	693b      	ldr	r3, [r7, #16]
 8109914:	2b00      	cmp	r3, #0
 8109916:	f000 80e1 	beq.w	8109adc <HAL_RCC_GetSysClockFreq+0x2b8>
 810991a:	697b      	ldr	r3, [r7, #20]
 810991c:	2b02      	cmp	r3, #2
 810991e:	f000 8083 	beq.w	8109a28 <HAL_RCC_GetSysClockFreq+0x204>
 8109922:	697b      	ldr	r3, [r7, #20]
 8109924:	2b02      	cmp	r3, #2
 8109926:	f200 80a1 	bhi.w	8109a6c <HAL_RCC_GetSysClockFreq+0x248>
 810992a:	697b      	ldr	r3, [r7, #20]
 810992c:	2b00      	cmp	r3, #0
 810992e:	d003      	beq.n	8109938 <HAL_RCC_GetSysClockFreq+0x114>
 8109930:	697b      	ldr	r3, [r7, #20]
 8109932:	2b01      	cmp	r3, #1
 8109934:	d056      	beq.n	81099e4 <HAL_RCC_GetSysClockFreq+0x1c0>
 8109936:	e099      	b.n	8109a6c <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8109938:	4b6f      	ldr	r3, [pc, #444]	; (8109af8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810993a:	681b      	ldr	r3, [r3, #0]
 810993c:	f003 0320 	and.w	r3, r3, #32
 8109940:	2b00      	cmp	r3, #0
 8109942:	d02d      	beq.n	81099a0 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8109944:	4b6c      	ldr	r3, [pc, #432]	; (8109af8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8109946:	681b      	ldr	r3, [r3, #0]
 8109948:	08db      	lsrs	r3, r3, #3
 810994a:	f003 0303 	and.w	r3, r3, #3
 810994e:	4a6b      	ldr	r2, [pc, #428]	; (8109afc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8109950:	fa22 f303 	lsr.w	r3, r2, r3
 8109954:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8109956:	687b      	ldr	r3, [r7, #4]
 8109958:	ee07 3a90 	vmov	s15, r3
 810995c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8109960:	693b      	ldr	r3, [r7, #16]
 8109962:	ee07 3a90 	vmov	s15, r3
 8109966:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810996a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810996e:	4b62      	ldr	r3, [pc, #392]	; (8109af8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8109970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8109972:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8109976:	ee07 3a90 	vmov	s15, r3
 810997a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810997e:	ed97 6a02 	vldr	s12, [r7, #8]
 8109982:	eddf 5a61 	vldr	s11, [pc, #388]	; 8109b08 <HAL_RCC_GetSysClockFreq+0x2e4>
 8109986:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810998a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810998e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8109992:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8109996:	ee67 7a27 	vmul.f32	s15, s14, s15
 810999a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 810999e:	e087      	b.n	8109ab0 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 81099a0:	693b      	ldr	r3, [r7, #16]
 81099a2:	ee07 3a90 	vmov	s15, r3
 81099a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81099aa:	eddf 6a58 	vldr	s13, [pc, #352]	; 8109b0c <HAL_RCC_GetSysClockFreq+0x2e8>
 81099ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81099b2:	4b51      	ldr	r3, [pc, #324]	; (8109af8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81099b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81099b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81099ba:	ee07 3a90 	vmov	s15, r3
 81099be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81099c2:	ed97 6a02 	vldr	s12, [r7, #8]
 81099c6:	eddf 5a50 	vldr	s11, [pc, #320]	; 8109b08 <HAL_RCC_GetSysClockFreq+0x2e4>
 81099ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81099ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81099d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81099d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81099da:	ee67 7a27 	vmul.f32	s15, s14, s15
 81099de:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 81099e2:	e065      	b.n	8109ab0 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 81099e4:	693b      	ldr	r3, [r7, #16]
 81099e6:	ee07 3a90 	vmov	s15, r3
 81099ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81099ee:	eddf 6a48 	vldr	s13, [pc, #288]	; 8109b10 <HAL_RCC_GetSysClockFreq+0x2ec>
 81099f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81099f6:	4b40      	ldr	r3, [pc, #256]	; (8109af8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81099f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81099fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81099fe:	ee07 3a90 	vmov	s15, r3
 8109a02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8109a06:	ed97 6a02 	vldr	s12, [r7, #8]
 8109a0a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8109b08 <HAL_RCC_GetSysClockFreq+0x2e4>
 8109a0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8109a12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8109a16:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8109a1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8109a1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8109a22:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8109a26:	e043      	b.n	8109ab0 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8109a28:	693b      	ldr	r3, [r7, #16]
 8109a2a:	ee07 3a90 	vmov	s15, r3
 8109a2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8109a32:	eddf 6a38 	vldr	s13, [pc, #224]	; 8109b14 <HAL_RCC_GetSysClockFreq+0x2f0>
 8109a36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8109a3a:	4b2f      	ldr	r3, [pc, #188]	; (8109af8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8109a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8109a3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8109a42:	ee07 3a90 	vmov	s15, r3
 8109a46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8109a4a:	ed97 6a02 	vldr	s12, [r7, #8]
 8109a4e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8109b08 <HAL_RCC_GetSysClockFreq+0x2e4>
 8109a52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8109a56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8109a5a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8109a5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8109a62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8109a66:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8109a6a:	e021      	b.n	8109ab0 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8109a6c:	693b      	ldr	r3, [r7, #16]
 8109a6e:	ee07 3a90 	vmov	s15, r3
 8109a72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8109a76:	eddf 6a26 	vldr	s13, [pc, #152]	; 8109b10 <HAL_RCC_GetSysClockFreq+0x2ec>
 8109a7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8109a7e:	4b1e      	ldr	r3, [pc, #120]	; (8109af8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8109a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8109a82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8109a86:	ee07 3a90 	vmov	s15, r3
 8109a8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8109a8e:	ed97 6a02 	vldr	s12, [r7, #8]
 8109a92:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8109b08 <HAL_RCC_GetSysClockFreq+0x2e4>
 8109a96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8109a9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8109a9e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8109aa2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8109aa6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8109aaa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8109aae:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8109ab0:	4b11      	ldr	r3, [pc, #68]	; (8109af8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8109ab2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8109ab4:	0a5b      	lsrs	r3, r3, #9
 8109ab6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8109aba:	3301      	adds	r3, #1
 8109abc:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8109abe:	683b      	ldr	r3, [r7, #0]
 8109ac0:	ee07 3a90 	vmov	s15, r3
 8109ac4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8109ac8:	edd7 6a07 	vldr	s13, [r7, #28]
 8109acc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8109ad0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8109ad4:	ee17 3a90 	vmov	r3, s15
 8109ad8:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8109ada:	e005      	b.n	8109ae8 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8109adc:	2300      	movs	r3, #0
 8109ade:	61bb      	str	r3, [r7, #24]
    break;
 8109ae0:	e002      	b.n	8109ae8 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8109ae2:	4b07      	ldr	r3, [pc, #28]	; (8109b00 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8109ae4:	61bb      	str	r3, [r7, #24]
    break;
 8109ae6:	bf00      	nop
  }

  return sysclockfreq;
 8109ae8:	69bb      	ldr	r3, [r7, #24]
}
 8109aea:	4618      	mov	r0, r3
 8109aec:	3724      	adds	r7, #36	; 0x24
 8109aee:	46bd      	mov	sp, r7
 8109af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109af4:	4770      	bx	lr
 8109af6:	bf00      	nop
 8109af8:	58024400 	.word	0x58024400
 8109afc:	03d09000 	.word	0x03d09000
 8109b00:	003d0900 	.word	0x003d0900
 8109b04:	00f42400 	.word	0x00f42400
 8109b08:	46000000 	.word	0x46000000
 8109b0c:	4c742400 	.word	0x4c742400
 8109b10:	4a742400 	.word	0x4a742400
 8109b14:	4b742400 	.word	0x4b742400

08109b18 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8109b18:	b580      	push	{r7, lr}
 8109b1a:	b082      	sub	sp, #8
 8109b1c:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8109b1e:	f7ff fe81 	bl	8109824 <HAL_RCC_GetSysClockFreq>
 8109b22:	4602      	mov	r2, r0
 8109b24:	4b11      	ldr	r3, [pc, #68]	; (8109b6c <HAL_RCC_GetHCLKFreq+0x54>)
 8109b26:	699b      	ldr	r3, [r3, #24]
 8109b28:	0a1b      	lsrs	r3, r3, #8
 8109b2a:	f003 030f 	and.w	r3, r3, #15
 8109b2e:	4910      	ldr	r1, [pc, #64]	; (8109b70 <HAL_RCC_GetHCLKFreq+0x58>)
 8109b30:	5ccb      	ldrb	r3, [r1, r3]
 8109b32:	f003 031f 	and.w	r3, r3, #31
 8109b36:	fa22 f303 	lsr.w	r3, r2, r3
 8109b3a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8109b3c:	4b0b      	ldr	r3, [pc, #44]	; (8109b6c <HAL_RCC_GetHCLKFreq+0x54>)
 8109b3e:	699b      	ldr	r3, [r3, #24]
 8109b40:	f003 030f 	and.w	r3, r3, #15
 8109b44:	4a0a      	ldr	r2, [pc, #40]	; (8109b70 <HAL_RCC_GetHCLKFreq+0x58>)
 8109b46:	5cd3      	ldrb	r3, [r2, r3]
 8109b48:	f003 031f 	and.w	r3, r3, #31
 8109b4c:	687a      	ldr	r2, [r7, #4]
 8109b4e:	fa22 f303 	lsr.w	r3, r2, r3
 8109b52:	4a08      	ldr	r2, [pc, #32]	; (8109b74 <HAL_RCC_GetHCLKFreq+0x5c>)
 8109b54:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 8109b56:	4b07      	ldr	r3, [pc, #28]	; (8109b74 <HAL_RCC_GetHCLKFreq+0x5c>)
 8109b58:	681b      	ldr	r3, [r3, #0]
 8109b5a:	4a07      	ldr	r2, [pc, #28]	; (8109b78 <HAL_RCC_GetHCLKFreq+0x60>)
 8109b5c:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8109b5e:	4b05      	ldr	r3, [pc, #20]	; (8109b74 <HAL_RCC_GetHCLKFreq+0x5c>)
 8109b60:	681b      	ldr	r3, [r3, #0]
}
 8109b62:	4618      	mov	r0, r3
 8109b64:	3708      	adds	r7, #8
 8109b66:	46bd      	mov	sp, r7
 8109b68:	bd80      	pop	{r7, pc}
 8109b6a:	bf00      	nop
 8109b6c:	58024400 	.word	0x58024400
 8109b70:	0811b480 	.word	0x0811b480
 8109b74:	10000004 	.word	0x10000004
 8109b78:	10000000 	.word	0x10000000

08109b7c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8109b7c:	b580      	push	{r7, lr}
 8109b7e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8109b80:	f7ff ffca 	bl	8109b18 <HAL_RCC_GetHCLKFreq>
 8109b84:	4602      	mov	r2, r0
 8109b86:	4b06      	ldr	r3, [pc, #24]	; (8109ba0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8109b88:	69db      	ldr	r3, [r3, #28]
 8109b8a:	091b      	lsrs	r3, r3, #4
 8109b8c:	f003 0307 	and.w	r3, r3, #7
 8109b90:	4904      	ldr	r1, [pc, #16]	; (8109ba4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8109b92:	5ccb      	ldrb	r3, [r1, r3]
 8109b94:	f003 031f 	and.w	r3, r3, #31
 8109b98:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8109b9c:	4618      	mov	r0, r3
 8109b9e:	bd80      	pop	{r7, pc}
 8109ba0:	58024400 	.word	0x58024400
 8109ba4:	0811b480 	.word	0x0811b480

08109ba8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8109ba8:	b580      	push	{r7, lr}
 8109baa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8109bac:	f7ff ffb4 	bl	8109b18 <HAL_RCC_GetHCLKFreq>
 8109bb0:	4602      	mov	r2, r0
 8109bb2:	4b06      	ldr	r3, [pc, #24]	; (8109bcc <HAL_RCC_GetPCLK2Freq+0x24>)
 8109bb4:	69db      	ldr	r3, [r3, #28]
 8109bb6:	0a1b      	lsrs	r3, r3, #8
 8109bb8:	f003 0307 	and.w	r3, r3, #7
 8109bbc:	4904      	ldr	r1, [pc, #16]	; (8109bd0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8109bbe:	5ccb      	ldrb	r3, [r1, r3]
 8109bc0:	f003 031f 	and.w	r3, r3, #31
 8109bc4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8109bc8:	4618      	mov	r0, r3
 8109bca:	bd80      	pop	{r7, pc}
 8109bcc:	58024400 	.word	0x58024400
 8109bd0:	0811b480 	.word	0x0811b480

08109bd4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8109bd4:	b480      	push	{r7}
 8109bd6:	b083      	sub	sp, #12
 8109bd8:	af00      	add	r7, sp, #0
 8109bda:	6078      	str	r0, [r7, #4]
 8109bdc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8109bde:	687b      	ldr	r3, [r7, #4]
 8109be0:	223f      	movs	r2, #63	; 0x3f
 8109be2:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8109be4:	4b1a      	ldr	r3, [pc, #104]	; (8109c50 <HAL_RCC_GetClockConfig+0x7c>)
 8109be6:	691b      	ldr	r3, [r3, #16]
 8109be8:	f003 0207 	and.w	r2, r3, #7
 8109bec:	687b      	ldr	r3, [r7, #4]
 8109bee:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8109bf0:	4b17      	ldr	r3, [pc, #92]	; (8109c50 <HAL_RCC_GetClockConfig+0x7c>)
 8109bf2:	699b      	ldr	r3, [r3, #24]
 8109bf4:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8109bf8:	687b      	ldr	r3, [r7, #4]
 8109bfa:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8109bfc:	4b14      	ldr	r3, [pc, #80]	; (8109c50 <HAL_RCC_GetClockConfig+0x7c>)
 8109bfe:	699b      	ldr	r3, [r3, #24]
 8109c00:	f003 020f 	and.w	r2, r3, #15
 8109c04:	687b      	ldr	r3, [r7, #4]
 8109c06:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8109c08:	4b11      	ldr	r3, [pc, #68]	; (8109c50 <HAL_RCC_GetClockConfig+0x7c>)
 8109c0a:	699b      	ldr	r3, [r3, #24]
 8109c0c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8109c10:	687b      	ldr	r3, [r7, #4]
 8109c12:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8109c14:	4b0e      	ldr	r3, [pc, #56]	; (8109c50 <HAL_RCC_GetClockConfig+0x7c>)
 8109c16:	69db      	ldr	r3, [r3, #28]
 8109c18:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8109c1c:	687b      	ldr	r3, [r7, #4]
 8109c1e:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8109c20:	4b0b      	ldr	r3, [pc, #44]	; (8109c50 <HAL_RCC_GetClockConfig+0x7c>)
 8109c22:	69db      	ldr	r3, [r3, #28]
 8109c24:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8109c28:	687b      	ldr	r3, [r7, #4]
 8109c2a:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8109c2c:	4b08      	ldr	r3, [pc, #32]	; (8109c50 <HAL_RCC_GetClockConfig+0x7c>)
 8109c2e:	6a1b      	ldr	r3, [r3, #32]
 8109c30:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8109c34:	687b      	ldr	r3, [r7, #4]
 8109c36:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8109c38:	4b06      	ldr	r3, [pc, #24]	; (8109c54 <HAL_RCC_GetClockConfig+0x80>)
 8109c3a:	681b      	ldr	r3, [r3, #0]
 8109c3c:	f003 020f 	and.w	r2, r3, #15
 8109c40:	683b      	ldr	r3, [r7, #0]
 8109c42:	601a      	str	r2, [r3, #0]
}
 8109c44:	bf00      	nop
 8109c46:	370c      	adds	r7, #12
 8109c48:	46bd      	mov	sp, r7
 8109c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109c4e:	4770      	bx	lr
 8109c50:	58024400 	.word	0x58024400
 8109c54:	52002000 	.word	0x52002000

08109c58 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8109c58:	b580      	push	{r7, lr}
 8109c5a:	b086      	sub	sp, #24
 8109c5c:	af00      	add	r7, sp, #0
 8109c5e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8109c60:	2300      	movs	r3, #0
 8109c62:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8109c64:	2300      	movs	r3, #0
 8109c66:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8109c68:	687b      	ldr	r3, [r7, #4]
 8109c6a:	681b      	ldr	r3, [r3, #0]
 8109c6c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8109c70:	2b00      	cmp	r3, #0
 8109c72:	d03f      	beq.n	8109cf4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8109c74:	687b      	ldr	r3, [r7, #4]
 8109c76:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8109c78:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8109c7c:	d02a      	beq.n	8109cd4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8109c7e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8109c82:	d824      	bhi.n	8109cce <HAL_RCCEx_PeriphCLKConfig+0x76>
 8109c84:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8109c88:	d018      	beq.n	8109cbc <HAL_RCCEx_PeriphCLKConfig+0x64>
 8109c8a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8109c8e:	d81e      	bhi.n	8109cce <HAL_RCCEx_PeriphCLKConfig+0x76>
 8109c90:	2b00      	cmp	r3, #0
 8109c92:	d003      	beq.n	8109c9c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8109c94:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8109c98:	d007      	beq.n	8109caa <HAL_RCCEx_PeriphCLKConfig+0x52>
 8109c9a:	e018      	b.n	8109cce <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8109c9c:	4bab      	ldr	r3, [pc, #684]	; (8109f4c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8109c9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8109ca0:	4aaa      	ldr	r2, [pc, #680]	; (8109f4c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8109ca2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8109ca6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8109ca8:	e015      	b.n	8109cd6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8109caa:	687b      	ldr	r3, [r7, #4]
 8109cac:	3304      	adds	r3, #4
 8109cae:	2102      	movs	r1, #2
 8109cb0:	4618      	mov	r0, r3
 8109cb2:	f001 fff3 	bl	810bc9c <RCCEx_PLL2_Config>
 8109cb6:	4603      	mov	r3, r0
 8109cb8:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8109cba:	e00c      	b.n	8109cd6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8109cbc:	687b      	ldr	r3, [r7, #4]
 8109cbe:	3324      	adds	r3, #36	; 0x24
 8109cc0:	2102      	movs	r1, #2
 8109cc2:	4618      	mov	r0, r3
 8109cc4:	f002 f89c 	bl	810be00 <RCCEx_PLL3_Config>
 8109cc8:	4603      	mov	r3, r0
 8109cca:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8109ccc:	e003      	b.n	8109cd6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8109cce:	2301      	movs	r3, #1
 8109cd0:	75fb      	strb	r3, [r7, #23]
      break;
 8109cd2:	e000      	b.n	8109cd6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8109cd4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8109cd6:	7dfb      	ldrb	r3, [r7, #23]
 8109cd8:	2b00      	cmp	r3, #0
 8109cda:	d109      	bne.n	8109cf0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8109cdc:	4b9b      	ldr	r3, [pc, #620]	; (8109f4c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8109cde:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8109ce0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8109ce4:	687b      	ldr	r3, [r7, #4]
 8109ce6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8109ce8:	4998      	ldr	r1, [pc, #608]	; (8109f4c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8109cea:	4313      	orrs	r3, r2
 8109cec:	650b      	str	r3, [r1, #80]	; 0x50
 8109cee:	e001      	b.n	8109cf4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8109cf0:	7dfb      	ldrb	r3, [r7, #23]
 8109cf2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8109cf4:	687b      	ldr	r3, [r7, #4]
 8109cf6:	681b      	ldr	r3, [r3, #0]
 8109cf8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8109cfc:	2b00      	cmp	r3, #0
 8109cfe:	d03d      	beq.n	8109d7c <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8109d00:	687b      	ldr	r3, [r7, #4]
 8109d02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8109d04:	2b04      	cmp	r3, #4
 8109d06:	d826      	bhi.n	8109d56 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8109d08:	a201      	add	r2, pc, #4	; (adr r2, 8109d10 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8109d0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8109d0e:	bf00      	nop
 8109d10:	08109d25 	.word	0x08109d25
 8109d14:	08109d33 	.word	0x08109d33
 8109d18:	08109d45 	.word	0x08109d45
 8109d1c:	08109d5d 	.word	0x08109d5d
 8109d20:	08109d5d 	.word	0x08109d5d
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8109d24:	4b89      	ldr	r3, [pc, #548]	; (8109f4c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8109d26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8109d28:	4a88      	ldr	r2, [pc, #544]	; (8109f4c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8109d2a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8109d2e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8109d30:	e015      	b.n	8109d5e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8109d32:	687b      	ldr	r3, [r7, #4]
 8109d34:	3304      	adds	r3, #4
 8109d36:	2100      	movs	r1, #0
 8109d38:	4618      	mov	r0, r3
 8109d3a:	f001 ffaf 	bl	810bc9c <RCCEx_PLL2_Config>
 8109d3e:	4603      	mov	r3, r0
 8109d40:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8109d42:	e00c      	b.n	8109d5e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8109d44:	687b      	ldr	r3, [r7, #4]
 8109d46:	3324      	adds	r3, #36	; 0x24
 8109d48:	2100      	movs	r1, #0
 8109d4a:	4618      	mov	r0, r3
 8109d4c:	f002 f858 	bl	810be00 <RCCEx_PLL3_Config>
 8109d50:	4603      	mov	r3, r0
 8109d52:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8109d54:	e003      	b.n	8109d5e <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8109d56:	2301      	movs	r3, #1
 8109d58:	75fb      	strb	r3, [r7, #23]
      break;
 8109d5a:	e000      	b.n	8109d5e <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8109d5c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8109d5e:	7dfb      	ldrb	r3, [r7, #23]
 8109d60:	2b00      	cmp	r3, #0
 8109d62:	d109      	bne.n	8109d78 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8109d64:	4b79      	ldr	r3, [pc, #484]	; (8109f4c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8109d66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8109d68:	f023 0207 	bic.w	r2, r3, #7
 8109d6c:	687b      	ldr	r3, [r7, #4]
 8109d6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8109d70:	4976      	ldr	r1, [pc, #472]	; (8109f4c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8109d72:	4313      	orrs	r3, r2
 8109d74:	650b      	str	r3, [r1, #80]	; 0x50
 8109d76:	e001      	b.n	8109d7c <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8109d78:	7dfb      	ldrb	r3, [r7, #23]
 8109d7a:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8109d7c:	687b      	ldr	r3, [r7, #4]
 8109d7e:	681b      	ldr	r3, [r3, #0]
 8109d80:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8109d84:	2b00      	cmp	r3, #0
 8109d86:	d042      	beq.n	8109e0e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8109d88:	687b      	ldr	r3, [r7, #4]
 8109d8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8109d8c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8109d90:	d02b      	beq.n	8109dea <HAL_RCCEx_PeriphCLKConfig+0x192>
 8109d92:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8109d96:	d825      	bhi.n	8109de4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8109d98:	2bc0      	cmp	r3, #192	; 0xc0
 8109d9a:	d028      	beq.n	8109dee <HAL_RCCEx_PeriphCLKConfig+0x196>
 8109d9c:	2bc0      	cmp	r3, #192	; 0xc0
 8109d9e:	d821      	bhi.n	8109de4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8109da0:	2b80      	cmp	r3, #128	; 0x80
 8109da2:	d016      	beq.n	8109dd2 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8109da4:	2b80      	cmp	r3, #128	; 0x80
 8109da6:	d81d      	bhi.n	8109de4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8109da8:	2b00      	cmp	r3, #0
 8109daa:	d002      	beq.n	8109db2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8109dac:	2b40      	cmp	r3, #64	; 0x40
 8109dae:	d007      	beq.n	8109dc0 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8109db0:	e018      	b.n	8109de4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8109db2:	4b66      	ldr	r3, [pc, #408]	; (8109f4c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8109db4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8109db6:	4a65      	ldr	r2, [pc, #404]	; (8109f4c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8109db8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8109dbc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8109dbe:	e017      	b.n	8109df0 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8109dc0:	687b      	ldr	r3, [r7, #4]
 8109dc2:	3304      	adds	r3, #4
 8109dc4:	2100      	movs	r1, #0
 8109dc6:	4618      	mov	r0, r3
 8109dc8:	f001 ff68 	bl	810bc9c <RCCEx_PLL2_Config>
 8109dcc:	4603      	mov	r3, r0
 8109dce:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8109dd0:	e00e      	b.n	8109df0 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8109dd2:	687b      	ldr	r3, [r7, #4]
 8109dd4:	3324      	adds	r3, #36	; 0x24
 8109dd6:	2100      	movs	r1, #0
 8109dd8:	4618      	mov	r0, r3
 8109dda:	f002 f811 	bl	810be00 <RCCEx_PLL3_Config>
 8109dde:	4603      	mov	r3, r0
 8109de0:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8109de2:	e005      	b.n	8109df0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8109de4:	2301      	movs	r3, #1
 8109de6:	75fb      	strb	r3, [r7, #23]
      break;
 8109de8:	e002      	b.n	8109df0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8109dea:	bf00      	nop
 8109dec:	e000      	b.n	8109df0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8109dee:	bf00      	nop
    }

    if(ret == HAL_OK)
 8109df0:	7dfb      	ldrb	r3, [r7, #23]
 8109df2:	2b00      	cmp	r3, #0
 8109df4:	d109      	bne.n	8109e0a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8109df6:	4b55      	ldr	r3, [pc, #340]	; (8109f4c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8109df8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8109dfa:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8109dfe:	687b      	ldr	r3, [r7, #4]
 8109e00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8109e02:	4952      	ldr	r1, [pc, #328]	; (8109f4c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8109e04:	4313      	orrs	r3, r2
 8109e06:	650b      	str	r3, [r1, #80]	; 0x50
 8109e08:	e001      	b.n	8109e0e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8109e0a:	7dfb      	ldrb	r3, [r7, #23]
 8109e0c:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8109e0e:	687b      	ldr	r3, [r7, #4]
 8109e10:	681b      	ldr	r3, [r3, #0]
 8109e12:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8109e16:	2b00      	cmp	r3, #0
 8109e18:	d049      	beq.n	8109eae <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8109e1a:	687b      	ldr	r3, [r7, #4]
 8109e1c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8109e20:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8109e24:	d030      	beq.n	8109e88 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8109e26:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8109e2a:	d82a      	bhi.n	8109e82 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8109e2c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8109e30:	d02c      	beq.n	8109e8c <HAL_RCCEx_PeriphCLKConfig+0x234>
 8109e32:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8109e36:	d824      	bhi.n	8109e82 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8109e38:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8109e3c:	d018      	beq.n	8109e70 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8109e3e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8109e42:	d81e      	bhi.n	8109e82 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8109e44:	2b00      	cmp	r3, #0
 8109e46:	d003      	beq.n	8109e50 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8109e48:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8109e4c:	d007      	beq.n	8109e5e <HAL_RCCEx_PeriphCLKConfig+0x206>
 8109e4e:	e018      	b.n	8109e82 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8109e50:	4b3e      	ldr	r3, [pc, #248]	; (8109f4c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8109e52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8109e54:	4a3d      	ldr	r2, [pc, #244]	; (8109f4c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8109e56:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8109e5a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8109e5c:	e017      	b.n	8109e8e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8109e5e:	687b      	ldr	r3, [r7, #4]
 8109e60:	3304      	adds	r3, #4
 8109e62:	2100      	movs	r1, #0
 8109e64:	4618      	mov	r0, r3
 8109e66:	f001 ff19 	bl	810bc9c <RCCEx_PLL2_Config>
 8109e6a:	4603      	mov	r3, r0
 8109e6c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8109e6e:	e00e      	b.n	8109e8e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8109e70:	687b      	ldr	r3, [r7, #4]
 8109e72:	3324      	adds	r3, #36	; 0x24
 8109e74:	2100      	movs	r1, #0
 8109e76:	4618      	mov	r0, r3
 8109e78:	f001 ffc2 	bl	810be00 <RCCEx_PLL3_Config>
 8109e7c:	4603      	mov	r3, r0
 8109e7e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8109e80:	e005      	b.n	8109e8e <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8109e82:	2301      	movs	r3, #1
 8109e84:	75fb      	strb	r3, [r7, #23]
      break;
 8109e86:	e002      	b.n	8109e8e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8109e88:	bf00      	nop
 8109e8a:	e000      	b.n	8109e8e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8109e8c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8109e8e:	7dfb      	ldrb	r3, [r7, #23]
 8109e90:	2b00      	cmp	r3, #0
 8109e92:	d10a      	bne.n	8109eaa <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8109e94:	4b2d      	ldr	r3, [pc, #180]	; (8109f4c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8109e96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8109e98:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8109e9c:	687b      	ldr	r3, [r7, #4]
 8109e9e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8109ea2:	492a      	ldr	r1, [pc, #168]	; (8109f4c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8109ea4:	4313      	orrs	r3, r2
 8109ea6:	658b      	str	r3, [r1, #88]	; 0x58
 8109ea8:	e001      	b.n	8109eae <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8109eaa:	7dfb      	ldrb	r3, [r7, #23]
 8109eac:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8109eae:	687b      	ldr	r3, [r7, #4]
 8109eb0:	681b      	ldr	r3, [r3, #0]
 8109eb2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8109eb6:	2b00      	cmp	r3, #0
 8109eb8:	d04c      	beq.n	8109f54 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8109eba:	687b      	ldr	r3, [r7, #4]
 8109ebc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8109ec0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8109ec4:	d030      	beq.n	8109f28 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8109ec6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8109eca:	d82a      	bhi.n	8109f22 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8109ecc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8109ed0:	d02c      	beq.n	8109f2c <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 8109ed2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8109ed6:	d824      	bhi.n	8109f22 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8109ed8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8109edc:	d018      	beq.n	8109f10 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8109ede:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8109ee2:	d81e      	bhi.n	8109f22 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8109ee4:	2b00      	cmp	r3, #0
 8109ee6:	d003      	beq.n	8109ef0 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8109ee8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8109eec:	d007      	beq.n	8109efe <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8109eee:	e018      	b.n	8109f22 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8109ef0:	4b16      	ldr	r3, [pc, #88]	; (8109f4c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8109ef2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8109ef4:	4a15      	ldr	r2, [pc, #84]	; (8109f4c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8109ef6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8109efa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8109efc:	e017      	b.n	8109f2e <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8109efe:	687b      	ldr	r3, [r7, #4]
 8109f00:	3304      	adds	r3, #4
 8109f02:	2100      	movs	r1, #0
 8109f04:	4618      	mov	r0, r3
 8109f06:	f001 fec9 	bl	810bc9c <RCCEx_PLL2_Config>
 8109f0a:	4603      	mov	r3, r0
 8109f0c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8109f0e:	e00e      	b.n	8109f2e <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8109f10:	687b      	ldr	r3, [r7, #4]
 8109f12:	3324      	adds	r3, #36	; 0x24
 8109f14:	2100      	movs	r1, #0
 8109f16:	4618      	mov	r0, r3
 8109f18:	f001 ff72 	bl	810be00 <RCCEx_PLL3_Config>
 8109f1c:	4603      	mov	r3, r0
 8109f1e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8109f20:	e005      	b.n	8109f2e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8109f22:	2301      	movs	r3, #1
 8109f24:	75fb      	strb	r3, [r7, #23]
      break;
 8109f26:	e002      	b.n	8109f2e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8109f28:	bf00      	nop
 8109f2a:	e000      	b.n	8109f2e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8109f2c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8109f2e:	7dfb      	ldrb	r3, [r7, #23]
 8109f30:	2b00      	cmp	r3, #0
 8109f32:	d10d      	bne.n	8109f50 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8109f34:	4b05      	ldr	r3, [pc, #20]	; (8109f4c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8109f36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8109f38:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8109f3c:	687b      	ldr	r3, [r7, #4]
 8109f3e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8109f42:	4902      	ldr	r1, [pc, #8]	; (8109f4c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8109f44:	4313      	orrs	r3, r2
 8109f46:	658b      	str	r3, [r1, #88]	; 0x58
 8109f48:	e004      	b.n	8109f54 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8109f4a:	bf00      	nop
 8109f4c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8109f50:	7dfb      	ldrb	r3, [r7, #23]
 8109f52:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8109f54:	687b      	ldr	r3, [r7, #4]
 8109f56:	681b      	ldr	r3, [r3, #0]
 8109f58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8109f5c:	2b00      	cmp	r3, #0
 8109f5e:	d032      	beq.n	8109fc6 <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8109f60:	687b      	ldr	r3, [r7, #4]
 8109f62:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8109f64:	2b30      	cmp	r3, #48	; 0x30
 8109f66:	d01c      	beq.n	8109fa2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8109f68:	2b30      	cmp	r3, #48	; 0x30
 8109f6a:	d817      	bhi.n	8109f9c <HAL_RCCEx_PeriphCLKConfig+0x344>
 8109f6c:	2b20      	cmp	r3, #32
 8109f6e:	d00c      	beq.n	8109f8a <HAL_RCCEx_PeriphCLKConfig+0x332>
 8109f70:	2b20      	cmp	r3, #32
 8109f72:	d813      	bhi.n	8109f9c <HAL_RCCEx_PeriphCLKConfig+0x344>
 8109f74:	2b00      	cmp	r3, #0
 8109f76:	d016      	beq.n	8109fa6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8109f78:	2b10      	cmp	r3, #16
 8109f7a:	d10f      	bne.n	8109f9c <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8109f7c:	4baf      	ldr	r3, [pc, #700]	; (810a23c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8109f7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8109f80:	4aae      	ldr	r2, [pc, #696]	; (810a23c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8109f82:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8109f86:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8109f88:	e00e      	b.n	8109fa8 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8109f8a:	687b      	ldr	r3, [r7, #4]
 8109f8c:	3304      	adds	r3, #4
 8109f8e:	2102      	movs	r1, #2
 8109f90:	4618      	mov	r0, r3
 8109f92:	f001 fe83 	bl	810bc9c <RCCEx_PLL2_Config>
 8109f96:	4603      	mov	r3, r0
 8109f98:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8109f9a:	e005      	b.n	8109fa8 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8109f9c:	2301      	movs	r3, #1
 8109f9e:	75fb      	strb	r3, [r7, #23]
      break;
 8109fa0:	e002      	b.n	8109fa8 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8109fa2:	bf00      	nop
 8109fa4:	e000      	b.n	8109fa8 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8109fa6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8109fa8:	7dfb      	ldrb	r3, [r7, #23]
 8109faa:	2b00      	cmp	r3, #0
 8109fac:	d109      	bne.n	8109fc2 <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8109fae:	4ba3      	ldr	r3, [pc, #652]	; (810a23c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8109fb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8109fb2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8109fb6:	687b      	ldr	r3, [r7, #4]
 8109fb8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8109fba:	49a0      	ldr	r1, [pc, #640]	; (810a23c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8109fbc:	4313      	orrs	r3, r2
 8109fbe:	64cb      	str	r3, [r1, #76]	; 0x4c
 8109fc0:	e001      	b.n	8109fc6 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8109fc2:	7dfb      	ldrb	r3, [r7, #23]
 8109fc4:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8109fc6:	687b      	ldr	r3, [r7, #4]
 8109fc8:	681b      	ldr	r3, [r3, #0]
 8109fca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8109fce:	2b00      	cmp	r3, #0
 8109fd0:	d047      	beq.n	810a062 <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8109fd2:	687b      	ldr	r3, [r7, #4]
 8109fd4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8109fd6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8109fda:	d030      	beq.n	810a03e <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8109fdc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8109fe0:	d82a      	bhi.n	810a038 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8109fe2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8109fe6:	d02c      	beq.n	810a042 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8109fe8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8109fec:	d824      	bhi.n	810a038 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8109fee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8109ff2:	d018      	beq.n	810a026 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 8109ff4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8109ff8:	d81e      	bhi.n	810a038 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8109ffa:	2b00      	cmp	r3, #0
 8109ffc:	d003      	beq.n	810a006 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8109ffe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 810a002:	d007      	beq.n	810a014 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 810a004:	e018      	b.n	810a038 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810a006:	4b8d      	ldr	r3, [pc, #564]	; (810a23c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 810a008:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810a00a:	4a8c      	ldr	r2, [pc, #560]	; (810a23c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 810a00c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 810a010:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 810a012:	e017      	b.n	810a044 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 810a014:	687b      	ldr	r3, [r7, #4]
 810a016:	3304      	adds	r3, #4
 810a018:	2100      	movs	r1, #0
 810a01a:	4618      	mov	r0, r3
 810a01c:	f001 fe3e 	bl	810bc9c <RCCEx_PLL2_Config>
 810a020:	4603      	mov	r3, r0
 810a022:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 810a024:	e00e      	b.n	810a044 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 810a026:	687b      	ldr	r3, [r7, #4]
 810a028:	3324      	adds	r3, #36	; 0x24
 810a02a:	2100      	movs	r1, #0
 810a02c:	4618      	mov	r0, r3
 810a02e:	f001 fee7 	bl	810be00 <RCCEx_PLL3_Config>
 810a032:	4603      	mov	r3, r0
 810a034:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 810a036:	e005      	b.n	810a044 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 810a038:	2301      	movs	r3, #1
 810a03a:	75fb      	strb	r3, [r7, #23]
      break;
 810a03c:	e002      	b.n	810a044 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 810a03e:	bf00      	nop
 810a040:	e000      	b.n	810a044 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 810a042:	bf00      	nop
    }

    if(ret == HAL_OK)
 810a044:	7dfb      	ldrb	r3, [r7, #23]
 810a046:	2b00      	cmp	r3, #0
 810a048:	d109      	bne.n	810a05e <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 810a04a:	4b7c      	ldr	r3, [pc, #496]	; (810a23c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 810a04c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810a04e:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 810a052:	687b      	ldr	r3, [r7, #4]
 810a054:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 810a056:	4979      	ldr	r1, [pc, #484]	; (810a23c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 810a058:	4313      	orrs	r3, r2
 810a05a:	650b      	str	r3, [r1, #80]	; 0x50
 810a05c:	e001      	b.n	810a062 <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810a05e:	7dfb      	ldrb	r3, [r7, #23]
 810a060:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 810a062:	687b      	ldr	r3, [r7, #4]
 810a064:	681b      	ldr	r3, [r3, #0]
 810a066:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 810a06a:	2b00      	cmp	r3, #0
 810a06c:	d049      	beq.n	810a102 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 810a06e:	687b      	ldr	r3, [r7, #4]
 810a070:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 810a072:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 810a076:	d02e      	beq.n	810a0d6 <HAL_RCCEx_PeriphCLKConfig+0x47e>
 810a078:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 810a07c:	d828      	bhi.n	810a0d0 <HAL_RCCEx_PeriphCLKConfig+0x478>
 810a07e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 810a082:	d02a      	beq.n	810a0da <HAL_RCCEx_PeriphCLKConfig+0x482>
 810a084:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 810a088:	d822      	bhi.n	810a0d0 <HAL_RCCEx_PeriphCLKConfig+0x478>
 810a08a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 810a08e:	d026      	beq.n	810a0de <HAL_RCCEx_PeriphCLKConfig+0x486>
 810a090:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 810a094:	d81c      	bhi.n	810a0d0 <HAL_RCCEx_PeriphCLKConfig+0x478>
 810a096:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 810a09a:	d010      	beq.n	810a0be <HAL_RCCEx_PeriphCLKConfig+0x466>
 810a09c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 810a0a0:	d816      	bhi.n	810a0d0 <HAL_RCCEx_PeriphCLKConfig+0x478>
 810a0a2:	2b00      	cmp	r3, #0
 810a0a4:	d01d      	beq.n	810a0e2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
 810a0a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 810a0aa:	d111      	bne.n	810a0d0 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 810a0ac:	687b      	ldr	r3, [r7, #4]
 810a0ae:	3304      	adds	r3, #4
 810a0b0:	2101      	movs	r1, #1
 810a0b2:	4618      	mov	r0, r3
 810a0b4:	f001 fdf2 	bl	810bc9c <RCCEx_PLL2_Config>
 810a0b8:	4603      	mov	r3, r0
 810a0ba:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 810a0bc:	e012      	b.n	810a0e4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 810a0be:	687b      	ldr	r3, [r7, #4]
 810a0c0:	3324      	adds	r3, #36	; 0x24
 810a0c2:	2101      	movs	r1, #1
 810a0c4:	4618      	mov	r0, r3
 810a0c6:	f001 fe9b 	bl	810be00 <RCCEx_PLL3_Config>
 810a0ca:	4603      	mov	r3, r0
 810a0cc:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 810a0ce:	e009      	b.n	810a0e4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 810a0d0:	2301      	movs	r3, #1
 810a0d2:	75fb      	strb	r3, [r7, #23]
      break;
 810a0d4:	e006      	b.n	810a0e4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 810a0d6:	bf00      	nop
 810a0d8:	e004      	b.n	810a0e4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 810a0da:	bf00      	nop
 810a0dc:	e002      	b.n	810a0e4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 810a0de:	bf00      	nop
 810a0e0:	e000      	b.n	810a0e4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 810a0e2:	bf00      	nop
    }

    if(ret == HAL_OK)
 810a0e4:	7dfb      	ldrb	r3, [r7, #23]
 810a0e6:	2b00      	cmp	r3, #0
 810a0e8:	d109      	bne.n	810a0fe <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 810a0ea:	4b54      	ldr	r3, [pc, #336]	; (810a23c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 810a0ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810a0ee:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 810a0f2:	687b      	ldr	r3, [r7, #4]
 810a0f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 810a0f6:	4951      	ldr	r1, [pc, #324]	; (810a23c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 810a0f8:	4313      	orrs	r3, r2
 810a0fa:	650b      	str	r3, [r1, #80]	; 0x50
 810a0fc:	e001      	b.n	810a102 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810a0fe:	7dfb      	ldrb	r3, [r7, #23]
 810a100:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 810a102:	687b      	ldr	r3, [r7, #4]
 810a104:	681b      	ldr	r3, [r3, #0]
 810a106:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 810a10a:	2b00      	cmp	r3, #0
 810a10c:	d04b      	beq.n	810a1a6 <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 810a10e:	687b      	ldr	r3, [r7, #4]
 810a110:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 810a114:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 810a118:	d02e      	beq.n	810a178 <HAL_RCCEx_PeriphCLKConfig+0x520>
 810a11a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 810a11e:	d828      	bhi.n	810a172 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 810a120:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 810a124:	d02a      	beq.n	810a17c <HAL_RCCEx_PeriphCLKConfig+0x524>
 810a126:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 810a12a:	d822      	bhi.n	810a172 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 810a12c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 810a130:	d026      	beq.n	810a180 <HAL_RCCEx_PeriphCLKConfig+0x528>
 810a132:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 810a136:	d81c      	bhi.n	810a172 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 810a138:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 810a13c:	d010      	beq.n	810a160 <HAL_RCCEx_PeriphCLKConfig+0x508>
 810a13e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 810a142:	d816      	bhi.n	810a172 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 810a144:	2b00      	cmp	r3, #0
 810a146:	d01d      	beq.n	810a184 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 810a148:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 810a14c:	d111      	bne.n	810a172 <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 810a14e:	687b      	ldr	r3, [r7, #4]
 810a150:	3304      	adds	r3, #4
 810a152:	2101      	movs	r1, #1
 810a154:	4618      	mov	r0, r3
 810a156:	f001 fda1 	bl	810bc9c <RCCEx_PLL2_Config>
 810a15a:	4603      	mov	r3, r0
 810a15c:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 810a15e:	e012      	b.n	810a186 <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 810a160:	687b      	ldr	r3, [r7, #4]
 810a162:	3324      	adds	r3, #36	; 0x24
 810a164:	2101      	movs	r1, #1
 810a166:	4618      	mov	r0, r3
 810a168:	f001 fe4a 	bl	810be00 <RCCEx_PLL3_Config>
 810a16c:	4603      	mov	r3, r0
 810a16e:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 810a170:	e009      	b.n	810a186 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 810a172:	2301      	movs	r3, #1
 810a174:	75fb      	strb	r3, [r7, #23]
      break;
 810a176:	e006      	b.n	810a186 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 810a178:	bf00      	nop
 810a17a:	e004      	b.n	810a186 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 810a17c:	bf00      	nop
 810a17e:	e002      	b.n	810a186 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 810a180:	bf00      	nop
 810a182:	e000      	b.n	810a186 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 810a184:	bf00      	nop
    }

    if(ret == HAL_OK)
 810a186:	7dfb      	ldrb	r3, [r7, #23]
 810a188:	2b00      	cmp	r3, #0
 810a18a:	d10a      	bne.n	810a1a2 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 810a18c:	4b2b      	ldr	r3, [pc, #172]	; (810a23c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 810a18e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810a190:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 810a194:	687b      	ldr	r3, [r7, #4]
 810a196:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 810a19a:	4928      	ldr	r1, [pc, #160]	; (810a23c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 810a19c:	4313      	orrs	r3, r2
 810a19e:	658b      	str	r3, [r1, #88]	; 0x58
 810a1a0:	e001      	b.n	810a1a6 <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810a1a2:	7dfb      	ldrb	r3, [r7, #23]
 810a1a4:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 810a1a6:	687b      	ldr	r3, [r7, #4]
 810a1a8:	681b      	ldr	r3, [r3, #0]
 810a1aa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 810a1ae:	2b00      	cmp	r3, #0
 810a1b0:	d02f      	beq.n	810a212 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 810a1b2:	687b      	ldr	r3, [r7, #4]
 810a1b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 810a1b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 810a1ba:	d00e      	beq.n	810a1da <HAL_RCCEx_PeriphCLKConfig+0x582>
 810a1bc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 810a1c0:	d814      	bhi.n	810a1ec <HAL_RCCEx_PeriphCLKConfig+0x594>
 810a1c2:	2b00      	cmp	r3, #0
 810a1c4:	d015      	beq.n	810a1f2 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 810a1c6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 810a1ca:	d10f      	bne.n	810a1ec <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810a1cc:	4b1b      	ldr	r3, [pc, #108]	; (810a23c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 810a1ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810a1d0:	4a1a      	ldr	r2, [pc, #104]	; (810a23c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 810a1d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 810a1d6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 810a1d8:	e00c      	b.n	810a1f4 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 810a1da:	687b      	ldr	r3, [r7, #4]
 810a1dc:	3304      	adds	r3, #4
 810a1de:	2101      	movs	r1, #1
 810a1e0:	4618      	mov	r0, r3
 810a1e2:	f001 fd5b 	bl	810bc9c <RCCEx_PLL2_Config>
 810a1e6:	4603      	mov	r3, r0
 810a1e8:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 810a1ea:	e003      	b.n	810a1f4 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 810a1ec:	2301      	movs	r3, #1
 810a1ee:	75fb      	strb	r3, [r7, #23]
      break;
 810a1f0:	e000      	b.n	810a1f4 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 810a1f2:	bf00      	nop
    }

    if(ret == HAL_OK)
 810a1f4:	7dfb      	ldrb	r3, [r7, #23]
 810a1f6:	2b00      	cmp	r3, #0
 810a1f8:	d109      	bne.n	810a20e <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 810a1fa:	4b10      	ldr	r3, [pc, #64]	; (810a23c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 810a1fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810a1fe:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 810a202:	687b      	ldr	r3, [r7, #4]
 810a204:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 810a206:	490d      	ldr	r1, [pc, #52]	; (810a23c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 810a208:	4313      	orrs	r3, r2
 810a20a:	650b      	str	r3, [r1, #80]	; 0x50
 810a20c:	e001      	b.n	810a212 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810a20e:	7dfb      	ldrb	r3, [r7, #23]
 810a210:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 810a212:	687b      	ldr	r3, [r7, #4]
 810a214:	681b      	ldr	r3, [r3, #0]
 810a216:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 810a21a:	2b00      	cmp	r3, #0
 810a21c:	d033      	beq.n	810a286 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 810a21e:	687b      	ldr	r3, [r7, #4]
 810a220:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 810a222:	2b03      	cmp	r3, #3
 810a224:	d81c      	bhi.n	810a260 <HAL_RCCEx_PeriphCLKConfig+0x608>
 810a226:	a201      	add	r2, pc, #4	; (adr r2, 810a22c <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 810a228:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810a22c:	0810a267 	.word	0x0810a267
 810a230:	0810a241 	.word	0x0810a241
 810a234:	0810a24f 	.word	0x0810a24f
 810a238:	0810a267 	.word	0x0810a267
 810a23c:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810a240:	4bb9      	ldr	r3, [pc, #740]	; (810a528 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 810a242:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810a244:	4ab8      	ldr	r2, [pc, #736]	; (810a528 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 810a246:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 810a24a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 810a24c:	e00c      	b.n	810a268 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 810a24e:	687b      	ldr	r3, [r7, #4]
 810a250:	3304      	adds	r3, #4
 810a252:	2102      	movs	r1, #2
 810a254:	4618      	mov	r0, r3
 810a256:	f001 fd21 	bl	810bc9c <RCCEx_PLL2_Config>
 810a25a:	4603      	mov	r3, r0
 810a25c:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 810a25e:	e003      	b.n	810a268 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 810a260:	2301      	movs	r3, #1
 810a262:	75fb      	strb	r3, [r7, #23]
      break;
 810a264:	e000      	b.n	810a268 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 810a266:	bf00      	nop
    }

    if(ret == HAL_OK)
 810a268:	7dfb      	ldrb	r3, [r7, #23]
 810a26a:	2b00      	cmp	r3, #0
 810a26c:	d109      	bne.n	810a282 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 810a26e:	4bae      	ldr	r3, [pc, #696]	; (810a528 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 810a270:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 810a272:	f023 0203 	bic.w	r2, r3, #3
 810a276:	687b      	ldr	r3, [r7, #4]
 810a278:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 810a27a:	49ab      	ldr	r1, [pc, #684]	; (810a528 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 810a27c:	4313      	orrs	r3, r2
 810a27e:	64cb      	str	r3, [r1, #76]	; 0x4c
 810a280:	e001      	b.n	810a286 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810a282:	7dfb      	ldrb	r3, [r7, #23]
 810a284:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 810a286:	687b      	ldr	r3, [r7, #4]
 810a288:	681b      	ldr	r3, [r3, #0]
 810a28a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 810a28e:	2b00      	cmp	r3, #0
 810a290:	f000 8088 	beq.w	810a3a4 <HAL_RCCEx_PeriphCLKConfig+0x74c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 810a294:	4ba5      	ldr	r3, [pc, #660]	; (810a52c <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 810a296:	681b      	ldr	r3, [r3, #0]
 810a298:	4aa4      	ldr	r2, [pc, #656]	; (810a52c <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 810a29a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 810a29e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 810a2a0:	f7f8 fbac 	bl	81029fc <HAL_GetTick>
 810a2a4:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 810a2a6:	e009      	b.n	810a2bc <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 810a2a8:	f7f8 fba8 	bl	81029fc <HAL_GetTick>
 810a2ac:	4602      	mov	r2, r0
 810a2ae:	693b      	ldr	r3, [r7, #16]
 810a2b0:	1ad3      	subs	r3, r2, r3
 810a2b2:	2b64      	cmp	r3, #100	; 0x64
 810a2b4:	d902      	bls.n	810a2bc <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 810a2b6:	2303      	movs	r3, #3
 810a2b8:	75fb      	strb	r3, [r7, #23]
        break;
 810a2ba:	e005      	b.n	810a2c8 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 810a2bc:	4b9b      	ldr	r3, [pc, #620]	; (810a52c <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 810a2be:	681b      	ldr	r3, [r3, #0]
 810a2c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 810a2c4:	2b00      	cmp	r3, #0
 810a2c6:	d0ef      	beq.n	810a2a8 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 810a2c8:	7dfb      	ldrb	r3, [r7, #23]
 810a2ca:	2b00      	cmp	r3, #0
 810a2cc:	d168      	bne.n	810a3a0 <HAL_RCCEx_PeriphCLKConfig+0x748>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 810a2ce:	4b96      	ldr	r3, [pc, #600]	; (810a528 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 810a2d0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 810a2d2:	687b      	ldr	r3, [r7, #4]
 810a2d4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 810a2d8:	4053      	eors	r3, r2
 810a2da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 810a2de:	2b00      	cmp	r3, #0
 810a2e0:	d013      	beq.n	810a30a <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 810a2e2:	4b91      	ldr	r3, [pc, #580]	; (810a528 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 810a2e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 810a2e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 810a2ea:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 810a2ec:	4b8e      	ldr	r3, [pc, #568]	; (810a528 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 810a2ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 810a2f0:	4a8d      	ldr	r2, [pc, #564]	; (810a528 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 810a2f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 810a2f6:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 810a2f8:	4b8b      	ldr	r3, [pc, #556]	; (810a528 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 810a2fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 810a2fc:	4a8a      	ldr	r2, [pc, #552]	; (810a528 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 810a2fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 810a302:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 810a304:	4a88      	ldr	r2, [pc, #544]	; (810a528 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 810a306:	68fb      	ldr	r3, [r7, #12]
 810a308:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 810a30a:	687b      	ldr	r3, [r7, #4]
 810a30c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 810a310:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810a314:	d115      	bne.n	810a342 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 810a316:	f7f8 fb71 	bl	81029fc <HAL_GetTick>
 810a31a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 810a31c:	e00b      	b.n	810a336 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 810a31e:	f7f8 fb6d 	bl	81029fc <HAL_GetTick>
 810a322:	4602      	mov	r2, r0
 810a324:	693b      	ldr	r3, [r7, #16]
 810a326:	1ad3      	subs	r3, r2, r3
 810a328:	f241 3288 	movw	r2, #5000	; 0x1388
 810a32c:	4293      	cmp	r3, r2
 810a32e:	d902      	bls.n	810a336 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 810a330:	2303      	movs	r3, #3
 810a332:	75fb      	strb	r3, [r7, #23]
            break;
 810a334:	e005      	b.n	810a342 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 810a336:	4b7c      	ldr	r3, [pc, #496]	; (810a528 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 810a338:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 810a33a:	f003 0302 	and.w	r3, r3, #2
 810a33e:	2b00      	cmp	r3, #0
 810a340:	d0ed      	beq.n	810a31e <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 810a342:	7dfb      	ldrb	r3, [r7, #23]
 810a344:	2b00      	cmp	r3, #0
 810a346:	d128      	bne.n	810a39a <HAL_RCCEx_PeriphCLKConfig+0x742>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 810a348:	687b      	ldr	r3, [r7, #4]
 810a34a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 810a34e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 810a352:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 810a356:	d10f      	bne.n	810a378 <HAL_RCCEx_PeriphCLKConfig+0x720>
 810a358:	4b73      	ldr	r3, [pc, #460]	; (810a528 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 810a35a:	691b      	ldr	r3, [r3, #16]
 810a35c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 810a360:	687b      	ldr	r3, [r7, #4]
 810a362:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 810a366:	091b      	lsrs	r3, r3, #4
 810a368:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 810a36c:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 810a370:	496d      	ldr	r1, [pc, #436]	; (810a528 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 810a372:	4313      	orrs	r3, r2
 810a374:	610b      	str	r3, [r1, #16]
 810a376:	e005      	b.n	810a384 <HAL_RCCEx_PeriphCLKConfig+0x72c>
 810a378:	4b6b      	ldr	r3, [pc, #428]	; (810a528 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 810a37a:	691b      	ldr	r3, [r3, #16]
 810a37c:	4a6a      	ldr	r2, [pc, #424]	; (810a528 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 810a37e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 810a382:	6113      	str	r3, [r2, #16]
 810a384:	4b68      	ldr	r3, [pc, #416]	; (810a528 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 810a386:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 810a388:	687b      	ldr	r3, [r7, #4]
 810a38a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 810a38e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 810a392:	4965      	ldr	r1, [pc, #404]	; (810a528 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 810a394:	4313      	orrs	r3, r2
 810a396:	670b      	str	r3, [r1, #112]	; 0x70
 810a398:	e004      	b.n	810a3a4 <HAL_RCCEx_PeriphCLKConfig+0x74c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 810a39a:	7dfb      	ldrb	r3, [r7, #23]
 810a39c:	75bb      	strb	r3, [r7, #22]
 810a39e:	e001      	b.n	810a3a4 <HAL_RCCEx_PeriphCLKConfig+0x74c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 810a3a0:	7dfb      	ldrb	r3, [r7, #23]
 810a3a2:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 810a3a4:	687b      	ldr	r3, [r7, #4]
 810a3a6:	681b      	ldr	r3, [r3, #0]
 810a3a8:	f003 0301 	and.w	r3, r3, #1
 810a3ac:	2b00      	cmp	r3, #0
 810a3ae:	d07e      	beq.n	810a4ae <HAL_RCCEx_PeriphCLKConfig+0x856>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 810a3b0:	687b      	ldr	r3, [r7, #4]
 810a3b2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810a3b4:	2b28      	cmp	r3, #40	; 0x28
 810a3b6:	d867      	bhi.n	810a488 <HAL_RCCEx_PeriphCLKConfig+0x830>
 810a3b8:	a201      	add	r2, pc, #4	; (adr r2, 810a3c0 <HAL_RCCEx_PeriphCLKConfig+0x768>)
 810a3ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810a3be:	bf00      	nop
 810a3c0:	0810a48f 	.word	0x0810a48f
 810a3c4:	0810a489 	.word	0x0810a489
 810a3c8:	0810a489 	.word	0x0810a489
 810a3cc:	0810a489 	.word	0x0810a489
 810a3d0:	0810a489 	.word	0x0810a489
 810a3d4:	0810a489 	.word	0x0810a489
 810a3d8:	0810a489 	.word	0x0810a489
 810a3dc:	0810a489 	.word	0x0810a489
 810a3e0:	0810a465 	.word	0x0810a465
 810a3e4:	0810a489 	.word	0x0810a489
 810a3e8:	0810a489 	.word	0x0810a489
 810a3ec:	0810a489 	.word	0x0810a489
 810a3f0:	0810a489 	.word	0x0810a489
 810a3f4:	0810a489 	.word	0x0810a489
 810a3f8:	0810a489 	.word	0x0810a489
 810a3fc:	0810a489 	.word	0x0810a489
 810a400:	0810a477 	.word	0x0810a477
 810a404:	0810a489 	.word	0x0810a489
 810a408:	0810a489 	.word	0x0810a489
 810a40c:	0810a489 	.word	0x0810a489
 810a410:	0810a489 	.word	0x0810a489
 810a414:	0810a489 	.word	0x0810a489
 810a418:	0810a489 	.word	0x0810a489
 810a41c:	0810a489 	.word	0x0810a489
 810a420:	0810a48f 	.word	0x0810a48f
 810a424:	0810a489 	.word	0x0810a489
 810a428:	0810a489 	.word	0x0810a489
 810a42c:	0810a489 	.word	0x0810a489
 810a430:	0810a489 	.word	0x0810a489
 810a434:	0810a489 	.word	0x0810a489
 810a438:	0810a489 	.word	0x0810a489
 810a43c:	0810a489 	.word	0x0810a489
 810a440:	0810a48f 	.word	0x0810a48f
 810a444:	0810a489 	.word	0x0810a489
 810a448:	0810a489 	.word	0x0810a489
 810a44c:	0810a489 	.word	0x0810a489
 810a450:	0810a489 	.word	0x0810a489
 810a454:	0810a489 	.word	0x0810a489
 810a458:	0810a489 	.word	0x0810a489
 810a45c:	0810a489 	.word	0x0810a489
 810a460:	0810a48f 	.word	0x0810a48f
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 810a464:	687b      	ldr	r3, [r7, #4]
 810a466:	3304      	adds	r3, #4
 810a468:	2101      	movs	r1, #1
 810a46a:	4618      	mov	r0, r3
 810a46c:	f001 fc16 	bl	810bc9c <RCCEx_PLL2_Config>
 810a470:	4603      	mov	r3, r0
 810a472:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 810a474:	e00c      	b.n	810a490 <HAL_RCCEx_PeriphCLKConfig+0x838>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 810a476:	687b      	ldr	r3, [r7, #4]
 810a478:	3324      	adds	r3, #36	; 0x24
 810a47a:	2101      	movs	r1, #1
 810a47c:	4618      	mov	r0, r3
 810a47e:	f001 fcbf 	bl	810be00 <RCCEx_PLL3_Config>
 810a482:	4603      	mov	r3, r0
 810a484:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 810a486:	e003      	b.n	810a490 <HAL_RCCEx_PeriphCLKConfig+0x838>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 810a488:	2301      	movs	r3, #1
 810a48a:	75fb      	strb	r3, [r7, #23]
      break;
 810a48c:	e000      	b.n	810a490 <HAL_RCCEx_PeriphCLKConfig+0x838>
      break;
 810a48e:	bf00      	nop
    }

    if(ret == HAL_OK)
 810a490:	7dfb      	ldrb	r3, [r7, #23]
 810a492:	2b00      	cmp	r3, #0
 810a494:	d109      	bne.n	810a4aa <HAL_RCCEx_PeriphCLKConfig+0x852>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 810a496:	4b24      	ldr	r3, [pc, #144]	; (810a528 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 810a498:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810a49a:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 810a49e:	687b      	ldr	r3, [r7, #4]
 810a4a0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810a4a2:	4921      	ldr	r1, [pc, #132]	; (810a528 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 810a4a4:	4313      	orrs	r3, r2
 810a4a6:	654b      	str	r3, [r1, #84]	; 0x54
 810a4a8:	e001      	b.n	810a4ae <HAL_RCCEx_PeriphCLKConfig+0x856>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810a4aa:	7dfb      	ldrb	r3, [r7, #23]
 810a4ac:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 810a4ae:	687b      	ldr	r3, [r7, #4]
 810a4b0:	681b      	ldr	r3, [r3, #0]
 810a4b2:	f003 0302 	and.w	r3, r3, #2
 810a4b6:	2b00      	cmp	r3, #0
 810a4b8:	d03c      	beq.n	810a534 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 810a4ba:	687b      	ldr	r3, [r7, #4]
 810a4bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 810a4be:	2b05      	cmp	r3, #5
 810a4c0:	d820      	bhi.n	810a504 <HAL_RCCEx_PeriphCLKConfig+0x8ac>
 810a4c2:	a201      	add	r2, pc, #4	; (adr r2, 810a4c8 <HAL_RCCEx_PeriphCLKConfig+0x870>)
 810a4c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810a4c8:	0810a50b 	.word	0x0810a50b
 810a4cc:	0810a4e1 	.word	0x0810a4e1
 810a4d0:	0810a4f3 	.word	0x0810a4f3
 810a4d4:	0810a50b 	.word	0x0810a50b
 810a4d8:	0810a50b 	.word	0x0810a50b
 810a4dc:	0810a50b 	.word	0x0810a50b
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 810a4e0:	687b      	ldr	r3, [r7, #4]
 810a4e2:	3304      	adds	r3, #4
 810a4e4:	2101      	movs	r1, #1
 810a4e6:	4618      	mov	r0, r3
 810a4e8:	f001 fbd8 	bl	810bc9c <RCCEx_PLL2_Config>
 810a4ec:	4603      	mov	r3, r0
 810a4ee:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 810a4f0:	e00c      	b.n	810a50c <HAL_RCCEx_PeriphCLKConfig+0x8b4>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 810a4f2:	687b      	ldr	r3, [r7, #4]
 810a4f4:	3324      	adds	r3, #36	; 0x24
 810a4f6:	2101      	movs	r1, #1
 810a4f8:	4618      	mov	r0, r3
 810a4fa:	f001 fc81 	bl	810be00 <RCCEx_PLL3_Config>
 810a4fe:	4603      	mov	r3, r0
 810a500:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 810a502:	e003      	b.n	810a50c <HAL_RCCEx_PeriphCLKConfig+0x8b4>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 810a504:	2301      	movs	r3, #1
 810a506:	75fb      	strb	r3, [r7, #23]
      break;
 810a508:	e000      	b.n	810a50c <HAL_RCCEx_PeriphCLKConfig+0x8b4>
      break;
 810a50a:	bf00      	nop
    }

    if(ret == HAL_OK)
 810a50c:	7dfb      	ldrb	r3, [r7, #23]
 810a50e:	2b00      	cmp	r3, #0
 810a510:	d10e      	bne.n	810a530 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 810a512:	4b05      	ldr	r3, [pc, #20]	; (810a528 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 810a514:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810a516:	f023 0207 	bic.w	r2, r3, #7
 810a51a:	687b      	ldr	r3, [r7, #4]
 810a51c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 810a51e:	4902      	ldr	r1, [pc, #8]	; (810a528 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 810a520:	4313      	orrs	r3, r2
 810a522:	654b      	str	r3, [r1, #84]	; 0x54
 810a524:	e006      	b.n	810a534 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 810a526:	bf00      	nop
 810a528:	58024400 	.word	0x58024400
 810a52c:	58024800 	.word	0x58024800
    }
    else
    {
      /* set overall return value */
      status = ret;
 810a530:	7dfb      	ldrb	r3, [r7, #23]
 810a532:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 810a534:	687b      	ldr	r3, [r7, #4]
 810a536:	681b      	ldr	r3, [r3, #0]
 810a538:	f003 0304 	and.w	r3, r3, #4
 810a53c:	2b00      	cmp	r3, #0
 810a53e:	d039      	beq.n	810a5b4 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 810a540:	687b      	ldr	r3, [r7, #4]
 810a542:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 810a546:	2b05      	cmp	r3, #5
 810a548:	d820      	bhi.n	810a58c <HAL_RCCEx_PeriphCLKConfig+0x934>
 810a54a:	a201      	add	r2, pc, #4	; (adr r2, 810a550 <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 810a54c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810a550:	0810a593 	.word	0x0810a593
 810a554:	0810a569 	.word	0x0810a569
 810a558:	0810a57b 	.word	0x0810a57b
 810a55c:	0810a593 	.word	0x0810a593
 810a560:	0810a593 	.word	0x0810a593
 810a564:	0810a593 	.word	0x0810a593
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 810a568:	687b      	ldr	r3, [r7, #4]
 810a56a:	3304      	adds	r3, #4
 810a56c:	2101      	movs	r1, #1
 810a56e:	4618      	mov	r0, r3
 810a570:	f001 fb94 	bl	810bc9c <RCCEx_PLL2_Config>
 810a574:	4603      	mov	r3, r0
 810a576:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 810a578:	e00c      	b.n	810a594 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 810a57a:	687b      	ldr	r3, [r7, #4]
 810a57c:	3324      	adds	r3, #36	; 0x24
 810a57e:	2101      	movs	r1, #1
 810a580:	4618      	mov	r0, r3
 810a582:	f001 fc3d 	bl	810be00 <RCCEx_PLL3_Config>
 810a586:	4603      	mov	r3, r0
 810a588:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 810a58a:	e003      	b.n	810a594 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 810a58c:	2301      	movs	r3, #1
 810a58e:	75fb      	strb	r3, [r7, #23]
      break;
 810a590:	e000      	b.n	810a594 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 810a592:	bf00      	nop
    }

    if(ret == HAL_OK)
 810a594:	7dfb      	ldrb	r3, [r7, #23]
 810a596:	2b00      	cmp	r3, #0
 810a598:	d10a      	bne.n	810a5b0 <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 810a59a:	4bb7      	ldr	r3, [pc, #732]	; (810a878 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 810a59c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810a59e:	f023 0207 	bic.w	r2, r3, #7
 810a5a2:	687b      	ldr	r3, [r7, #4]
 810a5a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 810a5a8:	49b3      	ldr	r1, [pc, #716]	; (810a878 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 810a5aa:	4313      	orrs	r3, r2
 810a5ac:	658b      	str	r3, [r1, #88]	; 0x58
 810a5ae:	e001      	b.n	810a5b4 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810a5b0:	7dfb      	ldrb	r3, [r7, #23]
 810a5b2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 810a5b4:	687b      	ldr	r3, [r7, #4]
 810a5b6:	681b      	ldr	r3, [r3, #0]
 810a5b8:	f003 0320 	and.w	r3, r3, #32
 810a5bc:	2b00      	cmp	r3, #0
 810a5be:	d04b      	beq.n	810a658 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 810a5c0:	687b      	ldr	r3, [r7, #4]
 810a5c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 810a5c6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 810a5ca:	d02e      	beq.n	810a62a <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 810a5cc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 810a5d0:	d828      	bhi.n	810a624 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 810a5d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 810a5d6:	d02a      	beq.n	810a62e <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 810a5d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 810a5dc:	d822      	bhi.n	810a624 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 810a5de:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 810a5e2:	d026      	beq.n	810a632 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 810a5e4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 810a5e8:	d81c      	bhi.n	810a624 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 810a5ea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 810a5ee:	d010      	beq.n	810a612 <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 810a5f0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 810a5f4:	d816      	bhi.n	810a624 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 810a5f6:	2b00      	cmp	r3, #0
 810a5f8:	d01d      	beq.n	810a636 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 810a5fa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 810a5fe:	d111      	bne.n	810a624 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 810a600:	687b      	ldr	r3, [r7, #4]
 810a602:	3304      	adds	r3, #4
 810a604:	2100      	movs	r1, #0
 810a606:	4618      	mov	r0, r3
 810a608:	f001 fb48 	bl	810bc9c <RCCEx_PLL2_Config>
 810a60c:	4603      	mov	r3, r0
 810a60e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 810a610:	e012      	b.n	810a638 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 810a612:	687b      	ldr	r3, [r7, #4]
 810a614:	3324      	adds	r3, #36	; 0x24
 810a616:	2102      	movs	r1, #2
 810a618:	4618      	mov	r0, r3
 810a61a:	f001 fbf1 	bl	810be00 <RCCEx_PLL3_Config>
 810a61e:	4603      	mov	r3, r0
 810a620:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 810a622:	e009      	b.n	810a638 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 810a624:	2301      	movs	r3, #1
 810a626:	75fb      	strb	r3, [r7, #23]
      break;
 810a628:	e006      	b.n	810a638 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 810a62a:	bf00      	nop
 810a62c:	e004      	b.n	810a638 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 810a62e:	bf00      	nop
 810a630:	e002      	b.n	810a638 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 810a632:	bf00      	nop
 810a634:	e000      	b.n	810a638 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 810a636:	bf00      	nop
    }

    if(ret == HAL_OK)
 810a638:	7dfb      	ldrb	r3, [r7, #23]
 810a63a:	2b00      	cmp	r3, #0
 810a63c:	d10a      	bne.n	810a654 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 810a63e:	4b8e      	ldr	r3, [pc, #568]	; (810a878 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 810a640:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810a642:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 810a646:	687b      	ldr	r3, [r7, #4]
 810a648:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 810a64c:	498a      	ldr	r1, [pc, #552]	; (810a878 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 810a64e:	4313      	orrs	r3, r2
 810a650:	654b      	str	r3, [r1, #84]	; 0x54
 810a652:	e001      	b.n	810a658 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810a654:	7dfb      	ldrb	r3, [r7, #23]
 810a656:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 810a658:	687b      	ldr	r3, [r7, #4]
 810a65a:	681b      	ldr	r3, [r3, #0]
 810a65c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 810a660:	2b00      	cmp	r3, #0
 810a662:	d04b      	beq.n	810a6fc <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 810a664:	687b      	ldr	r3, [r7, #4]
 810a666:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 810a66a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 810a66e:	d02e      	beq.n	810a6ce <HAL_RCCEx_PeriphCLKConfig+0xa76>
 810a670:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 810a674:	d828      	bhi.n	810a6c8 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 810a676:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 810a67a:	d02a      	beq.n	810a6d2 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 810a67c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 810a680:	d822      	bhi.n	810a6c8 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 810a682:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 810a686:	d026      	beq.n	810a6d6 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 810a688:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 810a68c:	d81c      	bhi.n	810a6c8 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 810a68e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 810a692:	d010      	beq.n	810a6b6 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 810a694:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 810a698:	d816      	bhi.n	810a6c8 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 810a69a:	2b00      	cmp	r3, #0
 810a69c:	d01d      	beq.n	810a6da <HAL_RCCEx_PeriphCLKConfig+0xa82>
 810a69e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 810a6a2:	d111      	bne.n	810a6c8 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 810a6a4:	687b      	ldr	r3, [r7, #4]
 810a6a6:	3304      	adds	r3, #4
 810a6a8:	2100      	movs	r1, #0
 810a6aa:	4618      	mov	r0, r3
 810a6ac:	f001 faf6 	bl	810bc9c <RCCEx_PLL2_Config>
 810a6b0:	4603      	mov	r3, r0
 810a6b2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 810a6b4:	e012      	b.n	810a6dc <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 810a6b6:	687b      	ldr	r3, [r7, #4]
 810a6b8:	3324      	adds	r3, #36	; 0x24
 810a6ba:	2102      	movs	r1, #2
 810a6bc:	4618      	mov	r0, r3
 810a6be:	f001 fb9f 	bl	810be00 <RCCEx_PLL3_Config>
 810a6c2:	4603      	mov	r3, r0
 810a6c4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 810a6c6:	e009      	b.n	810a6dc <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 810a6c8:	2301      	movs	r3, #1
 810a6ca:	75fb      	strb	r3, [r7, #23]
      break;
 810a6cc:	e006      	b.n	810a6dc <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 810a6ce:	bf00      	nop
 810a6d0:	e004      	b.n	810a6dc <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 810a6d2:	bf00      	nop
 810a6d4:	e002      	b.n	810a6dc <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 810a6d6:	bf00      	nop
 810a6d8:	e000      	b.n	810a6dc <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 810a6da:	bf00      	nop
    }

    if(ret == HAL_OK)
 810a6dc:	7dfb      	ldrb	r3, [r7, #23]
 810a6de:	2b00      	cmp	r3, #0
 810a6e0:	d10a      	bne.n	810a6f8 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 810a6e2:	4b65      	ldr	r3, [pc, #404]	; (810a878 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 810a6e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810a6e6:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 810a6ea:	687b      	ldr	r3, [r7, #4]
 810a6ec:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 810a6f0:	4961      	ldr	r1, [pc, #388]	; (810a878 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 810a6f2:	4313      	orrs	r3, r2
 810a6f4:	658b      	str	r3, [r1, #88]	; 0x58
 810a6f6:	e001      	b.n	810a6fc <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810a6f8:	7dfb      	ldrb	r3, [r7, #23]
 810a6fa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 810a6fc:	687b      	ldr	r3, [r7, #4]
 810a6fe:	681b      	ldr	r3, [r3, #0]
 810a700:	f003 0380 	and.w	r3, r3, #128	; 0x80
 810a704:	2b00      	cmp	r3, #0
 810a706:	d04b      	beq.n	810a7a0 <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 810a708:	687b      	ldr	r3, [r7, #4]
 810a70a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 810a70e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 810a712:	d02e      	beq.n	810a772 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 810a714:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 810a718:	d828      	bhi.n	810a76c <HAL_RCCEx_PeriphCLKConfig+0xb14>
 810a71a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 810a71e:	d02a      	beq.n	810a776 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 810a720:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 810a724:	d822      	bhi.n	810a76c <HAL_RCCEx_PeriphCLKConfig+0xb14>
 810a726:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 810a72a:	d026      	beq.n	810a77a <HAL_RCCEx_PeriphCLKConfig+0xb22>
 810a72c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 810a730:	d81c      	bhi.n	810a76c <HAL_RCCEx_PeriphCLKConfig+0xb14>
 810a732:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 810a736:	d010      	beq.n	810a75a <HAL_RCCEx_PeriphCLKConfig+0xb02>
 810a738:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 810a73c:	d816      	bhi.n	810a76c <HAL_RCCEx_PeriphCLKConfig+0xb14>
 810a73e:	2b00      	cmp	r3, #0
 810a740:	d01d      	beq.n	810a77e <HAL_RCCEx_PeriphCLKConfig+0xb26>
 810a742:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 810a746:	d111      	bne.n	810a76c <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 810a748:	687b      	ldr	r3, [r7, #4]
 810a74a:	3304      	adds	r3, #4
 810a74c:	2100      	movs	r1, #0
 810a74e:	4618      	mov	r0, r3
 810a750:	f001 faa4 	bl	810bc9c <RCCEx_PLL2_Config>
 810a754:	4603      	mov	r3, r0
 810a756:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 810a758:	e012      	b.n	810a780 <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 810a75a:	687b      	ldr	r3, [r7, #4]
 810a75c:	3324      	adds	r3, #36	; 0x24
 810a75e:	2102      	movs	r1, #2
 810a760:	4618      	mov	r0, r3
 810a762:	f001 fb4d 	bl	810be00 <RCCEx_PLL3_Config>
 810a766:	4603      	mov	r3, r0
 810a768:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 810a76a:	e009      	b.n	810a780 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 810a76c:	2301      	movs	r3, #1
 810a76e:	75fb      	strb	r3, [r7, #23]
      break;
 810a770:	e006      	b.n	810a780 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 810a772:	bf00      	nop
 810a774:	e004      	b.n	810a780 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 810a776:	bf00      	nop
 810a778:	e002      	b.n	810a780 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 810a77a:	bf00      	nop
 810a77c:	e000      	b.n	810a780 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 810a77e:	bf00      	nop
    }

    if(ret == HAL_OK)
 810a780:	7dfb      	ldrb	r3, [r7, #23]
 810a782:	2b00      	cmp	r3, #0
 810a784:	d10a      	bne.n	810a79c <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 810a786:	4b3c      	ldr	r3, [pc, #240]	; (810a878 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 810a788:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810a78a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 810a78e:	687b      	ldr	r3, [r7, #4]
 810a790:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 810a794:	4938      	ldr	r1, [pc, #224]	; (810a878 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 810a796:	4313      	orrs	r3, r2
 810a798:	658b      	str	r3, [r1, #88]	; 0x58
 810a79a:	e001      	b.n	810a7a0 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810a79c:	7dfb      	ldrb	r3, [r7, #23]
 810a79e:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 810a7a0:	687b      	ldr	r3, [r7, #4]
 810a7a2:	681b      	ldr	r3, [r3, #0]
 810a7a4:	f003 0308 	and.w	r3, r3, #8
 810a7a8:	2b00      	cmp	r3, #0
 810a7aa:	d01a      	beq.n	810a7e2 <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 810a7ac:	687b      	ldr	r3, [r7, #4]
 810a7ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 810a7b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 810a7b6:	d10a      	bne.n	810a7ce <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 810a7b8:	687b      	ldr	r3, [r7, #4]
 810a7ba:	3324      	adds	r3, #36	; 0x24
 810a7bc:	2102      	movs	r1, #2
 810a7be:	4618      	mov	r0, r3
 810a7c0:	f001 fb1e 	bl	810be00 <RCCEx_PLL3_Config>
 810a7c4:	4603      	mov	r3, r0
 810a7c6:	2b00      	cmp	r3, #0
 810a7c8:	d001      	beq.n	810a7ce <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 810a7ca:	2301      	movs	r3, #1
 810a7cc:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 810a7ce:	4b2a      	ldr	r3, [pc, #168]	; (810a878 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 810a7d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810a7d2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 810a7d6:	687b      	ldr	r3, [r7, #4]
 810a7d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 810a7dc:	4926      	ldr	r1, [pc, #152]	; (810a878 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 810a7de:	4313      	orrs	r3, r2
 810a7e0:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 810a7e2:	687b      	ldr	r3, [r7, #4]
 810a7e4:	681b      	ldr	r3, [r3, #0]
 810a7e6:	f003 0310 	and.w	r3, r3, #16
 810a7ea:	2b00      	cmp	r3, #0
 810a7ec:	d01a      	beq.n	810a824 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 810a7ee:	687b      	ldr	r3, [r7, #4]
 810a7f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 810a7f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810a7f8:	d10a      	bne.n	810a810 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 810a7fa:	687b      	ldr	r3, [r7, #4]
 810a7fc:	3324      	adds	r3, #36	; 0x24
 810a7fe:	2102      	movs	r1, #2
 810a800:	4618      	mov	r0, r3
 810a802:	f001 fafd 	bl	810be00 <RCCEx_PLL3_Config>
 810a806:	4603      	mov	r3, r0
 810a808:	2b00      	cmp	r3, #0
 810a80a:	d001      	beq.n	810a810 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 810a80c:	2301      	movs	r3, #1
 810a80e:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 810a810:	4b19      	ldr	r3, [pc, #100]	; (810a878 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 810a812:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810a814:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 810a818:	687b      	ldr	r3, [r7, #4]
 810a81a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 810a81e:	4916      	ldr	r1, [pc, #88]	; (810a878 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 810a820:	4313      	orrs	r3, r2
 810a822:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 810a824:	687b      	ldr	r3, [r7, #4]
 810a826:	681b      	ldr	r3, [r3, #0]
 810a828:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 810a82c:	2b00      	cmp	r3, #0
 810a82e:	d036      	beq.n	810a89e <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 810a830:	687b      	ldr	r3, [r7, #4]
 810a832:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 810a836:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 810a83a:	d01f      	beq.n	810a87c <HAL_RCCEx_PeriphCLKConfig+0xc24>
 810a83c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 810a840:	d817      	bhi.n	810a872 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 810a842:	2b00      	cmp	r3, #0
 810a844:	d003      	beq.n	810a84e <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 810a846:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 810a84a:	d009      	beq.n	810a860 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 810a84c:	e011      	b.n	810a872 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 810a84e:	687b      	ldr	r3, [r7, #4]
 810a850:	3304      	adds	r3, #4
 810a852:	2100      	movs	r1, #0
 810a854:	4618      	mov	r0, r3
 810a856:	f001 fa21 	bl	810bc9c <RCCEx_PLL2_Config>
 810a85a:	4603      	mov	r3, r0
 810a85c:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 810a85e:	e00e      	b.n	810a87e <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 810a860:	687b      	ldr	r3, [r7, #4]
 810a862:	3324      	adds	r3, #36	; 0x24
 810a864:	2102      	movs	r1, #2
 810a866:	4618      	mov	r0, r3
 810a868:	f001 faca 	bl	810be00 <RCCEx_PLL3_Config>
 810a86c:	4603      	mov	r3, r0
 810a86e:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 810a870:	e005      	b.n	810a87e <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 810a872:	2301      	movs	r3, #1
 810a874:	75fb      	strb	r3, [r7, #23]
      break;
 810a876:	e002      	b.n	810a87e <HAL_RCCEx_PeriphCLKConfig+0xc26>
 810a878:	58024400 	.word	0x58024400
      break;
 810a87c:	bf00      	nop
    }

    if(ret == HAL_OK)
 810a87e:	7dfb      	ldrb	r3, [r7, #23]
 810a880:	2b00      	cmp	r3, #0
 810a882:	d10a      	bne.n	810a89a <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 810a884:	4b93      	ldr	r3, [pc, #588]	; (810aad4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 810a886:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810a888:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 810a88c:	687b      	ldr	r3, [r7, #4]
 810a88e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 810a892:	4990      	ldr	r1, [pc, #576]	; (810aad4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 810a894:	4313      	orrs	r3, r2
 810a896:	658b      	str	r3, [r1, #88]	; 0x58
 810a898:	e001      	b.n	810a89e <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810a89a:	7dfb      	ldrb	r3, [r7, #23]
 810a89c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 810a89e:	687b      	ldr	r3, [r7, #4]
 810a8a0:	681b      	ldr	r3, [r3, #0]
 810a8a2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 810a8a6:	2b00      	cmp	r3, #0
 810a8a8:	d033      	beq.n	810a912 <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 810a8aa:	687b      	ldr	r3, [r7, #4]
 810a8ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810a8b0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 810a8b4:	d01c      	beq.n	810a8f0 <HAL_RCCEx_PeriphCLKConfig+0xc98>
 810a8b6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 810a8ba:	d816      	bhi.n	810a8ea <HAL_RCCEx_PeriphCLKConfig+0xc92>
 810a8bc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 810a8c0:	d003      	beq.n	810a8ca <HAL_RCCEx_PeriphCLKConfig+0xc72>
 810a8c2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 810a8c6:	d007      	beq.n	810a8d8 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 810a8c8:	e00f      	b.n	810a8ea <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810a8ca:	4b82      	ldr	r3, [pc, #520]	; (810aad4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 810a8cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810a8ce:	4a81      	ldr	r2, [pc, #516]	; (810aad4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 810a8d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 810a8d4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 810a8d6:	e00c      	b.n	810a8f2 <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 810a8d8:	687b      	ldr	r3, [r7, #4]
 810a8da:	3324      	adds	r3, #36	; 0x24
 810a8dc:	2101      	movs	r1, #1
 810a8de:	4618      	mov	r0, r3
 810a8e0:	f001 fa8e 	bl	810be00 <RCCEx_PLL3_Config>
 810a8e4:	4603      	mov	r3, r0
 810a8e6:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 810a8e8:	e003      	b.n	810a8f2 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 810a8ea:	2301      	movs	r3, #1
 810a8ec:	75fb      	strb	r3, [r7, #23]
      break;
 810a8ee:	e000      	b.n	810a8f2 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 810a8f0:	bf00      	nop
    }

    if(ret == HAL_OK)
 810a8f2:	7dfb      	ldrb	r3, [r7, #23]
 810a8f4:	2b00      	cmp	r3, #0
 810a8f6:	d10a      	bne.n	810a90e <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 810a8f8:	4b76      	ldr	r3, [pc, #472]	; (810aad4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 810a8fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810a8fc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 810a900:	687b      	ldr	r3, [r7, #4]
 810a902:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810a906:	4973      	ldr	r1, [pc, #460]	; (810aad4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 810a908:	4313      	orrs	r3, r2
 810a90a:	654b      	str	r3, [r1, #84]	; 0x54
 810a90c:	e001      	b.n	810a912 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810a90e:	7dfb      	ldrb	r3, [r7, #23]
 810a910:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 810a912:	687b      	ldr	r3, [r7, #4]
 810a914:	681b      	ldr	r3, [r3, #0]
 810a916:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 810a91a:	2b00      	cmp	r3, #0
 810a91c:	d029      	beq.n	810a972 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 810a91e:	687b      	ldr	r3, [r7, #4]
 810a920:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 810a922:	2b00      	cmp	r3, #0
 810a924:	d003      	beq.n	810a92e <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 810a926:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 810a92a:	d007      	beq.n	810a93c <HAL_RCCEx_PeriphCLKConfig+0xce4>
 810a92c:	e00f      	b.n	810a94e <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810a92e:	4b69      	ldr	r3, [pc, #420]	; (810aad4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 810a930:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810a932:	4a68      	ldr	r2, [pc, #416]	; (810aad4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 810a934:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 810a938:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 810a93a:	e00b      	b.n	810a954 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 810a93c:	687b      	ldr	r3, [r7, #4]
 810a93e:	3304      	adds	r3, #4
 810a940:	2102      	movs	r1, #2
 810a942:	4618      	mov	r0, r3
 810a944:	f001 f9aa 	bl	810bc9c <RCCEx_PLL2_Config>
 810a948:	4603      	mov	r3, r0
 810a94a:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 810a94c:	e002      	b.n	810a954 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 810a94e:	2301      	movs	r3, #1
 810a950:	75fb      	strb	r3, [r7, #23]
      break;
 810a952:	bf00      	nop
    }

    if(ret == HAL_OK)
 810a954:	7dfb      	ldrb	r3, [r7, #23]
 810a956:	2b00      	cmp	r3, #0
 810a958:	d109      	bne.n	810a96e <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 810a95a:	4b5e      	ldr	r3, [pc, #376]	; (810aad4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 810a95c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 810a95e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 810a962:	687b      	ldr	r3, [r7, #4]
 810a964:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 810a966:	495b      	ldr	r1, [pc, #364]	; (810aad4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 810a968:	4313      	orrs	r3, r2
 810a96a:	64cb      	str	r3, [r1, #76]	; 0x4c
 810a96c:	e001      	b.n	810a972 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810a96e:	7dfb      	ldrb	r3, [r7, #23]
 810a970:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 810a972:	687b      	ldr	r3, [r7, #4]
 810a974:	681b      	ldr	r3, [r3, #0]
 810a976:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 810a97a:	2b00      	cmp	r3, #0
 810a97c:	d00a      	beq.n	810a994 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 810a97e:	687b      	ldr	r3, [r7, #4]
 810a980:	3324      	adds	r3, #36	; 0x24
 810a982:	2102      	movs	r1, #2
 810a984:	4618      	mov	r0, r3
 810a986:	f001 fa3b 	bl	810be00 <RCCEx_PLL3_Config>
 810a98a:	4603      	mov	r3, r0
 810a98c:	2b00      	cmp	r3, #0
 810a98e:	d001      	beq.n	810a994 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 810a990:	2301      	movs	r3, #1
 810a992:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 810a994:	687b      	ldr	r3, [r7, #4]
 810a996:	681b      	ldr	r3, [r3, #0]
 810a998:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 810a99c:	2b00      	cmp	r3, #0
 810a99e:	d030      	beq.n	810aa02 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 810a9a0:	687b      	ldr	r3, [r7, #4]
 810a9a2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810a9a4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 810a9a8:	d017      	beq.n	810a9da <HAL_RCCEx_PeriphCLKConfig+0xd82>
 810a9aa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 810a9ae:	d811      	bhi.n	810a9d4 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 810a9b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 810a9b4:	d013      	beq.n	810a9de <HAL_RCCEx_PeriphCLKConfig+0xd86>
 810a9b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 810a9ba:	d80b      	bhi.n	810a9d4 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 810a9bc:	2b00      	cmp	r3, #0
 810a9be:	d010      	beq.n	810a9e2 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 810a9c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810a9c4:	d106      	bne.n	810a9d4 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810a9c6:	4b43      	ldr	r3, [pc, #268]	; (810aad4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 810a9c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810a9ca:	4a42      	ldr	r2, [pc, #264]	; (810aad4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 810a9cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 810a9d0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 810a9d2:	e007      	b.n	810a9e4 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 810a9d4:	2301      	movs	r3, #1
 810a9d6:	75fb      	strb	r3, [r7, #23]
      break;
 810a9d8:	e004      	b.n	810a9e4 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 810a9da:	bf00      	nop
 810a9dc:	e002      	b.n	810a9e4 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 810a9de:	bf00      	nop
 810a9e0:	e000      	b.n	810a9e4 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 810a9e2:	bf00      	nop
    }

    if(ret == HAL_OK)
 810a9e4:	7dfb      	ldrb	r3, [r7, #23]
 810a9e6:	2b00      	cmp	r3, #0
 810a9e8:	d109      	bne.n	810a9fe <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 810a9ea:	4b3a      	ldr	r3, [pc, #232]	; (810aad4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 810a9ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810a9ee:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 810a9f2:	687b      	ldr	r3, [r7, #4]
 810a9f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810a9f6:	4937      	ldr	r1, [pc, #220]	; (810aad4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 810a9f8:	4313      	orrs	r3, r2
 810a9fa:	654b      	str	r3, [r1, #84]	; 0x54
 810a9fc:	e001      	b.n	810aa02 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810a9fe:	7dfb      	ldrb	r3, [r7, #23]
 810aa00:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 810aa02:	687b      	ldr	r3, [r7, #4]
 810aa04:	681b      	ldr	r3, [r3, #0]
 810aa06:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 810aa0a:	2b00      	cmp	r3, #0
 810aa0c:	d008      	beq.n	810aa20 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 810aa0e:	4b31      	ldr	r3, [pc, #196]	; (810aad4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 810aa10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810aa12:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 810aa16:	687b      	ldr	r3, [r7, #4]
 810aa18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 810aa1a:	492e      	ldr	r1, [pc, #184]	; (810aad4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 810aa1c:	4313      	orrs	r3, r2
 810aa1e:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 810aa20:	687b      	ldr	r3, [r7, #4]
 810aa22:	681b      	ldr	r3, [r3, #0]
 810aa24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 810aa28:	2b00      	cmp	r3, #0
 810aa2a:	d009      	beq.n	810aa40 <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 810aa2c:	4b29      	ldr	r3, [pc, #164]	; (810aad4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 810aa2e:	691b      	ldr	r3, [r3, #16]
 810aa30:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 810aa34:	687b      	ldr	r3, [r7, #4]
 810aa36:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 810aa3a:	4926      	ldr	r1, [pc, #152]	; (810aad4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 810aa3c:	4313      	orrs	r3, r2
 810aa3e:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 810aa40:	687b      	ldr	r3, [r7, #4]
 810aa42:	681b      	ldr	r3, [r3, #0]
 810aa44:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 810aa48:	2b00      	cmp	r3, #0
 810aa4a:	d008      	beq.n	810aa5e <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 810aa4c:	4b21      	ldr	r3, [pc, #132]	; (810aad4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 810aa4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810aa50:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 810aa54:	687b      	ldr	r3, [r7, #4]
 810aa56:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 810aa58:	491e      	ldr	r1, [pc, #120]	; (810aad4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 810aa5a:	4313      	orrs	r3, r2
 810aa5c:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 810aa5e:	687b      	ldr	r3, [r7, #4]
 810aa60:	681b      	ldr	r3, [r3, #0]
 810aa62:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 810aa66:	2b00      	cmp	r3, #0
 810aa68:	d00d      	beq.n	810aa86 <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 810aa6a:	4b1a      	ldr	r3, [pc, #104]	; (810aad4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 810aa6c:	691b      	ldr	r3, [r3, #16]
 810aa6e:	4a19      	ldr	r2, [pc, #100]	; (810aad4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 810aa70:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 810aa74:	6113      	str	r3, [r2, #16]
 810aa76:	4b17      	ldr	r3, [pc, #92]	; (810aad4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 810aa78:	691a      	ldr	r2, [r3, #16]
 810aa7a:	687b      	ldr	r3, [r7, #4]
 810aa7c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 810aa80:	4914      	ldr	r1, [pc, #80]	; (810aad4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 810aa82:	4313      	orrs	r3, r2
 810aa84:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 810aa86:	687b      	ldr	r3, [r7, #4]
 810aa88:	681b      	ldr	r3, [r3, #0]
 810aa8a:	2b00      	cmp	r3, #0
 810aa8c:	da08      	bge.n	810aaa0 <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 810aa8e:	4b11      	ldr	r3, [pc, #68]	; (810aad4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 810aa90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 810aa92:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 810aa96:	687b      	ldr	r3, [r7, #4]
 810aa98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810aa9a:	490e      	ldr	r1, [pc, #56]	; (810aad4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 810aa9c:	4313      	orrs	r3, r2
 810aa9e:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 810aaa0:	687b      	ldr	r3, [r7, #4]
 810aaa2:	681b      	ldr	r3, [r3, #0]
 810aaa4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 810aaa8:	2b00      	cmp	r3, #0
 810aaaa:	d009      	beq.n	810aac0 <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 810aaac:	4b09      	ldr	r3, [pc, #36]	; (810aad4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 810aaae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810aab0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 810aab4:	687b      	ldr	r3, [r7, #4]
 810aab6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 810aaba:	4906      	ldr	r1, [pc, #24]	; (810aad4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 810aabc:	4313      	orrs	r3, r2
 810aabe:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 810aac0:	7dbb      	ldrb	r3, [r7, #22]
 810aac2:	2b00      	cmp	r3, #0
 810aac4:	d101      	bne.n	810aaca <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 810aac6:	2300      	movs	r3, #0
 810aac8:	e000      	b.n	810aacc <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 810aaca:	2301      	movs	r3, #1
}
 810aacc:	4618      	mov	r0, r3
 810aace:	3718      	adds	r7, #24
 810aad0:	46bd      	mov	sp, r7
 810aad2:	bd80      	pop	{r7, pc}
 810aad4:	58024400 	.word	0x58024400

0810aad8 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 810aad8:	b580      	push	{r7, lr}
 810aada:	b090      	sub	sp, #64	; 0x40
 810aadc:	af00      	add	r7, sp, #0
 810aade:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 810aae0:	687b      	ldr	r3, [r7, #4]
 810aae2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810aae6:	f040 8095 	bne.w	810ac14 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 810aaea:	4bae      	ldr	r3, [pc, #696]	; (810ada4 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 810aaec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810aaee:	f003 0307 	and.w	r3, r3, #7
 810aaf2:	633b      	str	r3, [r7, #48]	; 0x30
 810aaf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810aaf6:	2b04      	cmp	r3, #4
 810aaf8:	f200 8088 	bhi.w	810ac0c <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 810aafc:	a201      	add	r2, pc, #4	; (adr r2, 810ab04 <HAL_RCCEx_GetPeriphCLKFreq+0x2c>)
 810aafe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810ab02:	bf00      	nop
 810ab04:	0810ab19 	.word	0x0810ab19
 810ab08:	0810ab41 	.word	0x0810ab41
 810ab0c:	0810ab69 	.word	0x0810ab69
 810ab10:	0810ac05 	.word	0x0810ac05
 810ab14:	0810ab91 	.word	0x0810ab91

      switch (saiclocksource)
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 810ab18:	4ba2      	ldr	r3, [pc, #648]	; (810ada4 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 810ab1a:	681b      	ldr	r3, [r3, #0]
 810ab1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 810ab20:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 810ab24:	d108      	bne.n	810ab38 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 810ab26:	f107 0324 	add.w	r3, r7, #36	; 0x24
 810ab2a:	4618      	mov	r0, r3
 810ab2c:	f000 ff64 	bl	810b9f8 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 810ab30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810ab32:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 810ab34:	f000 bc95 	b.w	810b462 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 810ab38:	2300      	movs	r3, #0
 810ab3a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 810ab3c:	f000 bc91 	b.w	810b462 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 810ab40:	4b98      	ldr	r3, [pc, #608]	; (810ada4 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 810ab42:	681b      	ldr	r3, [r3, #0]
 810ab44:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 810ab48:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 810ab4c:	d108      	bne.n	810ab60 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810ab4e:	f107 0318 	add.w	r3, r7, #24
 810ab52:	4618      	mov	r0, r3
 810ab54:	f000 fca8 	bl	810b4a8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 810ab58:	69bb      	ldr	r3, [r7, #24]
 810ab5a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 810ab5c:	f000 bc81 	b.w	810b462 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 810ab60:	2300      	movs	r3, #0
 810ab62:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 810ab64:	f000 bc7d 	b.w	810b462 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 810ab68:	4b8e      	ldr	r3, [pc, #568]	; (810ada4 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 810ab6a:	681b      	ldr	r3, [r3, #0]
 810ab6c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 810ab70:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 810ab74:	d108      	bne.n	810ab88 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810ab76:	f107 030c 	add.w	r3, r7, #12
 810ab7a:	4618      	mov	r0, r3
 810ab7c:	f000 fde8 	bl	810b750 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 810ab80:	68fb      	ldr	r3, [r7, #12]
 810ab82:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 810ab84:	f000 bc6d 	b.w	810b462 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 810ab88:	2300      	movs	r3, #0
 810ab8a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 810ab8c:	f000 bc69 	b.w	810b462 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 810ab90:	4b84      	ldr	r3, [pc, #528]	; (810ada4 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 810ab92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 810ab94:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 810ab98:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 810ab9a:	4b82      	ldr	r3, [pc, #520]	; (810ada4 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 810ab9c:	681b      	ldr	r3, [r3, #0]
 810ab9e:	f003 0304 	and.w	r3, r3, #4
 810aba2:	2b04      	cmp	r3, #4
 810aba4:	d10c      	bne.n	810abc0 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 810aba6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 810aba8:	2b00      	cmp	r3, #0
 810abaa:	d109      	bne.n	810abc0 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 810abac:	4b7d      	ldr	r3, [pc, #500]	; (810ada4 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 810abae:	681b      	ldr	r3, [r3, #0]
 810abb0:	08db      	lsrs	r3, r3, #3
 810abb2:	f003 0303 	and.w	r3, r3, #3
 810abb6:	4a7c      	ldr	r2, [pc, #496]	; (810ada8 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 810abb8:	fa22 f303 	lsr.w	r3, r2, r3
 810abbc:	63fb      	str	r3, [r7, #60]	; 0x3c
 810abbe:	e01f      	b.n	810ac00 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 810abc0:	4b78      	ldr	r3, [pc, #480]	; (810ada4 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 810abc2:	681b      	ldr	r3, [r3, #0]
 810abc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 810abc8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810abcc:	d106      	bne.n	810abdc <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 810abce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 810abd0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 810abd4:	d102      	bne.n	810abdc <HAL_RCCEx_GetPeriphCLKFreq+0x104>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 810abd6:	4b75      	ldr	r3, [pc, #468]	; (810adac <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 810abd8:	63fb      	str	r3, [r7, #60]	; 0x3c
 810abda:	e011      	b.n	810ac00 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 810abdc:	4b71      	ldr	r3, [pc, #452]	; (810ada4 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 810abde:	681b      	ldr	r3, [r3, #0]
 810abe0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 810abe4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 810abe8:	d106      	bne.n	810abf8 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 810abea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 810abec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 810abf0:	d102      	bne.n	810abf8 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 810abf2:	4b6f      	ldr	r3, [pc, #444]	; (810adb0 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 810abf4:	63fb      	str	r3, [r7, #60]	; 0x3c
 810abf6:	e003      	b.n	810ac00 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 810abf8:	2300      	movs	r3, #0
 810abfa:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 810abfc:	f000 bc31 	b.w	810b462 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 810ac00:	f000 bc2f 	b.w	810b462 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 810ac04:	4b6b      	ldr	r3, [pc, #428]	; (810adb4 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 810ac06:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 810ac08:	f000 bc2b 	b.w	810b462 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 810ac0c:	2300      	movs	r3, #0
 810ac0e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 810ac10:	f000 bc27 	b.w	810b462 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 810ac14:	687b      	ldr	r3, [r7, #4]
 810ac16:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 810ac1a:	f040 8095 	bne.w	810ad48 <HAL_RCCEx_GetPeriphCLKFreq+0x270>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 810ac1e:	4b61      	ldr	r3, [pc, #388]	; (810ada4 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 810ac20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810ac22:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 810ac26:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 810ac28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810ac2a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810ac2e:	d04d      	beq.n	810accc <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
 810ac30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810ac32:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810ac36:	f200 8084 	bhi.w	810ad42 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 810ac3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810ac3c:	2bc0      	cmp	r3, #192	; 0xc0
 810ac3e:	d07d      	beq.n	810ad3c <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 810ac40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810ac42:	2bc0      	cmp	r3, #192	; 0xc0
 810ac44:	d87d      	bhi.n	810ad42 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 810ac46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810ac48:	2b80      	cmp	r3, #128	; 0x80
 810ac4a:	d02d      	beq.n	810aca8 <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 810ac4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810ac4e:	2b80      	cmp	r3, #128	; 0x80
 810ac50:	d877      	bhi.n	810ad42 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 810ac52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810ac54:	2b00      	cmp	r3, #0
 810ac56:	d003      	beq.n	810ac60 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
 810ac58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810ac5a:	2b40      	cmp	r3, #64	; 0x40
 810ac5c:	d012      	beq.n	810ac84 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 810ac5e:	e070      	b.n	810ad42 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
      {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 810ac60:	4b50      	ldr	r3, [pc, #320]	; (810ada4 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 810ac62:	681b      	ldr	r3, [r3, #0]
 810ac64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 810ac68:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 810ac6c:	d107      	bne.n	810ac7e <HAL_RCCEx_GetPeriphCLKFreq+0x1a6>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 810ac6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 810ac72:	4618      	mov	r0, r3
 810ac74:	f000 fec0 	bl	810b9f8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 810ac78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810ac7a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 810ac7c:	e3f1      	b.n	810b462 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 810ac7e:	2300      	movs	r3, #0
 810ac80:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 810ac82:	e3ee      	b.n	810b462 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 810ac84:	4b47      	ldr	r3, [pc, #284]	; (810ada4 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 810ac86:	681b      	ldr	r3, [r3, #0]
 810ac88:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 810ac8c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 810ac90:	d107      	bne.n	810aca2 <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810ac92:	f107 0318 	add.w	r3, r7, #24
 810ac96:	4618      	mov	r0, r3
 810ac98:	f000 fc06 	bl	810b4a8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 810ac9c:	69bb      	ldr	r3, [r7, #24]
 810ac9e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 810aca0:	e3df      	b.n	810b462 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 810aca2:	2300      	movs	r3, #0
 810aca4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 810aca6:	e3dc      	b.n	810b462 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 810aca8:	4b3e      	ldr	r3, [pc, #248]	; (810ada4 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 810acaa:	681b      	ldr	r3, [r3, #0]
 810acac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 810acb0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 810acb4:	d107      	bne.n	810acc6 <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810acb6:	f107 030c 	add.w	r3, r7, #12
 810acba:	4618      	mov	r0, r3
 810acbc:	f000 fd48 	bl	810b750 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 810acc0:	68fb      	ldr	r3, [r7, #12]
 810acc2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 810acc4:	e3cd      	b.n	810b462 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 810acc6:	2300      	movs	r3, #0
 810acc8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 810acca:	e3ca      	b.n	810b462 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 810accc:	4b35      	ldr	r3, [pc, #212]	; (810ada4 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 810acce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 810acd0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 810acd4:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 810acd6:	4b33      	ldr	r3, [pc, #204]	; (810ada4 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 810acd8:	681b      	ldr	r3, [r3, #0]
 810acda:	f003 0304 	and.w	r3, r3, #4
 810acde:	2b04      	cmp	r3, #4
 810ace0:	d10c      	bne.n	810acfc <HAL_RCCEx_GetPeriphCLKFreq+0x224>
 810ace2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 810ace4:	2b00      	cmp	r3, #0
 810ace6:	d109      	bne.n	810acfc <HAL_RCCEx_GetPeriphCLKFreq+0x224>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 810ace8:	4b2e      	ldr	r3, [pc, #184]	; (810ada4 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 810acea:	681b      	ldr	r3, [r3, #0]
 810acec:	08db      	lsrs	r3, r3, #3
 810acee:	f003 0303 	and.w	r3, r3, #3
 810acf2:	4a2d      	ldr	r2, [pc, #180]	; (810ada8 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 810acf4:	fa22 f303 	lsr.w	r3, r2, r3
 810acf8:	63fb      	str	r3, [r7, #60]	; 0x3c
 810acfa:	e01e      	b.n	810ad3a <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 810acfc:	4b29      	ldr	r3, [pc, #164]	; (810ada4 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 810acfe:	681b      	ldr	r3, [r3, #0]
 810ad00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 810ad04:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810ad08:	d106      	bne.n	810ad18 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
 810ad0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 810ad0c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 810ad10:	d102      	bne.n	810ad18 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 810ad12:	4b26      	ldr	r3, [pc, #152]	; (810adac <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 810ad14:	63fb      	str	r3, [r7, #60]	; 0x3c
 810ad16:	e010      	b.n	810ad3a <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 810ad18:	4b22      	ldr	r3, [pc, #136]	; (810ada4 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 810ad1a:	681b      	ldr	r3, [r3, #0]
 810ad1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 810ad20:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 810ad24:	d106      	bne.n	810ad34 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
 810ad26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 810ad28:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 810ad2c:	d102      	bne.n	810ad34 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 810ad2e:	4b20      	ldr	r3, [pc, #128]	; (810adb0 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 810ad30:	63fb      	str	r3, [r7, #60]	; 0x3c
 810ad32:	e002      	b.n	810ad3a <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 810ad34:	2300      	movs	r3, #0
 810ad36:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 810ad38:	e393      	b.n	810b462 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 810ad3a:	e392      	b.n	810b462 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 810ad3c:	4b1d      	ldr	r3, [pc, #116]	; (810adb4 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 810ad3e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 810ad40:	e38f      	b.n	810b462 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 810ad42:	2300      	movs	r3, #0
 810ad44:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 810ad46:	e38c      	b.n	810b462 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 810ad48:	687b      	ldr	r3, [r7, #4]
 810ad4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 810ad4e:	f040 80a7 	bne.w	810aea0 <HAL_RCCEx_GetPeriphCLKFreq+0x3c8>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 810ad52:	4b14      	ldr	r3, [pc, #80]	; (810ada4 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 810ad54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810ad56:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 810ad5a:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 810ad5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810ad5e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 810ad62:	d05f      	beq.n	810ae24 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 810ad64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810ad66:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 810ad6a:	f200 8096 	bhi.w	810ae9a <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 810ad6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810ad70:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 810ad74:	f000 808e 	beq.w	810ae94 <HAL_RCCEx_GetPeriphCLKFreq+0x3bc>
 810ad78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810ad7a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 810ad7e:	f200 808c 	bhi.w	810ae9a <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 810ad82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810ad84:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 810ad88:	d03a      	beq.n	810ae00 <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 810ad8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810ad8c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 810ad90:	f200 8083 	bhi.w	810ae9a <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 810ad94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810ad96:	2b00      	cmp	r3, #0
 810ad98:	d00e      	beq.n	810adb8 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>
 810ad9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810ad9c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 810ada0:	d01c      	beq.n	810addc <HAL_RCCEx_GetPeriphCLKFreq+0x304>
 810ada2:	e07a      	b.n	810ae9a <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 810ada4:	58024400 	.word	0x58024400
 810ada8:	03d09000 	.word	0x03d09000
 810adac:	003d0900 	.word	0x003d0900
 810adb0:	00f42400 	.word	0x00f42400
 810adb4:	00bb8000 	.word	0x00bb8000
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 810adb8:	4baa      	ldr	r3, [pc, #680]	; (810b064 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 810adba:	681b      	ldr	r3, [r3, #0]
 810adbc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 810adc0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 810adc4:	d107      	bne.n	810add6 <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 810adc6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 810adca:	4618      	mov	r0, r3
 810adcc:	f000 fe14 	bl	810b9f8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 810add0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810add2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 810add4:	e345      	b.n	810b462 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 810add6:	2300      	movs	r3, #0
 810add8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 810adda:	e342      	b.n	810b462 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 810addc:	4ba1      	ldr	r3, [pc, #644]	; (810b064 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 810adde:	681b      	ldr	r3, [r3, #0]
 810ade0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 810ade4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 810ade8:	d107      	bne.n	810adfa <HAL_RCCEx_GetPeriphCLKFreq+0x322>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810adea:	f107 0318 	add.w	r3, r7, #24
 810adee:	4618      	mov	r0, r3
 810adf0:	f000 fb5a 	bl	810b4a8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 810adf4:	69bb      	ldr	r3, [r7, #24]
 810adf6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 810adf8:	e333      	b.n	810b462 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 810adfa:	2300      	movs	r3, #0
 810adfc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 810adfe:	e330      	b.n	810b462 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 810ae00:	4b98      	ldr	r3, [pc, #608]	; (810b064 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 810ae02:	681b      	ldr	r3, [r3, #0]
 810ae04:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 810ae08:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 810ae0c:	d107      	bne.n	810ae1e <HAL_RCCEx_GetPeriphCLKFreq+0x346>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810ae0e:	f107 030c 	add.w	r3, r7, #12
 810ae12:	4618      	mov	r0, r3
 810ae14:	f000 fc9c 	bl	810b750 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 810ae18:	68fb      	ldr	r3, [r7, #12]
 810ae1a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 810ae1c:	e321      	b.n	810b462 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 810ae1e:	2300      	movs	r3, #0
 810ae20:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 810ae22:	e31e      	b.n	810b462 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 810ae24:	4b8f      	ldr	r3, [pc, #572]	; (810b064 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 810ae26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 810ae28:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 810ae2c:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 810ae2e:	4b8d      	ldr	r3, [pc, #564]	; (810b064 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 810ae30:	681b      	ldr	r3, [r3, #0]
 810ae32:	f003 0304 	and.w	r3, r3, #4
 810ae36:	2b04      	cmp	r3, #4
 810ae38:	d10c      	bne.n	810ae54 <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
 810ae3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 810ae3c:	2b00      	cmp	r3, #0
 810ae3e:	d109      	bne.n	810ae54 <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 810ae40:	4b88      	ldr	r3, [pc, #544]	; (810b064 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 810ae42:	681b      	ldr	r3, [r3, #0]
 810ae44:	08db      	lsrs	r3, r3, #3
 810ae46:	f003 0303 	and.w	r3, r3, #3
 810ae4a:	4a87      	ldr	r2, [pc, #540]	; (810b068 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 810ae4c:	fa22 f303 	lsr.w	r3, r2, r3
 810ae50:	63fb      	str	r3, [r7, #60]	; 0x3c
 810ae52:	e01e      	b.n	810ae92 <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 810ae54:	4b83      	ldr	r3, [pc, #524]	; (810b064 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 810ae56:	681b      	ldr	r3, [r3, #0]
 810ae58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 810ae5c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810ae60:	d106      	bne.n	810ae70 <HAL_RCCEx_GetPeriphCLKFreq+0x398>
 810ae62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 810ae64:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 810ae68:	d102      	bne.n	810ae70 <HAL_RCCEx_GetPeriphCLKFreq+0x398>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 810ae6a:	4b80      	ldr	r3, [pc, #512]	; (810b06c <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 810ae6c:	63fb      	str	r3, [r7, #60]	; 0x3c
 810ae6e:	e010      	b.n	810ae92 <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 810ae70:	4b7c      	ldr	r3, [pc, #496]	; (810b064 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 810ae72:	681b      	ldr	r3, [r3, #0]
 810ae74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 810ae78:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 810ae7c:	d106      	bne.n	810ae8c <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>
 810ae7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 810ae80:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 810ae84:	d102      	bne.n	810ae8c <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 810ae86:	4b7a      	ldr	r3, [pc, #488]	; (810b070 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 810ae88:	63fb      	str	r3, [r7, #60]	; 0x3c
 810ae8a:	e002      	b.n	810ae92 <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 810ae8c:	2300      	movs	r3, #0
 810ae8e:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 810ae90:	e2e7      	b.n	810b462 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 810ae92:	e2e6      	b.n	810b462 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 810ae94:	4b77      	ldr	r3, [pc, #476]	; (810b074 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 810ae96:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 810ae98:	e2e3      	b.n	810b462 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 810ae9a:	2300      	movs	r3, #0
 810ae9c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 810ae9e:	e2e0      	b.n	810b462 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 810aea0:	687b      	ldr	r3, [r7, #4]
 810aea2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 810aea6:	f040 809c 	bne.w	810afe2 <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 810aeaa:	4b6e      	ldr	r3, [pc, #440]	; (810b064 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 810aeac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810aeae:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 810aeb2:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 810aeb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810aeb6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 810aeba:	d054      	beq.n	810af66 <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
 810aebc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810aebe:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 810aec2:	f200 808b 	bhi.w	810afdc <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 810aec6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810aec8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 810aecc:	f000 8083 	beq.w	810afd6 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
 810aed0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810aed2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 810aed6:	f200 8081 	bhi.w	810afdc <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 810aeda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810aedc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 810aee0:	d02f      	beq.n	810af42 <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 810aee2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810aee4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 810aee8:	d878      	bhi.n	810afdc <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 810aeea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810aeec:	2b00      	cmp	r3, #0
 810aeee:	d004      	beq.n	810aefa <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 810aef0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810aef2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 810aef6:	d012      	beq.n	810af1e <HAL_RCCEx_GetPeriphCLKFreq+0x446>
 810aef8:	e070      	b.n	810afdc <HAL_RCCEx_GetPeriphCLKFreq+0x504>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 810aefa:	4b5a      	ldr	r3, [pc, #360]	; (810b064 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 810aefc:	681b      	ldr	r3, [r3, #0]
 810aefe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 810af02:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 810af06:	d107      	bne.n	810af18 <HAL_RCCEx_GetPeriphCLKFreq+0x440>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 810af08:	f107 0324 	add.w	r3, r7, #36	; 0x24
 810af0c:	4618      	mov	r0, r3
 810af0e:	f000 fd73 	bl	810b9f8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 810af12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810af14:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 810af16:	e2a4      	b.n	810b462 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 810af18:	2300      	movs	r3, #0
 810af1a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 810af1c:	e2a1      	b.n	810b462 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 810af1e:	4b51      	ldr	r3, [pc, #324]	; (810b064 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 810af20:	681b      	ldr	r3, [r3, #0]
 810af22:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 810af26:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 810af2a:	d107      	bne.n	810af3c <HAL_RCCEx_GetPeriphCLKFreq+0x464>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810af2c:	f107 0318 	add.w	r3, r7, #24
 810af30:	4618      	mov	r0, r3
 810af32:	f000 fab9 	bl	810b4a8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 810af36:	69bb      	ldr	r3, [r7, #24]
 810af38:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 810af3a:	e292      	b.n	810b462 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 810af3c:	2300      	movs	r3, #0
 810af3e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 810af40:	e28f      	b.n	810b462 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 810af42:	4b48      	ldr	r3, [pc, #288]	; (810b064 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 810af44:	681b      	ldr	r3, [r3, #0]
 810af46:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 810af4a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 810af4e:	d107      	bne.n	810af60 <HAL_RCCEx_GetPeriphCLKFreq+0x488>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810af50:	f107 030c 	add.w	r3, r7, #12
 810af54:	4618      	mov	r0, r3
 810af56:	f000 fbfb 	bl	810b750 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 810af5a:	68fb      	ldr	r3, [r7, #12]
 810af5c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 810af5e:	e280      	b.n	810b462 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 810af60:	2300      	movs	r3, #0
 810af62:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 810af64:	e27d      	b.n	810b462 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 810af66:	4b3f      	ldr	r3, [pc, #252]	; (810b064 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 810af68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 810af6a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 810af6e:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 810af70:	4b3c      	ldr	r3, [pc, #240]	; (810b064 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 810af72:	681b      	ldr	r3, [r3, #0]
 810af74:	f003 0304 	and.w	r3, r3, #4
 810af78:	2b04      	cmp	r3, #4
 810af7a:	d10c      	bne.n	810af96 <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 810af7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 810af7e:	2b00      	cmp	r3, #0
 810af80:	d109      	bne.n	810af96 <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 810af82:	4b38      	ldr	r3, [pc, #224]	; (810b064 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 810af84:	681b      	ldr	r3, [r3, #0]
 810af86:	08db      	lsrs	r3, r3, #3
 810af88:	f003 0303 	and.w	r3, r3, #3
 810af8c:	4a36      	ldr	r2, [pc, #216]	; (810b068 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 810af8e:	fa22 f303 	lsr.w	r3, r2, r3
 810af92:	63fb      	str	r3, [r7, #60]	; 0x3c
 810af94:	e01e      	b.n	810afd4 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 810af96:	4b33      	ldr	r3, [pc, #204]	; (810b064 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 810af98:	681b      	ldr	r3, [r3, #0]
 810af9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 810af9e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810afa2:	d106      	bne.n	810afb2 <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
 810afa4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 810afa6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 810afaa:	d102      	bne.n	810afb2 <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 810afac:	4b2f      	ldr	r3, [pc, #188]	; (810b06c <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 810afae:	63fb      	str	r3, [r7, #60]	; 0x3c
 810afb0:	e010      	b.n	810afd4 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 810afb2:	4b2c      	ldr	r3, [pc, #176]	; (810b064 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 810afb4:	681b      	ldr	r3, [r3, #0]
 810afb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 810afba:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 810afbe:	d106      	bne.n	810afce <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 810afc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 810afc2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 810afc6:	d102      	bne.n	810afce <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 810afc8:	4b29      	ldr	r3, [pc, #164]	; (810b070 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 810afca:	63fb      	str	r3, [r7, #60]	; 0x3c
 810afcc:	e002      	b.n	810afd4 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 810afce:	2300      	movs	r3, #0
 810afd0:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 810afd2:	e246      	b.n	810b462 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 810afd4:	e245      	b.n	810b462 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 810afd6:	4b27      	ldr	r3, [pc, #156]	; (810b074 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 810afd8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 810afda:	e242      	b.n	810b462 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 810afdc:	2300      	movs	r3, #0
 810afde:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 810afe0:	e23f      	b.n	810b462 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 810afe2:	687b      	ldr	r3, [r7, #4]
 810afe4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 810afe8:	f040 80a8 	bne.w	810b13c <HAL_RCCEx_GetPeriphCLKFreq+0x664>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 810afec:	4b1d      	ldr	r3, [pc, #116]	; (810b064 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 810afee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810aff0:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 810aff4:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 810aff6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810aff8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 810affc:	d060      	beq.n	810b0c0 <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
 810affe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810b000:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 810b004:	f200 8097 	bhi.w	810b136 <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 810b008:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810b00a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 810b00e:	f000 808f 	beq.w	810b130 <HAL_RCCEx_GetPeriphCLKFreq+0x658>
 810b012:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810b014:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 810b018:	f200 808d 	bhi.w	810b136 <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 810b01c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810b01e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 810b022:	d03b      	beq.n	810b09c <HAL_RCCEx_GetPeriphCLKFreq+0x5c4>
 810b024:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810b026:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 810b02a:	f200 8084 	bhi.w	810b136 <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 810b02e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810b030:	2b00      	cmp	r3, #0
 810b032:	d004      	beq.n	810b03e <HAL_RCCEx_GetPeriphCLKFreq+0x566>
 810b034:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810b036:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 810b03a:	d01d      	beq.n	810b078 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>
 810b03c:	e07b      	b.n	810b136 <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 810b03e:	4b09      	ldr	r3, [pc, #36]	; (810b064 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 810b040:	681b      	ldr	r3, [r3, #0]
 810b042:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 810b046:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 810b04a:	d107      	bne.n	810b05c <HAL_RCCEx_GetPeriphCLKFreq+0x584>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 810b04c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 810b050:	4618      	mov	r0, r3
 810b052:	f000 fcd1 	bl	810b9f8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 810b056:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810b058:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 810b05a:	e202      	b.n	810b462 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 810b05c:	2300      	movs	r3, #0
 810b05e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 810b060:	e1ff      	b.n	810b462 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 810b062:	bf00      	nop
 810b064:	58024400 	.word	0x58024400
 810b068:	03d09000 	.word	0x03d09000
 810b06c:	003d0900 	.word	0x003d0900
 810b070:	00f42400 	.word	0x00f42400
 810b074:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 810b078:	4ba3      	ldr	r3, [pc, #652]	; (810b308 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 810b07a:	681b      	ldr	r3, [r3, #0]
 810b07c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 810b080:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 810b084:	d107      	bne.n	810b096 <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810b086:	f107 0318 	add.w	r3, r7, #24
 810b08a:	4618      	mov	r0, r3
 810b08c:	f000 fa0c 	bl	810b4a8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 810b090:	69bb      	ldr	r3, [r7, #24]
 810b092:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 810b094:	e1e5      	b.n	810b462 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 810b096:	2300      	movs	r3, #0
 810b098:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 810b09a:	e1e2      	b.n	810b462 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 810b09c:	4b9a      	ldr	r3, [pc, #616]	; (810b308 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 810b09e:	681b      	ldr	r3, [r3, #0]
 810b0a0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 810b0a4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 810b0a8:	d107      	bne.n	810b0ba <HAL_RCCEx_GetPeriphCLKFreq+0x5e2>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810b0aa:	f107 030c 	add.w	r3, r7, #12
 810b0ae:	4618      	mov	r0, r3
 810b0b0:	f000 fb4e 	bl	810b750 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 810b0b4:	68fb      	ldr	r3, [r7, #12]
 810b0b6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 810b0b8:	e1d3      	b.n	810b462 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 810b0ba:	2300      	movs	r3, #0
 810b0bc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 810b0be:	e1d0      	b.n	810b462 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 810b0c0:	4b91      	ldr	r3, [pc, #580]	; (810b308 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 810b0c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 810b0c4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 810b0c8:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 810b0ca:	4b8f      	ldr	r3, [pc, #572]	; (810b308 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 810b0cc:	681b      	ldr	r3, [r3, #0]
 810b0ce:	f003 0304 	and.w	r3, r3, #4
 810b0d2:	2b04      	cmp	r3, #4
 810b0d4:	d10c      	bne.n	810b0f0 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
 810b0d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 810b0d8:	2b00      	cmp	r3, #0
 810b0da:	d109      	bne.n	810b0f0 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 810b0dc:	4b8a      	ldr	r3, [pc, #552]	; (810b308 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 810b0de:	681b      	ldr	r3, [r3, #0]
 810b0e0:	08db      	lsrs	r3, r3, #3
 810b0e2:	f003 0303 	and.w	r3, r3, #3
 810b0e6:	4a89      	ldr	r2, [pc, #548]	; (810b30c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 810b0e8:	fa22 f303 	lsr.w	r3, r2, r3
 810b0ec:	63fb      	str	r3, [r7, #60]	; 0x3c
 810b0ee:	e01e      	b.n	810b12e <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 810b0f0:	4b85      	ldr	r3, [pc, #532]	; (810b308 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 810b0f2:	681b      	ldr	r3, [r3, #0]
 810b0f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 810b0f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810b0fc:	d106      	bne.n	810b10c <HAL_RCCEx_GetPeriphCLKFreq+0x634>
 810b0fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 810b100:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 810b104:	d102      	bne.n	810b10c <HAL_RCCEx_GetPeriphCLKFreq+0x634>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 810b106:	4b82      	ldr	r3, [pc, #520]	; (810b310 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 810b108:	63fb      	str	r3, [r7, #60]	; 0x3c
 810b10a:	e010      	b.n	810b12e <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 810b10c:	4b7e      	ldr	r3, [pc, #504]	; (810b308 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 810b10e:	681b      	ldr	r3, [r3, #0]
 810b110:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 810b114:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 810b118:	d106      	bne.n	810b128 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 810b11a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 810b11c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 810b120:	d102      	bne.n	810b128 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 810b122:	4b7c      	ldr	r3, [pc, #496]	; (810b314 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 810b124:	63fb      	str	r3, [r7, #60]	; 0x3c
 810b126:	e002      	b.n	810b12e <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 810b128:	2300      	movs	r3, #0
 810b12a:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 810b12c:	e199      	b.n	810b462 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 810b12e:	e198      	b.n	810b462 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 810b130:	4b79      	ldr	r3, [pc, #484]	; (810b318 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 810b132:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 810b134:	e195      	b.n	810b462 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 810b136:	2300      	movs	r3, #0
 810b138:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 810b13a:	e192      	b.n	810b462 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 810b13c:	687b      	ldr	r3, [r7, #4]
 810b13e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 810b142:	d173      	bne.n	810b22c <HAL_RCCEx_GetPeriphCLKFreq+0x754>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 810b144:	4b70      	ldr	r3, [pc, #448]	; (810b308 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 810b146:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810b148:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 810b14c:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 810b14e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810b150:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 810b154:	d02f      	beq.n	810b1b6 <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
 810b156:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810b158:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 810b15c:	d863      	bhi.n	810b226 <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
 810b15e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810b160:	2b00      	cmp	r3, #0
 810b162:	d004      	beq.n	810b16e <HAL_RCCEx_GetPeriphCLKFreq+0x696>
 810b164:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810b166:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 810b16a:	d012      	beq.n	810b192 <HAL_RCCEx_GetPeriphCLKFreq+0x6ba>
 810b16c:	e05b      	b.n	810b226 <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 810b16e:	4b66      	ldr	r3, [pc, #408]	; (810b308 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 810b170:	681b      	ldr	r3, [r3, #0]
 810b172:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 810b176:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 810b17a:	d107      	bne.n	810b18c <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810b17c:	f107 0318 	add.w	r3, r7, #24
 810b180:	4618      	mov	r0, r3
 810b182:	f000 f991 	bl	810b4a8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 810b186:	69bb      	ldr	r3, [r7, #24]
 810b188:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 810b18a:	e16a      	b.n	810b462 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 810b18c:	2300      	movs	r3, #0
 810b18e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 810b190:	e167      	b.n	810b462 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 810b192:	4b5d      	ldr	r3, [pc, #372]	; (810b308 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 810b194:	681b      	ldr	r3, [r3, #0]
 810b196:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 810b19a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 810b19e:	d107      	bne.n	810b1b0 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810b1a0:	f107 030c 	add.w	r3, r7, #12
 810b1a4:	4618      	mov	r0, r3
 810b1a6:	f000 fad3 	bl	810b750 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 810b1aa:	697b      	ldr	r3, [r7, #20]
 810b1ac:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 810b1ae:	e158      	b.n	810b462 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 810b1b0:	2300      	movs	r3, #0
 810b1b2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 810b1b4:	e155      	b.n	810b462 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 810b1b6:	4b54      	ldr	r3, [pc, #336]	; (810b308 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 810b1b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 810b1ba:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 810b1be:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 810b1c0:	4b51      	ldr	r3, [pc, #324]	; (810b308 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 810b1c2:	681b      	ldr	r3, [r3, #0]
 810b1c4:	f003 0304 	and.w	r3, r3, #4
 810b1c8:	2b04      	cmp	r3, #4
 810b1ca:	d10c      	bne.n	810b1e6 <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
 810b1cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 810b1ce:	2b00      	cmp	r3, #0
 810b1d0:	d109      	bne.n	810b1e6 <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 810b1d2:	4b4d      	ldr	r3, [pc, #308]	; (810b308 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 810b1d4:	681b      	ldr	r3, [r3, #0]
 810b1d6:	08db      	lsrs	r3, r3, #3
 810b1d8:	f003 0303 	and.w	r3, r3, #3
 810b1dc:	4a4b      	ldr	r2, [pc, #300]	; (810b30c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 810b1de:	fa22 f303 	lsr.w	r3, r2, r3
 810b1e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 810b1e4:	e01e      	b.n	810b224 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 810b1e6:	4b48      	ldr	r3, [pc, #288]	; (810b308 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 810b1e8:	681b      	ldr	r3, [r3, #0]
 810b1ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 810b1ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810b1f2:	d106      	bne.n	810b202 <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
 810b1f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 810b1f6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 810b1fa:	d102      	bne.n	810b202 <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 810b1fc:	4b44      	ldr	r3, [pc, #272]	; (810b310 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 810b1fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 810b200:	e010      	b.n	810b224 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 810b202:	4b41      	ldr	r3, [pc, #260]	; (810b308 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 810b204:	681b      	ldr	r3, [r3, #0]
 810b206:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 810b20a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 810b20e:	d106      	bne.n	810b21e <HAL_RCCEx_GetPeriphCLKFreq+0x746>
 810b210:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 810b212:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 810b216:	d102      	bne.n	810b21e <HAL_RCCEx_GetPeriphCLKFreq+0x746>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 810b218:	4b3e      	ldr	r3, [pc, #248]	; (810b314 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 810b21a:	63fb      	str	r3, [r7, #60]	; 0x3c
 810b21c:	e002      	b.n	810b224 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 810b21e:	2300      	movs	r3, #0
 810b220:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 810b222:	e11e      	b.n	810b462 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 810b224:	e11d      	b.n	810b462 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 810b226:	2300      	movs	r3, #0
 810b228:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 810b22a:	e11a      	b.n	810b462 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 810b22c:	687b      	ldr	r3, [r7, #4]
 810b22e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 810b232:	d133      	bne.n	810b29c <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 810b234:	4b34      	ldr	r3, [pc, #208]	; (810b308 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 810b236:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 810b238:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 810b23c:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 810b23e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810b240:	2b00      	cmp	r3, #0
 810b242:	d004      	beq.n	810b24e <HAL_RCCEx_GetPeriphCLKFreq+0x776>
 810b244:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810b246:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 810b24a:	d012      	beq.n	810b272 <HAL_RCCEx_GetPeriphCLKFreq+0x79a>
 810b24c:	e023      	b.n	810b296 <HAL_RCCEx_GetPeriphCLKFreq+0x7be>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 810b24e:	4b2e      	ldr	r3, [pc, #184]	; (810b308 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 810b250:	681b      	ldr	r3, [r3, #0]
 810b252:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 810b256:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 810b25a:	d107      	bne.n	810b26c <HAL_RCCEx_GetPeriphCLKFreq+0x794>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 810b25c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 810b260:	4618      	mov	r0, r3
 810b262:	f000 fbc9 	bl	810b9f8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 810b266:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810b268:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 810b26a:	e0fa      	b.n	810b462 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 810b26c:	2300      	movs	r3, #0
 810b26e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 810b270:	e0f7      	b.n	810b462 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 810b272:	4b25      	ldr	r3, [pc, #148]	; (810b308 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 810b274:	681b      	ldr	r3, [r3, #0]
 810b276:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 810b27a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 810b27e:	d107      	bne.n	810b290 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810b280:	f107 0318 	add.w	r3, r7, #24
 810b284:	4618      	mov	r0, r3
 810b286:	f000 f90f 	bl	810b4a8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 810b28a:	6a3b      	ldr	r3, [r7, #32]
 810b28c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 810b28e:	e0e8      	b.n	810b462 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 810b290:	2300      	movs	r3, #0
 810b292:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 810b294:	e0e5      	b.n	810b462 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 810b296:	2300      	movs	r3, #0
 810b298:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 810b29a:	e0e2      	b.n	810b462 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 810b29c:	687b      	ldr	r3, [r7, #4]
 810b29e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 810b2a2:	f040 808f 	bne.w	810b3c4 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 810b2a6:	4b18      	ldr	r3, [pc, #96]	; (810b308 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 810b2a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810b2aa:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 810b2ae:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 810b2b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810b2b2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 810b2b6:	d075      	beq.n	810b3a4 <HAL_RCCEx_GetPeriphCLKFreq+0x8cc>
 810b2b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810b2ba:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 810b2be:	d87e      	bhi.n	810b3be <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 810b2c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810b2c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 810b2c6:	d060      	beq.n	810b38a <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
 810b2c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810b2ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 810b2ce:	d876      	bhi.n	810b3be <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 810b2d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810b2d2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 810b2d6:	d045      	beq.n	810b364 <HAL_RCCEx_GetPeriphCLKFreq+0x88c>
 810b2d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810b2da:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 810b2de:	d86e      	bhi.n	810b3be <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 810b2e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810b2e2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 810b2e6:	d02b      	beq.n	810b340 <HAL_RCCEx_GetPeriphCLKFreq+0x868>
 810b2e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810b2ea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 810b2ee:	d866      	bhi.n	810b3be <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 810b2f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810b2f2:	2b00      	cmp	r3, #0
 810b2f4:	d004      	beq.n	810b300 <HAL_RCCEx_GetPeriphCLKFreq+0x828>
 810b2f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810b2f8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 810b2fc:	d00e      	beq.n	810b31c <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 810b2fe:	e05e      	b.n	810b3be <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 810b300:	f000 f8bc 	bl	810b47c <HAL_RCCEx_GetD3PCLK1Freq>
 810b304:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 810b306:	e0ac      	b.n	810b462 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 810b308:	58024400 	.word	0x58024400
 810b30c:	03d09000 	.word	0x03d09000
 810b310:	003d0900 	.word	0x003d0900
 810b314:	00f42400 	.word	0x00f42400
 810b318:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 810b31c:	4b53      	ldr	r3, [pc, #332]	; (810b46c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 810b31e:	681b      	ldr	r3, [r3, #0]
 810b320:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 810b324:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 810b328:	d107      	bne.n	810b33a <HAL_RCCEx_GetPeriphCLKFreq+0x862>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810b32a:	f107 0318 	add.w	r3, r7, #24
 810b32e:	4618      	mov	r0, r3
 810b330:	f000 f8ba 	bl	810b4a8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 810b334:	69fb      	ldr	r3, [r7, #28]
 810b336:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 810b338:	e093      	b.n	810b462 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 810b33a:	2300      	movs	r3, #0
 810b33c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 810b33e:	e090      	b.n	810b462 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 810b340:	4b4a      	ldr	r3, [pc, #296]	; (810b46c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 810b342:	681b      	ldr	r3, [r3, #0]
 810b344:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 810b348:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 810b34c:	d107      	bne.n	810b35e <HAL_RCCEx_GetPeriphCLKFreq+0x886>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810b34e:	f107 030c 	add.w	r3, r7, #12
 810b352:	4618      	mov	r0, r3
 810b354:	f000 f9fc 	bl	810b750 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 810b358:	693b      	ldr	r3, [r7, #16]
 810b35a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 810b35c:	e081      	b.n	810b462 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 810b35e:	2300      	movs	r3, #0
 810b360:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 810b362:	e07e      	b.n	810b462 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 810b364:	4b41      	ldr	r3, [pc, #260]	; (810b46c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 810b366:	681b      	ldr	r3, [r3, #0]
 810b368:	f003 0304 	and.w	r3, r3, #4
 810b36c:	2b04      	cmp	r3, #4
 810b36e:	d109      	bne.n	810b384 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 810b370:	4b3e      	ldr	r3, [pc, #248]	; (810b46c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 810b372:	681b      	ldr	r3, [r3, #0]
 810b374:	08db      	lsrs	r3, r3, #3
 810b376:	f003 0303 	and.w	r3, r3, #3
 810b37a:	4a3d      	ldr	r2, [pc, #244]	; (810b470 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 810b37c:	fa22 f303 	lsr.w	r3, r2, r3
 810b380:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 810b382:	e06e      	b.n	810b462 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 810b384:	2300      	movs	r3, #0
 810b386:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 810b388:	e06b      	b.n	810b462 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 810b38a:	4b38      	ldr	r3, [pc, #224]	; (810b46c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 810b38c:	681b      	ldr	r3, [r3, #0]
 810b38e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 810b392:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810b396:	d102      	bne.n	810b39e <HAL_RCCEx_GetPeriphCLKFreq+0x8c6>
         {
          frequency = CSI_VALUE;
 810b398:	4b36      	ldr	r3, [pc, #216]	; (810b474 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 810b39a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 810b39c:	e061      	b.n	810b462 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 810b39e:	2300      	movs	r3, #0
 810b3a0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 810b3a2:	e05e      	b.n	810b462 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 810b3a4:	4b31      	ldr	r3, [pc, #196]	; (810b46c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 810b3a6:	681b      	ldr	r3, [r3, #0]
 810b3a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 810b3ac:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 810b3b0:	d102      	bne.n	810b3b8 <HAL_RCCEx_GetPeriphCLKFreq+0x8e0>
         {
          frequency = HSE_VALUE;
 810b3b2:	4b31      	ldr	r3, [pc, #196]	; (810b478 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 810b3b4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 810b3b6:	e054      	b.n	810b462 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 810b3b8:	2300      	movs	r3, #0
 810b3ba:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 810b3bc:	e051      	b.n	810b462 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 810b3be:	2300      	movs	r3, #0
 810b3c0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 810b3c2:	e04e      	b.n	810b462 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 810b3c4:	687b      	ldr	r3, [r7, #4]
 810b3c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 810b3ca:	d148      	bne.n	810b45e <HAL_RCCEx_GetPeriphCLKFreq+0x986>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 810b3cc:	4b27      	ldr	r3, [pc, #156]	; (810b46c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 810b3ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810b3d0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 810b3d4:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 810b3d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810b3d8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 810b3dc:	d02a      	beq.n	810b434 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 810b3de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810b3e0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 810b3e4:	d838      	bhi.n	810b458 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 810b3e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810b3e8:	2b00      	cmp	r3, #0
 810b3ea:	d004      	beq.n	810b3f6 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 810b3ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810b3ee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 810b3f2:	d00d      	beq.n	810b410 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 810b3f4:	e030      	b.n	810b458 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 810b3f6:	4b1d      	ldr	r3, [pc, #116]	; (810b46c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 810b3f8:	681b      	ldr	r3, [r3, #0]
 810b3fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 810b3fe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 810b402:	d102      	bne.n	810b40a <HAL_RCCEx_GetPeriphCLKFreq+0x932>
         {
          frequency = HSE_VALUE;
 810b404:	4b1c      	ldr	r3, [pc, #112]	; (810b478 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 810b406:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 810b408:	e02b      	b.n	810b462 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 810b40a:	2300      	movs	r3, #0
 810b40c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 810b40e:	e028      	b.n	810b462 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 810b410:	4b16      	ldr	r3, [pc, #88]	; (810b46c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 810b412:	681b      	ldr	r3, [r3, #0]
 810b414:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 810b418:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 810b41c:	d107      	bne.n	810b42e <HAL_RCCEx_GetPeriphCLKFreq+0x956>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 810b41e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 810b422:	4618      	mov	r0, r3
 810b424:	f000 fae8 	bl	810b9f8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 810b428:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810b42a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 810b42c:	e019      	b.n	810b462 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 810b42e:	2300      	movs	r3, #0
 810b430:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 810b432:	e016      	b.n	810b462 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 810b434:	4b0d      	ldr	r3, [pc, #52]	; (810b46c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 810b436:	681b      	ldr	r3, [r3, #0]
 810b438:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 810b43c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 810b440:	d107      	bne.n	810b452 <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810b442:	f107 0318 	add.w	r3, r7, #24
 810b446:	4618      	mov	r0, r3
 810b448:	f000 f82e 	bl	810b4a8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 810b44c:	69fb      	ldr	r3, [r7, #28]
 810b44e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 810b450:	e007      	b.n	810b462 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 810b452:	2300      	movs	r3, #0
 810b454:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 810b456:	e004      	b.n	810b462 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 810b458:	2300      	movs	r3, #0
 810b45a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 810b45c:	e001      	b.n	810b462 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else
    {
      frequency = 0;
 810b45e:	2300      	movs	r3, #0
 810b460:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 810b462:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 810b464:	4618      	mov	r0, r3
 810b466:	3740      	adds	r7, #64	; 0x40
 810b468:	46bd      	mov	sp, r7
 810b46a:	bd80      	pop	{r7, pc}
 810b46c:	58024400 	.word	0x58024400
 810b470:	03d09000 	.word	0x03d09000
 810b474:	003d0900 	.word	0x003d0900
 810b478:	00f42400 	.word	0x00f42400

0810b47c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 810b47c:	b580      	push	{r7, lr}
 810b47e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 810b480:	f7fe fb4a 	bl	8109b18 <HAL_RCC_GetHCLKFreq>
 810b484:	4602      	mov	r2, r0
 810b486:	4b06      	ldr	r3, [pc, #24]	; (810b4a0 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 810b488:	6a1b      	ldr	r3, [r3, #32]
 810b48a:	091b      	lsrs	r3, r3, #4
 810b48c:	f003 0307 	and.w	r3, r3, #7
 810b490:	4904      	ldr	r1, [pc, #16]	; (810b4a4 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 810b492:	5ccb      	ldrb	r3, [r1, r3]
 810b494:	f003 031f 	and.w	r3, r3, #31
 810b498:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 810b49c:	4618      	mov	r0, r3
 810b49e:	bd80      	pop	{r7, pc}
 810b4a0:	58024400 	.word	0x58024400
 810b4a4:	0811b480 	.word	0x0811b480

0810b4a8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 810b4a8:	b480      	push	{r7}
 810b4aa:	b089      	sub	sp, #36	; 0x24
 810b4ac:	af00      	add	r7, sp, #0
 810b4ae:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 810b4b0:	4ba1      	ldr	r3, [pc, #644]	; (810b738 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810b4b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810b4b4:	f003 0303 	and.w	r3, r3, #3
 810b4b8:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 810b4ba:	4b9f      	ldr	r3, [pc, #636]	; (810b738 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810b4bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810b4be:	0b1b      	lsrs	r3, r3, #12
 810b4c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 810b4c4:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 810b4c6:	4b9c      	ldr	r3, [pc, #624]	; (810b738 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810b4c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810b4ca:	091b      	lsrs	r3, r3, #4
 810b4cc:	f003 0301 	and.w	r3, r3, #1
 810b4d0:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 810b4d2:	4b99      	ldr	r3, [pc, #612]	; (810b738 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810b4d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810b4d6:	08db      	lsrs	r3, r3, #3
 810b4d8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 810b4dc:	693a      	ldr	r2, [r7, #16]
 810b4de:	fb02 f303 	mul.w	r3, r2, r3
 810b4e2:	ee07 3a90 	vmov	s15, r3
 810b4e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810b4ea:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 810b4ee:	697b      	ldr	r3, [r7, #20]
 810b4f0:	2b00      	cmp	r3, #0
 810b4f2:	f000 8111 	beq.w	810b718 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 810b4f6:	69bb      	ldr	r3, [r7, #24]
 810b4f8:	2b02      	cmp	r3, #2
 810b4fa:	f000 8083 	beq.w	810b604 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 810b4fe:	69bb      	ldr	r3, [r7, #24]
 810b500:	2b02      	cmp	r3, #2
 810b502:	f200 80a1 	bhi.w	810b648 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 810b506:	69bb      	ldr	r3, [r7, #24]
 810b508:	2b00      	cmp	r3, #0
 810b50a:	d003      	beq.n	810b514 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 810b50c:	69bb      	ldr	r3, [r7, #24]
 810b50e:	2b01      	cmp	r3, #1
 810b510:	d056      	beq.n	810b5c0 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 810b512:	e099      	b.n	810b648 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810b514:	4b88      	ldr	r3, [pc, #544]	; (810b738 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810b516:	681b      	ldr	r3, [r3, #0]
 810b518:	f003 0320 	and.w	r3, r3, #32
 810b51c:	2b00      	cmp	r3, #0
 810b51e:	d02d      	beq.n	810b57c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 810b520:	4b85      	ldr	r3, [pc, #532]	; (810b738 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810b522:	681b      	ldr	r3, [r3, #0]
 810b524:	08db      	lsrs	r3, r3, #3
 810b526:	f003 0303 	and.w	r3, r3, #3
 810b52a:	4a84      	ldr	r2, [pc, #528]	; (810b73c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 810b52c:	fa22 f303 	lsr.w	r3, r2, r3
 810b530:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 810b532:	68bb      	ldr	r3, [r7, #8]
 810b534:	ee07 3a90 	vmov	s15, r3
 810b538:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810b53c:	697b      	ldr	r3, [r7, #20]
 810b53e:	ee07 3a90 	vmov	s15, r3
 810b542:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810b546:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810b54a:	4b7b      	ldr	r3, [pc, #492]	; (810b738 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810b54c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810b54e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810b552:	ee07 3a90 	vmov	s15, r3
 810b556:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810b55a:	ed97 6a03 	vldr	s12, [r7, #12]
 810b55e:	eddf 5a78 	vldr	s11, [pc, #480]	; 810b740 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 810b562:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810b566:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810b56a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810b56e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810b572:	ee67 7a27 	vmul.f32	s15, s14, s15
 810b576:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 810b57a:	e087      	b.n	810b68c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 810b57c:	697b      	ldr	r3, [r7, #20]
 810b57e:	ee07 3a90 	vmov	s15, r3
 810b582:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810b586:	eddf 6a6f 	vldr	s13, [pc, #444]	; 810b744 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 810b58a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810b58e:	4b6a      	ldr	r3, [pc, #424]	; (810b738 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810b590:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810b592:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810b596:	ee07 3a90 	vmov	s15, r3
 810b59a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810b59e:	ed97 6a03 	vldr	s12, [r7, #12]
 810b5a2:	eddf 5a67 	vldr	s11, [pc, #412]	; 810b740 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 810b5a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810b5aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810b5ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810b5b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810b5b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 810b5ba:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 810b5be:	e065      	b.n	810b68c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 810b5c0:	697b      	ldr	r3, [r7, #20]
 810b5c2:	ee07 3a90 	vmov	s15, r3
 810b5c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810b5ca:	eddf 6a5f 	vldr	s13, [pc, #380]	; 810b748 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 810b5ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810b5d2:	4b59      	ldr	r3, [pc, #356]	; (810b738 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810b5d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810b5d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810b5da:	ee07 3a90 	vmov	s15, r3
 810b5de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810b5e2:	ed97 6a03 	vldr	s12, [r7, #12]
 810b5e6:	eddf 5a56 	vldr	s11, [pc, #344]	; 810b740 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 810b5ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810b5ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810b5f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810b5f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810b5fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 810b5fe:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 810b602:	e043      	b.n	810b68c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 810b604:	697b      	ldr	r3, [r7, #20]
 810b606:	ee07 3a90 	vmov	s15, r3
 810b60a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810b60e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 810b74c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 810b612:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810b616:	4b48      	ldr	r3, [pc, #288]	; (810b738 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810b618:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810b61a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810b61e:	ee07 3a90 	vmov	s15, r3
 810b622:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810b626:	ed97 6a03 	vldr	s12, [r7, #12]
 810b62a:	eddf 5a45 	vldr	s11, [pc, #276]	; 810b740 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 810b62e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810b632:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810b636:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810b63a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810b63e:	ee67 7a27 	vmul.f32	s15, s14, s15
 810b642:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 810b646:	e021      	b.n	810b68c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 810b648:	697b      	ldr	r3, [r7, #20]
 810b64a:	ee07 3a90 	vmov	s15, r3
 810b64e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810b652:	eddf 6a3d 	vldr	s13, [pc, #244]	; 810b748 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 810b656:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810b65a:	4b37      	ldr	r3, [pc, #220]	; (810b738 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810b65c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810b65e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810b662:	ee07 3a90 	vmov	s15, r3
 810b666:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810b66a:	ed97 6a03 	vldr	s12, [r7, #12]
 810b66e:	eddf 5a34 	vldr	s11, [pc, #208]	; 810b740 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 810b672:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810b676:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810b67a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810b67e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810b682:	ee67 7a27 	vmul.f32	s15, s14, s15
 810b686:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 810b68a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 810b68c:	4b2a      	ldr	r3, [pc, #168]	; (810b738 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810b68e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810b690:	0a5b      	lsrs	r3, r3, #9
 810b692:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 810b696:	ee07 3a90 	vmov	s15, r3
 810b69a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810b69e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 810b6a2:	ee37 7a87 	vadd.f32	s14, s15, s14
 810b6a6:	edd7 6a07 	vldr	s13, [r7, #28]
 810b6aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810b6ae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810b6b2:	ee17 2a90 	vmov	r2, s15
 810b6b6:	687b      	ldr	r3, [r7, #4]
 810b6b8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 810b6ba:	4b1f      	ldr	r3, [pc, #124]	; (810b738 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810b6bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810b6be:	0c1b      	lsrs	r3, r3, #16
 810b6c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 810b6c4:	ee07 3a90 	vmov	s15, r3
 810b6c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810b6cc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 810b6d0:	ee37 7a87 	vadd.f32	s14, s15, s14
 810b6d4:	edd7 6a07 	vldr	s13, [r7, #28]
 810b6d8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810b6dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810b6e0:	ee17 2a90 	vmov	r2, s15
 810b6e4:	687b      	ldr	r3, [r7, #4]
 810b6e6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 810b6e8:	4b13      	ldr	r3, [pc, #76]	; (810b738 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810b6ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810b6ec:	0e1b      	lsrs	r3, r3, #24
 810b6ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 810b6f2:	ee07 3a90 	vmov	s15, r3
 810b6f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810b6fa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 810b6fe:	ee37 7a87 	vadd.f32	s14, s15, s14
 810b702:	edd7 6a07 	vldr	s13, [r7, #28]
 810b706:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810b70a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810b70e:	ee17 2a90 	vmov	r2, s15
 810b712:	687b      	ldr	r3, [r7, #4]
 810b714:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 810b716:	e008      	b.n	810b72a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 810b718:	687b      	ldr	r3, [r7, #4]
 810b71a:	2200      	movs	r2, #0
 810b71c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 810b71e:	687b      	ldr	r3, [r7, #4]
 810b720:	2200      	movs	r2, #0
 810b722:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 810b724:	687b      	ldr	r3, [r7, #4]
 810b726:	2200      	movs	r2, #0
 810b728:	609a      	str	r2, [r3, #8]
}
 810b72a:	bf00      	nop
 810b72c:	3724      	adds	r7, #36	; 0x24
 810b72e:	46bd      	mov	sp, r7
 810b730:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b734:	4770      	bx	lr
 810b736:	bf00      	nop
 810b738:	58024400 	.word	0x58024400
 810b73c:	03d09000 	.word	0x03d09000
 810b740:	46000000 	.word	0x46000000
 810b744:	4c742400 	.word	0x4c742400
 810b748:	4a742400 	.word	0x4a742400
 810b74c:	4b742400 	.word	0x4b742400

0810b750 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 810b750:	b480      	push	{r7}
 810b752:	b089      	sub	sp, #36	; 0x24
 810b754:	af00      	add	r7, sp, #0
 810b756:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 810b758:	4ba1      	ldr	r3, [pc, #644]	; (810b9e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810b75a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810b75c:	f003 0303 	and.w	r3, r3, #3
 810b760:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 810b762:	4b9f      	ldr	r3, [pc, #636]	; (810b9e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810b764:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810b766:	0d1b      	lsrs	r3, r3, #20
 810b768:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 810b76c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 810b76e:	4b9c      	ldr	r3, [pc, #624]	; (810b9e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810b770:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810b772:	0a1b      	lsrs	r3, r3, #8
 810b774:	f003 0301 	and.w	r3, r3, #1
 810b778:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 810b77a:	4b99      	ldr	r3, [pc, #612]	; (810b9e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810b77c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 810b77e:	08db      	lsrs	r3, r3, #3
 810b780:	f3c3 030c 	ubfx	r3, r3, #0, #13
 810b784:	693a      	ldr	r2, [r7, #16]
 810b786:	fb02 f303 	mul.w	r3, r2, r3
 810b78a:	ee07 3a90 	vmov	s15, r3
 810b78e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810b792:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 810b796:	697b      	ldr	r3, [r7, #20]
 810b798:	2b00      	cmp	r3, #0
 810b79a:	f000 8111 	beq.w	810b9c0 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 810b79e:	69bb      	ldr	r3, [r7, #24]
 810b7a0:	2b02      	cmp	r3, #2
 810b7a2:	f000 8083 	beq.w	810b8ac <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 810b7a6:	69bb      	ldr	r3, [r7, #24]
 810b7a8:	2b02      	cmp	r3, #2
 810b7aa:	f200 80a1 	bhi.w	810b8f0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 810b7ae:	69bb      	ldr	r3, [r7, #24]
 810b7b0:	2b00      	cmp	r3, #0
 810b7b2:	d003      	beq.n	810b7bc <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 810b7b4:	69bb      	ldr	r3, [r7, #24]
 810b7b6:	2b01      	cmp	r3, #1
 810b7b8:	d056      	beq.n	810b868 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 810b7ba:	e099      	b.n	810b8f0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810b7bc:	4b88      	ldr	r3, [pc, #544]	; (810b9e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810b7be:	681b      	ldr	r3, [r3, #0]
 810b7c0:	f003 0320 	and.w	r3, r3, #32
 810b7c4:	2b00      	cmp	r3, #0
 810b7c6:	d02d      	beq.n	810b824 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 810b7c8:	4b85      	ldr	r3, [pc, #532]	; (810b9e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810b7ca:	681b      	ldr	r3, [r3, #0]
 810b7cc:	08db      	lsrs	r3, r3, #3
 810b7ce:	f003 0303 	and.w	r3, r3, #3
 810b7d2:	4a84      	ldr	r2, [pc, #528]	; (810b9e4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 810b7d4:	fa22 f303 	lsr.w	r3, r2, r3
 810b7d8:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 810b7da:	68bb      	ldr	r3, [r7, #8]
 810b7dc:	ee07 3a90 	vmov	s15, r3
 810b7e0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810b7e4:	697b      	ldr	r3, [r7, #20]
 810b7e6:	ee07 3a90 	vmov	s15, r3
 810b7ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810b7ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810b7f2:	4b7b      	ldr	r3, [pc, #492]	; (810b9e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810b7f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810b7f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810b7fa:	ee07 3a90 	vmov	s15, r3
 810b7fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810b802:	ed97 6a03 	vldr	s12, [r7, #12]
 810b806:	eddf 5a78 	vldr	s11, [pc, #480]	; 810b9e8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 810b80a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810b80e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810b812:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810b816:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810b81a:	ee67 7a27 	vmul.f32	s15, s14, s15
 810b81e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 810b822:	e087      	b.n	810b934 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 810b824:	697b      	ldr	r3, [r7, #20]
 810b826:	ee07 3a90 	vmov	s15, r3
 810b82a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810b82e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 810b9ec <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 810b832:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810b836:	4b6a      	ldr	r3, [pc, #424]	; (810b9e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810b838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810b83a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810b83e:	ee07 3a90 	vmov	s15, r3
 810b842:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810b846:	ed97 6a03 	vldr	s12, [r7, #12]
 810b84a:	eddf 5a67 	vldr	s11, [pc, #412]	; 810b9e8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 810b84e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810b852:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810b856:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810b85a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810b85e:	ee67 7a27 	vmul.f32	s15, s14, s15
 810b862:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 810b866:	e065      	b.n	810b934 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 810b868:	697b      	ldr	r3, [r7, #20]
 810b86a:	ee07 3a90 	vmov	s15, r3
 810b86e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810b872:	eddf 6a5f 	vldr	s13, [pc, #380]	; 810b9f0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 810b876:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810b87a:	4b59      	ldr	r3, [pc, #356]	; (810b9e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810b87c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810b87e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810b882:	ee07 3a90 	vmov	s15, r3
 810b886:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810b88a:	ed97 6a03 	vldr	s12, [r7, #12]
 810b88e:	eddf 5a56 	vldr	s11, [pc, #344]	; 810b9e8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 810b892:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810b896:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810b89a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810b89e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810b8a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 810b8a6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 810b8aa:	e043      	b.n	810b934 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 810b8ac:	697b      	ldr	r3, [r7, #20]
 810b8ae:	ee07 3a90 	vmov	s15, r3
 810b8b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810b8b6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 810b9f4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 810b8ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810b8be:	4b48      	ldr	r3, [pc, #288]	; (810b9e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810b8c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810b8c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810b8c6:	ee07 3a90 	vmov	s15, r3
 810b8ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810b8ce:	ed97 6a03 	vldr	s12, [r7, #12]
 810b8d2:	eddf 5a45 	vldr	s11, [pc, #276]	; 810b9e8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 810b8d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810b8da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810b8de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810b8e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810b8e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 810b8ea:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 810b8ee:	e021      	b.n	810b934 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 810b8f0:	697b      	ldr	r3, [r7, #20]
 810b8f2:	ee07 3a90 	vmov	s15, r3
 810b8f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810b8fa:	eddf 6a3d 	vldr	s13, [pc, #244]	; 810b9f0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 810b8fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810b902:	4b37      	ldr	r3, [pc, #220]	; (810b9e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810b904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810b906:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810b90a:	ee07 3a90 	vmov	s15, r3
 810b90e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810b912:	ed97 6a03 	vldr	s12, [r7, #12]
 810b916:	eddf 5a34 	vldr	s11, [pc, #208]	; 810b9e8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 810b91a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810b91e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810b922:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810b926:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810b92a:	ee67 7a27 	vmul.f32	s15, s14, s15
 810b92e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 810b932:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 810b934:	4b2a      	ldr	r3, [pc, #168]	; (810b9e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810b936:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810b938:	0a5b      	lsrs	r3, r3, #9
 810b93a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 810b93e:	ee07 3a90 	vmov	s15, r3
 810b942:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810b946:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 810b94a:	ee37 7a87 	vadd.f32	s14, s15, s14
 810b94e:	edd7 6a07 	vldr	s13, [r7, #28]
 810b952:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810b956:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810b95a:	ee17 2a90 	vmov	r2, s15
 810b95e:	687b      	ldr	r3, [r7, #4]
 810b960:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 810b962:	4b1f      	ldr	r3, [pc, #124]	; (810b9e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810b964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810b966:	0c1b      	lsrs	r3, r3, #16
 810b968:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 810b96c:	ee07 3a90 	vmov	s15, r3
 810b970:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810b974:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 810b978:	ee37 7a87 	vadd.f32	s14, s15, s14
 810b97c:	edd7 6a07 	vldr	s13, [r7, #28]
 810b980:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810b984:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810b988:	ee17 2a90 	vmov	r2, s15
 810b98c:	687b      	ldr	r3, [r7, #4]
 810b98e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 810b990:	4b13      	ldr	r3, [pc, #76]	; (810b9e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810b992:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810b994:	0e1b      	lsrs	r3, r3, #24
 810b996:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 810b99a:	ee07 3a90 	vmov	s15, r3
 810b99e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810b9a2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 810b9a6:	ee37 7a87 	vadd.f32	s14, s15, s14
 810b9aa:	edd7 6a07 	vldr	s13, [r7, #28]
 810b9ae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810b9b2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810b9b6:	ee17 2a90 	vmov	r2, s15
 810b9ba:	687b      	ldr	r3, [r7, #4]
 810b9bc:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 810b9be:	e008      	b.n	810b9d2 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 810b9c0:	687b      	ldr	r3, [r7, #4]
 810b9c2:	2200      	movs	r2, #0
 810b9c4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 810b9c6:	687b      	ldr	r3, [r7, #4]
 810b9c8:	2200      	movs	r2, #0
 810b9ca:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 810b9cc:	687b      	ldr	r3, [r7, #4]
 810b9ce:	2200      	movs	r2, #0
 810b9d0:	609a      	str	r2, [r3, #8]
}
 810b9d2:	bf00      	nop
 810b9d4:	3724      	adds	r7, #36	; 0x24
 810b9d6:	46bd      	mov	sp, r7
 810b9d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b9dc:	4770      	bx	lr
 810b9de:	bf00      	nop
 810b9e0:	58024400 	.word	0x58024400
 810b9e4:	03d09000 	.word	0x03d09000
 810b9e8:	46000000 	.word	0x46000000
 810b9ec:	4c742400 	.word	0x4c742400
 810b9f0:	4a742400 	.word	0x4a742400
 810b9f4:	4b742400 	.word	0x4b742400

0810b9f8 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 810b9f8:	b480      	push	{r7}
 810b9fa:	b089      	sub	sp, #36	; 0x24
 810b9fc:	af00      	add	r7, sp, #0
 810b9fe:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 810ba00:	4ba0      	ldr	r3, [pc, #640]	; (810bc84 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 810ba02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810ba04:	f003 0303 	and.w	r3, r3, #3
 810ba08:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 810ba0a:	4b9e      	ldr	r3, [pc, #632]	; (810bc84 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 810ba0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810ba0e:	091b      	lsrs	r3, r3, #4
 810ba10:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 810ba14:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 810ba16:	4b9b      	ldr	r3, [pc, #620]	; (810bc84 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 810ba18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810ba1a:	f003 0301 	and.w	r3, r3, #1
 810ba1e:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 810ba20:	4b98      	ldr	r3, [pc, #608]	; (810bc84 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 810ba22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 810ba24:	08db      	lsrs	r3, r3, #3
 810ba26:	f3c3 030c 	ubfx	r3, r3, #0, #13
 810ba2a:	693a      	ldr	r2, [r7, #16]
 810ba2c:	fb02 f303 	mul.w	r3, r2, r3
 810ba30:	ee07 3a90 	vmov	s15, r3
 810ba34:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810ba38:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 810ba3c:	697b      	ldr	r3, [r7, #20]
 810ba3e:	2b00      	cmp	r3, #0
 810ba40:	f000 8111 	beq.w	810bc66 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 810ba44:	69bb      	ldr	r3, [r7, #24]
 810ba46:	2b02      	cmp	r3, #2
 810ba48:	f000 8083 	beq.w	810bb52 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 810ba4c:	69bb      	ldr	r3, [r7, #24]
 810ba4e:	2b02      	cmp	r3, #2
 810ba50:	f200 80a1 	bhi.w	810bb96 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 810ba54:	69bb      	ldr	r3, [r7, #24]
 810ba56:	2b00      	cmp	r3, #0
 810ba58:	d003      	beq.n	810ba62 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 810ba5a:	69bb      	ldr	r3, [r7, #24]
 810ba5c:	2b01      	cmp	r3, #1
 810ba5e:	d056      	beq.n	810bb0e <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 810ba60:	e099      	b.n	810bb96 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810ba62:	4b88      	ldr	r3, [pc, #544]	; (810bc84 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 810ba64:	681b      	ldr	r3, [r3, #0]
 810ba66:	f003 0320 	and.w	r3, r3, #32
 810ba6a:	2b00      	cmp	r3, #0
 810ba6c:	d02d      	beq.n	810baca <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 810ba6e:	4b85      	ldr	r3, [pc, #532]	; (810bc84 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 810ba70:	681b      	ldr	r3, [r3, #0]
 810ba72:	08db      	lsrs	r3, r3, #3
 810ba74:	f003 0303 	and.w	r3, r3, #3
 810ba78:	4a83      	ldr	r2, [pc, #524]	; (810bc88 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 810ba7a:	fa22 f303 	lsr.w	r3, r2, r3
 810ba7e:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 810ba80:	68bb      	ldr	r3, [r7, #8]
 810ba82:	ee07 3a90 	vmov	s15, r3
 810ba86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810ba8a:	697b      	ldr	r3, [r7, #20]
 810ba8c:	ee07 3a90 	vmov	s15, r3
 810ba90:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810ba94:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810ba98:	4b7a      	ldr	r3, [pc, #488]	; (810bc84 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 810ba9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810ba9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810baa0:	ee07 3a90 	vmov	s15, r3
 810baa4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810baa8:	ed97 6a03 	vldr	s12, [r7, #12]
 810baac:	eddf 5a77 	vldr	s11, [pc, #476]	; 810bc8c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 810bab0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810bab4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810bab8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810babc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810bac0:	ee67 7a27 	vmul.f32	s15, s14, s15
 810bac4:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 810bac8:	e087      	b.n	810bbda <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 810baca:	697b      	ldr	r3, [r7, #20]
 810bacc:	ee07 3a90 	vmov	s15, r3
 810bad0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810bad4:	eddf 6a6e 	vldr	s13, [pc, #440]	; 810bc90 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 810bad8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810badc:	4b69      	ldr	r3, [pc, #420]	; (810bc84 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 810bade:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810bae0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810bae4:	ee07 3a90 	vmov	s15, r3
 810bae8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810baec:	ed97 6a03 	vldr	s12, [r7, #12]
 810baf0:	eddf 5a66 	vldr	s11, [pc, #408]	; 810bc8c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 810baf4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810baf8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810bafc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810bb00:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810bb04:	ee67 7a27 	vmul.f32	s15, s14, s15
 810bb08:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 810bb0c:	e065      	b.n	810bbda <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 810bb0e:	697b      	ldr	r3, [r7, #20]
 810bb10:	ee07 3a90 	vmov	s15, r3
 810bb14:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810bb18:	eddf 6a5e 	vldr	s13, [pc, #376]	; 810bc94 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 810bb1c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810bb20:	4b58      	ldr	r3, [pc, #352]	; (810bc84 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 810bb22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810bb24:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810bb28:	ee07 3a90 	vmov	s15, r3
 810bb2c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810bb30:	ed97 6a03 	vldr	s12, [r7, #12]
 810bb34:	eddf 5a55 	vldr	s11, [pc, #340]	; 810bc8c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 810bb38:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810bb3c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810bb40:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810bb44:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810bb48:	ee67 7a27 	vmul.f32	s15, s14, s15
 810bb4c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 810bb50:	e043      	b.n	810bbda <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 810bb52:	697b      	ldr	r3, [r7, #20]
 810bb54:	ee07 3a90 	vmov	s15, r3
 810bb58:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810bb5c:	eddf 6a4e 	vldr	s13, [pc, #312]	; 810bc98 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 810bb60:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810bb64:	4b47      	ldr	r3, [pc, #284]	; (810bc84 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 810bb66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810bb68:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810bb6c:	ee07 3a90 	vmov	s15, r3
 810bb70:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810bb74:	ed97 6a03 	vldr	s12, [r7, #12]
 810bb78:	eddf 5a44 	vldr	s11, [pc, #272]	; 810bc8c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 810bb7c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810bb80:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810bb84:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810bb88:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810bb8c:	ee67 7a27 	vmul.f32	s15, s14, s15
 810bb90:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 810bb94:	e021      	b.n	810bbda <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 810bb96:	697b      	ldr	r3, [r7, #20]
 810bb98:	ee07 3a90 	vmov	s15, r3
 810bb9c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810bba0:	eddf 6a3b 	vldr	s13, [pc, #236]	; 810bc90 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 810bba4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810bba8:	4b36      	ldr	r3, [pc, #216]	; (810bc84 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 810bbaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810bbac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810bbb0:	ee07 3a90 	vmov	s15, r3
 810bbb4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810bbb8:	ed97 6a03 	vldr	s12, [r7, #12]
 810bbbc:	eddf 5a33 	vldr	s11, [pc, #204]	; 810bc8c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 810bbc0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810bbc4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810bbc8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810bbcc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810bbd0:	ee67 7a27 	vmul.f32	s15, s14, s15
 810bbd4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 810bbd8:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 810bbda:	4b2a      	ldr	r3, [pc, #168]	; (810bc84 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 810bbdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810bbde:	0a5b      	lsrs	r3, r3, #9
 810bbe0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 810bbe4:	ee07 3a90 	vmov	s15, r3
 810bbe8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810bbec:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 810bbf0:	ee37 7a87 	vadd.f32	s14, s15, s14
 810bbf4:	edd7 6a07 	vldr	s13, [r7, #28]
 810bbf8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810bbfc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810bc00:	ee17 2a90 	vmov	r2, s15
 810bc04:	687b      	ldr	r3, [r7, #4]
 810bc06:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 810bc08:	4b1e      	ldr	r3, [pc, #120]	; (810bc84 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 810bc0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810bc0c:	0c1b      	lsrs	r3, r3, #16
 810bc0e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 810bc12:	ee07 3a90 	vmov	s15, r3
 810bc16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810bc1a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 810bc1e:	ee37 7a87 	vadd.f32	s14, s15, s14
 810bc22:	edd7 6a07 	vldr	s13, [r7, #28]
 810bc26:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810bc2a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810bc2e:	ee17 2a90 	vmov	r2, s15
 810bc32:	687b      	ldr	r3, [r7, #4]
 810bc34:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 810bc36:	4b13      	ldr	r3, [pc, #76]	; (810bc84 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 810bc38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810bc3a:	0e1b      	lsrs	r3, r3, #24
 810bc3c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 810bc40:	ee07 3a90 	vmov	s15, r3
 810bc44:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810bc48:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 810bc4c:	ee37 7a87 	vadd.f32	s14, s15, s14
 810bc50:	edd7 6a07 	vldr	s13, [r7, #28]
 810bc54:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810bc58:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810bc5c:	ee17 2a90 	vmov	r2, s15
 810bc60:	687b      	ldr	r3, [r7, #4]
 810bc62:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 810bc64:	e008      	b.n	810bc78 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 810bc66:	687b      	ldr	r3, [r7, #4]
 810bc68:	2200      	movs	r2, #0
 810bc6a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 810bc6c:	687b      	ldr	r3, [r7, #4]
 810bc6e:	2200      	movs	r2, #0
 810bc70:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 810bc72:	687b      	ldr	r3, [r7, #4]
 810bc74:	2200      	movs	r2, #0
 810bc76:	609a      	str	r2, [r3, #8]
}
 810bc78:	bf00      	nop
 810bc7a:	3724      	adds	r7, #36	; 0x24
 810bc7c:	46bd      	mov	sp, r7
 810bc7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 810bc82:	4770      	bx	lr
 810bc84:	58024400 	.word	0x58024400
 810bc88:	03d09000 	.word	0x03d09000
 810bc8c:	46000000 	.word	0x46000000
 810bc90:	4c742400 	.word	0x4c742400
 810bc94:	4a742400 	.word	0x4a742400
 810bc98:	4b742400 	.word	0x4b742400

0810bc9c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 810bc9c:	b580      	push	{r7, lr}
 810bc9e:	b084      	sub	sp, #16
 810bca0:	af00      	add	r7, sp, #0
 810bca2:	6078      	str	r0, [r7, #4]
 810bca4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 810bca6:	2300      	movs	r3, #0
 810bca8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 810bcaa:	4b54      	ldr	r3, [pc, #336]	; (810bdfc <RCCEx_PLL2_Config+0x160>)
 810bcac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810bcae:	f003 0303 	and.w	r3, r3, #3
 810bcb2:	2b03      	cmp	r3, #3
 810bcb4:	d101      	bne.n	810bcba <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 810bcb6:	2301      	movs	r3, #1
 810bcb8:	e09b      	b.n	810bdf2 <RCCEx_PLL2_Config+0x156>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 810bcba:	4b50      	ldr	r3, [pc, #320]	; (810bdfc <RCCEx_PLL2_Config+0x160>)
 810bcbc:	681b      	ldr	r3, [r3, #0]
 810bcbe:	4a4f      	ldr	r2, [pc, #316]	; (810bdfc <RCCEx_PLL2_Config+0x160>)
 810bcc0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 810bcc4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 810bcc6:	f7f6 fe99 	bl	81029fc <HAL_GetTick>
 810bcca:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 810bccc:	e008      	b.n	810bce0 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 810bcce:	f7f6 fe95 	bl	81029fc <HAL_GetTick>
 810bcd2:	4602      	mov	r2, r0
 810bcd4:	68bb      	ldr	r3, [r7, #8]
 810bcd6:	1ad3      	subs	r3, r2, r3
 810bcd8:	2b02      	cmp	r3, #2
 810bcda:	d901      	bls.n	810bce0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 810bcdc:	2303      	movs	r3, #3
 810bcde:	e088      	b.n	810bdf2 <RCCEx_PLL2_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 810bce0:	4b46      	ldr	r3, [pc, #280]	; (810bdfc <RCCEx_PLL2_Config+0x160>)
 810bce2:	681b      	ldr	r3, [r3, #0]
 810bce4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 810bce8:	2b00      	cmp	r3, #0
 810bcea:	d1f0      	bne.n	810bcce <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 810bcec:	4b43      	ldr	r3, [pc, #268]	; (810bdfc <RCCEx_PLL2_Config+0x160>)
 810bcee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810bcf0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 810bcf4:	687b      	ldr	r3, [r7, #4]
 810bcf6:	681b      	ldr	r3, [r3, #0]
 810bcf8:	031b      	lsls	r3, r3, #12
 810bcfa:	4940      	ldr	r1, [pc, #256]	; (810bdfc <RCCEx_PLL2_Config+0x160>)
 810bcfc:	4313      	orrs	r3, r2
 810bcfe:	628b      	str	r3, [r1, #40]	; 0x28
 810bd00:	687b      	ldr	r3, [r7, #4]
 810bd02:	685b      	ldr	r3, [r3, #4]
 810bd04:	3b01      	subs	r3, #1
 810bd06:	f3c3 0208 	ubfx	r2, r3, #0, #9
 810bd0a:	687b      	ldr	r3, [r7, #4]
 810bd0c:	689b      	ldr	r3, [r3, #8]
 810bd0e:	3b01      	subs	r3, #1
 810bd10:	025b      	lsls	r3, r3, #9
 810bd12:	b29b      	uxth	r3, r3
 810bd14:	431a      	orrs	r2, r3
 810bd16:	687b      	ldr	r3, [r7, #4]
 810bd18:	68db      	ldr	r3, [r3, #12]
 810bd1a:	3b01      	subs	r3, #1
 810bd1c:	041b      	lsls	r3, r3, #16
 810bd1e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 810bd22:	431a      	orrs	r2, r3
 810bd24:	687b      	ldr	r3, [r7, #4]
 810bd26:	691b      	ldr	r3, [r3, #16]
 810bd28:	3b01      	subs	r3, #1
 810bd2a:	061b      	lsls	r3, r3, #24
 810bd2c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 810bd30:	4932      	ldr	r1, [pc, #200]	; (810bdfc <RCCEx_PLL2_Config+0x160>)
 810bd32:	4313      	orrs	r3, r2
 810bd34:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 810bd36:	4b31      	ldr	r3, [pc, #196]	; (810bdfc <RCCEx_PLL2_Config+0x160>)
 810bd38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810bd3a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 810bd3e:	687b      	ldr	r3, [r7, #4]
 810bd40:	695b      	ldr	r3, [r3, #20]
 810bd42:	492e      	ldr	r1, [pc, #184]	; (810bdfc <RCCEx_PLL2_Config+0x160>)
 810bd44:	4313      	orrs	r3, r2
 810bd46:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 810bd48:	4b2c      	ldr	r3, [pc, #176]	; (810bdfc <RCCEx_PLL2_Config+0x160>)
 810bd4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810bd4c:	f023 0220 	bic.w	r2, r3, #32
 810bd50:	687b      	ldr	r3, [r7, #4]
 810bd52:	699b      	ldr	r3, [r3, #24]
 810bd54:	4929      	ldr	r1, [pc, #164]	; (810bdfc <RCCEx_PLL2_Config+0x160>)
 810bd56:	4313      	orrs	r3, r2
 810bd58:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 810bd5a:	4b28      	ldr	r3, [pc, #160]	; (810bdfc <RCCEx_PLL2_Config+0x160>)
 810bd5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810bd5e:	4a27      	ldr	r2, [pc, #156]	; (810bdfc <RCCEx_PLL2_Config+0x160>)
 810bd60:	f023 0310 	bic.w	r3, r3, #16
 810bd64:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 810bd66:	4b25      	ldr	r3, [pc, #148]	; (810bdfc <RCCEx_PLL2_Config+0x160>)
 810bd68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810bd6a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 810bd6e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 810bd72:	687a      	ldr	r2, [r7, #4]
 810bd74:	69d2      	ldr	r2, [r2, #28]
 810bd76:	00d2      	lsls	r2, r2, #3
 810bd78:	4920      	ldr	r1, [pc, #128]	; (810bdfc <RCCEx_PLL2_Config+0x160>)
 810bd7a:	4313      	orrs	r3, r2
 810bd7c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 810bd7e:	4b1f      	ldr	r3, [pc, #124]	; (810bdfc <RCCEx_PLL2_Config+0x160>)
 810bd80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810bd82:	4a1e      	ldr	r2, [pc, #120]	; (810bdfc <RCCEx_PLL2_Config+0x160>)
 810bd84:	f043 0310 	orr.w	r3, r3, #16
 810bd88:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 810bd8a:	683b      	ldr	r3, [r7, #0]
 810bd8c:	2b00      	cmp	r3, #0
 810bd8e:	d106      	bne.n	810bd9e <RCCEx_PLL2_Config+0x102>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 810bd90:	4b1a      	ldr	r3, [pc, #104]	; (810bdfc <RCCEx_PLL2_Config+0x160>)
 810bd92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810bd94:	4a19      	ldr	r2, [pc, #100]	; (810bdfc <RCCEx_PLL2_Config+0x160>)
 810bd96:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 810bd9a:	62d3      	str	r3, [r2, #44]	; 0x2c
 810bd9c:	e00f      	b.n	810bdbe <RCCEx_PLL2_Config+0x122>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 810bd9e:	683b      	ldr	r3, [r7, #0]
 810bda0:	2b01      	cmp	r3, #1
 810bda2:	d106      	bne.n	810bdb2 <RCCEx_PLL2_Config+0x116>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 810bda4:	4b15      	ldr	r3, [pc, #84]	; (810bdfc <RCCEx_PLL2_Config+0x160>)
 810bda6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810bda8:	4a14      	ldr	r2, [pc, #80]	; (810bdfc <RCCEx_PLL2_Config+0x160>)
 810bdaa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 810bdae:	62d3      	str	r3, [r2, #44]	; 0x2c
 810bdb0:	e005      	b.n	810bdbe <RCCEx_PLL2_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 810bdb2:	4b12      	ldr	r3, [pc, #72]	; (810bdfc <RCCEx_PLL2_Config+0x160>)
 810bdb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810bdb6:	4a11      	ldr	r2, [pc, #68]	; (810bdfc <RCCEx_PLL2_Config+0x160>)
 810bdb8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 810bdbc:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 810bdbe:	4b0f      	ldr	r3, [pc, #60]	; (810bdfc <RCCEx_PLL2_Config+0x160>)
 810bdc0:	681b      	ldr	r3, [r3, #0]
 810bdc2:	4a0e      	ldr	r2, [pc, #56]	; (810bdfc <RCCEx_PLL2_Config+0x160>)
 810bdc4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 810bdc8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 810bdca:	f7f6 fe17 	bl	81029fc <HAL_GetTick>
 810bdce:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 810bdd0:	e008      	b.n	810bde4 <RCCEx_PLL2_Config+0x148>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 810bdd2:	f7f6 fe13 	bl	81029fc <HAL_GetTick>
 810bdd6:	4602      	mov	r2, r0
 810bdd8:	68bb      	ldr	r3, [r7, #8]
 810bdda:	1ad3      	subs	r3, r2, r3
 810bddc:	2b02      	cmp	r3, #2
 810bdde:	d901      	bls.n	810bde4 <RCCEx_PLL2_Config+0x148>
      {
        return HAL_TIMEOUT;
 810bde0:	2303      	movs	r3, #3
 810bde2:	e006      	b.n	810bdf2 <RCCEx_PLL2_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 810bde4:	4b05      	ldr	r3, [pc, #20]	; (810bdfc <RCCEx_PLL2_Config+0x160>)
 810bde6:	681b      	ldr	r3, [r3, #0]
 810bde8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 810bdec:	2b00      	cmp	r3, #0
 810bdee:	d0f0      	beq.n	810bdd2 <RCCEx_PLL2_Config+0x136>
    }

  }


  return status;
 810bdf0:	7bfb      	ldrb	r3, [r7, #15]
}
 810bdf2:	4618      	mov	r0, r3
 810bdf4:	3710      	adds	r7, #16
 810bdf6:	46bd      	mov	sp, r7
 810bdf8:	bd80      	pop	{r7, pc}
 810bdfa:	bf00      	nop
 810bdfc:	58024400 	.word	0x58024400

0810be00 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 810be00:	b580      	push	{r7, lr}
 810be02:	b084      	sub	sp, #16
 810be04:	af00      	add	r7, sp, #0
 810be06:	6078      	str	r0, [r7, #4]
 810be08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 810be0a:	2300      	movs	r3, #0
 810be0c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 810be0e:	4b54      	ldr	r3, [pc, #336]	; (810bf60 <RCCEx_PLL3_Config+0x160>)
 810be10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810be12:	f003 0303 	and.w	r3, r3, #3
 810be16:	2b03      	cmp	r3, #3
 810be18:	d101      	bne.n	810be1e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 810be1a:	2301      	movs	r3, #1
 810be1c:	e09b      	b.n	810bf56 <RCCEx_PLL3_Config+0x156>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 810be1e:	4b50      	ldr	r3, [pc, #320]	; (810bf60 <RCCEx_PLL3_Config+0x160>)
 810be20:	681b      	ldr	r3, [r3, #0]
 810be22:	4a4f      	ldr	r2, [pc, #316]	; (810bf60 <RCCEx_PLL3_Config+0x160>)
 810be24:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 810be28:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 810be2a:	f7f6 fde7 	bl	81029fc <HAL_GetTick>
 810be2e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 810be30:	e008      	b.n	810be44 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 810be32:	f7f6 fde3 	bl	81029fc <HAL_GetTick>
 810be36:	4602      	mov	r2, r0
 810be38:	68bb      	ldr	r3, [r7, #8]
 810be3a:	1ad3      	subs	r3, r2, r3
 810be3c:	2b02      	cmp	r3, #2
 810be3e:	d901      	bls.n	810be44 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 810be40:	2303      	movs	r3, #3
 810be42:	e088      	b.n	810bf56 <RCCEx_PLL3_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 810be44:	4b46      	ldr	r3, [pc, #280]	; (810bf60 <RCCEx_PLL3_Config+0x160>)
 810be46:	681b      	ldr	r3, [r3, #0]
 810be48:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 810be4c:	2b00      	cmp	r3, #0
 810be4e:	d1f0      	bne.n	810be32 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 810be50:	4b43      	ldr	r3, [pc, #268]	; (810bf60 <RCCEx_PLL3_Config+0x160>)
 810be52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810be54:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 810be58:	687b      	ldr	r3, [r7, #4]
 810be5a:	681b      	ldr	r3, [r3, #0]
 810be5c:	051b      	lsls	r3, r3, #20
 810be5e:	4940      	ldr	r1, [pc, #256]	; (810bf60 <RCCEx_PLL3_Config+0x160>)
 810be60:	4313      	orrs	r3, r2
 810be62:	628b      	str	r3, [r1, #40]	; 0x28
 810be64:	687b      	ldr	r3, [r7, #4]
 810be66:	685b      	ldr	r3, [r3, #4]
 810be68:	3b01      	subs	r3, #1
 810be6a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 810be6e:	687b      	ldr	r3, [r7, #4]
 810be70:	689b      	ldr	r3, [r3, #8]
 810be72:	3b01      	subs	r3, #1
 810be74:	025b      	lsls	r3, r3, #9
 810be76:	b29b      	uxth	r3, r3
 810be78:	431a      	orrs	r2, r3
 810be7a:	687b      	ldr	r3, [r7, #4]
 810be7c:	68db      	ldr	r3, [r3, #12]
 810be7e:	3b01      	subs	r3, #1
 810be80:	041b      	lsls	r3, r3, #16
 810be82:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 810be86:	431a      	orrs	r2, r3
 810be88:	687b      	ldr	r3, [r7, #4]
 810be8a:	691b      	ldr	r3, [r3, #16]
 810be8c:	3b01      	subs	r3, #1
 810be8e:	061b      	lsls	r3, r3, #24
 810be90:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 810be94:	4932      	ldr	r1, [pc, #200]	; (810bf60 <RCCEx_PLL3_Config+0x160>)
 810be96:	4313      	orrs	r3, r2
 810be98:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 810be9a:	4b31      	ldr	r3, [pc, #196]	; (810bf60 <RCCEx_PLL3_Config+0x160>)
 810be9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810be9e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 810bea2:	687b      	ldr	r3, [r7, #4]
 810bea4:	695b      	ldr	r3, [r3, #20]
 810bea6:	492e      	ldr	r1, [pc, #184]	; (810bf60 <RCCEx_PLL3_Config+0x160>)
 810bea8:	4313      	orrs	r3, r2
 810beaa:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 810beac:	4b2c      	ldr	r3, [pc, #176]	; (810bf60 <RCCEx_PLL3_Config+0x160>)
 810beae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810beb0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 810beb4:	687b      	ldr	r3, [r7, #4]
 810beb6:	699b      	ldr	r3, [r3, #24]
 810beb8:	4929      	ldr	r1, [pc, #164]	; (810bf60 <RCCEx_PLL3_Config+0x160>)
 810beba:	4313      	orrs	r3, r2
 810bebc:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 810bebe:	4b28      	ldr	r3, [pc, #160]	; (810bf60 <RCCEx_PLL3_Config+0x160>)
 810bec0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810bec2:	4a27      	ldr	r2, [pc, #156]	; (810bf60 <RCCEx_PLL3_Config+0x160>)
 810bec4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 810bec8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 810beca:	4b25      	ldr	r3, [pc, #148]	; (810bf60 <RCCEx_PLL3_Config+0x160>)
 810becc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 810bece:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 810bed2:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 810bed6:	687a      	ldr	r2, [r7, #4]
 810bed8:	69d2      	ldr	r2, [r2, #28]
 810beda:	00d2      	lsls	r2, r2, #3
 810bedc:	4920      	ldr	r1, [pc, #128]	; (810bf60 <RCCEx_PLL3_Config+0x160>)
 810bede:	4313      	orrs	r3, r2
 810bee0:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 810bee2:	4b1f      	ldr	r3, [pc, #124]	; (810bf60 <RCCEx_PLL3_Config+0x160>)
 810bee4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810bee6:	4a1e      	ldr	r2, [pc, #120]	; (810bf60 <RCCEx_PLL3_Config+0x160>)
 810bee8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 810beec:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 810beee:	683b      	ldr	r3, [r7, #0]
 810bef0:	2b00      	cmp	r3, #0
 810bef2:	d106      	bne.n	810bf02 <RCCEx_PLL3_Config+0x102>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 810bef4:	4b1a      	ldr	r3, [pc, #104]	; (810bf60 <RCCEx_PLL3_Config+0x160>)
 810bef6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810bef8:	4a19      	ldr	r2, [pc, #100]	; (810bf60 <RCCEx_PLL3_Config+0x160>)
 810befa:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 810befe:	62d3      	str	r3, [r2, #44]	; 0x2c
 810bf00:	e00f      	b.n	810bf22 <RCCEx_PLL3_Config+0x122>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 810bf02:	683b      	ldr	r3, [r7, #0]
 810bf04:	2b01      	cmp	r3, #1
 810bf06:	d106      	bne.n	810bf16 <RCCEx_PLL3_Config+0x116>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 810bf08:	4b15      	ldr	r3, [pc, #84]	; (810bf60 <RCCEx_PLL3_Config+0x160>)
 810bf0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810bf0c:	4a14      	ldr	r2, [pc, #80]	; (810bf60 <RCCEx_PLL3_Config+0x160>)
 810bf0e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 810bf12:	62d3      	str	r3, [r2, #44]	; 0x2c
 810bf14:	e005      	b.n	810bf22 <RCCEx_PLL3_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 810bf16:	4b12      	ldr	r3, [pc, #72]	; (810bf60 <RCCEx_PLL3_Config+0x160>)
 810bf18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810bf1a:	4a11      	ldr	r2, [pc, #68]	; (810bf60 <RCCEx_PLL3_Config+0x160>)
 810bf1c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 810bf20:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 810bf22:	4b0f      	ldr	r3, [pc, #60]	; (810bf60 <RCCEx_PLL3_Config+0x160>)
 810bf24:	681b      	ldr	r3, [r3, #0]
 810bf26:	4a0e      	ldr	r2, [pc, #56]	; (810bf60 <RCCEx_PLL3_Config+0x160>)
 810bf28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 810bf2c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 810bf2e:	f7f6 fd65 	bl	81029fc <HAL_GetTick>
 810bf32:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 810bf34:	e008      	b.n	810bf48 <RCCEx_PLL3_Config+0x148>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 810bf36:	f7f6 fd61 	bl	81029fc <HAL_GetTick>
 810bf3a:	4602      	mov	r2, r0
 810bf3c:	68bb      	ldr	r3, [r7, #8]
 810bf3e:	1ad3      	subs	r3, r2, r3
 810bf40:	2b02      	cmp	r3, #2
 810bf42:	d901      	bls.n	810bf48 <RCCEx_PLL3_Config+0x148>
      {
        return HAL_TIMEOUT;
 810bf44:	2303      	movs	r3, #3
 810bf46:	e006      	b.n	810bf56 <RCCEx_PLL3_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 810bf48:	4b05      	ldr	r3, [pc, #20]	; (810bf60 <RCCEx_PLL3_Config+0x160>)
 810bf4a:	681b      	ldr	r3, [r3, #0]
 810bf4c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 810bf50:	2b00      	cmp	r3, #0
 810bf52:	d0f0      	beq.n	810bf36 <RCCEx_PLL3_Config+0x136>
    }

  }


  return status;
 810bf54:	7bfb      	ldrb	r3, [r7, #15]
}
 810bf56:	4618      	mov	r0, r3
 810bf58:	3710      	adds	r7, #16
 810bf5a:	46bd      	mov	sp, r7
 810bf5c:	bd80      	pop	{r7, pc}
 810bf5e:	bf00      	nop
 810bf60:	58024400 	.word	0x58024400

0810bf64 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 810bf64:	b580      	push	{r7, lr}
 810bf66:	b08a      	sub	sp, #40	; 0x28
 810bf68:	af00      	add	r7, sp, #0
 810bf6a:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 810bf6c:	687b      	ldr	r3, [r7, #4]
 810bf6e:	2b00      	cmp	r3, #0
 810bf70:	d101      	bne.n	810bf76 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 810bf72:	2301      	movs	r3, #1
 810bf74:	e07c      	b.n	810c070 <HAL_SD_Init+0x10c>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 810bf76:	687b      	ldr	r3, [r7, #4]
 810bf78:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 810bf7c:	b2db      	uxtb	r3, r3
 810bf7e:	2b00      	cmp	r3, #0
 810bf80:	d10c      	bne.n	810bf9c <HAL_SD_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 810bf82:	687b      	ldr	r3, [r7, #4]
 810bf84:	2200      	movs	r2, #0
 810bf86:	771a      	strb	r2, [r3, #28]

#if (USE_SD_TRANSCEIVER != 0U)
    /* Force  SDMMC_TRANSCEIVER_PRESENT for Legacy usage */
    if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_UNKNOWN)
 810bf88:	687b      	ldr	r3, [r7, #4]
 810bf8a:	699b      	ldr	r3, [r3, #24]
 810bf8c:	2b00      	cmp	r3, #0
 810bf8e:	d102      	bne.n	810bf96 <HAL_SD_Init+0x32>
    {
      hsd->Init.TranceiverPresent = SDMMC_TRANSCEIVER_PRESENT;
 810bf90:	687b      	ldr	r3, [r7, #4]
 810bf92:	2202      	movs	r2, #2
 810bf94:	619a      	str	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 810bf96:	6878      	ldr	r0, [r7, #4]
 810bf98:	f7f5 fe18 	bl	8101bcc <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 810bf9c:	687b      	ldr	r3, [r7, #4]
 810bf9e:	2203      	movs	r2, #3
 810bfa0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 810bfa4:	6878      	ldr	r0, [r7, #4]
 810bfa6:	f000 f867 	bl	810c078 <HAL_SD_InitCard>
 810bfaa:	4603      	mov	r3, r0
 810bfac:	2b00      	cmp	r3, #0
 810bfae:	d001      	beq.n	810bfb4 <HAL_SD_Init+0x50>
  {
    return HAL_ERROR;
 810bfb0:	2301      	movs	r3, #1
 810bfb2:	e05d      	b.n	810c070 <HAL_SD_Init+0x10c>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 810bfb4:	f107 0308 	add.w	r3, r7, #8
 810bfb8:	4619      	mov	r1, r3
 810bfba:	6878      	ldr	r0, [r7, #4]
 810bfbc:	f000 fdbe 	bl	810cb3c <HAL_SD_GetCardStatus>
 810bfc0:	4603      	mov	r3, r0
 810bfc2:	2b00      	cmp	r3, #0
 810bfc4:	d001      	beq.n	810bfca <HAL_SD_Init+0x66>
  {
    return HAL_ERROR;
 810bfc6:	2301      	movs	r3, #1
 810bfc8:	e052      	b.n	810c070 <HAL_SD_Init+0x10c>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 810bfca:	7e3b      	ldrb	r3, [r7, #24]
 810bfcc:	b2db      	uxtb	r3, r3
 810bfce:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 810bfd0:	7e7b      	ldrb	r3, [r7, #25]
 810bfd2:	b2db      	uxtb	r3, r3
 810bfd4:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 810bfd6:	687b      	ldr	r3, [r7, #4]
 810bfd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810bfda:	2b01      	cmp	r3, #1
 810bfdc:	d10a      	bne.n	810bff4 <HAL_SD_Init+0x90>
 810bfde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810bfe0:	2b00      	cmp	r3, #0
 810bfe2:	d102      	bne.n	810bfea <HAL_SD_Init+0x86>
 810bfe4:	6a3b      	ldr	r3, [r7, #32]
 810bfe6:	2b00      	cmp	r3, #0
 810bfe8:	d004      	beq.n	810bff4 <HAL_SD_Init+0x90>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 810bfea:	687b      	ldr	r3, [r7, #4]
 810bfec:	f44f 7200 	mov.w	r2, #512	; 0x200
 810bff0:	65da      	str	r2, [r3, #92]	; 0x5c
 810bff2:	e00b      	b.n	810c00c <HAL_SD_Init+0xa8>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 810bff4:	687b      	ldr	r3, [r7, #4]
 810bff6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810bff8:	2b01      	cmp	r3, #1
 810bffa:	d104      	bne.n	810c006 <HAL_SD_Init+0xa2>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 810bffc:	687b      	ldr	r3, [r7, #4]
 810bffe:	f44f 7280 	mov.w	r2, #256	; 0x100
 810c002:	65da      	str	r2, [r3, #92]	; 0x5c
 810c004:	e002      	b.n	810c00c <HAL_SD_Init+0xa8>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 810c006:	687b      	ldr	r3, [r7, #4]
 810c008:	2200      	movs	r2, #0
 810c00a:	65da      	str	r2, [r3, #92]	; 0x5c
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 810c00c:	687b      	ldr	r3, [r7, #4]
 810c00e:	68db      	ldr	r3, [r3, #12]
 810c010:	4619      	mov	r1, r3
 810c012:	6878      	ldr	r0, [r7, #4]
 810c014:	f000 fe74 	bl	810cd00 <HAL_SD_ConfigWideBusOperation>
 810c018:	4603      	mov	r3, r0
 810c01a:	2b00      	cmp	r3, #0
 810c01c:	d001      	beq.n	810c022 <HAL_SD_Init+0xbe>
  {
    return HAL_ERROR;
 810c01e:	2301      	movs	r3, #1
 810c020:	e026      	b.n	810c070 <HAL_SD_Init+0x10c>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 810c022:	f7f6 fceb 	bl	81029fc <HAL_GetTick>
 810c026:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 810c028:	e011      	b.n	810c04e <HAL_SD_Init+0xea>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 810c02a:	f7f6 fce7 	bl	81029fc <HAL_GetTick>
 810c02e:	4602      	mov	r2, r0
 810c030:	69fb      	ldr	r3, [r7, #28]
 810c032:	1ad3      	subs	r3, r2, r3
 810c034:	f1b3 3fff 	cmp.w	r3, #4294967295
 810c038:	d109      	bne.n	810c04e <HAL_SD_Init+0xea>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 810c03a:	687b      	ldr	r3, [r7, #4]
 810c03c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 810c040:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 810c042:	687b      	ldr	r3, [r7, #4]
 810c044:	2201      	movs	r2, #1
 810c046:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_TIMEOUT;
 810c04a:	2303      	movs	r3, #3
 810c04c:	e010      	b.n	810c070 <HAL_SD_Init+0x10c>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 810c04e:	6878      	ldr	r0, [r7, #4]
 810c050:	f000 ff6a 	bl	810cf28 <HAL_SD_GetCardState>
 810c054:	4603      	mov	r3, r0
 810c056:	2b04      	cmp	r3, #4
 810c058:	d1e7      	bne.n	810c02a <HAL_SD_Init+0xc6>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 810c05a:	687b      	ldr	r3, [r7, #4]
 810c05c:	2200      	movs	r2, #0
 810c05e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 810c060:	687b      	ldr	r3, [r7, #4]
 810c062:	2200      	movs	r2, #0
 810c064:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 810c066:	687b      	ldr	r3, [r7, #4]
 810c068:	2201      	movs	r2, #1
 810c06a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 810c06e:	2300      	movs	r3, #0
}
 810c070:	4618      	mov	r0, r3
 810c072:	3728      	adds	r7, #40	; 0x28
 810c074:	46bd      	mov	sp, r7
 810c076:	bd80      	pop	{r7, pc}

0810c078 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 810c078:	b5b0      	push	{r4, r5, r7, lr}
 810c07a:	b08e      	sub	sp, #56	; 0x38
 810c07c:	af04      	add	r7, sp, #16
 810c07e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 810c080:	2300      	movs	r3, #0
 810c082:	60bb      	str	r3, [r7, #8]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 810c084:	2300      	movs	r3, #0
 810c086:	60fb      	str	r3, [r7, #12]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 810c088:	2300      	movs	r3, #0
 810c08a:	613b      	str	r3, [r7, #16]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 810c08c:	2300      	movs	r3, #0
 810c08e:	617b      	str	r3, [r7, #20]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 810c090:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 810c094:	f7fe fd20 	bl	810aad8 <HAL_RCCEx_GetPeriphCLKFreq>
 810c098:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 810c09a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810c09c:	2b00      	cmp	r3, #0
 810c09e:	d109      	bne.n	810c0b4 <HAL_SD_InitCard+0x3c>
  {
    hsd->State = HAL_SD_STATE_READY;
 810c0a0:	687b      	ldr	r3, [r7, #4]
 810c0a2:	2201      	movs	r2, #1
 810c0a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 810c0a8:	687b      	ldr	r3, [r7, #4]
 810c0aa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 810c0ae:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 810c0b0:	2301      	movs	r3, #1
 810c0b2:	e079      	b.n	810c1a8 <HAL_SD_InitCard+0x130>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 810c0b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810c0b6:	0a1b      	lsrs	r3, r3, #8
 810c0b8:	4a3d      	ldr	r2, [pc, #244]	; (810c1b0 <HAL_SD_InitCard+0x138>)
 810c0ba:	fba2 2303 	umull	r2, r3, r2, r3
 810c0be:	091b      	lsrs	r3, r3, #4
 810c0c0:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
  Init.TranceiverPresent = hsd->Init.TranceiverPresent;
 810c0c2:	687b      	ldr	r3, [r7, #4]
 810c0c4:	699b      	ldr	r3, [r3, #24]
 810c0c6:	61fb      	str	r3, [r7, #28]

  if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 810c0c8:	687b      	ldr	r3, [r7, #4]
 810c0ca:	699b      	ldr	r3, [r3, #24]
 810c0cc:	2b02      	cmp	r3, #2
 810c0ce:	d107      	bne.n	810c0e0 <HAL_SD_InitCard+0x68>
  {
    /* Set Transceiver polarity */
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
 810c0d0:	687b      	ldr	r3, [r7, #4]
 810c0d2:	681b      	ldr	r3, [r3, #0]
 810c0d4:	681a      	ldr	r2, [r3, #0]
 810c0d6:	687b      	ldr	r3, [r7, #4]
 810c0d8:	681b      	ldr	r3, [r3, #0]
 810c0da:	f042 0210 	orr.w	r2, r2, #16
 810c0de:	601a      	str	r2, [r3, #0]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 810c0e0:	687b      	ldr	r3, [r7, #4]
 810c0e2:	681d      	ldr	r5, [r3, #0]
 810c0e4:	466c      	mov	r4, sp
 810c0e6:	f107 0314 	add.w	r3, r7, #20
 810c0ea:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 810c0ee:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 810c0f2:	f107 0308 	add.w	r3, r7, #8
 810c0f6:	cb0e      	ldmia	r3, {r1, r2, r3}
 810c0f8:	4628      	mov	r0, r5
 810c0fa:	f004 ff29 	bl	8110f50 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 810c0fe:	687b      	ldr	r3, [r7, #4]
 810c100:	681b      	ldr	r3, [r3, #0]
 810c102:	4618      	mov	r0, r3
 810c104:	f004 ff6c 	bl	8110fe0 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 810c108:	69bb      	ldr	r3, [r7, #24]
 810c10a:	005b      	lsls	r3, r3, #1
 810c10c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 810c10e:	fbb2 f3f3 	udiv	r3, r2, r3
 810c112:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 810c114:	4a27      	ldr	r2, [pc, #156]	; (810c1b4 <HAL_SD_InitCard+0x13c>)
 810c116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810c118:	fbb2 f3f3 	udiv	r3, r2, r3
 810c11c:	3301      	adds	r3, #1
 810c11e:	4618      	mov	r0, r3
 810c120:	f7f6 fc78 	bl	8102a14 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 810c124:	6878      	ldr	r0, [r7, #4]
 810c126:	f000 ffdb 	bl	810d0e0 <SD_PowerON>
 810c12a:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 810c12c:	6a3b      	ldr	r3, [r7, #32]
 810c12e:	2b00      	cmp	r3, #0
 810c130:	d00b      	beq.n	810c14a <HAL_SD_InitCard+0xd2>
  {
    hsd->State = HAL_SD_STATE_READY;
 810c132:	687b      	ldr	r3, [r7, #4]
 810c134:	2201      	movs	r2, #1
 810c136:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 810c13a:	687b      	ldr	r3, [r7, #4]
 810c13c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 810c13e:	6a3b      	ldr	r3, [r7, #32]
 810c140:	431a      	orrs	r2, r3
 810c142:	687b      	ldr	r3, [r7, #4]
 810c144:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 810c146:	2301      	movs	r3, #1
 810c148:	e02e      	b.n	810c1a8 <HAL_SD_InitCard+0x130>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 810c14a:	6878      	ldr	r0, [r7, #4]
 810c14c:	f000 ff0c 	bl	810cf68 <SD_InitCard>
 810c150:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 810c152:	6a3b      	ldr	r3, [r7, #32]
 810c154:	2b00      	cmp	r3, #0
 810c156:	d00b      	beq.n	810c170 <HAL_SD_InitCard+0xf8>
  {
    hsd->State = HAL_SD_STATE_READY;
 810c158:	687b      	ldr	r3, [r7, #4]
 810c15a:	2201      	movs	r2, #1
 810c15c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 810c160:	687b      	ldr	r3, [r7, #4]
 810c162:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 810c164:	6a3b      	ldr	r3, [r7, #32]
 810c166:	431a      	orrs	r2, r3
 810c168:	687b      	ldr	r3, [r7, #4]
 810c16a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 810c16c:	2301      	movs	r3, #1
 810c16e:	e01b      	b.n	810c1a8 <HAL_SD_InitCard+0x130>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 810c170:	687b      	ldr	r3, [r7, #4]
 810c172:	681b      	ldr	r3, [r3, #0]
 810c174:	f44f 7100 	mov.w	r1, #512	; 0x200
 810c178:	4618      	mov	r0, r3
 810c17a:	f004 ffc7 	bl	811110c <SDMMC_CmdBlockLength>
 810c17e:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 810c180:	6a3b      	ldr	r3, [r7, #32]
 810c182:	2b00      	cmp	r3, #0
 810c184:	d00f      	beq.n	810c1a6 <HAL_SD_InitCard+0x12e>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 810c186:	687b      	ldr	r3, [r7, #4]
 810c188:	681b      	ldr	r3, [r3, #0]
 810c18a:	4a0b      	ldr	r2, [pc, #44]	; (810c1b8 <HAL_SD_InitCard+0x140>)
 810c18c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 810c18e:	687b      	ldr	r3, [r7, #4]
 810c190:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 810c192:	6a3b      	ldr	r3, [r7, #32]
 810c194:	431a      	orrs	r2, r3
 810c196:	687b      	ldr	r3, [r7, #4]
 810c198:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 810c19a:	687b      	ldr	r3, [r7, #4]
 810c19c:	2201      	movs	r2, #1
 810c19e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 810c1a2:	2301      	movs	r3, #1
 810c1a4:	e000      	b.n	810c1a8 <HAL_SD_InitCard+0x130>
  }

  return HAL_OK;
 810c1a6:	2300      	movs	r3, #0
}
 810c1a8:	4618      	mov	r0, r3
 810c1aa:	3728      	adds	r7, #40	; 0x28
 810c1ac:	46bd      	mov	sp, r7
 810c1ae:	bdb0      	pop	{r4, r5, r7, pc}
 810c1b0:	014f8b59 	.word	0x014f8b59
 810c1b4:	00012110 	.word	0x00012110
 810c1b8:	1fe00fff 	.word	0x1fe00fff

0810c1bc <HAL_SD_ReadBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd,
                                        uint32_t NumberOfBlocks)
{
 810c1bc:	b580      	push	{r7, lr}
 810c1be:	b08c      	sub	sp, #48	; 0x30
 810c1c0:	af00      	add	r7, sp, #0
 810c1c2:	60f8      	str	r0, [r7, #12]
 810c1c4:	60b9      	str	r1, [r7, #8]
 810c1c6:	607a      	str	r2, [r7, #4]
 810c1c8:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 810c1ca:	687b      	ldr	r3, [r7, #4]
 810c1cc:	62bb      	str	r3, [r7, #40]	; 0x28

  if (NULL == pData)
 810c1ce:	68bb      	ldr	r3, [r7, #8]
 810c1d0:	2b00      	cmp	r3, #0
 810c1d2:	d107      	bne.n	810c1e4 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 810c1d4:	68fb      	ldr	r3, [r7, #12]
 810c1d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810c1d8:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 810c1dc:	68fb      	ldr	r3, [r7, #12]
 810c1de:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 810c1e0:	2301      	movs	r3, #1
 810c1e2:	e08d      	b.n	810c300 <HAL_SD_ReadBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 810c1e4:	68fb      	ldr	r3, [r7, #12]
 810c1e6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 810c1ea:	b2db      	uxtb	r3, r3
 810c1ec:	2b01      	cmp	r3, #1
 810c1ee:	f040 8086 	bne.w	810c2fe <HAL_SD_ReadBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 810c1f2:	68fb      	ldr	r3, [r7, #12]
 810c1f4:	2200      	movs	r2, #0
 810c1f6:	639a      	str	r2, [r3, #56]	; 0x38

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 810c1f8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 810c1fa:	683b      	ldr	r3, [r7, #0]
 810c1fc:	441a      	add	r2, r3
 810c1fe:	68fb      	ldr	r3, [r7, #12]
 810c200:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810c202:	429a      	cmp	r2, r3
 810c204:	d907      	bls.n	810c216 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 810c206:	68fb      	ldr	r3, [r7, #12]
 810c208:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810c20a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 810c20e:	68fb      	ldr	r3, [r7, #12]
 810c210:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 810c212:	2301      	movs	r3, #1
 810c214:	e074      	b.n	810c300 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 810c216:	68fb      	ldr	r3, [r7, #12]
 810c218:	2203      	movs	r2, #3
 810c21a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 810c21e:	68fb      	ldr	r3, [r7, #12]
 810c220:	681b      	ldr	r3, [r3, #0]
 810c222:	2200      	movs	r2, #0
 810c224:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pRxBuffPtr = pData;
 810c226:	68fb      	ldr	r3, [r7, #12]
 810c228:	68ba      	ldr	r2, [r7, #8]
 810c22a:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 810c22c:	683b      	ldr	r3, [r7, #0]
 810c22e:	025a      	lsls	r2, r3, #9
 810c230:	68fb      	ldr	r3, [r7, #12]
 810c232:	62da      	str	r2, [r3, #44]	; 0x2c

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 810c234:	68fb      	ldr	r3, [r7, #12]
 810c236:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810c238:	2b01      	cmp	r3, #1
 810c23a:	d002      	beq.n	810c242 <HAL_SD_ReadBlocks_DMA+0x86>
    {
      add *= 512U;
 810c23c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810c23e:	025b      	lsls	r3, r3, #9
 810c240:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 810c242:	f04f 33ff 	mov.w	r3, #4294967295
 810c246:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 810c248:	683b      	ldr	r3, [r7, #0]
 810c24a:	025b      	lsls	r3, r3, #9
 810c24c:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 810c24e:	2390      	movs	r3, #144	; 0x90
 810c250:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 810c252:	2302      	movs	r3, #2
 810c254:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 810c256:	2300      	movs	r3, #0
 810c258:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 810c25a:	2300      	movs	r3, #0
 810c25c:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 810c25e:	68fb      	ldr	r3, [r7, #12]
 810c260:	681b      	ldr	r3, [r3, #0]
 810c262:	f107 0210 	add.w	r2, r7, #16
 810c266:	4611      	mov	r1, r2
 810c268:	4618      	mov	r0, r3
 810c26a:	f004 ff23 	bl	81110b4 <SDMMC_ConfigData>

    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 810c26e:	68fb      	ldr	r3, [r7, #12]
 810c270:	681b      	ldr	r3, [r3, #0]
 810c272:	68da      	ldr	r2, [r3, #12]
 810c274:	68fb      	ldr	r3, [r7, #12]
 810c276:	681b      	ldr	r3, [r3, #0]
 810c278:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 810c27c:	60da      	str	r2, [r3, #12]
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 810c27e:	68fb      	ldr	r3, [r7, #12]
 810c280:	681b      	ldr	r3, [r3, #0]
 810c282:	68ba      	ldr	r2, [r7, #8]
 810c284:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 810c286:	68fb      	ldr	r3, [r7, #12]
 810c288:	681b      	ldr	r3, [r3, #0]
 810c28a:	2201      	movs	r2, #1
 810c28c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Read Blocks in DMA mode */
    if (NumberOfBlocks > 1U)
 810c28e:	683b      	ldr	r3, [r7, #0]
 810c290:	2b01      	cmp	r3, #1
 810c292:	d90a      	bls.n	810c2aa <HAL_SD_ReadBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 810c294:	68fb      	ldr	r3, [r7, #12]
 810c296:	2282      	movs	r2, #130	; 0x82
 810c298:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 810c29a:	68fb      	ldr	r3, [r7, #12]
 810c29c:	681b      	ldr	r3, [r3, #0]
 810c29e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 810c2a0:	4618      	mov	r0, r3
 810c2a2:	f004 ff79 	bl	8111198 <SDMMC_CmdReadMultiBlock>
 810c2a6:	62f8      	str	r0, [r7, #44]	; 0x2c
 810c2a8:	e009      	b.n	810c2be <HAL_SD_ReadBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 810c2aa:	68fb      	ldr	r3, [r7, #12]
 810c2ac:	2281      	movs	r2, #129	; 0x81
 810c2ae:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 810c2b0:	68fb      	ldr	r3, [r7, #12]
 810c2b2:	681b      	ldr	r3, [r3, #0]
 810c2b4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 810c2b6:	4618      	mov	r0, r3
 810c2b8:	f004 ff4b 	bl	8111152 <SDMMC_CmdReadSingleBlock>
 810c2bc:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 810c2be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810c2c0:	2b00      	cmp	r3, #0
 810c2c2:	d012      	beq.n	810c2ea <HAL_SD_ReadBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 810c2c4:	68fb      	ldr	r3, [r7, #12]
 810c2c6:	681b      	ldr	r3, [r3, #0]
 810c2c8:	4a0f      	ldr	r2, [pc, #60]	; (810c308 <HAL_SD_ReadBlocks_DMA+0x14c>)
 810c2ca:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 810c2cc:	68fb      	ldr	r3, [r7, #12]
 810c2ce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 810c2d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810c2d2:	431a      	orrs	r2, r3
 810c2d4:	68fb      	ldr	r3, [r7, #12]
 810c2d6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 810c2d8:	68fb      	ldr	r3, [r7, #12]
 810c2da:	2201      	movs	r2, #1
 810c2dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 810c2e0:	68fb      	ldr	r3, [r7, #12]
 810c2e2:	2200      	movs	r2, #0
 810c2e4:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 810c2e6:	2301      	movs	r3, #1
 810c2e8:	e00a      	b.n	810c300 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 810c2ea:	68fb      	ldr	r3, [r7, #12]
 810c2ec:	681b      	ldr	r3, [r3, #0]
 810c2ee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 810c2f0:	68fb      	ldr	r3, [r7, #12]
 810c2f2:	681b      	ldr	r3, [r3, #0]
 810c2f4:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 810c2f8:	63da      	str	r2, [r3, #60]	; 0x3c


    return HAL_OK;
 810c2fa:	2300      	movs	r3, #0
 810c2fc:	e000      	b.n	810c300 <HAL_SD_ReadBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 810c2fe:	2302      	movs	r3, #2
  }
}
 810c300:	4618      	mov	r0, r3
 810c302:	3730      	adds	r7, #48	; 0x30
 810c304:	46bd      	mov	sp, r7
 810c306:	bd80      	pop	{r7, pc}
 810c308:	1fe00fff 	.word	0x1fe00fff

0810c30c <HAL_SD_WriteBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd,
                                         uint32_t NumberOfBlocks)
{
 810c30c:	b580      	push	{r7, lr}
 810c30e:	b08c      	sub	sp, #48	; 0x30
 810c310:	af00      	add	r7, sp, #0
 810c312:	60f8      	str	r0, [r7, #12]
 810c314:	60b9      	str	r1, [r7, #8]
 810c316:	607a      	str	r2, [r7, #4]
 810c318:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 810c31a:	687b      	ldr	r3, [r7, #4]
 810c31c:	62bb      	str	r3, [r7, #40]	; 0x28

  if (NULL == pData)
 810c31e:	68bb      	ldr	r3, [r7, #8]
 810c320:	2b00      	cmp	r3, #0
 810c322:	d107      	bne.n	810c334 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 810c324:	68fb      	ldr	r3, [r7, #12]
 810c326:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810c328:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 810c32c:	68fb      	ldr	r3, [r7, #12]
 810c32e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 810c330:	2301      	movs	r3, #1
 810c332:	e08d      	b.n	810c450 <HAL_SD_WriteBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 810c334:	68fb      	ldr	r3, [r7, #12]
 810c336:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 810c33a:	b2db      	uxtb	r3, r3
 810c33c:	2b01      	cmp	r3, #1
 810c33e:	f040 8086 	bne.w	810c44e <HAL_SD_WriteBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 810c342:	68fb      	ldr	r3, [r7, #12]
 810c344:	2200      	movs	r2, #0
 810c346:	639a      	str	r2, [r3, #56]	; 0x38

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 810c348:	6aba      	ldr	r2, [r7, #40]	; 0x28
 810c34a:	683b      	ldr	r3, [r7, #0]
 810c34c:	441a      	add	r2, r3
 810c34e:	68fb      	ldr	r3, [r7, #12]
 810c350:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810c352:	429a      	cmp	r2, r3
 810c354:	d907      	bls.n	810c366 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 810c356:	68fb      	ldr	r3, [r7, #12]
 810c358:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810c35a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 810c35e:	68fb      	ldr	r3, [r7, #12]
 810c360:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 810c362:	2301      	movs	r3, #1
 810c364:	e074      	b.n	810c450 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 810c366:	68fb      	ldr	r3, [r7, #12]
 810c368:	2203      	movs	r2, #3
 810c36a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 810c36e:	68fb      	ldr	r3, [r7, #12]
 810c370:	681b      	ldr	r3, [r3, #0]
 810c372:	2200      	movs	r2, #0
 810c374:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pTxBuffPtr = pData;
 810c376:	68fb      	ldr	r3, [r7, #12]
 810c378:	68ba      	ldr	r2, [r7, #8]
 810c37a:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 810c37c:	683b      	ldr	r3, [r7, #0]
 810c37e:	025a      	lsls	r2, r3, #9
 810c380:	68fb      	ldr	r3, [r7, #12]
 810c382:	625a      	str	r2, [r3, #36]	; 0x24

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 810c384:	68fb      	ldr	r3, [r7, #12]
 810c386:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810c388:	2b01      	cmp	r3, #1
 810c38a:	d002      	beq.n	810c392 <HAL_SD_WriteBlocks_DMA+0x86>
    {
      add *= 512U;
 810c38c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810c38e:	025b      	lsls	r3, r3, #9
 810c390:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 810c392:	f04f 33ff 	mov.w	r3, #4294967295
 810c396:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 810c398:	683b      	ldr	r3, [r7, #0]
 810c39a:	025b      	lsls	r3, r3, #9
 810c39c:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 810c39e:	2390      	movs	r3, #144	; 0x90
 810c3a0:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 810c3a2:	2300      	movs	r3, #0
 810c3a4:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 810c3a6:	2300      	movs	r3, #0
 810c3a8:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 810c3aa:	2300      	movs	r3, #0
 810c3ac:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 810c3ae:	68fb      	ldr	r3, [r7, #12]
 810c3b0:	681b      	ldr	r3, [r3, #0]
 810c3b2:	f107 0210 	add.w	r2, r7, #16
 810c3b6:	4611      	mov	r1, r2
 810c3b8:	4618      	mov	r0, r3
 810c3ba:	f004 fe7b 	bl	81110b4 <SDMMC_ConfigData>


    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 810c3be:	68fb      	ldr	r3, [r7, #12]
 810c3c0:	681b      	ldr	r3, [r3, #0]
 810c3c2:	68da      	ldr	r2, [r3, #12]
 810c3c4:	68fb      	ldr	r3, [r7, #12]
 810c3c6:	681b      	ldr	r3, [r3, #0]
 810c3c8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 810c3cc:	60da      	str	r2, [r3, #12]

    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 810c3ce:	68fb      	ldr	r3, [r7, #12]
 810c3d0:	681b      	ldr	r3, [r3, #0]
 810c3d2:	68ba      	ldr	r2, [r7, #8]
 810c3d4:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 810c3d6:	68fb      	ldr	r3, [r7, #12]
 810c3d8:	681b      	ldr	r3, [r3, #0]
 810c3da:	2201      	movs	r2, #1
 810c3dc:	651a      	str	r2, [r3, #80]	; 0x50

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 810c3de:	683b      	ldr	r3, [r7, #0]
 810c3e0:	2b01      	cmp	r3, #1
 810c3e2:	d90a      	bls.n	810c3fa <HAL_SD_WriteBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 810c3e4:	68fb      	ldr	r3, [r7, #12]
 810c3e6:	22a0      	movs	r2, #160	; 0xa0
 810c3e8:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 810c3ea:	68fb      	ldr	r3, [r7, #12]
 810c3ec:	681b      	ldr	r3, [r3, #0]
 810c3ee:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 810c3f0:	4618      	mov	r0, r3
 810c3f2:	f004 ff17 	bl	8111224 <SDMMC_CmdWriteMultiBlock>
 810c3f6:	62f8      	str	r0, [r7, #44]	; 0x2c
 810c3f8:	e009      	b.n	810c40e <HAL_SD_WriteBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 810c3fa:	68fb      	ldr	r3, [r7, #12]
 810c3fc:	2290      	movs	r2, #144	; 0x90
 810c3fe:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 810c400:	68fb      	ldr	r3, [r7, #12]
 810c402:	681b      	ldr	r3, [r3, #0]
 810c404:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 810c406:	4618      	mov	r0, r3
 810c408:	f004 fee9 	bl	81111de <SDMMC_CmdWriteSingleBlock>
 810c40c:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 810c40e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810c410:	2b00      	cmp	r3, #0
 810c412:	d012      	beq.n	810c43a <HAL_SD_WriteBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 810c414:	68fb      	ldr	r3, [r7, #12]
 810c416:	681b      	ldr	r3, [r3, #0]
 810c418:	4a0f      	ldr	r2, [pc, #60]	; (810c458 <HAL_SD_WriteBlocks_DMA+0x14c>)
 810c41a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 810c41c:	68fb      	ldr	r3, [r7, #12]
 810c41e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 810c420:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810c422:	431a      	orrs	r2, r3
 810c424:	68fb      	ldr	r3, [r7, #12]
 810c426:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 810c428:	68fb      	ldr	r3, [r7, #12]
 810c42a:	2201      	movs	r2, #1
 810c42c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 810c430:	68fb      	ldr	r3, [r7, #12]
 810c432:	2200      	movs	r2, #0
 810c434:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 810c436:	2301      	movs	r3, #1
 810c438:	e00a      	b.n	810c450 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 810c43a:	68fb      	ldr	r3, [r7, #12]
 810c43c:	681b      	ldr	r3, [r3, #0]
 810c43e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 810c440:	68fb      	ldr	r3, [r7, #12]
 810c442:	681b      	ldr	r3, [r3, #0]
 810c444:	f442 728d 	orr.w	r2, r2, #282	; 0x11a
 810c448:	63da      	str	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 810c44a:	2300      	movs	r3, #0
 810c44c:	e000      	b.n	810c450 <HAL_SD_WriteBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 810c44e:	2302      	movs	r3, #2
  }
}
 810c450:	4618      	mov	r0, r3
 810c452:	3730      	adds	r7, #48	; 0x30
 810c454:	46bd      	mov	sp, r7
 810c456:	bd80      	pop	{r7, pc}
 810c458:	1fe00fff 	.word	0x1fe00fff

0810c45c <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 810c45c:	b580      	push	{r7, lr}
 810c45e:	b084      	sub	sp, #16
 810c460:	af00      	add	r7, sp, #0
 810c462:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 810c464:	687b      	ldr	r3, [r7, #4]
 810c466:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810c468:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 810c46a:	687b      	ldr	r3, [r7, #4]
 810c46c:	681b      	ldr	r3, [r3, #0]
 810c46e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 810c470:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 810c474:	2b00      	cmp	r3, #0
 810c476:	d008      	beq.n	810c48a <HAL_SD_IRQHandler+0x2e>
 810c478:	68fb      	ldr	r3, [r7, #12]
 810c47a:	f003 0308 	and.w	r3, r3, #8
 810c47e:	2b00      	cmp	r3, #0
 810c480:	d003      	beq.n	810c48a <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 810c482:	6878      	ldr	r0, [r7, #4]
 810c484:	f001 f992 	bl	810d7ac <SD_Read_IT>
 810c488:	e199      	b.n	810c7be <HAL_SD_IRQHandler+0x362>
  }

  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 810c48a:	687b      	ldr	r3, [r7, #4]
 810c48c:	681b      	ldr	r3, [r3, #0]
 810c48e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 810c490:	f403 7380 	and.w	r3, r3, #256	; 0x100
 810c494:	2b00      	cmp	r3, #0
 810c496:	f000 80ae 	beq.w	810c5f6 <HAL_SD_IRQHandler+0x19a>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 810c49a:	687b      	ldr	r3, [r7, #4]
 810c49c:	681b      	ldr	r3, [r3, #0]
 810c49e:	f44f 7280 	mov.w	r2, #256	; 0x100
 810c4a2:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 810c4a4:	687b      	ldr	r3, [r7, #4]
 810c4a6:	681b      	ldr	r3, [r3, #0]
 810c4a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810c4aa:	687a      	ldr	r2, [r7, #4]
 810c4ac:	6812      	ldr	r2, [r2, #0]
 810c4ae:	f423 4341 	bic.w	r3, r3, #49408	; 0xc100
 810c4b2:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 810c4b6:	63d3      	str	r3, [r2, #60]	; 0x3c
                        SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE | \
                        SDMMC_IT_RXFIFOHF);

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 810c4b8:	687b      	ldr	r3, [r7, #4]
 810c4ba:	681b      	ldr	r3, [r3, #0]
 810c4bc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 810c4be:	687b      	ldr	r3, [r7, #4]
 810c4c0:	681b      	ldr	r3, [r3, #0]
 810c4c2:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 810c4c6:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 810c4c8:	687b      	ldr	r3, [r7, #4]
 810c4ca:	681b      	ldr	r3, [r3, #0]
 810c4cc:	68da      	ldr	r2, [r3, #12]
 810c4ce:	687b      	ldr	r3, [r7, #4]
 810c4d0:	681b      	ldr	r3, [r3, #0]
 810c4d2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 810c4d6:	60da      	str	r2, [r3, #12]

    if ((context & SD_CONTEXT_IT) != 0U)
 810c4d8:	68fb      	ldr	r3, [r7, #12]
 810c4da:	f003 0308 	and.w	r3, r3, #8
 810c4de:	2b00      	cmp	r3, #0
 810c4e0:	d038      	beq.n	810c554 <HAL_SD_IRQHandler+0xf8>
    {
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 810c4e2:	68fb      	ldr	r3, [r7, #12]
 810c4e4:	f003 0302 	and.w	r3, r3, #2
 810c4e8:	2b00      	cmp	r3, #0
 810c4ea:	d104      	bne.n	810c4f6 <HAL_SD_IRQHandler+0x9a>
 810c4ec:	68fb      	ldr	r3, [r7, #12]
 810c4ee:	f003 0320 	and.w	r3, r3, #32
 810c4f2:	2b00      	cmp	r3, #0
 810c4f4:	d011      	beq.n	810c51a <HAL_SD_IRQHandler+0xbe>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 810c4f6:	687b      	ldr	r3, [r7, #4]
 810c4f8:	681b      	ldr	r3, [r3, #0]
 810c4fa:	4618      	mov	r0, r3
 810c4fc:	f004 feb6 	bl	811126c <SDMMC_CmdStopTransfer>
 810c500:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 810c502:	68bb      	ldr	r3, [r7, #8]
 810c504:	2b00      	cmp	r3, #0
 810c506:	d008      	beq.n	810c51a <HAL_SD_IRQHandler+0xbe>
        {
          hsd->ErrorCode |= errorstate;
 810c508:	687b      	ldr	r3, [r7, #4]
 810c50a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 810c50c:	68bb      	ldr	r3, [r7, #8]
 810c50e:	431a      	orrs	r2, r3
 810c510:	687b      	ldr	r3, [r7, #4]
 810c512:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 810c514:	6878      	ldr	r0, [r7, #4]
 810c516:	f000 f957 	bl	810c7c8 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 810c51a:	687b      	ldr	r3, [r7, #4]
 810c51c:	681b      	ldr	r3, [r3, #0]
 810c51e:	4aa0      	ldr	r2, [pc, #640]	; (810c7a0 <HAL_SD_IRQHandler+0x344>)
 810c520:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 810c522:	687b      	ldr	r3, [r7, #4]
 810c524:	2201      	movs	r2, #1
 810c526:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 810c52a:	687b      	ldr	r3, [r7, #4]
 810c52c:	2200      	movs	r2, #0
 810c52e:	631a      	str	r2, [r3, #48]	; 0x30
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 810c530:	68fb      	ldr	r3, [r7, #12]
 810c532:	f003 0301 	and.w	r3, r3, #1
 810c536:	2b00      	cmp	r3, #0
 810c538:	d104      	bne.n	810c544 <HAL_SD_IRQHandler+0xe8>
 810c53a:	68fb      	ldr	r3, [r7, #12]
 810c53c:	f003 0302 	and.w	r3, r3, #2
 810c540:	2b00      	cmp	r3, #0
 810c542:	d003      	beq.n	810c54c <HAL_SD_IRQHandler+0xf0>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 810c544:	6878      	ldr	r0, [r7, #4]
 810c546:	f006 fee7 	bl	8113318 <HAL_SD_RxCpltCallback>
 810c54a:	e138      	b.n	810c7be <HAL_SD_IRQHandler+0x362>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 810c54c:	6878      	ldr	r0, [r7, #4]
 810c54e:	f006 fed9 	bl	8113304 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 810c552:	e134      	b.n	810c7be <HAL_SD_IRQHandler+0x362>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 810c554:	68fb      	ldr	r3, [r7, #12]
 810c556:	f003 0380 	and.w	r3, r3, #128	; 0x80
 810c55a:	2b00      	cmp	r3, #0
 810c55c:	f000 812f 	beq.w	810c7be <HAL_SD_IRQHandler+0x362>
      hsd->Instance->DLEN = 0;
 810c560:	687b      	ldr	r3, [r7, #4]
 810c562:	681b      	ldr	r3, [r3, #0]
 810c564:	2200      	movs	r2, #0
 810c566:	629a      	str	r2, [r3, #40]	; 0x28
      hsd->Instance->DCTRL = 0;
 810c568:	687b      	ldr	r3, [r7, #4]
 810c56a:	681b      	ldr	r3, [r3, #0]
 810c56c:	2200      	movs	r2, #0
 810c56e:	62da      	str	r2, [r3, #44]	; 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 810c570:	687b      	ldr	r3, [r7, #4]
 810c572:	681b      	ldr	r3, [r3, #0]
 810c574:	2200      	movs	r2, #0
 810c576:	651a      	str	r2, [r3, #80]	; 0x50
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 810c578:	68fb      	ldr	r3, [r7, #12]
 810c57a:	f003 0302 	and.w	r3, r3, #2
 810c57e:	2b00      	cmp	r3, #0
 810c580:	d104      	bne.n	810c58c <HAL_SD_IRQHandler+0x130>
 810c582:	68fb      	ldr	r3, [r7, #12]
 810c584:	f003 0320 	and.w	r3, r3, #32
 810c588:	2b00      	cmp	r3, #0
 810c58a:	d011      	beq.n	810c5b0 <HAL_SD_IRQHandler+0x154>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 810c58c:	687b      	ldr	r3, [r7, #4]
 810c58e:	681b      	ldr	r3, [r3, #0]
 810c590:	4618      	mov	r0, r3
 810c592:	f004 fe6b 	bl	811126c <SDMMC_CmdStopTransfer>
 810c596:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 810c598:	68bb      	ldr	r3, [r7, #8]
 810c59a:	2b00      	cmp	r3, #0
 810c59c:	d008      	beq.n	810c5b0 <HAL_SD_IRQHandler+0x154>
          hsd->ErrorCode |= errorstate;
 810c59e:	687b      	ldr	r3, [r7, #4]
 810c5a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 810c5a2:	68bb      	ldr	r3, [r7, #8]
 810c5a4:	431a      	orrs	r2, r3
 810c5a6:	687b      	ldr	r3, [r7, #4]
 810c5a8:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 810c5aa:	6878      	ldr	r0, [r7, #4]
 810c5ac:	f000 f90c 	bl	810c7c8 <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 810c5b0:	687b      	ldr	r3, [r7, #4]
 810c5b2:	2201      	movs	r2, #1
 810c5b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 810c5b8:	687b      	ldr	r3, [r7, #4]
 810c5ba:	2200      	movs	r2, #0
 810c5bc:	631a      	str	r2, [r3, #48]	; 0x30
      if (((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 810c5be:	68fb      	ldr	r3, [r7, #12]
 810c5c0:	f003 0310 	and.w	r3, r3, #16
 810c5c4:	2b00      	cmp	r3, #0
 810c5c6:	d104      	bne.n	810c5d2 <HAL_SD_IRQHandler+0x176>
 810c5c8:	68fb      	ldr	r3, [r7, #12]
 810c5ca:	f003 0320 	and.w	r3, r3, #32
 810c5ce:	2b00      	cmp	r3, #0
 810c5d0:	d002      	beq.n	810c5d8 <HAL_SD_IRQHandler+0x17c>
        HAL_SD_TxCpltCallback(hsd);
 810c5d2:	6878      	ldr	r0, [r7, #4]
 810c5d4:	f006 fe96 	bl	8113304 <HAL_SD_TxCpltCallback>
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 810c5d8:	68fb      	ldr	r3, [r7, #12]
 810c5da:	f003 0301 	and.w	r3, r3, #1
 810c5de:	2b00      	cmp	r3, #0
 810c5e0:	d105      	bne.n	810c5ee <HAL_SD_IRQHandler+0x192>
 810c5e2:	68fb      	ldr	r3, [r7, #12]
 810c5e4:	f003 0302 	and.w	r3, r3, #2
 810c5e8:	2b00      	cmp	r3, #0
 810c5ea:	f000 80e8 	beq.w	810c7be <HAL_SD_IRQHandler+0x362>
        HAL_SD_RxCpltCallback(hsd);
 810c5ee:	6878      	ldr	r0, [r7, #4]
 810c5f0:	f006 fe92 	bl	8113318 <HAL_SD_RxCpltCallback>
}
 810c5f4:	e0e3      	b.n	810c7be <HAL_SD_IRQHandler+0x362>
  else if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 810c5f6:	687b      	ldr	r3, [r7, #4]
 810c5f8:	681b      	ldr	r3, [r3, #0]
 810c5fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 810c5fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 810c600:	2b00      	cmp	r3, #0
 810c602:	d008      	beq.n	810c616 <HAL_SD_IRQHandler+0x1ba>
 810c604:	68fb      	ldr	r3, [r7, #12]
 810c606:	f003 0308 	and.w	r3, r3, #8
 810c60a:	2b00      	cmp	r3, #0
 810c60c:	d003      	beq.n	810c616 <HAL_SD_IRQHandler+0x1ba>
    SD_Write_IT(hsd);
 810c60e:	6878      	ldr	r0, [r7, #4]
 810c610:	f001 f912 	bl	810d838 <SD_Write_IT>
 810c614:	e0d3      	b.n	810c7be <HAL_SD_IRQHandler+0x362>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR |
 810c616:	687b      	ldr	r3, [r7, #4]
 810c618:	681b      	ldr	r3, [r3, #0]
 810c61a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 810c61c:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 810c620:	2b00      	cmp	r3, #0
 810c622:	f000 809d 	beq.w	810c760 <HAL_SD_IRQHandler+0x304>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 810c626:	687b      	ldr	r3, [r7, #4]
 810c628:	681b      	ldr	r3, [r3, #0]
 810c62a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 810c62c:	f003 0302 	and.w	r3, r3, #2
 810c630:	2b00      	cmp	r3, #0
 810c632:	d005      	beq.n	810c640 <HAL_SD_IRQHandler+0x1e4>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 810c634:	687b      	ldr	r3, [r7, #4]
 810c636:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810c638:	f043 0202 	orr.w	r2, r3, #2
 810c63c:	687b      	ldr	r3, [r7, #4]
 810c63e:	639a      	str	r2, [r3, #56]	; 0x38
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 810c640:	687b      	ldr	r3, [r7, #4]
 810c642:	681b      	ldr	r3, [r3, #0]
 810c644:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 810c646:	f003 0308 	and.w	r3, r3, #8
 810c64a:	2b00      	cmp	r3, #0
 810c64c:	d005      	beq.n	810c65a <HAL_SD_IRQHandler+0x1fe>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 810c64e:	687b      	ldr	r3, [r7, #4]
 810c650:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810c652:	f043 0208 	orr.w	r2, r3, #8
 810c656:	687b      	ldr	r3, [r7, #4]
 810c658:	639a      	str	r2, [r3, #56]	; 0x38
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 810c65a:	687b      	ldr	r3, [r7, #4]
 810c65c:	681b      	ldr	r3, [r3, #0]
 810c65e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 810c660:	f003 0320 	and.w	r3, r3, #32
 810c664:	2b00      	cmp	r3, #0
 810c666:	d005      	beq.n	810c674 <HAL_SD_IRQHandler+0x218>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 810c668:	687b      	ldr	r3, [r7, #4]
 810c66a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810c66c:	f043 0220 	orr.w	r2, r3, #32
 810c670:	687b      	ldr	r3, [r7, #4]
 810c672:	639a      	str	r2, [r3, #56]	; 0x38
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 810c674:	687b      	ldr	r3, [r7, #4]
 810c676:	681b      	ldr	r3, [r3, #0]
 810c678:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 810c67a:	f003 0310 	and.w	r3, r3, #16
 810c67e:	2b00      	cmp	r3, #0
 810c680:	d005      	beq.n	810c68e <HAL_SD_IRQHandler+0x232>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 810c682:	687b      	ldr	r3, [r7, #4]
 810c684:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810c686:	f043 0210 	orr.w	r2, r3, #16
 810c68a:	687b      	ldr	r3, [r7, #4]
 810c68c:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 810c68e:	687b      	ldr	r3, [r7, #4]
 810c690:	681b      	ldr	r3, [r3, #0]
 810c692:	4a43      	ldr	r2, [pc, #268]	; (810c7a0 <HAL_SD_IRQHandler+0x344>)
 810c694:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 810c696:	687b      	ldr	r3, [r7, #4]
 810c698:	681b      	ldr	r3, [r3, #0]
 810c69a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 810c69c:	687b      	ldr	r3, [r7, #4]
 810c69e:	681b      	ldr	r3, [r3, #0]
 810c6a0:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 810c6a4:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 810c6a6:	687b      	ldr	r3, [r7, #4]
 810c6a8:	681b      	ldr	r3, [r3, #0]
 810c6aa:	68da      	ldr	r2, [r3, #12]
 810c6ac:	687b      	ldr	r3, [r7, #4]
 810c6ae:	681b      	ldr	r3, [r3, #0]
 810c6b0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 810c6b4:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 810c6b6:	687b      	ldr	r3, [r7, #4]
 810c6b8:	681b      	ldr	r3, [r3, #0]
 810c6ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810c6bc:	687b      	ldr	r3, [r7, #4]
 810c6be:	681b      	ldr	r3, [r3, #0]
 810c6c0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 810c6c4:	62da      	str	r2, [r3, #44]	; 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 810c6c6:	687b      	ldr	r3, [r7, #4]
 810c6c8:	681b      	ldr	r3, [r3, #0]
 810c6ca:	68da      	ldr	r2, [r3, #12]
 810c6cc:	687b      	ldr	r3, [r7, #4]
 810c6ce:	681b      	ldr	r3, [r3, #0]
 810c6d0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 810c6d4:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 810c6d6:	687b      	ldr	r3, [r7, #4]
 810c6d8:	681b      	ldr	r3, [r3, #0]
 810c6da:	4618      	mov	r0, r3
 810c6dc:	f004 fdc6 	bl	811126c <SDMMC_CmdStopTransfer>
 810c6e0:	4602      	mov	r2, r0
 810c6e2:	687b      	ldr	r3, [r7, #4]
 810c6e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810c6e6:	431a      	orrs	r2, r3
 810c6e8:	687b      	ldr	r3, [r7, #4]
 810c6ea:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 810c6ec:	687b      	ldr	r3, [r7, #4]
 810c6ee:	681b      	ldr	r3, [r3, #0]
 810c6f0:	68da      	ldr	r2, [r3, #12]
 810c6f2:	687b      	ldr	r3, [r7, #4]
 810c6f4:	681b      	ldr	r3, [r3, #0]
 810c6f6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 810c6fa:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 810c6fc:	687b      	ldr	r3, [r7, #4]
 810c6fe:	681b      	ldr	r3, [r3, #0]
 810c700:	f44f 6200 	mov.w	r2, #2048	; 0x800
 810c704:	639a      	str	r2, [r3, #56]	; 0x38
    if ((context & SD_CONTEXT_IT) != 0U)
 810c706:	68fb      	ldr	r3, [r7, #12]
 810c708:	f003 0308 	and.w	r3, r3, #8
 810c70c:	2b00      	cmp	r3, #0
 810c70e:	d00a      	beq.n	810c726 <HAL_SD_IRQHandler+0x2ca>
      hsd->State = HAL_SD_STATE_READY;
 810c710:	687b      	ldr	r3, [r7, #4]
 810c712:	2201      	movs	r2, #1
 810c714:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 810c718:	687b      	ldr	r3, [r7, #4]
 810c71a:	2200      	movs	r2, #0
 810c71c:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 810c71e:	6878      	ldr	r0, [r7, #4]
 810c720:	f000 f852 	bl	810c7c8 <HAL_SD_ErrorCallback>
}
 810c724:	e04b      	b.n	810c7be <HAL_SD_IRQHandler+0x362>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 810c726:	68fb      	ldr	r3, [r7, #12]
 810c728:	f003 0380 	and.w	r3, r3, #128	; 0x80
 810c72c:	2b00      	cmp	r3, #0
 810c72e:	d046      	beq.n	810c7be <HAL_SD_IRQHandler+0x362>
      if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 810c730:	687b      	ldr	r3, [r7, #4]
 810c732:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810c734:	2b00      	cmp	r3, #0
 810c736:	d042      	beq.n	810c7be <HAL_SD_IRQHandler+0x362>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 810c738:	687b      	ldr	r3, [r7, #4]
 810c73a:	681b      	ldr	r3, [r3, #0]
 810c73c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 810c73e:	687b      	ldr	r3, [r7, #4]
 810c740:	681b      	ldr	r3, [r3, #0]
 810c742:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 810c746:	63da      	str	r2, [r3, #60]	; 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 810c748:	687b      	ldr	r3, [r7, #4]
 810c74a:	681b      	ldr	r3, [r3, #0]
 810c74c:	2200      	movs	r2, #0
 810c74e:	651a      	str	r2, [r3, #80]	; 0x50
        hsd->State = HAL_SD_STATE_READY;
 810c750:	687b      	ldr	r3, [r7, #4]
 810c752:	2201      	movs	r2, #1
 810c754:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_ErrorCallback(hsd);
 810c758:	6878      	ldr	r0, [r7, #4]
 810c75a:	f000 f835 	bl	810c7c8 <HAL_SD_ErrorCallback>
}
 810c75e:	e02e      	b.n	810c7be <HAL_SD_IRQHandler+0x362>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 810c760:	687b      	ldr	r3, [r7, #4]
 810c762:	681b      	ldr	r3, [r3, #0]
 810c764:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 810c766:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 810c76a:	2b00      	cmp	r3, #0
 810c76c:	d027      	beq.n	810c7be <HAL_SD_IRQHandler+0x362>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 810c76e:	687b      	ldr	r3, [r7, #4]
 810c770:	681b      	ldr	r3, [r3, #0]
 810c772:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 810c776:	639a      	str	r2, [r3, #56]	; 0x38
    if (READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 810c778:	687b      	ldr	r3, [r7, #4]
 810c77a:	681b      	ldr	r3, [r3, #0]
 810c77c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810c77e:	f003 0304 	and.w	r3, r3, #4
 810c782:	2b00      	cmp	r3, #0
 810c784:	d10e      	bne.n	810c7a4 <HAL_SD_IRQHandler+0x348>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 810c786:	68fb      	ldr	r3, [r7, #12]
 810c788:	f003 0320 	and.w	r3, r3, #32
 810c78c:	2b00      	cmp	r3, #0
 810c78e:	d003      	beq.n	810c798 <HAL_SD_IRQHandler+0x33c>
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 810c790:	6878      	ldr	r0, [r7, #4]
 810c792:	f001 f8b9 	bl	810d908 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>
}
 810c796:	e012      	b.n	810c7be <HAL_SD_IRQHandler+0x362>
        HAL_SDEx_Read_DMADoubleBuf1CpltCallback(hsd);
 810c798:	6878      	ldr	r0, [r7, #4]
 810c79a:	f001 f8a1 	bl	810d8e0 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>
}
 810c79e:	e00e      	b.n	810c7be <HAL_SD_IRQHandler+0x362>
 810c7a0:	18000f3a 	.word	0x18000f3a
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 810c7a4:	68fb      	ldr	r3, [r7, #12]
 810c7a6:	f003 0320 	and.w	r3, r3, #32
 810c7aa:	2b00      	cmp	r3, #0
 810c7ac:	d003      	beq.n	810c7b6 <HAL_SD_IRQHandler+0x35a>
        HAL_SDEx_Write_DMADoubleBuf0CpltCallback(hsd);
 810c7ae:	6878      	ldr	r0, [r7, #4]
 810c7b0:	f001 f8a0 	bl	810d8f4 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>
}
 810c7b4:	e003      	b.n	810c7be <HAL_SD_IRQHandler+0x362>
        HAL_SDEx_Read_DMADoubleBuf0CpltCallback(hsd);
 810c7b6:	6878      	ldr	r0, [r7, #4]
 810c7b8:	f001 f888 	bl	810d8cc <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>
}
 810c7bc:	e7ff      	b.n	810c7be <HAL_SD_IRQHandler+0x362>
 810c7be:	bf00      	nop
 810c7c0:	3710      	adds	r7, #16
 810c7c2:	46bd      	mov	sp, r7
 810c7c4:	bd80      	pop	{r7, pc}
 810c7c6:	bf00      	nop

0810c7c8 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 810c7c8:	b480      	push	{r7}
 810c7ca:	b083      	sub	sp, #12
 810c7cc:	af00      	add	r7, sp, #0
 810c7ce:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 810c7d0:	bf00      	nop
 810c7d2:	370c      	adds	r7, #12
 810c7d4:	46bd      	mov	sp, r7
 810c7d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c7da:	4770      	bx	lr

0810c7dc <HAL_SD_DriveTransceiver_1_8V_Callback>:
  * @brief  Enable/Disable the SD Transceiver 1.8V Mode Callback.
  * @param  status: Voltage Switch State
  * @retval None
  */
__weak  void HAL_SD_DriveTransceiver_1_8V_Callback(FlagStatus status)
{
 810c7dc:	b480      	push	{r7}
 810c7de:	b083      	sub	sp, #12
 810c7e0:	af00      	add	r7, sp, #0
 810c7e2:	4603      	mov	r3, r0
 810c7e4:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(status);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_EnableTransceiver could be implemented in the user file
   */
}
 810c7e6:	bf00      	nop
 810c7e8:	370c      	adds	r7, #12
 810c7ea:	46bd      	mov	sp, r7
 810c7ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c7f0:	4770      	bx	lr
	...

0810c7f4 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 810c7f4:	b480      	push	{r7}
 810c7f6:	b083      	sub	sp, #12
 810c7f8:	af00      	add	r7, sp, #0
 810c7fa:	6078      	str	r0, [r7, #4]
 810c7fc:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 810c7fe:	687b      	ldr	r3, [r7, #4]
 810c800:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 810c802:	0f9b      	lsrs	r3, r3, #30
 810c804:	b2da      	uxtb	r2, r3
 810c806:	683b      	ldr	r3, [r7, #0]
 810c808:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 810c80a:	687b      	ldr	r3, [r7, #4]
 810c80c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 810c80e:	0e9b      	lsrs	r3, r3, #26
 810c810:	b2db      	uxtb	r3, r3
 810c812:	f003 030f 	and.w	r3, r3, #15
 810c816:	b2da      	uxtb	r2, r3
 810c818:	683b      	ldr	r3, [r7, #0]
 810c81a:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 810c81c:	687b      	ldr	r3, [r7, #4]
 810c81e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 810c820:	0e1b      	lsrs	r3, r3, #24
 810c822:	b2db      	uxtb	r3, r3
 810c824:	f003 0303 	and.w	r3, r3, #3
 810c828:	b2da      	uxtb	r2, r3
 810c82a:	683b      	ldr	r3, [r7, #0]
 810c82c:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 810c82e:	687b      	ldr	r3, [r7, #4]
 810c830:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 810c832:	0c1b      	lsrs	r3, r3, #16
 810c834:	b2da      	uxtb	r2, r3
 810c836:	683b      	ldr	r3, [r7, #0]
 810c838:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 810c83a:	687b      	ldr	r3, [r7, #4]
 810c83c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 810c83e:	0a1b      	lsrs	r3, r3, #8
 810c840:	b2da      	uxtb	r2, r3
 810c842:	683b      	ldr	r3, [r7, #0]
 810c844:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 810c846:	687b      	ldr	r3, [r7, #4]
 810c848:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 810c84a:	b2da      	uxtb	r2, r3
 810c84c:	683b      	ldr	r3, [r7, #0]
 810c84e:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 810c850:	687b      	ldr	r3, [r7, #4]
 810c852:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810c854:	0d1b      	lsrs	r3, r3, #20
 810c856:	b29a      	uxth	r2, r3
 810c858:	683b      	ldr	r3, [r7, #0]
 810c85a:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 810c85c:	687b      	ldr	r3, [r7, #4]
 810c85e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810c860:	0c1b      	lsrs	r3, r3, #16
 810c862:	b2db      	uxtb	r3, r3
 810c864:	f003 030f 	and.w	r3, r3, #15
 810c868:	b2da      	uxtb	r2, r3
 810c86a:	683b      	ldr	r3, [r7, #0]
 810c86c:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 810c86e:	687b      	ldr	r3, [r7, #4]
 810c870:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810c872:	0bdb      	lsrs	r3, r3, #15
 810c874:	b2db      	uxtb	r3, r3
 810c876:	f003 0301 	and.w	r3, r3, #1
 810c87a:	b2da      	uxtb	r2, r3
 810c87c:	683b      	ldr	r3, [r7, #0]
 810c87e:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 810c880:	687b      	ldr	r3, [r7, #4]
 810c882:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810c884:	0b9b      	lsrs	r3, r3, #14
 810c886:	b2db      	uxtb	r3, r3
 810c888:	f003 0301 	and.w	r3, r3, #1
 810c88c:	b2da      	uxtb	r2, r3
 810c88e:	683b      	ldr	r3, [r7, #0]
 810c890:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 810c892:	687b      	ldr	r3, [r7, #4]
 810c894:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810c896:	0b5b      	lsrs	r3, r3, #13
 810c898:	b2db      	uxtb	r3, r3
 810c89a:	f003 0301 	and.w	r3, r3, #1
 810c89e:	b2da      	uxtb	r2, r3
 810c8a0:	683b      	ldr	r3, [r7, #0]
 810c8a2:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 810c8a4:	687b      	ldr	r3, [r7, #4]
 810c8a6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810c8a8:	0b1b      	lsrs	r3, r3, #12
 810c8aa:	b2db      	uxtb	r3, r3
 810c8ac:	f003 0301 	and.w	r3, r3, #1
 810c8b0:	b2da      	uxtb	r2, r3
 810c8b2:	683b      	ldr	r3, [r7, #0]
 810c8b4:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 810c8b6:	683b      	ldr	r3, [r7, #0]
 810c8b8:	2200      	movs	r2, #0
 810c8ba:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 810c8bc:	687b      	ldr	r3, [r7, #4]
 810c8be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810c8c0:	2b00      	cmp	r3, #0
 810c8c2:	d163      	bne.n	810c98c <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 810c8c4:	687b      	ldr	r3, [r7, #4]
 810c8c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810c8c8:	009a      	lsls	r2, r3, #2
 810c8ca:	f640 73fc 	movw	r3, #4092	; 0xffc
 810c8ce:	4013      	ands	r3, r2
 810c8d0:	687a      	ldr	r2, [r7, #4]
 810c8d2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 810c8d4:	0f92      	lsrs	r2, r2, #30
 810c8d6:	431a      	orrs	r2, r3
 810c8d8:	683b      	ldr	r3, [r7, #0]
 810c8da:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 810c8dc:	687b      	ldr	r3, [r7, #4]
 810c8de:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 810c8e0:	0edb      	lsrs	r3, r3, #27
 810c8e2:	b2db      	uxtb	r3, r3
 810c8e4:	f003 0307 	and.w	r3, r3, #7
 810c8e8:	b2da      	uxtb	r2, r3
 810c8ea:	683b      	ldr	r3, [r7, #0]
 810c8ec:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 810c8ee:	687b      	ldr	r3, [r7, #4]
 810c8f0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 810c8f2:	0e1b      	lsrs	r3, r3, #24
 810c8f4:	b2db      	uxtb	r3, r3
 810c8f6:	f003 0307 	and.w	r3, r3, #7
 810c8fa:	b2da      	uxtb	r2, r3
 810c8fc:	683b      	ldr	r3, [r7, #0]
 810c8fe:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 810c900:	687b      	ldr	r3, [r7, #4]
 810c902:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 810c904:	0d5b      	lsrs	r3, r3, #21
 810c906:	b2db      	uxtb	r3, r3
 810c908:	f003 0307 	and.w	r3, r3, #7
 810c90c:	b2da      	uxtb	r2, r3
 810c90e:	683b      	ldr	r3, [r7, #0]
 810c910:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 810c912:	687b      	ldr	r3, [r7, #4]
 810c914:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 810c916:	0c9b      	lsrs	r3, r3, #18
 810c918:	b2db      	uxtb	r3, r3
 810c91a:	f003 0307 	and.w	r3, r3, #7
 810c91e:	b2da      	uxtb	r2, r3
 810c920:	683b      	ldr	r3, [r7, #0]
 810c922:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 810c924:	687b      	ldr	r3, [r7, #4]
 810c926:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 810c928:	0bdb      	lsrs	r3, r3, #15
 810c92a:	b2db      	uxtb	r3, r3
 810c92c:	f003 0307 	and.w	r3, r3, #7
 810c930:	b2da      	uxtb	r2, r3
 810c932:	683b      	ldr	r3, [r7, #0]
 810c934:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 810c936:	683b      	ldr	r3, [r7, #0]
 810c938:	691b      	ldr	r3, [r3, #16]
 810c93a:	1c5a      	adds	r2, r3, #1
 810c93c:	687b      	ldr	r3, [r7, #4]
 810c93e:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 810c940:	683b      	ldr	r3, [r7, #0]
 810c942:	7e1b      	ldrb	r3, [r3, #24]
 810c944:	b2db      	uxtb	r3, r3
 810c946:	f003 0307 	and.w	r3, r3, #7
 810c94a:	3302      	adds	r3, #2
 810c94c:	2201      	movs	r2, #1
 810c94e:	fa02 f303 	lsl.w	r3, r2, r3
 810c952:	687a      	ldr	r2, [r7, #4]
 810c954:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 810c956:	fb02 f203 	mul.w	r2, r2, r3
 810c95a:	687b      	ldr	r3, [r7, #4]
 810c95c:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 810c95e:	683b      	ldr	r3, [r7, #0]
 810c960:	7a1b      	ldrb	r3, [r3, #8]
 810c962:	b2db      	uxtb	r3, r3
 810c964:	f003 030f 	and.w	r3, r3, #15
 810c968:	2201      	movs	r2, #1
 810c96a:	409a      	lsls	r2, r3
 810c96c:	687b      	ldr	r3, [r7, #4]
 810c96e:	651a      	str	r2, [r3, #80]	; 0x50

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 810c970:	687b      	ldr	r3, [r7, #4]
 810c972:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 810c974:	687a      	ldr	r2, [r7, #4]
 810c976:	6d12      	ldr	r2, [r2, #80]	; 0x50
 810c978:	0a52      	lsrs	r2, r2, #9
 810c97a:	fb02 f203 	mul.w	r2, r2, r3
 810c97e:	687b      	ldr	r3, [r7, #4]
 810c980:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockSize = 512U;
 810c982:	687b      	ldr	r3, [r7, #4]
 810c984:	f44f 7200 	mov.w	r2, #512	; 0x200
 810c988:	659a      	str	r2, [r3, #88]	; 0x58
 810c98a:	e031      	b.n	810c9f0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 810c98c:	687b      	ldr	r3, [r7, #4]
 810c98e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810c990:	2b01      	cmp	r3, #1
 810c992:	d11d      	bne.n	810c9d0 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 810c994:	687b      	ldr	r3, [r7, #4]
 810c996:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810c998:	041b      	lsls	r3, r3, #16
 810c99a:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 810c99e:	687b      	ldr	r3, [r7, #4]
 810c9a0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 810c9a2:	0c1b      	lsrs	r3, r3, #16
 810c9a4:	431a      	orrs	r2, r3
 810c9a6:	683b      	ldr	r3, [r7, #0]
 810c9a8:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 810c9aa:	683b      	ldr	r3, [r7, #0]
 810c9ac:	691b      	ldr	r3, [r3, #16]
 810c9ae:	3301      	adds	r3, #1
 810c9b0:	029a      	lsls	r2, r3, #10
 810c9b2:	687b      	ldr	r3, [r7, #4]
 810c9b4:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 810c9b6:	687b      	ldr	r3, [r7, #4]
 810c9b8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 810c9ba:	687b      	ldr	r3, [r7, #4]
 810c9bc:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = 512U;
 810c9be:	687b      	ldr	r3, [r7, #4]
 810c9c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 810c9c4:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 810c9c6:	687b      	ldr	r3, [r7, #4]
 810c9c8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 810c9ca:	687b      	ldr	r3, [r7, #4]
 810c9cc:	659a      	str	r2, [r3, #88]	; 0x58
 810c9ce:	e00f      	b.n	810c9f0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 810c9d0:	687b      	ldr	r3, [r7, #4]
 810c9d2:	681b      	ldr	r3, [r3, #0]
 810c9d4:	4a58      	ldr	r2, [pc, #352]	; (810cb38 <HAL_SD_GetCardCSD+0x344>)
 810c9d6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 810c9d8:	687b      	ldr	r3, [r7, #4]
 810c9da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810c9dc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 810c9e0:	687b      	ldr	r3, [r7, #4]
 810c9e2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 810c9e4:	687b      	ldr	r3, [r7, #4]
 810c9e6:	2201      	movs	r2, #1
 810c9e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 810c9ec:	2301      	movs	r3, #1
 810c9ee:	e09d      	b.n	810cb2c <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 810c9f0:	687b      	ldr	r3, [r7, #4]
 810c9f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 810c9f4:	0b9b      	lsrs	r3, r3, #14
 810c9f6:	b2db      	uxtb	r3, r3
 810c9f8:	f003 0301 	and.w	r3, r3, #1
 810c9fc:	b2da      	uxtb	r2, r3
 810c9fe:	683b      	ldr	r3, [r7, #0]
 810ca00:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 810ca02:	687b      	ldr	r3, [r7, #4]
 810ca04:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 810ca06:	09db      	lsrs	r3, r3, #7
 810ca08:	b2db      	uxtb	r3, r3
 810ca0a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 810ca0e:	b2da      	uxtb	r2, r3
 810ca10:	683b      	ldr	r3, [r7, #0]
 810ca12:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 810ca14:	687b      	ldr	r3, [r7, #4]
 810ca16:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 810ca18:	b2db      	uxtb	r3, r3
 810ca1a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 810ca1e:	b2da      	uxtb	r2, r3
 810ca20:	683b      	ldr	r3, [r7, #0]
 810ca22:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 810ca24:	687b      	ldr	r3, [r7, #4]
 810ca26:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 810ca28:	0fdb      	lsrs	r3, r3, #31
 810ca2a:	b2da      	uxtb	r2, r3
 810ca2c:	683b      	ldr	r3, [r7, #0]
 810ca2e:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 810ca30:	687b      	ldr	r3, [r7, #4]
 810ca32:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 810ca34:	0f5b      	lsrs	r3, r3, #29
 810ca36:	b2db      	uxtb	r3, r3
 810ca38:	f003 0303 	and.w	r3, r3, #3
 810ca3c:	b2da      	uxtb	r2, r3
 810ca3e:	683b      	ldr	r3, [r7, #0]
 810ca40:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 810ca42:	687b      	ldr	r3, [r7, #4]
 810ca44:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 810ca46:	0e9b      	lsrs	r3, r3, #26
 810ca48:	b2db      	uxtb	r3, r3
 810ca4a:	f003 0307 	and.w	r3, r3, #7
 810ca4e:	b2da      	uxtb	r2, r3
 810ca50:	683b      	ldr	r3, [r7, #0]
 810ca52:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 810ca54:	687b      	ldr	r3, [r7, #4]
 810ca56:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 810ca58:	0d9b      	lsrs	r3, r3, #22
 810ca5a:	b2db      	uxtb	r3, r3
 810ca5c:	f003 030f 	and.w	r3, r3, #15
 810ca60:	b2da      	uxtb	r2, r3
 810ca62:	683b      	ldr	r3, [r7, #0]
 810ca64:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 810ca66:	687b      	ldr	r3, [r7, #4]
 810ca68:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 810ca6a:	0d5b      	lsrs	r3, r3, #21
 810ca6c:	b2db      	uxtb	r3, r3
 810ca6e:	f003 0301 	and.w	r3, r3, #1
 810ca72:	b2da      	uxtb	r2, r3
 810ca74:	683b      	ldr	r3, [r7, #0]
 810ca76:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 810ca7a:	683b      	ldr	r3, [r7, #0]
 810ca7c:	2200      	movs	r2, #0
 810ca7e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 810ca82:	687b      	ldr	r3, [r7, #4]
 810ca84:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 810ca86:	0c1b      	lsrs	r3, r3, #16
 810ca88:	b2db      	uxtb	r3, r3
 810ca8a:	f003 0301 	and.w	r3, r3, #1
 810ca8e:	b2da      	uxtb	r2, r3
 810ca90:	683b      	ldr	r3, [r7, #0]
 810ca92:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 810ca96:	687b      	ldr	r3, [r7, #4]
 810ca98:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 810ca9a:	0bdb      	lsrs	r3, r3, #15
 810ca9c:	b2db      	uxtb	r3, r3
 810ca9e:	f003 0301 	and.w	r3, r3, #1
 810caa2:	b2da      	uxtb	r2, r3
 810caa4:	683b      	ldr	r3, [r7, #0]
 810caa6:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 810caaa:	687b      	ldr	r3, [r7, #4]
 810caac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 810caae:	0b9b      	lsrs	r3, r3, #14
 810cab0:	b2db      	uxtb	r3, r3
 810cab2:	f003 0301 	and.w	r3, r3, #1
 810cab6:	b2da      	uxtb	r2, r3
 810cab8:	683b      	ldr	r3, [r7, #0]
 810caba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 810cabe:	687b      	ldr	r3, [r7, #4]
 810cac0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 810cac2:	0b5b      	lsrs	r3, r3, #13
 810cac4:	b2db      	uxtb	r3, r3
 810cac6:	f003 0301 	and.w	r3, r3, #1
 810caca:	b2da      	uxtb	r2, r3
 810cacc:	683b      	ldr	r3, [r7, #0]
 810cace:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 810cad2:	687b      	ldr	r3, [r7, #4]
 810cad4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 810cad6:	0b1b      	lsrs	r3, r3, #12
 810cad8:	b2db      	uxtb	r3, r3
 810cada:	f003 0301 	and.w	r3, r3, #1
 810cade:	b2da      	uxtb	r2, r3
 810cae0:	683b      	ldr	r3, [r7, #0]
 810cae2:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 810cae6:	687b      	ldr	r3, [r7, #4]
 810cae8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 810caea:	0a9b      	lsrs	r3, r3, #10
 810caec:	b2db      	uxtb	r3, r3
 810caee:	f003 0303 	and.w	r3, r3, #3
 810caf2:	b2da      	uxtb	r2, r3
 810caf4:	683b      	ldr	r3, [r7, #0]
 810caf6:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 810cafa:	687b      	ldr	r3, [r7, #4]
 810cafc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 810cafe:	0a1b      	lsrs	r3, r3, #8
 810cb00:	b2db      	uxtb	r3, r3
 810cb02:	f003 0303 	and.w	r3, r3, #3
 810cb06:	b2da      	uxtb	r2, r3
 810cb08:	683b      	ldr	r3, [r7, #0]
 810cb0a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 810cb0e:	687b      	ldr	r3, [r7, #4]
 810cb10:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 810cb12:	085b      	lsrs	r3, r3, #1
 810cb14:	b2db      	uxtb	r3, r3
 810cb16:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 810cb1a:	b2da      	uxtb	r2, r3
 810cb1c:	683b      	ldr	r3, [r7, #0]
 810cb1e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 810cb22:	683b      	ldr	r3, [r7, #0]
 810cb24:	2201      	movs	r2, #1
 810cb26:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 810cb2a:	2300      	movs	r3, #0
}
 810cb2c:	4618      	mov	r0, r3
 810cb2e:	370c      	adds	r7, #12
 810cb30:	46bd      	mov	sp, r7
 810cb32:	f85d 7b04 	ldr.w	r7, [sp], #4
 810cb36:	4770      	bx	lr
 810cb38:	1fe00fff 	.word	0x1fe00fff

0810cb3c <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 810cb3c:	b580      	push	{r7, lr}
 810cb3e:	b094      	sub	sp, #80	; 0x50
 810cb40:	af00      	add	r7, sp, #0
 810cb42:	6078      	str	r0, [r7, #4]
 810cb44:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 810cb46:	2300      	movs	r3, #0
 810cb48:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  errorstate = SD_SendSDStatus(hsd, sd_status);
 810cb4c:	f107 0308 	add.w	r3, r7, #8
 810cb50:	4619      	mov	r1, r3
 810cb52:	6878      	ldr	r0, [r7, #4]
 810cb54:	f000 fbcc 	bl	810d2f0 <SD_SendSDStatus>
 810cb58:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 810cb5a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 810cb5c:	2b00      	cmp	r3, #0
 810cb5e:	d011      	beq.n	810cb84 <HAL_SD_GetCardStatus+0x48>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 810cb60:	687b      	ldr	r3, [r7, #4]
 810cb62:	681b      	ldr	r3, [r3, #0]
 810cb64:	4a4f      	ldr	r2, [pc, #316]	; (810cca4 <HAL_SD_GetCardStatus+0x168>)
 810cb66:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 810cb68:	687b      	ldr	r3, [r7, #4]
 810cb6a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 810cb6c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 810cb6e:	431a      	orrs	r2, r3
 810cb70:	687b      	ldr	r3, [r7, #4]
 810cb72:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 810cb74:	687b      	ldr	r3, [r7, #4]
 810cb76:	2201      	movs	r2, #1
 810cb78:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 810cb7c:	2301      	movs	r3, #1
 810cb7e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 810cb82:	e070      	b.n	810cc66 <HAL_SD_GetCardStatus+0x12a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 810cb84:	68bb      	ldr	r3, [r7, #8]
 810cb86:	099b      	lsrs	r3, r3, #6
 810cb88:	b2db      	uxtb	r3, r3
 810cb8a:	f003 0303 	and.w	r3, r3, #3
 810cb8e:	b2da      	uxtb	r2, r3
 810cb90:	683b      	ldr	r3, [r7, #0]
 810cb92:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 810cb94:	68bb      	ldr	r3, [r7, #8]
 810cb96:	095b      	lsrs	r3, r3, #5
 810cb98:	b2db      	uxtb	r3, r3
 810cb9a:	f003 0301 	and.w	r3, r3, #1
 810cb9e:	b2da      	uxtb	r2, r3
 810cba0:	683b      	ldr	r3, [r7, #0]
 810cba2:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 810cba4:	68bb      	ldr	r3, [r7, #8]
 810cba6:	0a1b      	lsrs	r3, r3, #8
 810cba8:	b29b      	uxth	r3, r3
 810cbaa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 810cbae:	b29a      	uxth	r2, r3
 810cbb0:	68bb      	ldr	r3, [r7, #8]
 810cbb2:	0e1b      	lsrs	r3, r3, #24
 810cbb4:	b29b      	uxth	r3, r3
 810cbb6:	4313      	orrs	r3, r2
 810cbb8:	b29a      	uxth	r2, r3
 810cbba:	683b      	ldr	r3, [r7, #0]
 810cbbc:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 810cbbe:	68fb      	ldr	r3, [r7, #12]
 810cbc0:	061a      	lsls	r2, r3, #24
 810cbc2:	68fb      	ldr	r3, [r7, #12]
 810cbc4:	021b      	lsls	r3, r3, #8
 810cbc6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 810cbca:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 810cbcc:	68fb      	ldr	r3, [r7, #12]
 810cbce:	0a1b      	lsrs	r3, r3, #8
 810cbd0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 810cbd4:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 810cbd6:	68fb      	ldr	r3, [r7, #12]
 810cbd8:	0e1b      	lsrs	r3, r3, #24
 810cbda:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 810cbdc:	683b      	ldr	r3, [r7, #0]
 810cbde:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 810cbe0:	693b      	ldr	r3, [r7, #16]
 810cbe2:	b2da      	uxtb	r2, r3
 810cbe4:	683b      	ldr	r3, [r7, #0]
 810cbe6:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 810cbe8:	693b      	ldr	r3, [r7, #16]
 810cbea:	0a1b      	lsrs	r3, r3, #8
 810cbec:	b2da      	uxtb	r2, r3
 810cbee:	683b      	ldr	r3, [r7, #0]
 810cbf0:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 810cbf2:	693b      	ldr	r3, [r7, #16]
 810cbf4:	0d1b      	lsrs	r3, r3, #20
 810cbf6:	b2db      	uxtb	r3, r3
 810cbf8:	f003 030f 	and.w	r3, r3, #15
 810cbfc:	b2da      	uxtb	r2, r3
 810cbfe:	683b      	ldr	r3, [r7, #0]
 810cc00:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 810cc02:	693b      	ldr	r3, [r7, #16]
 810cc04:	0c1b      	lsrs	r3, r3, #16
 810cc06:	b29b      	uxth	r3, r3
 810cc08:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 810cc0c:	b29a      	uxth	r2, r3
 810cc0e:	697b      	ldr	r3, [r7, #20]
 810cc10:	b29b      	uxth	r3, r3
 810cc12:	b2db      	uxtb	r3, r3
 810cc14:	b29b      	uxth	r3, r3
 810cc16:	4313      	orrs	r3, r2
 810cc18:	b29a      	uxth	r2, r3
 810cc1a:	683b      	ldr	r3, [r7, #0]
 810cc1c:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 810cc1e:	697b      	ldr	r3, [r7, #20]
 810cc20:	0a9b      	lsrs	r3, r3, #10
 810cc22:	b2db      	uxtb	r3, r3
 810cc24:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 810cc28:	b2da      	uxtb	r2, r3
 810cc2a:	683b      	ldr	r3, [r7, #0]
 810cc2c:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 810cc2e:	697b      	ldr	r3, [r7, #20]
 810cc30:	0a1b      	lsrs	r3, r3, #8
 810cc32:	b2db      	uxtb	r3, r3
 810cc34:	f003 0303 	and.w	r3, r3, #3
 810cc38:	b2da      	uxtb	r2, r3
 810cc3a:	683b      	ldr	r3, [r7, #0]
 810cc3c:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 810cc3e:	697b      	ldr	r3, [r7, #20]
 810cc40:	091b      	lsrs	r3, r3, #4
 810cc42:	b2db      	uxtb	r3, r3
 810cc44:	f003 030f 	and.w	r3, r3, #15
 810cc48:	b2da      	uxtb	r2, r3
 810cc4a:	683b      	ldr	r3, [r7, #0]
 810cc4c:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 810cc4e:	697b      	ldr	r3, [r7, #20]
 810cc50:	b2db      	uxtb	r3, r3
 810cc52:	f003 030f 	and.w	r3, r3, #15
 810cc56:	b2da      	uxtb	r2, r3
 810cc58:	683b      	ldr	r3, [r7, #0]
 810cc5a:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 810cc5c:	69bb      	ldr	r3, [r7, #24]
 810cc5e:	0e1b      	lsrs	r3, r3, #24
 810cc60:	b2da      	uxtb	r2, r3
 810cc62:	683b      	ldr	r3, [r7, #0]
 810cc64:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 810cc66:	687b      	ldr	r3, [r7, #4]
 810cc68:	681b      	ldr	r3, [r3, #0]
 810cc6a:	f44f 7100 	mov.w	r1, #512	; 0x200
 810cc6e:	4618      	mov	r0, r3
 810cc70:	f004 fa4c 	bl	811110c <SDMMC_CmdBlockLength>
 810cc74:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 810cc76:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 810cc78:	2b00      	cmp	r3, #0
 810cc7a:	d00d      	beq.n	810cc98 <HAL_SD_GetCardStatus+0x15c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 810cc7c:	687b      	ldr	r3, [r7, #4]
 810cc7e:	681b      	ldr	r3, [r3, #0]
 810cc80:	4a08      	ldr	r2, [pc, #32]	; (810cca4 <HAL_SD_GetCardStatus+0x168>)
 810cc82:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 810cc84:	687b      	ldr	r3, [r7, #4]
 810cc86:	6cba      	ldr	r2, [r7, #72]	; 0x48
 810cc88:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 810cc8a:	687b      	ldr	r3, [r7, #4]
 810cc8c:	2201      	movs	r2, #1
 810cc8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 810cc92:	2301      	movs	r3, #1
 810cc94:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }

  return status;
 810cc98:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 810cc9c:	4618      	mov	r0, r3
 810cc9e:	3750      	adds	r7, #80	; 0x50
 810cca0:	46bd      	mov	sp, r7
 810cca2:	bd80      	pop	{r7, pc}
 810cca4:	1fe00fff 	.word	0x1fe00fff

0810cca8 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 810cca8:	b480      	push	{r7}
 810ccaa:	b083      	sub	sp, #12
 810ccac:	af00      	add	r7, sp, #0
 810ccae:	6078      	str	r0, [r7, #4]
 810ccb0:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 810ccb2:	687b      	ldr	r3, [r7, #4]
 810ccb4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 810ccb6:	683b      	ldr	r3, [r7, #0]
 810ccb8:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 810ccba:	687b      	ldr	r3, [r7, #4]
 810ccbc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 810ccbe:	683b      	ldr	r3, [r7, #0]
 810ccc0:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 810ccc2:	687b      	ldr	r3, [r7, #4]
 810ccc4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 810ccc6:	683b      	ldr	r3, [r7, #0]
 810ccc8:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 810ccca:	687b      	ldr	r3, [r7, #4]
 810cccc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 810ccce:	683b      	ldr	r3, [r7, #0]
 810ccd0:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 810ccd2:	687b      	ldr	r3, [r7, #4]
 810ccd4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 810ccd6:	683b      	ldr	r3, [r7, #0]
 810ccd8:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 810ccda:	687b      	ldr	r3, [r7, #4]
 810ccdc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 810ccde:	683b      	ldr	r3, [r7, #0]
 810cce0:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 810cce2:	687b      	ldr	r3, [r7, #4]
 810cce4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 810cce6:	683b      	ldr	r3, [r7, #0]
 810cce8:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 810ccea:	687b      	ldr	r3, [r7, #4]
 810ccec:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 810ccee:	683b      	ldr	r3, [r7, #0]
 810ccf0:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 810ccf2:	2300      	movs	r3, #0
}
 810ccf4:	4618      	mov	r0, r3
 810ccf6:	370c      	adds	r7, #12
 810ccf8:	46bd      	mov	sp, r7
 810ccfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 810ccfe:	4770      	bx	lr

0810cd00 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 810cd00:	b5b0      	push	{r4, r5, r7, lr}
 810cd02:	b090      	sub	sp, #64	; 0x40
 810cd04:	af04      	add	r7, sp, #16
 810cd06:	6078      	str	r0, [r7, #4]
 810cd08:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 810cd0a:	2300      	movs	r3, #0
 810cd0c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 810cd10:	687b      	ldr	r3, [r7, #4]
 810cd12:	2203      	movs	r2, #3
 810cd14:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if (hsd->SdCard.CardType != CARD_SECURED)
 810cd18:	687b      	ldr	r3, [r7, #4]
 810cd1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810cd1c:	2b03      	cmp	r3, #3
 810cd1e:	d02e      	beq.n	810cd7e <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 810cd20:	683b      	ldr	r3, [r7, #0]
 810cd22:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 810cd26:	d106      	bne.n	810cd36 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 810cd28:	687b      	ldr	r3, [r7, #4]
 810cd2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810cd2c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 810cd30:	687b      	ldr	r3, [r7, #4]
 810cd32:	639a      	str	r2, [r3, #56]	; 0x38
 810cd34:	e029      	b.n	810cd8a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 810cd36:	683b      	ldr	r3, [r7, #0]
 810cd38:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 810cd3c:	d10a      	bne.n	810cd54 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 810cd3e:	6878      	ldr	r0, [r7, #4]
 810cd40:	f000 fbce 	bl	810d4e0 <SD_WideBus_Enable>
 810cd44:	62b8      	str	r0, [r7, #40]	; 0x28

      hsd->ErrorCode |= errorstate;
 810cd46:	687b      	ldr	r3, [r7, #4]
 810cd48:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 810cd4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810cd4c:	431a      	orrs	r2, r3
 810cd4e:	687b      	ldr	r3, [r7, #4]
 810cd50:	639a      	str	r2, [r3, #56]	; 0x38
 810cd52:	e01a      	b.n	810cd8a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 810cd54:	683b      	ldr	r3, [r7, #0]
 810cd56:	2b00      	cmp	r3, #0
 810cd58:	d10a      	bne.n	810cd70 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 810cd5a:	6878      	ldr	r0, [r7, #4]
 810cd5c:	f000 fc0b 	bl	810d576 <SD_WideBus_Disable>
 810cd60:	62b8      	str	r0, [r7, #40]	; 0x28

      hsd->ErrorCode |= errorstate;
 810cd62:	687b      	ldr	r3, [r7, #4]
 810cd64:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 810cd66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810cd68:	431a      	orrs	r2, r3
 810cd6a:	687b      	ldr	r3, [r7, #4]
 810cd6c:	639a      	str	r2, [r3, #56]	; 0x38
 810cd6e:	e00c      	b.n	810cd8a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 810cd70:	687b      	ldr	r3, [r7, #4]
 810cd72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810cd74:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 810cd78:	687b      	ldr	r3, [r7, #4]
 810cd7a:	639a      	str	r2, [r3, #56]	; 0x38
 810cd7c:	e005      	b.n	810cd8a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 810cd7e:	687b      	ldr	r3, [r7, #4]
 810cd80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810cd82:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 810cd86:	687b      	ldr	r3, [r7, #4]
 810cd88:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 810cd8a:	687b      	ldr	r3, [r7, #4]
 810cd8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810cd8e:	2b00      	cmp	r3, #0
 810cd90:	d007      	beq.n	810cda2 <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 810cd92:	687b      	ldr	r3, [r7, #4]
 810cd94:	681b      	ldr	r3, [r3, #0]
 810cd96:	4a60      	ldr	r2, [pc, #384]	; (810cf18 <HAL_SD_ConfigWideBusOperation+0x218>)
 810cd98:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 810cd9a:	2301      	movs	r3, #1
 810cd9c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 810cda0:	e097      	b.n	810ced2 <HAL_SD_ConfigWideBusOperation+0x1d2>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 810cda2:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 810cda6:	f7fd fe97 	bl	810aad8 <HAL_RCCEx_GetPeriphCLKFreq>
 810cdaa:	6278      	str	r0, [r7, #36]	; 0x24
    if (sdmmc_clk != 0U)
 810cdac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810cdae:	2b00      	cmp	r3, #0
 810cdb0:	f000 8086 	beq.w	810cec0 <HAL_SD_ConfigWideBusOperation+0x1c0>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 810cdb4:	687b      	ldr	r3, [r7, #4]
 810cdb6:	685b      	ldr	r3, [r3, #4]
 810cdb8:	60fb      	str	r3, [r7, #12]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 810cdba:	687b      	ldr	r3, [r7, #4]
 810cdbc:	689b      	ldr	r3, [r3, #8]
 810cdbe:	613b      	str	r3, [r7, #16]
      Init.BusWide             = WideMode;
 810cdc0:	683b      	ldr	r3, [r7, #0]
 810cdc2:	617b      	str	r3, [r7, #20]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 810cdc4:	687b      	ldr	r3, [r7, #4]
 810cdc6:	691b      	ldr	r3, [r3, #16]
 810cdc8:	61bb      	str	r3, [r7, #24]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 810cdca:	687b      	ldr	r3, [r7, #4]
 810cdcc:	695a      	ldr	r2, [r3, #20]
 810cdce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810cdd0:	4952      	ldr	r1, [pc, #328]	; (810cf1c <HAL_SD_ConfigWideBusOperation+0x21c>)
 810cdd2:	fba1 1303 	umull	r1, r3, r1, r3
 810cdd6:	0e1b      	lsrs	r3, r3, #24
 810cdd8:	429a      	cmp	r2, r3
 810cdda:	d303      	bcc.n	810cde4 <HAL_SD_ConfigWideBusOperation+0xe4>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 810cddc:	687b      	ldr	r3, [r7, #4]
 810cdde:	695b      	ldr	r3, [r3, #20]
 810cde0:	61fb      	str	r3, [r7, #28]
 810cde2:	e05a      	b.n	810ce9a <HAL_SD_ConfigWideBusOperation+0x19a>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 810cde4:	687b      	ldr	r3, [r7, #4]
 810cde6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 810cde8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 810cdec:	d103      	bne.n	810cdf6 <HAL_SD_ConfigWideBusOperation+0xf6>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 810cdee:	687b      	ldr	r3, [r7, #4]
 810cdf0:	695b      	ldr	r3, [r3, #20]
 810cdf2:	61fb      	str	r3, [r7, #28]
 810cdf4:	e051      	b.n	810ce9a <HAL_SD_ConfigWideBusOperation+0x19a>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 810cdf6:	687b      	ldr	r3, [r7, #4]
 810cdf8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 810cdfa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810cdfe:	d126      	bne.n	810ce4e <HAL_SD_ConfigWideBusOperation+0x14e>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 810ce00:	687b      	ldr	r3, [r7, #4]
 810ce02:	695b      	ldr	r3, [r3, #20]
 810ce04:	2b00      	cmp	r3, #0
 810ce06:	d10e      	bne.n	810ce26 <HAL_SD_ConfigWideBusOperation+0x126>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 810ce08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810ce0a:	4a45      	ldr	r2, [pc, #276]	; (810cf20 <HAL_SD_ConfigWideBusOperation+0x220>)
 810ce0c:	4293      	cmp	r3, r2
 810ce0e:	d906      	bls.n	810ce1e <HAL_SD_ConfigWideBusOperation+0x11e>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 810ce10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810ce12:	4a42      	ldr	r2, [pc, #264]	; (810cf1c <HAL_SD_ConfigWideBusOperation+0x21c>)
 810ce14:	fba2 2303 	umull	r2, r3, r2, r3
 810ce18:	0e5b      	lsrs	r3, r3, #25
 810ce1a:	61fb      	str	r3, [r7, #28]
 810ce1c:	e03d      	b.n	810ce9a <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 810ce1e:	687b      	ldr	r3, [r7, #4]
 810ce20:	695b      	ldr	r3, [r3, #20]
 810ce22:	61fb      	str	r3, [r7, #28]
 810ce24:	e039      	b.n	810ce9a <HAL_SD_ConfigWideBusOperation+0x19a>
          }
        }
        else
        {
          if ((sdmmc_clk/(2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 810ce26:	687b      	ldr	r3, [r7, #4]
 810ce28:	695b      	ldr	r3, [r3, #20]
 810ce2a:	005b      	lsls	r3, r3, #1
 810ce2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 810ce2e:	fbb2 f3f3 	udiv	r3, r2, r3
 810ce32:	4a3b      	ldr	r2, [pc, #236]	; (810cf20 <HAL_SD_ConfigWideBusOperation+0x220>)
 810ce34:	4293      	cmp	r3, r2
 810ce36:	d906      	bls.n	810ce46 <HAL_SD_ConfigWideBusOperation+0x146>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 810ce38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810ce3a:	4a38      	ldr	r2, [pc, #224]	; (810cf1c <HAL_SD_ConfigWideBusOperation+0x21c>)
 810ce3c:	fba2 2303 	umull	r2, r3, r2, r3
 810ce40:	0e5b      	lsrs	r3, r3, #25
 810ce42:	61fb      	str	r3, [r7, #28]
 810ce44:	e029      	b.n	810ce9a <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 810ce46:	687b      	ldr	r3, [r7, #4]
 810ce48:	695b      	ldr	r3, [r3, #20]
 810ce4a:	61fb      	str	r3, [r7, #28]
 810ce4c:	e025      	b.n	810ce9a <HAL_SD_ConfigWideBusOperation+0x19a>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 810ce4e:	687b      	ldr	r3, [r7, #4]
 810ce50:	695b      	ldr	r3, [r3, #20]
 810ce52:	2b00      	cmp	r3, #0
 810ce54:	d10e      	bne.n	810ce74 <HAL_SD_ConfigWideBusOperation+0x174>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 810ce56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810ce58:	4a32      	ldr	r2, [pc, #200]	; (810cf24 <HAL_SD_ConfigWideBusOperation+0x224>)
 810ce5a:	4293      	cmp	r3, r2
 810ce5c:	d906      	bls.n	810ce6c <HAL_SD_ConfigWideBusOperation+0x16c>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 810ce5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810ce60:	4a2e      	ldr	r2, [pc, #184]	; (810cf1c <HAL_SD_ConfigWideBusOperation+0x21c>)
 810ce62:	fba2 2303 	umull	r2, r3, r2, r3
 810ce66:	0e1b      	lsrs	r3, r3, #24
 810ce68:	61fb      	str	r3, [r7, #28]
 810ce6a:	e016      	b.n	810ce9a <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 810ce6c:	687b      	ldr	r3, [r7, #4]
 810ce6e:	695b      	ldr	r3, [r3, #20]
 810ce70:	61fb      	str	r3, [r7, #28]
 810ce72:	e012      	b.n	810ce9a <HAL_SD_ConfigWideBusOperation+0x19a>
          }
        }
        else
        {
          if ((sdmmc_clk/(2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 810ce74:	687b      	ldr	r3, [r7, #4]
 810ce76:	695b      	ldr	r3, [r3, #20]
 810ce78:	005b      	lsls	r3, r3, #1
 810ce7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 810ce7c:	fbb2 f3f3 	udiv	r3, r2, r3
 810ce80:	4a28      	ldr	r2, [pc, #160]	; (810cf24 <HAL_SD_ConfigWideBusOperation+0x224>)
 810ce82:	4293      	cmp	r3, r2
 810ce84:	d906      	bls.n	810ce94 <HAL_SD_ConfigWideBusOperation+0x194>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 810ce86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810ce88:	4a24      	ldr	r2, [pc, #144]	; (810cf1c <HAL_SD_ConfigWideBusOperation+0x21c>)
 810ce8a:	fba2 2303 	umull	r2, r3, r2, r3
 810ce8e:	0e1b      	lsrs	r3, r3, #24
 810ce90:	61fb      	str	r3, [r7, #28]
 810ce92:	e002      	b.n	810ce9a <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 810ce94:	687b      	ldr	r3, [r7, #4]
 810ce96:	695b      	ldr	r3, [r3, #20]
 810ce98:	61fb      	str	r3, [r7, #28]
          }
        }
      }

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
 810ce9a:	687b      	ldr	r3, [r7, #4]
 810ce9c:	699b      	ldr	r3, [r3, #24]
 810ce9e:	623b      	str	r3, [r7, #32]
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 810cea0:	687b      	ldr	r3, [r7, #4]
 810cea2:	681d      	ldr	r5, [r3, #0]
 810cea4:	466c      	mov	r4, sp
 810cea6:	f107 0318 	add.w	r3, r7, #24
 810ceaa:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 810ceae:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 810ceb2:	f107 030c 	add.w	r3, r7, #12
 810ceb6:	cb0e      	ldmia	r3, {r1, r2, r3}
 810ceb8:	4628      	mov	r0, r5
 810ceba:	f004 f849 	bl	8110f50 <SDMMC_Init>
 810cebe:	e008      	b.n	810ced2 <HAL_SD_ConfigWideBusOperation+0x1d2>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 810cec0:	687b      	ldr	r3, [r7, #4]
 810cec2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810cec4:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 810cec8:	687b      	ldr	r3, [r7, #4]
 810ceca:	639a      	str	r2, [r3, #56]	; 0x38
      status = HAL_ERROR;
 810cecc:	2301      	movs	r3, #1
 810cece:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 810ced2:	687b      	ldr	r3, [r7, #4]
 810ced4:	681b      	ldr	r3, [r3, #0]
 810ced6:	f44f 7100 	mov.w	r1, #512	; 0x200
 810ceda:	4618      	mov	r0, r3
 810cedc:	f004 f916 	bl	811110c <SDMMC_CmdBlockLength>
 810cee0:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 810cee2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810cee4:	2b00      	cmp	r3, #0
 810cee6:	d00c      	beq.n	810cf02 <HAL_SD_ConfigWideBusOperation+0x202>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 810cee8:	687b      	ldr	r3, [r7, #4]
 810ceea:	681b      	ldr	r3, [r3, #0]
 810ceec:	4a0a      	ldr	r2, [pc, #40]	; (810cf18 <HAL_SD_ConfigWideBusOperation+0x218>)
 810ceee:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 810cef0:	687b      	ldr	r3, [r7, #4]
 810cef2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 810cef4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810cef6:	431a      	orrs	r2, r3
 810cef8:	687b      	ldr	r3, [r7, #4]
 810cefa:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 810cefc:	2301      	movs	r3, #1
 810cefe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 810cf02:	687b      	ldr	r3, [r7, #4]
 810cf04:	2201      	movs	r2, #1
 810cf06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 810cf0a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 810cf0e:	4618      	mov	r0, r3
 810cf10:	3730      	adds	r7, #48	; 0x30
 810cf12:	46bd      	mov	sp, r7
 810cf14:	bdb0      	pop	{r4, r5, r7, pc}
 810cf16:	bf00      	nop
 810cf18:	1fe00fff 	.word	0x1fe00fff
 810cf1c:	55e63b89 	.word	0x55e63b89
 810cf20:	02faf080 	.word	0x02faf080
 810cf24:	017d7840 	.word	0x017d7840

0810cf28 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 810cf28:	b580      	push	{r7, lr}
 810cf2a:	b086      	sub	sp, #24
 810cf2c:	af00      	add	r7, sp, #0
 810cf2e:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 810cf30:	2300      	movs	r3, #0
 810cf32:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 810cf34:	f107 030c 	add.w	r3, r7, #12
 810cf38:	4619      	mov	r1, r3
 810cf3a:	6878      	ldr	r0, [r7, #4]
 810cf3c:	f000 faa8 	bl	810d490 <SD_SendStatus>
 810cf40:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 810cf42:	697b      	ldr	r3, [r7, #20]
 810cf44:	2b00      	cmp	r3, #0
 810cf46:	d005      	beq.n	810cf54 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 810cf48:	687b      	ldr	r3, [r7, #4]
 810cf4a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 810cf4c:	697b      	ldr	r3, [r7, #20]
 810cf4e:	431a      	orrs	r2, r3
 810cf50:	687b      	ldr	r3, [r7, #4]
 810cf52:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 810cf54:	68fb      	ldr	r3, [r7, #12]
 810cf56:	0a5b      	lsrs	r3, r3, #9
 810cf58:	f003 030f 	and.w	r3, r3, #15
 810cf5c:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 810cf5e:	693b      	ldr	r3, [r7, #16]
}
 810cf60:	4618      	mov	r0, r3
 810cf62:	3718      	adds	r7, #24
 810cf64:	46bd      	mov	sp, r7
 810cf66:	bd80      	pop	{r7, pc}

0810cf68 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 810cf68:	b580      	push	{r7, lr}
 810cf6a:	b090      	sub	sp, #64	; 0x40
 810cf6c:	af00      	add	r7, sp, #0
 810cf6e:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 810cf70:	2301      	movs	r3, #1
 810cf72:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 810cf74:	687b      	ldr	r3, [r7, #4]
 810cf76:	681b      	ldr	r3, [r3, #0]
 810cf78:	4618      	mov	r0, r3
 810cf7a:	f004 f842 	bl	8111002 <SDMMC_GetPowerState>
 810cf7e:	4603      	mov	r3, r0
 810cf80:	2b00      	cmp	r3, #0
 810cf82:	d102      	bne.n	810cf8a <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 810cf84:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 810cf88:	e0a5      	b.n	810d0d6 <SD_InitCard+0x16e>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 810cf8a:	687b      	ldr	r3, [r7, #4]
 810cf8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810cf8e:	2b03      	cmp	r3, #3
 810cf90:	d02e      	beq.n	810cff0 <SD_InitCard+0x88>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 810cf92:	687b      	ldr	r3, [r7, #4]
 810cf94:	681b      	ldr	r3, [r3, #0]
 810cf96:	4618      	mov	r0, r3
 810cf98:	f004 fa8d 	bl	81114b6 <SDMMC_CmdSendCID>
 810cf9c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if (errorstate != HAL_SD_ERROR_NONE)
 810cf9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 810cfa0:	2b00      	cmp	r3, #0
 810cfa2:	d001      	beq.n	810cfa8 <SD_InitCard+0x40>
    {
      return errorstate;
 810cfa4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 810cfa6:	e096      	b.n	810d0d6 <SD_InitCard+0x16e>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 810cfa8:	687b      	ldr	r3, [r7, #4]
 810cfaa:	681b      	ldr	r3, [r3, #0]
 810cfac:	2100      	movs	r1, #0
 810cfae:	4618      	mov	r0, r3
 810cfb0:	f004 f86d 	bl	811108e <SDMMC_GetResponse>
 810cfb4:	4602      	mov	r2, r0
 810cfb6:	687b      	ldr	r3, [r7, #4]
 810cfb8:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 810cfba:	687b      	ldr	r3, [r7, #4]
 810cfbc:	681b      	ldr	r3, [r3, #0]
 810cfbe:	2104      	movs	r1, #4
 810cfc0:	4618      	mov	r0, r3
 810cfc2:	f004 f864 	bl	811108e <SDMMC_GetResponse>
 810cfc6:	4602      	mov	r2, r0
 810cfc8:	687b      	ldr	r3, [r7, #4]
 810cfca:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 810cfcc:	687b      	ldr	r3, [r7, #4]
 810cfce:	681b      	ldr	r3, [r3, #0]
 810cfd0:	2108      	movs	r1, #8
 810cfd2:	4618      	mov	r0, r3
 810cfd4:	f004 f85b 	bl	811108e <SDMMC_GetResponse>
 810cfd8:	4602      	mov	r2, r0
 810cfda:	687b      	ldr	r3, [r7, #4]
 810cfdc:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 810cfde:	687b      	ldr	r3, [r7, #4]
 810cfe0:	681b      	ldr	r3, [r3, #0]
 810cfe2:	210c      	movs	r1, #12
 810cfe4:	4618      	mov	r0, r3
 810cfe6:	f004 f852 	bl	811108e <SDMMC_GetResponse>
 810cfea:	4602      	mov	r2, r0
 810cfec:	687b      	ldr	r3, [r7, #4]
 810cfee:	67da      	str	r2, [r3, #124]	; 0x7c
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 810cff0:	687b      	ldr	r3, [r7, #4]
 810cff2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810cff4:	2b03      	cmp	r3, #3
 810cff6:	d00d      	beq.n	810d014 <SD_InitCard+0xac>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 810cff8:	687b      	ldr	r3, [r7, #4]
 810cffa:	681b      	ldr	r3, [r3, #0]
 810cffc:	f107 020e 	add.w	r2, r7, #14
 810d000:	4611      	mov	r1, r2
 810d002:	4618      	mov	r0, r3
 810d004:	f004 fa96 	bl	8111534 <SDMMC_CmdSetRelAdd>
 810d008:	63f8      	str	r0, [r7, #60]	; 0x3c
    if (errorstate != HAL_SD_ERROR_NONE)
 810d00a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 810d00c:	2b00      	cmp	r3, #0
 810d00e:	d001      	beq.n	810d014 <SD_InitCard+0xac>
    {
      return errorstate;
 810d010:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 810d012:	e060      	b.n	810d0d6 <SD_InitCard+0x16e>
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 810d014:	687b      	ldr	r3, [r7, #4]
 810d016:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810d018:	2b03      	cmp	r3, #3
 810d01a:	d036      	beq.n	810d08a <SD_InitCard+0x122>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 810d01c:	89fb      	ldrh	r3, [r7, #14]
 810d01e:	461a      	mov	r2, r3
 810d020:	687b      	ldr	r3, [r7, #4]
 810d022:	649a      	str	r2, [r3, #72]	; 0x48

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 810d024:	687b      	ldr	r3, [r7, #4]
 810d026:	681a      	ldr	r2, [r3, #0]
 810d028:	687b      	ldr	r3, [r7, #4]
 810d02a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 810d02c:	041b      	lsls	r3, r3, #16
 810d02e:	4619      	mov	r1, r3
 810d030:	4610      	mov	r0, r2
 810d032:	f004 fa5f 	bl	81114f4 <SDMMC_CmdSendCSD>
 810d036:	63f8      	str	r0, [r7, #60]	; 0x3c
    if (errorstate != HAL_SD_ERROR_NONE)
 810d038:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 810d03a:	2b00      	cmp	r3, #0
 810d03c:	d001      	beq.n	810d042 <SD_InitCard+0xda>
    {
      return errorstate;
 810d03e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 810d040:	e049      	b.n	810d0d6 <SD_InitCard+0x16e>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 810d042:	687b      	ldr	r3, [r7, #4]
 810d044:	681b      	ldr	r3, [r3, #0]
 810d046:	2100      	movs	r1, #0
 810d048:	4618      	mov	r0, r3
 810d04a:	f004 f820 	bl	811108e <SDMMC_GetResponse>
 810d04e:	4602      	mov	r2, r0
 810d050:	687b      	ldr	r3, [r7, #4]
 810d052:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 810d054:	687b      	ldr	r3, [r7, #4]
 810d056:	681b      	ldr	r3, [r3, #0]
 810d058:	2104      	movs	r1, #4
 810d05a:	4618      	mov	r0, r3
 810d05c:	f004 f817 	bl	811108e <SDMMC_GetResponse>
 810d060:	4602      	mov	r2, r0
 810d062:	687b      	ldr	r3, [r7, #4]
 810d064:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 810d066:	687b      	ldr	r3, [r7, #4]
 810d068:	681b      	ldr	r3, [r3, #0]
 810d06a:	2108      	movs	r1, #8
 810d06c:	4618      	mov	r0, r3
 810d06e:	f004 f80e 	bl	811108e <SDMMC_GetResponse>
 810d072:	4602      	mov	r2, r0
 810d074:	687b      	ldr	r3, [r7, #4]
 810d076:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 810d078:	687b      	ldr	r3, [r7, #4]
 810d07a:	681b      	ldr	r3, [r3, #0]
 810d07c:	210c      	movs	r1, #12
 810d07e:	4618      	mov	r0, r3
 810d080:	f004 f805 	bl	811108e <SDMMC_GetResponse>
 810d084:	4602      	mov	r2, r0
 810d086:	687b      	ldr	r3, [r7, #4]
 810d088:	66da      	str	r2, [r3, #108]	; 0x6c
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 810d08a:	687b      	ldr	r3, [r7, #4]
 810d08c:	681b      	ldr	r3, [r3, #0]
 810d08e:	2104      	movs	r1, #4
 810d090:	4618      	mov	r0, r3
 810d092:	f003 fffc 	bl	811108e <SDMMC_GetResponse>
 810d096:	4603      	mov	r3, r0
 810d098:	0d1a      	lsrs	r2, r3, #20
 810d09a:	687b      	ldr	r3, [r7, #4]
 810d09c:	645a      	str	r2, [r3, #68]	; 0x44

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 810d09e:	f107 0310 	add.w	r3, r7, #16
 810d0a2:	4619      	mov	r1, r3
 810d0a4:	6878      	ldr	r0, [r7, #4]
 810d0a6:	f7ff fba5 	bl	810c7f4 <HAL_SD_GetCardCSD>
 810d0aa:	4603      	mov	r3, r0
 810d0ac:	2b00      	cmp	r3, #0
 810d0ae:	d002      	beq.n	810d0b6 <SD_InitCard+0x14e>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 810d0b0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 810d0b4:	e00f      	b.n	810d0d6 <SD_InitCard+0x16e>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 810d0b6:	687b      	ldr	r3, [r7, #4]
 810d0b8:	681a      	ldr	r2, [r3, #0]
 810d0ba:	687b      	ldr	r3, [r7, #4]
 810d0bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 810d0be:	041b      	lsls	r3, r3, #16
 810d0c0:	4619      	mov	r1, r3
 810d0c2:	4610      	mov	r0, r2
 810d0c4:	f004 f90e 	bl	81112e4 <SDMMC_CmdSelDesel>
 810d0c8:	63f8      	str	r0, [r7, #60]	; 0x3c
  if (errorstate != HAL_SD_ERROR_NONE)
 810d0ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 810d0cc:	2b00      	cmp	r3, #0
 810d0ce:	d001      	beq.n	810d0d4 <SD_InitCard+0x16c>
  {
    return errorstate;
 810d0d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 810d0d2:	e000      	b.n	810d0d6 <SD_InitCard+0x16e>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 810d0d4:	2300      	movs	r3, #0
}
 810d0d6:	4618      	mov	r0, r3
 810d0d8:	3740      	adds	r7, #64	; 0x40
 810d0da:	46bd      	mov	sp, r7
 810d0dc:	bd80      	pop	{r7, pc}
	...

0810d0e0 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 810d0e0:	b580      	push	{r7, lr}
 810d0e2:	b088      	sub	sp, #32
 810d0e4:	af00      	add	r7, sp, #0
 810d0e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 810d0e8:	2300      	movs	r3, #0
 810d0ea:	60fb      	str	r3, [r7, #12]
  uint32_t response = 0U;
 810d0ec:	2300      	movs	r3, #0
 810d0ee:	61fb      	str	r3, [r7, #28]
  uint32_t validvoltage = 0U;
 810d0f0:	2300      	movs	r3, #0
 810d0f2:	61bb      	str	r3, [r7, #24]
  uint32_t errorstate;
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
 810d0f4:	f7f5 fc82 	bl	81029fc <HAL_GetTick>
 810d0f8:	6178      	str	r0, [r7, #20]
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 810d0fa:	687b      	ldr	r3, [r7, #4]
 810d0fc:	681b      	ldr	r3, [r3, #0]
 810d0fe:	4618      	mov	r0, r3
 810d100:	f004 f913 	bl	811132a <SDMMC_CmdGoIdleState>
 810d104:	6138      	str	r0, [r7, #16]
  if (errorstate != HAL_SD_ERROR_NONE)
 810d106:	693b      	ldr	r3, [r7, #16]
 810d108:	2b00      	cmp	r3, #0
 810d10a:	d001      	beq.n	810d110 <SD_PowerON+0x30>
  {
    return errorstate;
 810d10c:	693b      	ldr	r3, [r7, #16]
 810d10e:	e0e9      	b.n	810d2e4 <SD_PowerON+0x204>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 810d110:	687b      	ldr	r3, [r7, #4]
 810d112:	681b      	ldr	r3, [r3, #0]
 810d114:	4618      	mov	r0, r3
 810d116:	f004 f926 	bl	8111366 <SDMMC_CmdOperCond>
 810d11a:	6138      	str	r0, [r7, #16]
  if (errorstate != HAL_SD_ERROR_NONE)
 810d11c:	693b      	ldr	r3, [r7, #16]
 810d11e:	2b00      	cmp	r3, #0
 810d120:	d00d      	beq.n	810d13e <SD_PowerON+0x5e>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 810d122:	687b      	ldr	r3, [r7, #4]
 810d124:	2200      	movs	r2, #0
 810d126:	641a      	str	r2, [r3, #64]	; 0x40
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 810d128:	687b      	ldr	r3, [r7, #4]
 810d12a:	681b      	ldr	r3, [r3, #0]
 810d12c:	4618      	mov	r0, r3
 810d12e:	f004 f8fc 	bl	811132a <SDMMC_CmdGoIdleState>
 810d132:	6138      	str	r0, [r7, #16]
    if (errorstate != HAL_SD_ERROR_NONE)
 810d134:	693b      	ldr	r3, [r7, #16]
 810d136:	2b00      	cmp	r3, #0
 810d138:	d004      	beq.n	810d144 <SD_PowerON+0x64>
    {
      return errorstate;
 810d13a:	693b      	ldr	r3, [r7, #16]
 810d13c:	e0d2      	b.n	810d2e4 <SD_PowerON+0x204>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 810d13e:	687b      	ldr	r3, [r7, #4]
 810d140:	2201      	movs	r2, #1
 810d142:	641a      	str	r2, [r3, #64]	; 0x40
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 810d144:	687b      	ldr	r3, [r7, #4]
 810d146:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810d148:	2b01      	cmp	r3, #1
 810d14a:	d137      	bne.n	810d1bc <SD_PowerON+0xdc>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 810d14c:	687b      	ldr	r3, [r7, #4]
 810d14e:	681b      	ldr	r3, [r3, #0]
 810d150:	2100      	movs	r1, #0
 810d152:	4618      	mov	r0, r3
 810d154:	f004 f927 	bl	81113a6 <SDMMC_CmdAppCommand>
 810d158:	6138      	str	r0, [r7, #16]
    if (errorstate != HAL_SD_ERROR_NONE)
 810d15a:	693b      	ldr	r3, [r7, #16]
 810d15c:	2b00      	cmp	r3, #0
 810d15e:	d02d      	beq.n	810d1bc <SD_PowerON+0xdc>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 810d160:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 810d164:	e0be      	b.n	810d2e4 <SD_PowerON+0x204>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 810d166:	687b      	ldr	r3, [r7, #4]
 810d168:	681b      	ldr	r3, [r3, #0]
 810d16a:	2100      	movs	r1, #0
 810d16c:	4618      	mov	r0, r3
 810d16e:	f004 f91a 	bl	81113a6 <SDMMC_CmdAppCommand>
 810d172:	6138      	str	r0, [r7, #16]
    if (errorstate != HAL_SD_ERROR_NONE)
 810d174:	693b      	ldr	r3, [r7, #16]
 810d176:	2b00      	cmp	r3, #0
 810d178:	d001      	beq.n	810d17e <SD_PowerON+0x9e>
    {
      return errorstate;
 810d17a:	693b      	ldr	r3, [r7, #16]
 810d17c:	e0b2      	b.n	810d2e4 <SD_PowerON+0x204>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 810d17e:	687b      	ldr	r3, [r7, #4]
 810d180:	681b      	ldr	r3, [r3, #0]
 810d182:	495a      	ldr	r1, [pc, #360]	; (810d2ec <SD_PowerON+0x20c>)
 810d184:	4618      	mov	r0, r3
 810d186:	f004 f931 	bl	81113ec <SDMMC_CmdAppOperCommand>
 810d18a:	6138      	str	r0, [r7, #16]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 810d18c:	693b      	ldr	r3, [r7, #16]
 810d18e:	2b00      	cmp	r3, #0
 810d190:	d002      	beq.n	810d198 <SD_PowerON+0xb8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 810d192:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 810d196:	e0a5      	b.n	810d2e4 <SD_PowerON+0x204>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 810d198:	687b      	ldr	r3, [r7, #4]
 810d19a:	681b      	ldr	r3, [r3, #0]
 810d19c:	2100      	movs	r1, #0
 810d19e:	4618      	mov	r0, r3
 810d1a0:	f003 ff75 	bl	811108e <SDMMC_GetResponse>
 810d1a4:	61f8      	str	r0, [r7, #28]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 810d1a6:	69fb      	ldr	r3, [r7, #28]
 810d1a8:	0fdb      	lsrs	r3, r3, #31
 810d1aa:	2b01      	cmp	r3, #1
 810d1ac:	d101      	bne.n	810d1b2 <SD_PowerON+0xd2>
 810d1ae:	2301      	movs	r3, #1
 810d1b0:	e000      	b.n	810d1b4 <SD_PowerON+0xd4>
 810d1b2:	2300      	movs	r3, #0
 810d1b4:	61bb      	str	r3, [r7, #24]

    count++;
 810d1b6:	68fb      	ldr	r3, [r7, #12]
 810d1b8:	3301      	adds	r3, #1
 810d1ba:	60fb      	str	r3, [r7, #12]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 810d1bc:	68fb      	ldr	r3, [r7, #12]
 810d1be:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 810d1c2:	4293      	cmp	r3, r2
 810d1c4:	d802      	bhi.n	810d1cc <SD_PowerON+0xec>
 810d1c6:	69bb      	ldr	r3, [r7, #24]
 810d1c8:	2b00      	cmp	r3, #0
 810d1ca:	d0cc      	beq.n	810d166 <SD_PowerON+0x86>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 810d1cc:	68fb      	ldr	r3, [r7, #12]
 810d1ce:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 810d1d2:	4293      	cmp	r3, r2
 810d1d4:	d902      	bls.n	810d1dc <SD_PowerON+0xfc>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 810d1d6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 810d1da:	e083      	b.n	810d2e4 <SD_PowerON+0x204>
  }

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 810d1dc:	69fb      	ldr	r3, [r7, #28]
 810d1de:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 810d1e2:	2b00      	cmp	r3, #0
 810d1e4:	d07d      	beq.n	810d2e2 <SD_PowerON+0x202>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 810d1e6:	687b      	ldr	r3, [r7, #4]
 810d1e8:	2201      	movs	r2, #1
 810d1ea:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_SD_TRANSCEIVER != 0U)
    if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 810d1ec:	687b      	ldr	r3, [r7, #4]
 810d1ee:	699b      	ldr	r3, [r3, #24]
 810d1f0:	2b02      	cmp	r3, #2
 810d1f2:	d176      	bne.n	810d2e2 <SD_PowerON+0x202>
    {
      if ((response & SD_SWITCH_1_8V_CAPACITY) == SD_SWITCH_1_8V_CAPACITY)
 810d1f4:	69fb      	ldr	r3, [r7, #28]
 810d1f6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 810d1fa:	2b00      	cmp	r3, #0
 810d1fc:	d071      	beq.n	810d2e2 <SD_PowerON+0x202>
      {
        hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 810d1fe:	687b      	ldr	r3, [r7, #4]
 810d200:	f44f 7200 	mov.w	r2, #512	; 0x200
 810d204:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Start switching procedue */
        hsd->Instance->POWER |= SDMMC_POWER_VSWITCHEN;
 810d206:	687b      	ldr	r3, [r7, #4]
 810d208:	681b      	ldr	r3, [r3, #0]
 810d20a:	681a      	ldr	r2, [r3, #0]
 810d20c:	687b      	ldr	r3, [r7, #4]
 810d20e:	681b      	ldr	r3, [r3, #0]
 810d210:	f042 0208 	orr.w	r2, r2, #8
 810d214:	601a      	str	r2, [r3, #0]

        /* Send CMD11 to switch 1.8V mode */
        errorstate = SDMMC_CmdVoltageSwitch(hsd->Instance);
 810d216:	687b      	ldr	r3, [r7, #4]
 810d218:	681b      	ldr	r3, [r3, #0]
 810d21a:	4618      	mov	r0, r3
 810d21c:	f004 f9f1 	bl	8111602 <SDMMC_CmdVoltageSwitch>
 810d220:	6138      	str	r0, [r7, #16]
        if (errorstate != HAL_SD_ERROR_NONE)
 810d222:	693b      	ldr	r3, [r7, #16]
 810d224:	2b00      	cmp	r3, #0
 810d226:	d00c      	beq.n	810d242 <SD_PowerON+0x162>
        {
          return errorstate;
 810d228:	693b      	ldr	r3, [r7, #16]
 810d22a:	e05b      	b.n	810d2e4 <SD_PowerON+0x204>
        }

        /* Check to CKSTOP */
        while ((hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
        {
          if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 810d22c:	f7f5 fbe6 	bl	81029fc <HAL_GetTick>
 810d230:	4602      	mov	r2, r0
 810d232:	697b      	ldr	r3, [r7, #20]
 810d234:	1ad3      	subs	r3, r2, r3
 810d236:	f1b3 3fff 	cmp.w	r3, #4294967295
 810d23a:	d102      	bne.n	810d242 <SD_PowerON+0x162>
          {
            return HAL_SD_ERROR_TIMEOUT;
 810d23c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 810d240:	e050      	b.n	810d2e4 <SD_PowerON+0x204>
        while ((hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
 810d242:	687b      	ldr	r3, [r7, #4]
 810d244:	681b      	ldr	r3, [r3, #0]
 810d246:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 810d248:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 810d24c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 810d250:	d1ec      	bne.n	810d22c <SD_PowerON+0x14c>
          }
        }

        /* Clear CKSTOP Flag */
        hsd->Instance->ICR = SDMMC_FLAG_CKSTOP;
 810d252:	687b      	ldr	r3, [r7, #4]
 810d254:	681b      	ldr	r3, [r3, #0]
 810d256:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 810d25a:	639a      	str	r2, [r3, #56]	; 0x38

        /* Check to BusyD0 */
        if ((hsd->Instance->STA & SDMMC_FLAG_BUSYD0) != SDMMC_FLAG_BUSYD0)
 810d25c:	687b      	ldr	r3, [r7, #4]
 810d25e:	681b      	ldr	r3, [r3, #0]
 810d260:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 810d262:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 810d266:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 810d26a:	d002      	beq.n	810d272 <SD_PowerON+0x192>
        {
          /* Error when activate Voltage Switch in SDMMC Peripheral */
          return SDMMC_ERROR_UNSUPPORTED_FEATURE;
 810d26c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 810d270:	e038      	b.n	810d2e4 <SD_PowerON+0x204>
        {
          /* Enable Transceiver Switch PIN */
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->DriveTransceiver_1_8V_Callback(SET);
#else
          HAL_SD_DriveTransceiver_1_8V_Callback(SET);
 810d272:	2001      	movs	r0, #1
 810d274:	f7ff fab2 	bl	810c7dc <HAL_SD_DriveTransceiver_1_8V_Callback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */

          /* Switch ready */
          hsd->Instance->POWER |= SDMMC_POWER_VSWITCH;
 810d278:	687b      	ldr	r3, [r7, #4]
 810d27a:	681b      	ldr	r3, [r3, #0]
 810d27c:	681a      	ldr	r2, [r3, #0]
 810d27e:	687b      	ldr	r3, [r7, #4]
 810d280:	681b      	ldr	r3, [r3, #0]
 810d282:	f042 0204 	orr.w	r2, r2, #4
 810d286:	601a      	str	r2, [r3, #0]

          /* Check VSWEND Flag */
          while ((hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 810d288:	e00a      	b.n	810d2a0 <SD_PowerON+0x1c0>
          {
            if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 810d28a:	f7f5 fbb7 	bl	81029fc <HAL_GetTick>
 810d28e:	4602      	mov	r2, r0
 810d290:	697b      	ldr	r3, [r7, #20]
 810d292:	1ad3      	subs	r3, r2, r3
 810d294:	f1b3 3fff 	cmp.w	r3, #4294967295
 810d298:	d102      	bne.n	810d2a0 <SD_PowerON+0x1c0>
            {
              return HAL_SD_ERROR_TIMEOUT;
 810d29a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 810d29e:	e021      	b.n	810d2e4 <SD_PowerON+0x204>
          while ((hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 810d2a0:	687b      	ldr	r3, [r7, #4]
 810d2a2:	681b      	ldr	r3, [r3, #0]
 810d2a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 810d2a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 810d2aa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 810d2ae:	d1ec      	bne.n	810d28a <SD_PowerON+0x1aa>
            }
          }

          /* Clear VSWEND Flag */
          hsd->Instance->ICR = SDMMC_FLAG_VSWEND;
 810d2b0:	687b      	ldr	r3, [r7, #4]
 810d2b2:	681b      	ldr	r3, [r3, #0]
 810d2b4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 810d2b8:	639a      	str	r2, [r3, #56]	; 0x38

          /* Check BusyD0 status */
          if ((hsd->Instance->STA & SDMMC_FLAG_BUSYD0) == SDMMC_FLAG_BUSYD0)
 810d2ba:	687b      	ldr	r3, [r7, #4]
 810d2bc:	681b      	ldr	r3, [r3, #0]
 810d2be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 810d2c0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 810d2c4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 810d2c8:	d102      	bne.n	810d2d0 <SD_PowerON+0x1f0>
          {
            /* Error when enabling 1.8V mode */
            return HAL_SD_ERROR_INVALID_VOLTRANGE;
 810d2ca:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 810d2ce:	e009      	b.n	810d2e4 <SD_PowerON+0x204>
          }
          /* Switch to 1.8V OK */

          /* Disable VSWITCH FLAG from SDMMC Peripheral */
          hsd->Instance->POWER = 0x13U;
 810d2d0:	687b      	ldr	r3, [r7, #4]
 810d2d2:	681b      	ldr	r3, [r3, #0]
 810d2d4:	2213      	movs	r2, #19
 810d2d6:	601a      	str	r2, [r3, #0]

          /* Clean Status flags */
          hsd->Instance->ICR = 0xFFFFFFFFU;
 810d2d8:	687b      	ldr	r3, [r7, #4]
 810d2da:	681b      	ldr	r3, [r3, #0]
 810d2dc:	f04f 32ff 	mov.w	r2, #4294967295
 810d2e0:	639a      	str	r2, [r3, #56]	; 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 810d2e2:	2300      	movs	r3, #0
}
 810d2e4:	4618      	mov	r0, r3
 810d2e6:	3720      	adds	r7, #32
 810d2e8:	46bd      	mov	sp, r7
 810d2ea:	bd80      	pop	{r7, pc}
 810d2ec:	c1100000 	.word	0xc1100000

0810d2f0 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 810d2f0:	b580      	push	{r7, lr}
 810d2f2:	b08c      	sub	sp, #48	; 0x30
 810d2f4:	af00      	add	r7, sp, #0
 810d2f6:	6078      	str	r0, [r7, #4]
 810d2f8:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 810d2fa:	f7f5 fb7f 	bl	81029fc <HAL_GetTick>
 810d2fe:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 810d300:	683b      	ldr	r3, [r7, #0]
 810d302:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 810d304:	687b      	ldr	r3, [r7, #4]
 810d306:	681b      	ldr	r3, [r3, #0]
 810d308:	2100      	movs	r1, #0
 810d30a:	4618      	mov	r0, r3
 810d30c:	f003 febf 	bl	811108e <SDMMC_GetResponse>
 810d310:	4603      	mov	r3, r0
 810d312:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 810d316:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 810d31a:	d102      	bne.n	810d322 <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 810d31c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 810d320:	e0b0      	b.n	810d484 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 810d322:	687b      	ldr	r3, [r7, #4]
 810d324:	681b      	ldr	r3, [r3, #0]
 810d326:	2140      	movs	r1, #64	; 0x40
 810d328:	4618      	mov	r0, r3
 810d32a:	f003 feef 	bl	811110c <SDMMC_CmdBlockLength>
 810d32e:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 810d330:	6a3b      	ldr	r3, [r7, #32]
 810d332:	2b00      	cmp	r3, #0
 810d334:	d005      	beq.n	810d342 <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 810d336:	687b      	ldr	r3, [r7, #4]
 810d338:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 810d33a:	687b      	ldr	r3, [r7, #4]
 810d33c:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 810d33e:	6a3b      	ldr	r3, [r7, #32]
 810d340:	e0a0      	b.n	810d484 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 810d342:	687b      	ldr	r3, [r7, #4]
 810d344:	681a      	ldr	r2, [r3, #0]
 810d346:	687b      	ldr	r3, [r7, #4]
 810d348:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 810d34a:	041b      	lsls	r3, r3, #16
 810d34c:	4619      	mov	r1, r3
 810d34e:	4610      	mov	r0, r2
 810d350:	f004 f829 	bl	81113a6 <SDMMC_CmdAppCommand>
 810d354:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 810d356:	6a3b      	ldr	r3, [r7, #32]
 810d358:	2b00      	cmp	r3, #0
 810d35a:	d005      	beq.n	810d368 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 810d35c:	687b      	ldr	r3, [r7, #4]
 810d35e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 810d360:	687b      	ldr	r3, [r7, #4]
 810d362:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 810d364:	6a3b      	ldr	r3, [r7, #32]
 810d366:	e08d      	b.n	810d484 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 810d368:	f04f 33ff 	mov.w	r3, #4294967295
 810d36c:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 810d36e:	2340      	movs	r3, #64	; 0x40
 810d370:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 810d372:	2360      	movs	r3, #96	; 0x60
 810d374:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 810d376:	2302      	movs	r3, #2
 810d378:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 810d37a:	2300      	movs	r3, #0
 810d37c:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 810d37e:	2301      	movs	r3, #1
 810d380:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 810d382:	687b      	ldr	r3, [r7, #4]
 810d384:	681b      	ldr	r3, [r3, #0]
 810d386:	f107 0208 	add.w	r2, r7, #8
 810d38a:	4611      	mov	r1, r2
 810d38c:	4618      	mov	r0, r3
 810d38e:	f003 fe91 	bl	81110b4 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 810d392:	687b      	ldr	r3, [r7, #4]
 810d394:	681b      	ldr	r3, [r3, #0]
 810d396:	4618      	mov	r0, r3
 810d398:	f004 f911 	bl	81115be <SDMMC_CmdStatusRegister>
 810d39c:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 810d39e:	6a3b      	ldr	r3, [r7, #32]
 810d3a0:	2b00      	cmp	r3, #0
 810d3a2:	d02b      	beq.n	810d3fc <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 810d3a4:	687b      	ldr	r3, [r7, #4]
 810d3a6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 810d3a8:	687b      	ldr	r3, [r7, #4]
 810d3aa:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 810d3ac:	6a3b      	ldr	r3, [r7, #32]
 810d3ae:	e069      	b.n	810d484 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 810d3b0:	687b      	ldr	r3, [r7, #4]
 810d3b2:	681b      	ldr	r3, [r3, #0]
 810d3b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 810d3b6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 810d3ba:	2b00      	cmp	r3, #0
 810d3bc:	d013      	beq.n	810d3e6 <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 810d3be:	2300      	movs	r3, #0
 810d3c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 810d3c2:	e00d      	b.n	810d3e0 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 810d3c4:	687b      	ldr	r3, [r7, #4]
 810d3c6:	681b      	ldr	r3, [r3, #0]
 810d3c8:	4618      	mov	r0, r3
 810d3ca:	f003 fdeb 	bl	8110fa4 <SDMMC_ReadFIFO>
 810d3ce:	4602      	mov	r2, r0
 810d3d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810d3d2:	601a      	str	r2, [r3, #0]
        pData++;
 810d3d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810d3d6:	3304      	adds	r3, #4
 810d3d8:	62bb      	str	r3, [r7, #40]	; 0x28
      for (count = 0U; count < 8U; count++)
 810d3da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810d3dc:	3301      	adds	r3, #1
 810d3de:	62fb      	str	r3, [r7, #44]	; 0x2c
 810d3e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810d3e2:	2b07      	cmp	r3, #7
 810d3e4:	d9ee      	bls.n	810d3c4 <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 810d3e6:	f7f5 fb09 	bl	81029fc <HAL_GetTick>
 810d3ea:	4602      	mov	r2, r0
 810d3ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810d3ee:	1ad3      	subs	r3, r2, r3
 810d3f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 810d3f4:	d102      	bne.n	810d3fc <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 810d3f6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 810d3fa:	e043      	b.n	810d484 <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 810d3fc:	687b      	ldr	r3, [r7, #4]
 810d3fe:	681b      	ldr	r3, [r3, #0]
 810d400:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 810d402:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 810d406:	2b00      	cmp	r3, #0
 810d408:	d0d2      	beq.n	810d3b0 <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 810d40a:	687b      	ldr	r3, [r7, #4]
 810d40c:	681b      	ldr	r3, [r3, #0]
 810d40e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 810d410:	f003 0308 	and.w	r3, r3, #8
 810d414:	2b00      	cmp	r3, #0
 810d416:	d001      	beq.n	810d41c <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 810d418:	2308      	movs	r3, #8
 810d41a:	e033      	b.n	810d484 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 810d41c:	687b      	ldr	r3, [r7, #4]
 810d41e:	681b      	ldr	r3, [r3, #0]
 810d420:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 810d422:	f003 0302 	and.w	r3, r3, #2
 810d426:	2b00      	cmp	r3, #0
 810d428:	d001      	beq.n	810d42e <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 810d42a:	2302      	movs	r3, #2
 810d42c:	e02a      	b.n	810d484 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 810d42e:	687b      	ldr	r3, [r7, #4]
 810d430:	681b      	ldr	r3, [r3, #0]
 810d432:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 810d434:	f003 0320 	and.w	r3, r3, #32
 810d438:	2b00      	cmp	r3, #0
 810d43a:	d017      	beq.n	810d46c <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 810d43c:	2320      	movs	r3, #32
 810d43e:	e021      	b.n	810d484 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 810d440:	687b      	ldr	r3, [r7, #4]
 810d442:	681b      	ldr	r3, [r3, #0]
 810d444:	4618      	mov	r0, r3
 810d446:	f003 fdad 	bl	8110fa4 <SDMMC_ReadFIFO>
 810d44a:	4602      	mov	r2, r0
 810d44c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810d44e:	601a      	str	r2, [r3, #0]
    pData++;
 810d450:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810d452:	3304      	adds	r3, #4
 810d454:	62bb      	str	r3, [r7, #40]	; 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 810d456:	f7f5 fad1 	bl	81029fc <HAL_GetTick>
 810d45a:	4602      	mov	r2, r0
 810d45c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810d45e:	1ad3      	subs	r3, r2, r3
 810d460:	f1b3 3fff 	cmp.w	r3, #4294967295
 810d464:	d102      	bne.n	810d46c <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 810d466:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 810d46a:	e00b      	b.n	810d484 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 810d46c:	687b      	ldr	r3, [r7, #4]
 810d46e:	681b      	ldr	r3, [r3, #0]
 810d470:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 810d472:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 810d476:	2b00      	cmp	r3, #0
 810d478:	d1e2      	bne.n	810d440 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 810d47a:	687b      	ldr	r3, [r7, #4]
 810d47c:	681b      	ldr	r3, [r3, #0]
 810d47e:	4a03      	ldr	r2, [pc, #12]	; (810d48c <SD_SendSDStatus+0x19c>)
 810d480:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 810d482:	2300      	movs	r3, #0
}
 810d484:	4618      	mov	r0, r3
 810d486:	3730      	adds	r7, #48	; 0x30
 810d488:	46bd      	mov	sp, r7
 810d48a:	bd80      	pop	{r7, pc}
 810d48c:	18000f3a 	.word	0x18000f3a

0810d490 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 810d490:	b580      	push	{r7, lr}
 810d492:	b084      	sub	sp, #16
 810d494:	af00      	add	r7, sp, #0
 810d496:	6078      	str	r0, [r7, #4]
 810d498:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 810d49a:	683b      	ldr	r3, [r7, #0]
 810d49c:	2b00      	cmp	r3, #0
 810d49e:	d102      	bne.n	810d4a6 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 810d4a0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 810d4a4:	e018      	b.n	810d4d8 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 810d4a6:	687b      	ldr	r3, [r7, #4]
 810d4a8:	681a      	ldr	r2, [r3, #0]
 810d4aa:	687b      	ldr	r3, [r7, #4]
 810d4ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 810d4ae:	041b      	lsls	r3, r3, #16
 810d4b0:	4619      	mov	r1, r3
 810d4b2:	4610      	mov	r0, r2
 810d4b4:	f004 f860 	bl	8111578 <SDMMC_CmdSendStatus>
 810d4b8:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 810d4ba:	68fb      	ldr	r3, [r7, #12]
 810d4bc:	2b00      	cmp	r3, #0
 810d4be:	d001      	beq.n	810d4c4 <SD_SendStatus+0x34>
  {
    return errorstate;
 810d4c0:	68fb      	ldr	r3, [r7, #12]
 810d4c2:	e009      	b.n	810d4d8 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 810d4c4:	687b      	ldr	r3, [r7, #4]
 810d4c6:	681b      	ldr	r3, [r3, #0]
 810d4c8:	2100      	movs	r1, #0
 810d4ca:	4618      	mov	r0, r3
 810d4cc:	f003 fddf 	bl	811108e <SDMMC_GetResponse>
 810d4d0:	4602      	mov	r2, r0
 810d4d2:	683b      	ldr	r3, [r7, #0]
 810d4d4:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 810d4d6:	2300      	movs	r3, #0
}
 810d4d8:	4618      	mov	r0, r3
 810d4da:	3710      	adds	r7, #16
 810d4dc:	46bd      	mov	sp, r7
 810d4de:	bd80      	pop	{r7, pc}

0810d4e0 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 810d4e0:	b580      	push	{r7, lr}
 810d4e2:	b086      	sub	sp, #24
 810d4e4:	af00      	add	r7, sp, #0
 810d4e6:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 810d4e8:	2300      	movs	r3, #0
 810d4ea:	60fb      	str	r3, [r7, #12]
 810d4ec:	2300      	movs	r3, #0
 810d4ee:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 810d4f0:	687b      	ldr	r3, [r7, #4]
 810d4f2:	681b      	ldr	r3, [r3, #0]
 810d4f4:	2100      	movs	r1, #0
 810d4f6:	4618      	mov	r0, r3
 810d4f8:	f003 fdc9 	bl	811108e <SDMMC_GetResponse>
 810d4fc:	4603      	mov	r3, r0
 810d4fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 810d502:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 810d506:	d102      	bne.n	810d50e <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 810d508:	f44f 6300 	mov.w	r3, #2048	; 0x800
 810d50c:	e02f      	b.n	810d56e <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 810d50e:	f107 030c 	add.w	r3, r7, #12
 810d512:	4619      	mov	r1, r3
 810d514:	6878      	ldr	r0, [r7, #4]
 810d516:	f000 f879 	bl	810d60c <SD_FindSCR>
 810d51a:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 810d51c:	697b      	ldr	r3, [r7, #20]
 810d51e:	2b00      	cmp	r3, #0
 810d520:	d001      	beq.n	810d526 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 810d522:	697b      	ldr	r3, [r7, #20]
 810d524:	e023      	b.n	810d56e <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 810d526:	693b      	ldr	r3, [r7, #16]
 810d528:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 810d52c:	2b00      	cmp	r3, #0
 810d52e:	d01c      	beq.n	810d56a <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 810d530:	687b      	ldr	r3, [r7, #4]
 810d532:	681a      	ldr	r2, [r3, #0]
 810d534:	687b      	ldr	r3, [r7, #4]
 810d536:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 810d538:	041b      	lsls	r3, r3, #16
 810d53a:	4619      	mov	r1, r3
 810d53c:	4610      	mov	r0, r2
 810d53e:	f003 ff32 	bl	81113a6 <SDMMC_CmdAppCommand>
 810d542:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 810d544:	697b      	ldr	r3, [r7, #20]
 810d546:	2b00      	cmp	r3, #0
 810d548:	d001      	beq.n	810d54e <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 810d54a:	697b      	ldr	r3, [r7, #20]
 810d54c:	e00f      	b.n	810d56e <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 810d54e:	687b      	ldr	r3, [r7, #4]
 810d550:	681b      	ldr	r3, [r3, #0]
 810d552:	2102      	movs	r1, #2
 810d554:	4618      	mov	r0, r3
 810d556:	f003 ff69 	bl	811142c <SDMMC_CmdBusWidth>
 810d55a:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 810d55c:	697b      	ldr	r3, [r7, #20]
 810d55e:	2b00      	cmp	r3, #0
 810d560:	d001      	beq.n	810d566 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 810d562:	697b      	ldr	r3, [r7, #20]
 810d564:	e003      	b.n	810d56e <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 810d566:	2300      	movs	r3, #0
 810d568:	e001      	b.n	810d56e <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 810d56a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 810d56e:	4618      	mov	r0, r3
 810d570:	3718      	adds	r7, #24
 810d572:	46bd      	mov	sp, r7
 810d574:	bd80      	pop	{r7, pc}

0810d576 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 810d576:	b580      	push	{r7, lr}
 810d578:	b086      	sub	sp, #24
 810d57a:	af00      	add	r7, sp, #0
 810d57c:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 810d57e:	2300      	movs	r3, #0
 810d580:	60fb      	str	r3, [r7, #12]
 810d582:	2300      	movs	r3, #0
 810d584:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 810d586:	687b      	ldr	r3, [r7, #4]
 810d588:	681b      	ldr	r3, [r3, #0]
 810d58a:	2100      	movs	r1, #0
 810d58c:	4618      	mov	r0, r3
 810d58e:	f003 fd7e 	bl	811108e <SDMMC_GetResponse>
 810d592:	4603      	mov	r3, r0
 810d594:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 810d598:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 810d59c:	d102      	bne.n	810d5a4 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 810d59e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 810d5a2:	e02f      	b.n	810d604 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 810d5a4:	f107 030c 	add.w	r3, r7, #12
 810d5a8:	4619      	mov	r1, r3
 810d5aa:	6878      	ldr	r0, [r7, #4]
 810d5ac:	f000 f82e 	bl	810d60c <SD_FindSCR>
 810d5b0:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 810d5b2:	697b      	ldr	r3, [r7, #20]
 810d5b4:	2b00      	cmp	r3, #0
 810d5b6:	d001      	beq.n	810d5bc <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 810d5b8:	697b      	ldr	r3, [r7, #20]
 810d5ba:	e023      	b.n	810d604 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 810d5bc:	693b      	ldr	r3, [r7, #16]
 810d5be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 810d5c2:	2b00      	cmp	r3, #0
 810d5c4:	d01c      	beq.n	810d600 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 810d5c6:	687b      	ldr	r3, [r7, #4]
 810d5c8:	681a      	ldr	r2, [r3, #0]
 810d5ca:	687b      	ldr	r3, [r7, #4]
 810d5cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 810d5ce:	041b      	lsls	r3, r3, #16
 810d5d0:	4619      	mov	r1, r3
 810d5d2:	4610      	mov	r0, r2
 810d5d4:	f003 fee7 	bl	81113a6 <SDMMC_CmdAppCommand>
 810d5d8:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 810d5da:	697b      	ldr	r3, [r7, #20]
 810d5dc:	2b00      	cmp	r3, #0
 810d5de:	d001      	beq.n	810d5e4 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 810d5e0:	697b      	ldr	r3, [r7, #20]
 810d5e2:	e00f      	b.n	810d604 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 810d5e4:	687b      	ldr	r3, [r7, #4]
 810d5e6:	681b      	ldr	r3, [r3, #0]
 810d5e8:	2100      	movs	r1, #0
 810d5ea:	4618      	mov	r0, r3
 810d5ec:	f003 ff1e 	bl	811142c <SDMMC_CmdBusWidth>
 810d5f0:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 810d5f2:	697b      	ldr	r3, [r7, #20]
 810d5f4:	2b00      	cmp	r3, #0
 810d5f6:	d001      	beq.n	810d5fc <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 810d5f8:	697b      	ldr	r3, [r7, #20]
 810d5fa:	e003      	b.n	810d604 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 810d5fc:	2300      	movs	r3, #0
 810d5fe:	e001      	b.n	810d604 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 810d600:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 810d604:	4618      	mov	r0, r3
 810d606:	3718      	adds	r7, #24
 810d608:	46bd      	mov	sp, r7
 810d60a:	bd80      	pop	{r7, pc}

0810d60c <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 810d60c:	b580      	push	{r7, lr}
 810d60e:	b08e      	sub	sp, #56	; 0x38
 810d610:	af00      	add	r7, sp, #0
 810d612:	6078      	str	r0, [r7, #4]
 810d614:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 810d616:	f7f5 f9f1 	bl	81029fc <HAL_GetTick>
 810d61a:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 810d61c:	2300      	movs	r3, #0
 810d61e:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 810d620:	2300      	movs	r3, #0
 810d622:	60bb      	str	r3, [r7, #8]
 810d624:	2300      	movs	r3, #0
 810d626:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 810d628:	683b      	ldr	r3, [r7, #0]
 810d62a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 810d62c:	687b      	ldr	r3, [r7, #4]
 810d62e:	681b      	ldr	r3, [r3, #0]
 810d630:	2108      	movs	r1, #8
 810d632:	4618      	mov	r0, r3
 810d634:	f003 fd6a 	bl	811110c <SDMMC_CmdBlockLength>
 810d638:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 810d63a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810d63c:	2b00      	cmp	r3, #0
 810d63e:	d001      	beq.n	810d644 <SD_FindSCR+0x38>
  {
    return errorstate;
 810d640:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810d642:	e0ad      	b.n	810d7a0 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 810d644:	687b      	ldr	r3, [r7, #4]
 810d646:	681a      	ldr	r2, [r3, #0]
 810d648:	687b      	ldr	r3, [r7, #4]
 810d64a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 810d64c:	041b      	lsls	r3, r3, #16
 810d64e:	4619      	mov	r1, r3
 810d650:	4610      	mov	r0, r2
 810d652:	f003 fea8 	bl	81113a6 <SDMMC_CmdAppCommand>
 810d656:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 810d658:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810d65a:	2b00      	cmp	r3, #0
 810d65c:	d001      	beq.n	810d662 <SD_FindSCR+0x56>
  {
    return errorstate;
 810d65e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810d660:	e09e      	b.n	810d7a0 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 810d662:	f04f 33ff 	mov.w	r3, #4294967295
 810d666:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 810d668:	2308      	movs	r3, #8
 810d66a:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 810d66c:	2330      	movs	r3, #48	; 0x30
 810d66e:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 810d670:	2302      	movs	r3, #2
 810d672:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 810d674:	2300      	movs	r3, #0
 810d676:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 810d678:	2301      	movs	r3, #1
 810d67a:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 810d67c:	687b      	ldr	r3, [r7, #4]
 810d67e:	681b      	ldr	r3, [r3, #0]
 810d680:	f107 0210 	add.w	r2, r7, #16
 810d684:	4611      	mov	r1, r2
 810d686:	4618      	mov	r0, r3
 810d688:	f003 fd14 	bl	81110b4 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 810d68c:	687b      	ldr	r3, [r7, #4]
 810d68e:	681b      	ldr	r3, [r3, #0]
 810d690:	4618      	mov	r0, r3
 810d692:	f003 feee 	bl	8111472 <SDMMC_CmdSendSCR>
 810d696:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 810d698:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810d69a:	2b00      	cmp	r3, #0
 810d69c:	d027      	beq.n	810d6ee <SD_FindSCR+0xe2>
  {
    return errorstate;
 810d69e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810d6a0:	e07e      	b.n	810d7a0 <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 810d6a2:	687b      	ldr	r3, [r7, #4]
 810d6a4:	681b      	ldr	r3, [r3, #0]
 810d6a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 810d6a8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 810d6ac:	2b00      	cmp	r3, #0
 810d6ae:	d113      	bne.n	810d6d8 <SD_FindSCR+0xcc>
 810d6b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 810d6b2:	2b00      	cmp	r3, #0
 810d6b4:	d110      	bne.n	810d6d8 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 810d6b6:	687b      	ldr	r3, [r7, #4]
 810d6b8:	681b      	ldr	r3, [r3, #0]
 810d6ba:	4618      	mov	r0, r3
 810d6bc:	f003 fc72 	bl	8110fa4 <SDMMC_ReadFIFO>
 810d6c0:	4603      	mov	r3, r0
 810d6c2:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 810d6c4:	687b      	ldr	r3, [r7, #4]
 810d6c6:	681b      	ldr	r3, [r3, #0]
 810d6c8:	4618      	mov	r0, r3
 810d6ca:	f003 fc6b 	bl	8110fa4 <SDMMC_ReadFIFO>
 810d6ce:	4603      	mov	r3, r0
 810d6d0:	60fb      	str	r3, [r7, #12]
      index++;
 810d6d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 810d6d4:	3301      	adds	r3, #1
 810d6d6:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 810d6d8:	f7f5 f990 	bl	81029fc <HAL_GetTick>
 810d6dc:	4602      	mov	r2, r0
 810d6de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810d6e0:	1ad3      	subs	r3, r2, r3
 810d6e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 810d6e6:	d102      	bne.n	810d6ee <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 810d6e8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 810d6ec:	e058      	b.n	810d7a0 <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 810d6ee:	687b      	ldr	r3, [r7, #4]
 810d6f0:	681b      	ldr	r3, [r3, #0]
 810d6f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 810d6f4:	f240 532a 	movw	r3, #1322	; 0x52a
 810d6f8:	4013      	ands	r3, r2
 810d6fa:	2b00      	cmp	r3, #0
 810d6fc:	d0d1      	beq.n	810d6a2 <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 810d6fe:	687b      	ldr	r3, [r7, #4]
 810d700:	681b      	ldr	r3, [r3, #0]
 810d702:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 810d704:	f003 0308 	and.w	r3, r3, #8
 810d708:	2b00      	cmp	r3, #0
 810d70a:	d005      	beq.n	810d718 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 810d70c:	687b      	ldr	r3, [r7, #4]
 810d70e:	681b      	ldr	r3, [r3, #0]
 810d710:	2208      	movs	r2, #8
 810d712:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 810d714:	2308      	movs	r3, #8
 810d716:	e043      	b.n	810d7a0 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 810d718:	687b      	ldr	r3, [r7, #4]
 810d71a:	681b      	ldr	r3, [r3, #0]
 810d71c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 810d71e:	f003 0302 	and.w	r3, r3, #2
 810d722:	2b00      	cmp	r3, #0
 810d724:	d005      	beq.n	810d732 <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 810d726:	687b      	ldr	r3, [r7, #4]
 810d728:	681b      	ldr	r3, [r3, #0]
 810d72a:	2202      	movs	r2, #2
 810d72c:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 810d72e:	2302      	movs	r3, #2
 810d730:	e036      	b.n	810d7a0 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 810d732:	687b      	ldr	r3, [r7, #4]
 810d734:	681b      	ldr	r3, [r3, #0]
 810d736:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 810d738:	f003 0320 	and.w	r3, r3, #32
 810d73c:	2b00      	cmp	r3, #0
 810d73e:	d005      	beq.n	810d74c <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 810d740:	687b      	ldr	r3, [r7, #4]
 810d742:	681b      	ldr	r3, [r3, #0]
 810d744:	2220      	movs	r2, #32
 810d746:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 810d748:	2320      	movs	r3, #32
 810d74a:	e029      	b.n	810d7a0 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 810d74c:	687b      	ldr	r3, [r7, #4]
 810d74e:	681b      	ldr	r3, [r3, #0]
 810d750:	4a15      	ldr	r2, [pc, #84]	; (810d7a8 <SD_FindSCR+0x19c>)
 810d752:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 810d754:	68fb      	ldr	r3, [r7, #12]
 810d756:	061a      	lsls	r2, r3, #24
 810d758:	68fb      	ldr	r3, [r7, #12]
 810d75a:	021b      	lsls	r3, r3, #8
 810d75c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 810d760:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 810d762:	68fb      	ldr	r3, [r7, #12]
 810d764:	0a1b      	lsrs	r3, r3, #8
 810d766:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 810d76a:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 810d76c:	68fb      	ldr	r3, [r7, #12]
 810d76e:	0e1b      	lsrs	r3, r3, #24
 810d770:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 810d772:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810d774:	601a      	str	r2, [r3, #0]
    scr++;
 810d776:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810d778:	3304      	adds	r3, #4
 810d77a:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 810d77c:	68bb      	ldr	r3, [r7, #8]
 810d77e:	061a      	lsls	r2, r3, #24
 810d780:	68bb      	ldr	r3, [r7, #8]
 810d782:	021b      	lsls	r3, r3, #8
 810d784:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 810d788:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 810d78a:	68bb      	ldr	r3, [r7, #8]
 810d78c:	0a1b      	lsrs	r3, r3, #8
 810d78e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 810d792:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 810d794:	68bb      	ldr	r3, [r7, #8]
 810d796:	0e1b      	lsrs	r3, r3, #24
 810d798:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 810d79a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810d79c:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 810d79e:	2300      	movs	r3, #0
}
 810d7a0:	4618      	mov	r0, r3
 810d7a2:	3738      	adds	r7, #56	; 0x38
 810d7a4:	46bd      	mov	sp, r7
 810d7a6:	bd80      	pop	{r7, pc}
 810d7a8:	18000f3a 	.word	0x18000f3a

0810d7ac <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 810d7ac:	b580      	push	{r7, lr}
 810d7ae:	b086      	sub	sp, #24
 810d7b0:	af00      	add	r7, sp, #0
 810d7b2:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pRxBuffPtr;
 810d7b4:	687b      	ldr	r3, [r7, #4]
 810d7b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810d7b8:	613b      	str	r3, [r7, #16]

  if (hsd->RxXferSize >= 32U)
 810d7ba:	687b      	ldr	r3, [r7, #4]
 810d7bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810d7be:	2b1f      	cmp	r3, #31
 810d7c0:	d936      	bls.n	810d830 <SD_Read_IT+0x84>
  {
    /* Read data from SDMMC Rx FIFO */
    for (count = 0U; count < 8U; count++)
 810d7c2:	2300      	movs	r3, #0
 810d7c4:	617b      	str	r3, [r7, #20]
 810d7c6:	e027      	b.n	810d818 <SD_Read_IT+0x6c>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 810d7c8:	687b      	ldr	r3, [r7, #4]
 810d7ca:	681b      	ldr	r3, [r3, #0]
 810d7cc:	4618      	mov	r0, r3
 810d7ce:	f003 fbe9 	bl	8110fa4 <SDMMC_ReadFIFO>
 810d7d2:	60f8      	str	r0, [r7, #12]
      *tmp = (uint8_t)(data & 0xFFU);
 810d7d4:	68fb      	ldr	r3, [r7, #12]
 810d7d6:	b2da      	uxtb	r2, r3
 810d7d8:	693b      	ldr	r3, [r7, #16]
 810d7da:	701a      	strb	r2, [r3, #0]
      tmp++;
 810d7dc:	693b      	ldr	r3, [r7, #16]
 810d7de:	3301      	adds	r3, #1
 810d7e0:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 810d7e2:	68fb      	ldr	r3, [r7, #12]
 810d7e4:	0a1b      	lsrs	r3, r3, #8
 810d7e6:	b2da      	uxtb	r2, r3
 810d7e8:	693b      	ldr	r3, [r7, #16]
 810d7ea:	701a      	strb	r2, [r3, #0]
      tmp++;
 810d7ec:	693b      	ldr	r3, [r7, #16]
 810d7ee:	3301      	adds	r3, #1
 810d7f0:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 810d7f2:	68fb      	ldr	r3, [r7, #12]
 810d7f4:	0c1b      	lsrs	r3, r3, #16
 810d7f6:	b2da      	uxtb	r2, r3
 810d7f8:	693b      	ldr	r3, [r7, #16]
 810d7fa:	701a      	strb	r2, [r3, #0]
      tmp++;
 810d7fc:	693b      	ldr	r3, [r7, #16]
 810d7fe:	3301      	adds	r3, #1
 810d800:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 810d802:	68fb      	ldr	r3, [r7, #12]
 810d804:	0e1b      	lsrs	r3, r3, #24
 810d806:	b2da      	uxtb	r2, r3
 810d808:	693b      	ldr	r3, [r7, #16]
 810d80a:	701a      	strb	r2, [r3, #0]
      tmp++;
 810d80c:	693b      	ldr	r3, [r7, #16]
 810d80e:	3301      	adds	r3, #1
 810d810:	613b      	str	r3, [r7, #16]
    for (count = 0U; count < 8U; count++)
 810d812:	697b      	ldr	r3, [r7, #20]
 810d814:	3301      	adds	r3, #1
 810d816:	617b      	str	r3, [r7, #20]
 810d818:	697b      	ldr	r3, [r7, #20]
 810d81a:	2b07      	cmp	r3, #7
 810d81c:	d9d4      	bls.n	810d7c8 <SD_Read_IT+0x1c>
    }

    hsd->pRxBuffPtr = tmp;
 810d81e:	687b      	ldr	r3, [r7, #4]
 810d820:	693a      	ldr	r2, [r7, #16]
 810d822:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize -= 32U;
 810d824:	687b      	ldr	r3, [r7, #4]
 810d826:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810d828:	f1a3 0220 	sub.w	r2, r3, #32
 810d82c:	687b      	ldr	r3, [r7, #4]
 810d82e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 810d830:	bf00      	nop
 810d832:	3718      	adds	r7, #24
 810d834:	46bd      	mov	sp, r7
 810d836:	bd80      	pop	{r7, pc}

0810d838 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 810d838:	b580      	push	{r7, lr}
 810d83a:	b086      	sub	sp, #24
 810d83c:	af00      	add	r7, sp, #0
 810d83e:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pTxBuffPtr;
 810d840:	687b      	ldr	r3, [r7, #4]
 810d842:	6a1b      	ldr	r3, [r3, #32]
 810d844:	613b      	str	r3, [r7, #16]

  if (hsd->TxXferSize >= 32U)
 810d846:	687b      	ldr	r3, [r7, #4]
 810d848:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810d84a:	2b1f      	cmp	r3, #31
 810d84c:	d93a      	bls.n	810d8c4 <SD_Write_IT+0x8c>
  {
    /* Write data to SDMMC Tx FIFO */
    for (count = 0U; count < 8U; count++)
 810d84e:	2300      	movs	r3, #0
 810d850:	617b      	str	r3, [r7, #20]
 810d852:	e02b      	b.n	810d8ac <SD_Write_IT+0x74>
    {
      data = (uint32_t)(*tmp);
 810d854:	693b      	ldr	r3, [r7, #16]
 810d856:	781b      	ldrb	r3, [r3, #0]
 810d858:	60fb      	str	r3, [r7, #12]
      tmp++;
 810d85a:	693b      	ldr	r3, [r7, #16]
 810d85c:	3301      	adds	r3, #1
 810d85e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 810d860:	693b      	ldr	r3, [r7, #16]
 810d862:	781b      	ldrb	r3, [r3, #0]
 810d864:	021a      	lsls	r2, r3, #8
 810d866:	68fb      	ldr	r3, [r7, #12]
 810d868:	4313      	orrs	r3, r2
 810d86a:	60fb      	str	r3, [r7, #12]
      tmp++;
 810d86c:	693b      	ldr	r3, [r7, #16]
 810d86e:	3301      	adds	r3, #1
 810d870:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 810d872:	693b      	ldr	r3, [r7, #16]
 810d874:	781b      	ldrb	r3, [r3, #0]
 810d876:	041a      	lsls	r2, r3, #16
 810d878:	68fb      	ldr	r3, [r7, #12]
 810d87a:	4313      	orrs	r3, r2
 810d87c:	60fb      	str	r3, [r7, #12]
      tmp++;
 810d87e:	693b      	ldr	r3, [r7, #16]
 810d880:	3301      	adds	r3, #1
 810d882:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 810d884:	693b      	ldr	r3, [r7, #16]
 810d886:	781b      	ldrb	r3, [r3, #0]
 810d888:	061a      	lsls	r2, r3, #24
 810d88a:	68fb      	ldr	r3, [r7, #12]
 810d88c:	4313      	orrs	r3, r2
 810d88e:	60fb      	str	r3, [r7, #12]
      tmp++;
 810d890:	693b      	ldr	r3, [r7, #16]
 810d892:	3301      	adds	r3, #1
 810d894:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 810d896:	687b      	ldr	r3, [r7, #4]
 810d898:	681b      	ldr	r3, [r3, #0]
 810d89a:	f107 020c 	add.w	r2, r7, #12
 810d89e:	4611      	mov	r1, r2
 810d8a0:	4618      	mov	r0, r3
 810d8a2:	f003 fb8c 	bl	8110fbe <SDMMC_WriteFIFO>
    for (count = 0U; count < 8U; count++)
 810d8a6:	697b      	ldr	r3, [r7, #20]
 810d8a8:	3301      	adds	r3, #1
 810d8aa:	617b      	str	r3, [r7, #20]
 810d8ac:	697b      	ldr	r3, [r7, #20]
 810d8ae:	2b07      	cmp	r3, #7
 810d8b0:	d9d0      	bls.n	810d854 <SD_Write_IT+0x1c>
    }

    hsd->pTxBuffPtr = tmp;
 810d8b2:	687b      	ldr	r3, [r7, #4]
 810d8b4:	693a      	ldr	r2, [r7, #16]
 810d8b6:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize -= 32U;
 810d8b8:	687b      	ldr	r3, [r7, #4]
 810d8ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810d8bc:	f1a3 0220 	sub.w	r2, r3, #32
 810d8c0:	687b      	ldr	r3, [r7, #4]
 810d8c2:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 810d8c4:	bf00      	nop
 810d8c6:	3718      	adds	r7, #24
 810d8c8:	46bd      	mov	sp, r7
 810d8ca:	bd80      	pop	{r7, pc}

0810d8cc <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 810d8cc:	b480      	push	{r7}
 810d8ce:	b083      	sub	sp, #12
 810d8d0:	af00      	add	r7, sp, #0
 810d8d2:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 810d8d4:	bf00      	nop
 810d8d6:	370c      	adds	r7, #12
 810d8d8:	46bd      	mov	sp, r7
 810d8da:	f85d 7b04 	ldr.w	r7, [sp], #4
 810d8de:	4770      	bx	lr

0810d8e0 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 810d8e0:	b480      	push	{r7}
 810d8e2:	b083      	sub	sp, #12
 810d8e4:	af00      	add	r7, sp, #0
 810d8e6:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 810d8e8:	bf00      	nop
 810d8ea:	370c      	adds	r7, #12
 810d8ec:	46bd      	mov	sp, r7
 810d8ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 810d8f2:	4770      	bx	lr

0810d8f4 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 810d8f4:	b480      	push	{r7}
 810d8f6:	b083      	sub	sp, #12
 810d8f8:	af00      	add	r7, sp, #0
 810d8fa:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 810d8fc:	bf00      	nop
 810d8fe:	370c      	adds	r7, #12
 810d900:	46bd      	mov	sp, r7
 810d902:	f85d 7b04 	ldr.w	r7, [sp], #4
 810d906:	4770      	bx	lr

0810d908 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 810d908:	b480      	push	{r7}
 810d90a:	b083      	sub	sp, #12
 810d90c:	af00      	add	r7, sp, #0
 810d90e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 810d910:	bf00      	nop
 810d912:	370c      	adds	r7, #12
 810d914:	46bd      	mov	sp, r7
 810d916:	f85d 7b04 	ldr.w	r7, [sp], #4
 810d91a:	4770      	bx	lr

0810d91c <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 810d91c:	b580      	push	{r7, lr}
 810d91e:	b084      	sub	sp, #16
 810d920:	af00      	add	r7, sp, #0
 810d922:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_length;
#else
  uint32_t crc_length = 0UL;
 810d924:	2300      	movs	r3, #0
 810d926:	60fb      	str	r3, [r7, #12]
#endif
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 810d928:	687b      	ldr	r3, [r7, #4]
 810d92a:	2b00      	cmp	r3, #0
 810d92c:	d101      	bne.n	810d932 <HAL_SPI_Init+0x16>
  {
    return HAL_ERROR;
 810d92e:	2301      	movs	r3, #1
 810d930:	e0eb      	b.n	810db0a <HAL_SPI_Init+0x1ee>
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 810d932:	687b      	ldr	r3, [r7, #4]
 810d934:	2200      	movs	r2, #0
 810d936:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 810d938:	687b      	ldr	r3, [r7, #4]
 810d93a:	681b      	ldr	r3, [r3, #0]
 810d93c:	4a75      	ldr	r2, [pc, #468]	; (810db14 <HAL_SPI_Init+0x1f8>)
 810d93e:	4293      	cmp	r3, r2
 810d940:	d00f      	beq.n	810d962 <HAL_SPI_Init+0x46>
 810d942:	687b      	ldr	r3, [r7, #4]
 810d944:	681b      	ldr	r3, [r3, #0]
 810d946:	4a74      	ldr	r2, [pc, #464]	; (810db18 <HAL_SPI_Init+0x1fc>)
 810d948:	4293      	cmp	r3, r2
 810d94a:	d00a      	beq.n	810d962 <HAL_SPI_Init+0x46>
 810d94c:	687b      	ldr	r3, [r7, #4]
 810d94e:	681b      	ldr	r3, [r3, #0]
 810d950:	4a72      	ldr	r2, [pc, #456]	; (810db1c <HAL_SPI_Init+0x200>)
 810d952:	4293      	cmp	r3, r2
 810d954:	d005      	beq.n	810d962 <HAL_SPI_Init+0x46>
 810d956:	687b      	ldr	r3, [r7, #4]
 810d958:	68db      	ldr	r3, [r3, #12]
 810d95a:	2b0f      	cmp	r3, #15
 810d95c:	d901      	bls.n	810d962 <HAL_SPI_Init+0x46>
  {
    return HAL_ERROR;
 810d95e:	2301      	movs	r3, #1
 810d960:	e0d3      	b.n	810db0a <HAL_SPI_Init+0x1ee>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 810d962:	6878      	ldr	r0, [r7, #4]
 810d964:	f000 fb94 	bl	810e090 <SPI_GetPacketSize>
 810d968:	60b8      	str	r0, [r7, #8]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 810d96a:	687b      	ldr	r3, [r7, #4]
 810d96c:	681b      	ldr	r3, [r3, #0]
 810d96e:	4a69      	ldr	r2, [pc, #420]	; (810db14 <HAL_SPI_Init+0x1f8>)
 810d970:	4293      	cmp	r3, r2
 810d972:	d00c      	beq.n	810d98e <HAL_SPI_Init+0x72>
 810d974:	687b      	ldr	r3, [r7, #4]
 810d976:	681b      	ldr	r3, [r3, #0]
 810d978:	4a67      	ldr	r2, [pc, #412]	; (810db18 <HAL_SPI_Init+0x1fc>)
 810d97a:	4293      	cmp	r3, r2
 810d97c:	d007      	beq.n	810d98e <HAL_SPI_Init+0x72>
 810d97e:	687b      	ldr	r3, [r7, #4]
 810d980:	681b      	ldr	r3, [r3, #0]
 810d982:	4a66      	ldr	r2, [pc, #408]	; (810db1c <HAL_SPI_Init+0x200>)
 810d984:	4293      	cmp	r3, r2
 810d986:	d002      	beq.n	810d98e <HAL_SPI_Init+0x72>
 810d988:	68bb      	ldr	r3, [r7, #8]
 810d98a:	2b08      	cmp	r3, #8
 810d98c:	d811      	bhi.n	810d9b2 <HAL_SPI_Init+0x96>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 810d98e:	687b      	ldr	r3, [r7, #4]
 810d990:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 810d992:	4a60      	ldr	r2, [pc, #384]	; (810db14 <HAL_SPI_Init+0x1f8>)
 810d994:	4293      	cmp	r3, r2
 810d996:	d009      	beq.n	810d9ac <HAL_SPI_Init+0x90>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 810d998:	687b      	ldr	r3, [r7, #4]
 810d99a:	681b      	ldr	r3, [r3, #0]
 810d99c:	4a5e      	ldr	r2, [pc, #376]	; (810db18 <HAL_SPI_Init+0x1fc>)
 810d99e:	4293      	cmp	r3, r2
 810d9a0:	d004      	beq.n	810d9ac <HAL_SPI_Init+0x90>
 810d9a2:	687b      	ldr	r3, [r7, #4]
 810d9a4:	681b      	ldr	r3, [r3, #0]
 810d9a6:	4a5d      	ldr	r2, [pc, #372]	; (810db1c <HAL_SPI_Init+0x200>)
 810d9a8:	4293      	cmp	r3, r2
 810d9aa:	d104      	bne.n	810d9b6 <HAL_SPI_Init+0x9a>
 810d9ac:	68bb      	ldr	r3, [r7, #8]
 810d9ae:	2b10      	cmp	r3, #16
 810d9b0:	d901      	bls.n	810d9b6 <HAL_SPI_Init+0x9a>
  {
    return HAL_ERROR;
 810d9b2:	2301      	movs	r3, #1
 810d9b4:	e0a9      	b.n	810db0a <HAL_SPI_Init+0x1ee>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 810d9b6:	687b      	ldr	r3, [r7, #4]
 810d9b8:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 810d9bc:	b2db      	uxtb	r3, r3
 810d9be:	2b00      	cmp	r3, #0
 810d9c0:	d106      	bne.n	810d9d0 <HAL_SPI_Init+0xb4>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 810d9c2:	687b      	ldr	r3, [r7, #4]
 810d9c4:	2200      	movs	r2, #0
 810d9c6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 810d9ca:	6878      	ldr	r0, [r7, #4]
 810d9cc:	f7f4 f9e8 	bl	8101da0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 810d9d0:	687b      	ldr	r3, [r7, #4]
 810d9d2:	2202      	movs	r2, #2
 810d9d4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 810d9d8:	687b      	ldr	r3, [r7, #4]
 810d9da:	681b      	ldr	r3, [r3, #0]
 810d9dc:	681a      	ldr	r2, [r3, #0]
 810d9de:	687b      	ldr	r3, [r7, #4]
 810d9e0:	681b      	ldr	r3, [r3, #0]
 810d9e2:	f022 0201 	bic.w	r2, r2, #1
 810d9e6:	601a      	str	r2, [r3, #0]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 810d9e8:	687b      	ldr	r3, [r7, #4]
 810d9ea:	699b      	ldr	r3, [r3, #24]
 810d9ec:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 810d9f0:	d119      	bne.n	810da26 <HAL_SPI_Init+0x10a>
 810d9f2:	687b      	ldr	r3, [r7, #4]
 810d9f4:	685b      	ldr	r3, [r3, #4]
 810d9f6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 810d9fa:	d103      	bne.n	810da04 <HAL_SPI_Init+0xe8>
 810d9fc:	687b      	ldr	r3, [r7, #4]
 810d9fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810da00:	2b00      	cmp	r3, #0
 810da02:	d008      	beq.n	810da16 <HAL_SPI_Init+0xfa>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 810da04:	687b      	ldr	r3, [r7, #4]
 810da06:	685b      	ldr	r3, [r3, #4]
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 810da08:	2b00      	cmp	r3, #0
 810da0a:	d10c      	bne.n	810da26 <HAL_SPI_Init+0x10a>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 810da0c:	687b      	ldr	r3, [r7, #4]
 810da0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810da10:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 810da14:	d107      	bne.n	810da26 <HAL_SPI_Init+0x10a>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 810da16:	687b      	ldr	r3, [r7, #4]
 810da18:	681b      	ldr	r3, [r3, #0]
 810da1a:	681a      	ldr	r2, [r3, #0]
 810da1c:	687b      	ldr	r3, [r7, #4]
 810da1e:	681b      	ldr	r3, [r3, #0]
 810da20:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 810da24:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 810da26:	687b      	ldr	r3, [r7, #4]
 810da28:	69da      	ldr	r2, [r3, #28]
 810da2a:	687b      	ldr	r3, [r7, #4]
 810da2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810da2e:	431a      	orrs	r2, r3
 810da30:	68fb      	ldr	r3, [r7, #12]
 810da32:	431a      	orrs	r2, r3
 810da34:	687b      	ldr	r3, [r7, #4]
 810da36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810da38:	ea42 0103 	orr.w	r1, r2, r3
 810da3c:	687b      	ldr	r3, [r7, #4]
 810da3e:	68da      	ldr	r2, [r3, #12]
 810da40:	687b      	ldr	r3, [r7, #4]
 810da42:	681b      	ldr	r3, [r3, #0]
 810da44:	430a      	orrs	r2, r1
 810da46:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 810da48:	687b      	ldr	r3, [r7, #4]
 810da4a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 810da4c:	687b      	ldr	r3, [r7, #4]
 810da4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810da50:	431a      	orrs	r2, r3
 810da52:	687b      	ldr	r3, [r7, #4]
 810da54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810da56:	431a      	orrs	r2, r3
 810da58:	687b      	ldr	r3, [r7, #4]
 810da5a:	699b      	ldr	r3, [r3, #24]
 810da5c:	431a      	orrs	r2, r3
 810da5e:	687b      	ldr	r3, [r7, #4]
 810da60:	691b      	ldr	r3, [r3, #16]
 810da62:	431a      	orrs	r2, r3
 810da64:	687b      	ldr	r3, [r7, #4]
 810da66:	695b      	ldr	r3, [r3, #20]
 810da68:	431a      	orrs	r2, r3
 810da6a:	687b      	ldr	r3, [r7, #4]
 810da6c:	6a1b      	ldr	r3, [r3, #32]
 810da6e:	431a      	orrs	r2, r3
 810da70:	687b      	ldr	r3, [r7, #4]
 810da72:	685b      	ldr	r3, [r3, #4]
 810da74:	431a      	orrs	r2, r3
 810da76:	687b      	ldr	r3, [r7, #4]
 810da78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 810da7a:	431a      	orrs	r2, r3
 810da7c:	687b      	ldr	r3, [r7, #4]
 810da7e:	689b      	ldr	r3, [r3, #8]
 810da80:	431a      	orrs	r2, r3
 810da82:	687b      	ldr	r3, [r7, #4]
 810da84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 810da86:	ea42 0103 	orr.w	r1, r2, r3
 810da8a:	687b      	ldr	r3, [r7, #4]
 810da8c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 810da8e:	687b      	ldr	r3, [r7, #4]
 810da90:	681b      	ldr	r3, [r3, #0]
 810da92:	430a      	orrs	r2, r1
 810da94:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 810da96:	687b      	ldr	r3, [r7, #4]
 810da98:	685b      	ldr	r3, [r3, #4]
 810da9a:	2b00      	cmp	r3, #0
 810da9c:	d113      	bne.n	810dac6 <HAL_SPI_Init+0x1aa>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 810da9e:	687b      	ldr	r3, [r7, #4]
 810daa0:	681b      	ldr	r3, [r3, #0]
 810daa2:	689b      	ldr	r3, [r3, #8]
 810daa4:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 810daa8:	687b      	ldr	r3, [r7, #4]
 810daaa:	681b      	ldr	r3, [r3, #0]
 810daac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 810dab0:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 810dab2:	687b      	ldr	r3, [r7, #4]
 810dab4:	681b      	ldr	r3, [r3, #0]
 810dab6:	689b      	ldr	r3, [r3, #8]
 810dab8:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 810dabc:	687b      	ldr	r3, [r7, #4]
 810dabe:	681b      	ldr	r3, [r3, #0]
 810dac0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 810dac4:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 810dac6:	687b      	ldr	r3, [r7, #4]
 810dac8:	681b      	ldr	r3, [r3, #0]
 810daca:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 810dacc:	687b      	ldr	r3, [r7, #4]
 810dace:	681b      	ldr	r3, [r3, #0]
 810dad0:	f022 0201 	bic.w	r2, r2, #1
 810dad4:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 810dad6:	687b      	ldr	r3, [r7, #4]
 810dad8:	685b      	ldr	r3, [r3, #4]
 810dada:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 810dade:	2b00      	cmp	r3, #0
 810dae0:	d00a      	beq.n	810daf8 <HAL_SPI_Init+0x1dc>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 810dae2:	687b      	ldr	r3, [r7, #4]
 810dae4:	681b      	ldr	r3, [r3, #0]
 810dae6:	68db      	ldr	r3, [r3, #12]
 810dae8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 810daec:	687b      	ldr	r3, [r7, #4]
 810daee:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 810daf0:	687b      	ldr	r3, [r7, #4]
 810daf2:	681b      	ldr	r3, [r3, #0]
 810daf4:	430a      	orrs	r2, r1
 810daf6:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 810daf8:	687b      	ldr	r3, [r7, #4]
 810dafa:	2200      	movs	r2, #0
 810dafc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 810db00:	687b      	ldr	r3, [r7, #4]
 810db02:	2201      	movs	r2, #1
 810db04:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 810db08:	2300      	movs	r3, #0
}
 810db0a:	4618      	mov	r0, r3
 810db0c:	3710      	adds	r7, #16
 810db0e:	46bd      	mov	sp, r7
 810db10:	bd80      	pop	{r7, pc}
 810db12:	bf00      	nop
 810db14:	40013000 	.word	0x40013000
 810db18:	40003800 	.word	0x40003800
 810db1c:	40003c00 	.word	0x40003c00

0810db20 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 810db20:	b580      	push	{r7, lr}
 810db22:	b08a      	sub	sp, #40	; 0x28
 810db24:	af00      	add	r7, sp, #0
 810db26:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 810db28:	687b      	ldr	r3, [r7, #4]
 810db2a:	681b      	ldr	r3, [r3, #0]
 810db2c:	691b      	ldr	r3, [r3, #16]
 810db2e:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 810db30:	687b      	ldr	r3, [r7, #4]
 810db32:	681b      	ldr	r3, [r3, #0]
 810db34:	695b      	ldr	r3, [r3, #20]
 810db36:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 810db38:	6a3a      	ldr	r2, [r7, #32]
 810db3a:	69fb      	ldr	r3, [r7, #28]
 810db3c:	4013      	ands	r3, r2
 810db3e:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 810db40:	687b      	ldr	r3, [r7, #4]
 810db42:	681b      	ldr	r3, [r3, #0]
 810db44:	689b      	ldr	r3, [r3, #8]
 810db46:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 810db48:	2300      	movs	r3, #0
 810db4a:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 810db4c:	687b      	ldr	r3, [r7, #4]
 810db4e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 810db52:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 810db54:	687b      	ldr	r3, [r7, #4]
 810db56:	681b      	ldr	r3, [r3, #0]
 810db58:	3330      	adds	r3, #48	; 0x30
 810db5a:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */


  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 810db5c:	69bb      	ldr	r3, [r7, #24]
 810db5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 810db62:	2b00      	cmp	r3, #0
 810db64:	d113      	bne.n	810db8e <HAL_SPI_IRQHandler+0x6e>
 810db66:	69bb      	ldr	r3, [r7, #24]
 810db68:	f003 0320 	and.w	r3, r3, #32
 810db6c:	2b00      	cmp	r3, #0
 810db6e:	d10e      	bne.n	810db8e <HAL_SPI_IRQHandler+0x6e>
 810db70:	69bb      	ldr	r3, [r7, #24]
 810db72:	f003 0304 	and.w	r3, r3, #4
 810db76:	2b00      	cmp	r3, #0
 810db78:	d009      	beq.n	810db8e <HAL_SPI_IRQHandler+0x6e>
  {
    hspi->TxISR(hspi);
 810db7a:	687b      	ldr	r3, [r7, #4]
 810db7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 810db7e:	6878      	ldr	r0, [r7, #4]
 810db80:	4798      	blx	r3
    hspi->RxISR(hspi);
 810db82:	687b      	ldr	r3, [r7, #4]
 810db84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 810db86:	6878      	ldr	r0, [r7, #4]
 810db88:	4798      	blx	r3
    handled = 1UL;
 810db8a:	2301      	movs	r3, #1
 810db8c:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 810db8e:	69bb      	ldr	r3, [r7, #24]
 810db90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 810db94:	2b00      	cmp	r3, #0
 810db96:	d10f      	bne.n	810dbb8 <HAL_SPI_IRQHandler+0x98>
 810db98:	69bb      	ldr	r3, [r7, #24]
 810db9a:	f003 0301 	and.w	r3, r3, #1
 810db9e:	2b00      	cmp	r3, #0
 810dba0:	d00a      	beq.n	810dbb8 <HAL_SPI_IRQHandler+0x98>
 810dba2:	69bb      	ldr	r3, [r7, #24]
 810dba4:	f003 0304 	and.w	r3, r3, #4
 810dba8:	2b00      	cmp	r3, #0
 810dbaa:	d105      	bne.n	810dbb8 <HAL_SPI_IRQHandler+0x98>
  {
    hspi->RxISR(hspi);
 810dbac:	687b      	ldr	r3, [r7, #4]
 810dbae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 810dbb0:	6878      	ldr	r0, [r7, #4]
 810dbb2:	4798      	blx	r3
    handled = 1UL;
 810dbb4:	2301      	movs	r3, #1
 810dbb6:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 810dbb8:	69bb      	ldr	r3, [r7, #24]
 810dbba:	f003 0320 	and.w	r3, r3, #32
 810dbbe:	2b00      	cmp	r3, #0
 810dbc0:	d10f      	bne.n	810dbe2 <HAL_SPI_IRQHandler+0xc2>
 810dbc2:	69bb      	ldr	r3, [r7, #24]
 810dbc4:	f003 0302 	and.w	r3, r3, #2
 810dbc8:	2b00      	cmp	r3, #0
 810dbca:	d00a      	beq.n	810dbe2 <HAL_SPI_IRQHandler+0xc2>
 810dbcc:	69bb      	ldr	r3, [r7, #24]
 810dbce:	f003 0304 	and.w	r3, r3, #4
 810dbd2:	2b00      	cmp	r3, #0
 810dbd4:	d105      	bne.n	810dbe2 <HAL_SPI_IRQHandler+0xc2>
  {
    hspi->TxISR(hspi);
 810dbd6:	687b      	ldr	r3, [r7, #4]
 810dbd8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 810dbda:	6878      	ldr	r0, [r7, #4]
 810dbdc:	4798      	blx	r3
    handled = 1UL;
 810dbde:	2301      	movs	r3, #1
 810dbe0:	627b      	str	r3, [r7, #36]	; 0x24
    hspi->Reload.Requested = 0UL;
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_HSPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 810dbe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810dbe4:	2b00      	cmp	r3, #0
 810dbe6:	f040 8171 	bne.w	810decc <HAL_SPI_IRQHandler+0x3ac>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 810dbea:	69bb      	ldr	r3, [r7, #24]
 810dbec:	f003 0308 	and.w	r3, r3, #8
 810dbf0:	2b00      	cmp	r3, #0
 810dbf2:	f000 80a0 	beq.w	810dd36 <HAL_SPI_IRQHandler+0x216>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 810dbf6:	687b      	ldr	r3, [r7, #4]
 810dbf8:	681b      	ldr	r3, [r3, #0]
 810dbfa:	699a      	ldr	r2, [r3, #24]
 810dbfc:	687b      	ldr	r3, [r7, #4]
 810dbfe:	681b      	ldr	r3, [r3, #0]
 810dc00:	f042 0208 	orr.w	r2, r2, #8
 810dc04:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 810dc06:	687b      	ldr	r3, [r7, #4]
 810dc08:	681b      	ldr	r3, [r3, #0]
 810dc0a:	699a      	ldr	r2, [r3, #24]
 810dc0c:	687b      	ldr	r3, [r7, #4]
 810dc0e:	681b      	ldr	r3, [r3, #0]
 810dc10:	f042 0210 	orr.w	r2, r2, #16
 810dc14:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 810dc16:	687b      	ldr	r3, [r7, #4]
 810dc18:	681b      	ldr	r3, [r3, #0]
 810dc1a:	699a      	ldr	r2, [r3, #24]
 810dc1c:	687b      	ldr	r3, [r7, #4]
 810dc1e:	681b      	ldr	r3, [r3, #0]
 810dc20:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 810dc24:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 810dc26:	687b      	ldr	r3, [r7, #4]
 810dc28:	681b      	ldr	r3, [r3, #0]
 810dc2a:	691a      	ldr	r2, [r3, #16]
 810dc2c:	687b      	ldr	r3, [r7, #4]
 810dc2e:	681b      	ldr	r3, [r3, #0]
 810dc30:	f022 0208 	bic.w	r2, r2, #8
 810dc34:	611a      	str	r2, [r3, #16]

    /* DMA Normal Mode */
    if (HAL_IS_BIT_CLR(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN) ||                    // IT based transfer is done
 810dc36:	697b      	ldr	r3, [r7, #20]
 810dc38:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 810dc3c:	2b00      	cmp	r3, #0
 810dc3e:	d00f      	beq.n	810dc60 <HAL_SPI_IRQHandler+0x140>
 810dc40:	7cfb      	ldrb	r3, [r7, #19]
 810dc42:	2b04      	cmp	r3, #4
 810dc44:	d004      	beq.n	810dc50 <HAL_SPI_IRQHandler+0x130>
      ((State != HAL_SPI_STATE_BUSY_RX) && (hspi->hdmatx->Init.Mode == DMA_NORMAL)) ||  // DMA is used in normal mode
 810dc46:	687b      	ldr	r3, [r7, #4]
 810dc48:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810dc4a:	69db      	ldr	r3, [r3, #28]
 810dc4c:	2b00      	cmp	r3, #0
 810dc4e:	d007      	beq.n	810dc60 <HAL_SPI_IRQHandler+0x140>
 810dc50:	7cfb      	ldrb	r3, [r7, #19]
 810dc52:	2b03      	cmp	r3, #3
 810dc54:	d059      	beq.n	810dd0a <HAL_SPI_IRQHandler+0x1ea>
      ((State != HAL_SPI_STATE_BUSY_TX) && (hspi->hdmarx->Init.Mode == DMA_NORMAL)))    // DMA is used in normal mode
 810dc56:	687b      	ldr	r3, [r7, #4]
 810dc58:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810dc5a:	69db      	ldr	r3, [r3, #28]
 810dc5c:	2b00      	cmp	r3, #0
 810dc5e:	d154      	bne.n	810dd0a <HAL_SPI_IRQHandler+0x1ea>
    {
      /* For the IT based receive extra polling maybe required for last packet */
      if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 810dc60:	687b      	ldr	r3, [r7, #4]
 810dc62:	681b      	ldr	r3, [r3, #0]
 810dc64:	689b      	ldr	r3, [r3, #8]
 810dc66:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 810dc6a:	2b00      	cmp	r3, #0
 810dc6c:	d13d      	bne.n	810dcea <HAL_SPI_IRQHandler+0x1ca>
      {
        /* Pooling remaining data */
        while (hspi->RxXferCount != 0UL)
 810dc6e:	e036      	b.n	810dcde <HAL_SPI_IRQHandler+0x1be>
        {
          /* Receive data in 32 Bit mode */
          if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 810dc70:	687b      	ldr	r3, [r7, #4]
 810dc72:	68db      	ldr	r3, [r3, #12]
 810dc74:	2b0f      	cmp	r3, #15
 810dc76:	d90b      	bls.n	810dc90 <HAL_SPI_IRQHandler+0x170>
          {
            *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 810dc78:	687b      	ldr	r3, [r7, #4]
 810dc7a:	681a      	ldr	r2, [r3, #0]
 810dc7c:	687b      	ldr	r3, [r7, #4]
 810dc7e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810dc80:	6b12      	ldr	r2, [r2, #48]	; 0x30
 810dc82:	601a      	str	r2, [r3, #0]
            hspi->pRxBuffPtr += sizeof(uint32_t);
 810dc84:	687b      	ldr	r3, [r7, #4]
 810dc86:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810dc88:	1d1a      	adds	r2, r3, #4
 810dc8a:	687b      	ldr	r3, [r7, #4]
 810dc8c:	665a      	str	r2, [r3, #100]	; 0x64
 810dc8e:	e01d      	b.n	810dccc <HAL_SPI_IRQHandler+0x1ac>
          }
          /* Receive data in 16 Bit mode */
          else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 810dc90:	687b      	ldr	r3, [r7, #4]
 810dc92:	68db      	ldr	r3, [r3, #12]
 810dc94:	2b07      	cmp	r3, #7
 810dc96:	d90b      	bls.n	810dcb0 <HAL_SPI_IRQHandler+0x190>
          {
#if defined (__GNUC__)
            *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 810dc98:	687b      	ldr	r3, [r7, #4]
 810dc9a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810dc9c:	68fa      	ldr	r2, [r7, #12]
 810dc9e:	8812      	ldrh	r2, [r2, #0]
 810dca0:	b292      	uxth	r2, r2
 810dca2:	801a      	strh	r2, [r3, #0]
#else
            *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
            hspi->pRxBuffPtr += sizeof(uint16_t);
 810dca4:	687b      	ldr	r3, [r7, #4]
 810dca6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810dca8:	1c9a      	adds	r2, r3, #2
 810dcaa:	687b      	ldr	r3, [r7, #4]
 810dcac:	665a      	str	r2, [r3, #100]	; 0x64
 810dcae:	e00d      	b.n	810dccc <HAL_SPI_IRQHandler+0x1ac>
          }
          /* Receive data in 8 Bit mode */
          else
          {
            *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 810dcb0:	687b      	ldr	r3, [r7, #4]
 810dcb2:	681b      	ldr	r3, [r3, #0]
 810dcb4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 810dcb8:	687b      	ldr	r3, [r7, #4]
 810dcba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810dcbc:	7812      	ldrb	r2, [r2, #0]
 810dcbe:	b2d2      	uxtb	r2, r2
 810dcc0:	701a      	strb	r2, [r3, #0]
            hspi->pRxBuffPtr += sizeof(uint8_t);
 810dcc2:	687b      	ldr	r3, [r7, #4]
 810dcc4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810dcc6:	1c5a      	adds	r2, r3, #1
 810dcc8:	687b      	ldr	r3, [r7, #4]
 810dcca:	665a      	str	r2, [r3, #100]	; 0x64
          }

          hspi->RxXferCount--;
 810dccc:	687b      	ldr	r3, [r7, #4]
 810dcce:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 810dcd2:	b29b      	uxth	r3, r3
 810dcd4:	3b01      	subs	r3, #1
 810dcd6:	b29a      	uxth	r2, r3
 810dcd8:	687b      	ldr	r3, [r7, #4]
 810dcda:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        while (hspi->RxXferCount != 0UL)
 810dcde:	687b      	ldr	r3, [r7, #4]
 810dce0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 810dce4:	b29b      	uxth	r3, r3
 810dce6:	2b00      	cmp	r3, #0
 810dce8:	d1c2      	bne.n	810dc70 <HAL_SPI_IRQHandler+0x150>
        }
      }

      /* Call SPI Standard close procedure */
      SPI_CloseTransfer(hspi);
 810dcea:	6878      	ldr	r0, [r7, #4]
 810dcec:	f000 f930 	bl	810df50 <SPI_CloseTransfer>

      hspi->State = HAL_SPI_STATE_READY;
 810dcf0:	687b      	ldr	r3, [r7, #4]
 810dcf2:	2201      	movs	r2, #1
 810dcf4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
      if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 810dcf8:	687b      	ldr	r3, [r7, #4]
 810dcfa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810dcfe:	2b00      	cmp	r3, #0
 810dd00:	d003      	beq.n	810dd0a <HAL_SPI_IRQHandler+0x1ea>
      {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 810dd02:	6878      	ldr	r0, [r7, #4]
 810dd04:	f000 f900 	bl	810df08 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
        return;
 810dd08:	e0e5      	b.n	810ded6 <HAL_SPI_IRQHandler+0x3b6>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 810dd0a:	7cfb      	ldrb	r3, [r7, #19]
 810dd0c:	2b05      	cmp	r3, #5
 810dd0e:	d103      	bne.n	810dd18 <HAL_SPI_IRQHandler+0x1f8>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 810dd10:	6878      	ldr	r0, [r7, #4]
 810dd12:	f7f3 fa65 	bl	81011e0 <HAL_SPI_TxRxCpltCallback>
	else
    {
      /* End of the appropriate call */
    }

    return;
 810dd16:	e0db      	b.n	810ded0 <HAL_SPI_IRQHandler+0x3b0>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 810dd18:	7cfb      	ldrb	r3, [r7, #19]
 810dd1a:	2b04      	cmp	r3, #4
 810dd1c:	d103      	bne.n	810dd26 <HAL_SPI_IRQHandler+0x206>
      HAL_SPI_RxCpltCallback(hspi);
 810dd1e:	6878      	ldr	r0, [r7, #4]
 810dd20:	f000 f8e8 	bl	810def4 <HAL_SPI_RxCpltCallback>
    return;
 810dd24:	e0d4      	b.n	810ded0 <HAL_SPI_IRQHandler+0x3b0>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 810dd26:	7cfb      	ldrb	r3, [r7, #19]
 810dd28:	2b03      	cmp	r3, #3
 810dd2a:	f040 80d1 	bne.w	810ded0 <HAL_SPI_IRQHandler+0x3b0>
      HAL_SPI_TxCpltCallback(hspi);
 810dd2e:	6878      	ldr	r0, [r7, #4]
 810dd30:	f000 f8d6 	bl	810dee0 <HAL_SPI_TxCpltCallback>
    return;
 810dd34:	e0cc      	b.n	810ded0 <HAL_SPI_IRQHandler+0x3b0>
  }

  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 810dd36:	69fb      	ldr	r3, [r7, #28]
 810dd38:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 810dd3c:	2b00      	cmp	r3, #0
 810dd3e:	d00d      	beq.n	810dd5c <HAL_SPI_IRQHandler+0x23c>
 810dd40:	6a3b      	ldr	r3, [r7, #32]
 810dd42:	f003 0308 	and.w	r3, r3, #8
 810dd46:	2b00      	cmp	r3, #0
 810dd48:	d008      	beq.n	810dd5c <HAL_SPI_IRQHandler+0x23c>
  {
    /* Abort on going, clear SUSP flag to avoid infinite looping */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 810dd4a:	687b      	ldr	r3, [r7, #4]
 810dd4c:	681b      	ldr	r3, [r3, #0]
 810dd4e:	699a      	ldr	r2, [r3, #24]
 810dd50:	687b      	ldr	r3, [r7, #4]
 810dd52:	681b      	ldr	r3, [r3, #0]
 810dd54:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 810dd58:	619a      	str	r2, [r3, #24]

    return;
 810dd5a:	e0bc      	b.n	810ded6 <HAL_SPI_IRQHandler+0x3b6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 810dd5c:	69bb      	ldr	r3, [r7, #24]
 810dd5e:	f403 7358 	and.w	r3, r3, #864	; 0x360
 810dd62:	2b00      	cmp	r3, #0
 810dd64:	f000 80b7 	beq.w	810ded6 <HAL_SPI_IRQHandler+0x3b6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 810dd68:	69bb      	ldr	r3, [r7, #24]
 810dd6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 810dd6e:	2b00      	cmp	r3, #0
 810dd70:	d00f      	beq.n	810dd92 <HAL_SPI_IRQHandler+0x272>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 810dd72:	687b      	ldr	r3, [r7, #4]
 810dd74:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810dd78:	f043 0204 	orr.w	r2, r3, #4
 810dd7c:	687b      	ldr	r3, [r7, #4]
 810dd7e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 810dd82:	687b      	ldr	r3, [r7, #4]
 810dd84:	681b      	ldr	r3, [r3, #0]
 810dd86:	699a      	ldr	r2, [r3, #24]
 810dd88:	687b      	ldr	r3, [r7, #4]
 810dd8a:	681b      	ldr	r3, [r3, #0]
 810dd8c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 810dd90:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 810dd92:	69bb      	ldr	r3, [r7, #24]
 810dd94:	f403 7300 	and.w	r3, r3, #512	; 0x200
 810dd98:	2b00      	cmp	r3, #0
 810dd9a:	d00f      	beq.n	810ddbc <HAL_SPI_IRQHandler+0x29c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 810dd9c:	687b      	ldr	r3, [r7, #4]
 810dd9e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810dda2:	f043 0201 	orr.w	r2, r3, #1
 810dda6:	687b      	ldr	r3, [r7, #4]
 810dda8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 810ddac:	687b      	ldr	r3, [r7, #4]
 810ddae:	681b      	ldr	r3, [r3, #0]
 810ddb0:	699a      	ldr	r2, [r3, #24]
 810ddb2:	687b      	ldr	r3, [r7, #4]
 810ddb4:	681b      	ldr	r3, [r3, #0]
 810ddb6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 810ddba:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 810ddbc:	69bb      	ldr	r3, [r7, #24]
 810ddbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 810ddc2:	2b00      	cmp	r3, #0
 810ddc4:	d00f      	beq.n	810dde6 <HAL_SPI_IRQHandler+0x2c6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 810ddc6:	687b      	ldr	r3, [r7, #4]
 810ddc8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810ddcc:	f043 0208 	orr.w	r2, r3, #8
 810ddd0:	687b      	ldr	r3, [r7, #4]
 810ddd2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 810ddd6:	687b      	ldr	r3, [r7, #4]
 810ddd8:	681b      	ldr	r3, [r3, #0]
 810ddda:	699a      	ldr	r2, [r3, #24]
 810dddc:	687b      	ldr	r3, [r7, #4]
 810ddde:	681b      	ldr	r3, [r3, #0]
 810dde0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 810dde4:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 810dde6:	69bb      	ldr	r3, [r7, #24]
 810dde8:	f003 0320 	and.w	r3, r3, #32
 810ddec:	2b00      	cmp	r3, #0
 810ddee:	d00f      	beq.n	810de10 <HAL_SPI_IRQHandler+0x2f0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 810ddf0:	687b      	ldr	r3, [r7, #4]
 810ddf2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810ddf6:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 810ddfa:	687b      	ldr	r3, [r7, #4]
 810ddfc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 810de00:	687b      	ldr	r3, [r7, #4]
 810de02:	681b      	ldr	r3, [r3, #0]
 810de04:	699a      	ldr	r2, [r3, #24]
 810de06:	687b      	ldr	r3, [r7, #4]
 810de08:	681b      	ldr	r3, [r3, #0]
 810de0a:	f042 0220 	orr.w	r2, r2, #32
 810de0e:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 810de10:	687b      	ldr	r3, [r7, #4]
 810de12:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810de16:	2b00      	cmp	r3, #0
 810de18:	d05c      	beq.n	810ded4 <HAL_SPI_IRQHandler+0x3b4>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 810de1a:	687b      	ldr	r3, [r7, #4]
 810de1c:	681b      	ldr	r3, [r3, #0]
 810de1e:	681a      	ldr	r2, [r3, #0]
 810de20:	687b      	ldr	r3, [r7, #4]
 810de22:	681b      	ldr	r3, [r3, #0]
 810de24:	f022 0201 	bic.w	r2, r2, #1
 810de28:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR);
 810de2a:	687b      	ldr	r3, [r7, #4]
 810de2c:	681b      	ldr	r3, [r3, #0]
 810de2e:	691b      	ldr	r3, [r3, #16]
 810de30:	687a      	ldr	r2, [r7, #4]
 810de32:	6812      	ldr	r2, [r2, #0]
 810de34:	f423 735a 	bic.w	r3, r3, #872	; 0x368
 810de38:	f023 0303 	bic.w	r3, r3, #3
 810de3c:	6113      	str	r3, [r2, #16]

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 810de3e:	697b      	ldr	r3, [r7, #20]
 810de40:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 810de44:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 810de48:	d138      	bne.n	810debc <HAL_SPI_IRQHandler+0x39c>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 810de4a:	687b      	ldr	r3, [r7, #4]
 810de4c:	681b      	ldr	r3, [r3, #0]
 810de4e:	689a      	ldr	r2, [r3, #8]
 810de50:	687b      	ldr	r3, [r7, #4]
 810de52:	681b      	ldr	r3, [r3, #0]
 810de54:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 810de58:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 810de5a:	687b      	ldr	r3, [r7, #4]
 810de5c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810de5e:	2b00      	cmp	r3, #0
 810de60:	d013      	beq.n	810de8a <HAL_SPI_IRQHandler+0x36a>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 810de62:	687b      	ldr	r3, [r7, #4]
 810de64:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810de66:	4a1d      	ldr	r2, [pc, #116]	; (810dedc <HAL_SPI_IRQHandler+0x3bc>)
 810de68:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 810de6a:	687b      	ldr	r3, [r7, #4]
 810de6c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810de6e:	4618      	mov	r0, r3
 810de70:	f7f7 fb30 	bl	81054d4 <HAL_DMA_Abort_IT>
 810de74:	4603      	mov	r3, r0
 810de76:	2b00      	cmp	r3, #0
 810de78:	d007      	beq.n	810de8a <HAL_SPI_IRQHandler+0x36a>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 810de7a:	687b      	ldr	r3, [r7, #4]
 810de7c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810de80:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 810de84:	687b      	ldr	r3, [r7, #4]
 810de86:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 810de8a:	687b      	ldr	r3, [r7, #4]
 810de8c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810de8e:	2b00      	cmp	r3, #0
 810de90:	d020      	beq.n	810ded4 <HAL_SPI_IRQHandler+0x3b4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 810de92:	687b      	ldr	r3, [r7, #4]
 810de94:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810de96:	4a11      	ldr	r2, [pc, #68]	; (810dedc <HAL_SPI_IRQHandler+0x3bc>)
 810de98:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 810de9a:	687b      	ldr	r3, [r7, #4]
 810de9c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810de9e:	4618      	mov	r0, r3
 810dea0:	f7f7 fb18 	bl	81054d4 <HAL_DMA_Abort_IT>
 810dea4:	4603      	mov	r3, r0
 810dea6:	2b00      	cmp	r3, #0
 810dea8:	d014      	beq.n	810ded4 <HAL_SPI_IRQHandler+0x3b4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 810deaa:	687b      	ldr	r3, [r7, #4]
 810deac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810deb0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 810deb4:	687b      	ldr	r3, [r7, #4]
 810deb6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 810deba:	e00b      	b.n	810ded4 <HAL_SPI_IRQHandler+0x3b4>
        hspi->State = HAL_SPI_STATE_READY;
 810debc:	687b      	ldr	r3, [r7, #4]
 810debe:	2201      	movs	r2, #1
 810dec0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        HAL_SPI_ErrorCallback(hspi);
 810dec4:	6878      	ldr	r0, [r7, #4]
 810dec6:	f000 f81f 	bl	810df08 <HAL_SPI_ErrorCallback>
    return;
 810deca:	e003      	b.n	810ded4 <HAL_SPI_IRQHandler+0x3b4>
    return;
 810decc:	bf00      	nop
 810dece:	e002      	b.n	810ded6 <HAL_SPI_IRQHandler+0x3b6>
    return;
 810ded0:	bf00      	nop
 810ded2:	e000      	b.n	810ded6 <HAL_SPI_IRQHandler+0x3b6>
    return;
 810ded4:	bf00      	nop
  }
}
 810ded6:	3728      	adds	r7, #40	; 0x28
 810ded8:	46bd      	mov	sp, r7
 810deda:	bd80      	pop	{r7, pc}
 810dedc:	0810df1d 	.word	0x0810df1d

0810dee0 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 810dee0:	b480      	push	{r7}
 810dee2:	b083      	sub	sp, #12
 810dee4:	af00      	add	r7, sp, #0
 810dee6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 810dee8:	bf00      	nop
 810deea:	370c      	adds	r7, #12
 810deec:	46bd      	mov	sp, r7
 810deee:	f85d 7b04 	ldr.w	r7, [sp], #4
 810def2:	4770      	bx	lr

0810def4 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 810def4:	b480      	push	{r7}
 810def6:	b083      	sub	sp, #12
 810def8:	af00      	add	r7, sp, #0
 810defa:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 810defc:	bf00      	nop
 810defe:	370c      	adds	r7, #12
 810df00:	46bd      	mov	sp, r7
 810df02:	f85d 7b04 	ldr.w	r7, [sp], #4
 810df06:	4770      	bx	lr

0810df08 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 810df08:	b480      	push	{r7}
 810df0a:	b083      	sub	sp, #12
 810df0c:	af00      	add	r7, sp, #0
 810df0e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 810df10:	bf00      	nop
 810df12:	370c      	adds	r7, #12
 810df14:	46bd      	mov	sp, r7
 810df16:	f85d 7b04 	ldr.w	r7, [sp], #4
 810df1a:	4770      	bx	lr

0810df1c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 810df1c:	b580      	push	{r7, lr}
 810df1e:	b084      	sub	sp, #16
 810df20:	af00      	add	r7, sp, #0
 810df22:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 810df24:	687b      	ldr	r3, [r7, #4]
 810df26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810df28:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 810df2a:	68fb      	ldr	r3, [r7, #12]
 810df2c:	2200      	movs	r2, #0
 810df2e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 810df32:	68fb      	ldr	r3, [r7, #12]
 810df34:	2200      	movs	r2, #0
 810df36:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 810df3a:	68fb      	ldr	r3, [r7, #12]
 810df3c:	2201      	movs	r2, #1
 810df3e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 810df42:	68f8      	ldr	r0, [r7, #12]
 810df44:	f7ff ffe0 	bl	810df08 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 810df48:	bf00      	nop
 810df4a:	3710      	adds	r7, #16
 810df4c:	46bd      	mov	sp, r7
 810df4e:	bd80      	pop	{r7, pc}

0810df50 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
*         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 810df50:	b480      	push	{r7}
 810df52:	b085      	sub	sp, #20
 810df54:	af00      	add	r7, sp, #0
 810df56:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 810df58:	687b      	ldr	r3, [r7, #4]
 810df5a:	681b      	ldr	r3, [r3, #0]
 810df5c:	695b      	ldr	r3, [r3, #20]
 810df5e:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 810df60:	687b      	ldr	r3, [r7, #4]
 810df62:	681b      	ldr	r3, [r3, #0]
 810df64:	699a      	ldr	r2, [r3, #24]
 810df66:	687b      	ldr	r3, [r7, #4]
 810df68:	681b      	ldr	r3, [r3, #0]
 810df6a:	f042 0208 	orr.w	r2, r2, #8
 810df6e:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 810df70:	687b      	ldr	r3, [r7, #4]
 810df72:	681b      	ldr	r3, [r3, #0]
 810df74:	699a      	ldr	r2, [r3, #24]
 810df76:	687b      	ldr	r3, [r7, #4]
 810df78:	681b      	ldr	r3, [r3, #0]
 810df7a:	f042 0210 	orr.w	r2, r2, #16
 810df7e:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 810df80:	687b      	ldr	r3, [r7, #4]
 810df82:	681b      	ldr	r3, [r3, #0]
 810df84:	681a      	ldr	r2, [r3, #0]
 810df86:	687b      	ldr	r3, [r7, #4]
 810df88:	681b      	ldr	r3, [r3, #0]
 810df8a:	f022 0201 	bic.w	r2, r2, #1
 810df8e:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 810df90:	687b      	ldr	r3, [r7, #4]
 810df92:	681b      	ldr	r3, [r3, #0]
 810df94:	691b      	ldr	r3, [r3, #16]
 810df96:	687a      	ldr	r2, [r7, #4]
 810df98:	6812      	ldr	r2, [r2, #0]
 810df9a:	f423 735b 	bic.w	r3, r3, #876	; 0x36c
 810df9e:	f023 0303 	bic.w	r3, r3, #3
 810dfa2:	6113      	str	r3, [r2, #16]

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 810dfa4:	687b      	ldr	r3, [r7, #4]
 810dfa6:	681b      	ldr	r3, [r3, #0]
 810dfa8:	689a      	ldr	r2, [r3, #8]
 810dfaa:	687b      	ldr	r3, [r7, #4]
 810dfac:	681b      	ldr	r3, [r3, #0]
 810dfae:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 810dfb2:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 810dfb4:	687b      	ldr	r3, [r7, #4]
 810dfb6:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 810dfba:	b2db      	uxtb	r3, r3
 810dfbc:	2b04      	cmp	r3, #4
 810dfbe:	d014      	beq.n	810dfea <SPI_CloseTransfer+0x9a>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 810dfc0:	68fb      	ldr	r3, [r7, #12]
 810dfc2:	f003 0320 	and.w	r3, r3, #32
 810dfc6:	2b00      	cmp	r3, #0
 810dfc8:	d00f      	beq.n	810dfea <SPI_CloseTransfer+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 810dfca:	687b      	ldr	r3, [r7, #4]
 810dfcc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810dfd0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 810dfd4:	687b      	ldr	r3, [r7, #4]
 810dfd6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 810dfda:	687b      	ldr	r3, [r7, #4]
 810dfdc:	681b      	ldr	r3, [r3, #0]
 810dfde:	699a      	ldr	r2, [r3, #24]
 810dfe0:	687b      	ldr	r3, [r7, #4]
 810dfe2:	681b      	ldr	r3, [r3, #0]
 810dfe4:	f042 0220 	orr.w	r2, r2, #32
 810dfe8:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 810dfea:	687b      	ldr	r3, [r7, #4]
 810dfec:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 810dff0:	b2db      	uxtb	r3, r3
 810dff2:	2b03      	cmp	r3, #3
 810dff4:	d014      	beq.n	810e020 <SPI_CloseTransfer+0xd0>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 810dff6:	68fb      	ldr	r3, [r7, #12]
 810dff8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 810dffc:	2b00      	cmp	r3, #0
 810dffe:	d00f      	beq.n	810e020 <SPI_CloseTransfer+0xd0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 810e000:	687b      	ldr	r3, [r7, #4]
 810e002:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810e006:	f043 0204 	orr.w	r2, r3, #4
 810e00a:	687b      	ldr	r3, [r7, #4]
 810e00c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 810e010:	687b      	ldr	r3, [r7, #4]
 810e012:	681b      	ldr	r3, [r3, #0]
 810e014:	699a      	ldr	r2, [r3, #24]
 810e016:	687b      	ldr	r3, [r7, #4]
 810e018:	681b      	ldr	r3, [r3, #0]
 810e01a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 810e01e:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 810e020:	68fb      	ldr	r3, [r7, #12]
 810e022:	f403 7300 	and.w	r3, r3, #512	; 0x200
 810e026:	2b00      	cmp	r3, #0
 810e028:	d00f      	beq.n	810e04a <SPI_CloseTransfer+0xfa>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 810e02a:	687b      	ldr	r3, [r7, #4]
 810e02c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810e030:	f043 0201 	orr.w	r2, r3, #1
 810e034:	687b      	ldr	r3, [r7, #4]
 810e036:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 810e03a:	687b      	ldr	r3, [r7, #4]
 810e03c:	681b      	ldr	r3, [r3, #0]
 810e03e:	699a      	ldr	r2, [r3, #24]
 810e040:	687b      	ldr	r3, [r7, #4]
 810e042:	681b      	ldr	r3, [r3, #0]
 810e044:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 810e048:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 810e04a:	68fb      	ldr	r3, [r7, #12]
 810e04c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 810e050:	2b00      	cmp	r3, #0
 810e052:	d00f      	beq.n	810e074 <SPI_CloseTransfer+0x124>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 810e054:	687b      	ldr	r3, [r7, #4]
 810e056:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810e05a:	f043 0208 	orr.w	r2, r3, #8
 810e05e:	687b      	ldr	r3, [r7, #4]
 810e060:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 810e064:	687b      	ldr	r3, [r7, #4]
 810e066:	681b      	ldr	r3, [r3, #0]
 810e068:	699a      	ldr	r2, [r3, #24]
 810e06a:	687b      	ldr	r3, [r7, #4]
 810e06c:	681b      	ldr	r3, [r3, #0]
 810e06e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 810e072:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 810e074:	687b      	ldr	r3, [r7, #4]
 810e076:	2200      	movs	r2, #0
 810e078:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 810e07c:	687b      	ldr	r3, [r7, #4]
 810e07e:	2200      	movs	r2, #0
 810e080:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 810e084:	bf00      	nop
 810e086:	3714      	adds	r7, #20
 810e088:	46bd      	mov	sp, r7
 810e08a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810e08e:	4770      	bx	lr

0810e090 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 810e090:	b480      	push	{r7}
 810e092:	b085      	sub	sp, #20
 810e094:	af00      	add	r7, sp, #0
 810e096:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 810e098:	687b      	ldr	r3, [r7, #4]
 810e09a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810e09c:	095b      	lsrs	r3, r3, #5
 810e09e:	3301      	adds	r3, #1
 810e0a0:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 810e0a2:	687b      	ldr	r3, [r7, #4]
 810e0a4:	68db      	ldr	r3, [r3, #12]
 810e0a6:	3301      	adds	r3, #1
 810e0a8:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 810e0aa:	68bb      	ldr	r3, [r7, #8]
 810e0ac:	3307      	adds	r3, #7
 810e0ae:	08db      	lsrs	r3, r3, #3
 810e0b0:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 810e0b2:	68bb      	ldr	r3, [r7, #8]
 810e0b4:	68fa      	ldr	r2, [r7, #12]
 810e0b6:	fb02 f303 	mul.w	r3, r2, r3
}
 810e0ba:	4618      	mov	r0, r3
 810e0bc:	3714      	adds	r7, #20
 810e0be:	46bd      	mov	sp, r7
 810e0c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 810e0c4:	4770      	bx	lr

0810e0c6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 810e0c6:	b580      	push	{r7, lr}
 810e0c8:	b082      	sub	sp, #8
 810e0ca:	af00      	add	r7, sp, #0
 810e0cc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 810e0ce:	687b      	ldr	r3, [r7, #4]
 810e0d0:	2b00      	cmp	r3, #0
 810e0d2:	d101      	bne.n	810e0d8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 810e0d4:	2301      	movs	r3, #1
 810e0d6:	e049      	b.n	810e16c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 810e0d8:	687b      	ldr	r3, [r7, #4]
 810e0da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 810e0de:	b2db      	uxtb	r3, r3
 810e0e0:	2b00      	cmp	r3, #0
 810e0e2:	d106      	bne.n	810e0f2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 810e0e4:	687b      	ldr	r3, [r7, #4]
 810e0e6:	2200      	movs	r2, #0
 810e0e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 810e0ec:	6878      	ldr	r0, [r7, #4]
 810e0ee:	f7f4 fa1d 	bl	810252c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 810e0f2:	687b      	ldr	r3, [r7, #4]
 810e0f4:	2202      	movs	r2, #2
 810e0f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 810e0fa:	687b      	ldr	r3, [r7, #4]
 810e0fc:	681a      	ldr	r2, [r3, #0]
 810e0fe:	687b      	ldr	r3, [r7, #4]
 810e100:	3304      	adds	r3, #4
 810e102:	4619      	mov	r1, r3
 810e104:	4610      	mov	r0, r2
 810e106:	f000 fc51 	bl	810e9ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 810e10a:	687b      	ldr	r3, [r7, #4]
 810e10c:	2201      	movs	r2, #1
 810e10e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 810e112:	687b      	ldr	r3, [r7, #4]
 810e114:	2201      	movs	r2, #1
 810e116:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 810e11a:	687b      	ldr	r3, [r7, #4]
 810e11c:	2201      	movs	r2, #1
 810e11e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 810e122:	687b      	ldr	r3, [r7, #4]
 810e124:	2201      	movs	r2, #1
 810e126:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 810e12a:	687b      	ldr	r3, [r7, #4]
 810e12c:	2201      	movs	r2, #1
 810e12e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 810e132:	687b      	ldr	r3, [r7, #4]
 810e134:	2201      	movs	r2, #1
 810e136:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 810e13a:	687b      	ldr	r3, [r7, #4]
 810e13c:	2201      	movs	r2, #1
 810e13e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 810e142:	687b      	ldr	r3, [r7, #4]
 810e144:	2201      	movs	r2, #1
 810e146:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 810e14a:	687b      	ldr	r3, [r7, #4]
 810e14c:	2201      	movs	r2, #1
 810e14e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 810e152:	687b      	ldr	r3, [r7, #4]
 810e154:	2201      	movs	r2, #1
 810e156:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 810e15a:	687b      	ldr	r3, [r7, #4]
 810e15c:	2201      	movs	r2, #1
 810e15e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 810e162:	687b      	ldr	r3, [r7, #4]
 810e164:	2201      	movs	r2, #1
 810e166:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 810e16a:	2300      	movs	r3, #0
}
 810e16c:	4618      	mov	r0, r3
 810e16e:	3708      	adds	r7, #8
 810e170:	46bd      	mov	sp, r7
 810e172:	bd80      	pop	{r7, pc}

0810e174 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 810e174:	b480      	push	{r7}
 810e176:	b085      	sub	sp, #20
 810e178:	af00      	add	r7, sp, #0
 810e17a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 810e17c:	687b      	ldr	r3, [r7, #4]
 810e17e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 810e182:	b2db      	uxtb	r3, r3
 810e184:	2b01      	cmp	r3, #1
 810e186:	d001      	beq.n	810e18c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 810e188:	2301      	movs	r3, #1
 810e18a:	e04f      	b.n	810e22c <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 810e18c:	687b      	ldr	r3, [r7, #4]
 810e18e:	2202      	movs	r2, #2
 810e190:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 810e194:	687b      	ldr	r3, [r7, #4]
 810e196:	681b      	ldr	r3, [r3, #0]
 810e198:	68da      	ldr	r2, [r3, #12]
 810e19a:	687b      	ldr	r3, [r7, #4]
 810e19c:	681b      	ldr	r3, [r3, #0]
 810e19e:	f042 0201 	orr.w	r2, r2, #1
 810e1a2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 810e1a4:	687b      	ldr	r3, [r7, #4]
 810e1a6:	681b      	ldr	r3, [r3, #0]
 810e1a8:	4a23      	ldr	r2, [pc, #140]	; (810e238 <HAL_TIM_Base_Start_IT+0xc4>)
 810e1aa:	4293      	cmp	r3, r2
 810e1ac:	d01d      	beq.n	810e1ea <HAL_TIM_Base_Start_IT+0x76>
 810e1ae:	687b      	ldr	r3, [r7, #4]
 810e1b0:	681b      	ldr	r3, [r3, #0]
 810e1b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 810e1b6:	d018      	beq.n	810e1ea <HAL_TIM_Base_Start_IT+0x76>
 810e1b8:	687b      	ldr	r3, [r7, #4]
 810e1ba:	681b      	ldr	r3, [r3, #0]
 810e1bc:	4a1f      	ldr	r2, [pc, #124]	; (810e23c <HAL_TIM_Base_Start_IT+0xc8>)
 810e1be:	4293      	cmp	r3, r2
 810e1c0:	d013      	beq.n	810e1ea <HAL_TIM_Base_Start_IT+0x76>
 810e1c2:	687b      	ldr	r3, [r7, #4]
 810e1c4:	681b      	ldr	r3, [r3, #0]
 810e1c6:	4a1e      	ldr	r2, [pc, #120]	; (810e240 <HAL_TIM_Base_Start_IT+0xcc>)
 810e1c8:	4293      	cmp	r3, r2
 810e1ca:	d00e      	beq.n	810e1ea <HAL_TIM_Base_Start_IT+0x76>
 810e1cc:	687b      	ldr	r3, [r7, #4]
 810e1ce:	681b      	ldr	r3, [r3, #0]
 810e1d0:	4a1c      	ldr	r2, [pc, #112]	; (810e244 <HAL_TIM_Base_Start_IT+0xd0>)
 810e1d2:	4293      	cmp	r3, r2
 810e1d4:	d009      	beq.n	810e1ea <HAL_TIM_Base_Start_IT+0x76>
 810e1d6:	687b      	ldr	r3, [r7, #4]
 810e1d8:	681b      	ldr	r3, [r3, #0]
 810e1da:	4a1b      	ldr	r2, [pc, #108]	; (810e248 <HAL_TIM_Base_Start_IT+0xd4>)
 810e1dc:	4293      	cmp	r3, r2
 810e1de:	d004      	beq.n	810e1ea <HAL_TIM_Base_Start_IT+0x76>
 810e1e0:	687b      	ldr	r3, [r7, #4]
 810e1e2:	681b      	ldr	r3, [r3, #0]
 810e1e4:	4a19      	ldr	r2, [pc, #100]	; (810e24c <HAL_TIM_Base_Start_IT+0xd8>)
 810e1e6:	4293      	cmp	r3, r2
 810e1e8:	d115      	bne.n	810e216 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 810e1ea:	687b      	ldr	r3, [r7, #4]
 810e1ec:	681b      	ldr	r3, [r3, #0]
 810e1ee:	689a      	ldr	r2, [r3, #8]
 810e1f0:	4b17      	ldr	r3, [pc, #92]	; (810e250 <HAL_TIM_Base_Start_IT+0xdc>)
 810e1f2:	4013      	ands	r3, r2
 810e1f4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 810e1f6:	68fb      	ldr	r3, [r7, #12]
 810e1f8:	2b06      	cmp	r3, #6
 810e1fa:	d015      	beq.n	810e228 <HAL_TIM_Base_Start_IT+0xb4>
 810e1fc:	68fb      	ldr	r3, [r7, #12]
 810e1fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 810e202:	d011      	beq.n	810e228 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 810e204:	687b      	ldr	r3, [r7, #4]
 810e206:	681b      	ldr	r3, [r3, #0]
 810e208:	681a      	ldr	r2, [r3, #0]
 810e20a:	687b      	ldr	r3, [r7, #4]
 810e20c:	681b      	ldr	r3, [r3, #0]
 810e20e:	f042 0201 	orr.w	r2, r2, #1
 810e212:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 810e214:	e008      	b.n	810e228 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 810e216:	687b      	ldr	r3, [r7, #4]
 810e218:	681b      	ldr	r3, [r3, #0]
 810e21a:	681a      	ldr	r2, [r3, #0]
 810e21c:	687b      	ldr	r3, [r7, #4]
 810e21e:	681b      	ldr	r3, [r3, #0]
 810e220:	f042 0201 	orr.w	r2, r2, #1
 810e224:	601a      	str	r2, [r3, #0]
 810e226:	e000      	b.n	810e22a <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 810e228:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 810e22a:	2300      	movs	r3, #0
}
 810e22c:	4618      	mov	r0, r3
 810e22e:	3714      	adds	r7, #20
 810e230:	46bd      	mov	sp, r7
 810e232:	f85d 7b04 	ldr.w	r7, [sp], #4
 810e236:	4770      	bx	lr
 810e238:	40010000 	.word	0x40010000
 810e23c:	40000400 	.word	0x40000400
 810e240:	40000800 	.word	0x40000800
 810e244:	40000c00 	.word	0x40000c00
 810e248:	40010400 	.word	0x40010400
 810e24c:	40001800 	.word	0x40001800
 810e250:	00010007 	.word	0x00010007

0810e254 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 810e254:	b580      	push	{r7, lr}
 810e256:	b082      	sub	sp, #8
 810e258:	af00      	add	r7, sp, #0
 810e25a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 810e25c:	687b      	ldr	r3, [r7, #4]
 810e25e:	2b00      	cmp	r3, #0
 810e260:	d101      	bne.n	810e266 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 810e262:	2301      	movs	r3, #1
 810e264:	e049      	b.n	810e2fa <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 810e266:	687b      	ldr	r3, [r7, #4]
 810e268:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 810e26c:	b2db      	uxtb	r3, r3
 810e26e:	2b00      	cmp	r3, #0
 810e270:	d106      	bne.n	810e280 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 810e272:	687b      	ldr	r3, [r7, #4]
 810e274:	2200      	movs	r2, #0
 810e276:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 810e27a:	6878      	ldr	r0, [r7, #4]
 810e27c:	f000 f841 	bl	810e302 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 810e280:	687b      	ldr	r3, [r7, #4]
 810e282:	2202      	movs	r2, #2
 810e284:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 810e288:	687b      	ldr	r3, [r7, #4]
 810e28a:	681a      	ldr	r2, [r3, #0]
 810e28c:	687b      	ldr	r3, [r7, #4]
 810e28e:	3304      	adds	r3, #4
 810e290:	4619      	mov	r1, r3
 810e292:	4610      	mov	r0, r2
 810e294:	f000 fb8a 	bl	810e9ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 810e298:	687b      	ldr	r3, [r7, #4]
 810e29a:	2201      	movs	r2, #1
 810e29c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 810e2a0:	687b      	ldr	r3, [r7, #4]
 810e2a2:	2201      	movs	r2, #1
 810e2a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 810e2a8:	687b      	ldr	r3, [r7, #4]
 810e2aa:	2201      	movs	r2, #1
 810e2ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 810e2b0:	687b      	ldr	r3, [r7, #4]
 810e2b2:	2201      	movs	r2, #1
 810e2b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 810e2b8:	687b      	ldr	r3, [r7, #4]
 810e2ba:	2201      	movs	r2, #1
 810e2bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 810e2c0:	687b      	ldr	r3, [r7, #4]
 810e2c2:	2201      	movs	r2, #1
 810e2c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 810e2c8:	687b      	ldr	r3, [r7, #4]
 810e2ca:	2201      	movs	r2, #1
 810e2cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 810e2d0:	687b      	ldr	r3, [r7, #4]
 810e2d2:	2201      	movs	r2, #1
 810e2d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 810e2d8:	687b      	ldr	r3, [r7, #4]
 810e2da:	2201      	movs	r2, #1
 810e2dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 810e2e0:	687b      	ldr	r3, [r7, #4]
 810e2e2:	2201      	movs	r2, #1
 810e2e4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 810e2e8:	687b      	ldr	r3, [r7, #4]
 810e2ea:	2201      	movs	r2, #1
 810e2ec:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 810e2f0:	687b      	ldr	r3, [r7, #4]
 810e2f2:	2201      	movs	r2, #1
 810e2f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 810e2f8:	2300      	movs	r3, #0
}
 810e2fa:	4618      	mov	r0, r3
 810e2fc:	3708      	adds	r7, #8
 810e2fe:	46bd      	mov	sp, r7
 810e300:	bd80      	pop	{r7, pc}

0810e302 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 810e302:	b480      	push	{r7}
 810e304:	b083      	sub	sp, #12
 810e306:	af00      	add	r7, sp, #0
 810e308:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 810e30a:	bf00      	nop
 810e30c:	370c      	adds	r7, #12
 810e30e:	46bd      	mov	sp, r7
 810e310:	f85d 7b04 	ldr.w	r7, [sp], #4
 810e314:	4770      	bx	lr

0810e316 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 810e316:	b580      	push	{r7, lr}
 810e318:	b082      	sub	sp, #8
 810e31a:	af00      	add	r7, sp, #0
 810e31c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 810e31e:	687b      	ldr	r3, [r7, #4]
 810e320:	681b      	ldr	r3, [r3, #0]
 810e322:	691b      	ldr	r3, [r3, #16]
 810e324:	f003 0302 	and.w	r3, r3, #2
 810e328:	2b02      	cmp	r3, #2
 810e32a:	d122      	bne.n	810e372 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 810e32c:	687b      	ldr	r3, [r7, #4]
 810e32e:	681b      	ldr	r3, [r3, #0]
 810e330:	68db      	ldr	r3, [r3, #12]
 810e332:	f003 0302 	and.w	r3, r3, #2
 810e336:	2b02      	cmp	r3, #2
 810e338:	d11b      	bne.n	810e372 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 810e33a:	687b      	ldr	r3, [r7, #4]
 810e33c:	681b      	ldr	r3, [r3, #0]
 810e33e:	f06f 0202 	mvn.w	r2, #2
 810e342:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 810e344:	687b      	ldr	r3, [r7, #4]
 810e346:	2201      	movs	r2, #1
 810e348:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 810e34a:	687b      	ldr	r3, [r7, #4]
 810e34c:	681b      	ldr	r3, [r3, #0]
 810e34e:	699b      	ldr	r3, [r3, #24]
 810e350:	f003 0303 	and.w	r3, r3, #3
 810e354:	2b00      	cmp	r3, #0
 810e356:	d003      	beq.n	810e360 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 810e358:	6878      	ldr	r0, [r7, #4]
 810e35a:	f000 fb09 	bl	810e970 <HAL_TIM_IC_CaptureCallback>
 810e35e:	e005      	b.n	810e36c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 810e360:	6878      	ldr	r0, [r7, #4]
 810e362:	f000 fafb 	bl	810e95c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 810e366:	6878      	ldr	r0, [r7, #4]
 810e368:	f000 fb0c 	bl	810e984 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 810e36c:	687b      	ldr	r3, [r7, #4]
 810e36e:	2200      	movs	r2, #0
 810e370:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 810e372:	687b      	ldr	r3, [r7, #4]
 810e374:	681b      	ldr	r3, [r3, #0]
 810e376:	691b      	ldr	r3, [r3, #16]
 810e378:	f003 0304 	and.w	r3, r3, #4
 810e37c:	2b04      	cmp	r3, #4
 810e37e:	d122      	bne.n	810e3c6 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 810e380:	687b      	ldr	r3, [r7, #4]
 810e382:	681b      	ldr	r3, [r3, #0]
 810e384:	68db      	ldr	r3, [r3, #12]
 810e386:	f003 0304 	and.w	r3, r3, #4
 810e38a:	2b04      	cmp	r3, #4
 810e38c:	d11b      	bne.n	810e3c6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 810e38e:	687b      	ldr	r3, [r7, #4]
 810e390:	681b      	ldr	r3, [r3, #0]
 810e392:	f06f 0204 	mvn.w	r2, #4
 810e396:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 810e398:	687b      	ldr	r3, [r7, #4]
 810e39a:	2202      	movs	r2, #2
 810e39c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 810e39e:	687b      	ldr	r3, [r7, #4]
 810e3a0:	681b      	ldr	r3, [r3, #0]
 810e3a2:	699b      	ldr	r3, [r3, #24]
 810e3a4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 810e3a8:	2b00      	cmp	r3, #0
 810e3aa:	d003      	beq.n	810e3b4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 810e3ac:	6878      	ldr	r0, [r7, #4]
 810e3ae:	f000 fadf 	bl	810e970 <HAL_TIM_IC_CaptureCallback>
 810e3b2:	e005      	b.n	810e3c0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 810e3b4:	6878      	ldr	r0, [r7, #4]
 810e3b6:	f000 fad1 	bl	810e95c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 810e3ba:	6878      	ldr	r0, [r7, #4]
 810e3bc:	f000 fae2 	bl	810e984 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 810e3c0:	687b      	ldr	r3, [r7, #4]
 810e3c2:	2200      	movs	r2, #0
 810e3c4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 810e3c6:	687b      	ldr	r3, [r7, #4]
 810e3c8:	681b      	ldr	r3, [r3, #0]
 810e3ca:	691b      	ldr	r3, [r3, #16]
 810e3cc:	f003 0308 	and.w	r3, r3, #8
 810e3d0:	2b08      	cmp	r3, #8
 810e3d2:	d122      	bne.n	810e41a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 810e3d4:	687b      	ldr	r3, [r7, #4]
 810e3d6:	681b      	ldr	r3, [r3, #0]
 810e3d8:	68db      	ldr	r3, [r3, #12]
 810e3da:	f003 0308 	and.w	r3, r3, #8
 810e3de:	2b08      	cmp	r3, #8
 810e3e0:	d11b      	bne.n	810e41a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 810e3e2:	687b      	ldr	r3, [r7, #4]
 810e3e4:	681b      	ldr	r3, [r3, #0]
 810e3e6:	f06f 0208 	mvn.w	r2, #8
 810e3ea:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 810e3ec:	687b      	ldr	r3, [r7, #4]
 810e3ee:	2204      	movs	r2, #4
 810e3f0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 810e3f2:	687b      	ldr	r3, [r7, #4]
 810e3f4:	681b      	ldr	r3, [r3, #0]
 810e3f6:	69db      	ldr	r3, [r3, #28]
 810e3f8:	f003 0303 	and.w	r3, r3, #3
 810e3fc:	2b00      	cmp	r3, #0
 810e3fe:	d003      	beq.n	810e408 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 810e400:	6878      	ldr	r0, [r7, #4]
 810e402:	f000 fab5 	bl	810e970 <HAL_TIM_IC_CaptureCallback>
 810e406:	e005      	b.n	810e414 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 810e408:	6878      	ldr	r0, [r7, #4]
 810e40a:	f000 faa7 	bl	810e95c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 810e40e:	6878      	ldr	r0, [r7, #4]
 810e410:	f000 fab8 	bl	810e984 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 810e414:	687b      	ldr	r3, [r7, #4]
 810e416:	2200      	movs	r2, #0
 810e418:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 810e41a:	687b      	ldr	r3, [r7, #4]
 810e41c:	681b      	ldr	r3, [r3, #0]
 810e41e:	691b      	ldr	r3, [r3, #16]
 810e420:	f003 0310 	and.w	r3, r3, #16
 810e424:	2b10      	cmp	r3, #16
 810e426:	d122      	bne.n	810e46e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 810e428:	687b      	ldr	r3, [r7, #4]
 810e42a:	681b      	ldr	r3, [r3, #0]
 810e42c:	68db      	ldr	r3, [r3, #12]
 810e42e:	f003 0310 	and.w	r3, r3, #16
 810e432:	2b10      	cmp	r3, #16
 810e434:	d11b      	bne.n	810e46e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 810e436:	687b      	ldr	r3, [r7, #4]
 810e438:	681b      	ldr	r3, [r3, #0]
 810e43a:	f06f 0210 	mvn.w	r2, #16
 810e43e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 810e440:	687b      	ldr	r3, [r7, #4]
 810e442:	2208      	movs	r2, #8
 810e444:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 810e446:	687b      	ldr	r3, [r7, #4]
 810e448:	681b      	ldr	r3, [r3, #0]
 810e44a:	69db      	ldr	r3, [r3, #28]
 810e44c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 810e450:	2b00      	cmp	r3, #0
 810e452:	d003      	beq.n	810e45c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 810e454:	6878      	ldr	r0, [r7, #4]
 810e456:	f000 fa8b 	bl	810e970 <HAL_TIM_IC_CaptureCallback>
 810e45a:	e005      	b.n	810e468 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 810e45c:	6878      	ldr	r0, [r7, #4]
 810e45e:	f000 fa7d 	bl	810e95c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 810e462:	6878      	ldr	r0, [r7, #4]
 810e464:	f000 fa8e 	bl	810e984 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 810e468:	687b      	ldr	r3, [r7, #4]
 810e46a:	2200      	movs	r2, #0
 810e46c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 810e46e:	687b      	ldr	r3, [r7, #4]
 810e470:	681b      	ldr	r3, [r3, #0]
 810e472:	691b      	ldr	r3, [r3, #16]
 810e474:	f003 0301 	and.w	r3, r3, #1
 810e478:	2b01      	cmp	r3, #1
 810e47a:	d10e      	bne.n	810e49a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 810e47c:	687b      	ldr	r3, [r7, #4]
 810e47e:	681b      	ldr	r3, [r3, #0]
 810e480:	68db      	ldr	r3, [r3, #12]
 810e482:	f003 0301 	and.w	r3, r3, #1
 810e486:	2b01      	cmp	r3, #1
 810e488:	d107      	bne.n	810e49a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 810e48a:	687b      	ldr	r3, [r7, #4]
 810e48c:	681b      	ldr	r3, [r3, #0]
 810e48e:	f06f 0201 	mvn.w	r2, #1
 810e492:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 810e494:	6878      	ldr	r0, [r7, #4]
 810e496:	f7f3 fb59 	bl	8101b4c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 810e49a:	687b      	ldr	r3, [r7, #4]
 810e49c:	681b      	ldr	r3, [r3, #0]
 810e49e:	691b      	ldr	r3, [r3, #16]
 810e4a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 810e4a4:	2b80      	cmp	r3, #128	; 0x80
 810e4a6:	d10e      	bne.n	810e4c6 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 810e4a8:	687b      	ldr	r3, [r7, #4]
 810e4aa:	681b      	ldr	r3, [r3, #0]
 810e4ac:	68db      	ldr	r3, [r3, #12]
 810e4ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 810e4b2:	2b80      	cmp	r3, #128	; 0x80
 810e4b4:	d107      	bne.n	810e4c6 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 810e4b6:	687b      	ldr	r3, [r7, #4]
 810e4b8:	681b      	ldr	r3, [r3, #0]
 810e4ba:	f06f 0280 	mvn.w	r2, #128	; 0x80
 810e4be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 810e4c0:	6878      	ldr	r0, [r7, #4]
 810e4c2:	f000 ff87 	bl	810f3d4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 810e4c6:	687b      	ldr	r3, [r7, #4]
 810e4c8:	681b      	ldr	r3, [r3, #0]
 810e4ca:	691b      	ldr	r3, [r3, #16]
 810e4cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 810e4d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810e4d4:	d10e      	bne.n	810e4f4 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 810e4d6:	687b      	ldr	r3, [r7, #4]
 810e4d8:	681b      	ldr	r3, [r3, #0]
 810e4da:	68db      	ldr	r3, [r3, #12]
 810e4dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 810e4e0:	2b80      	cmp	r3, #128	; 0x80
 810e4e2:	d107      	bne.n	810e4f4 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 810e4e4:	687b      	ldr	r3, [r7, #4]
 810e4e6:	681b      	ldr	r3, [r3, #0]
 810e4e8:	f46f 7280 	mvn.w	r2, #256	; 0x100
 810e4ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 810e4ee:	6878      	ldr	r0, [r7, #4]
 810e4f0:	f000 ff7a 	bl	810f3e8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 810e4f4:	687b      	ldr	r3, [r7, #4]
 810e4f6:	681b      	ldr	r3, [r3, #0]
 810e4f8:	691b      	ldr	r3, [r3, #16]
 810e4fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 810e4fe:	2b40      	cmp	r3, #64	; 0x40
 810e500:	d10e      	bne.n	810e520 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 810e502:	687b      	ldr	r3, [r7, #4]
 810e504:	681b      	ldr	r3, [r3, #0]
 810e506:	68db      	ldr	r3, [r3, #12]
 810e508:	f003 0340 	and.w	r3, r3, #64	; 0x40
 810e50c:	2b40      	cmp	r3, #64	; 0x40
 810e50e:	d107      	bne.n	810e520 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 810e510:	687b      	ldr	r3, [r7, #4]
 810e512:	681b      	ldr	r3, [r3, #0]
 810e514:	f06f 0240 	mvn.w	r2, #64	; 0x40
 810e518:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 810e51a:	6878      	ldr	r0, [r7, #4]
 810e51c:	f000 fa3c 	bl	810e998 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 810e520:	687b      	ldr	r3, [r7, #4]
 810e522:	681b      	ldr	r3, [r3, #0]
 810e524:	691b      	ldr	r3, [r3, #16]
 810e526:	f003 0320 	and.w	r3, r3, #32
 810e52a:	2b20      	cmp	r3, #32
 810e52c:	d10e      	bne.n	810e54c <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 810e52e:	687b      	ldr	r3, [r7, #4]
 810e530:	681b      	ldr	r3, [r3, #0]
 810e532:	68db      	ldr	r3, [r3, #12]
 810e534:	f003 0320 	and.w	r3, r3, #32
 810e538:	2b20      	cmp	r3, #32
 810e53a:	d107      	bne.n	810e54c <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 810e53c:	687b      	ldr	r3, [r7, #4]
 810e53e:	681b      	ldr	r3, [r3, #0]
 810e540:	f06f 0220 	mvn.w	r2, #32
 810e544:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 810e546:	6878      	ldr	r0, [r7, #4]
 810e548:	f000 ff3a 	bl	810f3c0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 810e54c:	bf00      	nop
 810e54e:	3708      	adds	r7, #8
 810e550:	46bd      	mov	sp, r7
 810e552:	bd80      	pop	{r7, pc}

0810e554 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 810e554:	b580      	push	{r7, lr}
 810e556:	b084      	sub	sp, #16
 810e558:	af00      	add	r7, sp, #0
 810e55a:	60f8      	str	r0, [r7, #12]
 810e55c:	60b9      	str	r1, [r7, #8]
 810e55e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 810e560:	68fb      	ldr	r3, [r7, #12]
 810e562:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 810e566:	2b01      	cmp	r3, #1
 810e568:	d101      	bne.n	810e56e <HAL_TIM_PWM_ConfigChannel+0x1a>
 810e56a:	2302      	movs	r3, #2
 810e56c:	e0fd      	b.n	810e76a <HAL_TIM_PWM_ConfigChannel+0x216>
 810e56e:	68fb      	ldr	r3, [r7, #12]
 810e570:	2201      	movs	r2, #1
 810e572:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 810e576:	687b      	ldr	r3, [r7, #4]
 810e578:	2b14      	cmp	r3, #20
 810e57a:	f200 80f0 	bhi.w	810e75e <HAL_TIM_PWM_ConfigChannel+0x20a>
 810e57e:	a201      	add	r2, pc, #4	; (adr r2, 810e584 <HAL_TIM_PWM_ConfigChannel+0x30>)
 810e580:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810e584:	0810e5d9 	.word	0x0810e5d9
 810e588:	0810e75f 	.word	0x0810e75f
 810e58c:	0810e75f 	.word	0x0810e75f
 810e590:	0810e75f 	.word	0x0810e75f
 810e594:	0810e619 	.word	0x0810e619
 810e598:	0810e75f 	.word	0x0810e75f
 810e59c:	0810e75f 	.word	0x0810e75f
 810e5a0:	0810e75f 	.word	0x0810e75f
 810e5a4:	0810e65b 	.word	0x0810e65b
 810e5a8:	0810e75f 	.word	0x0810e75f
 810e5ac:	0810e75f 	.word	0x0810e75f
 810e5b0:	0810e75f 	.word	0x0810e75f
 810e5b4:	0810e69b 	.word	0x0810e69b
 810e5b8:	0810e75f 	.word	0x0810e75f
 810e5bc:	0810e75f 	.word	0x0810e75f
 810e5c0:	0810e75f 	.word	0x0810e75f
 810e5c4:	0810e6dd 	.word	0x0810e6dd
 810e5c8:	0810e75f 	.word	0x0810e75f
 810e5cc:	0810e75f 	.word	0x0810e75f
 810e5d0:	0810e75f 	.word	0x0810e75f
 810e5d4:	0810e71d 	.word	0x0810e71d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 810e5d8:	68fb      	ldr	r3, [r7, #12]
 810e5da:	681b      	ldr	r3, [r3, #0]
 810e5dc:	68b9      	ldr	r1, [r7, #8]
 810e5de:	4618      	mov	r0, r3
 810e5e0:	f000 fa7e 	bl	810eae0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 810e5e4:	68fb      	ldr	r3, [r7, #12]
 810e5e6:	681b      	ldr	r3, [r3, #0]
 810e5e8:	699a      	ldr	r2, [r3, #24]
 810e5ea:	68fb      	ldr	r3, [r7, #12]
 810e5ec:	681b      	ldr	r3, [r3, #0]
 810e5ee:	f042 0208 	orr.w	r2, r2, #8
 810e5f2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 810e5f4:	68fb      	ldr	r3, [r7, #12]
 810e5f6:	681b      	ldr	r3, [r3, #0]
 810e5f8:	699a      	ldr	r2, [r3, #24]
 810e5fa:	68fb      	ldr	r3, [r7, #12]
 810e5fc:	681b      	ldr	r3, [r3, #0]
 810e5fe:	f022 0204 	bic.w	r2, r2, #4
 810e602:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 810e604:	68fb      	ldr	r3, [r7, #12]
 810e606:	681b      	ldr	r3, [r3, #0]
 810e608:	6999      	ldr	r1, [r3, #24]
 810e60a:	68bb      	ldr	r3, [r7, #8]
 810e60c:	691a      	ldr	r2, [r3, #16]
 810e60e:	68fb      	ldr	r3, [r7, #12]
 810e610:	681b      	ldr	r3, [r3, #0]
 810e612:	430a      	orrs	r2, r1
 810e614:	619a      	str	r2, [r3, #24]
      break;
 810e616:	e0a3      	b.n	810e760 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 810e618:	68fb      	ldr	r3, [r7, #12]
 810e61a:	681b      	ldr	r3, [r3, #0]
 810e61c:	68b9      	ldr	r1, [r7, #8]
 810e61e:	4618      	mov	r0, r3
 810e620:	f000 faee 	bl	810ec00 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 810e624:	68fb      	ldr	r3, [r7, #12]
 810e626:	681b      	ldr	r3, [r3, #0]
 810e628:	699a      	ldr	r2, [r3, #24]
 810e62a:	68fb      	ldr	r3, [r7, #12]
 810e62c:	681b      	ldr	r3, [r3, #0]
 810e62e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 810e632:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 810e634:	68fb      	ldr	r3, [r7, #12]
 810e636:	681b      	ldr	r3, [r3, #0]
 810e638:	699a      	ldr	r2, [r3, #24]
 810e63a:	68fb      	ldr	r3, [r7, #12]
 810e63c:	681b      	ldr	r3, [r3, #0]
 810e63e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 810e642:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 810e644:	68fb      	ldr	r3, [r7, #12]
 810e646:	681b      	ldr	r3, [r3, #0]
 810e648:	6999      	ldr	r1, [r3, #24]
 810e64a:	68bb      	ldr	r3, [r7, #8]
 810e64c:	691b      	ldr	r3, [r3, #16]
 810e64e:	021a      	lsls	r2, r3, #8
 810e650:	68fb      	ldr	r3, [r7, #12]
 810e652:	681b      	ldr	r3, [r3, #0]
 810e654:	430a      	orrs	r2, r1
 810e656:	619a      	str	r2, [r3, #24]
      break;
 810e658:	e082      	b.n	810e760 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 810e65a:	68fb      	ldr	r3, [r7, #12]
 810e65c:	681b      	ldr	r3, [r3, #0]
 810e65e:	68b9      	ldr	r1, [r7, #8]
 810e660:	4618      	mov	r0, r3
 810e662:	f000 fb57 	bl	810ed14 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 810e666:	68fb      	ldr	r3, [r7, #12]
 810e668:	681b      	ldr	r3, [r3, #0]
 810e66a:	69da      	ldr	r2, [r3, #28]
 810e66c:	68fb      	ldr	r3, [r7, #12]
 810e66e:	681b      	ldr	r3, [r3, #0]
 810e670:	f042 0208 	orr.w	r2, r2, #8
 810e674:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 810e676:	68fb      	ldr	r3, [r7, #12]
 810e678:	681b      	ldr	r3, [r3, #0]
 810e67a:	69da      	ldr	r2, [r3, #28]
 810e67c:	68fb      	ldr	r3, [r7, #12]
 810e67e:	681b      	ldr	r3, [r3, #0]
 810e680:	f022 0204 	bic.w	r2, r2, #4
 810e684:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 810e686:	68fb      	ldr	r3, [r7, #12]
 810e688:	681b      	ldr	r3, [r3, #0]
 810e68a:	69d9      	ldr	r1, [r3, #28]
 810e68c:	68bb      	ldr	r3, [r7, #8]
 810e68e:	691a      	ldr	r2, [r3, #16]
 810e690:	68fb      	ldr	r3, [r7, #12]
 810e692:	681b      	ldr	r3, [r3, #0]
 810e694:	430a      	orrs	r2, r1
 810e696:	61da      	str	r2, [r3, #28]
      break;
 810e698:	e062      	b.n	810e760 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 810e69a:	68fb      	ldr	r3, [r7, #12]
 810e69c:	681b      	ldr	r3, [r3, #0]
 810e69e:	68b9      	ldr	r1, [r7, #8]
 810e6a0:	4618      	mov	r0, r3
 810e6a2:	f000 fbbd 	bl	810ee20 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 810e6a6:	68fb      	ldr	r3, [r7, #12]
 810e6a8:	681b      	ldr	r3, [r3, #0]
 810e6aa:	69da      	ldr	r2, [r3, #28]
 810e6ac:	68fb      	ldr	r3, [r7, #12]
 810e6ae:	681b      	ldr	r3, [r3, #0]
 810e6b0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 810e6b4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 810e6b6:	68fb      	ldr	r3, [r7, #12]
 810e6b8:	681b      	ldr	r3, [r3, #0]
 810e6ba:	69da      	ldr	r2, [r3, #28]
 810e6bc:	68fb      	ldr	r3, [r7, #12]
 810e6be:	681b      	ldr	r3, [r3, #0]
 810e6c0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 810e6c4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 810e6c6:	68fb      	ldr	r3, [r7, #12]
 810e6c8:	681b      	ldr	r3, [r3, #0]
 810e6ca:	69d9      	ldr	r1, [r3, #28]
 810e6cc:	68bb      	ldr	r3, [r7, #8]
 810e6ce:	691b      	ldr	r3, [r3, #16]
 810e6d0:	021a      	lsls	r2, r3, #8
 810e6d2:	68fb      	ldr	r3, [r7, #12]
 810e6d4:	681b      	ldr	r3, [r3, #0]
 810e6d6:	430a      	orrs	r2, r1
 810e6d8:	61da      	str	r2, [r3, #28]
      break;
 810e6da:	e041      	b.n	810e760 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 810e6dc:	68fb      	ldr	r3, [r7, #12]
 810e6de:	681b      	ldr	r3, [r3, #0]
 810e6e0:	68b9      	ldr	r1, [r7, #8]
 810e6e2:	4618      	mov	r0, r3
 810e6e4:	f000 fc04 	bl	810eef0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 810e6e8:	68fb      	ldr	r3, [r7, #12]
 810e6ea:	681b      	ldr	r3, [r3, #0]
 810e6ec:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 810e6ee:	68fb      	ldr	r3, [r7, #12]
 810e6f0:	681b      	ldr	r3, [r3, #0]
 810e6f2:	f042 0208 	orr.w	r2, r2, #8
 810e6f6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 810e6f8:	68fb      	ldr	r3, [r7, #12]
 810e6fa:	681b      	ldr	r3, [r3, #0]
 810e6fc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 810e6fe:	68fb      	ldr	r3, [r7, #12]
 810e700:	681b      	ldr	r3, [r3, #0]
 810e702:	f022 0204 	bic.w	r2, r2, #4
 810e706:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 810e708:	68fb      	ldr	r3, [r7, #12]
 810e70a:	681b      	ldr	r3, [r3, #0]
 810e70c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 810e70e:	68bb      	ldr	r3, [r7, #8]
 810e710:	691a      	ldr	r2, [r3, #16]
 810e712:	68fb      	ldr	r3, [r7, #12]
 810e714:	681b      	ldr	r3, [r3, #0]
 810e716:	430a      	orrs	r2, r1
 810e718:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 810e71a:	e021      	b.n	810e760 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 810e71c:	68fb      	ldr	r3, [r7, #12]
 810e71e:	681b      	ldr	r3, [r3, #0]
 810e720:	68b9      	ldr	r1, [r7, #8]
 810e722:	4618      	mov	r0, r3
 810e724:	f000 fc46 	bl	810efb4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 810e728:	68fb      	ldr	r3, [r7, #12]
 810e72a:	681b      	ldr	r3, [r3, #0]
 810e72c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 810e72e:	68fb      	ldr	r3, [r7, #12]
 810e730:	681b      	ldr	r3, [r3, #0]
 810e732:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 810e736:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 810e738:	68fb      	ldr	r3, [r7, #12]
 810e73a:	681b      	ldr	r3, [r3, #0]
 810e73c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 810e73e:	68fb      	ldr	r3, [r7, #12]
 810e740:	681b      	ldr	r3, [r3, #0]
 810e742:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 810e746:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 810e748:	68fb      	ldr	r3, [r7, #12]
 810e74a:	681b      	ldr	r3, [r3, #0]
 810e74c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 810e74e:	68bb      	ldr	r3, [r7, #8]
 810e750:	691b      	ldr	r3, [r3, #16]
 810e752:	021a      	lsls	r2, r3, #8
 810e754:	68fb      	ldr	r3, [r7, #12]
 810e756:	681b      	ldr	r3, [r3, #0]
 810e758:	430a      	orrs	r2, r1
 810e75a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 810e75c:	e000      	b.n	810e760 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 810e75e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 810e760:	68fb      	ldr	r3, [r7, #12]
 810e762:	2200      	movs	r2, #0
 810e764:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 810e768:	2300      	movs	r3, #0
}
 810e76a:	4618      	mov	r0, r3
 810e76c:	3710      	adds	r7, #16
 810e76e:	46bd      	mov	sp, r7
 810e770:	bd80      	pop	{r7, pc}
 810e772:	bf00      	nop

0810e774 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 810e774:	b580      	push	{r7, lr}
 810e776:	b084      	sub	sp, #16
 810e778:	af00      	add	r7, sp, #0
 810e77a:	6078      	str	r0, [r7, #4]
 810e77c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 810e77e:	687b      	ldr	r3, [r7, #4]
 810e780:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 810e784:	2b01      	cmp	r3, #1
 810e786:	d101      	bne.n	810e78c <HAL_TIM_ConfigClockSource+0x18>
 810e788:	2302      	movs	r3, #2
 810e78a:	e0dd      	b.n	810e948 <HAL_TIM_ConfigClockSource+0x1d4>
 810e78c:	687b      	ldr	r3, [r7, #4]
 810e78e:	2201      	movs	r2, #1
 810e790:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 810e794:	687b      	ldr	r3, [r7, #4]
 810e796:	2202      	movs	r2, #2
 810e798:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 810e79c:	687b      	ldr	r3, [r7, #4]
 810e79e:	681b      	ldr	r3, [r3, #0]
 810e7a0:	689b      	ldr	r3, [r3, #8]
 810e7a2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 810e7a4:	68fb      	ldr	r3, [r7, #12]
 810e7a6:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 810e7aa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 810e7ae:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 810e7b0:	68fb      	ldr	r3, [r7, #12]
 810e7b2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 810e7b6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 810e7b8:	687b      	ldr	r3, [r7, #4]
 810e7ba:	681b      	ldr	r3, [r3, #0]
 810e7bc:	68fa      	ldr	r2, [r7, #12]
 810e7be:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 810e7c0:	683b      	ldr	r3, [r7, #0]
 810e7c2:	681b      	ldr	r3, [r3, #0]
 810e7c4:	4a62      	ldr	r2, [pc, #392]	; (810e950 <HAL_TIM_ConfigClockSource+0x1dc>)
 810e7c6:	4293      	cmp	r3, r2
 810e7c8:	f000 80a9 	beq.w	810e91e <HAL_TIM_ConfigClockSource+0x1aa>
 810e7cc:	4a60      	ldr	r2, [pc, #384]	; (810e950 <HAL_TIM_ConfigClockSource+0x1dc>)
 810e7ce:	4293      	cmp	r3, r2
 810e7d0:	f200 80ae 	bhi.w	810e930 <HAL_TIM_ConfigClockSource+0x1bc>
 810e7d4:	4a5f      	ldr	r2, [pc, #380]	; (810e954 <HAL_TIM_ConfigClockSource+0x1e0>)
 810e7d6:	4293      	cmp	r3, r2
 810e7d8:	f000 80a1 	beq.w	810e91e <HAL_TIM_ConfigClockSource+0x1aa>
 810e7dc:	4a5d      	ldr	r2, [pc, #372]	; (810e954 <HAL_TIM_ConfigClockSource+0x1e0>)
 810e7de:	4293      	cmp	r3, r2
 810e7e0:	f200 80a6 	bhi.w	810e930 <HAL_TIM_ConfigClockSource+0x1bc>
 810e7e4:	4a5c      	ldr	r2, [pc, #368]	; (810e958 <HAL_TIM_ConfigClockSource+0x1e4>)
 810e7e6:	4293      	cmp	r3, r2
 810e7e8:	f000 8099 	beq.w	810e91e <HAL_TIM_ConfigClockSource+0x1aa>
 810e7ec:	4a5a      	ldr	r2, [pc, #360]	; (810e958 <HAL_TIM_ConfigClockSource+0x1e4>)
 810e7ee:	4293      	cmp	r3, r2
 810e7f0:	f200 809e 	bhi.w	810e930 <HAL_TIM_ConfigClockSource+0x1bc>
 810e7f4:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 810e7f8:	f000 8091 	beq.w	810e91e <HAL_TIM_ConfigClockSource+0x1aa>
 810e7fc:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 810e800:	f200 8096 	bhi.w	810e930 <HAL_TIM_ConfigClockSource+0x1bc>
 810e804:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 810e808:	f000 8089 	beq.w	810e91e <HAL_TIM_ConfigClockSource+0x1aa>
 810e80c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 810e810:	f200 808e 	bhi.w	810e930 <HAL_TIM_ConfigClockSource+0x1bc>
 810e814:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 810e818:	d03e      	beq.n	810e898 <HAL_TIM_ConfigClockSource+0x124>
 810e81a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 810e81e:	f200 8087 	bhi.w	810e930 <HAL_TIM_ConfigClockSource+0x1bc>
 810e822:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 810e826:	f000 8085 	beq.w	810e934 <HAL_TIM_ConfigClockSource+0x1c0>
 810e82a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 810e82e:	d87f      	bhi.n	810e930 <HAL_TIM_ConfigClockSource+0x1bc>
 810e830:	2b70      	cmp	r3, #112	; 0x70
 810e832:	d01a      	beq.n	810e86a <HAL_TIM_ConfigClockSource+0xf6>
 810e834:	2b70      	cmp	r3, #112	; 0x70
 810e836:	d87b      	bhi.n	810e930 <HAL_TIM_ConfigClockSource+0x1bc>
 810e838:	2b60      	cmp	r3, #96	; 0x60
 810e83a:	d050      	beq.n	810e8de <HAL_TIM_ConfigClockSource+0x16a>
 810e83c:	2b60      	cmp	r3, #96	; 0x60
 810e83e:	d877      	bhi.n	810e930 <HAL_TIM_ConfigClockSource+0x1bc>
 810e840:	2b50      	cmp	r3, #80	; 0x50
 810e842:	d03c      	beq.n	810e8be <HAL_TIM_ConfigClockSource+0x14a>
 810e844:	2b50      	cmp	r3, #80	; 0x50
 810e846:	d873      	bhi.n	810e930 <HAL_TIM_ConfigClockSource+0x1bc>
 810e848:	2b40      	cmp	r3, #64	; 0x40
 810e84a:	d058      	beq.n	810e8fe <HAL_TIM_ConfigClockSource+0x18a>
 810e84c:	2b40      	cmp	r3, #64	; 0x40
 810e84e:	d86f      	bhi.n	810e930 <HAL_TIM_ConfigClockSource+0x1bc>
 810e850:	2b30      	cmp	r3, #48	; 0x30
 810e852:	d064      	beq.n	810e91e <HAL_TIM_ConfigClockSource+0x1aa>
 810e854:	2b30      	cmp	r3, #48	; 0x30
 810e856:	d86b      	bhi.n	810e930 <HAL_TIM_ConfigClockSource+0x1bc>
 810e858:	2b20      	cmp	r3, #32
 810e85a:	d060      	beq.n	810e91e <HAL_TIM_ConfigClockSource+0x1aa>
 810e85c:	2b20      	cmp	r3, #32
 810e85e:	d867      	bhi.n	810e930 <HAL_TIM_ConfigClockSource+0x1bc>
 810e860:	2b00      	cmp	r3, #0
 810e862:	d05c      	beq.n	810e91e <HAL_TIM_ConfigClockSource+0x1aa>
 810e864:	2b10      	cmp	r3, #16
 810e866:	d05a      	beq.n	810e91e <HAL_TIM_ConfigClockSource+0x1aa>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 810e868:	e062      	b.n	810e930 <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_ETR_SetConfig(htim->Instance,
 810e86a:	687b      	ldr	r3, [r7, #4]
 810e86c:	6818      	ldr	r0, [r3, #0]
 810e86e:	683b      	ldr	r3, [r7, #0]
 810e870:	6899      	ldr	r1, [r3, #8]
 810e872:	683b      	ldr	r3, [r7, #0]
 810e874:	685a      	ldr	r2, [r3, #4]
 810e876:	683b      	ldr	r3, [r7, #0]
 810e878:	68db      	ldr	r3, [r3, #12]
 810e87a:	f000 fc7b 	bl	810f174 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 810e87e:	687b      	ldr	r3, [r7, #4]
 810e880:	681b      	ldr	r3, [r3, #0]
 810e882:	689b      	ldr	r3, [r3, #8]
 810e884:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 810e886:	68fb      	ldr	r3, [r7, #12]
 810e888:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 810e88c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 810e88e:	687b      	ldr	r3, [r7, #4]
 810e890:	681b      	ldr	r3, [r3, #0]
 810e892:	68fa      	ldr	r2, [r7, #12]
 810e894:	609a      	str	r2, [r3, #8]
      break;
 810e896:	e04e      	b.n	810e936 <HAL_TIM_ConfigClockSource+0x1c2>
      TIM_ETR_SetConfig(htim->Instance,
 810e898:	687b      	ldr	r3, [r7, #4]
 810e89a:	6818      	ldr	r0, [r3, #0]
 810e89c:	683b      	ldr	r3, [r7, #0]
 810e89e:	6899      	ldr	r1, [r3, #8]
 810e8a0:	683b      	ldr	r3, [r7, #0]
 810e8a2:	685a      	ldr	r2, [r3, #4]
 810e8a4:	683b      	ldr	r3, [r7, #0]
 810e8a6:	68db      	ldr	r3, [r3, #12]
 810e8a8:	f000 fc64 	bl	810f174 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 810e8ac:	687b      	ldr	r3, [r7, #4]
 810e8ae:	681b      	ldr	r3, [r3, #0]
 810e8b0:	689a      	ldr	r2, [r3, #8]
 810e8b2:	687b      	ldr	r3, [r7, #4]
 810e8b4:	681b      	ldr	r3, [r3, #0]
 810e8b6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 810e8ba:	609a      	str	r2, [r3, #8]
      break;
 810e8bc:	e03b      	b.n	810e936 <HAL_TIM_ConfigClockSource+0x1c2>
      TIM_TI1_ConfigInputStage(htim->Instance,
 810e8be:	687b      	ldr	r3, [r7, #4]
 810e8c0:	6818      	ldr	r0, [r3, #0]
 810e8c2:	683b      	ldr	r3, [r7, #0]
 810e8c4:	6859      	ldr	r1, [r3, #4]
 810e8c6:	683b      	ldr	r3, [r7, #0]
 810e8c8:	68db      	ldr	r3, [r3, #12]
 810e8ca:	461a      	mov	r2, r3
 810e8cc:	f000 fbd6 	bl	810f07c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 810e8d0:	687b      	ldr	r3, [r7, #4]
 810e8d2:	681b      	ldr	r3, [r3, #0]
 810e8d4:	2150      	movs	r1, #80	; 0x50
 810e8d6:	4618      	mov	r0, r3
 810e8d8:	f000 fc2f 	bl	810f13a <TIM_ITRx_SetConfig>
      break;
 810e8dc:	e02b      	b.n	810e936 <HAL_TIM_ConfigClockSource+0x1c2>
      TIM_TI2_ConfigInputStage(htim->Instance,
 810e8de:	687b      	ldr	r3, [r7, #4]
 810e8e0:	6818      	ldr	r0, [r3, #0]
 810e8e2:	683b      	ldr	r3, [r7, #0]
 810e8e4:	6859      	ldr	r1, [r3, #4]
 810e8e6:	683b      	ldr	r3, [r7, #0]
 810e8e8:	68db      	ldr	r3, [r3, #12]
 810e8ea:	461a      	mov	r2, r3
 810e8ec:	f000 fbf5 	bl	810f0da <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 810e8f0:	687b      	ldr	r3, [r7, #4]
 810e8f2:	681b      	ldr	r3, [r3, #0]
 810e8f4:	2160      	movs	r1, #96	; 0x60
 810e8f6:	4618      	mov	r0, r3
 810e8f8:	f000 fc1f 	bl	810f13a <TIM_ITRx_SetConfig>
      break;
 810e8fc:	e01b      	b.n	810e936 <HAL_TIM_ConfigClockSource+0x1c2>
      TIM_TI1_ConfigInputStage(htim->Instance,
 810e8fe:	687b      	ldr	r3, [r7, #4]
 810e900:	6818      	ldr	r0, [r3, #0]
 810e902:	683b      	ldr	r3, [r7, #0]
 810e904:	6859      	ldr	r1, [r3, #4]
 810e906:	683b      	ldr	r3, [r7, #0]
 810e908:	68db      	ldr	r3, [r3, #12]
 810e90a:	461a      	mov	r2, r3
 810e90c:	f000 fbb6 	bl	810f07c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 810e910:	687b      	ldr	r3, [r7, #4]
 810e912:	681b      	ldr	r3, [r3, #0]
 810e914:	2140      	movs	r1, #64	; 0x40
 810e916:	4618      	mov	r0, r3
 810e918:	f000 fc0f 	bl	810f13a <TIM_ITRx_SetConfig>
      break;
 810e91c:	e00b      	b.n	810e936 <HAL_TIM_ConfigClockSource+0x1c2>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 810e91e:	687b      	ldr	r3, [r7, #4]
 810e920:	681a      	ldr	r2, [r3, #0]
 810e922:	683b      	ldr	r3, [r7, #0]
 810e924:	681b      	ldr	r3, [r3, #0]
 810e926:	4619      	mov	r1, r3
 810e928:	4610      	mov	r0, r2
 810e92a:	f000 fc06 	bl	810f13a <TIM_ITRx_SetConfig>
        break;
 810e92e:	e002      	b.n	810e936 <HAL_TIM_ConfigClockSource+0x1c2>
      break;
 810e930:	bf00      	nop
 810e932:	e000      	b.n	810e936 <HAL_TIM_ConfigClockSource+0x1c2>
      break;
 810e934:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 810e936:	687b      	ldr	r3, [r7, #4]
 810e938:	2201      	movs	r2, #1
 810e93a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 810e93e:	687b      	ldr	r3, [r7, #4]
 810e940:	2200      	movs	r2, #0
 810e942:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 810e946:	2300      	movs	r3, #0
}
 810e948:	4618      	mov	r0, r3
 810e94a:	3710      	adds	r7, #16
 810e94c:	46bd      	mov	sp, r7
 810e94e:	bd80      	pop	{r7, pc}
 810e950:	00100040 	.word	0x00100040
 810e954:	00100030 	.word	0x00100030
 810e958:	00100020 	.word	0x00100020

0810e95c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 810e95c:	b480      	push	{r7}
 810e95e:	b083      	sub	sp, #12
 810e960:	af00      	add	r7, sp, #0
 810e962:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 810e964:	bf00      	nop
 810e966:	370c      	adds	r7, #12
 810e968:	46bd      	mov	sp, r7
 810e96a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810e96e:	4770      	bx	lr

0810e970 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 810e970:	b480      	push	{r7}
 810e972:	b083      	sub	sp, #12
 810e974:	af00      	add	r7, sp, #0
 810e976:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 810e978:	bf00      	nop
 810e97a:	370c      	adds	r7, #12
 810e97c:	46bd      	mov	sp, r7
 810e97e:	f85d 7b04 	ldr.w	r7, [sp], #4
 810e982:	4770      	bx	lr

0810e984 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 810e984:	b480      	push	{r7}
 810e986:	b083      	sub	sp, #12
 810e988:	af00      	add	r7, sp, #0
 810e98a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 810e98c:	bf00      	nop
 810e98e:	370c      	adds	r7, #12
 810e990:	46bd      	mov	sp, r7
 810e992:	f85d 7b04 	ldr.w	r7, [sp], #4
 810e996:	4770      	bx	lr

0810e998 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 810e998:	b480      	push	{r7}
 810e99a:	b083      	sub	sp, #12
 810e99c:	af00      	add	r7, sp, #0
 810e99e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 810e9a0:	bf00      	nop
 810e9a2:	370c      	adds	r7, #12
 810e9a4:	46bd      	mov	sp, r7
 810e9a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 810e9aa:	4770      	bx	lr

0810e9ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 810e9ac:	b480      	push	{r7}
 810e9ae:	b085      	sub	sp, #20
 810e9b0:	af00      	add	r7, sp, #0
 810e9b2:	6078      	str	r0, [r7, #4]
 810e9b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 810e9b6:	687b      	ldr	r3, [r7, #4]
 810e9b8:	681b      	ldr	r3, [r3, #0]
 810e9ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 810e9bc:	687b      	ldr	r3, [r7, #4]
 810e9be:	4a40      	ldr	r2, [pc, #256]	; (810eac0 <TIM_Base_SetConfig+0x114>)
 810e9c0:	4293      	cmp	r3, r2
 810e9c2:	d013      	beq.n	810e9ec <TIM_Base_SetConfig+0x40>
 810e9c4:	687b      	ldr	r3, [r7, #4]
 810e9c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 810e9ca:	d00f      	beq.n	810e9ec <TIM_Base_SetConfig+0x40>
 810e9cc:	687b      	ldr	r3, [r7, #4]
 810e9ce:	4a3d      	ldr	r2, [pc, #244]	; (810eac4 <TIM_Base_SetConfig+0x118>)
 810e9d0:	4293      	cmp	r3, r2
 810e9d2:	d00b      	beq.n	810e9ec <TIM_Base_SetConfig+0x40>
 810e9d4:	687b      	ldr	r3, [r7, #4]
 810e9d6:	4a3c      	ldr	r2, [pc, #240]	; (810eac8 <TIM_Base_SetConfig+0x11c>)
 810e9d8:	4293      	cmp	r3, r2
 810e9da:	d007      	beq.n	810e9ec <TIM_Base_SetConfig+0x40>
 810e9dc:	687b      	ldr	r3, [r7, #4]
 810e9de:	4a3b      	ldr	r2, [pc, #236]	; (810eacc <TIM_Base_SetConfig+0x120>)
 810e9e0:	4293      	cmp	r3, r2
 810e9e2:	d003      	beq.n	810e9ec <TIM_Base_SetConfig+0x40>
 810e9e4:	687b      	ldr	r3, [r7, #4]
 810e9e6:	4a3a      	ldr	r2, [pc, #232]	; (810ead0 <TIM_Base_SetConfig+0x124>)
 810e9e8:	4293      	cmp	r3, r2
 810e9ea:	d108      	bne.n	810e9fe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 810e9ec:	68fb      	ldr	r3, [r7, #12]
 810e9ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 810e9f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 810e9f4:	683b      	ldr	r3, [r7, #0]
 810e9f6:	685b      	ldr	r3, [r3, #4]
 810e9f8:	68fa      	ldr	r2, [r7, #12]
 810e9fa:	4313      	orrs	r3, r2
 810e9fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 810e9fe:	687b      	ldr	r3, [r7, #4]
 810ea00:	4a2f      	ldr	r2, [pc, #188]	; (810eac0 <TIM_Base_SetConfig+0x114>)
 810ea02:	4293      	cmp	r3, r2
 810ea04:	d01f      	beq.n	810ea46 <TIM_Base_SetConfig+0x9a>
 810ea06:	687b      	ldr	r3, [r7, #4]
 810ea08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 810ea0c:	d01b      	beq.n	810ea46 <TIM_Base_SetConfig+0x9a>
 810ea0e:	687b      	ldr	r3, [r7, #4]
 810ea10:	4a2c      	ldr	r2, [pc, #176]	; (810eac4 <TIM_Base_SetConfig+0x118>)
 810ea12:	4293      	cmp	r3, r2
 810ea14:	d017      	beq.n	810ea46 <TIM_Base_SetConfig+0x9a>
 810ea16:	687b      	ldr	r3, [r7, #4]
 810ea18:	4a2b      	ldr	r2, [pc, #172]	; (810eac8 <TIM_Base_SetConfig+0x11c>)
 810ea1a:	4293      	cmp	r3, r2
 810ea1c:	d013      	beq.n	810ea46 <TIM_Base_SetConfig+0x9a>
 810ea1e:	687b      	ldr	r3, [r7, #4]
 810ea20:	4a2a      	ldr	r2, [pc, #168]	; (810eacc <TIM_Base_SetConfig+0x120>)
 810ea22:	4293      	cmp	r3, r2
 810ea24:	d00f      	beq.n	810ea46 <TIM_Base_SetConfig+0x9a>
 810ea26:	687b      	ldr	r3, [r7, #4]
 810ea28:	4a29      	ldr	r2, [pc, #164]	; (810ead0 <TIM_Base_SetConfig+0x124>)
 810ea2a:	4293      	cmp	r3, r2
 810ea2c:	d00b      	beq.n	810ea46 <TIM_Base_SetConfig+0x9a>
 810ea2e:	687b      	ldr	r3, [r7, #4]
 810ea30:	4a28      	ldr	r2, [pc, #160]	; (810ead4 <TIM_Base_SetConfig+0x128>)
 810ea32:	4293      	cmp	r3, r2
 810ea34:	d007      	beq.n	810ea46 <TIM_Base_SetConfig+0x9a>
 810ea36:	687b      	ldr	r3, [r7, #4]
 810ea38:	4a27      	ldr	r2, [pc, #156]	; (810ead8 <TIM_Base_SetConfig+0x12c>)
 810ea3a:	4293      	cmp	r3, r2
 810ea3c:	d003      	beq.n	810ea46 <TIM_Base_SetConfig+0x9a>
 810ea3e:	687b      	ldr	r3, [r7, #4]
 810ea40:	4a26      	ldr	r2, [pc, #152]	; (810eadc <TIM_Base_SetConfig+0x130>)
 810ea42:	4293      	cmp	r3, r2
 810ea44:	d108      	bne.n	810ea58 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 810ea46:	68fb      	ldr	r3, [r7, #12]
 810ea48:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 810ea4c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 810ea4e:	683b      	ldr	r3, [r7, #0]
 810ea50:	68db      	ldr	r3, [r3, #12]
 810ea52:	68fa      	ldr	r2, [r7, #12]
 810ea54:	4313      	orrs	r3, r2
 810ea56:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 810ea58:	68fb      	ldr	r3, [r7, #12]
 810ea5a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 810ea5e:	683b      	ldr	r3, [r7, #0]
 810ea60:	695b      	ldr	r3, [r3, #20]
 810ea62:	4313      	orrs	r3, r2
 810ea64:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 810ea66:	687b      	ldr	r3, [r7, #4]
 810ea68:	68fa      	ldr	r2, [r7, #12]
 810ea6a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 810ea6c:	683b      	ldr	r3, [r7, #0]
 810ea6e:	689a      	ldr	r2, [r3, #8]
 810ea70:	687b      	ldr	r3, [r7, #4]
 810ea72:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 810ea74:	683b      	ldr	r3, [r7, #0]
 810ea76:	681a      	ldr	r2, [r3, #0]
 810ea78:	687b      	ldr	r3, [r7, #4]
 810ea7a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 810ea7c:	687b      	ldr	r3, [r7, #4]
 810ea7e:	4a10      	ldr	r2, [pc, #64]	; (810eac0 <TIM_Base_SetConfig+0x114>)
 810ea80:	4293      	cmp	r3, r2
 810ea82:	d00f      	beq.n	810eaa4 <TIM_Base_SetConfig+0xf8>
 810ea84:	687b      	ldr	r3, [r7, #4]
 810ea86:	4a12      	ldr	r2, [pc, #72]	; (810ead0 <TIM_Base_SetConfig+0x124>)
 810ea88:	4293      	cmp	r3, r2
 810ea8a:	d00b      	beq.n	810eaa4 <TIM_Base_SetConfig+0xf8>
 810ea8c:	687b      	ldr	r3, [r7, #4]
 810ea8e:	4a11      	ldr	r2, [pc, #68]	; (810ead4 <TIM_Base_SetConfig+0x128>)
 810ea90:	4293      	cmp	r3, r2
 810ea92:	d007      	beq.n	810eaa4 <TIM_Base_SetConfig+0xf8>
 810ea94:	687b      	ldr	r3, [r7, #4]
 810ea96:	4a10      	ldr	r2, [pc, #64]	; (810ead8 <TIM_Base_SetConfig+0x12c>)
 810ea98:	4293      	cmp	r3, r2
 810ea9a:	d003      	beq.n	810eaa4 <TIM_Base_SetConfig+0xf8>
 810ea9c:	687b      	ldr	r3, [r7, #4]
 810ea9e:	4a0f      	ldr	r2, [pc, #60]	; (810eadc <TIM_Base_SetConfig+0x130>)
 810eaa0:	4293      	cmp	r3, r2
 810eaa2:	d103      	bne.n	810eaac <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 810eaa4:	683b      	ldr	r3, [r7, #0]
 810eaa6:	691a      	ldr	r2, [r3, #16]
 810eaa8:	687b      	ldr	r3, [r7, #4]
 810eaaa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 810eaac:	687b      	ldr	r3, [r7, #4]
 810eaae:	2201      	movs	r2, #1
 810eab0:	615a      	str	r2, [r3, #20]
}
 810eab2:	bf00      	nop
 810eab4:	3714      	adds	r7, #20
 810eab6:	46bd      	mov	sp, r7
 810eab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 810eabc:	4770      	bx	lr
 810eabe:	bf00      	nop
 810eac0:	40010000 	.word	0x40010000
 810eac4:	40000400 	.word	0x40000400
 810eac8:	40000800 	.word	0x40000800
 810eacc:	40000c00 	.word	0x40000c00
 810ead0:	40010400 	.word	0x40010400
 810ead4:	40014000 	.word	0x40014000
 810ead8:	40014400 	.word	0x40014400
 810eadc:	40014800 	.word	0x40014800

0810eae0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 810eae0:	b480      	push	{r7}
 810eae2:	b087      	sub	sp, #28
 810eae4:	af00      	add	r7, sp, #0
 810eae6:	6078      	str	r0, [r7, #4]
 810eae8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 810eaea:	687b      	ldr	r3, [r7, #4]
 810eaec:	6a1b      	ldr	r3, [r3, #32]
 810eaee:	f023 0201 	bic.w	r2, r3, #1
 810eaf2:	687b      	ldr	r3, [r7, #4]
 810eaf4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 810eaf6:	687b      	ldr	r3, [r7, #4]
 810eaf8:	6a1b      	ldr	r3, [r3, #32]
 810eafa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 810eafc:	687b      	ldr	r3, [r7, #4]
 810eafe:	685b      	ldr	r3, [r3, #4]
 810eb00:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 810eb02:	687b      	ldr	r3, [r7, #4]
 810eb04:	699b      	ldr	r3, [r3, #24]
 810eb06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 810eb08:	68fb      	ldr	r3, [r7, #12]
 810eb0a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 810eb0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 810eb12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 810eb14:	68fb      	ldr	r3, [r7, #12]
 810eb16:	f023 0303 	bic.w	r3, r3, #3
 810eb1a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 810eb1c:	683b      	ldr	r3, [r7, #0]
 810eb1e:	681b      	ldr	r3, [r3, #0]
 810eb20:	68fa      	ldr	r2, [r7, #12]
 810eb22:	4313      	orrs	r3, r2
 810eb24:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 810eb26:	697b      	ldr	r3, [r7, #20]
 810eb28:	f023 0302 	bic.w	r3, r3, #2
 810eb2c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 810eb2e:	683b      	ldr	r3, [r7, #0]
 810eb30:	689b      	ldr	r3, [r3, #8]
 810eb32:	697a      	ldr	r2, [r7, #20]
 810eb34:	4313      	orrs	r3, r2
 810eb36:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 810eb38:	687b      	ldr	r3, [r7, #4]
 810eb3a:	4a2c      	ldr	r2, [pc, #176]	; (810ebec <TIM_OC1_SetConfig+0x10c>)
 810eb3c:	4293      	cmp	r3, r2
 810eb3e:	d00f      	beq.n	810eb60 <TIM_OC1_SetConfig+0x80>
 810eb40:	687b      	ldr	r3, [r7, #4]
 810eb42:	4a2b      	ldr	r2, [pc, #172]	; (810ebf0 <TIM_OC1_SetConfig+0x110>)
 810eb44:	4293      	cmp	r3, r2
 810eb46:	d00b      	beq.n	810eb60 <TIM_OC1_SetConfig+0x80>
 810eb48:	687b      	ldr	r3, [r7, #4]
 810eb4a:	4a2a      	ldr	r2, [pc, #168]	; (810ebf4 <TIM_OC1_SetConfig+0x114>)
 810eb4c:	4293      	cmp	r3, r2
 810eb4e:	d007      	beq.n	810eb60 <TIM_OC1_SetConfig+0x80>
 810eb50:	687b      	ldr	r3, [r7, #4]
 810eb52:	4a29      	ldr	r2, [pc, #164]	; (810ebf8 <TIM_OC1_SetConfig+0x118>)
 810eb54:	4293      	cmp	r3, r2
 810eb56:	d003      	beq.n	810eb60 <TIM_OC1_SetConfig+0x80>
 810eb58:	687b      	ldr	r3, [r7, #4]
 810eb5a:	4a28      	ldr	r2, [pc, #160]	; (810ebfc <TIM_OC1_SetConfig+0x11c>)
 810eb5c:	4293      	cmp	r3, r2
 810eb5e:	d10c      	bne.n	810eb7a <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 810eb60:	697b      	ldr	r3, [r7, #20]
 810eb62:	f023 0308 	bic.w	r3, r3, #8
 810eb66:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 810eb68:	683b      	ldr	r3, [r7, #0]
 810eb6a:	68db      	ldr	r3, [r3, #12]
 810eb6c:	697a      	ldr	r2, [r7, #20]
 810eb6e:	4313      	orrs	r3, r2
 810eb70:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 810eb72:	697b      	ldr	r3, [r7, #20]
 810eb74:	f023 0304 	bic.w	r3, r3, #4
 810eb78:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 810eb7a:	687b      	ldr	r3, [r7, #4]
 810eb7c:	4a1b      	ldr	r2, [pc, #108]	; (810ebec <TIM_OC1_SetConfig+0x10c>)
 810eb7e:	4293      	cmp	r3, r2
 810eb80:	d00f      	beq.n	810eba2 <TIM_OC1_SetConfig+0xc2>
 810eb82:	687b      	ldr	r3, [r7, #4]
 810eb84:	4a1a      	ldr	r2, [pc, #104]	; (810ebf0 <TIM_OC1_SetConfig+0x110>)
 810eb86:	4293      	cmp	r3, r2
 810eb88:	d00b      	beq.n	810eba2 <TIM_OC1_SetConfig+0xc2>
 810eb8a:	687b      	ldr	r3, [r7, #4]
 810eb8c:	4a19      	ldr	r2, [pc, #100]	; (810ebf4 <TIM_OC1_SetConfig+0x114>)
 810eb8e:	4293      	cmp	r3, r2
 810eb90:	d007      	beq.n	810eba2 <TIM_OC1_SetConfig+0xc2>
 810eb92:	687b      	ldr	r3, [r7, #4]
 810eb94:	4a18      	ldr	r2, [pc, #96]	; (810ebf8 <TIM_OC1_SetConfig+0x118>)
 810eb96:	4293      	cmp	r3, r2
 810eb98:	d003      	beq.n	810eba2 <TIM_OC1_SetConfig+0xc2>
 810eb9a:	687b      	ldr	r3, [r7, #4]
 810eb9c:	4a17      	ldr	r2, [pc, #92]	; (810ebfc <TIM_OC1_SetConfig+0x11c>)
 810eb9e:	4293      	cmp	r3, r2
 810eba0:	d111      	bne.n	810ebc6 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 810eba2:	693b      	ldr	r3, [r7, #16]
 810eba4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 810eba8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 810ebaa:	693b      	ldr	r3, [r7, #16]
 810ebac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 810ebb0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 810ebb2:	683b      	ldr	r3, [r7, #0]
 810ebb4:	695b      	ldr	r3, [r3, #20]
 810ebb6:	693a      	ldr	r2, [r7, #16]
 810ebb8:	4313      	orrs	r3, r2
 810ebba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 810ebbc:	683b      	ldr	r3, [r7, #0]
 810ebbe:	699b      	ldr	r3, [r3, #24]
 810ebc0:	693a      	ldr	r2, [r7, #16]
 810ebc2:	4313      	orrs	r3, r2
 810ebc4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 810ebc6:	687b      	ldr	r3, [r7, #4]
 810ebc8:	693a      	ldr	r2, [r7, #16]
 810ebca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 810ebcc:	687b      	ldr	r3, [r7, #4]
 810ebce:	68fa      	ldr	r2, [r7, #12]
 810ebd0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 810ebd2:	683b      	ldr	r3, [r7, #0]
 810ebd4:	685a      	ldr	r2, [r3, #4]
 810ebd6:	687b      	ldr	r3, [r7, #4]
 810ebd8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 810ebda:	687b      	ldr	r3, [r7, #4]
 810ebdc:	697a      	ldr	r2, [r7, #20]
 810ebde:	621a      	str	r2, [r3, #32]
}
 810ebe0:	bf00      	nop
 810ebe2:	371c      	adds	r7, #28
 810ebe4:	46bd      	mov	sp, r7
 810ebe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 810ebea:	4770      	bx	lr
 810ebec:	40010000 	.word	0x40010000
 810ebf0:	40010400 	.word	0x40010400
 810ebf4:	40014000 	.word	0x40014000
 810ebf8:	40014400 	.word	0x40014400
 810ebfc:	40014800 	.word	0x40014800

0810ec00 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 810ec00:	b480      	push	{r7}
 810ec02:	b087      	sub	sp, #28
 810ec04:	af00      	add	r7, sp, #0
 810ec06:	6078      	str	r0, [r7, #4]
 810ec08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 810ec0a:	687b      	ldr	r3, [r7, #4]
 810ec0c:	6a1b      	ldr	r3, [r3, #32]
 810ec0e:	f023 0210 	bic.w	r2, r3, #16
 810ec12:	687b      	ldr	r3, [r7, #4]
 810ec14:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 810ec16:	687b      	ldr	r3, [r7, #4]
 810ec18:	6a1b      	ldr	r3, [r3, #32]
 810ec1a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 810ec1c:	687b      	ldr	r3, [r7, #4]
 810ec1e:	685b      	ldr	r3, [r3, #4]
 810ec20:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 810ec22:	687b      	ldr	r3, [r7, #4]
 810ec24:	699b      	ldr	r3, [r3, #24]
 810ec26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 810ec28:	68fb      	ldr	r3, [r7, #12]
 810ec2a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 810ec2e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 810ec32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 810ec34:	68fb      	ldr	r3, [r7, #12]
 810ec36:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 810ec3a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 810ec3c:	683b      	ldr	r3, [r7, #0]
 810ec3e:	681b      	ldr	r3, [r3, #0]
 810ec40:	021b      	lsls	r3, r3, #8
 810ec42:	68fa      	ldr	r2, [r7, #12]
 810ec44:	4313      	orrs	r3, r2
 810ec46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 810ec48:	697b      	ldr	r3, [r7, #20]
 810ec4a:	f023 0320 	bic.w	r3, r3, #32
 810ec4e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 810ec50:	683b      	ldr	r3, [r7, #0]
 810ec52:	689b      	ldr	r3, [r3, #8]
 810ec54:	011b      	lsls	r3, r3, #4
 810ec56:	697a      	ldr	r2, [r7, #20]
 810ec58:	4313      	orrs	r3, r2
 810ec5a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 810ec5c:	687b      	ldr	r3, [r7, #4]
 810ec5e:	4a28      	ldr	r2, [pc, #160]	; (810ed00 <TIM_OC2_SetConfig+0x100>)
 810ec60:	4293      	cmp	r3, r2
 810ec62:	d003      	beq.n	810ec6c <TIM_OC2_SetConfig+0x6c>
 810ec64:	687b      	ldr	r3, [r7, #4]
 810ec66:	4a27      	ldr	r2, [pc, #156]	; (810ed04 <TIM_OC2_SetConfig+0x104>)
 810ec68:	4293      	cmp	r3, r2
 810ec6a:	d10d      	bne.n	810ec88 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 810ec6c:	697b      	ldr	r3, [r7, #20]
 810ec6e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 810ec72:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 810ec74:	683b      	ldr	r3, [r7, #0]
 810ec76:	68db      	ldr	r3, [r3, #12]
 810ec78:	011b      	lsls	r3, r3, #4
 810ec7a:	697a      	ldr	r2, [r7, #20]
 810ec7c:	4313      	orrs	r3, r2
 810ec7e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 810ec80:	697b      	ldr	r3, [r7, #20]
 810ec82:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 810ec86:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 810ec88:	687b      	ldr	r3, [r7, #4]
 810ec8a:	4a1d      	ldr	r2, [pc, #116]	; (810ed00 <TIM_OC2_SetConfig+0x100>)
 810ec8c:	4293      	cmp	r3, r2
 810ec8e:	d00f      	beq.n	810ecb0 <TIM_OC2_SetConfig+0xb0>
 810ec90:	687b      	ldr	r3, [r7, #4]
 810ec92:	4a1c      	ldr	r2, [pc, #112]	; (810ed04 <TIM_OC2_SetConfig+0x104>)
 810ec94:	4293      	cmp	r3, r2
 810ec96:	d00b      	beq.n	810ecb0 <TIM_OC2_SetConfig+0xb0>
 810ec98:	687b      	ldr	r3, [r7, #4]
 810ec9a:	4a1b      	ldr	r2, [pc, #108]	; (810ed08 <TIM_OC2_SetConfig+0x108>)
 810ec9c:	4293      	cmp	r3, r2
 810ec9e:	d007      	beq.n	810ecb0 <TIM_OC2_SetConfig+0xb0>
 810eca0:	687b      	ldr	r3, [r7, #4]
 810eca2:	4a1a      	ldr	r2, [pc, #104]	; (810ed0c <TIM_OC2_SetConfig+0x10c>)
 810eca4:	4293      	cmp	r3, r2
 810eca6:	d003      	beq.n	810ecb0 <TIM_OC2_SetConfig+0xb0>
 810eca8:	687b      	ldr	r3, [r7, #4]
 810ecaa:	4a19      	ldr	r2, [pc, #100]	; (810ed10 <TIM_OC2_SetConfig+0x110>)
 810ecac:	4293      	cmp	r3, r2
 810ecae:	d113      	bne.n	810ecd8 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 810ecb0:	693b      	ldr	r3, [r7, #16]
 810ecb2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 810ecb6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 810ecb8:	693b      	ldr	r3, [r7, #16]
 810ecba:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 810ecbe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 810ecc0:	683b      	ldr	r3, [r7, #0]
 810ecc2:	695b      	ldr	r3, [r3, #20]
 810ecc4:	009b      	lsls	r3, r3, #2
 810ecc6:	693a      	ldr	r2, [r7, #16]
 810ecc8:	4313      	orrs	r3, r2
 810ecca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 810eccc:	683b      	ldr	r3, [r7, #0]
 810ecce:	699b      	ldr	r3, [r3, #24]
 810ecd0:	009b      	lsls	r3, r3, #2
 810ecd2:	693a      	ldr	r2, [r7, #16]
 810ecd4:	4313      	orrs	r3, r2
 810ecd6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 810ecd8:	687b      	ldr	r3, [r7, #4]
 810ecda:	693a      	ldr	r2, [r7, #16]
 810ecdc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 810ecde:	687b      	ldr	r3, [r7, #4]
 810ece0:	68fa      	ldr	r2, [r7, #12]
 810ece2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 810ece4:	683b      	ldr	r3, [r7, #0]
 810ece6:	685a      	ldr	r2, [r3, #4]
 810ece8:	687b      	ldr	r3, [r7, #4]
 810ecea:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 810ecec:	687b      	ldr	r3, [r7, #4]
 810ecee:	697a      	ldr	r2, [r7, #20]
 810ecf0:	621a      	str	r2, [r3, #32]
}
 810ecf2:	bf00      	nop
 810ecf4:	371c      	adds	r7, #28
 810ecf6:	46bd      	mov	sp, r7
 810ecf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 810ecfc:	4770      	bx	lr
 810ecfe:	bf00      	nop
 810ed00:	40010000 	.word	0x40010000
 810ed04:	40010400 	.word	0x40010400
 810ed08:	40014000 	.word	0x40014000
 810ed0c:	40014400 	.word	0x40014400
 810ed10:	40014800 	.word	0x40014800

0810ed14 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 810ed14:	b480      	push	{r7}
 810ed16:	b087      	sub	sp, #28
 810ed18:	af00      	add	r7, sp, #0
 810ed1a:	6078      	str	r0, [r7, #4]
 810ed1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 810ed1e:	687b      	ldr	r3, [r7, #4]
 810ed20:	6a1b      	ldr	r3, [r3, #32]
 810ed22:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 810ed26:	687b      	ldr	r3, [r7, #4]
 810ed28:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 810ed2a:	687b      	ldr	r3, [r7, #4]
 810ed2c:	6a1b      	ldr	r3, [r3, #32]
 810ed2e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 810ed30:	687b      	ldr	r3, [r7, #4]
 810ed32:	685b      	ldr	r3, [r3, #4]
 810ed34:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 810ed36:	687b      	ldr	r3, [r7, #4]
 810ed38:	69db      	ldr	r3, [r3, #28]
 810ed3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 810ed3c:	68fb      	ldr	r3, [r7, #12]
 810ed3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 810ed42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 810ed44:	68fb      	ldr	r3, [r7, #12]
 810ed46:	f023 0303 	bic.w	r3, r3, #3
 810ed4a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 810ed4c:	683b      	ldr	r3, [r7, #0]
 810ed4e:	681b      	ldr	r3, [r3, #0]
 810ed50:	68fa      	ldr	r2, [r7, #12]
 810ed52:	4313      	orrs	r3, r2
 810ed54:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 810ed56:	697b      	ldr	r3, [r7, #20]
 810ed58:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 810ed5c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 810ed5e:	683b      	ldr	r3, [r7, #0]
 810ed60:	689b      	ldr	r3, [r3, #8]
 810ed62:	021b      	lsls	r3, r3, #8
 810ed64:	697a      	ldr	r2, [r7, #20]
 810ed66:	4313      	orrs	r3, r2
 810ed68:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 810ed6a:	687b      	ldr	r3, [r7, #4]
 810ed6c:	4a27      	ldr	r2, [pc, #156]	; (810ee0c <TIM_OC3_SetConfig+0xf8>)
 810ed6e:	4293      	cmp	r3, r2
 810ed70:	d003      	beq.n	810ed7a <TIM_OC3_SetConfig+0x66>
 810ed72:	687b      	ldr	r3, [r7, #4]
 810ed74:	4a26      	ldr	r2, [pc, #152]	; (810ee10 <TIM_OC3_SetConfig+0xfc>)
 810ed76:	4293      	cmp	r3, r2
 810ed78:	d10d      	bne.n	810ed96 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 810ed7a:	697b      	ldr	r3, [r7, #20]
 810ed7c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 810ed80:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 810ed82:	683b      	ldr	r3, [r7, #0]
 810ed84:	68db      	ldr	r3, [r3, #12]
 810ed86:	021b      	lsls	r3, r3, #8
 810ed88:	697a      	ldr	r2, [r7, #20]
 810ed8a:	4313      	orrs	r3, r2
 810ed8c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 810ed8e:	697b      	ldr	r3, [r7, #20]
 810ed90:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 810ed94:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 810ed96:	687b      	ldr	r3, [r7, #4]
 810ed98:	4a1c      	ldr	r2, [pc, #112]	; (810ee0c <TIM_OC3_SetConfig+0xf8>)
 810ed9a:	4293      	cmp	r3, r2
 810ed9c:	d00f      	beq.n	810edbe <TIM_OC3_SetConfig+0xaa>
 810ed9e:	687b      	ldr	r3, [r7, #4]
 810eda0:	4a1b      	ldr	r2, [pc, #108]	; (810ee10 <TIM_OC3_SetConfig+0xfc>)
 810eda2:	4293      	cmp	r3, r2
 810eda4:	d00b      	beq.n	810edbe <TIM_OC3_SetConfig+0xaa>
 810eda6:	687b      	ldr	r3, [r7, #4]
 810eda8:	4a1a      	ldr	r2, [pc, #104]	; (810ee14 <TIM_OC3_SetConfig+0x100>)
 810edaa:	4293      	cmp	r3, r2
 810edac:	d007      	beq.n	810edbe <TIM_OC3_SetConfig+0xaa>
 810edae:	687b      	ldr	r3, [r7, #4]
 810edb0:	4a19      	ldr	r2, [pc, #100]	; (810ee18 <TIM_OC3_SetConfig+0x104>)
 810edb2:	4293      	cmp	r3, r2
 810edb4:	d003      	beq.n	810edbe <TIM_OC3_SetConfig+0xaa>
 810edb6:	687b      	ldr	r3, [r7, #4]
 810edb8:	4a18      	ldr	r2, [pc, #96]	; (810ee1c <TIM_OC3_SetConfig+0x108>)
 810edba:	4293      	cmp	r3, r2
 810edbc:	d113      	bne.n	810ede6 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 810edbe:	693b      	ldr	r3, [r7, #16]
 810edc0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 810edc4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 810edc6:	693b      	ldr	r3, [r7, #16]
 810edc8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 810edcc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 810edce:	683b      	ldr	r3, [r7, #0]
 810edd0:	695b      	ldr	r3, [r3, #20]
 810edd2:	011b      	lsls	r3, r3, #4
 810edd4:	693a      	ldr	r2, [r7, #16]
 810edd6:	4313      	orrs	r3, r2
 810edd8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 810edda:	683b      	ldr	r3, [r7, #0]
 810eddc:	699b      	ldr	r3, [r3, #24]
 810edde:	011b      	lsls	r3, r3, #4
 810ede0:	693a      	ldr	r2, [r7, #16]
 810ede2:	4313      	orrs	r3, r2
 810ede4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 810ede6:	687b      	ldr	r3, [r7, #4]
 810ede8:	693a      	ldr	r2, [r7, #16]
 810edea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 810edec:	687b      	ldr	r3, [r7, #4]
 810edee:	68fa      	ldr	r2, [r7, #12]
 810edf0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 810edf2:	683b      	ldr	r3, [r7, #0]
 810edf4:	685a      	ldr	r2, [r3, #4]
 810edf6:	687b      	ldr	r3, [r7, #4]
 810edf8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 810edfa:	687b      	ldr	r3, [r7, #4]
 810edfc:	697a      	ldr	r2, [r7, #20]
 810edfe:	621a      	str	r2, [r3, #32]
}
 810ee00:	bf00      	nop
 810ee02:	371c      	adds	r7, #28
 810ee04:	46bd      	mov	sp, r7
 810ee06:	f85d 7b04 	ldr.w	r7, [sp], #4
 810ee0a:	4770      	bx	lr
 810ee0c:	40010000 	.word	0x40010000
 810ee10:	40010400 	.word	0x40010400
 810ee14:	40014000 	.word	0x40014000
 810ee18:	40014400 	.word	0x40014400
 810ee1c:	40014800 	.word	0x40014800

0810ee20 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 810ee20:	b480      	push	{r7}
 810ee22:	b087      	sub	sp, #28
 810ee24:	af00      	add	r7, sp, #0
 810ee26:	6078      	str	r0, [r7, #4]
 810ee28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 810ee2a:	687b      	ldr	r3, [r7, #4]
 810ee2c:	6a1b      	ldr	r3, [r3, #32]
 810ee2e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 810ee32:	687b      	ldr	r3, [r7, #4]
 810ee34:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 810ee36:	687b      	ldr	r3, [r7, #4]
 810ee38:	6a1b      	ldr	r3, [r3, #32]
 810ee3a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 810ee3c:	687b      	ldr	r3, [r7, #4]
 810ee3e:	685b      	ldr	r3, [r3, #4]
 810ee40:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 810ee42:	687b      	ldr	r3, [r7, #4]
 810ee44:	69db      	ldr	r3, [r3, #28]
 810ee46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 810ee48:	68fb      	ldr	r3, [r7, #12]
 810ee4a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 810ee4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 810ee50:	68fb      	ldr	r3, [r7, #12]
 810ee52:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 810ee56:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 810ee58:	683b      	ldr	r3, [r7, #0]
 810ee5a:	681b      	ldr	r3, [r3, #0]
 810ee5c:	021b      	lsls	r3, r3, #8
 810ee5e:	68fa      	ldr	r2, [r7, #12]
 810ee60:	4313      	orrs	r3, r2
 810ee62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 810ee64:	693b      	ldr	r3, [r7, #16]
 810ee66:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 810ee6a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 810ee6c:	683b      	ldr	r3, [r7, #0]
 810ee6e:	689b      	ldr	r3, [r3, #8]
 810ee70:	031b      	lsls	r3, r3, #12
 810ee72:	693a      	ldr	r2, [r7, #16]
 810ee74:	4313      	orrs	r3, r2
 810ee76:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 810ee78:	687b      	ldr	r3, [r7, #4]
 810ee7a:	4a18      	ldr	r2, [pc, #96]	; (810eedc <TIM_OC4_SetConfig+0xbc>)
 810ee7c:	4293      	cmp	r3, r2
 810ee7e:	d00f      	beq.n	810eea0 <TIM_OC4_SetConfig+0x80>
 810ee80:	687b      	ldr	r3, [r7, #4]
 810ee82:	4a17      	ldr	r2, [pc, #92]	; (810eee0 <TIM_OC4_SetConfig+0xc0>)
 810ee84:	4293      	cmp	r3, r2
 810ee86:	d00b      	beq.n	810eea0 <TIM_OC4_SetConfig+0x80>
 810ee88:	687b      	ldr	r3, [r7, #4]
 810ee8a:	4a16      	ldr	r2, [pc, #88]	; (810eee4 <TIM_OC4_SetConfig+0xc4>)
 810ee8c:	4293      	cmp	r3, r2
 810ee8e:	d007      	beq.n	810eea0 <TIM_OC4_SetConfig+0x80>
 810ee90:	687b      	ldr	r3, [r7, #4]
 810ee92:	4a15      	ldr	r2, [pc, #84]	; (810eee8 <TIM_OC4_SetConfig+0xc8>)
 810ee94:	4293      	cmp	r3, r2
 810ee96:	d003      	beq.n	810eea0 <TIM_OC4_SetConfig+0x80>
 810ee98:	687b      	ldr	r3, [r7, #4]
 810ee9a:	4a14      	ldr	r2, [pc, #80]	; (810eeec <TIM_OC4_SetConfig+0xcc>)
 810ee9c:	4293      	cmp	r3, r2
 810ee9e:	d109      	bne.n	810eeb4 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 810eea0:	697b      	ldr	r3, [r7, #20]
 810eea2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 810eea6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 810eea8:	683b      	ldr	r3, [r7, #0]
 810eeaa:	695b      	ldr	r3, [r3, #20]
 810eeac:	019b      	lsls	r3, r3, #6
 810eeae:	697a      	ldr	r2, [r7, #20]
 810eeb0:	4313      	orrs	r3, r2
 810eeb2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 810eeb4:	687b      	ldr	r3, [r7, #4]
 810eeb6:	697a      	ldr	r2, [r7, #20]
 810eeb8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 810eeba:	687b      	ldr	r3, [r7, #4]
 810eebc:	68fa      	ldr	r2, [r7, #12]
 810eebe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 810eec0:	683b      	ldr	r3, [r7, #0]
 810eec2:	685a      	ldr	r2, [r3, #4]
 810eec4:	687b      	ldr	r3, [r7, #4]
 810eec6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 810eec8:	687b      	ldr	r3, [r7, #4]
 810eeca:	693a      	ldr	r2, [r7, #16]
 810eecc:	621a      	str	r2, [r3, #32]
}
 810eece:	bf00      	nop
 810eed0:	371c      	adds	r7, #28
 810eed2:	46bd      	mov	sp, r7
 810eed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 810eed8:	4770      	bx	lr
 810eeda:	bf00      	nop
 810eedc:	40010000 	.word	0x40010000
 810eee0:	40010400 	.word	0x40010400
 810eee4:	40014000 	.word	0x40014000
 810eee8:	40014400 	.word	0x40014400
 810eeec:	40014800 	.word	0x40014800

0810eef0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 810eef0:	b480      	push	{r7}
 810eef2:	b087      	sub	sp, #28
 810eef4:	af00      	add	r7, sp, #0
 810eef6:	6078      	str	r0, [r7, #4]
 810eef8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 810eefa:	687b      	ldr	r3, [r7, #4]
 810eefc:	6a1b      	ldr	r3, [r3, #32]
 810eefe:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 810ef02:	687b      	ldr	r3, [r7, #4]
 810ef04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 810ef06:	687b      	ldr	r3, [r7, #4]
 810ef08:	6a1b      	ldr	r3, [r3, #32]
 810ef0a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 810ef0c:	687b      	ldr	r3, [r7, #4]
 810ef0e:	685b      	ldr	r3, [r3, #4]
 810ef10:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 810ef12:	687b      	ldr	r3, [r7, #4]
 810ef14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810ef16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 810ef18:	68fb      	ldr	r3, [r7, #12]
 810ef1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 810ef1e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 810ef20:	683b      	ldr	r3, [r7, #0]
 810ef22:	681b      	ldr	r3, [r3, #0]
 810ef24:	68fa      	ldr	r2, [r7, #12]
 810ef26:	4313      	orrs	r3, r2
 810ef28:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 810ef2a:	693b      	ldr	r3, [r7, #16]
 810ef2c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 810ef30:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 810ef32:	683b      	ldr	r3, [r7, #0]
 810ef34:	689b      	ldr	r3, [r3, #8]
 810ef36:	041b      	lsls	r3, r3, #16
 810ef38:	693a      	ldr	r2, [r7, #16]
 810ef3a:	4313      	orrs	r3, r2
 810ef3c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 810ef3e:	687b      	ldr	r3, [r7, #4]
 810ef40:	4a17      	ldr	r2, [pc, #92]	; (810efa0 <TIM_OC5_SetConfig+0xb0>)
 810ef42:	4293      	cmp	r3, r2
 810ef44:	d00f      	beq.n	810ef66 <TIM_OC5_SetConfig+0x76>
 810ef46:	687b      	ldr	r3, [r7, #4]
 810ef48:	4a16      	ldr	r2, [pc, #88]	; (810efa4 <TIM_OC5_SetConfig+0xb4>)
 810ef4a:	4293      	cmp	r3, r2
 810ef4c:	d00b      	beq.n	810ef66 <TIM_OC5_SetConfig+0x76>
 810ef4e:	687b      	ldr	r3, [r7, #4]
 810ef50:	4a15      	ldr	r2, [pc, #84]	; (810efa8 <TIM_OC5_SetConfig+0xb8>)
 810ef52:	4293      	cmp	r3, r2
 810ef54:	d007      	beq.n	810ef66 <TIM_OC5_SetConfig+0x76>
 810ef56:	687b      	ldr	r3, [r7, #4]
 810ef58:	4a14      	ldr	r2, [pc, #80]	; (810efac <TIM_OC5_SetConfig+0xbc>)
 810ef5a:	4293      	cmp	r3, r2
 810ef5c:	d003      	beq.n	810ef66 <TIM_OC5_SetConfig+0x76>
 810ef5e:	687b      	ldr	r3, [r7, #4]
 810ef60:	4a13      	ldr	r2, [pc, #76]	; (810efb0 <TIM_OC5_SetConfig+0xc0>)
 810ef62:	4293      	cmp	r3, r2
 810ef64:	d109      	bne.n	810ef7a <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 810ef66:	697b      	ldr	r3, [r7, #20]
 810ef68:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 810ef6c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 810ef6e:	683b      	ldr	r3, [r7, #0]
 810ef70:	695b      	ldr	r3, [r3, #20]
 810ef72:	021b      	lsls	r3, r3, #8
 810ef74:	697a      	ldr	r2, [r7, #20]
 810ef76:	4313      	orrs	r3, r2
 810ef78:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 810ef7a:	687b      	ldr	r3, [r7, #4]
 810ef7c:	697a      	ldr	r2, [r7, #20]
 810ef7e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 810ef80:	687b      	ldr	r3, [r7, #4]
 810ef82:	68fa      	ldr	r2, [r7, #12]
 810ef84:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 810ef86:	683b      	ldr	r3, [r7, #0]
 810ef88:	685a      	ldr	r2, [r3, #4]
 810ef8a:	687b      	ldr	r3, [r7, #4]
 810ef8c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 810ef8e:	687b      	ldr	r3, [r7, #4]
 810ef90:	693a      	ldr	r2, [r7, #16]
 810ef92:	621a      	str	r2, [r3, #32]
}
 810ef94:	bf00      	nop
 810ef96:	371c      	adds	r7, #28
 810ef98:	46bd      	mov	sp, r7
 810ef9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810ef9e:	4770      	bx	lr
 810efa0:	40010000 	.word	0x40010000
 810efa4:	40010400 	.word	0x40010400
 810efa8:	40014000 	.word	0x40014000
 810efac:	40014400 	.word	0x40014400
 810efb0:	40014800 	.word	0x40014800

0810efb4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 810efb4:	b480      	push	{r7}
 810efb6:	b087      	sub	sp, #28
 810efb8:	af00      	add	r7, sp, #0
 810efba:	6078      	str	r0, [r7, #4]
 810efbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 810efbe:	687b      	ldr	r3, [r7, #4]
 810efc0:	6a1b      	ldr	r3, [r3, #32]
 810efc2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 810efc6:	687b      	ldr	r3, [r7, #4]
 810efc8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 810efca:	687b      	ldr	r3, [r7, #4]
 810efcc:	6a1b      	ldr	r3, [r3, #32]
 810efce:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 810efd0:	687b      	ldr	r3, [r7, #4]
 810efd2:	685b      	ldr	r3, [r3, #4]
 810efd4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 810efd6:	687b      	ldr	r3, [r7, #4]
 810efd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810efda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 810efdc:	68fb      	ldr	r3, [r7, #12]
 810efde:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 810efe2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 810efe4:	683b      	ldr	r3, [r7, #0]
 810efe6:	681b      	ldr	r3, [r3, #0]
 810efe8:	021b      	lsls	r3, r3, #8
 810efea:	68fa      	ldr	r2, [r7, #12]
 810efec:	4313      	orrs	r3, r2
 810efee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 810eff0:	693b      	ldr	r3, [r7, #16]
 810eff2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 810eff6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 810eff8:	683b      	ldr	r3, [r7, #0]
 810effa:	689b      	ldr	r3, [r3, #8]
 810effc:	051b      	lsls	r3, r3, #20
 810effe:	693a      	ldr	r2, [r7, #16]
 810f000:	4313      	orrs	r3, r2
 810f002:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 810f004:	687b      	ldr	r3, [r7, #4]
 810f006:	4a18      	ldr	r2, [pc, #96]	; (810f068 <TIM_OC6_SetConfig+0xb4>)
 810f008:	4293      	cmp	r3, r2
 810f00a:	d00f      	beq.n	810f02c <TIM_OC6_SetConfig+0x78>
 810f00c:	687b      	ldr	r3, [r7, #4]
 810f00e:	4a17      	ldr	r2, [pc, #92]	; (810f06c <TIM_OC6_SetConfig+0xb8>)
 810f010:	4293      	cmp	r3, r2
 810f012:	d00b      	beq.n	810f02c <TIM_OC6_SetConfig+0x78>
 810f014:	687b      	ldr	r3, [r7, #4]
 810f016:	4a16      	ldr	r2, [pc, #88]	; (810f070 <TIM_OC6_SetConfig+0xbc>)
 810f018:	4293      	cmp	r3, r2
 810f01a:	d007      	beq.n	810f02c <TIM_OC6_SetConfig+0x78>
 810f01c:	687b      	ldr	r3, [r7, #4]
 810f01e:	4a15      	ldr	r2, [pc, #84]	; (810f074 <TIM_OC6_SetConfig+0xc0>)
 810f020:	4293      	cmp	r3, r2
 810f022:	d003      	beq.n	810f02c <TIM_OC6_SetConfig+0x78>
 810f024:	687b      	ldr	r3, [r7, #4]
 810f026:	4a14      	ldr	r2, [pc, #80]	; (810f078 <TIM_OC6_SetConfig+0xc4>)
 810f028:	4293      	cmp	r3, r2
 810f02a:	d109      	bne.n	810f040 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 810f02c:	697b      	ldr	r3, [r7, #20]
 810f02e:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 810f032:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 810f034:	683b      	ldr	r3, [r7, #0]
 810f036:	695b      	ldr	r3, [r3, #20]
 810f038:	029b      	lsls	r3, r3, #10
 810f03a:	697a      	ldr	r2, [r7, #20]
 810f03c:	4313      	orrs	r3, r2
 810f03e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 810f040:	687b      	ldr	r3, [r7, #4]
 810f042:	697a      	ldr	r2, [r7, #20]
 810f044:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 810f046:	687b      	ldr	r3, [r7, #4]
 810f048:	68fa      	ldr	r2, [r7, #12]
 810f04a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 810f04c:	683b      	ldr	r3, [r7, #0]
 810f04e:	685a      	ldr	r2, [r3, #4]
 810f050:	687b      	ldr	r3, [r7, #4]
 810f052:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 810f054:	687b      	ldr	r3, [r7, #4]
 810f056:	693a      	ldr	r2, [r7, #16]
 810f058:	621a      	str	r2, [r3, #32]
}
 810f05a:	bf00      	nop
 810f05c:	371c      	adds	r7, #28
 810f05e:	46bd      	mov	sp, r7
 810f060:	f85d 7b04 	ldr.w	r7, [sp], #4
 810f064:	4770      	bx	lr
 810f066:	bf00      	nop
 810f068:	40010000 	.word	0x40010000
 810f06c:	40010400 	.word	0x40010400
 810f070:	40014000 	.word	0x40014000
 810f074:	40014400 	.word	0x40014400
 810f078:	40014800 	.word	0x40014800

0810f07c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 810f07c:	b480      	push	{r7}
 810f07e:	b087      	sub	sp, #28
 810f080:	af00      	add	r7, sp, #0
 810f082:	60f8      	str	r0, [r7, #12]
 810f084:	60b9      	str	r1, [r7, #8]
 810f086:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 810f088:	68fb      	ldr	r3, [r7, #12]
 810f08a:	6a1b      	ldr	r3, [r3, #32]
 810f08c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 810f08e:	68fb      	ldr	r3, [r7, #12]
 810f090:	6a1b      	ldr	r3, [r3, #32]
 810f092:	f023 0201 	bic.w	r2, r3, #1
 810f096:	68fb      	ldr	r3, [r7, #12]
 810f098:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 810f09a:	68fb      	ldr	r3, [r7, #12]
 810f09c:	699b      	ldr	r3, [r3, #24]
 810f09e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 810f0a0:	693b      	ldr	r3, [r7, #16]
 810f0a2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 810f0a6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 810f0a8:	687b      	ldr	r3, [r7, #4]
 810f0aa:	011b      	lsls	r3, r3, #4
 810f0ac:	693a      	ldr	r2, [r7, #16]
 810f0ae:	4313      	orrs	r3, r2
 810f0b0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 810f0b2:	697b      	ldr	r3, [r7, #20]
 810f0b4:	f023 030a 	bic.w	r3, r3, #10
 810f0b8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 810f0ba:	697a      	ldr	r2, [r7, #20]
 810f0bc:	68bb      	ldr	r3, [r7, #8]
 810f0be:	4313      	orrs	r3, r2
 810f0c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 810f0c2:	68fb      	ldr	r3, [r7, #12]
 810f0c4:	693a      	ldr	r2, [r7, #16]
 810f0c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 810f0c8:	68fb      	ldr	r3, [r7, #12]
 810f0ca:	697a      	ldr	r2, [r7, #20]
 810f0cc:	621a      	str	r2, [r3, #32]
}
 810f0ce:	bf00      	nop
 810f0d0:	371c      	adds	r7, #28
 810f0d2:	46bd      	mov	sp, r7
 810f0d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 810f0d8:	4770      	bx	lr

0810f0da <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 810f0da:	b480      	push	{r7}
 810f0dc:	b087      	sub	sp, #28
 810f0de:	af00      	add	r7, sp, #0
 810f0e0:	60f8      	str	r0, [r7, #12]
 810f0e2:	60b9      	str	r1, [r7, #8]
 810f0e4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 810f0e6:	68fb      	ldr	r3, [r7, #12]
 810f0e8:	6a1b      	ldr	r3, [r3, #32]
 810f0ea:	f023 0210 	bic.w	r2, r3, #16
 810f0ee:	68fb      	ldr	r3, [r7, #12]
 810f0f0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 810f0f2:	68fb      	ldr	r3, [r7, #12]
 810f0f4:	699b      	ldr	r3, [r3, #24]
 810f0f6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 810f0f8:	68fb      	ldr	r3, [r7, #12]
 810f0fa:	6a1b      	ldr	r3, [r3, #32]
 810f0fc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 810f0fe:	697b      	ldr	r3, [r7, #20]
 810f100:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 810f104:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 810f106:	687b      	ldr	r3, [r7, #4]
 810f108:	031b      	lsls	r3, r3, #12
 810f10a:	697a      	ldr	r2, [r7, #20]
 810f10c:	4313      	orrs	r3, r2
 810f10e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 810f110:	693b      	ldr	r3, [r7, #16]
 810f112:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 810f116:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 810f118:	68bb      	ldr	r3, [r7, #8]
 810f11a:	011b      	lsls	r3, r3, #4
 810f11c:	693a      	ldr	r2, [r7, #16]
 810f11e:	4313      	orrs	r3, r2
 810f120:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 810f122:	68fb      	ldr	r3, [r7, #12]
 810f124:	697a      	ldr	r2, [r7, #20]
 810f126:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 810f128:	68fb      	ldr	r3, [r7, #12]
 810f12a:	693a      	ldr	r2, [r7, #16]
 810f12c:	621a      	str	r2, [r3, #32]
}
 810f12e:	bf00      	nop
 810f130:	371c      	adds	r7, #28
 810f132:	46bd      	mov	sp, r7
 810f134:	f85d 7b04 	ldr.w	r7, [sp], #4
 810f138:	4770      	bx	lr

0810f13a <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 810f13a:	b480      	push	{r7}
 810f13c:	b085      	sub	sp, #20
 810f13e:	af00      	add	r7, sp, #0
 810f140:	6078      	str	r0, [r7, #4]
 810f142:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 810f144:	687b      	ldr	r3, [r7, #4]
 810f146:	689b      	ldr	r3, [r3, #8]
 810f148:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 810f14a:	68fb      	ldr	r3, [r7, #12]
 810f14c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 810f150:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 810f154:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 810f156:	683a      	ldr	r2, [r7, #0]
 810f158:	68fb      	ldr	r3, [r7, #12]
 810f15a:	4313      	orrs	r3, r2
 810f15c:	f043 0307 	orr.w	r3, r3, #7
 810f160:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 810f162:	687b      	ldr	r3, [r7, #4]
 810f164:	68fa      	ldr	r2, [r7, #12]
 810f166:	609a      	str	r2, [r3, #8]
}
 810f168:	bf00      	nop
 810f16a:	3714      	adds	r7, #20
 810f16c:	46bd      	mov	sp, r7
 810f16e:	f85d 7b04 	ldr.w	r7, [sp], #4
 810f172:	4770      	bx	lr

0810f174 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 810f174:	b480      	push	{r7}
 810f176:	b087      	sub	sp, #28
 810f178:	af00      	add	r7, sp, #0
 810f17a:	60f8      	str	r0, [r7, #12]
 810f17c:	60b9      	str	r1, [r7, #8]
 810f17e:	607a      	str	r2, [r7, #4]
 810f180:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 810f182:	68fb      	ldr	r3, [r7, #12]
 810f184:	689b      	ldr	r3, [r3, #8]
 810f186:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 810f188:	697b      	ldr	r3, [r7, #20]
 810f18a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 810f18e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 810f190:	683b      	ldr	r3, [r7, #0]
 810f192:	021a      	lsls	r2, r3, #8
 810f194:	687b      	ldr	r3, [r7, #4]
 810f196:	431a      	orrs	r2, r3
 810f198:	68bb      	ldr	r3, [r7, #8]
 810f19a:	4313      	orrs	r3, r2
 810f19c:	697a      	ldr	r2, [r7, #20]
 810f19e:	4313      	orrs	r3, r2
 810f1a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 810f1a2:	68fb      	ldr	r3, [r7, #12]
 810f1a4:	697a      	ldr	r2, [r7, #20]
 810f1a6:	609a      	str	r2, [r3, #8]
}
 810f1a8:	bf00      	nop
 810f1aa:	371c      	adds	r7, #28
 810f1ac:	46bd      	mov	sp, r7
 810f1ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 810f1b2:	4770      	bx	lr

0810f1b4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 810f1b4:	b480      	push	{r7}
 810f1b6:	b085      	sub	sp, #20
 810f1b8:	af00      	add	r7, sp, #0
 810f1ba:	6078      	str	r0, [r7, #4]
 810f1bc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 810f1be:	687b      	ldr	r3, [r7, #4]
 810f1c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 810f1c4:	2b01      	cmp	r3, #1
 810f1c6:	d101      	bne.n	810f1cc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 810f1c8:	2302      	movs	r3, #2
 810f1ca:	e068      	b.n	810f29e <HAL_TIMEx_MasterConfigSynchronization+0xea>
 810f1cc:	687b      	ldr	r3, [r7, #4]
 810f1ce:	2201      	movs	r2, #1
 810f1d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 810f1d4:	687b      	ldr	r3, [r7, #4]
 810f1d6:	2202      	movs	r2, #2
 810f1d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 810f1dc:	687b      	ldr	r3, [r7, #4]
 810f1de:	681b      	ldr	r3, [r3, #0]
 810f1e0:	685b      	ldr	r3, [r3, #4]
 810f1e2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 810f1e4:	687b      	ldr	r3, [r7, #4]
 810f1e6:	681b      	ldr	r3, [r3, #0]
 810f1e8:	689b      	ldr	r3, [r3, #8]
 810f1ea:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 810f1ec:	687b      	ldr	r3, [r7, #4]
 810f1ee:	681b      	ldr	r3, [r3, #0]
 810f1f0:	4a2e      	ldr	r2, [pc, #184]	; (810f2ac <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 810f1f2:	4293      	cmp	r3, r2
 810f1f4:	d004      	beq.n	810f200 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 810f1f6:	687b      	ldr	r3, [r7, #4]
 810f1f8:	681b      	ldr	r3, [r3, #0]
 810f1fa:	4a2d      	ldr	r2, [pc, #180]	; (810f2b0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 810f1fc:	4293      	cmp	r3, r2
 810f1fe:	d108      	bne.n	810f212 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 810f200:	68fb      	ldr	r3, [r7, #12]
 810f202:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 810f206:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 810f208:	683b      	ldr	r3, [r7, #0]
 810f20a:	685b      	ldr	r3, [r3, #4]
 810f20c:	68fa      	ldr	r2, [r7, #12]
 810f20e:	4313      	orrs	r3, r2
 810f210:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 810f212:	68fb      	ldr	r3, [r7, #12]
 810f214:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 810f218:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 810f21a:	683b      	ldr	r3, [r7, #0]
 810f21c:	681b      	ldr	r3, [r3, #0]
 810f21e:	68fa      	ldr	r2, [r7, #12]
 810f220:	4313      	orrs	r3, r2
 810f222:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 810f224:	687b      	ldr	r3, [r7, #4]
 810f226:	681b      	ldr	r3, [r3, #0]
 810f228:	68fa      	ldr	r2, [r7, #12]
 810f22a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 810f22c:	687b      	ldr	r3, [r7, #4]
 810f22e:	681b      	ldr	r3, [r3, #0]
 810f230:	4a1e      	ldr	r2, [pc, #120]	; (810f2ac <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 810f232:	4293      	cmp	r3, r2
 810f234:	d01d      	beq.n	810f272 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 810f236:	687b      	ldr	r3, [r7, #4]
 810f238:	681b      	ldr	r3, [r3, #0]
 810f23a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 810f23e:	d018      	beq.n	810f272 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 810f240:	687b      	ldr	r3, [r7, #4]
 810f242:	681b      	ldr	r3, [r3, #0]
 810f244:	4a1b      	ldr	r2, [pc, #108]	; (810f2b4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 810f246:	4293      	cmp	r3, r2
 810f248:	d013      	beq.n	810f272 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 810f24a:	687b      	ldr	r3, [r7, #4]
 810f24c:	681b      	ldr	r3, [r3, #0]
 810f24e:	4a1a      	ldr	r2, [pc, #104]	; (810f2b8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 810f250:	4293      	cmp	r3, r2
 810f252:	d00e      	beq.n	810f272 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 810f254:	687b      	ldr	r3, [r7, #4]
 810f256:	681b      	ldr	r3, [r3, #0]
 810f258:	4a18      	ldr	r2, [pc, #96]	; (810f2bc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 810f25a:	4293      	cmp	r3, r2
 810f25c:	d009      	beq.n	810f272 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 810f25e:	687b      	ldr	r3, [r7, #4]
 810f260:	681b      	ldr	r3, [r3, #0]
 810f262:	4a13      	ldr	r2, [pc, #76]	; (810f2b0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 810f264:	4293      	cmp	r3, r2
 810f266:	d004      	beq.n	810f272 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 810f268:	687b      	ldr	r3, [r7, #4]
 810f26a:	681b      	ldr	r3, [r3, #0]
 810f26c:	4a14      	ldr	r2, [pc, #80]	; (810f2c0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 810f26e:	4293      	cmp	r3, r2
 810f270:	d10c      	bne.n	810f28c <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 810f272:	68bb      	ldr	r3, [r7, #8]
 810f274:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 810f278:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 810f27a:	683b      	ldr	r3, [r7, #0]
 810f27c:	689b      	ldr	r3, [r3, #8]
 810f27e:	68ba      	ldr	r2, [r7, #8]
 810f280:	4313      	orrs	r3, r2
 810f282:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 810f284:	687b      	ldr	r3, [r7, #4]
 810f286:	681b      	ldr	r3, [r3, #0]
 810f288:	68ba      	ldr	r2, [r7, #8]
 810f28a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 810f28c:	687b      	ldr	r3, [r7, #4]
 810f28e:	2201      	movs	r2, #1
 810f290:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 810f294:	687b      	ldr	r3, [r7, #4]
 810f296:	2200      	movs	r2, #0
 810f298:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 810f29c:	2300      	movs	r3, #0
}
 810f29e:	4618      	mov	r0, r3
 810f2a0:	3714      	adds	r7, #20
 810f2a2:	46bd      	mov	sp, r7
 810f2a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 810f2a8:	4770      	bx	lr
 810f2aa:	bf00      	nop
 810f2ac:	40010000 	.word	0x40010000
 810f2b0:	40010400 	.word	0x40010400
 810f2b4:	40000400 	.word	0x40000400
 810f2b8:	40000800 	.word	0x40000800
 810f2bc:	40000c00 	.word	0x40000c00
 810f2c0:	40001800 	.word	0x40001800

0810f2c4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 810f2c4:	b480      	push	{r7}
 810f2c6:	b085      	sub	sp, #20
 810f2c8:	af00      	add	r7, sp, #0
 810f2ca:	6078      	str	r0, [r7, #4]
 810f2cc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 810f2ce:	2300      	movs	r3, #0
 810f2d0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 810f2d2:	687b      	ldr	r3, [r7, #4]
 810f2d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 810f2d8:	2b01      	cmp	r3, #1
 810f2da:	d101      	bne.n	810f2e0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 810f2dc:	2302      	movs	r3, #2
 810f2de:	e065      	b.n	810f3ac <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 810f2e0:	687b      	ldr	r3, [r7, #4]
 810f2e2:	2201      	movs	r2, #1
 810f2e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 810f2e8:	68fb      	ldr	r3, [r7, #12]
 810f2ea:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 810f2ee:	683b      	ldr	r3, [r7, #0]
 810f2f0:	68db      	ldr	r3, [r3, #12]
 810f2f2:	4313      	orrs	r3, r2
 810f2f4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 810f2f6:	68fb      	ldr	r3, [r7, #12]
 810f2f8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 810f2fc:	683b      	ldr	r3, [r7, #0]
 810f2fe:	689b      	ldr	r3, [r3, #8]
 810f300:	4313      	orrs	r3, r2
 810f302:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 810f304:	68fb      	ldr	r3, [r7, #12]
 810f306:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 810f30a:	683b      	ldr	r3, [r7, #0]
 810f30c:	685b      	ldr	r3, [r3, #4]
 810f30e:	4313      	orrs	r3, r2
 810f310:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 810f312:	68fb      	ldr	r3, [r7, #12]
 810f314:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 810f318:	683b      	ldr	r3, [r7, #0]
 810f31a:	681b      	ldr	r3, [r3, #0]
 810f31c:	4313      	orrs	r3, r2
 810f31e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 810f320:	68fb      	ldr	r3, [r7, #12]
 810f322:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 810f326:	683b      	ldr	r3, [r7, #0]
 810f328:	691b      	ldr	r3, [r3, #16]
 810f32a:	4313      	orrs	r3, r2
 810f32c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 810f32e:	68fb      	ldr	r3, [r7, #12]
 810f330:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 810f334:	683b      	ldr	r3, [r7, #0]
 810f336:	695b      	ldr	r3, [r3, #20]
 810f338:	4313      	orrs	r3, r2
 810f33a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 810f33c:	68fb      	ldr	r3, [r7, #12]
 810f33e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 810f342:	683b      	ldr	r3, [r7, #0]
 810f344:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810f346:	4313      	orrs	r3, r2
 810f348:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 810f34a:	68fb      	ldr	r3, [r7, #12]
 810f34c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 810f350:	683b      	ldr	r3, [r7, #0]
 810f352:	699b      	ldr	r3, [r3, #24]
 810f354:	041b      	lsls	r3, r3, #16
 810f356:	4313      	orrs	r3, r2
 810f358:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 810f35a:	687b      	ldr	r3, [r7, #4]
 810f35c:	681b      	ldr	r3, [r3, #0]
 810f35e:	4a16      	ldr	r2, [pc, #88]	; (810f3b8 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 810f360:	4293      	cmp	r3, r2
 810f362:	d004      	beq.n	810f36e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 810f364:	687b      	ldr	r3, [r7, #4]
 810f366:	681b      	ldr	r3, [r3, #0]
 810f368:	4a14      	ldr	r2, [pc, #80]	; (810f3bc <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 810f36a:	4293      	cmp	r3, r2
 810f36c:	d115      	bne.n	810f39a <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 810f36e:	68fb      	ldr	r3, [r7, #12]
 810f370:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 810f374:	683b      	ldr	r3, [r7, #0]
 810f376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810f378:	051b      	lsls	r3, r3, #20
 810f37a:	4313      	orrs	r3, r2
 810f37c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 810f37e:	68fb      	ldr	r3, [r7, #12]
 810f380:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 810f384:	683b      	ldr	r3, [r7, #0]
 810f386:	69db      	ldr	r3, [r3, #28]
 810f388:	4313      	orrs	r3, r2
 810f38a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 810f38c:	68fb      	ldr	r3, [r7, #12]
 810f38e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 810f392:	683b      	ldr	r3, [r7, #0]
 810f394:	6a1b      	ldr	r3, [r3, #32]
 810f396:	4313      	orrs	r3, r2
 810f398:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 810f39a:	687b      	ldr	r3, [r7, #4]
 810f39c:	681b      	ldr	r3, [r3, #0]
 810f39e:	68fa      	ldr	r2, [r7, #12]
 810f3a0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 810f3a2:	687b      	ldr	r3, [r7, #4]
 810f3a4:	2200      	movs	r2, #0
 810f3a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 810f3aa:	2300      	movs	r3, #0
}
 810f3ac:	4618      	mov	r0, r3
 810f3ae:	3714      	adds	r7, #20
 810f3b0:	46bd      	mov	sp, r7
 810f3b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 810f3b6:	4770      	bx	lr
 810f3b8:	40010000 	.word	0x40010000
 810f3bc:	40010400 	.word	0x40010400

0810f3c0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 810f3c0:	b480      	push	{r7}
 810f3c2:	b083      	sub	sp, #12
 810f3c4:	af00      	add	r7, sp, #0
 810f3c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 810f3c8:	bf00      	nop
 810f3ca:	370c      	adds	r7, #12
 810f3cc:	46bd      	mov	sp, r7
 810f3ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 810f3d2:	4770      	bx	lr

0810f3d4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 810f3d4:	b480      	push	{r7}
 810f3d6:	b083      	sub	sp, #12
 810f3d8:	af00      	add	r7, sp, #0
 810f3da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 810f3dc:	bf00      	nop
 810f3de:	370c      	adds	r7, #12
 810f3e0:	46bd      	mov	sp, r7
 810f3e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 810f3e6:	4770      	bx	lr

0810f3e8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 810f3e8:	b480      	push	{r7}
 810f3ea:	b083      	sub	sp, #12
 810f3ec:	af00      	add	r7, sp, #0
 810f3ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 810f3f0:	bf00      	nop
 810f3f2:	370c      	adds	r7, #12
 810f3f4:	46bd      	mov	sp, r7
 810f3f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 810f3fa:	4770      	bx	lr

0810f3fc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 810f3fc:	b580      	push	{r7, lr}
 810f3fe:	b082      	sub	sp, #8
 810f400:	af00      	add	r7, sp, #0
 810f402:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 810f404:	687b      	ldr	r3, [r7, #4]
 810f406:	2b00      	cmp	r3, #0
 810f408:	d101      	bne.n	810f40e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 810f40a:	2301      	movs	r3, #1
 810f40c:	e042      	b.n	810f494 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 810f40e:	687b      	ldr	r3, [r7, #4]
 810f410:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810f414:	2b00      	cmp	r3, #0
 810f416:	d106      	bne.n	810f426 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 810f418:	687b      	ldr	r3, [r7, #4]
 810f41a:	2200      	movs	r2, #0
 810f41c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 810f420:	6878      	ldr	r0, [r7, #4]
 810f422:	f7f3 f97d 	bl	8102720 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 810f426:	687b      	ldr	r3, [r7, #4]
 810f428:	2224      	movs	r2, #36	; 0x24
 810f42a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 810f42e:	687b      	ldr	r3, [r7, #4]
 810f430:	681b      	ldr	r3, [r3, #0]
 810f432:	681a      	ldr	r2, [r3, #0]
 810f434:	687b      	ldr	r3, [r7, #4]
 810f436:	681b      	ldr	r3, [r3, #0]
 810f438:	f022 0201 	bic.w	r2, r2, #1
 810f43c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 810f43e:	6878      	ldr	r0, [r7, #4]
 810f440:	f000 fbcc 	bl	810fbdc <UART_SetConfig>
 810f444:	4603      	mov	r3, r0
 810f446:	2b01      	cmp	r3, #1
 810f448:	d101      	bne.n	810f44e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 810f44a:	2301      	movs	r3, #1
 810f44c:	e022      	b.n	810f494 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 810f44e:	687b      	ldr	r3, [r7, #4]
 810f450:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810f452:	2b00      	cmp	r3, #0
 810f454:	d002      	beq.n	810f45c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 810f456:	6878      	ldr	r0, [r7, #4]
 810f458:	f001 f920 	bl	811069c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 810f45c:	687b      	ldr	r3, [r7, #4]
 810f45e:	681b      	ldr	r3, [r3, #0]
 810f460:	685a      	ldr	r2, [r3, #4]
 810f462:	687b      	ldr	r3, [r7, #4]
 810f464:	681b      	ldr	r3, [r3, #0]
 810f466:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 810f46a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 810f46c:	687b      	ldr	r3, [r7, #4]
 810f46e:	681b      	ldr	r3, [r3, #0]
 810f470:	689a      	ldr	r2, [r3, #8]
 810f472:	687b      	ldr	r3, [r7, #4]
 810f474:	681b      	ldr	r3, [r3, #0]
 810f476:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 810f47a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 810f47c:	687b      	ldr	r3, [r7, #4]
 810f47e:	681b      	ldr	r3, [r3, #0]
 810f480:	681a      	ldr	r2, [r3, #0]
 810f482:	687b      	ldr	r3, [r7, #4]
 810f484:	681b      	ldr	r3, [r3, #0]
 810f486:	f042 0201 	orr.w	r2, r2, #1
 810f48a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 810f48c:	6878      	ldr	r0, [r7, #4]
 810f48e:	f001 f9a7 	bl	81107e0 <UART_CheckIdleState>
 810f492:	4603      	mov	r3, r0
}
 810f494:	4618      	mov	r0, r3
 810f496:	3708      	adds	r7, #8
 810f498:	46bd      	mov	sp, r7
 810f49a:	bd80      	pop	{r7, pc}

0810f49c <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 810f49c:	b580      	push	{r7, lr}
 810f49e:	b084      	sub	sp, #16
 810f4a0:	af00      	add	r7, sp, #0
 810f4a2:	60f8      	str	r0, [r7, #12]
 810f4a4:	60b9      	str	r1, [r7, #8]
 810f4a6:	4613      	mov	r3, r2
 810f4a8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 810f4aa:	68fb      	ldr	r3, [r7, #12]
 810f4ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810f4b0:	2b20      	cmp	r3, #32
 810f4b2:	d168      	bne.n	810f586 <HAL_UART_Transmit_DMA+0xea>
  {
    if ((pData == NULL) || (Size == 0U))
 810f4b4:	68bb      	ldr	r3, [r7, #8]
 810f4b6:	2b00      	cmp	r3, #0
 810f4b8:	d002      	beq.n	810f4c0 <HAL_UART_Transmit_DMA+0x24>
 810f4ba:	88fb      	ldrh	r3, [r7, #6]
 810f4bc:	2b00      	cmp	r3, #0
 810f4be:	d101      	bne.n	810f4c4 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 810f4c0:	2301      	movs	r3, #1
 810f4c2:	e061      	b.n	810f588 <HAL_UART_Transmit_DMA+0xec>
    }

    __HAL_LOCK(huart);
 810f4c4:	68fb      	ldr	r3, [r7, #12]
 810f4c6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 810f4ca:	2b01      	cmp	r3, #1
 810f4cc:	d101      	bne.n	810f4d2 <HAL_UART_Transmit_DMA+0x36>
 810f4ce:	2302      	movs	r3, #2
 810f4d0:	e05a      	b.n	810f588 <HAL_UART_Transmit_DMA+0xec>
 810f4d2:	68fb      	ldr	r3, [r7, #12]
 810f4d4:	2201      	movs	r2, #1
 810f4d6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 810f4da:	68fb      	ldr	r3, [r7, #12]
 810f4dc:	68ba      	ldr	r2, [r7, #8]
 810f4de:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 810f4e0:	68fb      	ldr	r3, [r7, #12]
 810f4e2:	88fa      	ldrh	r2, [r7, #6]
 810f4e4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 810f4e8:	68fb      	ldr	r3, [r7, #12]
 810f4ea:	88fa      	ldrh	r2, [r7, #6]
 810f4ec:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 810f4f0:	68fb      	ldr	r3, [r7, #12]
 810f4f2:	2200      	movs	r2, #0
 810f4f4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 810f4f8:	68fb      	ldr	r3, [r7, #12]
 810f4fa:	2221      	movs	r2, #33	; 0x21
 810f4fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmatx != NULL)
 810f500:	68fb      	ldr	r3, [r7, #12]
 810f502:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810f504:	2b00      	cmp	r3, #0
 810f506:	d02c      	beq.n	810f562 <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 810f508:	68fb      	ldr	r3, [r7, #12]
 810f50a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810f50c:	4a20      	ldr	r2, [pc, #128]	; (810f590 <HAL_UART_Transmit_DMA+0xf4>)
 810f50e:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 810f510:	68fb      	ldr	r3, [r7, #12]
 810f512:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810f514:	4a1f      	ldr	r2, [pc, #124]	; (810f594 <HAL_UART_Transmit_DMA+0xf8>)
 810f516:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 810f518:	68fb      	ldr	r3, [r7, #12]
 810f51a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810f51c:	4a1e      	ldr	r2, [pc, #120]	; (810f598 <HAL_UART_Transmit_DMA+0xfc>)
 810f51e:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 810f520:	68fb      	ldr	r3, [r7, #12]
 810f522:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810f524:	2200      	movs	r2, #0
 810f526:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 810f528:	68fb      	ldr	r3, [r7, #12]
 810f52a:	6f98      	ldr	r0, [r3, #120]	; 0x78
 810f52c:	68fb      	ldr	r3, [r7, #12]
 810f52e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810f530:	4619      	mov	r1, r3
 810f532:	68fb      	ldr	r3, [r7, #12]
 810f534:	681b      	ldr	r3, [r3, #0]
 810f536:	3328      	adds	r3, #40	; 0x28
 810f538:	461a      	mov	r2, r3
 810f53a:	88fb      	ldrh	r3, [r7, #6]
 810f53c:	f7f5 fa42 	bl	81049c4 <HAL_DMA_Start_IT>
 810f540:	4603      	mov	r3, r0
 810f542:	2b00      	cmp	r3, #0
 810f544:	d00d      	beq.n	810f562 <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 810f546:	68fb      	ldr	r3, [r7, #12]
 810f548:	2210      	movs	r2, #16
 810f54a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 810f54e:	68fb      	ldr	r3, [r7, #12]
 810f550:	2200      	movs	r2, #0
 810f552:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 810f556:	68fb      	ldr	r3, [r7, #12]
 810f558:	2220      	movs	r2, #32
 810f55a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        return HAL_ERROR;
 810f55e:	2301      	movs	r3, #1
 810f560:	e012      	b.n	810f588 <HAL_UART_Transmit_DMA+0xec>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 810f562:	68fb      	ldr	r3, [r7, #12]
 810f564:	681b      	ldr	r3, [r3, #0]
 810f566:	2240      	movs	r2, #64	; 0x40
 810f568:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 810f56a:	68fb      	ldr	r3, [r7, #12]
 810f56c:	2200      	movs	r2, #0
 810f56e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 810f572:	68fb      	ldr	r3, [r7, #12]
 810f574:	681b      	ldr	r3, [r3, #0]
 810f576:	689a      	ldr	r2, [r3, #8]
 810f578:	68fb      	ldr	r3, [r7, #12]
 810f57a:	681b      	ldr	r3, [r3, #0]
 810f57c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 810f580:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 810f582:	2300      	movs	r3, #0
 810f584:	e000      	b.n	810f588 <HAL_UART_Transmit_DMA+0xec>
  }
  else
  {
    return HAL_BUSY;
 810f586:	2302      	movs	r3, #2
  }
}
 810f588:	4618      	mov	r0, r3
 810f58a:	3710      	adds	r7, #16
 810f58c:	46bd      	mov	sp, r7
 810f58e:	bd80      	pop	{r7, pc}
 810f590:	08110af5 	.word	0x08110af5
 810f594:	08110b45 	.word	0x08110b45
 810f598:	08110c2f 	.word	0x08110c2f

0810f59c <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 810f59c:	b580      	push	{r7, lr}
 810f59e:	b084      	sub	sp, #16
 810f5a0:	af00      	add	r7, sp, #0
 810f5a2:	60f8      	str	r0, [r7, #12]
 810f5a4:	60b9      	str	r1, [r7, #8]
 810f5a6:	4613      	mov	r3, r2
 810f5a8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 810f5aa:	68fb      	ldr	r3, [r7, #12]
 810f5ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 810f5b0:	2b20      	cmp	r3, #32
 810f5b2:	d131      	bne.n	810f618 <HAL_UART_Receive_DMA+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 810f5b4:	68bb      	ldr	r3, [r7, #8]
 810f5b6:	2b00      	cmp	r3, #0
 810f5b8:	d002      	beq.n	810f5c0 <HAL_UART_Receive_DMA+0x24>
 810f5ba:	88fb      	ldrh	r3, [r7, #6]
 810f5bc:	2b00      	cmp	r3, #0
 810f5be:	d101      	bne.n	810f5c4 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 810f5c0:	2301      	movs	r3, #1
 810f5c2:	e02a      	b.n	810f61a <HAL_UART_Receive_DMA+0x7e>
    }

    __HAL_LOCK(huart);
 810f5c4:	68fb      	ldr	r3, [r7, #12]
 810f5c6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 810f5ca:	2b01      	cmp	r3, #1
 810f5cc:	d101      	bne.n	810f5d2 <HAL_UART_Receive_DMA+0x36>
 810f5ce:	2302      	movs	r3, #2
 810f5d0:	e023      	b.n	810f61a <HAL_UART_Receive_DMA+0x7e>
 810f5d2:	68fb      	ldr	r3, [r7, #12]
 810f5d4:	2201      	movs	r2, #1
 810f5d6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 810f5da:	68fb      	ldr	r3, [r7, #12]
 810f5dc:	2200      	movs	r2, #0
 810f5de:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 810f5e0:	68fb      	ldr	r3, [r7, #12]
 810f5e2:	681b      	ldr	r3, [r3, #0]
 810f5e4:	4a0f      	ldr	r2, [pc, #60]	; (810f624 <HAL_UART_Receive_DMA+0x88>)
 810f5e6:	4293      	cmp	r3, r2
 810f5e8:	d00e      	beq.n	810f608 <HAL_UART_Receive_DMA+0x6c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 810f5ea:	68fb      	ldr	r3, [r7, #12]
 810f5ec:	681b      	ldr	r3, [r3, #0]
 810f5ee:	685b      	ldr	r3, [r3, #4]
 810f5f0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 810f5f4:	2b00      	cmp	r3, #0
 810f5f6:	d007      	beq.n	810f608 <HAL_UART_Receive_DMA+0x6c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 810f5f8:	68fb      	ldr	r3, [r7, #12]
 810f5fa:	681b      	ldr	r3, [r3, #0]
 810f5fc:	681a      	ldr	r2, [r3, #0]
 810f5fe:	68fb      	ldr	r3, [r7, #12]
 810f600:	681b      	ldr	r3, [r3, #0]
 810f602:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 810f606:	601a      	str	r2, [r3, #0]
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 810f608:	88fb      	ldrh	r3, [r7, #6]
 810f60a:	461a      	mov	r2, r3
 810f60c:	68b9      	ldr	r1, [r7, #8]
 810f60e:	68f8      	ldr	r0, [r7, #12]
 810f610:	f001 f9b2 	bl	8110978 <UART_Start_Receive_DMA>
 810f614:	4603      	mov	r3, r0
 810f616:	e000      	b.n	810f61a <HAL_UART_Receive_DMA+0x7e>
  }
  else
  {
    return HAL_BUSY;
 810f618:	2302      	movs	r3, #2
  }
}
 810f61a:	4618      	mov	r0, r3
 810f61c:	3710      	adds	r7, #16
 810f61e:	46bd      	mov	sp, r7
 810f620:	bd80      	pop	{r7, pc}
 810f622:	bf00      	nop
 810f624:	58000c00 	.word	0x58000c00

0810f628 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 810f628:	b580      	push	{r7, lr}
 810f62a:	b088      	sub	sp, #32
 810f62c:	af00      	add	r7, sp, #0
 810f62e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 810f630:	687b      	ldr	r3, [r7, #4]
 810f632:	681b      	ldr	r3, [r3, #0]
 810f634:	69db      	ldr	r3, [r3, #28]
 810f636:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 810f638:	687b      	ldr	r3, [r7, #4]
 810f63a:	681b      	ldr	r3, [r3, #0]
 810f63c:	681b      	ldr	r3, [r3, #0]
 810f63e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 810f640:	687b      	ldr	r3, [r7, #4]
 810f642:	681b      	ldr	r3, [r3, #0]
 810f644:	689b      	ldr	r3, [r3, #8]
 810f646:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 810f648:	69fa      	ldr	r2, [r7, #28]
 810f64a:	f640 030f 	movw	r3, #2063	; 0x80f
 810f64e:	4013      	ands	r3, r2
 810f650:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 810f652:	693b      	ldr	r3, [r7, #16]
 810f654:	2b00      	cmp	r3, #0
 810f656:	d118      	bne.n	810f68a <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 810f658:	69fb      	ldr	r3, [r7, #28]
 810f65a:	f003 0320 	and.w	r3, r3, #32
 810f65e:	2b00      	cmp	r3, #0
 810f660:	d013      	beq.n	810f68a <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 810f662:	69bb      	ldr	r3, [r7, #24]
 810f664:	f003 0320 	and.w	r3, r3, #32
 810f668:	2b00      	cmp	r3, #0
 810f66a:	d104      	bne.n	810f676 <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 810f66c:	697b      	ldr	r3, [r7, #20]
 810f66e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 810f672:	2b00      	cmp	r3, #0
 810f674:	d009      	beq.n	810f68a <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 810f676:	687b      	ldr	r3, [r7, #4]
 810f678:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 810f67a:	2b00      	cmp	r3, #0
 810f67c:	f000 8282 	beq.w	810fb84 <HAL_UART_IRQHandler+0x55c>
      {
        huart->RxISR(huart);
 810f680:	687b      	ldr	r3, [r7, #4]
 810f682:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 810f684:	6878      	ldr	r0, [r7, #4]
 810f686:	4798      	blx	r3
      }
      return;
 810f688:	e27c      	b.n	810fb84 <HAL_UART_IRQHandler+0x55c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 810f68a:	693b      	ldr	r3, [r7, #16]
 810f68c:	2b00      	cmp	r3, #0
 810f68e:	f000 80ef 	beq.w	810f870 <HAL_UART_IRQHandler+0x248>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 810f692:	697a      	ldr	r2, [r7, #20]
 810f694:	4b73      	ldr	r3, [pc, #460]	; (810f864 <HAL_UART_IRQHandler+0x23c>)
 810f696:	4013      	ands	r3, r2
 810f698:	2b00      	cmp	r3, #0
 810f69a:	d105      	bne.n	810f6a8 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 810f69c:	69ba      	ldr	r2, [r7, #24]
 810f69e:	4b72      	ldr	r3, [pc, #456]	; (810f868 <HAL_UART_IRQHandler+0x240>)
 810f6a0:	4013      	ands	r3, r2
 810f6a2:	2b00      	cmp	r3, #0
 810f6a4:	f000 80e4 	beq.w	810f870 <HAL_UART_IRQHandler+0x248>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 810f6a8:	69fb      	ldr	r3, [r7, #28]
 810f6aa:	f003 0301 	and.w	r3, r3, #1
 810f6ae:	2b00      	cmp	r3, #0
 810f6b0:	d010      	beq.n	810f6d4 <HAL_UART_IRQHandler+0xac>
 810f6b2:	69bb      	ldr	r3, [r7, #24]
 810f6b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 810f6b8:	2b00      	cmp	r3, #0
 810f6ba:	d00b      	beq.n	810f6d4 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 810f6bc:	687b      	ldr	r3, [r7, #4]
 810f6be:	681b      	ldr	r3, [r3, #0]
 810f6c0:	2201      	movs	r2, #1
 810f6c2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 810f6c4:	687b      	ldr	r3, [r7, #4]
 810f6c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 810f6ca:	f043 0201 	orr.w	r2, r3, #1
 810f6ce:	687b      	ldr	r3, [r7, #4]
 810f6d0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 810f6d4:	69fb      	ldr	r3, [r7, #28]
 810f6d6:	f003 0302 	and.w	r3, r3, #2
 810f6da:	2b00      	cmp	r3, #0
 810f6dc:	d010      	beq.n	810f700 <HAL_UART_IRQHandler+0xd8>
 810f6de:	697b      	ldr	r3, [r7, #20]
 810f6e0:	f003 0301 	and.w	r3, r3, #1
 810f6e4:	2b00      	cmp	r3, #0
 810f6e6:	d00b      	beq.n	810f700 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 810f6e8:	687b      	ldr	r3, [r7, #4]
 810f6ea:	681b      	ldr	r3, [r3, #0]
 810f6ec:	2202      	movs	r2, #2
 810f6ee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 810f6f0:	687b      	ldr	r3, [r7, #4]
 810f6f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 810f6f6:	f043 0204 	orr.w	r2, r3, #4
 810f6fa:	687b      	ldr	r3, [r7, #4]
 810f6fc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 810f700:	69fb      	ldr	r3, [r7, #28]
 810f702:	f003 0304 	and.w	r3, r3, #4
 810f706:	2b00      	cmp	r3, #0
 810f708:	d010      	beq.n	810f72c <HAL_UART_IRQHandler+0x104>
 810f70a:	697b      	ldr	r3, [r7, #20]
 810f70c:	f003 0301 	and.w	r3, r3, #1
 810f710:	2b00      	cmp	r3, #0
 810f712:	d00b      	beq.n	810f72c <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 810f714:	687b      	ldr	r3, [r7, #4]
 810f716:	681b      	ldr	r3, [r3, #0]
 810f718:	2204      	movs	r2, #4
 810f71a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 810f71c:	687b      	ldr	r3, [r7, #4]
 810f71e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 810f722:	f043 0202 	orr.w	r2, r3, #2
 810f726:	687b      	ldr	r3, [r7, #4]
 810f728:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 810f72c:	69fb      	ldr	r3, [r7, #28]
 810f72e:	f003 0308 	and.w	r3, r3, #8
 810f732:	2b00      	cmp	r3, #0
 810f734:	d015      	beq.n	810f762 <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 810f736:	69bb      	ldr	r3, [r7, #24]
 810f738:	f003 0320 	and.w	r3, r3, #32
 810f73c:	2b00      	cmp	r3, #0
 810f73e:	d104      	bne.n	810f74a <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 810f740:	697a      	ldr	r2, [r7, #20]
 810f742:	4b48      	ldr	r3, [pc, #288]	; (810f864 <HAL_UART_IRQHandler+0x23c>)
 810f744:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 810f746:	2b00      	cmp	r3, #0
 810f748:	d00b      	beq.n	810f762 <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 810f74a:	687b      	ldr	r3, [r7, #4]
 810f74c:	681b      	ldr	r3, [r3, #0]
 810f74e:	2208      	movs	r2, #8
 810f750:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 810f752:	687b      	ldr	r3, [r7, #4]
 810f754:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 810f758:	f043 0208 	orr.w	r2, r3, #8
 810f75c:	687b      	ldr	r3, [r7, #4]
 810f75e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 810f762:	69fb      	ldr	r3, [r7, #28]
 810f764:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 810f768:	2b00      	cmp	r3, #0
 810f76a:	d011      	beq.n	810f790 <HAL_UART_IRQHandler+0x168>
 810f76c:	69bb      	ldr	r3, [r7, #24]
 810f76e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 810f772:	2b00      	cmp	r3, #0
 810f774:	d00c      	beq.n	810f790 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 810f776:	687b      	ldr	r3, [r7, #4]
 810f778:	681b      	ldr	r3, [r3, #0]
 810f77a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 810f77e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 810f780:	687b      	ldr	r3, [r7, #4]
 810f782:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 810f786:	f043 0220 	orr.w	r2, r3, #32
 810f78a:	687b      	ldr	r3, [r7, #4]
 810f78c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 810f790:	687b      	ldr	r3, [r7, #4]
 810f792:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 810f796:	2b00      	cmp	r3, #0
 810f798:	f000 81f6 	beq.w	810fb88 <HAL_UART_IRQHandler+0x560>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 810f79c:	69fb      	ldr	r3, [r7, #28]
 810f79e:	f003 0320 	and.w	r3, r3, #32
 810f7a2:	2b00      	cmp	r3, #0
 810f7a4:	d011      	beq.n	810f7ca <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 810f7a6:	69bb      	ldr	r3, [r7, #24]
 810f7a8:	f003 0320 	and.w	r3, r3, #32
 810f7ac:	2b00      	cmp	r3, #0
 810f7ae:	d104      	bne.n	810f7ba <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 810f7b0:	697b      	ldr	r3, [r7, #20]
 810f7b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 810f7b6:	2b00      	cmp	r3, #0
 810f7b8:	d007      	beq.n	810f7ca <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 810f7ba:	687b      	ldr	r3, [r7, #4]
 810f7bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 810f7be:	2b00      	cmp	r3, #0
 810f7c0:	d003      	beq.n	810f7ca <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 810f7c2:	687b      	ldr	r3, [r7, #4]
 810f7c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 810f7c6:	6878      	ldr	r0, [r7, #4]
 810f7c8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 810f7ca:	687b      	ldr	r3, [r7, #4]
 810f7cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 810f7d0:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 810f7d2:	687b      	ldr	r3, [r7, #4]
 810f7d4:	681b      	ldr	r3, [r3, #0]
 810f7d6:	689b      	ldr	r3, [r3, #8]
 810f7d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 810f7dc:	2b40      	cmp	r3, #64	; 0x40
 810f7de:	d004      	beq.n	810f7ea <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 810f7e0:	68fb      	ldr	r3, [r7, #12]
 810f7e2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 810f7e6:	2b00      	cmp	r3, #0
 810f7e8:	d031      	beq.n	810f84e <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 810f7ea:	6878      	ldr	r0, [r7, #4]
 810f7ec:	f001 f950 	bl	8110a90 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 810f7f0:	687b      	ldr	r3, [r7, #4]
 810f7f2:	681b      	ldr	r3, [r3, #0]
 810f7f4:	689b      	ldr	r3, [r3, #8]
 810f7f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 810f7fa:	2b40      	cmp	r3, #64	; 0x40
 810f7fc:	d123      	bne.n	810f846 <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 810f7fe:	687b      	ldr	r3, [r7, #4]
 810f800:	681b      	ldr	r3, [r3, #0]
 810f802:	689a      	ldr	r2, [r3, #8]
 810f804:	687b      	ldr	r3, [r7, #4]
 810f806:	681b      	ldr	r3, [r3, #0]
 810f808:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 810f80c:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 810f80e:	687b      	ldr	r3, [r7, #4]
 810f810:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810f812:	2b00      	cmp	r3, #0
 810f814:	d013      	beq.n	810f83e <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 810f816:	687b      	ldr	r3, [r7, #4]
 810f818:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810f81a:	4a14      	ldr	r2, [pc, #80]	; (810f86c <HAL_UART_IRQHandler+0x244>)
 810f81c:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 810f81e:	687b      	ldr	r3, [r7, #4]
 810f820:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810f822:	4618      	mov	r0, r3
 810f824:	f7f5 fe56 	bl	81054d4 <HAL_DMA_Abort_IT>
 810f828:	4603      	mov	r3, r0
 810f82a:	2b00      	cmp	r3, #0
 810f82c:	d017      	beq.n	810f85e <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 810f82e:	687b      	ldr	r3, [r7, #4]
 810f830:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810f832:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810f834:	687a      	ldr	r2, [r7, #4]
 810f836:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 810f838:	4610      	mov	r0, r2
 810f83a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 810f83c:	e00f      	b.n	810f85e <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 810f83e:	6878      	ldr	r0, [r7, #4]
 810f840:	f7f2 f97a 	bl	8101b38 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 810f844:	e00b      	b.n	810f85e <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 810f846:	6878      	ldr	r0, [r7, #4]
 810f848:	f7f2 f976 	bl	8101b38 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 810f84c:	e007      	b.n	810f85e <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 810f84e:	6878      	ldr	r0, [r7, #4]
 810f850:	f7f2 f972 	bl	8101b38 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 810f854:	687b      	ldr	r3, [r7, #4]
 810f856:	2200      	movs	r2, #0
 810f858:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 810f85c:	e194      	b.n	810fb88 <HAL_UART_IRQHandler+0x560>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 810f85e:	bf00      	nop
    return;
 810f860:	e192      	b.n	810fb88 <HAL_UART_IRQHandler+0x560>
 810f862:	bf00      	nop
 810f864:	10000001 	.word	0x10000001
 810f868:	04000120 	.word	0x04000120
 810f86c:	08110caf 	.word	0x08110caf

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 810f870:	687b      	ldr	r3, [r7, #4]
 810f872:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 810f874:	2b01      	cmp	r3, #1
 810f876:	f040 8111 	bne.w	810fa9c <HAL_UART_IRQHandler+0x474>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 810f87a:	69fb      	ldr	r3, [r7, #28]
 810f87c:	f003 0310 	and.w	r3, r3, #16
 810f880:	2b00      	cmp	r3, #0
 810f882:	f000 810b 	beq.w	810fa9c <HAL_UART_IRQHandler+0x474>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 810f886:	69bb      	ldr	r3, [r7, #24]
 810f888:	f003 0310 	and.w	r3, r3, #16
 810f88c:	2b00      	cmp	r3, #0
 810f88e:	f000 8105 	beq.w	810fa9c <HAL_UART_IRQHandler+0x474>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 810f892:	687b      	ldr	r3, [r7, #4]
 810f894:	681b      	ldr	r3, [r3, #0]
 810f896:	2210      	movs	r2, #16
 810f898:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 810f89a:	687b      	ldr	r3, [r7, #4]
 810f89c:	681b      	ldr	r3, [r3, #0]
 810f89e:	689b      	ldr	r3, [r3, #8]
 810f8a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 810f8a4:	2b40      	cmp	r3, #64	; 0x40
 810f8a6:	f040 80bb 	bne.w	810fa20 <HAL_UART_IRQHandler+0x3f8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 810f8aa:	687b      	ldr	r3, [r7, #4]
 810f8ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810f8ae:	681b      	ldr	r3, [r3, #0]
 810f8b0:	4a97      	ldr	r2, [pc, #604]	; (810fb10 <HAL_UART_IRQHandler+0x4e8>)
 810f8b2:	4293      	cmp	r3, r2
 810f8b4:	d059      	beq.n	810f96a <HAL_UART_IRQHandler+0x342>
 810f8b6:	687b      	ldr	r3, [r7, #4]
 810f8b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810f8ba:	681b      	ldr	r3, [r3, #0]
 810f8bc:	4a95      	ldr	r2, [pc, #596]	; (810fb14 <HAL_UART_IRQHandler+0x4ec>)
 810f8be:	4293      	cmp	r3, r2
 810f8c0:	d053      	beq.n	810f96a <HAL_UART_IRQHandler+0x342>
 810f8c2:	687b      	ldr	r3, [r7, #4]
 810f8c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810f8c6:	681b      	ldr	r3, [r3, #0]
 810f8c8:	4a93      	ldr	r2, [pc, #588]	; (810fb18 <HAL_UART_IRQHandler+0x4f0>)
 810f8ca:	4293      	cmp	r3, r2
 810f8cc:	d04d      	beq.n	810f96a <HAL_UART_IRQHandler+0x342>
 810f8ce:	687b      	ldr	r3, [r7, #4]
 810f8d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810f8d2:	681b      	ldr	r3, [r3, #0]
 810f8d4:	4a91      	ldr	r2, [pc, #580]	; (810fb1c <HAL_UART_IRQHandler+0x4f4>)
 810f8d6:	4293      	cmp	r3, r2
 810f8d8:	d047      	beq.n	810f96a <HAL_UART_IRQHandler+0x342>
 810f8da:	687b      	ldr	r3, [r7, #4]
 810f8dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810f8de:	681b      	ldr	r3, [r3, #0]
 810f8e0:	4a8f      	ldr	r2, [pc, #572]	; (810fb20 <HAL_UART_IRQHandler+0x4f8>)
 810f8e2:	4293      	cmp	r3, r2
 810f8e4:	d041      	beq.n	810f96a <HAL_UART_IRQHandler+0x342>
 810f8e6:	687b      	ldr	r3, [r7, #4]
 810f8e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810f8ea:	681b      	ldr	r3, [r3, #0]
 810f8ec:	4a8d      	ldr	r2, [pc, #564]	; (810fb24 <HAL_UART_IRQHandler+0x4fc>)
 810f8ee:	4293      	cmp	r3, r2
 810f8f0:	d03b      	beq.n	810f96a <HAL_UART_IRQHandler+0x342>
 810f8f2:	687b      	ldr	r3, [r7, #4]
 810f8f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810f8f6:	681b      	ldr	r3, [r3, #0]
 810f8f8:	4a8b      	ldr	r2, [pc, #556]	; (810fb28 <HAL_UART_IRQHandler+0x500>)
 810f8fa:	4293      	cmp	r3, r2
 810f8fc:	d035      	beq.n	810f96a <HAL_UART_IRQHandler+0x342>
 810f8fe:	687b      	ldr	r3, [r7, #4]
 810f900:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810f902:	681b      	ldr	r3, [r3, #0]
 810f904:	4a89      	ldr	r2, [pc, #548]	; (810fb2c <HAL_UART_IRQHandler+0x504>)
 810f906:	4293      	cmp	r3, r2
 810f908:	d02f      	beq.n	810f96a <HAL_UART_IRQHandler+0x342>
 810f90a:	687b      	ldr	r3, [r7, #4]
 810f90c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810f90e:	681b      	ldr	r3, [r3, #0]
 810f910:	4a87      	ldr	r2, [pc, #540]	; (810fb30 <HAL_UART_IRQHandler+0x508>)
 810f912:	4293      	cmp	r3, r2
 810f914:	d029      	beq.n	810f96a <HAL_UART_IRQHandler+0x342>
 810f916:	687b      	ldr	r3, [r7, #4]
 810f918:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810f91a:	681b      	ldr	r3, [r3, #0]
 810f91c:	4a85      	ldr	r2, [pc, #532]	; (810fb34 <HAL_UART_IRQHandler+0x50c>)
 810f91e:	4293      	cmp	r3, r2
 810f920:	d023      	beq.n	810f96a <HAL_UART_IRQHandler+0x342>
 810f922:	687b      	ldr	r3, [r7, #4]
 810f924:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810f926:	681b      	ldr	r3, [r3, #0]
 810f928:	4a83      	ldr	r2, [pc, #524]	; (810fb38 <HAL_UART_IRQHandler+0x510>)
 810f92a:	4293      	cmp	r3, r2
 810f92c:	d01d      	beq.n	810f96a <HAL_UART_IRQHandler+0x342>
 810f92e:	687b      	ldr	r3, [r7, #4]
 810f930:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810f932:	681b      	ldr	r3, [r3, #0]
 810f934:	4a81      	ldr	r2, [pc, #516]	; (810fb3c <HAL_UART_IRQHandler+0x514>)
 810f936:	4293      	cmp	r3, r2
 810f938:	d017      	beq.n	810f96a <HAL_UART_IRQHandler+0x342>
 810f93a:	687b      	ldr	r3, [r7, #4]
 810f93c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810f93e:	681b      	ldr	r3, [r3, #0]
 810f940:	4a7f      	ldr	r2, [pc, #508]	; (810fb40 <HAL_UART_IRQHandler+0x518>)
 810f942:	4293      	cmp	r3, r2
 810f944:	d011      	beq.n	810f96a <HAL_UART_IRQHandler+0x342>
 810f946:	687b      	ldr	r3, [r7, #4]
 810f948:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810f94a:	681b      	ldr	r3, [r3, #0]
 810f94c:	4a7d      	ldr	r2, [pc, #500]	; (810fb44 <HAL_UART_IRQHandler+0x51c>)
 810f94e:	4293      	cmp	r3, r2
 810f950:	d00b      	beq.n	810f96a <HAL_UART_IRQHandler+0x342>
 810f952:	687b      	ldr	r3, [r7, #4]
 810f954:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810f956:	681b      	ldr	r3, [r3, #0]
 810f958:	4a7b      	ldr	r2, [pc, #492]	; (810fb48 <HAL_UART_IRQHandler+0x520>)
 810f95a:	4293      	cmp	r3, r2
 810f95c:	d005      	beq.n	810f96a <HAL_UART_IRQHandler+0x342>
 810f95e:	687b      	ldr	r3, [r7, #4]
 810f960:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810f962:	681b      	ldr	r3, [r3, #0]
 810f964:	4a79      	ldr	r2, [pc, #484]	; (810fb4c <HAL_UART_IRQHandler+0x524>)
 810f966:	4293      	cmp	r3, r2
 810f968:	d105      	bne.n	810f976 <HAL_UART_IRQHandler+0x34e>
 810f96a:	687b      	ldr	r3, [r7, #4]
 810f96c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810f96e:	681b      	ldr	r3, [r3, #0]
 810f970:	685b      	ldr	r3, [r3, #4]
 810f972:	b29b      	uxth	r3, r3
 810f974:	e004      	b.n	810f980 <HAL_UART_IRQHandler+0x358>
 810f976:	687b      	ldr	r3, [r7, #4]
 810f978:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810f97a:	681b      	ldr	r3, [r3, #0]
 810f97c:	685b      	ldr	r3, [r3, #4]
 810f97e:	b29b      	uxth	r3, r3
 810f980:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 810f982:	893b      	ldrh	r3, [r7, #8]
 810f984:	2b00      	cmp	r3, #0
 810f986:	f000 8101 	beq.w	810fb8c <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 810f98a:	687b      	ldr	r3, [r7, #4]
 810f98c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 810f990:	893a      	ldrh	r2, [r7, #8]
 810f992:	429a      	cmp	r2, r3
 810f994:	f080 80fa 	bcs.w	810fb8c <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 810f998:	687b      	ldr	r3, [r7, #4]
 810f99a:	893a      	ldrh	r2, [r7, #8]
 810f99c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 810f9a0:	687b      	ldr	r3, [r7, #4]
 810f9a2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810f9a4:	69db      	ldr	r3, [r3, #28]
 810f9a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810f9aa:	d02b      	beq.n	810fa04 <HAL_UART_IRQHandler+0x3dc>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 810f9ac:	687b      	ldr	r3, [r7, #4]
 810f9ae:	681b      	ldr	r3, [r3, #0]
 810f9b0:	681a      	ldr	r2, [r3, #0]
 810f9b2:	687b      	ldr	r3, [r7, #4]
 810f9b4:	681b      	ldr	r3, [r3, #0]
 810f9b6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 810f9ba:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 810f9bc:	687b      	ldr	r3, [r7, #4]
 810f9be:	681b      	ldr	r3, [r3, #0]
 810f9c0:	689a      	ldr	r2, [r3, #8]
 810f9c2:	687b      	ldr	r3, [r7, #4]
 810f9c4:	681b      	ldr	r3, [r3, #0]
 810f9c6:	f022 0201 	bic.w	r2, r2, #1
 810f9ca:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 810f9cc:	687b      	ldr	r3, [r7, #4]
 810f9ce:	681b      	ldr	r3, [r3, #0]
 810f9d0:	689a      	ldr	r2, [r3, #8]
 810f9d2:	687b      	ldr	r3, [r7, #4]
 810f9d4:	681b      	ldr	r3, [r3, #0]
 810f9d6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 810f9da:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 810f9dc:	687b      	ldr	r3, [r7, #4]
 810f9de:	2220      	movs	r2, #32
 810f9e0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 810f9e4:	687b      	ldr	r3, [r7, #4]
 810f9e6:	2200      	movs	r2, #0
 810f9e8:	66da      	str	r2, [r3, #108]	; 0x6c

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 810f9ea:	687b      	ldr	r3, [r7, #4]
 810f9ec:	681b      	ldr	r3, [r3, #0]
 810f9ee:	681a      	ldr	r2, [r3, #0]
 810f9f0:	687b      	ldr	r3, [r7, #4]
 810f9f2:	681b      	ldr	r3, [r3, #0]
 810f9f4:	f022 0210 	bic.w	r2, r2, #16
 810f9f8:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 810f9fa:	687b      	ldr	r3, [r7, #4]
 810f9fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810f9fe:	4618      	mov	r0, r3
 810fa00:	f7f5 fa4a 	bl	8104e98 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 810fa04:	687b      	ldr	r3, [r7, #4]
 810fa06:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 810fa0a:	687b      	ldr	r3, [r7, #4]
 810fa0c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 810fa10:	b29b      	uxth	r3, r3
 810fa12:	1ad3      	subs	r3, r2, r3
 810fa14:	b29b      	uxth	r3, r3
 810fa16:	4619      	mov	r1, r3
 810fa18:	6878      	ldr	r0, [r7, #4]
 810fa1a:	f000 f8d3 	bl	810fbc4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 810fa1e:	e0b5      	b.n	810fb8c <HAL_UART_IRQHandler+0x564>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 810fa20:	687b      	ldr	r3, [r7, #4]
 810fa22:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 810fa26:	687b      	ldr	r3, [r7, #4]
 810fa28:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 810fa2c:	b29b      	uxth	r3, r3
 810fa2e:	1ad3      	subs	r3, r2, r3
 810fa30:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 810fa32:	687b      	ldr	r3, [r7, #4]
 810fa34:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 810fa38:	b29b      	uxth	r3, r3
 810fa3a:	2b00      	cmp	r3, #0
 810fa3c:	f000 80a8 	beq.w	810fb90 <HAL_UART_IRQHandler+0x568>
          && (nb_rx_data > 0U))
 810fa40:	897b      	ldrh	r3, [r7, #10]
 810fa42:	2b00      	cmp	r3, #0
 810fa44:	f000 80a4 	beq.w	810fb90 <HAL_UART_IRQHandler+0x568>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 810fa48:	687b      	ldr	r3, [r7, #4]
 810fa4a:	681b      	ldr	r3, [r3, #0]
 810fa4c:	681a      	ldr	r2, [r3, #0]
 810fa4e:	687b      	ldr	r3, [r7, #4]
 810fa50:	681b      	ldr	r3, [r3, #0]
 810fa52:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 810fa56:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 810fa58:	687b      	ldr	r3, [r7, #4]
 810fa5a:	681b      	ldr	r3, [r3, #0]
 810fa5c:	689b      	ldr	r3, [r3, #8]
 810fa5e:	687a      	ldr	r2, [r7, #4]
 810fa60:	6812      	ldr	r2, [r2, #0]
 810fa62:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 810fa66:	f023 0301 	bic.w	r3, r3, #1
 810fa6a:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 810fa6c:	687b      	ldr	r3, [r7, #4]
 810fa6e:	2220      	movs	r2, #32
 810fa70:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 810fa74:	687b      	ldr	r3, [r7, #4]
 810fa76:	2200      	movs	r2, #0
 810fa78:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 810fa7a:	687b      	ldr	r3, [r7, #4]
 810fa7c:	2200      	movs	r2, #0
 810fa7e:	671a      	str	r2, [r3, #112]	; 0x70

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 810fa80:	687b      	ldr	r3, [r7, #4]
 810fa82:	681b      	ldr	r3, [r3, #0]
 810fa84:	681a      	ldr	r2, [r3, #0]
 810fa86:	687b      	ldr	r3, [r7, #4]
 810fa88:	681b      	ldr	r3, [r3, #0]
 810fa8a:	f022 0210 	bic.w	r2, r2, #16
 810fa8e:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 810fa90:	897b      	ldrh	r3, [r7, #10]
 810fa92:	4619      	mov	r1, r3
 810fa94:	6878      	ldr	r0, [r7, #4]
 810fa96:	f000 f895 	bl	810fbc4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 810fa9a:	e079      	b.n	810fb90 <HAL_UART_IRQHandler+0x568>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 810fa9c:	69fb      	ldr	r3, [r7, #28]
 810fa9e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 810faa2:	2b00      	cmp	r3, #0
 810faa4:	d00d      	beq.n	810fac2 <HAL_UART_IRQHandler+0x49a>
 810faa6:	697b      	ldr	r3, [r7, #20]
 810faa8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 810faac:	2b00      	cmp	r3, #0
 810faae:	d008      	beq.n	810fac2 <HAL_UART_IRQHandler+0x49a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 810fab0:	687b      	ldr	r3, [r7, #4]
 810fab2:	681b      	ldr	r3, [r3, #0]
 810fab4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 810fab8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 810faba:	6878      	ldr	r0, [r7, #4]
 810fabc:	f001 f927 	bl	8110d0e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 810fac0:	e069      	b.n	810fb96 <HAL_UART_IRQHandler+0x56e>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 810fac2:	69fb      	ldr	r3, [r7, #28]
 810fac4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 810fac8:	2b00      	cmp	r3, #0
 810faca:	d012      	beq.n	810faf2 <HAL_UART_IRQHandler+0x4ca>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 810facc:	69bb      	ldr	r3, [r7, #24]
 810face:	f003 0380 	and.w	r3, r3, #128	; 0x80
 810fad2:	2b00      	cmp	r3, #0
 810fad4:	d104      	bne.n	810fae0 <HAL_UART_IRQHandler+0x4b8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 810fad6:	697b      	ldr	r3, [r7, #20]
 810fad8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 810fadc:	2b00      	cmp	r3, #0
 810fade:	d008      	beq.n	810faf2 <HAL_UART_IRQHandler+0x4ca>
  {
    if (huart->TxISR != NULL)
 810fae0:	687b      	ldr	r3, [r7, #4]
 810fae2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 810fae4:	2b00      	cmp	r3, #0
 810fae6:	d055      	beq.n	810fb94 <HAL_UART_IRQHandler+0x56c>
    {
      huart->TxISR(huart);
 810fae8:	687b      	ldr	r3, [r7, #4]
 810faea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 810faec:	6878      	ldr	r0, [r7, #4]
 810faee:	4798      	blx	r3
    }
    return;
 810faf0:	e050      	b.n	810fb94 <HAL_UART_IRQHandler+0x56c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 810faf2:	69fb      	ldr	r3, [r7, #28]
 810faf4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 810faf8:	2b00      	cmp	r3, #0
 810fafa:	d029      	beq.n	810fb50 <HAL_UART_IRQHandler+0x528>
 810fafc:	69bb      	ldr	r3, [r7, #24]
 810fafe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 810fb02:	2b00      	cmp	r3, #0
 810fb04:	d024      	beq.n	810fb50 <HAL_UART_IRQHandler+0x528>
  {
    UART_EndTransmit_IT(huart);
 810fb06:	6878      	ldr	r0, [r7, #4]
 810fb08:	f001 f8e7 	bl	8110cda <UART_EndTransmit_IT>
    return;
 810fb0c:	e043      	b.n	810fb96 <HAL_UART_IRQHandler+0x56e>
 810fb0e:	bf00      	nop
 810fb10:	40020010 	.word	0x40020010
 810fb14:	40020028 	.word	0x40020028
 810fb18:	40020040 	.word	0x40020040
 810fb1c:	40020058 	.word	0x40020058
 810fb20:	40020070 	.word	0x40020070
 810fb24:	40020088 	.word	0x40020088
 810fb28:	400200a0 	.word	0x400200a0
 810fb2c:	400200b8 	.word	0x400200b8
 810fb30:	40020410 	.word	0x40020410
 810fb34:	40020428 	.word	0x40020428
 810fb38:	40020440 	.word	0x40020440
 810fb3c:	40020458 	.word	0x40020458
 810fb40:	40020470 	.word	0x40020470
 810fb44:	40020488 	.word	0x40020488
 810fb48:	400204a0 	.word	0x400204a0
 810fb4c:	400204b8 	.word	0x400204b8
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 810fb50:	69fb      	ldr	r3, [r7, #28]
 810fb52:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 810fb56:	2b00      	cmp	r3, #0
 810fb58:	d008      	beq.n	810fb6c <HAL_UART_IRQHandler+0x544>
 810fb5a:	69bb      	ldr	r3, [r7, #24]
 810fb5c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 810fb60:	2b00      	cmp	r3, #0
 810fb62:	d003      	beq.n	810fb6c <HAL_UART_IRQHandler+0x544>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 810fb64:	6878      	ldr	r0, [r7, #4]
 810fb66:	f001 f8e6 	bl	8110d36 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 810fb6a:	e014      	b.n	810fb96 <HAL_UART_IRQHandler+0x56e>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 810fb6c:	69fb      	ldr	r3, [r7, #28]
 810fb6e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 810fb72:	2b00      	cmp	r3, #0
 810fb74:	d00f      	beq.n	810fb96 <HAL_UART_IRQHandler+0x56e>
 810fb76:	69bb      	ldr	r3, [r7, #24]
 810fb78:	2b00      	cmp	r3, #0
 810fb7a:	da0c      	bge.n	810fb96 <HAL_UART_IRQHandler+0x56e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 810fb7c:	6878      	ldr	r0, [r7, #4]
 810fb7e:	f001 f8d0 	bl	8110d22 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 810fb82:	e008      	b.n	810fb96 <HAL_UART_IRQHandler+0x56e>
      return;
 810fb84:	bf00      	nop
 810fb86:	e006      	b.n	810fb96 <HAL_UART_IRQHandler+0x56e>
    return;
 810fb88:	bf00      	nop
 810fb8a:	e004      	b.n	810fb96 <HAL_UART_IRQHandler+0x56e>
      return;
 810fb8c:	bf00      	nop
 810fb8e:	e002      	b.n	810fb96 <HAL_UART_IRQHandler+0x56e>
      return;
 810fb90:	bf00      	nop
 810fb92:	e000      	b.n	810fb96 <HAL_UART_IRQHandler+0x56e>
    return;
 810fb94:	bf00      	nop
  }
}
 810fb96:	3720      	adds	r7, #32
 810fb98:	46bd      	mov	sp, r7
 810fb9a:	bd80      	pop	{r7, pc}

0810fb9c <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 810fb9c:	b480      	push	{r7}
 810fb9e:	b083      	sub	sp, #12
 810fba0:	af00      	add	r7, sp, #0
 810fba2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 810fba4:	bf00      	nop
 810fba6:	370c      	adds	r7, #12
 810fba8:	46bd      	mov	sp, r7
 810fbaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 810fbae:	4770      	bx	lr

0810fbb0 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 810fbb0:	b480      	push	{r7}
 810fbb2:	b083      	sub	sp, #12
 810fbb4:	af00      	add	r7, sp, #0
 810fbb6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 810fbb8:	bf00      	nop
 810fbba:	370c      	adds	r7, #12
 810fbbc:	46bd      	mov	sp, r7
 810fbbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 810fbc2:	4770      	bx	lr

0810fbc4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 810fbc4:	b480      	push	{r7}
 810fbc6:	b083      	sub	sp, #12
 810fbc8:	af00      	add	r7, sp, #0
 810fbca:	6078      	str	r0, [r7, #4]
 810fbcc:	460b      	mov	r3, r1
 810fbce:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 810fbd0:	bf00      	nop
 810fbd2:	370c      	adds	r7, #12
 810fbd4:	46bd      	mov	sp, r7
 810fbd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 810fbda:	4770      	bx	lr

0810fbdc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 810fbdc:	b5b0      	push	{r4, r5, r7, lr}
 810fbde:	b08e      	sub	sp, #56	; 0x38
 810fbe0:	af00      	add	r7, sp, #0
 810fbe2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 810fbe4:	2300      	movs	r3, #0
 810fbe6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 810fbea:	687b      	ldr	r3, [r7, #4]
 810fbec:	689a      	ldr	r2, [r3, #8]
 810fbee:	687b      	ldr	r3, [r7, #4]
 810fbf0:	691b      	ldr	r3, [r3, #16]
 810fbf2:	431a      	orrs	r2, r3
 810fbf4:	687b      	ldr	r3, [r7, #4]
 810fbf6:	695b      	ldr	r3, [r3, #20]
 810fbf8:	431a      	orrs	r2, r3
 810fbfa:	687b      	ldr	r3, [r7, #4]
 810fbfc:	69db      	ldr	r3, [r3, #28]
 810fbfe:	4313      	orrs	r3, r2
 810fc00:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 810fc02:	687b      	ldr	r3, [r7, #4]
 810fc04:	681b      	ldr	r3, [r3, #0]
 810fc06:	681a      	ldr	r2, [r3, #0]
 810fc08:	4bc0      	ldr	r3, [pc, #768]	; (810ff0c <UART_SetConfig+0x330>)
 810fc0a:	4013      	ands	r3, r2
 810fc0c:	687a      	ldr	r2, [r7, #4]
 810fc0e:	6812      	ldr	r2, [r2, #0]
 810fc10:	6b79      	ldr	r1, [r7, #52]	; 0x34
 810fc12:	430b      	orrs	r3, r1
 810fc14:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 810fc16:	687b      	ldr	r3, [r7, #4]
 810fc18:	681b      	ldr	r3, [r3, #0]
 810fc1a:	685b      	ldr	r3, [r3, #4]
 810fc1c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 810fc20:	687b      	ldr	r3, [r7, #4]
 810fc22:	68da      	ldr	r2, [r3, #12]
 810fc24:	687b      	ldr	r3, [r7, #4]
 810fc26:	681b      	ldr	r3, [r3, #0]
 810fc28:	430a      	orrs	r2, r1
 810fc2a:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 810fc2c:	687b      	ldr	r3, [r7, #4]
 810fc2e:	699b      	ldr	r3, [r3, #24]
 810fc30:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 810fc32:	687b      	ldr	r3, [r7, #4]
 810fc34:	681b      	ldr	r3, [r3, #0]
 810fc36:	4ab6      	ldr	r2, [pc, #728]	; (810ff10 <UART_SetConfig+0x334>)
 810fc38:	4293      	cmp	r3, r2
 810fc3a:	d004      	beq.n	810fc46 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 810fc3c:	687b      	ldr	r3, [r7, #4]
 810fc3e:	6a1b      	ldr	r3, [r3, #32]
 810fc40:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 810fc42:	4313      	orrs	r3, r2
 810fc44:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 810fc46:	687b      	ldr	r3, [r7, #4]
 810fc48:	681b      	ldr	r3, [r3, #0]
 810fc4a:	689b      	ldr	r3, [r3, #8]
 810fc4c:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 810fc50:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 810fc54:	687a      	ldr	r2, [r7, #4]
 810fc56:	6812      	ldr	r2, [r2, #0]
 810fc58:	6b79      	ldr	r1, [r7, #52]	; 0x34
 810fc5a:	430b      	orrs	r3, r1
 810fc5c:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 810fc5e:	687b      	ldr	r3, [r7, #4]
 810fc60:	681b      	ldr	r3, [r3, #0]
 810fc62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810fc64:	f023 010f 	bic.w	r1, r3, #15
 810fc68:	687b      	ldr	r3, [r7, #4]
 810fc6a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 810fc6c:	687b      	ldr	r3, [r7, #4]
 810fc6e:	681b      	ldr	r3, [r3, #0]
 810fc70:	430a      	orrs	r2, r1
 810fc72:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 810fc74:	687b      	ldr	r3, [r7, #4]
 810fc76:	681b      	ldr	r3, [r3, #0]
 810fc78:	4aa6      	ldr	r2, [pc, #664]	; (810ff14 <UART_SetConfig+0x338>)
 810fc7a:	4293      	cmp	r3, r2
 810fc7c:	d176      	bne.n	810fd6c <UART_SetConfig+0x190>
 810fc7e:	4ba6      	ldr	r3, [pc, #664]	; (810ff18 <UART_SetConfig+0x33c>)
 810fc80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810fc82:	f003 0338 	and.w	r3, r3, #56	; 0x38
 810fc86:	2b28      	cmp	r3, #40	; 0x28
 810fc88:	d86c      	bhi.n	810fd64 <UART_SetConfig+0x188>
 810fc8a:	a201      	add	r2, pc, #4	; (adr r2, 810fc90 <UART_SetConfig+0xb4>)
 810fc8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810fc90:	0810fd35 	.word	0x0810fd35
 810fc94:	0810fd65 	.word	0x0810fd65
 810fc98:	0810fd65 	.word	0x0810fd65
 810fc9c:	0810fd65 	.word	0x0810fd65
 810fca0:	0810fd65 	.word	0x0810fd65
 810fca4:	0810fd65 	.word	0x0810fd65
 810fca8:	0810fd65 	.word	0x0810fd65
 810fcac:	0810fd65 	.word	0x0810fd65
 810fcb0:	0810fd3d 	.word	0x0810fd3d
 810fcb4:	0810fd65 	.word	0x0810fd65
 810fcb8:	0810fd65 	.word	0x0810fd65
 810fcbc:	0810fd65 	.word	0x0810fd65
 810fcc0:	0810fd65 	.word	0x0810fd65
 810fcc4:	0810fd65 	.word	0x0810fd65
 810fcc8:	0810fd65 	.word	0x0810fd65
 810fccc:	0810fd65 	.word	0x0810fd65
 810fcd0:	0810fd45 	.word	0x0810fd45
 810fcd4:	0810fd65 	.word	0x0810fd65
 810fcd8:	0810fd65 	.word	0x0810fd65
 810fcdc:	0810fd65 	.word	0x0810fd65
 810fce0:	0810fd65 	.word	0x0810fd65
 810fce4:	0810fd65 	.word	0x0810fd65
 810fce8:	0810fd65 	.word	0x0810fd65
 810fcec:	0810fd65 	.word	0x0810fd65
 810fcf0:	0810fd4d 	.word	0x0810fd4d
 810fcf4:	0810fd65 	.word	0x0810fd65
 810fcf8:	0810fd65 	.word	0x0810fd65
 810fcfc:	0810fd65 	.word	0x0810fd65
 810fd00:	0810fd65 	.word	0x0810fd65
 810fd04:	0810fd65 	.word	0x0810fd65
 810fd08:	0810fd65 	.word	0x0810fd65
 810fd0c:	0810fd65 	.word	0x0810fd65
 810fd10:	0810fd55 	.word	0x0810fd55
 810fd14:	0810fd65 	.word	0x0810fd65
 810fd18:	0810fd65 	.word	0x0810fd65
 810fd1c:	0810fd65 	.word	0x0810fd65
 810fd20:	0810fd65 	.word	0x0810fd65
 810fd24:	0810fd65 	.word	0x0810fd65
 810fd28:	0810fd65 	.word	0x0810fd65
 810fd2c:	0810fd65 	.word	0x0810fd65
 810fd30:	0810fd5d 	.word	0x0810fd5d
 810fd34:	2301      	movs	r3, #1
 810fd36:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810fd3a:	e220      	b.n	811017e <UART_SetConfig+0x5a2>
 810fd3c:	2304      	movs	r3, #4
 810fd3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810fd42:	e21c      	b.n	811017e <UART_SetConfig+0x5a2>
 810fd44:	2308      	movs	r3, #8
 810fd46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810fd4a:	e218      	b.n	811017e <UART_SetConfig+0x5a2>
 810fd4c:	2310      	movs	r3, #16
 810fd4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810fd52:	e214      	b.n	811017e <UART_SetConfig+0x5a2>
 810fd54:	2320      	movs	r3, #32
 810fd56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810fd5a:	e210      	b.n	811017e <UART_SetConfig+0x5a2>
 810fd5c:	2340      	movs	r3, #64	; 0x40
 810fd5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810fd62:	e20c      	b.n	811017e <UART_SetConfig+0x5a2>
 810fd64:	2380      	movs	r3, #128	; 0x80
 810fd66:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810fd6a:	e208      	b.n	811017e <UART_SetConfig+0x5a2>
 810fd6c:	687b      	ldr	r3, [r7, #4]
 810fd6e:	681b      	ldr	r3, [r3, #0]
 810fd70:	4a6a      	ldr	r2, [pc, #424]	; (810ff1c <UART_SetConfig+0x340>)
 810fd72:	4293      	cmp	r3, r2
 810fd74:	d130      	bne.n	810fdd8 <UART_SetConfig+0x1fc>
 810fd76:	4b68      	ldr	r3, [pc, #416]	; (810ff18 <UART_SetConfig+0x33c>)
 810fd78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810fd7a:	f003 0307 	and.w	r3, r3, #7
 810fd7e:	2b05      	cmp	r3, #5
 810fd80:	d826      	bhi.n	810fdd0 <UART_SetConfig+0x1f4>
 810fd82:	a201      	add	r2, pc, #4	; (adr r2, 810fd88 <UART_SetConfig+0x1ac>)
 810fd84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810fd88:	0810fda1 	.word	0x0810fda1
 810fd8c:	0810fda9 	.word	0x0810fda9
 810fd90:	0810fdb1 	.word	0x0810fdb1
 810fd94:	0810fdb9 	.word	0x0810fdb9
 810fd98:	0810fdc1 	.word	0x0810fdc1
 810fd9c:	0810fdc9 	.word	0x0810fdc9
 810fda0:	2300      	movs	r3, #0
 810fda2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810fda6:	e1ea      	b.n	811017e <UART_SetConfig+0x5a2>
 810fda8:	2304      	movs	r3, #4
 810fdaa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810fdae:	e1e6      	b.n	811017e <UART_SetConfig+0x5a2>
 810fdb0:	2308      	movs	r3, #8
 810fdb2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810fdb6:	e1e2      	b.n	811017e <UART_SetConfig+0x5a2>
 810fdb8:	2310      	movs	r3, #16
 810fdba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810fdbe:	e1de      	b.n	811017e <UART_SetConfig+0x5a2>
 810fdc0:	2320      	movs	r3, #32
 810fdc2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810fdc6:	e1da      	b.n	811017e <UART_SetConfig+0x5a2>
 810fdc8:	2340      	movs	r3, #64	; 0x40
 810fdca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810fdce:	e1d6      	b.n	811017e <UART_SetConfig+0x5a2>
 810fdd0:	2380      	movs	r3, #128	; 0x80
 810fdd2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810fdd6:	e1d2      	b.n	811017e <UART_SetConfig+0x5a2>
 810fdd8:	687b      	ldr	r3, [r7, #4]
 810fdda:	681b      	ldr	r3, [r3, #0]
 810fddc:	4a50      	ldr	r2, [pc, #320]	; (810ff20 <UART_SetConfig+0x344>)
 810fdde:	4293      	cmp	r3, r2
 810fde0:	d130      	bne.n	810fe44 <UART_SetConfig+0x268>
 810fde2:	4b4d      	ldr	r3, [pc, #308]	; (810ff18 <UART_SetConfig+0x33c>)
 810fde4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810fde6:	f003 0307 	and.w	r3, r3, #7
 810fdea:	2b05      	cmp	r3, #5
 810fdec:	d826      	bhi.n	810fe3c <UART_SetConfig+0x260>
 810fdee:	a201      	add	r2, pc, #4	; (adr r2, 810fdf4 <UART_SetConfig+0x218>)
 810fdf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810fdf4:	0810fe0d 	.word	0x0810fe0d
 810fdf8:	0810fe15 	.word	0x0810fe15
 810fdfc:	0810fe1d 	.word	0x0810fe1d
 810fe00:	0810fe25 	.word	0x0810fe25
 810fe04:	0810fe2d 	.word	0x0810fe2d
 810fe08:	0810fe35 	.word	0x0810fe35
 810fe0c:	2300      	movs	r3, #0
 810fe0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810fe12:	e1b4      	b.n	811017e <UART_SetConfig+0x5a2>
 810fe14:	2304      	movs	r3, #4
 810fe16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810fe1a:	e1b0      	b.n	811017e <UART_SetConfig+0x5a2>
 810fe1c:	2308      	movs	r3, #8
 810fe1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810fe22:	e1ac      	b.n	811017e <UART_SetConfig+0x5a2>
 810fe24:	2310      	movs	r3, #16
 810fe26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810fe2a:	e1a8      	b.n	811017e <UART_SetConfig+0x5a2>
 810fe2c:	2320      	movs	r3, #32
 810fe2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810fe32:	e1a4      	b.n	811017e <UART_SetConfig+0x5a2>
 810fe34:	2340      	movs	r3, #64	; 0x40
 810fe36:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810fe3a:	e1a0      	b.n	811017e <UART_SetConfig+0x5a2>
 810fe3c:	2380      	movs	r3, #128	; 0x80
 810fe3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810fe42:	e19c      	b.n	811017e <UART_SetConfig+0x5a2>
 810fe44:	687b      	ldr	r3, [r7, #4]
 810fe46:	681b      	ldr	r3, [r3, #0]
 810fe48:	4a36      	ldr	r2, [pc, #216]	; (810ff24 <UART_SetConfig+0x348>)
 810fe4a:	4293      	cmp	r3, r2
 810fe4c:	d130      	bne.n	810feb0 <UART_SetConfig+0x2d4>
 810fe4e:	4b32      	ldr	r3, [pc, #200]	; (810ff18 <UART_SetConfig+0x33c>)
 810fe50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810fe52:	f003 0307 	and.w	r3, r3, #7
 810fe56:	2b05      	cmp	r3, #5
 810fe58:	d826      	bhi.n	810fea8 <UART_SetConfig+0x2cc>
 810fe5a:	a201      	add	r2, pc, #4	; (adr r2, 810fe60 <UART_SetConfig+0x284>)
 810fe5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810fe60:	0810fe79 	.word	0x0810fe79
 810fe64:	0810fe81 	.word	0x0810fe81
 810fe68:	0810fe89 	.word	0x0810fe89
 810fe6c:	0810fe91 	.word	0x0810fe91
 810fe70:	0810fe99 	.word	0x0810fe99
 810fe74:	0810fea1 	.word	0x0810fea1
 810fe78:	2300      	movs	r3, #0
 810fe7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810fe7e:	e17e      	b.n	811017e <UART_SetConfig+0x5a2>
 810fe80:	2304      	movs	r3, #4
 810fe82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810fe86:	e17a      	b.n	811017e <UART_SetConfig+0x5a2>
 810fe88:	2308      	movs	r3, #8
 810fe8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810fe8e:	e176      	b.n	811017e <UART_SetConfig+0x5a2>
 810fe90:	2310      	movs	r3, #16
 810fe92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810fe96:	e172      	b.n	811017e <UART_SetConfig+0x5a2>
 810fe98:	2320      	movs	r3, #32
 810fe9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810fe9e:	e16e      	b.n	811017e <UART_SetConfig+0x5a2>
 810fea0:	2340      	movs	r3, #64	; 0x40
 810fea2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810fea6:	e16a      	b.n	811017e <UART_SetConfig+0x5a2>
 810fea8:	2380      	movs	r3, #128	; 0x80
 810feaa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810feae:	e166      	b.n	811017e <UART_SetConfig+0x5a2>
 810feb0:	687b      	ldr	r3, [r7, #4]
 810feb2:	681b      	ldr	r3, [r3, #0]
 810feb4:	4a1c      	ldr	r2, [pc, #112]	; (810ff28 <UART_SetConfig+0x34c>)
 810feb6:	4293      	cmp	r3, r2
 810feb8:	d140      	bne.n	810ff3c <UART_SetConfig+0x360>
 810feba:	4b17      	ldr	r3, [pc, #92]	; (810ff18 <UART_SetConfig+0x33c>)
 810febc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810febe:	f003 0307 	and.w	r3, r3, #7
 810fec2:	2b05      	cmp	r3, #5
 810fec4:	d836      	bhi.n	810ff34 <UART_SetConfig+0x358>
 810fec6:	a201      	add	r2, pc, #4	; (adr r2, 810fecc <UART_SetConfig+0x2f0>)
 810fec8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810fecc:	0810fee5 	.word	0x0810fee5
 810fed0:	0810feed 	.word	0x0810feed
 810fed4:	0810fef5 	.word	0x0810fef5
 810fed8:	0810fefd 	.word	0x0810fefd
 810fedc:	0810ff05 	.word	0x0810ff05
 810fee0:	0810ff2d 	.word	0x0810ff2d
 810fee4:	2300      	movs	r3, #0
 810fee6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810feea:	e148      	b.n	811017e <UART_SetConfig+0x5a2>
 810feec:	2304      	movs	r3, #4
 810feee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810fef2:	e144      	b.n	811017e <UART_SetConfig+0x5a2>
 810fef4:	2308      	movs	r3, #8
 810fef6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810fefa:	e140      	b.n	811017e <UART_SetConfig+0x5a2>
 810fefc:	2310      	movs	r3, #16
 810fefe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810ff02:	e13c      	b.n	811017e <UART_SetConfig+0x5a2>
 810ff04:	2320      	movs	r3, #32
 810ff06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810ff0a:	e138      	b.n	811017e <UART_SetConfig+0x5a2>
 810ff0c:	cfff69f3 	.word	0xcfff69f3
 810ff10:	58000c00 	.word	0x58000c00
 810ff14:	40011000 	.word	0x40011000
 810ff18:	58024400 	.word	0x58024400
 810ff1c:	40004400 	.word	0x40004400
 810ff20:	40004800 	.word	0x40004800
 810ff24:	40004c00 	.word	0x40004c00
 810ff28:	40005000 	.word	0x40005000
 810ff2c:	2340      	movs	r3, #64	; 0x40
 810ff2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810ff32:	e124      	b.n	811017e <UART_SetConfig+0x5a2>
 810ff34:	2380      	movs	r3, #128	; 0x80
 810ff36:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810ff3a:	e120      	b.n	811017e <UART_SetConfig+0x5a2>
 810ff3c:	687b      	ldr	r3, [r7, #4]
 810ff3e:	681b      	ldr	r3, [r3, #0]
 810ff40:	4acc      	ldr	r2, [pc, #816]	; (8110274 <UART_SetConfig+0x698>)
 810ff42:	4293      	cmp	r3, r2
 810ff44:	d176      	bne.n	8110034 <UART_SetConfig+0x458>
 810ff46:	4bcc      	ldr	r3, [pc, #816]	; (8110278 <UART_SetConfig+0x69c>)
 810ff48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810ff4a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 810ff4e:	2b28      	cmp	r3, #40	; 0x28
 810ff50:	d86c      	bhi.n	811002c <UART_SetConfig+0x450>
 810ff52:	a201      	add	r2, pc, #4	; (adr r2, 810ff58 <UART_SetConfig+0x37c>)
 810ff54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810ff58:	0810fffd 	.word	0x0810fffd
 810ff5c:	0811002d 	.word	0x0811002d
 810ff60:	0811002d 	.word	0x0811002d
 810ff64:	0811002d 	.word	0x0811002d
 810ff68:	0811002d 	.word	0x0811002d
 810ff6c:	0811002d 	.word	0x0811002d
 810ff70:	0811002d 	.word	0x0811002d
 810ff74:	0811002d 	.word	0x0811002d
 810ff78:	08110005 	.word	0x08110005
 810ff7c:	0811002d 	.word	0x0811002d
 810ff80:	0811002d 	.word	0x0811002d
 810ff84:	0811002d 	.word	0x0811002d
 810ff88:	0811002d 	.word	0x0811002d
 810ff8c:	0811002d 	.word	0x0811002d
 810ff90:	0811002d 	.word	0x0811002d
 810ff94:	0811002d 	.word	0x0811002d
 810ff98:	0811000d 	.word	0x0811000d
 810ff9c:	0811002d 	.word	0x0811002d
 810ffa0:	0811002d 	.word	0x0811002d
 810ffa4:	0811002d 	.word	0x0811002d
 810ffa8:	0811002d 	.word	0x0811002d
 810ffac:	0811002d 	.word	0x0811002d
 810ffb0:	0811002d 	.word	0x0811002d
 810ffb4:	0811002d 	.word	0x0811002d
 810ffb8:	08110015 	.word	0x08110015
 810ffbc:	0811002d 	.word	0x0811002d
 810ffc0:	0811002d 	.word	0x0811002d
 810ffc4:	0811002d 	.word	0x0811002d
 810ffc8:	0811002d 	.word	0x0811002d
 810ffcc:	0811002d 	.word	0x0811002d
 810ffd0:	0811002d 	.word	0x0811002d
 810ffd4:	0811002d 	.word	0x0811002d
 810ffd8:	0811001d 	.word	0x0811001d
 810ffdc:	0811002d 	.word	0x0811002d
 810ffe0:	0811002d 	.word	0x0811002d
 810ffe4:	0811002d 	.word	0x0811002d
 810ffe8:	0811002d 	.word	0x0811002d
 810ffec:	0811002d 	.word	0x0811002d
 810fff0:	0811002d 	.word	0x0811002d
 810fff4:	0811002d 	.word	0x0811002d
 810fff8:	08110025 	.word	0x08110025
 810fffc:	2301      	movs	r3, #1
 810fffe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8110002:	e0bc      	b.n	811017e <UART_SetConfig+0x5a2>
 8110004:	2304      	movs	r3, #4
 8110006:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 811000a:	e0b8      	b.n	811017e <UART_SetConfig+0x5a2>
 811000c:	2308      	movs	r3, #8
 811000e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8110012:	e0b4      	b.n	811017e <UART_SetConfig+0x5a2>
 8110014:	2310      	movs	r3, #16
 8110016:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 811001a:	e0b0      	b.n	811017e <UART_SetConfig+0x5a2>
 811001c:	2320      	movs	r3, #32
 811001e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8110022:	e0ac      	b.n	811017e <UART_SetConfig+0x5a2>
 8110024:	2340      	movs	r3, #64	; 0x40
 8110026:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 811002a:	e0a8      	b.n	811017e <UART_SetConfig+0x5a2>
 811002c:	2380      	movs	r3, #128	; 0x80
 811002e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8110032:	e0a4      	b.n	811017e <UART_SetConfig+0x5a2>
 8110034:	687b      	ldr	r3, [r7, #4]
 8110036:	681b      	ldr	r3, [r3, #0]
 8110038:	4a90      	ldr	r2, [pc, #576]	; (811027c <UART_SetConfig+0x6a0>)
 811003a:	4293      	cmp	r3, r2
 811003c:	d130      	bne.n	81100a0 <UART_SetConfig+0x4c4>
 811003e:	4b8e      	ldr	r3, [pc, #568]	; (8110278 <UART_SetConfig+0x69c>)
 8110040:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8110042:	f003 0307 	and.w	r3, r3, #7
 8110046:	2b05      	cmp	r3, #5
 8110048:	d826      	bhi.n	8110098 <UART_SetConfig+0x4bc>
 811004a:	a201      	add	r2, pc, #4	; (adr r2, 8110050 <UART_SetConfig+0x474>)
 811004c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8110050:	08110069 	.word	0x08110069
 8110054:	08110071 	.word	0x08110071
 8110058:	08110079 	.word	0x08110079
 811005c:	08110081 	.word	0x08110081
 8110060:	08110089 	.word	0x08110089
 8110064:	08110091 	.word	0x08110091
 8110068:	2300      	movs	r3, #0
 811006a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 811006e:	e086      	b.n	811017e <UART_SetConfig+0x5a2>
 8110070:	2304      	movs	r3, #4
 8110072:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8110076:	e082      	b.n	811017e <UART_SetConfig+0x5a2>
 8110078:	2308      	movs	r3, #8
 811007a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 811007e:	e07e      	b.n	811017e <UART_SetConfig+0x5a2>
 8110080:	2310      	movs	r3, #16
 8110082:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8110086:	e07a      	b.n	811017e <UART_SetConfig+0x5a2>
 8110088:	2320      	movs	r3, #32
 811008a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 811008e:	e076      	b.n	811017e <UART_SetConfig+0x5a2>
 8110090:	2340      	movs	r3, #64	; 0x40
 8110092:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8110096:	e072      	b.n	811017e <UART_SetConfig+0x5a2>
 8110098:	2380      	movs	r3, #128	; 0x80
 811009a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 811009e:	e06e      	b.n	811017e <UART_SetConfig+0x5a2>
 81100a0:	687b      	ldr	r3, [r7, #4]
 81100a2:	681b      	ldr	r3, [r3, #0]
 81100a4:	4a76      	ldr	r2, [pc, #472]	; (8110280 <UART_SetConfig+0x6a4>)
 81100a6:	4293      	cmp	r3, r2
 81100a8:	d130      	bne.n	811010c <UART_SetConfig+0x530>
 81100aa:	4b73      	ldr	r3, [pc, #460]	; (8110278 <UART_SetConfig+0x69c>)
 81100ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81100ae:	f003 0307 	and.w	r3, r3, #7
 81100b2:	2b05      	cmp	r3, #5
 81100b4:	d826      	bhi.n	8110104 <UART_SetConfig+0x528>
 81100b6:	a201      	add	r2, pc, #4	; (adr r2, 81100bc <UART_SetConfig+0x4e0>)
 81100b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81100bc:	081100d5 	.word	0x081100d5
 81100c0:	081100dd 	.word	0x081100dd
 81100c4:	081100e5 	.word	0x081100e5
 81100c8:	081100ed 	.word	0x081100ed
 81100cc:	081100f5 	.word	0x081100f5
 81100d0:	081100fd 	.word	0x081100fd
 81100d4:	2300      	movs	r3, #0
 81100d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81100da:	e050      	b.n	811017e <UART_SetConfig+0x5a2>
 81100dc:	2304      	movs	r3, #4
 81100de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81100e2:	e04c      	b.n	811017e <UART_SetConfig+0x5a2>
 81100e4:	2308      	movs	r3, #8
 81100e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81100ea:	e048      	b.n	811017e <UART_SetConfig+0x5a2>
 81100ec:	2310      	movs	r3, #16
 81100ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81100f2:	e044      	b.n	811017e <UART_SetConfig+0x5a2>
 81100f4:	2320      	movs	r3, #32
 81100f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81100fa:	e040      	b.n	811017e <UART_SetConfig+0x5a2>
 81100fc:	2340      	movs	r3, #64	; 0x40
 81100fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8110102:	e03c      	b.n	811017e <UART_SetConfig+0x5a2>
 8110104:	2380      	movs	r3, #128	; 0x80
 8110106:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 811010a:	e038      	b.n	811017e <UART_SetConfig+0x5a2>
 811010c:	687b      	ldr	r3, [r7, #4]
 811010e:	681b      	ldr	r3, [r3, #0]
 8110110:	4a5c      	ldr	r2, [pc, #368]	; (8110284 <UART_SetConfig+0x6a8>)
 8110112:	4293      	cmp	r3, r2
 8110114:	d130      	bne.n	8110178 <UART_SetConfig+0x59c>
 8110116:	4b58      	ldr	r3, [pc, #352]	; (8110278 <UART_SetConfig+0x69c>)
 8110118:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 811011a:	f003 0307 	and.w	r3, r3, #7
 811011e:	2b05      	cmp	r3, #5
 8110120:	d826      	bhi.n	8110170 <UART_SetConfig+0x594>
 8110122:	a201      	add	r2, pc, #4	; (adr r2, 8110128 <UART_SetConfig+0x54c>)
 8110124:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8110128:	08110141 	.word	0x08110141
 811012c:	08110149 	.word	0x08110149
 8110130:	08110151 	.word	0x08110151
 8110134:	08110159 	.word	0x08110159
 8110138:	08110161 	.word	0x08110161
 811013c:	08110169 	.word	0x08110169
 8110140:	2302      	movs	r3, #2
 8110142:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8110146:	e01a      	b.n	811017e <UART_SetConfig+0x5a2>
 8110148:	2304      	movs	r3, #4
 811014a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 811014e:	e016      	b.n	811017e <UART_SetConfig+0x5a2>
 8110150:	2308      	movs	r3, #8
 8110152:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8110156:	e012      	b.n	811017e <UART_SetConfig+0x5a2>
 8110158:	2310      	movs	r3, #16
 811015a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 811015e:	e00e      	b.n	811017e <UART_SetConfig+0x5a2>
 8110160:	2320      	movs	r3, #32
 8110162:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8110166:	e00a      	b.n	811017e <UART_SetConfig+0x5a2>
 8110168:	2340      	movs	r3, #64	; 0x40
 811016a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 811016e:	e006      	b.n	811017e <UART_SetConfig+0x5a2>
 8110170:	2380      	movs	r3, #128	; 0x80
 8110172:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8110176:	e002      	b.n	811017e <UART_SetConfig+0x5a2>
 8110178:	2380      	movs	r3, #128	; 0x80
 811017a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 811017e:	687b      	ldr	r3, [r7, #4]
 8110180:	681b      	ldr	r3, [r3, #0]
 8110182:	4a40      	ldr	r2, [pc, #256]	; (8110284 <UART_SetConfig+0x6a8>)
 8110184:	4293      	cmp	r3, r2
 8110186:	f040 80ef 	bne.w	8110368 <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 811018a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 811018e:	2b20      	cmp	r3, #32
 8110190:	dc46      	bgt.n	8110220 <UART_SetConfig+0x644>
 8110192:	2b02      	cmp	r3, #2
 8110194:	f2c0 8081 	blt.w	811029a <UART_SetConfig+0x6be>
 8110198:	3b02      	subs	r3, #2
 811019a:	2b1e      	cmp	r3, #30
 811019c:	d87d      	bhi.n	811029a <UART_SetConfig+0x6be>
 811019e:	a201      	add	r2, pc, #4	; (adr r2, 81101a4 <UART_SetConfig+0x5c8>)
 81101a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81101a4:	08110227 	.word	0x08110227
 81101a8:	0811029b 	.word	0x0811029b
 81101ac:	0811022f 	.word	0x0811022f
 81101b0:	0811029b 	.word	0x0811029b
 81101b4:	0811029b 	.word	0x0811029b
 81101b8:	0811029b 	.word	0x0811029b
 81101bc:	0811023f 	.word	0x0811023f
 81101c0:	0811029b 	.word	0x0811029b
 81101c4:	0811029b 	.word	0x0811029b
 81101c8:	0811029b 	.word	0x0811029b
 81101cc:	0811029b 	.word	0x0811029b
 81101d0:	0811029b 	.word	0x0811029b
 81101d4:	0811029b 	.word	0x0811029b
 81101d8:	0811029b 	.word	0x0811029b
 81101dc:	0811024f 	.word	0x0811024f
 81101e0:	0811029b 	.word	0x0811029b
 81101e4:	0811029b 	.word	0x0811029b
 81101e8:	0811029b 	.word	0x0811029b
 81101ec:	0811029b 	.word	0x0811029b
 81101f0:	0811029b 	.word	0x0811029b
 81101f4:	0811029b 	.word	0x0811029b
 81101f8:	0811029b 	.word	0x0811029b
 81101fc:	0811029b 	.word	0x0811029b
 8110200:	0811029b 	.word	0x0811029b
 8110204:	0811029b 	.word	0x0811029b
 8110208:	0811029b 	.word	0x0811029b
 811020c:	0811029b 	.word	0x0811029b
 8110210:	0811029b 	.word	0x0811029b
 8110214:	0811029b 	.word	0x0811029b
 8110218:	0811029b 	.word	0x0811029b
 811021c:	0811028d 	.word	0x0811028d
 8110220:	2b40      	cmp	r3, #64	; 0x40
 8110222:	d036      	beq.n	8110292 <UART_SetConfig+0x6b6>
 8110224:	e039      	b.n	811029a <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8110226:	f7fb f929 	bl	810b47c <HAL_RCCEx_GetD3PCLK1Freq>
 811022a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 811022c:	e03b      	b.n	81102a6 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 811022e:	f107 0314 	add.w	r3, r7, #20
 8110232:	4618      	mov	r0, r3
 8110234:	f7fb f938 	bl	810b4a8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8110238:	69bb      	ldr	r3, [r7, #24]
 811023a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 811023c:	e033      	b.n	81102a6 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 811023e:	f107 0308 	add.w	r3, r7, #8
 8110242:	4618      	mov	r0, r3
 8110244:	f7fb fa84 	bl	810b750 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8110248:	68fb      	ldr	r3, [r7, #12]
 811024a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 811024c:	e02b      	b.n	81102a6 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 811024e:	4b0a      	ldr	r3, [pc, #40]	; (8110278 <UART_SetConfig+0x69c>)
 8110250:	681b      	ldr	r3, [r3, #0]
 8110252:	f003 0320 	and.w	r3, r3, #32
 8110256:	2b00      	cmp	r3, #0
 8110258:	d009      	beq.n	811026e <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 811025a:	4b07      	ldr	r3, [pc, #28]	; (8110278 <UART_SetConfig+0x69c>)
 811025c:	681b      	ldr	r3, [r3, #0]
 811025e:	08db      	lsrs	r3, r3, #3
 8110260:	f003 0303 	and.w	r3, r3, #3
 8110264:	4a08      	ldr	r2, [pc, #32]	; (8110288 <UART_SetConfig+0x6ac>)
 8110266:	fa22 f303 	lsr.w	r3, r2, r3
 811026a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 811026c:	e01b      	b.n	81102a6 <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 811026e:	4b06      	ldr	r3, [pc, #24]	; (8110288 <UART_SetConfig+0x6ac>)
 8110270:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8110272:	e018      	b.n	81102a6 <UART_SetConfig+0x6ca>
 8110274:	40011400 	.word	0x40011400
 8110278:	58024400 	.word	0x58024400
 811027c:	40007800 	.word	0x40007800
 8110280:	40007c00 	.word	0x40007c00
 8110284:	58000c00 	.word	0x58000c00
 8110288:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 811028c:	4bc4      	ldr	r3, [pc, #784]	; (81105a0 <UART_SetConfig+0x9c4>)
 811028e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8110290:	e009      	b.n	81102a6 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8110292:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8110296:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8110298:	e005      	b.n	81102a6 <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 811029a:	2300      	movs	r3, #0
 811029c:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 811029e:	2301      	movs	r3, #1
 81102a0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 81102a4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 81102a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 81102a8:	2b00      	cmp	r3, #0
 81102aa:	f000 81da 	beq.w	8110662 <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 81102ae:	687b      	ldr	r3, [r7, #4]
 81102b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81102b2:	4abc      	ldr	r2, [pc, #752]	; (81105a4 <UART_SetConfig+0x9c8>)
 81102b4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 81102b8:	461a      	mov	r2, r3
 81102ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 81102bc:	fbb3 f3f2 	udiv	r3, r3, r2
 81102c0:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 81102c2:	687b      	ldr	r3, [r7, #4]
 81102c4:	685a      	ldr	r2, [r3, #4]
 81102c6:	4613      	mov	r3, r2
 81102c8:	005b      	lsls	r3, r3, #1
 81102ca:	4413      	add	r3, r2
 81102cc:	6a3a      	ldr	r2, [r7, #32]
 81102ce:	429a      	cmp	r2, r3
 81102d0:	d305      	bcc.n	81102de <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 81102d2:	687b      	ldr	r3, [r7, #4]
 81102d4:	685b      	ldr	r3, [r3, #4]
 81102d6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 81102d8:	6a3a      	ldr	r2, [r7, #32]
 81102da:	429a      	cmp	r2, r3
 81102dc:	d903      	bls.n	81102e6 <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 81102de:	2301      	movs	r3, #1
 81102e0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 81102e4:	e1bd      	b.n	8110662 <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 81102e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 81102e8:	4618      	mov	r0, r3
 81102ea:	f04f 0100 	mov.w	r1, #0
 81102ee:	687b      	ldr	r3, [r7, #4]
 81102f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81102f2:	4aac      	ldr	r2, [pc, #688]	; (81105a4 <UART_SetConfig+0x9c8>)
 81102f4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 81102f8:	b29a      	uxth	r2, r3
 81102fa:	f04f 0300 	mov.w	r3, #0
 81102fe:	f7f0 fcdb 	bl	8100cb8 <__aeabi_uldivmod>
 8110302:	4602      	mov	r2, r0
 8110304:	460b      	mov	r3, r1
 8110306:	4610      	mov	r0, r2
 8110308:	4619      	mov	r1, r3
 811030a:	f04f 0200 	mov.w	r2, #0
 811030e:	f04f 0300 	mov.w	r3, #0
 8110312:	020b      	lsls	r3, r1, #8
 8110314:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8110318:	0202      	lsls	r2, r0, #8
 811031a:	6879      	ldr	r1, [r7, #4]
 811031c:	6849      	ldr	r1, [r1, #4]
 811031e:	0849      	lsrs	r1, r1, #1
 8110320:	4608      	mov	r0, r1
 8110322:	f04f 0100 	mov.w	r1, #0
 8110326:	1814      	adds	r4, r2, r0
 8110328:	eb43 0501 	adc.w	r5, r3, r1
 811032c:	687b      	ldr	r3, [r7, #4]
 811032e:	685b      	ldr	r3, [r3, #4]
 8110330:	461a      	mov	r2, r3
 8110332:	f04f 0300 	mov.w	r3, #0
 8110336:	4620      	mov	r0, r4
 8110338:	4629      	mov	r1, r5
 811033a:	f7f0 fcbd 	bl	8100cb8 <__aeabi_uldivmod>
 811033e:	4602      	mov	r2, r0
 8110340:	460b      	mov	r3, r1
 8110342:	4613      	mov	r3, r2
 8110344:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8110346:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8110348:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 811034c:	d308      	bcc.n	8110360 <UART_SetConfig+0x784>
 811034e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8110350:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8110354:	d204      	bcs.n	8110360 <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 8110356:	687b      	ldr	r3, [r7, #4]
 8110358:	681b      	ldr	r3, [r3, #0]
 811035a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 811035c:	60da      	str	r2, [r3, #12]
 811035e:	e180      	b.n	8110662 <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 8110360:	2301      	movs	r3, #1
 8110362:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8110366:	e17c      	b.n	8110662 <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8110368:	687b      	ldr	r3, [r7, #4]
 811036a:	69db      	ldr	r3, [r3, #28]
 811036c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8110370:	f040 80bf 	bne.w	81104f2 <UART_SetConfig+0x916>
  {
    switch (clocksource)
 8110374:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8110378:	2b20      	cmp	r3, #32
 811037a:	dc49      	bgt.n	8110410 <UART_SetConfig+0x834>
 811037c:	2b00      	cmp	r3, #0
 811037e:	db7c      	blt.n	811047a <UART_SetConfig+0x89e>
 8110380:	2b20      	cmp	r3, #32
 8110382:	d87a      	bhi.n	811047a <UART_SetConfig+0x89e>
 8110384:	a201      	add	r2, pc, #4	; (adr r2, 811038c <UART_SetConfig+0x7b0>)
 8110386:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 811038a:	bf00      	nop
 811038c:	08110417 	.word	0x08110417
 8110390:	0811041f 	.word	0x0811041f
 8110394:	0811047b 	.word	0x0811047b
 8110398:	0811047b 	.word	0x0811047b
 811039c:	08110427 	.word	0x08110427
 81103a0:	0811047b 	.word	0x0811047b
 81103a4:	0811047b 	.word	0x0811047b
 81103a8:	0811047b 	.word	0x0811047b
 81103ac:	08110437 	.word	0x08110437
 81103b0:	0811047b 	.word	0x0811047b
 81103b4:	0811047b 	.word	0x0811047b
 81103b8:	0811047b 	.word	0x0811047b
 81103bc:	0811047b 	.word	0x0811047b
 81103c0:	0811047b 	.word	0x0811047b
 81103c4:	0811047b 	.word	0x0811047b
 81103c8:	0811047b 	.word	0x0811047b
 81103cc:	08110447 	.word	0x08110447
 81103d0:	0811047b 	.word	0x0811047b
 81103d4:	0811047b 	.word	0x0811047b
 81103d8:	0811047b 	.word	0x0811047b
 81103dc:	0811047b 	.word	0x0811047b
 81103e0:	0811047b 	.word	0x0811047b
 81103e4:	0811047b 	.word	0x0811047b
 81103e8:	0811047b 	.word	0x0811047b
 81103ec:	0811047b 	.word	0x0811047b
 81103f0:	0811047b 	.word	0x0811047b
 81103f4:	0811047b 	.word	0x0811047b
 81103f8:	0811047b 	.word	0x0811047b
 81103fc:	0811047b 	.word	0x0811047b
 8110400:	0811047b 	.word	0x0811047b
 8110404:	0811047b 	.word	0x0811047b
 8110408:	0811047b 	.word	0x0811047b
 811040c:	0811046d 	.word	0x0811046d
 8110410:	2b40      	cmp	r3, #64	; 0x40
 8110412:	d02e      	beq.n	8110472 <UART_SetConfig+0x896>
 8110414:	e031      	b.n	811047a <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8110416:	f7f9 fbb1 	bl	8109b7c <HAL_RCC_GetPCLK1Freq>
 811041a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 811041c:	e033      	b.n	8110486 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 811041e:	f7f9 fbc3 	bl	8109ba8 <HAL_RCC_GetPCLK2Freq>
 8110422:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8110424:	e02f      	b.n	8110486 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8110426:	f107 0314 	add.w	r3, r7, #20
 811042a:	4618      	mov	r0, r3
 811042c:	f7fb f83c 	bl	810b4a8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8110430:	69bb      	ldr	r3, [r7, #24]
 8110432:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8110434:	e027      	b.n	8110486 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8110436:	f107 0308 	add.w	r3, r7, #8
 811043a:	4618      	mov	r0, r3
 811043c:	f7fb f988 	bl	810b750 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8110440:	68fb      	ldr	r3, [r7, #12]
 8110442:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8110444:	e01f      	b.n	8110486 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8110446:	4b58      	ldr	r3, [pc, #352]	; (81105a8 <UART_SetConfig+0x9cc>)
 8110448:	681b      	ldr	r3, [r3, #0]
 811044a:	f003 0320 	and.w	r3, r3, #32
 811044e:	2b00      	cmp	r3, #0
 8110450:	d009      	beq.n	8110466 <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8110452:	4b55      	ldr	r3, [pc, #340]	; (81105a8 <UART_SetConfig+0x9cc>)
 8110454:	681b      	ldr	r3, [r3, #0]
 8110456:	08db      	lsrs	r3, r3, #3
 8110458:	f003 0303 	and.w	r3, r3, #3
 811045c:	4a53      	ldr	r2, [pc, #332]	; (81105ac <UART_SetConfig+0x9d0>)
 811045e:	fa22 f303 	lsr.w	r3, r2, r3
 8110462:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8110464:	e00f      	b.n	8110486 <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 8110466:	4b51      	ldr	r3, [pc, #324]	; (81105ac <UART_SetConfig+0x9d0>)
 8110468:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 811046a:	e00c      	b.n	8110486 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 811046c:	4b4c      	ldr	r3, [pc, #304]	; (81105a0 <UART_SetConfig+0x9c4>)
 811046e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8110470:	e009      	b.n	8110486 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8110472:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8110476:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8110478:	e005      	b.n	8110486 <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 811047a:	2300      	movs	r3, #0
 811047c:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 811047e:	2301      	movs	r3, #1
 8110480:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8110484:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8110486:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8110488:	2b00      	cmp	r3, #0
 811048a:	f000 80ea 	beq.w	8110662 <UART_SetConfig+0xa86>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 811048e:	687b      	ldr	r3, [r7, #4]
 8110490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8110492:	4a44      	ldr	r2, [pc, #272]	; (81105a4 <UART_SetConfig+0x9c8>)
 8110494:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8110498:	461a      	mov	r2, r3
 811049a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 811049c:	fbb3 f3f2 	udiv	r3, r3, r2
 81104a0:	005a      	lsls	r2, r3, #1
 81104a2:	687b      	ldr	r3, [r7, #4]
 81104a4:	685b      	ldr	r3, [r3, #4]
 81104a6:	085b      	lsrs	r3, r3, #1
 81104a8:	441a      	add	r2, r3
 81104aa:	687b      	ldr	r3, [r7, #4]
 81104ac:	685b      	ldr	r3, [r3, #4]
 81104ae:	fbb2 f3f3 	udiv	r3, r2, r3
 81104b2:	b29b      	uxth	r3, r3
 81104b4:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 81104b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81104b8:	2b0f      	cmp	r3, #15
 81104ba:	d916      	bls.n	81104ea <UART_SetConfig+0x90e>
 81104bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81104be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 81104c2:	d212      	bcs.n	81104ea <UART_SetConfig+0x90e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 81104c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81104c6:	b29b      	uxth	r3, r3
 81104c8:	f023 030f 	bic.w	r3, r3, #15
 81104cc:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 81104ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81104d0:	085b      	lsrs	r3, r3, #1
 81104d2:	b29b      	uxth	r3, r3
 81104d4:	f003 0307 	and.w	r3, r3, #7
 81104d8:	b29a      	uxth	r2, r3
 81104da:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 81104dc:	4313      	orrs	r3, r2
 81104de:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 81104e0:	687b      	ldr	r3, [r7, #4]
 81104e2:	681b      	ldr	r3, [r3, #0]
 81104e4:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 81104e6:	60da      	str	r2, [r3, #12]
 81104e8:	e0bb      	b.n	8110662 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 81104ea:	2301      	movs	r3, #1
 81104ec:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 81104f0:	e0b7      	b.n	8110662 <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 81104f2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 81104f6:	2b20      	cmp	r3, #32
 81104f8:	dc4a      	bgt.n	8110590 <UART_SetConfig+0x9b4>
 81104fa:	2b00      	cmp	r3, #0
 81104fc:	f2c0 8086 	blt.w	811060c <UART_SetConfig+0xa30>
 8110500:	2b20      	cmp	r3, #32
 8110502:	f200 8083 	bhi.w	811060c <UART_SetConfig+0xa30>
 8110506:	a201      	add	r2, pc, #4	; (adr r2, 811050c <UART_SetConfig+0x930>)
 8110508:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 811050c:	08110597 	.word	0x08110597
 8110510:	081105b1 	.word	0x081105b1
 8110514:	0811060d 	.word	0x0811060d
 8110518:	0811060d 	.word	0x0811060d
 811051c:	081105b9 	.word	0x081105b9
 8110520:	0811060d 	.word	0x0811060d
 8110524:	0811060d 	.word	0x0811060d
 8110528:	0811060d 	.word	0x0811060d
 811052c:	081105c9 	.word	0x081105c9
 8110530:	0811060d 	.word	0x0811060d
 8110534:	0811060d 	.word	0x0811060d
 8110538:	0811060d 	.word	0x0811060d
 811053c:	0811060d 	.word	0x0811060d
 8110540:	0811060d 	.word	0x0811060d
 8110544:	0811060d 	.word	0x0811060d
 8110548:	0811060d 	.word	0x0811060d
 811054c:	081105d9 	.word	0x081105d9
 8110550:	0811060d 	.word	0x0811060d
 8110554:	0811060d 	.word	0x0811060d
 8110558:	0811060d 	.word	0x0811060d
 811055c:	0811060d 	.word	0x0811060d
 8110560:	0811060d 	.word	0x0811060d
 8110564:	0811060d 	.word	0x0811060d
 8110568:	0811060d 	.word	0x0811060d
 811056c:	0811060d 	.word	0x0811060d
 8110570:	0811060d 	.word	0x0811060d
 8110574:	0811060d 	.word	0x0811060d
 8110578:	0811060d 	.word	0x0811060d
 811057c:	0811060d 	.word	0x0811060d
 8110580:	0811060d 	.word	0x0811060d
 8110584:	0811060d 	.word	0x0811060d
 8110588:	0811060d 	.word	0x0811060d
 811058c:	081105ff 	.word	0x081105ff
 8110590:	2b40      	cmp	r3, #64	; 0x40
 8110592:	d037      	beq.n	8110604 <UART_SetConfig+0xa28>
 8110594:	e03a      	b.n	811060c <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8110596:	f7f9 faf1 	bl	8109b7c <HAL_RCC_GetPCLK1Freq>
 811059a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 811059c:	e03c      	b.n	8110618 <UART_SetConfig+0xa3c>
 811059e:	bf00      	nop
 81105a0:	003d0900 	.word	0x003d0900
 81105a4:	0811b4bc 	.word	0x0811b4bc
 81105a8:	58024400 	.word	0x58024400
 81105ac:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 81105b0:	f7f9 fafa 	bl	8109ba8 <HAL_RCC_GetPCLK2Freq>
 81105b4:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 81105b6:	e02f      	b.n	8110618 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 81105b8:	f107 0314 	add.w	r3, r7, #20
 81105bc:	4618      	mov	r0, r3
 81105be:	f7fa ff73 	bl	810b4a8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 81105c2:	69bb      	ldr	r3, [r7, #24]
 81105c4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 81105c6:	e027      	b.n	8110618 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 81105c8:	f107 0308 	add.w	r3, r7, #8
 81105cc:	4618      	mov	r0, r3
 81105ce:	f7fb f8bf 	bl	810b750 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 81105d2:	68fb      	ldr	r3, [r7, #12]
 81105d4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 81105d6:	e01f      	b.n	8110618 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 81105d8:	4b2c      	ldr	r3, [pc, #176]	; (811068c <UART_SetConfig+0xab0>)
 81105da:	681b      	ldr	r3, [r3, #0]
 81105dc:	f003 0320 	and.w	r3, r3, #32
 81105e0:	2b00      	cmp	r3, #0
 81105e2:	d009      	beq.n	81105f8 <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 81105e4:	4b29      	ldr	r3, [pc, #164]	; (811068c <UART_SetConfig+0xab0>)
 81105e6:	681b      	ldr	r3, [r3, #0]
 81105e8:	08db      	lsrs	r3, r3, #3
 81105ea:	f003 0303 	and.w	r3, r3, #3
 81105ee:	4a28      	ldr	r2, [pc, #160]	; (8110690 <UART_SetConfig+0xab4>)
 81105f0:	fa22 f303 	lsr.w	r3, r2, r3
 81105f4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 81105f6:	e00f      	b.n	8110618 <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 81105f8:	4b25      	ldr	r3, [pc, #148]	; (8110690 <UART_SetConfig+0xab4>)
 81105fa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 81105fc:	e00c      	b.n	8110618 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 81105fe:	4b25      	ldr	r3, [pc, #148]	; (8110694 <UART_SetConfig+0xab8>)
 8110600:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8110602:	e009      	b.n	8110618 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8110604:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8110608:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 811060a:	e005      	b.n	8110618 <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 811060c:	2300      	movs	r3, #0
 811060e:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8110610:	2301      	movs	r3, #1
 8110612:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8110616:	bf00      	nop
    }

    if (pclk != 0U)
 8110618:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 811061a:	2b00      	cmp	r3, #0
 811061c:	d021      	beq.n	8110662 <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 811061e:	687b      	ldr	r3, [r7, #4]
 8110620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8110622:	4a1d      	ldr	r2, [pc, #116]	; (8110698 <UART_SetConfig+0xabc>)
 8110624:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8110628:	461a      	mov	r2, r3
 811062a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 811062c:	fbb3 f2f2 	udiv	r2, r3, r2
 8110630:	687b      	ldr	r3, [r7, #4]
 8110632:	685b      	ldr	r3, [r3, #4]
 8110634:	085b      	lsrs	r3, r3, #1
 8110636:	441a      	add	r2, r3
 8110638:	687b      	ldr	r3, [r7, #4]
 811063a:	685b      	ldr	r3, [r3, #4]
 811063c:	fbb2 f3f3 	udiv	r3, r2, r3
 8110640:	b29b      	uxth	r3, r3
 8110642:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8110644:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8110646:	2b0f      	cmp	r3, #15
 8110648:	d908      	bls.n	811065c <UART_SetConfig+0xa80>
 811064a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 811064c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8110650:	d204      	bcs.n	811065c <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = usartdiv;
 8110652:	687b      	ldr	r3, [r7, #4]
 8110654:	681b      	ldr	r3, [r3, #0]
 8110656:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8110658:	60da      	str	r2, [r3, #12]
 811065a:	e002      	b.n	8110662 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 811065c:	2301      	movs	r3, #1
 811065e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8110662:	687b      	ldr	r3, [r7, #4]
 8110664:	2201      	movs	r2, #1
 8110666:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 811066a:	687b      	ldr	r3, [r7, #4]
 811066c:	2201      	movs	r2, #1
 811066e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8110672:	687b      	ldr	r3, [r7, #4]
 8110674:	2200      	movs	r2, #0
 8110676:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8110678:	687b      	ldr	r3, [r7, #4]
 811067a:	2200      	movs	r2, #0
 811067c:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 811067e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 8110682:	4618      	mov	r0, r3
 8110684:	3738      	adds	r7, #56	; 0x38
 8110686:	46bd      	mov	sp, r7
 8110688:	bdb0      	pop	{r4, r5, r7, pc}
 811068a:	bf00      	nop
 811068c:	58024400 	.word	0x58024400
 8110690:	03d09000 	.word	0x03d09000
 8110694:	003d0900 	.word	0x003d0900
 8110698:	0811b4bc 	.word	0x0811b4bc

0811069c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 811069c:	b480      	push	{r7}
 811069e:	b083      	sub	sp, #12
 81106a0:	af00      	add	r7, sp, #0
 81106a2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 81106a4:	687b      	ldr	r3, [r7, #4]
 81106a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81106a8:	f003 0301 	and.w	r3, r3, #1
 81106ac:	2b00      	cmp	r3, #0
 81106ae:	d00a      	beq.n	81106c6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 81106b0:	687b      	ldr	r3, [r7, #4]
 81106b2:	681b      	ldr	r3, [r3, #0]
 81106b4:	685b      	ldr	r3, [r3, #4]
 81106b6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 81106ba:	687b      	ldr	r3, [r7, #4]
 81106bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 81106be:	687b      	ldr	r3, [r7, #4]
 81106c0:	681b      	ldr	r3, [r3, #0]
 81106c2:	430a      	orrs	r2, r1
 81106c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 81106c6:	687b      	ldr	r3, [r7, #4]
 81106c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81106ca:	f003 0302 	and.w	r3, r3, #2
 81106ce:	2b00      	cmp	r3, #0
 81106d0:	d00a      	beq.n	81106e8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 81106d2:	687b      	ldr	r3, [r7, #4]
 81106d4:	681b      	ldr	r3, [r3, #0]
 81106d6:	685b      	ldr	r3, [r3, #4]
 81106d8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 81106dc:	687b      	ldr	r3, [r7, #4]
 81106de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 81106e0:	687b      	ldr	r3, [r7, #4]
 81106e2:	681b      	ldr	r3, [r3, #0]
 81106e4:	430a      	orrs	r2, r1
 81106e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 81106e8:	687b      	ldr	r3, [r7, #4]
 81106ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81106ec:	f003 0304 	and.w	r3, r3, #4
 81106f0:	2b00      	cmp	r3, #0
 81106f2:	d00a      	beq.n	811070a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 81106f4:	687b      	ldr	r3, [r7, #4]
 81106f6:	681b      	ldr	r3, [r3, #0]
 81106f8:	685b      	ldr	r3, [r3, #4]
 81106fa:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 81106fe:	687b      	ldr	r3, [r7, #4]
 8110700:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8110702:	687b      	ldr	r3, [r7, #4]
 8110704:	681b      	ldr	r3, [r3, #0]
 8110706:	430a      	orrs	r2, r1
 8110708:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 811070a:	687b      	ldr	r3, [r7, #4]
 811070c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 811070e:	f003 0308 	and.w	r3, r3, #8
 8110712:	2b00      	cmp	r3, #0
 8110714:	d00a      	beq.n	811072c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8110716:	687b      	ldr	r3, [r7, #4]
 8110718:	681b      	ldr	r3, [r3, #0]
 811071a:	685b      	ldr	r3, [r3, #4]
 811071c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8110720:	687b      	ldr	r3, [r7, #4]
 8110722:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8110724:	687b      	ldr	r3, [r7, #4]
 8110726:	681b      	ldr	r3, [r3, #0]
 8110728:	430a      	orrs	r2, r1
 811072a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 811072c:	687b      	ldr	r3, [r7, #4]
 811072e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8110730:	f003 0310 	and.w	r3, r3, #16
 8110734:	2b00      	cmp	r3, #0
 8110736:	d00a      	beq.n	811074e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8110738:	687b      	ldr	r3, [r7, #4]
 811073a:	681b      	ldr	r3, [r3, #0]
 811073c:	689b      	ldr	r3, [r3, #8]
 811073e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8110742:	687b      	ldr	r3, [r7, #4]
 8110744:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8110746:	687b      	ldr	r3, [r7, #4]
 8110748:	681b      	ldr	r3, [r3, #0]
 811074a:	430a      	orrs	r2, r1
 811074c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 811074e:	687b      	ldr	r3, [r7, #4]
 8110750:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8110752:	f003 0320 	and.w	r3, r3, #32
 8110756:	2b00      	cmp	r3, #0
 8110758:	d00a      	beq.n	8110770 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 811075a:	687b      	ldr	r3, [r7, #4]
 811075c:	681b      	ldr	r3, [r3, #0]
 811075e:	689b      	ldr	r3, [r3, #8]
 8110760:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8110764:	687b      	ldr	r3, [r7, #4]
 8110766:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8110768:	687b      	ldr	r3, [r7, #4]
 811076a:	681b      	ldr	r3, [r3, #0]
 811076c:	430a      	orrs	r2, r1
 811076e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8110770:	687b      	ldr	r3, [r7, #4]
 8110772:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8110774:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8110778:	2b00      	cmp	r3, #0
 811077a:	d01a      	beq.n	81107b2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 811077c:	687b      	ldr	r3, [r7, #4]
 811077e:	681b      	ldr	r3, [r3, #0]
 8110780:	685b      	ldr	r3, [r3, #4]
 8110782:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8110786:	687b      	ldr	r3, [r7, #4]
 8110788:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 811078a:	687b      	ldr	r3, [r7, #4]
 811078c:	681b      	ldr	r3, [r3, #0]
 811078e:	430a      	orrs	r2, r1
 8110790:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8110792:	687b      	ldr	r3, [r7, #4]
 8110794:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8110796:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 811079a:	d10a      	bne.n	81107b2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 811079c:	687b      	ldr	r3, [r7, #4]
 811079e:	681b      	ldr	r3, [r3, #0]
 81107a0:	685b      	ldr	r3, [r3, #4]
 81107a2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 81107a6:	687b      	ldr	r3, [r7, #4]
 81107a8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 81107aa:	687b      	ldr	r3, [r7, #4]
 81107ac:	681b      	ldr	r3, [r3, #0]
 81107ae:	430a      	orrs	r2, r1
 81107b0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 81107b2:	687b      	ldr	r3, [r7, #4]
 81107b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81107b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 81107ba:	2b00      	cmp	r3, #0
 81107bc:	d00a      	beq.n	81107d4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 81107be:	687b      	ldr	r3, [r7, #4]
 81107c0:	681b      	ldr	r3, [r3, #0]
 81107c2:	685b      	ldr	r3, [r3, #4]
 81107c4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 81107c8:	687b      	ldr	r3, [r7, #4]
 81107ca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 81107cc:	687b      	ldr	r3, [r7, #4]
 81107ce:	681b      	ldr	r3, [r3, #0]
 81107d0:	430a      	orrs	r2, r1
 81107d2:	605a      	str	r2, [r3, #4]
  }
}
 81107d4:	bf00      	nop
 81107d6:	370c      	adds	r7, #12
 81107d8:	46bd      	mov	sp, r7
 81107da:	f85d 7b04 	ldr.w	r7, [sp], #4
 81107de:	4770      	bx	lr

081107e0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 81107e0:	b580      	push	{r7, lr}
 81107e2:	b086      	sub	sp, #24
 81107e4:	af02      	add	r7, sp, #8
 81107e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 81107e8:	687b      	ldr	r3, [r7, #4]
 81107ea:	2200      	movs	r2, #0
 81107ec:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 81107f0:	f7f2 f904 	bl	81029fc <HAL_GetTick>
 81107f4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 81107f6:	687b      	ldr	r3, [r7, #4]
 81107f8:	681b      	ldr	r3, [r3, #0]
 81107fa:	681b      	ldr	r3, [r3, #0]
 81107fc:	f003 0308 	and.w	r3, r3, #8
 8110800:	2b08      	cmp	r3, #8
 8110802:	d10e      	bne.n	8110822 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8110804:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8110808:	9300      	str	r3, [sp, #0]
 811080a:	68fb      	ldr	r3, [r7, #12]
 811080c:	2200      	movs	r2, #0
 811080e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8110812:	6878      	ldr	r0, [r7, #4]
 8110814:	f000 f82f 	bl	8110876 <UART_WaitOnFlagUntilTimeout>
 8110818:	4603      	mov	r3, r0
 811081a:	2b00      	cmp	r3, #0
 811081c:	d001      	beq.n	8110822 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 811081e:	2303      	movs	r3, #3
 8110820:	e025      	b.n	811086e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8110822:	687b      	ldr	r3, [r7, #4]
 8110824:	681b      	ldr	r3, [r3, #0]
 8110826:	681b      	ldr	r3, [r3, #0]
 8110828:	f003 0304 	and.w	r3, r3, #4
 811082c:	2b04      	cmp	r3, #4
 811082e:	d10e      	bne.n	811084e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8110830:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8110834:	9300      	str	r3, [sp, #0]
 8110836:	68fb      	ldr	r3, [r7, #12]
 8110838:	2200      	movs	r2, #0
 811083a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 811083e:	6878      	ldr	r0, [r7, #4]
 8110840:	f000 f819 	bl	8110876 <UART_WaitOnFlagUntilTimeout>
 8110844:	4603      	mov	r3, r0
 8110846:	2b00      	cmp	r3, #0
 8110848:	d001      	beq.n	811084e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 811084a:	2303      	movs	r3, #3
 811084c:	e00f      	b.n	811086e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 811084e:	687b      	ldr	r3, [r7, #4]
 8110850:	2220      	movs	r2, #32
 8110852:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8110856:	687b      	ldr	r3, [r7, #4]
 8110858:	2220      	movs	r2, #32
 811085a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 811085e:	687b      	ldr	r3, [r7, #4]
 8110860:	2200      	movs	r2, #0
 8110862:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8110864:	687b      	ldr	r3, [r7, #4]
 8110866:	2200      	movs	r2, #0
 8110868:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 811086c:	2300      	movs	r3, #0
}
 811086e:	4618      	mov	r0, r3
 8110870:	3710      	adds	r7, #16
 8110872:	46bd      	mov	sp, r7
 8110874:	bd80      	pop	{r7, pc}

08110876 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8110876:	b580      	push	{r7, lr}
 8110878:	b084      	sub	sp, #16
 811087a:	af00      	add	r7, sp, #0
 811087c:	60f8      	str	r0, [r7, #12]
 811087e:	60b9      	str	r1, [r7, #8]
 8110880:	603b      	str	r3, [r7, #0]
 8110882:	4613      	mov	r3, r2
 8110884:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8110886:	e062      	b.n	811094e <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8110888:	69bb      	ldr	r3, [r7, #24]
 811088a:	f1b3 3fff 	cmp.w	r3, #4294967295
 811088e:	d05e      	beq.n	811094e <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8110890:	f7f2 f8b4 	bl	81029fc <HAL_GetTick>
 8110894:	4602      	mov	r2, r0
 8110896:	683b      	ldr	r3, [r7, #0]
 8110898:	1ad3      	subs	r3, r2, r3
 811089a:	69ba      	ldr	r2, [r7, #24]
 811089c:	429a      	cmp	r2, r3
 811089e:	d302      	bcc.n	81108a6 <UART_WaitOnFlagUntilTimeout+0x30>
 81108a0:	69bb      	ldr	r3, [r7, #24]
 81108a2:	2b00      	cmp	r3, #0
 81108a4:	d11d      	bne.n	81108e2 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 81108a6:	68fb      	ldr	r3, [r7, #12]
 81108a8:	681b      	ldr	r3, [r3, #0]
 81108aa:	681a      	ldr	r2, [r3, #0]
 81108ac:	68fb      	ldr	r3, [r7, #12]
 81108ae:	681b      	ldr	r3, [r3, #0]
 81108b0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 81108b4:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 81108b6:	68fb      	ldr	r3, [r7, #12]
 81108b8:	681b      	ldr	r3, [r3, #0]
 81108ba:	689a      	ldr	r2, [r3, #8]
 81108bc:	68fb      	ldr	r3, [r7, #12]
 81108be:	681b      	ldr	r3, [r3, #0]
 81108c0:	f022 0201 	bic.w	r2, r2, #1
 81108c4:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 81108c6:	68fb      	ldr	r3, [r7, #12]
 81108c8:	2220      	movs	r2, #32
 81108ca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 81108ce:	68fb      	ldr	r3, [r7, #12]
 81108d0:	2220      	movs	r2, #32
 81108d2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 81108d6:	68fb      	ldr	r3, [r7, #12]
 81108d8:	2200      	movs	r2, #0
 81108da:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 81108de:	2303      	movs	r3, #3
 81108e0:	e045      	b.n	811096e <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 81108e2:	68fb      	ldr	r3, [r7, #12]
 81108e4:	681b      	ldr	r3, [r3, #0]
 81108e6:	681b      	ldr	r3, [r3, #0]
 81108e8:	f003 0304 	and.w	r3, r3, #4
 81108ec:	2b00      	cmp	r3, #0
 81108ee:	d02e      	beq.n	811094e <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 81108f0:	68fb      	ldr	r3, [r7, #12]
 81108f2:	681b      	ldr	r3, [r3, #0]
 81108f4:	69db      	ldr	r3, [r3, #28]
 81108f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 81108fa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 81108fe:	d126      	bne.n	811094e <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8110900:	68fb      	ldr	r3, [r7, #12]
 8110902:	681b      	ldr	r3, [r3, #0]
 8110904:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8110908:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 811090a:	68fb      	ldr	r3, [r7, #12]
 811090c:	681b      	ldr	r3, [r3, #0]
 811090e:	681a      	ldr	r2, [r3, #0]
 8110910:	68fb      	ldr	r3, [r7, #12]
 8110912:	681b      	ldr	r3, [r3, #0]
 8110914:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8110918:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 811091a:	68fb      	ldr	r3, [r7, #12]
 811091c:	681b      	ldr	r3, [r3, #0]
 811091e:	689a      	ldr	r2, [r3, #8]
 8110920:	68fb      	ldr	r3, [r7, #12]
 8110922:	681b      	ldr	r3, [r3, #0]
 8110924:	f022 0201 	bic.w	r2, r2, #1
 8110928:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 811092a:	68fb      	ldr	r3, [r7, #12]
 811092c:	2220      	movs	r2, #32
 811092e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8110932:	68fb      	ldr	r3, [r7, #12]
 8110934:	2220      	movs	r2, #32
 8110936:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 811093a:	68fb      	ldr	r3, [r7, #12]
 811093c:	2220      	movs	r2, #32
 811093e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8110942:	68fb      	ldr	r3, [r7, #12]
 8110944:	2200      	movs	r2, #0
 8110946:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 811094a:	2303      	movs	r3, #3
 811094c:	e00f      	b.n	811096e <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 811094e:	68fb      	ldr	r3, [r7, #12]
 8110950:	681b      	ldr	r3, [r3, #0]
 8110952:	69da      	ldr	r2, [r3, #28]
 8110954:	68bb      	ldr	r3, [r7, #8]
 8110956:	4013      	ands	r3, r2
 8110958:	68ba      	ldr	r2, [r7, #8]
 811095a:	429a      	cmp	r2, r3
 811095c:	bf0c      	ite	eq
 811095e:	2301      	moveq	r3, #1
 8110960:	2300      	movne	r3, #0
 8110962:	b2db      	uxtb	r3, r3
 8110964:	461a      	mov	r2, r3
 8110966:	79fb      	ldrb	r3, [r7, #7]
 8110968:	429a      	cmp	r2, r3
 811096a:	d08d      	beq.n	8110888 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 811096c:	2300      	movs	r3, #0
}
 811096e:	4618      	mov	r0, r3
 8110970:	3710      	adds	r7, #16
 8110972:	46bd      	mov	sp, r7
 8110974:	bd80      	pop	{r7, pc}
	...

08110978 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8110978:	b580      	push	{r7, lr}
 811097a:	b084      	sub	sp, #16
 811097c:	af00      	add	r7, sp, #0
 811097e:	60f8      	str	r0, [r7, #12]
 8110980:	60b9      	str	r1, [r7, #8]
 8110982:	4613      	mov	r3, r2
 8110984:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8110986:	68fb      	ldr	r3, [r7, #12]
 8110988:	68ba      	ldr	r2, [r7, #8]
 811098a:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 811098c:	68fb      	ldr	r3, [r7, #12]
 811098e:	88fa      	ldrh	r2, [r7, #6]
 8110990:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8110994:	68fb      	ldr	r3, [r7, #12]
 8110996:	2200      	movs	r2, #0
 8110998:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 811099c:	68fb      	ldr	r3, [r7, #12]
 811099e:	2222      	movs	r2, #34	; 0x22
 81109a0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  if (huart->hdmarx != NULL)
 81109a4:	68fb      	ldr	r3, [r7, #12]
 81109a6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 81109a8:	2b00      	cmp	r3, #0
 81109aa:	d02c      	beq.n	8110a06 <UART_Start_Receive_DMA+0x8e>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 81109ac:	68fb      	ldr	r3, [r7, #12]
 81109ae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 81109b0:	4a25      	ldr	r2, [pc, #148]	; (8110a48 <UART_Start_Receive_DMA+0xd0>)
 81109b2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 81109b4:	68fb      	ldr	r3, [r7, #12]
 81109b6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 81109b8:	4a24      	ldr	r2, [pc, #144]	; (8110a4c <UART_Start_Receive_DMA+0xd4>)
 81109ba:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 81109bc:	68fb      	ldr	r3, [r7, #12]
 81109be:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 81109c0:	4a23      	ldr	r2, [pc, #140]	; (8110a50 <UART_Start_Receive_DMA+0xd8>)
 81109c2:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 81109c4:	68fb      	ldr	r3, [r7, #12]
 81109c6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 81109c8:	2200      	movs	r2, #0
 81109ca:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 81109cc:	68fb      	ldr	r3, [r7, #12]
 81109ce:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 81109d0:	68fb      	ldr	r3, [r7, #12]
 81109d2:	681b      	ldr	r3, [r3, #0]
 81109d4:	3324      	adds	r3, #36	; 0x24
 81109d6:	4619      	mov	r1, r3
 81109d8:	68fb      	ldr	r3, [r7, #12]
 81109da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81109dc:	461a      	mov	r2, r3
 81109de:	88fb      	ldrh	r3, [r7, #6]
 81109e0:	f7f3 fff0 	bl	81049c4 <HAL_DMA_Start_IT>
 81109e4:	4603      	mov	r3, r0
 81109e6:	2b00      	cmp	r3, #0
 81109e8:	d00d      	beq.n	8110a06 <UART_Start_Receive_DMA+0x8e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 81109ea:	68fb      	ldr	r3, [r7, #12]
 81109ec:	2210      	movs	r2, #16
 81109ee:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 81109f2:	68fb      	ldr	r3, [r7, #12]
 81109f4:	2200      	movs	r2, #0
 81109f6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Restore huart->gState to ready */
      huart->gState = HAL_UART_STATE_READY;
 81109fa:	68fb      	ldr	r3, [r7, #12]
 81109fc:	2220      	movs	r2, #32
 81109fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      return HAL_ERROR;
 8110a02:	2301      	movs	r3, #1
 8110a04:	e01c      	b.n	8110a40 <UART_Start_Receive_DMA+0xc8>
    }
  }
  __HAL_UNLOCK(huart);
 8110a06:	68fb      	ldr	r3, [r7, #12]
 8110a08:	2200      	movs	r2, #0
 8110a0a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8110a0e:	68fb      	ldr	r3, [r7, #12]
 8110a10:	681b      	ldr	r3, [r3, #0]
 8110a12:	681a      	ldr	r2, [r3, #0]
 8110a14:	68fb      	ldr	r3, [r7, #12]
 8110a16:	681b      	ldr	r3, [r3, #0]
 8110a18:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8110a1c:	601a      	str	r2, [r3, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8110a1e:	68fb      	ldr	r3, [r7, #12]
 8110a20:	681b      	ldr	r3, [r3, #0]
 8110a22:	689a      	ldr	r2, [r3, #8]
 8110a24:	68fb      	ldr	r3, [r7, #12]
 8110a26:	681b      	ldr	r3, [r3, #0]
 8110a28:	f042 0201 	orr.w	r2, r2, #1
 8110a2c:	609a      	str	r2, [r3, #8]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8110a2e:	68fb      	ldr	r3, [r7, #12]
 8110a30:	681b      	ldr	r3, [r3, #0]
 8110a32:	689a      	ldr	r2, [r3, #8]
 8110a34:	68fb      	ldr	r3, [r7, #12]
 8110a36:	681b      	ldr	r3, [r3, #0]
 8110a38:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8110a3c:	609a      	str	r2, [r3, #8]

  return HAL_OK;
 8110a3e:	2300      	movs	r3, #0
}
 8110a40:	4618      	mov	r0, r3
 8110a42:	3710      	adds	r7, #16
 8110a44:	46bd      	mov	sp, r7
 8110a46:	bd80      	pop	{r7, pc}
 8110a48:	08110b61 	.word	0x08110b61
 8110a4c:	08110bf7 	.word	0x08110bf7
 8110a50:	08110c2f 	.word	0x08110c2f

08110a54 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8110a54:	b480      	push	{r7}
 8110a56:	b083      	sub	sp, #12
 8110a58:	af00      	add	r7, sp, #0
 8110a5a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8110a5c:	687b      	ldr	r3, [r7, #4]
 8110a5e:	681b      	ldr	r3, [r3, #0]
 8110a60:	681a      	ldr	r2, [r3, #0]
 8110a62:	687b      	ldr	r3, [r7, #4]
 8110a64:	681b      	ldr	r3, [r3, #0]
 8110a66:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8110a6a:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8110a6c:	687b      	ldr	r3, [r7, #4]
 8110a6e:	681b      	ldr	r3, [r3, #0]
 8110a70:	689a      	ldr	r2, [r3, #8]
 8110a72:	687b      	ldr	r3, [r7, #4]
 8110a74:	681b      	ldr	r3, [r3, #0]
 8110a76:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8110a7a:	609a      	str	r2, [r3, #8]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8110a7c:	687b      	ldr	r3, [r7, #4]
 8110a7e:	2220      	movs	r2, #32
 8110a80:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 8110a84:	bf00      	nop
 8110a86:	370c      	adds	r7, #12
 8110a88:	46bd      	mov	sp, r7
 8110a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8110a8e:	4770      	bx	lr

08110a90 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8110a90:	b480      	push	{r7}
 8110a92:	b083      	sub	sp, #12
 8110a94:	af00      	add	r7, sp, #0
 8110a96:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8110a98:	687b      	ldr	r3, [r7, #4]
 8110a9a:	681b      	ldr	r3, [r3, #0]
 8110a9c:	681a      	ldr	r2, [r3, #0]
 8110a9e:	687b      	ldr	r3, [r7, #4]
 8110aa0:	681b      	ldr	r3, [r3, #0]
 8110aa2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8110aa6:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8110aa8:	687b      	ldr	r3, [r7, #4]
 8110aaa:	681b      	ldr	r3, [r3, #0]
 8110aac:	689b      	ldr	r3, [r3, #8]
 8110aae:	687a      	ldr	r2, [r7, #4]
 8110ab0:	6812      	ldr	r2, [r2, #0]
 8110ab2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8110ab6:	f023 0301 	bic.w	r3, r3, #1
 8110aba:	6093      	str	r3, [r2, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8110abc:	687b      	ldr	r3, [r7, #4]
 8110abe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8110ac0:	2b01      	cmp	r3, #1
 8110ac2:	d107      	bne.n	8110ad4 <UART_EndRxTransfer+0x44>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8110ac4:	687b      	ldr	r3, [r7, #4]
 8110ac6:	681b      	ldr	r3, [r3, #0]
 8110ac8:	681a      	ldr	r2, [r3, #0]
 8110aca:	687b      	ldr	r3, [r7, #4]
 8110acc:	681b      	ldr	r3, [r3, #0]
 8110ace:	f022 0210 	bic.w	r2, r2, #16
 8110ad2:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8110ad4:	687b      	ldr	r3, [r7, #4]
 8110ad6:	2220      	movs	r2, #32
 8110ad8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8110adc:	687b      	ldr	r3, [r7, #4]
 8110ade:	2200      	movs	r2, #0
 8110ae0:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8110ae2:	687b      	ldr	r3, [r7, #4]
 8110ae4:	2200      	movs	r2, #0
 8110ae6:	671a      	str	r2, [r3, #112]	; 0x70
}
 8110ae8:	bf00      	nop
 8110aea:	370c      	adds	r7, #12
 8110aec:	46bd      	mov	sp, r7
 8110aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8110af2:	4770      	bx	lr

08110af4 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8110af4:	b580      	push	{r7, lr}
 8110af6:	b084      	sub	sp, #16
 8110af8:	af00      	add	r7, sp, #0
 8110afa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8110afc:	687b      	ldr	r3, [r7, #4]
 8110afe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8110b00:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8110b02:	687b      	ldr	r3, [r7, #4]
 8110b04:	69db      	ldr	r3, [r3, #28]
 8110b06:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8110b0a:	d014      	beq.n	8110b36 <UART_DMATransmitCplt+0x42>
  {
    huart->TxXferCount = 0U;
 8110b0c:	68fb      	ldr	r3, [r7, #12]
 8110b0e:	2200      	movs	r2, #0
 8110b10:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8110b14:	68fb      	ldr	r3, [r7, #12]
 8110b16:	681b      	ldr	r3, [r3, #0]
 8110b18:	689a      	ldr	r2, [r3, #8]
 8110b1a:	68fb      	ldr	r3, [r7, #12]
 8110b1c:	681b      	ldr	r3, [r3, #0]
 8110b1e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8110b22:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8110b24:	68fb      	ldr	r3, [r7, #12]
 8110b26:	681b      	ldr	r3, [r3, #0]
 8110b28:	681a      	ldr	r2, [r3, #0]
 8110b2a:	68fb      	ldr	r3, [r7, #12]
 8110b2c:	681b      	ldr	r3, [r3, #0]
 8110b2e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8110b32:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8110b34:	e002      	b.n	8110b3c <UART_DMATransmitCplt+0x48>
    HAL_UART_TxCpltCallback(huart);
 8110b36:	68f8      	ldr	r0, [r7, #12]
 8110b38:	f7f0 ffe8 	bl	8101b0c <HAL_UART_TxCpltCallback>
}
 8110b3c:	bf00      	nop
 8110b3e:	3710      	adds	r7, #16
 8110b40:	46bd      	mov	sp, r7
 8110b42:	bd80      	pop	{r7, pc}

08110b44 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8110b44:	b580      	push	{r7, lr}
 8110b46:	b084      	sub	sp, #16
 8110b48:	af00      	add	r7, sp, #0
 8110b4a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8110b4c:	687b      	ldr	r3, [r7, #4]
 8110b4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8110b50:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8110b52:	68f8      	ldr	r0, [r7, #12]
 8110b54:	f7ff f822 	bl	810fb9c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8110b58:	bf00      	nop
 8110b5a:	3710      	adds	r7, #16
 8110b5c:	46bd      	mov	sp, r7
 8110b5e:	bd80      	pop	{r7, pc}

08110b60 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8110b60:	b580      	push	{r7, lr}
 8110b62:	b084      	sub	sp, #16
 8110b64:	af00      	add	r7, sp, #0
 8110b66:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8110b68:	687b      	ldr	r3, [r7, #4]
 8110b6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8110b6c:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8110b6e:	687b      	ldr	r3, [r7, #4]
 8110b70:	69db      	ldr	r3, [r3, #28]
 8110b72:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8110b76:	d02b      	beq.n	8110bd0 <UART_DMAReceiveCplt+0x70>
  {
    huart->RxXferCount = 0U;
 8110b78:	68fb      	ldr	r3, [r7, #12]
 8110b7a:	2200      	movs	r2, #0
 8110b7c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8110b80:	68fb      	ldr	r3, [r7, #12]
 8110b82:	681b      	ldr	r3, [r3, #0]
 8110b84:	681a      	ldr	r2, [r3, #0]
 8110b86:	68fb      	ldr	r3, [r7, #12]
 8110b88:	681b      	ldr	r3, [r3, #0]
 8110b8a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8110b8e:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8110b90:	68fb      	ldr	r3, [r7, #12]
 8110b92:	681b      	ldr	r3, [r3, #0]
 8110b94:	689a      	ldr	r2, [r3, #8]
 8110b96:	68fb      	ldr	r3, [r7, #12]
 8110b98:	681b      	ldr	r3, [r3, #0]
 8110b9a:	f022 0201 	bic.w	r2, r2, #1
 8110b9e:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8110ba0:	68fb      	ldr	r3, [r7, #12]
 8110ba2:	681b      	ldr	r3, [r3, #0]
 8110ba4:	689a      	ldr	r2, [r3, #8]
 8110ba6:	68fb      	ldr	r3, [r7, #12]
 8110ba8:	681b      	ldr	r3, [r3, #0]
 8110baa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8110bae:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8110bb0:	68fb      	ldr	r3, [r7, #12]
 8110bb2:	2220      	movs	r2, #32
 8110bb4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8110bb8:	68fb      	ldr	r3, [r7, #12]
 8110bba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8110bbc:	2b01      	cmp	r3, #1
 8110bbe:	d107      	bne.n	8110bd0 <UART_DMAReceiveCplt+0x70>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8110bc0:	68fb      	ldr	r3, [r7, #12]
 8110bc2:	681b      	ldr	r3, [r3, #0]
 8110bc4:	681a      	ldr	r2, [r3, #0]
 8110bc6:	68fb      	ldr	r3, [r7, #12]
 8110bc8:	681b      	ldr	r3, [r3, #0]
 8110bca:	f022 0210 	bic.w	r2, r2, #16
 8110bce:	601a      	str	r2, [r3, #0]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8110bd0:	68fb      	ldr	r3, [r7, #12]
 8110bd2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8110bd4:	2b01      	cmp	r3, #1
 8110bd6:	d107      	bne.n	8110be8 <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8110bd8:	68fb      	ldr	r3, [r7, #12]
 8110bda:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8110bde:	4619      	mov	r1, r3
 8110be0:	68f8      	ldr	r0, [r7, #12]
 8110be2:	f7fe ffef 	bl	810fbc4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8110be6:	e002      	b.n	8110bee <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 8110be8:	68f8      	ldr	r0, [r7, #12]
 8110bea:	f7f0 ff09 	bl	8101a00 <HAL_UART_RxCpltCallback>
}
 8110bee:	bf00      	nop
 8110bf0:	3710      	adds	r7, #16
 8110bf2:	46bd      	mov	sp, r7
 8110bf4:	bd80      	pop	{r7, pc}

08110bf6 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8110bf6:	b580      	push	{r7, lr}
 8110bf8:	b084      	sub	sp, #16
 8110bfa:	af00      	add	r7, sp, #0
 8110bfc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8110bfe:	687b      	ldr	r3, [r7, #4]
 8110c00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8110c02:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8110c04:	68fb      	ldr	r3, [r7, #12]
 8110c06:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8110c08:	2b01      	cmp	r3, #1
 8110c0a:	d109      	bne.n	8110c20 <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8110c0c:	68fb      	ldr	r3, [r7, #12]
 8110c0e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8110c12:	085b      	lsrs	r3, r3, #1
 8110c14:	b29b      	uxth	r3, r3
 8110c16:	4619      	mov	r1, r3
 8110c18:	68f8      	ldr	r0, [r7, #12]
 8110c1a:	f7fe ffd3 	bl	810fbc4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8110c1e:	e002      	b.n	8110c26 <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 8110c20:	68f8      	ldr	r0, [r7, #12]
 8110c22:	f7fe ffc5 	bl	810fbb0 <HAL_UART_RxHalfCpltCallback>
}
 8110c26:	bf00      	nop
 8110c28:	3710      	adds	r7, #16
 8110c2a:	46bd      	mov	sp, r7
 8110c2c:	bd80      	pop	{r7, pc}

08110c2e <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8110c2e:	b580      	push	{r7, lr}
 8110c30:	b086      	sub	sp, #24
 8110c32:	af00      	add	r7, sp, #0
 8110c34:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8110c36:	687b      	ldr	r3, [r7, #4]
 8110c38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8110c3a:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8110c3c:	697b      	ldr	r3, [r7, #20]
 8110c3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8110c42:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8110c44:	697b      	ldr	r3, [r7, #20]
 8110c46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8110c4a:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8110c4c:	697b      	ldr	r3, [r7, #20]
 8110c4e:	681b      	ldr	r3, [r3, #0]
 8110c50:	689b      	ldr	r3, [r3, #8]
 8110c52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8110c56:	2b80      	cmp	r3, #128	; 0x80
 8110c58:	d109      	bne.n	8110c6e <UART_DMAError+0x40>
 8110c5a:	693b      	ldr	r3, [r7, #16]
 8110c5c:	2b21      	cmp	r3, #33	; 0x21
 8110c5e:	d106      	bne.n	8110c6e <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8110c60:	697b      	ldr	r3, [r7, #20]
 8110c62:	2200      	movs	r2, #0
 8110c64:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 8110c68:	6978      	ldr	r0, [r7, #20]
 8110c6a:	f7ff fef3 	bl	8110a54 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8110c6e:	697b      	ldr	r3, [r7, #20]
 8110c70:	681b      	ldr	r3, [r3, #0]
 8110c72:	689b      	ldr	r3, [r3, #8]
 8110c74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8110c78:	2b40      	cmp	r3, #64	; 0x40
 8110c7a:	d109      	bne.n	8110c90 <UART_DMAError+0x62>
 8110c7c:	68fb      	ldr	r3, [r7, #12]
 8110c7e:	2b22      	cmp	r3, #34	; 0x22
 8110c80:	d106      	bne.n	8110c90 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8110c82:	697b      	ldr	r3, [r7, #20]
 8110c84:	2200      	movs	r2, #0
 8110c86:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 8110c8a:	6978      	ldr	r0, [r7, #20]
 8110c8c:	f7ff ff00 	bl	8110a90 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8110c90:	697b      	ldr	r3, [r7, #20]
 8110c92:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8110c96:	f043 0210 	orr.w	r2, r3, #16
 8110c9a:	697b      	ldr	r3, [r7, #20]
 8110c9c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8110ca0:	6978      	ldr	r0, [r7, #20]
 8110ca2:	f7f0 ff49 	bl	8101b38 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8110ca6:	bf00      	nop
 8110ca8:	3718      	adds	r7, #24
 8110caa:	46bd      	mov	sp, r7
 8110cac:	bd80      	pop	{r7, pc}

08110cae <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8110cae:	b580      	push	{r7, lr}
 8110cb0:	b084      	sub	sp, #16
 8110cb2:	af00      	add	r7, sp, #0
 8110cb4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8110cb6:	687b      	ldr	r3, [r7, #4]
 8110cb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8110cba:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8110cbc:	68fb      	ldr	r3, [r7, #12]
 8110cbe:	2200      	movs	r2, #0
 8110cc0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8110cc4:	68fb      	ldr	r3, [r7, #12]
 8110cc6:	2200      	movs	r2, #0
 8110cc8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8110ccc:	68f8      	ldr	r0, [r7, #12]
 8110cce:	f7f0 ff33 	bl	8101b38 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8110cd2:	bf00      	nop
 8110cd4:	3710      	adds	r7, #16
 8110cd6:	46bd      	mov	sp, r7
 8110cd8:	bd80      	pop	{r7, pc}

08110cda <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8110cda:	b580      	push	{r7, lr}
 8110cdc:	b082      	sub	sp, #8
 8110cde:	af00      	add	r7, sp, #0
 8110ce0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8110ce2:	687b      	ldr	r3, [r7, #4]
 8110ce4:	681b      	ldr	r3, [r3, #0]
 8110ce6:	681a      	ldr	r2, [r3, #0]
 8110ce8:	687b      	ldr	r3, [r7, #4]
 8110cea:	681b      	ldr	r3, [r3, #0]
 8110cec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8110cf0:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8110cf2:	687b      	ldr	r3, [r7, #4]
 8110cf4:	2220      	movs	r2, #32
 8110cf6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8110cfa:	687b      	ldr	r3, [r7, #4]
 8110cfc:	2200      	movs	r2, #0
 8110cfe:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8110d00:	6878      	ldr	r0, [r7, #4]
 8110d02:	f7f0 ff03 	bl	8101b0c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8110d06:	bf00      	nop
 8110d08:	3708      	adds	r7, #8
 8110d0a:	46bd      	mov	sp, r7
 8110d0c:	bd80      	pop	{r7, pc}

08110d0e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8110d0e:	b480      	push	{r7}
 8110d10:	b083      	sub	sp, #12
 8110d12:	af00      	add	r7, sp, #0
 8110d14:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8110d16:	bf00      	nop
 8110d18:	370c      	adds	r7, #12
 8110d1a:	46bd      	mov	sp, r7
 8110d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8110d20:	4770      	bx	lr

08110d22 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8110d22:	b480      	push	{r7}
 8110d24:	b083      	sub	sp, #12
 8110d26:	af00      	add	r7, sp, #0
 8110d28:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8110d2a:	bf00      	nop
 8110d2c:	370c      	adds	r7, #12
 8110d2e:	46bd      	mov	sp, r7
 8110d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8110d34:	4770      	bx	lr

08110d36 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8110d36:	b480      	push	{r7}
 8110d38:	b083      	sub	sp, #12
 8110d3a:	af00      	add	r7, sp, #0
 8110d3c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8110d3e:	bf00      	nop
 8110d40:	370c      	adds	r7, #12
 8110d42:	46bd      	mov	sp, r7
 8110d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8110d48:	4770      	bx	lr

08110d4a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8110d4a:	b480      	push	{r7}
 8110d4c:	b085      	sub	sp, #20
 8110d4e:	af00      	add	r7, sp, #0
 8110d50:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8110d52:	687b      	ldr	r3, [r7, #4]
 8110d54:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8110d58:	2b01      	cmp	r3, #1
 8110d5a:	d101      	bne.n	8110d60 <HAL_UARTEx_DisableFifoMode+0x16>
 8110d5c:	2302      	movs	r3, #2
 8110d5e:	e027      	b.n	8110db0 <HAL_UARTEx_DisableFifoMode+0x66>
 8110d60:	687b      	ldr	r3, [r7, #4]
 8110d62:	2201      	movs	r2, #1
 8110d64:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8110d68:	687b      	ldr	r3, [r7, #4]
 8110d6a:	2224      	movs	r2, #36	; 0x24
 8110d6c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8110d70:	687b      	ldr	r3, [r7, #4]
 8110d72:	681b      	ldr	r3, [r3, #0]
 8110d74:	681b      	ldr	r3, [r3, #0]
 8110d76:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8110d78:	687b      	ldr	r3, [r7, #4]
 8110d7a:	681b      	ldr	r3, [r3, #0]
 8110d7c:	681a      	ldr	r2, [r3, #0]
 8110d7e:	687b      	ldr	r3, [r7, #4]
 8110d80:	681b      	ldr	r3, [r3, #0]
 8110d82:	f022 0201 	bic.w	r2, r2, #1
 8110d86:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8110d88:	68fb      	ldr	r3, [r7, #12]
 8110d8a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8110d8e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8110d90:	687b      	ldr	r3, [r7, #4]
 8110d92:	2200      	movs	r2, #0
 8110d94:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8110d96:	687b      	ldr	r3, [r7, #4]
 8110d98:	681b      	ldr	r3, [r3, #0]
 8110d9a:	68fa      	ldr	r2, [r7, #12]
 8110d9c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8110d9e:	687b      	ldr	r3, [r7, #4]
 8110da0:	2220      	movs	r2, #32
 8110da2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8110da6:	687b      	ldr	r3, [r7, #4]
 8110da8:	2200      	movs	r2, #0
 8110daa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8110dae:	2300      	movs	r3, #0
}
 8110db0:	4618      	mov	r0, r3
 8110db2:	3714      	adds	r7, #20
 8110db4:	46bd      	mov	sp, r7
 8110db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8110dba:	4770      	bx	lr

08110dbc <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8110dbc:	b580      	push	{r7, lr}
 8110dbe:	b084      	sub	sp, #16
 8110dc0:	af00      	add	r7, sp, #0
 8110dc2:	6078      	str	r0, [r7, #4]
 8110dc4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8110dc6:	687b      	ldr	r3, [r7, #4]
 8110dc8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8110dcc:	2b01      	cmp	r3, #1
 8110dce:	d101      	bne.n	8110dd4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8110dd0:	2302      	movs	r3, #2
 8110dd2:	e02d      	b.n	8110e30 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8110dd4:	687b      	ldr	r3, [r7, #4]
 8110dd6:	2201      	movs	r2, #1
 8110dd8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8110ddc:	687b      	ldr	r3, [r7, #4]
 8110dde:	2224      	movs	r2, #36	; 0x24
 8110de0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8110de4:	687b      	ldr	r3, [r7, #4]
 8110de6:	681b      	ldr	r3, [r3, #0]
 8110de8:	681b      	ldr	r3, [r3, #0]
 8110dea:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8110dec:	687b      	ldr	r3, [r7, #4]
 8110dee:	681b      	ldr	r3, [r3, #0]
 8110df0:	681a      	ldr	r2, [r3, #0]
 8110df2:	687b      	ldr	r3, [r7, #4]
 8110df4:	681b      	ldr	r3, [r3, #0]
 8110df6:	f022 0201 	bic.w	r2, r2, #1
 8110dfa:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8110dfc:	687b      	ldr	r3, [r7, #4]
 8110dfe:	681b      	ldr	r3, [r3, #0]
 8110e00:	689b      	ldr	r3, [r3, #8]
 8110e02:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8110e06:	687b      	ldr	r3, [r7, #4]
 8110e08:	681b      	ldr	r3, [r3, #0]
 8110e0a:	683a      	ldr	r2, [r7, #0]
 8110e0c:	430a      	orrs	r2, r1
 8110e0e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8110e10:	6878      	ldr	r0, [r7, #4]
 8110e12:	f000 f84f 	bl	8110eb4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8110e16:	687b      	ldr	r3, [r7, #4]
 8110e18:	681b      	ldr	r3, [r3, #0]
 8110e1a:	68fa      	ldr	r2, [r7, #12]
 8110e1c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8110e1e:	687b      	ldr	r3, [r7, #4]
 8110e20:	2220      	movs	r2, #32
 8110e22:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8110e26:	687b      	ldr	r3, [r7, #4]
 8110e28:	2200      	movs	r2, #0
 8110e2a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8110e2e:	2300      	movs	r3, #0
}
 8110e30:	4618      	mov	r0, r3
 8110e32:	3710      	adds	r7, #16
 8110e34:	46bd      	mov	sp, r7
 8110e36:	bd80      	pop	{r7, pc}

08110e38 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8110e38:	b580      	push	{r7, lr}
 8110e3a:	b084      	sub	sp, #16
 8110e3c:	af00      	add	r7, sp, #0
 8110e3e:	6078      	str	r0, [r7, #4]
 8110e40:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8110e42:	687b      	ldr	r3, [r7, #4]
 8110e44:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8110e48:	2b01      	cmp	r3, #1
 8110e4a:	d101      	bne.n	8110e50 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8110e4c:	2302      	movs	r3, #2
 8110e4e:	e02d      	b.n	8110eac <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8110e50:	687b      	ldr	r3, [r7, #4]
 8110e52:	2201      	movs	r2, #1
 8110e54:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8110e58:	687b      	ldr	r3, [r7, #4]
 8110e5a:	2224      	movs	r2, #36	; 0x24
 8110e5c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8110e60:	687b      	ldr	r3, [r7, #4]
 8110e62:	681b      	ldr	r3, [r3, #0]
 8110e64:	681b      	ldr	r3, [r3, #0]
 8110e66:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8110e68:	687b      	ldr	r3, [r7, #4]
 8110e6a:	681b      	ldr	r3, [r3, #0]
 8110e6c:	681a      	ldr	r2, [r3, #0]
 8110e6e:	687b      	ldr	r3, [r7, #4]
 8110e70:	681b      	ldr	r3, [r3, #0]
 8110e72:	f022 0201 	bic.w	r2, r2, #1
 8110e76:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8110e78:	687b      	ldr	r3, [r7, #4]
 8110e7a:	681b      	ldr	r3, [r3, #0]
 8110e7c:	689b      	ldr	r3, [r3, #8]
 8110e7e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8110e82:	687b      	ldr	r3, [r7, #4]
 8110e84:	681b      	ldr	r3, [r3, #0]
 8110e86:	683a      	ldr	r2, [r7, #0]
 8110e88:	430a      	orrs	r2, r1
 8110e8a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8110e8c:	6878      	ldr	r0, [r7, #4]
 8110e8e:	f000 f811 	bl	8110eb4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8110e92:	687b      	ldr	r3, [r7, #4]
 8110e94:	681b      	ldr	r3, [r3, #0]
 8110e96:	68fa      	ldr	r2, [r7, #12]
 8110e98:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8110e9a:	687b      	ldr	r3, [r7, #4]
 8110e9c:	2220      	movs	r2, #32
 8110e9e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8110ea2:	687b      	ldr	r3, [r7, #4]
 8110ea4:	2200      	movs	r2, #0
 8110ea6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8110eaa:	2300      	movs	r3, #0
}
 8110eac:	4618      	mov	r0, r3
 8110eae:	3710      	adds	r7, #16
 8110eb0:	46bd      	mov	sp, r7
 8110eb2:	bd80      	pop	{r7, pc}

08110eb4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8110eb4:	b480      	push	{r7}
 8110eb6:	b085      	sub	sp, #20
 8110eb8:	af00      	add	r7, sp, #0
 8110eba:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8110ebc:	687b      	ldr	r3, [r7, #4]
 8110ebe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8110ec0:	2b00      	cmp	r3, #0
 8110ec2:	d108      	bne.n	8110ed6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8110ec4:	687b      	ldr	r3, [r7, #4]
 8110ec6:	2201      	movs	r2, #1
 8110ec8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8110ecc:	687b      	ldr	r3, [r7, #4]
 8110ece:	2201      	movs	r2, #1
 8110ed0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8110ed4:	e031      	b.n	8110f3a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8110ed6:	2310      	movs	r3, #16
 8110ed8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8110eda:	2310      	movs	r3, #16
 8110edc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8110ede:	687b      	ldr	r3, [r7, #4]
 8110ee0:	681b      	ldr	r3, [r3, #0]
 8110ee2:	689b      	ldr	r3, [r3, #8]
 8110ee4:	0e5b      	lsrs	r3, r3, #25
 8110ee6:	b2db      	uxtb	r3, r3
 8110ee8:	f003 0307 	and.w	r3, r3, #7
 8110eec:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8110eee:	687b      	ldr	r3, [r7, #4]
 8110ef0:	681b      	ldr	r3, [r3, #0]
 8110ef2:	689b      	ldr	r3, [r3, #8]
 8110ef4:	0f5b      	lsrs	r3, r3, #29
 8110ef6:	b2db      	uxtb	r3, r3
 8110ef8:	f003 0307 	and.w	r3, r3, #7
 8110efc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8110efe:	7bbb      	ldrb	r3, [r7, #14]
 8110f00:	7b3a      	ldrb	r2, [r7, #12]
 8110f02:	4911      	ldr	r1, [pc, #68]	; (8110f48 <UARTEx_SetNbDataToProcess+0x94>)
 8110f04:	5c8a      	ldrb	r2, [r1, r2]
 8110f06:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8110f0a:	7b3a      	ldrb	r2, [r7, #12]
 8110f0c:	490f      	ldr	r1, [pc, #60]	; (8110f4c <UARTEx_SetNbDataToProcess+0x98>)
 8110f0e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8110f10:	fb93 f3f2 	sdiv	r3, r3, r2
 8110f14:	b29a      	uxth	r2, r3
 8110f16:	687b      	ldr	r3, [r7, #4]
 8110f18:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8110f1c:	7bfb      	ldrb	r3, [r7, #15]
 8110f1e:	7b7a      	ldrb	r2, [r7, #13]
 8110f20:	4909      	ldr	r1, [pc, #36]	; (8110f48 <UARTEx_SetNbDataToProcess+0x94>)
 8110f22:	5c8a      	ldrb	r2, [r1, r2]
 8110f24:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8110f28:	7b7a      	ldrb	r2, [r7, #13]
 8110f2a:	4908      	ldr	r1, [pc, #32]	; (8110f4c <UARTEx_SetNbDataToProcess+0x98>)
 8110f2c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8110f2e:	fb93 f3f2 	sdiv	r3, r3, r2
 8110f32:	b29a      	uxth	r2, r3
 8110f34:	687b      	ldr	r3, [r7, #4]
 8110f36:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8110f3a:	bf00      	nop
 8110f3c:	3714      	adds	r7, #20
 8110f3e:	46bd      	mov	sp, r7
 8110f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8110f44:	4770      	bx	lr
 8110f46:	bf00      	nop
 8110f48:	0811b4d4 	.word	0x0811b4d4
 8110f4c:	0811b4dc 	.word	0x0811b4dc

08110f50 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8110f50:	b084      	sub	sp, #16
 8110f52:	b480      	push	{r7}
 8110f54:	b085      	sub	sp, #20
 8110f56:	af00      	add	r7, sp, #0
 8110f58:	6078      	str	r0, [r7, #4]
 8110f5a:	f107 001c 	add.w	r0, r7, #28
 8110f5e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8110f62:	2300      	movs	r3, #0
 8110f64:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 8110f66:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 8110f68:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 8110f6a:	431a      	orrs	r2, r3
             Init.BusWide             | \
 8110f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      | \
 8110f6e:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 8110f70:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             | \
 8110f72:	431a      	orrs	r2, r3
             Init.ClockDiv
 8110f74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl | \
 8110f76:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 8110f78:	68fa      	ldr	r2, [r7, #12]
 8110f7a:	4313      	orrs	r3, r2
 8110f7c:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 8110f7e:	687b      	ldr	r3, [r7, #4]
 8110f80:	685a      	ldr	r2, [r3, #4]
 8110f82:	4b07      	ldr	r3, [pc, #28]	; (8110fa0 <SDMMC_Init+0x50>)
 8110f84:	4013      	ands	r3, r2
 8110f86:	68fa      	ldr	r2, [r7, #12]
 8110f88:	431a      	orrs	r2, r3
 8110f8a:	687b      	ldr	r3, [r7, #4]
 8110f8c:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8110f8e:	2300      	movs	r3, #0
}
 8110f90:	4618      	mov	r0, r3
 8110f92:	3714      	adds	r7, #20
 8110f94:	46bd      	mov	sp, r7
 8110f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8110f9a:	b004      	add	sp, #16
 8110f9c:	4770      	bx	lr
 8110f9e:	bf00      	nop
 8110fa0:	ffc02c00 	.word	0xffc02c00

08110fa4 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8110fa4:	b480      	push	{r7}
 8110fa6:	b083      	sub	sp, #12
 8110fa8:	af00      	add	r7, sp, #0
 8110faa:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 8110fac:	687b      	ldr	r3, [r7, #4]
 8110fae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8110fb2:	4618      	mov	r0, r3
 8110fb4:	370c      	adds	r7, #12
 8110fb6:	46bd      	mov	sp, r7
 8110fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8110fbc:	4770      	bx	lr

08110fbe <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 8110fbe:	b480      	push	{r7}
 8110fc0:	b083      	sub	sp, #12
 8110fc2:	af00      	add	r7, sp, #0
 8110fc4:	6078      	str	r0, [r7, #4]
 8110fc6:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 8110fc8:	683b      	ldr	r3, [r7, #0]
 8110fca:	681a      	ldr	r2, [r3, #0]
 8110fcc:	687b      	ldr	r3, [r7, #4]
 8110fce:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8110fd2:	2300      	movs	r3, #0
}
 8110fd4:	4618      	mov	r0, r3
 8110fd6:	370c      	adds	r7, #12
 8110fd8:	46bd      	mov	sp, r7
 8110fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8110fde:	4770      	bx	lr

08110fe0 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 8110fe0:	b480      	push	{r7}
 8110fe2:	b083      	sub	sp, #12
 8110fe4:	af00      	add	r7, sp, #0
 8110fe6:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 8110fe8:	687b      	ldr	r3, [r7, #4]
 8110fea:	681b      	ldr	r3, [r3, #0]
 8110fec:	f043 0203 	orr.w	r2, r3, #3
 8110ff0:	687b      	ldr	r3, [r7, #4]
 8110ff2:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8110ff4:	2300      	movs	r3, #0
}
 8110ff6:	4618      	mov	r0, r3
 8110ff8:	370c      	adds	r7, #12
 8110ffa:	46bd      	mov	sp, r7
 8110ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8111000:	4770      	bx	lr

08111002 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 8111002:	b480      	push	{r7}
 8111004:	b083      	sub	sp, #12
 8111006:	af00      	add	r7, sp, #0
 8111008:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 811100a:	687b      	ldr	r3, [r7, #4]
 811100c:	681b      	ldr	r3, [r3, #0]
 811100e:	f003 0303 	and.w	r3, r3, #3
}
 8111012:	4618      	mov	r0, r3
 8111014:	370c      	adds	r7, #12
 8111016:	46bd      	mov	sp, r7
 8111018:	f85d 7b04 	ldr.w	r7, [sp], #4
 811101c:	4770      	bx	lr
	...

08111020 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8111020:	b480      	push	{r7}
 8111022:	b085      	sub	sp, #20
 8111024:	af00      	add	r7, sp, #0
 8111026:	6078      	str	r0, [r7, #4]
 8111028:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 811102a:	2300      	movs	r3, #0
 811102c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 811102e:	683b      	ldr	r3, [r7, #0]
 8111030:	681a      	ldr	r2, [r3, #0]
 8111032:	687b      	ldr	r3, [r7, #4]
 8111034:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8111036:	683b      	ldr	r3, [r7, #0]
 8111038:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 811103a:	683b      	ldr	r3, [r7, #0]
 811103c:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 811103e:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 8111040:	683b      	ldr	r3, [r7, #0]
 8111042:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 8111044:	431a      	orrs	r2, r3
                       Command->CPSM);
 8111046:	683b      	ldr	r3, [r7, #0]
 8111048:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 811104a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 811104c:	68fa      	ldr	r2, [r7, #12]
 811104e:	4313      	orrs	r3, r2
 8111050:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8111052:	687b      	ldr	r3, [r7, #4]
 8111054:	68da      	ldr	r2, [r3, #12]
 8111056:	4b06      	ldr	r3, [pc, #24]	; (8111070 <SDMMC_SendCommand+0x50>)
 8111058:	4013      	ands	r3, r2
 811105a:	68fa      	ldr	r2, [r7, #12]
 811105c:	431a      	orrs	r2, r3
 811105e:	687b      	ldr	r3, [r7, #4]
 8111060:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8111062:	2300      	movs	r3, #0
}
 8111064:	4618      	mov	r0, r3
 8111066:	3714      	adds	r7, #20
 8111068:	46bd      	mov	sp, r7
 811106a:	f85d 7b04 	ldr.w	r7, [sp], #4
 811106e:	4770      	bx	lr
 8111070:	fffee0c0 	.word	0xfffee0c0

08111074 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8111074:	b480      	push	{r7}
 8111076:	b083      	sub	sp, #12
 8111078:	af00      	add	r7, sp, #0
 811107a:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 811107c:	687b      	ldr	r3, [r7, #4]
 811107e:	691b      	ldr	r3, [r3, #16]
 8111080:	b2db      	uxtb	r3, r3
}
 8111082:	4618      	mov	r0, r3
 8111084:	370c      	adds	r7, #12
 8111086:	46bd      	mov	sp, r7
 8111088:	f85d 7b04 	ldr.w	r7, [sp], #4
 811108c:	4770      	bx	lr

0811108e <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 811108e:	b480      	push	{r7}
 8111090:	b085      	sub	sp, #20
 8111092:	af00      	add	r7, sp, #0
 8111094:	6078      	str	r0, [r7, #4]
 8111096:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8111098:	687b      	ldr	r3, [r7, #4]
 811109a:	3314      	adds	r3, #20
 811109c:	461a      	mov	r2, r3
 811109e:	683b      	ldr	r3, [r7, #0]
 81110a0:	4413      	add	r3, r2
 81110a2:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 81110a4:	68fb      	ldr	r3, [r7, #12]
 81110a6:	681b      	ldr	r3, [r3, #0]
}
 81110a8:	4618      	mov	r0, r3
 81110aa:	3714      	adds	r7, #20
 81110ac:	46bd      	mov	sp, r7
 81110ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 81110b2:	4770      	bx	lr

081110b4 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 81110b4:	b480      	push	{r7}
 81110b6:	b085      	sub	sp, #20
 81110b8:	af00      	add	r7, sp, #0
 81110ba:	6078      	str	r0, [r7, #4]
 81110bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 81110be:	2300      	movs	r3, #0
 81110c0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 81110c2:	683b      	ldr	r3, [r7, #0]
 81110c4:	681a      	ldr	r2, [r3, #0]
 81110c6:	687b      	ldr	r3, [r7, #4]
 81110c8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 81110ca:	683b      	ldr	r3, [r7, #0]
 81110cc:	685a      	ldr	r2, [r3, #4]
 81110ce:	687b      	ldr	r3, [r7, #4]
 81110d0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 81110d2:	683b      	ldr	r3, [r7, #0]
 81110d4:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 81110d6:	683b      	ldr	r3, [r7, #0]
 81110d8:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 81110da:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 81110dc:	683b      	ldr	r3, [r7, #0]
 81110de:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 81110e0:	431a      	orrs	r2, r3
                       Data->DPSM);
 81110e2:	683b      	ldr	r3, [r7, #0]
 81110e4:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 81110e6:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 81110e8:	68fa      	ldr	r2, [r7, #12]
 81110ea:	4313      	orrs	r3, r2
 81110ec:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 81110ee:	687b      	ldr	r3, [r7, #4]
 81110f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81110f2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 81110f6:	68fb      	ldr	r3, [r7, #12]
 81110f8:	431a      	orrs	r2, r3
 81110fa:	687b      	ldr	r3, [r7, #4]
 81110fc:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 81110fe:	2300      	movs	r3, #0

}
 8111100:	4618      	mov	r0, r3
 8111102:	3714      	adds	r7, #20
 8111104:	46bd      	mov	sp, r7
 8111106:	f85d 7b04 	ldr.w	r7, [sp], #4
 811110a:	4770      	bx	lr

0811110c <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 811110c:	b580      	push	{r7, lr}
 811110e:	b088      	sub	sp, #32
 8111110:	af00      	add	r7, sp, #0
 8111112:	6078      	str	r0, [r7, #4]
 8111114:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8111116:	683b      	ldr	r3, [r7, #0]
 8111118:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 811111a:	2310      	movs	r3, #16
 811111c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 811111e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8111122:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8111124:	2300      	movs	r3, #0
 8111126:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8111128:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 811112c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 811112e:	f107 0308 	add.w	r3, r7, #8
 8111132:	4619      	mov	r1, r3
 8111134:	6878      	ldr	r0, [r7, #4]
 8111136:	f7ff ff73 	bl	8111020 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 811113a:	f241 3288 	movw	r2, #5000	; 0x1388
 811113e:	2110      	movs	r1, #16
 8111140:	6878      	ldr	r0, [r7, #4]
 8111142:	f000 fa81 	bl	8111648 <SDMMC_GetCmdResp1>
 8111146:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8111148:	69fb      	ldr	r3, [r7, #28]
}
 811114a:	4618      	mov	r0, r3
 811114c:	3720      	adds	r7, #32
 811114e:	46bd      	mov	sp, r7
 8111150:	bd80      	pop	{r7, pc}

08111152 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8111152:	b580      	push	{r7, lr}
 8111154:	b088      	sub	sp, #32
 8111156:	af00      	add	r7, sp, #0
 8111158:	6078      	str	r0, [r7, #4]
 811115a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 811115c:	683b      	ldr	r3, [r7, #0]
 811115e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8111160:	2311      	movs	r3, #17
 8111162:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8111164:	f44f 7380 	mov.w	r3, #256	; 0x100
 8111168:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 811116a:	2300      	movs	r3, #0
 811116c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 811116e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8111172:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8111174:	f107 0308 	add.w	r3, r7, #8
 8111178:	4619      	mov	r1, r3
 811117a:	6878      	ldr	r0, [r7, #4]
 811117c:	f7ff ff50 	bl	8111020 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8111180:	f241 3288 	movw	r2, #5000	; 0x1388
 8111184:	2111      	movs	r1, #17
 8111186:	6878      	ldr	r0, [r7, #4]
 8111188:	f000 fa5e 	bl	8111648 <SDMMC_GetCmdResp1>
 811118c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 811118e:	69fb      	ldr	r3, [r7, #28]
}
 8111190:	4618      	mov	r0, r3
 8111192:	3720      	adds	r7, #32
 8111194:	46bd      	mov	sp, r7
 8111196:	bd80      	pop	{r7, pc}

08111198 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8111198:	b580      	push	{r7, lr}
 811119a:	b088      	sub	sp, #32
 811119c:	af00      	add	r7, sp, #0
 811119e:	6078      	str	r0, [r7, #4]
 81111a0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 81111a2:	683b      	ldr	r3, [r7, #0]
 81111a4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 81111a6:	2312      	movs	r3, #18
 81111a8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 81111aa:	f44f 7380 	mov.w	r3, #256	; 0x100
 81111ae:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 81111b0:	2300      	movs	r3, #0
 81111b2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 81111b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 81111b8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 81111ba:	f107 0308 	add.w	r3, r7, #8
 81111be:	4619      	mov	r1, r3
 81111c0:	6878      	ldr	r0, [r7, #4]
 81111c2:	f7ff ff2d 	bl	8111020 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 81111c6:	f241 3288 	movw	r2, #5000	; 0x1388
 81111ca:	2112      	movs	r1, #18
 81111cc:	6878      	ldr	r0, [r7, #4]
 81111ce:	f000 fa3b 	bl	8111648 <SDMMC_GetCmdResp1>
 81111d2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 81111d4:	69fb      	ldr	r3, [r7, #28]
}
 81111d6:	4618      	mov	r0, r3
 81111d8:	3720      	adds	r7, #32
 81111da:	46bd      	mov	sp, r7
 81111dc:	bd80      	pop	{r7, pc}

081111de <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 81111de:	b580      	push	{r7, lr}
 81111e0:	b088      	sub	sp, #32
 81111e2:	af00      	add	r7, sp, #0
 81111e4:	6078      	str	r0, [r7, #4]
 81111e6:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 81111e8:	683b      	ldr	r3, [r7, #0]
 81111ea:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 81111ec:	2318      	movs	r3, #24
 81111ee:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 81111f0:	f44f 7380 	mov.w	r3, #256	; 0x100
 81111f4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 81111f6:	2300      	movs	r3, #0
 81111f8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 81111fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 81111fe:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8111200:	f107 0308 	add.w	r3, r7, #8
 8111204:	4619      	mov	r1, r3
 8111206:	6878      	ldr	r0, [r7, #4]
 8111208:	f7ff ff0a 	bl	8111020 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 811120c:	f241 3288 	movw	r2, #5000	; 0x1388
 8111210:	2118      	movs	r1, #24
 8111212:	6878      	ldr	r0, [r7, #4]
 8111214:	f000 fa18 	bl	8111648 <SDMMC_GetCmdResp1>
 8111218:	61f8      	str	r0, [r7, #28]

  return errorstate;
 811121a:	69fb      	ldr	r3, [r7, #28]
}
 811121c:	4618      	mov	r0, r3
 811121e:	3720      	adds	r7, #32
 8111220:	46bd      	mov	sp, r7
 8111222:	bd80      	pop	{r7, pc}

08111224 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8111224:	b580      	push	{r7, lr}
 8111226:	b088      	sub	sp, #32
 8111228:	af00      	add	r7, sp, #0
 811122a:	6078      	str	r0, [r7, #4]
 811122c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 811122e:	683b      	ldr	r3, [r7, #0]
 8111230:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8111232:	2319      	movs	r3, #25
 8111234:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8111236:	f44f 7380 	mov.w	r3, #256	; 0x100
 811123a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 811123c:	2300      	movs	r3, #0
 811123e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8111240:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8111244:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8111246:	f107 0308 	add.w	r3, r7, #8
 811124a:	4619      	mov	r1, r3
 811124c:	6878      	ldr	r0, [r7, #4]
 811124e:	f7ff fee7 	bl	8111020 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8111252:	f241 3288 	movw	r2, #5000	; 0x1388
 8111256:	2119      	movs	r1, #25
 8111258:	6878      	ldr	r0, [r7, #4]
 811125a:	f000 f9f5 	bl	8111648 <SDMMC_GetCmdResp1>
 811125e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8111260:	69fb      	ldr	r3, [r7, #28]
}
 8111262:	4618      	mov	r0, r3
 8111264:	3720      	adds	r7, #32
 8111266:	46bd      	mov	sp, r7
 8111268:	bd80      	pop	{r7, pc}
	...

0811126c <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 811126c:	b580      	push	{r7, lr}
 811126e:	b088      	sub	sp, #32
 8111270:	af00      	add	r7, sp, #0
 8111272:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8111274:	2300      	movs	r3, #0
 8111276:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8111278:	230c      	movs	r3, #12
 811127a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 811127c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8111280:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8111282:	2300      	movs	r3, #0
 8111284:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8111286:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 811128a:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 811128c:	687b      	ldr	r3, [r7, #4]
 811128e:	68db      	ldr	r3, [r3, #12]
 8111290:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8111294:	687b      	ldr	r3, [r7, #4]
 8111296:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 8111298:	687b      	ldr	r3, [r7, #4]
 811129a:	68db      	ldr	r3, [r3, #12]
 811129c:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 81112a0:	687b      	ldr	r3, [r7, #4]
 81112a2:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 81112a4:	f107 0308 	add.w	r3, r7, #8
 81112a8:	4619      	mov	r1, r3
 81112aa:	6878      	ldr	r0, [r7, #4]
 81112ac:	f7ff feb8 	bl	8111020 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 81112b0:	4a0b      	ldr	r2, [pc, #44]	; (81112e0 <SDMMC_CmdStopTransfer+0x74>)
 81112b2:	210c      	movs	r1, #12
 81112b4:	6878      	ldr	r0, [r7, #4]
 81112b6:	f000 f9c7 	bl	8111648 <SDMMC_GetCmdResp1>
 81112ba:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 81112bc:	687b      	ldr	r3, [r7, #4]
 81112be:	68db      	ldr	r3, [r3, #12]
 81112c0:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 81112c4:	687b      	ldr	r3, [r7, #4]
 81112c6:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 81112c8:	69fb      	ldr	r3, [r7, #28]
 81112ca:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 81112ce:	d101      	bne.n	81112d4 <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 81112d0:	2300      	movs	r3, #0
 81112d2:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 81112d4:	69fb      	ldr	r3, [r7, #28]
}
 81112d6:	4618      	mov	r0, r3
 81112d8:	3720      	adds	r7, #32
 81112da:	46bd      	mov	sp, r7
 81112dc:	bd80      	pop	{r7, pc}
 81112de:	bf00      	nop
 81112e0:	05f5e100 	.word	0x05f5e100

081112e4 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 81112e4:	b580      	push	{r7, lr}
 81112e6:	b088      	sub	sp, #32
 81112e8:	af00      	add	r7, sp, #0
 81112ea:	6078      	str	r0, [r7, #4]
 81112ec:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 81112ee:	683b      	ldr	r3, [r7, #0]
 81112f0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 81112f2:	2307      	movs	r3, #7
 81112f4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 81112f6:	f44f 7380 	mov.w	r3, #256	; 0x100
 81112fa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 81112fc:	2300      	movs	r3, #0
 81112fe:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8111300:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8111304:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8111306:	f107 0308 	add.w	r3, r7, #8
 811130a:	4619      	mov	r1, r3
 811130c:	6878      	ldr	r0, [r7, #4]
 811130e:	f7ff fe87 	bl	8111020 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8111312:	f241 3288 	movw	r2, #5000	; 0x1388
 8111316:	2107      	movs	r1, #7
 8111318:	6878      	ldr	r0, [r7, #4]
 811131a:	f000 f995 	bl	8111648 <SDMMC_GetCmdResp1>
 811131e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8111320:	69fb      	ldr	r3, [r7, #28]
}
 8111322:	4618      	mov	r0, r3
 8111324:	3720      	adds	r7, #32
 8111326:	46bd      	mov	sp, r7
 8111328:	bd80      	pop	{r7, pc}

0811132a <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 811132a:	b580      	push	{r7, lr}
 811132c:	b088      	sub	sp, #32
 811132e:	af00      	add	r7, sp, #0
 8111330:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8111332:	2300      	movs	r3, #0
 8111334:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8111336:	2300      	movs	r3, #0
 8111338:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 811133a:	2300      	movs	r3, #0
 811133c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 811133e:	2300      	movs	r3, #0
 8111340:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8111342:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8111346:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8111348:	f107 0308 	add.w	r3, r7, #8
 811134c:	4619      	mov	r1, r3
 811134e:	6878      	ldr	r0, [r7, #4]
 8111350:	f7ff fe66 	bl	8111020 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8111354:	6878      	ldr	r0, [r7, #4]
 8111356:	f000 fbb9 	bl	8111acc <SDMMC_GetCmdError>
 811135a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 811135c:	69fb      	ldr	r3, [r7, #28]
}
 811135e:	4618      	mov	r0, r3
 8111360:	3720      	adds	r7, #32
 8111362:	46bd      	mov	sp, r7
 8111364:	bd80      	pop	{r7, pc}

08111366 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8111366:	b580      	push	{r7, lr}
 8111368:	b088      	sub	sp, #32
 811136a:	af00      	add	r7, sp, #0
 811136c:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 811136e:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8111372:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8111374:	2308      	movs	r3, #8
 8111376:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8111378:	f44f 7380 	mov.w	r3, #256	; 0x100
 811137c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 811137e:	2300      	movs	r3, #0
 8111380:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8111382:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8111386:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8111388:	f107 0308 	add.w	r3, r7, #8
 811138c:	4619      	mov	r1, r3
 811138e:	6878      	ldr	r0, [r7, #4]
 8111390:	f7ff fe46 	bl	8111020 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8111394:	6878      	ldr	r0, [r7, #4]
 8111396:	f000 fb4b 	bl	8111a30 <SDMMC_GetCmdResp7>
 811139a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 811139c:	69fb      	ldr	r3, [r7, #28]
}
 811139e:	4618      	mov	r0, r3
 81113a0:	3720      	adds	r7, #32
 81113a2:	46bd      	mov	sp, r7
 81113a4:	bd80      	pop	{r7, pc}

081113a6 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 81113a6:	b580      	push	{r7, lr}
 81113a8:	b088      	sub	sp, #32
 81113aa:	af00      	add	r7, sp, #0
 81113ac:	6078      	str	r0, [r7, #4]
 81113ae:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 81113b0:	683b      	ldr	r3, [r7, #0]
 81113b2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 81113b4:	2337      	movs	r3, #55	; 0x37
 81113b6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 81113b8:	f44f 7380 	mov.w	r3, #256	; 0x100
 81113bc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 81113be:	2300      	movs	r3, #0
 81113c0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 81113c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 81113c6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 81113c8:	f107 0308 	add.w	r3, r7, #8
 81113cc:	4619      	mov	r1, r3
 81113ce:	6878      	ldr	r0, [r7, #4]
 81113d0:	f7ff fe26 	bl	8111020 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 81113d4:	f241 3288 	movw	r2, #5000	; 0x1388
 81113d8:	2137      	movs	r1, #55	; 0x37
 81113da:	6878      	ldr	r0, [r7, #4]
 81113dc:	f000 f934 	bl	8111648 <SDMMC_GetCmdResp1>
 81113e0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 81113e2:	69fb      	ldr	r3, [r7, #28]
}
 81113e4:	4618      	mov	r0, r3
 81113e6:	3720      	adds	r7, #32
 81113e8:	46bd      	mov	sp, r7
 81113ea:	bd80      	pop	{r7, pc}

081113ec <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 81113ec:	b580      	push	{r7, lr}
 81113ee:	b088      	sub	sp, #32
 81113f0:	af00      	add	r7, sp, #0
 81113f2:	6078      	str	r0, [r7, #4]
 81113f4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 81113f6:	683b      	ldr	r3, [r7, #0]
 81113f8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 81113fa:	2329      	movs	r3, #41	; 0x29
 81113fc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 81113fe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8111402:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8111404:	2300      	movs	r3, #0
 8111406:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8111408:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 811140c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 811140e:	f107 0308 	add.w	r3, r7, #8
 8111412:	4619      	mov	r1, r3
 8111414:	6878      	ldr	r0, [r7, #4]
 8111416:	f7ff fe03 	bl	8111020 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 811141a:	6878      	ldr	r0, [r7, #4]
 811141c:	f000 fa50 	bl	81118c0 <SDMMC_GetCmdResp3>
 8111420:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8111422:	69fb      	ldr	r3, [r7, #28]
}
 8111424:	4618      	mov	r0, r3
 8111426:	3720      	adds	r7, #32
 8111428:	46bd      	mov	sp, r7
 811142a:	bd80      	pop	{r7, pc}

0811142c <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 811142c:	b580      	push	{r7, lr}
 811142e:	b088      	sub	sp, #32
 8111430:	af00      	add	r7, sp, #0
 8111432:	6078      	str	r0, [r7, #4]
 8111434:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8111436:	683b      	ldr	r3, [r7, #0]
 8111438:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 811143a:	2306      	movs	r3, #6
 811143c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 811143e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8111442:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8111444:	2300      	movs	r3, #0
 8111446:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8111448:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 811144c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 811144e:	f107 0308 	add.w	r3, r7, #8
 8111452:	4619      	mov	r1, r3
 8111454:	6878      	ldr	r0, [r7, #4]
 8111456:	f7ff fde3 	bl	8111020 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 811145a:	f241 3288 	movw	r2, #5000	; 0x1388
 811145e:	2106      	movs	r1, #6
 8111460:	6878      	ldr	r0, [r7, #4]
 8111462:	f000 f8f1 	bl	8111648 <SDMMC_GetCmdResp1>
 8111466:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8111468:	69fb      	ldr	r3, [r7, #28]
}
 811146a:	4618      	mov	r0, r3
 811146c:	3720      	adds	r7, #32
 811146e:	46bd      	mov	sp, r7
 8111470:	bd80      	pop	{r7, pc}

08111472 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 8111472:	b580      	push	{r7, lr}
 8111474:	b088      	sub	sp, #32
 8111476:	af00      	add	r7, sp, #0
 8111478:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 811147a:	2300      	movs	r3, #0
 811147c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 811147e:	2333      	movs	r3, #51	; 0x33
 8111480:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8111482:	f44f 7380 	mov.w	r3, #256	; 0x100
 8111486:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8111488:	2300      	movs	r3, #0
 811148a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 811148c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8111490:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8111492:	f107 0308 	add.w	r3, r7, #8
 8111496:	4619      	mov	r1, r3
 8111498:	6878      	ldr	r0, [r7, #4]
 811149a:	f7ff fdc1 	bl	8111020 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 811149e:	f241 3288 	movw	r2, #5000	; 0x1388
 81114a2:	2133      	movs	r1, #51	; 0x33
 81114a4:	6878      	ldr	r0, [r7, #4]
 81114a6:	f000 f8cf 	bl	8111648 <SDMMC_GetCmdResp1>
 81114aa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 81114ac:	69fb      	ldr	r3, [r7, #28]
}
 81114ae:	4618      	mov	r0, r3
 81114b0:	3720      	adds	r7, #32
 81114b2:	46bd      	mov	sp, r7
 81114b4:	bd80      	pop	{r7, pc}

081114b6 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 81114b6:	b580      	push	{r7, lr}
 81114b8:	b088      	sub	sp, #32
 81114ba:	af00      	add	r7, sp, #0
 81114bc:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 81114be:	2300      	movs	r3, #0
 81114c0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 81114c2:	2302      	movs	r3, #2
 81114c4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 81114c6:	f44f 7340 	mov.w	r3, #768	; 0x300
 81114ca:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 81114cc:	2300      	movs	r3, #0
 81114ce:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 81114d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 81114d4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 81114d6:	f107 0308 	add.w	r3, r7, #8
 81114da:	4619      	mov	r1, r3
 81114dc:	6878      	ldr	r0, [r7, #4]
 81114de:	f7ff fd9f 	bl	8111020 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 81114e2:	6878      	ldr	r0, [r7, #4]
 81114e4:	f000 f9a2 	bl	811182c <SDMMC_GetCmdResp2>
 81114e8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 81114ea:	69fb      	ldr	r3, [r7, #28]
}
 81114ec:	4618      	mov	r0, r3
 81114ee:	3720      	adds	r7, #32
 81114f0:	46bd      	mov	sp, r7
 81114f2:	bd80      	pop	{r7, pc}

081114f4 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 81114f4:	b580      	push	{r7, lr}
 81114f6:	b088      	sub	sp, #32
 81114f8:	af00      	add	r7, sp, #0
 81114fa:	6078      	str	r0, [r7, #4]
 81114fc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 81114fe:	683b      	ldr	r3, [r7, #0]
 8111500:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8111502:	2309      	movs	r3, #9
 8111504:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8111506:	f44f 7340 	mov.w	r3, #768	; 0x300
 811150a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 811150c:	2300      	movs	r3, #0
 811150e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8111510:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8111514:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8111516:	f107 0308 	add.w	r3, r7, #8
 811151a:	4619      	mov	r1, r3
 811151c:	6878      	ldr	r0, [r7, #4]
 811151e:	f7ff fd7f 	bl	8111020 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8111522:	6878      	ldr	r0, [r7, #4]
 8111524:	f000 f982 	bl	811182c <SDMMC_GetCmdResp2>
 8111528:	61f8      	str	r0, [r7, #28]

  return errorstate;
 811152a:	69fb      	ldr	r3, [r7, #28]
}
 811152c:	4618      	mov	r0, r3
 811152e:	3720      	adds	r7, #32
 8111530:	46bd      	mov	sp, r7
 8111532:	bd80      	pop	{r7, pc}

08111534 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8111534:	b580      	push	{r7, lr}
 8111536:	b088      	sub	sp, #32
 8111538:	af00      	add	r7, sp, #0
 811153a:	6078      	str	r0, [r7, #4]
 811153c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 811153e:	2300      	movs	r3, #0
 8111540:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8111542:	2303      	movs	r3, #3
 8111544:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8111546:	f44f 7380 	mov.w	r3, #256	; 0x100
 811154a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 811154c:	2300      	movs	r3, #0
 811154e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8111550:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8111554:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8111556:	f107 0308 	add.w	r3, r7, #8
 811155a:	4619      	mov	r1, r3
 811155c:	6878      	ldr	r0, [r7, #4]
 811155e:	f7ff fd5f 	bl	8111020 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8111562:	683a      	ldr	r2, [r7, #0]
 8111564:	2103      	movs	r1, #3
 8111566:	6878      	ldr	r0, [r7, #4]
 8111568:	f000 f9ea 	bl	8111940 <SDMMC_GetCmdResp6>
 811156c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 811156e:	69fb      	ldr	r3, [r7, #28]
}
 8111570:	4618      	mov	r0, r3
 8111572:	3720      	adds	r7, #32
 8111574:	46bd      	mov	sp, r7
 8111576:	bd80      	pop	{r7, pc}

08111578 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8111578:	b580      	push	{r7, lr}
 811157a:	b088      	sub	sp, #32
 811157c:	af00      	add	r7, sp, #0
 811157e:	6078      	str	r0, [r7, #4]
 8111580:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8111582:	683b      	ldr	r3, [r7, #0]
 8111584:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8111586:	230d      	movs	r3, #13
 8111588:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 811158a:	f44f 7380 	mov.w	r3, #256	; 0x100
 811158e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8111590:	2300      	movs	r3, #0
 8111592:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8111594:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8111598:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 811159a:	f107 0308 	add.w	r3, r7, #8
 811159e:	4619      	mov	r1, r3
 81115a0:	6878      	ldr	r0, [r7, #4]
 81115a2:	f7ff fd3d 	bl	8111020 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 81115a6:	f241 3288 	movw	r2, #5000	; 0x1388
 81115aa:	210d      	movs	r1, #13
 81115ac:	6878      	ldr	r0, [r7, #4]
 81115ae:	f000 f84b 	bl	8111648 <SDMMC_GetCmdResp1>
 81115b2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 81115b4:	69fb      	ldr	r3, [r7, #28]
}
 81115b6:	4618      	mov	r0, r3
 81115b8:	3720      	adds	r7, #32
 81115ba:	46bd      	mov	sp, r7
 81115bc:	bd80      	pop	{r7, pc}

081115be <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 81115be:	b580      	push	{r7, lr}
 81115c0:	b088      	sub	sp, #32
 81115c2:	af00      	add	r7, sp, #0
 81115c4:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 81115c6:	2300      	movs	r3, #0
 81115c8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 81115ca:	230d      	movs	r3, #13
 81115cc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 81115ce:	f44f 7380 	mov.w	r3, #256	; 0x100
 81115d2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 81115d4:	2300      	movs	r3, #0
 81115d6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 81115d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 81115dc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 81115de:	f107 0308 	add.w	r3, r7, #8
 81115e2:	4619      	mov	r1, r3
 81115e4:	6878      	ldr	r0, [r7, #4]
 81115e6:	f7ff fd1b 	bl	8111020 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 81115ea:	f241 3288 	movw	r2, #5000	; 0x1388
 81115ee:	210d      	movs	r1, #13
 81115f0:	6878      	ldr	r0, [r7, #4]
 81115f2:	f000 f829 	bl	8111648 <SDMMC_GetCmdResp1>
 81115f6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 81115f8:	69fb      	ldr	r3, [r7, #28]
}
 81115fa:	4618      	mov	r0, r3
 81115fc:	3720      	adds	r7, #32
 81115fe:	46bd      	mov	sp, r7
 8111600:	bd80      	pop	{r7, pc}

08111602 <SDMMC_CmdVoltageSwitch>:
  *         condition register (OCR)
  * @param  None
  * @retval HAL status
  */
uint32_t SDMMC_CmdVoltageSwitch(SDMMC_TypeDef *SDMMCx)
{
 8111602:	b580      	push	{r7, lr}
 8111604:	b088      	sub	sp, #32
 8111606:	af00      	add	r7, sp, #0
 8111608:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0x00000000;
 811160a:	2300      	movs	r3, #0
 811160c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_VOLTAGE_SWITCH;
 811160e:	230b      	movs	r3, #11
 8111610:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8111612:	f44f 7380 	mov.w	r3, #256	; 0x100
 8111616:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8111618:	2300      	movs	r3, #0
 811161a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 811161c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8111620:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8111622:	f107 0308 	add.w	r3, r7, #8
 8111626:	4619      	mov	r1, r3
 8111628:	6878      	ldr	r0, [r7, #4]
 811162a:	f7ff fcf9 	bl	8111020 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_VOLTAGE_SWITCH, SDMMC_CMDTIMEOUT);
 811162e:	f241 3288 	movw	r2, #5000	; 0x1388
 8111632:	210b      	movs	r1, #11
 8111634:	6878      	ldr	r0, [r7, #4]
 8111636:	f000 f807 	bl	8111648 <SDMMC_GetCmdResp1>
 811163a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 811163c:	69fb      	ldr	r3, [r7, #28]
}
 811163e:	4618      	mov	r0, r3
 8111640:	3720      	adds	r7, #32
 8111642:	46bd      	mov	sp, r7
 8111644:	bd80      	pop	{r7, pc}
	...

08111648 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8111648:	b580      	push	{r7, lr}
 811164a:	b088      	sub	sp, #32
 811164c:	af00      	add	r7, sp, #0
 811164e:	60f8      	str	r0, [r7, #12]
 8111650:	460b      	mov	r3, r1
 8111652:	607a      	str	r2, [r7, #4]
 8111654:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8111656:	4b70      	ldr	r3, [pc, #448]	; (8111818 <SDMMC_GetCmdResp1+0x1d0>)
 8111658:	681b      	ldr	r3, [r3, #0]
 811165a:	4a70      	ldr	r2, [pc, #448]	; (811181c <SDMMC_GetCmdResp1+0x1d4>)
 811165c:	fba2 2303 	umull	r2, r3, r2, r3
 8111660:	0a5a      	lsrs	r2, r3, #9
 8111662:	687b      	ldr	r3, [r7, #4]
 8111664:	fb02 f303 	mul.w	r3, r2, r3
 8111668:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 811166a:	69fb      	ldr	r3, [r7, #28]
 811166c:	1e5a      	subs	r2, r3, #1
 811166e:	61fa      	str	r2, [r7, #28]
 8111670:	2b00      	cmp	r3, #0
 8111672:	d102      	bne.n	811167a <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8111674:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8111678:	e0c9      	b.n	811180e <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 811167a:	68fb      	ldr	r3, [r7, #12]
 811167c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 811167e:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 8111680:	69ba      	ldr	r2, [r7, #24]
 8111682:	4b67      	ldr	r3, [pc, #412]	; (8111820 <SDMMC_GetCmdResp1+0x1d8>)
 8111684:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8111686:	2b00      	cmp	r3, #0
 8111688:	d0ef      	beq.n	811166a <SDMMC_GetCmdResp1+0x22>
 811168a:	69bb      	ldr	r3, [r7, #24]
 811168c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8111690:	2b00      	cmp	r3, #0
 8111692:	d1ea      	bne.n	811166a <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8111694:	68fb      	ldr	r3, [r7, #12]
 8111696:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8111698:	f003 0304 	and.w	r3, r3, #4
 811169c:	2b00      	cmp	r3, #0
 811169e:	d004      	beq.n	81116aa <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 81116a0:	68fb      	ldr	r3, [r7, #12]
 81116a2:	2204      	movs	r2, #4
 81116a4:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 81116a6:	2304      	movs	r3, #4
 81116a8:	e0b1      	b.n	811180e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 81116aa:	68fb      	ldr	r3, [r7, #12]
 81116ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 81116ae:	f003 0301 	and.w	r3, r3, #1
 81116b2:	2b00      	cmp	r3, #0
 81116b4:	d004      	beq.n	81116c0 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 81116b6:	68fb      	ldr	r3, [r7, #12]
 81116b8:	2201      	movs	r2, #1
 81116ba:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 81116bc:	2301      	movs	r3, #1
 81116be:	e0a6      	b.n	811180e <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 81116c0:	68fb      	ldr	r3, [r7, #12]
 81116c2:	4a58      	ldr	r2, [pc, #352]	; (8111824 <SDMMC_GetCmdResp1+0x1dc>)
 81116c4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 81116c6:	68f8      	ldr	r0, [r7, #12]
 81116c8:	f7ff fcd4 	bl	8111074 <SDMMC_GetCommandResponse>
 81116cc:	4603      	mov	r3, r0
 81116ce:	461a      	mov	r2, r3
 81116d0:	7afb      	ldrb	r3, [r7, #11]
 81116d2:	4293      	cmp	r3, r2
 81116d4:	d001      	beq.n	81116da <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 81116d6:	2301      	movs	r3, #1
 81116d8:	e099      	b.n	811180e <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 81116da:	2100      	movs	r1, #0
 81116dc:	68f8      	ldr	r0, [r7, #12]
 81116de:	f7ff fcd6 	bl	811108e <SDMMC_GetResponse>
 81116e2:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 81116e4:	697a      	ldr	r2, [r7, #20]
 81116e6:	4b50      	ldr	r3, [pc, #320]	; (8111828 <SDMMC_GetCmdResp1+0x1e0>)
 81116e8:	4013      	ands	r3, r2
 81116ea:	2b00      	cmp	r3, #0
 81116ec:	d101      	bne.n	81116f2 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 81116ee:	2300      	movs	r3, #0
 81116f0:	e08d      	b.n	811180e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 81116f2:	697b      	ldr	r3, [r7, #20]
 81116f4:	2b00      	cmp	r3, #0
 81116f6:	da02      	bge.n	81116fe <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 81116f8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 81116fc:	e087      	b.n	811180e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 81116fe:	697b      	ldr	r3, [r7, #20]
 8111700:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8111704:	2b00      	cmp	r3, #0
 8111706:	d001      	beq.n	811170c <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8111708:	2340      	movs	r3, #64	; 0x40
 811170a:	e080      	b.n	811180e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 811170c:	697b      	ldr	r3, [r7, #20]
 811170e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8111712:	2b00      	cmp	r3, #0
 8111714:	d001      	beq.n	811171a <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8111716:	2380      	movs	r3, #128	; 0x80
 8111718:	e079      	b.n	811180e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 811171a:	697b      	ldr	r3, [r7, #20]
 811171c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8111720:	2b00      	cmp	r3, #0
 8111722:	d002      	beq.n	811172a <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8111724:	f44f 7380 	mov.w	r3, #256	; 0x100
 8111728:	e071      	b.n	811180e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 811172a:	697b      	ldr	r3, [r7, #20]
 811172c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8111730:	2b00      	cmp	r3, #0
 8111732:	d002      	beq.n	811173a <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8111734:	f44f 7300 	mov.w	r3, #512	; 0x200
 8111738:	e069      	b.n	811180e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 811173a:	697b      	ldr	r3, [r7, #20]
 811173c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8111740:	2b00      	cmp	r3, #0
 8111742:	d002      	beq.n	811174a <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8111744:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8111748:	e061      	b.n	811180e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 811174a:	697b      	ldr	r3, [r7, #20]
 811174c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8111750:	2b00      	cmp	r3, #0
 8111752:	d002      	beq.n	811175a <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8111754:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8111758:	e059      	b.n	811180e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 811175a:	697b      	ldr	r3, [r7, #20]
 811175c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8111760:	2b00      	cmp	r3, #0
 8111762:	d002      	beq.n	811176a <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8111764:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8111768:	e051      	b.n	811180e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 811176a:	697b      	ldr	r3, [r7, #20]
 811176c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8111770:	2b00      	cmp	r3, #0
 8111772:	d002      	beq.n	811177a <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8111774:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8111778:	e049      	b.n	811180e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 811177a:	697b      	ldr	r3, [r7, #20]
 811177c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8111780:	2b00      	cmp	r3, #0
 8111782:	d002      	beq.n	811178a <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8111784:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8111788:	e041      	b.n	811180e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 811178a:	697b      	ldr	r3, [r7, #20]
 811178c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8111790:	2b00      	cmp	r3, #0
 8111792:	d002      	beq.n	811179a <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8111794:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8111798:	e039      	b.n	811180e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 811179a:	697b      	ldr	r3, [r7, #20]
 811179c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 81117a0:	2b00      	cmp	r3, #0
 81117a2:	d002      	beq.n	81117aa <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 81117a4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 81117a8:	e031      	b.n	811180e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 81117aa:	697b      	ldr	r3, [r7, #20]
 81117ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 81117b0:	2b00      	cmp	r3, #0
 81117b2:	d002      	beq.n	81117ba <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 81117b4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 81117b8:	e029      	b.n	811180e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 81117ba:	697b      	ldr	r3, [r7, #20]
 81117bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 81117c0:	2b00      	cmp	r3, #0
 81117c2:	d002      	beq.n	81117ca <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 81117c4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 81117c8:	e021      	b.n	811180e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 81117ca:	697b      	ldr	r3, [r7, #20]
 81117cc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 81117d0:	2b00      	cmp	r3, #0
 81117d2:	d002      	beq.n	81117da <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 81117d4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 81117d8:	e019      	b.n	811180e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 81117da:	697b      	ldr	r3, [r7, #20]
 81117dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 81117e0:	2b00      	cmp	r3, #0
 81117e2:	d002      	beq.n	81117ea <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 81117e4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 81117e8:	e011      	b.n	811180e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 81117ea:	697b      	ldr	r3, [r7, #20]
 81117ec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 81117f0:	2b00      	cmp	r3, #0
 81117f2:	d002      	beq.n	81117fa <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 81117f4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 81117f8:	e009      	b.n	811180e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 81117fa:	697b      	ldr	r3, [r7, #20]
 81117fc:	f003 0308 	and.w	r3, r3, #8
 8111800:	2b00      	cmp	r3, #0
 8111802:	d002      	beq.n	811180a <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8111804:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8111808:	e001      	b.n	811180e <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 811180a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 811180e:	4618      	mov	r0, r3
 8111810:	3720      	adds	r7, #32
 8111812:	46bd      	mov	sp, r7
 8111814:	bd80      	pop	{r7, pc}
 8111816:	bf00      	nop
 8111818:	10000000 	.word	0x10000000
 811181c:	10624dd3 	.word	0x10624dd3
 8111820:	00200045 	.word	0x00200045
 8111824:	002000c5 	.word	0x002000c5
 8111828:	fdffe008 	.word	0xfdffe008

0811182c <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 811182c:	b480      	push	{r7}
 811182e:	b085      	sub	sp, #20
 8111830:	af00      	add	r7, sp, #0
 8111832:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8111834:	4b1f      	ldr	r3, [pc, #124]	; (81118b4 <SDMMC_GetCmdResp2+0x88>)
 8111836:	681b      	ldr	r3, [r3, #0]
 8111838:	4a1f      	ldr	r2, [pc, #124]	; (81118b8 <SDMMC_GetCmdResp2+0x8c>)
 811183a:	fba2 2303 	umull	r2, r3, r2, r3
 811183e:	0a5b      	lsrs	r3, r3, #9
 8111840:	f241 3288 	movw	r2, #5000	; 0x1388
 8111844:	fb02 f303 	mul.w	r3, r2, r3
 8111848:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 811184a:	68fb      	ldr	r3, [r7, #12]
 811184c:	1e5a      	subs	r2, r3, #1
 811184e:	60fa      	str	r2, [r7, #12]
 8111850:	2b00      	cmp	r3, #0
 8111852:	d102      	bne.n	811185a <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8111854:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8111858:	e026      	b.n	81118a8 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 811185a:	687b      	ldr	r3, [r7, #4]
 811185c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 811185e:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8111860:	68bb      	ldr	r3, [r7, #8]
 8111862:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8111866:	2b00      	cmp	r3, #0
 8111868:	d0ef      	beq.n	811184a <SDMMC_GetCmdResp2+0x1e>
 811186a:	68bb      	ldr	r3, [r7, #8]
 811186c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8111870:	2b00      	cmp	r3, #0
 8111872:	d1ea      	bne.n	811184a <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8111874:	687b      	ldr	r3, [r7, #4]
 8111876:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8111878:	f003 0304 	and.w	r3, r3, #4
 811187c:	2b00      	cmp	r3, #0
 811187e:	d004      	beq.n	811188a <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8111880:	687b      	ldr	r3, [r7, #4]
 8111882:	2204      	movs	r2, #4
 8111884:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8111886:	2304      	movs	r3, #4
 8111888:	e00e      	b.n	81118a8 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 811188a:	687b      	ldr	r3, [r7, #4]
 811188c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 811188e:	f003 0301 	and.w	r3, r3, #1
 8111892:	2b00      	cmp	r3, #0
 8111894:	d004      	beq.n	81118a0 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8111896:	687b      	ldr	r3, [r7, #4]
 8111898:	2201      	movs	r2, #1
 811189a:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 811189c:	2301      	movs	r3, #1
 811189e:	e003      	b.n	81118a8 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 81118a0:	687b      	ldr	r3, [r7, #4]
 81118a2:	4a06      	ldr	r2, [pc, #24]	; (81118bc <SDMMC_GetCmdResp2+0x90>)
 81118a4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 81118a6:	2300      	movs	r3, #0
}
 81118a8:	4618      	mov	r0, r3
 81118aa:	3714      	adds	r7, #20
 81118ac:	46bd      	mov	sp, r7
 81118ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 81118b2:	4770      	bx	lr
 81118b4:	10000000 	.word	0x10000000
 81118b8:	10624dd3 	.word	0x10624dd3
 81118bc:	002000c5 	.word	0x002000c5

081118c0 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 81118c0:	b480      	push	{r7}
 81118c2:	b085      	sub	sp, #20
 81118c4:	af00      	add	r7, sp, #0
 81118c6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 81118c8:	4b1a      	ldr	r3, [pc, #104]	; (8111934 <SDMMC_GetCmdResp3+0x74>)
 81118ca:	681b      	ldr	r3, [r3, #0]
 81118cc:	4a1a      	ldr	r2, [pc, #104]	; (8111938 <SDMMC_GetCmdResp3+0x78>)
 81118ce:	fba2 2303 	umull	r2, r3, r2, r3
 81118d2:	0a5b      	lsrs	r3, r3, #9
 81118d4:	f241 3288 	movw	r2, #5000	; 0x1388
 81118d8:	fb02 f303 	mul.w	r3, r2, r3
 81118dc:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 81118de:	68fb      	ldr	r3, [r7, #12]
 81118e0:	1e5a      	subs	r2, r3, #1
 81118e2:	60fa      	str	r2, [r7, #12]
 81118e4:	2b00      	cmp	r3, #0
 81118e6:	d102      	bne.n	81118ee <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 81118e8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 81118ec:	e01b      	b.n	8111926 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 81118ee:	687b      	ldr	r3, [r7, #4]
 81118f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 81118f2:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 81118f4:	68bb      	ldr	r3, [r7, #8]
 81118f6:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 81118fa:	2b00      	cmp	r3, #0
 81118fc:	d0ef      	beq.n	81118de <SDMMC_GetCmdResp3+0x1e>
 81118fe:	68bb      	ldr	r3, [r7, #8]
 8111900:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8111904:	2b00      	cmp	r3, #0
 8111906:	d1ea      	bne.n	81118de <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8111908:	687b      	ldr	r3, [r7, #4]
 811190a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 811190c:	f003 0304 	and.w	r3, r3, #4
 8111910:	2b00      	cmp	r3, #0
 8111912:	d004      	beq.n	811191e <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8111914:	687b      	ldr	r3, [r7, #4]
 8111916:	2204      	movs	r2, #4
 8111918:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 811191a:	2304      	movs	r3, #4
 811191c:	e003      	b.n	8111926 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 811191e:	687b      	ldr	r3, [r7, #4]
 8111920:	4a06      	ldr	r2, [pc, #24]	; (811193c <SDMMC_GetCmdResp3+0x7c>)
 8111922:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8111924:	2300      	movs	r3, #0
}
 8111926:	4618      	mov	r0, r3
 8111928:	3714      	adds	r7, #20
 811192a:	46bd      	mov	sp, r7
 811192c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8111930:	4770      	bx	lr
 8111932:	bf00      	nop
 8111934:	10000000 	.word	0x10000000
 8111938:	10624dd3 	.word	0x10624dd3
 811193c:	002000c5 	.word	0x002000c5

08111940 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8111940:	b580      	push	{r7, lr}
 8111942:	b088      	sub	sp, #32
 8111944:	af00      	add	r7, sp, #0
 8111946:	60f8      	str	r0, [r7, #12]
 8111948:	460b      	mov	r3, r1
 811194a:	607a      	str	r2, [r7, #4]
 811194c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 811194e:	4b35      	ldr	r3, [pc, #212]	; (8111a24 <SDMMC_GetCmdResp6+0xe4>)
 8111950:	681b      	ldr	r3, [r3, #0]
 8111952:	4a35      	ldr	r2, [pc, #212]	; (8111a28 <SDMMC_GetCmdResp6+0xe8>)
 8111954:	fba2 2303 	umull	r2, r3, r2, r3
 8111958:	0a5b      	lsrs	r3, r3, #9
 811195a:	f241 3288 	movw	r2, #5000	; 0x1388
 811195e:	fb02 f303 	mul.w	r3, r2, r3
 8111962:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8111964:	69fb      	ldr	r3, [r7, #28]
 8111966:	1e5a      	subs	r2, r3, #1
 8111968:	61fa      	str	r2, [r7, #28]
 811196a:	2b00      	cmp	r3, #0
 811196c:	d102      	bne.n	8111974 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 811196e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8111972:	e052      	b.n	8111a1a <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 8111974:	68fb      	ldr	r3, [r7, #12]
 8111976:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8111978:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 811197a:	69bb      	ldr	r3, [r7, #24]
 811197c:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8111980:	2b00      	cmp	r3, #0
 8111982:	d0ef      	beq.n	8111964 <SDMMC_GetCmdResp6+0x24>
 8111984:	69bb      	ldr	r3, [r7, #24]
 8111986:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 811198a:	2b00      	cmp	r3, #0
 811198c:	d1ea      	bne.n	8111964 <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 811198e:	68fb      	ldr	r3, [r7, #12]
 8111990:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8111992:	f003 0304 	and.w	r3, r3, #4
 8111996:	2b00      	cmp	r3, #0
 8111998:	d004      	beq.n	81119a4 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 811199a:	68fb      	ldr	r3, [r7, #12]
 811199c:	2204      	movs	r2, #4
 811199e:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 81119a0:	2304      	movs	r3, #4
 81119a2:	e03a      	b.n	8111a1a <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 81119a4:	68fb      	ldr	r3, [r7, #12]
 81119a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 81119a8:	f003 0301 	and.w	r3, r3, #1
 81119ac:	2b00      	cmp	r3, #0
 81119ae:	d004      	beq.n	81119ba <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 81119b0:	68fb      	ldr	r3, [r7, #12]
 81119b2:	2201      	movs	r2, #1
 81119b4:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 81119b6:	2301      	movs	r3, #1
 81119b8:	e02f      	b.n	8111a1a <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 81119ba:	68f8      	ldr	r0, [r7, #12]
 81119bc:	f7ff fb5a 	bl	8111074 <SDMMC_GetCommandResponse>
 81119c0:	4603      	mov	r3, r0
 81119c2:	461a      	mov	r2, r3
 81119c4:	7afb      	ldrb	r3, [r7, #11]
 81119c6:	4293      	cmp	r3, r2
 81119c8:	d001      	beq.n	81119ce <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 81119ca:	2301      	movs	r3, #1
 81119cc:	e025      	b.n	8111a1a <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 81119ce:	68fb      	ldr	r3, [r7, #12]
 81119d0:	4a16      	ldr	r2, [pc, #88]	; (8111a2c <SDMMC_GetCmdResp6+0xec>)
 81119d2:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 81119d4:	2100      	movs	r1, #0
 81119d6:	68f8      	ldr	r0, [r7, #12]
 81119d8:	f7ff fb59 	bl	811108e <SDMMC_GetResponse>
 81119dc:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 81119de:	697b      	ldr	r3, [r7, #20]
 81119e0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 81119e4:	2b00      	cmp	r3, #0
 81119e6:	d106      	bne.n	81119f6 <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 81119e8:	697b      	ldr	r3, [r7, #20]
 81119ea:	0c1b      	lsrs	r3, r3, #16
 81119ec:	b29a      	uxth	r2, r3
 81119ee:	687b      	ldr	r3, [r7, #4]
 81119f0:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 81119f2:	2300      	movs	r3, #0
 81119f4:	e011      	b.n	8111a1a <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 81119f6:	697b      	ldr	r3, [r7, #20]
 81119f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 81119fc:	2b00      	cmp	r3, #0
 81119fe:	d002      	beq.n	8111a06 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8111a00:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8111a04:	e009      	b.n	8111a1a <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8111a06:	697b      	ldr	r3, [r7, #20]
 8111a08:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8111a0c:	2b00      	cmp	r3, #0
 8111a0e:	d002      	beq.n	8111a16 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8111a10:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8111a14:	e001      	b.n	8111a1a <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8111a16:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8111a1a:	4618      	mov	r0, r3
 8111a1c:	3720      	adds	r7, #32
 8111a1e:	46bd      	mov	sp, r7
 8111a20:	bd80      	pop	{r7, pc}
 8111a22:	bf00      	nop
 8111a24:	10000000 	.word	0x10000000
 8111a28:	10624dd3 	.word	0x10624dd3
 8111a2c:	002000c5 	.word	0x002000c5

08111a30 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8111a30:	b480      	push	{r7}
 8111a32:	b085      	sub	sp, #20
 8111a34:	af00      	add	r7, sp, #0
 8111a36:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8111a38:	4b22      	ldr	r3, [pc, #136]	; (8111ac4 <SDMMC_GetCmdResp7+0x94>)
 8111a3a:	681b      	ldr	r3, [r3, #0]
 8111a3c:	4a22      	ldr	r2, [pc, #136]	; (8111ac8 <SDMMC_GetCmdResp7+0x98>)
 8111a3e:	fba2 2303 	umull	r2, r3, r2, r3
 8111a42:	0a5b      	lsrs	r3, r3, #9
 8111a44:	f241 3288 	movw	r2, #5000	; 0x1388
 8111a48:	fb02 f303 	mul.w	r3, r2, r3
 8111a4c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8111a4e:	68fb      	ldr	r3, [r7, #12]
 8111a50:	1e5a      	subs	r2, r3, #1
 8111a52:	60fa      	str	r2, [r7, #12]
 8111a54:	2b00      	cmp	r3, #0
 8111a56:	d102      	bne.n	8111a5e <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8111a58:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8111a5c:	e02c      	b.n	8111ab8 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 8111a5e:	687b      	ldr	r3, [r7, #4]
 8111a60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8111a62:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8111a64:	68bb      	ldr	r3, [r7, #8]
 8111a66:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8111a6a:	2b00      	cmp	r3, #0
 8111a6c:	d0ef      	beq.n	8111a4e <SDMMC_GetCmdResp7+0x1e>
 8111a6e:	68bb      	ldr	r3, [r7, #8]
 8111a70:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8111a74:	2b00      	cmp	r3, #0
 8111a76:	d1ea      	bne.n	8111a4e <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8111a78:	687b      	ldr	r3, [r7, #4]
 8111a7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8111a7c:	f003 0304 	and.w	r3, r3, #4
 8111a80:	2b00      	cmp	r3, #0
 8111a82:	d004      	beq.n	8111a8e <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8111a84:	687b      	ldr	r3, [r7, #4]
 8111a86:	2204      	movs	r2, #4
 8111a88:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8111a8a:	2304      	movs	r3, #4
 8111a8c:	e014      	b.n	8111ab8 <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8111a8e:	687b      	ldr	r3, [r7, #4]
 8111a90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8111a92:	f003 0301 	and.w	r3, r3, #1
 8111a96:	2b00      	cmp	r3, #0
 8111a98:	d004      	beq.n	8111aa4 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8111a9a:	687b      	ldr	r3, [r7, #4]
 8111a9c:	2201      	movs	r2, #1
 8111a9e:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8111aa0:	2301      	movs	r3, #1
 8111aa2:	e009      	b.n	8111ab8 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8111aa4:	687b      	ldr	r3, [r7, #4]
 8111aa6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8111aa8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8111aac:	2b00      	cmp	r3, #0
 8111aae:	d002      	beq.n	8111ab6 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8111ab0:	687b      	ldr	r3, [r7, #4]
 8111ab2:	2240      	movs	r2, #64	; 0x40
 8111ab4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8111ab6:	2300      	movs	r3, #0

}
 8111ab8:	4618      	mov	r0, r3
 8111aba:	3714      	adds	r7, #20
 8111abc:	46bd      	mov	sp, r7
 8111abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8111ac2:	4770      	bx	lr
 8111ac4:	10000000 	.word	0x10000000
 8111ac8:	10624dd3 	.word	0x10624dd3

08111acc <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8111acc:	b480      	push	{r7}
 8111ace:	b085      	sub	sp, #20
 8111ad0:	af00      	add	r7, sp, #0
 8111ad2:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8111ad4:	4b11      	ldr	r3, [pc, #68]	; (8111b1c <SDMMC_GetCmdError+0x50>)
 8111ad6:	681b      	ldr	r3, [r3, #0]
 8111ad8:	4a11      	ldr	r2, [pc, #68]	; (8111b20 <SDMMC_GetCmdError+0x54>)
 8111ada:	fba2 2303 	umull	r2, r3, r2, r3
 8111ade:	0a5b      	lsrs	r3, r3, #9
 8111ae0:	f241 3288 	movw	r2, #5000	; 0x1388
 8111ae4:	fb02 f303 	mul.w	r3, r2, r3
 8111ae8:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8111aea:	68fb      	ldr	r3, [r7, #12]
 8111aec:	1e5a      	subs	r2, r3, #1
 8111aee:	60fa      	str	r2, [r7, #12]
 8111af0:	2b00      	cmp	r3, #0
 8111af2:	d102      	bne.n	8111afa <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8111af4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8111af8:	e009      	b.n	8111b0e <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8111afa:	687b      	ldr	r3, [r7, #4]
 8111afc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8111afe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8111b02:	2b00      	cmp	r3, #0
 8111b04:	d0f1      	beq.n	8111aea <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8111b06:	687b      	ldr	r3, [r7, #4]
 8111b08:	4a06      	ldr	r2, [pc, #24]	; (8111b24 <SDMMC_GetCmdError+0x58>)
 8111b0a:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 8111b0c:	2300      	movs	r3, #0
}
 8111b0e:	4618      	mov	r0, r3
 8111b10:	3714      	adds	r7, #20
 8111b12:	46bd      	mov	sp, r7
 8111b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8111b18:	4770      	bx	lr
 8111b1a:	bf00      	nop
 8111b1c:	10000000 	.word	0x10000000
 8111b20:	10624dd3 	.word	0x10624dd3
 8111b24:	002000c5 	.word	0x002000c5

08111b28 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8111b28:	b084      	sub	sp, #16
 8111b2a:	b580      	push	{r7, lr}
 8111b2c:	b084      	sub	sp, #16
 8111b2e:	af00      	add	r7, sp, #0
 8111b30:	6078      	str	r0, [r7, #4]
 8111b32:	f107 001c 	add.w	r0, r7, #28
 8111b36:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8111b3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8111b3c:	2b01      	cmp	r3, #1
 8111b3e:	d122      	bne.n	8111b86 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8111b40:	687b      	ldr	r3, [r7, #4]
 8111b42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8111b44:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8111b48:	687b      	ldr	r3, [r7, #4]
 8111b4a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8111b4c:	687b      	ldr	r3, [r7, #4]
 8111b4e:	68db      	ldr	r3, [r3, #12]
 8111b50:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8111b54:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8111b58:	687a      	ldr	r2, [r7, #4]
 8111b5a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8111b5c:	687b      	ldr	r3, [r7, #4]
 8111b5e:	68db      	ldr	r3, [r3, #12]
 8111b60:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8111b64:	687b      	ldr	r3, [r7, #4]
 8111b66:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8111b68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8111b6a:	2b01      	cmp	r3, #1
 8111b6c:	d105      	bne.n	8111b7a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8111b6e:	687b      	ldr	r3, [r7, #4]
 8111b70:	68db      	ldr	r3, [r3, #12]
 8111b72:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8111b76:	687b      	ldr	r3, [r7, #4]
 8111b78:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8111b7a:	6878      	ldr	r0, [r7, #4]
 8111b7c:	f001 fb04 	bl	8113188 <USB_CoreReset>
 8111b80:	4603      	mov	r3, r0
 8111b82:	73fb      	strb	r3, [r7, #15]
 8111b84:	e01a      	b.n	8111bbc <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8111b86:	687b      	ldr	r3, [r7, #4]
 8111b88:	68db      	ldr	r3, [r3, #12]
 8111b8a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8111b8e:	687b      	ldr	r3, [r7, #4]
 8111b90:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8111b92:	6878      	ldr	r0, [r7, #4]
 8111b94:	f001 faf8 	bl	8113188 <USB_CoreReset>
 8111b98:	4603      	mov	r3, r0
 8111b9a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8111b9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8111b9e:	2b00      	cmp	r3, #0
 8111ba0:	d106      	bne.n	8111bb0 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8111ba2:	687b      	ldr	r3, [r7, #4]
 8111ba4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8111ba6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8111baa:	687b      	ldr	r3, [r7, #4]
 8111bac:	639a      	str	r2, [r3, #56]	; 0x38
 8111bae:	e005      	b.n	8111bbc <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8111bb0:	687b      	ldr	r3, [r7, #4]
 8111bb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8111bb4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8111bb8:	687b      	ldr	r3, [r7, #4]
 8111bba:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8111bbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8111bbe:	2b01      	cmp	r3, #1
 8111bc0:	d118      	bne.n	8111bf4 <USB_CoreInit+0xcc>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8111bc2:	687b      	ldr	r3, [r7, #4]
 8111bc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8111bc6:	b29a      	uxth	r2, r3
 8111bc8:	687b      	ldr	r3, [r7, #4]
 8111bca:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8111bcc:	687b      	ldr	r3, [r7, #4]
 8111bce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8111bd0:	f043 737b 	orr.w	r3, r3, #65798144	; 0x3ec0000
 8111bd4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8111bd8:	687a      	ldr	r2, [r7, #4]
 8111bda:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8111bdc:	687b      	ldr	r3, [r7, #4]
 8111bde:	689b      	ldr	r3, [r3, #8]
 8111be0:	f043 0206 	orr.w	r2, r3, #6
 8111be4:	687b      	ldr	r3, [r7, #4]
 8111be6:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8111be8:	687b      	ldr	r3, [r7, #4]
 8111bea:	689b      	ldr	r3, [r3, #8]
 8111bec:	f043 0220 	orr.w	r2, r3, #32
 8111bf0:	687b      	ldr	r3, [r7, #4]
 8111bf2:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8111bf4:	7bfb      	ldrb	r3, [r7, #15]
}
 8111bf6:	4618      	mov	r0, r3
 8111bf8:	3710      	adds	r7, #16
 8111bfa:	46bd      	mov	sp, r7
 8111bfc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8111c00:	b004      	add	sp, #16
 8111c02:	4770      	bx	lr

08111c04 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8111c04:	b480      	push	{r7}
 8111c06:	b087      	sub	sp, #28
 8111c08:	af00      	add	r7, sp, #0
 8111c0a:	60f8      	str	r0, [r7, #12]
 8111c0c:	60b9      	str	r1, [r7, #8]
 8111c0e:	4613      	mov	r3, r2
 8111c10:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8111c12:	79fb      	ldrb	r3, [r7, #7]
 8111c14:	2b02      	cmp	r3, #2
 8111c16:	d165      	bne.n	8111ce4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8111c18:	68bb      	ldr	r3, [r7, #8]
 8111c1a:	4a41      	ldr	r2, [pc, #260]	; (8111d20 <USB_SetTurnaroundTime+0x11c>)
 8111c1c:	4293      	cmp	r3, r2
 8111c1e:	d906      	bls.n	8111c2e <USB_SetTurnaroundTime+0x2a>
 8111c20:	68bb      	ldr	r3, [r7, #8]
 8111c22:	4a40      	ldr	r2, [pc, #256]	; (8111d24 <USB_SetTurnaroundTime+0x120>)
 8111c24:	4293      	cmp	r3, r2
 8111c26:	d202      	bcs.n	8111c2e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8111c28:	230f      	movs	r3, #15
 8111c2a:	617b      	str	r3, [r7, #20]
 8111c2c:	e062      	b.n	8111cf4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8111c2e:	68bb      	ldr	r3, [r7, #8]
 8111c30:	4a3c      	ldr	r2, [pc, #240]	; (8111d24 <USB_SetTurnaroundTime+0x120>)
 8111c32:	4293      	cmp	r3, r2
 8111c34:	d306      	bcc.n	8111c44 <USB_SetTurnaroundTime+0x40>
 8111c36:	68bb      	ldr	r3, [r7, #8]
 8111c38:	4a3b      	ldr	r2, [pc, #236]	; (8111d28 <USB_SetTurnaroundTime+0x124>)
 8111c3a:	4293      	cmp	r3, r2
 8111c3c:	d202      	bcs.n	8111c44 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8111c3e:	230e      	movs	r3, #14
 8111c40:	617b      	str	r3, [r7, #20]
 8111c42:	e057      	b.n	8111cf4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8111c44:	68bb      	ldr	r3, [r7, #8]
 8111c46:	4a38      	ldr	r2, [pc, #224]	; (8111d28 <USB_SetTurnaroundTime+0x124>)
 8111c48:	4293      	cmp	r3, r2
 8111c4a:	d306      	bcc.n	8111c5a <USB_SetTurnaroundTime+0x56>
 8111c4c:	68bb      	ldr	r3, [r7, #8]
 8111c4e:	4a37      	ldr	r2, [pc, #220]	; (8111d2c <USB_SetTurnaroundTime+0x128>)
 8111c50:	4293      	cmp	r3, r2
 8111c52:	d202      	bcs.n	8111c5a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8111c54:	230d      	movs	r3, #13
 8111c56:	617b      	str	r3, [r7, #20]
 8111c58:	e04c      	b.n	8111cf4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8111c5a:	68bb      	ldr	r3, [r7, #8]
 8111c5c:	4a33      	ldr	r2, [pc, #204]	; (8111d2c <USB_SetTurnaroundTime+0x128>)
 8111c5e:	4293      	cmp	r3, r2
 8111c60:	d306      	bcc.n	8111c70 <USB_SetTurnaroundTime+0x6c>
 8111c62:	68bb      	ldr	r3, [r7, #8]
 8111c64:	4a32      	ldr	r2, [pc, #200]	; (8111d30 <USB_SetTurnaroundTime+0x12c>)
 8111c66:	4293      	cmp	r3, r2
 8111c68:	d802      	bhi.n	8111c70 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8111c6a:	230c      	movs	r3, #12
 8111c6c:	617b      	str	r3, [r7, #20]
 8111c6e:	e041      	b.n	8111cf4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8111c70:	68bb      	ldr	r3, [r7, #8]
 8111c72:	4a2f      	ldr	r2, [pc, #188]	; (8111d30 <USB_SetTurnaroundTime+0x12c>)
 8111c74:	4293      	cmp	r3, r2
 8111c76:	d906      	bls.n	8111c86 <USB_SetTurnaroundTime+0x82>
 8111c78:	68bb      	ldr	r3, [r7, #8]
 8111c7a:	4a2e      	ldr	r2, [pc, #184]	; (8111d34 <USB_SetTurnaroundTime+0x130>)
 8111c7c:	4293      	cmp	r3, r2
 8111c7e:	d802      	bhi.n	8111c86 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8111c80:	230b      	movs	r3, #11
 8111c82:	617b      	str	r3, [r7, #20]
 8111c84:	e036      	b.n	8111cf4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8111c86:	68bb      	ldr	r3, [r7, #8]
 8111c88:	4a2a      	ldr	r2, [pc, #168]	; (8111d34 <USB_SetTurnaroundTime+0x130>)
 8111c8a:	4293      	cmp	r3, r2
 8111c8c:	d906      	bls.n	8111c9c <USB_SetTurnaroundTime+0x98>
 8111c8e:	68bb      	ldr	r3, [r7, #8]
 8111c90:	4a29      	ldr	r2, [pc, #164]	; (8111d38 <USB_SetTurnaroundTime+0x134>)
 8111c92:	4293      	cmp	r3, r2
 8111c94:	d802      	bhi.n	8111c9c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8111c96:	230a      	movs	r3, #10
 8111c98:	617b      	str	r3, [r7, #20]
 8111c9a:	e02b      	b.n	8111cf4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8111c9c:	68bb      	ldr	r3, [r7, #8]
 8111c9e:	4a26      	ldr	r2, [pc, #152]	; (8111d38 <USB_SetTurnaroundTime+0x134>)
 8111ca0:	4293      	cmp	r3, r2
 8111ca2:	d906      	bls.n	8111cb2 <USB_SetTurnaroundTime+0xae>
 8111ca4:	68bb      	ldr	r3, [r7, #8]
 8111ca6:	4a25      	ldr	r2, [pc, #148]	; (8111d3c <USB_SetTurnaroundTime+0x138>)
 8111ca8:	4293      	cmp	r3, r2
 8111caa:	d202      	bcs.n	8111cb2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8111cac:	2309      	movs	r3, #9
 8111cae:	617b      	str	r3, [r7, #20]
 8111cb0:	e020      	b.n	8111cf4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8111cb2:	68bb      	ldr	r3, [r7, #8]
 8111cb4:	4a21      	ldr	r2, [pc, #132]	; (8111d3c <USB_SetTurnaroundTime+0x138>)
 8111cb6:	4293      	cmp	r3, r2
 8111cb8:	d306      	bcc.n	8111cc8 <USB_SetTurnaroundTime+0xc4>
 8111cba:	68bb      	ldr	r3, [r7, #8]
 8111cbc:	4a20      	ldr	r2, [pc, #128]	; (8111d40 <USB_SetTurnaroundTime+0x13c>)
 8111cbe:	4293      	cmp	r3, r2
 8111cc0:	d802      	bhi.n	8111cc8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8111cc2:	2308      	movs	r3, #8
 8111cc4:	617b      	str	r3, [r7, #20]
 8111cc6:	e015      	b.n	8111cf4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8111cc8:	68bb      	ldr	r3, [r7, #8]
 8111cca:	4a1d      	ldr	r2, [pc, #116]	; (8111d40 <USB_SetTurnaroundTime+0x13c>)
 8111ccc:	4293      	cmp	r3, r2
 8111cce:	d906      	bls.n	8111cde <USB_SetTurnaroundTime+0xda>
 8111cd0:	68bb      	ldr	r3, [r7, #8]
 8111cd2:	4a1c      	ldr	r2, [pc, #112]	; (8111d44 <USB_SetTurnaroundTime+0x140>)
 8111cd4:	4293      	cmp	r3, r2
 8111cd6:	d202      	bcs.n	8111cde <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8111cd8:	2307      	movs	r3, #7
 8111cda:	617b      	str	r3, [r7, #20]
 8111cdc:	e00a      	b.n	8111cf4 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8111cde:	2306      	movs	r3, #6
 8111ce0:	617b      	str	r3, [r7, #20]
 8111ce2:	e007      	b.n	8111cf4 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8111ce4:	79fb      	ldrb	r3, [r7, #7]
 8111ce6:	2b00      	cmp	r3, #0
 8111ce8:	d102      	bne.n	8111cf0 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8111cea:	2309      	movs	r3, #9
 8111cec:	617b      	str	r3, [r7, #20]
 8111cee:	e001      	b.n	8111cf4 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8111cf0:	2309      	movs	r3, #9
 8111cf2:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8111cf4:	68fb      	ldr	r3, [r7, #12]
 8111cf6:	68db      	ldr	r3, [r3, #12]
 8111cf8:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8111cfc:	68fb      	ldr	r3, [r7, #12]
 8111cfe:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8111d00:	68fb      	ldr	r3, [r7, #12]
 8111d02:	68da      	ldr	r2, [r3, #12]
 8111d04:	697b      	ldr	r3, [r7, #20]
 8111d06:	029b      	lsls	r3, r3, #10
 8111d08:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8111d0c:	431a      	orrs	r2, r3
 8111d0e:	68fb      	ldr	r3, [r7, #12]
 8111d10:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8111d12:	2300      	movs	r3, #0
}
 8111d14:	4618      	mov	r0, r3
 8111d16:	371c      	adds	r7, #28
 8111d18:	46bd      	mov	sp, r7
 8111d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8111d1e:	4770      	bx	lr
 8111d20:	00d8acbf 	.word	0x00d8acbf
 8111d24:	00e4e1c0 	.word	0x00e4e1c0
 8111d28:	00f42400 	.word	0x00f42400
 8111d2c:	01067380 	.word	0x01067380
 8111d30:	011a499f 	.word	0x011a499f
 8111d34:	01312cff 	.word	0x01312cff
 8111d38:	014ca43f 	.word	0x014ca43f
 8111d3c:	016e3600 	.word	0x016e3600
 8111d40:	01a6ab1f 	.word	0x01a6ab1f
 8111d44:	01e84800 	.word	0x01e84800

08111d48 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8111d48:	b480      	push	{r7}
 8111d4a:	b083      	sub	sp, #12
 8111d4c:	af00      	add	r7, sp, #0
 8111d4e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8111d50:	687b      	ldr	r3, [r7, #4]
 8111d52:	689b      	ldr	r3, [r3, #8]
 8111d54:	f043 0201 	orr.w	r2, r3, #1
 8111d58:	687b      	ldr	r3, [r7, #4]
 8111d5a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8111d5c:	2300      	movs	r3, #0
}
 8111d5e:	4618      	mov	r0, r3
 8111d60:	370c      	adds	r7, #12
 8111d62:	46bd      	mov	sp, r7
 8111d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8111d68:	4770      	bx	lr

08111d6a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8111d6a:	b480      	push	{r7}
 8111d6c:	b083      	sub	sp, #12
 8111d6e:	af00      	add	r7, sp, #0
 8111d70:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8111d72:	687b      	ldr	r3, [r7, #4]
 8111d74:	689b      	ldr	r3, [r3, #8]
 8111d76:	f023 0201 	bic.w	r2, r3, #1
 8111d7a:	687b      	ldr	r3, [r7, #4]
 8111d7c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8111d7e:	2300      	movs	r3, #0
}
 8111d80:	4618      	mov	r0, r3
 8111d82:	370c      	adds	r7, #12
 8111d84:	46bd      	mov	sp, r7
 8111d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8111d8a:	4770      	bx	lr

08111d8c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8111d8c:	b580      	push	{r7, lr}
 8111d8e:	b082      	sub	sp, #8
 8111d90:	af00      	add	r7, sp, #0
 8111d92:	6078      	str	r0, [r7, #4]
 8111d94:	460b      	mov	r3, r1
 8111d96:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8111d98:	687b      	ldr	r3, [r7, #4]
 8111d9a:	68db      	ldr	r3, [r3, #12]
 8111d9c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8111da0:	687b      	ldr	r3, [r7, #4]
 8111da2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8111da4:	78fb      	ldrb	r3, [r7, #3]
 8111da6:	2b01      	cmp	r3, #1
 8111da8:	d106      	bne.n	8111db8 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8111daa:	687b      	ldr	r3, [r7, #4]
 8111dac:	68db      	ldr	r3, [r3, #12]
 8111dae:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8111db2:	687b      	ldr	r3, [r7, #4]
 8111db4:	60da      	str	r2, [r3, #12]
 8111db6:	e00b      	b.n	8111dd0 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8111db8:	78fb      	ldrb	r3, [r7, #3]
 8111dba:	2b00      	cmp	r3, #0
 8111dbc:	d106      	bne.n	8111dcc <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8111dbe:	687b      	ldr	r3, [r7, #4]
 8111dc0:	68db      	ldr	r3, [r3, #12]
 8111dc2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8111dc6:	687b      	ldr	r3, [r7, #4]
 8111dc8:	60da      	str	r2, [r3, #12]
 8111dca:	e001      	b.n	8111dd0 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8111dcc:	2301      	movs	r3, #1
 8111dce:	e003      	b.n	8111dd8 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8111dd0:	2032      	movs	r0, #50	; 0x32
 8111dd2:	f7f0 fe1f 	bl	8102a14 <HAL_Delay>

  return HAL_OK;
 8111dd6:	2300      	movs	r3, #0
}
 8111dd8:	4618      	mov	r0, r3
 8111dda:	3708      	adds	r7, #8
 8111ddc:	46bd      	mov	sp, r7
 8111dde:	bd80      	pop	{r7, pc}

08111de0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8111de0:	b084      	sub	sp, #16
 8111de2:	b580      	push	{r7, lr}
 8111de4:	b086      	sub	sp, #24
 8111de6:	af00      	add	r7, sp, #0
 8111de8:	6078      	str	r0, [r7, #4]
 8111dea:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8111dee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8111df2:	2300      	movs	r3, #0
 8111df4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8111df6:	687b      	ldr	r3, [r7, #4]
 8111df8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8111dfa:	2300      	movs	r3, #0
 8111dfc:	613b      	str	r3, [r7, #16]
 8111dfe:	e009      	b.n	8111e14 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8111e00:	687a      	ldr	r2, [r7, #4]
 8111e02:	693b      	ldr	r3, [r7, #16]
 8111e04:	3340      	adds	r3, #64	; 0x40
 8111e06:	009b      	lsls	r3, r3, #2
 8111e08:	4413      	add	r3, r2
 8111e0a:	2200      	movs	r2, #0
 8111e0c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8111e0e:	693b      	ldr	r3, [r7, #16]
 8111e10:	3301      	adds	r3, #1
 8111e12:	613b      	str	r3, [r7, #16]
 8111e14:	693b      	ldr	r3, [r7, #16]
 8111e16:	2b0e      	cmp	r3, #14
 8111e18:	d9f2      	bls.n	8111e00 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8111e1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8111e1c:	2b00      	cmp	r3, #0
 8111e1e:	d11c      	bne.n	8111e5a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8111e20:	68fb      	ldr	r3, [r7, #12]
 8111e22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8111e26:	685b      	ldr	r3, [r3, #4]
 8111e28:	68fa      	ldr	r2, [r7, #12]
 8111e2a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8111e2e:	f043 0302 	orr.w	r3, r3, #2
 8111e32:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8111e34:	687b      	ldr	r3, [r7, #4]
 8111e36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8111e38:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8111e3c:	687b      	ldr	r3, [r7, #4]
 8111e3e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8111e40:	687b      	ldr	r3, [r7, #4]
 8111e42:	681b      	ldr	r3, [r3, #0]
 8111e44:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8111e48:	687b      	ldr	r3, [r7, #4]
 8111e4a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8111e4c:	687b      	ldr	r3, [r7, #4]
 8111e4e:	681b      	ldr	r3, [r3, #0]
 8111e50:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8111e54:	687b      	ldr	r3, [r7, #4]
 8111e56:	601a      	str	r2, [r3, #0]
 8111e58:	e005      	b.n	8111e66 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8111e5a:	687b      	ldr	r3, [r7, #4]
 8111e5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8111e5e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8111e62:	687b      	ldr	r3, [r7, #4]
 8111e64:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8111e66:	68fb      	ldr	r3, [r7, #12]
 8111e68:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8111e6c:	461a      	mov	r2, r3
 8111e6e:	2300      	movs	r3, #0
 8111e70:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8111e72:	68fb      	ldr	r3, [r7, #12]
 8111e74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8111e78:	4619      	mov	r1, r3
 8111e7a:	68fb      	ldr	r3, [r7, #12]
 8111e7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8111e80:	461a      	mov	r2, r3
 8111e82:	680b      	ldr	r3, [r1, #0]
 8111e84:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8111e86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8111e88:	2b01      	cmp	r3, #1
 8111e8a:	d10c      	bne.n	8111ea6 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8111e8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8111e8e:	2b00      	cmp	r3, #0
 8111e90:	d104      	bne.n	8111e9c <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8111e92:	2100      	movs	r1, #0
 8111e94:	6878      	ldr	r0, [r7, #4]
 8111e96:	f000 f949 	bl	811212c <USB_SetDevSpeed>
 8111e9a:	e008      	b.n	8111eae <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8111e9c:	2101      	movs	r1, #1
 8111e9e:	6878      	ldr	r0, [r7, #4]
 8111ea0:	f000 f944 	bl	811212c <USB_SetDevSpeed>
 8111ea4:	e003      	b.n	8111eae <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8111ea6:	2103      	movs	r1, #3
 8111ea8:	6878      	ldr	r0, [r7, #4]
 8111eaa:	f000 f93f 	bl	811212c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8111eae:	2110      	movs	r1, #16
 8111eb0:	6878      	ldr	r0, [r7, #4]
 8111eb2:	f000 f8f3 	bl	811209c <USB_FlushTxFifo>
 8111eb6:	4603      	mov	r3, r0
 8111eb8:	2b00      	cmp	r3, #0
 8111eba:	d001      	beq.n	8111ec0 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8111ebc:	2301      	movs	r3, #1
 8111ebe:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8111ec0:	6878      	ldr	r0, [r7, #4]
 8111ec2:	f000 f911 	bl	81120e8 <USB_FlushRxFifo>
 8111ec6:	4603      	mov	r3, r0
 8111ec8:	2b00      	cmp	r3, #0
 8111eca:	d001      	beq.n	8111ed0 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8111ecc:	2301      	movs	r3, #1
 8111ece:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8111ed0:	68fb      	ldr	r3, [r7, #12]
 8111ed2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8111ed6:	461a      	mov	r2, r3
 8111ed8:	2300      	movs	r3, #0
 8111eda:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8111edc:	68fb      	ldr	r3, [r7, #12]
 8111ede:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8111ee2:	461a      	mov	r2, r3
 8111ee4:	2300      	movs	r3, #0
 8111ee6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8111ee8:	68fb      	ldr	r3, [r7, #12]
 8111eea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8111eee:	461a      	mov	r2, r3
 8111ef0:	2300      	movs	r3, #0
 8111ef2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8111ef4:	2300      	movs	r3, #0
 8111ef6:	613b      	str	r3, [r7, #16]
 8111ef8:	e043      	b.n	8111f82 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8111efa:	693b      	ldr	r3, [r7, #16]
 8111efc:	015a      	lsls	r2, r3, #5
 8111efe:	68fb      	ldr	r3, [r7, #12]
 8111f00:	4413      	add	r3, r2
 8111f02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8111f06:	681b      	ldr	r3, [r3, #0]
 8111f08:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8111f0c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8111f10:	d118      	bne.n	8111f44 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8111f12:	693b      	ldr	r3, [r7, #16]
 8111f14:	2b00      	cmp	r3, #0
 8111f16:	d10a      	bne.n	8111f2e <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8111f18:	693b      	ldr	r3, [r7, #16]
 8111f1a:	015a      	lsls	r2, r3, #5
 8111f1c:	68fb      	ldr	r3, [r7, #12]
 8111f1e:	4413      	add	r3, r2
 8111f20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8111f24:	461a      	mov	r2, r3
 8111f26:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8111f2a:	6013      	str	r3, [r2, #0]
 8111f2c:	e013      	b.n	8111f56 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8111f2e:	693b      	ldr	r3, [r7, #16]
 8111f30:	015a      	lsls	r2, r3, #5
 8111f32:	68fb      	ldr	r3, [r7, #12]
 8111f34:	4413      	add	r3, r2
 8111f36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8111f3a:	461a      	mov	r2, r3
 8111f3c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8111f40:	6013      	str	r3, [r2, #0]
 8111f42:	e008      	b.n	8111f56 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8111f44:	693b      	ldr	r3, [r7, #16]
 8111f46:	015a      	lsls	r2, r3, #5
 8111f48:	68fb      	ldr	r3, [r7, #12]
 8111f4a:	4413      	add	r3, r2
 8111f4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8111f50:	461a      	mov	r2, r3
 8111f52:	2300      	movs	r3, #0
 8111f54:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8111f56:	693b      	ldr	r3, [r7, #16]
 8111f58:	015a      	lsls	r2, r3, #5
 8111f5a:	68fb      	ldr	r3, [r7, #12]
 8111f5c:	4413      	add	r3, r2
 8111f5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8111f62:	461a      	mov	r2, r3
 8111f64:	2300      	movs	r3, #0
 8111f66:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8111f68:	693b      	ldr	r3, [r7, #16]
 8111f6a:	015a      	lsls	r2, r3, #5
 8111f6c:	68fb      	ldr	r3, [r7, #12]
 8111f6e:	4413      	add	r3, r2
 8111f70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8111f74:	461a      	mov	r2, r3
 8111f76:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8111f7a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8111f7c:	693b      	ldr	r3, [r7, #16]
 8111f7e:	3301      	adds	r3, #1
 8111f80:	613b      	str	r3, [r7, #16]
 8111f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8111f84:	693a      	ldr	r2, [r7, #16]
 8111f86:	429a      	cmp	r2, r3
 8111f88:	d3b7      	bcc.n	8111efa <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8111f8a:	2300      	movs	r3, #0
 8111f8c:	613b      	str	r3, [r7, #16]
 8111f8e:	e043      	b.n	8112018 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8111f90:	693b      	ldr	r3, [r7, #16]
 8111f92:	015a      	lsls	r2, r3, #5
 8111f94:	68fb      	ldr	r3, [r7, #12]
 8111f96:	4413      	add	r3, r2
 8111f98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8111f9c:	681b      	ldr	r3, [r3, #0]
 8111f9e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8111fa2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8111fa6:	d118      	bne.n	8111fda <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8111fa8:	693b      	ldr	r3, [r7, #16]
 8111faa:	2b00      	cmp	r3, #0
 8111fac:	d10a      	bne.n	8111fc4 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8111fae:	693b      	ldr	r3, [r7, #16]
 8111fb0:	015a      	lsls	r2, r3, #5
 8111fb2:	68fb      	ldr	r3, [r7, #12]
 8111fb4:	4413      	add	r3, r2
 8111fb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8111fba:	461a      	mov	r2, r3
 8111fbc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8111fc0:	6013      	str	r3, [r2, #0]
 8111fc2:	e013      	b.n	8111fec <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8111fc4:	693b      	ldr	r3, [r7, #16]
 8111fc6:	015a      	lsls	r2, r3, #5
 8111fc8:	68fb      	ldr	r3, [r7, #12]
 8111fca:	4413      	add	r3, r2
 8111fcc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8111fd0:	461a      	mov	r2, r3
 8111fd2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8111fd6:	6013      	str	r3, [r2, #0]
 8111fd8:	e008      	b.n	8111fec <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8111fda:	693b      	ldr	r3, [r7, #16]
 8111fdc:	015a      	lsls	r2, r3, #5
 8111fde:	68fb      	ldr	r3, [r7, #12]
 8111fe0:	4413      	add	r3, r2
 8111fe2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8111fe6:	461a      	mov	r2, r3
 8111fe8:	2300      	movs	r3, #0
 8111fea:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8111fec:	693b      	ldr	r3, [r7, #16]
 8111fee:	015a      	lsls	r2, r3, #5
 8111ff0:	68fb      	ldr	r3, [r7, #12]
 8111ff2:	4413      	add	r3, r2
 8111ff4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8111ff8:	461a      	mov	r2, r3
 8111ffa:	2300      	movs	r3, #0
 8111ffc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8111ffe:	693b      	ldr	r3, [r7, #16]
 8112000:	015a      	lsls	r2, r3, #5
 8112002:	68fb      	ldr	r3, [r7, #12]
 8112004:	4413      	add	r3, r2
 8112006:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 811200a:	461a      	mov	r2, r3
 811200c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8112010:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8112012:	693b      	ldr	r3, [r7, #16]
 8112014:	3301      	adds	r3, #1
 8112016:	613b      	str	r3, [r7, #16]
 8112018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 811201a:	693a      	ldr	r2, [r7, #16]
 811201c:	429a      	cmp	r2, r3
 811201e:	d3b7      	bcc.n	8111f90 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8112020:	68fb      	ldr	r3, [r7, #12]
 8112022:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8112026:	691b      	ldr	r3, [r3, #16]
 8112028:	68fa      	ldr	r2, [r7, #12]
 811202a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 811202e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8112032:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8112034:	687b      	ldr	r3, [r7, #4]
 8112036:	2200      	movs	r2, #0
 8112038:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 811203a:	687b      	ldr	r3, [r7, #4]
 811203c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8112040:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8112042:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8112044:	2b00      	cmp	r3, #0
 8112046:	d105      	bne.n	8112054 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8112048:	687b      	ldr	r3, [r7, #4]
 811204a:	699b      	ldr	r3, [r3, #24]
 811204c:	f043 0210 	orr.w	r2, r3, #16
 8112050:	687b      	ldr	r3, [r7, #4]
 8112052:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8112054:	687b      	ldr	r3, [r7, #4]
 8112056:	699a      	ldr	r2, [r3, #24]
 8112058:	4b0f      	ldr	r3, [pc, #60]	; (8112098 <USB_DevInit+0x2b8>)
 811205a:	4313      	orrs	r3, r2
 811205c:	687a      	ldr	r2, [r7, #4]
 811205e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8112060:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8112062:	2b00      	cmp	r3, #0
 8112064:	d005      	beq.n	8112072 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8112066:	687b      	ldr	r3, [r7, #4]
 8112068:	699b      	ldr	r3, [r3, #24]
 811206a:	f043 0208 	orr.w	r2, r3, #8
 811206e:	687b      	ldr	r3, [r7, #4]
 8112070:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8112072:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8112074:	2b01      	cmp	r3, #1
 8112076:	d107      	bne.n	8112088 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8112078:	687b      	ldr	r3, [r7, #4]
 811207a:	699b      	ldr	r3, [r3, #24]
 811207c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8112080:	f043 0304 	orr.w	r3, r3, #4
 8112084:	687a      	ldr	r2, [r7, #4]
 8112086:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8112088:	7dfb      	ldrb	r3, [r7, #23]
}
 811208a:	4618      	mov	r0, r3
 811208c:	3718      	adds	r7, #24
 811208e:	46bd      	mov	sp, r7
 8112090:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8112094:	b004      	add	sp, #16
 8112096:	4770      	bx	lr
 8112098:	803c3800 	.word	0x803c3800

0811209c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 811209c:	b480      	push	{r7}
 811209e:	b085      	sub	sp, #20
 81120a0:	af00      	add	r7, sp, #0
 81120a2:	6078      	str	r0, [r7, #4]
 81120a4:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 81120a6:	2300      	movs	r3, #0
 81120a8:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 81120aa:	683b      	ldr	r3, [r7, #0]
 81120ac:	019b      	lsls	r3, r3, #6
 81120ae:	f043 0220 	orr.w	r2, r3, #32
 81120b2:	687b      	ldr	r3, [r7, #4]
 81120b4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 81120b6:	68fb      	ldr	r3, [r7, #12]
 81120b8:	3301      	adds	r3, #1
 81120ba:	60fb      	str	r3, [r7, #12]
 81120bc:	68fb      	ldr	r3, [r7, #12]
 81120be:	4a09      	ldr	r2, [pc, #36]	; (81120e4 <USB_FlushTxFifo+0x48>)
 81120c0:	4293      	cmp	r3, r2
 81120c2:	d901      	bls.n	81120c8 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 81120c4:	2303      	movs	r3, #3
 81120c6:	e006      	b.n	81120d6 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 81120c8:	687b      	ldr	r3, [r7, #4]
 81120ca:	691b      	ldr	r3, [r3, #16]
 81120cc:	f003 0320 	and.w	r3, r3, #32
 81120d0:	2b20      	cmp	r3, #32
 81120d2:	d0f0      	beq.n	81120b6 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 81120d4:	2300      	movs	r3, #0
}
 81120d6:	4618      	mov	r0, r3
 81120d8:	3714      	adds	r7, #20
 81120da:	46bd      	mov	sp, r7
 81120dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 81120e0:	4770      	bx	lr
 81120e2:	bf00      	nop
 81120e4:	00030d40 	.word	0x00030d40

081120e8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 81120e8:	b480      	push	{r7}
 81120ea:	b085      	sub	sp, #20
 81120ec:	af00      	add	r7, sp, #0
 81120ee:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 81120f0:	2300      	movs	r3, #0
 81120f2:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 81120f4:	687b      	ldr	r3, [r7, #4]
 81120f6:	2210      	movs	r2, #16
 81120f8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 81120fa:	68fb      	ldr	r3, [r7, #12]
 81120fc:	3301      	adds	r3, #1
 81120fe:	60fb      	str	r3, [r7, #12]
 8112100:	68fb      	ldr	r3, [r7, #12]
 8112102:	4a09      	ldr	r2, [pc, #36]	; (8112128 <USB_FlushRxFifo+0x40>)
 8112104:	4293      	cmp	r3, r2
 8112106:	d901      	bls.n	811210c <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8112108:	2303      	movs	r3, #3
 811210a:	e006      	b.n	811211a <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 811210c:	687b      	ldr	r3, [r7, #4]
 811210e:	691b      	ldr	r3, [r3, #16]
 8112110:	f003 0310 	and.w	r3, r3, #16
 8112114:	2b10      	cmp	r3, #16
 8112116:	d0f0      	beq.n	81120fa <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8112118:	2300      	movs	r3, #0
}
 811211a:	4618      	mov	r0, r3
 811211c:	3714      	adds	r7, #20
 811211e:	46bd      	mov	sp, r7
 8112120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8112124:	4770      	bx	lr
 8112126:	bf00      	nop
 8112128:	00030d40 	.word	0x00030d40

0811212c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 811212c:	b480      	push	{r7}
 811212e:	b085      	sub	sp, #20
 8112130:	af00      	add	r7, sp, #0
 8112132:	6078      	str	r0, [r7, #4]
 8112134:	460b      	mov	r3, r1
 8112136:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8112138:	687b      	ldr	r3, [r7, #4]
 811213a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 811213c:	68fb      	ldr	r3, [r7, #12]
 811213e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8112142:	681a      	ldr	r2, [r3, #0]
 8112144:	78fb      	ldrb	r3, [r7, #3]
 8112146:	68f9      	ldr	r1, [r7, #12]
 8112148:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 811214c:	4313      	orrs	r3, r2
 811214e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8112150:	2300      	movs	r3, #0
}
 8112152:	4618      	mov	r0, r3
 8112154:	3714      	adds	r7, #20
 8112156:	46bd      	mov	sp, r7
 8112158:	f85d 7b04 	ldr.w	r7, [sp], #4
 811215c:	4770      	bx	lr

0811215e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 811215e:	b480      	push	{r7}
 8112160:	b087      	sub	sp, #28
 8112162:	af00      	add	r7, sp, #0
 8112164:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8112166:	687b      	ldr	r3, [r7, #4]
 8112168:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 811216a:	693b      	ldr	r3, [r7, #16]
 811216c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8112170:	689b      	ldr	r3, [r3, #8]
 8112172:	f003 0306 	and.w	r3, r3, #6
 8112176:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8112178:	68fb      	ldr	r3, [r7, #12]
 811217a:	2b00      	cmp	r3, #0
 811217c:	d102      	bne.n	8112184 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 811217e:	2300      	movs	r3, #0
 8112180:	75fb      	strb	r3, [r7, #23]
 8112182:	e00a      	b.n	811219a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8112184:	68fb      	ldr	r3, [r7, #12]
 8112186:	2b02      	cmp	r3, #2
 8112188:	d002      	beq.n	8112190 <USB_GetDevSpeed+0x32>
 811218a:	68fb      	ldr	r3, [r7, #12]
 811218c:	2b06      	cmp	r3, #6
 811218e:	d102      	bne.n	8112196 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8112190:	2302      	movs	r3, #2
 8112192:	75fb      	strb	r3, [r7, #23]
 8112194:	e001      	b.n	811219a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8112196:	230f      	movs	r3, #15
 8112198:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 811219a:	7dfb      	ldrb	r3, [r7, #23]
}
 811219c:	4618      	mov	r0, r3
 811219e:	371c      	adds	r7, #28
 81121a0:	46bd      	mov	sp, r7
 81121a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81121a6:	4770      	bx	lr

081121a8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 81121a8:	b480      	push	{r7}
 81121aa:	b085      	sub	sp, #20
 81121ac:	af00      	add	r7, sp, #0
 81121ae:	6078      	str	r0, [r7, #4]
 81121b0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 81121b2:	687b      	ldr	r3, [r7, #4]
 81121b4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 81121b6:	683b      	ldr	r3, [r7, #0]
 81121b8:	781b      	ldrb	r3, [r3, #0]
 81121ba:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 81121bc:	683b      	ldr	r3, [r7, #0]
 81121be:	785b      	ldrb	r3, [r3, #1]
 81121c0:	2b01      	cmp	r3, #1
 81121c2:	d13a      	bne.n	811223a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 81121c4:	68fb      	ldr	r3, [r7, #12]
 81121c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 81121ca:	69da      	ldr	r2, [r3, #28]
 81121cc:	683b      	ldr	r3, [r7, #0]
 81121ce:	781b      	ldrb	r3, [r3, #0]
 81121d0:	f003 030f 	and.w	r3, r3, #15
 81121d4:	2101      	movs	r1, #1
 81121d6:	fa01 f303 	lsl.w	r3, r1, r3
 81121da:	b29b      	uxth	r3, r3
 81121dc:	68f9      	ldr	r1, [r7, #12]
 81121de:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 81121e2:	4313      	orrs	r3, r2
 81121e4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 81121e6:	68bb      	ldr	r3, [r7, #8]
 81121e8:	015a      	lsls	r2, r3, #5
 81121ea:	68fb      	ldr	r3, [r7, #12]
 81121ec:	4413      	add	r3, r2
 81121ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 81121f2:	681b      	ldr	r3, [r3, #0]
 81121f4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 81121f8:	2b00      	cmp	r3, #0
 81121fa:	d155      	bne.n	81122a8 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 81121fc:	68bb      	ldr	r3, [r7, #8]
 81121fe:	015a      	lsls	r2, r3, #5
 8112200:	68fb      	ldr	r3, [r7, #12]
 8112202:	4413      	add	r3, r2
 8112204:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8112208:	681a      	ldr	r2, [r3, #0]
 811220a:	683b      	ldr	r3, [r7, #0]
 811220c:	689b      	ldr	r3, [r3, #8]
 811220e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8112212:	683b      	ldr	r3, [r7, #0]
 8112214:	78db      	ldrb	r3, [r3, #3]
 8112216:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8112218:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 811221a:	68bb      	ldr	r3, [r7, #8]
 811221c:	059b      	lsls	r3, r3, #22
 811221e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8112220:	4313      	orrs	r3, r2
 8112222:	68ba      	ldr	r2, [r7, #8]
 8112224:	0151      	lsls	r1, r2, #5
 8112226:	68fa      	ldr	r2, [r7, #12]
 8112228:	440a      	add	r2, r1
 811222a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 811222e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8112232:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8112236:	6013      	str	r3, [r2, #0]
 8112238:	e036      	b.n	81122a8 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 811223a:	68fb      	ldr	r3, [r7, #12]
 811223c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8112240:	69da      	ldr	r2, [r3, #28]
 8112242:	683b      	ldr	r3, [r7, #0]
 8112244:	781b      	ldrb	r3, [r3, #0]
 8112246:	f003 030f 	and.w	r3, r3, #15
 811224a:	2101      	movs	r1, #1
 811224c:	fa01 f303 	lsl.w	r3, r1, r3
 8112250:	041b      	lsls	r3, r3, #16
 8112252:	68f9      	ldr	r1, [r7, #12]
 8112254:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8112258:	4313      	orrs	r3, r2
 811225a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 811225c:	68bb      	ldr	r3, [r7, #8]
 811225e:	015a      	lsls	r2, r3, #5
 8112260:	68fb      	ldr	r3, [r7, #12]
 8112262:	4413      	add	r3, r2
 8112264:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8112268:	681b      	ldr	r3, [r3, #0]
 811226a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 811226e:	2b00      	cmp	r3, #0
 8112270:	d11a      	bne.n	81122a8 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8112272:	68bb      	ldr	r3, [r7, #8]
 8112274:	015a      	lsls	r2, r3, #5
 8112276:	68fb      	ldr	r3, [r7, #12]
 8112278:	4413      	add	r3, r2
 811227a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 811227e:	681a      	ldr	r2, [r3, #0]
 8112280:	683b      	ldr	r3, [r7, #0]
 8112282:	689b      	ldr	r3, [r3, #8]
 8112284:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8112288:	683b      	ldr	r3, [r7, #0]
 811228a:	78db      	ldrb	r3, [r3, #3]
 811228c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 811228e:	430b      	orrs	r3, r1
 8112290:	4313      	orrs	r3, r2
 8112292:	68ba      	ldr	r2, [r7, #8]
 8112294:	0151      	lsls	r1, r2, #5
 8112296:	68fa      	ldr	r2, [r7, #12]
 8112298:	440a      	add	r2, r1
 811229a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 811229e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 81122a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 81122a6:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 81122a8:	2300      	movs	r3, #0
}
 81122aa:	4618      	mov	r0, r3
 81122ac:	3714      	adds	r7, #20
 81122ae:	46bd      	mov	sp, r7
 81122b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81122b4:	4770      	bx	lr
	...

081122b8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 81122b8:	b480      	push	{r7}
 81122ba:	b085      	sub	sp, #20
 81122bc:	af00      	add	r7, sp, #0
 81122be:	6078      	str	r0, [r7, #4]
 81122c0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 81122c2:	687b      	ldr	r3, [r7, #4]
 81122c4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 81122c6:	683b      	ldr	r3, [r7, #0]
 81122c8:	781b      	ldrb	r3, [r3, #0]
 81122ca:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 81122cc:	683b      	ldr	r3, [r7, #0]
 81122ce:	785b      	ldrb	r3, [r3, #1]
 81122d0:	2b01      	cmp	r3, #1
 81122d2:	d161      	bne.n	8112398 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 81122d4:	68bb      	ldr	r3, [r7, #8]
 81122d6:	015a      	lsls	r2, r3, #5
 81122d8:	68fb      	ldr	r3, [r7, #12]
 81122da:	4413      	add	r3, r2
 81122dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 81122e0:	681b      	ldr	r3, [r3, #0]
 81122e2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 81122e6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 81122ea:	d11f      	bne.n	811232c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 81122ec:	68bb      	ldr	r3, [r7, #8]
 81122ee:	015a      	lsls	r2, r3, #5
 81122f0:	68fb      	ldr	r3, [r7, #12]
 81122f2:	4413      	add	r3, r2
 81122f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 81122f8:	681b      	ldr	r3, [r3, #0]
 81122fa:	68ba      	ldr	r2, [r7, #8]
 81122fc:	0151      	lsls	r1, r2, #5
 81122fe:	68fa      	ldr	r2, [r7, #12]
 8112300:	440a      	add	r2, r1
 8112302:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8112306:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 811230a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 811230c:	68bb      	ldr	r3, [r7, #8]
 811230e:	015a      	lsls	r2, r3, #5
 8112310:	68fb      	ldr	r3, [r7, #12]
 8112312:	4413      	add	r3, r2
 8112314:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8112318:	681b      	ldr	r3, [r3, #0]
 811231a:	68ba      	ldr	r2, [r7, #8]
 811231c:	0151      	lsls	r1, r2, #5
 811231e:	68fa      	ldr	r2, [r7, #12]
 8112320:	440a      	add	r2, r1
 8112322:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8112326:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 811232a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 811232c:	68fb      	ldr	r3, [r7, #12]
 811232e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8112332:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8112334:	683b      	ldr	r3, [r7, #0]
 8112336:	781b      	ldrb	r3, [r3, #0]
 8112338:	f003 030f 	and.w	r3, r3, #15
 811233c:	2101      	movs	r1, #1
 811233e:	fa01 f303 	lsl.w	r3, r1, r3
 8112342:	b29b      	uxth	r3, r3
 8112344:	43db      	mvns	r3, r3
 8112346:	68f9      	ldr	r1, [r7, #12]
 8112348:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 811234c:	4013      	ands	r3, r2
 811234e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8112350:	68fb      	ldr	r3, [r7, #12]
 8112352:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8112356:	69da      	ldr	r2, [r3, #28]
 8112358:	683b      	ldr	r3, [r7, #0]
 811235a:	781b      	ldrb	r3, [r3, #0]
 811235c:	f003 030f 	and.w	r3, r3, #15
 8112360:	2101      	movs	r1, #1
 8112362:	fa01 f303 	lsl.w	r3, r1, r3
 8112366:	b29b      	uxth	r3, r3
 8112368:	43db      	mvns	r3, r3
 811236a:	68f9      	ldr	r1, [r7, #12]
 811236c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8112370:	4013      	ands	r3, r2
 8112372:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8112374:	68bb      	ldr	r3, [r7, #8]
 8112376:	015a      	lsls	r2, r3, #5
 8112378:	68fb      	ldr	r3, [r7, #12]
 811237a:	4413      	add	r3, r2
 811237c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8112380:	681a      	ldr	r2, [r3, #0]
 8112382:	68bb      	ldr	r3, [r7, #8]
 8112384:	0159      	lsls	r1, r3, #5
 8112386:	68fb      	ldr	r3, [r7, #12]
 8112388:	440b      	add	r3, r1
 811238a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 811238e:	4619      	mov	r1, r3
 8112390:	4b35      	ldr	r3, [pc, #212]	; (8112468 <USB_DeactivateEndpoint+0x1b0>)
 8112392:	4013      	ands	r3, r2
 8112394:	600b      	str	r3, [r1, #0]
 8112396:	e060      	b.n	811245a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8112398:	68bb      	ldr	r3, [r7, #8]
 811239a:	015a      	lsls	r2, r3, #5
 811239c:	68fb      	ldr	r3, [r7, #12]
 811239e:	4413      	add	r3, r2
 81123a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 81123a4:	681b      	ldr	r3, [r3, #0]
 81123a6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 81123aa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 81123ae:	d11f      	bne.n	81123f0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 81123b0:	68bb      	ldr	r3, [r7, #8]
 81123b2:	015a      	lsls	r2, r3, #5
 81123b4:	68fb      	ldr	r3, [r7, #12]
 81123b6:	4413      	add	r3, r2
 81123b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 81123bc:	681b      	ldr	r3, [r3, #0]
 81123be:	68ba      	ldr	r2, [r7, #8]
 81123c0:	0151      	lsls	r1, r2, #5
 81123c2:	68fa      	ldr	r2, [r7, #12]
 81123c4:	440a      	add	r2, r1
 81123c6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 81123ca:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 81123ce:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 81123d0:	68bb      	ldr	r3, [r7, #8]
 81123d2:	015a      	lsls	r2, r3, #5
 81123d4:	68fb      	ldr	r3, [r7, #12]
 81123d6:	4413      	add	r3, r2
 81123d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 81123dc:	681b      	ldr	r3, [r3, #0]
 81123de:	68ba      	ldr	r2, [r7, #8]
 81123e0:	0151      	lsls	r1, r2, #5
 81123e2:	68fa      	ldr	r2, [r7, #12]
 81123e4:	440a      	add	r2, r1
 81123e6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 81123ea:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 81123ee:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 81123f0:	68fb      	ldr	r3, [r7, #12]
 81123f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 81123f6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 81123f8:	683b      	ldr	r3, [r7, #0]
 81123fa:	781b      	ldrb	r3, [r3, #0]
 81123fc:	f003 030f 	and.w	r3, r3, #15
 8112400:	2101      	movs	r1, #1
 8112402:	fa01 f303 	lsl.w	r3, r1, r3
 8112406:	041b      	lsls	r3, r3, #16
 8112408:	43db      	mvns	r3, r3
 811240a:	68f9      	ldr	r1, [r7, #12]
 811240c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8112410:	4013      	ands	r3, r2
 8112412:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8112414:	68fb      	ldr	r3, [r7, #12]
 8112416:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 811241a:	69da      	ldr	r2, [r3, #28]
 811241c:	683b      	ldr	r3, [r7, #0]
 811241e:	781b      	ldrb	r3, [r3, #0]
 8112420:	f003 030f 	and.w	r3, r3, #15
 8112424:	2101      	movs	r1, #1
 8112426:	fa01 f303 	lsl.w	r3, r1, r3
 811242a:	041b      	lsls	r3, r3, #16
 811242c:	43db      	mvns	r3, r3
 811242e:	68f9      	ldr	r1, [r7, #12]
 8112430:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8112434:	4013      	ands	r3, r2
 8112436:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8112438:	68bb      	ldr	r3, [r7, #8]
 811243a:	015a      	lsls	r2, r3, #5
 811243c:	68fb      	ldr	r3, [r7, #12]
 811243e:	4413      	add	r3, r2
 8112440:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8112444:	681a      	ldr	r2, [r3, #0]
 8112446:	68bb      	ldr	r3, [r7, #8]
 8112448:	0159      	lsls	r1, r3, #5
 811244a:	68fb      	ldr	r3, [r7, #12]
 811244c:	440b      	add	r3, r1
 811244e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8112452:	4619      	mov	r1, r3
 8112454:	4b05      	ldr	r3, [pc, #20]	; (811246c <USB_DeactivateEndpoint+0x1b4>)
 8112456:	4013      	ands	r3, r2
 8112458:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 811245a:	2300      	movs	r3, #0
}
 811245c:	4618      	mov	r0, r3
 811245e:	3714      	adds	r7, #20
 8112460:	46bd      	mov	sp, r7
 8112462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8112466:	4770      	bx	lr
 8112468:	ec337800 	.word	0xec337800
 811246c:	eff37800 	.word	0xeff37800

08112470 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8112470:	b580      	push	{r7, lr}
 8112472:	b08a      	sub	sp, #40	; 0x28
 8112474:	af02      	add	r7, sp, #8
 8112476:	60f8      	str	r0, [r7, #12]
 8112478:	60b9      	str	r1, [r7, #8]
 811247a:	4613      	mov	r3, r2
 811247c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 811247e:	68fb      	ldr	r3, [r7, #12]
 8112480:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8112482:	68bb      	ldr	r3, [r7, #8]
 8112484:	781b      	ldrb	r3, [r3, #0]
 8112486:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8112488:	68bb      	ldr	r3, [r7, #8]
 811248a:	785b      	ldrb	r3, [r3, #1]
 811248c:	2b01      	cmp	r3, #1
 811248e:	f040 815c 	bne.w	811274a <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8112492:	68bb      	ldr	r3, [r7, #8]
 8112494:	695b      	ldr	r3, [r3, #20]
 8112496:	2b00      	cmp	r3, #0
 8112498:	d132      	bne.n	8112500 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 811249a:	69bb      	ldr	r3, [r7, #24]
 811249c:	015a      	lsls	r2, r3, #5
 811249e:	69fb      	ldr	r3, [r7, #28]
 81124a0:	4413      	add	r3, r2
 81124a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 81124a6:	691b      	ldr	r3, [r3, #16]
 81124a8:	69ba      	ldr	r2, [r7, #24]
 81124aa:	0151      	lsls	r1, r2, #5
 81124ac:	69fa      	ldr	r2, [r7, #28]
 81124ae:	440a      	add	r2, r1
 81124b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 81124b4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 81124b8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 81124bc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 81124be:	69bb      	ldr	r3, [r7, #24]
 81124c0:	015a      	lsls	r2, r3, #5
 81124c2:	69fb      	ldr	r3, [r7, #28]
 81124c4:	4413      	add	r3, r2
 81124c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 81124ca:	691b      	ldr	r3, [r3, #16]
 81124cc:	69ba      	ldr	r2, [r7, #24]
 81124ce:	0151      	lsls	r1, r2, #5
 81124d0:	69fa      	ldr	r2, [r7, #28]
 81124d2:	440a      	add	r2, r1
 81124d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 81124d8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 81124dc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 81124de:	69bb      	ldr	r3, [r7, #24]
 81124e0:	015a      	lsls	r2, r3, #5
 81124e2:	69fb      	ldr	r3, [r7, #28]
 81124e4:	4413      	add	r3, r2
 81124e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 81124ea:	691b      	ldr	r3, [r3, #16]
 81124ec:	69ba      	ldr	r2, [r7, #24]
 81124ee:	0151      	lsls	r1, r2, #5
 81124f0:	69fa      	ldr	r2, [r7, #28]
 81124f2:	440a      	add	r2, r1
 81124f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 81124f8:	0cdb      	lsrs	r3, r3, #19
 81124fa:	04db      	lsls	r3, r3, #19
 81124fc:	6113      	str	r3, [r2, #16]
 81124fe:	e074      	b.n	81125ea <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8112500:	69bb      	ldr	r3, [r7, #24]
 8112502:	015a      	lsls	r2, r3, #5
 8112504:	69fb      	ldr	r3, [r7, #28]
 8112506:	4413      	add	r3, r2
 8112508:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 811250c:	691b      	ldr	r3, [r3, #16]
 811250e:	69ba      	ldr	r2, [r7, #24]
 8112510:	0151      	lsls	r1, r2, #5
 8112512:	69fa      	ldr	r2, [r7, #28]
 8112514:	440a      	add	r2, r1
 8112516:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 811251a:	0cdb      	lsrs	r3, r3, #19
 811251c:	04db      	lsls	r3, r3, #19
 811251e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8112520:	69bb      	ldr	r3, [r7, #24]
 8112522:	015a      	lsls	r2, r3, #5
 8112524:	69fb      	ldr	r3, [r7, #28]
 8112526:	4413      	add	r3, r2
 8112528:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 811252c:	691b      	ldr	r3, [r3, #16]
 811252e:	69ba      	ldr	r2, [r7, #24]
 8112530:	0151      	lsls	r1, r2, #5
 8112532:	69fa      	ldr	r2, [r7, #28]
 8112534:	440a      	add	r2, r1
 8112536:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 811253a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 811253e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8112542:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8112544:	69bb      	ldr	r3, [r7, #24]
 8112546:	015a      	lsls	r2, r3, #5
 8112548:	69fb      	ldr	r3, [r7, #28]
 811254a:	4413      	add	r3, r2
 811254c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8112550:	691a      	ldr	r2, [r3, #16]
 8112552:	68bb      	ldr	r3, [r7, #8]
 8112554:	6959      	ldr	r1, [r3, #20]
 8112556:	68bb      	ldr	r3, [r7, #8]
 8112558:	689b      	ldr	r3, [r3, #8]
 811255a:	440b      	add	r3, r1
 811255c:	1e59      	subs	r1, r3, #1
 811255e:	68bb      	ldr	r3, [r7, #8]
 8112560:	689b      	ldr	r3, [r3, #8]
 8112562:	fbb1 f3f3 	udiv	r3, r1, r3
 8112566:	04d9      	lsls	r1, r3, #19
 8112568:	4b9d      	ldr	r3, [pc, #628]	; (81127e0 <USB_EPStartXfer+0x370>)
 811256a:	400b      	ands	r3, r1
 811256c:	69b9      	ldr	r1, [r7, #24]
 811256e:	0148      	lsls	r0, r1, #5
 8112570:	69f9      	ldr	r1, [r7, #28]
 8112572:	4401      	add	r1, r0
 8112574:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8112578:	4313      	orrs	r3, r2
 811257a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 811257c:	69bb      	ldr	r3, [r7, #24]
 811257e:	015a      	lsls	r2, r3, #5
 8112580:	69fb      	ldr	r3, [r7, #28]
 8112582:	4413      	add	r3, r2
 8112584:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8112588:	691a      	ldr	r2, [r3, #16]
 811258a:	68bb      	ldr	r3, [r7, #8]
 811258c:	695b      	ldr	r3, [r3, #20]
 811258e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8112592:	69b9      	ldr	r1, [r7, #24]
 8112594:	0148      	lsls	r0, r1, #5
 8112596:	69f9      	ldr	r1, [r7, #28]
 8112598:	4401      	add	r1, r0
 811259a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 811259e:	4313      	orrs	r3, r2
 81125a0:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 81125a2:	68bb      	ldr	r3, [r7, #8]
 81125a4:	78db      	ldrb	r3, [r3, #3]
 81125a6:	2b01      	cmp	r3, #1
 81125a8:	d11f      	bne.n	81125ea <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 81125aa:	69bb      	ldr	r3, [r7, #24]
 81125ac:	015a      	lsls	r2, r3, #5
 81125ae:	69fb      	ldr	r3, [r7, #28]
 81125b0:	4413      	add	r3, r2
 81125b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 81125b6:	691b      	ldr	r3, [r3, #16]
 81125b8:	69ba      	ldr	r2, [r7, #24]
 81125ba:	0151      	lsls	r1, r2, #5
 81125bc:	69fa      	ldr	r2, [r7, #28]
 81125be:	440a      	add	r2, r1
 81125c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 81125c4:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 81125c8:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 81125ca:	69bb      	ldr	r3, [r7, #24]
 81125cc:	015a      	lsls	r2, r3, #5
 81125ce:	69fb      	ldr	r3, [r7, #28]
 81125d0:	4413      	add	r3, r2
 81125d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 81125d6:	691b      	ldr	r3, [r3, #16]
 81125d8:	69ba      	ldr	r2, [r7, #24]
 81125da:	0151      	lsls	r1, r2, #5
 81125dc:	69fa      	ldr	r2, [r7, #28]
 81125de:	440a      	add	r2, r1
 81125e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 81125e4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 81125e8:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 81125ea:	79fb      	ldrb	r3, [r7, #7]
 81125ec:	2b01      	cmp	r3, #1
 81125ee:	d14b      	bne.n	8112688 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 81125f0:	68bb      	ldr	r3, [r7, #8]
 81125f2:	691b      	ldr	r3, [r3, #16]
 81125f4:	2b00      	cmp	r3, #0
 81125f6:	d009      	beq.n	811260c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 81125f8:	69bb      	ldr	r3, [r7, #24]
 81125fa:	015a      	lsls	r2, r3, #5
 81125fc:	69fb      	ldr	r3, [r7, #28]
 81125fe:	4413      	add	r3, r2
 8112600:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8112604:	461a      	mov	r2, r3
 8112606:	68bb      	ldr	r3, [r7, #8]
 8112608:	691b      	ldr	r3, [r3, #16]
 811260a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 811260c:	68bb      	ldr	r3, [r7, #8]
 811260e:	78db      	ldrb	r3, [r3, #3]
 8112610:	2b01      	cmp	r3, #1
 8112612:	d128      	bne.n	8112666 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8112614:	69fb      	ldr	r3, [r7, #28]
 8112616:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 811261a:	689b      	ldr	r3, [r3, #8]
 811261c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8112620:	2b00      	cmp	r3, #0
 8112622:	d110      	bne.n	8112646 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8112624:	69bb      	ldr	r3, [r7, #24]
 8112626:	015a      	lsls	r2, r3, #5
 8112628:	69fb      	ldr	r3, [r7, #28]
 811262a:	4413      	add	r3, r2
 811262c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8112630:	681b      	ldr	r3, [r3, #0]
 8112632:	69ba      	ldr	r2, [r7, #24]
 8112634:	0151      	lsls	r1, r2, #5
 8112636:	69fa      	ldr	r2, [r7, #28]
 8112638:	440a      	add	r2, r1
 811263a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 811263e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8112642:	6013      	str	r3, [r2, #0]
 8112644:	e00f      	b.n	8112666 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8112646:	69bb      	ldr	r3, [r7, #24]
 8112648:	015a      	lsls	r2, r3, #5
 811264a:	69fb      	ldr	r3, [r7, #28]
 811264c:	4413      	add	r3, r2
 811264e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8112652:	681b      	ldr	r3, [r3, #0]
 8112654:	69ba      	ldr	r2, [r7, #24]
 8112656:	0151      	lsls	r1, r2, #5
 8112658:	69fa      	ldr	r2, [r7, #28]
 811265a:	440a      	add	r2, r1
 811265c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8112660:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8112664:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8112666:	69bb      	ldr	r3, [r7, #24]
 8112668:	015a      	lsls	r2, r3, #5
 811266a:	69fb      	ldr	r3, [r7, #28]
 811266c:	4413      	add	r3, r2
 811266e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8112672:	681b      	ldr	r3, [r3, #0]
 8112674:	69ba      	ldr	r2, [r7, #24]
 8112676:	0151      	lsls	r1, r2, #5
 8112678:	69fa      	ldr	r2, [r7, #28]
 811267a:	440a      	add	r2, r1
 811267c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8112680:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8112684:	6013      	str	r3, [r2, #0]
 8112686:	e12f      	b.n	81128e8 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8112688:	69bb      	ldr	r3, [r7, #24]
 811268a:	015a      	lsls	r2, r3, #5
 811268c:	69fb      	ldr	r3, [r7, #28]
 811268e:	4413      	add	r3, r2
 8112690:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8112694:	681b      	ldr	r3, [r3, #0]
 8112696:	69ba      	ldr	r2, [r7, #24]
 8112698:	0151      	lsls	r1, r2, #5
 811269a:	69fa      	ldr	r2, [r7, #28]
 811269c:	440a      	add	r2, r1
 811269e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 81126a2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 81126a6:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 81126a8:	68bb      	ldr	r3, [r7, #8]
 81126aa:	78db      	ldrb	r3, [r3, #3]
 81126ac:	2b01      	cmp	r3, #1
 81126ae:	d015      	beq.n	81126dc <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 81126b0:	68bb      	ldr	r3, [r7, #8]
 81126b2:	695b      	ldr	r3, [r3, #20]
 81126b4:	2b00      	cmp	r3, #0
 81126b6:	f000 8117 	beq.w	81128e8 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 81126ba:	69fb      	ldr	r3, [r7, #28]
 81126bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 81126c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 81126c2:	68bb      	ldr	r3, [r7, #8]
 81126c4:	781b      	ldrb	r3, [r3, #0]
 81126c6:	f003 030f 	and.w	r3, r3, #15
 81126ca:	2101      	movs	r1, #1
 81126cc:	fa01 f303 	lsl.w	r3, r1, r3
 81126d0:	69f9      	ldr	r1, [r7, #28]
 81126d2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 81126d6:	4313      	orrs	r3, r2
 81126d8:	634b      	str	r3, [r1, #52]	; 0x34
 81126da:	e105      	b.n	81128e8 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 81126dc:	69fb      	ldr	r3, [r7, #28]
 81126de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 81126e2:	689b      	ldr	r3, [r3, #8]
 81126e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 81126e8:	2b00      	cmp	r3, #0
 81126ea:	d110      	bne.n	811270e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 81126ec:	69bb      	ldr	r3, [r7, #24]
 81126ee:	015a      	lsls	r2, r3, #5
 81126f0:	69fb      	ldr	r3, [r7, #28]
 81126f2:	4413      	add	r3, r2
 81126f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 81126f8:	681b      	ldr	r3, [r3, #0]
 81126fa:	69ba      	ldr	r2, [r7, #24]
 81126fc:	0151      	lsls	r1, r2, #5
 81126fe:	69fa      	ldr	r2, [r7, #28]
 8112700:	440a      	add	r2, r1
 8112702:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8112706:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 811270a:	6013      	str	r3, [r2, #0]
 811270c:	e00f      	b.n	811272e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 811270e:	69bb      	ldr	r3, [r7, #24]
 8112710:	015a      	lsls	r2, r3, #5
 8112712:	69fb      	ldr	r3, [r7, #28]
 8112714:	4413      	add	r3, r2
 8112716:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 811271a:	681b      	ldr	r3, [r3, #0]
 811271c:	69ba      	ldr	r2, [r7, #24]
 811271e:	0151      	lsls	r1, r2, #5
 8112720:	69fa      	ldr	r2, [r7, #28]
 8112722:	440a      	add	r2, r1
 8112724:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8112728:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 811272c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 811272e:	68bb      	ldr	r3, [r7, #8]
 8112730:	68d9      	ldr	r1, [r3, #12]
 8112732:	68bb      	ldr	r3, [r7, #8]
 8112734:	781a      	ldrb	r2, [r3, #0]
 8112736:	68bb      	ldr	r3, [r7, #8]
 8112738:	695b      	ldr	r3, [r3, #20]
 811273a:	b298      	uxth	r0, r3
 811273c:	79fb      	ldrb	r3, [r7, #7]
 811273e:	9300      	str	r3, [sp, #0]
 8112740:	4603      	mov	r3, r0
 8112742:	68f8      	ldr	r0, [r7, #12]
 8112744:	f000 fa2b 	bl	8112b9e <USB_WritePacket>
 8112748:	e0ce      	b.n	81128e8 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 811274a:	69bb      	ldr	r3, [r7, #24]
 811274c:	015a      	lsls	r2, r3, #5
 811274e:	69fb      	ldr	r3, [r7, #28]
 8112750:	4413      	add	r3, r2
 8112752:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8112756:	691b      	ldr	r3, [r3, #16]
 8112758:	69ba      	ldr	r2, [r7, #24]
 811275a:	0151      	lsls	r1, r2, #5
 811275c:	69fa      	ldr	r2, [r7, #28]
 811275e:	440a      	add	r2, r1
 8112760:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8112764:	0cdb      	lsrs	r3, r3, #19
 8112766:	04db      	lsls	r3, r3, #19
 8112768:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 811276a:	69bb      	ldr	r3, [r7, #24]
 811276c:	015a      	lsls	r2, r3, #5
 811276e:	69fb      	ldr	r3, [r7, #28]
 8112770:	4413      	add	r3, r2
 8112772:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8112776:	691b      	ldr	r3, [r3, #16]
 8112778:	69ba      	ldr	r2, [r7, #24]
 811277a:	0151      	lsls	r1, r2, #5
 811277c:	69fa      	ldr	r2, [r7, #28]
 811277e:	440a      	add	r2, r1
 8112780:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8112784:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8112788:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 811278c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 811278e:	68bb      	ldr	r3, [r7, #8]
 8112790:	695b      	ldr	r3, [r3, #20]
 8112792:	2b00      	cmp	r3, #0
 8112794:	d126      	bne.n	81127e4 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8112796:	69bb      	ldr	r3, [r7, #24]
 8112798:	015a      	lsls	r2, r3, #5
 811279a:	69fb      	ldr	r3, [r7, #28]
 811279c:	4413      	add	r3, r2
 811279e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 81127a2:	691a      	ldr	r2, [r3, #16]
 81127a4:	68bb      	ldr	r3, [r7, #8]
 81127a6:	689b      	ldr	r3, [r3, #8]
 81127a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 81127ac:	69b9      	ldr	r1, [r7, #24]
 81127ae:	0148      	lsls	r0, r1, #5
 81127b0:	69f9      	ldr	r1, [r7, #28]
 81127b2:	4401      	add	r1, r0
 81127b4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 81127b8:	4313      	orrs	r3, r2
 81127ba:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 81127bc:	69bb      	ldr	r3, [r7, #24]
 81127be:	015a      	lsls	r2, r3, #5
 81127c0:	69fb      	ldr	r3, [r7, #28]
 81127c2:	4413      	add	r3, r2
 81127c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 81127c8:	691b      	ldr	r3, [r3, #16]
 81127ca:	69ba      	ldr	r2, [r7, #24]
 81127cc:	0151      	lsls	r1, r2, #5
 81127ce:	69fa      	ldr	r2, [r7, #28]
 81127d0:	440a      	add	r2, r1
 81127d2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 81127d6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 81127da:	6113      	str	r3, [r2, #16]
 81127dc:	e036      	b.n	811284c <USB_EPStartXfer+0x3dc>
 81127de:	bf00      	nop
 81127e0:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 81127e4:	68bb      	ldr	r3, [r7, #8]
 81127e6:	695a      	ldr	r2, [r3, #20]
 81127e8:	68bb      	ldr	r3, [r7, #8]
 81127ea:	689b      	ldr	r3, [r3, #8]
 81127ec:	4413      	add	r3, r2
 81127ee:	1e5a      	subs	r2, r3, #1
 81127f0:	68bb      	ldr	r3, [r7, #8]
 81127f2:	689b      	ldr	r3, [r3, #8]
 81127f4:	fbb2 f3f3 	udiv	r3, r2, r3
 81127f8:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 81127fa:	69bb      	ldr	r3, [r7, #24]
 81127fc:	015a      	lsls	r2, r3, #5
 81127fe:	69fb      	ldr	r3, [r7, #28]
 8112800:	4413      	add	r3, r2
 8112802:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8112806:	691a      	ldr	r2, [r3, #16]
 8112808:	8afb      	ldrh	r3, [r7, #22]
 811280a:	04d9      	lsls	r1, r3, #19
 811280c:	4b39      	ldr	r3, [pc, #228]	; (81128f4 <USB_EPStartXfer+0x484>)
 811280e:	400b      	ands	r3, r1
 8112810:	69b9      	ldr	r1, [r7, #24]
 8112812:	0148      	lsls	r0, r1, #5
 8112814:	69f9      	ldr	r1, [r7, #28]
 8112816:	4401      	add	r1, r0
 8112818:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 811281c:	4313      	orrs	r3, r2
 811281e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8112820:	69bb      	ldr	r3, [r7, #24]
 8112822:	015a      	lsls	r2, r3, #5
 8112824:	69fb      	ldr	r3, [r7, #28]
 8112826:	4413      	add	r3, r2
 8112828:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 811282c:	691a      	ldr	r2, [r3, #16]
 811282e:	68bb      	ldr	r3, [r7, #8]
 8112830:	689b      	ldr	r3, [r3, #8]
 8112832:	8af9      	ldrh	r1, [r7, #22]
 8112834:	fb01 f303 	mul.w	r3, r1, r3
 8112838:	f3c3 0312 	ubfx	r3, r3, #0, #19
 811283c:	69b9      	ldr	r1, [r7, #24]
 811283e:	0148      	lsls	r0, r1, #5
 8112840:	69f9      	ldr	r1, [r7, #28]
 8112842:	4401      	add	r1, r0
 8112844:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8112848:	4313      	orrs	r3, r2
 811284a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 811284c:	79fb      	ldrb	r3, [r7, #7]
 811284e:	2b01      	cmp	r3, #1
 8112850:	d10d      	bne.n	811286e <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8112852:	68bb      	ldr	r3, [r7, #8]
 8112854:	68db      	ldr	r3, [r3, #12]
 8112856:	2b00      	cmp	r3, #0
 8112858:	d009      	beq.n	811286e <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 811285a:	68bb      	ldr	r3, [r7, #8]
 811285c:	68d9      	ldr	r1, [r3, #12]
 811285e:	69bb      	ldr	r3, [r7, #24]
 8112860:	015a      	lsls	r2, r3, #5
 8112862:	69fb      	ldr	r3, [r7, #28]
 8112864:	4413      	add	r3, r2
 8112866:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 811286a:	460a      	mov	r2, r1
 811286c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 811286e:	68bb      	ldr	r3, [r7, #8]
 8112870:	78db      	ldrb	r3, [r3, #3]
 8112872:	2b01      	cmp	r3, #1
 8112874:	d128      	bne.n	81128c8 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8112876:	69fb      	ldr	r3, [r7, #28]
 8112878:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 811287c:	689b      	ldr	r3, [r3, #8]
 811287e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8112882:	2b00      	cmp	r3, #0
 8112884:	d110      	bne.n	81128a8 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8112886:	69bb      	ldr	r3, [r7, #24]
 8112888:	015a      	lsls	r2, r3, #5
 811288a:	69fb      	ldr	r3, [r7, #28]
 811288c:	4413      	add	r3, r2
 811288e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8112892:	681b      	ldr	r3, [r3, #0]
 8112894:	69ba      	ldr	r2, [r7, #24]
 8112896:	0151      	lsls	r1, r2, #5
 8112898:	69fa      	ldr	r2, [r7, #28]
 811289a:	440a      	add	r2, r1
 811289c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 81128a0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 81128a4:	6013      	str	r3, [r2, #0]
 81128a6:	e00f      	b.n	81128c8 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 81128a8:	69bb      	ldr	r3, [r7, #24]
 81128aa:	015a      	lsls	r2, r3, #5
 81128ac:	69fb      	ldr	r3, [r7, #28]
 81128ae:	4413      	add	r3, r2
 81128b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 81128b4:	681b      	ldr	r3, [r3, #0]
 81128b6:	69ba      	ldr	r2, [r7, #24]
 81128b8:	0151      	lsls	r1, r2, #5
 81128ba:	69fa      	ldr	r2, [r7, #28]
 81128bc:	440a      	add	r2, r1
 81128be:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 81128c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 81128c6:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 81128c8:	69bb      	ldr	r3, [r7, #24]
 81128ca:	015a      	lsls	r2, r3, #5
 81128cc:	69fb      	ldr	r3, [r7, #28]
 81128ce:	4413      	add	r3, r2
 81128d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 81128d4:	681b      	ldr	r3, [r3, #0]
 81128d6:	69ba      	ldr	r2, [r7, #24]
 81128d8:	0151      	lsls	r1, r2, #5
 81128da:	69fa      	ldr	r2, [r7, #28]
 81128dc:	440a      	add	r2, r1
 81128de:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 81128e2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 81128e6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 81128e8:	2300      	movs	r3, #0
}
 81128ea:	4618      	mov	r0, r3
 81128ec:	3720      	adds	r7, #32
 81128ee:	46bd      	mov	sp, r7
 81128f0:	bd80      	pop	{r7, pc}
 81128f2:	bf00      	nop
 81128f4:	1ff80000 	.word	0x1ff80000

081128f8 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 81128f8:	b480      	push	{r7}
 81128fa:	b087      	sub	sp, #28
 81128fc:	af00      	add	r7, sp, #0
 81128fe:	60f8      	str	r0, [r7, #12]
 8112900:	60b9      	str	r1, [r7, #8]
 8112902:	4613      	mov	r3, r2
 8112904:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8112906:	68fb      	ldr	r3, [r7, #12]
 8112908:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 811290a:	68bb      	ldr	r3, [r7, #8]
 811290c:	781b      	ldrb	r3, [r3, #0]
 811290e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8112910:	68bb      	ldr	r3, [r7, #8]
 8112912:	785b      	ldrb	r3, [r3, #1]
 8112914:	2b01      	cmp	r3, #1
 8112916:	f040 80cd 	bne.w	8112ab4 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 811291a:	68bb      	ldr	r3, [r7, #8]
 811291c:	695b      	ldr	r3, [r3, #20]
 811291e:	2b00      	cmp	r3, #0
 8112920:	d132      	bne.n	8112988 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8112922:	693b      	ldr	r3, [r7, #16]
 8112924:	015a      	lsls	r2, r3, #5
 8112926:	697b      	ldr	r3, [r7, #20]
 8112928:	4413      	add	r3, r2
 811292a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 811292e:	691b      	ldr	r3, [r3, #16]
 8112930:	693a      	ldr	r2, [r7, #16]
 8112932:	0151      	lsls	r1, r2, #5
 8112934:	697a      	ldr	r2, [r7, #20]
 8112936:	440a      	add	r2, r1
 8112938:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 811293c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8112940:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8112944:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8112946:	693b      	ldr	r3, [r7, #16]
 8112948:	015a      	lsls	r2, r3, #5
 811294a:	697b      	ldr	r3, [r7, #20]
 811294c:	4413      	add	r3, r2
 811294e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8112952:	691b      	ldr	r3, [r3, #16]
 8112954:	693a      	ldr	r2, [r7, #16]
 8112956:	0151      	lsls	r1, r2, #5
 8112958:	697a      	ldr	r2, [r7, #20]
 811295a:	440a      	add	r2, r1
 811295c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8112960:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8112964:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8112966:	693b      	ldr	r3, [r7, #16]
 8112968:	015a      	lsls	r2, r3, #5
 811296a:	697b      	ldr	r3, [r7, #20]
 811296c:	4413      	add	r3, r2
 811296e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8112972:	691b      	ldr	r3, [r3, #16]
 8112974:	693a      	ldr	r2, [r7, #16]
 8112976:	0151      	lsls	r1, r2, #5
 8112978:	697a      	ldr	r2, [r7, #20]
 811297a:	440a      	add	r2, r1
 811297c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8112980:	0cdb      	lsrs	r3, r3, #19
 8112982:	04db      	lsls	r3, r3, #19
 8112984:	6113      	str	r3, [r2, #16]
 8112986:	e04e      	b.n	8112a26 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8112988:	693b      	ldr	r3, [r7, #16]
 811298a:	015a      	lsls	r2, r3, #5
 811298c:	697b      	ldr	r3, [r7, #20]
 811298e:	4413      	add	r3, r2
 8112990:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8112994:	691b      	ldr	r3, [r3, #16]
 8112996:	693a      	ldr	r2, [r7, #16]
 8112998:	0151      	lsls	r1, r2, #5
 811299a:	697a      	ldr	r2, [r7, #20]
 811299c:	440a      	add	r2, r1
 811299e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 81129a2:	0cdb      	lsrs	r3, r3, #19
 81129a4:	04db      	lsls	r3, r3, #19
 81129a6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 81129a8:	693b      	ldr	r3, [r7, #16]
 81129aa:	015a      	lsls	r2, r3, #5
 81129ac:	697b      	ldr	r3, [r7, #20]
 81129ae:	4413      	add	r3, r2
 81129b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 81129b4:	691b      	ldr	r3, [r3, #16]
 81129b6:	693a      	ldr	r2, [r7, #16]
 81129b8:	0151      	lsls	r1, r2, #5
 81129ba:	697a      	ldr	r2, [r7, #20]
 81129bc:	440a      	add	r2, r1
 81129be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 81129c2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 81129c6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 81129ca:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 81129cc:	68bb      	ldr	r3, [r7, #8]
 81129ce:	695a      	ldr	r2, [r3, #20]
 81129d0:	68bb      	ldr	r3, [r7, #8]
 81129d2:	689b      	ldr	r3, [r3, #8]
 81129d4:	429a      	cmp	r2, r3
 81129d6:	d903      	bls.n	81129e0 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 81129d8:	68bb      	ldr	r3, [r7, #8]
 81129da:	689a      	ldr	r2, [r3, #8]
 81129dc:	68bb      	ldr	r3, [r7, #8]
 81129de:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 81129e0:	693b      	ldr	r3, [r7, #16]
 81129e2:	015a      	lsls	r2, r3, #5
 81129e4:	697b      	ldr	r3, [r7, #20]
 81129e6:	4413      	add	r3, r2
 81129e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 81129ec:	691b      	ldr	r3, [r3, #16]
 81129ee:	693a      	ldr	r2, [r7, #16]
 81129f0:	0151      	lsls	r1, r2, #5
 81129f2:	697a      	ldr	r2, [r7, #20]
 81129f4:	440a      	add	r2, r1
 81129f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 81129fa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 81129fe:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8112a00:	693b      	ldr	r3, [r7, #16]
 8112a02:	015a      	lsls	r2, r3, #5
 8112a04:	697b      	ldr	r3, [r7, #20]
 8112a06:	4413      	add	r3, r2
 8112a08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8112a0c:	691a      	ldr	r2, [r3, #16]
 8112a0e:	68bb      	ldr	r3, [r7, #8]
 8112a10:	695b      	ldr	r3, [r3, #20]
 8112a12:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8112a16:	6939      	ldr	r1, [r7, #16]
 8112a18:	0148      	lsls	r0, r1, #5
 8112a1a:	6979      	ldr	r1, [r7, #20]
 8112a1c:	4401      	add	r1, r0
 8112a1e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8112a22:	4313      	orrs	r3, r2
 8112a24:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8112a26:	79fb      	ldrb	r3, [r7, #7]
 8112a28:	2b01      	cmp	r3, #1
 8112a2a:	d11e      	bne.n	8112a6a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8112a2c:	68bb      	ldr	r3, [r7, #8]
 8112a2e:	691b      	ldr	r3, [r3, #16]
 8112a30:	2b00      	cmp	r3, #0
 8112a32:	d009      	beq.n	8112a48 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8112a34:	693b      	ldr	r3, [r7, #16]
 8112a36:	015a      	lsls	r2, r3, #5
 8112a38:	697b      	ldr	r3, [r7, #20]
 8112a3a:	4413      	add	r3, r2
 8112a3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8112a40:	461a      	mov	r2, r3
 8112a42:	68bb      	ldr	r3, [r7, #8]
 8112a44:	691b      	ldr	r3, [r3, #16]
 8112a46:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8112a48:	693b      	ldr	r3, [r7, #16]
 8112a4a:	015a      	lsls	r2, r3, #5
 8112a4c:	697b      	ldr	r3, [r7, #20]
 8112a4e:	4413      	add	r3, r2
 8112a50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8112a54:	681b      	ldr	r3, [r3, #0]
 8112a56:	693a      	ldr	r2, [r7, #16]
 8112a58:	0151      	lsls	r1, r2, #5
 8112a5a:	697a      	ldr	r2, [r7, #20]
 8112a5c:	440a      	add	r2, r1
 8112a5e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8112a62:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8112a66:	6013      	str	r3, [r2, #0]
 8112a68:	e092      	b.n	8112b90 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8112a6a:	693b      	ldr	r3, [r7, #16]
 8112a6c:	015a      	lsls	r2, r3, #5
 8112a6e:	697b      	ldr	r3, [r7, #20]
 8112a70:	4413      	add	r3, r2
 8112a72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8112a76:	681b      	ldr	r3, [r3, #0]
 8112a78:	693a      	ldr	r2, [r7, #16]
 8112a7a:	0151      	lsls	r1, r2, #5
 8112a7c:	697a      	ldr	r2, [r7, #20]
 8112a7e:	440a      	add	r2, r1
 8112a80:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8112a84:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8112a88:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8112a8a:	68bb      	ldr	r3, [r7, #8]
 8112a8c:	695b      	ldr	r3, [r3, #20]
 8112a8e:	2b00      	cmp	r3, #0
 8112a90:	d07e      	beq.n	8112b90 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8112a92:	697b      	ldr	r3, [r7, #20]
 8112a94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8112a98:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8112a9a:	68bb      	ldr	r3, [r7, #8]
 8112a9c:	781b      	ldrb	r3, [r3, #0]
 8112a9e:	f003 030f 	and.w	r3, r3, #15
 8112aa2:	2101      	movs	r1, #1
 8112aa4:	fa01 f303 	lsl.w	r3, r1, r3
 8112aa8:	6979      	ldr	r1, [r7, #20]
 8112aaa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8112aae:	4313      	orrs	r3, r2
 8112ab0:	634b      	str	r3, [r1, #52]	; 0x34
 8112ab2:	e06d      	b.n	8112b90 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8112ab4:	693b      	ldr	r3, [r7, #16]
 8112ab6:	015a      	lsls	r2, r3, #5
 8112ab8:	697b      	ldr	r3, [r7, #20]
 8112aba:	4413      	add	r3, r2
 8112abc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8112ac0:	691b      	ldr	r3, [r3, #16]
 8112ac2:	693a      	ldr	r2, [r7, #16]
 8112ac4:	0151      	lsls	r1, r2, #5
 8112ac6:	697a      	ldr	r2, [r7, #20]
 8112ac8:	440a      	add	r2, r1
 8112aca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8112ace:	0cdb      	lsrs	r3, r3, #19
 8112ad0:	04db      	lsls	r3, r3, #19
 8112ad2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8112ad4:	693b      	ldr	r3, [r7, #16]
 8112ad6:	015a      	lsls	r2, r3, #5
 8112ad8:	697b      	ldr	r3, [r7, #20]
 8112ada:	4413      	add	r3, r2
 8112adc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8112ae0:	691b      	ldr	r3, [r3, #16]
 8112ae2:	693a      	ldr	r2, [r7, #16]
 8112ae4:	0151      	lsls	r1, r2, #5
 8112ae6:	697a      	ldr	r2, [r7, #20]
 8112ae8:	440a      	add	r2, r1
 8112aea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8112aee:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8112af2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8112af6:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8112af8:	68bb      	ldr	r3, [r7, #8]
 8112afa:	695b      	ldr	r3, [r3, #20]
 8112afc:	2b00      	cmp	r3, #0
 8112afe:	d003      	beq.n	8112b08 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8112b00:	68bb      	ldr	r3, [r7, #8]
 8112b02:	689a      	ldr	r2, [r3, #8]
 8112b04:	68bb      	ldr	r3, [r7, #8]
 8112b06:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8112b08:	693b      	ldr	r3, [r7, #16]
 8112b0a:	015a      	lsls	r2, r3, #5
 8112b0c:	697b      	ldr	r3, [r7, #20]
 8112b0e:	4413      	add	r3, r2
 8112b10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8112b14:	691b      	ldr	r3, [r3, #16]
 8112b16:	693a      	ldr	r2, [r7, #16]
 8112b18:	0151      	lsls	r1, r2, #5
 8112b1a:	697a      	ldr	r2, [r7, #20]
 8112b1c:	440a      	add	r2, r1
 8112b1e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8112b22:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8112b26:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8112b28:	693b      	ldr	r3, [r7, #16]
 8112b2a:	015a      	lsls	r2, r3, #5
 8112b2c:	697b      	ldr	r3, [r7, #20]
 8112b2e:	4413      	add	r3, r2
 8112b30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8112b34:	691a      	ldr	r2, [r3, #16]
 8112b36:	68bb      	ldr	r3, [r7, #8]
 8112b38:	689b      	ldr	r3, [r3, #8]
 8112b3a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8112b3e:	6939      	ldr	r1, [r7, #16]
 8112b40:	0148      	lsls	r0, r1, #5
 8112b42:	6979      	ldr	r1, [r7, #20]
 8112b44:	4401      	add	r1, r0
 8112b46:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8112b4a:	4313      	orrs	r3, r2
 8112b4c:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8112b4e:	79fb      	ldrb	r3, [r7, #7]
 8112b50:	2b01      	cmp	r3, #1
 8112b52:	d10d      	bne.n	8112b70 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8112b54:	68bb      	ldr	r3, [r7, #8]
 8112b56:	68db      	ldr	r3, [r3, #12]
 8112b58:	2b00      	cmp	r3, #0
 8112b5a:	d009      	beq.n	8112b70 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8112b5c:	68bb      	ldr	r3, [r7, #8]
 8112b5e:	68d9      	ldr	r1, [r3, #12]
 8112b60:	693b      	ldr	r3, [r7, #16]
 8112b62:	015a      	lsls	r2, r3, #5
 8112b64:	697b      	ldr	r3, [r7, #20]
 8112b66:	4413      	add	r3, r2
 8112b68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8112b6c:	460a      	mov	r2, r1
 8112b6e:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8112b70:	693b      	ldr	r3, [r7, #16]
 8112b72:	015a      	lsls	r2, r3, #5
 8112b74:	697b      	ldr	r3, [r7, #20]
 8112b76:	4413      	add	r3, r2
 8112b78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8112b7c:	681b      	ldr	r3, [r3, #0]
 8112b7e:	693a      	ldr	r2, [r7, #16]
 8112b80:	0151      	lsls	r1, r2, #5
 8112b82:	697a      	ldr	r2, [r7, #20]
 8112b84:	440a      	add	r2, r1
 8112b86:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8112b8a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8112b8e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8112b90:	2300      	movs	r3, #0
}
 8112b92:	4618      	mov	r0, r3
 8112b94:	371c      	adds	r7, #28
 8112b96:	46bd      	mov	sp, r7
 8112b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8112b9c:	4770      	bx	lr

08112b9e <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8112b9e:	b480      	push	{r7}
 8112ba0:	b089      	sub	sp, #36	; 0x24
 8112ba2:	af00      	add	r7, sp, #0
 8112ba4:	60f8      	str	r0, [r7, #12]
 8112ba6:	60b9      	str	r1, [r7, #8]
 8112ba8:	4611      	mov	r1, r2
 8112baa:	461a      	mov	r2, r3
 8112bac:	460b      	mov	r3, r1
 8112bae:	71fb      	strb	r3, [r7, #7]
 8112bb0:	4613      	mov	r3, r2
 8112bb2:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8112bb4:	68fb      	ldr	r3, [r7, #12]
 8112bb6:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8112bb8:	68bb      	ldr	r3, [r7, #8]
 8112bba:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8112bbc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8112bc0:	2b00      	cmp	r3, #0
 8112bc2:	d123      	bne.n	8112c0c <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8112bc4:	88bb      	ldrh	r3, [r7, #4]
 8112bc6:	3303      	adds	r3, #3
 8112bc8:	089b      	lsrs	r3, r3, #2
 8112bca:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8112bcc:	2300      	movs	r3, #0
 8112bce:	61bb      	str	r3, [r7, #24]
 8112bd0:	e018      	b.n	8112c04 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8112bd2:	79fb      	ldrb	r3, [r7, #7]
 8112bd4:	031a      	lsls	r2, r3, #12
 8112bd6:	697b      	ldr	r3, [r7, #20]
 8112bd8:	4413      	add	r3, r2
 8112bda:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8112bde:	461a      	mov	r2, r3
 8112be0:	69fb      	ldr	r3, [r7, #28]
 8112be2:	681b      	ldr	r3, [r3, #0]
 8112be4:	6013      	str	r3, [r2, #0]
      pSrc++;
 8112be6:	69fb      	ldr	r3, [r7, #28]
 8112be8:	3301      	adds	r3, #1
 8112bea:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8112bec:	69fb      	ldr	r3, [r7, #28]
 8112bee:	3301      	adds	r3, #1
 8112bf0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8112bf2:	69fb      	ldr	r3, [r7, #28]
 8112bf4:	3301      	adds	r3, #1
 8112bf6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8112bf8:	69fb      	ldr	r3, [r7, #28]
 8112bfa:	3301      	adds	r3, #1
 8112bfc:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8112bfe:	69bb      	ldr	r3, [r7, #24]
 8112c00:	3301      	adds	r3, #1
 8112c02:	61bb      	str	r3, [r7, #24]
 8112c04:	69ba      	ldr	r2, [r7, #24]
 8112c06:	693b      	ldr	r3, [r7, #16]
 8112c08:	429a      	cmp	r2, r3
 8112c0a:	d3e2      	bcc.n	8112bd2 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8112c0c:	2300      	movs	r3, #0
}
 8112c0e:	4618      	mov	r0, r3
 8112c10:	3724      	adds	r7, #36	; 0x24
 8112c12:	46bd      	mov	sp, r7
 8112c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8112c18:	4770      	bx	lr

08112c1a <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8112c1a:	b480      	push	{r7}
 8112c1c:	b08b      	sub	sp, #44	; 0x2c
 8112c1e:	af00      	add	r7, sp, #0
 8112c20:	60f8      	str	r0, [r7, #12]
 8112c22:	60b9      	str	r1, [r7, #8]
 8112c24:	4613      	mov	r3, r2
 8112c26:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8112c28:	68fb      	ldr	r3, [r7, #12]
 8112c2a:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8112c2c:	68bb      	ldr	r3, [r7, #8]
 8112c2e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8112c30:	88fb      	ldrh	r3, [r7, #6]
 8112c32:	089b      	lsrs	r3, r3, #2
 8112c34:	b29b      	uxth	r3, r3
 8112c36:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8112c38:	88fb      	ldrh	r3, [r7, #6]
 8112c3a:	f003 0303 	and.w	r3, r3, #3
 8112c3e:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8112c40:	2300      	movs	r3, #0
 8112c42:	623b      	str	r3, [r7, #32]
 8112c44:	e014      	b.n	8112c70 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8112c46:	69bb      	ldr	r3, [r7, #24]
 8112c48:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8112c4c:	681a      	ldr	r2, [r3, #0]
 8112c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8112c50:	601a      	str	r2, [r3, #0]
    pDest++;
 8112c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8112c54:	3301      	adds	r3, #1
 8112c56:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8112c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8112c5a:	3301      	adds	r3, #1
 8112c5c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8112c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8112c60:	3301      	adds	r3, #1
 8112c62:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8112c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8112c66:	3301      	adds	r3, #1
 8112c68:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8112c6a:	6a3b      	ldr	r3, [r7, #32]
 8112c6c:	3301      	adds	r3, #1
 8112c6e:	623b      	str	r3, [r7, #32]
 8112c70:	6a3a      	ldr	r2, [r7, #32]
 8112c72:	697b      	ldr	r3, [r7, #20]
 8112c74:	429a      	cmp	r2, r3
 8112c76:	d3e6      	bcc.n	8112c46 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8112c78:	8bfb      	ldrh	r3, [r7, #30]
 8112c7a:	2b00      	cmp	r3, #0
 8112c7c:	d01e      	beq.n	8112cbc <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8112c7e:	2300      	movs	r3, #0
 8112c80:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8112c82:	69bb      	ldr	r3, [r7, #24]
 8112c84:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8112c88:	461a      	mov	r2, r3
 8112c8a:	f107 0310 	add.w	r3, r7, #16
 8112c8e:	6812      	ldr	r2, [r2, #0]
 8112c90:	601a      	str	r2, [r3, #0]
	
    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8112c92:	693a      	ldr	r2, [r7, #16]
 8112c94:	6a3b      	ldr	r3, [r7, #32]
 8112c96:	b2db      	uxtb	r3, r3
 8112c98:	00db      	lsls	r3, r3, #3
 8112c9a:	fa22 f303 	lsr.w	r3, r2, r3
 8112c9e:	b2da      	uxtb	r2, r3
 8112ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8112ca2:	701a      	strb	r2, [r3, #0]
      i++;
 8112ca4:	6a3b      	ldr	r3, [r7, #32]
 8112ca6:	3301      	adds	r3, #1
 8112ca8:	623b      	str	r3, [r7, #32]
      pDest++;
 8112caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8112cac:	3301      	adds	r3, #1
 8112cae:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8112cb0:	8bfb      	ldrh	r3, [r7, #30]
 8112cb2:	3b01      	subs	r3, #1
 8112cb4:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8112cb6:	8bfb      	ldrh	r3, [r7, #30]
 8112cb8:	2b00      	cmp	r3, #0
 8112cba:	d1ea      	bne.n	8112c92 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8112cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8112cbe:	4618      	mov	r0, r3
 8112cc0:	372c      	adds	r7, #44	; 0x2c
 8112cc2:	46bd      	mov	sp, r7
 8112cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8112cc8:	4770      	bx	lr

08112cca <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8112cca:	b480      	push	{r7}
 8112ccc:	b085      	sub	sp, #20
 8112cce:	af00      	add	r7, sp, #0
 8112cd0:	6078      	str	r0, [r7, #4]
 8112cd2:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8112cd4:	687b      	ldr	r3, [r7, #4]
 8112cd6:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8112cd8:	683b      	ldr	r3, [r7, #0]
 8112cda:	781b      	ldrb	r3, [r3, #0]
 8112cdc:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8112cde:	683b      	ldr	r3, [r7, #0]
 8112ce0:	785b      	ldrb	r3, [r3, #1]
 8112ce2:	2b01      	cmp	r3, #1
 8112ce4:	d12c      	bne.n	8112d40 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8112ce6:	68bb      	ldr	r3, [r7, #8]
 8112ce8:	015a      	lsls	r2, r3, #5
 8112cea:	68fb      	ldr	r3, [r7, #12]
 8112cec:	4413      	add	r3, r2
 8112cee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8112cf2:	681b      	ldr	r3, [r3, #0]
 8112cf4:	2b00      	cmp	r3, #0
 8112cf6:	db12      	blt.n	8112d1e <USB_EPSetStall+0x54>
 8112cf8:	68bb      	ldr	r3, [r7, #8]
 8112cfa:	2b00      	cmp	r3, #0
 8112cfc:	d00f      	beq.n	8112d1e <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8112cfe:	68bb      	ldr	r3, [r7, #8]
 8112d00:	015a      	lsls	r2, r3, #5
 8112d02:	68fb      	ldr	r3, [r7, #12]
 8112d04:	4413      	add	r3, r2
 8112d06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8112d0a:	681b      	ldr	r3, [r3, #0]
 8112d0c:	68ba      	ldr	r2, [r7, #8]
 8112d0e:	0151      	lsls	r1, r2, #5
 8112d10:	68fa      	ldr	r2, [r7, #12]
 8112d12:	440a      	add	r2, r1
 8112d14:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8112d18:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8112d1c:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8112d1e:	68bb      	ldr	r3, [r7, #8]
 8112d20:	015a      	lsls	r2, r3, #5
 8112d22:	68fb      	ldr	r3, [r7, #12]
 8112d24:	4413      	add	r3, r2
 8112d26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8112d2a:	681b      	ldr	r3, [r3, #0]
 8112d2c:	68ba      	ldr	r2, [r7, #8]
 8112d2e:	0151      	lsls	r1, r2, #5
 8112d30:	68fa      	ldr	r2, [r7, #12]
 8112d32:	440a      	add	r2, r1
 8112d34:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8112d38:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8112d3c:	6013      	str	r3, [r2, #0]
 8112d3e:	e02b      	b.n	8112d98 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8112d40:	68bb      	ldr	r3, [r7, #8]
 8112d42:	015a      	lsls	r2, r3, #5
 8112d44:	68fb      	ldr	r3, [r7, #12]
 8112d46:	4413      	add	r3, r2
 8112d48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8112d4c:	681b      	ldr	r3, [r3, #0]
 8112d4e:	2b00      	cmp	r3, #0
 8112d50:	db12      	blt.n	8112d78 <USB_EPSetStall+0xae>
 8112d52:	68bb      	ldr	r3, [r7, #8]
 8112d54:	2b00      	cmp	r3, #0
 8112d56:	d00f      	beq.n	8112d78 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8112d58:	68bb      	ldr	r3, [r7, #8]
 8112d5a:	015a      	lsls	r2, r3, #5
 8112d5c:	68fb      	ldr	r3, [r7, #12]
 8112d5e:	4413      	add	r3, r2
 8112d60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8112d64:	681b      	ldr	r3, [r3, #0]
 8112d66:	68ba      	ldr	r2, [r7, #8]
 8112d68:	0151      	lsls	r1, r2, #5
 8112d6a:	68fa      	ldr	r2, [r7, #12]
 8112d6c:	440a      	add	r2, r1
 8112d6e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8112d72:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8112d76:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8112d78:	68bb      	ldr	r3, [r7, #8]
 8112d7a:	015a      	lsls	r2, r3, #5
 8112d7c:	68fb      	ldr	r3, [r7, #12]
 8112d7e:	4413      	add	r3, r2
 8112d80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8112d84:	681b      	ldr	r3, [r3, #0]
 8112d86:	68ba      	ldr	r2, [r7, #8]
 8112d88:	0151      	lsls	r1, r2, #5
 8112d8a:	68fa      	ldr	r2, [r7, #12]
 8112d8c:	440a      	add	r2, r1
 8112d8e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8112d92:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8112d96:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8112d98:	2300      	movs	r3, #0
}
 8112d9a:	4618      	mov	r0, r3
 8112d9c:	3714      	adds	r7, #20
 8112d9e:	46bd      	mov	sp, r7
 8112da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8112da4:	4770      	bx	lr

08112da6 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8112da6:	b480      	push	{r7}
 8112da8:	b085      	sub	sp, #20
 8112daa:	af00      	add	r7, sp, #0
 8112dac:	6078      	str	r0, [r7, #4]
 8112dae:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8112db0:	687b      	ldr	r3, [r7, #4]
 8112db2:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8112db4:	683b      	ldr	r3, [r7, #0]
 8112db6:	781b      	ldrb	r3, [r3, #0]
 8112db8:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8112dba:	683b      	ldr	r3, [r7, #0]
 8112dbc:	785b      	ldrb	r3, [r3, #1]
 8112dbe:	2b01      	cmp	r3, #1
 8112dc0:	d128      	bne.n	8112e14 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8112dc2:	68bb      	ldr	r3, [r7, #8]
 8112dc4:	015a      	lsls	r2, r3, #5
 8112dc6:	68fb      	ldr	r3, [r7, #12]
 8112dc8:	4413      	add	r3, r2
 8112dca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8112dce:	681b      	ldr	r3, [r3, #0]
 8112dd0:	68ba      	ldr	r2, [r7, #8]
 8112dd2:	0151      	lsls	r1, r2, #5
 8112dd4:	68fa      	ldr	r2, [r7, #12]
 8112dd6:	440a      	add	r2, r1
 8112dd8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8112ddc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8112de0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8112de2:	683b      	ldr	r3, [r7, #0]
 8112de4:	78db      	ldrb	r3, [r3, #3]
 8112de6:	2b03      	cmp	r3, #3
 8112de8:	d003      	beq.n	8112df2 <USB_EPClearStall+0x4c>
 8112dea:	683b      	ldr	r3, [r7, #0]
 8112dec:	78db      	ldrb	r3, [r3, #3]
 8112dee:	2b02      	cmp	r3, #2
 8112df0:	d138      	bne.n	8112e64 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8112df2:	68bb      	ldr	r3, [r7, #8]
 8112df4:	015a      	lsls	r2, r3, #5
 8112df6:	68fb      	ldr	r3, [r7, #12]
 8112df8:	4413      	add	r3, r2
 8112dfa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8112dfe:	681b      	ldr	r3, [r3, #0]
 8112e00:	68ba      	ldr	r2, [r7, #8]
 8112e02:	0151      	lsls	r1, r2, #5
 8112e04:	68fa      	ldr	r2, [r7, #12]
 8112e06:	440a      	add	r2, r1
 8112e08:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8112e0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8112e10:	6013      	str	r3, [r2, #0]
 8112e12:	e027      	b.n	8112e64 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8112e14:	68bb      	ldr	r3, [r7, #8]
 8112e16:	015a      	lsls	r2, r3, #5
 8112e18:	68fb      	ldr	r3, [r7, #12]
 8112e1a:	4413      	add	r3, r2
 8112e1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8112e20:	681b      	ldr	r3, [r3, #0]
 8112e22:	68ba      	ldr	r2, [r7, #8]
 8112e24:	0151      	lsls	r1, r2, #5
 8112e26:	68fa      	ldr	r2, [r7, #12]
 8112e28:	440a      	add	r2, r1
 8112e2a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8112e2e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8112e32:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8112e34:	683b      	ldr	r3, [r7, #0]
 8112e36:	78db      	ldrb	r3, [r3, #3]
 8112e38:	2b03      	cmp	r3, #3
 8112e3a:	d003      	beq.n	8112e44 <USB_EPClearStall+0x9e>
 8112e3c:	683b      	ldr	r3, [r7, #0]
 8112e3e:	78db      	ldrb	r3, [r3, #3]
 8112e40:	2b02      	cmp	r3, #2
 8112e42:	d10f      	bne.n	8112e64 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8112e44:	68bb      	ldr	r3, [r7, #8]
 8112e46:	015a      	lsls	r2, r3, #5
 8112e48:	68fb      	ldr	r3, [r7, #12]
 8112e4a:	4413      	add	r3, r2
 8112e4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8112e50:	681b      	ldr	r3, [r3, #0]
 8112e52:	68ba      	ldr	r2, [r7, #8]
 8112e54:	0151      	lsls	r1, r2, #5
 8112e56:	68fa      	ldr	r2, [r7, #12]
 8112e58:	440a      	add	r2, r1
 8112e5a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8112e5e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8112e62:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8112e64:	2300      	movs	r3, #0
}
 8112e66:	4618      	mov	r0, r3
 8112e68:	3714      	adds	r7, #20
 8112e6a:	46bd      	mov	sp, r7
 8112e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8112e70:	4770      	bx	lr

08112e72 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8112e72:	b480      	push	{r7}
 8112e74:	b085      	sub	sp, #20
 8112e76:	af00      	add	r7, sp, #0
 8112e78:	6078      	str	r0, [r7, #4]
 8112e7a:	460b      	mov	r3, r1
 8112e7c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8112e7e:	687b      	ldr	r3, [r7, #4]
 8112e80:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8112e82:	68fb      	ldr	r3, [r7, #12]
 8112e84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8112e88:	681b      	ldr	r3, [r3, #0]
 8112e8a:	68fa      	ldr	r2, [r7, #12]
 8112e8c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8112e90:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8112e94:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8112e96:	68fb      	ldr	r3, [r7, #12]
 8112e98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8112e9c:	681a      	ldr	r2, [r3, #0]
 8112e9e:	78fb      	ldrb	r3, [r7, #3]
 8112ea0:	011b      	lsls	r3, r3, #4
 8112ea2:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8112ea6:	68f9      	ldr	r1, [r7, #12]
 8112ea8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8112eac:	4313      	orrs	r3, r2
 8112eae:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8112eb0:	2300      	movs	r3, #0
}
 8112eb2:	4618      	mov	r0, r3
 8112eb4:	3714      	adds	r7, #20
 8112eb6:	46bd      	mov	sp, r7
 8112eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8112ebc:	4770      	bx	lr

08112ebe <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8112ebe:	b480      	push	{r7}
 8112ec0:	b085      	sub	sp, #20
 8112ec2:	af00      	add	r7, sp, #0
 8112ec4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8112ec6:	687b      	ldr	r3, [r7, #4]
 8112ec8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8112eca:	68fb      	ldr	r3, [r7, #12]
 8112ecc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8112ed0:	681b      	ldr	r3, [r3, #0]
 8112ed2:	68fa      	ldr	r2, [r7, #12]
 8112ed4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8112ed8:	f023 0303 	bic.w	r3, r3, #3
 8112edc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8112ede:	68fb      	ldr	r3, [r7, #12]
 8112ee0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8112ee4:	685b      	ldr	r3, [r3, #4]
 8112ee6:	68fa      	ldr	r2, [r7, #12]
 8112ee8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8112eec:	f023 0302 	bic.w	r3, r3, #2
 8112ef0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8112ef2:	2300      	movs	r3, #0
}
 8112ef4:	4618      	mov	r0, r3
 8112ef6:	3714      	adds	r7, #20
 8112ef8:	46bd      	mov	sp, r7
 8112efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8112efe:	4770      	bx	lr

08112f00 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8112f00:	b480      	push	{r7}
 8112f02:	b085      	sub	sp, #20
 8112f04:	af00      	add	r7, sp, #0
 8112f06:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8112f08:	687b      	ldr	r3, [r7, #4]
 8112f0a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8112f0c:	68fb      	ldr	r3, [r7, #12]
 8112f0e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8112f12:	681b      	ldr	r3, [r3, #0]
 8112f14:	68fa      	ldr	r2, [r7, #12]
 8112f16:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8112f1a:	f023 0303 	bic.w	r3, r3, #3
 8112f1e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8112f20:	68fb      	ldr	r3, [r7, #12]
 8112f22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8112f26:	685b      	ldr	r3, [r3, #4]
 8112f28:	68fa      	ldr	r2, [r7, #12]
 8112f2a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8112f2e:	f043 0302 	orr.w	r3, r3, #2
 8112f32:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8112f34:	2300      	movs	r3, #0
}
 8112f36:	4618      	mov	r0, r3
 8112f38:	3714      	adds	r7, #20
 8112f3a:	46bd      	mov	sp, r7
 8112f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8112f40:	4770      	bx	lr

08112f42 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8112f42:	b480      	push	{r7}
 8112f44:	b085      	sub	sp, #20
 8112f46:	af00      	add	r7, sp, #0
 8112f48:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8112f4a:	687b      	ldr	r3, [r7, #4]
 8112f4c:	695b      	ldr	r3, [r3, #20]
 8112f4e:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8112f50:	687b      	ldr	r3, [r7, #4]
 8112f52:	699b      	ldr	r3, [r3, #24]
 8112f54:	68fa      	ldr	r2, [r7, #12]
 8112f56:	4013      	ands	r3, r2
 8112f58:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8112f5a:	68fb      	ldr	r3, [r7, #12]
}
 8112f5c:	4618      	mov	r0, r3
 8112f5e:	3714      	adds	r7, #20
 8112f60:	46bd      	mov	sp, r7
 8112f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8112f66:	4770      	bx	lr

08112f68 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8112f68:	b480      	push	{r7}
 8112f6a:	b085      	sub	sp, #20
 8112f6c:	af00      	add	r7, sp, #0
 8112f6e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8112f70:	687b      	ldr	r3, [r7, #4]
 8112f72:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8112f74:	68fb      	ldr	r3, [r7, #12]
 8112f76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8112f7a:	699b      	ldr	r3, [r3, #24]
 8112f7c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8112f7e:	68fb      	ldr	r3, [r7, #12]
 8112f80:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8112f84:	69db      	ldr	r3, [r3, #28]
 8112f86:	68ba      	ldr	r2, [r7, #8]
 8112f88:	4013      	ands	r3, r2
 8112f8a:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8112f8c:	68bb      	ldr	r3, [r7, #8]
 8112f8e:	0c1b      	lsrs	r3, r3, #16
}
 8112f90:	4618      	mov	r0, r3
 8112f92:	3714      	adds	r7, #20
 8112f94:	46bd      	mov	sp, r7
 8112f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8112f9a:	4770      	bx	lr

08112f9c <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8112f9c:	b480      	push	{r7}
 8112f9e:	b085      	sub	sp, #20
 8112fa0:	af00      	add	r7, sp, #0
 8112fa2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8112fa4:	687b      	ldr	r3, [r7, #4]
 8112fa6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8112fa8:	68fb      	ldr	r3, [r7, #12]
 8112faa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8112fae:	699b      	ldr	r3, [r3, #24]
 8112fb0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8112fb2:	68fb      	ldr	r3, [r7, #12]
 8112fb4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8112fb8:	69db      	ldr	r3, [r3, #28]
 8112fba:	68ba      	ldr	r2, [r7, #8]
 8112fbc:	4013      	ands	r3, r2
 8112fbe:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8112fc0:	68bb      	ldr	r3, [r7, #8]
 8112fc2:	b29b      	uxth	r3, r3
}
 8112fc4:	4618      	mov	r0, r3
 8112fc6:	3714      	adds	r7, #20
 8112fc8:	46bd      	mov	sp, r7
 8112fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8112fce:	4770      	bx	lr

08112fd0 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8112fd0:	b480      	push	{r7}
 8112fd2:	b085      	sub	sp, #20
 8112fd4:	af00      	add	r7, sp, #0
 8112fd6:	6078      	str	r0, [r7, #4]
 8112fd8:	460b      	mov	r3, r1
 8112fda:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8112fdc:	687b      	ldr	r3, [r7, #4]
 8112fde:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8112fe0:	78fb      	ldrb	r3, [r7, #3]
 8112fe2:	015a      	lsls	r2, r3, #5
 8112fe4:	68fb      	ldr	r3, [r7, #12]
 8112fe6:	4413      	add	r3, r2
 8112fe8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8112fec:	689b      	ldr	r3, [r3, #8]
 8112fee:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8112ff0:	68fb      	ldr	r3, [r7, #12]
 8112ff2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8112ff6:	695b      	ldr	r3, [r3, #20]
 8112ff8:	68ba      	ldr	r2, [r7, #8]
 8112ffa:	4013      	ands	r3, r2
 8112ffc:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8112ffe:	68bb      	ldr	r3, [r7, #8]
}
 8113000:	4618      	mov	r0, r3
 8113002:	3714      	adds	r7, #20
 8113004:	46bd      	mov	sp, r7
 8113006:	f85d 7b04 	ldr.w	r7, [sp], #4
 811300a:	4770      	bx	lr

0811300c <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 811300c:	b480      	push	{r7}
 811300e:	b087      	sub	sp, #28
 8113010:	af00      	add	r7, sp, #0
 8113012:	6078      	str	r0, [r7, #4]
 8113014:	460b      	mov	r3, r1
 8113016:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8113018:	687b      	ldr	r3, [r7, #4]
 811301a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 811301c:	697b      	ldr	r3, [r7, #20]
 811301e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8113022:	691b      	ldr	r3, [r3, #16]
 8113024:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8113026:	697b      	ldr	r3, [r7, #20]
 8113028:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 811302c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 811302e:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8113030:	78fb      	ldrb	r3, [r7, #3]
 8113032:	f003 030f 	and.w	r3, r3, #15
 8113036:	68fa      	ldr	r2, [r7, #12]
 8113038:	fa22 f303 	lsr.w	r3, r2, r3
 811303c:	01db      	lsls	r3, r3, #7
 811303e:	b2db      	uxtb	r3, r3
 8113040:	693a      	ldr	r2, [r7, #16]
 8113042:	4313      	orrs	r3, r2
 8113044:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8113046:	78fb      	ldrb	r3, [r7, #3]
 8113048:	015a      	lsls	r2, r3, #5
 811304a:	697b      	ldr	r3, [r7, #20]
 811304c:	4413      	add	r3, r2
 811304e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8113052:	689b      	ldr	r3, [r3, #8]
 8113054:	693a      	ldr	r2, [r7, #16]
 8113056:	4013      	ands	r3, r2
 8113058:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 811305a:	68bb      	ldr	r3, [r7, #8]
}
 811305c:	4618      	mov	r0, r3
 811305e:	371c      	adds	r7, #28
 8113060:	46bd      	mov	sp, r7
 8113062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8113066:	4770      	bx	lr

08113068 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8113068:	b480      	push	{r7}
 811306a:	b083      	sub	sp, #12
 811306c:	af00      	add	r7, sp, #0
 811306e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8113070:	687b      	ldr	r3, [r7, #4]
 8113072:	695b      	ldr	r3, [r3, #20]
 8113074:	f003 0301 	and.w	r3, r3, #1
}
 8113078:	4618      	mov	r0, r3
 811307a:	370c      	adds	r7, #12
 811307c:	46bd      	mov	sp, r7
 811307e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8113082:	4770      	bx	lr

08113084 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8113084:	b480      	push	{r7}
 8113086:	b085      	sub	sp, #20
 8113088:	af00      	add	r7, sp, #0
 811308a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 811308c:	687b      	ldr	r3, [r7, #4]
 811308e:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8113090:	68fb      	ldr	r3, [r7, #12]
 8113092:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8113096:	681b      	ldr	r3, [r3, #0]
 8113098:	68fa      	ldr	r2, [r7, #12]
 811309a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 811309e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 81130a2:	f023 0307 	bic.w	r3, r3, #7
 81130a6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 81130a8:	68fb      	ldr	r3, [r7, #12]
 81130aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 81130ae:	685b      	ldr	r3, [r3, #4]
 81130b0:	68fa      	ldr	r2, [r7, #12]
 81130b2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 81130b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 81130ba:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 81130bc:	2300      	movs	r3, #0
}
 81130be:	4618      	mov	r0, r3
 81130c0:	3714      	adds	r7, #20
 81130c2:	46bd      	mov	sp, r7
 81130c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81130c8:	4770      	bx	lr
	...

081130cc <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 81130cc:	b480      	push	{r7}
 81130ce:	b087      	sub	sp, #28
 81130d0:	af00      	add	r7, sp, #0
 81130d2:	60f8      	str	r0, [r7, #12]
 81130d4:	460b      	mov	r3, r1
 81130d6:	607a      	str	r2, [r7, #4]
 81130d8:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 81130da:	68fb      	ldr	r3, [r7, #12]
 81130dc:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 81130de:	68fb      	ldr	r3, [r7, #12]
 81130e0:	333c      	adds	r3, #60	; 0x3c
 81130e2:	3304      	adds	r3, #4
 81130e4:	681b      	ldr	r3, [r3, #0]
 81130e6:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 81130e8:	693b      	ldr	r3, [r7, #16]
 81130ea:	4a26      	ldr	r2, [pc, #152]	; (8113184 <USB_EP0_OutStart+0xb8>)
 81130ec:	4293      	cmp	r3, r2
 81130ee:	d90a      	bls.n	8113106 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 81130f0:	697b      	ldr	r3, [r7, #20]
 81130f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 81130f6:	681b      	ldr	r3, [r3, #0]
 81130f8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 81130fc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8113100:	d101      	bne.n	8113106 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8113102:	2300      	movs	r3, #0
 8113104:	e037      	b.n	8113176 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8113106:	697b      	ldr	r3, [r7, #20]
 8113108:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 811310c:	461a      	mov	r2, r3
 811310e:	2300      	movs	r3, #0
 8113110:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8113112:	697b      	ldr	r3, [r7, #20]
 8113114:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8113118:	691b      	ldr	r3, [r3, #16]
 811311a:	697a      	ldr	r2, [r7, #20]
 811311c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8113120:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8113124:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8113126:	697b      	ldr	r3, [r7, #20]
 8113128:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 811312c:	691b      	ldr	r3, [r3, #16]
 811312e:	697a      	ldr	r2, [r7, #20]
 8113130:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8113134:	f043 0318 	orr.w	r3, r3, #24
 8113138:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 811313a:	697b      	ldr	r3, [r7, #20]
 811313c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8113140:	691b      	ldr	r3, [r3, #16]
 8113142:	697a      	ldr	r2, [r7, #20]
 8113144:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8113148:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 811314c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 811314e:	7afb      	ldrb	r3, [r7, #11]
 8113150:	2b01      	cmp	r3, #1
 8113152:	d10f      	bne.n	8113174 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8113154:	697b      	ldr	r3, [r7, #20]
 8113156:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 811315a:	461a      	mov	r2, r3
 811315c:	687b      	ldr	r3, [r7, #4]
 811315e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8113160:	697b      	ldr	r3, [r7, #20]
 8113162:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8113166:	681b      	ldr	r3, [r3, #0]
 8113168:	697a      	ldr	r2, [r7, #20]
 811316a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 811316e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8113172:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8113174:	2300      	movs	r3, #0
}
 8113176:	4618      	mov	r0, r3
 8113178:	371c      	adds	r7, #28
 811317a:	46bd      	mov	sp, r7
 811317c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8113180:	4770      	bx	lr
 8113182:	bf00      	nop
 8113184:	4f54300a 	.word	0x4f54300a

08113188 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8113188:	b480      	push	{r7}
 811318a:	b085      	sub	sp, #20
 811318c:	af00      	add	r7, sp, #0
 811318e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8113190:	2300      	movs	r3, #0
 8113192:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8113194:	68fb      	ldr	r3, [r7, #12]
 8113196:	3301      	adds	r3, #1
 8113198:	60fb      	str	r3, [r7, #12]
 811319a:	68fb      	ldr	r3, [r7, #12]
 811319c:	4a13      	ldr	r2, [pc, #76]	; (81131ec <USB_CoreReset+0x64>)
 811319e:	4293      	cmp	r3, r2
 81131a0:	d901      	bls.n	81131a6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 81131a2:	2303      	movs	r3, #3
 81131a4:	e01b      	b.n	81131de <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 81131a6:	687b      	ldr	r3, [r7, #4]
 81131a8:	691b      	ldr	r3, [r3, #16]
 81131aa:	2b00      	cmp	r3, #0
 81131ac:	daf2      	bge.n	8113194 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 81131ae:	2300      	movs	r3, #0
 81131b0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 81131b2:	687b      	ldr	r3, [r7, #4]
 81131b4:	691b      	ldr	r3, [r3, #16]
 81131b6:	f043 0201 	orr.w	r2, r3, #1
 81131ba:	687b      	ldr	r3, [r7, #4]
 81131bc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 81131be:	68fb      	ldr	r3, [r7, #12]
 81131c0:	3301      	adds	r3, #1
 81131c2:	60fb      	str	r3, [r7, #12]
 81131c4:	68fb      	ldr	r3, [r7, #12]
 81131c6:	4a09      	ldr	r2, [pc, #36]	; (81131ec <USB_CoreReset+0x64>)
 81131c8:	4293      	cmp	r3, r2
 81131ca:	d901      	bls.n	81131d0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 81131cc:	2303      	movs	r3, #3
 81131ce:	e006      	b.n	81131de <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 81131d0:	687b      	ldr	r3, [r7, #4]
 81131d2:	691b      	ldr	r3, [r3, #16]
 81131d4:	f003 0301 	and.w	r3, r3, #1
 81131d8:	2b01      	cmp	r3, #1
 81131da:	d0f0      	beq.n	81131be <USB_CoreReset+0x36>

  return HAL_OK;
 81131dc:	2300      	movs	r3, #0
}
 81131de:	4618      	mov	r0, r3
 81131e0:	3714      	adds	r7, #20
 81131e2:	46bd      	mov	sp, r7
 81131e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81131e8:	4770      	bx	lr
 81131ea:	bf00      	nop
 81131ec:	00030d40 	.word	0x00030d40

081131f0 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 81131f0:	b580      	push	{r7, lr}
 81131f2:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 81131f4:	4904      	ldr	r1, [pc, #16]	; (8113208 <MX_FATFS_Init+0x18>)
 81131f6:	4805      	ldr	r0, [pc, #20]	; (811320c <MX_FATFS_Init+0x1c>)
 81131f8:	f001 feea 	bl	8114fd0 <FATFS_LinkDriver>
 81131fc:	4603      	mov	r3, r0
 81131fe:	461a      	mov	r2, r3
 8113200:	4b03      	ldr	r3, [pc, #12]	; (8113210 <MX_FATFS_Init+0x20>)
 8113202:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8113204:	bf00      	nop
 8113206:	bd80      	pop	{r7, pc}
 8113208:	100055b0 	.word	0x100055b0
 811320c:	0811b4e4 	.word	0x0811b4e4
 8113210:	100055ac 	.word	0x100055ac

08113214 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8113214:	b580      	push	{r7, lr}
 8113216:	b082      	sub	sp, #8
 8113218:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 811321a:	2300      	movs	r3, #0
 811321c:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 811321e:	f000 f885 	bl	811332c <BSP_SD_IsDetected>
 8113222:	4603      	mov	r3, r0
 8113224:	2b01      	cmp	r3, #1
 8113226:	d001      	beq.n	811322c <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 8113228:	2302      	movs	r3, #2
 811322a:	e012      	b.n	8113252 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 811322c:	480b      	ldr	r0, [pc, #44]	; (811325c <BSP_SD_Init+0x48>)
 811322e:	f7f8 fe99 	bl	810bf64 <HAL_SD_Init>
 8113232:	4603      	mov	r3, r0
 8113234:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8113236:	79fb      	ldrb	r3, [r7, #7]
 8113238:	2b00      	cmp	r3, #0
 811323a:	d109      	bne.n	8113250 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 811323c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8113240:	4806      	ldr	r0, [pc, #24]	; (811325c <BSP_SD_Init+0x48>)
 8113242:	f7f9 fd5d 	bl	810cd00 <HAL_SD_ConfigWideBusOperation>
 8113246:	4603      	mov	r3, r0
 8113248:	2b00      	cmp	r3, #0
 811324a:	d001      	beq.n	8113250 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 811324c:	2301      	movs	r3, #1
 811324e:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8113250:	79fb      	ldrb	r3, [r7, #7]
}
 8113252:	4618      	mov	r0, r3
 8113254:	3708      	adds	r7, #8
 8113256:	46bd      	mov	sp, r7
 8113258:	bd80      	pop	{r7, pc}
 811325a:	bf00      	nop
 811325c:	10005198 	.word	0x10005198

08113260 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8113260:	b580      	push	{r7, lr}
 8113262:	b086      	sub	sp, #24
 8113264:	af00      	add	r7, sp, #0
 8113266:	60f8      	str	r0, [r7, #12]
 8113268:	60b9      	str	r1, [r7, #8]
 811326a:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 811326c:	2300      	movs	r3, #0
 811326e:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8113270:	687b      	ldr	r3, [r7, #4]
 8113272:	68ba      	ldr	r2, [r7, #8]
 8113274:	68f9      	ldr	r1, [r7, #12]
 8113276:	4806      	ldr	r0, [pc, #24]	; (8113290 <BSP_SD_ReadBlocks_DMA+0x30>)
 8113278:	f7f8 ffa0 	bl	810c1bc <HAL_SD_ReadBlocks_DMA>
 811327c:	4603      	mov	r3, r0
 811327e:	2b00      	cmp	r3, #0
 8113280:	d001      	beq.n	8113286 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8113282:	2301      	movs	r3, #1
 8113284:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8113286:	7dfb      	ldrb	r3, [r7, #23]
}
 8113288:	4618      	mov	r0, r3
 811328a:	3718      	adds	r7, #24
 811328c:	46bd      	mov	sp, r7
 811328e:	bd80      	pop	{r7, pc}
 8113290:	10005198 	.word	0x10005198

08113294 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8113294:	b580      	push	{r7, lr}
 8113296:	b086      	sub	sp, #24
 8113298:	af00      	add	r7, sp, #0
 811329a:	60f8      	str	r0, [r7, #12]
 811329c:	60b9      	str	r1, [r7, #8]
 811329e:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 81132a0:	2300      	movs	r3, #0
 81132a2:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 81132a4:	687b      	ldr	r3, [r7, #4]
 81132a6:	68ba      	ldr	r2, [r7, #8]
 81132a8:	68f9      	ldr	r1, [r7, #12]
 81132aa:	4806      	ldr	r0, [pc, #24]	; (81132c4 <BSP_SD_WriteBlocks_DMA+0x30>)
 81132ac:	f7f9 f82e 	bl	810c30c <HAL_SD_WriteBlocks_DMA>
 81132b0:	4603      	mov	r3, r0
 81132b2:	2b00      	cmp	r3, #0
 81132b4:	d001      	beq.n	81132ba <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 81132b6:	2301      	movs	r3, #1
 81132b8:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 81132ba:	7dfb      	ldrb	r3, [r7, #23]
}
 81132bc:	4618      	mov	r0, r3
 81132be:	3718      	adds	r7, #24
 81132c0:	46bd      	mov	sp, r7
 81132c2:	bd80      	pop	{r7, pc}
 81132c4:	10005198 	.word	0x10005198

081132c8 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 81132c8:	b580      	push	{r7, lr}
 81132ca:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 81132cc:	4805      	ldr	r0, [pc, #20]	; (81132e4 <BSP_SD_GetCardState+0x1c>)
 81132ce:	f7f9 fe2b 	bl	810cf28 <HAL_SD_GetCardState>
 81132d2:	4603      	mov	r3, r0
 81132d4:	2b04      	cmp	r3, #4
 81132d6:	bf14      	ite	ne
 81132d8:	2301      	movne	r3, #1
 81132da:	2300      	moveq	r3, #0
 81132dc:	b2db      	uxtb	r3, r3
}
 81132de:	4618      	mov	r0, r3
 81132e0:	bd80      	pop	{r7, pc}
 81132e2:	bf00      	nop
 81132e4:	10005198 	.word	0x10005198

081132e8 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 81132e8:	b580      	push	{r7, lr}
 81132ea:	b082      	sub	sp, #8
 81132ec:	af00      	add	r7, sp, #0
 81132ee:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 81132f0:	6879      	ldr	r1, [r7, #4]
 81132f2:	4803      	ldr	r0, [pc, #12]	; (8113300 <BSP_SD_GetCardInfo+0x18>)
 81132f4:	f7f9 fcd8 	bl	810cca8 <HAL_SD_GetCardInfo>
}
 81132f8:	bf00      	nop
 81132fa:	3708      	adds	r7, #8
 81132fc:	46bd      	mov	sp, r7
 81132fe:	bd80      	pop	{r7, pc}
 8113300:	10005198 	.word	0x10005198

08113304 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8113304:	b580      	push	{r7, lr}
 8113306:	b082      	sub	sp, #8
 8113308:	af00      	add	r7, sp, #0
 811330a:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 811330c:	f000 f990 	bl	8113630 <BSP_SD_WriteCpltCallback>
}
 8113310:	bf00      	nop
 8113312:	3708      	adds	r7, #8
 8113314:	46bd      	mov	sp, r7
 8113316:	bd80      	pop	{r7, pc}

08113318 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8113318:	b580      	push	{r7, lr}
 811331a:	b082      	sub	sp, #8
 811331c:	af00      	add	r7, sp, #0
 811331e:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8113320:	f000 f998 	bl	8113654 <BSP_SD_ReadCpltCallback>
}
 8113324:	bf00      	nop
 8113326:	3708      	adds	r7, #8
 8113328:	46bd      	mov	sp, r7
 811332a:	bd80      	pop	{r7, pc}

0811332c <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 811332c:	b480      	push	{r7}
 811332e:	b083      	sub	sp, #12
 8113330:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8113332:	2301      	movs	r3, #1
 8113334:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN IsDetectedSection */
  /* user code can be inserted here */
  /* USER CODE END IsDetectedSection */

  return status;
 8113336:	79fb      	ldrb	r3, [r7, #7]
 8113338:	b2db      	uxtb	r3, r3
}
 811333a:	4618      	mov	r0, r3
 811333c:	370c      	adds	r7, #12
 811333e:	46bd      	mov	sp, r7
 8113340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8113344:	4770      	bx	lr

08113346 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8113346:	b580      	push	{r7, lr}
 8113348:	b084      	sub	sp, #16
 811334a:	af00      	add	r7, sp, #0
 811334c:	6078      	str	r0, [r7, #4]
  /* block until SDIO peripheral is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
  while( osKernelSysTick() - timer < timeout)
#else
  timer = osKernelGetTickCount();
 811334e:	f001 feff 	bl	8115150 <osKernelGetTickCount>
 8113352:	60f8      	str	r0, [r7, #12]
  while( osKernelGetTickCount() - timer < timeout)
 8113354:	e006      	b.n	8113364 <SD_CheckStatusWithTimeout+0x1e>
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8113356:	f7ff ffb7 	bl	81132c8 <BSP_SD_GetCardState>
 811335a:	4603      	mov	r3, r0
 811335c:	2b00      	cmp	r3, #0
 811335e:	d101      	bne.n	8113364 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8113360:	2300      	movs	r3, #0
 8113362:	e009      	b.n	8113378 <SD_CheckStatusWithTimeout+0x32>
  while( osKernelGetTickCount() - timer < timeout)
 8113364:	f001 fef4 	bl	8115150 <osKernelGetTickCount>
 8113368:	4602      	mov	r2, r0
 811336a:	68fb      	ldr	r3, [r7, #12]
 811336c:	1ad3      	subs	r3, r2, r3
 811336e:	687a      	ldr	r2, [r7, #4]
 8113370:	429a      	cmp	r2, r3
 8113372:	d8f0      	bhi.n	8113356 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8113374:	f04f 33ff 	mov.w	r3, #4294967295
}
 8113378:	4618      	mov	r0, r3
 811337a:	3710      	adds	r7, #16
 811337c:	46bd      	mov	sp, r7
 811337e:	bd80      	pop	{r7, pc}

08113380 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8113380:	b580      	push	{r7, lr}
 8113382:	b082      	sub	sp, #8
 8113384:	af00      	add	r7, sp, #0
 8113386:	4603      	mov	r3, r0
 8113388:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 811338a:	4b0b      	ldr	r3, [pc, #44]	; (81133b8 <SD_CheckStatus+0x38>)
 811338c:	2201      	movs	r2, #1
 811338e:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8113390:	f7ff ff9a 	bl	81132c8 <BSP_SD_GetCardState>
 8113394:	4603      	mov	r3, r0
 8113396:	2b00      	cmp	r3, #0
 8113398:	d107      	bne.n	81133aa <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 811339a:	4b07      	ldr	r3, [pc, #28]	; (81133b8 <SD_CheckStatus+0x38>)
 811339c:	781b      	ldrb	r3, [r3, #0]
 811339e:	b2db      	uxtb	r3, r3
 81133a0:	f023 0301 	bic.w	r3, r3, #1
 81133a4:	b2da      	uxtb	r2, r3
 81133a6:	4b04      	ldr	r3, [pc, #16]	; (81133b8 <SD_CheckStatus+0x38>)
 81133a8:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 81133aa:	4b03      	ldr	r3, [pc, #12]	; (81133b8 <SD_CheckStatus+0x38>)
 81133ac:	781b      	ldrb	r3, [r3, #0]
 81133ae:	b2db      	uxtb	r3, r3
}
 81133b0:	4618      	mov	r0, r3
 81133b2:	3708      	adds	r7, #8
 81133b4:	46bd      	mov	sp, r7
 81133b6:	bd80      	pop	{r7, pc}
 81133b8:	1000000d 	.word	0x1000000d

081133bc <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 81133bc:	b580      	push	{r7, lr}
 81133be:	b082      	sub	sp, #8
 81133c0:	af00      	add	r7, sp, #0
 81133c2:	4603      	mov	r3, r0
 81133c4:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 81133c6:	4b1c      	ldr	r3, [pc, #112]	; (8113438 <SD_initialize+0x7c>)
 81133c8:	2201      	movs	r2, #1
 81133ca:	701a      	strb	r2, [r3, #0]
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
#else
  if(osKernelGetState() == osKernelRunning)
 81133cc:	f001 fe78 	bl	81150c0 <osKernelGetState>
 81133d0:	4603      	mov	r3, r0
 81133d2:	2b02      	cmp	r3, #2
 81133d4:	d129      	bne.n	811342a <SD_initialize+0x6e>
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 81133d6:	f7ff ff1d 	bl	8113214 <BSP_SD_Init>
 81133da:	4603      	mov	r3, r0
 81133dc:	2b00      	cmp	r3, #0
 81133de:	d107      	bne.n	81133f0 <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 81133e0:	79fb      	ldrb	r3, [r7, #7]
 81133e2:	4618      	mov	r0, r3
 81133e4:	f7ff ffcc 	bl	8113380 <SD_CheckStatus>
 81133e8:	4603      	mov	r3, r0
 81133ea:	461a      	mov	r2, r3
 81133ec:	4b12      	ldr	r3, [pc, #72]	; (8113438 <SD_initialize+0x7c>)
 81133ee:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 81133f0:	4b11      	ldr	r3, [pc, #68]	; (8113438 <SD_initialize+0x7c>)
 81133f2:	781b      	ldrb	r3, [r3, #0]
 81133f4:	b2db      	uxtb	r3, r3
 81133f6:	2b01      	cmp	r3, #1
 81133f8:	d017      	beq.n	811342a <SD_initialize+0x6e>
    {
      if (SDQueueID == NULL)
 81133fa:	4b10      	ldr	r3, [pc, #64]	; (811343c <SD_initialize+0x80>)
 81133fc:	681b      	ldr	r3, [r3, #0]
 81133fe:	2b00      	cmp	r3, #0
 8113400:	d107      	bne.n	8113412 <SD_initialize+0x56>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
 8113402:	2200      	movs	r2, #0
 8113404:	2102      	movs	r1, #2
 8113406:	200a      	movs	r0, #10
 8113408:	f001 ff64 	bl	81152d4 <osMessageQueueNew>
 811340c:	4603      	mov	r3, r0
 811340e:	4a0b      	ldr	r2, [pc, #44]	; (811343c <SD_initialize+0x80>)
 8113410:	6013      	str	r3, [r2, #0]
#endif
      }

      if (SDQueueID == NULL)
 8113412:	4b0a      	ldr	r3, [pc, #40]	; (811343c <SD_initialize+0x80>)
 8113414:	681b      	ldr	r3, [r3, #0]
 8113416:	2b00      	cmp	r3, #0
 8113418:	d107      	bne.n	811342a <SD_initialize+0x6e>
      {
        Stat |= STA_NOINIT;
 811341a:	4b07      	ldr	r3, [pc, #28]	; (8113438 <SD_initialize+0x7c>)
 811341c:	781b      	ldrb	r3, [r3, #0]
 811341e:	b2db      	uxtb	r3, r3
 8113420:	f043 0301 	orr.w	r3, r3, #1
 8113424:	b2da      	uxtb	r2, r3
 8113426:	4b04      	ldr	r3, [pc, #16]	; (8113438 <SD_initialize+0x7c>)
 8113428:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 811342a:	4b03      	ldr	r3, [pc, #12]	; (8113438 <SD_initialize+0x7c>)
 811342c:	781b      	ldrb	r3, [r3, #0]
 811342e:	b2db      	uxtb	r3, r3
}
 8113430:	4618      	mov	r0, r3
 8113432:	3708      	adds	r7, #8
 8113434:	46bd      	mov	sp, r7
 8113436:	bd80      	pop	{r7, pc}
 8113438:	1000000d 	.word	0x1000000d
 811343c:	10000384 	.word	0x10000384

08113440 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8113440:	b580      	push	{r7, lr}
 8113442:	b082      	sub	sp, #8
 8113444:	af00      	add	r7, sp, #0
 8113446:	4603      	mov	r3, r0
 8113448:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 811344a:	79fb      	ldrb	r3, [r7, #7]
 811344c:	4618      	mov	r0, r3
 811344e:	f7ff ff97 	bl	8113380 <SD_CheckStatus>
 8113452:	4603      	mov	r3, r0
}
 8113454:	4618      	mov	r0, r3
 8113456:	3708      	adds	r7, #8
 8113458:	46bd      	mov	sp, r7
 811345a:	bd80      	pop	{r7, pc}

0811345c <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 811345c:	b580      	push	{r7, lr}
 811345e:	b088      	sub	sp, #32
 8113460:	af00      	add	r7, sp, #0
 8113462:	60b9      	str	r1, [r7, #8]
 8113464:	607a      	str	r2, [r7, #4]
 8113466:	603b      	str	r3, [r7, #0]
 8113468:	4603      	mov	r3, r0
 811346a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 811346c:	2301      	movs	r3, #1
 811346e:	77fb      	strb	r3, [r7, #31]
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8113470:	f247 5030 	movw	r0, #30000	; 0x7530
 8113474:	f7ff ff67 	bl	8113346 <SD_CheckStatusWithTimeout>
 8113478:	4603      	mov	r3, r0
 811347a:	2b00      	cmp	r3, #0
 811347c:	da01      	bge.n	8113482 <SD_read+0x26>
  {
    return res;
 811347e:	7ffb      	ldrb	r3, [r7, #31]
 8113480:	e02f      	b.n	81134e2 <SD_read+0x86>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    uint8_t ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 8113482:	683a      	ldr	r2, [r7, #0]
 8113484:	6879      	ldr	r1, [r7, #4]
 8113486:	68b8      	ldr	r0, [r7, #8]
 8113488:	f7ff feea 	bl	8113260 <BSP_SD_ReadBlocks_DMA>
 811348c:	4603      	mov	r3, r0
 811348e:	77bb      	strb	r3, [r7, #30]

    if (ret == MSD_OK) {
 8113490:	7fbb      	ldrb	r3, [r7, #30]
 8113492:	2b00      	cmp	r3, #0
 8113494:	d124      	bne.n	81134e0 <SD_read+0x84>
      {
        timer = osKernelSysTick();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
#else
          status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 8113496:	4b15      	ldr	r3, [pc, #84]	; (81134ec <SD_read+0x90>)
 8113498:	6818      	ldr	r0, [r3, #0]
 811349a:	f107 0112 	add.w	r1, r7, #18
 811349e:	f247 5330 	movw	r3, #30000	; 0x7530
 81134a2:	2200      	movs	r2, #0
 81134a4:	f001 ffea 	bl	811547c <osMessageQueueGet>
 81134a8:	61b8      	str	r0, [r7, #24]
          if ((status == osOK) && (event == READ_CPLT_MSG))
 81134aa:	69bb      	ldr	r3, [r7, #24]
 81134ac:	2b00      	cmp	r3, #0
 81134ae:	d117      	bne.n	81134e0 <SD_read+0x84>
 81134b0:	8a7b      	ldrh	r3, [r7, #18]
 81134b2:	2b01      	cmp	r3, #1
 81134b4:	d114      	bne.n	81134e0 <SD_read+0x84>
          {
            timer = osKernelGetTickCount();
 81134b6:	f001 fe4b 	bl	8115150 <osKernelGetTickCount>
 81134ba:	6178      	str	r0, [r7, #20]
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 81134bc:	e007      	b.n	81134ce <SD_read+0x72>
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 81134be:	f7ff ff03 	bl	81132c8 <BSP_SD_GetCardState>
 81134c2:	4603      	mov	r3, r0
 81134c4:	2b00      	cmp	r3, #0
 81134c6:	d102      	bne.n	81134ce <SD_read+0x72>
              {
                res = RES_OK;
 81134c8:	2300      	movs	r3, #0
 81134ca:	77fb      	strb	r3, [r7, #31]
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 81134cc:	e008      	b.n	81134e0 <SD_read+0x84>
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 81134ce:	f001 fe3f 	bl	8115150 <osKernelGetTickCount>
 81134d2:	4602      	mov	r2, r0
 81134d4:	697b      	ldr	r3, [r7, #20]
 81134d6:	1ad3      	subs	r3, r2, r3
 81134d8:	f247 522f 	movw	r2, #29999	; 0x752f
 81134dc:	4293      	cmp	r3, r2
 81134de:	d9ee      	bls.n	81134be <SD_read+0x62>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 81134e0:	7ffb      	ldrb	r3, [r7, #31]
}
 81134e2:	4618      	mov	r0, r3
 81134e4:	3720      	adds	r7, #32
 81134e6:	46bd      	mov	sp, r7
 81134e8:	bd80      	pop	{r7, pc}
 81134ea:	bf00      	nop
 81134ec:	10000384 	.word	0x10000384

081134f0 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 81134f0:	b580      	push	{r7, lr}
 81134f2:	b088      	sub	sp, #32
 81134f4:	af00      	add	r7, sp, #0
 81134f6:	60b9      	str	r1, [r7, #8]
 81134f8:	607a      	str	r2, [r7, #4]
 81134fa:	603b      	str	r3, [r7, #0]
 81134fc:	4603      	mov	r3, r0
 81134fe:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8113500:	2301      	movs	r3, #1
 8113502:	77fb      	strb	r3, [r7, #31]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8113504:	f247 5030 	movw	r0, #30000	; 0x7530
 8113508:	f7ff ff1d 	bl	8113346 <SD_CheckStatusWithTimeout>
 811350c:	4603      	mov	r3, r0
 811350e:	2b00      	cmp	r3, #0
 8113510:	da01      	bge.n	8113516 <SD_write+0x26>
  {
    return res;
 8113512:	7ffb      	ldrb	r3, [r7, #31]
 8113514:	e02d      	b.n	8113572 <SD_write+0x82>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8113516:	683a      	ldr	r2, [r7, #0]
 8113518:	6879      	ldr	r1, [r7, #4]
 811351a:	68b8      	ldr	r0, [r7, #8]
 811351c:	f7ff feba 	bl	8113294 <BSP_SD_WriteBlocks_DMA>
 8113520:	4603      	mov	r3, r0
 8113522:	2b00      	cmp	r3, #0
 8113524:	d124      	bne.n	8113570 <SD_write+0x80>
    if (event.status == osEventMessage)
    {
      if (event.value.v == WRITE_CPLT_MSG)
      {
#else
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 8113526:	4b15      	ldr	r3, [pc, #84]	; (811357c <SD_write+0x8c>)
 8113528:	6818      	ldr	r0, [r3, #0]
 811352a:	f107 0112 	add.w	r1, r7, #18
 811352e:	f247 5330 	movw	r3, #30000	; 0x7530
 8113532:	2200      	movs	r2, #0
 8113534:	f001 ffa2 	bl	811547c <osMessageQueueGet>
 8113538:	61b8      	str	r0, [r7, #24]
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
 811353a:	69bb      	ldr	r3, [r7, #24]
 811353c:	2b00      	cmp	r3, #0
 811353e:	d117      	bne.n	8113570 <SD_write+0x80>
 8113540:	8a7b      	ldrh	r3, [r7, #18]
 8113542:	2b02      	cmp	r3, #2
 8113544:	d114      	bne.n	8113570 <SD_write+0x80>
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
#else
        timer = osKernelGetTickCount();
 8113546:	f001 fe03 	bl	8115150 <osKernelGetTickCount>
 811354a:	6178      	str	r0, [r7, #20]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 811354c:	e007      	b.n	811355e <SD_write+0x6e>
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 811354e:	f7ff febb 	bl	81132c8 <BSP_SD_GetCardState>
 8113552:	4603      	mov	r3, r0
 8113554:	2b00      	cmp	r3, #0
 8113556:	d102      	bne.n	811355e <SD_write+0x6e>
          {
            res = RES_OK;
 8113558:	2300      	movs	r3, #0
 811355a:	77fb      	strb	r3, [r7, #31]
            break;
 811355c:	e008      	b.n	8113570 <SD_write+0x80>
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 811355e:	f001 fdf7 	bl	8115150 <osKernelGetTickCount>
 8113562:	4602      	mov	r2, r0
 8113564:	697b      	ldr	r3, [r7, #20]
 8113566:	1ad3      	subs	r3, r2, r3
 8113568:	f247 522f 	movw	r2, #29999	; 0x752f
 811356c:	4293      	cmp	r3, r2
 811356e:	d9ee      	bls.n	811354e <SD_write+0x5e>
    }

  }
#endif

  return res;
 8113570:	7ffb      	ldrb	r3, [r7, #31]
}
 8113572:	4618      	mov	r0, r3
 8113574:	3720      	adds	r7, #32
 8113576:	46bd      	mov	sp, r7
 8113578:	bd80      	pop	{r7, pc}
 811357a:	bf00      	nop
 811357c:	10000384 	.word	0x10000384

08113580 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8113580:	b580      	push	{r7, lr}
 8113582:	b08c      	sub	sp, #48	; 0x30
 8113584:	af00      	add	r7, sp, #0
 8113586:	4603      	mov	r3, r0
 8113588:	603a      	str	r2, [r7, #0]
 811358a:	71fb      	strb	r3, [r7, #7]
 811358c:	460b      	mov	r3, r1
 811358e:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8113590:	2301      	movs	r3, #1
 8113592:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8113596:	4b25      	ldr	r3, [pc, #148]	; (811362c <SD_ioctl+0xac>)
 8113598:	781b      	ldrb	r3, [r3, #0]
 811359a:	b2db      	uxtb	r3, r3
 811359c:	f003 0301 	and.w	r3, r3, #1
 81135a0:	2b00      	cmp	r3, #0
 81135a2:	d001      	beq.n	81135a8 <SD_ioctl+0x28>
 81135a4:	2303      	movs	r3, #3
 81135a6:	e03c      	b.n	8113622 <SD_ioctl+0xa2>

  switch (cmd)
 81135a8:	79bb      	ldrb	r3, [r7, #6]
 81135aa:	2b03      	cmp	r3, #3
 81135ac:	d834      	bhi.n	8113618 <SD_ioctl+0x98>
 81135ae:	a201      	add	r2, pc, #4	; (adr r2, 81135b4 <SD_ioctl+0x34>)
 81135b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81135b4:	081135c5 	.word	0x081135c5
 81135b8:	081135cd 	.word	0x081135cd
 81135bc:	081135e5 	.word	0x081135e5
 81135c0:	081135ff 	.word	0x081135ff
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 81135c4:	2300      	movs	r3, #0
 81135c6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 81135ca:	e028      	b.n	811361e <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 81135cc:	f107 0308 	add.w	r3, r7, #8
 81135d0:	4618      	mov	r0, r3
 81135d2:	f7ff fe89 	bl	81132e8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 81135d6:	6a3a      	ldr	r2, [r7, #32]
 81135d8:	683b      	ldr	r3, [r7, #0]
 81135da:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 81135dc:	2300      	movs	r3, #0
 81135de:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 81135e2:	e01c      	b.n	811361e <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 81135e4:	f107 0308 	add.w	r3, r7, #8
 81135e8:	4618      	mov	r0, r3
 81135ea:	f7ff fe7d 	bl	81132e8 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 81135ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81135f0:	b29a      	uxth	r2, r3
 81135f2:	683b      	ldr	r3, [r7, #0]
 81135f4:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 81135f6:	2300      	movs	r3, #0
 81135f8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 81135fc:	e00f      	b.n	811361e <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 81135fe:	f107 0308 	add.w	r3, r7, #8
 8113602:	4618      	mov	r0, r3
 8113604:	f7ff fe70 	bl	81132e8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8113608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 811360a:	0a5a      	lsrs	r2, r3, #9
 811360c:	683b      	ldr	r3, [r7, #0]
 811360e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8113610:	2300      	movs	r3, #0
 8113612:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8113616:	e002      	b.n	811361e <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8113618:	2304      	movs	r3, #4
 811361a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 811361e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8113622:	4618      	mov	r0, r3
 8113624:	3730      	adds	r7, #48	; 0x30
 8113626:	46bd      	mov	sp, r7
 8113628:	bd80      	pop	{r7, pc}
 811362a:	bf00      	nop
 811362c:	1000000d 	.word	0x1000000d

08113630 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 8113630:	b580      	push	{r7, lr}
 8113632:	b082      	sub	sp, #8
 8113634:	af00      	add	r7, sp, #0
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, WRITE_CPLT_MSG, 0);
#else
   const uint16_t msg = WRITE_CPLT_MSG;
 8113636:	2302      	movs	r3, #2
 8113638:	80fb      	strh	r3, [r7, #6]
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
 811363a:	4b05      	ldr	r3, [pc, #20]	; (8113650 <BSP_SD_WriteCpltCallback+0x20>)
 811363c:	6818      	ldr	r0, [r3, #0]
 811363e:	1db9      	adds	r1, r7, #6
 8113640:	2300      	movs	r3, #0
 8113642:	2200      	movs	r2, #0
 8113644:	f001 feba 	bl	81153bc <osMessageQueuePut>
#endif
}
 8113648:	bf00      	nop
 811364a:	3708      	adds	r7, #8
 811364c:	46bd      	mov	sp, r7
 811364e:	bd80      	pop	{r7, pc}
 8113650:	10000384 	.word	0x10000384

08113654 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8113654:	b580      	push	{r7, lr}
 8113656:	b082      	sub	sp, #8
 8113658:	af00      	add	r7, sp, #0
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
#else
   const uint16_t msg = READ_CPLT_MSG;
 811365a:	2301      	movs	r3, #1
 811365c:	80fb      	strh	r3, [r7, #6]
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
 811365e:	4b05      	ldr	r3, [pc, #20]	; (8113674 <BSP_SD_ReadCpltCallback+0x20>)
 8113660:	6818      	ldr	r0, [r3, #0]
 8113662:	1db9      	adds	r1, r7, #6
 8113664:	2300      	movs	r3, #0
 8113666:	2200      	movs	r2, #0
 8113668:	f001 fea8 	bl	81153bc <osMessageQueuePut>
#endif
}
 811366c:	bf00      	nop
 811366e:	3708      	adds	r7, #8
 8113670:	46bd      	mov	sp, r7
 8113672:	bd80      	pop	{r7, pc}
 8113674:	10000384 	.word	0x10000384

08113678 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8113678:	b580      	push	{r7, lr}
 811367a:	b084      	sub	sp, #16
 811367c:	af00      	add	r7, sp, #0
 811367e:	6078      	str	r0, [r7, #4]
 8113680:	460b      	mov	r3, r1
 8113682:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8113684:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8113688:	f005 f930 	bl	81188ec <USBD_static_malloc>
 811368c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 811368e:	68fb      	ldr	r3, [r7, #12]
 8113690:	2b00      	cmp	r3, #0
 8113692:	d105      	bne.n	81136a0 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8113694:	687b      	ldr	r3, [r7, #4]
 8113696:	2200      	movs	r2, #0
 8113698:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 811369c:	2302      	movs	r3, #2
 811369e:	e066      	b.n	811376e <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 81136a0:	687b      	ldr	r3, [r7, #4]
 81136a2:	68fa      	ldr	r2, [r7, #12]
 81136a4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 81136a8:	687b      	ldr	r3, [r7, #4]
 81136aa:	7c1b      	ldrb	r3, [r3, #16]
 81136ac:	2b00      	cmp	r3, #0
 81136ae:	d119      	bne.n	81136e4 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 81136b0:	f44f 7300 	mov.w	r3, #512	; 0x200
 81136b4:	2202      	movs	r2, #2
 81136b6:	2181      	movs	r1, #129	; 0x81
 81136b8:	6878      	ldr	r0, [r7, #4]
 81136ba:	f004 fff4 	bl	81186a6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 81136be:	687b      	ldr	r3, [r7, #4]
 81136c0:	2201      	movs	r2, #1
 81136c2:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 81136c4:	f44f 7300 	mov.w	r3, #512	; 0x200
 81136c8:	2202      	movs	r2, #2
 81136ca:	2101      	movs	r1, #1
 81136cc:	6878      	ldr	r0, [r7, #4]
 81136ce:	f004 ffea 	bl	81186a6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 81136d2:	687b      	ldr	r3, [r7, #4]
 81136d4:	2201      	movs	r2, #1
 81136d6:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 81136da:	687b      	ldr	r3, [r7, #4]
 81136dc:	2210      	movs	r2, #16
 81136de:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 81136e2:	e016      	b.n	8113712 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 81136e4:	2340      	movs	r3, #64	; 0x40
 81136e6:	2202      	movs	r2, #2
 81136e8:	2181      	movs	r1, #129	; 0x81
 81136ea:	6878      	ldr	r0, [r7, #4]
 81136ec:	f004 ffdb 	bl	81186a6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 81136f0:	687b      	ldr	r3, [r7, #4]
 81136f2:	2201      	movs	r2, #1
 81136f4:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 81136f6:	2340      	movs	r3, #64	; 0x40
 81136f8:	2202      	movs	r2, #2
 81136fa:	2101      	movs	r1, #1
 81136fc:	6878      	ldr	r0, [r7, #4]
 81136fe:	f004 ffd2 	bl	81186a6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8113702:	687b      	ldr	r3, [r7, #4]
 8113704:	2201      	movs	r2, #1
 8113706:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 811370a:	687b      	ldr	r3, [r7, #4]
 811370c:	2210      	movs	r2, #16
 811370e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8113712:	2308      	movs	r3, #8
 8113714:	2203      	movs	r2, #3
 8113716:	2182      	movs	r1, #130	; 0x82
 8113718:	6878      	ldr	r0, [r7, #4]
 811371a:	f004 ffc4 	bl	81186a6 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 811371e:	687b      	ldr	r3, [r7, #4]
 8113720:	2201      	movs	r2, #1
 8113722:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8113726:	687b      	ldr	r3, [r7, #4]
 8113728:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 811372c:	681b      	ldr	r3, [r3, #0]
 811372e:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8113730:	68fb      	ldr	r3, [r7, #12]
 8113732:	2200      	movs	r2, #0
 8113734:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8113738:	68fb      	ldr	r3, [r7, #12]
 811373a:	2200      	movs	r2, #0
 811373c:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8113740:	687b      	ldr	r3, [r7, #4]
 8113742:	7c1b      	ldrb	r3, [r3, #16]
 8113744:	2b00      	cmp	r3, #0
 8113746:	d109      	bne.n	811375c <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8113748:	68fb      	ldr	r3, [r7, #12]
 811374a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 811374e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8113752:	2101      	movs	r1, #1
 8113754:	6878      	ldr	r0, [r7, #4]
 8113756:	f005 f895 	bl	8118884 <USBD_LL_PrepareReceive>
 811375a:	e007      	b.n	811376c <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 811375c:	68fb      	ldr	r3, [r7, #12]
 811375e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8113762:	2340      	movs	r3, #64	; 0x40
 8113764:	2101      	movs	r1, #1
 8113766:	6878      	ldr	r0, [r7, #4]
 8113768:	f005 f88c 	bl	8118884 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 811376c:	2300      	movs	r3, #0
}
 811376e:	4618      	mov	r0, r3
 8113770:	3710      	adds	r7, #16
 8113772:	46bd      	mov	sp, r7
 8113774:	bd80      	pop	{r7, pc}

08113776 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8113776:	b580      	push	{r7, lr}
 8113778:	b082      	sub	sp, #8
 811377a:	af00      	add	r7, sp, #0
 811377c:	6078      	str	r0, [r7, #4]
 811377e:	460b      	mov	r3, r1
 8113780:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8113782:	2181      	movs	r1, #129	; 0x81
 8113784:	6878      	ldr	r0, [r7, #4]
 8113786:	f004 ffb4 	bl	81186f2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 811378a:	687b      	ldr	r3, [r7, #4]
 811378c:	2200      	movs	r2, #0
 811378e:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8113790:	2101      	movs	r1, #1
 8113792:	6878      	ldr	r0, [r7, #4]
 8113794:	f004 ffad 	bl	81186f2 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8113798:	687b      	ldr	r3, [r7, #4]
 811379a:	2200      	movs	r2, #0
 811379c:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 81137a0:	2182      	movs	r1, #130	; 0x82
 81137a2:	6878      	ldr	r0, [r7, #4]
 81137a4:	f004 ffa5 	bl	81186f2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 81137a8:	687b      	ldr	r3, [r7, #4]
 81137aa:	2200      	movs	r2, #0
 81137ac:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 81137b0:	687b      	ldr	r3, [r7, #4]
 81137b2:	2200      	movs	r2, #0
 81137b4:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 81137b8:	687b      	ldr	r3, [r7, #4]
 81137ba:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 81137be:	2b00      	cmp	r3, #0
 81137c0:	d00e      	beq.n	81137e0 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 81137c2:	687b      	ldr	r3, [r7, #4]
 81137c4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 81137c8:	685b      	ldr	r3, [r3, #4]
 81137ca:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 81137cc:	687b      	ldr	r3, [r7, #4]
 81137ce:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 81137d2:	4618      	mov	r0, r3
 81137d4:	f005 f898 	bl	8118908 <USBD_static_free>
    pdev->pClassData = NULL;
 81137d8:	687b      	ldr	r3, [r7, #4]
 81137da:	2200      	movs	r2, #0
 81137dc:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 81137e0:	2300      	movs	r3, #0
}
 81137e2:	4618      	mov	r0, r3
 81137e4:	3708      	adds	r7, #8
 81137e6:	46bd      	mov	sp, r7
 81137e8:	bd80      	pop	{r7, pc}
	...

081137ec <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 81137ec:	b580      	push	{r7, lr}
 81137ee:	b086      	sub	sp, #24
 81137f0:	af00      	add	r7, sp, #0
 81137f2:	6078      	str	r0, [r7, #4]
 81137f4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 81137f6:	687b      	ldr	r3, [r7, #4]
 81137f8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 81137fc:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 81137fe:	2300      	movs	r3, #0
 8113800:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8113802:	2300      	movs	r3, #0
 8113804:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8113806:	2300      	movs	r3, #0
 8113808:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 811380a:	693b      	ldr	r3, [r7, #16]
 811380c:	2b00      	cmp	r3, #0
 811380e:	d101      	bne.n	8113814 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8113810:	2303      	movs	r3, #3
 8113812:	e0af      	b.n	8113974 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8113814:	683b      	ldr	r3, [r7, #0]
 8113816:	781b      	ldrb	r3, [r3, #0]
 8113818:	f003 0360 	and.w	r3, r3, #96	; 0x60
 811381c:	2b00      	cmp	r3, #0
 811381e:	d03f      	beq.n	81138a0 <USBD_CDC_Setup+0xb4>
 8113820:	2b20      	cmp	r3, #32
 8113822:	f040 809f 	bne.w	8113964 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8113826:	683b      	ldr	r3, [r7, #0]
 8113828:	88db      	ldrh	r3, [r3, #6]
 811382a:	2b00      	cmp	r3, #0
 811382c:	d02e      	beq.n	811388c <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 811382e:	683b      	ldr	r3, [r7, #0]
 8113830:	781b      	ldrb	r3, [r3, #0]
 8113832:	b25b      	sxtb	r3, r3
 8113834:	2b00      	cmp	r3, #0
 8113836:	da16      	bge.n	8113866 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8113838:	687b      	ldr	r3, [r7, #4]
 811383a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 811383e:	689b      	ldr	r3, [r3, #8]
 8113840:	683a      	ldr	r2, [r7, #0]
 8113842:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8113844:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8113846:	683a      	ldr	r2, [r7, #0]
 8113848:	88d2      	ldrh	r2, [r2, #6]
 811384a:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 811384c:	683b      	ldr	r3, [r7, #0]
 811384e:	88db      	ldrh	r3, [r3, #6]
 8113850:	2b07      	cmp	r3, #7
 8113852:	bf28      	it	cs
 8113854:	2307      	movcs	r3, #7
 8113856:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8113858:	693b      	ldr	r3, [r7, #16]
 811385a:	89fa      	ldrh	r2, [r7, #14]
 811385c:	4619      	mov	r1, r3
 811385e:	6878      	ldr	r0, [r7, #4]
 8113860:	f001 fae9 	bl	8114e36 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8113864:	e085      	b.n	8113972 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 8113866:	683b      	ldr	r3, [r7, #0]
 8113868:	785a      	ldrb	r2, [r3, #1]
 811386a:	693b      	ldr	r3, [r7, #16]
 811386c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8113870:	683b      	ldr	r3, [r7, #0]
 8113872:	88db      	ldrh	r3, [r3, #6]
 8113874:	b2da      	uxtb	r2, r3
 8113876:	693b      	ldr	r3, [r7, #16]
 8113878:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 811387c:	6939      	ldr	r1, [r7, #16]
 811387e:	683b      	ldr	r3, [r7, #0]
 8113880:	88db      	ldrh	r3, [r3, #6]
 8113882:	461a      	mov	r2, r3
 8113884:	6878      	ldr	r0, [r7, #4]
 8113886:	f001 fb02 	bl	8114e8e <USBD_CtlPrepareRx>
      break;
 811388a:	e072      	b.n	8113972 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 811388c:	687b      	ldr	r3, [r7, #4]
 811388e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8113892:	689b      	ldr	r3, [r3, #8]
 8113894:	683a      	ldr	r2, [r7, #0]
 8113896:	7850      	ldrb	r0, [r2, #1]
 8113898:	2200      	movs	r2, #0
 811389a:	6839      	ldr	r1, [r7, #0]
 811389c:	4798      	blx	r3
      break;
 811389e:	e068      	b.n	8113972 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 81138a0:	683b      	ldr	r3, [r7, #0]
 81138a2:	785b      	ldrb	r3, [r3, #1]
 81138a4:	2b0b      	cmp	r3, #11
 81138a6:	d852      	bhi.n	811394e <USBD_CDC_Setup+0x162>
 81138a8:	a201      	add	r2, pc, #4	; (adr r2, 81138b0 <USBD_CDC_Setup+0xc4>)
 81138aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81138ae:	bf00      	nop
 81138b0:	081138e1 	.word	0x081138e1
 81138b4:	0811395d 	.word	0x0811395d
 81138b8:	0811394f 	.word	0x0811394f
 81138bc:	0811394f 	.word	0x0811394f
 81138c0:	0811394f 	.word	0x0811394f
 81138c4:	0811394f 	.word	0x0811394f
 81138c8:	0811394f 	.word	0x0811394f
 81138cc:	0811394f 	.word	0x0811394f
 81138d0:	0811394f 	.word	0x0811394f
 81138d4:	0811394f 	.word	0x0811394f
 81138d8:	0811390b 	.word	0x0811390b
 81138dc:	08113935 	.word	0x08113935
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 81138e0:	687b      	ldr	r3, [r7, #4]
 81138e2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 81138e6:	b2db      	uxtb	r3, r3
 81138e8:	2b03      	cmp	r3, #3
 81138ea:	d107      	bne.n	81138fc <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 81138ec:	f107 030a 	add.w	r3, r7, #10
 81138f0:	2202      	movs	r2, #2
 81138f2:	4619      	mov	r1, r3
 81138f4:	6878      	ldr	r0, [r7, #4]
 81138f6:	f001 fa9e 	bl	8114e36 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 81138fa:	e032      	b.n	8113962 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 81138fc:	6839      	ldr	r1, [r7, #0]
 81138fe:	6878      	ldr	r0, [r7, #4]
 8113900:	f001 fa28 	bl	8114d54 <USBD_CtlError>
            ret = USBD_FAIL;
 8113904:	2303      	movs	r3, #3
 8113906:	75fb      	strb	r3, [r7, #23]
          break;
 8113908:	e02b      	b.n	8113962 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 811390a:	687b      	ldr	r3, [r7, #4]
 811390c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8113910:	b2db      	uxtb	r3, r3
 8113912:	2b03      	cmp	r3, #3
 8113914:	d107      	bne.n	8113926 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8113916:	f107 030d 	add.w	r3, r7, #13
 811391a:	2201      	movs	r2, #1
 811391c:	4619      	mov	r1, r3
 811391e:	6878      	ldr	r0, [r7, #4]
 8113920:	f001 fa89 	bl	8114e36 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8113924:	e01d      	b.n	8113962 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8113926:	6839      	ldr	r1, [r7, #0]
 8113928:	6878      	ldr	r0, [r7, #4]
 811392a:	f001 fa13 	bl	8114d54 <USBD_CtlError>
            ret = USBD_FAIL;
 811392e:	2303      	movs	r3, #3
 8113930:	75fb      	strb	r3, [r7, #23]
          break;
 8113932:	e016      	b.n	8113962 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8113934:	687b      	ldr	r3, [r7, #4]
 8113936:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 811393a:	b2db      	uxtb	r3, r3
 811393c:	2b03      	cmp	r3, #3
 811393e:	d00f      	beq.n	8113960 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8113940:	6839      	ldr	r1, [r7, #0]
 8113942:	6878      	ldr	r0, [r7, #4]
 8113944:	f001 fa06 	bl	8114d54 <USBD_CtlError>
            ret = USBD_FAIL;
 8113948:	2303      	movs	r3, #3
 811394a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 811394c:	e008      	b.n	8113960 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 811394e:	6839      	ldr	r1, [r7, #0]
 8113950:	6878      	ldr	r0, [r7, #4]
 8113952:	f001 f9ff 	bl	8114d54 <USBD_CtlError>
          ret = USBD_FAIL;
 8113956:	2303      	movs	r3, #3
 8113958:	75fb      	strb	r3, [r7, #23]
          break;
 811395a:	e002      	b.n	8113962 <USBD_CDC_Setup+0x176>
          break;
 811395c:	bf00      	nop
 811395e:	e008      	b.n	8113972 <USBD_CDC_Setup+0x186>
          break;
 8113960:	bf00      	nop
      }
      break;
 8113962:	e006      	b.n	8113972 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8113964:	6839      	ldr	r1, [r7, #0]
 8113966:	6878      	ldr	r0, [r7, #4]
 8113968:	f001 f9f4 	bl	8114d54 <USBD_CtlError>
      ret = USBD_FAIL;
 811396c:	2303      	movs	r3, #3
 811396e:	75fb      	strb	r3, [r7, #23]
      break;
 8113970:	bf00      	nop
  }

  return (uint8_t)ret;
 8113972:	7dfb      	ldrb	r3, [r7, #23]
}
 8113974:	4618      	mov	r0, r3
 8113976:	3718      	adds	r7, #24
 8113978:	46bd      	mov	sp, r7
 811397a:	bd80      	pop	{r7, pc}

0811397c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 811397c:	b580      	push	{r7, lr}
 811397e:	b084      	sub	sp, #16
 8113980:	af00      	add	r7, sp, #0
 8113982:	6078      	str	r0, [r7, #4]
 8113984:	460b      	mov	r3, r1
 8113986:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8113988:	687b      	ldr	r3, [r7, #4]
 811398a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 811398e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8113990:	687b      	ldr	r3, [r7, #4]
 8113992:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8113996:	2b00      	cmp	r3, #0
 8113998:	d101      	bne.n	811399e <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 811399a:	2303      	movs	r3, #3
 811399c:	e04f      	b.n	8113a3e <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 811399e:	687b      	ldr	r3, [r7, #4]
 81139a0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 81139a4:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 81139a6:	78fa      	ldrb	r2, [r7, #3]
 81139a8:	6879      	ldr	r1, [r7, #4]
 81139aa:	4613      	mov	r3, r2
 81139ac:	009b      	lsls	r3, r3, #2
 81139ae:	4413      	add	r3, r2
 81139b0:	009b      	lsls	r3, r3, #2
 81139b2:	440b      	add	r3, r1
 81139b4:	3318      	adds	r3, #24
 81139b6:	681b      	ldr	r3, [r3, #0]
 81139b8:	2b00      	cmp	r3, #0
 81139ba:	d029      	beq.n	8113a10 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 81139bc:	78fa      	ldrb	r2, [r7, #3]
 81139be:	6879      	ldr	r1, [r7, #4]
 81139c0:	4613      	mov	r3, r2
 81139c2:	009b      	lsls	r3, r3, #2
 81139c4:	4413      	add	r3, r2
 81139c6:	009b      	lsls	r3, r3, #2
 81139c8:	440b      	add	r3, r1
 81139ca:	3318      	adds	r3, #24
 81139cc:	681a      	ldr	r2, [r3, #0]
 81139ce:	78f9      	ldrb	r1, [r7, #3]
 81139d0:	68f8      	ldr	r0, [r7, #12]
 81139d2:	460b      	mov	r3, r1
 81139d4:	00db      	lsls	r3, r3, #3
 81139d6:	1a5b      	subs	r3, r3, r1
 81139d8:	009b      	lsls	r3, r3, #2
 81139da:	4403      	add	r3, r0
 81139dc:	3344      	adds	r3, #68	; 0x44
 81139de:	681b      	ldr	r3, [r3, #0]
 81139e0:	fbb2 f1f3 	udiv	r1, r2, r3
 81139e4:	fb03 f301 	mul.w	r3, r3, r1
 81139e8:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 81139ea:	2b00      	cmp	r3, #0
 81139ec:	d110      	bne.n	8113a10 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 81139ee:	78fa      	ldrb	r2, [r7, #3]
 81139f0:	6879      	ldr	r1, [r7, #4]
 81139f2:	4613      	mov	r3, r2
 81139f4:	009b      	lsls	r3, r3, #2
 81139f6:	4413      	add	r3, r2
 81139f8:	009b      	lsls	r3, r3, #2
 81139fa:	440b      	add	r3, r1
 81139fc:	3318      	adds	r3, #24
 81139fe:	2200      	movs	r2, #0
 8113a00:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8113a02:	78f9      	ldrb	r1, [r7, #3]
 8113a04:	2300      	movs	r3, #0
 8113a06:	2200      	movs	r2, #0
 8113a08:	6878      	ldr	r0, [r7, #4]
 8113a0a:	f004 ff1a 	bl	8118842 <USBD_LL_Transmit>
 8113a0e:	e015      	b.n	8113a3c <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8113a10:	68bb      	ldr	r3, [r7, #8]
 8113a12:	2200      	movs	r2, #0
 8113a14:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8113a18:	687b      	ldr	r3, [r7, #4]
 8113a1a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8113a1e:	691b      	ldr	r3, [r3, #16]
 8113a20:	2b00      	cmp	r3, #0
 8113a22:	d00b      	beq.n	8113a3c <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8113a24:	687b      	ldr	r3, [r7, #4]
 8113a26:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8113a2a:	691b      	ldr	r3, [r3, #16]
 8113a2c:	68ba      	ldr	r2, [r7, #8]
 8113a2e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8113a32:	68ba      	ldr	r2, [r7, #8]
 8113a34:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8113a38:	78fa      	ldrb	r2, [r7, #3]
 8113a3a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8113a3c:	2300      	movs	r3, #0
}
 8113a3e:	4618      	mov	r0, r3
 8113a40:	3710      	adds	r7, #16
 8113a42:	46bd      	mov	sp, r7
 8113a44:	bd80      	pop	{r7, pc}

08113a46 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8113a46:	b580      	push	{r7, lr}
 8113a48:	b084      	sub	sp, #16
 8113a4a:	af00      	add	r7, sp, #0
 8113a4c:	6078      	str	r0, [r7, #4]
 8113a4e:	460b      	mov	r3, r1
 8113a50:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8113a52:	687b      	ldr	r3, [r7, #4]
 8113a54:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8113a58:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8113a5a:	687b      	ldr	r3, [r7, #4]
 8113a5c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8113a60:	2b00      	cmp	r3, #0
 8113a62:	d101      	bne.n	8113a68 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8113a64:	2303      	movs	r3, #3
 8113a66:	e015      	b.n	8113a94 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8113a68:	78fb      	ldrb	r3, [r7, #3]
 8113a6a:	4619      	mov	r1, r3
 8113a6c:	6878      	ldr	r0, [r7, #4]
 8113a6e:	f004 ff2a 	bl	81188c6 <USBD_LL_GetRxDataSize>
 8113a72:	4602      	mov	r2, r0
 8113a74:	68fb      	ldr	r3, [r7, #12]
 8113a76:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8113a7a:	687b      	ldr	r3, [r7, #4]
 8113a7c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8113a80:	68db      	ldr	r3, [r3, #12]
 8113a82:	68fa      	ldr	r2, [r7, #12]
 8113a84:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8113a88:	68fa      	ldr	r2, [r7, #12]
 8113a8a:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8113a8e:	4611      	mov	r1, r2
 8113a90:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8113a92:	2300      	movs	r3, #0
}
 8113a94:	4618      	mov	r0, r3
 8113a96:	3710      	adds	r7, #16
 8113a98:	46bd      	mov	sp, r7
 8113a9a:	bd80      	pop	{r7, pc}

08113a9c <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8113a9c:	b580      	push	{r7, lr}
 8113a9e:	b084      	sub	sp, #16
 8113aa0:	af00      	add	r7, sp, #0
 8113aa2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8113aa4:	687b      	ldr	r3, [r7, #4]
 8113aa6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8113aaa:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8113aac:	68fb      	ldr	r3, [r7, #12]
 8113aae:	2b00      	cmp	r3, #0
 8113ab0:	d101      	bne.n	8113ab6 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8113ab2:	2303      	movs	r3, #3
 8113ab4:	e01b      	b.n	8113aee <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8113ab6:	687b      	ldr	r3, [r7, #4]
 8113ab8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8113abc:	2b00      	cmp	r3, #0
 8113abe:	d015      	beq.n	8113aec <USBD_CDC_EP0_RxReady+0x50>
 8113ac0:	68fb      	ldr	r3, [r7, #12]
 8113ac2:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8113ac6:	2bff      	cmp	r3, #255	; 0xff
 8113ac8:	d010      	beq.n	8113aec <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8113aca:	687b      	ldr	r3, [r7, #4]
 8113acc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8113ad0:	689b      	ldr	r3, [r3, #8]
 8113ad2:	68fa      	ldr	r2, [r7, #12]
 8113ad4:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8113ad8:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8113ada:	68fa      	ldr	r2, [r7, #12]
 8113adc:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8113ae0:	b292      	uxth	r2, r2
 8113ae2:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8113ae4:	68fb      	ldr	r3, [r7, #12]
 8113ae6:	22ff      	movs	r2, #255	; 0xff
 8113ae8:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8113aec:	2300      	movs	r3, #0
}
 8113aee:	4618      	mov	r0, r3
 8113af0:	3710      	adds	r7, #16
 8113af2:	46bd      	mov	sp, r7
 8113af4:	bd80      	pop	{r7, pc}
	...

08113af8 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8113af8:	b480      	push	{r7}
 8113afa:	b083      	sub	sp, #12
 8113afc:	af00      	add	r7, sp, #0
 8113afe:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8113b00:	687b      	ldr	r3, [r7, #4]
 8113b02:	2243      	movs	r2, #67	; 0x43
 8113b04:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8113b06:	4b03      	ldr	r3, [pc, #12]	; (8113b14 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8113b08:	4618      	mov	r0, r3
 8113b0a:	370c      	adds	r7, #12
 8113b0c:	46bd      	mov	sp, r7
 8113b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8113b12:	4770      	bx	lr
 8113b14:	10000098 	.word	0x10000098

08113b18 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8113b18:	b480      	push	{r7}
 8113b1a:	b083      	sub	sp, #12
 8113b1c:	af00      	add	r7, sp, #0
 8113b1e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8113b20:	687b      	ldr	r3, [r7, #4]
 8113b22:	2243      	movs	r2, #67	; 0x43
 8113b24:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8113b26:	4b03      	ldr	r3, [pc, #12]	; (8113b34 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8113b28:	4618      	mov	r0, r3
 8113b2a:	370c      	adds	r7, #12
 8113b2c:	46bd      	mov	sp, r7
 8113b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8113b32:	4770      	bx	lr
 8113b34:	10000054 	.word	0x10000054

08113b38 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8113b38:	b480      	push	{r7}
 8113b3a:	b083      	sub	sp, #12
 8113b3c:	af00      	add	r7, sp, #0
 8113b3e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8113b40:	687b      	ldr	r3, [r7, #4]
 8113b42:	2243      	movs	r2, #67	; 0x43
 8113b44:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8113b46:	4b03      	ldr	r3, [pc, #12]	; (8113b54 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8113b48:	4618      	mov	r0, r3
 8113b4a:	370c      	adds	r7, #12
 8113b4c:	46bd      	mov	sp, r7
 8113b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8113b52:	4770      	bx	lr
 8113b54:	100000dc 	.word	0x100000dc

08113b58 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8113b58:	b480      	push	{r7}
 8113b5a:	b083      	sub	sp, #12
 8113b5c:	af00      	add	r7, sp, #0
 8113b5e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8113b60:	687b      	ldr	r3, [r7, #4]
 8113b62:	220a      	movs	r2, #10
 8113b64:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8113b66:	4b03      	ldr	r3, [pc, #12]	; (8113b74 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8113b68:	4618      	mov	r0, r3
 8113b6a:	370c      	adds	r7, #12
 8113b6c:	46bd      	mov	sp, r7
 8113b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8113b72:	4770      	bx	lr
 8113b74:	10000010 	.word	0x10000010

08113b78 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8113b78:	b480      	push	{r7}
 8113b7a:	b083      	sub	sp, #12
 8113b7c:	af00      	add	r7, sp, #0
 8113b7e:	6078      	str	r0, [r7, #4]
 8113b80:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8113b82:	683b      	ldr	r3, [r7, #0]
 8113b84:	2b00      	cmp	r3, #0
 8113b86:	d101      	bne.n	8113b8c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8113b88:	2303      	movs	r3, #3
 8113b8a:	e004      	b.n	8113b96 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8113b8c:	687b      	ldr	r3, [r7, #4]
 8113b8e:	683a      	ldr	r2, [r7, #0]
 8113b90:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8113b94:	2300      	movs	r3, #0
}
 8113b96:	4618      	mov	r0, r3
 8113b98:	370c      	adds	r7, #12
 8113b9a:	46bd      	mov	sp, r7
 8113b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8113ba0:	4770      	bx	lr

08113ba2 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8113ba2:	b480      	push	{r7}
 8113ba4:	b087      	sub	sp, #28
 8113ba6:	af00      	add	r7, sp, #0
 8113ba8:	60f8      	str	r0, [r7, #12]
 8113baa:	60b9      	str	r1, [r7, #8]
 8113bac:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8113bae:	68fb      	ldr	r3, [r7, #12]
 8113bb0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8113bb4:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8113bb6:	697b      	ldr	r3, [r7, #20]
 8113bb8:	2b00      	cmp	r3, #0
 8113bba:	d101      	bne.n	8113bc0 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8113bbc:	2303      	movs	r3, #3
 8113bbe:	e008      	b.n	8113bd2 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8113bc0:	697b      	ldr	r3, [r7, #20]
 8113bc2:	68ba      	ldr	r2, [r7, #8]
 8113bc4:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8113bc8:	697b      	ldr	r3, [r7, #20]
 8113bca:	687a      	ldr	r2, [r7, #4]
 8113bcc:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8113bd0:	2300      	movs	r3, #0
}
 8113bd2:	4618      	mov	r0, r3
 8113bd4:	371c      	adds	r7, #28
 8113bd6:	46bd      	mov	sp, r7
 8113bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8113bdc:	4770      	bx	lr

08113bde <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8113bde:	b480      	push	{r7}
 8113be0:	b085      	sub	sp, #20
 8113be2:	af00      	add	r7, sp, #0
 8113be4:	6078      	str	r0, [r7, #4]
 8113be6:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8113be8:	687b      	ldr	r3, [r7, #4]
 8113bea:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8113bee:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8113bf0:	68fb      	ldr	r3, [r7, #12]
 8113bf2:	2b00      	cmp	r3, #0
 8113bf4:	d101      	bne.n	8113bfa <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8113bf6:	2303      	movs	r3, #3
 8113bf8:	e004      	b.n	8113c04 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 8113bfa:	68fb      	ldr	r3, [r7, #12]
 8113bfc:	683a      	ldr	r2, [r7, #0]
 8113bfe:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8113c02:	2300      	movs	r3, #0
}
 8113c04:	4618      	mov	r0, r3
 8113c06:	3714      	adds	r7, #20
 8113c08:	46bd      	mov	sp, r7
 8113c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8113c0e:	4770      	bx	lr

08113c10 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8113c10:	b580      	push	{r7, lr}
 8113c12:	b084      	sub	sp, #16
 8113c14:	af00      	add	r7, sp, #0
 8113c16:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8113c18:	687b      	ldr	r3, [r7, #4]
 8113c1a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8113c1e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8113c20:	687b      	ldr	r3, [r7, #4]
 8113c22:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8113c26:	2b00      	cmp	r3, #0
 8113c28:	d101      	bne.n	8113c2e <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8113c2a:	2303      	movs	r3, #3
 8113c2c:	e016      	b.n	8113c5c <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8113c2e:	687b      	ldr	r3, [r7, #4]
 8113c30:	7c1b      	ldrb	r3, [r3, #16]
 8113c32:	2b00      	cmp	r3, #0
 8113c34:	d109      	bne.n	8113c4a <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8113c36:	68fb      	ldr	r3, [r7, #12]
 8113c38:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8113c3c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8113c40:	2101      	movs	r1, #1
 8113c42:	6878      	ldr	r0, [r7, #4]
 8113c44:	f004 fe1e 	bl	8118884 <USBD_LL_PrepareReceive>
 8113c48:	e007      	b.n	8113c5a <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8113c4a:	68fb      	ldr	r3, [r7, #12]
 8113c4c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8113c50:	2340      	movs	r3, #64	; 0x40
 8113c52:	2101      	movs	r1, #1
 8113c54:	6878      	ldr	r0, [r7, #4]
 8113c56:	f004 fe15 	bl	8118884 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8113c5a:	2300      	movs	r3, #0
}
 8113c5c:	4618      	mov	r0, r3
 8113c5e:	3710      	adds	r7, #16
 8113c60:	46bd      	mov	sp, r7
 8113c62:	bd80      	pop	{r7, pc}

08113c64 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8113c64:	b580      	push	{r7, lr}
 8113c66:	b086      	sub	sp, #24
 8113c68:	af00      	add	r7, sp, #0
 8113c6a:	60f8      	str	r0, [r7, #12]
 8113c6c:	60b9      	str	r1, [r7, #8]
 8113c6e:	4613      	mov	r3, r2
 8113c70:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8113c72:	68fb      	ldr	r3, [r7, #12]
 8113c74:	2b00      	cmp	r3, #0
 8113c76:	d101      	bne.n	8113c7c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8113c78:	2303      	movs	r3, #3
 8113c7a:	e01f      	b.n	8113cbc <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8113c7c:	68fb      	ldr	r3, [r7, #12]
 8113c7e:	2200      	movs	r2, #0
 8113c80:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8113c84:	68fb      	ldr	r3, [r7, #12]
 8113c86:	2200      	movs	r2, #0
 8113c88:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8113c8c:	68fb      	ldr	r3, [r7, #12]
 8113c8e:	2200      	movs	r2, #0
 8113c90:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8113c94:	68bb      	ldr	r3, [r7, #8]
 8113c96:	2b00      	cmp	r3, #0
 8113c98:	d003      	beq.n	8113ca2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8113c9a:	68fb      	ldr	r3, [r7, #12]
 8113c9c:	68ba      	ldr	r2, [r7, #8]
 8113c9e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8113ca2:	68fb      	ldr	r3, [r7, #12]
 8113ca4:	2201      	movs	r2, #1
 8113ca6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8113caa:	68fb      	ldr	r3, [r7, #12]
 8113cac:	79fa      	ldrb	r2, [r7, #7]
 8113cae:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8113cb0:	68f8      	ldr	r0, [r7, #12]
 8113cb2:	f004 fc8d 	bl	81185d0 <USBD_LL_Init>
 8113cb6:	4603      	mov	r3, r0
 8113cb8:	75fb      	strb	r3, [r7, #23]

  return ret;
 8113cba:	7dfb      	ldrb	r3, [r7, #23]
}
 8113cbc:	4618      	mov	r0, r3
 8113cbe:	3718      	adds	r7, #24
 8113cc0:	46bd      	mov	sp, r7
 8113cc2:	bd80      	pop	{r7, pc}

08113cc4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8113cc4:	b580      	push	{r7, lr}
 8113cc6:	b084      	sub	sp, #16
 8113cc8:	af00      	add	r7, sp, #0
 8113cca:	6078      	str	r0, [r7, #4]
 8113ccc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8113cce:	2300      	movs	r3, #0
 8113cd0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8113cd2:	683b      	ldr	r3, [r7, #0]
 8113cd4:	2b00      	cmp	r3, #0
 8113cd6:	d101      	bne.n	8113cdc <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8113cd8:	2303      	movs	r3, #3
 8113cda:	e016      	b.n	8113d0a <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8113cdc:	687b      	ldr	r3, [r7, #4]
 8113cde:	683a      	ldr	r2, [r7, #0]
 8113ce0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8113ce4:	687b      	ldr	r3, [r7, #4]
 8113ce6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8113cea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8113cec:	2b00      	cmp	r3, #0
 8113cee:	d00b      	beq.n	8113d08 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8113cf0:	687b      	ldr	r3, [r7, #4]
 8113cf2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8113cf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8113cf8:	f107 020e 	add.w	r2, r7, #14
 8113cfc:	4610      	mov	r0, r2
 8113cfe:	4798      	blx	r3
 8113d00:	4602      	mov	r2, r0
 8113d02:	687b      	ldr	r3, [r7, #4]
 8113d04:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8113d08:	2300      	movs	r3, #0
}
 8113d0a:	4618      	mov	r0, r3
 8113d0c:	3710      	adds	r7, #16
 8113d0e:	46bd      	mov	sp, r7
 8113d10:	bd80      	pop	{r7, pc}

08113d12 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8113d12:	b580      	push	{r7, lr}
 8113d14:	b082      	sub	sp, #8
 8113d16:	af00      	add	r7, sp, #0
 8113d18:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8113d1a:	6878      	ldr	r0, [r7, #4]
 8113d1c:	f004 fca8 	bl	8118670 <USBD_LL_Start>
 8113d20:	4603      	mov	r3, r0
}
 8113d22:	4618      	mov	r0, r3
 8113d24:	3708      	adds	r7, #8
 8113d26:	46bd      	mov	sp, r7
 8113d28:	bd80      	pop	{r7, pc}

08113d2a <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8113d2a:	b480      	push	{r7}
 8113d2c:	b083      	sub	sp, #12
 8113d2e:	af00      	add	r7, sp, #0
 8113d30:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8113d32:	2300      	movs	r3, #0
}
 8113d34:	4618      	mov	r0, r3
 8113d36:	370c      	adds	r7, #12
 8113d38:	46bd      	mov	sp, r7
 8113d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8113d3e:	4770      	bx	lr

08113d40 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8113d40:	b580      	push	{r7, lr}
 8113d42:	b084      	sub	sp, #16
 8113d44:	af00      	add	r7, sp, #0
 8113d46:	6078      	str	r0, [r7, #4]
 8113d48:	460b      	mov	r3, r1
 8113d4a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8113d4c:	2303      	movs	r3, #3
 8113d4e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8113d50:	687b      	ldr	r3, [r7, #4]
 8113d52:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8113d56:	2b00      	cmp	r3, #0
 8113d58:	d009      	beq.n	8113d6e <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8113d5a:	687b      	ldr	r3, [r7, #4]
 8113d5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8113d60:	681b      	ldr	r3, [r3, #0]
 8113d62:	78fa      	ldrb	r2, [r7, #3]
 8113d64:	4611      	mov	r1, r2
 8113d66:	6878      	ldr	r0, [r7, #4]
 8113d68:	4798      	blx	r3
 8113d6a:	4603      	mov	r3, r0
 8113d6c:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8113d6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8113d70:	4618      	mov	r0, r3
 8113d72:	3710      	adds	r7, #16
 8113d74:	46bd      	mov	sp, r7
 8113d76:	bd80      	pop	{r7, pc}

08113d78 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8113d78:	b580      	push	{r7, lr}
 8113d7a:	b082      	sub	sp, #8
 8113d7c:	af00      	add	r7, sp, #0
 8113d7e:	6078      	str	r0, [r7, #4]
 8113d80:	460b      	mov	r3, r1
 8113d82:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8113d84:	687b      	ldr	r3, [r7, #4]
 8113d86:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8113d8a:	2b00      	cmp	r3, #0
 8113d8c:	d007      	beq.n	8113d9e <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8113d8e:	687b      	ldr	r3, [r7, #4]
 8113d90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8113d94:	685b      	ldr	r3, [r3, #4]
 8113d96:	78fa      	ldrb	r2, [r7, #3]
 8113d98:	4611      	mov	r1, r2
 8113d9a:	6878      	ldr	r0, [r7, #4]
 8113d9c:	4798      	blx	r3
  }

  return USBD_OK;
 8113d9e:	2300      	movs	r3, #0
}
 8113da0:	4618      	mov	r0, r3
 8113da2:	3708      	adds	r7, #8
 8113da4:	46bd      	mov	sp, r7
 8113da6:	bd80      	pop	{r7, pc}

08113da8 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8113da8:	b580      	push	{r7, lr}
 8113daa:	b084      	sub	sp, #16
 8113dac:	af00      	add	r7, sp, #0
 8113dae:	6078      	str	r0, [r7, #4]
 8113db0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8113db2:	687b      	ldr	r3, [r7, #4]
 8113db4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8113db8:	6839      	ldr	r1, [r7, #0]
 8113dba:	4618      	mov	r0, r3
 8113dbc:	f000 ff90 	bl	8114ce0 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8113dc0:	687b      	ldr	r3, [r7, #4]
 8113dc2:	2201      	movs	r2, #1
 8113dc4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8113dc8:	687b      	ldr	r3, [r7, #4]
 8113dca:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8113dce:	461a      	mov	r2, r3
 8113dd0:	687b      	ldr	r3, [r7, #4]
 8113dd2:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8113dd6:	687b      	ldr	r3, [r7, #4]
 8113dd8:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8113ddc:	f003 031f 	and.w	r3, r3, #31
 8113de0:	2b02      	cmp	r3, #2
 8113de2:	d01a      	beq.n	8113e1a <USBD_LL_SetupStage+0x72>
 8113de4:	2b02      	cmp	r3, #2
 8113de6:	d822      	bhi.n	8113e2e <USBD_LL_SetupStage+0x86>
 8113de8:	2b00      	cmp	r3, #0
 8113dea:	d002      	beq.n	8113df2 <USBD_LL_SetupStage+0x4a>
 8113dec:	2b01      	cmp	r3, #1
 8113dee:	d00a      	beq.n	8113e06 <USBD_LL_SetupStage+0x5e>
 8113df0:	e01d      	b.n	8113e2e <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8113df2:	687b      	ldr	r3, [r7, #4]
 8113df4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8113df8:	4619      	mov	r1, r3
 8113dfa:	6878      	ldr	r0, [r7, #4]
 8113dfc:	f000 fa62 	bl	81142c4 <USBD_StdDevReq>
 8113e00:	4603      	mov	r3, r0
 8113e02:	73fb      	strb	r3, [r7, #15]
      break;
 8113e04:	e020      	b.n	8113e48 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8113e06:	687b      	ldr	r3, [r7, #4]
 8113e08:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8113e0c:	4619      	mov	r1, r3
 8113e0e:	6878      	ldr	r0, [r7, #4]
 8113e10:	f000 fac6 	bl	81143a0 <USBD_StdItfReq>
 8113e14:	4603      	mov	r3, r0
 8113e16:	73fb      	strb	r3, [r7, #15]
      break;
 8113e18:	e016      	b.n	8113e48 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8113e1a:	687b      	ldr	r3, [r7, #4]
 8113e1c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8113e20:	4619      	mov	r1, r3
 8113e22:	6878      	ldr	r0, [r7, #4]
 8113e24:	f000 fb05 	bl	8114432 <USBD_StdEPReq>
 8113e28:	4603      	mov	r3, r0
 8113e2a:	73fb      	strb	r3, [r7, #15]
      break;
 8113e2c:	e00c      	b.n	8113e48 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8113e2e:	687b      	ldr	r3, [r7, #4]
 8113e30:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8113e34:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8113e38:	b2db      	uxtb	r3, r3
 8113e3a:	4619      	mov	r1, r3
 8113e3c:	6878      	ldr	r0, [r7, #4]
 8113e3e:	f004 fc77 	bl	8118730 <USBD_LL_StallEP>
 8113e42:	4603      	mov	r3, r0
 8113e44:	73fb      	strb	r3, [r7, #15]
      break;
 8113e46:	bf00      	nop
  }

  return ret;
 8113e48:	7bfb      	ldrb	r3, [r7, #15]
}
 8113e4a:	4618      	mov	r0, r3
 8113e4c:	3710      	adds	r7, #16
 8113e4e:	46bd      	mov	sp, r7
 8113e50:	bd80      	pop	{r7, pc}

08113e52 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8113e52:	b580      	push	{r7, lr}
 8113e54:	b086      	sub	sp, #24
 8113e56:	af00      	add	r7, sp, #0
 8113e58:	60f8      	str	r0, [r7, #12]
 8113e5a:	460b      	mov	r3, r1
 8113e5c:	607a      	str	r2, [r7, #4]
 8113e5e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8113e60:	7afb      	ldrb	r3, [r7, #11]
 8113e62:	2b00      	cmp	r3, #0
 8113e64:	d138      	bne.n	8113ed8 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8113e66:	68fb      	ldr	r3, [r7, #12]
 8113e68:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8113e6c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8113e6e:	68fb      	ldr	r3, [r7, #12]
 8113e70:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8113e74:	2b03      	cmp	r3, #3
 8113e76:	d14a      	bne.n	8113f0e <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8113e78:	693b      	ldr	r3, [r7, #16]
 8113e7a:	689a      	ldr	r2, [r3, #8]
 8113e7c:	693b      	ldr	r3, [r7, #16]
 8113e7e:	68db      	ldr	r3, [r3, #12]
 8113e80:	429a      	cmp	r2, r3
 8113e82:	d913      	bls.n	8113eac <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8113e84:	693b      	ldr	r3, [r7, #16]
 8113e86:	689a      	ldr	r2, [r3, #8]
 8113e88:	693b      	ldr	r3, [r7, #16]
 8113e8a:	68db      	ldr	r3, [r3, #12]
 8113e8c:	1ad2      	subs	r2, r2, r3
 8113e8e:	693b      	ldr	r3, [r7, #16]
 8113e90:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8113e92:	693b      	ldr	r3, [r7, #16]
 8113e94:	68da      	ldr	r2, [r3, #12]
 8113e96:	693b      	ldr	r3, [r7, #16]
 8113e98:	689b      	ldr	r3, [r3, #8]
 8113e9a:	4293      	cmp	r3, r2
 8113e9c:	bf28      	it	cs
 8113e9e:	4613      	movcs	r3, r2
 8113ea0:	461a      	mov	r2, r3
 8113ea2:	6879      	ldr	r1, [r7, #4]
 8113ea4:	68f8      	ldr	r0, [r7, #12]
 8113ea6:	f001 f80f 	bl	8114ec8 <USBD_CtlContinueRx>
 8113eaa:	e030      	b.n	8113f0e <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8113eac:	68fb      	ldr	r3, [r7, #12]
 8113eae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8113eb2:	b2db      	uxtb	r3, r3
 8113eb4:	2b03      	cmp	r3, #3
 8113eb6:	d10b      	bne.n	8113ed0 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8113eb8:	68fb      	ldr	r3, [r7, #12]
 8113eba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8113ebe:	691b      	ldr	r3, [r3, #16]
 8113ec0:	2b00      	cmp	r3, #0
 8113ec2:	d005      	beq.n	8113ed0 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8113ec4:	68fb      	ldr	r3, [r7, #12]
 8113ec6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8113eca:	691b      	ldr	r3, [r3, #16]
 8113ecc:	68f8      	ldr	r0, [r7, #12]
 8113ece:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8113ed0:	68f8      	ldr	r0, [r7, #12]
 8113ed2:	f001 f80a 	bl	8114eea <USBD_CtlSendStatus>
 8113ed6:	e01a      	b.n	8113f0e <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8113ed8:	68fb      	ldr	r3, [r7, #12]
 8113eda:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8113ede:	b2db      	uxtb	r3, r3
 8113ee0:	2b03      	cmp	r3, #3
 8113ee2:	d114      	bne.n	8113f0e <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8113ee4:	68fb      	ldr	r3, [r7, #12]
 8113ee6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8113eea:	699b      	ldr	r3, [r3, #24]
 8113eec:	2b00      	cmp	r3, #0
 8113eee:	d00e      	beq.n	8113f0e <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8113ef0:	68fb      	ldr	r3, [r7, #12]
 8113ef2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8113ef6:	699b      	ldr	r3, [r3, #24]
 8113ef8:	7afa      	ldrb	r2, [r7, #11]
 8113efa:	4611      	mov	r1, r2
 8113efc:	68f8      	ldr	r0, [r7, #12]
 8113efe:	4798      	blx	r3
 8113f00:	4603      	mov	r3, r0
 8113f02:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8113f04:	7dfb      	ldrb	r3, [r7, #23]
 8113f06:	2b00      	cmp	r3, #0
 8113f08:	d001      	beq.n	8113f0e <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8113f0a:	7dfb      	ldrb	r3, [r7, #23]
 8113f0c:	e000      	b.n	8113f10 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8113f0e:	2300      	movs	r3, #0
}
 8113f10:	4618      	mov	r0, r3
 8113f12:	3718      	adds	r7, #24
 8113f14:	46bd      	mov	sp, r7
 8113f16:	bd80      	pop	{r7, pc}

08113f18 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8113f18:	b580      	push	{r7, lr}
 8113f1a:	b086      	sub	sp, #24
 8113f1c:	af00      	add	r7, sp, #0
 8113f1e:	60f8      	str	r0, [r7, #12]
 8113f20:	460b      	mov	r3, r1
 8113f22:	607a      	str	r2, [r7, #4]
 8113f24:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8113f26:	7afb      	ldrb	r3, [r7, #11]
 8113f28:	2b00      	cmp	r3, #0
 8113f2a:	d16b      	bne.n	8114004 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8113f2c:	68fb      	ldr	r3, [r7, #12]
 8113f2e:	3314      	adds	r3, #20
 8113f30:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8113f32:	68fb      	ldr	r3, [r7, #12]
 8113f34:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8113f38:	2b02      	cmp	r3, #2
 8113f3a:	d156      	bne.n	8113fea <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8113f3c:	693b      	ldr	r3, [r7, #16]
 8113f3e:	689a      	ldr	r2, [r3, #8]
 8113f40:	693b      	ldr	r3, [r7, #16]
 8113f42:	68db      	ldr	r3, [r3, #12]
 8113f44:	429a      	cmp	r2, r3
 8113f46:	d914      	bls.n	8113f72 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8113f48:	693b      	ldr	r3, [r7, #16]
 8113f4a:	689a      	ldr	r2, [r3, #8]
 8113f4c:	693b      	ldr	r3, [r7, #16]
 8113f4e:	68db      	ldr	r3, [r3, #12]
 8113f50:	1ad2      	subs	r2, r2, r3
 8113f52:	693b      	ldr	r3, [r7, #16]
 8113f54:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8113f56:	693b      	ldr	r3, [r7, #16]
 8113f58:	689b      	ldr	r3, [r3, #8]
 8113f5a:	461a      	mov	r2, r3
 8113f5c:	6879      	ldr	r1, [r7, #4]
 8113f5e:	68f8      	ldr	r0, [r7, #12]
 8113f60:	f000 ff84 	bl	8114e6c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8113f64:	2300      	movs	r3, #0
 8113f66:	2200      	movs	r2, #0
 8113f68:	2100      	movs	r1, #0
 8113f6a:	68f8      	ldr	r0, [r7, #12]
 8113f6c:	f004 fc8a 	bl	8118884 <USBD_LL_PrepareReceive>
 8113f70:	e03b      	b.n	8113fea <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8113f72:	693b      	ldr	r3, [r7, #16]
 8113f74:	68da      	ldr	r2, [r3, #12]
 8113f76:	693b      	ldr	r3, [r7, #16]
 8113f78:	689b      	ldr	r3, [r3, #8]
 8113f7a:	429a      	cmp	r2, r3
 8113f7c:	d11c      	bne.n	8113fb8 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8113f7e:	693b      	ldr	r3, [r7, #16]
 8113f80:	685a      	ldr	r2, [r3, #4]
 8113f82:	693b      	ldr	r3, [r7, #16]
 8113f84:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8113f86:	429a      	cmp	r2, r3
 8113f88:	d316      	bcc.n	8113fb8 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8113f8a:	693b      	ldr	r3, [r7, #16]
 8113f8c:	685a      	ldr	r2, [r3, #4]
 8113f8e:	68fb      	ldr	r3, [r7, #12]
 8113f90:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8113f94:	429a      	cmp	r2, r3
 8113f96:	d20f      	bcs.n	8113fb8 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8113f98:	2200      	movs	r2, #0
 8113f9a:	2100      	movs	r1, #0
 8113f9c:	68f8      	ldr	r0, [r7, #12]
 8113f9e:	f000 ff65 	bl	8114e6c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8113fa2:	68fb      	ldr	r3, [r7, #12]
 8113fa4:	2200      	movs	r2, #0
 8113fa6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8113faa:	2300      	movs	r3, #0
 8113fac:	2200      	movs	r2, #0
 8113fae:	2100      	movs	r1, #0
 8113fb0:	68f8      	ldr	r0, [r7, #12]
 8113fb2:	f004 fc67 	bl	8118884 <USBD_LL_PrepareReceive>
 8113fb6:	e018      	b.n	8113fea <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8113fb8:	68fb      	ldr	r3, [r7, #12]
 8113fba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8113fbe:	b2db      	uxtb	r3, r3
 8113fc0:	2b03      	cmp	r3, #3
 8113fc2:	d10b      	bne.n	8113fdc <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8113fc4:	68fb      	ldr	r3, [r7, #12]
 8113fc6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8113fca:	68db      	ldr	r3, [r3, #12]
 8113fcc:	2b00      	cmp	r3, #0
 8113fce:	d005      	beq.n	8113fdc <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8113fd0:	68fb      	ldr	r3, [r7, #12]
 8113fd2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8113fd6:	68db      	ldr	r3, [r3, #12]
 8113fd8:	68f8      	ldr	r0, [r7, #12]
 8113fda:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8113fdc:	2180      	movs	r1, #128	; 0x80
 8113fde:	68f8      	ldr	r0, [r7, #12]
 8113fe0:	f004 fba6 	bl	8118730 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8113fe4:	68f8      	ldr	r0, [r7, #12]
 8113fe6:	f000 ff93 	bl	8114f10 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8113fea:	68fb      	ldr	r3, [r7, #12]
 8113fec:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8113ff0:	2b01      	cmp	r3, #1
 8113ff2:	d122      	bne.n	811403a <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8113ff4:	68f8      	ldr	r0, [r7, #12]
 8113ff6:	f7ff fe98 	bl	8113d2a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8113ffa:	68fb      	ldr	r3, [r7, #12]
 8113ffc:	2200      	movs	r2, #0
 8113ffe:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8114002:	e01a      	b.n	811403a <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8114004:	68fb      	ldr	r3, [r7, #12]
 8114006:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 811400a:	b2db      	uxtb	r3, r3
 811400c:	2b03      	cmp	r3, #3
 811400e:	d114      	bne.n	811403a <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8114010:	68fb      	ldr	r3, [r7, #12]
 8114012:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8114016:	695b      	ldr	r3, [r3, #20]
 8114018:	2b00      	cmp	r3, #0
 811401a:	d00e      	beq.n	811403a <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 811401c:	68fb      	ldr	r3, [r7, #12]
 811401e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8114022:	695b      	ldr	r3, [r3, #20]
 8114024:	7afa      	ldrb	r2, [r7, #11]
 8114026:	4611      	mov	r1, r2
 8114028:	68f8      	ldr	r0, [r7, #12]
 811402a:	4798      	blx	r3
 811402c:	4603      	mov	r3, r0
 811402e:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8114030:	7dfb      	ldrb	r3, [r7, #23]
 8114032:	2b00      	cmp	r3, #0
 8114034:	d001      	beq.n	811403a <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8114036:	7dfb      	ldrb	r3, [r7, #23]
 8114038:	e000      	b.n	811403c <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 811403a:	2300      	movs	r3, #0
}
 811403c:	4618      	mov	r0, r3
 811403e:	3718      	adds	r7, #24
 8114040:	46bd      	mov	sp, r7
 8114042:	bd80      	pop	{r7, pc}

08114044 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8114044:	b580      	push	{r7, lr}
 8114046:	b082      	sub	sp, #8
 8114048:	af00      	add	r7, sp, #0
 811404a:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 811404c:	687b      	ldr	r3, [r7, #4]
 811404e:	2201      	movs	r2, #1
 8114050:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8114054:	687b      	ldr	r3, [r7, #4]
 8114056:	2200      	movs	r2, #0
 8114058:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 811405c:	687b      	ldr	r3, [r7, #4]
 811405e:	2200      	movs	r2, #0
 8114060:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8114062:	687b      	ldr	r3, [r7, #4]
 8114064:	2200      	movs	r2, #0
 8114066:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 811406a:	687b      	ldr	r3, [r7, #4]
 811406c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8114070:	2b00      	cmp	r3, #0
 8114072:	d101      	bne.n	8114078 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8114074:	2303      	movs	r3, #3
 8114076:	e02f      	b.n	81140d8 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8114078:	687b      	ldr	r3, [r7, #4]
 811407a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 811407e:	2b00      	cmp	r3, #0
 8114080:	d00f      	beq.n	81140a2 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8114082:	687b      	ldr	r3, [r7, #4]
 8114084:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8114088:	685b      	ldr	r3, [r3, #4]
 811408a:	2b00      	cmp	r3, #0
 811408c:	d009      	beq.n	81140a2 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 811408e:	687b      	ldr	r3, [r7, #4]
 8114090:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8114094:	685b      	ldr	r3, [r3, #4]
 8114096:	687a      	ldr	r2, [r7, #4]
 8114098:	6852      	ldr	r2, [r2, #4]
 811409a:	b2d2      	uxtb	r2, r2
 811409c:	4611      	mov	r1, r2
 811409e:	6878      	ldr	r0, [r7, #4]
 81140a0:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 81140a2:	2340      	movs	r3, #64	; 0x40
 81140a4:	2200      	movs	r2, #0
 81140a6:	2100      	movs	r1, #0
 81140a8:	6878      	ldr	r0, [r7, #4]
 81140aa:	f004 fafc 	bl	81186a6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 81140ae:	687b      	ldr	r3, [r7, #4]
 81140b0:	2201      	movs	r2, #1
 81140b2:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 81140b6:	687b      	ldr	r3, [r7, #4]
 81140b8:	2240      	movs	r2, #64	; 0x40
 81140ba:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 81140be:	2340      	movs	r3, #64	; 0x40
 81140c0:	2200      	movs	r2, #0
 81140c2:	2180      	movs	r1, #128	; 0x80
 81140c4:	6878      	ldr	r0, [r7, #4]
 81140c6:	f004 faee 	bl	81186a6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 81140ca:	687b      	ldr	r3, [r7, #4]
 81140cc:	2201      	movs	r2, #1
 81140ce:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 81140d0:	687b      	ldr	r3, [r7, #4]
 81140d2:	2240      	movs	r2, #64	; 0x40
 81140d4:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 81140d6:	2300      	movs	r3, #0
}
 81140d8:	4618      	mov	r0, r3
 81140da:	3708      	adds	r7, #8
 81140dc:	46bd      	mov	sp, r7
 81140de:	bd80      	pop	{r7, pc}

081140e0 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 81140e0:	b480      	push	{r7}
 81140e2:	b083      	sub	sp, #12
 81140e4:	af00      	add	r7, sp, #0
 81140e6:	6078      	str	r0, [r7, #4]
 81140e8:	460b      	mov	r3, r1
 81140ea:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 81140ec:	687b      	ldr	r3, [r7, #4]
 81140ee:	78fa      	ldrb	r2, [r7, #3]
 81140f0:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 81140f2:	2300      	movs	r3, #0
}
 81140f4:	4618      	mov	r0, r3
 81140f6:	370c      	adds	r7, #12
 81140f8:	46bd      	mov	sp, r7
 81140fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 81140fe:	4770      	bx	lr

08114100 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8114100:	b480      	push	{r7}
 8114102:	b083      	sub	sp, #12
 8114104:	af00      	add	r7, sp, #0
 8114106:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8114108:	687b      	ldr	r3, [r7, #4]
 811410a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 811410e:	b2da      	uxtb	r2, r3
 8114110:	687b      	ldr	r3, [r7, #4]
 8114112:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8114116:	687b      	ldr	r3, [r7, #4]
 8114118:	2204      	movs	r2, #4
 811411a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 811411e:	2300      	movs	r3, #0
}
 8114120:	4618      	mov	r0, r3
 8114122:	370c      	adds	r7, #12
 8114124:	46bd      	mov	sp, r7
 8114126:	f85d 7b04 	ldr.w	r7, [sp], #4
 811412a:	4770      	bx	lr

0811412c <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 811412c:	b480      	push	{r7}
 811412e:	b083      	sub	sp, #12
 8114130:	af00      	add	r7, sp, #0
 8114132:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8114134:	687b      	ldr	r3, [r7, #4]
 8114136:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 811413a:	b2db      	uxtb	r3, r3
 811413c:	2b04      	cmp	r3, #4
 811413e:	d106      	bne.n	811414e <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8114140:	687b      	ldr	r3, [r7, #4]
 8114142:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8114146:	b2da      	uxtb	r2, r3
 8114148:	687b      	ldr	r3, [r7, #4]
 811414a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 811414e:	2300      	movs	r3, #0
}
 8114150:	4618      	mov	r0, r3
 8114152:	370c      	adds	r7, #12
 8114154:	46bd      	mov	sp, r7
 8114156:	f85d 7b04 	ldr.w	r7, [sp], #4
 811415a:	4770      	bx	lr

0811415c <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 811415c:	b580      	push	{r7, lr}
 811415e:	b082      	sub	sp, #8
 8114160:	af00      	add	r7, sp, #0
 8114162:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8114164:	687b      	ldr	r3, [r7, #4]
 8114166:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 811416a:	2b00      	cmp	r3, #0
 811416c:	d101      	bne.n	8114172 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 811416e:	2303      	movs	r3, #3
 8114170:	e012      	b.n	8114198 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8114172:	687b      	ldr	r3, [r7, #4]
 8114174:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8114178:	b2db      	uxtb	r3, r3
 811417a:	2b03      	cmp	r3, #3
 811417c:	d10b      	bne.n	8114196 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 811417e:	687b      	ldr	r3, [r7, #4]
 8114180:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8114184:	69db      	ldr	r3, [r3, #28]
 8114186:	2b00      	cmp	r3, #0
 8114188:	d005      	beq.n	8114196 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 811418a:	687b      	ldr	r3, [r7, #4]
 811418c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8114190:	69db      	ldr	r3, [r3, #28]
 8114192:	6878      	ldr	r0, [r7, #4]
 8114194:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8114196:	2300      	movs	r3, #0
}
 8114198:	4618      	mov	r0, r3
 811419a:	3708      	adds	r7, #8
 811419c:	46bd      	mov	sp, r7
 811419e:	bd80      	pop	{r7, pc}

081141a0 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 81141a0:	b580      	push	{r7, lr}
 81141a2:	b082      	sub	sp, #8
 81141a4:	af00      	add	r7, sp, #0
 81141a6:	6078      	str	r0, [r7, #4]
 81141a8:	460b      	mov	r3, r1
 81141aa:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 81141ac:	687b      	ldr	r3, [r7, #4]
 81141ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 81141b2:	2b00      	cmp	r3, #0
 81141b4:	d101      	bne.n	81141ba <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 81141b6:	2303      	movs	r3, #3
 81141b8:	e014      	b.n	81141e4 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 81141ba:	687b      	ldr	r3, [r7, #4]
 81141bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 81141c0:	b2db      	uxtb	r3, r3
 81141c2:	2b03      	cmp	r3, #3
 81141c4:	d10d      	bne.n	81141e2 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 81141c6:	687b      	ldr	r3, [r7, #4]
 81141c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 81141cc:	6a1b      	ldr	r3, [r3, #32]
 81141ce:	2b00      	cmp	r3, #0
 81141d0:	d007      	beq.n	81141e2 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 81141d2:	687b      	ldr	r3, [r7, #4]
 81141d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 81141d8:	6a1b      	ldr	r3, [r3, #32]
 81141da:	78fa      	ldrb	r2, [r7, #3]
 81141dc:	4611      	mov	r1, r2
 81141de:	6878      	ldr	r0, [r7, #4]
 81141e0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 81141e2:	2300      	movs	r3, #0
}
 81141e4:	4618      	mov	r0, r3
 81141e6:	3708      	adds	r7, #8
 81141e8:	46bd      	mov	sp, r7
 81141ea:	bd80      	pop	{r7, pc}

081141ec <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 81141ec:	b580      	push	{r7, lr}
 81141ee:	b082      	sub	sp, #8
 81141f0:	af00      	add	r7, sp, #0
 81141f2:	6078      	str	r0, [r7, #4]
 81141f4:	460b      	mov	r3, r1
 81141f6:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 81141f8:	687b      	ldr	r3, [r7, #4]
 81141fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 81141fe:	2b00      	cmp	r3, #0
 8114200:	d101      	bne.n	8114206 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 8114202:	2303      	movs	r3, #3
 8114204:	e014      	b.n	8114230 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8114206:	687b      	ldr	r3, [r7, #4]
 8114208:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 811420c:	b2db      	uxtb	r3, r3
 811420e:	2b03      	cmp	r3, #3
 8114210:	d10d      	bne.n	811422e <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 8114212:	687b      	ldr	r3, [r7, #4]
 8114214:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8114218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 811421a:	2b00      	cmp	r3, #0
 811421c:	d007      	beq.n	811422e <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 811421e:	687b      	ldr	r3, [r7, #4]
 8114220:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8114224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8114226:	78fa      	ldrb	r2, [r7, #3]
 8114228:	4611      	mov	r1, r2
 811422a:	6878      	ldr	r0, [r7, #4]
 811422c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 811422e:	2300      	movs	r3, #0
}
 8114230:	4618      	mov	r0, r3
 8114232:	3708      	adds	r7, #8
 8114234:	46bd      	mov	sp, r7
 8114236:	bd80      	pop	{r7, pc}

08114238 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8114238:	b480      	push	{r7}
 811423a:	b083      	sub	sp, #12
 811423c:	af00      	add	r7, sp, #0
 811423e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8114240:	2300      	movs	r3, #0
}
 8114242:	4618      	mov	r0, r3
 8114244:	370c      	adds	r7, #12
 8114246:	46bd      	mov	sp, r7
 8114248:	f85d 7b04 	ldr.w	r7, [sp], #4
 811424c:	4770      	bx	lr

0811424e <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 811424e:	b580      	push	{r7, lr}
 8114250:	b082      	sub	sp, #8
 8114252:	af00      	add	r7, sp, #0
 8114254:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8114256:	687b      	ldr	r3, [r7, #4]
 8114258:	2201      	movs	r2, #1
 811425a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 811425e:	687b      	ldr	r3, [r7, #4]
 8114260:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8114264:	2b00      	cmp	r3, #0
 8114266:	d009      	beq.n	811427c <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8114268:	687b      	ldr	r3, [r7, #4]
 811426a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 811426e:	685b      	ldr	r3, [r3, #4]
 8114270:	687a      	ldr	r2, [r7, #4]
 8114272:	6852      	ldr	r2, [r2, #4]
 8114274:	b2d2      	uxtb	r2, r2
 8114276:	4611      	mov	r1, r2
 8114278:	6878      	ldr	r0, [r7, #4]
 811427a:	4798      	blx	r3
  }

  return USBD_OK;
 811427c:	2300      	movs	r3, #0
}
 811427e:	4618      	mov	r0, r3
 8114280:	3708      	adds	r7, #8
 8114282:	46bd      	mov	sp, r7
 8114284:	bd80      	pop	{r7, pc}

08114286 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8114286:	b480      	push	{r7}
 8114288:	b087      	sub	sp, #28
 811428a:	af00      	add	r7, sp, #0
 811428c:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 811428e:	687b      	ldr	r3, [r7, #4]
 8114290:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8114292:	697b      	ldr	r3, [r7, #20]
 8114294:	781b      	ldrb	r3, [r3, #0]
 8114296:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8114298:	697b      	ldr	r3, [r7, #20]
 811429a:	3301      	adds	r3, #1
 811429c:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 811429e:	697b      	ldr	r3, [r7, #20]
 81142a0:	781b      	ldrb	r3, [r3, #0]
 81142a2:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 81142a4:	8a3b      	ldrh	r3, [r7, #16]
 81142a6:	021b      	lsls	r3, r3, #8
 81142a8:	b21a      	sxth	r2, r3
 81142aa:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 81142ae:	4313      	orrs	r3, r2
 81142b0:	b21b      	sxth	r3, r3
 81142b2:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 81142b4:	89fb      	ldrh	r3, [r7, #14]
}
 81142b6:	4618      	mov	r0, r3
 81142b8:	371c      	adds	r7, #28
 81142ba:	46bd      	mov	sp, r7
 81142bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 81142c0:	4770      	bx	lr
	...

081142c4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 81142c4:	b580      	push	{r7, lr}
 81142c6:	b084      	sub	sp, #16
 81142c8:	af00      	add	r7, sp, #0
 81142ca:	6078      	str	r0, [r7, #4]
 81142cc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 81142ce:	2300      	movs	r3, #0
 81142d0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 81142d2:	683b      	ldr	r3, [r7, #0]
 81142d4:	781b      	ldrb	r3, [r3, #0]
 81142d6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 81142da:	2b40      	cmp	r3, #64	; 0x40
 81142dc:	d005      	beq.n	81142ea <USBD_StdDevReq+0x26>
 81142de:	2b40      	cmp	r3, #64	; 0x40
 81142e0:	d853      	bhi.n	811438a <USBD_StdDevReq+0xc6>
 81142e2:	2b00      	cmp	r3, #0
 81142e4:	d00b      	beq.n	81142fe <USBD_StdDevReq+0x3a>
 81142e6:	2b20      	cmp	r3, #32
 81142e8:	d14f      	bne.n	811438a <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 81142ea:	687b      	ldr	r3, [r7, #4]
 81142ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 81142f0:	689b      	ldr	r3, [r3, #8]
 81142f2:	6839      	ldr	r1, [r7, #0]
 81142f4:	6878      	ldr	r0, [r7, #4]
 81142f6:	4798      	blx	r3
 81142f8:	4603      	mov	r3, r0
 81142fa:	73fb      	strb	r3, [r7, #15]
      break;
 81142fc:	e04a      	b.n	8114394 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 81142fe:	683b      	ldr	r3, [r7, #0]
 8114300:	785b      	ldrb	r3, [r3, #1]
 8114302:	2b09      	cmp	r3, #9
 8114304:	d83b      	bhi.n	811437e <USBD_StdDevReq+0xba>
 8114306:	a201      	add	r2, pc, #4	; (adr r2, 811430c <USBD_StdDevReq+0x48>)
 8114308:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 811430c:	08114361 	.word	0x08114361
 8114310:	08114375 	.word	0x08114375
 8114314:	0811437f 	.word	0x0811437f
 8114318:	0811436b 	.word	0x0811436b
 811431c:	0811437f 	.word	0x0811437f
 8114320:	0811433f 	.word	0x0811433f
 8114324:	08114335 	.word	0x08114335
 8114328:	0811437f 	.word	0x0811437f
 811432c:	08114357 	.word	0x08114357
 8114330:	08114349 	.word	0x08114349
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8114334:	6839      	ldr	r1, [r7, #0]
 8114336:	6878      	ldr	r0, [r7, #4]
 8114338:	f000 f9de 	bl	81146f8 <USBD_GetDescriptor>
          break;
 811433c:	e024      	b.n	8114388 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 811433e:	6839      	ldr	r1, [r7, #0]
 8114340:	6878      	ldr	r0, [r7, #4]
 8114342:	f000 fb43 	bl	81149cc <USBD_SetAddress>
          break;
 8114346:	e01f      	b.n	8114388 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8114348:	6839      	ldr	r1, [r7, #0]
 811434a:	6878      	ldr	r0, [r7, #4]
 811434c:	f000 fb82 	bl	8114a54 <USBD_SetConfig>
 8114350:	4603      	mov	r3, r0
 8114352:	73fb      	strb	r3, [r7, #15]
          break;
 8114354:	e018      	b.n	8114388 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8114356:	6839      	ldr	r1, [r7, #0]
 8114358:	6878      	ldr	r0, [r7, #4]
 811435a:	f000 fc21 	bl	8114ba0 <USBD_GetConfig>
          break;
 811435e:	e013      	b.n	8114388 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8114360:	6839      	ldr	r1, [r7, #0]
 8114362:	6878      	ldr	r0, [r7, #4]
 8114364:	f000 fc52 	bl	8114c0c <USBD_GetStatus>
          break;
 8114368:	e00e      	b.n	8114388 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 811436a:	6839      	ldr	r1, [r7, #0]
 811436c:	6878      	ldr	r0, [r7, #4]
 811436e:	f000 fc81 	bl	8114c74 <USBD_SetFeature>
          break;
 8114372:	e009      	b.n	8114388 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8114374:	6839      	ldr	r1, [r7, #0]
 8114376:	6878      	ldr	r0, [r7, #4]
 8114378:	f000 fc90 	bl	8114c9c <USBD_ClrFeature>
          break;
 811437c:	e004      	b.n	8114388 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 811437e:	6839      	ldr	r1, [r7, #0]
 8114380:	6878      	ldr	r0, [r7, #4]
 8114382:	f000 fce7 	bl	8114d54 <USBD_CtlError>
          break;
 8114386:	bf00      	nop
      }
      break;
 8114388:	e004      	b.n	8114394 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 811438a:	6839      	ldr	r1, [r7, #0]
 811438c:	6878      	ldr	r0, [r7, #4]
 811438e:	f000 fce1 	bl	8114d54 <USBD_CtlError>
      break;
 8114392:	bf00      	nop
  }

  return ret;
 8114394:	7bfb      	ldrb	r3, [r7, #15]
}
 8114396:	4618      	mov	r0, r3
 8114398:	3710      	adds	r7, #16
 811439a:	46bd      	mov	sp, r7
 811439c:	bd80      	pop	{r7, pc}
 811439e:	bf00      	nop

081143a0 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 81143a0:	b580      	push	{r7, lr}
 81143a2:	b084      	sub	sp, #16
 81143a4:	af00      	add	r7, sp, #0
 81143a6:	6078      	str	r0, [r7, #4]
 81143a8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 81143aa:	2300      	movs	r3, #0
 81143ac:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 81143ae:	683b      	ldr	r3, [r7, #0]
 81143b0:	781b      	ldrb	r3, [r3, #0]
 81143b2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 81143b6:	2b40      	cmp	r3, #64	; 0x40
 81143b8:	d005      	beq.n	81143c6 <USBD_StdItfReq+0x26>
 81143ba:	2b40      	cmp	r3, #64	; 0x40
 81143bc:	d82f      	bhi.n	811441e <USBD_StdItfReq+0x7e>
 81143be:	2b00      	cmp	r3, #0
 81143c0:	d001      	beq.n	81143c6 <USBD_StdItfReq+0x26>
 81143c2:	2b20      	cmp	r3, #32
 81143c4:	d12b      	bne.n	811441e <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 81143c6:	687b      	ldr	r3, [r7, #4]
 81143c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 81143cc:	b2db      	uxtb	r3, r3
 81143ce:	3b01      	subs	r3, #1
 81143d0:	2b02      	cmp	r3, #2
 81143d2:	d81d      	bhi.n	8114410 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 81143d4:	683b      	ldr	r3, [r7, #0]
 81143d6:	889b      	ldrh	r3, [r3, #4]
 81143d8:	b2db      	uxtb	r3, r3
 81143da:	2b01      	cmp	r3, #1
 81143dc:	d813      	bhi.n	8114406 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 81143de:	687b      	ldr	r3, [r7, #4]
 81143e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 81143e4:	689b      	ldr	r3, [r3, #8]
 81143e6:	6839      	ldr	r1, [r7, #0]
 81143e8:	6878      	ldr	r0, [r7, #4]
 81143ea:	4798      	blx	r3
 81143ec:	4603      	mov	r3, r0
 81143ee:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 81143f0:	683b      	ldr	r3, [r7, #0]
 81143f2:	88db      	ldrh	r3, [r3, #6]
 81143f4:	2b00      	cmp	r3, #0
 81143f6:	d110      	bne.n	811441a <USBD_StdItfReq+0x7a>
 81143f8:	7bfb      	ldrb	r3, [r7, #15]
 81143fa:	2b00      	cmp	r3, #0
 81143fc:	d10d      	bne.n	811441a <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 81143fe:	6878      	ldr	r0, [r7, #4]
 8114400:	f000 fd73 	bl	8114eea <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8114404:	e009      	b.n	811441a <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8114406:	6839      	ldr	r1, [r7, #0]
 8114408:	6878      	ldr	r0, [r7, #4]
 811440a:	f000 fca3 	bl	8114d54 <USBD_CtlError>
          break;
 811440e:	e004      	b.n	811441a <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8114410:	6839      	ldr	r1, [r7, #0]
 8114412:	6878      	ldr	r0, [r7, #4]
 8114414:	f000 fc9e 	bl	8114d54 <USBD_CtlError>
          break;
 8114418:	e000      	b.n	811441c <USBD_StdItfReq+0x7c>
          break;
 811441a:	bf00      	nop
      }
      break;
 811441c:	e004      	b.n	8114428 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 811441e:	6839      	ldr	r1, [r7, #0]
 8114420:	6878      	ldr	r0, [r7, #4]
 8114422:	f000 fc97 	bl	8114d54 <USBD_CtlError>
      break;
 8114426:	bf00      	nop
  }

  return ret;
 8114428:	7bfb      	ldrb	r3, [r7, #15]
}
 811442a:	4618      	mov	r0, r3
 811442c:	3710      	adds	r7, #16
 811442e:	46bd      	mov	sp, r7
 8114430:	bd80      	pop	{r7, pc}

08114432 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8114432:	b580      	push	{r7, lr}
 8114434:	b084      	sub	sp, #16
 8114436:	af00      	add	r7, sp, #0
 8114438:	6078      	str	r0, [r7, #4]
 811443a:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 811443c:	2300      	movs	r3, #0
 811443e:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8114440:	683b      	ldr	r3, [r7, #0]
 8114442:	889b      	ldrh	r3, [r3, #4]
 8114444:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8114446:	683b      	ldr	r3, [r7, #0]
 8114448:	781b      	ldrb	r3, [r3, #0]
 811444a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 811444e:	2b40      	cmp	r3, #64	; 0x40
 8114450:	d007      	beq.n	8114462 <USBD_StdEPReq+0x30>
 8114452:	2b40      	cmp	r3, #64	; 0x40
 8114454:	f200 8145 	bhi.w	81146e2 <USBD_StdEPReq+0x2b0>
 8114458:	2b00      	cmp	r3, #0
 811445a:	d00c      	beq.n	8114476 <USBD_StdEPReq+0x44>
 811445c:	2b20      	cmp	r3, #32
 811445e:	f040 8140 	bne.w	81146e2 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8114462:	687b      	ldr	r3, [r7, #4]
 8114464:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8114468:	689b      	ldr	r3, [r3, #8]
 811446a:	6839      	ldr	r1, [r7, #0]
 811446c:	6878      	ldr	r0, [r7, #4]
 811446e:	4798      	blx	r3
 8114470:	4603      	mov	r3, r0
 8114472:	73fb      	strb	r3, [r7, #15]
      break;
 8114474:	e13a      	b.n	81146ec <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8114476:	683b      	ldr	r3, [r7, #0]
 8114478:	785b      	ldrb	r3, [r3, #1]
 811447a:	2b03      	cmp	r3, #3
 811447c:	d007      	beq.n	811448e <USBD_StdEPReq+0x5c>
 811447e:	2b03      	cmp	r3, #3
 8114480:	f300 8129 	bgt.w	81146d6 <USBD_StdEPReq+0x2a4>
 8114484:	2b00      	cmp	r3, #0
 8114486:	d07f      	beq.n	8114588 <USBD_StdEPReq+0x156>
 8114488:	2b01      	cmp	r3, #1
 811448a:	d03c      	beq.n	8114506 <USBD_StdEPReq+0xd4>
 811448c:	e123      	b.n	81146d6 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 811448e:	687b      	ldr	r3, [r7, #4]
 8114490:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8114494:	b2db      	uxtb	r3, r3
 8114496:	2b02      	cmp	r3, #2
 8114498:	d002      	beq.n	81144a0 <USBD_StdEPReq+0x6e>
 811449a:	2b03      	cmp	r3, #3
 811449c:	d016      	beq.n	81144cc <USBD_StdEPReq+0x9a>
 811449e:	e02c      	b.n	81144fa <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 81144a0:	7bbb      	ldrb	r3, [r7, #14]
 81144a2:	2b00      	cmp	r3, #0
 81144a4:	d00d      	beq.n	81144c2 <USBD_StdEPReq+0x90>
 81144a6:	7bbb      	ldrb	r3, [r7, #14]
 81144a8:	2b80      	cmp	r3, #128	; 0x80
 81144aa:	d00a      	beq.n	81144c2 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 81144ac:	7bbb      	ldrb	r3, [r7, #14]
 81144ae:	4619      	mov	r1, r3
 81144b0:	6878      	ldr	r0, [r7, #4]
 81144b2:	f004 f93d 	bl	8118730 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 81144b6:	2180      	movs	r1, #128	; 0x80
 81144b8:	6878      	ldr	r0, [r7, #4]
 81144ba:	f004 f939 	bl	8118730 <USBD_LL_StallEP>
 81144be:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 81144c0:	e020      	b.n	8114504 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 81144c2:	6839      	ldr	r1, [r7, #0]
 81144c4:	6878      	ldr	r0, [r7, #4]
 81144c6:	f000 fc45 	bl	8114d54 <USBD_CtlError>
              break;
 81144ca:	e01b      	b.n	8114504 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 81144cc:	683b      	ldr	r3, [r7, #0]
 81144ce:	885b      	ldrh	r3, [r3, #2]
 81144d0:	2b00      	cmp	r3, #0
 81144d2:	d10e      	bne.n	81144f2 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 81144d4:	7bbb      	ldrb	r3, [r7, #14]
 81144d6:	2b00      	cmp	r3, #0
 81144d8:	d00b      	beq.n	81144f2 <USBD_StdEPReq+0xc0>
 81144da:	7bbb      	ldrb	r3, [r7, #14]
 81144dc:	2b80      	cmp	r3, #128	; 0x80
 81144de:	d008      	beq.n	81144f2 <USBD_StdEPReq+0xc0>
 81144e0:	683b      	ldr	r3, [r7, #0]
 81144e2:	88db      	ldrh	r3, [r3, #6]
 81144e4:	2b00      	cmp	r3, #0
 81144e6:	d104      	bne.n	81144f2 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 81144e8:	7bbb      	ldrb	r3, [r7, #14]
 81144ea:	4619      	mov	r1, r3
 81144ec:	6878      	ldr	r0, [r7, #4]
 81144ee:	f004 f91f 	bl	8118730 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 81144f2:	6878      	ldr	r0, [r7, #4]
 81144f4:	f000 fcf9 	bl	8114eea <USBD_CtlSendStatus>

              break;
 81144f8:	e004      	b.n	8114504 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 81144fa:	6839      	ldr	r1, [r7, #0]
 81144fc:	6878      	ldr	r0, [r7, #4]
 81144fe:	f000 fc29 	bl	8114d54 <USBD_CtlError>
              break;
 8114502:	bf00      	nop
          }
          break;
 8114504:	e0ec      	b.n	81146e0 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8114506:	687b      	ldr	r3, [r7, #4]
 8114508:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 811450c:	b2db      	uxtb	r3, r3
 811450e:	2b02      	cmp	r3, #2
 8114510:	d002      	beq.n	8114518 <USBD_StdEPReq+0xe6>
 8114512:	2b03      	cmp	r3, #3
 8114514:	d016      	beq.n	8114544 <USBD_StdEPReq+0x112>
 8114516:	e030      	b.n	811457a <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8114518:	7bbb      	ldrb	r3, [r7, #14]
 811451a:	2b00      	cmp	r3, #0
 811451c:	d00d      	beq.n	811453a <USBD_StdEPReq+0x108>
 811451e:	7bbb      	ldrb	r3, [r7, #14]
 8114520:	2b80      	cmp	r3, #128	; 0x80
 8114522:	d00a      	beq.n	811453a <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8114524:	7bbb      	ldrb	r3, [r7, #14]
 8114526:	4619      	mov	r1, r3
 8114528:	6878      	ldr	r0, [r7, #4]
 811452a:	f004 f901 	bl	8118730 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 811452e:	2180      	movs	r1, #128	; 0x80
 8114530:	6878      	ldr	r0, [r7, #4]
 8114532:	f004 f8fd 	bl	8118730 <USBD_LL_StallEP>
 8114536:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8114538:	e025      	b.n	8114586 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 811453a:	6839      	ldr	r1, [r7, #0]
 811453c:	6878      	ldr	r0, [r7, #4]
 811453e:	f000 fc09 	bl	8114d54 <USBD_CtlError>
              break;
 8114542:	e020      	b.n	8114586 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8114544:	683b      	ldr	r3, [r7, #0]
 8114546:	885b      	ldrh	r3, [r3, #2]
 8114548:	2b00      	cmp	r3, #0
 811454a:	d11b      	bne.n	8114584 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 811454c:	7bbb      	ldrb	r3, [r7, #14]
 811454e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8114552:	2b00      	cmp	r3, #0
 8114554:	d004      	beq.n	8114560 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8114556:	7bbb      	ldrb	r3, [r7, #14]
 8114558:	4619      	mov	r1, r3
 811455a:	6878      	ldr	r0, [r7, #4]
 811455c:	f004 f907 	bl	811876e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8114560:	6878      	ldr	r0, [r7, #4]
 8114562:	f000 fcc2 	bl	8114eea <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8114566:	687b      	ldr	r3, [r7, #4]
 8114568:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 811456c:	689b      	ldr	r3, [r3, #8]
 811456e:	6839      	ldr	r1, [r7, #0]
 8114570:	6878      	ldr	r0, [r7, #4]
 8114572:	4798      	blx	r3
 8114574:	4603      	mov	r3, r0
 8114576:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8114578:	e004      	b.n	8114584 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 811457a:	6839      	ldr	r1, [r7, #0]
 811457c:	6878      	ldr	r0, [r7, #4]
 811457e:	f000 fbe9 	bl	8114d54 <USBD_CtlError>
              break;
 8114582:	e000      	b.n	8114586 <USBD_StdEPReq+0x154>
              break;
 8114584:	bf00      	nop
          }
          break;
 8114586:	e0ab      	b.n	81146e0 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8114588:	687b      	ldr	r3, [r7, #4]
 811458a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 811458e:	b2db      	uxtb	r3, r3
 8114590:	2b02      	cmp	r3, #2
 8114592:	d002      	beq.n	811459a <USBD_StdEPReq+0x168>
 8114594:	2b03      	cmp	r3, #3
 8114596:	d032      	beq.n	81145fe <USBD_StdEPReq+0x1cc>
 8114598:	e097      	b.n	81146ca <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 811459a:	7bbb      	ldrb	r3, [r7, #14]
 811459c:	2b00      	cmp	r3, #0
 811459e:	d007      	beq.n	81145b0 <USBD_StdEPReq+0x17e>
 81145a0:	7bbb      	ldrb	r3, [r7, #14]
 81145a2:	2b80      	cmp	r3, #128	; 0x80
 81145a4:	d004      	beq.n	81145b0 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 81145a6:	6839      	ldr	r1, [r7, #0]
 81145a8:	6878      	ldr	r0, [r7, #4]
 81145aa:	f000 fbd3 	bl	8114d54 <USBD_CtlError>
                break;
 81145ae:	e091      	b.n	81146d4 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 81145b0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 81145b4:	2b00      	cmp	r3, #0
 81145b6:	da0b      	bge.n	81145d0 <USBD_StdEPReq+0x19e>
 81145b8:	7bbb      	ldrb	r3, [r7, #14]
 81145ba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 81145be:	4613      	mov	r3, r2
 81145c0:	009b      	lsls	r3, r3, #2
 81145c2:	4413      	add	r3, r2
 81145c4:	009b      	lsls	r3, r3, #2
 81145c6:	3310      	adds	r3, #16
 81145c8:	687a      	ldr	r2, [r7, #4]
 81145ca:	4413      	add	r3, r2
 81145cc:	3304      	adds	r3, #4
 81145ce:	e00b      	b.n	81145e8 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 81145d0:	7bbb      	ldrb	r3, [r7, #14]
 81145d2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 81145d6:	4613      	mov	r3, r2
 81145d8:	009b      	lsls	r3, r3, #2
 81145da:	4413      	add	r3, r2
 81145dc:	009b      	lsls	r3, r3, #2
 81145de:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 81145e2:	687a      	ldr	r2, [r7, #4]
 81145e4:	4413      	add	r3, r2
 81145e6:	3304      	adds	r3, #4
 81145e8:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 81145ea:	68bb      	ldr	r3, [r7, #8]
 81145ec:	2200      	movs	r2, #0
 81145ee:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 81145f0:	68bb      	ldr	r3, [r7, #8]
 81145f2:	2202      	movs	r2, #2
 81145f4:	4619      	mov	r1, r3
 81145f6:	6878      	ldr	r0, [r7, #4]
 81145f8:	f000 fc1d 	bl	8114e36 <USBD_CtlSendData>
              break;
 81145fc:	e06a      	b.n	81146d4 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 81145fe:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8114602:	2b00      	cmp	r3, #0
 8114604:	da11      	bge.n	811462a <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8114606:	7bbb      	ldrb	r3, [r7, #14]
 8114608:	f003 020f 	and.w	r2, r3, #15
 811460c:	6879      	ldr	r1, [r7, #4]
 811460e:	4613      	mov	r3, r2
 8114610:	009b      	lsls	r3, r3, #2
 8114612:	4413      	add	r3, r2
 8114614:	009b      	lsls	r3, r3, #2
 8114616:	440b      	add	r3, r1
 8114618:	3324      	adds	r3, #36	; 0x24
 811461a:	881b      	ldrh	r3, [r3, #0]
 811461c:	2b00      	cmp	r3, #0
 811461e:	d117      	bne.n	8114650 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8114620:	6839      	ldr	r1, [r7, #0]
 8114622:	6878      	ldr	r0, [r7, #4]
 8114624:	f000 fb96 	bl	8114d54 <USBD_CtlError>
                  break;
 8114628:	e054      	b.n	81146d4 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 811462a:	7bbb      	ldrb	r3, [r7, #14]
 811462c:	f003 020f 	and.w	r2, r3, #15
 8114630:	6879      	ldr	r1, [r7, #4]
 8114632:	4613      	mov	r3, r2
 8114634:	009b      	lsls	r3, r3, #2
 8114636:	4413      	add	r3, r2
 8114638:	009b      	lsls	r3, r3, #2
 811463a:	440b      	add	r3, r1
 811463c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8114640:	881b      	ldrh	r3, [r3, #0]
 8114642:	2b00      	cmp	r3, #0
 8114644:	d104      	bne.n	8114650 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8114646:	6839      	ldr	r1, [r7, #0]
 8114648:	6878      	ldr	r0, [r7, #4]
 811464a:	f000 fb83 	bl	8114d54 <USBD_CtlError>
                  break;
 811464e:	e041      	b.n	81146d4 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8114650:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8114654:	2b00      	cmp	r3, #0
 8114656:	da0b      	bge.n	8114670 <USBD_StdEPReq+0x23e>
 8114658:	7bbb      	ldrb	r3, [r7, #14]
 811465a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 811465e:	4613      	mov	r3, r2
 8114660:	009b      	lsls	r3, r3, #2
 8114662:	4413      	add	r3, r2
 8114664:	009b      	lsls	r3, r3, #2
 8114666:	3310      	adds	r3, #16
 8114668:	687a      	ldr	r2, [r7, #4]
 811466a:	4413      	add	r3, r2
 811466c:	3304      	adds	r3, #4
 811466e:	e00b      	b.n	8114688 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8114670:	7bbb      	ldrb	r3, [r7, #14]
 8114672:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8114676:	4613      	mov	r3, r2
 8114678:	009b      	lsls	r3, r3, #2
 811467a:	4413      	add	r3, r2
 811467c:	009b      	lsls	r3, r3, #2
 811467e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8114682:	687a      	ldr	r2, [r7, #4]
 8114684:	4413      	add	r3, r2
 8114686:	3304      	adds	r3, #4
 8114688:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 811468a:	7bbb      	ldrb	r3, [r7, #14]
 811468c:	2b00      	cmp	r3, #0
 811468e:	d002      	beq.n	8114696 <USBD_StdEPReq+0x264>
 8114690:	7bbb      	ldrb	r3, [r7, #14]
 8114692:	2b80      	cmp	r3, #128	; 0x80
 8114694:	d103      	bne.n	811469e <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8114696:	68bb      	ldr	r3, [r7, #8]
 8114698:	2200      	movs	r2, #0
 811469a:	601a      	str	r2, [r3, #0]
 811469c:	e00e      	b.n	81146bc <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 811469e:	7bbb      	ldrb	r3, [r7, #14]
 81146a0:	4619      	mov	r1, r3
 81146a2:	6878      	ldr	r0, [r7, #4]
 81146a4:	f004 f882 	bl	81187ac <USBD_LL_IsStallEP>
 81146a8:	4603      	mov	r3, r0
 81146aa:	2b00      	cmp	r3, #0
 81146ac:	d003      	beq.n	81146b6 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 81146ae:	68bb      	ldr	r3, [r7, #8]
 81146b0:	2201      	movs	r2, #1
 81146b2:	601a      	str	r2, [r3, #0]
 81146b4:	e002      	b.n	81146bc <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 81146b6:	68bb      	ldr	r3, [r7, #8]
 81146b8:	2200      	movs	r2, #0
 81146ba:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 81146bc:	68bb      	ldr	r3, [r7, #8]
 81146be:	2202      	movs	r2, #2
 81146c0:	4619      	mov	r1, r3
 81146c2:	6878      	ldr	r0, [r7, #4]
 81146c4:	f000 fbb7 	bl	8114e36 <USBD_CtlSendData>
              break;
 81146c8:	e004      	b.n	81146d4 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 81146ca:	6839      	ldr	r1, [r7, #0]
 81146cc:	6878      	ldr	r0, [r7, #4]
 81146ce:	f000 fb41 	bl	8114d54 <USBD_CtlError>
              break;
 81146d2:	bf00      	nop
          }
          break;
 81146d4:	e004      	b.n	81146e0 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 81146d6:	6839      	ldr	r1, [r7, #0]
 81146d8:	6878      	ldr	r0, [r7, #4]
 81146da:	f000 fb3b 	bl	8114d54 <USBD_CtlError>
          break;
 81146de:	bf00      	nop
      }
      break;
 81146e0:	e004      	b.n	81146ec <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 81146e2:	6839      	ldr	r1, [r7, #0]
 81146e4:	6878      	ldr	r0, [r7, #4]
 81146e6:	f000 fb35 	bl	8114d54 <USBD_CtlError>
      break;
 81146ea:	bf00      	nop
  }

  return ret;
 81146ec:	7bfb      	ldrb	r3, [r7, #15]
}
 81146ee:	4618      	mov	r0, r3
 81146f0:	3710      	adds	r7, #16
 81146f2:	46bd      	mov	sp, r7
 81146f4:	bd80      	pop	{r7, pc}
	...

081146f8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 81146f8:	b580      	push	{r7, lr}
 81146fa:	b084      	sub	sp, #16
 81146fc:	af00      	add	r7, sp, #0
 81146fe:	6078      	str	r0, [r7, #4]
 8114700:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8114702:	2300      	movs	r3, #0
 8114704:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8114706:	2300      	movs	r3, #0
 8114708:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 811470a:	2300      	movs	r3, #0
 811470c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 811470e:	683b      	ldr	r3, [r7, #0]
 8114710:	885b      	ldrh	r3, [r3, #2]
 8114712:	0a1b      	lsrs	r3, r3, #8
 8114714:	b29b      	uxth	r3, r3
 8114716:	3b01      	subs	r3, #1
 8114718:	2b06      	cmp	r3, #6
 811471a:	f200 8128 	bhi.w	811496e <USBD_GetDescriptor+0x276>
 811471e:	a201      	add	r2, pc, #4	; (adr r2, 8114724 <USBD_GetDescriptor+0x2c>)
 8114720:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8114724:	08114741 	.word	0x08114741
 8114728:	08114759 	.word	0x08114759
 811472c:	08114799 	.word	0x08114799
 8114730:	0811496f 	.word	0x0811496f
 8114734:	0811496f 	.word	0x0811496f
 8114738:	0811490f 	.word	0x0811490f
 811473c:	0811493b 	.word	0x0811493b
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8114740:	687b      	ldr	r3, [r7, #4]
 8114742:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8114746:	681b      	ldr	r3, [r3, #0]
 8114748:	687a      	ldr	r2, [r7, #4]
 811474a:	7c12      	ldrb	r2, [r2, #16]
 811474c:	f107 0108 	add.w	r1, r7, #8
 8114750:	4610      	mov	r0, r2
 8114752:	4798      	blx	r3
 8114754:	60f8      	str	r0, [r7, #12]
      break;
 8114756:	e112      	b.n	811497e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8114758:	687b      	ldr	r3, [r7, #4]
 811475a:	7c1b      	ldrb	r3, [r3, #16]
 811475c:	2b00      	cmp	r3, #0
 811475e:	d10d      	bne.n	811477c <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8114760:	687b      	ldr	r3, [r7, #4]
 8114762:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8114766:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8114768:	f107 0208 	add.w	r2, r7, #8
 811476c:	4610      	mov	r0, r2
 811476e:	4798      	blx	r3
 8114770:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8114772:	68fb      	ldr	r3, [r7, #12]
 8114774:	3301      	adds	r3, #1
 8114776:	2202      	movs	r2, #2
 8114778:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 811477a:	e100      	b.n	811497e <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 811477c:	687b      	ldr	r3, [r7, #4]
 811477e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8114782:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8114784:	f107 0208 	add.w	r2, r7, #8
 8114788:	4610      	mov	r0, r2
 811478a:	4798      	blx	r3
 811478c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 811478e:	68fb      	ldr	r3, [r7, #12]
 8114790:	3301      	adds	r3, #1
 8114792:	2202      	movs	r2, #2
 8114794:	701a      	strb	r2, [r3, #0]
      break;
 8114796:	e0f2      	b.n	811497e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8114798:	683b      	ldr	r3, [r7, #0]
 811479a:	885b      	ldrh	r3, [r3, #2]
 811479c:	b2db      	uxtb	r3, r3
 811479e:	2b05      	cmp	r3, #5
 81147a0:	f200 80ac 	bhi.w	81148fc <USBD_GetDescriptor+0x204>
 81147a4:	a201      	add	r2, pc, #4	; (adr r2, 81147ac <USBD_GetDescriptor+0xb4>)
 81147a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81147aa:	bf00      	nop
 81147ac:	081147c5 	.word	0x081147c5
 81147b0:	081147f9 	.word	0x081147f9
 81147b4:	0811482d 	.word	0x0811482d
 81147b8:	08114861 	.word	0x08114861
 81147bc:	08114895 	.word	0x08114895
 81147c0:	081148c9 	.word	0x081148c9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 81147c4:	687b      	ldr	r3, [r7, #4]
 81147c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 81147ca:	685b      	ldr	r3, [r3, #4]
 81147cc:	2b00      	cmp	r3, #0
 81147ce:	d00b      	beq.n	81147e8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 81147d0:	687b      	ldr	r3, [r7, #4]
 81147d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 81147d6:	685b      	ldr	r3, [r3, #4]
 81147d8:	687a      	ldr	r2, [r7, #4]
 81147da:	7c12      	ldrb	r2, [r2, #16]
 81147dc:	f107 0108 	add.w	r1, r7, #8
 81147e0:	4610      	mov	r0, r2
 81147e2:	4798      	blx	r3
 81147e4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 81147e6:	e091      	b.n	811490c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 81147e8:	6839      	ldr	r1, [r7, #0]
 81147ea:	6878      	ldr	r0, [r7, #4]
 81147ec:	f000 fab2 	bl	8114d54 <USBD_CtlError>
            err++;
 81147f0:	7afb      	ldrb	r3, [r7, #11]
 81147f2:	3301      	adds	r3, #1
 81147f4:	72fb      	strb	r3, [r7, #11]
          break;
 81147f6:	e089      	b.n	811490c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 81147f8:	687b      	ldr	r3, [r7, #4]
 81147fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 81147fe:	689b      	ldr	r3, [r3, #8]
 8114800:	2b00      	cmp	r3, #0
 8114802:	d00b      	beq.n	811481c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8114804:	687b      	ldr	r3, [r7, #4]
 8114806:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 811480a:	689b      	ldr	r3, [r3, #8]
 811480c:	687a      	ldr	r2, [r7, #4]
 811480e:	7c12      	ldrb	r2, [r2, #16]
 8114810:	f107 0108 	add.w	r1, r7, #8
 8114814:	4610      	mov	r0, r2
 8114816:	4798      	blx	r3
 8114818:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 811481a:	e077      	b.n	811490c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 811481c:	6839      	ldr	r1, [r7, #0]
 811481e:	6878      	ldr	r0, [r7, #4]
 8114820:	f000 fa98 	bl	8114d54 <USBD_CtlError>
            err++;
 8114824:	7afb      	ldrb	r3, [r7, #11]
 8114826:	3301      	adds	r3, #1
 8114828:	72fb      	strb	r3, [r7, #11]
          break;
 811482a:	e06f      	b.n	811490c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 811482c:	687b      	ldr	r3, [r7, #4]
 811482e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8114832:	68db      	ldr	r3, [r3, #12]
 8114834:	2b00      	cmp	r3, #0
 8114836:	d00b      	beq.n	8114850 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8114838:	687b      	ldr	r3, [r7, #4]
 811483a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 811483e:	68db      	ldr	r3, [r3, #12]
 8114840:	687a      	ldr	r2, [r7, #4]
 8114842:	7c12      	ldrb	r2, [r2, #16]
 8114844:	f107 0108 	add.w	r1, r7, #8
 8114848:	4610      	mov	r0, r2
 811484a:	4798      	blx	r3
 811484c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 811484e:	e05d      	b.n	811490c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8114850:	6839      	ldr	r1, [r7, #0]
 8114852:	6878      	ldr	r0, [r7, #4]
 8114854:	f000 fa7e 	bl	8114d54 <USBD_CtlError>
            err++;
 8114858:	7afb      	ldrb	r3, [r7, #11]
 811485a:	3301      	adds	r3, #1
 811485c:	72fb      	strb	r3, [r7, #11]
          break;
 811485e:	e055      	b.n	811490c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8114860:	687b      	ldr	r3, [r7, #4]
 8114862:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8114866:	691b      	ldr	r3, [r3, #16]
 8114868:	2b00      	cmp	r3, #0
 811486a:	d00b      	beq.n	8114884 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 811486c:	687b      	ldr	r3, [r7, #4]
 811486e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8114872:	691b      	ldr	r3, [r3, #16]
 8114874:	687a      	ldr	r2, [r7, #4]
 8114876:	7c12      	ldrb	r2, [r2, #16]
 8114878:	f107 0108 	add.w	r1, r7, #8
 811487c:	4610      	mov	r0, r2
 811487e:	4798      	blx	r3
 8114880:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8114882:	e043      	b.n	811490c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8114884:	6839      	ldr	r1, [r7, #0]
 8114886:	6878      	ldr	r0, [r7, #4]
 8114888:	f000 fa64 	bl	8114d54 <USBD_CtlError>
            err++;
 811488c:	7afb      	ldrb	r3, [r7, #11]
 811488e:	3301      	adds	r3, #1
 8114890:	72fb      	strb	r3, [r7, #11]
          break;
 8114892:	e03b      	b.n	811490c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8114894:	687b      	ldr	r3, [r7, #4]
 8114896:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 811489a:	695b      	ldr	r3, [r3, #20]
 811489c:	2b00      	cmp	r3, #0
 811489e:	d00b      	beq.n	81148b8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 81148a0:	687b      	ldr	r3, [r7, #4]
 81148a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 81148a6:	695b      	ldr	r3, [r3, #20]
 81148a8:	687a      	ldr	r2, [r7, #4]
 81148aa:	7c12      	ldrb	r2, [r2, #16]
 81148ac:	f107 0108 	add.w	r1, r7, #8
 81148b0:	4610      	mov	r0, r2
 81148b2:	4798      	blx	r3
 81148b4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 81148b6:	e029      	b.n	811490c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 81148b8:	6839      	ldr	r1, [r7, #0]
 81148ba:	6878      	ldr	r0, [r7, #4]
 81148bc:	f000 fa4a 	bl	8114d54 <USBD_CtlError>
            err++;
 81148c0:	7afb      	ldrb	r3, [r7, #11]
 81148c2:	3301      	adds	r3, #1
 81148c4:	72fb      	strb	r3, [r7, #11]
          break;
 81148c6:	e021      	b.n	811490c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 81148c8:	687b      	ldr	r3, [r7, #4]
 81148ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 81148ce:	699b      	ldr	r3, [r3, #24]
 81148d0:	2b00      	cmp	r3, #0
 81148d2:	d00b      	beq.n	81148ec <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 81148d4:	687b      	ldr	r3, [r7, #4]
 81148d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 81148da:	699b      	ldr	r3, [r3, #24]
 81148dc:	687a      	ldr	r2, [r7, #4]
 81148de:	7c12      	ldrb	r2, [r2, #16]
 81148e0:	f107 0108 	add.w	r1, r7, #8
 81148e4:	4610      	mov	r0, r2
 81148e6:	4798      	blx	r3
 81148e8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 81148ea:	e00f      	b.n	811490c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 81148ec:	6839      	ldr	r1, [r7, #0]
 81148ee:	6878      	ldr	r0, [r7, #4]
 81148f0:	f000 fa30 	bl	8114d54 <USBD_CtlError>
            err++;
 81148f4:	7afb      	ldrb	r3, [r7, #11]
 81148f6:	3301      	adds	r3, #1
 81148f8:	72fb      	strb	r3, [r7, #11]
          break;
 81148fa:	e007      	b.n	811490c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 81148fc:	6839      	ldr	r1, [r7, #0]
 81148fe:	6878      	ldr	r0, [r7, #4]
 8114900:	f000 fa28 	bl	8114d54 <USBD_CtlError>
          err++;
 8114904:	7afb      	ldrb	r3, [r7, #11]
 8114906:	3301      	adds	r3, #1
 8114908:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 811490a:	bf00      	nop
      }
      break;
 811490c:	e037      	b.n	811497e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 811490e:	687b      	ldr	r3, [r7, #4]
 8114910:	7c1b      	ldrb	r3, [r3, #16]
 8114912:	2b00      	cmp	r3, #0
 8114914:	d109      	bne.n	811492a <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8114916:	687b      	ldr	r3, [r7, #4]
 8114918:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 811491c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 811491e:	f107 0208 	add.w	r2, r7, #8
 8114922:	4610      	mov	r0, r2
 8114924:	4798      	blx	r3
 8114926:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8114928:	e029      	b.n	811497e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 811492a:	6839      	ldr	r1, [r7, #0]
 811492c:	6878      	ldr	r0, [r7, #4]
 811492e:	f000 fa11 	bl	8114d54 <USBD_CtlError>
        err++;
 8114932:	7afb      	ldrb	r3, [r7, #11]
 8114934:	3301      	adds	r3, #1
 8114936:	72fb      	strb	r3, [r7, #11]
      break;
 8114938:	e021      	b.n	811497e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 811493a:	687b      	ldr	r3, [r7, #4]
 811493c:	7c1b      	ldrb	r3, [r3, #16]
 811493e:	2b00      	cmp	r3, #0
 8114940:	d10d      	bne.n	811495e <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8114942:	687b      	ldr	r3, [r7, #4]
 8114944:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8114948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 811494a:	f107 0208 	add.w	r2, r7, #8
 811494e:	4610      	mov	r0, r2
 8114950:	4798      	blx	r3
 8114952:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8114954:	68fb      	ldr	r3, [r7, #12]
 8114956:	3301      	adds	r3, #1
 8114958:	2207      	movs	r2, #7
 811495a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 811495c:	e00f      	b.n	811497e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 811495e:	6839      	ldr	r1, [r7, #0]
 8114960:	6878      	ldr	r0, [r7, #4]
 8114962:	f000 f9f7 	bl	8114d54 <USBD_CtlError>
        err++;
 8114966:	7afb      	ldrb	r3, [r7, #11]
 8114968:	3301      	adds	r3, #1
 811496a:	72fb      	strb	r3, [r7, #11]
      break;
 811496c:	e007      	b.n	811497e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 811496e:	6839      	ldr	r1, [r7, #0]
 8114970:	6878      	ldr	r0, [r7, #4]
 8114972:	f000 f9ef 	bl	8114d54 <USBD_CtlError>
      err++;
 8114976:	7afb      	ldrb	r3, [r7, #11]
 8114978:	3301      	adds	r3, #1
 811497a:	72fb      	strb	r3, [r7, #11]
      break;
 811497c:	bf00      	nop
  }

  if (err != 0U)
 811497e:	7afb      	ldrb	r3, [r7, #11]
 8114980:	2b00      	cmp	r3, #0
 8114982:	d11e      	bne.n	81149c2 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8114984:	683b      	ldr	r3, [r7, #0]
 8114986:	88db      	ldrh	r3, [r3, #6]
 8114988:	2b00      	cmp	r3, #0
 811498a:	d016      	beq.n	81149ba <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 811498c:	893b      	ldrh	r3, [r7, #8]
 811498e:	2b00      	cmp	r3, #0
 8114990:	d00e      	beq.n	81149b0 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8114992:	683b      	ldr	r3, [r7, #0]
 8114994:	88da      	ldrh	r2, [r3, #6]
 8114996:	893b      	ldrh	r3, [r7, #8]
 8114998:	4293      	cmp	r3, r2
 811499a:	bf28      	it	cs
 811499c:	4613      	movcs	r3, r2
 811499e:	b29b      	uxth	r3, r3
 81149a0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 81149a2:	893b      	ldrh	r3, [r7, #8]
 81149a4:	461a      	mov	r2, r3
 81149a6:	68f9      	ldr	r1, [r7, #12]
 81149a8:	6878      	ldr	r0, [r7, #4]
 81149aa:	f000 fa44 	bl	8114e36 <USBD_CtlSendData>
 81149ae:	e009      	b.n	81149c4 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 81149b0:	6839      	ldr	r1, [r7, #0]
 81149b2:	6878      	ldr	r0, [r7, #4]
 81149b4:	f000 f9ce 	bl	8114d54 <USBD_CtlError>
 81149b8:	e004      	b.n	81149c4 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 81149ba:	6878      	ldr	r0, [r7, #4]
 81149bc:	f000 fa95 	bl	8114eea <USBD_CtlSendStatus>
 81149c0:	e000      	b.n	81149c4 <USBD_GetDescriptor+0x2cc>
    return;
 81149c2:	bf00      	nop
  }
}
 81149c4:	3710      	adds	r7, #16
 81149c6:	46bd      	mov	sp, r7
 81149c8:	bd80      	pop	{r7, pc}
 81149ca:	bf00      	nop

081149cc <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 81149cc:	b580      	push	{r7, lr}
 81149ce:	b084      	sub	sp, #16
 81149d0:	af00      	add	r7, sp, #0
 81149d2:	6078      	str	r0, [r7, #4]
 81149d4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 81149d6:	683b      	ldr	r3, [r7, #0]
 81149d8:	889b      	ldrh	r3, [r3, #4]
 81149da:	2b00      	cmp	r3, #0
 81149dc:	d131      	bne.n	8114a42 <USBD_SetAddress+0x76>
 81149de:	683b      	ldr	r3, [r7, #0]
 81149e0:	88db      	ldrh	r3, [r3, #6]
 81149e2:	2b00      	cmp	r3, #0
 81149e4:	d12d      	bne.n	8114a42 <USBD_SetAddress+0x76>
 81149e6:	683b      	ldr	r3, [r7, #0]
 81149e8:	885b      	ldrh	r3, [r3, #2]
 81149ea:	2b7f      	cmp	r3, #127	; 0x7f
 81149ec:	d829      	bhi.n	8114a42 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 81149ee:	683b      	ldr	r3, [r7, #0]
 81149f0:	885b      	ldrh	r3, [r3, #2]
 81149f2:	b2db      	uxtb	r3, r3
 81149f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 81149f8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 81149fa:	687b      	ldr	r3, [r7, #4]
 81149fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8114a00:	b2db      	uxtb	r3, r3
 8114a02:	2b03      	cmp	r3, #3
 8114a04:	d104      	bne.n	8114a10 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8114a06:	6839      	ldr	r1, [r7, #0]
 8114a08:	6878      	ldr	r0, [r7, #4]
 8114a0a:	f000 f9a3 	bl	8114d54 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8114a0e:	e01d      	b.n	8114a4c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8114a10:	687b      	ldr	r3, [r7, #4]
 8114a12:	7bfa      	ldrb	r2, [r7, #15]
 8114a14:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8114a18:	7bfb      	ldrb	r3, [r7, #15]
 8114a1a:	4619      	mov	r1, r3
 8114a1c:	6878      	ldr	r0, [r7, #4]
 8114a1e:	f003 fef1 	bl	8118804 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8114a22:	6878      	ldr	r0, [r7, #4]
 8114a24:	f000 fa61 	bl	8114eea <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8114a28:	7bfb      	ldrb	r3, [r7, #15]
 8114a2a:	2b00      	cmp	r3, #0
 8114a2c:	d004      	beq.n	8114a38 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8114a2e:	687b      	ldr	r3, [r7, #4]
 8114a30:	2202      	movs	r2, #2
 8114a32:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8114a36:	e009      	b.n	8114a4c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8114a38:	687b      	ldr	r3, [r7, #4]
 8114a3a:	2201      	movs	r2, #1
 8114a3c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8114a40:	e004      	b.n	8114a4c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8114a42:	6839      	ldr	r1, [r7, #0]
 8114a44:	6878      	ldr	r0, [r7, #4]
 8114a46:	f000 f985 	bl	8114d54 <USBD_CtlError>
  }
}
 8114a4a:	bf00      	nop
 8114a4c:	bf00      	nop
 8114a4e:	3710      	adds	r7, #16
 8114a50:	46bd      	mov	sp, r7
 8114a52:	bd80      	pop	{r7, pc}

08114a54 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8114a54:	b580      	push	{r7, lr}
 8114a56:	b084      	sub	sp, #16
 8114a58:	af00      	add	r7, sp, #0
 8114a5a:	6078      	str	r0, [r7, #4]
 8114a5c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8114a5e:	2300      	movs	r3, #0
 8114a60:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8114a62:	683b      	ldr	r3, [r7, #0]
 8114a64:	885b      	ldrh	r3, [r3, #2]
 8114a66:	b2da      	uxtb	r2, r3
 8114a68:	4b4c      	ldr	r3, [pc, #304]	; (8114b9c <USBD_SetConfig+0x148>)
 8114a6a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8114a6c:	4b4b      	ldr	r3, [pc, #300]	; (8114b9c <USBD_SetConfig+0x148>)
 8114a6e:	781b      	ldrb	r3, [r3, #0]
 8114a70:	2b01      	cmp	r3, #1
 8114a72:	d905      	bls.n	8114a80 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8114a74:	6839      	ldr	r1, [r7, #0]
 8114a76:	6878      	ldr	r0, [r7, #4]
 8114a78:	f000 f96c 	bl	8114d54 <USBD_CtlError>
    return USBD_FAIL;
 8114a7c:	2303      	movs	r3, #3
 8114a7e:	e088      	b.n	8114b92 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8114a80:	687b      	ldr	r3, [r7, #4]
 8114a82:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8114a86:	b2db      	uxtb	r3, r3
 8114a88:	2b02      	cmp	r3, #2
 8114a8a:	d002      	beq.n	8114a92 <USBD_SetConfig+0x3e>
 8114a8c:	2b03      	cmp	r3, #3
 8114a8e:	d025      	beq.n	8114adc <USBD_SetConfig+0x88>
 8114a90:	e071      	b.n	8114b76 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8114a92:	4b42      	ldr	r3, [pc, #264]	; (8114b9c <USBD_SetConfig+0x148>)
 8114a94:	781b      	ldrb	r3, [r3, #0]
 8114a96:	2b00      	cmp	r3, #0
 8114a98:	d01c      	beq.n	8114ad4 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8114a9a:	4b40      	ldr	r3, [pc, #256]	; (8114b9c <USBD_SetConfig+0x148>)
 8114a9c:	781b      	ldrb	r3, [r3, #0]
 8114a9e:	461a      	mov	r2, r3
 8114aa0:	687b      	ldr	r3, [r7, #4]
 8114aa2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8114aa4:	4b3d      	ldr	r3, [pc, #244]	; (8114b9c <USBD_SetConfig+0x148>)
 8114aa6:	781b      	ldrb	r3, [r3, #0]
 8114aa8:	4619      	mov	r1, r3
 8114aaa:	6878      	ldr	r0, [r7, #4]
 8114aac:	f7ff f948 	bl	8113d40 <USBD_SetClassConfig>
 8114ab0:	4603      	mov	r3, r0
 8114ab2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8114ab4:	7bfb      	ldrb	r3, [r7, #15]
 8114ab6:	2b00      	cmp	r3, #0
 8114ab8:	d004      	beq.n	8114ac4 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8114aba:	6839      	ldr	r1, [r7, #0]
 8114abc:	6878      	ldr	r0, [r7, #4]
 8114abe:	f000 f949 	bl	8114d54 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8114ac2:	e065      	b.n	8114b90 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8114ac4:	6878      	ldr	r0, [r7, #4]
 8114ac6:	f000 fa10 	bl	8114eea <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8114aca:	687b      	ldr	r3, [r7, #4]
 8114acc:	2203      	movs	r2, #3
 8114ace:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8114ad2:	e05d      	b.n	8114b90 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8114ad4:	6878      	ldr	r0, [r7, #4]
 8114ad6:	f000 fa08 	bl	8114eea <USBD_CtlSendStatus>
      break;
 8114ada:	e059      	b.n	8114b90 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8114adc:	4b2f      	ldr	r3, [pc, #188]	; (8114b9c <USBD_SetConfig+0x148>)
 8114ade:	781b      	ldrb	r3, [r3, #0]
 8114ae0:	2b00      	cmp	r3, #0
 8114ae2:	d112      	bne.n	8114b0a <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8114ae4:	687b      	ldr	r3, [r7, #4]
 8114ae6:	2202      	movs	r2, #2
 8114ae8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8114aec:	4b2b      	ldr	r3, [pc, #172]	; (8114b9c <USBD_SetConfig+0x148>)
 8114aee:	781b      	ldrb	r3, [r3, #0]
 8114af0:	461a      	mov	r2, r3
 8114af2:	687b      	ldr	r3, [r7, #4]
 8114af4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8114af6:	4b29      	ldr	r3, [pc, #164]	; (8114b9c <USBD_SetConfig+0x148>)
 8114af8:	781b      	ldrb	r3, [r3, #0]
 8114afa:	4619      	mov	r1, r3
 8114afc:	6878      	ldr	r0, [r7, #4]
 8114afe:	f7ff f93b 	bl	8113d78 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8114b02:	6878      	ldr	r0, [r7, #4]
 8114b04:	f000 f9f1 	bl	8114eea <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8114b08:	e042      	b.n	8114b90 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8114b0a:	4b24      	ldr	r3, [pc, #144]	; (8114b9c <USBD_SetConfig+0x148>)
 8114b0c:	781b      	ldrb	r3, [r3, #0]
 8114b0e:	461a      	mov	r2, r3
 8114b10:	687b      	ldr	r3, [r7, #4]
 8114b12:	685b      	ldr	r3, [r3, #4]
 8114b14:	429a      	cmp	r2, r3
 8114b16:	d02a      	beq.n	8114b6e <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8114b18:	687b      	ldr	r3, [r7, #4]
 8114b1a:	685b      	ldr	r3, [r3, #4]
 8114b1c:	b2db      	uxtb	r3, r3
 8114b1e:	4619      	mov	r1, r3
 8114b20:	6878      	ldr	r0, [r7, #4]
 8114b22:	f7ff f929 	bl	8113d78 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8114b26:	4b1d      	ldr	r3, [pc, #116]	; (8114b9c <USBD_SetConfig+0x148>)
 8114b28:	781b      	ldrb	r3, [r3, #0]
 8114b2a:	461a      	mov	r2, r3
 8114b2c:	687b      	ldr	r3, [r7, #4]
 8114b2e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8114b30:	4b1a      	ldr	r3, [pc, #104]	; (8114b9c <USBD_SetConfig+0x148>)
 8114b32:	781b      	ldrb	r3, [r3, #0]
 8114b34:	4619      	mov	r1, r3
 8114b36:	6878      	ldr	r0, [r7, #4]
 8114b38:	f7ff f902 	bl	8113d40 <USBD_SetClassConfig>
 8114b3c:	4603      	mov	r3, r0
 8114b3e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8114b40:	7bfb      	ldrb	r3, [r7, #15]
 8114b42:	2b00      	cmp	r3, #0
 8114b44:	d00f      	beq.n	8114b66 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8114b46:	6839      	ldr	r1, [r7, #0]
 8114b48:	6878      	ldr	r0, [r7, #4]
 8114b4a:	f000 f903 	bl	8114d54 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8114b4e:	687b      	ldr	r3, [r7, #4]
 8114b50:	685b      	ldr	r3, [r3, #4]
 8114b52:	b2db      	uxtb	r3, r3
 8114b54:	4619      	mov	r1, r3
 8114b56:	6878      	ldr	r0, [r7, #4]
 8114b58:	f7ff f90e 	bl	8113d78 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8114b5c:	687b      	ldr	r3, [r7, #4]
 8114b5e:	2202      	movs	r2, #2
 8114b60:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8114b64:	e014      	b.n	8114b90 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8114b66:	6878      	ldr	r0, [r7, #4]
 8114b68:	f000 f9bf 	bl	8114eea <USBD_CtlSendStatus>
      break;
 8114b6c:	e010      	b.n	8114b90 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8114b6e:	6878      	ldr	r0, [r7, #4]
 8114b70:	f000 f9bb 	bl	8114eea <USBD_CtlSendStatus>
      break;
 8114b74:	e00c      	b.n	8114b90 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8114b76:	6839      	ldr	r1, [r7, #0]
 8114b78:	6878      	ldr	r0, [r7, #4]
 8114b7a:	f000 f8eb 	bl	8114d54 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8114b7e:	4b07      	ldr	r3, [pc, #28]	; (8114b9c <USBD_SetConfig+0x148>)
 8114b80:	781b      	ldrb	r3, [r3, #0]
 8114b82:	4619      	mov	r1, r3
 8114b84:	6878      	ldr	r0, [r7, #4]
 8114b86:	f7ff f8f7 	bl	8113d78 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8114b8a:	2303      	movs	r3, #3
 8114b8c:	73fb      	strb	r3, [r7, #15]
      break;
 8114b8e:	bf00      	nop
  }

  return ret;
 8114b90:	7bfb      	ldrb	r3, [r7, #15]
}
 8114b92:	4618      	mov	r0, r3
 8114b94:	3710      	adds	r7, #16
 8114b96:	46bd      	mov	sp, r7
 8114b98:	bd80      	pop	{r7, pc}
 8114b9a:	bf00      	nop
 8114b9c:	10000388 	.word	0x10000388

08114ba0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8114ba0:	b580      	push	{r7, lr}
 8114ba2:	b082      	sub	sp, #8
 8114ba4:	af00      	add	r7, sp, #0
 8114ba6:	6078      	str	r0, [r7, #4]
 8114ba8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8114baa:	683b      	ldr	r3, [r7, #0]
 8114bac:	88db      	ldrh	r3, [r3, #6]
 8114bae:	2b01      	cmp	r3, #1
 8114bb0:	d004      	beq.n	8114bbc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8114bb2:	6839      	ldr	r1, [r7, #0]
 8114bb4:	6878      	ldr	r0, [r7, #4]
 8114bb6:	f000 f8cd 	bl	8114d54 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8114bba:	e023      	b.n	8114c04 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8114bbc:	687b      	ldr	r3, [r7, #4]
 8114bbe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8114bc2:	b2db      	uxtb	r3, r3
 8114bc4:	2b02      	cmp	r3, #2
 8114bc6:	dc02      	bgt.n	8114bce <USBD_GetConfig+0x2e>
 8114bc8:	2b00      	cmp	r3, #0
 8114bca:	dc03      	bgt.n	8114bd4 <USBD_GetConfig+0x34>
 8114bcc:	e015      	b.n	8114bfa <USBD_GetConfig+0x5a>
 8114bce:	2b03      	cmp	r3, #3
 8114bd0:	d00b      	beq.n	8114bea <USBD_GetConfig+0x4a>
 8114bd2:	e012      	b.n	8114bfa <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8114bd4:	687b      	ldr	r3, [r7, #4]
 8114bd6:	2200      	movs	r2, #0
 8114bd8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8114bda:	687b      	ldr	r3, [r7, #4]
 8114bdc:	3308      	adds	r3, #8
 8114bde:	2201      	movs	r2, #1
 8114be0:	4619      	mov	r1, r3
 8114be2:	6878      	ldr	r0, [r7, #4]
 8114be4:	f000 f927 	bl	8114e36 <USBD_CtlSendData>
        break;
 8114be8:	e00c      	b.n	8114c04 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8114bea:	687b      	ldr	r3, [r7, #4]
 8114bec:	3304      	adds	r3, #4
 8114bee:	2201      	movs	r2, #1
 8114bf0:	4619      	mov	r1, r3
 8114bf2:	6878      	ldr	r0, [r7, #4]
 8114bf4:	f000 f91f 	bl	8114e36 <USBD_CtlSendData>
        break;
 8114bf8:	e004      	b.n	8114c04 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8114bfa:	6839      	ldr	r1, [r7, #0]
 8114bfc:	6878      	ldr	r0, [r7, #4]
 8114bfe:	f000 f8a9 	bl	8114d54 <USBD_CtlError>
        break;
 8114c02:	bf00      	nop
}
 8114c04:	bf00      	nop
 8114c06:	3708      	adds	r7, #8
 8114c08:	46bd      	mov	sp, r7
 8114c0a:	bd80      	pop	{r7, pc}

08114c0c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8114c0c:	b580      	push	{r7, lr}
 8114c0e:	b082      	sub	sp, #8
 8114c10:	af00      	add	r7, sp, #0
 8114c12:	6078      	str	r0, [r7, #4]
 8114c14:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8114c16:	687b      	ldr	r3, [r7, #4]
 8114c18:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8114c1c:	b2db      	uxtb	r3, r3
 8114c1e:	3b01      	subs	r3, #1
 8114c20:	2b02      	cmp	r3, #2
 8114c22:	d81e      	bhi.n	8114c62 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8114c24:	683b      	ldr	r3, [r7, #0]
 8114c26:	88db      	ldrh	r3, [r3, #6]
 8114c28:	2b02      	cmp	r3, #2
 8114c2a:	d004      	beq.n	8114c36 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8114c2c:	6839      	ldr	r1, [r7, #0]
 8114c2e:	6878      	ldr	r0, [r7, #4]
 8114c30:	f000 f890 	bl	8114d54 <USBD_CtlError>
        break;
 8114c34:	e01a      	b.n	8114c6c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8114c36:	687b      	ldr	r3, [r7, #4]
 8114c38:	2201      	movs	r2, #1
 8114c3a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8114c3c:	687b      	ldr	r3, [r7, #4]
 8114c3e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8114c42:	2b00      	cmp	r3, #0
 8114c44:	d005      	beq.n	8114c52 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8114c46:	687b      	ldr	r3, [r7, #4]
 8114c48:	68db      	ldr	r3, [r3, #12]
 8114c4a:	f043 0202 	orr.w	r2, r3, #2
 8114c4e:	687b      	ldr	r3, [r7, #4]
 8114c50:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8114c52:	687b      	ldr	r3, [r7, #4]
 8114c54:	330c      	adds	r3, #12
 8114c56:	2202      	movs	r2, #2
 8114c58:	4619      	mov	r1, r3
 8114c5a:	6878      	ldr	r0, [r7, #4]
 8114c5c:	f000 f8eb 	bl	8114e36 <USBD_CtlSendData>
      break;
 8114c60:	e004      	b.n	8114c6c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8114c62:	6839      	ldr	r1, [r7, #0]
 8114c64:	6878      	ldr	r0, [r7, #4]
 8114c66:	f000 f875 	bl	8114d54 <USBD_CtlError>
      break;
 8114c6a:	bf00      	nop
  }
}
 8114c6c:	bf00      	nop
 8114c6e:	3708      	adds	r7, #8
 8114c70:	46bd      	mov	sp, r7
 8114c72:	bd80      	pop	{r7, pc}

08114c74 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8114c74:	b580      	push	{r7, lr}
 8114c76:	b082      	sub	sp, #8
 8114c78:	af00      	add	r7, sp, #0
 8114c7a:	6078      	str	r0, [r7, #4]
 8114c7c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8114c7e:	683b      	ldr	r3, [r7, #0]
 8114c80:	885b      	ldrh	r3, [r3, #2]
 8114c82:	2b01      	cmp	r3, #1
 8114c84:	d106      	bne.n	8114c94 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8114c86:	687b      	ldr	r3, [r7, #4]
 8114c88:	2201      	movs	r2, #1
 8114c8a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8114c8e:	6878      	ldr	r0, [r7, #4]
 8114c90:	f000 f92b 	bl	8114eea <USBD_CtlSendStatus>
  }
}
 8114c94:	bf00      	nop
 8114c96:	3708      	adds	r7, #8
 8114c98:	46bd      	mov	sp, r7
 8114c9a:	bd80      	pop	{r7, pc}

08114c9c <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8114c9c:	b580      	push	{r7, lr}
 8114c9e:	b082      	sub	sp, #8
 8114ca0:	af00      	add	r7, sp, #0
 8114ca2:	6078      	str	r0, [r7, #4]
 8114ca4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8114ca6:	687b      	ldr	r3, [r7, #4]
 8114ca8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8114cac:	b2db      	uxtb	r3, r3
 8114cae:	3b01      	subs	r3, #1
 8114cb0:	2b02      	cmp	r3, #2
 8114cb2:	d80b      	bhi.n	8114ccc <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8114cb4:	683b      	ldr	r3, [r7, #0]
 8114cb6:	885b      	ldrh	r3, [r3, #2]
 8114cb8:	2b01      	cmp	r3, #1
 8114cba:	d10c      	bne.n	8114cd6 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8114cbc:	687b      	ldr	r3, [r7, #4]
 8114cbe:	2200      	movs	r2, #0
 8114cc0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8114cc4:	6878      	ldr	r0, [r7, #4]
 8114cc6:	f000 f910 	bl	8114eea <USBD_CtlSendStatus>
      }
      break;
 8114cca:	e004      	b.n	8114cd6 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8114ccc:	6839      	ldr	r1, [r7, #0]
 8114cce:	6878      	ldr	r0, [r7, #4]
 8114cd0:	f000 f840 	bl	8114d54 <USBD_CtlError>
      break;
 8114cd4:	e000      	b.n	8114cd8 <USBD_ClrFeature+0x3c>
      break;
 8114cd6:	bf00      	nop
  }
}
 8114cd8:	bf00      	nop
 8114cda:	3708      	adds	r7, #8
 8114cdc:	46bd      	mov	sp, r7
 8114cde:	bd80      	pop	{r7, pc}

08114ce0 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8114ce0:	b580      	push	{r7, lr}
 8114ce2:	b084      	sub	sp, #16
 8114ce4:	af00      	add	r7, sp, #0
 8114ce6:	6078      	str	r0, [r7, #4]
 8114ce8:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8114cea:	683b      	ldr	r3, [r7, #0]
 8114cec:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8114cee:	68fb      	ldr	r3, [r7, #12]
 8114cf0:	781a      	ldrb	r2, [r3, #0]
 8114cf2:	687b      	ldr	r3, [r7, #4]
 8114cf4:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8114cf6:	68fb      	ldr	r3, [r7, #12]
 8114cf8:	3301      	adds	r3, #1
 8114cfa:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8114cfc:	68fb      	ldr	r3, [r7, #12]
 8114cfe:	781a      	ldrb	r2, [r3, #0]
 8114d00:	687b      	ldr	r3, [r7, #4]
 8114d02:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8114d04:	68fb      	ldr	r3, [r7, #12]
 8114d06:	3301      	adds	r3, #1
 8114d08:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8114d0a:	68f8      	ldr	r0, [r7, #12]
 8114d0c:	f7ff fabb 	bl	8114286 <SWAPBYTE>
 8114d10:	4603      	mov	r3, r0
 8114d12:	461a      	mov	r2, r3
 8114d14:	687b      	ldr	r3, [r7, #4]
 8114d16:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8114d18:	68fb      	ldr	r3, [r7, #12]
 8114d1a:	3301      	adds	r3, #1
 8114d1c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8114d1e:	68fb      	ldr	r3, [r7, #12]
 8114d20:	3301      	adds	r3, #1
 8114d22:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8114d24:	68f8      	ldr	r0, [r7, #12]
 8114d26:	f7ff faae 	bl	8114286 <SWAPBYTE>
 8114d2a:	4603      	mov	r3, r0
 8114d2c:	461a      	mov	r2, r3
 8114d2e:	687b      	ldr	r3, [r7, #4]
 8114d30:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8114d32:	68fb      	ldr	r3, [r7, #12]
 8114d34:	3301      	adds	r3, #1
 8114d36:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8114d38:	68fb      	ldr	r3, [r7, #12]
 8114d3a:	3301      	adds	r3, #1
 8114d3c:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8114d3e:	68f8      	ldr	r0, [r7, #12]
 8114d40:	f7ff faa1 	bl	8114286 <SWAPBYTE>
 8114d44:	4603      	mov	r3, r0
 8114d46:	461a      	mov	r2, r3
 8114d48:	687b      	ldr	r3, [r7, #4]
 8114d4a:	80da      	strh	r2, [r3, #6]
}
 8114d4c:	bf00      	nop
 8114d4e:	3710      	adds	r7, #16
 8114d50:	46bd      	mov	sp, r7
 8114d52:	bd80      	pop	{r7, pc}

08114d54 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8114d54:	b580      	push	{r7, lr}
 8114d56:	b082      	sub	sp, #8
 8114d58:	af00      	add	r7, sp, #0
 8114d5a:	6078      	str	r0, [r7, #4]
 8114d5c:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8114d5e:	2180      	movs	r1, #128	; 0x80
 8114d60:	6878      	ldr	r0, [r7, #4]
 8114d62:	f003 fce5 	bl	8118730 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8114d66:	2100      	movs	r1, #0
 8114d68:	6878      	ldr	r0, [r7, #4]
 8114d6a:	f003 fce1 	bl	8118730 <USBD_LL_StallEP>
}
 8114d6e:	bf00      	nop
 8114d70:	3708      	adds	r7, #8
 8114d72:	46bd      	mov	sp, r7
 8114d74:	bd80      	pop	{r7, pc}

08114d76 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8114d76:	b580      	push	{r7, lr}
 8114d78:	b086      	sub	sp, #24
 8114d7a:	af00      	add	r7, sp, #0
 8114d7c:	60f8      	str	r0, [r7, #12]
 8114d7e:	60b9      	str	r1, [r7, #8]
 8114d80:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8114d82:	2300      	movs	r3, #0
 8114d84:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8114d86:	68fb      	ldr	r3, [r7, #12]
 8114d88:	2b00      	cmp	r3, #0
 8114d8a:	d036      	beq.n	8114dfa <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8114d8c:	68fb      	ldr	r3, [r7, #12]
 8114d8e:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8114d90:	6938      	ldr	r0, [r7, #16]
 8114d92:	f000 f836 	bl	8114e02 <USBD_GetLen>
 8114d96:	4603      	mov	r3, r0
 8114d98:	3301      	adds	r3, #1
 8114d9a:	b29b      	uxth	r3, r3
 8114d9c:	005b      	lsls	r3, r3, #1
 8114d9e:	b29a      	uxth	r2, r3
 8114da0:	687b      	ldr	r3, [r7, #4]
 8114da2:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8114da4:	7dfb      	ldrb	r3, [r7, #23]
 8114da6:	68ba      	ldr	r2, [r7, #8]
 8114da8:	4413      	add	r3, r2
 8114daa:	687a      	ldr	r2, [r7, #4]
 8114dac:	7812      	ldrb	r2, [r2, #0]
 8114dae:	701a      	strb	r2, [r3, #0]
  idx++;
 8114db0:	7dfb      	ldrb	r3, [r7, #23]
 8114db2:	3301      	adds	r3, #1
 8114db4:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8114db6:	7dfb      	ldrb	r3, [r7, #23]
 8114db8:	68ba      	ldr	r2, [r7, #8]
 8114dba:	4413      	add	r3, r2
 8114dbc:	2203      	movs	r2, #3
 8114dbe:	701a      	strb	r2, [r3, #0]
  idx++;
 8114dc0:	7dfb      	ldrb	r3, [r7, #23]
 8114dc2:	3301      	adds	r3, #1
 8114dc4:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8114dc6:	e013      	b.n	8114df0 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8114dc8:	7dfb      	ldrb	r3, [r7, #23]
 8114dca:	68ba      	ldr	r2, [r7, #8]
 8114dcc:	4413      	add	r3, r2
 8114dce:	693a      	ldr	r2, [r7, #16]
 8114dd0:	7812      	ldrb	r2, [r2, #0]
 8114dd2:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8114dd4:	693b      	ldr	r3, [r7, #16]
 8114dd6:	3301      	adds	r3, #1
 8114dd8:	613b      	str	r3, [r7, #16]
    idx++;
 8114dda:	7dfb      	ldrb	r3, [r7, #23]
 8114ddc:	3301      	adds	r3, #1
 8114dde:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8114de0:	7dfb      	ldrb	r3, [r7, #23]
 8114de2:	68ba      	ldr	r2, [r7, #8]
 8114de4:	4413      	add	r3, r2
 8114de6:	2200      	movs	r2, #0
 8114de8:	701a      	strb	r2, [r3, #0]
    idx++;
 8114dea:	7dfb      	ldrb	r3, [r7, #23]
 8114dec:	3301      	adds	r3, #1
 8114dee:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8114df0:	693b      	ldr	r3, [r7, #16]
 8114df2:	781b      	ldrb	r3, [r3, #0]
 8114df4:	2b00      	cmp	r3, #0
 8114df6:	d1e7      	bne.n	8114dc8 <USBD_GetString+0x52>
 8114df8:	e000      	b.n	8114dfc <USBD_GetString+0x86>
    return;
 8114dfa:	bf00      	nop
  }
}
 8114dfc:	3718      	adds	r7, #24
 8114dfe:	46bd      	mov	sp, r7
 8114e00:	bd80      	pop	{r7, pc}

08114e02 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8114e02:	b480      	push	{r7}
 8114e04:	b085      	sub	sp, #20
 8114e06:	af00      	add	r7, sp, #0
 8114e08:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8114e0a:	2300      	movs	r3, #0
 8114e0c:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8114e0e:	687b      	ldr	r3, [r7, #4]
 8114e10:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8114e12:	e005      	b.n	8114e20 <USBD_GetLen+0x1e>
  {
    len++;
 8114e14:	7bfb      	ldrb	r3, [r7, #15]
 8114e16:	3301      	adds	r3, #1
 8114e18:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8114e1a:	68bb      	ldr	r3, [r7, #8]
 8114e1c:	3301      	adds	r3, #1
 8114e1e:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8114e20:	68bb      	ldr	r3, [r7, #8]
 8114e22:	781b      	ldrb	r3, [r3, #0]
 8114e24:	2b00      	cmp	r3, #0
 8114e26:	d1f5      	bne.n	8114e14 <USBD_GetLen+0x12>
  }

  return len;
 8114e28:	7bfb      	ldrb	r3, [r7, #15]
}
 8114e2a:	4618      	mov	r0, r3
 8114e2c:	3714      	adds	r7, #20
 8114e2e:	46bd      	mov	sp, r7
 8114e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8114e34:	4770      	bx	lr

08114e36 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8114e36:	b580      	push	{r7, lr}
 8114e38:	b084      	sub	sp, #16
 8114e3a:	af00      	add	r7, sp, #0
 8114e3c:	60f8      	str	r0, [r7, #12]
 8114e3e:	60b9      	str	r1, [r7, #8]
 8114e40:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8114e42:	68fb      	ldr	r3, [r7, #12]
 8114e44:	2202      	movs	r2, #2
 8114e46:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8114e4a:	68fb      	ldr	r3, [r7, #12]
 8114e4c:	687a      	ldr	r2, [r7, #4]
 8114e4e:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8114e50:	68fb      	ldr	r3, [r7, #12]
 8114e52:	687a      	ldr	r2, [r7, #4]
 8114e54:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8114e56:	687b      	ldr	r3, [r7, #4]
 8114e58:	68ba      	ldr	r2, [r7, #8]
 8114e5a:	2100      	movs	r1, #0
 8114e5c:	68f8      	ldr	r0, [r7, #12]
 8114e5e:	f003 fcf0 	bl	8118842 <USBD_LL_Transmit>

  return USBD_OK;
 8114e62:	2300      	movs	r3, #0
}
 8114e64:	4618      	mov	r0, r3
 8114e66:	3710      	adds	r7, #16
 8114e68:	46bd      	mov	sp, r7
 8114e6a:	bd80      	pop	{r7, pc}

08114e6c <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8114e6c:	b580      	push	{r7, lr}
 8114e6e:	b084      	sub	sp, #16
 8114e70:	af00      	add	r7, sp, #0
 8114e72:	60f8      	str	r0, [r7, #12]
 8114e74:	60b9      	str	r1, [r7, #8]
 8114e76:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8114e78:	687b      	ldr	r3, [r7, #4]
 8114e7a:	68ba      	ldr	r2, [r7, #8]
 8114e7c:	2100      	movs	r1, #0
 8114e7e:	68f8      	ldr	r0, [r7, #12]
 8114e80:	f003 fcdf 	bl	8118842 <USBD_LL_Transmit>

  return USBD_OK;
 8114e84:	2300      	movs	r3, #0
}
 8114e86:	4618      	mov	r0, r3
 8114e88:	3710      	adds	r7, #16
 8114e8a:	46bd      	mov	sp, r7
 8114e8c:	bd80      	pop	{r7, pc}

08114e8e <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8114e8e:	b580      	push	{r7, lr}
 8114e90:	b084      	sub	sp, #16
 8114e92:	af00      	add	r7, sp, #0
 8114e94:	60f8      	str	r0, [r7, #12]
 8114e96:	60b9      	str	r1, [r7, #8]
 8114e98:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8114e9a:	68fb      	ldr	r3, [r7, #12]
 8114e9c:	2203      	movs	r2, #3
 8114e9e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8114ea2:	68fb      	ldr	r3, [r7, #12]
 8114ea4:	687a      	ldr	r2, [r7, #4]
 8114ea6:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8114eaa:	68fb      	ldr	r3, [r7, #12]
 8114eac:	687a      	ldr	r2, [r7, #4]
 8114eae:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8114eb2:	687b      	ldr	r3, [r7, #4]
 8114eb4:	68ba      	ldr	r2, [r7, #8]
 8114eb6:	2100      	movs	r1, #0
 8114eb8:	68f8      	ldr	r0, [r7, #12]
 8114eba:	f003 fce3 	bl	8118884 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8114ebe:	2300      	movs	r3, #0
}
 8114ec0:	4618      	mov	r0, r3
 8114ec2:	3710      	adds	r7, #16
 8114ec4:	46bd      	mov	sp, r7
 8114ec6:	bd80      	pop	{r7, pc}

08114ec8 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8114ec8:	b580      	push	{r7, lr}
 8114eca:	b084      	sub	sp, #16
 8114ecc:	af00      	add	r7, sp, #0
 8114ece:	60f8      	str	r0, [r7, #12]
 8114ed0:	60b9      	str	r1, [r7, #8]
 8114ed2:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8114ed4:	687b      	ldr	r3, [r7, #4]
 8114ed6:	68ba      	ldr	r2, [r7, #8]
 8114ed8:	2100      	movs	r1, #0
 8114eda:	68f8      	ldr	r0, [r7, #12]
 8114edc:	f003 fcd2 	bl	8118884 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8114ee0:	2300      	movs	r3, #0
}
 8114ee2:	4618      	mov	r0, r3
 8114ee4:	3710      	adds	r7, #16
 8114ee6:	46bd      	mov	sp, r7
 8114ee8:	bd80      	pop	{r7, pc}

08114eea <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8114eea:	b580      	push	{r7, lr}
 8114eec:	b082      	sub	sp, #8
 8114eee:	af00      	add	r7, sp, #0
 8114ef0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8114ef2:	687b      	ldr	r3, [r7, #4]
 8114ef4:	2204      	movs	r2, #4
 8114ef6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8114efa:	2300      	movs	r3, #0
 8114efc:	2200      	movs	r2, #0
 8114efe:	2100      	movs	r1, #0
 8114f00:	6878      	ldr	r0, [r7, #4]
 8114f02:	f003 fc9e 	bl	8118842 <USBD_LL_Transmit>

  return USBD_OK;
 8114f06:	2300      	movs	r3, #0
}
 8114f08:	4618      	mov	r0, r3
 8114f0a:	3708      	adds	r7, #8
 8114f0c:	46bd      	mov	sp, r7
 8114f0e:	bd80      	pop	{r7, pc}

08114f10 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8114f10:	b580      	push	{r7, lr}
 8114f12:	b082      	sub	sp, #8
 8114f14:	af00      	add	r7, sp, #0
 8114f16:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8114f18:	687b      	ldr	r3, [r7, #4]
 8114f1a:	2205      	movs	r2, #5
 8114f1c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8114f20:	2300      	movs	r3, #0
 8114f22:	2200      	movs	r2, #0
 8114f24:	2100      	movs	r1, #0
 8114f26:	6878      	ldr	r0, [r7, #4]
 8114f28:	f003 fcac 	bl	8118884 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8114f2c:	2300      	movs	r3, #0
}
 8114f2e:	4618      	mov	r0, r3
 8114f30:	3708      	adds	r7, #8
 8114f32:	46bd      	mov	sp, r7
 8114f34:	bd80      	pop	{r7, pc}
	...

08114f38 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8114f38:	b480      	push	{r7}
 8114f3a:	b087      	sub	sp, #28
 8114f3c:	af00      	add	r7, sp, #0
 8114f3e:	60f8      	str	r0, [r7, #12]
 8114f40:	60b9      	str	r1, [r7, #8]
 8114f42:	4613      	mov	r3, r2
 8114f44:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8114f46:	2301      	movs	r3, #1
 8114f48:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8114f4a:	2300      	movs	r3, #0
 8114f4c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8114f4e:	4b1f      	ldr	r3, [pc, #124]	; (8114fcc <FATFS_LinkDriverEx+0x94>)
 8114f50:	7a5b      	ldrb	r3, [r3, #9]
 8114f52:	b2db      	uxtb	r3, r3
 8114f54:	2b00      	cmp	r3, #0
 8114f56:	d131      	bne.n	8114fbc <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8114f58:	4b1c      	ldr	r3, [pc, #112]	; (8114fcc <FATFS_LinkDriverEx+0x94>)
 8114f5a:	7a5b      	ldrb	r3, [r3, #9]
 8114f5c:	b2db      	uxtb	r3, r3
 8114f5e:	461a      	mov	r2, r3
 8114f60:	4b1a      	ldr	r3, [pc, #104]	; (8114fcc <FATFS_LinkDriverEx+0x94>)
 8114f62:	2100      	movs	r1, #0
 8114f64:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8114f66:	4b19      	ldr	r3, [pc, #100]	; (8114fcc <FATFS_LinkDriverEx+0x94>)
 8114f68:	7a5b      	ldrb	r3, [r3, #9]
 8114f6a:	b2db      	uxtb	r3, r3
 8114f6c:	4a17      	ldr	r2, [pc, #92]	; (8114fcc <FATFS_LinkDriverEx+0x94>)
 8114f6e:	009b      	lsls	r3, r3, #2
 8114f70:	4413      	add	r3, r2
 8114f72:	68fa      	ldr	r2, [r7, #12]
 8114f74:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8114f76:	4b15      	ldr	r3, [pc, #84]	; (8114fcc <FATFS_LinkDriverEx+0x94>)
 8114f78:	7a5b      	ldrb	r3, [r3, #9]
 8114f7a:	b2db      	uxtb	r3, r3
 8114f7c:	461a      	mov	r2, r3
 8114f7e:	4b13      	ldr	r3, [pc, #76]	; (8114fcc <FATFS_LinkDriverEx+0x94>)
 8114f80:	4413      	add	r3, r2
 8114f82:	79fa      	ldrb	r2, [r7, #7]
 8114f84:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8114f86:	4b11      	ldr	r3, [pc, #68]	; (8114fcc <FATFS_LinkDriverEx+0x94>)
 8114f88:	7a5b      	ldrb	r3, [r3, #9]
 8114f8a:	b2db      	uxtb	r3, r3
 8114f8c:	1c5a      	adds	r2, r3, #1
 8114f8e:	b2d1      	uxtb	r1, r2
 8114f90:	4a0e      	ldr	r2, [pc, #56]	; (8114fcc <FATFS_LinkDriverEx+0x94>)
 8114f92:	7251      	strb	r1, [r2, #9]
 8114f94:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8114f96:	7dbb      	ldrb	r3, [r7, #22]
 8114f98:	3330      	adds	r3, #48	; 0x30
 8114f9a:	b2da      	uxtb	r2, r3
 8114f9c:	68bb      	ldr	r3, [r7, #8]
 8114f9e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8114fa0:	68bb      	ldr	r3, [r7, #8]
 8114fa2:	3301      	adds	r3, #1
 8114fa4:	223a      	movs	r2, #58	; 0x3a
 8114fa6:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8114fa8:	68bb      	ldr	r3, [r7, #8]
 8114faa:	3302      	adds	r3, #2
 8114fac:	222f      	movs	r2, #47	; 0x2f
 8114fae:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8114fb0:	68bb      	ldr	r3, [r7, #8]
 8114fb2:	3303      	adds	r3, #3
 8114fb4:	2200      	movs	r2, #0
 8114fb6:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8114fb8:	2300      	movs	r3, #0
 8114fba:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8114fbc:	7dfb      	ldrb	r3, [r7, #23]
}
 8114fbe:	4618      	mov	r0, r3
 8114fc0:	371c      	adds	r7, #28
 8114fc2:	46bd      	mov	sp, r7
 8114fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8114fc8:	4770      	bx	lr
 8114fca:	bf00      	nop
 8114fcc:	1000038c 	.word	0x1000038c

08114fd0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8114fd0:	b580      	push	{r7, lr}
 8114fd2:	b082      	sub	sp, #8
 8114fd4:	af00      	add	r7, sp, #0
 8114fd6:	6078      	str	r0, [r7, #4]
 8114fd8:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8114fda:	2200      	movs	r2, #0
 8114fdc:	6839      	ldr	r1, [r7, #0]
 8114fde:	6878      	ldr	r0, [r7, #4]
 8114fe0:	f7ff ffaa 	bl	8114f38 <FATFS_LinkDriverEx>
 8114fe4:	4603      	mov	r3, r0
}
 8114fe6:	4618      	mov	r0, r3
 8114fe8:	3708      	adds	r7, #8
 8114fea:	46bd      	mov	sp, r7
 8114fec:	bd80      	pop	{r7, pc}
	...

08114ff0 <__NVIC_SetPriority>:
{
 8114ff0:	b480      	push	{r7}
 8114ff2:	b083      	sub	sp, #12
 8114ff4:	af00      	add	r7, sp, #0
 8114ff6:	4603      	mov	r3, r0
 8114ff8:	6039      	str	r1, [r7, #0]
 8114ffa:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8114ffc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8115000:	2b00      	cmp	r3, #0
 8115002:	db0a      	blt.n	811501a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8115004:	683b      	ldr	r3, [r7, #0]
 8115006:	b2da      	uxtb	r2, r3
 8115008:	490c      	ldr	r1, [pc, #48]	; (811503c <__NVIC_SetPriority+0x4c>)
 811500a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 811500e:	0112      	lsls	r2, r2, #4
 8115010:	b2d2      	uxtb	r2, r2
 8115012:	440b      	add	r3, r1
 8115014:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8115018:	e00a      	b.n	8115030 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 811501a:	683b      	ldr	r3, [r7, #0]
 811501c:	b2da      	uxtb	r2, r3
 811501e:	4908      	ldr	r1, [pc, #32]	; (8115040 <__NVIC_SetPriority+0x50>)
 8115020:	88fb      	ldrh	r3, [r7, #6]
 8115022:	f003 030f 	and.w	r3, r3, #15
 8115026:	3b04      	subs	r3, #4
 8115028:	0112      	lsls	r2, r2, #4
 811502a:	b2d2      	uxtb	r2, r2
 811502c:	440b      	add	r3, r1
 811502e:	761a      	strb	r2, [r3, #24]
}
 8115030:	bf00      	nop
 8115032:	370c      	adds	r7, #12
 8115034:	46bd      	mov	sp, r7
 8115036:	f85d 7b04 	ldr.w	r7, [sp], #4
 811503a:	4770      	bx	lr
 811503c:	e000e100 	.word	0xe000e100
 8115040:	e000ed00 	.word	0xe000ed00

08115044 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8115044:	b580      	push	{r7, lr}
 8115046:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8115048:	4b05      	ldr	r3, [pc, #20]	; (8115060 <SysTick_Handler+0x1c>)
 811504a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 811504c:	f002 fb6a 	bl	8117724 <xTaskGetSchedulerState>
 8115050:	4603      	mov	r3, r0
 8115052:	2b01      	cmp	r3, #1
 8115054:	d001      	beq.n	811505a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8115056:	f000 feff 	bl	8115e58 <xPortSysTickHandler>
  }
}
 811505a:	bf00      	nop
 811505c:	bd80      	pop	{r7, pc}
 811505e:	bf00      	nop
 8115060:	e000e010 	.word	0xe000e010

08115064 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8115064:	b580      	push	{r7, lr}
 8115066:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8115068:	2100      	movs	r1, #0
 811506a:	f06f 0004 	mvn.w	r0, #4
 811506e:	f7ff ffbf 	bl	8114ff0 <__NVIC_SetPriority>
#endif
}
 8115072:	bf00      	nop
 8115074:	bd80      	pop	{r7, pc}
	...

08115078 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8115078:	b480      	push	{r7}
 811507a:	b083      	sub	sp, #12
 811507c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 811507e:	f3ef 8305 	mrs	r3, IPSR
 8115082:	603b      	str	r3, [r7, #0]
  return(result);
 8115084:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8115086:	2b00      	cmp	r3, #0
 8115088:	d003      	beq.n	8115092 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 811508a:	f06f 0305 	mvn.w	r3, #5
 811508e:	607b      	str	r3, [r7, #4]
 8115090:	e00c      	b.n	81150ac <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8115092:	4b0a      	ldr	r3, [pc, #40]	; (81150bc <osKernelInitialize+0x44>)
 8115094:	681b      	ldr	r3, [r3, #0]
 8115096:	2b00      	cmp	r3, #0
 8115098:	d105      	bne.n	81150a6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 811509a:	4b08      	ldr	r3, [pc, #32]	; (81150bc <osKernelInitialize+0x44>)
 811509c:	2201      	movs	r2, #1
 811509e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 81150a0:	2300      	movs	r3, #0
 81150a2:	607b      	str	r3, [r7, #4]
 81150a4:	e002      	b.n	81150ac <osKernelInitialize+0x34>
    } else {
      stat = osError;
 81150a6:	f04f 33ff 	mov.w	r3, #4294967295
 81150aa:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 81150ac:	687b      	ldr	r3, [r7, #4]
}
 81150ae:	4618      	mov	r0, r3
 81150b0:	370c      	adds	r7, #12
 81150b2:	46bd      	mov	sp, r7
 81150b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81150b8:	4770      	bx	lr
 81150ba:	bf00      	nop
 81150bc:	10000398 	.word	0x10000398

081150c0 <osKernelGetState>:
  }

  return (osOK);
}

osKernelState_t osKernelGetState (void) {
 81150c0:	b580      	push	{r7, lr}
 81150c2:	b082      	sub	sp, #8
 81150c4:	af00      	add	r7, sp, #0
  osKernelState_t state;

  switch (xTaskGetSchedulerState()) {
 81150c6:	f002 fb2d 	bl	8117724 <xTaskGetSchedulerState>
 81150ca:	4603      	mov	r3, r0
 81150cc:	2b00      	cmp	r3, #0
 81150ce:	d004      	beq.n	81150da <osKernelGetState+0x1a>
 81150d0:	2b02      	cmp	r3, #2
 81150d2:	d105      	bne.n	81150e0 <osKernelGetState+0x20>
    case taskSCHEDULER_RUNNING:
      state = osKernelRunning;
 81150d4:	2302      	movs	r3, #2
 81150d6:	607b      	str	r3, [r7, #4]
      break;
 81150d8:	e00c      	b.n	81150f4 <osKernelGetState+0x34>

    case taskSCHEDULER_SUSPENDED:
      state = osKernelLocked;
 81150da:	2303      	movs	r3, #3
 81150dc:	607b      	str	r3, [r7, #4]
      break;
 81150de:	e009      	b.n	81150f4 <osKernelGetState+0x34>

    case taskSCHEDULER_NOT_STARTED:
    default:
      if (KernelState == osKernelReady) {
 81150e0:	4b07      	ldr	r3, [pc, #28]	; (8115100 <osKernelGetState+0x40>)
 81150e2:	681b      	ldr	r3, [r3, #0]
 81150e4:	2b01      	cmp	r3, #1
 81150e6:	d102      	bne.n	81150ee <osKernelGetState+0x2e>
        state = osKernelReady;
 81150e8:	2301      	movs	r3, #1
 81150ea:	607b      	str	r3, [r7, #4]
      } else {
        state = osKernelInactive;
      }
      break;
 81150ec:	e001      	b.n	81150f2 <osKernelGetState+0x32>
        state = osKernelInactive;
 81150ee:	2300      	movs	r3, #0
 81150f0:	607b      	str	r3, [r7, #4]
      break;
 81150f2:	bf00      	nop
  }

  return (state);
 81150f4:	687b      	ldr	r3, [r7, #4]
}
 81150f6:	4618      	mov	r0, r3
 81150f8:	3708      	adds	r7, #8
 81150fa:	46bd      	mov	sp, r7
 81150fc:	bd80      	pop	{r7, pc}
 81150fe:	bf00      	nop
 8115100:	10000398 	.word	0x10000398

08115104 <osKernelStart>:

osStatus_t osKernelStart (void) {
 8115104:	b580      	push	{r7, lr}
 8115106:	b082      	sub	sp, #8
 8115108:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 811510a:	f3ef 8305 	mrs	r3, IPSR
 811510e:	603b      	str	r3, [r7, #0]
  return(result);
 8115110:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8115112:	2b00      	cmp	r3, #0
 8115114:	d003      	beq.n	811511e <osKernelStart+0x1a>
    stat = osErrorISR;
 8115116:	f06f 0305 	mvn.w	r3, #5
 811511a:	607b      	str	r3, [r7, #4]
 811511c:	e010      	b.n	8115140 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 811511e:	4b0b      	ldr	r3, [pc, #44]	; (811514c <osKernelStart+0x48>)
 8115120:	681b      	ldr	r3, [r3, #0]
 8115122:	2b01      	cmp	r3, #1
 8115124:	d109      	bne.n	811513a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8115126:	f7ff ff9d 	bl	8115064 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 811512a:	4b08      	ldr	r3, [pc, #32]	; (811514c <osKernelStart+0x48>)
 811512c:	2202      	movs	r2, #2
 811512e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8115130:	f001 fe9e 	bl	8116e70 <vTaskStartScheduler>
      stat = osOK;
 8115134:	2300      	movs	r3, #0
 8115136:	607b      	str	r3, [r7, #4]
 8115138:	e002      	b.n	8115140 <osKernelStart+0x3c>
    } else {
      stat = osError;
 811513a:	f04f 33ff 	mov.w	r3, #4294967295
 811513e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8115140:	687b      	ldr	r3, [r7, #4]
}
 8115142:	4618      	mov	r0, r3
 8115144:	3708      	adds	r7, #8
 8115146:	46bd      	mov	sp, r7
 8115148:	bd80      	pop	{r7, pc}
 811514a:	bf00      	nop
 811514c:	10000398 	.word	0x10000398

08115150 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 8115150:	b580      	push	{r7, lr}
 8115152:	b082      	sub	sp, #8
 8115154:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8115156:	f3ef 8305 	mrs	r3, IPSR
 811515a:	603b      	str	r3, [r7, #0]
  return(result);
 811515c:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 811515e:	2b00      	cmp	r3, #0
 8115160:	d003      	beq.n	811516a <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 8115162:	f001 ffa7 	bl	81170b4 <xTaskGetTickCountFromISR>
 8115166:	6078      	str	r0, [r7, #4]
 8115168:	e002      	b.n	8115170 <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 811516a:	f001 ff93 	bl	8117094 <xTaskGetTickCount>
 811516e:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 8115170:	687b      	ldr	r3, [r7, #4]
}
 8115172:	4618      	mov	r0, r3
 8115174:	3708      	adds	r7, #8
 8115176:	46bd      	mov	sp, r7
 8115178:	bd80      	pop	{r7, pc}

0811517a <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 811517a:	b580      	push	{r7, lr}
 811517c:	b08e      	sub	sp, #56	; 0x38
 811517e:	af04      	add	r7, sp, #16
 8115180:	60f8      	str	r0, [r7, #12]
 8115182:	60b9      	str	r1, [r7, #8]
 8115184:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8115186:	2300      	movs	r3, #0
 8115188:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 811518a:	f3ef 8305 	mrs	r3, IPSR
 811518e:	617b      	str	r3, [r7, #20]
  return(result);
 8115190:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8115192:	2b00      	cmp	r3, #0
 8115194:	d17e      	bne.n	8115294 <osThreadNew+0x11a>
 8115196:	68fb      	ldr	r3, [r7, #12]
 8115198:	2b00      	cmp	r3, #0
 811519a:	d07b      	beq.n	8115294 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 811519c:	2380      	movs	r3, #128	; 0x80
 811519e:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 81151a0:	2318      	movs	r3, #24
 81151a2:	61fb      	str	r3, [r7, #28]

    name = NULL;
 81151a4:	2300      	movs	r3, #0
 81151a6:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 81151a8:	f04f 33ff 	mov.w	r3, #4294967295
 81151ac:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 81151ae:	687b      	ldr	r3, [r7, #4]
 81151b0:	2b00      	cmp	r3, #0
 81151b2:	d045      	beq.n	8115240 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 81151b4:	687b      	ldr	r3, [r7, #4]
 81151b6:	681b      	ldr	r3, [r3, #0]
 81151b8:	2b00      	cmp	r3, #0
 81151ba:	d002      	beq.n	81151c2 <osThreadNew+0x48>
        name = attr->name;
 81151bc:	687b      	ldr	r3, [r7, #4]
 81151be:	681b      	ldr	r3, [r3, #0]
 81151c0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 81151c2:	687b      	ldr	r3, [r7, #4]
 81151c4:	699b      	ldr	r3, [r3, #24]
 81151c6:	2b00      	cmp	r3, #0
 81151c8:	d002      	beq.n	81151d0 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 81151ca:	687b      	ldr	r3, [r7, #4]
 81151cc:	699b      	ldr	r3, [r3, #24]
 81151ce:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 81151d0:	69fb      	ldr	r3, [r7, #28]
 81151d2:	2b00      	cmp	r3, #0
 81151d4:	d008      	beq.n	81151e8 <osThreadNew+0x6e>
 81151d6:	69fb      	ldr	r3, [r7, #28]
 81151d8:	2b38      	cmp	r3, #56	; 0x38
 81151da:	d805      	bhi.n	81151e8 <osThreadNew+0x6e>
 81151dc:	687b      	ldr	r3, [r7, #4]
 81151de:	685b      	ldr	r3, [r3, #4]
 81151e0:	f003 0301 	and.w	r3, r3, #1
 81151e4:	2b00      	cmp	r3, #0
 81151e6:	d001      	beq.n	81151ec <osThreadNew+0x72>
        return (NULL);
 81151e8:	2300      	movs	r3, #0
 81151ea:	e054      	b.n	8115296 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 81151ec:	687b      	ldr	r3, [r7, #4]
 81151ee:	695b      	ldr	r3, [r3, #20]
 81151f0:	2b00      	cmp	r3, #0
 81151f2:	d003      	beq.n	81151fc <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 81151f4:	687b      	ldr	r3, [r7, #4]
 81151f6:	695b      	ldr	r3, [r3, #20]
 81151f8:	089b      	lsrs	r3, r3, #2
 81151fa:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 81151fc:	687b      	ldr	r3, [r7, #4]
 81151fe:	689b      	ldr	r3, [r3, #8]
 8115200:	2b00      	cmp	r3, #0
 8115202:	d00e      	beq.n	8115222 <osThreadNew+0xa8>
 8115204:	687b      	ldr	r3, [r7, #4]
 8115206:	68db      	ldr	r3, [r3, #12]
 8115208:	2b5b      	cmp	r3, #91	; 0x5b
 811520a:	d90a      	bls.n	8115222 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 811520c:	687b      	ldr	r3, [r7, #4]
 811520e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8115210:	2b00      	cmp	r3, #0
 8115212:	d006      	beq.n	8115222 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8115214:	687b      	ldr	r3, [r7, #4]
 8115216:	695b      	ldr	r3, [r3, #20]
 8115218:	2b00      	cmp	r3, #0
 811521a:	d002      	beq.n	8115222 <osThreadNew+0xa8>
        mem = 1;
 811521c:	2301      	movs	r3, #1
 811521e:	61bb      	str	r3, [r7, #24]
 8115220:	e010      	b.n	8115244 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8115222:	687b      	ldr	r3, [r7, #4]
 8115224:	689b      	ldr	r3, [r3, #8]
 8115226:	2b00      	cmp	r3, #0
 8115228:	d10c      	bne.n	8115244 <osThreadNew+0xca>
 811522a:	687b      	ldr	r3, [r7, #4]
 811522c:	68db      	ldr	r3, [r3, #12]
 811522e:	2b00      	cmp	r3, #0
 8115230:	d108      	bne.n	8115244 <osThreadNew+0xca>
 8115232:	687b      	ldr	r3, [r7, #4]
 8115234:	691b      	ldr	r3, [r3, #16]
 8115236:	2b00      	cmp	r3, #0
 8115238:	d104      	bne.n	8115244 <osThreadNew+0xca>
          mem = 0;
 811523a:	2300      	movs	r3, #0
 811523c:	61bb      	str	r3, [r7, #24]
 811523e:	e001      	b.n	8115244 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8115240:	2300      	movs	r3, #0
 8115242:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8115244:	69bb      	ldr	r3, [r7, #24]
 8115246:	2b01      	cmp	r3, #1
 8115248:	d110      	bne.n	811526c <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 811524a:	687b      	ldr	r3, [r7, #4]
 811524c:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 811524e:	687a      	ldr	r2, [r7, #4]
 8115250:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8115252:	9202      	str	r2, [sp, #8]
 8115254:	9301      	str	r3, [sp, #4]
 8115256:	69fb      	ldr	r3, [r7, #28]
 8115258:	9300      	str	r3, [sp, #0]
 811525a:	68bb      	ldr	r3, [r7, #8]
 811525c:	6a3a      	ldr	r2, [r7, #32]
 811525e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8115260:	68f8      	ldr	r0, [r7, #12]
 8115262:	f001 fc2f 	bl	8116ac4 <xTaskCreateStatic>
 8115266:	4603      	mov	r3, r0
 8115268:	613b      	str	r3, [r7, #16]
 811526a:	e013      	b.n	8115294 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 811526c:	69bb      	ldr	r3, [r7, #24]
 811526e:	2b00      	cmp	r3, #0
 8115270:	d110      	bne.n	8115294 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8115272:	6a3b      	ldr	r3, [r7, #32]
 8115274:	b29a      	uxth	r2, r3
 8115276:	f107 0310 	add.w	r3, r7, #16
 811527a:	9301      	str	r3, [sp, #4]
 811527c:	69fb      	ldr	r3, [r7, #28]
 811527e:	9300      	str	r3, [sp, #0]
 8115280:	68bb      	ldr	r3, [r7, #8]
 8115282:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8115284:	68f8      	ldr	r0, [r7, #12]
 8115286:	f001 fc7a 	bl	8116b7e <xTaskCreate>
 811528a:	4603      	mov	r3, r0
 811528c:	2b01      	cmp	r3, #1
 811528e:	d001      	beq.n	8115294 <osThreadNew+0x11a>
            hTask = NULL;
 8115290:	2300      	movs	r3, #0
 8115292:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8115294:	693b      	ldr	r3, [r7, #16]
}
 8115296:	4618      	mov	r0, r3
 8115298:	3728      	adds	r7, #40	; 0x28
 811529a:	46bd      	mov	sp, r7
 811529c:	bd80      	pop	{r7, pc}

0811529e <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 811529e:	b580      	push	{r7, lr}
 81152a0:	b084      	sub	sp, #16
 81152a2:	af00      	add	r7, sp, #0
 81152a4:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 81152a6:	f3ef 8305 	mrs	r3, IPSR
 81152aa:	60bb      	str	r3, [r7, #8]
  return(result);
 81152ac:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 81152ae:	2b00      	cmp	r3, #0
 81152b0:	d003      	beq.n	81152ba <osDelay+0x1c>
    stat = osErrorISR;
 81152b2:	f06f 0305 	mvn.w	r3, #5
 81152b6:	60fb      	str	r3, [r7, #12]
 81152b8:	e007      	b.n	81152ca <osDelay+0x2c>
  }
  else {
    stat = osOK;
 81152ba:	2300      	movs	r3, #0
 81152bc:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 81152be:	687b      	ldr	r3, [r7, #4]
 81152c0:	2b00      	cmp	r3, #0
 81152c2:	d002      	beq.n	81152ca <osDelay+0x2c>
      vTaskDelay(ticks);
 81152c4:	6878      	ldr	r0, [r7, #4]
 81152c6:	f001 fd9f 	bl	8116e08 <vTaskDelay>
    }
  }

  return (stat);
 81152ca:	68fb      	ldr	r3, [r7, #12]
}
 81152cc:	4618      	mov	r0, r3
 81152ce:	3710      	adds	r7, #16
 81152d0:	46bd      	mov	sp, r7
 81152d2:	bd80      	pop	{r7, pc}

081152d4 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 81152d4:	b580      	push	{r7, lr}
 81152d6:	b08a      	sub	sp, #40	; 0x28
 81152d8:	af02      	add	r7, sp, #8
 81152da:	60f8      	str	r0, [r7, #12]
 81152dc:	60b9      	str	r1, [r7, #8]
 81152de:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 81152e0:	2300      	movs	r3, #0
 81152e2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 81152e4:	f3ef 8305 	mrs	r3, IPSR
 81152e8:	613b      	str	r3, [r7, #16]
  return(result);
 81152ea:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 81152ec:	2b00      	cmp	r3, #0
 81152ee:	d15f      	bne.n	81153b0 <osMessageQueueNew+0xdc>
 81152f0:	68fb      	ldr	r3, [r7, #12]
 81152f2:	2b00      	cmp	r3, #0
 81152f4:	d05c      	beq.n	81153b0 <osMessageQueueNew+0xdc>
 81152f6:	68bb      	ldr	r3, [r7, #8]
 81152f8:	2b00      	cmp	r3, #0
 81152fa:	d059      	beq.n	81153b0 <osMessageQueueNew+0xdc>
    mem = -1;
 81152fc:	f04f 33ff 	mov.w	r3, #4294967295
 8115300:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8115302:	687b      	ldr	r3, [r7, #4]
 8115304:	2b00      	cmp	r3, #0
 8115306:	d029      	beq.n	811535c <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8115308:	687b      	ldr	r3, [r7, #4]
 811530a:	689b      	ldr	r3, [r3, #8]
 811530c:	2b00      	cmp	r3, #0
 811530e:	d012      	beq.n	8115336 <osMessageQueueNew+0x62>
 8115310:	687b      	ldr	r3, [r7, #4]
 8115312:	68db      	ldr	r3, [r3, #12]
 8115314:	2b4f      	cmp	r3, #79	; 0x4f
 8115316:	d90e      	bls.n	8115336 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8115318:	687b      	ldr	r3, [r7, #4]
 811531a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 811531c:	2b00      	cmp	r3, #0
 811531e:	d00a      	beq.n	8115336 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8115320:	687b      	ldr	r3, [r7, #4]
 8115322:	695a      	ldr	r2, [r3, #20]
 8115324:	68fb      	ldr	r3, [r7, #12]
 8115326:	68b9      	ldr	r1, [r7, #8]
 8115328:	fb01 f303 	mul.w	r3, r1, r3
 811532c:	429a      	cmp	r2, r3
 811532e:	d302      	bcc.n	8115336 <osMessageQueueNew+0x62>
        mem = 1;
 8115330:	2301      	movs	r3, #1
 8115332:	61bb      	str	r3, [r7, #24]
 8115334:	e014      	b.n	8115360 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8115336:	687b      	ldr	r3, [r7, #4]
 8115338:	689b      	ldr	r3, [r3, #8]
 811533a:	2b00      	cmp	r3, #0
 811533c:	d110      	bne.n	8115360 <osMessageQueueNew+0x8c>
 811533e:	687b      	ldr	r3, [r7, #4]
 8115340:	68db      	ldr	r3, [r3, #12]
 8115342:	2b00      	cmp	r3, #0
 8115344:	d10c      	bne.n	8115360 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8115346:	687b      	ldr	r3, [r7, #4]
 8115348:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 811534a:	2b00      	cmp	r3, #0
 811534c:	d108      	bne.n	8115360 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 811534e:	687b      	ldr	r3, [r7, #4]
 8115350:	695b      	ldr	r3, [r3, #20]
 8115352:	2b00      	cmp	r3, #0
 8115354:	d104      	bne.n	8115360 <osMessageQueueNew+0x8c>
          mem = 0;
 8115356:	2300      	movs	r3, #0
 8115358:	61bb      	str	r3, [r7, #24]
 811535a:	e001      	b.n	8115360 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 811535c:	2300      	movs	r3, #0
 811535e:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8115360:	69bb      	ldr	r3, [r7, #24]
 8115362:	2b01      	cmp	r3, #1
 8115364:	d10b      	bne.n	811537e <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8115366:	687b      	ldr	r3, [r7, #4]
 8115368:	691a      	ldr	r2, [r3, #16]
 811536a:	687b      	ldr	r3, [r7, #4]
 811536c:	689b      	ldr	r3, [r3, #8]
 811536e:	2100      	movs	r1, #0
 8115370:	9100      	str	r1, [sp, #0]
 8115372:	68b9      	ldr	r1, [r7, #8]
 8115374:	68f8      	ldr	r0, [r7, #12]
 8115376:	f000 fe67 	bl	8116048 <xQueueGenericCreateStatic>
 811537a:	61f8      	str	r0, [r7, #28]
 811537c:	e008      	b.n	8115390 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 811537e:	69bb      	ldr	r3, [r7, #24]
 8115380:	2b00      	cmp	r3, #0
 8115382:	d105      	bne.n	8115390 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8115384:	2200      	movs	r2, #0
 8115386:	68b9      	ldr	r1, [r7, #8]
 8115388:	68f8      	ldr	r0, [r7, #12]
 811538a:	f000 fed5 	bl	8116138 <xQueueGenericCreate>
 811538e:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8115390:	69fb      	ldr	r3, [r7, #28]
 8115392:	2b00      	cmp	r3, #0
 8115394:	d00c      	beq.n	81153b0 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8115396:	687b      	ldr	r3, [r7, #4]
 8115398:	2b00      	cmp	r3, #0
 811539a:	d003      	beq.n	81153a4 <osMessageQueueNew+0xd0>
        name = attr->name;
 811539c:	687b      	ldr	r3, [r7, #4]
 811539e:	681b      	ldr	r3, [r3, #0]
 81153a0:	617b      	str	r3, [r7, #20]
 81153a2:	e001      	b.n	81153a8 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 81153a4:	2300      	movs	r3, #0
 81153a6:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 81153a8:	6979      	ldr	r1, [r7, #20]
 81153aa:	69f8      	ldr	r0, [r7, #28]
 81153ac:	f001 fb2c 	bl	8116a08 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 81153b0:	69fb      	ldr	r3, [r7, #28]
}
 81153b2:	4618      	mov	r0, r3
 81153b4:	3720      	adds	r7, #32
 81153b6:	46bd      	mov	sp, r7
 81153b8:	bd80      	pop	{r7, pc}
	...

081153bc <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 81153bc:	b580      	push	{r7, lr}
 81153be:	b088      	sub	sp, #32
 81153c0:	af00      	add	r7, sp, #0
 81153c2:	60f8      	str	r0, [r7, #12]
 81153c4:	60b9      	str	r1, [r7, #8]
 81153c6:	603b      	str	r3, [r7, #0]
 81153c8:	4613      	mov	r3, r2
 81153ca:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 81153cc:	68fb      	ldr	r3, [r7, #12]
 81153ce:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 81153d0:	2300      	movs	r3, #0
 81153d2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 81153d4:	f3ef 8305 	mrs	r3, IPSR
 81153d8:	617b      	str	r3, [r7, #20]
  return(result);
 81153da:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 81153dc:	2b00      	cmp	r3, #0
 81153de:	d028      	beq.n	8115432 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 81153e0:	69bb      	ldr	r3, [r7, #24]
 81153e2:	2b00      	cmp	r3, #0
 81153e4:	d005      	beq.n	81153f2 <osMessageQueuePut+0x36>
 81153e6:	68bb      	ldr	r3, [r7, #8]
 81153e8:	2b00      	cmp	r3, #0
 81153ea:	d002      	beq.n	81153f2 <osMessageQueuePut+0x36>
 81153ec:	683b      	ldr	r3, [r7, #0]
 81153ee:	2b00      	cmp	r3, #0
 81153f0:	d003      	beq.n	81153fa <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 81153f2:	f06f 0303 	mvn.w	r3, #3
 81153f6:	61fb      	str	r3, [r7, #28]
 81153f8:	e038      	b.n	811546c <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 81153fa:	2300      	movs	r3, #0
 81153fc:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 81153fe:	f107 0210 	add.w	r2, r7, #16
 8115402:	2300      	movs	r3, #0
 8115404:	68b9      	ldr	r1, [r7, #8]
 8115406:	69b8      	ldr	r0, [r7, #24]
 8115408:	f000 fff2 	bl	81163f0 <xQueueGenericSendFromISR>
 811540c:	4603      	mov	r3, r0
 811540e:	2b01      	cmp	r3, #1
 8115410:	d003      	beq.n	811541a <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8115412:	f06f 0302 	mvn.w	r3, #2
 8115416:	61fb      	str	r3, [r7, #28]
 8115418:	e028      	b.n	811546c <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 811541a:	693b      	ldr	r3, [r7, #16]
 811541c:	2b00      	cmp	r3, #0
 811541e:	d025      	beq.n	811546c <osMessageQueuePut+0xb0>
 8115420:	4b15      	ldr	r3, [pc, #84]	; (8115478 <osMessageQueuePut+0xbc>)
 8115422:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8115426:	601a      	str	r2, [r3, #0]
 8115428:	f3bf 8f4f 	dsb	sy
 811542c:	f3bf 8f6f 	isb	sy
 8115430:	e01c      	b.n	811546c <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8115432:	69bb      	ldr	r3, [r7, #24]
 8115434:	2b00      	cmp	r3, #0
 8115436:	d002      	beq.n	811543e <osMessageQueuePut+0x82>
 8115438:	68bb      	ldr	r3, [r7, #8]
 811543a:	2b00      	cmp	r3, #0
 811543c:	d103      	bne.n	8115446 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 811543e:	f06f 0303 	mvn.w	r3, #3
 8115442:	61fb      	str	r3, [r7, #28]
 8115444:	e012      	b.n	811546c <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8115446:	2300      	movs	r3, #0
 8115448:	683a      	ldr	r2, [r7, #0]
 811544a:	68b9      	ldr	r1, [r7, #8]
 811544c:	69b8      	ldr	r0, [r7, #24]
 811544e:	f000 fed1 	bl	81161f4 <xQueueGenericSend>
 8115452:	4603      	mov	r3, r0
 8115454:	2b01      	cmp	r3, #1
 8115456:	d009      	beq.n	811546c <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8115458:	683b      	ldr	r3, [r7, #0]
 811545a:	2b00      	cmp	r3, #0
 811545c:	d003      	beq.n	8115466 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 811545e:	f06f 0301 	mvn.w	r3, #1
 8115462:	61fb      	str	r3, [r7, #28]
 8115464:	e002      	b.n	811546c <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8115466:	f06f 0302 	mvn.w	r3, #2
 811546a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 811546c:	69fb      	ldr	r3, [r7, #28]
}
 811546e:	4618      	mov	r0, r3
 8115470:	3720      	adds	r7, #32
 8115472:	46bd      	mov	sp, r7
 8115474:	bd80      	pop	{r7, pc}
 8115476:	bf00      	nop
 8115478:	e000ed04 	.word	0xe000ed04

0811547c <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 811547c:	b580      	push	{r7, lr}
 811547e:	b088      	sub	sp, #32
 8115480:	af00      	add	r7, sp, #0
 8115482:	60f8      	str	r0, [r7, #12]
 8115484:	60b9      	str	r1, [r7, #8]
 8115486:	607a      	str	r2, [r7, #4]
 8115488:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 811548a:	68fb      	ldr	r3, [r7, #12]
 811548c:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 811548e:	2300      	movs	r3, #0
 8115490:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8115492:	f3ef 8305 	mrs	r3, IPSR
 8115496:	617b      	str	r3, [r7, #20]
  return(result);
 8115498:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 811549a:	2b00      	cmp	r3, #0
 811549c:	d028      	beq.n	81154f0 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 811549e:	69bb      	ldr	r3, [r7, #24]
 81154a0:	2b00      	cmp	r3, #0
 81154a2:	d005      	beq.n	81154b0 <osMessageQueueGet+0x34>
 81154a4:	68bb      	ldr	r3, [r7, #8]
 81154a6:	2b00      	cmp	r3, #0
 81154a8:	d002      	beq.n	81154b0 <osMessageQueueGet+0x34>
 81154aa:	683b      	ldr	r3, [r7, #0]
 81154ac:	2b00      	cmp	r3, #0
 81154ae:	d003      	beq.n	81154b8 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 81154b0:	f06f 0303 	mvn.w	r3, #3
 81154b4:	61fb      	str	r3, [r7, #28]
 81154b6:	e037      	b.n	8115528 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 81154b8:	2300      	movs	r3, #0
 81154ba:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 81154bc:	f107 0310 	add.w	r3, r7, #16
 81154c0:	461a      	mov	r2, r3
 81154c2:	68b9      	ldr	r1, [r7, #8]
 81154c4:	69b8      	ldr	r0, [r7, #24]
 81154c6:	f001 f90f 	bl	81166e8 <xQueueReceiveFromISR>
 81154ca:	4603      	mov	r3, r0
 81154cc:	2b01      	cmp	r3, #1
 81154ce:	d003      	beq.n	81154d8 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 81154d0:	f06f 0302 	mvn.w	r3, #2
 81154d4:	61fb      	str	r3, [r7, #28]
 81154d6:	e027      	b.n	8115528 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 81154d8:	693b      	ldr	r3, [r7, #16]
 81154da:	2b00      	cmp	r3, #0
 81154dc:	d024      	beq.n	8115528 <osMessageQueueGet+0xac>
 81154de:	4b15      	ldr	r3, [pc, #84]	; (8115534 <osMessageQueueGet+0xb8>)
 81154e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 81154e4:	601a      	str	r2, [r3, #0]
 81154e6:	f3bf 8f4f 	dsb	sy
 81154ea:	f3bf 8f6f 	isb	sy
 81154ee:	e01b      	b.n	8115528 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 81154f0:	69bb      	ldr	r3, [r7, #24]
 81154f2:	2b00      	cmp	r3, #0
 81154f4:	d002      	beq.n	81154fc <osMessageQueueGet+0x80>
 81154f6:	68bb      	ldr	r3, [r7, #8]
 81154f8:	2b00      	cmp	r3, #0
 81154fa:	d103      	bne.n	8115504 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 81154fc:	f06f 0303 	mvn.w	r3, #3
 8115500:	61fb      	str	r3, [r7, #28]
 8115502:	e011      	b.n	8115528 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8115504:	683a      	ldr	r2, [r7, #0]
 8115506:	68b9      	ldr	r1, [r7, #8]
 8115508:	69b8      	ldr	r0, [r7, #24]
 811550a:	f001 f80d 	bl	8116528 <xQueueReceive>
 811550e:	4603      	mov	r3, r0
 8115510:	2b01      	cmp	r3, #1
 8115512:	d009      	beq.n	8115528 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8115514:	683b      	ldr	r3, [r7, #0]
 8115516:	2b00      	cmp	r3, #0
 8115518:	d003      	beq.n	8115522 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 811551a:	f06f 0301 	mvn.w	r3, #1
 811551e:	61fb      	str	r3, [r7, #28]
 8115520:	e002      	b.n	8115528 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8115522:	f06f 0302 	mvn.w	r3, #2
 8115526:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8115528:	69fb      	ldr	r3, [r7, #28]
}
 811552a:	4618      	mov	r0, r3
 811552c:	3720      	adds	r7, #32
 811552e:	46bd      	mov	sp, r7
 8115530:	bd80      	pop	{r7, pc}
 8115532:	bf00      	nop
 8115534:	e000ed04 	.word	0xe000ed04

08115538 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8115538:	b480      	push	{r7}
 811553a:	b085      	sub	sp, #20
 811553c:	af00      	add	r7, sp, #0
 811553e:	60f8      	str	r0, [r7, #12]
 8115540:	60b9      	str	r1, [r7, #8]
 8115542:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8115544:	68fb      	ldr	r3, [r7, #12]
 8115546:	4a07      	ldr	r2, [pc, #28]	; (8115564 <vApplicationGetIdleTaskMemory+0x2c>)
 8115548:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 811554a:	68bb      	ldr	r3, [r7, #8]
 811554c:	4a06      	ldr	r2, [pc, #24]	; (8115568 <vApplicationGetIdleTaskMemory+0x30>)
 811554e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8115550:	687b      	ldr	r3, [r7, #4]
 8115552:	2280      	movs	r2, #128	; 0x80
 8115554:	601a      	str	r2, [r3, #0]
}
 8115556:	bf00      	nop
 8115558:	3714      	adds	r7, #20
 811555a:	46bd      	mov	sp, r7
 811555c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8115560:	4770      	bx	lr
 8115562:	bf00      	nop
 8115564:	1000039c 	.word	0x1000039c
 8115568:	100003f8 	.word	0x100003f8

0811556c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 811556c:	b480      	push	{r7}
 811556e:	b085      	sub	sp, #20
 8115570:	af00      	add	r7, sp, #0
 8115572:	60f8      	str	r0, [r7, #12]
 8115574:	60b9      	str	r1, [r7, #8]
 8115576:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8115578:	68fb      	ldr	r3, [r7, #12]
 811557a:	4a07      	ldr	r2, [pc, #28]	; (8115598 <vApplicationGetTimerTaskMemory+0x2c>)
 811557c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 811557e:	68bb      	ldr	r3, [r7, #8]
 8115580:	4a06      	ldr	r2, [pc, #24]	; (811559c <vApplicationGetTimerTaskMemory+0x30>)
 8115582:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8115584:	687b      	ldr	r3, [r7, #4]
 8115586:	f44f 7280 	mov.w	r2, #256	; 0x100
 811558a:	601a      	str	r2, [r3, #0]
}
 811558c:	bf00      	nop
 811558e:	3714      	adds	r7, #20
 8115590:	46bd      	mov	sp, r7
 8115592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8115596:	4770      	bx	lr
 8115598:	100005f8 	.word	0x100005f8
 811559c:	10000654 	.word	0x10000654

081155a0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 81155a0:	b580      	push	{r7, lr}
 81155a2:	b08a      	sub	sp, #40	; 0x28
 81155a4:	af00      	add	r7, sp, #0
 81155a6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 81155a8:	2300      	movs	r3, #0
 81155aa:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 81155ac:	f001 fcc6 	bl	8116f3c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 81155b0:	4b5b      	ldr	r3, [pc, #364]	; (8115720 <pvPortMalloc+0x180>)
 81155b2:	681b      	ldr	r3, [r3, #0]
 81155b4:	2b00      	cmp	r3, #0
 81155b6:	d101      	bne.n	81155bc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 81155b8:	f000 f920 	bl	81157fc <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 81155bc:	4b59      	ldr	r3, [pc, #356]	; (8115724 <pvPortMalloc+0x184>)
 81155be:	681a      	ldr	r2, [r3, #0]
 81155c0:	687b      	ldr	r3, [r7, #4]
 81155c2:	4013      	ands	r3, r2
 81155c4:	2b00      	cmp	r3, #0
 81155c6:	f040 8093 	bne.w	81156f0 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 81155ca:	687b      	ldr	r3, [r7, #4]
 81155cc:	2b00      	cmp	r3, #0
 81155ce:	d01d      	beq.n	811560c <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 81155d0:	2208      	movs	r2, #8
 81155d2:	687b      	ldr	r3, [r7, #4]
 81155d4:	4413      	add	r3, r2
 81155d6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 81155d8:	687b      	ldr	r3, [r7, #4]
 81155da:	f003 0307 	and.w	r3, r3, #7
 81155de:	2b00      	cmp	r3, #0
 81155e0:	d014      	beq.n	811560c <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 81155e2:	687b      	ldr	r3, [r7, #4]
 81155e4:	f023 0307 	bic.w	r3, r3, #7
 81155e8:	3308      	adds	r3, #8
 81155ea:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 81155ec:	687b      	ldr	r3, [r7, #4]
 81155ee:	f003 0307 	and.w	r3, r3, #7
 81155f2:	2b00      	cmp	r3, #0
 81155f4:	d00a      	beq.n	811560c <pvPortMalloc+0x6c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 81155f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 81155fa:	f383 8811 	msr	BASEPRI, r3
 81155fe:	f3bf 8f6f 	isb	sy
 8115602:	f3bf 8f4f 	dsb	sy
 8115606:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8115608:	bf00      	nop
 811560a:	e7fe      	b.n	811560a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 811560c:	687b      	ldr	r3, [r7, #4]
 811560e:	2b00      	cmp	r3, #0
 8115610:	d06e      	beq.n	81156f0 <pvPortMalloc+0x150>
 8115612:	4b45      	ldr	r3, [pc, #276]	; (8115728 <pvPortMalloc+0x188>)
 8115614:	681b      	ldr	r3, [r3, #0]
 8115616:	687a      	ldr	r2, [r7, #4]
 8115618:	429a      	cmp	r2, r3
 811561a:	d869      	bhi.n	81156f0 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 811561c:	4b43      	ldr	r3, [pc, #268]	; (811572c <pvPortMalloc+0x18c>)
 811561e:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8115620:	4b42      	ldr	r3, [pc, #264]	; (811572c <pvPortMalloc+0x18c>)
 8115622:	681b      	ldr	r3, [r3, #0]
 8115624:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8115626:	e004      	b.n	8115632 <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8115628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 811562a:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 811562c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 811562e:	681b      	ldr	r3, [r3, #0]
 8115630:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8115632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8115634:	685b      	ldr	r3, [r3, #4]
 8115636:	687a      	ldr	r2, [r7, #4]
 8115638:	429a      	cmp	r2, r3
 811563a:	d903      	bls.n	8115644 <pvPortMalloc+0xa4>
 811563c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 811563e:	681b      	ldr	r3, [r3, #0]
 8115640:	2b00      	cmp	r3, #0
 8115642:	d1f1      	bne.n	8115628 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8115644:	4b36      	ldr	r3, [pc, #216]	; (8115720 <pvPortMalloc+0x180>)
 8115646:	681b      	ldr	r3, [r3, #0]
 8115648:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 811564a:	429a      	cmp	r2, r3
 811564c:	d050      	beq.n	81156f0 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 811564e:	6a3b      	ldr	r3, [r7, #32]
 8115650:	681b      	ldr	r3, [r3, #0]
 8115652:	2208      	movs	r2, #8
 8115654:	4413      	add	r3, r2
 8115656:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8115658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 811565a:	681a      	ldr	r2, [r3, #0]
 811565c:	6a3b      	ldr	r3, [r7, #32]
 811565e:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8115660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8115662:	685a      	ldr	r2, [r3, #4]
 8115664:	687b      	ldr	r3, [r7, #4]
 8115666:	1ad2      	subs	r2, r2, r3
 8115668:	2308      	movs	r3, #8
 811566a:	005b      	lsls	r3, r3, #1
 811566c:	429a      	cmp	r2, r3
 811566e:	d91f      	bls.n	81156b0 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8115670:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8115672:	687b      	ldr	r3, [r7, #4]
 8115674:	4413      	add	r3, r2
 8115676:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8115678:	69bb      	ldr	r3, [r7, #24]
 811567a:	f003 0307 	and.w	r3, r3, #7
 811567e:	2b00      	cmp	r3, #0
 8115680:	d00a      	beq.n	8115698 <pvPortMalloc+0xf8>
	__asm volatile
 8115682:	f04f 0350 	mov.w	r3, #80	; 0x50
 8115686:	f383 8811 	msr	BASEPRI, r3
 811568a:	f3bf 8f6f 	isb	sy
 811568e:	f3bf 8f4f 	dsb	sy
 8115692:	613b      	str	r3, [r7, #16]
}
 8115694:	bf00      	nop
 8115696:	e7fe      	b.n	8115696 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8115698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 811569a:	685a      	ldr	r2, [r3, #4]
 811569c:	687b      	ldr	r3, [r7, #4]
 811569e:	1ad2      	subs	r2, r2, r3
 81156a0:	69bb      	ldr	r3, [r7, #24]
 81156a2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 81156a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81156a6:	687a      	ldr	r2, [r7, #4]
 81156a8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 81156aa:	69b8      	ldr	r0, [r7, #24]
 81156ac:	f000 f908 	bl	81158c0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 81156b0:	4b1d      	ldr	r3, [pc, #116]	; (8115728 <pvPortMalloc+0x188>)
 81156b2:	681a      	ldr	r2, [r3, #0]
 81156b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81156b6:	685b      	ldr	r3, [r3, #4]
 81156b8:	1ad3      	subs	r3, r2, r3
 81156ba:	4a1b      	ldr	r2, [pc, #108]	; (8115728 <pvPortMalloc+0x188>)
 81156bc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 81156be:	4b1a      	ldr	r3, [pc, #104]	; (8115728 <pvPortMalloc+0x188>)
 81156c0:	681a      	ldr	r2, [r3, #0]
 81156c2:	4b1b      	ldr	r3, [pc, #108]	; (8115730 <pvPortMalloc+0x190>)
 81156c4:	681b      	ldr	r3, [r3, #0]
 81156c6:	429a      	cmp	r2, r3
 81156c8:	d203      	bcs.n	81156d2 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 81156ca:	4b17      	ldr	r3, [pc, #92]	; (8115728 <pvPortMalloc+0x188>)
 81156cc:	681b      	ldr	r3, [r3, #0]
 81156ce:	4a18      	ldr	r2, [pc, #96]	; (8115730 <pvPortMalloc+0x190>)
 81156d0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 81156d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81156d4:	685a      	ldr	r2, [r3, #4]
 81156d6:	4b13      	ldr	r3, [pc, #76]	; (8115724 <pvPortMalloc+0x184>)
 81156d8:	681b      	ldr	r3, [r3, #0]
 81156da:	431a      	orrs	r2, r3
 81156dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81156de:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 81156e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81156e2:	2200      	movs	r2, #0
 81156e4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 81156e6:	4b13      	ldr	r3, [pc, #76]	; (8115734 <pvPortMalloc+0x194>)
 81156e8:	681b      	ldr	r3, [r3, #0]
 81156ea:	3301      	adds	r3, #1
 81156ec:	4a11      	ldr	r2, [pc, #68]	; (8115734 <pvPortMalloc+0x194>)
 81156ee:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 81156f0:	f001 fc32 	bl	8116f58 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 81156f4:	69fb      	ldr	r3, [r7, #28]
 81156f6:	f003 0307 	and.w	r3, r3, #7
 81156fa:	2b00      	cmp	r3, #0
 81156fc:	d00a      	beq.n	8115714 <pvPortMalloc+0x174>
	__asm volatile
 81156fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8115702:	f383 8811 	msr	BASEPRI, r3
 8115706:	f3bf 8f6f 	isb	sy
 811570a:	f3bf 8f4f 	dsb	sy
 811570e:	60fb      	str	r3, [r7, #12]
}
 8115710:	bf00      	nop
 8115712:	e7fe      	b.n	8115712 <pvPortMalloc+0x172>
	return pvReturn;
 8115714:	69fb      	ldr	r3, [r7, #28]
}
 8115716:	4618      	mov	r0, r3
 8115718:	3728      	adds	r7, #40	; 0x28
 811571a:	46bd      	mov	sp, r7
 811571c:	bd80      	pop	{r7, pc}
 811571e:	bf00      	nop
 8115720:	1000465c 	.word	0x1000465c
 8115724:	10004670 	.word	0x10004670
 8115728:	10004660 	.word	0x10004660
 811572c:	10004654 	.word	0x10004654
 8115730:	10004664 	.word	0x10004664
 8115734:	10004668 	.word	0x10004668

08115738 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8115738:	b580      	push	{r7, lr}
 811573a:	b086      	sub	sp, #24
 811573c:	af00      	add	r7, sp, #0
 811573e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8115740:	687b      	ldr	r3, [r7, #4]
 8115742:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8115744:	687b      	ldr	r3, [r7, #4]
 8115746:	2b00      	cmp	r3, #0
 8115748:	d04d      	beq.n	81157e6 <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 811574a:	2308      	movs	r3, #8
 811574c:	425b      	negs	r3, r3
 811574e:	697a      	ldr	r2, [r7, #20]
 8115750:	4413      	add	r3, r2
 8115752:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8115754:	697b      	ldr	r3, [r7, #20]
 8115756:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8115758:	693b      	ldr	r3, [r7, #16]
 811575a:	685a      	ldr	r2, [r3, #4]
 811575c:	4b24      	ldr	r3, [pc, #144]	; (81157f0 <vPortFree+0xb8>)
 811575e:	681b      	ldr	r3, [r3, #0]
 8115760:	4013      	ands	r3, r2
 8115762:	2b00      	cmp	r3, #0
 8115764:	d10a      	bne.n	811577c <vPortFree+0x44>
	__asm volatile
 8115766:	f04f 0350 	mov.w	r3, #80	; 0x50
 811576a:	f383 8811 	msr	BASEPRI, r3
 811576e:	f3bf 8f6f 	isb	sy
 8115772:	f3bf 8f4f 	dsb	sy
 8115776:	60fb      	str	r3, [r7, #12]
}
 8115778:	bf00      	nop
 811577a:	e7fe      	b.n	811577a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 811577c:	693b      	ldr	r3, [r7, #16]
 811577e:	681b      	ldr	r3, [r3, #0]
 8115780:	2b00      	cmp	r3, #0
 8115782:	d00a      	beq.n	811579a <vPortFree+0x62>
	__asm volatile
 8115784:	f04f 0350 	mov.w	r3, #80	; 0x50
 8115788:	f383 8811 	msr	BASEPRI, r3
 811578c:	f3bf 8f6f 	isb	sy
 8115790:	f3bf 8f4f 	dsb	sy
 8115794:	60bb      	str	r3, [r7, #8]
}
 8115796:	bf00      	nop
 8115798:	e7fe      	b.n	8115798 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 811579a:	693b      	ldr	r3, [r7, #16]
 811579c:	685a      	ldr	r2, [r3, #4]
 811579e:	4b14      	ldr	r3, [pc, #80]	; (81157f0 <vPortFree+0xb8>)
 81157a0:	681b      	ldr	r3, [r3, #0]
 81157a2:	4013      	ands	r3, r2
 81157a4:	2b00      	cmp	r3, #0
 81157a6:	d01e      	beq.n	81157e6 <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 81157a8:	693b      	ldr	r3, [r7, #16]
 81157aa:	681b      	ldr	r3, [r3, #0]
 81157ac:	2b00      	cmp	r3, #0
 81157ae:	d11a      	bne.n	81157e6 <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 81157b0:	693b      	ldr	r3, [r7, #16]
 81157b2:	685a      	ldr	r2, [r3, #4]
 81157b4:	4b0e      	ldr	r3, [pc, #56]	; (81157f0 <vPortFree+0xb8>)
 81157b6:	681b      	ldr	r3, [r3, #0]
 81157b8:	43db      	mvns	r3, r3
 81157ba:	401a      	ands	r2, r3
 81157bc:	693b      	ldr	r3, [r7, #16]
 81157be:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 81157c0:	f001 fbbc 	bl	8116f3c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 81157c4:	693b      	ldr	r3, [r7, #16]
 81157c6:	685a      	ldr	r2, [r3, #4]
 81157c8:	4b0a      	ldr	r3, [pc, #40]	; (81157f4 <vPortFree+0xbc>)
 81157ca:	681b      	ldr	r3, [r3, #0]
 81157cc:	4413      	add	r3, r2
 81157ce:	4a09      	ldr	r2, [pc, #36]	; (81157f4 <vPortFree+0xbc>)
 81157d0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 81157d2:	6938      	ldr	r0, [r7, #16]
 81157d4:	f000 f874 	bl	81158c0 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 81157d8:	4b07      	ldr	r3, [pc, #28]	; (81157f8 <vPortFree+0xc0>)
 81157da:	681b      	ldr	r3, [r3, #0]
 81157dc:	3301      	adds	r3, #1
 81157de:	4a06      	ldr	r2, [pc, #24]	; (81157f8 <vPortFree+0xc0>)
 81157e0:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 81157e2:	f001 fbb9 	bl	8116f58 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 81157e6:	bf00      	nop
 81157e8:	3718      	adds	r7, #24
 81157ea:	46bd      	mov	sp, r7
 81157ec:	bd80      	pop	{r7, pc}
 81157ee:	bf00      	nop
 81157f0:	10004670 	.word	0x10004670
 81157f4:	10004660 	.word	0x10004660
 81157f8:	1000466c 	.word	0x1000466c

081157fc <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 81157fc:	b480      	push	{r7}
 81157fe:	b085      	sub	sp, #20
 8115800:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8115802:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8115806:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8115808:	4b27      	ldr	r3, [pc, #156]	; (81158a8 <prvHeapInit+0xac>)
 811580a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 811580c:	68fb      	ldr	r3, [r7, #12]
 811580e:	f003 0307 	and.w	r3, r3, #7
 8115812:	2b00      	cmp	r3, #0
 8115814:	d00c      	beq.n	8115830 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8115816:	68fb      	ldr	r3, [r7, #12]
 8115818:	3307      	adds	r3, #7
 811581a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 811581c:	68fb      	ldr	r3, [r7, #12]
 811581e:	f023 0307 	bic.w	r3, r3, #7
 8115822:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8115824:	68ba      	ldr	r2, [r7, #8]
 8115826:	68fb      	ldr	r3, [r7, #12]
 8115828:	1ad3      	subs	r3, r2, r3
 811582a:	4a1f      	ldr	r2, [pc, #124]	; (81158a8 <prvHeapInit+0xac>)
 811582c:	4413      	add	r3, r2
 811582e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8115830:	68fb      	ldr	r3, [r7, #12]
 8115832:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8115834:	4a1d      	ldr	r2, [pc, #116]	; (81158ac <prvHeapInit+0xb0>)
 8115836:	687b      	ldr	r3, [r7, #4]
 8115838:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 811583a:	4b1c      	ldr	r3, [pc, #112]	; (81158ac <prvHeapInit+0xb0>)
 811583c:	2200      	movs	r2, #0
 811583e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8115840:	687b      	ldr	r3, [r7, #4]
 8115842:	68ba      	ldr	r2, [r7, #8]
 8115844:	4413      	add	r3, r2
 8115846:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8115848:	2208      	movs	r2, #8
 811584a:	68fb      	ldr	r3, [r7, #12]
 811584c:	1a9b      	subs	r3, r3, r2
 811584e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8115850:	68fb      	ldr	r3, [r7, #12]
 8115852:	f023 0307 	bic.w	r3, r3, #7
 8115856:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8115858:	68fb      	ldr	r3, [r7, #12]
 811585a:	4a15      	ldr	r2, [pc, #84]	; (81158b0 <prvHeapInit+0xb4>)
 811585c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 811585e:	4b14      	ldr	r3, [pc, #80]	; (81158b0 <prvHeapInit+0xb4>)
 8115860:	681b      	ldr	r3, [r3, #0]
 8115862:	2200      	movs	r2, #0
 8115864:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8115866:	4b12      	ldr	r3, [pc, #72]	; (81158b0 <prvHeapInit+0xb4>)
 8115868:	681b      	ldr	r3, [r3, #0]
 811586a:	2200      	movs	r2, #0
 811586c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 811586e:	687b      	ldr	r3, [r7, #4]
 8115870:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8115872:	683b      	ldr	r3, [r7, #0]
 8115874:	68fa      	ldr	r2, [r7, #12]
 8115876:	1ad2      	subs	r2, r2, r3
 8115878:	683b      	ldr	r3, [r7, #0]
 811587a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 811587c:	4b0c      	ldr	r3, [pc, #48]	; (81158b0 <prvHeapInit+0xb4>)
 811587e:	681a      	ldr	r2, [r3, #0]
 8115880:	683b      	ldr	r3, [r7, #0]
 8115882:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8115884:	683b      	ldr	r3, [r7, #0]
 8115886:	685b      	ldr	r3, [r3, #4]
 8115888:	4a0a      	ldr	r2, [pc, #40]	; (81158b4 <prvHeapInit+0xb8>)
 811588a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 811588c:	683b      	ldr	r3, [r7, #0]
 811588e:	685b      	ldr	r3, [r3, #4]
 8115890:	4a09      	ldr	r2, [pc, #36]	; (81158b8 <prvHeapInit+0xbc>)
 8115892:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8115894:	4b09      	ldr	r3, [pc, #36]	; (81158bc <prvHeapInit+0xc0>)
 8115896:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 811589a:	601a      	str	r2, [r3, #0]
}
 811589c:	bf00      	nop
 811589e:	3714      	adds	r7, #20
 81158a0:	46bd      	mov	sp, r7
 81158a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81158a6:	4770      	bx	lr
 81158a8:	10000a54 	.word	0x10000a54
 81158ac:	10004654 	.word	0x10004654
 81158b0:	1000465c 	.word	0x1000465c
 81158b4:	10004664 	.word	0x10004664
 81158b8:	10004660 	.word	0x10004660
 81158bc:	10004670 	.word	0x10004670

081158c0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 81158c0:	b480      	push	{r7}
 81158c2:	b085      	sub	sp, #20
 81158c4:	af00      	add	r7, sp, #0
 81158c6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 81158c8:	4b28      	ldr	r3, [pc, #160]	; (811596c <prvInsertBlockIntoFreeList+0xac>)
 81158ca:	60fb      	str	r3, [r7, #12]
 81158cc:	e002      	b.n	81158d4 <prvInsertBlockIntoFreeList+0x14>
 81158ce:	68fb      	ldr	r3, [r7, #12]
 81158d0:	681b      	ldr	r3, [r3, #0]
 81158d2:	60fb      	str	r3, [r7, #12]
 81158d4:	68fb      	ldr	r3, [r7, #12]
 81158d6:	681b      	ldr	r3, [r3, #0]
 81158d8:	687a      	ldr	r2, [r7, #4]
 81158da:	429a      	cmp	r2, r3
 81158dc:	d8f7      	bhi.n	81158ce <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 81158de:	68fb      	ldr	r3, [r7, #12]
 81158e0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 81158e2:	68fb      	ldr	r3, [r7, #12]
 81158e4:	685b      	ldr	r3, [r3, #4]
 81158e6:	68ba      	ldr	r2, [r7, #8]
 81158e8:	4413      	add	r3, r2
 81158ea:	687a      	ldr	r2, [r7, #4]
 81158ec:	429a      	cmp	r2, r3
 81158ee:	d108      	bne.n	8115902 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 81158f0:	68fb      	ldr	r3, [r7, #12]
 81158f2:	685a      	ldr	r2, [r3, #4]
 81158f4:	687b      	ldr	r3, [r7, #4]
 81158f6:	685b      	ldr	r3, [r3, #4]
 81158f8:	441a      	add	r2, r3
 81158fa:	68fb      	ldr	r3, [r7, #12]
 81158fc:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 81158fe:	68fb      	ldr	r3, [r7, #12]
 8115900:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8115902:	687b      	ldr	r3, [r7, #4]
 8115904:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8115906:	687b      	ldr	r3, [r7, #4]
 8115908:	685b      	ldr	r3, [r3, #4]
 811590a:	68ba      	ldr	r2, [r7, #8]
 811590c:	441a      	add	r2, r3
 811590e:	68fb      	ldr	r3, [r7, #12]
 8115910:	681b      	ldr	r3, [r3, #0]
 8115912:	429a      	cmp	r2, r3
 8115914:	d118      	bne.n	8115948 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8115916:	68fb      	ldr	r3, [r7, #12]
 8115918:	681a      	ldr	r2, [r3, #0]
 811591a:	4b15      	ldr	r3, [pc, #84]	; (8115970 <prvInsertBlockIntoFreeList+0xb0>)
 811591c:	681b      	ldr	r3, [r3, #0]
 811591e:	429a      	cmp	r2, r3
 8115920:	d00d      	beq.n	811593e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8115922:	687b      	ldr	r3, [r7, #4]
 8115924:	685a      	ldr	r2, [r3, #4]
 8115926:	68fb      	ldr	r3, [r7, #12]
 8115928:	681b      	ldr	r3, [r3, #0]
 811592a:	685b      	ldr	r3, [r3, #4]
 811592c:	441a      	add	r2, r3
 811592e:	687b      	ldr	r3, [r7, #4]
 8115930:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8115932:	68fb      	ldr	r3, [r7, #12]
 8115934:	681b      	ldr	r3, [r3, #0]
 8115936:	681a      	ldr	r2, [r3, #0]
 8115938:	687b      	ldr	r3, [r7, #4]
 811593a:	601a      	str	r2, [r3, #0]
 811593c:	e008      	b.n	8115950 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 811593e:	4b0c      	ldr	r3, [pc, #48]	; (8115970 <prvInsertBlockIntoFreeList+0xb0>)
 8115940:	681a      	ldr	r2, [r3, #0]
 8115942:	687b      	ldr	r3, [r7, #4]
 8115944:	601a      	str	r2, [r3, #0]
 8115946:	e003      	b.n	8115950 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8115948:	68fb      	ldr	r3, [r7, #12]
 811594a:	681a      	ldr	r2, [r3, #0]
 811594c:	687b      	ldr	r3, [r7, #4]
 811594e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8115950:	68fa      	ldr	r2, [r7, #12]
 8115952:	687b      	ldr	r3, [r7, #4]
 8115954:	429a      	cmp	r2, r3
 8115956:	d002      	beq.n	811595e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8115958:	68fb      	ldr	r3, [r7, #12]
 811595a:	687a      	ldr	r2, [r7, #4]
 811595c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 811595e:	bf00      	nop
 8115960:	3714      	adds	r7, #20
 8115962:	46bd      	mov	sp, r7
 8115964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8115968:	4770      	bx	lr
 811596a:	bf00      	nop
 811596c:	10004654 	.word	0x10004654
 8115970:	1000465c 	.word	0x1000465c

08115974 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8115974:	b480      	push	{r7}
 8115976:	b083      	sub	sp, #12
 8115978:	af00      	add	r7, sp, #0
 811597a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 811597c:	687b      	ldr	r3, [r7, #4]
 811597e:	f103 0208 	add.w	r2, r3, #8
 8115982:	687b      	ldr	r3, [r7, #4]
 8115984:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8115986:	687b      	ldr	r3, [r7, #4]
 8115988:	f04f 32ff 	mov.w	r2, #4294967295
 811598c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 811598e:	687b      	ldr	r3, [r7, #4]
 8115990:	f103 0208 	add.w	r2, r3, #8
 8115994:	687b      	ldr	r3, [r7, #4]
 8115996:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8115998:	687b      	ldr	r3, [r7, #4]
 811599a:	f103 0208 	add.w	r2, r3, #8
 811599e:	687b      	ldr	r3, [r7, #4]
 81159a0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 81159a2:	687b      	ldr	r3, [r7, #4]
 81159a4:	2200      	movs	r2, #0
 81159a6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 81159a8:	bf00      	nop
 81159aa:	370c      	adds	r7, #12
 81159ac:	46bd      	mov	sp, r7
 81159ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 81159b2:	4770      	bx	lr

081159b4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 81159b4:	b480      	push	{r7}
 81159b6:	b083      	sub	sp, #12
 81159b8:	af00      	add	r7, sp, #0
 81159ba:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 81159bc:	687b      	ldr	r3, [r7, #4]
 81159be:	2200      	movs	r2, #0
 81159c0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 81159c2:	bf00      	nop
 81159c4:	370c      	adds	r7, #12
 81159c6:	46bd      	mov	sp, r7
 81159c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81159cc:	4770      	bx	lr

081159ce <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 81159ce:	b480      	push	{r7}
 81159d0:	b085      	sub	sp, #20
 81159d2:	af00      	add	r7, sp, #0
 81159d4:	6078      	str	r0, [r7, #4]
 81159d6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 81159d8:	687b      	ldr	r3, [r7, #4]
 81159da:	685b      	ldr	r3, [r3, #4]
 81159dc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 81159de:	683b      	ldr	r3, [r7, #0]
 81159e0:	68fa      	ldr	r2, [r7, #12]
 81159e2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 81159e4:	68fb      	ldr	r3, [r7, #12]
 81159e6:	689a      	ldr	r2, [r3, #8]
 81159e8:	683b      	ldr	r3, [r7, #0]
 81159ea:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 81159ec:	68fb      	ldr	r3, [r7, #12]
 81159ee:	689b      	ldr	r3, [r3, #8]
 81159f0:	683a      	ldr	r2, [r7, #0]
 81159f2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 81159f4:	68fb      	ldr	r3, [r7, #12]
 81159f6:	683a      	ldr	r2, [r7, #0]
 81159f8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 81159fa:	683b      	ldr	r3, [r7, #0]
 81159fc:	687a      	ldr	r2, [r7, #4]
 81159fe:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8115a00:	687b      	ldr	r3, [r7, #4]
 8115a02:	681b      	ldr	r3, [r3, #0]
 8115a04:	1c5a      	adds	r2, r3, #1
 8115a06:	687b      	ldr	r3, [r7, #4]
 8115a08:	601a      	str	r2, [r3, #0]
}
 8115a0a:	bf00      	nop
 8115a0c:	3714      	adds	r7, #20
 8115a0e:	46bd      	mov	sp, r7
 8115a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8115a14:	4770      	bx	lr

08115a16 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8115a16:	b480      	push	{r7}
 8115a18:	b085      	sub	sp, #20
 8115a1a:	af00      	add	r7, sp, #0
 8115a1c:	6078      	str	r0, [r7, #4]
 8115a1e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8115a20:	683b      	ldr	r3, [r7, #0]
 8115a22:	681b      	ldr	r3, [r3, #0]
 8115a24:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8115a26:	68bb      	ldr	r3, [r7, #8]
 8115a28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8115a2c:	d103      	bne.n	8115a36 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8115a2e:	687b      	ldr	r3, [r7, #4]
 8115a30:	691b      	ldr	r3, [r3, #16]
 8115a32:	60fb      	str	r3, [r7, #12]
 8115a34:	e00c      	b.n	8115a50 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8115a36:	687b      	ldr	r3, [r7, #4]
 8115a38:	3308      	adds	r3, #8
 8115a3a:	60fb      	str	r3, [r7, #12]
 8115a3c:	e002      	b.n	8115a44 <vListInsert+0x2e>
 8115a3e:	68fb      	ldr	r3, [r7, #12]
 8115a40:	685b      	ldr	r3, [r3, #4]
 8115a42:	60fb      	str	r3, [r7, #12]
 8115a44:	68fb      	ldr	r3, [r7, #12]
 8115a46:	685b      	ldr	r3, [r3, #4]
 8115a48:	681b      	ldr	r3, [r3, #0]
 8115a4a:	68ba      	ldr	r2, [r7, #8]
 8115a4c:	429a      	cmp	r2, r3
 8115a4e:	d2f6      	bcs.n	8115a3e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8115a50:	68fb      	ldr	r3, [r7, #12]
 8115a52:	685a      	ldr	r2, [r3, #4]
 8115a54:	683b      	ldr	r3, [r7, #0]
 8115a56:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8115a58:	683b      	ldr	r3, [r7, #0]
 8115a5a:	685b      	ldr	r3, [r3, #4]
 8115a5c:	683a      	ldr	r2, [r7, #0]
 8115a5e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8115a60:	683b      	ldr	r3, [r7, #0]
 8115a62:	68fa      	ldr	r2, [r7, #12]
 8115a64:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8115a66:	68fb      	ldr	r3, [r7, #12]
 8115a68:	683a      	ldr	r2, [r7, #0]
 8115a6a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8115a6c:	683b      	ldr	r3, [r7, #0]
 8115a6e:	687a      	ldr	r2, [r7, #4]
 8115a70:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8115a72:	687b      	ldr	r3, [r7, #4]
 8115a74:	681b      	ldr	r3, [r3, #0]
 8115a76:	1c5a      	adds	r2, r3, #1
 8115a78:	687b      	ldr	r3, [r7, #4]
 8115a7a:	601a      	str	r2, [r3, #0]
}
 8115a7c:	bf00      	nop
 8115a7e:	3714      	adds	r7, #20
 8115a80:	46bd      	mov	sp, r7
 8115a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8115a86:	4770      	bx	lr

08115a88 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8115a88:	b480      	push	{r7}
 8115a8a:	b085      	sub	sp, #20
 8115a8c:	af00      	add	r7, sp, #0
 8115a8e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8115a90:	687b      	ldr	r3, [r7, #4]
 8115a92:	691b      	ldr	r3, [r3, #16]
 8115a94:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8115a96:	687b      	ldr	r3, [r7, #4]
 8115a98:	685b      	ldr	r3, [r3, #4]
 8115a9a:	687a      	ldr	r2, [r7, #4]
 8115a9c:	6892      	ldr	r2, [r2, #8]
 8115a9e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8115aa0:	687b      	ldr	r3, [r7, #4]
 8115aa2:	689b      	ldr	r3, [r3, #8]
 8115aa4:	687a      	ldr	r2, [r7, #4]
 8115aa6:	6852      	ldr	r2, [r2, #4]
 8115aa8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8115aaa:	68fb      	ldr	r3, [r7, #12]
 8115aac:	685b      	ldr	r3, [r3, #4]
 8115aae:	687a      	ldr	r2, [r7, #4]
 8115ab0:	429a      	cmp	r2, r3
 8115ab2:	d103      	bne.n	8115abc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8115ab4:	687b      	ldr	r3, [r7, #4]
 8115ab6:	689a      	ldr	r2, [r3, #8]
 8115ab8:	68fb      	ldr	r3, [r7, #12]
 8115aba:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8115abc:	687b      	ldr	r3, [r7, #4]
 8115abe:	2200      	movs	r2, #0
 8115ac0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8115ac2:	68fb      	ldr	r3, [r7, #12]
 8115ac4:	681b      	ldr	r3, [r3, #0]
 8115ac6:	1e5a      	subs	r2, r3, #1
 8115ac8:	68fb      	ldr	r3, [r7, #12]
 8115aca:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8115acc:	68fb      	ldr	r3, [r7, #12]
 8115ace:	681b      	ldr	r3, [r3, #0]
}
 8115ad0:	4618      	mov	r0, r3
 8115ad2:	3714      	adds	r7, #20
 8115ad4:	46bd      	mov	sp, r7
 8115ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8115ada:	4770      	bx	lr

08115adc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8115adc:	b480      	push	{r7}
 8115ade:	b085      	sub	sp, #20
 8115ae0:	af00      	add	r7, sp, #0
 8115ae2:	60f8      	str	r0, [r7, #12]
 8115ae4:	60b9      	str	r1, [r7, #8]
 8115ae6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8115ae8:	68fb      	ldr	r3, [r7, #12]
 8115aea:	3b04      	subs	r3, #4
 8115aec:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8115aee:	68fb      	ldr	r3, [r7, #12]
 8115af0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8115af4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8115af6:	68fb      	ldr	r3, [r7, #12]
 8115af8:	3b04      	subs	r3, #4
 8115afa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8115afc:	68bb      	ldr	r3, [r7, #8]
 8115afe:	f023 0201 	bic.w	r2, r3, #1
 8115b02:	68fb      	ldr	r3, [r7, #12]
 8115b04:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8115b06:	68fb      	ldr	r3, [r7, #12]
 8115b08:	3b04      	subs	r3, #4
 8115b0a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8115b0c:	4a0c      	ldr	r2, [pc, #48]	; (8115b40 <pxPortInitialiseStack+0x64>)
 8115b0e:	68fb      	ldr	r3, [r7, #12]
 8115b10:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8115b12:	68fb      	ldr	r3, [r7, #12]
 8115b14:	3b14      	subs	r3, #20
 8115b16:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8115b18:	687a      	ldr	r2, [r7, #4]
 8115b1a:	68fb      	ldr	r3, [r7, #12]
 8115b1c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8115b1e:	68fb      	ldr	r3, [r7, #12]
 8115b20:	3b04      	subs	r3, #4
 8115b22:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8115b24:	68fb      	ldr	r3, [r7, #12]
 8115b26:	f06f 0202 	mvn.w	r2, #2
 8115b2a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8115b2c:	68fb      	ldr	r3, [r7, #12]
 8115b2e:	3b20      	subs	r3, #32
 8115b30:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8115b32:	68fb      	ldr	r3, [r7, #12]
}
 8115b34:	4618      	mov	r0, r3
 8115b36:	3714      	adds	r7, #20
 8115b38:	46bd      	mov	sp, r7
 8115b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8115b3e:	4770      	bx	lr
 8115b40:	08115b45 	.word	0x08115b45

08115b44 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8115b44:	b480      	push	{r7}
 8115b46:	b085      	sub	sp, #20
 8115b48:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8115b4a:	2300      	movs	r3, #0
 8115b4c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8115b4e:	4b12      	ldr	r3, [pc, #72]	; (8115b98 <prvTaskExitError+0x54>)
 8115b50:	681b      	ldr	r3, [r3, #0]
 8115b52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8115b56:	d00a      	beq.n	8115b6e <prvTaskExitError+0x2a>
	__asm volatile
 8115b58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8115b5c:	f383 8811 	msr	BASEPRI, r3
 8115b60:	f3bf 8f6f 	isb	sy
 8115b64:	f3bf 8f4f 	dsb	sy
 8115b68:	60fb      	str	r3, [r7, #12]
}
 8115b6a:	bf00      	nop
 8115b6c:	e7fe      	b.n	8115b6c <prvTaskExitError+0x28>
	__asm volatile
 8115b6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8115b72:	f383 8811 	msr	BASEPRI, r3
 8115b76:	f3bf 8f6f 	isb	sy
 8115b7a:	f3bf 8f4f 	dsb	sy
 8115b7e:	60bb      	str	r3, [r7, #8]
}
 8115b80:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8115b82:	bf00      	nop
 8115b84:	687b      	ldr	r3, [r7, #4]
 8115b86:	2b00      	cmp	r3, #0
 8115b88:	d0fc      	beq.n	8115b84 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8115b8a:	bf00      	nop
 8115b8c:	bf00      	nop
 8115b8e:	3714      	adds	r7, #20
 8115b90:	46bd      	mov	sp, r7
 8115b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8115b96:	4770      	bx	lr
 8115b98:	10000120 	.word	0x10000120
 8115b9c:	00000000 	.word	0x00000000

08115ba0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8115ba0:	4b07      	ldr	r3, [pc, #28]	; (8115bc0 <pxCurrentTCBConst2>)
 8115ba2:	6819      	ldr	r1, [r3, #0]
 8115ba4:	6808      	ldr	r0, [r1, #0]
 8115ba6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8115baa:	f380 8809 	msr	PSP, r0
 8115bae:	f3bf 8f6f 	isb	sy
 8115bb2:	f04f 0000 	mov.w	r0, #0
 8115bb6:	f380 8811 	msr	BASEPRI, r0
 8115bba:	4770      	bx	lr
 8115bbc:	f3af 8000 	nop.w

08115bc0 <pxCurrentTCBConst2>:
 8115bc0:	1000467c 	.word	0x1000467c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8115bc4:	bf00      	nop
 8115bc6:	bf00      	nop

08115bc8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8115bc8:	4808      	ldr	r0, [pc, #32]	; (8115bec <prvPortStartFirstTask+0x24>)
 8115bca:	6800      	ldr	r0, [r0, #0]
 8115bcc:	6800      	ldr	r0, [r0, #0]
 8115bce:	f380 8808 	msr	MSP, r0
 8115bd2:	f04f 0000 	mov.w	r0, #0
 8115bd6:	f380 8814 	msr	CONTROL, r0
 8115bda:	b662      	cpsie	i
 8115bdc:	b661      	cpsie	f
 8115bde:	f3bf 8f4f 	dsb	sy
 8115be2:	f3bf 8f6f 	isb	sy
 8115be6:	df00      	svc	0
 8115be8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8115bea:	bf00      	nop
 8115bec:	e000ed08 	.word	0xe000ed08

08115bf0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8115bf0:	b580      	push	{r7, lr}
 8115bf2:	b086      	sub	sp, #24
 8115bf4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8115bf6:	4b46      	ldr	r3, [pc, #280]	; (8115d10 <xPortStartScheduler+0x120>)
 8115bf8:	681b      	ldr	r3, [r3, #0]
 8115bfa:	4a46      	ldr	r2, [pc, #280]	; (8115d14 <xPortStartScheduler+0x124>)
 8115bfc:	4293      	cmp	r3, r2
 8115bfe:	d10a      	bne.n	8115c16 <xPortStartScheduler+0x26>
	__asm volatile
 8115c00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8115c04:	f383 8811 	msr	BASEPRI, r3
 8115c08:	f3bf 8f6f 	isb	sy
 8115c0c:	f3bf 8f4f 	dsb	sy
 8115c10:	613b      	str	r3, [r7, #16]
}
 8115c12:	bf00      	nop
 8115c14:	e7fe      	b.n	8115c14 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8115c16:	4b3e      	ldr	r3, [pc, #248]	; (8115d10 <xPortStartScheduler+0x120>)
 8115c18:	681b      	ldr	r3, [r3, #0]
 8115c1a:	4a3f      	ldr	r2, [pc, #252]	; (8115d18 <xPortStartScheduler+0x128>)
 8115c1c:	4293      	cmp	r3, r2
 8115c1e:	d10a      	bne.n	8115c36 <xPortStartScheduler+0x46>
	__asm volatile
 8115c20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8115c24:	f383 8811 	msr	BASEPRI, r3
 8115c28:	f3bf 8f6f 	isb	sy
 8115c2c:	f3bf 8f4f 	dsb	sy
 8115c30:	60fb      	str	r3, [r7, #12]
}
 8115c32:	bf00      	nop
 8115c34:	e7fe      	b.n	8115c34 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8115c36:	4b39      	ldr	r3, [pc, #228]	; (8115d1c <xPortStartScheduler+0x12c>)
 8115c38:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8115c3a:	697b      	ldr	r3, [r7, #20]
 8115c3c:	781b      	ldrb	r3, [r3, #0]
 8115c3e:	b2db      	uxtb	r3, r3
 8115c40:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8115c42:	697b      	ldr	r3, [r7, #20]
 8115c44:	22ff      	movs	r2, #255	; 0xff
 8115c46:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8115c48:	697b      	ldr	r3, [r7, #20]
 8115c4a:	781b      	ldrb	r3, [r3, #0]
 8115c4c:	b2db      	uxtb	r3, r3
 8115c4e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8115c50:	78fb      	ldrb	r3, [r7, #3]
 8115c52:	b2db      	uxtb	r3, r3
 8115c54:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8115c58:	b2da      	uxtb	r2, r3
 8115c5a:	4b31      	ldr	r3, [pc, #196]	; (8115d20 <xPortStartScheduler+0x130>)
 8115c5c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8115c5e:	4b31      	ldr	r3, [pc, #196]	; (8115d24 <xPortStartScheduler+0x134>)
 8115c60:	2207      	movs	r2, #7
 8115c62:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8115c64:	e009      	b.n	8115c7a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8115c66:	4b2f      	ldr	r3, [pc, #188]	; (8115d24 <xPortStartScheduler+0x134>)
 8115c68:	681b      	ldr	r3, [r3, #0]
 8115c6a:	3b01      	subs	r3, #1
 8115c6c:	4a2d      	ldr	r2, [pc, #180]	; (8115d24 <xPortStartScheduler+0x134>)
 8115c6e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8115c70:	78fb      	ldrb	r3, [r7, #3]
 8115c72:	b2db      	uxtb	r3, r3
 8115c74:	005b      	lsls	r3, r3, #1
 8115c76:	b2db      	uxtb	r3, r3
 8115c78:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8115c7a:	78fb      	ldrb	r3, [r7, #3]
 8115c7c:	b2db      	uxtb	r3, r3
 8115c7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8115c82:	2b80      	cmp	r3, #128	; 0x80
 8115c84:	d0ef      	beq.n	8115c66 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8115c86:	4b27      	ldr	r3, [pc, #156]	; (8115d24 <xPortStartScheduler+0x134>)
 8115c88:	681b      	ldr	r3, [r3, #0]
 8115c8a:	f1c3 0307 	rsb	r3, r3, #7
 8115c8e:	2b04      	cmp	r3, #4
 8115c90:	d00a      	beq.n	8115ca8 <xPortStartScheduler+0xb8>
	__asm volatile
 8115c92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8115c96:	f383 8811 	msr	BASEPRI, r3
 8115c9a:	f3bf 8f6f 	isb	sy
 8115c9e:	f3bf 8f4f 	dsb	sy
 8115ca2:	60bb      	str	r3, [r7, #8]
}
 8115ca4:	bf00      	nop
 8115ca6:	e7fe      	b.n	8115ca6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8115ca8:	4b1e      	ldr	r3, [pc, #120]	; (8115d24 <xPortStartScheduler+0x134>)
 8115caa:	681b      	ldr	r3, [r3, #0]
 8115cac:	021b      	lsls	r3, r3, #8
 8115cae:	4a1d      	ldr	r2, [pc, #116]	; (8115d24 <xPortStartScheduler+0x134>)
 8115cb0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8115cb2:	4b1c      	ldr	r3, [pc, #112]	; (8115d24 <xPortStartScheduler+0x134>)
 8115cb4:	681b      	ldr	r3, [r3, #0]
 8115cb6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8115cba:	4a1a      	ldr	r2, [pc, #104]	; (8115d24 <xPortStartScheduler+0x134>)
 8115cbc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8115cbe:	687b      	ldr	r3, [r7, #4]
 8115cc0:	b2da      	uxtb	r2, r3
 8115cc2:	697b      	ldr	r3, [r7, #20]
 8115cc4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8115cc6:	4b18      	ldr	r3, [pc, #96]	; (8115d28 <xPortStartScheduler+0x138>)
 8115cc8:	681b      	ldr	r3, [r3, #0]
 8115cca:	4a17      	ldr	r2, [pc, #92]	; (8115d28 <xPortStartScheduler+0x138>)
 8115ccc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8115cd0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8115cd2:	4b15      	ldr	r3, [pc, #84]	; (8115d28 <xPortStartScheduler+0x138>)
 8115cd4:	681b      	ldr	r3, [r3, #0]
 8115cd6:	4a14      	ldr	r2, [pc, #80]	; (8115d28 <xPortStartScheduler+0x138>)
 8115cd8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8115cdc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8115cde:	f000 f8dd 	bl	8115e9c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8115ce2:	4b12      	ldr	r3, [pc, #72]	; (8115d2c <xPortStartScheduler+0x13c>)
 8115ce4:	2200      	movs	r2, #0
 8115ce6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8115ce8:	f000 f8fc 	bl	8115ee4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8115cec:	4b10      	ldr	r3, [pc, #64]	; (8115d30 <xPortStartScheduler+0x140>)
 8115cee:	681b      	ldr	r3, [r3, #0]
 8115cf0:	4a0f      	ldr	r2, [pc, #60]	; (8115d30 <xPortStartScheduler+0x140>)
 8115cf2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8115cf6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8115cf8:	f7ff ff66 	bl	8115bc8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8115cfc:	f001 faa6 	bl	811724c <vTaskSwitchContext>
	prvTaskExitError();
 8115d00:	f7ff ff20 	bl	8115b44 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8115d04:	2300      	movs	r3, #0
}
 8115d06:	4618      	mov	r0, r3
 8115d08:	3718      	adds	r7, #24
 8115d0a:	46bd      	mov	sp, r7
 8115d0c:	bd80      	pop	{r7, pc}
 8115d0e:	bf00      	nop
 8115d10:	e000ed00 	.word	0xe000ed00
 8115d14:	410fc271 	.word	0x410fc271
 8115d18:	410fc270 	.word	0x410fc270
 8115d1c:	e000e400 	.word	0xe000e400
 8115d20:	10004674 	.word	0x10004674
 8115d24:	10004678 	.word	0x10004678
 8115d28:	e000ed20 	.word	0xe000ed20
 8115d2c:	10000120 	.word	0x10000120
 8115d30:	e000ef34 	.word	0xe000ef34

08115d34 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8115d34:	b480      	push	{r7}
 8115d36:	b083      	sub	sp, #12
 8115d38:	af00      	add	r7, sp, #0
	__asm volatile
 8115d3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8115d3e:	f383 8811 	msr	BASEPRI, r3
 8115d42:	f3bf 8f6f 	isb	sy
 8115d46:	f3bf 8f4f 	dsb	sy
 8115d4a:	607b      	str	r3, [r7, #4]
}
 8115d4c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8115d4e:	4b0f      	ldr	r3, [pc, #60]	; (8115d8c <vPortEnterCritical+0x58>)
 8115d50:	681b      	ldr	r3, [r3, #0]
 8115d52:	3301      	adds	r3, #1
 8115d54:	4a0d      	ldr	r2, [pc, #52]	; (8115d8c <vPortEnterCritical+0x58>)
 8115d56:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8115d58:	4b0c      	ldr	r3, [pc, #48]	; (8115d8c <vPortEnterCritical+0x58>)
 8115d5a:	681b      	ldr	r3, [r3, #0]
 8115d5c:	2b01      	cmp	r3, #1
 8115d5e:	d10f      	bne.n	8115d80 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8115d60:	4b0b      	ldr	r3, [pc, #44]	; (8115d90 <vPortEnterCritical+0x5c>)
 8115d62:	681b      	ldr	r3, [r3, #0]
 8115d64:	b2db      	uxtb	r3, r3
 8115d66:	2b00      	cmp	r3, #0
 8115d68:	d00a      	beq.n	8115d80 <vPortEnterCritical+0x4c>
	__asm volatile
 8115d6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8115d6e:	f383 8811 	msr	BASEPRI, r3
 8115d72:	f3bf 8f6f 	isb	sy
 8115d76:	f3bf 8f4f 	dsb	sy
 8115d7a:	603b      	str	r3, [r7, #0]
}
 8115d7c:	bf00      	nop
 8115d7e:	e7fe      	b.n	8115d7e <vPortEnterCritical+0x4a>
	}
}
 8115d80:	bf00      	nop
 8115d82:	370c      	adds	r7, #12
 8115d84:	46bd      	mov	sp, r7
 8115d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8115d8a:	4770      	bx	lr
 8115d8c:	10000120 	.word	0x10000120
 8115d90:	e000ed04 	.word	0xe000ed04

08115d94 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8115d94:	b480      	push	{r7}
 8115d96:	b083      	sub	sp, #12
 8115d98:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8115d9a:	4b12      	ldr	r3, [pc, #72]	; (8115de4 <vPortExitCritical+0x50>)
 8115d9c:	681b      	ldr	r3, [r3, #0]
 8115d9e:	2b00      	cmp	r3, #0
 8115da0:	d10a      	bne.n	8115db8 <vPortExitCritical+0x24>
	__asm volatile
 8115da2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8115da6:	f383 8811 	msr	BASEPRI, r3
 8115daa:	f3bf 8f6f 	isb	sy
 8115dae:	f3bf 8f4f 	dsb	sy
 8115db2:	607b      	str	r3, [r7, #4]
}
 8115db4:	bf00      	nop
 8115db6:	e7fe      	b.n	8115db6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8115db8:	4b0a      	ldr	r3, [pc, #40]	; (8115de4 <vPortExitCritical+0x50>)
 8115dba:	681b      	ldr	r3, [r3, #0]
 8115dbc:	3b01      	subs	r3, #1
 8115dbe:	4a09      	ldr	r2, [pc, #36]	; (8115de4 <vPortExitCritical+0x50>)
 8115dc0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8115dc2:	4b08      	ldr	r3, [pc, #32]	; (8115de4 <vPortExitCritical+0x50>)
 8115dc4:	681b      	ldr	r3, [r3, #0]
 8115dc6:	2b00      	cmp	r3, #0
 8115dc8:	d105      	bne.n	8115dd6 <vPortExitCritical+0x42>
 8115dca:	2300      	movs	r3, #0
 8115dcc:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8115dce:	683b      	ldr	r3, [r7, #0]
 8115dd0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8115dd4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8115dd6:	bf00      	nop
 8115dd8:	370c      	adds	r7, #12
 8115dda:	46bd      	mov	sp, r7
 8115ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8115de0:	4770      	bx	lr
 8115de2:	bf00      	nop
 8115de4:	10000120 	.word	0x10000120
	...

08115df0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8115df0:	f3ef 8009 	mrs	r0, PSP
 8115df4:	f3bf 8f6f 	isb	sy
 8115df8:	4b15      	ldr	r3, [pc, #84]	; (8115e50 <pxCurrentTCBConst>)
 8115dfa:	681a      	ldr	r2, [r3, #0]
 8115dfc:	f01e 0f10 	tst.w	lr, #16
 8115e00:	bf08      	it	eq
 8115e02:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8115e06:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8115e0a:	6010      	str	r0, [r2, #0]
 8115e0c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8115e10:	f04f 0050 	mov.w	r0, #80	; 0x50
 8115e14:	f380 8811 	msr	BASEPRI, r0
 8115e18:	f3bf 8f4f 	dsb	sy
 8115e1c:	f3bf 8f6f 	isb	sy
 8115e20:	f001 fa14 	bl	811724c <vTaskSwitchContext>
 8115e24:	f04f 0000 	mov.w	r0, #0
 8115e28:	f380 8811 	msr	BASEPRI, r0
 8115e2c:	bc09      	pop	{r0, r3}
 8115e2e:	6819      	ldr	r1, [r3, #0]
 8115e30:	6808      	ldr	r0, [r1, #0]
 8115e32:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8115e36:	f01e 0f10 	tst.w	lr, #16
 8115e3a:	bf08      	it	eq
 8115e3c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8115e40:	f380 8809 	msr	PSP, r0
 8115e44:	f3bf 8f6f 	isb	sy
 8115e48:	4770      	bx	lr
 8115e4a:	bf00      	nop
 8115e4c:	f3af 8000 	nop.w

08115e50 <pxCurrentTCBConst>:
 8115e50:	1000467c 	.word	0x1000467c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8115e54:	bf00      	nop
 8115e56:	bf00      	nop

08115e58 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8115e58:	b580      	push	{r7, lr}
 8115e5a:	b082      	sub	sp, #8
 8115e5c:	af00      	add	r7, sp, #0
	__asm volatile
 8115e5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8115e62:	f383 8811 	msr	BASEPRI, r3
 8115e66:	f3bf 8f6f 	isb	sy
 8115e6a:	f3bf 8f4f 	dsb	sy
 8115e6e:	607b      	str	r3, [r7, #4]
}
 8115e70:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8115e72:	f001 f931 	bl	81170d8 <xTaskIncrementTick>
 8115e76:	4603      	mov	r3, r0
 8115e78:	2b00      	cmp	r3, #0
 8115e7a:	d003      	beq.n	8115e84 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8115e7c:	4b06      	ldr	r3, [pc, #24]	; (8115e98 <xPortSysTickHandler+0x40>)
 8115e7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8115e82:	601a      	str	r2, [r3, #0]
 8115e84:	2300      	movs	r3, #0
 8115e86:	603b      	str	r3, [r7, #0]
	__asm volatile
 8115e88:	683b      	ldr	r3, [r7, #0]
 8115e8a:	f383 8811 	msr	BASEPRI, r3
}
 8115e8e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8115e90:	bf00      	nop
 8115e92:	3708      	adds	r7, #8
 8115e94:	46bd      	mov	sp, r7
 8115e96:	bd80      	pop	{r7, pc}
 8115e98:	e000ed04 	.word	0xe000ed04

08115e9c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8115e9c:	b480      	push	{r7}
 8115e9e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8115ea0:	4b0b      	ldr	r3, [pc, #44]	; (8115ed0 <vPortSetupTimerInterrupt+0x34>)
 8115ea2:	2200      	movs	r2, #0
 8115ea4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8115ea6:	4b0b      	ldr	r3, [pc, #44]	; (8115ed4 <vPortSetupTimerInterrupt+0x38>)
 8115ea8:	2200      	movs	r2, #0
 8115eaa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8115eac:	4b0a      	ldr	r3, [pc, #40]	; (8115ed8 <vPortSetupTimerInterrupt+0x3c>)
 8115eae:	681b      	ldr	r3, [r3, #0]
 8115eb0:	4a0a      	ldr	r2, [pc, #40]	; (8115edc <vPortSetupTimerInterrupt+0x40>)
 8115eb2:	fba2 2303 	umull	r2, r3, r2, r3
 8115eb6:	099b      	lsrs	r3, r3, #6
 8115eb8:	4a09      	ldr	r2, [pc, #36]	; (8115ee0 <vPortSetupTimerInterrupt+0x44>)
 8115eba:	3b01      	subs	r3, #1
 8115ebc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8115ebe:	4b04      	ldr	r3, [pc, #16]	; (8115ed0 <vPortSetupTimerInterrupt+0x34>)
 8115ec0:	2207      	movs	r2, #7
 8115ec2:	601a      	str	r2, [r3, #0]
}
 8115ec4:	bf00      	nop
 8115ec6:	46bd      	mov	sp, r7
 8115ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8115ecc:	4770      	bx	lr
 8115ece:	bf00      	nop
 8115ed0:	e000e010 	.word	0xe000e010
 8115ed4:	e000e018 	.word	0xe000e018
 8115ed8:	10000004 	.word	0x10000004
 8115edc:	10624dd3 	.word	0x10624dd3
 8115ee0:	e000e014 	.word	0xe000e014

08115ee4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8115ee4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8115ef4 <vPortEnableVFP+0x10>
 8115ee8:	6801      	ldr	r1, [r0, #0]
 8115eea:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8115eee:	6001      	str	r1, [r0, #0]
 8115ef0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8115ef2:	bf00      	nop
 8115ef4:	e000ed88 	.word	0xe000ed88

08115ef8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8115ef8:	b480      	push	{r7}
 8115efa:	b085      	sub	sp, #20
 8115efc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8115efe:	f3ef 8305 	mrs	r3, IPSR
 8115f02:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8115f04:	68fb      	ldr	r3, [r7, #12]
 8115f06:	2b0f      	cmp	r3, #15
 8115f08:	d914      	bls.n	8115f34 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8115f0a:	4a17      	ldr	r2, [pc, #92]	; (8115f68 <vPortValidateInterruptPriority+0x70>)
 8115f0c:	68fb      	ldr	r3, [r7, #12]
 8115f0e:	4413      	add	r3, r2
 8115f10:	781b      	ldrb	r3, [r3, #0]
 8115f12:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8115f14:	4b15      	ldr	r3, [pc, #84]	; (8115f6c <vPortValidateInterruptPriority+0x74>)
 8115f16:	781b      	ldrb	r3, [r3, #0]
 8115f18:	7afa      	ldrb	r2, [r7, #11]
 8115f1a:	429a      	cmp	r2, r3
 8115f1c:	d20a      	bcs.n	8115f34 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8115f1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8115f22:	f383 8811 	msr	BASEPRI, r3
 8115f26:	f3bf 8f6f 	isb	sy
 8115f2a:	f3bf 8f4f 	dsb	sy
 8115f2e:	607b      	str	r3, [r7, #4]
}
 8115f30:	bf00      	nop
 8115f32:	e7fe      	b.n	8115f32 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8115f34:	4b0e      	ldr	r3, [pc, #56]	; (8115f70 <vPortValidateInterruptPriority+0x78>)
 8115f36:	681b      	ldr	r3, [r3, #0]
 8115f38:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8115f3c:	4b0d      	ldr	r3, [pc, #52]	; (8115f74 <vPortValidateInterruptPriority+0x7c>)
 8115f3e:	681b      	ldr	r3, [r3, #0]
 8115f40:	429a      	cmp	r2, r3
 8115f42:	d90a      	bls.n	8115f5a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8115f44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8115f48:	f383 8811 	msr	BASEPRI, r3
 8115f4c:	f3bf 8f6f 	isb	sy
 8115f50:	f3bf 8f4f 	dsb	sy
 8115f54:	603b      	str	r3, [r7, #0]
}
 8115f56:	bf00      	nop
 8115f58:	e7fe      	b.n	8115f58 <vPortValidateInterruptPriority+0x60>
	}
 8115f5a:	bf00      	nop
 8115f5c:	3714      	adds	r7, #20
 8115f5e:	46bd      	mov	sp, r7
 8115f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8115f64:	4770      	bx	lr
 8115f66:	bf00      	nop
 8115f68:	e000e3f0 	.word	0xe000e3f0
 8115f6c:	10004674 	.word	0x10004674
 8115f70:	e000ed0c 	.word	0xe000ed0c
 8115f74:	10004678 	.word	0x10004678

08115f78 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8115f78:	b580      	push	{r7, lr}
 8115f7a:	b084      	sub	sp, #16
 8115f7c:	af00      	add	r7, sp, #0
 8115f7e:	6078      	str	r0, [r7, #4]
 8115f80:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8115f82:	687b      	ldr	r3, [r7, #4]
 8115f84:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8115f86:	68fb      	ldr	r3, [r7, #12]
 8115f88:	2b00      	cmp	r3, #0
 8115f8a:	d10a      	bne.n	8115fa2 <xQueueGenericReset+0x2a>
	__asm volatile
 8115f8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8115f90:	f383 8811 	msr	BASEPRI, r3
 8115f94:	f3bf 8f6f 	isb	sy
 8115f98:	f3bf 8f4f 	dsb	sy
 8115f9c:	60bb      	str	r3, [r7, #8]
}
 8115f9e:	bf00      	nop
 8115fa0:	e7fe      	b.n	8115fa0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8115fa2:	f7ff fec7 	bl	8115d34 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8115fa6:	68fb      	ldr	r3, [r7, #12]
 8115fa8:	681a      	ldr	r2, [r3, #0]
 8115faa:	68fb      	ldr	r3, [r7, #12]
 8115fac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8115fae:	68f9      	ldr	r1, [r7, #12]
 8115fb0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8115fb2:	fb01 f303 	mul.w	r3, r1, r3
 8115fb6:	441a      	add	r2, r3
 8115fb8:	68fb      	ldr	r3, [r7, #12]
 8115fba:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8115fbc:	68fb      	ldr	r3, [r7, #12]
 8115fbe:	2200      	movs	r2, #0
 8115fc0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8115fc2:	68fb      	ldr	r3, [r7, #12]
 8115fc4:	681a      	ldr	r2, [r3, #0]
 8115fc6:	68fb      	ldr	r3, [r7, #12]
 8115fc8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8115fca:	68fb      	ldr	r3, [r7, #12]
 8115fcc:	681a      	ldr	r2, [r3, #0]
 8115fce:	68fb      	ldr	r3, [r7, #12]
 8115fd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8115fd2:	3b01      	subs	r3, #1
 8115fd4:	68f9      	ldr	r1, [r7, #12]
 8115fd6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8115fd8:	fb01 f303 	mul.w	r3, r1, r3
 8115fdc:	441a      	add	r2, r3
 8115fde:	68fb      	ldr	r3, [r7, #12]
 8115fe0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8115fe2:	68fb      	ldr	r3, [r7, #12]
 8115fe4:	22ff      	movs	r2, #255	; 0xff
 8115fe6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8115fea:	68fb      	ldr	r3, [r7, #12]
 8115fec:	22ff      	movs	r2, #255	; 0xff
 8115fee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8115ff2:	683b      	ldr	r3, [r7, #0]
 8115ff4:	2b00      	cmp	r3, #0
 8115ff6:	d114      	bne.n	8116022 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8115ff8:	68fb      	ldr	r3, [r7, #12]
 8115ffa:	691b      	ldr	r3, [r3, #16]
 8115ffc:	2b00      	cmp	r3, #0
 8115ffe:	d01a      	beq.n	8116036 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8116000:	68fb      	ldr	r3, [r7, #12]
 8116002:	3310      	adds	r3, #16
 8116004:	4618      	mov	r0, r3
 8116006:	f001 f9cf 	bl	81173a8 <xTaskRemoveFromEventList>
 811600a:	4603      	mov	r3, r0
 811600c:	2b00      	cmp	r3, #0
 811600e:	d012      	beq.n	8116036 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8116010:	4b0c      	ldr	r3, [pc, #48]	; (8116044 <xQueueGenericReset+0xcc>)
 8116012:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8116016:	601a      	str	r2, [r3, #0]
 8116018:	f3bf 8f4f 	dsb	sy
 811601c:	f3bf 8f6f 	isb	sy
 8116020:	e009      	b.n	8116036 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8116022:	68fb      	ldr	r3, [r7, #12]
 8116024:	3310      	adds	r3, #16
 8116026:	4618      	mov	r0, r3
 8116028:	f7ff fca4 	bl	8115974 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 811602c:	68fb      	ldr	r3, [r7, #12]
 811602e:	3324      	adds	r3, #36	; 0x24
 8116030:	4618      	mov	r0, r3
 8116032:	f7ff fc9f 	bl	8115974 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8116036:	f7ff fead 	bl	8115d94 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 811603a:	2301      	movs	r3, #1
}
 811603c:	4618      	mov	r0, r3
 811603e:	3710      	adds	r7, #16
 8116040:	46bd      	mov	sp, r7
 8116042:	bd80      	pop	{r7, pc}
 8116044:	e000ed04 	.word	0xe000ed04

08116048 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8116048:	b580      	push	{r7, lr}
 811604a:	b08e      	sub	sp, #56	; 0x38
 811604c:	af02      	add	r7, sp, #8
 811604e:	60f8      	str	r0, [r7, #12]
 8116050:	60b9      	str	r1, [r7, #8]
 8116052:	607a      	str	r2, [r7, #4]
 8116054:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8116056:	68fb      	ldr	r3, [r7, #12]
 8116058:	2b00      	cmp	r3, #0
 811605a:	d10a      	bne.n	8116072 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 811605c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8116060:	f383 8811 	msr	BASEPRI, r3
 8116064:	f3bf 8f6f 	isb	sy
 8116068:	f3bf 8f4f 	dsb	sy
 811606c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 811606e:	bf00      	nop
 8116070:	e7fe      	b.n	8116070 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8116072:	683b      	ldr	r3, [r7, #0]
 8116074:	2b00      	cmp	r3, #0
 8116076:	d10a      	bne.n	811608e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8116078:	f04f 0350 	mov.w	r3, #80	; 0x50
 811607c:	f383 8811 	msr	BASEPRI, r3
 8116080:	f3bf 8f6f 	isb	sy
 8116084:	f3bf 8f4f 	dsb	sy
 8116088:	627b      	str	r3, [r7, #36]	; 0x24
}
 811608a:	bf00      	nop
 811608c:	e7fe      	b.n	811608c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 811608e:	687b      	ldr	r3, [r7, #4]
 8116090:	2b00      	cmp	r3, #0
 8116092:	d002      	beq.n	811609a <xQueueGenericCreateStatic+0x52>
 8116094:	68bb      	ldr	r3, [r7, #8]
 8116096:	2b00      	cmp	r3, #0
 8116098:	d001      	beq.n	811609e <xQueueGenericCreateStatic+0x56>
 811609a:	2301      	movs	r3, #1
 811609c:	e000      	b.n	81160a0 <xQueueGenericCreateStatic+0x58>
 811609e:	2300      	movs	r3, #0
 81160a0:	2b00      	cmp	r3, #0
 81160a2:	d10a      	bne.n	81160ba <xQueueGenericCreateStatic+0x72>
	__asm volatile
 81160a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 81160a8:	f383 8811 	msr	BASEPRI, r3
 81160ac:	f3bf 8f6f 	isb	sy
 81160b0:	f3bf 8f4f 	dsb	sy
 81160b4:	623b      	str	r3, [r7, #32]
}
 81160b6:	bf00      	nop
 81160b8:	e7fe      	b.n	81160b8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 81160ba:	687b      	ldr	r3, [r7, #4]
 81160bc:	2b00      	cmp	r3, #0
 81160be:	d102      	bne.n	81160c6 <xQueueGenericCreateStatic+0x7e>
 81160c0:	68bb      	ldr	r3, [r7, #8]
 81160c2:	2b00      	cmp	r3, #0
 81160c4:	d101      	bne.n	81160ca <xQueueGenericCreateStatic+0x82>
 81160c6:	2301      	movs	r3, #1
 81160c8:	e000      	b.n	81160cc <xQueueGenericCreateStatic+0x84>
 81160ca:	2300      	movs	r3, #0
 81160cc:	2b00      	cmp	r3, #0
 81160ce:	d10a      	bne.n	81160e6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 81160d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 81160d4:	f383 8811 	msr	BASEPRI, r3
 81160d8:	f3bf 8f6f 	isb	sy
 81160dc:	f3bf 8f4f 	dsb	sy
 81160e0:	61fb      	str	r3, [r7, #28]
}
 81160e2:	bf00      	nop
 81160e4:	e7fe      	b.n	81160e4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 81160e6:	2350      	movs	r3, #80	; 0x50
 81160e8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 81160ea:	697b      	ldr	r3, [r7, #20]
 81160ec:	2b50      	cmp	r3, #80	; 0x50
 81160ee:	d00a      	beq.n	8116106 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 81160f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 81160f4:	f383 8811 	msr	BASEPRI, r3
 81160f8:	f3bf 8f6f 	isb	sy
 81160fc:	f3bf 8f4f 	dsb	sy
 8116100:	61bb      	str	r3, [r7, #24]
}
 8116102:	bf00      	nop
 8116104:	e7fe      	b.n	8116104 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8116106:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8116108:	683b      	ldr	r3, [r7, #0]
 811610a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 811610c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 811610e:	2b00      	cmp	r3, #0
 8116110:	d00d      	beq.n	811612e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8116112:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8116114:	2201      	movs	r2, #1
 8116116:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 811611a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 811611e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8116120:	9300      	str	r3, [sp, #0]
 8116122:	4613      	mov	r3, r2
 8116124:	687a      	ldr	r2, [r7, #4]
 8116126:	68b9      	ldr	r1, [r7, #8]
 8116128:	68f8      	ldr	r0, [r7, #12]
 811612a:	f000 f83f 	bl	81161ac <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 811612e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8116130:	4618      	mov	r0, r3
 8116132:	3730      	adds	r7, #48	; 0x30
 8116134:	46bd      	mov	sp, r7
 8116136:	bd80      	pop	{r7, pc}

08116138 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8116138:	b580      	push	{r7, lr}
 811613a:	b08a      	sub	sp, #40	; 0x28
 811613c:	af02      	add	r7, sp, #8
 811613e:	60f8      	str	r0, [r7, #12]
 8116140:	60b9      	str	r1, [r7, #8]
 8116142:	4613      	mov	r3, r2
 8116144:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8116146:	68fb      	ldr	r3, [r7, #12]
 8116148:	2b00      	cmp	r3, #0
 811614a:	d10a      	bne.n	8116162 <xQueueGenericCreate+0x2a>
	__asm volatile
 811614c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8116150:	f383 8811 	msr	BASEPRI, r3
 8116154:	f3bf 8f6f 	isb	sy
 8116158:	f3bf 8f4f 	dsb	sy
 811615c:	613b      	str	r3, [r7, #16]
}
 811615e:	bf00      	nop
 8116160:	e7fe      	b.n	8116160 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8116162:	68fb      	ldr	r3, [r7, #12]
 8116164:	68ba      	ldr	r2, [r7, #8]
 8116166:	fb02 f303 	mul.w	r3, r2, r3
 811616a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 811616c:	69fb      	ldr	r3, [r7, #28]
 811616e:	3350      	adds	r3, #80	; 0x50
 8116170:	4618      	mov	r0, r3
 8116172:	f7ff fa15 	bl	81155a0 <pvPortMalloc>
 8116176:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8116178:	69bb      	ldr	r3, [r7, #24]
 811617a:	2b00      	cmp	r3, #0
 811617c:	d011      	beq.n	81161a2 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 811617e:	69bb      	ldr	r3, [r7, #24]
 8116180:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8116182:	697b      	ldr	r3, [r7, #20]
 8116184:	3350      	adds	r3, #80	; 0x50
 8116186:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8116188:	69bb      	ldr	r3, [r7, #24]
 811618a:	2200      	movs	r2, #0
 811618c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8116190:	79fa      	ldrb	r2, [r7, #7]
 8116192:	69bb      	ldr	r3, [r7, #24]
 8116194:	9300      	str	r3, [sp, #0]
 8116196:	4613      	mov	r3, r2
 8116198:	697a      	ldr	r2, [r7, #20]
 811619a:	68b9      	ldr	r1, [r7, #8]
 811619c:	68f8      	ldr	r0, [r7, #12]
 811619e:	f000 f805 	bl	81161ac <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 81161a2:	69bb      	ldr	r3, [r7, #24]
	}
 81161a4:	4618      	mov	r0, r3
 81161a6:	3720      	adds	r7, #32
 81161a8:	46bd      	mov	sp, r7
 81161aa:	bd80      	pop	{r7, pc}

081161ac <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 81161ac:	b580      	push	{r7, lr}
 81161ae:	b084      	sub	sp, #16
 81161b0:	af00      	add	r7, sp, #0
 81161b2:	60f8      	str	r0, [r7, #12]
 81161b4:	60b9      	str	r1, [r7, #8]
 81161b6:	607a      	str	r2, [r7, #4]
 81161b8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 81161ba:	68bb      	ldr	r3, [r7, #8]
 81161bc:	2b00      	cmp	r3, #0
 81161be:	d103      	bne.n	81161c8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 81161c0:	69bb      	ldr	r3, [r7, #24]
 81161c2:	69ba      	ldr	r2, [r7, #24]
 81161c4:	601a      	str	r2, [r3, #0]
 81161c6:	e002      	b.n	81161ce <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 81161c8:	69bb      	ldr	r3, [r7, #24]
 81161ca:	687a      	ldr	r2, [r7, #4]
 81161cc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 81161ce:	69bb      	ldr	r3, [r7, #24]
 81161d0:	68fa      	ldr	r2, [r7, #12]
 81161d2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 81161d4:	69bb      	ldr	r3, [r7, #24]
 81161d6:	68ba      	ldr	r2, [r7, #8]
 81161d8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 81161da:	2101      	movs	r1, #1
 81161dc:	69b8      	ldr	r0, [r7, #24]
 81161de:	f7ff fecb 	bl	8115f78 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 81161e2:	69bb      	ldr	r3, [r7, #24]
 81161e4:	78fa      	ldrb	r2, [r7, #3]
 81161e6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 81161ea:	bf00      	nop
 81161ec:	3710      	adds	r7, #16
 81161ee:	46bd      	mov	sp, r7
 81161f0:	bd80      	pop	{r7, pc}
	...

081161f4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 81161f4:	b580      	push	{r7, lr}
 81161f6:	b08e      	sub	sp, #56	; 0x38
 81161f8:	af00      	add	r7, sp, #0
 81161fa:	60f8      	str	r0, [r7, #12]
 81161fc:	60b9      	str	r1, [r7, #8]
 81161fe:	607a      	str	r2, [r7, #4]
 8116200:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8116202:	2300      	movs	r3, #0
 8116204:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8116206:	68fb      	ldr	r3, [r7, #12]
 8116208:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 811620a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 811620c:	2b00      	cmp	r3, #0
 811620e:	d10a      	bne.n	8116226 <xQueueGenericSend+0x32>
	__asm volatile
 8116210:	f04f 0350 	mov.w	r3, #80	; 0x50
 8116214:	f383 8811 	msr	BASEPRI, r3
 8116218:	f3bf 8f6f 	isb	sy
 811621c:	f3bf 8f4f 	dsb	sy
 8116220:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8116222:	bf00      	nop
 8116224:	e7fe      	b.n	8116224 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8116226:	68bb      	ldr	r3, [r7, #8]
 8116228:	2b00      	cmp	r3, #0
 811622a:	d103      	bne.n	8116234 <xQueueGenericSend+0x40>
 811622c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 811622e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8116230:	2b00      	cmp	r3, #0
 8116232:	d101      	bne.n	8116238 <xQueueGenericSend+0x44>
 8116234:	2301      	movs	r3, #1
 8116236:	e000      	b.n	811623a <xQueueGenericSend+0x46>
 8116238:	2300      	movs	r3, #0
 811623a:	2b00      	cmp	r3, #0
 811623c:	d10a      	bne.n	8116254 <xQueueGenericSend+0x60>
	__asm volatile
 811623e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8116242:	f383 8811 	msr	BASEPRI, r3
 8116246:	f3bf 8f6f 	isb	sy
 811624a:	f3bf 8f4f 	dsb	sy
 811624e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8116250:	bf00      	nop
 8116252:	e7fe      	b.n	8116252 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8116254:	683b      	ldr	r3, [r7, #0]
 8116256:	2b02      	cmp	r3, #2
 8116258:	d103      	bne.n	8116262 <xQueueGenericSend+0x6e>
 811625a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 811625c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 811625e:	2b01      	cmp	r3, #1
 8116260:	d101      	bne.n	8116266 <xQueueGenericSend+0x72>
 8116262:	2301      	movs	r3, #1
 8116264:	e000      	b.n	8116268 <xQueueGenericSend+0x74>
 8116266:	2300      	movs	r3, #0
 8116268:	2b00      	cmp	r3, #0
 811626a:	d10a      	bne.n	8116282 <xQueueGenericSend+0x8e>
	__asm volatile
 811626c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8116270:	f383 8811 	msr	BASEPRI, r3
 8116274:	f3bf 8f6f 	isb	sy
 8116278:	f3bf 8f4f 	dsb	sy
 811627c:	623b      	str	r3, [r7, #32]
}
 811627e:	bf00      	nop
 8116280:	e7fe      	b.n	8116280 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8116282:	f001 fa4f 	bl	8117724 <xTaskGetSchedulerState>
 8116286:	4603      	mov	r3, r0
 8116288:	2b00      	cmp	r3, #0
 811628a:	d102      	bne.n	8116292 <xQueueGenericSend+0x9e>
 811628c:	687b      	ldr	r3, [r7, #4]
 811628e:	2b00      	cmp	r3, #0
 8116290:	d101      	bne.n	8116296 <xQueueGenericSend+0xa2>
 8116292:	2301      	movs	r3, #1
 8116294:	e000      	b.n	8116298 <xQueueGenericSend+0xa4>
 8116296:	2300      	movs	r3, #0
 8116298:	2b00      	cmp	r3, #0
 811629a:	d10a      	bne.n	81162b2 <xQueueGenericSend+0xbe>
	__asm volatile
 811629c:	f04f 0350 	mov.w	r3, #80	; 0x50
 81162a0:	f383 8811 	msr	BASEPRI, r3
 81162a4:	f3bf 8f6f 	isb	sy
 81162a8:	f3bf 8f4f 	dsb	sy
 81162ac:	61fb      	str	r3, [r7, #28]
}
 81162ae:	bf00      	nop
 81162b0:	e7fe      	b.n	81162b0 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 81162b2:	f7ff fd3f 	bl	8115d34 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 81162b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81162b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 81162ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81162bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81162be:	429a      	cmp	r2, r3
 81162c0:	d302      	bcc.n	81162c8 <xQueueGenericSend+0xd4>
 81162c2:	683b      	ldr	r3, [r7, #0]
 81162c4:	2b02      	cmp	r3, #2
 81162c6:	d129      	bne.n	811631c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 81162c8:	683a      	ldr	r2, [r7, #0]
 81162ca:	68b9      	ldr	r1, [r7, #8]
 81162cc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 81162ce:	f000 fa8b 	bl	81167e8 <prvCopyDataToQueue>
 81162d2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 81162d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81162d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81162d8:	2b00      	cmp	r3, #0
 81162da:	d010      	beq.n	81162fe <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 81162dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81162de:	3324      	adds	r3, #36	; 0x24
 81162e0:	4618      	mov	r0, r3
 81162e2:	f001 f861 	bl	81173a8 <xTaskRemoveFromEventList>
 81162e6:	4603      	mov	r3, r0
 81162e8:	2b00      	cmp	r3, #0
 81162ea:	d013      	beq.n	8116314 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 81162ec:	4b3f      	ldr	r3, [pc, #252]	; (81163ec <xQueueGenericSend+0x1f8>)
 81162ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 81162f2:	601a      	str	r2, [r3, #0]
 81162f4:	f3bf 8f4f 	dsb	sy
 81162f8:	f3bf 8f6f 	isb	sy
 81162fc:	e00a      	b.n	8116314 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 81162fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8116300:	2b00      	cmp	r3, #0
 8116302:	d007      	beq.n	8116314 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8116304:	4b39      	ldr	r3, [pc, #228]	; (81163ec <xQueueGenericSend+0x1f8>)
 8116306:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 811630a:	601a      	str	r2, [r3, #0]
 811630c:	f3bf 8f4f 	dsb	sy
 8116310:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8116314:	f7ff fd3e 	bl	8115d94 <vPortExitCritical>
				return pdPASS;
 8116318:	2301      	movs	r3, #1
 811631a:	e063      	b.n	81163e4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 811631c:	687b      	ldr	r3, [r7, #4]
 811631e:	2b00      	cmp	r3, #0
 8116320:	d103      	bne.n	811632a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8116322:	f7ff fd37 	bl	8115d94 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8116326:	2300      	movs	r3, #0
 8116328:	e05c      	b.n	81163e4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 811632a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 811632c:	2b00      	cmp	r3, #0
 811632e:	d106      	bne.n	811633e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8116330:	f107 0314 	add.w	r3, r7, #20
 8116334:	4618      	mov	r0, r3
 8116336:	f001 f89b 	bl	8117470 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 811633a:	2301      	movs	r3, #1
 811633c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 811633e:	f7ff fd29 	bl	8115d94 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8116342:	f000 fdfb 	bl	8116f3c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8116346:	f7ff fcf5 	bl	8115d34 <vPortEnterCritical>
 811634a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 811634c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8116350:	b25b      	sxtb	r3, r3
 8116352:	f1b3 3fff 	cmp.w	r3, #4294967295
 8116356:	d103      	bne.n	8116360 <xQueueGenericSend+0x16c>
 8116358:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 811635a:	2200      	movs	r2, #0
 811635c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8116360:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8116362:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8116366:	b25b      	sxtb	r3, r3
 8116368:	f1b3 3fff 	cmp.w	r3, #4294967295
 811636c:	d103      	bne.n	8116376 <xQueueGenericSend+0x182>
 811636e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8116370:	2200      	movs	r2, #0
 8116372:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8116376:	f7ff fd0d 	bl	8115d94 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 811637a:	1d3a      	adds	r2, r7, #4
 811637c:	f107 0314 	add.w	r3, r7, #20
 8116380:	4611      	mov	r1, r2
 8116382:	4618      	mov	r0, r3
 8116384:	f001 f88a 	bl	811749c <xTaskCheckForTimeOut>
 8116388:	4603      	mov	r3, r0
 811638a:	2b00      	cmp	r3, #0
 811638c:	d124      	bne.n	81163d8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 811638e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8116390:	f000 fb22 	bl	81169d8 <prvIsQueueFull>
 8116394:	4603      	mov	r3, r0
 8116396:	2b00      	cmp	r3, #0
 8116398:	d018      	beq.n	81163cc <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 811639a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 811639c:	3310      	adds	r3, #16
 811639e:	687a      	ldr	r2, [r7, #4]
 81163a0:	4611      	mov	r1, r2
 81163a2:	4618      	mov	r0, r3
 81163a4:	f000 ffb0 	bl	8117308 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 81163a8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 81163aa:	f000 faad 	bl	8116908 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 81163ae:	f000 fdd3 	bl	8116f58 <xTaskResumeAll>
 81163b2:	4603      	mov	r3, r0
 81163b4:	2b00      	cmp	r3, #0
 81163b6:	f47f af7c 	bne.w	81162b2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 81163ba:	4b0c      	ldr	r3, [pc, #48]	; (81163ec <xQueueGenericSend+0x1f8>)
 81163bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 81163c0:	601a      	str	r2, [r3, #0]
 81163c2:	f3bf 8f4f 	dsb	sy
 81163c6:	f3bf 8f6f 	isb	sy
 81163ca:	e772      	b.n	81162b2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 81163cc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 81163ce:	f000 fa9b 	bl	8116908 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 81163d2:	f000 fdc1 	bl	8116f58 <xTaskResumeAll>
 81163d6:	e76c      	b.n	81162b2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 81163d8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 81163da:	f000 fa95 	bl	8116908 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 81163de:	f000 fdbb 	bl	8116f58 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 81163e2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 81163e4:	4618      	mov	r0, r3
 81163e6:	3738      	adds	r7, #56	; 0x38
 81163e8:	46bd      	mov	sp, r7
 81163ea:	bd80      	pop	{r7, pc}
 81163ec:	e000ed04 	.word	0xe000ed04

081163f0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 81163f0:	b580      	push	{r7, lr}
 81163f2:	b090      	sub	sp, #64	; 0x40
 81163f4:	af00      	add	r7, sp, #0
 81163f6:	60f8      	str	r0, [r7, #12]
 81163f8:	60b9      	str	r1, [r7, #8]
 81163fa:	607a      	str	r2, [r7, #4]
 81163fc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 81163fe:	68fb      	ldr	r3, [r7, #12]
 8116400:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8116402:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8116404:	2b00      	cmp	r3, #0
 8116406:	d10a      	bne.n	811641e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8116408:	f04f 0350 	mov.w	r3, #80	; 0x50
 811640c:	f383 8811 	msr	BASEPRI, r3
 8116410:	f3bf 8f6f 	isb	sy
 8116414:	f3bf 8f4f 	dsb	sy
 8116418:	62bb      	str	r3, [r7, #40]	; 0x28
}
 811641a:	bf00      	nop
 811641c:	e7fe      	b.n	811641c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 811641e:	68bb      	ldr	r3, [r7, #8]
 8116420:	2b00      	cmp	r3, #0
 8116422:	d103      	bne.n	811642c <xQueueGenericSendFromISR+0x3c>
 8116424:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8116426:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8116428:	2b00      	cmp	r3, #0
 811642a:	d101      	bne.n	8116430 <xQueueGenericSendFromISR+0x40>
 811642c:	2301      	movs	r3, #1
 811642e:	e000      	b.n	8116432 <xQueueGenericSendFromISR+0x42>
 8116430:	2300      	movs	r3, #0
 8116432:	2b00      	cmp	r3, #0
 8116434:	d10a      	bne.n	811644c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8116436:	f04f 0350 	mov.w	r3, #80	; 0x50
 811643a:	f383 8811 	msr	BASEPRI, r3
 811643e:	f3bf 8f6f 	isb	sy
 8116442:	f3bf 8f4f 	dsb	sy
 8116446:	627b      	str	r3, [r7, #36]	; 0x24
}
 8116448:	bf00      	nop
 811644a:	e7fe      	b.n	811644a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 811644c:	683b      	ldr	r3, [r7, #0]
 811644e:	2b02      	cmp	r3, #2
 8116450:	d103      	bne.n	811645a <xQueueGenericSendFromISR+0x6a>
 8116452:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8116454:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8116456:	2b01      	cmp	r3, #1
 8116458:	d101      	bne.n	811645e <xQueueGenericSendFromISR+0x6e>
 811645a:	2301      	movs	r3, #1
 811645c:	e000      	b.n	8116460 <xQueueGenericSendFromISR+0x70>
 811645e:	2300      	movs	r3, #0
 8116460:	2b00      	cmp	r3, #0
 8116462:	d10a      	bne.n	811647a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8116464:	f04f 0350 	mov.w	r3, #80	; 0x50
 8116468:	f383 8811 	msr	BASEPRI, r3
 811646c:	f3bf 8f6f 	isb	sy
 8116470:	f3bf 8f4f 	dsb	sy
 8116474:	623b      	str	r3, [r7, #32]
}
 8116476:	bf00      	nop
 8116478:	e7fe      	b.n	8116478 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 811647a:	f7ff fd3d 	bl	8115ef8 <vPortValidateInterruptPriority>
	__asm volatile
 811647e:	f3ef 8211 	mrs	r2, BASEPRI
 8116482:	f04f 0350 	mov.w	r3, #80	; 0x50
 8116486:	f383 8811 	msr	BASEPRI, r3
 811648a:	f3bf 8f6f 	isb	sy
 811648e:	f3bf 8f4f 	dsb	sy
 8116492:	61fa      	str	r2, [r7, #28]
 8116494:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 8116496:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8116498:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 811649a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 811649c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 811649e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81164a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81164a2:	429a      	cmp	r2, r3
 81164a4:	d302      	bcc.n	81164ac <xQueueGenericSendFromISR+0xbc>
 81164a6:	683b      	ldr	r3, [r7, #0]
 81164a8:	2b02      	cmp	r3, #2
 81164aa:	d12f      	bne.n	811650c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 81164ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81164ae:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 81164b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 81164b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81164b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81164ba:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 81164bc:	683a      	ldr	r2, [r7, #0]
 81164be:	68b9      	ldr	r1, [r7, #8]
 81164c0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 81164c2:	f000 f991 	bl	81167e8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 81164c6:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 81164ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 81164ce:	d112      	bne.n	81164f6 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 81164d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81164d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81164d4:	2b00      	cmp	r3, #0
 81164d6:	d016      	beq.n	8116506 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 81164d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81164da:	3324      	adds	r3, #36	; 0x24
 81164dc:	4618      	mov	r0, r3
 81164de:	f000 ff63 	bl	81173a8 <xTaskRemoveFromEventList>
 81164e2:	4603      	mov	r3, r0
 81164e4:	2b00      	cmp	r3, #0
 81164e6:	d00e      	beq.n	8116506 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 81164e8:	687b      	ldr	r3, [r7, #4]
 81164ea:	2b00      	cmp	r3, #0
 81164ec:	d00b      	beq.n	8116506 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 81164ee:	687b      	ldr	r3, [r7, #4]
 81164f0:	2201      	movs	r2, #1
 81164f2:	601a      	str	r2, [r3, #0]
 81164f4:	e007      	b.n	8116506 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 81164f6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 81164fa:	3301      	adds	r3, #1
 81164fc:	b2db      	uxtb	r3, r3
 81164fe:	b25a      	sxtb	r2, r3
 8116500:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8116502:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8116506:	2301      	movs	r3, #1
 8116508:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 811650a:	e001      	b.n	8116510 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 811650c:	2300      	movs	r3, #0
 811650e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8116510:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8116512:	617b      	str	r3, [r7, #20]
	__asm volatile
 8116514:	697b      	ldr	r3, [r7, #20]
 8116516:	f383 8811 	msr	BASEPRI, r3
}
 811651a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 811651c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 811651e:	4618      	mov	r0, r3
 8116520:	3740      	adds	r7, #64	; 0x40
 8116522:	46bd      	mov	sp, r7
 8116524:	bd80      	pop	{r7, pc}
	...

08116528 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8116528:	b580      	push	{r7, lr}
 811652a:	b08c      	sub	sp, #48	; 0x30
 811652c:	af00      	add	r7, sp, #0
 811652e:	60f8      	str	r0, [r7, #12]
 8116530:	60b9      	str	r1, [r7, #8]
 8116532:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8116534:	2300      	movs	r3, #0
 8116536:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8116538:	68fb      	ldr	r3, [r7, #12]
 811653a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 811653c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 811653e:	2b00      	cmp	r3, #0
 8116540:	d10a      	bne.n	8116558 <xQueueReceive+0x30>
	__asm volatile
 8116542:	f04f 0350 	mov.w	r3, #80	; 0x50
 8116546:	f383 8811 	msr	BASEPRI, r3
 811654a:	f3bf 8f6f 	isb	sy
 811654e:	f3bf 8f4f 	dsb	sy
 8116552:	623b      	str	r3, [r7, #32]
}
 8116554:	bf00      	nop
 8116556:	e7fe      	b.n	8116556 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8116558:	68bb      	ldr	r3, [r7, #8]
 811655a:	2b00      	cmp	r3, #0
 811655c:	d103      	bne.n	8116566 <xQueueReceive+0x3e>
 811655e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8116560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8116562:	2b00      	cmp	r3, #0
 8116564:	d101      	bne.n	811656a <xQueueReceive+0x42>
 8116566:	2301      	movs	r3, #1
 8116568:	e000      	b.n	811656c <xQueueReceive+0x44>
 811656a:	2300      	movs	r3, #0
 811656c:	2b00      	cmp	r3, #0
 811656e:	d10a      	bne.n	8116586 <xQueueReceive+0x5e>
	__asm volatile
 8116570:	f04f 0350 	mov.w	r3, #80	; 0x50
 8116574:	f383 8811 	msr	BASEPRI, r3
 8116578:	f3bf 8f6f 	isb	sy
 811657c:	f3bf 8f4f 	dsb	sy
 8116580:	61fb      	str	r3, [r7, #28]
}
 8116582:	bf00      	nop
 8116584:	e7fe      	b.n	8116584 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8116586:	f001 f8cd 	bl	8117724 <xTaskGetSchedulerState>
 811658a:	4603      	mov	r3, r0
 811658c:	2b00      	cmp	r3, #0
 811658e:	d102      	bne.n	8116596 <xQueueReceive+0x6e>
 8116590:	687b      	ldr	r3, [r7, #4]
 8116592:	2b00      	cmp	r3, #0
 8116594:	d101      	bne.n	811659a <xQueueReceive+0x72>
 8116596:	2301      	movs	r3, #1
 8116598:	e000      	b.n	811659c <xQueueReceive+0x74>
 811659a:	2300      	movs	r3, #0
 811659c:	2b00      	cmp	r3, #0
 811659e:	d10a      	bne.n	81165b6 <xQueueReceive+0x8e>
	__asm volatile
 81165a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 81165a4:	f383 8811 	msr	BASEPRI, r3
 81165a8:	f3bf 8f6f 	isb	sy
 81165ac:	f3bf 8f4f 	dsb	sy
 81165b0:	61bb      	str	r3, [r7, #24]
}
 81165b2:	bf00      	nop
 81165b4:	e7fe      	b.n	81165b4 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 81165b6:	f7ff fbbd 	bl	8115d34 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 81165ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81165bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81165be:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 81165c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81165c2:	2b00      	cmp	r3, #0
 81165c4:	d01f      	beq.n	8116606 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 81165c6:	68b9      	ldr	r1, [r7, #8]
 81165c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 81165ca:	f000 f977 	bl	81168bc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 81165ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81165d0:	1e5a      	subs	r2, r3, #1
 81165d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81165d4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 81165d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81165d8:	691b      	ldr	r3, [r3, #16]
 81165da:	2b00      	cmp	r3, #0
 81165dc:	d00f      	beq.n	81165fe <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 81165de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81165e0:	3310      	adds	r3, #16
 81165e2:	4618      	mov	r0, r3
 81165e4:	f000 fee0 	bl	81173a8 <xTaskRemoveFromEventList>
 81165e8:	4603      	mov	r3, r0
 81165ea:	2b00      	cmp	r3, #0
 81165ec:	d007      	beq.n	81165fe <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 81165ee:	4b3d      	ldr	r3, [pc, #244]	; (81166e4 <xQueueReceive+0x1bc>)
 81165f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 81165f4:	601a      	str	r2, [r3, #0]
 81165f6:	f3bf 8f4f 	dsb	sy
 81165fa:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 81165fe:	f7ff fbc9 	bl	8115d94 <vPortExitCritical>
				return pdPASS;
 8116602:	2301      	movs	r3, #1
 8116604:	e069      	b.n	81166da <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8116606:	687b      	ldr	r3, [r7, #4]
 8116608:	2b00      	cmp	r3, #0
 811660a:	d103      	bne.n	8116614 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 811660c:	f7ff fbc2 	bl	8115d94 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8116610:	2300      	movs	r3, #0
 8116612:	e062      	b.n	81166da <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8116614:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8116616:	2b00      	cmp	r3, #0
 8116618:	d106      	bne.n	8116628 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 811661a:	f107 0310 	add.w	r3, r7, #16
 811661e:	4618      	mov	r0, r3
 8116620:	f000 ff26 	bl	8117470 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8116624:	2301      	movs	r3, #1
 8116626:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8116628:	f7ff fbb4 	bl	8115d94 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 811662c:	f000 fc86 	bl	8116f3c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8116630:	f7ff fb80 	bl	8115d34 <vPortEnterCritical>
 8116634:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8116636:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 811663a:	b25b      	sxtb	r3, r3
 811663c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8116640:	d103      	bne.n	811664a <xQueueReceive+0x122>
 8116642:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8116644:	2200      	movs	r2, #0
 8116646:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 811664a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 811664c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8116650:	b25b      	sxtb	r3, r3
 8116652:	f1b3 3fff 	cmp.w	r3, #4294967295
 8116656:	d103      	bne.n	8116660 <xQueueReceive+0x138>
 8116658:	6abb      	ldr	r3, [r7, #40]	; 0x28
 811665a:	2200      	movs	r2, #0
 811665c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8116660:	f7ff fb98 	bl	8115d94 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8116664:	1d3a      	adds	r2, r7, #4
 8116666:	f107 0310 	add.w	r3, r7, #16
 811666a:	4611      	mov	r1, r2
 811666c:	4618      	mov	r0, r3
 811666e:	f000 ff15 	bl	811749c <xTaskCheckForTimeOut>
 8116672:	4603      	mov	r3, r0
 8116674:	2b00      	cmp	r3, #0
 8116676:	d123      	bne.n	81166c0 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8116678:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 811667a:	f000 f997 	bl	81169ac <prvIsQueueEmpty>
 811667e:	4603      	mov	r3, r0
 8116680:	2b00      	cmp	r3, #0
 8116682:	d017      	beq.n	81166b4 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8116684:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8116686:	3324      	adds	r3, #36	; 0x24
 8116688:	687a      	ldr	r2, [r7, #4]
 811668a:	4611      	mov	r1, r2
 811668c:	4618      	mov	r0, r3
 811668e:	f000 fe3b 	bl	8117308 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8116692:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8116694:	f000 f938 	bl	8116908 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8116698:	f000 fc5e 	bl	8116f58 <xTaskResumeAll>
 811669c:	4603      	mov	r3, r0
 811669e:	2b00      	cmp	r3, #0
 81166a0:	d189      	bne.n	81165b6 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 81166a2:	4b10      	ldr	r3, [pc, #64]	; (81166e4 <xQueueReceive+0x1bc>)
 81166a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 81166a8:	601a      	str	r2, [r3, #0]
 81166aa:	f3bf 8f4f 	dsb	sy
 81166ae:	f3bf 8f6f 	isb	sy
 81166b2:	e780      	b.n	81165b6 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 81166b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 81166b6:	f000 f927 	bl	8116908 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 81166ba:	f000 fc4d 	bl	8116f58 <xTaskResumeAll>
 81166be:	e77a      	b.n	81165b6 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 81166c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 81166c2:	f000 f921 	bl	8116908 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 81166c6:	f000 fc47 	bl	8116f58 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 81166ca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 81166cc:	f000 f96e 	bl	81169ac <prvIsQueueEmpty>
 81166d0:	4603      	mov	r3, r0
 81166d2:	2b00      	cmp	r3, #0
 81166d4:	f43f af6f 	beq.w	81165b6 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 81166d8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 81166da:	4618      	mov	r0, r3
 81166dc:	3730      	adds	r7, #48	; 0x30
 81166de:	46bd      	mov	sp, r7
 81166e0:	bd80      	pop	{r7, pc}
 81166e2:	bf00      	nop
 81166e4:	e000ed04 	.word	0xe000ed04

081166e8 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 81166e8:	b580      	push	{r7, lr}
 81166ea:	b08e      	sub	sp, #56	; 0x38
 81166ec:	af00      	add	r7, sp, #0
 81166ee:	60f8      	str	r0, [r7, #12]
 81166f0:	60b9      	str	r1, [r7, #8]
 81166f2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 81166f4:	68fb      	ldr	r3, [r7, #12]
 81166f6:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 81166f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81166fa:	2b00      	cmp	r3, #0
 81166fc:	d10a      	bne.n	8116714 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 81166fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8116702:	f383 8811 	msr	BASEPRI, r3
 8116706:	f3bf 8f6f 	isb	sy
 811670a:	f3bf 8f4f 	dsb	sy
 811670e:	623b      	str	r3, [r7, #32]
}
 8116710:	bf00      	nop
 8116712:	e7fe      	b.n	8116712 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8116714:	68bb      	ldr	r3, [r7, #8]
 8116716:	2b00      	cmp	r3, #0
 8116718:	d103      	bne.n	8116722 <xQueueReceiveFromISR+0x3a>
 811671a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 811671c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 811671e:	2b00      	cmp	r3, #0
 8116720:	d101      	bne.n	8116726 <xQueueReceiveFromISR+0x3e>
 8116722:	2301      	movs	r3, #1
 8116724:	e000      	b.n	8116728 <xQueueReceiveFromISR+0x40>
 8116726:	2300      	movs	r3, #0
 8116728:	2b00      	cmp	r3, #0
 811672a:	d10a      	bne.n	8116742 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 811672c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8116730:	f383 8811 	msr	BASEPRI, r3
 8116734:	f3bf 8f6f 	isb	sy
 8116738:	f3bf 8f4f 	dsb	sy
 811673c:	61fb      	str	r3, [r7, #28]
}
 811673e:	bf00      	nop
 8116740:	e7fe      	b.n	8116740 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8116742:	f7ff fbd9 	bl	8115ef8 <vPortValidateInterruptPriority>
	__asm volatile
 8116746:	f3ef 8211 	mrs	r2, BASEPRI
 811674a:	f04f 0350 	mov.w	r3, #80	; 0x50
 811674e:	f383 8811 	msr	BASEPRI, r3
 8116752:	f3bf 8f6f 	isb	sy
 8116756:	f3bf 8f4f 	dsb	sy
 811675a:	61ba      	str	r2, [r7, #24]
 811675c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 811675e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8116760:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8116762:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8116764:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8116766:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8116768:	6abb      	ldr	r3, [r7, #40]	; 0x28
 811676a:	2b00      	cmp	r3, #0
 811676c:	d02f      	beq.n	81167ce <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 811676e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8116770:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8116774:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8116778:	68b9      	ldr	r1, [r7, #8]
 811677a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 811677c:	f000 f89e 	bl	81168bc <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8116780:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8116782:	1e5a      	subs	r2, r3, #1
 8116784:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8116786:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8116788:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 811678c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8116790:	d112      	bne.n	81167b8 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8116792:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8116794:	691b      	ldr	r3, [r3, #16]
 8116796:	2b00      	cmp	r3, #0
 8116798:	d016      	beq.n	81167c8 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 811679a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 811679c:	3310      	adds	r3, #16
 811679e:	4618      	mov	r0, r3
 81167a0:	f000 fe02 	bl	81173a8 <xTaskRemoveFromEventList>
 81167a4:	4603      	mov	r3, r0
 81167a6:	2b00      	cmp	r3, #0
 81167a8:	d00e      	beq.n	81167c8 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 81167aa:	687b      	ldr	r3, [r7, #4]
 81167ac:	2b00      	cmp	r3, #0
 81167ae:	d00b      	beq.n	81167c8 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 81167b0:	687b      	ldr	r3, [r7, #4]
 81167b2:	2201      	movs	r2, #1
 81167b4:	601a      	str	r2, [r3, #0]
 81167b6:	e007      	b.n	81167c8 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 81167b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 81167bc:	3301      	adds	r3, #1
 81167be:	b2db      	uxtb	r3, r3
 81167c0:	b25a      	sxtb	r2, r3
 81167c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81167c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 81167c8:	2301      	movs	r3, #1
 81167ca:	637b      	str	r3, [r7, #52]	; 0x34
 81167cc:	e001      	b.n	81167d2 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 81167ce:	2300      	movs	r3, #0
 81167d0:	637b      	str	r3, [r7, #52]	; 0x34
 81167d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 81167d4:	613b      	str	r3, [r7, #16]
	__asm volatile
 81167d6:	693b      	ldr	r3, [r7, #16]
 81167d8:	f383 8811 	msr	BASEPRI, r3
}
 81167dc:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 81167de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 81167e0:	4618      	mov	r0, r3
 81167e2:	3738      	adds	r7, #56	; 0x38
 81167e4:	46bd      	mov	sp, r7
 81167e6:	bd80      	pop	{r7, pc}

081167e8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 81167e8:	b580      	push	{r7, lr}
 81167ea:	b086      	sub	sp, #24
 81167ec:	af00      	add	r7, sp, #0
 81167ee:	60f8      	str	r0, [r7, #12]
 81167f0:	60b9      	str	r1, [r7, #8]
 81167f2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 81167f4:	2300      	movs	r3, #0
 81167f6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 81167f8:	68fb      	ldr	r3, [r7, #12]
 81167fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81167fc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 81167fe:	68fb      	ldr	r3, [r7, #12]
 8116800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8116802:	2b00      	cmp	r3, #0
 8116804:	d10d      	bne.n	8116822 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8116806:	68fb      	ldr	r3, [r7, #12]
 8116808:	681b      	ldr	r3, [r3, #0]
 811680a:	2b00      	cmp	r3, #0
 811680c:	d14d      	bne.n	81168aa <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 811680e:	68fb      	ldr	r3, [r7, #12]
 8116810:	689b      	ldr	r3, [r3, #8]
 8116812:	4618      	mov	r0, r3
 8116814:	f000 ffa4 	bl	8117760 <xTaskPriorityDisinherit>
 8116818:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 811681a:	68fb      	ldr	r3, [r7, #12]
 811681c:	2200      	movs	r2, #0
 811681e:	609a      	str	r2, [r3, #8]
 8116820:	e043      	b.n	81168aa <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8116822:	687b      	ldr	r3, [r7, #4]
 8116824:	2b00      	cmp	r3, #0
 8116826:	d119      	bne.n	811685c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8116828:	68fb      	ldr	r3, [r7, #12]
 811682a:	6858      	ldr	r0, [r3, #4]
 811682c:	68fb      	ldr	r3, [r7, #12]
 811682e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8116830:	461a      	mov	r2, r3
 8116832:	68b9      	ldr	r1, [r7, #8]
 8116834:	f002 f8c8 	bl	81189c8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8116838:	68fb      	ldr	r3, [r7, #12]
 811683a:	685a      	ldr	r2, [r3, #4]
 811683c:	68fb      	ldr	r3, [r7, #12]
 811683e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8116840:	441a      	add	r2, r3
 8116842:	68fb      	ldr	r3, [r7, #12]
 8116844:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8116846:	68fb      	ldr	r3, [r7, #12]
 8116848:	685a      	ldr	r2, [r3, #4]
 811684a:	68fb      	ldr	r3, [r7, #12]
 811684c:	689b      	ldr	r3, [r3, #8]
 811684e:	429a      	cmp	r2, r3
 8116850:	d32b      	bcc.n	81168aa <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8116852:	68fb      	ldr	r3, [r7, #12]
 8116854:	681a      	ldr	r2, [r3, #0]
 8116856:	68fb      	ldr	r3, [r7, #12]
 8116858:	605a      	str	r2, [r3, #4]
 811685a:	e026      	b.n	81168aa <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 811685c:	68fb      	ldr	r3, [r7, #12]
 811685e:	68d8      	ldr	r0, [r3, #12]
 8116860:	68fb      	ldr	r3, [r7, #12]
 8116862:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8116864:	461a      	mov	r2, r3
 8116866:	68b9      	ldr	r1, [r7, #8]
 8116868:	f002 f8ae 	bl	81189c8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 811686c:	68fb      	ldr	r3, [r7, #12]
 811686e:	68da      	ldr	r2, [r3, #12]
 8116870:	68fb      	ldr	r3, [r7, #12]
 8116872:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8116874:	425b      	negs	r3, r3
 8116876:	441a      	add	r2, r3
 8116878:	68fb      	ldr	r3, [r7, #12]
 811687a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 811687c:	68fb      	ldr	r3, [r7, #12]
 811687e:	68da      	ldr	r2, [r3, #12]
 8116880:	68fb      	ldr	r3, [r7, #12]
 8116882:	681b      	ldr	r3, [r3, #0]
 8116884:	429a      	cmp	r2, r3
 8116886:	d207      	bcs.n	8116898 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8116888:	68fb      	ldr	r3, [r7, #12]
 811688a:	689a      	ldr	r2, [r3, #8]
 811688c:	68fb      	ldr	r3, [r7, #12]
 811688e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8116890:	425b      	negs	r3, r3
 8116892:	441a      	add	r2, r3
 8116894:	68fb      	ldr	r3, [r7, #12]
 8116896:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8116898:	687b      	ldr	r3, [r7, #4]
 811689a:	2b02      	cmp	r3, #2
 811689c:	d105      	bne.n	81168aa <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 811689e:	693b      	ldr	r3, [r7, #16]
 81168a0:	2b00      	cmp	r3, #0
 81168a2:	d002      	beq.n	81168aa <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 81168a4:	693b      	ldr	r3, [r7, #16]
 81168a6:	3b01      	subs	r3, #1
 81168a8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 81168aa:	693b      	ldr	r3, [r7, #16]
 81168ac:	1c5a      	adds	r2, r3, #1
 81168ae:	68fb      	ldr	r3, [r7, #12]
 81168b0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 81168b2:	697b      	ldr	r3, [r7, #20]
}
 81168b4:	4618      	mov	r0, r3
 81168b6:	3718      	adds	r7, #24
 81168b8:	46bd      	mov	sp, r7
 81168ba:	bd80      	pop	{r7, pc}

081168bc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 81168bc:	b580      	push	{r7, lr}
 81168be:	b082      	sub	sp, #8
 81168c0:	af00      	add	r7, sp, #0
 81168c2:	6078      	str	r0, [r7, #4]
 81168c4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 81168c6:	687b      	ldr	r3, [r7, #4]
 81168c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81168ca:	2b00      	cmp	r3, #0
 81168cc:	d018      	beq.n	8116900 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 81168ce:	687b      	ldr	r3, [r7, #4]
 81168d0:	68da      	ldr	r2, [r3, #12]
 81168d2:	687b      	ldr	r3, [r7, #4]
 81168d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81168d6:	441a      	add	r2, r3
 81168d8:	687b      	ldr	r3, [r7, #4]
 81168da:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 81168dc:	687b      	ldr	r3, [r7, #4]
 81168de:	68da      	ldr	r2, [r3, #12]
 81168e0:	687b      	ldr	r3, [r7, #4]
 81168e2:	689b      	ldr	r3, [r3, #8]
 81168e4:	429a      	cmp	r2, r3
 81168e6:	d303      	bcc.n	81168f0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 81168e8:	687b      	ldr	r3, [r7, #4]
 81168ea:	681a      	ldr	r2, [r3, #0]
 81168ec:	687b      	ldr	r3, [r7, #4]
 81168ee:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 81168f0:	687b      	ldr	r3, [r7, #4]
 81168f2:	68d9      	ldr	r1, [r3, #12]
 81168f4:	687b      	ldr	r3, [r7, #4]
 81168f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81168f8:	461a      	mov	r2, r3
 81168fa:	6838      	ldr	r0, [r7, #0]
 81168fc:	f002 f864 	bl	81189c8 <memcpy>
	}
}
 8116900:	bf00      	nop
 8116902:	3708      	adds	r7, #8
 8116904:	46bd      	mov	sp, r7
 8116906:	bd80      	pop	{r7, pc}

08116908 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8116908:	b580      	push	{r7, lr}
 811690a:	b084      	sub	sp, #16
 811690c:	af00      	add	r7, sp, #0
 811690e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8116910:	f7ff fa10 	bl	8115d34 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8116914:	687b      	ldr	r3, [r7, #4]
 8116916:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 811691a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 811691c:	e011      	b.n	8116942 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 811691e:	687b      	ldr	r3, [r7, #4]
 8116920:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8116922:	2b00      	cmp	r3, #0
 8116924:	d012      	beq.n	811694c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8116926:	687b      	ldr	r3, [r7, #4]
 8116928:	3324      	adds	r3, #36	; 0x24
 811692a:	4618      	mov	r0, r3
 811692c:	f000 fd3c 	bl	81173a8 <xTaskRemoveFromEventList>
 8116930:	4603      	mov	r3, r0
 8116932:	2b00      	cmp	r3, #0
 8116934:	d001      	beq.n	811693a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8116936:	f000 fe13 	bl	8117560 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 811693a:	7bfb      	ldrb	r3, [r7, #15]
 811693c:	3b01      	subs	r3, #1
 811693e:	b2db      	uxtb	r3, r3
 8116940:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8116942:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8116946:	2b00      	cmp	r3, #0
 8116948:	dce9      	bgt.n	811691e <prvUnlockQueue+0x16>
 811694a:	e000      	b.n	811694e <prvUnlockQueue+0x46>
					break;
 811694c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 811694e:	687b      	ldr	r3, [r7, #4]
 8116950:	22ff      	movs	r2, #255	; 0xff
 8116952:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8116956:	f7ff fa1d 	bl	8115d94 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 811695a:	f7ff f9eb 	bl	8115d34 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 811695e:	687b      	ldr	r3, [r7, #4]
 8116960:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8116964:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8116966:	e011      	b.n	811698c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8116968:	687b      	ldr	r3, [r7, #4]
 811696a:	691b      	ldr	r3, [r3, #16]
 811696c:	2b00      	cmp	r3, #0
 811696e:	d012      	beq.n	8116996 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8116970:	687b      	ldr	r3, [r7, #4]
 8116972:	3310      	adds	r3, #16
 8116974:	4618      	mov	r0, r3
 8116976:	f000 fd17 	bl	81173a8 <xTaskRemoveFromEventList>
 811697a:	4603      	mov	r3, r0
 811697c:	2b00      	cmp	r3, #0
 811697e:	d001      	beq.n	8116984 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8116980:	f000 fdee 	bl	8117560 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8116984:	7bbb      	ldrb	r3, [r7, #14]
 8116986:	3b01      	subs	r3, #1
 8116988:	b2db      	uxtb	r3, r3
 811698a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 811698c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8116990:	2b00      	cmp	r3, #0
 8116992:	dce9      	bgt.n	8116968 <prvUnlockQueue+0x60>
 8116994:	e000      	b.n	8116998 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8116996:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8116998:	687b      	ldr	r3, [r7, #4]
 811699a:	22ff      	movs	r2, #255	; 0xff
 811699c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 81169a0:	f7ff f9f8 	bl	8115d94 <vPortExitCritical>
}
 81169a4:	bf00      	nop
 81169a6:	3710      	adds	r7, #16
 81169a8:	46bd      	mov	sp, r7
 81169aa:	bd80      	pop	{r7, pc}

081169ac <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 81169ac:	b580      	push	{r7, lr}
 81169ae:	b084      	sub	sp, #16
 81169b0:	af00      	add	r7, sp, #0
 81169b2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 81169b4:	f7ff f9be 	bl	8115d34 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 81169b8:	687b      	ldr	r3, [r7, #4]
 81169ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81169bc:	2b00      	cmp	r3, #0
 81169be:	d102      	bne.n	81169c6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 81169c0:	2301      	movs	r3, #1
 81169c2:	60fb      	str	r3, [r7, #12]
 81169c4:	e001      	b.n	81169ca <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 81169c6:	2300      	movs	r3, #0
 81169c8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 81169ca:	f7ff f9e3 	bl	8115d94 <vPortExitCritical>

	return xReturn;
 81169ce:	68fb      	ldr	r3, [r7, #12]
}
 81169d0:	4618      	mov	r0, r3
 81169d2:	3710      	adds	r7, #16
 81169d4:	46bd      	mov	sp, r7
 81169d6:	bd80      	pop	{r7, pc}

081169d8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 81169d8:	b580      	push	{r7, lr}
 81169da:	b084      	sub	sp, #16
 81169dc:	af00      	add	r7, sp, #0
 81169de:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 81169e0:	f7ff f9a8 	bl	8115d34 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 81169e4:	687b      	ldr	r3, [r7, #4]
 81169e6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 81169e8:	687b      	ldr	r3, [r7, #4]
 81169ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81169ec:	429a      	cmp	r2, r3
 81169ee:	d102      	bne.n	81169f6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 81169f0:	2301      	movs	r3, #1
 81169f2:	60fb      	str	r3, [r7, #12]
 81169f4:	e001      	b.n	81169fa <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 81169f6:	2300      	movs	r3, #0
 81169f8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 81169fa:	f7ff f9cb 	bl	8115d94 <vPortExitCritical>

	return xReturn;
 81169fe:	68fb      	ldr	r3, [r7, #12]
}
 8116a00:	4618      	mov	r0, r3
 8116a02:	3710      	adds	r7, #16
 8116a04:	46bd      	mov	sp, r7
 8116a06:	bd80      	pop	{r7, pc}

08116a08 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8116a08:	b480      	push	{r7}
 8116a0a:	b085      	sub	sp, #20
 8116a0c:	af00      	add	r7, sp, #0
 8116a0e:	6078      	str	r0, [r7, #4]
 8116a10:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8116a12:	2300      	movs	r3, #0
 8116a14:	60fb      	str	r3, [r7, #12]
 8116a16:	e014      	b.n	8116a42 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8116a18:	4a0f      	ldr	r2, [pc, #60]	; (8116a58 <vQueueAddToRegistry+0x50>)
 8116a1a:	68fb      	ldr	r3, [r7, #12]
 8116a1c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8116a20:	2b00      	cmp	r3, #0
 8116a22:	d10b      	bne.n	8116a3c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8116a24:	490c      	ldr	r1, [pc, #48]	; (8116a58 <vQueueAddToRegistry+0x50>)
 8116a26:	68fb      	ldr	r3, [r7, #12]
 8116a28:	683a      	ldr	r2, [r7, #0]
 8116a2a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8116a2e:	4a0a      	ldr	r2, [pc, #40]	; (8116a58 <vQueueAddToRegistry+0x50>)
 8116a30:	68fb      	ldr	r3, [r7, #12]
 8116a32:	00db      	lsls	r3, r3, #3
 8116a34:	4413      	add	r3, r2
 8116a36:	687a      	ldr	r2, [r7, #4]
 8116a38:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8116a3a:	e006      	b.n	8116a4a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8116a3c:	68fb      	ldr	r3, [r7, #12]
 8116a3e:	3301      	adds	r3, #1
 8116a40:	60fb      	str	r3, [r7, #12]
 8116a42:	68fb      	ldr	r3, [r7, #12]
 8116a44:	2b07      	cmp	r3, #7
 8116a46:	d9e7      	bls.n	8116a18 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8116a48:	bf00      	nop
 8116a4a:	bf00      	nop
 8116a4c:	3714      	adds	r7, #20
 8116a4e:	46bd      	mov	sp, r7
 8116a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8116a54:	4770      	bx	lr
 8116a56:	bf00      	nop
 8116a58:	1000761c 	.word	0x1000761c

08116a5c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8116a5c:	b580      	push	{r7, lr}
 8116a5e:	b086      	sub	sp, #24
 8116a60:	af00      	add	r7, sp, #0
 8116a62:	60f8      	str	r0, [r7, #12]
 8116a64:	60b9      	str	r1, [r7, #8]
 8116a66:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8116a68:	68fb      	ldr	r3, [r7, #12]
 8116a6a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8116a6c:	f7ff f962 	bl	8115d34 <vPortEnterCritical>
 8116a70:	697b      	ldr	r3, [r7, #20]
 8116a72:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8116a76:	b25b      	sxtb	r3, r3
 8116a78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8116a7c:	d103      	bne.n	8116a86 <vQueueWaitForMessageRestricted+0x2a>
 8116a7e:	697b      	ldr	r3, [r7, #20]
 8116a80:	2200      	movs	r2, #0
 8116a82:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8116a86:	697b      	ldr	r3, [r7, #20]
 8116a88:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8116a8c:	b25b      	sxtb	r3, r3
 8116a8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8116a92:	d103      	bne.n	8116a9c <vQueueWaitForMessageRestricted+0x40>
 8116a94:	697b      	ldr	r3, [r7, #20]
 8116a96:	2200      	movs	r2, #0
 8116a98:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8116a9c:	f7ff f97a 	bl	8115d94 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8116aa0:	697b      	ldr	r3, [r7, #20]
 8116aa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8116aa4:	2b00      	cmp	r3, #0
 8116aa6:	d106      	bne.n	8116ab6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8116aa8:	697b      	ldr	r3, [r7, #20]
 8116aaa:	3324      	adds	r3, #36	; 0x24
 8116aac:	687a      	ldr	r2, [r7, #4]
 8116aae:	68b9      	ldr	r1, [r7, #8]
 8116ab0:	4618      	mov	r0, r3
 8116ab2:	f000 fc4d 	bl	8117350 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8116ab6:	6978      	ldr	r0, [r7, #20]
 8116ab8:	f7ff ff26 	bl	8116908 <prvUnlockQueue>
	}
 8116abc:	bf00      	nop
 8116abe:	3718      	adds	r7, #24
 8116ac0:	46bd      	mov	sp, r7
 8116ac2:	bd80      	pop	{r7, pc}

08116ac4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8116ac4:	b580      	push	{r7, lr}
 8116ac6:	b08e      	sub	sp, #56	; 0x38
 8116ac8:	af04      	add	r7, sp, #16
 8116aca:	60f8      	str	r0, [r7, #12]
 8116acc:	60b9      	str	r1, [r7, #8]
 8116ace:	607a      	str	r2, [r7, #4]
 8116ad0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8116ad2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8116ad4:	2b00      	cmp	r3, #0
 8116ad6:	d10a      	bne.n	8116aee <xTaskCreateStatic+0x2a>
	__asm volatile
 8116ad8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8116adc:	f383 8811 	msr	BASEPRI, r3
 8116ae0:	f3bf 8f6f 	isb	sy
 8116ae4:	f3bf 8f4f 	dsb	sy
 8116ae8:	623b      	str	r3, [r7, #32]
}
 8116aea:	bf00      	nop
 8116aec:	e7fe      	b.n	8116aec <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8116aee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8116af0:	2b00      	cmp	r3, #0
 8116af2:	d10a      	bne.n	8116b0a <xTaskCreateStatic+0x46>
	__asm volatile
 8116af4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8116af8:	f383 8811 	msr	BASEPRI, r3
 8116afc:	f3bf 8f6f 	isb	sy
 8116b00:	f3bf 8f4f 	dsb	sy
 8116b04:	61fb      	str	r3, [r7, #28]
}
 8116b06:	bf00      	nop
 8116b08:	e7fe      	b.n	8116b08 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8116b0a:	235c      	movs	r3, #92	; 0x5c
 8116b0c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8116b0e:	693b      	ldr	r3, [r7, #16]
 8116b10:	2b5c      	cmp	r3, #92	; 0x5c
 8116b12:	d00a      	beq.n	8116b2a <xTaskCreateStatic+0x66>
	__asm volatile
 8116b14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8116b18:	f383 8811 	msr	BASEPRI, r3
 8116b1c:	f3bf 8f6f 	isb	sy
 8116b20:	f3bf 8f4f 	dsb	sy
 8116b24:	61bb      	str	r3, [r7, #24]
}
 8116b26:	bf00      	nop
 8116b28:	e7fe      	b.n	8116b28 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8116b2a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8116b2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8116b2e:	2b00      	cmp	r3, #0
 8116b30:	d01e      	beq.n	8116b70 <xTaskCreateStatic+0xac>
 8116b32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8116b34:	2b00      	cmp	r3, #0
 8116b36:	d01b      	beq.n	8116b70 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8116b38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8116b3a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8116b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8116b3e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8116b40:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8116b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8116b44:	2202      	movs	r2, #2
 8116b46:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8116b4a:	2300      	movs	r3, #0
 8116b4c:	9303      	str	r3, [sp, #12]
 8116b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8116b50:	9302      	str	r3, [sp, #8]
 8116b52:	f107 0314 	add.w	r3, r7, #20
 8116b56:	9301      	str	r3, [sp, #4]
 8116b58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8116b5a:	9300      	str	r3, [sp, #0]
 8116b5c:	683b      	ldr	r3, [r7, #0]
 8116b5e:	687a      	ldr	r2, [r7, #4]
 8116b60:	68b9      	ldr	r1, [r7, #8]
 8116b62:	68f8      	ldr	r0, [r7, #12]
 8116b64:	f000 f850 	bl	8116c08 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8116b68:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8116b6a:	f000 f8dd 	bl	8116d28 <prvAddNewTaskToReadyList>
 8116b6e:	e001      	b.n	8116b74 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8116b70:	2300      	movs	r3, #0
 8116b72:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8116b74:	697b      	ldr	r3, [r7, #20]
	}
 8116b76:	4618      	mov	r0, r3
 8116b78:	3728      	adds	r7, #40	; 0x28
 8116b7a:	46bd      	mov	sp, r7
 8116b7c:	bd80      	pop	{r7, pc}

08116b7e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8116b7e:	b580      	push	{r7, lr}
 8116b80:	b08c      	sub	sp, #48	; 0x30
 8116b82:	af04      	add	r7, sp, #16
 8116b84:	60f8      	str	r0, [r7, #12]
 8116b86:	60b9      	str	r1, [r7, #8]
 8116b88:	603b      	str	r3, [r7, #0]
 8116b8a:	4613      	mov	r3, r2
 8116b8c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8116b8e:	88fb      	ldrh	r3, [r7, #6]
 8116b90:	009b      	lsls	r3, r3, #2
 8116b92:	4618      	mov	r0, r3
 8116b94:	f7fe fd04 	bl	81155a0 <pvPortMalloc>
 8116b98:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8116b9a:	697b      	ldr	r3, [r7, #20]
 8116b9c:	2b00      	cmp	r3, #0
 8116b9e:	d00e      	beq.n	8116bbe <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8116ba0:	205c      	movs	r0, #92	; 0x5c
 8116ba2:	f7fe fcfd 	bl	81155a0 <pvPortMalloc>
 8116ba6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8116ba8:	69fb      	ldr	r3, [r7, #28]
 8116baa:	2b00      	cmp	r3, #0
 8116bac:	d003      	beq.n	8116bb6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8116bae:	69fb      	ldr	r3, [r7, #28]
 8116bb0:	697a      	ldr	r2, [r7, #20]
 8116bb2:	631a      	str	r2, [r3, #48]	; 0x30
 8116bb4:	e005      	b.n	8116bc2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8116bb6:	6978      	ldr	r0, [r7, #20]
 8116bb8:	f7fe fdbe 	bl	8115738 <vPortFree>
 8116bbc:	e001      	b.n	8116bc2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8116bbe:	2300      	movs	r3, #0
 8116bc0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8116bc2:	69fb      	ldr	r3, [r7, #28]
 8116bc4:	2b00      	cmp	r3, #0
 8116bc6:	d017      	beq.n	8116bf8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8116bc8:	69fb      	ldr	r3, [r7, #28]
 8116bca:	2200      	movs	r2, #0
 8116bcc:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8116bd0:	88fa      	ldrh	r2, [r7, #6]
 8116bd2:	2300      	movs	r3, #0
 8116bd4:	9303      	str	r3, [sp, #12]
 8116bd6:	69fb      	ldr	r3, [r7, #28]
 8116bd8:	9302      	str	r3, [sp, #8]
 8116bda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8116bdc:	9301      	str	r3, [sp, #4]
 8116bde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8116be0:	9300      	str	r3, [sp, #0]
 8116be2:	683b      	ldr	r3, [r7, #0]
 8116be4:	68b9      	ldr	r1, [r7, #8]
 8116be6:	68f8      	ldr	r0, [r7, #12]
 8116be8:	f000 f80e 	bl	8116c08 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8116bec:	69f8      	ldr	r0, [r7, #28]
 8116bee:	f000 f89b 	bl	8116d28 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8116bf2:	2301      	movs	r3, #1
 8116bf4:	61bb      	str	r3, [r7, #24]
 8116bf6:	e002      	b.n	8116bfe <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8116bf8:	f04f 33ff 	mov.w	r3, #4294967295
 8116bfc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8116bfe:	69bb      	ldr	r3, [r7, #24]
	}
 8116c00:	4618      	mov	r0, r3
 8116c02:	3720      	adds	r7, #32
 8116c04:	46bd      	mov	sp, r7
 8116c06:	bd80      	pop	{r7, pc}

08116c08 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8116c08:	b580      	push	{r7, lr}
 8116c0a:	b088      	sub	sp, #32
 8116c0c:	af00      	add	r7, sp, #0
 8116c0e:	60f8      	str	r0, [r7, #12]
 8116c10:	60b9      	str	r1, [r7, #8]
 8116c12:	607a      	str	r2, [r7, #4]
 8116c14:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8116c16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8116c18:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8116c1a:	687b      	ldr	r3, [r7, #4]
 8116c1c:	009b      	lsls	r3, r3, #2
 8116c1e:	461a      	mov	r2, r3
 8116c20:	21a5      	movs	r1, #165	; 0xa5
 8116c22:	f001 fedf 	bl	81189e4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8116c26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8116c28:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8116c2a:	687b      	ldr	r3, [r7, #4]
 8116c2c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8116c30:	3b01      	subs	r3, #1
 8116c32:	009b      	lsls	r3, r3, #2
 8116c34:	4413      	add	r3, r2
 8116c36:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8116c38:	69bb      	ldr	r3, [r7, #24]
 8116c3a:	f023 0307 	bic.w	r3, r3, #7
 8116c3e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8116c40:	69bb      	ldr	r3, [r7, #24]
 8116c42:	f003 0307 	and.w	r3, r3, #7
 8116c46:	2b00      	cmp	r3, #0
 8116c48:	d00a      	beq.n	8116c60 <prvInitialiseNewTask+0x58>
	__asm volatile
 8116c4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8116c4e:	f383 8811 	msr	BASEPRI, r3
 8116c52:	f3bf 8f6f 	isb	sy
 8116c56:	f3bf 8f4f 	dsb	sy
 8116c5a:	617b      	str	r3, [r7, #20]
}
 8116c5c:	bf00      	nop
 8116c5e:	e7fe      	b.n	8116c5e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8116c60:	68bb      	ldr	r3, [r7, #8]
 8116c62:	2b00      	cmp	r3, #0
 8116c64:	d01f      	beq.n	8116ca6 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8116c66:	2300      	movs	r3, #0
 8116c68:	61fb      	str	r3, [r7, #28]
 8116c6a:	e012      	b.n	8116c92 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8116c6c:	68ba      	ldr	r2, [r7, #8]
 8116c6e:	69fb      	ldr	r3, [r7, #28]
 8116c70:	4413      	add	r3, r2
 8116c72:	7819      	ldrb	r1, [r3, #0]
 8116c74:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8116c76:	69fb      	ldr	r3, [r7, #28]
 8116c78:	4413      	add	r3, r2
 8116c7a:	3334      	adds	r3, #52	; 0x34
 8116c7c:	460a      	mov	r2, r1
 8116c7e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8116c80:	68ba      	ldr	r2, [r7, #8]
 8116c82:	69fb      	ldr	r3, [r7, #28]
 8116c84:	4413      	add	r3, r2
 8116c86:	781b      	ldrb	r3, [r3, #0]
 8116c88:	2b00      	cmp	r3, #0
 8116c8a:	d006      	beq.n	8116c9a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8116c8c:	69fb      	ldr	r3, [r7, #28]
 8116c8e:	3301      	adds	r3, #1
 8116c90:	61fb      	str	r3, [r7, #28]
 8116c92:	69fb      	ldr	r3, [r7, #28]
 8116c94:	2b0f      	cmp	r3, #15
 8116c96:	d9e9      	bls.n	8116c6c <prvInitialiseNewTask+0x64>
 8116c98:	e000      	b.n	8116c9c <prvInitialiseNewTask+0x94>
			{
				break;
 8116c9a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8116c9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8116c9e:	2200      	movs	r2, #0
 8116ca0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8116ca4:	e003      	b.n	8116cae <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8116ca6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8116ca8:	2200      	movs	r2, #0
 8116caa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8116cae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8116cb0:	2b37      	cmp	r3, #55	; 0x37
 8116cb2:	d901      	bls.n	8116cb8 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8116cb4:	2337      	movs	r3, #55	; 0x37
 8116cb6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8116cb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8116cba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8116cbc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8116cbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8116cc0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8116cc2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8116cc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8116cc6:	2200      	movs	r2, #0
 8116cc8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8116cca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8116ccc:	3304      	adds	r3, #4
 8116cce:	4618      	mov	r0, r3
 8116cd0:	f7fe fe70 	bl	81159b4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8116cd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8116cd6:	3318      	adds	r3, #24
 8116cd8:	4618      	mov	r0, r3
 8116cda:	f7fe fe6b 	bl	81159b4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8116cde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8116ce0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8116ce2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8116ce4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8116ce6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8116cea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8116cec:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8116cee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8116cf0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8116cf2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8116cf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8116cf6:	2200      	movs	r2, #0
 8116cf8:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8116cfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8116cfc:	2200      	movs	r2, #0
 8116cfe:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8116d02:	683a      	ldr	r2, [r7, #0]
 8116d04:	68f9      	ldr	r1, [r7, #12]
 8116d06:	69b8      	ldr	r0, [r7, #24]
 8116d08:	f7fe fee8 	bl	8115adc <pxPortInitialiseStack>
 8116d0c:	4602      	mov	r2, r0
 8116d0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8116d10:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8116d12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8116d14:	2b00      	cmp	r3, #0
 8116d16:	d002      	beq.n	8116d1e <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8116d18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8116d1a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8116d1c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8116d1e:	bf00      	nop
 8116d20:	3720      	adds	r7, #32
 8116d22:	46bd      	mov	sp, r7
 8116d24:	bd80      	pop	{r7, pc}
	...

08116d28 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8116d28:	b580      	push	{r7, lr}
 8116d2a:	b082      	sub	sp, #8
 8116d2c:	af00      	add	r7, sp, #0
 8116d2e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8116d30:	f7ff f800 	bl	8115d34 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8116d34:	4b2d      	ldr	r3, [pc, #180]	; (8116dec <prvAddNewTaskToReadyList+0xc4>)
 8116d36:	681b      	ldr	r3, [r3, #0]
 8116d38:	3301      	adds	r3, #1
 8116d3a:	4a2c      	ldr	r2, [pc, #176]	; (8116dec <prvAddNewTaskToReadyList+0xc4>)
 8116d3c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8116d3e:	4b2c      	ldr	r3, [pc, #176]	; (8116df0 <prvAddNewTaskToReadyList+0xc8>)
 8116d40:	681b      	ldr	r3, [r3, #0]
 8116d42:	2b00      	cmp	r3, #0
 8116d44:	d109      	bne.n	8116d5a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8116d46:	4a2a      	ldr	r2, [pc, #168]	; (8116df0 <prvAddNewTaskToReadyList+0xc8>)
 8116d48:	687b      	ldr	r3, [r7, #4]
 8116d4a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8116d4c:	4b27      	ldr	r3, [pc, #156]	; (8116dec <prvAddNewTaskToReadyList+0xc4>)
 8116d4e:	681b      	ldr	r3, [r3, #0]
 8116d50:	2b01      	cmp	r3, #1
 8116d52:	d110      	bne.n	8116d76 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8116d54:	f000 fc28 	bl	81175a8 <prvInitialiseTaskLists>
 8116d58:	e00d      	b.n	8116d76 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8116d5a:	4b26      	ldr	r3, [pc, #152]	; (8116df4 <prvAddNewTaskToReadyList+0xcc>)
 8116d5c:	681b      	ldr	r3, [r3, #0]
 8116d5e:	2b00      	cmp	r3, #0
 8116d60:	d109      	bne.n	8116d76 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8116d62:	4b23      	ldr	r3, [pc, #140]	; (8116df0 <prvAddNewTaskToReadyList+0xc8>)
 8116d64:	681b      	ldr	r3, [r3, #0]
 8116d66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8116d68:	687b      	ldr	r3, [r7, #4]
 8116d6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8116d6c:	429a      	cmp	r2, r3
 8116d6e:	d802      	bhi.n	8116d76 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8116d70:	4a1f      	ldr	r2, [pc, #124]	; (8116df0 <prvAddNewTaskToReadyList+0xc8>)
 8116d72:	687b      	ldr	r3, [r7, #4]
 8116d74:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8116d76:	4b20      	ldr	r3, [pc, #128]	; (8116df8 <prvAddNewTaskToReadyList+0xd0>)
 8116d78:	681b      	ldr	r3, [r3, #0]
 8116d7a:	3301      	adds	r3, #1
 8116d7c:	4a1e      	ldr	r2, [pc, #120]	; (8116df8 <prvAddNewTaskToReadyList+0xd0>)
 8116d7e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8116d80:	4b1d      	ldr	r3, [pc, #116]	; (8116df8 <prvAddNewTaskToReadyList+0xd0>)
 8116d82:	681a      	ldr	r2, [r3, #0]
 8116d84:	687b      	ldr	r3, [r7, #4]
 8116d86:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8116d88:	687b      	ldr	r3, [r7, #4]
 8116d8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8116d8c:	4b1b      	ldr	r3, [pc, #108]	; (8116dfc <prvAddNewTaskToReadyList+0xd4>)
 8116d8e:	681b      	ldr	r3, [r3, #0]
 8116d90:	429a      	cmp	r2, r3
 8116d92:	d903      	bls.n	8116d9c <prvAddNewTaskToReadyList+0x74>
 8116d94:	687b      	ldr	r3, [r7, #4]
 8116d96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8116d98:	4a18      	ldr	r2, [pc, #96]	; (8116dfc <prvAddNewTaskToReadyList+0xd4>)
 8116d9a:	6013      	str	r3, [r2, #0]
 8116d9c:	687b      	ldr	r3, [r7, #4]
 8116d9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8116da0:	4613      	mov	r3, r2
 8116da2:	009b      	lsls	r3, r3, #2
 8116da4:	4413      	add	r3, r2
 8116da6:	009b      	lsls	r3, r3, #2
 8116da8:	4a15      	ldr	r2, [pc, #84]	; (8116e00 <prvAddNewTaskToReadyList+0xd8>)
 8116daa:	441a      	add	r2, r3
 8116dac:	687b      	ldr	r3, [r7, #4]
 8116dae:	3304      	adds	r3, #4
 8116db0:	4619      	mov	r1, r3
 8116db2:	4610      	mov	r0, r2
 8116db4:	f7fe fe0b 	bl	81159ce <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8116db8:	f7fe ffec 	bl	8115d94 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8116dbc:	4b0d      	ldr	r3, [pc, #52]	; (8116df4 <prvAddNewTaskToReadyList+0xcc>)
 8116dbe:	681b      	ldr	r3, [r3, #0]
 8116dc0:	2b00      	cmp	r3, #0
 8116dc2:	d00e      	beq.n	8116de2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8116dc4:	4b0a      	ldr	r3, [pc, #40]	; (8116df0 <prvAddNewTaskToReadyList+0xc8>)
 8116dc6:	681b      	ldr	r3, [r3, #0]
 8116dc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8116dca:	687b      	ldr	r3, [r7, #4]
 8116dcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8116dce:	429a      	cmp	r2, r3
 8116dd0:	d207      	bcs.n	8116de2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8116dd2:	4b0c      	ldr	r3, [pc, #48]	; (8116e04 <prvAddNewTaskToReadyList+0xdc>)
 8116dd4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8116dd8:	601a      	str	r2, [r3, #0]
 8116dda:	f3bf 8f4f 	dsb	sy
 8116dde:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8116de2:	bf00      	nop
 8116de4:	3708      	adds	r7, #8
 8116de6:	46bd      	mov	sp, r7
 8116de8:	bd80      	pop	{r7, pc}
 8116dea:	bf00      	nop
 8116dec:	10004b50 	.word	0x10004b50
 8116df0:	1000467c 	.word	0x1000467c
 8116df4:	10004b5c 	.word	0x10004b5c
 8116df8:	10004b6c 	.word	0x10004b6c
 8116dfc:	10004b58 	.word	0x10004b58
 8116e00:	10004680 	.word	0x10004680
 8116e04:	e000ed04 	.word	0xe000ed04

08116e08 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8116e08:	b580      	push	{r7, lr}
 8116e0a:	b084      	sub	sp, #16
 8116e0c:	af00      	add	r7, sp, #0
 8116e0e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8116e10:	2300      	movs	r3, #0
 8116e12:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8116e14:	687b      	ldr	r3, [r7, #4]
 8116e16:	2b00      	cmp	r3, #0
 8116e18:	d017      	beq.n	8116e4a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8116e1a:	4b13      	ldr	r3, [pc, #76]	; (8116e68 <vTaskDelay+0x60>)
 8116e1c:	681b      	ldr	r3, [r3, #0]
 8116e1e:	2b00      	cmp	r3, #0
 8116e20:	d00a      	beq.n	8116e38 <vTaskDelay+0x30>
	__asm volatile
 8116e22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8116e26:	f383 8811 	msr	BASEPRI, r3
 8116e2a:	f3bf 8f6f 	isb	sy
 8116e2e:	f3bf 8f4f 	dsb	sy
 8116e32:	60bb      	str	r3, [r7, #8]
}
 8116e34:	bf00      	nop
 8116e36:	e7fe      	b.n	8116e36 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8116e38:	f000 f880 	bl	8116f3c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8116e3c:	2100      	movs	r1, #0
 8116e3e:	6878      	ldr	r0, [r7, #4]
 8116e40:	f000 fcfc 	bl	811783c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8116e44:	f000 f888 	bl	8116f58 <xTaskResumeAll>
 8116e48:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8116e4a:	68fb      	ldr	r3, [r7, #12]
 8116e4c:	2b00      	cmp	r3, #0
 8116e4e:	d107      	bne.n	8116e60 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8116e50:	4b06      	ldr	r3, [pc, #24]	; (8116e6c <vTaskDelay+0x64>)
 8116e52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8116e56:	601a      	str	r2, [r3, #0]
 8116e58:	f3bf 8f4f 	dsb	sy
 8116e5c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8116e60:	bf00      	nop
 8116e62:	3710      	adds	r7, #16
 8116e64:	46bd      	mov	sp, r7
 8116e66:	bd80      	pop	{r7, pc}
 8116e68:	10004b78 	.word	0x10004b78
 8116e6c:	e000ed04 	.word	0xe000ed04

08116e70 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8116e70:	b580      	push	{r7, lr}
 8116e72:	b08a      	sub	sp, #40	; 0x28
 8116e74:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8116e76:	2300      	movs	r3, #0
 8116e78:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8116e7a:	2300      	movs	r3, #0
 8116e7c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8116e7e:	463a      	mov	r2, r7
 8116e80:	1d39      	adds	r1, r7, #4
 8116e82:	f107 0308 	add.w	r3, r7, #8
 8116e86:	4618      	mov	r0, r3
 8116e88:	f7fe fb56 	bl	8115538 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8116e8c:	6839      	ldr	r1, [r7, #0]
 8116e8e:	687b      	ldr	r3, [r7, #4]
 8116e90:	68ba      	ldr	r2, [r7, #8]
 8116e92:	9202      	str	r2, [sp, #8]
 8116e94:	9301      	str	r3, [sp, #4]
 8116e96:	2300      	movs	r3, #0
 8116e98:	9300      	str	r3, [sp, #0]
 8116e9a:	2300      	movs	r3, #0
 8116e9c:	460a      	mov	r2, r1
 8116e9e:	4921      	ldr	r1, [pc, #132]	; (8116f24 <vTaskStartScheduler+0xb4>)
 8116ea0:	4821      	ldr	r0, [pc, #132]	; (8116f28 <vTaskStartScheduler+0xb8>)
 8116ea2:	f7ff fe0f 	bl	8116ac4 <xTaskCreateStatic>
 8116ea6:	4603      	mov	r3, r0
 8116ea8:	4a20      	ldr	r2, [pc, #128]	; (8116f2c <vTaskStartScheduler+0xbc>)
 8116eaa:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8116eac:	4b1f      	ldr	r3, [pc, #124]	; (8116f2c <vTaskStartScheduler+0xbc>)
 8116eae:	681b      	ldr	r3, [r3, #0]
 8116eb0:	2b00      	cmp	r3, #0
 8116eb2:	d002      	beq.n	8116eba <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8116eb4:	2301      	movs	r3, #1
 8116eb6:	617b      	str	r3, [r7, #20]
 8116eb8:	e001      	b.n	8116ebe <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8116eba:	2300      	movs	r3, #0
 8116ebc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8116ebe:	697b      	ldr	r3, [r7, #20]
 8116ec0:	2b01      	cmp	r3, #1
 8116ec2:	d102      	bne.n	8116eca <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8116ec4:	f000 fd0e 	bl	81178e4 <xTimerCreateTimerTask>
 8116ec8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8116eca:	697b      	ldr	r3, [r7, #20]
 8116ecc:	2b01      	cmp	r3, #1
 8116ece:	d116      	bne.n	8116efe <vTaskStartScheduler+0x8e>
	__asm volatile
 8116ed0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8116ed4:	f383 8811 	msr	BASEPRI, r3
 8116ed8:	f3bf 8f6f 	isb	sy
 8116edc:	f3bf 8f4f 	dsb	sy
 8116ee0:	613b      	str	r3, [r7, #16]
}
 8116ee2:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8116ee4:	4b12      	ldr	r3, [pc, #72]	; (8116f30 <vTaskStartScheduler+0xc0>)
 8116ee6:	f04f 32ff 	mov.w	r2, #4294967295
 8116eea:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8116eec:	4b11      	ldr	r3, [pc, #68]	; (8116f34 <vTaskStartScheduler+0xc4>)
 8116eee:	2201      	movs	r2, #1
 8116ef0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8116ef2:	4b11      	ldr	r3, [pc, #68]	; (8116f38 <vTaskStartScheduler+0xc8>)
 8116ef4:	2200      	movs	r2, #0
 8116ef6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8116ef8:	f7fe fe7a 	bl	8115bf0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8116efc:	e00e      	b.n	8116f1c <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8116efe:	697b      	ldr	r3, [r7, #20]
 8116f00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8116f04:	d10a      	bne.n	8116f1c <vTaskStartScheduler+0xac>
	__asm volatile
 8116f06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8116f0a:	f383 8811 	msr	BASEPRI, r3
 8116f0e:	f3bf 8f6f 	isb	sy
 8116f12:	f3bf 8f4f 	dsb	sy
 8116f16:	60fb      	str	r3, [r7, #12]
}
 8116f18:	bf00      	nop
 8116f1a:	e7fe      	b.n	8116f1a <vTaskStartScheduler+0xaa>
}
 8116f1c:	bf00      	nop
 8116f1e:	3718      	adds	r7, #24
 8116f20:	46bd      	mov	sp, r7
 8116f22:	bd80      	pop	{r7, pc}
 8116f24:	0811b420 	.word	0x0811b420
 8116f28:	08117579 	.word	0x08117579
 8116f2c:	10004b74 	.word	0x10004b74
 8116f30:	10004b70 	.word	0x10004b70
 8116f34:	10004b5c 	.word	0x10004b5c
 8116f38:	10004b54 	.word	0x10004b54

08116f3c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8116f3c:	b480      	push	{r7}
 8116f3e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8116f40:	4b04      	ldr	r3, [pc, #16]	; (8116f54 <vTaskSuspendAll+0x18>)
 8116f42:	681b      	ldr	r3, [r3, #0]
 8116f44:	3301      	adds	r3, #1
 8116f46:	4a03      	ldr	r2, [pc, #12]	; (8116f54 <vTaskSuspendAll+0x18>)
 8116f48:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8116f4a:	bf00      	nop
 8116f4c:	46bd      	mov	sp, r7
 8116f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8116f52:	4770      	bx	lr
 8116f54:	10004b78 	.word	0x10004b78

08116f58 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8116f58:	b580      	push	{r7, lr}
 8116f5a:	b084      	sub	sp, #16
 8116f5c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8116f5e:	2300      	movs	r3, #0
 8116f60:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8116f62:	2300      	movs	r3, #0
 8116f64:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8116f66:	4b42      	ldr	r3, [pc, #264]	; (8117070 <xTaskResumeAll+0x118>)
 8116f68:	681b      	ldr	r3, [r3, #0]
 8116f6a:	2b00      	cmp	r3, #0
 8116f6c:	d10a      	bne.n	8116f84 <xTaskResumeAll+0x2c>
	__asm volatile
 8116f6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8116f72:	f383 8811 	msr	BASEPRI, r3
 8116f76:	f3bf 8f6f 	isb	sy
 8116f7a:	f3bf 8f4f 	dsb	sy
 8116f7e:	603b      	str	r3, [r7, #0]
}
 8116f80:	bf00      	nop
 8116f82:	e7fe      	b.n	8116f82 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8116f84:	f7fe fed6 	bl	8115d34 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8116f88:	4b39      	ldr	r3, [pc, #228]	; (8117070 <xTaskResumeAll+0x118>)
 8116f8a:	681b      	ldr	r3, [r3, #0]
 8116f8c:	3b01      	subs	r3, #1
 8116f8e:	4a38      	ldr	r2, [pc, #224]	; (8117070 <xTaskResumeAll+0x118>)
 8116f90:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8116f92:	4b37      	ldr	r3, [pc, #220]	; (8117070 <xTaskResumeAll+0x118>)
 8116f94:	681b      	ldr	r3, [r3, #0]
 8116f96:	2b00      	cmp	r3, #0
 8116f98:	d162      	bne.n	8117060 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8116f9a:	4b36      	ldr	r3, [pc, #216]	; (8117074 <xTaskResumeAll+0x11c>)
 8116f9c:	681b      	ldr	r3, [r3, #0]
 8116f9e:	2b00      	cmp	r3, #0
 8116fa0:	d05e      	beq.n	8117060 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8116fa2:	e02f      	b.n	8117004 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8116fa4:	4b34      	ldr	r3, [pc, #208]	; (8117078 <xTaskResumeAll+0x120>)
 8116fa6:	68db      	ldr	r3, [r3, #12]
 8116fa8:	68db      	ldr	r3, [r3, #12]
 8116faa:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8116fac:	68fb      	ldr	r3, [r7, #12]
 8116fae:	3318      	adds	r3, #24
 8116fb0:	4618      	mov	r0, r3
 8116fb2:	f7fe fd69 	bl	8115a88 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8116fb6:	68fb      	ldr	r3, [r7, #12]
 8116fb8:	3304      	adds	r3, #4
 8116fba:	4618      	mov	r0, r3
 8116fbc:	f7fe fd64 	bl	8115a88 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8116fc0:	68fb      	ldr	r3, [r7, #12]
 8116fc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8116fc4:	4b2d      	ldr	r3, [pc, #180]	; (811707c <xTaskResumeAll+0x124>)
 8116fc6:	681b      	ldr	r3, [r3, #0]
 8116fc8:	429a      	cmp	r2, r3
 8116fca:	d903      	bls.n	8116fd4 <xTaskResumeAll+0x7c>
 8116fcc:	68fb      	ldr	r3, [r7, #12]
 8116fce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8116fd0:	4a2a      	ldr	r2, [pc, #168]	; (811707c <xTaskResumeAll+0x124>)
 8116fd2:	6013      	str	r3, [r2, #0]
 8116fd4:	68fb      	ldr	r3, [r7, #12]
 8116fd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8116fd8:	4613      	mov	r3, r2
 8116fda:	009b      	lsls	r3, r3, #2
 8116fdc:	4413      	add	r3, r2
 8116fde:	009b      	lsls	r3, r3, #2
 8116fe0:	4a27      	ldr	r2, [pc, #156]	; (8117080 <xTaskResumeAll+0x128>)
 8116fe2:	441a      	add	r2, r3
 8116fe4:	68fb      	ldr	r3, [r7, #12]
 8116fe6:	3304      	adds	r3, #4
 8116fe8:	4619      	mov	r1, r3
 8116fea:	4610      	mov	r0, r2
 8116fec:	f7fe fcef 	bl	81159ce <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8116ff0:	68fb      	ldr	r3, [r7, #12]
 8116ff2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8116ff4:	4b23      	ldr	r3, [pc, #140]	; (8117084 <xTaskResumeAll+0x12c>)
 8116ff6:	681b      	ldr	r3, [r3, #0]
 8116ff8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8116ffa:	429a      	cmp	r2, r3
 8116ffc:	d302      	bcc.n	8117004 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8116ffe:	4b22      	ldr	r3, [pc, #136]	; (8117088 <xTaskResumeAll+0x130>)
 8117000:	2201      	movs	r2, #1
 8117002:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8117004:	4b1c      	ldr	r3, [pc, #112]	; (8117078 <xTaskResumeAll+0x120>)
 8117006:	681b      	ldr	r3, [r3, #0]
 8117008:	2b00      	cmp	r3, #0
 811700a:	d1cb      	bne.n	8116fa4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 811700c:	68fb      	ldr	r3, [r7, #12]
 811700e:	2b00      	cmp	r3, #0
 8117010:	d001      	beq.n	8117016 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8117012:	f000 fb67 	bl	81176e4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8117016:	4b1d      	ldr	r3, [pc, #116]	; (811708c <xTaskResumeAll+0x134>)
 8117018:	681b      	ldr	r3, [r3, #0]
 811701a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 811701c:	687b      	ldr	r3, [r7, #4]
 811701e:	2b00      	cmp	r3, #0
 8117020:	d010      	beq.n	8117044 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8117022:	f000 f859 	bl	81170d8 <xTaskIncrementTick>
 8117026:	4603      	mov	r3, r0
 8117028:	2b00      	cmp	r3, #0
 811702a:	d002      	beq.n	8117032 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 811702c:	4b16      	ldr	r3, [pc, #88]	; (8117088 <xTaskResumeAll+0x130>)
 811702e:	2201      	movs	r2, #1
 8117030:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8117032:	687b      	ldr	r3, [r7, #4]
 8117034:	3b01      	subs	r3, #1
 8117036:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8117038:	687b      	ldr	r3, [r7, #4]
 811703a:	2b00      	cmp	r3, #0
 811703c:	d1f1      	bne.n	8117022 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 811703e:	4b13      	ldr	r3, [pc, #76]	; (811708c <xTaskResumeAll+0x134>)
 8117040:	2200      	movs	r2, #0
 8117042:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8117044:	4b10      	ldr	r3, [pc, #64]	; (8117088 <xTaskResumeAll+0x130>)
 8117046:	681b      	ldr	r3, [r3, #0]
 8117048:	2b00      	cmp	r3, #0
 811704a:	d009      	beq.n	8117060 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 811704c:	2301      	movs	r3, #1
 811704e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8117050:	4b0f      	ldr	r3, [pc, #60]	; (8117090 <xTaskResumeAll+0x138>)
 8117052:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8117056:	601a      	str	r2, [r3, #0]
 8117058:	f3bf 8f4f 	dsb	sy
 811705c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8117060:	f7fe fe98 	bl	8115d94 <vPortExitCritical>

	return xAlreadyYielded;
 8117064:	68bb      	ldr	r3, [r7, #8]
}
 8117066:	4618      	mov	r0, r3
 8117068:	3710      	adds	r7, #16
 811706a:	46bd      	mov	sp, r7
 811706c:	bd80      	pop	{r7, pc}
 811706e:	bf00      	nop
 8117070:	10004b78 	.word	0x10004b78
 8117074:	10004b50 	.word	0x10004b50
 8117078:	10004b10 	.word	0x10004b10
 811707c:	10004b58 	.word	0x10004b58
 8117080:	10004680 	.word	0x10004680
 8117084:	1000467c 	.word	0x1000467c
 8117088:	10004b64 	.word	0x10004b64
 811708c:	10004b60 	.word	0x10004b60
 8117090:	e000ed04 	.word	0xe000ed04

08117094 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8117094:	b480      	push	{r7}
 8117096:	b083      	sub	sp, #12
 8117098:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 811709a:	4b05      	ldr	r3, [pc, #20]	; (81170b0 <xTaskGetTickCount+0x1c>)
 811709c:	681b      	ldr	r3, [r3, #0]
 811709e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 81170a0:	687b      	ldr	r3, [r7, #4]
}
 81170a2:	4618      	mov	r0, r3
 81170a4:	370c      	adds	r7, #12
 81170a6:	46bd      	mov	sp, r7
 81170a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81170ac:	4770      	bx	lr
 81170ae:	bf00      	nop
 81170b0:	10004b54 	.word	0x10004b54

081170b4 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 81170b4:	b580      	push	{r7, lr}
 81170b6:	b082      	sub	sp, #8
 81170b8:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 81170ba:	f7fe ff1d 	bl	8115ef8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 81170be:	2300      	movs	r3, #0
 81170c0:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 81170c2:	4b04      	ldr	r3, [pc, #16]	; (81170d4 <xTaskGetTickCountFromISR+0x20>)
 81170c4:	681b      	ldr	r3, [r3, #0]
 81170c6:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 81170c8:	683b      	ldr	r3, [r7, #0]
}
 81170ca:	4618      	mov	r0, r3
 81170cc:	3708      	adds	r7, #8
 81170ce:	46bd      	mov	sp, r7
 81170d0:	bd80      	pop	{r7, pc}
 81170d2:	bf00      	nop
 81170d4:	10004b54 	.word	0x10004b54

081170d8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 81170d8:	b580      	push	{r7, lr}
 81170da:	b086      	sub	sp, #24
 81170dc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 81170de:	2300      	movs	r3, #0
 81170e0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 81170e2:	4b4f      	ldr	r3, [pc, #316]	; (8117220 <xTaskIncrementTick+0x148>)
 81170e4:	681b      	ldr	r3, [r3, #0]
 81170e6:	2b00      	cmp	r3, #0
 81170e8:	f040 808f 	bne.w	811720a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 81170ec:	4b4d      	ldr	r3, [pc, #308]	; (8117224 <xTaskIncrementTick+0x14c>)
 81170ee:	681b      	ldr	r3, [r3, #0]
 81170f0:	3301      	adds	r3, #1
 81170f2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 81170f4:	4a4b      	ldr	r2, [pc, #300]	; (8117224 <xTaskIncrementTick+0x14c>)
 81170f6:	693b      	ldr	r3, [r7, #16]
 81170f8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 81170fa:	693b      	ldr	r3, [r7, #16]
 81170fc:	2b00      	cmp	r3, #0
 81170fe:	d120      	bne.n	8117142 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8117100:	4b49      	ldr	r3, [pc, #292]	; (8117228 <xTaskIncrementTick+0x150>)
 8117102:	681b      	ldr	r3, [r3, #0]
 8117104:	681b      	ldr	r3, [r3, #0]
 8117106:	2b00      	cmp	r3, #0
 8117108:	d00a      	beq.n	8117120 <xTaskIncrementTick+0x48>
	__asm volatile
 811710a:	f04f 0350 	mov.w	r3, #80	; 0x50
 811710e:	f383 8811 	msr	BASEPRI, r3
 8117112:	f3bf 8f6f 	isb	sy
 8117116:	f3bf 8f4f 	dsb	sy
 811711a:	603b      	str	r3, [r7, #0]
}
 811711c:	bf00      	nop
 811711e:	e7fe      	b.n	811711e <xTaskIncrementTick+0x46>
 8117120:	4b41      	ldr	r3, [pc, #260]	; (8117228 <xTaskIncrementTick+0x150>)
 8117122:	681b      	ldr	r3, [r3, #0]
 8117124:	60fb      	str	r3, [r7, #12]
 8117126:	4b41      	ldr	r3, [pc, #260]	; (811722c <xTaskIncrementTick+0x154>)
 8117128:	681b      	ldr	r3, [r3, #0]
 811712a:	4a3f      	ldr	r2, [pc, #252]	; (8117228 <xTaskIncrementTick+0x150>)
 811712c:	6013      	str	r3, [r2, #0]
 811712e:	4a3f      	ldr	r2, [pc, #252]	; (811722c <xTaskIncrementTick+0x154>)
 8117130:	68fb      	ldr	r3, [r7, #12]
 8117132:	6013      	str	r3, [r2, #0]
 8117134:	4b3e      	ldr	r3, [pc, #248]	; (8117230 <xTaskIncrementTick+0x158>)
 8117136:	681b      	ldr	r3, [r3, #0]
 8117138:	3301      	adds	r3, #1
 811713a:	4a3d      	ldr	r2, [pc, #244]	; (8117230 <xTaskIncrementTick+0x158>)
 811713c:	6013      	str	r3, [r2, #0]
 811713e:	f000 fad1 	bl	81176e4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8117142:	4b3c      	ldr	r3, [pc, #240]	; (8117234 <xTaskIncrementTick+0x15c>)
 8117144:	681b      	ldr	r3, [r3, #0]
 8117146:	693a      	ldr	r2, [r7, #16]
 8117148:	429a      	cmp	r2, r3
 811714a:	d349      	bcc.n	81171e0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 811714c:	4b36      	ldr	r3, [pc, #216]	; (8117228 <xTaskIncrementTick+0x150>)
 811714e:	681b      	ldr	r3, [r3, #0]
 8117150:	681b      	ldr	r3, [r3, #0]
 8117152:	2b00      	cmp	r3, #0
 8117154:	d104      	bne.n	8117160 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8117156:	4b37      	ldr	r3, [pc, #220]	; (8117234 <xTaskIncrementTick+0x15c>)
 8117158:	f04f 32ff 	mov.w	r2, #4294967295
 811715c:	601a      	str	r2, [r3, #0]
					break;
 811715e:	e03f      	b.n	81171e0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8117160:	4b31      	ldr	r3, [pc, #196]	; (8117228 <xTaskIncrementTick+0x150>)
 8117162:	681b      	ldr	r3, [r3, #0]
 8117164:	68db      	ldr	r3, [r3, #12]
 8117166:	68db      	ldr	r3, [r3, #12]
 8117168:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 811716a:	68bb      	ldr	r3, [r7, #8]
 811716c:	685b      	ldr	r3, [r3, #4]
 811716e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8117170:	693a      	ldr	r2, [r7, #16]
 8117172:	687b      	ldr	r3, [r7, #4]
 8117174:	429a      	cmp	r2, r3
 8117176:	d203      	bcs.n	8117180 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8117178:	4a2e      	ldr	r2, [pc, #184]	; (8117234 <xTaskIncrementTick+0x15c>)
 811717a:	687b      	ldr	r3, [r7, #4]
 811717c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 811717e:	e02f      	b.n	81171e0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8117180:	68bb      	ldr	r3, [r7, #8]
 8117182:	3304      	adds	r3, #4
 8117184:	4618      	mov	r0, r3
 8117186:	f7fe fc7f 	bl	8115a88 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 811718a:	68bb      	ldr	r3, [r7, #8]
 811718c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 811718e:	2b00      	cmp	r3, #0
 8117190:	d004      	beq.n	811719c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8117192:	68bb      	ldr	r3, [r7, #8]
 8117194:	3318      	adds	r3, #24
 8117196:	4618      	mov	r0, r3
 8117198:	f7fe fc76 	bl	8115a88 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 811719c:	68bb      	ldr	r3, [r7, #8]
 811719e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 81171a0:	4b25      	ldr	r3, [pc, #148]	; (8117238 <xTaskIncrementTick+0x160>)
 81171a2:	681b      	ldr	r3, [r3, #0]
 81171a4:	429a      	cmp	r2, r3
 81171a6:	d903      	bls.n	81171b0 <xTaskIncrementTick+0xd8>
 81171a8:	68bb      	ldr	r3, [r7, #8]
 81171aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81171ac:	4a22      	ldr	r2, [pc, #136]	; (8117238 <xTaskIncrementTick+0x160>)
 81171ae:	6013      	str	r3, [r2, #0]
 81171b0:	68bb      	ldr	r3, [r7, #8]
 81171b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 81171b4:	4613      	mov	r3, r2
 81171b6:	009b      	lsls	r3, r3, #2
 81171b8:	4413      	add	r3, r2
 81171ba:	009b      	lsls	r3, r3, #2
 81171bc:	4a1f      	ldr	r2, [pc, #124]	; (811723c <xTaskIncrementTick+0x164>)
 81171be:	441a      	add	r2, r3
 81171c0:	68bb      	ldr	r3, [r7, #8]
 81171c2:	3304      	adds	r3, #4
 81171c4:	4619      	mov	r1, r3
 81171c6:	4610      	mov	r0, r2
 81171c8:	f7fe fc01 	bl	81159ce <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 81171cc:	68bb      	ldr	r3, [r7, #8]
 81171ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 81171d0:	4b1b      	ldr	r3, [pc, #108]	; (8117240 <xTaskIncrementTick+0x168>)
 81171d2:	681b      	ldr	r3, [r3, #0]
 81171d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81171d6:	429a      	cmp	r2, r3
 81171d8:	d3b8      	bcc.n	811714c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 81171da:	2301      	movs	r3, #1
 81171dc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 81171de:	e7b5      	b.n	811714c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 81171e0:	4b17      	ldr	r3, [pc, #92]	; (8117240 <xTaskIncrementTick+0x168>)
 81171e2:	681b      	ldr	r3, [r3, #0]
 81171e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 81171e6:	4915      	ldr	r1, [pc, #84]	; (811723c <xTaskIncrementTick+0x164>)
 81171e8:	4613      	mov	r3, r2
 81171ea:	009b      	lsls	r3, r3, #2
 81171ec:	4413      	add	r3, r2
 81171ee:	009b      	lsls	r3, r3, #2
 81171f0:	440b      	add	r3, r1
 81171f2:	681b      	ldr	r3, [r3, #0]
 81171f4:	2b01      	cmp	r3, #1
 81171f6:	d901      	bls.n	81171fc <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 81171f8:	2301      	movs	r3, #1
 81171fa:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 81171fc:	4b11      	ldr	r3, [pc, #68]	; (8117244 <xTaskIncrementTick+0x16c>)
 81171fe:	681b      	ldr	r3, [r3, #0]
 8117200:	2b00      	cmp	r3, #0
 8117202:	d007      	beq.n	8117214 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8117204:	2301      	movs	r3, #1
 8117206:	617b      	str	r3, [r7, #20]
 8117208:	e004      	b.n	8117214 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 811720a:	4b0f      	ldr	r3, [pc, #60]	; (8117248 <xTaskIncrementTick+0x170>)
 811720c:	681b      	ldr	r3, [r3, #0]
 811720e:	3301      	adds	r3, #1
 8117210:	4a0d      	ldr	r2, [pc, #52]	; (8117248 <xTaskIncrementTick+0x170>)
 8117212:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8117214:	697b      	ldr	r3, [r7, #20]
}
 8117216:	4618      	mov	r0, r3
 8117218:	3718      	adds	r7, #24
 811721a:	46bd      	mov	sp, r7
 811721c:	bd80      	pop	{r7, pc}
 811721e:	bf00      	nop
 8117220:	10004b78 	.word	0x10004b78
 8117224:	10004b54 	.word	0x10004b54
 8117228:	10004b08 	.word	0x10004b08
 811722c:	10004b0c 	.word	0x10004b0c
 8117230:	10004b68 	.word	0x10004b68
 8117234:	10004b70 	.word	0x10004b70
 8117238:	10004b58 	.word	0x10004b58
 811723c:	10004680 	.word	0x10004680
 8117240:	1000467c 	.word	0x1000467c
 8117244:	10004b64 	.word	0x10004b64
 8117248:	10004b60 	.word	0x10004b60

0811724c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 811724c:	b480      	push	{r7}
 811724e:	b085      	sub	sp, #20
 8117250:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8117252:	4b28      	ldr	r3, [pc, #160]	; (81172f4 <vTaskSwitchContext+0xa8>)
 8117254:	681b      	ldr	r3, [r3, #0]
 8117256:	2b00      	cmp	r3, #0
 8117258:	d003      	beq.n	8117262 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 811725a:	4b27      	ldr	r3, [pc, #156]	; (81172f8 <vTaskSwitchContext+0xac>)
 811725c:	2201      	movs	r2, #1
 811725e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8117260:	e041      	b.n	81172e6 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8117262:	4b25      	ldr	r3, [pc, #148]	; (81172f8 <vTaskSwitchContext+0xac>)
 8117264:	2200      	movs	r2, #0
 8117266:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8117268:	4b24      	ldr	r3, [pc, #144]	; (81172fc <vTaskSwitchContext+0xb0>)
 811726a:	681b      	ldr	r3, [r3, #0]
 811726c:	60fb      	str	r3, [r7, #12]
 811726e:	e010      	b.n	8117292 <vTaskSwitchContext+0x46>
 8117270:	68fb      	ldr	r3, [r7, #12]
 8117272:	2b00      	cmp	r3, #0
 8117274:	d10a      	bne.n	811728c <vTaskSwitchContext+0x40>
	__asm volatile
 8117276:	f04f 0350 	mov.w	r3, #80	; 0x50
 811727a:	f383 8811 	msr	BASEPRI, r3
 811727e:	f3bf 8f6f 	isb	sy
 8117282:	f3bf 8f4f 	dsb	sy
 8117286:	607b      	str	r3, [r7, #4]
}
 8117288:	bf00      	nop
 811728a:	e7fe      	b.n	811728a <vTaskSwitchContext+0x3e>
 811728c:	68fb      	ldr	r3, [r7, #12]
 811728e:	3b01      	subs	r3, #1
 8117290:	60fb      	str	r3, [r7, #12]
 8117292:	491b      	ldr	r1, [pc, #108]	; (8117300 <vTaskSwitchContext+0xb4>)
 8117294:	68fa      	ldr	r2, [r7, #12]
 8117296:	4613      	mov	r3, r2
 8117298:	009b      	lsls	r3, r3, #2
 811729a:	4413      	add	r3, r2
 811729c:	009b      	lsls	r3, r3, #2
 811729e:	440b      	add	r3, r1
 81172a0:	681b      	ldr	r3, [r3, #0]
 81172a2:	2b00      	cmp	r3, #0
 81172a4:	d0e4      	beq.n	8117270 <vTaskSwitchContext+0x24>
 81172a6:	68fa      	ldr	r2, [r7, #12]
 81172a8:	4613      	mov	r3, r2
 81172aa:	009b      	lsls	r3, r3, #2
 81172ac:	4413      	add	r3, r2
 81172ae:	009b      	lsls	r3, r3, #2
 81172b0:	4a13      	ldr	r2, [pc, #76]	; (8117300 <vTaskSwitchContext+0xb4>)
 81172b2:	4413      	add	r3, r2
 81172b4:	60bb      	str	r3, [r7, #8]
 81172b6:	68bb      	ldr	r3, [r7, #8]
 81172b8:	685b      	ldr	r3, [r3, #4]
 81172ba:	685a      	ldr	r2, [r3, #4]
 81172bc:	68bb      	ldr	r3, [r7, #8]
 81172be:	605a      	str	r2, [r3, #4]
 81172c0:	68bb      	ldr	r3, [r7, #8]
 81172c2:	685a      	ldr	r2, [r3, #4]
 81172c4:	68bb      	ldr	r3, [r7, #8]
 81172c6:	3308      	adds	r3, #8
 81172c8:	429a      	cmp	r2, r3
 81172ca:	d104      	bne.n	81172d6 <vTaskSwitchContext+0x8a>
 81172cc:	68bb      	ldr	r3, [r7, #8]
 81172ce:	685b      	ldr	r3, [r3, #4]
 81172d0:	685a      	ldr	r2, [r3, #4]
 81172d2:	68bb      	ldr	r3, [r7, #8]
 81172d4:	605a      	str	r2, [r3, #4]
 81172d6:	68bb      	ldr	r3, [r7, #8]
 81172d8:	685b      	ldr	r3, [r3, #4]
 81172da:	68db      	ldr	r3, [r3, #12]
 81172dc:	4a09      	ldr	r2, [pc, #36]	; (8117304 <vTaskSwitchContext+0xb8>)
 81172de:	6013      	str	r3, [r2, #0]
 81172e0:	4a06      	ldr	r2, [pc, #24]	; (81172fc <vTaskSwitchContext+0xb0>)
 81172e2:	68fb      	ldr	r3, [r7, #12]
 81172e4:	6013      	str	r3, [r2, #0]
}
 81172e6:	bf00      	nop
 81172e8:	3714      	adds	r7, #20
 81172ea:	46bd      	mov	sp, r7
 81172ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 81172f0:	4770      	bx	lr
 81172f2:	bf00      	nop
 81172f4:	10004b78 	.word	0x10004b78
 81172f8:	10004b64 	.word	0x10004b64
 81172fc:	10004b58 	.word	0x10004b58
 8117300:	10004680 	.word	0x10004680
 8117304:	1000467c 	.word	0x1000467c

08117308 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8117308:	b580      	push	{r7, lr}
 811730a:	b084      	sub	sp, #16
 811730c:	af00      	add	r7, sp, #0
 811730e:	6078      	str	r0, [r7, #4]
 8117310:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8117312:	687b      	ldr	r3, [r7, #4]
 8117314:	2b00      	cmp	r3, #0
 8117316:	d10a      	bne.n	811732e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8117318:	f04f 0350 	mov.w	r3, #80	; 0x50
 811731c:	f383 8811 	msr	BASEPRI, r3
 8117320:	f3bf 8f6f 	isb	sy
 8117324:	f3bf 8f4f 	dsb	sy
 8117328:	60fb      	str	r3, [r7, #12]
}
 811732a:	bf00      	nop
 811732c:	e7fe      	b.n	811732c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 811732e:	4b07      	ldr	r3, [pc, #28]	; (811734c <vTaskPlaceOnEventList+0x44>)
 8117330:	681b      	ldr	r3, [r3, #0]
 8117332:	3318      	adds	r3, #24
 8117334:	4619      	mov	r1, r3
 8117336:	6878      	ldr	r0, [r7, #4]
 8117338:	f7fe fb6d 	bl	8115a16 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 811733c:	2101      	movs	r1, #1
 811733e:	6838      	ldr	r0, [r7, #0]
 8117340:	f000 fa7c 	bl	811783c <prvAddCurrentTaskToDelayedList>
}
 8117344:	bf00      	nop
 8117346:	3710      	adds	r7, #16
 8117348:	46bd      	mov	sp, r7
 811734a:	bd80      	pop	{r7, pc}
 811734c:	1000467c 	.word	0x1000467c

08117350 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8117350:	b580      	push	{r7, lr}
 8117352:	b086      	sub	sp, #24
 8117354:	af00      	add	r7, sp, #0
 8117356:	60f8      	str	r0, [r7, #12]
 8117358:	60b9      	str	r1, [r7, #8]
 811735a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 811735c:	68fb      	ldr	r3, [r7, #12]
 811735e:	2b00      	cmp	r3, #0
 8117360:	d10a      	bne.n	8117378 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8117362:	f04f 0350 	mov.w	r3, #80	; 0x50
 8117366:	f383 8811 	msr	BASEPRI, r3
 811736a:	f3bf 8f6f 	isb	sy
 811736e:	f3bf 8f4f 	dsb	sy
 8117372:	617b      	str	r3, [r7, #20]
}
 8117374:	bf00      	nop
 8117376:	e7fe      	b.n	8117376 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8117378:	4b0a      	ldr	r3, [pc, #40]	; (81173a4 <vTaskPlaceOnEventListRestricted+0x54>)
 811737a:	681b      	ldr	r3, [r3, #0]
 811737c:	3318      	adds	r3, #24
 811737e:	4619      	mov	r1, r3
 8117380:	68f8      	ldr	r0, [r7, #12]
 8117382:	f7fe fb24 	bl	81159ce <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8117386:	687b      	ldr	r3, [r7, #4]
 8117388:	2b00      	cmp	r3, #0
 811738a:	d002      	beq.n	8117392 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 811738c:	f04f 33ff 	mov.w	r3, #4294967295
 8117390:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8117392:	6879      	ldr	r1, [r7, #4]
 8117394:	68b8      	ldr	r0, [r7, #8]
 8117396:	f000 fa51 	bl	811783c <prvAddCurrentTaskToDelayedList>
	}
 811739a:	bf00      	nop
 811739c:	3718      	adds	r7, #24
 811739e:	46bd      	mov	sp, r7
 81173a0:	bd80      	pop	{r7, pc}
 81173a2:	bf00      	nop
 81173a4:	1000467c 	.word	0x1000467c

081173a8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 81173a8:	b580      	push	{r7, lr}
 81173aa:	b086      	sub	sp, #24
 81173ac:	af00      	add	r7, sp, #0
 81173ae:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 81173b0:	687b      	ldr	r3, [r7, #4]
 81173b2:	68db      	ldr	r3, [r3, #12]
 81173b4:	68db      	ldr	r3, [r3, #12]
 81173b6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 81173b8:	693b      	ldr	r3, [r7, #16]
 81173ba:	2b00      	cmp	r3, #0
 81173bc:	d10a      	bne.n	81173d4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 81173be:	f04f 0350 	mov.w	r3, #80	; 0x50
 81173c2:	f383 8811 	msr	BASEPRI, r3
 81173c6:	f3bf 8f6f 	isb	sy
 81173ca:	f3bf 8f4f 	dsb	sy
 81173ce:	60fb      	str	r3, [r7, #12]
}
 81173d0:	bf00      	nop
 81173d2:	e7fe      	b.n	81173d2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 81173d4:	693b      	ldr	r3, [r7, #16]
 81173d6:	3318      	adds	r3, #24
 81173d8:	4618      	mov	r0, r3
 81173da:	f7fe fb55 	bl	8115a88 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 81173de:	4b1e      	ldr	r3, [pc, #120]	; (8117458 <xTaskRemoveFromEventList+0xb0>)
 81173e0:	681b      	ldr	r3, [r3, #0]
 81173e2:	2b00      	cmp	r3, #0
 81173e4:	d11d      	bne.n	8117422 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 81173e6:	693b      	ldr	r3, [r7, #16]
 81173e8:	3304      	adds	r3, #4
 81173ea:	4618      	mov	r0, r3
 81173ec:	f7fe fb4c 	bl	8115a88 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 81173f0:	693b      	ldr	r3, [r7, #16]
 81173f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 81173f4:	4b19      	ldr	r3, [pc, #100]	; (811745c <xTaskRemoveFromEventList+0xb4>)
 81173f6:	681b      	ldr	r3, [r3, #0]
 81173f8:	429a      	cmp	r2, r3
 81173fa:	d903      	bls.n	8117404 <xTaskRemoveFromEventList+0x5c>
 81173fc:	693b      	ldr	r3, [r7, #16]
 81173fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8117400:	4a16      	ldr	r2, [pc, #88]	; (811745c <xTaskRemoveFromEventList+0xb4>)
 8117402:	6013      	str	r3, [r2, #0]
 8117404:	693b      	ldr	r3, [r7, #16]
 8117406:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8117408:	4613      	mov	r3, r2
 811740a:	009b      	lsls	r3, r3, #2
 811740c:	4413      	add	r3, r2
 811740e:	009b      	lsls	r3, r3, #2
 8117410:	4a13      	ldr	r2, [pc, #76]	; (8117460 <xTaskRemoveFromEventList+0xb8>)
 8117412:	441a      	add	r2, r3
 8117414:	693b      	ldr	r3, [r7, #16]
 8117416:	3304      	adds	r3, #4
 8117418:	4619      	mov	r1, r3
 811741a:	4610      	mov	r0, r2
 811741c:	f7fe fad7 	bl	81159ce <vListInsertEnd>
 8117420:	e005      	b.n	811742e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8117422:	693b      	ldr	r3, [r7, #16]
 8117424:	3318      	adds	r3, #24
 8117426:	4619      	mov	r1, r3
 8117428:	480e      	ldr	r0, [pc, #56]	; (8117464 <xTaskRemoveFromEventList+0xbc>)
 811742a:	f7fe fad0 	bl	81159ce <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 811742e:	693b      	ldr	r3, [r7, #16]
 8117430:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8117432:	4b0d      	ldr	r3, [pc, #52]	; (8117468 <xTaskRemoveFromEventList+0xc0>)
 8117434:	681b      	ldr	r3, [r3, #0]
 8117436:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8117438:	429a      	cmp	r2, r3
 811743a:	d905      	bls.n	8117448 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 811743c:	2301      	movs	r3, #1
 811743e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8117440:	4b0a      	ldr	r3, [pc, #40]	; (811746c <xTaskRemoveFromEventList+0xc4>)
 8117442:	2201      	movs	r2, #1
 8117444:	601a      	str	r2, [r3, #0]
 8117446:	e001      	b.n	811744c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8117448:	2300      	movs	r3, #0
 811744a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 811744c:	697b      	ldr	r3, [r7, #20]
}
 811744e:	4618      	mov	r0, r3
 8117450:	3718      	adds	r7, #24
 8117452:	46bd      	mov	sp, r7
 8117454:	bd80      	pop	{r7, pc}
 8117456:	bf00      	nop
 8117458:	10004b78 	.word	0x10004b78
 811745c:	10004b58 	.word	0x10004b58
 8117460:	10004680 	.word	0x10004680
 8117464:	10004b10 	.word	0x10004b10
 8117468:	1000467c 	.word	0x1000467c
 811746c:	10004b64 	.word	0x10004b64

08117470 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8117470:	b480      	push	{r7}
 8117472:	b083      	sub	sp, #12
 8117474:	af00      	add	r7, sp, #0
 8117476:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8117478:	4b06      	ldr	r3, [pc, #24]	; (8117494 <vTaskInternalSetTimeOutState+0x24>)
 811747a:	681a      	ldr	r2, [r3, #0]
 811747c:	687b      	ldr	r3, [r7, #4]
 811747e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8117480:	4b05      	ldr	r3, [pc, #20]	; (8117498 <vTaskInternalSetTimeOutState+0x28>)
 8117482:	681a      	ldr	r2, [r3, #0]
 8117484:	687b      	ldr	r3, [r7, #4]
 8117486:	605a      	str	r2, [r3, #4]
}
 8117488:	bf00      	nop
 811748a:	370c      	adds	r7, #12
 811748c:	46bd      	mov	sp, r7
 811748e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8117492:	4770      	bx	lr
 8117494:	10004b68 	.word	0x10004b68
 8117498:	10004b54 	.word	0x10004b54

0811749c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 811749c:	b580      	push	{r7, lr}
 811749e:	b088      	sub	sp, #32
 81174a0:	af00      	add	r7, sp, #0
 81174a2:	6078      	str	r0, [r7, #4]
 81174a4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 81174a6:	687b      	ldr	r3, [r7, #4]
 81174a8:	2b00      	cmp	r3, #0
 81174aa:	d10a      	bne.n	81174c2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 81174ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 81174b0:	f383 8811 	msr	BASEPRI, r3
 81174b4:	f3bf 8f6f 	isb	sy
 81174b8:	f3bf 8f4f 	dsb	sy
 81174bc:	613b      	str	r3, [r7, #16]
}
 81174be:	bf00      	nop
 81174c0:	e7fe      	b.n	81174c0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 81174c2:	683b      	ldr	r3, [r7, #0]
 81174c4:	2b00      	cmp	r3, #0
 81174c6:	d10a      	bne.n	81174de <xTaskCheckForTimeOut+0x42>
	__asm volatile
 81174c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 81174cc:	f383 8811 	msr	BASEPRI, r3
 81174d0:	f3bf 8f6f 	isb	sy
 81174d4:	f3bf 8f4f 	dsb	sy
 81174d8:	60fb      	str	r3, [r7, #12]
}
 81174da:	bf00      	nop
 81174dc:	e7fe      	b.n	81174dc <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 81174de:	f7fe fc29 	bl	8115d34 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 81174e2:	4b1d      	ldr	r3, [pc, #116]	; (8117558 <xTaskCheckForTimeOut+0xbc>)
 81174e4:	681b      	ldr	r3, [r3, #0]
 81174e6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 81174e8:	687b      	ldr	r3, [r7, #4]
 81174ea:	685b      	ldr	r3, [r3, #4]
 81174ec:	69ba      	ldr	r2, [r7, #24]
 81174ee:	1ad3      	subs	r3, r2, r3
 81174f0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 81174f2:	683b      	ldr	r3, [r7, #0]
 81174f4:	681b      	ldr	r3, [r3, #0]
 81174f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 81174fa:	d102      	bne.n	8117502 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 81174fc:	2300      	movs	r3, #0
 81174fe:	61fb      	str	r3, [r7, #28]
 8117500:	e023      	b.n	811754a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8117502:	687b      	ldr	r3, [r7, #4]
 8117504:	681a      	ldr	r2, [r3, #0]
 8117506:	4b15      	ldr	r3, [pc, #84]	; (811755c <xTaskCheckForTimeOut+0xc0>)
 8117508:	681b      	ldr	r3, [r3, #0]
 811750a:	429a      	cmp	r2, r3
 811750c:	d007      	beq.n	811751e <xTaskCheckForTimeOut+0x82>
 811750e:	687b      	ldr	r3, [r7, #4]
 8117510:	685b      	ldr	r3, [r3, #4]
 8117512:	69ba      	ldr	r2, [r7, #24]
 8117514:	429a      	cmp	r2, r3
 8117516:	d302      	bcc.n	811751e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8117518:	2301      	movs	r3, #1
 811751a:	61fb      	str	r3, [r7, #28]
 811751c:	e015      	b.n	811754a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 811751e:	683b      	ldr	r3, [r7, #0]
 8117520:	681b      	ldr	r3, [r3, #0]
 8117522:	697a      	ldr	r2, [r7, #20]
 8117524:	429a      	cmp	r2, r3
 8117526:	d20b      	bcs.n	8117540 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8117528:	683b      	ldr	r3, [r7, #0]
 811752a:	681a      	ldr	r2, [r3, #0]
 811752c:	697b      	ldr	r3, [r7, #20]
 811752e:	1ad2      	subs	r2, r2, r3
 8117530:	683b      	ldr	r3, [r7, #0]
 8117532:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8117534:	6878      	ldr	r0, [r7, #4]
 8117536:	f7ff ff9b 	bl	8117470 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 811753a:	2300      	movs	r3, #0
 811753c:	61fb      	str	r3, [r7, #28]
 811753e:	e004      	b.n	811754a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8117540:	683b      	ldr	r3, [r7, #0]
 8117542:	2200      	movs	r2, #0
 8117544:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8117546:	2301      	movs	r3, #1
 8117548:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 811754a:	f7fe fc23 	bl	8115d94 <vPortExitCritical>

	return xReturn;
 811754e:	69fb      	ldr	r3, [r7, #28]
}
 8117550:	4618      	mov	r0, r3
 8117552:	3720      	adds	r7, #32
 8117554:	46bd      	mov	sp, r7
 8117556:	bd80      	pop	{r7, pc}
 8117558:	10004b54 	.word	0x10004b54
 811755c:	10004b68 	.word	0x10004b68

08117560 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8117560:	b480      	push	{r7}
 8117562:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8117564:	4b03      	ldr	r3, [pc, #12]	; (8117574 <vTaskMissedYield+0x14>)
 8117566:	2201      	movs	r2, #1
 8117568:	601a      	str	r2, [r3, #0]
}
 811756a:	bf00      	nop
 811756c:	46bd      	mov	sp, r7
 811756e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8117572:	4770      	bx	lr
 8117574:	10004b64 	.word	0x10004b64

08117578 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8117578:	b580      	push	{r7, lr}
 811757a:	b082      	sub	sp, #8
 811757c:	af00      	add	r7, sp, #0
 811757e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8117580:	f000 f852 	bl	8117628 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8117584:	4b06      	ldr	r3, [pc, #24]	; (81175a0 <prvIdleTask+0x28>)
 8117586:	681b      	ldr	r3, [r3, #0]
 8117588:	2b01      	cmp	r3, #1
 811758a:	d9f9      	bls.n	8117580 <prvIdleTask+0x8>
			{
				taskYIELD();
 811758c:	4b05      	ldr	r3, [pc, #20]	; (81175a4 <prvIdleTask+0x2c>)
 811758e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8117592:	601a      	str	r2, [r3, #0]
 8117594:	f3bf 8f4f 	dsb	sy
 8117598:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 811759c:	e7f0      	b.n	8117580 <prvIdleTask+0x8>
 811759e:	bf00      	nop
 81175a0:	10004680 	.word	0x10004680
 81175a4:	e000ed04 	.word	0xe000ed04

081175a8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 81175a8:	b580      	push	{r7, lr}
 81175aa:	b082      	sub	sp, #8
 81175ac:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 81175ae:	2300      	movs	r3, #0
 81175b0:	607b      	str	r3, [r7, #4]
 81175b2:	e00c      	b.n	81175ce <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 81175b4:	687a      	ldr	r2, [r7, #4]
 81175b6:	4613      	mov	r3, r2
 81175b8:	009b      	lsls	r3, r3, #2
 81175ba:	4413      	add	r3, r2
 81175bc:	009b      	lsls	r3, r3, #2
 81175be:	4a12      	ldr	r2, [pc, #72]	; (8117608 <prvInitialiseTaskLists+0x60>)
 81175c0:	4413      	add	r3, r2
 81175c2:	4618      	mov	r0, r3
 81175c4:	f7fe f9d6 	bl	8115974 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 81175c8:	687b      	ldr	r3, [r7, #4]
 81175ca:	3301      	adds	r3, #1
 81175cc:	607b      	str	r3, [r7, #4]
 81175ce:	687b      	ldr	r3, [r7, #4]
 81175d0:	2b37      	cmp	r3, #55	; 0x37
 81175d2:	d9ef      	bls.n	81175b4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 81175d4:	480d      	ldr	r0, [pc, #52]	; (811760c <prvInitialiseTaskLists+0x64>)
 81175d6:	f7fe f9cd 	bl	8115974 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 81175da:	480d      	ldr	r0, [pc, #52]	; (8117610 <prvInitialiseTaskLists+0x68>)
 81175dc:	f7fe f9ca 	bl	8115974 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 81175e0:	480c      	ldr	r0, [pc, #48]	; (8117614 <prvInitialiseTaskLists+0x6c>)
 81175e2:	f7fe f9c7 	bl	8115974 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 81175e6:	480c      	ldr	r0, [pc, #48]	; (8117618 <prvInitialiseTaskLists+0x70>)
 81175e8:	f7fe f9c4 	bl	8115974 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 81175ec:	480b      	ldr	r0, [pc, #44]	; (811761c <prvInitialiseTaskLists+0x74>)
 81175ee:	f7fe f9c1 	bl	8115974 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 81175f2:	4b0b      	ldr	r3, [pc, #44]	; (8117620 <prvInitialiseTaskLists+0x78>)
 81175f4:	4a05      	ldr	r2, [pc, #20]	; (811760c <prvInitialiseTaskLists+0x64>)
 81175f6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 81175f8:	4b0a      	ldr	r3, [pc, #40]	; (8117624 <prvInitialiseTaskLists+0x7c>)
 81175fa:	4a05      	ldr	r2, [pc, #20]	; (8117610 <prvInitialiseTaskLists+0x68>)
 81175fc:	601a      	str	r2, [r3, #0]
}
 81175fe:	bf00      	nop
 8117600:	3708      	adds	r7, #8
 8117602:	46bd      	mov	sp, r7
 8117604:	bd80      	pop	{r7, pc}
 8117606:	bf00      	nop
 8117608:	10004680 	.word	0x10004680
 811760c:	10004ae0 	.word	0x10004ae0
 8117610:	10004af4 	.word	0x10004af4
 8117614:	10004b10 	.word	0x10004b10
 8117618:	10004b24 	.word	0x10004b24
 811761c:	10004b3c 	.word	0x10004b3c
 8117620:	10004b08 	.word	0x10004b08
 8117624:	10004b0c 	.word	0x10004b0c

08117628 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8117628:	b580      	push	{r7, lr}
 811762a:	b082      	sub	sp, #8
 811762c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 811762e:	e019      	b.n	8117664 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8117630:	f7fe fb80 	bl	8115d34 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8117634:	4b10      	ldr	r3, [pc, #64]	; (8117678 <prvCheckTasksWaitingTermination+0x50>)
 8117636:	68db      	ldr	r3, [r3, #12]
 8117638:	68db      	ldr	r3, [r3, #12]
 811763a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 811763c:	687b      	ldr	r3, [r7, #4]
 811763e:	3304      	adds	r3, #4
 8117640:	4618      	mov	r0, r3
 8117642:	f7fe fa21 	bl	8115a88 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8117646:	4b0d      	ldr	r3, [pc, #52]	; (811767c <prvCheckTasksWaitingTermination+0x54>)
 8117648:	681b      	ldr	r3, [r3, #0]
 811764a:	3b01      	subs	r3, #1
 811764c:	4a0b      	ldr	r2, [pc, #44]	; (811767c <prvCheckTasksWaitingTermination+0x54>)
 811764e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8117650:	4b0b      	ldr	r3, [pc, #44]	; (8117680 <prvCheckTasksWaitingTermination+0x58>)
 8117652:	681b      	ldr	r3, [r3, #0]
 8117654:	3b01      	subs	r3, #1
 8117656:	4a0a      	ldr	r2, [pc, #40]	; (8117680 <prvCheckTasksWaitingTermination+0x58>)
 8117658:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 811765a:	f7fe fb9b 	bl	8115d94 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 811765e:	6878      	ldr	r0, [r7, #4]
 8117660:	f000 f810 	bl	8117684 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8117664:	4b06      	ldr	r3, [pc, #24]	; (8117680 <prvCheckTasksWaitingTermination+0x58>)
 8117666:	681b      	ldr	r3, [r3, #0]
 8117668:	2b00      	cmp	r3, #0
 811766a:	d1e1      	bne.n	8117630 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 811766c:	bf00      	nop
 811766e:	bf00      	nop
 8117670:	3708      	adds	r7, #8
 8117672:	46bd      	mov	sp, r7
 8117674:	bd80      	pop	{r7, pc}
 8117676:	bf00      	nop
 8117678:	10004b24 	.word	0x10004b24
 811767c:	10004b50 	.word	0x10004b50
 8117680:	10004b38 	.word	0x10004b38

08117684 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8117684:	b580      	push	{r7, lr}
 8117686:	b084      	sub	sp, #16
 8117688:	af00      	add	r7, sp, #0
 811768a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 811768c:	687b      	ldr	r3, [r7, #4]
 811768e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8117692:	2b00      	cmp	r3, #0
 8117694:	d108      	bne.n	81176a8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8117696:	687b      	ldr	r3, [r7, #4]
 8117698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 811769a:	4618      	mov	r0, r3
 811769c:	f7fe f84c 	bl	8115738 <vPortFree>
				vPortFree( pxTCB );
 81176a0:	6878      	ldr	r0, [r7, #4]
 81176a2:	f7fe f849 	bl	8115738 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 81176a6:	e018      	b.n	81176da <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 81176a8:	687b      	ldr	r3, [r7, #4]
 81176aa:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 81176ae:	2b01      	cmp	r3, #1
 81176b0:	d103      	bne.n	81176ba <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 81176b2:	6878      	ldr	r0, [r7, #4]
 81176b4:	f7fe f840 	bl	8115738 <vPortFree>
	}
 81176b8:	e00f      	b.n	81176da <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 81176ba:	687b      	ldr	r3, [r7, #4]
 81176bc:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 81176c0:	2b02      	cmp	r3, #2
 81176c2:	d00a      	beq.n	81176da <prvDeleteTCB+0x56>
	__asm volatile
 81176c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 81176c8:	f383 8811 	msr	BASEPRI, r3
 81176cc:	f3bf 8f6f 	isb	sy
 81176d0:	f3bf 8f4f 	dsb	sy
 81176d4:	60fb      	str	r3, [r7, #12]
}
 81176d6:	bf00      	nop
 81176d8:	e7fe      	b.n	81176d8 <prvDeleteTCB+0x54>
	}
 81176da:	bf00      	nop
 81176dc:	3710      	adds	r7, #16
 81176de:	46bd      	mov	sp, r7
 81176e0:	bd80      	pop	{r7, pc}
	...

081176e4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 81176e4:	b480      	push	{r7}
 81176e6:	b083      	sub	sp, #12
 81176e8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 81176ea:	4b0c      	ldr	r3, [pc, #48]	; (811771c <prvResetNextTaskUnblockTime+0x38>)
 81176ec:	681b      	ldr	r3, [r3, #0]
 81176ee:	681b      	ldr	r3, [r3, #0]
 81176f0:	2b00      	cmp	r3, #0
 81176f2:	d104      	bne.n	81176fe <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 81176f4:	4b0a      	ldr	r3, [pc, #40]	; (8117720 <prvResetNextTaskUnblockTime+0x3c>)
 81176f6:	f04f 32ff 	mov.w	r2, #4294967295
 81176fa:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 81176fc:	e008      	b.n	8117710 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 81176fe:	4b07      	ldr	r3, [pc, #28]	; (811771c <prvResetNextTaskUnblockTime+0x38>)
 8117700:	681b      	ldr	r3, [r3, #0]
 8117702:	68db      	ldr	r3, [r3, #12]
 8117704:	68db      	ldr	r3, [r3, #12]
 8117706:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8117708:	687b      	ldr	r3, [r7, #4]
 811770a:	685b      	ldr	r3, [r3, #4]
 811770c:	4a04      	ldr	r2, [pc, #16]	; (8117720 <prvResetNextTaskUnblockTime+0x3c>)
 811770e:	6013      	str	r3, [r2, #0]
}
 8117710:	bf00      	nop
 8117712:	370c      	adds	r7, #12
 8117714:	46bd      	mov	sp, r7
 8117716:	f85d 7b04 	ldr.w	r7, [sp], #4
 811771a:	4770      	bx	lr
 811771c:	10004b08 	.word	0x10004b08
 8117720:	10004b70 	.word	0x10004b70

08117724 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8117724:	b480      	push	{r7}
 8117726:	b083      	sub	sp, #12
 8117728:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 811772a:	4b0b      	ldr	r3, [pc, #44]	; (8117758 <xTaskGetSchedulerState+0x34>)
 811772c:	681b      	ldr	r3, [r3, #0]
 811772e:	2b00      	cmp	r3, #0
 8117730:	d102      	bne.n	8117738 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8117732:	2301      	movs	r3, #1
 8117734:	607b      	str	r3, [r7, #4]
 8117736:	e008      	b.n	811774a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8117738:	4b08      	ldr	r3, [pc, #32]	; (811775c <xTaskGetSchedulerState+0x38>)
 811773a:	681b      	ldr	r3, [r3, #0]
 811773c:	2b00      	cmp	r3, #0
 811773e:	d102      	bne.n	8117746 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8117740:	2302      	movs	r3, #2
 8117742:	607b      	str	r3, [r7, #4]
 8117744:	e001      	b.n	811774a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8117746:	2300      	movs	r3, #0
 8117748:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 811774a:	687b      	ldr	r3, [r7, #4]
	}
 811774c:	4618      	mov	r0, r3
 811774e:	370c      	adds	r7, #12
 8117750:	46bd      	mov	sp, r7
 8117752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8117756:	4770      	bx	lr
 8117758:	10004b5c 	.word	0x10004b5c
 811775c:	10004b78 	.word	0x10004b78

08117760 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8117760:	b580      	push	{r7, lr}
 8117762:	b086      	sub	sp, #24
 8117764:	af00      	add	r7, sp, #0
 8117766:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8117768:	687b      	ldr	r3, [r7, #4]
 811776a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 811776c:	2300      	movs	r3, #0
 811776e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8117770:	687b      	ldr	r3, [r7, #4]
 8117772:	2b00      	cmp	r3, #0
 8117774:	d056      	beq.n	8117824 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8117776:	4b2e      	ldr	r3, [pc, #184]	; (8117830 <xTaskPriorityDisinherit+0xd0>)
 8117778:	681b      	ldr	r3, [r3, #0]
 811777a:	693a      	ldr	r2, [r7, #16]
 811777c:	429a      	cmp	r2, r3
 811777e:	d00a      	beq.n	8117796 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8117780:	f04f 0350 	mov.w	r3, #80	; 0x50
 8117784:	f383 8811 	msr	BASEPRI, r3
 8117788:	f3bf 8f6f 	isb	sy
 811778c:	f3bf 8f4f 	dsb	sy
 8117790:	60fb      	str	r3, [r7, #12]
}
 8117792:	bf00      	nop
 8117794:	e7fe      	b.n	8117794 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8117796:	693b      	ldr	r3, [r7, #16]
 8117798:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 811779a:	2b00      	cmp	r3, #0
 811779c:	d10a      	bne.n	81177b4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 811779e:	f04f 0350 	mov.w	r3, #80	; 0x50
 81177a2:	f383 8811 	msr	BASEPRI, r3
 81177a6:	f3bf 8f6f 	isb	sy
 81177aa:	f3bf 8f4f 	dsb	sy
 81177ae:	60bb      	str	r3, [r7, #8]
}
 81177b0:	bf00      	nop
 81177b2:	e7fe      	b.n	81177b2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 81177b4:	693b      	ldr	r3, [r7, #16]
 81177b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81177b8:	1e5a      	subs	r2, r3, #1
 81177ba:	693b      	ldr	r3, [r7, #16]
 81177bc:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 81177be:	693b      	ldr	r3, [r7, #16]
 81177c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 81177c2:	693b      	ldr	r3, [r7, #16]
 81177c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 81177c6:	429a      	cmp	r2, r3
 81177c8:	d02c      	beq.n	8117824 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 81177ca:	693b      	ldr	r3, [r7, #16]
 81177cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81177ce:	2b00      	cmp	r3, #0
 81177d0:	d128      	bne.n	8117824 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 81177d2:	693b      	ldr	r3, [r7, #16]
 81177d4:	3304      	adds	r3, #4
 81177d6:	4618      	mov	r0, r3
 81177d8:	f7fe f956 	bl	8115a88 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 81177dc:	693b      	ldr	r3, [r7, #16]
 81177de:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 81177e0:	693b      	ldr	r3, [r7, #16]
 81177e2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 81177e4:	693b      	ldr	r3, [r7, #16]
 81177e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81177e8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 81177ec:	693b      	ldr	r3, [r7, #16]
 81177ee:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 81177f0:	693b      	ldr	r3, [r7, #16]
 81177f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 81177f4:	4b0f      	ldr	r3, [pc, #60]	; (8117834 <xTaskPriorityDisinherit+0xd4>)
 81177f6:	681b      	ldr	r3, [r3, #0]
 81177f8:	429a      	cmp	r2, r3
 81177fa:	d903      	bls.n	8117804 <xTaskPriorityDisinherit+0xa4>
 81177fc:	693b      	ldr	r3, [r7, #16]
 81177fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8117800:	4a0c      	ldr	r2, [pc, #48]	; (8117834 <xTaskPriorityDisinherit+0xd4>)
 8117802:	6013      	str	r3, [r2, #0]
 8117804:	693b      	ldr	r3, [r7, #16]
 8117806:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8117808:	4613      	mov	r3, r2
 811780a:	009b      	lsls	r3, r3, #2
 811780c:	4413      	add	r3, r2
 811780e:	009b      	lsls	r3, r3, #2
 8117810:	4a09      	ldr	r2, [pc, #36]	; (8117838 <xTaskPriorityDisinherit+0xd8>)
 8117812:	441a      	add	r2, r3
 8117814:	693b      	ldr	r3, [r7, #16]
 8117816:	3304      	adds	r3, #4
 8117818:	4619      	mov	r1, r3
 811781a:	4610      	mov	r0, r2
 811781c:	f7fe f8d7 	bl	81159ce <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8117820:	2301      	movs	r3, #1
 8117822:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8117824:	697b      	ldr	r3, [r7, #20]
	}
 8117826:	4618      	mov	r0, r3
 8117828:	3718      	adds	r7, #24
 811782a:	46bd      	mov	sp, r7
 811782c:	bd80      	pop	{r7, pc}
 811782e:	bf00      	nop
 8117830:	1000467c 	.word	0x1000467c
 8117834:	10004b58 	.word	0x10004b58
 8117838:	10004680 	.word	0x10004680

0811783c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 811783c:	b580      	push	{r7, lr}
 811783e:	b084      	sub	sp, #16
 8117840:	af00      	add	r7, sp, #0
 8117842:	6078      	str	r0, [r7, #4]
 8117844:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8117846:	4b21      	ldr	r3, [pc, #132]	; (81178cc <prvAddCurrentTaskToDelayedList+0x90>)
 8117848:	681b      	ldr	r3, [r3, #0]
 811784a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 811784c:	4b20      	ldr	r3, [pc, #128]	; (81178d0 <prvAddCurrentTaskToDelayedList+0x94>)
 811784e:	681b      	ldr	r3, [r3, #0]
 8117850:	3304      	adds	r3, #4
 8117852:	4618      	mov	r0, r3
 8117854:	f7fe f918 	bl	8115a88 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8117858:	687b      	ldr	r3, [r7, #4]
 811785a:	f1b3 3fff 	cmp.w	r3, #4294967295
 811785e:	d10a      	bne.n	8117876 <prvAddCurrentTaskToDelayedList+0x3a>
 8117860:	683b      	ldr	r3, [r7, #0]
 8117862:	2b00      	cmp	r3, #0
 8117864:	d007      	beq.n	8117876 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8117866:	4b1a      	ldr	r3, [pc, #104]	; (81178d0 <prvAddCurrentTaskToDelayedList+0x94>)
 8117868:	681b      	ldr	r3, [r3, #0]
 811786a:	3304      	adds	r3, #4
 811786c:	4619      	mov	r1, r3
 811786e:	4819      	ldr	r0, [pc, #100]	; (81178d4 <prvAddCurrentTaskToDelayedList+0x98>)
 8117870:	f7fe f8ad 	bl	81159ce <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8117874:	e026      	b.n	81178c4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8117876:	68fa      	ldr	r2, [r7, #12]
 8117878:	687b      	ldr	r3, [r7, #4]
 811787a:	4413      	add	r3, r2
 811787c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 811787e:	4b14      	ldr	r3, [pc, #80]	; (81178d0 <prvAddCurrentTaskToDelayedList+0x94>)
 8117880:	681b      	ldr	r3, [r3, #0]
 8117882:	68ba      	ldr	r2, [r7, #8]
 8117884:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8117886:	68ba      	ldr	r2, [r7, #8]
 8117888:	68fb      	ldr	r3, [r7, #12]
 811788a:	429a      	cmp	r2, r3
 811788c:	d209      	bcs.n	81178a2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 811788e:	4b12      	ldr	r3, [pc, #72]	; (81178d8 <prvAddCurrentTaskToDelayedList+0x9c>)
 8117890:	681a      	ldr	r2, [r3, #0]
 8117892:	4b0f      	ldr	r3, [pc, #60]	; (81178d0 <prvAddCurrentTaskToDelayedList+0x94>)
 8117894:	681b      	ldr	r3, [r3, #0]
 8117896:	3304      	adds	r3, #4
 8117898:	4619      	mov	r1, r3
 811789a:	4610      	mov	r0, r2
 811789c:	f7fe f8bb 	bl	8115a16 <vListInsert>
}
 81178a0:	e010      	b.n	81178c4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 81178a2:	4b0e      	ldr	r3, [pc, #56]	; (81178dc <prvAddCurrentTaskToDelayedList+0xa0>)
 81178a4:	681a      	ldr	r2, [r3, #0]
 81178a6:	4b0a      	ldr	r3, [pc, #40]	; (81178d0 <prvAddCurrentTaskToDelayedList+0x94>)
 81178a8:	681b      	ldr	r3, [r3, #0]
 81178aa:	3304      	adds	r3, #4
 81178ac:	4619      	mov	r1, r3
 81178ae:	4610      	mov	r0, r2
 81178b0:	f7fe f8b1 	bl	8115a16 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 81178b4:	4b0a      	ldr	r3, [pc, #40]	; (81178e0 <prvAddCurrentTaskToDelayedList+0xa4>)
 81178b6:	681b      	ldr	r3, [r3, #0]
 81178b8:	68ba      	ldr	r2, [r7, #8]
 81178ba:	429a      	cmp	r2, r3
 81178bc:	d202      	bcs.n	81178c4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 81178be:	4a08      	ldr	r2, [pc, #32]	; (81178e0 <prvAddCurrentTaskToDelayedList+0xa4>)
 81178c0:	68bb      	ldr	r3, [r7, #8]
 81178c2:	6013      	str	r3, [r2, #0]
}
 81178c4:	bf00      	nop
 81178c6:	3710      	adds	r7, #16
 81178c8:	46bd      	mov	sp, r7
 81178ca:	bd80      	pop	{r7, pc}
 81178cc:	10004b54 	.word	0x10004b54
 81178d0:	1000467c 	.word	0x1000467c
 81178d4:	10004b3c 	.word	0x10004b3c
 81178d8:	10004b0c 	.word	0x10004b0c
 81178dc:	10004b08 	.word	0x10004b08
 81178e0:	10004b70 	.word	0x10004b70

081178e4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 81178e4:	b580      	push	{r7, lr}
 81178e6:	b08a      	sub	sp, #40	; 0x28
 81178e8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 81178ea:	2300      	movs	r3, #0
 81178ec:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 81178ee:	f000 fb07 	bl	8117f00 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 81178f2:	4b1c      	ldr	r3, [pc, #112]	; (8117964 <xTimerCreateTimerTask+0x80>)
 81178f4:	681b      	ldr	r3, [r3, #0]
 81178f6:	2b00      	cmp	r3, #0
 81178f8:	d021      	beq.n	811793e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 81178fa:	2300      	movs	r3, #0
 81178fc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 81178fe:	2300      	movs	r3, #0
 8117900:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8117902:	1d3a      	adds	r2, r7, #4
 8117904:	f107 0108 	add.w	r1, r7, #8
 8117908:	f107 030c 	add.w	r3, r7, #12
 811790c:	4618      	mov	r0, r3
 811790e:	f7fd fe2d 	bl	811556c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8117912:	6879      	ldr	r1, [r7, #4]
 8117914:	68bb      	ldr	r3, [r7, #8]
 8117916:	68fa      	ldr	r2, [r7, #12]
 8117918:	9202      	str	r2, [sp, #8]
 811791a:	9301      	str	r3, [sp, #4]
 811791c:	2302      	movs	r3, #2
 811791e:	9300      	str	r3, [sp, #0]
 8117920:	2300      	movs	r3, #0
 8117922:	460a      	mov	r2, r1
 8117924:	4910      	ldr	r1, [pc, #64]	; (8117968 <xTimerCreateTimerTask+0x84>)
 8117926:	4811      	ldr	r0, [pc, #68]	; (811796c <xTimerCreateTimerTask+0x88>)
 8117928:	f7ff f8cc 	bl	8116ac4 <xTaskCreateStatic>
 811792c:	4603      	mov	r3, r0
 811792e:	4a10      	ldr	r2, [pc, #64]	; (8117970 <xTimerCreateTimerTask+0x8c>)
 8117930:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8117932:	4b0f      	ldr	r3, [pc, #60]	; (8117970 <xTimerCreateTimerTask+0x8c>)
 8117934:	681b      	ldr	r3, [r3, #0]
 8117936:	2b00      	cmp	r3, #0
 8117938:	d001      	beq.n	811793e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 811793a:	2301      	movs	r3, #1
 811793c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 811793e:	697b      	ldr	r3, [r7, #20]
 8117940:	2b00      	cmp	r3, #0
 8117942:	d10a      	bne.n	811795a <xTimerCreateTimerTask+0x76>
	__asm volatile
 8117944:	f04f 0350 	mov.w	r3, #80	; 0x50
 8117948:	f383 8811 	msr	BASEPRI, r3
 811794c:	f3bf 8f6f 	isb	sy
 8117950:	f3bf 8f4f 	dsb	sy
 8117954:	613b      	str	r3, [r7, #16]
}
 8117956:	bf00      	nop
 8117958:	e7fe      	b.n	8117958 <xTimerCreateTimerTask+0x74>
	return xReturn;
 811795a:	697b      	ldr	r3, [r7, #20]
}
 811795c:	4618      	mov	r0, r3
 811795e:	3718      	adds	r7, #24
 8117960:	46bd      	mov	sp, r7
 8117962:	bd80      	pop	{r7, pc}
 8117964:	10004bac 	.word	0x10004bac
 8117968:	0811b428 	.word	0x0811b428
 811796c:	08117aa9 	.word	0x08117aa9
 8117970:	10004bb0 	.word	0x10004bb0

08117974 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8117974:	b580      	push	{r7, lr}
 8117976:	b08a      	sub	sp, #40	; 0x28
 8117978:	af00      	add	r7, sp, #0
 811797a:	60f8      	str	r0, [r7, #12]
 811797c:	60b9      	str	r1, [r7, #8]
 811797e:	607a      	str	r2, [r7, #4]
 8117980:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8117982:	2300      	movs	r3, #0
 8117984:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8117986:	68fb      	ldr	r3, [r7, #12]
 8117988:	2b00      	cmp	r3, #0
 811798a:	d10a      	bne.n	81179a2 <xTimerGenericCommand+0x2e>
	__asm volatile
 811798c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8117990:	f383 8811 	msr	BASEPRI, r3
 8117994:	f3bf 8f6f 	isb	sy
 8117998:	f3bf 8f4f 	dsb	sy
 811799c:	623b      	str	r3, [r7, #32]
}
 811799e:	bf00      	nop
 81179a0:	e7fe      	b.n	81179a0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 81179a2:	4b1a      	ldr	r3, [pc, #104]	; (8117a0c <xTimerGenericCommand+0x98>)
 81179a4:	681b      	ldr	r3, [r3, #0]
 81179a6:	2b00      	cmp	r3, #0
 81179a8:	d02a      	beq.n	8117a00 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 81179aa:	68bb      	ldr	r3, [r7, #8]
 81179ac:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 81179ae:	687b      	ldr	r3, [r7, #4]
 81179b0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 81179b2:	68fb      	ldr	r3, [r7, #12]
 81179b4:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 81179b6:	68bb      	ldr	r3, [r7, #8]
 81179b8:	2b05      	cmp	r3, #5
 81179ba:	dc18      	bgt.n	81179ee <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 81179bc:	f7ff feb2 	bl	8117724 <xTaskGetSchedulerState>
 81179c0:	4603      	mov	r3, r0
 81179c2:	2b02      	cmp	r3, #2
 81179c4:	d109      	bne.n	81179da <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 81179c6:	4b11      	ldr	r3, [pc, #68]	; (8117a0c <xTimerGenericCommand+0x98>)
 81179c8:	6818      	ldr	r0, [r3, #0]
 81179ca:	f107 0110 	add.w	r1, r7, #16
 81179ce:	2300      	movs	r3, #0
 81179d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 81179d2:	f7fe fc0f 	bl	81161f4 <xQueueGenericSend>
 81179d6:	6278      	str	r0, [r7, #36]	; 0x24
 81179d8:	e012      	b.n	8117a00 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 81179da:	4b0c      	ldr	r3, [pc, #48]	; (8117a0c <xTimerGenericCommand+0x98>)
 81179dc:	6818      	ldr	r0, [r3, #0]
 81179de:	f107 0110 	add.w	r1, r7, #16
 81179e2:	2300      	movs	r3, #0
 81179e4:	2200      	movs	r2, #0
 81179e6:	f7fe fc05 	bl	81161f4 <xQueueGenericSend>
 81179ea:	6278      	str	r0, [r7, #36]	; 0x24
 81179ec:	e008      	b.n	8117a00 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 81179ee:	4b07      	ldr	r3, [pc, #28]	; (8117a0c <xTimerGenericCommand+0x98>)
 81179f0:	6818      	ldr	r0, [r3, #0]
 81179f2:	f107 0110 	add.w	r1, r7, #16
 81179f6:	2300      	movs	r3, #0
 81179f8:	683a      	ldr	r2, [r7, #0]
 81179fa:	f7fe fcf9 	bl	81163f0 <xQueueGenericSendFromISR>
 81179fe:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8117a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8117a02:	4618      	mov	r0, r3
 8117a04:	3728      	adds	r7, #40	; 0x28
 8117a06:	46bd      	mov	sp, r7
 8117a08:	bd80      	pop	{r7, pc}
 8117a0a:	bf00      	nop
 8117a0c:	10004bac 	.word	0x10004bac

08117a10 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8117a10:	b580      	push	{r7, lr}
 8117a12:	b088      	sub	sp, #32
 8117a14:	af02      	add	r7, sp, #8
 8117a16:	6078      	str	r0, [r7, #4]
 8117a18:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8117a1a:	4b22      	ldr	r3, [pc, #136]	; (8117aa4 <prvProcessExpiredTimer+0x94>)
 8117a1c:	681b      	ldr	r3, [r3, #0]
 8117a1e:	68db      	ldr	r3, [r3, #12]
 8117a20:	68db      	ldr	r3, [r3, #12]
 8117a22:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8117a24:	697b      	ldr	r3, [r7, #20]
 8117a26:	3304      	adds	r3, #4
 8117a28:	4618      	mov	r0, r3
 8117a2a:	f7fe f82d 	bl	8115a88 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8117a2e:	697b      	ldr	r3, [r7, #20]
 8117a30:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8117a34:	f003 0304 	and.w	r3, r3, #4
 8117a38:	2b00      	cmp	r3, #0
 8117a3a:	d022      	beq.n	8117a82 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8117a3c:	697b      	ldr	r3, [r7, #20]
 8117a3e:	699a      	ldr	r2, [r3, #24]
 8117a40:	687b      	ldr	r3, [r7, #4]
 8117a42:	18d1      	adds	r1, r2, r3
 8117a44:	687b      	ldr	r3, [r7, #4]
 8117a46:	683a      	ldr	r2, [r7, #0]
 8117a48:	6978      	ldr	r0, [r7, #20]
 8117a4a:	f000 f8d1 	bl	8117bf0 <prvInsertTimerInActiveList>
 8117a4e:	4603      	mov	r3, r0
 8117a50:	2b00      	cmp	r3, #0
 8117a52:	d01f      	beq.n	8117a94 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8117a54:	2300      	movs	r3, #0
 8117a56:	9300      	str	r3, [sp, #0]
 8117a58:	2300      	movs	r3, #0
 8117a5a:	687a      	ldr	r2, [r7, #4]
 8117a5c:	2100      	movs	r1, #0
 8117a5e:	6978      	ldr	r0, [r7, #20]
 8117a60:	f7ff ff88 	bl	8117974 <xTimerGenericCommand>
 8117a64:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8117a66:	693b      	ldr	r3, [r7, #16]
 8117a68:	2b00      	cmp	r3, #0
 8117a6a:	d113      	bne.n	8117a94 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8117a6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8117a70:	f383 8811 	msr	BASEPRI, r3
 8117a74:	f3bf 8f6f 	isb	sy
 8117a78:	f3bf 8f4f 	dsb	sy
 8117a7c:	60fb      	str	r3, [r7, #12]
}
 8117a7e:	bf00      	nop
 8117a80:	e7fe      	b.n	8117a80 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8117a82:	697b      	ldr	r3, [r7, #20]
 8117a84:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8117a88:	f023 0301 	bic.w	r3, r3, #1
 8117a8c:	b2da      	uxtb	r2, r3
 8117a8e:	697b      	ldr	r3, [r7, #20]
 8117a90:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8117a94:	697b      	ldr	r3, [r7, #20]
 8117a96:	6a1b      	ldr	r3, [r3, #32]
 8117a98:	6978      	ldr	r0, [r7, #20]
 8117a9a:	4798      	blx	r3
}
 8117a9c:	bf00      	nop
 8117a9e:	3718      	adds	r7, #24
 8117aa0:	46bd      	mov	sp, r7
 8117aa2:	bd80      	pop	{r7, pc}
 8117aa4:	10004ba4 	.word	0x10004ba4

08117aa8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8117aa8:	b580      	push	{r7, lr}
 8117aaa:	b084      	sub	sp, #16
 8117aac:	af00      	add	r7, sp, #0
 8117aae:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8117ab0:	f107 0308 	add.w	r3, r7, #8
 8117ab4:	4618      	mov	r0, r3
 8117ab6:	f000 f857 	bl	8117b68 <prvGetNextExpireTime>
 8117aba:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8117abc:	68bb      	ldr	r3, [r7, #8]
 8117abe:	4619      	mov	r1, r3
 8117ac0:	68f8      	ldr	r0, [r7, #12]
 8117ac2:	f000 f803 	bl	8117acc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8117ac6:	f000 f8d5 	bl	8117c74 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8117aca:	e7f1      	b.n	8117ab0 <prvTimerTask+0x8>

08117acc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8117acc:	b580      	push	{r7, lr}
 8117ace:	b084      	sub	sp, #16
 8117ad0:	af00      	add	r7, sp, #0
 8117ad2:	6078      	str	r0, [r7, #4]
 8117ad4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8117ad6:	f7ff fa31 	bl	8116f3c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8117ada:	f107 0308 	add.w	r3, r7, #8
 8117ade:	4618      	mov	r0, r3
 8117ae0:	f000 f866 	bl	8117bb0 <prvSampleTimeNow>
 8117ae4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8117ae6:	68bb      	ldr	r3, [r7, #8]
 8117ae8:	2b00      	cmp	r3, #0
 8117aea:	d130      	bne.n	8117b4e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8117aec:	683b      	ldr	r3, [r7, #0]
 8117aee:	2b00      	cmp	r3, #0
 8117af0:	d10a      	bne.n	8117b08 <prvProcessTimerOrBlockTask+0x3c>
 8117af2:	687a      	ldr	r2, [r7, #4]
 8117af4:	68fb      	ldr	r3, [r7, #12]
 8117af6:	429a      	cmp	r2, r3
 8117af8:	d806      	bhi.n	8117b08 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8117afa:	f7ff fa2d 	bl	8116f58 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8117afe:	68f9      	ldr	r1, [r7, #12]
 8117b00:	6878      	ldr	r0, [r7, #4]
 8117b02:	f7ff ff85 	bl	8117a10 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8117b06:	e024      	b.n	8117b52 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8117b08:	683b      	ldr	r3, [r7, #0]
 8117b0a:	2b00      	cmp	r3, #0
 8117b0c:	d008      	beq.n	8117b20 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8117b0e:	4b13      	ldr	r3, [pc, #76]	; (8117b5c <prvProcessTimerOrBlockTask+0x90>)
 8117b10:	681b      	ldr	r3, [r3, #0]
 8117b12:	681b      	ldr	r3, [r3, #0]
 8117b14:	2b00      	cmp	r3, #0
 8117b16:	d101      	bne.n	8117b1c <prvProcessTimerOrBlockTask+0x50>
 8117b18:	2301      	movs	r3, #1
 8117b1a:	e000      	b.n	8117b1e <prvProcessTimerOrBlockTask+0x52>
 8117b1c:	2300      	movs	r3, #0
 8117b1e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8117b20:	4b0f      	ldr	r3, [pc, #60]	; (8117b60 <prvProcessTimerOrBlockTask+0x94>)
 8117b22:	6818      	ldr	r0, [r3, #0]
 8117b24:	687a      	ldr	r2, [r7, #4]
 8117b26:	68fb      	ldr	r3, [r7, #12]
 8117b28:	1ad3      	subs	r3, r2, r3
 8117b2a:	683a      	ldr	r2, [r7, #0]
 8117b2c:	4619      	mov	r1, r3
 8117b2e:	f7fe ff95 	bl	8116a5c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8117b32:	f7ff fa11 	bl	8116f58 <xTaskResumeAll>
 8117b36:	4603      	mov	r3, r0
 8117b38:	2b00      	cmp	r3, #0
 8117b3a:	d10a      	bne.n	8117b52 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8117b3c:	4b09      	ldr	r3, [pc, #36]	; (8117b64 <prvProcessTimerOrBlockTask+0x98>)
 8117b3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8117b42:	601a      	str	r2, [r3, #0]
 8117b44:	f3bf 8f4f 	dsb	sy
 8117b48:	f3bf 8f6f 	isb	sy
}
 8117b4c:	e001      	b.n	8117b52 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8117b4e:	f7ff fa03 	bl	8116f58 <xTaskResumeAll>
}
 8117b52:	bf00      	nop
 8117b54:	3710      	adds	r7, #16
 8117b56:	46bd      	mov	sp, r7
 8117b58:	bd80      	pop	{r7, pc}
 8117b5a:	bf00      	nop
 8117b5c:	10004ba8 	.word	0x10004ba8
 8117b60:	10004bac 	.word	0x10004bac
 8117b64:	e000ed04 	.word	0xe000ed04

08117b68 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8117b68:	b480      	push	{r7}
 8117b6a:	b085      	sub	sp, #20
 8117b6c:	af00      	add	r7, sp, #0
 8117b6e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8117b70:	4b0e      	ldr	r3, [pc, #56]	; (8117bac <prvGetNextExpireTime+0x44>)
 8117b72:	681b      	ldr	r3, [r3, #0]
 8117b74:	681b      	ldr	r3, [r3, #0]
 8117b76:	2b00      	cmp	r3, #0
 8117b78:	d101      	bne.n	8117b7e <prvGetNextExpireTime+0x16>
 8117b7a:	2201      	movs	r2, #1
 8117b7c:	e000      	b.n	8117b80 <prvGetNextExpireTime+0x18>
 8117b7e:	2200      	movs	r2, #0
 8117b80:	687b      	ldr	r3, [r7, #4]
 8117b82:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8117b84:	687b      	ldr	r3, [r7, #4]
 8117b86:	681b      	ldr	r3, [r3, #0]
 8117b88:	2b00      	cmp	r3, #0
 8117b8a:	d105      	bne.n	8117b98 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8117b8c:	4b07      	ldr	r3, [pc, #28]	; (8117bac <prvGetNextExpireTime+0x44>)
 8117b8e:	681b      	ldr	r3, [r3, #0]
 8117b90:	68db      	ldr	r3, [r3, #12]
 8117b92:	681b      	ldr	r3, [r3, #0]
 8117b94:	60fb      	str	r3, [r7, #12]
 8117b96:	e001      	b.n	8117b9c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8117b98:	2300      	movs	r3, #0
 8117b9a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8117b9c:	68fb      	ldr	r3, [r7, #12]
}
 8117b9e:	4618      	mov	r0, r3
 8117ba0:	3714      	adds	r7, #20
 8117ba2:	46bd      	mov	sp, r7
 8117ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8117ba8:	4770      	bx	lr
 8117baa:	bf00      	nop
 8117bac:	10004ba4 	.word	0x10004ba4

08117bb0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8117bb0:	b580      	push	{r7, lr}
 8117bb2:	b084      	sub	sp, #16
 8117bb4:	af00      	add	r7, sp, #0
 8117bb6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8117bb8:	f7ff fa6c 	bl	8117094 <xTaskGetTickCount>
 8117bbc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8117bbe:	4b0b      	ldr	r3, [pc, #44]	; (8117bec <prvSampleTimeNow+0x3c>)
 8117bc0:	681b      	ldr	r3, [r3, #0]
 8117bc2:	68fa      	ldr	r2, [r7, #12]
 8117bc4:	429a      	cmp	r2, r3
 8117bc6:	d205      	bcs.n	8117bd4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8117bc8:	f000 f936 	bl	8117e38 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8117bcc:	687b      	ldr	r3, [r7, #4]
 8117bce:	2201      	movs	r2, #1
 8117bd0:	601a      	str	r2, [r3, #0]
 8117bd2:	e002      	b.n	8117bda <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8117bd4:	687b      	ldr	r3, [r7, #4]
 8117bd6:	2200      	movs	r2, #0
 8117bd8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8117bda:	4a04      	ldr	r2, [pc, #16]	; (8117bec <prvSampleTimeNow+0x3c>)
 8117bdc:	68fb      	ldr	r3, [r7, #12]
 8117bde:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8117be0:	68fb      	ldr	r3, [r7, #12]
}
 8117be2:	4618      	mov	r0, r3
 8117be4:	3710      	adds	r7, #16
 8117be6:	46bd      	mov	sp, r7
 8117be8:	bd80      	pop	{r7, pc}
 8117bea:	bf00      	nop
 8117bec:	10004bb4 	.word	0x10004bb4

08117bf0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8117bf0:	b580      	push	{r7, lr}
 8117bf2:	b086      	sub	sp, #24
 8117bf4:	af00      	add	r7, sp, #0
 8117bf6:	60f8      	str	r0, [r7, #12]
 8117bf8:	60b9      	str	r1, [r7, #8]
 8117bfa:	607a      	str	r2, [r7, #4]
 8117bfc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8117bfe:	2300      	movs	r3, #0
 8117c00:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8117c02:	68fb      	ldr	r3, [r7, #12]
 8117c04:	68ba      	ldr	r2, [r7, #8]
 8117c06:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8117c08:	68fb      	ldr	r3, [r7, #12]
 8117c0a:	68fa      	ldr	r2, [r7, #12]
 8117c0c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8117c0e:	68ba      	ldr	r2, [r7, #8]
 8117c10:	687b      	ldr	r3, [r7, #4]
 8117c12:	429a      	cmp	r2, r3
 8117c14:	d812      	bhi.n	8117c3c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8117c16:	687a      	ldr	r2, [r7, #4]
 8117c18:	683b      	ldr	r3, [r7, #0]
 8117c1a:	1ad2      	subs	r2, r2, r3
 8117c1c:	68fb      	ldr	r3, [r7, #12]
 8117c1e:	699b      	ldr	r3, [r3, #24]
 8117c20:	429a      	cmp	r2, r3
 8117c22:	d302      	bcc.n	8117c2a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8117c24:	2301      	movs	r3, #1
 8117c26:	617b      	str	r3, [r7, #20]
 8117c28:	e01b      	b.n	8117c62 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8117c2a:	4b10      	ldr	r3, [pc, #64]	; (8117c6c <prvInsertTimerInActiveList+0x7c>)
 8117c2c:	681a      	ldr	r2, [r3, #0]
 8117c2e:	68fb      	ldr	r3, [r7, #12]
 8117c30:	3304      	adds	r3, #4
 8117c32:	4619      	mov	r1, r3
 8117c34:	4610      	mov	r0, r2
 8117c36:	f7fd feee 	bl	8115a16 <vListInsert>
 8117c3a:	e012      	b.n	8117c62 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8117c3c:	687a      	ldr	r2, [r7, #4]
 8117c3e:	683b      	ldr	r3, [r7, #0]
 8117c40:	429a      	cmp	r2, r3
 8117c42:	d206      	bcs.n	8117c52 <prvInsertTimerInActiveList+0x62>
 8117c44:	68ba      	ldr	r2, [r7, #8]
 8117c46:	683b      	ldr	r3, [r7, #0]
 8117c48:	429a      	cmp	r2, r3
 8117c4a:	d302      	bcc.n	8117c52 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8117c4c:	2301      	movs	r3, #1
 8117c4e:	617b      	str	r3, [r7, #20]
 8117c50:	e007      	b.n	8117c62 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8117c52:	4b07      	ldr	r3, [pc, #28]	; (8117c70 <prvInsertTimerInActiveList+0x80>)
 8117c54:	681a      	ldr	r2, [r3, #0]
 8117c56:	68fb      	ldr	r3, [r7, #12]
 8117c58:	3304      	adds	r3, #4
 8117c5a:	4619      	mov	r1, r3
 8117c5c:	4610      	mov	r0, r2
 8117c5e:	f7fd feda 	bl	8115a16 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8117c62:	697b      	ldr	r3, [r7, #20]
}
 8117c64:	4618      	mov	r0, r3
 8117c66:	3718      	adds	r7, #24
 8117c68:	46bd      	mov	sp, r7
 8117c6a:	bd80      	pop	{r7, pc}
 8117c6c:	10004ba8 	.word	0x10004ba8
 8117c70:	10004ba4 	.word	0x10004ba4

08117c74 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8117c74:	b580      	push	{r7, lr}
 8117c76:	b08e      	sub	sp, #56	; 0x38
 8117c78:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8117c7a:	e0ca      	b.n	8117e12 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8117c7c:	687b      	ldr	r3, [r7, #4]
 8117c7e:	2b00      	cmp	r3, #0
 8117c80:	da18      	bge.n	8117cb4 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8117c82:	1d3b      	adds	r3, r7, #4
 8117c84:	3304      	adds	r3, #4
 8117c86:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8117c88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8117c8a:	2b00      	cmp	r3, #0
 8117c8c:	d10a      	bne.n	8117ca4 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8117c8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8117c92:	f383 8811 	msr	BASEPRI, r3
 8117c96:	f3bf 8f6f 	isb	sy
 8117c9a:	f3bf 8f4f 	dsb	sy
 8117c9e:	61fb      	str	r3, [r7, #28]
}
 8117ca0:	bf00      	nop
 8117ca2:	e7fe      	b.n	8117ca2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8117ca4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8117ca6:	681b      	ldr	r3, [r3, #0]
 8117ca8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8117caa:	6850      	ldr	r0, [r2, #4]
 8117cac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8117cae:	6892      	ldr	r2, [r2, #8]
 8117cb0:	4611      	mov	r1, r2
 8117cb2:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8117cb4:	687b      	ldr	r3, [r7, #4]
 8117cb6:	2b00      	cmp	r3, #0
 8117cb8:	f2c0 80aa 	blt.w	8117e10 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8117cbc:	68fb      	ldr	r3, [r7, #12]
 8117cbe:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8117cc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8117cc2:	695b      	ldr	r3, [r3, #20]
 8117cc4:	2b00      	cmp	r3, #0
 8117cc6:	d004      	beq.n	8117cd2 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8117cc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8117cca:	3304      	adds	r3, #4
 8117ccc:	4618      	mov	r0, r3
 8117cce:	f7fd fedb 	bl	8115a88 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8117cd2:	463b      	mov	r3, r7
 8117cd4:	4618      	mov	r0, r3
 8117cd6:	f7ff ff6b 	bl	8117bb0 <prvSampleTimeNow>
 8117cda:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8117cdc:	687b      	ldr	r3, [r7, #4]
 8117cde:	2b09      	cmp	r3, #9
 8117ce0:	f200 8097 	bhi.w	8117e12 <prvProcessReceivedCommands+0x19e>
 8117ce4:	a201      	add	r2, pc, #4	; (adr r2, 8117cec <prvProcessReceivedCommands+0x78>)
 8117ce6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8117cea:	bf00      	nop
 8117cec:	08117d15 	.word	0x08117d15
 8117cf0:	08117d15 	.word	0x08117d15
 8117cf4:	08117d15 	.word	0x08117d15
 8117cf8:	08117d89 	.word	0x08117d89
 8117cfc:	08117d9d 	.word	0x08117d9d
 8117d00:	08117de7 	.word	0x08117de7
 8117d04:	08117d15 	.word	0x08117d15
 8117d08:	08117d15 	.word	0x08117d15
 8117d0c:	08117d89 	.word	0x08117d89
 8117d10:	08117d9d 	.word	0x08117d9d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8117d14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8117d16:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8117d1a:	f043 0301 	orr.w	r3, r3, #1
 8117d1e:	b2da      	uxtb	r2, r3
 8117d20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8117d22:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8117d26:	68ba      	ldr	r2, [r7, #8]
 8117d28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8117d2a:	699b      	ldr	r3, [r3, #24]
 8117d2c:	18d1      	adds	r1, r2, r3
 8117d2e:	68bb      	ldr	r3, [r7, #8]
 8117d30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8117d32:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8117d34:	f7ff ff5c 	bl	8117bf0 <prvInsertTimerInActiveList>
 8117d38:	4603      	mov	r3, r0
 8117d3a:	2b00      	cmp	r3, #0
 8117d3c:	d069      	beq.n	8117e12 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8117d3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8117d40:	6a1b      	ldr	r3, [r3, #32]
 8117d42:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8117d44:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8117d46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8117d48:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8117d4c:	f003 0304 	and.w	r3, r3, #4
 8117d50:	2b00      	cmp	r3, #0
 8117d52:	d05e      	beq.n	8117e12 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8117d54:	68ba      	ldr	r2, [r7, #8]
 8117d56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8117d58:	699b      	ldr	r3, [r3, #24]
 8117d5a:	441a      	add	r2, r3
 8117d5c:	2300      	movs	r3, #0
 8117d5e:	9300      	str	r3, [sp, #0]
 8117d60:	2300      	movs	r3, #0
 8117d62:	2100      	movs	r1, #0
 8117d64:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8117d66:	f7ff fe05 	bl	8117974 <xTimerGenericCommand>
 8117d6a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8117d6c:	6a3b      	ldr	r3, [r7, #32]
 8117d6e:	2b00      	cmp	r3, #0
 8117d70:	d14f      	bne.n	8117e12 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8117d72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8117d76:	f383 8811 	msr	BASEPRI, r3
 8117d7a:	f3bf 8f6f 	isb	sy
 8117d7e:	f3bf 8f4f 	dsb	sy
 8117d82:	61bb      	str	r3, [r7, #24]
}
 8117d84:	bf00      	nop
 8117d86:	e7fe      	b.n	8117d86 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8117d88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8117d8a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8117d8e:	f023 0301 	bic.w	r3, r3, #1
 8117d92:	b2da      	uxtb	r2, r3
 8117d94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8117d96:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8117d9a:	e03a      	b.n	8117e12 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8117d9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8117d9e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8117da2:	f043 0301 	orr.w	r3, r3, #1
 8117da6:	b2da      	uxtb	r2, r3
 8117da8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8117daa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8117dae:	68ba      	ldr	r2, [r7, #8]
 8117db0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8117db2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8117db4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8117db6:	699b      	ldr	r3, [r3, #24]
 8117db8:	2b00      	cmp	r3, #0
 8117dba:	d10a      	bne.n	8117dd2 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8117dbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8117dc0:	f383 8811 	msr	BASEPRI, r3
 8117dc4:	f3bf 8f6f 	isb	sy
 8117dc8:	f3bf 8f4f 	dsb	sy
 8117dcc:	617b      	str	r3, [r7, #20]
}
 8117dce:	bf00      	nop
 8117dd0:	e7fe      	b.n	8117dd0 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8117dd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8117dd4:	699a      	ldr	r2, [r3, #24]
 8117dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8117dd8:	18d1      	adds	r1, r2, r3
 8117dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8117ddc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8117dde:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8117de0:	f7ff ff06 	bl	8117bf0 <prvInsertTimerInActiveList>
					break;
 8117de4:	e015      	b.n	8117e12 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8117de6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8117de8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8117dec:	f003 0302 	and.w	r3, r3, #2
 8117df0:	2b00      	cmp	r3, #0
 8117df2:	d103      	bne.n	8117dfc <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8117df4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8117df6:	f7fd fc9f 	bl	8115738 <vPortFree>
 8117dfa:	e00a      	b.n	8117e12 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8117dfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8117dfe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8117e02:	f023 0301 	bic.w	r3, r3, #1
 8117e06:	b2da      	uxtb	r2, r3
 8117e08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8117e0a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8117e0e:	e000      	b.n	8117e12 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8117e10:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8117e12:	4b08      	ldr	r3, [pc, #32]	; (8117e34 <prvProcessReceivedCommands+0x1c0>)
 8117e14:	681b      	ldr	r3, [r3, #0]
 8117e16:	1d39      	adds	r1, r7, #4
 8117e18:	2200      	movs	r2, #0
 8117e1a:	4618      	mov	r0, r3
 8117e1c:	f7fe fb84 	bl	8116528 <xQueueReceive>
 8117e20:	4603      	mov	r3, r0
 8117e22:	2b00      	cmp	r3, #0
 8117e24:	f47f af2a 	bne.w	8117c7c <prvProcessReceivedCommands+0x8>
	}
}
 8117e28:	bf00      	nop
 8117e2a:	bf00      	nop
 8117e2c:	3730      	adds	r7, #48	; 0x30
 8117e2e:	46bd      	mov	sp, r7
 8117e30:	bd80      	pop	{r7, pc}
 8117e32:	bf00      	nop
 8117e34:	10004bac 	.word	0x10004bac

08117e38 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8117e38:	b580      	push	{r7, lr}
 8117e3a:	b088      	sub	sp, #32
 8117e3c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8117e3e:	e048      	b.n	8117ed2 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8117e40:	4b2d      	ldr	r3, [pc, #180]	; (8117ef8 <prvSwitchTimerLists+0xc0>)
 8117e42:	681b      	ldr	r3, [r3, #0]
 8117e44:	68db      	ldr	r3, [r3, #12]
 8117e46:	681b      	ldr	r3, [r3, #0]
 8117e48:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8117e4a:	4b2b      	ldr	r3, [pc, #172]	; (8117ef8 <prvSwitchTimerLists+0xc0>)
 8117e4c:	681b      	ldr	r3, [r3, #0]
 8117e4e:	68db      	ldr	r3, [r3, #12]
 8117e50:	68db      	ldr	r3, [r3, #12]
 8117e52:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8117e54:	68fb      	ldr	r3, [r7, #12]
 8117e56:	3304      	adds	r3, #4
 8117e58:	4618      	mov	r0, r3
 8117e5a:	f7fd fe15 	bl	8115a88 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8117e5e:	68fb      	ldr	r3, [r7, #12]
 8117e60:	6a1b      	ldr	r3, [r3, #32]
 8117e62:	68f8      	ldr	r0, [r7, #12]
 8117e64:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8117e66:	68fb      	ldr	r3, [r7, #12]
 8117e68:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8117e6c:	f003 0304 	and.w	r3, r3, #4
 8117e70:	2b00      	cmp	r3, #0
 8117e72:	d02e      	beq.n	8117ed2 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8117e74:	68fb      	ldr	r3, [r7, #12]
 8117e76:	699b      	ldr	r3, [r3, #24]
 8117e78:	693a      	ldr	r2, [r7, #16]
 8117e7a:	4413      	add	r3, r2
 8117e7c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8117e7e:	68ba      	ldr	r2, [r7, #8]
 8117e80:	693b      	ldr	r3, [r7, #16]
 8117e82:	429a      	cmp	r2, r3
 8117e84:	d90e      	bls.n	8117ea4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8117e86:	68fb      	ldr	r3, [r7, #12]
 8117e88:	68ba      	ldr	r2, [r7, #8]
 8117e8a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8117e8c:	68fb      	ldr	r3, [r7, #12]
 8117e8e:	68fa      	ldr	r2, [r7, #12]
 8117e90:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8117e92:	4b19      	ldr	r3, [pc, #100]	; (8117ef8 <prvSwitchTimerLists+0xc0>)
 8117e94:	681a      	ldr	r2, [r3, #0]
 8117e96:	68fb      	ldr	r3, [r7, #12]
 8117e98:	3304      	adds	r3, #4
 8117e9a:	4619      	mov	r1, r3
 8117e9c:	4610      	mov	r0, r2
 8117e9e:	f7fd fdba 	bl	8115a16 <vListInsert>
 8117ea2:	e016      	b.n	8117ed2 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8117ea4:	2300      	movs	r3, #0
 8117ea6:	9300      	str	r3, [sp, #0]
 8117ea8:	2300      	movs	r3, #0
 8117eaa:	693a      	ldr	r2, [r7, #16]
 8117eac:	2100      	movs	r1, #0
 8117eae:	68f8      	ldr	r0, [r7, #12]
 8117eb0:	f7ff fd60 	bl	8117974 <xTimerGenericCommand>
 8117eb4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8117eb6:	687b      	ldr	r3, [r7, #4]
 8117eb8:	2b00      	cmp	r3, #0
 8117eba:	d10a      	bne.n	8117ed2 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8117ebc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8117ec0:	f383 8811 	msr	BASEPRI, r3
 8117ec4:	f3bf 8f6f 	isb	sy
 8117ec8:	f3bf 8f4f 	dsb	sy
 8117ecc:	603b      	str	r3, [r7, #0]
}
 8117ece:	bf00      	nop
 8117ed0:	e7fe      	b.n	8117ed0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8117ed2:	4b09      	ldr	r3, [pc, #36]	; (8117ef8 <prvSwitchTimerLists+0xc0>)
 8117ed4:	681b      	ldr	r3, [r3, #0]
 8117ed6:	681b      	ldr	r3, [r3, #0]
 8117ed8:	2b00      	cmp	r3, #0
 8117eda:	d1b1      	bne.n	8117e40 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8117edc:	4b06      	ldr	r3, [pc, #24]	; (8117ef8 <prvSwitchTimerLists+0xc0>)
 8117ede:	681b      	ldr	r3, [r3, #0]
 8117ee0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8117ee2:	4b06      	ldr	r3, [pc, #24]	; (8117efc <prvSwitchTimerLists+0xc4>)
 8117ee4:	681b      	ldr	r3, [r3, #0]
 8117ee6:	4a04      	ldr	r2, [pc, #16]	; (8117ef8 <prvSwitchTimerLists+0xc0>)
 8117ee8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8117eea:	4a04      	ldr	r2, [pc, #16]	; (8117efc <prvSwitchTimerLists+0xc4>)
 8117eec:	697b      	ldr	r3, [r7, #20]
 8117eee:	6013      	str	r3, [r2, #0]
}
 8117ef0:	bf00      	nop
 8117ef2:	3718      	adds	r7, #24
 8117ef4:	46bd      	mov	sp, r7
 8117ef6:	bd80      	pop	{r7, pc}
 8117ef8:	10004ba4 	.word	0x10004ba4
 8117efc:	10004ba8 	.word	0x10004ba8

08117f00 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8117f00:	b580      	push	{r7, lr}
 8117f02:	b082      	sub	sp, #8
 8117f04:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8117f06:	f7fd ff15 	bl	8115d34 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8117f0a:	4b15      	ldr	r3, [pc, #84]	; (8117f60 <prvCheckForValidListAndQueue+0x60>)
 8117f0c:	681b      	ldr	r3, [r3, #0]
 8117f0e:	2b00      	cmp	r3, #0
 8117f10:	d120      	bne.n	8117f54 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8117f12:	4814      	ldr	r0, [pc, #80]	; (8117f64 <prvCheckForValidListAndQueue+0x64>)
 8117f14:	f7fd fd2e 	bl	8115974 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8117f18:	4813      	ldr	r0, [pc, #76]	; (8117f68 <prvCheckForValidListAndQueue+0x68>)
 8117f1a:	f7fd fd2b 	bl	8115974 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8117f1e:	4b13      	ldr	r3, [pc, #76]	; (8117f6c <prvCheckForValidListAndQueue+0x6c>)
 8117f20:	4a10      	ldr	r2, [pc, #64]	; (8117f64 <prvCheckForValidListAndQueue+0x64>)
 8117f22:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8117f24:	4b12      	ldr	r3, [pc, #72]	; (8117f70 <prvCheckForValidListAndQueue+0x70>)
 8117f26:	4a10      	ldr	r2, [pc, #64]	; (8117f68 <prvCheckForValidListAndQueue+0x68>)
 8117f28:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8117f2a:	2300      	movs	r3, #0
 8117f2c:	9300      	str	r3, [sp, #0]
 8117f2e:	4b11      	ldr	r3, [pc, #68]	; (8117f74 <prvCheckForValidListAndQueue+0x74>)
 8117f30:	4a11      	ldr	r2, [pc, #68]	; (8117f78 <prvCheckForValidListAndQueue+0x78>)
 8117f32:	2110      	movs	r1, #16
 8117f34:	200a      	movs	r0, #10
 8117f36:	f7fe f887 	bl	8116048 <xQueueGenericCreateStatic>
 8117f3a:	4603      	mov	r3, r0
 8117f3c:	4a08      	ldr	r2, [pc, #32]	; (8117f60 <prvCheckForValidListAndQueue+0x60>)
 8117f3e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8117f40:	4b07      	ldr	r3, [pc, #28]	; (8117f60 <prvCheckForValidListAndQueue+0x60>)
 8117f42:	681b      	ldr	r3, [r3, #0]
 8117f44:	2b00      	cmp	r3, #0
 8117f46:	d005      	beq.n	8117f54 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8117f48:	4b05      	ldr	r3, [pc, #20]	; (8117f60 <prvCheckForValidListAndQueue+0x60>)
 8117f4a:	681b      	ldr	r3, [r3, #0]
 8117f4c:	490b      	ldr	r1, [pc, #44]	; (8117f7c <prvCheckForValidListAndQueue+0x7c>)
 8117f4e:	4618      	mov	r0, r3
 8117f50:	f7fe fd5a 	bl	8116a08 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8117f54:	f7fd ff1e 	bl	8115d94 <vPortExitCritical>
}
 8117f58:	bf00      	nop
 8117f5a:	46bd      	mov	sp, r7
 8117f5c:	bd80      	pop	{r7, pc}
 8117f5e:	bf00      	nop
 8117f60:	10004bac 	.word	0x10004bac
 8117f64:	10004b7c 	.word	0x10004b7c
 8117f68:	10004b90 	.word	0x10004b90
 8117f6c:	10004ba4 	.word	0x10004ba4
 8117f70:	10004ba8 	.word	0x10004ba8
 8117f74:	10004c58 	.word	0x10004c58
 8117f78:	10004bb8 	.word	0x10004bb8
 8117f7c:	0811b430 	.word	0x0811b430

08117f80 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8117f80:	b580      	push	{r7, lr}
 8117f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8117f84:	2200      	movs	r2, #0
 8117f86:	4913      	ldr	r1, [pc, #76]	; (8117fd4 <MX_USB_DEVICE_Init+0x54>)
 8117f88:	4813      	ldr	r0, [pc, #76]	; (8117fd8 <MX_USB_DEVICE_Init+0x58>)
 8117f8a:	f7fb fe6b 	bl	8113c64 <USBD_Init>
 8117f8e:	4603      	mov	r3, r0
 8117f90:	2b00      	cmp	r3, #0
 8117f92:	d001      	beq.n	8117f98 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8117f94:	f7e9 fdec 	bl	8101b70 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8117f98:	4910      	ldr	r1, [pc, #64]	; (8117fdc <MX_USB_DEVICE_Init+0x5c>)
 8117f9a:	480f      	ldr	r0, [pc, #60]	; (8117fd8 <MX_USB_DEVICE_Init+0x58>)
 8117f9c:	f7fb fe92 	bl	8113cc4 <USBD_RegisterClass>
 8117fa0:	4603      	mov	r3, r0
 8117fa2:	2b00      	cmp	r3, #0
 8117fa4:	d001      	beq.n	8117faa <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8117fa6:	f7e9 fde3 	bl	8101b70 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8117faa:	490d      	ldr	r1, [pc, #52]	; (8117fe0 <MX_USB_DEVICE_Init+0x60>)
 8117fac:	480a      	ldr	r0, [pc, #40]	; (8117fd8 <MX_USB_DEVICE_Init+0x58>)
 8117fae:	f7fb fde3 	bl	8113b78 <USBD_CDC_RegisterInterface>
 8117fb2:	4603      	mov	r3, r0
 8117fb4:	2b00      	cmp	r3, #0
 8117fb6:	d001      	beq.n	8117fbc <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8117fb8:	f7e9 fdda 	bl	8101b70 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8117fbc:	4806      	ldr	r0, [pc, #24]	; (8117fd8 <MX_USB_DEVICE_Init+0x58>)
 8117fbe:	f7fb fea8 	bl	8113d12 <USBD_Start>
 8117fc2:	4603      	mov	r3, r0
 8117fc4:	2b00      	cmp	r3, #0
 8117fc6:	d001      	beq.n	8117fcc <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8117fc8:	f7e9 fdd2 	bl	8101b70 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 8117fcc:	f7f1 fc1a 	bl	8109804 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8117fd0:	bf00      	nop
 8117fd2:	bd80      	pop	{r7, pc}
 8117fd4:	10000138 	.word	0x10000138
 8117fd8:	1000765c 	.word	0x1000765c
 8117fdc:	1000001c 	.word	0x1000001c
 8117fe0:	10000124 	.word	0x10000124

08117fe4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8117fe4:	b580      	push	{r7, lr}
 8117fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8117fe8:	2200      	movs	r2, #0
 8117fea:	4905      	ldr	r1, [pc, #20]	; (8118000 <CDC_Init_FS+0x1c>)
 8117fec:	4805      	ldr	r0, [pc, #20]	; (8118004 <CDC_Init_FS+0x20>)
 8117fee:	f7fb fdd8 	bl	8113ba2 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8117ff2:	4905      	ldr	r1, [pc, #20]	; (8118008 <CDC_Init_FS+0x24>)
 8117ff4:	4803      	ldr	r0, [pc, #12]	; (8118004 <CDC_Init_FS+0x20>)
 8117ff6:	f7fb fdf2 	bl	8113bde <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8117ffa:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8117ffc:	4618      	mov	r0, r3
 8117ffe:	bd80      	pop	{r7, pc}
 8118000:	1000812c 	.word	0x1000812c
 8118004:	1000765c 	.word	0x1000765c
 8118008:	1000792c 	.word	0x1000792c

0811800c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 811800c:	b480      	push	{r7}
 811800e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8118010:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8118012:	4618      	mov	r0, r3
 8118014:	46bd      	mov	sp, r7
 8118016:	f85d 7b04 	ldr.w	r7, [sp], #4
 811801a:	4770      	bx	lr

0811801c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 811801c:	b480      	push	{r7}
 811801e:	b083      	sub	sp, #12
 8118020:	af00      	add	r7, sp, #0
 8118022:	4603      	mov	r3, r0
 8118024:	6039      	str	r1, [r7, #0]
 8118026:	71fb      	strb	r3, [r7, #7]
 8118028:	4613      	mov	r3, r2
 811802a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 811802c:	79fb      	ldrb	r3, [r7, #7]
 811802e:	2b23      	cmp	r3, #35	; 0x23
 8118030:	d84a      	bhi.n	81180c8 <CDC_Control_FS+0xac>
 8118032:	a201      	add	r2, pc, #4	; (adr r2, 8118038 <CDC_Control_FS+0x1c>)
 8118034:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8118038:	081180c9 	.word	0x081180c9
 811803c:	081180c9 	.word	0x081180c9
 8118040:	081180c9 	.word	0x081180c9
 8118044:	081180c9 	.word	0x081180c9
 8118048:	081180c9 	.word	0x081180c9
 811804c:	081180c9 	.word	0x081180c9
 8118050:	081180c9 	.word	0x081180c9
 8118054:	081180c9 	.word	0x081180c9
 8118058:	081180c9 	.word	0x081180c9
 811805c:	081180c9 	.word	0x081180c9
 8118060:	081180c9 	.word	0x081180c9
 8118064:	081180c9 	.word	0x081180c9
 8118068:	081180c9 	.word	0x081180c9
 811806c:	081180c9 	.word	0x081180c9
 8118070:	081180c9 	.word	0x081180c9
 8118074:	081180c9 	.word	0x081180c9
 8118078:	081180c9 	.word	0x081180c9
 811807c:	081180c9 	.word	0x081180c9
 8118080:	081180c9 	.word	0x081180c9
 8118084:	081180c9 	.word	0x081180c9
 8118088:	081180c9 	.word	0x081180c9
 811808c:	081180c9 	.word	0x081180c9
 8118090:	081180c9 	.word	0x081180c9
 8118094:	081180c9 	.word	0x081180c9
 8118098:	081180c9 	.word	0x081180c9
 811809c:	081180c9 	.word	0x081180c9
 81180a0:	081180c9 	.word	0x081180c9
 81180a4:	081180c9 	.word	0x081180c9
 81180a8:	081180c9 	.word	0x081180c9
 81180ac:	081180c9 	.word	0x081180c9
 81180b0:	081180c9 	.word	0x081180c9
 81180b4:	081180c9 	.word	0x081180c9
 81180b8:	081180c9 	.word	0x081180c9
 81180bc:	081180c9 	.word	0x081180c9
 81180c0:	081180c9 	.word	0x081180c9
 81180c4:	081180c9 	.word	0x081180c9
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 81180c8:	bf00      	nop
  }

  return (USBD_OK);
 81180ca:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 81180cc:	4618      	mov	r0, r3
 81180ce:	370c      	adds	r7, #12
 81180d0:	46bd      	mov	sp, r7
 81180d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81180d6:	4770      	bx	lr

081180d8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 81180d8:	b580      	push	{r7, lr}
 81180da:	b082      	sub	sp, #8
 81180dc:	af00      	add	r7, sp, #0
 81180de:	6078      	str	r0, [r7, #4]
 81180e0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 81180e2:	6879      	ldr	r1, [r7, #4]
 81180e4:	4805      	ldr	r0, [pc, #20]	; (81180fc <CDC_Receive_FS+0x24>)
 81180e6:	f7fb fd7a 	bl	8113bde <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 81180ea:	4804      	ldr	r0, [pc, #16]	; (81180fc <CDC_Receive_FS+0x24>)
 81180ec:	f7fb fd90 	bl	8113c10 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 81180f0:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 81180f2:	4618      	mov	r0, r3
 81180f4:	3708      	adds	r7, #8
 81180f6:	46bd      	mov	sp, r7
 81180f8:	bd80      	pop	{r7, pc}
 81180fa:	bf00      	nop
 81180fc:	1000765c 	.word	0x1000765c

08118100 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8118100:	b480      	push	{r7}
 8118102:	b087      	sub	sp, #28
 8118104:	af00      	add	r7, sp, #0
 8118106:	60f8      	str	r0, [r7, #12]
 8118108:	60b9      	str	r1, [r7, #8]
 811810a:	4613      	mov	r3, r2
 811810c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 811810e:	2300      	movs	r3, #0
 8118110:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8118112:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8118116:	4618      	mov	r0, r3
 8118118:	371c      	adds	r7, #28
 811811a:	46bd      	mov	sp, r7
 811811c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8118120:	4770      	bx	lr
	...

08118124 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8118124:	b480      	push	{r7}
 8118126:	b083      	sub	sp, #12
 8118128:	af00      	add	r7, sp, #0
 811812a:	4603      	mov	r3, r0
 811812c:	6039      	str	r1, [r7, #0]
 811812e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8118130:	683b      	ldr	r3, [r7, #0]
 8118132:	2212      	movs	r2, #18
 8118134:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8118136:	4b03      	ldr	r3, [pc, #12]	; (8118144 <USBD_FS_DeviceDescriptor+0x20>)
}
 8118138:	4618      	mov	r0, r3
 811813a:	370c      	adds	r7, #12
 811813c:	46bd      	mov	sp, r7
 811813e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8118142:	4770      	bx	lr
 8118144:	10000154 	.word	0x10000154

08118148 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8118148:	b480      	push	{r7}
 811814a:	b083      	sub	sp, #12
 811814c:	af00      	add	r7, sp, #0
 811814e:	4603      	mov	r3, r0
 8118150:	6039      	str	r1, [r7, #0]
 8118152:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8118154:	683b      	ldr	r3, [r7, #0]
 8118156:	2204      	movs	r2, #4
 8118158:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 811815a:	4b03      	ldr	r3, [pc, #12]	; (8118168 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 811815c:	4618      	mov	r0, r3
 811815e:	370c      	adds	r7, #12
 8118160:	46bd      	mov	sp, r7
 8118162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8118166:	4770      	bx	lr
 8118168:	10000168 	.word	0x10000168

0811816c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 811816c:	b580      	push	{r7, lr}
 811816e:	b082      	sub	sp, #8
 8118170:	af00      	add	r7, sp, #0
 8118172:	4603      	mov	r3, r0
 8118174:	6039      	str	r1, [r7, #0]
 8118176:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8118178:	79fb      	ldrb	r3, [r7, #7]
 811817a:	2b00      	cmp	r3, #0
 811817c:	d105      	bne.n	811818a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 811817e:	683a      	ldr	r2, [r7, #0]
 8118180:	4907      	ldr	r1, [pc, #28]	; (81181a0 <USBD_FS_ProductStrDescriptor+0x34>)
 8118182:	4808      	ldr	r0, [pc, #32]	; (81181a4 <USBD_FS_ProductStrDescriptor+0x38>)
 8118184:	f7fc fdf7 	bl	8114d76 <USBD_GetString>
 8118188:	e004      	b.n	8118194 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 811818a:	683a      	ldr	r2, [r7, #0]
 811818c:	4904      	ldr	r1, [pc, #16]	; (81181a0 <USBD_FS_ProductStrDescriptor+0x34>)
 811818e:	4805      	ldr	r0, [pc, #20]	; (81181a4 <USBD_FS_ProductStrDescriptor+0x38>)
 8118190:	f7fc fdf1 	bl	8114d76 <USBD_GetString>
  }
  return USBD_StrDesc;
 8118194:	4b02      	ldr	r3, [pc, #8]	; (81181a0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8118196:	4618      	mov	r0, r3
 8118198:	3708      	adds	r7, #8
 811819a:	46bd      	mov	sp, r7
 811819c:	bd80      	pop	{r7, pc}
 811819e:	bf00      	nop
 81181a0:	1000892c 	.word	0x1000892c
 81181a4:	0811b438 	.word	0x0811b438

081181a8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 81181a8:	b580      	push	{r7, lr}
 81181aa:	b082      	sub	sp, #8
 81181ac:	af00      	add	r7, sp, #0
 81181ae:	4603      	mov	r3, r0
 81181b0:	6039      	str	r1, [r7, #0]
 81181b2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 81181b4:	683a      	ldr	r2, [r7, #0]
 81181b6:	4904      	ldr	r1, [pc, #16]	; (81181c8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 81181b8:	4804      	ldr	r0, [pc, #16]	; (81181cc <USBD_FS_ManufacturerStrDescriptor+0x24>)
 81181ba:	f7fc fddc 	bl	8114d76 <USBD_GetString>
  return USBD_StrDesc;
 81181be:	4b02      	ldr	r3, [pc, #8]	; (81181c8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 81181c0:	4618      	mov	r0, r3
 81181c2:	3708      	adds	r7, #8
 81181c4:	46bd      	mov	sp, r7
 81181c6:	bd80      	pop	{r7, pc}
 81181c8:	1000892c 	.word	0x1000892c
 81181cc:	0811b450 	.word	0x0811b450

081181d0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 81181d0:	b580      	push	{r7, lr}
 81181d2:	b082      	sub	sp, #8
 81181d4:	af00      	add	r7, sp, #0
 81181d6:	4603      	mov	r3, r0
 81181d8:	6039      	str	r1, [r7, #0]
 81181da:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 81181dc:	683b      	ldr	r3, [r7, #0]
 81181de:	221a      	movs	r2, #26
 81181e0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 81181e2:	f000 f843 	bl	811826c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 81181e6:	4b02      	ldr	r3, [pc, #8]	; (81181f0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 81181e8:	4618      	mov	r0, r3
 81181ea:	3708      	adds	r7, #8
 81181ec:	46bd      	mov	sp, r7
 81181ee:	bd80      	pop	{r7, pc}
 81181f0:	1000016c 	.word	0x1000016c

081181f4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 81181f4:	b580      	push	{r7, lr}
 81181f6:	b082      	sub	sp, #8
 81181f8:	af00      	add	r7, sp, #0
 81181fa:	4603      	mov	r3, r0
 81181fc:	6039      	str	r1, [r7, #0]
 81181fe:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8118200:	79fb      	ldrb	r3, [r7, #7]
 8118202:	2b00      	cmp	r3, #0
 8118204:	d105      	bne.n	8118212 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8118206:	683a      	ldr	r2, [r7, #0]
 8118208:	4907      	ldr	r1, [pc, #28]	; (8118228 <USBD_FS_ConfigStrDescriptor+0x34>)
 811820a:	4808      	ldr	r0, [pc, #32]	; (811822c <USBD_FS_ConfigStrDescriptor+0x38>)
 811820c:	f7fc fdb3 	bl	8114d76 <USBD_GetString>
 8118210:	e004      	b.n	811821c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8118212:	683a      	ldr	r2, [r7, #0]
 8118214:	4904      	ldr	r1, [pc, #16]	; (8118228 <USBD_FS_ConfigStrDescriptor+0x34>)
 8118216:	4805      	ldr	r0, [pc, #20]	; (811822c <USBD_FS_ConfigStrDescriptor+0x38>)
 8118218:	f7fc fdad 	bl	8114d76 <USBD_GetString>
  }
  return USBD_StrDesc;
 811821c:	4b02      	ldr	r3, [pc, #8]	; (8118228 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 811821e:	4618      	mov	r0, r3
 8118220:	3708      	adds	r7, #8
 8118222:	46bd      	mov	sp, r7
 8118224:	bd80      	pop	{r7, pc}
 8118226:	bf00      	nop
 8118228:	1000892c 	.word	0x1000892c
 811822c:	0811b464 	.word	0x0811b464

08118230 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8118230:	b580      	push	{r7, lr}
 8118232:	b082      	sub	sp, #8
 8118234:	af00      	add	r7, sp, #0
 8118236:	4603      	mov	r3, r0
 8118238:	6039      	str	r1, [r7, #0]
 811823a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 811823c:	79fb      	ldrb	r3, [r7, #7]
 811823e:	2b00      	cmp	r3, #0
 8118240:	d105      	bne.n	811824e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8118242:	683a      	ldr	r2, [r7, #0]
 8118244:	4907      	ldr	r1, [pc, #28]	; (8118264 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8118246:	4808      	ldr	r0, [pc, #32]	; (8118268 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8118248:	f7fc fd95 	bl	8114d76 <USBD_GetString>
 811824c:	e004      	b.n	8118258 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 811824e:	683a      	ldr	r2, [r7, #0]
 8118250:	4904      	ldr	r1, [pc, #16]	; (8118264 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8118252:	4805      	ldr	r0, [pc, #20]	; (8118268 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8118254:	f7fc fd8f 	bl	8114d76 <USBD_GetString>
  }
  return USBD_StrDesc;
 8118258:	4b02      	ldr	r3, [pc, #8]	; (8118264 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 811825a:	4618      	mov	r0, r3
 811825c:	3708      	adds	r7, #8
 811825e:	46bd      	mov	sp, r7
 8118260:	bd80      	pop	{r7, pc}
 8118262:	bf00      	nop
 8118264:	1000892c 	.word	0x1000892c
 8118268:	0811b470 	.word	0x0811b470

0811826c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 811826c:	b580      	push	{r7, lr}
 811826e:	b084      	sub	sp, #16
 8118270:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8118272:	4b0f      	ldr	r3, [pc, #60]	; (81182b0 <Get_SerialNum+0x44>)
 8118274:	681b      	ldr	r3, [r3, #0]
 8118276:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8118278:	4b0e      	ldr	r3, [pc, #56]	; (81182b4 <Get_SerialNum+0x48>)
 811827a:	681b      	ldr	r3, [r3, #0]
 811827c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 811827e:	4b0e      	ldr	r3, [pc, #56]	; (81182b8 <Get_SerialNum+0x4c>)
 8118280:	681b      	ldr	r3, [r3, #0]
 8118282:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8118284:	68fa      	ldr	r2, [r7, #12]
 8118286:	687b      	ldr	r3, [r7, #4]
 8118288:	4413      	add	r3, r2
 811828a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 811828c:	68fb      	ldr	r3, [r7, #12]
 811828e:	2b00      	cmp	r3, #0
 8118290:	d009      	beq.n	81182a6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8118292:	2208      	movs	r2, #8
 8118294:	4909      	ldr	r1, [pc, #36]	; (81182bc <Get_SerialNum+0x50>)
 8118296:	68f8      	ldr	r0, [r7, #12]
 8118298:	f000 f814 	bl	81182c4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 811829c:	2204      	movs	r2, #4
 811829e:	4908      	ldr	r1, [pc, #32]	; (81182c0 <Get_SerialNum+0x54>)
 81182a0:	68b8      	ldr	r0, [r7, #8]
 81182a2:	f000 f80f 	bl	81182c4 <IntToUnicode>
  }
}
 81182a6:	bf00      	nop
 81182a8:	3710      	adds	r7, #16
 81182aa:	46bd      	mov	sp, r7
 81182ac:	bd80      	pop	{r7, pc}
 81182ae:	bf00      	nop
 81182b0:	1ff1e800 	.word	0x1ff1e800
 81182b4:	1ff1e804 	.word	0x1ff1e804
 81182b8:	1ff1e808 	.word	0x1ff1e808
 81182bc:	1000016e 	.word	0x1000016e
 81182c0:	1000017e 	.word	0x1000017e

081182c4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 81182c4:	b480      	push	{r7}
 81182c6:	b087      	sub	sp, #28
 81182c8:	af00      	add	r7, sp, #0
 81182ca:	60f8      	str	r0, [r7, #12]
 81182cc:	60b9      	str	r1, [r7, #8]
 81182ce:	4613      	mov	r3, r2
 81182d0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 81182d2:	2300      	movs	r3, #0
 81182d4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 81182d6:	2300      	movs	r3, #0
 81182d8:	75fb      	strb	r3, [r7, #23]
 81182da:	e027      	b.n	811832c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 81182dc:	68fb      	ldr	r3, [r7, #12]
 81182de:	0f1b      	lsrs	r3, r3, #28
 81182e0:	2b09      	cmp	r3, #9
 81182e2:	d80b      	bhi.n	81182fc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 81182e4:	68fb      	ldr	r3, [r7, #12]
 81182e6:	0f1b      	lsrs	r3, r3, #28
 81182e8:	b2da      	uxtb	r2, r3
 81182ea:	7dfb      	ldrb	r3, [r7, #23]
 81182ec:	005b      	lsls	r3, r3, #1
 81182ee:	4619      	mov	r1, r3
 81182f0:	68bb      	ldr	r3, [r7, #8]
 81182f2:	440b      	add	r3, r1
 81182f4:	3230      	adds	r2, #48	; 0x30
 81182f6:	b2d2      	uxtb	r2, r2
 81182f8:	701a      	strb	r2, [r3, #0]
 81182fa:	e00a      	b.n	8118312 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 81182fc:	68fb      	ldr	r3, [r7, #12]
 81182fe:	0f1b      	lsrs	r3, r3, #28
 8118300:	b2da      	uxtb	r2, r3
 8118302:	7dfb      	ldrb	r3, [r7, #23]
 8118304:	005b      	lsls	r3, r3, #1
 8118306:	4619      	mov	r1, r3
 8118308:	68bb      	ldr	r3, [r7, #8]
 811830a:	440b      	add	r3, r1
 811830c:	3237      	adds	r2, #55	; 0x37
 811830e:	b2d2      	uxtb	r2, r2
 8118310:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8118312:	68fb      	ldr	r3, [r7, #12]
 8118314:	011b      	lsls	r3, r3, #4
 8118316:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8118318:	7dfb      	ldrb	r3, [r7, #23]
 811831a:	005b      	lsls	r3, r3, #1
 811831c:	3301      	adds	r3, #1
 811831e:	68ba      	ldr	r2, [r7, #8]
 8118320:	4413      	add	r3, r2
 8118322:	2200      	movs	r2, #0
 8118324:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8118326:	7dfb      	ldrb	r3, [r7, #23]
 8118328:	3301      	adds	r3, #1
 811832a:	75fb      	strb	r3, [r7, #23]
 811832c:	7dfa      	ldrb	r2, [r7, #23]
 811832e:	79fb      	ldrb	r3, [r7, #7]
 8118330:	429a      	cmp	r2, r3
 8118332:	d3d3      	bcc.n	81182dc <IntToUnicode+0x18>
  }
}
 8118334:	bf00      	nop
 8118336:	bf00      	nop
 8118338:	371c      	adds	r7, #28
 811833a:	46bd      	mov	sp, r7
 811833c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8118340:	4770      	bx	lr
	...

08118344 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8118344:	b580      	push	{r7, lr}
 8118346:	b08a      	sub	sp, #40	; 0x28
 8118348:	af00      	add	r7, sp, #0
 811834a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 811834c:	f107 0314 	add.w	r3, r7, #20
 8118350:	2200      	movs	r2, #0
 8118352:	601a      	str	r2, [r3, #0]
 8118354:	605a      	str	r2, [r3, #4]
 8118356:	609a      	str	r2, [r3, #8]
 8118358:	60da      	str	r2, [r3, #12]
 811835a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 811835c:	687b      	ldr	r3, [r7, #4]
 811835e:	681b      	ldr	r3, [r3, #0]
 8118360:	4a1f      	ldr	r2, [pc, #124]	; (81183e0 <HAL_PCD_MspInit+0x9c>)
 8118362:	4293      	cmp	r3, r2
 8118364:	d138      	bne.n	81183d8 <HAL_PCD_MspInit+0x94>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8118366:	f7f1 fa4d 	bl	8109804 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 811836a:	4b1e      	ldr	r3, [pc, #120]	; (81183e4 <HAL_PCD_MspInit+0xa0>)
 811836c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8118370:	4a1c      	ldr	r2, [pc, #112]	; (81183e4 <HAL_PCD_MspInit+0xa0>)
 8118372:	f043 0301 	orr.w	r3, r3, #1
 8118376:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 811837a:	4b1a      	ldr	r3, [pc, #104]	; (81183e4 <HAL_PCD_MspInit+0xa0>)
 811837c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8118380:	f003 0301 	and.w	r3, r3, #1
 8118384:	613b      	str	r3, [r7, #16]
 8118386:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8118388:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 811838c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 811838e:	2302      	movs	r3, #2
 8118390:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8118392:	2300      	movs	r3, #0
 8118394:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8118396:	2300      	movs	r3, #0
 8118398:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 811839a:	230a      	movs	r3, #10
 811839c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 811839e:	f107 0314 	add.w	r3, r7, #20
 81183a2:	4619      	mov	r1, r3
 81183a4:	4810      	ldr	r0, [pc, #64]	; (81183e8 <HAL_PCD_MspInit+0xa4>)
 81183a6:	f7ee fdf9 	bl	8106f9c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 81183aa:	4b0e      	ldr	r3, [pc, #56]	; (81183e4 <HAL_PCD_MspInit+0xa0>)
 81183ac:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 81183b0:	4a0c      	ldr	r2, [pc, #48]	; (81183e4 <HAL_PCD_MspInit+0xa0>)
 81183b2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 81183b6:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 81183ba:	4b0a      	ldr	r3, [pc, #40]	; (81183e4 <HAL_PCD_MspInit+0xa0>)
 81183bc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 81183c0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 81183c4:	60fb      	str	r3, [r7, #12]
 81183c6:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 81183c8:	2200      	movs	r2, #0
 81183ca:	2105      	movs	r1, #5
 81183cc:	2065      	movs	r0, #101	; 0x65
 81183ce:	f7eb ff63 	bl	8104298 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 81183d2:	2065      	movs	r0, #101	; 0x65
 81183d4:	f7eb ff7a 	bl	81042cc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 81183d8:	bf00      	nop
 81183da:	3728      	adds	r7, #40	; 0x28
 81183dc:	46bd      	mov	sp, r7
 81183de:	bd80      	pop	{r7, pc}
 81183e0:	40080000 	.word	0x40080000
 81183e4:	58024400 	.word	0x58024400
 81183e8:	58020000 	.word	0x58020000

081183ec <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 81183ec:	b580      	push	{r7, lr}
 81183ee:	b082      	sub	sp, #8
 81183f0:	af00      	add	r7, sp, #0
 81183f2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 81183f4:	687b      	ldr	r3, [r7, #4]
 81183f6:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 81183fa:	687b      	ldr	r3, [r7, #4]
 81183fc:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8118400:	4619      	mov	r1, r3
 8118402:	4610      	mov	r0, r2
 8118404:	f7fb fcd0 	bl	8113da8 <USBD_LL_SetupStage>
}
 8118408:	bf00      	nop
 811840a:	3708      	adds	r7, #8
 811840c:	46bd      	mov	sp, r7
 811840e:	bd80      	pop	{r7, pc}

08118410 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8118410:	b580      	push	{r7, lr}
 8118412:	b082      	sub	sp, #8
 8118414:	af00      	add	r7, sp, #0
 8118416:	6078      	str	r0, [r7, #4]
 8118418:	460b      	mov	r3, r1
 811841a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 811841c:	687b      	ldr	r3, [r7, #4]
 811841e:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8118422:	78fa      	ldrb	r2, [r7, #3]
 8118424:	6879      	ldr	r1, [r7, #4]
 8118426:	4613      	mov	r3, r2
 8118428:	00db      	lsls	r3, r3, #3
 811842a:	1a9b      	subs	r3, r3, r2
 811842c:	009b      	lsls	r3, r3, #2
 811842e:	440b      	add	r3, r1
 8118430:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8118434:	681a      	ldr	r2, [r3, #0]
 8118436:	78fb      	ldrb	r3, [r7, #3]
 8118438:	4619      	mov	r1, r3
 811843a:	f7fb fd0a 	bl	8113e52 <USBD_LL_DataOutStage>
}
 811843e:	bf00      	nop
 8118440:	3708      	adds	r7, #8
 8118442:	46bd      	mov	sp, r7
 8118444:	bd80      	pop	{r7, pc}

08118446 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8118446:	b580      	push	{r7, lr}
 8118448:	b082      	sub	sp, #8
 811844a:	af00      	add	r7, sp, #0
 811844c:	6078      	str	r0, [r7, #4]
 811844e:	460b      	mov	r3, r1
 8118450:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8118452:	687b      	ldr	r3, [r7, #4]
 8118454:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8118458:	78fa      	ldrb	r2, [r7, #3]
 811845a:	6879      	ldr	r1, [r7, #4]
 811845c:	4613      	mov	r3, r2
 811845e:	00db      	lsls	r3, r3, #3
 8118460:	1a9b      	subs	r3, r3, r2
 8118462:	009b      	lsls	r3, r3, #2
 8118464:	440b      	add	r3, r1
 8118466:	3348      	adds	r3, #72	; 0x48
 8118468:	681a      	ldr	r2, [r3, #0]
 811846a:	78fb      	ldrb	r3, [r7, #3]
 811846c:	4619      	mov	r1, r3
 811846e:	f7fb fd53 	bl	8113f18 <USBD_LL_DataInStage>
}
 8118472:	bf00      	nop
 8118474:	3708      	adds	r7, #8
 8118476:	46bd      	mov	sp, r7
 8118478:	bd80      	pop	{r7, pc}

0811847a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 811847a:	b580      	push	{r7, lr}
 811847c:	b082      	sub	sp, #8
 811847e:	af00      	add	r7, sp, #0
 8118480:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8118482:	687b      	ldr	r3, [r7, #4]
 8118484:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8118488:	4618      	mov	r0, r3
 811848a:	f7fb fe67 	bl	811415c <USBD_LL_SOF>
}
 811848e:	bf00      	nop
 8118490:	3708      	adds	r7, #8
 8118492:	46bd      	mov	sp, r7
 8118494:	bd80      	pop	{r7, pc}

08118496 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8118496:	b580      	push	{r7, lr}
 8118498:	b084      	sub	sp, #16
 811849a:	af00      	add	r7, sp, #0
 811849c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 811849e:	2301      	movs	r3, #1
 81184a0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 81184a2:	687b      	ldr	r3, [r7, #4]
 81184a4:	68db      	ldr	r3, [r3, #12]
 81184a6:	2b00      	cmp	r3, #0
 81184a8:	d102      	bne.n	81184b0 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 81184aa:	2300      	movs	r3, #0
 81184ac:	73fb      	strb	r3, [r7, #15]
 81184ae:	e008      	b.n	81184c2 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 81184b0:	687b      	ldr	r3, [r7, #4]
 81184b2:	68db      	ldr	r3, [r3, #12]
 81184b4:	2b02      	cmp	r3, #2
 81184b6:	d102      	bne.n	81184be <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 81184b8:	2301      	movs	r3, #1
 81184ba:	73fb      	strb	r3, [r7, #15]
 81184bc:	e001      	b.n	81184c2 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 81184be:	f7e9 fb57 	bl	8101b70 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 81184c2:	687b      	ldr	r3, [r7, #4]
 81184c4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 81184c8:	7bfa      	ldrb	r2, [r7, #15]
 81184ca:	4611      	mov	r1, r2
 81184cc:	4618      	mov	r0, r3
 81184ce:	f7fb fe07 	bl	81140e0 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 81184d2:	687b      	ldr	r3, [r7, #4]
 81184d4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 81184d8:	4618      	mov	r0, r3
 81184da:	f7fb fdb3 	bl	8114044 <USBD_LL_Reset>
}
 81184de:	bf00      	nop
 81184e0:	3710      	adds	r7, #16
 81184e2:	46bd      	mov	sp, r7
 81184e4:	bd80      	pop	{r7, pc}
	...

081184e8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 81184e8:	b580      	push	{r7, lr}
 81184ea:	b082      	sub	sp, #8
 81184ec:	af00      	add	r7, sp, #0
 81184ee:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 81184f0:	687b      	ldr	r3, [r7, #4]
 81184f2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 81184f6:	4618      	mov	r0, r3
 81184f8:	f7fb fe02 	bl	8114100 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 81184fc:	687b      	ldr	r3, [r7, #4]
 81184fe:	681b      	ldr	r3, [r3, #0]
 8118500:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8118504:	681b      	ldr	r3, [r3, #0]
 8118506:	687a      	ldr	r2, [r7, #4]
 8118508:	6812      	ldr	r2, [r2, #0]
 811850a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 811850e:	f043 0301 	orr.w	r3, r3, #1
 8118512:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8118514:	687b      	ldr	r3, [r7, #4]
 8118516:	6a1b      	ldr	r3, [r3, #32]
 8118518:	2b00      	cmp	r3, #0
 811851a:	d005      	beq.n	8118528 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 811851c:	4b04      	ldr	r3, [pc, #16]	; (8118530 <HAL_PCD_SuspendCallback+0x48>)
 811851e:	691b      	ldr	r3, [r3, #16]
 8118520:	4a03      	ldr	r2, [pc, #12]	; (8118530 <HAL_PCD_SuspendCallback+0x48>)
 8118522:	f043 0306 	orr.w	r3, r3, #6
 8118526:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8118528:	bf00      	nop
 811852a:	3708      	adds	r7, #8
 811852c:	46bd      	mov	sp, r7
 811852e:	bd80      	pop	{r7, pc}
 8118530:	e000ed00 	.word	0xe000ed00

08118534 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8118534:	b580      	push	{r7, lr}
 8118536:	b082      	sub	sp, #8
 8118538:	af00      	add	r7, sp, #0
 811853a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 811853c:	687b      	ldr	r3, [r7, #4]
 811853e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8118542:	4618      	mov	r0, r3
 8118544:	f7fb fdf2 	bl	811412c <USBD_LL_Resume>
}
 8118548:	bf00      	nop
 811854a:	3708      	adds	r7, #8
 811854c:	46bd      	mov	sp, r7
 811854e:	bd80      	pop	{r7, pc}

08118550 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8118550:	b580      	push	{r7, lr}
 8118552:	b082      	sub	sp, #8
 8118554:	af00      	add	r7, sp, #0
 8118556:	6078      	str	r0, [r7, #4]
 8118558:	460b      	mov	r3, r1
 811855a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 811855c:	687b      	ldr	r3, [r7, #4]
 811855e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8118562:	78fa      	ldrb	r2, [r7, #3]
 8118564:	4611      	mov	r1, r2
 8118566:	4618      	mov	r0, r3
 8118568:	f7fb fe40 	bl	81141ec <USBD_LL_IsoOUTIncomplete>
}
 811856c:	bf00      	nop
 811856e:	3708      	adds	r7, #8
 8118570:	46bd      	mov	sp, r7
 8118572:	bd80      	pop	{r7, pc}

08118574 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8118574:	b580      	push	{r7, lr}
 8118576:	b082      	sub	sp, #8
 8118578:	af00      	add	r7, sp, #0
 811857a:	6078      	str	r0, [r7, #4]
 811857c:	460b      	mov	r3, r1
 811857e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8118580:	687b      	ldr	r3, [r7, #4]
 8118582:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8118586:	78fa      	ldrb	r2, [r7, #3]
 8118588:	4611      	mov	r1, r2
 811858a:	4618      	mov	r0, r3
 811858c:	f7fb fe08 	bl	81141a0 <USBD_LL_IsoINIncomplete>
}
 8118590:	bf00      	nop
 8118592:	3708      	adds	r7, #8
 8118594:	46bd      	mov	sp, r7
 8118596:	bd80      	pop	{r7, pc}

08118598 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8118598:	b580      	push	{r7, lr}
 811859a:	b082      	sub	sp, #8
 811859c:	af00      	add	r7, sp, #0
 811859e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 81185a0:	687b      	ldr	r3, [r7, #4]
 81185a2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 81185a6:	4618      	mov	r0, r3
 81185a8:	f7fb fe46 	bl	8114238 <USBD_LL_DevConnected>
}
 81185ac:	bf00      	nop
 81185ae:	3708      	adds	r7, #8
 81185b0:	46bd      	mov	sp, r7
 81185b2:	bd80      	pop	{r7, pc}

081185b4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 81185b4:	b580      	push	{r7, lr}
 81185b6:	b082      	sub	sp, #8
 81185b8:	af00      	add	r7, sp, #0
 81185ba:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 81185bc:	687b      	ldr	r3, [r7, #4]
 81185be:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 81185c2:	4618      	mov	r0, r3
 81185c4:	f7fb fe43 	bl	811424e <USBD_LL_DevDisconnected>
}
 81185c8:	bf00      	nop
 81185ca:	3708      	adds	r7, #8
 81185cc:	46bd      	mov	sp, r7
 81185ce:	bd80      	pop	{r7, pc}

081185d0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 81185d0:	b580      	push	{r7, lr}
 81185d2:	b082      	sub	sp, #8
 81185d4:	af00      	add	r7, sp, #0
 81185d6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 81185d8:	687b      	ldr	r3, [r7, #4]
 81185da:	781b      	ldrb	r3, [r3, #0]
 81185dc:	2b00      	cmp	r3, #0
 81185de:	d13e      	bne.n	811865e <USBD_LL_Init+0x8e>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 81185e0:	4a21      	ldr	r2, [pc, #132]	; (8118668 <USBD_LL_Init+0x98>)
 81185e2:	687b      	ldr	r3, [r7, #4]
 81185e4:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 81185e8:	687b      	ldr	r3, [r7, #4]
 81185ea:	4a1f      	ldr	r2, [pc, #124]	; (8118668 <USBD_LL_Init+0x98>)
 81185ec:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 81185f0:	4b1d      	ldr	r3, [pc, #116]	; (8118668 <USBD_LL_Init+0x98>)
 81185f2:	4a1e      	ldr	r2, [pc, #120]	; (811866c <USBD_LL_Init+0x9c>)
 81185f4:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 81185f6:	4b1c      	ldr	r3, [pc, #112]	; (8118668 <USBD_LL_Init+0x98>)
 81185f8:	2209      	movs	r2, #9
 81185fa:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 81185fc:	4b1a      	ldr	r3, [pc, #104]	; (8118668 <USBD_LL_Init+0x98>)
 81185fe:	2202      	movs	r2, #2
 8118600:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8118602:	4b19      	ldr	r3, [pc, #100]	; (8118668 <USBD_LL_Init+0x98>)
 8118604:	2200      	movs	r2, #0
 8118606:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8118608:	4b17      	ldr	r3, [pc, #92]	; (8118668 <USBD_LL_Init+0x98>)
 811860a:	2202      	movs	r2, #2
 811860c:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 811860e:	4b16      	ldr	r3, [pc, #88]	; (8118668 <USBD_LL_Init+0x98>)
 8118610:	2200      	movs	r2, #0
 8118612:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8118614:	4b14      	ldr	r3, [pc, #80]	; (8118668 <USBD_LL_Init+0x98>)
 8118616:	2200      	movs	r2, #0
 8118618:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 811861a:	4b13      	ldr	r3, [pc, #76]	; (8118668 <USBD_LL_Init+0x98>)
 811861c:	2200      	movs	r2, #0
 811861e:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8118620:	4b11      	ldr	r3, [pc, #68]	; (8118668 <USBD_LL_Init+0x98>)
 8118622:	2200      	movs	r2, #0
 8118624:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8118626:	4b10      	ldr	r3, [pc, #64]	; (8118668 <USBD_LL_Init+0x98>)
 8118628:	2200      	movs	r2, #0
 811862a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 811862c:	4b0e      	ldr	r3, [pc, #56]	; (8118668 <USBD_LL_Init+0x98>)
 811862e:	2200      	movs	r2, #0
 8118630:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8118632:	480d      	ldr	r0, [pc, #52]	; (8118668 <USBD_LL_Init+0x98>)
 8118634:	f7ef fe82 	bl	810833c <HAL_PCD_Init>
 8118638:	4603      	mov	r3, r0
 811863a:	2b00      	cmp	r3, #0
 811863c:	d001      	beq.n	8118642 <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 811863e:	f7e9 fa97 	bl	8101b70 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8118642:	2180      	movs	r1, #128	; 0x80
 8118644:	4808      	ldr	r0, [pc, #32]	; (8118668 <USBD_LL_Init+0x98>)
 8118646:	f7f1 f814 	bl	8109672 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 811864a:	2240      	movs	r2, #64	; 0x40
 811864c:	2100      	movs	r1, #0
 811864e:	4806      	ldr	r0, [pc, #24]	; (8118668 <USBD_LL_Init+0x98>)
 8118650:	f7f0 ffc8 	bl	81095e4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8118654:	2280      	movs	r2, #128	; 0x80
 8118656:	2101      	movs	r1, #1
 8118658:	4803      	ldr	r0, [pc, #12]	; (8118668 <USBD_LL_Init+0x98>)
 811865a:	f7f0 ffc3 	bl	81095e4 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 811865e:	2300      	movs	r3, #0
}
 8118660:	4618      	mov	r0, r3
 8118662:	3708      	adds	r7, #8
 8118664:	46bd      	mov	sp, r7
 8118666:	bd80      	pop	{r7, pc}
 8118668:	10008b2c 	.word	0x10008b2c
 811866c:	40080000 	.word	0x40080000

08118670 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8118670:	b580      	push	{r7, lr}
 8118672:	b084      	sub	sp, #16
 8118674:	af00      	add	r7, sp, #0
 8118676:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8118678:	2300      	movs	r3, #0
 811867a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 811867c:	2300      	movs	r3, #0
 811867e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8118680:	687b      	ldr	r3, [r7, #4]
 8118682:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8118686:	4618      	mov	r0, r3
 8118688:	f7ef ff7c 	bl	8108584 <HAL_PCD_Start>
 811868c:	4603      	mov	r3, r0
 811868e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8118690:	7bfb      	ldrb	r3, [r7, #15]
 8118692:	4618      	mov	r0, r3
 8118694:	f000 f942 	bl	811891c <USBD_Get_USB_Status>
 8118698:	4603      	mov	r3, r0
 811869a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 811869c:	7bbb      	ldrb	r3, [r7, #14]
}
 811869e:	4618      	mov	r0, r3
 81186a0:	3710      	adds	r7, #16
 81186a2:	46bd      	mov	sp, r7
 81186a4:	bd80      	pop	{r7, pc}

081186a6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 81186a6:	b580      	push	{r7, lr}
 81186a8:	b084      	sub	sp, #16
 81186aa:	af00      	add	r7, sp, #0
 81186ac:	6078      	str	r0, [r7, #4]
 81186ae:	4608      	mov	r0, r1
 81186b0:	4611      	mov	r1, r2
 81186b2:	461a      	mov	r2, r3
 81186b4:	4603      	mov	r3, r0
 81186b6:	70fb      	strb	r3, [r7, #3]
 81186b8:	460b      	mov	r3, r1
 81186ba:	70bb      	strb	r3, [r7, #2]
 81186bc:	4613      	mov	r3, r2
 81186be:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 81186c0:	2300      	movs	r3, #0
 81186c2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 81186c4:	2300      	movs	r3, #0
 81186c6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 81186c8:	687b      	ldr	r3, [r7, #4]
 81186ca:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 81186ce:	78bb      	ldrb	r3, [r7, #2]
 81186d0:	883a      	ldrh	r2, [r7, #0]
 81186d2:	78f9      	ldrb	r1, [r7, #3]
 81186d4:	f7f0 fb8d 	bl	8108df2 <HAL_PCD_EP_Open>
 81186d8:	4603      	mov	r3, r0
 81186da:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 81186dc:	7bfb      	ldrb	r3, [r7, #15]
 81186de:	4618      	mov	r0, r3
 81186e0:	f000 f91c 	bl	811891c <USBD_Get_USB_Status>
 81186e4:	4603      	mov	r3, r0
 81186e6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 81186e8:	7bbb      	ldrb	r3, [r7, #14]
}
 81186ea:	4618      	mov	r0, r3
 81186ec:	3710      	adds	r7, #16
 81186ee:	46bd      	mov	sp, r7
 81186f0:	bd80      	pop	{r7, pc}

081186f2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 81186f2:	b580      	push	{r7, lr}
 81186f4:	b084      	sub	sp, #16
 81186f6:	af00      	add	r7, sp, #0
 81186f8:	6078      	str	r0, [r7, #4]
 81186fa:	460b      	mov	r3, r1
 81186fc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 81186fe:	2300      	movs	r3, #0
 8118700:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8118702:	2300      	movs	r3, #0
 8118704:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8118706:	687b      	ldr	r3, [r7, #4]
 8118708:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 811870c:	78fa      	ldrb	r2, [r7, #3]
 811870e:	4611      	mov	r1, r2
 8118710:	4618      	mov	r0, r3
 8118712:	f7f0 fbd6 	bl	8108ec2 <HAL_PCD_EP_Close>
 8118716:	4603      	mov	r3, r0
 8118718:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 811871a:	7bfb      	ldrb	r3, [r7, #15]
 811871c:	4618      	mov	r0, r3
 811871e:	f000 f8fd 	bl	811891c <USBD_Get_USB_Status>
 8118722:	4603      	mov	r3, r0
 8118724:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8118726:	7bbb      	ldrb	r3, [r7, #14]
}
 8118728:	4618      	mov	r0, r3
 811872a:	3710      	adds	r7, #16
 811872c:	46bd      	mov	sp, r7
 811872e:	bd80      	pop	{r7, pc}

08118730 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8118730:	b580      	push	{r7, lr}
 8118732:	b084      	sub	sp, #16
 8118734:	af00      	add	r7, sp, #0
 8118736:	6078      	str	r0, [r7, #4]
 8118738:	460b      	mov	r3, r1
 811873a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 811873c:	2300      	movs	r3, #0
 811873e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8118740:	2300      	movs	r3, #0
 8118742:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8118744:	687b      	ldr	r3, [r7, #4]
 8118746:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 811874a:	78fa      	ldrb	r2, [r7, #3]
 811874c:	4611      	mov	r1, r2
 811874e:	4618      	mov	r0, r3
 8118750:	f7f0 fcae 	bl	81090b0 <HAL_PCD_EP_SetStall>
 8118754:	4603      	mov	r3, r0
 8118756:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8118758:	7bfb      	ldrb	r3, [r7, #15]
 811875a:	4618      	mov	r0, r3
 811875c:	f000 f8de 	bl	811891c <USBD_Get_USB_Status>
 8118760:	4603      	mov	r3, r0
 8118762:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8118764:	7bbb      	ldrb	r3, [r7, #14]
}
 8118766:	4618      	mov	r0, r3
 8118768:	3710      	adds	r7, #16
 811876a:	46bd      	mov	sp, r7
 811876c:	bd80      	pop	{r7, pc}

0811876e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 811876e:	b580      	push	{r7, lr}
 8118770:	b084      	sub	sp, #16
 8118772:	af00      	add	r7, sp, #0
 8118774:	6078      	str	r0, [r7, #4]
 8118776:	460b      	mov	r3, r1
 8118778:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 811877a:	2300      	movs	r3, #0
 811877c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 811877e:	2300      	movs	r3, #0
 8118780:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8118782:	687b      	ldr	r3, [r7, #4]
 8118784:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8118788:	78fa      	ldrb	r2, [r7, #3]
 811878a:	4611      	mov	r1, r2
 811878c:	4618      	mov	r0, r3
 811878e:	f7f0 fcf3 	bl	8109178 <HAL_PCD_EP_ClrStall>
 8118792:	4603      	mov	r3, r0
 8118794:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8118796:	7bfb      	ldrb	r3, [r7, #15]
 8118798:	4618      	mov	r0, r3
 811879a:	f000 f8bf 	bl	811891c <USBD_Get_USB_Status>
 811879e:	4603      	mov	r3, r0
 81187a0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 81187a2:	7bbb      	ldrb	r3, [r7, #14]
}
 81187a4:	4618      	mov	r0, r3
 81187a6:	3710      	adds	r7, #16
 81187a8:	46bd      	mov	sp, r7
 81187aa:	bd80      	pop	{r7, pc}

081187ac <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 81187ac:	b480      	push	{r7}
 81187ae:	b085      	sub	sp, #20
 81187b0:	af00      	add	r7, sp, #0
 81187b2:	6078      	str	r0, [r7, #4]
 81187b4:	460b      	mov	r3, r1
 81187b6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 81187b8:	687b      	ldr	r3, [r7, #4]
 81187ba:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 81187be:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 81187c0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 81187c4:	2b00      	cmp	r3, #0
 81187c6:	da0b      	bge.n	81187e0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 81187c8:	78fb      	ldrb	r3, [r7, #3]
 81187ca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 81187ce:	68f9      	ldr	r1, [r7, #12]
 81187d0:	4613      	mov	r3, r2
 81187d2:	00db      	lsls	r3, r3, #3
 81187d4:	1a9b      	subs	r3, r3, r2
 81187d6:	009b      	lsls	r3, r3, #2
 81187d8:	440b      	add	r3, r1
 81187da:	333e      	adds	r3, #62	; 0x3e
 81187dc:	781b      	ldrb	r3, [r3, #0]
 81187de:	e00b      	b.n	81187f8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 81187e0:	78fb      	ldrb	r3, [r7, #3]
 81187e2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 81187e6:	68f9      	ldr	r1, [r7, #12]
 81187e8:	4613      	mov	r3, r2
 81187ea:	00db      	lsls	r3, r3, #3
 81187ec:	1a9b      	subs	r3, r3, r2
 81187ee:	009b      	lsls	r3, r3, #2
 81187f0:	440b      	add	r3, r1
 81187f2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 81187f6:	781b      	ldrb	r3, [r3, #0]
  }
}
 81187f8:	4618      	mov	r0, r3
 81187fa:	3714      	adds	r7, #20
 81187fc:	46bd      	mov	sp, r7
 81187fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8118802:	4770      	bx	lr

08118804 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8118804:	b580      	push	{r7, lr}
 8118806:	b084      	sub	sp, #16
 8118808:	af00      	add	r7, sp, #0
 811880a:	6078      	str	r0, [r7, #4]
 811880c:	460b      	mov	r3, r1
 811880e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8118810:	2300      	movs	r3, #0
 8118812:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8118814:	2300      	movs	r3, #0
 8118816:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8118818:	687b      	ldr	r3, [r7, #4]
 811881a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 811881e:	78fa      	ldrb	r2, [r7, #3]
 8118820:	4611      	mov	r1, r2
 8118822:	4618      	mov	r0, r3
 8118824:	f7f0 fac0 	bl	8108da8 <HAL_PCD_SetAddress>
 8118828:	4603      	mov	r3, r0
 811882a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 811882c:	7bfb      	ldrb	r3, [r7, #15]
 811882e:	4618      	mov	r0, r3
 8118830:	f000 f874 	bl	811891c <USBD_Get_USB_Status>
 8118834:	4603      	mov	r3, r0
 8118836:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8118838:	7bbb      	ldrb	r3, [r7, #14]
}
 811883a:	4618      	mov	r0, r3
 811883c:	3710      	adds	r7, #16
 811883e:	46bd      	mov	sp, r7
 8118840:	bd80      	pop	{r7, pc}

08118842 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8118842:	b580      	push	{r7, lr}
 8118844:	b086      	sub	sp, #24
 8118846:	af00      	add	r7, sp, #0
 8118848:	60f8      	str	r0, [r7, #12]
 811884a:	607a      	str	r2, [r7, #4]
 811884c:	603b      	str	r3, [r7, #0]
 811884e:	460b      	mov	r3, r1
 8118850:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8118852:	2300      	movs	r3, #0
 8118854:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8118856:	2300      	movs	r3, #0
 8118858:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 811885a:	68fb      	ldr	r3, [r7, #12]
 811885c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8118860:	7af9      	ldrb	r1, [r7, #11]
 8118862:	683b      	ldr	r3, [r7, #0]
 8118864:	687a      	ldr	r2, [r7, #4]
 8118866:	f7f0 fbd9 	bl	810901c <HAL_PCD_EP_Transmit>
 811886a:	4603      	mov	r3, r0
 811886c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 811886e:	7dfb      	ldrb	r3, [r7, #23]
 8118870:	4618      	mov	r0, r3
 8118872:	f000 f853 	bl	811891c <USBD_Get_USB_Status>
 8118876:	4603      	mov	r3, r0
 8118878:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 811887a:	7dbb      	ldrb	r3, [r7, #22]
}
 811887c:	4618      	mov	r0, r3
 811887e:	3718      	adds	r7, #24
 8118880:	46bd      	mov	sp, r7
 8118882:	bd80      	pop	{r7, pc}

08118884 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8118884:	b580      	push	{r7, lr}
 8118886:	b086      	sub	sp, #24
 8118888:	af00      	add	r7, sp, #0
 811888a:	60f8      	str	r0, [r7, #12]
 811888c:	607a      	str	r2, [r7, #4]
 811888e:	603b      	str	r3, [r7, #0]
 8118890:	460b      	mov	r3, r1
 8118892:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8118894:	2300      	movs	r3, #0
 8118896:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8118898:	2300      	movs	r3, #0
 811889a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 811889c:	68fb      	ldr	r3, [r7, #12]
 811889e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 81188a2:	7af9      	ldrb	r1, [r7, #11]
 81188a4:	683b      	ldr	r3, [r7, #0]
 81188a6:	687a      	ldr	r2, [r7, #4]
 81188a8:	f7f0 fb55 	bl	8108f56 <HAL_PCD_EP_Receive>
 81188ac:	4603      	mov	r3, r0
 81188ae:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 81188b0:	7dfb      	ldrb	r3, [r7, #23]
 81188b2:	4618      	mov	r0, r3
 81188b4:	f000 f832 	bl	811891c <USBD_Get_USB_Status>
 81188b8:	4603      	mov	r3, r0
 81188ba:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 81188bc:	7dbb      	ldrb	r3, [r7, #22]
}
 81188be:	4618      	mov	r0, r3
 81188c0:	3718      	adds	r7, #24
 81188c2:	46bd      	mov	sp, r7
 81188c4:	bd80      	pop	{r7, pc}

081188c6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 81188c6:	b580      	push	{r7, lr}
 81188c8:	b082      	sub	sp, #8
 81188ca:	af00      	add	r7, sp, #0
 81188cc:	6078      	str	r0, [r7, #4]
 81188ce:	460b      	mov	r3, r1
 81188d0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 81188d2:	687b      	ldr	r3, [r7, #4]
 81188d4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 81188d8:	78fa      	ldrb	r2, [r7, #3]
 81188da:	4611      	mov	r1, r2
 81188dc:	4618      	mov	r0, r3
 81188de:	f7f0 fb85 	bl	8108fec <HAL_PCD_EP_GetRxCount>
 81188e2:	4603      	mov	r3, r0
}
 81188e4:	4618      	mov	r0, r3
 81188e6:	3708      	adds	r7, #8
 81188e8:	46bd      	mov	sp, r7
 81188ea:	bd80      	pop	{r7, pc}

081188ec <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 81188ec:	b480      	push	{r7}
 81188ee:	b083      	sub	sp, #12
 81188f0:	af00      	add	r7, sp, #0
 81188f2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 81188f4:	4b03      	ldr	r3, [pc, #12]	; (8118904 <USBD_static_malloc+0x18>)
}
 81188f6:	4618      	mov	r0, r3
 81188f8:	370c      	adds	r7, #12
 81188fa:	46bd      	mov	sp, r7
 81188fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8118900:	4770      	bx	lr
 8118902:	bf00      	nop
 8118904:	10004ca8 	.word	0x10004ca8

08118908 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8118908:	b480      	push	{r7}
 811890a:	b083      	sub	sp, #12
 811890c:	af00      	add	r7, sp, #0
 811890e:	6078      	str	r0, [r7, #4]

}
 8118910:	bf00      	nop
 8118912:	370c      	adds	r7, #12
 8118914:	46bd      	mov	sp, r7
 8118916:	f85d 7b04 	ldr.w	r7, [sp], #4
 811891a:	4770      	bx	lr

0811891c <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 811891c:	b480      	push	{r7}
 811891e:	b085      	sub	sp, #20
 8118920:	af00      	add	r7, sp, #0
 8118922:	4603      	mov	r3, r0
 8118924:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8118926:	2300      	movs	r3, #0
 8118928:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 811892a:	79fb      	ldrb	r3, [r7, #7]
 811892c:	2b03      	cmp	r3, #3
 811892e:	d817      	bhi.n	8118960 <USBD_Get_USB_Status+0x44>
 8118930:	a201      	add	r2, pc, #4	; (adr r2, 8118938 <USBD_Get_USB_Status+0x1c>)
 8118932:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8118936:	bf00      	nop
 8118938:	08118949 	.word	0x08118949
 811893c:	0811894f 	.word	0x0811894f
 8118940:	08118955 	.word	0x08118955
 8118944:	0811895b 	.word	0x0811895b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8118948:	2300      	movs	r3, #0
 811894a:	73fb      	strb	r3, [r7, #15]
    break;
 811894c:	e00b      	b.n	8118966 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 811894e:	2303      	movs	r3, #3
 8118950:	73fb      	strb	r3, [r7, #15]
    break;
 8118952:	e008      	b.n	8118966 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8118954:	2301      	movs	r3, #1
 8118956:	73fb      	strb	r3, [r7, #15]
    break;
 8118958:	e005      	b.n	8118966 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 811895a:	2303      	movs	r3, #3
 811895c:	73fb      	strb	r3, [r7, #15]
    break;
 811895e:	e002      	b.n	8118966 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8118960:	2303      	movs	r3, #3
 8118962:	73fb      	strb	r3, [r7, #15]
    break;
 8118964:	bf00      	nop
  }
  return usb_status;
 8118966:	7bfb      	ldrb	r3, [r7, #15]
}
 8118968:	4618      	mov	r0, r3
 811896a:	3714      	adds	r7, #20
 811896c:	46bd      	mov	sp, r7
 811896e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8118972:	4770      	bx	lr

08118974 <__errno>:
 8118974:	4b01      	ldr	r3, [pc, #4]	; (811897c <__errno+0x8>)
 8118976:	6818      	ldr	r0, [r3, #0]
 8118978:	4770      	bx	lr
 811897a:	bf00      	nop
 811897c:	10000188 	.word	0x10000188

08118980 <__libc_init_array>:
 8118980:	b570      	push	{r4, r5, r6, lr}
 8118982:	4d0d      	ldr	r5, [pc, #52]	; (81189b8 <__libc_init_array+0x38>)
 8118984:	4c0d      	ldr	r4, [pc, #52]	; (81189bc <__libc_init_array+0x3c>)
 8118986:	1b64      	subs	r4, r4, r5
 8118988:	10a4      	asrs	r4, r4, #2
 811898a:	2600      	movs	r6, #0
 811898c:	42a6      	cmp	r6, r4
 811898e:	d109      	bne.n	81189a4 <__libc_init_array+0x24>
 8118990:	4d0b      	ldr	r5, [pc, #44]	; (81189c0 <__libc_init_array+0x40>)
 8118992:	4c0c      	ldr	r4, [pc, #48]	; (81189c4 <__libc_init_array+0x44>)
 8118994:	f002 fcf0 	bl	811b378 <_init>
 8118998:	1b64      	subs	r4, r4, r5
 811899a:	10a4      	asrs	r4, r4, #2
 811899c:	2600      	movs	r6, #0
 811899e:	42a6      	cmp	r6, r4
 81189a0:	d105      	bne.n	81189ae <__libc_init_array+0x2e>
 81189a2:	bd70      	pop	{r4, r5, r6, pc}
 81189a4:	f855 3b04 	ldr.w	r3, [r5], #4
 81189a8:	4798      	blx	r3
 81189aa:	3601      	adds	r6, #1
 81189ac:	e7ee      	b.n	811898c <__libc_init_array+0xc>
 81189ae:	f855 3b04 	ldr.w	r3, [r5], #4
 81189b2:	4798      	blx	r3
 81189b4:	3601      	adds	r6, #1
 81189b6:	e7f2      	b.n	811899e <__libc_init_array+0x1e>
 81189b8:	0811b8e4 	.word	0x0811b8e4
 81189bc:	0811b8e4 	.word	0x0811b8e4
 81189c0:	0811b8e4 	.word	0x0811b8e4
 81189c4:	0811b8e8 	.word	0x0811b8e8

081189c8 <memcpy>:
 81189c8:	440a      	add	r2, r1
 81189ca:	4291      	cmp	r1, r2
 81189cc:	f100 33ff 	add.w	r3, r0, #4294967295
 81189d0:	d100      	bne.n	81189d4 <memcpy+0xc>
 81189d2:	4770      	bx	lr
 81189d4:	b510      	push	{r4, lr}
 81189d6:	f811 4b01 	ldrb.w	r4, [r1], #1
 81189da:	f803 4f01 	strb.w	r4, [r3, #1]!
 81189de:	4291      	cmp	r1, r2
 81189e0:	d1f9      	bne.n	81189d6 <memcpy+0xe>
 81189e2:	bd10      	pop	{r4, pc}

081189e4 <memset>:
 81189e4:	4402      	add	r2, r0
 81189e6:	4603      	mov	r3, r0
 81189e8:	4293      	cmp	r3, r2
 81189ea:	d100      	bne.n	81189ee <memset+0xa>
 81189ec:	4770      	bx	lr
 81189ee:	f803 1b01 	strb.w	r1, [r3], #1
 81189f2:	e7f9      	b.n	81189e8 <memset+0x4>

081189f4 <__cvt>:
 81189f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 81189f8:	ec55 4b10 	vmov	r4, r5, d0
 81189fc:	2d00      	cmp	r5, #0
 81189fe:	460e      	mov	r6, r1
 8118a00:	4619      	mov	r1, r3
 8118a02:	462b      	mov	r3, r5
 8118a04:	bfbb      	ittet	lt
 8118a06:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8118a0a:	461d      	movlt	r5, r3
 8118a0c:	2300      	movge	r3, #0
 8118a0e:	232d      	movlt	r3, #45	; 0x2d
 8118a10:	700b      	strb	r3, [r1, #0]
 8118a12:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8118a14:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8118a18:	4691      	mov	r9, r2
 8118a1a:	f023 0820 	bic.w	r8, r3, #32
 8118a1e:	bfbc      	itt	lt
 8118a20:	4622      	movlt	r2, r4
 8118a22:	4614      	movlt	r4, r2
 8118a24:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8118a28:	d005      	beq.n	8118a36 <__cvt+0x42>
 8118a2a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8118a2e:	d100      	bne.n	8118a32 <__cvt+0x3e>
 8118a30:	3601      	adds	r6, #1
 8118a32:	2102      	movs	r1, #2
 8118a34:	e000      	b.n	8118a38 <__cvt+0x44>
 8118a36:	2103      	movs	r1, #3
 8118a38:	ab03      	add	r3, sp, #12
 8118a3a:	9301      	str	r3, [sp, #4]
 8118a3c:	ab02      	add	r3, sp, #8
 8118a3e:	9300      	str	r3, [sp, #0]
 8118a40:	ec45 4b10 	vmov	d0, r4, r5
 8118a44:	4653      	mov	r3, sl
 8118a46:	4632      	mov	r2, r6
 8118a48:	f000 fcca 	bl	81193e0 <_dtoa_r>
 8118a4c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8118a50:	4607      	mov	r7, r0
 8118a52:	d102      	bne.n	8118a5a <__cvt+0x66>
 8118a54:	f019 0f01 	tst.w	r9, #1
 8118a58:	d022      	beq.n	8118aa0 <__cvt+0xac>
 8118a5a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8118a5e:	eb07 0906 	add.w	r9, r7, r6
 8118a62:	d110      	bne.n	8118a86 <__cvt+0x92>
 8118a64:	783b      	ldrb	r3, [r7, #0]
 8118a66:	2b30      	cmp	r3, #48	; 0x30
 8118a68:	d10a      	bne.n	8118a80 <__cvt+0x8c>
 8118a6a:	2200      	movs	r2, #0
 8118a6c:	2300      	movs	r3, #0
 8118a6e:	4620      	mov	r0, r4
 8118a70:	4629      	mov	r1, r5
 8118a72:	f7e8 f8b1 	bl	8100bd8 <__aeabi_dcmpeq>
 8118a76:	b918      	cbnz	r0, 8118a80 <__cvt+0x8c>
 8118a78:	f1c6 0601 	rsb	r6, r6, #1
 8118a7c:	f8ca 6000 	str.w	r6, [sl]
 8118a80:	f8da 3000 	ldr.w	r3, [sl]
 8118a84:	4499      	add	r9, r3
 8118a86:	2200      	movs	r2, #0
 8118a88:	2300      	movs	r3, #0
 8118a8a:	4620      	mov	r0, r4
 8118a8c:	4629      	mov	r1, r5
 8118a8e:	f7e8 f8a3 	bl	8100bd8 <__aeabi_dcmpeq>
 8118a92:	b108      	cbz	r0, 8118a98 <__cvt+0xa4>
 8118a94:	f8cd 900c 	str.w	r9, [sp, #12]
 8118a98:	2230      	movs	r2, #48	; 0x30
 8118a9a:	9b03      	ldr	r3, [sp, #12]
 8118a9c:	454b      	cmp	r3, r9
 8118a9e:	d307      	bcc.n	8118ab0 <__cvt+0xbc>
 8118aa0:	9b03      	ldr	r3, [sp, #12]
 8118aa2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8118aa4:	1bdb      	subs	r3, r3, r7
 8118aa6:	4638      	mov	r0, r7
 8118aa8:	6013      	str	r3, [r2, #0]
 8118aaa:	b004      	add	sp, #16
 8118aac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8118ab0:	1c59      	adds	r1, r3, #1
 8118ab2:	9103      	str	r1, [sp, #12]
 8118ab4:	701a      	strb	r2, [r3, #0]
 8118ab6:	e7f0      	b.n	8118a9a <__cvt+0xa6>

08118ab8 <__exponent>:
 8118ab8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8118aba:	4603      	mov	r3, r0
 8118abc:	2900      	cmp	r1, #0
 8118abe:	bfb8      	it	lt
 8118ac0:	4249      	neglt	r1, r1
 8118ac2:	f803 2b02 	strb.w	r2, [r3], #2
 8118ac6:	bfb4      	ite	lt
 8118ac8:	222d      	movlt	r2, #45	; 0x2d
 8118aca:	222b      	movge	r2, #43	; 0x2b
 8118acc:	2909      	cmp	r1, #9
 8118ace:	7042      	strb	r2, [r0, #1]
 8118ad0:	dd2a      	ble.n	8118b28 <__exponent+0x70>
 8118ad2:	f10d 0407 	add.w	r4, sp, #7
 8118ad6:	46a4      	mov	ip, r4
 8118ad8:	270a      	movs	r7, #10
 8118ada:	46a6      	mov	lr, r4
 8118adc:	460a      	mov	r2, r1
 8118ade:	fb91 f6f7 	sdiv	r6, r1, r7
 8118ae2:	fb07 1516 	mls	r5, r7, r6, r1
 8118ae6:	3530      	adds	r5, #48	; 0x30
 8118ae8:	2a63      	cmp	r2, #99	; 0x63
 8118aea:	f104 34ff 	add.w	r4, r4, #4294967295
 8118aee:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8118af2:	4631      	mov	r1, r6
 8118af4:	dcf1      	bgt.n	8118ada <__exponent+0x22>
 8118af6:	3130      	adds	r1, #48	; 0x30
 8118af8:	f1ae 0502 	sub.w	r5, lr, #2
 8118afc:	f804 1c01 	strb.w	r1, [r4, #-1]
 8118b00:	1c44      	adds	r4, r0, #1
 8118b02:	4629      	mov	r1, r5
 8118b04:	4561      	cmp	r1, ip
 8118b06:	d30a      	bcc.n	8118b1e <__exponent+0x66>
 8118b08:	f10d 0209 	add.w	r2, sp, #9
 8118b0c:	eba2 020e 	sub.w	r2, r2, lr
 8118b10:	4565      	cmp	r5, ip
 8118b12:	bf88      	it	hi
 8118b14:	2200      	movhi	r2, #0
 8118b16:	4413      	add	r3, r2
 8118b18:	1a18      	subs	r0, r3, r0
 8118b1a:	b003      	add	sp, #12
 8118b1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8118b1e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8118b22:	f804 2f01 	strb.w	r2, [r4, #1]!
 8118b26:	e7ed      	b.n	8118b04 <__exponent+0x4c>
 8118b28:	2330      	movs	r3, #48	; 0x30
 8118b2a:	3130      	adds	r1, #48	; 0x30
 8118b2c:	7083      	strb	r3, [r0, #2]
 8118b2e:	70c1      	strb	r1, [r0, #3]
 8118b30:	1d03      	adds	r3, r0, #4
 8118b32:	e7f1      	b.n	8118b18 <__exponent+0x60>

08118b34 <_printf_float>:
 8118b34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8118b38:	ed2d 8b02 	vpush	{d8}
 8118b3c:	b08d      	sub	sp, #52	; 0x34
 8118b3e:	460c      	mov	r4, r1
 8118b40:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8118b44:	4616      	mov	r6, r2
 8118b46:	461f      	mov	r7, r3
 8118b48:	4605      	mov	r5, r0
 8118b4a:	f001 fa35 	bl	8119fb8 <_localeconv_r>
 8118b4e:	f8d0 a000 	ldr.w	sl, [r0]
 8118b52:	4650      	mov	r0, sl
 8118b54:	f7e7 fbc4 	bl	81002e0 <strlen>
 8118b58:	2300      	movs	r3, #0
 8118b5a:	930a      	str	r3, [sp, #40]	; 0x28
 8118b5c:	6823      	ldr	r3, [r4, #0]
 8118b5e:	9305      	str	r3, [sp, #20]
 8118b60:	f8d8 3000 	ldr.w	r3, [r8]
 8118b64:	f894 b018 	ldrb.w	fp, [r4, #24]
 8118b68:	3307      	adds	r3, #7
 8118b6a:	f023 0307 	bic.w	r3, r3, #7
 8118b6e:	f103 0208 	add.w	r2, r3, #8
 8118b72:	f8c8 2000 	str.w	r2, [r8]
 8118b76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8118b7a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8118b7e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8118b82:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8118b86:	9307      	str	r3, [sp, #28]
 8118b88:	f8cd 8018 	str.w	r8, [sp, #24]
 8118b8c:	ee08 0a10 	vmov	s16, r0
 8118b90:	4b9f      	ldr	r3, [pc, #636]	; (8118e10 <_printf_float+0x2dc>)
 8118b92:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8118b96:	f04f 32ff 	mov.w	r2, #4294967295
 8118b9a:	f7e8 f84f 	bl	8100c3c <__aeabi_dcmpun>
 8118b9e:	bb88      	cbnz	r0, 8118c04 <_printf_float+0xd0>
 8118ba0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8118ba4:	4b9a      	ldr	r3, [pc, #616]	; (8118e10 <_printf_float+0x2dc>)
 8118ba6:	f04f 32ff 	mov.w	r2, #4294967295
 8118baa:	f7e8 f829 	bl	8100c00 <__aeabi_dcmple>
 8118bae:	bb48      	cbnz	r0, 8118c04 <_printf_float+0xd0>
 8118bb0:	2200      	movs	r2, #0
 8118bb2:	2300      	movs	r3, #0
 8118bb4:	4640      	mov	r0, r8
 8118bb6:	4649      	mov	r1, r9
 8118bb8:	f7e8 f818 	bl	8100bec <__aeabi_dcmplt>
 8118bbc:	b110      	cbz	r0, 8118bc4 <_printf_float+0x90>
 8118bbe:	232d      	movs	r3, #45	; 0x2d
 8118bc0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8118bc4:	4b93      	ldr	r3, [pc, #588]	; (8118e14 <_printf_float+0x2e0>)
 8118bc6:	4894      	ldr	r0, [pc, #592]	; (8118e18 <_printf_float+0x2e4>)
 8118bc8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8118bcc:	bf94      	ite	ls
 8118bce:	4698      	movls	r8, r3
 8118bd0:	4680      	movhi	r8, r0
 8118bd2:	2303      	movs	r3, #3
 8118bd4:	6123      	str	r3, [r4, #16]
 8118bd6:	9b05      	ldr	r3, [sp, #20]
 8118bd8:	f023 0204 	bic.w	r2, r3, #4
 8118bdc:	6022      	str	r2, [r4, #0]
 8118bde:	f04f 0900 	mov.w	r9, #0
 8118be2:	9700      	str	r7, [sp, #0]
 8118be4:	4633      	mov	r3, r6
 8118be6:	aa0b      	add	r2, sp, #44	; 0x2c
 8118be8:	4621      	mov	r1, r4
 8118bea:	4628      	mov	r0, r5
 8118bec:	f000 f9d8 	bl	8118fa0 <_printf_common>
 8118bf0:	3001      	adds	r0, #1
 8118bf2:	f040 8090 	bne.w	8118d16 <_printf_float+0x1e2>
 8118bf6:	f04f 30ff 	mov.w	r0, #4294967295
 8118bfa:	b00d      	add	sp, #52	; 0x34
 8118bfc:	ecbd 8b02 	vpop	{d8}
 8118c00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8118c04:	4642      	mov	r2, r8
 8118c06:	464b      	mov	r3, r9
 8118c08:	4640      	mov	r0, r8
 8118c0a:	4649      	mov	r1, r9
 8118c0c:	f7e8 f816 	bl	8100c3c <__aeabi_dcmpun>
 8118c10:	b140      	cbz	r0, 8118c24 <_printf_float+0xf0>
 8118c12:	464b      	mov	r3, r9
 8118c14:	2b00      	cmp	r3, #0
 8118c16:	bfbc      	itt	lt
 8118c18:	232d      	movlt	r3, #45	; 0x2d
 8118c1a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8118c1e:	487f      	ldr	r0, [pc, #508]	; (8118e1c <_printf_float+0x2e8>)
 8118c20:	4b7f      	ldr	r3, [pc, #508]	; (8118e20 <_printf_float+0x2ec>)
 8118c22:	e7d1      	b.n	8118bc8 <_printf_float+0x94>
 8118c24:	6863      	ldr	r3, [r4, #4]
 8118c26:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8118c2a:	9206      	str	r2, [sp, #24]
 8118c2c:	1c5a      	adds	r2, r3, #1
 8118c2e:	d13f      	bne.n	8118cb0 <_printf_float+0x17c>
 8118c30:	2306      	movs	r3, #6
 8118c32:	6063      	str	r3, [r4, #4]
 8118c34:	9b05      	ldr	r3, [sp, #20]
 8118c36:	6861      	ldr	r1, [r4, #4]
 8118c38:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8118c3c:	2300      	movs	r3, #0
 8118c3e:	9303      	str	r3, [sp, #12]
 8118c40:	ab0a      	add	r3, sp, #40	; 0x28
 8118c42:	e9cd b301 	strd	fp, r3, [sp, #4]
 8118c46:	ab09      	add	r3, sp, #36	; 0x24
 8118c48:	ec49 8b10 	vmov	d0, r8, r9
 8118c4c:	9300      	str	r3, [sp, #0]
 8118c4e:	6022      	str	r2, [r4, #0]
 8118c50:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8118c54:	4628      	mov	r0, r5
 8118c56:	f7ff fecd 	bl	81189f4 <__cvt>
 8118c5a:	9b06      	ldr	r3, [sp, #24]
 8118c5c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8118c5e:	2b47      	cmp	r3, #71	; 0x47
 8118c60:	4680      	mov	r8, r0
 8118c62:	d108      	bne.n	8118c76 <_printf_float+0x142>
 8118c64:	1cc8      	adds	r0, r1, #3
 8118c66:	db02      	blt.n	8118c6e <_printf_float+0x13a>
 8118c68:	6863      	ldr	r3, [r4, #4]
 8118c6a:	4299      	cmp	r1, r3
 8118c6c:	dd41      	ble.n	8118cf2 <_printf_float+0x1be>
 8118c6e:	f1ab 0b02 	sub.w	fp, fp, #2
 8118c72:	fa5f fb8b 	uxtb.w	fp, fp
 8118c76:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8118c7a:	d820      	bhi.n	8118cbe <_printf_float+0x18a>
 8118c7c:	3901      	subs	r1, #1
 8118c7e:	465a      	mov	r2, fp
 8118c80:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8118c84:	9109      	str	r1, [sp, #36]	; 0x24
 8118c86:	f7ff ff17 	bl	8118ab8 <__exponent>
 8118c8a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8118c8c:	1813      	adds	r3, r2, r0
 8118c8e:	2a01      	cmp	r2, #1
 8118c90:	4681      	mov	r9, r0
 8118c92:	6123      	str	r3, [r4, #16]
 8118c94:	dc02      	bgt.n	8118c9c <_printf_float+0x168>
 8118c96:	6822      	ldr	r2, [r4, #0]
 8118c98:	07d2      	lsls	r2, r2, #31
 8118c9a:	d501      	bpl.n	8118ca0 <_printf_float+0x16c>
 8118c9c:	3301      	adds	r3, #1
 8118c9e:	6123      	str	r3, [r4, #16]
 8118ca0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8118ca4:	2b00      	cmp	r3, #0
 8118ca6:	d09c      	beq.n	8118be2 <_printf_float+0xae>
 8118ca8:	232d      	movs	r3, #45	; 0x2d
 8118caa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8118cae:	e798      	b.n	8118be2 <_printf_float+0xae>
 8118cb0:	9a06      	ldr	r2, [sp, #24]
 8118cb2:	2a47      	cmp	r2, #71	; 0x47
 8118cb4:	d1be      	bne.n	8118c34 <_printf_float+0x100>
 8118cb6:	2b00      	cmp	r3, #0
 8118cb8:	d1bc      	bne.n	8118c34 <_printf_float+0x100>
 8118cba:	2301      	movs	r3, #1
 8118cbc:	e7b9      	b.n	8118c32 <_printf_float+0xfe>
 8118cbe:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8118cc2:	d118      	bne.n	8118cf6 <_printf_float+0x1c2>
 8118cc4:	2900      	cmp	r1, #0
 8118cc6:	6863      	ldr	r3, [r4, #4]
 8118cc8:	dd0b      	ble.n	8118ce2 <_printf_float+0x1ae>
 8118cca:	6121      	str	r1, [r4, #16]
 8118ccc:	b913      	cbnz	r3, 8118cd4 <_printf_float+0x1a0>
 8118cce:	6822      	ldr	r2, [r4, #0]
 8118cd0:	07d0      	lsls	r0, r2, #31
 8118cd2:	d502      	bpl.n	8118cda <_printf_float+0x1a6>
 8118cd4:	3301      	adds	r3, #1
 8118cd6:	440b      	add	r3, r1
 8118cd8:	6123      	str	r3, [r4, #16]
 8118cda:	65a1      	str	r1, [r4, #88]	; 0x58
 8118cdc:	f04f 0900 	mov.w	r9, #0
 8118ce0:	e7de      	b.n	8118ca0 <_printf_float+0x16c>
 8118ce2:	b913      	cbnz	r3, 8118cea <_printf_float+0x1b6>
 8118ce4:	6822      	ldr	r2, [r4, #0]
 8118ce6:	07d2      	lsls	r2, r2, #31
 8118ce8:	d501      	bpl.n	8118cee <_printf_float+0x1ba>
 8118cea:	3302      	adds	r3, #2
 8118cec:	e7f4      	b.n	8118cd8 <_printf_float+0x1a4>
 8118cee:	2301      	movs	r3, #1
 8118cf0:	e7f2      	b.n	8118cd8 <_printf_float+0x1a4>
 8118cf2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8118cf6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8118cf8:	4299      	cmp	r1, r3
 8118cfa:	db05      	blt.n	8118d08 <_printf_float+0x1d4>
 8118cfc:	6823      	ldr	r3, [r4, #0]
 8118cfe:	6121      	str	r1, [r4, #16]
 8118d00:	07d8      	lsls	r0, r3, #31
 8118d02:	d5ea      	bpl.n	8118cda <_printf_float+0x1a6>
 8118d04:	1c4b      	adds	r3, r1, #1
 8118d06:	e7e7      	b.n	8118cd8 <_printf_float+0x1a4>
 8118d08:	2900      	cmp	r1, #0
 8118d0a:	bfd4      	ite	le
 8118d0c:	f1c1 0202 	rsble	r2, r1, #2
 8118d10:	2201      	movgt	r2, #1
 8118d12:	4413      	add	r3, r2
 8118d14:	e7e0      	b.n	8118cd8 <_printf_float+0x1a4>
 8118d16:	6823      	ldr	r3, [r4, #0]
 8118d18:	055a      	lsls	r2, r3, #21
 8118d1a:	d407      	bmi.n	8118d2c <_printf_float+0x1f8>
 8118d1c:	6923      	ldr	r3, [r4, #16]
 8118d1e:	4642      	mov	r2, r8
 8118d20:	4631      	mov	r1, r6
 8118d22:	4628      	mov	r0, r5
 8118d24:	47b8      	blx	r7
 8118d26:	3001      	adds	r0, #1
 8118d28:	d12c      	bne.n	8118d84 <_printf_float+0x250>
 8118d2a:	e764      	b.n	8118bf6 <_printf_float+0xc2>
 8118d2c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8118d30:	f240 80e0 	bls.w	8118ef4 <_printf_float+0x3c0>
 8118d34:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8118d38:	2200      	movs	r2, #0
 8118d3a:	2300      	movs	r3, #0
 8118d3c:	f7e7 ff4c 	bl	8100bd8 <__aeabi_dcmpeq>
 8118d40:	2800      	cmp	r0, #0
 8118d42:	d034      	beq.n	8118dae <_printf_float+0x27a>
 8118d44:	4a37      	ldr	r2, [pc, #220]	; (8118e24 <_printf_float+0x2f0>)
 8118d46:	2301      	movs	r3, #1
 8118d48:	4631      	mov	r1, r6
 8118d4a:	4628      	mov	r0, r5
 8118d4c:	47b8      	blx	r7
 8118d4e:	3001      	adds	r0, #1
 8118d50:	f43f af51 	beq.w	8118bf6 <_printf_float+0xc2>
 8118d54:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8118d58:	429a      	cmp	r2, r3
 8118d5a:	db02      	blt.n	8118d62 <_printf_float+0x22e>
 8118d5c:	6823      	ldr	r3, [r4, #0]
 8118d5e:	07d8      	lsls	r0, r3, #31
 8118d60:	d510      	bpl.n	8118d84 <_printf_float+0x250>
 8118d62:	ee18 3a10 	vmov	r3, s16
 8118d66:	4652      	mov	r2, sl
 8118d68:	4631      	mov	r1, r6
 8118d6a:	4628      	mov	r0, r5
 8118d6c:	47b8      	blx	r7
 8118d6e:	3001      	adds	r0, #1
 8118d70:	f43f af41 	beq.w	8118bf6 <_printf_float+0xc2>
 8118d74:	f04f 0800 	mov.w	r8, #0
 8118d78:	f104 091a 	add.w	r9, r4, #26
 8118d7c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8118d7e:	3b01      	subs	r3, #1
 8118d80:	4543      	cmp	r3, r8
 8118d82:	dc09      	bgt.n	8118d98 <_printf_float+0x264>
 8118d84:	6823      	ldr	r3, [r4, #0]
 8118d86:	079b      	lsls	r3, r3, #30
 8118d88:	f100 8105 	bmi.w	8118f96 <_printf_float+0x462>
 8118d8c:	68e0      	ldr	r0, [r4, #12]
 8118d8e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8118d90:	4298      	cmp	r0, r3
 8118d92:	bfb8      	it	lt
 8118d94:	4618      	movlt	r0, r3
 8118d96:	e730      	b.n	8118bfa <_printf_float+0xc6>
 8118d98:	2301      	movs	r3, #1
 8118d9a:	464a      	mov	r2, r9
 8118d9c:	4631      	mov	r1, r6
 8118d9e:	4628      	mov	r0, r5
 8118da0:	47b8      	blx	r7
 8118da2:	3001      	adds	r0, #1
 8118da4:	f43f af27 	beq.w	8118bf6 <_printf_float+0xc2>
 8118da8:	f108 0801 	add.w	r8, r8, #1
 8118dac:	e7e6      	b.n	8118d7c <_printf_float+0x248>
 8118dae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8118db0:	2b00      	cmp	r3, #0
 8118db2:	dc39      	bgt.n	8118e28 <_printf_float+0x2f4>
 8118db4:	4a1b      	ldr	r2, [pc, #108]	; (8118e24 <_printf_float+0x2f0>)
 8118db6:	2301      	movs	r3, #1
 8118db8:	4631      	mov	r1, r6
 8118dba:	4628      	mov	r0, r5
 8118dbc:	47b8      	blx	r7
 8118dbe:	3001      	adds	r0, #1
 8118dc0:	f43f af19 	beq.w	8118bf6 <_printf_float+0xc2>
 8118dc4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8118dc8:	4313      	orrs	r3, r2
 8118dca:	d102      	bne.n	8118dd2 <_printf_float+0x29e>
 8118dcc:	6823      	ldr	r3, [r4, #0]
 8118dce:	07d9      	lsls	r1, r3, #31
 8118dd0:	d5d8      	bpl.n	8118d84 <_printf_float+0x250>
 8118dd2:	ee18 3a10 	vmov	r3, s16
 8118dd6:	4652      	mov	r2, sl
 8118dd8:	4631      	mov	r1, r6
 8118dda:	4628      	mov	r0, r5
 8118ddc:	47b8      	blx	r7
 8118dde:	3001      	adds	r0, #1
 8118de0:	f43f af09 	beq.w	8118bf6 <_printf_float+0xc2>
 8118de4:	f04f 0900 	mov.w	r9, #0
 8118de8:	f104 0a1a 	add.w	sl, r4, #26
 8118dec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8118dee:	425b      	negs	r3, r3
 8118df0:	454b      	cmp	r3, r9
 8118df2:	dc01      	bgt.n	8118df8 <_printf_float+0x2c4>
 8118df4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8118df6:	e792      	b.n	8118d1e <_printf_float+0x1ea>
 8118df8:	2301      	movs	r3, #1
 8118dfa:	4652      	mov	r2, sl
 8118dfc:	4631      	mov	r1, r6
 8118dfe:	4628      	mov	r0, r5
 8118e00:	47b8      	blx	r7
 8118e02:	3001      	adds	r0, #1
 8118e04:	f43f aef7 	beq.w	8118bf6 <_printf_float+0xc2>
 8118e08:	f109 0901 	add.w	r9, r9, #1
 8118e0c:	e7ee      	b.n	8118dec <_printf_float+0x2b8>
 8118e0e:	bf00      	nop
 8118e10:	7fefffff 	.word	0x7fefffff
 8118e14:	0811b4fc 	.word	0x0811b4fc
 8118e18:	0811b500 	.word	0x0811b500
 8118e1c:	0811b508 	.word	0x0811b508
 8118e20:	0811b504 	.word	0x0811b504
 8118e24:	0811b50c 	.word	0x0811b50c
 8118e28:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8118e2a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8118e2c:	429a      	cmp	r2, r3
 8118e2e:	bfa8      	it	ge
 8118e30:	461a      	movge	r2, r3
 8118e32:	2a00      	cmp	r2, #0
 8118e34:	4691      	mov	r9, r2
 8118e36:	dc37      	bgt.n	8118ea8 <_printf_float+0x374>
 8118e38:	f04f 0b00 	mov.w	fp, #0
 8118e3c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8118e40:	f104 021a 	add.w	r2, r4, #26
 8118e44:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8118e46:	9305      	str	r3, [sp, #20]
 8118e48:	eba3 0309 	sub.w	r3, r3, r9
 8118e4c:	455b      	cmp	r3, fp
 8118e4e:	dc33      	bgt.n	8118eb8 <_printf_float+0x384>
 8118e50:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8118e54:	429a      	cmp	r2, r3
 8118e56:	db3b      	blt.n	8118ed0 <_printf_float+0x39c>
 8118e58:	6823      	ldr	r3, [r4, #0]
 8118e5a:	07da      	lsls	r2, r3, #31
 8118e5c:	d438      	bmi.n	8118ed0 <_printf_float+0x39c>
 8118e5e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8118e60:	9b05      	ldr	r3, [sp, #20]
 8118e62:	9909      	ldr	r1, [sp, #36]	; 0x24
 8118e64:	1ad3      	subs	r3, r2, r3
 8118e66:	eba2 0901 	sub.w	r9, r2, r1
 8118e6a:	4599      	cmp	r9, r3
 8118e6c:	bfa8      	it	ge
 8118e6e:	4699      	movge	r9, r3
 8118e70:	f1b9 0f00 	cmp.w	r9, #0
 8118e74:	dc35      	bgt.n	8118ee2 <_printf_float+0x3ae>
 8118e76:	f04f 0800 	mov.w	r8, #0
 8118e7a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8118e7e:	f104 0a1a 	add.w	sl, r4, #26
 8118e82:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8118e86:	1a9b      	subs	r3, r3, r2
 8118e88:	eba3 0309 	sub.w	r3, r3, r9
 8118e8c:	4543      	cmp	r3, r8
 8118e8e:	f77f af79 	ble.w	8118d84 <_printf_float+0x250>
 8118e92:	2301      	movs	r3, #1
 8118e94:	4652      	mov	r2, sl
 8118e96:	4631      	mov	r1, r6
 8118e98:	4628      	mov	r0, r5
 8118e9a:	47b8      	blx	r7
 8118e9c:	3001      	adds	r0, #1
 8118e9e:	f43f aeaa 	beq.w	8118bf6 <_printf_float+0xc2>
 8118ea2:	f108 0801 	add.w	r8, r8, #1
 8118ea6:	e7ec      	b.n	8118e82 <_printf_float+0x34e>
 8118ea8:	4613      	mov	r3, r2
 8118eaa:	4631      	mov	r1, r6
 8118eac:	4642      	mov	r2, r8
 8118eae:	4628      	mov	r0, r5
 8118eb0:	47b8      	blx	r7
 8118eb2:	3001      	adds	r0, #1
 8118eb4:	d1c0      	bne.n	8118e38 <_printf_float+0x304>
 8118eb6:	e69e      	b.n	8118bf6 <_printf_float+0xc2>
 8118eb8:	2301      	movs	r3, #1
 8118eba:	4631      	mov	r1, r6
 8118ebc:	4628      	mov	r0, r5
 8118ebe:	9205      	str	r2, [sp, #20]
 8118ec0:	47b8      	blx	r7
 8118ec2:	3001      	adds	r0, #1
 8118ec4:	f43f ae97 	beq.w	8118bf6 <_printf_float+0xc2>
 8118ec8:	9a05      	ldr	r2, [sp, #20]
 8118eca:	f10b 0b01 	add.w	fp, fp, #1
 8118ece:	e7b9      	b.n	8118e44 <_printf_float+0x310>
 8118ed0:	ee18 3a10 	vmov	r3, s16
 8118ed4:	4652      	mov	r2, sl
 8118ed6:	4631      	mov	r1, r6
 8118ed8:	4628      	mov	r0, r5
 8118eda:	47b8      	blx	r7
 8118edc:	3001      	adds	r0, #1
 8118ede:	d1be      	bne.n	8118e5e <_printf_float+0x32a>
 8118ee0:	e689      	b.n	8118bf6 <_printf_float+0xc2>
 8118ee2:	9a05      	ldr	r2, [sp, #20]
 8118ee4:	464b      	mov	r3, r9
 8118ee6:	4442      	add	r2, r8
 8118ee8:	4631      	mov	r1, r6
 8118eea:	4628      	mov	r0, r5
 8118eec:	47b8      	blx	r7
 8118eee:	3001      	adds	r0, #1
 8118ef0:	d1c1      	bne.n	8118e76 <_printf_float+0x342>
 8118ef2:	e680      	b.n	8118bf6 <_printf_float+0xc2>
 8118ef4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8118ef6:	2a01      	cmp	r2, #1
 8118ef8:	dc01      	bgt.n	8118efe <_printf_float+0x3ca>
 8118efa:	07db      	lsls	r3, r3, #31
 8118efc:	d538      	bpl.n	8118f70 <_printf_float+0x43c>
 8118efe:	2301      	movs	r3, #1
 8118f00:	4642      	mov	r2, r8
 8118f02:	4631      	mov	r1, r6
 8118f04:	4628      	mov	r0, r5
 8118f06:	47b8      	blx	r7
 8118f08:	3001      	adds	r0, #1
 8118f0a:	f43f ae74 	beq.w	8118bf6 <_printf_float+0xc2>
 8118f0e:	ee18 3a10 	vmov	r3, s16
 8118f12:	4652      	mov	r2, sl
 8118f14:	4631      	mov	r1, r6
 8118f16:	4628      	mov	r0, r5
 8118f18:	47b8      	blx	r7
 8118f1a:	3001      	adds	r0, #1
 8118f1c:	f43f ae6b 	beq.w	8118bf6 <_printf_float+0xc2>
 8118f20:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8118f24:	2200      	movs	r2, #0
 8118f26:	2300      	movs	r3, #0
 8118f28:	f7e7 fe56 	bl	8100bd8 <__aeabi_dcmpeq>
 8118f2c:	b9d8      	cbnz	r0, 8118f66 <_printf_float+0x432>
 8118f2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8118f30:	f108 0201 	add.w	r2, r8, #1
 8118f34:	3b01      	subs	r3, #1
 8118f36:	4631      	mov	r1, r6
 8118f38:	4628      	mov	r0, r5
 8118f3a:	47b8      	blx	r7
 8118f3c:	3001      	adds	r0, #1
 8118f3e:	d10e      	bne.n	8118f5e <_printf_float+0x42a>
 8118f40:	e659      	b.n	8118bf6 <_printf_float+0xc2>
 8118f42:	2301      	movs	r3, #1
 8118f44:	4652      	mov	r2, sl
 8118f46:	4631      	mov	r1, r6
 8118f48:	4628      	mov	r0, r5
 8118f4a:	47b8      	blx	r7
 8118f4c:	3001      	adds	r0, #1
 8118f4e:	f43f ae52 	beq.w	8118bf6 <_printf_float+0xc2>
 8118f52:	f108 0801 	add.w	r8, r8, #1
 8118f56:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8118f58:	3b01      	subs	r3, #1
 8118f5a:	4543      	cmp	r3, r8
 8118f5c:	dcf1      	bgt.n	8118f42 <_printf_float+0x40e>
 8118f5e:	464b      	mov	r3, r9
 8118f60:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8118f64:	e6dc      	b.n	8118d20 <_printf_float+0x1ec>
 8118f66:	f04f 0800 	mov.w	r8, #0
 8118f6a:	f104 0a1a 	add.w	sl, r4, #26
 8118f6e:	e7f2      	b.n	8118f56 <_printf_float+0x422>
 8118f70:	2301      	movs	r3, #1
 8118f72:	4642      	mov	r2, r8
 8118f74:	e7df      	b.n	8118f36 <_printf_float+0x402>
 8118f76:	2301      	movs	r3, #1
 8118f78:	464a      	mov	r2, r9
 8118f7a:	4631      	mov	r1, r6
 8118f7c:	4628      	mov	r0, r5
 8118f7e:	47b8      	blx	r7
 8118f80:	3001      	adds	r0, #1
 8118f82:	f43f ae38 	beq.w	8118bf6 <_printf_float+0xc2>
 8118f86:	f108 0801 	add.w	r8, r8, #1
 8118f8a:	68e3      	ldr	r3, [r4, #12]
 8118f8c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8118f8e:	1a5b      	subs	r3, r3, r1
 8118f90:	4543      	cmp	r3, r8
 8118f92:	dcf0      	bgt.n	8118f76 <_printf_float+0x442>
 8118f94:	e6fa      	b.n	8118d8c <_printf_float+0x258>
 8118f96:	f04f 0800 	mov.w	r8, #0
 8118f9a:	f104 0919 	add.w	r9, r4, #25
 8118f9e:	e7f4      	b.n	8118f8a <_printf_float+0x456>

08118fa0 <_printf_common>:
 8118fa0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8118fa4:	4616      	mov	r6, r2
 8118fa6:	4699      	mov	r9, r3
 8118fa8:	688a      	ldr	r2, [r1, #8]
 8118faa:	690b      	ldr	r3, [r1, #16]
 8118fac:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8118fb0:	4293      	cmp	r3, r2
 8118fb2:	bfb8      	it	lt
 8118fb4:	4613      	movlt	r3, r2
 8118fb6:	6033      	str	r3, [r6, #0]
 8118fb8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8118fbc:	4607      	mov	r7, r0
 8118fbe:	460c      	mov	r4, r1
 8118fc0:	b10a      	cbz	r2, 8118fc6 <_printf_common+0x26>
 8118fc2:	3301      	adds	r3, #1
 8118fc4:	6033      	str	r3, [r6, #0]
 8118fc6:	6823      	ldr	r3, [r4, #0]
 8118fc8:	0699      	lsls	r1, r3, #26
 8118fca:	bf42      	ittt	mi
 8118fcc:	6833      	ldrmi	r3, [r6, #0]
 8118fce:	3302      	addmi	r3, #2
 8118fd0:	6033      	strmi	r3, [r6, #0]
 8118fd2:	6825      	ldr	r5, [r4, #0]
 8118fd4:	f015 0506 	ands.w	r5, r5, #6
 8118fd8:	d106      	bne.n	8118fe8 <_printf_common+0x48>
 8118fda:	f104 0a19 	add.w	sl, r4, #25
 8118fde:	68e3      	ldr	r3, [r4, #12]
 8118fe0:	6832      	ldr	r2, [r6, #0]
 8118fe2:	1a9b      	subs	r3, r3, r2
 8118fe4:	42ab      	cmp	r3, r5
 8118fe6:	dc26      	bgt.n	8119036 <_printf_common+0x96>
 8118fe8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8118fec:	1e13      	subs	r3, r2, #0
 8118fee:	6822      	ldr	r2, [r4, #0]
 8118ff0:	bf18      	it	ne
 8118ff2:	2301      	movne	r3, #1
 8118ff4:	0692      	lsls	r2, r2, #26
 8118ff6:	d42b      	bmi.n	8119050 <_printf_common+0xb0>
 8118ff8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8118ffc:	4649      	mov	r1, r9
 8118ffe:	4638      	mov	r0, r7
 8119000:	47c0      	blx	r8
 8119002:	3001      	adds	r0, #1
 8119004:	d01e      	beq.n	8119044 <_printf_common+0xa4>
 8119006:	6823      	ldr	r3, [r4, #0]
 8119008:	68e5      	ldr	r5, [r4, #12]
 811900a:	6832      	ldr	r2, [r6, #0]
 811900c:	f003 0306 	and.w	r3, r3, #6
 8119010:	2b04      	cmp	r3, #4
 8119012:	bf08      	it	eq
 8119014:	1aad      	subeq	r5, r5, r2
 8119016:	68a3      	ldr	r3, [r4, #8]
 8119018:	6922      	ldr	r2, [r4, #16]
 811901a:	bf0c      	ite	eq
 811901c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8119020:	2500      	movne	r5, #0
 8119022:	4293      	cmp	r3, r2
 8119024:	bfc4      	itt	gt
 8119026:	1a9b      	subgt	r3, r3, r2
 8119028:	18ed      	addgt	r5, r5, r3
 811902a:	2600      	movs	r6, #0
 811902c:	341a      	adds	r4, #26
 811902e:	42b5      	cmp	r5, r6
 8119030:	d11a      	bne.n	8119068 <_printf_common+0xc8>
 8119032:	2000      	movs	r0, #0
 8119034:	e008      	b.n	8119048 <_printf_common+0xa8>
 8119036:	2301      	movs	r3, #1
 8119038:	4652      	mov	r2, sl
 811903a:	4649      	mov	r1, r9
 811903c:	4638      	mov	r0, r7
 811903e:	47c0      	blx	r8
 8119040:	3001      	adds	r0, #1
 8119042:	d103      	bne.n	811904c <_printf_common+0xac>
 8119044:	f04f 30ff 	mov.w	r0, #4294967295
 8119048:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 811904c:	3501      	adds	r5, #1
 811904e:	e7c6      	b.n	8118fde <_printf_common+0x3e>
 8119050:	18e1      	adds	r1, r4, r3
 8119052:	1c5a      	adds	r2, r3, #1
 8119054:	2030      	movs	r0, #48	; 0x30
 8119056:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 811905a:	4422      	add	r2, r4
 811905c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8119060:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8119064:	3302      	adds	r3, #2
 8119066:	e7c7      	b.n	8118ff8 <_printf_common+0x58>
 8119068:	2301      	movs	r3, #1
 811906a:	4622      	mov	r2, r4
 811906c:	4649      	mov	r1, r9
 811906e:	4638      	mov	r0, r7
 8119070:	47c0      	blx	r8
 8119072:	3001      	adds	r0, #1
 8119074:	d0e6      	beq.n	8119044 <_printf_common+0xa4>
 8119076:	3601      	adds	r6, #1
 8119078:	e7d9      	b.n	811902e <_printf_common+0x8e>
	...

0811907c <_printf_i>:
 811907c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8119080:	460c      	mov	r4, r1
 8119082:	4691      	mov	r9, r2
 8119084:	7e27      	ldrb	r7, [r4, #24]
 8119086:	990c      	ldr	r1, [sp, #48]	; 0x30
 8119088:	2f78      	cmp	r7, #120	; 0x78
 811908a:	4680      	mov	r8, r0
 811908c:	469a      	mov	sl, r3
 811908e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8119092:	d807      	bhi.n	81190a4 <_printf_i+0x28>
 8119094:	2f62      	cmp	r7, #98	; 0x62
 8119096:	d80a      	bhi.n	81190ae <_printf_i+0x32>
 8119098:	2f00      	cmp	r7, #0
 811909a:	f000 80d8 	beq.w	811924e <_printf_i+0x1d2>
 811909e:	2f58      	cmp	r7, #88	; 0x58
 81190a0:	f000 80a3 	beq.w	81191ea <_printf_i+0x16e>
 81190a4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 81190a8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 81190ac:	e03a      	b.n	8119124 <_printf_i+0xa8>
 81190ae:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 81190b2:	2b15      	cmp	r3, #21
 81190b4:	d8f6      	bhi.n	81190a4 <_printf_i+0x28>
 81190b6:	a001      	add	r0, pc, #4	; (adr r0, 81190bc <_printf_i+0x40>)
 81190b8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 81190bc:	08119115 	.word	0x08119115
 81190c0:	08119129 	.word	0x08119129
 81190c4:	081190a5 	.word	0x081190a5
 81190c8:	081190a5 	.word	0x081190a5
 81190cc:	081190a5 	.word	0x081190a5
 81190d0:	081190a5 	.word	0x081190a5
 81190d4:	08119129 	.word	0x08119129
 81190d8:	081190a5 	.word	0x081190a5
 81190dc:	081190a5 	.word	0x081190a5
 81190e0:	081190a5 	.word	0x081190a5
 81190e4:	081190a5 	.word	0x081190a5
 81190e8:	08119235 	.word	0x08119235
 81190ec:	08119159 	.word	0x08119159
 81190f0:	08119217 	.word	0x08119217
 81190f4:	081190a5 	.word	0x081190a5
 81190f8:	081190a5 	.word	0x081190a5
 81190fc:	08119257 	.word	0x08119257
 8119100:	081190a5 	.word	0x081190a5
 8119104:	08119159 	.word	0x08119159
 8119108:	081190a5 	.word	0x081190a5
 811910c:	081190a5 	.word	0x081190a5
 8119110:	0811921f 	.word	0x0811921f
 8119114:	680b      	ldr	r3, [r1, #0]
 8119116:	1d1a      	adds	r2, r3, #4
 8119118:	681b      	ldr	r3, [r3, #0]
 811911a:	600a      	str	r2, [r1, #0]
 811911c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8119120:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8119124:	2301      	movs	r3, #1
 8119126:	e0a3      	b.n	8119270 <_printf_i+0x1f4>
 8119128:	6825      	ldr	r5, [r4, #0]
 811912a:	6808      	ldr	r0, [r1, #0]
 811912c:	062e      	lsls	r6, r5, #24
 811912e:	f100 0304 	add.w	r3, r0, #4
 8119132:	d50a      	bpl.n	811914a <_printf_i+0xce>
 8119134:	6805      	ldr	r5, [r0, #0]
 8119136:	600b      	str	r3, [r1, #0]
 8119138:	2d00      	cmp	r5, #0
 811913a:	da03      	bge.n	8119144 <_printf_i+0xc8>
 811913c:	232d      	movs	r3, #45	; 0x2d
 811913e:	426d      	negs	r5, r5
 8119140:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8119144:	485e      	ldr	r0, [pc, #376]	; (81192c0 <_printf_i+0x244>)
 8119146:	230a      	movs	r3, #10
 8119148:	e019      	b.n	811917e <_printf_i+0x102>
 811914a:	f015 0f40 	tst.w	r5, #64	; 0x40
 811914e:	6805      	ldr	r5, [r0, #0]
 8119150:	600b      	str	r3, [r1, #0]
 8119152:	bf18      	it	ne
 8119154:	b22d      	sxthne	r5, r5
 8119156:	e7ef      	b.n	8119138 <_printf_i+0xbc>
 8119158:	680b      	ldr	r3, [r1, #0]
 811915a:	6825      	ldr	r5, [r4, #0]
 811915c:	1d18      	adds	r0, r3, #4
 811915e:	6008      	str	r0, [r1, #0]
 8119160:	0628      	lsls	r0, r5, #24
 8119162:	d501      	bpl.n	8119168 <_printf_i+0xec>
 8119164:	681d      	ldr	r5, [r3, #0]
 8119166:	e002      	b.n	811916e <_printf_i+0xf2>
 8119168:	0669      	lsls	r1, r5, #25
 811916a:	d5fb      	bpl.n	8119164 <_printf_i+0xe8>
 811916c:	881d      	ldrh	r5, [r3, #0]
 811916e:	4854      	ldr	r0, [pc, #336]	; (81192c0 <_printf_i+0x244>)
 8119170:	2f6f      	cmp	r7, #111	; 0x6f
 8119172:	bf0c      	ite	eq
 8119174:	2308      	moveq	r3, #8
 8119176:	230a      	movne	r3, #10
 8119178:	2100      	movs	r1, #0
 811917a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 811917e:	6866      	ldr	r6, [r4, #4]
 8119180:	60a6      	str	r6, [r4, #8]
 8119182:	2e00      	cmp	r6, #0
 8119184:	bfa2      	ittt	ge
 8119186:	6821      	ldrge	r1, [r4, #0]
 8119188:	f021 0104 	bicge.w	r1, r1, #4
 811918c:	6021      	strge	r1, [r4, #0]
 811918e:	b90d      	cbnz	r5, 8119194 <_printf_i+0x118>
 8119190:	2e00      	cmp	r6, #0
 8119192:	d04d      	beq.n	8119230 <_printf_i+0x1b4>
 8119194:	4616      	mov	r6, r2
 8119196:	fbb5 f1f3 	udiv	r1, r5, r3
 811919a:	fb03 5711 	mls	r7, r3, r1, r5
 811919e:	5dc7      	ldrb	r7, [r0, r7]
 81191a0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 81191a4:	462f      	mov	r7, r5
 81191a6:	42bb      	cmp	r3, r7
 81191a8:	460d      	mov	r5, r1
 81191aa:	d9f4      	bls.n	8119196 <_printf_i+0x11a>
 81191ac:	2b08      	cmp	r3, #8
 81191ae:	d10b      	bne.n	81191c8 <_printf_i+0x14c>
 81191b0:	6823      	ldr	r3, [r4, #0]
 81191b2:	07df      	lsls	r7, r3, #31
 81191b4:	d508      	bpl.n	81191c8 <_printf_i+0x14c>
 81191b6:	6923      	ldr	r3, [r4, #16]
 81191b8:	6861      	ldr	r1, [r4, #4]
 81191ba:	4299      	cmp	r1, r3
 81191bc:	bfde      	ittt	le
 81191be:	2330      	movle	r3, #48	; 0x30
 81191c0:	f806 3c01 	strble.w	r3, [r6, #-1]
 81191c4:	f106 36ff 	addle.w	r6, r6, #4294967295
 81191c8:	1b92      	subs	r2, r2, r6
 81191ca:	6122      	str	r2, [r4, #16]
 81191cc:	f8cd a000 	str.w	sl, [sp]
 81191d0:	464b      	mov	r3, r9
 81191d2:	aa03      	add	r2, sp, #12
 81191d4:	4621      	mov	r1, r4
 81191d6:	4640      	mov	r0, r8
 81191d8:	f7ff fee2 	bl	8118fa0 <_printf_common>
 81191dc:	3001      	adds	r0, #1
 81191de:	d14c      	bne.n	811927a <_printf_i+0x1fe>
 81191e0:	f04f 30ff 	mov.w	r0, #4294967295
 81191e4:	b004      	add	sp, #16
 81191e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 81191ea:	4835      	ldr	r0, [pc, #212]	; (81192c0 <_printf_i+0x244>)
 81191ec:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 81191f0:	6823      	ldr	r3, [r4, #0]
 81191f2:	680e      	ldr	r6, [r1, #0]
 81191f4:	061f      	lsls	r7, r3, #24
 81191f6:	f856 5b04 	ldr.w	r5, [r6], #4
 81191fa:	600e      	str	r6, [r1, #0]
 81191fc:	d514      	bpl.n	8119228 <_printf_i+0x1ac>
 81191fe:	07d9      	lsls	r1, r3, #31
 8119200:	bf44      	itt	mi
 8119202:	f043 0320 	orrmi.w	r3, r3, #32
 8119206:	6023      	strmi	r3, [r4, #0]
 8119208:	b91d      	cbnz	r5, 8119212 <_printf_i+0x196>
 811920a:	6823      	ldr	r3, [r4, #0]
 811920c:	f023 0320 	bic.w	r3, r3, #32
 8119210:	6023      	str	r3, [r4, #0]
 8119212:	2310      	movs	r3, #16
 8119214:	e7b0      	b.n	8119178 <_printf_i+0xfc>
 8119216:	6823      	ldr	r3, [r4, #0]
 8119218:	f043 0320 	orr.w	r3, r3, #32
 811921c:	6023      	str	r3, [r4, #0]
 811921e:	2378      	movs	r3, #120	; 0x78
 8119220:	4828      	ldr	r0, [pc, #160]	; (81192c4 <_printf_i+0x248>)
 8119222:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8119226:	e7e3      	b.n	81191f0 <_printf_i+0x174>
 8119228:	065e      	lsls	r6, r3, #25
 811922a:	bf48      	it	mi
 811922c:	b2ad      	uxthmi	r5, r5
 811922e:	e7e6      	b.n	81191fe <_printf_i+0x182>
 8119230:	4616      	mov	r6, r2
 8119232:	e7bb      	b.n	81191ac <_printf_i+0x130>
 8119234:	680b      	ldr	r3, [r1, #0]
 8119236:	6826      	ldr	r6, [r4, #0]
 8119238:	6960      	ldr	r0, [r4, #20]
 811923a:	1d1d      	adds	r5, r3, #4
 811923c:	600d      	str	r5, [r1, #0]
 811923e:	0635      	lsls	r5, r6, #24
 8119240:	681b      	ldr	r3, [r3, #0]
 8119242:	d501      	bpl.n	8119248 <_printf_i+0x1cc>
 8119244:	6018      	str	r0, [r3, #0]
 8119246:	e002      	b.n	811924e <_printf_i+0x1d2>
 8119248:	0671      	lsls	r1, r6, #25
 811924a:	d5fb      	bpl.n	8119244 <_printf_i+0x1c8>
 811924c:	8018      	strh	r0, [r3, #0]
 811924e:	2300      	movs	r3, #0
 8119250:	6123      	str	r3, [r4, #16]
 8119252:	4616      	mov	r6, r2
 8119254:	e7ba      	b.n	81191cc <_printf_i+0x150>
 8119256:	680b      	ldr	r3, [r1, #0]
 8119258:	1d1a      	adds	r2, r3, #4
 811925a:	600a      	str	r2, [r1, #0]
 811925c:	681e      	ldr	r6, [r3, #0]
 811925e:	6862      	ldr	r2, [r4, #4]
 8119260:	2100      	movs	r1, #0
 8119262:	4630      	mov	r0, r6
 8119264:	f7e7 f844 	bl	81002f0 <memchr>
 8119268:	b108      	cbz	r0, 811926e <_printf_i+0x1f2>
 811926a:	1b80      	subs	r0, r0, r6
 811926c:	6060      	str	r0, [r4, #4]
 811926e:	6863      	ldr	r3, [r4, #4]
 8119270:	6123      	str	r3, [r4, #16]
 8119272:	2300      	movs	r3, #0
 8119274:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8119278:	e7a8      	b.n	81191cc <_printf_i+0x150>
 811927a:	6923      	ldr	r3, [r4, #16]
 811927c:	4632      	mov	r2, r6
 811927e:	4649      	mov	r1, r9
 8119280:	4640      	mov	r0, r8
 8119282:	47d0      	blx	sl
 8119284:	3001      	adds	r0, #1
 8119286:	d0ab      	beq.n	81191e0 <_printf_i+0x164>
 8119288:	6823      	ldr	r3, [r4, #0]
 811928a:	079b      	lsls	r3, r3, #30
 811928c:	d413      	bmi.n	81192b6 <_printf_i+0x23a>
 811928e:	68e0      	ldr	r0, [r4, #12]
 8119290:	9b03      	ldr	r3, [sp, #12]
 8119292:	4298      	cmp	r0, r3
 8119294:	bfb8      	it	lt
 8119296:	4618      	movlt	r0, r3
 8119298:	e7a4      	b.n	81191e4 <_printf_i+0x168>
 811929a:	2301      	movs	r3, #1
 811929c:	4632      	mov	r2, r6
 811929e:	4649      	mov	r1, r9
 81192a0:	4640      	mov	r0, r8
 81192a2:	47d0      	blx	sl
 81192a4:	3001      	adds	r0, #1
 81192a6:	d09b      	beq.n	81191e0 <_printf_i+0x164>
 81192a8:	3501      	adds	r5, #1
 81192aa:	68e3      	ldr	r3, [r4, #12]
 81192ac:	9903      	ldr	r1, [sp, #12]
 81192ae:	1a5b      	subs	r3, r3, r1
 81192b0:	42ab      	cmp	r3, r5
 81192b2:	dcf2      	bgt.n	811929a <_printf_i+0x21e>
 81192b4:	e7eb      	b.n	811928e <_printf_i+0x212>
 81192b6:	2500      	movs	r5, #0
 81192b8:	f104 0619 	add.w	r6, r4, #25
 81192bc:	e7f5      	b.n	81192aa <_printf_i+0x22e>
 81192be:	bf00      	nop
 81192c0:	0811b50e 	.word	0x0811b50e
 81192c4:	0811b51f 	.word	0x0811b51f

081192c8 <quorem>:
 81192c8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 81192cc:	6903      	ldr	r3, [r0, #16]
 81192ce:	690c      	ldr	r4, [r1, #16]
 81192d0:	42a3      	cmp	r3, r4
 81192d2:	4607      	mov	r7, r0
 81192d4:	f2c0 8081 	blt.w	81193da <quorem+0x112>
 81192d8:	3c01      	subs	r4, #1
 81192da:	f101 0814 	add.w	r8, r1, #20
 81192de:	f100 0514 	add.w	r5, r0, #20
 81192e2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 81192e6:	9301      	str	r3, [sp, #4]
 81192e8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 81192ec:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 81192f0:	3301      	adds	r3, #1
 81192f2:	429a      	cmp	r2, r3
 81192f4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 81192f8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 81192fc:	fbb2 f6f3 	udiv	r6, r2, r3
 8119300:	d331      	bcc.n	8119366 <quorem+0x9e>
 8119302:	f04f 0e00 	mov.w	lr, #0
 8119306:	4640      	mov	r0, r8
 8119308:	46ac      	mov	ip, r5
 811930a:	46f2      	mov	sl, lr
 811930c:	f850 2b04 	ldr.w	r2, [r0], #4
 8119310:	b293      	uxth	r3, r2
 8119312:	fb06 e303 	mla	r3, r6, r3, lr
 8119316:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 811931a:	b29b      	uxth	r3, r3
 811931c:	ebaa 0303 	sub.w	r3, sl, r3
 8119320:	0c12      	lsrs	r2, r2, #16
 8119322:	f8dc a000 	ldr.w	sl, [ip]
 8119326:	fb06 e202 	mla	r2, r6, r2, lr
 811932a:	fa13 f38a 	uxtah	r3, r3, sl
 811932e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8119332:	fa1f fa82 	uxth.w	sl, r2
 8119336:	f8dc 2000 	ldr.w	r2, [ip]
 811933a:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 811933e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8119342:	b29b      	uxth	r3, r3
 8119344:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8119348:	4581      	cmp	r9, r0
 811934a:	f84c 3b04 	str.w	r3, [ip], #4
 811934e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8119352:	d2db      	bcs.n	811930c <quorem+0x44>
 8119354:	f855 300b 	ldr.w	r3, [r5, fp]
 8119358:	b92b      	cbnz	r3, 8119366 <quorem+0x9e>
 811935a:	9b01      	ldr	r3, [sp, #4]
 811935c:	3b04      	subs	r3, #4
 811935e:	429d      	cmp	r5, r3
 8119360:	461a      	mov	r2, r3
 8119362:	d32e      	bcc.n	81193c2 <quorem+0xfa>
 8119364:	613c      	str	r4, [r7, #16]
 8119366:	4638      	mov	r0, r7
 8119368:	f001 f8b0 	bl	811a4cc <__mcmp>
 811936c:	2800      	cmp	r0, #0
 811936e:	db24      	blt.n	81193ba <quorem+0xf2>
 8119370:	3601      	adds	r6, #1
 8119372:	4628      	mov	r0, r5
 8119374:	f04f 0c00 	mov.w	ip, #0
 8119378:	f858 2b04 	ldr.w	r2, [r8], #4
 811937c:	f8d0 e000 	ldr.w	lr, [r0]
 8119380:	b293      	uxth	r3, r2
 8119382:	ebac 0303 	sub.w	r3, ip, r3
 8119386:	0c12      	lsrs	r2, r2, #16
 8119388:	fa13 f38e 	uxtah	r3, r3, lr
 811938c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8119390:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8119394:	b29b      	uxth	r3, r3
 8119396:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 811939a:	45c1      	cmp	r9, r8
 811939c:	f840 3b04 	str.w	r3, [r0], #4
 81193a0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 81193a4:	d2e8      	bcs.n	8119378 <quorem+0xb0>
 81193a6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 81193aa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 81193ae:	b922      	cbnz	r2, 81193ba <quorem+0xf2>
 81193b0:	3b04      	subs	r3, #4
 81193b2:	429d      	cmp	r5, r3
 81193b4:	461a      	mov	r2, r3
 81193b6:	d30a      	bcc.n	81193ce <quorem+0x106>
 81193b8:	613c      	str	r4, [r7, #16]
 81193ba:	4630      	mov	r0, r6
 81193bc:	b003      	add	sp, #12
 81193be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 81193c2:	6812      	ldr	r2, [r2, #0]
 81193c4:	3b04      	subs	r3, #4
 81193c6:	2a00      	cmp	r2, #0
 81193c8:	d1cc      	bne.n	8119364 <quorem+0x9c>
 81193ca:	3c01      	subs	r4, #1
 81193cc:	e7c7      	b.n	811935e <quorem+0x96>
 81193ce:	6812      	ldr	r2, [r2, #0]
 81193d0:	3b04      	subs	r3, #4
 81193d2:	2a00      	cmp	r2, #0
 81193d4:	d1f0      	bne.n	81193b8 <quorem+0xf0>
 81193d6:	3c01      	subs	r4, #1
 81193d8:	e7eb      	b.n	81193b2 <quorem+0xea>
 81193da:	2000      	movs	r0, #0
 81193dc:	e7ee      	b.n	81193bc <quorem+0xf4>
	...

081193e0 <_dtoa_r>:
 81193e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 81193e4:	ed2d 8b02 	vpush	{d8}
 81193e8:	ec57 6b10 	vmov	r6, r7, d0
 81193ec:	b095      	sub	sp, #84	; 0x54
 81193ee:	6a45      	ldr	r5, [r0, #36]	; 0x24
 81193f0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 81193f4:	9105      	str	r1, [sp, #20]
 81193f6:	e9cd 6702 	strd	r6, r7, [sp, #8]
 81193fa:	4604      	mov	r4, r0
 81193fc:	9209      	str	r2, [sp, #36]	; 0x24
 81193fe:	930f      	str	r3, [sp, #60]	; 0x3c
 8119400:	b975      	cbnz	r5, 8119420 <_dtoa_r+0x40>
 8119402:	2010      	movs	r0, #16
 8119404:	f000 fddc 	bl	8119fc0 <malloc>
 8119408:	4602      	mov	r2, r0
 811940a:	6260      	str	r0, [r4, #36]	; 0x24
 811940c:	b920      	cbnz	r0, 8119418 <_dtoa_r+0x38>
 811940e:	4bb2      	ldr	r3, [pc, #712]	; (81196d8 <_dtoa_r+0x2f8>)
 8119410:	21ea      	movs	r1, #234	; 0xea
 8119412:	48b2      	ldr	r0, [pc, #712]	; (81196dc <_dtoa_r+0x2fc>)
 8119414:	f001 fa24 	bl	811a860 <__assert_func>
 8119418:	e9c0 5501 	strd	r5, r5, [r0, #4]
 811941c:	6005      	str	r5, [r0, #0]
 811941e:	60c5      	str	r5, [r0, #12]
 8119420:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8119422:	6819      	ldr	r1, [r3, #0]
 8119424:	b151      	cbz	r1, 811943c <_dtoa_r+0x5c>
 8119426:	685a      	ldr	r2, [r3, #4]
 8119428:	604a      	str	r2, [r1, #4]
 811942a:	2301      	movs	r3, #1
 811942c:	4093      	lsls	r3, r2
 811942e:	608b      	str	r3, [r1, #8]
 8119430:	4620      	mov	r0, r4
 8119432:	f000 fe0d 	bl	811a050 <_Bfree>
 8119436:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8119438:	2200      	movs	r2, #0
 811943a:	601a      	str	r2, [r3, #0]
 811943c:	1e3b      	subs	r3, r7, #0
 811943e:	bfb9      	ittee	lt
 8119440:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8119444:	9303      	strlt	r3, [sp, #12]
 8119446:	2300      	movge	r3, #0
 8119448:	f8c8 3000 	strge.w	r3, [r8]
 811944c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8119450:	4ba3      	ldr	r3, [pc, #652]	; (81196e0 <_dtoa_r+0x300>)
 8119452:	bfbc      	itt	lt
 8119454:	2201      	movlt	r2, #1
 8119456:	f8c8 2000 	strlt.w	r2, [r8]
 811945a:	ea33 0309 	bics.w	r3, r3, r9
 811945e:	d11b      	bne.n	8119498 <_dtoa_r+0xb8>
 8119460:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8119462:	f242 730f 	movw	r3, #9999	; 0x270f
 8119466:	6013      	str	r3, [r2, #0]
 8119468:	f3c9 0313 	ubfx	r3, r9, #0, #20
 811946c:	4333      	orrs	r3, r6
 811946e:	f000 857a 	beq.w	8119f66 <_dtoa_r+0xb86>
 8119472:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8119474:	b963      	cbnz	r3, 8119490 <_dtoa_r+0xb0>
 8119476:	4b9b      	ldr	r3, [pc, #620]	; (81196e4 <_dtoa_r+0x304>)
 8119478:	e024      	b.n	81194c4 <_dtoa_r+0xe4>
 811947a:	4b9b      	ldr	r3, [pc, #620]	; (81196e8 <_dtoa_r+0x308>)
 811947c:	9300      	str	r3, [sp, #0]
 811947e:	3308      	adds	r3, #8
 8119480:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8119482:	6013      	str	r3, [r2, #0]
 8119484:	9800      	ldr	r0, [sp, #0]
 8119486:	b015      	add	sp, #84	; 0x54
 8119488:	ecbd 8b02 	vpop	{d8}
 811948c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8119490:	4b94      	ldr	r3, [pc, #592]	; (81196e4 <_dtoa_r+0x304>)
 8119492:	9300      	str	r3, [sp, #0]
 8119494:	3303      	adds	r3, #3
 8119496:	e7f3      	b.n	8119480 <_dtoa_r+0xa0>
 8119498:	ed9d 7b02 	vldr	d7, [sp, #8]
 811949c:	2200      	movs	r2, #0
 811949e:	ec51 0b17 	vmov	r0, r1, d7
 81194a2:	2300      	movs	r3, #0
 81194a4:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 81194a8:	f7e7 fb96 	bl	8100bd8 <__aeabi_dcmpeq>
 81194ac:	4680      	mov	r8, r0
 81194ae:	b158      	cbz	r0, 81194c8 <_dtoa_r+0xe8>
 81194b0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 81194b2:	2301      	movs	r3, #1
 81194b4:	6013      	str	r3, [r2, #0]
 81194b6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 81194b8:	2b00      	cmp	r3, #0
 81194ba:	f000 8551 	beq.w	8119f60 <_dtoa_r+0xb80>
 81194be:	488b      	ldr	r0, [pc, #556]	; (81196ec <_dtoa_r+0x30c>)
 81194c0:	6018      	str	r0, [r3, #0]
 81194c2:	1e43      	subs	r3, r0, #1
 81194c4:	9300      	str	r3, [sp, #0]
 81194c6:	e7dd      	b.n	8119484 <_dtoa_r+0xa4>
 81194c8:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 81194cc:	aa12      	add	r2, sp, #72	; 0x48
 81194ce:	a913      	add	r1, sp, #76	; 0x4c
 81194d0:	4620      	mov	r0, r4
 81194d2:	f001 f89f 	bl	811a614 <__d2b>
 81194d6:	f3c9 550a 	ubfx	r5, r9, #20, #11
 81194da:	4683      	mov	fp, r0
 81194dc:	2d00      	cmp	r5, #0
 81194de:	d07c      	beq.n	81195da <_dtoa_r+0x1fa>
 81194e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 81194e2:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 81194e6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 81194ea:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 81194ee:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 81194f2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 81194f6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 81194fa:	4b7d      	ldr	r3, [pc, #500]	; (81196f0 <_dtoa_r+0x310>)
 81194fc:	2200      	movs	r2, #0
 81194fe:	4630      	mov	r0, r6
 8119500:	4639      	mov	r1, r7
 8119502:	f7e6 ff49 	bl	8100398 <__aeabi_dsub>
 8119506:	a36e      	add	r3, pc, #440	; (adr r3, 81196c0 <_dtoa_r+0x2e0>)
 8119508:	e9d3 2300 	ldrd	r2, r3, [r3]
 811950c:	f7e7 f8fc 	bl	8100708 <__aeabi_dmul>
 8119510:	a36d      	add	r3, pc, #436	; (adr r3, 81196c8 <_dtoa_r+0x2e8>)
 8119512:	e9d3 2300 	ldrd	r2, r3, [r3]
 8119516:	f7e6 ff41 	bl	810039c <__adddf3>
 811951a:	4606      	mov	r6, r0
 811951c:	4628      	mov	r0, r5
 811951e:	460f      	mov	r7, r1
 8119520:	f7e7 f888 	bl	8100634 <__aeabi_i2d>
 8119524:	a36a      	add	r3, pc, #424	; (adr r3, 81196d0 <_dtoa_r+0x2f0>)
 8119526:	e9d3 2300 	ldrd	r2, r3, [r3]
 811952a:	f7e7 f8ed 	bl	8100708 <__aeabi_dmul>
 811952e:	4602      	mov	r2, r0
 8119530:	460b      	mov	r3, r1
 8119532:	4630      	mov	r0, r6
 8119534:	4639      	mov	r1, r7
 8119536:	f7e6 ff31 	bl	810039c <__adddf3>
 811953a:	4606      	mov	r6, r0
 811953c:	460f      	mov	r7, r1
 811953e:	f7e7 fb93 	bl	8100c68 <__aeabi_d2iz>
 8119542:	2200      	movs	r2, #0
 8119544:	4682      	mov	sl, r0
 8119546:	2300      	movs	r3, #0
 8119548:	4630      	mov	r0, r6
 811954a:	4639      	mov	r1, r7
 811954c:	f7e7 fb4e 	bl	8100bec <__aeabi_dcmplt>
 8119550:	b148      	cbz	r0, 8119566 <_dtoa_r+0x186>
 8119552:	4650      	mov	r0, sl
 8119554:	f7e7 f86e 	bl	8100634 <__aeabi_i2d>
 8119558:	4632      	mov	r2, r6
 811955a:	463b      	mov	r3, r7
 811955c:	f7e7 fb3c 	bl	8100bd8 <__aeabi_dcmpeq>
 8119560:	b908      	cbnz	r0, 8119566 <_dtoa_r+0x186>
 8119562:	f10a 3aff 	add.w	sl, sl, #4294967295
 8119566:	f1ba 0f16 	cmp.w	sl, #22
 811956a:	d854      	bhi.n	8119616 <_dtoa_r+0x236>
 811956c:	4b61      	ldr	r3, [pc, #388]	; (81196f4 <_dtoa_r+0x314>)
 811956e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8119572:	e9d3 2300 	ldrd	r2, r3, [r3]
 8119576:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 811957a:	f7e7 fb37 	bl	8100bec <__aeabi_dcmplt>
 811957e:	2800      	cmp	r0, #0
 8119580:	d04b      	beq.n	811961a <_dtoa_r+0x23a>
 8119582:	f10a 3aff 	add.w	sl, sl, #4294967295
 8119586:	2300      	movs	r3, #0
 8119588:	930e      	str	r3, [sp, #56]	; 0x38
 811958a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 811958c:	1b5d      	subs	r5, r3, r5
 811958e:	1e6b      	subs	r3, r5, #1
 8119590:	9304      	str	r3, [sp, #16]
 8119592:	bf43      	ittte	mi
 8119594:	2300      	movmi	r3, #0
 8119596:	f1c5 0801 	rsbmi	r8, r5, #1
 811959a:	9304      	strmi	r3, [sp, #16]
 811959c:	f04f 0800 	movpl.w	r8, #0
 81195a0:	f1ba 0f00 	cmp.w	sl, #0
 81195a4:	db3b      	blt.n	811961e <_dtoa_r+0x23e>
 81195a6:	9b04      	ldr	r3, [sp, #16]
 81195a8:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 81195ac:	4453      	add	r3, sl
 81195ae:	9304      	str	r3, [sp, #16]
 81195b0:	2300      	movs	r3, #0
 81195b2:	9306      	str	r3, [sp, #24]
 81195b4:	9b05      	ldr	r3, [sp, #20]
 81195b6:	2b09      	cmp	r3, #9
 81195b8:	d869      	bhi.n	811968e <_dtoa_r+0x2ae>
 81195ba:	2b05      	cmp	r3, #5
 81195bc:	bfc4      	itt	gt
 81195be:	3b04      	subgt	r3, #4
 81195c0:	9305      	strgt	r3, [sp, #20]
 81195c2:	9b05      	ldr	r3, [sp, #20]
 81195c4:	f1a3 0302 	sub.w	r3, r3, #2
 81195c8:	bfcc      	ite	gt
 81195ca:	2500      	movgt	r5, #0
 81195cc:	2501      	movle	r5, #1
 81195ce:	2b03      	cmp	r3, #3
 81195d0:	d869      	bhi.n	81196a6 <_dtoa_r+0x2c6>
 81195d2:	e8df f003 	tbb	[pc, r3]
 81195d6:	4e2c      	.short	0x4e2c
 81195d8:	5a4c      	.short	0x5a4c
 81195da:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 81195de:	441d      	add	r5, r3
 81195e0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 81195e4:	2b20      	cmp	r3, #32
 81195e6:	bfc1      	itttt	gt
 81195e8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 81195ec:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 81195f0:	fa09 f303 	lslgt.w	r3, r9, r3
 81195f4:	fa26 f000 	lsrgt.w	r0, r6, r0
 81195f8:	bfda      	itte	le
 81195fa:	f1c3 0320 	rsble	r3, r3, #32
 81195fe:	fa06 f003 	lslle.w	r0, r6, r3
 8119602:	4318      	orrgt	r0, r3
 8119604:	f7e7 f806 	bl	8100614 <__aeabi_ui2d>
 8119608:	2301      	movs	r3, #1
 811960a:	4606      	mov	r6, r0
 811960c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8119610:	3d01      	subs	r5, #1
 8119612:	9310      	str	r3, [sp, #64]	; 0x40
 8119614:	e771      	b.n	81194fa <_dtoa_r+0x11a>
 8119616:	2301      	movs	r3, #1
 8119618:	e7b6      	b.n	8119588 <_dtoa_r+0x1a8>
 811961a:	900e      	str	r0, [sp, #56]	; 0x38
 811961c:	e7b5      	b.n	811958a <_dtoa_r+0x1aa>
 811961e:	f1ca 0300 	rsb	r3, sl, #0
 8119622:	9306      	str	r3, [sp, #24]
 8119624:	2300      	movs	r3, #0
 8119626:	eba8 080a 	sub.w	r8, r8, sl
 811962a:	930d      	str	r3, [sp, #52]	; 0x34
 811962c:	e7c2      	b.n	81195b4 <_dtoa_r+0x1d4>
 811962e:	2300      	movs	r3, #0
 8119630:	9308      	str	r3, [sp, #32]
 8119632:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8119634:	2b00      	cmp	r3, #0
 8119636:	dc39      	bgt.n	81196ac <_dtoa_r+0x2cc>
 8119638:	f04f 0901 	mov.w	r9, #1
 811963c:	f8cd 9004 	str.w	r9, [sp, #4]
 8119640:	464b      	mov	r3, r9
 8119642:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8119646:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8119648:	2200      	movs	r2, #0
 811964a:	6042      	str	r2, [r0, #4]
 811964c:	2204      	movs	r2, #4
 811964e:	f102 0614 	add.w	r6, r2, #20
 8119652:	429e      	cmp	r6, r3
 8119654:	6841      	ldr	r1, [r0, #4]
 8119656:	d92f      	bls.n	81196b8 <_dtoa_r+0x2d8>
 8119658:	4620      	mov	r0, r4
 811965a:	f000 fcb9 	bl	8119fd0 <_Balloc>
 811965e:	9000      	str	r0, [sp, #0]
 8119660:	2800      	cmp	r0, #0
 8119662:	d14b      	bne.n	81196fc <_dtoa_r+0x31c>
 8119664:	4b24      	ldr	r3, [pc, #144]	; (81196f8 <_dtoa_r+0x318>)
 8119666:	4602      	mov	r2, r0
 8119668:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 811966c:	e6d1      	b.n	8119412 <_dtoa_r+0x32>
 811966e:	2301      	movs	r3, #1
 8119670:	e7de      	b.n	8119630 <_dtoa_r+0x250>
 8119672:	2300      	movs	r3, #0
 8119674:	9308      	str	r3, [sp, #32]
 8119676:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8119678:	eb0a 0903 	add.w	r9, sl, r3
 811967c:	f109 0301 	add.w	r3, r9, #1
 8119680:	2b01      	cmp	r3, #1
 8119682:	9301      	str	r3, [sp, #4]
 8119684:	bfb8      	it	lt
 8119686:	2301      	movlt	r3, #1
 8119688:	e7dd      	b.n	8119646 <_dtoa_r+0x266>
 811968a:	2301      	movs	r3, #1
 811968c:	e7f2      	b.n	8119674 <_dtoa_r+0x294>
 811968e:	2501      	movs	r5, #1
 8119690:	2300      	movs	r3, #0
 8119692:	9305      	str	r3, [sp, #20]
 8119694:	9508      	str	r5, [sp, #32]
 8119696:	f04f 39ff 	mov.w	r9, #4294967295
 811969a:	2200      	movs	r2, #0
 811969c:	f8cd 9004 	str.w	r9, [sp, #4]
 81196a0:	2312      	movs	r3, #18
 81196a2:	9209      	str	r2, [sp, #36]	; 0x24
 81196a4:	e7cf      	b.n	8119646 <_dtoa_r+0x266>
 81196a6:	2301      	movs	r3, #1
 81196a8:	9308      	str	r3, [sp, #32]
 81196aa:	e7f4      	b.n	8119696 <_dtoa_r+0x2b6>
 81196ac:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 81196b0:	f8cd 9004 	str.w	r9, [sp, #4]
 81196b4:	464b      	mov	r3, r9
 81196b6:	e7c6      	b.n	8119646 <_dtoa_r+0x266>
 81196b8:	3101      	adds	r1, #1
 81196ba:	6041      	str	r1, [r0, #4]
 81196bc:	0052      	lsls	r2, r2, #1
 81196be:	e7c6      	b.n	811964e <_dtoa_r+0x26e>
 81196c0:	636f4361 	.word	0x636f4361
 81196c4:	3fd287a7 	.word	0x3fd287a7
 81196c8:	8b60c8b3 	.word	0x8b60c8b3
 81196cc:	3fc68a28 	.word	0x3fc68a28
 81196d0:	509f79fb 	.word	0x509f79fb
 81196d4:	3fd34413 	.word	0x3fd34413
 81196d8:	0811b53d 	.word	0x0811b53d
 81196dc:	0811b554 	.word	0x0811b554
 81196e0:	7ff00000 	.word	0x7ff00000
 81196e4:	0811b539 	.word	0x0811b539
 81196e8:	0811b530 	.word	0x0811b530
 81196ec:	0811b50d 	.word	0x0811b50d
 81196f0:	3ff80000 	.word	0x3ff80000
 81196f4:	0811b650 	.word	0x0811b650
 81196f8:	0811b5b3 	.word	0x0811b5b3
 81196fc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 81196fe:	9a00      	ldr	r2, [sp, #0]
 8119700:	601a      	str	r2, [r3, #0]
 8119702:	9b01      	ldr	r3, [sp, #4]
 8119704:	2b0e      	cmp	r3, #14
 8119706:	f200 80ad 	bhi.w	8119864 <_dtoa_r+0x484>
 811970a:	2d00      	cmp	r5, #0
 811970c:	f000 80aa 	beq.w	8119864 <_dtoa_r+0x484>
 8119710:	f1ba 0f00 	cmp.w	sl, #0
 8119714:	dd36      	ble.n	8119784 <_dtoa_r+0x3a4>
 8119716:	4ac3      	ldr	r2, [pc, #780]	; (8119a24 <_dtoa_r+0x644>)
 8119718:	f00a 030f 	and.w	r3, sl, #15
 811971c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8119720:	ed93 7b00 	vldr	d7, [r3]
 8119724:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8119728:	ea4f 172a 	mov.w	r7, sl, asr #4
 811972c:	eeb0 8a47 	vmov.f32	s16, s14
 8119730:	eef0 8a67 	vmov.f32	s17, s15
 8119734:	d016      	beq.n	8119764 <_dtoa_r+0x384>
 8119736:	4bbc      	ldr	r3, [pc, #752]	; (8119a28 <_dtoa_r+0x648>)
 8119738:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 811973c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8119740:	f7e7 f90c 	bl	810095c <__aeabi_ddiv>
 8119744:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8119748:	f007 070f 	and.w	r7, r7, #15
 811974c:	2503      	movs	r5, #3
 811974e:	4eb6      	ldr	r6, [pc, #728]	; (8119a28 <_dtoa_r+0x648>)
 8119750:	b957      	cbnz	r7, 8119768 <_dtoa_r+0x388>
 8119752:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8119756:	ec53 2b18 	vmov	r2, r3, d8
 811975a:	f7e7 f8ff 	bl	810095c <__aeabi_ddiv>
 811975e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8119762:	e029      	b.n	81197b8 <_dtoa_r+0x3d8>
 8119764:	2502      	movs	r5, #2
 8119766:	e7f2      	b.n	811974e <_dtoa_r+0x36e>
 8119768:	07f9      	lsls	r1, r7, #31
 811976a:	d508      	bpl.n	811977e <_dtoa_r+0x39e>
 811976c:	ec51 0b18 	vmov	r0, r1, d8
 8119770:	e9d6 2300 	ldrd	r2, r3, [r6]
 8119774:	f7e6 ffc8 	bl	8100708 <__aeabi_dmul>
 8119778:	ec41 0b18 	vmov	d8, r0, r1
 811977c:	3501      	adds	r5, #1
 811977e:	107f      	asrs	r7, r7, #1
 8119780:	3608      	adds	r6, #8
 8119782:	e7e5      	b.n	8119750 <_dtoa_r+0x370>
 8119784:	f000 80a6 	beq.w	81198d4 <_dtoa_r+0x4f4>
 8119788:	f1ca 0600 	rsb	r6, sl, #0
 811978c:	4ba5      	ldr	r3, [pc, #660]	; (8119a24 <_dtoa_r+0x644>)
 811978e:	4fa6      	ldr	r7, [pc, #664]	; (8119a28 <_dtoa_r+0x648>)
 8119790:	f006 020f 	and.w	r2, r6, #15
 8119794:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8119798:	e9d3 2300 	ldrd	r2, r3, [r3]
 811979c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 81197a0:	f7e6 ffb2 	bl	8100708 <__aeabi_dmul>
 81197a4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 81197a8:	1136      	asrs	r6, r6, #4
 81197aa:	2300      	movs	r3, #0
 81197ac:	2502      	movs	r5, #2
 81197ae:	2e00      	cmp	r6, #0
 81197b0:	f040 8085 	bne.w	81198be <_dtoa_r+0x4de>
 81197b4:	2b00      	cmp	r3, #0
 81197b6:	d1d2      	bne.n	811975e <_dtoa_r+0x37e>
 81197b8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 81197ba:	2b00      	cmp	r3, #0
 81197bc:	f000 808c 	beq.w	81198d8 <_dtoa_r+0x4f8>
 81197c0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 81197c4:	4b99      	ldr	r3, [pc, #612]	; (8119a2c <_dtoa_r+0x64c>)
 81197c6:	2200      	movs	r2, #0
 81197c8:	4630      	mov	r0, r6
 81197ca:	4639      	mov	r1, r7
 81197cc:	f7e7 fa0e 	bl	8100bec <__aeabi_dcmplt>
 81197d0:	2800      	cmp	r0, #0
 81197d2:	f000 8081 	beq.w	81198d8 <_dtoa_r+0x4f8>
 81197d6:	9b01      	ldr	r3, [sp, #4]
 81197d8:	2b00      	cmp	r3, #0
 81197da:	d07d      	beq.n	81198d8 <_dtoa_r+0x4f8>
 81197dc:	f1b9 0f00 	cmp.w	r9, #0
 81197e0:	dd3c      	ble.n	811985c <_dtoa_r+0x47c>
 81197e2:	f10a 33ff 	add.w	r3, sl, #4294967295
 81197e6:	9307      	str	r3, [sp, #28]
 81197e8:	2200      	movs	r2, #0
 81197ea:	4b91      	ldr	r3, [pc, #580]	; (8119a30 <_dtoa_r+0x650>)
 81197ec:	4630      	mov	r0, r6
 81197ee:	4639      	mov	r1, r7
 81197f0:	f7e6 ff8a 	bl	8100708 <__aeabi_dmul>
 81197f4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 81197f8:	3501      	adds	r5, #1
 81197fa:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 81197fe:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8119802:	4628      	mov	r0, r5
 8119804:	f7e6 ff16 	bl	8100634 <__aeabi_i2d>
 8119808:	4632      	mov	r2, r6
 811980a:	463b      	mov	r3, r7
 811980c:	f7e6 ff7c 	bl	8100708 <__aeabi_dmul>
 8119810:	4b88      	ldr	r3, [pc, #544]	; (8119a34 <_dtoa_r+0x654>)
 8119812:	2200      	movs	r2, #0
 8119814:	f7e6 fdc2 	bl	810039c <__adddf3>
 8119818:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 811981c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8119820:	9303      	str	r3, [sp, #12]
 8119822:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8119824:	2b00      	cmp	r3, #0
 8119826:	d15c      	bne.n	81198e2 <_dtoa_r+0x502>
 8119828:	4b83      	ldr	r3, [pc, #524]	; (8119a38 <_dtoa_r+0x658>)
 811982a:	2200      	movs	r2, #0
 811982c:	4630      	mov	r0, r6
 811982e:	4639      	mov	r1, r7
 8119830:	f7e6 fdb2 	bl	8100398 <__aeabi_dsub>
 8119834:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8119838:	4606      	mov	r6, r0
 811983a:	460f      	mov	r7, r1
 811983c:	f7e7 f9f4 	bl	8100c28 <__aeabi_dcmpgt>
 8119840:	2800      	cmp	r0, #0
 8119842:	f040 8296 	bne.w	8119d72 <_dtoa_r+0x992>
 8119846:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 811984a:	4630      	mov	r0, r6
 811984c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8119850:	4639      	mov	r1, r7
 8119852:	f7e7 f9cb 	bl	8100bec <__aeabi_dcmplt>
 8119856:	2800      	cmp	r0, #0
 8119858:	f040 8288 	bne.w	8119d6c <_dtoa_r+0x98c>
 811985c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8119860:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8119864:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8119866:	2b00      	cmp	r3, #0
 8119868:	f2c0 8158 	blt.w	8119b1c <_dtoa_r+0x73c>
 811986c:	f1ba 0f0e 	cmp.w	sl, #14
 8119870:	f300 8154 	bgt.w	8119b1c <_dtoa_r+0x73c>
 8119874:	4b6b      	ldr	r3, [pc, #428]	; (8119a24 <_dtoa_r+0x644>)
 8119876:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 811987a:	e9d3 8900 	ldrd	r8, r9, [r3]
 811987e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8119880:	2b00      	cmp	r3, #0
 8119882:	f280 80e3 	bge.w	8119a4c <_dtoa_r+0x66c>
 8119886:	9b01      	ldr	r3, [sp, #4]
 8119888:	2b00      	cmp	r3, #0
 811988a:	f300 80df 	bgt.w	8119a4c <_dtoa_r+0x66c>
 811988e:	f040 826d 	bne.w	8119d6c <_dtoa_r+0x98c>
 8119892:	4b69      	ldr	r3, [pc, #420]	; (8119a38 <_dtoa_r+0x658>)
 8119894:	2200      	movs	r2, #0
 8119896:	4640      	mov	r0, r8
 8119898:	4649      	mov	r1, r9
 811989a:	f7e6 ff35 	bl	8100708 <__aeabi_dmul>
 811989e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 81198a2:	f7e7 f9b7 	bl	8100c14 <__aeabi_dcmpge>
 81198a6:	9e01      	ldr	r6, [sp, #4]
 81198a8:	4637      	mov	r7, r6
 81198aa:	2800      	cmp	r0, #0
 81198ac:	f040 8243 	bne.w	8119d36 <_dtoa_r+0x956>
 81198b0:	9d00      	ldr	r5, [sp, #0]
 81198b2:	2331      	movs	r3, #49	; 0x31
 81198b4:	f805 3b01 	strb.w	r3, [r5], #1
 81198b8:	f10a 0a01 	add.w	sl, sl, #1
 81198bc:	e23f      	b.n	8119d3e <_dtoa_r+0x95e>
 81198be:	07f2      	lsls	r2, r6, #31
 81198c0:	d505      	bpl.n	81198ce <_dtoa_r+0x4ee>
 81198c2:	e9d7 2300 	ldrd	r2, r3, [r7]
 81198c6:	f7e6 ff1f 	bl	8100708 <__aeabi_dmul>
 81198ca:	3501      	adds	r5, #1
 81198cc:	2301      	movs	r3, #1
 81198ce:	1076      	asrs	r6, r6, #1
 81198d0:	3708      	adds	r7, #8
 81198d2:	e76c      	b.n	81197ae <_dtoa_r+0x3ce>
 81198d4:	2502      	movs	r5, #2
 81198d6:	e76f      	b.n	81197b8 <_dtoa_r+0x3d8>
 81198d8:	9b01      	ldr	r3, [sp, #4]
 81198da:	f8cd a01c 	str.w	sl, [sp, #28]
 81198de:	930c      	str	r3, [sp, #48]	; 0x30
 81198e0:	e78d      	b.n	81197fe <_dtoa_r+0x41e>
 81198e2:	9900      	ldr	r1, [sp, #0]
 81198e4:	980c      	ldr	r0, [sp, #48]	; 0x30
 81198e6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 81198e8:	4b4e      	ldr	r3, [pc, #312]	; (8119a24 <_dtoa_r+0x644>)
 81198ea:	ed9d 7b02 	vldr	d7, [sp, #8]
 81198ee:	4401      	add	r1, r0
 81198f0:	9102      	str	r1, [sp, #8]
 81198f2:	9908      	ldr	r1, [sp, #32]
 81198f4:	eeb0 8a47 	vmov.f32	s16, s14
 81198f8:	eef0 8a67 	vmov.f32	s17, s15
 81198fc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8119900:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8119904:	2900      	cmp	r1, #0
 8119906:	d045      	beq.n	8119994 <_dtoa_r+0x5b4>
 8119908:	494c      	ldr	r1, [pc, #304]	; (8119a3c <_dtoa_r+0x65c>)
 811990a:	2000      	movs	r0, #0
 811990c:	f7e7 f826 	bl	810095c <__aeabi_ddiv>
 8119910:	ec53 2b18 	vmov	r2, r3, d8
 8119914:	f7e6 fd40 	bl	8100398 <__aeabi_dsub>
 8119918:	9d00      	ldr	r5, [sp, #0]
 811991a:	ec41 0b18 	vmov	d8, r0, r1
 811991e:	4639      	mov	r1, r7
 8119920:	4630      	mov	r0, r6
 8119922:	f7e7 f9a1 	bl	8100c68 <__aeabi_d2iz>
 8119926:	900c      	str	r0, [sp, #48]	; 0x30
 8119928:	f7e6 fe84 	bl	8100634 <__aeabi_i2d>
 811992c:	4602      	mov	r2, r0
 811992e:	460b      	mov	r3, r1
 8119930:	4630      	mov	r0, r6
 8119932:	4639      	mov	r1, r7
 8119934:	f7e6 fd30 	bl	8100398 <__aeabi_dsub>
 8119938:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 811993a:	3330      	adds	r3, #48	; 0x30
 811993c:	f805 3b01 	strb.w	r3, [r5], #1
 8119940:	ec53 2b18 	vmov	r2, r3, d8
 8119944:	4606      	mov	r6, r0
 8119946:	460f      	mov	r7, r1
 8119948:	f7e7 f950 	bl	8100bec <__aeabi_dcmplt>
 811994c:	2800      	cmp	r0, #0
 811994e:	d165      	bne.n	8119a1c <_dtoa_r+0x63c>
 8119950:	4632      	mov	r2, r6
 8119952:	463b      	mov	r3, r7
 8119954:	4935      	ldr	r1, [pc, #212]	; (8119a2c <_dtoa_r+0x64c>)
 8119956:	2000      	movs	r0, #0
 8119958:	f7e6 fd1e 	bl	8100398 <__aeabi_dsub>
 811995c:	ec53 2b18 	vmov	r2, r3, d8
 8119960:	f7e7 f944 	bl	8100bec <__aeabi_dcmplt>
 8119964:	2800      	cmp	r0, #0
 8119966:	f040 80b9 	bne.w	8119adc <_dtoa_r+0x6fc>
 811996a:	9b02      	ldr	r3, [sp, #8]
 811996c:	429d      	cmp	r5, r3
 811996e:	f43f af75 	beq.w	811985c <_dtoa_r+0x47c>
 8119972:	4b2f      	ldr	r3, [pc, #188]	; (8119a30 <_dtoa_r+0x650>)
 8119974:	ec51 0b18 	vmov	r0, r1, d8
 8119978:	2200      	movs	r2, #0
 811997a:	f7e6 fec5 	bl	8100708 <__aeabi_dmul>
 811997e:	4b2c      	ldr	r3, [pc, #176]	; (8119a30 <_dtoa_r+0x650>)
 8119980:	ec41 0b18 	vmov	d8, r0, r1
 8119984:	2200      	movs	r2, #0
 8119986:	4630      	mov	r0, r6
 8119988:	4639      	mov	r1, r7
 811998a:	f7e6 febd 	bl	8100708 <__aeabi_dmul>
 811998e:	4606      	mov	r6, r0
 8119990:	460f      	mov	r7, r1
 8119992:	e7c4      	b.n	811991e <_dtoa_r+0x53e>
 8119994:	ec51 0b17 	vmov	r0, r1, d7
 8119998:	f7e6 feb6 	bl	8100708 <__aeabi_dmul>
 811999c:	9b02      	ldr	r3, [sp, #8]
 811999e:	9d00      	ldr	r5, [sp, #0]
 81199a0:	930c      	str	r3, [sp, #48]	; 0x30
 81199a2:	ec41 0b18 	vmov	d8, r0, r1
 81199a6:	4639      	mov	r1, r7
 81199a8:	4630      	mov	r0, r6
 81199aa:	f7e7 f95d 	bl	8100c68 <__aeabi_d2iz>
 81199ae:	9011      	str	r0, [sp, #68]	; 0x44
 81199b0:	f7e6 fe40 	bl	8100634 <__aeabi_i2d>
 81199b4:	4602      	mov	r2, r0
 81199b6:	460b      	mov	r3, r1
 81199b8:	4630      	mov	r0, r6
 81199ba:	4639      	mov	r1, r7
 81199bc:	f7e6 fcec 	bl	8100398 <__aeabi_dsub>
 81199c0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 81199c2:	3330      	adds	r3, #48	; 0x30
 81199c4:	f805 3b01 	strb.w	r3, [r5], #1
 81199c8:	9b02      	ldr	r3, [sp, #8]
 81199ca:	429d      	cmp	r5, r3
 81199cc:	4606      	mov	r6, r0
 81199ce:	460f      	mov	r7, r1
 81199d0:	f04f 0200 	mov.w	r2, #0
 81199d4:	d134      	bne.n	8119a40 <_dtoa_r+0x660>
 81199d6:	4b19      	ldr	r3, [pc, #100]	; (8119a3c <_dtoa_r+0x65c>)
 81199d8:	ec51 0b18 	vmov	r0, r1, d8
 81199dc:	f7e6 fcde 	bl	810039c <__adddf3>
 81199e0:	4602      	mov	r2, r0
 81199e2:	460b      	mov	r3, r1
 81199e4:	4630      	mov	r0, r6
 81199e6:	4639      	mov	r1, r7
 81199e8:	f7e7 f91e 	bl	8100c28 <__aeabi_dcmpgt>
 81199ec:	2800      	cmp	r0, #0
 81199ee:	d175      	bne.n	8119adc <_dtoa_r+0x6fc>
 81199f0:	ec53 2b18 	vmov	r2, r3, d8
 81199f4:	4911      	ldr	r1, [pc, #68]	; (8119a3c <_dtoa_r+0x65c>)
 81199f6:	2000      	movs	r0, #0
 81199f8:	f7e6 fcce 	bl	8100398 <__aeabi_dsub>
 81199fc:	4602      	mov	r2, r0
 81199fe:	460b      	mov	r3, r1
 8119a00:	4630      	mov	r0, r6
 8119a02:	4639      	mov	r1, r7
 8119a04:	f7e7 f8f2 	bl	8100bec <__aeabi_dcmplt>
 8119a08:	2800      	cmp	r0, #0
 8119a0a:	f43f af27 	beq.w	811985c <_dtoa_r+0x47c>
 8119a0e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8119a10:	1e6b      	subs	r3, r5, #1
 8119a12:	930c      	str	r3, [sp, #48]	; 0x30
 8119a14:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8119a18:	2b30      	cmp	r3, #48	; 0x30
 8119a1a:	d0f8      	beq.n	8119a0e <_dtoa_r+0x62e>
 8119a1c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8119a20:	e04a      	b.n	8119ab8 <_dtoa_r+0x6d8>
 8119a22:	bf00      	nop
 8119a24:	0811b650 	.word	0x0811b650
 8119a28:	0811b628 	.word	0x0811b628
 8119a2c:	3ff00000 	.word	0x3ff00000
 8119a30:	40240000 	.word	0x40240000
 8119a34:	401c0000 	.word	0x401c0000
 8119a38:	40140000 	.word	0x40140000
 8119a3c:	3fe00000 	.word	0x3fe00000
 8119a40:	4baf      	ldr	r3, [pc, #700]	; (8119d00 <_dtoa_r+0x920>)
 8119a42:	f7e6 fe61 	bl	8100708 <__aeabi_dmul>
 8119a46:	4606      	mov	r6, r0
 8119a48:	460f      	mov	r7, r1
 8119a4a:	e7ac      	b.n	81199a6 <_dtoa_r+0x5c6>
 8119a4c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8119a50:	9d00      	ldr	r5, [sp, #0]
 8119a52:	4642      	mov	r2, r8
 8119a54:	464b      	mov	r3, r9
 8119a56:	4630      	mov	r0, r6
 8119a58:	4639      	mov	r1, r7
 8119a5a:	f7e6 ff7f 	bl	810095c <__aeabi_ddiv>
 8119a5e:	f7e7 f903 	bl	8100c68 <__aeabi_d2iz>
 8119a62:	9002      	str	r0, [sp, #8]
 8119a64:	f7e6 fde6 	bl	8100634 <__aeabi_i2d>
 8119a68:	4642      	mov	r2, r8
 8119a6a:	464b      	mov	r3, r9
 8119a6c:	f7e6 fe4c 	bl	8100708 <__aeabi_dmul>
 8119a70:	4602      	mov	r2, r0
 8119a72:	460b      	mov	r3, r1
 8119a74:	4630      	mov	r0, r6
 8119a76:	4639      	mov	r1, r7
 8119a78:	f7e6 fc8e 	bl	8100398 <__aeabi_dsub>
 8119a7c:	9e02      	ldr	r6, [sp, #8]
 8119a7e:	9f01      	ldr	r7, [sp, #4]
 8119a80:	3630      	adds	r6, #48	; 0x30
 8119a82:	f805 6b01 	strb.w	r6, [r5], #1
 8119a86:	9e00      	ldr	r6, [sp, #0]
 8119a88:	1bae      	subs	r6, r5, r6
 8119a8a:	42b7      	cmp	r7, r6
 8119a8c:	4602      	mov	r2, r0
 8119a8e:	460b      	mov	r3, r1
 8119a90:	d137      	bne.n	8119b02 <_dtoa_r+0x722>
 8119a92:	f7e6 fc83 	bl	810039c <__adddf3>
 8119a96:	4642      	mov	r2, r8
 8119a98:	464b      	mov	r3, r9
 8119a9a:	4606      	mov	r6, r0
 8119a9c:	460f      	mov	r7, r1
 8119a9e:	f7e7 f8c3 	bl	8100c28 <__aeabi_dcmpgt>
 8119aa2:	b9c8      	cbnz	r0, 8119ad8 <_dtoa_r+0x6f8>
 8119aa4:	4642      	mov	r2, r8
 8119aa6:	464b      	mov	r3, r9
 8119aa8:	4630      	mov	r0, r6
 8119aaa:	4639      	mov	r1, r7
 8119aac:	f7e7 f894 	bl	8100bd8 <__aeabi_dcmpeq>
 8119ab0:	b110      	cbz	r0, 8119ab8 <_dtoa_r+0x6d8>
 8119ab2:	9b02      	ldr	r3, [sp, #8]
 8119ab4:	07d9      	lsls	r1, r3, #31
 8119ab6:	d40f      	bmi.n	8119ad8 <_dtoa_r+0x6f8>
 8119ab8:	4620      	mov	r0, r4
 8119aba:	4659      	mov	r1, fp
 8119abc:	f000 fac8 	bl	811a050 <_Bfree>
 8119ac0:	2300      	movs	r3, #0
 8119ac2:	702b      	strb	r3, [r5, #0]
 8119ac4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8119ac6:	f10a 0001 	add.w	r0, sl, #1
 8119aca:	6018      	str	r0, [r3, #0]
 8119acc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8119ace:	2b00      	cmp	r3, #0
 8119ad0:	f43f acd8 	beq.w	8119484 <_dtoa_r+0xa4>
 8119ad4:	601d      	str	r5, [r3, #0]
 8119ad6:	e4d5      	b.n	8119484 <_dtoa_r+0xa4>
 8119ad8:	f8cd a01c 	str.w	sl, [sp, #28]
 8119adc:	462b      	mov	r3, r5
 8119ade:	461d      	mov	r5, r3
 8119ae0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8119ae4:	2a39      	cmp	r2, #57	; 0x39
 8119ae6:	d108      	bne.n	8119afa <_dtoa_r+0x71a>
 8119ae8:	9a00      	ldr	r2, [sp, #0]
 8119aea:	429a      	cmp	r2, r3
 8119aec:	d1f7      	bne.n	8119ade <_dtoa_r+0x6fe>
 8119aee:	9a07      	ldr	r2, [sp, #28]
 8119af0:	9900      	ldr	r1, [sp, #0]
 8119af2:	3201      	adds	r2, #1
 8119af4:	9207      	str	r2, [sp, #28]
 8119af6:	2230      	movs	r2, #48	; 0x30
 8119af8:	700a      	strb	r2, [r1, #0]
 8119afa:	781a      	ldrb	r2, [r3, #0]
 8119afc:	3201      	adds	r2, #1
 8119afe:	701a      	strb	r2, [r3, #0]
 8119b00:	e78c      	b.n	8119a1c <_dtoa_r+0x63c>
 8119b02:	4b7f      	ldr	r3, [pc, #508]	; (8119d00 <_dtoa_r+0x920>)
 8119b04:	2200      	movs	r2, #0
 8119b06:	f7e6 fdff 	bl	8100708 <__aeabi_dmul>
 8119b0a:	2200      	movs	r2, #0
 8119b0c:	2300      	movs	r3, #0
 8119b0e:	4606      	mov	r6, r0
 8119b10:	460f      	mov	r7, r1
 8119b12:	f7e7 f861 	bl	8100bd8 <__aeabi_dcmpeq>
 8119b16:	2800      	cmp	r0, #0
 8119b18:	d09b      	beq.n	8119a52 <_dtoa_r+0x672>
 8119b1a:	e7cd      	b.n	8119ab8 <_dtoa_r+0x6d8>
 8119b1c:	9a08      	ldr	r2, [sp, #32]
 8119b1e:	2a00      	cmp	r2, #0
 8119b20:	f000 80c4 	beq.w	8119cac <_dtoa_r+0x8cc>
 8119b24:	9a05      	ldr	r2, [sp, #20]
 8119b26:	2a01      	cmp	r2, #1
 8119b28:	f300 80a8 	bgt.w	8119c7c <_dtoa_r+0x89c>
 8119b2c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8119b2e:	2a00      	cmp	r2, #0
 8119b30:	f000 80a0 	beq.w	8119c74 <_dtoa_r+0x894>
 8119b34:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8119b38:	9e06      	ldr	r6, [sp, #24]
 8119b3a:	4645      	mov	r5, r8
 8119b3c:	9a04      	ldr	r2, [sp, #16]
 8119b3e:	2101      	movs	r1, #1
 8119b40:	441a      	add	r2, r3
 8119b42:	4620      	mov	r0, r4
 8119b44:	4498      	add	r8, r3
 8119b46:	9204      	str	r2, [sp, #16]
 8119b48:	f000 fb3e 	bl	811a1c8 <__i2b>
 8119b4c:	4607      	mov	r7, r0
 8119b4e:	2d00      	cmp	r5, #0
 8119b50:	dd0b      	ble.n	8119b6a <_dtoa_r+0x78a>
 8119b52:	9b04      	ldr	r3, [sp, #16]
 8119b54:	2b00      	cmp	r3, #0
 8119b56:	dd08      	ble.n	8119b6a <_dtoa_r+0x78a>
 8119b58:	42ab      	cmp	r3, r5
 8119b5a:	9a04      	ldr	r2, [sp, #16]
 8119b5c:	bfa8      	it	ge
 8119b5e:	462b      	movge	r3, r5
 8119b60:	eba8 0803 	sub.w	r8, r8, r3
 8119b64:	1aed      	subs	r5, r5, r3
 8119b66:	1ad3      	subs	r3, r2, r3
 8119b68:	9304      	str	r3, [sp, #16]
 8119b6a:	9b06      	ldr	r3, [sp, #24]
 8119b6c:	b1fb      	cbz	r3, 8119bae <_dtoa_r+0x7ce>
 8119b6e:	9b08      	ldr	r3, [sp, #32]
 8119b70:	2b00      	cmp	r3, #0
 8119b72:	f000 809f 	beq.w	8119cb4 <_dtoa_r+0x8d4>
 8119b76:	2e00      	cmp	r6, #0
 8119b78:	dd11      	ble.n	8119b9e <_dtoa_r+0x7be>
 8119b7a:	4639      	mov	r1, r7
 8119b7c:	4632      	mov	r2, r6
 8119b7e:	4620      	mov	r0, r4
 8119b80:	f000 fbde 	bl	811a340 <__pow5mult>
 8119b84:	465a      	mov	r2, fp
 8119b86:	4601      	mov	r1, r0
 8119b88:	4607      	mov	r7, r0
 8119b8a:	4620      	mov	r0, r4
 8119b8c:	f000 fb32 	bl	811a1f4 <__multiply>
 8119b90:	4659      	mov	r1, fp
 8119b92:	9007      	str	r0, [sp, #28]
 8119b94:	4620      	mov	r0, r4
 8119b96:	f000 fa5b 	bl	811a050 <_Bfree>
 8119b9a:	9b07      	ldr	r3, [sp, #28]
 8119b9c:	469b      	mov	fp, r3
 8119b9e:	9b06      	ldr	r3, [sp, #24]
 8119ba0:	1b9a      	subs	r2, r3, r6
 8119ba2:	d004      	beq.n	8119bae <_dtoa_r+0x7ce>
 8119ba4:	4659      	mov	r1, fp
 8119ba6:	4620      	mov	r0, r4
 8119ba8:	f000 fbca 	bl	811a340 <__pow5mult>
 8119bac:	4683      	mov	fp, r0
 8119bae:	2101      	movs	r1, #1
 8119bb0:	4620      	mov	r0, r4
 8119bb2:	f000 fb09 	bl	811a1c8 <__i2b>
 8119bb6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8119bb8:	2b00      	cmp	r3, #0
 8119bba:	4606      	mov	r6, r0
 8119bbc:	dd7c      	ble.n	8119cb8 <_dtoa_r+0x8d8>
 8119bbe:	461a      	mov	r2, r3
 8119bc0:	4601      	mov	r1, r0
 8119bc2:	4620      	mov	r0, r4
 8119bc4:	f000 fbbc 	bl	811a340 <__pow5mult>
 8119bc8:	9b05      	ldr	r3, [sp, #20]
 8119bca:	2b01      	cmp	r3, #1
 8119bcc:	4606      	mov	r6, r0
 8119bce:	dd76      	ble.n	8119cbe <_dtoa_r+0x8de>
 8119bd0:	2300      	movs	r3, #0
 8119bd2:	9306      	str	r3, [sp, #24]
 8119bd4:	6933      	ldr	r3, [r6, #16]
 8119bd6:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8119bda:	6918      	ldr	r0, [r3, #16]
 8119bdc:	f000 faa4 	bl	811a128 <__hi0bits>
 8119be0:	f1c0 0020 	rsb	r0, r0, #32
 8119be4:	9b04      	ldr	r3, [sp, #16]
 8119be6:	4418      	add	r0, r3
 8119be8:	f010 001f 	ands.w	r0, r0, #31
 8119bec:	f000 8086 	beq.w	8119cfc <_dtoa_r+0x91c>
 8119bf0:	f1c0 0320 	rsb	r3, r0, #32
 8119bf4:	2b04      	cmp	r3, #4
 8119bf6:	dd7f      	ble.n	8119cf8 <_dtoa_r+0x918>
 8119bf8:	f1c0 001c 	rsb	r0, r0, #28
 8119bfc:	9b04      	ldr	r3, [sp, #16]
 8119bfe:	4403      	add	r3, r0
 8119c00:	4480      	add	r8, r0
 8119c02:	4405      	add	r5, r0
 8119c04:	9304      	str	r3, [sp, #16]
 8119c06:	f1b8 0f00 	cmp.w	r8, #0
 8119c0a:	dd05      	ble.n	8119c18 <_dtoa_r+0x838>
 8119c0c:	4659      	mov	r1, fp
 8119c0e:	4642      	mov	r2, r8
 8119c10:	4620      	mov	r0, r4
 8119c12:	f000 fbef 	bl	811a3f4 <__lshift>
 8119c16:	4683      	mov	fp, r0
 8119c18:	9b04      	ldr	r3, [sp, #16]
 8119c1a:	2b00      	cmp	r3, #0
 8119c1c:	dd05      	ble.n	8119c2a <_dtoa_r+0x84a>
 8119c1e:	4631      	mov	r1, r6
 8119c20:	461a      	mov	r2, r3
 8119c22:	4620      	mov	r0, r4
 8119c24:	f000 fbe6 	bl	811a3f4 <__lshift>
 8119c28:	4606      	mov	r6, r0
 8119c2a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8119c2c:	2b00      	cmp	r3, #0
 8119c2e:	d069      	beq.n	8119d04 <_dtoa_r+0x924>
 8119c30:	4631      	mov	r1, r6
 8119c32:	4658      	mov	r0, fp
 8119c34:	f000 fc4a 	bl	811a4cc <__mcmp>
 8119c38:	2800      	cmp	r0, #0
 8119c3a:	da63      	bge.n	8119d04 <_dtoa_r+0x924>
 8119c3c:	2300      	movs	r3, #0
 8119c3e:	4659      	mov	r1, fp
 8119c40:	220a      	movs	r2, #10
 8119c42:	4620      	mov	r0, r4
 8119c44:	f000 fa26 	bl	811a094 <__multadd>
 8119c48:	9b08      	ldr	r3, [sp, #32]
 8119c4a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8119c4e:	4683      	mov	fp, r0
 8119c50:	2b00      	cmp	r3, #0
 8119c52:	f000 818f 	beq.w	8119f74 <_dtoa_r+0xb94>
 8119c56:	4639      	mov	r1, r7
 8119c58:	2300      	movs	r3, #0
 8119c5a:	220a      	movs	r2, #10
 8119c5c:	4620      	mov	r0, r4
 8119c5e:	f000 fa19 	bl	811a094 <__multadd>
 8119c62:	f1b9 0f00 	cmp.w	r9, #0
 8119c66:	4607      	mov	r7, r0
 8119c68:	f300 808e 	bgt.w	8119d88 <_dtoa_r+0x9a8>
 8119c6c:	9b05      	ldr	r3, [sp, #20]
 8119c6e:	2b02      	cmp	r3, #2
 8119c70:	dc50      	bgt.n	8119d14 <_dtoa_r+0x934>
 8119c72:	e089      	b.n	8119d88 <_dtoa_r+0x9a8>
 8119c74:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8119c76:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8119c7a:	e75d      	b.n	8119b38 <_dtoa_r+0x758>
 8119c7c:	9b01      	ldr	r3, [sp, #4]
 8119c7e:	1e5e      	subs	r6, r3, #1
 8119c80:	9b06      	ldr	r3, [sp, #24]
 8119c82:	42b3      	cmp	r3, r6
 8119c84:	bfbf      	itttt	lt
 8119c86:	9b06      	ldrlt	r3, [sp, #24]
 8119c88:	9606      	strlt	r6, [sp, #24]
 8119c8a:	1af2      	sublt	r2, r6, r3
 8119c8c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8119c8e:	bfb6      	itet	lt
 8119c90:	189b      	addlt	r3, r3, r2
 8119c92:	1b9e      	subge	r6, r3, r6
 8119c94:	930d      	strlt	r3, [sp, #52]	; 0x34
 8119c96:	9b01      	ldr	r3, [sp, #4]
 8119c98:	bfb8      	it	lt
 8119c9a:	2600      	movlt	r6, #0
 8119c9c:	2b00      	cmp	r3, #0
 8119c9e:	bfb5      	itete	lt
 8119ca0:	eba8 0503 	sublt.w	r5, r8, r3
 8119ca4:	9b01      	ldrge	r3, [sp, #4]
 8119ca6:	2300      	movlt	r3, #0
 8119ca8:	4645      	movge	r5, r8
 8119caa:	e747      	b.n	8119b3c <_dtoa_r+0x75c>
 8119cac:	9e06      	ldr	r6, [sp, #24]
 8119cae:	9f08      	ldr	r7, [sp, #32]
 8119cb0:	4645      	mov	r5, r8
 8119cb2:	e74c      	b.n	8119b4e <_dtoa_r+0x76e>
 8119cb4:	9a06      	ldr	r2, [sp, #24]
 8119cb6:	e775      	b.n	8119ba4 <_dtoa_r+0x7c4>
 8119cb8:	9b05      	ldr	r3, [sp, #20]
 8119cba:	2b01      	cmp	r3, #1
 8119cbc:	dc18      	bgt.n	8119cf0 <_dtoa_r+0x910>
 8119cbe:	9b02      	ldr	r3, [sp, #8]
 8119cc0:	b9b3      	cbnz	r3, 8119cf0 <_dtoa_r+0x910>
 8119cc2:	9b03      	ldr	r3, [sp, #12]
 8119cc4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8119cc8:	b9a3      	cbnz	r3, 8119cf4 <_dtoa_r+0x914>
 8119cca:	9b03      	ldr	r3, [sp, #12]
 8119ccc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8119cd0:	0d1b      	lsrs	r3, r3, #20
 8119cd2:	051b      	lsls	r3, r3, #20
 8119cd4:	b12b      	cbz	r3, 8119ce2 <_dtoa_r+0x902>
 8119cd6:	9b04      	ldr	r3, [sp, #16]
 8119cd8:	3301      	adds	r3, #1
 8119cda:	9304      	str	r3, [sp, #16]
 8119cdc:	f108 0801 	add.w	r8, r8, #1
 8119ce0:	2301      	movs	r3, #1
 8119ce2:	9306      	str	r3, [sp, #24]
 8119ce4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8119ce6:	2b00      	cmp	r3, #0
 8119ce8:	f47f af74 	bne.w	8119bd4 <_dtoa_r+0x7f4>
 8119cec:	2001      	movs	r0, #1
 8119cee:	e779      	b.n	8119be4 <_dtoa_r+0x804>
 8119cf0:	2300      	movs	r3, #0
 8119cf2:	e7f6      	b.n	8119ce2 <_dtoa_r+0x902>
 8119cf4:	9b02      	ldr	r3, [sp, #8]
 8119cf6:	e7f4      	b.n	8119ce2 <_dtoa_r+0x902>
 8119cf8:	d085      	beq.n	8119c06 <_dtoa_r+0x826>
 8119cfa:	4618      	mov	r0, r3
 8119cfc:	301c      	adds	r0, #28
 8119cfe:	e77d      	b.n	8119bfc <_dtoa_r+0x81c>
 8119d00:	40240000 	.word	0x40240000
 8119d04:	9b01      	ldr	r3, [sp, #4]
 8119d06:	2b00      	cmp	r3, #0
 8119d08:	dc38      	bgt.n	8119d7c <_dtoa_r+0x99c>
 8119d0a:	9b05      	ldr	r3, [sp, #20]
 8119d0c:	2b02      	cmp	r3, #2
 8119d0e:	dd35      	ble.n	8119d7c <_dtoa_r+0x99c>
 8119d10:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8119d14:	f1b9 0f00 	cmp.w	r9, #0
 8119d18:	d10d      	bne.n	8119d36 <_dtoa_r+0x956>
 8119d1a:	4631      	mov	r1, r6
 8119d1c:	464b      	mov	r3, r9
 8119d1e:	2205      	movs	r2, #5
 8119d20:	4620      	mov	r0, r4
 8119d22:	f000 f9b7 	bl	811a094 <__multadd>
 8119d26:	4601      	mov	r1, r0
 8119d28:	4606      	mov	r6, r0
 8119d2a:	4658      	mov	r0, fp
 8119d2c:	f000 fbce 	bl	811a4cc <__mcmp>
 8119d30:	2800      	cmp	r0, #0
 8119d32:	f73f adbd 	bgt.w	81198b0 <_dtoa_r+0x4d0>
 8119d36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8119d38:	9d00      	ldr	r5, [sp, #0]
 8119d3a:	ea6f 0a03 	mvn.w	sl, r3
 8119d3e:	f04f 0800 	mov.w	r8, #0
 8119d42:	4631      	mov	r1, r6
 8119d44:	4620      	mov	r0, r4
 8119d46:	f000 f983 	bl	811a050 <_Bfree>
 8119d4a:	2f00      	cmp	r7, #0
 8119d4c:	f43f aeb4 	beq.w	8119ab8 <_dtoa_r+0x6d8>
 8119d50:	f1b8 0f00 	cmp.w	r8, #0
 8119d54:	d005      	beq.n	8119d62 <_dtoa_r+0x982>
 8119d56:	45b8      	cmp	r8, r7
 8119d58:	d003      	beq.n	8119d62 <_dtoa_r+0x982>
 8119d5a:	4641      	mov	r1, r8
 8119d5c:	4620      	mov	r0, r4
 8119d5e:	f000 f977 	bl	811a050 <_Bfree>
 8119d62:	4639      	mov	r1, r7
 8119d64:	4620      	mov	r0, r4
 8119d66:	f000 f973 	bl	811a050 <_Bfree>
 8119d6a:	e6a5      	b.n	8119ab8 <_dtoa_r+0x6d8>
 8119d6c:	2600      	movs	r6, #0
 8119d6e:	4637      	mov	r7, r6
 8119d70:	e7e1      	b.n	8119d36 <_dtoa_r+0x956>
 8119d72:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8119d74:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8119d78:	4637      	mov	r7, r6
 8119d7a:	e599      	b.n	81198b0 <_dtoa_r+0x4d0>
 8119d7c:	9b08      	ldr	r3, [sp, #32]
 8119d7e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8119d82:	2b00      	cmp	r3, #0
 8119d84:	f000 80fd 	beq.w	8119f82 <_dtoa_r+0xba2>
 8119d88:	2d00      	cmp	r5, #0
 8119d8a:	dd05      	ble.n	8119d98 <_dtoa_r+0x9b8>
 8119d8c:	4639      	mov	r1, r7
 8119d8e:	462a      	mov	r2, r5
 8119d90:	4620      	mov	r0, r4
 8119d92:	f000 fb2f 	bl	811a3f4 <__lshift>
 8119d96:	4607      	mov	r7, r0
 8119d98:	9b06      	ldr	r3, [sp, #24]
 8119d9a:	2b00      	cmp	r3, #0
 8119d9c:	d05c      	beq.n	8119e58 <_dtoa_r+0xa78>
 8119d9e:	6879      	ldr	r1, [r7, #4]
 8119da0:	4620      	mov	r0, r4
 8119da2:	f000 f915 	bl	8119fd0 <_Balloc>
 8119da6:	4605      	mov	r5, r0
 8119da8:	b928      	cbnz	r0, 8119db6 <_dtoa_r+0x9d6>
 8119daa:	4b80      	ldr	r3, [pc, #512]	; (8119fac <_dtoa_r+0xbcc>)
 8119dac:	4602      	mov	r2, r0
 8119dae:	f240 21ea 	movw	r1, #746	; 0x2ea
 8119db2:	f7ff bb2e 	b.w	8119412 <_dtoa_r+0x32>
 8119db6:	693a      	ldr	r2, [r7, #16]
 8119db8:	3202      	adds	r2, #2
 8119dba:	0092      	lsls	r2, r2, #2
 8119dbc:	f107 010c 	add.w	r1, r7, #12
 8119dc0:	300c      	adds	r0, #12
 8119dc2:	f7fe fe01 	bl	81189c8 <memcpy>
 8119dc6:	2201      	movs	r2, #1
 8119dc8:	4629      	mov	r1, r5
 8119dca:	4620      	mov	r0, r4
 8119dcc:	f000 fb12 	bl	811a3f4 <__lshift>
 8119dd0:	9b00      	ldr	r3, [sp, #0]
 8119dd2:	3301      	adds	r3, #1
 8119dd4:	9301      	str	r3, [sp, #4]
 8119dd6:	9b00      	ldr	r3, [sp, #0]
 8119dd8:	444b      	add	r3, r9
 8119dda:	9307      	str	r3, [sp, #28]
 8119ddc:	9b02      	ldr	r3, [sp, #8]
 8119dde:	f003 0301 	and.w	r3, r3, #1
 8119de2:	46b8      	mov	r8, r7
 8119de4:	9306      	str	r3, [sp, #24]
 8119de6:	4607      	mov	r7, r0
 8119de8:	9b01      	ldr	r3, [sp, #4]
 8119dea:	4631      	mov	r1, r6
 8119dec:	3b01      	subs	r3, #1
 8119dee:	4658      	mov	r0, fp
 8119df0:	9302      	str	r3, [sp, #8]
 8119df2:	f7ff fa69 	bl	81192c8 <quorem>
 8119df6:	4603      	mov	r3, r0
 8119df8:	3330      	adds	r3, #48	; 0x30
 8119dfa:	9004      	str	r0, [sp, #16]
 8119dfc:	4641      	mov	r1, r8
 8119dfe:	4658      	mov	r0, fp
 8119e00:	9308      	str	r3, [sp, #32]
 8119e02:	f000 fb63 	bl	811a4cc <__mcmp>
 8119e06:	463a      	mov	r2, r7
 8119e08:	4681      	mov	r9, r0
 8119e0a:	4631      	mov	r1, r6
 8119e0c:	4620      	mov	r0, r4
 8119e0e:	f000 fb79 	bl	811a504 <__mdiff>
 8119e12:	68c2      	ldr	r2, [r0, #12]
 8119e14:	9b08      	ldr	r3, [sp, #32]
 8119e16:	4605      	mov	r5, r0
 8119e18:	bb02      	cbnz	r2, 8119e5c <_dtoa_r+0xa7c>
 8119e1a:	4601      	mov	r1, r0
 8119e1c:	4658      	mov	r0, fp
 8119e1e:	f000 fb55 	bl	811a4cc <__mcmp>
 8119e22:	9b08      	ldr	r3, [sp, #32]
 8119e24:	4602      	mov	r2, r0
 8119e26:	4629      	mov	r1, r5
 8119e28:	4620      	mov	r0, r4
 8119e2a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8119e2e:	f000 f90f 	bl	811a050 <_Bfree>
 8119e32:	9b05      	ldr	r3, [sp, #20]
 8119e34:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8119e36:	9d01      	ldr	r5, [sp, #4]
 8119e38:	ea43 0102 	orr.w	r1, r3, r2
 8119e3c:	9b06      	ldr	r3, [sp, #24]
 8119e3e:	430b      	orrs	r3, r1
 8119e40:	9b08      	ldr	r3, [sp, #32]
 8119e42:	d10d      	bne.n	8119e60 <_dtoa_r+0xa80>
 8119e44:	2b39      	cmp	r3, #57	; 0x39
 8119e46:	d029      	beq.n	8119e9c <_dtoa_r+0xabc>
 8119e48:	f1b9 0f00 	cmp.w	r9, #0
 8119e4c:	dd01      	ble.n	8119e52 <_dtoa_r+0xa72>
 8119e4e:	9b04      	ldr	r3, [sp, #16]
 8119e50:	3331      	adds	r3, #49	; 0x31
 8119e52:	9a02      	ldr	r2, [sp, #8]
 8119e54:	7013      	strb	r3, [r2, #0]
 8119e56:	e774      	b.n	8119d42 <_dtoa_r+0x962>
 8119e58:	4638      	mov	r0, r7
 8119e5a:	e7b9      	b.n	8119dd0 <_dtoa_r+0x9f0>
 8119e5c:	2201      	movs	r2, #1
 8119e5e:	e7e2      	b.n	8119e26 <_dtoa_r+0xa46>
 8119e60:	f1b9 0f00 	cmp.w	r9, #0
 8119e64:	db06      	blt.n	8119e74 <_dtoa_r+0xa94>
 8119e66:	9905      	ldr	r1, [sp, #20]
 8119e68:	ea41 0909 	orr.w	r9, r1, r9
 8119e6c:	9906      	ldr	r1, [sp, #24]
 8119e6e:	ea59 0101 	orrs.w	r1, r9, r1
 8119e72:	d120      	bne.n	8119eb6 <_dtoa_r+0xad6>
 8119e74:	2a00      	cmp	r2, #0
 8119e76:	ddec      	ble.n	8119e52 <_dtoa_r+0xa72>
 8119e78:	4659      	mov	r1, fp
 8119e7a:	2201      	movs	r2, #1
 8119e7c:	4620      	mov	r0, r4
 8119e7e:	9301      	str	r3, [sp, #4]
 8119e80:	f000 fab8 	bl	811a3f4 <__lshift>
 8119e84:	4631      	mov	r1, r6
 8119e86:	4683      	mov	fp, r0
 8119e88:	f000 fb20 	bl	811a4cc <__mcmp>
 8119e8c:	2800      	cmp	r0, #0
 8119e8e:	9b01      	ldr	r3, [sp, #4]
 8119e90:	dc02      	bgt.n	8119e98 <_dtoa_r+0xab8>
 8119e92:	d1de      	bne.n	8119e52 <_dtoa_r+0xa72>
 8119e94:	07da      	lsls	r2, r3, #31
 8119e96:	d5dc      	bpl.n	8119e52 <_dtoa_r+0xa72>
 8119e98:	2b39      	cmp	r3, #57	; 0x39
 8119e9a:	d1d8      	bne.n	8119e4e <_dtoa_r+0xa6e>
 8119e9c:	9a02      	ldr	r2, [sp, #8]
 8119e9e:	2339      	movs	r3, #57	; 0x39
 8119ea0:	7013      	strb	r3, [r2, #0]
 8119ea2:	462b      	mov	r3, r5
 8119ea4:	461d      	mov	r5, r3
 8119ea6:	3b01      	subs	r3, #1
 8119ea8:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8119eac:	2a39      	cmp	r2, #57	; 0x39
 8119eae:	d050      	beq.n	8119f52 <_dtoa_r+0xb72>
 8119eb0:	3201      	adds	r2, #1
 8119eb2:	701a      	strb	r2, [r3, #0]
 8119eb4:	e745      	b.n	8119d42 <_dtoa_r+0x962>
 8119eb6:	2a00      	cmp	r2, #0
 8119eb8:	dd03      	ble.n	8119ec2 <_dtoa_r+0xae2>
 8119eba:	2b39      	cmp	r3, #57	; 0x39
 8119ebc:	d0ee      	beq.n	8119e9c <_dtoa_r+0xabc>
 8119ebe:	3301      	adds	r3, #1
 8119ec0:	e7c7      	b.n	8119e52 <_dtoa_r+0xa72>
 8119ec2:	9a01      	ldr	r2, [sp, #4]
 8119ec4:	9907      	ldr	r1, [sp, #28]
 8119ec6:	f802 3c01 	strb.w	r3, [r2, #-1]
 8119eca:	428a      	cmp	r2, r1
 8119ecc:	d02a      	beq.n	8119f24 <_dtoa_r+0xb44>
 8119ece:	4659      	mov	r1, fp
 8119ed0:	2300      	movs	r3, #0
 8119ed2:	220a      	movs	r2, #10
 8119ed4:	4620      	mov	r0, r4
 8119ed6:	f000 f8dd 	bl	811a094 <__multadd>
 8119eda:	45b8      	cmp	r8, r7
 8119edc:	4683      	mov	fp, r0
 8119ede:	f04f 0300 	mov.w	r3, #0
 8119ee2:	f04f 020a 	mov.w	r2, #10
 8119ee6:	4641      	mov	r1, r8
 8119ee8:	4620      	mov	r0, r4
 8119eea:	d107      	bne.n	8119efc <_dtoa_r+0xb1c>
 8119eec:	f000 f8d2 	bl	811a094 <__multadd>
 8119ef0:	4680      	mov	r8, r0
 8119ef2:	4607      	mov	r7, r0
 8119ef4:	9b01      	ldr	r3, [sp, #4]
 8119ef6:	3301      	adds	r3, #1
 8119ef8:	9301      	str	r3, [sp, #4]
 8119efa:	e775      	b.n	8119de8 <_dtoa_r+0xa08>
 8119efc:	f000 f8ca 	bl	811a094 <__multadd>
 8119f00:	4639      	mov	r1, r7
 8119f02:	4680      	mov	r8, r0
 8119f04:	2300      	movs	r3, #0
 8119f06:	220a      	movs	r2, #10
 8119f08:	4620      	mov	r0, r4
 8119f0a:	f000 f8c3 	bl	811a094 <__multadd>
 8119f0e:	4607      	mov	r7, r0
 8119f10:	e7f0      	b.n	8119ef4 <_dtoa_r+0xb14>
 8119f12:	f1b9 0f00 	cmp.w	r9, #0
 8119f16:	9a00      	ldr	r2, [sp, #0]
 8119f18:	bfcc      	ite	gt
 8119f1a:	464d      	movgt	r5, r9
 8119f1c:	2501      	movle	r5, #1
 8119f1e:	4415      	add	r5, r2
 8119f20:	f04f 0800 	mov.w	r8, #0
 8119f24:	4659      	mov	r1, fp
 8119f26:	2201      	movs	r2, #1
 8119f28:	4620      	mov	r0, r4
 8119f2a:	9301      	str	r3, [sp, #4]
 8119f2c:	f000 fa62 	bl	811a3f4 <__lshift>
 8119f30:	4631      	mov	r1, r6
 8119f32:	4683      	mov	fp, r0
 8119f34:	f000 faca 	bl	811a4cc <__mcmp>
 8119f38:	2800      	cmp	r0, #0
 8119f3a:	dcb2      	bgt.n	8119ea2 <_dtoa_r+0xac2>
 8119f3c:	d102      	bne.n	8119f44 <_dtoa_r+0xb64>
 8119f3e:	9b01      	ldr	r3, [sp, #4]
 8119f40:	07db      	lsls	r3, r3, #31
 8119f42:	d4ae      	bmi.n	8119ea2 <_dtoa_r+0xac2>
 8119f44:	462b      	mov	r3, r5
 8119f46:	461d      	mov	r5, r3
 8119f48:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8119f4c:	2a30      	cmp	r2, #48	; 0x30
 8119f4e:	d0fa      	beq.n	8119f46 <_dtoa_r+0xb66>
 8119f50:	e6f7      	b.n	8119d42 <_dtoa_r+0x962>
 8119f52:	9a00      	ldr	r2, [sp, #0]
 8119f54:	429a      	cmp	r2, r3
 8119f56:	d1a5      	bne.n	8119ea4 <_dtoa_r+0xac4>
 8119f58:	f10a 0a01 	add.w	sl, sl, #1
 8119f5c:	2331      	movs	r3, #49	; 0x31
 8119f5e:	e779      	b.n	8119e54 <_dtoa_r+0xa74>
 8119f60:	4b13      	ldr	r3, [pc, #76]	; (8119fb0 <_dtoa_r+0xbd0>)
 8119f62:	f7ff baaf 	b.w	81194c4 <_dtoa_r+0xe4>
 8119f66:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8119f68:	2b00      	cmp	r3, #0
 8119f6a:	f47f aa86 	bne.w	811947a <_dtoa_r+0x9a>
 8119f6e:	4b11      	ldr	r3, [pc, #68]	; (8119fb4 <_dtoa_r+0xbd4>)
 8119f70:	f7ff baa8 	b.w	81194c4 <_dtoa_r+0xe4>
 8119f74:	f1b9 0f00 	cmp.w	r9, #0
 8119f78:	dc03      	bgt.n	8119f82 <_dtoa_r+0xba2>
 8119f7a:	9b05      	ldr	r3, [sp, #20]
 8119f7c:	2b02      	cmp	r3, #2
 8119f7e:	f73f aec9 	bgt.w	8119d14 <_dtoa_r+0x934>
 8119f82:	9d00      	ldr	r5, [sp, #0]
 8119f84:	4631      	mov	r1, r6
 8119f86:	4658      	mov	r0, fp
 8119f88:	f7ff f99e 	bl	81192c8 <quorem>
 8119f8c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8119f90:	f805 3b01 	strb.w	r3, [r5], #1
 8119f94:	9a00      	ldr	r2, [sp, #0]
 8119f96:	1aaa      	subs	r2, r5, r2
 8119f98:	4591      	cmp	r9, r2
 8119f9a:	ddba      	ble.n	8119f12 <_dtoa_r+0xb32>
 8119f9c:	4659      	mov	r1, fp
 8119f9e:	2300      	movs	r3, #0
 8119fa0:	220a      	movs	r2, #10
 8119fa2:	4620      	mov	r0, r4
 8119fa4:	f000 f876 	bl	811a094 <__multadd>
 8119fa8:	4683      	mov	fp, r0
 8119faa:	e7eb      	b.n	8119f84 <_dtoa_r+0xba4>
 8119fac:	0811b5b3 	.word	0x0811b5b3
 8119fb0:	0811b50c 	.word	0x0811b50c
 8119fb4:	0811b530 	.word	0x0811b530

08119fb8 <_localeconv_r>:
 8119fb8:	4800      	ldr	r0, [pc, #0]	; (8119fbc <_localeconv_r+0x4>)
 8119fba:	4770      	bx	lr
 8119fbc:	100002dc 	.word	0x100002dc

08119fc0 <malloc>:
 8119fc0:	4b02      	ldr	r3, [pc, #8]	; (8119fcc <malloc+0xc>)
 8119fc2:	4601      	mov	r1, r0
 8119fc4:	6818      	ldr	r0, [r3, #0]
 8119fc6:	f000 bbe1 	b.w	811a78c <_malloc_r>
 8119fca:	bf00      	nop
 8119fcc:	10000188 	.word	0x10000188

08119fd0 <_Balloc>:
 8119fd0:	b570      	push	{r4, r5, r6, lr}
 8119fd2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8119fd4:	4604      	mov	r4, r0
 8119fd6:	460d      	mov	r5, r1
 8119fd8:	b976      	cbnz	r6, 8119ff8 <_Balloc+0x28>
 8119fda:	2010      	movs	r0, #16
 8119fdc:	f7ff fff0 	bl	8119fc0 <malloc>
 8119fe0:	4602      	mov	r2, r0
 8119fe2:	6260      	str	r0, [r4, #36]	; 0x24
 8119fe4:	b920      	cbnz	r0, 8119ff0 <_Balloc+0x20>
 8119fe6:	4b18      	ldr	r3, [pc, #96]	; (811a048 <_Balloc+0x78>)
 8119fe8:	4818      	ldr	r0, [pc, #96]	; (811a04c <_Balloc+0x7c>)
 8119fea:	2166      	movs	r1, #102	; 0x66
 8119fec:	f000 fc38 	bl	811a860 <__assert_func>
 8119ff0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8119ff4:	6006      	str	r6, [r0, #0]
 8119ff6:	60c6      	str	r6, [r0, #12]
 8119ff8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8119ffa:	68f3      	ldr	r3, [r6, #12]
 8119ffc:	b183      	cbz	r3, 811a020 <_Balloc+0x50>
 8119ffe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 811a000:	68db      	ldr	r3, [r3, #12]
 811a002:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 811a006:	b9b8      	cbnz	r0, 811a038 <_Balloc+0x68>
 811a008:	2101      	movs	r1, #1
 811a00a:	fa01 f605 	lsl.w	r6, r1, r5
 811a00e:	1d72      	adds	r2, r6, #5
 811a010:	0092      	lsls	r2, r2, #2
 811a012:	4620      	mov	r0, r4
 811a014:	f000 fb5a 	bl	811a6cc <_calloc_r>
 811a018:	b160      	cbz	r0, 811a034 <_Balloc+0x64>
 811a01a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 811a01e:	e00e      	b.n	811a03e <_Balloc+0x6e>
 811a020:	2221      	movs	r2, #33	; 0x21
 811a022:	2104      	movs	r1, #4
 811a024:	4620      	mov	r0, r4
 811a026:	f000 fb51 	bl	811a6cc <_calloc_r>
 811a02a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 811a02c:	60f0      	str	r0, [r6, #12]
 811a02e:	68db      	ldr	r3, [r3, #12]
 811a030:	2b00      	cmp	r3, #0
 811a032:	d1e4      	bne.n	8119ffe <_Balloc+0x2e>
 811a034:	2000      	movs	r0, #0
 811a036:	bd70      	pop	{r4, r5, r6, pc}
 811a038:	6802      	ldr	r2, [r0, #0]
 811a03a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 811a03e:	2300      	movs	r3, #0
 811a040:	e9c0 3303 	strd	r3, r3, [r0, #12]
 811a044:	e7f7      	b.n	811a036 <_Balloc+0x66>
 811a046:	bf00      	nop
 811a048:	0811b53d 	.word	0x0811b53d
 811a04c:	0811b5c4 	.word	0x0811b5c4

0811a050 <_Bfree>:
 811a050:	b570      	push	{r4, r5, r6, lr}
 811a052:	6a46      	ldr	r6, [r0, #36]	; 0x24
 811a054:	4605      	mov	r5, r0
 811a056:	460c      	mov	r4, r1
 811a058:	b976      	cbnz	r6, 811a078 <_Bfree+0x28>
 811a05a:	2010      	movs	r0, #16
 811a05c:	f7ff ffb0 	bl	8119fc0 <malloc>
 811a060:	4602      	mov	r2, r0
 811a062:	6268      	str	r0, [r5, #36]	; 0x24
 811a064:	b920      	cbnz	r0, 811a070 <_Bfree+0x20>
 811a066:	4b09      	ldr	r3, [pc, #36]	; (811a08c <_Bfree+0x3c>)
 811a068:	4809      	ldr	r0, [pc, #36]	; (811a090 <_Bfree+0x40>)
 811a06a:	218a      	movs	r1, #138	; 0x8a
 811a06c:	f000 fbf8 	bl	811a860 <__assert_func>
 811a070:	e9c0 6601 	strd	r6, r6, [r0, #4]
 811a074:	6006      	str	r6, [r0, #0]
 811a076:	60c6      	str	r6, [r0, #12]
 811a078:	b13c      	cbz	r4, 811a08a <_Bfree+0x3a>
 811a07a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 811a07c:	6862      	ldr	r2, [r4, #4]
 811a07e:	68db      	ldr	r3, [r3, #12]
 811a080:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 811a084:	6021      	str	r1, [r4, #0]
 811a086:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 811a08a:	bd70      	pop	{r4, r5, r6, pc}
 811a08c:	0811b53d 	.word	0x0811b53d
 811a090:	0811b5c4 	.word	0x0811b5c4

0811a094 <__multadd>:
 811a094:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 811a098:	690e      	ldr	r6, [r1, #16]
 811a09a:	4607      	mov	r7, r0
 811a09c:	4698      	mov	r8, r3
 811a09e:	460c      	mov	r4, r1
 811a0a0:	f101 0014 	add.w	r0, r1, #20
 811a0a4:	2300      	movs	r3, #0
 811a0a6:	6805      	ldr	r5, [r0, #0]
 811a0a8:	b2a9      	uxth	r1, r5
 811a0aa:	fb02 8101 	mla	r1, r2, r1, r8
 811a0ae:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 811a0b2:	0c2d      	lsrs	r5, r5, #16
 811a0b4:	fb02 c505 	mla	r5, r2, r5, ip
 811a0b8:	b289      	uxth	r1, r1
 811a0ba:	3301      	adds	r3, #1
 811a0bc:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 811a0c0:	429e      	cmp	r6, r3
 811a0c2:	f840 1b04 	str.w	r1, [r0], #4
 811a0c6:	ea4f 4815 	mov.w	r8, r5, lsr #16
 811a0ca:	dcec      	bgt.n	811a0a6 <__multadd+0x12>
 811a0cc:	f1b8 0f00 	cmp.w	r8, #0
 811a0d0:	d022      	beq.n	811a118 <__multadd+0x84>
 811a0d2:	68a3      	ldr	r3, [r4, #8]
 811a0d4:	42b3      	cmp	r3, r6
 811a0d6:	dc19      	bgt.n	811a10c <__multadd+0x78>
 811a0d8:	6861      	ldr	r1, [r4, #4]
 811a0da:	4638      	mov	r0, r7
 811a0dc:	3101      	adds	r1, #1
 811a0de:	f7ff ff77 	bl	8119fd0 <_Balloc>
 811a0e2:	4605      	mov	r5, r0
 811a0e4:	b928      	cbnz	r0, 811a0f2 <__multadd+0x5e>
 811a0e6:	4602      	mov	r2, r0
 811a0e8:	4b0d      	ldr	r3, [pc, #52]	; (811a120 <__multadd+0x8c>)
 811a0ea:	480e      	ldr	r0, [pc, #56]	; (811a124 <__multadd+0x90>)
 811a0ec:	21b5      	movs	r1, #181	; 0xb5
 811a0ee:	f000 fbb7 	bl	811a860 <__assert_func>
 811a0f2:	6922      	ldr	r2, [r4, #16]
 811a0f4:	3202      	adds	r2, #2
 811a0f6:	f104 010c 	add.w	r1, r4, #12
 811a0fa:	0092      	lsls	r2, r2, #2
 811a0fc:	300c      	adds	r0, #12
 811a0fe:	f7fe fc63 	bl	81189c8 <memcpy>
 811a102:	4621      	mov	r1, r4
 811a104:	4638      	mov	r0, r7
 811a106:	f7ff ffa3 	bl	811a050 <_Bfree>
 811a10a:	462c      	mov	r4, r5
 811a10c:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 811a110:	3601      	adds	r6, #1
 811a112:	f8c3 8014 	str.w	r8, [r3, #20]
 811a116:	6126      	str	r6, [r4, #16]
 811a118:	4620      	mov	r0, r4
 811a11a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 811a11e:	bf00      	nop
 811a120:	0811b5b3 	.word	0x0811b5b3
 811a124:	0811b5c4 	.word	0x0811b5c4

0811a128 <__hi0bits>:
 811a128:	0c03      	lsrs	r3, r0, #16
 811a12a:	041b      	lsls	r3, r3, #16
 811a12c:	b9d3      	cbnz	r3, 811a164 <__hi0bits+0x3c>
 811a12e:	0400      	lsls	r0, r0, #16
 811a130:	2310      	movs	r3, #16
 811a132:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 811a136:	bf04      	itt	eq
 811a138:	0200      	lsleq	r0, r0, #8
 811a13a:	3308      	addeq	r3, #8
 811a13c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 811a140:	bf04      	itt	eq
 811a142:	0100      	lsleq	r0, r0, #4
 811a144:	3304      	addeq	r3, #4
 811a146:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 811a14a:	bf04      	itt	eq
 811a14c:	0080      	lsleq	r0, r0, #2
 811a14e:	3302      	addeq	r3, #2
 811a150:	2800      	cmp	r0, #0
 811a152:	db05      	blt.n	811a160 <__hi0bits+0x38>
 811a154:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 811a158:	f103 0301 	add.w	r3, r3, #1
 811a15c:	bf08      	it	eq
 811a15e:	2320      	moveq	r3, #32
 811a160:	4618      	mov	r0, r3
 811a162:	4770      	bx	lr
 811a164:	2300      	movs	r3, #0
 811a166:	e7e4      	b.n	811a132 <__hi0bits+0xa>

0811a168 <__lo0bits>:
 811a168:	6803      	ldr	r3, [r0, #0]
 811a16a:	f013 0207 	ands.w	r2, r3, #7
 811a16e:	4601      	mov	r1, r0
 811a170:	d00b      	beq.n	811a18a <__lo0bits+0x22>
 811a172:	07da      	lsls	r2, r3, #31
 811a174:	d424      	bmi.n	811a1c0 <__lo0bits+0x58>
 811a176:	0798      	lsls	r0, r3, #30
 811a178:	bf49      	itett	mi
 811a17a:	085b      	lsrmi	r3, r3, #1
 811a17c:	089b      	lsrpl	r3, r3, #2
 811a17e:	2001      	movmi	r0, #1
 811a180:	600b      	strmi	r3, [r1, #0]
 811a182:	bf5c      	itt	pl
 811a184:	600b      	strpl	r3, [r1, #0]
 811a186:	2002      	movpl	r0, #2
 811a188:	4770      	bx	lr
 811a18a:	b298      	uxth	r0, r3
 811a18c:	b9b0      	cbnz	r0, 811a1bc <__lo0bits+0x54>
 811a18e:	0c1b      	lsrs	r3, r3, #16
 811a190:	2010      	movs	r0, #16
 811a192:	f013 0fff 	tst.w	r3, #255	; 0xff
 811a196:	bf04      	itt	eq
 811a198:	0a1b      	lsreq	r3, r3, #8
 811a19a:	3008      	addeq	r0, #8
 811a19c:	071a      	lsls	r2, r3, #28
 811a19e:	bf04      	itt	eq
 811a1a0:	091b      	lsreq	r3, r3, #4
 811a1a2:	3004      	addeq	r0, #4
 811a1a4:	079a      	lsls	r2, r3, #30
 811a1a6:	bf04      	itt	eq
 811a1a8:	089b      	lsreq	r3, r3, #2
 811a1aa:	3002      	addeq	r0, #2
 811a1ac:	07da      	lsls	r2, r3, #31
 811a1ae:	d403      	bmi.n	811a1b8 <__lo0bits+0x50>
 811a1b0:	085b      	lsrs	r3, r3, #1
 811a1b2:	f100 0001 	add.w	r0, r0, #1
 811a1b6:	d005      	beq.n	811a1c4 <__lo0bits+0x5c>
 811a1b8:	600b      	str	r3, [r1, #0]
 811a1ba:	4770      	bx	lr
 811a1bc:	4610      	mov	r0, r2
 811a1be:	e7e8      	b.n	811a192 <__lo0bits+0x2a>
 811a1c0:	2000      	movs	r0, #0
 811a1c2:	4770      	bx	lr
 811a1c4:	2020      	movs	r0, #32
 811a1c6:	4770      	bx	lr

0811a1c8 <__i2b>:
 811a1c8:	b510      	push	{r4, lr}
 811a1ca:	460c      	mov	r4, r1
 811a1cc:	2101      	movs	r1, #1
 811a1ce:	f7ff feff 	bl	8119fd0 <_Balloc>
 811a1d2:	4602      	mov	r2, r0
 811a1d4:	b928      	cbnz	r0, 811a1e2 <__i2b+0x1a>
 811a1d6:	4b05      	ldr	r3, [pc, #20]	; (811a1ec <__i2b+0x24>)
 811a1d8:	4805      	ldr	r0, [pc, #20]	; (811a1f0 <__i2b+0x28>)
 811a1da:	f44f 71a0 	mov.w	r1, #320	; 0x140
 811a1de:	f000 fb3f 	bl	811a860 <__assert_func>
 811a1e2:	2301      	movs	r3, #1
 811a1e4:	6144      	str	r4, [r0, #20]
 811a1e6:	6103      	str	r3, [r0, #16]
 811a1e8:	bd10      	pop	{r4, pc}
 811a1ea:	bf00      	nop
 811a1ec:	0811b5b3 	.word	0x0811b5b3
 811a1f0:	0811b5c4 	.word	0x0811b5c4

0811a1f4 <__multiply>:
 811a1f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 811a1f8:	4614      	mov	r4, r2
 811a1fa:	690a      	ldr	r2, [r1, #16]
 811a1fc:	6923      	ldr	r3, [r4, #16]
 811a1fe:	429a      	cmp	r2, r3
 811a200:	bfb8      	it	lt
 811a202:	460b      	movlt	r3, r1
 811a204:	460d      	mov	r5, r1
 811a206:	bfbc      	itt	lt
 811a208:	4625      	movlt	r5, r4
 811a20a:	461c      	movlt	r4, r3
 811a20c:	f8d5 a010 	ldr.w	sl, [r5, #16]
 811a210:	f8d4 9010 	ldr.w	r9, [r4, #16]
 811a214:	68ab      	ldr	r3, [r5, #8]
 811a216:	6869      	ldr	r1, [r5, #4]
 811a218:	eb0a 0709 	add.w	r7, sl, r9
 811a21c:	42bb      	cmp	r3, r7
 811a21e:	b085      	sub	sp, #20
 811a220:	bfb8      	it	lt
 811a222:	3101      	addlt	r1, #1
 811a224:	f7ff fed4 	bl	8119fd0 <_Balloc>
 811a228:	b930      	cbnz	r0, 811a238 <__multiply+0x44>
 811a22a:	4602      	mov	r2, r0
 811a22c:	4b42      	ldr	r3, [pc, #264]	; (811a338 <__multiply+0x144>)
 811a22e:	4843      	ldr	r0, [pc, #268]	; (811a33c <__multiply+0x148>)
 811a230:	f240 115d 	movw	r1, #349	; 0x15d
 811a234:	f000 fb14 	bl	811a860 <__assert_func>
 811a238:	f100 0614 	add.w	r6, r0, #20
 811a23c:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 811a240:	4633      	mov	r3, r6
 811a242:	2200      	movs	r2, #0
 811a244:	4543      	cmp	r3, r8
 811a246:	d31e      	bcc.n	811a286 <__multiply+0x92>
 811a248:	f105 0c14 	add.w	ip, r5, #20
 811a24c:	f104 0314 	add.w	r3, r4, #20
 811a250:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 811a254:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 811a258:	9202      	str	r2, [sp, #8]
 811a25a:	ebac 0205 	sub.w	r2, ip, r5
 811a25e:	3a15      	subs	r2, #21
 811a260:	f022 0203 	bic.w	r2, r2, #3
 811a264:	3204      	adds	r2, #4
 811a266:	f105 0115 	add.w	r1, r5, #21
 811a26a:	458c      	cmp	ip, r1
 811a26c:	bf38      	it	cc
 811a26e:	2204      	movcc	r2, #4
 811a270:	9201      	str	r2, [sp, #4]
 811a272:	9a02      	ldr	r2, [sp, #8]
 811a274:	9303      	str	r3, [sp, #12]
 811a276:	429a      	cmp	r2, r3
 811a278:	d808      	bhi.n	811a28c <__multiply+0x98>
 811a27a:	2f00      	cmp	r7, #0
 811a27c:	dc55      	bgt.n	811a32a <__multiply+0x136>
 811a27e:	6107      	str	r7, [r0, #16]
 811a280:	b005      	add	sp, #20
 811a282:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 811a286:	f843 2b04 	str.w	r2, [r3], #4
 811a28a:	e7db      	b.n	811a244 <__multiply+0x50>
 811a28c:	f8b3 a000 	ldrh.w	sl, [r3]
 811a290:	f1ba 0f00 	cmp.w	sl, #0
 811a294:	d020      	beq.n	811a2d8 <__multiply+0xe4>
 811a296:	f105 0e14 	add.w	lr, r5, #20
 811a29a:	46b1      	mov	r9, r6
 811a29c:	2200      	movs	r2, #0
 811a29e:	f85e 4b04 	ldr.w	r4, [lr], #4
 811a2a2:	f8d9 b000 	ldr.w	fp, [r9]
 811a2a6:	b2a1      	uxth	r1, r4
 811a2a8:	fa1f fb8b 	uxth.w	fp, fp
 811a2ac:	fb0a b101 	mla	r1, sl, r1, fp
 811a2b0:	4411      	add	r1, r2
 811a2b2:	f8d9 2000 	ldr.w	r2, [r9]
 811a2b6:	0c24      	lsrs	r4, r4, #16
 811a2b8:	0c12      	lsrs	r2, r2, #16
 811a2ba:	fb0a 2404 	mla	r4, sl, r4, r2
 811a2be:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 811a2c2:	b289      	uxth	r1, r1
 811a2c4:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 811a2c8:	45f4      	cmp	ip, lr
 811a2ca:	f849 1b04 	str.w	r1, [r9], #4
 811a2ce:	ea4f 4214 	mov.w	r2, r4, lsr #16
 811a2d2:	d8e4      	bhi.n	811a29e <__multiply+0xaa>
 811a2d4:	9901      	ldr	r1, [sp, #4]
 811a2d6:	5072      	str	r2, [r6, r1]
 811a2d8:	9a03      	ldr	r2, [sp, #12]
 811a2da:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 811a2de:	3304      	adds	r3, #4
 811a2e0:	f1b9 0f00 	cmp.w	r9, #0
 811a2e4:	d01f      	beq.n	811a326 <__multiply+0x132>
 811a2e6:	6834      	ldr	r4, [r6, #0]
 811a2e8:	f105 0114 	add.w	r1, r5, #20
 811a2ec:	46b6      	mov	lr, r6
 811a2ee:	f04f 0a00 	mov.w	sl, #0
 811a2f2:	880a      	ldrh	r2, [r1, #0]
 811a2f4:	f8be b002 	ldrh.w	fp, [lr, #2]
 811a2f8:	fb09 b202 	mla	r2, r9, r2, fp
 811a2fc:	4492      	add	sl, r2
 811a2fe:	b2a4      	uxth	r4, r4
 811a300:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 811a304:	f84e 4b04 	str.w	r4, [lr], #4
 811a308:	f851 4b04 	ldr.w	r4, [r1], #4
 811a30c:	f8be 2000 	ldrh.w	r2, [lr]
 811a310:	0c24      	lsrs	r4, r4, #16
 811a312:	fb09 2404 	mla	r4, r9, r4, r2
 811a316:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 811a31a:	458c      	cmp	ip, r1
 811a31c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 811a320:	d8e7      	bhi.n	811a2f2 <__multiply+0xfe>
 811a322:	9a01      	ldr	r2, [sp, #4]
 811a324:	50b4      	str	r4, [r6, r2]
 811a326:	3604      	adds	r6, #4
 811a328:	e7a3      	b.n	811a272 <__multiply+0x7e>
 811a32a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 811a32e:	2b00      	cmp	r3, #0
 811a330:	d1a5      	bne.n	811a27e <__multiply+0x8a>
 811a332:	3f01      	subs	r7, #1
 811a334:	e7a1      	b.n	811a27a <__multiply+0x86>
 811a336:	bf00      	nop
 811a338:	0811b5b3 	.word	0x0811b5b3
 811a33c:	0811b5c4 	.word	0x0811b5c4

0811a340 <__pow5mult>:
 811a340:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 811a344:	4615      	mov	r5, r2
 811a346:	f012 0203 	ands.w	r2, r2, #3
 811a34a:	4606      	mov	r6, r0
 811a34c:	460f      	mov	r7, r1
 811a34e:	d007      	beq.n	811a360 <__pow5mult+0x20>
 811a350:	4c25      	ldr	r4, [pc, #148]	; (811a3e8 <__pow5mult+0xa8>)
 811a352:	3a01      	subs	r2, #1
 811a354:	2300      	movs	r3, #0
 811a356:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 811a35a:	f7ff fe9b 	bl	811a094 <__multadd>
 811a35e:	4607      	mov	r7, r0
 811a360:	10ad      	asrs	r5, r5, #2
 811a362:	d03d      	beq.n	811a3e0 <__pow5mult+0xa0>
 811a364:	6a74      	ldr	r4, [r6, #36]	; 0x24
 811a366:	b97c      	cbnz	r4, 811a388 <__pow5mult+0x48>
 811a368:	2010      	movs	r0, #16
 811a36a:	f7ff fe29 	bl	8119fc0 <malloc>
 811a36e:	4602      	mov	r2, r0
 811a370:	6270      	str	r0, [r6, #36]	; 0x24
 811a372:	b928      	cbnz	r0, 811a380 <__pow5mult+0x40>
 811a374:	4b1d      	ldr	r3, [pc, #116]	; (811a3ec <__pow5mult+0xac>)
 811a376:	481e      	ldr	r0, [pc, #120]	; (811a3f0 <__pow5mult+0xb0>)
 811a378:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 811a37c:	f000 fa70 	bl	811a860 <__assert_func>
 811a380:	e9c0 4401 	strd	r4, r4, [r0, #4]
 811a384:	6004      	str	r4, [r0, #0]
 811a386:	60c4      	str	r4, [r0, #12]
 811a388:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 811a38c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 811a390:	b94c      	cbnz	r4, 811a3a6 <__pow5mult+0x66>
 811a392:	f240 2171 	movw	r1, #625	; 0x271
 811a396:	4630      	mov	r0, r6
 811a398:	f7ff ff16 	bl	811a1c8 <__i2b>
 811a39c:	2300      	movs	r3, #0
 811a39e:	f8c8 0008 	str.w	r0, [r8, #8]
 811a3a2:	4604      	mov	r4, r0
 811a3a4:	6003      	str	r3, [r0, #0]
 811a3a6:	f04f 0900 	mov.w	r9, #0
 811a3aa:	07eb      	lsls	r3, r5, #31
 811a3ac:	d50a      	bpl.n	811a3c4 <__pow5mult+0x84>
 811a3ae:	4639      	mov	r1, r7
 811a3b0:	4622      	mov	r2, r4
 811a3b2:	4630      	mov	r0, r6
 811a3b4:	f7ff ff1e 	bl	811a1f4 <__multiply>
 811a3b8:	4639      	mov	r1, r7
 811a3ba:	4680      	mov	r8, r0
 811a3bc:	4630      	mov	r0, r6
 811a3be:	f7ff fe47 	bl	811a050 <_Bfree>
 811a3c2:	4647      	mov	r7, r8
 811a3c4:	106d      	asrs	r5, r5, #1
 811a3c6:	d00b      	beq.n	811a3e0 <__pow5mult+0xa0>
 811a3c8:	6820      	ldr	r0, [r4, #0]
 811a3ca:	b938      	cbnz	r0, 811a3dc <__pow5mult+0x9c>
 811a3cc:	4622      	mov	r2, r4
 811a3ce:	4621      	mov	r1, r4
 811a3d0:	4630      	mov	r0, r6
 811a3d2:	f7ff ff0f 	bl	811a1f4 <__multiply>
 811a3d6:	6020      	str	r0, [r4, #0]
 811a3d8:	f8c0 9000 	str.w	r9, [r0]
 811a3dc:	4604      	mov	r4, r0
 811a3de:	e7e4      	b.n	811a3aa <__pow5mult+0x6a>
 811a3e0:	4638      	mov	r0, r7
 811a3e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 811a3e6:	bf00      	nop
 811a3e8:	0811b718 	.word	0x0811b718
 811a3ec:	0811b53d 	.word	0x0811b53d
 811a3f0:	0811b5c4 	.word	0x0811b5c4

0811a3f4 <__lshift>:
 811a3f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 811a3f8:	460c      	mov	r4, r1
 811a3fa:	6849      	ldr	r1, [r1, #4]
 811a3fc:	6923      	ldr	r3, [r4, #16]
 811a3fe:	eb03 1862 	add.w	r8, r3, r2, asr #5
 811a402:	68a3      	ldr	r3, [r4, #8]
 811a404:	4607      	mov	r7, r0
 811a406:	4691      	mov	r9, r2
 811a408:	ea4f 1a62 	mov.w	sl, r2, asr #5
 811a40c:	f108 0601 	add.w	r6, r8, #1
 811a410:	42b3      	cmp	r3, r6
 811a412:	db0b      	blt.n	811a42c <__lshift+0x38>
 811a414:	4638      	mov	r0, r7
 811a416:	f7ff fddb 	bl	8119fd0 <_Balloc>
 811a41a:	4605      	mov	r5, r0
 811a41c:	b948      	cbnz	r0, 811a432 <__lshift+0x3e>
 811a41e:	4602      	mov	r2, r0
 811a420:	4b28      	ldr	r3, [pc, #160]	; (811a4c4 <__lshift+0xd0>)
 811a422:	4829      	ldr	r0, [pc, #164]	; (811a4c8 <__lshift+0xd4>)
 811a424:	f240 11d9 	movw	r1, #473	; 0x1d9
 811a428:	f000 fa1a 	bl	811a860 <__assert_func>
 811a42c:	3101      	adds	r1, #1
 811a42e:	005b      	lsls	r3, r3, #1
 811a430:	e7ee      	b.n	811a410 <__lshift+0x1c>
 811a432:	2300      	movs	r3, #0
 811a434:	f100 0114 	add.w	r1, r0, #20
 811a438:	f100 0210 	add.w	r2, r0, #16
 811a43c:	4618      	mov	r0, r3
 811a43e:	4553      	cmp	r3, sl
 811a440:	db33      	blt.n	811a4aa <__lshift+0xb6>
 811a442:	6920      	ldr	r0, [r4, #16]
 811a444:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 811a448:	f104 0314 	add.w	r3, r4, #20
 811a44c:	f019 091f 	ands.w	r9, r9, #31
 811a450:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 811a454:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 811a458:	d02b      	beq.n	811a4b2 <__lshift+0xbe>
 811a45a:	f1c9 0e20 	rsb	lr, r9, #32
 811a45e:	468a      	mov	sl, r1
 811a460:	2200      	movs	r2, #0
 811a462:	6818      	ldr	r0, [r3, #0]
 811a464:	fa00 f009 	lsl.w	r0, r0, r9
 811a468:	4302      	orrs	r2, r0
 811a46a:	f84a 2b04 	str.w	r2, [sl], #4
 811a46e:	f853 2b04 	ldr.w	r2, [r3], #4
 811a472:	459c      	cmp	ip, r3
 811a474:	fa22 f20e 	lsr.w	r2, r2, lr
 811a478:	d8f3      	bhi.n	811a462 <__lshift+0x6e>
 811a47a:	ebac 0304 	sub.w	r3, ip, r4
 811a47e:	3b15      	subs	r3, #21
 811a480:	f023 0303 	bic.w	r3, r3, #3
 811a484:	3304      	adds	r3, #4
 811a486:	f104 0015 	add.w	r0, r4, #21
 811a48a:	4584      	cmp	ip, r0
 811a48c:	bf38      	it	cc
 811a48e:	2304      	movcc	r3, #4
 811a490:	50ca      	str	r2, [r1, r3]
 811a492:	b10a      	cbz	r2, 811a498 <__lshift+0xa4>
 811a494:	f108 0602 	add.w	r6, r8, #2
 811a498:	3e01      	subs	r6, #1
 811a49a:	4638      	mov	r0, r7
 811a49c:	612e      	str	r6, [r5, #16]
 811a49e:	4621      	mov	r1, r4
 811a4a0:	f7ff fdd6 	bl	811a050 <_Bfree>
 811a4a4:	4628      	mov	r0, r5
 811a4a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 811a4aa:	f842 0f04 	str.w	r0, [r2, #4]!
 811a4ae:	3301      	adds	r3, #1
 811a4b0:	e7c5      	b.n	811a43e <__lshift+0x4a>
 811a4b2:	3904      	subs	r1, #4
 811a4b4:	f853 2b04 	ldr.w	r2, [r3], #4
 811a4b8:	f841 2f04 	str.w	r2, [r1, #4]!
 811a4bc:	459c      	cmp	ip, r3
 811a4be:	d8f9      	bhi.n	811a4b4 <__lshift+0xc0>
 811a4c0:	e7ea      	b.n	811a498 <__lshift+0xa4>
 811a4c2:	bf00      	nop
 811a4c4:	0811b5b3 	.word	0x0811b5b3
 811a4c8:	0811b5c4 	.word	0x0811b5c4

0811a4cc <__mcmp>:
 811a4cc:	b530      	push	{r4, r5, lr}
 811a4ce:	6902      	ldr	r2, [r0, #16]
 811a4d0:	690c      	ldr	r4, [r1, #16]
 811a4d2:	1b12      	subs	r2, r2, r4
 811a4d4:	d10e      	bne.n	811a4f4 <__mcmp+0x28>
 811a4d6:	f100 0314 	add.w	r3, r0, #20
 811a4da:	3114      	adds	r1, #20
 811a4dc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 811a4e0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 811a4e4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 811a4e8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 811a4ec:	42a5      	cmp	r5, r4
 811a4ee:	d003      	beq.n	811a4f8 <__mcmp+0x2c>
 811a4f0:	d305      	bcc.n	811a4fe <__mcmp+0x32>
 811a4f2:	2201      	movs	r2, #1
 811a4f4:	4610      	mov	r0, r2
 811a4f6:	bd30      	pop	{r4, r5, pc}
 811a4f8:	4283      	cmp	r3, r0
 811a4fa:	d3f3      	bcc.n	811a4e4 <__mcmp+0x18>
 811a4fc:	e7fa      	b.n	811a4f4 <__mcmp+0x28>
 811a4fe:	f04f 32ff 	mov.w	r2, #4294967295
 811a502:	e7f7      	b.n	811a4f4 <__mcmp+0x28>

0811a504 <__mdiff>:
 811a504:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 811a508:	460c      	mov	r4, r1
 811a50a:	4606      	mov	r6, r0
 811a50c:	4611      	mov	r1, r2
 811a50e:	4620      	mov	r0, r4
 811a510:	4617      	mov	r7, r2
 811a512:	f7ff ffdb 	bl	811a4cc <__mcmp>
 811a516:	1e05      	subs	r5, r0, #0
 811a518:	d110      	bne.n	811a53c <__mdiff+0x38>
 811a51a:	4629      	mov	r1, r5
 811a51c:	4630      	mov	r0, r6
 811a51e:	f7ff fd57 	bl	8119fd0 <_Balloc>
 811a522:	b930      	cbnz	r0, 811a532 <__mdiff+0x2e>
 811a524:	4b39      	ldr	r3, [pc, #228]	; (811a60c <__mdiff+0x108>)
 811a526:	4602      	mov	r2, r0
 811a528:	f240 2132 	movw	r1, #562	; 0x232
 811a52c:	4838      	ldr	r0, [pc, #224]	; (811a610 <__mdiff+0x10c>)
 811a52e:	f000 f997 	bl	811a860 <__assert_func>
 811a532:	2301      	movs	r3, #1
 811a534:	e9c0 3504 	strd	r3, r5, [r0, #16]
 811a538:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 811a53c:	bfa4      	itt	ge
 811a53e:	463b      	movge	r3, r7
 811a540:	4627      	movge	r7, r4
 811a542:	4630      	mov	r0, r6
 811a544:	6879      	ldr	r1, [r7, #4]
 811a546:	bfa6      	itte	ge
 811a548:	461c      	movge	r4, r3
 811a54a:	2500      	movge	r5, #0
 811a54c:	2501      	movlt	r5, #1
 811a54e:	f7ff fd3f 	bl	8119fd0 <_Balloc>
 811a552:	b920      	cbnz	r0, 811a55e <__mdiff+0x5a>
 811a554:	4b2d      	ldr	r3, [pc, #180]	; (811a60c <__mdiff+0x108>)
 811a556:	4602      	mov	r2, r0
 811a558:	f44f 7110 	mov.w	r1, #576	; 0x240
 811a55c:	e7e6      	b.n	811a52c <__mdiff+0x28>
 811a55e:	693e      	ldr	r6, [r7, #16]
 811a560:	60c5      	str	r5, [r0, #12]
 811a562:	6925      	ldr	r5, [r4, #16]
 811a564:	f107 0114 	add.w	r1, r7, #20
 811a568:	f104 0914 	add.w	r9, r4, #20
 811a56c:	f100 0e14 	add.w	lr, r0, #20
 811a570:	f107 0210 	add.w	r2, r7, #16
 811a574:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 811a578:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 811a57c:	46f2      	mov	sl, lr
 811a57e:	2700      	movs	r7, #0
 811a580:	f859 3b04 	ldr.w	r3, [r9], #4
 811a584:	f852 bf04 	ldr.w	fp, [r2, #4]!
 811a588:	fa1f f883 	uxth.w	r8, r3
 811a58c:	fa17 f78b 	uxtah	r7, r7, fp
 811a590:	0c1b      	lsrs	r3, r3, #16
 811a592:	eba7 0808 	sub.w	r8, r7, r8
 811a596:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 811a59a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 811a59e:	fa1f f888 	uxth.w	r8, r8
 811a5a2:	141f      	asrs	r7, r3, #16
 811a5a4:	454d      	cmp	r5, r9
 811a5a6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 811a5aa:	f84a 3b04 	str.w	r3, [sl], #4
 811a5ae:	d8e7      	bhi.n	811a580 <__mdiff+0x7c>
 811a5b0:	1b2b      	subs	r3, r5, r4
 811a5b2:	3b15      	subs	r3, #21
 811a5b4:	f023 0303 	bic.w	r3, r3, #3
 811a5b8:	3304      	adds	r3, #4
 811a5ba:	3415      	adds	r4, #21
 811a5bc:	42a5      	cmp	r5, r4
 811a5be:	bf38      	it	cc
 811a5c0:	2304      	movcc	r3, #4
 811a5c2:	4419      	add	r1, r3
 811a5c4:	4473      	add	r3, lr
 811a5c6:	469e      	mov	lr, r3
 811a5c8:	460d      	mov	r5, r1
 811a5ca:	4565      	cmp	r5, ip
 811a5cc:	d30e      	bcc.n	811a5ec <__mdiff+0xe8>
 811a5ce:	f10c 0203 	add.w	r2, ip, #3
 811a5d2:	1a52      	subs	r2, r2, r1
 811a5d4:	f022 0203 	bic.w	r2, r2, #3
 811a5d8:	3903      	subs	r1, #3
 811a5da:	458c      	cmp	ip, r1
 811a5dc:	bf38      	it	cc
 811a5de:	2200      	movcc	r2, #0
 811a5e0:	441a      	add	r2, r3
 811a5e2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 811a5e6:	b17b      	cbz	r3, 811a608 <__mdiff+0x104>
 811a5e8:	6106      	str	r6, [r0, #16]
 811a5ea:	e7a5      	b.n	811a538 <__mdiff+0x34>
 811a5ec:	f855 8b04 	ldr.w	r8, [r5], #4
 811a5f0:	fa17 f488 	uxtah	r4, r7, r8
 811a5f4:	1422      	asrs	r2, r4, #16
 811a5f6:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 811a5fa:	b2a4      	uxth	r4, r4
 811a5fc:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 811a600:	f84e 4b04 	str.w	r4, [lr], #4
 811a604:	1417      	asrs	r7, r2, #16
 811a606:	e7e0      	b.n	811a5ca <__mdiff+0xc6>
 811a608:	3e01      	subs	r6, #1
 811a60a:	e7ea      	b.n	811a5e2 <__mdiff+0xde>
 811a60c:	0811b5b3 	.word	0x0811b5b3
 811a610:	0811b5c4 	.word	0x0811b5c4

0811a614 <__d2b>:
 811a614:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 811a618:	4689      	mov	r9, r1
 811a61a:	2101      	movs	r1, #1
 811a61c:	ec57 6b10 	vmov	r6, r7, d0
 811a620:	4690      	mov	r8, r2
 811a622:	f7ff fcd5 	bl	8119fd0 <_Balloc>
 811a626:	4604      	mov	r4, r0
 811a628:	b930      	cbnz	r0, 811a638 <__d2b+0x24>
 811a62a:	4602      	mov	r2, r0
 811a62c:	4b25      	ldr	r3, [pc, #148]	; (811a6c4 <__d2b+0xb0>)
 811a62e:	4826      	ldr	r0, [pc, #152]	; (811a6c8 <__d2b+0xb4>)
 811a630:	f240 310a 	movw	r1, #778	; 0x30a
 811a634:	f000 f914 	bl	811a860 <__assert_func>
 811a638:	f3c7 550a 	ubfx	r5, r7, #20, #11
 811a63c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 811a640:	bb35      	cbnz	r5, 811a690 <__d2b+0x7c>
 811a642:	2e00      	cmp	r6, #0
 811a644:	9301      	str	r3, [sp, #4]
 811a646:	d028      	beq.n	811a69a <__d2b+0x86>
 811a648:	4668      	mov	r0, sp
 811a64a:	9600      	str	r6, [sp, #0]
 811a64c:	f7ff fd8c 	bl	811a168 <__lo0bits>
 811a650:	9900      	ldr	r1, [sp, #0]
 811a652:	b300      	cbz	r0, 811a696 <__d2b+0x82>
 811a654:	9a01      	ldr	r2, [sp, #4]
 811a656:	f1c0 0320 	rsb	r3, r0, #32
 811a65a:	fa02 f303 	lsl.w	r3, r2, r3
 811a65e:	430b      	orrs	r3, r1
 811a660:	40c2      	lsrs	r2, r0
 811a662:	6163      	str	r3, [r4, #20]
 811a664:	9201      	str	r2, [sp, #4]
 811a666:	9b01      	ldr	r3, [sp, #4]
 811a668:	61a3      	str	r3, [r4, #24]
 811a66a:	2b00      	cmp	r3, #0
 811a66c:	bf14      	ite	ne
 811a66e:	2202      	movne	r2, #2
 811a670:	2201      	moveq	r2, #1
 811a672:	6122      	str	r2, [r4, #16]
 811a674:	b1d5      	cbz	r5, 811a6ac <__d2b+0x98>
 811a676:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 811a67a:	4405      	add	r5, r0
 811a67c:	f8c9 5000 	str.w	r5, [r9]
 811a680:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 811a684:	f8c8 0000 	str.w	r0, [r8]
 811a688:	4620      	mov	r0, r4
 811a68a:	b003      	add	sp, #12
 811a68c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 811a690:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 811a694:	e7d5      	b.n	811a642 <__d2b+0x2e>
 811a696:	6161      	str	r1, [r4, #20]
 811a698:	e7e5      	b.n	811a666 <__d2b+0x52>
 811a69a:	a801      	add	r0, sp, #4
 811a69c:	f7ff fd64 	bl	811a168 <__lo0bits>
 811a6a0:	9b01      	ldr	r3, [sp, #4]
 811a6a2:	6163      	str	r3, [r4, #20]
 811a6a4:	2201      	movs	r2, #1
 811a6a6:	6122      	str	r2, [r4, #16]
 811a6a8:	3020      	adds	r0, #32
 811a6aa:	e7e3      	b.n	811a674 <__d2b+0x60>
 811a6ac:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 811a6b0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 811a6b4:	f8c9 0000 	str.w	r0, [r9]
 811a6b8:	6918      	ldr	r0, [r3, #16]
 811a6ba:	f7ff fd35 	bl	811a128 <__hi0bits>
 811a6be:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 811a6c2:	e7df      	b.n	811a684 <__d2b+0x70>
 811a6c4:	0811b5b3 	.word	0x0811b5b3
 811a6c8:	0811b5c4 	.word	0x0811b5c4

0811a6cc <_calloc_r>:
 811a6cc:	b513      	push	{r0, r1, r4, lr}
 811a6ce:	434a      	muls	r2, r1
 811a6d0:	4611      	mov	r1, r2
 811a6d2:	9201      	str	r2, [sp, #4]
 811a6d4:	f000 f85a 	bl	811a78c <_malloc_r>
 811a6d8:	4604      	mov	r4, r0
 811a6da:	b118      	cbz	r0, 811a6e4 <_calloc_r+0x18>
 811a6dc:	9a01      	ldr	r2, [sp, #4]
 811a6de:	2100      	movs	r1, #0
 811a6e0:	f7fe f980 	bl	81189e4 <memset>
 811a6e4:	4620      	mov	r0, r4
 811a6e6:	b002      	add	sp, #8
 811a6e8:	bd10      	pop	{r4, pc}
	...

0811a6ec <_free_r>:
 811a6ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 811a6ee:	2900      	cmp	r1, #0
 811a6f0:	d048      	beq.n	811a784 <_free_r+0x98>
 811a6f2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 811a6f6:	9001      	str	r0, [sp, #4]
 811a6f8:	2b00      	cmp	r3, #0
 811a6fa:	f1a1 0404 	sub.w	r4, r1, #4
 811a6fe:	bfb8      	it	lt
 811a700:	18e4      	addlt	r4, r4, r3
 811a702:	f000 f8ef 	bl	811a8e4 <__malloc_lock>
 811a706:	4a20      	ldr	r2, [pc, #128]	; (811a788 <_free_r+0x9c>)
 811a708:	9801      	ldr	r0, [sp, #4]
 811a70a:	6813      	ldr	r3, [r2, #0]
 811a70c:	4615      	mov	r5, r2
 811a70e:	b933      	cbnz	r3, 811a71e <_free_r+0x32>
 811a710:	6063      	str	r3, [r4, #4]
 811a712:	6014      	str	r4, [r2, #0]
 811a714:	b003      	add	sp, #12
 811a716:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 811a71a:	f000 b8e9 	b.w	811a8f0 <__malloc_unlock>
 811a71e:	42a3      	cmp	r3, r4
 811a720:	d90b      	bls.n	811a73a <_free_r+0x4e>
 811a722:	6821      	ldr	r1, [r4, #0]
 811a724:	1862      	adds	r2, r4, r1
 811a726:	4293      	cmp	r3, r2
 811a728:	bf04      	itt	eq
 811a72a:	681a      	ldreq	r2, [r3, #0]
 811a72c:	685b      	ldreq	r3, [r3, #4]
 811a72e:	6063      	str	r3, [r4, #4]
 811a730:	bf04      	itt	eq
 811a732:	1852      	addeq	r2, r2, r1
 811a734:	6022      	streq	r2, [r4, #0]
 811a736:	602c      	str	r4, [r5, #0]
 811a738:	e7ec      	b.n	811a714 <_free_r+0x28>
 811a73a:	461a      	mov	r2, r3
 811a73c:	685b      	ldr	r3, [r3, #4]
 811a73e:	b10b      	cbz	r3, 811a744 <_free_r+0x58>
 811a740:	42a3      	cmp	r3, r4
 811a742:	d9fa      	bls.n	811a73a <_free_r+0x4e>
 811a744:	6811      	ldr	r1, [r2, #0]
 811a746:	1855      	adds	r5, r2, r1
 811a748:	42a5      	cmp	r5, r4
 811a74a:	d10b      	bne.n	811a764 <_free_r+0x78>
 811a74c:	6824      	ldr	r4, [r4, #0]
 811a74e:	4421      	add	r1, r4
 811a750:	1854      	adds	r4, r2, r1
 811a752:	42a3      	cmp	r3, r4
 811a754:	6011      	str	r1, [r2, #0]
 811a756:	d1dd      	bne.n	811a714 <_free_r+0x28>
 811a758:	681c      	ldr	r4, [r3, #0]
 811a75a:	685b      	ldr	r3, [r3, #4]
 811a75c:	6053      	str	r3, [r2, #4]
 811a75e:	4421      	add	r1, r4
 811a760:	6011      	str	r1, [r2, #0]
 811a762:	e7d7      	b.n	811a714 <_free_r+0x28>
 811a764:	d902      	bls.n	811a76c <_free_r+0x80>
 811a766:	230c      	movs	r3, #12
 811a768:	6003      	str	r3, [r0, #0]
 811a76a:	e7d3      	b.n	811a714 <_free_r+0x28>
 811a76c:	6825      	ldr	r5, [r4, #0]
 811a76e:	1961      	adds	r1, r4, r5
 811a770:	428b      	cmp	r3, r1
 811a772:	bf04      	itt	eq
 811a774:	6819      	ldreq	r1, [r3, #0]
 811a776:	685b      	ldreq	r3, [r3, #4]
 811a778:	6063      	str	r3, [r4, #4]
 811a77a:	bf04      	itt	eq
 811a77c:	1949      	addeq	r1, r1, r5
 811a77e:	6021      	streq	r1, [r4, #0]
 811a780:	6054      	str	r4, [r2, #4]
 811a782:	e7c7      	b.n	811a714 <_free_r+0x28>
 811a784:	b003      	add	sp, #12
 811a786:	bd30      	pop	{r4, r5, pc}
 811a788:	10004ec8 	.word	0x10004ec8

0811a78c <_malloc_r>:
 811a78c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 811a78e:	1ccd      	adds	r5, r1, #3
 811a790:	f025 0503 	bic.w	r5, r5, #3
 811a794:	3508      	adds	r5, #8
 811a796:	2d0c      	cmp	r5, #12
 811a798:	bf38      	it	cc
 811a79a:	250c      	movcc	r5, #12
 811a79c:	2d00      	cmp	r5, #0
 811a79e:	4606      	mov	r6, r0
 811a7a0:	db01      	blt.n	811a7a6 <_malloc_r+0x1a>
 811a7a2:	42a9      	cmp	r1, r5
 811a7a4:	d903      	bls.n	811a7ae <_malloc_r+0x22>
 811a7a6:	230c      	movs	r3, #12
 811a7a8:	6033      	str	r3, [r6, #0]
 811a7aa:	2000      	movs	r0, #0
 811a7ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 811a7ae:	f000 f899 	bl	811a8e4 <__malloc_lock>
 811a7b2:	4921      	ldr	r1, [pc, #132]	; (811a838 <_malloc_r+0xac>)
 811a7b4:	680a      	ldr	r2, [r1, #0]
 811a7b6:	4614      	mov	r4, r2
 811a7b8:	b99c      	cbnz	r4, 811a7e2 <_malloc_r+0x56>
 811a7ba:	4f20      	ldr	r7, [pc, #128]	; (811a83c <_malloc_r+0xb0>)
 811a7bc:	683b      	ldr	r3, [r7, #0]
 811a7be:	b923      	cbnz	r3, 811a7ca <_malloc_r+0x3e>
 811a7c0:	4621      	mov	r1, r4
 811a7c2:	4630      	mov	r0, r6
 811a7c4:	f000 f83c 	bl	811a840 <_sbrk_r>
 811a7c8:	6038      	str	r0, [r7, #0]
 811a7ca:	4629      	mov	r1, r5
 811a7cc:	4630      	mov	r0, r6
 811a7ce:	f000 f837 	bl	811a840 <_sbrk_r>
 811a7d2:	1c43      	adds	r3, r0, #1
 811a7d4:	d123      	bne.n	811a81e <_malloc_r+0x92>
 811a7d6:	230c      	movs	r3, #12
 811a7d8:	6033      	str	r3, [r6, #0]
 811a7da:	4630      	mov	r0, r6
 811a7dc:	f000 f888 	bl	811a8f0 <__malloc_unlock>
 811a7e0:	e7e3      	b.n	811a7aa <_malloc_r+0x1e>
 811a7e2:	6823      	ldr	r3, [r4, #0]
 811a7e4:	1b5b      	subs	r3, r3, r5
 811a7e6:	d417      	bmi.n	811a818 <_malloc_r+0x8c>
 811a7e8:	2b0b      	cmp	r3, #11
 811a7ea:	d903      	bls.n	811a7f4 <_malloc_r+0x68>
 811a7ec:	6023      	str	r3, [r4, #0]
 811a7ee:	441c      	add	r4, r3
 811a7f0:	6025      	str	r5, [r4, #0]
 811a7f2:	e004      	b.n	811a7fe <_malloc_r+0x72>
 811a7f4:	6863      	ldr	r3, [r4, #4]
 811a7f6:	42a2      	cmp	r2, r4
 811a7f8:	bf0c      	ite	eq
 811a7fa:	600b      	streq	r3, [r1, #0]
 811a7fc:	6053      	strne	r3, [r2, #4]
 811a7fe:	4630      	mov	r0, r6
 811a800:	f000 f876 	bl	811a8f0 <__malloc_unlock>
 811a804:	f104 000b 	add.w	r0, r4, #11
 811a808:	1d23      	adds	r3, r4, #4
 811a80a:	f020 0007 	bic.w	r0, r0, #7
 811a80e:	1ac2      	subs	r2, r0, r3
 811a810:	d0cc      	beq.n	811a7ac <_malloc_r+0x20>
 811a812:	1a1b      	subs	r3, r3, r0
 811a814:	50a3      	str	r3, [r4, r2]
 811a816:	e7c9      	b.n	811a7ac <_malloc_r+0x20>
 811a818:	4622      	mov	r2, r4
 811a81a:	6864      	ldr	r4, [r4, #4]
 811a81c:	e7cc      	b.n	811a7b8 <_malloc_r+0x2c>
 811a81e:	1cc4      	adds	r4, r0, #3
 811a820:	f024 0403 	bic.w	r4, r4, #3
 811a824:	42a0      	cmp	r0, r4
 811a826:	d0e3      	beq.n	811a7f0 <_malloc_r+0x64>
 811a828:	1a21      	subs	r1, r4, r0
 811a82a:	4630      	mov	r0, r6
 811a82c:	f000 f808 	bl	811a840 <_sbrk_r>
 811a830:	3001      	adds	r0, #1
 811a832:	d1dd      	bne.n	811a7f0 <_malloc_r+0x64>
 811a834:	e7cf      	b.n	811a7d6 <_malloc_r+0x4a>
 811a836:	bf00      	nop
 811a838:	10004ec8 	.word	0x10004ec8
 811a83c:	10004ecc 	.word	0x10004ecc

0811a840 <_sbrk_r>:
 811a840:	b538      	push	{r3, r4, r5, lr}
 811a842:	4d06      	ldr	r5, [pc, #24]	; (811a85c <_sbrk_r+0x1c>)
 811a844:	2300      	movs	r3, #0
 811a846:	4604      	mov	r4, r0
 811a848:	4608      	mov	r0, r1
 811a84a:	602b      	str	r3, [r5, #0]
 811a84c:	f7e7 fd72 	bl	8102334 <_sbrk>
 811a850:	1c43      	adds	r3, r0, #1
 811a852:	d102      	bne.n	811a85a <_sbrk_r+0x1a>
 811a854:	682b      	ldr	r3, [r5, #0]
 811a856:	b103      	cbz	r3, 811a85a <_sbrk_r+0x1a>
 811a858:	6023      	str	r3, [r4, #0]
 811a85a:	bd38      	pop	{r3, r4, r5, pc}
 811a85c:	10008f34 	.word	0x10008f34

0811a860 <__assert_func>:
 811a860:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 811a862:	4614      	mov	r4, r2
 811a864:	461a      	mov	r2, r3
 811a866:	4b09      	ldr	r3, [pc, #36]	; (811a88c <__assert_func+0x2c>)
 811a868:	681b      	ldr	r3, [r3, #0]
 811a86a:	4605      	mov	r5, r0
 811a86c:	68d8      	ldr	r0, [r3, #12]
 811a86e:	b14c      	cbz	r4, 811a884 <__assert_func+0x24>
 811a870:	4b07      	ldr	r3, [pc, #28]	; (811a890 <__assert_func+0x30>)
 811a872:	9100      	str	r1, [sp, #0]
 811a874:	e9cd 3401 	strd	r3, r4, [sp, #4]
 811a878:	4906      	ldr	r1, [pc, #24]	; (811a894 <__assert_func+0x34>)
 811a87a:	462b      	mov	r3, r5
 811a87c:	f000 f80e 	bl	811a89c <fiprintf>
 811a880:	f000 fa64 	bl	811ad4c <abort>
 811a884:	4b04      	ldr	r3, [pc, #16]	; (811a898 <__assert_func+0x38>)
 811a886:	461c      	mov	r4, r3
 811a888:	e7f3      	b.n	811a872 <__assert_func+0x12>
 811a88a:	bf00      	nop
 811a88c:	10000188 	.word	0x10000188
 811a890:	0811b724 	.word	0x0811b724
 811a894:	0811b731 	.word	0x0811b731
 811a898:	0811b75f 	.word	0x0811b75f

0811a89c <fiprintf>:
 811a89c:	b40e      	push	{r1, r2, r3}
 811a89e:	b503      	push	{r0, r1, lr}
 811a8a0:	4601      	mov	r1, r0
 811a8a2:	ab03      	add	r3, sp, #12
 811a8a4:	4805      	ldr	r0, [pc, #20]	; (811a8bc <fiprintf+0x20>)
 811a8a6:	f853 2b04 	ldr.w	r2, [r3], #4
 811a8aa:	6800      	ldr	r0, [r0, #0]
 811a8ac:	9301      	str	r3, [sp, #4]
 811a8ae:	f000 f84f 	bl	811a950 <_vfiprintf_r>
 811a8b2:	b002      	add	sp, #8
 811a8b4:	f85d eb04 	ldr.w	lr, [sp], #4
 811a8b8:	b003      	add	sp, #12
 811a8ba:	4770      	bx	lr
 811a8bc:	10000188 	.word	0x10000188

0811a8c0 <__ascii_mbtowc>:
 811a8c0:	b082      	sub	sp, #8
 811a8c2:	b901      	cbnz	r1, 811a8c6 <__ascii_mbtowc+0x6>
 811a8c4:	a901      	add	r1, sp, #4
 811a8c6:	b142      	cbz	r2, 811a8da <__ascii_mbtowc+0x1a>
 811a8c8:	b14b      	cbz	r3, 811a8de <__ascii_mbtowc+0x1e>
 811a8ca:	7813      	ldrb	r3, [r2, #0]
 811a8cc:	600b      	str	r3, [r1, #0]
 811a8ce:	7812      	ldrb	r2, [r2, #0]
 811a8d0:	1e10      	subs	r0, r2, #0
 811a8d2:	bf18      	it	ne
 811a8d4:	2001      	movne	r0, #1
 811a8d6:	b002      	add	sp, #8
 811a8d8:	4770      	bx	lr
 811a8da:	4610      	mov	r0, r2
 811a8dc:	e7fb      	b.n	811a8d6 <__ascii_mbtowc+0x16>
 811a8de:	f06f 0001 	mvn.w	r0, #1
 811a8e2:	e7f8      	b.n	811a8d6 <__ascii_mbtowc+0x16>

0811a8e4 <__malloc_lock>:
 811a8e4:	4801      	ldr	r0, [pc, #4]	; (811a8ec <__malloc_lock+0x8>)
 811a8e6:	f000 bbf1 	b.w	811b0cc <__retarget_lock_acquire_recursive>
 811a8ea:	bf00      	nop
 811a8ec:	10008f3c 	.word	0x10008f3c

0811a8f0 <__malloc_unlock>:
 811a8f0:	4801      	ldr	r0, [pc, #4]	; (811a8f8 <__malloc_unlock+0x8>)
 811a8f2:	f000 bbec 	b.w	811b0ce <__retarget_lock_release_recursive>
 811a8f6:	bf00      	nop
 811a8f8:	10008f3c 	.word	0x10008f3c

0811a8fc <__sfputc_r>:
 811a8fc:	6893      	ldr	r3, [r2, #8]
 811a8fe:	3b01      	subs	r3, #1
 811a900:	2b00      	cmp	r3, #0
 811a902:	b410      	push	{r4}
 811a904:	6093      	str	r3, [r2, #8]
 811a906:	da08      	bge.n	811a91a <__sfputc_r+0x1e>
 811a908:	6994      	ldr	r4, [r2, #24]
 811a90a:	42a3      	cmp	r3, r4
 811a90c:	db01      	blt.n	811a912 <__sfputc_r+0x16>
 811a90e:	290a      	cmp	r1, #10
 811a910:	d103      	bne.n	811a91a <__sfputc_r+0x1e>
 811a912:	f85d 4b04 	ldr.w	r4, [sp], #4
 811a916:	f000 b94b 	b.w	811abb0 <__swbuf_r>
 811a91a:	6813      	ldr	r3, [r2, #0]
 811a91c:	1c58      	adds	r0, r3, #1
 811a91e:	6010      	str	r0, [r2, #0]
 811a920:	7019      	strb	r1, [r3, #0]
 811a922:	4608      	mov	r0, r1
 811a924:	f85d 4b04 	ldr.w	r4, [sp], #4
 811a928:	4770      	bx	lr

0811a92a <__sfputs_r>:
 811a92a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 811a92c:	4606      	mov	r6, r0
 811a92e:	460f      	mov	r7, r1
 811a930:	4614      	mov	r4, r2
 811a932:	18d5      	adds	r5, r2, r3
 811a934:	42ac      	cmp	r4, r5
 811a936:	d101      	bne.n	811a93c <__sfputs_r+0x12>
 811a938:	2000      	movs	r0, #0
 811a93a:	e007      	b.n	811a94c <__sfputs_r+0x22>
 811a93c:	f814 1b01 	ldrb.w	r1, [r4], #1
 811a940:	463a      	mov	r2, r7
 811a942:	4630      	mov	r0, r6
 811a944:	f7ff ffda 	bl	811a8fc <__sfputc_r>
 811a948:	1c43      	adds	r3, r0, #1
 811a94a:	d1f3      	bne.n	811a934 <__sfputs_r+0xa>
 811a94c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0811a950 <_vfiprintf_r>:
 811a950:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 811a954:	460d      	mov	r5, r1
 811a956:	b09d      	sub	sp, #116	; 0x74
 811a958:	4614      	mov	r4, r2
 811a95a:	4698      	mov	r8, r3
 811a95c:	4606      	mov	r6, r0
 811a95e:	b118      	cbz	r0, 811a968 <_vfiprintf_r+0x18>
 811a960:	6983      	ldr	r3, [r0, #24]
 811a962:	b90b      	cbnz	r3, 811a968 <_vfiprintf_r+0x18>
 811a964:	f000 fb14 	bl	811af90 <__sinit>
 811a968:	4b89      	ldr	r3, [pc, #548]	; (811ab90 <_vfiprintf_r+0x240>)
 811a96a:	429d      	cmp	r5, r3
 811a96c:	d11b      	bne.n	811a9a6 <_vfiprintf_r+0x56>
 811a96e:	6875      	ldr	r5, [r6, #4]
 811a970:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 811a972:	07d9      	lsls	r1, r3, #31
 811a974:	d405      	bmi.n	811a982 <_vfiprintf_r+0x32>
 811a976:	89ab      	ldrh	r3, [r5, #12]
 811a978:	059a      	lsls	r2, r3, #22
 811a97a:	d402      	bmi.n	811a982 <_vfiprintf_r+0x32>
 811a97c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 811a97e:	f000 fba5 	bl	811b0cc <__retarget_lock_acquire_recursive>
 811a982:	89ab      	ldrh	r3, [r5, #12]
 811a984:	071b      	lsls	r3, r3, #28
 811a986:	d501      	bpl.n	811a98c <_vfiprintf_r+0x3c>
 811a988:	692b      	ldr	r3, [r5, #16]
 811a98a:	b9eb      	cbnz	r3, 811a9c8 <_vfiprintf_r+0x78>
 811a98c:	4629      	mov	r1, r5
 811a98e:	4630      	mov	r0, r6
 811a990:	f000 f96e 	bl	811ac70 <__swsetup_r>
 811a994:	b1c0      	cbz	r0, 811a9c8 <_vfiprintf_r+0x78>
 811a996:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 811a998:	07dc      	lsls	r4, r3, #31
 811a99a:	d50e      	bpl.n	811a9ba <_vfiprintf_r+0x6a>
 811a99c:	f04f 30ff 	mov.w	r0, #4294967295
 811a9a0:	b01d      	add	sp, #116	; 0x74
 811a9a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 811a9a6:	4b7b      	ldr	r3, [pc, #492]	; (811ab94 <_vfiprintf_r+0x244>)
 811a9a8:	429d      	cmp	r5, r3
 811a9aa:	d101      	bne.n	811a9b0 <_vfiprintf_r+0x60>
 811a9ac:	68b5      	ldr	r5, [r6, #8]
 811a9ae:	e7df      	b.n	811a970 <_vfiprintf_r+0x20>
 811a9b0:	4b79      	ldr	r3, [pc, #484]	; (811ab98 <_vfiprintf_r+0x248>)
 811a9b2:	429d      	cmp	r5, r3
 811a9b4:	bf08      	it	eq
 811a9b6:	68f5      	ldreq	r5, [r6, #12]
 811a9b8:	e7da      	b.n	811a970 <_vfiprintf_r+0x20>
 811a9ba:	89ab      	ldrh	r3, [r5, #12]
 811a9bc:	0598      	lsls	r0, r3, #22
 811a9be:	d4ed      	bmi.n	811a99c <_vfiprintf_r+0x4c>
 811a9c0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 811a9c2:	f000 fb84 	bl	811b0ce <__retarget_lock_release_recursive>
 811a9c6:	e7e9      	b.n	811a99c <_vfiprintf_r+0x4c>
 811a9c8:	2300      	movs	r3, #0
 811a9ca:	9309      	str	r3, [sp, #36]	; 0x24
 811a9cc:	2320      	movs	r3, #32
 811a9ce:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 811a9d2:	f8cd 800c 	str.w	r8, [sp, #12]
 811a9d6:	2330      	movs	r3, #48	; 0x30
 811a9d8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 811ab9c <_vfiprintf_r+0x24c>
 811a9dc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 811a9e0:	f04f 0901 	mov.w	r9, #1
 811a9e4:	4623      	mov	r3, r4
 811a9e6:	469a      	mov	sl, r3
 811a9e8:	f813 2b01 	ldrb.w	r2, [r3], #1
 811a9ec:	b10a      	cbz	r2, 811a9f2 <_vfiprintf_r+0xa2>
 811a9ee:	2a25      	cmp	r2, #37	; 0x25
 811a9f0:	d1f9      	bne.n	811a9e6 <_vfiprintf_r+0x96>
 811a9f2:	ebba 0b04 	subs.w	fp, sl, r4
 811a9f6:	d00b      	beq.n	811aa10 <_vfiprintf_r+0xc0>
 811a9f8:	465b      	mov	r3, fp
 811a9fa:	4622      	mov	r2, r4
 811a9fc:	4629      	mov	r1, r5
 811a9fe:	4630      	mov	r0, r6
 811aa00:	f7ff ff93 	bl	811a92a <__sfputs_r>
 811aa04:	3001      	adds	r0, #1
 811aa06:	f000 80aa 	beq.w	811ab5e <_vfiprintf_r+0x20e>
 811aa0a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 811aa0c:	445a      	add	r2, fp
 811aa0e:	9209      	str	r2, [sp, #36]	; 0x24
 811aa10:	f89a 3000 	ldrb.w	r3, [sl]
 811aa14:	2b00      	cmp	r3, #0
 811aa16:	f000 80a2 	beq.w	811ab5e <_vfiprintf_r+0x20e>
 811aa1a:	2300      	movs	r3, #0
 811aa1c:	f04f 32ff 	mov.w	r2, #4294967295
 811aa20:	e9cd 2305 	strd	r2, r3, [sp, #20]
 811aa24:	f10a 0a01 	add.w	sl, sl, #1
 811aa28:	9304      	str	r3, [sp, #16]
 811aa2a:	9307      	str	r3, [sp, #28]
 811aa2c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 811aa30:	931a      	str	r3, [sp, #104]	; 0x68
 811aa32:	4654      	mov	r4, sl
 811aa34:	2205      	movs	r2, #5
 811aa36:	f814 1b01 	ldrb.w	r1, [r4], #1
 811aa3a:	4858      	ldr	r0, [pc, #352]	; (811ab9c <_vfiprintf_r+0x24c>)
 811aa3c:	f7e5 fc58 	bl	81002f0 <memchr>
 811aa40:	9a04      	ldr	r2, [sp, #16]
 811aa42:	b9d8      	cbnz	r0, 811aa7c <_vfiprintf_r+0x12c>
 811aa44:	06d1      	lsls	r1, r2, #27
 811aa46:	bf44      	itt	mi
 811aa48:	2320      	movmi	r3, #32
 811aa4a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 811aa4e:	0713      	lsls	r3, r2, #28
 811aa50:	bf44      	itt	mi
 811aa52:	232b      	movmi	r3, #43	; 0x2b
 811aa54:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 811aa58:	f89a 3000 	ldrb.w	r3, [sl]
 811aa5c:	2b2a      	cmp	r3, #42	; 0x2a
 811aa5e:	d015      	beq.n	811aa8c <_vfiprintf_r+0x13c>
 811aa60:	9a07      	ldr	r2, [sp, #28]
 811aa62:	4654      	mov	r4, sl
 811aa64:	2000      	movs	r0, #0
 811aa66:	f04f 0c0a 	mov.w	ip, #10
 811aa6a:	4621      	mov	r1, r4
 811aa6c:	f811 3b01 	ldrb.w	r3, [r1], #1
 811aa70:	3b30      	subs	r3, #48	; 0x30
 811aa72:	2b09      	cmp	r3, #9
 811aa74:	d94e      	bls.n	811ab14 <_vfiprintf_r+0x1c4>
 811aa76:	b1b0      	cbz	r0, 811aaa6 <_vfiprintf_r+0x156>
 811aa78:	9207      	str	r2, [sp, #28]
 811aa7a:	e014      	b.n	811aaa6 <_vfiprintf_r+0x156>
 811aa7c:	eba0 0308 	sub.w	r3, r0, r8
 811aa80:	fa09 f303 	lsl.w	r3, r9, r3
 811aa84:	4313      	orrs	r3, r2
 811aa86:	9304      	str	r3, [sp, #16]
 811aa88:	46a2      	mov	sl, r4
 811aa8a:	e7d2      	b.n	811aa32 <_vfiprintf_r+0xe2>
 811aa8c:	9b03      	ldr	r3, [sp, #12]
 811aa8e:	1d19      	adds	r1, r3, #4
 811aa90:	681b      	ldr	r3, [r3, #0]
 811aa92:	9103      	str	r1, [sp, #12]
 811aa94:	2b00      	cmp	r3, #0
 811aa96:	bfbb      	ittet	lt
 811aa98:	425b      	neglt	r3, r3
 811aa9a:	f042 0202 	orrlt.w	r2, r2, #2
 811aa9e:	9307      	strge	r3, [sp, #28]
 811aaa0:	9307      	strlt	r3, [sp, #28]
 811aaa2:	bfb8      	it	lt
 811aaa4:	9204      	strlt	r2, [sp, #16]
 811aaa6:	7823      	ldrb	r3, [r4, #0]
 811aaa8:	2b2e      	cmp	r3, #46	; 0x2e
 811aaaa:	d10c      	bne.n	811aac6 <_vfiprintf_r+0x176>
 811aaac:	7863      	ldrb	r3, [r4, #1]
 811aaae:	2b2a      	cmp	r3, #42	; 0x2a
 811aab0:	d135      	bne.n	811ab1e <_vfiprintf_r+0x1ce>
 811aab2:	9b03      	ldr	r3, [sp, #12]
 811aab4:	1d1a      	adds	r2, r3, #4
 811aab6:	681b      	ldr	r3, [r3, #0]
 811aab8:	9203      	str	r2, [sp, #12]
 811aaba:	2b00      	cmp	r3, #0
 811aabc:	bfb8      	it	lt
 811aabe:	f04f 33ff 	movlt.w	r3, #4294967295
 811aac2:	3402      	adds	r4, #2
 811aac4:	9305      	str	r3, [sp, #20]
 811aac6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 811abac <_vfiprintf_r+0x25c>
 811aaca:	7821      	ldrb	r1, [r4, #0]
 811aacc:	2203      	movs	r2, #3
 811aace:	4650      	mov	r0, sl
 811aad0:	f7e5 fc0e 	bl	81002f0 <memchr>
 811aad4:	b140      	cbz	r0, 811aae8 <_vfiprintf_r+0x198>
 811aad6:	2340      	movs	r3, #64	; 0x40
 811aad8:	eba0 000a 	sub.w	r0, r0, sl
 811aadc:	fa03 f000 	lsl.w	r0, r3, r0
 811aae0:	9b04      	ldr	r3, [sp, #16]
 811aae2:	4303      	orrs	r3, r0
 811aae4:	3401      	adds	r4, #1
 811aae6:	9304      	str	r3, [sp, #16]
 811aae8:	f814 1b01 	ldrb.w	r1, [r4], #1
 811aaec:	482c      	ldr	r0, [pc, #176]	; (811aba0 <_vfiprintf_r+0x250>)
 811aaee:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 811aaf2:	2206      	movs	r2, #6
 811aaf4:	f7e5 fbfc 	bl	81002f0 <memchr>
 811aaf8:	2800      	cmp	r0, #0
 811aafa:	d03f      	beq.n	811ab7c <_vfiprintf_r+0x22c>
 811aafc:	4b29      	ldr	r3, [pc, #164]	; (811aba4 <_vfiprintf_r+0x254>)
 811aafe:	bb1b      	cbnz	r3, 811ab48 <_vfiprintf_r+0x1f8>
 811ab00:	9b03      	ldr	r3, [sp, #12]
 811ab02:	3307      	adds	r3, #7
 811ab04:	f023 0307 	bic.w	r3, r3, #7
 811ab08:	3308      	adds	r3, #8
 811ab0a:	9303      	str	r3, [sp, #12]
 811ab0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 811ab0e:	443b      	add	r3, r7
 811ab10:	9309      	str	r3, [sp, #36]	; 0x24
 811ab12:	e767      	b.n	811a9e4 <_vfiprintf_r+0x94>
 811ab14:	fb0c 3202 	mla	r2, ip, r2, r3
 811ab18:	460c      	mov	r4, r1
 811ab1a:	2001      	movs	r0, #1
 811ab1c:	e7a5      	b.n	811aa6a <_vfiprintf_r+0x11a>
 811ab1e:	2300      	movs	r3, #0
 811ab20:	3401      	adds	r4, #1
 811ab22:	9305      	str	r3, [sp, #20]
 811ab24:	4619      	mov	r1, r3
 811ab26:	f04f 0c0a 	mov.w	ip, #10
 811ab2a:	4620      	mov	r0, r4
 811ab2c:	f810 2b01 	ldrb.w	r2, [r0], #1
 811ab30:	3a30      	subs	r2, #48	; 0x30
 811ab32:	2a09      	cmp	r2, #9
 811ab34:	d903      	bls.n	811ab3e <_vfiprintf_r+0x1ee>
 811ab36:	2b00      	cmp	r3, #0
 811ab38:	d0c5      	beq.n	811aac6 <_vfiprintf_r+0x176>
 811ab3a:	9105      	str	r1, [sp, #20]
 811ab3c:	e7c3      	b.n	811aac6 <_vfiprintf_r+0x176>
 811ab3e:	fb0c 2101 	mla	r1, ip, r1, r2
 811ab42:	4604      	mov	r4, r0
 811ab44:	2301      	movs	r3, #1
 811ab46:	e7f0      	b.n	811ab2a <_vfiprintf_r+0x1da>
 811ab48:	ab03      	add	r3, sp, #12
 811ab4a:	9300      	str	r3, [sp, #0]
 811ab4c:	462a      	mov	r2, r5
 811ab4e:	4b16      	ldr	r3, [pc, #88]	; (811aba8 <_vfiprintf_r+0x258>)
 811ab50:	a904      	add	r1, sp, #16
 811ab52:	4630      	mov	r0, r6
 811ab54:	f7fd ffee 	bl	8118b34 <_printf_float>
 811ab58:	4607      	mov	r7, r0
 811ab5a:	1c78      	adds	r0, r7, #1
 811ab5c:	d1d6      	bne.n	811ab0c <_vfiprintf_r+0x1bc>
 811ab5e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 811ab60:	07d9      	lsls	r1, r3, #31
 811ab62:	d405      	bmi.n	811ab70 <_vfiprintf_r+0x220>
 811ab64:	89ab      	ldrh	r3, [r5, #12]
 811ab66:	059a      	lsls	r2, r3, #22
 811ab68:	d402      	bmi.n	811ab70 <_vfiprintf_r+0x220>
 811ab6a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 811ab6c:	f000 faaf 	bl	811b0ce <__retarget_lock_release_recursive>
 811ab70:	89ab      	ldrh	r3, [r5, #12]
 811ab72:	065b      	lsls	r3, r3, #25
 811ab74:	f53f af12 	bmi.w	811a99c <_vfiprintf_r+0x4c>
 811ab78:	9809      	ldr	r0, [sp, #36]	; 0x24
 811ab7a:	e711      	b.n	811a9a0 <_vfiprintf_r+0x50>
 811ab7c:	ab03      	add	r3, sp, #12
 811ab7e:	9300      	str	r3, [sp, #0]
 811ab80:	462a      	mov	r2, r5
 811ab82:	4b09      	ldr	r3, [pc, #36]	; (811aba8 <_vfiprintf_r+0x258>)
 811ab84:	a904      	add	r1, sp, #16
 811ab86:	4630      	mov	r0, r6
 811ab88:	f7fe fa78 	bl	811907c <_printf_i>
 811ab8c:	e7e4      	b.n	811ab58 <_vfiprintf_r+0x208>
 811ab8e:	bf00      	nop
 811ab90:	0811b89c 	.word	0x0811b89c
 811ab94:	0811b8bc 	.word	0x0811b8bc
 811ab98:	0811b87c 	.word	0x0811b87c
 811ab9c:	0811b76a 	.word	0x0811b76a
 811aba0:	0811b774 	.word	0x0811b774
 811aba4:	08118b35 	.word	0x08118b35
 811aba8:	0811a92b 	.word	0x0811a92b
 811abac:	0811b770 	.word	0x0811b770

0811abb0 <__swbuf_r>:
 811abb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 811abb2:	460e      	mov	r6, r1
 811abb4:	4614      	mov	r4, r2
 811abb6:	4605      	mov	r5, r0
 811abb8:	b118      	cbz	r0, 811abc2 <__swbuf_r+0x12>
 811abba:	6983      	ldr	r3, [r0, #24]
 811abbc:	b90b      	cbnz	r3, 811abc2 <__swbuf_r+0x12>
 811abbe:	f000 f9e7 	bl	811af90 <__sinit>
 811abc2:	4b21      	ldr	r3, [pc, #132]	; (811ac48 <__swbuf_r+0x98>)
 811abc4:	429c      	cmp	r4, r3
 811abc6:	d12b      	bne.n	811ac20 <__swbuf_r+0x70>
 811abc8:	686c      	ldr	r4, [r5, #4]
 811abca:	69a3      	ldr	r3, [r4, #24]
 811abcc:	60a3      	str	r3, [r4, #8]
 811abce:	89a3      	ldrh	r3, [r4, #12]
 811abd0:	071a      	lsls	r2, r3, #28
 811abd2:	d52f      	bpl.n	811ac34 <__swbuf_r+0x84>
 811abd4:	6923      	ldr	r3, [r4, #16]
 811abd6:	b36b      	cbz	r3, 811ac34 <__swbuf_r+0x84>
 811abd8:	6923      	ldr	r3, [r4, #16]
 811abda:	6820      	ldr	r0, [r4, #0]
 811abdc:	1ac0      	subs	r0, r0, r3
 811abde:	6963      	ldr	r3, [r4, #20]
 811abe0:	b2f6      	uxtb	r6, r6
 811abe2:	4283      	cmp	r3, r0
 811abe4:	4637      	mov	r7, r6
 811abe6:	dc04      	bgt.n	811abf2 <__swbuf_r+0x42>
 811abe8:	4621      	mov	r1, r4
 811abea:	4628      	mov	r0, r5
 811abec:	f000 f93c 	bl	811ae68 <_fflush_r>
 811abf0:	bb30      	cbnz	r0, 811ac40 <__swbuf_r+0x90>
 811abf2:	68a3      	ldr	r3, [r4, #8]
 811abf4:	3b01      	subs	r3, #1
 811abf6:	60a3      	str	r3, [r4, #8]
 811abf8:	6823      	ldr	r3, [r4, #0]
 811abfa:	1c5a      	adds	r2, r3, #1
 811abfc:	6022      	str	r2, [r4, #0]
 811abfe:	701e      	strb	r6, [r3, #0]
 811ac00:	6963      	ldr	r3, [r4, #20]
 811ac02:	3001      	adds	r0, #1
 811ac04:	4283      	cmp	r3, r0
 811ac06:	d004      	beq.n	811ac12 <__swbuf_r+0x62>
 811ac08:	89a3      	ldrh	r3, [r4, #12]
 811ac0a:	07db      	lsls	r3, r3, #31
 811ac0c:	d506      	bpl.n	811ac1c <__swbuf_r+0x6c>
 811ac0e:	2e0a      	cmp	r6, #10
 811ac10:	d104      	bne.n	811ac1c <__swbuf_r+0x6c>
 811ac12:	4621      	mov	r1, r4
 811ac14:	4628      	mov	r0, r5
 811ac16:	f000 f927 	bl	811ae68 <_fflush_r>
 811ac1a:	b988      	cbnz	r0, 811ac40 <__swbuf_r+0x90>
 811ac1c:	4638      	mov	r0, r7
 811ac1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 811ac20:	4b0a      	ldr	r3, [pc, #40]	; (811ac4c <__swbuf_r+0x9c>)
 811ac22:	429c      	cmp	r4, r3
 811ac24:	d101      	bne.n	811ac2a <__swbuf_r+0x7a>
 811ac26:	68ac      	ldr	r4, [r5, #8]
 811ac28:	e7cf      	b.n	811abca <__swbuf_r+0x1a>
 811ac2a:	4b09      	ldr	r3, [pc, #36]	; (811ac50 <__swbuf_r+0xa0>)
 811ac2c:	429c      	cmp	r4, r3
 811ac2e:	bf08      	it	eq
 811ac30:	68ec      	ldreq	r4, [r5, #12]
 811ac32:	e7ca      	b.n	811abca <__swbuf_r+0x1a>
 811ac34:	4621      	mov	r1, r4
 811ac36:	4628      	mov	r0, r5
 811ac38:	f000 f81a 	bl	811ac70 <__swsetup_r>
 811ac3c:	2800      	cmp	r0, #0
 811ac3e:	d0cb      	beq.n	811abd8 <__swbuf_r+0x28>
 811ac40:	f04f 37ff 	mov.w	r7, #4294967295
 811ac44:	e7ea      	b.n	811ac1c <__swbuf_r+0x6c>
 811ac46:	bf00      	nop
 811ac48:	0811b89c 	.word	0x0811b89c
 811ac4c:	0811b8bc 	.word	0x0811b8bc
 811ac50:	0811b87c 	.word	0x0811b87c

0811ac54 <__ascii_wctomb>:
 811ac54:	b149      	cbz	r1, 811ac6a <__ascii_wctomb+0x16>
 811ac56:	2aff      	cmp	r2, #255	; 0xff
 811ac58:	bf85      	ittet	hi
 811ac5a:	238a      	movhi	r3, #138	; 0x8a
 811ac5c:	6003      	strhi	r3, [r0, #0]
 811ac5e:	700a      	strbls	r2, [r1, #0]
 811ac60:	f04f 30ff 	movhi.w	r0, #4294967295
 811ac64:	bf98      	it	ls
 811ac66:	2001      	movls	r0, #1
 811ac68:	4770      	bx	lr
 811ac6a:	4608      	mov	r0, r1
 811ac6c:	4770      	bx	lr
	...

0811ac70 <__swsetup_r>:
 811ac70:	4b32      	ldr	r3, [pc, #200]	; (811ad3c <__swsetup_r+0xcc>)
 811ac72:	b570      	push	{r4, r5, r6, lr}
 811ac74:	681d      	ldr	r5, [r3, #0]
 811ac76:	4606      	mov	r6, r0
 811ac78:	460c      	mov	r4, r1
 811ac7a:	b125      	cbz	r5, 811ac86 <__swsetup_r+0x16>
 811ac7c:	69ab      	ldr	r3, [r5, #24]
 811ac7e:	b913      	cbnz	r3, 811ac86 <__swsetup_r+0x16>
 811ac80:	4628      	mov	r0, r5
 811ac82:	f000 f985 	bl	811af90 <__sinit>
 811ac86:	4b2e      	ldr	r3, [pc, #184]	; (811ad40 <__swsetup_r+0xd0>)
 811ac88:	429c      	cmp	r4, r3
 811ac8a:	d10f      	bne.n	811acac <__swsetup_r+0x3c>
 811ac8c:	686c      	ldr	r4, [r5, #4]
 811ac8e:	89a3      	ldrh	r3, [r4, #12]
 811ac90:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 811ac94:	0719      	lsls	r1, r3, #28
 811ac96:	d42c      	bmi.n	811acf2 <__swsetup_r+0x82>
 811ac98:	06dd      	lsls	r5, r3, #27
 811ac9a:	d411      	bmi.n	811acc0 <__swsetup_r+0x50>
 811ac9c:	2309      	movs	r3, #9
 811ac9e:	6033      	str	r3, [r6, #0]
 811aca0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 811aca4:	81a3      	strh	r3, [r4, #12]
 811aca6:	f04f 30ff 	mov.w	r0, #4294967295
 811acaa:	e03e      	b.n	811ad2a <__swsetup_r+0xba>
 811acac:	4b25      	ldr	r3, [pc, #148]	; (811ad44 <__swsetup_r+0xd4>)
 811acae:	429c      	cmp	r4, r3
 811acb0:	d101      	bne.n	811acb6 <__swsetup_r+0x46>
 811acb2:	68ac      	ldr	r4, [r5, #8]
 811acb4:	e7eb      	b.n	811ac8e <__swsetup_r+0x1e>
 811acb6:	4b24      	ldr	r3, [pc, #144]	; (811ad48 <__swsetup_r+0xd8>)
 811acb8:	429c      	cmp	r4, r3
 811acba:	bf08      	it	eq
 811acbc:	68ec      	ldreq	r4, [r5, #12]
 811acbe:	e7e6      	b.n	811ac8e <__swsetup_r+0x1e>
 811acc0:	0758      	lsls	r0, r3, #29
 811acc2:	d512      	bpl.n	811acea <__swsetup_r+0x7a>
 811acc4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 811acc6:	b141      	cbz	r1, 811acda <__swsetup_r+0x6a>
 811acc8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 811accc:	4299      	cmp	r1, r3
 811acce:	d002      	beq.n	811acd6 <__swsetup_r+0x66>
 811acd0:	4630      	mov	r0, r6
 811acd2:	f7ff fd0b 	bl	811a6ec <_free_r>
 811acd6:	2300      	movs	r3, #0
 811acd8:	6363      	str	r3, [r4, #52]	; 0x34
 811acda:	89a3      	ldrh	r3, [r4, #12]
 811acdc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 811ace0:	81a3      	strh	r3, [r4, #12]
 811ace2:	2300      	movs	r3, #0
 811ace4:	6063      	str	r3, [r4, #4]
 811ace6:	6923      	ldr	r3, [r4, #16]
 811ace8:	6023      	str	r3, [r4, #0]
 811acea:	89a3      	ldrh	r3, [r4, #12]
 811acec:	f043 0308 	orr.w	r3, r3, #8
 811acf0:	81a3      	strh	r3, [r4, #12]
 811acf2:	6923      	ldr	r3, [r4, #16]
 811acf4:	b94b      	cbnz	r3, 811ad0a <__swsetup_r+0x9a>
 811acf6:	89a3      	ldrh	r3, [r4, #12]
 811acf8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 811acfc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 811ad00:	d003      	beq.n	811ad0a <__swsetup_r+0x9a>
 811ad02:	4621      	mov	r1, r4
 811ad04:	4630      	mov	r0, r6
 811ad06:	f000 fa07 	bl	811b118 <__smakebuf_r>
 811ad0a:	89a0      	ldrh	r0, [r4, #12]
 811ad0c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 811ad10:	f010 0301 	ands.w	r3, r0, #1
 811ad14:	d00a      	beq.n	811ad2c <__swsetup_r+0xbc>
 811ad16:	2300      	movs	r3, #0
 811ad18:	60a3      	str	r3, [r4, #8]
 811ad1a:	6963      	ldr	r3, [r4, #20]
 811ad1c:	425b      	negs	r3, r3
 811ad1e:	61a3      	str	r3, [r4, #24]
 811ad20:	6923      	ldr	r3, [r4, #16]
 811ad22:	b943      	cbnz	r3, 811ad36 <__swsetup_r+0xc6>
 811ad24:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 811ad28:	d1ba      	bne.n	811aca0 <__swsetup_r+0x30>
 811ad2a:	bd70      	pop	{r4, r5, r6, pc}
 811ad2c:	0781      	lsls	r1, r0, #30
 811ad2e:	bf58      	it	pl
 811ad30:	6963      	ldrpl	r3, [r4, #20]
 811ad32:	60a3      	str	r3, [r4, #8]
 811ad34:	e7f4      	b.n	811ad20 <__swsetup_r+0xb0>
 811ad36:	2000      	movs	r0, #0
 811ad38:	e7f7      	b.n	811ad2a <__swsetup_r+0xba>
 811ad3a:	bf00      	nop
 811ad3c:	10000188 	.word	0x10000188
 811ad40:	0811b89c 	.word	0x0811b89c
 811ad44:	0811b8bc 	.word	0x0811b8bc
 811ad48:	0811b87c 	.word	0x0811b87c

0811ad4c <abort>:
 811ad4c:	b508      	push	{r3, lr}
 811ad4e:	2006      	movs	r0, #6
 811ad50:	f000 fa4a 	bl	811b1e8 <raise>
 811ad54:	2001      	movs	r0, #1
 811ad56:	f7e7 fa75 	bl	8102244 <_exit>
	...

0811ad5c <__sflush_r>:
 811ad5c:	898a      	ldrh	r2, [r1, #12]
 811ad5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 811ad62:	4605      	mov	r5, r0
 811ad64:	0710      	lsls	r0, r2, #28
 811ad66:	460c      	mov	r4, r1
 811ad68:	d458      	bmi.n	811ae1c <__sflush_r+0xc0>
 811ad6a:	684b      	ldr	r3, [r1, #4]
 811ad6c:	2b00      	cmp	r3, #0
 811ad6e:	dc05      	bgt.n	811ad7c <__sflush_r+0x20>
 811ad70:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 811ad72:	2b00      	cmp	r3, #0
 811ad74:	dc02      	bgt.n	811ad7c <__sflush_r+0x20>
 811ad76:	2000      	movs	r0, #0
 811ad78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 811ad7c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 811ad7e:	2e00      	cmp	r6, #0
 811ad80:	d0f9      	beq.n	811ad76 <__sflush_r+0x1a>
 811ad82:	2300      	movs	r3, #0
 811ad84:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 811ad88:	682f      	ldr	r7, [r5, #0]
 811ad8a:	602b      	str	r3, [r5, #0]
 811ad8c:	d032      	beq.n	811adf4 <__sflush_r+0x98>
 811ad8e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 811ad90:	89a3      	ldrh	r3, [r4, #12]
 811ad92:	075a      	lsls	r2, r3, #29
 811ad94:	d505      	bpl.n	811ada2 <__sflush_r+0x46>
 811ad96:	6863      	ldr	r3, [r4, #4]
 811ad98:	1ac0      	subs	r0, r0, r3
 811ad9a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 811ad9c:	b10b      	cbz	r3, 811ada2 <__sflush_r+0x46>
 811ad9e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 811ada0:	1ac0      	subs	r0, r0, r3
 811ada2:	2300      	movs	r3, #0
 811ada4:	4602      	mov	r2, r0
 811ada6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 811ada8:	6a21      	ldr	r1, [r4, #32]
 811adaa:	4628      	mov	r0, r5
 811adac:	47b0      	blx	r6
 811adae:	1c43      	adds	r3, r0, #1
 811adb0:	89a3      	ldrh	r3, [r4, #12]
 811adb2:	d106      	bne.n	811adc2 <__sflush_r+0x66>
 811adb4:	6829      	ldr	r1, [r5, #0]
 811adb6:	291d      	cmp	r1, #29
 811adb8:	d82c      	bhi.n	811ae14 <__sflush_r+0xb8>
 811adba:	4a2a      	ldr	r2, [pc, #168]	; (811ae64 <__sflush_r+0x108>)
 811adbc:	40ca      	lsrs	r2, r1
 811adbe:	07d6      	lsls	r6, r2, #31
 811adc0:	d528      	bpl.n	811ae14 <__sflush_r+0xb8>
 811adc2:	2200      	movs	r2, #0
 811adc4:	6062      	str	r2, [r4, #4]
 811adc6:	04d9      	lsls	r1, r3, #19
 811adc8:	6922      	ldr	r2, [r4, #16]
 811adca:	6022      	str	r2, [r4, #0]
 811adcc:	d504      	bpl.n	811add8 <__sflush_r+0x7c>
 811adce:	1c42      	adds	r2, r0, #1
 811add0:	d101      	bne.n	811add6 <__sflush_r+0x7a>
 811add2:	682b      	ldr	r3, [r5, #0]
 811add4:	b903      	cbnz	r3, 811add8 <__sflush_r+0x7c>
 811add6:	6560      	str	r0, [r4, #84]	; 0x54
 811add8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 811adda:	602f      	str	r7, [r5, #0]
 811addc:	2900      	cmp	r1, #0
 811adde:	d0ca      	beq.n	811ad76 <__sflush_r+0x1a>
 811ade0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 811ade4:	4299      	cmp	r1, r3
 811ade6:	d002      	beq.n	811adee <__sflush_r+0x92>
 811ade8:	4628      	mov	r0, r5
 811adea:	f7ff fc7f 	bl	811a6ec <_free_r>
 811adee:	2000      	movs	r0, #0
 811adf0:	6360      	str	r0, [r4, #52]	; 0x34
 811adf2:	e7c1      	b.n	811ad78 <__sflush_r+0x1c>
 811adf4:	6a21      	ldr	r1, [r4, #32]
 811adf6:	2301      	movs	r3, #1
 811adf8:	4628      	mov	r0, r5
 811adfa:	47b0      	blx	r6
 811adfc:	1c41      	adds	r1, r0, #1
 811adfe:	d1c7      	bne.n	811ad90 <__sflush_r+0x34>
 811ae00:	682b      	ldr	r3, [r5, #0]
 811ae02:	2b00      	cmp	r3, #0
 811ae04:	d0c4      	beq.n	811ad90 <__sflush_r+0x34>
 811ae06:	2b1d      	cmp	r3, #29
 811ae08:	d001      	beq.n	811ae0e <__sflush_r+0xb2>
 811ae0a:	2b16      	cmp	r3, #22
 811ae0c:	d101      	bne.n	811ae12 <__sflush_r+0xb6>
 811ae0e:	602f      	str	r7, [r5, #0]
 811ae10:	e7b1      	b.n	811ad76 <__sflush_r+0x1a>
 811ae12:	89a3      	ldrh	r3, [r4, #12]
 811ae14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 811ae18:	81a3      	strh	r3, [r4, #12]
 811ae1a:	e7ad      	b.n	811ad78 <__sflush_r+0x1c>
 811ae1c:	690f      	ldr	r7, [r1, #16]
 811ae1e:	2f00      	cmp	r7, #0
 811ae20:	d0a9      	beq.n	811ad76 <__sflush_r+0x1a>
 811ae22:	0793      	lsls	r3, r2, #30
 811ae24:	680e      	ldr	r6, [r1, #0]
 811ae26:	bf08      	it	eq
 811ae28:	694b      	ldreq	r3, [r1, #20]
 811ae2a:	600f      	str	r7, [r1, #0]
 811ae2c:	bf18      	it	ne
 811ae2e:	2300      	movne	r3, #0
 811ae30:	eba6 0807 	sub.w	r8, r6, r7
 811ae34:	608b      	str	r3, [r1, #8]
 811ae36:	f1b8 0f00 	cmp.w	r8, #0
 811ae3a:	dd9c      	ble.n	811ad76 <__sflush_r+0x1a>
 811ae3c:	6a21      	ldr	r1, [r4, #32]
 811ae3e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 811ae40:	4643      	mov	r3, r8
 811ae42:	463a      	mov	r2, r7
 811ae44:	4628      	mov	r0, r5
 811ae46:	47b0      	blx	r6
 811ae48:	2800      	cmp	r0, #0
 811ae4a:	dc06      	bgt.n	811ae5a <__sflush_r+0xfe>
 811ae4c:	89a3      	ldrh	r3, [r4, #12]
 811ae4e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 811ae52:	81a3      	strh	r3, [r4, #12]
 811ae54:	f04f 30ff 	mov.w	r0, #4294967295
 811ae58:	e78e      	b.n	811ad78 <__sflush_r+0x1c>
 811ae5a:	4407      	add	r7, r0
 811ae5c:	eba8 0800 	sub.w	r8, r8, r0
 811ae60:	e7e9      	b.n	811ae36 <__sflush_r+0xda>
 811ae62:	bf00      	nop
 811ae64:	20400001 	.word	0x20400001

0811ae68 <_fflush_r>:
 811ae68:	b538      	push	{r3, r4, r5, lr}
 811ae6a:	690b      	ldr	r3, [r1, #16]
 811ae6c:	4605      	mov	r5, r0
 811ae6e:	460c      	mov	r4, r1
 811ae70:	b913      	cbnz	r3, 811ae78 <_fflush_r+0x10>
 811ae72:	2500      	movs	r5, #0
 811ae74:	4628      	mov	r0, r5
 811ae76:	bd38      	pop	{r3, r4, r5, pc}
 811ae78:	b118      	cbz	r0, 811ae82 <_fflush_r+0x1a>
 811ae7a:	6983      	ldr	r3, [r0, #24]
 811ae7c:	b90b      	cbnz	r3, 811ae82 <_fflush_r+0x1a>
 811ae7e:	f000 f887 	bl	811af90 <__sinit>
 811ae82:	4b14      	ldr	r3, [pc, #80]	; (811aed4 <_fflush_r+0x6c>)
 811ae84:	429c      	cmp	r4, r3
 811ae86:	d11b      	bne.n	811aec0 <_fflush_r+0x58>
 811ae88:	686c      	ldr	r4, [r5, #4]
 811ae8a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 811ae8e:	2b00      	cmp	r3, #0
 811ae90:	d0ef      	beq.n	811ae72 <_fflush_r+0xa>
 811ae92:	6e62      	ldr	r2, [r4, #100]	; 0x64
 811ae94:	07d0      	lsls	r0, r2, #31
 811ae96:	d404      	bmi.n	811aea2 <_fflush_r+0x3a>
 811ae98:	0599      	lsls	r1, r3, #22
 811ae9a:	d402      	bmi.n	811aea2 <_fflush_r+0x3a>
 811ae9c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 811ae9e:	f000 f915 	bl	811b0cc <__retarget_lock_acquire_recursive>
 811aea2:	4628      	mov	r0, r5
 811aea4:	4621      	mov	r1, r4
 811aea6:	f7ff ff59 	bl	811ad5c <__sflush_r>
 811aeaa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 811aeac:	07da      	lsls	r2, r3, #31
 811aeae:	4605      	mov	r5, r0
 811aeb0:	d4e0      	bmi.n	811ae74 <_fflush_r+0xc>
 811aeb2:	89a3      	ldrh	r3, [r4, #12]
 811aeb4:	059b      	lsls	r3, r3, #22
 811aeb6:	d4dd      	bmi.n	811ae74 <_fflush_r+0xc>
 811aeb8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 811aeba:	f000 f908 	bl	811b0ce <__retarget_lock_release_recursive>
 811aebe:	e7d9      	b.n	811ae74 <_fflush_r+0xc>
 811aec0:	4b05      	ldr	r3, [pc, #20]	; (811aed8 <_fflush_r+0x70>)
 811aec2:	429c      	cmp	r4, r3
 811aec4:	d101      	bne.n	811aeca <_fflush_r+0x62>
 811aec6:	68ac      	ldr	r4, [r5, #8]
 811aec8:	e7df      	b.n	811ae8a <_fflush_r+0x22>
 811aeca:	4b04      	ldr	r3, [pc, #16]	; (811aedc <_fflush_r+0x74>)
 811aecc:	429c      	cmp	r4, r3
 811aece:	bf08      	it	eq
 811aed0:	68ec      	ldreq	r4, [r5, #12]
 811aed2:	e7da      	b.n	811ae8a <_fflush_r+0x22>
 811aed4:	0811b89c 	.word	0x0811b89c
 811aed8:	0811b8bc 	.word	0x0811b8bc
 811aedc:	0811b87c 	.word	0x0811b87c

0811aee0 <std>:
 811aee0:	2300      	movs	r3, #0
 811aee2:	b510      	push	{r4, lr}
 811aee4:	4604      	mov	r4, r0
 811aee6:	e9c0 3300 	strd	r3, r3, [r0]
 811aeea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 811aeee:	6083      	str	r3, [r0, #8]
 811aef0:	8181      	strh	r1, [r0, #12]
 811aef2:	6643      	str	r3, [r0, #100]	; 0x64
 811aef4:	81c2      	strh	r2, [r0, #14]
 811aef6:	6183      	str	r3, [r0, #24]
 811aef8:	4619      	mov	r1, r3
 811aefa:	2208      	movs	r2, #8
 811aefc:	305c      	adds	r0, #92	; 0x5c
 811aefe:	f7fd fd71 	bl	81189e4 <memset>
 811af02:	4b05      	ldr	r3, [pc, #20]	; (811af18 <std+0x38>)
 811af04:	6263      	str	r3, [r4, #36]	; 0x24
 811af06:	4b05      	ldr	r3, [pc, #20]	; (811af1c <std+0x3c>)
 811af08:	62a3      	str	r3, [r4, #40]	; 0x28
 811af0a:	4b05      	ldr	r3, [pc, #20]	; (811af20 <std+0x40>)
 811af0c:	62e3      	str	r3, [r4, #44]	; 0x2c
 811af0e:	4b05      	ldr	r3, [pc, #20]	; (811af24 <std+0x44>)
 811af10:	6224      	str	r4, [r4, #32]
 811af12:	6323      	str	r3, [r4, #48]	; 0x30
 811af14:	bd10      	pop	{r4, pc}
 811af16:	bf00      	nop
 811af18:	0811b221 	.word	0x0811b221
 811af1c:	0811b243 	.word	0x0811b243
 811af20:	0811b27b 	.word	0x0811b27b
 811af24:	0811b29f 	.word	0x0811b29f

0811af28 <_cleanup_r>:
 811af28:	4901      	ldr	r1, [pc, #4]	; (811af30 <_cleanup_r+0x8>)
 811af2a:	f000 b8af 	b.w	811b08c <_fwalk_reent>
 811af2e:	bf00      	nop
 811af30:	0811ae69 	.word	0x0811ae69

0811af34 <__sfmoreglue>:
 811af34:	b570      	push	{r4, r5, r6, lr}
 811af36:	1e4a      	subs	r2, r1, #1
 811af38:	2568      	movs	r5, #104	; 0x68
 811af3a:	4355      	muls	r5, r2
 811af3c:	460e      	mov	r6, r1
 811af3e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 811af42:	f7ff fc23 	bl	811a78c <_malloc_r>
 811af46:	4604      	mov	r4, r0
 811af48:	b140      	cbz	r0, 811af5c <__sfmoreglue+0x28>
 811af4a:	2100      	movs	r1, #0
 811af4c:	e9c0 1600 	strd	r1, r6, [r0]
 811af50:	300c      	adds	r0, #12
 811af52:	60a0      	str	r0, [r4, #8]
 811af54:	f105 0268 	add.w	r2, r5, #104	; 0x68
 811af58:	f7fd fd44 	bl	81189e4 <memset>
 811af5c:	4620      	mov	r0, r4
 811af5e:	bd70      	pop	{r4, r5, r6, pc}

0811af60 <__sfp_lock_acquire>:
 811af60:	4801      	ldr	r0, [pc, #4]	; (811af68 <__sfp_lock_acquire+0x8>)
 811af62:	f000 b8b3 	b.w	811b0cc <__retarget_lock_acquire_recursive>
 811af66:	bf00      	nop
 811af68:	10008f40 	.word	0x10008f40

0811af6c <__sfp_lock_release>:
 811af6c:	4801      	ldr	r0, [pc, #4]	; (811af74 <__sfp_lock_release+0x8>)
 811af6e:	f000 b8ae 	b.w	811b0ce <__retarget_lock_release_recursive>
 811af72:	bf00      	nop
 811af74:	10008f40 	.word	0x10008f40

0811af78 <__sinit_lock_acquire>:
 811af78:	4801      	ldr	r0, [pc, #4]	; (811af80 <__sinit_lock_acquire+0x8>)
 811af7a:	f000 b8a7 	b.w	811b0cc <__retarget_lock_acquire_recursive>
 811af7e:	bf00      	nop
 811af80:	10008f3b 	.word	0x10008f3b

0811af84 <__sinit_lock_release>:
 811af84:	4801      	ldr	r0, [pc, #4]	; (811af8c <__sinit_lock_release+0x8>)
 811af86:	f000 b8a2 	b.w	811b0ce <__retarget_lock_release_recursive>
 811af8a:	bf00      	nop
 811af8c:	10008f3b 	.word	0x10008f3b

0811af90 <__sinit>:
 811af90:	b510      	push	{r4, lr}
 811af92:	4604      	mov	r4, r0
 811af94:	f7ff fff0 	bl	811af78 <__sinit_lock_acquire>
 811af98:	69a3      	ldr	r3, [r4, #24]
 811af9a:	b11b      	cbz	r3, 811afa4 <__sinit+0x14>
 811af9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 811afa0:	f7ff bff0 	b.w	811af84 <__sinit_lock_release>
 811afa4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 811afa8:	6523      	str	r3, [r4, #80]	; 0x50
 811afaa:	4b13      	ldr	r3, [pc, #76]	; (811aff8 <__sinit+0x68>)
 811afac:	4a13      	ldr	r2, [pc, #76]	; (811affc <__sinit+0x6c>)
 811afae:	681b      	ldr	r3, [r3, #0]
 811afb0:	62a2      	str	r2, [r4, #40]	; 0x28
 811afb2:	42a3      	cmp	r3, r4
 811afb4:	bf04      	itt	eq
 811afb6:	2301      	moveq	r3, #1
 811afb8:	61a3      	streq	r3, [r4, #24]
 811afba:	4620      	mov	r0, r4
 811afbc:	f000 f820 	bl	811b000 <__sfp>
 811afc0:	6060      	str	r0, [r4, #4]
 811afc2:	4620      	mov	r0, r4
 811afc4:	f000 f81c 	bl	811b000 <__sfp>
 811afc8:	60a0      	str	r0, [r4, #8]
 811afca:	4620      	mov	r0, r4
 811afcc:	f000 f818 	bl	811b000 <__sfp>
 811afd0:	2200      	movs	r2, #0
 811afd2:	60e0      	str	r0, [r4, #12]
 811afd4:	2104      	movs	r1, #4
 811afd6:	6860      	ldr	r0, [r4, #4]
 811afd8:	f7ff ff82 	bl	811aee0 <std>
 811afdc:	68a0      	ldr	r0, [r4, #8]
 811afde:	2201      	movs	r2, #1
 811afe0:	2109      	movs	r1, #9
 811afe2:	f7ff ff7d 	bl	811aee0 <std>
 811afe6:	68e0      	ldr	r0, [r4, #12]
 811afe8:	2202      	movs	r2, #2
 811afea:	2112      	movs	r1, #18
 811afec:	f7ff ff78 	bl	811aee0 <std>
 811aff0:	2301      	movs	r3, #1
 811aff2:	61a3      	str	r3, [r4, #24]
 811aff4:	e7d2      	b.n	811af9c <__sinit+0xc>
 811aff6:	bf00      	nop
 811aff8:	0811b4f8 	.word	0x0811b4f8
 811affc:	0811af29 	.word	0x0811af29

0811b000 <__sfp>:
 811b000:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 811b002:	4607      	mov	r7, r0
 811b004:	f7ff ffac 	bl	811af60 <__sfp_lock_acquire>
 811b008:	4b1e      	ldr	r3, [pc, #120]	; (811b084 <__sfp+0x84>)
 811b00a:	681e      	ldr	r6, [r3, #0]
 811b00c:	69b3      	ldr	r3, [r6, #24]
 811b00e:	b913      	cbnz	r3, 811b016 <__sfp+0x16>
 811b010:	4630      	mov	r0, r6
 811b012:	f7ff ffbd 	bl	811af90 <__sinit>
 811b016:	3648      	adds	r6, #72	; 0x48
 811b018:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 811b01c:	3b01      	subs	r3, #1
 811b01e:	d503      	bpl.n	811b028 <__sfp+0x28>
 811b020:	6833      	ldr	r3, [r6, #0]
 811b022:	b30b      	cbz	r3, 811b068 <__sfp+0x68>
 811b024:	6836      	ldr	r6, [r6, #0]
 811b026:	e7f7      	b.n	811b018 <__sfp+0x18>
 811b028:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 811b02c:	b9d5      	cbnz	r5, 811b064 <__sfp+0x64>
 811b02e:	4b16      	ldr	r3, [pc, #88]	; (811b088 <__sfp+0x88>)
 811b030:	60e3      	str	r3, [r4, #12]
 811b032:	f104 0058 	add.w	r0, r4, #88	; 0x58
 811b036:	6665      	str	r5, [r4, #100]	; 0x64
 811b038:	f000 f847 	bl	811b0ca <__retarget_lock_init_recursive>
 811b03c:	f7ff ff96 	bl	811af6c <__sfp_lock_release>
 811b040:	e9c4 5501 	strd	r5, r5, [r4, #4]
 811b044:	e9c4 5504 	strd	r5, r5, [r4, #16]
 811b048:	6025      	str	r5, [r4, #0]
 811b04a:	61a5      	str	r5, [r4, #24]
 811b04c:	2208      	movs	r2, #8
 811b04e:	4629      	mov	r1, r5
 811b050:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 811b054:	f7fd fcc6 	bl	81189e4 <memset>
 811b058:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 811b05c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 811b060:	4620      	mov	r0, r4
 811b062:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 811b064:	3468      	adds	r4, #104	; 0x68
 811b066:	e7d9      	b.n	811b01c <__sfp+0x1c>
 811b068:	2104      	movs	r1, #4
 811b06a:	4638      	mov	r0, r7
 811b06c:	f7ff ff62 	bl	811af34 <__sfmoreglue>
 811b070:	4604      	mov	r4, r0
 811b072:	6030      	str	r0, [r6, #0]
 811b074:	2800      	cmp	r0, #0
 811b076:	d1d5      	bne.n	811b024 <__sfp+0x24>
 811b078:	f7ff ff78 	bl	811af6c <__sfp_lock_release>
 811b07c:	230c      	movs	r3, #12
 811b07e:	603b      	str	r3, [r7, #0]
 811b080:	e7ee      	b.n	811b060 <__sfp+0x60>
 811b082:	bf00      	nop
 811b084:	0811b4f8 	.word	0x0811b4f8
 811b088:	ffff0001 	.word	0xffff0001

0811b08c <_fwalk_reent>:
 811b08c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 811b090:	4606      	mov	r6, r0
 811b092:	4688      	mov	r8, r1
 811b094:	f100 0448 	add.w	r4, r0, #72	; 0x48
 811b098:	2700      	movs	r7, #0
 811b09a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 811b09e:	f1b9 0901 	subs.w	r9, r9, #1
 811b0a2:	d505      	bpl.n	811b0b0 <_fwalk_reent+0x24>
 811b0a4:	6824      	ldr	r4, [r4, #0]
 811b0a6:	2c00      	cmp	r4, #0
 811b0a8:	d1f7      	bne.n	811b09a <_fwalk_reent+0xe>
 811b0aa:	4638      	mov	r0, r7
 811b0ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 811b0b0:	89ab      	ldrh	r3, [r5, #12]
 811b0b2:	2b01      	cmp	r3, #1
 811b0b4:	d907      	bls.n	811b0c6 <_fwalk_reent+0x3a>
 811b0b6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 811b0ba:	3301      	adds	r3, #1
 811b0bc:	d003      	beq.n	811b0c6 <_fwalk_reent+0x3a>
 811b0be:	4629      	mov	r1, r5
 811b0c0:	4630      	mov	r0, r6
 811b0c2:	47c0      	blx	r8
 811b0c4:	4307      	orrs	r7, r0
 811b0c6:	3568      	adds	r5, #104	; 0x68
 811b0c8:	e7e9      	b.n	811b09e <_fwalk_reent+0x12>

0811b0ca <__retarget_lock_init_recursive>:
 811b0ca:	4770      	bx	lr

0811b0cc <__retarget_lock_acquire_recursive>:
 811b0cc:	4770      	bx	lr

0811b0ce <__retarget_lock_release_recursive>:
 811b0ce:	4770      	bx	lr

0811b0d0 <__swhatbuf_r>:
 811b0d0:	b570      	push	{r4, r5, r6, lr}
 811b0d2:	460e      	mov	r6, r1
 811b0d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 811b0d8:	2900      	cmp	r1, #0
 811b0da:	b096      	sub	sp, #88	; 0x58
 811b0dc:	4614      	mov	r4, r2
 811b0de:	461d      	mov	r5, r3
 811b0e0:	da07      	bge.n	811b0f2 <__swhatbuf_r+0x22>
 811b0e2:	2300      	movs	r3, #0
 811b0e4:	602b      	str	r3, [r5, #0]
 811b0e6:	89b3      	ldrh	r3, [r6, #12]
 811b0e8:	061a      	lsls	r2, r3, #24
 811b0ea:	d410      	bmi.n	811b10e <__swhatbuf_r+0x3e>
 811b0ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 811b0f0:	e00e      	b.n	811b110 <__swhatbuf_r+0x40>
 811b0f2:	466a      	mov	r2, sp
 811b0f4:	f000 f8fa 	bl	811b2ec <_fstat_r>
 811b0f8:	2800      	cmp	r0, #0
 811b0fa:	dbf2      	blt.n	811b0e2 <__swhatbuf_r+0x12>
 811b0fc:	9a01      	ldr	r2, [sp, #4]
 811b0fe:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 811b102:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 811b106:	425a      	negs	r2, r3
 811b108:	415a      	adcs	r2, r3
 811b10a:	602a      	str	r2, [r5, #0]
 811b10c:	e7ee      	b.n	811b0ec <__swhatbuf_r+0x1c>
 811b10e:	2340      	movs	r3, #64	; 0x40
 811b110:	2000      	movs	r0, #0
 811b112:	6023      	str	r3, [r4, #0]
 811b114:	b016      	add	sp, #88	; 0x58
 811b116:	bd70      	pop	{r4, r5, r6, pc}

0811b118 <__smakebuf_r>:
 811b118:	898b      	ldrh	r3, [r1, #12]
 811b11a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 811b11c:	079d      	lsls	r5, r3, #30
 811b11e:	4606      	mov	r6, r0
 811b120:	460c      	mov	r4, r1
 811b122:	d507      	bpl.n	811b134 <__smakebuf_r+0x1c>
 811b124:	f104 0347 	add.w	r3, r4, #71	; 0x47
 811b128:	6023      	str	r3, [r4, #0]
 811b12a:	6123      	str	r3, [r4, #16]
 811b12c:	2301      	movs	r3, #1
 811b12e:	6163      	str	r3, [r4, #20]
 811b130:	b002      	add	sp, #8
 811b132:	bd70      	pop	{r4, r5, r6, pc}
 811b134:	ab01      	add	r3, sp, #4
 811b136:	466a      	mov	r2, sp
 811b138:	f7ff ffca 	bl	811b0d0 <__swhatbuf_r>
 811b13c:	9900      	ldr	r1, [sp, #0]
 811b13e:	4605      	mov	r5, r0
 811b140:	4630      	mov	r0, r6
 811b142:	f7ff fb23 	bl	811a78c <_malloc_r>
 811b146:	b948      	cbnz	r0, 811b15c <__smakebuf_r+0x44>
 811b148:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 811b14c:	059a      	lsls	r2, r3, #22
 811b14e:	d4ef      	bmi.n	811b130 <__smakebuf_r+0x18>
 811b150:	f023 0303 	bic.w	r3, r3, #3
 811b154:	f043 0302 	orr.w	r3, r3, #2
 811b158:	81a3      	strh	r3, [r4, #12]
 811b15a:	e7e3      	b.n	811b124 <__smakebuf_r+0xc>
 811b15c:	4b0d      	ldr	r3, [pc, #52]	; (811b194 <__smakebuf_r+0x7c>)
 811b15e:	62b3      	str	r3, [r6, #40]	; 0x28
 811b160:	89a3      	ldrh	r3, [r4, #12]
 811b162:	6020      	str	r0, [r4, #0]
 811b164:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 811b168:	81a3      	strh	r3, [r4, #12]
 811b16a:	9b00      	ldr	r3, [sp, #0]
 811b16c:	6163      	str	r3, [r4, #20]
 811b16e:	9b01      	ldr	r3, [sp, #4]
 811b170:	6120      	str	r0, [r4, #16]
 811b172:	b15b      	cbz	r3, 811b18c <__smakebuf_r+0x74>
 811b174:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 811b178:	4630      	mov	r0, r6
 811b17a:	f000 f8c9 	bl	811b310 <_isatty_r>
 811b17e:	b128      	cbz	r0, 811b18c <__smakebuf_r+0x74>
 811b180:	89a3      	ldrh	r3, [r4, #12]
 811b182:	f023 0303 	bic.w	r3, r3, #3
 811b186:	f043 0301 	orr.w	r3, r3, #1
 811b18a:	81a3      	strh	r3, [r4, #12]
 811b18c:	89a0      	ldrh	r0, [r4, #12]
 811b18e:	4305      	orrs	r5, r0
 811b190:	81a5      	strh	r5, [r4, #12]
 811b192:	e7cd      	b.n	811b130 <__smakebuf_r+0x18>
 811b194:	0811af29 	.word	0x0811af29

0811b198 <_raise_r>:
 811b198:	291f      	cmp	r1, #31
 811b19a:	b538      	push	{r3, r4, r5, lr}
 811b19c:	4604      	mov	r4, r0
 811b19e:	460d      	mov	r5, r1
 811b1a0:	d904      	bls.n	811b1ac <_raise_r+0x14>
 811b1a2:	2316      	movs	r3, #22
 811b1a4:	6003      	str	r3, [r0, #0]
 811b1a6:	f04f 30ff 	mov.w	r0, #4294967295
 811b1aa:	bd38      	pop	{r3, r4, r5, pc}
 811b1ac:	6c42      	ldr	r2, [r0, #68]	; 0x44
 811b1ae:	b112      	cbz	r2, 811b1b6 <_raise_r+0x1e>
 811b1b0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 811b1b4:	b94b      	cbnz	r3, 811b1ca <_raise_r+0x32>
 811b1b6:	4620      	mov	r0, r4
 811b1b8:	f000 f830 	bl	811b21c <_getpid_r>
 811b1bc:	462a      	mov	r2, r5
 811b1be:	4601      	mov	r1, r0
 811b1c0:	4620      	mov	r0, r4
 811b1c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 811b1c6:	f000 b817 	b.w	811b1f8 <_kill_r>
 811b1ca:	2b01      	cmp	r3, #1
 811b1cc:	d00a      	beq.n	811b1e4 <_raise_r+0x4c>
 811b1ce:	1c59      	adds	r1, r3, #1
 811b1d0:	d103      	bne.n	811b1da <_raise_r+0x42>
 811b1d2:	2316      	movs	r3, #22
 811b1d4:	6003      	str	r3, [r0, #0]
 811b1d6:	2001      	movs	r0, #1
 811b1d8:	e7e7      	b.n	811b1aa <_raise_r+0x12>
 811b1da:	2400      	movs	r4, #0
 811b1dc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 811b1e0:	4628      	mov	r0, r5
 811b1e2:	4798      	blx	r3
 811b1e4:	2000      	movs	r0, #0
 811b1e6:	e7e0      	b.n	811b1aa <_raise_r+0x12>

0811b1e8 <raise>:
 811b1e8:	4b02      	ldr	r3, [pc, #8]	; (811b1f4 <raise+0xc>)
 811b1ea:	4601      	mov	r1, r0
 811b1ec:	6818      	ldr	r0, [r3, #0]
 811b1ee:	f7ff bfd3 	b.w	811b198 <_raise_r>
 811b1f2:	bf00      	nop
 811b1f4:	10000188 	.word	0x10000188

0811b1f8 <_kill_r>:
 811b1f8:	b538      	push	{r3, r4, r5, lr}
 811b1fa:	4d07      	ldr	r5, [pc, #28]	; (811b218 <_kill_r+0x20>)
 811b1fc:	2300      	movs	r3, #0
 811b1fe:	4604      	mov	r4, r0
 811b200:	4608      	mov	r0, r1
 811b202:	4611      	mov	r1, r2
 811b204:	602b      	str	r3, [r5, #0]
 811b206:	f7e7 f80d 	bl	8102224 <_kill>
 811b20a:	1c43      	adds	r3, r0, #1
 811b20c:	d102      	bne.n	811b214 <_kill_r+0x1c>
 811b20e:	682b      	ldr	r3, [r5, #0]
 811b210:	b103      	cbz	r3, 811b214 <_kill_r+0x1c>
 811b212:	6023      	str	r3, [r4, #0]
 811b214:	bd38      	pop	{r3, r4, r5, pc}
 811b216:	bf00      	nop
 811b218:	10008f34 	.word	0x10008f34

0811b21c <_getpid_r>:
 811b21c:	f7e6 bffa 	b.w	8102214 <_getpid>

0811b220 <__sread>:
 811b220:	b510      	push	{r4, lr}
 811b222:	460c      	mov	r4, r1
 811b224:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 811b228:	f000 f894 	bl	811b354 <_read_r>
 811b22c:	2800      	cmp	r0, #0
 811b22e:	bfab      	itete	ge
 811b230:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 811b232:	89a3      	ldrhlt	r3, [r4, #12]
 811b234:	181b      	addge	r3, r3, r0
 811b236:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 811b23a:	bfac      	ite	ge
 811b23c:	6563      	strge	r3, [r4, #84]	; 0x54
 811b23e:	81a3      	strhlt	r3, [r4, #12]
 811b240:	bd10      	pop	{r4, pc}

0811b242 <__swrite>:
 811b242:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 811b246:	461f      	mov	r7, r3
 811b248:	898b      	ldrh	r3, [r1, #12]
 811b24a:	05db      	lsls	r3, r3, #23
 811b24c:	4605      	mov	r5, r0
 811b24e:	460c      	mov	r4, r1
 811b250:	4616      	mov	r6, r2
 811b252:	d505      	bpl.n	811b260 <__swrite+0x1e>
 811b254:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 811b258:	2302      	movs	r3, #2
 811b25a:	2200      	movs	r2, #0
 811b25c:	f000 f868 	bl	811b330 <_lseek_r>
 811b260:	89a3      	ldrh	r3, [r4, #12]
 811b262:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 811b266:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 811b26a:	81a3      	strh	r3, [r4, #12]
 811b26c:	4632      	mov	r2, r6
 811b26e:	463b      	mov	r3, r7
 811b270:	4628      	mov	r0, r5
 811b272:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 811b276:	f000 b817 	b.w	811b2a8 <_write_r>

0811b27a <__sseek>:
 811b27a:	b510      	push	{r4, lr}
 811b27c:	460c      	mov	r4, r1
 811b27e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 811b282:	f000 f855 	bl	811b330 <_lseek_r>
 811b286:	1c43      	adds	r3, r0, #1
 811b288:	89a3      	ldrh	r3, [r4, #12]
 811b28a:	bf15      	itete	ne
 811b28c:	6560      	strne	r0, [r4, #84]	; 0x54
 811b28e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 811b292:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 811b296:	81a3      	strheq	r3, [r4, #12]
 811b298:	bf18      	it	ne
 811b29a:	81a3      	strhne	r3, [r4, #12]
 811b29c:	bd10      	pop	{r4, pc}

0811b29e <__sclose>:
 811b29e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 811b2a2:	f000 b813 	b.w	811b2cc <_close_r>
	...

0811b2a8 <_write_r>:
 811b2a8:	b538      	push	{r3, r4, r5, lr}
 811b2aa:	4d07      	ldr	r5, [pc, #28]	; (811b2c8 <_write_r+0x20>)
 811b2ac:	4604      	mov	r4, r0
 811b2ae:	4608      	mov	r0, r1
 811b2b0:	4611      	mov	r1, r2
 811b2b2:	2200      	movs	r2, #0
 811b2b4:	602a      	str	r2, [r5, #0]
 811b2b6:	461a      	mov	r2, r3
 811b2b8:	f7e6 ffeb 	bl	8102292 <_write>
 811b2bc:	1c43      	adds	r3, r0, #1
 811b2be:	d102      	bne.n	811b2c6 <_write_r+0x1e>
 811b2c0:	682b      	ldr	r3, [r5, #0]
 811b2c2:	b103      	cbz	r3, 811b2c6 <_write_r+0x1e>
 811b2c4:	6023      	str	r3, [r4, #0]
 811b2c6:	bd38      	pop	{r3, r4, r5, pc}
 811b2c8:	10008f34 	.word	0x10008f34

0811b2cc <_close_r>:
 811b2cc:	b538      	push	{r3, r4, r5, lr}
 811b2ce:	4d06      	ldr	r5, [pc, #24]	; (811b2e8 <_close_r+0x1c>)
 811b2d0:	2300      	movs	r3, #0
 811b2d2:	4604      	mov	r4, r0
 811b2d4:	4608      	mov	r0, r1
 811b2d6:	602b      	str	r3, [r5, #0]
 811b2d8:	f7e6 fff7 	bl	81022ca <_close>
 811b2dc:	1c43      	adds	r3, r0, #1
 811b2de:	d102      	bne.n	811b2e6 <_close_r+0x1a>
 811b2e0:	682b      	ldr	r3, [r5, #0]
 811b2e2:	b103      	cbz	r3, 811b2e6 <_close_r+0x1a>
 811b2e4:	6023      	str	r3, [r4, #0]
 811b2e6:	bd38      	pop	{r3, r4, r5, pc}
 811b2e8:	10008f34 	.word	0x10008f34

0811b2ec <_fstat_r>:
 811b2ec:	b538      	push	{r3, r4, r5, lr}
 811b2ee:	4d07      	ldr	r5, [pc, #28]	; (811b30c <_fstat_r+0x20>)
 811b2f0:	2300      	movs	r3, #0
 811b2f2:	4604      	mov	r4, r0
 811b2f4:	4608      	mov	r0, r1
 811b2f6:	4611      	mov	r1, r2
 811b2f8:	602b      	str	r3, [r5, #0]
 811b2fa:	f7e6 fff2 	bl	81022e2 <_fstat>
 811b2fe:	1c43      	adds	r3, r0, #1
 811b300:	d102      	bne.n	811b308 <_fstat_r+0x1c>
 811b302:	682b      	ldr	r3, [r5, #0]
 811b304:	b103      	cbz	r3, 811b308 <_fstat_r+0x1c>
 811b306:	6023      	str	r3, [r4, #0]
 811b308:	bd38      	pop	{r3, r4, r5, pc}
 811b30a:	bf00      	nop
 811b30c:	10008f34 	.word	0x10008f34

0811b310 <_isatty_r>:
 811b310:	b538      	push	{r3, r4, r5, lr}
 811b312:	4d06      	ldr	r5, [pc, #24]	; (811b32c <_isatty_r+0x1c>)
 811b314:	2300      	movs	r3, #0
 811b316:	4604      	mov	r4, r0
 811b318:	4608      	mov	r0, r1
 811b31a:	602b      	str	r3, [r5, #0]
 811b31c:	f7e6 fff1 	bl	8102302 <_isatty>
 811b320:	1c43      	adds	r3, r0, #1
 811b322:	d102      	bne.n	811b32a <_isatty_r+0x1a>
 811b324:	682b      	ldr	r3, [r5, #0]
 811b326:	b103      	cbz	r3, 811b32a <_isatty_r+0x1a>
 811b328:	6023      	str	r3, [r4, #0]
 811b32a:	bd38      	pop	{r3, r4, r5, pc}
 811b32c:	10008f34 	.word	0x10008f34

0811b330 <_lseek_r>:
 811b330:	b538      	push	{r3, r4, r5, lr}
 811b332:	4d07      	ldr	r5, [pc, #28]	; (811b350 <_lseek_r+0x20>)
 811b334:	4604      	mov	r4, r0
 811b336:	4608      	mov	r0, r1
 811b338:	4611      	mov	r1, r2
 811b33a:	2200      	movs	r2, #0
 811b33c:	602a      	str	r2, [r5, #0]
 811b33e:	461a      	mov	r2, r3
 811b340:	f7e6 ffea 	bl	8102318 <_lseek>
 811b344:	1c43      	adds	r3, r0, #1
 811b346:	d102      	bne.n	811b34e <_lseek_r+0x1e>
 811b348:	682b      	ldr	r3, [r5, #0]
 811b34a:	b103      	cbz	r3, 811b34e <_lseek_r+0x1e>
 811b34c:	6023      	str	r3, [r4, #0]
 811b34e:	bd38      	pop	{r3, r4, r5, pc}
 811b350:	10008f34 	.word	0x10008f34

0811b354 <_read_r>:
 811b354:	b538      	push	{r3, r4, r5, lr}
 811b356:	4d07      	ldr	r5, [pc, #28]	; (811b374 <_read_r+0x20>)
 811b358:	4604      	mov	r4, r0
 811b35a:	4608      	mov	r0, r1
 811b35c:	4611      	mov	r1, r2
 811b35e:	2200      	movs	r2, #0
 811b360:	602a      	str	r2, [r5, #0]
 811b362:	461a      	mov	r2, r3
 811b364:	f7e6 ff78 	bl	8102258 <_read>
 811b368:	1c43      	adds	r3, r0, #1
 811b36a:	d102      	bne.n	811b372 <_read_r+0x1e>
 811b36c:	682b      	ldr	r3, [r5, #0]
 811b36e:	b103      	cbz	r3, 811b372 <_read_r+0x1e>
 811b370:	6023      	str	r3, [r4, #0]
 811b372:	bd38      	pop	{r3, r4, r5, pc}
 811b374:	10008f34 	.word	0x10008f34

0811b378 <_init>:
 811b378:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 811b37a:	bf00      	nop
 811b37c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 811b37e:	bc08      	pop	{r3}
 811b380:	469e      	mov	lr, r3
 811b382:	4770      	bx	lr

0811b384 <_fini>:
 811b384:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 811b386:	bf00      	nop
 811b388:	bcf8      	pop	{r3, r4, r5, r6, r7}
 811b38a:	bc08      	pop	{r3}
 811b38c:	469e      	mov	lr, r3
 811b38e:	4770      	bx	lr
