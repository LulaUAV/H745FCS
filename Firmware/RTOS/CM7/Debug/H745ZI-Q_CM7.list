
H745ZI-Q_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a734  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  0800a9d4  0800a9d4  0001a9d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800aa5c  0800aa5c  0001aa5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800aa64  0800aa64  0001aa64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800aa68  0800aa68  0001aa68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000014  20000000  0800aa6c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00004b40  20000014  0800aa80  00020014  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  20004b54  0800aa80  00024b54  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 10 .debug_info   000305aa  00000000  00000000  00020042  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00004fcb  00000000  00000000  000505ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000019d8  00000000  00000000  000555b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001840  00000000  00000000  00056f90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003c748  00000000  00000000  000587d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001ff07  00000000  00000000  00094f18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0018c981  00000000  00000000  000b4e1f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  002417a0  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00006c4c  00000000  00000000  002417f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	20000014 	.word	0x20000014
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800a9bc 	.word	0x0800a9bc

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	20000018 	.word	0x20000018
 80002dc:	0800a9bc 	.word	0x0800a9bc

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b96e 	b.w	80005d4 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468c      	mov	ip, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	f040 8083 	bne.w	8000426 <__udivmoddi4+0x116>
 8000320:	428a      	cmp	r2, r1
 8000322:	4617      	mov	r7, r2
 8000324:	d947      	bls.n	80003b6 <__udivmoddi4+0xa6>
 8000326:	fab2 f282 	clz	r2, r2
 800032a:	b142      	cbz	r2, 800033e <__udivmoddi4+0x2e>
 800032c:	f1c2 0020 	rsb	r0, r2, #32
 8000330:	fa24 f000 	lsr.w	r0, r4, r0
 8000334:	4091      	lsls	r1, r2
 8000336:	4097      	lsls	r7, r2
 8000338:	ea40 0c01 	orr.w	ip, r0, r1
 800033c:	4094      	lsls	r4, r2
 800033e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000342:	0c23      	lsrs	r3, r4, #16
 8000344:	fbbc f6f8 	udiv	r6, ip, r8
 8000348:	fa1f fe87 	uxth.w	lr, r7
 800034c:	fb08 c116 	mls	r1, r8, r6, ip
 8000350:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000354:	fb06 f10e 	mul.w	r1, r6, lr
 8000358:	4299      	cmp	r1, r3
 800035a:	d909      	bls.n	8000370 <__udivmoddi4+0x60>
 800035c:	18fb      	adds	r3, r7, r3
 800035e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000362:	f080 8119 	bcs.w	8000598 <__udivmoddi4+0x288>
 8000366:	4299      	cmp	r1, r3
 8000368:	f240 8116 	bls.w	8000598 <__udivmoddi4+0x288>
 800036c:	3e02      	subs	r6, #2
 800036e:	443b      	add	r3, r7
 8000370:	1a5b      	subs	r3, r3, r1
 8000372:	b2a4      	uxth	r4, r4
 8000374:	fbb3 f0f8 	udiv	r0, r3, r8
 8000378:	fb08 3310 	mls	r3, r8, r0, r3
 800037c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000380:	fb00 fe0e 	mul.w	lr, r0, lr
 8000384:	45a6      	cmp	lr, r4
 8000386:	d909      	bls.n	800039c <__udivmoddi4+0x8c>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f100 33ff 	add.w	r3, r0, #4294967295
 800038e:	f080 8105 	bcs.w	800059c <__udivmoddi4+0x28c>
 8000392:	45a6      	cmp	lr, r4
 8000394:	f240 8102 	bls.w	800059c <__udivmoddi4+0x28c>
 8000398:	3802      	subs	r0, #2
 800039a:	443c      	add	r4, r7
 800039c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a0:	eba4 040e 	sub.w	r4, r4, lr
 80003a4:	2600      	movs	r6, #0
 80003a6:	b11d      	cbz	r5, 80003b0 <__udivmoddi4+0xa0>
 80003a8:	40d4      	lsrs	r4, r2
 80003aa:	2300      	movs	r3, #0
 80003ac:	e9c5 4300 	strd	r4, r3, [r5]
 80003b0:	4631      	mov	r1, r6
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	b902      	cbnz	r2, 80003ba <__udivmoddi4+0xaa>
 80003b8:	deff      	udf	#255	; 0xff
 80003ba:	fab2 f282 	clz	r2, r2
 80003be:	2a00      	cmp	r2, #0
 80003c0:	d150      	bne.n	8000464 <__udivmoddi4+0x154>
 80003c2:	1bcb      	subs	r3, r1, r7
 80003c4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c8:	fa1f f887 	uxth.w	r8, r7
 80003cc:	2601      	movs	r6, #1
 80003ce:	fbb3 fcfe 	udiv	ip, r3, lr
 80003d2:	0c21      	lsrs	r1, r4, #16
 80003d4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003d8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003dc:	fb08 f30c 	mul.w	r3, r8, ip
 80003e0:	428b      	cmp	r3, r1
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0xe4>
 80003e4:	1879      	adds	r1, r7, r1
 80003e6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0xe2>
 80003ec:	428b      	cmp	r3, r1
 80003ee:	f200 80e9 	bhi.w	80005c4 <__udivmoddi4+0x2b4>
 80003f2:	4684      	mov	ip, r0
 80003f4:	1ac9      	subs	r1, r1, r3
 80003f6:	b2a3      	uxth	r3, r4
 80003f8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003fc:	fb0e 1110 	mls	r1, lr, r0, r1
 8000400:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000404:	fb08 f800 	mul.w	r8, r8, r0
 8000408:	45a0      	cmp	r8, r4
 800040a:	d907      	bls.n	800041c <__udivmoddi4+0x10c>
 800040c:	193c      	adds	r4, r7, r4
 800040e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x10a>
 8000414:	45a0      	cmp	r8, r4
 8000416:	f200 80d9 	bhi.w	80005cc <__udivmoddi4+0x2bc>
 800041a:	4618      	mov	r0, r3
 800041c:	eba4 0408 	sub.w	r4, r4, r8
 8000420:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000424:	e7bf      	b.n	80003a6 <__udivmoddi4+0x96>
 8000426:	428b      	cmp	r3, r1
 8000428:	d909      	bls.n	800043e <__udivmoddi4+0x12e>
 800042a:	2d00      	cmp	r5, #0
 800042c:	f000 80b1 	beq.w	8000592 <__udivmoddi4+0x282>
 8000430:	2600      	movs	r6, #0
 8000432:	e9c5 0100 	strd	r0, r1, [r5]
 8000436:	4630      	mov	r0, r6
 8000438:	4631      	mov	r1, r6
 800043a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800043e:	fab3 f683 	clz	r6, r3
 8000442:	2e00      	cmp	r6, #0
 8000444:	d14a      	bne.n	80004dc <__udivmoddi4+0x1cc>
 8000446:	428b      	cmp	r3, r1
 8000448:	d302      	bcc.n	8000450 <__udivmoddi4+0x140>
 800044a:	4282      	cmp	r2, r0
 800044c:	f200 80b8 	bhi.w	80005c0 <__udivmoddi4+0x2b0>
 8000450:	1a84      	subs	r4, r0, r2
 8000452:	eb61 0103 	sbc.w	r1, r1, r3
 8000456:	2001      	movs	r0, #1
 8000458:	468c      	mov	ip, r1
 800045a:	2d00      	cmp	r5, #0
 800045c:	d0a8      	beq.n	80003b0 <__udivmoddi4+0xa0>
 800045e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000462:	e7a5      	b.n	80003b0 <__udivmoddi4+0xa0>
 8000464:	f1c2 0320 	rsb	r3, r2, #32
 8000468:	fa20 f603 	lsr.w	r6, r0, r3
 800046c:	4097      	lsls	r7, r2
 800046e:	fa01 f002 	lsl.w	r0, r1, r2
 8000472:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000476:	40d9      	lsrs	r1, r3
 8000478:	4330      	orrs	r0, r6
 800047a:	0c03      	lsrs	r3, r0, #16
 800047c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000480:	fa1f f887 	uxth.w	r8, r7
 8000484:	fb0e 1116 	mls	r1, lr, r6, r1
 8000488:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800048c:	fb06 f108 	mul.w	r1, r6, r8
 8000490:	4299      	cmp	r1, r3
 8000492:	fa04 f402 	lsl.w	r4, r4, r2
 8000496:	d909      	bls.n	80004ac <__udivmoddi4+0x19c>
 8000498:	18fb      	adds	r3, r7, r3
 800049a:	f106 3cff 	add.w	ip, r6, #4294967295
 800049e:	f080 808d 	bcs.w	80005bc <__udivmoddi4+0x2ac>
 80004a2:	4299      	cmp	r1, r3
 80004a4:	f240 808a 	bls.w	80005bc <__udivmoddi4+0x2ac>
 80004a8:	3e02      	subs	r6, #2
 80004aa:	443b      	add	r3, r7
 80004ac:	1a5b      	subs	r3, r3, r1
 80004ae:	b281      	uxth	r1, r0
 80004b0:	fbb3 f0fe 	udiv	r0, r3, lr
 80004b4:	fb0e 3310 	mls	r3, lr, r0, r3
 80004b8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004bc:	fb00 f308 	mul.w	r3, r0, r8
 80004c0:	428b      	cmp	r3, r1
 80004c2:	d907      	bls.n	80004d4 <__udivmoddi4+0x1c4>
 80004c4:	1879      	adds	r1, r7, r1
 80004c6:	f100 3cff 	add.w	ip, r0, #4294967295
 80004ca:	d273      	bcs.n	80005b4 <__udivmoddi4+0x2a4>
 80004cc:	428b      	cmp	r3, r1
 80004ce:	d971      	bls.n	80005b4 <__udivmoddi4+0x2a4>
 80004d0:	3802      	subs	r0, #2
 80004d2:	4439      	add	r1, r7
 80004d4:	1acb      	subs	r3, r1, r3
 80004d6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004da:	e778      	b.n	80003ce <__udivmoddi4+0xbe>
 80004dc:	f1c6 0c20 	rsb	ip, r6, #32
 80004e0:	fa03 f406 	lsl.w	r4, r3, r6
 80004e4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004e8:	431c      	orrs	r4, r3
 80004ea:	fa20 f70c 	lsr.w	r7, r0, ip
 80004ee:	fa01 f306 	lsl.w	r3, r1, r6
 80004f2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004f6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004fa:	431f      	orrs	r7, r3
 80004fc:	0c3b      	lsrs	r3, r7, #16
 80004fe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000502:	fa1f f884 	uxth.w	r8, r4
 8000506:	fb0e 1119 	mls	r1, lr, r9, r1
 800050a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800050e:	fb09 fa08 	mul.w	sl, r9, r8
 8000512:	458a      	cmp	sl, r1
 8000514:	fa02 f206 	lsl.w	r2, r2, r6
 8000518:	fa00 f306 	lsl.w	r3, r0, r6
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x220>
 800051e:	1861      	adds	r1, r4, r1
 8000520:	f109 30ff 	add.w	r0, r9, #4294967295
 8000524:	d248      	bcs.n	80005b8 <__udivmoddi4+0x2a8>
 8000526:	458a      	cmp	sl, r1
 8000528:	d946      	bls.n	80005b8 <__udivmoddi4+0x2a8>
 800052a:	f1a9 0902 	sub.w	r9, r9, #2
 800052e:	4421      	add	r1, r4
 8000530:	eba1 010a 	sub.w	r1, r1, sl
 8000534:	b2bf      	uxth	r7, r7
 8000536:	fbb1 f0fe 	udiv	r0, r1, lr
 800053a:	fb0e 1110 	mls	r1, lr, r0, r1
 800053e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000542:	fb00 f808 	mul.w	r8, r0, r8
 8000546:	45b8      	cmp	r8, r7
 8000548:	d907      	bls.n	800055a <__udivmoddi4+0x24a>
 800054a:	19e7      	adds	r7, r4, r7
 800054c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000550:	d22e      	bcs.n	80005b0 <__udivmoddi4+0x2a0>
 8000552:	45b8      	cmp	r8, r7
 8000554:	d92c      	bls.n	80005b0 <__udivmoddi4+0x2a0>
 8000556:	3802      	subs	r0, #2
 8000558:	4427      	add	r7, r4
 800055a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800055e:	eba7 0708 	sub.w	r7, r7, r8
 8000562:	fba0 8902 	umull	r8, r9, r0, r2
 8000566:	454f      	cmp	r7, r9
 8000568:	46c6      	mov	lr, r8
 800056a:	4649      	mov	r1, r9
 800056c:	d31a      	bcc.n	80005a4 <__udivmoddi4+0x294>
 800056e:	d017      	beq.n	80005a0 <__udivmoddi4+0x290>
 8000570:	b15d      	cbz	r5, 800058a <__udivmoddi4+0x27a>
 8000572:	ebb3 020e 	subs.w	r2, r3, lr
 8000576:	eb67 0701 	sbc.w	r7, r7, r1
 800057a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800057e:	40f2      	lsrs	r2, r6
 8000580:	ea4c 0202 	orr.w	r2, ip, r2
 8000584:	40f7      	lsrs	r7, r6
 8000586:	e9c5 2700 	strd	r2, r7, [r5]
 800058a:	2600      	movs	r6, #0
 800058c:	4631      	mov	r1, r6
 800058e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000592:	462e      	mov	r6, r5
 8000594:	4628      	mov	r0, r5
 8000596:	e70b      	b.n	80003b0 <__udivmoddi4+0xa0>
 8000598:	4606      	mov	r6, r0
 800059a:	e6e9      	b.n	8000370 <__udivmoddi4+0x60>
 800059c:	4618      	mov	r0, r3
 800059e:	e6fd      	b.n	800039c <__udivmoddi4+0x8c>
 80005a0:	4543      	cmp	r3, r8
 80005a2:	d2e5      	bcs.n	8000570 <__udivmoddi4+0x260>
 80005a4:	ebb8 0e02 	subs.w	lr, r8, r2
 80005a8:	eb69 0104 	sbc.w	r1, r9, r4
 80005ac:	3801      	subs	r0, #1
 80005ae:	e7df      	b.n	8000570 <__udivmoddi4+0x260>
 80005b0:	4608      	mov	r0, r1
 80005b2:	e7d2      	b.n	800055a <__udivmoddi4+0x24a>
 80005b4:	4660      	mov	r0, ip
 80005b6:	e78d      	b.n	80004d4 <__udivmoddi4+0x1c4>
 80005b8:	4681      	mov	r9, r0
 80005ba:	e7b9      	b.n	8000530 <__udivmoddi4+0x220>
 80005bc:	4666      	mov	r6, ip
 80005be:	e775      	b.n	80004ac <__udivmoddi4+0x19c>
 80005c0:	4630      	mov	r0, r6
 80005c2:	e74a      	b.n	800045a <__udivmoddi4+0x14a>
 80005c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c8:	4439      	add	r1, r7
 80005ca:	e713      	b.n	80003f4 <__udivmoddi4+0xe4>
 80005cc:	3802      	subs	r0, #2
 80005ce:	443c      	add	r4, r7
 80005d0:	e724      	b.n	800041c <__udivmoddi4+0x10c>
 80005d2:	bf00      	nop

080005d4 <__aeabi_idiv0>:
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop

080005d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005d8:	b480      	push	{r7}
 80005da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80005dc:	4b2f      	ldr	r3, [pc, #188]	; (800069c <SystemInit+0xc4>)
 80005de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80005e2:	4a2e      	ldr	r2, [pc, #184]	; (800069c <SystemInit+0xc4>)
 80005e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80005e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Pos;
 80005ec:	4b2b      	ldr	r3, [pc, #172]	; (800069c <SystemInit+0xc4>)
 80005ee:	691b      	ldr	r3, [r3, #16]
 80005f0:	4a2a      	ldr	r2, [pc, #168]	; (800069c <SystemInit+0xc4>)
 80005f2:	f043 0304 	orr.w	r3, r3, #4
 80005f6:	6113      	str	r3, [r2, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80005f8:	4b29      	ldr	r3, [pc, #164]	; (80006a0 <SystemInit+0xc8>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	4a28      	ldr	r2, [pc, #160]	; (80006a0 <SystemInit+0xc8>)
 80005fe:	f043 0301 	orr.w	r3, r3, #1
 8000602:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000604:	4b26      	ldr	r3, [pc, #152]	; (80006a0 <SystemInit+0xc8>)
 8000606:	2200      	movs	r2, #0
 8000608:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800060a:	4b25      	ldr	r3, [pc, #148]	; (80006a0 <SystemInit+0xc8>)
 800060c:	681a      	ldr	r2, [r3, #0]
 800060e:	4924      	ldr	r1, [pc, #144]	; (80006a0 <SystemInit+0xc8>)
 8000610:	4b24      	ldr	r3, [pc, #144]	; (80006a4 <SystemInit+0xcc>)
 8000612:	4013      	ands	r3, r2
 8000614:	600b      	str	r3, [r1, #0]

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000616:	4b22      	ldr	r3, [pc, #136]	; (80006a0 <SystemInit+0xc8>)
 8000618:	2200      	movs	r2, #0
 800061a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800061c:	4b20      	ldr	r3, [pc, #128]	; (80006a0 <SystemInit+0xc8>)
 800061e:	2200      	movs	r2, #0
 8000620:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000622:	4b1f      	ldr	r3, [pc, #124]	; (80006a0 <SystemInit+0xc8>)
 8000624:	2200      	movs	r2, #0
 8000626:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x00000000;
 8000628:	4b1d      	ldr	r3, [pc, #116]	; (80006a0 <SystemInit+0xc8>)
 800062a:	2200      	movs	r2, #0
 800062c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00000000;
 800062e:	4b1c      	ldr	r3, [pc, #112]	; (80006a0 <SystemInit+0xc8>)
 8000630:	2200      	movs	r2, #0
 8000632:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x00000000;
 8000634:	4b1a      	ldr	r3, [pc, #104]	; (80006a0 <SystemInit+0xc8>)
 8000636:	2200      	movs	r2, #0
 8000638:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800063a:	4b19      	ldr	r3, [pc, #100]	; (80006a0 <SystemInit+0xc8>)
 800063c:	2200      	movs	r2, #0
 800063e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x00000000;
 8000640:	4b17      	ldr	r3, [pc, #92]	; (80006a0 <SystemInit+0xc8>)
 8000642:	2200      	movs	r2, #0
 8000644:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000646:	4b16      	ldr	r3, [pc, #88]	; (80006a0 <SystemInit+0xc8>)
 8000648:	2200      	movs	r2, #0
 800064a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x00000000;
 800064c:	4b14      	ldr	r3, [pc, #80]	; (80006a0 <SystemInit+0xc8>)
 800064e:	2200      	movs	r2, #0
 8000650:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000652:	4b13      	ldr	r3, [pc, #76]	; (80006a0 <SystemInit+0xc8>)
 8000654:	2200      	movs	r2, #0
 8000656:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000658:	4b11      	ldr	r3, [pc, #68]	; (80006a0 <SystemInit+0xc8>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	4a10      	ldr	r2, [pc, #64]	; (80006a0 <SystemInit+0xc8>)
 800065e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000662:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000664:	4b0e      	ldr	r3, [pc, #56]	; (80006a0 <SystemInit+0xc8>)
 8000666:	2200      	movs	r2, #0
 8000668:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800066a:	4b0f      	ldr	r3, [pc, #60]	; (80006a8 <SystemInit+0xd0>)
 800066c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800066e:	4a0e      	ldr	r2, [pc, #56]	; (80006a8 <SystemInit+0xd0>)
 8000670:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000674:	6253      	str	r3, [r2, #36]	; 0x24


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000676:	4b0d      	ldr	r3, [pc, #52]	; (80006ac <SystemInit+0xd4>)
 8000678:	681a      	ldr	r2, [r3, #0]
 800067a:	4b0d      	ldr	r3, [pc, #52]	; (80006b0 <SystemInit+0xd8>)
 800067c:	4013      	ands	r3, r2
 800067e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000682:	d202      	bcs.n	800068a <SystemInit+0xb2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000684:	4b0b      	ldr	r3, [pc, #44]	; (80006b4 <SystemInit+0xdc>)
 8000686:	2201      	movs	r2, #1
 8000688:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 800068a:	4b04      	ldr	r3, [pc, #16]	; (800069c <SystemInit+0xc4>)
 800068c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000690:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 8000692:	bf00      	nop
 8000694:	46bd      	mov	sp, r7
 8000696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069a:	4770      	bx	lr
 800069c:	e000ed00 	.word	0xe000ed00
 80006a0:	58024400 	.word	0x58024400
 80006a4:	eaf6ed7f 	.word	0xeaf6ed7f
 80006a8:	580000c0 	.word	0x580000c0
 80006ac:	5c001000 	.word	0x5c001000
 80006b0:	ffff0000 	.word	0xffff0000
 80006b4:	51008108 	.word	0x51008108

080006b8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b082      	sub	sp, #8
 80006bc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80006be:	4b19      	ldr	r3, [pc, #100]	; (8000724 <MX_DMA_Init+0x6c>)
 80006c0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80006c4:	4a17      	ldr	r2, [pc, #92]	; (8000724 <MX_DMA_Init+0x6c>)
 80006c6:	f043 0301 	orr.w	r3, r3, #1
 80006ca:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80006ce:	4b15      	ldr	r3, [pc, #84]	; (8000724 <MX_DMA_Init+0x6c>)
 80006d0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80006d4:	f003 0301 	and.w	r3, r3, #1
 80006d8:	607b      	str	r3, [r7, #4]
 80006da:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80006dc:	4b11      	ldr	r3, [pc, #68]	; (8000724 <MX_DMA_Init+0x6c>)
 80006de:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80006e2:	4a10      	ldr	r2, [pc, #64]	; (8000724 <MX_DMA_Init+0x6c>)
 80006e4:	f043 0302 	orr.w	r3, r3, #2
 80006e8:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80006ec:	4b0d      	ldr	r3, [pc, #52]	; (8000724 <MX_DMA_Init+0x6c>)
 80006ee:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80006f2:	f003 0302 	and.w	r3, r3, #2
 80006f6:	603b      	str	r3, [r7, #0]
 80006f8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 80006fa:	2200      	movs	r2, #0
 80006fc:	2105      	movs	r1, #5
 80006fe:	200d      	movs	r0, #13
 8000700:	f000 fd56 	bl	80011b0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000704:	200d      	movs	r0, #13
 8000706:	f000 fd6d 	bl	80011e4 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 800070a:	2200      	movs	r2, #0
 800070c:	2105      	movs	r1, #5
 800070e:	200e      	movs	r0, #14
 8000710:	f000 fd4e 	bl	80011b0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000714:	200e      	movs	r0, #14
 8000716:	f000 fd65 	bl	80011e4 <HAL_NVIC_EnableIRQ>

}
 800071a:	bf00      	nop
 800071c:	3708      	adds	r7, #8
 800071e:	46bd      	mov	sp, r7
 8000720:	bd80      	pop	{r7, pc}
 8000722:	bf00      	nop
 8000724:	58024400 	.word	0x58024400

08000728 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000728:	b580      	push	{r7, lr}
 800072a:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800072c:	4a04      	ldr	r2, [pc, #16]	; (8000740 <MX_FREERTOS_Init+0x18>)
 800072e:	2100      	movs	r1, #0
 8000730:	4804      	ldr	r0, [pc, #16]	; (8000744 <MX_FREERTOS_Init+0x1c>)
 8000732:	f007 fc01 	bl	8007f38 <osThreadNew>
 8000736:	4603      	mov	r3, r0
 8000738:	4a03      	ldr	r2, [pc, #12]	; (8000748 <MX_FREERTOS_Init+0x20>)
 800073a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 800073c:	bf00      	nop
 800073e:	bd80      	pop	{r7, pc}
 8000740:	0800aa08 	.word	0x0800aa08
 8000744:	0800074d 	.word	0x0800074d
 8000748:	20004940 	.word	0x20004940

0800074c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b082      	sub	sp, #8
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000754:	2001      	movs	r0, #1
 8000756:	f007 fc81 	bl	800805c <osDelay>
 800075a:	e7fb      	b.n	8000754 <StartDefaultTask+0x8>

0800075c <MX_GPIO_Init>:
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
     PB3 (JTDO/TRACESWO)   ------> DEBUG_JTDO-SWO
*/
void MX_GPIO_Init(void)
{
 800075c:	b480      	push	{r7}
 800075e:	b085      	sub	sp, #20
 8000760:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000762:	4b21      	ldr	r3, [pc, #132]	; (80007e8 <MX_GPIO_Init+0x8c>)
 8000764:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000768:	4a1f      	ldr	r2, [pc, #124]	; (80007e8 <MX_GPIO_Init+0x8c>)
 800076a:	f043 0320 	orr.w	r3, r3, #32
 800076e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000772:	4b1d      	ldr	r3, [pc, #116]	; (80007e8 <MX_GPIO_Init+0x8c>)
 8000774:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000778:	f003 0320 	and.w	r3, r3, #32
 800077c:	60fb      	str	r3, [r7, #12]
 800077e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000780:	4b19      	ldr	r3, [pc, #100]	; (80007e8 <MX_GPIO_Init+0x8c>)
 8000782:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000786:	4a18      	ldr	r2, [pc, #96]	; (80007e8 <MX_GPIO_Init+0x8c>)
 8000788:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800078c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000790:	4b15      	ldr	r3, [pc, #84]	; (80007e8 <MX_GPIO_Init+0x8c>)
 8000792:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000796:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800079a:	60bb      	str	r3, [r7, #8]
 800079c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800079e:	4b12      	ldr	r3, [pc, #72]	; (80007e8 <MX_GPIO_Init+0x8c>)
 80007a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007a4:	4a10      	ldr	r2, [pc, #64]	; (80007e8 <MX_GPIO_Init+0x8c>)
 80007a6:	f043 0301 	orr.w	r3, r3, #1
 80007aa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80007ae:	4b0e      	ldr	r3, [pc, #56]	; (80007e8 <MX_GPIO_Init+0x8c>)
 80007b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007b4:	f003 0301 	and.w	r3, r3, #1
 80007b8:	607b      	str	r3, [r7, #4]
 80007ba:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007bc:	4b0a      	ldr	r3, [pc, #40]	; (80007e8 <MX_GPIO_Init+0x8c>)
 80007be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007c2:	4a09      	ldr	r2, [pc, #36]	; (80007e8 <MX_GPIO_Init+0x8c>)
 80007c4:	f043 0302 	orr.w	r3, r3, #2
 80007c8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80007cc:	4b06      	ldr	r3, [pc, #24]	; (80007e8 <MX_GPIO_Init+0x8c>)
 80007ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007d2:	f003 0302 	and.w	r3, r3, #2
 80007d6:	603b      	str	r3, [r7, #0]
 80007d8:	683b      	ldr	r3, [r7, #0]

}
 80007da:	bf00      	nop
 80007dc:	3714      	adds	r7, #20
 80007de:	46bd      	mov	sp, r7
 80007e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e4:	4770      	bx	lr
 80007e6:	bf00      	nop
 80007e8:	58024400 	.word	0x58024400

080007ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b086      	sub	sp, #24
 80007f0:	af00      	add	r7, sp, #0
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80007f2:	4b5a      	ldr	r3, [pc, #360]	; (800095c <main+0x170>)
 80007f4:	695b      	ldr	r3, [r3, #20]
 80007f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d11b      	bne.n	8000836 <main+0x4a>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80007fe:	f3bf 8f4f 	dsb	sy
}
 8000802:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000804:	f3bf 8f6f 	isb	sy
}
 8000808:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800080a:	4b54      	ldr	r3, [pc, #336]	; (800095c <main+0x170>)
 800080c:	2200      	movs	r2, #0
 800080e:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000812:	f3bf 8f4f 	dsb	sy
}
 8000816:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000818:	f3bf 8f6f 	isb	sy
}
 800081c:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800081e:	4b4f      	ldr	r3, [pc, #316]	; (800095c <main+0x170>)
 8000820:	695b      	ldr	r3, [r3, #20]
 8000822:	4a4e      	ldr	r2, [pc, #312]	; (800095c <main+0x170>)
 8000824:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000828:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800082a:	f3bf 8f4f 	dsb	sy
}
 800082e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000830:	f3bf 8f6f 	isb	sy
}
 8000834:	e000      	b.n	8000838 <main+0x4c>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000836:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000838:	4b48      	ldr	r3, [pc, #288]	; (800095c <main+0x170>)
 800083a:	695b      	ldr	r3, [r3, #20]
 800083c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000840:	2b00      	cmp	r3, #0
 8000842:	d138      	bne.n	80008b6 <main+0xca>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8000844:	4b45      	ldr	r3, [pc, #276]	; (800095c <main+0x170>)
 8000846:	2200      	movs	r2, #0
 8000848:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800084c:	f3bf 8f4f 	dsb	sy
}
 8000850:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000852:	4b42      	ldr	r3, [pc, #264]	; (800095c <main+0x170>)
 8000854:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000858:	613b      	str	r3, [r7, #16]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800085a:	693b      	ldr	r3, [r7, #16]
 800085c:	0b5b      	lsrs	r3, r3, #13
 800085e:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000862:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000864:	693b      	ldr	r3, [r7, #16]
 8000866:	08db      	lsrs	r3, r3, #3
 8000868:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800086c:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800086e:	68fb      	ldr	r3, [r7, #12]
 8000870:	015a      	lsls	r2, r3, #5
 8000872:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8000876:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000878:	68ba      	ldr	r2, [r7, #8]
 800087a:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800087c:	4937      	ldr	r1, [pc, #220]	; (800095c <main+0x170>)
 800087e:	4313      	orrs	r3, r2
 8000880:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000884:	68bb      	ldr	r3, [r7, #8]
 8000886:	1e5a      	subs	r2, r3, #1
 8000888:	60ba      	str	r2, [r7, #8]
 800088a:	2b00      	cmp	r3, #0
 800088c:	d1ef      	bne.n	800086e <main+0x82>
    } while(sets-- != 0U);
 800088e:	68fb      	ldr	r3, [r7, #12]
 8000890:	1e5a      	subs	r2, r3, #1
 8000892:	60fa      	str	r2, [r7, #12]
 8000894:	2b00      	cmp	r3, #0
 8000896:	d1e5      	bne.n	8000864 <main+0x78>
  __ASM volatile ("dsb 0xF":::"memory");
 8000898:	f3bf 8f4f 	dsb	sy
}
 800089c:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 800089e:	4b2f      	ldr	r3, [pc, #188]	; (800095c <main+0x170>)
 80008a0:	695b      	ldr	r3, [r3, #20]
 80008a2:	4a2e      	ldr	r2, [pc, #184]	; (800095c <main+0x170>)
 80008a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80008a8:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80008aa:	f3bf 8f4f 	dsb	sy
}
 80008ae:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80008b0:	f3bf 8f6f 	isb	sy
}
 80008b4:	e000      	b.n	80008b8 <main+0xcc>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80008b6:	bf00      	nop
  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 80008b8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80008bc:	617b      	str	r3, [r7, #20]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 80008be:	bf00      	nop
 80008c0:	4b27      	ldr	r3, [pc, #156]	; (8000960 <main+0x174>)
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d004      	beq.n	80008d6 <main+0xea>
 80008cc:	697b      	ldr	r3, [r7, #20]
 80008ce:	1e5a      	subs	r2, r3, #1
 80008d0:	617a      	str	r2, [r7, #20]
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	dcf4      	bgt.n	80008c0 <main+0xd4>
  if ( timeout < 0 )
 80008d6:	697b      	ldr	r3, [r7, #20]
 80008d8:	2b00      	cmp	r3, #0
 80008da:	da01      	bge.n	80008e0 <main+0xf4>
  {
  Error_Handler();
 80008dc:	f000 f90c 	bl	8000af8 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008e0:	f000 fb46 	bl	8000f70 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008e4:	f000 f83e 	bl	8000964 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80008e8:	f000 f8c0 	bl	8000a6c <PeriphCommonClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 80008ec:	4b1c      	ldr	r3, [pc, #112]	; (8000960 <main+0x174>)
 80008ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008f2:	4a1b      	ldr	r2, [pc, #108]	; (8000960 <main+0x174>)
 80008f4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80008f8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80008fc:	4b18      	ldr	r3, [pc, #96]	; (8000960 <main+0x174>)
 80008fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000902:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000906:	607b      	str	r3, [r7, #4]
 8000908:	687b      	ldr	r3, [r7, #4]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 800090a:	2000      	movs	r0, #0
 800090c:	f003 f84c 	bl	80039a8 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8000910:	2100      	movs	r1, #0
 8000912:	2000      	movs	r0, #0
 8000914:	f003 f862 	bl	80039dc <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8000918:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800091c:	617b      	str	r3, [r7, #20]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 800091e:	bf00      	nop
 8000920:	4b0f      	ldr	r3, [pc, #60]	; (8000960 <main+0x174>)
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000928:	2b00      	cmp	r3, #0
 800092a:	d104      	bne.n	8000936 <main+0x14a>
 800092c:	697b      	ldr	r3, [r7, #20]
 800092e:	1e5a      	subs	r2, r3, #1
 8000930:	617a      	str	r2, [r7, #20]
 8000932:	2b00      	cmp	r3, #0
 8000934:	dcf4      	bgt.n	8000920 <main+0x134>
if ( timeout < 0 )
 8000936:	697b      	ldr	r3, [r7, #20]
 8000938:	2b00      	cmp	r3, #0
 800093a:	da01      	bge.n	8000940 <main+0x154>
{
Error_Handler();
 800093c:	f000 f8dc 	bl	8000af8 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000940:	f7ff ff0c 	bl	800075c <MX_GPIO_Init>
  MX_DMA_Init();
 8000944:	f7ff feb8 	bl	80006b8 <MX_DMA_Init>
  MX_UART7_Init();
 8000948:	f000 f9ca 	bl	8000ce0 <MX_UART7_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 800094c:	f007 faaa 	bl	8007ea4 <osKernelInitialize>
  MX_FREERTOS_Init();
 8000950:	f7ff feea 	bl	8000728 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8000954:	f007 faca 	bl	8007eec <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000958:	e7fe      	b.n	8000958 <main+0x16c>
 800095a:	bf00      	nop
 800095c:	e000ed00 	.word	0xe000ed00
 8000960:	58024400 	.word	0x58024400

08000964 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b09c      	sub	sp, #112	; 0x70
 8000968:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800096a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800096e:	224c      	movs	r2, #76	; 0x4c
 8000970:	2100      	movs	r1, #0
 8000972:	4618      	mov	r0, r3
 8000974:	f00a f81a 	bl	800a9ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000978:	1d3b      	adds	r3, r7, #4
 800097a:	2220      	movs	r2, #32
 800097c:	2100      	movs	r1, #0
 800097e:	4618      	mov	r0, r3
 8000980:	f00a f814 	bl	800a9ac <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000984:	2002      	movs	r0, #2
 8000986:	f003 f861 	bl	8003a4c <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800098a:	2300      	movs	r3, #0
 800098c:	603b      	str	r3, [r7, #0]
 800098e:	4b34      	ldr	r3, [pc, #208]	; (8000a60 <SystemClock_Config+0xfc>)
 8000990:	699b      	ldr	r3, [r3, #24]
 8000992:	4a33      	ldr	r2, [pc, #204]	; (8000a60 <SystemClock_Config+0xfc>)
 8000994:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000998:	6193      	str	r3, [r2, #24]
 800099a:	4b31      	ldr	r3, [pc, #196]	; (8000a60 <SystemClock_Config+0xfc>)
 800099c:	699b      	ldr	r3, [r3, #24]
 800099e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80009a2:	603b      	str	r3, [r7, #0]
 80009a4:	4b2f      	ldr	r3, [pc, #188]	; (8000a64 <SystemClock_Config+0x100>)
 80009a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009a8:	4a2e      	ldr	r2, [pc, #184]	; (8000a64 <SystemClock_Config+0x100>)
 80009aa:	f043 0301 	orr.w	r3, r3, #1
 80009ae:	62d3      	str	r3, [r2, #44]	; 0x2c
 80009b0:	4b2c      	ldr	r3, [pc, #176]	; (8000a64 <SystemClock_Config+0x100>)
 80009b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009b4:	f003 0301 	and.w	r3, r3, #1
 80009b8:	603b      	str	r3, [r7, #0]
 80009ba:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80009bc:	bf00      	nop
 80009be:	4b28      	ldr	r3, [pc, #160]	; (8000a60 <SystemClock_Config+0xfc>)
 80009c0:	699b      	ldr	r3, [r3, #24]
 80009c2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80009c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80009ca:	d1f8      	bne.n	80009be <SystemClock_Config+0x5a>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 80009cc:	4b26      	ldr	r3, [pc, #152]	; (8000a68 <SystemClock_Config+0x104>)
 80009ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009d0:	f023 0303 	bic.w	r3, r3, #3
 80009d4:	4a24      	ldr	r2, [pc, #144]	; (8000a68 <SystemClock_Config+0x104>)
 80009d6:	f043 0302 	orr.w	r3, r3, #2
 80009da:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80009dc:	2301      	movs	r3, #1
 80009de:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80009e0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80009e4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009e6:	2302      	movs	r3, #2
 80009e8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009ea:	2302      	movs	r3, #2
 80009ec:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80009ee:	2301      	movs	r3, #1
 80009f0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 60;
 80009f2:	233c      	movs	r3, #60	; 0x3c
 80009f4:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80009f6:	2302      	movs	r3, #2
 80009f8:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 5;
 80009fa:	2305      	movs	r3, #5
 80009fc:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80009fe:	2302      	movs	r3, #2
 8000a00:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000a02:	230c      	movs	r3, #12
 8000a04:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000a06:	2300      	movs	r3, #0
 8000a08:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a0e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a12:	4618      	mov	r0, r3
 8000a14:	f003 f874 	bl	8003b00 <HAL_RCC_OscConfig>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d001      	beq.n	8000a22 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8000a1e:	f000 f86b 	bl	8000af8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a22:	233f      	movs	r3, #63	; 0x3f
 8000a24:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a26:	2303      	movs	r3, #3
 8000a28:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000a2e:	2308      	movs	r3, #8
 8000a30:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000a32:	2340      	movs	r3, #64	; 0x40
 8000a34:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000a36:	2340      	movs	r3, #64	; 0x40
 8000a38:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000a3a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a3e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000a40:	2340      	movs	r3, #64	; 0x40
 8000a42:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000a44:	1d3b      	adds	r3, r7, #4
 8000a46:	2104      	movs	r1, #4
 8000a48:	4618      	mov	r0, r3
 8000a4a:	f003 fc69 	bl	8004320 <HAL_RCC_ClockConfig>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d001      	beq.n	8000a58 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 8000a54:	f000 f850 	bl	8000af8 <Error_Handler>
  }
}
 8000a58:	bf00      	nop
 8000a5a:	3770      	adds	r7, #112	; 0x70
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	bd80      	pop	{r7, pc}
 8000a60:	58024800 	.word	0x58024800
 8000a64:	58000400 	.word	0x58000400
 8000a68:	58024400 	.word	0x58024400

08000a6c <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b0b0      	sub	sp, #192	; 0xc0
 8000a70:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a72:	1d3b      	adds	r3, r7, #4
 8000a74:	22bc      	movs	r2, #188	; 0xbc
 8000a76:	2100      	movs	r1, #0
 8000a78:	4618      	mov	r0, r3
 8000a7a:	f009 ff97 	bl	800a9ac <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_ADC;
 8000a7e:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 8000a82:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLL3.PLL3M = 1;
 8000a84:	2301      	movs	r3, #1
 8000a86:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLL3.PLL3N = 9;
 8000a88:	2309      	movs	r3, #9
 8000a8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInitStruct.PLL3.PLL3P = 2;
 8000a8c:	2302      	movs	r3, #2
 8000a8e:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLL3.PLL3Q = 3;
 8000a90:	2303      	movs	r3, #3
 8000a92:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.PLL3.PLL3R = 2;
 8000a94:	2302      	movs	r3, #2
 8000a96:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 8000a98:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000a9c:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOMEDIUM;
 8000a9e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000aa2:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInitStruct.PLL3.PLL3FRACN = 3072;
 8000aa4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000aa8:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL3;
 8000aaa:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000aae:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL3;
 8000ab2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ab6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000aba:	1d3b      	adds	r3, r7, #4
 8000abc:	4618      	mov	r0, r3
 8000abe:	f003 fffd 	bl	8004abc <HAL_RCCEx_PeriphCLKConfig>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d001      	beq.n	8000acc <PeriphCommonClock_Config+0x60>
  {
    Error_Handler();
 8000ac8:	f000 f816 	bl	8000af8 <Error_Handler>
  }
}
 8000acc:	bf00      	nop
 8000ace:	37c0      	adds	r7, #192	; 0xc0
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	bd80      	pop	{r7, pc}

08000ad4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b082      	sub	sp, #8
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	4a04      	ldr	r2, [pc, #16]	; (8000af4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000ae2:	4293      	cmp	r3, r2
 8000ae4:	d101      	bne.n	8000aea <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000ae6:	f000 fa7f 	bl	8000fe8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000aea:	bf00      	nop
 8000aec:	3708      	adds	r7, #8
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bd80      	pop	{r7, pc}
 8000af2:	bf00      	nop
 8000af4:	40001000 	.word	0x40001000

08000af8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000af8:	b480      	push	{r7}
 8000afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000afc:	bf00      	nop
 8000afe:	46bd      	mov	sp, r7
 8000b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b04:	4770      	bx	lr
	...

08000b08 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b082      	sub	sp, #8
 8000b0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b0e:	4b14      	ldr	r3, [pc, #80]	; (8000b60 <HAL_MspInit+0x58>)
 8000b10:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000b14:	4a12      	ldr	r2, [pc, #72]	; (8000b60 <HAL_MspInit+0x58>)
 8000b16:	f043 0302 	orr.w	r3, r3, #2
 8000b1a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000b1e:	4b10      	ldr	r3, [pc, #64]	; (8000b60 <HAL_MspInit+0x58>)
 8000b20:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000b24:	f003 0302 	and.w	r3, r3, #2
 8000b28:	607b      	str	r3, [r7, #4]
 8000b2a:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	210f      	movs	r1, #15
 8000b30:	f06f 0001 	mvn.w	r0, #1
 8000b34:	f000 fb3c 	bl	80011b0 <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* CM4_SEV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(CM4_SEV_IRQn, 5, 0);
 8000b38:	2200      	movs	r2, #0
 8000b3a:	2105      	movs	r1, #5
 8000b3c:	2041      	movs	r0, #65	; 0x41
 8000b3e:	f000 fb37 	bl	80011b0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CM4_SEV_IRQn);
 8000b42:	2041      	movs	r0, #65	; 0x41
 8000b44:	f000 fb4e 	bl	80011e4 <HAL_NVIC_EnableIRQ>
  /* HSEM1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM1_IRQn, 5, 0);
 8000b48:	2200      	movs	r2, #0
 8000b4a:	2105      	movs	r1, #5
 8000b4c:	207d      	movs	r0, #125	; 0x7d
 8000b4e:	f000 fb2f 	bl	80011b0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM1_IRQn);
 8000b52:	207d      	movs	r0, #125	; 0x7d
 8000b54:	f000 fb46 	bl	80011e4 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b58:	bf00      	nop
 8000b5a:	3708      	adds	r7, #8
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	bd80      	pop	{r7, pc}
 8000b60:	58024400 	.word	0x58024400

08000b64 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b090      	sub	sp, #64	; 0x40
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	2b0f      	cmp	r3, #15
 8000b70:	d827      	bhi.n	8000bc2 <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 8000b72:	2200      	movs	r2, #0
 8000b74:	6879      	ldr	r1, [r7, #4]
 8000b76:	2036      	movs	r0, #54	; 0x36
 8000b78:	f000 fb1a 	bl	80011b0 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000b7c:	2036      	movs	r0, #54	; 0x36
 8000b7e:	f000 fb31 	bl	80011e4 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8000b82:	4a29      	ldr	r2, [pc, #164]	; (8000c28 <HAL_InitTick+0xc4>)
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000b88:	4b28      	ldr	r3, [pc, #160]	; (8000c2c <HAL_InitTick+0xc8>)
 8000b8a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000b8e:	4a27      	ldr	r2, [pc, #156]	; (8000c2c <HAL_InitTick+0xc8>)
 8000b90:	f043 0310 	orr.w	r3, r3, #16
 8000b94:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000b98:	4b24      	ldr	r3, [pc, #144]	; (8000c2c <HAL_InitTick+0xc8>)
 8000b9a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000b9e:	f003 0310 	and.w	r3, r3, #16
 8000ba2:	60fb      	str	r3, [r7, #12]
 8000ba4:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000ba6:	f107 0210 	add.w	r2, r7, #16
 8000baa:	f107 0314 	add.w	r3, r7, #20
 8000bae:	4611      	mov	r1, r2
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	f003 ff41 	bl	8004a38 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000bb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000bb8:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000bba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d106      	bne.n	8000bce <HAL_InitTick+0x6a>
 8000bc0:	e001      	b.n	8000bc6 <HAL_InitTick+0x62>
    return HAL_ERROR;
 8000bc2:	2301      	movs	r3, #1
 8000bc4:	e02b      	b.n	8000c1e <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000bc6:	f003 ff0b 	bl	80049e0 <HAL_RCC_GetPCLK1Freq>
 8000bca:	63f8      	str	r0, [r7, #60]	; 0x3c
 8000bcc:	e004      	b.n	8000bd8 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000bce:	f003 ff07 	bl	80049e0 <HAL_RCC_GetPCLK1Freq>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	005b      	lsls	r3, r3, #1
 8000bd6:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000bd8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000bda:	4a15      	ldr	r2, [pc, #84]	; (8000c30 <HAL_InitTick+0xcc>)
 8000bdc:	fba2 2303 	umull	r2, r3, r2, r3
 8000be0:	0c9b      	lsrs	r3, r3, #18
 8000be2:	3b01      	subs	r3, #1
 8000be4:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000be6:	4b13      	ldr	r3, [pc, #76]	; (8000c34 <HAL_InitTick+0xd0>)
 8000be8:	4a13      	ldr	r2, [pc, #76]	; (8000c38 <HAL_InitTick+0xd4>)
 8000bea:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000bec:	4b11      	ldr	r3, [pc, #68]	; (8000c34 <HAL_InitTick+0xd0>)
 8000bee:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000bf2:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000bf4:	4a0f      	ldr	r2, [pc, #60]	; (8000c34 <HAL_InitTick+0xd0>)
 8000bf6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000bf8:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000bfa:	4b0e      	ldr	r3, [pc, #56]	; (8000c34 <HAL_InitTick+0xd0>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c00:	4b0c      	ldr	r3, [pc, #48]	; (8000c34 <HAL_InitTick+0xd0>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000c06:	480b      	ldr	r0, [pc, #44]	; (8000c34 <HAL_InitTick+0xd0>)
 8000c08:	f005 faba 	bl	8006180 <HAL_TIM_Base_Init>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d104      	bne.n	8000c1c <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000c12:	4808      	ldr	r0, [pc, #32]	; (8000c34 <HAL_InitTick+0xd0>)
 8000c14:	f005 fb16 	bl	8006244 <HAL_TIM_Base_Start_IT>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	e000      	b.n	8000c1e <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8000c1c:	2301      	movs	r3, #1
}
 8000c1e:	4618      	mov	r0, r3
 8000c20:	3740      	adds	r7, #64	; 0x40
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bd80      	pop	{r7, pc}
 8000c26:	bf00      	nop
 8000c28:	20000008 	.word	0x20000008
 8000c2c:	58024400 	.word	0x58024400
 8000c30:	431bde83 	.word	0x431bde83
 8000c34:	20004944 	.word	0x20004944
 8000c38:	40001000 	.word	0x40001000

08000c3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000c40:	bf00      	nop
 8000c42:	46bd      	mov	sp, r7
 8000c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c48:	4770      	bx	lr

08000c4a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c4a:	b480      	push	{r7}
 8000c4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c4e:	e7fe      	b.n	8000c4e <HardFault_Handler+0x4>

08000c50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c50:	b480      	push	{r7}
 8000c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c54:	e7fe      	b.n	8000c54 <MemManage_Handler+0x4>

08000c56 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c56:	b480      	push	{r7}
 8000c58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c5a:	e7fe      	b.n	8000c5a <BusFault_Handler+0x4>

08000c5c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c60:	e7fe      	b.n	8000c60 <UsageFault_Handler+0x4>

08000c62 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c62:	b480      	push	{r7}
 8000c64:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c66:	bf00      	nop
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6e:	4770      	bx	lr

08000c70 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart7_rx);
 8000c74:	4802      	ldr	r0, [pc, #8]	; (8000c80 <DMA1_Stream2_IRQHandler+0x10>)
 8000c76:	f001 fb81 	bl	800237c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8000c7a:	bf00      	nop
 8000c7c:	bd80      	pop	{r7, pc}
 8000c7e:	bf00      	nop
 8000c80:	20004a98 	.word	0x20004a98

08000c84 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart7_tx);
 8000c88:	4802      	ldr	r0, [pc, #8]	; (8000c94 <DMA1_Stream3_IRQHandler+0x10>)
 8000c8a:	f001 fb77 	bl	800237c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8000c8e:	bf00      	nop
 8000c90:	bd80      	pop	{r7, pc}
 8000c92:	bf00      	nop
 8000c94:	20004a20 	.word	0x20004a20

08000c98 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */
     HAL_TIM_IRQHandler(&htim6);
 8000c9c:	4803      	ldr	r0, [pc, #12]	; (8000cac <TIM6_DAC_IRQHandler+0x14>)
 8000c9e:	f005 fb41 	bl	8006324 <HAL_TIM_IRQHandler>
  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000ca2:	4802      	ldr	r0, [pc, #8]	; (8000cac <TIM6_DAC_IRQHandler+0x14>)
 8000ca4:	f005 fb3e 	bl	8006324 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000ca8:	bf00      	nop
 8000caa:	bd80      	pop	{r7, pc}
 8000cac:	20004944 	.word	0x20004944

08000cb0 <CM4_SEV_IRQHandler>:

/**
  * @brief This function handles CM4 send event interrupt for CM7.
  */
void CM4_SEV_IRQHandler(void)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	af00      	add	r7, sp, #0

  /* USER CODE END CM4_SEV_IRQn 0 */
  /* USER CODE BEGIN CM4_SEV_IRQn 1 */

  /* USER CODE END CM4_SEV_IRQn 1 */
}
 8000cb4:	bf00      	nop
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbc:	4770      	bx	lr
	...

08000cc0 <UART7_IRQHandler>:

/**
  * @brief This function handles UART7 global interrupt.
  */
void UART7_IRQHandler(void)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART7_IRQn 0 */

  /* USER CODE END UART7_IRQn 0 */
  HAL_UART_IRQHandler(&huart7);
 8000cc4:	4802      	ldr	r0, [pc, #8]	; (8000cd0 <UART7_IRQHandler+0x10>)
 8000cc6:	f005 fd7d 	bl	80067c4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART7_IRQn 1 */

  /* USER CODE END UART7_IRQn 1 */
}
 8000cca:	bf00      	nop
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	bf00      	nop
 8000cd0:	20004990 	.word	0x20004990

08000cd4 <HSEM1_IRQHandler>:

/**
  * @brief This function handles HSEM1 global interrupt.
  */
void HSEM1_IRQHandler(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM1_IRQn 0 */

  /* USER CODE END HSEM1_IRQn 0 */
  HAL_HSEM_IRQHandler();
 8000cd8:	f002 fe94 	bl	8003a04 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM1_IRQn 1 */

  /* USER CODE END HSEM1_IRQn 1 */
}
 8000cdc:	bf00      	nop
 8000cde:	bd80      	pop	{r7, pc}

08000ce0 <MX_UART7_Init>:
DMA_HandleTypeDef hdma_uart7_rx;
DMA_HandleTypeDef hdma_uart7_tx;

/* UART7 init function */
void MX_UART7_Init(void)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8000ce4:	4b22      	ldr	r3, [pc, #136]	; (8000d70 <MX_UART7_Init+0x90>)
 8000ce6:	4a23      	ldr	r2, [pc, #140]	; (8000d74 <MX_UART7_Init+0x94>)
 8000ce8:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 921600;
 8000cea:	4b21      	ldr	r3, [pc, #132]	; (8000d70 <MX_UART7_Init+0x90>)
 8000cec:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 8000cf0:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8000cf2:	4b1f      	ldr	r3, [pc, #124]	; (8000d70 <MX_UART7_Init+0x90>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8000cf8:	4b1d      	ldr	r3, [pc, #116]	; (8000d70 <MX_UART7_Init+0x90>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8000cfe:	4b1c      	ldr	r3, [pc, #112]	; (8000d70 <MX_UART7_Init+0x90>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8000d04:	4b1a      	ldr	r3, [pc, #104]	; (8000d70 <MX_UART7_Init+0x90>)
 8000d06:	220c      	movs	r2, #12
 8000d08:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d0a:	4b19      	ldr	r3, [pc, #100]	; (8000d70 <MX_UART7_Init+0x90>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d10:	4b17      	ldr	r3, [pc, #92]	; (8000d70 <MX_UART7_Init+0x90>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d16:	4b16      	ldr	r3, [pc, #88]	; (8000d70 <MX_UART7_Init+0x90>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	621a      	str	r2, [r3, #32]
  huart7.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000d1c:	4b14      	ldr	r3, [pc, #80]	; (8000d70 <MX_UART7_Init+0x90>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	625a      	str	r2, [r3, #36]	; 0x24
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d22:	4b13      	ldr	r3, [pc, #76]	; (8000d70 <MX_UART7_Init+0x90>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8000d28:	4811      	ldr	r0, [pc, #68]	; (8000d70 <MX_UART7_Init+0x90>)
 8000d2a:	f005 fcfb 	bl	8006724 <HAL_UART_Init>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d001      	beq.n	8000d38 <MX_UART7_Init+0x58>
  {
    Error_Handler();
 8000d34:	f7ff fee0 	bl	8000af8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart7, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d38:	2100      	movs	r1, #0
 8000d3a:	480d      	ldr	r0, [pc, #52]	; (8000d70 <MX_UART7_Init+0x90>)
 8000d3c:	f006 ffa3 	bl	8007c86 <HAL_UARTEx_SetTxFifoThreshold>
 8000d40:	4603      	mov	r3, r0
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d001      	beq.n	8000d4a <MX_UART7_Init+0x6a>
  {
    Error_Handler();
 8000d46:	f7ff fed7 	bl	8000af8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart7, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d4a:	2100      	movs	r1, #0
 8000d4c:	4808      	ldr	r0, [pc, #32]	; (8000d70 <MX_UART7_Init+0x90>)
 8000d4e:	f006 ffd8 	bl	8007d02 <HAL_UARTEx_SetRxFifoThreshold>
 8000d52:	4603      	mov	r3, r0
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d001      	beq.n	8000d5c <MX_UART7_Init+0x7c>
  {
    Error_Handler();
 8000d58:	f7ff fece 	bl	8000af8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart7) != HAL_OK)
 8000d5c:	4804      	ldr	r0, [pc, #16]	; (8000d70 <MX_UART7_Init+0x90>)
 8000d5e:	f006 ff59 	bl	8007c14 <HAL_UARTEx_DisableFifoMode>
 8000d62:	4603      	mov	r3, r0
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d001      	beq.n	8000d6c <MX_UART7_Init+0x8c>
  {
    Error_Handler();
 8000d68:	f7ff fec6 	bl	8000af8 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 8000d6c:	bf00      	nop
 8000d6e:	bd80      	pop	{r7, pc}
 8000d70:	20004990 	.word	0x20004990
 8000d74:	40007800 	.word	0x40007800

08000d78 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b0b8      	sub	sp, #224	; 0xe0
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d80:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000d84:	2200      	movs	r2, #0
 8000d86:	601a      	str	r2, [r3, #0]
 8000d88:	605a      	str	r2, [r3, #4]
 8000d8a:	609a      	str	r2, [r3, #8]
 8000d8c:	60da      	str	r2, [r3, #12]
 8000d8e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d90:	f107 0310 	add.w	r3, r7, #16
 8000d94:	22bc      	movs	r2, #188	; 0xbc
 8000d96:	2100      	movs	r1, #0
 8000d98:	4618      	mov	r0, r3
 8000d9a:	f009 fe07 	bl	800a9ac <memset>
  if(uartHandle->Instance==UART7)
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	4a57      	ldr	r2, [pc, #348]	; (8000f00 <HAL_UART_MspInit+0x188>)
 8000da4:	4293      	cmp	r3, r2
 8000da6:	f040 80a7 	bne.w	8000ef8 <HAL_UART_MspInit+0x180>
  /* USER CODE BEGIN UART7_MspInit 0 */

  /* USER CODE END UART7_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 8000daa:	2302      	movs	r3, #2
 8000dac:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000dae:	2300      	movs	r3, #0
 8000db0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000db4:	f107 0310 	add.w	r3, r7, #16
 8000db8:	4618      	mov	r0, r3
 8000dba:	f003 fe7f 	bl	8004abc <HAL_RCCEx_PeriphCLKConfig>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d001      	beq.n	8000dc8 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 8000dc4:	f7ff fe98 	bl	8000af8 <Error_Handler>
    }

    /* UART7 clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 8000dc8:	4b4e      	ldr	r3, [pc, #312]	; (8000f04 <HAL_UART_MspInit+0x18c>)
 8000dca:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000dce:	4a4d      	ldr	r2, [pc, #308]	; (8000f04 <HAL_UART_MspInit+0x18c>)
 8000dd0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8000dd4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000dd8:	4b4a      	ldr	r3, [pc, #296]	; (8000f04 <HAL_UART_MspInit+0x18c>)
 8000dda:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000dde:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8000de2:	60fb      	str	r3, [r7, #12]
 8000de4:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000de6:	4b47      	ldr	r3, [pc, #284]	; (8000f04 <HAL_UART_MspInit+0x18c>)
 8000de8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dec:	4a45      	ldr	r2, [pc, #276]	; (8000f04 <HAL_UART_MspInit+0x18c>)
 8000dee:	f043 0320 	orr.w	r3, r3, #32
 8000df2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000df6:	4b43      	ldr	r3, [pc, #268]	; (8000f04 <HAL_UART_MspInit+0x18c>)
 8000df8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dfc:	f003 0320 	and.w	r3, r3, #32
 8000e00:	60bb      	str	r3, [r7, #8]
 8000e02:	68bb      	ldr	r3, [r7, #8]
    /**UART7 GPIO Configuration
    PF6     ------> UART7_RX
    PF7     ------> UART7_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000e04:	23c0      	movs	r3, #192	; 0xc0
 8000e06:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e0a:	2302      	movs	r3, #2
 8000e0c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e10:	2300      	movs	r3, #0
 8000e12:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e16:	2300      	movs	r3, #0
 8000e18:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_UART7;
 8000e1c:	2307      	movs	r3, #7
 8000e1e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000e22:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000e26:	4619      	mov	r1, r3
 8000e28:	4837      	ldr	r0, [pc, #220]	; (8000f08 <HAL_UART_MspInit+0x190>)
 8000e2a:	f002 fc0d 	bl	8003648 <HAL_GPIO_Init>

    /* UART7 DMA Init */
    /* UART7_RX Init */
    hdma_uart7_rx.Instance = DMA1_Stream2;
 8000e2e:	4b37      	ldr	r3, [pc, #220]	; (8000f0c <HAL_UART_MspInit+0x194>)
 8000e30:	4a37      	ldr	r2, [pc, #220]	; (8000f10 <HAL_UART_MspInit+0x198>)
 8000e32:	601a      	str	r2, [r3, #0]
    hdma_uart7_rx.Init.Request = DMA_REQUEST_UART7_RX;
 8000e34:	4b35      	ldr	r3, [pc, #212]	; (8000f0c <HAL_UART_MspInit+0x194>)
 8000e36:	224f      	movs	r2, #79	; 0x4f
 8000e38:	605a      	str	r2, [r3, #4]
    hdma_uart7_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000e3a:	4b34      	ldr	r3, [pc, #208]	; (8000f0c <HAL_UART_MspInit+0x194>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	609a      	str	r2, [r3, #8]
    hdma_uart7_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e40:	4b32      	ldr	r3, [pc, #200]	; (8000f0c <HAL_UART_MspInit+0x194>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	60da      	str	r2, [r3, #12]
    hdma_uart7_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000e46:	4b31      	ldr	r3, [pc, #196]	; (8000f0c <HAL_UART_MspInit+0x194>)
 8000e48:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000e4c:	611a      	str	r2, [r3, #16]
    hdma_uart7_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000e4e:	4b2f      	ldr	r3, [pc, #188]	; (8000f0c <HAL_UART_MspInit+0x194>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	615a      	str	r2, [r3, #20]
    hdma_uart7_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000e54:	4b2d      	ldr	r3, [pc, #180]	; (8000f0c <HAL_UART_MspInit+0x194>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	619a      	str	r2, [r3, #24]
    hdma_uart7_rx.Init.Mode = DMA_NORMAL;
 8000e5a:	4b2c      	ldr	r3, [pc, #176]	; (8000f0c <HAL_UART_MspInit+0x194>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	61da      	str	r2, [r3, #28]
    hdma_uart7_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8000e60:	4b2a      	ldr	r3, [pc, #168]	; (8000f0c <HAL_UART_MspInit+0x194>)
 8000e62:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000e66:	621a      	str	r2, [r3, #32]
    hdma_uart7_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000e68:	4b28      	ldr	r3, [pc, #160]	; (8000f0c <HAL_UART_MspInit+0x194>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart7_rx) != HAL_OK)
 8000e6e:	4827      	ldr	r0, [pc, #156]	; (8000f0c <HAL_UART_MspInit+0x194>)
 8000e70:	f000 f9c6 	bl	8001200 <HAL_DMA_Init>
 8000e74:	4603      	mov	r3, r0
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d001      	beq.n	8000e7e <HAL_UART_MspInit+0x106>
    {
      Error_Handler();
 8000e7a:	f7ff fe3d 	bl	8000af8 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart7_rx);
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	4a22      	ldr	r2, [pc, #136]	; (8000f0c <HAL_UART_MspInit+0x194>)
 8000e82:	67da      	str	r2, [r3, #124]	; 0x7c
 8000e84:	4a21      	ldr	r2, [pc, #132]	; (8000f0c <HAL_UART_MspInit+0x194>)
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART7_TX Init */
    hdma_uart7_tx.Instance = DMA1_Stream3;
 8000e8a:	4b22      	ldr	r3, [pc, #136]	; (8000f14 <HAL_UART_MspInit+0x19c>)
 8000e8c:	4a22      	ldr	r2, [pc, #136]	; (8000f18 <HAL_UART_MspInit+0x1a0>)
 8000e8e:	601a      	str	r2, [r3, #0]
    hdma_uart7_tx.Init.Request = DMA_REQUEST_UART7_TX;
 8000e90:	4b20      	ldr	r3, [pc, #128]	; (8000f14 <HAL_UART_MspInit+0x19c>)
 8000e92:	2250      	movs	r2, #80	; 0x50
 8000e94:	605a      	str	r2, [r3, #4]
    hdma_uart7_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000e96:	4b1f      	ldr	r3, [pc, #124]	; (8000f14 <HAL_UART_MspInit+0x19c>)
 8000e98:	2240      	movs	r2, #64	; 0x40
 8000e9a:	609a      	str	r2, [r3, #8]
    hdma_uart7_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e9c:	4b1d      	ldr	r3, [pc, #116]	; (8000f14 <HAL_UART_MspInit+0x19c>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	60da      	str	r2, [r3, #12]
    hdma_uart7_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000ea2:	4b1c      	ldr	r3, [pc, #112]	; (8000f14 <HAL_UART_MspInit+0x19c>)
 8000ea4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000ea8:	611a      	str	r2, [r3, #16]
    hdma_uart7_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000eaa:	4b1a      	ldr	r3, [pc, #104]	; (8000f14 <HAL_UART_MspInit+0x19c>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	615a      	str	r2, [r3, #20]
    hdma_uart7_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000eb0:	4b18      	ldr	r3, [pc, #96]	; (8000f14 <HAL_UART_MspInit+0x19c>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	619a      	str	r2, [r3, #24]
    hdma_uart7_tx.Init.Mode = DMA_CIRCULAR;
 8000eb6:	4b17      	ldr	r3, [pc, #92]	; (8000f14 <HAL_UART_MspInit+0x19c>)
 8000eb8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000ebc:	61da      	str	r2, [r3, #28]
    hdma_uart7_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8000ebe:	4b15      	ldr	r3, [pc, #84]	; (8000f14 <HAL_UART_MspInit+0x19c>)
 8000ec0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000ec4:	621a      	str	r2, [r3, #32]
    hdma_uart7_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000ec6:	4b13      	ldr	r3, [pc, #76]	; (8000f14 <HAL_UART_MspInit+0x19c>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart7_tx) != HAL_OK)
 8000ecc:	4811      	ldr	r0, [pc, #68]	; (8000f14 <HAL_UART_MspInit+0x19c>)
 8000ece:	f000 f997 	bl	8001200 <HAL_DMA_Init>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d001      	beq.n	8000edc <HAL_UART_MspInit+0x164>
    {
      Error_Handler();
 8000ed8:	f7ff fe0e 	bl	8000af8 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_uart7_tx);
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	4a0d      	ldr	r2, [pc, #52]	; (8000f14 <HAL_UART_MspInit+0x19c>)
 8000ee0:	679a      	str	r2, [r3, #120]	; 0x78
 8000ee2:	4a0c      	ldr	r2, [pc, #48]	; (8000f14 <HAL_UART_MspInit+0x19c>)
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART7 interrupt Init */
    HAL_NVIC_SetPriority(UART7_IRQn, 5, 0);
 8000ee8:	2200      	movs	r2, #0
 8000eea:	2105      	movs	r1, #5
 8000eec:	2052      	movs	r0, #82	; 0x52
 8000eee:	f000 f95f 	bl	80011b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
 8000ef2:	2052      	movs	r0, #82	; 0x52
 8000ef4:	f000 f976 	bl	80011e4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART7_MspInit 1 */

  /* USER CODE END UART7_MspInit 1 */
  }
}
 8000ef8:	bf00      	nop
 8000efa:	37e0      	adds	r7, #224	; 0xe0
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bd80      	pop	{r7, pc}
 8000f00:	40007800 	.word	0x40007800
 8000f04:	58024400 	.word	0x58024400
 8000f08:	58021400 	.word	0x58021400
 8000f0c:	20004a98 	.word	0x20004a98
 8000f10:	40020040 	.word	0x40020040
 8000f14:	20004a20 	.word	0x20004a20
 8000f18:	40020058 	.word	0x40020058

08000f1c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000f1c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f54 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000f20:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000f22:	e003      	b.n	8000f2c <LoopCopyDataInit>

08000f24 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000f24:	4b0c      	ldr	r3, [pc, #48]	; (8000f58 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000f26:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000f28:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000f2a:	3104      	adds	r1, #4

08000f2c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000f2c:	480b      	ldr	r0, [pc, #44]	; (8000f5c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000f2e:	4b0c      	ldr	r3, [pc, #48]	; (8000f60 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000f30:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000f32:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000f34:	d3f6      	bcc.n	8000f24 <CopyDataInit>
  ldr  r2, =_sbss
 8000f36:	4a0b      	ldr	r2, [pc, #44]	; (8000f64 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000f38:	e002      	b.n	8000f40 <LoopFillZerobss>

08000f3a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000f3a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000f3c:	f842 3b04 	str.w	r3, [r2], #4

08000f40 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000f40:	4b09      	ldr	r3, [pc, #36]	; (8000f68 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000f42:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000f44:	d3f9      	bcc.n	8000f3a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000f46:	f7ff fb47 	bl	80005d8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f4a:	f009 fcfd 	bl	800a948 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f4e:	f7ff fc4d 	bl	80007ec <main>
  bx  lr    
 8000f52:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000f54:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000f58:	0800aa6c 	.word	0x0800aa6c
  ldr  r0, =_sdata
 8000f5c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000f60:	20000014 	.word	0x20000014
  ldr  r2, =_sbss
 8000f64:	20000014 	.word	0x20000014
  ldr  r3, = _ebss
 8000f68:	20004b54 	.word	0x20004b54

08000f6c <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f6c:	e7fe      	b.n	8000f6c <ADC3_IRQHandler>
	...

08000f70 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b082      	sub	sp, #8
 8000f74:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f76:	2003      	movs	r0, #3
 8000f78:	f000 f90f 	bl	800119a <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000f7c:	f003 fb86 	bl	800468c <HAL_RCC_GetSysClockFreq>
 8000f80:	4602      	mov	r2, r0
 8000f82:	4b15      	ldr	r3, [pc, #84]	; (8000fd8 <HAL_Init+0x68>)
 8000f84:	699b      	ldr	r3, [r3, #24]
 8000f86:	0a1b      	lsrs	r3, r3, #8
 8000f88:	f003 030f 	and.w	r3, r3, #15
 8000f8c:	4913      	ldr	r1, [pc, #76]	; (8000fdc <HAL_Init+0x6c>)
 8000f8e:	5ccb      	ldrb	r3, [r1, r3]
 8000f90:	f003 031f 	and.w	r3, r3, #31
 8000f94:	fa22 f303 	lsr.w	r3, r2, r3
 8000f98:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000f9a:	4b0f      	ldr	r3, [pc, #60]	; (8000fd8 <HAL_Init+0x68>)
 8000f9c:	699b      	ldr	r3, [r3, #24]
 8000f9e:	f003 030f 	and.w	r3, r3, #15
 8000fa2:	4a0e      	ldr	r2, [pc, #56]	; (8000fdc <HAL_Init+0x6c>)
 8000fa4:	5cd3      	ldrb	r3, [r2, r3]
 8000fa6:	f003 031f 	and.w	r3, r3, #31
 8000faa:	687a      	ldr	r2, [r7, #4]
 8000fac:	fa22 f303 	lsr.w	r3, r2, r3
 8000fb0:	4a0b      	ldr	r2, [pc, #44]	; (8000fe0 <HAL_Init+0x70>)
 8000fb2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000fb4:	4a0b      	ldr	r2, [pc, #44]	; (8000fe4 <HAL_Init+0x74>)
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000fba:	2000      	movs	r0, #0
 8000fbc:	f7ff fdd2 	bl	8000b64 <HAL_InitTick>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d001      	beq.n	8000fca <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000fc6:	2301      	movs	r3, #1
 8000fc8:	e002      	b.n	8000fd0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000fca:	f7ff fd9d 	bl	8000b08 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fce:	2300      	movs	r3, #0
}
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	3708      	adds	r7, #8
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bd80      	pop	{r7, pc}
 8000fd8:	58024400 	.word	0x58024400
 8000fdc:	0800a9f8 	.word	0x0800a9f8
 8000fe0:	20000004 	.word	0x20000004
 8000fe4:	20000000 	.word	0x20000000

08000fe8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000fec:	4b06      	ldr	r3, [pc, #24]	; (8001008 <HAL_IncTick+0x20>)
 8000fee:	781b      	ldrb	r3, [r3, #0]
 8000ff0:	461a      	mov	r2, r3
 8000ff2:	4b06      	ldr	r3, [pc, #24]	; (800100c <HAL_IncTick+0x24>)
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	4413      	add	r3, r2
 8000ff8:	4a04      	ldr	r2, [pc, #16]	; (800100c <HAL_IncTick+0x24>)
 8000ffa:	6013      	str	r3, [r2, #0]
}
 8000ffc:	bf00      	nop
 8000ffe:	46bd      	mov	sp, r7
 8001000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001004:	4770      	bx	lr
 8001006:	bf00      	nop
 8001008:	2000000c 	.word	0x2000000c
 800100c:	20004b10 	.word	0x20004b10

08001010 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001010:	b480      	push	{r7}
 8001012:	af00      	add	r7, sp, #0
  return uwTick;
 8001014:	4b03      	ldr	r3, [pc, #12]	; (8001024 <HAL_GetTick+0x14>)
 8001016:	681b      	ldr	r3, [r3, #0]
}
 8001018:	4618      	mov	r0, r3
 800101a:	46bd      	mov	sp, r7
 800101c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001020:	4770      	bx	lr
 8001022:	bf00      	nop
 8001024:	20004b10 	.word	0x20004b10

08001028 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001028:	b480      	push	{r7}
 800102a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 800102c:	4b03      	ldr	r3, [pc, #12]	; (800103c <HAL_GetREVID+0x14>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	0c1b      	lsrs	r3, r3, #16
}
 8001032:	4618      	mov	r0, r3
 8001034:	46bd      	mov	sp, r7
 8001036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103a:	4770      	bx	lr
 800103c:	5c001000 	.word	0x5c001000

08001040 <__NVIC_SetPriorityGrouping>:
{
 8001040:	b480      	push	{r7}
 8001042:	b085      	sub	sp, #20
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	f003 0307 	and.w	r3, r3, #7
 800104e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001050:	4b0b      	ldr	r3, [pc, #44]	; (8001080 <__NVIC_SetPriorityGrouping+0x40>)
 8001052:	68db      	ldr	r3, [r3, #12]
 8001054:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001056:	68ba      	ldr	r2, [r7, #8]
 8001058:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800105c:	4013      	ands	r3, r2
 800105e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001064:	68bb      	ldr	r3, [r7, #8]
 8001066:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001068:	4b06      	ldr	r3, [pc, #24]	; (8001084 <__NVIC_SetPriorityGrouping+0x44>)
 800106a:	4313      	orrs	r3, r2
 800106c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800106e:	4a04      	ldr	r2, [pc, #16]	; (8001080 <__NVIC_SetPriorityGrouping+0x40>)
 8001070:	68bb      	ldr	r3, [r7, #8]
 8001072:	60d3      	str	r3, [r2, #12]
}
 8001074:	bf00      	nop
 8001076:	3714      	adds	r7, #20
 8001078:	46bd      	mov	sp, r7
 800107a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107e:	4770      	bx	lr
 8001080:	e000ed00 	.word	0xe000ed00
 8001084:	05fa0000 	.word	0x05fa0000

08001088 <__NVIC_GetPriorityGrouping>:
{
 8001088:	b480      	push	{r7}
 800108a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800108c:	4b04      	ldr	r3, [pc, #16]	; (80010a0 <__NVIC_GetPriorityGrouping+0x18>)
 800108e:	68db      	ldr	r3, [r3, #12]
 8001090:	0a1b      	lsrs	r3, r3, #8
 8001092:	f003 0307 	and.w	r3, r3, #7
}
 8001096:	4618      	mov	r0, r3
 8001098:	46bd      	mov	sp, r7
 800109a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109e:	4770      	bx	lr
 80010a0:	e000ed00 	.word	0xe000ed00

080010a4 <__NVIC_EnableIRQ>:
{
 80010a4:	b480      	push	{r7}
 80010a6:	b083      	sub	sp, #12
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	4603      	mov	r3, r0
 80010ac:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80010ae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	db0b      	blt.n	80010ce <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010b6:	88fb      	ldrh	r3, [r7, #6]
 80010b8:	f003 021f 	and.w	r2, r3, #31
 80010bc:	4907      	ldr	r1, [pc, #28]	; (80010dc <__NVIC_EnableIRQ+0x38>)
 80010be:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80010c2:	095b      	lsrs	r3, r3, #5
 80010c4:	2001      	movs	r0, #1
 80010c6:	fa00 f202 	lsl.w	r2, r0, r2
 80010ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80010ce:	bf00      	nop
 80010d0:	370c      	adds	r7, #12
 80010d2:	46bd      	mov	sp, r7
 80010d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d8:	4770      	bx	lr
 80010da:	bf00      	nop
 80010dc:	e000e100 	.word	0xe000e100

080010e0 <__NVIC_SetPriority>:
{
 80010e0:	b480      	push	{r7}
 80010e2:	b083      	sub	sp, #12
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	4603      	mov	r3, r0
 80010e8:	6039      	str	r1, [r7, #0]
 80010ea:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80010ec:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	db0a      	blt.n	800110a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	b2da      	uxtb	r2, r3
 80010f8:	490c      	ldr	r1, [pc, #48]	; (800112c <__NVIC_SetPriority+0x4c>)
 80010fa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80010fe:	0112      	lsls	r2, r2, #4
 8001100:	b2d2      	uxtb	r2, r2
 8001102:	440b      	add	r3, r1
 8001104:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001108:	e00a      	b.n	8001120 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800110a:	683b      	ldr	r3, [r7, #0]
 800110c:	b2da      	uxtb	r2, r3
 800110e:	4908      	ldr	r1, [pc, #32]	; (8001130 <__NVIC_SetPriority+0x50>)
 8001110:	88fb      	ldrh	r3, [r7, #6]
 8001112:	f003 030f 	and.w	r3, r3, #15
 8001116:	3b04      	subs	r3, #4
 8001118:	0112      	lsls	r2, r2, #4
 800111a:	b2d2      	uxtb	r2, r2
 800111c:	440b      	add	r3, r1
 800111e:	761a      	strb	r2, [r3, #24]
}
 8001120:	bf00      	nop
 8001122:	370c      	adds	r7, #12
 8001124:	46bd      	mov	sp, r7
 8001126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112a:	4770      	bx	lr
 800112c:	e000e100 	.word	0xe000e100
 8001130:	e000ed00 	.word	0xe000ed00

08001134 <NVIC_EncodePriority>:
{
 8001134:	b480      	push	{r7}
 8001136:	b089      	sub	sp, #36	; 0x24
 8001138:	af00      	add	r7, sp, #0
 800113a:	60f8      	str	r0, [r7, #12]
 800113c:	60b9      	str	r1, [r7, #8]
 800113e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	f003 0307 	and.w	r3, r3, #7
 8001146:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001148:	69fb      	ldr	r3, [r7, #28]
 800114a:	f1c3 0307 	rsb	r3, r3, #7
 800114e:	2b04      	cmp	r3, #4
 8001150:	bf28      	it	cs
 8001152:	2304      	movcs	r3, #4
 8001154:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001156:	69fb      	ldr	r3, [r7, #28]
 8001158:	3304      	adds	r3, #4
 800115a:	2b06      	cmp	r3, #6
 800115c:	d902      	bls.n	8001164 <NVIC_EncodePriority+0x30>
 800115e:	69fb      	ldr	r3, [r7, #28]
 8001160:	3b03      	subs	r3, #3
 8001162:	e000      	b.n	8001166 <NVIC_EncodePriority+0x32>
 8001164:	2300      	movs	r3, #0
 8001166:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001168:	f04f 32ff 	mov.w	r2, #4294967295
 800116c:	69bb      	ldr	r3, [r7, #24]
 800116e:	fa02 f303 	lsl.w	r3, r2, r3
 8001172:	43da      	mvns	r2, r3
 8001174:	68bb      	ldr	r3, [r7, #8]
 8001176:	401a      	ands	r2, r3
 8001178:	697b      	ldr	r3, [r7, #20]
 800117a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800117c:	f04f 31ff 	mov.w	r1, #4294967295
 8001180:	697b      	ldr	r3, [r7, #20]
 8001182:	fa01 f303 	lsl.w	r3, r1, r3
 8001186:	43d9      	mvns	r1, r3
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800118c:	4313      	orrs	r3, r2
}
 800118e:	4618      	mov	r0, r3
 8001190:	3724      	adds	r7, #36	; 0x24
 8001192:	46bd      	mov	sp, r7
 8001194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001198:	4770      	bx	lr

0800119a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800119a:	b580      	push	{r7, lr}
 800119c:	b082      	sub	sp, #8
 800119e:	af00      	add	r7, sp, #0
 80011a0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011a2:	6878      	ldr	r0, [r7, #4]
 80011a4:	f7ff ff4c 	bl	8001040 <__NVIC_SetPriorityGrouping>
}
 80011a8:	bf00      	nop
 80011aa:	3708      	adds	r7, #8
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bd80      	pop	{r7, pc}

080011b0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b086      	sub	sp, #24
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	4603      	mov	r3, r0
 80011b8:	60b9      	str	r1, [r7, #8]
 80011ba:	607a      	str	r2, [r7, #4]
 80011bc:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80011be:	f7ff ff63 	bl	8001088 <__NVIC_GetPriorityGrouping>
 80011c2:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011c4:	687a      	ldr	r2, [r7, #4]
 80011c6:	68b9      	ldr	r1, [r7, #8]
 80011c8:	6978      	ldr	r0, [r7, #20]
 80011ca:	f7ff ffb3 	bl	8001134 <NVIC_EncodePriority>
 80011ce:	4602      	mov	r2, r0
 80011d0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80011d4:	4611      	mov	r1, r2
 80011d6:	4618      	mov	r0, r3
 80011d8:	f7ff ff82 	bl	80010e0 <__NVIC_SetPriority>
}
 80011dc:	bf00      	nop
 80011de:	3718      	adds	r7, #24
 80011e0:	46bd      	mov	sp, r7
 80011e2:	bd80      	pop	{r7, pc}

080011e4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b082      	sub	sp, #8
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	4603      	mov	r3, r0
 80011ec:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011ee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80011f2:	4618      	mov	r0, r3
 80011f4:	f7ff ff56 	bl	80010a4 <__NVIC_EnableIRQ>
}
 80011f8:	bf00      	nop
 80011fa:	3708      	adds	r7, #8
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}

08001200 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b086      	sub	sp, #24
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8001208:	f7ff ff02 	bl	8001010 <HAL_GetTick>
 800120c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	2b00      	cmp	r3, #0
 8001212:	d101      	bne.n	8001218 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8001214:	2301      	movs	r3, #1
 8001216:	e316      	b.n	8001846 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	4a66      	ldr	r2, [pc, #408]	; (80013b8 <HAL_DMA_Init+0x1b8>)
 800121e:	4293      	cmp	r3, r2
 8001220:	d04a      	beq.n	80012b8 <HAL_DMA_Init+0xb8>
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	4a65      	ldr	r2, [pc, #404]	; (80013bc <HAL_DMA_Init+0x1bc>)
 8001228:	4293      	cmp	r3, r2
 800122a:	d045      	beq.n	80012b8 <HAL_DMA_Init+0xb8>
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	4a63      	ldr	r2, [pc, #396]	; (80013c0 <HAL_DMA_Init+0x1c0>)
 8001232:	4293      	cmp	r3, r2
 8001234:	d040      	beq.n	80012b8 <HAL_DMA_Init+0xb8>
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	4a62      	ldr	r2, [pc, #392]	; (80013c4 <HAL_DMA_Init+0x1c4>)
 800123c:	4293      	cmp	r3, r2
 800123e:	d03b      	beq.n	80012b8 <HAL_DMA_Init+0xb8>
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	4a60      	ldr	r2, [pc, #384]	; (80013c8 <HAL_DMA_Init+0x1c8>)
 8001246:	4293      	cmp	r3, r2
 8001248:	d036      	beq.n	80012b8 <HAL_DMA_Init+0xb8>
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	4a5f      	ldr	r2, [pc, #380]	; (80013cc <HAL_DMA_Init+0x1cc>)
 8001250:	4293      	cmp	r3, r2
 8001252:	d031      	beq.n	80012b8 <HAL_DMA_Init+0xb8>
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	4a5d      	ldr	r2, [pc, #372]	; (80013d0 <HAL_DMA_Init+0x1d0>)
 800125a:	4293      	cmp	r3, r2
 800125c:	d02c      	beq.n	80012b8 <HAL_DMA_Init+0xb8>
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	4a5c      	ldr	r2, [pc, #368]	; (80013d4 <HAL_DMA_Init+0x1d4>)
 8001264:	4293      	cmp	r3, r2
 8001266:	d027      	beq.n	80012b8 <HAL_DMA_Init+0xb8>
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	4a5a      	ldr	r2, [pc, #360]	; (80013d8 <HAL_DMA_Init+0x1d8>)
 800126e:	4293      	cmp	r3, r2
 8001270:	d022      	beq.n	80012b8 <HAL_DMA_Init+0xb8>
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	4a59      	ldr	r2, [pc, #356]	; (80013dc <HAL_DMA_Init+0x1dc>)
 8001278:	4293      	cmp	r3, r2
 800127a:	d01d      	beq.n	80012b8 <HAL_DMA_Init+0xb8>
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	4a57      	ldr	r2, [pc, #348]	; (80013e0 <HAL_DMA_Init+0x1e0>)
 8001282:	4293      	cmp	r3, r2
 8001284:	d018      	beq.n	80012b8 <HAL_DMA_Init+0xb8>
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	4a56      	ldr	r2, [pc, #344]	; (80013e4 <HAL_DMA_Init+0x1e4>)
 800128c:	4293      	cmp	r3, r2
 800128e:	d013      	beq.n	80012b8 <HAL_DMA_Init+0xb8>
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	4a54      	ldr	r2, [pc, #336]	; (80013e8 <HAL_DMA_Init+0x1e8>)
 8001296:	4293      	cmp	r3, r2
 8001298:	d00e      	beq.n	80012b8 <HAL_DMA_Init+0xb8>
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	4a53      	ldr	r2, [pc, #332]	; (80013ec <HAL_DMA_Init+0x1ec>)
 80012a0:	4293      	cmp	r3, r2
 80012a2:	d009      	beq.n	80012b8 <HAL_DMA_Init+0xb8>
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	4a51      	ldr	r2, [pc, #324]	; (80013f0 <HAL_DMA_Init+0x1f0>)
 80012aa:	4293      	cmp	r3, r2
 80012ac:	d004      	beq.n	80012b8 <HAL_DMA_Init+0xb8>
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	4a50      	ldr	r2, [pc, #320]	; (80013f4 <HAL_DMA_Init+0x1f4>)
 80012b4:	4293      	cmp	r3, r2
 80012b6:	d101      	bne.n	80012bc <HAL_DMA_Init+0xbc>
 80012b8:	2301      	movs	r3, #1
 80012ba:	e000      	b.n	80012be <HAL_DMA_Init+0xbe>
 80012bc:	2300      	movs	r3, #0
 80012be:	2b00      	cmp	r3, #0
 80012c0:	f000 813b 	beq.w	800153a <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	2200      	movs	r2, #0
 80012c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	2202      	movs	r2, #2
 80012d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	4a37      	ldr	r2, [pc, #220]	; (80013b8 <HAL_DMA_Init+0x1b8>)
 80012da:	4293      	cmp	r3, r2
 80012dc:	d04a      	beq.n	8001374 <HAL_DMA_Init+0x174>
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	4a36      	ldr	r2, [pc, #216]	; (80013bc <HAL_DMA_Init+0x1bc>)
 80012e4:	4293      	cmp	r3, r2
 80012e6:	d045      	beq.n	8001374 <HAL_DMA_Init+0x174>
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	4a34      	ldr	r2, [pc, #208]	; (80013c0 <HAL_DMA_Init+0x1c0>)
 80012ee:	4293      	cmp	r3, r2
 80012f0:	d040      	beq.n	8001374 <HAL_DMA_Init+0x174>
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	4a33      	ldr	r2, [pc, #204]	; (80013c4 <HAL_DMA_Init+0x1c4>)
 80012f8:	4293      	cmp	r3, r2
 80012fa:	d03b      	beq.n	8001374 <HAL_DMA_Init+0x174>
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	4a31      	ldr	r2, [pc, #196]	; (80013c8 <HAL_DMA_Init+0x1c8>)
 8001302:	4293      	cmp	r3, r2
 8001304:	d036      	beq.n	8001374 <HAL_DMA_Init+0x174>
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	4a30      	ldr	r2, [pc, #192]	; (80013cc <HAL_DMA_Init+0x1cc>)
 800130c:	4293      	cmp	r3, r2
 800130e:	d031      	beq.n	8001374 <HAL_DMA_Init+0x174>
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	4a2e      	ldr	r2, [pc, #184]	; (80013d0 <HAL_DMA_Init+0x1d0>)
 8001316:	4293      	cmp	r3, r2
 8001318:	d02c      	beq.n	8001374 <HAL_DMA_Init+0x174>
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	4a2d      	ldr	r2, [pc, #180]	; (80013d4 <HAL_DMA_Init+0x1d4>)
 8001320:	4293      	cmp	r3, r2
 8001322:	d027      	beq.n	8001374 <HAL_DMA_Init+0x174>
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	4a2b      	ldr	r2, [pc, #172]	; (80013d8 <HAL_DMA_Init+0x1d8>)
 800132a:	4293      	cmp	r3, r2
 800132c:	d022      	beq.n	8001374 <HAL_DMA_Init+0x174>
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	4a2a      	ldr	r2, [pc, #168]	; (80013dc <HAL_DMA_Init+0x1dc>)
 8001334:	4293      	cmp	r3, r2
 8001336:	d01d      	beq.n	8001374 <HAL_DMA_Init+0x174>
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	4a28      	ldr	r2, [pc, #160]	; (80013e0 <HAL_DMA_Init+0x1e0>)
 800133e:	4293      	cmp	r3, r2
 8001340:	d018      	beq.n	8001374 <HAL_DMA_Init+0x174>
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	4a27      	ldr	r2, [pc, #156]	; (80013e4 <HAL_DMA_Init+0x1e4>)
 8001348:	4293      	cmp	r3, r2
 800134a:	d013      	beq.n	8001374 <HAL_DMA_Init+0x174>
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	4a25      	ldr	r2, [pc, #148]	; (80013e8 <HAL_DMA_Init+0x1e8>)
 8001352:	4293      	cmp	r3, r2
 8001354:	d00e      	beq.n	8001374 <HAL_DMA_Init+0x174>
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	4a24      	ldr	r2, [pc, #144]	; (80013ec <HAL_DMA_Init+0x1ec>)
 800135c:	4293      	cmp	r3, r2
 800135e:	d009      	beq.n	8001374 <HAL_DMA_Init+0x174>
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	4a22      	ldr	r2, [pc, #136]	; (80013f0 <HAL_DMA_Init+0x1f0>)
 8001366:	4293      	cmp	r3, r2
 8001368:	d004      	beq.n	8001374 <HAL_DMA_Init+0x174>
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	4a21      	ldr	r2, [pc, #132]	; (80013f4 <HAL_DMA_Init+0x1f4>)
 8001370:	4293      	cmp	r3, r2
 8001372:	d108      	bne.n	8001386 <HAL_DMA_Init+0x186>
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	681a      	ldr	r2, [r3, #0]
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	f022 0201 	bic.w	r2, r2, #1
 8001382:	601a      	str	r2, [r3, #0]
 8001384:	e007      	b.n	8001396 <HAL_DMA_Init+0x196>
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	681a      	ldr	r2, [r3, #0]
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	f022 0201 	bic.w	r2, r2, #1
 8001394:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001396:	e02f      	b.n	80013f8 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001398:	f7ff fe3a 	bl	8001010 <HAL_GetTick>
 800139c:	4602      	mov	r2, r0
 800139e:	693b      	ldr	r3, [r7, #16]
 80013a0:	1ad3      	subs	r3, r2, r3
 80013a2:	2b05      	cmp	r3, #5
 80013a4:	d928      	bls.n	80013f8 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	2220      	movs	r2, #32
 80013aa:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	2203      	movs	r2, #3
 80013b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80013b4:	2301      	movs	r3, #1
 80013b6:	e246      	b.n	8001846 <HAL_DMA_Init+0x646>
 80013b8:	40020010 	.word	0x40020010
 80013bc:	40020028 	.word	0x40020028
 80013c0:	40020040 	.word	0x40020040
 80013c4:	40020058 	.word	0x40020058
 80013c8:	40020070 	.word	0x40020070
 80013cc:	40020088 	.word	0x40020088
 80013d0:	400200a0 	.word	0x400200a0
 80013d4:	400200b8 	.word	0x400200b8
 80013d8:	40020410 	.word	0x40020410
 80013dc:	40020428 	.word	0x40020428
 80013e0:	40020440 	.word	0x40020440
 80013e4:	40020458 	.word	0x40020458
 80013e8:	40020470 	.word	0x40020470
 80013ec:	40020488 	.word	0x40020488
 80013f0:	400204a0 	.word	0x400204a0
 80013f4:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f003 0301 	and.w	r3, r3, #1
 8001402:	2b00      	cmp	r3, #0
 8001404:	d1c8      	bne.n	8001398 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800140e:	697a      	ldr	r2, [r7, #20]
 8001410:	4b83      	ldr	r3, [pc, #524]	; (8001620 <HAL_DMA_Init+0x420>)
 8001412:	4013      	ands	r3, r2
 8001414:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800141e:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	691b      	ldr	r3, [r3, #16]
 8001424:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800142a:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	699b      	ldr	r3, [r3, #24]
 8001430:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001436:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	6a1b      	ldr	r3, [r3, #32]
 800143c:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800143e:	697a      	ldr	r2, [r7, #20]
 8001440:	4313      	orrs	r3, r2
 8001442:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001448:	2b04      	cmp	r3, #4
 800144a:	d107      	bne.n	800145c <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001454:	4313      	orrs	r3, r2
 8001456:	697a      	ldr	r2, [r7, #20]
 8001458:	4313      	orrs	r3, r2
 800145a:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 800145c:	4b71      	ldr	r3, [pc, #452]	; (8001624 <HAL_DMA_Init+0x424>)
 800145e:	681a      	ldr	r2, [r3, #0]
 8001460:	4b71      	ldr	r3, [pc, #452]	; (8001628 <HAL_DMA_Init+0x428>)
 8001462:	4013      	ands	r3, r2
 8001464:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001468:	d328      	bcc.n	80014bc <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	685b      	ldr	r3, [r3, #4]
 800146e:	2b28      	cmp	r3, #40	; 0x28
 8001470:	d903      	bls.n	800147a <HAL_DMA_Init+0x27a>
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	685b      	ldr	r3, [r3, #4]
 8001476:	2b2e      	cmp	r3, #46	; 0x2e
 8001478:	d917      	bls.n	80014aa <HAL_DMA_Init+0x2aa>
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	685b      	ldr	r3, [r3, #4]
 800147e:	2b3e      	cmp	r3, #62	; 0x3e
 8001480:	d903      	bls.n	800148a <HAL_DMA_Init+0x28a>
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	685b      	ldr	r3, [r3, #4]
 8001486:	2b42      	cmp	r3, #66	; 0x42
 8001488:	d90f      	bls.n	80014aa <HAL_DMA_Init+0x2aa>
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	685b      	ldr	r3, [r3, #4]
 800148e:	2b46      	cmp	r3, #70	; 0x46
 8001490:	d903      	bls.n	800149a <HAL_DMA_Init+0x29a>
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	685b      	ldr	r3, [r3, #4]
 8001496:	2b48      	cmp	r3, #72	; 0x48
 8001498:	d907      	bls.n	80014aa <HAL_DMA_Init+0x2aa>
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	685b      	ldr	r3, [r3, #4]
 800149e:	2b4e      	cmp	r3, #78	; 0x4e
 80014a0:	d905      	bls.n	80014ae <HAL_DMA_Init+0x2ae>
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	685b      	ldr	r3, [r3, #4]
 80014a6:	2b52      	cmp	r3, #82	; 0x52
 80014a8:	d801      	bhi.n	80014ae <HAL_DMA_Init+0x2ae>
 80014aa:	2301      	movs	r3, #1
 80014ac:	e000      	b.n	80014b0 <HAL_DMA_Init+0x2b0>
 80014ae:	2300      	movs	r3, #0
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d003      	beq.n	80014bc <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80014b4:	697b      	ldr	r3, [r7, #20]
 80014b6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80014ba:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	697a      	ldr	r2, [r7, #20]
 80014c2:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	695b      	ldr	r3, [r3, #20]
 80014ca:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80014cc:	697b      	ldr	r3, [r7, #20]
 80014ce:	f023 0307 	bic.w	r3, r3, #7
 80014d2:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014d8:	697a      	ldr	r2, [r7, #20]
 80014da:	4313      	orrs	r3, r2
 80014dc:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014e2:	2b04      	cmp	r3, #4
 80014e4:	d117      	bne.n	8001516 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014ea:	697a      	ldr	r2, [r7, #20]
 80014ec:	4313      	orrs	r3, r2
 80014ee:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d00e      	beq.n	8001516 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80014f8:	6878      	ldr	r0, [r7, #4]
 80014fa:	f001 ff1b 	bl	8003334 <DMA_CheckFifoParam>
 80014fe:	4603      	mov	r3, r0
 8001500:	2b00      	cmp	r3, #0
 8001502:	d008      	beq.n	8001516 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	2240      	movs	r2, #64	; 0x40
 8001508:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	2201      	movs	r2, #1
 800150e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8001512:	2301      	movs	r3, #1
 8001514:	e197      	b.n	8001846 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	697a      	ldr	r2, [r7, #20]
 800151c:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800151e:	6878      	ldr	r0, [r7, #4]
 8001520:	f001 fe56 	bl	80031d0 <DMA_CalcBaseAndBitshift>
 8001524:	4603      	mov	r3, r0
 8001526:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800152c:	f003 031f 	and.w	r3, r3, #31
 8001530:	223f      	movs	r2, #63	; 0x3f
 8001532:	409a      	lsls	r2, r3
 8001534:	68bb      	ldr	r3, [r7, #8]
 8001536:	609a      	str	r2, [r3, #8]
 8001538:	e0cd      	b.n	80016d6 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	4a3b      	ldr	r2, [pc, #236]	; (800162c <HAL_DMA_Init+0x42c>)
 8001540:	4293      	cmp	r3, r2
 8001542:	d022      	beq.n	800158a <HAL_DMA_Init+0x38a>
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	4a39      	ldr	r2, [pc, #228]	; (8001630 <HAL_DMA_Init+0x430>)
 800154a:	4293      	cmp	r3, r2
 800154c:	d01d      	beq.n	800158a <HAL_DMA_Init+0x38a>
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	4a38      	ldr	r2, [pc, #224]	; (8001634 <HAL_DMA_Init+0x434>)
 8001554:	4293      	cmp	r3, r2
 8001556:	d018      	beq.n	800158a <HAL_DMA_Init+0x38a>
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	4a36      	ldr	r2, [pc, #216]	; (8001638 <HAL_DMA_Init+0x438>)
 800155e:	4293      	cmp	r3, r2
 8001560:	d013      	beq.n	800158a <HAL_DMA_Init+0x38a>
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	4a35      	ldr	r2, [pc, #212]	; (800163c <HAL_DMA_Init+0x43c>)
 8001568:	4293      	cmp	r3, r2
 800156a:	d00e      	beq.n	800158a <HAL_DMA_Init+0x38a>
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	4a33      	ldr	r2, [pc, #204]	; (8001640 <HAL_DMA_Init+0x440>)
 8001572:	4293      	cmp	r3, r2
 8001574:	d009      	beq.n	800158a <HAL_DMA_Init+0x38a>
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	4a32      	ldr	r2, [pc, #200]	; (8001644 <HAL_DMA_Init+0x444>)
 800157c:	4293      	cmp	r3, r2
 800157e:	d004      	beq.n	800158a <HAL_DMA_Init+0x38a>
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	4a30      	ldr	r2, [pc, #192]	; (8001648 <HAL_DMA_Init+0x448>)
 8001586:	4293      	cmp	r3, r2
 8001588:	d101      	bne.n	800158e <HAL_DMA_Init+0x38e>
 800158a:	2301      	movs	r3, #1
 800158c:	e000      	b.n	8001590 <HAL_DMA_Init+0x390>
 800158e:	2300      	movs	r3, #0
 8001590:	2b00      	cmp	r3, #0
 8001592:	f000 8097 	beq.w	80016c4 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	4a24      	ldr	r2, [pc, #144]	; (800162c <HAL_DMA_Init+0x42c>)
 800159c:	4293      	cmp	r3, r2
 800159e:	d021      	beq.n	80015e4 <HAL_DMA_Init+0x3e4>
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	4a22      	ldr	r2, [pc, #136]	; (8001630 <HAL_DMA_Init+0x430>)
 80015a6:	4293      	cmp	r3, r2
 80015a8:	d01c      	beq.n	80015e4 <HAL_DMA_Init+0x3e4>
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	4a21      	ldr	r2, [pc, #132]	; (8001634 <HAL_DMA_Init+0x434>)
 80015b0:	4293      	cmp	r3, r2
 80015b2:	d017      	beq.n	80015e4 <HAL_DMA_Init+0x3e4>
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	4a1f      	ldr	r2, [pc, #124]	; (8001638 <HAL_DMA_Init+0x438>)
 80015ba:	4293      	cmp	r3, r2
 80015bc:	d012      	beq.n	80015e4 <HAL_DMA_Init+0x3e4>
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	4a1e      	ldr	r2, [pc, #120]	; (800163c <HAL_DMA_Init+0x43c>)
 80015c4:	4293      	cmp	r3, r2
 80015c6:	d00d      	beq.n	80015e4 <HAL_DMA_Init+0x3e4>
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4a1c      	ldr	r2, [pc, #112]	; (8001640 <HAL_DMA_Init+0x440>)
 80015ce:	4293      	cmp	r3, r2
 80015d0:	d008      	beq.n	80015e4 <HAL_DMA_Init+0x3e4>
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	4a1b      	ldr	r2, [pc, #108]	; (8001644 <HAL_DMA_Init+0x444>)
 80015d8:	4293      	cmp	r3, r2
 80015da:	d003      	beq.n	80015e4 <HAL_DMA_Init+0x3e4>
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	4a19      	ldr	r2, [pc, #100]	; (8001648 <HAL_DMA_Init+0x448>)
 80015e2:	4293      	cmp	r3, r2
 80015e4:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	2200      	movs	r2, #0
 80015ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	2202      	movs	r2, #2
 80015f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80015fe:	697a      	ldr	r2, [r7, #20]
 8001600:	4b12      	ldr	r3, [pc, #72]	; (800164c <HAL_DMA_Init+0x44c>)
 8001602:	4013      	ands	r3, r2
 8001604:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	689b      	ldr	r3, [r3, #8]
 800160a:	2b40      	cmp	r3, #64	; 0x40
 800160c:	d020      	beq.n	8001650 <HAL_DMA_Init+0x450>
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	689b      	ldr	r3, [r3, #8]
 8001612:	2b80      	cmp	r3, #128	; 0x80
 8001614:	d102      	bne.n	800161c <HAL_DMA_Init+0x41c>
 8001616:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800161a:	e01a      	b.n	8001652 <HAL_DMA_Init+0x452>
 800161c:	2300      	movs	r3, #0
 800161e:	e018      	b.n	8001652 <HAL_DMA_Init+0x452>
 8001620:	fe10803f 	.word	0xfe10803f
 8001624:	5c001000 	.word	0x5c001000
 8001628:	ffff0000 	.word	0xffff0000
 800162c:	58025408 	.word	0x58025408
 8001630:	5802541c 	.word	0x5802541c
 8001634:	58025430 	.word	0x58025430
 8001638:	58025444 	.word	0x58025444
 800163c:	58025458 	.word	0x58025458
 8001640:	5802546c 	.word	0x5802546c
 8001644:	58025480 	.word	0x58025480
 8001648:	58025494 	.word	0x58025494
 800164c:	fffe000f 	.word	0xfffe000f
 8001650:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001652:	687a      	ldr	r2, [r7, #4]
 8001654:	68d2      	ldr	r2, [r2, #12]
 8001656:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001658:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	691b      	ldr	r3, [r3, #16]
 800165e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001660:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	695b      	ldr	r3, [r3, #20]
 8001666:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001668:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	699b      	ldr	r3, [r3, #24]
 800166e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001670:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	69db      	ldr	r3, [r3, #28]
 8001676:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001678:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	6a1b      	ldr	r3, [r3, #32]
 800167e:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001680:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001682:	697a      	ldr	r2, [r7, #20]
 8001684:	4313      	orrs	r3, r2
 8001686:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	697a      	ldr	r2, [r7, #20]
 800168e:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	461a      	mov	r2, r3
 8001696:	4b6e      	ldr	r3, [pc, #440]	; (8001850 <HAL_DMA_Init+0x650>)
 8001698:	4413      	add	r3, r2
 800169a:	4a6e      	ldr	r2, [pc, #440]	; (8001854 <HAL_DMA_Init+0x654>)
 800169c:	fba2 2303 	umull	r2, r3, r2, r3
 80016a0:	091b      	lsrs	r3, r3, #4
 80016a2:	009a      	lsls	r2, r3, #2
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80016a8:	6878      	ldr	r0, [r7, #4]
 80016aa:	f001 fd91 	bl	80031d0 <DMA_CalcBaseAndBitshift>
 80016ae:	4603      	mov	r3, r0
 80016b0:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016b6:	f003 031f 	and.w	r3, r3, #31
 80016ba:	2201      	movs	r2, #1
 80016bc:	409a      	lsls	r2, r3
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	605a      	str	r2, [r3, #4]
 80016c2:	e008      	b.n	80016d6 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	2240      	movs	r2, #64	; 0x40
 80016c8:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	2203      	movs	r2, #3
 80016ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 80016d2:	2301      	movs	r3, #1
 80016d4:	e0b7      	b.n	8001846 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	4a5f      	ldr	r2, [pc, #380]	; (8001858 <HAL_DMA_Init+0x658>)
 80016dc:	4293      	cmp	r3, r2
 80016de:	d072      	beq.n	80017c6 <HAL_DMA_Init+0x5c6>
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	4a5d      	ldr	r2, [pc, #372]	; (800185c <HAL_DMA_Init+0x65c>)
 80016e6:	4293      	cmp	r3, r2
 80016e8:	d06d      	beq.n	80017c6 <HAL_DMA_Init+0x5c6>
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	4a5c      	ldr	r2, [pc, #368]	; (8001860 <HAL_DMA_Init+0x660>)
 80016f0:	4293      	cmp	r3, r2
 80016f2:	d068      	beq.n	80017c6 <HAL_DMA_Init+0x5c6>
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	4a5a      	ldr	r2, [pc, #360]	; (8001864 <HAL_DMA_Init+0x664>)
 80016fa:	4293      	cmp	r3, r2
 80016fc:	d063      	beq.n	80017c6 <HAL_DMA_Init+0x5c6>
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	4a59      	ldr	r2, [pc, #356]	; (8001868 <HAL_DMA_Init+0x668>)
 8001704:	4293      	cmp	r3, r2
 8001706:	d05e      	beq.n	80017c6 <HAL_DMA_Init+0x5c6>
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	4a57      	ldr	r2, [pc, #348]	; (800186c <HAL_DMA_Init+0x66c>)
 800170e:	4293      	cmp	r3, r2
 8001710:	d059      	beq.n	80017c6 <HAL_DMA_Init+0x5c6>
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	4a56      	ldr	r2, [pc, #344]	; (8001870 <HAL_DMA_Init+0x670>)
 8001718:	4293      	cmp	r3, r2
 800171a:	d054      	beq.n	80017c6 <HAL_DMA_Init+0x5c6>
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	4a54      	ldr	r2, [pc, #336]	; (8001874 <HAL_DMA_Init+0x674>)
 8001722:	4293      	cmp	r3, r2
 8001724:	d04f      	beq.n	80017c6 <HAL_DMA_Init+0x5c6>
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	4a53      	ldr	r2, [pc, #332]	; (8001878 <HAL_DMA_Init+0x678>)
 800172c:	4293      	cmp	r3, r2
 800172e:	d04a      	beq.n	80017c6 <HAL_DMA_Init+0x5c6>
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	4a51      	ldr	r2, [pc, #324]	; (800187c <HAL_DMA_Init+0x67c>)
 8001736:	4293      	cmp	r3, r2
 8001738:	d045      	beq.n	80017c6 <HAL_DMA_Init+0x5c6>
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	4a50      	ldr	r2, [pc, #320]	; (8001880 <HAL_DMA_Init+0x680>)
 8001740:	4293      	cmp	r3, r2
 8001742:	d040      	beq.n	80017c6 <HAL_DMA_Init+0x5c6>
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	4a4e      	ldr	r2, [pc, #312]	; (8001884 <HAL_DMA_Init+0x684>)
 800174a:	4293      	cmp	r3, r2
 800174c:	d03b      	beq.n	80017c6 <HAL_DMA_Init+0x5c6>
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	4a4d      	ldr	r2, [pc, #308]	; (8001888 <HAL_DMA_Init+0x688>)
 8001754:	4293      	cmp	r3, r2
 8001756:	d036      	beq.n	80017c6 <HAL_DMA_Init+0x5c6>
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	4a4b      	ldr	r2, [pc, #300]	; (800188c <HAL_DMA_Init+0x68c>)
 800175e:	4293      	cmp	r3, r2
 8001760:	d031      	beq.n	80017c6 <HAL_DMA_Init+0x5c6>
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	4a4a      	ldr	r2, [pc, #296]	; (8001890 <HAL_DMA_Init+0x690>)
 8001768:	4293      	cmp	r3, r2
 800176a:	d02c      	beq.n	80017c6 <HAL_DMA_Init+0x5c6>
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	4a48      	ldr	r2, [pc, #288]	; (8001894 <HAL_DMA_Init+0x694>)
 8001772:	4293      	cmp	r3, r2
 8001774:	d027      	beq.n	80017c6 <HAL_DMA_Init+0x5c6>
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	4a47      	ldr	r2, [pc, #284]	; (8001898 <HAL_DMA_Init+0x698>)
 800177c:	4293      	cmp	r3, r2
 800177e:	d022      	beq.n	80017c6 <HAL_DMA_Init+0x5c6>
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	4a45      	ldr	r2, [pc, #276]	; (800189c <HAL_DMA_Init+0x69c>)
 8001786:	4293      	cmp	r3, r2
 8001788:	d01d      	beq.n	80017c6 <HAL_DMA_Init+0x5c6>
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	4a44      	ldr	r2, [pc, #272]	; (80018a0 <HAL_DMA_Init+0x6a0>)
 8001790:	4293      	cmp	r3, r2
 8001792:	d018      	beq.n	80017c6 <HAL_DMA_Init+0x5c6>
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	4a42      	ldr	r2, [pc, #264]	; (80018a4 <HAL_DMA_Init+0x6a4>)
 800179a:	4293      	cmp	r3, r2
 800179c:	d013      	beq.n	80017c6 <HAL_DMA_Init+0x5c6>
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	4a41      	ldr	r2, [pc, #260]	; (80018a8 <HAL_DMA_Init+0x6a8>)
 80017a4:	4293      	cmp	r3, r2
 80017a6:	d00e      	beq.n	80017c6 <HAL_DMA_Init+0x5c6>
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	4a3f      	ldr	r2, [pc, #252]	; (80018ac <HAL_DMA_Init+0x6ac>)
 80017ae:	4293      	cmp	r3, r2
 80017b0:	d009      	beq.n	80017c6 <HAL_DMA_Init+0x5c6>
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	4a3e      	ldr	r2, [pc, #248]	; (80018b0 <HAL_DMA_Init+0x6b0>)
 80017b8:	4293      	cmp	r3, r2
 80017ba:	d004      	beq.n	80017c6 <HAL_DMA_Init+0x5c6>
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	4a3c      	ldr	r2, [pc, #240]	; (80018b4 <HAL_DMA_Init+0x6b4>)
 80017c2:	4293      	cmp	r3, r2
 80017c4:	d101      	bne.n	80017ca <HAL_DMA_Init+0x5ca>
 80017c6:	2301      	movs	r3, #1
 80017c8:	e000      	b.n	80017cc <HAL_DMA_Init+0x5cc>
 80017ca:	2300      	movs	r3, #0
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d032      	beq.n	8001836 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80017d0:	6878      	ldr	r0, [r7, #4]
 80017d2:	f001 fe2b 	bl	800342c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	689b      	ldr	r3, [r3, #8]
 80017da:	2b80      	cmp	r3, #128	; 0x80
 80017dc:	d102      	bne.n	80017e4 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	2200      	movs	r2, #0
 80017e2:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	685a      	ldr	r2, [r3, #4]
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017ec:	b2d2      	uxtb	r2, r2
 80017ee:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80017f4:	687a      	ldr	r2, [r7, #4]
 80017f6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80017f8:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	685b      	ldr	r3, [r3, #4]
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d010      	beq.n	8001824 <HAL_DMA_Init+0x624>
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	685b      	ldr	r3, [r3, #4]
 8001806:	2b08      	cmp	r3, #8
 8001808:	d80c      	bhi.n	8001824 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800180a:	6878      	ldr	r0, [r7, #4]
 800180c:	f001 fea8 	bl	8003560 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001814:	2200      	movs	r2, #0
 8001816:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800181c:	687a      	ldr	r2, [r7, #4]
 800181e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8001820:	605a      	str	r2, [r3, #4]
 8001822:	e008      	b.n	8001836 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	2200      	movs	r2, #0
 8001828:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	2200      	movs	r2, #0
 800182e:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	2200      	movs	r2, #0
 8001834:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	2200      	movs	r2, #0
 800183a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	2201      	movs	r2, #1
 8001840:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001844:	2300      	movs	r3, #0
}
 8001846:	4618      	mov	r0, r3
 8001848:	3718      	adds	r7, #24
 800184a:	46bd      	mov	sp, r7
 800184c:	bd80      	pop	{r7, pc}
 800184e:	bf00      	nop
 8001850:	a7fdabf8 	.word	0xa7fdabf8
 8001854:	cccccccd 	.word	0xcccccccd
 8001858:	40020010 	.word	0x40020010
 800185c:	40020028 	.word	0x40020028
 8001860:	40020040 	.word	0x40020040
 8001864:	40020058 	.word	0x40020058
 8001868:	40020070 	.word	0x40020070
 800186c:	40020088 	.word	0x40020088
 8001870:	400200a0 	.word	0x400200a0
 8001874:	400200b8 	.word	0x400200b8
 8001878:	40020410 	.word	0x40020410
 800187c:	40020428 	.word	0x40020428
 8001880:	40020440 	.word	0x40020440
 8001884:	40020458 	.word	0x40020458
 8001888:	40020470 	.word	0x40020470
 800188c:	40020488 	.word	0x40020488
 8001890:	400204a0 	.word	0x400204a0
 8001894:	400204b8 	.word	0x400204b8
 8001898:	58025408 	.word	0x58025408
 800189c:	5802541c 	.word	0x5802541c
 80018a0:	58025430 	.word	0x58025430
 80018a4:	58025444 	.word	0x58025444
 80018a8:	58025458 	.word	0x58025458
 80018ac:	5802546c 	.word	0x5802546c
 80018b0:	58025480 	.word	0x58025480
 80018b4:	58025494 	.word	0x58025494

080018b8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b086      	sub	sp, #24
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80018c0:	f7ff fba6 	bl	8001010 <HAL_GetTick>
 80018c4:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d101      	bne.n	80018d0 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80018cc:	2301      	movs	r3, #1
 80018ce:	e2dc      	b.n	8001e8a <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80018d6:	b2db      	uxtb	r3, r3
 80018d8:	2b02      	cmp	r3, #2
 80018da:	d008      	beq.n	80018ee <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	2280      	movs	r2, #128	; 0x80
 80018e0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	2200      	movs	r2, #0
 80018e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 80018ea:	2301      	movs	r3, #1
 80018ec:	e2cd      	b.n	8001e8a <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	4a76      	ldr	r2, [pc, #472]	; (8001acc <HAL_DMA_Abort+0x214>)
 80018f4:	4293      	cmp	r3, r2
 80018f6:	d04a      	beq.n	800198e <HAL_DMA_Abort+0xd6>
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	4a74      	ldr	r2, [pc, #464]	; (8001ad0 <HAL_DMA_Abort+0x218>)
 80018fe:	4293      	cmp	r3, r2
 8001900:	d045      	beq.n	800198e <HAL_DMA_Abort+0xd6>
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	4a73      	ldr	r2, [pc, #460]	; (8001ad4 <HAL_DMA_Abort+0x21c>)
 8001908:	4293      	cmp	r3, r2
 800190a:	d040      	beq.n	800198e <HAL_DMA_Abort+0xd6>
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	4a71      	ldr	r2, [pc, #452]	; (8001ad8 <HAL_DMA_Abort+0x220>)
 8001912:	4293      	cmp	r3, r2
 8001914:	d03b      	beq.n	800198e <HAL_DMA_Abort+0xd6>
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	4a70      	ldr	r2, [pc, #448]	; (8001adc <HAL_DMA_Abort+0x224>)
 800191c:	4293      	cmp	r3, r2
 800191e:	d036      	beq.n	800198e <HAL_DMA_Abort+0xd6>
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	4a6e      	ldr	r2, [pc, #440]	; (8001ae0 <HAL_DMA_Abort+0x228>)
 8001926:	4293      	cmp	r3, r2
 8001928:	d031      	beq.n	800198e <HAL_DMA_Abort+0xd6>
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	4a6d      	ldr	r2, [pc, #436]	; (8001ae4 <HAL_DMA_Abort+0x22c>)
 8001930:	4293      	cmp	r3, r2
 8001932:	d02c      	beq.n	800198e <HAL_DMA_Abort+0xd6>
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4a6b      	ldr	r2, [pc, #428]	; (8001ae8 <HAL_DMA_Abort+0x230>)
 800193a:	4293      	cmp	r3, r2
 800193c:	d027      	beq.n	800198e <HAL_DMA_Abort+0xd6>
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	4a6a      	ldr	r2, [pc, #424]	; (8001aec <HAL_DMA_Abort+0x234>)
 8001944:	4293      	cmp	r3, r2
 8001946:	d022      	beq.n	800198e <HAL_DMA_Abort+0xd6>
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	4a68      	ldr	r2, [pc, #416]	; (8001af0 <HAL_DMA_Abort+0x238>)
 800194e:	4293      	cmp	r3, r2
 8001950:	d01d      	beq.n	800198e <HAL_DMA_Abort+0xd6>
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	4a67      	ldr	r2, [pc, #412]	; (8001af4 <HAL_DMA_Abort+0x23c>)
 8001958:	4293      	cmp	r3, r2
 800195a:	d018      	beq.n	800198e <HAL_DMA_Abort+0xd6>
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	4a65      	ldr	r2, [pc, #404]	; (8001af8 <HAL_DMA_Abort+0x240>)
 8001962:	4293      	cmp	r3, r2
 8001964:	d013      	beq.n	800198e <HAL_DMA_Abort+0xd6>
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	4a64      	ldr	r2, [pc, #400]	; (8001afc <HAL_DMA_Abort+0x244>)
 800196c:	4293      	cmp	r3, r2
 800196e:	d00e      	beq.n	800198e <HAL_DMA_Abort+0xd6>
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	4a62      	ldr	r2, [pc, #392]	; (8001b00 <HAL_DMA_Abort+0x248>)
 8001976:	4293      	cmp	r3, r2
 8001978:	d009      	beq.n	800198e <HAL_DMA_Abort+0xd6>
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	4a61      	ldr	r2, [pc, #388]	; (8001b04 <HAL_DMA_Abort+0x24c>)
 8001980:	4293      	cmp	r3, r2
 8001982:	d004      	beq.n	800198e <HAL_DMA_Abort+0xd6>
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4a5f      	ldr	r2, [pc, #380]	; (8001b08 <HAL_DMA_Abort+0x250>)
 800198a:	4293      	cmp	r3, r2
 800198c:	d101      	bne.n	8001992 <HAL_DMA_Abort+0xda>
 800198e:	2301      	movs	r3, #1
 8001990:	e000      	b.n	8001994 <HAL_DMA_Abort+0xdc>
 8001992:	2300      	movs	r3, #0
 8001994:	2b00      	cmp	r3, #0
 8001996:	d013      	beq.n	80019c0 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	681a      	ldr	r2, [r3, #0]
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f022 021e 	bic.w	r2, r2, #30
 80019a6:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	695a      	ldr	r2, [r3, #20]
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80019b6:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	617b      	str	r3, [r7, #20]
 80019be:	e00a      	b.n	80019d6 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	681a      	ldr	r2, [r3, #0]
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f022 020e 	bic.w	r2, r2, #14
 80019ce:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	4a3c      	ldr	r2, [pc, #240]	; (8001acc <HAL_DMA_Abort+0x214>)
 80019dc:	4293      	cmp	r3, r2
 80019de:	d072      	beq.n	8001ac6 <HAL_DMA_Abort+0x20e>
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	4a3a      	ldr	r2, [pc, #232]	; (8001ad0 <HAL_DMA_Abort+0x218>)
 80019e6:	4293      	cmp	r3, r2
 80019e8:	d06d      	beq.n	8001ac6 <HAL_DMA_Abort+0x20e>
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	4a39      	ldr	r2, [pc, #228]	; (8001ad4 <HAL_DMA_Abort+0x21c>)
 80019f0:	4293      	cmp	r3, r2
 80019f2:	d068      	beq.n	8001ac6 <HAL_DMA_Abort+0x20e>
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	4a37      	ldr	r2, [pc, #220]	; (8001ad8 <HAL_DMA_Abort+0x220>)
 80019fa:	4293      	cmp	r3, r2
 80019fc:	d063      	beq.n	8001ac6 <HAL_DMA_Abort+0x20e>
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	4a36      	ldr	r2, [pc, #216]	; (8001adc <HAL_DMA_Abort+0x224>)
 8001a04:	4293      	cmp	r3, r2
 8001a06:	d05e      	beq.n	8001ac6 <HAL_DMA_Abort+0x20e>
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	4a34      	ldr	r2, [pc, #208]	; (8001ae0 <HAL_DMA_Abort+0x228>)
 8001a0e:	4293      	cmp	r3, r2
 8001a10:	d059      	beq.n	8001ac6 <HAL_DMA_Abort+0x20e>
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	4a33      	ldr	r2, [pc, #204]	; (8001ae4 <HAL_DMA_Abort+0x22c>)
 8001a18:	4293      	cmp	r3, r2
 8001a1a:	d054      	beq.n	8001ac6 <HAL_DMA_Abort+0x20e>
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	4a31      	ldr	r2, [pc, #196]	; (8001ae8 <HAL_DMA_Abort+0x230>)
 8001a22:	4293      	cmp	r3, r2
 8001a24:	d04f      	beq.n	8001ac6 <HAL_DMA_Abort+0x20e>
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	4a30      	ldr	r2, [pc, #192]	; (8001aec <HAL_DMA_Abort+0x234>)
 8001a2c:	4293      	cmp	r3, r2
 8001a2e:	d04a      	beq.n	8001ac6 <HAL_DMA_Abort+0x20e>
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	4a2e      	ldr	r2, [pc, #184]	; (8001af0 <HAL_DMA_Abort+0x238>)
 8001a36:	4293      	cmp	r3, r2
 8001a38:	d045      	beq.n	8001ac6 <HAL_DMA_Abort+0x20e>
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	4a2d      	ldr	r2, [pc, #180]	; (8001af4 <HAL_DMA_Abort+0x23c>)
 8001a40:	4293      	cmp	r3, r2
 8001a42:	d040      	beq.n	8001ac6 <HAL_DMA_Abort+0x20e>
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	4a2b      	ldr	r2, [pc, #172]	; (8001af8 <HAL_DMA_Abort+0x240>)
 8001a4a:	4293      	cmp	r3, r2
 8001a4c:	d03b      	beq.n	8001ac6 <HAL_DMA_Abort+0x20e>
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	4a2a      	ldr	r2, [pc, #168]	; (8001afc <HAL_DMA_Abort+0x244>)
 8001a54:	4293      	cmp	r3, r2
 8001a56:	d036      	beq.n	8001ac6 <HAL_DMA_Abort+0x20e>
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	4a28      	ldr	r2, [pc, #160]	; (8001b00 <HAL_DMA_Abort+0x248>)
 8001a5e:	4293      	cmp	r3, r2
 8001a60:	d031      	beq.n	8001ac6 <HAL_DMA_Abort+0x20e>
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	4a27      	ldr	r2, [pc, #156]	; (8001b04 <HAL_DMA_Abort+0x24c>)
 8001a68:	4293      	cmp	r3, r2
 8001a6a:	d02c      	beq.n	8001ac6 <HAL_DMA_Abort+0x20e>
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	4a25      	ldr	r2, [pc, #148]	; (8001b08 <HAL_DMA_Abort+0x250>)
 8001a72:	4293      	cmp	r3, r2
 8001a74:	d027      	beq.n	8001ac6 <HAL_DMA_Abort+0x20e>
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	4a24      	ldr	r2, [pc, #144]	; (8001b0c <HAL_DMA_Abort+0x254>)
 8001a7c:	4293      	cmp	r3, r2
 8001a7e:	d022      	beq.n	8001ac6 <HAL_DMA_Abort+0x20e>
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	4a22      	ldr	r2, [pc, #136]	; (8001b10 <HAL_DMA_Abort+0x258>)
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d01d      	beq.n	8001ac6 <HAL_DMA_Abort+0x20e>
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	4a21      	ldr	r2, [pc, #132]	; (8001b14 <HAL_DMA_Abort+0x25c>)
 8001a90:	4293      	cmp	r3, r2
 8001a92:	d018      	beq.n	8001ac6 <HAL_DMA_Abort+0x20e>
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	4a1f      	ldr	r2, [pc, #124]	; (8001b18 <HAL_DMA_Abort+0x260>)
 8001a9a:	4293      	cmp	r3, r2
 8001a9c:	d013      	beq.n	8001ac6 <HAL_DMA_Abort+0x20e>
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	4a1e      	ldr	r2, [pc, #120]	; (8001b1c <HAL_DMA_Abort+0x264>)
 8001aa4:	4293      	cmp	r3, r2
 8001aa6:	d00e      	beq.n	8001ac6 <HAL_DMA_Abort+0x20e>
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	4a1c      	ldr	r2, [pc, #112]	; (8001b20 <HAL_DMA_Abort+0x268>)
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	d009      	beq.n	8001ac6 <HAL_DMA_Abort+0x20e>
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	4a1b      	ldr	r2, [pc, #108]	; (8001b24 <HAL_DMA_Abort+0x26c>)
 8001ab8:	4293      	cmp	r3, r2
 8001aba:	d004      	beq.n	8001ac6 <HAL_DMA_Abort+0x20e>
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4a19      	ldr	r2, [pc, #100]	; (8001b28 <HAL_DMA_Abort+0x270>)
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d132      	bne.n	8001b2c <HAL_DMA_Abort+0x274>
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	e031      	b.n	8001b2e <HAL_DMA_Abort+0x276>
 8001aca:	bf00      	nop
 8001acc:	40020010 	.word	0x40020010
 8001ad0:	40020028 	.word	0x40020028
 8001ad4:	40020040 	.word	0x40020040
 8001ad8:	40020058 	.word	0x40020058
 8001adc:	40020070 	.word	0x40020070
 8001ae0:	40020088 	.word	0x40020088
 8001ae4:	400200a0 	.word	0x400200a0
 8001ae8:	400200b8 	.word	0x400200b8
 8001aec:	40020410 	.word	0x40020410
 8001af0:	40020428 	.word	0x40020428
 8001af4:	40020440 	.word	0x40020440
 8001af8:	40020458 	.word	0x40020458
 8001afc:	40020470 	.word	0x40020470
 8001b00:	40020488 	.word	0x40020488
 8001b04:	400204a0 	.word	0x400204a0
 8001b08:	400204b8 	.word	0x400204b8
 8001b0c:	58025408 	.word	0x58025408
 8001b10:	5802541c 	.word	0x5802541c
 8001b14:	58025430 	.word	0x58025430
 8001b18:	58025444 	.word	0x58025444
 8001b1c:	58025458 	.word	0x58025458
 8001b20:	5802546c 	.word	0x5802546c
 8001b24:	58025480 	.word	0x58025480
 8001b28:	58025494 	.word	0x58025494
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d007      	beq.n	8001b42 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b36:	681a      	ldr	r2, [r3, #0]
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b3c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001b40:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	4a6d      	ldr	r2, [pc, #436]	; (8001cfc <HAL_DMA_Abort+0x444>)
 8001b48:	4293      	cmp	r3, r2
 8001b4a:	d04a      	beq.n	8001be2 <HAL_DMA_Abort+0x32a>
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	4a6b      	ldr	r2, [pc, #428]	; (8001d00 <HAL_DMA_Abort+0x448>)
 8001b52:	4293      	cmp	r3, r2
 8001b54:	d045      	beq.n	8001be2 <HAL_DMA_Abort+0x32a>
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	4a6a      	ldr	r2, [pc, #424]	; (8001d04 <HAL_DMA_Abort+0x44c>)
 8001b5c:	4293      	cmp	r3, r2
 8001b5e:	d040      	beq.n	8001be2 <HAL_DMA_Abort+0x32a>
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	4a68      	ldr	r2, [pc, #416]	; (8001d08 <HAL_DMA_Abort+0x450>)
 8001b66:	4293      	cmp	r3, r2
 8001b68:	d03b      	beq.n	8001be2 <HAL_DMA_Abort+0x32a>
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	4a67      	ldr	r2, [pc, #412]	; (8001d0c <HAL_DMA_Abort+0x454>)
 8001b70:	4293      	cmp	r3, r2
 8001b72:	d036      	beq.n	8001be2 <HAL_DMA_Abort+0x32a>
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4a65      	ldr	r2, [pc, #404]	; (8001d10 <HAL_DMA_Abort+0x458>)
 8001b7a:	4293      	cmp	r3, r2
 8001b7c:	d031      	beq.n	8001be2 <HAL_DMA_Abort+0x32a>
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	4a64      	ldr	r2, [pc, #400]	; (8001d14 <HAL_DMA_Abort+0x45c>)
 8001b84:	4293      	cmp	r3, r2
 8001b86:	d02c      	beq.n	8001be2 <HAL_DMA_Abort+0x32a>
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4a62      	ldr	r2, [pc, #392]	; (8001d18 <HAL_DMA_Abort+0x460>)
 8001b8e:	4293      	cmp	r3, r2
 8001b90:	d027      	beq.n	8001be2 <HAL_DMA_Abort+0x32a>
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	4a61      	ldr	r2, [pc, #388]	; (8001d1c <HAL_DMA_Abort+0x464>)
 8001b98:	4293      	cmp	r3, r2
 8001b9a:	d022      	beq.n	8001be2 <HAL_DMA_Abort+0x32a>
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	4a5f      	ldr	r2, [pc, #380]	; (8001d20 <HAL_DMA_Abort+0x468>)
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	d01d      	beq.n	8001be2 <HAL_DMA_Abort+0x32a>
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	4a5e      	ldr	r2, [pc, #376]	; (8001d24 <HAL_DMA_Abort+0x46c>)
 8001bac:	4293      	cmp	r3, r2
 8001bae:	d018      	beq.n	8001be2 <HAL_DMA_Abort+0x32a>
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4a5c      	ldr	r2, [pc, #368]	; (8001d28 <HAL_DMA_Abort+0x470>)
 8001bb6:	4293      	cmp	r3, r2
 8001bb8:	d013      	beq.n	8001be2 <HAL_DMA_Abort+0x32a>
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	4a5b      	ldr	r2, [pc, #364]	; (8001d2c <HAL_DMA_Abort+0x474>)
 8001bc0:	4293      	cmp	r3, r2
 8001bc2:	d00e      	beq.n	8001be2 <HAL_DMA_Abort+0x32a>
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	4a59      	ldr	r2, [pc, #356]	; (8001d30 <HAL_DMA_Abort+0x478>)
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d009      	beq.n	8001be2 <HAL_DMA_Abort+0x32a>
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	4a58      	ldr	r2, [pc, #352]	; (8001d34 <HAL_DMA_Abort+0x47c>)
 8001bd4:	4293      	cmp	r3, r2
 8001bd6:	d004      	beq.n	8001be2 <HAL_DMA_Abort+0x32a>
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	4a56      	ldr	r2, [pc, #344]	; (8001d38 <HAL_DMA_Abort+0x480>)
 8001bde:	4293      	cmp	r3, r2
 8001be0:	d108      	bne.n	8001bf4 <HAL_DMA_Abort+0x33c>
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	681a      	ldr	r2, [r3, #0]
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f022 0201 	bic.w	r2, r2, #1
 8001bf0:	601a      	str	r2, [r3, #0]
 8001bf2:	e007      	b.n	8001c04 <HAL_DMA_Abort+0x34c>
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	681a      	ldr	r2, [r3, #0]
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f022 0201 	bic.w	r2, r2, #1
 8001c02:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8001c04:	e013      	b.n	8001c2e <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001c06:	f7ff fa03 	bl	8001010 <HAL_GetTick>
 8001c0a:	4602      	mov	r2, r0
 8001c0c:	693b      	ldr	r3, [r7, #16]
 8001c0e:	1ad3      	subs	r3, r2, r3
 8001c10:	2b05      	cmp	r3, #5
 8001c12:	d90c      	bls.n	8001c2e <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	2220      	movs	r2, #32
 8001c18:	655a      	str	r2, [r3, #84]	; 0x54

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	2203      	movs	r2, #3
 8001c26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	e12d      	b.n	8001e8a <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8001c2e:	697b      	ldr	r3, [r7, #20]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f003 0301 	and.w	r3, r3, #1
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d1e5      	bne.n	8001c06 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	4a2f      	ldr	r2, [pc, #188]	; (8001cfc <HAL_DMA_Abort+0x444>)
 8001c40:	4293      	cmp	r3, r2
 8001c42:	d04a      	beq.n	8001cda <HAL_DMA_Abort+0x422>
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	4a2d      	ldr	r2, [pc, #180]	; (8001d00 <HAL_DMA_Abort+0x448>)
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	d045      	beq.n	8001cda <HAL_DMA_Abort+0x422>
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	4a2c      	ldr	r2, [pc, #176]	; (8001d04 <HAL_DMA_Abort+0x44c>)
 8001c54:	4293      	cmp	r3, r2
 8001c56:	d040      	beq.n	8001cda <HAL_DMA_Abort+0x422>
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4a2a      	ldr	r2, [pc, #168]	; (8001d08 <HAL_DMA_Abort+0x450>)
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d03b      	beq.n	8001cda <HAL_DMA_Abort+0x422>
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	4a29      	ldr	r2, [pc, #164]	; (8001d0c <HAL_DMA_Abort+0x454>)
 8001c68:	4293      	cmp	r3, r2
 8001c6a:	d036      	beq.n	8001cda <HAL_DMA_Abort+0x422>
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	4a27      	ldr	r2, [pc, #156]	; (8001d10 <HAL_DMA_Abort+0x458>)
 8001c72:	4293      	cmp	r3, r2
 8001c74:	d031      	beq.n	8001cda <HAL_DMA_Abort+0x422>
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	4a26      	ldr	r2, [pc, #152]	; (8001d14 <HAL_DMA_Abort+0x45c>)
 8001c7c:	4293      	cmp	r3, r2
 8001c7e:	d02c      	beq.n	8001cda <HAL_DMA_Abort+0x422>
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	4a24      	ldr	r2, [pc, #144]	; (8001d18 <HAL_DMA_Abort+0x460>)
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d027      	beq.n	8001cda <HAL_DMA_Abort+0x422>
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	4a23      	ldr	r2, [pc, #140]	; (8001d1c <HAL_DMA_Abort+0x464>)
 8001c90:	4293      	cmp	r3, r2
 8001c92:	d022      	beq.n	8001cda <HAL_DMA_Abort+0x422>
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	4a21      	ldr	r2, [pc, #132]	; (8001d20 <HAL_DMA_Abort+0x468>)
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d01d      	beq.n	8001cda <HAL_DMA_Abort+0x422>
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	4a20      	ldr	r2, [pc, #128]	; (8001d24 <HAL_DMA_Abort+0x46c>)
 8001ca4:	4293      	cmp	r3, r2
 8001ca6:	d018      	beq.n	8001cda <HAL_DMA_Abort+0x422>
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4a1e      	ldr	r2, [pc, #120]	; (8001d28 <HAL_DMA_Abort+0x470>)
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d013      	beq.n	8001cda <HAL_DMA_Abort+0x422>
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	4a1d      	ldr	r2, [pc, #116]	; (8001d2c <HAL_DMA_Abort+0x474>)
 8001cb8:	4293      	cmp	r3, r2
 8001cba:	d00e      	beq.n	8001cda <HAL_DMA_Abort+0x422>
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4a1b      	ldr	r2, [pc, #108]	; (8001d30 <HAL_DMA_Abort+0x478>)
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d009      	beq.n	8001cda <HAL_DMA_Abort+0x422>
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	4a1a      	ldr	r2, [pc, #104]	; (8001d34 <HAL_DMA_Abort+0x47c>)
 8001ccc:	4293      	cmp	r3, r2
 8001cce:	d004      	beq.n	8001cda <HAL_DMA_Abort+0x422>
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	4a18      	ldr	r2, [pc, #96]	; (8001d38 <HAL_DMA_Abort+0x480>)
 8001cd6:	4293      	cmp	r3, r2
 8001cd8:	d101      	bne.n	8001cde <HAL_DMA_Abort+0x426>
 8001cda:	2301      	movs	r3, #1
 8001cdc:	e000      	b.n	8001ce0 <HAL_DMA_Abort+0x428>
 8001cde:	2300      	movs	r3, #0
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d02b      	beq.n	8001d3c <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ce8:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cee:	f003 031f 	and.w	r3, r3, #31
 8001cf2:	223f      	movs	r2, #63	; 0x3f
 8001cf4:	409a      	lsls	r2, r3
 8001cf6:	68bb      	ldr	r3, [r7, #8]
 8001cf8:	609a      	str	r2, [r3, #8]
 8001cfa:	e02a      	b.n	8001d52 <HAL_DMA_Abort+0x49a>
 8001cfc:	40020010 	.word	0x40020010
 8001d00:	40020028 	.word	0x40020028
 8001d04:	40020040 	.word	0x40020040
 8001d08:	40020058 	.word	0x40020058
 8001d0c:	40020070 	.word	0x40020070
 8001d10:	40020088 	.word	0x40020088
 8001d14:	400200a0 	.word	0x400200a0
 8001d18:	400200b8 	.word	0x400200b8
 8001d1c:	40020410 	.word	0x40020410
 8001d20:	40020428 	.word	0x40020428
 8001d24:	40020440 	.word	0x40020440
 8001d28:	40020458 	.word	0x40020458
 8001d2c:	40020470 	.word	0x40020470
 8001d30:	40020488 	.word	0x40020488
 8001d34:	400204a0 	.word	0x400204a0
 8001d38:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d40:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d46:	f003 031f 	and.w	r3, r3, #31
 8001d4a:	2201      	movs	r2, #1
 8001d4c:	409a      	lsls	r2, r3
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	4a4f      	ldr	r2, [pc, #316]	; (8001e94 <HAL_DMA_Abort+0x5dc>)
 8001d58:	4293      	cmp	r3, r2
 8001d5a:	d072      	beq.n	8001e42 <HAL_DMA_Abort+0x58a>
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	4a4d      	ldr	r2, [pc, #308]	; (8001e98 <HAL_DMA_Abort+0x5e0>)
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d06d      	beq.n	8001e42 <HAL_DMA_Abort+0x58a>
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	4a4c      	ldr	r2, [pc, #304]	; (8001e9c <HAL_DMA_Abort+0x5e4>)
 8001d6c:	4293      	cmp	r3, r2
 8001d6e:	d068      	beq.n	8001e42 <HAL_DMA_Abort+0x58a>
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	4a4a      	ldr	r2, [pc, #296]	; (8001ea0 <HAL_DMA_Abort+0x5e8>)
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d063      	beq.n	8001e42 <HAL_DMA_Abort+0x58a>
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	4a49      	ldr	r2, [pc, #292]	; (8001ea4 <HAL_DMA_Abort+0x5ec>)
 8001d80:	4293      	cmp	r3, r2
 8001d82:	d05e      	beq.n	8001e42 <HAL_DMA_Abort+0x58a>
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	4a47      	ldr	r2, [pc, #284]	; (8001ea8 <HAL_DMA_Abort+0x5f0>)
 8001d8a:	4293      	cmp	r3, r2
 8001d8c:	d059      	beq.n	8001e42 <HAL_DMA_Abort+0x58a>
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	4a46      	ldr	r2, [pc, #280]	; (8001eac <HAL_DMA_Abort+0x5f4>)
 8001d94:	4293      	cmp	r3, r2
 8001d96:	d054      	beq.n	8001e42 <HAL_DMA_Abort+0x58a>
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	4a44      	ldr	r2, [pc, #272]	; (8001eb0 <HAL_DMA_Abort+0x5f8>)
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	d04f      	beq.n	8001e42 <HAL_DMA_Abort+0x58a>
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	4a43      	ldr	r2, [pc, #268]	; (8001eb4 <HAL_DMA_Abort+0x5fc>)
 8001da8:	4293      	cmp	r3, r2
 8001daa:	d04a      	beq.n	8001e42 <HAL_DMA_Abort+0x58a>
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	4a41      	ldr	r2, [pc, #260]	; (8001eb8 <HAL_DMA_Abort+0x600>)
 8001db2:	4293      	cmp	r3, r2
 8001db4:	d045      	beq.n	8001e42 <HAL_DMA_Abort+0x58a>
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	4a40      	ldr	r2, [pc, #256]	; (8001ebc <HAL_DMA_Abort+0x604>)
 8001dbc:	4293      	cmp	r3, r2
 8001dbe:	d040      	beq.n	8001e42 <HAL_DMA_Abort+0x58a>
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4a3e      	ldr	r2, [pc, #248]	; (8001ec0 <HAL_DMA_Abort+0x608>)
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	d03b      	beq.n	8001e42 <HAL_DMA_Abort+0x58a>
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	4a3d      	ldr	r2, [pc, #244]	; (8001ec4 <HAL_DMA_Abort+0x60c>)
 8001dd0:	4293      	cmp	r3, r2
 8001dd2:	d036      	beq.n	8001e42 <HAL_DMA_Abort+0x58a>
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4a3b      	ldr	r2, [pc, #236]	; (8001ec8 <HAL_DMA_Abort+0x610>)
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d031      	beq.n	8001e42 <HAL_DMA_Abort+0x58a>
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	4a3a      	ldr	r2, [pc, #232]	; (8001ecc <HAL_DMA_Abort+0x614>)
 8001de4:	4293      	cmp	r3, r2
 8001de6:	d02c      	beq.n	8001e42 <HAL_DMA_Abort+0x58a>
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	4a38      	ldr	r2, [pc, #224]	; (8001ed0 <HAL_DMA_Abort+0x618>)
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d027      	beq.n	8001e42 <HAL_DMA_Abort+0x58a>
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	4a37      	ldr	r2, [pc, #220]	; (8001ed4 <HAL_DMA_Abort+0x61c>)
 8001df8:	4293      	cmp	r3, r2
 8001dfa:	d022      	beq.n	8001e42 <HAL_DMA_Abort+0x58a>
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4a35      	ldr	r2, [pc, #212]	; (8001ed8 <HAL_DMA_Abort+0x620>)
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d01d      	beq.n	8001e42 <HAL_DMA_Abort+0x58a>
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	4a34      	ldr	r2, [pc, #208]	; (8001edc <HAL_DMA_Abort+0x624>)
 8001e0c:	4293      	cmp	r3, r2
 8001e0e:	d018      	beq.n	8001e42 <HAL_DMA_Abort+0x58a>
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	4a32      	ldr	r2, [pc, #200]	; (8001ee0 <HAL_DMA_Abort+0x628>)
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d013      	beq.n	8001e42 <HAL_DMA_Abort+0x58a>
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	4a31      	ldr	r2, [pc, #196]	; (8001ee4 <HAL_DMA_Abort+0x62c>)
 8001e20:	4293      	cmp	r3, r2
 8001e22:	d00e      	beq.n	8001e42 <HAL_DMA_Abort+0x58a>
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	4a2f      	ldr	r2, [pc, #188]	; (8001ee8 <HAL_DMA_Abort+0x630>)
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d009      	beq.n	8001e42 <HAL_DMA_Abort+0x58a>
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	4a2e      	ldr	r2, [pc, #184]	; (8001eec <HAL_DMA_Abort+0x634>)
 8001e34:	4293      	cmp	r3, r2
 8001e36:	d004      	beq.n	8001e42 <HAL_DMA_Abort+0x58a>
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	4a2c      	ldr	r2, [pc, #176]	; (8001ef0 <HAL_DMA_Abort+0x638>)
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d101      	bne.n	8001e46 <HAL_DMA_Abort+0x58e>
 8001e42:	2301      	movs	r3, #1
 8001e44:	e000      	b.n	8001e48 <HAL_DMA_Abort+0x590>
 8001e46:	2300      	movs	r3, #0
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d015      	beq.n	8001e78 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001e50:	687a      	ldr	r2, [r7, #4]
 8001e52:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8001e54:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d00c      	beq.n	8001e78 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001e62:	681a      	ldr	r2, [r3, #0]
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001e68:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001e6c:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e72:	687a      	ldr	r2, [r7, #4]
 8001e74:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8001e76:	605a      	str	r2, [r3, #4]
      }
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2201      	movs	r2, #1
 8001e84:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }

  return HAL_OK;
 8001e88:	2300      	movs	r3, #0
}
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	3718      	adds	r7, #24
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bd80      	pop	{r7, pc}
 8001e92:	bf00      	nop
 8001e94:	40020010 	.word	0x40020010
 8001e98:	40020028 	.word	0x40020028
 8001e9c:	40020040 	.word	0x40020040
 8001ea0:	40020058 	.word	0x40020058
 8001ea4:	40020070 	.word	0x40020070
 8001ea8:	40020088 	.word	0x40020088
 8001eac:	400200a0 	.word	0x400200a0
 8001eb0:	400200b8 	.word	0x400200b8
 8001eb4:	40020410 	.word	0x40020410
 8001eb8:	40020428 	.word	0x40020428
 8001ebc:	40020440 	.word	0x40020440
 8001ec0:	40020458 	.word	0x40020458
 8001ec4:	40020470 	.word	0x40020470
 8001ec8:	40020488 	.word	0x40020488
 8001ecc:	400204a0 	.word	0x400204a0
 8001ed0:	400204b8 	.word	0x400204b8
 8001ed4:	58025408 	.word	0x58025408
 8001ed8:	5802541c 	.word	0x5802541c
 8001edc:	58025430 	.word	0x58025430
 8001ee0:	58025444 	.word	0x58025444
 8001ee4:	58025458 	.word	0x58025458
 8001ee8:	5802546c 	.word	0x5802546c
 8001eec:	58025480 	.word	0x58025480
 8001ef0:	58025494 	.word	0x58025494

08001ef4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b084      	sub	sp, #16
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d101      	bne.n	8001f06 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8001f02:	2301      	movs	r3, #1
 8001f04:	e205      	b.n	8002312 <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001f0c:	b2db      	uxtb	r3, r3
 8001f0e:	2b02      	cmp	r3, #2
 8001f10:	d004      	beq.n	8001f1c <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	2280      	movs	r2, #128	; 0x80
 8001f16:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001f18:	2301      	movs	r3, #1
 8001f1a:	e1fa      	b.n	8002312 <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	4a8c      	ldr	r2, [pc, #560]	; (8002154 <HAL_DMA_Abort_IT+0x260>)
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d04a      	beq.n	8001fbc <HAL_DMA_Abort_IT+0xc8>
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	4a8b      	ldr	r2, [pc, #556]	; (8002158 <HAL_DMA_Abort_IT+0x264>)
 8001f2c:	4293      	cmp	r3, r2
 8001f2e:	d045      	beq.n	8001fbc <HAL_DMA_Abort_IT+0xc8>
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4a89      	ldr	r2, [pc, #548]	; (800215c <HAL_DMA_Abort_IT+0x268>)
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d040      	beq.n	8001fbc <HAL_DMA_Abort_IT+0xc8>
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	4a88      	ldr	r2, [pc, #544]	; (8002160 <HAL_DMA_Abort_IT+0x26c>)
 8001f40:	4293      	cmp	r3, r2
 8001f42:	d03b      	beq.n	8001fbc <HAL_DMA_Abort_IT+0xc8>
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	4a86      	ldr	r2, [pc, #536]	; (8002164 <HAL_DMA_Abort_IT+0x270>)
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d036      	beq.n	8001fbc <HAL_DMA_Abort_IT+0xc8>
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	4a85      	ldr	r2, [pc, #532]	; (8002168 <HAL_DMA_Abort_IT+0x274>)
 8001f54:	4293      	cmp	r3, r2
 8001f56:	d031      	beq.n	8001fbc <HAL_DMA_Abort_IT+0xc8>
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	4a83      	ldr	r2, [pc, #524]	; (800216c <HAL_DMA_Abort_IT+0x278>)
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	d02c      	beq.n	8001fbc <HAL_DMA_Abort_IT+0xc8>
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	4a82      	ldr	r2, [pc, #520]	; (8002170 <HAL_DMA_Abort_IT+0x27c>)
 8001f68:	4293      	cmp	r3, r2
 8001f6a:	d027      	beq.n	8001fbc <HAL_DMA_Abort_IT+0xc8>
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	4a80      	ldr	r2, [pc, #512]	; (8002174 <HAL_DMA_Abort_IT+0x280>)
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d022      	beq.n	8001fbc <HAL_DMA_Abort_IT+0xc8>
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	4a7f      	ldr	r2, [pc, #508]	; (8002178 <HAL_DMA_Abort_IT+0x284>)
 8001f7c:	4293      	cmp	r3, r2
 8001f7e:	d01d      	beq.n	8001fbc <HAL_DMA_Abort_IT+0xc8>
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	4a7d      	ldr	r2, [pc, #500]	; (800217c <HAL_DMA_Abort_IT+0x288>)
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d018      	beq.n	8001fbc <HAL_DMA_Abort_IT+0xc8>
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	4a7c      	ldr	r2, [pc, #496]	; (8002180 <HAL_DMA_Abort_IT+0x28c>)
 8001f90:	4293      	cmp	r3, r2
 8001f92:	d013      	beq.n	8001fbc <HAL_DMA_Abort_IT+0xc8>
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	4a7a      	ldr	r2, [pc, #488]	; (8002184 <HAL_DMA_Abort_IT+0x290>)
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d00e      	beq.n	8001fbc <HAL_DMA_Abort_IT+0xc8>
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	4a79      	ldr	r2, [pc, #484]	; (8002188 <HAL_DMA_Abort_IT+0x294>)
 8001fa4:	4293      	cmp	r3, r2
 8001fa6:	d009      	beq.n	8001fbc <HAL_DMA_Abort_IT+0xc8>
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	4a77      	ldr	r2, [pc, #476]	; (800218c <HAL_DMA_Abort_IT+0x298>)
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d004      	beq.n	8001fbc <HAL_DMA_Abort_IT+0xc8>
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	4a76      	ldr	r2, [pc, #472]	; (8002190 <HAL_DMA_Abort_IT+0x29c>)
 8001fb8:	4293      	cmp	r3, r2
 8001fba:	d101      	bne.n	8001fc0 <HAL_DMA_Abort_IT+0xcc>
 8001fbc:	2301      	movs	r3, #1
 8001fbe:	e000      	b.n	8001fc2 <HAL_DMA_Abort_IT+0xce>
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d065      	beq.n	8002092 <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	2204      	movs	r2, #4
 8001fca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	4a60      	ldr	r2, [pc, #384]	; (8002154 <HAL_DMA_Abort_IT+0x260>)
 8001fd4:	4293      	cmp	r3, r2
 8001fd6:	d04a      	beq.n	800206e <HAL_DMA_Abort_IT+0x17a>
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4a5e      	ldr	r2, [pc, #376]	; (8002158 <HAL_DMA_Abort_IT+0x264>)
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d045      	beq.n	800206e <HAL_DMA_Abort_IT+0x17a>
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	4a5d      	ldr	r2, [pc, #372]	; (800215c <HAL_DMA_Abort_IT+0x268>)
 8001fe8:	4293      	cmp	r3, r2
 8001fea:	d040      	beq.n	800206e <HAL_DMA_Abort_IT+0x17a>
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	4a5b      	ldr	r2, [pc, #364]	; (8002160 <HAL_DMA_Abort_IT+0x26c>)
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d03b      	beq.n	800206e <HAL_DMA_Abort_IT+0x17a>
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	4a5a      	ldr	r2, [pc, #360]	; (8002164 <HAL_DMA_Abort_IT+0x270>)
 8001ffc:	4293      	cmp	r3, r2
 8001ffe:	d036      	beq.n	800206e <HAL_DMA_Abort_IT+0x17a>
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	4a58      	ldr	r2, [pc, #352]	; (8002168 <HAL_DMA_Abort_IT+0x274>)
 8002006:	4293      	cmp	r3, r2
 8002008:	d031      	beq.n	800206e <HAL_DMA_Abort_IT+0x17a>
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	4a57      	ldr	r2, [pc, #348]	; (800216c <HAL_DMA_Abort_IT+0x278>)
 8002010:	4293      	cmp	r3, r2
 8002012:	d02c      	beq.n	800206e <HAL_DMA_Abort_IT+0x17a>
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	4a55      	ldr	r2, [pc, #340]	; (8002170 <HAL_DMA_Abort_IT+0x27c>)
 800201a:	4293      	cmp	r3, r2
 800201c:	d027      	beq.n	800206e <HAL_DMA_Abort_IT+0x17a>
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	4a54      	ldr	r2, [pc, #336]	; (8002174 <HAL_DMA_Abort_IT+0x280>)
 8002024:	4293      	cmp	r3, r2
 8002026:	d022      	beq.n	800206e <HAL_DMA_Abort_IT+0x17a>
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	4a52      	ldr	r2, [pc, #328]	; (8002178 <HAL_DMA_Abort_IT+0x284>)
 800202e:	4293      	cmp	r3, r2
 8002030:	d01d      	beq.n	800206e <HAL_DMA_Abort_IT+0x17a>
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	4a51      	ldr	r2, [pc, #324]	; (800217c <HAL_DMA_Abort_IT+0x288>)
 8002038:	4293      	cmp	r3, r2
 800203a:	d018      	beq.n	800206e <HAL_DMA_Abort_IT+0x17a>
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	4a4f      	ldr	r2, [pc, #316]	; (8002180 <HAL_DMA_Abort_IT+0x28c>)
 8002042:	4293      	cmp	r3, r2
 8002044:	d013      	beq.n	800206e <HAL_DMA_Abort_IT+0x17a>
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	4a4e      	ldr	r2, [pc, #312]	; (8002184 <HAL_DMA_Abort_IT+0x290>)
 800204c:	4293      	cmp	r3, r2
 800204e:	d00e      	beq.n	800206e <HAL_DMA_Abort_IT+0x17a>
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	4a4c      	ldr	r2, [pc, #304]	; (8002188 <HAL_DMA_Abort_IT+0x294>)
 8002056:	4293      	cmp	r3, r2
 8002058:	d009      	beq.n	800206e <HAL_DMA_Abort_IT+0x17a>
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	4a4b      	ldr	r2, [pc, #300]	; (800218c <HAL_DMA_Abort_IT+0x298>)
 8002060:	4293      	cmp	r3, r2
 8002062:	d004      	beq.n	800206e <HAL_DMA_Abort_IT+0x17a>
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	4a49      	ldr	r2, [pc, #292]	; (8002190 <HAL_DMA_Abort_IT+0x29c>)
 800206a:	4293      	cmp	r3, r2
 800206c:	d108      	bne.n	8002080 <HAL_DMA_Abort_IT+0x18c>
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	681a      	ldr	r2, [r3, #0]
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f022 0201 	bic.w	r2, r2, #1
 800207c:	601a      	str	r2, [r3, #0]
 800207e:	e147      	b.n	8002310 <HAL_DMA_Abort_IT+0x41c>
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	681a      	ldr	r2, [r3, #0]
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f022 0201 	bic.w	r2, r2, #1
 800208e:	601a      	str	r2, [r3, #0]
 8002090:	e13e      	b.n	8002310 <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	681a      	ldr	r2, [r3, #0]
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f022 020e 	bic.w	r2, r2, #14
 80020a0:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	4a2b      	ldr	r2, [pc, #172]	; (8002154 <HAL_DMA_Abort_IT+0x260>)
 80020a8:	4293      	cmp	r3, r2
 80020aa:	d04a      	beq.n	8002142 <HAL_DMA_Abort_IT+0x24e>
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	4a29      	ldr	r2, [pc, #164]	; (8002158 <HAL_DMA_Abort_IT+0x264>)
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d045      	beq.n	8002142 <HAL_DMA_Abort_IT+0x24e>
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	4a28      	ldr	r2, [pc, #160]	; (800215c <HAL_DMA_Abort_IT+0x268>)
 80020bc:	4293      	cmp	r3, r2
 80020be:	d040      	beq.n	8002142 <HAL_DMA_Abort_IT+0x24e>
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	4a26      	ldr	r2, [pc, #152]	; (8002160 <HAL_DMA_Abort_IT+0x26c>)
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d03b      	beq.n	8002142 <HAL_DMA_Abort_IT+0x24e>
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	4a25      	ldr	r2, [pc, #148]	; (8002164 <HAL_DMA_Abort_IT+0x270>)
 80020d0:	4293      	cmp	r3, r2
 80020d2:	d036      	beq.n	8002142 <HAL_DMA_Abort_IT+0x24e>
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	4a23      	ldr	r2, [pc, #140]	; (8002168 <HAL_DMA_Abort_IT+0x274>)
 80020da:	4293      	cmp	r3, r2
 80020dc:	d031      	beq.n	8002142 <HAL_DMA_Abort_IT+0x24e>
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	4a22      	ldr	r2, [pc, #136]	; (800216c <HAL_DMA_Abort_IT+0x278>)
 80020e4:	4293      	cmp	r3, r2
 80020e6:	d02c      	beq.n	8002142 <HAL_DMA_Abort_IT+0x24e>
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	4a20      	ldr	r2, [pc, #128]	; (8002170 <HAL_DMA_Abort_IT+0x27c>)
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d027      	beq.n	8002142 <HAL_DMA_Abort_IT+0x24e>
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	4a1f      	ldr	r2, [pc, #124]	; (8002174 <HAL_DMA_Abort_IT+0x280>)
 80020f8:	4293      	cmp	r3, r2
 80020fa:	d022      	beq.n	8002142 <HAL_DMA_Abort_IT+0x24e>
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	4a1d      	ldr	r2, [pc, #116]	; (8002178 <HAL_DMA_Abort_IT+0x284>)
 8002102:	4293      	cmp	r3, r2
 8002104:	d01d      	beq.n	8002142 <HAL_DMA_Abort_IT+0x24e>
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	4a1c      	ldr	r2, [pc, #112]	; (800217c <HAL_DMA_Abort_IT+0x288>)
 800210c:	4293      	cmp	r3, r2
 800210e:	d018      	beq.n	8002142 <HAL_DMA_Abort_IT+0x24e>
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	4a1a      	ldr	r2, [pc, #104]	; (8002180 <HAL_DMA_Abort_IT+0x28c>)
 8002116:	4293      	cmp	r3, r2
 8002118:	d013      	beq.n	8002142 <HAL_DMA_Abort_IT+0x24e>
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	4a19      	ldr	r2, [pc, #100]	; (8002184 <HAL_DMA_Abort_IT+0x290>)
 8002120:	4293      	cmp	r3, r2
 8002122:	d00e      	beq.n	8002142 <HAL_DMA_Abort_IT+0x24e>
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	4a17      	ldr	r2, [pc, #92]	; (8002188 <HAL_DMA_Abort_IT+0x294>)
 800212a:	4293      	cmp	r3, r2
 800212c:	d009      	beq.n	8002142 <HAL_DMA_Abort_IT+0x24e>
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	4a16      	ldr	r2, [pc, #88]	; (800218c <HAL_DMA_Abort_IT+0x298>)
 8002134:	4293      	cmp	r3, r2
 8002136:	d004      	beq.n	8002142 <HAL_DMA_Abort_IT+0x24e>
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	4a14      	ldr	r2, [pc, #80]	; (8002190 <HAL_DMA_Abort_IT+0x29c>)
 800213e:	4293      	cmp	r3, r2
 8002140:	d128      	bne.n	8002194 <HAL_DMA_Abort_IT+0x2a0>
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	681a      	ldr	r2, [r3, #0]
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f022 0201 	bic.w	r2, r2, #1
 8002150:	601a      	str	r2, [r3, #0]
 8002152:	e027      	b.n	80021a4 <HAL_DMA_Abort_IT+0x2b0>
 8002154:	40020010 	.word	0x40020010
 8002158:	40020028 	.word	0x40020028
 800215c:	40020040 	.word	0x40020040
 8002160:	40020058 	.word	0x40020058
 8002164:	40020070 	.word	0x40020070
 8002168:	40020088 	.word	0x40020088
 800216c:	400200a0 	.word	0x400200a0
 8002170:	400200b8 	.word	0x400200b8
 8002174:	40020410 	.word	0x40020410
 8002178:	40020428 	.word	0x40020428
 800217c:	40020440 	.word	0x40020440
 8002180:	40020458 	.word	0x40020458
 8002184:	40020470 	.word	0x40020470
 8002188:	40020488 	.word	0x40020488
 800218c:	400204a0 	.word	0x400204a0
 8002190:	400204b8 	.word	0x400204b8
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	681a      	ldr	r2, [r3, #0]
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f022 0201 	bic.w	r2, r2, #1
 80021a2:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4a5c      	ldr	r2, [pc, #368]	; (800231c <HAL_DMA_Abort_IT+0x428>)
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d072      	beq.n	8002294 <HAL_DMA_Abort_IT+0x3a0>
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	4a5b      	ldr	r2, [pc, #364]	; (8002320 <HAL_DMA_Abort_IT+0x42c>)
 80021b4:	4293      	cmp	r3, r2
 80021b6:	d06d      	beq.n	8002294 <HAL_DMA_Abort_IT+0x3a0>
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	4a59      	ldr	r2, [pc, #356]	; (8002324 <HAL_DMA_Abort_IT+0x430>)
 80021be:	4293      	cmp	r3, r2
 80021c0:	d068      	beq.n	8002294 <HAL_DMA_Abort_IT+0x3a0>
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	4a58      	ldr	r2, [pc, #352]	; (8002328 <HAL_DMA_Abort_IT+0x434>)
 80021c8:	4293      	cmp	r3, r2
 80021ca:	d063      	beq.n	8002294 <HAL_DMA_Abort_IT+0x3a0>
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4a56      	ldr	r2, [pc, #344]	; (800232c <HAL_DMA_Abort_IT+0x438>)
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d05e      	beq.n	8002294 <HAL_DMA_Abort_IT+0x3a0>
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	4a55      	ldr	r2, [pc, #340]	; (8002330 <HAL_DMA_Abort_IT+0x43c>)
 80021dc:	4293      	cmp	r3, r2
 80021de:	d059      	beq.n	8002294 <HAL_DMA_Abort_IT+0x3a0>
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	4a53      	ldr	r2, [pc, #332]	; (8002334 <HAL_DMA_Abort_IT+0x440>)
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d054      	beq.n	8002294 <HAL_DMA_Abort_IT+0x3a0>
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	4a52      	ldr	r2, [pc, #328]	; (8002338 <HAL_DMA_Abort_IT+0x444>)
 80021f0:	4293      	cmp	r3, r2
 80021f2:	d04f      	beq.n	8002294 <HAL_DMA_Abort_IT+0x3a0>
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	4a50      	ldr	r2, [pc, #320]	; (800233c <HAL_DMA_Abort_IT+0x448>)
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d04a      	beq.n	8002294 <HAL_DMA_Abort_IT+0x3a0>
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	4a4f      	ldr	r2, [pc, #316]	; (8002340 <HAL_DMA_Abort_IT+0x44c>)
 8002204:	4293      	cmp	r3, r2
 8002206:	d045      	beq.n	8002294 <HAL_DMA_Abort_IT+0x3a0>
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4a4d      	ldr	r2, [pc, #308]	; (8002344 <HAL_DMA_Abort_IT+0x450>)
 800220e:	4293      	cmp	r3, r2
 8002210:	d040      	beq.n	8002294 <HAL_DMA_Abort_IT+0x3a0>
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	4a4c      	ldr	r2, [pc, #304]	; (8002348 <HAL_DMA_Abort_IT+0x454>)
 8002218:	4293      	cmp	r3, r2
 800221a:	d03b      	beq.n	8002294 <HAL_DMA_Abort_IT+0x3a0>
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	4a4a      	ldr	r2, [pc, #296]	; (800234c <HAL_DMA_Abort_IT+0x458>)
 8002222:	4293      	cmp	r3, r2
 8002224:	d036      	beq.n	8002294 <HAL_DMA_Abort_IT+0x3a0>
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	4a49      	ldr	r2, [pc, #292]	; (8002350 <HAL_DMA_Abort_IT+0x45c>)
 800222c:	4293      	cmp	r3, r2
 800222e:	d031      	beq.n	8002294 <HAL_DMA_Abort_IT+0x3a0>
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	4a47      	ldr	r2, [pc, #284]	; (8002354 <HAL_DMA_Abort_IT+0x460>)
 8002236:	4293      	cmp	r3, r2
 8002238:	d02c      	beq.n	8002294 <HAL_DMA_Abort_IT+0x3a0>
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	4a46      	ldr	r2, [pc, #280]	; (8002358 <HAL_DMA_Abort_IT+0x464>)
 8002240:	4293      	cmp	r3, r2
 8002242:	d027      	beq.n	8002294 <HAL_DMA_Abort_IT+0x3a0>
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	4a44      	ldr	r2, [pc, #272]	; (800235c <HAL_DMA_Abort_IT+0x468>)
 800224a:	4293      	cmp	r3, r2
 800224c:	d022      	beq.n	8002294 <HAL_DMA_Abort_IT+0x3a0>
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	4a43      	ldr	r2, [pc, #268]	; (8002360 <HAL_DMA_Abort_IT+0x46c>)
 8002254:	4293      	cmp	r3, r2
 8002256:	d01d      	beq.n	8002294 <HAL_DMA_Abort_IT+0x3a0>
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	4a41      	ldr	r2, [pc, #260]	; (8002364 <HAL_DMA_Abort_IT+0x470>)
 800225e:	4293      	cmp	r3, r2
 8002260:	d018      	beq.n	8002294 <HAL_DMA_Abort_IT+0x3a0>
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	4a40      	ldr	r2, [pc, #256]	; (8002368 <HAL_DMA_Abort_IT+0x474>)
 8002268:	4293      	cmp	r3, r2
 800226a:	d013      	beq.n	8002294 <HAL_DMA_Abort_IT+0x3a0>
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4a3e      	ldr	r2, [pc, #248]	; (800236c <HAL_DMA_Abort_IT+0x478>)
 8002272:	4293      	cmp	r3, r2
 8002274:	d00e      	beq.n	8002294 <HAL_DMA_Abort_IT+0x3a0>
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	4a3d      	ldr	r2, [pc, #244]	; (8002370 <HAL_DMA_Abort_IT+0x47c>)
 800227c:	4293      	cmp	r3, r2
 800227e:	d009      	beq.n	8002294 <HAL_DMA_Abort_IT+0x3a0>
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4a3b      	ldr	r2, [pc, #236]	; (8002374 <HAL_DMA_Abort_IT+0x480>)
 8002286:	4293      	cmp	r3, r2
 8002288:	d004      	beq.n	8002294 <HAL_DMA_Abort_IT+0x3a0>
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	4a3a      	ldr	r2, [pc, #232]	; (8002378 <HAL_DMA_Abort_IT+0x484>)
 8002290:	4293      	cmp	r3, r2
 8002292:	d101      	bne.n	8002298 <HAL_DMA_Abort_IT+0x3a4>
 8002294:	2301      	movs	r3, #1
 8002296:	e000      	b.n	800229a <HAL_DMA_Abort_IT+0x3a6>
 8002298:	2300      	movs	r3, #0
 800229a:	2b00      	cmp	r3, #0
 800229c:	d028      	beq.n	80022f0 <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022a2:	681a      	ldr	r2, [r3, #0]
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022a8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80022ac:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022b2:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022b8:	f003 031f 	and.w	r3, r3, #31
 80022bc:	2201      	movs	r2, #1
 80022be:	409a      	lsls	r2, r3
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80022c8:	687a      	ldr	r2, [r7, #4]
 80022ca:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80022cc:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d00c      	beq.n	80022f0 <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80022da:	681a      	ldr	r2, [r3, #0]
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80022e0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80022e4:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022ea:	687a      	ldr	r2, [r7, #4]
 80022ec:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80022ee:	605a      	str	r2, [r3, #4]
        }
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2200      	movs	r2, #0
 80022f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2201      	movs	r2, #1
 80022fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002304:	2b00      	cmp	r3, #0
 8002306:	d003      	beq.n	8002310 <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800230c:	6878      	ldr	r0, [r7, #4]
 800230e:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8002310:	2300      	movs	r3, #0
}
 8002312:	4618      	mov	r0, r3
 8002314:	3710      	adds	r7, #16
 8002316:	46bd      	mov	sp, r7
 8002318:	bd80      	pop	{r7, pc}
 800231a:	bf00      	nop
 800231c:	40020010 	.word	0x40020010
 8002320:	40020028 	.word	0x40020028
 8002324:	40020040 	.word	0x40020040
 8002328:	40020058 	.word	0x40020058
 800232c:	40020070 	.word	0x40020070
 8002330:	40020088 	.word	0x40020088
 8002334:	400200a0 	.word	0x400200a0
 8002338:	400200b8 	.word	0x400200b8
 800233c:	40020410 	.word	0x40020410
 8002340:	40020428 	.word	0x40020428
 8002344:	40020440 	.word	0x40020440
 8002348:	40020458 	.word	0x40020458
 800234c:	40020470 	.word	0x40020470
 8002350:	40020488 	.word	0x40020488
 8002354:	400204a0 	.word	0x400204a0
 8002358:	400204b8 	.word	0x400204b8
 800235c:	58025408 	.word	0x58025408
 8002360:	5802541c 	.word	0x5802541c
 8002364:	58025430 	.word	0x58025430
 8002368:	58025444 	.word	0x58025444
 800236c:	58025458 	.word	0x58025458
 8002370:	5802546c 	.word	0x5802546c
 8002374:	58025480 	.word	0x58025480
 8002378:	58025494 	.word	0x58025494

0800237c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b08a      	sub	sp, #40	; 0x28
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8002384:	2300      	movs	r3, #0
 8002386:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002388:	4b67      	ldr	r3, [pc, #412]	; (8002528 <HAL_DMA_IRQHandler+0x1ac>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4a67      	ldr	r2, [pc, #412]	; (800252c <HAL_DMA_IRQHandler+0x1b0>)
 800238e:	fba2 2303 	umull	r2, r3, r2, r3
 8002392:	0a9b      	lsrs	r3, r3, #10
 8002394:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800239a:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023a0:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80023a2:	6a3b      	ldr	r3, [r7, #32]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80023a8:	69fb      	ldr	r3, [r7, #28]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	4a5f      	ldr	r2, [pc, #380]	; (8002530 <HAL_DMA_IRQHandler+0x1b4>)
 80023b4:	4293      	cmp	r3, r2
 80023b6:	d04a      	beq.n	800244e <HAL_DMA_IRQHandler+0xd2>
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4a5d      	ldr	r2, [pc, #372]	; (8002534 <HAL_DMA_IRQHandler+0x1b8>)
 80023be:	4293      	cmp	r3, r2
 80023c0:	d045      	beq.n	800244e <HAL_DMA_IRQHandler+0xd2>
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	4a5c      	ldr	r2, [pc, #368]	; (8002538 <HAL_DMA_IRQHandler+0x1bc>)
 80023c8:	4293      	cmp	r3, r2
 80023ca:	d040      	beq.n	800244e <HAL_DMA_IRQHandler+0xd2>
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	4a5a      	ldr	r2, [pc, #360]	; (800253c <HAL_DMA_IRQHandler+0x1c0>)
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d03b      	beq.n	800244e <HAL_DMA_IRQHandler+0xd2>
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	4a59      	ldr	r2, [pc, #356]	; (8002540 <HAL_DMA_IRQHandler+0x1c4>)
 80023dc:	4293      	cmp	r3, r2
 80023de:	d036      	beq.n	800244e <HAL_DMA_IRQHandler+0xd2>
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4a57      	ldr	r2, [pc, #348]	; (8002544 <HAL_DMA_IRQHandler+0x1c8>)
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d031      	beq.n	800244e <HAL_DMA_IRQHandler+0xd2>
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	4a56      	ldr	r2, [pc, #344]	; (8002548 <HAL_DMA_IRQHandler+0x1cc>)
 80023f0:	4293      	cmp	r3, r2
 80023f2:	d02c      	beq.n	800244e <HAL_DMA_IRQHandler+0xd2>
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	4a54      	ldr	r2, [pc, #336]	; (800254c <HAL_DMA_IRQHandler+0x1d0>)
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d027      	beq.n	800244e <HAL_DMA_IRQHandler+0xd2>
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4a53      	ldr	r2, [pc, #332]	; (8002550 <HAL_DMA_IRQHandler+0x1d4>)
 8002404:	4293      	cmp	r3, r2
 8002406:	d022      	beq.n	800244e <HAL_DMA_IRQHandler+0xd2>
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4a51      	ldr	r2, [pc, #324]	; (8002554 <HAL_DMA_IRQHandler+0x1d8>)
 800240e:	4293      	cmp	r3, r2
 8002410:	d01d      	beq.n	800244e <HAL_DMA_IRQHandler+0xd2>
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4a50      	ldr	r2, [pc, #320]	; (8002558 <HAL_DMA_IRQHandler+0x1dc>)
 8002418:	4293      	cmp	r3, r2
 800241a:	d018      	beq.n	800244e <HAL_DMA_IRQHandler+0xd2>
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	4a4e      	ldr	r2, [pc, #312]	; (800255c <HAL_DMA_IRQHandler+0x1e0>)
 8002422:	4293      	cmp	r3, r2
 8002424:	d013      	beq.n	800244e <HAL_DMA_IRQHandler+0xd2>
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	4a4d      	ldr	r2, [pc, #308]	; (8002560 <HAL_DMA_IRQHandler+0x1e4>)
 800242c:	4293      	cmp	r3, r2
 800242e:	d00e      	beq.n	800244e <HAL_DMA_IRQHandler+0xd2>
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4a4b      	ldr	r2, [pc, #300]	; (8002564 <HAL_DMA_IRQHandler+0x1e8>)
 8002436:	4293      	cmp	r3, r2
 8002438:	d009      	beq.n	800244e <HAL_DMA_IRQHandler+0xd2>
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	4a4a      	ldr	r2, [pc, #296]	; (8002568 <HAL_DMA_IRQHandler+0x1ec>)
 8002440:	4293      	cmp	r3, r2
 8002442:	d004      	beq.n	800244e <HAL_DMA_IRQHandler+0xd2>
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	4a48      	ldr	r2, [pc, #288]	; (800256c <HAL_DMA_IRQHandler+0x1f0>)
 800244a:	4293      	cmp	r3, r2
 800244c:	d101      	bne.n	8002452 <HAL_DMA_IRQHandler+0xd6>
 800244e:	2301      	movs	r3, #1
 8002450:	e000      	b.n	8002454 <HAL_DMA_IRQHandler+0xd8>
 8002452:	2300      	movs	r3, #0
 8002454:	2b00      	cmp	r3, #0
 8002456:	f000 842b 	beq.w	8002cb0 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800245e:	f003 031f 	and.w	r3, r3, #31
 8002462:	2208      	movs	r2, #8
 8002464:	409a      	lsls	r2, r3
 8002466:	69bb      	ldr	r3, [r7, #24]
 8002468:	4013      	ands	r3, r2
 800246a:	2b00      	cmp	r3, #0
 800246c:	f000 80a2 	beq.w	80025b4 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	4a2e      	ldr	r2, [pc, #184]	; (8002530 <HAL_DMA_IRQHandler+0x1b4>)
 8002476:	4293      	cmp	r3, r2
 8002478:	d04a      	beq.n	8002510 <HAL_DMA_IRQHandler+0x194>
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	4a2d      	ldr	r2, [pc, #180]	; (8002534 <HAL_DMA_IRQHandler+0x1b8>)
 8002480:	4293      	cmp	r3, r2
 8002482:	d045      	beq.n	8002510 <HAL_DMA_IRQHandler+0x194>
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	4a2b      	ldr	r2, [pc, #172]	; (8002538 <HAL_DMA_IRQHandler+0x1bc>)
 800248a:	4293      	cmp	r3, r2
 800248c:	d040      	beq.n	8002510 <HAL_DMA_IRQHandler+0x194>
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	4a2a      	ldr	r2, [pc, #168]	; (800253c <HAL_DMA_IRQHandler+0x1c0>)
 8002494:	4293      	cmp	r3, r2
 8002496:	d03b      	beq.n	8002510 <HAL_DMA_IRQHandler+0x194>
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4a28      	ldr	r2, [pc, #160]	; (8002540 <HAL_DMA_IRQHandler+0x1c4>)
 800249e:	4293      	cmp	r3, r2
 80024a0:	d036      	beq.n	8002510 <HAL_DMA_IRQHandler+0x194>
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	4a27      	ldr	r2, [pc, #156]	; (8002544 <HAL_DMA_IRQHandler+0x1c8>)
 80024a8:	4293      	cmp	r3, r2
 80024aa:	d031      	beq.n	8002510 <HAL_DMA_IRQHandler+0x194>
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	4a25      	ldr	r2, [pc, #148]	; (8002548 <HAL_DMA_IRQHandler+0x1cc>)
 80024b2:	4293      	cmp	r3, r2
 80024b4:	d02c      	beq.n	8002510 <HAL_DMA_IRQHandler+0x194>
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	4a24      	ldr	r2, [pc, #144]	; (800254c <HAL_DMA_IRQHandler+0x1d0>)
 80024bc:	4293      	cmp	r3, r2
 80024be:	d027      	beq.n	8002510 <HAL_DMA_IRQHandler+0x194>
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	4a22      	ldr	r2, [pc, #136]	; (8002550 <HAL_DMA_IRQHandler+0x1d4>)
 80024c6:	4293      	cmp	r3, r2
 80024c8:	d022      	beq.n	8002510 <HAL_DMA_IRQHandler+0x194>
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	4a21      	ldr	r2, [pc, #132]	; (8002554 <HAL_DMA_IRQHandler+0x1d8>)
 80024d0:	4293      	cmp	r3, r2
 80024d2:	d01d      	beq.n	8002510 <HAL_DMA_IRQHandler+0x194>
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	4a1f      	ldr	r2, [pc, #124]	; (8002558 <HAL_DMA_IRQHandler+0x1dc>)
 80024da:	4293      	cmp	r3, r2
 80024dc:	d018      	beq.n	8002510 <HAL_DMA_IRQHandler+0x194>
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	4a1e      	ldr	r2, [pc, #120]	; (800255c <HAL_DMA_IRQHandler+0x1e0>)
 80024e4:	4293      	cmp	r3, r2
 80024e6:	d013      	beq.n	8002510 <HAL_DMA_IRQHandler+0x194>
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	4a1c      	ldr	r2, [pc, #112]	; (8002560 <HAL_DMA_IRQHandler+0x1e4>)
 80024ee:	4293      	cmp	r3, r2
 80024f0:	d00e      	beq.n	8002510 <HAL_DMA_IRQHandler+0x194>
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	4a1b      	ldr	r2, [pc, #108]	; (8002564 <HAL_DMA_IRQHandler+0x1e8>)
 80024f8:	4293      	cmp	r3, r2
 80024fa:	d009      	beq.n	8002510 <HAL_DMA_IRQHandler+0x194>
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	4a19      	ldr	r2, [pc, #100]	; (8002568 <HAL_DMA_IRQHandler+0x1ec>)
 8002502:	4293      	cmp	r3, r2
 8002504:	d004      	beq.n	8002510 <HAL_DMA_IRQHandler+0x194>
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	4a18      	ldr	r2, [pc, #96]	; (800256c <HAL_DMA_IRQHandler+0x1f0>)
 800250c:	4293      	cmp	r3, r2
 800250e:	d12f      	bne.n	8002570 <HAL_DMA_IRQHandler+0x1f4>
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f003 0304 	and.w	r3, r3, #4
 800251a:	2b00      	cmp	r3, #0
 800251c:	bf14      	ite	ne
 800251e:	2301      	movne	r3, #1
 8002520:	2300      	moveq	r3, #0
 8002522:	b2db      	uxtb	r3, r3
 8002524:	e02e      	b.n	8002584 <HAL_DMA_IRQHandler+0x208>
 8002526:	bf00      	nop
 8002528:	20000000 	.word	0x20000000
 800252c:	1b4e81b5 	.word	0x1b4e81b5
 8002530:	40020010 	.word	0x40020010
 8002534:	40020028 	.word	0x40020028
 8002538:	40020040 	.word	0x40020040
 800253c:	40020058 	.word	0x40020058
 8002540:	40020070 	.word	0x40020070
 8002544:	40020088 	.word	0x40020088
 8002548:	400200a0 	.word	0x400200a0
 800254c:	400200b8 	.word	0x400200b8
 8002550:	40020410 	.word	0x40020410
 8002554:	40020428 	.word	0x40020428
 8002558:	40020440 	.word	0x40020440
 800255c:	40020458 	.word	0x40020458
 8002560:	40020470 	.word	0x40020470
 8002564:	40020488 	.word	0x40020488
 8002568:	400204a0 	.word	0x400204a0
 800256c:	400204b8 	.word	0x400204b8
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f003 0308 	and.w	r3, r3, #8
 800257a:	2b00      	cmp	r3, #0
 800257c:	bf14      	ite	ne
 800257e:	2301      	movne	r3, #1
 8002580:	2300      	moveq	r3, #0
 8002582:	b2db      	uxtb	r3, r3
 8002584:	2b00      	cmp	r3, #0
 8002586:	d015      	beq.n	80025b4 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	681a      	ldr	r2, [r3, #0]
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f022 0204 	bic.w	r2, r2, #4
 8002596:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800259c:	f003 031f 	and.w	r3, r3, #31
 80025a0:	2208      	movs	r2, #8
 80025a2:	409a      	lsls	r2, r3
 80025a4:	6a3b      	ldr	r3, [r7, #32]
 80025a6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025ac:	f043 0201 	orr.w	r2, r3, #1
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025b8:	f003 031f 	and.w	r3, r3, #31
 80025bc:	69ba      	ldr	r2, [r7, #24]
 80025be:	fa22 f303 	lsr.w	r3, r2, r3
 80025c2:	f003 0301 	and.w	r3, r3, #1
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d06e      	beq.n	80026a8 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	4a69      	ldr	r2, [pc, #420]	; (8002774 <HAL_DMA_IRQHandler+0x3f8>)
 80025d0:	4293      	cmp	r3, r2
 80025d2:	d04a      	beq.n	800266a <HAL_DMA_IRQHandler+0x2ee>
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	4a67      	ldr	r2, [pc, #412]	; (8002778 <HAL_DMA_IRQHandler+0x3fc>)
 80025da:	4293      	cmp	r3, r2
 80025dc:	d045      	beq.n	800266a <HAL_DMA_IRQHandler+0x2ee>
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	4a66      	ldr	r2, [pc, #408]	; (800277c <HAL_DMA_IRQHandler+0x400>)
 80025e4:	4293      	cmp	r3, r2
 80025e6:	d040      	beq.n	800266a <HAL_DMA_IRQHandler+0x2ee>
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	4a64      	ldr	r2, [pc, #400]	; (8002780 <HAL_DMA_IRQHandler+0x404>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d03b      	beq.n	800266a <HAL_DMA_IRQHandler+0x2ee>
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	4a63      	ldr	r2, [pc, #396]	; (8002784 <HAL_DMA_IRQHandler+0x408>)
 80025f8:	4293      	cmp	r3, r2
 80025fa:	d036      	beq.n	800266a <HAL_DMA_IRQHandler+0x2ee>
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4a61      	ldr	r2, [pc, #388]	; (8002788 <HAL_DMA_IRQHandler+0x40c>)
 8002602:	4293      	cmp	r3, r2
 8002604:	d031      	beq.n	800266a <HAL_DMA_IRQHandler+0x2ee>
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	4a60      	ldr	r2, [pc, #384]	; (800278c <HAL_DMA_IRQHandler+0x410>)
 800260c:	4293      	cmp	r3, r2
 800260e:	d02c      	beq.n	800266a <HAL_DMA_IRQHandler+0x2ee>
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	4a5e      	ldr	r2, [pc, #376]	; (8002790 <HAL_DMA_IRQHandler+0x414>)
 8002616:	4293      	cmp	r3, r2
 8002618:	d027      	beq.n	800266a <HAL_DMA_IRQHandler+0x2ee>
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	4a5d      	ldr	r2, [pc, #372]	; (8002794 <HAL_DMA_IRQHandler+0x418>)
 8002620:	4293      	cmp	r3, r2
 8002622:	d022      	beq.n	800266a <HAL_DMA_IRQHandler+0x2ee>
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	4a5b      	ldr	r2, [pc, #364]	; (8002798 <HAL_DMA_IRQHandler+0x41c>)
 800262a:	4293      	cmp	r3, r2
 800262c:	d01d      	beq.n	800266a <HAL_DMA_IRQHandler+0x2ee>
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	4a5a      	ldr	r2, [pc, #360]	; (800279c <HAL_DMA_IRQHandler+0x420>)
 8002634:	4293      	cmp	r3, r2
 8002636:	d018      	beq.n	800266a <HAL_DMA_IRQHandler+0x2ee>
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	4a58      	ldr	r2, [pc, #352]	; (80027a0 <HAL_DMA_IRQHandler+0x424>)
 800263e:	4293      	cmp	r3, r2
 8002640:	d013      	beq.n	800266a <HAL_DMA_IRQHandler+0x2ee>
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	4a57      	ldr	r2, [pc, #348]	; (80027a4 <HAL_DMA_IRQHandler+0x428>)
 8002648:	4293      	cmp	r3, r2
 800264a:	d00e      	beq.n	800266a <HAL_DMA_IRQHandler+0x2ee>
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	4a55      	ldr	r2, [pc, #340]	; (80027a8 <HAL_DMA_IRQHandler+0x42c>)
 8002652:	4293      	cmp	r3, r2
 8002654:	d009      	beq.n	800266a <HAL_DMA_IRQHandler+0x2ee>
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	4a54      	ldr	r2, [pc, #336]	; (80027ac <HAL_DMA_IRQHandler+0x430>)
 800265c:	4293      	cmp	r3, r2
 800265e:	d004      	beq.n	800266a <HAL_DMA_IRQHandler+0x2ee>
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	4a52      	ldr	r2, [pc, #328]	; (80027b0 <HAL_DMA_IRQHandler+0x434>)
 8002666:	4293      	cmp	r3, r2
 8002668:	d10a      	bne.n	8002680 <HAL_DMA_IRQHandler+0x304>
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	695b      	ldr	r3, [r3, #20]
 8002670:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002674:	2b00      	cmp	r3, #0
 8002676:	bf14      	ite	ne
 8002678:	2301      	movne	r3, #1
 800267a:	2300      	moveq	r3, #0
 800267c:	b2db      	uxtb	r3, r3
 800267e:	e003      	b.n	8002688 <HAL_DMA_IRQHandler+0x30c>
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	2300      	movs	r3, #0
 8002688:	2b00      	cmp	r3, #0
 800268a:	d00d      	beq.n	80026a8 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002690:	f003 031f 	and.w	r3, r3, #31
 8002694:	2201      	movs	r2, #1
 8002696:	409a      	lsls	r2, r3
 8002698:	6a3b      	ldr	r3, [r7, #32]
 800269a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026a0:	f043 0202 	orr.w	r2, r3, #2
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026ac:	f003 031f 	and.w	r3, r3, #31
 80026b0:	2204      	movs	r2, #4
 80026b2:	409a      	lsls	r2, r3
 80026b4:	69bb      	ldr	r3, [r7, #24]
 80026b6:	4013      	ands	r3, r2
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	f000 808f 	beq.w	80027dc <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	4a2c      	ldr	r2, [pc, #176]	; (8002774 <HAL_DMA_IRQHandler+0x3f8>)
 80026c4:	4293      	cmp	r3, r2
 80026c6:	d04a      	beq.n	800275e <HAL_DMA_IRQHandler+0x3e2>
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	4a2a      	ldr	r2, [pc, #168]	; (8002778 <HAL_DMA_IRQHandler+0x3fc>)
 80026ce:	4293      	cmp	r3, r2
 80026d0:	d045      	beq.n	800275e <HAL_DMA_IRQHandler+0x3e2>
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	4a29      	ldr	r2, [pc, #164]	; (800277c <HAL_DMA_IRQHandler+0x400>)
 80026d8:	4293      	cmp	r3, r2
 80026da:	d040      	beq.n	800275e <HAL_DMA_IRQHandler+0x3e2>
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	4a27      	ldr	r2, [pc, #156]	; (8002780 <HAL_DMA_IRQHandler+0x404>)
 80026e2:	4293      	cmp	r3, r2
 80026e4:	d03b      	beq.n	800275e <HAL_DMA_IRQHandler+0x3e2>
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	4a26      	ldr	r2, [pc, #152]	; (8002784 <HAL_DMA_IRQHandler+0x408>)
 80026ec:	4293      	cmp	r3, r2
 80026ee:	d036      	beq.n	800275e <HAL_DMA_IRQHandler+0x3e2>
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	4a24      	ldr	r2, [pc, #144]	; (8002788 <HAL_DMA_IRQHandler+0x40c>)
 80026f6:	4293      	cmp	r3, r2
 80026f8:	d031      	beq.n	800275e <HAL_DMA_IRQHandler+0x3e2>
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	4a23      	ldr	r2, [pc, #140]	; (800278c <HAL_DMA_IRQHandler+0x410>)
 8002700:	4293      	cmp	r3, r2
 8002702:	d02c      	beq.n	800275e <HAL_DMA_IRQHandler+0x3e2>
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4a21      	ldr	r2, [pc, #132]	; (8002790 <HAL_DMA_IRQHandler+0x414>)
 800270a:	4293      	cmp	r3, r2
 800270c:	d027      	beq.n	800275e <HAL_DMA_IRQHandler+0x3e2>
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4a20      	ldr	r2, [pc, #128]	; (8002794 <HAL_DMA_IRQHandler+0x418>)
 8002714:	4293      	cmp	r3, r2
 8002716:	d022      	beq.n	800275e <HAL_DMA_IRQHandler+0x3e2>
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	4a1e      	ldr	r2, [pc, #120]	; (8002798 <HAL_DMA_IRQHandler+0x41c>)
 800271e:	4293      	cmp	r3, r2
 8002720:	d01d      	beq.n	800275e <HAL_DMA_IRQHandler+0x3e2>
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	4a1d      	ldr	r2, [pc, #116]	; (800279c <HAL_DMA_IRQHandler+0x420>)
 8002728:	4293      	cmp	r3, r2
 800272a:	d018      	beq.n	800275e <HAL_DMA_IRQHandler+0x3e2>
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	4a1b      	ldr	r2, [pc, #108]	; (80027a0 <HAL_DMA_IRQHandler+0x424>)
 8002732:	4293      	cmp	r3, r2
 8002734:	d013      	beq.n	800275e <HAL_DMA_IRQHandler+0x3e2>
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	4a1a      	ldr	r2, [pc, #104]	; (80027a4 <HAL_DMA_IRQHandler+0x428>)
 800273c:	4293      	cmp	r3, r2
 800273e:	d00e      	beq.n	800275e <HAL_DMA_IRQHandler+0x3e2>
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	4a18      	ldr	r2, [pc, #96]	; (80027a8 <HAL_DMA_IRQHandler+0x42c>)
 8002746:	4293      	cmp	r3, r2
 8002748:	d009      	beq.n	800275e <HAL_DMA_IRQHandler+0x3e2>
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	4a17      	ldr	r2, [pc, #92]	; (80027ac <HAL_DMA_IRQHandler+0x430>)
 8002750:	4293      	cmp	r3, r2
 8002752:	d004      	beq.n	800275e <HAL_DMA_IRQHandler+0x3e2>
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	4a15      	ldr	r2, [pc, #84]	; (80027b0 <HAL_DMA_IRQHandler+0x434>)
 800275a:	4293      	cmp	r3, r2
 800275c:	d12a      	bne.n	80027b4 <HAL_DMA_IRQHandler+0x438>
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f003 0302 	and.w	r3, r3, #2
 8002768:	2b00      	cmp	r3, #0
 800276a:	bf14      	ite	ne
 800276c:	2301      	movne	r3, #1
 800276e:	2300      	moveq	r3, #0
 8002770:	b2db      	uxtb	r3, r3
 8002772:	e023      	b.n	80027bc <HAL_DMA_IRQHandler+0x440>
 8002774:	40020010 	.word	0x40020010
 8002778:	40020028 	.word	0x40020028
 800277c:	40020040 	.word	0x40020040
 8002780:	40020058 	.word	0x40020058
 8002784:	40020070 	.word	0x40020070
 8002788:	40020088 	.word	0x40020088
 800278c:	400200a0 	.word	0x400200a0
 8002790:	400200b8 	.word	0x400200b8
 8002794:	40020410 	.word	0x40020410
 8002798:	40020428 	.word	0x40020428
 800279c:	40020440 	.word	0x40020440
 80027a0:	40020458 	.word	0x40020458
 80027a4:	40020470 	.word	0x40020470
 80027a8:	40020488 	.word	0x40020488
 80027ac:	400204a0 	.word	0x400204a0
 80027b0:	400204b8 	.word	0x400204b8
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	2300      	movs	r3, #0
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d00d      	beq.n	80027dc <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027c4:	f003 031f 	and.w	r3, r3, #31
 80027c8:	2204      	movs	r2, #4
 80027ca:	409a      	lsls	r2, r3
 80027cc:	6a3b      	ldr	r3, [r7, #32]
 80027ce:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027d4:	f043 0204 	orr.w	r2, r3, #4
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027e0:	f003 031f 	and.w	r3, r3, #31
 80027e4:	2210      	movs	r2, #16
 80027e6:	409a      	lsls	r2, r3
 80027e8:	69bb      	ldr	r3, [r7, #24]
 80027ea:	4013      	ands	r3, r2
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	f000 80a6 	beq.w	800293e <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	4a85      	ldr	r2, [pc, #532]	; (8002a0c <HAL_DMA_IRQHandler+0x690>)
 80027f8:	4293      	cmp	r3, r2
 80027fa:	d04a      	beq.n	8002892 <HAL_DMA_IRQHandler+0x516>
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	4a83      	ldr	r2, [pc, #524]	; (8002a10 <HAL_DMA_IRQHandler+0x694>)
 8002802:	4293      	cmp	r3, r2
 8002804:	d045      	beq.n	8002892 <HAL_DMA_IRQHandler+0x516>
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	4a82      	ldr	r2, [pc, #520]	; (8002a14 <HAL_DMA_IRQHandler+0x698>)
 800280c:	4293      	cmp	r3, r2
 800280e:	d040      	beq.n	8002892 <HAL_DMA_IRQHandler+0x516>
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4a80      	ldr	r2, [pc, #512]	; (8002a18 <HAL_DMA_IRQHandler+0x69c>)
 8002816:	4293      	cmp	r3, r2
 8002818:	d03b      	beq.n	8002892 <HAL_DMA_IRQHandler+0x516>
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	4a7f      	ldr	r2, [pc, #508]	; (8002a1c <HAL_DMA_IRQHandler+0x6a0>)
 8002820:	4293      	cmp	r3, r2
 8002822:	d036      	beq.n	8002892 <HAL_DMA_IRQHandler+0x516>
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	4a7d      	ldr	r2, [pc, #500]	; (8002a20 <HAL_DMA_IRQHandler+0x6a4>)
 800282a:	4293      	cmp	r3, r2
 800282c:	d031      	beq.n	8002892 <HAL_DMA_IRQHandler+0x516>
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	4a7c      	ldr	r2, [pc, #496]	; (8002a24 <HAL_DMA_IRQHandler+0x6a8>)
 8002834:	4293      	cmp	r3, r2
 8002836:	d02c      	beq.n	8002892 <HAL_DMA_IRQHandler+0x516>
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	4a7a      	ldr	r2, [pc, #488]	; (8002a28 <HAL_DMA_IRQHandler+0x6ac>)
 800283e:	4293      	cmp	r3, r2
 8002840:	d027      	beq.n	8002892 <HAL_DMA_IRQHandler+0x516>
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	4a79      	ldr	r2, [pc, #484]	; (8002a2c <HAL_DMA_IRQHandler+0x6b0>)
 8002848:	4293      	cmp	r3, r2
 800284a:	d022      	beq.n	8002892 <HAL_DMA_IRQHandler+0x516>
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4a77      	ldr	r2, [pc, #476]	; (8002a30 <HAL_DMA_IRQHandler+0x6b4>)
 8002852:	4293      	cmp	r3, r2
 8002854:	d01d      	beq.n	8002892 <HAL_DMA_IRQHandler+0x516>
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	4a76      	ldr	r2, [pc, #472]	; (8002a34 <HAL_DMA_IRQHandler+0x6b8>)
 800285c:	4293      	cmp	r3, r2
 800285e:	d018      	beq.n	8002892 <HAL_DMA_IRQHandler+0x516>
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	4a74      	ldr	r2, [pc, #464]	; (8002a38 <HAL_DMA_IRQHandler+0x6bc>)
 8002866:	4293      	cmp	r3, r2
 8002868:	d013      	beq.n	8002892 <HAL_DMA_IRQHandler+0x516>
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	4a73      	ldr	r2, [pc, #460]	; (8002a3c <HAL_DMA_IRQHandler+0x6c0>)
 8002870:	4293      	cmp	r3, r2
 8002872:	d00e      	beq.n	8002892 <HAL_DMA_IRQHandler+0x516>
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	4a71      	ldr	r2, [pc, #452]	; (8002a40 <HAL_DMA_IRQHandler+0x6c4>)
 800287a:	4293      	cmp	r3, r2
 800287c:	d009      	beq.n	8002892 <HAL_DMA_IRQHandler+0x516>
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	4a70      	ldr	r2, [pc, #448]	; (8002a44 <HAL_DMA_IRQHandler+0x6c8>)
 8002884:	4293      	cmp	r3, r2
 8002886:	d004      	beq.n	8002892 <HAL_DMA_IRQHandler+0x516>
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	4a6e      	ldr	r2, [pc, #440]	; (8002a48 <HAL_DMA_IRQHandler+0x6cc>)
 800288e:	4293      	cmp	r3, r2
 8002890:	d10a      	bne.n	80028a8 <HAL_DMA_IRQHandler+0x52c>
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f003 0308 	and.w	r3, r3, #8
 800289c:	2b00      	cmp	r3, #0
 800289e:	bf14      	ite	ne
 80028a0:	2301      	movne	r3, #1
 80028a2:	2300      	moveq	r3, #0
 80028a4:	b2db      	uxtb	r3, r3
 80028a6:	e009      	b.n	80028bc <HAL_DMA_IRQHandler+0x540>
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f003 0304 	and.w	r3, r3, #4
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	bf14      	ite	ne
 80028b6:	2301      	movne	r3, #1
 80028b8:	2300      	moveq	r3, #0
 80028ba:	b2db      	uxtb	r3, r3
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d03e      	beq.n	800293e <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028c4:	f003 031f 	and.w	r3, r3, #31
 80028c8:	2210      	movs	r2, #16
 80028ca:	409a      	lsls	r2, r3
 80028cc:	6a3b      	ldr	r3, [r7, #32]
 80028ce:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d018      	beq.n	8002910 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d108      	bne.n	80028fe <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d024      	beq.n	800293e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028f8:	6878      	ldr	r0, [r7, #4]
 80028fa:	4798      	blx	r3
 80028fc:	e01f      	b.n	800293e <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002902:	2b00      	cmp	r3, #0
 8002904:	d01b      	beq.n	800293e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800290a:	6878      	ldr	r0, [r7, #4]
 800290c:	4798      	blx	r3
 800290e:	e016      	b.n	800293e <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800291a:	2b00      	cmp	r3, #0
 800291c:	d107      	bne.n	800292e <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	681a      	ldr	r2, [r3, #0]
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f022 0208 	bic.w	r2, r2, #8
 800292c:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002932:	2b00      	cmp	r3, #0
 8002934:	d003      	beq.n	800293e <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800293a:	6878      	ldr	r0, [r7, #4]
 800293c:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002942:	f003 031f 	and.w	r3, r3, #31
 8002946:	2220      	movs	r2, #32
 8002948:	409a      	lsls	r2, r3
 800294a:	69bb      	ldr	r3, [r7, #24]
 800294c:	4013      	ands	r3, r2
 800294e:	2b00      	cmp	r3, #0
 8002950:	f000 8110 	beq.w	8002b74 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	4a2c      	ldr	r2, [pc, #176]	; (8002a0c <HAL_DMA_IRQHandler+0x690>)
 800295a:	4293      	cmp	r3, r2
 800295c:	d04a      	beq.n	80029f4 <HAL_DMA_IRQHandler+0x678>
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	4a2b      	ldr	r2, [pc, #172]	; (8002a10 <HAL_DMA_IRQHandler+0x694>)
 8002964:	4293      	cmp	r3, r2
 8002966:	d045      	beq.n	80029f4 <HAL_DMA_IRQHandler+0x678>
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	4a29      	ldr	r2, [pc, #164]	; (8002a14 <HAL_DMA_IRQHandler+0x698>)
 800296e:	4293      	cmp	r3, r2
 8002970:	d040      	beq.n	80029f4 <HAL_DMA_IRQHandler+0x678>
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	4a28      	ldr	r2, [pc, #160]	; (8002a18 <HAL_DMA_IRQHandler+0x69c>)
 8002978:	4293      	cmp	r3, r2
 800297a:	d03b      	beq.n	80029f4 <HAL_DMA_IRQHandler+0x678>
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	4a26      	ldr	r2, [pc, #152]	; (8002a1c <HAL_DMA_IRQHandler+0x6a0>)
 8002982:	4293      	cmp	r3, r2
 8002984:	d036      	beq.n	80029f4 <HAL_DMA_IRQHandler+0x678>
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	4a25      	ldr	r2, [pc, #148]	; (8002a20 <HAL_DMA_IRQHandler+0x6a4>)
 800298c:	4293      	cmp	r3, r2
 800298e:	d031      	beq.n	80029f4 <HAL_DMA_IRQHandler+0x678>
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4a23      	ldr	r2, [pc, #140]	; (8002a24 <HAL_DMA_IRQHandler+0x6a8>)
 8002996:	4293      	cmp	r3, r2
 8002998:	d02c      	beq.n	80029f4 <HAL_DMA_IRQHandler+0x678>
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	4a22      	ldr	r2, [pc, #136]	; (8002a28 <HAL_DMA_IRQHandler+0x6ac>)
 80029a0:	4293      	cmp	r3, r2
 80029a2:	d027      	beq.n	80029f4 <HAL_DMA_IRQHandler+0x678>
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	4a20      	ldr	r2, [pc, #128]	; (8002a2c <HAL_DMA_IRQHandler+0x6b0>)
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d022      	beq.n	80029f4 <HAL_DMA_IRQHandler+0x678>
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	4a1f      	ldr	r2, [pc, #124]	; (8002a30 <HAL_DMA_IRQHandler+0x6b4>)
 80029b4:	4293      	cmp	r3, r2
 80029b6:	d01d      	beq.n	80029f4 <HAL_DMA_IRQHandler+0x678>
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4a1d      	ldr	r2, [pc, #116]	; (8002a34 <HAL_DMA_IRQHandler+0x6b8>)
 80029be:	4293      	cmp	r3, r2
 80029c0:	d018      	beq.n	80029f4 <HAL_DMA_IRQHandler+0x678>
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	4a1c      	ldr	r2, [pc, #112]	; (8002a38 <HAL_DMA_IRQHandler+0x6bc>)
 80029c8:	4293      	cmp	r3, r2
 80029ca:	d013      	beq.n	80029f4 <HAL_DMA_IRQHandler+0x678>
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4a1a      	ldr	r2, [pc, #104]	; (8002a3c <HAL_DMA_IRQHandler+0x6c0>)
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d00e      	beq.n	80029f4 <HAL_DMA_IRQHandler+0x678>
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4a19      	ldr	r2, [pc, #100]	; (8002a40 <HAL_DMA_IRQHandler+0x6c4>)
 80029dc:	4293      	cmp	r3, r2
 80029de:	d009      	beq.n	80029f4 <HAL_DMA_IRQHandler+0x678>
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	4a17      	ldr	r2, [pc, #92]	; (8002a44 <HAL_DMA_IRQHandler+0x6c8>)
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d004      	beq.n	80029f4 <HAL_DMA_IRQHandler+0x678>
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	4a16      	ldr	r2, [pc, #88]	; (8002a48 <HAL_DMA_IRQHandler+0x6cc>)
 80029f0:	4293      	cmp	r3, r2
 80029f2:	d12b      	bne.n	8002a4c <HAL_DMA_IRQHandler+0x6d0>
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f003 0310 	and.w	r3, r3, #16
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	bf14      	ite	ne
 8002a02:	2301      	movne	r3, #1
 8002a04:	2300      	moveq	r3, #0
 8002a06:	b2db      	uxtb	r3, r3
 8002a08:	e02a      	b.n	8002a60 <HAL_DMA_IRQHandler+0x6e4>
 8002a0a:	bf00      	nop
 8002a0c:	40020010 	.word	0x40020010
 8002a10:	40020028 	.word	0x40020028
 8002a14:	40020040 	.word	0x40020040
 8002a18:	40020058 	.word	0x40020058
 8002a1c:	40020070 	.word	0x40020070
 8002a20:	40020088 	.word	0x40020088
 8002a24:	400200a0 	.word	0x400200a0
 8002a28:	400200b8 	.word	0x400200b8
 8002a2c:	40020410 	.word	0x40020410
 8002a30:	40020428 	.word	0x40020428
 8002a34:	40020440 	.word	0x40020440
 8002a38:	40020458 	.word	0x40020458
 8002a3c:	40020470 	.word	0x40020470
 8002a40:	40020488 	.word	0x40020488
 8002a44:	400204a0 	.word	0x400204a0
 8002a48:	400204b8 	.word	0x400204b8
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f003 0302 	and.w	r3, r3, #2
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	bf14      	ite	ne
 8002a5a:	2301      	movne	r3, #1
 8002a5c:	2300      	moveq	r3, #0
 8002a5e:	b2db      	uxtb	r3, r3
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	f000 8087 	beq.w	8002b74 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a6a:	f003 031f 	and.w	r3, r3, #31
 8002a6e:	2220      	movs	r2, #32
 8002a70:	409a      	lsls	r2, r3
 8002a72:	6a3b      	ldr	r3, [r7, #32]
 8002a74:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002a7c:	b2db      	uxtb	r3, r3
 8002a7e:	2b04      	cmp	r3, #4
 8002a80:	d139      	bne.n	8002af6 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	681a      	ldr	r2, [r3, #0]
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f022 0216 	bic.w	r2, r2, #22
 8002a90:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	695a      	ldr	r2, [r3, #20]
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002aa0:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d103      	bne.n	8002ab2 <HAL_DMA_IRQHandler+0x736>
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d007      	beq.n	8002ac2 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	681a      	ldr	r2, [r3, #0]
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f022 0208 	bic.w	r2, r2, #8
 8002ac0:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ac6:	f003 031f 	and.w	r3, r3, #31
 8002aca:	223f      	movs	r2, #63	; 0x3f
 8002acc:	409a      	lsls	r2, r3
 8002ace:	6a3b      	ldr	r3, [r7, #32]
 8002ad0:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	2201      	movs	r2, #1
 8002ade:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	f000 834a 	beq.w	8003180 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002af0:	6878      	ldr	r0, [r7, #4]
 8002af2:	4798      	blx	r3
          }
          return;
 8002af4:	e344      	b.n	8003180 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d018      	beq.n	8002b36 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d108      	bne.n	8002b24 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d02c      	beq.n	8002b74 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b1e:	6878      	ldr	r0, [r7, #4]
 8002b20:	4798      	blx	r3
 8002b22:	e027      	b.n	8002b74 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d023      	beq.n	8002b74 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b30:	6878      	ldr	r0, [r7, #4]
 8002b32:	4798      	blx	r3
 8002b34:	e01e      	b.n	8002b74 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d10f      	bne.n	8002b64 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	681a      	ldr	r2, [r3, #0]
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f022 0210 	bic.w	r2, r2, #16
 8002b52:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2200      	movs	r2, #0
 8002b58:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2201      	movs	r2, #1
 8002b60:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d003      	beq.n	8002b74 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b70:	6878      	ldr	r0, [r7, #4]
 8002b72:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	f000 8306 	beq.w	800318a <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b82:	f003 0301 	and.w	r3, r3, #1
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	f000 8088 	beq.w	8002c9c <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2204      	movs	r2, #4
 8002b90:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	4a7a      	ldr	r2, [pc, #488]	; (8002d84 <HAL_DMA_IRQHandler+0xa08>)
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d04a      	beq.n	8002c34 <HAL_DMA_IRQHandler+0x8b8>
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	4a79      	ldr	r2, [pc, #484]	; (8002d88 <HAL_DMA_IRQHandler+0xa0c>)
 8002ba4:	4293      	cmp	r3, r2
 8002ba6:	d045      	beq.n	8002c34 <HAL_DMA_IRQHandler+0x8b8>
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	4a77      	ldr	r2, [pc, #476]	; (8002d8c <HAL_DMA_IRQHandler+0xa10>)
 8002bae:	4293      	cmp	r3, r2
 8002bb0:	d040      	beq.n	8002c34 <HAL_DMA_IRQHandler+0x8b8>
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	4a76      	ldr	r2, [pc, #472]	; (8002d90 <HAL_DMA_IRQHandler+0xa14>)
 8002bb8:	4293      	cmp	r3, r2
 8002bba:	d03b      	beq.n	8002c34 <HAL_DMA_IRQHandler+0x8b8>
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	4a74      	ldr	r2, [pc, #464]	; (8002d94 <HAL_DMA_IRQHandler+0xa18>)
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	d036      	beq.n	8002c34 <HAL_DMA_IRQHandler+0x8b8>
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	4a73      	ldr	r2, [pc, #460]	; (8002d98 <HAL_DMA_IRQHandler+0xa1c>)
 8002bcc:	4293      	cmp	r3, r2
 8002bce:	d031      	beq.n	8002c34 <HAL_DMA_IRQHandler+0x8b8>
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	4a71      	ldr	r2, [pc, #452]	; (8002d9c <HAL_DMA_IRQHandler+0xa20>)
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d02c      	beq.n	8002c34 <HAL_DMA_IRQHandler+0x8b8>
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	4a70      	ldr	r2, [pc, #448]	; (8002da0 <HAL_DMA_IRQHandler+0xa24>)
 8002be0:	4293      	cmp	r3, r2
 8002be2:	d027      	beq.n	8002c34 <HAL_DMA_IRQHandler+0x8b8>
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	4a6e      	ldr	r2, [pc, #440]	; (8002da4 <HAL_DMA_IRQHandler+0xa28>)
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d022      	beq.n	8002c34 <HAL_DMA_IRQHandler+0x8b8>
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	4a6d      	ldr	r2, [pc, #436]	; (8002da8 <HAL_DMA_IRQHandler+0xa2c>)
 8002bf4:	4293      	cmp	r3, r2
 8002bf6:	d01d      	beq.n	8002c34 <HAL_DMA_IRQHandler+0x8b8>
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4a6b      	ldr	r2, [pc, #428]	; (8002dac <HAL_DMA_IRQHandler+0xa30>)
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d018      	beq.n	8002c34 <HAL_DMA_IRQHandler+0x8b8>
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	4a6a      	ldr	r2, [pc, #424]	; (8002db0 <HAL_DMA_IRQHandler+0xa34>)
 8002c08:	4293      	cmp	r3, r2
 8002c0a:	d013      	beq.n	8002c34 <HAL_DMA_IRQHandler+0x8b8>
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	4a68      	ldr	r2, [pc, #416]	; (8002db4 <HAL_DMA_IRQHandler+0xa38>)
 8002c12:	4293      	cmp	r3, r2
 8002c14:	d00e      	beq.n	8002c34 <HAL_DMA_IRQHandler+0x8b8>
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	4a67      	ldr	r2, [pc, #412]	; (8002db8 <HAL_DMA_IRQHandler+0xa3c>)
 8002c1c:	4293      	cmp	r3, r2
 8002c1e:	d009      	beq.n	8002c34 <HAL_DMA_IRQHandler+0x8b8>
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	4a65      	ldr	r2, [pc, #404]	; (8002dbc <HAL_DMA_IRQHandler+0xa40>)
 8002c26:	4293      	cmp	r3, r2
 8002c28:	d004      	beq.n	8002c34 <HAL_DMA_IRQHandler+0x8b8>
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	4a64      	ldr	r2, [pc, #400]	; (8002dc0 <HAL_DMA_IRQHandler+0xa44>)
 8002c30:	4293      	cmp	r3, r2
 8002c32:	d108      	bne.n	8002c46 <HAL_DMA_IRQHandler+0x8ca>
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	681a      	ldr	r2, [r3, #0]
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f022 0201 	bic.w	r2, r2, #1
 8002c42:	601a      	str	r2, [r3, #0]
 8002c44:	e007      	b.n	8002c56 <HAL_DMA_IRQHandler+0x8da>
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	681a      	ldr	r2, [r3, #0]
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f022 0201 	bic.w	r2, r2, #1
 8002c54:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	3301      	adds	r3, #1
 8002c5a:	60fb      	str	r3, [r7, #12]
 8002c5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c5e:	429a      	cmp	r2, r3
 8002c60:	d307      	bcc.n	8002c72 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f003 0301 	and.w	r3, r3, #1
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d1f2      	bne.n	8002c56 <HAL_DMA_IRQHandler+0x8da>
 8002c70:	e000      	b.n	8002c74 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8002c72:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2200      	movs	r2, #0
 8002c78:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f003 0301 	and.w	r3, r3, #1
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d004      	beq.n	8002c94 <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	2203      	movs	r2, #3
 8002c8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8002c92:	e003      	b.n	8002c9c <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2201      	movs	r2, #1
 8002c98:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	f000 8272 	beq.w	800318a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002caa:	6878      	ldr	r0, [r7, #4]
 8002cac:	4798      	blx	r3
 8002cae:	e26c      	b.n	800318a <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	4a43      	ldr	r2, [pc, #268]	; (8002dc4 <HAL_DMA_IRQHandler+0xa48>)
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d022      	beq.n	8002d00 <HAL_DMA_IRQHandler+0x984>
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	4a42      	ldr	r2, [pc, #264]	; (8002dc8 <HAL_DMA_IRQHandler+0xa4c>)
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	d01d      	beq.n	8002d00 <HAL_DMA_IRQHandler+0x984>
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	4a40      	ldr	r2, [pc, #256]	; (8002dcc <HAL_DMA_IRQHandler+0xa50>)
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d018      	beq.n	8002d00 <HAL_DMA_IRQHandler+0x984>
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	4a3f      	ldr	r2, [pc, #252]	; (8002dd0 <HAL_DMA_IRQHandler+0xa54>)
 8002cd4:	4293      	cmp	r3, r2
 8002cd6:	d013      	beq.n	8002d00 <HAL_DMA_IRQHandler+0x984>
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	4a3d      	ldr	r2, [pc, #244]	; (8002dd4 <HAL_DMA_IRQHandler+0xa58>)
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d00e      	beq.n	8002d00 <HAL_DMA_IRQHandler+0x984>
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	4a3c      	ldr	r2, [pc, #240]	; (8002dd8 <HAL_DMA_IRQHandler+0xa5c>)
 8002ce8:	4293      	cmp	r3, r2
 8002cea:	d009      	beq.n	8002d00 <HAL_DMA_IRQHandler+0x984>
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	4a3a      	ldr	r2, [pc, #232]	; (8002ddc <HAL_DMA_IRQHandler+0xa60>)
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	d004      	beq.n	8002d00 <HAL_DMA_IRQHandler+0x984>
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	4a39      	ldr	r2, [pc, #228]	; (8002de0 <HAL_DMA_IRQHandler+0xa64>)
 8002cfc:	4293      	cmp	r3, r2
 8002cfe:	d101      	bne.n	8002d04 <HAL_DMA_IRQHandler+0x988>
 8002d00:	2301      	movs	r3, #1
 8002d02:	e000      	b.n	8002d06 <HAL_DMA_IRQHandler+0x98a>
 8002d04:	2300      	movs	r3, #0
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	f000 823f 	beq.w	800318a <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d18:	f003 031f 	and.w	r3, r3, #31
 8002d1c:	2204      	movs	r2, #4
 8002d1e:	409a      	lsls	r2, r3
 8002d20:	697b      	ldr	r3, [r7, #20]
 8002d22:	4013      	ands	r3, r2
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	f000 80cd 	beq.w	8002ec4 <HAL_DMA_IRQHandler+0xb48>
 8002d2a:	693b      	ldr	r3, [r7, #16]
 8002d2c:	f003 0304 	and.w	r3, r3, #4
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	f000 80c7 	beq.w	8002ec4 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d3a:	f003 031f 	and.w	r3, r3, #31
 8002d3e:	2204      	movs	r2, #4
 8002d40:	409a      	lsls	r2, r3
 8002d42:	69fb      	ldr	r3, [r7, #28]
 8002d44:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002d46:	693b      	ldr	r3, [r7, #16]
 8002d48:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d049      	beq.n	8002de4 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8002d50:	693b      	ldr	r3, [r7, #16]
 8002d52:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d109      	bne.n	8002d6e <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	f000 8210 	beq.w	8003184 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d68:	6878      	ldr	r0, [r7, #4]
 8002d6a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002d6c:	e20a      	b.n	8003184 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	f000 8206 	beq.w	8003184 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d7c:	6878      	ldr	r0, [r7, #4]
 8002d7e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002d80:	e200      	b.n	8003184 <HAL_DMA_IRQHandler+0xe08>
 8002d82:	bf00      	nop
 8002d84:	40020010 	.word	0x40020010
 8002d88:	40020028 	.word	0x40020028
 8002d8c:	40020040 	.word	0x40020040
 8002d90:	40020058 	.word	0x40020058
 8002d94:	40020070 	.word	0x40020070
 8002d98:	40020088 	.word	0x40020088
 8002d9c:	400200a0 	.word	0x400200a0
 8002da0:	400200b8 	.word	0x400200b8
 8002da4:	40020410 	.word	0x40020410
 8002da8:	40020428 	.word	0x40020428
 8002dac:	40020440 	.word	0x40020440
 8002db0:	40020458 	.word	0x40020458
 8002db4:	40020470 	.word	0x40020470
 8002db8:	40020488 	.word	0x40020488
 8002dbc:	400204a0 	.word	0x400204a0
 8002dc0:	400204b8 	.word	0x400204b8
 8002dc4:	58025408 	.word	0x58025408
 8002dc8:	5802541c 	.word	0x5802541c
 8002dcc:	58025430 	.word	0x58025430
 8002dd0:	58025444 	.word	0x58025444
 8002dd4:	58025458 	.word	0x58025458
 8002dd8:	5802546c 	.word	0x5802546c
 8002ddc:	58025480 	.word	0x58025480
 8002de0:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8002de4:	693b      	ldr	r3, [r7, #16]
 8002de6:	f003 0320 	and.w	r3, r3, #32
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d160      	bne.n	8002eb0 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	4a8c      	ldr	r2, [pc, #560]	; (8003024 <HAL_DMA_IRQHandler+0xca8>)
 8002df4:	4293      	cmp	r3, r2
 8002df6:	d04a      	beq.n	8002e8e <HAL_DMA_IRQHandler+0xb12>
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	4a8a      	ldr	r2, [pc, #552]	; (8003028 <HAL_DMA_IRQHandler+0xcac>)
 8002dfe:	4293      	cmp	r3, r2
 8002e00:	d045      	beq.n	8002e8e <HAL_DMA_IRQHandler+0xb12>
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	4a89      	ldr	r2, [pc, #548]	; (800302c <HAL_DMA_IRQHandler+0xcb0>)
 8002e08:	4293      	cmp	r3, r2
 8002e0a:	d040      	beq.n	8002e8e <HAL_DMA_IRQHandler+0xb12>
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4a87      	ldr	r2, [pc, #540]	; (8003030 <HAL_DMA_IRQHandler+0xcb4>)
 8002e12:	4293      	cmp	r3, r2
 8002e14:	d03b      	beq.n	8002e8e <HAL_DMA_IRQHandler+0xb12>
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	4a86      	ldr	r2, [pc, #536]	; (8003034 <HAL_DMA_IRQHandler+0xcb8>)
 8002e1c:	4293      	cmp	r3, r2
 8002e1e:	d036      	beq.n	8002e8e <HAL_DMA_IRQHandler+0xb12>
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	4a84      	ldr	r2, [pc, #528]	; (8003038 <HAL_DMA_IRQHandler+0xcbc>)
 8002e26:	4293      	cmp	r3, r2
 8002e28:	d031      	beq.n	8002e8e <HAL_DMA_IRQHandler+0xb12>
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4a83      	ldr	r2, [pc, #524]	; (800303c <HAL_DMA_IRQHandler+0xcc0>)
 8002e30:	4293      	cmp	r3, r2
 8002e32:	d02c      	beq.n	8002e8e <HAL_DMA_IRQHandler+0xb12>
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	4a81      	ldr	r2, [pc, #516]	; (8003040 <HAL_DMA_IRQHandler+0xcc4>)
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	d027      	beq.n	8002e8e <HAL_DMA_IRQHandler+0xb12>
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	4a80      	ldr	r2, [pc, #512]	; (8003044 <HAL_DMA_IRQHandler+0xcc8>)
 8002e44:	4293      	cmp	r3, r2
 8002e46:	d022      	beq.n	8002e8e <HAL_DMA_IRQHandler+0xb12>
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	4a7e      	ldr	r2, [pc, #504]	; (8003048 <HAL_DMA_IRQHandler+0xccc>)
 8002e4e:	4293      	cmp	r3, r2
 8002e50:	d01d      	beq.n	8002e8e <HAL_DMA_IRQHandler+0xb12>
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	4a7d      	ldr	r2, [pc, #500]	; (800304c <HAL_DMA_IRQHandler+0xcd0>)
 8002e58:	4293      	cmp	r3, r2
 8002e5a:	d018      	beq.n	8002e8e <HAL_DMA_IRQHandler+0xb12>
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	4a7b      	ldr	r2, [pc, #492]	; (8003050 <HAL_DMA_IRQHandler+0xcd4>)
 8002e62:	4293      	cmp	r3, r2
 8002e64:	d013      	beq.n	8002e8e <HAL_DMA_IRQHandler+0xb12>
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	4a7a      	ldr	r2, [pc, #488]	; (8003054 <HAL_DMA_IRQHandler+0xcd8>)
 8002e6c:	4293      	cmp	r3, r2
 8002e6e:	d00e      	beq.n	8002e8e <HAL_DMA_IRQHandler+0xb12>
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	4a78      	ldr	r2, [pc, #480]	; (8003058 <HAL_DMA_IRQHandler+0xcdc>)
 8002e76:	4293      	cmp	r3, r2
 8002e78:	d009      	beq.n	8002e8e <HAL_DMA_IRQHandler+0xb12>
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	4a77      	ldr	r2, [pc, #476]	; (800305c <HAL_DMA_IRQHandler+0xce0>)
 8002e80:	4293      	cmp	r3, r2
 8002e82:	d004      	beq.n	8002e8e <HAL_DMA_IRQHandler+0xb12>
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	4a75      	ldr	r2, [pc, #468]	; (8003060 <HAL_DMA_IRQHandler+0xce4>)
 8002e8a:	4293      	cmp	r3, r2
 8002e8c:	d108      	bne.n	8002ea0 <HAL_DMA_IRQHandler+0xb24>
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	681a      	ldr	r2, [r3, #0]
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f022 0208 	bic.w	r2, r2, #8
 8002e9c:	601a      	str	r2, [r3, #0]
 8002e9e:	e007      	b.n	8002eb0 <HAL_DMA_IRQHandler+0xb34>
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	681a      	ldr	r2, [r3, #0]
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f022 0204 	bic.w	r2, r2, #4
 8002eae:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	f000 8165 	beq.w	8003184 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ebe:	6878      	ldr	r0, [r7, #4]
 8002ec0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002ec2:	e15f      	b.n	8003184 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ec8:	f003 031f 	and.w	r3, r3, #31
 8002ecc:	2202      	movs	r2, #2
 8002ece:	409a      	lsls	r2, r3
 8002ed0:	697b      	ldr	r3, [r7, #20]
 8002ed2:	4013      	ands	r3, r2
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	f000 80c5 	beq.w	8003064 <HAL_DMA_IRQHandler+0xce8>
 8002eda:	693b      	ldr	r3, [r7, #16]
 8002edc:	f003 0302 	and.w	r3, r3, #2
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	f000 80bf 	beq.w	8003064 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002eea:	f003 031f 	and.w	r3, r3, #31
 8002eee:	2202      	movs	r2, #2
 8002ef0:	409a      	lsls	r2, r3
 8002ef2:	69fb      	ldr	r3, [r7, #28]
 8002ef4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002ef6:	693b      	ldr	r3, [r7, #16]
 8002ef8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d018      	beq.n	8002f32 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8002f00:	693b      	ldr	r3, [r7, #16]
 8002f02:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d109      	bne.n	8002f1e <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	f000 813a 	beq.w	8003188 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f18:	6878      	ldr	r0, [r7, #4]
 8002f1a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002f1c:	e134      	b.n	8003188 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	f000 8130 	beq.w	8003188 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f2c:	6878      	ldr	r0, [r7, #4]
 8002f2e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002f30:	e12a      	b.n	8003188 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8002f32:	693b      	ldr	r3, [r7, #16]
 8002f34:	f003 0320 	and.w	r3, r3, #32
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d168      	bne.n	800300e <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4a38      	ldr	r2, [pc, #224]	; (8003024 <HAL_DMA_IRQHandler+0xca8>)
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d04a      	beq.n	8002fdc <HAL_DMA_IRQHandler+0xc60>
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	4a37      	ldr	r2, [pc, #220]	; (8003028 <HAL_DMA_IRQHandler+0xcac>)
 8002f4c:	4293      	cmp	r3, r2
 8002f4e:	d045      	beq.n	8002fdc <HAL_DMA_IRQHandler+0xc60>
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	4a35      	ldr	r2, [pc, #212]	; (800302c <HAL_DMA_IRQHandler+0xcb0>)
 8002f56:	4293      	cmp	r3, r2
 8002f58:	d040      	beq.n	8002fdc <HAL_DMA_IRQHandler+0xc60>
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	4a34      	ldr	r2, [pc, #208]	; (8003030 <HAL_DMA_IRQHandler+0xcb4>)
 8002f60:	4293      	cmp	r3, r2
 8002f62:	d03b      	beq.n	8002fdc <HAL_DMA_IRQHandler+0xc60>
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	4a32      	ldr	r2, [pc, #200]	; (8003034 <HAL_DMA_IRQHandler+0xcb8>)
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d036      	beq.n	8002fdc <HAL_DMA_IRQHandler+0xc60>
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	4a31      	ldr	r2, [pc, #196]	; (8003038 <HAL_DMA_IRQHandler+0xcbc>)
 8002f74:	4293      	cmp	r3, r2
 8002f76:	d031      	beq.n	8002fdc <HAL_DMA_IRQHandler+0xc60>
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	4a2f      	ldr	r2, [pc, #188]	; (800303c <HAL_DMA_IRQHandler+0xcc0>)
 8002f7e:	4293      	cmp	r3, r2
 8002f80:	d02c      	beq.n	8002fdc <HAL_DMA_IRQHandler+0xc60>
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	4a2e      	ldr	r2, [pc, #184]	; (8003040 <HAL_DMA_IRQHandler+0xcc4>)
 8002f88:	4293      	cmp	r3, r2
 8002f8a:	d027      	beq.n	8002fdc <HAL_DMA_IRQHandler+0xc60>
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	4a2c      	ldr	r2, [pc, #176]	; (8003044 <HAL_DMA_IRQHandler+0xcc8>)
 8002f92:	4293      	cmp	r3, r2
 8002f94:	d022      	beq.n	8002fdc <HAL_DMA_IRQHandler+0xc60>
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	4a2b      	ldr	r2, [pc, #172]	; (8003048 <HAL_DMA_IRQHandler+0xccc>)
 8002f9c:	4293      	cmp	r3, r2
 8002f9e:	d01d      	beq.n	8002fdc <HAL_DMA_IRQHandler+0xc60>
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	4a29      	ldr	r2, [pc, #164]	; (800304c <HAL_DMA_IRQHandler+0xcd0>)
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	d018      	beq.n	8002fdc <HAL_DMA_IRQHandler+0xc60>
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	4a28      	ldr	r2, [pc, #160]	; (8003050 <HAL_DMA_IRQHandler+0xcd4>)
 8002fb0:	4293      	cmp	r3, r2
 8002fb2:	d013      	beq.n	8002fdc <HAL_DMA_IRQHandler+0xc60>
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	4a26      	ldr	r2, [pc, #152]	; (8003054 <HAL_DMA_IRQHandler+0xcd8>)
 8002fba:	4293      	cmp	r3, r2
 8002fbc:	d00e      	beq.n	8002fdc <HAL_DMA_IRQHandler+0xc60>
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	4a25      	ldr	r2, [pc, #148]	; (8003058 <HAL_DMA_IRQHandler+0xcdc>)
 8002fc4:	4293      	cmp	r3, r2
 8002fc6:	d009      	beq.n	8002fdc <HAL_DMA_IRQHandler+0xc60>
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	4a23      	ldr	r2, [pc, #140]	; (800305c <HAL_DMA_IRQHandler+0xce0>)
 8002fce:	4293      	cmp	r3, r2
 8002fd0:	d004      	beq.n	8002fdc <HAL_DMA_IRQHandler+0xc60>
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	4a22      	ldr	r2, [pc, #136]	; (8003060 <HAL_DMA_IRQHandler+0xce4>)
 8002fd8:	4293      	cmp	r3, r2
 8002fda:	d108      	bne.n	8002fee <HAL_DMA_IRQHandler+0xc72>
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	681a      	ldr	r2, [r3, #0]
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f022 0214 	bic.w	r2, r2, #20
 8002fea:	601a      	str	r2, [r3, #0]
 8002fec:	e007      	b.n	8002ffe <HAL_DMA_IRQHandler+0xc82>
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	681a      	ldr	r2, [r3, #0]
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f022 020a 	bic.w	r2, r2, #10
 8002ffc:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	2200      	movs	r2, #0
 8003002:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	2201      	movs	r2, #1
 800300a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003012:	2b00      	cmp	r3, #0
 8003014:	f000 80b8 	beq.w	8003188 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800301c:	6878      	ldr	r0, [r7, #4]
 800301e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003020:	e0b2      	b.n	8003188 <HAL_DMA_IRQHandler+0xe0c>
 8003022:	bf00      	nop
 8003024:	40020010 	.word	0x40020010
 8003028:	40020028 	.word	0x40020028
 800302c:	40020040 	.word	0x40020040
 8003030:	40020058 	.word	0x40020058
 8003034:	40020070 	.word	0x40020070
 8003038:	40020088 	.word	0x40020088
 800303c:	400200a0 	.word	0x400200a0
 8003040:	400200b8 	.word	0x400200b8
 8003044:	40020410 	.word	0x40020410
 8003048:	40020428 	.word	0x40020428
 800304c:	40020440 	.word	0x40020440
 8003050:	40020458 	.word	0x40020458
 8003054:	40020470 	.word	0x40020470
 8003058:	40020488 	.word	0x40020488
 800305c:	400204a0 	.word	0x400204a0
 8003060:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003068:	f003 031f 	and.w	r3, r3, #31
 800306c:	2208      	movs	r2, #8
 800306e:	409a      	lsls	r2, r3
 8003070:	697b      	ldr	r3, [r7, #20]
 8003072:	4013      	ands	r3, r2
 8003074:	2b00      	cmp	r3, #0
 8003076:	f000 8088 	beq.w	800318a <HAL_DMA_IRQHandler+0xe0e>
 800307a:	693b      	ldr	r3, [r7, #16]
 800307c:	f003 0308 	and.w	r3, r3, #8
 8003080:	2b00      	cmp	r3, #0
 8003082:	f000 8082 	beq.w	800318a <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	4a41      	ldr	r2, [pc, #260]	; (8003190 <HAL_DMA_IRQHandler+0xe14>)
 800308c:	4293      	cmp	r3, r2
 800308e:	d04a      	beq.n	8003126 <HAL_DMA_IRQHandler+0xdaa>
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	4a3f      	ldr	r2, [pc, #252]	; (8003194 <HAL_DMA_IRQHandler+0xe18>)
 8003096:	4293      	cmp	r3, r2
 8003098:	d045      	beq.n	8003126 <HAL_DMA_IRQHandler+0xdaa>
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	4a3e      	ldr	r2, [pc, #248]	; (8003198 <HAL_DMA_IRQHandler+0xe1c>)
 80030a0:	4293      	cmp	r3, r2
 80030a2:	d040      	beq.n	8003126 <HAL_DMA_IRQHandler+0xdaa>
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4a3c      	ldr	r2, [pc, #240]	; (800319c <HAL_DMA_IRQHandler+0xe20>)
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d03b      	beq.n	8003126 <HAL_DMA_IRQHandler+0xdaa>
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	4a3b      	ldr	r2, [pc, #236]	; (80031a0 <HAL_DMA_IRQHandler+0xe24>)
 80030b4:	4293      	cmp	r3, r2
 80030b6:	d036      	beq.n	8003126 <HAL_DMA_IRQHandler+0xdaa>
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	4a39      	ldr	r2, [pc, #228]	; (80031a4 <HAL_DMA_IRQHandler+0xe28>)
 80030be:	4293      	cmp	r3, r2
 80030c0:	d031      	beq.n	8003126 <HAL_DMA_IRQHandler+0xdaa>
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	4a38      	ldr	r2, [pc, #224]	; (80031a8 <HAL_DMA_IRQHandler+0xe2c>)
 80030c8:	4293      	cmp	r3, r2
 80030ca:	d02c      	beq.n	8003126 <HAL_DMA_IRQHandler+0xdaa>
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	4a36      	ldr	r2, [pc, #216]	; (80031ac <HAL_DMA_IRQHandler+0xe30>)
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d027      	beq.n	8003126 <HAL_DMA_IRQHandler+0xdaa>
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	4a35      	ldr	r2, [pc, #212]	; (80031b0 <HAL_DMA_IRQHandler+0xe34>)
 80030dc:	4293      	cmp	r3, r2
 80030de:	d022      	beq.n	8003126 <HAL_DMA_IRQHandler+0xdaa>
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	4a33      	ldr	r2, [pc, #204]	; (80031b4 <HAL_DMA_IRQHandler+0xe38>)
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d01d      	beq.n	8003126 <HAL_DMA_IRQHandler+0xdaa>
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	4a32      	ldr	r2, [pc, #200]	; (80031b8 <HAL_DMA_IRQHandler+0xe3c>)
 80030f0:	4293      	cmp	r3, r2
 80030f2:	d018      	beq.n	8003126 <HAL_DMA_IRQHandler+0xdaa>
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	4a30      	ldr	r2, [pc, #192]	; (80031bc <HAL_DMA_IRQHandler+0xe40>)
 80030fa:	4293      	cmp	r3, r2
 80030fc:	d013      	beq.n	8003126 <HAL_DMA_IRQHandler+0xdaa>
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	4a2f      	ldr	r2, [pc, #188]	; (80031c0 <HAL_DMA_IRQHandler+0xe44>)
 8003104:	4293      	cmp	r3, r2
 8003106:	d00e      	beq.n	8003126 <HAL_DMA_IRQHandler+0xdaa>
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	4a2d      	ldr	r2, [pc, #180]	; (80031c4 <HAL_DMA_IRQHandler+0xe48>)
 800310e:	4293      	cmp	r3, r2
 8003110:	d009      	beq.n	8003126 <HAL_DMA_IRQHandler+0xdaa>
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	4a2c      	ldr	r2, [pc, #176]	; (80031c8 <HAL_DMA_IRQHandler+0xe4c>)
 8003118:	4293      	cmp	r3, r2
 800311a:	d004      	beq.n	8003126 <HAL_DMA_IRQHandler+0xdaa>
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4a2a      	ldr	r2, [pc, #168]	; (80031cc <HAL_DMA_IRQHandler+0xe50>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d108      	bne.n	8003138 <HAL_DMA_IRQHandler+0xdbc>
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	681a      	ldr	r2, [r3, #0]
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f022 021c 	bic.w	r2, r2, #28
 8003134:	601a      	str	r2, [r3, #0]
 8003136:	e007      	b.n	8003148 <HAL_DMA_IRQHandler+0xdcc>
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	681a      	ldr	r2, [r3, #0]
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f022 020e 	bic.w	r2, r2, #14
 8003146:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800314c:	f003 031f 	and.w	r3, r3, #31
 8003150:	2201      	movs	r2, #1
 8003152:	409a      	lsls	r2, r3
 8003154:	69fb      	ldr	r3, [r7, #28]
 8003156:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2201      	movs	r2, #1
 800315c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	2200      	movs	r2, #0
 8003162:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	2201      	movs	r2, #1
 800316a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003172:	2b00      	cmp	r3, #0
 8003174:	d009      	beq.n	800318a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800317a:	6878      	ldr	r0, [r7, #4]
 800317c:	4798      	blx	r3
 800317e:	e004      	b.n	800318a <HAL_DMA_IRQHandler+0xe0e>
          return;
 8003180:	bf00      	nop
 8003182:	e002      	b.n	800318a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003184:	bf00      	nop
 8003186:	e000      	b.n	800318a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003188:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800318a:	3728      	adds	r7, #40	; 0x28
 800318c:	46bd      	mov	sp, r7
 800318e:	bd80      	pop	{r7, pc}
 8003190:	40020010 	.word	0x40020010
 8003194:	40020028 	.word	0x40020028
 8003198:	40020040 	.word	0x40020040
 800319c:	40020058 	.word	0x40020058
 80031a0:	40020070 	.word	0x40020070
 80031a4:	40020088 	.word	0x40020088
 80031a8:	400200a0 	.word	0x400200a0
 80031ac:	400200b8 	.word	0x400200b8
 80031b0:	40020410 	.word	0x40020410
 80031b4:	40020428 	.word	0x40020428
 80031b8:	40020440 	.word	0x40020440
 80031bc:	40020458 	.word	0x40020458
 80031c0:	40020470 	.word	0x40020470
 80031c4:	40020488 	.word	0x40020488
 80031c8:	400204a0 	.word	0x400204a0
 80031cc:	400204b8 	.word	0x400204b8

080031d0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80031d0:	b480      	push	{r7}
 80031d2:	b085      	sub	sp, #20
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	4a42      	ldr	r2, [pc, #264]	; (80032e8 <DMA_CalcBaseAndBitshift+0x118>)
 80031de:	4293      	cmp	r3, r2
 80031e0:	d04a      	beq.n	8003278 <DMA_CalcBaseAndBitshift+0xa8>
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	4a41      	ldr	r2, [pc, #260]	; (80032ec <DMA_CalcBaseAndBitshift+0x11c>)
 80031e8:	4293      	cmp	r3, r2
 80031ea:	d045      	beq.n	8003278 <DMA_CalcBaseAndBitshift+0xa8>
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	4a3f      	ldr	r2, [pc, #252]	; (80032f0 <DMA_CalcBaseAndBitshift+0x120>)
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d040      	beq.n	8003278 <DMA_CalcBaseAndBitshift+0xa8>
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	4a3e      	ldr	r2, [pc, #248]	; (80032f4 <DMA_CalcBaseAndBitshift+0x124>)
 80031fc:	4293      	cmp	r3, r2
 80031fe:	d03b      	beq.n	8003278 <DMA_CalcBaseAndBitshift+0xa8>
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	4a3c      	ldr	r2, [pc, #240]	; (80032f8 <DMA_CalcBaseAndBitshift+0x128>)
 8003206:	4293      	cmp	r3, r2
 8003208:	d036      	beq.n	8003278 <DMA_CalcBaseAndBitshift+0xa8>
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	4a3b      	ldr	r2, [pc, #236]	; (80032fc <DMA_CalcBaseAndBitshift+0x12c>)
 8003210:	4293      	cmp	r3, r2
 8003212:	d031      	beq.n	8003278 <DMA_CalcBaseAndBitshift+0xa8>
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	4a39      	ldr	r2, [pc, #228]	; (8003300 <DMA_CalcBaseAndBitshift+0x130>)
 800321a:	4293      	cmp	r3, r2
 800321c:	d02c      	beq.n	8003278 <DMA_CalcBaseAndBitshift+0xa8>
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	4a38      	ldr	r2, [pc, #224]	; (8003304 <DMA_CalcBaseAndBitshift+0x134>)
 8003224:	4293      	cmp	r3, r2
 8003226:	d027      	beq.n	8003278 <DMA_CalcBaseAndBitshift+0xa8>
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	4a36      	ldr	r2, [pc, #216]	; (8003308 <DMA_CalcBaseAndBitshift+0x138>)
 800322e:	4293      	cmp	r3, r2
 8003230:	d022      	beq.n	8003278 <DMA_CalcBaseAndBitshift+0xa8>
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	4a35      	ldr	r2, [pc, #212]	; (800330c <DMA_CalcBaseAndBitshift+0x13c>)
 8003238:	4293      	cmp	r3, r2
 800323a:	d01d      	beq.n	8003278 <DMA_CalcBaseAndBitshift+0xa8>
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	4a33      	ldr	r2, [pc, #204]	; (8003310 <DMA_CalcBaseAndBitshift+0x140>)
 8003242:	4293      	cmp	r3, r2
 8003244:	d018      	beq.n	8003278 <DMA_CalcBaseAndBitshift+0xa8>
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	4a32      	ldr	r2, [pc, #200]	; (8003314 <DMA_CalcBaseAndBitshift+0x144>)
 800324c:	4293      	cmp	r3, r2
 800324e:	d013      	beq.n	8003278 <DMA_CalcBaseAndBitshift+0xa8>
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4a30      	ldr	r2, [pc, #192]	; (8003318 <DMA_CalcBaseAndBitshift+0x148>)
 8003256:	4293      	cmp	r3, r2
 8003258:	d00e      	beq.n	8003278 <DMA_CalcBaseAndBitshift+0xa8>
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	4a2f      	ldr	r2, [pc, #188]	; (800331c <DMA_CalcBaseAndBitshift+0x14c>)
 8003260:	4293      	cmp	r3, r2
 8003262:	d009      	beq.n	8003278 <DMA_CalcBaseAndBitshift+0xa8>
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	4a2d      	ldr	r2, [pc, #180]	; (8003320 <DMA_CalcBaseAndBitshift+0x150>)
 800326a:	4293      	cmp	r3, r2
 800326c:	d004      	beq.n	8003278 <DMA_CalcBaseAndBitshift+0xa8>
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	4a2c      	ldr	r2, [pc, #176]	; (8003324 <DMA_CalcBaseAndBitshift+0x154>)
 8003274:	4293      	cmp	r3, r2
 8003276:	d101      	bne.n	800327c <DMA_CalcBaseAndBitshift+0xac>
 8003278:	2301      	movs	r3, #1
 800327a:	e000      	b.n	800327e <DMA_CalcBaseAndBitshift+0xae>
 800327c:	2300      	movs	r3, #0
 800327e:	2b00      	cmp	r3, #0
 8003280:	d024      	beq.n	80032cc <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	b2db      	uxtb	r3, r3
 8003288:	3b10      	subs	r3, #16
 800328a:	4a27      	ldr	r2, [pc, #156]	; (8003328 <DMA_CalcBaseAndBitshift+0x158>)
 800328c:	fba2 2303 	umull	r2, r3, r2, r3
 8003290:	091b      	lsrs	r3, r3, #4
 8003292:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	f003 0307 	and.w	r3, r3, #7
 800329a:	4a24      	ldr	r2, [pc, #144]	; (800332c <DMA_CalcBaseAndBitshift+0x15c>)
 800329c:	5cd3      	ldrb	r3, [r2, r3]
 800329e:	461a      	mov	r2, r3
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	2b03      	cmp	r3, #3
 80032a8:	d908      	bls.n	80032bc <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	461a      	mov	r2, r3
 80032b0:	4b1f      	ldr	r3, [pc, #124]	; (8003330 <DMA_CalcBaseAndBitshift+0x160>)
 80032b2:	4013      	ands	r3, r2
 80032b4:	1d1a      	adds	r2, r3, #4
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	659a      	str	r2, [r3, #88]	; 0x58
 80032ba:	e00d      	b.n	80032d8 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	461a      	mov	r2, r3
 80032c2:	4b1b      	ldr	r3, [pc, #108]	; (8003330 <DMA_CalcBaseAndBitshift+0x160>)
 80032c4:	4013      	ands	r3, r2
 80032c6:	687a      	ldr	r2, [r7, #4]
 80032c8:	6593      	str	r3, [r2, #88]	; 0x58
 80032ca:	e005      	b.n	80032d8 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80032dc:	4618      	mov	r0, r3
 80032de:	3714      	adds	r7, #20
 80032e0:	46bd      	mov	sp, r7
 80032e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e6:	4770      	bx	lr
 80032e8:	40020010 	.word	0x40020010
 80032ec:	40020028 	.word	0x40020028
 80032f0:	40020040 	.word	0x40020040
 80032f4:	40020058 	.word	0x40020058
 80032f8:	40020070 	.word	0x40020070
 80032fc:	40020088 	.word	0x40020088
 8003300:	400200a0 	.word	0x400200a0
 8003304:	400200b8 	.word	0x400200b8
 8003308:	40020410 	.word	0x40020410
 800330c:	40020428 	.word	0x40020428
 8003310:	40020440 	.word	0x40020440
 8003314:	40020458 	.word	0x40020458
 8003318:	40020470 	.word	0x40020470
 800331c:	40020488 	.word	0x40020488
 8003320:	400204a0 	.word	0x400204a0
 8003324:	400204b8 	.word	0x400204b8
 8003328:	aaaaaaab 	.word	0xaaaaaaab
 800332c:	0800aa2c 	.word	0x0800aa2c
 8003330:	fffffc00 	.word	0xfffffc00

08003334 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003334:	b480      	push	{r7}
 8003336:	b085      	sub	sp, #20
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800333c:	2300      	movs	r3, #0
 800333e:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	699b      	ldr	r3, [r3, #24]
 8003344:	2b00      	cmp	r3, #0
 8003346:	d120      	bne.n	800338a <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800334c:	2b03      	cmp	r3, #3
 800334e:	d858      	bhi.n	8003402 <DMA_CheckFifoParam+0xce>
 8003350:	a201      	add	r2, pc, #4	; (adr r2, 8003358 <DMA_CheckFifoParam+0x24>)
 8003352:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003356:	bf00      	nop
 8003358:	08003369 	.word	0x08003369
 800335c:	0800337b 	.word	0x0800337b
 8003360:	08003369 	.word	0x08003369
 8003364:	08003403 	.word	0x08003403
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800336c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003370:	2b00      	cmp	r3, #0
 8003372:	d048      	beq.n	8003406 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8003374:	2301      	movs	r3, #1
 8003376:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003378:	e045      	b.n	8003406 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800337e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003382:	d142      	bne.n	800340a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8003384:	2301      	movs	r3, #1
 8003386:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003388:	e03f      	b.n	800340a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	699b      	ldr	r3, [r3, #24]
 800338e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003392:	d123      	bne.n	80033dc <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003398:	2b03      	cmp	r3, #3
 800339a:	d838      	bhi.n	800340e <DMA_CheckFifoParam+0xda>
 800339c:	a201      	add	r2, pc, #4	; (adr r2, 80033a4 <DMA_CheckFifoParam+0x70>)
 800339e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033a2:	bf00      	nop
 80033a4:	080033b5 	.word	0x080033b5
 80033a8:	080033bb 	.word	0x080033bb
 80033ac:	080033b5 	.word	0x080033b5
 80033b0:	080033cd 	.word	0x080033cd
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80033b4:	2301      	movs	r3, #1
 80033b6:	73fb      	strb	r3, [r7, #15]
        break;
 80033b8:	e030      	b.n	800341c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033be:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d025      	beq.n	8003412 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80033c6:	2301      	movs	r3, #1
 80033c8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80033ca:	e022      	b.n	8003412 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033d0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80033d4:	d11f      	bne.n	8003416 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80033d6:	2301      	movs	r3, #1
 80033d8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80033da:	e01c      	b.n	8003416 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033e0:	2b02      	cmp	r3, #2
 80033e2:	d902      	bls.n	80033ea <DMA_CheckFifoParam+0xb6>
 80033e4:	2b03      	cmp	r3, #3
 80033e6:	d003      	beq.n	80033f0 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80033e8:	e018      	b.n	800341c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80033ea:	2301      	movs	r3, #1
 80033ec:	73fb      	strb	r3, [r7, #15]
        break;
 80033ee:	e015      	b.n	800341c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033f4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d00e      	beq.n	800341a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80033fc:	2301      	movs	r3, #1
 80033fe:	73fb      	strb	r3, [r7, #15]
    break;
 8003400:	e00b      	b.n	800341a <DMA_CheckFifoParam+0xe6>
        break;
 8003402:	bf00      	nop
 8003404:	e00a      	b.n	800341c <DMA_CheckFifoParam+0xe8>
        break;
 8003406:	bf00      	nop
 8003408:	e008      	b.n	800341c <DMA_CheckFifoParam+0xe8>
        break;
 800340a:	bf00      	nop
 800340c:	e006      	b.n	800341c <DMA_CheckFifoParam+0xe8>
        break;
 800340e:	bf00      	nop
 8003410:	e004      	b.n	800341c <DMA_CheckFifoParam+0xe8>
        break;
 8003412:	bf00      	nop
 8003414:	e002      	b.n	800341c <DMA_CheckFifoParam+0xe8>
        break;
 8003416:	bf00      	nop
 8003418:	e000      	b.n	800341c <DMA_CheckFifoParam+0xe8>
    break;
 800341a:	bf00      	nop
    }
  }

  return status;
 800341c:	7bfb      	ldrb	r3, [r7, #15]
}
 800341e:	4618      	mov	r0, r3
 8003420:	3714      	adds	r7, #20
 8003422:	46bd      	mov	sp, r7
 8003424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003428:	4770      	bx	lr
 800342a:	bf00      	nop

0800342c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800342c:	b480      	push	{r7}
 800342e:	b085      	sub	sp, #20
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	4a38      	ldr	r2, [pc, #224]	; (8003520 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8003440:	4293      	cmp	r3, r2
 8003442:	d022      	beq.n	800348a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	4a36      	ldr	r2, [pc, #216]	; (8003524 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800344a:	4293      	cmp	r3, r2
 800344c:	d01d      	beq.n	800348a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	4a35      	ldr	r2, [pc, #212]	; (8003528 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8003454:	4293      	cmp	r3, r2
 8003456:	d018      	beq.n	800348a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	4a33      	ldr	r2, [pc, #204]	; (800352c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800345e:	4293      	cmp	r3, r2
 8003460:	d013      	beq.n	800348a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	4a32      	ldr	r2, [pc, #200]	; (8003530 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8003468:	4293      	cmp	r3, r2
 800346a:	d00e      	beq.n	800348a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	4a30      	ldr	r2, [pc, #192]	; (8003534 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8003472:	4293      	cmp	r3, r2
 8003474:	d009      	beq.n	800348a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	4a2f      	ldr	r2, [pc, #188]	; (8003538 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 800347c:	4293      	cmp	r3, r2
 800347e:	d004      	beq.n	800348a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	4a2d      	ldr	r2, [pc, #180]	; (800353c <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8003486:	4293      	cmp	r3, r2
 8003488:	d101      	bne.n	800348e <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800348a:	2301      	movs	r3, #1
 800348c:	e000      	b.n	8003490 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800348e:	2300      	movs	r3, #0
 8003490:	2b00      	cmp	r3, #0
 8003492:	d01a      	beq.n	80034ca <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	b2db      	uxtb	r3, r3
 800349a:	3b08      	subs	r3, #8
 800349c:	4a28      	ldr	r2, [pc, #160]	; (8003540 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800349e:	fba2 2303 	umull	r2, r3, r2, r3
 80034a2:	091b      	lsrs	r3, r3, #4
 80034a4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80034a6:	68fa      	ldr	r2, [r7, #12]
 80034a8:	4b26      	ldr	r3, [pc, #152]	; (8003544 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80034aa:	4413      	add	r3, r2
 80034ac:	009b      	lsls	r3, r3, #2
 80034ae:	461a      	mov	r2, r3
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	4a24      	ldr	r2, [pc, #144]	; (8003548 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80034b8:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	f003 031f 	and.w	r3, r3, #31
 80034c0:	2201      	movs	r2, #1
 80034c2:	409a      	lsls	r2, r3
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80034c8:	e024      	b.n	8003514 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	b2db      	uxtb	r3, r3
 80034d0:	3b10      	subs	r3, #16
 80034d2:	4a1e      	ldr	r2, [pc, #120]	; (800354c <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80034d4:	fba2 2303 	umull	r2, r3, r2, r3
 80034d8:	091b      	lsrs	r3, r3, #4
 80034da:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80034dc:	68bb      	ldr	r3, [r7, #8]
 80034de:	4a1c      	ldr	r2, [pc, #112]	; (8003550 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80034e0:	4293      	cmp	r3, r2
 80034e2:	d806      	bhi.n	80034f2 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80034e4:	68bb      	ldr	r3, [r7, #8]
 80034e6:	4a1b      	ldr	r2, [pc, #108]	; (8003554 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80034e8:	4293      	cmp	r3, r2
 80034ea:	d902      	bls.n	80034f2 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	3308      	adds	r3, #8
 80034f0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80034f2:	68fa      	ldr	r2, [r7, #12]
 80034f4:	4b18      	ldr	r3, [pc, #96]	; (8003558 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80034f6:	4413      	add	r3, r2
 80034f8:	009b      	lsls	r3, r3, #2
 80034fa:	461a      	mov	r2, r3
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	4a16      	ldr	r2, [pc, #88]	; (800355c <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8003504:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	f003 031f 	and.w	r3, r3, #31
 800350c:	2201      	movs	r2, #1
 800350e:	409a      	lsls	r2, r3
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003514:	bf00      	nop
 8003516:	3714      	adds	r7, #20
 8003518:	46bd      	mov	sp, r7
 800351a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351e:	4770      	bx	lr
 8003520:	58025408 	.word	0x58025408
 8003524:	5802541c 	.word	0x5802541c
 8003528:	58025430 	.word	0x58025430
 800352c:	58025444 	.word	0x58025444
 8003530:	58025458 	.word	0x58025458
 8003534:	5802546c 	.word	0x5802546c
 8003538:	58025480 	.word	0x58025480
 800353c:	58025494 	.word	0x58025494
 8003540:	cccccccd 	.word	0xcccccccd
 8003544:	16009600 	.word	0x16009600
 8003548:	58025880 	.word	0x58025880
 800354c:	aaaaaaab 	.word	0xaaaaaaab
 8003550:	400204b8 	.word	0x400204b8
 8003554:	4002040f 	.word	0x4002040f
 8003558:	10008200 	.word	0x10008200
 800355c:	40020880 	.word	0x40020880

08003560 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003560:	b480      	push	{r7}
 8003562:	b085      	sub	sp, #20
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	685b      	ldr	r3, [r3, #4]
 800356c:	b2db      	uxtb	r3, r3
 800356e:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d04a      	beq.n	800360c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	2b08      	cmp	r3, #8
 800357a:	d847      	bhi.n	800360c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4a25      	ldr	r2, [pc, #148]	; (8003618 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d022      	beq.n	80035cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	4a24      	ldr	r2, [pc, #144]	; (800361c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 800358c:	4293      	cmp	r3, r2
 800358e:	d01d      	beq.n	80035cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	4a22      	ldr	r2, [pc, #136]	; (8003620 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8003596:	4293      	cmp	r3, r2
 8003598:	d018      	beq.n	80035cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	4a21      	ldr	r2, [pc, #132]	; (8003624 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d013      	beq.n	80035cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	4a1f      	ldr	r2, [pc, #124]	; (8003628 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d00e      	beq.n	80035cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	4a1e      	ldr	r2, [pc, #120]	; (800362c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80035b4:	4293      	cmp	r3, r2
 80035b6:	d009      	beq.n	80035cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	4a1c      	ldr	r2, [pc, #112]	; (8003630 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80035be:	4293      	cmp	r3, r2
 80035c0:	d004      	beq.n	80035cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	4a1b      	ldr	r2, [pc, #108]	; (8003634 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80035c8:	4293      	cmp	r3, r2
 80035ca:	d101      	bne.n	80035d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80035cc:	2301      	movs	r3, #1
 80035ce:	e000      	b.n	80035d2 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80035d0:	2300      	movs	r3, #0
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d00a      	beq.n	80035ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80035d6:	68fa      	ldr	r2, [r7, #12]
 80035d8:	4b17      	ldr	r3, [pc, #92]	; (8003638 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80035da:	4413      	add	r3, r2
 80035dc:	009b      	lsls	r3, r3, #2
 80035de:	461a      	mov	r2, r3
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	4a15      	ldr	r2, [pc, #84]	; (800363c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80035e8:	671a      	str	r2, [r3, #112]	; 0x70
 80035ea:	e009      	b.n	8003600 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80035ec:	68fa      	ldr	r2, [r7, #12]
 80035ee:	4b14      	ldr	r3, [pc, #80]	; (8003640 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80035f0:	4413      	add	r3, r2
 80035f2:	009b      	lsls	r3, r3, #2
 80035f4:	461a      	mov	r2, r3
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	4a11      	ldr	r2, [pc, #68]	; (8003644 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80035fe:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	3b01      	subs	r3, #1
 8003604:	2201      	movs	r2, #1
 8003606:	409a      	lsls	r2, r3
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 800360c:	bf00      	nop
 800360e:	3714      	adds	r7, #20
 8003610:	46bd      	mov	sp, r7
 8003612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003616:	4770      	bx	lr
 8003618:	58025408 	.word	0x58025408
 800361c:	5802541c 	.word	0x5802541c
 8003620:	58025430 	.word	0x58025430
 8003624:	58025444 	.word	0x58025444
 8003628:	58025458 	.word	0x58025458
 800362c:	5802546c 	.word	0x5802546c
 8003630:	58025480 	.word	0x58025480
 8003634:	58025494 	.word	0x58025494
 8003638:	1600963f 	.word	0x1600963f
 800363c:	58025940 	.word	0x58025940
 8003640:	1000823f 	.word	0x1000823f
 8003644:	40020940 	.word	0x40020940

08003648 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003648:	b480      	push	{r7}
 800364a:	b089      	sub	sp, #36	; 0x24
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
 8003650:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003652:	2300      	movs	r3, #0
 8003654:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8003656:	4b89      	ldr	r3, [pc, #548]	; (800387c <HAL_GPIO_Init+0x234>)
 8003658:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800365a:	e194      	b.n	8003986 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	681a      	ldr	r2, [r3, #0]
 8003660:	2101      	movs	r1, #1
 8003662:	69fb      	ldr	r3, [r7, #28]
 8003664:	fa01 f303 	lsl.w	r3, r1, r3
 8003668:	4013      	ands	r3, r2
 800366a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800366c:	693b      	ldr	r3, [r7, #16]
 800366e:	2b00      	cmp	r3, #0
 8003670:	f000 8186 	beq.w	8003980 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	685b      	ldr	r3, [r3, #4]
 8003678:	2b01      	cmp	r3, #1
 800367a:	d00b      	beq.n	8003694 <HAL_GPIO_Init+0x4c>
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	685b      	ldr	r3, [r3, #4]
 8003680:	2b02      	cmp	r3, #2
 8003682:	d007      	beq.n	8003694 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003688:	2b11      	cmp	r3, #17
 800368a:	d003      	beq.n	8003694 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	685b      	ldr	r3, [r3, #4]
 8003690:	2b12      	cmp	r3, #18
 8003692:	d130      	bne.n	80036f6 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	689b      	ldr	r3, [r3, #8]
 8003698:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800369a:	69fb      	ldr	r3, [r7, #28]
 800369c:	005b      	lsls	r3, r3, #1
 800369e:	2203      	movs	r2, #3
 80036a0:	fa02 f303 	lsl.w	r3, r2, r3
 80036a4:	43db      	mvns	r3, r3
 80036a6:	69ba      	ldr	r2, [r7, #24]
 80036a8:	4013      	ands	r3, r2
 80036aa:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	68da      	ldr	r2, [r3, #12]
 80036b0:	69fb      	ldr	r3, [r7, #28]
 80036b2:	005b      	lsls	r3, r3, #1
 80036b4:	fa02 f303 	lsl.w	r3, r2, r3
 80036b8:	69ba      	ldr	r2, [r7, #24]
 80036ba:	4313      	orrs	r3, r2
 80036bc:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	69ba      	ldr	r2, [r7, #24]
 80036c2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	685b      	ldr	r3, [r3, #4]
 80036c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80036ca:	2201      	movs	r2, #1
 80036cc:	69fb      	ldr	r3, [r7, #28]
 80036ce:	fa02 f303 	lsl.w	r3, r2, r3
 80036d2:	43db      	mvns	r3, r3
 80036d4:	69ba      	ldr	r2, [r7, #24]
 80036d6:	4013      	ands	r3, r2
 80036d8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80036da:	683b      	ldr	r3, [r7, #0]
 80036dc:	685b      	ldr	r3, [r3, #4]
 80036de:	091b      	lsrs	r3, r3, #4
 80036e0:	f003 0201 	and.w	r2, r3, #1
 80036e4:	69fb      	ldr	r3, [r7, #28]
 80036e6:	fa02 f303 	lsl.w	r3, r2, r3
 80036ea:	69ba      	ldr	r2, [r7, #24]
 80036ec:	4313      	orrs	r3, r2
 80036ee:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	69ba      	ldr	r2, [r7, #24]
 80036f4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	68db      	ldr	r3, [r3, #12]
 80036fa:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80036fc:	69fb      	ldr	r3, [r7, #28]
 80036fe:	005b      	lsls	r3, r3, #1
 8003700:	2203      	movs	r2, #3
 8003702:	fa02 f303 	lsl.w	r3, r2, r3
 8003706:	43db      	mvns	r3, r3
 8003708:	69ba      	ldr	r2, [r7, #24]
 800370a:	4013      	ands	r3, r2
 800370c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800370e:	683b      	ldr	r3, [r7, #0]
 8003710:	689a      	ldr	r2, [r3, #8]
 8003712:	69fb      	ldr	r3, [r7, #28]
 8003714:	005b      	lsls	r3, r3, #1
 8003716:	fa02 f303 	lsl.w	r3, r2, r3
 800371a:	69ba      	ldr	r2, [r7, #24]
 800371c:	4313      	orrs	r3, r2
 800371e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	69ba      	ldr	r2, [r7, #24]
 8003724:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003726:	683b      	ldr	r3, [r7, #0]
 8003728:	685b      	ldr	r3, [r3, #4]
 800372a:	2b02      	cmp	r3, #2
 800372c:	d003      	beq.n	8003736 <HAL_GPIO_Init+0xee>
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	685b      	ldr	r3, [r3, #4]
 8003732:	2b12      	cmp	r3, #18
 8003734:	d123      	bne.n	800377e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003736:	69fb      	ldr	r3, [r7, #28]
 8003738:	08da      	lsrs	r2, r3, #3
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	3208      	adds	r2, #8
 800373e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003742:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003744:	69fb      	ldr	r3, [r7, #28]
 8003746:	f003 0307 	and.w	r3, r3, #7
 800374a:	009b      	lsls	r3, r3, #2
 800374c:	220f      	movs	r2, #15
 800374e:	fa02 f303 	lsl.w	r3, r2, r3
 8003752:	43db      	mvns	r3, r3
 8003754:	69ba      	ldr	r2, [r7, #24]
 8003756:	4013      	ands	r3, r2
 8003758:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	691a      	ldr	r2, [r3, #16]
 800375e:	69fb      	ldr	r3, [r7, #28]
 8003760:	f003 0307 	and.w	r3, r3, #7
 8003764:	009b      	lsls	r3, r3, #2
 8003766:	fa02 f303 	lsl.w	r3, r2, r3
 800376a:	69ba      	ldr	r2, [r7, #24]
 800376c:	4313      	orrs	r3, r2
 800376e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003770:	69fb      	ldr	r3, [r7, #28]
 8003772:	08da      	lsrs	r2, r3, #3
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	3208      	adds	r2, #8
 8003778:	69b9      	ldr	r1, [r7, #24]
 800377a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003784:	69fb      	ldr	r3, [r7, #28]
 8003786:	005b      	lsls	r3, r3, #1
 8003788:	2203      	movs	r2, #3
 800378a:	fa02 f303 	lsl.w	r3, r2, r3
 800378e:	43db      	mvns	r3, r3
 8003790:	69ba      	ldr	r2, [r7, #24]
 8003792:	4013      	ands	r3, r2
 8003794:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003796:	683b      	ldr	r3, [r7, #0]
 8003798:	685b      	ldr	r3, [r3, #4]
 800379a:	f003 0203 	and.w	r2, r3, #3
 800379e:	69fb      	ldr	r3, [r7, #28]
 80037a0:	005b      	lsls	r3, r3, #1
 80037a2:	fa02 f303 	lsl.w	r3, r2, r3
 80037a6:	69ba      	ldr	r2, [r7, #24]
 80037a8:	4313      	orrs	r3, r2
 80037aa:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	69ba      	ldr	r2, [r7, #24]
 80037b0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80037b2:	683b      	ldr	r3, [r7, #0]
 80037b4:	685b      	ldr	r3, [r3, #4]
 80037b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	f000 80e0 	beq.w	8003980 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80037c0:	4b2f      	ldr	r3, [pc, #188]	; (8003880 <HAL_GPIO_Init+0x238>)
 80037c2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80037c6:	4a2e      	ldr	r2, [pc, #184]	; (8003880 <HAL_GPIO_Init+0x238>)
 80037c8:	f043 0302 	orr.w	r3, r3, #2
 80037cc:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80037d0:	4b2b      	ldr	r3, [pc, #172]	; (8003880 <HAL_GPIO_Init+0x238>)
 80037d2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80037d6:	f003 0302 	and.w	r3, r3, #2
 80037da:	60fb      	str	r3, [r7, #12]
 80037dc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80037de:	4a29      	ldr	r2, [pc, #164]	; (8003884 <HAL_GPIO_Init+0x23c>)
 80037e0:	69fb      	ldr	r3, [r7, #28]
 80037e2:	089b      	lsrs	r3, r3, #2
 80037e4:	3302      	adds	r3, #2
 80037e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80037ec:	69fb      	ldr	r3, [r7, #28]
 80037ee:	f003 0303 	and.w	r3, r3, #3
 80037f2:	009b      	lsls	r3, r3, #2
 80037f4:	220f      	movs	r2, #15
 80037f6:	fa02 f303 	lsl.w	r3, r2, r3
 80037fa:	43db      	mvns	r3, r3
 80037fc:	69ba      	ldr	r2, [r7, #24]
 80037fe:	4013      	ands	r3, r2
 8003800:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	4a20      	ldr	r2, [pc, #128]	; (8003888 <HAL_GPIO_Init+0x240>)
 8003806:	4293      	cmp	r3, r2
 8003808:	d052      	beq.n	80038b0 <HAL_GPIO_Init+0x268>
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	4a1f      	ldr	r2, [pc, #124]	; (800388c <HAL_GPIO_Init+0x244>)
 800380e:	4293      	cmp	r3, r2
 8003810:	d031      	beq.n	8003876 <HAL_GPIO_Init+0x22e>
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	4a1e      	ldr	r2, [pc, #120]	; (8003890 <HAL_GPIO_Init+0x248>)
 8003816:	4293      	cmp	r3, r2
 8003818:	d02b      	beq.n	8003872 <HAL_GPIO_Init+0x22a>
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	4a1d      	ldr	r2, [pc, #116]	; (8003894 <HAL_GPIO_Init+0x24c>)
 800381e:	4293      	cmp	r3, r2
 8003820:	d025      	beq.n	800386e <HAL_GPIO_Init+0x226>
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	4a1c      	ldr	r2, [pc, #112]	; (8003898 <HAL_GPIO_Init+0x250>)
 8003826:	4293      	cmp	r3, r2
 8003828:	d01f      	beq.n	800386a <HAL_GPIO_Init+0x222>
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	4a1b      	ldr	r2, [pc, #108]	; (800389c <HAL_GPIO_Init+0x254>)
 800382e:	4293      	cmp	r3, r2
 8003830:	d019      	beq.n	8003866 <HAL_GPIO_Init+0x21e>
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	4a1a      	ldr	r2, [pc, #104]	; (80038a0 <HAL_GPIO_Init+0x258>)
 8003836:	4293      	cmp	r3, r2
 8003838:	d013      	beq.n	8003862 <HAL_GPIO_Init+0x21a>
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	4a19      	ldr	r2, [pc, #100]	; (80038a4 <HAL_GPIO_Init+0x25c>)
 800383e:	4293      	cmp	r3, r2
 8003840:	d00d      	beq.n	800385e <HAL_GPIO_Init+0x216>
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	4a18      	ldr	r2, [pc, #96]	; (80038a8 <HAL_GPIO_Init+0x260>)
 8003846:	4293      	cmp	r3, r2
 8003848:	d007      	beq.n	800385a <HAL_GPIO_Init+0x212>
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	4a17      	ldr	r2, [pc, #92]	; (80038ac <HAL_GPIO_Init+0x264>)
 800384e:	4293      	cmp	r3, r2
 8003850:	d101      	bne.n	8003856 <HAL_GPIO_Init+0x20e>
 8003852:	2309      	movs	r3, #9
 8003854:	e02d      	b.n	80038b2 <HAL_GPIO_Init+0x26a>
 8003856:	230a      	movs	r3, #10
 8003858:	e02b      	b.n	80038b2 <HAL_GPIO_Init+0x26a>
 800385a:	2308      	movs	r3, #8
 800385c:	e029      	b.n	80038b2 <HAL_GPIO_Init+0x26a>
 800385e:	2307      	movs	r3, #7
 8003860:	e027      	b.n	80038b2 <HAL_GPIO_Init+0x26a>
 8003862:	2306      	movs	r3, #6
 8003864:	e025      	b.n	80038b2 <HAL_GPIO_Init+0x26a>
 8003866:	2305      	movs	r3, #5
 8003868:	e023      	b.n	80038b2 <HAL_GPIO_Init+0x26a>
 800386a:	2304      	movs	r3, #4
 800386c:	e021      	b.n	80038b2 <HAL_GPIO_Init+0x26a>
 800386e:	2303      	movs	r3, #3
 8003870:	e01f      	b.n	80038b2 <HAL_GPIO_Init+0x26a>
 8003872:	2302      	movs	r3, #2
 8003874:	e01d      	b.n	80038b2 <HAL_GPIO_Init+0x26a>
 8003876:	2301      	movs	r3, #1
 8003878:	e01b      	b.n	80038b2 <HAL_GPIO_Init+0x26a>
 800387a:	bf00      	nop
 800387c:	58000080 	.word	0x58000080
 8003880:	58024400 	.word	0x58024400
 8003884:	58000400 	.word	0x58000400
 8003888:	58020000 	.word	0x58020000
 800388c:	58020400 	.word	0x58020400
 8003890:	58020800 	.word	0x58020800
 8003894:	58020c00 	.word	0x58020c00
 8003898:	58021000 	.word	0x58021000
 800389c:	58021400 	.word	0x58021400
 80038a0:	58021800 	.word	0x58021800
 80038a4:	58021c00 	.word	0x58021c00
 80038a8:	58022000 	.word	0x58022000
 80038ac:	58022400 	.word	0x58022400
 80038b0:	2300      	movs	r3, #0
 80038b2:	69fa      	ldr	r2, [r7, #28]
 80038b4:	f002 0203 	and.w	r2, r2, #3
 80038b8:	0092      	lsls	r2, r2, #2
 80038ba:	4093      	lsls	r3, r2
 80038bc:	69ba      	ldr	r2, [r7, #24]
 80038be:	4313      	orrs	r3, r2
 80038c0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80038c2:	4938      	ldr	r1, [pc, #224]	; (80039a4 <HAL_GPIO_Init+0x35c>)
 80038c4:	69fb      	ldr	r3, [r7, #28]
 80038c6:	089b      	lsrs	r3, r3, #2
 80038c8:	3302      	adds	r3, #2
 80038ca:	69ba      	ldr	r2, [r7, #24]
 80038cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80038d0:	697b      	ldr	r3, [r7, #20]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80038d6:	693b      	ldr	r3, [r7, #16]
 80038d8:	43db      	mvns	r3, r3
 80038da:	69ba      	ldr	r2, [r7, #24]
 80038dc:	4013      	ands	r3, r2
 80038de:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	685b      	ldr	r3, [r3, #4]
 80038e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d003      	beq.n	80038f4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80038ec:	69ba      	ldr	r2, [r7, #24]
 80038ee:	693b      	ldr	r3, [r7, #16]
 80038f0:	4313      	orrs	r3, r2
 80038f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80038f4:	697b      	ldr	r3, [r7, #20]
 80038f6:	69ba      	ldr	r2, [r7, #24]
 80038f8:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 80038fa:	697b      	ldr	r3, [r7, #20]
 80038fc:	685b      	ldr	r3, [r3, #4]
 80038fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003900:	693b      	ldr	r3, [r7, #16]
 8003902:	43db      	mvns	r3, r3
 8003904:	69ba      	ldr	r2, [r7, #24]
 8003906:	4013      	ands	r3, r2
 8003908:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800390a:	683b      	ldr	r3, [r7, #0]
 800390c:	685b      	ldr	r3, [r3, #4]
 800390e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003912:	2b00      	cmp	r3, #0
 8003914:	d003      	beq.n	800391e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003916:	69ba      	ldr	r2, [r7, #24]
 8003918:	693b      	ldr	r3, [r7, #16]
 800391a:	4313      	orrs	r3, r2
 800391c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800391e:	697b      	ldr	r3, [r7, #20]
 8003920:	69ba      	ldr	r2, [r7, #24]
 8003922:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003924:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800392c:	693b      	ldr	r3, [r7, #16]
 800392e:	43db      	mvns	r3, r3
 8003930:	69ba      	ldr	r2, [r7, #24]
 8003932:	4013      	ands	r3, r2
 8003934:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003936:	683b      	ldr	r3, [r7, #0]
 8003938:	685b      	ldr	r3, [r3, #4]
 800393a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800393e:	2b00      	cmp	r3, #0
 8003940:	d003      	beq.n	800394a <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8003942:	69ba      	ldr	r2, [r7, #24]
 8003944:	693b      	ldr	r3, [r7, #16]
 8003946:	4313      	orrs	r3, r2
 8003948:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800394a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800394e:	69bb      	ldr	r3, [r7, #24]
 8003950:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003952:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003956:	685b      	ldr	r3, [r3, #4]
 8003958:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800395a:	693b      	ldr	r3, [r7, #16]
 800395c:	43db      	mvns	r3, r3
 800395e:	69ba      	ldr	r2, [r7, #24]
 8003960:	4013      	ands	r3, r2
 8003962:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	685b      	ldr	r3, [r3, #4]
 8003968:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800396c:	2b00      	cmp	r3, #0
 800396e:	d003      	beq.n	8003978 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8003970:	69ba      	ldr	r2, [r7, #24]
 8003972:	693b      	ldr	r3, [r7, #16]
 8003974:	4313      	orrs	r3, r2
 8003976:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8003978:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800397c:	69bb      	ldr	r3, [r7, #24]
 800397e:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8003980:	69fb      	ldr	r3, [r7, #28]
 8003982:	3301      	adds	r3, #1
 8003984:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003986:	683b      	ldr	r3, [r7, #0]
 8003988:	681a      	ldr	r2, [r3, #0]
 800398a:	69fb      	ldr	r3, [r7, #28]
 800398c:	fa22 f303 	lsr.w	r3, r2, r3
 8003990:	2b00      	cmp	r3, #0
 8003992:	f47f ae63 	bne.w	800365c <HAL_GPIO_Init+0x14>
  }
}
 8003996:	bf00      	nop
 8003998:	bf00      	nop
 800399a:	3724      	adds	r7, #36	; 0x24
 800399c:	46bd      	mov	sp, r7
 800399e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a2:	4770      	bx	lr
 80039a4:	58000400 	.word	0x58000400

080039a8 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 80039a8:	b480      	push	{r7}
 80039aa:	b083      	sub	sp, #12
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 80039b0:	4a08      	ldr	r2, [pc, #32]	; (80039d4 <HAL_HSEM_FastTake+0x2c>)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	3320      	adds	r3, #32
 80039b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039ba:	4a07      	ldr	r2, [pc, #28]	; (80039d8 <HAL_HSEM_FastTake+0x30>)
 80039bc:	4293      	cmp	r3, r2
 80039be:	d101      	bne.n	80039c4 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 80039c0:	2300      	movs	r3, #0
 80039c2:	e000      	b.n	80039c6 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 80039c4:	2301      	movs	r3, #1
}
 80039c6:	4618      	mov	r0, r3
 80039c8:	370c      	adds	r7, #12
 80039ca:	46bd      	mov	sp, r7
 80039cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d0:	4770      	bx	lr
 80039d2:	bf00      	nop
 80039d4:	58026400 	.word	0x58026400
 80039d8:	80000300 	.word	0x80000300

080039dc <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 80039dc:	b480      	push	{r7}
 80039de:	b083      	sub	sp, #12
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
 80039e4:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 80039e6:	4906      	ldr	r1, [pc, #24]	; (8003a00 <HAL_HSEM_Release+0x24>)
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 80039f4:	bf00      	nop
 80039f6:	370c      	adds	r7, #12
 80039f8:	46bd      	mov	sp, r7
 80039fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fe:	4770      	bx	lr
 8003a00:	58026400 	.word	0x58026400

08003a04 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	b082      	sub	sp, #8
 8003a08:	af00      	add	r7, sp, #0
    /*Clear Flags*/
    HSEM->C2ICR = ((uint32_t)statusreg);
  }
#else
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 8003a0a:	4b0a      	ldr	r3, [pc, #40]	; (8003a34 <HAL_HSEM_IRQHandler+0x30>)
 8003a0c:	68db      	ldr	r3, [r3, #12]
 8003a0e:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 8003a10:	4b08      	ldr	r3, [pc, #32]	; (8003a34 <HAL_HSEM_IRQHandler+0x30>)
 8003a12:	681a      	ldr	r2, [r3, #0]
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	43db      	mvns	r3, r3
 8003a18:	4906      	ldr	r1, [pc, #24]	; (8003a34 <HAL_HSEM_IRQHandler+0x30>)
 8003a1a:	4013      	ands	r3, r2
 8003a1c:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 8003a1e:	4a05      	ldr	r2, [pc, #20]	; (8003a34 <HAL_HSEM_IRQHandler+0x30>)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6053      	str	r3, [r2, #4]

#endif
  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 8003a24:	6878      	ldr	r0, [r7, #4]
 8003a26:	f000 f807 	bl	8003a38 <HAL_HSEM_FreeCallback>
}
 8003a2a:	bf00      	nop
 8003a2c:	3708      	adds	r7, #8
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	bd80      	pop	{r7, pc}
 8003a32:	bf00      	nop
 8003a34:	58026500 	.word	0x58026500

08003a38 <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 8003a38:	b480      	push	{r7}
 8003a3a:	b083      	sub	sp, #12
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 8003a40:	bf00      	nop
 8003a42:	370c      	adds	r7, #12
 8003a44:	46bd      	mov	sp, r7
 8003a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4a:	4770      	bx	lr

08003a4c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b084      	sub	sp, #16
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8003a54:	4b29      	ldr	r3, [pc, #164]	; (8003afc <HAL_PWREx_ConfigSupply+0xb0>)
 8003a56:	68db      	ldr	r3, [r3, #12]
 8003a58:	f003 0307 	and.w	r3, r3, #7
 8003a5c:	2b06      	cmp	r3, #6
 8003a5e:	d00a      	beq.n	8003a76 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003a60:	4b26      	ldr	r3, [pc, #152]	; (8003afc <HAL_PWREx_ConfigSupply+0xb0>)
 8003a62:	68db      	ldr	r3, [r3, #12]
 8003a64:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003a68:	687a      	ldr	r2, [r7, #4]
 8003a6a:	429a      	cmp	r2, r3
 8003a6c:	d001      	beq.n	8003a72 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8003a6e:	2301      	movs	r3, #1
 8003a70:	e040      	b.n	8003af4 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8003a72:	2300      	movs	r3, #0
 8003a74:	e03e      	b.n	8003af4 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8003a76:	4b21      	ldr	r3, [pc, #132]	; (8003afc <HAL_PWREx_ConfigSupply+0xb0>)
 8003a78:	68db      	ldr	r3, [r3, #12]
 8003a7a:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8003a7e:	491f      	ldr	r1, [pc, #124]	; (8003afc <HAL_PWREx_ConfigSupply+0xb0>)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	4313      	orrs	r3, r2
 8003a84:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8003a86:	f7fd fac3 	bl	8001010 <HAL_GetTick>
 8003a8a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003a8c:	e009      	b.n	8003aa2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003a8e:	f7fd fabf 	bl	8001010 <HAL_GetTick>
 8003a92:	4602      	mov	r2, r0
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	1ad3      	subs	r3, r2, r3
 8003a98:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003a9c:	d901      	bls.n	8003aa2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8003a9e:	2301      	movs	r3, #1
 8003aa0:	e028      	b.n	8003af4 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003aa2:	4b16      	ldr	r3, [pc, #88]	; (8003afc <HAL_PWREx_ConfigSupply+0xb0>)
 8003aa4:	685b      	ldr	r3, [r3, #4]
 8003aa6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003aaa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003aae:	d1ee      	bne.n	8003a8e <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2b1e      	cmp	r3, #30
 8003ab4:	d008      	beq.n	8003ac8 <HAL_PWREx_ConfigSupply+0x7c>
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	2b2e      	cmp	r3, #46	; 0x2e
 8003aba:	d005      	beq.n	8003ac8 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2b1d      	cmp	r3, #29
 8003ac0:	d002      	beq.n	8003ac8 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	2b2d      	cmp	r3, #45	; 0x2d
 8003ac6:	d114      	bne.n	8003af2 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8003ac8:	f7fd faa2 	bl	8001010 <HAL_GetTick>
 8003acc:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8003ace:	e009      	b.n	8003ae4 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003ad0:	f7fd fa9e 	bl	8001010 <HAL_GetTick>
 8003ad4:	4602      	mov	r2, r0
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	1ad3      	subs	r3, r2, r3
 8003ada:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003ade:	d901      	bls.n	8003ae4 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8003ae0:	2301      	movs	r3, #1
 8003ae2:	e007      	b.n	8003af4 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8003ae4:	4b05      	ldr	r3, [pc, #20]	; (8003afc <HAL_PWREx_ConfigSupply+0xb0>)
 8003ae6:	68db      	ldr	r3, [r3, #12]
 8003ae8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003aec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003af0:	d1ee      	bne.n	8003ad0 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003af2:	2300      	movs	r3, #0
}
 8003af4:	4618      	mov	r0, r3
 8003af6:	3710      	adds	r7, #16
 8003af8:	46bd      	mov	sp, r7
 8003afa:	bd80      	pop	{r7, pc}
 8003afc:	58024800 	.word	0x58024800

08003b00 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b08c      	sub	sp, #48	; 0x30
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d101      	bne.n	8003b12 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003b0e:	2301      	movs	r3, #1
 8003b10:	e3ff      	b.n	8004312 <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f003 0301 	and.w	r3, r3, #1
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	f000 8087 	beq.w	8003c2e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003b20:	4b99      	ldr	r3, [pc, #612]	; (8003d88 <HAL_RCC_OscConfig+0x288>)
 8003b22:	691b      	ldr	r3, [r3, #16]
 8003b24:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003b28:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003b2a:	4b97      	ldr	r3, [pc, #604]	; (8003d88 <HAL_RCC_OscConfig+0x288>)
 8003b2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b2e:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003b30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b32:	2b10      	cmp	r3, #16
 8003b34:	d007      	beq.n	8003b46 <HAL_RCC_OscConfig+0x46>
 8003b36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b38:	2b18      	cmp	r3, #24
 8003b3a:	d110      	bne.n	8003b5e <HAL_RCC_OscConfig+0x5e>
 8003b3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b3e:	f003 0303 	and.w	r3, r3, #3
 8003b42:	2b02      	cmp	r3, #2
 8003b44:	d10b      	bne.n	8003b5e <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b46:	4b90      	ldr	r3, [pc, #576]	; (8003d88 <HAL_RCC_OscConfig+0x288>)
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d06c      	beq.n	8003c2c <HAL_RCC_OscConfig+0x12c>
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	685b      	ldr	r3, [r3, #4]
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d168      	bne.n	8003c2c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003b5a:	2301      	movs	r3, #1
 8003b5c:	e3d9      	b.n	8004312 <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	685b      	ldr	r3, [r3, #4]
 8003b62:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b66:	d106      	bne.n	8003b76 <HAL_RCC_OscConfig+0x76>
 8003b68:	4b87      	ldr	r3, [pc, #540]	; (8003d88 <HAL_RCC_OscConfig+0x288>)
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	4a86      	ldr	r2, [pc, #536]	; (8003d88 <HAL_RCC_OscConfig+0x288>)
 8003b6e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b72:	6013      	str	r3, [r2, #0]
 8003b74:	e02e      	b.n	8003bd4 <HAL_RCC_OscConfig+0xd4>
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	685b      	ldr	r3, [r3, #4]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d10c      	bne.n	8003b98 <HAL_RCC_OscConfig+0x98>
 8003b7e:	4b82      	ldr	r3, [pc, #520]	; (8003d88 <HAL_RCC_OscConfig+0x288>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	4a81      	ldr	r2, [pc, #516]	; (8003d88 <HAL_RCC_OscConfig+0x288>)
 8003b84:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b88:	6013      	str	r3, [r2, #0]
 8003b8a:	4b7f      	ldr	r3, [pc, #508]	; (8003d88 <HAL_RCC_OscConfig+0x288>)
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	4a7e      	ldr	r2, [pc, #504]	; (8003d88 <HAL_RCC_OscConfig+0x288>)
 8003b90:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b94:	6013      	str	r3, [r2, #0]
 8003b96:	e01d      	b.n	8003bd4 <HAL_RCC_OscConfig+0xd4>
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	685b      	ldr	r3, [r3, #4]
 8003b9c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003ba0:	d10c      	bne.n	8003bbc <HAL_RCC_OscConfig+0xbc>
 8003ba2:	4b79      	ldr	r3, [pc, #484]	; (8003d88 <HAL_RCC_OscConfig+0x288>)
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	4a78      	ldr	r2, [pc, #480]	; (8003d88 <HAL_RCC_OscConfig+0x288>)
 8003ba8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003bac:	6013      	str	r3, [r2, #0]
 8003bae:	4b76      	ldr	r3, [pc, #472]	; (8003d88 <HAL_RCC_OscConfig+0x288>)
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	4a75      	ldr	r2, [pc, #468]	; (8003d88 <HAL_RCC_OscConfig+0x288>)
 8003bb4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003bb8:	6013      	str	r3, [r2, #0]
 8003bba:	e00b      	b.n	8003bd4 <HAL_RCC_OscConfig+0xd4>
 8003bbc:	4b72      	ldr	r3, [pc, #456]	; (8003d88 <HAL_RCC_OscConfig+0x288>)
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	4a71      	ldr	r2, [pc, #452]	; (8003d88 <HAL_RCC_OscConfig+0x288>)
 8003bc2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003bc6:	6013      	str	r3, [r2, #0]
 8003bc8:	4b6f      	ldr	r3, [pc, #444]	; (8003d88 <HAL_RCC_OscConfig+0x288>)
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	4a6e      	ldr	r2, [pc, #440]	; (8003d88 <HAL_RCC_OscConfig+0x288>)
 8003bce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003bd2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	685b      	ldr	r3, [r3, #4]
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d013      	beq.n	8003c04 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bdc:	f7fd fa18 	bl	8001010 <HAL_GetTick>
 8003be0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003be2:	e008      	b.n	8003bf6 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003be4:	f7fd fa14 	bl	8001010 <HAL_GetTick>
 8003be8:	4602      	mov	r2, r0
 8003bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bec:	1ad3      	subs	r3, r2, r3
 8003bee:	2b64      	cmp	r3, #100	; 0x64
 8003bf0:	d901      	bls.n	8003bf6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003bf2:	2303      	movs	r3, #3
 8003bf4:	e38d      	b.n	8004312 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003bf6:	4b64      	ldr	r3, [pc, #400]	; (8003d88 <HAL_RCC_OscConfig+0x288>)
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d0f0      	beq.n	8003be4 <HAL_RCC_OscConfig+0xe4>
 8003c02:	e014      	b.n	8003c2e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c04:	f7fd fa04 	bl	8001010 <HAL_GetTick>
 8003c08:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003c0a:	e008      	b.n	8003c1e <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c0c:	f7fd fa00 	bl	8001010 <HAL_GetTick>
 8003c10:	4602      	mov	r2, r0
 8003c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c14:	1ad3      	subs	r3, r2, r3
 8003c16:	2b64      	cmp	r3, #100	; 0x64
 8003c18:	d901      	bls.n	8003c1e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003c1a:	2303      	movs	r3, #3
 8003c1c:	e379      	b.n	8004312 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003c1e:	4b5a      	ldr	r3, [pc, #360]	; (8003d88 <HAL_RCC_OscConfig+0x288>)
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d1f0      	bne.n	8003c0c <HAL_RCC_OscConfig+0x10c>
 8003c2a:	e000      	b.n	8003c2e <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c2c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f003 0302 	and.w	r3, r3, #2
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	f000 80ae 	beq.w	8003d98 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003c3c:	4b52      	ldr	r3, [pc, #328]	; (8003d88 <HAL_RCC_OscConfig+0x288>)
 8003c3e:	691b      	ldr	r3, [r3, #16]
 8003c40:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003c44:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003c46:	4b50      	ldr	r3, [pc, #320]	; (8003d88 <HAL_RCC_OscConfig+0x288>)
 8003c48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c4a:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003c4c:	6a3b      	ldr	r3, [r7, #32]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d007      	beq.n	8003c62 <HAL_RCC_OscConfig+0x162>
 8003c52:	6a3b      	ldr	r3, [r7, #32]
 8003c54:	2b18      	cmp	r3, #24
 8003c56:	d13a      	bne.n	8003cce <HAL_RCC_OscConfig+0x1ce>
 8003c58:	69fb      	ldr	r3, [r7, #28]
 8003c5a:	f003 0303 	and.w	r3, r3, #3
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d135      	bne.n	8003cce <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003c62:	4b49      	ldr	r3, [pc, #292]	; (8003d88 <HAL_RCC_OscConfig+0x288>)
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f003 0304 	and.w	r3, r3, #4
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d005      	beq.n	8003c7a <HAL_RCC_OscConfig+0x17a>
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	68db      	ldr	r3, [r3, #12]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d101      	bne.n	8003c7a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003c76:	2301      	movs	r3, #1
 8003c78:	e34b      	b.n	8004312 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c7a:	f7fd f9d5 	bl	8001028 <HAL_GetREVID>
 8003c7e:	4603      	mov	r3, r0
 8003c80:	f241 0203 	movw	r2, #4099	; 0x1003
 8003c84:	4293      	cmp	r3, r2
 8003c86:	d817      	bhi.n	8003cb8 <HAL_RCC_OscConfig+0x1b8>
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	691b      	ldr	r3, [r3, #16]
 8003c8c:	2b40      	cmp	r3, #64	; 0x40
 8003c8e:	d108      	bne.n	8003ca2 <HAL_RCC_OscConfig+0x1a2>
 8003c90:	4b3d      	ldr	r3, [pc, #244]	; (8003d88 <HAL_RCC_OscConfig+0x288>)
 8003c92:	685b      	ldr	r3, [r3, #4]
 8003c94:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8003c98:	4a3b      	ldr	r2, [pc, #236]	; (8003d88 <HAL_RCC_OscConfig+0x288>)
 8003c9a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c9e:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003ca0:	e07a      	b.n	8003d98 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ca2:	4b39      	ldr	r3, [pc, #228]	; (8003d88 <HAL_RCC_OscConfig+0x288>)
 8003ca4:	685b      	ldr	r3, [r3, #4]
 8003ca6:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	691b      	ldr	r3, [r3, #16]
 8003cae:	031b      	lsls	r3, r3, #12
 8003cb0:	4935      	ldr	r1, [pc, #212]	; (8003d88 <HAL_RCC_OscConfig+0x288>)
 8003cb2:	4313      	orrs	r3, r2
 8003cb4:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003cb6:	e06f      	b.n	8003d98 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cb8:	4b33      	ldr	r3, [pc, #204]	; (8003d88 <HAL_RCC_OscConfig+0x288>)
 8003cba:	685b      	ldr	r3, [r3, #4]
 8003cbc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	691b      	ldr	r3, [r3, #16]
 8003cc4:	061b      	lsls	r3, r3, #24
 8003cc6:	4930      	ldr	r1, [pc, #192]	; (8003d88 <HAL_RCC_OscConfig+0x288>)
 8003cc8:	4313      	orrs	r3, r2
 8003cca:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003ccc:	e064      	b.n	8003d98 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	68db      	ldr	r3, [r3, #12]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d045      	beq.n	8003d62 <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003cd6:	4b2c      	ldr	r3, [pc, #176]	; (8003d88 <HAL_RCC_OscConfig+0x288>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f023 0219 	bic.w	r2, r3, #25
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	68db      	ldr	r3, [r3, #12]
 8003ce2:	4929      	ldr	r1, [pc, #164]	; (8003d88 <HAL_RCC_OscConfig+0x288>)
 8003ce4:	4313      	orrs	r3, r2
 8003ce6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ce8:	f7fd f992 	bl	8001010 <HAL_GetTick>
 8003cec:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003cee:	e008      	b.n	8003d02 <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003cf0:	f7fd f98e 	bl	8001010 <HAL_GetTick>
 8003cf4:	4602      	mov	r2, r0
 8003cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cf8:	1ad3      	subs	r3, r2, r3
 8003cfa:	2b02      	cmp	r3, #2
 8003cfc:	d901      	bls.n	8003d02 <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 8003cfe:	2303      	movs	r3, #3
 8003d00:	e307      	b.n	8004312 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003d02:	4b21      	ldr	r3, [pc, #132]	; (8003d88 <HAL_RCC_OscConfig+0x288>)
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f003 0304 	and.w	r3, r3, #4
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d0f0      	beq.n	8003cf0 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d0e:	f7fd f98b 	bl	8001028 <HAL_GetREVID>
 8003d12:	4603      	mov	r3, r0
 8003d14:	f241 0203 	movw	r2, #4099	; 0x1003
 8003d18:	4293      	cmp	r3, r2
 8003d1a:	d817      	bhi.n	8003d4c <HAL_RCC_OscConfig+0x24c>
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	691b      	ldr	r3, [r3, #16]
 8003d20:	2b40      	cmp	r3, #64	; 0x40
 8003d22:	d108      	bne.n	8003d36 <HAL_RCC_OscConfig+0x236>
 8003d24:	4b18      	ldr	r3, [pc, #96]	; (8003d88 <HAL_RCC_OscConfig+0x288>)
 8003d26:	685b      	ldr	r3, [r3, #4]
 8003d28:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8003d2c:	4a16      	ldr	r2, [pc, #88]	; (8003d88 <HAL_RCC_OscConfig+0x288>)
 8003d2e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d32:	6053      	str	r3, [r2, #4]
 8003d34:	e030      	b.n	8003d98 <HAL_RCC_OscConfig+0x298>
 8003d36:	4b14      	ldr	r3, [pc, #80]	; (8003d88 <HAL_RCC_OscConfig+0x288>)
 8003d38:	685b      	ldr	r3, [r3, #4]
 8003d3a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	691b      	ldr	r3, [r3, #16]
 8003d42:	031b      	lsls	r3, r3, #12
 8003d44:	4910      	ldr	r1, [pc, #64]	; (8003d88 <HAL_RCC_OscConfig+0x288>)
 8003d46:	4313      	orrs	r3, r2
 8003d48:	604b      	str	r3, [r1, #4]
 8003d4a:	e025      	b.n	8003d98 <HAL_RCC_OscConfig+0x298>
 8003d4c:	4b0e      	ldr	r3, [pc, #56]	; (8003d88 <HAL_RCC_OscConfig+0x288>)
 8003d4e:	685b      	ldr	r3, [r3, #4]
 8003d50:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	691b      	ldr	r3, [r3, #16]
 8003d58:	061b      	lsls	r3, r3, #24
 8003d5a:	490b      	ldr	r1, [pc, #44]	; (8003d88 <HAL_RCC_OscConfig+0x288>)
 8003d5c:	4313      	orrs	r3, r2
 8003d5e:	604b      	str	r3, [r1, #4]
 8003d60:	e01a      	b.n	8003d98 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d62:	4b09      	ldr	r3, [pc, #36]	; (8003d88 <HAL_RCC_OscConfig+0x288>)
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	4a08      	ldr	r2, [pc, #32]	; (8003d88 <HAL_RCC_OscConfig+0x288>)
 8003d68:	f023 0301 	bic.w	r3, r3, #1
 8003d6c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d6e:	f7fd f94f 	bl	8001010 <HAL_GetTick>
 8003d72:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003d74:	e00a      	b.n	8003d8c <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d76:	f7fd f94b 	bl	8001010 <HAL_GetTick>
 8003d7a:	4602      	mov	r2, r0
 8003d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d7e:	1ad3      	subs	r3, r2, r3
 8003d80:	2b02      	cmp	r3, #2
 8003d82:	d903      	bls.n	8003d8c <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8003d84:	2303      	movs	r3, #3
 8003d86:	e2c4      	b.n	8004312 <HAL_RCC_OscConfig+0x812>
 8003d88:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003d8c:	4ba4      	ldr	r3, [pc, #656]	; (8004020 <HAL_RCC_OscConfig+0x520>)
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f003 0304 	and.w	r3, r3, #4
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d1ee      	bne.n	8003d76 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f003 0310 	and.w	r3, r3, #16
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	f000 80a9 	beq.w	8003ef8 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003da6:	4b9e      	ldr	r3, [pc, #632]	; (8004020 <HAL_RCC_OscConfig+0x520>)
 8003da8:	691b      	ldr	r3, [r3, #16]
 8003daa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003dae:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003db0:	4b9b      	ldr	r3, [pc, #620]	; (8004020 <HAL_RCC_OscConfig+0x520>)
 8003db2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003db4:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003db6:	69bb      	ldr	r3, [r7, #24]
 8003db8:	2b08      	cmp	r3, #8
 8003dba:	d007      	beq.n	8003dcc <HAL_RCC_OscConfig+0x2cc>
 8003dbc:	69bb      	ldr	r3, [r7, #24]
 8003dbe:	2b18      	cmp	r3, #24
 8003dc0:	d13a      	bne.n	8003e38 <HAL_RCC_OscConfig+0x338>
 8003dc2:	697b      	ldr	r3, [r7, #20]
 8003dc4:	f003 0303 	and.w	r3, r3, #3
 8003dc8:	2b01      	cmp	r3, #1
 8003dca:	d135      	bne.n	8003e38 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003dcc:	4b94      	ldr	r3, [pc, #592]	; (8004020 <HAL_RCC_OscConfig+0x520>)
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d005      	beq.n	8003de4 <HAL_RCC_OscConfig+0x2e4>
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	69db      	ldr	r3, [r3, #28]
 8003ddc:	2b80      	cmp	r3, #128	; 0x80
 8003dde:	d001      	beq.n	8003de4 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8003de0:	2301      	movs	r3, #1
 8003de2:	e296      	b.n	8004312 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003de4:	f7fd f920 	bl	8001028 <HAL_GetREVID>
 8003de8:	4603      	mov	r3, r0
 8003dea:	f241 0203 	movw	r2, #4099	; 0x1003
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d817      	bhi.n	8003e22 <HAL_RCC_OscConfig+0x322>
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6a1b      	ldr	r3, [r3, #32]
 8003df6:	2b20      	cmp	r3, #32
 8003df8:	d108      	bne.n	8003e0c <HAL_RCC_OscConfig+0x30c>
 8003dfa:	4b89      	ldr	r3, [pc, #548]	; (8004020 <HAL_RCC_OscConfig+0x520>)
 8003dfc:	685b      	ldr	r3, [r3, #4]
 8003dfe:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8003e02:	4a87      	ldr	r2, [pc, #540]	; (8004020 <HAL_RCC_OscConfig+0x520>)
 8003e04:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003e08:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003e0a:	e075      	b.n	8003ef8 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003e0c:	4b84      	ldr	r3, [pc, #528]	; (8004020 <HAL_RCC_OscConfig+0x520>)
 8003e0e:	685b      	ldr	r3, [r3, #4]
 8003e10:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	6a1b      	ldr	r3, [r3, #32]
 8003e18:	069b      	lsls	r3, r3, #26
 8003e1a:	4981      	ldr	r1, [pc, #516]	; (8004020 <HAL_RCC_OscConfig+0x520>)
 8003e1c:	4313      	orrs	r3, r2
 8003e1e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003e20:	e06a      	b.n	8003ef8 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003e22:	4b7f      	ldr	r3, [pc, #508]	; (8004020 <HAL_RCC_OscConfig+0x520>)
 8003e24:	68db      	ldr	r3, [r3, #12]
 8003e26:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6a1b      	ldr	r3, [r3, #32]
 8003e2e:	061b      	lsls	r3, r3, #24
 8003e30:	497b      	ldr	r1, [pc, #492]	; (8004020 <HAL_RCC_OscConfig+0x520>)
 8003e32:	4313      	orrs	r3, r2
 8003e34:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003e36:	e05f      	b.n	8003ef8 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	69db      	ldr	r3, [r3, #28]
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d042      	beq.n	8003ec6 <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003e40:	4b77      	ldr	r3, [pc, #476]	; (8004020 <HAL_RCC_OscConfig+0x520>)
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	4a76      	ldr	r2, [pc, #472]	; (8004020 <HAL_RCC_OscConfig+0x520>)
 8003e46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e4a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e4c:	f7fd f8e0 	bl	8001010 <HAL_GetTick>
 8003e50:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003e52:	e008      	b.n	8003e66 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8003e54:	f7fd f8dc 	bl	8001010 <HAL_GetTick>
 8003e58:	4602      	mov	r2, r0
 8003e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e5c:	1ad3      	subs	r3, r2, r3
 8003e5e:	2b02      	cmp	r3, #2
 8003e60:	d901      	bls.n	8003e66 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8003e62:	2303      	movs	r3, #3
 8003e64:	e255      	b.n	8004312 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003e66:	4b6e      	ldr	r3, [pc, #440]	; (8004020 <HAL_RCC_OscConfig+0x520>)
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d0f0      	beq.n	8003e54 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003e72:	f7fd f8d9 	bl	8001028 <HAL_GetREVID>
 8003e76:	4603      	mov	r3, r0
 8003e78:	f241 0203 	movw	r2, #4099	; 0x1003
 8003e7c:	4293      	cmp	r3, r2
 8003e7e:	d817      	bhi.n	8003eb0 <HAL_RCC_OscConfig+0x3b0>
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6a1b      	ldr	r3, [r3, #32]
 8003e84:	2b20      	cmp	r3, #32
 8003e86:	d108      	bne.n	8003e9a <HAL_RCC_OscConfig+0x39a>
 8003e88:	4b65      	ldr	r3, [pc, #404]	; (8004020 <HAL_RCC_OscConfig+0x520>)
 8003e8a:	685b      	ldr	r3, [r3, #4]
 8003e8c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8003e90:	4a63      	ldr	r2, [pc, #396]	; (8004020 <HAL_RCC_OscConfig+0x520>)
 8003e92:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003e96:	6053      	str	r3, [r2, #4]
 8003e98:	e02e      	b.n	8003ef8 <HAL_RCC_OscConfig+0x3f8>
 8003e9a:	4b61      	ldr	r3, [pc, #388]	; (8004020 <HAL_RCC_OscConfig+0x520>)
 8003e9c:	685b      	ldr	r3, [r3, #4]
 8003e9e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6a1b      	ldr	r3, [r3, #32]
 8003ea6:	069b      	lsls	r3, r3, #26
 8003ea8:	495d      	ldr	r1, [pc, #372]	; (8004020 <HAL_RCC_OscConfig+0x520>)
 8003eaa:	4313      	orrs	r3, r2
 8003eac:	604b      	str	r3, [r1, #4]
 8003eae:	e023      	b.n	8003ef8 <HAL_RCC_OscConfig+0x3f8>
 8003eb0:	4b5b      	ldr	r3, [pc, #364]	; (8004020 <HAL_RCC_OscConfig+0x520>)
 8003eb2:	68db      	ldr	r3, [r3, #12]
 8003eb4:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	6a1b      	ldr	r3, [r3, #32]
 8003ebc:	061b      	lsls	r3, r3, #24
 8003ebe:	4958      	ldr	r1, [pc, #352]	; (8004020 <HAL_RCC_OscConfig+0x520>)
 8003ec0:	4313      	orrs	r3, r2
 8003ec2:	60cb      	str	r3, [r1, #12]
 8003ec4:	e018      	b.n	8003ef8 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003ec6:	4b56      	ldr	r3, [pc, #344]	; (8004020 <HAL_RCC_OscConfig+0x520>)
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	4a55      	ldr	r2, [pc, #340]	; (8004020 <HAL_RCC_OscConfig+0x520>)
 8003ecc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003ed0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ed2:	f7fd f89d 	bl	8001010 <HAL_GetTick>
 8003ed6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003ed8:	e008      	b.n	8003eec <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8003eda:	f7fd f899 	bl	8001010 <HAL_GetTick>
 8003ede:	4602      	mov	r2, r0
 8003ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ee2:	1ad3      	subs	r3, r2, r3
 8003ee4:	2b02      	cmp	r3, #2
 8003ee6:	d901      	bls.n	8003eec <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8003ee8:	2303      	movs	r3, #3
 8003eea:	e212      	b.n	8004312 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003eec:	4b4c      	ldr	r3, [pc, #304]	; (8004020 <HAL_RCC_OscConfig+0x520>)
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d1f0      	bne.n	8003eda <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f003 0308 	and.w	r3, r3, #8
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d036      	beq.n	8003f72 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	695b      	ldr	r3, [r3, #20]
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d019      	beq.n	8003f40 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003f0c:	4b44      	ldr	r3, [pc, #272]	; (8004020 <HAL_RCC_OscConfig+0x520>)
 8003f0e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f10:	4a43      	ldr	r2, [pc, #268]	; (8004020 <HAL_RCC_OscConfig+0x520>)
 8003f12:	f043 0301 	orr.w	r3, r3, #1
 8003f16:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f18:	f7fd f87a 	bl	8001010 <HAL_GetTick>
 8003f1c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003f1e:	e008      	b.n	8003f32 <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003f20:	f7fd f876 	bl	8001010 <HAL_GetTick>
 8003f24:	4602      	mov	r2, r0
 8003f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f28:	1ad3      	subs	r3, r2, r3
 8003f2a:	2b02      	cmp	r3, #2
 8003f2c:	d901      	bls.n	8003f32 <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8003f2e:	2303      	movs	r3, #3
 8003f30:	e1ef      	b.n	8004312 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003f32:	4b3b      	ldr	r3, [pc, #236]	; (8004020 <HAL_RCC_OscConfig+0x520>)
 8003f34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f36:	f003 0302 	and.w	r3, r3, #2
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d0f0      	beq.n	8003f20 <HAL_RCC_OscConfig+0x420>
 8003f3e:	e018      	b.n	8003f72 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003f40:	4b37      	ldr	r3, [pc, #220]	; (8004020 <HAL_RCC_OscConfig+0x520>)
 8003f42:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f44:	4a36      	ldr	r2, [pc, #216]	; (8004020 <HAL_RCC_OscConfig+0x520>)
 8003f46:	f023 0301 	bic.w	r3, r3, #1
 8003f4a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f4c:	f7fd f860 	bl	8001010 <HAL_GetTick>
 8003f50:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003f52:	e008      	b.n	8003f66 <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003f54:	f7fd f85c 	bl	8001010 <HAL_GetTick>
 8003f58:	4602      	mov	r2, r0
 8003f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f5c:	1ad3      	subs	r3, r2, r3
 8003f5e:	2b02      	cmp	r3, #2
 8003f60:	d901      	bls.n	8003f66 <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 8003f62:	2303      	movs	r3, #3
 8003f64:	e1d5      	b.n	8004312 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003f66:	4b2e      	ldr	r3, [pc, #184]	; (8004020 <HAL_RCC_OscConfig+0x520>)
 8003f68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f6a:	f003 0302 	and.w	r3, r3, #2
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d1f0      	bne.n	8003f54 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f003 0320 	and.w	r3, r3, #32
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d036      	beq.n	8003fec <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	699b      	ldr	r3, [r3, #24]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d019      	beq.n	8003fba <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003f86:	4b26      	ldr	r3, [pc, #152]	; (8004020 <HAL_RCC_OscConfig+0x520>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	4a25      	ldr	r2, [pc, #148]	; (8004020 <HAL_RCC_OscConfig+0x520>)
 8003f8c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003f90:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003f92:	f7fd f83d 	bl	8001010 <HAL_GetTick>
 8003f96:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003f98:	e008      	b.n	8003fac <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8003f9a:	f7fd f839 	bl	8001010 <HAL_GetTick>
 8003f9e:	4602      	mov	r2, r0
 8003fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fa2:	1ad3      	subs	r3, r2, r3
 8003fa4:	2b02      	cmp	r3, #2
 8003fa6:	d901      	bls.n	8003fac <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8003fa8:	2303      	movs	r3, #3
 8003faa:	e1b2      	b.n	8004312 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003fac:	4b1c      	ldr	r3, [pc, #112]	; (8004020 <HAL_RCC_OscConfig+0x520>)
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d0f0      	beq.n	8003f9a <HAL_RCC_OscConfig+0x49a>
 8003fb8:	e018      	b.n	8003fec <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003fba:	4b19      	ldr	r3, [pc, #100]	; (8004020 <HAL_RCC_OscConfig+0x520>)
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	4a18      	ldr	r2, [pc, #96]	; (8004020 <HAL_RCC_OscConfig+0x520>)
 8003fc0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003fc4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003fc6:	f7fd f823 	bl	8001010 <HAL_GetTick>
 8003fca:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003fcc:	e008      	b.n	8003fe0 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8003fce:	f7fd f81f 	bl	8001010 <HAL_GetTick>
 8003fd2:	4602      	mov	r2, r0
 8003fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fd6:	1ad3      	subs	r3, r2, r3
 8003fd8:	2b02      	cmp	r3, #2
 8003fda:	d901      	bls.n	8003fe0 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 8003fdc:	2303      	movs	r3, #3
 8003fde:	e198      	b.n	8004312 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003fe0:	4b0f      	ldr	r3, [pc, #60]	; (8004020 <HAL_RCC_OscConfig+0x520>)
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d1f0      	bne.n	8003fce <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f003 0304 	and.w	r3, r3, #4
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	f000 8085 	beq.w	8004104 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003ffa:	4b0a      	ldr	r3, [pc, #40]	; (8004024 <HAL_RCC_OscConfig+0x524>)
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	4a09      	ldr	r2, [pc, #36]	; (8004024 <HAL_RCC_OscConfig+0x524>)
 8004000:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004004:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004006:	f7fd f803 	bl	8001010 <HAL_GetTick>
 800400a:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800400c:	e00c      	b.n	8004028 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800400e:	f7fc ffff 	bl	8001010 <HAL_GetTick>
 8004012:	4602      	mov	r2, r0
 8004014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004016:	1ad3      	subs	r3, r2, r3
 8004018:	2b64      	cmp	r3, #100	; 0x64
 800401a:	d905      	bls.n	8004028 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 800401c:	2303      	movs	r3, #3
 800401e:	e178      	b.n	8004312 <HAL_RCC_OscConfig+0x812>
 8004020:	58024400 	.word	0x58024400
 8004024:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004028:	4b96      	ldr	r3, [pc, #600]	; (8004284 <HAL_RCC_OscConfig+0x784>)
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004030:	2b00      	cmp	r3, #0
 8004032:	d0ec      	beq.n	800400e <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	689b      	ldr	r3, [r3, #8]
 8004038:	2b01      	cmp	r3, #1
 800403a:	d106      	bne.n	800404a <HAL_RCC_OscConfig+0x54a>
 800403c:	4b92      	ldr	r3, [pc, #584]	; (8004288 <HAL_RCC_OscConfig+0x788>)
 800403e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004040:	4a91      	ldr	r2, [pc, #580]	; (8004288 <HAL_RCC_OscConfig+0x788>)
 8004042:	f043 0301 	orr.w	r3, r3, #1
 8004046:	6713      	str	r3, [r2, #112]	; 0x70
 8004048:	e02d      	b.n	80040a6 <HAL_RCC_OscConfig+0x5a6>
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	689b      	ldr	r3, [r3, #8]
 800404e:	2b00      	cmp	r3, #0
 8004050:	d10c      	bne.n	800406c <HAL_RCC_OscConfig+0x56c>
 8004052:	4b8d      	ldr	r3, [pc, #564]	; (8004288 <HAL_RCC_OscConfig+0x788>)
 8004054:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004056:	4a8c      	ldr	r2, [pc, #560]	; (8004288 <HAL_RCC_OscConfig+0x788>)
 8004058:	f023 0301 	bic.w	r3, r3, #1
 800405c:	6713      	str	r3, [r2, #112]	; 0x70
 800405e:	4b8a      	ldr	r3, [pc, #552]	; (8004288 <HAL_RCC_OscConfig+0x788>)
 8004060:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004062:	4a89      	ldr	r2, [pc, #548]	; (8004288 <HAL_RCC_OscConfig+0x788>)
 8004064:	f023 0304 	bic.w	r3, r3, #4
 8004068:	6713      	str	r3, [r2, #112]	; 0x70
 800406a:	e01c      	b.n	80040a6 <HAL_RCC_OscConfig+0x5a6>
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	689b      	ldr	r3, [r3, #8]
 8004070:	2b05      	cmp	r3, #5
 8004072:	d10c      	bne.n	800408e <HAL_RCC_OscConfig+0x58e>
 8004074:	4b84      	ldr	r3, [pc, #528]	; (8004288 <HAL_RCC_OscConfig+0x788>)
 8004076:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004078:	4a83      	ldr	r2, [pc, #524]	; (8004288 <HAL_RCC_OscConfig+0x788>)
 800407a:	f043 0304 	orr.w	r3, r3, #4
 800407e:	6713      	str	r3, [r2, #112]	; 0x70
 8004080:	4b81      	ldr	r3, [pc, #516]	; (8004288 <HAL_RCC_OscConfig+0x788>)
 8004082:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004084:	4a80      	ldr	r2, [pc, #512]	; (8004288 <HAL_RCC_OscConfig+0x788>)
 8004086:	f043 0301 	orr.w	r3, r3, #1
 800408a:	6713      	str	r3, [r2, #112]	; 0x70
 800408c:	e00b      	b.n	80040a6 <HAL_RCC_OscConfig+0x5a6>
 800408e:	4b7e      	ldr	r3, [pc, #504]	; (8004288 <HAL_RCC_OscConfig+0x788>)
 8004090:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004092:	4a7d      	ldr	r2, [pc, #500]	; (8004288 <HAL_RCC_OscConfig+0x788>)
 8004094:	f023 0301 	bic.w	r3, r3, #1
 8004098:	6713      	str	r3, [r2, #112]	; 0x70
 800409a:	4b7b      	ldr	r3, [pc, #492]	; (8004288 <HAL_RCC_OscConfig+0x788>)
 800409c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800409e:	4a7a      	ldr	r2, [pc, #488]	; (8004288 <HAL_RCC_OscConfig+0x788>)
 80040a0:	f023 0304 	bic.w	r3, r3, #4
 80040a4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	689b      	ldr	r3, [r3, #8]
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d015      	beq.n	80040da <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040ae:	f7fc ffaf 	bl	8001010 <HAL_GetTick>
 80040b2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80040b4:	e00a      	b.n	80040cc <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80040b6:	f7fc ffab 	bl	8001010 <HAL_GetTick>
 80040ba:	4602      	mov	r2, r0
 80040bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040be:	1ad3      	subs	r3, r2, r3
 80040c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80040c4:	4293      	cmp	r3, r2
 80040c6:	d901      	bls.n	80040cc <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 80040c8:	2303      	movs	r3, #3
 80040ca:	e122      	b.n	8004312 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80040cc:	4b6e      	ldr	r3, [pc, #440]	; (8004288 <HAL_RCC_OscConfig+0x788>)
 80040ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040d0:	f003 0302 	and.w	r3, r3, #2
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d0ee      	beq.n	80040b6 <HAL_RCC_OscConfig+0x5b6>
 80040d8:	e014      	b.n	8004104 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040da:	f7fc ff99 	bl	8001010 <HAL_GetTick>
 80040de:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80040e0:	e00a      	b.n	80040f8 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80040e2:	f7fc ff95 	bl	8001010 <HAL_GetTick>
 80040e6:	4602      	mov	r2, r0
 80040e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ea:	1ad3      	subs	r3, r2, r3
 80040ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80040f0:	4293      	cmp	r3, r2
 80040f2:	d901      	bls.n	80040f8 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 80040f4:	2303      	movs	r3, #3
 80040f6:	e10c      	b.n	8004312 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80040f8:	4b63      	ldr	r3, [pc, #396]	; (8004288 <HAL_RCC_OscConfig+0x788>)
 80040fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040fc:	f003 0302 	and.w	r3, r3, #2
 8004100:	2b00      	cmp	r3, #0
 8004102:	d1ee      	bne.n	80040e2 <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004108:	2b00      	cmp	r3, #0
 800410a:	f000 8101 	beq.w	8004310 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800410e:	4b5e      	ldr	r3, [pc, #376]	; (8004288 <HAL_RCC_OscConfig+0x788>)
 8004110:	691b      	ldr	r3, [r3, #16]
 8004112:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004116:	2b18      	cmp	r3, #24
 8004118:	f000 80bc 	beq.w	8004294 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004120:	2b02      	cmp	r3, #2
 8004122:	f040 8095 	bne.w	8004250 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004126:	4b58      	ldr	r3, [pc, #352]	; (8004288 <HAL_RCC_OscConfig+0x788>)
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	4a57      	ldr	r2, [pc, #348]	; (8004288 <HAL_RCC_OscConfig+0x788>)
 800412c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004130:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004132:	f7fc ff6d 	bl	8001010 <HAL_GetTick>
 8004136:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004138:	e008      	b.n	800414c <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800413a:	f7fc ff69 	bl	8001010 <HAL_GetTick>
 800413e:	4602      	mov	r2, r0
 8004140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004142:	1ad3      	subs	r3, r2, r3
 8004144:	2b02      	cmp	r3, #2
 8004146:	d901      	bls.n	800414c <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8004148:	2303      	movs	r3, #3
 800414a:	e0e2      	b.n	8004312 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800414c:	4b4e      	ldr	r3, [pc, #312]	; (8004288 <HAL_RCC_OscConfig+0x788>)
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004154:	2b00      	cmp	r3, #0
 8004156:	d1f0      	bne.n	800413a <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004158:	4b4b      	ldr	r3, [pc, #300]	; (8004288 <HAL_RCC_OscConfig+0x788>)
 800415a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800415c:	4b4b      	ldr	r3, [pc, #300]	; (800428c <HAL_RCC_OscConfig+0x78c>)
 800415e:	4013      	ands	r3, r2
 8004160:	687a      	ldr	r2, [r7, #4]
 8004162:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8004164:	687a      	ldr	r2, [r7, #4]
 8004166:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004168:	0112      	lsls	r2, r2, #4
 800416a:	430a      	orrs	r2, r1
 800416c:	4946      	ldr	r1, [pc, #280]	; (8004288 <HAL_RCC_OscConfig+0x788>)
 800416e:	4313      	orrs	r3, r2
 8004170:	628b      	str	r3, [r1, #40]	; 0x28
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004176:	3b01      	subs	r3, #1
 8004178:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004180:	3b01      	subs	r3, #1
 8004182:	025b      	lsls	r3, r3, #9
 8004184:	b29b      	uxth	r3, r3
 8004186:	431a      	orrs	r2, r3
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800418c:	3b01      	subs	r3, #1
 800418e:	041b      	lsls	r3, r3, #16
 8004190:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004194:	431a      	orrs	r2, r3
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800419a:	3b01      	subs	r3, #1
 800419c:	061b      	lsls	r3, r3, #24
 800419e:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80041a2:	4939      	ldr	r1, [pc, #228]	; (8004288 <HAL_RCC_OscConfig+0x788>)
 80041a4:	4313      	orrs	r3, r2
 80041a6:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80041a8:	4b37      	ldr	r3, [pc, #220]	; (8004288 <HAL_RCC_OscConfig+0x788>)
 80041aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041ac:	4a36      	ldr	r2, [pc, #216]	; (8004288 <HAL_RCC_OscConfig+0x788>)
 80041ae:	f023 0301 	bic.w	r3, r3, #1
 80041b2:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80041b4:	4b34      	ldr	r3, [pc, #208]	; (8004288 <HAL_RCC_OscConfig+0x788>)
 80041b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80041b8:	4b35      	ldr	r3, [pc, #212]	; (8004290 <HAL_RCC_OscConfig+0x790>)
 80041ba:	4013      	ands	r3, r2
 80041bc:	687a      	ldr	r2, [r7, #4]
 80041be:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80041c0:	00d2      	lsls	r2, r2, #3
 80041c2:	4931      	ldr	r1, [pc, #196]	; (8004288 <HAL_RCC_OscConfig+0x788>)
 80041c4:	4313      	orrs	r3, r2
 80041c6:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80041c8:	4b2f      	ldr	r3, [pc, #188]	; (8004288 <HAL_RCC_OscConfig+0x788>)
 80041ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041cc:	f023 020c 	bic.w	r2, r3, #12
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041d4:	492c      	ldr	r1, [pc, #176]	; (8004288 <HAL_RCC_OscConfig+0x788>)
 80041d6:	4313      	orrs	r3, r2
 80041d8:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80041da:	4b2b      	ldr	r3, [pc, #172]	; (8004288 <HAL_RCC_OscConfig+0x788>)
 80041dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041de:	f023 0202 	bic.w	r2, r3, #2
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041e6:	4928      	ldr	r1, [pc, #160]	; (8004288 <HAL_RCC_OscConfig+0x788>)
 80041e8:	4313      	orrs	r3, r2
 80041ea:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80041ec:	4b26      	ldr	r3, [pc, #152]	; (8004288 <HAL_RCC_OscConfig+0x788>)
 80041ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041f0:	4a25      	ldr	r2, [pc, #148]	; (8004288 <HAL_RCC_OscConfig+0x788>)
 80041f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041f6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80041f8:	4b23      	ldr	r3, [pc, #140]	; (8004288 <HAL_RCC_OscConfig+0x788>)
 80041fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041fc:	4a22      	ldr	r2, [pc, #136]	; (8004288 <HAL_RCC_OscConfig+0x788>)
 80041fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004202:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004204:	4b20      	ldr	r3, [pc, #128]	; (8004288 <HAL_RCC_OscConfig+0x788>)
 8004206:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004208:	4a1f      	ldr	r2, [pc, #124]	; (8004288 <HAL_RCC_OscConfig+0x788>)
 800420a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800420e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8004210:	4b1d      	ldr	r3, [pc, #116]	; (8004288 <HAL_RCC_OscConfig+0x788>)
 8004212:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004214:	4a1c      	ldr	r2, [pc, #112]	; (8004288 <HAL_RCC_OscConfig+0x788>)
 8004216:	f043 0301 	orr.w	r3, r3, #1
 800421a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800421c:	4b1a      	ldr	r3, [pc, #104]	; (8004288 <HAL_RCC_OscConfig+0x788>)
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	4a19      	ldr	r2, [pc, #100]	; (8004288 <HAL_RCC_OscConfig+0x788>)
 8004222:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004226:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004228:	f7fc fef2 	bl	8001010 <HAL_GetTick>
 800422c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800422e:	e008      	b.n	8004242 <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004230:	f7fc feee 	bl	8001010 <HAL_GetTick>
 8004234:	4602      	mov	r2, r0
 8004236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004238:	1ad3      	subs	r3, r2, r3
 800423a:	2b02      	cmp	r3, #2
 800423c:	d901      	bls.n	8004242 <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 800423e:	2303      	movs	r3, #3
 8004240:	e067      	b.n	8004312 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004242:	4b11      	ldr	r3, [pc, #68]	; (8004288 <HAL_RCC_OscConfig+0x788>)
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800424a:	2b00      	cmp	r3, #0
 800424c:	d0f0      	beq.n	8004230 <HAL_RCC_OscConfig+0x730>
 800424e:	e05f      	b.n	8004310 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004250:	4b0d      	ldr	r3, [pc, #52]	; (8004288 <HAL_RCC_OscConfig+0x788>)
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	4a0c      	ldr	r2, [pc, #48]	; (8004288 <HAL_RCC_OscConfig+0x788>)
 8004256:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800425a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800425c:	f7fc fed8 	bl	8001010 <HAL_GetTick>
 8004260:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004262:	e008      	b.n	8004276 <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004264:	f7fc fed4 	bl	8001010 <HAL_GetTick>
 8004268:	4602      	mov	r2, r0
 800426a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800426c:	1ad3      	subs	r3, r2, r3
 800426e:	2b02      	cmp	r3, #2
 8004270:	d901      	bls.n	8004276 <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 8004272:	2303      	movs	r3, #3
 8004274:	e04d      	b.n	8004312 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004276:	4b04      	ldr	r3, [pc, #16]	; (8004288 <HAL_RCC_OscConfig+0x788>)
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800427e:	2b00      	cmp	r3, #0
 8004280:	d1f0      	bne.n	8004264 <HAL_RCC_OscConfig+0x764>
 8004282:	e045      	b.n	8004310 <HAL_RCC_OscConfig+0x810>
 8004284:	58024800 	.word	0x58024800
 8004288:	58024400 	.word	0x58024400
 800428c:	fffffc0c 	.word	0xfffffc0c
 8004290:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004294:	4b21      	ldr	r3, [pc, #132]	; (800431c <HAL_RCC_OscConfig+0x81c>)
 8004296:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004298:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800429a:	4b20      	ldr	r3, [pc, #128]	; (800431c <HAL_RCC_OscConfig+0x81c>)
 800429c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800429e:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042a4:	2b01      	cmp	r3, #1
 80042a6:	d031      	beq.n	800430c <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80042a8:	693b      	ldr	r3, [r7, #16]
 80042aa:	f003 0203 	and.w	r2, r3, #3
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80042b2:	429a      	cmp	r2, r3
 80042b4:	d12a      	bne.n	800430c <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80042b6:	693b      	ldr	r3, [r7, #16]
 80042b8:	091b      	lsrs	r3, r3, #4
 80042ba:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80042c2:	429a      	cmp	r2, r3
 80042c4:	d122      	bne.n	800430c <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042d0:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80042d2:	429a      	cmp	r2, r3
 80042d4:	d11a      	bne.n	800430c <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	0a5b      	lsrs	r3, r3, #9
 80042da:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042e2:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80042e4:	429a      	cmp	r2, r3
 80042e6:	d111      	bne.n	800430c <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	0c1b      	lsrs	r3, r3, #16
 80042ec:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042f4:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80042f6:	429a      	cmp	r2, r3
 80042f8:	d108      	bne.n	800430c <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	0e1b      	lsrs	r3, r3, #24
 80042fe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004306:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004308:	429a      	cmp	r2, r3
 800430a:	d001      	beq.n	8004310 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 800430c:	2301      	movs	r3, #1
 800430e:	e000      	b.n	8004312 <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 8004310:	2300      	movs	r3, #0
}
 8004312:	4618      	mov	r0, r3
 8004314:	3730      	adds	r7, #48	; 0x30
 8004316:	46bd      	mov	sp, r7
 8004318:	bd80      	pop	{r7, pc}
 800431a:	bf00      	nop
 800431c:	58024400 	.word	0x58024400

08004320 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004320:	b580      	push	{r7, lr}
 8004322:	b086      	sub	sp, #24
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
 8004328:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	2b00      	cmp	r3, #0
 800432e:	d101      	bne.n	8004334 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004330:	2301      	movs	r3, #1
 8004332:	e19c      	b.n	800466e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004334:	4b8a      	ldr	r3, [pc, #552]	; (8004560 <HAL_RCC_ClockConfig+0x240>)
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f003 030f 	and.w	r3, r3, #15
 800433c:	683a      	ldr	r2, [r7, #0]
 800433e:	429a      	cmp	r2, r3
 8004340:	d910      	bls.n	8004364 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004342:	4b87      	ldr	r3, [pc, #540]	; (8004560 <HAL_RCC_ClockConfig+0x240>)
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f023 020f 	bic.w	r2, r3, #15
 800434a:	4985      	ldr	r1, [pc, #532]	; (8004560 <HAL_RCC_ClockConfig+0x240>)
 800434c:	683b      	ldr	r3, [r7, #0]
 800434e:	4313      	orrs	r3, r2
 8004350:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004352:	4b83      	ldr	r3, [pc, #524]	; (8004560 <HAL_RCC_ClockConfig+0x240>)
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f003 030f 	and.w	r3, r3, #15
 800435a:	683a      	ldr	r2, [r7, #0]
 800435c:	429a      	cmp	r2, r3
 800435e:	d001      	beq.n	8004364 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004360:	2301      	movs	r3, #1
 8004362:	e184      	b.n	800466e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f003 0304 	and.w	r3, r3, #4
 800436c:	2b00      	cmp	r3, #0
 800436e:	d010      	beq.n	8004392 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	691a      	ldr	r2, [r3, #16]
 8004374:	4b7b      	ldr	r3, [pc, #492]	; (8004564 <HAL_RCC_ClockConfig+0x244>)
 8004376:	699b      	ldr	r3, [r3, #24]
 8004378:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800437c:	429a      	cmp	r2, r3
 800437e:	d908      	bls.n	8004392 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004380:	4b78      	ldr	r3, [pc, #480]	; (8004564 <HAL_RCC_ClockConfig+0x244>)
 8004382:	699b      	ldr	r3, [r3, #24]
 8004384:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	691b      	ldr	r3, [r3, #16]
 800438c:	4975      	ldr	r1, [pc, #468]	; (8004564 <HAL_RCC_ClockConfig+0x244>)
 800438e:	4313      	orrs	r3, r2
 8004390:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f003 0308 	and.w	r3, r3, #8
 800439a:	2b00      	cmp	r3, #0
 800439c:	d010      	beq.n	80043c0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	695a      	ldr	r2, [r3, #20]
 80043a2:	4b70      	ldr	r3, [pc, #448]	; (8004564 <HAL_RCC_ClockConfig+0x244>)
 80043a4:	69db      	ldr	r3, [r3, #28]
 80043a6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80043aa:	429a      	cmp	r2, r3
 80043ac:	d908      	bls.n	80043c0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80043ae:	4b6d      	ldr	r3, [pc, #436]	; (8004564 <HAL_RCC_ClockConfig+0x244>)
 80043b0:	69db      	ldr	r3, [r3, #28]
 80043b2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	695b      	ldr	r3, [r3, #20]
 80043ba:	496a      	ldr	r1, [pc, #424]	; (8004564 <HAL_RCC_ClockConfig+0x244>)
 80043bc:	4313      	orrs	r3, r2
 80043be:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f003 0310 	and.w	r3, r3, #16
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d010      	beq.n	80043ee <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	699a      	ldr	r2, [r3, #24]
 80043d0:	4b64      	ldr	r3, [pc, #400]	; (8004564 <HAL_RCC_ClockConfig+0x244>)
 80043d2:	69db      	ldr	r3, [r3, #28]
 80043d4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80043d8:	429a      	cmp	r2, r3
 80043da:	d908      	bls.n	80043ee <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80043dc:	4b61      	ldr	r3, [pc, #388]	; (8004564 <HAL_RCC_ClockConfig+0x244>)
 80043de:	69db      	ldr	r3, [r3, #28]
 80043e0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	699b      	ldr	r3, [r3, #24]
 80043e8:	495e      	ldr	r1, [pc, #376]	; (8004564 <HAL_RCC_ClockConfig+0x244>)
 80043ea:	4313      	orrs	r3, r2
 80043ec:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f003 0320 	and.w	r3, r3, #32
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d010      	beq.n	800441c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	69da      	ldr	r2, [r3, #28]
 80043fe:	4b59      	ldr	r3, [pc, #356]	; (8004564 <HAL_RCC_ClockConfig+0x244>)
 8004400:	6a1b      	ldr	r3, [r3, #32]
 8004402:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004406:	429a      	cmp	r2, r3
 8004408:	d908      	bls.n	800441c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800440a:	4b56      	ldr	r3, [pc, #344]	; (8004564 <HAL_RCC_ClockConfig+0x244>)
 800440c:	6a1b      	ldr	r3, [r3, #32]
 800440e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	69db      	ldr	r3, [r3, #28]
 8004416:	4953      	ldr	r1, [pc, #332]	; (8004564 <HAL_RCC_ClockConfig+0x244>)
 8004418:	4313      	orrs	r3, r2
 800441a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f003 0302 	and.w	r3, r3, #2
 8004424:	2b00      	cmp	r3, #0
 8004426:	d010      	beq.n	800444a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	68da      	ldr	r2, [r3, #12]
 800442c:	4b4d      	ldr	r3, [pc, #308]	; (8004564 <HAL_RCC_ClockConfig+0x244>)
 800442e:	699b      	ldr	r3, [r3, #24]
 8004430:	f003 030f 	and.w	r3, r3, #15
 8004434:	429a      	cmp	r2, r3
 8004436:	d908      	bls.n	800444a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004438:	4b4a      	ldr	r3, [pc, #296]	; (8004564 <HAL_RCC_ClockConfig+0x244>)
 800443a:	699b      	ldr	r3, [r3, #24]
 800443c:	f023 020f 	bic.w	r2, r3, #15
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	68db      	ldr	r3, [r3, #12]
 8004444:	4947      	ldr	r1, [pc, #284]	; (8004564 <HAL_RCC_ClockConfig+0x244>)
 8004446:	4313      	orrs	r3, r2
 8004448:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f003 0301 	and.w	r3, r3, #1
 8004452:	2b00      	cmp	r3, #0
 8004454:	d055      	beq.n	8004502 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8004456:	4b43      	ldr	r3, [pc, #268]	; (8004564 <HAL_RCC_ClockConfig+0x244>)
 8004458:	699b      	ldr	r3, [r3, #24]
 800445a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	689b      	ldr	r3, [r3, #8]
 8004462:	4940      	ldr	r1, [pc, #256]	; (8004564 <HAL_RCC_ClockConfig+0x244>)
 8004464:	4313      	orrs	r3, r2
 8004466:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	685b      	ldr	r3, [r3, #4]
 800446c:	2b02      	cmp	r3, #2
 800446e:	d107      	bne.n	8004480 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004470:	4b3c      	ldr	r3, [pc, #240]	; (8004564 <HAL_RCC_ClockConfig+0x244>)
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004478:	2b00      	cmp	r3, #0
 800447a:	d121      	bne.n	80044c0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800447c:	2301      	movs	r3, #1
 800447e:	e0f6      	b.n	800466e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	685b      	ldr	r3, [r3, #4]
 8004484:	2b03      	cmp	r3, #3
 8004486:	d107      	bne.n	8004498 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004488:	4b36      	ldr	r3, [pc, #216]	; (8004564 <HAL_RCC_ClockConfig+0x244>)
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004490:	2b00      	cmp	r3, #0
 8004492:	d115      	bne.n	80044c0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004494:	2301      	movs	r3, #1
 8004496:	e0ea      	b.n	800466e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	685b      	ldr	r3, [r3, #4]
 800449c:	2b01      	cmp	r3, #1
 800449e:	d107      	bne.n	80044b0 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80044a0:	4b30      	ldr	r3, [pc, #192]	; (8004564 <HAL_RCC_ClockConfig+0x244>)
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d109      	bne.n	80044c0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80044ac:	2301      	movs	r3, #1
 80044ae:	e0de      	b.n	800466e <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80044b0:	4b2c      	ldr	r3, [pc, #176]	; (8004564 <HAL_RCC_ClockConfig+0x244>)
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f003 0304 	and.w	r3, r3, #4
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d101      	bne.n	80044c0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80044bc:	2301      	movs	r3, #1
 80044be:	e0d6      	b.n	800466e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80044c0:	4b28      	ldr	r3, [pc, #160]	; (8004564 <HAL_RCC_ClockConfig+0x244>)
 80044c2:	691b      	ldr	r3, [r3, #16]
 80044c4:	f023 0207 	bic.w	r2, r3, #7
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	685b      	ldr	r3, [r3, #4]
 80044cc:	4925      	ldr	r1, [pc, #148]	; (8004564 <HAL_RCC_ClockConfig+0x244>)
 80044ce:	4313      	orrs	r3, r2
 80044d0:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044d2:	f7fc fd9d 	bl	8001010 <HAL_GetTick>
 80044d6:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044d8:	e00a      	b.n	80044f0 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80044da:	f7fc fd99 	bl	8001010 <HAL_GetTick>
 80044de:	4602      	mov	r2, r0
 80044e0:	697b      	ldr	r3, [r7, #20]
 80044e2:	1ad3      	subs	r3, r2, r3
 80044e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80044e8:	4293      	cmp	r3, r2
 80044ea:	d901      	bls.n	80044f0 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80044ec:	2303      	movs	r3, #3
 80044ee:	e0be      	b.n	800466e <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044f0:	4b1c      	ldr	r3, [pc, #112]	; (8004564 <HAL_RCC_ClockConfig+0x244>)
 80044f2:	691b      	ldr	r3, [r3, #16]
 80044f4:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	685b      	ldr	r3, [r3, #4]
 80044fc:	00db      	lsls	r3, r3, #3
 80044fe:	429a      	cmp	r2, r3
 8004500:	d1eb      	bne.n	80044da <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f003 0302 	and.w	r3, r3, #2
 800450a:	2b00      	cmp	r3, #0
 800450c:	d010      	beq.n	8004530 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	68da      	ldr	r2, [r3, #12]
 8004512:	4b14      	ldr	r3, [pc, #80]	; (8004564 <HAL_RCC_ClockConfig+0x244>)
 8004514:	699b      	ldr	r3, [r3, #24]
 8004516:	f003 030f 	and.w	r3, r3, #15
 800451a:	429a      	cmp	r2, r3
 800451c:	d208      	bcs.n	8004530 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800451e:	4b11      	ldr	r3, [pc, #68]	; (8004564 <HAL_RCC_ClockConfig+0x244>)
 8004520:	699b      	ldr	r3, [r3, #24]
 8004522:	f023 020f 	bic.w	r2, r3, #15
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	68db      	ldr	r3, [r3, #12]
 800452a:	490e      	ldr	r1, [pc, #56]	; (8004564 <HAL_RCC_ClockConfig+0x244>)
 800452c:	4313      	orrs	r3, r2
 800452e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004530:	4b0b      	ldr	r3, [pc, #44]	; (8004560 <HAL_RCC_ClockConfig+0x240>)
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f003 030f 	and.w	r3, r3, #15
 8004538:	683a      	ldr	r2, [r7, #0]
 800453a:	429a      	cmp	r2, r3
 800453c:	d214      	bcs.n	8004568 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800453e:	4b08      	ldr	r3, [pc, #32]	; (8004560 <HAL_RCC_ClockConfig+0x240>)
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f023 020f 	bic.w	r2, r3, #15
 8004546:	4906      	ldr	r1, [pc, #24]	; (8004560 <HAL_RCC_ClockConfig+0x240>)
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	4313      	orrs	r3, r2
 800454c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800454e:	4b04      	ldr	r3, [pc, #16]	; (8004560 <HAL_RCC_ClockConfig+0x240>)
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f003 030f 	and.w	r3, r3, #15
 8004556:	683a      	ldr	r2, [r7, #0]
 8004558:	429a      	cmp	r2, r3
 800455a:	d005      	beq.n	8004568 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800455c:	2301      	movs	r3, #1
 800455e:	e086      	b.n	800466e <HAL_RCC_ClockConfig+0x34e>
 8004560:	52002000 	.word	0x52002000
 8004564:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f003 0304 	and.w	r3, r3, #4
 8004570:	2b00      	cmp	r3, #0
 8004572:	d010      	beq.n	8004596 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	691a      	ldr	r2, [r3, #16]
 8004578:	4b3f      	ldr	r3, [pc, #252]	; (8004678 <HAL_RCC_ClockConfig+0x358>)
 800457a:	699b      	ldr	r3, [r3, #24]
 800457c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004580:	429a      	cmp	r2, r3
 8004582:	d208      	bcs.n	8004596 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004584:	4b3c      	ldr	r3, [pc, #240]	; (8004678 <HAL_RCC_ClockConfig+0x358>)
 8004586:	699b      	ldr	r3, [r3, #24]
 8004588:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	691b      	ldr	r3, [r3, #16]
 8004590:	4939      	ldr	r1, [pc, #228]	; (8004678 <HAL_RCC_ClockConfig+0x358>)
 8004592:	4313      	orrs	r3, r2
 8004594:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f003 0308 	and.w	r3, r3, #8
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d010      	beq.n	80045c4 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	695a      	ldr	r2, [r3, #20]
 80045a6:	4b34      	ldr	r3, [pc, #208]	; (8004678 <HAL_RCC_ClockConfig+0x358>)
 80045a8:	69db      	ldr	r3, [r3, #28]
 80045aa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80045ae:	429a      	cmp	r2, r3
 80045b0:	d208      	bcs.n	80045c4 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80045b2:	4b31      	ldr	r3, [pc, #196]	; (8004678 <HAL_RCC_ClockConfig+0x358>)
 80045b4:	69db      	ldr	r3, [r3, #28]
 80045b6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	695b      	ldr	r3, [r3, #20]
 80045be:	492e      	ldr	r1, [pc, #184]	; (8004678 <HAL_RCC_ClockConfig+0x358>)
 80045c0:	4313      	orrs	r3, r2
 80045c2:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f003 0310 	and.w	r3, r3, #16
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d010      	beq.n	80045f2 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	699a      	ldr	r2, [r3, #24]
 80045d4:	4b28      	ldr	r3, [pc, #160]	; (8004678 <HAL_RCC_ClockConfig+0x358>)
 80045d6:	69db      	ldr	r3, [r3, #28]
 80045d8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80045dc:	429a      	cmp	r2, r3
 80045de:	d208      	bcs.n	80045f2 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80045e0:	4b25      	ldr	r3, [pc, #148]	; (8004678 <HAL_RCC_ClockConfig+0x358>)
 80045e2:	69db      	ldr	r3, [r3, #28]
 80045e4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	699b      	ldr	r3, [r3, #24]
 80045ec:	4922      	ldr	r1, [pc, #136]	; (8004678 <HAL_RCC_ClockConfig+0x358>)
 80045ee:	4313      	orrs	r3, r2
 80045f0:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f003 0320 	and.w	r3, r3, #32
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d010      	beq.n	8004620 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	69da      	ldr	r2, [r3, #28]
 8004602:	4b1d      	ldr	r3, [pc, #116]	; (8004678 <HAL_RCC_ClockConfig+0x358>)
 8004604:	6a1b      	ldr	r3, [r3, #32]
 8004606:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800460a:	429a      	cmp	r2, r3
 800460c:	d208      	bcs.n	8004620 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800460e:	4b1a      	ldr	r3, [pc, #104]	; (8004678 <HAL_RCC_ClockConfig+0x358>)
 8004610:	6a1b      	ldr	r3, [r3, #32]
 8004612:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	69db      	ldr	r3, [r3, #28]
 800461a:	4917      	ldr	r1, [pc, #92]	; (8004678 <HAL_RCC_ClockConfig+0x358>)
 800461c:	4313      	orrs	r3, r2
 800461e:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004620:	f000 f834 	bl	800468c <HAL_RCC_GetSysClockFreq>
 8004624:	4602      	mov	r2, r0
 8004626:	4b14      	ldr	r3, [pc, #80]	; (8004678 <HAL_RCC_ClockConfig+0x358>)
 8004628:	699b      	ldr	r3, [r3, #24]
 800462a:	0a1b      	lsrs	r3, r3, #8
 800462c:	f003 030f 	and.w	r3, r3, #15
 8004630:	4912      	ldr	r1, [pc, #72]	; (800467c <HAL_RCC_ClockConfig+0x35c>)
 8004632:	5ccb      	ldrb	r3, [r1, r3]
 8004634:	f003 031f 	and.w	r3, r3, #31
 8004638:	fa22 f303 	lsr.w	r3, r2, r3
 800463c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800463e:	4b0e      	ldr	r3, [pc, #56]	; (8004678 <HAL_RCC_ClockConfig+0x358>)
 8004640:	699b      	ldr	r3, [r3, #24]
 8004642:	f003 030f 	and.w	r3, r3, #15
 8004646:	4a0d      	ldr	r2, [pc, #52]	; (800467c <HAL_RCC_ClockConfig+0x35c>)
 8004648:	5cd3      	ldrb	r3, [r2, r3]
 800464a:	f003 031f 	and.w	r3, r3, #31
 800464e:	693a      	ldr	r2, [r7, #16]
 8004650:	fa22 f303 	lsr.w	r3, r2, r3
 8004654:	4a0a      	ldr	r2, [pc, #40]	; (8004680 <HAL_RCC_ClockConfig+0x360>)
 8004656:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004658:	4a0a      	ldr	r2, [pc, #40]	; (8004684 <HAL_RCC_ClockConfig+0x364>)
 800465a:	693b      	ldr	r3, [r7, #16]
 800465c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800465e:	4b0a      	ldr	r3, [pc, #40]	; (8004688 <HAL_RCC_ClockConfig+0x368>)
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	4618      	mov	r0, r3
 8004664:	f7fc fa7e 	bl	8000b64 <HAL_InitTick>
 8004668:	4603      	mov	r3, r0
 800466a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800466c:	7bfb      	ldrb	r3, [r7, #15]
}
 800466e:	4618      	mov	r0, r3
 8004670:	3718      	adds	r7, #24
 8004672:	46bd      	mov	sp, r7
 8004674:	bd80      	pop	{r7, pc}
 8004676:	bf00      	nop
 8004678:	58024400 	.word	0x58024400
 800467c:	0800a9f8 	.word	0x0800a9f8
 8004680:	20000004 	.word	0x20000004
 8004684:	20000000 	.word	0x20000000
 8004688:	20000008 	.word	0x20000008

0800468c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800468c:	b480      	push	{r7}
 800468e:	b089      	sub	sp, #36	; 0x24
 8004690:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004692:	4bb3      	ldr	r3, [pc, #716]	; (8004960 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004694:	691b      	ldr	r3, [r3, #16]
 8004696:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800469a:	2b18      	cmp	r3, #24
 800469c:	f200 8155 	bhi.w	800494a <HAL_RCC_GetSysClockFreq+0x2be>
 80046a0:	a201      	add	r2, pc, #4	; (adr r2, 80046a8 <HAL_RCC_GetSysClockFreq+0x1c>)
 80046a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046a6:	bf00      	nop
 80046a8:	0800470d 	.word	0x0800470d
 80046ac:	0800494b 	.word	0x0800494b
 80046b0:	0800494b 	.word	0x0800494b
 80046b4:	0800494b 	.word	0x0800494b
 80046b8:	0800494b 	.word	0x0800494b
 80046bc:	0800494b 	.word	0x0800494b
 80046c0:	0800494b 	.word	0x0800494b
 80046c4:	0800494b 	.word	0x0800494b
 80046c8:	08004733 	.word	0x08004733
 80046cc:	0800494b 	.word	0x0800494b
 80046d0:	0800494b 	.word	0x0800494b
 80046d4:	0800494b 	.word	0x0800494b
 80046d8:	0800494b 	.word	0x0800494b
 80046dc:	0800494b 	.word	0x0800494b
 80046e0:	0800494b 	.word	0x0800494b
 80046e4:	0800494b 	.word	0x0800494b
 80046e8:	08004739 	.word	0x08004739
 80046ec:	0800494b 	.word	0x0800494b
 80046f0:	0800494b 	.word	0x0800494b
 80046f4:	0800494b 	.word	0x0800494b
 80046f8:	0800494b 	.word	0x0800494b
 80046fc:	0800494b 	.word	0x0800494b
 8004700:	0800494b 	.word	0x0800494b
 8004704:	0800494b 	.word	0x0800494b
 8004708:	0800473f 	.word	0x0800473f
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800470c:	4b94      	ldr	r3, [pc, #592]	; (8004960 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f003 0320 	and.w	r3, r3, #32
 8004714:	2b00      	cmp	r3, #0
 8004716:	d009      	beq.n	800472c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004718:	4b91      	ldr	r3, [pc, #580]	; (8004960 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	08db      	lsrs	r3, r3, #3
 800471e:	f003 0303 	and.w	r3, r3, #3
 8004722:	4a90      	ldr	r2, [pc, #576]	; (8004964 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004724:	fa22 f303 	lsr.w	r3, r2, r3
 8004728:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800472a:	e111      	b.n	8004950 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800472c:	4b8d      	ldr	r3, [pc, #564]	; (8004964 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800472e:	61bb      	str	r3, [r7, #24]
    break;
 8004730:	e10e      	b.n	8004950 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8004732:	4b8d      	ldr	r3, [pc, #564]	; (8004968 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004734:	61bb      	str	r3, [r7, #24]
    break;
 8004736:	e10b      	b.n	8004950 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8004738:	4b8c      	ldr	r3, [pc, #560]	; (800496c <HAL_RCC_GetSysClockFreq+0x2e0>)
 800473a:	61bb      	str	r3, [r7, #24]
    break;
 800473c:	e108      	b.n	8004950 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800473e:	4b88      	ldr	r3, [pc, #544]	; (8004960 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004740:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004742:	f003 0303 	and.w	r3, r3, #3
 8004746:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8004748:	4b85      	ldr	r3, [pc, #532]	; (8004960 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800474a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800474c:	091b      	lsrs	r3, r3, #4
 800474e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004752:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004754:	4b82      	ldr	r3, [pc, #520]	; (8004960 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004756:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004758:	f003 0301 	and.w	r3, r3, #1
 800475c:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800475e:	4b80      	ldr	r3, [pc, #512]	; (8004960 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004760:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004762:	08db      	lsrs	r3, r3, #3
 8004764:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004768:	68fa      	ldr	r2, [r7, #12]
 800476a:	fb02 f303 	mul.w	r3, r2, r3
 800476e:	ee07 3a90 	vmov	s15, r3
 8004772:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004776:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800477a:	693b      	ldr	r3, [r7, #16]
 800477c:	2b00      	cmp	r3, #0
 800477e:	f000 80e1 	beq.w	8004944 <HAL_RCC_GetSysClockFreq+0x2b8>
 8004782:	697b      	ldr	r3, [r7, #20]
 8004784:	2b02      	cmp	r3, #2
 8004786:	f000 8083 	beq.w	8004890 <HAL_RCC_GetSysClockFreq+0x204>
 800478a:	697b      	ldr	r3, [r7, #20]
 800478c:	2b02      	cmp	r3, #2
 800478e:	f200 80a1 	bhi.w	80048d4 <HAL_RCC_GetSysClockFreq+0x248>
 8004792:	697b      	ldr	r3, [r7, #20]
 8004794:	2b00      	cmp	r3, #0
 8004796:	d003      	beq.n	80047a0 <HAL_RCC_GetSysClockFreq+0x114>
 8004798:	697b      	ldr	r3, [r7, #20]
 800479a:	2b01      	cmp	r3, #1
 800479c:	d056      	beq.n	800484c <HAL_RCC_GetSysClockFreq+0x1c0>
 800479e:	e099      	b.n	80048d4 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80047a0:	4b6f      	ldr	r3, [pc, #444]	; (8004960 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f003 0320 	and.w	r3, r3, #32
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d02d      	beq.n	8004808 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80047ac:	4b6c      	ldr	r3, [pc, #432]	; (8004960 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	08db      	lsrs	r3, r3, #3
 80047b2:	f003 0303 	and.w	r3, r3, #3
 80047b6:	4a6b      	ldr	r2, [pc, #428]	; (8004964 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80047b8:	fa22 f303 	lsr.w	r3, r2, r3
 80047bc:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	ee07 3a90 	vmov	s15, r3
 80047c4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80047c8:	693b      	ldr	r3, [r7, #16]
 80047ca:	ee07 3a90 	vmov	s15, r3
 80047ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80047d6:	4b62      	ldr	r3, [pc, #392]	; (8004960 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80047d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047de:	ee07 3a90 	vmov	s15, r3
 80047e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80047e6:	ed97 6a02 	vldr	s12, [r7, #8]
 80047ea:	eddf 5a61 	vldr	s11, [pc, #388]	; 8004970 <HAL_RCC_GetSysClockFreq+0x2e4>
 80047ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80047f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80047f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80047fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80047fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004802:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8004806:	e087      	b.n	8004918 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004808:	693b      	ldr	r3, [r7, #16]
 800480a:	ee07 3a90 	vmov	s15, r3
 800480e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004812:	eddf 6a58 	vldr	s13, [pc, #352]	; 8004974 <HAL_RCC_GetSysClockFreq+0x2e8>
 8004816:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800481a:	4b51      	ldr	r3, [pc, #324]	; (8004960 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800481c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800481e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004822:	ee07 3a90 	vmov	s15, r3
 8004826:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800482a:	ed97 6a02 	vldr	s12, [r7, #8]
 800482e:	eddf 5a50 	vldr	s11, [pc, #320]	; 8004970 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004832:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004836:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800483a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800483e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004842:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004846:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800484a:	e065      	b.n	8004918 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800484c:	693b      	ldr	r3, [r7, #16]
 800484e:	ee07 3a90 	vmov	s15, r3
 8004852:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004856:	eddf 6a48 	vldr	s13, [pc, #288]	; 8004978 <HAL_RCC_GetSysClockFreq+0x2ec>
 800485a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800485e:	4b40      	ldr	r3, [pc, #256]	; (8004960 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004862:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004866:	ee07 3a90 	vmov	s15, r3
 800486a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800486e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004872:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8004970 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004876:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800487a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800487e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004882:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004886:	ee67 7a27 	vmul.f32	s15, s14, s15
 800488a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800488e:	e043      	b.n	8004918 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004890:	693b      	ldr	r3, [r7, #16]
 8004892:	ee07 3a90 	vmov	s15, r3
 8004896:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800489a:	eddf 6a38 	vldr	s13, [pc, #224]	; 800497c <HAL_RCC_GetSysClockFreq+0x2f0>
 800489e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80048a2:	4b2f      	ldr	r3, [pc, #188]	; (8004960 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80048a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048aa:	ee07 3a90 	vmov	s15, r3
 80048ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80048b2:	ed97 6a02 	vldr	s12, [r7, #8]
 80048b6:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8004970 <HAL_RCC_GetSysClockFreq+0x2e4>
 80048ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80048be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80048c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80048c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80048ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048ce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80048d2:	e021      	b.n	8004918 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80048d4:	693b      	ldr	r3, [r7, #16]
 80048d6:	ee07 3a90 	vmov	s15, r3
 80048da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048de:	eddf 6a26 	vldr	s13, [pc, #152]	; 8004978 <HAL_RCC_GetSysClockFreq+0x2ec>
 80048e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80048e6:	4b1e      	ldr	r3, [pc, #120]	; (8004960 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80048e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048ee:	ee07 3a90 	vmov	s15, r3
 80048f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80048f6:	ed97 6a02 	vldr	s12, [r7, #8]
 80048fa:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8004970 <HAL_RCC_GetSysClockFreq+0x2e4>
 80048fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004902:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004906:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800490a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800490e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004912:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004916:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8004918:	4b11      	ldr	r3, [pc, #68]	; (8004960 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800491a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800491c:	0a5b      	lsrs	r3, r3, #9
 800491e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004922:	3301      	adds	r3, #1
 8004924:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	ee07 3a90 	vmov	s15, r3
 800492c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004930:	edd7 6a07 	vldr	s13, [r7, #28]
 8004934:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004938:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800493c:	ee17 3a90 	vmov	r3, s15
 8004940:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8004942:	e005      	b.n	8004950 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8004944:	2300      	movs	r3, #0
 8004946:	61bb      	str	r3, [r7, #24]
    break;
 8004948:	e002      	b.n	8004950 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800494a:	4b07      	ldr	r3, [pc, #28]	; (8004968 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800494c:	61bb      	str	r3, [r7, #24]
    break;
 800494e:	bf00      	nop
  }

  return sysclockfreq;
 8004950:	69bb      	ldr	r3, [r7, #24]
}
 8004952:	4618      	mov	r0, r3
 8004954:	3724      	adds	r7, #36	; 0x24
 8004956:	46bd      	mov	sp, r7
 8004958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495c:	4770      	bx	lr
 800495e:	bf00      	nop
 8004960:	58024400 	.word	0x58024400
 8004964:	03d09000 	.word	0x03d09000
 8004968:	003d0900 	.word	0x003d0900
 800496c:	00f42400 	.word	0x00f42400
 8004970:	46000000 	.word	0x46000000
 8004974:	4c742400 	.word	0x4c742400
 8004978:	4a742400 	.word	0x4a742400
 800497c:	4b742400 	.word	0x4b742400

08004980 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004980:	b580      	push	{r7, lr}
 8004982:	b082      	sub	sp, #8
 8004984:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004986:	f7ff fe81 	bl	800468c <HAL_RCC_GetSysClockFreq>
 800498a:	4602      	mov	r2, r0
 800498c:	4b10      	ldr	r3, [pc, #64]	; (80049d0 <HAL_RCC_GetHCLKFreq+0x50>)
 800498e:	699b      	ldr	r3, [r3, #24]
 8004990:	0a1b      	lsrs	r3, r3, #8
 8004992:	f003 030f 	and.w	r3, r3, #15
 8004996:	490f      	ldr	r1, [pc, #60]	; (80049d4 <HAL_RCC_GetHCLKFreq+0x54>)
 8004998:	5ccb      	ldrb	r3, [r1, r3]
 800499a:	f003 031f 	and.w	r3, r3, #31
 800499e:	fa22 f303 	lsr.w	r3, r2, r3
 80049a2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80049a4:	4b0a      	ldr	r3, [pc, #40]	; (80049d0 <HAL_RCC_GetHCLKFreq+0x50>)
 80049a6:	699b      	ldr	r3, [r3, #24]
 80049a8:	f003 030f 	and.w	r3, r3, #15
 80049ac:	4a09      	ldr	r2, [pc, #36]	; (80049d4 <HAL_RCC_GetHCLKFreq+0x54>)
 80049ae:	5cd3      	ldrb	r3, [r2, r3]
 80049b0:	f003 031f 	and.w	r3, r3, #31
 80049b4:	687a      	ldr	r2, [r7, #4]
 80049b6:	fa22 f303 	lsr.w	r3, r2, r3
 80049ba:	4a07      	ldr	r2, [pc, #28]	; (80049d8 <HAL_RCC_GetHCLKFreq+0x58>)
 80049bc:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80049be:	4a07      	ldr	r2, [pc, #28]	; (80049dc <HAL_RCC_GetHCLKFreq+0x5c>)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80049c4:	4b04      	ldr	r3, [pc, #16]	; (80049d8 <HAL_RCC_GetHCLKFreq+0x58>)
 80049c6:	681b      	ldr	r3, [r3, #0]
}
 80049c8:	4618      	mov	r0, r3
 80049ca:	3708      	adds	r7, #8
 80049cc:	46bd      	mov	sp, r7
 80049ce:	bd80      	pop	{r7, pc}
 80049d0:	58024400 	.word	0x58024400
 80049d4:	0800a9f8 	.word	0x0800a9f8
 80049d8:	20000004 	.word	0x20000004
 80049dc:	20000000 	.word	0x20000000

080049e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80049e4:	f7ff ffcc 	bl	8004980 <HAL_RCC_GetHCLKFreq>
 80049e8:	4602      	mov	r2, r0
 80049ea:	4b06      	ldr	r3, [pc, #24]	; (8004a04 <HAL_RCC_GetPCLK1Freq+0x24>)
 80049ec:	69db      	ldr	r3, [r3, #28]
 80049ee:	091b      	lsrs	r3, r3, #4
 80049f0:	f003 0307 	and.w	r3, r3, #7
 80049f4:	4904      	ldr	r1, [pc, #16]	; (8004a08 <HAL_RCC_GetPCLK1Freq+0x28>)
 80049f6:	5ccb      	ldrb	r3, [r1, r3]
 80049f8:	f003 031f 	and.w	r3, r3, #31
 80049fc:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8004a00:	4618      	mov	r0, r3
 8004a02:	bd80      	pop	{r7, pc}
 8004a04:	58024400 	.word	0x58024400
 8004a08:	0800a9f8 	.word	0x0800a9f8

08004a0c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004a0c:	b580      	push	{r7, lr}
 8004a0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8004a10:	f7ff ffb6 	bl	8004980 <HAL_RCC_GetHCLKFreq>
 8004a14:	4602      	mov	r2, r0
 8004a16:	4b06      	ldr	r3, [pc, #24]	; (8004a30 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004a18:	69db      	ldr	r3, [r3, #28]
 8004a1a:	0a1b      	lsrs	r3, r3, #8
 8004a1c:	f003 0307 	and.w	r3, r3, #7
 8004a20:	4904      	ldr	r1, [pc, #16]	; (8004a34 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004a22:	5ccb      	ldrb	r3, [r1, r3]
 8004a24:	f003 031f 	and.w	r3, r3, #31
 8004a28:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8004a2c:	4618      	mov	r0, r3
 8004a2e:	bd80      	pop	{r7, pc}
 8004a30:	58024400 	.word	0x58024400
 8004a34:	0800a9f8 	.word	0x0800a9f8

08004a38 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004a38:	b480      	push	{r7}
 8004a3a:	b083      	sub	sp, #12
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
 8004a40:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	223f      	movs	r2, #63	; 0x3f
 8004a46:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004a48:	4b1a      	ldr	r3, [pc, #104]	; (8004ab4 <HAL_RCC_GetClockConfig+0x7c>)
 8004a4a:	691b      	ldr	r3, [r3, #16]
 8004a4c:	f003 0207 	and.w	r2, r3, #7
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8004a54:	4b17      	ldr	r3, [pc, #92]	; (8004ab4 <HAL_RCC_GetClockConfig+0x7c>)
 8004a56:	699b      	ldr	r3, [r3, #24]
 8004a58:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8004a60:	4b14      	ldr	r3, [pc, #80]	; (8004ab4 <HAL_RCC_GetClockConfig+0x7c>)
 8004a62:	699b      	ldr	r3, [r3, #24]
 8004a64:	f003 020f 	and.w	r2, r3, #15
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8004a6c:	4b11      	ldr	r3, [pc, #68]	; (8004ab4 <HAL_RCC_GetClockConfig+0x7c>)
 8004a6e:	699b      	ldr	r3, [r3, #24]
 8004a70:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8004a78:	4b0e      	ldr	r3, [pc, #56]	; (8004ab4 <HAL_RCC_GetClockConfig+0x7c>)
 8004a7a:	69db      	ldr	r3, [r3, #28]
 8004a7c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8004a84:	4b0b      	ldr	r3, [pc, #44]	; (8004ab4 <HAL_RCC_GetClockConfig+0x7c>)
 8004a86:	69db      	ldr	r3, [r3, #28]
 8004a88:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8004a90:	4b08      	ldr	r3, [pc, #32]	; (8004ab4 <HAL_RCC_GetClockConfig+0x7c>)
 8004a92:	6a1b      	ldr	r3, [r3, #32]
 8004a94:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004a9c:	4b06      	ldr	r3, [pc, #24]	; (8004ab8 <HAL_RCC_GetClockConfig+0x80>)
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f003 020f 	and.w	r2, r3, #15
 8004aa4:	683b      	ldr	r3, [r7, #0]
 8004aa6:	601a      	str	r2, [r3, #0]
}
 8004aa8:	bf00      	nop
 8004aaa:	370c      	adds	r7, #12
 8004aac:	46bd      	mov	sp, r7
 8004aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab2:	4770      	bx	lr
 8004ab4:	58024400 	.word	0x58024400
 8004ab8:	52002000 	.word	0x52002000

08004abc <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004abc:	b580      	push	{r7, lr}
 8004abe:	b086      	sub	sp, #24
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004ac4:	2300      	movs	r3, #0
 8004ac6:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004ac8:	2300      	movs	r3, #0
 8004aca:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d03f      	beq.n	8004b58 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004adc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004ae0:	d02a      	beq.n	8004b38 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004ae2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004ae6:	d824      	bhi.n	8004b32 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004ae8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004aec:	d018      	beq.n	8004b20 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004aee:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004af2:	d81e      	bhi.n	8004b32 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d003      	beq.n	8004b00 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004af8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004afc:	d007      	beq.n	8004b0e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004afe:	e018      	b.n	8004b32 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004b00:	4bab      	ldr	r3, [pc, #684]	; (8004db0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004b02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b04:	4aaa      	ldr	r2, [pc, #680]	; (8004db0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004b06:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004b0a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004b0c:	e015      	b.n	8004b3a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	3304      	adds	r3, #4
 8004b12:	2102      	movs	r1, #2
 8004b14:	4618      	mov	r0, r3
 8004b16:	f001 f9cf 	bl	8005eb8 <RCCEx_PLL2_Config>
 8004b1a:	4603      	mov	r3, r0
 8004b1c:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004b1e:	e00c      	b.n	8004b3a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	3324      	adds	r3, #36	; 0x24
 8004b24:	2102      	movs	r1, #2
 8004b26:	4618      	mov	r0, r3
 8004b28:	f001 fa78 	bl	800601c <RCCEx_PLL3_Config>
 8004b2c:	4603      	mov	r3, r0
 8004b2e:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004b30:	e003      	b.n	8004b3a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004b32:	2301      	movs	r3, #1
 8004b34:	75fb      	strb	r3, [r7, #23]
      break;
 8004b36:	e000      	b.n	8004b3a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004b38:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004b3a:	7dfb      	ldrb	r3, [r7, #23]
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d109      	bne.n	8004b54 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8004b40:	4b9b      	ldr	r3, [pc, #620]	; (8004db0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004b42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b44:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004b4c:	4998      	ldr	r1, [pc, #608]	; (8004db0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004b4e:	4313      	orrs	r3, r2
 8004b50:	650b      	str	r3, [r1, #80]	; 0x50
 8004b52:	e001      	b.n	8004b58 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b54:	7dfb      	ldrb	r3, [r7, #23]
 8004b56:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d03d      	beq.n	8004be0 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b68:	2b04      	cmp	r3, #4
 8004b6a:	d826      	bhi.n	8004bba <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8004b6c:	a201      	add	r2, pc, #4	; (adr r2, 8004b74 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8004b6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b72:	bf00      	nop
 8004b74:	08004b89 	.word	0x08004b89
 8004b78:	08004b97 	.word	0x08004b97
 8004b7c:	08004ba9 	.word	0x08004ba9
 8004b80:	08004bc1 	.word	0x08004bc1
 8004b84:	08004bc1 	.word	0x08004bc1
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004b88:	4b89      	ldr	r3, [pc, #548]	; (8004db0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004b8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b8c:	4a88      	ldr	r2, [pc, #544]	; (8004db0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004b8e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004b92:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004b94:	e015      	b.n	8004bc2 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	3304      	adds	r3, #4
 8004b9a:	2100      	movs	r1, #0
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	f001 f98b 	bl	8005eb8 <RCCEx_PLL2_Config>
 8004ba2:	4603      	mov	r3, r0
 8004ba4:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004ba6:	e00c      	b.n	8004bc2 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	3324      	adds	r3, #36	; 0x24
 8004bac:	2100      	movs	r1, #0
 8004bae:	4618      	mov	r0, r3
 8004bb0:	f001 fa34 	bl	800601c <RCCEx_PLL3_Config>
 8004bb4:	4603      	mov	r3, r0
 8004bb6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004bb8:	e003      	b.n	8004bc2 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004bba:	2301      	movs	r3, #1
 8004bbc:	75fb      	strb	r3, [r7, #23]
      break;
 8004bbe:	e000      	b.n	8004bc2 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8004bc0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004bc2:	7dfb      	ldrb	r3, [r7, #23]
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d109      	bne.n	8004bdc <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004bc8:	4b79      	ldr	r3, [pc, #484]	; (8004db0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004bca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004bcc:	f023 0207 	bic.w	r2, r3, #7
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bd4:	4976      	ldr	r1, [pc, #472]	; (8004db0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004bd6:	4313      	orrs	r3, r2
 8004bd8:	650b      	str	r3, [r1, #80]	; 0x50
 8004bda:	e001      	b.n	8004be0 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004bdc:	7dfb      	ldrb	r3, [r7, #23]
 8004bde:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d042      	beq.n	8004c72 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bf0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004bf4:	d02b      	beq.n	8004c4e <HAL_RCCEx_PeriphCLKConfig+0x192>
 8004bf6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004bfa:	d825      	bhi.n	8004c48 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8004bfc:	2bc0      	cmp	r3, #192	; 0xc0
 8004bfe:	d028      	beq.n	8004c52 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004c00:	2bc0      	cmp	r3, #192	; 0xc0
 8004c02:	d821      	bhi.n	8004c48 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8004c04:	2b80      	cmp	r3, #128	; 0x80
 8004c06:	d016      	beq.n	8004c36 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8004c08:	2b80      	cmp	r3, #128	; 0x80
 8004c0a:	d81d      	bhi.n	8004c48 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d002      	beq.n	8004c16 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8004c10:	2b40      	cmp	r3, #64	; 0x40
 8004c12:	d007      	beq.n	8004c24 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8004c14:	e018      	b.n	8004c48 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004c16:	4b66      	ldr	r3, [pc, #408]	; (8004db0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004c18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c1a:	4a65      	ldr	r2, [pc, #404]	; (8004db0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004c1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004c20:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8004c22:	e017      	b.n	8004c54 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	3304      	adds	r3, #4
 8004c28:	2100      	movs	r1, #0
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	f001 f944 	bl	8005eb8 <RCCEx_PLL2_Config>
 8004c30:	4603      	mov	r3, r0
 8004c32:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8004c34:	e00e      	b.n	8004c54 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	3324      	adds	r3, #36	; 0x24
 8004c3a:	2100      	movs	r1, #0
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	f001 f9ed 	bl	800601c <RCCEx_PLL3_Config>
 8004c42:	4603      	mov	r3, r0
 8004c44:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8004c46:	e005      	b.n	8004c54 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004c48:	2301      	movs	r3, #1
 8004c4a:	75fb      	strb	r3, [r7, #23]
      break;
 8004c4c:	e002      	b.n	8004c54 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8004c4e:	bf00      	nop
 8004c50:	e000      	b.n	8004c54 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8004c52:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004c54:	7dfb      	ldrb	r3, [r7, #23]
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d109      	bne.n	8004c6e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8004c5a:	4b55      	ldr	r3, [pc, #340]	; (8004db0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004c5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c5e:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c66:	4952      	ldr	r1, [pc, #328]	; (8004db0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004c68:	4313      	orrs	r3, r2
 8004c6a:	650b      	str	r3, [r1, #80]	; 0x50
 8004c6c:	e001      	b.n	8004c72 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c6e:	7dfb      	ldrb	r3, [r7, #23]
 8004c70:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d049      	beq.n	8004d12 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004c84:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004c88:	d030      	beq.n	8004cec <HAL_RCCEx_PeriphCLKConfig+0x230>
 8004c8a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004c8e:	d82a      	bhi.n	8004ce6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8004c90:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004c94:	d02c      	beq.n	8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8004c96:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004c9a:	d824      	bhi.n	8004ce6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8004c9c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004ca0:	d018      	beq.n	8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8004ca2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004ca6:	d81e      	bhi.n	8004ce6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d003      	beq.n	8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8004cac:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004cb0:	d007      	beq.n	8004cc2 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8004cb2:	e018      	b.n	8004ce6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004cb4:	4b3e      	ldr	r3, [pc, #248]	; (8004db0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004cb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cb8:	4a3d      	ldr	r2, [pc, #244]	; (8004db0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004cba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004cbe:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004cc0:	e017      	b.n	8004cf2 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	3304      	adds	r3, #4
 8004cc6:	2100      	movs	r1, #0
 8004cc8:	4618      	mov	r0, r3
 8004cca:	f001 f8f5 	bl	8005eb8 <RCCEx_PLL2_Config>
 8004cce:	4603      	mov	r3, r0
 8004cd0:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8004cd2:	e00e      	b.n	8004cf2 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	3324      	adds	r3, #36	; 0x24
 8004cd8:	2100      	movs	r1, #0
 8004cda:	4618      	mov	r0, r3
 8004cdc:	f001 f99e 	bl	800601c <RCCEx_PLL3_Config>
 8004ce0:	4603      	mov	r3, r0
 8004ce2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004ce4:	e005      	b.n	8004cf2 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8004ce6:	2301      	movs	r3, #1
 8004ce8:	75fb      	strb	r3, [r7, #23]
      break;
 8004cea:	e002      	b.n	8004cf2 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8004cec:	bf00      	nop
 8004cee:	e000      	b.n	8004cf2 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8004cf0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004cf2:	7dfb      	ldrb	r3, [r7, #23]
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d10a      	bne.n	8004d0e <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8004cf8:	4b2d      	ldr	r3, [pc, #180]	; (8004db0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004cfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cfc:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004d06:	492a      	ldr	r1, [pc, #168]	; (8004db0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004d08:	4313      	orrs	r3, r2
 8004d0a:	658b      	str	r3, [r1, #88]	; 0x58
 8004d0c:	e001      	b.n	8004d12 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d0e:	7dfb      	ldrb	r3, [r7, #23]
 8004d10:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d04c      	beq.n	8004db8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004d24:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004d28:	d030      	beq.n	8004d8c <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8004d2a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004d2e:	d82a      	bhi.n	8004d86 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8004d30:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004d34:	d02c      	beq.n	8004d90 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 8004d36:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004d3a:	d824      	bhi.n	8004d86 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8004d3c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004d40:	d018      	beq.n	8004d74 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8004d42:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004d46:	d81e      	bhi.n	8004d86 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d003      	beq.n	8004d54 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8004d4c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004d50:	d007      	beq.n	8004d62 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8004d52:	e018      	b.n	8004d86 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004d54:	4b16      	ldr	r3, [pc, #88]	; (8004db0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004d56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d58:	4a15      	ldr	r2, [pc, #84]	; (8004db0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004d5a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004d5e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004d60:	e017      	b.n	8004d92 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	3304      	adds	r3, #4
 8004d66:	2100      	movs	r1, #0
 8004d68:	4618      	mov	r0, r3
 8004d6a:	f001 f8a5 	bl	8005eb8 <RCCEx_PLL2_Config>
 8004d6e:	4603      	mov	r3, r0
 8004d70:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8004d72:	e00e      	b.n	8004d92 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	3324      	adds	r3, #36	; 0x24
 8004d78:	2100      	movs	r1, #0
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	f001 f94e 	bl	800601c <RCCEx_PLL3_Config>
 8004d80:	4603      	mov	r3, r0
 8004d82:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004d84:	e005      	b.n	8004d92 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8004d86:	2301      	movs	r3, #1
 8004d88:	75fb      	strb	r3, [r7, #23]
      break;
 8004d8a:	e002      	b.n	8004d92 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8004d8c:	bf00      	nop
 8004d8e:	e000      	b.n	8004d92 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8004d90:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004d92:	7dfb      	ldrb	r3, [r7, #23]
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d10d      	bne.n	8004db4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8004d98:	4b05      	ldr	r3, [pc, #20]	; (8004db0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004d9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d9c:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004da6:	4902      	ldr	r1, [pc, #8]	; (8004db0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004da8:	4313      	orrs	r3, r2
 8004daa:	658b      	str	r3, [r1, #88]	; 0x58
 8004dac:	e004      	b.n	8004db8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8004dae:	bf00      	nop
 8004db0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004db4:	7dfb      	ldrb	r3, [r7, #23]
 8004db6:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d032      	beq.n	8004e2a <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004dc8:	2b30      	cmp	r3, #48	; 0x30
 8004dca:	d01c      	beq.n	8004e06 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8004dcc:	2b30      	cmp	r3, #48	; 0x30
 8004dce:	d817      	bhi.n	8004e00 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8004dd0:	2b20      	cmp	r3, #32
 8004dd2:	d00c      	beq.n	8004dee <HAL_RCCEx_PeriphCLKConfig+0x332>
 8004dd4:	2b20      	cmp	r3, #32
 8004dd6:	d813      	bhi.n	8004e00 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d016      	beq.n	8004e0a <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8004ddc:	2b10      	cmp	r3, #16
 8004dde:	d10f      	bne.n	8004e00 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004de0:	4baf      	ldr	r3, [pc, #700]	; (80050a0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004de2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004de4:	4aae      	ldr	r2, [pc, #696]	; (80050a0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004de6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004dea:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8004dec:	e00e      	b.n	8004e0c <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	3304      	adds	r3, #4
 8004df2:	2102      	movs	r1, #2
 8004df4:	4618      	mov	r0, r3
 8004df6:	f001 f85f 	bl	8005eb8 <RCCEx_PLL2_Config>
 8004dfa:	4603      	mov	r3, r0
 8004dfc:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8004dfe:	e005      	b.n	8004e0c <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8004e00:	2301      	movs	r3, #1
 8004e02:	75fb      	strb	r3, [r7, #23]
      break;
 8004e04:	e002      	b.n	8004e0c <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8004e06:	bf00      	nop
 8004e08:	e000      	b.n	8004e0c <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8004e0a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004e0c:	7dfb      	ldrb	r3, [r7, #23]
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d109      	bne.n	8004e26 <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004e12:	4ba3      	ldr	r3, [pc, #652]	; (80050a0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004e14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e16:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e1e:	49a0      	ldr	r1, [pc, #640]	; (80050a0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004e20:	4313      	orrs	r3, r2
 8004e22:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004e24:	e001      	b.n	8004e2a <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e26:	7dfb      	ldrb	r3, [r7, #23]
 8004e28:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d047      	beq.n	8004ec6 <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e3a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004e3e:	d030      	beq.n	8004ea2 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8004e40:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004e44:	d82a      	bhi.n	8004e9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8004e46:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004e4a:	d02c      	beq.n	8004ea6 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8004e4c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004e50:	d824      	bhi.n	8004e9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8004e52:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e56:	d018      	beq.n	8004e8a <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 8004e58:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e5c:	d81e      	bhi.n	8004e9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d003      	beq.n	8004e6a <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8004e62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e66:	d007      	beq.n	8004e78 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8004e68:	e018      	b.n	8004e9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004e6a:	4b8d      	ldr	r3, [pc, #564]	; (80050a0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004e6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e6e:	4a8c      	ldr	r2, [pc, #560]	; (80050a0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004e70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004e74:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004e76:	e017      	b.n	8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	3304      	adds	r3, #4
 8004e7c:	2100      	movs	r1, #0
 8004e7e:	4618      	mov	r0, r3
 8004e80:	f001 f81a 	bl	8005eb8 <RCCEx_PLL2_Config>
 8004e84:	4603      	mov	r3, r0
 8004e86:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004e88:	e00e      	b.n	8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	3324      	adds	r3, #36	; 0x24
 8004e8e:	2100      	movs	r1, #0
 8004e90:	4618      	mov	r0, r3
 8004e92:	f001 f8c3 	bl	800601c <RCCEx_PLL3_Config>
 8004e96:	4603      	mov	r3, r0
 8004e98:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004e9a:	e005      	b.n	8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004e9c:	2301      	movs	r3, #1
 8004e9e:	75fb      	strb	r3, [r7, #23]
      break;
 8004ea0:	e002      	b.n	8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8004ea2:	bf00      	nop
 8004ea4:	e000      	b.n	8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8004ea6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004ea8:	7dfb      	ldrb	r3, [r7, #23]
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d109      	bne.n	8004ec2 <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004eae:	4b7c      	ldr	r3, [pc, #496]	; (80050a0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004eb0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004eb2:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004eba:	4979      	ldr	r1, [pc, #484]	; (80050a0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004ebc:	4313      	orrs	r3, r2
 8004ebe:	650b      	str	r3, [r1, #80]	; 0x50
 8004ec0:	e001      	b.n	8004ec6 <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ec2:	7dfb      	ldrb	r3, [r7, #23]
 8004ec4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d049      	beq.n	8004f66 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ed6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004eda:	d02e      	beq.n	8004f3a <HAL_RCCEx_PeriphCLKConfig+0x47e>
 8004edc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004ee0:	d828      	bhi.n	8004f34 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8004ee2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004ee6:	d02a      	beq.n	8004f3e <HAL_RCCEx_PeriphCLKConfig+0x482>
 8004ee8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004eec:	d822      	bhi.n	8004f34 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8004eee:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004ef2:	d026      	beq.n	8004f42 <HAL_RCCEx_PeriphCLKConfig+0x486>
 8004ef4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004ef8:	d81c      	bhi.n	8004f34 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8004efa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004efe:	d010      	beq.n	8004f22 <HAL_RCCEx_PeriphCLKConfig+0x466>
 8004f00:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004f04:	d816      	bhi.n	8004f34 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d01d      	beq.n	8004f46 <HAL_RCCEx_PeriphCLKConfig+0x48a>
 8004f0a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f0e:	d111      	bne.n	8004f34 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	3304      	adds	r3, #4
 8004f14:	2101      	movs	r1, #1
 8004f16:	4618      	mov	r0, r3
 8004f18:	f000 ffce 	bl	8005eb8 <RCCEx_PLL2_Config>
 8004f1c:	4603      	mov	r3, r0
 8004f1e:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8004f20:	e012      	b.n	8004f48 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	3324      	adds	r3, #36	; 0x24
 8004f26:	2101      	movs	r1, #1
 8004f28:	4618      	mov	r0, r3
 8004f2a:	f001 f877 	bl	800601c <RCCEx_PLL3_Config>
 8004f2e:	4603      	mov	r3, r0
 8004f30:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8004f32:	e009      	b.n	8004f48 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004f34:	2301      	movs	r3, #1
 8004f36:	75fb      	strb	r3, [r7, #23]
      break;
 8004f38:	e006      	b.n	8004f48 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8004f3a:	bf00      	nop
 8004f3c:	e004      	b.n	8004f48 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8004f3e:	bf00      	nop
 8004f40:	e002      	b.n	8004f48 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8004f42:	bf00      	nop
 8004f44:	e000      	b.n	8004f48 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8004f46:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004f48:	7dfb      	ldrb	r3, [r7, #23]
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d109      	bne.n	8004f62 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004f4e:	4b54      	ldr	r3, [pc, #336]	; (80050a0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004f50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f52:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f5a:	4951      	ldr	r1, [pc, #324]	; (80050a0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004f5c:	4313      	orrs	r3, r2
 8004f5e:	650b      	str	r3, [r1, #80]	; 0x50
 8004f60:	e001      	b.n	8004f66 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f62:	7dfb      	ldrb	r3, [r7, #23]
 8004f64:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d04b      	beq.n	800500a <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004f78:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004f7c:	d02e      	beq.n	8004fdc <HAL_RCCEx_PeriphCLKConfig+0x520>
 8004f7e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004f82:	d828      	bhi.n	8004fd6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8004f84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f88:	d02a      	beq.n	8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8004f8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f8e:	d822      	bhi.n	8004fd6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8004f90:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004f94:	d026      	beq.n	8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x528>
 8004f96:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004f9a:	d81c      	bhi.n	8004fd6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8004f9c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004fa0:	d010      	beq.n	8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x508>
 8004fa2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004fa6:	d816      	bhi.n	8004fd6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d01d      	beq.n	8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8004fac:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004fb0:	d111      	bne.n	8004fd6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	3304      	adds	r3, #4
 8004fb6:	2101      	movs	r1, #1
 8004fb8:	4618      	mov	r0, r3
 8004fba:	f000 ff7d 	bl	8005eb8 <RCCEx_PLL2_Config>
 8004fbe:	4603      	mov	r3, r0
 8004fc0:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8004fc2:	e012      	b.n	8004fea <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	3324      	adds	r3, #36	; 0x24
 8004fc8:	2101      	movs	r1, #1
 8004fca:	4618      	mov	r0, r3
 8004fcc:	f001 f826 	bl	800601c <RCCEx_PLL3_Config>
 8004fd0:	4603      	mov	r3, r0
 8004fd2:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8004fd4:	e009      	b.n	8004fea <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8004fd6:	2301      	movs	r3, #1
 8004fd8:	75fb      	strb	r3, [r7, #23]
      break;
 8004fda:	e006      	b.n	8004fea <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8004fdc:	bf00      	nop
 8004fde:	e004      	b.n	8004fea <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8004fe0:	bf00      	nop
 8004fe2:	e002      	b.n	8004fea <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8004fe4:	bf00      	nop
 8004fe6:	e000      	b.n	8004fea <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8004fe8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004fea:	7dfb      	ldrb	r3, [r7, #23]
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d10a      	bne.n	8005006 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004ff0:	4b2b      	ldr	r3, [pc, #172]	; (80050a0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004ff2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ff4:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004ffe:	4928      	ldr	r1, [pc, #160]	; (80050a0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005000:	4313      	orrs	r3, r2
 8005002:	658b      	str	r3, [r1, #88]	; 0x58
 8005004:	e001      	b.n	800500a <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005006:	7dfb      	ldrb	r3, [r7, #23]
 8005008:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005012:	2b00      	cmp	r3, #0
 8005014:	d02f      	beq.n	8005076 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800501a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800501e:	d00e      	beq.n	800503e <HAL_RCCEx_PeriphCLKConfig+0x582>
 8005020:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005024:	d814      	bhi.n	8005050 <HAL_RCCEx_PeriphCLKConfig+0x594>
 8005026:	2b00      	cmp	r3, #0
 8005028:	d015      	beq.n	8005056 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800502a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800502e:	d10f      	bne.n	8005050 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005030:	4b1b      	ldr	r3, [pc, #108]	; (80050a0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005032:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005034:	4a1a      	ldr	r2, [pc, #104]	; (80050a0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005036:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800503a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800503c:	e00c      	b.n	8005058 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	3304      	adds	r3, #4
 8005042:	2101      	movs	r1, #1
 8005044:	4618      	mov	r0, r3
 8005046:	f000 ff37 	bl	8005eb8 <RCCEx_PLL2_Config>
 800504a:	4603      	mov	r3, r0
 800504c:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800504e:	e003      	b.n	8005058 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005050:	2301      	movs	r3, #1
 8005052:	75fb      	strb	r3, [r7, #23]
      break;
 8005054:	e000      	b.n	8005058 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 8005056:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005058:	7dfb      	ldrb	r3, [r7, #23]
 800505a:	2b00      	cmp	r3, #0
 800505c:	d109      	bne.n	8005072 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800505e:	4b10      	ldr	r3, [pc, #64]	; (80050a0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005060:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005062:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800506a:	490d      	ldr	r1, [pc, #52]	; (80050a0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800506c:	4313      	orrs	r3, r2
 800506e:	650b      	str	r3, [r1, #80]	; 0x50
 8005070:	e001      	b.n	8005076 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005072:	7dfb      	ldrb	r3, [r7, #23]
 8005074:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800507e:	2b00      	cmp	r3, #0
 8005080:	d033      	beq.n	80050ea <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005086:	2b03      	cmp	r3, #3
 8005088:	d81c      	bhi.n	80050c4 <HAL_RCCEx_PeriphCLKConfig+0x608>
 800508a:	a201      	add	r2, pc, #4	; (adr r2, 8005090 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 800508c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005090:	080050cb 	.word	0x080050cb
 8005094:	080050a5 	.word	0x080050a5
 8005098:	080050b3 	.word	0x080050b3
 800509c:	080050cb 	.word	0x080050cb
 80050a0:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80050a4:	4bb8      	ldr	r3, [pc, #736]	; (8005388 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80050a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050a8:	4ab7      	ldr	r2, [pc, #732]	; (8005388 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80050aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80050ae:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80050b0:	e00c      	b.n	80050cc <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	3304      	adds	r3, #4
 80050b6:	2102      	movs	r1, #2
 80050b8:	4618      	mov	r0, r3
 80050ba:	f000 fefd 	bl	8005eb8 <RCCEx_PLL2_Config>
 80050be:	4603      	mov	r3, r0
 80050c0:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80050c2:	e003      	b.n	80050cc <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80050c4:	2301      	movs	r3, #1
 80050c6:	75fb      	strb	r3, [r7, #23]
      break;
 80050c8:	e000      	b.n	80050cc <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 80050ca:	bf00      	nop
    }

    if(ret == HAL_OK)
 80050cc:	7dfb      	ldrb	r3, [r7, #23]
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d109      	bne.n	80050e6 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80050d2:	4bad      	ldr	r3, [pc, #692]	; (8005388 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80050d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80050d6:	f023 0203 	bic.w	r2, r3, #3
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050de:	49aa      	ldr	r1, [pc, #680]	; (8005388 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80050e0:	4313      	orrs	r3, r2
 80050e2:	64cb      	str	r3, [r1, #76]	; 0x4c
 80050e4:	e001      	b.n	80050ea <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050e6:	7dfb      	ldrb	r3, [r7, #23]
 80050e8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	f000 8086 	beq.w	8005204 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80050f8:	4ba4      	ldr	r3, [pc, #656]	; (800538c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	4aa3      	ldr	r2, [pc, #652]	; (800538c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 80050fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005102:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005104:	f7fb ff84 	bl	8001010 <HAL_GetTick>
 8005108:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800510a:	e009      	b.n	8005120 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800510c:	f7fb ff80 	bl	8001010 <HAL_GetTick>
 8005110:	4602      	mov	r2, r0
 8005112:	693b      	ldr	r3, [r7, #16]
 8005114:	1ad3      	subs	r3, r2, r3
 8005116:	2b64      	cmp	r3, #100	; 0x64
 8005118:	d902      	bls.n	8005120 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 800511a:	2303      	movs	r3, #3
 800511c:	75fb      	strb	r3, [r7, #23]
        break;
 800511e:	e005      	b.n	800512c <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005120:	4b9a      	ldr	r3, [pc, #616]	; (800538c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005128:	2b00      	cmp	r3, #0
 800512a:	d0ef      	beq.n	800510c <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 800512c:	7dfb      	ldrb	r3, [r7, #23]
 800512e:	2b00      	cmp	r3, #0
 8005130:	d166      	bne.n	8005200 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8005132:	4b95      	ldr	r3, [pc, #596]	; (8005388 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005134:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800513c:	4053      	eors	r3, r2
 800513e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005142:	2b00      	cmp	r3, #0
 8005144:	d013      	beq.n	800516e <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005146:	4b90      	ldr	r3, [pc, #576]	; (8005388 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005148:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800514a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800514e:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005150:	4b8d      	ldr	r3, [pc, #564]	; (8005388 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005152:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005154:	4a8c      	ldr	r2, [pc, #560]	; (8005388 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005156:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800515a:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800515c:	4b8a      	ldr	r3, [pc, #552]	; (8005388 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800515e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005160:	4a89      	ldr	r2, [pc, #548]	; (8005388 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005162:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005166:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8005168:	4a87      	ldr	r2, [pc, #540]	; (8005388 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005174:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005178:	d115      	bne.n	80051a6 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800517a:	f7fb ff49 	bl	8001010 <HAL_GetTick>
 800517e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005180:	e00b      	b.n	800519a <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005182:	f7fb ff45 	bl	8001010 <HAL_GetTick>
 8005186:	4602      	mov	r2, r0
 8005188:	693b      	ldr	r3, [r7, #16]
 800518a:	1ad3      	subs	r3, r2, r3
 800518c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005190:	4293      	cmp	r3, r2
 8005192:	d902      	bls.n	800519a <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8005194:	2303      	movs	r3, #3
 8005196:	75fb      	strb	r3, [r7, #23]
            break;
 8005198:	e005      	b.n	80051a6 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800519a:	4b7b      	ldr	r3, [pc, #492]	; (8005388 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800519c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800519e:	f003 0302 	and.w	r3, r3, #2
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d0ed      	beq.n	8005182 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 80051a6:	7dfb      	ldrb	r3, [r7, #23]
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d126      	bne.n	80051fa <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80051b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80051b6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80051ba:	d10d      	bne.n	80051d8 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 80051bc:	4b72      	ldr	r3, [pc, #456]	; (8005388 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80051be:	691b      	ldr	r3, [r3, #16]
 80051c0:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80051ca:	0919      	lsrs	r1, r3, #4
 80051cc:	4b70      	ldr	r3, [pc, #448]	; (8005390 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 80051ce:	400b      	ands	r3, r1
 80051d0:	496d      	ldr	r1, [pc, #436]	; (8005388 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80051d2:	4313      	orrs	r3, r2
 80051d4:	610b      	str	r3, [r1, #16]
 80051d6:	e005      	b.n	80051e4 <HAL_RCCEx_PeriphCLKConfig+0x728>
 80051d8:	4b6b      	ldr	r3, [pc, #428]	; (8005388 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80051da:	691b      	ldr	r3, [r3, #16]
 80051dc:	4a6a      	ldr	r2, [pc, #424]	; (8005388 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80051de:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80051e2:	6113      	str	r3, [r2, #16]
 80051e4:	4b68      	ldr	r3, [pc, #416]	; (8005388 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80051e6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80051ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80051f2:	4965      	ldr	r1, [pc, #404]	; (8005388 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80051f4:	4313      	orrs	r3, r2
 80051f6:	670b      	str	r3, [r1, #112]	; 0x70
 80051f8:	e004      	b.n	8005204 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80051fa:	7dfb      	ldrb	r3, [r7, #23]
 80051fc:	75bb      	strb	r3, [r7, #22]
 80051fe:	e001      	b.n	8005204 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005200:	7dfb      	ldrb	r3, [r7, #23]
 8005202:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f003 0301 	and.w	r3, r3, #1
 800520c:	2b00      	cmp	r3, #0
 800520e:	d07e      	beq.n	800530e <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005214:	2b28      	cmp	r3, #40	; 0x28
 8005216:	d867      	bhi.n	80052e8 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8005218:	a201      	add	r2, pc, #4	; (adr r2, 8005220 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 800521a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800521e:	bf00      	nop
 8005220:	080052ef 	.word	0x080052ef
 8005224:	080052e9 	.word	0x080052e9
 8005228:	080052e9 	.word	0x080052e9
 800522c:	080052e9 	.word	0x080052e9
 8005230:	080052e9 	.word	0x080052e9
 8005234:	080052e9 	.word	0x080052e9
 8005238:	080052e9 	.word	0x080052e9
 800523c:	080052e9 	.word	0x080052e9
 8005240:	080052c5 	.word	0x080052c5
 8005244:	080052e9 	.word	0x080052e9
 8005248:	080052e9 	.word	0x080052e9
 800524c:	080052e9 	.word	0x080052e9
 8005250:	080052e9 	.word	0x080052e9
 8005254:	080052e9 	.word	0x080052e9
 8005258:	080052e9 	.word	0x080052e9
 800525c:	080052e9 	.word	0x080052e9
 8005260:	080052d7 	.word	0x080052d7
 8005264:	080052e9 	.word	0x080052e9
 8005268:	080052e9 	.word	0x080052e9
 800526c:	080052e9 	.word	0x080052e9
 8005270:	080052e9 	.word	0x080052e9
 8005274:	080052e9 	.word	0x080052e9
 8005278:	080052e9 	.word	0x080052e9
 800527c:	080052e9 	.word	0x080052e9
 8005280:	080052ef 	.word	0x080052ef
 8005284:	080052e9 	.word	0x080052e9
 8005288:	080052e9 	.word	0x080052e9
 800528c:	080052e9 	.word	0x080052e9
 8005290:	080052e9 	.word	0x080052e9
 8005294:	080052e9 	.word	0x080052e9
 8005298:	080052e9 	.word	0x080052e9
 800529c:	080052e9 	.word	0x080052e9
 80052a0:	080052ef 	.word	0x080052ef
 80052a4:	080052e9 	.word	0x080052e9
 80052a8:	080052e9 	.word	0x080052e9
 80052ac:	080052e9 	.word	0x080052e9
 80052b0:	080052e9 	.word	0x080052e9
 80052b4:	080052e9 	.word	0x080052e9
 80052b8:	080052e9 	.word	0x080052e9
 80052bc:	080052e9 	.word	0x080052e9
 80052c0:	080052ef 	.word	0x080052ef
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	3304      	adds	r3, #4
 80052c8:	2101      	movs	r1, #1
 80052ca:	4618      	mov	r0, r3
 80052cc:	f000 fdf4 	bl	8005eb8 <RCCEx_PLL2_Config>
 80052d0:	4603      	mov	r3, r0
 80052d2:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80052d4:	e00c      	b.n	80052f0 <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	3324      	adds	r3, #36	; 0x24
 80052da:	2101      	movs	r1, #1
 80052dc:	4618      	mov	r0, r3
 80052de:	f000 fe9d 	bl	800601c <RCCEx_PLL3_Config>
 80052e2:	4603      	mov	r3, r0
 80052e4:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80052e6:	e003      	b.n	80052f0 <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80052e8:	2301      	movs	r3, #1
 80052ea:	75fb      	strb	r3, [r7, #23]
      break;
 80052ec:	e000      	b.n	80052f0 <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 80052ee:	bf00      	nop
    }

    if(ret == HAL_OK)
 80052f0:	7dfb      	ldrb	r3, [r7, #23]
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d109      	bne.n	800530a <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80052f6:	4b24      	ldr	r3, [pc, #144]	; (8005388 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80052f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052fa:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005302:	4921      	ldr	r1, [pc, #132]	; (8005388 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005304:	4313      	orrs	r3, r2
 8005306:	654b      	str	r3, [r1, #84]	; 0x54
 8005308:	e001      	b.n	800530e <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800530a:	7dfb      	ldrb	r3, [r7, #23]
 800530c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	f003 0302 	and.w	r3, r3, #2
 8005316:	2b00      	cmp	r3, #0
 8005318:	d03e      	beq.n	8005398 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800531e:	2b05      	cmp	r3, #5
 8005320:	d820      	bhi.n	8005364 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 8005322:	a201      	add	r2, pc, #4	; (adr r2, 8005328 <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 8005324:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005328:	0800536b 	.word	0x0800536b
 800532c:	08005341 	.word	0x08005341
 8005330:	08005353 	.word	0x08005353
 8005334:	0800536b 	.word	0x0800536b
 8005338:	0800536b 	.word	0x0800536b
 800533c:	0800536b 	.word	0x0800536b
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	3304      	adds	r3, #4
 8005344:	2101      	movs	r1, #1
 8005346:	4618      	mov	r0, r3
 8005348:	f000 fdb6 	bl	8005eb8 <RCCEx_PLL2_Config>
 800534c:	4603      	mov	r3, r0
 800534e:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8005350:	e00c      	b.n	800536c <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	3324      	adds	r3, #36	; 0x24
 8005356:	2101      	movs	r1, #1
 8005358:	4618      	mov	r0, r3
 800535a:	f000 fe5f 	bl	800601c <RCCEx_PLL3_Config>
 800535e:	4603      	mov	r3, r0
 8005360:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8005362:	e003      	b.n	800536c <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005364:	2301      	movs	r3, #1
 8005366:	75fb      	strb	r3, [r7, #23]
      break;
 8005368:	e000      	b.n	800536c <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 800536a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800536c:	7dfb      	ldrb	r3, [r7, #23]
 800536e:	2b00      	cmp	r3, #0
 8005370:	d110      	bne.n	8005394 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8005372:	4b05      	ldr	r3, [pc, #20]	; (8005388 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005374:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005376:	f023 0207 	bic.w	r2, r3, #7
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800537e:	4902      	ldr	r1, [pc, #8]	; (8005388 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005380:	4313      	orrs	r3, r2
 8005382:	654b      	str	r3, [r1, #84]	; 0x54
 8005384:	e008      	b.n	8005398 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 8005386:	bf00      	nop
 8005388:	58024400 	.word	0x58024400
 800538c:	58024800 	.word	0x58024800
 8005390:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005394:	7dfb      	ldrb	r3, [r7, #23]
 8005396:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	f003 0304 	and.w	r3, r3, #4
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d039      	beq.n	8005418 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053aa:	2b05      	cmp	r3, #5
 80053ac:	d820      	bhi.n	80053f0 <HAL_RCCEx_PeriphCLKConfig+0x934>
 80053ae:	a201      	add	r2, pc, #4	; (adr r2, 80053b4 <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 80053b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053b4:	080053f7 	.word	0x080053f7
 80053b8:	080053cd 	.word	0x080053cd
 80053bc:	080053df 	.word	0x080053df
 80053c0:	080053f7 	.word	0x080053f7
 80053c4:	080053f7 	.word	0x080053f7
 80053c8:	080053f7 	.word	0x080053f7
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	3304      	adds	r3, #4
 80053d0:	2101      	movs	r1, #1
 80053d2:	4618      	mov	r0, r3
 80053d4:	f000 fd70 	bl	8005eb8 <RCCEx_PLL2_Config>
 80053d8:	4603      	mov	r3, r0
 80053da:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80053dc:	e00c      	b.n	80053f8 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	3324      	adds	r3, #36	; 0x24
 80053e2:	2101      	movs	r1, #1
 80053e4:	4618      	mov	r0, r3
 80053e6:	f000 fe19 	bl	800601c <RCCEx_PLL3_Config>
 80053ea:	4603      	mov	r3, r0
 80053ec:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80053ee:	e003      	b.n	80053f8 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80053f0:	2301      	movs	r3, #1
 80053f2:	75fb      	strb	r3, [r7, #23]
      break;
 80053f4:	e000      	b.n	80053f8 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 80053f6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80053f8:	7dfb      	ldrb	r3, [r7, #23]
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d10a      	bne.n	8005414 <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80053fe:	4bb7      	ldr	r3, [pc, #732]	; (80056dc <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8005400:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005402:	f023 0207 	bic.w	r2, r3, #7
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800540c:	49b3      	ldr	r1, [pc, #716]	; (80056dc <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800540e:	4313      	orrs	r3, r2
 8005410:	658b      	str	r3, [r1, #88]	; 0x58
 8005412:	e001      	b.n	8005418 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005414:	7dfb      	ldrb	r3, [r7, #23]
 8005416:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f003 0320 	and.w	r3, r3, #32
 8005420:	2b00      	cmp	r3, #0
 8005422:	d04b      	beq.n	80054bc <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800542a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800542e:	d02e      	beq.n	800548e <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 8005430:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005434:	d828      	bhi.n	8005488 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8005436:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800543a:	d02a      	beq.n	8005492 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 800543c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005440:	d822      	bhi.n	8005488 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8005442:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005446:	d026      	beq.n	8005496 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8005448:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800544c:	d81c      	bhi.n	8005488 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800544e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005452:	d010      	beq.n	8005476 <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 8005454:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005458:	d816      	bhi.n	8005488 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800545a:	2b00      	cmp	r3, #0
 800545c:	d01d      	beq.n	800549a <HAL_RCCEx_PeriphCLKConfig+0x9de>
 800545e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005462:	d111      	bne.n	8005488 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	3304      	adds	r3, #4
 8005468:	2100      	movs	r1, #0
 800546a:	4618      	mov	r0, r3
 800546c:	f000 fd24 	bl	8005eb8 <RCCEx_PLL2_Config>
 8005470:	4603      	mov	r3, r0
 8005472:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8005474:	e012      	b.n	800549c <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	3324      	adds	r3, #36	; 0x24
 800547a:	2102      	movs	r1, #2
 800547c:	4618      	mov	r0, r3
 800547e:	f000 fdcd 	bl	800601c <RCCEx_PLL3_Config>
 8005482:	4603      	mov	r3, r0
 8005484:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8005486:	e009      	b.n	800549c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005488:	2301      	movs	r3, #1
 800548a:	75fb      	strb	r3, [r7, #23]
      break;
 800548c:	e006      	b.n	800549c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800548e:	bf00      	nop
 8005490:	e004      	b.n	800549c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8005492:	bf00      	nop
 8005494:	e002      	b.n	800549c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8005496:	bf00      	nop
 8005498:	e000      	b.n	800549c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800549a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800549c:	7dfb      	ldrb	r3, [r7, #23]
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d10a      	bne.n	80054b8 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80054a2:	4b8e      	ldr	r3, [pc, #568]	; (80056dc <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80054a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054a6:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80054b0:	498a      	ldr	r1, [pc, #552]	; (80056dc <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80054b2:	4313      	orrs	r3, r2
 80054b4:	654b      	str	r3, [r1, #84]	; 0x54
 80054b6:	e001      	b.n	80054bc <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054b8:	7dfb      	ldrb	r3, [r7, #23]
 80054ba:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d04b      	beq.n	8005560 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80054ce:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80054d2:	d02e      	beq.n	8005532 <HAL_RCCEx_PeriphCLKConfig+0xa76>
 80054d4:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80054d8:	d828      	bhi.n	800552c <HAL_RCCEx_PeriphCLKConfig+0xa70>
 80054da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054de:	d02a      	beq.n	8005536 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 80054e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054e4:	d822      	bhi.n	800552c <HAL_RCCEx_PeriphCLKConfig+0xa70>
 80054e6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80054ea:	d026      	beq.n	800553a <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 80054ec:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80054f0:	d81c      	bhi.n	800552c <HAL_RCCEx_PeriphCLKConfig+0xa70>
 80054f2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80054f6:	d010      	beq.n	800551a <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 80054f8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80054fc:	d816      	bhi.n	800552c <HAL_RCCEx_PeriphCLKConfig+0xa70>
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d01d      	beq.n	800553e <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8005502:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005506:	d111      	bne.n	800552c <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	3304      	adds	r3, #4
 800550c:	2100      	movs	r1, #0
 800550e:	4618      	mov	r0, r3
 8005510:	f000 fcd2 	bl	8005eb8 <RCCEx_PLL2_Config>
 8005514:	4603      	mov	r3, r0
 8005516:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8005518:	e012      	b.n	8005540 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	3324      	adds	r3, #36	; 0x24
 800551e:	2102      	movs	r1, #2
 8005520:	4618      	mov	r0, r3
 8005522:	f000 fd7b 	bl	800601c <RCCEx_PLL3_Config>
 8005526:	4603      	mov	r3, r0
 8005528:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800552a:	e009      	b.n	8005540 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800552c:	2301      	movs	r3, #1
 800552e:	75fb      	strb	r3, [r7, #23]
      break;
 8005530:	e006      	b.n	8005540 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8005532:	bf00      	nop
 8005534:	e004      	b.n	8005540 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8005536:	bf00      	nop
 8005538:	e002      	b.n	8005540 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800553a:	bf00      	nop
 800553c:	e000      	b.n	8005540 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800553e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005540:	7dfb      	ldrb	r3, [r7, #23]
 8005542:	2b00      	cmp	r3, #0
 8005544:	d10a      	bne.n	800555c <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005546:	4b65      	ldr	r3, [pc, #404]	; (80056dc <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8005548:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800554a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005554:	4961      	ldr	r1, [pc, #388]	; (80056dc <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8005556:	4313      	orrs	r3, r2
 8005558:	658b      	str	r3, [r1, #88]	; 0x58
 800555a:	e001      	b.n	8005560 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800555c:	7dfb      	ldrb	r3, [r7, #23]
 800555e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005568:	2b00      	cmp	r3, #0
 800556a:	d04b      	beq.n	8005604 <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005572:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8005576:	d02e      	beq.n	80055d6 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 8005578:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800557c:	d828      	bhi.n	80055d0 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800557e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005582:	d02a      	beq.n	80055da <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 8005584:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005588:	d822      	bhi.n	80055d0 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800558a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800558e:	d026      	beq.n	80055de <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8005590:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8005594:	d81c      	bhi.n	80055d0 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8005596:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800559a:	d010      	beq.n	80055be <HAL_RCCEx_PeriphCLKConfig+0xb02>
 800559c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80055a0:	d816      	bhi.n	80055d0 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d01d      	beq.n	80055e2 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 80055a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80055aa:	d111      	bne.n	80055d0 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	3304      	adds	r3, #4
 80055b0:	2100      	movs	r1, #0
 80055b2:	4618      	mov	r0, r3
 80055b4:	f000 fc80 	bl	8005eb8 <RCCEx_PLL2_Config>
 80055b8:	4603      	mov	r3, r0
 80055ba:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80055bc:	e012      	b.n	80055e4 <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	3324      	adds	r3, #36	; 0x24
 80055c2:	2102      	movs	r1, #2
 80055c4:	4618      	mov	r0, r3
 80055c6:	f000 fd29 	bl	800601c <RCCEx_PLL3_Config>
 80055ca:	4603      	mov	r3, r0
 80055cc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80055ce:	e009      	b.n	80055e4 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80055d0:	2301      	movs	r3, #1
 80055d2:	75fb      	strb	r3, [r7, #23]
      break;
 80055d4:	e006      	b.n	80055e4 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 80055d6:	bf00      	nop
 80055d8:	e004      	b.n	80055e4 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 80055da:	bf00      	nop
 80055dc:	e002      	b.n	80055e4 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 80055de:	bf00      	nop
 80055e0:	e000      	b.n	80055e4 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 80055e2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80055e4:	7dfb      	ldrb	r3, [r7, #23]
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d10a      	bne.n	8005600 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80055ea:	4b3c      	ldr	r3, [pc, #240]	; (80056dc <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80055ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055ee:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80055f8:	4938      	ldr	r1, [pc, #224]	; (80056dc <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80055fa:	4313      	orrs	r3, r2
 80055fc:	658b      	str	r3, [r1, #88]	; 0x58
 80055fe:	e001      	b.n	8005604 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005600:	7dfb      	ldrb	r3, [r7, #23]
 8005602:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f003 0308 	and.w	r3, r3, #8
 800560c:	2b00      	cmp	r3, #0
 800560e:	d01a      	beq.n	8005646 <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005616:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800561a:	d10a      	bne.n	8005632 <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	3324      	adds	r3, #36	; 0x24
 8005620:	2102      	movs	r1, #2
 8005622:	4618      	mov	r0, r3
 8005624:	f000 fcfa 	bl	800601c <RCCEx_PLL3_Config>
 8005628:	4603      	mov	r3, r0
 800562a:	2b00      	cmp	r3, #0
 800562c:	d001      	beq.n	8005632 <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 800562e:	2301      	movs	r3, #1
 8005630:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8005632:	4b2a      	ldr	r3, [pc, #168]	; (80056dc <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8005634:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005636:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005640:	4926      	ldr	r1, [pc, #152]	; (80056dc <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8005642:	4313      	orrs	r3, r2
 8005644:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f003 0310 	and.w	r3, r3, #16
 800564e:	2b00      	cmp	r3, #0
 8005650:	d01a      	beq.n	8005688 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005658:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800565c:	d10a      	bne.n	8005674 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	3324      	adds	r3, #36	; 0x24
 8005662:	2102      	movs	r1, #2
 8005664:	4618      	mov	r0, r3
 8005666:	f000 fcd9 	bl	800601c <RCCEx_PLL3_Config>
 800566a:	4603      	mov	r3, r0
 800566c:	2b00      	cmp	r3, #0
 800566e:	d001      	beq.n	8005674 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 8005670:	2301      	movs	r3, #1
 8005672:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005674:	4b19      	ldr	r3, [pc, #100]	; (80056dc <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8005676:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005678:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005682:	4916      	ldr	r1, [pc, #88]	; (80056dc <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8005684:	4313      	orrs	r3, r2
 8005686:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005690:	2b00      	cmp	r3, #0
 8005692:	d036      	beq.n	8005702 <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800569a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800569e:	d01f      	beq.n	80056e0 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 80056a0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80056a4:	d817      	bhi.n	80056d6 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d003      	beq.n	80056b2 <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 80056aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80056ae:	d009      	beq.n	80056c4 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 80056b0:	e011      	b.n	80056d6 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	3304      	adds	r3, #4
 80056b6:	2100      	movs	r1, #0
 80056b8:	4618      	mov	r0, r3
 80056ba:	f000 fbfd 	bl	8005eb8 <RCCEx_PLL2_Config>
 80056be:	4603      	mov	r3, r0
 80056c0:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80056c2:	e00e      	b.n	80056e2 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	3324      	adds	r3, #36	; 0x24
 80056c8:	2102      	movs	r1, #2
 80056ca:	4618      	mov	r0, r3
 80056cc:	f000 fca6 	bl	800601c <RCCEx_PLL3_Config>
 80056d0:	4603      	mov	r3, r0
 80056d2:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80056d4:	e005      	b.n	80056e2 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80056d6:	2301      	movs	r3, #1
 80056d8:	75fb      	strb	r3, [r7, #23]
      break;
 80056da:	e002      	b.n	80056e2 <HAL_RCCEx_PeriphCLKConfig+0xc26>
 80056dc:	58024400 	.word	0x58024400
      break;
 80056e0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80056e2:	7dfb      	ldrb	r3, [r7, #23]
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d10a      	bne.n	80056fe <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80056e8:	4b93      	ldr	r3, [pc, #588]	; (8005938 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80056ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056ec:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80056f6:	4990      	ldr	r1, [pc, #576]	; (8005938 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80056f8:	4313      	orrs	r3, r2
 80056fa:	658b      	str	r3, [r1, #88]	; 0x58
 80056fc:	e001      	b.n	8005702 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056fe:	7dfb      	ldrb	r3, [r7, #23]
 8005700:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800570a:	2b00      	cmp	r3, #0
 800570c:	d033      	beq.n	8005776 <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005714:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005718:	d01c      	beq.n	8005754 <HAL_RCCEx_PeriphCLKConfig+0xc98>
 800571a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800571e:	d816      	bhi.n	800574e <HAL_RCCEx_PeriphCLKConfig+0xc92>
 8005720:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005724:	d003      	beq.n	800572e <HAL_RCCEx_PeriphCLKConfig+0xc72>
 8005726:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800572a:	d007      	beq.n	800573c <HAL_RCCEx_PeriphCLKConfig+0xc80>
 800572c:	e00f      	b.n	800574e <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800572e:	4b82      	ldr	r3, [pc, #520]	; (8005938 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005730:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005732:	4a81      	ldr	r2, [pc, #516]	; (8005938 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005734:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005738:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800573a:	e00c      	b.n	8005756 <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	3324      	adds	r3, #36	; 0x24
 8005740:	2101      	movs	r1, #1
 8005742:	4618      	mov	r0, r3
 8005744:	f000 fc6a 	bl	800601c <RCCEx_PLL3_Config>
 8005748:	4603      	mov	r3, r0
 800574a:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800574c:	e003      	b.n	8005756 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800574e:	2301      	movs	r3, #1
 8005750:	75fb      	strb	r3, [r7, #23]
      break;
 8005752:	e000      	b.n	8005756 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 8005754:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005756:	7dfb      	ldrb	r3, [r7, #23]
 8005758:	2b00      	cmp	r3, #0
 800575a:	d10a      	bne.n	8005772 <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800575c:	4b76      	ldr	r3, [pc, #472]	; (8005938 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800575e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005760:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800576a:	4973      	ldr	r1, [pc, #460]	; (8005938 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800576c:	4313      	orrs	r3, r2
 800576e:	654b      	str	r3, [r1, #84]	; 0x54
 8005770:	e001      	b.n	8005776 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005772:	7dfb      	ldrb	r3, [r7, #23]
 8005774:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800577e:	2b00      	cmp	r3, #0
 8005780:	d029      	beq.n	80057d6 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005786:	2b00      	cmp	r3, #0
 8005788:	d003      	beq.n	8005792 <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 800578a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800578e:	d007      	beq.n	80057a0 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 8005790:	e00f      	b.n	80057b2 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005792:	4b69      	ldr	r3, [pc, #420]	; (8005938 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005794:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005796:	4a68      	ldr	r2, [pc, #416]	; (8005938 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005798:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800579c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800579e:	e00b      	b.n	80057b8 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	3304      	adds	r3, #4
 80057a4:	2102      	movs	r1, #2
 80057a6:	4618      	mov	r0, r3
 80057a8:	f000 fb86 	bl	8005eb8 <RCCEx_PLL2_Config>
 80057ac:	4603      	mov	r3, r0
 80057ae:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80057b0:	e002      	b.n	80057b8 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 80057b2:	2301      	movs	r3, #1
 80057b4:	75fb      	strb	r3, [r7, #23]
      break;
 80057b6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80057b8:	7dfb      	ldrb	r3, [r7, #23]
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d109      	bne.n	80057d2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80057be:	4b5e      	ldr	r3, [pc, #376]	; (8005938 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80057c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80057c2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80057ca:	495b      	ldr	r1, [pc, #364]	; (8005938 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80057cc:	4313      	orrs	r3, r2
 80057ce:	64cb      	str	r3, [r1, #76]	; 0x4c
 80057d0:	e001      	b.n	80057d6 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057d2:	7dfb      	ldrb	r3, [r7, #23]
 80057d4:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d00a      	beq.n	80057f8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	3324      	adds	r3, #36	; 0x24
 80057e6:	2102      	movs	r1, #2
 80057e8:	4618      	mov	r0, r3
 80057ea:	f000 fc17 	bl	800601c <RCCEx_PLL3_Config>
 80057ee:	4603      	mov	r3, r0
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d001      	beq.n	80057f8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 80057f4:	2301      	movs	r3, #1
 80057f6:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005800:	2b00      	cmp	r3, #0
 8005802:	d030      	beq.n	8005866 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005808:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800580c:	d017      	beq.n	800583e <HAL_RCCEx_PeriphCLKConfig+0xd82>
 800580e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005812:	d811      	bhi.n	8005838 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8005814:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005818:	d013      	beq.n	8005842 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 800581a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800581e:	d80b      	bhi.n	8005838 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8005820:	2b00      	cmp	r3, #0
 8005822:	d010      	beq.n	8005846 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8005824:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005828:	d106      	bne.n	8005838 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800582a:	4b43      	ldr	r3, [pc, #268]	; (8005938 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800582c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800582e:	4a42      	ldr	r2, [pc, #264]	; (8005938 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005830:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005834:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8005836:	e007      	b.n	8005848 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005838:	2301      	movs	r3, #1
 800583a:	75fb      	strb	r3, [r7, #23]
      break;
 800583c:	e004      	b.n	8005848 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800583e:	bf00      	nop
 8005840:	e002      	b.n	8005848 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8005842:	bf00      	nop
 8005844:	e000      	b.n	8005848 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8005846:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005848:	7dfb      	ldrb	r3, [r7, #23]
 800584a:	2b00      	cmp	r3, #0
 800584c:	d109      	bne.n	8005862 <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800584e:	4b3a      	ldr	r3, [pc, #232]	; (8005938 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005850:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005852:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800585a:	4937      	ldr	r1, [pc, #220]	; (8005938 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800585c:	4313      	orrs	r3, r2
 800585e:	654b      	str	r3, [r1, #84]	; 0x54
 8005860:	e001      	b.n	8005866 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005862:	7dfb      	ldrb	r3, [r7, #23]
 8005864:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800586e:	2b00      	cmp	r3, #0
 8005870:	d008      	beq.n	8005884 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005872:	4b31      	ldr	r3, [pc, #196]	; (8005938 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005874:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005876:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800587e:	492e      	ldr	r1, [pc, #184]	; (8005938 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005880:	4313      	orrs	r3, r2
 8005882:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800588c:	2b00      	cmp	r3, #0
 800588e:	d009      	beq.n	80058a4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8005890:	4b29      	ldr	r3, [pc, #164]	; (8005938 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005892:	691b      	ldr	r3, [r3, #16]
 8005894:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800589e:	4926      	ldr	r1, [pc, #152]	; (8005938 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80058a0:	4313      	orrs	r3, r2
 80058a2:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d008      	beq.n	80058c2 <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80058b0:	4b21      	ldr	r3, [pc, #132]	; (8005938 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80058b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80058b4:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80058bc:	491e      	ldr	r1, [pc, #120]	; (8005938 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80058be:	4313      	orrs	r3, r2
 80058c0:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d00d      	beq.n	80058ea <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80058ce:	4b1a      	ldr	r3, [pc, #104]	; (8005938 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80058d0:	691b      	ldr	r3, [r3, #16]
 80058d2:	4a19      	ldr	r2, [pc, #100]	; (8005938 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80058d4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80058d8:	6113      	str	r3, [r2, #16]
 80058da:	4b17      	ldr	r3, [pc, #92]	; (8005938 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80058dc:	691a      	ldr	r2, [r3, #16]
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80058e4:	4914      	ldr	r1, [pc, #80]	; (8005938 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80058e6:	4313      	orrs	r3, r2
 80058e8:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	da08      	bge.n	8005904 <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80058f2:	4b11      	ldr	r3, [pc, #68]	; (8005938 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80058f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80058f6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80058fe:	490e      	ldr	r1, [pc, #56]	; (8005938 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005900:	4313      	orrs	r3, r2
 8005902:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800590c:	2b00      	cmp	r3, #0
 800590e:	d009      	beq.n	8005924 <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005910:	4b09      	ldr	r3, [pc, #36]	; (8005938 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005912:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005914:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800591e:	4906      	ldr	r1, [pc, #24]	; (8005938 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005920:	4313      	orrs	r3, r2
 8005922:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8005924:	7dbb      	ldrb	r3, [r7, #22]
 8005926:	2b00      	cmp	r3, #0
 8005928:	d101      	bne.n	800592e <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 800592a:	2300      	movs	r3, #0
 800592c:	e000      	b.n	8005930 <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 800592e:	2301      	movs	r3, #1
}
 8005930:	4618      	mov	r0, r3
 8005932:	3718      	adds	r7, #24
 8005934:	46bd      	mov	sp, r7
 8005936:	bd80      	pop	{r7, pc}
 8005938:	58024400 	.word	0x58024400

0800593c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800593c:	b580      	push	{r7, lr}
 800593e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8005940:	f7ff f81e 	bl	8004980 <HAL_RCC_GetHCLKFreq>
 8005944:	4602      	mov	r2, r0
 8005946:	4b06      	ldr	r3, [pc, #24]	; (8005960 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8005948:	6a1b      	ldr	r3, [r3, #32]
 800594a:	091b      	lsrs	r3, r3, #4
 800594c:	f003 0307 	and.w	r3, r3, #7
 8005950:	4904      	ldr	r1, [pc, #16]	; (8005964 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8005952:	5ccb      	ldrb	r3, [r1, r3]
 8005954:	f003 031f 	and.w	r3, r3, #31
 8005958:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800595c:	4618      	mov	r0, r3
 800595e:	bd80      	pop	{r7, pc}
 8005960:	58024400 	.word	0x58024400
 8005964:	0800a9f8 	.word	0x0800a9f8

08005968 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8005968:	b480      	push	{r7}
 800596a:	b089      	sub	sp, #36	; 0x24
 800596c:	af00      	add	r7, sp, #0
 800596e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005970:	4ba1      	ldr	r3, [pc, #644]	; (8005bf8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005972:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005974:	f003 0303 	and.w	r3, r3, #3
 8005978:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800597a:	4b9f      	ldr	r3, [pc, #636]	; (8005bf8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800597c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800597e:	0b1b      	lsrs	r3, r3, #12
 8005980:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005984:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8005986:	4b9c      	ldr	r3, [pc, #624]	; (8005bf8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005988:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800598a:	091b      	lsrs	r3, r3, #4
 800598c:	f003 0301 	and.w	r3, r3, #1
 8005990:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8005992:	4b99      	ldr	r3, [pc, #612]	; (8005bf8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005994:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005996:	08db      	lsrs	r3, r3, #3
 8005998:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800599c:	693a      	ldr	r2, [r7, #16]
 800599e:	fb02 f303 	mul.w	r3, r2, r3
 80059a2:	ee07 3a90 	vmov	s15, r3
 80059a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80059aa:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80059ae:	697b      	ldr	r3, [r7, #20]
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	f000 8111 	beq.w	8005bd8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80059b6:	69bb      	ldr	r3, [r7, #24]
 80059b8:	2b02      	cmp	r3, #2
 80059ba:	f000 8083 	beq.w	8005ac4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80059be:	69bb      	ldr	r3, [r7, #24]
 80059c0:	2b02      	cmp	r3, #2
 80059c2:	f200 80a1 	bhi.w	8005b08 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80059c6:	69bb      	ldr	r3, [r7, #24]
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d003      	beq.n	80059d4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80059cc:	69bb      	ldr	r3, [r7, #24]
 80059ce:	2b01      	cmp	r3, #1
 80059d0:	d056      	beq.n	8005a80 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80059d2:	e099      	b.n	8005b08 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80059d4:	4b88      	ldr	r3, [pc, #544]	; (8005bf8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	f003 0320 	and.w	r3, r3, #32
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d02d      	beq.n	8005a3c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80059e0:	4b85      	ldr	r3, [pc, #532]	; (8005bf8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	08db      	lsrs	r3, r3, #3
 80059e6:	f003 0303 	and.w	r3, r3, #3
 80059ea:	4a84      	ldr	r2, [pc, #528]	; (8005bfc <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80059ec:	fa22 f303 	lsr.w	r3, r2, r3
 80059f0:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80059f2:	68bb      	ldr	r3, [r7, #8]
 80059f4:	ee07 3a90 	vmov	s15, r3
 80059f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80059fc:	697b      	ldr	r3, [r7, #20]
 80059fe:	ee07 3a90 	vmov	s15, r3
 8005a02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005a0a:	4b7b      	ldr	r3, [pc, #492]	; (8005bf8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005a0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a12:	ee07 3a90 	vmov	s15, r3
 8005a16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a1a:	ed97 6a03 	vldr	s12, [r7, #12]
 8005a1e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005c00 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005a22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005a26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005a2a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005a2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005a32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a36:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8005a3a:	e087      	b.n	8005b4c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005a3c:	697b      	ldr	r3, [r7, #20]
 8005a3e:	ee07 3a90 	vmov	s15, r3
 8005a42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a46:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005c04 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8005a4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005a4e:	4b6a      	ldr	r3, [pc, #424]	; (8005bf8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005a50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a56:	ee07 3a90 	vmov	s15, r3
 8005a5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a5e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005a62:	eddf 5a67 	vldr	s11, [pc, #412]	; 8005c00 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005a66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005a6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005a6e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005a72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005a76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a7a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005a7e:	e065      	b.n	8005b4c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005a80:	697b      	ldr	r3, [r7, #20]
 8005a82:	ee07 3a90 	vmov	s15, r3
 8005a86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a8a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005c08 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005a8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005a92:	4b59      	ldr	r3, [pc, #356]	; (8005bf8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005a94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a9a:	ee07 3a90 	vmov	s15, r3
 8005a9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005aa2:	ed97 6a03 	vldr	s12, [r7, #12]
 8005aa6:	eddf 5a56 	vldr	s11, [pc, #344]	; 8005c00 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005aaa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005aae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005ab2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005ab6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005aba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005abe:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005ac2:	e043      	b.n	8005b4c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005ac4:	697b      	ldr	r3, [r7, #20]
 8005ac6:	ee07 3a90 	vmov	s15, r3
 8005aca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ace:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005c0c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8005ad2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005ad6:	4b48      	ldr	r3, [pc, #288]	; (8005bf8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005ad8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ada:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ade:	ee07 3a90 	vmov	s15, r3
 8005ae2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ae6:	ed97 6a03 	vldr	s12, [r7, #12]
 8005aea:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005c00 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005aee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005af2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005af6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005afa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005afe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b02:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005b06:	e021      	b.n	8005b4c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005b08:	697b      	ldr	r3, [r7, #20]
 8005b0a:	ee07 3a90 	vmov	s15, r3
 8005b0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b12:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005c08 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005b16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005b1a:	4b37      	ldr	r3, [pc, #220]	; (8005bf8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005b1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b22:	ee07 3a90 	vmov	s15, r3
 8005b26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005b2a:	ed97 6a03 	vldr	s12, [r7, #12]
 8005b2e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005c00 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005b32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005b36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005b3a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005b3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005b42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b46:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005b4a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8005b4c:	4b2a      	ldr	r3, [pc, #168]	; (8005bf8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005b4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b50:	0a5b      	lsrs	r3, r3, #9
 8005b52:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005b56:	ee07 3a90 	vmov	s15, r3
 8005b5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b5e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005b62:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005b66:	edd7 6a07 	vldr	s13, [r7, #28]
 8005b6a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005b6e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005b72:	ee17 2a90 	vmov	r2, s15
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8005b7a:	4b1f      	ldr	r3, [pc, #124]	; (8005bf8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005b7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b7e:	0c1b      	lsrs	r3, r3, #16
 8005b80:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005b84:	ee07 3a90 	vmov	s15, r3
 8005b88:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b8c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005b90:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005b94:	edd7 6a07 	vldr	s13, [r7, #28]
 8005b98:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005b9c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005ba0:	ee17 2a90 	vmov	r2, s15
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8005ba8:	4b13      	ldr	r3, [pc, #76]	; (8005bf8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005baa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bac:	0e1b      	lsrs	r3, r3, #24
 8005bae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005bb2:	ee07 3a90 	vmov	s15, r3
 8005bb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005bba:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005bbe:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005bc2:	edd7 6a07 	vldr	s13, [r7, #28]
 8005bc6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005bca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005bce:	ee17 2a90 	vmov	r2, s15
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8005bd6:	e008      	b.n	8005bea <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	2200      	movs	r2, #0
 8005bdc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	2200      	movs	r2, #0
 8005be2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	2200      	movs	r2, #0
 8005be8:	609a      	str	r2, [r3, #8]
}
 8005bea:	bf00      	nop
 8005bec:	3724      	adds	r7, #36	; 0x24
 8005bee:	46bd      	mov	sp, r7
 8005bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf4:	4770      	bx	lr
 8005bf6:	bf00      	nop
 8005bf8:	58024400 	.word	0x58024400
 8005bfc:	03d09000 	.word	0x03d09000
 8005c00:	46000000 	.word	0x46000000
 8005c04:	4c742400 	.word	0x4c742400
 8005c08:	4a742400 	.word	0x4a742400
 8005c0c:	4b742400 	.word	0x4b742400

08005c10 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8005c10:	b480      	push	{r7}
 8005c12:	b089      	sub	sp, #36	; 0x24
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005c18:	4ba1      	ldr	r3, [pc, #644]	; (8005ea0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005c1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c1c:	f003 0303 	and.w	r3, r3, #3
 8005c20:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8005c22:	4b9f      	ldr	r3, [pc, #636]	; (8005ea0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005c24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c26:	0d1b      	lsrs	r3, r3, #20
 8005c28:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005c2c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8005c2e:	4b9c      	ldr	r3, [pc, #624]	; (8005ea0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005c30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c32:	0a1b      	lsrs	r3, r3, #8
 8005c34:	f003 0301 	and.w	r3, r3, #1
 8005c38:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8005c3a:	4b99      	ldr	r3, [pc, #612]	; (8005ea0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005c3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c3e:	08db      	lsrs	r3, r3, #3
 8005c40:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005c44:	693a      	ldr	r2, [r7, #16]
 8005c46:	fb02 f303 	mul.w	r3, r2, r3
 8005c4a:	ee07 3a90 	vmov	s15, r3
 8005c4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c52:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8005c56:	697b      	ldr	r3, [r7, #20]
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	f000 8111 	beq.w	8005e80 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8005c5e:	69bb      	ldr	r3, [r7, #24]
 8005c60:	2b02      	cmp	r3, #2
 8005c62:	f000 8083 	beq.w	8005d6c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8005c66:	69bb      	ldr	r3, [r7, #24]
 8005c68:	2b02      	cmp	r3, #2
 8005c6a:	f200 80a1 	bhi.w	8005db0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8005c6e:	69bb      	ldr	r3, [r7, #24]
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d003      	beq.n	8005c7c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8005c74:	69bb      	ldr	r3, [r7, #24]
 8005c76:	2b01      	cmp	r3, #1
 8005c78:	d056      	beq.n	8005d28 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8005c7a:	e099      	b.n	8005db0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005c7c:	4b88      	ldr	r3, [pc, #544]	; (8005ea0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	f003 0320 	and.w	r3, r3, #32
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d02d      	beq.n	8005ce4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005c88:	4b85      	ldr	r3, [pc, #532]	; (8005ea0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	08db      	lsrs	r3, r3, #3
 8005c8e:	f003 0303 	and.w	r3, r3, #3
 8005c92:	4a84      	ldr	r2, [pc, #528]	; (8005ea4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8005c94:	fa22 f303 	lsr.w	r3, r2, r3
 8005c98:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005c9a:	68bb      	ldr	r3, [r7, #8]
 8005c9c:	ee07 3a90 	vmov	s15, r3
 8005ca0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ca4:	697b      	ldr	r3, [r7, #20]
 8005ca6:	ee07 3a90 	vmov	s15, r3
 8005caa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005cae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005cb2:	4b7b      	ldr	r3, [pc, #492]	; (8005ea0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005cba:	ee07 3a90 	vmov	s15, r3
 8005cbe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005cc2:	ed97 6a03 	vldr	s12, [r7, #12]
 8005cc6:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005ea8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005cca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005cce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005cd2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005cd6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005cda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005cde:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8005ce2:	e087      	b.n	8005df4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005ce4:	697b      	ldr	r3, [r7, #20]
 8005ce6:	ee07 3a90 	vmov	s15, r3
 8005cea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005cee:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005eac <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8005cf2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005cf6:	4b6a      	ldr	r3, [pc, #424]	; (8005ea0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cfa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005cfe:	ee07 3a90 	vmov	s15, r3
 8005d02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d06:	ed97 6a03 	vldr	s12, [r7, #12]
 8005d0a:	eddf 5a67 	vldr	s11, [pc, #412]	; 8005ea8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005d0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005d12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d16:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005d1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d22:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005d26:	e065      	b.n	8005df4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005d28:	697b      	ldr	r3, [r7, #20]
 8005d2a:	ee07 3a90 	vmov	s15, r3
 8005d2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d32:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005eb0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005d36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d3a:	4b59      	ldr	r3, [pc, #356]	; (8005ea0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d42:	ee07 3a90 	vmov	s15, r3
 8005d46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d4a:	ed97 6a03 	vldr	s12, [r7, #12]
 8005d4e:	eddf 5a56 	vldr	s11, [pc, #344]	; 8005ea8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005d52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005d56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d5a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005d5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d66:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005d6a:	e043      	b.n	8005df4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005d6c:	697b      	ldr	r3, [r7, #20]
 8005d6e:	ee07 3a90 	vmov	s15, r3
 8005d72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d76:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005eb4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8005d7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d7e:	4b48      	ldr	r3, [pc, #288]	; (8005ea0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d86:	ee07 3a90 	vmov	s15, r3
 8005d8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d8e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005d92:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005ea8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005d96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005d9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d9e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005da2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005da6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005daa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005dae:	e021      	b.n	8005df4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005db0:	697b      	ldr	r3, [r7, #20]
 8005db2:	ee07 3a90 	vmov	s15, r3
 8005db6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005dba:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005eb0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005dbe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005dc2:	4b37      	ldr	r3, [pc, #220]	; (8005ea0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dc6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005dca:	ee07 3a90 	vmov	s15, r3
 8005dce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005dd2:	ed97 6a03 	vldr	s12, [r7, #12]
 8005dd6:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005ea8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005dda:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005dde:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005de2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005de6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005dea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005dee:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005df2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8005df4:	4b2a      	ldr	r3, [pc, #168]	; (8005ea0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005df6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005df8:	0a5b      	lsrs	r3, r3, #9
 8005dfa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005dfe:	ee07 3a90 	vmov	s15, r3
 8005e02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e06:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005e0a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005e0e:	edd7 6a07 	vldr	s13, [r7, #28]
 8005e12:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005e16:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005e1a:	ee17 2a90 	vmov	r2, s15
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8005e22:	4b1f      	ldr	r3, [pc, #124]	; (8005ea0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e26:	0c1b      	lsrs	r3, r3, #16
 8005e28:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005e2c:	ee07 3a90 	vmov	s15, r3
 8005e30:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e34:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005e38:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005e3c:	edd7 6a07 	vldr	s13, [r7, #28]
 8005e40:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005e44:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005e48:	ee17 2a90 	vmov	r2, s15
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8005e50:	4b13      	ldr	r3, [pc, #76]	; (8005ea0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005e52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e54:	0e1b      	lsrs	r3, r3, #24
 8005e56:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005e5a:	ee07 3a90 	vmov	s15, r3
 8005e5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e62:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005e66:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005e6a:	edd7 6a07 	vldr	s13, [r7, #28]
 8005e6e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005e72:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005e76:	ee17 2a90 	vmov	r2, s15
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8005e7e:	e008      	b.n	8005e92 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	2200      	movs	r2, #0
 8005e84:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	2200      	movs	r2, #0
 8005e8a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	2200      	movs	r2, #0
 8005e90:	609a      	str	r2, [r3, #8]
}
 8005e92:	bf00      	nop
 8005e94:	3724      	adds	r7, #36	; 0x24
 8005e96:	46bd      	mov	sp, r7
 8005e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9c:	4770      	bx	lr
 8005e9e:	bf00      	nop
 8005ea0:	58024400 	.word	0x58024400
 8005ea4:	03d09000 	.word	0x03d09000
 8005ea8:	46000000 	.word	0x46000000
 8005eac:	4c742400 	.word	0x4c742400
 8005eb0:	4a742400 	.word	0x4a742400
 8005eb4:	4b742400 	.word	0x4b742400

08005eb8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8005eb8:	b580      	push	{r7, lr}
 8005eba:	b084      	sub	sp, #16
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	6078      	str	r0, [r7, #4]
 8005ec0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005ec2:	2300      	movs	r3, #0
 8005ec4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005ec6:	4b53      	ldr	r3, [pc, #332]	; (8006014 <RCCEx_PLL2_Config+0x15c>)
 8005ec8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005eca:	f003 0303 	and.w	r3, r3, #3
 8005ece:	2b03      	cmp	r3, #3
 8005ed0:	d101      	bne.n	8005ed6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8005ed2:	2301      	movs	r3, #1
 8005ed4:	e099      	b.n	800600a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8005ed6:	4b4f      	ldr	r3, [pc, #316]	; (8006014 <RCCEx_PLL2_Config+0x15c>)
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	4a4e      	ldr	r2, [pc, #312]	; (8006014 <RCCEx_PLL2_Config+0x15c>)
 8005edc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005ee0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005ee2:	f7fb f895 	bl	8001010 <HAL_GetTick>
 8005ee6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005ee8:	e008      	b.n	8005efc <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8005eea:	f7fb f891 	bl	8001010 <HAL_GetTick>
 8005eee:	4602      	mov	r2, r0
 8005ef0:	68bb      	ldr	r3, [r7, #8]
 8005ef2:	1ad3      	subs	r3, r2, r3
 8005ef4:	2b02      	cmp	r3, #2
 8005ef6:	d901      	bls.n	8005efc <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005ef8:	2303      	movs	r3, #3
 8005efa:	e086      	b.n	800600a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005efc:	4b45      	ldr	r3, [pc, #276]	; (8006014 <RCCEx_PLL2_Config+0x15c>)
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d1f0      	bne.n	8005eea <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8005f08:	4b42      	ldr	r3, [pc, #264]	; (8006014 <RCCEx_PLL2_Config+0x15c>)
 8005f0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f0c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	031b      	lsls	r3, r3, #12
 8005f16:	493f      	ldr	r1, [pc, #252]	; (8006014 <RCCEx_PLL2_Config+0x15c>)
 8005f18:	4313      	orrs	r3, r2
 8005f1a:	628b      	str	r3, [r1, #40]	; 0x28
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	685b      	ldr	r3, [r3, #4]
 8005f20:	3b01      	subs	r3, #1
 8005f22:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	689b      	ldr	r3, [r3, #8]
 8005f2a:	3b01      	subs	r3, #1
 8005f2c:	025b      	lsls	r3, r3, #9
 8005f2e:	b29b      	uxth	r3, r3
 8005f30:	431a      	orrs	r2, r3
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	68db      	ldr	r3, [r3, #12]
 8005f36:	3b01      	subs	r3, #1
 8005f38:	041b      	lsls	r3, r3, #16
 8005f3a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005f3e:	431a      	orrs	r2, r3
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	691b      	ldr	r3, [r3, #16]
 8005f44:	3b01      	subs	r3, #1
 8005f46:	061b      	lsls	r3, r3, #24
 8005f48:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005f4c:	4931      	ldr	r1, [pc, #196]	; (8006014 <RCCEx_PLL2_Config+0x15c>)
 8005f4e:	4313      	orrs	r3, r2
 8005f50:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8005f52:	4b30      	ldr	r3, [pc, #192]	; (8006014 <RCCEx_PLL2_Config+0x15c>)
 8005f54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f56:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	695b      	ldr	r3, [r3, #20]
 8005f5e:	492d      	ldr	r1, [pc, #180]	; (8006014 <RCCEx_PLL2_Config+0x15c>)
 8005f60:	4313      	orrs	r3, r2
 8005f62:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8005f64:	4b2b      	ldr	r3, [pc, #172]	; (8006014 <RCCEx_PLL2_Config+0x15c>)
 8005f66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f68:	f023 0220 	bic.w	r2, r3, #32
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	699b      	ldr	r3, [r3, #24]
 8005f70:	4928      	ldr	r1, [pc, #160]	; (8006014 <RCCEx_PLL2_Config+0x15c>)
 8005f72:	4313      	orrs	r3, r2
 8005f74:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8005f76:	4b27      	ldr	r3, [pc, #156]	; (8006014 <RCCEx_PLL2_Config+0x15c>)
 8005f78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f7a:	4a26      	ldr	r2, [pc, #152]	; (8006014 <RCCEx_PLL2_Config+0x15c>)
 8005f7c:	f023 0310 	bic.w	r3, r3, #16
 8005f80:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8005f82:	4b24      	ldr	r3, [pc, #144]	; (8006014 <RCCEx_PLL2_Config+0x15c>)
 8005f84:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005f86:	4b24      	ldr	r3, [pc, #144]	; (8006018 <RCCEx_PLL2_Config+0x160>)
 8005f88:	4013      	ands	r3, r2
 8005f8a:	687a      	ldr	r2, [r7, #4]
 8005f8c:	69d2      	ldr	r2, [r2, #28]
 8005f8e:	00d2      	lsls	r2, r2, #3
 8005f90:	4920      	ldr	r1, [pc, #128]	; (8006014 <RCCEx_PLL2_Config+0x15c>)
 8005f92:	4313      	orrs	r3, r2
 8005f94:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8005f96:	4b1f      	ldr	r3, [pc, #124]	; (8006014 <RCCEx_PLL2_Config+0x15c>)
 8005f98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f9a:	4a1e      	ldr	r2, [pc, #120]	; (8006014 <RCCEx_PLL2_Config+0x15c>)
 8005f9c:	f043 0310 	orr.w	r3, r3, #16
 8005fa0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8005fa2:	683b      	ldr	r3, [r7, #0]
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d106      	bne.n	8005fb6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8005fa8:	4b1a      	ldr	r3, [pc, #104]	; (8006014 <RCCEx_PLL2_Config+0x15c>)
 8005faa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fac:	4a19      	ldr	r2, [pc, #100]	; (8006014 <RCCEx_PLL2_Config+0x15c>)
 8005fae:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005fb2:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005fb4:	e00f      	b.n	8005fd6 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8005fb6:	683b      	ldr	r3, [r7, #0]
 8005fb8:	2b01      	cmp	r3, #1
 8005fba:	d106      	bne.n	8005fca <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8005fbc:	4b15      	ldr	r3, [pc, #84]	; (8006014 <RCCEx_PLL2_Config+0x15c>)
 8005fbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fc0:	4a14      	ldr	r2, [pc, #80]	; (8006014 <RCCEx_PLL2_Config+0x15c>)
 8005fc2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005fc6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005fc8:	e005      	b.n	8005fd6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8005fca:	4b12      	ldr	r3, [pc, #72]	; (8006014 <RCCEx_PLL2_Config+0x15c>)
 8005fcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fce:	4a11      	ldr	r2, [pc, #68]	; (8006014 <RCCEx_PLL2_Config+0x15c>)
 8005fd0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005fd4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8005fd6:	4b0f      	ldr	r3, [pc, #60]	; (8006014 <RCCEx_PLL2_Config+0x15c>)
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	4a0e      	ldr	r2, [pc, #56]	; (8006014 <RCCEx_PLL2_Config+0x15c>)
 8005fdc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005fe0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005fe2:	f7fb f815 	bl	8001010 <HAL_GetTick>
 8005fe6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005fe8:	e008      	b.n	8005ffc <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8005fea:	f7fb f811 	bl	8001010 <HAL_GetTick>
 8005fee:	4602      	mov	r2, r0
 8005ff0:	68bb      	ldr	r3, [r7, #8]
 8005ff2:	1ad3      	subs	r3, r2, r3
 8005ff4:	2b02      	cmp	r3, #2
 8005ff6:	d901      	bls.n	8005ffc <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005ff8:	2303      	movs	r3, #3
 8005ffa:	e006      	b.n	800600a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005ffc:	4b05      	ldr	r3, [pc, #20]	; (8006014 <RCCEx_PLL2_Config+0x15c>)
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006004:	2b00      	cmp	r3, #0
 8006006:	d0f0      	beq.n	8005fea <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8006008:	7bfb      	ldrb	r3, [r7, #15]
}
 800600a:	4618      	mov	r0, r3
 800600c:	3710      	adds	r7, #16
 800600e:	46bd      	mov	sp, r7
 8006010:	bd80      	pop	{r7, pc}
 8006012:	bf00      	nop
 8006014:	58024400 	.word	0x58024400
 8006018:	ffff0007 	.word	0xffff0007

0800601c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800601c:	b580      	push	{r7, lr}
 800601e:	b084      	sub	sp, #16
 8006020:	af00      	add	r7, sp, #0
 8006022:	6078      	str	r0, [r7, #4]
 8006024:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006026:	2300      	movs	r3, #0
 8006028:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800602a:	4b53      	ldr	r3, [pc, #332]	; (8006178 <RCCEx_PLL3_Config+0x15c>)
 800602c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800602e:	f003 0303 	and.w	r3, r3, #3
 8006032:	2b03      	cmp	r3, #3
 8006034:	d101      	bne.n	800603a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8006036:	2301      	movs	r3, #1
 8006038:	e099      	b.n	800616e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800603a:	4b4f      	ldr	r3, [pc, #316]	; (8006178 <RCCEx_PLL3_Config+0x15c>)
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	4a4e      	ldr	r2, [pc, #312]	; (8006178 <RCCEx_PLL3_Config+0x15c>)
 8006040:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006044:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006046:	f7fa ffe3 	bl	8001010 <HAL_GetTick>
 800604a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800604c:	e008      	b.n	8006060 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800604e:	f7fa ffdf 	bl	8001010 <HAL_GetTick>
 8006052:	4602      	mov	r2, r0
 8006054:	68bb      	ldr	r3, [r7, #8]
 8006056:	1ad3      	subs	r3, r2, r3
 8006058:	2b02      	cmp	r3, #2
 800605a:	d901      	bls.n	8006060 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800605c:	2303      	movs	r3, #3
 800605e:	e086      	b.n	800616e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006060:	4b45      	ldr	r3, [pc, #276]	; (8006178 <RCCEx_PLL3_Config+0x15c>)
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006068:	2b00      	cmp	r3, #0
 800606a:	d1f0      	bne.n	800604e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800606c:	4b42      	ldr	r3, [pc, #264]	; (8006178 <RCCEx_PLL3_Config+0x15c>)
 800606e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006070:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	051b      	lsls	r3, r3, #20
 800607a:	493f      	ldr	r1, [pc, #252]	; (8006178 <RCCEx_PLL3_Config+0x15c>)
 800607c:	4313      	orrs	r3, r2
 800607e:	628b      	str	r3, [r1, #40]	; 0x28
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	685b      	ldr	r3, [r3, #4]
 8006084:	3b01      	subs	r3, #1
 8006086:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	689b      	ldr	r3, [r3, #8]
 800608e:	3b01      	subs	r3, #1
 8006090:	025b      	lsls	r3, r3, #9
 8006092:	b29b      	uxth	r3, r3
 8006094:	431a      	orrs	r2, r3
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	68db      	ldr	r3, [r3, #12]
 800609a:	3b01      	subs	r3, #1
 800609c:	041b      	lsls	r3, r3, #16
 800609e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80060a2:	431a      	orrs	r2, r3
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	691b      	ldr	r3, [r3, #16]
 80060a8:	3b01      	subs	r3, #1
 80060aa:	061b      	lsls	r3, r3, #24
 80060ac:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80060b0:	4931      	ldr	r1, [pc, #196]	; (8006178 <RCCEx_PLL3_Config+0x15c>)
 80060b2:	4313      	orrs	r3, r2
 80060b4:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80060b6:	4b30      	ldr	r3, [pc, #192]	; (8006178 <RCCEx_PLL3_Config+0x15c>)
 80060b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060ba:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	695b      	ldr	r3, [r3, #20]
 80060c2:	492d      	ldr	r1, [pc, #180]	; (8006178 <RCCEx_PLL3_Config+0x15c>)
 80060c4:	4313      	orrs	r3, r2
 80060c6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80060c8:	4b2b      	ldr	r3, [pc, #172]	; (8006178 <RCCEx_PLL3_Config+0x15c>)
 80060ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060cc:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	699b      	ldr	r3, [r3, #24]
 80060d4:	4928      	ldr	r1, [pc, #160]	; (8006178 <RCCEx_PLL3_Config+0x15c>)
 80060d6:	4313      	orrs	r3, r2
 80060d8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80060da:	4b27      	ldr	r3, [pc, #156]	; (8006178 <RCCEx_PLL3_Config+0x15c>)
 80060dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060de:	4a26      	ldr	r2, [pc, #152]	; (8006178 <RCCEx_PLL3_Config+0x15c>)
 80060e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80060e4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80060e6:	4b24      	ldr	r3, [pc, #144]	; (8006178 <RCCEx_PLL3_Config+0x15c>)
 80060e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80060ea:	4b24      	ldr	r3, [pc, #144]	; (800617c <RCCEx_PLL3_Config+0x160>)
 80060ec:	4013      	ands	r3, r2
 80060ee:	687a      	ldr	r2, [r7, #4]
 80060f0:	69d2      	ldr	r2, [r2, #28]
 80060f2:	00d2      	lsls	r2, r2, #3
 80060f4:	4920      	ldr	r1, [pc, #128]	; (8006178 <RCCEx_PLL3_Config+0x15c>)
 80060f6:	4313      	orrs	r3, r2
 80060f8:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80060fa:	4b1f      	ldr	r3, [pc, #124]	; (8006178 <RCCEx_PLL3_Config+0x15c>)
 80060fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060fe:	4a1e      	ldr	r2, [pc, #120]	; (8006178 <RCCEx_PLL3_Config+0x15c>)
 8006100:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006104:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8006106:	683b      	ldr	r3, [r7, #0]
 8006108:	2b00      	cmp	r3, #0
 800610a:	d106      	bne.n	800611a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800610c:	4b1a      	ldr	r3, [pc, #104]	; (8006178 <RCCEx_PLL3_Config+0x15c>)
 800610e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006110:	4a19      	ldr	r2, [pc, #100]	; (8006178 <RCCEx_PLL3_Config+0x15c>)
 8006112:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006116:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006118:	e00f      	b.n	800613a <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800611a:	683b      	ldr	r3, [r7, #0]
 800611c:	2b01      	cmp	r3, #1
 800611e:	d106      	bne.n	800612e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8006120:	4b15      	ldr	r3, [pc, #84]	; (8006178 <RCCEx_PLL3_Config+0x15c>)
 8006122:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006124:	4a14      	ldr	r2, [pc, #80]	; (8006178 <RCCEx_PLL3_Config+0x15c>)
 8006126:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800612a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800612c:	e005      	b.n	800613a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800612e:	4b12      	ldr	r3, [pc, #72]	; (8006178 <RCCEx_PLL3_Config+0x15c>)
 8006130:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006132:	4a11      	ldr	r2, [pc, #68]	; (8006178 <RCCEx_PLL3_Config+0x15c>)
 8006134:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006138:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800613a:	4b0f      	ldr	r3, [pc, #60]	; (8006178 <RCCEx_PLL3_Config+0x15c>)
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	4a0e      	ldr	r2, [pc, #56]	; (8006178 <RCCEx_PLL3_Config+0x15c>)
 8006140:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006144:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006146:	f7fa ff63 	bl	8001010 <HAL_GetTick>
 800614a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800614c:	e008      	b.n	8006160 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800614e:	f7fa ff5f 	bl	8001010 <HAL_GetTick>
 8006152:	4602      	mov	r2, r0
 8006154:	68bb      	ldr	r3, [r7, #8]
 8006156:	1ad3      	subs	r3, r2, r3
 8006158:	2b02      	cmp	r3, #2
 800615a:	d901      	bls.n	8006160 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800615c:	2303      	movs	r3, #3
 800615e:	e006      	b.n	800616e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006160:	4b05      	ldr	r3, [pc, #20]	; (8006178 <RCCEx_PLL3_Config+0x15c>)
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006168:	2b00      	cmp	r3, #0
 800616a:	d0f0      	beq.n	800614e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800616c:	7bfb      	ldrb	r3, [r7, #15]
}
 800616e:	4618      	mov	r0, r3
 8006170:	3710      	adds	r7, #16
 8006172:	46bd      	mov	sp, r7
 8006174:	bd80      	pop	{r7, pc}
 8006176:	bf00      	nop
 8006178:	58024400 	.word	0x58024400
 800617c:	ffff0007 	.word	0xffff0007

08006180 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006180:	b580      	push	{r7, lr}
 8006182:	b082      	sub	sp, #8
 8006184:	af00      	add	r7, sp, #0
 8006186:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	2b00      	cmp	r3, #0
 800618c:	d101      	bne.n	8006192 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800618e:	2301      	movs	r3, #1
 8006190:	e049      	b.n	8006226 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006198:	b2db      	uxtb	r3, r3
 800619a:	2b00      	cmp	r3, #0
 800619c:	d106      	bne.n	80061ac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	2200      	movs	r2, #0
 80061a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80061a6:	6878      	ldr	r0, [r7, #4]
 80061a8:	f000 f841 	bl	800622e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	2202      	movs	r2, #2
 80061b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681a      	ldr	r2, [r3, #0]
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	3304      	adds	r3, #4
 80061bc:	4619      	mov	r1, r3
 80061be:	4610      	mov	r0, r2
 80061c0:	f000 f9f8 	bl	80065b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	2201      	movs	r2, #1
 80061c8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	2201      	movs	r2, #1
 80061d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	2201      	movs	r2, #1
 80061d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	2201      	movs	r2, #1
 80061e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	2201      	movs	r2, #1
 80061e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	2201      	movs	r2, #1
 80061f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	2201      	movs	r2, #1
 80061f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	2201      	movs	r2, #1
 8006200:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	2201      	movs	r2, #1
 8006208:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	2201      	movs	r2, #1
 8006210:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	2201      	movs	r2, #1
 8006218:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	2201      	movs	r2, #1
 8006220:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006224:	2300      	movs	r3, #0
}
 8006226:	4618      	mov	r0, r3
 8006228:	3708      	adds	r7, #8
 800622a:	46bd      	mov	sp, r7
 800622c:	bd80      	pop	{r7, pc}

0800622e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800622e:	b480      	push	{r7}
 8006230:	b083      	sub	sp, #12
 8006232:	af00      	add	r7, sp, #0
 8006234:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8006236:	bf00      	nop
 8006238:	370c      	adds	r7, #12
 800623a:	46bd      	mov	sp, r7
 800623c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006240:	4770      	bx	lr
	...

08006244 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006244:	b480      	push	{r7}
 8006246:	b085      	sub	sp, #20
 8006248:	af00      	add	r7, sp, #0
 800624a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006252:	b2db      	uxtb	r3, r3
 8006254:	2b01      	cmp	r3, #1
 8006256:	d001      	beq.n	800625c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006258:	2301      	movs	r3, #1
 800625a:	e04f      	b.n	80062fc <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	2202      	movs	r2, #2
 8006260:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	68da      	ldr	r2, [r3, #12]
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	f042 0201 	orr.w	r2, r2, #1
 8006272:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	4a23      	ldr	r2, [pc, #140]	; (8006308 <HAL_TIM_Base_Start_IT+0xc4>)
 800627a:	4293      	cmp	r3, r2
 800627c:	d01d      	beq.n	80062ba <HAL_TIM_Base_Start_IT+0x76>
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006286:	d018      	beq.n	80062ba <HAL_TIM_Base_Start_IT+0x76>
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	4a1f      	ldr	r2, [pc, #124]	; (800630c <HAL_TIM_Base_Start_IT+0xc8>)
 800628e:	4293      	cmp	r3, r2
 8006290:	d013      	beq.n	80062ba <HAL_TIM_Base_Start_IT+0x76>
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	4a1e      	ldr	r2, [pc, #120]	; (8006310 <HAL_TIM_Base_Start_IT+0xcc>)
 8006298:	4293      	cmp	r3, r2
 800629a:	d00e      	beq.n	80062ba <HAL_TIM_Base_Start_IT+0x76>
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	4a1c      	ldr	r2, [pc, #112]	; (8006314 <HAL_TIM_Base_Start_IT+0xd0>)
 80062a2:	4293      	cmp	r3, r2
 80062a4:	d009      	beq.n	80062ba <HAL_TIM_Base_Start_IT+0x76>
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	4a1b      	ldr	r2, [pc, #108]	; (8006318 <HAL_TIM_Base_Start_IT+0xd4>)
 80062ac:	4293      	cmp	r3, r2
 80062ae:	d004      	beq.n	80062ba <HAL_TIM_Base_Start_IT+0x76>
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	4a19      	ldr	r2, [pc, #100]	; (800631c <HAL_TIM_Base_Start_IT+0xd8>)
 80062b6:	4293      	cmp	r3, r2
 80062b8:	d115      	bne.n	80062e6 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	689a      	ldr	r2, [r3, #8]
 80062c0:	4b17      	ldr	r3, [pc, #92]	; (8006320 <HAL_TIM_Base_Start_IT+0xdc>)
 80062c2:	4013      	ands	r3, r2
 80062c4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	2b06      	cmp	r3, #6
 80062ca:	d015      	beq.n	80062f8 <HAL_TIM_Base_Start_IT+0xb4>
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80062d2:	d011      	beq.n	80062f8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	681a      	ldr	r2, [r3, #0]
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	f042 0201 	orr.w	r2, r2, #1
 80062e2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80062e4:	e008      	b.n	80062f8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	681a      	ldr	r2, [r3, #0]
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	f042 0201 	orr.w	r2, r2, #1
 80062f4:	601a      	str	r2, [r3, #0]
 80062f6:	e000      	b.n	80062fa <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80062f8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80062fa:	2300      	movs	r3, #0
}
 80062fc:	4618      	mov	r0, r3
 80062fe:	3714      	adds	r7, #20
 8006300:	46bd      	mov	sp, r7
 8006302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006306:	4770      	bx	lr
 8006308:	40010000 	.word	0x40010000
 800630c:	40000400 	.word	0x40000400
 8006310:	40000800 	.word	0x40000800
 8006314:	40000c00 	.word	0x40000c00
 8006318:	40010400 	.word	0x40010400
 800631c:	40001800 	.word	0x40001800
 8006320:	00010007 	.word	0x00010007

08006324 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006324:	b580      	push	{r7, lr}
 8006326:	b082      	sub	sp, #8
 8006328:	af00      	add	r7, sp, #0
 800632a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	691b      	ldr	r3, [r3, #16]
 8006332:	f003 0302 	and.w	r3, r3, #2
 8006336:	2b02      	cmp	r3, #2
 8006338:	d122      	bne.n	8006380 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	68db      	ldr	r3, [r3, #12]
 8006340:	f003 0302 	and.w	r3, r3, #2
 8006344:	2b02      	cmp	r3, #2
 8006346:	d11b      	bne.n	8006380 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	f06f 0202 	mvn.w	r2, #2
 8006350:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	2201      	movs	r2, #1
 8006356:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	699b      	ldr	r3, [r3, #24]
 800635e:	f003 0303 	and.w	r3, r3, #3
 8006362:	2b00      	cmp	r3, #0
 8006364:	d003      	beq.n	800636e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006366:	6878      	ldr	r0, [r7, #4]
 8006368:	f000 f905 	bl	8006576 <HAL_TIM_IC_CaptureCallback>
 800636c:	e005      	b.n	800637a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800636e:	6878      	ldr	r0, [r7, #4]
 8006370:	f000 f8f7 	bl	8006562 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006374:	6878      	ldr	r0, [r7, #4]
 8006376:	f000 f908 	bl	800658a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	2200      	movs	r2, #0
 800637e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	691b      	ldr	r3, [r3, #16]
 8006386:	f003 0304 	and.w	r3, r3, #4
 800638a:	2b04      	cmp	r3, #4
 800638c:	d122      	bne.n	80063d4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	68db      	ldr	r3, [r3, #12]
 8006394:	f003 0304 	and.w	r3, r3, #4
 8006398:	2b04      	cmp	r3, #4
 800639a:	d11b      	bne.n	80063d4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	f06f 0204 	mvn.w	r2, #4
 80063a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	2202      	movs	r2, #2
 80063aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	699b      	ldr	r3, [r3, #24]
 80063b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d003      	beq.n	80063c2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80063ba:	6878      	ldr	r0, [r7, #4]
 80063bc:	f000 f8db 	bl	8006576 <HAL_TIM_IC_CaptureCallback>
 80063c0:	e005      	b.n	80063ce <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80063c2:	6878      	ldr	r0, [r7, #4]
 80063c4:	f000 f8cd 	bl	8006562 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80063c8:	6878      	ldr	r0, [r7, #4]
 80063ca:	f000 f8de 	bl	800658a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	2200      	movs	r2, #0
 80063d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	691b      	ldr	r3, [r3, #16]
 80063da:	f003 0308 	and.w	r3, r3, #8
 80063de:	2b08      	cmp	r3, #8
 80063e0:	d122      	bne.n	8006428 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	68db      	ldr	r3, [r3, #12]
 80063e8:	f003 0308 	and.w	r3, r3, #8
 80063ec:	2b08      	cmp	r3, #8
 80063ee:	d11b      	bne.n	8006428 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	f06f 0208 	mvn.w	r2, #8
 80063f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	2204      	movs	r2, #4
 80063fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	69db      	ldr	r3, [r3, #28]
 8006406:	f003 0303 	and.w	r3, r3, #3
 800640a:	2b00      	cmp	r3, #0
 800640c:	d003      	beq.n	8006416 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800640e:	6878      	ldr	r0, [r7, #4]
 8006410:	f000 f8b1 	bl	8006576 <HAL_TIM_IC_CaptureCallback>
 8006414:	e005      	b.n	8006422 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006416:	6878      	ldr	r0, [r7, #4]
 8006418:	f000 f8a3 	bl	8006562 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800641c:	6878      	ldr	r0, [r7, #4]
 800641e:	f000 f8b4 	bl	800658a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	2200      	movs	r2, #0
 8006426:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	691b      	ldr	r3, [r3, #16]
 800642e:	f003 0310 	and.w	r3, r3, #16
 8006432:	2b10      	cmp	r3, #16
 8006434:	d122      	bne.n	800647c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	68db      	ldr	r3, [r3, #12]
 800643c:	f003 0310 	and.w	r3, r3, #16
 8006440:	2b10      	cmp	r3, #16
 8006442:	d11b      	bne.n	800647c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	f06f 0210 	mvn.w	r2, #16
 800644c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	2208      	movs	r2, #8
 8006452:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	69db      	ldr	r3, [r3, #28]
 800645a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800645e:	2b00      	cmp	r3, #0
 8006460:	d003      	beq.n	800646a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006462:	6878      	ldr	r0, [r7, #4]
 8006464:	f000 f887 	bl	8006576 <HAL_TIM_IC_CaptureCallback>
 8006468:	e005      	b.n	8006476 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800646a:	6878      	ldr	r0, [r7, #4]
 800646c:	f000 f879 	bl	8006562 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006470:	6878      	ldr	r0, [r7, #4]
 8006472:	f000 f88a 	bl	800658a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	2200      	movs	r2, #0
 800647a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	691b      	ldr	r3, [r3, #16]
 8006482:	f003 0301 	and.w	r3, r3, #1
 8006486:	2b01      	cmp	r3, #1
 8006488:	d10e      	bne.n	80064a8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	68db      	ldr	r3, [r3, #12]
 8006490:	f003 0301 	and.w	r3, r3, #1
 8006494:	2b01      	cmp	r3, #1
 8006496:	d107      	bne.n	80064a8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	f06f 0201 	mvn.w	r2, #1
 80064a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80064a2:	6878      	ldr	r0, [r7, #4]
 80064a4:	f7fa fb16 	bl	8000ad4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	691b      	ldr	r3, [r3, #16]
 80064ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064b2:	2b80      	cmp	r3, #128	; 0x80
 80064b4:	d10e      	bne.n	80064d4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	68db      	ldr	r3, [r3, #12]
 80064bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064c0:	2b80      	cmp	r3, #128	; 0x80
 80064c2:	d107      	bne.n	80064d4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80064cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80064ce:	6878      	ldr	r0, [r7, #4]
 80064d0:	f000 f914 	bl	80066fc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	691b      	ldr	r3, [r3, #16]
 80064da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80064e2:	d10e      	bne.n	8006502 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	68db      	ldr	r3, [r3, #12]
 80064ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064ee:	2b80      	cmp	r3, #128	; 0x80
 80064f0:	d107      	bne.n	8006502 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80064fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80064fc:	6878      	ldr	r0, [r7, #4]
 80064fe:	f000 f907 	bl	8006710 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	691b      	ldr	r3, [r3, #16]
 8006508:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800650c:	2b40      	cmp	r3, #64	; 0x40
 800650e:	d10e      	bne.n	800652e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	68db      	ldr	r3, [r3, #12]
 8006516:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800651a:	2b40      	cmp	r3, #64	; 0x40
 800651c:	d107      	bne.n	800652e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006526:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006528:	6878      	ldr	r0, [r7, #4]
 800652a:	f000 f838 	bl	800659e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	691b      	ldr	r3, [r3, #16]
 8006534:	f003 0320 	and.w	r3, r3, #32
 8006538:	2b20      	cmp	r3, #32
 800653a:	d10e      	bne.n	800655a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	68db      	ldr	r3, [r3, #12]
 8006542:	f003 0320 	and.w	r3, r3, #32
 8006546:	2b20      	cmp	r3, #32
 8006548:	d107      	bne.n	800655a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	f06f 0220 	mvn.w	r2, #32
 8006552:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006554:	6878      	ldr	r0, [r7, #4]
 8006556:	f000 f8c7 	bl	80066e8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800655a:	bf00      	nop
 800655c:	3708      	adds	r7, #8
 800655e:	46bd      	mov	sp, r7
 8006560:	bd80      	pop	{r7, pc}

08006562 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006562:	b480      	push	{r7}
 8006564:	b083      	sub	sp, #12
 8006566:	af00      	add	r7, sp, #0
 8006568:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800656a:	bf00      	nop
 800656c:	370c      	adds	r7, #12
 800656e:	46bd      	mov	sp, r7
 8006570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006574:	4770      	bx	lr

08006576 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006576:	b480      	push	{r7}
 8006578:	b083      	sub	sp, #12
 800657a:	af00      	add	r7, sp, #0
 800657c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800657e:	bf00      	nop
 8006580:	370c      	adds	r7, #12
 8006582:	46bd      	mov	sp, r7
 8006584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006588:	4770      	bx	lr

0800658a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800658a:	b480      	push	{r7}
 800658c:	b083      	sub	sp, #12
 800658e:	af00      	add	r7, sp, #0
 8006590:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006592:	bf00      	nop
 8006594:	370c      	adds	r7, #12
 8006596:	46bd      	mov	sp, r7
 8006598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800659c:	4770      	bx	lr

0800659e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800659e:	b480      	push	{r7}
 80065a0:	b083      	sub	sp, #12
 80065a2:	af00      	add	r7, sp, #0
 80065a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80065a6:	bf00      	nop
 80065a8:	370c      	adds	r7, #12
 80065aa:	46bd      	mov	sp, r7
 80065ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b0:	4770      	bx	lr
	...

080065b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80065b4:	b480      	push	{r7}
 80065b6:	b085      	sub	sp, #20
 80065b8:	af00      	add	r7, sp, #0
 80065ba:	6078      	str	r0, [r7, #4]
 80065bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	4a40      	ldr	r2, [pc, #256]	; (80066c8 <TIM_Base_SetConfig+0x114>)
 80065c8:	4293      	cmp	r3, r2
 80065ca:	d013      	beq.n	80065f4 <TIM_Base_SetConfig+0x40>
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80065d2:	d00f      	beq.n	80065f4 <TIM_Base_SetConfig+0x40>
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	4a3d      	ldr	r2, [pc, #244]	; (80066cc <TIM_Base_SetConfig+0x118>)
 80065d8:	4293      	cmp	r3, r2
 80065da:	d00b      	beq.n	80065f4 <TIM_Base_SetConfig+0x40>
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	4a3c      	ldr	r2, [pc, #240]	; (80066d0 <TIM_Base_SetConfig+0x11c>)
 80065e0:	4293      	cmp	r3, r2
 80065e2:	d007      	beq.n	80065f4 <TIM_Base_SetConfig+0x40>
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	4a3b      	ldr	r2, [pc, #236]	; (80066d4 <TIM_Base_SetConfig+0x120>)
 80065e8:	4293      	cmp	r3, r2
 80065ea:	d003      	beq.n	80065f4 <TIM_Base_SetConfig+0x40>
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	4a3a      	ldr	r2, [pc, #232]	; (80066d8 <TIM_Base_SetConfig+0x124>)
 80065f0:	4293      	cmp	r3, r2
 80065f2:	d108      	bne.n	8006606 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80065fc:	683b      	ldr	r3, [r7, #0]
 80065fe:	685b      	ldr	r3, [r3, #4]
 8006600:	68fa      	ldr	r2, [r7, #12]
 8006602:	4313      	orrs	r3, r2
 8006604:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	4a2f      	ldr	r2, [pc, #188]	; (80066c8 <TIM_Base_SetConfig+0x114>)
 800660a:	4293      	cmp	r3, r2
 800660c:	d01f      	beq.n	800664e <TIM_Base_SetConfig+0x9a>
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006614:	d01b      	beq.n	800664e <TIM_Base_SetConfig+0x9a>
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	4a2c      	ldr	r2, [pc, #176]	; (80066cc <TIM_Base_SetConfig+0x118>)
 800661a:	4293      	cmp	r3, r2
 800661c:	d017      	beq.n	800664e <TIM_Base_SetConfig+0x9a>
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	4a2b      	ldr	r2, [pc, #172]	; (80066d0 <TIM_Base_SetConfig+0x11c>)
 8006622:	4293      	cmp	r3, r2
 8006624:	d013      	beq.n	800664e <TIM_Base_SetConfig+0x9a>
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	4a2a      	ldr	r2, [pc, #168]	; (80066d4 <TIM_Base_SetConfig+0x120>)
 800662a:	4293      	cmp	r3, r2
 800662c:	d00f      	beq.n	800664e <TIM_Base_SetConfig+0x9a>
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	4a29      	ldr	r2, [pc, #164]	; (80066d8 <TIM_Base_SetConfig+0x124>)
 8006632:	4293      	cmp	r3, r2
 8006634:	d00b      	beq.n	800664e <TIM_Base_SetConfig+0x9a>
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	4a28      	ldr	r2, [pc, #160]	; (80066dc <TIM_Base_SetConfig+0x128>)
 800663a:	4293      	cmp	r3, r2
 800663c:	d007      	beq.n	800664e <TIM_Base_SetConfig+0x9a>
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	4a27      	ldr	r2, [pc, #156]	; (80066e0 <TIM_Base_SetConfig+0x12c>)
 8006642:	4293      	cmp	r3, r2
 8006644:	d003      	beq.n	800664e <TIM_Base_SetConfig+0x9a>
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	4a26      	ldr	r2, [pc, #152]	; (80066e4 <TIM_Base_SetConfig+0x130>)
 800664a:	4293      	cmp	r3, r2
 800664c:	d108      	bne.n	8006660 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006654:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006656:	683b      	ldr	r3, [r7, #0]
 8006658:	68db      	ldr	r3, [r3, #12]
 800665a:	68fa      	ldr	r2, [r7, #12]
 800665c:	4313      	orrs	r3, r2
 800665e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006666:	683b      	ldr	r3, [r7, #0]
 8006668:	695b      	ldr	r3, [r3, #20]
 800666a:	4313      	orrs	r3, r2
 800666c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	68fa      	ldr	r2, [r7, #12]
 8006672:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006674:	683b      	ldr	r3, [r7, #0]
 8006676:	689a      	ldr	r2, [r3, #8]
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800667c:	683b      	ldr	r3, [r7, #0]
 800667e:	681a      	ldr	r2, [r3, #0]
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	4a10      	ldr	r2, [pc, #64]	; (80066c8 <TIM_Base_SetConfig+0x114>)
 8006688:	4293      	cmp	r3, r2
 800668a:	d00f      	beq.n	80066ac <TIM_Base_SetConfig+0xf8>
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	4a12      	ldr	r2, [pc, #72]	; (80066d8 <TIM_Base_SetConfig+0x124>)
 8006690:	4293      	cmp	r3, r2
 8006692:	d00b      	beq.n	80066ac <TIM_Base_SetConfig+0xf8>
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	4a11      	ldr	r2, [pc, #68]	; (80066dc <TIM_Base_SetConfig+0x128>)
 8006698:	4293      	cmp	r3, r2
 800669a:	d007      	beq.n	80066ac <TIM_Base_SetConfig+0xf8>
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	4a10      	ldr	r2, [pc, #64]	; (80066e0 <TIM_Base_SetConfig+0x12c>)
 80066a0:	4293      	cmp	r3, r2
 80066a2:	d003      	beq.n	80066ac <TIM_Base_SetConfig+0xf8>
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	4a0f      	ldr	r2, [pc, #60]	; (80066e4 <TIM_Base_SetConfig+0x130>)
 80066a8:	4293      	cmp	r3, r2
 80066aa:	d103      	bne.n	80066b4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80066ac:	683b      	ldr	r3, [r7, #0]
 80066ae:	691a      	ldr	r2, [r3, #16]
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	2201      	movs	r2, #1
 80066b8:	615a      	str	r2, [r3, #20]
}
 80066ba:	bf00      	nop
 80066bc:	3714      	adds	r7, #20
 80066be:	46bd      	mov	sp, r7
 80066c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c4:	4770      	bx	lr
 80066c6:	bf00      	nop
 80066c8:	40010000 	.word	0x40010000
 80066cc:	40000400 	.word	0x40000400
 80066d0:	40000800 	.word	0x40000800
 80066d4:	40000c00 	.word	0x40000c00
 80066d8:	40010400 	.word	0x40010400
 80066dc:	40014000 	.word	0x40014000
 80066e0:	40014400 	.word	0x40014400
 80066e4:	40014800 	.word	0x40014800

080066e8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80066e8:	b480      	push	{r7}
 80066ea:	b083      	sub	sp, #12
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80066f0:	bf00      	nop
 80066f2:	370c      	adds	r7, #12
 80066f4:	46bd      	mov	sp, r7
 80066f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066fa:	4770      	bx	lr

080066fc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80066fc:	b480      	push	{r7}
 80066fe:	b083      	sub	sp, #12
 8006700:	af00      	add	r7, sp, #0
 8006702:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006704:	bf00      	nop
 8006706:	370c      	adds	r7, #12
 8006708:	46bd      	mov	sp, r7
 800670a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670e:	4770      	bx	lr

08006710 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006710:	b480      	push	{r7}
 8006712:	b083      	sub	sp, #12
 8006714:	af00      	add	r7, sp, #0
 8006716:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006718:	bf00      	nop
 800671a:	370c      	adds	r7, #12
 800671c:	46bd      	mov	sp, r7
 800671e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006722:	4770      	bx	lr

08006724 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006724:	b580      	push	{r7, lr}
 8006726:	b082      	sub	sp, #8
 8006728:	af00      	add	r7, sp, #0
 800672a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	2b00      	cmp	r3, #0
 8006730:	d101      	bne.n	8006736 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006732:	2301      	movs	r3, #1
 8006734:	e042      	b.n	80067bc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800673c:	2b00      	cmp	r3, #0
 800673e:	d106      	bne.n	800674e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	2200      	movs	r2, #0
 8006744:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006748:	6878      	ldr	r0, [r7, #4]
 800674a:	f7fa fb15 	bl	8000d78 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	2224      	movs	r2, #36	; 0x24
 8006752:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	681a      	ldr	r2, [r3, #0]
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	f022 0201 	bic.w	r2, r2, #1
 8006764:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006766:	6878      	ldr	r0, [r7, #4]
 8006768:	f000 fb06 	bl	8006d78 <UART_SetConfig>
 800676c:	4603      	mov	r3, r0
 800676e:	2b01      	cmp	r3, #1
 8006770:	d101      	bne.n	8006776 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8006772:	2301      	movs	r3, #1
 8006774:	e022      	b.n	80067bc <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800677a:	2b00      	cmp	r3, #0
 800677c:	d002      	beq.n	8006784 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800677e:	6878      	ldr	r0, [r7, #4]
 8006780:	f001 f85a 	bl	8007838 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	685a      	ldr	r2, [r3, #4]
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006792:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	689a      	ldr	r2, [r3, #8]
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80067a2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	681a      	ldr	r2, [r3, #0]
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	f042 0201 	orr.w	r2, r2, #1
 80067b2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80067b4:	6878      	ldr	r0, [r7, #4]
 80067b6:	f001 f8e1 	bl	800797c <UART_CheckIdleState>
 80067ba:	4603      	mov	r3, r0
}
 80067bc:	4618      	mov	r0, r3
 80067be:	3708      	adds	r7, #8
 80067c0:	46bd      	mov	sp, r7
 80067c2:	bd80      	pop	{r7, pc}

080067c4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80067c4:	b580      	push	{r7, lr}
 80067c6:	b088      	sub	sp, #32
 80067c8:	af00      	add	r7, sp, #0
 80067ca:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	69db      	ldr	r3, [r3, #28]
 80067d2:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	689b      	ldr	r3, [r3, #8]
 80067e2:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80067e4:	69fa      	ldr	r2, [r7, #28]
 80067e6:	f640 030f 	movw	r3, #2063	; 0x80f
 80067ea:	4013      	ands	r3, r2
 80067ec:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 80067ee:	693b      	ldr	r3, [r7, #16]
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d118      	bne.n	8006826 <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80067f4:	69fb      	ldr	r3, [r7, #28]
 80067f6:	f003 0320 	and.w	r3, r3, #32
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d013      	beq.n	8006826 <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80067fe:	69bb      	ldr	r3, [r7, #24]
 8006800:	f003 0320 	and.w	r3, r3, #32
 8006804:	2b00      	cmp	r3, #0
 8006806:	d104      	bne.n	8006812 <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006808:	697b      	ldr	r3, [r7, #20]
 800680a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800680e:	2b00      	cmp	r3, #0
 8006810:	d009      	beq.n	8006826 <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006816:	2b00      	cmp	r3, #0
 8006818:	f000 8282 	beq.w	8006d20 <HAL_UART_IRQHandler+0x55c>
      {
        huart->RxISR(huart);
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006820:	6878      	ldr	r0, [r7, #4]
 8006822:	4798      	blx	r3
      }
      return;
 8006824:	e27c      	b.n	8006d20 <HAL_UART_IRQHandler+0x55c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006826:	693b      	ldr	r3, [r7, #16]
 8006828:	2b00      	cmp	r3, #0
 800682a:	f000 80ef 	beq.w	8006a0c <HAL_UART_IRQHandler+0x248>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800682e:	697a      	ldr	r2, [r7, #20]
 8006830:	4b73      	ldr	r3, [pc, #460]	; (8006a00 <HAL_UART_IRQHandler+0x23c>)
 8006832:	4013      	ands	r3, r2
 8006834:	2b00      	cmp	r3, #0
 8006836:	d105      	bne.n	8006844 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8006838:	69ba      	ldr	r2, [r7, #24]
 800683a:	4b72      	ldr	r3, [pc, #456]	; (8006a04 <HAL_UART_IRQHandler+0x240>)
 800683c:	4013      	ands	r3, r2
 800683e:	2b00      	cmp	r3, #0
 8006840:	f000 80e4 	beq.w	8006a0c <HAL_UART_IRQHandler+0x248>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006844:	69fb      	ldr	r3, [r7, #28]
 8006846:	f003 0301 	and.w	r3, r3, #1
 800684a:	2b00      	cmp	r3, #0
 800684c:	d010      	beq.n	8006870 <HAL_UART_IRQHandler+0xac>
 800684e:	69bb      	ldr	r3, [r7, #24]
 8006850:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006854:	2b00      	cmp	r3, #0
 8006856:	d00b      	beq.n	8006870 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	2201      	movs	r2, #1
 800685e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006866:	f043 0201 	orr.w	r2, r3, #1
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006870:	69fb      	ldr	r3, [r7, #28]
 8006872:	f003 0302 	and.w	r3, r3, #2
 8006876:	2b00      	cmp	r3, #0
 8006878:	d010      	beq.n	800689c <HAL_UART_IRQHandler+0xd8>
 800687a:	697b      	ldr	r3, [r7, #20]
 800687c:	f003 0301 	and.w	r3, r3, #1
 8006880:	2b00      	cmp	r3, #0
 8006882:	d00b      	beq.n	800689c <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	2202      	movs	r2, #2
 800688a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006892:	f043 0204 	orr.w	r2, r3, #4
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800689c:	69fb      	ldr	r3, [r7, #28]
 800689e:	f003 0304 	and.w	r3, r3, #4
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d010      	beq.n	80068c8 <HAL_UART_IRQHandler+0x104>
 80068a6:	697b      	ldr	r3, [r7, #20]
 80068a8:	f003 0301 	and.w	r3, r3, #1
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d00b      	beq.n	80068c8 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	2204      	movs	r2, #4
 80068b6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80068be:	f043 0202 	orr.w	r2, r3, #2
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80068c8:	69fb      	ldr	r3, [r7, #28]
 80068ca:	f003 0308 	and.w	r3, r3, #8
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d015      	beq.n	80068fe <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80068d2:	69bb      	ldr	r3, [r7, #24]
 80068d4:	f003 0320 	and.w	r3, r3, #32
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d104      	bne.n	80068e6 <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80068dc:	697a      	ldr	r2, [r7, #20]
 80068de:	4b48      	ldr	r3, [pc, #288]	; (8006a00 <HAL_UART_IRQHandler+0x23c>)
 80068e0:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d00b      	beq.n	80068fe <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	2208      	movs	r2, #8
 80068ec:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80068f4:	f043 0208 	orr.w	r2, r3, #8
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80068fe:	69fb      	ldr	r3, [r7, #28]
 8006900:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006904:	2b00      	cmp	r3, #0
 8006906:	d011      	beq.n	800692c <HAL_UART_IRQHandler+0x168>
 8006908:	69bb      	ldr	r3, [r7, #24]
 800690a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800690e:	2b00      	cmp	r3, #0
 8006910:	d00c      	beq.n	800692c <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800691a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006922:	f043 0220 	orr.w	r2, r3, #32
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006932:	2b00      	cmp	r3, #0
 8006934:	f000 81f6 	beq.w	8006d24 <HAL_UART_IRQHandler+0x560>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006938:	69fb      	ldr	r3, [r7, #28]
 800693a:	f003 0320 	and.w	r3, r3, #32
 800693e:	2b00      	cmp	r3, #0
 8006940:	d011      	beq.n	8006966 <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006942:	69bb      	ldr	r3, [r7, #24]
 8006944:	f003 0320 	and.w	r3, r3, #32
 8006948:	2b00      	cmp	r3, #0
 800694a:	d104      	bne.n	8006956 <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800694c:	697b      	ldr	r3, [r7, #20]
 800694e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006952:	2b00      	cmp	r3, #0
 8006954:	d007      	beq.n	8006966 <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800695a:	2b00      	cmp	r3, #0
 800695c:	d003      	beq.n	8006966 <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006962:	6878      	ldr	r0, [r7, #4]
 8006964:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800696c:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	689b      	ldr	r3, [r3, #8]
 8006974:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006978:	2b40      	cmp	r3, #64	; 0x40
 800697a:	d004      	beq.n	8006986 <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006982:	2b00      	cmp	r3, #0
 8006984:	d031      	beq.n	80069ea <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006986:	6878      	ldr	r0, [r7, #4]
 8006988:	f001 f8c4 	bl	8007b14 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	689b      	ldr	r3, [r3, #8]
 8006992:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006996:	2b40      	cmp	r3, #64	; 0x40
 8006998:	d123      	bne.n	80069e2 <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	689a      	ldr	r2, [r3, #8]
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80069a8:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d013      	beq.n	80069da <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80069b6:	4a14      	ldr	r2, [pc, #80]	; (8006a08 <HAL_UART_IRQHandler+0x244>)
 80069b8:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80069be:	4618      	mov	r0, r3
 80069c0:	f7fb fa98 	bl	8001ef4 <HAL_DMA_Abort_IT>
 80069c4:	4603      	mov	r3, r0
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d017      	beq.n	80069fa <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80069ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80069d0:	687a      	ldr	r2, [r7, #4]
 80069d2:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 80069d4:	4610      	mov	r0, r2
 80069d6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80069d8:	e00f      	b.n	80069fa <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80069da:	6878      	ldr	r0, [r7, #4]
 80069dc:	f000 f9b6 	bl	8006d4c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80069e0:	e00b      	b.n	80069fa <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80069e2:	6878      	ldr	r0, [r7, #4]
 80069e4:	f000 f9b2 	bl	8006d4c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80069e8:	e007      	b.n	80069fa <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80069ea:	6878      	ldr	r0, [r7, #4]
 80069ec:	f000 f9ae 	bl	8006d4c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	2200      	movs	r2, #0
 80069f4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 80069f8:	e194      	b.n	8006d24 <HAL_UART_IRQHandler+0x560>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80069fa:	bf00      	nop
    return;
 80069fc:	e192      	b.n	8006d24 <HAL_UART_IRQHandler+0x560>
 80069fe:	bf00      	nop
 8006a00:	10000001 	.word	0x10000001
 8006a04:	04000120 	.word	0x04000120
 8006a08:	08007b79 	.word	0x08007b79

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006a10:	2b01      	cmp	r3, #1
 8006a12:	f040 810f 	bne.w	8006c34 <HAL_UART_IRQHandler+0x470>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006a16:	69fb      	ldr	r3, [r7, #28]
 8006a18:	f003 0310 	and.w	r3, r3, #16
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	f000 8109 	beq.w	8006c34 <HAL_UART_IRQHandler+0x470>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006a22:	69bb      	ldr	r3, [r7, #24]
 8006a24:	f003 0310 	and.w	r3, r3, #16
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	f000 8103 	beq.w	8006c34 <HAL_UART_IRQHandler+0x470>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	2210      	movs	r2, #16
 8006a34:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	689b      	ldr	r3, [r3, #8]
 8006a3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a40:	2b40      	cmp	r3, #64	; 0x40
 8006a42:	f040 80bb 	bne.w	8006bbc <HAL_UART_IRQHandler+0x3f8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	4a96      	ldr	r2, [pc, #600]	; (8006ca8 <HAL_UART_IRQHandler+0x4e4>)
 8006a4e:	4293      	cmp	r3, r2
 8006a50:	d059      	beq.n	8006b06 <HAL_UART_IRQHandler+0x342>
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	4a94      	ldr	r2, [pc, #592]	; (8006cac <HAL_UART_IRQHandler+0x4e8>)
 8006a5a:	4293      	cmp	r3, r2
 8006a5c:	d053      	beq.n	8006b06 <HAL_UART_IRQHandler+0x342>
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	4a92      	ldr	r2, [pc, #584]	; (8006cb0 <HAL_UART_IRQHandler+0x4ec>)
 8006a66:	4293      	cmp	r3, r2
 8006a68:	d04d      	beq.n	8006b06 <HAL_UART_IRQHandler+0x342>
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	4a90      	ldr	r2, [pc, #576]	; (8006cb4 <HAL_UART_IRQHandler+0x4f0>)
 8006a72:	4293      	cmp	r3, r2
 8006a74:	d047      	beq.n	8006b06 <HAL_UART_IRQHandler+0x342>
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	4a8e      	ldr	r2, [pc, #568]	; (8006cb8 <HAL_UART_IRQHandler+0x4f4>)
 8006a7e:	4293      	cmp	r3, r2
 8006a80:	d041      	beq.n	8006b06 <HAL_UART_IRQHandler+0x342>
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	4a8c      	ldr	r2, [pc, #560]	; (8006cbc <HAL_UART_IRQHandler+0x4f8>)
 8006a8a:	4293      	cmp	r3, r2
 8006a8c:	d03b      	beq.n	8006b06 <HAL_UART_IRQHandler+0x342>
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	4a8a      	ldr	r2, [pc, #552]	; (8006cc0 <HAL_UART_IRQHandler+0x4fc>)
 8006a96:	4293      	cmp	r3, r2
 8006a98:	d035      	beq.n	8006b06 <HAL_UART_IRQHandler+0x342>
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	4a88      	ldr	r2, [pc, #544]	; (8006cc4 <HAL_UART_IRQHandler+0x500>)
 8006aa2:	4293      	cmp	r3, r2
 8006aa4:	d02f      	beq.n	8006b06 <HAL_UART_IRQHandler+0x342>
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	4a86      	ldr	r2, [pc, #536]	; (8006cc8 <HAL_UART_IRQHandler+0x504>)
 8006aae:	4293      	cmp	r3, r2
 8006ab0:	d029      	beq.n	8006b06 <HAL_UART_IRQHandler+0x342>
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	4a84      	ldr	r2, [pc, #528]	; (8006ccc <HAL_UART_IRQHandler+0x508>)
 8006aba:	4293      	cmp	r3, r2
 8006abc:	d023      	beq.n	8006b06 <HAL_UART_IRQHandler+0x342>
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	4a82      	ldr	r2, [pc, #520]	; (8006cd0 <HAL_UART_IRQHandler+0x50c>)
 8006ac6:	4293      	cmp	r3, r2
 8006ac8:	d01d      	beq.n	8006b06 <HAL_UART_IRQHandler+0x342>
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	4a80      	ldr	r2, [pc, #512]	; (8006cd4 <HAL_UART_IRQHandler+0x510>)
 8006ad2:	4293      	cmp	r3, r2
 8006ad4:	d017      	beq.n	8006b06 <HAL_UART_IRQHandler+0x342>
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	4a7e      	ldr	r2, [pc, #504]	; (8006cd8 <HAL_UART_IRQHandler+0x514>)
 8006ade:	4293      	cmp	r3, r2
 8006ae0:	d011      	beq.n	8006b06 <HAL_UART_IRQHandler+0x342>
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	4a7c      	ldr	r2, [pc, #496]	; (8006cdc <HAL_UART_IRQHandler+0x518>)
 8006aea:	4293      	cmp	r3, r2
 8006aec:	d00b      	beq.n	8006b06 <HAL_UART_IRQHandler+0x342>
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	4a7a      	ldr	r2, [pc, #488]	; (8006ce0 <HAL_UART_IRQHandler+0x51c>)
 8006af6:	4293      	cmp	r3, r2
 8006af8:	d005      	beq.n	8006b06 <HAL_UART_IRQHandler+0x342>
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	4a78      	ldr	r2, [pc, #480]	; (8006ce4 <HAL_UART_IRQHandler+0x520>)
 8006b02:	4293      	cmp	r3, r2
 8006b04:	d105      	bne.n	8006b12 <HAL_UART_IRQHandler+0x34e>
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	685b      	ldr	r3, [r3, #4]
 8006b0e:	b29b      	uxth	r3, r3
 8006b10:	e004      	b.n	8006b1c <HAL_UART_IRQHandler+0x358>
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	685b      	ldr	r3, [r3, #4]
 8006b1a:	b29b      	uxth	r3, r3
 8006b1c:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 8006b1e:	893b      	ldrh	r3, [r7, #8]
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	f000 8101 	beq.w	8006d28 <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006b2c:	893a      	ldrh	r2, [r7, #8]
 8006b2e:	429a      	cmp	r2, r3
 8006b30:	f080 80fa 	bcs.w	8006d28 <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	893a      	ldrh	r2, [r7, #8]
 8006b38:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006b40:	69db      	ldr	r3, [r3, #28]
 8006b42:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006b46:	d02b      	beq.n	8006ba0 <HAL_UART_IRQHandler+0x3dc>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	681a      	ldr	r2, [r3, #0]
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006b56:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	689a      	ldr	r2, [r3, #8]
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	f022 0201 	bic.w	r2, r2, #1
 8006b66:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	689a      	ldr	r2, [r3, #8]
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006b76:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	2220      	movs	r2, #32
 8006b7c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	2200      	movs	r2, #0
 8006b84:	66da      	str	r2, [r3, #108]	; 0x6c

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	681a      	ldr	r2, [r3, #0]
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	f022 0210 	bic.w	r2, r2, #16
 8006b94:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006b9a:	4618      	mov	r0, r3
 8006b9c:	f7fa fe8c 	bl	80018b8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006bac:	b29b      	uxth	r3, r3
 8006bae:	1ad3      	subs	r3, r2, r3
 8006bb0:	b29b      	uxth	r3, r3
 8006bb2:	4619      	mov	r1, r3
 8006bb4:	6878      	ldr	r0, [r7, #4]
 8006bb6:	f000 f8d3 	bl	8006d60 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006bba:	e0b5      	b.n	8006d28 <HAL_UART_IRQHandler+0x564>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006bc8:	b29b      	uxth	r3, r3
 8006bca:	1ad3      	subs	r3, r2, r3
 8006bcc:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006bd4:	b29b      	uxth	r3, r3
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	f000 80a8 	beq.w	8006d2c <HAL_UART_IRQHandler+0x568>
          && (nb_rx_data > 0U))
 8006bdc:	897b      	ldrh	r3, [r7, #10]
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	f000 80a4 	beq.w	8006d2c <HAL_UART_IRQHandler+0x568>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	681a      	ldr	r2, [r3, #0]
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006bf2:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	6899      	ldr	r1, [r3, #8]
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681a      	ldr	r2, [r3, #0]
 8006bfe:	4b3a      	ldr	r3, [pc, #232]	; (8006ce8 <HAL_UART_IRQHandler+0x524>)
 8006c00:	400b      	ands	r3, r1
 8006c02:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	2220      	movs	r2, #32
 8006c08:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	2200      	movs	r2, #0
 8006c10:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	2200      	movs	r2, #0
 8006c16:	671a      	str	r2, [r3, #112]	; 0x70

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	681a      	ldr	r2, [r3, #0]
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	f022 0210 	bic.w	r2, r2, #16
 8006c26:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006c28:	897b      	ldrh	r3, [r7, #10]
 8006c2a:	4619      	mov	r1, r3
 8006c2c:	6878      	ldr	r0, [r7, #4]
 8006c2e:	f000 f897 	bl	8006d60 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006c32:	e07b      	b.n	8006d2c <HAL_UART_IRQHandler+0x568>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006c34:	69fb      	ldr	r3, [r7, #28]
 8006c36:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d00d      	beq.n	8006c5a <HAL_UART_IRQHandler+0x496>
 8006c3e:	697b      	ldr	r3, [r7, #20]
 8006c40:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d008      	beq.n	8006c5a <HAL_UART_IRQHandler+0x496>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006c50:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006c52:	6878      	ldr	r0, [r7, #4]
 8006c54:	f000 ffc0 	bl	8007bd8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006c58:	e06b      	b.n	8006d32 <HAL_UART_IRQHandler+0x56e>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8006c5a:	69fb      	ldr	r3, [r7, #28]
 8006c5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d012      	beq.n	8006c8a <HAL_UART_IRQHandler+0x4c6>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8006c64:	69bb      	ldr	r3, [r7, #24]
 8006c66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d104      	bne.n	8006c78 <HAL_UART_IRQHandler+0x4b4>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8006c6e:	697b      	ldr	r3, [r7, #20]
 8006c70:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d008      	beq.n	8006c8a <HAL_UART_IRQHandler+0x4c6>
  {
    if (huart->TxISR != NULL)
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d057      	beq.n	8006d30 <HAL_UART_IRQHandler+0x56c>
    {
      huart->TxISR(huart);
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006c84:	6878      	ldr	r0, [r7, #4]
 8006c86:	4798      	blx	r3
    }
    return;
 8006c88:	e052      	b.n	8006d30 <HAL_UART_IRQHandler+0x56c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006c8a:	69fb      	ldr	r3, [r7, #28]
 8006c8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d02b      	beq.n	8006cec <HAL_UART_IRQHandler+0x528>
 8006c94:	69bb      	ldr	r3, [r7, #24]
 8006c96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d026      	beq.n	8006cec <HAL_UART_IRQHandler+0x528>
  {
    UART_EndTransmit_IT(huart);
 8006c9e:	6878      	ldr	r0, [r7, #4]
 8006ca0:	f000 ff80 	bl	8007ba4 <UART_EndTransmit_IT>
    return;
 8006ca4:	e045      	b.n	8006d32 <HAL_UART_IRQHandler+0x56e>
 8006ca6:	bf00      	nop
 8006ca8:	40020010 	.word	0x40020010
 8006cac:	40020028 	.word	0x40020028
 8006cb0:	40020040 	.word	0x40020040
 8006cb4:	40020058 	.word	0x40020058
 8006cb8:	40020070 	.word	0x40020070
 8006cbc:	40020088 	.word	0x40020088
 8006cc0:	400200a0 	.word	0x400200a0
 8006cc4:	400200b8 	.word	0x400200b8
 8006cc8:	40020410 	.word	0x40020410
 8006ccc:	40020428 	.word	0x40020428
 8006cd0:	40020440 	.word	0x40020440
 8006cd4:	40020458 	.word	0x40020458
 8006cd8:	40020470 	.word	0x40020470
 8006cdc:	40020488 	.word	0x40020488
 8006ce0:	400204a0 	.word	0x400204a0
 8006ce4:	400204b8 	.word	0x400204b8
 8006ce8:	effffffe 	.word	0xeffffffe
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8006cec:	69fb      	ldr	r3, [r7, #28]
 8006cee:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d008      	beq.n	8006d08 <HAL_UART_IRQHandler+0x544>
 8006cf6:	69bb      	ldr	r3, [r7, #24]
 8006cf8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d003      	beq.n	8006d08 <HAL_UART_IRQHandler+0x544>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8006d00:	6878      	ldr	r0, [r7, #4]
 8006d02:	f000 ff7d 	bl	8007c00 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006d06:	e014      	b.n	8006d32 <HAL_UART_IRQHandler+0x56e>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8006d08:	69fb      	ldr	r3, [r7, #28]
 8006d0a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d00f      	beq.n	8006d32 <HAL_UART_IRQHandler+0x56e>
 8006d12:	69bb      	ldr	r3, [r7, #24]
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	da0c      	bge.n	8006d32 <HAL_UART_IRQHandler+0x56e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8006d18:	6878      	ldr	r0, [r7, #4]
 8006d1a:	f000 ff67 	bl	8007bec <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006d1e:	e008      	b.n	8006d32 <HAL_UART_IRQHandler+0x56e>
      return;
 8006d20:	bf00      	nop
 8006d22:	e006      	b.n	8006d32 <HAL_UART_IRQHandler+0x56e>
    return;
 8006d24:	bf00      	nop
 8006d26:	e004      	b.n	8006d32 <HAL_UART_IRQHandler+0x56e>
      return;
 8006d28:	bf00      	nop
 8006d2a:	e002      	b.n	8006d32 <HAL_UART_IRQHandler+0x56e>
      return;
 8006d2c:	bf00      	nop
 8006d2e:	e000      	b.n	8006d32 <HAL_UART_IRQHandler+0x56e>
    return;
 8006d30:	bf00      	nop
  }
}
 8006d32:	3720      	adds	r7, #32
 8006d34:	46bd      	mov	sp, r7
 8006d36:	bd80      	pop	{r7, pc}

08006d38 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006d38:	b480      	push	{r7}
 8006d3a:	b083      	sub	sp, #12
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006d40:	bf00      	nop
 8006d42:	370c      	adds	r7, #12
 8006d44:	46bd      	mov	sp, r7
 8006d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d4a:	4770      	bx	lr

08006d4c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006d4c:	b480      	push	{r7}
 8006d4e:	b083      	sub	sp, #12
 8006d50:	af00      	add	r7, sp, #0
 8006d52:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006d54:	bf00      	nop
 8006d56:	370c      	adds	r7, #12
 8006d58:	46bd      	mov	sp, r7
 8006d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d5e:	4770      	bx	lr

08006d60 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006d60:	b480      	push	{r7}
 8006d62:	b083      	sub	sp, #12
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	6078      	str	r0, [r7, #4]
 8006d68:	460b      	mov	r3, r1
 8006d6a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006d6c:	bf00      	nop
 8006d6e:	370c      	adds	r7, #12
 8006d70:	46bd      	mov	sp, r7
 8006d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d76:	4770      	bx	lr

08006d78 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006d78:	b5b0      	push	{r4, r5, r7, lr}
 8006d7a:	b08e      	sub	sp, #56	; 0x38
 8006d7c:	af00      	add	r7, sp, #0
 8006d7e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006d80:	2300      	movs	r3, #0
 8006d82:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	689a      	ldr	r2, [r3, #8]
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	691b      	ldr	r3, [r3, #16]
 8006d8e:	431a      	orrs	r2, r3
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	695b      	ldr	r3, [r3, #20]
 8006d94:	431a      	orrs	r2, r3
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	69db      	ldr	r3, [r3, #28]
 8006d9a:	4313      	orrs	r3, r2
 8006d9c:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	681a      	ldr	r2, [r3, #0]
 8006da4:	4bbf      	ldr	r3, [pc, #764]	; (80070a4 <UART_SetConfig+0x32c>)
 8006da6:	4013      	ands	r3, r2
 8006da8:	687a      	ldr	r2, [r7, #4]
 8006daa:	6812      	ldr	r2, [r2, #0]
 8006dac:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006dae:	430b      	orrs	r3, r1
 8006db0:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	685b      	ldr	r3, [r3, #4]
 8006db8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	68da      	ldr	r2, [r3, #12]
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	430a      	orrs	r2, r1
 8006dc6:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	699b      	ldr	r3, [r3, #24]
 8006dcc:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	4ab5      	ldr	r2, [pc, #724]	; (80070a8 <UART_SetConfig+0x330>)
 8006dd4:	4293      	cmp	r3, r2
 8006dd6:	d004      	beq.n	8006de2 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	6a1b      	ldr	r3, [r3, #32]
 8006ddc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006dde:	4313      	orrs	r3, r2
 8006de0:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	689a      	ldr	r2, [r3, #8]
 8006de8:	4bb0      	ldr	r3, [pc, #704]	; (80070ac <UART_SetConfig+0x334>)
 8006dea:	4013      	ands	r3, r2
 8006dec:	687a      	ldr	r2, [r7, #4]
 8006dee:	6812      	ldr	r2, [r2, #0]
 8006df0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006df2:	430b      	orrs	r3, r1
 8006df4:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dfc:	f023 010f 	bic.w	r1, r3, #15
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	430a      	orrs	r2, r1
 8006e0a:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	4aa7      	ldr	r2, [pc, #668]	; (80070b0 <UART_SetConfig+0x338>)
 8006e12:	4293      	cmp	r3, r2
 8006e14:	d176      	bne.n	8006f04 <UART_SetConfig+0x18c>
 8006e16:	4ba7      	ldr	r3, [pc, #668]	; (80070b4 <UART_SetConfig+0x33c>)
 8006e18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e1a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006e1e:	2b28      	cmp	r3, #40	; 0x28
 8006e20:	d86c      	bhi.n	8006efc <UART_SetConfig+0x184>
 8006e22:	a201      	add	r2, pc, #4	; (adr r2, 8006e28 <UART_SetConfig+0xb0>)
 8006e24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e28:	08006ecd 	.word	0x08006ecd
 8006e2c:	08006efd 	.word	0x08006efd
 8006e30:	08006efd 	.word	0x08006efd
 8006e34:	08006efd 	.word	0x08006efd
 8006e38:	08006efd 	.word	0x08006efd
 8006e3c:	08006efd 	.word	0x08006efd
 8006e40:	08006efd 	.word	0x08006efd
 8006e44:	08006efd 	.word	0x08006efd
 8006e48:	08006ed5 	.word	0x08006ed5
 8006e4c:	08006efd 	.word	0x08006efd
 8006e50:	08006efd 	.word	0x08006efd
 8006e54:	08006efd 	.word	0x08006efd
 8006e58:	08006efd 	.word	0x08006efd
 8006e5c:	08006efd 	.word	0x08006efd
 8006e60:	08006efd 	.word	0x08006efd
 8006e64:	08006efd 	.word	0x08006efd
 8006e68:	08006edd 	.word	0x08006edd
 8006e6c:	08006efd 	.word	0x08006efd
 8006e70:	08006efd 	.word	0x08006efd
 8006e74:	08006efd 	.word	0x08006efd
 8006e78:	08006efd 	.word	0x08006efd
 8006e7c:	08006efd 	.word	0x08006efd
 8006e80:	08006efd 	.word	0x08006efd
 8006e84:	08006efd 	.word	0x08006efd
 8006e88:	08006ee5 	.word	0x08006ee5
 8006e8c:	08006efd 	.word	0x08006efd
 8006e90:	08006efd 	.word	0x08006efd
 8006e94:	08006efd 	.word	0x08006efd
 8006e98:	08006efd 	.word	0x08006efd
 8006e9c:	08006efd 	.word	0x08006efd
 8006ea0:	08006efd 	.word	0x08006efd
 8006ea4:	08006efd 	.word	0x08006efd
 8006ea8:	08006eed 	.word	0x08006eed
 8006eac:	08006efd 	.word	0x08006efd
 8006eb0:	08006efd 	.word	0x08006efd
 8006eb4:	08006efd 	.word	0x08006efd
 8006eb8:	08006efd 	.word	0x08006efd
 8006ebc:	08006efd 	.word	0x08006efd
 8006ec0:	08006efd 	.word	0x08006efd
 8006ec4:	08006efd 	.word	0x08006efd
 8006ec8:	08006ef5 	.word	0x08006ef5
 8006ecc:	2301      	movs	r3, #1
 8006ece:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006ed2:	e222      	b.n	800731a <UART_SetConfig+0x5a2>
 8006ed4:	2304      	movs	r3, #4
 8006ed6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006eda:	e21e      	b.n	800731a <UART_SetConfig+0x5a2>
 8006edc:	2308      	movs	r3, #8
 8006ede:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006ee2:	e21a      	b.n	800731a <UART_SetConfig+0x5a2>
 8006ee4:	2310      	movs	r3, #16
 8006ee6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006eea:	e216      	b.n	800731a <UART_SetConfig+0x5a2>
 8006eec:	2320      	movs	r3, #32
 8006eee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006ef2:	e212      	b.n	800731a <UART_SetConfig+0x5a2>
 8006ef4:	2340      	movs	r3, #64	; 0x40
 8006ef6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006efa:	e20e      	b.n	800731a <UART_SetConfig+0x5a2>
 8006efc:	2380      	movs	r3, #128	; 0x80
 8006efe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006f02:	e20a      	b.n	800731a <UART_SetConfig+0x5a2>
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	4a6b      	ldr	r2, [pc, #428]	; (80070b8 <UART_SetConfig+0x340>)
 8006f0a:	4293      	cmp	r3, r2
 8006f0c:	d130      	bne.n	8006f70 <UART_SetConfig+0x1f8>
 8006f0e:	4b69      	ldr	r3, [pc, #420]	; (80070b4 <UART_SetConfig+0x33c>)
 8006f10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f12:	f003 0307 	and.w	r3, r3, #7
 8006f16:	2b05      	cmp	r3, #5
 8006f18:	d826      	bhi.n	8006f68 <UART_SetConfig+0x1f0>
 8006f1a:	a201      	add	r2, pc, #4	; (adr r2, 8006f20 <UART_SetConfig+0x1a8>)
 8006f1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f20:	08006f39 	.word	0x08006f39
 8006f24:	08006f41 	.word	0x08006f41
 8006f28:	08006f49 	.word	0x08006f49
 8006f2c:	08006f51 	.word	0x08006f51
 8006f30:	08006f59 	.word	0x08006f59
 8006f34:	08006f61 	.word	0x08006f61
 8006f38:	2300      	movs	r3, #0
 8006f3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006f3e:	e1ec      	b.n	800731a <UART_SetConfig+0x5a2>
 8006f40:	2304      	movs	r3, #4
 8006f42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006f46:	e1e8      	b.n	800731a <UART_SetConfig+0x5a2>
 8006f48:	2308      	movs	r3, #8
 8006f4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006f4e:	e1e4      	b.n	800731a <UART_SetConfig+0x5a2>
 8006f50:	2310      	movs	r3, #16
 8006f52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006f56:	e1e0      	b.n	800731a <UART_SetConfig+0x5a2>
 8006f58:	2320      	movs	r3, #32
 8006f5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006f5e:	e1dc      	b.n	800731a <UART_SetConfig+0x5a2>
 8006f60:	2340      	movs	r3, #64	; 0x40
 8006f62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006f66:	e1d8      	b.n	800731a <UART_SetConfig+0x5a2>
 8006f68:	2380      	movs	r3, #128	; 0x80
 8006f6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006f6e:	e1d4      	b.n	800731a <UART_SetConfig+0x5a2>
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	4a51      	ldr	r2, [pc, #324]	; (80070bc <UART_SetConfig+0x344>)
 8006f76:	4293      	cmp	r3, r2
 8006f78:	d130      	bne.n	8006fdc <UART_SetConfig+0x264>
 8006f7a:	4b4e      	ldr	r3, [pc, #312]	; (80070b4 <UART_SetConfig+0x33c>)
 8006f7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f7e:	f003 0307 	and.w	r3, r3, #7
 8006f82:	2b05      	cmp	r3, #5
 8006f84:	d826      	bhi.n	8006fd4 <UART_SetConfig+0x25c>
 8006f86:	a201      	add	r2, pc, #4	; (adr r2, 8006f8c <UART_SetConfig+0x214>)
 8006f88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f8c:	08006fa5 	.word	0x08006fa5
 8006f90:	08006fad 	.word	0x08006fad
 8006f94:	08006fb5 	.word	0x08006fb5
 8006f98:	08006fbd 	.word	0x08006fbd
 8006f9c:	08006fc5 	.word	0x08006fc5
 8006fa0:	08006fcd 	.word	0x08006fcd
 8006fa4:	2300      	movs	r3, #0
 8006fa6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006faa:	e1b6      	b.n	800731a <UART_SetConfig+0x5a2>
 8006fac:	2304      	movs	r3, #4
 8006fae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006fb2:	e1b2      	b.n	800731a <UART_SetConfig+0x5a2>
 8006fb4:	2308      	movs	r3, #8
 8006fb6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006fba:	e1ae      	b.n	800731a <UART_SetConfig+0x5a2>
 8006fbc:	2310      	movs	r3, #16
 8006fbe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006fc2:	e1aa      	b.n	800731a <UART_SetConfig+0x5a2>
 8006fc4:	2320      	movs	r3, #32
 8006fc6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006fca:	e1a6      	b.n	800731a <UART_SetConfig+0x5a2>
 8006fcc:	2340      	movs	r3, #64	; 0x40
 8006fce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006fd2:	e1a2      	b.n	800731a <UART_SetConfig+0x5a2>
 8006fd4:	2380      	movs	r3, #128	; 0x80
 8006fd6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006fda:	e19e      	b.n	800731a <UART_SetConfig+0x5a2>
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	4a37      	ldr	r2, [pc, #220]	; (80070c0 <UART_SetConfig+0x348>)
 8006fe2:	4293      	cmp	r3, r2
 8006fe4:	d130      	bne.n	8007048 <UART_SetConfig+0x2d0>
 8006fe6:	4b33      	ldr	r3, [pc, #204]	; (80070b4 <UART_SetConfig+0x33c>)
 8006fe8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006fea:	f003 0307 	and.w	r3, r3, #7
 8006fee:	2b05      	cmp	r3, #5
 8006ff0:	d826      	bhi.n	8007040 <UART_SetConfig+0x2c8>
 8006ff2:	a201      	add	r2, pc, #4	; (adr r2, 8006ff8 <UART_SetConfig+0x280>)
 8006ff4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ff8:	08007011 	.word	0x08007011
 8006ffc:	08007019 	.word	0x08007019
 8007000:	08007021 	.word	0x08007021
 8007004:	08007029 	.word	0x08007029
 8007008:	08007031 	.word	0x08007031
 800700c:	08007039 	.word	0x08007039
 8007010:	2300      	movs	r3, #0
 8007012:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007016:	e180      	b.n	800731a <UART_SetConfig+0x5a2>
 8007018:	2304      	movs	r3, #4
 800701a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800701e:	e17c      	b.n	800731a <UART_SetConfig+0x5a2>
 8007020:	2308      	movs	r3, #8
 8007022:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007026:	e178      	b.n	800731a <UART_SetConfig+0x5a2>
 8007028:	2310      	movs	r3, #16
 800702a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800702e:	e174      	b.n	800731a <UART_SetConfig+0x5a2>
 8007030:	2320      	movs	r3, #32
 8007032:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007036:	e170      	b.n	800731a <UART_SetConfig+0x5a2>
 8007038:	2340      	movs	r3, #64	; 0x40
 800703a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800703e:	e16c      	b.n	800731a <UART_SetConfig+0x5a2>
 8007040:	2380      	movs	r3, #128	; 0x80
 8007042:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007046:	e168      	b.n	800731a <UART_SetConfig+0x5a2>
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	4a1d      	ldr	r2, [pc, #116]	; (80070c4 <UART_SetConfig+0x34c>)
 800704e:	4293      	cmp	r3, r2
 8007050:	d142      	bne.n	80070d8 <UART_SetConfig+0x360>
 8007052:	4b18      	ldr	r3, [pc, #96]	; (80070b4 <UART_SetConfig+0x33c>)
 8007054:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007056:	f003 0307 	and.w	r3, r3, #7
 800705a:	2b05      	cmp	r3, #5
 800705c:	d838      	bhi.n	80070d0 <UART_SetConfig+0x358>
 800705e:	a201      	add	r2, pc, #4	; (adr r2, 8007064 <UART_SetConfig+0x2ec>)
 8007060:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007064:	0800707d 	.word	0x0800707d
 8007068:	08007085 	.word	0x08007085
 800706c:	0800708d 	.word	0x0800708d
 8007070:	08007095 	.word	0x08007095
 8007074:	0800709d 	.word	0x0800709d
 8007078:	080070c9 	.word	0x080070c9
 800707c:	2300      	movs	r3, #0
 800707e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007082:	e14a      	b.n	800731a <UART_SetConfig+0x5a2>
 8007084:	2304      	movs	r3, #4
 8007086:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800708a:	e146      	b.n	800731a <UART_SetConfig+0x5a2>
 800708c:	2308      	movs	r3, #8
 800708e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007092:	e142      	b.n	800731a <UART_SetConfig+0x5a2>
 8007094:	2310      	movs	r3, #16
 8007096:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800709a:	e13e      	b.n	800731a <UART_SetConfig+0x5a2>
 800709c:	2320      	movs	r3, #32
 800709e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80070a2:	e13a      	b.n	800731a <UART_SetConfig+0x5a2>
 80070a4:	cfff69f3 	.word	0xcfff69f3
 80070a8:	58000c00 	.word	0x58000c00
 80070ac:	11fff4ff 	.word	0x11fff4ff
 80070b0:	40011000 	.word	0x40011000
 80070b4:	58024400 	.word	0x58024400
 80070b8:	40004400 	.word	0x40004400
 80070bc:	40004800 	.word	0x40004800
 80070c0:	40004c00 	.word	0x40004c00
 80070c4:	40005000 	.word	0x40005000
 80070c8:	2340      	movs	r3, #64	; 0x40
 80070ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80070ce:	e124      	b.n	800731a <UART_SetConfig+0x5a2>
 80070d0:	2380      	movs	r3, #128	; 0x80
 80070d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80070d6:	e120      	b.n	800731a <UART_SetConfig+0x5a2>
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	4acc      	ldr	r2, [pc, #816]	; (8007410 <UART_SetConfig+0x698>)
 80070de:	4293      	cmp	r3, r2
 80070e0:	d176      	bne.n	80071d0 <UART_SetConfig+0x458>
 80070e2:	4bcc      	ldr	r3, [pc, #816]	; (8007414 <UART_SetConfig+0x69c>)
 80070e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070e6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80070ea:	2b28      	cmp	r3, #40	; 0x28
 80070ec:	d86c      	bhi.n	80071c8 <UART_SetConfig+0x450>
 80070ee:	a201      	add	r2, pc, #4	; (adr r2, 80070f4 <UART_SetConfig+0x37c>)
 80070f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070f4:	08007199 	.word	0x08007199
 80070f8:	080071c9 	.word	0x080071c9
 80070fc:	080071c9 	.word	0x080071c9
 8007100:	080071c9 	.word	0x080071c9
 8007104:	080071c9 	.word	0x080071c9
 8007108:	080071c9 	.word	0x080071c9
 800710c:	080071c9 	.word	0x080071c9
 8007110:	080071c9 	.word	0x080071c9
 8007114:	080071a1 	.word	0x080071a1
 8007118:	080071c9 	.word	0x080071c9
 800711c:	080071c9 	.word	0x080071c9
 8007120:	080071c9 	.word	0x080071c9
 8007124:	080071c9 	.word	0x080071c9
 8007128:	080071c9 	.word	0x080071c9
 800712c:	080071c9 	.word	0x080071c9
 8007130:	080071c9 	.word	0x080071c9
 8007134:	080071a9 	.word	0x080071a9
 8007138:	080071c9 	.word	0x080071c9
 800713c:	080071c9 	.word	0x080071c9
 8007140:	080071c9 	.word	0x080071c9
 8007144:	080071c9 	.word	0x080071c9
 8007148:	080071c9 	.word	0x080071c9
 800714c:	080071c9 	.word	0x080071c9
 8007150:	080071c9 	.word	0x080071c9
 8007154:	080071b1 	.word	0x080071b1
 8007158:	080071c9 	.word	0x080071c9
 800715c:	080071c9 	.word	0x080071c9
 8007160:	080071c9 	.word	0x080071c9
 8007164:	080071c9 	.word	0x080071c9
 8007168:	080071c9 	.word	0x080071c9
 800716c:	080071c9 	.word	0x080071c9
 8007170:	080071c9 	.word	0x080071c9
 8007174:	080071b9 	.word	0x080071b9
 8007178:	080071c9 	.word	0x080071c9
 800717c:	080071c9 	.word	0x080071c9
 8007180:	080071c9 	.word	0x080071c9
 8007184:	080071c9 	.word	0x080071c9
 8007188:	080071c9 	.word	0x080071c9
 800718c:	080071c9 	.word	0x080071c9
 8007190:	080071c9 	.word	0x080071c9
 8007194:	080071c1 	.word	0x080071c1
 8007198:	2301      	movs	r3, #1
 800719a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800719e:	e0bc      	b.n	800731a <UART_SetConfig+0x5a2>
 80071a0:	2304      	movs	r3, #4
 80071a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80071a6:	e0b8      	b.n	800731a <UART_SetConfig+0x5a2>
 80071a8:	2308      	movs	r3, #8
 80071aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80071ae:	e0b4      	b.n	800731a <UART_SetConfig+0x5a2>
 80071b0:	2310      	movs	r3, #16
 80071b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80071b6:	e0b0      	b.n	800731a <UART_SetConfig+0x5a2>
 80071b8:	2320      	movs	r3, #32
 80071ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80071be:	e0ac      	b.n	800731a <UART_SetConfig+0x5a2>
 80071c0:	2340      	movs	r3, #64	; 0x40
 80071c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80071c6:	e0a8      	b.n	800731a <UART_SetConfig+0x5a2>
 80071c8:	2380      	movs	r3, #128	; 0x80
 80071ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80071ce:	e0a4      	b.n	800731a <UART_SetConfig+0x5a2>
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	4a90      	ldr	r2, [pc, #576]	; (8007418 <UART_SetConfig+0x6a0>)
 80071d6:	4293      	cmp	r3, r2
 80071d8:	d130      	bne.n	800723c <UART_SetConfig+0x4c4>
 80071da:	4b8e      	ldr	r3, [pc, #568]	; (8007414 <UART_SetConfig+0x69c>)
 80071dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071de:	f003 0307 	and.w	r3, r3, #7
 80071e2:	2b05      	cmp	r3, #5
 80071e4:	d826      	bhi.n	8007234 <UART_SetConfig+0x4bc>
 80071e6:	a201      	add	r2, pc, #4	; (adr r2, 80071ec <UART_SetConfig+0x474>)
 80071e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071ec:	08007205 	.word	0x08007205
 80071f0:	0800720d 	.word	0x0800720d
 80071f4:	08007215 	.word	0x08007215
 80071f8:	0800721d 	.word	0x0800721d
 80071fc:	08007225 	.word	0x08007225
 8007200:	0800722d 	.word	0x0800722d
 8007204:	2300      	movs	r3, #0
 8007206:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800720a:	e086      	b.n	800731a <UART_SetConfig+0x5a2>
 800720c:	2304      	movs	r3, #4
 800720e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007212:	e082      	b.n	800731a <UART_SetConfig+0x5a2>
 8007214:	2308      	movs	r3, #8
 8007216:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800721a:	e07e      	b.n	800731a <UART_SetConfig+0x5a2>
 800721c:	2310      	movs	r3, #16
 800721e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007222:	e07a      	b.n	800731a <UART_SetConfig+0x5a2>
 8007224:	2320      	movs	r3, #32
 8007226:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800722a:	e076      	b.n	800731a <UART_SetConfig+0x5a2>
 800722c:	2340      	movs	r3, #64	; 0x40
 800722e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007232:	e072      	b.n	800731a <UART_SetConfig+0x5a2>
 8007234:	2380      	movs	r3, #128	; 0x80
 8007236:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800723a:	e06e      	b.n	800731a <UART_SetConfig+0x5a2>
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	4a76      	ldr	r2, [pc, #472]	; (800741c <UART_SetConfig+0x6a4>)
 8007242:	4293      	cmp	r3, r2
 8007244:	d130      	bne.n	80072a8 <UART_SetConfig+0x530>
 8007246:	4b73      	ldr	r3, [pc, #460]	; (8007414 <UART_SetConfig+0x69c>)
 8007248:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800724a:	f003 0307 	and.w	r3, r3, #7
 800724e:	2b05      	cmp	r3, #5
 8007250:	d826      	bhi.n	80072a0 <UART_SetConfig+0x528>
 8007252:	a201      	add	r2, pc, #4	; (adr r2, 8007258 <UART_SetConfig+0x4e0>)
 8007254:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007258:	08007271 	.word	0x08007271
 800725c:	08007279 	.word	0x08007279
 8007260:	08007281 	.word	0x08007281
 8007264:	08007289 	.word	0x08007289
 8007268:	08007291 	.word	0x08007291
 800726c:	08007299 	.word	0x08007299
 8007270:	2300      	movs	r3, #0
 8007272:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007276:	e050      	b.n	800731a <UART_SetConfig+0x5a2>
 8007278:	2304      	movs	r3, #4
 800727a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800727e:	e04c      	b.n	800731a <UART_SetConfig+0x5a2>
 8007280:	2308      	movs	r3, #8
 8007282:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007286:	e048      	b.n	800731a <UART_SetConfig+0x5a2>
 8007288:	2310      	movs	r3, #16
 800728a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800728e:	e044      	b.n	800731a <UART_SetConfig+0x5a2>
 8007290:	2320      	movs	r3, #32
 8007292:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007296:	e040      	b.n	800731a <UART_SetConfig+0x5a2>
 8007298:	2340      	movs	r3, #64	; 0x40
 800729a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800729e:	e03c      	b.n	800731a <UART_SetConfig+0x5a2>
 80072a0:	2380      	movs	r3, #128	; 0x80
 80072a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80072a6:	e038      	b.n	800731a <UART_SetConfig+0x5a2>
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	4a5c      	ldr	r2, [pc, #368]	; (8007420 <UART_SetConfig+0x6a8>)
 80072ae:	4293      	cmp	r3, r2
 80072b0:	d130      	bne.n	8007314 <UART_SetConfig+0x59c>
 80072b2:	4b58      	ldr	r3, [pc, #352]	; (8007414 <UART_SetConfig+0x69c>)
 80072b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80072b6:	f003 0307 	and.w	r3, r3, #7
 80072ba:	2b05      	cmp	r3, #5
 80072bc:	d826      	bhi.n	800730c <UART_SetConfig+0x594>
 80072be:	a201      	add	r2, pc, #4	; (adr r2, 80072c4 <UART_SetConfig+0x54c>)
 80072c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072c4:	080072dd 	.word	0x080072dd
 80072c8:	080072e5 	.word	0x080072e5
 80072cc:	080072ed 	.word	0x080072ed
 80072d0:	080072f5 	.word	0x080072f5
 80072d4:	080072fd 	.word	0x080072fd
 80072d8:	08007305 	.word	0x08007305
 80072dc:	2302      	movs	r3, #2
 80072de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80072e2:	e01a      	b.n	800731a <UART_SetConfig+0x5a2>
 80072e4:	2304      	movs	r3, #4
 80072e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80072ea:	e016      	b.n	800731a <UART_SetConfig+0x5a2>
 80072ec:	2308      	movs	r3, #8
 80072ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80072f2:	e012      	b.n	800731a <UART_SetConfig+0x5a2>
 80072f4:	2310      	movs	r3, #16
 80072f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80072fa:	e00e      	b.n	800731a <UART_SetConfig+0x5a2>
 80072fc:	2320      	movs	r3, #32
 80072fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007302:	e00a      	b.n	800731a <UART_SetConfig+0x5a2>
 8007304:	2340      	movs	r3, #64	; 0x40
 8007306:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800730a:	e006      	b.n	800731a <UART_SetConfig+0x5a2>
 800730c:	2380      	movs	r3, #128	; 0x80
 800730e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007312:	e002      	b.n	800731a <UART_SetConfig+0x5a2>
 8007314:	2380      	movs	r3, #128	; 0x80
 8007316:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	4a40      	ldr	r2, [pc, #256]	; (8007420 <UART_SetConfig+0x6a8>)
 8007320:	4293      	cmp	r3, r2
 8007322:	f040 80ef 	bne.w	8007504 <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007326:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800732a:	2b20      	cmp	r3, #32
 800732c:	dc46      	bgt.n	80073bc <UART_SetConfig+0x644>
 800732e:	2b02      	cmp	r3, #2
 8007330:	f2c0 8081 	blt.w	8007436 <UART_SetConfig+0x6be>
 8007334:	3b02      	subs	r3, #2
 8007336:	2b1e      	cmp	r3, #30
 8007338:	d87d      	bhi.n	8007436 <UART_SetConfig+0x6be>
 800733a:	a201      	add	r2, pc, #4	; (adr r2, 8007340 <UART_SetConfig+0x5c8>)
 800733c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007340:	080073c3 	.word	0x080073c3
 8007344:	08007437 	.word	0x08007437
 8007348:	080073cb 	.word	0x080073cb
 800734c:	08007437 	.word	0x08007437
 8007350:	08007437 	.word	0x08007437
 8007354:	08007437 	.word	0x08007437
 8007358:	080073db 	.word	0x080073db
 800735c:	08007437 	.word	0x08007437
 8007360:	08007437 	.word	0x08007437
 8007364:	08007437 	.word	0x08007437
 8007368:	08007437 	.word	0x08007437
 800736c:	08007437 	.word	0x08007437
 8007370:	08007437 	.word	0x08007437
 8007374:	08007437 	.word	0x08007437
 8007378:	080073eb 	.word	0x080073eb
 800737c:	08007437 	.word	0x08007437
 8007380:	08007437 	.word	0x08007437
 8007384:	08007437 	.word	0x08007437
 8007388:	08007437 	.word	0x08007437
 800738c:	08007437 	.word	0x08007437
 8007390:	08007437 	.word	0x08007437
 8007394:	08007437 	.word	0x08007437
 8007398:	08007437 	.word	0x08007437
 800739c:	08007437 	.word	0x08007437
 80073a0:	08007437 	.word	0x08007437
 80073a4:	08007437 	.word	0x08007437
 80073a8:	08007437 	.word	0x08007437
 80073ac:	08007437 	.word	0x08007437
 80073b0:	08007437 	.word	0x08007437
 80073b4:	08007437 	.word	0x08007437
 80073b8:	08007429 	.word	0x08007429
 80073bc:	2b40      	cmp	r3, #64	; 0x40
 80073be:	d036      	beq.n	800742e <UART_SetConfig+0x6b6>
 80073c0:	e039      	b.n	8007436 <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80073c2:	f7fe fabb 	bl	800593c <HAL_RCCEx_GetD3PCLK1Freq>
 80073c6:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80073c8:	e03b      	b.n	8007442 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80073ca:	f107 0314 	add.w	r3, r7, #20
 80073ce:	4618      	mov	r0, r3
 80073d0:	f7fe faca 	bl	8005968 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80073d4:	69bb      	ldr	r3, [r7, #24]
 80073d6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80073d8:	e033      	b.n	8007442 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80073da:	f107 0308 	add.w	r3, r7, #8
 80073de:	4618      	mov	r0, r3
 80073e0:	f7fe fc16 	bl	8005c10 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80073e8:	e02b      	b.n	8007442 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80073ea:	4b0a      	ldr	r3, [pc, #40]	; (8007414 <UART_SetConfig+0x69c>)
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	f003 0320 	and.w	r3, r3, #32
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d009      	beq.n	800740a <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80073f6:	4b07      	ldr	r3, [pc, #28]	; (8007414 <UART_SetConfig+0x69c>)
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	08db      	lsrs	r3, r3, #3
 80073fc:	f003 0303 	and.w	r3, r3, #3
 8007400:	4a08      	ldr	r2, [pc, #32]	; (8007424 <UART_SetConfig+0x6ac>)
 8007402:	fa22 f303 	lsr.w	r3, r2, r3
 8007406:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007408:	e01b      	b.n	8007442 <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 800740a:	4b06      	ldr	r3, [pc, #24]	; (8007424 <UART_SetConfig+0x6ac>)
 800740c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800740e:	e018      	b.n	8007442 <UART_SetConfig+0x6ca>
 8007410:	40011400 	.word	0x40011400
 8007414:	58024400 	.word	0x58024400
 8007418:	40007800 	.word	0x40007800
 800741c:	40007c00 	.word	0x40007c00
 8007420:	58000c00 	.word	0x58000c00
 8007424:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007428:	4bc4      	ldr	r3, [pc, #784]	; (800773c <UART_SetConfig+0x9c4>)
 800742a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800742c:	e009      	b.n	8007442 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800742e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007432:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007434:	e005      	b.n	8007442 <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 8007436:	2300      	movs	r3, #0
 8007438:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800743a:	2301      	movs	r3, #1
 800743c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8007440:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007442:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007444:	2b00      	cmp	r3, #0
 8007446:	f000 81da 	beq.w	80077fe <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800744e:	4abc      	ldr	r2, [pc, #752]	; (8007740 <UART_SetConfig+0x9c8>)
 8007450:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007454:	461a      	mov	r2, r3
 8007456:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007458:	fbb3 f3f2 	udiv	r3, r3, r2
 800745c:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	685a      	ldr	r2, [r3, #4]
 8007462:	4613      	mov	r3, r2
 8007464:	005b      	lsls	r3, r3, #1
 8007466:	4413      	add	r3, r2
 8007468:	6a3a      	ldr	r2, [r7, #32]
 800746a:	429a      	cmp	r2, r3
 800746c:	d305      	bcc.n	800747a <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	685b      	ldr	r3, [r3, #4]
 8007472:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007474:	6a3a      	ldr	r2, [r7, #32]
 8007476:	429a      	cmp	r2, r3
 8007478:	d903      	bls.n	8007482 <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 800747a:	2301      	movs	r3, #1
 800747c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8007480:	e1bd      	b.n	80077fe <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007482:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007484:	4618      	mov	r0, r3
 8007486:	f04f 0100 	mov.w	r1, #0
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800748e:	4aac      	ldr	r2, [pc, #688]	; (8007740 <UART_SetConfig+0x9c8>)
 8007490:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007494:	b29a      	uxth	r2, r3
 8007496:	f04f 0300 	mov.w	r3, #0
 800749a:	f7f8 ff21 	bl	80002e0 <__aeabi_uldivmod>
 800749e:	4602      	mov	r2, r0
 80074a0:	460b      	mov	r3, r1
 80074a2:	4610      	mov	r0, r2
 80074a4:	4619      	mov	r1, r3
 80074a6:	f04f 0200 	mov.w	r2, #0
 80074aa:	f04f 0300 	mov.w	r3, #0
 80074ae:	020b      	lsls	r3, r1, #8
 80074b0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80074b4:	0202      	lsls	r2, r0, #8
 80074b6:	6879      	ldr	r1, [r7, #4]
 80074b8:	6849      	ldr	r1, [r1, #4]
 80074ba:	0849      	lsrs	r1, r1, #1
 80074bc:	4608      	mov	r0, r1
 80074be:	f04f 0100 	mov.w	r1, #0
 80074c2:	1814      	adds	r4, r2, r0
 80074c4:	eb43 0501 	adc.w	r5, r3, r1
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	685b      	ldr	r3, [r3, #4]
 80074cc:	461a      	mov	r2, r3
 80074ce:	f04f 0300 	mov.w	r3, #0
 80074d2:	4620      	mov	r0, r4
 80074d4:	4629      	mov	r1, r5
 80074d6:	f7f8 ff03 	bl	80002e0 <__aeabi_uldivmod>
 80074da:	4602      	mov	r2, r0
 80074dc:	460b      	mov	r3, r1
 80074de:	4613      	mov	r3, r2
 80074e0:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80074e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074e4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80074e8:	d308      	bcc.n	80074fc <UART_SetConfig+0x784>
 80074ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074ec:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80074f0:	d204      	bcs.n	80074fc <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80074f8:	60da      	str	r2, [r3, #12]
 80074fa:	e180      	b.n	80077fe <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 80074fc:	2301      	movs	r3, #1
 80074fe:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8007502:	e17c      	b.n	80077fe <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	69db      	ldr	r3, [r3, #28]
 8007508:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800750c:	f040 80bf 	bne.w	800768e <UART_SetConfig+0x916>
  {
    switch (clocksource)
 8007510:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8007514:	2b20      	cmp	r3, #32
 8007516:	dc49      	bgt.n	80075ac <UART_SetConfig+0x834>
 8007518:	2b00      	cmp	r3, #0
 800751a:	db7c      	blt.n	8007616 <UART_SetConfig+0x89e>
 800751c:	2b20      	cmp	r3, #32
 800751e:	d87a      	bhi.n	8007616 <UART_SetConfig+0x89e>
 8007520:	a201      	add	r2, pc, #4	; (adr r2, 8007528 <UART_SetConfig+0x7b0>)
 8007522:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007526:	bf00      	nop
 8007528:	080075b3 	.word	0x080075b3
 800752c:	080075bb 	.word	0x080075bb
 8007530:	08007617 	.word	0x08007617
 8007534:	08007617 	.word	0x08007617
 8007538:	080075c3 	.word	0x080075c3
 800753c:	08007617 	.word	0x08007617
 8007540:	08007617 	.word	0x08007617
 8007544:	08007617 	.word	0x08007617
 8007548:	080075d3 	.word	0x080075d3
 800754c:	08007617 	.word	0x08007617
 8007550:	08007617 	.word	0x08007617
 8007554:	08007617 	.word	0x08007617
 8007558:	08007617 	.word	0x08007617
 800755c:	08007617 	.word	0x08007617
 8007560:	08007617 	.word	0x08007617
 8007564:	08007617 	.word	0x08007617
 8007568:	080075e3 	.word	0x080075e3
 800756c:	08007617 	.word	0x08007617
 8007570:	08007617 	.word	0x08007617
 8007574:	08007617 	.word	0x08007617
 8007578:	08007617 	.word	0x08007617
 800757c:	08007617 	.word	0x08007617
 8007580:	08007617 	.word	0x08007617
 8007584:	08007617 	.word	0x08007617
 8007588:	08007617 	.word	0x08007617
 800758c:	08007617 	.word	0x08007617
 8007590:	08007617 	.word	0x08007617
 8007594:	08007617 	.word	0x08007617
 8007598:	08007617 	.word	0x08007617
 800759c:	08007617 	.word	0x08007617
 80075a0:	08007617 	.word	0x08007617
 80075a4:	08007617 	.word	0x08007617
 80075a8:	08007609 	.word	0x08007609
 80075ac:	2b40      	cmp	r3, #64	; 0x40
 80075ae:	d02e      	beq.n	800760e <UART_SetConfig+0x896>
 80075b0:	e031      	b.n	8007616 <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80075b2:	f7fd fa15 	bl	80049e0 <HAL_RCC_GetPCLK1Freq>
 80075b6:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80075b8:	e033      	b.n	8007622 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80075ba:	f7fd fa27 	bl	8004a0c <HAL_RCC_GetPCLK2Freq>
 80075be:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80075c0:	e02f      	b.n	8007622 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80075c2:	f107 0314 	add.w	r3, r7, #20
 80075c6:	4618      	mov	r0, r3
 80075c8:	f7fe f9ce 	bl	8005968 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80075cc:	69bb      	ldr	r3, [r7, #24]
 80075ce:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80075d0:	e027      	b.n	8007622 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80075d2:	f107 0308 	add.w	r3, r7, #8
 80075d6:	4618      	mov	r0, r3
 80075d8:	f7fe fb1a 	bl	8005c10 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80075e0:	e01f      	b.n	8007622 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80075e2:	4b58      	ldr	r3, [pc, #352]	; (8007744 <UART_SetConfig+0x9cc>)
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	f003 0320 	and.w	r3, r3, #32
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d009      	beq.n	8007602 <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80075ee:	4b55      	ldr	r3, [pc, #340]	; (8007744 <UART_SetConfig+0x9cc>)
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	08db      	lsrs	r3, r3, #3
 80075f4:	f003 0303 	and.w	r3, r3, #3
 80075f8:	4a53      	ldr	r2, [pc, #332]	; (8007748 <UART_SetConfig+0x9d0>)
 80075fa:	fa22 f303 	lsr.w	r3, r2, r3
 80075fe:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007600:	e00f      	b.n	8007622 <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 8007602:	4b51      	ldr	r3, [pc, #324]	; (8007748 <UART_SetConfig+0x9d0>)
 8007604:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007606:	e00c      	b.n	8007622 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007608:	4b4c      	ldr	r3, [pc, #304]	; (800773c <UART_SetConfig+0x9c4>)
 800760a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800760c:	e009      	b.n	8007622 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800760e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007612:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007614:	e005      	b.n	8007622 <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 8007616:	2300      	movs	r3, #0
 8007618:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800761a:	2301      	movs	r3, #1
 800761c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8007620:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007622:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007624:	2b00      	cmp	r3, #0
 8007626:	f000 80ea 	beq.w	80077fe <UART_SetConfig+0xa86>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800762e:	4a44      	ldr	r2, [pc, #272]	; (8007740 <UART_SetConfig+0x9c8>)
 8007630:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007634:	461a      	mov	r2, r3
 8007636:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007638:	fbb3 f3f2 	udiv	r3, r3, r2
 800763c:	005a      	lsls	r2, r3, #1
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	685b      	ldr	r3, [r3, #4]
 8007642:	085b      	lsrs	r3, r3, #1
 8007644:	441a      	add	r2, r3
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	685b      	ldr	r3, [r3, #4]
 800764a:	fbb2 f3f3 	udiv	r3, r2, r3
 800764e:	b29b      	uxth	r3, r3
 8007650:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007652:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007654:	2b0f      	cmp	r3, #15
 8007656:	d916      	bls.n	8007686 <UART_SetConfig+0x90e>
 8007658:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800765a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800765e:	d212      	bcs.n	8007686 <UART_SetConfig+0x90e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007660:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007662:	b29b      	uxth	r3, r3
 8007664:	f023 030f 	bic.w	r3, r3, #15
 8007668:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800766a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800766c:	085b      	lsrs	r3, r3, #1
 800766e:	b29b      	uxth	r3, r3
 8007670:	f003 0307 	and.w	r3, r3, #7
 8007674:	b29a      	uxth	r2, r3
 8007676:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007678:	4313      	orrs	r3, r2
 800767a:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8007682:	60da      	str	r2, [r3, #12]
 8007684:	e0bb      	b.n	80077fe <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 8007686:	2301      	movs	r3, #1
 8007688:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800768c:	e0b7      	b.n	80077fe <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 800768e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8007692:	2b20      	cmp	r3, #32
 8007694:	dc4a      	bgt.n	800772c <UART_SetConfig+0x9b4>
 8007696:	2b00      	cmp	r3, #0
 8007698:	f2c0 8086 	blt.w	80077a8 <UART_SetConfig+0xa30>
 800769c:	2b20      	cmp	r3, #32
 800769e:	f200 8083 	bhi.w	80077a8 <UART_SetConfig+0xa30>
 80076a2:	a201      	add	r2, pc, #4	; (adr r2, 80076a8 <UART_SetConfig+0x930>)
 80076a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076a8:	08007733 	.word	0x08007733
 80076ac:	0800774d 	.word	0x0800774d
 80076b0:	080077a9 	.word	0x080077a9
 80076b4:	080077a9 	.word	0x080077a9
 80076b8:	08007755 	.word	0x08007755
 80076bc:	080077a9 	.word	0x080077a9
 80076c0:	080077a9 	.word	0x080077a9
 80076c4:	080077a9 	.word	0x080077a9
 80076c8:	08007765 	.word	0x08007765
 80076cc:	080077a9 	.word	0x080077a9
 80076d0:	080077a9 	.word	0x080077a9
 80076d4:	080077a9 	.word	0x080077a9
 80076d8:	080077a9 	.word	0x080077a9
 80076dc:	080077a9 	.word	0x080077a9
 80076e0:	080077a9 	.word	0x080077a9
 80076e4:	080077a9 	.word	0x080077a9
 80076e8:	08007775 	.word	0x08007775
 80076ec:	080077a9 	.word	0x080077a9
 80076f0:	080077a9 	.word	0x080077a9
 80076f4:	080077a9 	.word	0x080077a9
 80076f8:	080077a9 	.word	0x080077a9
 80076fc:	080077a9 	.word	0x080077a9
 8007700:	080077a9 	.word	0x080077a9
 8007704:	080077a9 	.word	0x080077a9
 8007708:	080077a9 	.word	0x080077a9
 800770c:	080077a9 	.word	0x080077a9
 8007710:	080077a9 	.word	0x080077a9
 8007714:	080077a9 	.word	0x080077a9
 8007718:	080077a9 	.word	0x080077a9
 800771c:	080077a9 	.word	0x080077a9
 8007720:	080077a9 	.word	0x080077a9
 8007724:	080077a9 	.word	0x080077a9
 8007728:	0800779b 	.word	0x0800779b
 800772c:	2b40      	cmp	r3, #64	; 0x40
 800772e:	d037      	beq.n	80077a0 <UART_SetConfig+0xa28>
 8007730:	e03a      	b.n	80077a8 <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007732:	f7fd f955 	bl	80049e0 <HAL_RCC_GetPCLK1Freq>
 8007736:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8007738:	e03c      	b.n	80077b4 <UART_SetConfig+0xa3c>
 800773a:	bf00      	nop
 800773c:	003d0900 	.word	0x003d0900
 8007740:	0800aa34 	.word	0x0800aa34
 8007744:	58024400 	.word	0x58024400
 8007748:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800774c:	f7fd f95e 	bl	8004a0c <HAL_RCC_GetPCLK2Freq>
 8007750:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8007752:	e02f      	b.n	80077b4 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007754:	f107 0314 	add.w	r3, r7, #20
 8007758:	4618      	mov	r0, r3
 800775a:	f7fe f905 	bl	8005968 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800775e:	69bb      	ldr	r3, [r7, #24]
 8007760:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007762:	e027      	b.n	80077b4 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007764:	f107 0308 	add.w	r3, r7, #8
 8007768:	4618      	mov	r0, r3
 800776a:	f7fe fa51 	bl	8005c10 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007772:	e01f      	b.n	80077b4 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007774:	4b2c      	ldr	r3, [pc, #176]	; (8007828 <UART_SetConfig+0xab0>)
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	f003 0320 	and.w	r3, r3, #32
 800777c:	2b00      	cmp	r3, #0
 800777e:	d009      	beq.n	8007794 <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007780:	4b29      	ldr	r3, [pc, #164]	; (8007828 <UART_SetConfig+0xab0>)
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	08db      	lsrs	r3, r3, #3
 8007786:	f003 0303 	and.w	r3, r3, #3
 800778a:	4a28      	ldr	r2, [pc, #160]	; (800782c <UART_SetConfig+0xab4>)
 800778c:	fa22 f303 	lsr.w	r3, r2, r3
 8007790:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007792:	e00f      	b.n	80077b4 <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 8007794:	4b25      	ldr	r3, [pc, #148]	; (800782c <UART_SetConfig+0xab4>)
 8007796:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007798:	e00c      	b.n	80077b4 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800779a:	4b25      	ldr	r3, [pc, #148]	; (8007830 <UART_SetConfig+0xab8>)
 800779c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800779e:	e009      	b.n	80077b4 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80077a0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80077a4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80077a6:	e005      	b.n	80077b4 <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 80077a8:	2300      	movs	r3, #0
 80077aa:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80077ac:	2301      	movs	r3, #1
 80077ae:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 80077b2:	bf00      	nop
    }

    if (pclk != 0U)
 80077b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d021      	beq.n	80077fe <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077be:	4a1d      	ldr	r2, [pc, #116]	; (8007834 <UART_SetConfig+0xabc>)
 80077c0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80077c4:	461a      	mov	r2, r3
 80077c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077c8:	fbb3 f2f2 	udiv	r2, r3, r2
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	685b      	ldr	r3, [r3, #4]
 80077d0:	085b      	lsrs	r3, r3, #1
 80077d2:	441a      	add	r2, r3
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	685b      	ldr	r3, [r3, #4]
 80077d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80077dc:	b29b      	uxth	r3, r3
 80077de:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80077e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077e2:	2b0f      	cmp	r3, #15
 80077e4:	d908      	bls.n	80077f8 <UART_SetConfig+0xa80>
 80077e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80077ec:	d204      	bcs.n	80077f8 <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = usartdiv;
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80077f4:	60da      	str	r2, [r3, #12]
 80077f6:	e002      	b.n	80077fe <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 80077f8:	2301      	movs	r3, #1
 80077fa:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	2201      	movs	r2, #1
 8007802:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	2201      	movs	r2, #1
 800780a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	2200      	movs	r2, #0
 8007812:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	2200      	movs	r2, #0
 8007818:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800781a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800781e:	4618      	mov	r0, r3
 8007820:	3738      	adds	r7, #56	; 0x38
 8007822:	46bd      	mov	sp, r7
 8007824:	bdb0      	pop	{r4, r5, r7, pc}
 8007826:	bf00      	nop
 8007828:	58024400 	.word	0x58024400
 800782c:	03d09000 	.word	0x03d09000
 8007830:	003d0900 	.word	0x003d0900
 8007834:	0800aa34 	.word	0x0800aa34

08007838 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007838:	b480      	push	{r7}
 800783a:	b083      	sub	sp, #12
 800783c:	af00      	add	r7, sp, #0
 800783e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007844:	f003 0301 	and.w	r3, r3, #1
 8007848:	2b00      	cmp	r3, #0
 800784a:	d00a      	beq.n	8007862 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	685b      	ldr	r3, [r3, #4]
 8007852:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	430a      	orrs	r2, r1
 8007860:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007866:	f003 0302 	and.w	r3, r3, #2
 800786a:	2b00      	cmp	r3, #0
 800786c:	d00a      	beq.n	8007884 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	685b      	ldr	r3, [r3, #4]
 8007874:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	430a      	orrs	r2, r1
 8007882:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007888:	f003 0304 	and.w	r3, r3, #4
 800788c:	2b00      	cmp	r3, #0
 800788e:	d00a      	beq.n	80078a6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	685b      	ldr	r3, [r3, #4]
 8007896:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	430a      	orrs	r2, r1
 80078a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078aa:	f003 0308 	and.w	r3, r3, #8
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d00a      	beq.n	80078c8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	685b      	ldr	r3, [r3, #4]
 80078b8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	430a      	orrs	r2, r1
 80078c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078cc:	f003 0310 	and.w	r3, r3, #16
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d00a      	beq.n	80078ea <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	689b      	ldr	r3, [r3, #8]
 80078da:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	430a      	orrs	r2, r1
 80078e8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078ee:	f003 0320 	and.w	r3, r3, #32
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d00a      	beq.n	800790c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	689b      	ldr	r3, [r3, #8]
 80078fc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	430a      	orrs	r2, r1
 800790a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007910:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007914:	2b00      	cmp	r3, #0
 8007916:	d01a      	beq.n	800794e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	685b      	ldr	r3, [r3, #4]
 800791e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	430a      	orrs	r2, r1
 800792c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007932:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007936:	d10a      	bne.n	800794e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	685b      	ldr	r3, [r3, #4]
 800793e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	430a      	orrs	r2, r1
 800794c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007952:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007956:	2b00      	cmp	r3, #0
 8007958:	d00a      	beq.n	8007970 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	685b      	ldr	r3, [r3, #4]
 8007960:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	430a      	orrs	r2, r1
 800796e:	605a      	str	r2, [r3, #4]
  }
}
 8007970:	bf00      	nop
 8007972:	370c      	adds	r7, #12
 8007974:	46bd      	mov	sp, r7
 8007976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800797a:	4770      	bx	lr

0800797c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800797c:	b580      	push	{r7, lr}
 800797e:	b086      	sub	sp, #24
 8007980:	af02      	add	r7, sp, #8
 8007982:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	2200      	movs	r2, #0
 8007988:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800798c:	f7f9 fb40 	bl	8001010 <HAL_GetTick>
 8007990:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	f003 0308 	and.w	r3, r3, #8
 800799c:	2b08      	cmp	r3, #8
 800799e:	d10e      	bne.n	80079be <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80079a0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80079a4:	9300      	str	r3, [sp, #0]
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	2200      	movs	r2, #0
 80079aa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80079ae:	6878      	ldr	r0, [r7, #4]
 80079b0:	f000 f82f 	bl	8007a12 <UART_WaitOnFlagUntilTimeout>
 80079b4:	4603      	mov	r3, r0
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d001      	beq.n	80079be <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80079ba:	2303      	movs	r3, #3
 80079bc:	e025      	b.n	8007a0a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	f003 0304 	and.w	r3, r3, #4
 80079c8:	2b04      	cmp	r3, #4
 80079ca:	d10e      	bne.n	80079ea <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80079cc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80079d0:	9300      	str	r3, [sp, #0]
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	2200      	movs	r2, #0
 80079d6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80079da:	6878      	ldr	r0, [r7, #4]
 80079dc:	f000 f819 	bl	8007a12 <UART_WaitOnFlagUntilTimeout>
 80079e0:	4603      	mov	r3, r0
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d001      	beq.n	80079ea <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80079e6:	2303      	movs	r3, #3
 80079e8:	e00f      	b.n	8007a0a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	2220      	movs	r2, #32
 80079ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	2220      	movs	r2, #32
 80079f6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	2200      	movs	r2, #0
 80079fe:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	2200      	movs	r2, #0
 8007a04:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007a08:	2300      	movs	r3, #0
}
 8007a0a:	4618      	mov	r0, r3
 8007a0c:	3710      	adds	r7, #16
 8007a0e:	46bd      	mov	sp, r7
 8007a10:	bd80      	pop	{r7, pc}

08007a12 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007a12:	b580      	push	{r7, lr}
 8007a14:	b084      	sub	sp, #16
 8007a16:	af00      	add	r7, sp, #0
 8007a18:	60f8      	str	r0, [r7, #12]
 8007a1a:	60b9      	str	r1, [r7, #8]
 8007a1c:	603b      	str	r3, [r7, #0]
 8007a1e:	4613      	mov	r3, r2
 8007a20:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007a22:	e062      	b.n	8007aea <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007a24:	69bb      	ldr	r3, [r7, #24]
 8007a26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a2a:	d05e      	beq.n	8007aea <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007a2c:	f7f9 faf0 	bl	8001010 <HAL_GetTick>
 8007a30:	4602      	mov	r2, r0
 8007a32:	683b      	ldr	r3, [r7, #0]
 8007a34:	1ad3      	subs	r3, r2, r3
 8007a36:	69ba      	ldr	r2, [r7, #24]
 8007a38:	429a      	cmp	r2, r3
 8007a3a:	d302      	bcc.n	8007a42 <UART_WaitOnFlagUntilTimeout+0x30>
 8007a3c:	69bb      	ldr	r3, [r7, #24]
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d11d      	bne.n	8007a7e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	681a      	ldr	r2, [r3, #0]
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007a50:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	689a      	ldr	r2, [r3, #8]
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	f022 0201 	bic.w	r2, r2, #1
 8007a60:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	2220      	movs	r2, #32
 8007a66:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	2220      	movs	r2, #32
 8007a6e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	2200      	movs	r2, #0
 8007a76:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8007a7a:	2303      	movs	r3, #3
 8007a7c:	e045      	b.n	8007b0a <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	f003 0304 	and.w	r3, r3, #4
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d02e      	beq.n	8007aea <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	69db      	ldr	r3, [r3, #28]
 8007a92:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007a96:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007a9a:	d126      	bne.n	8007aea <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007aa4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	681a      	ldr	r2, [r3, #0]
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007ab4:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	689a      	ldr	r2, [r3, #8]
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	f022 0201 	bic.w	r2, r2, #1
 8007ac4:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	2220      	movs	r2, #32
 8007aca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	2220      	movs	r2, #32
 8007ad2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	2220      	movs	r2, #32
 8007ada:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	2200      	movs	r2, #0
 8007ae2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8007ae6:	2303      	movs	r3, #3
 8007ae8:	e00f      	b.n	8007b0a <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	69da      	ldr	r2, [r3, #28]
 8007af0:	68bb      	ldr	r3, [r7, #8]
 8007af2:	4013      	ands	r3, r2
 8007af4:	68ba      	ldr	r2, [r7, #8]
 8007af6:	429a      	cmp	r2, r3
 8007af8:	bf0c      	ite	eq
 8007afa:	2301      	moveq	r3, #1
 8007afc:	2300      	movne	r3, #0
 8007afe:	b2db      	uxtb	r3, r3
 8007b00:	461a      	mov	r2, r3
 8007b02:	79fb      	ldrb	r3, [r7, #7]
 8007b04:	429a      	cmp	r2, r3
 8007b06:	d08d      	beq.n	8007a24 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007b08:	2300      	movs	r3, #0
}
 8007b0a:	4618      	mov	r0, r3
 8007b0c:	3710      	adds	r7, #16
 8007b0e:	46bd      	mov	sp, r7
 8007b10:	bd80      	pop	{r7, pc}
	...

08007b14 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007b14:	b480      	push	{r7}
 8007b16:	b083      	sub	sp, #12
 8007b18:	af00      	add	r7, sp, #0
 8007b1a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	681a      	ldr	r2, [r3, #0]
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007b2a:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	6899      	ldr	r1, [r3, #8]
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	681a      	ldr	r2, [r3, #0]
 8007b36:	4b0f      	ldr	r3, [pc, #60]	; (8007b74 <UART_EndRxTransfer+0x60>)
 8007b38:	400b      	ands	r3, r1
 8007b3a:	6093      	str	r3, [r2, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007b40:	2b01      	cmp	r3, #1
 8007b42:	d107      	bne.n	8007b54 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	681a      	ldr	r2, [r3, #0]
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	f022 0210 	bic.w	r2, r2, #16
 8007b52:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	2220      	movs	r2, #32
 8007b58:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	2200      	movs	r2, #0
 8007b60:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	2200      	movs	r2, #0
 8007b66:	671a      	str	r2, [r3, #112]	; 0x70
}
 8007b68:	bf00      	nop
 8007b6a:	370c      	adds	r7, #12
 8007b6c:	46bd      	mov	sp, r7
 8007b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b72:	4770      	bx	lr
 8007b74:	effffffe 	.word	0xeffffffe

08007b78 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007b78:	b580      	push	{r7, lr}
 8007b7a:	b084      	sub	sp, #16
 8007b7c:	af00      	add	r7, sp, #0
 8007b7e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b84:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	2200      	movs	r2, #0
 8007b8a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	2200      	movs	r2, #0
 8007b92:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007b96:	68f8      	ldr	r0, [r7, #12]
 8007b98:	f7ff f8d8 	bl	8006d4c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007b9c:	bf00      	nop
 8007b9e:	3710      	adds	r7, #16
 8007ba0:	46bd      	mov	sp, r7
 8007ba2:	bd80      	pop	{r7, pc}

08007ba4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007ba4:	b580      	push	{r7, lr}
 8007ba6:	b082      	sub	sp, #8
 8007ba8:	af00      	add	r7, sp, #0
 8007baa:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	681a      	ldr	r2, [r3, #0]
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007bba:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	2220      	movs	r2, #32
 8007bc0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	2200      	movs	r2, #0
 8007bc8:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007bca:	6878      	ldr	r0, [r7, #4]
 8007bcc:	f7ff f8b4 	bl	8006d38 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007bd0:	bf00      	nop
 8007bd2:	3708      	adds	r7, #8
 8007bd4:	46bd      	mov	sp, r7
 8007bd6:	bd80      	pop	{r7, pc}

08007bd8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007bd8:	b480      	push	{r7}
 8007bda:	b083      	sub	sp, #12
 8007bdc:	af00      	add	r7, sp, #0
 8007bde:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007be0:	bf00      	nop
 8007be2:	370c      	adds	r7, #12
 8007be4:	46bd      	mov	sp, r7
 8007be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bea:	4770      	bx	lr

08007bec <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8007bec:	b480      	push	{r7}
 8007bee:	b083      	sub	sp, #12
 8007bf0:	af00      	add	r7, sp, #0
 8007bf2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8007bf4:	bf00      	nop
 8007bf6:	370c      	adds	r7, #12
 8007bf8:	46bd      	mov	sp, r7
 8007bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bfe:	4770      	bx	lr

08007c00 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8007c00:	b480      	push	{r7}
 8007c02:	b083      	sub	sp, #12
 8007c04:	af00      	add	r7, sp, #0
 8007c06:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8007c08:	bf00      	nop
 8007c0a:	370c      	adds	r7, #12
 8007c0c:	46bd      	mov	sp, r7
 8007c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c12:	4770      	bx	lr

08007c14 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007c14:	b480      	push	{r7}
 8007c16:	b085      	sub	sp, #20
 8007c18:	af00      	add	r7, sp, #0
 8007c1a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007c22:	2b01      	cmp	r3, #1
 8007c24:	d101      	bne.n	8007c2a <HAL_UARTEx_DisableFifoMode+0x16>
 8007c26:	2302      	movs	r3, #2
 8007c28:	e027      	b.n	8007c7a <HAL_UARTEx_DisableFifoMode+0x66>
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	2201      	movs	r2, #1
 8007c2e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	2224      	movs	r2, #36	; 0x24
 8007c36:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	681a      	ldr	r2, [r3, #0]
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	f022 0201 	bic.w	r2, r2, #1
 8007c50:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007c58:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	2200      	movs	r2, #0
 8007c5e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	68fa      	ldr	r2, [r7, #12]
 8007c66:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	2220      	movs	r2, #32
 8007c6c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	2200      	movs	r2, #0
 8007c74:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007c78:	2300      	movs	r3, #0
}
 8007c7a:	4618      	mov	r0, r3
 8007c7c:	3714      	adds	r7, #20
 8007c7e:	46bd      	mov	sp, r7
 8007c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c84:	4770      	bx	lr

08007c86 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007c86:	b580      	push	{r7, lr}
 8007c88:	b084      	sub	sp, #16
 8007c8a:	af00      	add	r7, sp, #0
 8007c8c:	6078      	str	r0, [r7, #4]
 8007c8e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007c96:	2b01      	cmp	r3, #1
 8007c98:	d101      	bne.n	8007c9e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007c9a:	2302      	movs	r3, #2
 8007c9c:	e02d      	b.n	8007cfa <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	2201      	movs	r2, #1
 8007ca2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	2224      	movs	r2, #36	; 0x24
 8007caa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	681a      	ldr	r2, [r3, #0]
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	f022 0201 	bic.w	r2, r2, #1
 8007cc4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	689b      	ldr	r3, [r3, #8]
 8007ccc:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	683a      	ldr	r2, [r7, #0]
 8007cd6:	430a      	orrs	r2, r1
 8007cd8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007cda:	6878      	ldr	r0, [r7, #4]
 8007cdc:	f000 f850 	bl	8007d80 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	68fa      	ldr	r2, [r7, #12]
 8007ce6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	2220      	movs	r2, #32
 8007cec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	2200      	movs	r2, #0
 8007cf4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007cf8:	2300      	movs	r3, #0
}
 8007cfa:	4618      	mov	r0, r3
 8007cfc:	3710      	adds	r7, #16
 8007cfe:	46bd      	mov	sp, r7
 8007d00:	bd80      	pop	{r7, pc}

08007d02 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007d02:	b580      	push	{r7, lr}
 8007d04:	b084      	sub	sp, #16
 8007d06:	af00      	add	r7, sp, #0
 8007d08:	6078      	str	r0, [r7, #4]
 8007d0a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007d12:	2b01      	cmp	r3, #1
 8007d14:	d101      	bne.n	8007d1a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007d16:	2302      	movs	r3, #2
 8007d18:	e02d      	b.n	8007d76 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	2201      	movs	r2, #1
 8007d1e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	2224      	movs	r2, #36	; 0x24
 8007d26:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	681a      	ldr	r2, [r3, #0]
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	f022 0201 	bic.w	r2, r2, #1
 8007d40:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	689b      	ldr	r3, [r3, #8]
 8007d48:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	683a      	ldr	r2, [r7, #0]
 8007d52:	430a      	orrs	r2, r1
 8007d54:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007d56:	6878      	ldr	r0, [r7, #4]
 8007d58:	f000 f812 	bl	8007d80 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	68fa      	ldr	r2, [r7, #12]
 8007d62:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	2220      	movs	r2, #32
 8007d68:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	2200      	movs	r2, #0
 8007d70:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007d74:	2300      	movs	r3, #0
}
 8007d76:	4618      	mov	r0, r3
 8007d78:	3710      	adds	r7, #16
 8007d7a:	46bd      	mov	sp, r7
 8007d7c:	bd80      	pop	{r7, pc}
	...

08007d80 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007d80:	b480      	push	{r7}
 8007d82:	b085      	sub	sp, #20
 8007d84:	af00      	add	r7, sp, #0
 8007d86:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d108      	bne.n	8007da2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	2201      	movs	r2, #1
 8007d94:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	2201      	movs	r2, #1
 8007d9c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007da0:	e031      	b.n	8007e06 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007da2:	2310      	movs	r3, #16
 8007da4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007da6:	2310      	movs	r3, #16
 8007da8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	689b      	ldr	r3, [r3, #8]
 8007db0:	0e5b      	lsrs	r3, r3, #25
 8007db2:	b2db      	uxtb	r3, r3
 8007db4:	f003 0307 	and.w	r3, r3, #7
 8007db8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	689b      	ldr	r3, [r3, #8]
 8007dc0:	0f5b      	lsrs	r3, r3, #29
 8007dc2:	b2db      	uxtb	r3, r3
 8007dc4:	f003 0307 	and.w	r3, r3, #7
 8007dc8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007dca:	7bbb      	ldrb	r3, [r7, #14]
 8007dcc:	7b3a      	ldrb	r2, [r7, #12]
 8007dce:	4911      	ldr	r1, [pc, #68]	; (8007e14 <UARTEx_SetNbDataToProcess+0x94>)
 8007dd0:	5c8a      	ldrb	r2, [r1, r2]
 8007dd2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007dd6:	7b3a      	ldrb	r2, [r7, #12]
 8007dd8:	490f      	ldr	r1, [pc, #60]	; (8007e18 <UARTEx_SetNbDataToProcess+0x98>)
 8007dda:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007ddc:	fb93 f3f2 	sdiv	r3, r3, r2
 8007de0:	b29a      	uxth	r2, r3
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007de8:	7bfb      	ldrb	r3, [r7, #15]
 8007dea:	7b7a      	ldrb	r2, [r7, #13]
 8007dec:	4909      	ldr	r1, [pc, #36]	; (8007e14 <UARTEx_SetNbDataToProcess+0x94>)
 8007dee:	5c8a      	ldrb	r2, [r1, r2]
 8007df0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007df4:	7b7a      	ldrb	r2, [r7, #13]
 8007df6:	4908      	ldr	r1, [pc, #32]	; (8007e18 <UARTEx_SetNbDataToProcess+0x98>)
 8007df8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007dfa:	fb93 f3f2 	sdiv	r3, r3, r2
 8007dfe:	b29a      	uxth	r2, r3
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8007e06:	bf00      	nop
 8007e08:	3714      	adds	r7, #20
 8007e0a:	46bd      	mov	sp, r7
 8007e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e10:	4770      	bx	lr
 8007e12:	bf00      	nop
 8007e14:	0800aa4c 	.word	0x0800aa4c
 8007e18:	0800aa54 	.word	0x0800aa54

08007e1c <__NVIC_SetPriority>:
{
 8007e1c:	b480      	push	{r7}
 8007e1e:	b083      	sub	sp, #12
 8007e20:	af00      	add	r7, sp, #0
 8007e22:	4603      	mov	r3, r0
 8007e24:	6039      	str	r1, [r7, #0]
 8007e26:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8007e28:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	db0a      	blt.n	8007e46 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007e30:	683b      	ldr	r3, [r7, #0]
 8007e32:	b2da      	uxtb	r2, r3
 8007e34:	490c      	ldr	r1, [pc, #48]	; (8007e68 <__NVIC_SetPriority+0x4c>)
 8007e36:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007e3a:	0112      	lsls	r2, r2, #4
 8007e3c:	b2d2      	uxtb	r2, r2
 8007e3e:	440b      	add	r3, r1
 8007e40:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8007e44:	e00a      	b.n	8007e5c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007e46:	683b      	ldr	r3, [r7, #0]
 8007e48:	b2da      	uxtb	r2, r3
 8007e4a:	4908      	ldr	r1, [pc, #32]	; (8007e6c <__NVIC_SetPriority+0x50>)
 8007e4c:	88fb      	ldrh	r3, [r7, #6]
 8007e4e:	f003 030f 	and.w	r3, r3, #15
 8007e52:	3b04      	subs	r3, #4
 8007e54:	0112      	lsls	r2, r2, #4
 8007e56:	b2d2      	uxtb	r2, r2
 8007e58:	440b      	add	r3, r1
 8007e5a:	761a      	strb	r2, [r3, #24]
}
 8007e5c:	bf00      	nop
 8007e5e:	370c      	adds	r7, #12
 8007e60:	46bd      	mov	sp, r7
 8007e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e66:	4770      	bx	lr
 8007e68:	e000e100 	.word	0xe000e100
 8007e6c:	e000ed00 	.word	0xe000ed00

08007e70 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8007e70:	b580      	push	{r7, lr}
 8007e72:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8007e74:	4b05      	ldr	r3, [pc, #20]	; (8007e8c <SysTick_Handler+0x1c>)
 8007e76:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8007e78:	f002 f938 	bl	800a0ec <xTaskGetSchedulerState>
 8007e7c:	4603      	mov	r3, r0
 8007e7e:	2b01      	cmp	r3, #1
 8007e80:	d001      	beq.n	8007e86 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8007e82:	f000 fd99 	bl	80089b8 <xPortSysTickHandler>
  }
}
 8007e86:	bf00      	nop
 8007e88:	bd80      	pop	{r7, pc}
 8007e8a:	bf00      	nop
 8007e8c:	e000e010 	.word	0xe000e010

08007e90 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8007e90:	b580      	push	{r7, lr}
 8007e92:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8007e94:	2100      	movs	r1, #0
 8007e96:	f06f 0004 	mvn.w	r0, #4
 8007e9a:	f7ff ffbf 	bl	8007e1c <__NVIC_SetPriority>
#endif
}
 8007e9e:	bf00      	nop
 8007ea0:	bd80      	pop	{r7, pc}
	...

08007ea4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8007ea4:	b480      	push	{r7}
 8007ea6:	b083      	sub	sp, #12
 8007ea8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007eaa:	f3ef 8305 	mrs	r3, IPSR
 8007eae:	603b      	str	r3, [r7, #0]
  return(result);
 8007eb0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d003      	beq.n	8007ebe <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8007eb6:	f06f 0305 	mvn.w	r3, #5
 8007eba:	607b      	str	r3, [r7, #4]
 8007ebc:	e00c      	b.n	8007ed8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8007ebe:	4b0a      	ldr	r3, [pc, #40]	; (8007ee8 <osKernelInitialize+0x44>)
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d105      	bne.n	8007ed2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8007ec6:	4b08      	ldr	r3, [pc, #32]	; (8007ee8 <osKernelInitialize+0x44>)
 8007ec8:	2201      	movs	r2, #1
 8007eca:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8007ecc:	2300      	movs	r3, #0
 8007ece:	607b      	str	r3, [r7, #4]
 8007ed0:	e002      	b.n	8007ed8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8007ed2:	f04f 33ff 	mov.w	r3, #4294967295
 8007ed6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007ed8:	687b      	ldr	r3, [r7, #4]
}
 8007eda:	4618      	mov	r0, r3
 8007edc:	370c      	adds	r7, #12
 8007ede:	46bd      	mov	sp, r7
 8007ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee4:	4770      	bx	lr
 8007ee6:	bf00      	nop
 8007ee8:	20000030 	.word	0x20000030

08007eec <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8007eec:	b580      	push	{r7, lr}
 8007eee:	b082      	sub	sp, #8
 8007ef0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007ef2:	f3ef 8305 	mrs	r3, IPSR
 8007ef6:	603b      	str	r3, [r7, #0]
  return(result);
 8007ef8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d003      	beq.n	8007f06 <osKernelStart+0x1a>
    stat = osErrorISR;
 8007efe:	f06f 0305 	mvn.w	r3, #5
 8007f02:	607b      	str	r3, [r7, #4]
 8007f04:	e010      	b.n	8007f28 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8007f06:	4b0b      	ldr	r3, [pc, #44]	; (8007f34 <osKernelStart+0x48>)
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	2b01      	cmp	r3, #1
 8007f0c:	d109      	bne.n	8007f22 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8007f0e:	f7ff ffbf 	bl	8007e90 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8007f12:	4b08      	ldr	r3, [pc, #32]	; (8007f34 <osKernelStart+0x48>)
 8007f14:	2202      	movs	r2, #2
 8007f16:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8007f18:	f001 fca0 	bl	800985c <vTaskStartScheduler>
      stat = osOK;
 8007f1c:	2300      	movs	r3, #0
 8007f1e:	607b      	str	r3, [r7, #4]
 8007f20:	e002      	b.n	8007f28 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8007f22:	f04f 33ff 	mov.w	r3, #4294967295
 8007f26:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007f28:	687b      	ldr	r3, [r7, #4]
}
 8007f2a:	4618      	mov	r0, r3
 8007f2c:	3708      	adds	r7, #8
 8007f2e:	46bd      	mov	sp, r7
 8007f30:	bd80      	pop	{r7, pc}
 8007f32:	bf00      	nop
 8007f34:	20000030 	.word	0x20000030

08007f38 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8007f38:	b580      	push	{r7, lr}
 8007f3a:	b08e      	sub	sp, #56	; 0x38
 8007f3c:	af04      	add	r7, sp, #16
 8007f3e:	60f8      	str	r0, [r7, #12]
 8007f40:	60b9      	str	r1, [r7, #8]
 8007f42:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8007f44:	2300      	movs	r3, #0
 8007f46:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007f48:	f3ef 8305 	mrs	r3, IPSR
 8007f4c:	617b      	str	r3, [r7, #20]
  return(result);
 8007f4e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d17e      	bne.n	8008052 <osThreadNew+0x11a>
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d07b      	beq.n	8008052 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8007f5a:	2380      	movs	r3, #128	; 0x80
 8007f5c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8007f5e:	2318      	movs	r3, #24
 8007f60:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8007f62:	2300      	movs	r3, #0
 8007f64:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8007f66:	f04f 33ff 	mov.w	r3, #4294967295
 8007f6a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d045      	beq.n	8007ffe <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d002      	beq.n	8007f80 <osThreadNew+0x48>
        name = attr->name;
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	699b      	ldr	r3, [r3, #24]
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d002      	beq.n	8007f8e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	699b      	ldr	r3, [r3, #24]
 8007f8c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8007f8e:	69fb      	ldr	r3, [r7, #28]
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d008      	beq.n	8007fa6 <osThreadNew+0x6e>
 8007f94:	69fb      	ldr	r3, [r7, #28]
 8007f96:	2b38      	cmp	r3, #56	; 0x38
 8007f98:	d805      	bhi.n	8007fa6 <osThreadNew+0x6e>
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	685b      	ldr	r3, [r3, #4]
 8007f9e:	f003 0301 	and.w	r3, r3, #1
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d001      	beq.n	8007faa <osThreadNew+0x72>
        return (NULL);
 8007fa6:	2300      	movs	r3, #0
 8007fa8:	e054      	b.n	8008054 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	695b      	ldr	r3, [r3, #20]
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d003      	beq.n	8007fba <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	695b      	ldr	r3, [r3, #20]
 8007fb6:	089b      	lsrs	r3, r3, #2
 8007fb8:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	689b      	ldr	r3, [r3, #8]
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d00e      	beq.n	8007fe0 <osThreadNew+0xa8>
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	68db      	ldr	r3, [r3, #12]
 8007fc6:	2b5b      	cmp	r3, #91	; 0x5b
 8007fc8:	d90a      	bls.n	8007fe0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d006      	beq.n	8007fe0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	695b      	ldr	r3, [r3, #20]
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d002      	beq.n	8007fe0 <osThreadNew+0xa8>
        mem = 1;
 8007fda:	2301      	movs	r3, #1
 8007fdc:	61bb      	str	r3, [r7, #24]
 8007fde:	e010      	b.n	8008002 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	689b      	ldr	r3, [r3, #8]
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d10c      	bne.n	8008002 <osThreadNew+0xca>
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	68db      	ldr	r3, [r3, #12]
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d108      	bne.n	8008002 <osThreadNew+0xca>
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	691b      	ldr	r3, [r3, #16]
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d104      	bne.n	8008002 <osThreadNew+0xca>
          mem = 0;
 8007ff8:	2300      	movs	r3, #0
 8007ffa:	61bb      	str	r3, [r7, #24]
 8007ffc:	e001      	b.n	8008002 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8007ffe:	2300      	movs	r3, #0
 8008000:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8008002:	69bb      	ldr	r3, [r7, #24]
 8008004:	2b01      	cmp	r3, #1
 8008006:	d110      	bne.n	800802a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800800c:	687a      	ldr	r2, [r7, #4]
 800800e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008010:	9202      	str	r2, [sp, #8]
 8008012:	9301      	str	r3, [sp, #4]
 8008014:	69fb      	ldr	r3, [r7, #28]
 8008016:	9300      	str	r3, [sp, #0]
 8008018:	68bb      	ldr	r3, [r7, #8]
 800801a:	6a3a      	ldr	r2, [r7, #32]
 800801c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800801e:	68f8      	ldr	r0, [r7, #12]
 8008020:	f001 fa46 	bl	80094b0 <xTaskCreateStatic>
 8008024:	4603      	mov	r3, r0
 8008026:	613b      	str	r3, [r7, #16]
 8008028:	e013      	b.n	8008052 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800802a:	69bb      	ldr	r3, [r7, #24]
 800802c:	2b00      	cmp	r3, #0
 800802e:	d110      	bne.n	8008052 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8008030:	6a3b      	ldr	r3, [r7, #32]
 8008032:	b29a      	uxth	r2, r3
 8008034:	f107 0310 	add.w	r3, r7, #16
 8008038:	9301      	str	r3, [sp, #4]
 800803a:	69fb      	ldr	r3, [r7, #28]
 800803c:	9300      	str	r3, [sp, #0]
 800803e:	68bb      	ldr	r3, [r7, #8]
 8008040:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008042:	68f8      	ldr	r0, [r7, #12]
 8008044:	f001 fa91 	bl	800956a <xTaskCreate>
 8008048:	4603      	mov	r3, r0
 800804a:	2b01      	cmp	r3, #1
 800804c:	d001      	beq.n	8008052 <osThreadNew+0x11a>
            hTask = NULL;
 800804e:	2300      	movs	r3, #0
 8008050:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8008052:	693b      	ldr	r3, [r7, #16]
}
 8008054:	4618      	mov	r0, r3
 8008056:	3728      	adds	r7, #40	; 0x28
 8008058:	46bd      	mov	sp, r7
 800805a:	bd80      	pop	{r7, pc}

0800805c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800805c:	b580      	push	{r7, lr}
 800805e:	b084      	sub	sp, #16
 8008060:	af00      	add	r7, sp, #0
 8008062:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008064:	f3ef 8305 	mrs	r3, IPSR
 8008068:	60bb      	str	r3, [r7, #8]
  return(result);
 800806a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800806c:	2b00      	cmp	r3, #0
 800806e:	d003      	beq.n	8008078 <osDelay+0x1c>
    stat = osErrorISR;
 8008070:	f06f 0305 	mvn.w	r3, #5
 8008074:	60fb      	str	r3, [r7, #12]
 8008076:	e007      	b.n	8008088 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8008078:	2300      	movs	r3, #0
 800807a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	2b00      	cmp	r3, #0
 8008080:	d002      	beq.n	8008088 <osDelay+0x2c>
      vTaskDelay(ticks);
 8008082:	6878      	ldr	r0, [r7, #4]
 8008084:	f001 fbb6 	bl	80097f4 <vTaskDelay>
    }
  }

  return (stat);
 8008088:	68fb      	ldr	r3, [r7, #12]
}
 800808a:	4618      	mov	r0, r3
 800808c:	3710      	adds	r7, #16
 800808e:	46bd      	mov	sp, r7
 8008090:	bd80      	pop	{r7, pc}
	...

08008094 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8008094:	b480      	push	{r7}
 8008096:	b085      	sub	sp, #20
 8008098:	af00      	add	r7, sp, #0
 800809a:	60f8      	str	r0, [r7, #12]
 800809c:	60b9      	str	r1, [r7, #8]
 800809e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	4a07      	ldr	r2, [pc, #28]	; (80080c0 <vApplicationGetIdleTaskMemory+0x2c>)
 80080a4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80080a6:	68bb      	ldr	r3, [r7, #8]
 80080a8:	4a06      	ldr	r2, [pc, #24]	; (80080c4 <vApplicationGetIdleTaskMemory+0x30>)
 80080aa:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	2280      	movs	r2, #128	; 0x80
 80080b0:	601a      	str	r2, [r3, #0]
}
 80080b2:	bf00      	nop
 80080b4:	3714      	adds	r7, #20
 80080b6:	46bd      	mov	sp, r7
 80080b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080bc:	4770      	bx	lr
 80080be:	bf00      	nop
 80080c0:	20000034 	.word	0x20000034
 80080c4:	20000090 	.word	0x20000090

080080c8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80080c8:	b480      	push	{r7}
 80080ca:	b085      	sub	sp, #20
 80080cc:	af00      	add	r7, sp, #0
 80080ce:	60f8      	str	r0, [r7, #12]
 80080d0:	60b9      	str	r1, [r7, #8]
 80080d2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	4a07      	ldr	r2, [pc, #28]	; (80080f4 <vApplicationGetTimerTaskMemory+0x2c>)
 80080d8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80080da:	68bb      	ldr	r3, [r7, #8]
 80080dc:	4a06      	ldr	r2, [pc, #24]	; (80080f8 <vApplicationGetTimerTaskMemory+0x30>)
 80080de:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80080e6:	601a      	str	r2, [r3, #0]
}
 80080e8:	bf00      	nop
 80080ea:	3714      	adds	r7, #20
 80080ec:	46bd      	mov	sp, r7
 80080ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f2:	4770      	bx	lr
 80080f4:	20000290 	.word	0x20000290
 80080f8:	200002ec 	.word	0x200002ec

080080fc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80080fc:	b580      	push	{r7, lr}
 80080fe:	b08a      	sub	sp, #40	; 0x28
 8008100:	af00      	add	r7, sp, #0
 8008102:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008104:	2300      	movs	r3, #0
 8008106:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008108:	f001 fc0e 	bl	8009928 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800810c:	4b5b      	ldr	r3, [pc, #364]	; (800827c <pvPortMalloc+0x180>)
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	2b00      	cmp	r3, #0
 8008112:	d101      	bne.n	8008118 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008114:	f000 f920 	bl	8008358 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008118:	4b59      	ldr	r3, [pc, #356]	; (8008280 <pvPortMalloc+0x184>)
 800811a:	681a      	ldr	r2, [r3, #0]
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	4013      	ands	r3, r2
 8008120:	2b00      	cmp	r3, #0
 8008122:	f040 8093 	bne.w	800824c <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	2b00      	cmp	r3, #0
 800812a:	d01d      	beq.n	8008168 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800812c:	2208      	movs	r2, #8
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	4413      	add	r3, r2
 8008132:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	f003 0307 	and.w	r3, r3, #7
 800813a:	2b00      	cmp	r3, #0
 800813c:	d014      	beq.n	8008168 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	f023 0307 	bic.w	r3, r3, #7
 8008144:	3308      	adds	r3, #8
 8008146:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	f003 0307 	and.w	r3, r3, #7
 800814e:	2b00      	cmp	r3, #0
 8008150:	d00a      	beq.n	8008168 <pvPortMalloc+0x6c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008152:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008156:	f383 8811 	msr	BASEPRI, r3
 800815a:	f3bf 8f6f 	isb	sy
 800815e:	f3bf 8f4f 	dsb	sy
 8008162:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8008164:	bf00      	nop
 8008166:	e7fe      	b.n	8008166 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	2b00      	cmp	r3, #0
 800816c:	d06e      	beq.n	800824c <pvPortMalloc+0x150>
 800816e:	4b45      	ldr	r3, [pc, #276]	; (8008284 <pvPortMalloc+0x188>)
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	687a      	ldr	r2, [r7, #4]
 8008174:	429a      	cmp	r2, r3
 8008176:	d869      	bhi.n	800824c <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008178:	4b43      	ldr	r3, [pc, #268]	; (8008288 <pvPortMalloc+0x18c>)
 800817a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800817c:	4b42      	ldr	r3, [pc, #264]	; (8008288 <pvPortMalloc+0x18c>)
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008182:	e004      	b.n	800818e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8008184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008186:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800818e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008190:	685b      	ldr	r3, [r3, #4]
 8008192:	687a      	ldr	r2, [r7, #4]
 8008194:	429a      	cmp	r2, r3
 8008196:	d903      	bls.n	80081a0 <pvPortMalloc+0xa4>
 8008198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	2b00      	cmp	r3, #0
 800819e:	d1f1      	bne.n	8008184 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80081a0:	4b36      	ldr	r3, [pc, #216]	; (800827c <pvPortMalloc+0x180>)
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80081a6:	429a      	cmp	r2, r3
 80081a8:	d050      	beq.n	800824c <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80081aa:	6a3b      	ldr	r3, [r7, #32]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	2208      	movs	r2, #8
 80081b0:	4413      	add	r3, r2
 80081b2:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80081b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081b6:	681a      	ldr	r2, [r3, #0]
 80081b8:	6a3b      	ldr	r3, [r7, #32]
 80081ba:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80081bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081be:	685a      	ldr	r2, [r3, #4]
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	1ad2      	subs	r2, r2, r3
 80081c4:	2308      	movs	r3, #8
 80081c6:	005b      	lsls	r3, r3, #1
 80081c8:	429a      	cmp	r2, r3
 80081ca:	d91f      	bls.n	800820c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80081cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	4413      	add	r3, r2
 80081d2:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80081d4:	69bb      	ldr	r3, [r7, #24]
 80081d6:	f003 0307 	and.w	r3, r3, #7
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d00a      	beq.n	80081f4 <pvPortMalloc+0xf8>
	__asm volatile
 80081de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081e2:	f383 8811 	msr	BASEPRI, r3
 80081e6:	f3bf 8f6f 	isb	sy
 80081ea:	f3bf 8f4f 	dsb	sy
 80081ee:	613b      	str	r3, [r7, #16]
}
 80081f0:	bf00      	nop
 80081f2:	e7fe      	b.n	80081f2 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80081f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081f6:	685a      	ldr	r2, [r3, #4]
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	1ad2      	subs	r2, r2, r3
 80081fc:	69bb      	ldr	r3, [r7, #24]
 80081fe:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008202:	687a      	ldr	r2, [r7, #4]
 8008204:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008206:	69b8      	ldr	r0, [r7, #24]
 8008208:	f000 f908 	bl	800841c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800820c:	4b1d      	ldr	r3, [pc, #116]	; (8008284 <pvPortMalloc+0x188>)
 800820e:	681a      	ldr	r2, [r3, #0]
 8008210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008212:	685b      	ldr	r3, [r3, #4]
 8008214:	1ad3      	subs	r3, r2, r3
 8008216:	4a1b      	ldr	r2, [pc, #108]	; (8008284 <pvPortMalloc+0x188>)
 8008218:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800821a:	4b1a      	ldr	r3, [pc, #104]	; (8008284 <pvPortMalloc+0x188>)
 800821c:	681a      	ldr	r2, [r3, #0]
 800821e:	4b1b      	ldr	r3, [pc, #108]	; (800828c <pvPortMalloc+0x190>)
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	429a      	cmp	r2, r3
 8008224:	d203      	bcs.n	800822e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008226:	4b17      	ldr	r3, [pc, #92]	; (8008284 <pvPortMalloc+0x188>)
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	4a18      	ldr	r2, [pc, #96]	; (800828c <pvPortMalloc+0x190>)
 800822c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800822e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008230:	685a      	ldr	r2, [r3, #4]
 8008232:	4b13      	ldr	r3, [pc, #76]	; (8008280 <pvPortMalloc+0x184>)
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	431a      	orrs	r2, r3
 8008238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800823a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800823c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800823e:	2200      	movs	r2, #0
 8008240:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8008242:	4b13      	ldr	r3, [pc, #76]	; (8008290 <pvPortMalloc+0x194>)
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	3301      	adds	r3, #1
 8008248:	4a11      	ldr	r2, [pc, #68]	; (8008290 <pvPortMalloc+0x194>)
 800824a:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800824c:	f001 fb7a 	bl	8009944 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008250:	69fb      	ldr	r3, [r7, #28]
 8008252:	f003 0307 	and.w	r3, r3, #7
 8008256:	2b00      	cmp	r3, #0
 8008258:	d00a      	beq.n	8008270 <pvPortMalloc+0x174>
	__asm volatile
 800825a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800825e:	f383 8811 	msr	BASEPRI, r3
 8008262:	f3bf 8f6f 	isb	sy
 8008266:	f3bf 8f4f 	dsb	sy
 800826a:	60fb      	str	r3, [r7, #12]
}
 800826c:	bf00      	nop
 800826e:	e7fe      	b.n	800826e <pvPortMalloc+0x172>
	return pvReturn;
 8008270:	69fb      	ldr	r3, [r7, #28]
}
 8008272:	4618      	mov	r0, r3
 8008274:	3728      	adds	r7, #40	; 0x28
 8008276:	46bd      	mov	sp, r7
 8008278:	bd80      	pop	{r7, pc}
 800827a:	bf00      	nop
 800827c:	200042f4 	.word	0x200042f4
 8008280:	20004308 	.word	0x20004308
 8008284:	200042f8 	.word	0x200042f8
 8008288:	200042ec 	.word	0x200042ec
 800828c:	200042fc 	.word	0x200042fc
 8008290:	20004300 	.word	0x20004300

08008294 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008294:	b580      	push	{r7, lr}
 8008296:	b086      	sub	sp, #24
 8008298:	af00      	add	r7, sp, #0
 800829a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d04d      	beq.n	8008342 <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80082a6:	2308      	movs	r3, #8
 80082a8:	425b      	negs	r3, r3
 80082aa:	697a      	ldr	r2, [r7, #20]
 80082ac:	4413      	add	r3, r2
 80082ae:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80082b0:	697b      	ldr	r3, [r7, #20]
 80082b2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80082b4:	693b      	ldr	r3, [r7, #16]
 80082b6:	685a      	ldr	r2, [r3, #4]
 80082b8:	4b24      	ldr	r3, [pc, #144]	; (800834c <vPortFree+0xb8>)
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	4013      	ands	r3, r2
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d10a      	bne.n	80082d8 <vPortFree+0x44>
	__asm volatile
 80082c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082c6:	f383 8811 	msr	BASEPRI, r3
 80082ca:	f3bf 8f6f 	isb	sy
 80082ce:	f3bf 8f4f 	dsb	sy
 80082d2:	60fb      	str	r3, [r7, #12]
}
 80082d4:	bf00      	nop
 80082d6:	e7fe      	b.n	80082d6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80082d8:	693b      	ldr	r3, [r7, #16]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d00a      	beq.n	80082f6 <vPortFree+0x62>
	__asm volatile
 80082e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082e4:	f383 8811 	msr	BASEPRI, r3
 80082e8:	f3bf 8f6f 	isb	sy
 80082ec:	f3bf 8f4f 	dsb	sy
 80082f0:	60bb      	str	r3, [r7, #8]
}
 80082f2:	bf00      	nop
 80082f4:	e7fe      	b.n	80082f4 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80082f6:	693b      	ldr	r3, [r7, #16]
 80082f8:	685a      	ldr	r2, [r3, #4]
 80082fa:	4b14      	ldr	r3, [pc, #80]	; (800834c <vPortFree+0xb8>)
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	4013      	ands	r3, r2
 8008300:	2b00      	cmp	r3, #0
 8008302:	d01e      	beq.n	8008342 <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008304:	693b      	ldr	r3, [r7, #16]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	2b00      	cmp	r3, #0
 800830a:	d11a      	bne.n	8008342 <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800830c:	693b      	ldr	r3, [r7, #16]
 800830e:	685a      	ldr	r2, [r3, #4]
 8008310:	4b0e      	ldr	r3, [pc, #56]	; (800834c <vPortFree+0xb8>)
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	43db      	mvns	r3, r3
 8008316:	401a      	ands	r2, r3
 8008318:	693b      	ldr	r3, [r7, #16]
 800831a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800831c:	f001 fb04 	bl	8009928 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008320:	693b      	ldr	r3, [r7, #16]
 8008322:	685a      	ldr	r2, [r3, #4]
 8008324:	4b0a      	ldr	r3, [pc, #40]	; (8008350 <vPortFree+0xbc>)
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	4413      	add	r3, r2
 800832a:	4a09      	ldr	r2, [pc, #36]	; (8008350 <vPortFree+0xbc>)
 800832c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800832e:	6938      	ldr	r0, [r7, #16]
 8008330:	f000 f874 	bl	800841c <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008334:	4b07      	ldr	r3, [pc, #28]	; (8008354 <vPortFree+0xc0>)
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	3301      	adds	r3, #1
 800833a:	4a06      	ldr	r2, [pc, #24]	; (8008354 <vPortFree+0xc0>)
 800833c:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800833e:	f001 fb01 	bl	8009944 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008342:	bf00      	nop
 8008344:	3718      	adds	r7, #24
 8008346:	46bd      	mov	sp, r7
 8008348:	bd80      	pop	{r7, pc}
 800834a:	bf00      	nop
 800834c:	20004308 	.word	0x20004308
 8008350:	200042f8 	.word	0x200042f8
 8008354:	20004304 	.word	0x20004304

08008358 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008358:	b480      	push	{r7}
 800835a:	b085      	sub	sp, #20
 800835c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800835e:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8008362:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008364:	4b27      	ldr	r3, [pc, #156]	; (8008404 <prvHeapInit+0xac>)
 8008366:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	f003 0307 	and.w	r3, r3, #7
 800836e:	2b00      	cmp	r3, #0
 8008370:	d00c      	beq.n	800838c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	3307      	adds	r3, #7
 8008376:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	f023 0307 	bic.w	r3, r3, #7
 800837e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008380:	68ba      	ldr	r2, [r7, #8]
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	1ad3      	subs	r3, r2, r3
 8008386:	4a1f      	ldr	r2, [pc, #124]	; (8008404 <prvHeapInit+0xac>)
 8008388:	4413      	add	r3, r2
 800838a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008390:	4a1d      	ldr	r2, [pc, #116]	; (8008408 <prvHeapInit+0xb0>)
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008396:	4b1c      	ldr	r3, [pc, #112]	; (8008408 <prvHeapInit+0xb0>)
 8008398:	2200      	movs	r2, #0
 800839a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	68ba      	ldr	r2, [r7, #8]
 80083a0:	4413      	add	r3, r2
 80083a2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80083a4:	2208      	movs	r2, #8
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	1a9b      	subs	r3, r3, r2
 80083aa:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	f023 0307 	bic.w	r3, r3, #7
 80083b2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	4a15      	ldr	r2, [pc, #84]	; (800840c <prvHeapInit+0xb4>)
 80083b8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80083ba:	4b14      	ldr	r3, [pc, #80]	; (800840c <prvHeapInit+0xb4>)
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	2200      	movs	r2, #0
 80083c0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80083c2:	4b12      	ldr	r3, [pc, #72]	; (800840c <prvHeapInit+0xb4>)
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	2200      	movs	r2, #0
 80083c8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80083ce:	683b      	ldr	r3, [r7, #0]
 80083d0:	68fa      	ldr	r2, [r7, #12]
 80083d2:	1ad2      	subs	r2, r2, r3
 80083d4:	683b      	ldr	r3, [r7, #0]
 80083d6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80083d8:	4b0c      	ldr	r3, [pc, #48]	; (800840c <prvHeapInit+0xb4>)
 80083da:	681a      	ldr	r2, [r3, #0]
 80083dc:	683b      	ldr	r3, [r7, #0]
 80083de:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80083e0:	683b      	ldr	r3, [r7, #0]
 80083e2:	685b      	ldr	r3, [r3, #4]
 80083e4:	4a0a      	ldr	r2, [pc, #40]	; (8008410 <prvHeapInit+0xb8>)
 80083e6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80083e8:	683b      	ldr	r3, [r7, #0]
 80083ea:	685b      	ldr	r3, [r3, #4]
 80083ec:	4a09      	ldr	r2, [pc, #36]	; (8008414 <prvHeapInit+0xbc>)
 80083ee:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80083f0:	4b09      	ldr	r3, [pc, #36]	; (8008418 <prvHeapInit+0xc0>)
 80083f2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80083f6:	601a      	str	r2, [r3, #0]
}
 80083f8:	bf00      	nop
 80083fa:	3714      	adds	r7, #20
 80083fc:	46bd      	mov	sp, r7
 80083fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008402:	4770      	bx	lr
 8008404:	200006ec 	.word	0x200006ec
 8008408:	200042ec 	.word	0x200042ec
 800840c:	200042f4 	.word	0x200042f4
 8008410:	200042fc 	.word	0x200042fc
 8008414:	200042f8 	.word	0x200042f8
 8008418:	20004308 	.word	0x20004308

0800841c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800841c:	b480      	push	{r7}
 800841e:	b085      	sub	sp, #20
 8008420:	af00      	add	r7, sp, #0
 8008422:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008424:	4b28      	ldr	r3, [pc, #160]	; (80084c8 <prvInsertBlockIntoFreeList+0xac>)
 8008426:	60fb      	str	r3, [r7, #12]
 8008428:	e002      	b.n	8008430 <prvInsertBlockIntoFreeList+0x14>
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	60fb      	str	r3, [r7, #12]
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	687a      	ldr	r2, [r7, #4]
 8008436:	429a      	cmp	r2, r3
 8008438:	d8f7      	bhi.n	800842a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	685b      	ldr	r3, [r3, #4]
 8008442:	68ba      	ldr	r2, [r7, #8]
 8008444:	4413      	add	r3, r2
 8008446:	687a      	ldr	r2, [r7, #4]
 8008448:	429a      	cmp	r2, r3
 800844a:	d108      	bne.n	800845e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	685a      	ldr	r2, [r3, #4]
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	685b      	ldr	r3, [r3, #4]
 8008454:	441a      	add	r2, r3
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	685b      	ldr	r3, [r3, #4]
 8008466:	68ba      	ldr	r2, [r7, #8]
 8008468:	441a      	add	r2, r3
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	429a      	cmp	r2, r3
 8008470:	d118      	bne.n	80084a4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	681a      	ldr	r2, [r3, #0]
 8008476:	4b15      	ldr	r3, [pc, #84]	; (80084cc <prvInsertBlockIntoFreeList+0xb0>)
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	429a      	cmp	r2, r3
 800847c:	d00d      	beq.n	800849a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	685a      	ldr	r2, [r3, #4]
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	685b      	ldr	r3, [r3, #4]
 8008488:	441a      	add	r2, r3
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	681a      	ldr	r2, [r3, #0]
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	601a      	str	r2, [r3, #0]
 8008498:	e008      	b.n	80084ac <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800849a:	4b0c      	ldr	r3, [pc, #48]	; (80084cc <prvInsertBlockIntoFreeList+0xb0>)
 800849c:	681a      	ldr	r2, [r3, #0]
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	601a      	str	r2, [r3, #0]
 80084a2:	e003      	b.n	80084ac <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	681a      	ldr	r2, [r3, #0]
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80084ac:	68fa      	ldr	r2, [r7, #12]
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	429a      	cmp	r2, r3
 80084b2:	d002      	beq.n	80084ba <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	687a      	ldr	r2, [r7, #4]
 80084b8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80084ba:	bf00      	nop
 80084bc:	3714      	adds	r7, #20
 80084be:	46bd      	mov	sp, r7
 80084c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084c4:	4770      	bx	lr
 80084c6:	bf00      	nop
 80084c8:	200042ec 	.word	0x200042ec
 80084cc:	200042f4 	.word	0x200042f4

080084d0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80084d0:	b480      	push	{r7}
 80084d2:	b083      	sub	sp, #12
 80084d4:	af00      	add	r7, sp, #0
 80084d6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	f103 0208 	add.w	r2, r3, #8
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	f04f 32ff 	mov.w	r2, #4294967295
 80084e8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	f103 0208 	add.w	r2, r3, #8
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	f103 0208 	add.w	r2, r3, #8
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	2200      	movs	r2, #0
 8008502:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008504:	bf00      	nop
 8008506:	370c      	adds	r7, #12
 8008508:	46bd      	mov	sp, r7
 800850a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800850e:	4770      	bx	lr

08008510 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008510:	b480      	push	{r7}
 8008512:	b083      	sub	sp, #12
 8008514:	af00      	add	r7, sp, #0
 8008516:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	2200      	movs	r2, #0
 800851c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800851e:	bf00      	nop
 8008520:	370c      	adds	r7, #12
 8008522:	46bd      	mov	sp, r7
 8008524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008528:	4770      	bx	lr

0800852a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800852a:	b480      	push	{r7}
 800852c:	b085      	sub	sp, #20
 800852e:	af00      	add	r7, sp, #0
 8008530:	6078      	str	r0, [r7, #4]
 8008532:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	685b      	ldr	r3, [r3, #4]
 8008538:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800853a:	683b      	ldr	r3, [r7, #0]
 800853c:	68fa      	ldr	r2, [r7, #12]
 800853e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	689a      	ldr	r2, [r3, #8]
 8008544:	683b      	ldr	r3, [r7, #0]
 8008546:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	689b      	ldr	r3, [r3, #8]
 800854c:	683a      	ldr	r2, [r7, #0]
 800854e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	683a      	ldr	r2, [r7, #0]
 8008554:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008556:	683b      	ldr	r3, [r7, #0]
 8008558:	687a      	ldr	r2, [r7, #4]
 800855a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	1c5a      	adds	r2, r3, #1
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	601a      	str	r2, [r3, #0]
}
 8008566:	bf00      	nop
 8008568:	3714      	adds	r7, #20
 800856a:	46bd      	mov	sp, r7
 800856c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008570:	4770      	bx	lr

08008572 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008572:	b480      	push	{r7}
 8008574:	b085      	sub	sp, #20
 8008576:	af00      	add	r7, sp, #0
 8008578:	6078      	str	r0, [r7, #4]
 800857a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800857c:	683b      	ldr	r3, [r7, #0]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008582:	68bb      	ldr	r3, [r7, #8]
 8008584:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008588:	d103      	bne.n	8008592 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	691b      	ldr	r3, [r3, #16]
 800858e:	60fb      	str	r3, [r7, #12]
 8008590:	e00c      	b.n	80085ac <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	3308      	adds	r3, #8
 8008596:	60fb      	str	r3, [r7, #12]
 8008598:	e002      	b.n	80085a0 <vListInsert+0x2e>
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	685b      	ldr	r3, [r3, #4]
 800859e:	60fb      	str	r3, [r7, #12]
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	685b      	ldr	r3, [r3, #4]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	68ba      	ldr	r2, [r7, #8]
 80085a8:	429a      	cmp	r2, r3
 80085aa:	d2f6      	bcs.n	800859a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	685a      	ldr	r2, [r3, #4]
 80085b0:	683b      	ldr	r3, [r7, #0]
 80085b2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80085b4:	683b      	ldr	r3, [r7, #0]
 80085b6:	685b      	ldr	r3, [r3, #4]
 80085b8:	683a      	ldr	r2, [r7, #0]
 80085ba:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80085bc:	683b      	ldr	r3, [r7, #0]
 80085be:	68fa      	ldr	r2, [r7, #12]
 80085c0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	683a      	ldr	r2, [r7, #0]
 80085c6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80085c8:	683b      	ldr	r3, [r7, #0]
 80085ca:	687a      	ldr	r2, [r7, #4]
 80085cc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	1c5a      	adds	r2, r3, #1
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	601a      	str	r2, [r3, #0]
}
 80085d8:	bf00      	nop
 80085da:	3714      	adds	r7, #20
 80085dc:	46bd      	mov	sp, r7
 80085de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085e2:	4770      	bx	lr

080085e4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80085e4:	b480      	push	{r7}
 80085e6:	b085      	sub	sp, #20
 80085e8:	af00      	add	r7, sp, #0
 80085ea:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	691b      	ldr	r3, [r3, #16]
 80085f0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	685b      	ldr	r3, [r3, #4]
 80085f6:	687a      	ldr	r2, [r7, #4]
 80085f8:	6892      	ldr	r2, [r2, #8]
 80085fa:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	689b      	ldr	r3, [r3, #8]
 8008600:	687a      	ldr	r2, [r7, #4]
 8008602:	6852      	ldr	r2, [r2, #4]
 8008604:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	685b      	ldr	r3, [r3, #4]
 800860a:	687a      	ldr	r2, [r7, #4]
 800860c:	429a      	cmp	r2, r3
 800860e:	d103      	bne.n	8008618 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	689a      	ldr	r2, [r3, #8]
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	2200      	movs	r2, #0
 800861c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	1e5a      	subs	r2, r3, #1
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	681b      	ldr	r3, [r3, #0]
}
 800862c:	4618      	mov	r0, r3
 800862e:	3714      	adds	r7, #20
 8008630:	46bd      	mov	sp, r7
 8008632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008636:	4770      	bx	lr

08008638 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008638:	b480      	push	{r7}
 800863a:	b085      	sub	sp, #20
 800863c:	af00      	add	r7, sp, #0
 800863e:	60f8      	str	r0, [r7, #12]
 8008640:	60b9      	str	r1, [r7, #8]
 8008642:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	3b04      	subs	r3, #4
 8008648:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008650:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	3b04      	subs	r3, #4
 8008656:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008658:	68bb      	ldr	r3, [r7, #8]
 800865a:	f023 0201 	bic.w	r2, r3, #1
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	3b04      	subs	r3, #4
 8008666:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008668:	4a0c      	ldr	r2, [pc, #48]	; (800869c <pxPortInitialiseStack+0x64>)
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	3b14      	subs	r3, #20
 8008672:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008674:	687a      	ldr	r2, [r7, #4]
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	3b04      	subs	r3, #4
 800867e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	f06f 0202 	mvn.w	r2, #2
 8008686:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	3b20      	subs	r3, #32
 800868c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800868e:	68fb      	ldr	r3, [r7, #12]
}
 8008690:	4618      	mov	r0, r3
 8008692:	3714      	adds	r7, #20
 8008694:	46bd      	mov	sp, r7
 8008696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800869a:	4770      	bx	lr
 800869c:	080086a1 	.word	0x080086a1

080086a0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80086a0:	b480      	push	{r7}
 80086a2:	b085      	sub	sp, #20
 80086a4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80086a6:	2300      	movs	r3, #0
 80086a8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80086aa:	4b12      	ldr	r3, [pc, #72]	; (80086f4 <prvTaskExitError+0x54>)
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086b2:	d00a      	beq.n	80086ca <prvTaskExitError+0x2a>
	__asm volatile
 80086b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086b8:	f383 8811 	msr	BASEPRI, r3
 80086bc:	f3bf 8f6f 	isb	sy
 80086c0:	f3bf 8f4f 	dsb	sy
 80086c4:	60fb      	str	r3, [r7, #12]
}
 80086c6:	bf00      	nop
 80086c8:	e7fe      	b.n	80086c8 <prvTaskExitError+0x28>
	__asm volatile
 80086ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086ce:	f383 8811 	msr	BASEPRI, r3
 80086d2:	f3bf 8f6f 	isb	sy
 80086d6:	f3bf 8f4f 	dsb	sy
 80086da:	60bb      	str	r3, [r7, #8]
}
 80086dc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80086de:	bf00      	nop
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d0fc      	beq.n	80086e0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80086e6:	bf00      	nop
 80086e8:	bf00      	nop
 80086ea:	3714      	adds	r7, #20
 80086ec:	46bd      	mov	sp, r7
 80086ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f2:	4770      	bx	lr
 80086f4:	20000010 	.word	0x20000010
	...

08008700 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008700:	4b07      	ldr	r3, [pc, #28]	; (8008720 <pxCurrentTCBConst2>)
 8008702:	6819      	ldr	r1, [r3, #0]
 8008704:	6808      	ldr	r0, [r1, #0]
 8008706:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800870a:	f380 8809 	msr	PSP, r0
 800870e:	f3bf 8f6f 	isb	sy
 8008712:	f04f 0000 	mov.w	r0, #0
 8008716:	f380 8811 	msr	BASEPRI, r0
 800871a:	4770      	bx	lr
 800871c:	f3af 8000 	nop.w

08008720 <pxCurrentTCBConst2>:
 8008720:	20004314 	.word	0x20004314
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008724:	bf00      	nop
 8008726:	bf00      	nop

08008728 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008728:	4808      	ldr	r0, [pc, #32]	; (800874c <prvPortStartFirstTask+0x24>)
 800872a:	6800      	ldr	r0, [r0, #0]
 800872c:	6800      	ldr	r0, [r0, #0]
 800872e:	f380 8808 	msr	MSP, r0
 8008732:	f04f 0000 	mov.w	r0, #0
 8008736:	f380 8814 	msr	CONTROL, r0
 800873a:	b662      	cpsie	i
 800873c:	b661      	cpsie	f
 800873e:	f3bf 8f4f 	dsb	sy
 8008742:	f3bf 8f6f 	isb	sy
 8008746:	df00      	svc	0
 8008748:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800874a:	bf00      	nop
 800874c:	e000ed08 	.word	0xe000ed08

08008750 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008750:	b580      	push	{r7, lr}
 8008752:	b086      	sub	sp, #24
 8008754:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008756:	4b46      	ldr	r3, [pc, #280]	; (8008870 <xPortStartScheduler+0x120>)
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	4a46      	ldr	r2, [pc, #280]	; (8008874 <xPortStartScheduler+0x124>)
 800875c:	4293      	cmp	r3, r2
 800875e:	d10a      	bne.n	8008776 <xPortStartScheduler+0x26>
	__asm volatile
 8008760:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008764:	f383 8811 	msr	BASEPRI, r3
 8008768:	f3bf 8f6f 	isb	sy
 800876c:	f3bf 8f4f 	dsb	sy
 8008770:	613b      	str	r3, [r7, #16]
}
 8008772:	bf00      	nop
 8008774:	e7fe      	b.n	8008774 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008776:	4b3e      	ldr	r3, [pc, #248]	; (8008870 <xPortStartScheduler+0x120>)
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	4a3f      	ldr	r2, [pc, #252]	; (8008878 <xPortStartScheduler+0x128>)
 800877c:	4293      	cmp	r3, r2
 800877e:	d10a      	bne.n	8008796 <xPortStartScheduler+0x46>
	__asm volatile
 8008780:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008784:	f383 8811 	msr	BASEPRI, r3
 8008788:	f3bf 8f6f 	isb	sy
 800878c:	f3bf 8f4f 	dsb	sy
 8008790:	60fb      	str	r3, [r7, #12]
}
 8008792:	bf00      	nop
 8008794:	e7fe      	b.n	8008794 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008796:	4b39      	ldr	r3, [pc, #228]	; (800887c <xPortStartScheduler+0x12c>)
 8008798:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800879a:	697b      	ldr	r3, [r7, #20]
 800879c:	781b      	ldrb	r3, [r3, #0]
 800879e:	b2db      	uxtb	r3, r3
 80087a0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80087a2:	697b      	ldr	r3, [r7, #20]
 80087a4:	22ff      	movs	r2, #255	; 0xff
 80087a6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80087a8:	697b      	ldr	r3, [r7, #20]
 80087aa:	781b      	ldrb	r3, [r3, #0]
 80087ac:	b2db      	uxtb	r3, r3
 80087ae:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80087b0:	78fb      	ldrb	r3, [r7, #3]
 80087b2:	b2db      	uxtb	r3, r3
 80087b4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80087b8:	b2da      	uxtb	r2, r3
 80087ba:	4b31      	ldr	r3, [pc, #196]	; (8008880 <xPortStartScheduler+0x130>)
 80087bc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80087be:	4b31      	ldr	r3, [pc, #196]	; (8008884 <xPortStartScheduler+0x134>)
 80087c0:	2207      	movs	r2, #7
 80087c2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80087c4:	e009      	b.n	80087da <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80087c6:	4b2f      	ldr	r3, [pc, #188]	; (8008884 <xPortStartScheduler+0x134>)
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	3b01      	subs	r3, #1
 80087cc:	4a2d      	ldr	r2, [pc, #180]	; (8008884 <xPortStartScheduler+0x134>)
 80087ce:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80087d0:	78fb      	ldrb	r3, [r7, #3]
 80087d2:	b2db      	uxtb	r3, r3
 80087d4:	005b      	lsls	r3, r3, #1
 80087d6:	b2db      	uxtb	r3, r3
 80087d8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80087da:	78fb      	ldrb	r3, [r7, #3]
 80087dc:	b2db      	uxtb	r3, r3
 80087de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80087e2:	2b80      	cmp	r3, #128	; 0x80
 80087e4:	d0ef      	beq.n	80087c6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80087e6:	4b27      	ldr	r3, [pc, #156]	; (8008884 <xPortStartScheduler+0x134>)
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	f1c3 0307 	rsb	r3, r3, #7
 80087ee:	2b04      	cmp	r3, #4
 80087f0:	d00a      	beq.n	8008808 <xPortStartScheduler+0xb8>
	__asm volatile
 80087f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087f6:	f383 8811 	msr	BASEPRI, r3
 80087fa:	f3bf 8f6f 	isb	sy
 80087fe:	f3bf 8f4f 	dsb	sy
 8008802:	60bb      	str	r3, [r7, #8]
}
 8008804:	bf00      	nop
 8008806:	e7fe      	b.n	8008806 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008808:	4b1e      	ldr	r3, [pc, #120]	; (8008884 <xPortStartScheduler+0x134>)
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	021b      	lsls	r3, r3, #8
 800880e:	4a1d      	ldr	r2, [pc, #116]	; (8008884 <xPortStartScheduler+0x134>)
 8008810:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008812:	4b1c      	ldr	r3, [pc, #112]	; (8008884 <xPortStartScheduler+0x134>)
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800881a:	4a1a      	ldr	r2, [pc, #104]	; (8008884 <xPortStartScheduler+0x134>)
 800881c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	b2da      	uxtb	r2, r3
 8008822:	697b      	ldr	r3, [r7, #20]
 8008824:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008826:	4b18      	ldr	r3, [pc, #96]	; (8008888 <xPortStartScheduler+0x138>)
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	4a17      	ldr	r2, [pc, #92]	; (8008888 <xPortStartScheduler+0x138>)
 800882c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008830:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008832:	4b15      	ldr	r3, [pc, #84]	; (8008888 <xPortStartScheduler+0x138>)
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	4a14      	ldr	r2, [pc, #80]	; (8008888 <xPortStartScheduler+0x138>)
 8008838:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800883c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800883e:	f000 f8dd 	bl	80089fc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008842:	4b12      	ldr	r3, [pc, #72]	; (800888c <xPortStartScheduler+0x13c>)
 8008844:	2200      	movs	r2, #0
 8008846:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008848:	f000 f8fc 	bl	8008a44 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800884c:	4b10      	ldr	r3, [pc, #64]	; (8008890 <xPortStartScheduler+0x140>)
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	4a0f      	ldr	r2, [pc, #60]	; (8008890 <xPortStartScheduler+0x140>)
 8008852:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008856:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008858:	f7ff ff66 	bl	8008728 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800885c:	f001 f9da 	bl	8009c14 <vTaskSwitchContext>
	prvTaskExitError();
 8008860:	f7ff ff1e 	bl	80086a0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008864:	2300      	movs	r3, #0
}
 8008866:	4618      	mov	r0, r3
 8008868:	3718      	adds	r7, #24
 800886a:	46bd      	mov	sp, r7
 800886c:	bd80      	pop	{r7, pc}
 800886e:	bf00      	nop
 8008870:	e000ed00 	.word	0xe000ed00
 8008874:	410fc271 	.word	0x410fc271
 8008878:	410fc270 	.word	0x410fc270
 800887c:	e000e400 	.word	0xe000e400
 8008880:	2000430c 	.word	0x2000430c
 8008884:	20004310 	.word	0x20004310
 8008888:	e000ed20 	.word	0xe000ed20
 800888c:	20000010 	.word	0x20000010
 8008890:	e000ef34 	.word	0xe000ef34

08008894 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008894:	b480      	push	{r7}
 8008896:	b083      	sub	sp, #12
 8008898:	af00      	add	r7, sp, #0
	__asm volatile
 800889a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800889e:	f383 8811 	msr	BASEPRI, r3
 80088a2:	f3bf 8f6f 	isb	sy
 80088a6:	f3bf 8f4f 	dsb	sy
 80088aa:	607b      	str	r3, [r7, #4]
}
 80088ac:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80088ae:	4b0f      	ldr	r3, [pc, #60]	; (80088ec <vPortEnterCritical+0x58>)
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	3301      	adds	r3, #1
 80088b4:	4a0d      	ldr	r2, [pc, #52]	; (80088ec <vPortEnterCritical+0x58>)
 80088b6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80088b8:	4b0c      	ldr	r3, [pc, #48]	; (80088ec <vPortEnterCritical+0x58>)
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	2b01      	cmp	r3, #1
 80088be:	d10f      	bne.n	80088e0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80088c0:	4b0b      	ldr	r3, [pc, #44]	; (80088f0 <vPortEnterCritical+0x5c>)
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	b2db      	uxtb	r3, r3
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d00a      	beq.n	80088e0 <vPortEnterCritical+0x4c>
	__asm volatile
 80088ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088ce:	f383 8811 	msr	BASEPRI, r3
 80088d2:	f3bf 8f6f 	isb	sy
 80088d6:	f3bf 8f4f 	dsb	sy
 80088da:	603b      	str	r3, [r7, #0]
}
 80088dc:	bf00      	nop
 80088de:	e7fe      	b.n	80088de <vPortEnterCritical+0x4a>
	}
}
 80088e0:	bf00      	nop
 80088e2:	370c      	adds	r7, #12
 80088e4:	46bd      	mov	sp, r7
 80088e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ea:	4770      	bx	lr
 80088ec:	20000010 	.word	0x20000010
 80088f0:	e000ed04 	.word	0xe000ed04

080088f4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80088f4:	b480      	push	{r7}
 80088f6:	b083      	sub	sp, #12
 80088f8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80088fa:	4b12      	ldr	r3, [pc, #72]	; (8008944 <vPortExitCritical+0x50>)
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d10a      	bne.n	8008918 <vPortExitCritical+0x24>
	__asm volatile
 8008902:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008906:	f383 8811 	msr	BASEPRI, r3
 800890a:	f3bf 8f6f 	isb	sy
 800890e:	f3bf 8f4f 	dsb	sy
 8008912:	607b      	str	r3, [r7, #4]
}
 8008914:	bf00      	nop
 8008916:	e7fe      	b.n	8008916 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008918:	4b0a      	ldr	r3, [pc, #40]	; (8008944 <vPortExitCritical+0x50>)
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	3b01      	subs	r3, #1
 800891e:	4a09      	ldr	r2, [pc, #36]	; (8008944 <vPortExitCritical+0x50>)
 8008920:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008922:	4b08      	ldr	r3, [pc, #32]	; (8008944 <vPortExitCritical+0x50>)
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	2b00      	cmp	r3, #0
 8008928:	d105      	bne.n	8008936 <vPortExitCritical+0x42>
 800892a:	2300      	movs	r3, #0
 800892c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800892e:	683b      	ldr	r3, [r7, #0]
 8008930:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008934:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008936:	bf00      	nop
 8008938:	370c      	adds	r7, #12
 800893a:	46bd      	mov	sp, r7
 800893c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008940:	4770      	bx	lr
 8008942:	bf00      	nop
 8008944:	20000010 	.word	0x20000010
	...

08008950 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008950:	f3ef 8009 	mrs	r0, PSP
 8008954:	f3bf 8f6f 	isb	sy
 8008958:	4b15      	ldr	r3, [pc, #84]	; (80089b0 <pxCurrentTCBConst>)
 800895a:	681a      	ldr	r2, [r3, #0]
 800895c:	f01e 0f10 	tst.w	lr, #16
 8008960:	bf08      	it	eq
 8008962:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008966:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800896a:	6010      	str	r0, [r2, #0]
 800896c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008970:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008974:	f380 8811 	msr	BASEPRI, r0
 8008978:	f3bf 8f4f 	dsb	sy
 800897c:	f3bf 8f6f 	isb	sy
 8008980:	f001 f948 	bl	8009c14 <vTaskSwitchContext>
 8008984:	f04f 0000 	mov.w	r0, #0
 8008988:	f380 8811 	msr	BASEPRI, r0
 800898c:	bc09      	pop	{r0, r3}
 800898e:	6819      	ldr	r1, [r3, #0]
 8008990:	6808      	ldr	r0, [r1, #0]
 8008992:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008996:	f01e 0f10 	tst.w	lr, #16
 800899a:	bf08      	it	eq
 800899c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80089a0:	f380 8809 	msr	PSP, r0
 80089a4:	f3bf 8f6f 	isb	sy
 80089a8:	4770      	bx	lr
 80089aa:	bf00      	nop
 80089ac:	f3af 8000 	nop.w

080089b0 <pxCurrentTCBConst>:
 80089b0:	20004314 	.word	0x20004314
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80089b4:	bf00      	nop
 80089b6:	bf00      	nop

080089b8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80089b8:	b580      	push	{r7, lr}
 80089ba:	b082      	sub	sp, #8
 80089bc:	af00      	add	r7, sp, #0
	__asm volatile
 80089be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089c2:	f383 8811 	msr	BASEPRI, r3
 80089c6:	f3bf 8f6f 	isb	sy
 80089ca:	f3bf 8f4f 	dsb	sy
 80089ce:	607b      	str	r3, [r7, #4]
}
 80089d0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80089d2:	f001 f865 	bl	8009aa0 <xTaskIncrementTick>
 80089d6:	4603      	mov	r3, r0
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d003      	beq.n	80089e4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80089dc:	4b06      	ldr	r3, [pc, #24]	; (80089f8 <xPortSysTickHandler+0x40>)
 80089de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80089e2:	601a      	str	r2, [r3, #0]
 80089e4:	2300      	movs	r3, #0
 80089e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80089e8:	683b      	ldr	r3, [r7, #0]
 80089ea:	f383 8811 	msr	BASEPRI, r3
}
 80089ee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80089f0:	bf00      	nop
 80089f2:	3708      	adds	r7, #8
 80089f4:	46bd      	mov	sp, r7
 80089f6:	bd80      	pop	{r7, pc}
 80089f8:	e000ed04 	.word	0xe000ed04

080089fc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80089fc:	b480      	push	{r7}
 80089fe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008a00:	4b0b      	ldr	r3, [pc, #44]	; (8008a30 <vPortSetupTimerInterrupt+0x34>)
 8008a02:	2200      	movs	r2, #0
 8008a04:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008a06:	4b0b      	ldr	r3, [pc, #44]	; (8008a34 <vPortSetupTimerInterrupt+0x38>)
 8008a08:	2200      	movs	r2, #0
 8008a0a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008a0c:	4b0a      	ldr	r3, [pc, #40]	; (8008a38 <vPortSetupTimerInterrupt+0x3c>)
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	4a0a      	ldr	r2, [pc, #40]	; (8008a3c <vPortSetupTimerInterrupt+0x40>)
 8008a12:	fba2 2303 	umull	r2, r3, r2, r3
 8008a16:	099b      	lsrs	r3, r3, #6
 8008a18:	4a09      	ldr	r2, [pc, #36]	; (8008a40 <vPortSetupTimerInterrupt+0x44>)
 8008a1a:	3b01      	subs	r3, #1
 8008a1c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008a1e:	4b04      	ldr	r3, [pc, #16]	; (8008a30 <vPortSetupTimerInterrupt+0x34>)
 8008a20:	2207      	movs	r2, #7
 8008a22:	601a      	str	r2, [r3, #0]
}
 8008a24:	bf00      	nop
 8008a26:	46bd      	mov	sp, r7
 8008a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a2c:	4770      	bx	lr
 8008a2e:	bf00      	nop
 8008a30:	e000e010 	.word	0xe000e010
 8008a34:	e000e018 	.word	0xe000e018
 8008a38:	20000000 	.word	0x20000000
 8008a3c:	10624dd3 	.word	0x10624dd3
 8008a40:	e000e014 	.word	0xe000e014

08008a44 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008a44:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008a54 <vPortEnableVFP+0x10>
 8008a48:	6801      	ldr	r1, [r0, #0]
 8008a4a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8008a4e:	6001      	str	r1, [r0, #0]
 8008a50:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008a52:	bf00      	nop
 8008a54:	e000ed88 	.word	0xe000ed88

08008a58 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008a58:	b480      	push	{r7}
 8008a5a:	b085      	sub	sp, #20
 8008a5c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008a5e:	f3ef 8305 	mrs	r3, IPSR
 8008a62:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	2b0f      	cmp	r3, #15
 8008a68:	d914      	bls.n	8008a94 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008a6a:	4a17      	ldr	r2, [pc, #92]	; (8008ac8 <vPortValidateInterruptPriority+0x70>)
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	4413      	add	r3, r2
 8008a70:	781b      	ldrb	r3, [r3, #0]
 8008a72:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008a74:	4b15      	ldr	r3, [pc, #84]	; (8008acc <vPortValidateInterruptPriority+0x74>)
 8008a76:	781b      	ldrb	r3, [r3, #0]
 8008a78:	7afa      	ldrb	r2, [r7, #11]
 8008a7a:	429a      	cmp	r2, r3
 8008a7c:	d20a      	bcs.n	8008a94 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8008a7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a82:	f383 8811 	msr	BASEPRI, r3
 8008a86:	f3bf 8f6f 	isb	sy
 8008a8a:	f3bf 8f4f 	dsb	sy
 8008a8e:	607b      	str	r3, [r7, #4]
}
 8008a90:	bf00      	nop
 8008a92:	e7fe      	b.n	8008a92 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008a94:	4b0e      	ldr	r3, [pc, #56]	; (8008ad0 <vPortValidateInterruptPriority+0x78>)
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8008a9c:	4b0d      	ldr	r3, [pc, #52]	; (8008ad4 <vPortValidateInterruptPriority+0x7c>)
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	429a      	cmp	r2, r3
 8008aa2:	d90a      	bls.n	8008aba <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8008aa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008aa8:	f383 8811 	msr	BASEPRI, r3
 8008aac:	f3bf 8f6f 	isb	sy
 8008ab0:	f3bf 8f4f 	dsb	sy
 8008ab4:	603b      	str	r3, [r7, #0]
}
 8008ab6:	bf00      	nop
 8008ab8:	e7fe      	b.n	8008ab8 <vPortValidateInterruptPriority+0x60>
	}
 8008aba:	bf00      	nop
 8008abc:	3714      	adds	r7, #20
 8008abe:	46bd      	mov	sp, r7
 8008ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ac4:	4770      	bx	lr
 8008ac6:	bf00      	nop
 8008ac8:	e000e3f0 	.word	0xe000e3f0
 8008acc:	2000430c 	.word	0x2000430c
 8008ad0:	e000ed0c 	.word	0xe000ed0c
 8008ad4:	20004310 	.word	0x20004310

08008ad8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008ad8:	b580      	push	{r7, lr}
 8008ada:	b084      	sub	sp, #16
 8008adc:	af00      	add	r7, sp, #0
 8008ade:	6078      	str	r0, [r7, #4]
 8008ae0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d10a      	bne.n	8008b02 <xQueueGenericReset+0x2a>
	__asm volatile
 8008aec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008af0:	f383 8811 	msr	BASEPRI, r3
 8008af4:	f3bf 8f6f 	isb	sy
 8008af8:	f3bf 8f4f 	dsb	sy
 8008afc:	60bb      	str	r3, [r7, #8]
}
 8008afe:	bf00      	nop
 8008b00:	e7fe      	b.n	8008b00 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8008b02:	f7ff fec7 	bl	8008894 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	681a      	ldr	r2, [r3, #0]
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b0e:	68f9      	ldr	r1, [r7, #12]
 8008b10:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008b12:	fb01 f303 	mul.w	r3, r1, r3
 8008b16:	441a      	add	r2, r3
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	2200      	movs	r2, #0
 8008b20:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	681a      	ldr	r2, [r3, #0]
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	681a      	ldr	r2, [r3, #0]
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b32:	3b01      	subs	r3, #1
 8008b34:	68f9      	ldr	r1, [r7, #12]
 8008b36:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008b38:	fb01 f303 	mul.w	r3, r1, r3
 8008b3c:	441a      	add	r2, r3
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	22ff      	movs	r2, #255	; 0xff
 8008b46:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	22ff      	movs	r2, #255	; 0xff
 8008b4e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8008b52:	683b      	ldr	r3, [r7, #0]
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d114      	bne.n	8008b82 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	691b      	ldr	r3, [r3, #16]
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d01a      	beq.n	8008b96 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	3310      	adds	r3, #16
 8008b64:	4618      	mov	r0, r3
 8008b66:	f001 f903 	bl	8009d70 <xTaskRemoveFromEventList>
 8008b6a:	4603      	mov	r3, r0
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d012      	beq.n	8008b96 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008b70:	4b0c      	ldr	r3, [pc, #48]	; (8008ba4 <xQueueGenericReset+0xcc>)
 8008b72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008b76:	601a      	str	r2, [r3, #0]
 8008b78:	f3bf 8f4f 	dsb	sy
 8008b7c:	f3bf 8f6f 	isb	sy
 8008b80:	e009      	b.n	8008b96 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	3310      	adds	r3, #16
 8008b86:	4618      	mov	r0, r3
 8008b88:	f7ff fca2 	bl	80084d0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	3324      	adds	r3, #36	; 0x24
 8008b90:	4618      	mov	r0, r3
 8008b92:	f7ff fc9d 	bl	80084d0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008b96:	f7ff fead 	bl	80088f4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008b9a:	2301      	movs	r3, #1
}
 8008b9c:	4618      	mov	r0, r3
 8008b9e:	3710      	adds	r7, #16
 8008ba0:	46bd      	mov	sp, r7
 8008ba2:	bd80      	pop	{r7, pc}
 8008ba4:	e000ed04 	.word	0xe000ed04

08008ba8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008ba8:	b580      	push	{r7, lr}
 8008baa:	b08e      	sub	sp, #56	; 0x38
 8008bac:	af02      	add	r7, sp, #8
 8008bae:	60f8      	str	r0, [r7, #12]
 8008bb0:	60b9      	str	r1, [r7, #8]
 8008bb2:	607a      	str	r2, [r7, #4]
 8008bb4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d10a      	bne.n	8008bd2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8008bbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bc0:	f383 8811 	msr	BASEPRI, r3
 8008bc4:	f3bf 8f6f 	isb	sy
 8008bc8:	f3bf 8f4f 	dsb	sy
 8008bcc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008bce:	bf00      	nop
 8008bd0:	e7fe      	b.n	8008bd0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008bd2:	683b      	ldr	r3, [r7, #0]
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d10a      	bne.n	8008bee <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8008bd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bdc:	f383 8811 	msr	BASEPRI, r3
 8008be0:	f3bf 8f6f 	isb	sy
 8008be4:	f3bf 8f4f 	dsb	sy
 8008be8:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008bea:	bf00      	nop
 8008bec:	e7fe      	b.n	8008bec <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d002      	beq.n	8008bfa <xQueueGenericCreateStatic+0x52>
 8008bf4:	68bb      	ldr	r3, [r7, #8]
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d001      	beq.n	8008bfe <xQueueGenericCreateStatic+0x56>
 8008bfa:	2301      	movs	r3, #1
 8008bfc:	e000      	b.n	8008c00 <xQueueGenericCreateStatic+0x58>
 8008bfe:	2300      	movs	r3, #0
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d10a      	bne.n	8008c1a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8008c04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c08:	f383 8811 	msr	BASEPRI, r3
 8008c0c:	f3bf 8f6f 	isb	sy
 8008c10:	f3bf 8f4f 	dsb	sy
 8008c14:	623b      	str	r3, [r7, #32]
}
 8008c16:	bf00      	nop
 8008c18:	e7fe      	b.n	8008c18 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d102      	bne.n	8008c26 <xQueueGenericCreateStatic+0x7e>
 8008c20:	68bb      	ldr	r3, [r7, #8]
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d101      	bne.n	8008c2a <xQueueGenericCreateStatic+0x82>
 8008c26:	2301      	movs	r3, #1
 8008c28:	e000      	b.n	8008c2c <xQueueGenericCreateStatic+0x84>
 8008c2a:	2300      	movs	r3, #0
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d10a      	bne.n	8008c46 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8008c30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c34:	f383 8811 	msr	BASEPRI, r3
 8008c38:	f3bf 8f6f 	isb	sy
 8008c3c:	f3bf 8f4f 	dsb	sy
 8008c40:	61fb      	str	r3, [r7, #28]
}
 8008c42:	bf00      	nop
 8008c44:	e7fe      	b.n	8008c44 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008c46:	2350      	movs	r3, #80	; 0x50
 8008c48:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8008c4a:	697b      	ldr	r3, [r7, #20]
 8008c4c:	2b50      	cmp	r3, #80	; 0x50
 8008c4e:	d00a      	beq.n	8008c66 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8008c50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c54:	f383 8811 	msr	BASEPRI, r3
 8008c58:	f3bf 8f6f 	isb	sy
 8008c5c:	f3bf 8f4f 	dsb	sy
 8008c60:	61bb      	str	r3, [r7, #24]
}
 8008c62:	bf00      	nop
 8008c64:	e7fe      	b.n	8008c64 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8008c66:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008c68:	683b      	ldr	r3, [r7, #0]
 8008c6a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8008c6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d00d      	beq.n	8008c8e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008c72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c74:	2201      	movs	r2, #1
 8008c76:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008c7a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8008c7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c80:	9300      	str	r3, [sp, #0]
 8008c82:	4613      	mov	r3, r2
 8008c84:	687a      	ldr	r2, [r7, #4]
 8008c86:	68b9      	ldr	r1, [r7, #8]
 8008c88:	68f8      	ldr	r0, [r7, #12]
 8008c8a:	f000 f805 	bl	8008c98 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008c8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8008c90:	4618      	mov	r0, r3
 8008c92:	3730      	adds	r7, #48	; 0x30
 8008c94:	46bd      	mov	sp, r7
 8008c96:	bd80      	pop	{r7, pc}

08008c98 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008c98:	b580      	push	{r7, lr}
 8008c9a:	b084      	sub	sp, #16
 8008c9c:	af00      	add	r7, sp, #0
 8008c9e:	60f8      	str	r0, [r7, #12]
 8008ca0:	60b9      	str	r1, [r7, #8]
 8008ca2:	607a      	str	r2, [r7, #4]
 8008ca4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008ca6:	68bb      	ldr	r3, [r7, #8]
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d103      	bne.n	8008cb4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008cac:	69bb      	ldr	r3, [r7, #24]
 8008cae:	69ba      	ldr	r2, [r7, #24]
 8008cb0:	601a      	str	r2, [r3, #0]
 8008cb2:	e002      	b.n	8008cba <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008cb4:	69bb      	ldr	r3, [r7, #24]
 8008cb6:	687a      	ldr	r2, [r7, #4]
 8008cb8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008cba:	69bb      	ldr	r3, [r7, #24]
 8008cbc:	68fa      	ldr	r2, [r7, #12]
 8008cbe:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008cc0:	69bb      	ldr	r3, [r7, #24]
 8008cc2:	68ba      	ldr	r2, [r7, #8]
 8008cc4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008cc6:	2101      	movs	r1, #1
 8008cc8:	69b8      	ldr	r0, [r7, #24]
 8008cca:	f7ff ff05 	bl	8008ad8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8008cce:	69bb      	ldr	r3, [r7, #24]
 8008cd0:	78fa      	ldrb	r2, [r7, #3]
 8008cd2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8008cd6:	bf00      	nop
 8008cd8:	3710      	adds	r7, #16
 8008cda:	46bd      	mov	sp, r7
 8008cdc:	bd80      	pop	{r7, pc}
	...

08008ce0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008ce0:	b580      	push	{r7, lr}
 8008ce2:	b08e      	sub	sp, #56	; 0x38
 8008ce4:	af00      	add	r7, sp, #0
 8008ce6:	60f8      	str	r0, [r7, #12]
 8008ce8:	60b9      	str	r1, [r7, #8]
 8008cea:	607a      	str	r2, [r7, #4]
 8008cec:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008cee:	2300      	movs	r3, #0
 8008cf0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008cf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d10a      	bne.n	8008d12 <xQueueGenericSend+0x32>
	__asm volatile
 8008cfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d00:	f383 8811 	msr	BASEPRI, r3
 8008d04:	f3bf 8f6f 	isb	sy
 8008d08:	f3bf 8f4f 	dsb	sy
 8008d0c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008d0e:	bf00      	nop
 8008d10:	e7fe      	b.n	8008d10 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008d12:	68bb      	ldr	r3, [r7, #8]
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d103      	bne.n	8008d20 <xQueueGenericSend+0x40>
 8008d18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d101      	bne.n	8008d24 <xQueueGenericSend+0x44>
 8008d20:	2301      	movs	r3, #1
 8008d22:	e000      	b.n	8008d26 <xQueueGenericSend+0x46>
 8008d24:	2300      	movs	r3, #0
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d10a      	bne.n	8008d40 <xQueueGenericSend+0x60>
	__asm volatile
 8008d2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d2e:	f383 8811 	msr	BASEPRI, r3
 8008d32:	f3bf 8f6f 	isb	sy
 8008d36:	f3bf 8f4f 	dsb	sy
 8008d3a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008d3c:	bf00      	nop
 8008d3e:	e7fe      	b.n	8008d3e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008d40:	683b      	ldr	r3, [r7, #0]
 8008d42:	2b02      	cmp	r3, #2
 8008d44:	d103      	bne.n	8008d4e <xQueueGenericSend+0x6e>
 8008d46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008d4a:	2b01      	cmp	r3, #1
 8008d4c:	d101      	bne.n	8008d52 <xQueueGenericSend+0x72>
 8008d4e:	2301      	movs	r3, #1
 8008d50:	e000      	b.n	8008d54 <xQueueGenericSend+0x74>
 8008d52:	2300      	movs	r3, #0
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d10a      	bne.n	8008d6e <xQueueGenericSend+0x8e>
	__asm volatile
 8008d58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d5c:	f383 8811 	msr	BASEPRI, r3
 8008d60:	f3bf 8f6f 	isb	sy
 8008d64:	f3bf 8f4f 	dsb	sy
 8008d68:	623b      	str	r3, [r7, #32]
}
 8008d6a:	bf00      	nop
 8008d6c:	e7fe      	b.n	8008d6c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008d6e:	f001 f9bd 	bl	800a0ec <xTaskGetSchedulerState>
 8008d72:	4603      	mov	r3, r0
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d102      	bne.n	8008d7e <xQueueGenericSend+0x9e>
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d101      	bne.n	8008d82 <xQueueGenericSend+0xa2>
 8008d7e:	2301      	movs	r3, #1
 8008d80:	e000      	b.n	8008d84 <xQueueGenericSend+0xa4>
 8008d82:	2300      	movs	r3, #0
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d10a      	bne.n	8008d9e <xQueueGenericSend+0xbe>
	__asm volatile
 8008d88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d8c:	f383 8811 	msr	BASEPRI, r3
 8008d90:	f3bf 8f6f 	isb	sy
 8008d94:	f3bf 8f4f 	dsb	sy
 8008d98:	61fb      	str	r3, [r7, #28]
}
 8008d9a:	bf00      	nop
 8008d9c:	e7fe      	b.n	8008d9c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008d9e:	f7ff fd79 	bl	8008894 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008da2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008da4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008da6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008da8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008daa:	429a      	cmp	r2, r3
 8008dac:	d302      	bcc.n	8008db4 <xQueueGenericSend+0xd4>
 8008dae:	683b      	ldr	r3, [r7, #0]
 8008db0:	2b02      	cmp	r3, #2
 8008db2:	d129      	bne.n	8008e08 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008db4:	683a      	ldr	r2, [r7, #0]
 8008db6:	68b9      	ldr	r1, [r7, #8]
 8008db8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008dba:	f000 fa0b 	bl	80091d4 <prvCopyDataToQueue>
 8008dbe:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008dc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d010      	beq.n	8008dea <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008dc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dca:	3324      	adds	r3, #36	; 0x24
 8008dcc:	4618      	mov	r0, r3
 8008dce:	f000 ffcf 	bl	8009d70 <xTaskRemoveFromEventList>
 8008dd2:	4603      	mov	r3, r0
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d013      	beq.n	8008e00 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008dd8:	4b3f      	ldr	r3, [pc, #252]	; (8008ed8 <xQueueGenericSend+0x1f8>)
 8008dda:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008dde:	601a      	str	r2, [r3, #0]
 8008de0:	f3bf 8f4f 	dsb	sy
 8008de4:	f3bf 8f6f 	isb	sy
 8008de8:	e00a      	b.n	8008e00 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8008dea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d007      	beq.n	8008e00 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008df0:	4b39      	ldr	r3, [pc, #228]	; (8008ed8 <xQueueGenericSend+0x1f8>)
 8008df2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008df6:	601a      	str	r2, [r3, #0]
 8008df8:	f3bf 8f4f 	dsb	sy
 8008dfc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008e00:	f7ff fd78 	bl	80088f4 <vPortExitCritical>
				return pdPASS;
 8008e04:	2301      	movs	r3, #1
 8008e06:	e063      	b.n	8008ed0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d103      	bne.n	8008e16 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008e0e:	f7ff fd71 	bl	80088f4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8008e12:	2300      	movs	r3, #0
 8008e14:	e05c      	b.n	8008ed0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008e16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d106      	bne.n	8008e2a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008e1c:	f107 0314 	add.w	r3, r7, #20
 8008e20:	4618      	mov	r0, r3
 8008e22:	f001 f809 	bl	8009e38 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008e26:	2301      	movs	r3, #1
 8008e28:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008e2a:	f7ff fd63 	bl	80088f4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008e2e:	f000 fd7b 	bl	8009928 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008e32:	f7ff fd2f 	bl	8008894 <vPortEnterCritical>
 8008e36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e38:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008e3c:	b25b      	sxtb	r3, r3
 8008e3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e42:	d103      	bne.n	8008e4c <xQueueGenericSend+0x16c>
 8008e44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e46:	2200      	movs	r2, #0
 8008e48:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008e4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e4e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008e52:	b25b      	sxtb	r3, r3
 8008e54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e58:	d103      	bne.n	8008e62 <xQueueGenericSend+0x182>
 8008e5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e5c:	2200      	movs	r2, #0
 8008e5e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008e62:	f7ff fd47 	bl	80088f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008e66:	1d3a      	adds	r2, r7, #4
 8008e68:	f107 0314 	add.w	r3, r7, #20
 8008e6c:	4611      	mov	r1, r2
 8008e6e:	4618      	mov	r0, r3
 8008e70:	f000 fff8 	bl	8009e64 <xTaskCheckForTimeOut>
 8008e74:	4603      	mov	r3, r0
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d124      	bne.n	8008ec4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008e7a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008e7c:	f000 faa2 	bl	80093c4 <prvIsQueueFull>
 8008e80:	4603      	mov	r3, r0
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d018      	beq.n	8008eb8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008e86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e88:	3310      	adds	r3, #16
 8008e8a:	687a      	ldr	r2, [r7, #4]
 8008e8c:	4611      	mov	r1, r2
 8008e8e:	4618      	mov	r0, r3
 8008e90:	f000 ff1e 	bl	8009cd0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008e94:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008e96:	f000 fa2d 	bl	80092f4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8008e9a:	f000 fd53 	bl	8009944 <xTaskResumeAll>
 8008e9e:	4603      	mov	r3, r0
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	f47f af7c 	bne.w	8008d9e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8008ea6:	4b0c      	ldr	r3, [pc, #48]	; (8008ed8 <xQueueGenericSend+0x1f8>)
 8008ea8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008eac:	601a      	str	r2, [r3, #0]
 8008eae:	f3bf 8f4f 	dsb	sy
 8008eb2:	f3bf 8f6f 	isb	sy
 8008eb6:	e772      	b.n	8008d9e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008eb8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008eba:	f000 fa1b 	bl	80092f4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008ebe:	f000 fd41 	bl	8009944 <xTaskResumeAll>
 8008ec2:	e76c      	b.n	8008d9e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008ec4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008ec6:	f000 fa15 	bl	80092f4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008eca:	f000 fd3b 	bl	8009944 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8008ece:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008ed0:	4618      	mov	r0, r3
 8008ed2:	3738      	adds	r7, #56	; 0x38
 8008ed4:	46bd      	mov	sp, r7
 8008ed6:	bd80      	pop	{r7, pc}
 8008ed8:	e000ed04 	.word	0xe000ed04

08008edc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008edc:	b580      	push	{r7, lr}
 8008ede:	b090      	sub	sp, #64	; 0x40
 8008ee0:	af00      	add	r7, sp, #0
 8008ee2:	60f8      	str	r0, [r7, #12]
 8008ee4:	60b9      	str	r1, [r7, #8]
 8008ee6:	607a      	str	r2, [r7, #4]
 8008ee8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8008eee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d10a      	bne.n	8008f0a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8008ef4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ef8:	f383 8811 	msr	BASEPRI, r3
 8008efc:	f3bf 8f6f 	isb	sy
 8008f00:	f3bf 8f4f 	dsb	sy
 8008f04:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008f06:	bf00      	nop
 8008f08:	e7fe      	b.n	8008f08 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008f0a:	68bb      	ldr	r3, [r7, #8]
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d103      	bne.n	8008f18 <xQueueGenericSendFromISR+0x3c>
 8008f10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d101      	bne.n	8008f1c <xQueueGenericSendFromISR+0x40>
 8008f18:	2301      	movs	r3, #1
 8008f1a:	e000      	b.n	8008f1e <xQueueGenericSendFromISR+0x42>
 8008f1c:	2300      	movs	r3, #0
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d10a      	bne.n	8008f38 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8008f22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f26:	f383 8811 	msr	BASEPRI, r3
 8008f2a:	f3bf 8f6f 	isb	sy
 8008f2e:	f3bf 8f4f 	dsb	sy
 8008f32:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008f34:	bf00      	nop
 8008f36:	e7fe      	b.n	8008f36 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008f38:	683b      	ldr	r3, [r7, #0]
 8008f3a:	2b02      	cmp	r3, #2
 8008f3c:	d103      	bne.n	8008f46 <xQueueGenericSendFromISR+0x6a>
 8008f3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f42:	2b01      	cmp	r3, #1
 8008f44:	d101      	bne.n	8008f4a <xQueueGenericSendFromISR+0x6e>
 8008f46:	2301      	movs	r3, #1
 8008f48:	e000      	b.n	8008f4c <xQueueGenericSendFromISR+0x70>
 8008f4a:	2300      	movs	r3, #0
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d10a      	bne.n	8008f66 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8008f50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f54:	f383 8811 	msr	BASEPRI, r3
 8008f58:	f3bf 8f6f 	isb	sy
 8008f5c:	f3bf 8f4f 	dsb	sy
 8008f60:	623b      	str	r3, [r7, #32]
}
 8008f62:	bf00      	nop
 8008f64:	e7fe      	b.n	8008f64 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008f66:	f7ff fd77 	bl	8008a58 <vPortValidateInterruptPriority>
	__asm volatile
 8008f6a:	f3ef 8211 	mrs	r2, BASEPRI
 8008f6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f72:	f383 8811 	msr	BASEPRI, r3
 8008f76:	f3bf 8f6f 	isb	sy
 8008f7a:	f3bf 8f4f 	dsb	sy
 8008f7e:	61fa      	str	r2, [r7, #28]
 8008f80:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 8008f82:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008f84:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008f86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f88:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008f8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f8e:	429a      	cmp	r2, r3
 8008f90:	d302      	bcc.n	8008f98 <xQueueGenericSendFromISR+0xbc>
 8008f92:	683b      	ldr	r3, [r7, #0]
 8008f94:	2b02      	cmp	r3, #2
 8008f96:	d12f      	bne.n	8008ff8 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008f98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f9a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008f9e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008fa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fa6:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008fa8:	683a      	ldr	r2, [r7, #0]
 8008faa:	68b9      	ldr	r1, [r7, #8]
 8008fac:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008fae:	f000 f911 	bl	80091d4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008fb2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8008fb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008fba:	d112      	bne.n	8008fe2 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008fbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d016      	beq.n	8008ff2 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008fc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fc6:	3324      	adds	r3, #36	; 0x24
 8008fc8:	4618      	mov	r0, r3
 8008fca:	f000 fed1 	bl	8009d70 <xTaskRemoveFromEventList>
 8008fce:	4603      	mov	r3, r0
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d00e      	beq.n	8008ff2 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d00b      	beq.n	8008ff2 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	2201      	movs	r2, #1
 8008fde:	601a      	str	r2, [r3, #0]
 8008fe0:	e007      	b.n	8008ff2 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008fe2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8008fe6:	3301      	adds	r3, #1
 8008fe8:	b2db      	uxtb	r3, r3
 8008fea:	b25a      	sxtb	r2, r3
 8008fec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8008ff2:	2301      	movs	r3, #1
 8008ff4:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8008ff6:	e001      	b.n	8008ffc <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008ff8:	2300      	movs	r3, #0
 8008ffa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008ffc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ffe:	617b      	str	r3, [r7, #20]
	__asm volatile
 8009000:	697b      	ldr	r3, [r7, #20]
 8009002:	f383 8811 	msr	BASEPRI, r3
}
 8009006:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009008:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800900a:	4618      	mov	r0, r3
 800900c:	3740      	adds	r7, #64	; 0x40
 800900e:	46bd      	mov	sp, r7
 8009010:	bd80      	pop	{r7, pc}
	...

08009014 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8009014:	b580      	push	{r7, lr}
 8009016:	b08c      	sub	sp, #48	; 0x30
 8009018:	af00      	add	r7, sp, #0
 800901a:	60f8      	str	r0, [r7, #12]
 800901c:	60b9      	str	r1, [r7, #8]
 800901e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8009020:	2300      	movs	r3, #0
 8009022:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009028:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800902a:	2b00      	cmp	r3, #0
 800902c:	d10a      	bne.n	8009044 <xQueueReceive+0x30>
	__asm volatile
 800902e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009032:	f383 8811 	msr	BASEPRI, r3
 8009036:	f3bf 8f6f 	isb	sy
 800903a:	f3bf 8f4f 	dsb	sy
 800903e:	623b      	str	r3, [r7, #32]
}
 8009040:	bf00      	nop
 8009042:	e7fe      	b.n	8009042 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009044:	68bb      	ldr	r3, [r7, #8]
 8009046:	2b00      	cmp	r3, #0
 8009048:	d103      	bne.n	8009052 <xQueueReceive+0x3e>
 800904a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800904c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800904e:	2b00      	cmp	r3, #0
 8009050:	d101      	bne.n	8009056 <xQueueReceive+0x42>
 8009052:	2301      	movs	r3, #1
 8009054:	e000      	b.n	8009058 <xQueueReceive+0x44>
 8009056:	2300      	movs	r3, #0
 8009058:	2b00      	cmp	r3, #0
 800905a:	d10a      	bne.n	8009072 <xQueueReceive+0x5e>
	__asm volatile
 800905c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009060:	f383 8811 	msr	BASEPRI, r3
 8009064:	f3bf 8f6f 	isb	sy
 8009068:	f3bf 8f4f 	dsb	sy
 800906c:	61fb      	str	r3, [r7, #28]
}
 800906e:	bf00      	nop
 8009070:	e7fe      	b.n	8009070 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009072:	f001 f83b 	bl	800a0ec <xTaskGetSchedulerState>
 8009076:	4603      	mov	r3, r0
 8009078:	2b00      	cmp	r3, #0
 800907a:	d102      	bne.n	8009082 <xQueueReceive+0x6e>
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	2b00      	cmp	r3, #0
 8009080:	d101      	bne.n	8009086 <xQueueReceive+0x72>
 8009082:	2301      	movs	r3, #1
 8009084:	e000      	b.n	8009088 <xQueueReceive+0x74>
 8009086:	2300      	movs	r3, #0
 8009088:	2b00      	cmp	r3, #0
 800908a:	d10a      	bne.n	80090a2 <xQueueReceive+0x8e>
	__asm volatile
 800908c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009090:	f383 8811 	msr	BASEPRI, r3
 8009094:	f3bf 8f6f 	isb	sy
 8009098:	f3bf 8f4f 	dsb	sy
 800909c:	61bb      	str	r3, [r7, #24]
}
 800909e:	bf00      	nop
 80090a0:	e7fe      	b.n	80090a0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80090a2:	f7ff fbf7 	bl	8008894 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80090a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090aa:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80090ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d01f      	beq.n	80090f2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80090b2:	68b9      	ldr	r1, [r7, #8]
 80090b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80090b6:	f000 f8f7 	bl	80092a8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80090ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090bc:	1e5a      	subs	r2, r3, #1
 80090be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090c0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80090c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090c4:	691b      	ldr	r3, [r3, #16]
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d00f      	beq.n	80090ea <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80090ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090cc:	3310      	adds	r3, #16
 80090ce:	4618      	mov	r0, r3
 80090d0:	f000 fe4e 	bl	8009d70 <xTaskRemoveFromEventList>
 80090d4:	4603      	mov	r3, r0
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d007      	beq.n	80090ea <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80090da:	4b3d      	ldr	r3, [pc, #244]	; (80091d0 <xQueueReceive+0x1bc>)
 80090dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80090e0:	601a      	str	r2, [r3, #0]
 80090e2:	f3bf 8f4f 	dsb	sy
 80090e6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80090ea:	f7ff fc03 	bl	80088f4 <vPortExitCritical>
				return pdPASS;
 80090ee:	2301      	movs	r3, #1
 80090f0:	e069      	b.n	80091c6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d103      	bne.n	8009100 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80090f8:	f7ff fbfc 	bl	80088f4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80090fc:	2300      	movs	r3, #0
 80090fe:	e062      	b.n	80091c6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009100:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009102:	2b00      	cmp	r3, #0
 8009104:	d106      	bne.n	8009114 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009106:	f107 0310 	add.w	r3, r7, #16
 800910a:	4618      	mov	r0, r3
 800910c:	f000 fe94 	bl	8009e38 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009110:	2301      	movs	r3, #1
 8009112:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009114:	f7ff fbee 	bl	80088f4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009118:	f000 fc06 	bl	8009928 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800911c:	f7ff fbba 	bl	8008894 <vPortEnterCritical>
 8009120:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009122:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009126:	b25b      	sxtb	r3, r3
 8009128:	f1b3 3fff 	cmp.w	r3, #4294967295
 800912c:	d103      	bne.n	8009136 <xQueueReceive+0x122>
 800912e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009130:	2200      	movs	r2, #0
 8009132:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009136:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009138:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800913c:	b25b      	sxtb	r3, r3
 800913e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009142:	d103      	bne.n	800914c <xQueueReceive+0x138>
 8009144:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009146:	2200      	movs	r2, #0
 8009148:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800914c:	f7ff fbd2 	bl	80088f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009150:	1d3a      	adds	r2, r7, #4
 8009152:	f107 0310 	add.w	r3, r7, #16
 8009156:	4611      	mov	r1, r2
 8009158:	4618      	mov	r0, r3
 800915a:	f000 fe83 	bl	8009e64 <xTaskCheckForTimeOut>
 800915e:	4603      	mov	r3, r0
 8009160:	2b00      	cmp	r3, #0
 8009162:	d123      	bne.n	80091ac <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009164:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009166:	f000 f917 	bl	8009398 <prvIsQueueEmpty>
 800916a:	4603      	mov	r3, r0
 800916c:	2b00      	cmp	r3, #0
 800916e:	d017      	beq.n	80091a0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009170:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009172:	3324      	adds	r3, #36	; 0x24
 8009174:	687a      	ldr	r2, [r7, #4]
 8009176:	4611      	mov	r1, r2
 8009178:	4618      	mov	r0, r3
 800917a:	f000 fda9 	bl	8009cd0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800917e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009180:	f000 f8b8 	bl	80092f4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009184:	f000 fbde 	bl	8009944 <xTaskResumeAll>
 8009188:	4603      	mov	r3, r0
 800918a:	2b00      	cmp	r3, #0
 800918c:	d189      	bne.n	80090a2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800918e:	4b10      	ldr	r3, [pc, #64]	; (80091d0 <xQueueReceive+0x1bc>)
 8009190:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009194:	601a      	str	r2, [r3, #0]
 8009196:	f3bf 8f4f 	dsb	sy
 800919a:	f3bf 8f6f 	isb	sy
 800919e:	e780      	b.n	80090a2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80091a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80091a2:	f000 f8a7 	bl	80092f4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80091a6:	f000 fbcd 	bl	8009944 <xTaskResumeAll>
 80091aa:	e77a      	b.n	80090a2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80091ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80091ae:	f000 f8a1 	bl	80092f4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80091b2:	f000 fbc7 	bl	8009944 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80091b6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80091b8:	f000 f8ee 	bl	8009398 <prvIsQueueEmpty>
 80091bc:	4603      	mov	r3, r0
 80091be:	2b00      	cmp	r3, #0
 80091c0:	f43f af6f 	beq.w	80090a2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80091c4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80091c6:	4618      	mov	r0, r3
 80091c8:	3730      	adds	r7, #48	; 0x30
 80091ca:	46bd      	mov	sp, r7
 80091cc:	bd80      	pop	{r7, pc}
 80091ce:	bf00      	nop
 80091d0:	e000ed04 	.word	0xe000ed04

080091d4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80091d4:	b580      	push	{r7, lr}
 80091d6:	b086      	sub	sp, #24
 80091d8:	af00      	add	r7, sp, #0
 80091da:	60f8      	str	r0, [r7, #12]
 80091dc:	60b9      	str	r1, [r7, #8]
 80091de:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80091e0:	2300      	movs	r3, #0
 80091e2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091e8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d10d      	bne.n	800920e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d14d      	bne.n	8009296 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	689b      	ldr	r3, [r3, #8]
 80091fe:	4618      	mov	r0, r3
 8009200:	f000 ff92 	bl	800a128 <xTaskPriorityDisinherit>
 8009204:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	2200      	movs	r2, #0
 800920a:	609a      	str	r2, [r3, #8]
 800920c:	e043      	b.n	8009296 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	2b00      	cmp	r3, #0
 8009212:	d119      	bne.n	8009248 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	6858      	ldr	r0, [r3, #4]
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800921c:	461a      	mov	r2, r3
 800921e:	68b9      	ldr	r1, [r7, #8]
 8009220:	f001 fbb6 	bl	800a990 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	685a      	ldr	r2, [r3, #4]
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800922c:	441a      	add	r2, r3
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	685a      	ldr	r2, [r3, #4]
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	689b      	ldr	r3, [r3, #8]
 800923a:	429a      	cmp	r2, r3
 800923c:	d32b      	bcc.n	8009296 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	681a      	ldr	r2, [r3, #0]
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	605a      	str	r2, [r3, #4]
 8009246:	e026      	b.n	8009296 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	68d8      	ldr	r0, [r3, #12]
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009250:	461a      	mov	r2, r3
 8009252:	68b9      	ldr	r1, [r7, #8]
 8009254:	f001 fb9c 	bl	800a990 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	68da      	ldr	r2, [r3, #12]
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009260:	425b      	negs	r3, r3
 8009262:	441a      	add	r2, r3
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	68da      	ldr	r2, [r3, #12]
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	429a      	cmp	r2, r3
 8009272:	d207      	bcs.n	8009284 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	689a      	ldr	r2, [r3, #8]
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800927c:	425b      	negs	r3, r3
 800927e:	441a      	add	r2, r3
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	2b02      	cmp	r3, #2
 8009288:	d105      	bne.n	8009296 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800928a:	693b      	ldr	r3, [r7, #16]
 800928c:	2b00      	cmp	r3, #0
 800928e:	d002      	beq.n	8009296 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009290:	693b      	ldr	r3, [r7, #16]
 8009292:	3b01      	subs	r3, #1
 8009294:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009296:	693b      	ldr	r3, [r7, #16]
 8009298:	1c5a      	adds	r2, r3, #1
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800929e:	697b      	ldr	r3, [r7, #20]
}
 80092a0:	4618      	mov	r0, r3
 80092a2:	3718      	adds	r7, #24
 80092a4:	46bd      	mov	sp, r7
 80092a6:	bd80      	pop	{r7, pc}

080092a8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80092a8:	b580      	push	{r7, lr}
 80092aa:	b082      	sub	sp, #8
 80092ac:	af00      	add	r7, sp, #0
 80092ae:	6078      	str	r0, [r7, #4]
 80092b0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d018      	beq.n	80092ec <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	68da      	ldr	r2, [r3, #12]
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092c2:	441a      	add	r2, r3
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	68da      	ldr	r2, [r3, #12]
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	689b      	ldr	r3, [r3, #8]
 80092d0:	429a      	cmp	r2, r3
 80092d2:	d303      	bcc.n	80092dc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	681a      	ldr	r2, [r3, #0]
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	68d9      	ldr	r1, [r3, #12]
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092e4:	461a      	mov	r2, r3
 80092e6:	6838      	ldr	r0, [r7, #0]
 80092e8:	f001 fb52 	bl	800a990 <memcpy>
	}
}
 80092ec:	bf00      	nop
 80092ee:	3708      	adds	r7, #8
 80092f0:	46bd      	mov	sp, r7
 80092f2:	bd80      	pop	{r7, pc}

080092f4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80092f4:	b580      	push	{r7, lr}
 80092f6:	b084      	sub	sp, #16
 80092f8:	af00      	add	r7, sp, #0
 80092fa:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80092fc:	f7ff faca 	bl	8008894 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009306:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009308:	e011      	b.n	800932e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800930e:	2b00      	cmp	r3, #0
 8009310:	d012      	beq.n	8009338 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	3324      	adds	r3, #36	; 0x24
 8009316:	4618      	mov	r0, r3
 8009318:	f000 fd2a 	bl	8009d70 <xTaskRemoveFromEventList>
 800931c:	4603      	mov	r3, r0
 800931e:	2b00      	cmp	r3, #0
 8009320:	d001      	beq.n	8009326 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8009322:	f000 fe01 	bl	8009f28 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8009326:	7bfb      	ldrb	r3, [r7, #15]
 8009328:	3b01      	subs	r3, #1
 800932a:	b2db      	uxtb	r3, r3
 800932c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800932e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009332:	2b00      	cmp	r3, #0
 8009334:	dce9      	bgt.n	800930a <prvUnlockQueue+0x16>
 8009336:	e000      	b.n	800933a <prvUnlockQueue+0x46>
					break;
 8009338:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	22ff      	movs	r2, #255	; 0xff
 800933e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8009342:	f7ff fad7 	bl	80088f4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8009346:	f7ff faa5 	bl	8008894 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009350:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009352:	e011      	b.n	8009378 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	691b      	ldr	r3, [r3, #16]
 8009358:	2b00      	cmp	r3, #0
 800935a:	d012      	beq.n	8009382 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	3310      	adds	r3, #16
 8009360:	4618      	mov	r0, r3
 8009362:	f000 fd05 	bl	8009d70 <xTaskRemoveFromEventList>
 8009366:	4603      	mov	r3, r0
 8009368:	2b00      	cmp	r3, #0
 800936a:	d001      	beq.n	8009370 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800936c:	f000 fddc 	bl	8009f28 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009370:	7bbb      	ldrb	r3, [r7, #14]
 8009372:	3b01      	subs	r3, #1
 8009374:	b2db      	uxtb	r3, r3
 8009376:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009378:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800937c:	2b00      	cmp	r3, #0
 800937e:	dce9      	bgt.n	8009354 <prvUnlockQueue+0x60>
 8009380:	e000      	b.n	8009384 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8009382:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	22ff      	movs	r2, #255	; 0xff
 8009388:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800938c:	f7ff fab2 	bl	80088f4 <vPortExitCritical>
}
 8009390:	bf00      	nop
 8009392:	3710      	adds	r7, #16
 8009394:	46bd      	mov	sp, r7
 8009396:	bd80      	pop	{r7, pc}

08009398 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009398:	b580      	push	{r7, lr}
 800939a:	b084      	sub	sp, #16
 800939c:	af00      	add	r7, sp, #0
 800939e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80093a0:	f7ff fa78 	bl	8008894 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d102      	bne.n	80093b2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80093ac:	2301      	movs	r3, #1
 80093ae:	60fb      	str	r3, [r7, #12]
 80093b0:	e001      	b.n	80093b6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80093b2:	2300      	movs	r3, #0
 80093b4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80093b6:	f7ff fa9d 	bl	80088f4 <vPortExitCritical>

	return xReturn;
 80093ba:	68fb      	ldr	r3, [r7, #12]
}
 80093bc:	4618      	mov	r0, r3
 80093be:	3710      	adds	r7, #16
 80093c0:	46bd      	mov	sp, r7
 80093c2:	bd80      	pop	{r7, pc}

080093c4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80093c4:	b580      	push	{r7, lr}
 80093c6:	b084      	sub	sp, #16
 80093c8:	af00      	add	r7, sp, #0
 80093ca:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80093cc:	f7ff fa62 	bl	8008894 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80093d8:	429a      	cmp	r2, r3
 80093da:	d102      	bne.n	80093e2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80093dc:	2301      	movs	r3, #1
 80093de:	60fb      	str	r3, [r7, #12]
 80093e0:	e001      	b.n	80093e6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80093e2:	2300      	movs	r3, #0
 80093e4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80093e6:	f7ff fa85 	bl	80088f4 <vPortExitCritical>

	return xReturn;
 80093ea:	68fb      	ldr	r3, [r7, #12]
}
 80093ec:	4618      	mov	r0, r3
 80093ee:	3710      	adds	r7, #16
 80093f0:	46bd      	mov	sp, r7
 80093f2:	bd80      	pop	{r7, pc}

080093f4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80093f4:	b480      	push	{r7}
 80093f6:	b085      	sub	sp, #20
 80093f8:	af00      	add	r7, sp, #0
 80093fa:	6078      	str	r0, [r7, #4]
 80093fc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80093fe:	2300      	movs	r3, #0
 8009400:	60fb      	str	r3, [r7, #12]
 8009402:	e014      	b.n	800942e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8009404:	4a0f      	ldr	r2, [pc, #60]	; (8009444 <vQueueAddToRegistry+0x50>)
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800940c:	2b00      	cmp	r3, #0
 800940e:	d10b      	bne.n	8009428 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8009410:	490c      	ldr	r1, [pc, #48]	; (8009444 <vQueueAddToRegistry+0x50>)
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	683a      	ldr	r2, [r7, #0]
 8009416:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800941a:	4a0a      	ldr	r2, [pc, #40]	; (8009444 <vQueueAddToRegistry+0x50>)
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	00db      	lsls	r3, r3, #3
 8009420:	4413      	add	r3, r2
 8009422:	687a      	ldr	r2, [r7, #4]
 8009424:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8009426:	e006      	b.n	8009436 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	3301      	adds	r3, #1
 800942c:	60fb      	str	r3, [r7, #12]
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	2b07      	cmp	r3, #7
 8009432:	d9e7      	bls.n	8009404 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8009434:	bf00      	nop
 8009436:	bf00      	nop
 8009438:	3714      	adds	r7, #20
 800943a:	46bd      	mov	sp, r7
 800943c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009440:	4770      	bx	lr
 8009442:	bf00      	nop
 8009444:	20004b14 	.word	0x20004b14

08009448 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009448:	b580      	push	{r7, lr}
 800944a:	b086      	sub	sp, #24
 800944c:	af00      	add	r7, sp, #0
 800944e:	60f8      	str	r0, [r7, #12]
 8009450:	60b9      	str	r1, [r7, #8]
 8009452:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8009458:	f7ff fa1c 	bl	8008894 <vPortEnterCritical>
 800945c:	697b      	ldr	r3, [r7, #20]
 800945e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009462:	b25b      	sxtb	r3, r3
 8009464:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009468:	d103      	bne.n	8009472 <vQueueWaitForMessageRestricted+0x2a>
 800946a:	697b      	ldr	r3, [r7, #20]
 800946c:	2200      	movs	r2, #0
 800946e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009472:	697b      	ldr	r3, [r7, #20]
 8009474:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009478:	b25b      	sxtb	r3, r3
 800947a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800947e:	d103      	bne.n	8009488 <vQueueWaitForMessageRestricted+0x40>
 8009480:	697b      	ldr	r3, [r7, #20]
 8009482:	2200      	movs	r2, #0
 8009484:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009488:	f7ff fa34 	bl	80088f4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800948c:	697b      	ldr	r3, [r7, #20]
 800948e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009490:	2b00      	cmp	r3, #0
 8009492:	d106      	bne.n	80094a2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8009494:	697b      	ldr	r3, [r7, #20]
 8009496:	3324      	adds	r3, #36	; 0x24
 8009498:	687a      	ldr	r2, [r7, #4]
 800949a:	68b9      	ldr	r1, [r7, #8]
 800949c:	4618      	mov	r0, r3
 800949e:	f000 fc3b 	bl	8009d18 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80094a2:	6978      	ldr	r0, [r7, #20]
 80094a4:	f7ff ff26 	bl	80092f4 <prvUnlockQueue>
	}
 80094a8:	bf00      	nop
 80094aa:	3718      	adds	r7, #24
 80094ac:	46bd      	mov	sp, r7
 80094ae:	bd80      	pop	{r7, pc}

080094b0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80094b0:	b580      	push	{r7, lr}
 80094b2:	b08e      	sub	sp, #56	; 0x38
 80094b4:	af04      	add	r7, sp, #16
 80094b6:	60f8      	str	r0, [r7, #12]
 80094b8:	60b9      	str	r1, [r7, #8]
 80094ba:	607a      	str	r2, [r7, #4]
 80094bc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80094be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d10a      	bne.n	80094da <xTaskCreateStatic+0x2a>
	__asm volatile
 80094c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094c8:	f383 8811 	msr	BASEPRI, r3
 80094cc:	f3bf 8f6f 	isb	sy
 80094d0:	f3bf 8f4f 	dsb	sy
 80094d4:	623b      	str	r3, [r7, #32]
}
 80094d6:	bf00      	nop
 80094d8:	e7fe      	b.n	80094d8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80094da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094dc:	2b00      	cmp	r3, #0
 80094de:	d10a      	bne.n	80094f6 <xTaskCreateStatic+0x46>
	__asm volatile
 80094e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094e4:	f383 8811 	msr	BASEPRI, r3
 80094e8:	f3bf 8f6f 	isb	sy
 80094ec:	f3bf 8f4f 	dsb	sy
 80094f0:	61fb      	str	r3, [r7, #28]
}
 80094f2:	bf00      	nop
 80094f4:	e7fe      	b.n	80094f4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80094f6:	235c      	movs	r3, #92	; 0x5c
 80094f8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80094fa:	693b      	ldr	r3, [r7, #16]
 80094fc:	2b5c      	cmp	r3, #92	; 0x5c
 80094fe:	d00a      	beq.n	8009516 <xTaskCreateStatic+0x66>
	__asm volatile
 8009500:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009504:	f383 8811 	msr	BASEPRI, r3
 8009508:	f3bf 8f6f 	isb	sy
 800950c:	f3bf 8f4f 	dsb	sy
 8009510:	61bb      	str	r3, [r7, #24]
}
 8009512:	bf00      	nop
 8009514:	e7fe      	b.n	8009514 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8009516:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009518:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800951a:	2b00      	cmp	r3, #0
 800951c:	d01e      	beq.n	800955c <xTaskCreateStatic+0xac>
 800951e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009520:	2b00      	cmp	r3, #0
 8009522:	d01b      	beq.n	800955c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009524:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009526:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800952a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800952c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800952e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009530:	2202      	movs	r2, #2
 8009532:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009536:	2300      	movs	r3, #0
 8009538:	9303      	str	r3, [sp, #12]
 800953a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800953c:	9302      	str	r3, [sp, #8]
 800953e:	f107 0314 	add.w	r3, r7, #20
 8009542:	9301      	str	r3, [sp, #4]
 8009544:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009546:	9300      	str	r3, [sp, #0]
 8009548:	683b      	ldr	r3, [r7, #0]
 800954a:	687a      	ldr	r2, [r7, #4]
 800954c:	68b9      	ldr	r1, [r7, #8]
 800954e:	68f8      	ldr	r0, [r7, #12]
 8009550:	f000 f850 	bl	80095f4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009554:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009556:	f000 f8dd 	bl	8009714 <prvAddNewTaskToReadyList>
 800955a:	e001      	b.n	8009560 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800955c:	2300      	movs	r3, #0
 800955e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8009560:	697b      	ldr	r3, [r7, #20]
	}
 8009562:	4618      	mov	r0, r3
 8009564:	3728      	adds	r7, #40	; 0x28
 8009566:	46bd      	mov	sp, r7
 8009568:	bd80      	pop	{r7, pc}

0800956a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800956a:	b580      	push	{r7, lr}
 800956c:	b08c      	sub	sp, #48	; 0x30
 800956e:	af04      	add	r7, sp, #16
 8009570:	60f8      	str	r0, [r7, #12]
 8009572:	60b9      	str	r1, [r7, #8]
 8009574:	603b      	str	r3, [r7, #0]
 8009576:	4613      	mov	r3, r2
 8009578:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800957a:	88fb      	ldrh	r3, [r7, #6]
 800957c:	009b      	lsls	r3, r3, #2
 800957e:	4618      	mov	r0, r3
 8009580:	f7fe fdbc 	bl	80080fc <pvPortMalloc>
 8009584:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009586:	697b      	ldr	r3, [r7, #20]
 8009588:	2b00      	cmp	r3, #0
 800958a:	d00e      	beq.n	80095aa <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800958c:	205c      	movs	r0, #92	; 0x5c
 800958e:	f7fe fdb5 	bl	80080fc <pvPortMalloc>
 8009592:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009594:	69fb      	ldr	r3, [r7, #28]
 8009596:	2b00      	cmp	r3, #0
 8009598:	d003      	beq.n	80095a2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800959a:	69fb      	ldr	r3, [r7, #28]
 800959c:	697a      	ldr	r2, [r7, #20]
 800959e:	631a      	str	r2, [r3, #48]	; 0x30
 80095a0:	e005      	b.n	80095ae <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80095a2:	6978      	ldr	r0, [r7, #20]
 80095a4:	f7fe fe76 	bl	8008294 <vPortFree>
 80095a8:	e001      	b.n	80095ae <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80095aa:	2300      	movs	r3, #0
 80095ac:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80095ae:	69fb      	ldr	r3, [r7, #28]
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d017      	beq.n	80095e4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80095b4:	69fb      	ldr	r3, [r7, #28]
 80095b6:	2200      	movs	r2, #0
 80095b8:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80095bc:	88fa      	ldrh	r2, [r7, #6]
 80095be:	2300      	movs	r3, #0
 80095c0:	9303      	str	r3, [sp, #12]
 80095c2:	69fb      	ldr	r3, [r7, #28]
 80095c4:	9302      	str	r3, [sp, #8]
 80095c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095c8:	9301      	str	r3, [sp, #4]
 80095ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095cc:	9300      	str	r3, [sp, #0]
 80095ce:	683b      	ldr	r3, [r7, #0]
 80095d0:	68b9      	ldr	r1, [r7, #8]
 80095d2:	68f8      	ldr	r0, [r7, #12]
 80095d4:	f000 f80e 	bl	80095f4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80095d8:	69f8      	ldr	r0, [r7, #28]
 80095da:	f000 f89b 	bl	8009714 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80095de:	2301      	movs	r3, #1
 80095e0:	61bb      	str	r3, [r7, #24]
 80095e2:	e002      	b.n	80095ea <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80095e4:	f04f 33ff 	mov.w	r3, #4294967295
 80095e8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80095ea:	69bb      	ldr	r3, [r7, #24]
	}
 80095ec:	4618      	mov	r0, r3
 80095ee:	3720      	adds	r7, #32
 80095f0:	46bd      	mov	sp, r7
 80095f2:	bd80      	pop	{r7, pc}

080095f4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80095f4:	b580      	push	{r7, lr}
 80095f6:	b088      	sub	sp, #32
 80095f8:	af00      	add	r7, sp, #0
 80095fa:	60f8      	str	r0, [r7, #12]
 80095fc:	60b9      	str	r1, [r7, #8]
 80095fe:	607a      	str	r2, [r7, #4]
 8009600:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8009602:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009604:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	009b      	lsls	r3, r3, #2
 800960a:	461a      	mov	r2, r3
 800960c:	21a5      	movs	r1, #165	; 0xa5
 800960e:	f001 f9cd 	bl	800a9ac <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8009612:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009614:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009616:	6879      	ldr	r1, [r7, #4]
 8009618:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800961c:	440b      	add	r3, r1
 800961e:	009b      	lsls	r3, r3, #2
 8009620:	4413      	add	r3, r2
 8009622:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009624:	69bb      	ldr	r3, [r7, #24]
 8009626:	f023 0307 	bic.w	r3, r3, #7
 800962a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800962c:	69bb      	ldr	r3, [r7, #24]
 800962e:	f003 0307 	and.w	r3, r3, #7
 8009632:	2b00      	cmp	r3, #0
 8009634:	d00a      	beq.n	800964c <prvInitialiseNewTask+0x58>
	__asm volatile
 8009636:	f04f 0350 	mov.w	r3, #80	; 0x50
 800963a:	f383 8811 	msr	BASEPRI, r3
 800963e:	f3bf 8f6f 	isb	sy
 8009642:	f3bf 8f4f 	dsb	sy
 8009646:	617b      	str	r3, [r7, #20]
}
 8009648:	bf00      	nop
 800964a:	e7fe      	b.n	800964a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800964c:	68bb      	ldr	r3, [r7, #8]
 800964e:	2b00      	cmp	r3, #0
 8009650:	d01f      	beq.n	8009692 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009652:	2300      	movs	r3, #0
 8009654:	61fb      	str	r3, [r7, #28]
 8009656:	e012      	b.n	800967e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009658:	68ba      	ldr	r2, [r7, #8]
 800965a:	69fb      	ldr	r3, [r7, #28]
 800965c:	4413      	add	r3, r2
 800965e:	7819      	ldrb	r1, [r3, #0]
 8009660:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009662:	69fb      	ldr	r3, [r7, #28]
 8009664:	4413      	add	r3, r2
 8009666:	3334      	adds	r3, #52	; 0x34
 8009668:	460a      	mov	r2, r1
 800966a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800966c:	68ba      	ldr	r2, [r7, #8]
 800966e:	69fb      	ldr	r3, [r7, #28]
 8009670:	4413      	add	r3, r2
 8009672:	781b      	ldrb	r3, [r3, #0]
 8009674:	2b00      	cmp	r3, #0
 8009676:	d006      	beq.n	8009686 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009678:	69fb      	ldr	r3, [r7, #28]
 800967a:	3301      	adds	r3, #1
 800967c:	61fb      	str	r3, [r7, #28]
 800967e:	69fb      	ldr	r3, [r7, #28]
 8009680:	2b0f      	cmp	r3, #15
 8009682:	d9e9      	bls.n	8009658 <prvInitialiseNewTask+0x64>
 8009684:	e000      	b.n	8009688 <prvInitialiseNewTask+0x94>
			{
				break;
 8009686:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009688:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800968a:	2200      	movs	r2, #0
 800968c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009690:	e003      	b.n	800969a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009692:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009694:	2200      	movs	r2, #0
 8009696:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800969a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800969c:	2b37      	cmp	r3, #55	; 0x37
 800969e:	d901      	bls.n	80096a4 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80096a0:	2337      	movs	r3, #55	; 0x37
 80096a2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80096a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80096a8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80096aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096ac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80096ae:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80096b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096b2:	2200      	movs	r2, #0
 80096b4:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80096b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096b8:	3304      	adds	r3, #4
 80096ba:	4618      	mov	r0, r3
 80096bc:	f7fe ff28 	bl	8008510 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80096c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096c2:	3318      	adds	r3, #24
 80096c4:	4618      	mov	r0, r3
 80096c6:	f7fe ff23 	bl	8008510 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80096ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80096ce:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80096d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096d2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80096d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096d8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80096da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80096de:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80096e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096e2:	2200      	movs	r2, #0
 80096e4:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80096e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096e8:	2200      	movs	r2, #0
 80096ea:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80096ee:	683a      	ldr	r2, [r7, #0]
 80096f0:	68f9      	ldr	r1, [r7, #12]
 80096f2:	69b8      	ldr	r0, [r7, #24]
 80096f4:	f7fe ffa0 	bl	8008638 <pxPortInitialiseStack>
 80096f8:	4602      	mov	r2, r0
 80096fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096fc:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80096fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009700:	2b00      	cmp	r3, #0
 8009702:	d002      	beq.n	800970a <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009704:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009706:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009708:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800970a:	bf00      	nop
 800970c:	3720      	adds	r7, #32
 800970e:	46bd      	mov	sp, r7
 8009710:	bd80      	pop	{r7, pc}
	...

08009714 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009714:	b580      	push	{r7, lr}
 8009716:	b082      	sub	sp, #8
 8009718:	af00      	add	r7, sp, #0
 800971a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800971c:	f7ff f8ba 	bl	8008894 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009720:	4b2d      	ldr	r3, [pc, #180]	; (80097d8 <prvAddNewTaskToReadyList+0xc4>)
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	3301      	adds	r3, #1
 8009726:	4a2c      	ldr	r2, [pc, #176]	; (80097d8 <prvAddNewTaskToReadyList+0xc4>)
 8009728:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800972a:	4b2c      	ldr	r3, [pc, #176]	; (80097dc <prvAddNewTaskToReadyList+0xc8>)
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	2b00      	cmp	r3, #0
 8009730:	d109      	bne.n	8009746 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8009732:	4a2a      	ldr	r2, [pc, #168]	; (80097dc <prvAddNewTaskToReadyList+0xc8>)
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009738:	4b27      	ldr	r3, [pc, #156]	; (80097d8 <prvAddNewTaskToReadyList+0xc4>)
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	2b01      	cmp	r3, #1
 800973e:	d110      	bne.n	8009762 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009740:	f000 fc16 	bl	8009f70 <prvInitialiseTaskLists>
 8009744:	e00d      	b.n	8009762 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009746:	4b26      	ldr	r3, [pc, #152]	; (80097e0 <prvAddNewTaskToReadyList+0xcc>)
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	2b00      	cmp	r3, #0
 800974c:	d109      	bne.n	8009762 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800974e:	4b23      	ldr	r3, [pc, #140]	; (80097dc <prvAddNewTaskToReadyList+0xc8>)
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009758:	429a      	cmp	r2, r3
 800975a:	d802      	bhi.n	8009762 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800975c:	4a1f      	ldr	r2, [pc, #124]	; (80097dc <prvAddNewTaskToReadyList+0xc8>)
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8009762:	4b20      	ldr	r3, [pc, #128]	; (80097e4 <prvAddNewTaskToReadyList+0xd0>)
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	3301      	adds	r3, #1
 8009768:	4a1e      	ldr	r2, [pc, #120]	; (80097e4 <prvAddNewTaskToReadyList+0xd0>)
 800976a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800976c:	4b1d      	ldr	r3, [pc, #116]	; (80097e4 <prvAddNewTaskToReadyList+0xd0>)
 800976e:	681a      	ldr	r2, [r3, #0]
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009778:	4b1b      	ldr	r3, [pc, #108]	; (80097e8 <prvAddNewTaskToReadyList+0xd4>)
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	429a      	cmp	r2, r3
 800977e:	d903      	bls.n	8009788 <prvAddNewTaskToReadyList+0x74>
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009784:	4a18      	ldr	r2, [pc, #96]	; (80097e8 <prvAddNewTaskToReadyList+0xd4>)
 8009786:	6013      	str	r3, [r2, #0]
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800978c:	4613      	mov	r3, r2
 800978e:	009b      	lsls	r3, r3, #2
 8009790:	4413      	add	r3, r2
 8009792:	009b      	lsls	r3, r3, #2
 8009794:	4a15      	ldr	r2, [pc, #84]	; (80097ec <prvAddNewTaskToReadyList+0xd8>)
 8009796:	441a      	add	r2, r3
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	3304      	adds	r3, #4
 800979c:	4619      	mov	r1, r3
 800979e:	4610      	mov	r0, r2
 80097a0:	f7fe fec3 	bl	800852a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80097a4:	f7ff f8a6 	bl	80088f4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80097a8:	4b0d      	ldr	r3, [pc, #52]	; (80097e0 <prvAddNewTaskToReadyList+0xcc>)
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d00e      	beq.n	80097ce <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80097b0:	4b0a      	ldr	r3, [pc, #40]	; (80097dc <prvAddNewTaskToReadyList+0xc8>)
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097ba:	429a      	cmp	r2, r3
 80097bc:	d207      	bcs.n	80097ce <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80097be:	4b0c      	ldr	r3, [pc, #48]	; (80097f0 <prvAddNewTaskToReadyList+0xdc>)
 80097c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80097c4:	601a      	str	r2, [r3, #0]
 80097c6:	f3bf 8f4f 	dsb	sy
 80097ca:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80097ce:	bf00      	nop
 80097d0:	3708      	adds	r7, #8
 80097d2:	46bd      	mov	sp, r7
 80097d4:	bd80      	pop	{r7, pc}
 80097d6:	bf00      	nop
 80097d8:	200047e8 	.word	0x200047e8
 80097dc:	20004314 	.word	0x20004314
 80097e0:	200047f4 	.word	0x200047f4
 80097e4:	20004804 	.word	0x20004804
 80097e8:	200047f0 	.word	0x200047f0
 80097ec:	20004318 	.word	0x20004318
 80097f0:	e000ed04 	.word	0xe000ed04

080097f4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80097f4:	b580      	push	{r7, lr}
 80097f6:	b084      	sub	sp, #16
 80097f8:	af00      	add	r7, sp, #0
 80097fa:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80097fc:	2300      	movs	r3, #0
 80097fe:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	2b00      	cmp	r3, #0
 8009804:	d017      	beq.n	8009836 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8009806:	4b13      	ldr	r3, [pc, #76]	; (8009854 <vTaskDelay+0x60>)
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	2b00      	cmp	r3, #0
 800980c:	d00a      	beq.n	8009824 <vTaskDelay+0x30>
	__asm volatile
 800980e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009812:	f383 8811 	msr	BASEPRI, r3
 8009816:	f3bf 8f6f 	isb	sy
 800981a:	f3bf 8f4f 	dsb	sy
 800981e:	60bb      	str	r3, [r7, #8]
}
 8009820:	bf00      	nop
 8009822:	e7fe      	b.n	8009822 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8009824:	f000 f880 	bl	8009928 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009828:	2100      	movs	r1, #0
 800982a:	6878      	ldr	r0, [r7, #4]
 800982c:	f000 fcea 	bl	800a204 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8009830:	f000 f888 	bl	8009944 <xTaskResumeAll>
 8009834:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	2b00      	cmp	r3, #0
 800983a:	d107      	bne.n	800984c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800983c:	4b06      	ldr	r3, [pc, #24]	; (8009858 <vTaskDelay+0x64>)
 800983e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009842:	601a      	str	r2, [r3, #0]
 8009844:	f3bf 8f4f 	dsb	sy
 8009848:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800984c:	bf00      	nop
 800984e:	3710      	adds	r7, #16
 8009850:	46bd      	mov	sp, r7
 8009852:	bd80      	pop	{r7, pc}
 8009854:	20004810 	.word	0x20004810
 8009858:	e000ed04 	.word	0xe000ed04

0800985c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800985c:	b580      	push	{r7, lr}
 800985e:	b08a      	sub	sp, #40	; 0x28
 8009860:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009862:	2300      	movs	r3, #0
 8009864:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009866:	2300      	movs	r3, #0
 8009868:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800986a:	463a      	mov	r2, r7
 800986c:	1d39      	adds	r1, r7, #4
 800986e:	f107 0308 	add.w	r3, r7, #8
 8009872:	4618      	mov	r0, r3
 8009874:	f7fe fc0e 	bl	8008094 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009878:	6839      	ldr	r1, [r7, #0]
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	68ba      	ldr	r2, [r7, #8]
 800987e:	9202      	str	r2, [sp, #8]
 8009880:	9301      	str	r3, [sp, #4]
 8009882:	2300      	movs	r3, #0
 8009884:	9300      	str	r3, [sp, #0]
 8009886:	2300      	movs	r3, #0
 8009888:	460a      	mov	r2, r1
 800988a:	4921      	ldr	r1, [pc, #132]	; (8009910 <vTaskStartScheduler+0xb4>)
 800988c:	4821      	ldr	r0, [pc, #132]	; (8009914 <vTaskStartScheduler+0xb8>)
 800988e:	f7ff fe0f 	bl	80094b0 <xTaskCreateStatic>
 8009892:	4603      	mov	r3, r0
 8009894:	4a20      	ldr	r2, [pc, #128]	; (8009918 <vTaskStartScheduler+0xbc>)
 8009896:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009898:	4b1f      	ldr	r3, [pc, #124]	; (8009918 <vTaskStartScheduler+0xbc>)
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	2b00      	cmp	r3, #0
 800989e:	d002      	beq.n	80098a6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80098a0:	2301      	movs	r3, #1
 80098a2:	617b      	str	r3, [r7, #20]
 80098a4:	e001      	b.n	80098aa <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80098a6:	2300      	movs	r3, #0
 80098a8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80098aa:	697b      	ldr	r3, [r7, #20]
 80098ac:	2b01      	cmp	r3, #1
 80098ae:	d102      	bne.n	80098b6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80098b0:	f000 fcfc 	bl	800a2ac <xTimerCreateTimerTask>
 80098b4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80098b6:	697b      	ldr	r3, [r7, #20]
 80098b8:	2b01      	cmp	r3, #1
 80098ba:	d116      	bne.n	80098ea <vTaskStartScheduler+0x8e>
	__asm volatile
 80098bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098c0:	f383 8811 	msr	BASEPRI, r3
 80098c4:	f3bf 8f6f 	isb	sy
 80098c8:	f3bf 8f4f 	dsb	sy
 80098cc:	613b      	str	r3, [r7, #16]
}
 80098ce:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80098d0:	4b12      	ldr	r3, [pc, #72]	; (800991c <vTaskStartScheduler+0xc0>)
 80098d2:	f04f 32ff 	mov.w	r2, #4294967295
 80098d6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80098d8:	4b11      	ldr	r3, [pc, #68]	; (8009920 <vTaskStartScheduler+0xc4>)
 80098da:	2201      	movs	r2, #1
 80098dc:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80098de:	4b11      	ldr	r3, [pc, #68]	; (8009924 <vTaskStartScheduler+0xc8>)
 80098e0:	2200      	movs	r2, #0
 80098e2:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80098e4:	f7fe ff34 	bl	8008750 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80098e8:	e00e      	b.n	8009908 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80098ea:	697b      	ldr	r3, [r7, #20]
 80098ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80098f0:	d10a      	bne.n	8009908 <vTaskStartScheduler+0xac>
	__asm volatile
 80098f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098f6:	f383 8811 	msr	BASEPRI, r3
 80098fa:	f3bf 8f6f 	isb	sy
 80098fe:	f3bf 8f4f 	dsb	sy
 8009902:	60fb      	str	r3, [r7, #12]
}
 8009904:	bf00      	nop
 8009906:	e7fe      	b.n	8009906 <vTaskStartScheduler+0xaa>
}
 8009908:	bf00      	nop
 800990a:	3718      	adds	r7, #24
 800990c:	46bd      	mov	sp, r7
 800990e:	bd80      	pop	{r7, pc}
 8009910:	0800a9e0 	.word	0x0800a9e0
 8009914:	08009f41 	.word	0x08009f41
 8009918:	2000480c 	.word	0x2000480c
 800991c:	20004808 	.word	0x20004808
 8009920:	200047f4 	.word	0x200047f4
 8009924:	200047ec 	.word	0x200047ec

08009928 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009928:	b480      	push	{r7}
 800992a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800992c:	4b04      	ldr	r3, [pc, #16]	; (8009940 <vTaskSuspendAll+0x18>)
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	3301      	adds	r3, #1
 8009932:	4a03      	ldr	r2, [pc, #12]	; (8009940 <vTaskSuspendAll+0x18>)
 8009934:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8009936:	bf00      	nop
 8009938:	46bd      	mov	sp, r7
 800993a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800993e:	4770      	bx	lr
 8009940:	20004810 	.word	0x20004810

08009944 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009944:	b580      	push	{r7, lr}
 8009946:	b084      	sub	sp, #16
 8009948:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800994a:	2300      	movs	r3, #0
 800994c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800994e:	2300      	movs	r3, #0
 8009950:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009952:	4b42      	ldr	r3, [pc, #264]	; (8009a5c <xTaskResumeAll+0x118>)
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	2b00      	cmp	r3, #0
 8009958:	d10a      	bne.n	8009970 <xTaskResumeAll+0x2c>
	__asm volatile
 800995a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800995e:	f383 8811 	msr	BASEPRI, r3
 8009962:	f3bf 8f6f 	isb	sy
 8009966:	f3bf 8f4f 	dsb	sy
 800996a:	603b      	str	r3, [r7, #0]
}
 800996c:	bf00      	nop
 800996e:	e7fe      	b.n	800996e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009970:	f7fe ff90 	bl	8008894 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009974:	4b39      	ldr	r3, [pc, #228]	; (8009a5c <xTaskResumeAll+0x118>)
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	3b01      	subs	r3, #1
 800997a:	4a38      	ldr	r2, [pc, #224]	; (8009a5c <xTaskResumeAll+0x118>)
 800997c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800997e:	4b37      	ldr	r3, [pc, #220]	; (8009a5c <xTaskResumeAll+0x118>)
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	2b00      	cmp	r3, #0
 8009984:	d162      	bne.n	8009a4c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009986:	4b36      	ldr	r3, [pc, #216]	; (8009a60 <xTaskResumeAll+0x11c>)
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	2b00      	cmp	r3, #0
 800998c:	d05e      	beq.n	8009a4c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800998e:	e02f      	b.n	80099f0 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009990:	4b34      	ldr	r3, [pc, #208]	; (8009a64 <xTaskResumeAll+0x120>)
 8009992:	68db      	ldr	r3, [r3, #12]
 8009994:	68db      	ldr	r3, [r3, #12]
 8009996:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009998:	68fb      	ldr	r3, [r7, #12]
 800999a:	3318      	adds	r3, #24
 800999c:	4618      	mov	r0, r3
 800999e:	f7fe fe21 	bl	80085e4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80099a2:	68fb      	ldr	r3, [r7, #12]
 80099a4:	3304      	adds	r3, #4
 80099a6:	4618      	mov	r0, r3
 80099a8:	f7fe fe1c 	bl	80085e4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80099b0:	4b2d      	ldr	r3, [pc, #180]	; (8009a68 <xTaskResumeAll+0x124>)
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	429a      	cmp	r2, r3
 80099b6:	d903      	bls.n	80099c0 <xTaskResumeAll+0x7c>
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099bc:	4a2a      	ldr	r2, [pc, #168]	; (8009a68 <xTaskResumeAll+0x124>)
 80099be:	6013      	str	r3, [r2, #0]
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80099c4:	4613      	mov	r3, r2
 80099c6:	009b      	lsls	r3, r3, #2
 80099c8:	4413      	add	r3, r2
 80099ca:	009b      	lsls	r3, r3, #2
 80099cc:	4a27      	ldr	r2, [pc, #156]	; (8009a6c <xTaskResumeAll+0x128>)
 80099ce:	441a      	add	r2, r3
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	3304      	adds	r3, #4
 80099d4:	4619      	mov	r1, r3
 80099d6:	4610      	mov	r0, r2
 80099d8:	f7fe fda7 	bl	800852a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80099e0:	4b23      	ldr	r3, [pc, #140]	; (8009a70 <xTaskResumeAll+0x12c>)
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099e6:	429a      	cmp	r2, r3
 80099e8:	d302      	bcc.n	80099f0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80099ea:	4b22      	ldr	r3, [pc, #136]	; (8009a74 <xTaskResumeAll+0x130>)
 80099ec:	2201      	movs	r2, #1
 80099ee:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80099f0:	4b1c      	ldr	r3, [pc, #112]	; (8009a64 <xTaskResumeAll+0x120>)
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	d1cb      	bne.n	8009990 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	d001      	beq.n	8009a02 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80099fe:	f000 fb55 	bl	800a0ac <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8009a02:	4b1d      	ldr	r3, [pc, #116]	; (8009a78 <xTaskResumeAll+0x134>)
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d010      	beq.n	8009a30 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009a0e:	f000 f847 	bl	8009aa0 <xTaskIncrementTick>
 8009a12:	4603      	mov	r3, r0
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	d002      	beq.n	8009a1e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8009a18:	4b16      	ldr	r3, [pc, #88]	; (8009a74 <xTaskResumeAll+0x130>)
 8009a1a:	2201      	movs	r2, #1
 8009a1c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	3b01      	subs	r3, #1
 8009a22:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d1f1      	bne.n	8009a0e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8009a2a:	4b13      	ldr	r3, [pc, #76]	; (8009a78 <xTaskResumeAll+0x134>)
 8009a2c:	2200      	movs	r2, #0
 8009a2e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009a30:	4b10      	ldr	r3, [pc, #64]	; (8009a74 <xTaskResumeAll+0x130>)
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	d009      	beq.n	8009a4c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009a38:	2301      	movs	r3, #1
 8009a3a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009a3c:	4b0f      	ldr	r3, [pc, #60]	; (8009a7c <xTaskResumeAll+0x138>)
 8009a3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009a42:	601a      	str	r2, [r3, #0]
 8009a44:	f3bf 8f4f 	dsb	sy
 8009a48:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009a4c:	f7fe ff52 	bl	80088f4 <vPortExitCritical>

	return xAlreadyYielded;
 8009a50:	68bb      	ldr	r3, [r7, #8]
}
 8009a52:	4618      	mov	r0, r3
 8009a54:	3710      	adds	r7, #16
 8009a56:	46bd      	mov	sp, r7
 8009a58:	bd80      	pop	{r7, pc}
 8009a5a:	bf00      	nop
 8009a5c:	20004810 	.word	0x20004810
 8009a60:	200047e8 	.word	0x200047e8
 8009a64:	200047a8 	.word	0x200047a8
 8009a68:	200047f0 	.word	0x200047f0
 8009a6c:	20004318 	.word	0x20004318
 8009a70:	20004314 	.word	0x20004314
 8009a74:	200047fc 	.word	0x200047fc
 8009a78:	200047f8 	.word	0x200047f8
 8009a7c:	e000ed04 	.word	0xe000ed04

08009a80 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009a80:	b480      	push	{r7}
 8009a82:	b083      	sub	sp, #12
 8009a84:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8009a86:	4b05      	ldr	r3, [pc, #20]	; (8009a9c <xTaskGetTickCount+0x1c>)
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009a8c:	687b      	ldr	r3, [r7, #4]
}
 8009a8e:	4618      	mov	r0, r3
 8009a90:	370c      	adds	r7, #12
 8009a92:	46bd      	mov	sp, r7
 8009a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a98:	4770      	bx	lr
 8009a9a:	bf00      	nop
 8009a9c:	200047ec 	.word	0x200047ec

08009aa0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009aa0:	b580      	push	{r7, lr}
 8009aa2:	b086      	sub	sp, #24
 8009aa4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009aa6:	2300      	movs	r3, #0
 8009aa8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009aaa:	4b4f      	ldr	r3, [pc, #316]	; (8009be8 <xTaskIncrementTick+0x148>)
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	f040 808f 	bne.w	8009bd2 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009ab4:	4b4d      	ldr	r3, [pc, #308]	; (8009bec <xTaskIncrementTick+0x14c>)
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	3301      	adds	r3, #1
 8009aba:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009abc:	4a4b      	ldr	r2, [pc, #300]	; (8009bec <xTaskIncrementTick+0x14c>)
 8009abe:	693b      	ldr	r3, [r7, #16]
 8009ac0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009ac2:	693b      	ldr	r3, [r7, #16]
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d120      	bne.n	8009b0a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8009ac8:	4b49      	ldr	r3, [pc, #292]	; (8009bf0 <xTaskIncrementTick+0x150>)
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d00a      	beq.n	8009ae8 <xTaskIncrementTick+0x48>
	__asm volatile
 8009ad2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ad6:	f383 8811 	msr	BASEPRI, r3
 8009ada:	f3bf 8f6f 	isb	sy
 8009ade:	f3bf 8f4f 	dsb	sy
 8009ae2:	603b      	str	r3, [r7, #0]
}
 8009ae4:	bf00      	nop
 8009ae6:	e7fe      	b.n	8009ae6 <xTaskIncrementTick+0x46>
 8009ae8:	4b41      	ldr	r3, [pc, #260]	; (8009bf0 <xTaskIncrementTick+0x150>)
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	60fb      	str	r3, [r7, #12]
 8009aee:	4b41      	ldr	r3, [pc, #260]	; (8009bf4 <xTaskIncrementTick+0x154>)
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	4a3f      	ldr	r2, [pc, #252]	; (8009bf0 <xTaskIncrementTick+0x150>)
 8009af4:	6013      	str	r3, [r2, #0]
 8009af6:	4a3f      	ldr	r2, [pc, #252]	; (8009bf4 <xTaskIncrementTick+0x154>)
 8009af8:	68fb      	ldr	r3, [r7, #12]
 8009afa:	6013      	str	r3, [r2, #0]
 8009afc:	4b3e      	ldr	r3, [pc, #248]	; (8009bf8 <xTaskIncrementTick+0x158>)
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	3301      	adds	r3, #1
 8009b02:	4a3d      	ldr	r2, [pc, #244]	; (8009bf8 <xTaskIncrementTick+0x158>)
 8009b04:	6013      	str	r3, [r2, #0]
 8009b06:	f000 fad1 	bl	800a0ac <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009b0a:	4b3c      	ldr	r3, [pc, #240]	; (8009bfc <xTaskIncrementTick+0x15c>)
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	693a      	ldr	r2, [r7, #16]
 8009b10:	429a      	cmp	r2, r3
 8009b12:	d349      	bcc.n	8009ba8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009b14:	4b36      	ldr	r3, [pc, #216]	; (8009bf0 <xTaskIncrementTick+0x150>)
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	d104      	bne.n	8009b28 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009b1e:	4b37      	ldr	r3, [pc, #220]	; (8009bfc <xTaskIncrementTick+0x15c>)
 8009b20:	f04f 32ff 	mov.w	r2, #4294967295
 8009b24:	601a      	str	r2, [r3, #0]
					break;
 8009b26:	e03f      	b.n	8009ba8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009b28:	4b31      	ldr	r3, [pc, #196]	; (8009bf0 <xTaskIncrementTick+0x150>)
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	68db      	ldr	r3, [r3, #12]
 8009b2e:	68db      	ldr	r3, [r3, #12]
 8009b30:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009b32:	68bb      	ldr	r3, [r7, #8]
 8009b34:	685b      	ldr	r3, [r3, #4]
 8009b36:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009b38:	693a      	ldr	r2, [r7, #16]
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	429a      	cmp	r2, r3
 8009b3e:	d203      	bcs.n	8009b48 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009b40:	4a2e      	ldr	r2, [pc, #184]	; (8009bfc <xTaskIncrementTick+0x15c>)
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009b46:	e02f      	b.n	8009ba8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009b48:	68bb      	ldr	r3, [r7, #8]
 8009b4a:	3304      	adds	r3, #4
 8009b4c:	4618      	mov	r0, r3
 8009b4e:	f7fe fd49 	bl	80085e4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009b52:	68bb      	ldr	r3, [r7, #8]
 8009b54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	d004      	beq.n	8009b64 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009b5a:	68bb      	ldr	r3, [r7, #8]
 8009b5c:	3318      	adds	r3, #24
 8009b5e:	4618      	mov	r0, r3
 8009b60:	f7fe fd40 	bl	80085e4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009b64:	68bb      	ldr	r3, [r7, #8]
 8009b66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b68:	4b25      	ldr	r3, [pc, #148]	; (8009c00 <xTaskIncrementTick+0x160>)
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	429a      	cmp	r2, r3
 8009b6e:	d903      	bls.n	8009b78 <xTaskIncrementTick+0xd8>
 8009b70:	68bb      	ldr	r3, [r7, #8]
 8009b72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b74:	4a22      	ldr	r2, [pc, #136]	; (8009c00 <xTaskIncrementTick+0x160>)
 8009b76:	6013      	str	r3, [r2, #0]
 8009b78:	68bb      	ldr	r3, [r7, #8]
 8009b7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b7c:	4613      	mov	r3, r2
 8009b7e:	009b      	lsls	r3, r3, #2
 8009b80:	4413      	add	r3, r2
 8009b82:	009b      	lsls	r3, r3, #2
 8009b84:	4a1f      	ldr	r2, [pc, #124]	; (8009c04 <xTaskIncrementTick+0x164>)
 8009b86:	441a      	add	r2, r3
 8009b88:	68bb      	ldr	r3, [r7, #8]
 8009b8a:	3304      	adds	r3, #4
 8009b8c:	4619      	mov	r1, r3
 8009b8e:	4610      	mov	r0, r2
 8009b90:	f7fe fccb 	bl	800852a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009b94:	68bb      	ldr	r3, [r7, #8]
 8009b96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b98:	4b1b      	ldr	r3, [pc, #108]	; (8009c08 <xTaskIncrementTick+0x168>)
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b9e:	429a      	cmp	r2, r3
 8009ba0:	d3b8      	bcc.n	8009b14 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8009ba2:	2301      	movs	r3, #1
 8009ba4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009ba6:	e7b5      	b.n	8009b14 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009ba8:	4b17      	ldr	r3, [pc, #92]	; (8009c08 <xTaskIncrementTick+0x168>)
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009bae:	4915      	ldr	r1, [pc, #84]	; (8009c04 <xTaskIncrementTick+0x164>)
 8009bb0:	4613      	mov	r3, r2
 8009bb2:	009b      	lsls	r3, r3, #2
 8009bb4:	4413      	add	r3, r2
 8009bb6:	009b      	lsls	r3, r3, #2
 8009bb8:	440b      	add	r3, r1
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	2b01      	cmp	r3, #1
 8009bbe:	d901      	bls.n	8009bc4 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8009bc0:	2301      	movs	r3, #1
 8009bc2:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8009bc4:	4b11      	ldr	r3, [pc, #68]	; (8009c0c <xTaskIncrementTick+0x16c>)
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	d007      	beq.n	8009bdc <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8009bcc:	2301      	movs	r3, #1
 8009bce:	617b      	str	r3, [r7, #20]
 8009bd0:	e004      	b.n	8009bdc <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8009bd2:	4b0f      	ldr	r3, [pc, #60]	; (8009c10 <xTaskIncrementTick+0x170>)
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	3301      	adds	r3, #1
 8009bd8:	4a0d      	ldr	r2, [pc, #52]	; (8009c10 <xTaskIncrementTick+0x170>)
 8009bda:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8009bdc:	697b      	ldr	r3, [r7, #20]
}
 8009bde:	4618      	mov	r0, r3
 8009be0:	3718      	adds	r7, #24
 8009be2:	46bd      	mov	sp, r7
 8009be4:	bd80      	pop	{r7, pc}
 8009be6:	bf00      	nop
 8009be8:	20004810 	.word	0x20004810
 8009bec:	200047ec 	.word	0x200047ec
 8009bf0:	200047a0 	.word	0x200047a0
 8009bf4:	200047a4 	.word	0x200047a4
 8009bf8:	20004800 	.word	0x20004800
 8009bfc:	20004808 	.word	0x20004808
 8009c00:	200047f0 	.word	0x200047f0
 8009c04:	20004318 	.word	0x20004318
 8009c08:	20004314 	.word	0x20004314
 8009c0c:	200047fc 	.word	0x200047fc
 8009c10:	200047f8 	.word	0x200047f8

08009c14 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009c14:	b480      	push	{r7}
 8009c16:	b085      	sub	sp, #20
 8009c18:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009c1a:	4b28      	ldr	r3, [pc, #160]	; (8009cbc <vTaskSwitchContext+0xa8>)
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d003      	beq.n	8009c2a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009c22:	4b27      	ldr	r3, [pc, #156]	; (8009cc0 <vTaskSwitchContext+0xac>)
 8009c24:	2201      	movs	r2, #1
 8009c26:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009c28:	e041      	b.n	8009cae <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8009c2a:	4b25      	ldr	r3, [pc, #148]	; (8009cc0 <vTaskSwitchContext+0xac>)
 8009c2c:	2200      	movs	r2, #0
 8009c2e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009c30:	4b24      	ldr	r3, [pc, #144]	; (8009cc4 <vTaskSwitchContext+0xb0>)
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	60fb      	str	r3, [r7, #12]
 8009c36:	e010      	b.n	8009c5a <vTaskSwitchContext+0x46>
 8009c38:	68fb      	ldr	r3, [r7, #12]
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	d10a      	bne.n	8009c54 <vTaskSwitchContext+0x40>
	__asm volatile
 8009c3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c42:	f383 8811 	msr	BASEPRI, r3
 8009c46:	f3bf 8f6f 	isb	sy
 8009c4a:	f3bf 8f4f 	dsb	sy
 8009c4e:	607b      	str	r3, [r7, #4]
}
 8009c50:	bf00      	nop
 8009c52:	e7fe      	b.n	8009c52 <vTaskSwitchContext+0x3e>
 8009c54:	68fb      	ldr	r3, [r7, #12]
 8009c56:	3b01      	subs	r3, #1
 8009c58:	60fb      	str	r3, [r7, #12]
 8009c5a:	491b      	ldr	r1, [pc, #108]	; (8009cc8 <vTaskSwitchContext+0xb4>)
 8009c5c:	68fa      	ldr	r2, [r7, #12]
 8009c5e:	4613      	mov	r3, r2
 8009c60:	009b      	lsls	r3, r3, #2
 8009c62:	4413      	add	r3, r2
 8009c64:	009b      	lsls	r3, r3, #2
 8009c66:	440b      	add	r3, r1
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	d0e4      	beq.n	8009c38 <vTaskSwitchContext+0x24>
 8009c6e:	68fa      	ldr	r2, [r7, #12]
 8009c70:	4613      	mov	r3, r2
 8009c72:	009b      	lsls	r3, r3, #2
 8009c74:	4413      	add	r3, r2
 8009c76:	009b      	lsls	r3, r3, #2
 8009c78:	4a13      	ldr	r2, [pc, #76]	; (8009cc8 <vTaskSwitchContext+0xb4>)
 8009c7a:	4413      	add	r3, r2
 8009c7c:	60bb      	str	r3, [r7, #8]
 8009c7e:	68bb      	ldr	r3, [r7, #8]
 8009c80:	685b      	ldr	r3, [r3, #4]
 8009c82:	685a      	ldr	r2, [r3, #4]
 8009c84:	68bb      	ldr	r3, [r7, #8]
 8009c86:	605a      	str	r2, [r3, #4]
 8009c88:	68bb      	ldr	r3, [r7, #8]
 8009c8a:	685a      	ldr	r2, [r3, #4]
 8009c8c:	68bb      	ldr	r3, [r7, #8]
 8009c8e:	3308      	adds	r3, #8
 8009c90:	429a      	cmp	r2, r3
 8009c92:	d104      	bne.n	8009c9e <vTaskSwitchContext+0x8a>
 8009c94:	68bb      	ldr	r3, [r7, #8]
 8009c96:	685b      	ldr	r3, [r3, #4]
 8009c98:	685a      	ldr	r2, [r3, #4]
 8009c9a:	68bb      	ldr	r3, [r7, #8]
 8009c9c:	605a      	str	r2, [r3, #4]
 8009c9e:	68bb      	ldr	r3, [r7, #8]
 8009ca0:	685b      	ldr	r3, [r3, #4]
 8009ca2:	68db      	ldr	r3, [r3, #12]
 8009ca4:	4a09      	ldr	r2, [pc, #36]	; (8009ccc <vTaskSwitchContext+0xb8>)
 8009ca6:	6013      	str	r3, [r2, #0]
 8009ca8:	4a06      	ldr	r2, [pc, #24]	; (8009cc4 <vTaskSwitchContext+0xb0>)
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	6013      	str	r3, [r2, #0]
}
 8009cae:	bf00      	nop
 8009cb0:	3714      	adds	r7, #20
 8009cb2:	46bd      	mov	sp, r7
 8009cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cb8:	4770      	bx	lr
 8009cba:	bf00      	nop
 8009cbc:	20004810 	.word	0x20004810
 8009cc0:	200047fc 	.word	0x200047fc
 8009cc4:	200047f0 	.word	0x200047f0
 8009cc8:	20004318 	.word	0x20004318
 8009ccc:	20004314 	.word	0x20004314

08009cd0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009cd0:	b580      	push	{r7, lr}
 8009cd2:	b084      	sub	sp, #16
 8009cd4:	af00      	add	r7, sp, #0
 8009cd6:	6078      	str	r0, [r7, #4]
 8009cd8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	d10a      	bne.n	8009cf6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8009ce0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ce4:	f383 8811 	msr	BASEPRI, r3
 8009ce8:	f3bf 8f6f 	isb	sy
 8009cec:	f3bf 8f4f 	dsb	sy
 8009cf0:	60fb      	str	r3, [r7, #12]
}
 8009cf2:	bf00      	nop
 8009cf4:	e7fe      	b.n	8009cf4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009cf6:	4b07      	ldr	r3, [pc, #28]	; (8009d14 <vTaskPlaceOnEventList+0x44>)
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	3318      	adds	r3, #24
 8009cfc:	4619      	mov	r1, r3
 8009cfe:	6878      	ldr	r0, [r7, #4]
 8009d00:	f7fe fc37 	bl	8008572 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009d04:	2101      	movs	r1, #1
 8009d06:	6838      	ldr	r0, [r7, #0]
 8009d08:	f000 fa7c 	bl	800a204 <prvAddCurrentTaskToDelayedList>
}
 8009d0c:	bf00      	nop
 8009d0e:	3710      	adds	r7, #16
 8009d10:	46bd      	mov	sp, r7
 8009d12:	bd80      	pop	{r7, pc}
 8009d14:	20004314 	.word	0x20004314

08009d18 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009d18:	b580      	push	{r7, lr}
 8009d1a:	b086      	sub	sp, #24
 8009d1c:	af00      	add	r7, sp, #0
 8009d1e:	60f8      	str	r0, [r7, #12]
 8009d20:	60b9      	str	r1, [r7, #8]
 8009d22:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d10a      	bne.n	8009d40 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8009d2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d2e:	f383 8811 	msr	BASEPRI, r3
 8009d32:	f3bf 8f6f 	isb	sy
 8009d36:	f3bf 8f4f 	dsb	sy
 8009d3a:	617b      	str	r3, [r7, #20]
}
 8009d3c:	bf00      	nop
 8009d3e:	e7fe      	b.n	8009d3e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009d40:	4b0a      	ldr	r3, [pc, #40]	; (8009d6c <vTaskPlaceOnEventListRestricted+0x54>)
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	3318      	adds	r3, #24
 8009d46:	4619      	mov	r1, r3
 8009d48:	68f8      	ldr	r0, [r7, #12]
 8009d4a:	f7fe fbee 	bl	800852a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	d002      	beq.n	8009d5a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8009d54:	f04f 33ff 	mov.w	r3, #4294967295
 8009d58:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009d5a:	6879      	ldr	r1, [r7, #4]
 8009d5c:	68b8      	ldr	r0, [r7, #8]
 8009d5e:	f000 fa51 	bl	800a204 <prvAddCurrentTaskToDelayedList>
	}
 8009d62:	bf00      	nop
 8009d64:	3718      	adds	r7, #24
 8009d66:	46bd      	mov	sp, r7
 8009d68:	bd80      	pop	{r7, pc}
 8009d6a:	bf00      	nop
 8009d6c:	20004314 	.word	0x20004314

08009d70 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009d70:	b580      	push	{r7, lr}
 8009d72:	b086      	sub	sp, #24
 8009d74:	af00      	add	r7, sp, #0
 8009d76:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	68db      	ldr	r3, [r3, #12]
 8009d7c:	68db      	ldr	r3, [r3, #12]
 8009d7e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009d80:	693b      	ldr	r3, [r7, #16]
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	d10a      	bne.n	8009d9c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8009d86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d8a:	f383 8811 	msr	BASEPRI, r3
 8009d8e:	f3bf 8f6f 	isb	sy
 8009d92:	f3bf 8f4f 	dsb	sy
 8009d96:	60fb      	str	r3, [r7, #12]
}
 8009d98:	bf00      	nop
 8009d9a:	e7fe      	b.n	8009d9a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009d9c:	693b      	ldr	r3, [r7, #16]
 8009d9e:	3318      	adds	r3, #24
 8009da0:	4618      	mov	r0, r3
 8009da2:	f7fe fc1f 	bl	80085e4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009da6:	4b1e      	ldr	r3, [pc, #120]	; (8009e20 <xTaskRemoveFromEventList+0xb0>)
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d11d      	bne.n	8009dea <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009dae:	693b      	ldr	r3, [r7, #16]
 8009db0:	3304      	adds	r3, #4
 8009db2:	4618      	mov	r0, r3
 8009db4:	f7fe fc16 	bl	80085e4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009db8:	693b      	ldr	r3, [r7, #16]
 8009dba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009dbc:	4b19      	ldr	r3, [pc, #100]	; (8009e24 <xTaskRemoveFromEventList+0xb4>)
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	429a      	cmp	r2, r3
 8009dc2:	d903      	bls.n	8009dcc <xTaskRemoveFromEventList+0x5c>
 8009dc4:	693b      	ldr	r3, [r7, #16]
 8009dc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009dc8:	4a16      	ldr	r2, [pc, #88]	; (8009e24 <xTaskRemoveFromEventList+0xb4>)
 8009dca:	6013      	str	r3, [r2, #0]
 8009dcc:	693b      	ldr	r3, [r7, #16]
 8009dce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009dd0:	4613      	mov	r3, r2
 8009dd2:	009b      	lsls	r3, r3, #2
 8009dd4:	4413      	add	r3, r2
 8009dd6:	009b      	lsls	r3, r3, #2
 8009dd8:	4a13      	ldr	r2, [pc, #76]	; (8009e28 <xTaskRemoveFromEventList+0xb8>)
 8009dda:	441a      	add	r2, r3
 8009ddc:	693b      	ldr	r3, [r7, #16]
 8009dde:	3304      	adds	r3, #4
 8009de0:	4619      	mov	r1, r3
 8009de2:	4610      	mov	r0, r2
 8009de4:	f7fe fba1 	bl	800852a <vListInsertEnd>
 8009de8:	e005      	b.n	8009df6 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009dea:	693b      	ldr	r3, [r7, #16]
 8009dec:	3318      	adds	r3, #24
 8009dee:	4619      	mov	r1, r3
 8009df0:	480e      	ldr	r0, [pc, #56]	; (8009e2c <xTaskRemoveFromEventList+0xbc>)
 8009df2:	f7fe fb9a 	bl	800852a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009df6:	693b      	ldr	r3, [r7, #16]
 8009df8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009dfa:	4b0d      	ldr	r3, [pc, #52]	; (8009e30 <xTaskRemoveFromEventList+0xc0>)
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e00:	429a      	cmp	r2, r3
 8009e02:	d905      	bls.n	8009e10 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009e04:	2301      	movs	r3, #1
 8009e06:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009e08:	4b0a      	ldr	r3, [pc, #40]	; (8009e34 <xTaskRemoveFromEventList+0xc4>)
 8009e0a:	2201      	movs	r2, #1
 8009e0c:	601a      	str	r2, [r3, #0]
 8009e0e:	e001      	b.n	8009e14 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8009e10:	2300      	movs	r3, #0
 8009e12:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009e14:	697b      	ldr	r3, [r7, #20]
}
 8009e16:	4618      	mov	r0, r3
 8009e18:	3718      	adds	r7, #24
 8009e1a:	46bd      	mov	sp, r7
 8009e1c:	bd80      	pop	{r7, pc}
 8009e1e:	bf00      	nop
 8009e20:	20004810 	.word	0x20004810
 8009e24:	200047f0 	.word	0x200047f0
 8009e28:	20004318 	.word	0x20004318
 8009e2c:	200047a8 	.word	0x200047a8
 8009e30:	20004314 	.word	0x20004314
 8009e34:	200047fc 	.word	0x200047fc

08009e38 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009e38:	b480      	push	{r7}
 8009e3a:	b083      	sub	sp, #12
 8009e3c:	af00      	add	r7, sp, #0
 8009e3e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009e40:	4b06      	ldr	r3, [pc, #24]	; (8009e5c <vTaskInternalSetTimeOutState+0x24>)
 8009e42:	681a      	ldr	r2, [r3, #0]
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009e48:	4b05      	ldr	r3, [pc, #20]	; (8009e60 <vTaskInternalSetTimeOutState+0x28>)
 8009e4a:	681a      	ldr	r2, [r3, #0]
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	605a      	str	r2, [r3, #4]
}
 8009e50:	bf00      	nop
 8009e52:	370c      	adds	r7, #12
 8009e54:	46bd      	mov	sp, r7
 8009e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e5a:	4770      	bx	lr
 8009e5c:	20004800 	.word	0x20004800
 8009e60:	200047ec 	.word	0x200047ec

08009e64 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009e64:	b580      	push	{r7, lr}
 8009e66:	b088      	sub	sp, #32
 8009e68:	af00      	add	r7, sp, #0
 8009e6a:	6078      	str	r0, [r7, #4]
 8009e6c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	d10a      	bne.n	8009e8a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8009e74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e78:	f383 8811 	msr	BASEPRI, r3
 8009e7c:	f3bf 8f6f 	isb	sy
 8009e80:	f3bf 8f4f 	dsb	sy
 8009e84:	613b      	str	r3, [r7, #16]
}
 8009e86:	bf00      	nop
 8009e88:	e7fe      	b.n	8009e88 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8009e8a:	683b      	ldr	r3, [r7, #0]
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	d10a      	bne.n	8009ea6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8009e90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e94:	f383 8811 	msr	BASEPRI, r3
 8009e98:	f3bf 8f6f 	isb	sy
 8009e9c:	f3bf 8f4f 	dsb	sy
 8009ea0:	60fb      	str	r3, [r7, #12]
}
 8009ea2:	bf00      	nop
 8009ea4:	e7fe      	b.n	8009ea4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8009ea6:	f7fe fcf5 	bl	8008894 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009eaa:	4b1d      	ldr	r3, [pc, #116]	; (8009f20 <xTaskCheckForTimeOut+0xbc>)
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	685b      	ldr	r3, [r3, #4]
 8009eb4:	69ba      	ldr	r2, [r7, #24]
 8009eb6:	1ad3      	subs	r3, r2, r3
 8009eb8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009eba:	683b      	ldr	r3, [r7, #0]
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ec2:	d102      	bne.n	8009eca <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009ec4:	2300      	movs	r3, #0
 8009ec6:	61fb      	str	r3, [r7, #28]
 8009ec8:	e023      	b.n	8009f12 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	681a      	ldr	r2, [r3, #0]
 8009ece:	4b15      	ldr	r3, [pc, #84]	; (8009f24 <xTaskCheckForTimeOut+0xc0>)
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	429a      	cmp	r2, r3
 8009ed4:	d007      	beq.n	8009ee6 <xTaskCheckForTimeOut+0x82>
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	685b      	ldr	r3, [r3, #4]
 8009eda:	69ba      	ldr	r2, [r7, #24]
 8009edc:	429a      	cmp	r2, r3
 8009ede:	d302      	bcc.n	8009ee6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009ee0:	2301      	movs	r3, #1
 8009ee2:	61fb      	str	r3, [r7, #28]
 8009ee4:	e015      	b.n	8009f12 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009ee6:	683b      	ldr	r3, [r7, #0]
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	697a      	ldr	r2, [r7, #20]
 8009eec:	429a      	cmp	r2, r3
 8009eee:	d20b      	bcs.n	8009f08 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009ef0:	683b      	ldr	r3, [r7, #0]
 8009ef2:	681a      	ldr	r2, [r3, #0]
 8009ef4:	697b      	ldr	r3, [r7, #20]
 8009ef6:	1ad2      	subs	r2, r2, r3
 8009ef8:	683b      	ldr	r3, [r7, #0]
 8009efa:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009efc:	6878      	ldr	r0, [r7, #4]
 8009efe:	f7ff ff9b 	bl	8009e38 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009f02:	2300      	movs	r3, #0
 8009f04:	61fb      	str	r3, [r7, #28]
 8009f06:	e004      	b.n	8009f12 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8009f08:	683b      	ldr	r3, [r7, #0]
 8009f0a:	2200      	movs	r2, #0
 8009f0c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009f0e:	2301      	movs	r3, #1
 8009f10:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009f12:	f7fe fcef 	bl	80088f4 <vPortExitCritical>

	return xReturn;
 8009f16:	69fb      	ldr	r3, [r7, #28]
}
 8009f18:	4618      	mov	r0, r3
 8009f1a:	3720      	adds	r7, #32
 8009f1c:	46bd      	mov	sp, r7
 8009f1e:	bd80      	pop	{r7, pc}
 8009f20:	200047ec 	.word	0x200047ec
 8009f24:	20004800 	.word	0x20004800

08009f28 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009f28:	b480      	push	{r7}
 8009f2a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009f2c:	4b03      	ldr	r3, [pc, #12]	; (8009f3c <vTaskMissedYield+0x14>)
 8009f2e:	2201      	movs	r2, #1
 8009f30:	601a      	str	r2, [r3, #0]
}
 8009f32:	bf00      	nop
 8009f34:	46bd      	mov	sp, r7
 8009f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f3a:	4770      	bx	lr
 8009f3c:	200047fc 	.word	0x200047fc

08009f40 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009f40:	b580      	push	{r7, lr}
 8009f42:	b082      	sub	sp, #8
 8009f44:	af00      	add	r7, sp, #0
 8009f46:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009f48:	f000 f852 	bl	8009ff0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009f4c:	4b06      	ldr	r3, [pc, #24]	; (8009f68 <prvIdleTask+0x28>)
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	2b01      	cmp	r3, #1
 8009f52:	d9f9      	bls.n	8009f48 <prvIdleTask+0x8>
			{
				taskYIELD();
 8009f54:	4b05      	ldr	r3, [pc, #20]	; (8009f6c <prvIdleTask+0x2c>)
 8009f56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009f5a:	601a      	str	r2, [r3, #0]
 8009f5c:	f3bf 8f4f 	dsb	sy
 8009f60:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009f64:	e7f0      	b.n	8009f48 <prvIdleTask+0x8>
 8009f66:	bf00      	nop
 8009f68:	20004318 	.word	0x20004318
 8009f6c:	e000ed04 	.word	0xe000ed04

08009f70 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009f70:	b580      	push	{r7, lr}
 8009f72:	b082      	sub	sp, #8
 8009f74:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009f76:	2300      	movs	r3, #0
 8009f78:	607b      	str	r3, [r7, #4]
 8009f7a:	e00c      	b.n	8009f96 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009f7c:	687a      	ldr	r2, [r7, #4]
 8009f7e:	4613      	mov	r3, r2
 8009f80:	009b      	lsls	r3, r3, #2
 8009f82:	4413      	add	r3, r2
 8009f84:	009b      	lsls	r3, r3, #2
 8009f86:	4a12      	ldr	r2, [pc, #72]	; (8009fd0 <prvInitialiseTaskLists+0x60>)
 8009f88:	4413      	add	r3, r2
 8009f8a:	4618      	mov	r0, r3
 8009f8c:	f7fe faa0 	bl	80084d0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	3301      	adds	r3, #1
 8009f94:	607b      	str	r3, [r7, #4]
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	2b37      	cmp	r3, #55	; 0x37
 8009f9a:	d9ef      	bls.n	8009f7c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009f9c:	480d      	ldr	r0, [pc, #52]	; (8009fd4 <prvInitialiseTaskLists+0x64>)
 8009f9e:	f7fe fa97 	bl	80084d0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009fa2:	480d      	ldr	r0, [pc, #52]	; (8009fd8 <prvInitialiseTaskLists+0x68>)
 8009fa4:	f7fe fa94 	bl	80084d0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009fa8:	480c      	ldr	r0, [pc, #48]	; (8009fdc <prvInitialiseTaskLists+0x6c>)
 8009faa:	f7fe fa91 	bl	80084d0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009fae:	480c      	ldr	r0, [pc, #48]	; (8009fe0 <prvInitialiseTaskLists+0x70>)
 8009fb0:	f7fe fa8e 	bl	80084d0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009fb4:	480b      	ldr	r0, [pc, #44]	; (8009fe4 <prvInitialiseTaskLists+0x74>)
 8009fb6:	f7fe fa8b 	bl	80084d0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009fba:	4b0b      	ldr	r3, [pc, #44]	; (8009fe8 <prvInitialiseTaskLists+0x78>)
 8009fbc:	4a05      	ldr	r2, [pc, #20]	; (8009fd4 <prvInitialiseTaskLists+0x64>)
 8009fbe:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009fc0:	4b0a      	ldr	r3, [pc, #40]	; (8009fec <prvInitialiseTaskLists+0x7c>)
 8009fc2:	4a05      	ldr	r2, [pc, #20]	; (8009fd8 <prvInitialiseTaskLists+0x68>)
 8009fc4:	601a      	str	r2, [r3, #0]
}
 8009fc6:	bf00      	nop
 8009fc8:	3708      	adds	r7, #8
 8009fca:	46bd      	mov	sp, r7
 8009fcc:	bd80      	pop	{r7, pc}
 8009fce:	bf00      	nop
 8009fd0:	20004318 	.word	0x20004318
 8009fd4:	20004778 	.word	0x20004778
 8009fd8:	2000478c 	.word	0x2000478c
 8009fdc:	200047a8 	.word	0x200047a8
 8009fe0:	200047bc 	.word	0x200047bc
 8009fe4:	200047d4 	.word	0x200047d4
 8009fe8:	200047a0 	.word	0x200047a0
 8009fec:	200047a4 	.word	0x200047a4

08009ff0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009ff0:	b580      	push	{r7, lr}
 8009ff2:	b082      	sub	sp, #8
 8009ff4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009ff6:	e019      	b.n	800a02c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009ff8:	f7fe fc4c 	bl	8008894 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009ffc:	4b10      	ldr	r3, [pc, #64]	; (800a040 <prvCheckTasksWaitingTermination+0x50>)
 8009ffe:	68db      	ldr	r3, [r3, #12]
 800a000:	68db      	ldr	r3, [r3, #12]
 800a002:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	3304      	adds	r3, #4
 800a008:	4618      	mov	r0, r3
 800a00a:	f7fe faeb 	bl	80085e4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a00e:	4b0d      	ldr	r3, [pc, #52]	; (800a044 <prvCheckTasksWaitingTermination+0x54>)
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	3b01      	subs	r3, #1
 800a014:	4a0b      	ldr	r2, [pc, #44]	; (800a044 <prvCheckTasksWaitingTermination+0x54>)
 800a016:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a018:	4b0b      	ldr	r3, [pc, #44]	; (800a048 <prvCheckTasksWaitingTermination+0x58>)
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	3b01      	subs	r3, #1
 800a01e:	4a0a      	ldr	r2, [pc, #40]	; (800a048 <prvCheckTasksWaitingTermination+0x58>)
 800a020:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a022:	f7fe fc67 	bl	80088f4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a026:	6878      	ldr	r0, [r7, #4]
 800a028:	f000 f810 	bl	800a04c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a02c:	4b06      	ldr	r3, [pc, #24]	; (800a048 <prvCheckTasksWaitingTermination+0x58>)
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	2b00      	cmp	r3, #0
 800a032:	d1e1      	bne.n	8009ff8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a034:	bf00      	nop
 800a036:	bf00      	nop
 800a038:	3708      	adds	r7, #8
 800a03a:	46bd      	mov	sp, r7
 800a03c:	bd80      	pop	{r7, pc}
 800a03e:	bf00      	nop
 800a040:	200047bc 	.word	0x200047bc
 800a044:	200047e8 	.word	0x200047e8
 800a048:	200047d0 	.word	0x200047d0

0800a04c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a04c:	b580      	push	{r7, lr}
 800a04e:	b084      	sub	sp, #16
 800a050:	af00      	add	r7, sp, #0
 800a052:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	d108      	bne.n	800a070 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a062:	4618      	mov	r0, r3
 800a064:	f7fe f916 	bl	8008294 <vPortFree>
				vPortFree( pxTCB );
 800a068:	6878      	ldr	r0, [r7, #4]
 800a06a:	f7fe f913 	bl	8008294 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a06e:	e018      	b.n	800a0a2 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800a076:	2b01      	cmp	r3, #1
 800a078:	d103      	bne.n	800a082 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800a07a:	6878      	ldr	r0, [r7, #4]
 800a07c:	f7fe f90a 	bl	8008294 <vPortFree>
	}
 800a080:	e00f      	b.n	800a0a2 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800a088:	2b02      	cmp	r3, #2
 800a08a:	d00a      	beq.n	800a0a2 <prvDeleteTCB+0x56>
	__asm volatile
 800a08c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a090:	f383 8811 	msr	BASEPRI, r3
 800a094:	f3bf 8f6f 	isb	sy
 800a098:	f3bf 8f4f 	dsb	sy
 800a09c:	60fb      	str	r3, [r7, #12]
}
 800a09e:	bf00      	nop
 800a0a0:	e7fe      	b.n	800a0a0 <prvDeleteTCB+0x54>
	}
 800a0a2:	bf00      	nop
 800a0a4:	3710      	adds	r7, #16
 800a0a6:	46bd      	mov	sp, r7
 800a0a8:	bd80      	pop	{r7, pc}
	...

0800a0ac <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a0ac:	b480      	push	{r7}
 800a0ae:	b083      	sub	sp, #12
 800a0b0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a0b2:	4b0c      	ldr	r3, [pc, #48]	; (800a0e4 <prvResetNextTaskUnblockTime+0x38>)
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	d104      	bne.n	800a0c6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a0bc:	4b0a      	ldr	r3, [pc, #40]	; (800a0e8 <prvResetNextTaskUnblockTime+0x3c>)
 800a0be:	f04f 32ff 	mov.w	r2, #4294967295
 800a0c2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a0c4:	e008      	b.n	800a0d8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a0c6:	4b07      	ldr	r3, [pc, #28]	; (800a0e4 <prvResetNextTaskUnblockTime+0x38>)
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	68db      	ldr	r3, [r3, #12]
 800a0cc:	68db      	ldr	r3, [r3, #12]
 800a0ce:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	685b      	ldr	r3, [r3, #4]
 800a0d4:	4a04      	ldr	r2, [pc, #16]	; (800a0e8 <prvResetNextTaskUnblockTime+0x3c>)
 800a0d6:	6013      	str	r3, [r2, #0]
}
 800a0d8:	bf00      	nop
 800a0da:	370c      	adds	r7, #12
 800a0dc:	46bd      	mov	sp, r7
 800a0de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0e2:	4770      	bx	lr
 800a0e4:	200047a0 	.word	0x200047a0
 800a0e8:	20004808 	.word	0x20004808

0800a0ec <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800a0ec:	b480      	push	{r7}
 800a0ee:	b083      	sub	sp, #12
 800a0f0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800a0f2:	4b0b      	ldr	r3, [pc, #44]	; (800a120 <xTaskGetSchedulerState+0x34>)
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	d102      	bne.n	800a100 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a0fa:	2301      	movs	r3, #1
 800a0fc:	607b      	str	r3, [r7, #4]
 800a0fe:	e008      	b.n	800a112 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a100:	4b08      	ldr	r3, [pc, #32]	; (800a124 <xTaskGetSchedulerState+0x38>)
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	2b00      	cmp	r3, #0
 800a106:	d102      	bne.n	800a10e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800a108:	2302      	movs	r3, #2
 800a10a:	607b      	str	r3, [r7, #4]
 800a10c:	e001      	b.n	800a112 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800a10e:	2300      	movs	r3, #0
 800a110:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800a112:	687b      	ldr	r3, [r7, #4]
	}
 800a114:	4618      	mov	r0, r3
 800a116:	370c      	adds	r7, #12
 800a118:	46bd      	mov	sp, r7
 800a11a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a11e:	4770      	bx	lr
 800a120:	200047f4 	.word	0x200047f4
 800a124:	20004810 	.word	0x20004810

0800a128 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800a128:	b580      	push	{r7, lr}
 800a12a:	b086      	sub	sp, #24
 800a12c:	af00      	add	r7, sp, #0
 800a12e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800a134:	2300      	movs	r3, #0
 800a136:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	2b00      	cmp	r3, #0
 800a13c:	d056      	beq.n	800a1ec <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800a13e:	4b2e      	ldr	r3, [pc, #184]	; (800a1f8 <xTaskPriorityDisinherit+0xd0>)
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	693a      	ldr	r2, [r7, #16]
 800a144:	429a      	cmp	r2, r3
 800a146:	d00a      	beq.n	800a15e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800a148:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a14c:	f383 8811 	msr	BASEPRI, r3
 800a150:	f3bf 8f6f 	isb	sy
 800a154:	f3bf 8f4f 	dsb	sy
 800a158:	60fb      	str	r3, [r7, #12]
}
 800a15a:	bf00      	nop
 800a15c:	e7fe      	b.n	800a15c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800a15e:	693b      	ldr	r3, [r7, #16]
 800a160:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a162:	2b00      	cmp	r3, #0
 800a164:	d10a      	bne.n	800a17c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800a166:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a16a:	f383 8811 	msr	BASEPRI, r3
 800a16e:	f3bf 8f6f 	isb	sy
 800a172:	f3bf 8f4f 	dsb	sy
 800a176:	60bb      	str	r3, [r7, #8]
}
 800a178:	bf00      	nop
 800a17a:	e7fe      	b.n	800a17a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800a17c:	693b      	ldr	r3, [r7, #16]
 800a17e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a180:	1e5a      	subs	r2, r3, #1
 800a182:	693b      	ldr	r3, [r7, #16]
 800a184:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a186:	693b      	ldr	r3, [r7, #16]
 800a188:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a18a:	693b      	ldr	r3, [r7, #16]
 800a18c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a18e:	429a      	cmp	r2, r3
 800a190:	d02c      	beq.n	800a1ec <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a192:	693b      	ldr	r3, [r7, #16]
 800a194:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a196:	2b00      	cmp	r3, #0
 800a198:	d128      	bne.n	800a1ec <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a19a:	693b      	ldr	r3, [r7, #16]
 800a19c:	3304      	adds	r3, #4
 800a19e:	4618      	mov	r0, r3
 800a1a0:	f7fe fa20 	bl	80085e4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a1a4:	693b      	ldr	r3, [r7, #16]
 800a1a6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a1a8:	693b      	ldr	r3, [r7, #16]
 800a1aa:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a1ac:	693b      	ldr	r3, [r7, #16]
 800a1ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1b0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a1b4:	693b      	ldr	r3, [r7, #16]
 800a1b6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800a1b8:	693b      	ldr	r3, [r7, #16]
 800a1ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a1bc:	4b0f      	ldr	r3, [pc, #60]	; (800a1fc <xTaskPriorityDisinherit+0xd4>)
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	429a      	cmp	r2, r3
 800a1c2:	d903      	bls.n	800a1cc <xTaskPriorityDisinherit+0xa4>
 800a1c4:	693b      	ldr	r3, [r7, #16]
 800a1c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1c8:	4a0c      	ldr	r2, [pc, #48]	; (800a1fc <xTaskPriorityDisinherit+0xd4>)
 800a1ca:	6013      	str	r3, [r2, #0]
 800a1cc:	693b      	ldr	r3, [r7, #16]
 800a1ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a1d0:	4613      	mov	r3, r2
 800a1d2:	009b      	lsls	r3, r3, #2
 800a1d4:	4413      	add	r3, r2
 800a1d6:	009b      	lsls	r3, r3, #2
 800a1d8:	4a09      	ldr	r2, [pc, #36]	; (800a200 <xTaskPriorityDisinherit+0xd8>)
 800a1da:	441a      	add	r2, r3
 800a1dc:	693b      	ldr	r3, [r7, #16]
 800a1de:	3304      	adds	r3, #4
 800a1e0:	4619      	mov	r1, r3
 800a1e2:	4610      	mov	r0, r2
 800a1e4:	f7fe f9a1 	bl	800852a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800a1e8:	2301      	movs	r3, #1
 800a1ea:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a1ec:	697b      	ldr	r3, [r7, #20]
	}
 800a1ee:	4618      	mov	r0, r3
 800a1f0:	3718      	adds	r7, #24
 800a1f2:	46bd      	mov	sp, r7
 800a1f4:	bd80      	pop	{r7, pc}
 800a1f6:	bf00      	nop
 800a1f8:	20004314 	.word	0x20004314
 800a1fc:	200047f0 	.word	0x200047f0
 800a200:	20004318 	.word	0x20004318

0800a204 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a204:	b580      	push	{r7, lr}
 800a206:	b084      	sub	sp, #16
 800a208:	af00      	add	r7, sp, #0
 800a20a:	6078      	str	r0, [r7, #4]
 800a20c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a20e:	4b21      	ldr	r3, [pc, #132]	; (800a294 <prvAddCurrentTaskToDelayedList+0x90>)
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a214:	4b20      	ldr	r3, [pc, #128]	; (800a298 <prvAddCurrentTaskToDelayedList+0x94>)
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	3304      	adds	r3, #4
 800a21a:	4618      	mov	r0, r3
 800a21c:	f7fe f9e2 	bl	80085e4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a226:	d10a      	bne.n	800a23e <prvAddCurrentTaskToDelayedList+0x3a>
 800a228:	683b      	ldr	r3, [r7, #0]
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	d007      	beq.n	800a23e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a22e:	4b1a      	ldr	r3, [pc, #104]	; (800a298 <prvAddCurrentTaskToDelayedList+0x94>)
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	3304      	adds	r3, #4
 800a234:	4619      	mov	r1, r3
 800a236:	4819      	ldr	r0, [pc, #100]	; (800a29c <prvAddCurrentTaskToDelayedList+0x98>)
 800a238:	f7fe f977 	bl	800852a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a23c:	e026      	b.n	800a28c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a23e:	68fa      	ldr	r2, [r7, #12]
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	4413      	add	r3, r2
 800a244:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a246:	4b14      	ldr	r3, [pc, #80]	; (800a298 <prvAddCurrentTaskToDelayedList+0x94>)
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	68ba      	ldr	r2, [r7, #8]
 800a24c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a24e:	68ba      	ldr	r2, [r7, #8]
 800a250:	68fb      	ldr	r3, [r7, #12]
 800a252:	429a      	cmp	r2, r3
 800a254:	d209      	bcs.n	800a26a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a256:	4b12      	ldr	r3, [pc, #72]	; (800a2a0 <prvAddCurrentTaskToDelayedList+0x9c>)
 800a258:	681a      	ldr	r2, [r3, #0]
 800a25a:	4b0f      	ldr	r3, [pc, #60]	; (800a298 <prvAddCurrentTaskToDelayedList+0x94>)
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	3304      	adds	r3, #4
 800a260:	4619      	mov	r1, r3
 800a262:	4610      	mov	r0, r2
 800a264:	f7fe f985 	bl	8008572 <vListInsert>
}
 800a268:	e010      	b.n	800a28c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a26a:	4b0e      	ldr	r3, [pc, #56]	; (800a2a4 <prvAddCurrentTaskToDelayedList+0xa0>)
 800a26c:	681a      	ldr	r2, [r3, #0]
 800a26e:	4b0a      	ldr	r3, [pc, #40]	; (800a298 <prvAddCurrentTaskToDelayedList+0x94>)
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	3304      	adds	r3, #4
 800a274:	4619      	mov	r1, r3
 800a276:	4610      	mov	r0, r2
 800a278:	f7fe f97b 	bl	8008572 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a27c:	4b0a      	ldr	r3, [pc, #40]	; (800a2a8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	68ba      	ldr	r2, [r7, #8]
 800a282:	429a      	cmp	r2, r3
 800a284:	d202      	bcs.n	800a28c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800a286:	4a08      	ldr	r2, [pc, #32]	; (800a2a8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a288:	68bb      	ldr	r3, [r7, #8]
 800a28a:	6013      	str	r3, [r2, #0]
}
 800a28c:	bf00      	nop
 800a28e:	3710      	adds	r7, #16
 800a290:	46bd      	mov	sp, r7
 800a292:	bd80      	pop	{r7, pc}
 800a294:	200047ec 	.word	0x200047ec
 800a298:	20004314 	.word	0x20004314
 800a29c:	200047d4 	.word	0x200047d4
 800a2a0:	200047a4 	.word	0x200047a4
 800a2a4:	200047a0 	.word	0x200047a0
 800a2a8:	20004808 	.word	0x20004808

0800a2ac <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800a2ac:	b580      	push	{r7, lr}
 800a2ae:	b08a      	sub	sp, #40	; 0x28
 800a2b0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800a2b2:	2300      	movs	r3, #0
 800a2b4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800a2b6:	f000 fb07 	bl	800a8c8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800a2ba:	4b1c      	ldr	r3, [pc, #112]	; (800a32c <xTimerCreateTimerTask+0x80>)
 800a2bc:	681b      	ldr	r3, [r3, #0]
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	d021      	beq.n	800a306 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800a2c2:	2300      	movs	r3, #0
 800a2c4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800a2c6:	2300      	movs	r3, #0
 800a2c8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800a2ca:	1d3a      	adds	r2, r7, #4
 800a2cc:	f107 0108 	add.w	r1, r7, #8
 800a2d0:	f107 030c 	add.w	r3, r7, #12
 800a2d4:	4618      	mov	r0, r3
 800a2d6:	f7fd fef7 	bl	80080c8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800a2da:	6879      	ldr	r1, [r7, #4]
 800a2dc:	68bb      	ldr	r3, [r7, #8]
 800a2de:	68fa      	ldr	r2, [r7, #12]
 800a2e0:	9202      	str	r2, [sp, #8]
 800a2e2:	9301      	str	r3, [sp, #4]
 800a2e4:	2302      	movs	r3, #2
 800a2e6:	9300      	str	r3, [sp, #0]
 800a2e8:	2300      	movs	r3, #0
 800a2ea:	460a      	mov	r2, r1
 800a2ec:	4910      	ldr	r1, [pc, #64]	; (800a330 <xTimerCreateTimerTask+0x84>)
 800a2ee:	4811      	ldr	r0, [pc, #68]	; (800a334 <xTimerCreateTimerTask+0x88>)
 800a2f0:	f7ff f8de 	bl	80094b0 <xTaskCreateStatic>
 800a2f4:	4603      	mov	r3, r0
 800a2f6:	4a10      	ldr	r2, [pc, #64]	; (800a338 <xTimerCreateTimerTask+0x8c>)
 800a2f8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800a2fa:	4b0f      	ldr	r3, [pc, #60]	; (800a338 <xTimerCreateTimerTask+0x8c>)
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	d001      	beq.n	800a306 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800a302:	2301      	movs	r3, #1
 800a304:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800a306:	697b      	ldr	r3, [r7, #20]
 800a308:	2b00      	cmp	r3, #0
 800a30a:	d10a      	bne.n	800a322 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800a30c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a310:	f383 8811 	msr	BASEPRI, r3
 800a314:	f3bf 8f6f 	isb	sy
 800a318:	f3bf 8f4f 	dsb	sy
 800a31c:	613b      	str	r3, [r7, #16]
}
 800a31e:	bf00      	nop
 800a320:	e7fe      	b.n	800a320 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800a322:	697b      	ldr	r3, [r7, #20]
}
 800a324:	4618      	mov	r0, r3
 800a326:	3718      	adds	r7, #24
 800a328:	46bd      	mov	sp, r7
 800a32a:	bd80      	pop	{r7, pc}
 800a32c:	20004844 	.word	0x20004844
 800a330:	0800a9e8 	.word	0x0800a9e8
 800a334:	0800a471 	.word	0x0800a471
 800a338:	20004848 	.word	0x20004848

0800a33c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800a33c:	b580      	push	{r7, lr}
 800a33e:	b08a      	sub	sp, #40	; 0x28
 800a340:	af00      	add	r7, sp, #0
 800a342:	60f8      	str	r0, [r7, #12]
 800a344:	60b9      	str	r1, [r7, #8]
 800a346:	607a      	str	r2, [r7, #4]
 800a348:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800a34a:	2300      	movs	r3, #0
 800a34c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800a34e:	68fb      	ldr	r3, [r7, #12]
 800a350:	2b00      	cmp	r3, #0
 800a352:	d10a      	bne.n	800a36a <xTimerGenericCommand+0x2e>
	__asm volatile
 800a354:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a358:	f383 8811 	msr	BASEPRI, r3
 800a35c:	f3bf 8f6f 	isb	sy
 800a360:	f3bf 8f4f 	dsb	sy
 800a364:	623b      	str	r3, [r7, #32]
}
 800a366:	bf00      	nop
 800a368:	e7fe      	b.n	800a368 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800a36a:	4b1a      	ldr	r3, [pc, #104]	; (800a3d4 <xTimerGenericCommand+0x98>)
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	2b00      	cmp	r3, #0
 800a370:	d02a      	beq.n	800a3c8 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800a372:	68bb      	ldr	r3, [r7, #8]
 800a374:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800a37a:	68fb      	ldr	r3, [r7, #12]
 800a37c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800a37e:	68bb      	ldr	r3, [r7, #8]
 800a380:	2b05      	cmp	r3, #5
 800a382:	dc18      	bgt.n	800a3b6 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800a384:	f7ff feb2 	bl	800a0ec <xTaskGetSchedulerState>
 800a388:	4603      	mov	r3, r0
 800a38a:	2b02      	cmp	r3, #2
 800a38c:	d109      	bne.n	800a3a2 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800a38e:	4b11      	ldr	r3, [pc, #68]	; (800a3d4 <xTimerGenericCommand+0x98>)
 800a390:	6818      	ldr	r0, [r3, #0]
 800a392:	f107 0110 	add.w	r1, r7, #16
 800a396:	2300      	movs	r3, #0
 800a398:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a39a:	f7fe fca1 	bl	8008ce0 <xQueueGenericSend>
 800a39e:	6278      	str	r0, [r7, #36]	; 0x24
 800a3a0:	e012      	b.n	800a3c8 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800a3a2:	4b0c      	ldr	r3, [pc, #48]	; (800a3d4 <xTimerGenericCommand+0x98>)
 800a3a4:	6818      	ldr	r0, [r3, #0]
 800a3a6:	f107 0110 	add.w	r1, r7, #16
 800a3aa:	2300      	movs	r3, #0
 800a3ac:	2200      	movs	r2, #0
 800a3ae:	f7fe fc97 	bl	8008ce0 <xQueueGenericSend>
 800a3b2:	6278      	str	r0, [r7, #36]	; 0x24
 800a3b4:	e008      	b.n	800a3c8 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800a3b6:	4b07      	ldr	r3, [pc, #28]	; (800a3d4 <xTimerGenericCommand+0x98>)
 800a3b8:	6818      	ldr	r0, [r3, #0]
 800a3ba:	f107 0110 	add.w	r1, r7, #16
 800a3be:	2300      	movs	r3, #0
 800a3c0:	683a      	ldr	r2, [r7, #0]
 800a3c2:	f7fe fd8b 	bl	8008edc <xQueueGenericSendFromISR>
 800a3c6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800a3c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a3ca:	4618      	mov	r0, r3
 800a3cc:	3728      	adds	r7, #40	; 0x28
 800a3ce:	46bd      	mov	sp, r7
 800a3d0:	bd80      	pop	{r7, pc}
 800a3d2:	bf00      	nop
 800a3d4:	20004844 	.word	0x20004844

0800a3d8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800a3d8:	b580      	push	{r7, lr}
 800a3da:	b088      	sub	sp, #32
 800a3dc:	af02      	add	r7, sp, #8
 800a3de:	6078      	str	r0, [r7, #4]
 800a3e0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a3e2:	4b22      	ldr	r3, [pc, #136]	; (800a46c <prvProcessExpiredTimer+0x94>)
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	68db      	ldr	r3, [r3, #12]
 800a3e8:	68db      	ldr	r3, [r3, #12]
 800a3ea:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a3ec:	697b      	ldr	r3, [r7, #20]
 800a3ee:	3304      	adds	r3, #4
 800a3f0:	4618      	mov	r0, r3
 800a3f2:	f7fe f8f7 	bl	80085e4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a3f6:	697b      	ldr	r3, [r7, #20]
 800a3f8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a3fc:	f003 0304 	and.w	r3, r3, #4
 800a400:	2b00      	cmp	r3, #0
 800a402:	d022      	beq.n	800a44a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800a404:	697b      	ldr	r3, [r7, #20]
 800a406:	699a      	ldr	r2, [r3, #24]
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	18d1      	adds	r1, r2, r3
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	683a      	ldr	r2, [r7, #0]
 800a410:	6978      	ldr	r0, [r7, #20]
 800a412:	f000 f8d1 	bl	800a5b8 <prvInsertTimerInActiveList>
 800a416:	4603      	mov	r3, r0
 800a418:	2b00      	cmp	r3, #0
 800a41a:	d01f      	beq.n	800a45c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a41c:	2300      	movs	r3, #0
 800a41e:	9300      	str	r3, [sp, #0]
 800a420:	2300      	movs	r3, #0
 800a422:	687a      	ldr	r2, [r7, #4]
 800a424:	2100      	movs	r1, #0
 800a426:	6978      	ldr	r0, [r7, #20]
 800a428:	f7ff ff88 	bl	800a33c <xTimerGenericCommand>
 800a42c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800a42e:	693b      	ldr	r3, [r7, #16]
 800a430:	2b00      	cmp	r3, #0
 800a432:	d113      	bne.n	800a45c <prvProcessExpiredTimer+0x84>
	__asm volatile
 800a434:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a438:	f383 8811 	msr	BASEPRI, r3
 800a43c:	f3bf 8f6f 	isb	sy
 800a440:	f3bf 8f4f 	dsb	sy
 800a444:	60fb      	str	r3, [r7, #12]
}
 800a446:	bf00      	nop
 800a448:	e7fe      	b.n	800a448 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a44a:	697b      	ldr	r3, [r7, #20]
 800a44c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a450:	f023 0301 	bic.w	r3, r3, #1
 800a454:	b2da      	uxtb	r2, r3
 800a456:	697b      	ldr	r3, [r7, #20]
 800a458:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a45c:	697b      	ldr	r3, [r7, #20]
 800a45e:	6a1b      	ldr	r3, [r3, #32]
 800a460:	6978      	ldr	r0, [r7, #20]
 800a462:	4798      	blx	r3
}
 800a464:	bf00      	nop
 800a466:	3718      	adds	r7, #24
 800a468:	46bd      	mov	sp, r7
 800a46a:	bd80      	pop	{r7, pc}
 800a46c:	2000483c 	.word	0x2000483c

0800a470 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800a470:	b580      	push	{r7, lr}
 800a472:	b084      	sub	sp, #16
 800a474:	af00      	add	r7, sp, #0
 800a476:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a478:	f107 0308 	add.w	r3, r7, #8
 800a47c:	4618      	mov	r0, r3
 800a47e:	f000 f857 	bl	800a530 <prvGetNextExpireTime>
 800a482:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800a484:	68bb      	ldr	r3, [r7, #8]
 800a486:	4619      	mov	r1, r3
 800a488:	68f8      	ldr	r0, [r7, #12]
 800a48a:	f000 f803 	bl	800a494 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800a48e:	f000 f8d5 	bl	800a63c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a492:	e7f1      	b.n	800a478 <prvTimerTask+0x8>

0800a494 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800a494:	b580      	push	{r7, lr}
 800a496:	b084      	sub	sp, #16
 800a498:	af00      	add	r7, sp, #0
 800a49a:	6078      	str	r0, [r7, #4]
 800a49c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800a49e:	f7ff fa43 	bl	8009928 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a4a2:	f107 0308 	add.w	r3, r7, #8
 800a4a6:	4618      	mov	r0, r3
 800a4a8:	f000 f866 	bl	800a578 <prvSampleTimeNow>
 800a4ac:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800a4ae:	68bb      	ldr	r3, [r7, #8]
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d130      	bne.n	800a516 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800a4b4:	683b      	ldr	r3, [r7, #0]
 800a4b6:	2b00      	cmp	r3, #0
 800a4b8:	d10a      	bne.n	800a4d0 <prvProcessTimerOrBlockTask+0x3c>
 800a4ba:	687a      	ldr	r2, [r7, #4]
 800a4bc:	68fb      	ldr	r3, [r7, #12]
 800a4be:	429a      	cmp	r2, r3
 800a4c0:	d806      	bhi.n	800a4d0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800a4c2:	f7ff fa3f 	bl	8009944 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800a4c6:	68f9      	ldr	r1, [r7, #12]
 800a4c8:	6878      	ldr	r0, [r7, #4]
 800a4ca:	f7ff ff85 	bl	800a3d8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800a4ce:	e024      	b.n	800a51a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800a4d0:	683b      	ldr	r3, [r7, #0]
 800a4d2:	2b00      	cmp	r3, #0
 800a4d4:	d008      	beq.n	800a4e8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800a4d6:	4b13      	ldr	r3, [pc, #76]	; (800a524 <prvProcessTimerOrBlockTask+0x90>)
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	d101      	bne.n	800a4e4 <prvProcessTimerOrBlockTask+0x50>
 800a4e0:	2301      	movs	r3, #1
 800a4e2:	e000      	b.n	800a4e6 <prvProcessTimerOrBlockTask+0x52>
 800a4e4:	2300      	movs	r3, #0
 800a4e6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800a4e8:	4b0f      	ldr	r3, [pc, #60]	; (800a528 <prvProcessTimerOrBlockTask+0x94>)
 800a4ea:	6818      	ldr	r0, [r3, #0]
 800a4ec:	687a      	ldr	r2, [r7, #4]
 800a4ee:	68fb      	ldr	r3, [r7, #12]
 800a4f0:	1ad3      	subs	r3, r2, r3
 800a4f2:	683a      	ldr	r2, [r7, #0]
 800a4f4:	4619      	mov	r1, r3
 800a4f6:	f7fe ffa7 	bl	8009448 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800a4fa:	f7ff fa23 	bl	8009944 <xTaskResumeAll>
 800a4fe:	4603      	mov	r3, r0
 800a500:	2b00      	cmp	r3, #0
 800a502:	d10a      	bne.n	800a51a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800a504:	4b09      	ldr	r3, [pc, #36]	; (800a52c <prvProcessTimerOrBlockTask+0x98>)
 800a506:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a50a:	601a      	str	r2, [r3, #0]
 800a50c:	f3bf 8f4f 	dsb	sy
 800a510:	f3bf 8f6f 	isb	sy
}
 800a514:	e001      	b.n	800a51a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800a516:	f7ff fa15 	bl	8009944 <xTaskResumeAll>
}
 800a51a:	bf00      	nop
 800a51c:	3710      	adds	r7, #16
 800a51e:	46bd      	mov	sp, r7
 800a520:	bd80      	pop	{r7, pc}
 800a522:	bf00      	nop
 800a524:	20004840 	.word	0x20004840
 800a528:	20004844 	.word	0x20004844
 800a52c:	e000ed04 	.word	0xe000ed04

0800a530 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800a530:	b480      	push	{r7}
 800a532:	b085      	sub	sp, #20
 800a534:	af00      	add	r7, sp, #0
 800a536:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a538:	4b0e      	ldr	r3, [pc, #56]	; (800a574 <prvGetNextExpireTime+0x44>)
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	681b      	ldr	r3, [r3, #0]
 800a53e:	2b00      	cmp	r3, #0
 800a540:	d101      	bne.n	800a546 <prvGetNextExpireTime+0x16>
 800a542:	2201      	movs	r2, #1
 800a544:	e000      	b.n	800a548 <prvGetNextExpireTime+0x18>
 800a546:	2200      	movs	r2, #0
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	2b00      	cmp	r3, #0
 800a552:	d105      	bne.n	800a560 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a554:	4b07      	ldr	r3, [pc, #28]	; (800a574 <prvGetNextExpireTime+0x44>)
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	68db      	ldr	r3, [r3, #12]
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	60fb      	str	r3, [r7, #12]
 800a55e:	e001      	b.n	800a564 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800a560:	2300      	movs	r3, #0
 800a562:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800a564:	68fb      	ldr	r3, [r7, #12]
}
 800a566:	4618      	mov	r0, r3
 800a568:	3714      	adds	r7, #20
 800a56a:	46bd      	mov	sp, r7
 800a56c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a570:	4770      	bx	lr
 800a572:	bf00      	nop
 800a574:	2000483c 	.word	0x2000483c

0800a578 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800a578:	b580      	push	{r7, lr}
 800a57a:	b084      	sub	sp, #16
 800a57c:	af00      	add	r7, sp, #0
 800a57e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800a580:	f7ff fa7e 	bl	8009a80 <xTaskGetTickCount>
 800a584:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800a586:	4b0b      	ldr	r3, [pc, #44]	; (800a5b4 <prvSampleTimeNow+0x3c>)
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	68fa      	ldr	r2, [r7, #12]
 800a58c:	429a      	cmp	r2, r3
 800a58e:	d205      	bcs.n	800a59c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800a590:	f000 f936 	bl	800a800 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	2201      	movs	r2, #1
 800a598:	601a      	str	r2, [r3, #0]
 800a59a:	e002      	b.n	800a5a2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	2200      	movs	r2, #0
 800a5a0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800a5a2:	4a04      	ldr	r2, [pc, #16]	; (800a5b4 <prvSampleTimeNow+0x3c>)
 800a5a4:	68fb      	ldr	r3, [r7, #12]
 800a5a6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800a5a8:	68fb      	ldr	r3, [r7, #12]
}
 800a5aa:	4618      	mov	r0, r3
 800a5ac:	3710      	adds	r7, #16
 800a5ae:	46bd      	mov	sp, r7
 800a5b0:	bd80      	pop	{r7, pc}
 800a5b2:	bf00      	nop
 800a5b4:	2000484c 	.word	0x2000484c

0800a5b8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800a5b8:	b580      	push	{r7, lr}
 800a5ba:	b086      	sub	sp, #24
 800a5bc:	af00      	add	r7, sp, #0
 800a5be:	60f8      	str	r0, [r7, #12]
 800a5c0:	60b9      	str	r1, [r7, #8]
 800a5c2:	607a      	str	r2, [r7, #4]
 800a5c4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800a5c6:	2300      	movs	r3, #0
 800a5c8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a5ca:	68fb      	ldr	r3, [r7, #12]
 800a5cc:	68ba      	ldr	r2, [r7, #8]
 800a5ce:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a5d0:	68fb      	ldr	r3, [r7, #12]
 800a5d2:	68fa      	ldr	r2, [r7, #12]
 800a5d4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800a5d6:	68ba      	ldr	r2, [r7, #8]
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	429a      	cmp	r2, r3
 800a5dc:	d812      	bhi.n	800a604 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a5de:	687a      	ldr	r2, [r7, #4]
 800a5e0:	683b      	ldr	r3, [r7, #0]
 800a5e2:	1ad2      	subs	r2, r2, r3
 800a5e4:	68fb      	ldr	r3, [r7, #12]
 800a5e6:	699b      	ldr	r3, [r3, #24]
 800a5e8:	429a      	cmp	r2, r3
 800a5ea:	d302      	bcc.n	800a5f2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800a5ec:	2301      	movs	r3, #1
 800a5ee:	617b      	str	r3, [r7, #20]
 800a5f0:	e01b      	b.n	800a62a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a5f2:	4b10      	ldr	r3, [pc, #64]	; (800a634 <prvInsertTimerInActiveList+0x7c>)
 800a5f4:	681a      	ldr	r2, [r3, #0]
 800a5f6:	68fb      	ldr	r3, [r7, #12]
 800a5f8:	3304      	adds	r3, #4
 800a5fa:	4619      	mov	r1, r3
 800a5fc:	4610      	mov	r0, r2
 800a5fe:	f7fd ffb8 	bl	8008572 <vListInsert>
 800a602:	e012      	b.n	800a62a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a604:	687a      	ldr	r2, [r7, #4]
 800a606:	683b      	ldr	r3, [r7, #0]
 800a608:	429a      	cmp	r2, r3
 800a60a:	d206      	bcs.n	800a61a <prvInsertTimerInActiveList+0x62>
 800a60c:	68ba      	ldr	r2, [r7, #8]
 800a60e:	683b      	ldr	r3, [r7, #0]
 800a610:	429a      	cmp	r2, r3
 800a612:	d302      	bcc.n	800a61a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800a614:	2301      	movs	r3, #1
 800a616:	617b      	str	r3, [r7, #20]
 800a618:	e007      	b.n	800a62a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a61a:	4b07      	ldr	r3, [pc, #28]	; (800a638 <prvInsertTimerInActiveList+0x80>)
 800a61c:	681a      	ldr	r2, [r3, #0]
 800a61e:	68fb      	ldr	r3, [r7, #12]
 800a620:	3304      	adds	r3, #4
 800a622:	4619      	mov	r1, r3
 800a624:	4610      	mov	r0, r2
 800a626:	f7fd ffa4 	bl	8008572 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800a62a:	697b      	ldr	r3, [r7, #20]
}
 800a62c:	4618      	mov	r0, r3
 800a62e:	3718      	adds	r7, #24
 800a630:	46bd      	mov	sp, r7
 800a632:	bd80      	pop	{r7, pc}
 800a634:	20004840 	.word	0x20004840
 800a638:	2000483c 	.word	0x2000483c

0800a63c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800a63c:	b580      	push	{r7, lr}
 800a63e:	b08e      	sub	sp, #56	; 0x38
 800a640:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a642:	e0ca      	b.n	800a7da <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	2b00      	cmp	r3, #0
 800a648:	da18      	bge.n	800a67c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800a64a:	1d3b      	adds	r3, r7, #4
 800a64c:	3304      	adds	r3, #4
 800a64e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800a650:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a652:	2b00      	cmp	r3, #0
 800a654:	d10a      	bne.n	800a66c <prvProcessReceivedCommands+0x30>
	__asm volatile
 800a656:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a65a:	f383 8811 	msr	BASEPRI, r3
 800a65e:	f3bf 8f6f 	isb	sy
 800a662:	f3bf 8f4f 	dsb	sy
 800a666:	61fb      	str	r3, [r7, #28]
}
 800a668:	bf00      	nop
 800a66a:	e7fe      	b.n	800a66a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800a66c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a672:	6850      	ldr	r0, [r2, #4]
 800a674:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a676:	6892      	ldr	r2, [r2, #8]
 800a678:	4611      	mov	r1, r2
 800a67a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	2b00      	cmp	r3, #0
 800a680:	f2c0 80aa 	blt.w	800a7d8 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800a684:	68fb      	ldr	r3, [r7, #12]
 800a686:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800a688:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a68a:	695b      	ldr	r3, [r3, #20]
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	d004      	beq.n	800a69a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a690:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a692:	3304      	adds	r3, #4
 800a694:	4618      	mov	r0, r3
 800a696:	f7fd ffa5 	bl	80085e4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a69a:	463b      	mov	r3, r7
 800a69c:	4618      	mov	r0, r3
 800a69e:	f7ff ff6b 	bl	800a578 <prvSampleTimeNow>
 800a6a2:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	2b09      	cmp	r3, #9
 800a6a8:	f200 8097 	bhi.w	800a7da <prvProcessReceivedCommands+0x19e>
 800a6ac:	a201      	add	r2, pc, #4	; (adr r2, 800a6b4 <prvProcessReceivedCommands+0x78>)
 800a6ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6b2:	bf00      	nop
 800a6b4:	0800a6dd 	.word	0x0800a6dd
 800a6b8:	0800a6dd 	.word	0x0800a6dd
 800a6bc:	0800a6dd 	.word	0x0800a6dd
 800a6c0:	0800a751 	.word	0x0800a751
 800a6c4:	0800a765 	.word	0x0800a765
 800a6c8:	0800a7af 	.word	0x0800a7af
 800a6cc:	0800a6dd 	.word	0x0800a6dd
 800a6d0:	0800a6dd 	.word	0x0800a6dd
 800a6d4:	0800a751 	.word	0x0800a751
 800a6d8:	0800a765 	.word	0x0800a765
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a6dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6de:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a6e2:	f043 0301 	orr.w	r3, r3, #1
 800a6e6:	b2da      	uxtb	r2, r3
 800a6e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6ea:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a6ee:	68ba      	ldr	r2, [r7, #8]
 800a6f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6f2:	699b      	ldr	r3, [r3, #24]
 800a6f4:	18d1      	adds	r1, r2, r3
 800a6f6:	68bb      	ldr	r3, [r7, #8]
 800a6f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a6fa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a6fc:	f7ff ff5c 	bl	800a5b8 <prvInsertTimerInActiveList>
 800a700:	4603      	mov	r3, r0
 800a702:	2b00      	cmp	r3, #0
 800a704:	d069      	beq.n	800a7da <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a706:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a708:	6a1b      	ldr	r3, [r3, #32]
 800a70a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a70c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a70e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a710:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a714:	f003 0304 	and.w	r3, r3, #4
 800a718:	2b00      	cmp	r3, #0
 800a71a:	d05e      	beq.n	800a7da <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800a71c:	68ba      	ldr	r2, [r7, #8]
 800a71e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a720:	699b      	ldr	r3, [r3, #24]
 800a722:	441a      	add	r2, r3
 800a724:	2300      	movs	r3, #0
 800a726:	9300      	str	r3, [sp, #0]
 800a728:	2300      	movs	r3, #0
 800a72a:	2100      	movs	r1, #0
 800a72c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a72e:	f7ff fe05 	bl	800a33c <xTimerGenericCommand>
 800a732:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800a734:	6a3b      	ldr	r3, [r7, #32]
 800a736:	2b00      	cmp	r3, #0
 800a738:	d14f      	bne.n	800a7da <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800a73a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a73e:	f383 8811 	msr	BASEPRI, r3
 800a742:	f3bf 8f6f 	isb	sy
 800a746:	f3bf 8f4f 	dsb	sy
 800a74a:	61bb      	str	r3, [r7, #24]
}
 800a74c:	bf00      	nop
 800a74e:	e7fe      	b.n	800a74e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a750:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a752:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a756:	f023 0301 	bic.w	r3, r3, #1
 800a75a:	b2da      	uxtb	r2, r3
 800a75c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a75e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800a762:	e03a      	b.n	800a7da <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a764:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a766:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a76a:	f043 0301 	orr.w	r3, r3, #1
 800a76e:	b2da      	uxtb	r2, r3
 800a770:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a772:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800a776:	68ba      	ldr	r2, [r7, #8]
 800a778:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a77a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800a77c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a77e:	699b      	ldr	r3, [r3, #24]
 800a780:	2b00      	cmp	r3, #0
 800a782:	d10a      	bne.n	800a79a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800a784:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a788:	f383 8811 	msr	BASEPRI, r3
 800a78c:	f3bf 8f6f 	isb	sy
 800a790:	f3bf 8f4f 	dsb	sy
 800a794:	617b      	str	r3, [r7, #20]
}
 800a796:	bf00      	nop
 800a798:	e7fe      	b.n	800a798 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a79a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a79c:	699a      	ldr	r2, [r3, #24]
 800a79e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7a0:	18d1      	adds	r1, r2, r3
 800a7a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a7a6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a7a8:	f7ff ff06 	bl	800a5b8 <prvInsertTimerInActiveList>
					break;
 800a7ac:	e015      	b.n	800a7da <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800a7ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7b0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a7b4:	f003 0302 	and.w	r3, r3, #2
 800a7b8:	2b00      	cmp	r3, #0
 800a7ba:	d103      	bne.n	800a7c4 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800a7bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a7be:	f7fd fd69 	bl	8008294 <vPortFree>
 800a7c2:	e00a      	b.n	800a7da <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a7c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7c6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a7ca:	f023 0301 	bic.w	r3, r3, #1
 800a7ce:	b2da      	uxtb	r2, r3
 800a7d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7d2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800a7d6:	e000      	b.n	800a7da <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800a7d8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a7da:	4b08      	ldr	r3, [pc, #32]	; (800a7fc <prvProcessReceivedCommands+0x1c0>)
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	1d39      	adds	r1, r7, #4
 800a7e0:	2200      	movs	r2, #0
 800a7e2:	4618      	mov	r0, r3
 800a7e4:	f7fe fc16 	bl	8009014 <xQueueReceive>
 800a7e8:	4603      	mov	r3, r0
 800a7ea:	2b00      	cmp	r3, #0
 800a7ec:	f47f af2a 	bne.w	800a644 <prvProcessReceivedCommands+0x8>
	}
}
 800a7f0:	bf00      	nop
 800a7f2:	bf00      	nop
 800a7f4:	3730      	adds	r7, #48	; 0x30
 800a7f6:	46bd      	mov	sp, r7
 800a7f8:	bd80      	pop	{r7, pc}
 800a7fa:	bf00      	nop
 800a7fc:	20004844 	.word	0x20004844

0800a800 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800a800:	b580      	push	{r7, lr}
 800a802:	b088      	sub	sp, #32
 800a804:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a806:	e048      	b.n	800a89a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a808:	4b2d      	ldr	r3, [pc, #180]	; (800a8c0 <prvSwitchTimerLists+0xc0>)
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	68db      	ldr	r3, [r3, #12]
 800a80e:	681b      	ldr	r3, [r3, #0]
 800a810:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a812:	4b2b      	ldr	r3, [pc, #172]	; (800a8c0 <prvSwitchTimerLists+0xc0>)
 800a814:	681b      	ldr	r3, [r3, #0]
 800a816:	68db      	ldr	r3, [r3, #12]
 800a818:	68db      	ldr	r3, [r3, #12]
 800a81a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a81c:	68fb      	ldr	r3, [r7, #12]
 800a81e:	3304      	adds	r3, #4
 800a820:	4618      	mov	r0, r3
 800a822:	f7fd fedf 	bl	80085e4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a826:	68fb      	ldr	r3, [r7, #12]
 800a828:	6a1b      	ldr	r3, [r3, #32]
 800a82a:	68f8      	ldr	r0, [r7, #12]
 800a82c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a82e:	68fb      	ldr	r3, [r7, #12]
 800a830:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a834:	f003 0304 	and.w	r3, r3, #4
 800a838:	2b00      	cmp	r3, #0
 800a83a:	d02e      	beq.n	800a89a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a83c:	68fb      	ldr	r3, [r7, #12]
 800a83e:	699b      	ldr	r3, [r3, #24]
 800a840:	693a      	ldr	r2, [r7, #16]
 800a842:	4413      	add	r3, r2
 800a844:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800a846:	68ba      	ldr	r2, [r7, #8]
 800a848:	693b      	ldr	r3, [r7, #16]
 800a84a:	429a      	cmp	r2, r3
 800a84c:	d90e      	bls.n	800a86c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800a84e:	68fb      	ldr	r3, [r7, #12]
 800a850:	68ba      	ldr	r2, [r7, #8]
 800a852:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a854:	68fb      	ldr	r3, [r7, #12]
 800a856:	68fa      	ldr	r2, [r7, #12]
 800a858:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a85a:	4b19      	ldr	r3, [pc, #100]	; (800a8c0 <prvSwitchTimerLists+0xc0>)
 800a85c:	681a      	ldr	r2, [r3, #0]
 800a85e:	68fb      	ldr	r3, [r7, #12]
 800a860:	3304      	adds	r3, #4
 800a862:	4619      	mov	r1, r3
 800a864:	4610      	mov	r0, r2
 800a866:	f7fd fe84 	bl	8008572 <vListInsert>
 800a86a:	e016      	b.n	800a89a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a86c:	2300      	movs	r3, #0
 800a86e:	9300      	str	r3, [sp, #0]
 800a870:	2300      	movs	r3, #0
 800a872:	693a      	ldr	r2, [r7, #16]
 800a874:	2100      	movs	r1, #0
 800a876:	68f8      	ldr	r0, [r7, #12]
 800a878:	f7ff fd60 	bl	800a33c <xTimerGenericCommand>
 800a87c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	2b00      	cmp	r3, #0
 800a882:	d10a      	bne.n	800a89a <prvSwitchTimerLists+0x9a>
	__asm volatile
 800a884:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a888:	f383 8811 	msr	BASEPRI, r3
 800a88c:	f3bf 8f6f 	isb	sy
 800a890:	f3bf 8f4f 	dsb	sy
 800a894:	603b      	str	r3, [r7, #0]
}
 800a896:	bf00      	nop
 800a898:	e7fe      	b.n	800a898 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a89a:	4b09      	ldr	r3, [pc, #36]	; (800a8c0 <prvSwitchTimerLists+0xc0>)
 800a89c:	681b      	ldr	r3, [r3, #0]
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	2b00      	cmp	r3, #0
 800a8a2:	d1b1      	bne.n	800a808 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800a8a4:	4b06      	ldr	r3, [pc, #24]	; (800a8c0 <prvSwitchTimerLists+0xc0>)
 800a8a6:	681b      	ldr	r3, [r3, #0]
 800a8a8:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800a8aa:	4b06      	ldr	r3, [pc, #24]	; (800a8c4 <prvSwitchTimerLists+0xc4>)
 800a8ac:	681b      	ldr	r3, [r3, #0]
 800a8ae:	4a04      	ldr	r2, [pc, #16]	; (800a8c0 <prvSwitchTimerLists+0xc0>)
 800a8b0:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800a8b2:	4a04      	ldr	r2, [pc, #16]	; (800a8c4 <prvSwitchTimerLists+0xc4>)
 800a8b4:	697b      	ldr	r3, [r7, #20]
 800a8b6:	6013      	str	r3, [r2, #0]
}
 800a8b8:	bf00      	nop
 800a8ba:	3718      	adds	r7, #24
 800a8bc:	46bd      	mov	sp, r7
 800a8be:	bd80      	pop	{r7, pc}
 800a8c0:	2000483c 	.word	0x2000483c
 800a8c4:	20004840 	.word	0x20004840

0800a8c8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800a8c8:	b580      	push	{r7, lr}
 800a8ca:	b082      	sub	sp, #8
 800a8cc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800a8ce:	f7fd ffe1 	bl	8008894 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800a8d2:	4b15      	ldr	r3, [pc, #84]	; (800a928 <prvCheckForValidListAndQueue+0x60>)
 800a8d4:	681b      	ldr	r3, [r3, #0]
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	d120      	bne.n	800a91c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800a8da:	4814      	ldr	r0, [pc, #80]	; (800a92c <prvCheckForValidListAndQueue+0x64>)
 800a8dc:	f7fd fdf8 	bl	80084d0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a8e0:	4813      	ldr	r0, [pc, #76]	; (800a930 <prvCheckForValidListAndQueue+0x68>)
 800a8e2:	f7fd fdf5 	bl	80084d0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a8e6:	4b13      	ldr	r3, [pc, #76]	; (800a934 <prvCheckForValidListAndQueue+0x6c>)
 800a8e8:	4a10      	ldr	r2, [pc, #64]	; (800a92c <prvCheckForValidListAndQueue+0x64>)
 800a8ea:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a8ec:	4b12      	ldr	r3, [pc, #72]	; (800a938 <prvCheckForValidListAndQueue+0x70>)
 800a8ee:	4a10      	ldr	r2, [pc, #64]	; (800a930 <prvCheckForValidListAndQueue+0x68>)
 800a8f0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a8f2:	2300      	movs	r3, #0
 800a8f4:	9300      	str	r3, [sp, #0]
 800a8f6:	4b11      	ldr	r3, [pc, #68]	; (800a93c <prvCheckForValidListAndQueue+0x74>)
 800a8f8:	4a11      	ldr	r2, [pc, #68]	; (800a940 <prvCheckForValidListAndQueue+0x78>)
 800a8fa:	2110      	movs	r1, #16
 800a8fc:	200a      	movs	r0, #10
 800a8fe:	f7fe f953 	bl	8008ba8 <xQueueGenericCreateStatic>
 800a902:	4603      	mov	r3, r0
 800a904:	4a08      	ldr	r2, [pc, #32]	; (800a928 <prvCheckForValidListAndQueue+0x60>)
 800a906:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800a908:	4b07      	ldr	r3, [pc, #28]	; (800a928 <prvCheckForValidListAndQueue+0x60>)
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	2b00      	cmp	r3, #0
 800a90e:	d005      	beq.n	800a91c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a910:	4b05      	ldr	r3, [pc, #20]	; (800a928 <prvCheckForValidListAndQueue+0x60>)
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	490b      	ldr	r1, [pc, #44]	; (800a944 <prvCheckForValidListAndQueue+0x7c>)
 800a916:	4618      	mov	r0, r3
 800a918:	f7fe fd6c 	bl	80093f4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a91c:	f7fd ffea 	bl	80088f4 <vPortExitCritical>
}
 800a920:	bf00      	nop
 800a922:	46bd      	mov	sp, r7
 800a924:	bd80      	pop	{r7, pc}
 800a926:	bf00      	nop
 800a928:	20004844 	.word	0x20004844
 800a92c:	20004814 	.word	0x20004814
 800a930:	20004828 	.word	0x20004828
 800a934:	2000483c 	.word	0x2000483c
 800a938:	20004840 	.word	0x20004840
 800a93c:	200048f0 	.word	0x200048f0
 800a940:	20004850 	.word	0x20004850
 800a944:	0800a9f0 	.word	0x0800a9f0

0800a948 <__libc_init_array>:
 800a948:	b570      	push	{r4, r5, r6, lr}
 800a94a:	4d0d      	ldr	r5, [pc, #52]	; (800a980 <__libc_init_array+0x38>)
 800a94c:	4c0d      	ldr	r4, [pc, #52]	; (800a984 <__libc_init_array+0x3c>)
 800a94e:	1b64      	subs	r4, r4, r5
 800a950:	10a4      	asrs	r4, r4, #2
 800a952:	2600      	movs	r6, #0
 800a954:	42a6      	cmp	r6, r4
 800a956:	d109      	bne.n	800a96c <__libc_init_array+0x24>
 800a958:	4d0b      	ldr	r5, [pc, #44]	; (800a988 <__libc_init_array+0x40>)
 800a95a:	4c0c      	ldr	r4, [pc, #48]	; (800a98c <__libc_init_array+0x44>)
 800a95c:	f000 f82e 	bl	800a9bc <_init>
 800a960:	1b64      	subs	r4, r4, r5
 800a962:	10a4      	asrs	r4, r4, #2
 800a964:	2600      	movs	r6, #0
 800a966:	42a6      	cmp	r6, r4
 800a968:	d105      	bne.n	800a976 <__libc_init_array+0x2e>
 800a96a:	bd70      	pop	{r4, r5, r6, pc}
 800a96c:	f855 3b04 	ldr.w	r3, [r5], #4
 800a970:	4798      	blx	r3
 800a972:	3601      	adds	r6, #1
 800a974:	e7ee      	b.n	800a954 <__libc_init_array+0xc>
 800a976:	f855 3b04 	ldr.w	r3, [r5], #4
 800a97a:	4798      	blx	r3
 800a97c:	3601      	adds	r6, #1
 800a97e:	e7f2      	b.n	800a966 <__libc_init_array+0x1e>
 800a980:	0800aa64 	.word	0x0800aa64
 800a984:	0800aa64 	.word	0x0800aa64
 800a988:	0800aa64 	.word	0x0800aa64
 800a98c:	0800aa68 	.word	0x0800aa68

0800a990 <memcpy>:
 800a990:	440a      	add	r2, r1
 800a992:	4291      	cmp	r1, r2
 800a994:	f100 33ff 	add.w	r3, r0, #4294967295
 800a998:	d100      	bne.n	800a99c <memcpy+0xc>
 800a99a:	4770      	bx	lr
 800a99c:	b510      	push	{r4, lr}
 800a99e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a9a2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a9a6:	4291      	cmp	r1, r2
 800a9a8:	d1f9      	bne.n	800a99e <memcpy+0xe>
 800a9aa:	bd10      	pop	{r4, pc}

0800a9ac <memset>:
 800a9ac:	4402      	add	r2, r0
 800a9ae:	4603      	mov	r3, r0
 800a9b0:	4293      	cmp	r3, r2
 800a9b2:	d100      	bne.n	800a9b6 <memset+0xa>
 800a9b4:	4770      	bx	lr
 800a9b6:	f803 1b01 	strb.w	r1, [r3], #1
 800a9ba:	e7f9      	b.n	800a9b0 <memset+0x4>

0800a9bc <_init>:
 800a9bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a9be:	bf00      	nop
 800a9c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a9c2:	bc08      	pop	{r3}
 800a9c4:	469e      	mov	lr, r3
 800a9c6:	4770      	bx	lr

0800a9c8 <_fini>:
 800a9c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a9ca:	bf00      	nop
 800a9cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a9ce:	bc08      	pop	{r3}
 800a9d0:	469e      	mov	lr, r3
 800a9d2:	4770      	bx	lr
